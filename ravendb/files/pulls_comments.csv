pull_no,comment_no,comment_body
408,278604,"b'Check was added to alert developers who are unaware of the added ValueTypeKey property. If, for some reason, they start to use ShardedDocumentSession.Load<T>(ValueType id) as well, they will get an exception in the ShardResolutionStrategy when they are accessing the string-typed Key property.\n'"
408,278617,"b'This worked fine on a single instance DB, but threw an exception when using a sharded DB.\n'"
408,278620,b'Load was implemented without using the sharded nature of the store. This has now been updated.\n'
552,11952579,"b'The or statement looks suspiciously like the same statement in GenerateEntityIdOnTheClient, but it is inversed.  Instead of going ahead and generating the id, it is instead indicates we are done already.\n'"
552,11952732,"b'Not sure why this is static, made it an instance method so I can access the new shared method to do coercion to string if the property type is not already a string.\n'"
563,16816268,b'This is where the issue occurs - ConfigureRequest puts the default Timeout value back onto the request \n'
563,16816280,b'By switching we ensure the desired timeout is kept.\n'
592,30507840,b'Is this the type of storage to use? `Voron` or `Esent`? Default is `Voron` ? Docs (which I copied) say `munin` also.. ??\n'
592,30507909,"b'These are custom bundles? How does this differ to `activeBundles`, below?\n\nLink to an example how this is setup (how i would create an instance, which is to be passed in) would be awesome, please.\n'"
592,30507938,b'Is this about the license? whether to use one or not?\n'
592,30507954,b'Not sure what this is....\n'
592,30577650,"b'Yes, Voron / Esent.\nMunin is no longer used in 3.0\n'"
592,30577694,"b""activeBundles are always compiled and present, but are switched on / off on demand.\n\ncatalog contains user custom bundles (stuff that doesn't come with RavenDB)\n"""
592,30577713,"b'Yes, in general, you can ignore that. This is used internally to enable auth for tests that require it.\n'"
592,30577733,"b'configureStore is an Action delegate, that allow you to configure the DocumentStore instance that you get back.\n'"
592,30684206,"b""This method signature is interesting. Right now it's designed to take a collection of collections:\n\neg. \n\n```\nvar seedData = new IEnumerable[]\n        {\n            FakeModelHelpers.CreateFakeCats(),\n            FakeModelHelpers.CreateFakeDogs()\n        };\n```\n\nBut i was wondering if it might be kewl to make it accept just a single object and I try and see if that object is `Enumerable` and if so, iterate through it? (and do that 2x - first for the top collection, 2nd check for the items in each collection).\n\nWhy? just to make it easier for a developer to consume this method.\neg.\n\n```\nvar seedData = new Cat();\nvar seedData = CreateFakeCats(); // IEnumerable<Cat>\nvar seedData = new IEnumerable[] { .. // as above in the top of this comment ... };\n```\n"""
592,30792200,"b'It is better to have multiple overloads, rather than something that does so\nmuch dynamic magic.\n\n*Hibernating Rhinos Ltd  *\n\nOren Eini\\* l CEO l *Mobile: + 972-52-548-6969\n\nOffice: +972-4-622-7811 *l *Fax: +972-153-4-622-7811\n\nOn Wed, May 20, 2015 at 12:28 PM, Pure Krome notifications@github.com\nwrote:\n\n> In Raven.Tests.Helpers/RavenTestBase.cs\n> https://github.com/ravendb/ravendb/pull/592#discussion_r30684206:\n> \n> > @@ -865,5 +962,65 @@ protected static void DeployNorthwind(DocumentStore store, string databaseName =\n> >             var request = requestFactory.CreateHttpJsonRequest(new CreateHttpJsonRequestParams(null, url + ""/studio-tasks/createSampleData"", ""POST"", store.DatabaseCommands.PrimaryCredentials, store.Conventions));\n> >             request.ExecuteRequest();\n> >         }\n> > +\n> > -        private static void StoreSeedData(IEnumerable<IEnumerable> seedData,\n> \n> This method signature is interesting. Right now it\'s designed to take a\n> collection of collections:\n> \n> eg.\n> \n> var seedData = new IEnumerable[]\n>         {\n>             FakeModelHelpers.CreateFakeCats(),\n>             FakeModelHelpers.CreateFakeDogs()\n>         };\n> \n> But i was wondering if it might be kewl to make it accept just a single\n> object and I try and see if that object is Enumerable and if so, iterate\n> through it? (and do that 2x - first for the top collection, 2nd check for\n> the items in each collection).\n> \n> Why? just to make it easier for a developer to consume this method.\n> eg.\n> \n> var seedData = new Cat();\n> var seedData = CreateFakeCats(); // IEnumerable<Cat>\n> var seedData = new IEnumerable[] { .. // as above in the top of this comment ... };\n> \n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> https://github.com/ravendb/ravendb/pull/592/files#r30684206.\n'"
592,30799442,"b""I thought so too - when dynamic magic is involved it's extremely hard for developers to discover what it can do.\n\nI'll go and add some new overloads to make it more awesome for developers. I'll update the PR now :)\n"""
592,30801349,"b""Damn it. Just added 2 more methods with a different (last) overload and the calling code doesn't know which one to use (if no seed data was provided).\n\nSo I'll just leave the PR as it is then. Drats! was hoping to be tricky :)\n"""
592,30803262,"b'Okay, are there any other changes you want to make before we pull this in?\n'"
592,30803337,b'Nope :cake: :balloon: :tada: \n'
606,40351334,b'you can use AsyncHelpers for this instead of introducing AsyncPump:\nhttps://github.com/ravendb/ravendb/blob/master/Raven.Abstractions/Util/AsyncHelpers.cs\n'
606,40366335,"b""I'll have a look after I got some feedback about the chances that this PR gets accepted\n"""
627,48123592,"b""This is a breaking change in the API.\nWe can't apply it in 3.x - Can you send the same PR for 4.0?\n"""
627,48158388,"b""Hmm... I don't see separate branch for that, so I assume you want me to send same PR simply later in time, is that correct?\nIs there any roadmap and dates when 4.x release is scheduled?\n"""
627,48224327,b'Here the the 4.0 branch: https://github.com/ayende/ravendb/tree/v4.0\n'
687,84258088,"b'Not sure that this is a good idea. In fact, this is probably a bad idea.\nWe want to avoid exposing ourselves over the network unless the admin explicitly said so, no?\n'"
683,84289161,b'Did you remove them completely? Why was this removed?\n'
683,84289264,"b'This is duplicate code, need to have only just one version of this.\n'"
683,84289486,b'Method casing should match .NET conventions\n'
698,84576574,"b""Why do we even care about this now?\nSince we aren't allocating, can't we just always use the default value?\n"""
698,84582237,"b""This code does look the latest. We moved the branch to the constructor. No the cost is not in allocations but in runtime. 128 for long lived is fine, 16 for short lived is too. You don't want to scan a big cache when the probability of hits is very low.\n"""
703,84899648,"b'Idan, Did you also update place where space was appended to id? I assume this issue was created during some experiments and you noticed you have id with spaces in handler. \n'"
703,84900997,"b""No I did not. I made this issue after a mail we receive \nhttps://groups.google.com/forum/#!topic/ravendb/gm-DFrPfu-s.\nDidn't see where we add spaces to id in my checks\n"""
703,84901673,"b'Oh, sorry it is for v3.5. I thought it was for v4.0. \n'"
705,84969843,b'I think it will be better to move this code here somewhere around here\nhttps://github.com/ravendb/ravendb/blob/v3.5/Raven.Database/Actions/DocumentActions.cs#L292\nby doing this you will not iterate twice the docsToInsert\n\nAlso do we want to support Guid.NewGuid() ? This is not part of the issue and I do not see a test for this case. This line was throwing if the key was null and now it will be false always: https://github.com/ravendb/ravendb/blob/v3.5/Raven.Database/Actions/DocumentActions.cs#L293\n'
705,84973941,"b'I think you are right, we should move the code to the next loop.\nFor the new Guid we work like this in the session.Store we put\na new Guid if the key is null. For the consistency I think this should stay and I will delete the if statement\n'"
705,84982847,"b'IMO the Guid should be removed because:\na) http://ravendb.net/docs/article-page/3.5/Csharp/client-api/bulk-insert/how-to-work-with-bulk-insert-operation#limitations\n""Entity Id must be provided by the client. The client by default will use the HiLo generator in order to generate the Id.""\nb) https://github.com/ravendb/ravendb/blob/v3.5/Raven.Client.Lightweight/Document/RemoteBulkInsertOperation.cs#L285\n\nso you will insert a dead code.\n\nThe best option (I think) will be to change\nhttps://github.com/ravendb/ravendb/blob/v3.5/Raven.Database/Actions/DocumentActions.cs#L292\nto IsNullOrWhiteSpace and normalize in other case\n'"
726,85494271,b'Use DocumentDatabase.Time.UtcNow instead of DateTime.Now\n'
726,85494622,b'rename to DocumentCount\n'
726,85494671,b'use nameof(DocumentCount)\n'
726,85495196,b'Detect if the file contains any invalid file name chars (check 3.5 - StudioTasksController)\n'
726,85495534,"b'Options can be null, but later I do not see any NRE checks. Probably if they are null then you want to create new instance with default values.\n'"
726,85496104,b'Should we have DocumentLimit option? I do not understand the usability and it was problematic in the past. @ayende ?\n'
726,85496310,"b""I think if the result is null then you must filter-out this document. You need to test this and check 3.5 if I'm right.\n"""
726,85496461,"b""You can't do this. You are changing in-memory index instances.\n"""
726,85496788,"b'remove the start, you cannot handle this properly without iterating half of the database and you will be setting 0 here always.\n\ntake needs to be handled in the inner loop. Currently you will take N x take where N - number of collections\n'"
726,85636181,"b'In general, in our entire codebase, we should never use DateTime.Now\n'"
726,85636183,"b'No, we had to do that to avoid problems in the way we were using the smuggler, makes no sense to do so now\n'"
730,85668352,"b""you need to handle 'take' manually. Consider a situation when you have take = 1024 and you have 10 collections. You do not want to export 10 x 1024 docs. Just 1024.\n"""
730,85668364,b'What is a RevisionDocumentsLimit? If this is equivalent to DocumentsLimit then we need to remove it also.\n'
740,85768183,"b""This doesn't belong here, you are trying to do something local in a shared space, and that isn't the place to do it.\n"""
740,85769080,"b'Inconsistent naming, why not `nameof(Message)`\n'"
740,85769378,"b'If the filename is invalid, we don\'t care. We are sending it to the browser, to handle that.\nMore to the point, this code is just asking to get a bug report about ""ravendb is ignoring my custom name""\n'"
740,85769630,"b'Bad idea, instead of doing it like this, have progress class hold the number of exported documents, and generate it on the fly when the client requesting it.\n'"
740,85769840,"b'This is bad, you are leaking this on error\n'"
740,85770228,b'Why are you doing it like this?\nWhy pass form variables anyway? Just have then sent as the request body and that is it.\n'
740,85770315,"b""You didn't fix the name in JsonDeserialization\n"""
739,85771720,"b'You are allocating a string, then a byte array, then computing manually the size you have here.\nThat is not needed and probably costly. We have the BlittableJsonTextWriter for those things,and that is what you should be using here.\n'"
739,85771889,"b'By convention, the sender (the session) should be the first item in all those events\n'"
739,85771982,b'We should be able to register to those events either at the session level or at the store level\n'
739,85772329,"b'You are already scanning through all the entities in the session, thee is no need to add another property that you would scan separately.\nDo it in the `PrepareForEntitiesPuts` \n'"
739,85772600,b'Missing the session\n'
739,85772637,b'Missing the session\n'
739,85772934,"b'We can probably skip the Lazy here, there is no concurrent access or anything like that.\nWe can just store a null reference and create it when needed\n'"
739,85773710,"b""I don't understand this at all. This look like it will only ever happen for a particular database.\n"""
749,86012158,"b'What happens when a user does a Search on: ""Hello! There!"" ? \nIt should be a single phrase, no?\n'"
753,86017969,b'Why do you need those?\n'
753,86018078,"b'This needs to be removed, there is not need of it\n'"
753,86018450,"b""Here you are doing work that you probably won't need if no one is lisetning\n"""
753,86018714,b'This also need to get the session as well\n'
753,86018768,"b""Doing work that you probably won't need here as well\n"""
753,86018832,b'Need to know on what session it operates here\n'
751,86027072,b'Do we still need BatchSize? What will happen if we will have more then BatchSize (1024) docs?\n'
753,86134934,b' I can check if BeforeStoreEvent  is null Only in DocumentStoreBase\n'
753,86136640,"b""This is pretty much only relevant if you need to do some amount of work before calling the event, so it isn't worth it if there are no subscribers\n"""
768,86306142,b'What happens if file name is null?\n'
768,86307474,b'what is the error?\n'
769,86312243,"b""Why aren't you checking the beforeStoreEventArgs.EntitySerializionRequired here?\n"""
748,86010718,"b""Shouldn't we have a generic error here? For all kinds of errors that can happen, so the user will now about it?\n"""
748,86347761,b'Use TryXX\n'
748,86347783,b'Use TryXXX\n'
784,86624552,b'lower case cellTemplate? \n'
784,86624874,b'Can we make this interface generic to avoid any[]? \n'
784,86624996,b'Generic class? \n'
784,86625139,"b'in 4.0 we have convention to start jquery selector property with $, so it should be $gridElement\n'"
784,86625542,b'Can you use let or const and avoid keyword var ? (it is actually global note)\n'
784,86625702,b'Mark this method as returning void. \n'
784,86626376,"b""If it is only internal usage you can use es6 set or map (we already have shim for this). Unfortunately we can't use es6 set/maps with knockout. \n"""
790,86685208,b'Need to add a warning here.\n'
790,86685215,"b""You shouldn't have to do that, consume the value in the BuildVersion section\n"""
790,86686490,b'You are also skipping transformers\n'
790,86686595,"b'You need to put exact reason here. Maybe ""Detected 4.x file format. Automatically disabled index and transformer import."" ?\n'"
790,86686636,b'Why you added this?\n'
790,86686643,"b""So we'll have nicer syntax for 4.0\n"""
790,86686663,b'But we are not importing 4.0 transformers?\n'
790,86686694,b'We are now\n'
834,87062798,"b'Why are you using buffered output here, and not actually gzip? The code seems to suggest that you would gzip it, and certainly that is what the content type you set says.\n'"
834,87073047,"b'@maximburyak this is wrong, DetectServerSupportedFeatures returns serverVersion (25, 30, 35, etc) not buildVersion (35180 etc)\n'"
846,87248426,b'What about this in the middle of the term?\n'
846,87350129,b'if it is in the middle of a term without whitespace before it then it is a legit part of the term. hello//world is a valid term\n'
853,87390783,b'Add which db that was\n'
853,87390837,b'db name\n'
853,87390844,b'db name\n'
853,87390886,b'Looks like bad formatting\n'
853,87392041,b'what do you mean?\n'
853,87392561,b'You added an if statement on a big statement without {}\n'
854,87409811,"b""This isn't thread safe.\nwhat is going to happen to queries that are currently running? Or indexing that is currently using?\nYou are pulling the carpet on them by disposing the environment, and then making the memory they use invalid.\n\nYou need to add a reader / writer lock here to ensure that we are the only one accessing it.\n"""
854,87709182,"b""You are sleeping while holding the lock, that isn't a very good idea.\n"""
854,87709208,"b""There is a race here, a user can check the `_isCompactionInProgress` in `AssertIndexState`, see it is valid, and then start querying, and we check if there are running queries before that. \nYou can't rely on this\n"""
854,87709366,b'Who is this reporting to? It looks like this goes into the void.\n'
854,87709372,b'I think you meant to add this to the operations?\n'
854,87710455,"b'It is added to the operations, check https://github.com/ppekrol/ravendb/blob/v4.0/src/Raven.Server/Documents/Handlers/Admin/AdminIndexHandler.cs#L28\n'"
854,87710462,b'Fixed\n'
854,87710464,b'Fixed\n'
879,88251735,b'You cannot do that. When you will close the read transaction you have no guarantees that the data that document is pointing too will not change\n'
879,88252076,b'batch.Count ?\n'
879,88252367,b'we should use RateGate with MaxOpsPerSecond probably like in index batch operations\n'
879,88252644,b'there is an extension for writer: WriteOperationId IIRC\n'
867,88330679,b'Does the conditional property applies to derived methods?\n'
867,88330784,"b'I assume that this is only ever called IFF the VALIDATION is setup, right?\n'"
867,88457576,"b'Yes. 17.4.2.1 of the C# spec says: ""The conditional method must not be marked with the override modifier. A conditional method may be marked with the virtual modifier, however. Overrides of such a method are implicitly conditional, and must not be explicitly marked with a Conditional attribute.""\n'"
867,88457755,"b'See above, but yes.\n'"
867,88467565,"b'Debugger.Break while an interesting thing to happen, will have impact on CI server if we have such an error.  I would remove it.\n'"
899,89078286,b'Should we install this extension each time we create view? '
899,89078478,b'public is default in typescript so there is no need to write this. (we are following the default resharper code style suggestions except class names starts with lower case)'
899,89078670,b'Do we need this empty constructor?'
899,89078807,b'class hyperlink Column? '
899,89078854,b'remove public'
899,89079155,b'remove public'
899,89079235,b'maybe we should init this in shell? or extensions.ts class? '
899,89079430,b'this file has issues with indentation? '
899,89079599,"b'we should avoid specifing colors directly, @kwiato will change this to variables, so we can later support color themes. '"
895,89078371,b'Should we throw here? No one is going to ever catch that error.'
895,89078403,b'Same'
895,89078800,"b'I know, but thought that it would be better to set task state to faulty?'"
895,89079604,"b'The problem is that then this raised the UnhandledTaskException, and we get bug reports on that.'"
895,89079850,"b""removed 'throw'"""
899,89131975,"b""That, or we can install it once (maybe in shell). It only needs to be installed once. Install will do nothing if it's already installed."""
899,89132318,"b""Sure, I'll remove it. p.s. I agree with Resharper we should eventually move class names to start with upper case. That seems to be the emerging standard for TypeScript anyways."""
899,89132407,"b""Nope. I'll remove it."""
899,89132641,"b""Oh, that's...weird. I'll fix that."""
899,89132708,"b""Yep, that's fine. We can do a one-time initialization in shell. I'll do that."""
899,89152201,b'I agree but it is a lot of work and we went with this convention due to pvc / windows path issues. so before changing this we have to investigate potential issues.  '
899,89153203,"b'Yep, understood. I suggest we move to upper case classes at the time we migrate the Studio to Angular/React/Aurelia post-4.0.'"
903,89182502,b'Why? We already have mutliple ways to do this. '
888,88849814,b'Why use two transactions here?'
896,88974809,b'typo'
896,88975234,b'Any reason to do .ToList() and then foreach?'
896,88975956,"b'Nvm, the iterator is the reason'"
896,88976147,b'Inconsistent with UpdateByIndex. Should be UpdateByCollection? Or the other way...'
896,88976397,"b""There is also a method in this controller 'DeleteCollectionDocuments'. Maybe it is redundant now?"""
903,89302306,"b""Haven't found a function that writes the @metadata/@etag properties except for the one written specifically for a Document class..."""
904,89294102,b'This will be handled properly by @gregolsky http://issues.hibernatingrhinos.com/issue/RavenDB-5665'
917,89390297,b'Should we log this?'
918,89393253,b'if (callValue) '
918,89394333,"b'I thought that at first, too. But on closer inspection, we actually want the null check: consider if the value is false-y (e.g. zero), we still want to display it.'"
918,89394512,"b'Then use !== , right?'"
918,89397191,"b""I considered that as well, but we also want to filter out undefined, in case the row data doesn't have that cell property defined. I could have written if (cellValue !== null && cellValue !== undefined), but (cellValue != null) covers both cases. One of those rare times JavaScript's loose equality (double equals) is actually useful. :-)"""
918,89404199,b'I have to agree with you.  javascript never stops amazing me. just like adding 2 empty arrays produce an empty string.  '
920,89409315,"b""Why is this static? Isn't it better to do it at the level of the Environment?\r\n\r\nMy concern is that it is quite easy to have more than 30 storage environments, and then we'll have a lot of churn. \r\n"""
920,89410247,b'Thats actually a good idea. In that way each pool will behave closely to its typical use. And we can also react to low memory conditions'
920,89410306,"b'Okay, I got something imlemented'"
925,89648351,"b""_I_ don't understand the meaning of this error, and I'm pretty sure any user will not be able to either."""
925,89648417,"b'When passing Boolean parameters, use named value to explain what they are to readers.'"
925,89648969,"b""Isn't this duplicated exactly from DocumentsStorage?"""
925,89648981,"b""Isn't it duplicated code from DocumentStorage?"""
925,89649193,"b'This is on hot code paths, make sure that exception throwing is in separate methods to avoid making the code too big.'"
925,89649296,"b'It is also valid under certain conditions to have a table without a primary key, for example, if it holds data that might be duplicated.'"
925,89649384,"b'* Exception throwing in hot path.\r\n* _dirtyPages is set in ctor and is readonly, it cannot be null'"
925,89649569,"b""Please try to describe what _happened_ in the commit. Something like WIP doesn't tell anything to the reviewer."""
925,89649606,b'What happens if the user want to resolve in favor of the existing index? How do we prevent reset?'
925,89649627,"b'When a statement has multiple line, please make sure to wrap it in {}'"
925,89649755,"b'Same comment WRT to the commit, WIP 2 is even less helpful. And what *stuff* should work?'"
925,89649829,"b""This isn't thread safe, if another write transaction is open, it will use that, leading to hard to discover concurrency issues"""
925,89649932,"b""You set it here, but never clear it, so once we have ANY write transaction, we'll be exposing this to the world, leading to bad behavior on our part."""
925,89650137,b'Under what scenario is this a good thing? The deserializer NEVER return null.'
925,89650228,"b""You only did it half way, you need to also handle the scenario where it didn't work, otherwise you'll try to start it twice\r\n"""
925,89650326,"b""This is actually pretty expected, no? Shouldn't we ignore this error entirely? Or report this as just connection closed?"""
925,89650537,"b'This assumes that no one ever uses the LowLevelTransaction directly, which is wrong.'"
938,89655207,b'What about the JIT copy?'
938,89655680,"b""Isn't this a lot of conditionals that we can skip? What if we did it in groups of four, and then group of 1 in the end?"""
938,89659452,"b'Nope. They cannot be done that way. If we dont check we are guaranteed to touch memory which is out of bounds, and you dont want to :D '"
938,89659488,"b'Problem is, this is not a copy... It is a repeater (mascareding as copy). Changing the behavior implies trying to find if we have overlaps and that incurr cost we cannot afford to pay (we went -2x trying to do that). '"
955,89950017,"b'`IsNoneVoter` is a strange property name, should probably be `IsNotVoting` or something like that'"
961,90021339,"b""These comments aren't adding anything to the code"""
961,90021372,b'This one does'
961,90021464,"b""Don't change namespaces of existing classes without talking to someone about it, this will break clients code"""
961,90021720,b'Why do you have this commented code?'
961,90021888,b'`string}end=` missing &'
984,90403857,"b'We removed it completely, do another pull'"
979,90296537,"b'Please log and handle this exception, instead of ignoring it.'"
1025,90784372,b'There is actually a reason for the requirement for quotes.\r\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.11\r\nSo we have to actually send the quotes'
1034,91024267,b'What this line do?'
1056,91374193,"b'Why do it like this? just do `new DynamicJsonArray(Keys)`, simpler and more robust.'"
1056,91374618,"b'Instead of `null`, need to pass ""Server""'"
1056,91374838,"b""Wouldn't this kill the server?"""
1056,91374863,b'Need to include the license details here.'
1056,91375083,"b""This doesn't actually do registration. It just validate this against remote server.\r\nWe need to be able to update the license itself. Customer may have purchased additional things, or dates have changed, etc."""
1056,91375291,"b""Shouldn't this be a static class?"""
1056,91375381,"b'How do you ensure that the type is actually a `LicenseType` and not a string, for example?'"
1056,91375720,"b'Why?\r\nWe already have a blittable document, and then we can use the `JsonServerDeserialization` there.'"
1056,91375996,"b'What about string, such as `""type"": ""Commercial""` ?'"
1056,91376193,b'Should probably do an alert here.'
1056,91377021,"b""Don't write code like that, use the standard means for generating JSON on 4.0, blittable.\r\nIn this case, using `DynamicJsonObject` to generate the object to write."""
1056,91377403,"b'Also, we probably want a better name for it, `LicenseHandler` is already the name of the request handler.'"
1056,91377526,b'JSON handling'
1056,91377678,"b""This doesn't actually _register_ anything. It just validate the license, nothing more. \r\nWhy is the process split into register / activate?"""
1055,91379250,"b""This might actually cause issues.\r\nThe problem is that we immediately make this visible, however, the transaction isn't committed yet.\r\nSo it is possible that an read transaction will see the in memory value saying no conflicts, and won't see the conflicts, even though it should (it won't see the resolution).\r\nI suggest doing something like `noConflictsAsOfTxId`, which will be set here if `_hasConflicts` is zeroed.\r\nThis way, we'll have to do two checks, the general one, and then one for our trasaction\r\n"""
1055,91379319,b'Same note regarding concurrency'
1055,91379372,"b'Same note regarding concurrency, and it is probably better to make this a method, rather than expose internal state'"
1054,91382240,b'What about Linux here?'
1054,91382287,"b'We might be able to use Dns.GetHostName, instead?'"
1053,91384639,"b""Isn't this potentially very expensive? \r\nDuring this time, new transactions are blocked after all, and that means that under indexing load, we'll have hiccups during index, no?"""
1056,91386324,"b""Register:\r\n- collect name, email and company from customer and send to server\r\n- as side effect it sends e-mail with actual license\r\n\r\nActivate:\r\n- send license (received via e-mail) to server and 'consume' this license \r\n\r\nBy doing 2 steps we make sure users enter valid e-mail address."""
1056,91386782,"b""Okay, maybe `RegisterTrial` or `RegisterFreeLicense` - I couldn't figure out what it was registering for. I though it was registering the license in RavenDB."""
1056,91386866,"b'Note that even in activate, we need to hit the license server to validate it.'"
1053,91389224,"b""No, this is cheap operation because we changed things that the actual searcher recreation is performed when a first query attempts to get the searcher (2933eadce5ffa313a7), instead of creating it after every indexing run. Underneath it's a lazy value:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/Indexes/Persistence/Lucene/IndexSearcherHolder.cs#L89"""
1053,91389357,"b""But aren't you still taking a lock here? """
1053,91389953,b'Do you mean this one?:\r\nhttps://github.com/arekpalinski/ravendb/blob/RavenDB-5733/src/Raven.Server/Documents/Indexes/Persistence/Lucene/IndexSearcherHolder.cs#L33-L43'
1053,91390245,"b""Yes, that means that we'll have to stop all queries for the duration. And if we have a lot of queries, we'll have to wait for them to complete (and new queries are now waiting for _us_)."""
1053,91392585,b'Do you have any suggestion how to handle that without taking a lock?'
1053,91392709,b'Maybe using an immutable list?'
1053,91397198,"b""I will try that. We shouldn't expect large number of items there so the performance of an immutable collection shouldn't be an issue here. Would `System.Collections.Immutable.ImmutableList` be fine here or would we be better off  using our `ImmutableAppendOnlyList` which has only `RemoveWhile` allowing to remove a specific item?"""
1053,91397474,"b'The common behavior is adding to head and removing from tail, the standard `ImmutableList` should be enough'"
1055,91407917,b'this also sounds error prone.\r\nIn raven 3.0 we had the option to subscribe some logic to run after the transaction is committed do we have similar mechanism in v4.0? \r\n'
1055,91455280,"b'Hm... yes, that would be better. See the AfterCommitWhenNewReadTransactionsPrevented event.'"
1043,91392372,b'W.A. ? \r\n\r\nWhy are you doing something like that? Why is there different behavior between the clients?'
1043,91458373,"b""When requestring Lazily.LoadStartingWith in the old client, it's being sent as part of a multi-get (Post) operation, then the multi-get handler redirects it to the normal document handler (Get) and the request looks exactly (!) like a request from the new client but the result is in a different structure (object vs array). I needed a way to tell between them"""
1043,91458708,"b""Don't do it like that, change the old client to support the new way.\r\nI don't want to have this kind of stuff in our codebase if we can avoid it, and we can do that if we change both."""
1050,91387738,"b""You aren't saving this value. On restart, we'll lose this value.\r\nSee `PeriodicExportRunner.WriteStatus`"""
1047,91304446,b'Promote to parameter externally'
1047,91304824,"b'Removed `forCache` if not used, YAGNI for now'"
1047,91305505,"b""Here delete this on load, so we'll only have this for dbs that were successfully shutdown."""
1074,91596382,b'`LoggingFilter` typo in class name'
1074,91596511,"b'Please use full words for methods names, `Delete`, here'"
1074,91596788,"b""Here you are operating on the hard coded string fields, but earlier you are generating them at runtime. This is a recipe for errors down the lines. Make it all hard coded (it isn't meant to changed often), and it will be obvious that it won't auto update."""
1074,91596934,"b'This is bad. You are doing multiple allocations here, for the `Any` call, for the `ToLower`, etc.\r\nThis is also done elsewhere, but those happen much more rarely. Here this is called every single log entry, which means that you need to consider performance.'"
1074,91597190,"b'This allocates multiple objects on every call, we want to make sure that they are allocated once, per connection'"
1074,91597403,"b'What is this for? You are going to be adding to this all the time, why not just do that on the entry when you call `WriteToListeningWebSockets`'"
1063,91598735,"b'You actually do care, another write transaction may also be doing this, which will lead to unexpected values.\r\nNote that this is actually pretty rare thing to have, and we are fine paying the perf for that.'"
1067,91603669,b'Can never be null'
1067,91604525,b'It would actually be cheaper to do this in a single formatted string line rather than these appends.'
1067,91604561,b'Same issue with multiple calls vs single format string'
1067,91605589,"b'You are in the middle of an async task, and you are doing a sync wait here, that is a bad idea.'"
1067,91606119,b'Missing `ConfigureAwait`'
1043,91670927,b'This introduces inconsistency. Endpoints that are returning documents return them in different JSON format depending of the option used. We should not go this way in our opinion.'
1043,91670985,b'I will fix this as a part of: RavenDB-5796'
1075,91702332,"b'This is wrong on several levels. You should be use the UTF8Enocding for this, instead.'"
1098,92141901,"b""shouldn't this be `({2})`"""
1098,92263301,b'Yes. I saw you already fixed that. Thanks.'
1106,92371692,"b""We don't want to use any json.net stuff, use the `DynamicJsonValue`, instead"""
1115,92402086,b'remove { return'
1115,92402194,"b'inputItems.map((x) => ({ startTime: x[0].getTime(), endTime: x[1].getTime() }));\r\n\r\nyou have to enclose object in () to make it work. '"
1115,92402331,b'rename: brushChartStrokeColor'
1115,92402485,"b'reformat to:\r\nd3.scale.linear()\r\n.domain([0, maxConcurrentIndexes])\r\n.range([0, metrics.brushSectionIndexesWorkHeight]);'"
1115,92402558,b'var -> let '
1115,92403125,"b""move those interfaces to viewmodel class - they are private, so we don't pollute dto.d.ts."""
1115,92406170,b'done'
1115,92406189,b'done'
1115,92406596,b'done'
1115,92406686,b'done'
1115,92407764,b'Both rangeAggregator.ts & the viewModel class use them'
1111,92448028,b'You have to return to the right location first.'
1111,92448384,b'You leaked the file handle here.'
1111,92448512,b'Why not use unlink here?'
1111,92448632,"b""This shouldn't have  default handler"""
1111,92460254,b'it is fatal error any how.. '
1111,92460430,b'will be fixed\r\n'
1111,92460559,"b""we don't want the user to see the file at all"""
1111,92460677,b'Where to add an handler for this one ? (and what to do inside of it?)'
1111,92616645,b'You are missing the _reason_ for the error.'
1111,92616761,"b'No, it _should_ throw if no one is actually listening. This is a problem that we will handle in `ServerStore`'"
1121,92618748,"b""We probably shouldn't be doing much in the old client, it is going away soon."""
1121,92619018,b'Why reset here? Because we might have documents that we failed to index?'
1121,92623501,"b""I know, but it would be hard to implement this without touching the old client. I'm skipping my next two issues, waiting for the NewClient."""
1121,92623534,b'Yes.'
1130,92972812,"b""I don't think that we need to do an alert here.\r\nWe already are going to have replication topology that will report the status of replication.\r\n\r\nFor that matter, we already have the live state of the connections that we can report, without needing to leave the server.\r\n\r\nAlert is for something that is high severity and isn't auto resolving."""
1131,92984547,"b'GetPageSize() contains defaultValue, you should only pass int.Max there and it will work'"
1131,92984565,b'Both of those changes are not needed'
1131,92985165,"b'Yes - I did that first, but then I changed. \r\nI can switch back.'"
1158,93322395,b'Why do we have this? How does this differ from `None`?'
1158,93322495,"b""Not sure that I like the name. It _isn't_ manual, it is automated by the fact that they provided a script to do so."""
1158,93322748,"b'Why are we saving this as its own thing? Why not just make this part of the replication configuration document?\r\nThat way, users have the normal ways to work with it, and it simplify what we need to do by quite a bit.'"
1158,93323231,"b'This seems like a lot of code duplication with `PatchDocument`. On the other hand in `SqlReplicationPatchDocument`, we inherited from `PatchDocument` and avoided duplicating all this code.'"
1158,93323611,"b'This should actually be checked above, not here. We can avoid the expensive exception handling in this case.'"
1158,93323848,"b'You are probably better off using the Blittable Writer here, instead of first creating the full object, then transforming to blittable.'"
1158,93324160,b'Why did you change it to test only here?'
1158,93324333,"b'They _are_ stored in a document, so why also store them again, at non trivial cost, separately?'"
1158,93324642,b'How can a script indicate that it is unable to resolve the conflict?\r\n'
1158,93324867,"b""Shouldn't be here.\r\nThe mere act of having a resolution script for the collection should cause it to be invoked, and only if it didn't resolve we'll resort to the pre-configured settings.\r\n\r\nNote that all of that _have_ to have logging around it."""
1158,93325095,"b""This is in the hot code path, and we need to avoid throwing exceptions there.\r\nEven the _code_ for throwing exceptions is expensive, and we want to move that to a dedicated method so we'll not blow up the size of this method and thus avoid inlining it."""
1158,93325349,"b'Please add in the issue the current state of the script, as in, how it handles all those decisions.\r\n'"
1158,93325486,"b""Shouldn't this be scoped inside a method? """
1173,93499989,"b""Um? What?! That isn't going to work.\r\nYou need to actually parse this properly. \r\nThe slightest change can break this horribly (for example, adding a space.\r\n\r\nLeaving aside that `byte[].ToString()` is going to return `System.Byte[]`, not the content of the array.\r\n\r\n"""
1173,93502753,"b'yes , i know . this is temporary ( i wrote that it is WIP).\r\n'"
1173,93500079,b'Probably should just be Raven.Client'
1173,93500138,b'Not used'
1173,93500746,"b'Why do it like this, you can just continue until you get to the `EndOfStreamException`'"
1173,93500785,b'Or change it to actually be valid'
1173,93504989,b'What happens in this code path? '
1191,93679225,"b""Or actually I have one question to this PR:\r\n\r\nWhy do we have this timeout? Can't we just set it to false when upload is completed?"""
1187,93645869,"b'Nice, but let\'s change event type to Loaded, to avoid confusions in future. (then find usages by search for ""Load"" - with quotes)'"
1187,93646173,b'unused import? '
1187,93646486,"b'Now we don\'t need to cast running as Raven.Client.Data.Indexes.IndexRunningStatus, because TS can detect this and fail the compilation if string won\'t match IndexingStatus. \r\n\r\nSo: this.indexingEnabled(databaseInfo.IndexingStatus === ""Running"");'"
1187,93646731,"b""why we have both update and updatecurrent instance? Can't we have update in resource info, and call super.update in databaseinfo or filesysteminfo class?"""
1187,93646986,"b'Can we have both totalSize and totalsize as properties of this object and compare this totalSize but not formatted as string, to avoid magic constants?'"
1187,93647031,b'no need for public - it is by default'
1187,93647584,"b'optionally we can use: https://lodash.com/docs/4.17.2#sortedIndexBy - beacuse we insert to sorted array, but you can leave it'"
1187,93648040,b'use pure javascript for this: \r\nlet resource = this.resources().sortedResources().find(rs => rs.qualifiedName === e.id)'
1187,93648292,"b""those substr doesn't look good, maybe extract to some helper method (in resource info class?) .\r\nEx. static extractQualifierAndName(input: string): [string, string] {\r\n here goes impl\r\n}"""
1187,93648357,b'Why do you set this to false?'
1187,93648418,b'Loaded (see notes above)'
1187,93648767,b'use pure js: array.find()'
1187,93649009,"b'can we fetch those info from server after notification, instead of guessing the values?'"
1187,93657656,b'done'
1187,93657685,b'done'
1187,93657858,b'done'
1187,93659733,b'done'
1187,93660681,b'done'
1187,93660914,b'done'
1187,93662279,b'done'
1187,93662336,b'done'
1187,93729726,"b""1. When creating new db, the server first sends a 'Write' and then 'Loaded' after a few milliseconds\r\n2. The '...Humane' size property that is sent with 'Write' is '-1 Bytes'\r\n3. The initial implementation thought was to show the new db in the UI  right after the the 'Write',\r\n    and not wait for the 'Loaded' ws msg, \r\n    And to do so I created a new object with some default values\r\n4. That is why you see the new resource creation and the string comparison because I did not want to show (-1) in the UI\r\n5.  So - If we don't care about showing the new db in UI right after the 'Write'\r\n    I will change and show only after 'Loaded' \r\n    And that will resolve All the other comments in the PR"""
1187,93740616,"b""We have to show it right after write, but let's fetch resource info from server  and then show on UI. \r\n\r\nIn general:\r\n1. Listen to both write and loaded events (already done)\r\n2. On event call loadResource\r\n3. After you get response from server update UI\r\n4. If you get -1 as size don't show size or just send from server 0 as size and show 0. In this case we get update with loaded event. Then when we call getResource size won't be zero. \r\n\r\n\r\nWe need to cover following scenarios:\r\n1. user created database (then we get both write and loaded events)\r\n2. another user created daatabse (we also get both write and loaded events)\r\n3. user / or another user disabled /enabled database (we get only write event, and maybe loaded if user enabled)\r\n4. database was offline and user/another user loaded this - then we get loaded event\r\n\r\nI don't want to have so many if's in code, let just listen to both write and load and handle they in same way. In case of database creation we actually call the server twice, but ... it might be desired in future, when user creates database based on existing data. In such case schema upgrade might be fired up and user have to wait until database is loaded."""
1187,93660349,b'ok - using lodash now - '
1187,93814336,b'done'
1187,93814359,b'Removed in new implementation'
1187,93814361,b'done'
1187,93814371,b'totalSizeToShow removed now'
1187,93818064,"b""Note that this is probably NOT what we want. \r\nIf I understand this properly, this means that on a Write notification, we'll load the database?\r\nThat will prevent us from doing some initial configuration with the db being shut down, no?"""
1197,93818365,"b""Shouldn't this be after we release the lock?"""
1204,93850431,b'Need to do this on the new client as well'
1206,93857507,"b""What it this index property? Shouldn't this be the URL?"""
1206,93857546,"b""`async void` methods are to be avoided. They don't do what you thing you should be doing."""
1206,93857566,b'need `await` here'
1206,93857573,b'need `await`'
1206,93857600,b'`ConfigureAwait(false)` is missing'
1206,93857635,b'need `await`'
1206,93857640,b'`await`'
1206,93857651,b'`ConfigureAwait(false)`'
1206,93857664,b'`await`'
1206,93857671,b'`await`'
1206,93857678,b'`await`'
1206,93857694,b'`ConfigureAwait(false)`'
1206,93857711,b'`ConfigureAwait(false)`'
1206,93861921,b'`ConfigureAwait(false)`'
1206,93861925,b'`ConfigureAwait(false)`'
1206,93861930,b'`ConfigureAwait(false)`'
1206,93861934,b'`ConfigureAwait(false)`'
1206,93861935,b'`ConfigureAwait(false)`'
1206,93861937,b'`ConfigureAwait(false)`'
1191,93863346,b'Looks better in the import UI'
1209,93879651,"b""What isn't key a `string`?"""
1209,93879657,b'Can this fail?'
1209,93879670,b'Why is this here?'
1211,93922397,"b""This is bad. GetOrCreateNumericField should never be invoked with a value that is not a number. There should be no 'safety' if statements inside this method."""
1213,93945784,b'Can we use less files for this? '
1213,93945955,"b'Can we avoid having this method? Instead when we get info that new resource was created, then fetch information only for this resource and then add to resources list? I think @Danielle9897 so implementing something similar. '"
1213,93946027,b'use find instead. '
1213,93946518,"b'this call should trigger EVENT.Resource.Activate and update activeResourceTracker.default.resource(resource);, so please remove previous line. '"
1213,93948811,"b'We cannot get the information about the database until it\'s actually loaded anyway.\r\nAfter we receive the ""Load"" notification we fetch the stats.'"
1213,93948895,"b""Without this line there is a delay in the resource activation.\r\nI'll see why"""
1213,93948908,b'Yes'
1213,93948923,b'ok'
1213,93954705,"b""not necessarily it's true.  tal implemented cache so we can fetch info even about offline databases, but event had name loaded not load  ( changed few days ago by Danielle) so right now we have assurance that database is already loaded when this notification arrives. so we remove this empty method and load info and then display on screen"""
1213,93956681,"b'What if I changed the database document (which will trigger a ""Write"")? This shouldn\'t ""wake up"" the database'"
1213,93957114,"b""It shouldn't:\r\nIn general we should call /resources?name={dbName}&type=db\r\nbut this call can't wake database up ( and I have hope it is not). \r\n\r\nIn v3.5 we fetched information using /stats endpoint, and it was waken up database. In v4.0 we have different behavior. """
1218,93956527,b'please use this.confirm instead of super.confirm\r\n\r\nDoes we really need double confirmation? '
1218,93956585,b'same here. '
1218,94002827,"b""1. OK - using this.confirm()\r\n2. It is not duplicate confirmation,\r\nThe 'Delete' btn was removed from html, so now there is a direct call to 'keepFile()' from the html, and a direct call to 'deleteEverything()' and I just call 'confirm()' to complete the work and close dialog."""
1218,94002863,b'see above comment'
1223,94039779,b'use lower case in import name'
1223,94039910,"b""don't construct database instance, call asResource instead. It will return database. """
1223,94075692,b'done'
1223,94075699,b'done'
1220,94040109,b'use arrow function instead. '
1220,94078129,b'done'
1228,94128264,"b""Why isn't this a boolean?"""
1228,94128285,"b""Why isn't this a `BlittableJsonReaderObject`?"""
1228,94128306,b'why is this commented?'
1228,94128382,b'What about includes?'
1228,94128415,"b""We don't need the parallel any longer, unused."""
1228,94128463,"b""are you sure we won't need the type info here?"""
1228,94128541,b'why do we need to do this?'
1228,94128618,b'what scenario will generate this?'
1228,94129492,"b'TryGetMember can return only object , I will change all to TryGet'"
1232,94169035,"b'No, this is explicitly meant to be only set once, to avoid jitter on the value.\r\nIt is either the old value, or the new one, nothing in between.'"
1231,94170058,b'Need to pass those same attributes here.'
1231,94170097,b'Who is using this?'
1231,94170177,"b""This isn't the only place this is used.\r\nIn fact, you need to make sure that this is handled everywhere.\r\nIncluding in the `DatabaseLandlord`, `SubscriptionStorage`, `Configuration`, `Indexes`, etc."""
1236,94170703,"b""The idea is to remove the `throw` statement and all the code it generates from the hot codepath.\r\nWhat you did is just moved both `if` the and the `throw` to a method, so we'll have to force to go over it anyway.\r\nJust the `throw` should be in its own method."""
1236,94170913,b'Here is an example of such lonely throwing method.'
1236,94171064,b'This is test code that should have been removed.'
1235,94182152,"b""I'm not sure call publishing this event in resources is good idea. I will have a look at this as a part of: RavenDB-5967"""
1233,94179330,"b""This is being access by the client _every single time a document stored in initialized_ and every 5 minutes afterward.\r\nHowever, this thing will now force every single such interaction to cross the entire network topology.\r\nAll for the no additional benefit to the client.\r\nWe don't track the full network, only the immediate siblings, and this is WAY too expensive to run."""
1233,94179909,"b""Don't do that, there is no meaning, and it just hurts the JIT"""
1233,94180014,b'This code is way too dense'
1233,94180227,b'No need to flush here'
1233,94180274,b'Missing error handling here.'
1233,94180391,b'Need to validate input'
1233,94180458,b'validate input'
1233,94180542,"b""What about destinations that aren't currently connected? Should be marked"""
1233,94180602,b'Already handled below'
1233,94180722,"b'This nee to be a parameter that is reduced throughout the network.\r\nYou are doing 60 seconds waits on each step, but this means that the first one can timeout because a totally different node is timing out.\r\nYou need to start with 60 seconds on the first node, then 50 seconds on the 2nd hop, etc.'"
1233,94180745,b'Should be a min of 10 seconds at the end.'
1233,94180793,"b'Wrong, you _have_ the nodes, you were just unable to reach them. That is important to send.\r\n\r\nAlso, you need to handle partial failure scenario.'"
1233,94180852,b'You do NOT send that kind of information over the network. Because just the fact that I let you replicate to me does NOT meant that you get to see the ApiKeys for my entire network.'
1233,94180995,"b'Remember, there is a big different here between the scenarios.\r\nThe /topology option is for when you are asking for who do I failure to.\r\n\r\nThe topology view is to view the cluster state, not whom I am failing over for'"
1233,94181785,"b""Don't do that"""
1233,94181798,"b""Don't do that"""
1233,94181962,"b""Why is this implemented here? It isn't required and misleading"""
1235,94190211,"b""It can't stay the active resource if it's deleted"""
1197,94271075,"b""It shouldn't matter. Unless, you have noticed another potential race condition here, have you? The key was that it had to be called after `ActiveTransactions.TryRemove(tx)`.  """
1240,94276579,b'I think we should set etag to 0 instead of deleting this property. '
1240,94278487,"b""confirmed it won't work:\r\n`\r\n> var x = ko.observable(42)\r\n< undefined\r\n> delete x()\r\n< true\r\n> x()\r\n< 42\r\n`"""
1240,94280787,b'done'
1225,94070494,"b""Since we no longer support the notion of virtually deleted documents (see: http://issues.hibernatingrhinos.com/issue/RavenDB-187) we don't need to test for them.\r\nThis test should be removed."""
1225,94070642,b'Never use `async void`. We should use only `async Task`.'
1245,94286352,b'Do we need this?'
1245,94286357,b'Why this is not migrated?'
1245,94286370,b'I guess that this does not make sense in 4.0 anymore?'
1245,94286713,b'Because it uses esent. Which is as far as I understand we be not used in v4.0'
1245,94286742,b'Compression bundle is not supported in the current version of replication.'
1245,94286786,"b'Actually, this was a part of the core code in the 3.5. \r\nI moved it to separated file because it is been used in a test.'"
1245,94286915,"b""Yes, but this is not a storage engine test. You can remove 'esent' and migrate it without any problems."""
1245,94286925,b'But if it will be then you should not remove the test. Just skip it?'
1245,94288580,"b""No, it isn't going to be in 4.0 at all.\r\nCompression is already at the blittable level."""
1245,94288584,"b""It should be removed. We don't have this index any longer, and we shouldn't have any tests relying on it."""
1253,94318778,b'Why did you remove the check for missing id?'
1253,94320358,b'Because we handle  missing id in TrackEntity'
1259,94337703,"b'this self is not needed, since we use it in arrow function which captures context. '"
1259,94337832,"b""Do we need click bubble? I think we need to return false from handler function if bubble is needed, but it shouldn't """
1259,94337945,"b""Is it needed to return true? Maybe it is better to have 2 methods: showNotifications, hideNotifications. \r\nNotificationsStats as method name might be misleading. Additionally you won't need .bind(...., true/false) in views. \r\n\r\nOptionally you will have to call bindAll on notification center to bind `this`. """
1256,94372942,"b""You didn't fix this comment."""
1257,94410778,b'Why use implicit operations?'
1257,94418095,"b'To ease the casting, as done in TryResovleConflictByScript method.'"
1257,94418581,"b'It is better to be explicit about it, otherwise you are going to have very hard to read code.\r\nChange it to a factory method and call that.'"
1265,94485772,b'?'
1265,94485859,"b'in many places it is called DatabaseId, rename it?'"
1265,94486295,b'?'
1265,94486416,"b'Since the value is big, then maybe in Sec?'"
1265,94486511,b'There is a TopologyHandler. Move this endpoint there?'
1265,94486555,b'/topology/graph? /topology/full?'
1265,94486633,b'No need to flush'
1265,94486653,b'No need to flush'
1265,94486798,"b'if you have access to DocumentDatabase then use DocumentDatabase.Time.UtcNow, if not then SystemTime.UtcNow'"
1265,94486833,b'Same here'
1265,94486953,b'?'
1265,94487197,b'better use: var json = (RavenJObject)await request.ReadResponseJsonAsync()'
1265,94488208,"b'you are passing long, which is a part of TimeSpan and inside ReplicationClusterTopologyExplorer you are building TimeSpan from that long again, just pass the TimeSpan?'"
1265,94543471,b'good idea'
1265,94543573,b'hmmm... yeah this is better'
1265,94543929,"b'perhaps, but what is happening is more apparent with manual flush'"
1265,94544350,"b'will do, but what is the reason for DocumentDatabase.Time.UtcNow?'"
1265,94546066,"b""We are running tests in parallel now, this is why we cannot override global SystemTime, so we introduced a 'local' one for each database"""
1265,94548123,"b""good idea, don't see a reason why not."""
1265,94561998,b'That is generated by the build.ps1'
1272,94589312,"b""This shouldn't be done here. This should be done outside of the command.\r\nThe reason is that we want to reduce as much as possible the amount of work that we are doing here while holding the tx."""
1276,94590653,"b'Should be called _received_ or accepted etag, the no system is not related.'"
1276,94590725,"b'And make is a public field, since it is only used there.'"
1283,94621286,b'Better name would be `IsCurrentlyConnected`'
1283,94622526,"b'Huh?! You are reading here the _local_ change vector, on the failing entry value, why?'"
1283,94622955,"b""Why isn't this fixed?"""
1283,94623408,b'What if it already exists? (Duplicate definition in destination)'
1283,94623431,b'What if it already exists? (Duplicate definition in destination)'
1283,94623809,b'where is `IsEmpty()` handling here?'
1283,94623830,b'Unused method'
1283,94624071,"b'You are waiting here _synchronously_ , why?\r\nThis might take a very long time, and you have _already_ tried connecting to them and failed.\r\n'"
1283,94624189,b'Why are you fetching the _local_ change vector to put on this node?'
1283,94624462,b'typo'
1283,94624537,"b""Why isn't already known logged?"""
1283,94624561,b'typo'
1283,94625423,"b""Why? Those guys haven't been visited by the origin id. They are going to be visited by _my_ id."""
1283,94625532,"b'You are also still using the `OutgoingHandlers`, instead of using `Destinations`'"
1283,94625597,b'Why those comments are here?'
1283,94625665,"b""This doesn't match our style guide.\r\nUse {} unless there is a single line `if`"""
1283,94625941,"b'No, it is actually NOT done that way.\r\nThere is no filtering whatsoever.'"
1283,94626330,b'Why is this here?!'
1277,94630052,"b"".map is standard javascript function, you don't have to use jquery for that:\r\n\r\nAdditionally lodash has max:\r\nhttps://lodash.com/docs/4.17.4#max\r\n\r\nSo you can replace this with:\r\n\r\n`\r\n_.max(arrayOfLines.map(el => el.length))\r\n`"""
1277,94630200,b'Can we use css for this? I will consult this with Rafal. '
1277,94630465,b'I think we can remove this. '
1277,94630497,b'remove this? '
1277,94630675,b'Remove and use css?'
1297,94805125,b'make classes like this private'
1297,94805142,b'make classes like this private'
1297,94805436,b'private'
1297,94805465,b'remove IDisposable?'
1297,94805555,b'why?'
1297,94805657,b'no need to do that I think'
1297,94805793,"b'you can use Maps = { ""from user..."" }'"
1299,94949125,"b'No, this is wrong. \r\nYou are handling a single failure scenario, and ignoring all else, which is very wrong.\r\nWhat happens if this is a 403 response? What happens if the endpoint sent garbage back?\r\n'"
1299,94949140,b'Wrong'
1312,95120859,"b'What about nullable float? nullable bool, etc?'"
1312,95121430,"b'float, bool ,double already working'"
1312,95121661,b'Do we have tests for them?'
1312,95122478,b'yes for bool. I will add for float'
1327,95202315,"b""We won't do that, this is really ugly an not necessary.\r\nWe can ask the merger not to dispose this one."""
1327,95227073,b'hmm... I think I know how to do it better.'
1328,95319793,"b'This is a property name, it is case sensitive'"
1328,95319831,b'Property names should be case sensitive'
1328,95319985,"b""We are never actually calling `Contains` on this. We don't even need a hash set here, I think"""
1328,95320028,b'Property names are case sensitive'
1328,95320051,b'property name is case sensitive'
1331,95327528,"b""It isn't virtual, no overriding"""
1331,95332064,"b""It was virtual until I changed it, but didn't change the comment. \r\nIn the next PR for this issue I will fix it."""
1331,95333393,b'already fixed'
1328,95363841,"b'But we are calling ```.Count```. Unless we have a better way to do that, ```HashSet<T>``` is the best I can think of. '"
1328,95364007,"b""What I'm saying, is that this is created once per index (very rare) and is never used otherwise. There is no perf benefit here."""
1328,95375163,b'Ahhh OK. that makes sense. Reverting that one too. '
1338,95523962,"b""Isn't it always POST now?"""
1338,95524071,"b'Why do we need this?  This is json.net, and it is going away, no?'"
1338,95526271,b' We need this for enum to be string and not int . i will change it not to use  json.net.'
1338,95526273,"b'yes, will be fixed'"
1338,95535084,"b'Yes, but that should be handled by the blittable, not json.net'"
1343,95550485,b'We are going to do that only in AdminDatabases'
1348,95587606,"b'This is duplicating the code above, no?'"
1352,95646637,b'why comment the code and not remove it?'
1357,95831382,"b""Shouldn't you dispose it?"""
1357,95831417,b'Bad exception without message\r\n'
1357,95831444,b'bad exception without message'
1357,95831580,"b""Shouldn't this be disposed at some point?"""
1375,96039709,"b'If you want to try the failures, just move the _context.GetMemory to the constructor and everything starts failing...'"
1372,96133172,"b""Why is this lazy? We have to create it per session, even if it isn't required. And we don't need to thread safety guarantees since a session is single threaded."""
1372,96133220,b'Same issue with creating Lazy'
1382,96139329,b'@maximburyak I think that this is what you need'
1382,96139381,"b""Shouldn't this be in reverse order? So we'll get the benefit of the stack allocation?"""
1382,96139394,"b'No need, the JIT will already do that.'"
1382,96140026,"b'The whole _point_ of moving the throwing to a different method is to reduce the cost of the throw if it is mostly not done.\r\nYou are moving this to a separate method, but force inlining, then you are putting the IsDispose check right here.\r\nYou need to move the if outside, not have inlining and only have the throw here.\r\n'"
1382,96140040,"b'There is no need here, we are already running over this and setting it to null on the root object.'"
1375,96140782,b'Are we actually ever touching this?'
1375,96140793,"b'I mean, making lookup decisions here.'"
1375,96140819,b'Can sensitive compare here is by design'
1375,96140843,b'Can sensitive here.'
1375,96140854,b'case sensitive'
1375,96140891,"b'I would expect the struct enumerator to be pretty fast here, no?'"
1375,96140936,"b""What is the error? and are you sure you aren't leaking this / reusing?\r\nAlso, why not do the stack alloc here, should be faster, and it is fixed & very small"""
1375,96141005,"b'After returning the memory, need to set `_allocated` to null. This object may be disposed multiple times.'"
1375,96148326,"b'Yes and No. They are fast because they do not allocate, but they are not fast enough for very hot paths because the MoveNext and other calls are not inlined.'"
1375,96148330,b'Ordinal is case sensitive.  '
1375,96148340,"b'This is Ordinal, not OrdinalIgnoreCase'"
1375,96148345,b'They show up in the profiling runs. '
1375,96148363,b'Stack alloc prevents inlining. The current version of the inliner cannot handle stack alloc on caller site; so the inliner decides not to inline at all (disregarding the aggresive inlining flag). '
1375,96178346,b'Is there a perf benefit here vs the `==`? Why?'
1383,96180328,b'Why no dispose this immediately?'
1383,96180665,"b""shouldn't we do this in reverse here as well?"""
1384,96181778,b'why not use `Memory.Copy` here?'
1384,96181850,"b'How much of a perf boost does this give us, and do we need to modify additional places?'"
1388,96197400,"b'assign is dirty to variable, then use it to properly register dependencies of pure computed. '"
1384,96229920,b'In this case a lot. This guy figured out using raw IL how to generate a repl move operation. For small size byte arrays this can be very fast. Also in 1.2 this JIT intrinsic has been optimized even further. Having said that the complexity of our copy is too big to be inlined here so the actual cost is dominated by the call overhead'
1384,96229969,"b""It won't inline"""
1392,96235463,b'@ayende Should we fail here ?'
1392,96235988,b'please ignore this file\r\n'
1392,96236486,"b""Don't do `more than '1'` user has no concept, add the actual number"""
1392,96236701,"b""Not corruption, just that the transaction hasn't been committed"""
1392,96237092,b'Need better error msg here'
1392,96237245,b'Need to be sure to update the voron format here.\r\n`Voron.Global.Constants.CurrentVersion`'
1392,96237401,b'why static?'
1392,96237557,b'Why call `ToList` if you are just going to iterate and throw in a bit?'
1392,96237605,b'TryParse'
1392,96237628,b'DeleteFile?'
1392,96237692,"b'Use SortedList here, instead.'"
1392,96238193,"b'Why is this logged? we will always have it when we start, at least'"
1392,96238328,"b'Wrong, this should be 72 hours from the newest element in here.'"
1392,96238450,"b""This doesn't need to be concurrent, and better be SortedList"""
1392,96238655,"b""Not thread safe here, and shouldn't be, make this instance value"""
1392,96238791,"b'Never do that, use `Path.Combine`'"
1392,96238861,b'so why is it here'
1392,96247373,"b""No it isn't.  We TryPop from _journalsForReuse and if it is empty (at start i.e.) then we returning null from this method"""
1392,96354347,"b""Name `FailOnValidHash` is confusing. It doesn't state that `txIdDiff > 1`."""
1392,96354741,"b""Didn't we loose the validation check and raising recovery error here? I don't see `options.InvokeRecoveryError` to be moved somewhere."""
1392,96355833,b'Is is ok to not have any size limit on `_journalsForReuse`?'
1392,96355987,b'`Path.Combine`'
1392,96356850,b'Path.Combine'
1411,96837835,"b""shouldn't we add it here in the `ForPath`?"""
1411,96837923,b'Need to also include the temp path folder as well'
1419,96923450,b'You still have a race condition here. Between the check for the dispose and the actual call.'
1419,96923531,"b'same here, we need to actually handle the failure of writing to the notification'"
1420,96927069,"b'at a minimum, we need to reschedule this'"
1420,96927159,"b""No, it should never happen, since the file is locked and we haven't freed it."""
1420,96927271,"b""You didn't fix this, same issue"""
1443,97619243,b'Why are you doing this?'
1443,97619732,"b'You read it all as a single blittable, and that is wrong. What you want to do instead is to break into independent values _as you parse it_, like we do in smuggerl, or @aviviadi work on the BatchHandler.'"
1443,97622836,b'JsonDeserializationClient is not supporting modifications?'
1443,97622901,b'Not possible here I think?'
1443,97623586,b'I think that I can override ProcessResponse...'
1443,97625440,"b""By design, but you shouldn't deal with it directly anyway here. build the blittable directly"""
1445,97657007,b'Why is this a string?'
1445,97657047,b'string?'
1445,97657267,"b""Don't put such things inside properties"""
1445,97657308,b'When is this going to be disposed?'
1445,97657502,b'Not a good name'
1445,97657622,"b'Why? you can manipulate the memory directly, it is a known size.\r\nBetter yet, just define a struct'"
1445,97657693,"b""Shouldn't have an init here."""
1445,97658011,b'Might get deadlock because you are opening a transaction at the same time it is already opened.'
1445,97658326,"b""Don't like the leader terminology here, we already have that concept in raft, and it is different.\r\nResolvingDatabase is a better term, I think"""
1445,97658664,"b""Don't bother with the if, just always write it."""
1445,97658767,"b""Why isn't this already handled as part of HandleServerResponse?"""
1445,97658914,b'what is the meaning of `serveFullResponse` ?'
1445,97659009,b'Why do you need to clone it?'
1445,97659095,b'How will this memory be freed?'
1445,97659247,"b'nice, might want to move it into the client.'"
1445,97661465,"b'The resolved.Doc points to a conflicted document, which we delete inside the Put method. Before we actually putting the document. '"
1454,97872659,"b'Too much state is carried around here, in the `isUpated`, the lock, etc.'"
1454,97872696,b'Why `|` and not `&&` ?'
1454,97872763,"b""Don't use the term leader"""
1454,97872851,b'This is really complex'
1454,97872944,b'yuck'
1454,97873255,b'why do you need this?'
1454,97873288,"b'Bad, fragile.'"
1454,97873310,"b'bad, fragile, and slows down the tests'"
1454,97879651,"b""Side affecty function shouldn't be named Get"""
1454,97886335,"b""I know, But have to wait until all changes are propagated (actually, this doesn't grantee it either).\r\n\r\n"""
1454,97887284,"b'I have to clone the conflicted document (which is selected as the resolver), before I pass it to the Put method.\r\nSince, all conflict will be deleted before the resolved document will be saved in the storage.\r\nOtherwise, this document will be also deleted. \r\n'"
1454,97887350,b'indeed :/'
1460,98001821,b'please put:\r\nstatic readonly'
1460,98059590,b'Why is this merging both `MaxIndexOutputsPerDocument` and `MaxMapReduceIndexOutputsPerDocument` to a single value?'
1460,98059659,"b""Shouldn't we do just anything less than 0?"""
1460,98059782,b'Move the exception to dedicated method'
1460,98059799,b'Move the exception to dedicated method\r\n'
1460,98064964,"b""We have 2 real keys:\r\n- MaxMapIndexOutputsPerDocument\r\n- MaxMapReduceIndexOutputsPerDocument\r\n\r\nAnd one 'fake' one used by IndexDefinition:\r\n- MaxIndexOutputsPerDocument\r\n\r\nI think this is the best way to handle this, because in IndexDefinition user does not care if this is a Map or Reduce index, so it sets the 'fake' key from which the configuration inherits when it is created."""
1473,98355690,"b'Everything is done on StringSegment, we should not materialize it to string if possible'"
1473,98355713,b'why this test is not migrated?'
1473,98355790,"b'nvm, it was migrated earlier'"
1481,98447567,"b""This is globally accessed value that isn't safe to modify from multiple threads, but that is what you are doing there."""
1481,98447635,"b'There is no need to do that, we just need to load the global indexes pools.'"
1485,98506286,"b""Doesn't this method _resolves_ the conflict using the specified conflict instance?"""
1485,98506635,b'You are spinning off a whole new thread for this? That seems excessive.'
1485,98506780,"b'No error handling here means that when you get any error, it will be thrown out and kill the entire server.'"
1485,98509910,b'This is going to be `O(N!)` cost at scale.'
1485,98510696,b'Not safe to iterate and modify at the same time.'
1497,98740426,"b'If `_skipUsagesCount` is set to true, it will always trigger, no?'"
1497,98740508,"b'If we have 1000 requests ending, that will mean that we abort early.'"
1496,98744641,"b'Might be just easier to change the tombstone deleter to just accept something that says ""across all collections, my latest is X""'"
1496,98744824,"b""This is wrong. What happens if the remote server has just restarted and isn't online. You are looking only at the _connected_ servers.\r\nInstead, you need to keep track of all of the confirmations that we previously got across all of them."""
1497,98749176,"b""_skipUsagesCount is true only for changes requests\r\n\r\nif _usages = 0 means that we don't have any more requests"""
1497,98750489,"b'And when a change request is over, that will be triggered, no?'"
1497,98751298,b'pushed the fix to the same branch'
1497,98751616,b'yes'
1496,98767133,b'Maybe support @all_docs? https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Client/Data/Constants.cs#L113'
1504,98868987,"b'You need to move it to the ProcessDocuments, ProcessIndexes, etc. Those operations might take a lot of time and we want to cancel them.'"
1504,98875564,b'You are right Going to fix it right now'
1514,99058317,b'why are you using a dedicated context pool?\r\n'
1514,99058480,b'huh?'
1514,99058603,"b'How can this happen? If we gave out this address in the past, and it was returned, the only way to get it here is if it was merged, or if we did a reset.'"
1514,99058660,"b""Wrong, this shouldn't be here. This is _really_ bad violation of encapsulation.\r\nAnd very hard to figure out."""
1514,99058707,b'Wrong'
1514,99058922,"b""Performance killer, qu'est-ce que c'est\r\n"""
1514,99059548,"b'There is no such define, only `DEBUG`'"
1514,99059764,b'No such define'
1514,99059891,b'Typo!'
1514,99061004,"b""Why are you checking that the _buffer_ isn't disposed here?"""
1514,99062748,b'Here you are forcing boxing allocation'
1518,99069155,b'why not just remove this line?'
1527,99111860,"b""This wasn't used?"""
1527,99112036,b'only once and replaced it with CreateTombstone'
1533,99288903,b'Why is the code commented here?'
1533,99288930,b'Why is the code commented here?'
1533,99288938,b'?'
1528,99291072,"b""What sets the op.Exception here? Are we sure we won't be sending an ok when we actually errored?"""
1528,99293975,b'Why did you do this? This reproduce the race condition we fixed.'
1528,99294100,"b'Will not actually work, the error is actually being thrown from the constructor.'"
1528,99484744,"b""I didn't do specifically that.. It was from your old pull i guess"""
1546,99538953,"b'No, need to do this properly.\r\nAlso, need to handle errors here, what if we cannot write (common in recovery scenario).\r\n'"
1577,99998113,b'Why is this an operational message?'
1579,100026947,b'But this is case sensitive comparison'
1579,100028116,"b""so we need to materialize `string` anyway. closing PR.  BTW I don't think it should be culture case sensitive, should it?"""
1565,100049741,b'Probably better to do ReadForMemory'
1565,100052707,b'What happens when I have multiple such updates at the same time?'
1565,100052832,"b""Don't think we can do that, can we?"""
1579,100062911,"b'No, it should be ordinal'"
1567,99821145,"b'Those are really basic stats, I do not think that it is needed here'"
1567,99822075,"b""We emit this only if it isn't null. This is an indication that the index is creating documents."""
1567,99823131,"b""Isn't this a built-in comparer? StringComparer.OrdinalIgnoreCase ?"""
1567,99823717,b'Maybe too generic? FromIndex?'
1567,99824011,"b'I know, but why we do need it here? The idea was to have this as thin as possible.'"
1567,99824184,b'GroupByFieldsa?'
1567,99824330,b'typo'
1567,99824582,b'Maybe create new implementation for IndexWriteOperation and overwrite needed parts?'
1567,99824713,b'SaveOutputDocumentsStats?'
1567,99824854,b'remove if not needed?'
1567,99824933,b'Are there any overrides?'
1567,99824981,b'remove if not needed?'
1567,99824997,b'remove if not needed?'
1567,99832393,"b""For debugging, we used to get all info about an index when going to the /stats so it made sense to me to add it here. And in order to keep it thin I added it only if it isn't null."""
1567,99832730,"b'Yes, this code is not in use it seems like should be removed.'"
1567,99832775,"b'Yes, this code is not in use it seems like should be removed.'"
1567,99833046,b'I think that a more suitable place would be to move it to /index/stats and remove it from here'
1567,99836182,b'Fixed.'
1567,99836802,b'We can always change this as long that the value will remain 2. We may reuse the artificial documents for other features.'
1567,99838035,b'Can you remove this also?'
1567,99838406,"b""It's ok. I was just thinking about a situation 'in the future' when you will have 2 or more places that are producing 'artificial' documents but from one of those you will want to replicate them. If was my only concern."""
1567,99838665,"b'This is a typo, fixed.'"
1567,99838694,b'fixed'
1567,99839108,b'IMO - There is no need for this.'
1567,99839326,b'Fixed'
1567,99840064,"b""You're right about your concern, but it looks like artificial would be better to describe a document which isn't going to be versioned or replicated. Note that the flags name should be exposed to the user as read only in the metadata."""
1567,100264419,"b""Need to add it as change to the index structure itself. We'll be forced to reindex entirely"""
1567,100264453,b'Should add it here.'
1567,100264754,b'Add it'
1567,100264782,b'Add it'
1567,100265102,"b""aren't we already writing the collection here?"""
1567,100265902,"b'When doing this sort of changes, we have to change the schema id of the db.'"
1567,100268402,b'Redo this'
1567,100268779,b'Override instead of ifs'
1567,100270746,b'Use:\r\n`if ((item.Flags & DocumentFlags.Artificial) == DocumentFlags.Artificial)`\r\n\r\nTo avoid boxing'
1567,100275138,b'Done'
1567,100275151,b'Done'
1567,100275171,b'Done'
1567,100275179,b'Done'
1567,100275316,"b'No, Collection is new field on DocumentInfo which should be handled.'"
1567,100277134,b'Done'
1567,100277757,b'Fixed'
1567,100282270,b'Note that this entire method is already measured here:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/Indexes/Index.cs#L998'
1567,100282783,b'Done'
1567,100292343,"b'Good point, I introduced a Commit method on the writer, and the Lucene.FlushToDisk is more specific now to the lucene commit.'"
1567,100265620,"b""Because the flags name is exposed, once we released, we can't change it.\r\nMaybe we can add a flags value `Artificial | Index` ?"""
1567,100292793,b'Done.'
1567,100292835,"b'OK, now it is implemented.'"
1594,100302268,"b""shouldn't we throw in this situation? @ayende ?"""
1594,100305215,"b""It's a feature :-)\r\nThe idea is that it is very common to get complaints about it. but this avoid the problem"""
1595,100306446,b'What happens if this throws?'
1595,100306564,b'Who owns the memory here?'
1595,100317298,"b'It will be handled as the higher level in indexing as before. \r\nNote that we had try..finally around this, not try..catch.'"
1595,100317327,b'Working on this'
1595,100528800,"b""Shouldn't this be cached? See the impl in `AnonymousLuceneDocumentConverter.Getfields`"""
1598,100533396,b'Why would we ever need it?'
1598,100533881,b'Why do we have duplicate code here with the topology?'
1598,100534138,"b'Why are you generating the message _outside_ the if? This way, you are doing needless allocations'"
1598,100534294,"b'Why is this the server calling the client deserialization? If this is used on both ends, better to move the method to the base class.'"
1598,100534549,"b""Why do it like this? The authenticator isn't an expensive class to create, and it doesn't seems to be used anywhere.\r\n"""
1598,100536088,"b'You just exposed the API key in the error, which is NEVER to be done'"
1598,100536291,"b'Nevermind, saw that this also goes to the exception'"
1598,100536719,"b'Okay, this is required because we use interruptible here.'"
1595,100693543,b'https://github.com/ravendb/ravendb/pull/1606'
1606,100695149,"b'move it to LuceneIndexPersistance, cache it there, and pass as a parameter to OutputReduceIndexWriteOperation?'"
1609,100700337,b'use the value from Constants?'
1609,100737168,"b'No, better to just use this:\r\n\r\nhttps://github.com/steveharter/dotnet_coreclr/blob/master/src/mscorlib/src/System/IO/PathInternal.cs#L34'"
1609,100737212,b'This test can only run on Windows'
1606,100738333,b'What would be the benefit?'
1606,100738504,"b'It will work the same, thought that it might be a better place than exposing a public field.'"
1606,100739099,b'As it is not related to the Lucene persistence it feel more natural to put this on the index itself (map-reduce only).'
1615,100788851,"b'this is wrong, after releasing 4.0.0 stable, next stable will be 4.0.1, but here you have hardcoded .0 so it will be still 4.0.0.\r\n\r\nThe proper string is in \'FullVersion\' property, check here: http://4.live-test.ravendb.net/build/version\r\n""FullVersion"": ""4.0.0-alpha-40008""\r\nJust use that in WelcomeMessage'"
1628,100894143,b'This should be removed'
1628,100894244,b'Implement it all..'
1633,101071900,b'Probably can rename this.'
1633,101071920,b'This too'
1635,101075393,b'Where is the path for this?'
1635,101075510,b'Also include the path'
1637,101080269,b'Why do we have these modicaitions to the documents storage?'
1637,101081022,"b'You are losing the exception here. If we have an error during startup, we are now in a strange invalid state.'"
1637,101081378,b'Include the fs name?'
1637,101081438,b'Why VoronStream and not just Stream?'
1637,101081679,b'options should probably the last disposed.'
1637,101082750,b'What are all those `|` in the route? and the docs is wrong.'
1637,101082994,b'Bad route'
1637,101083096,b'huh?'
1637,101083182,b'This entire file needs to be removed.'
1637,101083328,b'32 bits handling is missing'
1637,101083964,"b""We'll need to merge this with the `FastTests` (for now) code.\r\nWe don't want to have too many test proejcts.\r\n\r\nFor now it is fine while you are just looking at those, but we won't keep it long term"""
1637,101084080,"b""don't commit commented files"""
1637,101220116,b'Why not to name it just `File`?'
1637,101221710,b'Code duplication: this method is exactly the same as in `DocumentsOperationContext`'
1637,101221821,b'We need to have a single method in a base class'
1637,101222356,b'Also the same logic as in `DocumentsOperationContext`'
1637,101222430,b'The same method as in `DocumentsOperationContext`'
1637,101223950,b'_unmanagedBuffersPool no one is using this. As I went over this code I made there a few improvements. We should convert all strings there so using Slices.'
1637,101224124,"b'If so, this is exactly how it is in DocumetnsStorage. We losing the exception only in one implementation of the Initialize but not in the other... which looks strange.'"
1637,101224180,"b'ok, will do so also for DocumentsStorage.'"
1637,101224580,b'I changed it to Stream.'
1637,101225030,b'OK. Will change this also in DocumentsStorage.Initialize(options)'
1637,101225081,b'FileHandler is a WIP - should not be commited'
1637,101225515,"b""I think it is better to be isolated, so if you work on FS you can run just those tests and if you word of documents you don't care about those tests.\r\nBut if you do not agree, I will merge them now."""
1637,101225631,b'Because of conflicting with System.IO.File name'
1637,101226126,b'Done'
1637,101226212,"b""That won't be a problem for us. If we have any usage of those two in the same class (I don't think so) we can use full qualified names then."""
1637,101226315,"b'It is OK to have the duplication now, as I just start to see what is needed by the FileSystem. Once it will be solid we will merge staff.'"
1637,101255100,b'Please fix both'
1637,101255301,"b'Yes, that is fine for now, not in the long run, though'"
1662,101500295,"b'The message can be hard to figure out. Better put it : ""Failed to load analyze ANALYZER NAME"", and then the exception with the details'"
1661,101500622,"b'Those settings will never actually take effect. We are calling this in the ctor, before the user has a change to change it.\r\nNeed to actually change those values by default in the setter.'"
1660,101500680,b'Um... what?!'
1662,101502323,"b""The message is 'Cannot find analyzer type '{analyzerTypeAsString}' for field: {name}'. Just wrapping it in IndexCompilationException."""
1663,101502277,"b'Why call `TableValueToDocument` here? We need to do a lot more, check if the doc exists, if there is thumbnails, etc.'"
1663,101504630,"b'I mean we should remove the call to TableValueToDocument down the road... it is called by Get which called by GetDocumentOrTombstone, but there is no need to build the blittable data object since we just load it to see if it there and get the etag etc... so I suggest not to use TableValueToDocument but read just what we need when reading the doc from the delete.'"
1664,101508571,b'the JIT comment is no longer correct'
1664,101508640,"b""This is valid only if the user didn't already change it from the default values."""
1665,101520119,"b'Need a better name, but not sure what'"
1665,101520168,b'Missing return here.'
1665,101520270,"b'This seems confusing, better to reverse the name and add `== false`'"
1665,101520388,b'Binding to `0.0.0.0` is NOT binding to local. '
1665,101520489,"b'Add `Type = Error` here, so our usual error handling with deal with it.\r\n'"
1665,101520643,"b'This goes as JSON string, so it will not be as readable with the line breaks escaped\r\nMake this into an array as well, so when formatted, it will be easier to read. (The array is just for display purposes, nothing more.'"
1665,101520742,b'Unauthorized mode is a bad choice of words. It should be `potentially unsafe`'
1665,101520883,"b'This is accurate, but you need to also explain the rational and also what is the impact of this is.\r\n\r\nAs it stands, users will read, say ""oh, I need to set this config"" and do that, without understanding implciations'"
1668,101605653,"b""Why do we need this check? Don't we have a seprate one for each db?"""
1666,101704447,b'Looks like a debug code. An exception will be ignored'
1666,101704493,"b'Debug code, as well?'"
1666,101704820,"b'Thanks for the review, I missed it when I went over the code.\r\nYes, this has to be fixed. '"
1666,101705177,"b'Have you had a problem because of that? Looks like relevant for 3.0, 4.0 as well, is it?'"
1670,101909864,"b""What happens if I take the db from 32 bit machine (with no special configuration), then load it on 64 bits machine?\r\nWouldn't this result in us getting the wrong size for the bloom filter?"""
1666,101912848,b'Yes'
1668,101912923,"b""Yes we do, but we don't need to have a task for the system database. It is very hard and unprobable that anyone will have replication between system databases enabled"""
1670,101914942,"b""This is a 'desired' mode, but if you are loading the bloom filters the first one is calculating the actual mode: https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/Indexes/CollectionOfBloomFilters.cs#L112"""
1668,101915798,"b""So? People actually do have that.\r\nAnd I'm not sure why this is even required?"""
1673,101915434,b'Can you make this internal?'
1673,101915943,b'Why this casing?'
1673,101915951,"b""You _don't_ authenticate from the client side"""
1673,101915952,b'YEs'
1673,101915976,"b'Unused, should be removed'"
1673,101915981,b'Should be private'
1673,101915984,b'Should be private\r\n'
1673,101916014,b'Why missing member?'
1673,101916708,"b""didn't know what to throw\r\n"""
1674,101916841,b'Why have both `const`?'
1674,101916862,b'What is this endpoint? And why do we need a special command?\r\n'
1674,101916879,"b""Stop calling those, they don't do what you think they do"""
1674,101916881,b'Remove'
1674,101916903,b'Explain what is the error'
1674,101916909,b'Explain what is the error and where it happens.'
1674,101916943,b'Why would this ever be called?'
1674,101916950,"b'Remove this, we never want this to happen.'"
1674,101916955,"b'We _never_ do a check with the offset, you need to mask them at the switch'"
1674,101916961,b'Add a check for the property name'
1674,101916966,b'remove this'
1674,101916972,b'we never save the change vector back'
1674,101916988,"b""Why `LoweredKey`, and make sure that we don't hold to memory here from another context"""
1674,101916995,b'Remove this'
1674,101916999,b'Remove this'
1672,101913462,"b""Can't we use flags? https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/DocumentFlags.cs#L9"""
1672,101914823,"b""hm, it's indeed probably better to use flags here.\r\n """
1672,101916089,"b""Don't use implicit operators, they are a good way to get into head scratching contests.\r\nUse explicit `From` method overloads."""
1672,101916111,b'Just throw `NotSupportedException` here'
1672,101916115,b'Who will call `Clear`?'
1672,101916128,b'Just create a new instance.'
1672,101916135,b'\xf0\x9f\x91\x8d '
1672,101916258,"b""Remove change vector from here, we'll have a new version"""
1672,101916352,b'This corrupts memory'
1672,101916388,"b""It's not starting with here."""
1672,101922749,"b'If we remove this, we will send on replication the same document with different change vector.\r\nWhich will result on the destination as a document with 2 different versions.\r\n'"
1666,101924850,b'No. It looked we might have a problem. It will be in 4.0.'
1675,101924848,b'Need to use `PosixSafeFlags`'
1675,101925047,b'`spare memory` ?'
1678,101925586,"b""Isn't this a busy wait?"""
1678,101925992,"b'At what point do you give up, you are holding up a request processing thread'"
1678,101926004,b'Why is this an admin operation?'
1678,101926030,b'Duplicate from Admin?'
1678,101926061,b'How do you handle this after restart?'
1678,101926143,b'Why are you deleting the existing index?'
1678,101926164,"b'Here we need to block it from accepting new queries, no?'"
1678,101927234,"b""Wrap all of those in ReplacementInformation. It is very confusing to have all of those available on each index instance , especially the 'RealName' which will be null in 99% of the time."""
1678,101927300,"b""Wouldn't it be better to have IndexReplacer inside IndexStorage that would listen to the BatchCompleted? Will there be an option to replace after certain time?"""
1678,101927630,"b""We don't allow replacing at specific times"""
1679,101956914,b'Intentional?  That will have noticeable impact on the performance.'
1678,101960451,b'It was requested in the issue http://issues.hibernatingrhinos.com/issue/RavenDB-5622'
1679,101960719,"b'Yes, otherwise on heavy writes we are gathering a lot of scratch files'"
1678,101973870,b'I am deleting the replacement index because the new definition is like the original one'
1678,101974619,"b'yes, this is unnecessary'"
1678,101975219,b'We give up when we succeed with index replacement (we are waiting for _indexAndTransformerLocker lock)'
1683,102024944,b'Still need to do the win32 ones'
1692,102079931,b'why commented?'
1692,102080009,b'Move this throw to a dedicated method.'
1692,102080161,"b""Isn't this actually a document & tombstone at the same time, not tomstone & conflict?"""
1692,102080243,"b'In this case, can it ever has an not null `expectedEtag`?'"
1692,102150497,b'it should be deleted'
1692,102150595,"b'this is wrong, it should be ||'"
1692,102151120,"b""Even if it has not null value. It should not have any effect since we don't have a document nor a tombstone.\r\nSo i'll remove this check."""
1692,102153881,b'if I remove it WillVerifyEtags_OnDeleteNotThere test fail.\r\nSince it tries to delete document that does not exists.'
1675,102169228,"b'@ayende Is it ok to set PosixSafeFlags on PosixMemMapPager ? we do not use it to write to the journal (as we do with PosixJournalWriter), only for reading from journal on recovery.  Also it will be wrong to use these flags on scratch/datafile pagers.. so.. ?'"
1675,102169780,"b'No, it is not fine to set those.'"
1702,102249759,b'This being a  class is too costly. It should be a struct instead (you are not supposed to keep these scopes around anyways). '
1702,102250396,b'Invert the logic here to ensure no jumps happen at the assembler level. \r\n```csharp\r\nif ( _usage++ <= 0 )\r\n{\r\n    Ptr = writePos;\r\n    return this;\r\n}\r\nelse \r\n{ \r\n     Throw....\r\n}\r\n```'
1702,102252335,b'Also do we want this check to happen at runtime always? or during validation?'
1702,102252936,b'This should be enclosed in ```#if DEBUG``` to avoid allocating that space in the stack when not running in debug or validation. '
1702,102253700,b'Shouldnt be called ```IHasName``` of something like that? Because having an ```ITree``` interface just for debugging/error reporting purposes doesnt make much sense. '
1702,102255846,"b'Probably I am not understanding the solution, but I dont see any way that the addition of the scopes would solve the outstanding issue (Ptr may change along the ride). The new BloomFilter64 created here keeps the ptr alive outliving the scope, which by itself can become invalidated by an split the next sentence. '"
1702,102256861,"b'Ok, not possible because they can change from inside the tree. '"
1703,102295458,"b""You didn't remove this call from PosixJournalWriter"""
1698,102296199,"b'Can just call to TrySetResult here, no?'"
1698,102296679,"b'Can we do it without a dedicated thread and a sleep? A task with an event should also work here, no?'"
1702,102308256,"b""See the comment on line 98, this is fine because they are overflow pages, so we know they can't be modified by page splits."""
1702,102309033,"b'There is only ever one instance of that per tree, so that should reduce the amount of allocations considerable.\r\nThis is also a non virtual method call that is being explicitly returned, the JIT should still be able to inline it.'"
1702,102309091,b'\xf0\x9f\x91\x8d '
1702,102309442,"b'Can we avoid this? How about allocate it once in ctor, and then require that if it get here, the previous call has been disposed?\r\n\r\nThis method is called a _lot_ and the whole reason it exists is that we want to avoid allocations.'"
1702,102309684,"b'This should return DirectAddScope, to avoid virtual method call'"
1702,102309756,"b'For that matter, we can rely on the usual ToString() method, and avoid the complexity here entire, no?'"
1698,102325270,"b'@maximburyak we do not have ClientFastTests anymore, please rebase'"
1705,102417413,b'Just pass the parent tree instance directly (as `object`) and call `ToString()` only if we need the error.'
1705,102417554,"b'Add a compiler flag for this, instead of commenting? '"
1705,102422002,"b'Oh, ok'"
1706,102418025,b'We are forced to do string allocation here just for the rare case on the error'
1706,102421372,"b""Sorry, I misunderstood. I think we can get rid of it completely. If we got this error then we'll have to debug it anyway. It's very little sense of keeping it."""
1706,102428619,"b'This should be `VALIDATE_DIRECT_ADD_STACKTRACE`, no?'"
1707,102451468,"b'This can be negative, if the field is just RangeFieldSuffix'"
1707,102451826,"b'Why are we outputting both double & long values here? It should be one or the other, no?'"
1707,102451912,"b'On the other hand, this does give us the ability to do easy traversal of the ranges, using either double or long, right?'"
1707,102453229,"b'Yes, for numeric, we always create 3 fields now, Name, Name_L_Range and Name_D_Range. User can sort using any of them.'"
1707,102460157,b'Fixed'
1701,102299545,"b""Why is this here? This isn't the responsability of the command, it is handled by the command executer"""
1701,102299668,"b""This shouldn't be here."""
1701,102299775,"b""Since we are making a modification here, we _do_ want it here (the executer won't do that for us for writes).\r\nHowever, is the a way to avoid the string format / concat here?"""
1701,102300170,"b""Why is this here? This is a read request, after all, and the executer should handle it.\r\nThat said, however, I'm not sure what it even should do for attachments, they are likely to be large, no?\r\nSo do we want to have them cached in the first place?"""
1701,102300996,"b""Yes, it is probably better to have the user provide a destination stream that we'll write to immediately. \r\nThis way they can choose how to handle this, directly to network, to file or process inline."""
1701,102301526,b'\xf0\x9f\x91\x8d '
1701,102301618,b'Remove `Slice` from the name'
1701,102301637,b'Remove `Slice` from the name'
1701,102301720,b'`recored` is typo'
1701,102301957,b'Bigger problem would be:\r\n\r\n`fitz0(record-separator)profile.png` and `fitz(record-separator)0profile.png` would be indistinguishable '
1701,102303002,b'Are we going to support it?'
1701,102303316,"b""Might be better to drop the storage id notion. The issue is that we are going to have to do accounting, and we want to be able to show the stream name to the user (if an attachment is very large, we want to be able to tell what it is).\r\nLet us use the attachment key as the stream key as well, so we'll be able to handle it.\r\n"""
1701,102303598,"b""Shouldn't we do this (and all the work in the method in general) _before_ we run all the attachment stuff?\r\nThis is a precondition, after all."""
1701,102303696,b'How can we have a null change vector here?'
1701,102304007,"b'Yes, `yield` and dispose please'"
1701,102304219,b'Better use a struct here'
1701,102304232,b'Better use a struct here'
1701,102305349,"b""'not exist' -> 'non existent'\r\nAnd why is this an error? If they don't have an etag, that is fine and will be a noop"""
1701,102305536,"b'No, if I have an etag, should error here.'"
1701,102305703,"b'Why is this required? The etag should handle that, no? How is this different from any other endpoint?'"
1701,102305809,b'using'
1701,102305841,b'move to separate method'
1701,102305962,"b""Don't use the global temp path, instead, use `DocumentStorage.Environment.Options.DataPager.TempPath`"""
1701,102306068,"b'This allows 80 KB, why? You can copy manually using the managed buffer from the context and save all those allocations'"
1701,102306204,b'Add doc id & file name'
1701,102306446,b'RavenDB is incredibly generic term for us.  And why do we need / want to have a meaningful name here?\r\nCall it `attachment-{Guid.NewGuid()}` and be done with it.'
1701,102306522,"b'Can also specify sequential flag here, probably'"
1701,102306924,"b""No, why would we ever want to do something like that? You can't undo this to component parts easily.\r\nWhy not use an array?"""
1701,102306945,"b'No, use an array here.'"
1701,102307282,"b'No, this was written intentionally in this way, so there would be no jumps in the code in the common case.\r\n'"
1701,102307568,"b'Add Russian and Thai ids as well, they also gave us issues.'"
1701,102399924,b'Is this be design or we are going to support it later on?'
1701,102402619,"b'Removed, as Get requests has the etag set by the request executer.'"
1701,102402653,b'Indeed. Removed.'
1701,102405862,"b'I modified it to be:\r\nrequest.Headers.TryAddWithoutValidation(""If-Match"", $""\\""{etag.Value}\\"""");\r\nThis will avoid no needed class allocation and some validation code but I don\'t see a way to avoid string concat as we need to pass a string there.\r\nI thought that we do not care about this in the client side as it is going to make a request to the server.'"
1701,102407086,"b'No, we do not want to cache them in the client. So we do need to add it here.'"
1701,102410517,"b""Actually as we are not going to cache this I'm going to remove this."""
1701,102416026,"b'Oh, we are going to support it, absolutely.'"
1701,102416462,"b""We don't cache it, but the user's might, and it is a good idea to enable this scenario for them.\r\nI'm fine with marking this as a non read request to disable the request executer caching, and then letting the user provide an etag manually."""
1701,102416529,"b'Note that we need to be clear about caching attachments in the docs, though'"
1701,102418911,b'Done'
1701,102419115,b'Done'
1701,102419129,b'Done'
1701,102419744,b'Fixed'
1701,102420088,"b""I'm not following. With a separator I can see by prefix: fitz(record-separator) and get all the attachments of it without attachments of fitz0."""
1701,102420226,"b'I think so, later on.'"
1701,102420302,"b""I'm saying it would be a problem _without_ a separator."""
1701,102420331,b'OK'
1701,102435558,"b'I changed it so we update the document before we save the attachment, but still the document etag will be greater than the attachment.'"
1701,102436143,b'We cannot. Fixed.'
1701,102438052,"b'Done, but it means that we may load the attachments in cases that we are not needing them (if we have a case that load without sending to the user).'"
1701,102438587,b'This is true for all Voron.Util.DisposableAction so I changed it to struct.'
1701,102438927,b'Fixed'
1701,102443041,b'Fixed.'
1701,102443134,"b'Done, also for documents delete.'"
1701,102443305,"b'OK, I removed it. \r\nI learned to do this from the code of v3.5.'"
1701,102443343,b'Done'
1701,102443493,b'This was changed already to different impl.'
1701,102445206,b'Done'
1701,102446919,b'OK'
1701,102450374,"b""I'm not sure that I'm following here?"""
1701,102453691,"b'Done, with a comment to improve later:\r\n\r\n                    using (context.GetManagedBuffer(out buffer))\r\n                    {\r\n                        var requestStream = RequestBodyStream();\r\n                        // TODO: Improve this to be more efficient: read more from the network while we writing to disk.\r\n                        while (await requestStream.ReadAsync(buffer.Buffer.Array, 0, buffer.Length, Database.DatabaseShutdown) > 0)\r\n                        {\r\n                            await file.WriteAsync(buffer.Buffer.Array, 0, buffer.Length, Database.DatabaseShutdown);\r\n                        }'"
1701,102454089,"b""In the client I'm returning it from the supplied info to the server... But yes, I'll change it to return this data, despite of the duplication."""
1701,102456367,"b""I'm thinking about the debuggability of this over the wire, so that would make things easier. Also make sure that we get the proper casing."""
1701,102456432,"b'Not sure if we want it, this is okay, and avoid overloading the system.'"
1701,102462140,b'See current implementation.'
1701,102463266,b'Please review the change I made.'
1701,102463286,b'Please review the change I made.'
1701,102463307,b'ok'
1701,102463397,"b""Yes, this is why I tested against it and I'm leaving this as a comment."""
1701,102464983,b'I added a todo comment about returning the actual casing on disk as it may not be needed here and will require a big change to the code.'
1701,102591317,"b'The action should also get the `AttachmentResult`, so user can just provide generic method to handle anything.'"
1701,102591587,b'\xf0\x9f\x91\x8d '
1701,102591829,b'No one is calling this method'
1701,102592211,"b""Didn't we remove the stream identifier?"""
1701,102592334,b'We can remove it and just provide the same operations on the key'
1701,102596135,"b'No, `IDisposable` is an interface, this is allocting'"
1701,102596185,"b""You can't. This is allocating because you are returning `IDiposable`."""
1701,102601170,"b""Don't think we want to support this"""
1701,102601215,"b'No, copy this using the managed buffer on the context'"
1701,102601386,"b""On Linux we'll need to delete this manually, need to handle this too"""
1701,102601558,"b""Why not use a Guid here, then you can be sure it won't have conflicts"""
1701,102601865,"b""No, this method needs to be deleted. You need to use a json array instead. We don't do string parsing."""
1701,102601945,b'Still need to fix this.'
1701,102602052,"b'No, bad change. Instead, we need a _distinct_ struct whenever this is used.'"
1701,102662008,"b""I'm not sure that I'm following. We do return here the AttachmentResult. Do you want it to be passed in the constructor? The content type is not needed there."""
1701,102662350,"b'Yes, we did. Fixed the comment.'"
1701,102667181,"b'We should support table.SeekForwardFrom(AttachmentsSchema.Key, startSlice, true) but it is failing now because of expecting fixedSizeTree'"
1701,102670686,b'OK'
1701,102670696,b'Done'
1701,102676023,b'Done'
1701,102676460,b'OK'
1701,102676864,b'In the metadata we support only strings values for now. \r\nWe can either change this requirement or use string.Join and not use LazyStringValue for @attachments metadata.'
1701,102733780,b'Use Database.Configuration.Storage.TempPath that is a PathSetting and contains Combine that takes care of all platform related path issues?'
1717,102718569,"b'No, use a mask, like everywhere we do this'"
1717,102718928,b'Use the const'
1717,102718975,b'throw should be in dedicated method.'
1717,102719061,b'Stopping commitintg this'
1701,102810133,b'This looks like a missing else here.'
1701,102810427,b'Better to avoid using delegate & linq like that here.'
1701,102810549,"b""We need to consider allowing more complex types in the metadata ( I really don't want to do that, though ).\r\nMaybe just for our stuff?"""
1701,102812430,"b'Too big and does too much, and the name is misleading'"
1701,102813316,"b'This is actually invalid for us to do, we have to copy it to the size and then update.\r\n@karmeli87 has run into that, and it can cause corruption in strange cases.'"
1701,102823729,"b'In this case I think it safe, because every call of this function ""data"" and ""LoweredKey"" are a new objects (btw, do you need to dispose the data object?).\r\nSo we can safely update the table without corruption.     '"
1701,102824557,"b""It isn't actually new objects, they point to the old data. \r\nThis is actually safe because we don't change the size of the data, but that isn't something you can count on (it may be a value that came from replication, then you add your change vector to it) and then it would only fail on very rare cases, but that is data corruption."""
1738,103108064,"b""This is fine here, since this isn't perf sensitive, but be aware that in hotspots, we can't pay for this."""
1737,103108165,b'What if I have multiple calls to Patch? I want all of them.'
1737,103151810,b'Maybe use session.Advanced.Defer ?'
1737,103152695,b'This should be a part of session not an immediate operation I think?'
1737,103152908,"b'Yes, it should be send as the same tx'"
1742,103156985,b'This overrides session.ToString().\r\nUse session.Advanced.Defer and you will not need this at all.'
1742,103157420,"b'The idea is that we can see what patches are pending, but this has to be a _separate_ object.'"
1742,103157710,b'But if this is for debugging then someone can see also the list of deferred commands in the session object?'
1742,103157918,"b'Yes, but not very easily'"
1742,103158765,b'Then maybe in ToString we should iterate through the deferred commands and build the debug output based on them? The advantage is that you will see debug information for all pending commands.\r\nAlso _patchInfo is not cleared on SaveChanges'
1743,103205093,"b""We aren't using lseek, need to fix this"""
1750,103216069,b'Lambda2Js'
1750,103216252,"b'Match the version with the one that you are using, but increase by some number so it would not take the package from NuGet e.g. 2.0.99'"
1750,103216320,b'1.6.1?'
1750,103216394,b'Since this is compiled for NetStandard already then do we need this package?'
1750,103216674,"b'this is wrong, should be Advanced.Defer(new PatchCommandData { ... })'"
1750,103216342,b'what is this?'
1750,103217077,"b""Remove, we don't need special behavior here"""
1750,103217165,b'push'
1750,103218562,"b'Signature is misleading, maybe change to two overloads:\r\n1. Defer(ICommandData command, params ICommandData[] commands)\r\n2. Defer(ICommandData[] commands) ?'"
1750,103218706,"b'Yes, good idea'"
1752,103234084,"b""Isn't the version that you are basing this on 2.0? Can you make this 2.0.99?"""
1757,103419343,"b'Not a good idea, we have a value, just different type, and will mask a lot of errors, I fear'"
1757,103419417,"b""Need a better name, `suggest-conflict-resolution` ? We aren't resolving anything here."""
1757,103426054,"b'I think, that if we failed to get a member with the specific type we should return false and not throw an error.'"
1757,103426379,"b'No, that will hide issues that will cause trouble later'"
1768,103646870,"b'This sends the data all the time, right?'"
1768,103647677,"b""Yes, every 5 seconds, but only if the studio is watching. Once we don't have any active watchers (studio) we stop this background work completely."""
1768,103647843,"b'It is replacement for watching all docs and all indexes, which we did in 3.X studio. '"
1775,103789148,"b""idle follower, don't you mean leader here?"""
1775,103789408,"b""Isn't this the same code exactly as above, what is the difference and why do we need both?"""
1775,103789553,b'This will only work if we are replicating to just one failing instance.'
1775,103789701,b'The `Console.WriteLine` should be removed.'
1785,103989863,b'\xf0\x9f\x91\x8d '
1785,103989971,b'Why not to `IMetadataDictionary` ?'
1785,103990561,"b""I think that we'll not need to. We're creating the versions on Put, so we'll just handle it normally (if there are no other refs to the stream, we'll delete it."""
1785,103990863,b'Need to add the new debug tag here.'
1785,103990976,"b""We now have debug tag for streams, which might help, but I don't think that this method would do anything for us now that we also have versioning, no?"""
1787,104019580,b'What is this for?'
1789,104117737,"b'Oh, so we have a problem if we try to signal the event after ti was already disposed?\r\n'"
1789,104117900,b'Yes'
1785,104314352,b'I changed that.\r\nThe reason that I introduced IMetadataDictionary after changing this... but now I fixed this. Thanks.'
1785,104314543,"b""DeleteAttachmentsOfDocument also delete the streams. But streams should not be deleted if there is a versioned attachment metadata with this stream. And I'll add another todo, not to delete if there is same hash in a different metadata."""
1785,104314749,"b""Yes. I'll will need a way to load stream by tag, this will help me test for sure that we deleted a specific stream. Without it I'll have to iterate on all the streams and test against their tag."""
1785,104360177,"b'No, there is no need to do that. I think'"
1822,104685144,b'can be called multiple times'
1825,104716784,"b""Why is this even required? Shouldn't this already happen by default?"""
1824,104718640,"b'In the future, try to keep them without changes if we can'"
1823,104719693,b'What scenario is there to give us null here?'
1823,104719915,"b'Why is this even needed now? We are only using it once, and we already know how it behaves.'"
1823,104720106,"b""shouldn't we throw in this case?"""
1823,104720187,b'Typo in class name'
1823,104720469,b'Why not using statement?'
1824,104856557,b'OK'
1838,104958159,b'Maybe we should pass CancellationToken here?'
1839,104966435,b'This seems redundant? Why we are sending Etag/Id back inside metadata also? Do we need to send metadata even? I do not see any modifications inside Put?'
1839,104979428,b'For the case when we make SaveChanges and GetMetadataFor in the same session.'
1839,104993754,"b'Basically, the issue is that we lose the Etag & Id in the metadata on the return call.\r\nThis is bad for the client, because it needs to stitch them together, since we are writing it back out again, we can just put it there at very little additional cost.'"
1839,104993898,"b'Technically speaking, we can just keep the metadata fields, and read the values from there on the client, I guess.'"
1839,104994115,"b'In fact, looking at the code, this is what we _do_.'"
1835,105008232,b'Why do we need to have this flag?'
1835,105008267,"b'And for that matter, why are we making decisions based on it?'"
1838,105010487,"b'Agreed, that would be a good idea'"
1839,105027418,"b'Yes, but we have Key and Etag already in the reply so why not save the traffic in this hot-path and just take care of this on the client? Now we are sending Metadata back and forth with all other fields.'"
1839,105028041,"b""I removed the other fields, and kept them in the metadata.\r\nAnd we want to do it this way to the client doesn't have to re-blit the metadata after receiving it."""
1835,105103267,"b""I didn't wrote this, just move it to the right location. It was on the beginning on the method and I moved it just before the use."""
1855,105569467,"b""Maybe you can use same technique as in here https://github.com/ravendb/ravendb/blob/v4.0/test/SlowTests/Tests/NoNonDisposableTests.cs\r\nand avoid additional dependency to 'Microsoft.Extensions.DependencyModel' ?"""
1855,105604895,b'Why is this here?'
1863,105657886,b'This needs to be outside the try/catch. You cannot ignore LuceneWriter commit errors.'
1863,105670541,"b'OK. \r\nSo I will throw in the catch after adding the alert. \r\nThis way we will retry the batch if we had an error, either commit to the docs store or to the lucene store, instead of continue to index without creating some output documents.\r\n@ayende please also take a look.'"
1863,105678984,"b'Done, ready to merge'"
1863,105680447,b'Can you move base.Commit outside the try/catch? By doing this you will ensure that the exception message is appropriate.'
1863,105680496,b'typo: documnts'
1863,105683207,b'Fixed'
1863,105683243,b'Done'
1867,105735544,b'should be isPreV4Build == false ?'
1867,105739250,"b'Maybe wrap build version in sth like this\r\n```\r\npublic class BuildVersion\r\n{\r\n    public class BuildVersion(int buildNumber)\r\n    {\r\n        Type = <calculate here>;\r\n        Number = buildNumber;\r\n    }\r\n\r\n    public enum BuildVersionType\r\n    {\r\n        V3,\r\n        V4,\r\n        etc\r\n    }\r\n}\r\n```\r\npass it through the code and calculate everything just once?'"
1867,105739972,b'Is there a way not to have it here? This is legacy value.\r\nIf not then maybe we can rename it to LegacyRevision? What about using Versioned?'
1867,105836131,"b""This is actually used to pass around information about the revision, and it isn't actually being stored. We should probably have a better name for this, that indicate that it isn't actually stored."""
1867,105836313,"b""We might actually be more clear if we'll have a `NonPersistentFlags` here? """
1867,105839743,"b""Maybe since this is used only in code that handles legacy stuff, we can use DocumentFlags.Versioned ? We would avoid having a new value here + avoid having 'NonPersistentFlags'. Just an idea."""
1867,105869518,b'correct. thanks'
1867,105883387,"b""Can't use DocumentFlags.Versioned, it's needed for already versioned documents"""
1876,106092714,b'what is this meant to do?'
1876,106100329,"b""It's was a part of SQL replication. `SuspendUntil` data is set here as `newTime`:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/ETL/Providers/SQL/SqlEtl.cs#L108-L119\r\n\r\nI think I will handle that differently and make it specific only for SQL ETL instead of having it in a base `EtlProcess` class."""
1884,106172148,"b'I think you can safely move everything from here to EnsureValidStreamQueryStats, this is also a part of validation checking if the type of value is parsable to int for example'"
1884,106172222,b'WriteBool ?'
1884,106172290,b'WriteInteger'
1884,106172393,b'WriteInteger'
1884,106172768,"b'Do not check if property is ResultEtag, do it inside the EnsureValidStreamQueryStats'"
1884,106172836,"b'Move this outside this method, this is not part of the stats'"
1884,106172914,b'Same here'
1884,106173648,b'wrap in using'
1884,106174770,b'can you mark it as readonly and pass it using the constructor?'
1898,106629957,"b""Why do we have both `SqlReplicationLoader` and `EtlLoader`? Aren't they the same in this case?"""
1898,106630289,"b""We want to use a long term request executor here, because we'll be calling this a lot, and we want to save the auth and connection tearing."""
1898,106630555,b'`SqlReplicationLoader` is going to be removed'
1898,106630613,"b'Okay, thanks'"
1899,106630668,b'Need to fix the name here.'
1899,106630699,b'Invalid message here.'
1899,106630782,b'What are we using managed arrays here?'
1899,106630839,b'Need validation for size that is too large'
1899,106631008,b'Why are we using a ref here?'
1899,106800941,b'Done'
1899,106801014,b'Fixed'
1899,106801092,b'We have it here:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/Replication/ReplicationDocumentSender.cs#L409'
1899,106801100,b'This should be changed.'
1899,106801117,b'This should have been changed. This method is WIP anyway.'
1899,106806144,"b'This is on the send, this is on the read'"
1912,106841749,b'`sealed` class?'
1912,106841782,b'https / https here.'
1912,106841861,b'Why are we waiting here? We can do that on the first `StoreAsync`'
1912,106841887,b'What are you doing with the id?'
1912,106841985,"b""Aren't you missing commas here?"""
1912,106842007,"b""Very bad idea, you _know_ what the error is, but you aren't telling us?"""
1912,106842162,"b'Bad idea, since this requires us to build the document several times.\r\nInstead, see how we use BatchRequestParser to only parse things once.'"
1913,106813647,b'I think that you should move it to PatchDocument.Apply and pass this document to the ApplySingleScript from there.'
1913,106813660,b'You cannot use ShortTermSingleUse context here.'
1913,106813730,b'By doing this you will ensure that you do not have unwanted functionality when doing simpler patching.\r\nDo it here maybe: https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/Patch/PatchDocument.cs#L117'
1913,106813773,"b'docId should always come first from the document, then only if missing from external value (possible casing differences for example). If you will create the doc in PatchDocument.Apply then you do not need to pass the docId here I think.'"
1933,107110278,b'why is this required?'
1938,107149625,"b'There may be _many_ such items there, maybe better to throw that to the log and just error with the number / size of the request?'"
1938,107149651,b'What about other errors?'
1938,107149859,"b'`loadToUsers (...)` will fail this, no? Note the space'"
1938,107150299,b'Better to use `|` here instead of `/` - slightly more efficient.'
1938,107150522,"b""That said, shouldn't the user be able to decide on the name?"""
1938,107152130,"b'what does it mean, return null? Or returning anything in this context?'"
1938,107156177,"b""I just wanted to wrap `OperationCancelledException` here to ensure that we won't think it was cancellation of a ETL process and stop the processing."""
1938,107156481,b'OK'
1938,107157659,"b'Yes, I will handle that'"
1938,107159807,"b""You mean to provide an overload for `loadTo` method? For example, the following script defined on `Users` collection:\r\n\r\n`loadToAddresses(this.Address, 'my-addresses/13')`\r\n\r\n will result in storing it under `users/1/my-addresses/13` id, right?"""
1938,107160344,"b""It has no effect. Those tests were just migrated from 3.5 where returning `null` meant to filter a document out. We don't have such usage now."""
1941,107182179,b'@ayende Intentionally `D19` format here?'
1938,107184057,"b'Better to remove them and avoid the confusion, then.'"
1938,107184646,"b""Yes. I'm actually thinking about scenarios where users do `LoadStartingWith`, etc."""
1943,107187769,b'Why will never execute?'
1943,107192204,"b'Wrong comment, it actually executes (for example in continuations).'"
1941,107192317,"b'Yes, that give us a number like `0000000000000000001`, which gives us lexical sorting.'"
1938,107374882,"b'If we have the following `users/1` document:\r\n\r\n`\r\n{\r\n Name : ""James"",\r\n AddressId : ""addresses/1""\r\n}\r\n`\r\n\r\nwe can define the following ETL script:\r\n\r\n`loadToAddresses(LoadDocument(this.AddressId), this.AddressId)`\r\n\r\nwhich will store the address document in `Addresses` collection under `users/1/addresses/1` id.\r\n\r\nThe issue with user defined ids is that in order to handle deletes we need to delete all docs starting with `users/1/` since we don\'t know the prefix specific for `Addresses` (`addresses/`).\r\n\r\nThe problem is that the user can have _other_ docs stored under `users/1/[something]` which were not created as a result of ETL and we would delete them as well.\r\n\r\nThe current implementation would handle the delete by sending the delete command specific for a given collection: `users/1/addresses/`.'"
1947,107426359,b'@fitzchak can you consult this change with @grisha-kotler ? I think that the whole idea was to not persist those flags.'
1947,107429755,"b'Yes, Oren also thinks this way. So this commit will be probably reverted. But I do think that we want to let the client manually enable or disable versioning for a specific document.'"
1947,107431225,"b""I also think that knowing where the document came form down the line is good. But the user may be confused to see FromSmuggler or LegacyVersioned in Flags. But IMHO he'll get used to it and this is just a flags, we can put there whatever we want to decorate the document."""
1947,107439952,"b""Personally I'm not a fan of having the ability to skip versioning of a single document. This requires transform script anyway so this can be filtered-out there if someone really needs it. Or revisions can be imported, and removed manually if the Studio UI will be good enough to handle that.\r\n\r\nWhen it comes to saving the flags, of course every debug information can be useful, but in this case I would go and say that this would be confusing for the users. It's really hard to say if there is any values behind flag LegacyRevision for example. It was imported, it was saved, it is in new versioning storage, so someone might think what is the problem and why it is marked as a LegacyRevision, what are the implications and how can this be fixed."""
1947,107553415,"b'I agree with @ppekrol reasoning here, and I think that if the user want to skip versioning they can disable the versioning for the duration if they really need it, or filter it during import. Better than having to do all that work all the time.'"
1947,107602662,"b""I was taking about saving a document without creating revisions in a daily use from the client, not the smuggler import.\r\nBut yes, I'm OK with this. And you're right about users will be confused because of the flags. Maybe we can filter them out using a Mask?"""
1938,107604221,"b'@ayende Considering my latest comment here, do you still think we should provide users with an option to define their own ids in ETL scripts? \r\n\r\nNote we are already able to load such docs using `LoadStartingWith`:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/test/SlowTests/Server/Documents/ETL/Raven/BasicRavenEtlTests.cs#L436\r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/test/SlowTests/Server/Documents/ETL/Raven/BasicRavenEtlTests.cs#L282'"
1947,107608666,b'You need to recreate the document after this'
1947,107609290,"b'Nevermind, I saw that reverted this'"
1947,107611077,b'Another option is to make flags long and filter all flags after size of int before saving to disk.'
1938,107616353,"b'We need to give them the ability to generate `predictable` ids, that is all. '"
1938,107616398,"b'If they have a known prefix, that is fine for us.'"
1938,107621119,"b'Yes, the prefix is known. Thanks'"
1962,107693924,"b""why isn't this here for docs?"""
1962,107694000,b'and how will we know the name of attachments vs doc key?'
1966,107976996,"b""If the above will fail, won't you get an NRE?"""
1966,107977652,"b""using on 'null' will do nothing and I'm passing the original instance"""
1966,107980579,b'Okay.'
1963,107766930,"b'Should use `@""` here as well'"
1983,108361369,"b""Why? There is no reason we won't get that from the cache, is there?"""
1983,108361720,b'Why not `SeekLast`? What if there are no entries here?'
1991,108498944,b'Under what scenario is an operation unkillable?'
1991,108499417,"b""`Id` instead of `id`\r\nAnd doesn't this break the studio that rely on this?"""
1991,108503475,"b'It will break studio, In getNextOperationId add 4-th parameter: x => x.Id (assuming you use Id with upper case letter -which is by convention). So line 12 should be:\r\n```\r\nreturn this.query(endpoints.databases.operations.operationsNextOperationId, null, this.db, x => x.Id);\r\n```\r\n\r\nOptionally use nameof()'"
1991,108503917,"b""when we don't pass a cancellation token to the operation."""
1991,108507273,"b""And under what scenario aren't we doing this?"""
1994,108664599,"b'Get attachment can return null here, no?'"
1994,108664655,"b""Wouldn't be easier to compare as a long directly?"""
2002,108744116,"b""I don't think that you can get a generic type `Array` here."""
2001,108745092,b'Same issue'
2007,108872060,"b""Shouldn't this be removedNodes == null || removedNodes.Contains(...) ?"""
2007,108874585,"b""I think that you're right, I changed this.\r\nThis code is so confusing and I'm sure what is the case of node == null. Maybe we want to remove it from destination in any case once it is null."""
2013,108907400,"b""Won't this be called mulitple times when we reached a failure? Then after 2 seconds, we'll unload?"""
2013,108908886,b'https://github.com/ravendb/ravendb/pull/2014'
2037,109594173,b'Typo `chagned`'
2037,109603675,b'Fixed'
2042,109604118,b'typo `chagned`'
2042,109604435,b'lol. Will fix.'
2034,109609058,b'Why did you build such a thing?'
2034,109617108,b'I need a lock in an async code path'
2034,109617554,"b""Why not use a SemaphoreSlim, which can handle this? We don't want to devise our own sync primitives is we can help it."""
2052,109832343,b'Why are you adding it?'
2052,109832408,b'We want better names here.'
2054,109880121,b'use DocumentStoreExtensions. We have Commands there'
2054,109880140,b'use DocumentStoreExtensions. We have Commands there'
2054,109881140,"b'Ok, I need to check that it can send a document without a metadata.'"
2067,110131850,"b'This will be called on every tx, can we avoid doing this string allocation?'"
2067,110131885,"b'I\'m also not showing any ""compressed"" here?'"
2073,110257268,b'Not sure what should be here now. @aviviadi ?'
2069,110329765,b'this must be changed'
2069,110329860,b'Also this'
2073,110332183,"b'The the journal path is null, we should put the base path'"
2069,110337970,b'ok'
2069,110337973,b'ok'
2086,110540143,b'Need ctor for serialization'
2071,110263360,b'It should be probably moved to BlittableOperation. We have blittable comparison methods there.'
2071,110263396,b'Maybe DocumentCompareResult.NotEqual?'
2071,110263729,b'Do not like the side-effect here. Doing IsMetadataEqualTo can modify document?'
2071,110263962,"b""Same here. Side-effect. Also shouldn't this be a part of some ConflictResolver or something like that?"""
2071,110264070,b'NotEqual?'
2071,110265583,b'typo: ComparePropertiesExceptStartingWithAt'
2071,110539015,"b'Invalid data, missing code, mistakes\r\nNeed to actually guard this'"
2071,110539037,"b'This need to be case sensitive. And you can use a hashset, insted'"
2071,110539072,"b'Looks wrong, if there are 3 attachments on mine, and 2 on the other, how is this handled?'"
2071,110539088,b'+1'
2071,110539119,b'what is the side effect here?'
2071,110541007,b'Changed.'
2071,110541020,"b'Yes, it is actually not needed and not there anymore.'"
2071,110541024,b'The ReadObject. Fixed.'
2071,110541051,"b'Yes, it looks like we can merge those two blocks of code. \r\nI think that DocumentComparison woulc be a better name here, as we check for metadata first which means that we work with documents.'"
2071,110541056,"b'Anyways, it will be done later on, in a different PR.'"
2071,110541061,b'Done'
2071,110541066,b'Fixed.'
2071,110541266,"b'You mean case insensitive, right?\r\nI made it case insensitive, but left it as dictionary as we do need the value later on to compare it.'"
2071,110541346,"b""I will return false in this case, so we'll have a conflict."""
2071,110541418,"b""If we don't have the same attachment name than we'll end up with 5 attachments. \r\nOr if there is an equal name but no conflict in the attachments hash, content type and length than it will merge them.\r\nOtherwise, we will end up with a conflict.\r\nThe code that actually merge the attachment is the Put method."""
2093,110611450,"b'I think it would be safer just to make this exception serializable, also in situations like this use nameof(T) or typeof(T).Name'"
2093,111079982,b'Done'
2133,112117805,"b'Hm... I wonder if we want to alert per _database_, instead?\r\nThe notification center should handle the unification of the alerts.'"
2133,112117934,"b""No, this needs to remain. If we aren't hooked up, this should throw.\r\nWe handle that at the ravendb level, but Voron should enforce that if you are running in unsafe mode, you do so explicitly."""
2133,112117976,b'Why not use the event?'
2131,112118614,"b""Where are those being saved on the host machine? I'm thinking that you probably want to have those accessible from the host?\r\n\r\nSomething like:\r\n`docker run -v /all-databases:/databases ubuntu bash`\r\n\r\nNot sure what sort of guarantees that gives us, though."""
2131,112122429,"b""You can mount a host directory as a volume like we do with `settings.json` file. If not it's internal docker volume, persisted by docker - not recreated every time you run the image.\r\n\r\nWe can make an option for that in our run scripts, I'll add a ticket."""
2136,112081747,b'This cannot be deleted. It can be used by user for creating custom fields e.g. here https://github.com/ravendb/ravendb/blob/v4.0/test/SlowTests/Issues/RavenDB_3375.cs#L24'
2136,112085269,"b""Ok. It's protected, let's add a comment for it."""
2136,112085517,b'And probably have a small fast test including a basic case for it'
2136,112085751,"b""It's tricky because each static index inherits from this class, but since we are compiling them in runtime then you will not find any usages """
2136,112086081,"b'We have tests for this, 20+ failed on CI'"
2150,112271442,"b'Huh? Why are you putting the event here? It should be on the actual `StorageEnvironmentOptions`, no?'"
2149,112283085,"b'No, we want to avoid having a throw in methods that might be called a lot'"
2149,112283406,"b""Don't put throw inside the method."""
2149,112283584,b'Should throw here directly'
2149,112283988,"b'Do not throw here, should throw inside the helper method.'"
2149,112284288,"b""Shouldn't this go to identities storage?"""
2149,112377334,"b""OK. I didn't realized that we wrap the throw because of perf, I thought it was purely for readability.\r\nWill revert this specific change."""
2152,112378696,b'Add comment referencing why here'
2149,112379184,b'I moved it there.'
2149,112379240,b'I see you already changed this. Thanks.'
2153,112385243,"b""Probably want to always have a new page here, and need to explain that we also do that for verification purposes, because we are going to overwrite the page anyway, so we don't care about its current contents"""
2153,112385396,"b'When using encryption, we already have `DiffSize == 0`, condition redundant.'"
2153,112385432,b'Use Sodium Zero'
2153,112385538,"b""This isn't flags, need to treat it as flags."""
2153,112385601,"b'Use TransactionFlags, not Encryption Flags'"
2153,112385629,b'Make sure to use `[Flags]`'
2153,112385802,b'Probably need to pool those and register them in the `NativeMemory` tracking'
2153,112385945,"b'You just broke our Linux support, because this will try to call Win32 methods directly'"
2153,112386084,b'Did you change the schema version here?'
2153,112386480,b'Need to use 0 here'
2153,112386648,b'Sodium zero'
2153,112387107,b'Copy `FileName = inner.FileName`'
2153,112387151,"b""Options are the same and shouldn't be redirected"""
2153,112387480,b'Should be able to remove this'
2153,112387583,b'Can be made private'
2153,112387694,b'can remove this'
2153,112387758,b'why only for write transactions?'
2153,112387937,"b""Missing `GC.SuppressFinalizer` and do we have any unmanaged resource we manage that we can't let the inner one handle it?"""
2153,112388195,b'delete this class'
2153,112388215,"b'Forward to the inner, instead'"
2153,112388603,"b'Forward this to the pager always, then it can decide what to do'"
2153,112388731,b'Comment on why they are those specific offsets'
2153,112388853,b'Comment on why this is special'
2153,112388891,"b'Use `if` here, clearer'"
2153,112388929,b'use `if`'
2153,112388982,b'comment why needed'
2153,112389109,"b'Need to make sure that we just wrap this method call, instead'"
2153,112389251,"b'Bad, leak impl details. Make use of something like the `BatchWriter`, which can already handle this.'"
2167,112472190,"b""Why aren't you using a value tuple here?"""
2153,112478126,b'Typo here ```Allocate4KAlignedMemory```'
2153,112488070,"b'`size_t` is actually `IntPtr`, need to change it (would fail on the Pi)'"
2153,112488269,b'This is a very awkward way of doing this.'
2153,112489996,b'Where is the error handling?'
2167,112501926,"b'1. It is looking better this way. (one line less). \r\n2. @redknightlois warned me not to use Tuple in hot paths, at least until .net core 2.0 is out.'"
2172,112828675,b'What about dynamic fields?'
2172,112828703,"b""Also, can't we pass an empty field to fetch here?"""
2180,112832043,"b'Misleading method name here, you are also resolving the conflict here, and it is hidden and not visible for us.'"
2180,112832087,"b""Can calculate size of string here, so we don't need to allocate multiple times"""
2180,112832091,"b'Same, calc size ahead of time'"
2182,112833944,"b""We don't want this, this is actually quite slow to compute."""
2182,112833951,"b""Also, we don't typically remain on the same thread.\r\n"""
2182,112834790,b'So which thread do we want to present ?'
2182,112834804,b'and what else do we want to see in this report ?'
2182,112835941,"b""Ok.. I'll use NativeMemory.ThreadStats"""
2182,112838288,"b'Why, same result if you remove this line'"
2182,112838295,b'Waiting for this change'
2179,112836036,b'Raven/Storage/TimeToSyncAfterFlashInSeconds'
2179,112836039,b'Raven/Storage/NumOfCocurrentSyncsPerPhysDrive'
2179,112836046,b'Phys?'
2179,112836059,b'typo: Cocurrent?'
2182,112882912,b'Should we copy the previous start time?'
2182,112884232,b'no... '
2182,112885363,b'what is your reasoning?'
2182,112885950,b'https://github.com/ravendb/ravendb/pull/2185'
2054,112960220,b'I see that you done this. Thanks.'
2054,112960238,b'I see that you done this. Thanks.'
2192,112962351,"b'So should we remove this, then? What else is this used for?'"
2193,112964208,b'Should only include if flags != `None`'
2193,112964313,b'Probably need a comment explaining this'
2192,112965416,"b'No, this is used also (or primarily) to set default field options in index.'"
2191,112966737,b'Why is this lazy?'
2191,112967027,b'Probably need an issue to document it.'
2193,112969884,b'done\r\n'
2193,112970340,b'remember to open a new PR'
2195,113012791,"b'No, this will fail if there was an exception in this method, which will cause it to skip setting `validationLockAcquired` to zero, resulting in no one ever executing this code again.'"
2193,113039795,b'What about this time? You removed usage of this typings in editDocument.ts. Why?'
2193,113040037,"b'Can we use saveDocumentResponseItemDto  here, instead of any? '"
2193,113040077,"b'Could you either delete commented out code, or mark it with TODO (if you leave it there for some reason?) IMHO it can be deleted. '"
2193,113118418,b'deleted'
2193,113118852,b'done'
2191,113119972,"b""I made it a lazy because SQL ETL doesn't make use of it so it won't be evaluated then. However since that is needed only for Raven ETL I'll move it to from base `ExtractedItem` class to `RavenEtlItem` and drop `Lazy` wrapper"""
2191,113125532,b'We need to document entire ETL feature. I included that info here: http://issues.hibernatingrhinos.com/issue/RDoc-665'
2191,113126236,b'Okay'
2198,113164874,b'`OriginalSize` can be zero!'
2198,113164998,b'Can be zero here.'
2198,113165254,b'Checksum on zero size'
2206,113319174,b'Why this change?'
2206,113319273,b'Why?'
2206,113319433,"b""Need to have a proper error message here, with the value that wasn't expected."""
2207,113411930,"b'Bad idea, this can be held up for a long time, during which you are holding up all the work that someone might do because they are trying to subscribe / unsubscribe.\r\n\r\nBetter to do the fast subscription work we need here to get the last observed stats, release the lock and then execute in the merger.'"
2207,113412063,"b'I think that we can give the lock up here, no?'"
2207,113412210,"b""This might be runner with other transactions, shouldn't we allow it to bubble up? Then the merger will split the tx.\r\nAnd the catch will be in the caller."""
2207,113418975,b'Yes. I just focused on moving things to the tx merger instead of checking why do we actually need that lock.'
2207,113419035,"b'Yes, it should. Thanks'"
2216,113532977,b'Should we use the env from Documents or Configuration?'
2216,113533582,b'nameof(Configuration)'
2216,113533618,b'nameof(Configuration)'
2216,113533667,b'nameof(Configuration)'
2216,113641269,"b""I _think_ that the internal bundles loaders are each doing their own locking.\r\nNeed to also be sure that we aren't holding this for too long (see our discussion with @karmeli87 )"""
2216,113641920,"b""I think we want to use Configuration env here, otherwise we'll be blocking the documents.\r\nIn general, I like that we are splitting this up."""
2216,113642237,"b'We need to change how we persist the information here, instead of storing it in the documents storage, we want to store that in the configuration storage.\r\nThat avoids locking the storage for documents, and make it simpler for us.\r\nIt also means that for DR, we can just look at the docs storage and not have to figure out what configuration entries mean.'"
2216,113643115,b'Do we need to assert on all those waits? \r\nAnd can we do that in an async manner?'
2216,113645036,b'You want me to open a context under the configuration env rather than passing the context?'
2216,113645252,"b""I haven't wrote those test i just modified them to work.\r\nI don't like the use of SpinWait for polling..."""
2216,113645320,b'Like here: https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/ETL/EtlStorage.cs'
2216,113645560,"b'Notice that we are passing the env from configuration storage, not document storage.'"
2222,113699637,b'Where is the concurrency handling here?'
2222,113702198,"b""What kind of concurrency errors should we expect here? Underneath, `PutResolvedDocument` just do the PUT with `null` as the expected etag? I guess it shouldn't?"""
2222,113703005,"b""It shouldn't. Consider the case that you read the conflict at T1, then write it in T3.\r\nBut in T2, it was resolved externally."""
2219,113700840,b'Why is this called?'
2219,113700955,"b'If this is no longer just about smuggler, probably need to move it'"
2219,113701639,b'What do we do with the `DbId` and `Etag` properties?'
2219,113701884,"b'Can free this immediately, no?'"
2219,113701928,"b'Can free this immediately, no?\r\n'"
2222,113704366,"b'So the handling will be just skipping the put if we got the concurrency exception, right?'"
2225,113733333,b'switch those two lines?'
2225,113765409,b'@maximburyak @ayende if the previous lock mode is the same as it was maybe this should be a no-op and the record should not be updated?'
2225,113768003,"b'Probably a good idea, yes.'"
2219,114075556,"b'No, it is part of a state machine. We use this when we got EndObject.'"
2219,114075560,"b'No, it is part of a state machine. We use this when we got EndObject.'"
2219,114075579,b'It is part of a state machine. We use this when we got EndObject.'
2219,114075587,b'It is probably a merge error.'
2219,114075603,b'To where?\r\nThis way it is called only when we parse json from outside and not any where in our code which is not needed.'
2219,114075941,"b""To a shared location, since it isn't just smuggler only code, so shouldn't live in the smuggler class"""
2180,114076368,b'Changed to BuildChangeVectorAndResolveConflicts'
2180,114076384,"b'No one is using those, so it will be deleted.'"
2180,114076387,"b'No one is using those, so it will be deleted.'"
2219,114077083,"b'Ah, ok.'"
2244,114178433,"b'But error message, has a lot of whitespace in it.'"
2244,114178672,"b'What does this exists, instead of calling `ConnectSocket().Wait()` ?'"
2244,114179216,"b""Why aren't we using the much simpler:\r\n\r\n` var task = new Task<DocumentDatabase>(() => ActuallyCreateDatabase(databaseName, config), TaskCreationOptions.RunContinuationsAsynchronously);`"""
2244,114181738,b'`MachineName` to `_database.Name` ? I think you meant something else.'
2244,114181934,b'What are those used for?'
2244,114182100,"b""Bad idea. If the value doesn't exists, you'll throw.\r\nYou are keeping a disposed instance in the dictionary, etc.\r\n\r\nBetter to use `TryRemove` and then dispose it."""
2244,114182303,"b'Rename the slave to something else, I think.'"
2244,114183138,"b""Why do we have this method here, shouldn't this be in `TcpUtils` and have that as the only way to create a connection?"""
2244,114183269,b'Who dispose the connection in this case?'
2244,114183581,"b'Why are we creating a new context pool here, instead of using the one from the server store?'"
2244,114183875,"b""Don't we need to send the term here?"""
2244,114184927,"b""That is something that we shouldn't have, we should generate it on the fly instead of trying to keep it around.\r\nThis is a receipt for thread safety issues."""
2244,114185254,"b""Actually, this isn't used, and should be removed."""
2244,114185916,b'Why do we need a tuple? We already have it in the `Name` property of the `DatabaseStatusReport`.'
2244,114186508,"b'This make no sense, there are multiple indexes that are running, each at their own pace. \r\nSo this is not valid thing to say.'"
2244,114186607,"b'`LastEtag`, `LastTombstoneEtag`, `NumberOfConflicts`'"
2244,114186684,b'Remove commented code'
2244,114187045,"b'use `TryGetValue`, instead.'"
2244,114187202,"b""Use indexer, not `Add` here, just in case we have a duplicate here, so we won't crash.\r\n"""
2244,114187339,"b'Also, for the same reason, the order should be `Watchers, `Promotables` and then `Members.'"
2244,114187706,b'Can remove this line now'
2244,114187898,"b""It isn't a good idea to return null from a collection method, because that will likely turn into an NRE.\r\nEither throw here or return an empty dictionary instead."""
2244,114188398,b'Need to allow to shut this down when we are shutting down the server.'
2244,114188635,"b""I don't follow what you are doing here, why are you waiting for the `AddToCluster` result here?"""
2244,114188899,b'Maybe we need to wait on this when we dispose?'
2244,114189953,"b'Better to get an event when the leader gets the notifications and wait on that, than wait on arbitrary time.'"
2246,114190504,"b'What is the meaning of `Etag` in this context? Is this the `SubscriptionId`, in that case, we are better calling it that.'"
2246,114190807,"b'Why is the key a `string`? Since we are using subscription ids to identify it, it would be better to use a `long`'"
2246,114190915,b'Need to replace this globally.'
2246,114191214,b'Need to wait for this to actually be committed across the cluster and notified on this db'
2246,114191946,b'Can we delete this?'
2246,114192114,"b'We no longer using etag for this purpose, need to pass a change vector here.'"
2246,114192335,"b""You can't assume that you'll run it on the same server as the one that has you go the etag from, so we are better off with change vector in the params in the first place."""
2246,114192548,b'Need to delete it.'
2246,114192675,"b""In particular, the server that will be running the subscription might not be the one that created it, and there might be different change vector that won't be in this one that would be skipped in that case."""
2246,114192853,b'Change the method name to match what it is doing. Probably can do that as a tuple result value now'
2246,114192916,b'Why do you do this?'
2246,114192999,b'This is effectively a noop'
2246,114193174,b'Change to id'
2246,114194265,b'What is the meaning of this method name?'
2246,114195135,"b""This isn't how we can handle this. We need to actually do a search on the etags collection based on the change vector."""
2244,114248081,"b""What about when a database is unloaded. We want to keep it's last known statistics and send them over to the leader.\r\nWe can't keep this info on the leader, because the leadership can change. """
2244,114248453,"b'later on the leader, we want to group by database name, so it is faster and cleaner to access the database by the name this way.'"
2248,114472879,b'Why is this an admin operation if this requires no authorization?'
2244,114474759,"b""* Why do we want to keep that information? That db is down, so it obviously not active.\r\n* We can figure out at least some of the information from the cached db stats we already have (see the `/stats` endpoint for the studio.\r\n* Either case, it shouldn't be in a field on a class that might be exposed to multi threading."""
2244,114474808,"b'So? The leader is reading the data over the network, not making RPC call or something like that.'"
2246,114492118,"b'Yeah, but if I\'ll do that, we\'ll have a consistency problem.. in Indexes and Transformers we call the identification Etag now. Note that it\'s not the ""SubscriptionCriteria"" obejct that the client can see, but an inner state.'"
2246,114492358,"b""Yeah, but that isn't something that the user sees, and it is mainly used for comparisons. This is what the user will see and once created it is fixed, no?"""
2246,114523789,"b'See https://github.com/ravendb/ravendb/blob/v4.0/src/Sparrow/Json/JsonDeserializationBase.cs#L154 \r\nWe\'re pretty stuck here, so we better work with a string key dictionary, not talking about how we serialize dictionaries, so new Dictionary<int,int>(){[1]=1} will get deserialized into {""1"":1}'"
2246,114523973,"b'The user will see only the number, the Etag(raft index)/SubscriptionId is not exposed to the user as a property of any object'"
2246,114524138,"b""Yeah, that happens inside the SubscriptionStorage (like we've done with the indexes)"""
2246,114524246,b'why?'
2246,114524419,b'ok'
2256,114755826,"b'Remove this, we are ALWAYS encrypted if the db is encrypted, or we are never encrypted if the db is not encrypted.\r\nIn other words, you can only specify encryption during db creation, not when adding a node'"
2256,114756068,b'Where are you actually enforcing this?'
2256,114758886,b'why did you remove this line?'
2256,114759307,"b'Will fix, http://issues.hibernatingrhinos.com/issue/RavenDB-6916'"
2256,114759312,"b'Yes, will remove.'"
2256,114761756,"b'Weird mistake, will fix'"
2260,114774605,b'Where are you validating that an encypted db has a key?'
2260,114779727,b'Here:\r\nhttps://github.com/ravendb/ravendb/pull/2263/commits/1f4546ac37ed89953ee613778b8043e6d45fc747'
2258,114758189,b'what happens if a user uploads a zero length file?'
2258,114758659,"b'Are we allowed to trigger a batch because of an attachment?\r\nIf we do, we might write it before the actual document was written, no?'"
2258,114760467,"b""Is it valid to save the LazyStringValue here? What context is it attached to, and are you sure it wouldn't be reset midway?"""
2258,114760662,"b""Why, what else can this be, and why aren't we polymorphic here?"""
2258,114773252,"b'Fixed, and I created a test that we support that.'"
2258,114773331,"b""This won't be an issue, but I removed the HandleBatchOfDocumentsIfNecessary from attachments."""
2258,114801234,"b'What are you reading here, and what if the request is using `Chunked-Encoding` ?'"
2258,114802481,b'@karmeli87 Please take a look'
2259,114867929,b'The min size in GB should also be configurable'
2259,114868313,"b'We already have a context for that, the JsonContextPool, there is no need to also handle it here.\r\nYou need to pass the LowLevelFlag from the pool, not maintain your own here.'"
2259,114868341,b'To remove'
2259,114868373,b'Remove'
2259,114868520,b'Remove all those'
2259,114868595,b'`Console.WriteLine` should be removed.'
2259,114869057,b'Under what scenario are we creating a new arena with a larger size?'
2259,114869440,"b'We need to clean this only on the first hit, not every time'"
2259,114869570,b'Do we need this?'
2259,114869719,b'what is the difference between this and `ShortTermMemoryFlag ` ?'
2259,114869852,"b'Why? This is _very_ rarely created, if at all.'"
2259,114870119,"b'No, you are creating a new instance here, and leaking the thread.'"
2259,114870371,"b'This is doing a lot of allocations, and in potentially memory constrained situation.'"
2259,114873268,"b'Oh `LowMemoryDetection` is configurable, great'"
2259,114876270,"b""You aren't handling throwing of this exception properly.\r\nWhen the exception is thrown, we need to return `503`, not `500`"""
2261,114889446,b'This is raised by a bunch of tests (run FastTests).\r\nThis also indicate that we need to consider whatever we are actually saving anything by using StringSegment or if we should remove it.'
2261,114898330,"b'Mhhh that makes sense I run tests on release mode. I added that as a safeguard, probably it is more complex, you can remove it without problem'"
2261,114900019,"b'Not really, no, this is actually indicative of an issue.'"
2265,114901268,"b""`DatabaseChangeVector` might be better. It isn't actually the _last_ change vector. it is just the highest we have seen / extrapolated."""
2265,114901370,b'change param name'
2265,114901434,b'change method name and probably what it throws as well'
2265,114901473,b'change log message'
2265,114901539,b'`Etag` -> `SubscriptionId`'
2265,114901630,"b'Change to `Dictionary<int, ... >`'"
2265,114901701,b'`etag` -> `subscriptionId`\r\n'
2265,114901755,b'change `etag` to `subscriptionId`'
2265,114901906,"b'We already are tracking the global change vector, yes that.\r\nNote that there is a major difference between what you are doing here and the actual observed global change vector'"
2265,114902101,b'Why are we accepting blittable here and not the `SubscriptinCreationParams` ?'
2265,114902252,"b""Error handling, what if we don't have such a subscription?"""
2265,114902304,"b""wouldn't tuple be better here than multiple out params?"""
2265,114902359,b'What is this doing here? It has no impact on the code.'
2265,114903561,"b""Huh? What are you doing here? Looks like a binary search, but I can't figure out why you'll want / need that.\r\nLeaving aside the fact that the `Subscriptions` is not sorted, you can just access the value directly.\r\nRegardless, just get the `DatabaseRecord` and then use the `TryGetValue` on it."""
2265,114903681,b'We have `ReadDatabase` there for a reason.'
2265,114904060,b'Why do we even get a `startEtag` here? We are always passing it as 0.'
2265,114904221,"b""Better to break / return here, than try to be smart with the low variable. It'll be clearer."""
2265,114904275,b'Can we merge the two else branches?'
2265,115138432,"b'What we are tracking is the last change vector received through replication (found it out the hard way, before introducing the new value)'"
2265,115138446,"b""That's confusing, because of the existing confusing function in DocumentStorage"""
2265,115139447,"b'Yeah, unless raft command did not arrive to the machine yet'"
2265,115139527,b'Where do we pass it as 0?'
2265,115139568,b'ok'
2265,115139759,b'Everywhere this is called.'
2278,115140130,"b'Move the throw to a dedicated method, instead.'"
2265,115141503,b'ok'
2265,115141516,b'ok'
2265,115141612,"b'ok, now I got it'"
2258,115145470,b'Fixed.'
2258,115145636,"b'Thanks, fixed. \r\nUsing stream.Length instead.'"
2283,115174413,b'Why?'
2283,115174483,"b""Need to specify a timeout here. \r\nA nasty thing to remember about async operations is that they don't generally time out on their own."""
2283,115174836,b'@maximburyak Please take note of this.'
2283,115174923,b'Those `TODO` still relevant?'
2283,115175016,b'`maintance` -> `maintenance`'
2283,115175053,"b""Probably need to also reject maintenance from terms that aren't strictly equal to us. If I'm not up to date on my raft term, I shouldn't be accepting maintenance tasks."""
2283,115175256,b'- Rename to `ClusterConfiguration`\r\n- Also include ElectionTimeout and all other possible configurations using in Raft\r\n'
2283,115175285,b'What is the diff between node sample and leader sample in this context?'
2283,115175332,b'What is the meaning of this?'
2283,115175372,"b'If this refers to promoting a node only when its indexes has caught up, then we need to do that based on _time_, not _etag_.'"
2283,115175389,b'Rename Master/Slave terminology'
2283,115175528,"b""Let's try to avoid allocations here. This is going to run continuously, so reducing allocations here will help reduce garbage generated."""
2283,115175572,b'Why is this on the finally? What is there was an error?'
2283,115175612,b'Why did you make this change?'
2283,115175699,"b""This doesn't take into account different collections, side by side indexes, etc.\r\nThat is really not a good idea.\r\nWhat we want to know is the number of stale indexes, and what is their lag in time period."""
2283,115175746,"b'You are not dispose the `_cts` in case of timeout.\r\nAnd if there is an error in the `_collectionTask` after 30 seconds, you leak the exception without observing it.'"
2283,115175827,"b'The `LeaderSamplePeriod` is misleading, I think'"
2283,115175896,"b""The method name is wrong, we aren't reacting to a new stat arriving, we are doing that on a time basis."""
2283,115175987,b'Should we raise an alert here?\r\nI seems like something that admin would like to know about.'
2283,115176066,"b'I think this should be operations log, not info'"
2283,115176074,"b'Operations log, not Info'"
2283,115176136,"b""Why aren't you using `IsItMyTask` ? We intend to change that at some point, and it is better to have that logic centralized."""
2283,115176184,"b'Note that Etags are _not_ the same across nodes, so this will fail'"
2283,115176433,"b'What happens if by the time you reach here, you are not the leader?'"
2283,115177681,b'Leading _cts if errored.\r\n`_obersve` will not be observed if timeouted'
2283,115177840,"b'Never called, can be removed.'"
2283,115177919,"b""In general, we want to avoid this as much as possible. SingleUse short term is a waste for us in most cases, since we'll be using that over a long period of time"""
2283,115177989,"b'Under what condition this can happen?\r\nOnly when the db is under delete, no?\r\nAnd in that case, we should refuse adding to it.'"
2283,115178106,b'This probably need to be async'
2283,115178134,b'What do you mean here?'
2283,115178216,b'What node will this be added to?'
2284,115178593,"b""I don't think that we'll always know that what the length is here. \r\nDoesn't it require us to read the whole thing sometimes?"""
2283,115181843,b'Is it better to Use Leader/Follower ?'
2283,115184094,b'`Supervisor` and `worker` would probably be better'
2284,115200371,b'http://issues.hibernatingrhinos.com/issue/RavenDB-6944'
2289,115414756,b'Add meaningful names here'
2289,115414945,"b""What does this give us that we don't have by handling errors at the caller?"""
2289,115415241,"b'What _is_ this? You are guaranteeing a leak here, no? The use after free is there for a reason.\r\nJust ignoring it means that we are opening ourselves to a LOT of issues.'"
2289,115415476,b'There are three copies of this function'
2297,115499615,"b""You need to get this value from the client. The hostname doesn't include port, etc. """
2304,115720864,"b'But if this is null, use the current one.'"
2304,115725826,"b""serverUrl can't be null it is required"""
2306,115763840,"b'Why is `SubscriptionRaftState` exposed to the client? I mean, raft is an internal details, not related to the fact that they are using subscription'"
2306,115765625,b'Probably need to remove this.'
2306,115766087,b'Use the default instance instead of creating new one'
2306,115766227,"b'Can this throw, if so, use exception aggregator.'"
2306,115766539,b'Can remove comment here'
2306,115766551,b'Can remove comment here'
2306,115766740,b'Can we just return the subscription itself here?'
2306,115766949,"b""We'll throw, the client will retry"""
2306,115767158,b'Can remove comment here'
2306,115767727,b'Move the `Select` to the body of the `foreach`'
2306,115768582,b'Ignoring this method because of the expected changes discussed in length elsewhere'
2306,115768720,b'Return blittable here so we can simplify things'
2306,115769003,"b'Assert on the size, just to be safe safe safe'"
2306,115769242,"b'Remember etag per db id, to make it easiest to start from the last location'"
2306,115769925,b'Here we need some way to timeout / cancel if there is a shutdown of the system.'
2311,115803277,b'What do we need case to any here? '
2311,115804146,"b'@grisha-kotler Can we avoid doing this? Maybe instead of having name in every created document you can use following bookmarket to bootstrap document with value you want. Just use:\r\n```\r\njavascript:ko.dataFor($(""#docEditor"")[0]).documentText(\'Lorem ipsum\')\r\n```\r\n\r\nThen you will have the content it is useful when demoing with single click. '"
2311,115854728,b'what would be the result of doing that in the raw json output?'
2312,115856074,"b""We don't want to do compress on a per part basis. In general, we'll let users handle that externally instead of forcing it in our code.\r\nIn some cases, it is cheaper to send the data uncompressed than pay the compression costs."""
2312,115857094,b'What about removing an attachment?\r\n\r\nWhat about rename? Do we have kind of support for that?\r\nWhat about moving an attachment from one document to another? \r\nWhat about copying an attachment (server side only op)?\r\n\r\nCreated an issue for that http://issues.hibernatingrhinos.com/issue/RavenDB-6976'
2312,115858136,"b'We need to validate that:\r\n* The stream is seekable.\r\n* That the position is 0.\r\n\r\nNeed to explain that we require this to support failover scenarios, where we might sent the attachment to more than a single location.'"
2312,115858495,"b'Include the type of the entity here, to make it easier to figure out what is going on in the error'"
2312,115858870,b'You are comparing something to itself here?'
2312,115858986,b'Need to complete this. Might actually be best to combine all those checks into a single function that will be call from the `StoreAttachment` and friends.'
2312,115859216,"b""Don't we need to validate that we don't have a `StoreAttachment` here?"""
2312,115859841,"b""Aren't we sending `Content-Type` of `application/json` by default?"""
2312,115860547,b'We need to document that attachments loaded in this manner are limited to 128MB https://github.com/aspnet/HttpAbstractions/blob/dev/src/Microsoft.AspNetCore.Http/Features/FormOptions.cs#L14\r\n\r\nAnd verify that we can upload attachments greater than that we the direct API.'
2312,115860793,"b'We are assuming this is rare, and as such, it need to go to its own method, so the common code will be smaller.'"
2312,115861086,b'Only if not null?'
2312,115861279,b'Need to rename this to `GetStringPropertyValue` or something like this?'
2312,115861484,"b'We are only comparing the first 8 bytes here, we need to compare the whole thing, just to be safe.'"
2312,115909781,"b""I'm not sure if we should force the stream position to be `0`. Maybe just keep the original position we got here and use it once we need to resend the stream - that's how ravenfs client behaves currently."""
2312,115909858,"b'If you do that, then you also need to provide a limit to the stream, in that case, the caller can provide a limited stream to do that.'"
2312,115909876,"b""We aren't allowing to update an attachment midway"""
2312,115910243,b'Make sense. Wrapping a stream if needed seems to be a better option.'
2312,115947044,"b""You're right. Changed."""
2312,115947504,b'Will handle this as a separate issue.'
2312,115963104,b'Done'
2312,115963732,b'Done'
2312,115963806,b'Fixed. And this code removed as it is not needed now.'
2312,115963881,"b'Yes, this was redundant.'"
2307,115778929,b'Avoid spamming the logs / alerts about this.'
2307,115778973,"b'Needs to be operations, not info'"
2312,115969858,"b""Done. Note that we didn't also validated that we have a defered put command but now we also checking that."""
2312,115969974,"b""No. This is why the tests are working. But I'll anyway add an explicit check for multipart/mixed (just if not null)."""
2312,115971633,b'I extracted CreateBatchCommand method which make this more readable.'
2312,115974399,"b'No, in the server side we convert null to empty string, as PutAttachment should take only empty string (It calls GetLowerKeySliceAndStorageKey on the contentType).'"
2312,115974412,b'Done'
2312,115974576,"b'Yes, I will make sure to fix all this class.'"
2312,115975088,b'Actually only this one was missing this. Fixed.'
2311,115982163,b'it was for testing\r\nremoved'
2318,115982750,"b'error message strange ""but 123"" ? '"
2318,115982797,b'Need to also explain _why_ we require this.'
2318,115983135,"b'Can it actually be anything _but_ ""multipart/mixed"" exactly?\r\nThe reason I\'m asking is that I think that the browser will send it with `text/json` or some such, no?'"
2318,115983259,"b'And this is till a rare thing, so we want the common thing (just parsing the request to be the first thing here, then the request with attachment to be in a separate method.'"
2312,115993950,b'OK. I created a test and expected it to fail but it succeeded to upload a 256MB file.'
2321,116041047,b'Probably need a comment here explaining why we are doing this.'
2322,116045350,"b'This should go into the stress tests, not even on the slow.'"
2322,116045403,"b""I don't mind that it is passing. I mind that I'm not sure _why_ it is passing"""
2322,116374545,b'Indeed.'
2318,116374720,b'Fixed.'
2318,116375009,"b'Yes, the studio sends: \r\nContent-Type: application/json; charset=UTF-8\r\n\r\nI will invert the check.'"
2306,116375476,b'ok'
2306,116375916,b'ok'
2306,116375933,b'ok'
2306,116376153,"b""There is no urgent need right now(we have a CTS.Cancel in there), but I'll add it anyway, in case that code inside the dispose will change one day.."""
2306,116376208,b'ok'
2306,116376210,b'ok'
2306,116377608,b'ok'
2306,116377850,b'ok'
2306,116377884,b'ok'
2306,116377936,b'ok'
2306,116377961,b'ok'
2306,116378012,b'ok'
2306,116378059,b'ok'
2306,116378067,b'ok'
2334,116378517,b'Probably need this in try/finally.\r\nAnd handle if the dispose fails.'
2318,116418364,"b'typos: unavilalbe -> unavailable, differnt -> different'"
2318,116420391,"b'Fixed, thanks!'"
2335,116423738,"b'Else, what happens here?'"
2335,116435482,"b'We parse the multipart, which will modify the command?'"
2335,116436276,"b'If the content type you ""hi/there"", what will happen?'"
2335,116437540,b'Fixed.'
2312,116440985,"b""It isn't related to us. We use multipart/mixed but this one is impacted only multipart/form-data."""
2339,116453821,"b""Shouldn't we add `TaskCreationOptions.RunContinuationsAsynchronously` as well?"""
2339,116457785,b'Yes'
2342,116541351,b'Can `GetClusterTopology` return null?'
2342,116662908,"b'No, since GetTopology will return an empty topology if he has none.'"
2354,116746380,b'Should probably use case insensitive match'
2354,116746495,"b""The `key` isn't zeroed"""
2354,116746766,"b'* use `async` here, instead of the sync version.\r\n* If this throw, the exception will propagate upward but which server failed will not be included'"
2357,116842623,"b""Available memory is a transient thing, shouldn't include it here."""
2357,116842963,b'This feel fragile.'
2357,116843150,"b'stackalloc, instead?'"
2357,116843215,"b""what if we get less than `readSize` ? Don't we need to read twice?"""
2357,116843312,"b'Use finally, here, instead of having two `close`'"
2357,116843723,"b'This allocates a string, just to get the ulong for it.\r\nLooks like a waste. Either we parse it ourselves and do no memory allocation, or we just use File.ReadAllText() and save all this code.'"
2357,116843936,"b'What is this error here if you are passing a `filename` ? This assume that you know what you are calling, and either should be hard coded or generic.'"
2357,116844016,b'The read can be done in multiple calls'
2357,116844037,b'Finally'
2357,116844088,"b""Tons of allocations here, we are better of using the higher level API and not dealing with all this low level code.\r\nThis method shouldn't be called a lot. \r\n\r\nNote that I don't like it because it presume a certain file format, but you don't have any reference to what is the format or what you are reading."""
2357,116844389,"b""Should probably cache that, I don't think we need to support variable number of cores."""
2357,116844906,b'huh? What is that supposed to mean? Why is it getting this value?'
2357,116844947,b'And what is the meaning of this comment?'
2357,116845071,b'Casting a `ulong` to `decimal` seems very suspicious.'
2359,116844755,b'You recommend using the same function you ask for?'
2359,116889964,"b'Nope, those are Hashing.HashCombiner.Combine. They are absurdly fast, but values have to be hashes themselves. Hashing.Combine are general purpose but slower.'"
2355,116920610,b'`Pager` and `OverflowPages` fields are never used'
2355,116921038,b'I think that `EnsureMapped` is crucial when running in 32bits - see [`Windows32|Posix32]BitsMemoryMapPager`'
2355,116921573,b'How `Pointer` can get null?'
2355,116923088,b'default struct init'
2355,116923620,b'@redknightlois the usage of `_pageRef` here is very counter intuitive we pass empty object here to get it filled back - would it be any perf issue if we added `ref` here'
2355,116924830,"b""Here you aren't assigning values to `pagerRef` which we need when running in 32 bits (in order to call `EnsureMapped` see my comments in 2e6393899fd)"""
2355,116926371,b'I removed them'
2355,116926713,"b'OK I see, `Chunk.Invalid.Page.IsValid` is false'"
2355,116926554,"b'Yes, but that is handled by the call to `GetPage`, which resolve to calling `AcquirePagePointerWithOverflowHandling` which handles this'"
2355,116926907,"b""Shouldn't cause a perf issue, but may indirection in the call?\r\n@redknightlois thoughts?"""
2355,116927143,b'I think that this is handled internally. Will appreciate another look by you given the information there.'
2355,116929644,"b""Since `AcquirePagePointerWithOverflowHandling` takes care of it we are fine. However it won't be called if we cake it from page locator's cache:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Voron/Impl/LowLevelTransaction.cs#L442-L443\r\n\r\nNot sure if that is a problem then."""
2355,116930721,"b""For sure `EnsureMapped` was called when the page was cached, I'm not sure if we need to repeat it when getting from the cache"""
2355,116932464,"b""Since `EnsureMapped` is called by `AcquirePagePointerWithOverflowHandling` then I think we don't need to have this method (`public Page GetPage(long pageNumber, PagerRef pagerRef)`) because we don't have to call `EnsureMapped` in `VoronStream` - `PagerRef` becomes useless."""
2355,116942637,"b""Okay, I'll remove it and test"""
2361,116944495,"b""This is problematic. It looks like we meant `Content-Length` but put something else there.\r\nBetter to put `Total -Attachment-Size` doesn't look like a known header"""
2361,116944668,b'Why `Raw` and not `Empty`? To prevent caching?'
2361,116967900,"b'We should support cache, fixed: https://github.com/ravendb/ravendb/pull/2368'"
2361,116968140,b'How about `Attachment-Size`?'
2361,116968491,b'Maybe RavenCommand can set ResponseType to Empty automatically? And RavenCommand<T> to Object?'
2361,116968738,b'I will make this change.'
2361,116968891,b'Maybe change both? Content-Hash -> Attachment-Hash and Content-Size to Attachment-Size?'
2361,116968950,b'We have a typo here.'
2361,116969135,"b'I Like that, yes'"
2361,116969339,"b""Thanks.\r\n\r\nI've meant RavenCommand -> Empty and RavenCommand[T] -> Object. I think that the parenthesis were stripped."""
2361,116970272,b'Fixed'
2361,116970620,b'Done: https://github.com/ravendb/ravendb/pull/2371'
2361,116970654,b'Done: https://github.com/ravendb/ravendb/pull/2371'
2369,116969612,"b'Need to make this more readable, units in KB, with thousands separator.'"
2369,116970535,b'can this be negative ?'
2369,116971041,b'Needs to be operations'
2369,116971081,"b'Need to be operations (But only once, I think)'"
2369,116972398,"b'This is an output of class Size.  i.e. : ""15.59GBytes"".  Isn\'t it readable?'"
2369,116972481,"b'yes, when not applicable, it returns -1'"
2369,116972524,"b'`AvailableMemory` is `Size`, sorry. Thought it was raw bytes'"
2355,116974260,"b""That was my initial impression, but after talking with @ayende and removing EnsureMapped, it makes sense. Unless of course que can page out a page during the course of it's holding transaction. """
2355,116974548,b'I got shy of doing that because it has ripple effects along a long path. No performance issue I can think of in that code'
2355,116975004,"b""I am still trying to understand the semantics of EnsureMapped. When is required and when it is not. Ref though won't be populated unless we go deep into the storage. """
2369,116987134,b'https://github.com/ravendb/ravendb/pull/2374'
2372,116980012,"b'No, this should be moved to the `ReadHeader` method.\r\nThe exception should be moved for the bottom of this method, if we failed to read both header files'"
2372,116980049,b'Add assert that it is always the last thing on the file header'
2372,116982812,"b'No, we should also check if we are valid of `f2` and use that'"
2364,116966199,"b'We need to do a summary of the interaction between server & client for subscription. I want to have it all in one place, so we can trace how it behave and compare it to the code.'"
2375,117056306,b'Are we actually using json.net to serialize this?'
2378,117081390,"b""This says: Give me all the threads in the _system_ I'm pretty sure that we don't want / need that."""
2378,117082782,"b'This is probably what we want to use primarily. We have a lot of interesting details about each thing here, such as the `ThreadWaitReason`'"
2378,117082843,"b'For that matter, this require admin privileges, which we wont have.'"
2378,117098569,b'`Process.GetCurrentProcess().Threads` is actually returning `ProcessThread`\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs#L602\r\n\r\nAnd they already have support for all of the above:\r\n\r\nhttps://github.com/dotnet/corefx/blob/3426b1f983e66f82565cc6a458f7464d1e56a19c/src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.Linux.cs#L36\r\n\r\nhttps://github.com/dotnet/corefx/blob/3426b1f983e66f82565cc6a458f7464d1e56a19c/src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.Linux.cs#L56\r\n\r\nhttps://github.com/dotnet/corefx/blob/9e6b9c89779f7af21acf2e5817c4f5dde28b25cf/src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.Windows.cs#L121'
2375,117175395,"b'Do not think so, probably 3.x leftover. Will remove it.'"
2388,117243434,"b'Why are you doing this in a sync fashion, and under the lock, no less?'"
2391,117257878,b'Why is this a write transaction?'
2394,117291051,b'Better to have `ManagedThreadId` and `UnmanagedThreadId` here.'
2394,117292237,"b'good idea, will do the change in next PR'"
2407,117492209,"b""This make me wonder if we wants this in this manner. Imagine a case where you are shutting down a busy server, you don't want to lose these files. \r\n\r\nWouldn't it be better to use it with a flag that will prevent pending recycle  in `RecoverDatabase`?\r\n"""
2407,117576681,"b""I don't follow what a flag to use you mean"""
2407,117577923,"b""You are deleting the recycled journals on shutdown. But is that something we want? \r\nIf we restart, we will lose them.\r\n\r\nOn the other hand, that means that we don't take extra space for databases that have been shutdown..."""
2407,117579872,"b""I'm for the approach that the recycle areas (for scratches and journals) exist only when a db is live. Previously we were not consistent here - recycled scratches were deleted while scratches were not."""
2407,117580050,b'*while recycled journals'
2415,117627928,"b'No, this will kill the server. We already handled this here properly.'"
2415,117628060,b'Removed'
2395,117631470,b'@maximburyak can you move it to /bench folder?'
2395,117631516,"b""@maximburyak Recently I've renamed it to Options, to be more consistent. Can we rename it to Options again?"""
2395,117631593,"b'Yeah, sure, I guess I got confused by all the conflicts I was dealing with as a result of the change'"
2425,117637601,b'Why not a simple bool?'
2425,117637635,b'Use braces here'
2412,117627584,"b'Not sure that this is a good idea, on large systems, this can take a lot of time.'"
2412,117627644,"b""This is a _really_ dangerous operation, to automatically remove a node from the cluster like that.\r\nBetter to have it continue to fail. \r\n\r\nAnd note that such operations _have_ to be `Operations` logged and alerted, if we allowed that, which we won't do."""
2412,117627681,"b'Should just throw here, the caller code should raise the alert'"
2412,117636369,b'What prevent a memory leak here? If we have a failed node that always generate errors?'
2423,117637667,b'Remove braces'
2426,117666698,b'Why is this commented (and not deleted)?'
2426,117690393,b'i forgot to delete it.'
2446,117948210,b'Use the `TimeoutManager`'
2448,117949666,b'Wrong message'
2448,117949706,"b""Why do you not allow it, isn't this a noop?"""
2448,117949777,"b""Why, isn't this a noop?"""
2451,117947653,b'Why are you breaking here? This looks like a bad move from the `switch`'
2451,117947664,b'same'
2451,117947695,b'same'
2451,117959441,b'breaks were there in the switch cases.. missed it\r\nmoved from switch to if-cases because while debugging i got an exception there when compareTo returned 2'
2453,117966753,"b""What caused it? Shouldn't the expected response match?"""
2451,117967055,b'But `break` in `switch` and `break` in `if` has VERY different meaning'
2451,117969590,"b""yes i'm familiar with the differences \r\nlike i said, i just missed it..  i'll be more careful next time :)"""
2448,117983685,"b'Thanks, fixed.'"
2448,117990143,"b'Yes, I change it to be no-op. Thanks!'"
2455,117982602,b'Do we use DeleteDatabase anywhere now? Maybe it can be deleted?'
2455,117983010,"b""Maybe CommandBase can add Type, so we would not have to 'remember' about it?\r\ne.g.\r\nvar json = base.ToJson();\r\n//fill here with data\r\nreturn json;"""
2453,118034516,"b'We are using ExecuteJsonAsync, which uses JsonCommandWithPayload, and it uses the default Object type. We could add JsonCommandWithPayload a parameter that will cause the RavenCommandResposeType to be using the right response type, but using the StatusCode for this matter looks safer.'"
2453,118047307,b'Why are we using `JsonCommandWithPayload` if there is no expected payload'
2459,118060075,b'You are throwing here why? This is a noop.'
2456,118066588,"b'use named tuple, better.'"
2456,118066859,b'What if this is still loading?'
2453,118090165,"b'Actually, that class is part of the test infrastructure, meaning we could just add another class, there is another issue though: I think that the RavenCommand class should have an overload that receives a response type'"
2424,117667727,"b'Need to move this to the cluster level, not db level\r\n'"
2424,117667765,b'Backups will be created in the _TempDir_'
2424,118166308,b'What is this task id?'
2424,118166353,b'How do you know _which_ periodic backup you modify here?'
2424,118166506,b'why the todo?'
2424,118166593,b'How can this be null?'
2424,118166829,"b'This will always return null, no?'"
2424,118166841,"b'This will always return null, no?'"
2424,118166895,b'Why is this not initialized like all the other bundles?'
2424,118166942,"b'Use the required option here, instead. This will give better error.'"
2424,118167008,"b""Is there a way for us to _not_ hard code it? \r\nWhen AWS adds a new region, we don't want to have to make a release."""
2424,118167497,"b""Where do we account to transient failures?\r\nA backup every 12 hours, but failure after 6 hours switch them, shouldn't generate a backup here."""
2424,118167645,b'Also include time for this?'
2424,118167812,b'Error handling here...'
2424,118167846,b'How do you prevent concurrent runs here?'
2424,118167951,b'What prevents the db from shutting down while the db is being backed up? \r\nOr abort the backup when this happens?'
2424,118168393,b'This should be logged'
2424,118168476,"b'Duplicate check from line 322, no?'"
2424,118168661,b'Why the different format for the counter from full backup?'
2424,118168797,b'What does _this_ mean?!'
2424,118168838,b'Can use `Any` here instead'
2424,118168949,b'Need to remove this'
2424,118168985,b'Need to remove this'
2424,118169002,b'Need to remove this'
2424,118172990,b'What happens if we have multiple changes while this is running?'
2424,118173032,"b'The lambda here is not atomic, note'"
2424,118173344,b'Remove commented code'
2464,118194130,b'Try to avoid committing these files'
2464,118194419,b'Why do we need the context here?'
2464,118194787,"b'There is, throw an exception, it is handled.'"
2464,118195219,"b'No, watchers are external to the topology'"
2464,118195951,b'Removing watcher is an explicit decision'
2472,118315184,b'I love it that this is likely the entire change required to support it :-)'
2473,118420976,b'What is server ID?'
2473,118421071,"b'What is the meaning of this, how do we behave differently? And if this is for Linux, a Daemon is probably a better word.'"
2473,118421171,b'What closes this handle?'
2473,118421400,b'What about localization?'
2473,118421417,b'Localization again'
2473,118421458,b'Localization'
2473,118421468,"b'Need to wait for stopped status, no?'"
2473,118421500,"b""Don't we need to check if we actually stopped, we can take more than 1 sec to shut down."""
2473,118421545,"b'Can take more than 1 sec to start in some cases (recovery, frex).\r\nNeed to check if we started'"
2473,118424510,b'This comes from here: https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/ServerWide/ServerStore.cs#L530\r\n\r\nI introduced ability to print it from console to be used in docker scripts.'
2473,118424793,"b""Yeah, you're right `--daemon` would fit better here. On Windows we just have `--register-service` and `--unregister-service` (then manage it from `services.msc`) and on Linux we have a daemon mode - process is waiting.\r\n\r\nI blocked this on Windows to avoid confusing the user - why 2 service modes etc."""
2473,118425066,b'what are we doing with this?'
2473,118427195,"b""This is used for server address determination. Apart from `--print-id` option, there's an endpoint `/debug/server-id` and and when figuring out the server address we try to match those values."""
2478,118442635,b'Why are we sending the `ApiKey` over the wire?'
2424,118458250,b'By the task id'
2424,118458326,b'It is a unique key which identifies it for updating and deletes\r\n(on backup creation it gets the raft command index)'
2424,118458497,b'If this is a new periodic backup configuration'
2424,118458521,b'Correct. Fixed.'
2424,118458532,b'Correct. Fixed.'
2424,118459393,"b'We already do that.\r\nIf we fail, we have the hard-coded ones.'"
2424,118459404,b'done.'
2424,118459474,b'done.'
2424,118459658,b'done'
2480,118460178,"b""Shouldn't we remove the `Prefix` property as well?"""
2424,118461052,b'This was changed'
2481,118454348,"b""@ppekrol I removed it, as we need to support waiting on this value from PostponedNotificationsSender.Infinity. Please review, as I'm not sure why you added it."""
2481,118455512,b'Where do we have in `TimeoutManager` support for the notion that `TimeSpan.MaxValue` means infinite wait? \r\n\r\nMaybe we should get rig of infinite time span defined here and use `Timeout.InfiniteTimeSpan` which should be supported by `TimeoutManager`?'
2481,118459355,b'See the DoWork method on this class.'
2481,118460987,"b""Yes I know it's used there. I meant to remove `PostponedNotificationsSender.Infinity` and use `Timeout.InfiniteTimeSpan` in `DoWork`. \r\n\r\nThat would require `TimeoutManager` to properly deal with `Timeout.InfiniteTimeSpan` - no need to create a timer then just return `TaskCompletionSource<object>` instance which will never have `TrySetResult` called. """
2481,118461201,b'It was added since passing such value to `Task.Delay` resulted in throwing an exception'
2481,118461526,b'OK. So not it does not throw as we will change it to unit.MaxValue - 1 when we create the timer.'
2481,118464000,"b'Done, thanks for the suggestion.'"
2485,118467303,"b""But this isn't cancellable"""
2424,118467977,b'done'
2485,118468003,b'It is. We connect it to the cancellation token in the method that call this method.'
2424,118468398,"b""There can be multiple backup configurations (on other bundles have configuration).\r\nUpdating one backup shouldn't reinitialize all the other backups"""
2424,118468719,"b""There can't be concurrent runs here.\r\nOnly one backup task is running at any given point. After it's finished, we create a timer that will run only once and so on... """
2480,118471931,b'I did it at first without looking too much into what it is. Apparently the prefix is the collection name.'
2492,118498656,b'Please delete this argument - it is not needed here.'
2492,118660491,"b'The argument is copied from v3.5, what do you suggest instead?'"
2492,118660931,"b'Simply omit latest parameter, since it is optional parameter (with default = null)'"
2492,118830516,"b""ohh I see. You mean the key string. But isn't it important to specify a unique key there ? (in order not to get multiple notifications in Studio)"""
2492,118833355,"b'AlertType.SwappingHddInsteadOfSsd already gives you uniqueness. The last parameter is used when you want to distinguish operations which can be multiple, like: in SQL replication we set type to AlertType.SqlConnection error and then as last parameter we pass sql replication setup name. As result unique key is created using 2 fields. '"
2492,118835099,b'https://github.com/ravendb/ravendb/pull/2512'
2424,118836711,b'done'
2424,118836815,b'done'
2424,118836836,"b'correct, removed'"
2424,118836898,"b'removed, this is not needed anymore'"
2424,118837101,b'changed'
2424,118837106,b'done'
2424,118837121,b'removed'
2424,118837124,b'removed'
2424,118837128,b'removed'
2424,118837139,b'there is a lock when updating the configurations'
2424,118839280,b'done'
2515,118840162,b'Why is this commented?'
2515,118840170,b'Why are you running it like this?'
2515,118840198,"b'Should we _always_ wait, what about if there is an error?'"
2515,118840293,"b'I think we should keep it alive, unless it is gracefully closed with the cancellation token.'"
2515,118840316,b'should be removed.'
2493,118508584,"b""I think that you need to pass 'databaseName' to GetRequestExecutor"""
2493,118509713,b'we have a typo here TryLoadFromCache'
2493,118509972,b'Private fields should start with _ and lowerCase letter'
2493,118510314,b'This should be deleted. Not needed any more.'
2493,118510340,b'This should be deleted. Not needed any more.'
2493,118511048,b'I suggest assigning result from GetClusterErrors to variable to avoid double execution.'
2493,118511089,b'We have a typo here: Errors'
2493,118539728,b'We have a typo here: cluster'
2493,118540925,b'Is this preventing topology updates? I cannot find relevant code.'
2493,118541231,b'Can we clean that up?'
2493,118541244,b'Can we clean that up?'
2493,118542293,b'Should probably be removed.'
2493,118545543,b'Not sure if this will not affect the Read method below. Can you recheck that?'
2493,118821652,b'I think we need the `database ?? Database` here.'
2493,118821670,"b'Is this for admin on a specific database, or global admin stuff?'"
2493,118821673,"b'Oh, for a specific db, yes, we need to pass it.'"
2493,118821690,b'Why do we have  database name when we are talking about cluster request manager? '
2493,118821691,b'Same'
2493,118821705,"b'We need to do a match of each node and its error. At least the message of the exception, and then the full details in the `InnerExceptions`'"
2493,118821730,"b""Caching is handled by the base class, right? And if so, did you verify that we aren't clashing?"""
2493,118821746,"b""Isn't this duplicating the code in the `Store.Urls` ?"""
2493,118821758,b'Are there tests for parsing multiple urls?'
2493,118821764,"b'+1, actually need to make sure that we materialize it, not just call it once.'"
2493,118834761,b'It is not Name is still required and We will get exception.'
2493,118835183,b'done'
2493,118835184,b'done'
2493,118835186,b'done'
2493,118835188,b'done'
2493,118835189,b'done'
2493,118835193,b'done'
2493,118835195,b'done'
2493,118835206,b'done'
2493,118835208,b'done'
2493,118835209,b'done'
2493,118835211,b'done'
2493,118835212,b'We need to be able to override those methods. see requestExecutor'
2493,118835213,b'Same'
2493,118835243,"b'`new static` is a pretty bad idea, better to have a different method name.'"
2493,118835249,"b""And I'm not following, you can't override a static method."""
2493,118835277,b'deleted'
2493,118835303,b'http://issues.hibernatingrhinos.com/issue/RavenDB-7239'
2493,118837566,b'done'
2518,118847029,b'Why is this long running? That will force the thread pool to start a new thread.'
2518,118847044,"b""Do we really need this, won't just `HandleDatabaseRecordChange` do the same thing here?"""
2519,118847121,b'Under what scenario do we need to copy the parent configuration and use those values not on the server level?'
2519,118847167,"b""And node isn't using HTTPS connection, rather."""
2519,118847184,"b""Can move this logic to the Linq expression above.\r\nAnd you shouldn't care how much you removed, only that you have enough."""
2519,118847195,"b'Wrong, should be _starts with_ https, and can insensitive.'"
2519,118847225,"b""This is racy, on many levels.\r\nIf there isn't a `c:\\temp` directory, it will fail.\r\nIf two threads are running it, it will fail.\r\n"""
2517,118847824,"b'Can replace with `_url = value?.TrimEnd(""/"");`'"
2517,118847838,b'+1'
2517,118847862,b'Which fix?'
2517,118847884,b'How do we know which watcher we are updating?'
2517,118847893,"b""Aren't you overwriting all existing watchers here?"""
2517,118847912,b'What are you doing here?'
2517,118847930,"b""Don't think this is needed, this require a db to already exists, so we can't still be passive here."""
2517,118847944,b'Typo in message?'
2517,118847957,b'Why are you opening the tx here?'
2532,118932834,"b""This doesn't belong in `Sparrow`, it belongs in the tests"""
2533,118933530,b'Nice'
2537,118947338,"b""Don't we need to remove this?"""
2534,118961190,b'modify-custom-functions? (should be in plural  form)'
2534,118961286,b'Please rename to: OnDatabaseRecordChanged'
2537,119015648,b'yes'
2539,119016159,b'This is really nice'
2538,119017010,b'Why `ToLower` ?'
2533,119024979,b'What do you think about moving identity generation to `BatchRequestParser.ParseAsync` and calling this method once we encounter such a PUT command? We could avoid iterating over the parsed commands here.'
2533,119025605,"b""I'm fine with doing that, but the parser code is tight, and I don't want to introduce async machinery there."""
2533,119025678,"b'Might be better to just have the indexes of all the positions where we need it, and then do it externally.'"
2533,119031425,b'That would require the allocation of an additional structure for those indexes/positions to be returned outside `ParseAsync`. Would it be fine?\r\n\r\n`ParseAsync` is already contains async machinery due to `await RefillParserBuffer` calls there'
2533,119031700,"b'Hm... okay, so go ahead and do this.'"
2551,119071236,b'What is the meaning of the return value here?'
2551,119071372,"b""Don't do it like this. We don't need a task id in this manner.\r\nInstead, just compare the two items when you need to do so. \r\nOtherwise the ids are going to look funny."""
2552,119072341,b'Why not make this a conditional method?'
2551,119100029,"b""but if i don't keep a task id, i'm facing a problem: when a watcher's db or url changes, i don't know what it was before the change and therefore i don't know which watcher to remove from the list.\r\nI also won't be able to know if it's new or modified."""
2551,119101438,"b'You need to send two commands when you modify, delete the old and add the new.'"
2551,119108250,"b""ok, but ther'es another problem about removing the task id. after discussing about it with @Danielle9897 and @grisha-kotler (see comment here: http://issues.hibernatingrhinos.com/issue/RavenDB-7196 ), we decided that we should create GetOngoingTaskInfo and DeleteOngoingTask endpoints that receives taskId and TaskType. Beacuse of that we think that all ongoing-tasks should have a taskId"""
2551,119114120,"b""return value was changed in this commit: https://github.com/ravendb/ravendb/commit/faf89d5c97158475dfc5789eed911be8dd2f1a7e\r\nit believe that's the reason: https://github.com/ravendb/ravendb/blob/faf89d5c97158475dfc5789eed911be8dd2f1a7e/src/Raven.Server/ServerWide/ClusterStateMachine.cs#L480  """
2556,119208114,"b""Why `urls`? Isn't it better to have a connection string like this:\r\n\r\n`url=http://rvn-1:8080; url=http://rvn-2:8080; database=northwind` ?\r\n\r\n"""
2551,119209336,"b'Okay, make sense. In that case, just use the index number from raft when this was created.'"
2551,119209393,"b""But don't go back to the dictionary."""
2556,119210360,"b'@ayende Yes, I will add this request to http://issues.hibernatingrhinos.com/issue/RavenDB-7286'"
2551,119210693,"b'OTOH, that might be nice https://github.com/ravendb/ravendb/pull/2555/files#diff-df05c10a5583ee61df7c65497a1d187dR15'"
2555,119211412,"b'Can the `Dispose` throw here? If so, we need to make sure that we dispose all them.'"
2555,119211835,"b'Huh? You are creating a new instance here, but this is on a local variable.\r\nDid you mean to use a `ref` here?'"
2555,119211967,"b'Need to handle it it is null, no?'"
2559,119290858,"b'If the `Id` is null then the `Id.Length` would also throw NRE, no?'"
2559,119291896,"b""No, if `Id` is `null` then `[commandData.Id.Length - 1]` won't be evaluated. We'll have then the condition as follow: `null == '/'`"""
2561,119290952,"b'The exception logger is not thread safe, IIRC'"
2561,119291031,b'Why is this operations level?'
2561,119292451,b'Do you mean `ExceptionAggregator`? It uses `ConcurrentSet` under the hood so it should be fine'
2561,119292802,"b'Hm... was certain it was just a list, okay, great then'"
2561,119292853,b'Changed to info'
2568,119386825,"b""I'm worried about case sensitivity here, should we do something here?"""
2568,119387536,b'How do we know here that it is relevant for this node?'
2568,119387983,b'Why do we have this here? It swallow all exceptions _except_ shutdown?'
2568,119388633,"b""shouldn't we also do a `Wait(CancellationToken)` here?"""
2568,119391328,"b""Right, I'll add `ToLowerInvariant` here"""
2568,119392421,"b'Sorry, I forgot to check against the db record (`record.Topology.RelevantFor(_serverStore.NodeTag)`'"
2568,119393222,"b""Just blindly copied it from `StateChanged` to be frank. Shouldn't it be like that?"""
2568,119393599,"b""Yes, it should. I'll add it"""
2568,119394782,"b'Not sure, to be honest. Need to check upward to see what is the behavior. \r\nSwallowing the exception is probably not okay anyway'"
2573,119553820,b'Need to update matching fields in *ongoingTasks.html* as well'
2573,119555585,b'Fixed in 6699dcfeaba7. Can you have a look?'
2573,119556619,b'Those changes are not enough. Working on that.'
2573,119557741,"b'Actually, it should be fine now'"
2571,119574049,b'Do we need to handle the case where the id is just `/` ?'
2575,119575474,b'Better to copy the value to a temp variable.'
2575,119575579,b'@arek can you take a look here?'
2575,119575949,"b""I'm not sure if this is correct. We might be running behind an HTTPS proxy here, so we aren't using HTTPS, but requests to us go over HTTPS."""
2575,119576087,"b'Copy to a local variable, just to make sure that the Url cannot change midway'"
2575,119576411,"b""Don't you need the NRE check here as well?"""
2575,119582352,"b""I'm looking into that. BTW '@arek' isn't me :) my github login is @arekpalinski"""
2575,119588483,b'#2580'
2575,119593862,"b""Opps, I'm using to doing that from TC"""
2599,119654332,b'Need to also include the topology id'
2599,119654458,b'Validate the topology id here.'
2599,119654629,"b""You didn't dispose of the previous instance, it may still be running?"""
2615,120003743,"b'I thought the format was supposed to be:\r\n\r\n`url=http://localhost:8080; url=http://localhost:8888`, etc, no?'"
2615,120003749,b'And database is required.'
2615,120003833,b'Please fix the format as part of this issue'
2615,120003821,b'The Format is going to change in this issue http://issues.hibernatingrhinos.com/issue/RavenDB-7286\r\n\r\n'
2621,120009258,b'Note that this can happen if the server was shut down midway through the operation'
2621,120009571,b'If this is the only case I will add this as a comment'
2623,120012336,"b""Why can't we use 404 http status code ? """
2624,120012471,b'Comment looks wrong'
2623,120012517,"b'Yes, that would be better.'"
2624,120049852,"b'Yes, it is old. Fixed.'"
2634,120085355,"b'Just do a `FirstOrDefault` search here, instead of creating the list and then searching it'"
2634,120085390,b'What happens if we use the same param name in both?'
2634,120088194,b'i make sure that each param name is unique (per save changes call) by adding __valsCount  or __customCount suffix to param name'
2637,120091266,"b'Why are you doing this iteration? You already know the position in the value, and the # of entries, you can just compute it.'"
2637,120091367,"b""Isn't it basically `page.NumberOfEntries - page.LastSearchPosition` ?"""
2646,120180007,"b'Change the URL to `/admin/tasks/status?disable=true|false`, I think.'"
2646,120180181,b'Change class name to Toggle'
2648,120279334,b'`to scare` instead of `to scary`'
2648,120279740,b'Thanks :)'
2650,120289382,"b""That is a bad idea, I think.\r\nI'm routinely running such tests at those hours.\r\nI think it would be better to inspect an environment variable."""
2650,120290693,"b'You are right, let me fix this.'"
2651,120292432,b'Can probably get rid of this method entirely.'
2654,120296049,b'Why is there a `<T>` here?'
2654,120296208,"b""You can look it up by id in the session, and if it isn't there, make a `Head` call, to get the metadata."""
2654,120310990,b'In order to call `Load<T>(id)`.'
2654,120311350,"b""Head doesn't return the metadata... so in case that this is the session already Load is a no-op. """
2654,120323820,b'I removed the overload the requires the T.'
2654,120326005,b'Better to throw here. Or return empty array'
2654,120326133,b'Why have this class now?'
2654,120326207,"b""Don't think it is a good idea, we can just return a `Stream` directly from the method, don't need this.\r\nWe can also have a `out` param for the `AttachmentDetails`"""
2654,120326265,"b""This is fine for internal use, I just don't want to expose it externally."""
2654,120326343,b'Why not `AttachmentName`?'
2654,120326436,"b'Change it so it has two overloads on `Stream GetAttachment(...)` the second `Stream GetAttachment(..., out AttchmentDetails d`)'"
2654,120326853,b'This is the result of PutAttachment method.'
2654,120327188,"b'If the document does not have an attachment should we return null, no?'"
2654,120327275,"b'If yes, this is why I also return null in this case.'"
2654,120327414,b'What is the difference from `AttachmentName` ?'
2654,120327459,"b""You're right, it should be AttachmentName here."""
2654,120327530,b'Empty array or throw. No point in returning null to get NRE later on.'
2654,120327744,b'ok'
2654,120328765,b'`Array.Empty<AttachmentName>`'
2654,120328868,"b""AttachmentName does not have the attachment's etag."""
2654,120329298,"b'It is worth a separate class just for that? Can just return (AttachmentNAme, etag)'"
2654,120340276,b'Done'
2654,120340352,b'Changed'
2654,120340761,"b'Yes, we also need there the DocumentID for the case of reply in BatchHandler.'"
2654,120357684,"b'Why not call `GetAttachment(string documentId, string name, out AttachmentDetails attachment)`'"
2654,120357740,"b'can call `GetAttachment(object entity, string name, out AttachmentDetails attachment)`'"
2654,120357779,b'Same issue'
2664,120565341,b'Make sure that the scope of the session is big enough to include the query generation'
2664,120565358,b'Make sure that the scope of the session is big enough to include the query generation\r\n'
2664,120565440,b'Make sure that the scope of the session is big enough to include the query generation\r\n'
2664,120565463,b'Make sure that the scope of the session is big enough to include the query generation\r\n'
2647,120184575,b'Why?'
2647,120185102,"b'That is extremely invasive operation here. You are basically saying that while the node is passive, no databases can be accessed.\r\nIf I just remove a node from the cluster, I lost access to all its data.'"
2647,120206297,"b""This block the access to the database state, not the database itself.\r\nI'll still be able to access the storage of the data, indexes, etc.  """
2647,120267328,"b""Not a good idea, I think.\r\nThis is lying to the rest of the system.\r\nAnd it won't help you with the state change for already running stuff, I think.\r\n\r\nYou need to be active about this and check in all the relevant locations."""
2671,120805410,"b""This is wrong, it shouldn't be `static`. """
2671,120805594,b'What about concurrency here? If we have multiple updates for the db record?'
2671,120805809,"b""This lock isn't enough. The older version might run later, resulting in us seeing stale data."""
2671,120805891,"b'Wrong, this is global, and should be local.'"
2671,120805961,b'Typo'
2671,120805985,b'And why does this pass through method exists?'
2671,120806022,"b""Wrong, can't handle this globally.\r\nDuring tests we have multiple servers, with some in cluster and some not."""
2671,120806099,"b'Why do it like this? We _already_ have state change, why need anything else?'"
2671,120806805,"b'Being part of a cluster is a global parameter, that affect every DB in the server.'"
2671,120806922,"b'Yes, but each server is a different process, right?'"
2672,120807006,"b'Error should be something like: ""The database doesn\'t have versioning enabled for collection ABC""'"
2672,120807182,"b""I don't like the direct use of the write transaction here.\r\nCan't we do that as part of the actual versioning ? IIRC, we already call that as part of using versioning, no?\r\nWhy do we need that specially?"""
2672,120807336,b'`Dons` as the collection name?'
2672,120807384,"b'You are saving companies, but expect to get the collection `Dons`?'"
2672,120807455,"b""Don't we have _docId there or something like that?"""
2672,120807488,"b""Do we need to return _anything_ ? If we just don't, it will still filter,no?"""
2671,120807551,b'Not in testing.'
2671,120807590,"b'You can have multiple servers in the same process. \r\nIf you want to make this a global per server value, put in on the server instance.'"
2654,120856450,b'Fixed'
2654,120856470,b'Fixed'
2654,120856487,b'Fixed'
2676,120863496,"b'`GetZombiedRevisionsCommand`, I think'"
2676,120864060,b'Why the query/ includes / etc ?'
2676,120869631,b'`revisions/zombied`'
2676,120872517,b'This class was removed'
2676,120872630,b'This class should have been deleted and not make it to the commit'
2694,121227236,"b'This is wrong, it is holding up the thread, and what for?'"
2694,121227300,"b'Why not use the LatestVersionCheck here? \r\nAnd the name shouldn\'t be null, can be ""server"" or ""global"" or something.'"
2694,121227468,"b""We won't have so many of those, sure, but we don't actually need it to run sync. """
2701,121274536,"b'Need better error handling here, explaining what the error is.'"
2701,121274943,"b""@ayende there is no error here... If we don't find the file we continue normally without encrypting the store. """
2701,121275001,"b'The file is there, but isn\'t readable.\r\nThe file is readable, but we can\'t decrypt it.\r\n\r\nEtc, etc.\r\n\r\nWe need to make sure that the user gets a GOOD error message here.\r\n\r\nConsider the case of moving a database between machines, what kind of error is the user going to get?\r\n\r\n""Failure"" <-- I know the reason, but won\'t tell you?\r\n\r\nThe user gets this feeling: \r\n\r\n\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b\xf0\x9f\x98\x9b'"
2703,121275861,b'Just put `rvn put-key`'
2709,121284519,b'This will not be the last one?'
2709,121284529,b'maybe use ValidatePropertyExistance here?'
2709,121284652,"b'I think that other methods are returning Etag first, then the value.\r\nAlso use named tuple? (long Etag, string Id) ? Easier to work with.'"
2709,121284678,b'This will probably break the Studio (@ml054?) and maybe 4.0 -> 3.x import'
2709,121284710,b'If we do not use the context  then maybe remove the _returnContext entirely?'
2709,121284841,b'Not sure if this is needed?'
2709,121287562,b'hmm.. yes'
2709,121287580,"b'without such statement compiler complains ""cannot fall through case statements""'"
2709,121317036,"b'If I refactor LocalIdentities to have the name of Identities as before, it should prevent studio break, no?'"
2709,121323223,"b'Studio is not a problem, it needs to be adjusted anyway, question is what impact does it have for 3.x <=> 4.0 import/export?'"
2684,120919452,b'Why are you forcing us to materialize it all at one shot? There is no need to do that.\r\nETag check can be done in the same way we do it for the `/docs` endpoint. \r\n'
2684,120919518,"b'Don\'t we need to use `""` there?'"
2684,121281682,b'Fixed.'
2684,121281929,"b""I'll implement this."""
2684,121282117,b'This will be done in a different PR'
2684,121337568,"b'This is not safe for multi threaded use, why not just create it as needed?'"
2684,121338184,"b'Better to reserve 0 and user -1, -2, etc.'"
2712,121351295,b'Who is setting this?'
2712,121351382,b'Need to assert false on all of those.'
2684,121358356,b'Fixed'
2684,121358791,b'Done'
2713,121359656,"b'Change this to a HashSet, instead.'"
2713,121359671,b'Do the check in the Add'
2714,121360284,b'I think that it should be uppercase. Like with public fields/properties in classes.'
2714,121360382,b'Is this needed?'
2714,121360509,b'Maybe instead of lambda just pass instance of Counts?'
2713,121366049,b'Done'
2713,121366053,b'Done'
2716,121369712,"b'Move this to the studio, see: https://developer.mozilla.org/en-US/docs/Web/API/Blob/type'"
2716,121373951,b'http://issues.hibernatingrhinos.com/issue/RavenDB-7442'
2725,121585535,b'How would this help?\r\n'
2725,121585558,"b""Shouldn't we have the error handling here?"""
2732,121668751,"b'And if this is not there, or not loaded? You just return noop?'"
2732,121668984,b'Also need to add access to the server as a whole.\r\nSo we need a way to just run it without a db instance.\r\nWould be useful for admin ops'
2738,121903112,"b""And if it didn't complete? What happens if it is loading? Or not loaded at all?"""
2738,121903232,"b""We can't take the absence of name only as a hint to run at server level, need an explicit request by user with another arg."""
2741,121961929,"b""Isn't this exactly what Array.Resize is doing?"""
2741,121963508,"b""Since we aren't caching this instance, yes, we can do that."""
2719,121387935,"b""Maybe this should go to a separate endpoint? Don't need to overload the DB stats."""
2719,121388003,b'Why are you deleting the task here? Why not use `break`?'
2719,121388271,b'Use PublicCasing'
2719,121388365,b'Why?'
2719,121388512,"b'You are _inside the transaction merger_, making a _raft consensus call_. That is not a good idea!'"
2719,121390637,b'@myarichuk please open an issue that we need to support this block in 3.x (by skipping it). IIRC the 3.x smuggler throws if not supported property is encountered.'
2719,121390792,b'Why change the name of this anyway? There is no distinction'
2719,121392282,"b'If we have one type of identities, then maybe we can get rid of the lambdas here (maybe revert back to the old code?)'"
2719,121706611,"b'hmm, no reason to change the name, I will change it back to Identities at the next PR'"
2719,121706764,b'I will get rid of lambdas'
2719,121857023,b'Rename to get database identities.'
2719,121862250,"b'What happens if we have a lot of identities, should we place a limit on that? '"
2719,121862320,b'Rename class'
2719,121862464,b'Rename method'
2719,121862489,b'Rename method'
2719,121862601,"b""You _aren't_ doing fire and forget here.\r\nAnd the smuggler is mostly async anyway. Move this behavior to FlushAsync()"""
2719,121862661,b'Rename'
2745,122121977,"b'This is a good change, yes. Note that you can also make this using `Task.FromResult(null)`'"
2745,122122063,"b""Let the user know what happened, the database doesn't exists, etc."""
2752,122229998,"b""Not sure that I agree. What if I just want to delete all revisions earlier than 2 weeks?\r\nDon't care about the number of them."""
2757,122239023,"b'Check for null id / empty id as well, also invalid.\r\nMove the throws into a dedicate method.'"
2749,122236284,b'Why generate a string instance here?'
2749,122238430,b'Why do we still have commented code here?'
2749,122239320,b'What is wrong with using the string hash here?'
2749,122239520,b'Why is this ref?'
2749,122239772,b'Can it never be the same instance here?'
2749,122240145,b'Why is this commented?'
2758,122242976,b'Need attachment header.\r\nWhy not write it directly to the client?'
2758,122243565,b'HTTP methods are always UPPER CASe'
2758,122243802,"b'You are effectively executing the requests against the same node, right?\r\nWhy not just call this directly, and not involve the HTTP pipeline?'"
2758,122244957,b'what do you mean - write directly to the client?'
2758,122245176,"b'You are writing to a memory stream, them to the client.'"
2758,122245882,"b'I am thinking to extend ""server-wide"" debug-info to include information about the whole cluster, so I want to create functionality to fetch debug-info data from any given node. Do you think it is overkill/over-engineer  for debug-info package?'"
2758,122245094,"b'Hmm, ok. Will fix in next PR'"
2758,122247880,"b""ZipArchive tries to use not supported property of Kestrel's response stream -> if I try to open ZipArchive directly on response stream I get Kestrel exception"""
2758,122301369,b'What exactly is the error?'
2758,122303445,"b""Following up on our conversation, we'll use a single endpoint that will internally call the relevant stuff to generate a zip file.\r\nFor cluster, we'll have an endpoint that will hit all the cluster nodes and generate a zip file with an internal file for each node (`A.zip`, `B.zip`, etc)"""
2759,122319803,"b'Add comment to the issue, or better yet, move this code to the issue'"
2759,122319877,b'Same'
2759,122320008,b'Why do we need those details?'
2759,122320081,"b""Don't we need an encryption key here as well?"""
2759,122320223,b'Add a comment explaining when this can happen'
2759,122320274,"b'Also, how are you intending to restore an encrypted db in this case?'"
2759,122320382,b'Better to use flags here.'
2759,122320598,"b'This can include potentially secret data, no? Such as connection strings?\r\nIf the DB is encrypted, what is going to happen?'"
2759,122320897,"b'No, this should go on the _options_. We want to reduce the number of arguments we carry, otherwise it will explode'"
2759,122321316,b'what was the reason for the rename?'
2759,122321458,b'What scenario can cause this?'
2759,122321653,b'Include the full path here.'
2759,122321662,b'Include the path here.'
2759,122321950,b'What is the dir in question?'
2759,122321972,b'What is the dir in question?'
2759,122321987,b'What dir?'
2759,122322167,"b'Here we need to consider the fact that you are checking this only on the local node, but are you actually _restoring_ on the local node, or another one?'"
2759,122322210,"b'For that matter, after restoring, if I want to clone to another node, what happens?'"
2759,122322336,b'Where is the logging in here?'
2759,122322512,b'Typo in method name'
2759,122322607,"b""Isn't it a bit late to validate this after the full restore?"""
2759,122322679,"b'You assign it to any node, but this was restored on the _local_ one, no?'"
2759,122322796,b'Should be Operations level'
2759,122322847,b'Typo in method name'
2759,122322890,b'Missing logging in this method'
2759,122322996,"b'Why do you assume that the files are ordered? Where did you enforce that?\r\nNote that on NTFS, this is true, but not on Linux'"
2759,122323697,"b'What is this database values that you have here?\r\nIf this is all the values for this db, we need to consider what happens if they are very large? Or if they have a large number of them?'"
2759,122324000,"b""Why abort? Shouldn't we be sending the error to the user? What happens otherwise, how does they know about an issue?"""
2759,122324152,"b'Move this to be a thread static value, no need to keep creating it on every call.'"
2764,122564528,b'Will this test fail on `readonly` fields? '
2764,122571414,"b'@ayende yes, but we can only know that only during execution, and because of that we are doing ```func(emptyBlittable)``` couple lines below.'"
2764,122571474,"b'To clarify, this will fail on the .NET core as well during test run, right?'"
2764,122571493,"b'Yes, because we added:\r\n```\r\nthrow new InvalidOperationException($""Cannot create deserialization routine for \'{type.FullName}\' because \'{fieldInfo.Name}\' is readonly field"");\r\n```'"
2764,122571676,b'+1'
2759,122587715,"b""If the database is encrypted, I'll use the MasterKey.\r\nShould this be encrypted anyway?"""
2759,122587725,b'Restore belongs to server operations'
2759,122587780,"b'Failure to parse the cron expression for both full and incremental backups.\r\nI\'ll move this to the ""save the configuration"" endpoint'"
2759,122587807,"b'Subscriptions, etl statuses, backup statuses'"
2759,122587814,"b'Yes, this should be encrypted, it can hold secrets.'"
2759,122587821,"b""Yes, in general, we shouldn't accept invalid input."""
2759,122587829,b'Subscriptions you can have a lot of. \r\nBackups / etl probably not a worry'
2770,122586753,b'Just name it Public Keys'
2770,122586760,b'Just Public Key'
2770,122586767,b'Same'
2770,122587838,b'Same'
2770,122587857,"b'`publicKey` can be `null` here, what do you do then?'"
2770,122587863,"b""Move `publicKey` before the `out` param.\r\nIt shouldn't be optional"""
2770,122587887,b'Need to validate the key as well'
2770,122587901,"b'This should be called `SignPublicKey`, since it needs to match the reset of the params'"
2770,122587918,"b'Use better names `Raven/Box/Public`, `Raven/Sign/Private`, etc.'"
2771,122588103,"b'Wrong here, we can have `MinimumRevisionsToKeep` that is null, but we still need to delete documents that are older than the `MinimumRevisionAgeToKeep`'"
2771,122588278,b'I amended the commit with a fix for this.'
2772,122588297,"b'Still wrong, no?'"
2772,122588339,"b'No, if the value is zero it means that we going to delete all revisions but than we do not delete if the age criteria is not met.'"
2752,122588340,"b'Fixed, see: https://github.com/ravendb/ravendb/pull/2772'"
2774,122591083,b'Where is the handling of the processing call on the other side?'
2774,122591331,b'a sec..'
2774,122591462,b'pushed'
2778,122593792,b'Is there a reason to have a dedicated endpoint and not just a script via the admin console?'
2778,122593828,"b'Do we actually need this? We already have the server exposed here, we can just call `server.ServerStore.SecedeFromCluster()`, no?'"
2778,122593834,b'Please create a testcase for this as well.'
2776,122593903,"b""This will not show up in the errors that the tests raises, so it won't be useful in finding out what the root cause is"""
2773,122593970,b'Need to add validation here that user cannot create API Keys starting with `Raven/`'
2759,122594898,b'done'
2759,122594946,b'done'
2759,122594963,b'I return the new data directory for the tests.\r\nWhat shoud be the restore operation results?'
2759,122595089,b'done'
2759,122595528,b'done'
2759,122595530,b'done'
2759,122595531,b'done'
2759,122595532,b'done'
2759,122595666,b'moved this check earlier'
2782,122595677,b'maybe TxInfo would be better?'
2759,122595682,b'Yes. it should be assigned to the node that I restore to.'
2782,122595686,"b""Maybe remove '-' ? Those tend to be problematic."""
2759,122595689,b'done'
2759,122595693,b'done'
2759,122595700,b'done'
2759,122596188,"b'Why? You should already know that before the restore is started.\r\nAnd the restore operation should just return an operation id, which you can wait on, I think'"
2759,122596350,"b'If this field is blank, I use the default location for the databases in that node.'"
2759,122596471,"b""Great, but it shouldn't be something that your return as the result of the operaiton."""
2783,122597873,"b'This is the only case we send null, when the key already exists in the dictionary. The key was added when the node became promotable.'"
2781,122596328,"b'This is actually dangerous, because the timer might still be running after the disposal.\r\nMight be a better idea to no dispose and let the finalizer handle it.'"
2781,122596573,"b'In failure mode, you may be creating a LOT of timers here.'"
2782,122596909,b'`Database debug-info ..`'
2782,122596937,b'`TransactionInformation` would be better'
2782,122596968,b'This is nice'
2783,122598582,"b'So if we already know the value, why not send it here anyway?'"
2783,122598611,"b""Note that @talweiss1982 issue here is important, we can't really use `PutSecretKey` here, since this will cause us to overwrite the value when we are installing the snapshot.\r\n\r\nFirst, the Box keys don't need to be persistent, only the sign keys.\r\nSecond, we need to store them _outside_ of the state machine, since they are purely local affairs."""
2786,122631118,"b'This needs to be an admin only operation, I think'"
2786,122631199,b'Add logging here.'
2786,122632887,b'Done'
2786,122642789,b'Done'
2794,122658873,b'How would I use this via the Admin console?'
2796,122680876,"b'This will delete it all for now, what about if we want it for two weeks ago?'"
2796,122688237,"b'Construct a date using JS and jint will convert it to DateTime.\r\nI guess `new Date(2017, 6, 3)` would work.'"
2794,122705444,b'Fixed in a different PR.'
2759,123033638,b'Done. The database key will be saved before opening the document database.'
2759,123035213,b'done'
2759,123042948,b'done'
2759,123043655,b'done'
2814,123070845,"b""No, this is a bad idea. You aren't actually safe since the user might be doing the restore on one machine and adding this on another. We should ignore this entirely since this is something that the admin is doing explicitly and it is rare."""
2798,122688227,b'@ayende This needs to be removed.'
2798,122798309,b'typo: RequestExecutor '
2829,123310491,b'What scenario can the `nodeInfo.PublicKey` be null?'
2829,123310609,"b'Logging here should be the other way around. The generic arg is the logging, and the name in this case is just the server.'"
2829,123311051,"b'Wrong. You cannot do this.\r\nWe have the `RequestExecuter` for a reason. To start with, you are not making the call using the appropriate credentials, so this will never work with authenticated setups.'"
2829,123311204,b'And if there is an error here?'
2828,123311612,b'Is this comment still relevant?'
2828,123312025,"b'Do we need to properties? They are from the `RavenDB.js` file, but I think that JS already have replacements for all of those are they are all very C# centric.'"
2829,123314104,"b""I've seen it happen when nodeInfo.NodeTag == null, then nodeInfo.PublicKey was also null. Perhaps this is not a good fix - I didn't look too deep into this. It was quick and dirty fix because it prevented me to create cluster in studio. """
2829,123314409,b'Please look into exactly what is going on here. This is not a good idea for us to do.'
2835,123692233,b'typo: Collecet'
2835,123692615,"b""Shouldn't we `return` here?"""
2835,123693309,b'Also I think we could `return` here or simplify this piece of code to:\r\n\r\n```\r\nif (lambdaExpression != null)\r\n   ProcessQuery(lambdaExpression.Body);\r\n\r\nbase.VisitInvocationExpression(invocationExpression);\r\n```'
2835,123693545,b'Can `memberAccessExpression` be null?'
2835,123896303,"b""yes i think you're right, InvocationExpression.Expression can be an IdentifierName and then memberAccessExpression is null. I added a check for that.\r\nthanks"""
2835,123896306,"b'fixed, thanks'"
2845,123897496,"b""You aren't setting the Url to null if the `value` is null"""
2845,123897502,"b""No, this isn't correct. The test is failing because it is saying something."""
2845,123897813,b'It is failing because we need to add DatabaseRestore to one of the HashSets\r\nThis check suppose to check if we Handled this operationType in the notification center'
2845,123897896,b'fix\r\n'
2847,123898064,b'It is failing because we need to add DatabaseRestore to one of the HashSets.\r\nDatabaseRestore already handled in notification center.'
2851,123938331,"b""This isn't shared on Raft, right?"""
2851,123938349,b'And what can cause it to throw?'
2851,123938400,"b'Use named tuples, they are more understandable.'"
2851,123938582,"b""Why wouldn't we generate this on the fly on each call? They are somewhat expensive, but this seems much better to just  generate it each time.\r\nYour code here is dangerous, since we might be giving a token that will expire in 1 ms . \r\n\r\nWe aren't going to call this very often, anyway"""
2851,123938705,"b""Good, they aren't supposed to be persistent."""
2851,123938867,"b'Use `StartsWith` that does case insensitive search here.\r\nWe want to check for `Raven/`.\r\nIf they have an API Key called ""Ravenous"", that is fine, it is just `Raven/` that is reserved.'"
2851,123938886,b'Same'
2851,123939676,"b""this will reside in the topology as @iftahbe implemented it, in the case we can't find it there we will look at the storage and that is injected through an external tool.\r\nit will not throw it will return null, need to change this."""
2851,123939774,"b""I didn't used named tuple because i can't replace them atomically with interlocked this is by design"""
2848,123939354,"b'`_url = value?.TrimEnd(""/"")` does it more clearly.'"
2848,123939526,b'Use named value here to make it clear what it is that you are actually passing.'
2848,123939607,b'You can integrate with @talweiss1982 work in `RavenDB-7466` to avoid needing this.'
2848,123939734,b'Where is the error handling? What happens if this fails?'
2848,123939841,"b'Probably better to execute all of those in parallel , you are already writing to memory stream anyway.\r\nAfter you got it all, then write it to the archive.'"
2848,123939863,b'Make sure that we specify a timeout'
2848,123939951,"b'Why catch just this exception, should do that for all exceptions.\r\nAlso, what happens if the endpoint fails for any reason? Do we fail the entire process?'"
2851,123940016,"b""i was thinking about this point yesterday, was thinking to regenerate them if the time passed is 20 min so we will have overlapping 10 minutes to handle this.\r\nRedirect to leader use this so it isn't that rare as one would think."""
2851,123940171,b'Why bother? How often this is called anyway?'
2851,123940183,"b'i missed this one, i switched to Raven/'"
2862,124237226,b'`obj is ExpandoObject` would be much better here.'
2848,124520103,b'I catch this exception because I want to throw more informative exception'
2876,124529581,"b'This is likely to be a hotspot, can we do without the lambda here? It allocates and does indirect calls.\r\nBetter to use a `foreach`'"
2876,124532867,b'#2877'
2878,124625863,b'Why do you even need this?'
2878,124626126,"b""Isn't this code duplicated?"""
2878,124626319,b'Why? You are generating a byte array so later you could turn it into string. Turn it into string directly.'
2878,124626425,b'Why do we need this comment? How is this different from any other method?'
2882,124762763,b'No'
2900,125210837,"b'This is somewhat of a problem. \r\nThe issue is that if we define this per db, then we could have different values, but then things like `OpenSession(db)` come into play'"
2908,125210217,"b""Since we are talking to members of our own cluster, we don't need an API Key, we can generate the token directly"""
2908,125210238,"b'`clusterTopology.ApiKey` if this is for internal use only, and IIRC it is so, we can drop it entirely.'"
2899,125211688,"b""This translate to about 1.5 MB. Might be interesting to set it to 512 / 256 KB, that way we'll say on small tx, I'm not sure how common > 1.5 MB per tx will be."""
2899,125211730,"b""At any rate, I don't think this should be dynamically computed."""
2888,125211889,b'This is probably not doing what you expect it to be. You are holding on to the _mutating_ value here.\r\nIs this intended as a snapshot or just to show what is _now_?'
2888,125214553,"b""it is meant to show what is now I know it may change and I don't care usually when I care about it the state is steady (usually stuck on a specific index)"""
2909,125223251,b'Put this in `#if DEBUG`'
2909,125223949,"b""What if the user will supply a localhost.fiddler url in order to debug RavenDB?\r\nIn this case all tcp connections won't work."""
2909,125232129,b'The user is using `ravendb.fiddler.com` ? That is a valid domain name.'
2909,125232165,"b'Better to actually handle that on the server side, instead.'"
2923,125277914,"b""Wouldn't it be better to put it in the `Status.set` method?"""
2909,125278685,b'Fixed.'
2923,125284438,"b'good idea, changed it.'"
2926,125287877,"b'@talweiss1982 can you use C# casing here? Task<(string ApiKey, string PublicKey)>'"
2926,125289980,"b""Add comment explaining why this is.\r\nThis is the second time I'm seeing this code and going `HuGH?`"""
2926,125290046,b'Missing error handling here.'
2926,125290100,b'Failure to open / dispose would crash the process'
2926,125290247,b'Please use PascalCase here.'
2926,125290423,"b'Maybe better of to use ""Raven:Cluster/Secret"" ?'"
2926,125290461,b'And then reserve just `Raven:`'
2926,125294321,"b""I think that 'Raven/' is already reserved: https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Web/Authentication/AdminApiKeysHandler.cs#L26"""
2926,125318368,"b'What, why? This is going to be locking effectively forever.'"
2926,125318540,b'Why do we need this?'
2937,125447942,"b'To be safe, copy it to local var, then test.'"
2943,125450352,"b'Comment here, explaining that it is not supported.'"
2943,125450395,"b'comment here, explaining not supported and why'"
2943,125450535,b'@redknightlois Can you think of any better way to handle this?'
2943,125450646,"b""Shouldn't we provide some more instruction here?"""
2943,125455546,b'Cost is going to be dominated by hash and marshalling. The structure of that code is going to be very packed. There is hardly any improvement that can be made unless we are going to do some bond like stuff that would only make sense if we decide to tackle the most general issue. '
2951,125475620,"b'You probably need both here, just to be safe.'"
2951,125505837,"b""There is a problem, if I'm first leader elect, and I register, then leader, I double register."""
2961,125623744,b'Throwing just `Exception` is probably bad for us'
2961,125624896,"b""Didn't you just do that?"""
2961,125625120,b'Why do you do it in this fashion?'
2961,125625209,"b""No, that is not a good idea. You are iterating over the data twice, and I'm not really sure why you want to do that."""
2961,125625305,b'Use PascalCase'
2966,125710434,b'What value is actually added by this exception? Please remove it.'
2966,125712899,"b'Not required, kill it.'"
2966,125713046,b'@ppekrol any ideas for better names?'
2966,125713214,b'Any reason this is not already inside `FirstTopologyUpdate` ?'
2966,125713373,b'Why is this virtual?'
2966,125713538,b'If two threads hits this in the same time? You are going to get an invalid nextNodeIndex. Need to use the return value of the `CompareExchange`'
2966,125713802,"b""Why are you resetting the index if this isn't forced?\r\nAlso, note that you did it before you changed the topology. Existing clients may get this part way."""
2966,125714011,b'Concurrency here can cause you to get argument out of range error.'
2966,125714233,"b'You are throwing here, and you left the `_syncFlag` on, killing it for all time.'"
2966,125714363,"b'Why are you doing it in this manner, you are forcing all requests to experience contention.'"
2966,125714643,"b'If you are exposing the failure, it would be good to also exposed _what_ failed.'"
2966,125714793,b'This belongs in `FirstTopologyUpdate`'
2966,125714976,"b""Why? There is no way we can recover from this. Instead, we need to throw and we'll keep trying next time."""
2966,125715182,"b'This has already been fixed,'"
2966,125715582,"b'You are catching _all_ errors here, not just `ObjectDisposedException` or `OperationCancelledException`. That can mask errors.\r\nAnd it is better to let the calling code make decisions about this.'"
2967,125722791,b'Correct.'
2967,125722884,"b'We are adding the same pager state multiple times, that is why'"
2967,125722936,"b""Don't like this."""
2967,125723211,"b'We need uniquing here, IIRC'"
2967,125726646,"b'Yes, but still if the number is small (say less than 10) it is way faster to just do that using a FastList behaving kind of as an LRU. '"
2967,125726794,"b'Ok, so the hashset is because we need to handle duplicates. Right?'"
2967,125727357,"b'Yes, it is often small, and it is meant for duplicates'"
2967,125727406,"b'Yes, just duplicates. Note that here we might have a lot of free pages.'"
2968,125827229,"b'IIRC, this is now solely in the `DatabaseRecord`, no?'"
2968,125827253,"b'This is dead, yes'"
2968,125827269,b'Dead'
2968,125827298,b'Dead'
2968,125827329,b'Dead'
2968,125827343,b'Dead'
2968,125827367,b'In `DatabaseRecord`'
2968,125827420,"b""I'm not sure, right now I don't think it is supported at all, at any rate, it wouldn't be using this doc."""
2968,125827460,"b""It isn't a document, but we do need to track it, I think @grisha-kotler is already doing it."""
2968,125827478,b'dead'
2968,125827525,b'@grisha-kotler What are you doing here?'
2968,125827551,b'dead'
2966,125832016,"b""it's an artifact from development, now no reasons for this"""
2968,125832117,b'I assume @grisha-kotler will clean it up as part of his work on backup/restore. '
2968,125832211,b'we clean it up once replication will be finished. '
2968,125832276,b'statuses will be held in notification center operations. '
2966,125840562,b'what is the difference between this and _disableTopologyUpdates?'
2966,125840739,b'Does it need to be public?'
2970,125842909,"b""This won't work with the Pipe"""
2970,125842975,b'Simplify this'
2970,125843054,"b""won't work on Pipe"""
2970,125843122,"b'In general, all the console stuff should use a TextWriter instead.'"
2970,125843223,b'Include time taken here'
2970,125843340,b'Why not always put the mode?'
2970,125843464,b'Typo'
2970,125843505,b'Memory before & after?'
2970,125843949,"b'This happens in Unix when running as daemon, right?'"
2966,125843388,b'ReadBalanceBehavior\r\n- None\r\n- RoundRobin\r\n- FastestNode'
2970,125866274,b'ok'
2970,125866456,"b'on unix daemon, in docker, and also in windows nano server or any other console not supporting ReadKey'"
2970,125867080,b'I think we need to avoid using ReadKey in general'
2970,125867131,b'Given that we are going to be just using TextWriter / TextReader'
2970,125870443,"b'we write x64 or x86 always. This is a unique place where running on 64bits enforcing 32bits. And it is a rare one. I am not sure I would want to see ""Enforce 32 bit: No"" all the time'"
2970,125870948,"b'Oh, I see, okay'"
2974,126244379,b'Why? https://msdn.microsoft.com/en-us/library/0w3csw16(v=vs.110).aspx'
2974,126244454,"b'Why, just `ReadLine` on both'"
2974,126244558,"b'You are passing `consoleColoring` all over the place, just make it a field and use instance methods'"
2974,126244636,b'Move the `Write` / `Flush` stuff to a dedicate WriteMethod that would do this.'
2974,126244819,"b""What is we aren't listening to this ip? """
2974,126244836,b'Wrong IP'
2974,126244927,b'This will NOT work when using authentication'
2974,126244970,b'This will NOT work when using authentication\r\n'
2987,126336432,"b'We want to remove lodash as well, no?'"
2986,126337896,b'Why not `indexName?.StartsWith(DynamicIndexPrefix) ?? false`'
2986,126337974,"b""Why do we need this? Isn't it using the exact same logic as the other steps, and not calculating anything on its own that add anything."""
2986,126338029,b'This is the raw stuff from Lucene or from 3.5?'
2986,126338105,"b'Why no `GetStringQueryString`, etc?'"
2986,126344526,"b'I know that this is copied from other methods, but is this a proper format for Etag?\r\nCheck: https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Web/System/StudioHandler.cs#L220'"
2986,126345039,b'I think at this point we might need to introduce some abstract class with base implementation and override it in MapDocuments and ReduceMapResultsBase'
2986,126345962,b'IIRC this was done like this because performance was better when loop was used then if we searched for each element individually.'
2989,126370437,b'TODO here?'
2989,126370469,b'TODO here?'
2989,126370677,b'What does this mean?'
2989,126372168,"b'here we identify the remote cli ""wants"" quit or restart.  The problem is we cannot perform a restart to the Console.ReadLine thread. However we can change few things in order to achieve that differently so it is under ""TODO"" (if you type in remote connection ""q"" - you reach here).'"
2989,126372674,"b'logout - close gracefully remote cli connection\r\n\r\nimportdir + createdb : are bypassing REST so they aren\'t listed in help and cannot be used unless ""Experimental on"" command is explicitly entered. '"
2995,126459202,b'TODO is no longer needed.'
2986,126480597,"b""I took that code from somewhere else and just refactored it in a 'more proper?' place. The underlying issues of using only ```.StartWidth``` is that you cant use ```dynamic``` (disallowed for some reason) and you dont want to match ```dynamicIndexWhatever``` as dinamic."""
2986,126480852,"b'Probably, I dont know the code that much to being able to make that call at this point in time. '"
2986,126481171,"b'It didnt changed much from the current Lucene code, this is the oldest model available from Lucene, so current code is up-to-date with Java Lucene. '"
2986,126481434,b'I just modelled it from the MoreLikeThis extension on the v4.0 code to match the code logic as much as possible to the new way of doing it. '
2986,126482431,"b'I confidently know that I have no idea. In fact if that is the case, we have to fix https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/Handlers/QueriesHandler.cs#L210 too. '"
2994,126600853,"b'Really, that seems like it is really suspicous.'"
2994,126600936,b'Why is it called get key if it is also encrypting the server store?'
2994,126601048,"b""I don't think that this can work with a running server."""
2995,126606879,"b""I'll remove it than."""
2999,126672911,"b'@iftahbe What is going on here?\r\n@aviviadi The code make no sense, please have it reviewed'"
2956,125506182,"b'Why are you doing that? This is going into persistent storage, and the data look ephemeral to me. '"
2956,125528988,b'Should we use nullable here?'
2956,125529127,b'@aviv86 It means this information will be only available when client connects to leader? '
2956,126706689,b'Need full error here.'
2956,126706920,"b'If there is an error, append all of it.'"
2956,126707161,b'Try to avoid allocations'
3005,126870054,b'Why not use `var` ?'
3005,126870075,b'Use `var`'
3005,126870290,"b'What is this? I assume you need this to be certain that events happen in the proper order.\r\nThat is fine, but make sure that the name is accurate.'"
3005,126870564,"b'Let us use the full method syntax here, it took me a while to figure out that you are defining a local method using expression syntax.'"
3005,126870740,"b""What would throw the conflict, just the `GetTableValueReaderForDocument`, right? In that case, let us move the `try`/`catch` to just wrap it, and exit early. It isn't clear if we are looking at the exception thrown from the `Put` here"""
3005,126870788,b'Same comment about the exception scope'
3005,126876267,"b'I was just consistent with not using `var` for out params, but yes, in this case it make sense to use it.'"
3005,126876679,b'Done'
3005,126876783,b'Fixed the typo.'
3005,126877288,b'I changed it to be DebugWaitAndRunReplicationOnce which is more clear.'
3005,126882563,b'OK. But this will complicate the code there because of tvr param and skipping on the conflict.'
3005,126883329,b'![image](https://user-images.githubusercontent.com/629734/28106848-2ec7cd08-66ee-11e7-8c27-88e344fd5e77.png)\r\n'
3005,126884191,b'Done'
3005,126884205,b'Done'
3010,126952933,"b""Shouldn't we also check for null here?"""
3010,126963036,"b""this was a surprise to me too but cluster manager is always there even when not in cluster.\r\nYou're right that if two concurrent calls to this endpoint will occur this might throw NRE on the other but many other endpoints will also throw NRE it is expected (those calls were actually the race condition causing all the madness)"""
3020,127194677,"b'This is wrong, I think. `Contains` returns bool, but `indexOf` returns int. How does this work?'"
3020,127198102,b'i translate Contains(x) to indexOf(x)>=0  '
3020,127198920,"b'Correct, missed it.'"
3024,127422210,b'Why would this fix the test?'
3027,127422427,"b'This needs to be wrapped in a conditional method, not removed.'"
3027,127423129,"b""It can't, we would have to remove tests that are using this."""
3027,127424114,"b'`[Conditional(""DEBUG"")]` will allow it to be compiled in Release, but not actually be called.'"
3025,127431957,"b'A request can also fail without exception, for example, it it get 503, no?'"
3025,127432299,"b'This is not a good idea. We want to keep the same node for the duration of a session, I think.\r\nOtherwise you might load two docs from different nodes.'"
3027,127600124,"b'@ppekrol Are we running all of our tests in Debug mode, right?\r\nAs we have lots of Assert.Debug which should be tested.\r\nIf so, can we skip compiling the tests in Release mode?'"
3027,127601895,"b""We don't, we are always compiling and running in Release. All versions, 2.5/3.0/3.5/4.0."""
3027,127601976,"b""So I think that we need to run the tests of v4.0 in Debug mode, as we have lots of Debug.Assert in the code base and that wasn't the case in v3.5 and before."""
3027,127602400,"b""I'm always running them in `Debug` mode locally"""
3025,127602521,"b'for ""service unavailable"" (503) --> handled here : https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Client/Http/RequestExecutor.cs#L667'"
3025,127603242,"b'Why do we have `nodeSelector?.OnFailedRequest(nodeIndex);` vs `OnFailedRequest(url,e);`'"
3031,127603255,b'Probably better to call it `WillCauseHardPageFault` instead and reverse the logic.'
3031,127603263,b'Test code that needs to be removed.'
3031,127603279,b'Remove and properly handle errors by throwing'
3031,127603285,"b'What if there is an error here, need to call this with `try/finally`'"
3031,127603288,"b'remove, etc'"
3031,127603301,b'Duplicated with `PosixCheckForResidencyInRam` ?'
3031,127603303,"b'On throw here, you leak the `vec`'"
3031,127603307,b'`vec` is allocated but never freed.'
3031,127603319,"b'Better to define a `stackalloc int[4]` for the common (small) usage, and only allocate on the heap if we really have to.'"
3031,127603328,b'How do we protect from calling this on the mac?'
3031,127603359,"b'Why do we need this? This is almost always going to be true, because we prefetch on startup'"
3031,127603366,b'Why do we need this?'
3031,127603370,b'Test code that needs to be removed.'
3031,127603442,b'rebase failure.. fixing..\r\n'
3025,127604975,b'Good point. Will fix.'
3032,127603792,b'You are leaking this pointer.'
3032,127603806,"b'I think that the logic here needs to be reversed, given the new method name.'"
3032,127603808,"b'I think that the logic here needs to be reversed, given the new method name.'"
3032,127603823,"b""No, this is _REALLY_ confusing. We'll typically look at the impl, not the wrapper"""
3032,127605473,b'Overflow?'
3032,127605500,b'The logic here is still wrong.'
3032,127606423,b'You are leaking this memory!'
3032,127606515,b'https://github.com/ravendb/ravendb/pull/3032/commits/e3c3071945eea947886110bdbd7ec3b8f51337eb'
3034,127633058,"b""Do we really need an Add an Update commands? Can't we do with just Put that will update if it is already there?"""
3035,127633255,b'Why rename the method?'
3035,127633341,b'Why is this running under a lock?'
3035,127633422,"b'No, this is _bad_, what you ensured will happen is that you are going to _force_ locking on pretty much every request.\r\nThat is a really bad idea. '"
3035,127633458,b'why do we need to return a value here?'
3035,127633504,b'And now not calling this method will produce a memory leak?\r\nIt also means that we are going to hold on to sessions for a lot longer.'
3035,127633509,b'This needs to go away'
3035,127633548,b'This introduce synchronization and dictionary call in the hot path.'
3035,127633596,"b""If you are doing that just for debug, make sure that in release builds, there isn't a finalizer at all.\r\nOtherwise we pay for it in the finalizer queue."""
3035,127637908,b'name ambiguity because sessionId parameters'
3041,127695571,b'We need the _full_ error here.'
3041,127695787,b'How do you know it is an authorization issue? Where is the full error ?\r\n'
3037,127696454,b'Can we change this to be its own endpoint? To make it clearer?'
3035,127697144,"b'See if you can resolve it another way, it is better to have the same name.'"
3037,127697582,"b'I think it is consistent with other endpoints (to have optional parameter will acts like a filter). The only change that I think we should make it to update parameter info -> name, since it is misleading. '"
3037,127697921,b'Okay'
3041,127698510,b'We have full error here w/o stacktrace. Should we include stack as well? '
3041,127698916,"b'No, you assume you do, because the real error might be in an inner exception'"
3041,127699930,b'ok I will update this.'
3041,127703021,"b'@ayende we know that it\'s an authorization issue because the AuthorizationStatus of the TcpConnectionHeaderResponse is not ""Success"", and therefore it\'s one of the following :          AuthorizationTokenRequired, Forbidden, BadAuthorizationToken, ExpiredAuthorizationToken, ForbiddenReadOnly.\r\nwe get no error and there\'s no other information in the headerRespons.'"
3041,127705880,"b'Okay, that is good enough'"
3041,127712929,b'Fixed: https://github.com/ravendb/ravendb/pull/3044'
3052,127951462,"b'Why check twice, you can do it once and check if the tag is in the watchers and just error otherwise.'"
3052,127951613,b'Can just check the Voters here.'
3052,127951855,"b""I think it is better if we won't do this on our own, and just have the admin do it.\r\nRefusing to demote a leader is easier."""
3057,127990679,"b'Better to call it `PutConnectionStringOperation` instead of `AddConnectionStringOperation`, Add implies insert only, Put implies overwrite if needed.'"
3058,128005052,"b'Just `/admin/connection-strings` would do, you already have `PUT` in the method.'"
3059,128025353,b'Why do we need a session id here?'
3059,128025575,b'Here you are doing two _separate_ reads of the value.'
3059,128026357,b'Why are you locking?!'
3059,128026580,b'Use named value here.'
3059,128026770,b'Why do you need sessionId here?'
3059,128026831,b'Why do you need nodeIndex here?'
3059,128026941,b'Why do we have this code here?'
3059,128027287,b'Why do we pass the session id here?'
3059,128027363,b'How is the nodeIndex relates to sessionId?'
3059,128027464,"b""Absolutely NOT.\r\nYou don't retry such things ever."""
3059,128028163,b'Use named tuples.'
3060,128069079,b'We use PascalCasing for named tuples'
3060,128069823,b'Mutating global state here'
3060,128069861,b'Mutating global state here.'
3060,128069898,b'This is where you need to use CompareExchange'
3060,128073468,b'This will cause loading a non existing document (which is 404) to mark the node as failure.'
3063,128195024,b'Huh? Why this change?'
3063,128196438,"b'Sorry, I meant to change it to _dbId. Fixed.'"
3062,128194165,b'How can this happen?'
3062,128194485,"b'No, you cannot do that. You need to do it the _other way around_.\r\nScan the certificates in the snapshot and delete all the matching local ones.'"
3071,128254666,b'Also include parameters'
3071,128254808,b'Parameters'
3071,128255098,"b'No, this is bad, you are saying that the server itself run this, but you can just say that this is coming via the pipe'"
3071,128255240,"b'The Certificate can also be null, I think, and we need to handle this.'"
3062,128256351,"b""Where do we check that if we are HTTPS then we don't allow non HTTPS endpoints?"""
3062,128256545,b'Can we issue just unconditional delete?'
3073,128262213,"b""Isn't better to exclude entire .idea directory? """
3061,128279771,b'what exactly this adds to us? There is no additional information (such as the field name) given'
3061,128287189,"b'If there is a failure there, it will fail the index --afaik--- that comes from the main index initialization, I just modelled it based on it. '"
3061,128288956,"b""You are throwing specific exception, but aren't adding any additional information on top of it."""
3061,128289477,"b'Ahhh, will add field in a future PR. '"
3076,128449214,b'What about removing force parameter: \r\nhttps://github.com/ravendb/ravendb/blob/v3.5/Raven.Studio.Html5/App/commands/database/cluster/extendRaftClusterCommand.ts#L7 ?\r\nIt is no longer used'
3076,128453464,"b'The force parameter is no longer used, because we removed the kidnap option we no longer need to force joining'"
3076,128457090,b'but right now you have unused parameter in constructor '
3076,128457131,b'here: https://github.com/ravendb/ravendb/blob/v3.5/Raven.Studio.Html5/App/commands/database/cluster/extendRaftClusterCommand.ts#L7'
3095,128598788,"b""Shouldn't this be an admin operation?"""
3095,128599100,"b'I think we need a reverse test as well, that an endpoint with admin auth has admin in it.'"
3095,128599250,b'@ppekrol Thoughts? Should this be just db admin here?'
3095,128599401,b'This should also be admin url'
3095,128599437,"b'db admin, I think'"
3095,128599466,b'db admin'
3095,128599486,b'db admin'
3095,128599565,b'db admin'
3095,128599581,b'db admin'
3095,128599695,b'@fitzchak db admin here? Or should we require server admin to be safer?'
3095,128599958,"b'Or the other way around, actually.'"
3095,128600226,b'Change this to `DELETE /admin/cluster/node`'
3095,128600266,b'Change this to `PUT /admin/cluster/node`'
3095,128600753,b'Why the rename?'
3095,128600952,b'Should be `/admin`'
3095,128601107,b'This should be a `POST`'
3095,128602644,b'Should be valid user'
3095,128602797,"b'at the server level, it is all ServerAdmin'"
3095,128602828,"b'at the server level, it is all ServerAdmin'"
3095,128606750,b'Probably can drop the `websokcets` postfix'
3095,128606890,b'Need validation here.'
3095,128607393,"b'@ml054 Can we drop this?\r\nAt any rate, this looks like something that any user should be able to get, no?'"
3095,128607447,"b'@ml054 Same, can we drop it?'"
3095,128607522,"b'Probably can just use valid user, the output of this is not secret.'"
3095,128607530,b'Can drop it'
3095,128607681,b'Remove this'
3095,128607720,"b'Valid User, there is nothing secured here'"
3095,128607824,b'We can let a ValidUser do it.'
3095,128607958,b'Change to `POST /admin/databases`'
3095,128608170,b'Can we do that for a db admin?'
3095,128608204,b'Can we do that for a db admin?'
3095,128608335,b'Can we do that for a db admin?'
3095,128608376,b'Can we do that for a db admin?'
3095,128608481,b'`GET /admin/restore-points` ?'
3095,128608527,b'Can we do that for a db admin?'
3095,128608594,b'Can we do that for a db admin?'
3095,128608651,b'Can we do that for a db admin?\r\nAnd we need to drop the `/update` postfix'
3095,128608684,b'Can we do that for a db admin?'
3095,128608705,b'Can we do that for a db admin?'
3095,128609056,b'You can only find this for databases that you have access to'
3095,128609183,"b'This is a db admin operation, but it needs to be checked properly'"
3095,128609347,b'Need to check that you have access to this db.'
3095,128609496,"b""I'm pretty sure that this kind of URL doesn't actually apply the right permissions"""
3095,128609534,b'No validation that you are actually allowed to do so'
3095,128609767,"b'This need to be double checked for permissions, I _think_ that viewing is fine, but need to check'"
3095,128609839,b'Double check security here.'
3095,128609938,b'Check what DatabaseAdmin here does.'
3095,128609988,"b'This is db admin level, I think'"
3095,128610015,"b'db admin, I think'"
3095,128610099,"b'This is server level, probably server admin?'"
3095,128610226,b'Make no sense with regards to `GetStudioFile`  auth'
3095,128610295,"b'@ml054 Need to define what the minimum permissions we need just for error pages, and block the rest fro unauthenticated clients.'"
3095,128610429,b'db admin on what db?'
3095,128610458,b'looks more like server admin'
3095,128618764,b'done'
3095,128618999,b'http://issues.hibernatingrhinos.com/issue/RavenDB-7842'
3095,128619214,b'done\r\n'
3095,128619693,b'Changed it to db admin for now'
3095,128619954,b'done'
3095,128619977,b'done'
3095,128619989,b'done'
3095,128620006,b'done'
3095,128620019,b'done'
3095,128620184,"b'For now, this is done by db admin'"
3095,128620719,b'Done'
3095,128620731,b'Done'
3095,128620892,b'Done'
3095,128620906,b'fixed'
3095,128621117,b'fixed'
3095,128621128,b'fixed'
3095,128621194,b'fixed'
3095,128621313,b'done'
3095,128621326,b'done'
3095,128622446,b'done'
3095,128622455,b'done'
3095,128625707,b'done'
3095,128625995,b'verified'
3095,128626029,b'moved\r\n'
3095,128626287,b'verified'
3095,128626377,b'done'
3095,128626725,b'verified'
3095,128626775,b'verified'
3095,128628795,"b""Here are things that users will probably want to use (bulk insert start, for example), we can keep it active for all, but we need to check that we don't give you operations for dbs that you don't have access to)."""
3095,128628991,b'This can be called during external rep by db admin'
3092,128720105,"b'Shouldn\'t we use `""` here?'"
3092,128727240,b'How much sense does this make now? @ppekrol  @arekpalinski  Thoughts about removing it entirely?'
3092,128727840,b'Need to add the document id here.'
3092,128731430,b'Need to fix the  name'
3092,128731612,b'Why did you make this change?'
3092,128732395,b'This is probably VERY wrong.'
3092,128734655,b'Yuck'
3092,128735028,"b'We do arbitrary sort anyway, I just sorted them as strings.'"
3092,128735564,"b'No, this is fine.'"
3092,128735837,b'Why not teach `ChangeTypeToString` about null?'
3092,128735849,b'yuck'
3092,128739548,"b""If changeVectors are sequential and if we have an index in documentStorage for this then it makes sense, if otherwise not.\r\n\r\nWouldn't it be better to wrap this on client-side with a class? from UX perspective."""
3092,128739815,"b'Change vectors are not sequential. No.\r\nWe have a LOT of code that does scanning by change vectors (replication, etl, subscription, etc).\r\n\r\nHowever, they are all server side and have their own optimizations.'"
3092,128740944,"b'So if there are not sequential, can we return documents from given changeVector in an appropriate order?'"
3092,128742080,"b'Order is a funny thing in a distributed env.\r\nWe can return all the results after a particular change vector, but different servers will return them in different orders.\r\nThat can be expensive and require us to scan the whole db, though.'"
3092,128742626,b'Then we think it does not make sense to have it'
3095,128911764,b'I think DB admin is enough here.'
3102,128922803,b'maybe use Size and rename to UploadedInBytes (maybe Kb?)'
3102,128922815,b'maybe use Size and rename to TotalInBytes (maybe Kb?)'
3102,128922856,"b'I would suggest renaming it to AzureStorageEmulatorFact, it would match naming of other Facts and Theories.'"
3102,128927253,b'Why do we _have_ a default? Why not just require user to specify it?'
3100,128927333,b'What is this used for now?'
3107,129254073,"b'No, this is bad idea. You should read the headers and handle this.'"
3122,129528825,b'!!bucketName && !!bucketName  :)'
3122,129529424,b'Will we have credentails validation or just test connection? '
3122,129531705,b'this is going to test the credentials and the existence of the bucket/vault in the specified region'
3121,129540385,"b'This is nice and mysterious, and likely to repeat on every round, no?'"
3121,129540485,"b'Mystery keep the ops teams on their toes. There is something wrong, but we wont tell you what.\r\nFigure it out on your own.'"
3121,129540733,"b""Need to take timing information into this. We don't immediately switch at the drop of a hat. We need to only switch when enough time (configurable) have passed."""
3121,129540810,b'Why is shutdown a bad flat?'
3121,129540966,"b'Better method name, and need to explain why it is returning null.'"
3121,129552512,b'LoL!'
3126,129669835,b'Should be Security.MasterKey:Path'
3126,129669891,b'Default 30 seconds'
3126,129669916,b'Default 30 seconds'
3126,129669940,b'Typo'
3126,129669974,b'Typo'
3126,129670228,"b""You _say_ it is Posix only, but it isn't. """
3126,129670678,b'Need to include all the standard error that we read so far here.\r\nNeed to kill the process.'
3126,129671765,b'Need to have error handling here if the cert is not valid.'
3126,129671813,b'Error handling over all of this.'
3126,129671882,b'Kill process.'
3126,129672012,"b'the ""please check path & password"" are not needed.'"
3125,129672739,"b""I'm not sure if we can rely on the sort order of the dictionary."""
3125,129672774,b'Typo'
3126,129671598,b'Who is catching the errors here? What kind of feedback would the user get here?'
3131,129825044,"b'What does it means, disabled?'"
3131,129825138,b'todo?'
3131,129825525,"b""We don't need the actual exception, who needs to know what happened. Debugging such things is fun."""
3131,129827384,"b'Create a new instance here, otherwise we are racing.'"
3131,129827526,b'Remove this'
3131,129827538,b'Remove this'
3131,129827548,b'Remove this'
3131,129827586,b'Remove this'
3131,129827691,b'The url here is wrong or the class is'
3131,129828993,b'lol'
3131,129830720,"b'I have no idea, http://issues.hibernatingrhinos.com/issue/RavenDB-7920'"
3131,129830958,b'Removed'
3131,129832069,b'Done'
3131,129832155,b'Done'
3131,129832345,b'Fixed'
3131,129832449,b'Done'
3131,129832528,b'Done'
3131,129832668,b'Fixed'
3131,129836891,"b""Don't need this"""
3131,129836918,"b""Don't need this"""
3131,129839151,b'Removed'
3131,129839179,b'Removed'
3135,130051621,"b'No, this is wrong, we explicitly ask for \':\' for a reasons.\r\nThis allows us to define configuration like:\r\n\r\n```\r\n""Security.Certificate"": {\r\n  ""Path"": ""..."",\r\n  ""Password"": ""...""\r\n}\r\n```'"
3135,130051656,"b'Wrong, same reasoning'"
3135,130052068,b'Why do we need both `AuthenticationEnabled` and `UnsecuredAccessAddressRange`?'
3135,130052276,b'What about IPV6?'
3135,130052522,"b""Why are you doing this check on connection, shouldn't this be done once at startup to see if we can even bind to it?"""
3135,130052638,"b""This shouldn't even be an option here."""
3135,130052828,"b'Checking just `192` is not valid, you need to check `192.168`, same for `172. \r\nSee https://www.arin.net/knowledge/address_filters.html'"
3135,130053062,"b""Wrong, we shouldn't be checking who is connecting to us. We should check the bind ip address and refuse to bind if this isn't valid."""
3135,130053636,b'configuration.Security.AuthenticationEnabled is just a getter checking certs are there. Having a cert set up == authentication enabled.'
3135,130053716,"b'We removed \\ from configuration keys to support ENV variables, but this breaks it again. It should be split into two in my opinion.'"
3135,130054920,"b""Thought it's a typo. Also bash:\r\n```\r\ngregolsky@DESKTOP-3V6F6C2:~$ COLON:TEST=1\r\nCOLON:TEST=1: command not found\r\n```"""
3135,130055048,"b""UrlUtil.IsZeros checks if it's `::` or `::0`. Is that what you mean?"""
3135,130055469,"b""Here we're checking whether client comes from what's set up in `UnsecureAddressAllowed`. Same thing is done in `RouteHandler`. The check whether server url is within that range is in `SecurityConfiguration.Validate()`."""
3135,130056153,"b""OK, I thought apart from server binding validation, we're checking if client comes from proper zone."""
3135,130060784,b'Actually it would be better to just have `.` and enhance/adjust the JSON configuration reader to behave properly. Should not be that hard to do.'
3135,130078052,"b""Yeah, we will only have `.`, but we'll ask ask for that and the full nested path."""
3135,130079596,"b""Why aren't we just using an enum flag option?\r\nInstead of `None | Local` it is `None, Local`"""
3135,130079946,"b""OK, I wasn't aware of that behavior - I'll make adjustments."""
3134,130081695,"b'We want to do that in seconds, rather. Better so we can demo it.'"
3134,130081861,"b'Need to check here if we actually need to do this, if the value is the same, there is no need to go to tx merger.'"
3134,130082305,b'Need to remove the notion of watchers from topology'
3134,130082748,b'Why do you need to reset it all the time?'
3134,130082867,b'This is wrong `lastSuccessfulUpdateDateTime`'
3134,130082912,"b'This is mutated and read at the same time, no?'"
3134,130083159,b'Typo'
3134,130083334,b'fix name'
3134,130083474,b'And up to date'
3134,130083769,b'remove `\\n`'
3134,130084052,"b""This is wrong, we need to add them to `DeletionInProgress` so they'll delete the data properly. See RavenDB-7913"""
3134,130084264,"b""Can be had if the database didn't get the message and is currently updating it."""
3134,130084560,b'Need to make sure this uses `BestFit` as well'
3134,130084680,b'Need to add the replication factor here anyway'
3134,130093234,"b'No, a new instance is created, so we are good'"
3134,130093329,b'Missed that this is the ctor'
3151,130346091,"b""I won't call that endpoint replication pulses, as we want to have single web socket for pulses for:\r\nreplication (internal & external), sql etl, raven db etl"""
3151,130346391,"b""ok, I'll change this and will add more pulses."""
3151,130347836,"b""maybe stick to one word? 'Heartbeat'? It is a bit confusing that we are naming same thing using two different words."""
3145,130242764,b'Will this actually give you the actual content?'
3145,130242789,b'Add the reply content here as well'
3145,130242792,b'Add reply here too'
3145,130242798,b'Add reply here too'
3145,130242804,b'Add reply here too'
3151,130398048,"b""Based on types:\r\nhttps://github.com/ravendb/ravendb/pull/3151/files#diff-7ba6900cefee273c07cc76b10b9c7265R93\r\n\r\nI think naming it hearbeat is not correct, as we need some broader term. Maybe: 'event' , or taskEvent? """
3151,130402288,b'`event` and `taskEvent` are so generic we might as well call them `item1` \r\nLet us cal this `replication/live-tracking` or something like this?'
3154,130403274,"b'No, this is a bad idea, since it forces us to do a _sync_ wait here.'"
3154,130403358,b'Why this logic? We should always use `GetFastestNode` here'
3154,130403392,b'Why? We should just use the fastest node here always.'
3154,130403539,"b'Also, there is no handling of errors here at all'"
3154,130403676,"b""Here you assume that the error is actually going to be something that will raise syncronously, it isn't."""
3157,130531805,"b""I don't like that we are doing it in this manner.\r\nLet us do it the other way around, try to load all those dlls one at a time, and only if successful then you can add them.\r\nOtherwise, next time we add an unmanaged dll, we'lll break it."""
3157,130599943,b'this is going to be expensive to check even once '
3157,130600209,b'An index creation is very rare. And we can cache this statically\r\n'
3157,130633758,b'This is used in a thread unsafe manner'
3157,130634065,"b'this is really strange code, you can simplify it a lot'"
3164,130806904,b'Do not use fields here'
3164,130806975,b'Wrong'
3165,130816190,b'What about case sensitivity?'
3171,130842537,b'what is this?'
3181,130912189,b'Why is that? \r\n`select Country from Users group by Country` is valid way to get all the countries.'
3187,131096878,"b'This is important information that is now hidden.\r\nAdd it somewhere, please.'"
3181,131098988,b'Correct. We can even skip `select Country`. I removed this validation check.'
3188,131095135,b'We are explicitly passing non existent files sometimes in tests.'
3188,131095558,"b'OK got it, let me check.'"
3188,131097479,b'`Default_database_path_settings` and friends'
3188,131106545,"b""Fixed the tests to use an empty settings file. We'd like the user to know if he messed up the config file path."""
3199,131317385,"b'Bad idea, you are losing the stack trace here.'"
3199,131318941,"b'Okay, this is an elegant way to handle this.'"
3199,131319028,"b""Better use a constant, although I'm not very happy about this behavior"""
3199,131319121,"b'Can we call the server impl here, instead of duplicating the code?'"
3205,131350208,b'Why do this?'
3205,131351619,"b'Without this we are staying with Etag = -1 because we are not updating topology at all, so client does not update the topology also.'"
3205,131350294,b'Probably need better message'
3205,131356190,b'Can you suggest something? I was not sure what does it exactly mean that the topology has etag == -1.'
3206,131356883,"b""Is there a reason not to put this by default?\r\nOtherwise, we'll need to restart the service for this.\r\nLet us add this to the info command as well."""
3206,131357490,"b""OK, I'll remove the switch and adjust info command."""
3213,131518759,b'Why does moving this method matters?'
3213,131518775,b'Is it worth it? This is a case where we are 99.999% going to wait.'
3213,131518820,"b'A bit of a big deal, since we are holding native memory in the context, no?'"
3213,131518825,"b'We have the finalizer for cleanup, but that makes things much more complex and delay cleanup'"
3213,131523373,b'That means you can miss it and either not finding there is an object there to reclaim or in the case of allocate create a new one even if a thread has a nanosecond before returned one. Very very very unlikely to happen but you still need the guard to avoid losing objects for disposition. That means that after the clear you have 1 object in the pool instead of 0'
3213,131523389,b'It does. Small amount but measurable'
3213,131523419,"b'Even in waiting cases the allocation is done on the stack, so yes. That single one was 2Gb allocations in 1 minute test'"
3213,131527266,b'Any idea why this is the case?'
3213,131531075,"b'My hypothesis is that ReadForDiskAsync is requiring to do some setup that is forcing anyways the use of an async thread (so it will block anyways), therefore all the extra execution that happens in between becomes essentially free from the latency point of view. '"
3215,131538267,b'Probably need to add something that will wait at the database level as well'
3215,131538286,b'`TryGetValue` ?\r\nAnd what about thread safety here?'
3215,131538322,"b'If this throws, we leak the request executers'"
3215,131538328,"b'If one node is down, we always fail, even though we were successful'"
3199,131539129,"b""Yeah, but we've decided to use this command for subscription definition updates in the first place. Do you think that we need to have a special command for this?"""
3217,131544506,b'Should we reset the timeout here?'
3199,131544680,"b'Better add another property to the command, rather.'"
3199,131544687,b'`bool KeepCurrentChangeVector`'
3220,131550751,"b'You just moved the concurrency issue around.\r\n`List<T>` is not thread safe. Need to see if there is _any_ multi threaded access to it, and there likely is.\r\nAt a minimum, you have a thread reading it (the debug endpoint) while it is being modified.'"
3220,131550755,b'Same'
3224,131623881,"b'@ayende \r\nThe reason I had to force topology update here was that both typologies, the previous and just retrieved ones, have `Topology.Etag == -1` so the new one was filtered out here:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Client/Http/NodeSelector.cs#L54\r\n'"
3224,131624795,b'@ayende\r\nThe need to increment the index value by `1` to make things working was tricky. I found it in a different test (https://github.com/ravendb/ravendb/blob/v4.0/test/RachisTests/Cluster.cs#L58).\r\n\r\nCannot we handle it better?'
3224,131624996,b'It appears to be related to `DatabaseRecord.DeletionInProgress`. Is it?'
3224,131626192,b'It is. When you issue a deletion command it move the nodes to the DeletionInProgress Dictionary and then every node which delete the actual data issue another raft command to remove himself from the dictionary. And only after all nodes are removed from this dictionary the record is deleted'
3224,131627098,"b""OK, I see. That means `DeleteDatabaseOperation` isn't able to return a raft index which that will guarantee that db is deleted from all nodes, right?"""
3224,131628904,b'that is right'
3222,131632469,b'Typo'
3226,131670551,b'Better to create this as  a singleton. '
3235,131880038,b'Where is the db name now?'
3235,131880123,"b'Should be at the end of the file name, but we do need it to tell where this came from.'"
3241,131955969,b'Use `typeof(bool)` instead of comparing strings.'
3241,131956123,"b'Need to verify that this is a collection, not just a property called `Count`.'"
3254,132179058,"b'`Legnth` for array is already supposed, right?'"
3254,132179203,b'You can replace all of this with: a check on `IEnumerable`'
3249,132183365,"b'select DueDate, count() as TasksPerDate\r\nfrom ToDoTasks(Completed = false)\r\ngroup by DueDate\r\n\r\n'"
3260,132183740,b'Why is this a time unit?'
3260,132183785,b'Per server? Per cluster? Per database?'
3260,132183973,b'How many subscriptions did you run on your machine before it became a big issue?'
3250,132184447,b'I wonder if this can be somewhat responsible for our random timeouts in tests?'
3249,132194176,b'@ayende ?'
3260,132205249,"b'I didn\'t try to ""stress"" it yet. But we did want to limit the number of concurrent connections, maybe 10 is a bit low for a default value.'"
3249,132219601,"b""Sorry, that was a bad copy / paste.\r\nwhat I _meant_ to say is that it is better to add a test to ensure that this doesn't slit to prod"""
3260,132220496,"b'Yes, but we need to be aware what the actual limits are\r\n'"
3261,132221488,b'What is the meaning of returning null here?'
3254,132224240,"b'yes, Array.Length is supported'"
3254,132224255,b'fixed'
3264,132301272,"b'Are there any usages of this, if not, just kill the prop.\r\nAlso, I think we can just use `ConcurrentDictionary<string,Lazy<T>>` here instead, no?'"
3264,132301529,"b""Shouldn't we iterate and return the results instead?"""
3264,132301562,"b""Shouldn't we iterate and return the results?"""
3260,132425998,"b""Apparently it's not that easy.. I've used the help of 5 of our teammates, and managed to run 1000 concurrent subscriptions, with a pretty good throughput (don't have the exact number, but it's more than a hundred empty documents per subscription. I think that I'll set the value to 1000 for now. Something else that bothers me is the client side cost: every 100 subscription connections consumes ~25% of the cpu and ~4 gigs of memory, but I think that we'll leave that to RavenDB-7283 (subscriptions benchmark issue)"""
3270,132433869,b'This piece of code makes queries like `count() > 100` are parsed properly. Note that in this case both: `count()` and `>` are operators: `OperatorType.Method` and `OperatorType.GreaterThan`'
3270,132475249,"b""Shouldn't the field name here be `count()` ? How do we determine the default field names here?"""
3270,132550993,"b""We've been always storing the result of count operation in the auto map-reduce index as `Count` field. So if the alias isn't specified then we return it as it's stored in the index. We assign it here:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/Queries/QueryMetadata.cs#L263\r\nIt's rather just a convention than a requirement. I like it since `Count` looks better in the output than `count()`. Also if we have `select sum(Price) from Orders ...` we don't return `sum(Price)` but `Price`\r\n\r\nDo you prefer to rename the default name from `Count` to `count()`?\r\n"""
3277,132620835,b'no need for this constructor :)'
3277,132620945,b'by convention in v4.0 we use variable spinners for holding spinners see:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Studio/typescript/viewmodels/database/indexes/indexes.ts#L38'
3277,132638806,b'done'
3277,132638813,b'done'
3276,132642138,b'Why would this break the tests?'
3276,132652073,"b'It was moved to a different handler but this code left here as well so we had duplicated route ""/admin/connection-strings""'"
3284,132651197,b'Why the cast through decimal here?'
3270,132657532,"b'No, that is fine, I just wanted to be sure what we are doing here.'"
3284,132657860,b'The conversion from float to double adds garbage to the converted number.\r\nhttps://stackoverflow.com/questions/5986980/convert-float-to-double-loses-precision-but-not-via-tostring'
3284,132658428,"b'Add that as a comment, please.'"
3284,132663366,"b""Actually this is not a good solution. This will overflow when float.MaxValue.\r\nIs there a reason why we aren't using float?"""
3284,132771184,b'Because json numbers are always doubles.'
3290,132772296,b'This is a nice hack.\r\nIs calling `IsSet` also that costly?'
3277,132659855,"b'Not a good idea, one of the first things that an admin will want to do is to set the license, you want this to call `EnsureNotPasssive`'"
3277,132773931,"b""Shouldn't be using `sodium` here to do this? That would be simpler to handle, I think."""
3277,132774395,"b""Shouldn't we also have some code to handle the behavior of license disactivation?"""
3277,132774474,b'Where is the logic for handling licenses?'
3277,132774732,"b""What isn't this using a constant? And it probably need to use case insensitive match."""
3277,132774750,b'Probably need case insensitive match'
3277,132775111,b'What is going to read this ?'
3277,132775220,b'Need to handle validation here.'
3290,132781761,"b""IsSet shouldn't because that only reads a variable. However that still won't solve the issue. Because wait will bail anyways when someone already marked it."""
3290,132781817,"b""IsSet shouldn't because that only reads a variable. However that still won't solve the issue. Because wait will bail anyways when someone already marked it."""
3296,132823717,b'Please avoid relative imports. '
3296,132823745,"b'Btw. This import is not required, right? '"
3300,132841241,b'@jbayardo This is another thing that will probably need your attention'
3296,132842730,b'done'
3308,132849508,b'I assume that this is meant to be `Info` ?'
3309,132875532,b'What is going to actually dispose the request executers that you created here?'
3309,132888770,b'this code?\r\nhttps://github.com/karmeli87/ravendb/blob/fc55be770a1bcdfd649e4bfaa887d8d1c81dc362/src/Raven.Server/Web/System/AdminDatabasesHandler.cs#L270'
3309,132892521,"b'This code is now running _while the request is running_, this is probably not a good idea.'"
3312,132919545,b'And what if this threw something else?'
3314,132931299,"b""Why do you have this? We don't want to special case anything else."""
3314,132937041,b'removed and adjusted studio '
3316,132994564,"b""I think that it betters to use a different version number here, to be sure that we aren't mixing them."""
3316,132994820,"b""The error we'll get is an authorization exception, no? That is pretty misleading."""
3315,132995760,"b'Should there also be ""specific change vector"" here?'"
3315,133042258,"b'No, that\'s a way to feed studio\'s ui with values, a ""SpecificChangeVector"" value might confuse ClientAPI\'s users'"
3316,133161146,"b'How is it better?\r\nNobody should ever set this with a number, they will use the dictionary value.\r\nHaving 4 different properties is more error prone.'"
3324,133161314,b'What is the difference in the passed context here with regards to before?'
3324,133161372,"b""If you aren't using this, why are you checking it and actually getting it passed on?"""
3324,133161810,b'Need to ensure we dispose the `tmpCtx` in case of error'
3316,133162379,"b'The idea is that if you copy / paste the number from a different protocol, it will not match'"
3316,133162735,"b""I was trying to avoid sending two messages.\r\nI'll see if we actually do anything with the response, i would still want to use this message and not have to use two messages maybe just adding a Boolean stating the type of the error"""
3316,133163326,"b""Change the logic so ti isn't auth successful but status?"""
3328,133181739,b'Use `AuthorizationFailed` here.'
3328,133181824,"b'Avoid the line break here, it messes some error formats'"
3332,133271926,"b'Why only set it if the batch is done?  We want to inform waiters that it is done, they will check if this is enough.'"
3332,133272147,"b""Didn't you just set it to null on like `800`?"""
3330,133273737,b'Are we handling the case of a node going away here and not replicating _to_ it?'
3330,133273875,b'What can fail here?'
3330,133276572,"b'Updating the cluster topology increase the raft index, so we had no problem in the case of not replicating *to*. The problem was to handle this on the passive node.'"
3330,133276930,"b""What will cause us to _stop_ replicating to a  removed node?\r\nThe node is still in the topology, and I don't think the Loader will have any reason to remove it."""
3330,133277136,b'We notice it is not in the cluster'
3330,133277390,b'where is that done?'
3330,133277596,b'https://github.com/ravendb/ravendb/blob/888a9538d659374fc585226fce1248492b7f4e5f/src/Raven.Client/ServerWide/DatabaseTopology.cs#L111'
3334,133379321,"b""Shouldn't this be a per database cache, instead of global?"""
3334,133379437,b'How is concurrency handled here?'
3334,133379752,"b'If we have a new index that supersede the previous index?\r\nFor that matter, are we certain that the now shared `Metadata` is safe to share among threads and databases?'"
3334,133385407,"b""1. I'm assuming that as long as index exists, it can be used to get the query results.\r\n2. You are right, we cannot share metadata between the databases.\r\n"""
3334,133385450,b'Yes.'
3334,133388490,b'Not sure that I follow?'
3334,133390897,b'Done'
3334,133390942,b'2. Done'
3334,133392593,"b""If there are two threads trying to set the same location at once.\r\nOr if there is a hash collision. That is actually fine, because we'll get last write wins, but two queries that have the same hash will always kick one another off the cache."""
3338,133392951,b'You are losing the original stack trace here.'
3338,133393117,"b""That isn't a good idea, we need to wait until:\r\n* timeout\r\n* _any_ task has completed successfully\r\n* all tasks failed"""
3349,133446007,"b'I think we have to dispose this instance as well, no?'"
3350,133451979,b'Why do you care for that?'
3350,133452163,b'Where are the errors logged?'
3350,133452607,"b'Here you can use the certificate file name, but it may be confusing for the user if they are looking at file name, though.'"
3350,133452745,"b'Use the `Url` class here, instead of parsing via regex.'"
3350,133453074,b'Use `Path` here'
3350,133455915,b'To display it in the studio'
3350,133456442,b'here:\r\nhttps://github.com/grisha-kotler/ravendb/blob/560828dae8511e4ef4fb623666d4df1114ea48ef/src/Raven.Server/Documents/PeriodicBackup/PeriodicBackupRunner.cs#L290'
3332,133460345,"b""Because it may go through that flow even if the batch is not completed, and we don't want to let them know if we are just adjusting the memory usage because of a low memory notification, as it is just an internal process.\r\n\r\nShould I change this back to the previous way? waiters would get notified even in low memory notification cases."""
3332,133462899,"b'This is run before that: line 788 re-throws a OperationCanceledException, which will be caught by this handler. After this handler runs, the finally block from line 791 will run, setting this variable to null.'"
3350,133463685,"b'Since you are already showing in studio, show the file name here as well'"
3352,133464227,"b""Not really happy with this. It depends on us remember that we are doing string comparisons on the values.\r\nBetter to have an explicit state field that we'll check"""
3332,133464672,"b'They are notified, yes, and that is fine. They can check if you progressed enough to hit their target'"
3350,133485051,b'done'
3355,133631178,"b""Please notice I've changed endpoint + permissions here. """
3355,133631559,"b'Yes, that is fine for getting the data.'"
3355,133631596,"b'Why are you calling this, then setting the status directly?'"
3355,133631975,"b'To remove: \r\nHttpContext.Response.Headers.Remove(""Content-Type"");\r\nsince having empty response with cotnent type set to applicaiton/json creates exception in jquery. '"
3359,133688668,"b""Wrong approach, instead of doing that on the client, when the server side we delete a database, _there_ we'll wait"""
3357,133689170,b'We already know it is not null here'
3357,133689205,b'Use `Count` instead of `Any()`'
3357,133689618,b'Use `Count`'
3357,133689749,b'And if we added some additional nodes here? This can only happen if both all nodes and deletion in progress are empty'
3357,133689794,b'Use `Count`'
3362,133717865,b'How can this happen?'
3362,133722827,"b'I have changed it to run over indexes by name.\r\nJust for completion, the way this happened was because we inserted a faulty index under the same name as the original when we created it.'"
3362,133723291,b'Probably need to remove the comment'
3367,133778587,b'Are we seriously not doing any actual validation of this on the server side?'
3364,133779335,b'Is there a reason not to call `ToString` here?'
3364,133779720,"b'What if the database exists in general, but not on our node?'"
3365,133780585,b'use `timeToWaitSec` or something like that.'
3365,133780803,"b'Move this into the state machine, we want to be able at some point to use this for other stuff rather than just the cluster.'"
3365,133781043,"b'No, we already have a way for us to wait until the cluster is updated, we can just use that.'"
3365,133781690,b'This is actually opened up to a race condition. If between the time this run and the command executed stuff changed...'
3367,133880045,b'It appears so. Perhaps we should add such validation to all relevant requests?'
3367,133965189,"b'Yes, doing client side validation is a no go for us'"
3381,134233759,b'We need to drop the `In` there.'
3384,134205227,b'Failed because of what?'
3384,134233345,b'Why do we need to special case it so deeply in our code?'
3384,134233360,b'Same'
3382,134217475,"b""Operator? (upper case).\r\nWhy we don't have enum here? """
3382,134217549,b'+ maybe use nameof? '
3382,134217675,b'code duplication? Same here: Operator'
3382,134232890,"b'Yes, changing to enum'"
3389,134301593,"b'There is no need to do this here, we just parse this as a _string_, so we know that this is valid.'"
3389,134301876,"b""This isn't actual prod code, but it doesn't hurt"""
3389,134301977,"b'We just read this as a string, no need to do validation'"
3389,134302154,b'We just read it ourselves'
3377,134155302,"b'This overload of `InvalidQueryException` does not include the query text and parameters. Its existence might be confusing however we need it to properly deserialize the exception on the client side. \r\n\r\nWe have `InvalidQueryException(string message, string queryText, BlittableJsonReaderObject parameters)` to throw on the server.'"
3377,134155449,b'Typo: EndssWith -> EndsWith'
3377,134157220,"b""I don't think this test should be removed - it operates on indexes, not transformers"""
3377,134159568,b'Can we mark it as private?'
3377,134162054,b'Fixed'
3377,134169099,"b'Yes, actually. See PR: https://github.com/ayende/ravendb/pull/4664'"
3377,134180687,b'Restore candidate:  here we are testing   + - / % operators of `DynamicNullObject` and check results return `null` then'
3377,134181116,b'Restore candidate: one function can be called from another'
3377,134182666,b'Restore candidate? due to `serializer.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;`'
3377,134184967,b'Restore candidate: create a test to make sure function can access metadata from a doc'
3377,134187005,b'Restore candidate: we got rid of listeners in favor of events. Should we have events before/after conversion as it was used here?'
3377,134187547,b'Restore candidate: spatial + transformation function combination in the query'
3377,134189129,b'Restore candidate: Missing feature: Collation - not sure what needs to be done regarding this'
3377,134189901,"b""Restore candidate: in a modified version, due to `SetAllowMultipleIndexEntriesForSameDocumentToResultTransformer` usage? I'm not sure if that's still relevant"""
3377,134190799,"b'Restore candidate: same as previously, due to spatial usage here'"
3377,134191228,"b""Restore candidate: due to the listener usage - let's rewrite it to use events"""
3377,134192087,"b""Restore candidate: no idea how it could return wrong results due to transformer usage, however we'll be better off having test checking multi map reduce index + query defined transformation"""
3377,134194031,b'How to achieve that in RQL? I mean `orderby` previously handled by the transformer using a paramater'
3377,134194786,b'Restore candidate: make sure we properly deal with dicts of enums '
3377,134195118,b'Restore candidate: I think this one is worth to be restored since it deals with dynamic fields'
3377,134197403,"b'Restore candidate: this test caused request timeout issue originally, also FullLogTransformerDelay test contains an assertion for the steaming duration with transformation applied'"
3377,134198035,b'Restore candidate'
3377,134199153,b'Restore candidate: make sure we properly handle numeric parameters in transformation function'
3377,134199811,b'Added'
3377,134199828,"b'Restore candidate: no idea why it was done like here, but we need to add [Fact] to `IncludesShouldWorkWithMoreLikeThis` , `TransformersShouldWorkWithMoreLikeThis1` and `TransformersShouldWorkWithMoreLikeThis2` in `MoreLikeThisTests.cs`'"
3377,134199884,"b'No, we already have a way to do function calls and they can recurse if needed.'"
3377,134200236,b'Okay. It was moved to Slow tests while `MoreLikeThisTests.cs` is in FastTests. Needs to be restored.'
3377,134200267,b'Restore candidate: needs to be restored'
3377,134200766,b'Do we want to offer built-in `stripHtml`?'
3377,134200852,b'Restore candidate: it verifies `DynamicExtensionMethods.StripHtml` is working during _indexing_'
3377,134201999,"b""Restore candidate: duplicated ids send to the server, results don't contain duplicates"""
3377,134203133,b'Restore candidate: here we test more indexing of referenced docs that transformers. '
3377,134203345,"b'We can just remove this lines and three `Assert.Equal(""Last Name x"", companies[0].Employees[x]); ` assersions below'"
3377,134204871,b'OK. We just need a test which verifies that'
3377,134206167,"b""Now that json.NET is not part of our code, we don't actually need it."""
3377,134206450,b'Done'
3377,134206727,b'http://issues.hibernatingrhinos.com/issue/RavenDB-8201'
3377,134206900,"b""I don't think so, they can override the convention event and use that instead"""
3377,134206921,b'http://issues.hibernatingrhinos.com/issue/RavenDB-8201'
3377,134207093,b'This is basically creating a ton of analyzers for no real benefit. Users can just define a custom analyzer on their own.'
3377,134207325,"b'No, I killed that feature entirely. A function can only return an object, never an array.\r\nThis make it simpler for us, and users can send an object with array and operate on that. \r\nAlso makes paging much easier.'"
3377,134207364,b'http://issues.hibernatingrhinos.com/issue/RavenDB-8254'
3377,134207371,b'http://issues.hibernatingrhinos.com/issue/RavenDB-8254'
3377,134207390,"b""But I'm not expecting any issues there."""
3377,134209013,"b""You don't. We won't allow to send more results from the function.\r\nYou can send an object, what you do with the object is completely up to you"""
3377,134209294,b'Make sense'
3377,134209629,"b'Yeah, just in case'"
3377,134210782,b'Actually this test was passing. There was no need to skip it.'
3377,134211838,b'Added'
3377,134212532,b'Added'
3377,134212865,"b'Actually, `ResultTransformerMetaData` already does that :-)'"
3377,134213332,b'Restored'
3377,134213405,b'Added'
3377,134215296,b'Added'
3377,134215367,"b'Yes, this actually exposed an issue: RavenDB-8257'"
3377,134216107,b'Added'
3377,134216184,"b'Not needed, we are already sending them via the exact same mechanism as we send query params, so that is covered'"
3377,134224346,b'http://issues.hibernatingrhinos.com/issue/RavenDB-8229'
3377,134224483,"b""I don't think so. They can write a regex there."""
3377,134225106,"b""I removed this entirely. It should be done by an analyzer, we shouldn't provide it. Note that users can still add via the code addition feature, no need for us to handle this."""
3377,134225740,b'added'
3377,134226418,b'added'
3392,134457322,b'Why not `nameof` ?'
3392,134460894,b'Add explanation here about what needs to be done'
3391,134463039,"b'Why not use `search(name)` here, so it would match the query?\r\n'"
3391,134468479,"b""We have two options here: either match the indexing option - `Analyzed` or the querying function - `search`. I've chosen the first one since it's the name of the field stored in the index according to the indexing options but `search(name)` also works for me. \r\n\r\nWhat do you think about renaming indexing options: `Analyzed` -> `Search`, `NotAnalyzed` -> `Exact` to match querying terminology?"""
3391,134470344,"b'I like that idea, then we are fully consistent across the board, go for it'"
3395,134519549,b'Why are you filtering the `IPV6LinkLocal` ?'
3395,134524550,"b'You are right, this is redundant. We already doing this inside the *GetListenIpAddresses* function'"
3402,134744450,"b""I think we need to give it a name that isn't us. Otherwise the user might now realize that this it the relevant cert."""
3402,134744499,b'Same logic here.'
3402,134745208,"b""Yeah, these scripts are just to make it easy to create certs for testing. We'll be improving them to make them useful for users."""
3402,134745775,"b""I'm assuming we'll end up with these in our docs / dist, so we need to remember this"""
3402,134746584,"b'OK, I added a ticket for that.'"
3403,134750625,"b""This is not a good idea for this here.\r\nAt this point, we are actually running under lock, and that means that we can stall all queries that are coming in because they can't open the tx.\r\nThe problem is that RecreateSearcher / etc are all pretty expensive operations, and not stuff that we can do under lock"""
3403,134753735,"b'Hmm.. I just moved this part of code inside `try catch`. I haven\'t changed the logic regarding `RecreateSearcher` call. \r\n\r\nNote the comment below ""we need to recreate it after transaction...."". I don\'t see how it could be called differently.'"
3403,134756971,b'Also see our discussion here: https://github.com/ravendb/ravendb/pull/1053'
1053,134759231,b'Implemented in https://github.com/ravendb/ravendb/pull/1060'
3408,134945793,b'Is there a race condition here?'
3408,134953258,b'Need to remove this'
3408,134953985,"b'This is a bad idea, you just increased the test times in 5 seconds.\r\nInstead, let the observer tell you when it is done'"
3408,134954009,b'Same'
3408,134954029,b'Same'
3398,134670285,b'Are you sure that the position & number of arguments match between them?'
3398,134670399,b'Please add comments here showing the C# you are matching and the JS that is being generated.'
3398,134670598,"b""It would be better to make these into functions, not static values.\r\nA major issue here is that we are caching the engine, so that can't be made to work with statically cached values."""
3398,134670637,"b'Why this computation, you can just use `DateTime.UtcNow`'"
3398,134670705,"b""This works, but I'm wondering how useful that would be.\r\n@maximburyak Comment on actual usage?"""
3398,134679288,"b""yes, as long as it's not one of the DateTime() overloads that receives a Calender and/or DateTimeKind arguments."""
3398,134679613,"b""I tried it first and it didn't work, the value was DateTime.Now"""
3398,134690605,"b'I think that we better keep it as a value, especially because of the Jint (or any other) costs of calling a funciton. The ""prepare engine"" funciton is called anyway, even in the new implementation using the \'Initalize"" method'"
3398,134692054,"b'About actual usage: that\'s nice and readable and very convenient for basic usage.\r\nBut\r\nI think that now that we are pushing much more javascript to our api, maybe we should expose it more, rather then hiding it. It\'s important both for ""educational"" and api consistency reasons. Moreover, we\'ve seen in the past that duality between ""basic"" and ""pro"" APIs hides the true potential of tools from our users.'"
3398,134750963,"b'Can you build it inline? If we call it each time, that can cause a lot of allocations'"
3398,134751117,b'Typo in comment'
3398,134751234,b'needs to be `new Date()` here.'
3398,134751321,"b'No, you are recording the time you are doing this, you need to record the time you actually invoked it.'"
3398,134768097,b'Cannot do that.'
3398,134768146,b'Still allocating a lot'
3415,135071693,"b'Why do we need to use `SetReeponseRaw`, why not let the ReuqestExecuter do the parsing for us?'"
3415,135071930,"b""Need a better url, just unique isn't good enough.\r\nHow about `/cluster/cmpxchg` ?"""
3415,135072089,"b""This is meant to _implement_ unique constraints, but it have far wider applications.\r\nWe shouldn't limit ourselves in the naming, use something like `cmpxchg` or `CompareExchange` instead"""
3415,135072216,"b""Nope, that is wrong. This is us getting a request from a node that think that _we_ are the leader.\r\nIf we aren't, we should throw."""
3415,135072504,"b'Um, no. We need to tell them about an exception that happened _when this was going on, for example, the concurrency exception should be reported there.'"
3415,135072584,b'Rename'
3415,135072717,"b""I'm not seeing any handling here for sending this over the wire via `InstallSnapshot` ?"""
3415,135072818,"b'For that matter, where is this table created?'"
3415,135126136,b'In the Initialize'
3415,135126359,b'This exception can occur during notification. If we have  concurrency exception we throw it during the apply.'
3415,135127842,"b""I think we scan the entire voron file and send the structures with the relevant name. \r\nWhich in this case I've named them both 'Items'. ( Not sure though if I need different names)"""
3415,135131084,"b'You cannot have two objects with the same name, that would cause corruption'"
3426,135272054,b'This will probably not be applied for netstandard2.0'
3426,135272477,b'IIRC you can use:\r\n```\r\n<DefineConstants>$(DefineConstants);VALIDATE;</DefineConstants>\r\n```\r\n\r\nThis also will be applied only to netstandard1.3'
3426,135272520,"b'Good catch. I  did this when we were already on netstandard2.0, wondering why it didnt applied it at the same time. '"
3426,135272779,"b""Probably removing '$(TargetFramework)' from condition will work for you."""
3426,135273158,b'Note that Sparrow and Client are compiling for netstandard1.3 and 2.0 now.'
3426,135273564,b'Apparently it copied it from the Release which has:\r\n``` \r\n<DefineConstants>TRACE;RELEASE;NETSTANDARD1_3</DefineConstants>\r\n```'
3422,135303758,b'typo'
3422,135304391,b'you can use dictionary<string> type here and in all usages. '
3428,135391012,"b""@redknightlois can you check if this is what you wanted? I've merged both of the DefineConstants together."""
3422,135403324,b'Fixed'
3422,135403403,b'Changed to `dictionary<string>`. Thanks.'
3415,135412734,b'Why is this randomly in the `DatabasesHandler` ?'
3415,135412737,b'Same'
3432,135455863,b'String has includes method :)'
3432,135458309,"b""I expected it to have `Contains`... thanks, I'll update the code."""
3432,135466984,"b""Reverse the logic, if the collection name isn't just A-Z, 0-9 _, then we need qoutes."""
3432,135470644,"b'What other values should be escaped? (other than eascape characters, which contains `\\`)\r\nCollection names in other languages are just working.'"
3432,135471101,b'IsLetterOrDigit ?'
3432,135475323,b'Added to the todo list.'
3438,135514221,b'Missing `NewChange`'
3438,135514257,b'Missing NewChange\r\n'
3438,135514278,b'Missing NewChange\r\n'
3435,135528742,"b""What about this, isn't this `key()` now?"""
3435,135528791,"b""shouldn't this be lower case and use the constant?"""
3435,135529935,"b'No, this is creating a\r\n```Id(document)``` method call\r\nto https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/Indexes/Static/StaticIndexBase.cs#L60'"
3435,135530165,"b'Hmm, I think that you are right... @arekpalinski ?\r\nI will create a separate issue so we can review all other index fields.'"
3419,135268291,b'Is it always ```.AlwaysLow```? Does it make sense to have a different construction?'
3419,135271250,"b""We can't guarantee it will be always low; we couldn't either with the previous construction. Do you have any better idea in mind?"""
3419,135271869,"b'Not really, I was just wondering if it would make sense to call that differently. @ayende what do you think?'"
3419,135298274,"b'For reference, our convention is to use ` == false`'"
3419,135298625,"b""I'm concerned with the `XxxOrDie` here. The previous code didn't have issues with calling this multiple times.\r\nHaven't actually got to these methods yet, but I'm concerned that this can be called twice and kill us.\r\nIn general, there is nothing that should prevent us from setting `_hadRealIndexingWorkToDo` to `false` twice."""
3419,135298989,"b""General comment regarding dispose, in general, we are fine with calling dispose twice, and we should guard against this, not throw.\r\nI noted that the places where you replaced this in `OrDie` didn't handle that already, so we are probably not calling them twice."""
3419,135299428,"b'You must not do this here. This will kill the entire process if `OrDie` is called, since no one is catching the exception'"
3419,135299602,b'Need to include what the operation was.'
3419,135299922,"b""I'm worried about people passing this around and not realizing that this will copy"""
3419,135300166,b'What is AlwaysLow? Better to give it a name like `None` '
3419,135300422,"b'Yes, `None` or something that say `WillNeverBeSet` will be a better option here.\r\n`AlwaysLow` made me think it was related to the low memory handling.'"
3419,135318443,b'This will kill the app if `OrDie` is thrown'
3419,135318664,"b'For example, we have concurrency between calling `Raise` here and the call from `Set`.\r\nBoth will call `LowerOrDie` and one of them will die'"
3419,135318761,"b'Just checking, but is this thread safe?'"
3419,135319614,b'Renamed it to None and added a comment.'
3419,135320899,"b""Added a warning in caps to prevent it.\r\n\r\nAnother thing I could do is add a VALIDATE check, I'm thinking of something along the lines of:\r\n\r\n- Every instance holds a `class FlagWatcher`, which receives `this` as a parameter to the constructor.\r\n- Every access to the internal variable is notified to the `FlagWatcher`, along with the instance that is doing it.\r\n- If the instance is not the one that created it, then it kills the process.\r\n\r\nThis should help ensure no one is copying it. Do you have any other idea?"""
3419,135321079,b'Renamed it to None and added a comment.'
3419,135321186,b'No one will read the warning :-)\r\nThe idea of adding this as `VALIDATE` / `DEBUG` would be better'
3419,135321343,b'Done.'
3419,135324997,b'Done. Both will check for .Raise before going into the function. Whoever raises it first will also go into the function and end up lowering it.'
3419,135325260,b'Replaced all .RaiseOrDie or .LowerOrDie for their not dying alternatives (which was the original behavior in all places anyways). Functions are left there so that people may start implementing with stronger invariants in mind.'
3419,135325279,b'Replaced all .RaiseOrDie or .LowerOrDie for their not dying alternatives (which was the original behavior in all places anyways). Functions are left there so that people may start implementing with stronger invariants in mind.'
3419,135325287,b'Replaced all .RaiseOrDie or .LowerOrDie for their not dying alternatives (which was the original behavior in all places anyways). Functions are left there so that people may start implementing with stronger invariants in mind.'
3419,135325303,b'Replaced all .RaiseOrDie or .LowerOrDie for their not dying alternatives (which was the original behavior in all places anyways). Functions are left there so that people may start implementing with stronger invariants in mind.'
3419,135331504,b'Changed all usages of IsRaised to the implicit conversion and fixed all usages to obey to the coding convention'
3419,135334199,"b'Will implement this on Monday, turned out to be harder than I expected.'"
3419,135334797,"b'It should be. The _items array is not written to at any point after construction, and the internal stacks are ConcurrentStack, so they should be able to handle multiple threads going through the stacks and poping elements out.'"
3435,135715149,"b'`__reduce_key` is _hash_ of the reduce key values, we also have `__reduced_val` which is the actual object that we group by so it can be called `key()` now'"
3435,135715790,b'so let us call `__reduce_key` `hash(key())` ? :-)'
3446,135717362,b'We are using 0 - 1000 range as the seed of `Random`. Maybe take advantage of:\r\n```\r\n[Theory]\r\n[InlineDataWithRandomSeed]\r\n```'
3446,135717498,"b""This way we won't be limited to only 1000 cases tested"""
3435,135718442,"b'yes, however `hash(key().Values)` would be more exact :) '"
3435,135719974,b'so maybe `hash_key_values()` ? '
3435,135724036,b'I prefer `hash(key())` - shorter and it expresses what it does under the hood pretty well'
3435,135724140,b'go for it'
3432,135987383,"b'Done, currently only for English words but we might add more to the regex:\r\nhttps://github.com/fitzchak/ravendb/blob/v4.0/src/Raven.Studio/typescript/common/queryCompleter.ts#L470'"
3468,136046280,"b'I think that we had a race here, stats are written after indexing run, so IsStale could be false, but stats were not yet updated.'"
3468,136055394,"b'Yes, but this is the case even if we wait, because the stats are updated from multiple locations in different times'"
3468,136055596,"b""Didn't you just rename this property?"""
3467,136054724,"b'Same issue, this is too generic, need to include the ConflictsId or something like that.'"
3468,136061616,b'This is for 3.5 -> 4.0 smuggler import'
3468,136061864,"b'Okay, best to add a comment to explain it'"
3468,136065228,b'This whole class is doing a lot of 3.5 -> 4.0 migrations and IIRC was created for this purpose.'
3473,136087840,b'All of them seem to be nice candidates to be put into a separate category `Http`? Then we can name them `Http.MaxRequestBufferSizeInKb ` etc \r\n\r\n'
3473,136088557,"b""Let's use `TimeSetting`, then you can avoid `TimeSpan.FromSeconds()`. Also for consistency with other names let's name it `MinDataRateBytesPerSec`"""
3473,136088975,"b""We've got `Size` for dealing with such settings"""
3473,136136013,"b'Yes, that would be a good idea.'"
3475,136211164,"b""Should be 'Prettify' ?"""
3475,136258447,b'Google say yes'
3476,136263384,b'can remove transformers from comment here'
3476,136263793,"b'Please have a test just for this smuggler functionality, aside from periodic backup'"
3476,136265723,b'done'
3476,136266450,"b""I tested it in periodic back because that we only export and import tombstones for incremental backups. And we don't have for now `store.Smuggler.ExportIncremenalAsync()`."""
3476,136266978,"b'okay, let create an issue to get to it before RTM'"
3476,136268957,"b""We have this issue: http://issues.hibernatingrhinos.com/issue/RavenDB-7931\r\nand I don't think we want to create ExportIncremenalAsync method. Do we?"""
3476,136269452,"b""okay, that's enough"""
3474,136094640,b'Need to save identities here. Will do that tomorrow.'
3474,136136482,b'What if we have a _lot_ of them?'
3474,136136992,"b""This assume a single object holding all identities per database, right?\r\nThat is going to be a problem if we'll have users with thousands of identities. Better to use a value per identity per db.\r\nSo the key is going to be `db/db-name/identities/identity-name`.\r\nThe idea is that deleting the db will also delete the identities."""
3487,136348937,"b'Better to make the request, then fail it without additional retries.'"
3487,136349020,"b""Same, make the request so they'll get the actual error"""
3487,136349088,b'Same'
3485,136510975,"b""Change this into an object.\r\nWe'll want it to be `NodeLicenseDetails` or some such, and likely move more stuff there."""
3485,136511066,"b'This is almost always a bad idea. This is an `async void`, no one is waiting on this.\r\nMeaning that an error here will be thrown away'"
3485,136511177,b'An error here can kill the entire server'
3485,136511256,"b'Concurrency handling here, what prevent two threads from running this?'"
3485,136511339,"b'What is `MaxCores`, the maximum number per node in the cluster?'"
3485,136511390,b'Concurrency handling is needed here'
3485,136511570,"b""Why this line? If I have a 6 core cluster licenses, and I have 3 nodes, I want to be able to have a node with 4 cores and 2 with 1 core each.\r\nThis doesn't seem to allow it to follow the same RAM allocation."""
3485,136511692,"b""`MaxRamInGB` isn't matched to `MaxCores`, I think.\r\nThat is the total GB on the cluster, but `MaxCores` was previously used to limit a single node"""
3485,136511981,"b'Why wait like this? If we are held up there, we can give up and let the other one handle this, no?'"
3485,136512291,b'What if we added a node and added a new one? That will also have the same count.'
3485,136512397,"b""I don't like the term `MaxCores` and `MaxRamInGb`, better to call is `ClusterCores` and `ClusterRamInGb`"""
3485,136512510,"b'So I can add an unlimited number of cores by having a lot of nodes in the cluster, with a single core each?'"
3485,136512569,"b'We are known to be the leader, pretty sure we can just add that to the Raft cluster and not have to be async.'"
3485,136512608,b'Where is this exception shown?'
3485,136512690,b'Who waits on this method? what happens if this never returns?'
3485,136512840,"b'Verifying, this goes over HTTPS only, right?'"
3485,136513079,"b'You might have not actually got the semaphore, though.'"
3485,136513192,"b'Here, change ""could not lease license"" to ""could not validate license""'"
3485,136513234,"b""Need a configuration option that would disable remote license check for closed environments where they wouldn't want to get this error"""
3485,136513427,b'Need to check if logger is active.\r\nMake this into an `Operations` level'
3485,136513533,"b'Check logging, Operations'"
3485,136513541,b'Can this fail?'
3485,136513579,"b'Operations, note to admin to talk to us about it.'"
3485,136513610,b'Operations'
3485,136513733,"b'Typo ""licnese""'"
3485,136513854,b'Typo'
3485,136513863,b'Typo'
3485,136513877,b'Typo'
3485,136513893,b'Typo'
3485,136513920,b'Typo'
3485,136513941,b'Typo'
3485,136514069,b'`HasGlobalCluster`  -> `DistributedCluster`'
3485,136514325,"b""Get David to go over all of these texts, we don't want to shout at the user here."""
3485,136514575,"b'Need to be consistent with naming here, ""cores"" vs ""RAM"" is jarring to me.\r\n'"
3485,136514677,"b'fips can be removed.\r\nISV change to ""redist""\r\nRAM change to memory'"
3485,136515153,"b'If we refuse to backup something that was configured, we need to add an operations log to that.'"
3485,136515159,"b'If we refuse to backup something that was configured, we need to add an operations log to that.'"
3485,136515368,"b'What is the meaning of this? You are counting the number of databases here,no?'"
3485,136620563,b'can we create rule for this instead on inlining this ?'
3485,136621152,"b'this can be simplied using:\r\n```\r\n_.forOwn(assignedCoresByNode, (cores, nodeTag) {\r\n   const node = this.nodes().find(x => x.tag() === nodeTag);\r\n  if (node) {\r\n    node.assignedCores(cores);\r\n  }\r\n});\r\n```'"
3485,136621228,b'please put TODO here or remove'
3485,136621268,b'key -> node tag?'
3485,136621757,b'I wonder  if we should have following order:\r\nlabel / auto assign / value\r\n\r\nIn your case auto assign modifies previous input. \r\n\r\nHave a look at edit index where we can output reduce output to collection. Maybe we can reuse that component? '
3485,136622020,b'I wonder if assigned cores should be merged with total cores like:\r\nAssigned 3 out of 8 cores ? \r\n'
3504,136722129,"b'Kill the interface, there is nothing we gain from it here.'"
3504,136722135,b'Move into a dedicated throwing method'
3504,136722137,b'Move to a dedicated throwing method'
3504,136722140,b'Same'
3506,136760601,b'Do we need this line?'
3506,136760709,"b""Not really, I'll remove it"""
3485,136797306,b'done'
3523,136860939,"b""Future task, when we have the docs for the page headers, need to create a test verifying that we aren't overwriting important fields by accidents by going past the 32 bytes in the header."""
3523,136861006,"b'Pretty sure that we can calculate this value one (in fact, it is already there in the `ActiveRawDataSection`, no?'"
3523,136861024,b'Same'
3523,136861045,b'Why two separate fields?'
3526,136914438,b'Can we use the same trick for the `TableType` and then not have to pass it except during creation?'
3539,137004004,b'IIRC in Uri we have a HostNameType (with Ipv6 as a one of the enumeration options). Maybe it can be used?'
3541,137066260,"b'Not a good idea, you need to do that _iff_ there are no arguments.\r\n\r\nConsider:\r\n```\r\nfrom Users u\r\nload u.Manager as m\r\nselect {\r\n   ManagerId: id(m)\r\n}\r\n```\r\n'"
3541,137070075,b'Done'
3542,137076226,b'Why are you calling the Async version here?'
3542,137076641,b'This allocates 80KB on each call'
3539,137174392,"b""I didn't knew it exists, thanks! I'll use it."""
3539,137175515,"b'Note that now we call SetTimeouts out of the try..catch, and it might be an issue for the RC release if it will throw NRE.'"
3560,137281386,b'It would be better to use nameof() here'
3560,137281628,b'Do we want to have those commands available in Client API?'
3560,137281904,b'Probably better to use nameof() here is possible'
3560,137282146,"b'For reference, our convention in general for this is: if (_hasScript == false)'"
3560,137282985,b'typo: should be SkipUnsupportedTypes'
3560,137283969,b'typo here: DefaultTableQuery'
3560,137284232,b'I think that this should be moved to subdirectory: SqlServer'
3560,137284491,b'Are there plans to support more than one relational DB?'
3560,137285029,b'I would suggest renaming this to DatabaseConfiguration so it would be more clear what kind of resource we are dealing here with.'
3560,137285921,b'Can I suggest changing the endpoint to:\r\n/databases/*/admin/sql-migration/schema ?\r\n\r\nAlso this looks more like a GET endpoint?'
3560,137286280,b'Can we deserialize directly to WriteOptions here?'
3560,137286463,b'typo: WriteRespone'
3564,137333340,"b""I don't see why this would cause any issues, but I think that a recent change of mine might have caused it, want to go over this with you tomorrow."""
3563,137334040,b'Add count of attachments and a list of documents missing attachments.'
3563,137334184,"b'This can be an _old_ document that was deleted, and its attachments as well, and then got reused.\r\nSo that is a valid scenario for us, but we need to give the user this information, and explain why this can happen.'"
3560,137344133,"b""I don't think so, no"""
3485,137338796,b'done'
3485,137344925,b'done'
3485,137345233,b'done'
3485,137345415,b'done'
3485,137345449,b'done'
3485,137345810,b'done'
3562,137341529,b'Use `nameof` here'
3562,137341943,"b""Not sure that I'm happy about having the connection string in plain text here. Probably will need to change it down the line and integrate that with the way we are saving connection strings for SQL ETL"""
3562,137341993,b'`nameof`'
3562,137342304,b'`nameof`'
3562,137342569,b'Function here can be anonymous'
3562,137342720,b'Is there a reason to use the engine directly rather then using the ScriptRunner?'
3562,137342892,b'Can we get the primary key here'
3562,137343201,b'This is a misleading name. Better to make it explicit that this is about migrations'
3562,137343335,b'What if this is null?'
3562,137343534,"b'Instead of using `_`, use a proper variable and use that.'"
3562,137343801,"b'Does it need to inherit from `DynamicJsonValue`? That is meant for building only, with only poor support for online modifications'"
3562,137344229,b'This is far too generic a name for us for this feature'
3562,137344390,"b'In most cases, this is creating a dictionary that would be thrown away, empty.\r\nBetter to only create this if there is an actual need.'"
3562,137344646,"b""You are forcing materializing of the value, which we probably don't need.\r\nInstead, check if it is a string and avoid the call to `ToString`"""
3562,137345278,b'Need comments here explaining what you are doing.'
3562,137345492,"b'Use `OrdinalIgnoreCase` here, less surprising to users'"
3562,137345581,"b""Cache this value, isn't it always going to be the same?"""
3562,137346328,b'Too generic a name'
3562,137346524,b'What happens if this throws?'
3562,137346693,"b""This is pretty bad, you don't know what the error is, and you aren't logging anything.\r\nBut you are making decisions based on a property that isn't related based on the naming"""
3562,137346878,"b'If we are going to throw, we should not be doing anything else here.'"
3562,137346965,"b'More information we need, how many documents were written, how many rows were read, etc.'"
3562,137347055,b'We can allow the user to set this value in the options'
3562,137347368,b'Where is this disposed?'
3562,137347552,b'Need to raise event here telling caller that this happened.'
3562,137347842,"b'This need to be named `FlushCommads` or something like that.\r\nEnqueue means just enqueue, and here you are actually waiting on them.\r\n\r\nAlso, you are going to '"
3562,137347977,b'You are going to wait for each independently? \r\nEnqueue them all and wait for all of them in one shot.'
3562,137348090,b'Have to include the attachment names here.'
3562,137348237,"b'Have to include document ids here.\r\nAlso, you are leaking the attachments here.'"
3562,137348443,b'Why ref param?'
3562,137348603,b'Variable name needs to be plural'
3562,137348703,b'Why out variable instead of return?'
3562,137348878,b'Any reason not to use foreach here?'
3562,137349021,"b'Easier to use Linq here, would be easier to understand and avoid the `O(N**2)`'"
3562,137349485,b'Use linq instead of `O(N**2)`'
3562,137349596,"b'This is a case of ""I know what the error is, but I ain\'t going tell you, because it is more fun this way"".'"
3562,137349730,"b'Use `IndexOf` with a `StringComparison`, instead'"
3562,137349924,"b""This will also not work if the query contains things like `ORDER       BY` or `select 'Order BY' as value`"""
3562,137350095,"b""`var count = id.Count(ch=>ch == '/');`"""
3562,137350550,"b'Where did you get the information from, is it validated?'"
3562,137350627,b'Any reason not to use `JsonDeserialization` ?'
3562,137351079,b'What is the purpose of this and the following constants?'
3562,137351229,"b'Avoid using `@` as a constant parameter name, have the factor generate the parameter name with the appropriate prefix for the database.'"
3562,137351331,b'The quote characters can change based on the actual db in question'
3562,137351458,b'And if I have multiple dots?'
3562,137351850,b'Under what scenario are you actually going to have different values of columns and values?'
3562,137352211,"b""Isn't passing a not null `connection` enough here?"""
3562,137352773,"b""This is horrible. You know what the error is, you won't tell me, and you lose information along the way.\r\nUsers hate this kind of behavior. We need to always be aware of our error conditions and our error _reporting_."""
3562,137352845,b'bad'
3562,137352895,"b'Here and elsewhere, `nameof`'"
3562,137352988,b'You already the connection previously.'
3562,137353122,b'bad'
3562,137353206,b'JsonDeserialization should be used here'
3562,137353245,"b""Aren't any of these disposables?"""
3562,137353385,b'where / how are you reporting this?\r\n'
3562,137353479,b'This file should be named `.sql` '
3562,137353743,"b'Pretty sure that we already have this in the Sql ETL, is there a reason to duplicate it?'"
3562,137354063,b'use named parameters for the booleans to make it easier to figure out what you are doing'
3562,137354318,b'Why do we need the `DataContract` stuff?'
3565,137355657,b'This should probably be `Licensing.SkipLoggingOfLeasingErrors`'
3565,137355700,b'Probably should also be marked as expert only'
3577,137548080,"b""I think that this should be local variable, the 'Configuration' is set few lines lower."""
3577,137548288,"b'The real issue here is that Scripts should be created last, after Configuration property is set'"
3577,137548403,"b'No need to pass the configuration separately, just move the initialization after setting the Configuration property'"
3578,137554801,"b""I'm not really happy with this, to be honest, and we need to be sure that there aren't any usages of `ClusterRequestExecuter` outside of the Server Code.\r\n\r\nThat said, good enough for hte RC"""
3581,137557050,b'Is the content consumed here in any way?'
3581,137557192,b'Is the content used ?'
3581,137557234,b'Is the content used?'
3582,137634559,b'typo :)'
3577,137942271,b'Done'
3577,137942295,"b""We pass the configuration separately for the case that database is null and the configuration is the serverStore's one."""
3586,137943443,b'Why do you need this?'
3592,137954425,b'Typo'
3607,138098117,"b""query needs to define index, so we can remove 'indexName' I think?"""
3607,138098409,"b""query needs to define index, so we can remove 'indexName' I think?"""
3608,138122362,b'please use type: Raven.Server.Commercial.LimitType'
3608,138122710,b'This is quite unclean solution for me. I think it would be better to check if response status text is payment required and then call new method: extract licenseLimitDetails which will extract field message and licenselimit type from response json. Please remember this method is called not only for licensing errors. '
3608,138122955,b'url for what? '
3608,138123856,b'what if recent error is of alert? '
3608,138124341,b'tryReopenRegistrationDialog? '
3608,138124438,b'3-1 = 2 Is it not substracted for purpose or bug? '
3608,138124904,b'code duplication - can we move this to licnese model ? '
3608,138125409,b'use type from server? Optionally introduce new interface: recentLicenseErrorDto - not every error has field: LicenseLimitType'
3608,138125451,b'do we need both click and href? '
3608,138125731,b'I wonder if we should divide this into 2 cases: \r\na) buy some license\r\nb) upgrade existing license \r\n\r\nHaving just request license when user already has license is misleading'
3608,138126249,b'title : total cores available where? in license on cluster? - maybe it is worth to make disambiguation on this'
3607,138192953,"b'Yes, fixed'"
3608,138275367,b'done'
3608,138275634,b'changed to requestLicenseUrl'
3608,138275856,b'changed'
3608,138275909,b'was used for testing :)'
3608,138276806,b'done'
3608,138276932,b'yes. need to open the registration window after the redirect'
3608,138277779,b'done'
3608,138278018,b'done'
3608,138279148,"b""Isn't href ignored when you have client handler?"""
3608,138279666,"b""we're parsing the details anyway: JSON.parse(details)"""
3608,138280038,"b'we do, but I think we should have different method for parsing and extracting license type. Both should be different return types. '"
3611,138287295,"b""Include friendly name of the server certificate as well as its path if we have it.\r\nAnd I don't think the code does what you think it does. It needs the cert itself to be registered, not its CA"""
3611,138287446,b'Need to provide the name of the issuer there as well.'
3608,138294976,b'done'
3608,138296879,b'done'
3608,138297030,"b""it's not if the handler returns true"""
3615,138314941,"b""this field is calulated based on details - I think we shouln't introduce field used only in one case on *every* notification. """
3615,138314965,b'then we can remove this'
3615,138315040,b'and compute this here - based on details'
3615,138315070,b'licenseLimitNotification  this is not needed here'
3615,138315202,b'code duplication. I think computing this should be done in single place.'
3615,138316864,b'Computed field?'
3626,138355732,b'Maybe also add the overload with `out StreamQueryStatistics streamQueryStats` ?'
3626,138358847,b'Yes'
3626,138359282,b'Why not just cast this to `IDocumentQuery<T>` ?'
3637,138608599,b'This will break current docker setup.'
3651,139290214,b'In my opinion this is misleading. As if we are in a cluster (especially if we were kicked out form a cluster)\r\n'
3651,139290270,"b""ok I wasn't aware about this case. So what's your recommendation? We get since member with node tag = ?, right after executing raven for a first time. When we select manual node selection and send node tag  = ?, it throws. Maybe we should send '?' anyway but it should be handed serwer side? """
3651,139303117,"b'Yes, passive should be `?`'"
3651,139306963,"b'ok, so I reopened issue and this PR goes to trash'"
3660,139309101,b'reorder what? And why is this internal?'
3660,139309122,"b""That is just one way to check, also need to check the other directions. `MemberOrder` that isn't on the `Topology.Members`"""
3664,139311832,"b'This should be done only by `DbAdmin`, not `ValidUser`. The reason is that we are using the _server_ credentials to do stuff, which we might not want them to use.'"
3664,139311878,"b'`configuration.ServerUrl.TrimEnd(""/"")` ?'"
3664,139311888,b'Why `ToLower` ?'
3664,139311968,b'Why are you using sync sleep inside an async task?'
3664,139311980,b'what is this for?'
3664,139312251,b'done'
3664,139312308,b'done'
3664,139312395,"b""I'm saving and loading a document (save the last etag from the destination) using the server url.\r\nThe document ids are non case sensitive so this can be removed."""
3664,139312444,b'Saving the last import status from the destination'
3664,139312470,b'This was a sync method :)\r\nFixed'
3664,139362229,"b'code duplication, please introduce rule for this'"
3664,139364568,b'Why do you call this? '
3664,139364771,b'you can put \r\nthis.startingMigration(false)\r\nin always'
3664,139365336,"b'Use present simple here. Please have a look at import/export database operations. After migration is completed we have  Database import\r\nSeptember 18, 2017 10:47 AM\r\nMigrating database: Northwind from url: http://live-test.ravendb.net '"
3667,139358434,"b'this can be static method, right?'"
3667,139358617,b'this struct becomes too complex imho...'
3667,139360640,b'I changed it to be static method.\r\nBut in general I do not like the static syntax of typescript so this is why I used instance method here by default.'
3667,139360865,b'I would simplify it later on.'
3667,139360957,b'I agree that syntax for static method in TS is weird. :('
3671,139405756,b'It is magic constant ;-) I have no idea what isFieldPrefixMode do. Can we use string enums instead? '
3671,139416549,b'This part would be re-worked as part of the following task:\r\nhttp://issues.hibernatingrhinos.com/issue/RavenDB-8184'
3674,139427920,"b'Use the first N bits from the number, instead'"
3674,139435198,b'done'
3631,139309151,b'Put this in proper `{}`'
3631,139309180,b'Why are you doing this? '
3631,139309196,b'Need the _full_ exception here.'
3631,139309206,b'Use `IDbDataReader` here.'
3631,139309238,b'Avoid any such usage. `operator` should only be used very rarely and not for things like this'
3664,139470570,b'done'
3664,139470652,b'to open the import database modal'
3664,139470749,b'done'
3664,139471358,"b'openDetailsForOperationById does it. \r\n\r\nMonitor returns promise + allows to get callback which is called onProgress, so this call is useless here. '"
3664,139474640,b'done'
3664,139476034,b'ok. done.'
3682,139628899,b'You can use:\r\nwordList.push(...functions) \r\n'
3682,139628919,b'I really like using strings enums here :)'
3682,139629344,b'Thanks.'
3682,139632061,b'Done'
3692,139677380,b'This should be configurable?\r\nAlso this removes the ability to wait indefinitely for the results (by default in C# we are using DefaultTimeout (15sec)).'
3692,139677574,b'Description/Summary from this should be moved to WaitForNonStaleResults?'
3692,139677759,b'We should leave the comment/summary from WaitForNonStaleResultsAsOfNow here?'
3692,139679451,"b""We don't, It's not true anymore """
3692,139679694,b'We can do it with little changes'
3692,139681608,b'The behavior of WaitForNonStaleResults now matches the behavior from WaitForNonStaleResultsAsOfNow so the description from WaitForNonStaleResultsAsOfNow should be used?'
3692,139683594,"b""It wasn't accurate before"""
3692,139684836,"b""I think to wait 30 seconds It's more then enough and if someone want to wait indefinitely he always can initialize the timeout.\r\nMaybe we can decrease it to DefaultTimeout (15sec))."""
3694,139688304,b'Why did you remove the formatting here?'
3694,139687827,"b""I've just split the previous condition into two separate once in order to be able to throw a better error here. However I _think_ we shouldn't call `MaybeFlushEnvironment` here since the flushing is already in progress.\r\n\r\n@ayende ?"""
3694,139688708,"b""The reason we are calling it is because we might have start flushing, had some tx in the meantime and now want to flush again, but didn't have a chance to, so this will cause us to effectively loop until we get it."""
3692,139689056,"b'Should be reduced, yes. And the user can control this by explicitly specifying the timeout.'"
3694,139689302,b'Mistake. Will fix it in a moment.'
3694,139690042,b'OK'
3695,139690390,"b""Why promise do you have that this is already loaded and you aren't blocking the raft processing thread?"""
3703,140081201,"b""I'm pretty sure that this takes a lock"""
3703,140081418,"b'Actually, this is worse. It:\r\n* Takes a lock\r\n* Copy the entire values collection to an allocated buffer\r\n* Return the buffer and then iterate on it only to discard it.'"
3703,140081650,"b'This does `O(n)` operation, how often do we expect this to be called, if this is a value being monitored?'"
3703,140081896,b'Does non trivial work as well'
3703,140081992,"b'This is pretty cheap, though'"
3703,140082470,"b'Cheap, but each of these will open up a separate transaction, and if this is called a lot, may be worth optimizing.'"
3703,140082593,b'Do we verify that the same db name is under the same index in all servers?'
3703,140083452,b'Need to fix the file name'
3703,140084131,"b""This is per database, but attaches to the global object, need to check that we don't have a leak here again"""
3703,140166612,b'Fixed.'
3703,140166682,"b""I will verify that, but I'm using the same technique as we used in 3.5, so it should be good."""
3703,140166849,"b'No, monitoring is per server, not sure if we should mix cluster in this?'"
3703,140168468,"b""Most often values are in minutes. Critical endpoints like server up-time are set to low ones like once every minute. But others are not processed that often. Of course I cannot forbid someone from setting the value to 1 second, but I'm also not sure if this is something that we should handle."""
3703,140168562,b'I do not expect this to be called more often than once every 3-5 minutes. This is still a problem?'
3703,140169189,b'From the other side it could be more convenient to have unified indexes...'
3703,140185448,"b'Probably not, but better to use just the `Count` anyway'"
3703,140185532,"b""Okay, if that is the case, we shouldn't worry too much"""
3703,140185675,"b'Yes, that is my thinking as well. If we are monitoring a cluster of system, it would be nice if we had it matching. We can use a hash of the name, I guess?'"
3703,140185790,"b'I think this is fine (it is stored always, but there is just a single instance of it per server).'"
3703,140185834,"b""Doesn't handle what happens when the db is deleted, though"""
3711,140202893,b'Can we close the tx _before_ we are waiting?'
3711,140202988,b'Close tx before waiting'
3713,140209027,b'Use `Ordinal` to be clearer here?'
3713,140209095,b'Use `Ordinal` and comment here?'
3717,140352366,"b""Maybe rename property to 'CompressionLevel' ? 'UseGzipCompressionLevel' does not sound good."""
3727,140472881,"b""It is fine to aggregate on null, but it isn't fine to aggregate on non existing field?\r\nNot sure how we are suppose to behave here, ideas?"""
3727,140475205,"b'What do you mean by ""It is fine to aggregate on null""? It isn\'t, that why we throw this exception.\r\n\r\nIt doesn\'t matter if we a field is null or it doesn\'t exist - we cannot process `sum()` on such field so we\'ll throw.'"
3727,140475340,"b""I'm trying to think as the user. If the value is null or missing, can we just evaluate it as zero?"""
3727,140477280,"b'Since `new List<int?> { null, 1 }.Sum()` evaluates to `1` then we could behave the same and treat `null` or missing field as a `0`. That would be consistent with the behavior of static map-reduce indexes.'"
3727,140477797,"b'Yes, that is what I would expect.'"
3714,140241044,b'Maybe better to throw `InvalidQueryException` here?'
3714,140437574,b'Yes'
3742,140647418,"b'Wow, this is a nasty bug.'"
3743,140651233,b'Rename to GetCompareExchangeOperation?'
3743,140651246,b'Rename to GetCompareExchangeValueCommand?'
3743,140651264,b'Every operation uses Send or SendAsync methods. We do not need to create dedicated ones.'
3743,140651765,b'Yes'
3743,140651774,b'Yes'
3743,140651776,b'Yes'
3743,140652664,b'I think we should name it better so it would better describe what it does. PutCompareExchangeOperation? CreateCompareExchangeOperation? Not sure.'
3743,140652676,"b""Why 'Async' ?"""
3743,140652712,b'I think that this should be moved elsewhere. Those operations are no longer ServerWide and should not be in Raven.Client.ServerWide namespace.'
3743,140652742,b'Maybe in Raven.Client.Documents.Operations?'
3743,140652778,"b""Not sure if this is a typo or not. The operation is called GetCompareExchange, but the command also adds Value. I'm not sure which is a proper name."""
3743,140653784,"b""I need concrete names please :)\r\nI would prefer simply CompareExchange without the 'Operation' ending (I know it is the convention, but in my opinion not a user friendly one) """
3748,140657437,b'typo'
3748,140691999,"b'Fixed, thanks.'"
3752,140694338,b'What is this is missing?'
3752,140694428,b'what if there are case sensitivity happening here? why do you need this anyway?'
3752,140694470,b'Thread safety'
3752,140694581,b'This is probably wrong. It can be a rehab member.'
3752,140694764,b'why do you need this here?'
3757,140719102,b'Create issue for Adi'
3759,140739982,b'Why did you remove it?'
3749,140655510,b'`value is ProcessThreadCollection ptc`'
3749,140655534,b'Why are you doing this dynamically?'
3749,140658285,"b'The /debug/cpu/stats is a summarized (not dynamically generated) end point.  I added this /debug/proc/stats dynamically as it contains a lot of info which can be useful when debugging, and is also changing from one to another dotnet release.   I though reflection suits here.  Should I manually write each property? '"
3749,140662276,"b'Yes, better that way. Feel free to generate the code, but it is much better to read it in this manner.'"
3749,140745582,b'done'
3749,140750651,b'Why not just set to null directly? '
3749,140750800,b'Can you tell which ones would need that and skip them actively?'
3749,140761291,b'https://github.com/ravendb/ravendb/pull/3763'
3749,140761300,b'https://github.com/ravendb/ravendb/pull/3763'
3771,140854336,"b'This fails the tests. A db admin handler request an ""admin"" in its url'"
3771,140854384,b'same'
3771,140854396,b'same'
3783,140995021,b'remove or put TODO ? '
3783,140996131,"b'For now I do not want to run the tests as part of the watch, but the test method should run them probably. So I commented this until later.'"
3783,141000980,"b""it is 'test' task, not 'watch' so maybe watch task is broken. Watch indeed should only compile files but not running tests. Could you fix that then? When running 'test' task we want to run tests. Current change breaks this feature. """
3783,141005677,"b'Reverted, https://github.com/ravendb/ravendb/pull/3785'"
3794,141068526,b'Dispose this.'
3794,141068671,"b'Logging, warning, etc.'"
3794,141068968,b'Why is this needed?'
3794,141069243,b'kill it with fire\r\n'
3794,141069334,b'Remove'
3794,141069901,b'error handling should be _exactly_ the same.'
3794,141070124,b'remove'
3794,141070173,b'remove'
3794,141070255,b'remove'
3796,141115304,b'What about normal attachments?'
3796,141115422,"b""We won't be adding this, I think. It would uglify us for everything."""
3796,141115714,"b'Why return null, and what can fail here?'"
3796,141115958,b'what is the meaning here?'
3796,141116075,b'Probably `@empty` is not a good idea'
3796,141116241,"b""Data can be very large, and you need to at lead try to include the key. so we'll know where the error happened."""
3796,141119778,b'They are taken care under the documents '
3796,141119857,b'Ok'
3796,141120139,"b'Blittable reading can throw, no? '"
3796,141120332,"b'I forgot to remove the comment, this is already the fix. '"
3796,141120442,b'@attachments? '
3796,141120527,b'Yes'
3796,141150343,b'Not if you are reading valid data'
3796,141150437,"b'Just `Attachments`, I think, or even `Files` if this is from RavenFS'"
3796,141247466,"b""I don't think that we should have here `LegacyAttachments` as this is the statistics of the imported data, and we won't have in the UI legacy attachments stats. You convert the attachment and attach it to a document, so you should use the attachments stats inside the documents."""
3796,141247931,b'+1 for `@files`.'
3796,141248206,"b""again this wasn't implemented for ravenfs, we need to support attachments from 3.x so I would go with Attachments """
3796,141250124,"b'Ok, than use `@attachments` as the user might have their own `Attachments` collection, so we insert implicit collection with the `@` prefix.'"
3796,141274030,b'okay'
3796,141274655,b'sure\r\n'
3797,141112360,"b""where is the db that we'll be replicating to?"""
3797,141112650,"b""This is wrong, we need to ensure that whenever we call `ReplicateToDestination`  we'll always renew the check for the TCP details."""
3797,141112780,"b'Caching this is a bad idea, the TCP Connection details may change (the remote server may reboot and get a different port, for example, we need to re-get it each time.'"
3797,141113045,b'This is a very bad model for this to use. If this is external we set the `ConnectionInfo` but if internal we get it ourselves?\r\nJust always supply this externally and decide how here.'
3797,141113295,"b""Okay, you don't get to use `Single` any more.\r\nThere are multiple different failure conditions here that you are hiding with the `try`/ `catch`  which should be handled."""
3797,141113415,b'Why are you passing urls in ctor and database via property?'
3797,141137135,b'the Database property of ReplicationNode class'
3797,141138860,"b""yea, but it's only CollectExternalReplicationTasks method ... Should't I care here only about getting the url and ignoring rest of the issues? """
3797,141139172,b'Initially it was to find all the places that I need to change. I guess it will make more sense to pass them both to the ctor.'
3797,141142533,"b""Bad error handling can cause a lot of hair pulling, let's avoid it."""
3797,141142746,"b'In particular, an error here in this manner may mean no replication for no observable reason'"
3797,141254695,b'Who is responsible for adding this to the retry queue?'
3797,141254710,"b""Shouldn't this be private?"""
3797,141254832,b'What if there is already an old instance there?'
3797,141254946,b'Why do we need to do that?'
3797,141255124,"b'what do you mean, snapshot?'"
3797,141255268,b'what can throw here?'
3797,141255444,b'Who else can fill the error status here?'
3797,141335491,b'This allocates needlessly. Just combine all of the hashes'
3797,141335541,b'Needless allocation'
3797,141335701,b'What snapshot?'
3810,141333863,b'And what if this is nested?'
3810,141334043,b'Why do we need this `fromAlias` here?'
3810,141334247,b'Use static values here.'
3810,141334373,b'Use a timespan here instead of string.'
3820,141407206,b'And what if this is a permission problem?'
3810,141550071,b'typo: Fileds -> Fields'
3810,141550953,"b""I wonder if `QueryData` name isn't too wide for this class. Maybe `QuerySelectData`, `QuerySelection`"""
3810,141551825,"b""`.getUTCMonth()+1` that's is tricky :)"""
3827,141572177,"b'We need to wait here a lot more for the indexing to complete, no?\r\nIn this case, we probably explicitly intend to do that.'"
3821,141415001,b'You are leaking the context here.'
3821,141415463,"b""This doesn't exist any more"""
3821,141416141,b'Why do you have this? we already have a method that reads a change vector from a string and validate it.'
3821,141416988,b'had failed'
3821,141418583,b'@karmeli87 Validate that we can set this to a particular node'
3827,141577156,"b""1 minute? \r\n\r\nI wonder if we should force a newly created auto index to stop the its first indexing batch before the timeout of a query which triggered it happens (let's say after `(query_timeout) / 2`). This way we'll return at least some stale results. Otherwise if the indexing batch is still in progress we return no results."""
3827,141582334,b'Good idea on both'
3827,141582380,"b'And not just for streaming, for regular ones as well'"
3827,141583249,b'OK'
3830,141583388,b'morbid'
3830,141584601,"b""Doesn't this materialize all of them immediately?"""
3842,141681202,b'Does it handle paths with spaces properly? '
3842,141681491,b'onProgress? fix letters cases'
3842,141682212,"b'for me this message is like warning, not exception \r\nExport is taking more than the configured timeout (but I will continue)\r\n\r\n'"
3842,141682367,b'Should we swallow stack here?'
3842,141683367,b'How is it possible? 2 lines above you get or create database. I assume at this point it should be created.'
3842,141816086,b'@talweiss1982 Can you rename to /admin/migrate/offline to be consistent with other migration endpoints?'
3842,141864688,"b'This does not handle it properly,  no'"
3842,141864776,"b'Yes, I think we should let the user decide on actual cancelling'"
3842,141865051,b'how are we swallowing the stack?'
3842,141865155,"b'This create the database _instance_, can return null if there is no db record for that name'"
3842,141865515,b'Probably needs to handle quoting here too'
3842,141865928,"b'This can wait forever, meanings that the timeout logic is not valid.\r\nNeed to handle this so you are waiting on the read task itself.'"
3842,141866080,b'Need to add progress here to the effect that we are now starting the import'
3842,141866142,"b'Yes, that should be just `throw;`'"
3840,141868593,"b""This generates a 4KB buffer on every MultIGet call, let's see if we can use the context to get a pinnable buffer that is reused between calls."""
3840,141869084,b'Duplicated code from RavenCommand.ThrowInvalidJson'
3840,141869196,b'Need to add a comment here to explain it.'
3853,141869428,b'These really tend to kill our overall test performance. Any way we can do that with events?'
3853,141870878,b'We could do similar as for ETL tests:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/test/SlowTests/Server/Documents/ETL/EtlTestBase.cs#L60-L72'
3853,141871175,"b'Yes, that would be better'"
3842,141903298,b'I thought (based on method name: ...OrCreateResourceStore) it always returns not null :)'
3842,141903503,"b""ok we don't. There is e.ToString(), not e.Message"""
3842,142023153,"b""The export tool doesn't support spaces this code just generates the commandline"""
3842,142023181,"b""I thought so too, but it doesn't."""
3842,142023184,b'sure'
3842,142023200,b'quoting is something that needs to be handled on the v3.x DR tool side not here'
3842,142023910,"b'The user can cancel the operation from the on going operation in the studio. There is no way for me to get user feedback from this code path, is there? '"
3842,142023911,"b'The user can cancel the operation from the on going operation in the studio. There is no way for me to get user feedback from this code path, is there? '"
3842,142023937,b'What can contain spaces here? '
3842,142024379,"b""Yes, you don't need to do anything except send an on progress message with the warning"""
3842,142024384,b'EncryptionKey might.'
3862,142025844,b'Braces here'
3862,142025862,"b""This does an allocation that the previous code didn't do\r\nhttps://stackoverflow.com/questions/11665279/why-enums-hasflag-method-need-boxing"""
3862,142026123,b'This allocates twice. '
3862,142026131,b'Probably need to remove this?'
3861,142026156,b'or `\\t` or any other things. Just quote it always anyway'
3864,142027818,b'Can do this in one shot.'
3862,142027907,b'We removing the test? Better to change the assertion.'
3862,142027934,b'Would it make sense to leave the tests here and change the assertion?'
3866,142028919,b'We should be disposing this'
3866,142028936,b'Need to dispose this'
3866,142028944,b'Need to dispose this'
3866,142028949,b'Dispose this'
3866,142028955,b'dispose this'
3866,142028966,b'dispose this'
3866,142029006,b'Explain why we are doing this'
3866,142029012,"b'Maybe do this inside the previous if, so it is all in a single place?'"
3866,142031117,b'now disposed by containing class'
3866,142031119,b'now disposed by containing class'
3878,142125997,"b'This should go on Debug, not operations'"
3878,142126080,"b'You checked operations, logged info (need to do that on info)'"
3877,142126652,"b""And if it is quoted by `'` ?"""
3877,142126765,"b""Group by `null` ? \r\n\r\nWhy do we have to check the field itself, can't we get access to the value toke directly?"""
3875,142127138,"b""They don't, they can be complex objects, arrays, etc.\r\nThe properties you use need to be blittable paths."""
3875,142127286,b'What does this mean? We should always report an error'
3875,142127413,b'Remove this.'
3878,142128139,b'Thanks. Fixed in https://github.com/ravendb/ravendb/pull/3881'
3877,142128583,"b""It's for static indexes only. It won't be quoted."""
3877,142129294,"b'Right, another case.\r\n\r\nWe are checking it here because I recently added the following validation when we compile the static index:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/dc3a124e98472bebfc5dc29d43838be058a728e1/src/Raven.Server/Documents/Indexes/Static/IndexCompiler.cs#L370-L376'"
3875,142148906,"b""how should we write a CSV error? our response body isn't a JSON"""
3875,142149307,"b'yes, i assumed more work needs to be done around here.'"
3870,142078206,"b""Why aren't we passing this as a POST request?"""
3870,142146541,"b""Currently, there is support for both POST and GET requests for /queries endpoint\r\nSo we shouldn't support GET /queries for MoreLikeThis queries?\r\n(https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/Handlers/QueriesHandler.cs#L83)\r\n\r\nUpdate:\r\nI see that MoreLikeThisCommand always sends POST, so I will remove support for GET /queries endpoint with _morelikethis_ \r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Client/Documents/Commands/MoreLikeThisCommand.cs#L35"""
3882,142319011,b'`group by item.Gnull` ? \r\n'
3875,142320525,"b'You output the error as is, which will corrupt the CSV file, but it will give us an error that they can see'"
3882,142324585,"b""Not sure what you mean. \r\n- `Gnull` is valid field name identifier\r\n- `group by item.null` isn't valid c# code"""
3882,142325006,"b'`group by item.@null` is , and will be compiled as `item.null`, no?'"
3882,142327269,"b""oh you meant `@null`, but this case isn't grouping by constant. then it's properly of document / map result"""
3875,142342130,b'note that QueryResultServerSide<T>  has the same notion'
3875,142343481,"b""there is just throws if it isn't set, which expose the error"""
3875,142344820,b'what should be the path of an object that reside inside an array? Foo.Bar[5].Name? and what if no other document have an object under Bar[5]? in 3.x arrays seems to be simply written as strings'
3890,142456376,b'then simply remove \r\nthis.queryText.extend({\r\naceValidation: true\r\n});\r\n\r\n:)'
3890,142456480,b'remove ?'
3890,142456498,b'remove ?'
3890,142456618,b'please make sure relative paths works fine in released version of studio '
3890,142456643,b'remove? '
3890,142456711,b'typo'
3890,142456748,b'typo'
3891,142481966,b'Probably need to take into account culture here.'
3905,143346868,b'I think it is actually fine to have count of 0'
3905,143346911,b'Count is allowed to be zero'
3820,143360841,b'fixed'
3914,143389762,"b'Need to say something like: ""This method is here for strongly type support of server side call during Linq queries and should never be directly called""'"
3914,143389768,b'Same'
3914,143389844,b'Is there ever only a single `DeclareToken` ? I think that there could be multiple of them.'
3914,143389960,b'You need to do some tests in VB.Net as well.\r\nProbably an issue for RTM'
3928,143566574,b'Are there any additional locations where this can cause problems for us?'
3928,143641425,b'We might. If the operation requires a database it can cause a problem.\r\nWill start the review.\r\nhttp://issues.hibernatingrhinos.com/issue/RavenDB-8700'
3932,143644514,"b'@iftahbe So server is not a CA, but it still can issue client certificates?'"
3932,143644952,"b""The problem is that FireFox rejects the use of a CA cert as a server cert as well.\r\nWe don't actually care about the validity of the chain in this regard, since we check the actual cert, so we don't mind that issue."""
3932,143645050,"b""The other problem is that when we generate a client cert from a Let's Encrypt cert, it is not a CA."""
3932,143646053,"b""OK makes sense. I'll retest this later to check if all is fine on docker."""
3945,143714574,b'what if you pass different task type? Then you can remove subscription w/o access? \r\nI think we should check here if task with given type is actually subscription. '
3945,143715776,"b'If you pass anything else it will throw, which is what we want, no?'"
3945,143722282,b'what if some ETL has task id:5 and I say:\r\nDELETE /databases/*/subscription-tasks?type=Subscription&taskId=5\r\n\r\nWill it delete etl task? \r\n'
3945,143722650,b'here we have typo: Successfullly '
3945,143724734,"b""ok I can see we get task type again in: DeleteOngoingTask method, so it shouldn't be issue. Please ignore my comments then. """
3948,143726672,b'you have this in : Constants.Metadata.Id'
3948,143791396,b'Why do the `property.Length` check'
3948,143797195,b'Most of the time its going to be false and comparing ints is cheaper than strings '
3951,143930948,b'@ayende please review this case'
3948,143984972,"b'That is already something that is checked by the string anyway, no point in doing this.'"
3951,143989664,"b""Yes, it's good"""
3948,144007022,b'There is a point since it will get inlined and you save a method invocation '
3948,144007035,b'There is a point since it will get inlined and you save a method invocation '
3948,144008915,"b""No, it isn't inlined in the sense you are talking about, and at any rate, this defeats the point of using a constant. See the blog post for the details"""
3948,144037497,"b""The length property is inlined the string equal isn't. You're wrong. If you'd argue that the branch perdition will probably do a better job in detecting it's usually false it would be a stronger argument... """
3948,144042514,"b""The length property check is done by eventually going here: \r\nhttps://github.com/dotnet/coreclr/blob/238907f69662dda53dee0afd9848756a5bb790e9/src/classlibnative/bcltype/stringnative.cpp#L311\r\n\r\nThere are some patterns that are recognized by the JIT, as explained here:\r\nhttps://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/String.cs#L201\r\n\r\nBut you are going to end up doing a call anyway. At this point, it doesn't matter if you are going to run a few more instructions. The check happens anyway, here: \r\n\r\nhttps://github.com/dotnet/coreclr/blob/master/src/utilcode/sstring.cpp#L1597\r\n\r\nThere is also the issue of hard coding the length of `Constants.Documents.Metadata.Id`"""
3957,144292321,"b""This was added because Kestrel would chunk the response and screw the Gzip encoding if was not there (exactly WHY it would break it, I don't remember). When Kestrel chunked, both Firefox and Chrome would break.\r\n\r\nPlease make sure that this does not change anything in those browsers."""
3957,144293346,"b""It isn't chunked once you set content length. See: https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.4\r\nMessages MUST NOT include both a Content-Length header field and a non-identity transfer-coding. If the message does include a non- identity transfer-coding, the Content-Length MUST be ignored."""
3959,144371537,b'What happens if this is a broken connection at this time? \r\nOr it was broken immediately after this line?'
3959,144372134,"b""I don't like this, there is a race condition here between the disposal and the other candidate getting the value.\r\nBetter to make it explicit ownership change. First, the candidate take ownership on the connections, and in thus doing set the connection to null."""
3959,144372306,b'Why is this commented? '
3959,144372819,"b""You aren't checking the _term_ here. We might be skipping ahead of ourselves here, no?\r\nOr are you relying on the check being done in the follower? If so, we need an explicit comment."""
3959,144372954,b'Same ownership issues.'
3959,144373388,"b'This is the hello for the benefit of RavenDB routing, not Rachis, right?'"
3959,144373874,"b'`KeyNotFoundException` can be raised here, make sure that you use `TryGetValue`, instead.'"
3959,144373905,b'Same'
3959,144373922,b'Same'
3959,144373980,b'Remove debug code'
3959,144374132,b'Make sure that this is logged in messages'
3962,144710814,"b'This loses critically important information. Namely, the stack trace of the original exception.\r\nThat leaves aside the issue that an aggregate exception may contain _multiple_ exceptions as well.'"
3962,144710823,"b'`TrySetException` is better here, to avoid concurrency throwing'"
3962,144710870,"b'Race condition here. A caller may call Dispose here, and try to call `Raise` and get false, but then get the _old_ `_disposeCompleted` and hang there.'"
3959,144714006,b'So the follower ambassador should fail to communicate and try to reconnect with a fresh stream.'
3959,144714036,b'It should be removed. \r\nBasically it says to dispose the connection once we change our state. We want to avoid this in order to reuse the connection.'
3967,144716696,"b'Make this into a static list, instead of creating it every time.'"
3967,144716702,"b'use HashSet, instead of List here.'"
3967,144716712,b'Maybe use a dictionary to do the lookup?'
3978,144796830,"b'Do we really have to register the cert itself, and not its CA?\r\nDo we not need to check the `StoreLocation.LocalMachine` as well?'"
3978,144798022,"b'Can we make this into a single command that take a collection, this way it will be atomic'"
3978,144798225,b'Just return it here?'
3978,144798287,b'Change to array'
3978,144798409,b'Merge conditionals'
3978,144798638,b'Why do you need this?'
3978,144798701,"b'Why this check, this is already done in the attribute, no?'"
3978,144798848,"b""You don't actually need this"""
3978,144798947,"b'Why are you calling the Escape here? This is static data, no?'"
3973,144799257,b'raw instead of row?'
3973,144800252,"b'ah, yeah I think I meant `line`'"
3978,144838591,"b'Yes, need the CA here.\r\nSee RavenDB-8904, only checking root and certificate authority stores. Other local machine stores are not supported.'"
3978,144838619,b'yes'
3978,144838656,b'ok'
3978,144838671,b'ok'
3978,144838686,b'ok'
3978,144838717,b'yes'
3978,144838761,b'no need'
3978,144838825,b'ok'
3978,144838843,b'yes'
3981,144838910,"b'Need to explain why, no?'"
3985,144899785,"b'you await for operation and then result operation id, so this operation id is almost useless. \r\nOperation id should be taken from request uri - please have a look at import database endpoint. We also supply file and return operation id. '"
3985,144899822,b'nameof?'
3985,144900161,"b""I'm not databasename in task name is required. We already have this information in context. """
3985,144900830,b'IIRC we have utility method from getting that? '
3985,145049024,b'Can we have empty field names? '
3985,145049265,"b""Field name `user.'name.first'` Note that there are quotes in the name. Needs to handle that in some manner?"""
3985,145049356,b'empty field name?'
3985,145049620,"b'I think that the issue is the difference in uploading the file vs. processing the file. But yes, this should be split.'"
3985,145049932,"b'This allocates a temporary buffer per value, why? reuse an existing buffer '"
3985,145049971,"b'This is never disposed, which means that over time, this context is going to get VERY large.'"
3985,145060291,"b""That's not valid csv"""
3985,145060995,"b'I have no idea what you guys mean here, this is exactly how it is done with smuggler import'"
3985,145061095,b'again exactly like in smuggler import'
3985,145061576,b'Any suggestion would be appreciated '
3985,145062307,"b""I'll add disposable collection to DocumentItem and we will have to dispose of it once we are done processing it."""
3985,145062962,"b'ok you can await it but then operation id should be taken from request url, not generating here. https://github.com/ravendb/ravendb/blob/4b2c605ffa3af88a35ae66b828f5612414a8e3f6/src/Raven.Server/Smuggler/Documents/Handlers/SmugglerHandler.cs#L331'"
3986,145050893,"b""I'm pretty sure that this is wrong, in the sense that we still want this error _during where_, but not on the select.\r\n"""
3986,145051772,"b'This is debug code and needs to be removed.\r\nAs the server is shared among tests, this can cause random test failures.'"
3985,145090088,"b'Like `Name,,Email` ? Note the double ,'"
3985,145132020,b'there is no property Type or Error in this context'
3985,145132094,b'okay'
3985,145132700,"b""I don't know to what utility method you're referring to nor could i locate one even when you told me it exists, could you point me to where it reside? """
3985,145132845,b'we can have an empty value but not an empty header'
3985,145132894,b'done'
3985,145133096,"b""shouldn't happen in the headers line, can happen in the value lines"""
3985,145133168,b'done\r\n'
3985,145133195,b'done'
3962,145179080,"b'According to docs: ""This operation will return false if the Task`1 is already in one of the three final states: TaskStatus.RanToCompletion, TaskStatus.Faulted, or TaskStatus.Canceled."".  If this happened, it would be a major code error; wouldn\'t it be better if we knew that it happened?'"
3985,145215017,b'I meant something here: https://github.com/ravendb/ravendb/blob/4b2c605ffa3af88a35ae66b828f5612414a8e3f6/src/Raven.Server/Web/RequestHandler.cs#L77'
4001,145325550,b'Include subscription and the actual error as parameters?'
4001,145325726,"b'Need to verify that even on error, everything is properly disposed, especially the unmanaged stuff'"
4001,145325919,b'How long can this take? Will the subscription timeout in this case?'
4000,145326295,"b'This is _not_ good. It is possible that no other thread will ever go there, because they are waiting for _this_ thread to complete it.'"
4000,145326354,"b""That was wrong of me, it wouldn't fail to compile, need to throw in the ctor."""
4000,145326448,b'Not good'
4000,145326581,"b'This is strange, why do we do that?'"
4010,145417491,b'what about this line?'
4010,145417775,"b""please don't use addmessage, use addInfo instead - as it appends timestamp as well. """
4013,145608446,"b""Isn't this wrong, we might be doing trial election here, no?"""
4013,145608624,b'Why do you have this here?'
4025,145718119,b'Actually do we need to say *topology* here?'
4026,145801059,"b'This should be inverted. The logic is that if any of them uses `http`, then it is false. Otherwise, true.'"
4026,145801519,"b""This is going to be really confusing to the user if there is any errors here.\r\nYou are handling it, but the error messages aren't going to be clear."""
4030,146127297,b'Which database task?'
4030,146127301,b'Which database task?'
4030,146127304,b'Which ?'
4030,146127317,"b""And if this is loaded? You'll hang until it is done, can be a LONG time"""
4030,146127797,"b""those errors will be caught by the 'catch' and add the database name to the error\r\n """
4031,146127901,"b'This leaks memory, we only need the memory for a short duration, and we need to release it immediately.\r\nThe context will recover this, of course, but for large system, we want to do this cleanly'"
4031,146128010,"b""Right, I'll fix this."""
4032,146128171,b'Remove this code'
4031,146128623,b'https://github.com/ravendb/ravendb/pull/4035'
4037,146130796,b'what about the btree index?'
4041,146131367,b'Need to also support parameter here.'
4041,146131394,b'Validate number of arguments.'
4041,146131405,b'Kill it.'
4041,146131495,"b'Have a `Regex` instance that we hold on to.\r\nThe logic goes like this.\r\nA concurrent dictionary of up to 1024 items (configuration).\r\nIf exceeding that, evict random item from cache.\r\nIf cache is full, and number of regex creations per minute exceed (configuration), clear the cache, raise alert, and then move to using non compiled regex.'"
4041,146131581,b'Create issue to support this from the Linq provider'
4041,146131627,"b""Let's set eviction policy on least recently used and handle too many at the same time."""
4038,146131839,"b'Drop this, no need to do this.'"
4038,146131859,b'Why do double the work? Make this method accept the expiration date as parameter.'
4038,146177582,b'Fixed'
4038,146178234,b'OK'
4029,146127272,"b'What is `ClusterEtag` and `ClusterId` ?\r\nIt should be the `Index`, not etag and the new identity value.'"
4029,146170548,b'Should be `POST`'
4029,146170577,b'Should be `POST`'
4029,146170608,b'POST'
4029,146170657,"b'Index? That is the new identity value here, no?\r\nIn that case, you want to make sure that this is clearly spelled out.\r\nBecause `Index` is usually referred to the _raft_ index.'"
4029,146170898,"b'Index is confusing in this context, use `NewIdentityValue` or some such'"
4029,146171007,b'Why is this called multiple times?'
4029,146171051,"b""Replace all of this with `TryGetValue`\r\nAnd why all the complexity, I sent one value it, I'm getting one  value out."""
4029,146171097,b'Add assert that the size is `sizeof(long)`'
4029,146182377,"b'The reason for that is UpdateClusterIdentityCommand(databaseName, identities), where `identities` is a dictionary which is used in other places for many values in.  The result, therefor, is many values out.  However at `UpdateClusterIdentityAsync` we do use a single value in/out.  But it will be wrong to return single value from `UpdateClusterIdentityCommand::Execute`'"
4029,146182730,b'not sure I follow. Each throwing is a different case.  I will compact the code a little.'
4029,146222974,b'Why does this return a dictionary? It can only ever have a single value.'
4029,146223050,"b'After a seed, this is not a new identity value.\r\n`NewSeedValue`'"
4029,146223170,b'This is not a debug information endpoint'
4029,146223282,b'should this be a `Operator` / `DbAdmin` endpoint?'
4029,146223611,"b'Use try get and set unconditionally, would be simpler.'"
4029,146223783,"b""Shouldn't this use `GetStorageKey`?"""
4029,146223995,"b'This is only for the tests, why do we need these?'"
4052,146230964,"b'Avoid hard coded 3, use a constant.'"
4029,146233587,b'You forgot to remove this code?'
4055,146269243,"b'Minor - better formatting `{SizeBeforeCompactionInMb:#,#0}`'"
4059,146330419,"b'A cool optimization at some point would be to build object property map instead of array when parameter is of type string array or HashSet<string>, this might depend on size though. looku[""stringvalue""] is dictionary lookup compared to array search.'"
4059,146330746,"b""undefined !=== null, but I guess it doesn't affect here when parameters are passed via LINQ context"""
4059,146338495,"b""I think we want to avoid being too smart here.\r\nThe user can use a Dictionary / HashSet, and we'll recognize that."""
4059,146338914,"b'Can we make this a single value, instead of repeating it twice?\r\nSo something like:\r\n`filter(function(x){var array = [\\""id2\\""]; return (array).length===0||array.indexOf(x.TargetId)>=0;})'"
4058,146340698,b'We need to save all the conflicts that we resolved here.'
4058,146342074,b'Those are 2 different code paths. The existing conflicts are saved when we put the resolved document.'
4041,146495634,b'http://issues.hibernatingrhinos.com/issue/RavenDB-9094'
4068,146525301,b'Actually need to update the timestamp as well.'
4068,146525462,"b'Generate it always, it is better to have the creation than the branch'"
4068,146529077,"b""i'm not following which time stamp you refer to here,\r\ndo you mean to add\r\ntimestamp = Stopwatch.GetTimestamp();\r\nto the while?"""
4068,146529683,b'yes'
4072,146548046,b'Here you can create a dictionary of the position in the list to the command in question'
4072,146548289,"b'Use a `List<long>`, it is easier to manage.'"
4072,146556653,b'The linkedList was there in order not to pay O(n) on each removal (RemoveFirst vs. RemoveAt(0)).  I did https://github.com/ravendb/ravendb/pull/4074 and therefor it can be List again'
4075,146666358,b'Javascript _has_ startsWith method'
4075,146666456,b'Same here for endsWith'
4075,146666538,"b'However, we need to be sure that these are case insensitive, so we will introduce them as methods in `ScriptRun`'"
4075,146666644,"b""I don't understand how that is supposed to work"""
4075,146666729,"b'Better to implement it ourselves, we need to make sure that it has the same beahvior as the where clause.'"
4075,146666886,b'It is better to not support this.'
4075,146666934,b'It is better to not support this and error'
4075,146667245,b'bad test name'
4075,146667274,b'why skipped?'
4076,146668558,b'How do I compact _all_ indexes?'
4074,146669048,b'Change to `List<int>`'
4075,146669566,b'https://github.com/sebastienros/jint/issues/429'
4073,146670502,"b'Need to allocate this once, there is nothing that is unique per call'"
4075,146670819,b'Use polyfill:\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith'
4075,146670869,"b'However, regardless, we need to implement it directly.'"
4075,146677891,"b""that's an idea"""
4075,146694477,"b'actually, it works (except the <\'> at the end, which caused an error). The query syntax also supports multiple parameters to ""intersect""'"
4075,146697245,"b""it's the same .net Regex object in both of them, the differences are really minor\r\nhttps://github.com/sebastienros/jint/blob/dev/Jint/Native/RegExp/RegExpInstance.cs\r\nhttps://github.com/sebastienros/jint/blob/dev/Jint/Native/RegExp/RegExpPrototype.cs#L80\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Documents/Queries/Regex/RegexTermEnum.cs\r\n\r\nOn the other hand, we would probably like to perform some regex object caching, so maybe we still have to implement it ourselves..."""
4075,146751954,b'We want the caching and we want to get the timeout behavior'
4073,146754119,"b""that was the original implementation, you commented that i shouldn't do it so"""
4073,146757058,"b'I meant that we want to allocate it once, without the if, because there is nothing special about the call that require a separate instance.'"
4073,146757101,"b""For that matter, let's change `QueryBuilderFactories` to call directly to the relevant methods, instead of using delegate indirection"""
4078,146664155,b'Filter iterates whole collection and this gives array bounds error if not found? Find would have correct semantics if supported https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find . '
4078,146667620,"b""This is generally something that we don't want to do in this manner. Especially not catch a generic exception.\r\nHandle the expect error here upfront."""
4078,146667672,b'Same'
4078,146667851,b'Use `find` instead of `filter`'
4078,146798636,"b'I tried using find, it seems like it\'s not supported in jint, that\'s why i went with filter..\r\n\r\nrunning this query in studio :\r\nfrom Regions as r\r\nselect {  T : r.Territories.find(function(x){return x !== null;}) }\r\n\r\ngives this error :\r\nRaven.Client.Exceptions.Documents.Patching.JavaScriptException: At 4:2\r\n{""name"":""TypeError"",""message"":""Object has no method \'find\'"",""callstack"":"" at find(Esprima.Ast.FunctionExpression) @  8:3\\r\\n at find(Esprima.Ast.FunctionExpression) @  8:3\\r\\n""} ---> Jint.Runtime.JavaScriptException: Object has no method \'find\'\r\n   at Jint.Native.Function.ScriptFunctionInstance.Call(JsValue thisArg, JsValue[] arguments)\r\n   at Raven.Server.Documents.Patch.ScriptRunner.SingleRun.Run(DocumentsOperationContext ctx, String method, Object[] args) in C:\\Builds\\RavenDB-4.0-Nightly\\src\\Raven.Server\\Documents\\Patch\\ScriptRunner.cs:line 426\r\n'"
4078,146798807,"b'Add this as polyfill, thne.'"
4076,146859213,"b'Send this json for example:\r\n{\r\n\t""DatabaseName"" : ""Northwind"",\r\n\t""Documents"" : true,\r\n\t""Indexes"" : [""Orders/ByCompany"", ""Orders/Totals"" , ""Product/Sales""]\r\n}'"
4091,146896273,b'Maybe make it nullable and remove ConnectionStringType.None from enum completely ?'
4092,146943689,b'what is the meaning of this comment?'
4091,146946733,b'All enums should have `None`'
4097,147082007,"b""I added this 'continue' because I think it is missing. @aviv86 - can you verify?"""
4097,147084157,"b""Will get NRE here if the value isn't as expected. Use standard case to make sure we get good errors."""
4097,147084430,b'Why is the cast required? Or even all of this code? You are reading from `List<long>` _to_ `List<long>`'
4097,147084467,b'`current is List<long> ll`'
4097,147084518,"b'`current is Dictionary<string, long> dsl`'"
4075,147122305,b'you mean cache timeout?'
4075,147123830,b'MatchTimeout'
4103,147124130,b'Need to also check that this is the overload with just 2 args'
4104,147133629,b'return topology.nodes().find(x => x.tag() === nodeTag);\r\nand remove if (!node) {\r\n             return null;\r\n            }\r\n\r\n            return node;'
4104,147133781,b'code duplication '
4104,147133916,"b""it isn't cluster page, Why cluster class here? """
4104,147133992,b'please avoid inline css rules.'
4104,147137378,b'done'
4104,147137437,b'removed'
4104,147137500,b'removed'
4104,147140311,b'done'
4109,147176588,b'Why remove this?'
4109,147176723,b'Can this have been concurrently changed here?'
4109,147185710,"b""Must have been Resharper. It is not useful though, so it shouldn't do any harm"""
4109,147186750,"b""If that code runs concurrently, we have a race condition at\r\n\r\n            if (_indexWriter == null)\r\n                 return;\r\n\r\nSo the assumption is that it doesn't"""
4114,147194039,b'should be /databases/{database-name}/ endpoint'
4114,147194150,"b'and not operator, just database admin'"
4114,147194853,b'no need for this check since _periodicBackups is up to date'
4112,147241497,"b""Can probably move this outside the method, so we won't even make the method call in most cases."""
4113,147242556,b'wrong method name'
4113,147242675,b'Bad comment?'
4113,147242757,"b""Don't you need to escape the variable here, what if we have a quote in it?"""
4113,147242790,b'Same'
4113,147242832,b'same'
4113,147243076,"b""So `regex('a','b','c')` would be sent here?"""
4114,147243526,"b'Not good, this is an error, and should be reported as such, otherwise user may believe that the backup happened.'"
4114,147243596,b'How are you reporting status back to the user here?'
4113,147258003,"b'Not sure what you mean, escaping treament is in VisitValue'"
4123,147582516,b'Why use Contains? If you expect something else it is better to be explicit.'
4123,147628776,"b'`Ensure` will attempt to create the table, and error on the read tx\r\nJust call `Open`, no?'"
4123,147628840,b'Move this to a dedicated method'
4122,147629099,b'Why did you remove the `Url` comparison?'
4122,147633957,"b'Only for external replication, as I understand that it would be null on the beginning and we set this value later on.'"
4122,147634707,"b""Pretty sure that this shouldn't be the case, but for external replication, it uses ConnectionStringName, no? @karmeli87 Can you comment?"""
4122,147641924,"b""In external replication we fetch the destination url from the cluster that resides on in the Urls that defined in the connection string, so we can't compare two external replication tasks to be based on the Url.  """
4122,147648450,b'So how do we detect if two external replication are the same or not?'
4126,147646734,b'Is it used? + it has typo.'
4126,147648378,b'removed'
4122,147650151,b'http://issues.hibernatingrhinos.com/issue/RavenDB-9171'
4126,147650426,b'Why so much commented code?'
4126,147651112,"b""i'll remove this"""
4137,147777781,"b""`getMetadata(id)` ? Isn't that `getMetadata(doc)`? """
4136,147778228,b'What is the meaning here?'
4141,147794877,"b'You are turning a null into an empty object, is that a good thing?'"
4141,147794900,"b'You are turning a null into an empty object, is that a good thing?\r\n'"
4141,147794947,"b'You are turning a null into an empty object, is that a good thing?\r\n'"
4141,147795309,"b""Why did you make this change? This is now forcing us to make virtual interface calls, instead of direct calls.\r\nNote that inside `Raven.Server` we don't need to make any encapsulation of types."""
4141,147797082,"b'No, this will hide errors down the line, better to fail with NRE. \r\nthis is only called internally.'"
4141,147797838,b'This is already checked in `GetCollections`'
4141,147798242,"b'Why are you tracking just tombstones here? Why not just track the last etag that you backup, globally?\r\nThis is something that is actually already going on, and then we can just output that value for each of the collections that exists.'"
4142,147857724,"b""The problem is that in this case, we'll not see the notification that we stopped for low memory, maybe `MinBatchSize +1`?"""
4142,148011017,b'done'
4159,148085567,"b""Let's set the default to 5, 2 seems too low."""
4159,148086343,"b""This isn't what is going on here at all. This is actually the error if we can't raise the alert."""
4159,148086687,"b'This is not a good idea in this manner.\r\nFor example, we routinely have requests that last 15 seconds, any request to create an index that is waiting for it, for example.\r\n\r\nI think that the default should be 30 seconds.'"
4159,148115850,"b""Should be moved to PerformanceHintsConfiguration? Key should be 'PerformanceHints.TooLongRequestThresholdInSec' for consistency."""
4159,148117111,b'In my opinion it should be a PerformanceHint and it should aggregate itself like we do with Paging performance hints.'
4159,148197873,"b'Yes, good idea'"
4166,148311058,b'Why the `ToList` here?'
4166,148311897,b'No reason - forgot to remove it. Will remove with next PR'
4168,148325765,b'related to RavenDB-8369 code review -> no need for ToList() here'
4166,148335980,"b""Why can't we rely on the last etag from smuggler?"""
4166,148354369,"b'Using full backup, we need to get the last db wide etag, after all the current docs, tombstones, etc.'"
4168,148354798,"b""Don't we need the actual query here as well?"""
4168,148355022,"b'This is no longer a valid way for us to pass queries, we need to have the actual query / params / stuff that can help the user figure this out here.'"
4168,148355198,b'This make me nervous on the ground of multi threaded behavior.\r\nHow does this behave in this regard?'
4168,148355377,b'What limits the size of this?'
4167,148357278,"b'This can be simplified, see my next commit on this.'"
4167,148357818,b'need to remove this'
4169,148358356,"b'Can we use Arrow Functions here, instead?'"
4178,148520595,"b'But this outputs a _string_, not a value. \r\nThat is probably not a good idea.\r\nWe want to send the raw value, not as a string.'"
4178,148520704,"b'This only works because json.net does type coercion, might not work for other clients.'"
4188,148661764,"b""drop use of these methods, that isn't a good idea. \r\nYou are paying the cost of building the log string even if you aren't logging."""
4186,148664236,b'Who is intended to call all of this?'
4186,148664339,b'Why do we need both `ForceValidateTree` and `AssertTreeIsValid` ?'
4186,148664507,b'This needs to be a conditional method using `VALIDATE`'
4185,148670201,"b'While `load ""static value""` is important and should be supported, in this case, we shouldn\'t be putting the raw value in the query, instead, this should be written as `load $p0` or something like that, and we need to verify that this is supported server side.'"
4184,148672199,b'Need to update comment'
4183,148674058,b'Need to add additional message property here if so we can show an error to the user'
4183,148674209,"b'This is read and mutate concurrently, make sure this is thread safe.'"
4183,148674267,"b'Remember last message here, if identical to the previous one, make sure that we remove the previous one and insert this one instead. So this will just update the timestamp'"
4183,148674408,"b'`Stage 1`, instead'"
4183,148674525,"b'The `WellKnownServers` should be specified _once_, currently it is duplicated at least on `LetsEncryptAgreement` and here.'"
4183,148674725,b'what will happen if we are down and we cannot connect here?'
4183,148674802,"b'In addition to progress, need to also add logs. We might be interested in seeing what is going on there from the logs after the fact'"
4183,148674892,"b""`Stage 2`, and isn't this exactly the same as the default case?"""
4183,148674951,b'Is there any timeout on this?'
4183,148674997,"b'`Stage 3`, instead of `Stage3`'"
4183,148675177,b'Why limit to 15 retries? Have the same logic as with the api server.\r\nAnd make sure that we log things and send progress report.'
4183,148675313,b'`Stage 3`'
4183,148675533,"b""I'm not very happy about this, because this may cause us to generate a lot of certificates while trying to setup on Linux, no?\r\nI think we shouldn't do this validation here, but during the check phase later on."""
4183,148675894,"b""Same issue as before, if there is a configuration problem, we want to remember the certificate is already there so we'll not regenerate it all the time.\r\nProbably better to split this part entirely from the rest.\r\nSo we'll have the stage of generating the certificates and the zip file, then we'll validate the configuration, then we can proceeed."""
4183,148676008,b'This error is not accurate'
4183,148676274,"b""`8080` as the port is not likely to be what we want. We will usually want to get either `443`, if the user didn't specify it or have the user explicitly select it. \r\n"""
4183,148676345,b'Reminder that this error handling should be done.'
4183,148676425,b'Why assert this?'
4183,148676459,b'What is Grisha is asleep?'
4183,148676647,"b""This should be `None` or some other neutral value. If the user removed the value from the settings, we don't want to reset things. """
4183,148676813,b'Priority probably better as: \r\n* base64\r\n* path\r\n* exec\r\n\r\nThe reason is the level of complexity / security offered.'
4183,148676901,b'Reminder that we want to delete one of these.'
4183,148677736,"b'Filename here should be the first certificate public server url / server url of the first node with ""Cluster Settings.zip""'"
4183,148677792,b'This needs to be specified before you are sending data.'
4183,148677899,"b""Pretty sure you don't need `TryGetRequestFromStream`"""
4183,148677947,b'Same comment on the zip filename.'
4183,148678018,b'You cannot do this properly. You have an ongoing operation and the request has completed.\r\nYou need a _separate_ request to get the data.'
4183,148678073,"b""Don't need `TryGetRequestFromStream`"""
4183,148678112,b'Why use `AddOperation` here?'
4183,148678256,"b""Shouldn't we already have all the details we need without getting them from the outside at this point?"""
4187,148678747,b'What make you believe that this `CmpXchg.Match` call and not something else?'
4187,148678803,b'Bad formatting there.'
4187,148678967,b'Explain _what_ is not supported.'
4187,148679037,b'Explain what is not supported.'
4187,148679191,b'Can `GetCmpXchg` return null?'
4187,148679250,"b'For completion sake, also add `LazyCompressedString` here'"
4187,148679534,b'Move to dedicated method'
4187,148679544,b'Move to dedicated method'
4187,148679679,"b'Can safely be a singleton, I think, to avoid the heap allocation'"
4187,148679761,b'Include the `_operatorType` here.'
4187,148679869,"b""Shouldn't this be the other way around? The unique is `Karmel` and the value is `users/1`?"""
4187,148680215,"b'This is actually something that I\'m really against supporting. I\'ve tracked how this is implemented, but intuitively, this require you to do a per value filter, which can be _very_ expensive on large collections.\r\nInstead, we want to support queries such as:\r\n\r\n`FROM Users WHERE Name = cmpxchg(""Hera"") or Name = cmgxchg($name)`\r\n\r\nBecause this way we find the match once, and then use that to query the index.'"
4187,148680246,b'Same issue here.'
4178,148680524,"b'`TryGetValue`, instead.'"
4186,148719625,b'RavenDB-9229 Create a new schema version to address RavenDB-9225\r\nhttp://issues.hibernatingrhinos.com/issue/RavenDB-9229'
4186,148719695,"b'We need the ""normal"", attribute protected path, and we need the calls for the schema update'"
4186,148719752,b'See my changes on top of yours'
4186,148719915,"b""Thee is one overload for that purpose: https://github.com/maximburyak/ravendb/blob/dba853067d32c8a36a525906afcc2860e20a7855/src/Voron/Data/Fixed/FixedSizeTree.cs#L327\r\n\r\nI've created another function, to allow fst validations, during our schema validation code.\r\nAnd they share the same function to prevent code duplication. """
4186,148720033,"b'Yes, but you had 3 of them `ForceValidateTree`, `ValidateTree` and `AssertTreeIsValid`'"
4186,148953419,"b'Yeah, I could keep only two of them'"
4196,148965108,b'Probably want to add the same for `PutDocument` and `DeleteDocument`.'
4199,148965141,"b'If the field name is `id()`, shouldn\'t it be then `id(\' +alias+"")` ? '"
4205,149358232,b'Use `HashSet<string>` with `OrdinalIgnoreCase`'
4210,149600023,b'NEed to move to ctor'
4213,149428188,"b""Should be: 'SerializeMetadataToJsonStream' or even 'TrySerializeMetadataToJsonStream' since it returns bool?"""
4213,149608323,b'Same here?'
4229,149698088,"b'Why is this one or the other, why not have a test for both?'"
4231,149784709,"b""The logic here is that this is what we use for development.\r\nWe need to update the `settings.json` we use for _deployments_, we'll get that with the RC2 deployment work"""
4239,149909364,b'@ayende Check for public server url setting is made in one place (within this method). Please see https://github.com/ravendb/ravendb/pull/4239/files#diff-99656d10b23ccec3011c0af6f6cbe346R1569'
4244,149958423,"b""Change to: \r\nThe database '{dbName}' on node {promotable} is not ready to be promoted, because the mentor hasn't sent all of the documents yet."""
4244,149958582,"b""Change to:\r\nThe database '{dbName}' on node {promotable} is not ready to be promoted, because the indexes are not up-to-date."""
4249,149982939,b'exposing port for SNMP'
4248,149994597,b'What value does this exception add?\r\n'
4248,149995234,b'Change name to `Ensure...`'
4252,150069468,b'Tried this on windows + chrome only.'
4252,150079477,b'Can this be null? (RTM)'
4252,150079611,"b""This should be `nodeTag + '.'`, otherwise you'll match `a` on `ayende`."""
4252,150079782,"b""I'm not really happy with this, at the same time that I agree that this is a good idea.\r\nNote that this will only work on the local machine, won't work with Docker, for example.\r\n"""
4252,150080060,"b'This should be an option in the UI, defaults to yes (RTM)'"
4252,150080172,"b'This is now dead code, no?'"
4262,150267276,"b'Not good, need to also consider implicit ports. `http://localhost` changed to `https://localhost`'"
4262,150267554,"b'I think it would be better to supply another parameter on docker ""force port usage"" or something like that.'"
4268,150414518,"b'We are missing here an indication that the issue is really DNS.\r\nWhat if this is a busy port? Firewall, etc? \r\nNeed to validate that the error is with DNS by making DNS query and seeing it fail'"
4269,150414341,"b'This was intentionally removed. We need this to be the _global_ domain, for all the nodes, not `a.domain`, etc.'"
4269,150414389,"b""You didn't commit here, what is this supposed to do?"""
4269,150418923,"b""We still need this for secured setup where we don't get a domain from the user."""
4282,150528281,"b'This is the url you need to enter for staging:\r\n""https://acme-staging.api.letsencrypt.org/directory""'"
4285,150572821,"b""Can we get this from the server, rather than hard code the '-` or `.` choice?"""
4285,150625369,"b""we will (reported in separate issue) - for now I've changed this to make it work. """
4307,150864264,"b""Shouldn't we also specify a well known path here?"""
4307,150971520,"b""We don't know a good path with proper permissions. Windows' `/raven` won't do here."""
4307,151039264,b'`$home/raven-dbs/`?'
4307,151065112,"b""hmm most apps on linux just use `~/.appname` (~ would probably need to be expanded by us) when it comes to saving local app data, but then it becomes hidden in unix fs sense. \r\n\r\nOnce it's set up system-wide however most appropriate dir would be e.g. `/var/lib/raven`. See https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch05s08.html and https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html .\r\n\r\nSo answer is it depends. The best default to which we have access to is stuff in home dir as you pointed out. Since we have `C:\\Raven` on Windows, we could go with `~/raven` for Linux."""
4307,151068315,b'Note that `C:\\Raven` also requires admin privileges on most sytems'
4330,151271924,b'This will throw for async queries?'
4333,151327892,b'Why are you doing this and killing the stack trace here?'
4332,151328022,b'Why is that? What about an export from a 4.0 system that has auto indexes?'
4332,151343599,"b""I think that's ok. This only for static indexes (in particular old auto indexes having Linq def):\r\n\r\nhttps://github.com/grisha-kotler/ravendb/blob/c864b4a29d06334478638e5b4bb47fa84069c476/src/Raven.Server/Smuggler/Documents/DatabaseSmuggler.cs#L277-L292\r\n\r\nAuto 4.0 indexes are handled here:\r\nhttps://github.com/grisha-kotler/ravendb/blob/c864b4a29d06334478638e5b4bb47fa84069c476/src/Raven.Server/Smuggler/Documents/DatabaseSmuggler.cs#L252-L265"""
4332,151344548,"b""Just exported / imported db with auto index. It's fine."""
4333,151439510,b'Debugging artifact I forgot to remove. Will fix this.'
4346,151864227,"b'This would throw a _very_ confusing error, no?'"
4346,151865205,"b""Yes, but the check is in QueryMetadata, not here. This is 'just in case'."""
4346,151865353,"b'I saw that, but if things change and we still get there, the error is going to be bad for users.\r\nSo we either revert this and use the upstream call, or do proper handling here.'"
4349,151874861,b'I think that this should be outside `tryf` block?'
4353,151985856,b'What happens if this is also doing a Rename of the json property name?'
4353,151988035,"b'It seems to be broken:\r\n\r\n            [JsonProperty(""Renamed"", NullValueHandling = NullValueHandling.Ignore)]\r\n            public decimal? ResultValue { get; set; }\r\n\r\nProduces:\r\n\r\n    FROM Documents as s WHERE id() IN ($p0) SELECT { Id : id(s), Results : s.Results.map(function(x){return {ResultValue:x.ResultValue};}) }'"
4353,151990959,"b'Yes, that needs to be fixed\r\n'"
4356,152024252,b'Use DatabaseDoesNotExistException.Throw(name) here.'
4356,152026309,b'If all exceptions are DatabaseDoesNotExistException then maybe it is better to throw that instead of AggregateException? Just an idea.'
4356,152028594,"b""I don't think it will be best for us here, when we throw the exception, you only see the url and the name of the database only in the inner exception you can see that this is DatabaseDoesNotExistException so I changed it to be more clear for the users"""
4356,152029525,"b""We can't do that not all the exception will be DatabaseDoesNotExistException,\r\nyou can give the store a list of URLs. When you have more the one the requestExecutor will go and check on each of those URLs you can get different errors from different servers"""
4356,152034861,b'Not true. Check https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Client/Exceptions/Database/DatabaseDoesNotExistException.cs#L33'
4356,152035018,b'This is why I suggested to throw it when _all_ exceptions are DatabaseDoesNotExistException'
4356,152037315,"b'I checked it out, the message I am getting is not enough in my opinion to understand it,\r\nPlease check it out, just create a store and try to load from nonexistent database then you will see, wait for the last message the AggregateException.\r\nlocalhost -> test that is what I am getting '"
4356,152038185,b'You should get https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Client/Exceptions/Database/DatabaseDoesNotExistException.cs#L52 message when\r\n```\r\nDatabaseDoesNotExistException.Throw(name);\r\n```\r\nis used?'
4356,152039975,b'You will have to check all your error list to make sure every each of the exception are DatabaseDoesNotExistException'
4356,152041816,"b""Didn't notice the the .Throw in the first commit I looked on the code and just completed the pieces I will change it Thanks"""
4357,152044539,b'Leaving my comment from previous PR: https://github.com/ravendb/ravendb/pull/4356#discussion_r152026309 for further discussion.'
4356,152045089,b'You know it is the same message but for future use it is importent'
4356,152045733,"b""I know, but it's better to have one place to generate the message."""
4349,152072588,b'changed'
4357,152204214,"b'This is wrong, this should always throw. \r\n`DatabaseDoesNotExistsException` is not recoverable.'"
4358,152204582,b'I love the impact of this change vs. number of chars changed.'
4363,152205066,"b'This not a tryout, this is an _actual_ vote. The text needs to reflect this'"
4357,152206022,"b'What happens if you have more then one url in the store, and in one of those url the database exists?\r\n'"
4369,152270956,"b'Delete this, it is not required.'"
4369,152276287,"b""Change this to use a direct call. It is going to be called a lot, let's not do all these allocations"""
4369,152276361,"b'This is not required., nor is the sorting.'"
4371,152363909,"b""Let's avoid the allocation here, we can do this without calling `ToString` by comparing directly."""
4371,152364102,"b'Why prevent this from match `startsWith(Name, ""something"")`.\r\n'"
4371,152364136,b'What if this is a parameter?'
4373,152364632,b'use `start` for consistency'
4373,152364660,b'use `pageSize` for consistency'
4373,152364709,b'use `startsWith` for consistency'
4373,152365163,b'Do you really have to allocate a string here?'
4373,152365622,"b'This is not a good idea. You just deleted this object, and now you are returning an pointer to it?\r\nThis is now pointing to undefined memory. You need to clone it.'"
4373,152366282,b'Why are you doing this? This is invalid.\r\nYou are getting this from a totally different value.\r\nYou need to use `raftIndex`'
4373,152367788,"b""These parameters don't follow our standard conventions. Use `GetStart`, `GetPageSize`, etc."""
4374,152369304,b'What if this is the same port as we are currently using?'
4374,152369469,"b'Also, this is wrong. You are checking _all_ listeners, but we are bound to IP / port, not just port.\r\nso I may be listening on `127.0.0.1:443` but it is fine to setup binding for `127.0.0.2:443`'"
4363,152419492,b'done'
4377,152426714,b'Should we commit with this?'
4377,152479957,b'Why is a single line string special in this way? What happens if we have a space and then a control char?'
4377,152479977,"b'Ideally, not. But if a debugger is not attached this is a noop'"
4373,152490444,"b""We try to delete the compare exchange value here, so if we successful (or the value hasn't existed at the first place) then res will contain (-1, null)."""
4369,152495609,b'It is actually needed.  We saw big perf diff without it '
4369,152495935,b'Okay'
4383,152528728,b'And where are you recording that you voted for him in this term?'
4383,152535268,b'this is trial elections'
4387,152540003,"b'Wrap in a `using`, because you are leaking the `LazyStringValue` instance.'"
4387,152540169,b'Use named values here.'
4387,152540206,b'Named values here.'
4389,152542956,"b'Use `Ordinal`, not `Invariant`.'"
4394,152556754,"b'No, wrap it in another exception, here you just lost the stack trace.'"
4395,152559897,b'Do we need to apply it to X64 also? :)'
4395,152560080,b'Also I think that the 2nd link is sufficient.'
4401,152594461,b'Maybe it would be better to expose it via Conventions?'
4401,152596608,b'I think we will have to change the HttpCache in requestExecutor if we want to expose it via Conventios. but I am not sure.'
4401,152597945,b'We could introduce MaxHttpCacheSize (or MaxRequestExecutorCacheSize ?) in DocumentConventions and in RequestExecutor constructor initialize the HttpCache with that value. Should be relatively easy to do and the configurability level would be much higher.'
4401,152603857,b'Done\r\n'
4402,152620933,"b'Maybe we can use https://github.com/ravendb/ravendb/blob/v4.0/src/Sparrow/Size.cs here? It is easier to understand for user what kind of units needs to be used. E.g. in the description here we have 512MB, so it gives me an impression that the unit here is in MB, which will cause confusion, because putting 1024 will not give me 1GB.'"
4404,152641414,b'I think that this method should be in DatabaseRequestHandler'
4404,152642378,b'is this needed?'
4402,152721922,"b'I like that idea, yes.'"
4404,152722790,b'Why not use `ToJson<TValue>` overload?'
4404,152722866,"b'You are always returning an array here, but in most cases, this will actually only have a single value for property'"
4404,152722911,b'What ensures that there is only ever a single thread accessing this dictionary?'
4404,152722952,"b""No, it ins't, neither is the `@metadata` section"""
4426,152857338,"b""Is 'redist' value here correct?"""
4426,152859472,b'fixed'
4426,152862180,b'What about the error message here? Or is it handled inside the `IsValid`?'
4434,153061990,b'What ensures that this is not used in multiple threads at the same time?'
4434,153062110,"b'The Update() itself is not thread-safe, yes. \r\nWhere it is used, there is a lock:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/NotificationCenter/RequestLatency.cs#L29'"
4434,153062121,b'And what about readers who may access this at the same time?'
4439,153068812,"b'Use `GetOrCreate`, instead'"
4439,153068825,"b""This shouldn't be possible. You should have just one instance here per db, only while it is loading"""
4439,153068871,"b'This need to also go to the usual logger, with the db name here.'"
4439,153068993,"b'Once we are done initializing, we can drop this.'"
4439,153069176,b'This is destructive process.\r\nWe want to keep getting the same thing over and over.\r\n'
4439,153069200,"b'Better to pass a lambda here, instead of the same `ConcurrentQueue`'"
4439,153069217,"b""This can't be null"""
4439,153069223,"b""This can't be null"""
4439,153069228,"b""Can't be null"""
4444,153114579,b'You are leaking this memory until the context is reset.'
4448,153122860,b'const ;-)'
4448,153123819,b'Can we use Size type here instead of long? We are doing this for other fields.'
4448,153123869,b'Can we use Size type here instead of long? We are doing this for other fields.'
4448,153115808,b'Why not use the `GetOrCreate` that is already on the dictionary?'
4448,153126469,"b'Maybe it would be better to stop the batch at the current point, not wait till it is completed?\r\nImagine a situation when we have 100M batch and we only processed 1M docs.\r\n\r\nDisabling the index should IMO end the batch at 1M and commit the changes, not wait till other 99M is done. It can be done by ending the foreach loop in MapDocuments I think. Thoughts?'"
4448,153155552,b'fixed'
4448,153158795,b'done'
4448,153158982,"b""it's being stopped here:\r\nhttps://github.com/ravendb/ravendb/pull/4448/files#diff-a98877097408ea1a038c4101886f9a9bR2395"""
4454,153168800,b'why did you delete the existing test?'
4448,153174114,"b'Yes, my bad. Great!'"
4464,153197642,"b'This does not belong in the base class, move it to the dedicated handler'"
4464,153198445,"b'This is already checked, in this db you are the admin.'"
4464,153201734,b'Add logging here?'
4448,153207264,b'done'
4466,153208810,b'Can we use lambda in add? This will create instance of CollectionStats even if value exists.'
4466,153217895,b'thanks\r\nfixed'
4474,153296417,b'Is this error logged anywhere?'
4486,153446853,b'Field names are case sensitive. Why did you need to change that?'
4486,153462630,"b'Why do you need this? The `operatorType` should be enough, no?'"
4486,153463833,"b""no, it isn't, see:\r\nvar query = session.Query<Bunny>().Where(u => !u.Id.In(bunnies))\r\nWe get to id equal something but we lose the fact that we are under negation"""
4474,153468033,b'fixed'
4487,153449304,"b'?\r\n\r\nAnyway, if APPDRIVE and ~ is no more then what would we put in the package `settings.json`?'"
4487,153450068,b'Also Docker:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/docker/ravendb-ubuntu1604/Dockerfile#L8\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/docker/ravendb-nanoserver/Dockerfile#L5'
4487,153462063,b'Add comment that relative path will be used from the base directory'
4495,153596152,"b""What is the use of `metadataOnly` here? You aren't _getting_ the metadata here."""
4495,153596249,b'What is the scenario that is enabled by allowing to get metadata of a range of revisions?'
4494,153599297,"b'`inner is DatabaseDisabledException`, but this looks _incredibly_ fragile.\r\nWe can use `ExtractSingleInnerException` here.'"
4504,153686235,b'Not acceptable.\r\nThis requires an _expensive_ string allocation & formatting here.'
4504,153686244,b'Here is another string allocation'
4504,153686352,b'why on the same line?'
4504,153686569,b'Why the switch from R?'
4507,153761651,b'It should be ignored only if we are recreating indexes'
4507,153764170,"b'No, it should never be ignored. What is the scenario where that is a good thing to do?'"
4507,153764232,b'Why is ignoring the exception a good idea?'
4507,153764409,"b'No, this should NOT be called as part of the index store / document store startup.\r\nThis should be called as part of the Create Database.'"
4507,153764466,b'Avoid SpinWait in tests.'
4519,154051862,b'I think it would be better to use CreateDatabaseConfiguration from DatabasesLandlord (check note with IndexPath)'
4519,154052086,b'typo :)'
4519,154052174,"b'should use configuration.Indexing.Path here, not do any combines on your own'"
4519,154052954,"b'the other reason is that the indexes path can be changed server-wide, so it should be taken into account. This is why it is better to create a configuration via databasesLandlord'"
4519,154052972,b'typo :)'
4519,154053216,"b'FYI, never use configuration keys directly, use RavenConfiguration.GetKey(x => x.Core.DataDirectory) instead. It is not needed if the configuration will be created via DatabasesLandlord though, just informational.'"
4519,154053329,"b""I think in raft it is called index so maybe better name would be 'GetRaftIndexCommand' ?"""
4519,154057694,b'We are using DataDir in documentRecord settings\r\n'
4519,154063958,b'done\r\n'
4519,154063998,b'using CreateDatabaseConfiguration '
4519,154064016,b'fixed'
4519,154064045,b'fixed'
4519,154064076,b'fixed'
4464,154074996,b'We can move it to DatabaseRequestHandler'
4464,154075274,"b""Didn't understand, you saying that the comment is not right here because we are an admin?"""
4520,154109513,b'I think that this would fail on paths with white space.'
4521,154110637,"b""This is meant to be used with a `Location` header, and that isn't a good idea, we aren't sending it.\r\nWhat is better for us is to actually specify the header values so this isn't cached."""
4524,154113111,b'why not `header.IsTombstone` instead? :)'
4519,154112799,b'Remember to remove this after: http://issues.hibernatingrhinos.com/issue/RavenDB-9597'
4519,154113173,b'what if this is not viable for this node?'
4519,154115021,b'Not viable how?'
4519,154115222,"b'I can create this on a different node, no?'"
4519,154115236,b'Wrote a reminder in the issue!!'
4464,154115613,"b""The comment isn't right, because the router already verified that we are admin of the particular database that we are using, yes."""
4524,154117050,b'Because i modified this before your comment...'
4527,154121193,"b""aren't we deleting `@` properties on save?"""
4527,154124809,b'Do we? if so its not working since i saw this on the studio because i actually test my code before i send a PR'
4527,154125509,"b'If this is working, great'"
4495,154517550,"b""This is a mistake, should have been removed. I'll fix that."""
4495,154517565,b'To get their change vector and last modified date. This way you can load iterate and load just the revision that you want.'
4495,154517579,b'https://github.com/ravendb/ravendb/pull/4538'
4549,154531516,b'Need to log this.'
4546,154531730,"b'You have now flipped the meaning here, did you verify that this means the same.\r\nBefore, it was off by default, now it is on by default.'"
4546,154531735,b'Same'
4546,154532720,"b""Need to review all creation of such things, to ensure that we don't have `Active` missing and meant to be disabled there."""
4546,154611840,"b'found only one place where we create such things and the flag is missing, and changed it '"
4562,154621148,b'@redknightlois Please optimize this here.'
4563,154625837,"b""Only for values that can't roundtrip to double"""
4563,154625980,"b""Only if value doesn't roundtrip"""
4563,154626037,b'Check roundtrippability'
4563,154626066,b'Same'
4563,154626090,b'Same'
4569,154636773,b'Can you move the `curField.lenght < 512` before the regex check? That can also improve perf.'
4569,154636930,b'you are right  - fixing that'
4576,154857790,"b""I don't like this data type. Delay replication for what? Ticks, seconds, minutes, years?\r\nBetter to use TimeSpan here."""
4576,154857848,b'I think this should error in this case.'
4576,154858375,"b""Shouldn't we send the last change vector we scanned here? (Up to the item we stopped for being too early)"""
4580,154858616,"b""Let's avoid expensive Linq calls here."""
4580,154858683,"b""Let's avoid expensive Linq calls here.\r\nInstead of doing this on each call, do it when we initialize the loader."""
4575,154859704,b'The location of this file is wrong. It is most certainly not important enough to be at the root of the tree.\r\nPut it in the `scripts` directory'
4575,154859769,"b'This is going to almost certainly conflict with the default Kestrel one, no?\r\nWhy no `8080`?'"
4575,154859816,"b'Better to make it a variable on the `Main`, where it is  used.'"
4575,154859878,"b'Extract all of this into a method.\r\nAlthough, why are you not using the sample data for this?\r\nThat is exactly what it is _for_.'"
4575,154860196,b'What if they already running it as a service?\r\nWhat about the reference to the setup wizard?'
4575,154860253,"b'Change this to a ""Hello World (.NET)""'"
4575,154860318,"b'Nope.\r\nHave them _manually_ create a new db and the sample data, then just add the snippets they need to read an employee'"
4581,154875231,"b""shouldn't we do if `requestExecutoer.Certififate != null` ?"""
4581,154875657,b'Fixed.'
4576,154883680,"b'If we have documents to send, but were delayed (so in this particular case we have _nothing_ to send), we will be sending the current change vector without sending the actual documents. \r\n'"
4576,154884129,b'Seconds would be ok? so we can also test it in reasonable time.'
4576,154885331,b'Any reasons _not_ to use timespan?'
4576,154885431,b'What if we filtered documents and still have things to send?'
4576,154886518,b'So we are not ending in this code path. This is only if we have nothing to send\r\n'
4583,154897220,"b'Use markdown bullets, instead.\r\n'"
4583,154897651,b'`shippers/1-A` is the new values'
4583,154897774,b'Just call: `dotnet add package RavenDB.Client --version 4.0`'
4587,154952089,b'There is actually no support for `false` in RQL'
4587,154954360,"b""Other ways to fix this? Or throw an exception. Having the opposite is a bit ackward, isn't it?"""
4587,154955950,"b""I assigned the issue, we'll look int this."""
4587,154957291,b'Thanks'
4591,155165564,b'use a power of 2 here.'
4591,155165606,"b""where does the user get an error if the license doesn't allow it?"""
4592,155170476,b'we removed this entirely.'
4591,155172558,"b""It's validated inside the `CanDelayReplication` method and raise a notification if the license doesn't include this feature (treated as any other feature that is not included in the license).  """
4583,155461359,b'Run the command :`dotnet add package RavenDB.Client --version 4.0`\r\n'
4612,155512319,b'Do we even _have_ `Cutoff` anymore?'
4612,155520632,b'No need for this indeed. https://github.com/ravendb/ravendb/pull/4613'
4614,155718165,"b""Not the right place for this. This isn't something specific for replication.\r\nIt is generic for any type of error where we can access the topology but not the db."""
4615,155718502,b'Can `mentor` be null here?'
4615,155718715,"b""Let's avoid this Linq here in favor of more readable `if / continue`"""
4625,155942780,"b""Isn't this the default already?"""
4625,155942785,"b'Also test on Linux, please.'"
4625,155942919,"b'No, the default is `true`. And the user confirmed that this fixed his issue.'"
4626,155944339,b'typo'
4626,155944647,b'We are already in `Databases.` so maybe ConcurrentLoadTimeoutInSec would be enough?'
4626,155944653,b'Maybe change to MaxConcurrentLoads?'
4626,155944664,b'We should not change LegacyConfigurationEntry value'
4626,155944672,b'Maybe change to MaxIdleTimeInSec?'
4635,156004752,"b""I don't think this is right. \r\nYou are using the cluster topology, but a db isn't necessarily on all the nodes in the topology."""
4632,156018255,b'`--no-output` ?'
4632,156021165,b'Changed'
4637,155953984,b'Maybe it should be moved to Raven.Client.Exceptions.Documents.Indexes and inherit from RavenException so it would be propagated to client?'
4637,155954053,b'I think we should do the same thing for static indexes?'
4637,156005867,b'Yes.'
4637,156005926,b'We also want to give the user the current state of the cluster.'
4637,156005968,b'Yes'
4637,156019886,"b""A static index is something that you deploy and we don't allow to deploy new indexes while the cluster is down since it is a raft command. \r\nQuerying is something we allow when the cluster is down, since this error can come as a surprise for the user who thinks he is not doing a cluster operation, we need to be more clear.\r\n"""
4637,156020153,b'It still deserves a better error.'
4637,156020230,"b""In general, there is no situation in which I'm every going to say, we don't need good error handling here."""
4637,156020950,"b""@ayende do you mean, proving the cluster topology?\r\ni'm not sure i can provide the information regarding which node is down since if i'm a follower and i can't communicate to the leader (or there is no  leader) i have no way of knowing the state.\r\nUnless you meant that i'll ping all nodes and see who is alive and report that?"""
4637,156022356,"b""You need to provide the cluster _status_, not the topology.\r\nWhen error reporting, we don't go outside our local state. We need:\r\n* Current node state (follower, candidate, leader)\r\n* Last status change reason (and when it happened).\r\n"""
4637,156025578,b'Also for consistency it would be better to throw same kind of exception both for static and auto.'
4637,156025668,b'Need to inherit from RavenException'
4637,156034392,"b'We have HandleAutoIndexChange method, not sure if we should do the same there?'"
4637,156034511,b'Should this be applied to CreateIndex(static) also?'
4637,156048968,b'yes'
4641,156054845,b'Check that `KeysByUrl` are not null here.'
4637,156062196,b'From what i saw there is a single point where an auto index was created so i caught it closer to the call. for static index there were multiple paths'
4637,156063865,"b""I'm not sure which overload you're referring to here, is it public async Task<Index> CreateIndex(IndexDefinition definition)?"""
4644,156064805,b'Need to add logs (maybe even alert) here.'
4647,156073760,"b'Also, libsodium. Wonder if we need to list the JS ones as well?'"
4638,156005820,"b""No, there are too many ways in which this can go wrong.\r\nThe way to validate that we aren't adding the same node twice is to _go ask that node_ and see if it is there already"""
4647,156079247,"b'libsodium fixed in https://github.com/ravendb/ravendb/pull/4651\r\n\r\nWRT JS dependencies, the full list would be:\r\n1) https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Studio/bower.json\r\n2) https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Studio/package.json\r\n\r\nMaybe just put those links there?'"
4649,156079513,b'typo'
4650,156078471,"b""Let's change the timing all to seconds, minutes is to big a granularity"""
4647,156079988,b'okay'
4650,156083529,b'Wrong description.'
4650,156084331,b'The usage of this setting is only when deleting docs from the studio - not sure if it really deserves the configuration option.\r\n\r\nDid you intent to introduce it in for delete / patch by query operations?'
4657,156286908,"b""A question, 'new console' alone doesn't install telemetry right?"""
4650,156353562,"b'Please see my question to you at http://issues.hibernatingrhinos.com/issue/RavenDB-9701\r\nWe need to modify this, I know. '"
4650,156361778,b'Answered there'
4668,156374538,"b""if it has load error you don't update relevent field. Is it intendent? """
4668,156374838,b'nice!'
4669,156376812,b'name name '
4669,156387476,b'external replications -> **External Replication**\r\netl -> **ETL**\r\nbackup -> **Backup**'
4669,156387643,b'Raven etl -> **RavenDB ETL**'
4669,156387790,b'Sql Etl -> **SQL ETL**'
4669,156387938,b'External replication -> **External replication**'
4669,156388058,b'backup -> **Backup**'
4674,156465546,b'Better log message here.'
4674,156465588,b'why is this commented?'
4669,156466913,"b""Aren't we missing SQL ETL tasks here too?"""
4669,156467010,b'And subscriptions?'
4669,156467263,"b""Shouldn't this be called for subscriptions?"""
4668,156577441,"b""I do set `errored` to true but I do not set relevant to false as the studio would give notification that the node is not relevant for this DB, but the actual issue was that the db wasn't able to be loaded."""
4674,156593741,b'no longer valid code - removed in https://github.com/ravendb/ravendb/pull/4681'
4674,156593766,b'fixed in https://github.com/ravendb/ravendb/pull/4681'
4690,156686096,b'post or query here?'
4690,156691700,b'fixed'
4692,156751904,"b""Should't we use Environment.NewLine here?"""
4695,156758848,"b""Better exception, also add the item url so we'll have something to help us track down the cause."""
4695,156759009,"b""Shouldn't this be in a try finally?"""
4695,156759717,"b'Yeah, it should. Correcting. '"
4695,156759864,"b'Couldnt find any that makes sense, do you have any particular one in mind?'"
4695,156760251,b'Low memory exception? BAsically I just hate the bare exception stuff.'
4694,156760918,"b'Closed the issue, I think that this needs to be removed.'"
4692,156880876,"b""Also, shouldn't we _only_ avoid calling `Console.Clear()` since that was the problem? The above change also won't print the error message to the console so it won't show in the details of 4.0 studio. The user won't be able to figure out why the process has failed."""
4704,156943901,"b'I think this needs an issue, it should be hidden behind an `#if`, IIRC'"
4704,156944091,"b'IIRC, we can _remove_ this entirely.'"
4704,156944197,"b""Shouldn't we check monitoring here?"""
4704,156944510,b'Pretty sure that we can delete this entirely.'
4704,156945910,b'creating an issue for that'
4704,156946093,"b'yes, creating an issue for that'"
4692,157157008,b'Both addressed in https://github.com/ravendb/ravendb/pull/4718'
4650,157368533,b'fixed in https://github.com/ravendb/docs/pull/407'
4713,157067929,"b""shouldn't this be handled like other methods? In LinqExtensions?"""
4713,157068366,b'Do not like this. It should be handled with a dedicated method.'
4713,157068396,b'Why public?'
4713,157068418,b'Why public?'
4713,157068501,b'I think that we should not remove that support from DocumentQuery'
4713,157068784,b'Why parameter cannot be used?'
4713,157069194,b'note that QueryMetadata is cached and used concurrently'
4713,157085025,"b""Ok, this can be handled in LINQ like this, but for DocumentQuery we need to introduce IMO:\r\n- `WhereCmpXchgEquals(fieldName, value)`\r\n- `WhereCmpXchgNotEquals(fieldName, value)`\r\n- `WhereCmpXchgGreaterThan(fieldName, value)`\r\n- `WhereCmpXchgGreaterThanOrEqual(fieldName, value)`\r\n- `WhereCmpXchgLessThan(fieldName, value)`\r\n- `WhereCmpXchgLessThanOrEqual(fieldName, value)`\r\n\r\nThis will have to be implemented in `AbstractDocumentQuery` and will give you a better approach on handling this in LINQ, so you will not have to pass 'MethodCall' instance and will be able to handle this in a more straight-forward way.\r\n"""
4713,157133401,"b'For now, we can just do Equals / not equals. We can support the rest after RTM.\r\n'"
4713,157133456,b'Agreed'
4713,157133545,"b'You are sending the parameters name as a string? \r\nWe _want_ this as a parameter in queries, so users can send different things and it will generate the same query '"
4713,157133563,"b""This is important, we can't modify it"""
4713,157149823,"b'Probably a good idea would be to just add overload only to \r\n- `WhereEquals(fieldName, CmpXchg)`\r\n- `WhereNotEquals(fieldName, CmpXchg)`\r\nand introduce a class called `CmpXchg` that would also be used in LINQ queries:\r\n```\r\nfrom u in session.Query<User>()\r\nwhere u.Name == CmpXchg.Create(""Hera"")\r\n```\r\nThis would save a lot of troubles.'"
4713,157377267,b'You are changing QueryMetadata here. Changing `be.Right` to `ValueExpression` will mean that you will never go into this if-statement again for future queries.'
4713,157377320,b'use nameof if possible'
4713,157377423,b'How to use this feature via DocumentQuery?'
4713,157377789,"b""make private and introduce static field 'Default' ?"""
4713,157377901,"b'we do not need to build the args if method in not CmpXchg, right?'"
4713,157378082,b'Enum would be better here?'
4713,157378100,b'can this be made internal?'
4713,157378173,b'Think about DocumentQuery here. Maybe what you actually want to create here is the type that will be used there.'
4725,157378557,b'CRLF issue'
4725,157378560,b'CRLF issue'
4725,157378562,b'CRLF issue'
4725,157378564,b'CRLF issue'
4725,157378566,b'CRLF issue'
4731,157481339,b'Where does this go?'
4731,157482895,b'```\r\nravendb@ravendb:~/RavenDB/Server $ ls -ltr RavenData/\r\ntotal 4\r\ndrwxr-xr-x 3 ravendb ravendb 4096 Dec 18 12:50 System\r\nravendb@ravendb:~/RavenDB/Server $ \r\n```'
4731,157482997,b'relative..'
4731,157483385,b'relative to what?\r\nSo if I open this from a different path I get different data?'
4735,157492310,b'crlf'
4731,157496163,"b'no.  it will be always in the assembly\'s directory: i.e.:\r\n```\r\nravendb@ravendb:~/RavenDB $ ./Server/Raven.Server --ServerUrl=http://0.0.0.0:8080 --Security.UnsecuredAccessAllowed=PublicNetwork\r\n       _____                       _____  ____ \r\n      |  __ \\                     |  __ \\|  _ \\ \r\n      | |__) |__ ___   _____ _ __ | |  | | |_) |\r\n      |  _  // _` \\ \\ / / _ \\ \'_ \\| |  | |  _ < \r\n      | | \\ \\ (_| |\\ V /  __/ | | | |__| | |_) |\r\n      |_|  \\_\\__,_| \\_/ \\___|_| |_|_____/|____/ \r\n\r\n\r\n      Safe by default, optimized for efficiency\r\n\r\n Build 40, Version 4.0, SemVer 4.0.0-custom-40, Commit d7047cd\r\n PID 2952, 32 bits, 4 Cores, Phys Mem 927.32 MBytes, Arch: Arm\r\n Source Code (git repo): https://github.com/ravendb/ravendb\r\n Built with love by Hibernating Rhinos and awesome contributors!\r\n+---------------------------------------------------------------+\r\nUsing GC in server non concurrent mode retaining memory from the OS.\r\nServer available on: http://ravendb:8080\r\nTcp listening on 0.0.0.0:8471\r\nServer started, listening to requests...\r\nTIP: type \'help\' to list the available commands.\r\nRunning non-interactive.\r\n^C\r\n\r\nravendb@ravendb:~/RavenDB $ ls -ltra Server/RavenData/\r\ntotal 32\r\ndrwxr-xr-x 4 ravendb ravendb 20480 Dec 18 14:19 ..\r\ndrwxr-xr-x 3 ravendb ravendb  4096 Dec 18 14:19 .\r\ndrwxr-xr-x 3 ravendb ravendb  4096 Dec 18 14:19 System\r\nravendb@ravendb:~/RavenDB $ \r\n```\r\n\r\nrunning for the first time from `RavenDB` : `./Server/Raven.Server`\r\nthe ""working directory"" is still `RavenDB/Server`\r\n'"
4742,157516687,"b'We are not using this anywhere in the server, which means that this is a good indication that it should be handled differently.\r\n\r\nI suggest adding ImportCsvAsync method or creating a command only for this test'"
4742,157551269,"b""For now I've removed this and moved the command to tests. I'm not sure if we want to have this functionality in client-smuggler, but if we do it needs to have a separate method with separate options since it does not use any of the Import options at all. Can be done in next iteration."""
4742,157551381,"b""I couldn't make this assertion to pass, can you check that?"""
4742,157574961,"b'The actual issue here is in `Address.Line2`.\r\nThe problem is that we have a null value vs. an empty string, and the question here is how do we handle the difference between them.'"
4760,157877554,"b'This is a bad idea, we might error here and get an unhandled exception'"
4760,157953051,b'why do we need this property in model? '
4760,157953359,"b""What's the difference between mentor node and node tag? Do we need it during edit?"""
4758,157954967,b'What about the https case?'
4758,157959767,b'no http case. this is internal default which can be override by settings.json (you can add there https)'
4758,157964408,"b'Note that this is intended specifically for the setup wizard mode, which will override everything else.'"
4758,157983143,"b""data dir should be `/databases`. It's exposed as a volume so that use can mount it to another container and should be set in env variable RAVEN_DataDir (old DATA_DIR must be renamed)"""
4758,157984302,"b'also tcp port must be set to 38888 somehow, since settings are overriden on setup, not sure how to achieve that other way that through CLI_ARGS or somehow merging settings from before setup with the one after. Thoughts?'"
4760,157985870,b'this can be removed'
4760,157985928,b'this is part of the subscription model'
4766,157986064,b'Productio -> Production'
4766,157986383,b'thanks. fixed'
4767,157987748,b'`RAVEN_AUTO_INSTALL_CA` / `RAVEN_IN_DOCKER` are required?'
4767,157995241,"b""First one was used by @iftahbe to auto install certs, not sure if still relevant. Not sure about RAVEN_IN_DOCKER right now - it was used to update cli args after setup. Let's leave it here for now."""
4767,157996085,b'Both are not relevant anymore.'
4758,157996986,b'RAVENDB_ARGS vs RAVEN_ARGS. Fixing that to RAVEN_ARGS.'
4776,158030005,b'why are you ignoring errors? where are they reported?'
4776,158030605,b'I will report those errors.'
4780,158259749,b'What happens when the license was updated/replaced?\r\nWill it start the SNMP twice?'
4780,158261773,"b""I've checked the implementation of snmpEngine and if the engine is started already this is a no-op"""
4783,158265542,"b""Shouldn't this be: LoadDocument requires a second argument which is a collection name of the loaded document (or something like that) ?"""
4783,158265689,"b""Let's not do that, this will not work as expected, the arguments do not match."""
4783,158266087,b'I do not think we should try to fix the index on-fly.'
4783,158269038,b'we can save the index as faulty index and allow the user manually edit it.'
4783,158269785,"b'I do not think we want to do that, this is not a recommended way of migrating indexes.'"
4783,158270720,"b""for those that don't match we display an error:\r\n(22,74): error CS1501: No overload for method 'CreateSpatialField' takes 4 arguments"""
4783,158270943,"b'Yes, better to error clearly'"
4783,158275191,b'done'
4787,158299700,b'can you explain this change?'
4787,158302296,"b""It is not necessary related to RavenDB-9917, since I wasn't able to reproduce it.\r\n\r\nBut this change prevent opening a new transaction in an already opened one.\r\nIf we had an async transaction that failed, we are going to try and run it one by one.\r\nFor this matter we will open a transaction for each pendingOp. So we need first to dispose the failed transaction before opening a new one."""
4788,158311540,"b""Let's remove this for now."""
4786,158284811,"b'We do not want to replace them, just write a proper error as we do for LoadDocument'"
4786,158319300,"b'You are relying on the _error message_ from the compiler.\r\nBut if you are using a machine with localized error messages, see:\r\nhttps://github.com/dotnet/roslyn/blob/ac2da0f6985620a8dea9aca7c2a00848df3b4e8f/src/Compilers/CSharp/Portable/CSharpResources.resx#L666'"
4786,158651736,b'fixed'
4786,158651741,b'done'
4797,158702600,b'public'
4805,158814251,"b""You didn't update the _decryption_"""
4808,158874434,"b""That is the same context as everything else, let's use a different (named) context in this way"""
4808,158874459,"b'What does this magic value means, exactly? Let us create an Enum for this.'"
4808,158874511,"b""You are trying to decrypt with a _different_ subkeyId_, that isn't going to work.\r\nPlease also add a test for this."""
4812,158934745,b'Probably better named ForceEnumerateInThreadSafeManner'
4828,159155039,"b'This still generates an entry per doc, no?'"
4828,159155098,"b""I'll investigate the logs after this change, but the issue with reduce was with the actual output, which was VERY long."""
4830,159159822,"b""I don't like this.\r\nA) use PascalCase for tuple args\r\nB) Use proper structure for the reply, not comma separated string, it wouldn't be readable in a year.\r\nC) `Task<(string Url, (int TcpInfoTime, int SendTime, in RecieveTime), string Error)>` would do."""
4830,159159857,"b""This is going to be running all the time, and it is going to always be allocating strings that we'll most of the time never look at."""
4830,159159891,"b'Going to be called _all the time_ , and very rarely looked at. Too expensive.'"
4830,159159916,"b""Shouldn't we output this as well?"""
4830,159159925,b'This is accessed from multiple threads concurrently in an unsafe manner.'
4830,159159949,"b""It's safe to iterate here with `foreach`"""
4830,159159956,b'Can use `foreach` here'
4830,159159986,b'What about _when_ something happened?'
4830,159160013,b'huh? You unregister and register again immediately?'
4830,159160017,"b""That was intentionally very high in the future, we don't want to have slow check that will become re-enterant."""
4830,159196222,b'To ensure that we have registered the event only once.'
4830,159219334,b'Potential concurrency issue here (talk with @maximburyak )'
4828,159594769,"b""That's how we behave in 3.5 when logging level is Debug - we put entire index entries to logs.  Do we no longer want that?"""
4853,159613883,b'We want to do this only if the db _instance_ has valid _incoming_ replication.'
4828,159641595,"b'No, see an example output in the issue. One log line with very long...'"
4828,159685701,"b'I think not. We might want to add an endpoint that give us an index entry, or something like that, but not beyond it.'"
4877,160084965,b'What is we have a another database with the same prefix?\r\nWe need to have here a separator. '
4877,160087391,b'https://github.com/ravendb/ravendb/pull/4878'
4900,160657355,b'Can use `out string str` here.\r\nBut ends up being the same thing.'
4900,160672821,"b""@ayende it is not a string always, in my tests it was LazyCompressedString or something like that.\r\nalso out string won't compile because it returns an object"""
4900,160673239,"b'Oh, you are using `TryGetMember`. IIRC, `TryGet` or `TryGetValue` also handle automatic conversions.\r\n'"
4900,160674965,b'https://github.com/ravendb/ravendb/pull/4904'
4905,160759945,"b""What happens here if we haven't completed this in time?"""
4907,160943178,"b""I'm not too happy about the authorization status here.\r\nWe shouldn't make it anyone. Ideally, this is something that only operator can do, especially the `accept` portion.\r\n\r\nI know that we are doing this from the wizard, but can we check the permissions here explicitly if we aren't in the wizard?"""
4907,160944532,b'Done. Only Operator can accept the EULA.'
4907,160946097,"b""This is running as part of the wizard, right? In that case, would there be _any_ security there?\r\nI _think_ that in the wizard, we have no auth and anyone can do anything, in which case, let's mark this endpoint as well as `ValidUser` and go forward.\r\n\r\n"""
4907,160950909,"b'Actually this is running before the wizard, so it also covers a case when the wizard is turned off also.\r\n\r\nChanged to ValidUser.'"
4909,160971776,b'@myarichuk why have you reverted this ?'
4914,160971990,"b'So these two should be renamed as well (`RemoveRavenConnectionString, RemoveSqlConnectionString`), '"
4914,160972550,"b""Since we have (need?) the backward compatibility above (in `ClusterStateMachine.cs`), shouldn't it be here as well?"""
4914,160974283,"b""They are, I just adding support for the old name, in case users would upgrade just one server in the database and this command would made it in to the log of the server that wasn't updated."""
4914,160974723,b'Here we just deserialize from json value to object. Before it was the command key.'
4914,160974994,"b""I meant, shouldn't we also do the following renames?:\r\n- `RemoveRavenConnectionString -> RemoveRavenConnectionStringCommand`\r\n- `RemoveSqlConnectionString -> RemoveSqlConnectionStringCommand`"""
4914,160975856,"b""Oh, I'll rename them as well. I didn't touched them so I didn't see them. Good catch."""
4914,160976042,"b'But it will throw `KeyNotFountException` here:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/ServerWide/ClusterStateMachine.cs#L836\r\n\r\nonce it got the legacy ""PutRavenConnectionString""'"
4914,160978034,"b""OK. So I'll remove the legacy support as this command isn't used this much."""
4914,160979155,b'https://github.com/ravendb/ravendb/pull/4915'
4909,160979184,"b'@talweiss1982 \r\nI know that it was better this way, but I had a good reason to revert:\r\nA call to GetNextIdentityValue() increments the record version, and in some cases it creates concurrency exception when trying to write *hilo* records. \r\nAt least one test failed because of it (related to smuggler writing the hilos)'"
4925,161157031,"b'Shouldn\'t be: ""Logging set to ON (operations)""\r\nto be consistent with other options? '"
4939,161401899,b'we need to use the Signed one'
4940,161406486,"b""Probably a good idea to have a log here, so we won't swallow the exception entirely."""
4945,161459377,"b'Use `etag` and and `pageSize` here. `etag` can be null, and it will be zero then.\r\n\r\n'"
4945,161459408,"b'Output directly to the browser, no need for this.'"
4971,161734292,b'Remove this as well.'
4975,161774312,b'Maybe we should use LazyStringParser.TryParseDateTime?'
4975,161777039,b'Done. Thanks.'
4979,161824646,"b""just in case I would suggest changing this to 'Auto/'"""
4979,161826035,b'Maybe leave the old name? Or check if the index is auto at least. This method can remove any kind of index.'
4979,161834635,b'done'
4979,161834823,b'fixed'
4998,162300651,"b'We need to also remove `_listOfRegisteredIdLoadConventions`, no?'"
4998,162301075,b'I will check this out'
4998,162330431,b'done'
5002,162389280,b'Possible NRE?'
5002,162389497,b'+1'
5002,162390687,b'Proper error'
5002,162390814,b'fix msg'
5004,162740085,b'Need to clear in on every Execute call'
5004,162740309,"b'Why, there can be only one here'"
5004,162740433,"b'Why, we already have the list in `_reduceDocuments`'"
5004,162740534,b'Need to reset on every `Execute` call'
5012,162889037,"b""This is _valid_. \r\nThat isn't where we need to check this, only on the actual call site where we know this is the case."""
5012,162939176,b'Use a dedicated method'
5012,162939236,b'Use a dedicated method\r\n\r\n'
5014,162907036,b'Lost original stacktrace'
5019,163043548,"b""Note that this will cause us to defer this once per 5 seconds, so that wouldn't typically do much for us given the typical election timeout """
5020,163044212,"b'You cannot throw here, this will allow the exception to escape the thread and kill the process'"
5020,163044275,b'The message is already in the exception here.'
5020,163044731,b'No need to include the message here.'
5020,163044799,b'Here we probably want to wait for the message to be actually flushed to the logs.'
5020,163044854,b'This need to be at `Operations` level.'
5020,163049740,b'This was the previous behavior.\r\nFixed. The low memory notification will stop working.'
5020,163049758,b'done'
5020,163050063,b'done'
5020,163050097,b'done'
5021,163216910,"b""As far as port blocking on Setup Wizard is concerned I tried adding `--ServerUrl=...` to the rvn command end. It fixes the port number on the UI, yet leaves us with unusable service since it adds it to the CLI args of the service command (which is by design). After setup it's left with http, while it should have https, so there's a conflict in what we pass to RVN to setup the service and the state after setup.\r\n\r\n![image](https://user-images.githubusercontent.com/1541805/35273920-87104f40-003a-11e8-8415-65ff0bc5673a.png)\r\n"""
5021,163223751,"b""We can ask the user to choose between HTTP / HTTPS at the script level.\r\nBut we DON'T want to pass the arguments on the command line. We'll use the `settings.json` file, instead, exactly so we can re-write it easily."""
5021,163225472,"b""OK then, that's what it does. Just wanted to make sure we don't want to go that way."""
5026,163329981,"b""Why did you removed this? Shouldn't we notify the db that it has been deleted? How are deletes actually supposed to work now?"""
5030,163524579,"b'Not a good idea. If you are running into this, it will hang the timer thread.'"
5030,163526431,"b""The timer thread (in the callback method) just calls:\r\n`Monitor.TryEnter(_lock, ref lockTaken);` \r\n\r\nhttps://github.com/ravendb/ravendb/blob/789e53205e9d1c46e725dd60da02b84bc955f3cd/src/Sparrow/Utils/NativeMemoryCleaner.cs#L28-L30\r\n\r\nSo it won't hang it.\r\n"""
5030,163526737,b'what happens if Dispose is called twice?\r\n'
5030,163529183,"b""Shoudn't be the case but it's error prone now. I saw you fixed it. Thanks."""
5024,163333445,"b""No, this is a _great_ way to ensure that we'll very slowly have every collection under the sun here.\r\nIf the user has used `HashSet<string>`, what will we have here?\r\nWe need a better way to handle this."""
5033,163552451,b'Handle the case this returns 0'
5033,163552871,b'Oh.'
5033,163555441,b'Did PR'
5037,163661238,b'Why do you have this check here?'
5037,163677268,b'This runs every day as part of checking for an updated license.'
5042,163825831,"b'\r\nThe problem here is that `SetNewState` will dispose the current state, which is in this case, means us.'"
5042,163827640,"b""it will dispose of the follower, we want to do this, i don't follow."""
5049,163876789,b'can you revert this?'
5049,163876894,b'can you revert this?'
5049,163876920,b'can you revert this?'
5042,164067312,"b'Oh, sorry, you are correct. For some reason I thought this is happening on the Follower thread.'"
5047,164069570,"b'Regardless, we want to get a list of exception and url in the errors.'"
5049,164068264,"b""I don't particularly like this approach. It means that we spread the knowledge about clearing thread local state far and wide. We need to register this as an event, instead."""
5049,164068468,b'You are comparing to the _field_ that you just set to null here.'
5049,164070621,b'UtcNow'
5049,164070755,b'Can probably use the parent logger'
5049,164071092,"b""To be safe, let's reset the `Current` here."""
5049,164071259,"b""I don't like this"""
5049,164292521,b'I wonder why do we need to reset it first before using `Thread.CurrentThread.Name = _name;`?'
5049,164292560,"b'It was set to `""Available Pool Thread""` on line 177, and it cannot be set to a value unless it is null'"
5049,164292654,b'Good to know. Thanks'
5047,164292832,"b""OK, so I'll remove this check."""
5047,164293069,b'https://github.com/ravendb/ravendb/pull/5055'
5055,164293094,"b'Here, I want the message to also include:\r\n\r\n[ URL Used -> Error message ], [ URL Used 2 -> Error message ], [ URL Used  3-> Error message ],'"
5055,164293400,b'Done'
5055,164293458,"b'I think that we need just the message here, the full details are in the inner exception anyway'"
5055,164293656,b'Right. I see you already made that change.'
5062,164300971,"b'Why do this busy wait here, and not just wait?'"
5062,164301003,"b""Calling `TryModifyTopology` concurrently will also cause this.\r\nLet's use a better method, see `DisposeLock`"""
5062,164301057,"b'because it is not expected to take too long, just wait for the events to fire.'"
5062,164301113,"b""It isn't expected now, but it might be in the future, and we want to avoid such behavior from the get go"""
5062,164301120,"b""i'll do that"""
5058,164300069,b'Also include time and etag of the topology.'
5058,164300092,"b""Database name doesn't have to be a valid path, does it?\r\nRegardless, we also need to set the urls somehow (all of them), otherwise, we can't have two documents stores that has the same db that talk to different clusters."""
5058,164301399,b'Etag is included already'
5058,164301688,b'Done'
5058,164301721,b'IIRC database name is validated to be a valid path.\r\nWhat URLs should be used? `RequestExecutor.lastKnownUrls`?'
5058,164345644,"b'I think we want to use the initial urls. This way, if the user changes them, we invalid the cache (which is what I would expect).'"
5058,164367178,b'Do we have an etag also for the cluster topology?'
5058,164367987,b'https://github.com/ravendb/ravendb/pull/5067'
5094,165276879,"b""That's too low, and likely to cause a lot of spurious errors. \r\nMay need to either increase the time or only warn if there have been more than one of these."""
5094,165295307,b'This is why I think that anything below 150ms should _not_ generate a warning. Only if we occupy the disk for enough time to unstable the cluster (half of the election timeout).\r\nSo what numbers do you suggest ?'
5096,165310092,"b""Why did you remove all `nameof()` usages? \r\nWhy did you remove `MemoryInfo*` classes? \r\nBuild does not compile: \r\n`00:06:07.719 Program.cs(351,56): error CS0426: The type name 'MemoryInfo' does not exist in the type 'MemoryStatsHandler' [c:\\Jenkins-lite\\workspace\\PR_Compile_v4.0\\s\\tools\\TypingsGenerator\\TypingsGenerator.csproj]\r\n`"""
5096,165310329,"b""Shoudn't we check we are running on Linux first? It's debug endpoint but still shound't crash on windows"""
5096,165312232,"b""For me this piece of code is fragile. Maybe let's do it this way but also include the raw line. Also if we get exception here we'll still be able to output raw message."""
5096,165312595,b'Check if such file exists.'
5096,165312842,"b""The same comment as above. Very fragile code. Let's consider to output raw lines as well."""
5096,165313765,"b""Isn't the parsing code the same as in the debug endpoint handler? Can we extract it and have it in one place?"""
5096,165314118,b'Is it ok to be case sensitive here? '
5096,165314412,b'What are we going to do with this?'
5096,165315474,"b""I didn't.. merge issue"""
5096,165316319,"b""Did you have conflict? Please notice I've also changed format of endpoint output, to avoid mixing data with structure. """
5096,165334617,b'Only cluster operator here.'
5096,165334747,"b'We just need the raw data here, nothing more.'"
5096,165334994,"b"" Yes, we can expect it to be stable. But it is called a lot and we don't want to pay all these costs"""
5098,165331562,"b'Operations, this is killing us'"
5098,165334326,"b'This is okay as info, but note that we need to do the check _first_'"
5098,165335261,b'Done'
5098,165336921,b'Better to have a totally separate overload here.'
5098,165336935,b'Call InfoAsync?'
5098,165337097,"b'This is going to kill the process, it ALWAYS interests us.\r\nThat said, are we sure that this actually give us a good error _when running as a service_?\r\n'"
5098,165337172,b'already checked'
5098,165339227,"b'We are re-checking that, just in case.'"
5103,165349209,b'Why did you remove this?'
5103,165364276,b'Always passed with not null'
5104,165364809,b'Out of _disk space_'
5105,165365789,b'Was this actually handled?'
5104,165368769,b'https://github.com/ravendb/ravendb/pull/5106'
5105,165369522,b'![image](https://user-images.githubusercontent.com/1250431/35683282-c24dc986-0763-11e8-833b-24213f777fd9.png)\r\n\r\nIt is operation w/o details. This test is a trap to check if we have explicitily put performance hint to operationWithoutDetails  hash set or to alreadyHandledInStudio. '
5105,165369683,b'Please ignore numbers in notification I hard coded invocation just to get this warning. '
5109,165385914,"b""I think that there is 'TransferEncodingChunked' property in Headers available. Maybe we should use it instead?"""
5109,165387178,"b""We didn't see that in the intellisense, possible 1.3 vs 2.0 issue?"""
5109,165388037,"b'Or R# intellisense, everything compiles on my end:\r\n\r\n```csharp\r\n                var message = new HttpRequestMessage\r\n                {\r\n                    Method = HttpMethod.Post,\r\n                    Content = _stream,\r\n                    Headers =\r\n                    {\r\n                        TransferEncodingChunked = true\r\n                    }\r\n                };\r\n```'"
5109,165389855,"b""I'll make the change"""
5123,165749199,"b""That doesn't actually give us anything, we already report the value back as the path"""
5127,165852999,b'I think it should be startsWith?'
5127,165855067,"b'thanks, fixed'"
5127,165859004,b'Do we really need to be case insensitive here? This `StartsWith` overload can cause string allocations of `document.Id`'
5127,165859059,"b'Another option, we could use here `CollectionName.GetLazyCollectionNameFrom` and always compare `LazyStringValues`  '"
5127,165871525,"b'Yes, we do need case insensitive in this. Document names are not case sensitive.'"
5127,166031056,b'I was trying to avoid accessing the data since this will fetch the data to memory.\r\nBut we can compare the lazy string id'
5135,166098946,b'Huh?! Why is this a string?'
5135,166099095,"b'You can use a boolean here, `bool.ToString()` is cached.'"
5135,166099358,"b'I think it is better to get it from the server, no? '"
5135,166100400,b'done'
5135,166100479,"b""I'm getting this from the server once"""
5135,166101238,"b""I'm talking about the string you are using."""
5135,166101435,"b'This is the wrong place and method to do this. \r\nYou want to decide what to show to the user for memory, put the string you want, on the server side, where you fetch the value from the server.\r\nOtherwise, it will be hell to figure out what affects this.'"
5135,166110474,b'done'
5136,166205727,"b'Create ""No such journal"" constant and use it here and when throwing the exception'"
5136,166206361,"b'4 == "".zip"".Length ? If so then it\'ll be more readable using such code'"
5136,166207343,b'Maybe introduce constants for storage names? And use only them across the board'
5193,168190479,b'I had some doubts with this change because the comment suggested we are fire and forget here while we actually did it in sync manner so we always wait for the operation to be applied.'
5175,168428023,"b'`cpu_set_t` is not a type that is known in advanced. Did you check its size on ARM, 32 bits, etc?'"
5193,168441458,b'The comment is wrong'
5193,168441500,b'I think this is a copy/paste issue'
5220,168951823,b'this is not available in netstandard1.3. You must use type.GetTypeInfo().IsSubclassOf() instead.'
5229,168966879,"b'Better to just throw out an exception, we already handle that properly'"
5229,168966912,b'Add the type that this actually is here.'
5229,168966942,b'Here we need to check if this actually work on Linux mounts properly'
5229,168966986,"b""Add thread names, of better yet, just schedule this using PoolOfThreads, I don't think we need dedicated threads here now"""
5229,168967040,b'Is there a reason all these classes are in a single file?'
5208,168942622,"b""This shouldn't be here. We _can_ usually detect if we are static or not, even for JS, but even so, we need to move this logic to `HasDynamicFields`"""
5208,168942662,"b'You also need to handle `docs.Users.Select`.\r\nSo the logic is, if it starts with `docs` or `from`, it is a  C# index, otherwise, JS.'"
5208,168942668,b'Note that this in particular will fail a lot of tests and prevent from merging'
5208,168942686,"b'This should be `JavascriptMapIndex`, no?'"
5208,168942701,"b'Here we can check if the user sent us a complex object with `$options` and read the `IndexFieldOptions` from there.\r\nAlso, why are you passing `new IndexFieldOptions()` twice?'"
5208,168942713,b'What condition can cause this to be raised?'
5208,168942755,"b""This is wrong, you need to recurse into each of this values, because you'll need to do the same here.\r\nFor example, if this is an array of arrays, you'll need to flatten it."""
5208,168942766,"b""This shouldn't ever reach here.\r\nWe also want to extract the logic of JS / C# index into a single location.\r\nWe can do that on a method on `IndexDefinition`"""
5208,168942815,"b'The simple case is going to be the prevalent one, and that should be enough'"
5208,168942827,"b""I don't understand what this method is doing, I assume it is partial?"""
5208,168942830,"b'We are better parsing the code one, and then hanging on to the parsed instance.'"
5208,168942842,b'Partially completed code?'
5208,168942887,b'Need to be explicit that you are passing the _functions_ here. '
5208,168942926,b'We can avoid using `IEnumerable<dynamic>` in favor of `IEnumerable<object>` here.'
5208,168942957,b'The name `jsValues` and the passing of `List<JsValue>` is really confusing. Better to pass `List<FunctionInstance>` here.'
5208,168942999,b':-D'
5208,168943008,"b'Use `@""""` strings, this is not readable.'"
5208,168945386,"b'True this is something to be removed, i just did this so i can play with it from the studio'"
5208,168945417,"b'i see, this is also some sort of a work around to be removed once we send the correct type there will be no need for this.'"
5208,168945421,b'Yes'
5208,168945665,"b'There is a lot of work to be done on fields this is just the simplest case, the second field option is clearly a mistake on my part.\r\n'"
5208,168945905,"b'the code was modified and the catch block was not, this is no longer relevant '"
5208,168946071,"b'Agree, this is just to get going.'"
5208,168946248,"b""I'll probably modify this and create an object and pass its member function to make this more clear."""
5208,168946339,"b'okay, this is what RS generated, i wrote this test fest so i can ass some working code to the PR.'"
5208,168952720,b'Need to set it in `IndexDefinition.DetectStaticIndexType`'
5208,168952729,b'Should remove this'
5208,168955833,b'We detect the fact that the index has dynamic fields from its instance which is of type JavaScriptIndex'
5208,168956147,"b""actually the convention doesn't include Index in it so i changed it to JavascriptMap"""
5208,168956322,"b""I must say i don't follow the logic here, why should we flatten a jugged array?\r\n"""
5208,168956767,"b'yes, this is horrible in term of performance... note that this code is not really in use but just a playground to see what it will take to extract the fields from the AST itself.\r\nIt is not simple for the general case and we might need to do it for MapReduce and other features'"
5208,168956881,b'it is more of a playground code that slipped through'
5208,168957515,"b'This is debugging leftover, the code is still in early stages of WIP'"
5208,168966710,"b'Because it gets indexed that way.\r\n\r\n`Val = new object [] { ""Oren"", new[] {""Ayende"" } }`\r\n\r\nMeans that we\'ll index it as if it was: `Val: [""Oren"", ""Ayende""]`'"
5208,168966717,"b""That isn't actually perf sensitive. This runs _once_ per index, after all."""
5208,168966757,"b'Use, `FirstOrDefault` here, not `First`'"
5208,168966788,b'Need to provide a way to customize it'
5208,168966820,b'`IEnumerable<dynamic>` -> `IEnumerable<object>`'
5208,169013497,b'why to string here?'
5250,169145527,"b'Actually, just calling `ToString()` here is good enough, that is the internal impl detail anyway'"
5237,169153439,b'Please also add asserts that shows what the actual generated RQL here is.'
5270,169301410,"b""Shouldn't this use a parameter here?"""
5281,169554568,"b""Add the type here, so we'll know what we missed"""
5281,169555420,"b""Add the type here so we'll know what we missed"""
5281,169555818,b'Need a default here'
5281,169555947,b'Missing implementation here.'
5281,169587700,"b""Jint doesn't seem to have support for this, it is part of the completion of the solution that i have added it, but i'll add an implementation to support it in the visitor."""
5299,169588325,"b""Let's use Size here to avoid kb vs byte."""
5277,169338787,"b'What if the local app directly is not part of the local root path?\r\nInstead, we need to say that if a relative path is used, it is placed under the LocalRootPath'"
5277,169384424,"b""The description is a mistake, I'll fix it.\r\nThe logic behind the path is like this:\r\nIf LocalRootPath is specified, the user doesn't have a choice. The backup will be in LocalRootPath\\\\{DatabaseName}\r\nIf LocalRootPath is not specified there is no change in behavior."""
5277,169549466,"b""No, the logic there should be:\r\nIf `LocalRootPath` is specified, error if they are trying to set a value that isn't in the `LocalRootPath` (case _sensitive_, because Linux)."""
5277,169549517,"b'Reasoning, I might want to set `E:\\` as the backup root, and let the user figure it out later. '"
5277,169549630,b'Great error messages!'
5277,169550521,b'Here we need to just validate it and error with a clear message'
5304,169623028,b'When would this be a per db value?'
5304,169623171,"b'Better add a common method `AssertExperimentalFeature(featureName)`, so we can use it in the future.'"
5301,169596873,b'Use a named tuple'
5301,169596923,b'All of these changes make it _very_ hard to review'
5301,169596995,b'Make this a static instance.'
5301,169626821,b'Please use PascalCase here'
5310,169644083,b'Needs to happen outside the batch'
5310,169660884,b'done'
5277,169623731,b'Add the full path that was generated as well. There might be some cases where this would be changed radically'
5277,169623857,b'Why not do a simple `StartsWith` here?'
5338,170444220,"b'You cannot use `Environment.NewLine` here, you have to support `\\r`, `\\r\\n`, `\\n`, etc.'"
5338,170444276,"b'This logic is fragile. \r\nI can have:\r\n```\r\n/*\r\nfoo \r\n*/\r\n//  bar\r\nmap(\r\n```\r\n\r\nAnd the second one will not be detected. \r\nBetter option is to just try to parse the string, as a C# expression. And if successful, check if the first expression is either a `from` query or a `docs` member reference.'"
5338,170445084,"b""sure it will, why do you say it won't"""
5337,170444687,b'Why is this `JavaScriptIndex.DynamicFieldName` required?'
5337,170444712,"b""This isn't the way to go about doing this. We want to just have this flow naturally from the code.\r\nSo when we add the value from an object field, we'll just use that, no need for special behavior at this location"""
5337,170444733,b'Remove this'
5337,170444739,b'`FieldOptionses` ?'
5337,170444748,b'No need for this'
5337,170445172,b'it is required either here or on the converter and i feel this is the better spot otherwise it will show in the studio and its not a real field'
5337,170445227,"b""I didn't write the operation class"""
5337,170450080,"b""We _are_ showing it as a field in the studio for C#, and I don't want to handle this here.\r\nConsider the case where we have _two_ such fields, etc."""
5353,170454324,b'`Totals`'
5353,170454326,b'`Details`'
5353,170454365,b'Fix this.'
5353,170512788,"b""We actually do care, if this is the case, we'll need to stop reading more data."""
5353,170513167,b'Move to separate method'
5353,170513180,b'Move throw to dedicated method'
5353,170513235,b'Move throw'
5353,170513274,b'Same'
5351,170519567,b'Why dropping unit suffix? Can we use `Size` struct here instead?'
5353,170526098,b'True. I was relying on next iteration - _endOfBuffer[_currentBuffer] equals 0 and nothing happens. But it seems it would get into infinite loop if that the case. '
5351,170575440,b'The caller works with bytes'
5351,170578329,b'You know that but someone changing this in the future code will need to figure it out. Putting this as `MemAvailableInBytes` will make it clearer. Using `Size` here would make it more flexible regardless the unit that the caller works with'
5360,170568009,b'This will delete all _existing_ metadata values.'
5360,170568129,"b""We don't want to force that on the server side."""
5360,170584121,b'Moved to Studio'
5360,170621303,b'Moved to Studio'
5351,170865843,b'Fixed'
5351,170866191,b'Great. Thanks'
5362,170610052,b'Move the conditionals outside.'
5362,171167777,b'Move if outside'
5362,171167791,b'move ifs outside.'
5401,171224807,b'`ULong`'
5401,171225616,"b""This shouldn't exists"""
5401,171225929,b'remove'
5401,171226000,b'remove'
5401,171226379,b'Need to validate that this holds'
5401,171226608,b'Replace all this with TryGetField from 4.1 branch'
5401,171226737,b'See: https://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Server/Documents/Indexes/Static/JavaScriptIndex.cs#L479-L492'
5401,171226888,"b""don't need this"""
5401,171226903,b'remove'
5401,171227024,b'remove'
5401,171227064,b'remove'
5401,171227638,b'Can remove'
5401,171227948,"b""Let's avoid smashing the stack"""
5401,171233689,b'OK'
5401,171234605,b'OK'
5401,171234631,b'OK'
5401,171234650,b'OK'
5401,171236622,b'OK'
5401,171236661,b'OK'
5401,171236742,b'OK'
5401,171236954,b'OK'
5401,171238753,b'OK'
5401,171238983,b'OK'
5401,171255076,b'ok'
5401,171255099,b'ok'
5414,171675656,b'@maximburyak are you sure? https://github.com/ravendb/ravendb/blob/v3.5/Rachis/Rachis/RaftEngine.cs#L521'
5414,171792323,"b""The parameters name is waitTimeoutInSeconds, I'm sure that from the controllers point of view, I should pass seconds and not multyply by thousands. We'll have to make sure that no code path calls this method with miliseconds though"""
5414,171792987,"b'`GetLeaderNode` parameter is called `waitTimeoutInSeconds` and yes, it expects the value to be in seconds, but `WaitForLeader` expects the value to be in milliseconds, so there is need of conversion here. Right?'"
5414,171815643,"b""Yes, I think so. It's good  you  paid attention to that!"""
5444,172161709,"b""I don't like this.\r\nBetter to have a single endpoint that would use this method and smaps on Linux to get the values in a cross platform manner."""
5444,172161787,b'Why do you need this?'
5444,172161903,"b'We are already _in the same process_, we can just access the memory directly.'"
5444,172162161,"b'Easier: `Encoding.ASCII.GetBytes("".voron"")`, etc.'"
5444,172162260,"b'You are doing dynamic allocation here of 64 MB (!), why? '"
5444,172162457,"b'You just _ensured_ that this address will not cause a page fault, because you read it.'"
5444,172162537,"b'Why are you reading this memory, anyway?'"
5444,172162642,"b""`Addr`? We aren't being charge by characters."""
5444,172162867,"b'Use `memcmp` here, it will be much more readable'"
5444,172162971,b'Use `TryGetValue` here.'
5444,172163114,"b""that isn't the pagesize. Also, `PageSize`"""
5444,172163271,"b'Use pooled buffers here, instead.'"
5444,172445109,b'Is the output the same across platforms? '
5444,172445218,"b""Still don't need this"""
5444,172446035,"b'Make this into a function, can check this first and only if relevant do the hard page fault check'"
5444,172446090,b'Use `TryGetValue`'
5444,172446181,b'`AddrWill` -> `AddressWill`'
5444,172446436,b'Here you are freeing something that was allocated from the pool?!'
5444,172451353,"b'No, but there are different items in each. So it cannot have a single format'"
5444,172453479,b'We have to make sure that they format is identical. We want to feed it to the studio.'
5444,172458664,"b'Make `memoryBasicInformation` a ref, to avoiding copying the struct'"
5444,172458813,"b""Let's avoid allocating 2 KB on each call to this function. Use the buffer pool here as well"""
5444,172465800,b'We can call it `WorkingSet` across the board'
5444,172465941,b'Note that you are sending `Rss` here'
5444,172469735,"b'here? it says ""Rss"" already.  Where should I note this?'"
5444,172471420,b'https://github.com/aviviadi/ravendb/blob/9fa2477b0c8b58b9a1d275cc8d7ef0daadcc5521/src/Sparrow/Platform/Posix/SmapsReader.cs#L326'
5444,172491411,"b'I am not sure I follow. I am sending Rss, yes.  And that is what is written there. '"
5444,172491524,b'can you show the output from windows & linux for these endpoints?'
5394,171000860,b'This will break a binary and source-level compatibility'
5394,171000896,b'This will break a binary and source-level compatibility'
5394,171001901,"b""Wouldn't it be better to delay the conversion of Facet (either `Facet`, `Facet<T>`, `RangeFacet` or `RangeFacet<T>`) to the last possible point (where FacetToken is created). You would not have to drag the parameters along the way, then rewrite them to query parameters, rewrite the expressions, etc. This would cause much less trouble."""
5393,171169822,"b'Avoid doing things this way, instead, use an `is DateTime`, `is DateTimeOffset`, etc.'"
5393,171169959,"b'Why is this needed, anyway?'"
5393,171170354,b'why are you passing the types in this manner?'
5394,172549122,b'Is this needed now? I do not see any usages.'
5394,172549821,"b'This will break a binary compatibility. You need to have two methods here:\r\n```\r\npublic static string Parse(string prefix, LambdaExpression expr)\r\n\r\npublic static string Parse(string prefix, LambdaExpression expr, Func<object, string> addQueryParameter)\r\n```\r\n\r\nThe first one needs to pass `null` to the second one.'"
5394,172549892,b'Why public?'
5394,172550834,"b""What about other types here? Shouldn't this be inside the switch?"""
5394,172549497,"b'This should be:\r\na) internal\r\nb) in `RangeFacet<T>`, not RangeFacet'"
5394,172557653,b'Is this needed? I saw the [JsonIgnore] attribute on that property.'
5484,172808314,b'typo: walk through -> walk-through'
5485,172808368,b'typo: walk through -> walk-through'
5495,172825123,"b'Also, `localhost`\r\nAnd in general, anything that is `127.x.x.x`'"
5495,172825321,b'ok I will change that in few places. '
5496,172829984,b'Use a named tuple here.'
5492,172852176,"b'Need to handle the nullable stuff here as well.\r\nAlso, why are we doing string comparisons for the types?'"
5492,172852343,"b""Let's handle this everything as a parameters, not just dates & strings"""
5492,172852753,"b""Don't we have a better way of handling this than doing text replace?"""
5492,172852934,b'Same comment'
5492,172853437,b'Why does this matter?'
5492,172859325,b'This is a case that we cannot support without doing breaking changes. The `RangeFacet<T>` contains an implicit conversion to `RangeFacet`. We should leave it like that.'
5492,172860099,b'String comparision is a left-over from 3.x. I did not notice this when I was implementing Facets in 4.0'
5511,173101816,"b""Don't we want to handle this for `foo ; bar ; `, so we'll need to handle this for `string[]` as well.\r\nAlso, probably need to add `RemoveEmptyEntries` there, too"""
5517,173232706,b'Rename to Operations to be consistent with IDocumentStore? '
5531,173743124,"b""Let's see if `ProcessExit` can do that as well."""
5536,173774855,b'Need to convert to local time here?'
5536,173775421,"b""Not really... worst case, we'll switch on 29 days and not 30 days"""
5521,173443337,"b""Isn't this dangerous, in the sense that we'll lose data ?"""
5521,173448121,"b""We are about to move such file (the same name) from root dir to `Journals`. Technically it shouldn't even exists but if from some reason it's there we'll fail on `File.Move` (https://groups.google.com/forum/#!topic/ravendb/QAqneIcatsQ)"""
5521,173448524,"b""I saw that, yes. This can happen if we crashed midway through the previous upgrade, I guess, or something similar. \r\nIs there any chance that there is a data loss event here by deleting this file? I can't think about any such scenario, but I want to double check this."""
5521,173449375,b'I cannot as well. We might be a bit more cautious by renaming the file here instead of removing it and delete it once `StorageEnvironment` initializes successfully'
5521,173449630,b'ok'
5545,174241966,"b'What happens if you also add ` Depth2 = location.LocationParents.Count(),` here?'"
5563,174476766,b'Why is this an instance method exposing a static field?'
5563,174479327,"b""Static field? `_catastrophicFailure` isn't static"""
5565,174485205,"b""Why aren't we logging this?"""
5565,174485283,"b'`LoadCertificate` can error other than returning null,no?'"
5565,174485396,b'comment explicitly explaining the logic?'
5563,174479587,"b'Never mind, I read it as `_skipCatastrophicFailureAssertion` somehow'"
5563,174486125,b'ok'
5565,174486536,"b'We are logging + alerting, in the outer try catch'"
5565,174486596,"b'might be good idea to use a single local variable for duplicated ""Tried to load certificate as part of refresh ...."" message so we won\'t need to keep them in sync if we change the message text'"
5565,174558170,"b'@ayende actually when looking at this again, the logic is wrong... we will always return here starting after the first replacement because we don\'t delete ""server/cert"". Should we always send the recheck command?'"
5565,174588778,"b'Yes, I know.\r\nThat is why I said we will have it once an hour.\r\nOnce the cert is replaced, that is fine to do.\r\n\r\nHowever, need to check that the `server/cert` is the more up to date version ?'"
5579,174773360,"b'This is wrong, you are not committing the transaction!'"
5627,175739472,"b'Use `List<T>` here, instead. No need to write such code ourselfs.'"
5627,175740647,b'Thought about lowering allocations to minimum'
5627,175740802,"b""You aren't, you still do `resize` in the end, and you don't need to, and this is how `List` already work"""
5627,175740834,b'and we do not use these results anyhow.  maybe just throw not implemented ?'
5627,175741829,b'why throw? Why do _anything_ ? Just have empty method.'
5631,175757475,b'Can we avoid this allocation here?'
5631,175757665,"b'The problem with allocating the `SmapsReader` is that it allocates 8KB at least, so we want to reduce this as much as possible.'"
5631,175772468,b'we can hold static SmapsReader instance in MemoryInformation. '
5631,175772745,"b'Would that be thread safe, though?\r\n'"
5631,175774041,b'it is being called from the LowMemoryNotification thread.  We have only one.. '
5631,175774895,"b""Then let's allocate that on the method, and pass as argument, rather than a static fifeld."""
5633,175816632,b'why did you remove it?'
5633,175819723,b'because load is also reserved in js\r\nhttps://github.com/ravendb/ravendb/blob/71323ce78bd7d1b043341b51b73c09db43e37927/test/SlowTests/Issues/RavenDB-9624.cs#L131'
5633,175822842,"b""but now i realize that this query won't work because of it:\r\nfrom o in session.Query<Order>() select new { Load = o.Company }; """
5640,176005026,"b""This should be `RunningOnLinux`, not `Posix` (won't work on Mac, IIRC)"""
5640,176006290,b'fixed in https://github.com/ravendb/ravendb/pull/5641/'
5656,176102070,"b'Remove this. This is _going_ to cause us threading issues.\r\nInstead, create this as a _local_ variable in the top function'"
5656,176102166,"b'Use `ArrayPool<byte>.Shared` here, instead of allocating this'"
5656,176118843,b'how this is better then creating the buffer inside SmapsReader ?'
5677,176711941,b'Where is this actually being used?'
5677,176713364,b'To calculate LastWork?'
5677,176713917,"b""But I don't see it being used now?"""
5677,176714306,b'@ayende It is used here'
5685,176767272,"b""Don't know if that's necessary"""
5686,176775137,b'This is actually important optimization. Why not have it? '
5686,176782951,"b""Nobody ever sets the value so it's always null."""
5685,176803387,"b""It _probably_ isn't, but it doesn't hurt, and I can see some scenarios where it would be useful"""
5685,176803524,b'Under what scenario we want the current behavior of `handleOverwrite = false`?'
5695,176966919,"b'This is not a good idea. This will fail on Linux, for example.\r\nI think we can just validate the `RavenException` here, and not bother with the message'"
5685,177004258,"b""The second usage of `AcquirePagePointerForNewPage` is when we allocate the scratch page. However, I think you're right, in that scenario the behavior `handleOverwrite = true` should also be active.\r\n\r\nI'll drop `handleOverwrite` optimal parameter and make it as the default behavior"""
5685,177004801,"b""Just noticed we call `Sodium.sodium_memzero(ptr, (UIntPtr)size);` when returning the buffer to the pool:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Voron/Impl/EncryptionBuffersPool.cs#L68\r\n\r\nSo I'll call it here as well, instead of `Memory.Set` for consistency."""
5685,177004939,"b'Yes, that is better'"
5654,177041481,b'This is open to race conditions'
5654,177041572,"b'Use a _local variable_, pass it a function argument.'"
5654,177059232,"b'This is temporary, use an ArrayPool here.'"
5654,177059305,"b'Temporary instance, use a ArrayPool here.'"
5654,177059386,b'Move the out param to the end'
5654,177066984,"b'No, you just caused the buffer to be used by more than a single thread'"
5654,177069768,b'Should I use ThreadLocal<ArrayPool> member for that use?\r\n```\r\nThreadLocal<ArrayPool<byte>> _arrayPool = ArrayPool<byte>.Create();\r\n.\r\n.\r\n.\r\nTask DoWork { bufferX = _arrayPool.Rent(..)\r\n```'
5708,177084962,"b""I'm not sure that this is something that you can _rely_ on, there is no guarantee of in order processing for dictionaries"""
5712,177103923,b'can this be private or internal?'
5712,177104008,b'can this be private or internal?'
5712,177104715,b'done'
5712,177104733,b'done'
5712,177110683,"b'Here this is wrong. \r\nIf we have a request that wait for specific indexes, and one that waits for all, we need to wait for all'"
5713,177311517,"b'We also need to check for other locations, where we manually add / remove items to the topology, no?'"
5716,177323655,"b""We only need the write tx here, so let's open it just for this location."""
5721,177352902,b'validationElement: apiKey'
5721,177353463,b'done'
5712,177358434,b'done'
5723,177370755,"b'Move this to a separate file, there is too much churn here.'"
5723,177374437,"b'Good idea, done'"
5732,177490525,"b'This is a bad idea.\r\nIf there is contention, this can create _two_ threads for the same key.\r\nInstead, use `Lazy<Tuple<Task, BlockingCollection<NagleData>>>`'"
5732,177641625,b'done'
5747,177722685,b'Use the constant for this'
5749,177751990,"b""@talweiss1982 @ayende Wouldn't it be better to change the `List<Slice> Ids` to `HashSet<Slice>(SliceComparer.Instance)`?"""
5749,177755559,"b'Yes, probably'"
5749,177794841,"b'not sure if the logic of the distinct is right for the general case, using an hashset mean we will do distinct on all values coming from different parameters.\r\n'"
5749,177834925,b'I think in all cases when we are doing collection query then we want to return distinct results?'
5749,177966591,b'agreed'
5758,177993221,"b'No, this may leak important details to the error log.'"
5775,178085816,b'is it used? '
5775,178086382,b'can we scope this to dashboard only? '
5775,178086640,b'css selector:\r\n#dashboard-container .tooltip'
5775,178086115,b'no. removed.'
5775,178089294,b'done'
5772,178067486,b'We should at least have logs here. And why is this an ongoing operation?'
5772,178067593,b'Why every ten seconds?'
5772,178067696,b'Missing certificate usage?'
5772,178067931,b'There is no point in running this unless we have the studio open'
5785,178451370,b'Better to handle this using `UriBuilder` and changing the `Scheme`'
5799,178746750,"b""It's not a valid change. You should be able to get actual `LastProcessedEtag` of an index in error state.\r\n\r\nhttp://issues.hibernatingrhinos.com/issue/RavenDB-10570#comment=67-27596"""
5799,178746980,"b""We can't do this for faulty index because we failed on opening it and its storage is inaccessible, but that's not the case for index in error state"""
5810,178890481,"b""should we throttle this (or even debounce)? Please have a look at this: http://issues.hibernatingrhinos.com/issue/RavenDB-10008  I hope right now we don't get TopologyChanged too often. """
5797,179026832,b'role it out'
5806,179027272,"b""even though the lock isn't needed, it is better to add it, for consistency. \r\nOtherwise, we'll get analyzer warnings"""
5810,179027424,b'TopologyChanged for the cluster _should_ be rare'
5818,179356054,b'What it this change for?'
5818,179356147,"b'I can see from the call that it is needed, but can you send a test as well?'"
5835,179964150,b'Why does this fix the failing test?'
5825,179993632,"b'Need error handling here, you might fail to write the file, then fail again when trying to delete it.'"
5825,180028874,"b'@ayende okay, I was wondering if I should also delete the folder if it was created by the exam code? It is likely that we will write to that folder so it is redundant, on one hand but it is an unexpected side effect on the other hand.'"
5825,180029127,"b""No, don't delete the directory"""
5838,180032889,"b'I think not, we want to ensure that the directory exists as a result of this.\r\nSo this will have a side affect of creating the directory and _keeping_ it.'"
5825,180033384,"b'arrg already send the PR, wait a sec.'"
5838,180034057,b'im sending a new PR in a sec'
5825,180316613,"b'I wonder if we should call `EnsureReadWritePermissionForDirectory` again here before `SwitchDatabaseDirectories`? The compaction can take hours for huge dbs, so just to ensure nothing has changed meanwhile and we still have an access'"
5825,180330672,"b'Might be a good idea, but if they changed the permissions midway, that is PEBKAC'"
5870,180431506,b'Might need to look at here too: https://github.com/ravendb/ravendb/pull/5871'
5818,180443341,b'`spatial.wkt` only accepts one argument at the moment. This was copied by accident. Check: https://github.com/ravendb/ravendb/blob/0d76f0311f99b6dee5a81eaf1ec8534049ae008c/src/Raven.Server/Documents/Queries/QueryValidator.cs#L25\r\n\r\nWe should either:\r\n1. expose it in RQL and Client API\r\n2. remove this condition entirely'
5818,180449793,"b""Let's remove it for now and create an issue for the future"""
5874,180452168,b'why unsafe here?'
5874,180452362,b'why disposable?\r\nwhy class?'
5868,180422625,"b""This will never be called. If the buffer is to short, `readlink` will return -1, and you'll never get there.\r\nThe return value is the number of bytes _placed_ in the buffer, not the actual size"""
5868,180422796,"b'In this case, it is cheaper to always just ask for 8K and error otherwise, without retries'"
5868,180423022,b'Better to check here that the size is the expected size and skip fsync on dir otherwise'
5868,180423436,"b'no. it returns ""buffSize""'"
5868,180423990,b'I actually tried it with initial buffSize = 8 and path with 30 chars length'
5868,180676109,b'why -1 here?'
5868,180679019,"b'numBytes came from `readlink`, which write the number of bytes that were written'"
5893,180772818,b'Move to Conventions? Those are frozen after DocumentStore.Initialize and cannot be changed. No need to lock anything then.'
5893,180773968,b'After that most of the code will be simplified.'
5893,180779206,b'Moving it to conventions will simplify code indeed. Will do so.'
5893,180787862,"b'You are creating this globally, so another document store with compression false will use compression'"
5893,180788077,"b'Should be null by default here, and we will assume that null is true.'"
5893,180788188,b'Should throw only if the user explicitly asked for compression'
5920,181138653,b'Move this to the `else` here'
5920,181138720,b'Did you also update the build scripts?'
5921,181295991,"b""Let's add an enum that will specify what access is required (read or write) and put it here. It can be passed to the `UnsuccessfulFileAccessException` ctor. In both cases of the current usage we need to write, however in the future we might use this exception for other things."""
5921,181296308,"b""I wonder if we could use `WhoIsLocking.GetProcessesUsingFile` to check that and provide a blocking process name if that's the case (not that for it always returns empty list on Posix)"""
5921,181296852,"b'We can verify that by `new DirectoryInfo(""..."").Exists`'"
5920,181300168,b'typo - Ceate -> Create'
5920,181300417,b'Can we do copy instead? If somebody wants to start clean he would just delete his current `settings.json`.'
5920,181301170,b'We need to change target path to `settings.default.json` here:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/scripts/package.ps1#L81\r\n\r\nPlease check the above by running: `.\\build.ps1 -WinX64`\r\n\r\nNothing to change on the Docker side.\r\n'
5920,181313222,"b'Also the code does not consider our custom config path switch - `-c`.\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Utils/Cli/CommandLineSwitches.cs#L24\r\n\r\nThen if `customConfigPath` switch value is not empty, we should be checking and copying there instead of the default - `settings.json` like so:\r\n```csharp\r\nvar targetSettingsFile = string.IsNullOrEmpty(CommandLineSwitch.CustomConfigPath)\r\n    ? ""settings.json""\r\n    : customConfigPath;\r\nif (File.Exists(targetSettingsFile ) == false &&\r\n    File.Exists(""settings.default.json"")) //just in case\r\n{                \r\n     File.Copy(""settings.default.json"",targetSettingsFile );\r\n...\r\n```\r\n\r\nWe should move this to `Program.cs` and run right after we load command line switches instead of `RavenConfiguration`.'"
5921,181357007,b'@arekpalinski That would only work on Windows (although that is the only thing that will also be locking in this manner)'
5921,181357109,"b""And what if we don't have read access to the file?"""
5921,181358374,"b'Yes, I know. We can check it and enhance the message on Windows only.'"
5961,182102449,b'This should default to false.'
5961,182105398,b'use await?'
5961,182105425,b'use await?'
5961,182107779,b'done'
5961,182107803,b'done'
5961,182112709,b'done'
5963,182159864,b'Please revert this.'
5963,182159902,b'Please revert this.'
5963,182159923,b'Please revert this.'
5963,182159935,b'Please revert this.'
5963,182159945,b'Please revert this.'
5963,182160629,b'Please revert this.'
5963,182160641,b'Please revert this.'
5963,182160651,b'Please revert this.'
5963,182160961,b'You need put the package into /libs or update NuGet.config and add appropriate source there'
5987,183293396,"b""Shouldn't we put here `try / finally` and put the `Dispose` in `finally`?"""
5987,183297064,"b'Not a good idea, this may actually throw in some enumerators.'"
5987,183297106,"b'Better to do this in using, yes.'"
5987,183329287,b'This is totally redundant since if something will throw from the session operation it is going to be disposed of thus the context is going to release the memory.'
5995,183392873,b'Why do you have this here and not an error?'
5996,183443556,"b""Why isn't this blocked on Windows as well, then?"""
5996,183462311,"b'Sorry, missed it'"
6003,183513270,"b'Boolean translation to flags has slight performance penalty, use flags directly when possible'"
6003,183514208,"b'Casting to JsValue goes through conversion operator that has cache, allocation can be avoided for smaller numbers'"
6003,183514834,b'https://github.com/sebastienros/jint/blob/5d408955dc904300e543d27bb12ad10c19327b84/Jint/Native/JsValue.cs#L449'
6003,183515447,b'Cast-cache could benefit here too'
6003,183706576,"b'This overload is ""protected internal"", are you sure you want to expose it? '"
6003,183708091,"b'ok, nice'"
6003,183709140,"b'I wouldn\'t expose to ""normal"" consumer, but RavenDB is quite different with separate fork :) Yes maybe can leave as-is it\'s really micro-optimization.'"
6003,183709664,"b""caching could work for this if-branching's items too"""
6020,184408366,"b""This isn't good. What happens if the certificate changes?"""
6020,184408452,"b'In some cases, this can hang for a LOT of time (minutes).\r\nWe need to write something to console about this and the log.\r\nSo user have a way to understand what is going on.\r\n\r\nAlso, does this _have_ to be syncronous?'"
6020,184408614,b'What if this threw because of a firewall blocking? Need to handle this as well.'
6020,184408744,"b'also, will the `/setup/alive` endpoint work after the setup?'"
6020,184595021,b'Avoid new lines in logs'
6020,184595103,"b""Let's add some wait here for the good case."""
6020,184595145,"b""Let's add read/write lock here."""
6025,184598462,b'No need to use both `delete` in the command URL and the `DELETE` HTTP method'
6025,184598553,"b'No need to use `getValue` here, implies from the `GET`'"
6025,184598592,"b'Same, need to be the same command as GetValue, only set a flag to get all'"
6025,184598645,"b'This needs to be string, not guid'"
6025,184598684,b'We can do that by just detecting the missing `name` parameters'
6025,184598806,"b'No need to use `increment`, the `PUT` is enough'"
6025,184598830,"b'This can be removed now, we have the delete for this now'"
6025,184598900,b'string'
6025,184598942,b'why the `// ?` ?'
6025,184598985,b'Can remove this'
6025,184599185,b'Need to review this schema'
6025,184599231,b'Remove this.'
6025,184791261,b'CountersHandler'
6025,184791510,"b""Need another one to delete all counters for document when the document is deleted\r\nThis one doesn't do a tombstone, though, because the document tombstone is enough"""
6025,184792821,"b""Here we need to validate that the document exists.\r\nWe'll add it to the flags as HasCounters here"""
6025,184792846,b'Remove this'
6025,184792995,b'Only if it actually deleted it.'
6025,184793408,b'Use manual blittable here'
6025,184793510,b'What affects this?'
6025,184793628,"b""Isn't this missing the source etag and the original db id?"""
6025,184793856,b'I think we can name it `GetItemsToReplicate` at this point'
6025,184793968,b'Missing source etag and the source dbid'
6025,184794048,b'delete this'
6025,184794282,"b'This test is racy, we need to _wait_ until the value is 30.\r\nFor that matter, we probably want to wait on _all_ the nodes to converge on 30.'"
6025,184798729,"b'This needs to be somehow set, currently it is unused.'"
6025,184812905,b'This is wrong '
6024,184848517,b'Easier to modify such things via cmd line args'
6024,184848924,b'use `_` as field prefix'
6024,184848941,b'use the `is ObjectInstance oi` syntax'
6024,184848950,"b'I wonder if we should return null here, instead, to avoid erroring?'"
6024,184848972,"b""How useful is this? It still doesn't know how to handle this since this is not primitive"""
6024,184849069,b'This can return multiple results.'
6024,184849078,b'We need to do the group by here ourselves'
6024,184850034,b'I remember that was changed intentionally to use `for` instead of `foreach` by @redknightlois due to perf optimization. Probably not critical but worth to keep it in mind'
6024,184850077,b'Can it return `List` ? See above comment about `for` vs `foreach` usage'
6024,184850450,b'Do we really need to return the actual value here (`value.GetValue(target)`)? This forces us to do `foreach` here on every call. We could introduce the abstraction over the `Accessor` and just return `propertiesInOrder` collection.'
6024,184852465,"b'At the time it was a big offender, mostly because of very bad assembler generated and a very hot method. That was back in CoreCLR 1.0, it may have change on 2.0 though'"
6042,184854509,"b""I don't know, but it seems to me that standard 2.0 shouldn't use ```4.5.0-preview2```, probably we should separate those in different compilation targets. """
6042,184854642,"b'No, those are just updated versions of packages that we use, they are targetting more than just a latest .net core 2.1. Check dependencies of this package here for example: https://www.nuget.org/packages/System.Runtime.CompilerServices.Unsafe/4.5.0-preview2-26406-04\r\n\r\n```\r\n.NETCoreApp 2.0\r\n.NETFramework 4.5\r\n.NETStandard 1.0\r\n.NETStandard 2.0\r\nPortable Class Library (.NETFramework 4.5, Windows 8.0, WindowsPhone 8.0, WindowsPhoneApp 8.1)\r\nWindows 8.0\r\nWindowsPhone 8.0\r\nWindowsPhoneApp 8.1\r\n```\r\n'"
6042,184854701,b'Great!!!... some of those may not be available though like ```System.Runtime.Intrinsics``` so we need to be very careful\r\n'
6042,184854726,b'Indeed'
6042,184854801,"b""This is why I've wrote that maybe internal projects like Voron might end up with 'netcoreapp2.1' target instead of 'netstandard2.0' one. Note that I've added already 'netcoreapp2.1' to Sparrow. You can use `#if NETCOREAPP` constant for conditional compilation"""
6046,184881836,b'can remove this comment'
6063,185075289,b'What happens when `lastResponsibleNode` is null here?'
6063,185091903,"b""There's no way it's null.. it is a function, that may return null"""
6063,185093927,"b'Oh, I missed that.'"
6064,185198950,b'`tryMergeAttachmentsConflict` is no longer accurate name'
6064,185199013,b'And what if we have a conflict on attachments _and_ counters?'
6064,185199246,"b'We _are_ missing a `HasCounters` flag, no?'"
6064,185199384,b'Why do it here instead of in the PUT like the attachments?'
6065,185211102,"b'No, this binds the public URL, no?\r\nWe need to bind to the same sources that with bind on 443 on.'"
6065,185211149,"b""httpUrl and httpsUrl are a recipe for errors, let's use different names"""
6069,185225208,"b'Oh, wow. That explains things.'"
6069,185225368,"b""why todo, aren't you actually reducing here?"""
6069,185236917,b'Forgot to remove the comment '
6070,185242558,b'Only call `currentMetadata.GetPropertyNames()` once'
6070,185242897,"b""Don't need the `HashSet` here. \r\nAlso, pretty sure that we already get them sorted at this point."""
6076,185654546,"b""This is _confusing_ `CounterOperation` vs `CountersOperation`.\r\nAlso `GetOrDeleteCounters` ? \r\n\r\nLet's do it: `CounterOperation  that has a `Mode` (`Set`, `Increment`, `Delete`, `Get`)"""
6076,185654738,b'`CounterValues` should default to `null`. \r\nThere is a distinction between empty and not there.'
6076,185654934,"b""I think we can just move it all to the batch.\r\nWe'll probably still want to have simple incr support with POST and query string parameters.\r\nTo make it easy to hack it together, though"""
6076,185655163,b'How would you control load balancing here?'
6076,185655337,b'We use `PascalCasing` for tuple names'
6076,185655592,b'Why are you setting this?'
6076,185655638,b'Do we actually need all the values here? Can we avoid this except for the studio?'
6076,185655931,"b""Don't do `/delete` in URLs.\r\nWe'll be moving it all to the batch soon anyway"""
6076,185656002,b'This looks great'
6076,185656074,b'Need nice API for this as well'
6076,185835197,b'Can skip `await` here'
6076,185835213,b'Can skip `await` here'
6076,185835512,b'Can skip `await` here'
6082,185844921,"b'Probably this should be removed, no?'"
6082,185845806,b'Can be removed?'
6082,185847002,"b'I use Codealike to measure myself, that is the correlation token (it used to exist at the solution level)  after many requests we moved it to a standalone file. :)'"
6082,185848840,"b'Mhhh my bad, will not have to modify that (that was used for testing purposes). Removed and pushed already.  '"
6084,185994228,b'Why not just forward the call?'
6089,186289668,b'`UIntPtr` is bad in 32 bits'
6089,186289711,b'Is this valid? Not sure here.'
6089,186291516,"b""This works for both RPi and linux-x64  (verified).\r\nHowever, for 4.0 I wouldn't touch the linux-x64. \r\nIs `#if ARM` acceptable here? """
6089,186291961,"b'and if you\'re asking because of the use of write instead of write64, then ""count"" is size_t according to : http://man7.org/linux/man-pages/man2/write.2.html\r\nSo, in 64 bits it is safe to assume it is 64 bits parameter'"
6089,186294137,"b'ok, but do note we do not use it with large numbers anyhow at any place'"
6089,186389755,"b""Shouldn't this be `write64` ?"""
6098,186397091,"b'Always going to be null, can skip it'"
6098,186397122,"b'Always null, can skip'"
6098,186397166,b'use `nameof`'
6098,186397226,"b""Let's call it something else. We'll have TS at some point"""
6098,186397360,b'Should throw here'
6098,186397460,"b'You can safely cast here, this will already throw in `Parse`'"
6098,186397514,b'Move exceptions to dedicated method'
6098,186397750,b'Add overload with `params string[] counters`'
6098,186397797,b'add `params` overload'
6098,186397932,"b""Need to validate that there isn't a deletion here"""
6098,186398030,"b""Need to validate that there aren't current `inc` operations"""
6098,186398138,"b'The `nameof(entity)` means just `""entity""`, I think you meant without it?'"
6098,186398228,b'`transient` in this context means?'
6098,186398341,b'Move to shared interface'
6098,186398595,"b""This create it on every run, it shouldn't."""
6098,186398665,b'Commands should run in the order they are specified.'
6098,186398742,"b'This will be confusing for the calling code, since it relies on the order'"
6089,186402783,"b'it works with both, however it will be write64 in the upcoming ""SysCall class and 32 bits"" review '"
6092,186298930,b'can we introduce some server side type here? CounterBatch ??'
6092,186298963,b'why datatype : undefined? '
6092,186298987,b'introduce type \r\nconst payload = { ... } as .....'
6092,186299017,b'?'
6092,186299022,b'?'
6092,186299029,b'typo in label '
6092,186299032,b'// ??? - ? TODO ?'
6092,186299075,b'looks like it should to moved to counterItem as constuctor or factory method.'
6092,186299119,b'no need for this method - as it is calling parent. '
6092,186299145,b'this is fine - remove TODO then'
6092,186299174,"b'it should be declared server side +server side should use nameof instead of string when writing response, see:\r\nhttp://issues.hibernatingrhinos.com/issue/RavenDB-6016\r\n\r\nI think it is worth doing this especially in new handlers. '"
6092,186299180,b'same here.'
6092,186299197,b'put TODO as it is hard to find such places w/o TODO'
6092,186299212,b'can we update id of this dialog? '
6092,186299244,b'why added width ? \r\nMaybe call it right panel width? '
6092,186299248,b'why did you extend notification center?'
6092,186299252,b'?'
6092,186299281,"b""why 120px ? Isn't it too much? Especially when document doesn't have attachments, counters and revisions? AFAIK we talked about adding 70px? """
6092,186348174,b'todo: Add as a type.....'
6092,186348356,b'todo: remove datatype'
6092,186348867,b'removed'
6092,186349618,b'counterItem is Interface'
6092,186350135,b'changed to array of strings'
6092,186350882,b'todo:  introduce right-panel-width \r\nfor right panel & notification center'
6092,186357608,b'done'
6092,186357913,b'done'
6092,186359633,b'removed from here\r\ninside dto.d.ts instead'
6092,186360032,b'done'
6092,186360315,b'done'
6092,186360556,b'as discussed - there are server side classes - this is for studio use only'
6092,186360610,b'same as above'
6092,186360799,b'done'
6092,186364702,b'done'
6092,186365892,b'done'
6092,186367164,b'done \r\nfile-edit removed'
6092,186368101,b'done - removed'
6092,186368729,b'done'
6092,186368926,b'as discussed - to cover right panel'
6102,186654617,b'Why `DynamicNullObject` here?'
6102,186661022,"b""This is the case where this is not a document and we don't have an ID we just have a blittable, what should i have used?"""
6110,186752247,b'Missing `_lastChangeVector` set'
6110,186752457,b'what can cause _this_ to be raised?'
6110,186752755,"b""I don't like this global state, why aren't we doing this directly?"""
6106,186754937,b'Too many branches on `Calculated`. \r\nBetter to have this in a method and call it once.'
6106,186757563,"b""I'm not so sure it will have an impact, the bench prodiction is going to hit most of the time and the cost of iterating the fields twice is going to cost more. """
6106,186770611,"b'For a reduce key with multiple values, that might be hit a lot. \r\nIf will also be true/false all the time.'"
6122,186963415,b'Pretty sure that this is the wrong concurrency exception here.'
6148,187538235,"b""Here we have to make an interesting decision. For documents, we don't keep the change vector after the import.\r\nI think it would be better to have just `IncrementCounter` here, instead. With the total value.\r\nThe output that you generate should stay the same, though."""
6148,187538355,b'Are you sure that this is indicative to both counters and attachments?\r\nWhat if I only have one of them?'
6148,187538523,b'Can avoid the `ToList` here'
6148,187793865,"b'Exporting and importing will give you a different result.\r\nA: 1, B: 1 -> Export: A:2 -> Import: A:3, B:1'"
6156,187797142,b'It supports both'
6157,187809731,"b""shouldn't we set cachedItemsRenew to false here?"""
6157,187809795,"b""Explicitly not. If we have more than 512 properties in the stream, that is enough so we'll be proactive about it.\r\nBecause we are paying for the total size. Better to do it this way.\r\nHowever, I don't like the fact that we are creating a new `CachedProperties` here for each document.\r\nWe should probably clear the existing instance to avoid so many allocations """
6157,187858471,"b'In terms of perf, new allocation to CachedProperties is faster then resetting it.\r\nWe need for each document to :\r\n```\r\n foreach (var cachedSort in _cachedSorts)\r\n            {                \r\n                if (cachedSort != null)\r\n                {\r\n                    cachedSort?.Sorting.Clear();\r\n                    cachedSort.FinalCount = 0;\r\n                }\r\n            }\r\n```\r\n\r\n(in debug reset takes 1.4 times then new allocation)'"
6161,187882850,b'You might not have write permissions there.\r\nCreate this at the temp folder.'
6157,188055706,b'What happens if you just do `Array.Clear(_cachedSorts)` ?'
6157,188055730,b'And in release mode?'
6173,188200175,"b""We don't want it here.\r\nThis is a perf critical section of the code.\r\nThe whole point of _knownNewId_ is that we can skipping checking the storage.\r\nThat can give us some significant perf gains.\r\n\r\nThis check needs to happen during smuggler only (in the smuggler code).\r\nWe already have a warning about this issue in the docs, avoid using this style there.\r\nHowever, we need to handle the case of the user just wanting to import data from another node and hitting this issue. """
6175,188246053,"b'Why, this is relevant only on PUT on new docs. Not relevant anywhere else (`PATCH`, for example)'"
6175,188246266,"b""I don't want this solution, this does a scan, and can get into bad situation.\r\nJust change the generated doc id in this case."""
6175,188246429,b'This here should recurse immediately and try (once).'
6179,188266781,"b""Doesn't have to be accurate, but this can cause large gaps.\r\nUse `Interlocked` here, please"""
6179,188266865,b'Interlocked is required here.'
6179,188267002,b'There is absolutely no reason to do this.'
6179,188297204,"b""no it won't since we zero it..."""
6179,188297543,b'Nevertheless'
6185,188284210,b'Why are you removing this?'
6185,188284455,"b'What happens when we have TS? \r\nWe need to make this so this will be _ignoring_ any unknown properties, not ignoring well known ones.'"
6185,188284574,b'Need to ignore unknown types'
6086,186279739,b'Use `Header-Case`. That is more readable and match other headers.\r\nBetter to use `Known-Raft-Index`'
6086,186279758,"b'It would be better to return this value explicitly in the response, rather than implicitly via headers'"
6086,186279779,"b""Shouldn't be something that we send via query parameters.\r\nIt should be a property of the batch itself."""
6086,186279792,b'Why did you make this change? \r\nThe problem with this is that you have now added a few (expensive) dictionary look ups that to a common operation'
6086,186279810,b'Why introduce an interface here?'
6086,186279829,b'This does not match the `ToJson` impl below'
6086,186279831,b'use `nameof` here'
6086,186279834,b'This is not a valid change vector'
6086,186279856,"b""Doesn't match `ToJson` below."""
6086,186279862,b'Not a valid change vector'
6086,186279866,b'use `nameof`'
6086,186279873,b'Just pass the options object directly'
6086,186279878,b'Pass the options obj directly'
6086,186279890,b'Copy to a local variable first.'
6086,186279935,"b""That is misleading name. Transactions exists on local nodes as well.\r\nAnd I'm not sure why we want to expose this in the public interface"""
6086,186279949,b'Use multiple `key` arguments here.\r\nThat is a more natural way to go about it.'
6086,186279962,"b'This is confusing, because you need to do matchups between the `kyes` and the `indexes`.\r\nReturn a dictionary with the matches.'"
6086,186279976,b'Do we really need to create a new obj every time? This is pretty rare.\r\nCan do this lazily (also valid for the other ones here)'
6086,186279999,"b""You didn't remove it from `TrackedKeys` or check if the known index is the same."""
6086,186280017,"b'It is better to just ask the user to provide the `index` directly.\r\nThis way, they are aware that there is a remote call here, because they are the one making it.'"
6086,186280024,b'What about `DeleteCompareExchange`?'
6086,186280030,"b""You also don't check `StoreCompareExchange`"""
6086,186280053,b'Add the full code that is required to create the session in this manner.'
6086,186280058,b'what is marked? And why is this needed?'
6086,186280068,b'* `index` is non optional\r\n* need overload that take `CompareExchangeValue<T>`\r\n'
6086,186280074,b'Same'
6086,186280081,"b'Why call `await` here, just return the task'"
6086,186280084,b'why call `await`?'
6086,186280110,"b'Explain what is this operation that isn\'t supported.\r\n""Storing Attachments are not supported as part of a cluster wide transaction...""'"
6086,186280160,b'Why do you have some state here and some in the `ClusterSessionBase `'
6086,186280173,b'Where is the actual validation here?'
6086,186280192,b'Why do you wrap this in an parent value?'
6086,186280218,b'`load` will NOT be part of the cluster tx'
6086,186280232,b'Why pass it as a value tuple here?'
6086,186280238,b'Error handling here it missing'
6086,186280250,b'Error handling here is missing'
6086,186280262,b'Why would just creating this throw?'
6086,186280268,b'Why do we need separate error handling here.'
6086,186280284,b'Why use the base exception?'
6086,186280304,b'Please avoid using such complex value tuples.\r\nCreate real classes / structs. Otherwise the code get _complex_.'
6086,186280308,b'What is this meant to do?'
6086,186280334,b'`CancellationToken` is missing here.'
6086,186280336,b'`CancellationToken` is missing here.\r\n\r\n'
6086,186280344,b'What is removing the values from this?'
6086,186280392,"b'Missing, the return raft index'"
6086,186280407,b'Do this only if you actually have a value.'
6086,186280432,b'Need to have a full error here.'
6086,186280439,"b""Don't use such complex value tuples"""
6086,186280449,b'Why are you returning this? What is the meaning of skipped in this context?'
6086,186280457,b'Return this explicitly in the result'
6086,186280523,"b""Okay, this isn't correct. But I'm not sure what should be done here.\r\nThe problem here is that you can't really return the current value, because it doesn't reflect the command, it might have already been updated again"""
6086,186280541,b'Why do you have this max here? The command id should _always_ be fixed.'
6086,186280558,b'Why overwrite?'
6086,186280579,b'There should be an error here.'
6086,186280604,b'You are doing _length_ comparison. You need to actually check the value.\r\n'
6086,186280606,b'Same.'
6086,186280633,"b'There are a bunch of more places where this is used, for example, when the value is changed on the fly using admin js console'"
6086,186280649,"b'Before going to the `await`, do the check directly there. It can save some work'"
6086,186280691,"b""Avoid using out variable when you can use return code.\r\nAnd using `bool` here doesn't help much. We need to return an explicit explanation of what failed if we weren't able to apply things."""
6086,186280715,"b""This is wrong. You are trying to delete where key = 'loweredKey`\r\nBut you can have more than one such command"""
6086,186280730,b'Better to return a dictionary here'
6086,186280755,b'Where are we using json serialization on this?'
6086,186280762,b'switch case would be easier here'
6086,186280787,b'Need to create explanation why'
6086,186280834,b'Better to use record separator (ASCII code 30) here.'
6086,186280841,"b""This uses a lot of allocations that aren't required. Can do that directly on a buffer."""
6086,186280859,b'`Bluk` ?\r\n`Single()` - That will error a lot'
6086,186280883,"b""I'm confused about what you are doing here."""
6086,186280894,"b'You are missing handling for missing value.\r\nBetter to use the `Slice` ability to do lower casing, instead.\r\n'"
6086,186280905,b'Did no one used `ByNodeTag` ?'
6086,186280923,b'why are you doing this scanning on the byte representation?'
6086,186280931,b'Why not use `LastIndexOf` ?'
6086,186280952,"b""Let's kill this in favor of a simple early break"""
6086,186280966,b'Use the query string ability to send mulitple values to avoid doing string splits'
6086,186280986,"b'Why do you need this? We almost never get or send arrays directly, to have better versionning support'"
6086,186281012,"b'And in general, throwing this should be done in the `PrepareForSaveChanges` or `ValidateClusterTx`'"
6086,186390800,"b""`'TransactionMode': 'ClusterWide'` is better."""
6086,186391069,b'This will throw NRE here.'
6086,186391265,"b""Avoid the `Lazy` here, we don't need thread safety.\r\nWe can just use:  \r\n\r\n```\r\npublic IAttachmentsSessionOperationsAsync Attachments => _attachments ?? (_attachments = new ...);`\r\n```"""
6086,186391460,b'Missing check for `DeletedCompareExchange`'
6086,186391526,"b""Missing check for `StoreCompareExchange`.\r\n\r\nWhere are you checking that we aren't trying to send conflicting commands?"""
6086,186391730,b'Same comment about not using `Lazy`'
6086,186391986,b'Also check cancellation here'
6086,186391999,b'Also check cancellation here'
6086,186392092,b'Bad API.\r\nCreate a field on the `command` object instead'
6086,186394220,b'Bad API.'
6086,186394393,"b'This is a bad API, what does `bool` mean, success flag, usually'"
6086,186394425,b'Same issue with API'
6086,186394566,"b'You are not checking the size of the string here, can cause invalid memory access'"
6086,186394757,"b'The size is `21`, not `20`'"
6086,186394872,b'Try early exit here first\r\n'
6086,186395156,"b'Wrong, the change vector should _be_ a change vector'"
6086,186396413,b'There is no need to do this. Use a single buffer here.'
6086,186396827,b'Missing `WriteComma`'
6086,186707549,b'`nameof(ClusterWide)`'
6086,186707725,"b'static, use `nameof`'"
6086,186707783,"b'static, use `nameof`'"
6086,186707922,b'Needs to be removed from the public interface'
6086,186708143,b'`out long val`'
6086,186708537,"b'This is wrong. You want to add additional exception handling, but you forgot to `await`'"
6086,186708746,b'Why is the state spread around?'
6086,186708903,b'Why is this wrapped?'
6086,186709044,"b'This should be a method, not a property'"
6086,186709130,"b""`load` isn't part of the tx"""
6086,186709233,b'`!= null` reads better here.'
6086,186709457,b'Truncated'
6086,186709680,b'What happens if this throws? Why not wrap the whole thing in tx?'
6086,186709815,b'Who cleans this up?'
6086,186710023,b'This is racy with respect to waiting clients'
6086,186710147,b'This is racy'
6086,186710229,b'Who calls this?'
6086,186710332,b'And why are we waiting until the _cluster_ decide to do something about it?'
6086,186710707,"b""Add comment on why we aren't waiting for replication here"""
6086,186711022,b'All of this is wrong.'
6086,186711327,b'Still wrong'
6086,186711441,b'Still a question'
6086,186711644,b'strange formatting'
6086,186711795,b'`nameof`'
6086,186712200,b'Still need to add this in more places'
6086,186712265,"b'Do this eagerly, not lazily'"
6086,186712822,b'This will delete commands for other databases'
6086,186713059,b'why JSON serialization?'
6086,186713325,b'Will get it from wrong database'
6086,186713451,b'WIll use wrong db'
6086,186713651,"b""What if the value doesn't not exists ?"""
6086,186713854,"b'`cleanupIndex` is a bad name, I thought you refer to indexes'"
6086,186714110,b'What is this about?'
6086,186714499,b'what is this for?'
6086,186773082,b'done'
6086,186773104,b'done'
6086,186773151,b'done'
6086,186773241,b'done'
6086,186773468,"b'OK, I will simply to return the Task'"
6086,186773793,b'done\r\n'
6086,186774369,b'done\r\n'
6086,186774572,"b'the value can be also a primitive, so I have to wrap it.'"
6086,186774632,b'done'
6086,186774668,b'done'
6086,186774712,b'done'
6086,186774884,b'done'
6086,186776236,"b""It is a problem if this throws... Can we do something about it?\r\nWe can't even read the task id in order to notify an exception. """
6086,187042657,b'will return `true` and currentIndex `-1`'
6086,187042984,b'It seems that even if the notification is of a different type (but same base type) it still will serialize it in a bad manner.'
6086,187043451,"b'This is wrong to get the Etag by the node, since it is not unique and could come from different database or even cluster.'"
6086,187043953,b'If I want to update several compare exchange values.. So I need to know only their indexes.'
6086,188213151,"b""This is validated on `SaveChanges`, IIRC. So if we set it to normal but we have added cmpxchng, we'll throw."""
6086,188215138,b'This might be too early'
6086,188216622,"b""Shouldn't the `ToLower` be inside the `ReadCommandsBatch`?"""
6086,188219552,b'why not use `flags` here?'
6086,188220039,b'Why is this stripped here?'
6086,188220119,b'Why is this stripped here?'
6086,188220514,"b'What is the scenario where this actually happens, and what are the effects?'"
6086,188220708,b'Why are we removing important info (that the revision is from cluster tx) ?'
6086,188220756,b'Why are we removing important info here?'
6086,188220814,b'Why is this removed?'
6086,188220844,b'Why is this removed?'
6086,188221043,"b'In what context? ""deleting by prefix is not supported on cluster transaction... ""'"
6086,188221276,b'This is a whole lot of code that is going away +1'
6086,188233256,b'Will add a test to verify the behavior. '
6086,188233873,b'This is only to mark that we need to remove the ClusterTx flag when we will put the document.'
6086,188236691,b'done\r\n'
6086,188237605,b'We can get here from the conflict status. When the local groupId is higher than the remote one.\r\nThe scenario that I can think of: an external replication of cluster transaction to database that also performed cluster transaction.\r\n\r\nSo at first will resolve it to the local document. (and stripping the FromCluster flag)'
6086,188237900,b'You are right.\r\n\r\nneed to strip it only if `removeClusterTx == true`. '
6086,188238646,b'You are right. Was too eager about removing it..'
6086,188238979,b'done.'
6086,188257204,b'flags = '
6086,188257960,"b""Needs to be moved _after_ you know that this isn't already okay\r\n"""
6086,188404902,"b'It will require 298,941 nodes in the cluster to hit :-)'"
6086,188405520,"b""It will be clearer if you'll move it higher."""
6086,188542652,b'What is the meaning here?'
6086,188566335,"b'We add the ""db/"" prefix to the key.\r\nSo we need to strip additional 3 chars.'"
6179,188578137,b'This variable seems not used anywhere'
6179,188578506,"b""Isn't reference update guaranteed to be atomic in CLR mem model? i.e. `documentsToRemove= replacementOfDocumentsToRemove` provided that `documentsToRemove` is defined as `volatile`?"""
6179,188578824,"b'After this line we should probably increment `currentlyTrackedDeletedItems`, right?'"
6207,188617784,"b'Is this intentional, and if so , why?'"
6207,188617844,b'Who handles errors here?'
6206,188618675,b'Is this correct?'
6206,188620699,b'no. reverted this change'
6207,188620906,"b'no, i reverted this change'"
6207,188621027,b'it is handled in ExecuteTasks'
6179,188666621,"b""I don't want to define documentsToRemove as volatile since I'll need to pay the price every time I read it and I don't really care if I'm reading from an old version, this is just an optimization and not a critical invariant. """
6179,188667904,"b'I already increment in the if statment, i should set the counter to 1 and not 0 inside the if, again this is not supper critical so this optimization will work after 64,001 docs and not 64,000'"
6179,188855257,"b""Then why bother using `Interlocked.Exchange`? Aren't reference updates guaranteed to be atomic in the CLR memory model?"""
6179,188871065,"b""There are atomic, yes. But it bugs me to do it in an unsafe way.\r\nWhat is worse, I'm not sure what value the GC will see in this scenario, and we want to clear it as soon as we can"""
6221,188929446,b'Include the full error message?'
6221,188929566,"b'This will throw index out of range error, which likely cause the user to think the fault is with us and not the source data.\r\nWe need to handle this explicitly.'"
6221,188929640,b'Why are you returning an empty document instead of calling `continue` ?'
6221,188932803,b'https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Smuggler/Documents/DatabaseSmuggler.cs#L495'
6221,188933079,"b'""Fail to parse CSV line {line}, Error:{e.Message}""\r\nCan\'t make users smart, it\'s behind my capabilities'"
6221,188933382,"b""The call stack won't give the user any additional info and will make huge messages in the studio, give a line number the user can check his input."""
6184,188284985,b'`_result.CompareExchange` ?'
6184,188285596,b'What scenario call for this?'
6184,188286254,"b""Creating such a flag just for this is not a good idea. You'll have to change this in the future.\r\nYou can use `xor` flags, instead."""
6184,188286407,b'and why is this required?'
6184,188286903,"b""Why is this required? When you'll add the counters, that will get added anyway, no?"""
6184,188287066,b'Do we really want to do it on _every single counter_? Why not batch it?'
6184,188287337,b'Why is this continuing to run under error?'
6184,188287536,b'This seems really suspicious.'
6184,188287948,"b""We don't want that. 4.0 should be able to just ignore stuff that it doesn't know"""
6184,188288532,"b""This will cause us to fail to talk to 4.0, sure.\r\nAlso will cause 4.0 to fail to talk to us.\r\n\r\nI don't think that this is the desired behavior."""
6184,188397594,"b""I don't understand, how can you negotiate with the other side if you keep the same version?"""
6184,188398352,"b""No, you now ensured that we can't talk to the other side, even if this db doesn't _have_ any counters.\r\nThe logic goes like this:\r\n* We use the _replication version_ to know if the other side supports counters.\r\n* It is fine if the other side reject us, because then we'll downgrade to the version that doesn't support it.\r\n* Everything work, until you need to send a counter to destination that does not support it. \r\n* Only then you should fail"""
6184,188398449,"b""That shouldn't be here, that is the topology version"""
6184,188398479,b'Remove'
6184,188398694,b' Can we avoid `O(N**2)` costs here?'
6184,188398750,b'`exsicting`'
6184,188398988,"b'What if we have 10,000,000 counters?\r\nWe need to flush them every now and then (say, 10,000).\r\nCan actually do that in parallel, like we do with docs'"
6184,188399220,"b'To ensure, that is safe to call multiple times, right?'"
6221,189005522,"b'""The CSV provided to import does not conform to standard rules. Check line {line}. Parse Error: {e.Message}""\r\nThat would do it. '"
6228,189193406,"b'Huh? This is for a specific database, but you are returning true for server wide?'"
6184,189194959,"b'Need to set `LastChangeVector` here, no?'"
6184,189195108,b'An enum would be better. We will probably have multiple modes soon'
6184,189195558,"b""Wrap all of this in a separate method. In 99% of the cases, it won't be invoked, and we want to move it out from hot code"""
6184,189196001,b'Better to use AsyncHelpers.RunSync here.'
6184,189196094,"b""Shouldn't you be disposing the old command, as well?"""
6184,189196143,b'missing dispose?'
6225,189197953,b'@ml054 / @kwiato Can you look at that and make sure that this make sense from the UI?'
6225,189198873,"b'sure, I will get this issue and check this. '"
6240,189550770,"b""Wouldn't it be better to use HTTP status codes for this and throw when you cannot refresh the certificate? The exception would contain the exact reason?"""
6240,189554598,"b""But this isn't an exceptional situation, it is (sort of) expected."""
6251,189813864,"b'Use db name and date as well here, I think'"
6251,189833173,"b'I\'ve dropped the usage of Guid in favor of `$""export-{DatabaseRecord.DatabaseName}-{SystemTime.UtcNow:HH_mm_ss.ffff_MM-dd-yyyy}.ravendump""`'"
6257,189847373,"b""let's avoid spaces. Use `_` instead."""
6257,189847918,b'`Orders_20180522_1213.csv` should be more readable.'
6257,189856124,b'done'
6251,189870910,"b""Isn't better to have yyyy-dd-MM at the beginning? (allows to sort by date)"""
6251,189883441,"b'Yeah, I will fix it and make it more consistent with RavenDB-11126'"
6253,189835718,"b'How can this be null? Because if so, in line 216 we have NRE'"
6253,189836185,"b""This is bad, because it doesn't take into account the cluster level index.\r\nA cluster tx on this may very well have a raft index that is smaller than the etag, resulting in us expecting that this is already committed and ignoring the change."""
6253,189837241,b'internal?'
6253,189837432,b'private or internal'
6253,189838706,"b""isn't this breaking backward-compatibility?"""
6253,189838932,b'typo :)'
6253,189839661,b'no need to add async/await here?'
6253,189839816,b'can remove async/await from here?'
6253,189840387,b'WriteObject?'
6253,189840874,b'CompareExchange?'
6253,189841772,"b""just 'ClusterTransactions' ?"""
6253,189846669,b'why this change now?'
6253,189846997,b'done'
6253,189847139,"b'This is to match 4.0 behavior, right?'"
6253,189847312,b'done'
6253,189847498,b'What is the meaning here?'
6253,189847715,"b'The previous implementation, broke it. This should fix it :)\r\n '"
6253,189847873,b'done'
6253,189847965,b'done'
6253,189852478,b'done'
6253,189852664,"b""Because we changed the key format. (removed the 'db/' prefix)"""
6253,189853002,b'done'
6253,189853893,"b'When we export transaction _with_ documents we will check whether the transaction was already executed and if so, we will skip exporting it.\r\nIf we export _without_ the documents we will always take the stored transaction. (Not sure if there is a real case when we want to do something like this, but it is necessary for the tests) '"
6253,189854162,b'done'
6253,189855206,b'done'
6253,189859142,"b""This is indeed bad, because two document will have the same change vector.\r\n\r\nthe RAFT here is confusing, it doesn't reflect the raft index of the cluster, rather it is an incremental etag for each PUT/DELETE command that was passed through the cluster transaction.\r\nWith the unique Id of the database group."""
6253,189921947,"b""That is actually pending ones, that haven't been applied yet"""
6253,189924178,b'Strip `FromClusterTransaction` during import'
6273,189931391,"b""You didn't have that in the 4.1 PR?"""
6273,189933875,"b'Nevermind, I see it was already merged'"
6273,189949279,b'This fix is here because I still needed to change\r\n**from** yyyyMMdd:HHmm **to** yyyyMMdd_HHmm \r\n(use the underscore...)'
6262,189929569,"b'This is wrong and may reset the change vector back, actually'"
6262,189930574,"b""Let's avoid having complex nested Linq ops.\r\nBuild the `DynamicJsonObject` directly"""
6262,189930879,"b""Under what scenario I _don't_ want that?\r\nWe don't give a choice on attachments, and we shouldn't here."""
6262,189931077,"b'We need to _only_ allow it if this is an update, not if this is already merged / conflict with the existing one'"
6262,190148616,b'done'
6262,190148693,b'removed'
6262,190148763,b'done'
6262,190162892,"b'Somewhat of a problem still, what is this is conflicting?'"
6262,190163906,b'can there be duplicates here?'
6294,190262711,b'Can we use `internal` instead?'
6297,190311656,"b""Let's move this to `DatabaseSource`, instead. We are already too busy here."""
6297,190311714,"b'Also need this on Tombstone, for example'"
6294,190415422,"b'Yes, I will change that, but it is temporary code anyhow and will be removed once the issue is solved'"
6298,190481345,b'string?'
6317,190570549,"b'Use object, not direct array to write this.'"
6326,190678727,"b""This is a bad idea. It won't work with localized exception messages. \r\nBetter mode here would be to handle this with exponential backoff strategy.\r\n`UpdateTopologyChangeNotification` should wait 500 ms after first failure, then 1 second, then 2 seconds, then 3, etc. \r\nUp to a check per every 30 seconds."""
6329,190679473,"b'Here too, we need the backoff strategy when calling `UpdateTopologyChangeNotification`'"
6332,190681743,b'if public then it needs to be frozen after DocumentConventions.Freeze'
6332,190682177,"b'The convention is not null (or does not return null by default, which means that it changes the old behavior and introduces a breaking change.'"
6332,190682672,b'please make it internal'
6330,190681972,"b'In C#, we just ignore this scenario, I think this might be a better option here.'"
6330,190682111,"b'Do we need a type, we can just tell by the precence of fields, no?'"
6330,190682838,"b'I don\'t like this:\r\n`createSpatialField(createSpatialPoint(l.Latitude, l.Longitude))}`\r\n\r\nLet\'s do ""overloading"" here by checking number of args and their types.\r\nUsing `arguments`, we have the following signatures:\r\n\r\n* `createSpatialField(name, lat,lng)`\r\n* `createSpatialField(name, wkt)`\r\n* `createSpatialField(lat, lng)`\r\n* `createSpatialField(wkt)`\r\n\r\nWe can use the types to decide how to deal with this directly\r\n\r\n'"
6330,190683275,"b""I don't see where this is actually happening, though? """
6332,190684525,"b""Good point, let's make it null / noop by default"""
6292,190314065,"b'This is wrong. \r\nWhat you are doing here is asking for the _cluster_, not the db group.\r\nIf we have a db that is not on the leader, it will never run this.\r\nBetter to say something like: ""dbGroup[0] == this""'"
6292,190314244,b'Error handling?'
6292,190357948,b'@ayende Is there a possibility to have `null` here or 0 members? I need to apply similar fix to v4.0'
6292,190362361,"b""No, it can't be null / empty"""
6292,190362772,"b""I'm not sure how correct this is going to be.  What happens if queries are made on a _different_ node, and not this one?"""
6292,190362834,b'Might actually be better to move this entirely to the cluster observer?'
6292,190485637,b'Created a separate issue for that: http://issues.hibernatingrhinos.com/issue/RavenDB-11206'
6292,190544372,"b""Let's run this IFF there have been changes in the indexes since we last run this."""
6292,190544549,b'Can just check the index of the db record to see if it changed'
6292,190544621,"b""Technically speaking, this may actually run on two different machines at the same time, even with the check.\r\nI wonder if we should handle this in some manner? Maybe do the operation optimistically, so send it to the leader and it will only actually run if the db record didn't change?"""
6292,190807474,b'Done'
6292,190807671,"b""I have some ideas, let's apply them as a part of http://issues.hibernatingrhinos.com/issue/RavenDB-11206"""
6336,190905375,b'What will cause this error here?'
6336,190906129,"b""It's very unlikely we will get an error here as we already succeeded in opening it once, so I don't see why we could fail on the second attempt. Just defensive coding."""
6292,190906162,"b""Can there be errors from here? Don't we need to handle this?"""
6292,190906532,"b""shouldn't we abort if there are errors?"""
6292,190906585,"b""Shouldn't we abort if there are errors?"""
6292,190906675,"b""I wonder if it isn't safer to do this one index at a time, instead of all the matches."""
6292,190906839,"b""If there have been errors, we won't run until the next DatabaseRecord update.\r\nWhat about moving this to the end?"""
6292,190907516,b'I think we should do this one index at a time. '
6336,190910039,"b""But that was the user's issue, no? Any idea what caused it?"""
6336,190912733,"b'No, the user issue  was that we succeeded in opening the lucene directory and creating an index instance:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/8936425e9eda9975a189890cae73d16eaba78b85/Raven.Database/Indexing/IndexStorage.cs#L201-L202\r\n\r\nbut failed in:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/8936425e9eda9975a189890cae73d16eaba78b85/Raven.Database/Indexing/IndexStorage.cs#L204\r\n\r\nIn result `indexImplementation.Dispose()` was called which closes the lucene directory. But we were still using it in ` TryRecoveringIndex`\r\nhttps://github.com/ravendb/ravendb/blob/8936425e9eda9975a189890cae73d16eaba78b85/Raven.Database/Indexing/IndexStorage.cs#L278\r\n'"
6330,191067786,"b'what do you mean by ""this scenario""? bad spatial field needs to be ignored and not error?\r\n'"
6330,191067806,"b""I guess we can avoid this extra field, but I'll still need to have the same number of parameters since there is no overloading in JS"""
6330,191067848,"b""No overloading in JS, the 'createSpatialPoint' is just an helper function you can invoke it like so: \r\ncreateSpatialField({$spatial:{Lat:x.lat, Lng:x.lng}})      // (assuming i'll remove the Type parameters)"""
6330,191067903,"b'This is just a comment to explain the ""magic"" since i understand that it won\'t be clear to somebody reading the code. I have actually already implemented the logic more than a month ago when dealing with dynamic fields and there was very little i had to change to support the spatial fields. The value pased to the dynamic field is the createSpatialField(...) and it is later handled in the same code path as regular spatial fields.'"
6330,191068105,b'Yes'
6330,191068116,"b""No, overloading won't work in JS, but _varaible number of args_ work"""
6330,191068139,"b""I'm not following this from the comment and the code, can you extend the comment?"""
6330,191068221,"b""I have looked at the JS community and asked and this was the answer I got, I don't claim to know what makes sense in JS. I'll check the number of arguments, I don't really have an opinion about this..."""
6330,191068239,"b""i'll try to make the comment clearer"""
6345,191069885,b'Is this indeed the right version?'
6346,191069916,b'`witht`'
6346,191069945,b'Will this mutate the actual `field.Name` instance?'
6346,191077127,"b'yes, this is why we pass the field to the method.'"
6346,191077155,b'see https://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Server/Documents/Indexes/Persistence/Lucene/Documents/JintLuceneDocumentConverter.cs#L137'
6330,191082576,"b'@talweiss1982 maybe this will be useful for you:\r\nhttps://www.typescriptlang.org/docs/handbook/functions.html#overloads\r\n\r\nEx.\r\n\r\nfunction pickCard(x: {suit: string; card: number; }[]): number;\r\nfunction pickCard(x: number): {suit: string; card: number; };\r\nfunction pickCard(x): any {\r\n    // Check to see if we\'re working with an object/array\r\n    // if so, they gave us the deck and we\'ll pick the card\r\n    if (typeof x == ""object"") {\r\n        let pickedCard = Math.floor(Math.random() * x.length);\r\n        return pickedCard;\r\n    }\r\n    // Otherwise just let them pick the card\r\n    else if (typeof x == ""number"") {\r\n        let pickedSuit = Math.floor(x / 13);\r\n        return { suit: suits[pickedSuit], card: x % 13 };\r\n    }\r\n}'"
6346,191085974,"b""Isn't this the field that we just pulled from the cache, so we are mutating a global value here?"""
6346,191086883,"b""it shouldn't because the field name is originaly '_' and we modify it to something else. but I'll need to verify this."""
6346,191087125,"b""I'm pretty sure that we aren't actually verifying that the field name is `_` (and we shouldn't)"""
6352,191153038,"b'Better to throw when there any any auto indexes in the list instead of silently filtering them out:\r\n```\r\nvar anyAutoIndexes = _parameters.IndexNames\r\n.Where(indexName => indexName.StartsWith(""Auto/"", StringComparison.OrdinalIgnoreCase)\r\n.Any();\r\n```'"
6352,191153409,"b""Let's not ignore them. Throw here."""
6352,191166593,b'If I throw - as you request - then when the list that is passed contains a mixture of both static & auto indexes then work will Not be done at all for the static indexes\r\n\r\nIs that the wanted flow?\r\nThe way it is now - work is still done for the static-indexes\r\n\r\nWhat do you think ?'
6352,191166740,b'same question as above'
6352,191167891,b'Answered on Slack'
6352,191181508,b'done'
6352,191181526,b'done'
6353,191148627,"b""I think that we should add support for multiple keys in configuration entry. We do not really care from which key it was set probably or drop 'Testing.ParentProcessId' entirely."""
6353,191177398,b'Good idea'
6353,191182269,b'Fixed'
6353,191182773,"b'No, we want a _single_ property, not LegacyParentProcessId and ParentProcessId'"
6353,191185572,b'dropping the Testing.ParentProcessId?'
6362,191202199,"b""Both of the keys should be inserted, not only the first.\r\n\r\nAlso check 'RavenConfiguration.AllConfigurationKeys'. We need to make changes there also."""
6362,191202617,"b'If you want to go that way, then please validate (ConfigurationCategory.Initialize) that all of the attributes have the same scope.'"
6362,191228368,b'Fixed'
6368,191255977,"b""Why aren't you just using the root object here?"""
6368,191256352,b'Why do we care about the index name?'
6368,191256428,"b'That might not be a good idea, if they are filtering in the index.\r\nWhy not just get an array of document ids, instead?'"
6368,191256542,b'How would this handle a multi map index on different collections?'
6366,191256798,b'This looks like something that user would do?'
6366,191310988,"b'Yeah, that\'s an interesting question, because ""formally"", we say that in blittable and contextes we do not support parallel usage, but ""intuitively"" it seems ""ok"" to be able to read blittables parallelly, the problem is that when we access strings in a blittable, we use the context\'s LazyStringValue object pool, and therefore it\'s not possible to do that, unless we disconnect blittable from the context..'"
6366,191314098,"b""The problem is that this is one case of very obvious pitfall at the _user_ level.\r\nI'm asking if we want to prevent that scenario.\r\nMost blittable scenarios are on our code, and we know that it should be single threaded."""
6366,191319903,"b""First, we dont expect the average user to use blittables. Second, there will always be pitfalls like that, for example, if we had another context.read outside the subscription task, in that case there is no way we can accept that. We could add flag to blittable reader and to context.read that will tell them not to use object pooling and other non mandatory context services, but we have to remember that it won't prevent all pitfalls and we should probably document common ones.."""
6368,191330398,"b'Because nobody responded to my request to define the controller requirement for the studio. Below you want to pass ids where should they reside, inside the index definitions?\r\nI expected a million comments on my work I planned ahead. '"
6368,191330649,b'This is a test controller we should warn the user he is doing something wrong if we can.'
6368,191330656,"b""Okay, make sense. We'll need an array of document ids there, for sure."""
6368,191331163,"b""No, this is a test for JS only, not for everything else. We shouldn't care about the name here."""
6368,191331940,"b'This is the best way to go by default since you don\'t need to define anything and is more likely to run into unexpected document structure than to define a set of documents.\r\nI would much rather write the index and maybe set the ""pageSize"" which might be a misleading name since it isn\'t the result\'s pageSize but the input\'s.\r\nWe can support both but I still think this should be the default.\r\nI\'m still waiting for requirements, without any I just implemented what I thought is the best approach, I expect @ml054 to come up with more UI stuff later on. '"
6368,191332229,"b""I don't follow your question, this is the code that is doing exactly what you're asking about."""
6368,191333512,"b""docsPerCollection is input per collection, this is why an array of ids is going to be annoying since i'll have to read them check their metadata bucket them into their respected collection..."""
6380,191443142,"b""why group by matters here? Shouldn't we still be able to run over the indexed fields?"""
6380,191457240,b'The problem is that GetStringIndex returns invalid result (not complete) when we are grouping by array content. This occurs e.g. in RavenDB_8761.Can_group_by_array_content'
6380,191494308,"b""I'n not sure that I'm following on that. \r\nWhat is not complete? It is supposed to give you (any of) single value from the array, typically the first one, but not guaranteed."""
6389,191884335,"b""Let's avoid `async void` and friends.\r\nAnd we need to call to `TrySetException` in this case, no?"""
6393,191885295,b'This looks like it is wrong to me. You are _not_ allowed to use a single transaction concurrently from multiple threads.\r\nBut you are spawning off multiple tasks here?'
6389,191896881,b'@aviviadi what do you think about this approach: https://github.com/ppekrol/ravendb/commits/RavenDB-11137 ?'
6389,192012401,"b'@ayende - if we TrySetException, we might report failure on a successful operation. Hunged client (with hopefully timeout set) is more reasonable for operation with no knowledge if it went all the way or not (and the connection is probably ""dead"" anyhow at this point)'"
6389,192013294,"b""@ppekrol - obviously that's better (fixes the above remark)"""
6389,192013890,"b""Yes, let's go ahead and merge this"""
6403,192148739,"b""Need to say what _is_ supported, not what isn't."""
6403,192148915,"b""That isn't the actual error, you need to be clear what you are looking for, IE, the document instance itself.\r\nAlso should allow to pass a string doc id."""
6403,192149396,b'Why not build a JS object directly here?'
6403,192149767,"b'Else, not supported.'"
6403,192150423,"b'This should actually be: ` counter(u, \\""downloads\\"", raw)`'"
6415,192446074,b'`value is T t` is shorter'
6415,192446216,"b""This might be confusing to the user, if they try to register two value converters, they'll get the first one?"""
6415,192447120,"b'Just call them until you find someone that can process it, no need for the checks'"
6415,192447354,"b'`TryConvertValueToObjectForQuery` vs `TryConvertValueForQuery` - Why do we have both, and how do we explain to users the diff?'"
6415,192448041,"b""We can't change `TryConvertValueForQuery`, because of API compact.\r\nBut we can use a single location for this and wrap the `TryConvertValueForQuery` callback with one that outputs an object, so we'll only have to check for it once."""
6415,192449054,"b'I can change it, but it was copied from the TryConvertValueForQuery version.\r\nShall I change both implementations?'"
6415,192449233,"b'I can change it, but it was copied from the TryConvertValueForQuery version.\r\nShall I change both implementations?'"
6415,192449378,b'It seems those checks are here for fast shortcutting ...'
6415,192450034,"b'Yes, this is my concern as well. But I wanted some what more pointers before impl it.'"
6415,192450830,"b'Yes, so how I want to register a converter that can strongly typed convert to string (the existing API)\r\nbut I also want to register a version that can convert to object. (a new API).'"
6421,192598006,b'Are you sure this is `28` ? `<>h__TransparentIdentifier` is just 26 chars?'
6421,192598736,"b'yes, 26 + 1 for the number suffix and +1 for "".""\r\n'"
6421,192601384,"b'Better to define const next time and use const.Length + 1 + 1 and add relevant comment explaining what does +1 are, so future maintainers will better understand what is going on.'"
6425,192654929,"b'Actually, in some cases, you maybe have more than a single number here.\r\n`<>h__TransparentIdentifier33` for example'"
6423,192653239,"b'If this is 0, that is also information, it means the client is too old'"
6423,192653270,b'What can cause this?'
6423,192653653,"b'You need to distinguish between ""don\'t know yet (other node is down)"" to ""The other node is too old to tell me""'"
6423,192653890,b'Better to have a fixed version for this.'
6423,192654119,b'What does this gives over `Enumerable.Max`?'
6423,192654137,b'Same'
6423,192654413,b'Move to separate method'
6423,192654489,b'Because?'
6423,192654587,b'Move throws to dedicated method to allow inlining of this one'
6423,192654683,b'Remove this.'
6423,192655164,"b""When the deserializer for the command doesn't exists. """
6423,192655407,"b'OK, in any case I think we need to use a median here instead of taking the minimum of the voters.'"
6423,192655757,"b""Oops..  I've searched the Max function in Math."""
6423,192661749,"b'Actually, the distinguish between old version and ""don\'t know"" happened when the candidate ambassador reads the \'RequestVoteResponse\'. \r\nhttps://github.com/karmeli87/ravendb/blob/7eb891a9b7e09cda1b301160fe7cd3317a821fe7/src/Raven.Server/Rachis/RequestVote.cs#L29'"
6423,192668113,b'More concrete example is when a 4.1 follower sends 4.1 command to his 4.0 leader.'
6423,192712234,b'And it is at that you can take this into account.\r\nBut we need the minimum number among the majority that we know of.'
6423,192712555,b'Why use the median here?'
6423,192716189,b'Cluster version is determined by the highest common version of the majority.\r\nWhich is simply the median :-)  '
6423,192716854,"b'no, the minimum versions of all the nodes that are there'"
6423,192801594,b'This needs to have a note on `EXPERT ONLY`'
6423,192801658,b'Also `MaximalVersion` ?'
6406,192200151,"b'This is wrong, we should _never_ throw from finalizer.'"
6406,192583863,"b'There is no difference between this finalizer and all other finalizers in that file. Other finalizer prevent throwing ""ObjectDisposedException"" but other exception won\'t be treated. And frankly, if you have memory management exception during finalization, you better loose the process then continue working in invalid memory state.'"
6436,192982847,b'witht '
6403,192997906,"b'this will look something like: `counter(u, \\""downloads\\"", \\""raw\\"")`\r\nMaybe we can do: `counterRaw(u, \\""downloads\\"")`\r\n'"
6403,192998418,b'Yes'
6438,193025119,b'This is a breaking change for someone who might be calling this.\r\nMight be better to return noop to continue the current behavior.'
6443,193031700,"b""I don't like it on the root interface. The user will never call it.\r\nBetter to do downcast when needed."""
6442,193038639,b'I will change this to internal'
6455,193309538,"b'See here:\r\nhttps://www.w3schools.com/sql/sql_datatypes.asp\r\n\r\nmissing more things (tinytext, MEDIUMBLOB, etc)'"
6455,193311068,b'ok updated ticket - thanks'
6458,193349645,"b""Let's avoid the lamda here and just return the current value"""
6458,193349751,b'`result.TransactionIndex <= 0` ?'
6458,193349869,b'Should switch that. '
6458,193350080,"b""This is a bad idea. You are relying on mutable global state that doesn't belong to you.\r\nYou might be reading some _other_ command state, for example."""
6458,193350441,b'Why both `GetValidator` and `Validator`?'
6458,193350843,"b""Not sure if this is a good idea, for dev build, that will always be 13, for example.\r\nMeans that we can't inter-operate between dev and official builds.\r\nBetter to use a fixed version, such as `4.0`, etc"""
6458,193350957,b'Remove this'
6458,193351203,b'Do we really need to create a new instance every time?'
6458,193356136,"b'The problem is, if we do several save changes in the same session.'"
6458,193356311,"b""See later, your usage of this in RequestExecuter isn't good"""
6458,193375464,b'The dev build for 4.0 is 40 and for 4.1 is 41.'
6462,193383740,b'@myarichuk Do we need to apply this in PropertyNameConventionJSMetadataProvider also?'
6463,193382615,b'InvalidOperatonException would be better here'
6463,193385518,b'done'
6462,193396480,"b'Yeah, I think we should apply it there too. '"
6461,193399231,b'Why is this under #if def?'
6461,193404181,b'It needs to be removed entirely. Probably git cherry-pick issue.'
6474,193405061,b'`T path` should be `object documentInstance`'
6478,193458865,"b""I think it would be 'safer' (for future purposes) to put the same value as we put in Raven-Client-Version\r\n```\r\ntypeof(RavenServerStartup).GetTypeInfo().Assembly.GetName().Version.ToString();\r\n```"""
6478,193472968,"b""The problem here is that this changes for dev.\r\nWe don't usually have issues for dev client to server, but we'll have server to server a lot, and existing client to dev servers. \r\n"""
6478,193503446,"b""TBH, till this day I thought that we are sending either:\r\na) `major.minor.patch.build` e.g. `4.0.3.40038`\r\nb) `major.minor.patch-buildtype-build` e.g. `4.0.3-patch-40038`\r\n\r\nbut the truth is that `RequestExecutor.ClientVersion` is returning only `major.minor.patch.0` e.g. `4.0.3.0`, so it does not contain build version anyway, but at least there is a `patch` number.\r\n\r\nUsing the `RavenVersionAttribute.Instance.Version` will yield only `4.1` for all `4.1` servers. I'm just afraid that this might not be enough someday. We had this issue in the past where certain tools (IIRC smuggler) were modifying its behavior depending on the server version."""
6458,193507395,"b""As a continuation of:\r\nhttps://github.com/ravendb/ravendb/pull/6478#discussion_r193503446\r\n\r\nIs this correct now? We are sending here strings like `4.1.5.0`. Which means that we are comparing only number `5` here? Which is a semver 'Patch' with `ServerVersion.Build` which is a build number e.g. `40038`."""
6478,193522615,"b'So we could use the FullVersion? Since we interested `major.minor.patch` this should be enough, no?'"
6478,193525367,b'For best flexibility we should go with: `major.minor.patch.build` and apply this change also to the client. But `typeof(RavenServerStartup).GetTypeInfo().Assembly.GetName().Version.ToString();` could be enough. @ayende ?'
6478,193527301,"b""I'm fine with either option, go ahead"""
6478,193529114,"b""@karmeli87 let's go with `major.minor.patch.build` for both client and server (4.0 and 4.1)"""
6458,193529159,"b'That should be fine here, we explicitly state that we want to allow servers from the same minor version to cooperate together'"
6458,193548730,"b'Shouldn\'t this be changed to:\r\n```csharp\r\nif (clientVersion.Major != RavenVersionAttribute.Instance.MajorVersion || clientVersion.Minor != RavenVersionAttribute.Instance.MinorVersion)\r\n```\r\n\r\nwhere `AssemblyVersion` is:\r\n\r\n```csharp\r\n    [AttributeUsage(AttributeTargets.Assembly)]\r\n    public class RavenVersionAttribute : Attribute\r\n    {\r\n        public string CommitHash { get; set; }\r\n        public string Build { get; set; }\r\n        public string Version { get; set; }\r\n        public string FullVersion { get; set; }\r\n\r\n        private static int? _buildVersion;\r\n        private static readonly Version _assemblyVersion;\r\n\r\n        private static RavenVersionAttribute _instance;\r\n\r\n        public static RavenVersionAttribute Instance => _instance ?? (_instance = (RavenVersionAttribute)typeof(RavenVersionAttribute).GetTypeInfo().Assembly.GetCustomAttributes(typeof(RavenVersionAttribute)).Single());\r\n\r\n        static RavenVersionAttribute()\r\n        {\r\n            _assemblyVersion = typeof(RavenVersionAttribute).GetTypeInfo().Assembly.GetName().Version;\r\n        }\r\n\r\n        public RavenVersionAttribute()\r\n        {\r\n            MajorVersion = _assemblyVersion.Major;\r\n            MinorVersion = _assemblyVersion.Minor;\r\n            PatchVersion = _assemblyVersion.Build;\r\n            AssemblyVersion = $""{MajorVersion.ToInvariantString()}.{MinorVersion.ToInvariantString()}.{PatchVersion.ToInvariantString()}.{BuildVersion.ToInvariantString()}"";\r\n        }\r\n\r\n        public readonly string AssemblyVersion;\r\n\r\n        public readonly int MajorVersion;\r\n\r\n        public readonly int MinorVersion;\r\n\r\n        public readonly int PatchVersion;\r\n\r\n        public int BuildVersion\r\n        {\r\n            get\r\n            {\r\n                if (_buildVersion == null)\r\n                {\r\n                    if (int.TryParse(Build, out var buildVersion) == false)\r\n                    {\r\n                        _buildVersion = 41;\r\n                    }\r\n                    else\r\n                    {\r\n                        _buildVersion = buildVersion;\r\n                    }\r\n                }\r\n\r\n                return _buildVersion.Value;\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n?'"
6458,193638477,b'That works'
6495,193701480,"b'We already did the check, why are we calling add or update here?\r\n'"
6495,193709886,"b""Right, we can call `TryAdd` if key isn't there. If it is there we are updating in-memory reference anyway - no need to call `AddOrUpdate`. Thanks"""
6509,194051940,"b'Not a fan of using EntityToBlittable on server side, in that case it wont be too frequent though..'"
6509,194054057,"b""It's easy to use. Is there any problem with that? We use it quite commonly when dealing with aggregated notifications (as you pointed, those aren't frequently running actions)."""
6509,194059005,"b'As long as it is not frequently called, it\'s bearable, but in general, I would feel more comfortable if we would use our ""compiled"" deserialization, which is more performant.'"
6509,194060988,"b""Oh, yeah but it's not so important in those scenarios"""
6518,194181536,"b'The dates in the logs are `UtcNow` for a reason.\r\nIn particular, `UtcNow` is _much_ faster than `Now`.\r\nAnd this matters a lot in the logs. See:\r\nhttps://blogs.msdn.microsoft.com/kirillosenkov/2012/01/10/datetime-utcnow-is-generally-preferable-to-datetime-now/'"
6528,194185396,b'This also needs to change.'
6537,194192691,b'@ayende not sure about that default. Your call.'
6537,194192773,b'Might need to update it every now and then for things like daylight savings changes?'
6537,194192856,"b'Can probably get away with doing that only once every file, or when we are about to go idle?'"
6537,194193018,"b""I'll fix that in a bit"""
6539,194194802,"b""Shouldn't this be `if (_updateLocalTimeOffset == false || UseUtcTime)` ?"""
6539,194195341,b'Wondering if we will be able to hit this on a live huge system?'
6539,194195364,b'Yes'
6539,194195819,"b'What do you mean? We want to avoid this on an ongoing basic, and we are, at this point, going to call the `Wait` method anyway.\r\nSince we are about to go idle, we can afford to check if this is still up to date, no?'"
6541,194196341,"b""I'm not sure that I'm following on the optimization here? \r\n`configuration.Logs.UseUtcTime` defaults to `true`, no?"""
6539,194196443,b'Ok'
6541,194196784,"b""I wanted to optimize a case when someone sets UseUtcTime to false but is in UTC timezone. But now I'm not sure if my assumption is correct, that if LocalToUtcOffsetInTicks is 0 then it will always stay 0."""
6541,194197427,"b'And the answer to that is no, my assumption was invalid e.g. UK uses BST during the summer.'"
6541,194197676,"b""UTC != GMT. And offset 0 doesn't stay that way.\r\nAlso, humanity's time handling it stupid. I vote for using `.beat` from now on.\r\nAt `@989.9`"""
6541,194198248,b'I still do not understand why we do not support Stardate :)'
6541,194198599,"b'That is even more broken, actually.\r\nIt is only ever consistent with a _single episode_.'"
6547,194298100,b'Can do string interpolation there all the way'
6547,194298159,"b'Better to unify all these throwing exception blocks and add a comment on why you are ""handling"" it in this way'"
6547,194298268,"b""Why aren't you doing that before the `while`?"""
6547,194298361,b'What about if there is an error? And how can we avoid spamming the log about this?'
6545,194304603,"b""Shouldn't this be `TrySetCancelled`?"""
6547,194306222,b'done'
6547,194308131,b'done'
6547,194308408,"b""done. \r\nThought to have it inside the try/catch but `GetStats()` can't really throw so moved it before the `while`."""
6547,194309967,"b""Since we generate an empty report for a node that haven't sent any info yet.\r\nSo this actually should be a very rare case when there is a race between adding the nodes to `ClusterMaintenanceSupervisor` and analyzing the stats in the observer."""
6550,194312624,b'_can_ this fail?'
6550,194313109,"b""This was initially my concern. But then I realized that this simply can't fail. :)"""
6552,194314789,b'This should be 4.0.* ?'
6552,194314941,b'Leave this section but link to the CONTRIBUTING'
6558,194360472,"b'In this case, this is the same as `_connection`, no?'"
6502,193832260,"b""you can't use both enable and disable bindings together. """
6502,193832361,b'can license status be null ?'
6502,193832443,b'any failure/ success message here? '
6502,194368819,b'done'
6502,194398435,b'No (even if there is no license).'
6502,194398639,b'will be shown by the forceLicenseUpdateCommand'
6545,194433536,"b""I'm not sure, It's possible that we want to track the exception stack trace, or we just want to know that it was canceled?"""
6545,194546561,b'I think we should go with `TrySetCanceled`. You will not get much more details here anyway.'
6569,194653644,b'Do we really need to parse the connection strings? Why not pass them as is to the `AdoConnection`?'
6566,194379165,"b""Don't we nee this one ? \r\n\r\nhttp://apps.identrust.com/roots/dstrootcax3.p7c\r\n--\r\n\r\n\r\n"""
6566,194381084,"b'That certificate is already there. I think we lacked intermediate one locally.\r\nSee http://issues.hibernatingrhinos.com/issue/RavenDB-11316#comment=67-29057\r\n\r\n```\r\nUpdating certificates in /etc/ssl/certs...\r\n1 added, 0 removed; done.\r\n```\r\n\r\n\r\n'"
6566,194660200,b'Did you check the remote calls there?'
6566,194661313,"b'Was busy fixing release, will do that today.'"
6569,194668768,"b""This class (and its friends that use it) are in Raven.Client where we don't have ADO dependencies. The values that we parse here are displayed in the studio (ongoing task view) and go into the logs (`dbname@server`).  When we do the actual connection then we pass the entire connection string."""
6570,194644428,"b'We are using ""Results"" most often. Let\'s stay consistent.'"
6570,194644719,"b""Let's add .ToJson() method inside QueryMetadata and handle that there. Remember to use `nameof`."""
6570,194645437,b'IMO we are missing some stuff:\r\n1. We should add CreatedAt\r\n2. We should add LastQueriedAt\r\n3. We need to add total number of queries \r\n4. We need to add current number of queries'
6570,194645613,b'IIRC writer has a method for that `WriteArray`'
6570,194658867,"b'I\'m not sure that ToJson is appropriate here, because I don\'t think that we need ""all"" the cache properties, we want to minimize it to the most important info to the user, that\'s why I don\'t ""always"" write the properties, only when it\'s interesting'"
6570,194659553,"b""I agree about 3,4 . I've discussed with @ayende similiar issue question to 1,2 yesterday and I'm not sure how relevant this will be for the ever-changing nature of the cache (512 items etc)"""
6570,194660549,b'You can apply same logic there'
6570,194661393,"b'What is 3 & 4? I get total number of queries, but what is current number of queries?\r\n1) Is easy, 2) will be best effort.'"
6570,194661407,"b""I wouldn't say ever changing, I know that they can overlap but in decent amount of cases cache will (more or less) stabilize after few minutes IMO."""
6570,194662087,"b""@ayende \r\nTotal is = 'how many times we took this Query from cache' \r\nand \r\nCurrent is = 'how many queries for that particular Query are done at the moment'"""
6570,194662227,b'This could help us to know which ones are actively used.'
6570,194662431,b'Current probably means `Interlocked.Increment` all over the place. \r\nAnd will likely create hot spot for concurrency. '
6570,194663719,"b""@ppekrol This will be confusing. You don't want to use the cache as metrics, because queries go in and out, so the data will not be complete"""
6570,194664835,"b'Then ToJson won\'t be the ToJson that we know as the function for full serialization. I think that the convention in QueriesDebugHandler right now is to create the serialization ""by hand"", I think that we better be consistent'"
6570,194666033,"b""@ayende I'm not sure if Interlocked.Increment would be a big problem here? But since current is not a big deal here, then we can drop it. But Total would be good (even if we know that this might be dropped from cache).\r\n\r\n@maximburyak as I said, I think that most of the time the cache will stabilize. I would not use this as a metric. This gives you cache state and traffic."""
6570,194667393,b'Use `nameof` then'
6570,194668392,"b'Yes, it is important'"
6570,194670800,b'@ayende?'
6570,194671427,"b""Go ahead, yes. I don't think we'll see a lot of churn in the cache, and if we do, that is a valuable insight all on its own"""
6570,194748446,b'nice'
6570,194764413,b'It is not used. Can be deleted?'
6570,194764636,b'I think we have a `writer.WriteNumber` or `write.WriteInteger` for this. No need to do this like that.'
6570,194764823,b'This is not used?'
6570,194769063,"b""yeah, correct, it's write integer"""
6570,194769132,b'sure'
6570,194769158,b'yes'
6599,195025216,b'minor: maybe a bit safer would be to use `shouldRetry: default`'
6599,195026066,"b""the above comment is no longer valid - we don't use WithCancellation anymore. why did we need to add it here as we pass `token` anyway"""
6599,195047342,"b'This is a breaking binary change, so only for 4.1, maintaining source compatability, right?'"
6599,195052254,"b'Yes, I planned not do do a 4.0 PR at all for this issue.'"
6612,195104499,"b'why `?? """"` usage here  ? I don\'t hink `file.FullPath` can return null'"
6613,195112329,b'That is not something that we ever want at this level'
6613,195112469,b'Can we reuse the flags on creation?'
6613,195112818,"b""I don't like the full guid there, can we do something smaller?"""
6613,195112985,b'meant'
6623,195378883,b'Why not using a dictionary here? There might be quite a few dlls to loop through.'
6623,195379452,"b'The expected number of elements is low (single digits, most often).\r\nThe number of calls is similarly low (once per assembly resolution).\r\nNot worth it'"
6623,195380496,"b'Huh, are you not looping through the directory of raven.server.exe? On my machine that directory is full of dlls.'"
6623,195380828,"b""But number of calls to load a dll would be low, that's true."""
6623,195394557,"b""@ryanheath That depends on what the deployment model is, yes. In particular, in hosted setup, we'll have a lot of dlls, but when we use the system `dotnet` version, we have very few."""
6614,195176876,b'Why do we want to persist this?'
6614,195191499,b'Can we avoid this lock?'
6614,195191530,b'1. We need to update the topology after reelection even if some nodes are connected after the initial message was sent.\r\n2. Anyway we keep only the recent topology. (the Id defined by the Type in this case)'
6614,195191657,b'can we avoid this lock?'
6614,195191836,"b'We can use `Exchange` to do this atomically, instead'"
6614,195191907,b'Under what scenario is this desirable?'
6614,195192025,"b'Better to have the hit here, using `Volatile.Read`, than everywhere.'"
6614,195305259,b'You have the wrong order here'
6636,195425939,"b'Given that they are so similar, is there a reason not to just call CreateScratchPager here and avoid `GetMemoryMapPagerWithPossibleFileRename` ?'"
6549,194296578,b'CancellationToken here? \r\nDo we have CT for all our methods?'
6549,194296663,"b'This should be add _after_ the call, because an exception may be thrown here.'"
6549,194296712,b'Only it add if after the call'
6549,194296765,"b""Merge the `GotAll` with the other call.\r\nThen call to the server is didn't call `GotAll`"""
6549,194296799,"b""Is there a  reason we aren't resolving this to the `documentId` directly here?"""
6549,194296914,b'I live how the interface shrank'
6549,194296984,"b'What is this used for, and where is the actual amount to increment?'"
6549,194297014,"b'Can we lazily allocate all of these? In many cases, they will not be used, and it will be extra garbage.'"
6549,194297114,"b'Why are you removing it? The result of the Inc operation will already tell you what the new value is, no?'"
6549,194297204,b'I think you meant `continue;` here?'
6549,194297402,"b""Okay, so this is resolved once and we aren't holding on to it. Make sense.\r\nHowever, I wonder if we can take advantage of this to skip the `GotAll` note. If we know that we have the metadata and are missing counters, we can check with the metadata in the session to know if we should get it."""
6549,194303998,b'We do not want to have counters in .Advanced? It is a bit inconsistent with the rest of the session API.'
6549,194304086,b'Just in case I would go with Interface here.'
6549,194304191,"b""We don't. Wrote a Roslyn analyzer to check that."""
6549,194304978,"b""Yes, because it got really verbose and awkward when we started using it.\r\nWe also want to make this a 1st class item.\r\nWe'll probably also add `AttachmentsFor` to make this more discoverable"""
6549,194358576,b'http://issues.hibernatingrhinos.com/issue/RavenDB-11326'
6549,194833852,b'we have one already https://github.com/ravendb/ravendb/pull/6549/files#diff-eefe503b561793713fc89e176ec41b71'
6549,194833899,b'done'
6549,194833922,b'i did :)'
6549,194833958,"b'fixed, now we use the inc op result to update counters cache'"
6549,194833992,b'removed both '
6549,194834007,b'fixed'
6549,194834017,b'fixed'
6549,194834028,b'fixed'
6549,194845483,b'I mean as a return type of this method.'
6549,194972239,b'done'
6549,194988049,b'Why do we need this property when we have `HasIncrement`?'
6549,194988189,"b""Shouldn't this be the interface here?"""
6549,194989127,"b'What is this for?\r\nAn in general, if we are already going to the server to get all, we might as well get them all and simplify the code.'"
6549,194989462,"b""Use lazy creation for this, so we won't create a dictionary we won't need most times"""
6549,194989554,b'Is there a scenario where we _can_ have duplicate counter names?\r\nAnd are counter names really case insensitive?'
6549,194989896,"b'Just iterate over the dictionary directly, not on the `Keys`, you can also then directly check the type of the value and not check the type.'"
6549,194990257,b'What is the purpose of this?\r\nWhy not just put `Values[counter] = null` ?'
6549,194990463,"b""You didn't _add_ it back to the `CountersByDocId` ?"""
6549,194990667,b'What is the purpose of this code?'
6549,194990891,b'Why?'
6549,195008172,"b""Do we need CountersOperationExecutor at all? All now is a part of the session and we do not have equivalents for the rest. If the answer is 'yes' then we are missing there `SessionInfo sessionInfo = null` argument in each of those methods."""
6549,195008630,"b'Also all are OperationExecutors are based on IOperation or IServerOperation concept, but this one isnt.'"
6549,195010341,"b'The one thing that we should be concerned here is the fact that:\r\n* We need a lower level than the session\r\n* Counters have different load balancing than other stuff, we likely will want to configure them separately.'"
6549,195015515,b'We can always use `store.Operations`.\r\nIf we want to have something different then I suggest renaming this to `DocumentStoreCounters` instead.'
6549,195015722,"b""@aviv86 Currently we _don't_ have a different behavior for load balancing on counters, right?"""
6549,195024987,"b""right, we don't have a different behavior for load balancing on counters yet"""
6549,195451811,b'removed this property '
6549,195451848,b'fixed'
6549,195452310,"b'removed cache.MissingCounters,\r\nif going to server will ask for all '"
6549,195452351,b'done'
6549,195452369,b'reverted back to List'
6549,195452674,b'removed this method'
6549,195452772,b'removed _missingCounters'
6549,195452797,b'fixed'
6549,195452848,b'removed'
6549,195452913,b'removed cache.MissingCounters'
6549,195452943,b'removed store.Counters\r\nwill recreate this in 4.2 with new policy\r\nhttp://issues.hibernatingrhinos.com/issue/RavenDB-11348'
6549,195469551,b'I think that we have RequestExecutor and OperationExecutor in session already. Try using:\r\n```\r\nSession.Operations.SendAsync\r\n```\r\n\r\nAlso remember to put `Session.SessionInfo` as a parameter to `SendAsync`.'
6549,195471362,b'I think it would be better from UX perspective to add a second constructor for this case.\r\n\r\nPassing `null` or empty array should not be allowed. Check how it is done here: https://github.com/ravendb/ravendb/blob/43b7e45576d02df20df375eefc5b2da044bfb174/src/Raven.Client/Documents/Commands/GetDocumentsCommand.cs#L30-L51'
6549,195472974,"b""You don't dictate what goes here, just ignore what you don't understand."""
6549,195477603,b'done'
6549,195479097,b'done'
6636,195481488,b'going to implement this in this manner.'
6647,195684157,"b""@ayende I'm wondering if we should not move it from DatabaseStatistics to:\r\na) separate endpoint per each of those\r\nb) to endpoint like /databases/stats/detailed"""
6647,195919474,"b'I think `/detailed` is better yes.\r\nIn 3.5 we had a stats endpoint just for the studio to hit, because it `/stats` was getting expensive.'"
6647,195919495,b'Probably better to implement this explicitly in the Tree as `GetNumberOfEntriesWithPrefix` \r\nLike `GetNumberOfEntriesAfter` in Fixed Size Tree.'
6636,195920264,b'https://github.com/ravendb/ravendb/pull/6648'
6636,195920701,"b""Wasn't aware of that, good point"""
6658,195974219,"b""Let's change this to `Lazy`"""
6658,195974523,b'this is a strange comment'
6658,195974573,b'I assume that the comment means TODO? But it is missing that and it is quite misleading'
6658,195974629,b'Why lose the exception details here?'
6658,195974648,b'Why lose exception details here?'
6658,195974727,"b'Pass exception normally, and there is no need for the formatting/ exception there.'"
6658,195974832,b'Need a way for the user to configure the `DatabaseRecord` here.'
6658,195975007,b'Missing accept EULA here.'
6658,195978225,"b""We need to target 'netstandard2.0'"""
6658,195978256,b'This can be removed'
6658,195978338,"b""Let's change this to `RavenDB.Embedded`"""
6658,195978430,"b'Please use project reference, not NuGet one'"
6658,195978728,b'change to `.NETStandard2.0`'
6658,195979263,b'I would suggest adding sync method:\r\n```\r\npublic IDocumentStore GetDocumentStore(string database)\r\n```\r\n\r\nand rename this one to:\r\n```\r\npublic async Task<IDocumentStore> GetDocumentStoreAsync(string database)\r\n```'
6658,195979444,"b""`Creating document store for '{database}'` ? """
6658,195979548,b'@ayende We want to do it in a 2nd phase (2nd PR).\r\n\r\n@IdanHaim check how this is done in `TestBase`.'
6658,195979651,b'Can change this to `private` ?'
6658,195979946,b'It is never used? Stores can do that in `.AfterDispose` '
6658,195980100,b'rename to `StopServer` to match the `StartServer` method'
6658,195980535,b'if FxVersion is not `null` then you should not add the `--fx-version` parameter'
6658,195980653,b'We can change this to `internal`'
6658,195981041,b'Is this necessary? Let people choose that.'
6658,195981121,"b'Please remember that in most of the time someone will write:\r\n```\r\noptions.CommandLineArgs = new List<string> { ""myArg1"" };\r\n```\r\n\r\nand this will override your default (and mandatory) arguments.'"
6658,195981670,b'Somehow I do not like this name... `EmbeddedServer` ? Thoughts?'
6658,196022356,"b'No, that is a good idea if they want to create their own `DocumentStore`, etc.'"
6658,196023076,"b""then let's rename it to `GetServerUriAsync`"""
6658,196025223,"b""Can we go with 'DatabaseOptions' ?"""
6658,196025285,b'`netstandard2.0`'
6658,196026138,b'probably we should consider adding cancellation token here\r\n\r\n...and to all public (but applicable) methods.'
6658,196026902,b'Should we use ExceptionAggregator here?'
6658,196027102,b'What should be the WorkingDir of this?'
6658,196027663,"b""I'm wondering if we can set 'None' here?"""
6658,196031064,"b""That is server side concept, and I think not. Most of the time there is going to be just one, and we don't really expect many errors during disposal"""
6658,196031290,"b""None wouldn't add it, would it?\r\nAnd we need it to be copied to the destination"""
6658,196146519,b'I am fine with RavenEmbedded'
6658,196146681,b'I agree'
6658,196146990,b'I have an Idea how to do so.'
6658,196147680,"b""I don't think we need to add Async to the name unless we wont to add sync method"""
6658,196147874,b'It will use by the user'
6658,196148404,b'can be deleted'
6658,196148565,b'?'
6658,196149593,b'As I expected if we want to use the embedded in this way we will have to check every argument in the list \r\nor to make the user understand how to use it.\r\nThe other way is to remove commandLineArgs'
6658,196149704,b'They can it is just the default'
6658,196150083,b'When installing the NuGet package you must agree the license '
6658,196150198,b'Why?'
6658,196173985,b'Please check what Oren did.'
6658,196174061,b'This is for our internal use.'
6658,196174222,"b""Too many `not's`. Oren fixed that."""
6658,196174409,b'It is a convention in .NET actually. async methods end with `Async` '
6677,196445134,"b""Wouldn't you need attachment / counter tombstones here as well?"""
6677,196449735,b'@arekpalinski ?'
6679,196539440,"b""This isn't actually going to generate unique identifier. This is already racing, so this will happen if you have this in the same second. That is pretty much _guaranteed_ to be the case. You need to use an actual unique value, best to use something like `Interlocked.Increment` on a static value here."""
6677,196660311,"b""It's good for now. I've got an issue for deletion of attachments - http://issues.hibernatingrhinos.com/issue/RavenDB-11379. Counters - work in progress in 4.1"""
6681,196664246,b'MS SQL?'
6681,196751991,b'I will fix that'
6671,196852782,b'Do we also want to update the FrameworkVersion in ServerOptions.cs?'
6671,196855459,"b'Nevermind, @gregolsky  took care of it :)'"
6670,196384782,b'This brakes the source-level compatibility. You need to add a separate constructor with that.'
6670,196385630,"b""Let's match the `@all_docs` and change this to `@all_counters`"""
6670,196388310,b'Assert in this new ctor if this is not null.'
6670,196388865,"b""I do not think that we want those overloads without generic `T` here. Let's drop them."""
6670,196390403,b'assert if name is not null or whitespace?'
6670,196391323,"b""Let's assert if this is not null or whitespace."""
6670,196391914,b'typo :)\r\n\r\nI do not think we need to flush that?'
6670,196410468,b'done'
6670,196410528,b'done'
6670,196410603,b'done'
6670,196410649,b'done'
6670,196410709,b'done'
6670,196410780,b'fixed'
6670,196551833,"b'Use static class here, instead.'"
6670,196552008,b'Why does sending empty array means all?'
6670,196552059,b'Please use `{}` here'
6670,196552298,"b""Let's create an explicit value here, instead of using empty array.\r\nNote that we might call `IncludeCounters` and then another call with specific value. """
6670,196552585,"b'This I don\'t like.\r\nWe already have a top level ""taint"" with `CountersFor`, I don\'t want to add `IncludeCounters` there at this level.\r\n@ppekrol Any suggestions about the kind of API we should strive for?'"
6670,196553455,"b""You need to account for counters that you _tried_ to load and wasn't able to.\r\nAlso, don't you need to account for `GotAll` too?"""
6670,196553759,b'Why another allocation here? Why not pass the list?'
6670,196553871,"b""don't like this, will fail in funny ways. `IncludeCounters` and then `IncludeCounter` will only load the specific counter we wanted."""
6670,196555286,"b'What happens if I add `IncludeCounter(""dances"")` and then try to get it?\r\nIt should remember that it is missing'"
6670,196585365,b'This is ok actually.'
6670,196585462,b'maybe `IncludeAllCounters`?'
6670,196585873,b'`IncludeCounter(name)`\r\n`IncludeCounters(names)`\r\n`IncludeAllCounters`\r\n?'
6670,196586144,b'Probably rest of the API is done in the same way e.g. we are doing that with `_includes`'
6670,196586365,b'Let me think about it...'
6670,196587151,b'If we will have a method `IncludeAllCounters` then we can create a ctor that covers that (bool variable `includeAllCounters`) and in other ctors check if array is not null or empty. Which will make this part of the code more clear I think.'
6670,196676170,b'I do not think that we have other choice here. We are in the context of the document here and if we want to download the counters in a single call then there is no other option since `Load` is materializing the entity right away.'
6670,196677589,"b'Why, this is using a private ctor to avoid instantiation. A static class is clearer in intent.\r\nThis is there as a namespace scoping mechanism only, after all.'"
6670,196677634,"b'Yes, I like that'"
6670,196677769,b'How about `Includes` property? \r\nThen we hang everything on top of that? \r\n'
6670,196678033,"b'Or:\r\n```\r\nsession.Includes<Order>(""orders/1-A"")\r\n    .Counter(""likes"")\r\n    .Document(x=>x.Employee)\r\n    .Load();\r\n```'"
6670,196680528,"b'Maybe something like that?\r\n\r\n```csharp\r\nsession.Load<Order>(\r\n    ""orders/1-A"", \r\n    includes => includes\r\n        .Counter(""likes"")\r\n        .Documents(x => x.Employee));\r\n```'"
6670,196680832,"b'Ohhhh. I _like_ this, yes.'"
6670,196680908,b'Would we do the same in `Query`?'
6670,196682108,"b'```csharp\r\nsession.Query<Company>()\r\n    .Include(includes => includes\r\n        .Counter(""likes"")\r\n        .Documents(x => x.Employee))\r\n    .Where(x => x.Name == ""John"")\r\n    .ToList();\r\n```'"
6670,196682754,"b'Looks good to me, but might be hard to retrofit with what we already have, no?'"
6670,196685061,"b""Should be doable, but we cannot remove old 'Include' methods until 5.0."""
6670,196687194,"b""Yes, but I'm not talking about removing the `session.Include`, I'm talking about the `Query().Include` and the ability to do this compare to what we have right now"""
6670,196690432,"b'```csharp\r\n        public static IRavenQueryable<TResult> Include<TResult>(this IQueryable<TResult> source, Action<IFacetBuilder<TResult>> builder)\r\n        {\r\n            return null;\r\n        }\r\n```\r\n\r\n```csharp\r\n                    var orders = session.Query<Order>()\r\n                        .Customize(x => x.WaitForNonStaleResults())\r\n                        .Include(x => x.AllResults())\r\n                        .Include(x => x.CustomerId)\r\n                        .ToList();\r\n```\r\n\r\ncompiles and works. Although ReSharper is going crazy here with Intellisense.'"
6670,196690702,"b""I'm in awe. Poor C#."""
6670,196690901,"b""Although, we can't use fluent type here, or can we use overload based on the `Func<IncludeBuilder>` ?"""
6670,196691896,b'I think it could be `Action<IncludeBuilder<TResult>>`.'
6670,196936823,b'done'
6670,196937125,b'fixed'
6670,196937167,b'fixed'
6670,196937248,b'fixed'
6670,196937422,"b'changed to \r\n```\r\nsession.Load<Order>(\r\n    ""orders/1-A"", \r\n    includes => includes\r\n        .Counter(""likes"")\r\n        .Documents(x => x.Employee));\r\n```'"
6670,196937625,"b'create a ticket for \r\n```\r\nsession.Query<Company>()\r\n    .Include(includes => includes\r\n        .Counter(""likes"")\r\n        .Documents(x => x.Employee))\r\n    .Where(x => x.Name == ""John"")\r\n    .ToList();\r\n``` \r\n?'"
6670,196937831,b'fixed'
6670,196938280,"b'leave it with ``string []`` for consistency, or change to List? '"
6670,196938410,b'changed it to :\r\n```\r\nIIncludeBuilder.Counter(name)\r\nIIncludeBuilder.Counters(names)\r\nIIncludeBuilder.AllCounters()\r\n```'
6670,196939062,b'this is handled now \r\nhttps://github.com/aviv86/ravendb/blob/9e082d0dd9a3ba4f65bb36d9eda0c6b545a870e7/test/SlowTests/Client/Counters/SessionCounters.cs#L1273'
6670,196939402,b'keep it consistent'
6670,196940641,b'Probably we will want to split it to `WithCounters` and `WithAllCounters`'
6670,196941627,"b""IIncludeBuilder just in case can return IIncludeOperations, but I'm not sure if we will need it here. Maybe drop this and return IIncludeBuilder inside it?"""
6670,196941662,b'change to internal'
6670,196941883,"b""Let's split this to `WithCounters` and `WithAllCounters`"""
6670,196943410,b'We need to cover all cases from https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Client/Documents/Session/IDocumentSession.Include.cs'
6670,196943635,"b""Don't forget about the AsyncSession and add at least one test for it"""
6670,196944551,"b""Let's add small validation here, when IncludeAllCounters is `true` then we can throw. Thoughts?"""
6670,196944637,"b""Let's add small validation here, when CountersToInclude is not `null` then we can throw. Thoughts?"""
6670,196945448,b'something went wrong with formatting here I think?'
6670,196945856,"b""Let's not create IncludeBuilder when action is null"""
6670,196946233,b'Maybe we want to use hashset here?'
6670,196946909,"b'When you will address those few cosmetic comments that I just wrote, then we will be able to merge it and you can continue work on the query under the same issue number.'"
6670,196948334,"b'```\r\nILoaderWithInclude<T> Include<T, TInclude>(Expression<Func<T, string>> path);\r\n```\r\nand\r\n```\r\nILoaderWithInclude<T> Include<T, TInclude>(Expression<Func<T, IEnumerable<string>>> path);\r\n```\r\nare obsolete  in 4.0, since we enforce Id property to be ``string`` now\r\n\r\nadd those anyway?'"
6670,196949135,"b'This is a different thing, check this test:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/test/SlowTests/MailingList/TestRavenIncludes.cs\r\nand this issue:\r\nhttp://issues.hibernatingrhinos.com/issue/RavenDB-10968'"
6670,196963747,b'done'
6670,196963779,b'done'
6670,196963809,b'done'
6670,196963836,b'done'
6670,196963868,b'done'
6670,196963907,b'done'
6670,196964023,b'added'
6670,196964087,b'what do you mean?'
6670,196964115,b'fixed'
6670,196964143,b'done'
6670,197208473,"b'It\'s actually better to use: `pathBuilder.Append(""&counter="").Append(Constants.Counters.All);`\r\n'"
6670,197208552,"b'Same here: `pathBuilder.Append(""&counter="").Append(counter);`'"
6670,197209323,b'I think you have `||` but you meant `&&` here? what are you trying to check here?'
6670,197209476,"b'what are the `ids` here for, documents ids, or counter names?'"
6670,197209648,b'Why do you need to create an empty dictionary here?'
6670,197210031,"b""Why have both register counters and register missing? Isn't that basically the same operation?"""
6670,197210717,b'Pretty sure that this can be merged into a single operation. You just need to pass the `_counters` to the `RegisterCounters`.'
6670,197211212,"b""Why this roundabout way of doing this? Instead of creating a command, then executing it, let's do this directly."""
6670,197211315,b'can be simplified so there is no `Gather` stage'
6670,197211972,"b'lambda usually have shorter names.\r\nHow about if we do it like:\r\n```\r\n       var user = session.Load<User>(\r\n                        ""users/1-A"",\r\n                        i=> i.IncludeDocuments(x => x.AddressId));\r\n```'"
6670,197212038,"b""And I'm not sure about `Documents` or `Document`"""
6670,197216038,"b'The `Documents` are loaded by a path, so it is hard to say if one or many will be loaded. I would stay with `Documents`.'"
6670,197233730,"b""What did you mean in yesterday's comment 'Please use {} here', then? """
6670,197234750,b'IIRC you missed brackets in `if else` statement and the C# formatting was incorrect.'
6670,197235851,"b'No, this is intentional actually. \r\nIf I have no counters in result, and gotAll is true, and ids is not empty, then I wanna remember that by setting GotAll=true in cache for all the requested documents. '"
6670,197236274,"b'Same here, if I have no counters in result but asked to get all, then I want to remember that and not go to server again, no? '"
6670,197237112,"b'Not exactly, RegisterCounters iterates over counter result and adds to cache, RegisterMissing iterates over countersToInclude and checks if in cache.\r\nBut this can be merged, yes'"
6670,197237272,b'Okay will merge'
6670,197238824,"b'Just for consistency.. We use includes. Gather. Will remove this and build CountersBatch object directly, then pass to command ctr and execute '"
6670,197239172,"b'So, IncludeDocuments or just Documents? '"
6670,197240706,b'Document ids '
6670,197241062,"b'@ayende this actually depends, if we are going to use this in more than 1 place, then it would be better to wrap it in a command as we do with regular includes, so the code would be more reusable and maintainable. And I guess we will use it everywhere we use regular includes?'"
6670,197241301,b'add `Include` prefix to all methods there.'
6670,197244706,b'Oh okay yea I see it now.. Thanks'
6670,197349153,"b""Yes, having all of the include behavior in one location is better, now that we are doing more of that (and we'll continue to do more)"""
6670,197349240,"b'In this case, you can skip the `ids.Length` check, because the `foreach` already has this behavior.'"
6718,197646269,b'Shoud be configurable. What if we have several thumbprints etc? ServerCertificateCustomValidationCallback is static'
6727,197701186,"b""This is wrong.\r\nWe _have_ to call `pwrite64` in 32 bits, otherwise we can't handle > 4GB files.\r\nWe call `pwrite` on MacOS because that always handles this, but the `pwrite` for macos should be long for the offset, at least."""
6728,197701519,"b'This is wrong on the return value, no?\r\n`-1 on error`, not `1L`\r\n'"
6718,197701198,"b""Now when we have DatabaseRecord then I'm not sure if we need this. We should drop this or change DatabaseRecord to `Action<DatabaseRecord>` to modify the record which database name was set using the `DatabaseName` property."""
6718,197701396,b'Not sure if this is something that we need to support with embedded? Only one instance of server will be started by application.'
6718,197703431,b'The server still needs to be trusted '
6718,197703992,"b'And this add trust to the server.\r\nUser can also configure this separately from us, which will overwrite this logic.'"
6718,197704091,"b'I like the action better, yes.'"
6727,197704358,"b""i've verified this, pwrite does write in the Pi > 4GB.   With pwrite64 it fails"""
6727,197704913,b'note that pwrite with `long long int` for offset signature is used for pwrite under 32bit'
6670,197704726,"b""I'm wondering if there is a need to pass and fill the CounterDetails and not return them instead of void?"""
6728,197705299,b'it is 1.  not -1..  we check we actually wrote 1 byte'
6727,197704902,b'You are correct.'
6724,197703138,"b""We shouldn't add it to promotables. They may take a while to come up and actually figure that one out.\r\nOnly members / watchers should be there."""
6724,197703363,"b'Need to compare to the replication factor here, no?'"
6724,197706085,b'done'
6724,197706519,"b'OK, done.'"
6728,197707877,b'ok'
6670,197783622,b'fixed'
6743,197799801,"b""This should not be merged. We don't want to write to the console.\r\nIf this is required, let's send this to the log. \r\n\r\nFor the purpose of verification, we do want this on Jenkins, so let's at least wrap this in `#if DEBUG`.\r\n\r\nAlso, we need to handle this on the client side as well, providing timing information for the error."""
6743,197801220,"b'We will remove it soon. This only happens in release.\r\nIf really needed, we can add some other constant to the jenkins so this will be hit.'"
6743,198024137,"b""We got the socket error in some PRs but did't see the console output added here. Reverted in https://github.com/ravendb/ravendb/pull/6746"""
6744,198051452,b'I like this!'
6758,198146184,b'Just wondering why do we need to compare the buffers instead of using `ReduceKeyProcessor.Hash`?'
6758,198153187,"b'that would work but it will calculate the hash, the memory compare is faster I believe.'"
6758,198153719,"b'wait, i recall, we need to actually avoid hash colusions here, that is why.'"
6758,198157451,"b""Hash calculation is pretty optimized as I know and didn't showed up to be expensive part when profiling static indexes. I don't think we should bother too much on this at this point - especially that we didn't profile JS indexes yet."""
6758,198159392,"b""okay, I'll check how static c# indexes deals with that - don't remember exactly now"""
6758,198162424,"b""It doesn't matter if this is really rare we still need to handle it correctly.\r\nI did profile JS indexes and Map-Reduce and this was the result of the performance optimization.\r\nThe bottom line is that the code is working, working fast and most importantly correct."""
6758,198164288,b'Great then :)'
6764,198177233,b'what does this do?\r\n'
6770,198206488,b'Need to remove this. Should throw here.'
6770,198223742,b'Rename to `DotNetPath` ?'
6790,198414758,b'use `nameof` here'
6769,198220583,b'I think that last condition is not necessary?'
6769,198221198,"b""I'm wondering if this is necessary (I'm aware that we've agreed to add it). Maybe if someone does not want to create revisions then we should just add the 'SkipRevisionCreation' without checking for this? @ayende what is your opinion?"""
6769,198423274,"b""Yes, we can just always add that.\r\nFor that matter, since this is non persistent flag, we don't even care if this goes to a db destination.\r\nStream destination doesn't care."""
6769,198442126,b'removed all conditions except `_options.SkipRevisionCreation`'
6771,198226075,b'`IsValidIndexName` would be better'
6771,198226160,b'what are we splitting here?'
6771,198226829,b'Can we put it inside StudioTasksHandler? Rename to `ItemType` ?'
6771,198227753,b'Can be removed?'
6771,198227870,b'Do we need those `Trims` ?'
6771,198227965,"b'FYI, OK is set by default.'"
6771,198435428,b'ok - I will remove'
6771,198439561,"b'The current regex:\r\n```public const string ValidResourceNameCharacters = @""([_\\-\\.]+)"";```\r\ndoesn\'t allow for spaces'"
6771,198449184,b'removed'
6771,198449641,b'done'
6771,198453066,b'done'
6771,198458951,"b'Because e.message contains:\r\n\r\n""Index name \'abc?\' is not permitted. Only letters, digits and characters that match regex \'([_\\/\\-\\.]+)\' are allowed. *\\r\\n* Parameter name: name""\r\n\r\n\r\nwith the parameter name added'"
6803,198476991,b'We need to change this to `IOrderedQueryable` IIRC'
6803,198477149,b'We need to change this to IOrderedQueryable IIRC'
6803,198477528,"b""I'm referring to `this IQueryable<T> self`"""
6803,198486355,b'fixed'
6803,198486387,b'fixed'
6813,198553874,b'Validate arguments here ?'
6813,198560300,"b""I'm not changing the path (it is the default one). Only the mode."""
6829,198803879,b'Method name should be `DisposeInternal`.\r\n'
6825,198800111,b'Need to check `ids` for null'
6811,198820006,"b""But it means that now we don't have a cluster maintenance worker at all. If we do that, we need a watchdog that will revive it if it's dead """
6811,198825487,"b""That shouldn't be an `Info`. It should be `Operations` and it should be a `Notifications`.\r\n\r\nThis way, it is user visible. \r\nI don't want to create another thread here, might get into a dangerous loop"""
6818,198784234,b'Should be `Indexes`'
6818,198784563,b'This is a breaking change. Old clients will not work properly. You need to stay with the JSON that we had.'
6818,198788482,b'This can throw NRE and name validation is done later in code.'
6818,198788730,b'You can change that to: `indexDefinition.Name?.Trim();`'
6818,198793500,b'ok'
6818,198796570,b'class removed'
6818,198796639,"b'used ``` context.Write(writer, new DynamicJsonArray(createdIndexes.Select(x => x.ToJson())));``` instead'"
6833,198831214,b'buecase -> because\r\nunable to open -> unable to create ?'
6866,199347819,b'internal?'
6866,199347920,"b""Wasn't sure myself. \r\nYou tell me :)\r\n"""
6866,199348016,b'Make it internal for now.'
6889,199704049,b'@ayende the `@` char is causing some test failures. Can we switch back to `_` ?'
6889,199704396,"b""Yes, we can switch it back, I'll do so shortly."""
6910,200032565,b'what about `short` / `ushort`?\r\n'
6713,197630665,"b'why do we care, it is safe to call `CountersSchema.Create` twice, no?'"
6713,197630735,b'Why is this the case?'
6713,197630768,"b""Don't really like it. This is putting high level concern at the storage level."""
6713,197645701,"b'I think that we need here another, RavenCounterEtlItem that inherits from RavenEtlItem. '"
6713,197645944,"b'In case of big amount of changes and counters, we may end up materializing a lot strings here. I think that we can actually stay with LazyStringValue through all the process. For the dictionary, for an instance, we use the LazyStringValueComparer without having significant changes in our code base.'"
6713,197684288,"b""It's it. It was meant to prevent from calling it on every operation that modifies a counter. Actually I borrowed this code from revisions storage - should it be removed from both?"""
6713,197684528,"b""The comment isn't correct actually. We _can_ send all counters that we have but we _don't have to_. Also see the TODO comment below - we should prevent from creating counters huge batch here"""
6713,197685070,"b""You don't like the mode switch here or dislike the values of enum that are high level terms? Do you prefer to have separate methods?"""
6713,197685998,"b""Don't like the intermixing of responsability. The storage shouldn't make decisions based on the source.\r\nThe storage should offer options that match what the source need."""
6713,197686032,"b""It's probably cheaper not to."""
6713,197686139,"b""I can do that but not sure if it's really worth. The logic is based on `EtlItemType` anyway (the same concept as we have for `ReplicationBatchItem`). What advantages do you see of introducing a new type here?"""
6713,197686849,b'Good idea. Thanks'
6713,197687453,"b""I'll stay with current code then."""
6713,197693728,"b""The point is passing or not the change vector. In ETL we intentionally don't use it while the replication and import need to pass it. I've exposed the relevant overloads instead of having the notion of the mode:\r\n\r\nhttps://github.com/arekpalinski/ravendb/commit/aa4aea3a39f872b7eb995d5231265b1afec19eb6"""
6713,197757048,"b'I think that because we are going to add other sub entities like time series etc, we might want to add some better seperation between records, other than one general entity for everything.'"
6713,197758830,"b""I'll try to make `RavenEtlItem` an abstract class so we could have separate implementations like: `RavenDocumentEtlItem` `RavenCounterEtlItem` etc"""
6713,197761941,"b""Let's wait here until we actually need it. Time Series is about 6 months away"""
6713,197762947,b'OK'
6713,198169066,b'Please check this commit: https://github.com/ravendb/ravendb/pull/6713/commits/d3891d8a661356f5b'
6713,198169439,b'Changed in: https://github.com/ravendb/ravendb/pull/6713/commits/9d8132eff09b20562c4b88ed74'
6713,198170071,b'Done for document id in https://github.com/ravendb/ravendb/pull/6713/commits/19390245f79 . We need the counter name as a string anyway'
6894,199705329,"b'I think it would be better to be consistent with `Load` here, so this should be named `Counters`.'"
6894,199715312,b'Better to wrap it inside CounterIncludesToken'
6894,199715344,b'Better to wrap it inside CounterIncludesToken'
6894,199715571,b'This should be handled by CounterIncludesToken'
6894,199715700,b'in QueryToken you have a `WriteField` method'
6894,199717358,"b""I'm wondering if we should not support parameters here? @ayende ?"""
6894,199720446,b'IIRC `QueryBuilder.GetValues` is doing the same thing.'
6894,199722929,"b""I'm not sure that I'm following this code here. Why are we doing this like that? We cannot include different counters per document ID. Seems redundant and a lot of additional work?"""
6894,199724317,b'What is that? I think we do not support this in API?'
6894,199726464,"b'yes, there is no support for this in client api (yet ?)\r\nbut it is supported in rql:\r\nhttps://github.com/aviv86/ravendb/blob/e58118da3ae828e0400b1138c3df52e9ee3ce1f7/test/SlowTests/Client/Counters/QueryOnCounters.cs#L2250'"
6894,199749479,"b""compilation error if this sin't defined, no?"""
6894,199750522,"b'And yes, we want to handle this via parameters, not direct injection of string into the query'"
6894,199781200,"b'Yeah, but in the context of the query results, it\'s iportant to be clear and state that it\'s counters received by includes, I guess the name could be ""IncludedCounters"" or something, but the ""include"" part is significant.'"
6894,199786442,"b'Works for me also, but it should be in sync with `Load` and any other operation.'"
6894,199796071,b'done'
6894,199796129,b'done'
6894,199835127,b'You can substitute this this another method called e.g. `.All` that will do that under the hood.'
6894,199836001,b'typo :)'
6894,199836442,"b'pass only queryParameter name. Check how we do it in other places.\r\n\r\ne.g.\r\n```\r\nvar whereToken = WhereToken.Create(WhereOperator.AllIn, fieldName, AddQueryParameter(array));\r\n```\r\n'"
6894,199836878,b'if we are including `All` counters then you do not need to create a new query parameter just `counters()` will be enough'
6894,199854317,"b'actually there is a reason why i delayed adding the parameter to the point when we actually write the RQL.\r\nI did like you suggested at first, the problem with that is that these kinds of queries:\r\n```\r\nsession.Query<Order>()\r\n\t.Include(i => i\r\n\t\t.IncludeCounter(""Downloads"")\r\n\t\t.IncludeDocuments(x => x.Company))\r\n\t.Where(x => x.ShipTo.Country == ""Brazil"");\r\n```\r\nwill generate :\r\n```\r\nfrom Orders where ShipTo.Country = $p1 \r\ninclude Company,counters($p0)\r\n```\r\nbecause `Include` is computed before `Where`, but `where` comes first in RQL.'"
6894,199859482,b'It is not a problem that the order of parameters does not match.'
6894,199859780,"b""Yes, that isn't an issue."""
6894,199888692,b'done'
6894,199888739,b'fixed'
6894,199888793,b'done'
6894,200051918,b'changed from `Counters` to `CounterIncludes` in `Load`'
6894,200097644,"b'client support for this will be in a separate PR\r\n```\r\nsession.Query<Order>()\r\n    .Include(i => i\r\n        .IncludeCounter(""Downloads"")\r\n        .IncludeCounter(o => o.Employee, ""Downloads"")\r\n        .IncludeDocuments(x => x.Company))\r\n```'"
6894,200097779,b'fixed'
6894,200100525,b'typo'
6916,200156502,b'Can this ever be an infinite loop?'
6926,200197337,"b'To be even more safe, maybe we should pass the context? So we get the cluster topology (and assign nodes) with the same context as we put the command.'"
6916,200258420,"b""I'm pretty sure that it can't."""
6916,200274214,"b'As an aside, I looked at `TryReplaceIndexes`, it _never_ returns false?!\r\n'"
6920,200137604,b'You can use `ExtractSingleInnerException` to simplify that'
6920,200137911,b'Either rename this method or drop it and call `Slice.From` directly'
6920,200138126,"b""Let's make it private"""
6920,200139105,b'Why is it possible to have an attachment without the stream?\r\n'
6920,200139683,"b""BTW it isn't obvious for the caller of this method that `withoutStream` parameter changes the logic and calls  `VerifyAttachmentStreamExist` - it looks the storage should have a dedicated method for that check"""
6920,200140398,b'Is it supposed to work for attachments of revisions as well (`AttachmentType.Revision`)?'
6920,200140712,b'Please use `ExtractSingleInnerException `'
6920,200141716,b'We can avoid Linq here and filtering it explicitly in the loop - it might be slightly more optimized way'
6920,200142298,"b""As the purpose of this method is to check the existence  of the stream we'll be better of by renaming it to `Exists` or something like that"""
6920,200151076,b'okay'
6920,200151245,"b""its unsafe method and you can't call unsafe from IEnumerable"""
6920,200151310,b'okay'
6920,200151685,"b""This is an optimization so we won't need to fetch the stream, it is invoked just to verify the existence of a stream without having to read the stream from the disk."""
6920,200152213,"b""it suppose to unless you know something i don't, what is the issue here?"""
6920,200152260,b'okay'
6920,200152679,b'this is a rare case and will only invoke if there are missing attachments and if this document has attachments so the performance penalty is neglectable.'
6920,200152800,b'okay\r\n'
6920,200171096,"b'Since we just want to verify existence, why not just have an `AttachmentExists` method?'"
6920,200171206,b'I agree with @arekpalinski that the boolean arg changing the meaning so drastically is better done with a different method entirely.'
6920,200175788,"b""Here you don't need any of the validation that happens in `GetAttachment`, can probably call `VerifyAttachmentStreamExist` directly"""
6920,200175966,"b'We just checked this, no need to do so again'"
6920,200176127,"b""Pretty sure that we don't really care if this is revision or document.\r\nWe only care if the attachment hash exists"""
6920,200176261,"b""I don't think we need to do any of that. \r\nYou already _have_ all the attachments you need, in the metadata of the document, no?"""
6920,200176376,b'why not just set unconditionally'
6920,200176462,b'When will this happen?'
6920,200176548,"b'Why? This must be true, you already checked `NumberOfEntries`'"
6920,200262158,"b'The type effects the key we search for and it is importent, so we do care.'"
6920,200263336,"b""i have not changed the logic of the method even by a bit, was just trying to save the actual read of the stream from the disk where only its existence i care about.\r\nI see that effort is not been appreciated next time I'll just invoke code like /databases/*/attachments HEAD"""
6920,200266309,b'no'
6920,200268119,"b'Code refactoring, leftovers...'"
6920,200268525,"b'This is the code that filters items that have lower CV, this will filter the missing attachments if we ignore MissingAttachmentsInLastBatch == false'"
6920,200268733,b'I was not familiar with the code enough to realize reading the Tree is enough'
6920,200275854,"b'ok, makes sense'"
6920,200276637,b'Just asking. I wondered why we pass `null` here for revisions - I saw your other comment about the key that we search on and understand now'
6920,200279874,"b'Why do you need a type? All you need to do is check if the hash is there, and you already have this from the metadata.'"
6920,200280026,b'why not?'
6920,200301434,"b""the type defines if the key of the attachment is constructed by the document id or it's change vector if it is a revision the change vector replace the id, why? I don't know I haven't written it, this is whats implemented."""
6920,200466527,b'Not sure if this is worth a separate method. '
6920,200466647,"b""Let's get everything about the document itself out of here, we shouldn't have the document's metadata details in attachment storage"""
6920,200470352,"b""It isn't worth it, but this is required by the compiler, cannot use `yield` and `unsafe` together."""
6920,200473512,b'Fixed this by adding a new `Slice.From` overload'
6920,200474717,"b""The reason we require it here is that we need to send all the attachment's data.\r\nThat include the change vector, content-type, etc. These are stored on a per attachment, not at the hash level."""
6920,200474822,"b""However, we don't need to have the `Where` here, we can rely on the fact that attachments are _always_ modified before the document."""
6920,200475222,"b'Therefor, we can remove all the `Linq` in here completely'"
6957,200831096,b'`relay` -> `rely`'
6957,200831128,"b'What happens if they do something like:\r\n\r\n```\r\nfor(var attachment in this[""@metadata""][""@attachments""])\r\n{\r\n   if(attachment.Name.endsWith("".png""))\r\n       addAttachment(...);\r\n}\r\n```\r\n\r\nIn this manner, you don\'t _see_ that there are attachments to be deleted on the other side.'"
6970,200896545,b'\xf0\x9f\x91\x8d '
6957,200898158,"b""Correct. Also it wound't work for renaming attachments. It means we always have to track them."""
6957,200899716,"b'So, we need to delete all the other attachments that exists on destination when we send it, no?'"
6957,200900249,"b'True, that would make it easier.'"
6962,200850696,b'Probably we want to support multiple of these. Check how it is done in RequestExecutor.'
6962,200850729,"b'change to NETCOREAPP, we will not have to remember to change this when 2_2 or 3_0 will be out.'"
6962,200850735,b'Change to NETCOREAPP'
6962,200850739,b'Change to NETCOREAPP'
6962,200850749,b'This is a server-side package? Why do we need this?'
6962,200850786,b'Check if we are including Sparrow.dll when NuGet package is created. This is done in this csproj (line 33).\r\n\r\n'
6962,200850834,"b""I'm wondering if this is the right place. Now it is the only place in client using web-sockets, but if this will change? Maybe it would be best to keep it in RequestExecutor like the other callback?"""
6962,200850898,b'When this is changed after DatabaseChanges was created then we need to `ReconnectClient` probably.'
6962,200895603,"b""Let's reuse the `RequestExecuter` impl here. This way, a user only need to configure it once globally.\r\nThere is no sense in defining the same logic once for all calls and once for websockets."""
6962,200897224,"b""I don't believe we need multiple user validation callbacks. The implementation in RequestExecutor was done like that because of the server, registering its own callback at startup (and had a race with the callback used in tests which we register in TestBase.\r\n\r\nI don't mind moving it to RE but I think each feature should have its own callback. So if we add a new feature in the future which uses websockets, it will not share the same callback as DatabaseChanges """
6962,200898311,"b""I do not see a good reason for having separate websocket callbacks per feature. Having separate callbacks in DatabaseChanges and some other feature would only be confusing. Let's try using the RE implementation if possible."""
6962,200898748,"b""Yes you are right, it's not required"""
6962,200954286,"b""@ppekrol I'm not sure about this one..."""
6962,200954293,b'can be made private?'
6962,200954361,b'can be made internal?'
6962,200960521,b'we need to change signature to the one matching RemoteValidationCallback I think?'
6962,200960835,b'message -> sender'
6962,200961958,"b'Should not be translating here, change the signature of CertificateCallback'"
6962,200964923,"b""No, we're also using it in DatabaseChanges"""
6962,200965806,"b""We can but then we'll need to write a second translator to use in CreateHttpMessageHandler() where we assign the callback to the httpMessageHandler"""
6962,200966219,b'yes'
6962,200967157,b'Should be good'
6978,200967026,b'can you add some comment why 3 is magic number here? '
6978,200975301,"b""It's the number of spaces (or actually dividers - a divider can be more than a space/new line) from the last keyword. \r\n`where OrderedAt = com|` in this example last keyword is `where` and | is 3 contexts after it."""
6963,200851010,b'Remember to include the Sparrow.dll in NuGet for netcoreapp2.1. In v4.1 you can use the netcoreapp2.1 Sparrow.dll. In v4.0 you need to use the netstandard2.0 one.'
6988,201239861,"b""Needs error handling here. \r\nIn particular, need to see if an exception is raised here. If so, need to raise it up if there are any registered callbacks and if there aren't, remember it and raise it when someone try to register."""
6988,201239956,"b""I don't like this approach. It means that when OSX does support it, we'll have to do something special for this."""
6988,201243574,b'Can you check now?'
6988,201243583,b'Can you check now?'
6988,201244824,"b""Please wrap it. I'm not sure whatever this can cause issue, but throwing the same exception concurrently sounds like potential race condition"""
6988,201245981,b'Wrapped :)'
6969,201294842,"b'@aviv86 Do we need this test, if we no longer test string interpolation anymore?'"
6997,201336254,b'Why `GetBaseException` here?'
6997,201336438,"b""I don't like it very much.\r\nYou are disposing, but the backing is _running_ right now, so you just leaving it to continue running?"""
6997,201337085,"b'Call all of these, then wait on the events _after_ the dispose?'"
6997,201337302,"b""Note, you are returning here time in ticks, need to make sure that you don't try to make that into the ticks to wait for wakeup"""
6997,201337539,b'Where was the wait for completion moved?'
6997,201338385,b'Why not pass a `DateTime` object here? Why the conversions to / from ticks?'
6997,201338514,b'Why are you forcing us to wake up in a second?'
7001,201339361,b'This can be moved outside the `if` now'
6997,201349310,b'I think it should be `SystemTime.UtcNow` not `DateTime.Now` ?'
6997,201349831,b'Need to use `DocumentDatabase.Time.UtcNow` IIRC'
6997,201352230,b'It would be better easier to process if this would be a TimeSpan'
6997,201353898,"b""Maybe it would be good to move it to the top? It is easier to read a property than calculate other stuff? I should have done that when I've introduced this."""
6997,201354433,b'use lambda so you will not have to dispose anything?'
6997,201359527,"b'No, backups are explicitly local time.'"
7004,201360101,b'I think that you can use  `GetQueryStringValueAndAssertIfSingleAndNotEmpty` ?'
7004,201362365,b'I think that it needs to be a complete match?'
7004,201362978,b'Can be made private after using `GetQueryStringValueAndAssertIfSingleAndNotEmpty`'
7004,201364791,"b""This is a breaking change. We were throwing in that case.\r\n\r\nTwo exceptions here:\r\n1. The one from GetQueryStringValueAndAssertIfSingleAndNotEmpty\r\n2. When 'name' is specified (or 'collection') and we do not have an index then we are throwing IndexDoesNotExistException"""
7004,201365315,"b""Maybe pass the the 'old' constructor `from <collection> select <field>` and parse it using the same flow?"""
7004,201568474,"b""This is logic is like this: if `name` parameter is not there, than we check for the `collection` parameter, and if it isn't there than we throw that the `name` parameter is mandatory."""
7004,201568927,b'The behavior is observed. We still throwing for the `name` parameter. The only case that it can reach the `null` case is when there is no index for the specified collection and field. In that case I return 404 instead of throwing.'
7004,201569040,"b'I can change it, yes. But it would do more work than required.'"
7004,201569063,b'See other comments.'
7004,201569319,b'Why? In partial match I see we clone the index... so it means the index does not have the requested field?'
7004,201573032,"b""In particular, I don't think you _can_ get partial here.\r\nYou are only ever sending a single field, after all."""
7004,201587615,"b'@fitzchak so it means that you need to have a complete match, right?'"
7004,201588541,"b""I'll change this to `Complete` and `CompleteButIdle` than."""
7004,201588855,"b""First check is 'collection' is specified. If not use 'GetQueryStringValueAndAssertIfSingleAndNotEmpty' on 'name'."""
7004,201589099,b'ok \xf0\x9f\x92\xaf '
7004,201589862,"b'True, but from the other side, at some point we will add additional logic in first ctor, and 2nd one will be omitted. We can leave as is, but I thought that the change is not that complex?'"
7004,201590256,"b""Check my other comment for point 1. and I'm good with point 2."""
7004,201603760,b'Done'
7004,201604265,"b""OK, I'll throw IndexDoesNotExistException instead of returning 404."""
7004,201604595,"b""It is a bit more complex but can be done. I'll need to create an empty blittable for the `parameters` and an cache key, which I'll look how to generate."""
7004,201609611,"b""Done, the query won't be cached."""
7011,201677816,b'This is also wrong. `FromETM` will be accepted here.'
7011,201677900,b'This is wrong. You compare `NewN` only. \r\nThis will accept `NewNumb`'
7011,201682115,"b'Minor: ""... before calling Get"" -> ""... before calling rename""'"
7012,201693713,b'Can we _try_ to put this condition into a method with some meaningful name? Something that would describe what happened that all those conditions are satisfied.'
7012,201694526,b'Maybe check it `field == null` and throw exception then (unless we are guaranteed that the field exists at this point)'
7012,201774677,b'yes we know we that the field exists at this point'
7012,201774832,b'done'
7020,201779918,"b""Shouldn't we forbid changing the URLs after store is initialized?"""
7012,201921689,b'How do you know that the field must be here?'
7020,201921903,"b""Yes, I can't think of any reason why we would want to allow that."""
7017,201930743,"b'This is public, not private?'"
7016,201912499,"b""Let's give it a clearer name, `PkcsStoreWorkaroundFor30946` or something like that. """
7016,201912535,"b'Also, make this class private'"
7017,201932783,b'Sorry about that. Fixed.'
6998,201393053,"b'Timer.Dispose is blocking, I think that you should call it serially, have an array of all MREs and then call WaitHandle.WaitAll(mreArray);'"
6998,201398403,"b'In that case, if we had a DisposeOnce implementation with an async Dispose, we could write something much nicer'"
6998,201596796,b'Should be SystemTime.UtcNow?'
6998,201610907,b'the `wakeup` is local time '
6998,201912630,b'Is it possible that we have more than 64 items here?'
6998,201916430,"b""I don't like this. Better to handle this _inside_ the read lock."""
6998,201916575,"b""Cost of loading / starting the db is quite high.\r\nLet's skip this if we have a backup scheduled for the next five _minutes_"""
6998,201917069,"b'This is wrong, back up times are always local, not UTC'"
6998,201925708,"b'Theoretically, if we have more than 64 backup tasks, then yes.'"
6998,201926302,"b'We have to keep this time as utc (cluster wide) and only later, on the node itself we translate it to local.'"
6998,201927413,"b'IIRC, `WaitAll` can accept a maximum number, need to handle this here.'"
6998,201927557,"b""I don't follow, this is used only on the local node."""
6998,201928691,b'The `backupStatus` is in UTC'
6998,201953519,"b'This line may throw, need to have that in the `try`'"
6998,201953570,"b'This line may also throw, if the `EnterReadLock` threw'"
7012,202259421,b'@aviv86 ping'
7036,202263456,b'I wanted to check how it works if we select a property of a loaded document. I added `.BuildDate` :\r\n\r\n`.Select(entry => RavenQuery.Load<TeamCityBuild>(entry.TeamCityBuildLocalId).BuildDate);`\r\n\r\nand it threw:\r\n\r\n```\r\nSystem.ArgumentException : Could not understand expression: from Builds.Select(entry => Load(entry.TeamCityBuildLocalId).BuildDate)\r\n---- System.ArgumentException : Not supported computation: Load(entry.TeamCityBuildLocalId).BuildDate. You cannot use computation in RavenDB queries (only simple member expressions are allowed).\r\n```'
7036,202301960,b'fixed'
7040,202543679,"b'We want the ""throw"" code to be encapsulated in a separate function in order to reduce generated function code size and complexity'"
7037,202543847,b'We want to encapsulate the throw statement by a separate method (repeats later on as well)'
6987,201056279,"b'Probably better to use `List<int>` here, since order matters'"
6987,201057443,"b""Here we need to do this in a loop.\r\nThe logic goes like this:\r\n\r\n10 Src sends its highest version. If dest accepts it, great. \r\n20 If not, the src sends its highest version. If the dest knows of it, great.\r\n30 If not, src sends its next highest version, repeat until there is a version that both of them understand.\r\n\r\nThe idea is that we'll use the highest version that both endpoints understand.\r\nSrc will try them in order.\r\nDest will check if it understand the protocol version and _always_ reply with its own preferred version.\r\n"""
6987,201057646,"b""I don't think this is helpful. You are going to need to check _what properties_ are valid here."""
6987,201249316,"b'Yes, i agree.'"
6987,201250095,"b""Yes, this needs to change according to our talk yesterday.\r\nThis ping pong will be handled at the same level on the accepting side as now but each sender will have to modify the logic to support this. This will actually not break anything since we already allow 3 streaks and since we don't have more than 3 version for any of our protocol increasing the retry won't break anything :)\r\nI'll add the agreed upon version with the TCP stream and each logic will have to behave accordingly."""
6987,201250300,"b'This is going to move, this is wrong and not according to what we talked about.'"
6987,201917693,"b'`NegotiateProtocolVersion` should return an object, not an int.\r\nThat will be basically full of properties that say what operations are supported.'"
6987,201919168,"b'Example:\r\n* `31 - BaseLine40` - 4.0\r\n* `32 - BaseLine40, Counters` - 4.1\r\n* `33 - BaseLine40, AttachmentMissing` - 4.0\r\n* `34 - BaseLine40, AttachmentMissing, Counters` - 4.1'"
6987,201920632,"b'Just to note, you have some `-2` there that might cause issues'"
6987,201920862,"b'Need to turn that into an options object, and make sure its use is consistent.'"
6987,201931287,b'I think we can skip 34 since nobody is using v4.1 yet '
6987,201931636,"b'@talweiss1982 Yes, that was an example to explain the concept.'"
6987,201931752,"b""I think it would be better to 'invert' the responsibility and send list of all supported protocol versions for this particular operations so destination can make a decision and send back the version that should be used."""
6987,201932245,b'I suggest bumping those to:\r\n- 40xxx for 4.0 supported protocols\r\n- 41xxx for 4.1 supported protocols\r\n\r\nThis way it would be much more clear which protocol is related to which 4.x version. '
6987,201932495,"b'You wanted to probably use `$""{IncomingReplicationStr}/read-message""` here'"
6987,201933048,b'Indeed'
6987,201933104,"b""Take into account, we have `4.0` deployed already. I don't think we can make it work with that."""
6987,201933423,"b""it is both sides responsibility since you can't know who know better"""
6987,201933825,"b'Trying to bind protocol version to server version will only be confusing and it is not related. Moreover, this will require to add workaround code just to deal with backward compatibility with v4.0\r\n'"
6987,201933960,b'This is the original message I have not modified any of the internal logic.'
6987,201935677,"b'Not binding it to a server version. Just making clear which protocol is supported where.\r\n\r\nImage a list of protocols like that:\r\n`32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43`\r\n\r\nWhich ones are supported by 4.0, which ones are supported by 4.1 and which ones are supported by 4.2?\r\n\r\nIf this list would look like:\r\n\r\n`40032, 40033, 41001, 42010, 41002, 40035, 42015, 41032`\r\n\r\nThen it would be more clear which protocol is from which version.'"
6987,201937077,"b""If we will 'split' the versioning then we can assume that all `_protocolVersion >= 33 && _protocolVersion <= 40999` will support this?"""
6987,201948130,"b'We are better off with checking only explicitly known version, not ranges'"
6987,201949330,"b'I agree it is not clear, please review the pushed modifications.'"
6987,201949471,"b'Then we should put everything related to those versions in one place (one file), so in the future we would have one place/file to change. Preferably method that returns a class with set of bools for supported features.'"
6987,201950117,"b'`Dictionary<OperationTypes, List<SupportFeatures>>`\r\n\r\nWhere:\r\n\r\n````\r\npublic class SupportedFeatures\r\n{\r\n     public bool BaseLine40, Counters, MissingAttachments;\r\n     public int ProtocolVersion;\r\n}\r\n````\r\n\r\nAnd then init this using:\r\n\r\n```\r\n[Operation.Replication] = new List<SupportedOperations>\r\n{\r\n   new SupportedOperations{ ProtocolVersion = 32, BaseLine40 = true },\r\n   new SupportedOperations{ ProtocolVersion = 33, BaseLine40 = true , Counters = true},\r\n   new SupportedOperations{ ProtocolVersion = 34, BaseLine40 = true, MissingAttachments = true },\r\n   new SupportedOperations{ ProtocolVersion = 35, BaseLine40 = true, Counters = true , MissingAttachments = true},\r\n}\r\n```\r\n\r\nThis keep all the knowledge in one location'"
6987,201950333,b'Bump it to 40000?'
6987,201950907,"b""Wrap it inside some class that can be access via 'Replication' property. It would be more clear what bool is for what feature. e.g. `features.Replication.SupportsMissingAttachments` ?"""
6987,201958740,"b""your example is ReplicationSupportedOperations (which is currently the only tcp operation we have versions for).\r\nWe need to make sure we don't mix protocol types...\r\nI want to have a single class to handle supported features and not have to have a base class and derived classes..."""
6987,202014058,b'Why the negative numbers here?'
6987,202015908,b'backward compatibility :('
6987,202023954,b'What about bumping that?'
6987,202294174,b'@talweiss1982 ping'
7040,202553669,"b""I know but:\r\n- we have `throw` here anyway as we rethrow the exception\r\n- I don't think that it's hot path because `StateChanged` is called really occasionally"""
7028,202050712,b'We should add a test for this'
7012,202612867,b'Actually the field can be missing if the index has dynamic fields. fixing that'
7037,202698382,b'Applied here https://github.com/ravendb/ravendb/pull/7056'
7035,202912387,"b""You can use Math.Ceiling() for such calculation in the future, if 1GB%docSize == 0  then you're off by one, not an issue for this benchmark but for places where it is important you should be careful."""
7059,202913328,b'I think that we do not need to group here? Just find an entry which name equals to `RestoreSettings.SettingsFileName` ?'
7055,202927174,"b""@talweiss1982 shouldn't we convert this to BlittableObject? Check how they are handled in:\r\nhttps://github.com/ravendb/ravendb/blob/a0760baf73a63bdbb4a37f0e04f43d46bdd5e8a4/src/Raven.Server/Documents/Indexes/Persistence/Lucene/Documents/LuceneDocumentConverterBase.cs#L318-L349"""
7057,202921245,b'@aviv86 I think we should verify that this score is not 0?'
7055,203057075,"b""@ppekrol I see your point, but with the current implementation of BlittableObjectReader, we end up creating a lot of arrays, that the memory stream uses, meaning, it's more or less the same as strigify, in my opinion. \r\nIn addition to that, I think that in the buttom line, lucene indexes a string."""
7055,203064627,b'Then it would be better to pass the ObjectInstance to the converter and handle that there.'
7055,203065119,b'There = inside LuceneDocumentConverterBase like other types of object.'
7055,203072713,"b""Looking at the problem again, I think that we should do that, although I don't like the fact that we should convert ObjectInstance to blittable to StreamReader to a string just for that, but I don't like having to different approaches performing the same stringification even more :/ """
7055,203134593,b'We can pass `JsObject` and handle that inside `LuceneDocumentConverterBase`. No need for conversion to BlittableObject.'
7055,203165426,"b""I'm not sure I follow.. how will we strigify the jsObject there?"""
7088,203267524,b'remove it? '
7088,203267598,b'remove? '
7088,203267616,b'remove ?'
7088,203279759,b'Done'
7088,203279784,b'ok'
7056,202691996,b'@ayende @maximburyak not sure what to do here. What do you think?'
7056,203000642,"b'We can avoid the string allocation here, we could just use the LazyStringValue'"
7056,203001048,"b'We could avoid string materialization here, by directly comparing the attachmentNameFieldName with attachmentName, as they are both LazyStringValues'"
7056,203001492,b'I recommend to see where we can avoid using that function'
7056,203006012,b'We could have a direct comparison between this and the name from Attachment in line 150'
7056,203006054,b'We could use LazyStringValue directrly here'
7056,203006252,"b""It makes sense, don't think we should do anything else here"""
7056,203099003,b'Why is this needed now?'
7056,203099363,"b'Better to have two `for` statements, one from `0 .. _sessionCommandsCount` and one from `_sessionCommandsCount` to `_allCommandsCount`'"
7056,203099820,"b""This will mean that loading the document again will _return null_, no?\r\nIn this case, probably should evict it.\r\n\r\nNote that I'm pretty sure that we already check that the document isn't already in the session / modified. """
7056,203104968,"b""This will remove it from the session (evict). So next 'Load' will issue a new request to the server to get it.\r\n\r\nDownside of this is that following code fill not work:\r\n```csharp\r\nusing (session)\r\n{\r\n    var x = load\r\n    patch(x)\r\n    saveChanges\r\n\r\n    x.Name = 'Name' // not tracked anymore\r\n    saveChanges // nothing will happen\r\n}\r\n```"""
7056,203108534,"b""_should_ such code work?\r\nThat is a very strange thing to do, I think.\r\nI also think we check if there are modifications to a patched entity.\r\nI'm fine with keeping that check across `SaveChanges` calls.\r\n\r\nMaybe just mark this as patched, meaning that unless user explicitly evict, we can't user the existing instance?"""
7056,203272670,"b""What if... just before sending the DeferredPatchCommand... we will check if entity exists on the session. And if it does, then issue this command with additional parameter to return the document after patch in the 'replay'. We can then update the session properly?"""
7056,203275852,b'Sounds good to me. Yes.'
7056,203300362,b'Done'
7056,203302678,b'Done'
7078,203133903,b'This should be \r\n`https://ravendb.net/docs/article-page/4.0/csharp` in 4.0 \r\nand\r\n`https://ravendb.net/docs/article-page/4.1/csharp` in 4.1'
7098,203361551,b'Should we do the same in TestDriver?'
7055,203617967,"b'we are going to create a BlittableJsonReaderObject here, probably using JsBlittableBridge'"
7107,203627980,"b'So this might still fail, right?'"
7107,203640971,"b'If all 5 of them will throw NRE, yes...'"
7107,203642068,b'I wonder if we can make it _not_ race by hitting a slow proxy?'
7107,203642101,b'Probably not worth it'
7107,203644128,b'I think we can go with this... and when it fails... remove this test entirely? There are too many places inside Session that can blow when accessed concurrently.'
7101,203393131,"b""@ayende This is a difference between 4.0 and 4.1\r\nNetstandard1.3 doesn't have a ctor which accepts x509certificate so using the handle instead."""
7101,203465921,b'CertificateNameMismatchException maybe?'
7101,203471291,b'It is not always HttpRequestMessage. We are using this callback also in Changes API with WebSockets. Then the sender is SslStream'
7101,203472728,b'Should we also check and throw here?'
7101,203473075,b'var cert2 = cert as X509Certificate2 ?? new X509Certificate2(cert);'
7101,203473438,"b""var cert2 = cert as X509Certificate2 ?? new X509Certificate2(cert.Handle);\r\n\r\nIt looks like not much is happening in ctor, but let's do this."""
7101,203630993,"b""I think we better. The major issue is that if we don't, we get a pretty cryptic (pun intended) error."""
7101,203631105,"b'We already have code that does this, IIRC'"
7093,203336489,b'I would change that to `WellKnownAdminCerts`'
7093,203336566,b'`Well Known Admin Certificate` '
7093,203336644,b'Well known admin certificates...'
7093,203343706,b'done\r\n'
7093,203343730,b'done'
7093,203343754,b'done'
7093,203634811,b'Why do you have this here? Why add the server cert to the local store?'
7115,203690057,b'Change to `/databases/*/debug/attachments/hash` ?'
7115,203690324,b'Change to `/databases/*/debug/attachments/metadata` ?'
7099,203764933,"b""Is this true? We don't add that to the local state any longer."""
7099,203880892,"b'Yes, we register the server certificate in EnsureNotPassive()'"
7099,203921991,b'Why are we doing that?'
7099,203979388,"b""It's for the manual setup case where we run a cluster with different certificates. We need all the cluster certificates registered in the store so that nodes trust eachother.\r\n\r\nWhen thinking about it more... When building such a cluster, we first register A's cert in B. Then when node A adds node B, A registers B's certificate in the cluster. But also: node A's certificate (which was in node B's local state) now propagates to the server store. So there is no actual need for node A to register its own certificate during EnsureNotPassive()."""
7099,204104451,"b""I'm not sure that I'm following. In manual setup, before you get to this stage, you already have to manually setup the trust, no?"""
7099,204235083,"b""Yes, the original motivation was for manual setup but because we manually setup trust anyway, it is not actually needed.\r\n\r\nI though of another scenario which relies on the server certificate being registered:\r\nWhen we renew a let's encrypt cert, each node replaces its own cert. There will be a window of time where one server replaced it while the others still run on the older cert. This server still needs to trust the older certificate because now it will not accept connections from the other nodes because the server certificates are not equal.\r\n\r\nI guess we can register the server cert only for the duration of the renew process and then delete it afterwards."""
7116,203722361,b'This is not needed and can be removed.'
7116,203722428,b'This is not needed and can be removed.'
7099,204235254,"b'Please merge this, and I will make the changes in another PR'"
7131,204237484,"b'Do we need to pass a cancelation token here, otherwise if we dispose of this Follower we can end up with a rogue task, no?'"
7072,203042630,b'This should be just a bool. Without .ToString()'
7072,203043070,"b""You need to take into account the value of 'flattenArrays' and return DynamicJsonArray. Check how we do it with non-js objects."""
7072,203043887,b'Check this comment also: https://github.com/ravendb/ravendb/pull/7055#discussion_r202927174\r\nConsult with @talweiss1982 '
7072,203617731,"b'Ok, we should do that'"
7072,203617938,"b'we are going to create a BlittableJsonReaderObject here, probably using JsBlittableBridge'"
7072,203629060,"b'This is done intentionally. When using this for indexing, we index `true` as the string `True`\r\nBecause this method returns an `object`, if we return a `Boolean` here it will be boxed. So we cut the middleman and avoid the boxing allocation. The end result is that the string `True` is indexed.\r\nNote that this is an optimization only, and intended only for indexing.'"
7072,203630571,"b'Ok, although I do not like the idea of having a different flow inside LuceneDocumentConverterBase for bools from JSIndex and any other type of index.'"
7072,203630758,"b""I'm fine with making this change if this code is now reused, mind."""
7072,203632631,"b""Ok. Then let's remove it."""
7131,204251821,"b""We can't really get that, because the code will wait until the task is completed.\r\nBut that might not be a bad idea, yes."""
7131,204252087,"b""Just checked it, and there doesn't seem to be anything there that uses a cancellation token that we can pass, so don't think it will work"""
7137,204252166,"b'I think you mean, `TcpMismatch` ?'"
7131,204318675,"b'""might""? what if we haven\'t? is it safe to start the timeout clock if we are still passive?'"
7131,204322717,"b""(writing from my phone)\r\nCan you check what happens when an old v4.0 raft is getting this messages, I'm not sure if we should maybe bump the raft tcp protocol version for this or not. """
7131,204328409,"b""Is it related to my question in the above comment or separate one?\r\n\r\nAnyway, `MaybeNotifyLeaderThatWeAreStillAlive` sends `InstallSnapshotResponse` message having `Done = false`. I've found the following piece of code which has some logic based on value of `Done` property:\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Rachis/FollowerAmbassador.cs#L518-L527\r\nAs it's not a new concept it doesn't seem to me to be a protocol change."""
7135,204332305,b'Why is this acceptable here?'
7131,204355966,"b""@arekpalinski  When we get here, we aren't passive, because we are now part of a cluster.  This happened in the `InstallSnapshot` section. So if we were passive, now we aren't and we want to register the timeout handler.\r\n\r\n@talweiss1982 This is the same behavior as we had previous. We essentially have the same logic, notifying the other side that we are pending. Not protocol change here.\r\n\r\n"""
7135,204384284,"b'This is acceptable with `LastLogIndex` = 0, meaning that the leader should send us full snapshot.'"
7134,204237131,b'I think it might bet better to do this as an async task. \r\nTaking up a thread just for this (relatively rare) seems expensive.'
7134,204237138,"b""Also, note that you aren't waiting for this to complete on disposal"""
7134,204237154,b'Why is this at the `DatabaseLandlord` level instead of the `DocumentDatabase` level?'
7134,204237180,b'Why do you have this here?'
7134,204237385,b'This should be a method on `DocumentDatabase`\r\n'
7134,204237686,b'Should only happen after successful command execution.'
7134,204237712,"b""why can't this happen?"""
7134,204237850,b'Where did this move to?'
7134,204238352,"b'The idea here is to not have to wait too much for this. \r\nThis way, even if we already executed, we are still convoying on the lock'"
7134,204238550,"b'I want to have a single task per server and not per database, otherwise not sure about the performance of this when we will have let say 50 databases..'"
7134,204238561,b'Avoid a tight loop when we are waiting the database to load'
7134,204238586,"b""It happened, but  I wasn't sure how this possible... still need to figure this out."""
7134,204238631,b'At the start of the candidate we already check if this is forced and casting the vote. '
7134,204251768,"b'Why? With a single server wide task, you are causing convoys. \r\nBetter to have one per database and have them handle it directly without one db interfering with another'"
7134,204251774,b'why do you have a look to wait for the db in the first place?'
7134,204251787,b'What is this scenario?'
7134,204251799,"b'This can happen on the _next_ term, though.'"
7134,204386218,"b""Not sure I'm following.. In force election we casting the vote and increment the term to give to this node an advantage for the coming elections. (it might happened that the other nodes are already during an election process and have higher terms..) """
7134,204386849,b'Ran `CanPreformSeveralClusterTransactions(5)` in a loop.. '
7134,204430095,"b'This is going to cause issues down the line. If the value is missing, you are skipping it, and in that case, the result to the client will have one item less, no?'"
7134,204431899,"b'Given that we _know_ that the tx is completed here, why are getting as `Task` instead of the `DocumentDatabase` ?'"
7134,204432032,b'??'
7134,204432868,"b'This modify the expected results that are sent to the client, no?'"
7134,204433348,"b""Here, make sure that you explain that we will just get the snapshot and that's it.\r\n\r\nHowever, why not go further back in time to find the first matching index/term pair?"""
7134,204433642,"b'Yes, the only valid scenario that I can think, is if the deleted document was purged, right? \r\nSo, should we recreate the document in that case?  '"
7134,204443077,b'Simply to have same behavior as `NotifyDatabaseAboutStateChange` and `NotifyDatabaseAboutValueChange`.'
7134,204446381,"b""If this happened we need to go to try the leader's last log of the previous term, which is unknown on the follower side and we don't have an index on the term.\r\n\r\nI see a lot of pitfalls in going further back, so maybe create a minor performance issue for 4.1 for this?  """
7134,204447640,b'Do we even need this `try/catch`? since the `ExectueClusterTransactionOnDatabase` function is already wrapped with `try/catch`.'
7134,204516785,"b'They should be changed to avoid this as well, yes.'"
7134,204517072,"b""Why? Isn't this just considering this as also something that I don't have a match and keep going back using binary search?"""
7134,204517130,"b'Probably can remove that, yes. '"
7146,204519530,"b""Isn't this a new property? If so, what will happen in a cross versioned cluster?"""
7146,204648252,"b'Can we put `""Replaced""` as const and use it across the board'"
7146,204650115,"b""Shouldn't we include in the alert message some info that it is related to certificate replacement?"""
7146,204677489,b'Yes we can'
7146,204677523,b'sure'
7146,204677649,"b""Yes that's a problem, will fix."""
7147,204833120,b'Are we expecting this to be called multiple times? We might be hiding another issue here.'
7147,204981112,"b""It should't be set multiple times"""
7145,204641389,b'I think it would be better to make it shorter e.g. `__alias` ?'
7145,204643643,b'Also the variable would be better off by having `DefaultAliasPrefix` name instead of `DefaultAlias` as we append incremented number at the end'
7145,204646616,"b""I wonder if it works when we have a query like:\r\n\r\n```\r\nsession.Query<User>()\r\n                        .Select(user => new\r\n                        {\r\n                            user.Group.Order\r\n                        });\r\n```\r\n\r\nI'm pretty sure it will work but let's add such test case for that."""
7145,204723529,"b""no actually that didn't work, good thinking.\r\nfixed this + added test case"""
7148,204834392,"b""Let's add it to @ml054 TODO list and merge it. Thoughts?"""
7148,204981220,b'How about adding the amount of allocated memory in this thread?'
7148,204981310,"b""Won't this break the studio for the meantime?"""
7148,204981341,b'What kind of help would these details give us?'
7148,204995228,"b""1) Allocated memory in this thread is already here, it's `CurrentlyAllocated` property\r\n2) It's the same kind of help like in map phase - those are exactly the same values we have there, so we know memory stats and details about numbers of processed map entries"""
7148,204995471,"b""The studio works correctly. The changes I made in this PR are:\r\n- more details in the tooltips\r\n- added additional timing of Linq / Jint processing (same color like in map so it doesn't break anything)"""
7124,204323092,b'How do we prevent from adding `@id` column twice when doing export csv in collection? (according to issue description `@id` was already exported then)'
7124,204324885,b'This code is only invoked when not specifying the fields and it is taken from the first document. When specifying fields the fields you specified will be in the header. '
7124,204328827,b'OK'
7124,204329699,"b""Why to delete it? You added the assertion that CV has changed so we'll be sure the doc was overwritten"""
7124,204874236,"b'I guess that this code could be removed, because SaveChanges is not called anyway'"
7124,204996007,"b""Right, I didn't notice that :)"""
7153,205253405,b'I think that 40_000 would be enough'
7153,205333329,"b""Let's be on the (very) safe side this time :)"""
7153,205335202,"b""if we don't plan to support versioning of the same command then we don't really need so many versions because they correlate to the server version 1:1"""
7153,205347600,b'Maybe put some comment here that `400` was used in the past but we switched to higher range'
7161,205376139,"b""`buffer[2]` is \r\n\r\nhttps://github.com/ravendb/ravendb/blob/d0c1c05d8e45b6324d44d0889ae9f75369f9c0b7/src/Raven.Server/Documents/Indexes/Index.cs#L2585\r\n\r\nhttps://github.com/ravendb/ravendb/blob/d0c1c05d8e45b6324d44d0889ae9f75369f9c0b7/src/Raven.Server/Documents/Indexes/Index.cs#L2578\r\n\r\nIt means you won't detect index changes if there is no updates to documents. That's wrong.\r\n\r\nBTW why to override the values here instead of appending them at the end of `indexEtagBytes` buffer?"""
7161,205409989,"b""I'm setting this here because this is only valid if there is load / include.\r\nThe idea is that I'm using these three values to know if there was any change _to any document_, not just the ones covered by the index.\r\n\r\nHow can there _be_ index changes if the docs haven't been updated?"""
7161,205411705,"b""Because indexing might be still in-progress. Let's say that you put a new index into db with load/include and you start querying it. There are no doc changes but indexing batches change\r\nthe last indexed etag"""
7159,205377117,"b""its' `<>` right? let's put a comment or better move it to const and use .Length here - it will make it easier to figure out what's going on here in the future"""
7159,205377592,"b'Better to put `""h__TransparentIdentifier""` also as a const next to `internal const string TransparentIdentifier`'"
7159,205378113,b'BTW we already have it defined in: \r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Client/Documents/Linq/LinqPathProvider.cs#L33\r\n\r\nWould be nice to have such const in single location'
7164,205415927,"b""What if\r\n- `CurrentClusterMinimalVersion` will be 41_000\r\n- `ClusterCommandsVersionManager.ClusterCommandsVersions[nameof(CleanUpClusterStateCommand)])` will be 41_001 ?\r\n\r\nShouldn't we use a threshold value e.g. `ClusterCommandsVersionManager.CurrentClusterMinimalVersion` < 41_000 ?"""
7159,205416819,b'done'
7159,205416844,b'done'
7159,205416857,b'done'
7161,205435297,"b""@ayende Please make sure you push https://github.com/ravendb/ravendb/pull/7162/commits/77fbb4d7e88ea66d2e7176eccf9642b525ed4773 here as well so we won't merge this 4.1 PR without it"""
7161,205436041,"b""I'll handle that"""
7161,205437233,b'https://github.com/ravendb/ravendb/pull/7166'
7161,205439309,"b'Thanks, got distracted\r\n'"
7164,205455833,"b'if `ClusterCommandsVersionManager.ClusterCommandsVersions[nameof(XXX)])` will be greater than the `CurrentClusterMinimalVersion`, the command is not supported in the cluster.. '"
7164,205468063,"b""If the command version is higher than the cluster min version, then we can't use that."""
7184,205961718,"b'better to use the full text, no? '"
7184,205963289,b'accidentally changed StoreName.CertificateAuthority to StoreName.Root?'
7184,205978550,b'fixed'
7184,205978566,b'fixed'
7185,205982788,b'IIRC it can be set to `null`?'
7185,206014283,b'It is assume that if the EscapePositions is null so the information about the escape characters placed in the bytes after the string bytes but if no such information were written this bytes are just garbage   '
7160,205411228,"b""Can't we reuse our existing query AST? """
7160,205411373,b'Dictionary? '
7160,205411423,b'Are we going to have multiple of them?'
7160,205413662,"b'In the Query it is a tuple, probably need to be modified there as well, but that that this is a struct there.'"
7160,205440549,b'Better errors here'
7160,205440811,"b'Okay, this is great, the.'"
7160,205965389,b'We will but they can all reside under MatchClause and then have MatchExpression because we will need to support things like (foo)-[:Like]->(bar) and (cat)-[:Hates]->(dogs)'
7160,206042429,b'Please use `And` and `Or` here.'
7160,206042555,"b""Why do we need direction, isn't that what the `From` / `To` for?"""
7160,206042821,"b'This should be removed. There is no such thing.\r\nInstead, this should be a `with edge` expression, and the filter should be in the `where` clause'"
7160,206043030,b'`Alias`'
7160,206043172,b'You need to `Visti` the expression here.'
7160,206043597,b'Missing `WITH EDGES` here'
7160,206092735,"b""We don't, this is mostly for debugging -> I use it in query's ToString()"""
7190,206096477,b'@arekpalinski is this a scenario that should never happen but seems to sometime happen?'
7160,206097112,b'Will inline the data about the edge in PatternMatchElementExpression'
7160,206097453,"b""Let's remove that, we don't need this.\r\n\r\n`(u1)-[:Rated]->(m)<-[:Rated]-(u2)` is the same as:  `(u1)-[:Rated]->(m) and (u2)-[:Rated]->(m)`"""
7160,206097522,"b'What do you mean, inline?'"
7190,206101379,"b""Yes, kind of. It happened on prod. Having a page that is empty after decompressing it is valid case. I believe we'll remove it eventually:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/10196851fc9fafb6206e5eb91ac9b9d62c58e9bd/src/Raven.Server/Documents/Indexes/MapReduce/ReduceMapResultsBase.cs#L396-L415\r\n\r\nIt's safe to add this check and skip it here. Although I'm not sure that was the case - couldn't reproduce it locally."""
7160,206104523,"b'I will move the information about the edge (edge alias/edge type) to the PatternMatchElementExpression because it represents ""to/from"" pair on the pattern expression'"
7180,205962316,"b'the error seems be to wrong, using delete function but talking bout load counters'"
7180,206107116,b'fixed'
7193,206333511,"b""Let's change it to TimeSpan\r\nRename it to GracefulShutdownTimeout"""
7193,206333694,b'Default value should be 30 sec'
7193,206334222,b'What is the issue with coloring?'
7193,206334266,b'--no-color ?'
7193,206334418,b'Remove this method?'
7193,206334577,"b""Rename this method to 'ShutdownServerProcess'"""
7193,206334702,b'You are not awaiting this write and disposing the stream afterwards'
7193,206335110,b'This entire block should be in try-catch'
7193,206343552,b'When we use the embedded we redirect the stdin output.\r\nWhen coloring is true we do some checks when we try to write something and then we get an exception.'
7193,206343833,"b'The idea was to write this flag when we are using a program without any console to write too,\r\nso non-console will be better'"
7193,206343866,b'will do'
7193,206417562,"b'Still, it would be better to go with `--no-color` because this is what it does actually. It can be used outside of embedded.'"
7194,206421647,b'In 4.1 there is a similar method in EmbeddedServer. Can you apply this change there also?'
7194,206446644,b'done'
7202,206540346,b'you can use nameof'
7202,206540548,b'I think it would be safer to use AsyncHelpers.RunSync'
7202,206540888,b'Change to `public static class`'
7202,206540983,"b""Let's change this to `public const int`"""
7202,206541390,b'form -> from'
7202,206541749,b'typo: TcpNegotiateParamaters -> TcpNegotiateParameters :)'
7202,206546082,b'why? This a dedicated thread for the candidate ambassador.'
7200,206773738,"b'This can take some time, maybe report so user have visibility?\r\n'"
7200,206773935,"b'This is very likely going to take a LONG time, no?\r\nCan we try doing this in place? with add / remove column?'"
7200,206774046,"b'page_strong_hash should be a small buffer, no?'"
7200,206775710,"b'I\'ve changed that in https://github.com/ravendb/ravendb/pull/7205/commits/a4a2d246a22bda6991882f7f3a6740e93ef217a4\r\n\r\nWe\'ll create that index in ""new"" \'usage\' table at the time of From07To08 migration and feed it then. Next we\'ll use it during From08To09 and delete it once we\'re done'"
7200,206775810,"b""Not an option. It's primary key column - it cannot be removed"""
7200,206776257,b'It should. Should any code change be made here then?'
7200,206776448,b'Okay :-('
7200,206776494,"b""Doesn't matter that much, was just surpirsing"""
7090,203630356,"b""At the cost of asking a dumb question, is it safe to shallow copy a dictionary and a list?\r\nThe low-level transaction is cloning the state it should not be able to modify the snapshot state but correct me if I'm wrong the snapshot cache and the PagerStatesAllScratchesCache  modification will reflect on to the snapshot wouldn't they?"""
7090,203630647,"b'That is _not_ a dumb question.\r\nAnd the usual answer is that it is _not_ safe.\r\n\r\nIn this case, however, the list / dictionary are readonly and are never mutated.'"
7090,203639567,"b""Maybe use ReadOnlyDictionary<TKey,\xe2\x80\x82TValue> and friends to make sure this doesn't happen?"""
7090,203650212,"b""I looked into doing that, and I worry that this may cause perf issues.\r\nI know that `List<T>` has special treatment and is highly efficient. Turning that to `ReadOnlyCollection` may have impact that we don't like. \r\n\r\nI'm going to make the change anyway, because it it relatively self contained. But it is something to be aware off and we'll need to see if this pops up in the profiler output for 4.1"""
7214,206836015,"b""And if it didn't exit? You just going leave it that way?"""
7214,206836046,b'`WriteLine`?'
7214,206836122,b'`Graceful`'
7222,206859210,"b'This load it from the local session, mind'"
7222,206859577,"b""I'm really nervous about something like that. It opens up the option that you'll be mislead by the code.\r\nIn your issue, you mentioned passing the id explicitly, which I think is a good compromise here."""
7222,206869272,"b""I'll see if I can make that work, thanks for the review."""
7222,206869447,"b'That actually was the intent, to make sure local session returns the state that will be deleted, maybe a bit silly.'"
7222,206870458,b'I do not think that this is the flow that we want to support.\r\n\r\nSupporting following operations within a session is very dangerous\r\n```\r\n// load ID\r\n// delete ID\r\n// store ID\r\n// saveChanges\r\n```\r\n\r\nWhat we should support is:\r\n```\r\n// load ID\r\n// delete ID\r\n// saveChanges\r\n// store ID\r\n// saveChanges\r\n```'
7222,206874216,"b""The case I'm experiencing is adapting Quartz.NET's job store logic to pass connection (UoW) around template methods that handle various tasks, some might store, some might delete, the end result is then stored as transaction (session.SaveChanges()).\r\n\r\nSo it might not be obvious if composition caused load-delete-store combination, but SaveChanges should be the transaction."""
7222,206876983,"b'\r\n@ppekrol How you model this kind of templated process, where I need to support single transaction spanning composed methods? Composition methods are generic methods having generic type for passed connection/tx pair.\r\n\r\n```\r\nvar uow = BeginTransactionalOperation(); // holder for ADO.NET connection+tx or Quartz.NET session\r\nvar job = LoadJob(trigger.JobId, uow);\r\nvar triggger = LoadJob(trigger.Id, uow);\r\nMaybeDeleleteJobIfStale(job, uow);\r\nMaybeAddJob(trigger, job, uow);\r\nSomeOtherThing(trigger, job, uow);\r\nuow.Commit();\r\n```'"
7222,206881504,"b""I've updated the PR to to only allow such overwrite if explicit id is provided, otherwise the goold old exception. I'll leave it to you to decide whether it makes sense or not - feel free to close and create and alternative solution. I don't get paid enough from OSS to fight the persistence layer \xf0\x9f\x98\x84 """
7222,206900303,"b""I will look tomorrow at this, but there is also a notion of deferred commands that needs to be taken into account. They are executed 'after' the session operations.\r\n\r\nRegarding your example, you could always do:\r\n```\r\nvar uow = BeginTransactionalOperation(); // holder for ADO.NET connection+tx or Quartz.NET session\r\nvar job = LoadJob(trigger.JobId, uow);\r\nvar trigger = LoadJob(trigger.Id, uow);\r\nvar delete = ShouldDeleleteJobIfStale(job, uow);\r\nvar added = MaybeAddJob(trigger, job, uow); // modifies 'job' entity\r\nif (added == false && deleted)\r\n{\r\n    DeleteJob(job, uow);\r\n}\r\nSomeOtherThing(trigger, job, uow);\r\nuow.Commit();\r\n```"""
7230,207015088,"b""Huh? Why aren't you overriding tostring?"""
7230,207017450,"b'Because I copy and pasted, and made a mistake... '"
7218,207133228,"b'We\'ll be better off by using `[Theory]` and `[InlineData(""4.1.0-nightly-20180801-0430"", ""4.1.0-nightly-20180801-0430""]` for that so we\'ll be able to add another versions in the future easily'"
7236,207189340,"b""remove ' before ` ?"""
7236,207246488,"b""swap 'stream' with 'ResponseBodyStream()'"""
7236,207246630,b'not needed'
7236,207376735,b'I could have sworn I changed those.. Updated both PRs.'
7242,207340113,"b""This is serialized, right? If so, it is fine to make a change here, since 4.1 isn't released yet, but need to make sure to remember this in the future."""
7242,207340214,"b""Note that our production system already has a 4.1 instance running tryouts, so need to check that this won't impact it there."""
7242,207341026,b'Only the `Wait` here (for the completion of the commands) need to be in the try catch for the one at a time run.'
7242,207341252,"b'Need to send notification here, if the situation persists.'"
7242,207341624,"b""This needs to be removed, even in debug only.\r\nIt's fine if you have an error / assert, but console write line are not a good idea in our code except while trouble shooting."""
7242,207342253,b'Is the clone required now? '
7242,207375734,"b""Good point. Don't think that this property has propagated to the DatabaseRecord into production.\r\n(haven't saw it on the DatabaseRecord)"""
7243,207463882,b'I think that you wanted to use `.AddOrUpdate`. The `this[key]` is an equivalent of using `.TryAdd`.\r\n\r\nCheck here: https://github.com/dotnet/corefx/blob/23915a606017197aed1d24960096b532d24d626e/src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs#L888'
7243,207468993,"b'No, this should work as expected.'"
7243,207469126,b'https://msdn.microsoft.com/en-us/library/dd267253(v=vs.110).aspx'
7243,207472670,b'Correct. I just noticed that they are passing additional flag when this method is used.'
7254,207740208,b'This will run forever if we have a lot of incoming commands (cluster transactions for example).\r\nIt should be limited by the number of transactions or the memory size.'
7267,208118682,"b""Reason it's like this is `$IsWindows` is not always populated for all PS versions, but it's always `$False` for Posix."""
7241,207339428,b'This looks like an error. Probably meant `by_id` here?'
7241,207339602,b'Same issue here'
7241,207339700,b'Pretty sure this is wrong?'
7241,207431094,b'with high probability a copy paste bug'
7241,207431109,b'yes'
7241,207431154,b'probably'
7241,207447811,"b'You still missed this one that should be renamed to ""by_id""?'"
7241,207457651,"b'I assume you wanted to delete ""by_id"" index. Although you won\'t be able to do it because it\'s primary index. You will get esent error complaining that ""clustered index cannot be deleted"" or something like that.'"
7241,207457956,"b'It appears to be an issue, you changed `CreateIndexGrbit.IndexPrimary` to `CreateIndexGrbit.IndexDisallowNull | CreateIndexGrbit.IndexUnique,`, was it intentional?'"
7241,207458134,"b'Same as above, `CreateIndexGrbit.IndexPrimary` -> `CreateIndexGrbit.IndexDisallowNull | CreateIndexGrbit.IndexUnique,` ?'"
7241,207458381,"b""Shound't be Primary?"""
7241,207458527,"b""Same issue as above, can't delete primary key index"""
7241,207458550,b'Primary key?'
7241,207727687,"b""I have no idea how esent indexes behave, I ran some tests they seemed to pass.\r\nI also never written a schema upgrader.\r\nI didn't mean to modify the behavior, I don't know what is the right grbit to provide...\r\nPlease tell me how should I delete the old indexes and create them correctly.\r\nI think I can avoid deleting the primary index since it should not change, I just wanted all the indexes of the same table to have the same shape and trying to execute 4 indexes creation at once failed."""
7241,207727693,b'again not sure'
7251,207739651,b'Why send it here and not during the negotiation process?'
7251,207739680,"b""This doesn't change after election, I would expect this during negotiations, not every time."""
7251,207739741,b'Here you need to give the actual version and expected version'
7251,207739754,"b'Use `TryGetValue` instead of indexer, will throw otherwise.'"
7251,207739918,b'Add what certificate and from what certificate.'
7251,207739958,"b""use `TryGetValue`\r\n\r\nI also don't like `CurrentClusterMinimalVersion` in general. This is us setting a global static property. I would rather have it in the engine itself."""
7251,207741977,"b'So we can change the cluster version on the fly. The simplest example is when we have a 4.0 cluster and we want to update it to 4.1.\r\nSo when updating the last node we need to change the whole cluster to 4.1 and let the follower know about it,'"
7251,207789315,b'Not Found'
7251,207789446,b'Please remove this comma. You are generating invalid JSON.'
7251,207789573,b'Wrap this inside a method?'
7251,207789960,"b""Please remove this from Constants. This is not a place for 'property names' and 'titles'."""
7251,208120423,b'Please move it from the client. It is not used here. Only on server-side.'
7251,208122109,"b""Rename to 'MinCommandVersion' maybe? Less to send over the wire and you know that this is 'cluster' version because of the context."""
7251,208122596,"b""Also, for future reference, when you are inserting internally used code to Client, then it is safer to mark it as 'internal' to avoid backward compatibility issues."""
7251,208202070,"b'You cannot change the cluster version on the fly. \r\nThe cluster version is fixed on a per term basis.\r\nTherefor, if we need to update the 4.0 to 4.1, we will have to wait until the next election.'"
7251,208202589,"b""Here, have the state on the Follower, and the leader will read it during the candidate's winning elections"""
7251,208209113,b'I will address the command version related issues in the next PR because it is not really related to the certificate replacement command.\r\nSee: http://issues.hibernatingrhinos.com/issue/RavenDB-11694\r\n'
7251,208211337,b'Will address this in http://issues.hibernatingrhinos.com/issue/RavenDB-11694'
7265,208118888,b'We need to detect that this was a port binding exception.'
7265,208119208,b'This should be swapped with 1)'
7265,208119460,b'linux -> Linux\r\nwindows -> Windows\r\n\r\nusing `RAVEN_ServerUrl` on both platforms is sufficient.'
7265,208119873,b'Talk with Tom about this. He will generate a link for you.'
7265,208158575,b'Do we want to cover both ways?\r\n'
7265,208160815,b'Running a server from the command line will use the args from the command line and not the Setting.json file'
7265,208164314,b'Done\r\n'
7265,208164532,b'We can detect this by checking the InnerException e.InnerException will be AddressInUseException'
7265,208164667,b'Going to keep this'
7265,208177001,b'On Linux as well?\r\nWhat about not permission for low ports on Linux?'
7162,208271961,"b'I\'m not sure I follow: After we set all the values for the collections in the ""indexEtagBytes"", we then just override the first 16 bytes with some other values? I know that we are hashing it all at the end, but we do have higher chance for collision here, wouldn\'t we want to just have 16 more bytes for that usage?'"
7162,208274276,"b""There is no need. We are overriding the lastDocumentEtag/lastTombstoneEtag from the 'first' collection that index is working on with lastDocumentEtag/lastTombstoneEtag for all docs. At the end this gives us needed uniqueness without the need of extending the buffer length."""
7273,208532364,b'In schema 5.4 we had `CreateIndexGrbit.IndexDisallowNull` here - I think we should have the same now'
7273,208532760,b'In schema 5.4 we had `CreateIndexGrbit.IndexDisallowNull | CreateIndexGrbit.IndexUnique` here - we should have the same now'
7273,208532969,b'In schema 5.4 we had `CreateIndexGrbit.IndexDisallowNull` here - we should have the same now\r\n'
7273,208533046,b'In schema 5.4 we had `CreateIndexGrbit.IndexDisallowNull` here - we should have the same now'
7273,208533100,b'In schema 5.4 we had `CreateIndexGrbit.IndexDisallowNull` here - we should have the same now'
7273,208533163,b'In schema 5.4 we had `CreateIndexGrbit.IndexDisallowNull` here - we should have the same now\r\n'
7272,208320140,b'Can we replace TAG-> Tag + changelabel for url - since it is copy & paste issue. '
7272,208320384,b'Do we need validation here? Or tag can be any string? '
7272,208329730,b'Do we need to validate if node with given tag already exist in the cluster? @karmeli87 ?'
7272,208330004,"b'`Manually specify node tag, optional` -> `Manually specify the node tag (optional)` ?'"
7272,208330585,b'I would also suggest applying `.Trim()` on this'
7272,208487652,b'Changed'
7272,208488476,b'Fixed'
7272,208557682,b'We do it here:\r\nhttps://github.com/ravendb/ravendb/blob/cda4226f616ec7dcaac6ab173be79b75c9683134/src/Raven.Server/Rachis/Leader.cs#L905'
7272,208559075,"b'But we need to validate that the generated node is not in the cluster... \r\nBecause right now we rely on the last node tag, but this is wrong if we expose this to the user.\r\nThe user can add node B first then node A and then let the cluster to assign the tag... which will resulted in assigning node B again.\r\nhttps://github.com/ravendb/ravendb/blob/cda4226f616ec7dcaac6ab173be79b75c9683134/src/Raven.Server/Rachis/Leader.cs#L997'"
7272,208880650,b'I added server side validation.'
7272,208882787,b'Can we add a simple JS validation here for better UX?'
7272,208890126,"b'@karmeli87 I tested and there is no issue here, it remembering the bigger tag as the last node tag.'"
7272,208890326,"b""@ppekrol In case of adding a node on existing node tag, it reports that the node was added successfully, but the actual case was no-op. I'll fix it to throw an error."""
7272,208909079,b'Done'
7297,208937977,b'Does this work on Linux?'
7297,208938133,b'Why do the check instead of letting the OS do that? Better to handle the error in this case.'
7297,208941283,b'The OS will throw an error only if will try to connect the TCP'
7247,207713759,"b""This seems a bit harsh to deserialize the JSON just for validation, I'm sure there are cheaper ways to achieve this."""
7247,207713803,b'This needs to be disposed of.'
7247,207713856,b'Is this class expected to have more members in the future? (seems too much to have a class for holding a single primitive member)'
7247,207713938,"b""You're generating this const list per document, it would be better to define this as read-only static list"""
7247,207714007,b'Maybe we can use EntityToBlittable here and use Sparrow to save memory (just performance enhancements)'
7247,207714040,b'Better use a static read-only list here'
7247,207714161,b'done'
7247,207714172,b'done'
7247,207714179,b'done'
7247,207714203,"b""can't use Sparrow in the Migrator"""
7247,207714218,b'It is rarely used and is easier to convert to JSON this way'
7247,207785537,b'we can throw here as well I think'
7247,207785615,"b'what do we pass here? is it  ""Command - available commands: databases, collections, export""?'"
7247,207787799,b'Sure? \r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Server/Smuggler/Documents/DatabaseDestination.cs#L571'
7247,207792006,b'https://github.com/grisha-kotler/ravendb/blob/fd50c270b7f01149d8cd7d13af5e738c6be100b9/tools/Raven.Migrator/MongoDB/MongoDBConfiguration.cs\r\n\r\nor\r\n\r\nhttps://github.com/grisha-kotler/ravendb/blob/fd50c270b7f01149d8cd7d13af5e738c6be100b9/tools/Raven.Migrator/CosmosDB/CosmosDBConfiguration.cs#L3'
7247,207792085,b'It can be any migration configuration'
7247,207792226,b'correct. need to calculate it here.'
7247,207793138,b'Thanks for clarification. `InputConfiguration` might be better property name then (minor)'
7247,207797343,b'done'
7247,207869250,b'`DatabaseMigrationFromRavenDB`\r\n\r\nNot sure what implications does this rename have? Backward compatibility needed?'
7247,207869353,b'MigrateFromRavenDB'
7247,207870328,b'What this `IsExportCommand == false` does? Where are we writing this single line and for what reason?'
7247,207871024,b'You need to read whole error here. Check how this is done in Embedded for example.'
7247,207871209,b'enum?'
7247,207871331,b'MigratorFullPath'
7247,207871430,b'What is hidden behind this?'
7247,207871457,b'What is the purpose of this?'
7247,207872540,b'you can simply this using `client.CreateDocumentCollectionQuery(database.SelfLink).ToDictionary()`'
7247,207872645,b'ArgumentNullException?'
7247,207873141,b'disable indentation?'
7247,207873219,b'and I think that you can add Raven.Client and Sparrow.dll if needed.'
7247,207873360,b'Do we need to handle the Fields?'
7247,207873794,"b'You can simply this and previous dict and remove the redundancy,'"
7247,207874863,b'we need to add runtime version here also'
7247,207874962,b'This does not look valid.'
7247,207875437,b'could be easier with JsonWriter?'
7247,207876251,b'I think that this MS command line supports multi-level commands and multi-level help? Talk with @gregolsky about that.'
7247,207876462,b'`ConsoleExport = ExportFilePath == null` ? Can remove that one property?'
7247,207877929,b'Admin operation?'
7247,207879793,b'Have a look in https://github.com/ravendb/ravendb/blob/v4.1/tools/rvn/CommandLineApp.cs'
7247,207880412,b'The tool can return a JSON with a databases or collections list\r\nor an export of the documents. I need a way to distinguish those two actions.'
7247,207881028,b'if ExportFilePath == null and ConsoleExport == true a file will be exported in the application folder'
7247,207881177,"b'IsExportCommand => ActionType (enum -> GetMetadata, Export) ?'"
7247,207881407,b'Old migrations from RavenDB will display only the documents section (studio only)'
7247,207881692,b'Looks like a unnecessary side-effect?'
7247,207883217,"b'The tool can work as standalone and export a valid .ravendbdump file.\r\nRaven.Migrator.exe export\r\n{""Command"": ""export"", ""DatabaseName"": ""test"" }\r\n\r\nIf I remove the ConsoleExport property this command will export to the console as ExportFilePath == null'"
7247,207883883,b'I have a JSON over there. Not sure how this can work.'
7247,207884449,b'Can we export to two of those sources at once?'
7247,207884641,"b""Then I suggest using 'nameof'"""
7247,207934186,b'no'
7247,207936868,b'fixed'
7247,207937204,b'done'
7247,207938874,b'done'
7247,207939787,"b""isn't it the same as an import?"""
7247,208342472,b'I think it would be better to throw when both of them are set or none of them is set?'
7247,208344627,"b'I think that it is the same as the other migration? `/databases/*/admin/smuggler/migrate`\r\n\r\nBTW, since this is not exposed to the Client API, it would be better to change the\r\n`/databases/*/admin/smuggler/migrate` -> `/databases/*/admin/smuggler/migrate/ravendb`\r\n\r\nand this endpoint from `/databases/*/smuggler/migrate` -> `/databases/*/admin/smuggler/migrate`'"
7247,208542739,b'done'
7247,208544030,b'done'
7247,208544096,b'done'
7247,208544171,b'done'
7247,208550338,"b""This *MUST* be an admin operation. \r\nWe are allowing the user to specify an exec that we'll run. That means that we want to be pretty sure that only an authorized admin can do that, and not just any user."""
7247,208550478,b'Also need to check that database restore from 3.x is admin only (which I think it is because this is creating the db)'
7247,208550701,"b""I don't like it either, this is just throwing a lot of perf out the window"""
7247,208550773,b'Better to pass it to the client and have the error there'
7247,208550950,"b'You are only reading a single line, what if there are several?'"
7247,208551126,b'You are sending GZIP over the pipe? Why?\r\nIt is in process communication and the cost of compression is only wasting our time.'
7247,208551247,b'Where are you closing the process when the operation completes normally?'
7247,208561116,b'done'
7247,208594902,b'DatabaseAdmin or Operator?'
7247,208601969,b'done'
7247,208606513,b'changed to Operator as the smuggler/migrate/ravendb endpoint'
7247,208842026,"b'Here you are reading a _single_ line, is that intentional, what about other output?'"
7247,208842224,b'Still waiting'
7247,208842250,b'Still waiting'
7247,208843165,b'I think we should wrap this in try/catch'
7247,208843281,b'Wrap this in try/catch?'
7247,208843778,b'wrap it in try/catch?'
7247,208843792,b'wrap it in try/catch?'
7247,208844004,b'...probably would be better to create a method for safely killing that?'
7247,208844516,"b""using 'nameof' here could be helpful, e.g. you could avoid this typo"""
7247,208845998,"b""Wouldn't it be better to use this as a base and after that add 'if' condition to push the attachment entries?"""
7247,208846507,b'Maybe it would be better to ignore casing here?'
7247,208846742,b'Can we have a casing issue here?'
7247,208877774,b'Intentional. The ouput from tool is here: https://github.com/ravendb/ravendb/blob/1932a9d2799b886aad3040c4192624975fcb3148/tools/Raven.Migrator/MigrationHelpers.cs#L48'
7247,208878642,b'done'
7247,208879190,b'done'
7247,208879334,b'done'
7247,208879760,"b'The default name for GridFS is ""fs"".\r\nIf it was changed we\'ll take it as the collection name.'"
7247,208955520,"b'this is ""mongodb"" or ""cosmosdb""'"
7298,208947114,b'We need to tell on what counter / document this happened.'
7298,208952111,"b""@aviv86 Let's create a CounterOverflowException for that then. We can push there document id, counter name, old value and new value and OverflowException as inner."""
7298,208953101,"b""E.g. `Could not increment counter '{name}' from document '{documentId}' with value '{value}' by '{increment}'. Arithmetic operation resulted in an overflow.`"""
7298,208984621,b'done'
7247,208995704,b'But can be more in the future. Enum would be better?'
7305,208998343,"b""I'm wondering if we want to add `when (PlatformDetails.IsMacOs)` here?"""
7301,208998480,b'how you ended up with *.DotSettings file inside that dir? We have it in the root'
7301,208998541,b'We do not want to have this'
7298,209147326,"b'The last sentence should be removed, that is the message of the overflow exception.'"
7305,209147557,"b""No, any `PlatformNotSupported` would work here. \r\nI'm thinking about BSD in the future."""
7304,209148609,"b""Let's create a dedicate notification for counters.\r\nShould include doc id, counter name and the current (overall) counter value.\r\nSubscribing to a document should also subscribe to its counteers"""
7301,209148870,b'Why do this instead of the previous method?'
7301,209148920,b'No. We already have a way to setup license for tests.'
7298,209162855,b'Fixed'
7304,209166319,"b""'Subscribing to a document should also subscribe to its counters' - how would that look from the Client API perspective? I'm not sure if we should go that way. User should either subscribe to a DocumentChange or to a CounterChange. """
7304,209166435,"b""I'm merging this. Let's handle the notification change as a separate issue."""
7304,209167314,b'http://issues.hibernatingrhinos.com/issue/RavenDB-11727'
7304,209168195,"b'The idea is that when you want to hear about a document, you do it once, for all its notifications.\r\nOn the client side, you can `Subscribe(IObserver<CounterChanges>)` or not.'"
7307,209440503,"b'Actually, I think that both are correct https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/Config/RavenConfiguration.cs#L424'"
7314,209440886,"b'Maybe, instead of just ""_propCount"" we could calculate the hash code for the metadata sequence?'"
7307,209444613,"b'Correct, but using `.` is not always easy (IIRC bash has issues with it). It is better to use `_` and stay on the safe side.'"
7314,209444794,b'It might not be worth it to calculate the hash for the whole metadata sequence.\r\n\r\n@redknightlois can we do any better here? The only place where this is actively used is the GroupBy statement in Reduce.'
7313,209439599,b'Could we pass here just the numeric value? this way we could save some perf on the ToJson and on the FromJson?'
7313,209439620,"b""hmm.. no I see that it'll probably be a backward compatability break..."""
7313,209439694,b'We might want to have a pool of _documentNotifications and _counterNotifications'
7313,209446281,"b""And given the choice between have `Type=3` and `Type='Document'`, I ll take the readable option."""
7313,209446302,b'Why do we need a separator?'
7313,209446334,"b'I would actually expect it to be document, then counter, since counter is inside doc.'"
7313,209446377,"b'We not send this properly, as two arguments?'"
7313,209447616,b'Fixed'
7313,209447628,b'Not sure that I follow?'
7313,209447689,b'`counter/{counterName}/document/{documentId}` vs: \r\n`document/{documentId}/counter/{counterName}`'
7313,209447822,b'I wanted to be consistent with `ForCounterOfDocument` -> `counter/of/document`. This is used only internally in ConcurrentDict.'
7313,209447885,"b'Okay, this is an in memory only value, anyway.'"
7313,209447892,b'fixed'
7301,209451548,b'Not sure. I think it was added by R# somehow.'
7323,209456792,"b'This is not needed, right?'"
7322,209457692,b'what is this used for?'
7314,209467517,"b""we could at least use the metadata sequence length, but it's still no good, especially for map reduce.. it will ultimately be using the same hash, because we expect all reduce keys to be with the same item count. In the bottom line we'll end up performing o(n^2) comparisons between blittables, which is more expensive (see equals implementation) then having a o(n) of hash code calculations and storing them in order to prevent repeated calculations. It's going to be a o(n) calculations, because we know that bjro are immutable, so it won't change after we've already calculated the hash. """
7314,209468953,"b'@ppekrol Many of our data structures assume properly behaved ``.GetHashCode()`` implementations; I cannot overstate how badly behaved is this one, if this ends up in one of our dictionaries, we are going to be in deep problems. Use ``Hashing.Combine(x,y)`` from https://github.com/ravendb/ravendb/blob/v4.1/src/Sparrow/Hashing.cs#L737 if you really need to check ``_size`` and ``_propCount`` only. Having said so, the general guideline for hashes should be: ""Implement the proper ``.GetHashCode()`` for the general object, override in cases they are too costly and you can get away with less"" enclosing the object on an struct instead. The same if when you calculated it, and it\'s going to stay fixed afterwards. \r\n\r\nDoes that respond the question?'"
7314,209500415,"b""Is there any reason we aren't using the actual binary data itself to generate the hash. That would be the _right_ thing to do, no?"""
7314,209510422,"b'@ayende that would be actually ""perfect"" `GetHashCode()` implementation, so actually it would be `Equals()`. We cannot calculate it easily since:\r\n1) we don\'t know the size of nested objects (`_size` property is the size of root BJRO) so cannot calculate hash in one call\r\n2) it would require to go over properties in insertion order and hash each property {name, value} to properly implement that\r\n\r\nI think we\'ll be better off by having ""weak"" `GetHashCode` and call `Equals` when needed\r\n\r\n@redknightlois what is advantage of using https://github.com/ravendb/ravendb/blob/v4.1/src/Sparrow/Hashing.cs#L737 instead of single `^` operation?'"
7314,209513205,"b""we know what the start position is, can't we go to the last property by insertion order and then get it's position / size and compute the hash over that entire range?"""
7314,209515379,"b'Just to be sure, are we _guaranteed_ that:\r\n\r\n```\r\n{\r\n  ""Foo"": ""Bar"",\r\n  ""Baz"": { ""Blah"":""Foo"", ""Bam"": ""Bla""}\r\n}\r\n```\r\n\r\n```\r\n{\r\n ""Baz"": { ""Bam"": ""Bla"", ""Blah"":""Foo""},\r\n  ""Foo"": ""Bar""\r\n}\r\n```\r\n\r\nwill result in _the same_ blittable?'"
7314,209515563,"b""We are guaranteed that it _won't_."""
7314,209515706,"b'In this case, we need to compute hash recursively, by iterating over the properties in sorted orders and combining all the hashes of property names / values.'"
7314,209517162,"b'This is more or less what Equals is doing, but we stop the computation on first difference. I think it would be better to have a weak hash and do the Equals than perform that computation in GetHashCode.'"
7323,209620064,b'Yes. Forgot to remove this I think.'
7314,209650524,b'@ppekrol @ayende I would go in and implement the proper hash for the Equals (which is the right thing to do) but for the purpose of indexing (which is the use case) enclose the object into a struct say: ``WeakHash<T>`` which will implement a weaker version for use in this problem... We can then take a look and see how weak we can get along with. '
7314,209649718,"b'@arekpalinski The problem arise from the distribution behavior of the hash function. Lets say that you have ``0x0001`` and ``0x0011``, when you XOR them numbers that are near, end up being near... Now, suppose that the distribution of your inputs is not so random (size is not :D)... now your actual output dimensionality is very small, leading to huge collision spaces and also huge spaces of unused hash potential. Think when you do that with memory addresses too, it is easy to see that the distribution of the output is clustered and the cluster is a high collision cluster zone. \r\n\r\nEven the ``HashCombiner.Combine()`` which is a rotation based combiner is not good if the inputs are not guaranteed to be good (as in well behaved) hash values. The Combine function ensures that the probability of a single bit to be on and off is as near as 50% as possible even if the 2 input values differ in a single bit. '"
7327,209461174,b'I think we can remove this?'
7327,209500277,"b""We don't actually need it here.\r\nWe put the `source` here _just_ for debug."""
7327,209500317,"b""Let's also send the type of the command."""
7332,209856704,b'what happens if this throws?'
7332,209861650,b'Fixed.'
7322,209878313,"b'It is possible that there will be multiple server clusters in the same test.\r\nThus, the *Servers* collection can be comprised from instances of multiple clusters. \r\n\r\nThe statement [here](https://github.com/ravendb/ravendb/blob/ff67ed8d606958c2c7ef795b9a22efc9082e9d18/test/Tests.Infrastructure/ClusterTestBase.cs#L600)  fetches urls of instances of current cluster and then used to filter the current servers [here](https://github.com/ravendb/ravendb/blob/ff67ed8d606958c2c7ef795b9a22efc9082e9d18/test/Tests.Infrastructure/ClusterTestBase.cs#L603).\r\n\r\nThis change is needed to make sure that the filtering of *currentServers* [here](https://github.com/ravendb/ravendb/blob/ff67ed8d606958c2c7ef795b9a22efc9082e9d18/test/Tests.Infrastructure/ClusterTestBase.cs#L603) is not affected by a race condition.'"
7314,209898585,b'http://issues.hibernatingrhinos.com/issue/RavenDB-11739'
7342,209926126,b'Why do we need this here?'
7326,209466390,b'Can we put this in some *.ts file? '
7326,209939563,"b""This was removed. I had to put it there to be outside the 'use strict' mode, which isn't possible in .ts file."""
7351,210046985,b'This line reverts assumption from http://issues.hibernatingrhinos.com/issue/RavenDB-11107'
7351,210048644,b'maybe wrap this in `#if DEBUG` ?'
7351,210049277,"b'We need this to get a clear error for _us_ in prod.\r\nWhen a user runs into a problem, we need to have the full details.\r\nYou can see that the message is still shown first, along with the full error stack that we can use.'"
7351,210049406,"b'Right now, see what happens when you configure a bad certificate and start the server.'"
6659,195988954,b'I think it would be better to expose this via `store.Maintenance` operation?'
6659,195989010,b'We can drop this file.'
6659,195989817,"b'1. Let\'s change this to `""/databases/*/transactions/replay""`\r\n2. I would suggest changing the method to \'POST\''"
6659,195990252,b'Change to `file`.\r\n\r\nYou can use `GetQueryStringValueAndAssertIfSingleAndNotEmpty`'
6659,195990411,"b'1. Let\'s change this to ""/databases/*/transactions/start-recording""\r\n2. I would suggest changing the method to \'POST\''"
6659,195990531,b'Can change to `file` and use `GetQueryStringValueAndAssertIfSingleAndNotEmpty`'
6659,195990608,"b'1. Let\'s change this to ""/databases/*/transactions/stop-recording""\r\n2. I would suggest changing the method to \'POST\''"
6659,195992302,b'Is this comma correct?'
6659,195992744,b'Do we have to allocate new context each time?'
6659,195992970,b'Is this correct? Each time we are recording a new BJTW is opened?'
6659,195993958,"b'FYI, you can format everything in `.ToString()`'"
6659,195994079,b'Use `NewDataPath` and `Path.Combine`'
6659,195994261,b'This will work only on your machine.'
6659,195994549,b'Better to use `NewDataPath`. Those are deleted after the test.'
6659,196033353,"b""Let's avoid including files that haven't really changed."""
6659,196033550,"b'This should only be available to cluster admin, not any user'"
6659,196033650,"b'Use `POST`, not `GET` for this'"
6659,196033702,b'Same as previous one'
6659,196033827,"b""You shouldn't be providing a file path here, instead, you should upload the stream.\r\nNote that here you _don't_ need to be an admin, just a normal user"""
6659,196033983,b'Also should be `POST`'
6659,196034630,"b'Here you need to actually override `Execute`, because you need to pass the recorder to the `ParsedCommands`'"
6659,196034728,"b""Don't need this, it isn't an actual recordable command, it is just a container"""
6659,196034939,b'Why make this public?'
6659,196035150,"b""`Cant` -> `Can't` (and elsewhere as well)"""
6659,196035319,"b""It _has_ to be a POST and mustn't read from a file"""
6659,196035390,b'This must require ClusterAdmin permissions'
6659,196035419,b'ClusterAdmin permissions'
6659,196035592,"b'No, use `nameof`, instead'"
6659,196035746,b'This should be using `Execute` directly and passing the `recorder` to `_command`'
6659,196035917,b'Why do we have a thread for this?'
6659,196036016,b'Need to make sure that we have tests for each of the commands'
6659,196036074,"b'So when we add a new command, we are aware that we need to support it.'"
6659,196036768,b'This is for the specific command that is used.'
6659,196036812,"b'We can scope it to the transaction level, I guess.'"
6659,196036881,"b'Yes, there is always a first default value'"
6659,196037208,"b""Let's use `BeginAsyncCommitAndStartNewTransaction` instead of `FinishAsyncAndStartNew`"""
6659,196037286,b'why commented here?'
6659,196037337,b'remove this?'
6659,196037511,"b'We need to know that this happened, but in general a dispose without commit will also work, so we can skip it'"
6659,196037602,"b'We call `EndAsyncCommit` explicitly in some cases, though, no?'"
6659,196037777,"b'This needs to accept a Stream, not a file path'"
6659,196037940,b'Can probably remove this enitrely'
6659,196038044,b'Need to add a test to verify that all commands are known here'
6659,196038139,b'why is this public?'
6659,196038394,"b'this should be an operation (returning operation id, etc)'"
6659,198508672,b'Should the file path send throw the Url even though the request has changed to Post orshould it be in the body?'
6659,198554343,b'Should be the body'
6659,200165630,b'Here you need to set the Position to `0`. This may be called multiple times.\r\n'
6659,200165736,b'This _has_ to be an admin level operation'
6659,200165840,"b""Decide if you are passing this on the body or the url, don't do both.\r\nAnd we typically use `PascalCase`"""
6659,200165911,"b'You can use ConvertCommandToBlittable, instead.'"
6659,200165961,b'Admin level only here'
6659,200166167,"b""Is this valid? Have we already recorded this command?\r\nAnd if so, why won't we call `ExecuteCmd` instead?"""
6659,200166292,b'Throw an error here'
6659,200166464,b'Should throw here'
6659,200167195,b'Do not throw `Exception` directly. Use `InvalidOperationException` or some such'
6659,200167327,b'Any reason not to use a `for` here?'
6659,200167461,"b""Cant vs Can't"""
6659,200167479,"b""This hasn't been fixed"""
6659,200167516,"b""Don't throw `Exception`"""
6659,200167523,"b""Don't throw `Exception`"""
6659,200167649,"b'This is not a valid URL for a `ClusterAdmin` endpoint , it must contain `admin`'"
6659,200167673,b'Not valid endpoint for admin'
6659,200167769,"b'We use `PascalCase`, and better to use an actual class here and deserialize that'"
6659,200167869,b'And the actual `_instruction` value here'
6659,200167946,b'All of these should use `nameof`'
6659,200167982,b'Use `nameof`'
6659,200168004,b'Use `nameof`'
6659,200168429,"b""Don't throw `Exception`"""
6659,200168502,b'Is there any reason not to do as suggested?'
6659,200168639,b'When is this _ever_ a valid option?'
6659,200168676,b'`nameof`'
6659,200169282,"b""Don't throw `Exception`\r\nIf there is an error, using the `PeepingTomStream` to provide context"""
6659,200169455,"b'Yes, but you can provide it in the same manner as usual'"
6659,200169497,"b""Don't use `Exception`"""
6659,200169504,"b""Don't use `Exception`"""
6659,200169541,"b""Don't use `Exception`"""
6659,200169592,b'Remove this'
6659,200169649,b'Avoid this kind of paths. Instead use `Path.GetTempFileName()`.'
6659,200169721,b'Avoid such code'
6659,200169922,b'Probably need to wait until this is actually being completed.'
6659,200169977,b'Huh? Why would it be empty if you replayed?'
6659,200170053,b'Chceck if need to wait here'
6659,200170121,"b""Let's avoid concat of queries, even in test. Use parameters."""
6659,200170209,b'Move the asserts into the session to check them.\r\nEasier to read'
6659,200170266,b'Why wait for empty here? \r\n'
6659,200170387,"b'This need to be an operation, with status reporting going on'"
6659,200338807,b'Should it set before or after the request?'
6659,200479732,b'In the `CreateRequest` method.'
6659,200843819,b'It does not matter whether the field is private?'
6659,200902154,"b""No, we don't want to support these.\r\nWe will require explicit serialization if we want to serialize such values."""
6659,200902289,"b""Note that I'm talking about the `LazyStringValue` here. """
6659,200902603,b'The method name is misleading'
6659,200902704,b'Do not throw `Exception`'
6659,200902767,"b'You cannot do this, converters are reusable'"
6659,200902813,b'Do not throw `Exception`'
6659,200902950,b'What does the JSON looks like here?'
6659,200921852,b'What is it mean to use _instruction value?'
6659,200971434,"b'Do you mean I need to add a possibility to wait to ""StopTransactionsRecordingOperation""?\r\nAnd if yes should I do this to ""StartTransactionsRecordingOperation"" & ""ReplayTransactionsRecordingOperation"" as well?'"
6659,201250217,b'What do you mean?'
6659,201250351,b'Do not throw `Exception`'
6659,201250617,b'Can use `reader is BlittableJsonReader blittableReader`'
6659,201250712,b'Same comments as in `BlittableJsonConverter `'
6659,201251117,"b'What do you mean by ""explicit""? If we have a command with LazyStringValue property the mechanism of Newtonsoft.Json will not be able to serialize/deserialize (like MergedTransactionCommand).\r\nSo in that cases it should be done different?.'"
6659,201251231,b'`IdKey` should be replaced with `nameof`'
6659,201251345,"b'What do you mean? You got the path from the user or this, no?'"
6659,201251832,"b'Leave this, not important.'"
6659,201320849,b'The parameter object can be pass to the constructor of StartTransactionsRecordingCommand or even StartTransactionsRecordingOperation and created outside'
6659,201325049,"b""Yes, in a local machine it's work perfect.\r\nBut if I'll do it in remote? Should the client send the whole path?"""
6659,201326513,"b""Let's create an object here that will be passed from the caller. This will simplify versioning concerns in the future."""
6659,201326601,"b'It is always a local path, yes. And if sent from remote machine, the caller need to provide the right path.'"
6659,201404207,"b'General note: here we see that using the Newtonsoft infrastructure forces us to do a string materialization, only to create a LazyStringValue out of it once again, when we create the object instance. We need to understand whether we really want to continue using Newtonsoft.Json for the transaction merging..'"
6659,201424164,b'We can probably do this using `DynamicJsonValue` and directly serialization?'
6659,201453334,b'yes'
6659,201958520,b'Avoid leaving commented code unless it is commented and meant to stay as a warning what _not_ to do.'
6659,201958621,"b""`NotSupportedException` is probably better, not impl usually means that we'll get around to that."""
6659,201958843,"b'This may not be 4KB in size. Better to just say ""context"" or something like this'"
6659,202262418,"b""This needs to be set before. We can hit 'CreateRequest' few times."""
6659,202263237,b'Pass the `_instruction` to the Exception so we will know what was the value that we are not handling'
6659,202273266,"b""Yes, this is _why_ this is called here, so whenever `CreateRequest` is called, you'll start from 0"""
6659,202530820,"b'In fact, I meant to go back to it. But should it be not supported?'"
6659,204347475,b'done'
6659,204347623,b'done'
6659,204347870,b'done'
6659,204347963,b'done'
6659,204350784,b'done'
6659,204350835,b'done'
6659,204352334,b'done'
6659,204352381,b'done'
6659,204352436,b'done'
6659,204352473,b'done'
6659,204352609,b'O.k.'
6659,204352642,b'done'
6659,204352736,b'done'
6659,204352863,b'done'
6659,204352908,b'done'
6659,204352970,b'done'
6659,204354408,"b'In summary, it was agreed to treat the command as one unit and not as a collection'"
6659,204354567,"b'In summary, it was agreed to treat the command as one unit and not as a collection'"
6659,204354908,b'To create it in replay'
6659,204354953,b'done'
6659,204355157,b'done'
6659,204355497,b'done'
6659,204355657,b'done'
6659,204358015,b'done'
6659,204358079,b'done'
6659,204358130,b'done'
6659,204358836,b'done'
6659,204358993,b'done'
6659,204359068,b'done'
6659,204359787,b'In progress '
6659,204359910,b'To create it while replaying '
6659,204360253,b'done'
6659,204360391,b'done'
6659,204360421,b'done'
6659,204360579,b'done'
6659,204360631,b'done'
6659,204360668,b'done'
6659,204360874,b'done'
6659,204360971,b'done'
6659,204361041,b'done'
6659,204361285,b'done'
6659,204361316,b'done'
6659,204361604,b'done'
6659,204361664,b'done'
6659,204361696,b'done'
6659,204361744,b'done'
6659,204361827,b'done'
6659,204361868,b'done'
6659,204361894,b'done'
6659,204361984,b'done'
6659,204362075,b'done'
6659,204362155,b'done'
6659,205018960,b'done'
6659,205019308,b'done'
6659,205019377,b'done'
6659,205019420,b'done'
6659,205019458,b'done'
6659,205019716,b'done'
6659,205020102,b'done'
6659,205020655,b'In progress'
6659,205020786,b'done'
6659,205021113,b'done'
6659,205021190,b'done'
6659,205021256,b'done'
6659,205021292,b'done'
6659,205021390,b'In progress'
6659,205021584,b'done'
6659,205021691,b'done'
6659,205021813,b'done'
6659,205022332,b'done'
6659,205022435,b'done'
6659,205023883,"b'So, do you mean to create the parameters object in the operation (StartTransactionsRecordingOperation) and pass it to the command (StartTransactionsRecordingCommand) ?'"
6659,205024312,b'done'
6659,205024443,b'done'
6659,205024490,b'done'
6659,205024616,b'done'
6659,205024820,b'done'
6659,205024901,b'done'
6659,205025241,b'done'
6659,205025416,b'done'
6659,205025557,b'done'
6659,205025599,b'done'
6659,205025690,b'done'
6659,205025811,b'In progress'
6659,205025955,b'done'
6659,205026031,b'done'
6659,205026387,b'done'
6659,205026428,b'done'
6659,205026449,b'done'
6659,205026506,b'done'
6659,205026547,b'done'
6659,205026603,b'done'
6659,205026643,b'done'
6659,205026675,b'done'
6659,205026711,b'done'
6659,205026933,b'done'
6659,205026990,b'done'
6659,205027061,b'done'
6659,205027169,b'done'
6659,205075795,b'done'
6659,205075818,b'done'
6659,205075843,b'done'
6659,205075887,b'done'
6659,209501707,b'Too much time in C'
6659,209501820,b'`TODO:` and replaying'
6659,209501864,b'`TODO:`'
6659,209501932,b'And what check are you talking about?'
6659,209914059,b'done'
6659,209914528,b'done'
6659,209914613,b'done'
6659,209914923,b'done'
6659,209979771,b'Put in using block'
6659,209980043,b'`Assert.Throws` is cleare'
6659,209980096,b'Use `Skip`'
6659,210233974,b'The stream is used for a long run.\r\nbut I passed its creation to EnabledRecordingState that respond to its dispose and wrapped the init code in try_catch. Is it make sense?'
6659,210234845,b'Check for null.\r\nNow it should serialize all the commands or throw error'
6659,210234887,b'done'
6659,210235152,b'done'
6659,210235746,b'done'
7359,210499140,"b'Debug information endpoints need to return objects.\r\n\r\ntry this:\r\n```\r\n{\r\n    ""Results"" : []\r\n}\r\n```'"
7359,210499815,b'`/databases/*/admin/debug/cluster/txinfo` or `/databases/*/admin/debug/txinfo/cluster`'
7368,210541370,b'why?'
7368,210541851,b'We should use here `TrySetException`'
7368,210542358,b'When can we get this?'
7368,210548890,b'@karmeli87 did you encounter a situation when run was null?'
7368,210558313,"b'I did, yes. This can happen if there is no script to run `from Users`'"
7368,210563197,b'This is what is thrown when an unexpected error is sent.\r\nhttps://github.com/ravendb/ravendb/blob/a73056b86822a71a6401dd5475ea904cdabed732/src/Raven.Client/Documents/Subscriptions/SubscriptionWorker.cs#L455\r\n\r\nBut probably need to set `MaxErroneousPeriod` instead.'
7368,210566560,b'e.g. `from Users (Revisions = true) as doc`'
4377,210569229,"b'@ayende Starting to look into this it seems that this is not the right place to handle this.\r\nWe should construct the LazyStringValue with those control character already escaped meaning we will need to go over all the places that construct the escaped character and make sure we escape control characters, right?'"
4377,210570503,"b'That should be the case when we build LZV, yes.'"
7355,210215911,"b""Maybe it would be better to throw for these two methods? It will be confusing for some users that Single/SingleOrDefault will behave same as First/FirstOrDefault.\r\n\r\nThe exception could be: `Methods 'Single' and 'SingleOrDefault' are not supported in projections. Use 'First' or 'FirstOrDefault' instead`"""
7355,210239909,"b""I'm not sure that I like that, but I get what you mean. \r\nThe question is whatever the user actually meant to assert `Single` or not?\r\nFor `First`, we don't error if there are no values (we translate this a `FirstOrDefault`).\r\nThe query is whatever this is likely to be meaningful from the user POV. What do you think?"""
7355,210241723,"b""I think by throwing an exception here we will make our self clear about the situation. We do not support that and the alternative is to use the `First/FirstOrDefault`. If one day we will want to support this then we can add a proper implementation without breaking backward compatibility.\r\n\r\nWe should not assume that user by executing `Single` wanted to do `First`. 'Single' checks if there is one element and throws otherwise. One user will assume that, another will not. This might result in another YT issue in the future when someone will expect 'the other' behavior.\r\n\r\nI suggest staying on the safe side and stating as is."""
7355,210256408,"b""I would probably agree that if Single/SingleOrDefault isn't supported, I'd rather see that thrown as an exception. I would probably extend that to First as well, since you're saying that under the covers it really behaves as FirstOrDefault."""
7355,210266813,"b""Okay, in this case, then.\r\nHowever, we can't change `First` behavior now."""
7355,210269196,"b""@ayende Could you implement this by throwing an exception in the default case of the switch statement? As a user, I'd prefer to get a runtime error if I'm trying to use an unsupported LINQ expression (be it Single/SingleOrDefault, or something else)."""
7355,210506617,"b'Yes, I made the modification'"
7368,210576711,b'Maybe we should add another method for that (TrySetException)'
7369,210580024,b'try to use `string.Empty` next time'
4377,210606694,"b'I think that we should not treat that on server side.\r\nWe did not validate incoming jsons and that train has already left the platform, due to backward compatability issues (imagine refusing requests from older clients by newer servers etc.)\r\nWe do need to make sure that the clients will send a valid json from now on'"
7374,210619520,"b""Did you get all the places that read it as well? Otherwise we didn't do much.\r\nCan we create a new instance, isntead?"""
7380,211094317,b'what about when you continue the setup?'
7380,211096906,b'@iftahbe will apply necessary fixes. He will submit a new PR with them. Closing this one.'
7389,211103289,b'This code needs to be removed'
7389,211103317,"b""We shouldn't request more, but should validate that we aren't over the max size"""
7389,211103338,"b'Generate this at runtime, instead. This is not going to be readable long term.'"
7392,211103744,b'what was the issue here?'
7392,211103879,"b""On leader change we wait for 5 seconds before the observer starts to analyze the stats.\r\nSo in this case we wouldn't change the database topology in time for the node to realize that it need to move the subscription responsibility. """
7391,211104471,"b'Can we assume here that the revisions are ordered by data here?\r\nBecause if we have hundreds of revisions, but the most relevant are the first 50, then we iterate over 150 unneeded revisions..\r\nAlso, maybe we could avoid caliing TableValueToRevision for each revision, and instead call to a function that will return the raw dateTime value'"
7391,211104517,"b""We can get the raw date time yes, but I don't think we can avoid iterating them.\r\nThe problem is that the revisions may happen on different nodes, and be notified at different times.\r\nThis is a edge case, but we need to be aware of this."""
7393,211105355,"b'why does this matter, these are the defaults anyway'"
7393,211105678,b'The port in the request was 80 (implicit) so request.Host.Port was null. This caused us to append 8080 to the node url and that wrong url was written to the topology.'
7393,211105794,"b""Also, now the test 'AddingRemovedNodeShouldWork' fails. Not sure if it's related to this change yet."""
7395,211105892,"b'Need to do the check here again, you might have had another tx come in the meantime.'"
7389,211107691,"b'@talweiss1982 that todo remark is very important! I think that we may want to perform that modification before that function, moreover, we should first count that amount of ""control charachters"", according to that, to allocate or reallocate the right memory chunk and only then to perform that code'"
7389,211108732,"b""So after talking with @talweiss1982 , it seems that I've overlooked the modifications to FindEscapePositionsMaxSize, It wtill seems a bit awkward to modify data inside FindEscapePositionsIn, but as an intermidiate solution, it does the work"""
7389,211108750,"b""it's GCHandle.Allocate"""
7395,211154489,"b""In any case someone will be overwritten here.. We identify the notification by the Id, which should be unique to the case.\r\nBut when 2 notifications with the same Id are concurrently stored, I'm not sure if we should care which one will be written."""
7395,211156881,b'OK'
7395,211158213,b'what happens if something fails above? (should we at least try to log it)'
7395,211158665,b'See here: https://github.com/ravendb/ravendb/blob/cbcffe3c89b8b37b57f34ec6510854079f895dee/src/Raven.Server/NotificationCenter/NotificationCenter.cs#L68'
7396,211159626,"b""Why is this now required? We have docs that don't specify this."""
7391,211159508,"b'@ayende maybe it would be better to add paging and give user more flexibility here?\r\n\r\n```\r\npublic List<T> GetBefore<T>(string id, DateTime before, start = 0, int pageSize = 25)\r\n```'"
7391,211160508,"b'I specifically wanted to give a single revision here, because multiple revisions are complex.\r\nThey are complex because we cannot assume that revisions are sorted by last modified, and I want to avoid creating a new storage index for this. So we do a single search for the latest revisions before the max date and return just that.'"
7399,211206454,b'Is that going to be the same in Linux? Is that the same in Windows?\r\n'
7399,211206560,b'I would rather add the URL at all times always.'
7399,211209062,b'It might also be different when SocketsHttpHandler is not used?'
7399,211501466,b'Why do we want to keep those logs here? We are not doing anything with them?\r\n\r\nDebug only code?'
7399,211506055,"b""I don't want to spam the log file, so I keep track of the logs and write the _same_ message to the file only if enough (10 is enough?) iterations have passed. But that dictionary has to be cleaned.. let's say.. once in a 10,000 iterations.  """
7370,210597961,b'I would rather _always_ use this. Is there a reason not to?'
7370,210602741,"b""The method with *public Task<(long Index, object Result)> SendToLeaderAsync(CommandBase cmd)* signature is used in gazillion of places.\r\nHaven't checked ALL of them, but in some there are duplicate contexts used, and I guess SendToLeaderAsync() with context parameter CAN be used.\r\n\r\nSince I am working on tests, I preferred to make minimum necessary changes to code. Do you think I should refactor its usage?"""
7370,210609305,b'We can do it now or in 4.2. After 4.1 RTM this change would not be a good option.\r\n\r\nMaybe it would be better for the method that does not have an external context to do (in debug):\r\n```\r\n#if DEBUG\r\nif (result.Result is BlittableJsonReaderBase)\r\n    throw new InvalidOperationException();\r\n#endif\r\n```'
7370,210617171,"b""The problem isn't with direct dependency. It is if it returns _anything_ that holds BJRO"""
7370,210617293,b'And the problem with it being used everywhere it what scared me. Doing a deep check is fine with me on debug.'
7370,210621616,"b'Great, wanted to propose a deep check.'"
7370,210635645,"b""In case of those commands, it returns a tuple where one of tuple's values is blittable"""
7370,210642660,b'http://issues.hibernatingrhinos.com/issue/RavenDB-11761'
7370,210673734,"b""Will probably keep this in place to make sure that we aren't making this mistake, though."""
7370,210673869,"b'Use `HashSet` with reference equality comparer, instead'"
7370,210673982,b'You can avoid this line in favor of the one below'
7408,211575936,"b""I don't really like the name of the renamed parameter because it suggests that it'll skip the validation completely (`ValidateReduceResultsCollectionName()` vs `validateMapReduceCollectionName:false`). What we actually want to check or not check is to verify that the collection is empty so maybe `checkIfCollectionEmpty` of something like that."""
7408,211578790,"b""Why do we need to handle that here? Based on the included test I understand the issue was that we didn't recognize the index definition has _not_ been changed meanwhile, right?\r\n\r\nWhy we didn't filter it out here?:\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Client/ServerWide/DatabaseRecord.cs#L93"""
7408,211579142,b'This code is seems to have very similar logic as `IndexStore.HandleStaticIndexChange` why do we need it here?'
7408,211590793,"b""There is no need to send a RAFT command if the index didn't change.\r\nHandleStaticIndexChange is after applying the RAFT command."""
7371,210609649,b'We do not want this'
7408,211590991,b'This is before we try to add it to the database record'
7408,211593223,"b'Why should it matter? This is a rare thing, so not much point in optimizing it.'"
7408,211594370,b'Calling IndexCreation.CreateIndexes() on app restart with 100 indexes for example'
7408,211594904,"b'Which would be rare, and would usually be batched anyway, so one call only'"
7408,211599086,"b'Talking with @grisha-kotler, we have an issue because we want to make this validation _before_ we accept the command into the cluster.\r\n'"
7408,211602571,b'I wonder if we really need to have this validation _before_ sending the command. What if we let it send it to the cluster and do the validation then (on the actual attempt to create an index - unless we already detected that such index def already exists and filtered it out)\r\n\r\nThat validation is always done here:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Server/Documents/Indexes/MapReduce/Static/MapReduceIndex.cs#L73'
7408,211603313,"b""This is too late. The caller for creating the index won't see this error and the current index will be errored (if we changed the definition)."""
7408,211603986,"b""I've commented this validation:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Server/Documents/Indexes/IndexStore.cs#L383\r\n\r\nand run `OutputReduceToCollectionTests` - all passed"""
7408,211606240,b'The diffrenece now is that an errored index will be created'
7408,211609745,"b""Oh I see. That is because:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Server/Documents/Indexes/IndexStore.cs#L240\r\n\r\nWhat if we _won't_ create faulty index def if the caught exception is `IndexInvalidException`. In order words if we failed due to validation we just error and won't create errored index - it seems to be reasonable"""
7408,211611032,b'what about the previous index def at this point?'
7408,211613745,b'just make a quick test and everything seems to be ok. I got the validation error and previous index def remained unchanged'
7408,211614381,b'same here. (the replacement index failed to be created which is what we need)'
7408,211617466,"b""hmm.. my approach doesn't seem to be okay. if we skip the above validation we'll end up with DatabaseRecord containing invalid index def :/"""
7360,210497604,b'This looks like a debugging code. Should be removed.'
7360,210497648,b'Debugging code.'
7360,210498082,b'Debugging code. Should be removed.'
7360,210498537,b'Are we expecting to invoke this method in a concurrent manner?'
7360,210506965,"b'IIRC, we have commands that hold `BlittableJsonReaderObject`, but here you are disposing the context while the BJRO is still in use, no?'"
7360,210507199,b'We should never catch NREs. We need to handle this properly.'
7360,210507277,b'There should never be such a case.'
7360,210507354,b'can remove this'
7360,210507385,b'remove this'
7411,211676628,"b""Let's NOT do that."""
7408,211727182,"b""If we will check here that we have index with same name and same output collection then we can skip that 'if'? Wouldn't that be the case?\r\n\r\nIf we previously allowed a creation of index 'MyIndex' that Outputs to collection 'Companies' then if we have still that index and we are overriding it then the assumption that it was valid configuration still takes place?"""
7360,211730782,b'I think this test is fixed here: https://github.com/ravendb/ravendb/pull/7404'
7408,211739205,b'https://github.com/ppekrol/ravendb/commit/22e90f9c337c58a3ca6e42513d2128b729656497 seems to work?'
7408,211755589,"b""You are still creating an errored index.\r\n(I don't think that there is a test for that)\r\n1) deploy a map-reduce index with output to collection with some documents\r\n2) modify the index definition and deploy.\r\nThere will be an errored index (side by side one in this case) while it shouldn't been even deployed."""
7408,211845872,b'Correct.\r\n\r\nWe need a test for this case.'
7422,211960062,b'Can we move this throwing to separate method?'
7422,211995885,b'You also need to do this check for every individual check that might have been configured.\r\nWe can set only a specific document to be optimistic concurrency checked.'
7422,212079149,b'Done.'
7425,212244695,"b""What's the reason we pass `Logger` here instead of giving it own static instance?"""
7425,212245619,"b""Why we don't log the exception as we do in `GetWindowsOsInfo`?"""
7425,212245687,"b""Why we don't log the exception as we do in `GetWindowsOsInfo`?"""
7439,212924331,b'Can we shorten the transaction time by performing the deserialization during the transaction and only then closing it?'
7439,212929640,"b""Doesn't matter that much, the overall duration is roughly the same\r\n"""
7453,212833867,"b""I think it should be changed to 'DynamicArray' ?\r\nCheck here:\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Client/Documents/Indexes/ExpressionStringBuilder.cs#L1464"""
7453,212833911,b'in v3.x we had: https://github.com/ravendb/ravendb/blob/v3.5/Raven.Client.Lightweight/Indexes/ExpressionStringBuilder.cs#L1588'
7453,212882870,"b""Shouldn't use _hash_ set. The user will want to get them in the same order, and if they have duplicates (rare, but possible) we want to maintain them."""
7453,212886900,b'Talked with @ayende . HashSet is valid at this point. No changes needed here.'
7453,212923053,b'done'
7453,212928473,b'`DynamicArray` -> `new DynamicArray` ?'
7465,213201548,"b""Wouldn't we create it if it doesn't exist? See here:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/b6d16d116e6fce7c22c401a4c8f939aa95b55eee/src/Raven.Client/Http/ClusterTopologyLocalCache.cs#L71\r\n\r\nWe still need to check if we have write permissions to this directory"""
7465,213237886,"b'Agree, and we need to handle failure of the creation of the directory as well'"
7431,212302268,b'Will `toDateString()` support _any_ custom format that you can use in c#? (https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings)'
7431,212323167,"b'it should, it is implemented in c# in `ScriptRunner` :\r\nhttps://github.com/ravendb/ravendb/blob/be4c5d0d81754bb0747a0f966302b56202673a9d/src/Raven.Server/Documents/Patch/ScriptRunner.cs#L653-L656\r\nshould I add more tests with other formats?'"
7431,212340365,"b""Let's change things around.\r\nInstead of specializing only for DateTime, let's support any `ToString`. I want to be able to use this for `this.Age.ToString('000')`, for example.\r\nWe also want to support passing the culture."""
7431,212919597,"b'That\'s not something that is supported in javascript ""out of the box"", it will require writing some custom jint functions that will do that from c#. That\'s a .net functionality, that I\'m not sure we want to ""port"" to RQL at all, and if we do, it\'s not a trivial move and we better think it through..'"
7431,212948610,"b""I think that we want to support actual culture over the wire with InvariantCulture being `null` or empty string `''`\r\n\r\ne.g.\r\n`x.Start.ToString(CultureInfo.InvariantCulture)` => `toStringWithFormat(new Date(Date.parse(x.Start)))`\r\n`x.Start.ToString(CultureInfo.InvariantCulture)` => `toStringWithFormat(new Date(Date.parse(x.Start)), '')`\r\n`x.Start.ToString(CultureInfo.InvariantCulture)` => `toStringWithFormat(new Date(Date.parse(x.Start)), null)`\r\n\r\nand when we have a different culture (let say `en-US`)\r\n`x.Start.ToString(CultureInfo.CurrentCulture)` => `toStringWithFormat(new Date(Date.parse(x.Start)), 'en-US')`\r\n"""
7431,213228935,b'done'
7431,213231780,b'`toStringWithFormat(x.Number)` will work also?'
7431,213233288,"b'Move this to `CultureHelper` and do this:\r\n\r\n```\r\n        private static readonly Lazy<Dictionary<string, CultureInfo>> CulturesLazy = new Lazy<Dictionary<string, CultureInfo>>(() => CultureInfo.GetCultures(CultureTypes.AllCultures).ToDictionary(x => x.Name, x => x, StringComparer.OrdinalIgnoreCase));\r\n\r\n        internal static Dictionary<string, CultureInfo> Cultures => CulturesLazy.Value;\r\n```'"
7431,213262000,b'done'
7432,213690860,"b""I think when getting url using `GetNodeHttpServerUrl();` public server url takes priority over everything else, so you don't need `Configuration.Core.PublicServerUrl.HasValue` since it's done inside it AFAIR\r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Server/Config/Categories/CoreConfiguration.cs#L84"""
7432,213695144,b'I think that you are right and we can remove it.'
7485,213847676,"b'Technically, they can run the setup while using HTTPS if they re-run by editing the `settings.json` to say `SetupMode=Initial`. Can we add the check for 443 here?'"
7485,213850720,b'Yes\r\n\r\n'
7485,213851122,"b'```\r\nconst currentHttpPort = window.location.port || (window.location.protocol === ""https:"" ? ""443"" : ""80"")\r\n```'"
7485,213851758,b'Yes'
7397,211161701,b'You did too much C :-)'
7397,211161985,b'What _is_ the value that you go? We need to provide as many details as possible to make it easy for the user to understand.'
7397,211162321,b'Please provide good error here on what value _was_ passed here.'
7397,211162368,b'Better error on what was passed here.'
7397,211162467,b'What if the value is _already_ `LazyBlittableString` ?'
7397,211162568,b'Better error specify what was the value we did get here'
7397,211162596,b'What value did we get here?'
7397,211162790,"b'You do need it here, and you need to check that you `CanSeek` and error appropriately.\r\nBecause you consume the full data, the serialization mutates the state of the object. We want to return it to `0` after the call.'"
7397,211163005,b'Comment needs to move to `GetLazyStringValue` method'
7397,211163209,b'Why not clone it? '
7397,211163601,"b""You don't need the check, we should never get an empty array here.\r\nIf we do get it, however, just handle it normally."""
7397,211163768,"b""Don't need to check here."""
7397,211164416,"b'We typically use the number of operations to push this.\r\nThis give the user predictable behavior in most cases, this is fine'"
7397,211164493,b'Add a comment on why this is required.'
7397,211165084,b'We use `PascalCase` for tuple values.'
7397,211165174,b'This is fine'
7397,211165770,"b""This is a short lived buffer that may be large. Let's use `ArrayPool` here"""
7397,211166664,"b""We do not use 'Trx'. Change to 'Tx'"""
7397,211166784,"b""We do not use 'Trx'. Change to 'Tx'"""
7397,211167104,"b'This may be big, we need to investigate if we can do this in unmanaged memory more easily. \r\n`Sparrow.Utils.Base64` give you the option to go from `byte*` of buffer to `byte*` of base 64 without allocating managed memory.'"
7397,211167208,"b""Same here, let's avoid these big allocations."""
7397,211167996,"b'Can remove the comment, I think'"
7397,211168282,"b'If we provide a bad file path (`f:\\foo`, no permissions, file already exists, etc). What will happen?'"
7397,211169133,b'Reminder on this'
7397,211169440,b'This is fine'
7397,211169564,b'Use `\\r\\n` or `Environment.NewLine` here.'
7397,211169664,"b'Better error here, what did we get?'"
7397,211169708,b'What did we get?'
7397,211169774,b'Base we use `Base64` and avoid the managed allocations?'
7397,211169801,b'Better error'
7397,211169908,b'Why do you need `DocumentsOperationContext` and not just `JsonOperationContext`?'
7397,211170145,b'What is the status of this?'
7397,211170187,b'Bring the comment on the structure here.'
7397,211171651,b'The operation should not be passed from the outside (unless used via Studio).\r\n\r\nThis endpoint should return the OperationId only (check other similar methods e.g. in SmugglerHandler)\r\n\r\nThe ReplayOperation in client should return OperationIdResult'
7397,211171880,b'This method does not have to be async?'
7397,211172161,"b""isn't this an overkill? can we do `Database.TxMerger.Start(parameters.File)` ?"""
7397,211172883,b'Can we avoid doing that?'
7397,211173719,"b""Don't we need to make a copy of them then?"""
7397,211174767,b'We typically use RavenVersionAttribute.Instance.Build only'
7397,211175102,b'Not sure if we want to have these as default in client? Those are used only on server-side?'
7397,211175159,b'As written below. This needs to return the OperationIdResult'
7397,211178753,b'Can we move the implementation to some dedicated helper class?'
7397,211183098,"b'We have to do it this way to avoid starting recording in the middle of a transaction.\r\nThis way, we always start from a brand new tx.'"
7397,211183218,"b'Yes, it is better to avoid them there by default.'"
7397,211204375,b'Makes sense.'
7397,211246422,b'https://github.com/haludi/ravendb/blob/f13bbd5c65c488aa7c227f6de329e735570a3d44/src/Raven.Client/Json/BlittableJsonReader.cs#L205\r\n\r\nThe reader convert all the serialized string types to string before it set the value\r\n'
7397,211283654,"b""https://www.newtonsoft.com/json/help/html/SerializationGuide.htm#Dictionarys\r\n\r\nAt the time I did not look into it in depth, but using the dictionary rose a problem\r\nNow I've found that there is special regard to the key of the dictionary\r\nthat cause it not going through the SliceJsonConverter"""
7397,211286752,b'So how to decide how many operations should it be? '
7397,211366351,"b""Use `new Dictionary<...>(Expires)`\r\n\r\n`ToDictionary` is invoking two delegates per instance and can throw if there are duplicates (which isn't an issue when reading from a dictionary, but in that case, why bother with `ToDictionary` ?"""
7397,211366387,b'1024'
7397,211972041,"b""[`Slice.From(context.Allocator, buffer, ByteStringType.Immutable, out var slice);`](https://github.com/ravendb/ravendb/pull/7397/files/1ab8eb87a068abb6e93c176b114e45468a6c1b1b#diff-d9907d27cc6f398f4ccad4f9d7d9823bR62)\r\n\r\nAs I understand it, only the TransactionOperationContext hold the Allocator that I need to create Slice. \r\nI can create it by myself but in this case, I will need to dispose it.\r\nFor that, I need to bring the allocator from the outside, the reader in this case,\r\nand release the memory after the replay is done (or after the command execute).\r\nIt seems to me very messy to hold two objects (context & allocator) than handle memory in the reader.\r\nThe other option I can think about is to hold an allocator in the JsonOperationContext but this is a huge change to the system. Maybe lazy allocator?\r\nOr there is something I didn't think about..."""
7397,211998480,"b'No, that is fine.'"
7397,212181012,"b'As I understand it, the request is executed while the file stream is uploaded.\r\nSo, if the OperationId will be passed at the end of the request the client will not be able to monitor the operation that can take a lot of time.'"
7397,212200892,"b'You talk about the tuple properties, right?'"
7397,212201820,"b'`(PatchRequest Run, BlittableJsonReaderObject Args)`\r\nYes'"
7397,212206112,"b""In memory LazyStringValue doesn't have escape characters.\r\nMaybe I will change the comment?\r\n\r\n> The LowerId created as in memory LazyStringValue that <b> doesn't have escape characters </b>\r\nso EscapePositions set to empty to avoid reference to escape bytes (after string bytes) while serializing"""
7397,212207754,"b'change the comment, yes'"
7397,212218273,b'done'
7397,212218311,b'done'
7397,212218338,b'done'
7397,212218364,b'done'
7397,212218386,b'done'
7397,212218412,b'done'
7397,212218453,b'done'
7397,212218480,b'done'
7397,212218515,b'done'
7397,212218534,b'done'
7397,212218561,b'done'
7397,212218592,b'done'
7397,212218672,b'done'
7397,212218758,b'done'
7397,212218818,b'done'
7397,212218871,b'done'
7397,212218896,b'done'
7397,212218918,b'done'
7397,212218950,b'done'
7397,212219131,b'done'
7397,212219158,b'done'
7397,212219196,b'done'
7397,212219269,b'done'
7397,212219386,b'done'
7397,212219409,b'done'
7397,212223090,b'witch '
7397,212223244,b'witch '
7397,212223279,b'witch '
7397,212223370,b'witch '
7397,212223749,b'Why?'
7397,212223900,b'Why?'
7397,212823739,b'I choose to move the ownership of the record stream to the TxMerger and create the file while the start record request so the error will be arrived from there.\r\nAs I implemented it now the record will overwrite the existing file.\r\nI can think about three ways to handle it:\r\n1. To overwrite\r\n2. To return error\r\n3. To add an extension (maybe current time) that differentiate it from the existing'
7397,212824222,b'done'
7397,212824321,b'done'
7397,212824462,b'Just for compiling\r\n'
7397,212824466,b'Just for compiling'
7397,212824572,"b'We need to actually implement these, no?'"
7397,212869263,b'done'
7397,212869409,b'For compiling only'
7397,212869416,b'For compiling only'
7397,212869603,b'Avoiding what? Linq?'
7397,212903243,b'done'
7397,212903834,"b'Okay, so that was the first pass, then you are going to impl these?'"
7397,212950751,"b""It's better to move the throws to seperate functions"""
7397,212964128,"b'Maybe we could consider reducing allocations here, by using LazyStringValue, that is being fed by Convert.ToBase64CharArray'"
7397,212965176,"b'We could use an Array here and call Array.Copy, rather than using list'"
7397,212975085,"b'@haludi I think @ppekrol was referencing the creationg of IncomingReplicationHandler, which is pretty heavy object, that does a lot of stuff under the hood. I think that at this stage it will be a bit hard to get rid of it, because of the none trivial code in MergedDocumentReplicationCommand.Execute. But yes, it looks like a big TODO'"
7397,213236014,b'https://github.com/ravendb/ravendb/pull/7397#discussion_r212181012'
7397,213236078,b'done'
7397,213236130,b'done'
7397,213236180,b'done'
7397,213236224,b'done'
7397,213236297,b'done'
7397,213236419,b'done'
7397,213922197,b'Issue created\r\n[RavenDB-11852](http://issues.hibernatingrhinos.com/issue/RavenDB-11852)'
7397,213922332,b'Issue created\r\n[RavenDB-11852](http://issues.hibernatingrhinos.com/issue/RavenDB-11852)'
7397,213922898,b'Issue created\r\n[RavenDB-11852](http://issues.hibernatingrhinos.com/issue/RavenDB-11852)'
7397,213923439,b'[RavenDB-11751](http://issues.hibernatingrhinos.com/issue/RavenDB-11751)'
7397,213923529,b'Issue created\r\n[RavenDB-11852](http://issues.hibernatingrhinos.com/issue/RavenDB-11852)'
7397,213938982,b'An issue created\r\n[RavenDB-11857](http://issues.hibernatingrhinos.com/issue/RavenDB-11857)'
7397,213939940,"b""I move the check to a base class and I think now it's better.\r\nWhat do you think?"""
7397,213940216,b'An issue created\r\n[RavenDB-11852](http://issues.hibernatingrhinos.com/issue/RavenDB-11852)'
7397,213940265,b'done'
7483,213843074,"b""Can't this be null here? (`OwnValue that doesn't `existInObject` ?)"""
7483,213942419,b'yes it can'
7493,213974735,"b""Isn't the indexContext going to be disposed soon? Can the lazy be evaluated _after_ the context has been disposed?"""
7493,213975257,b'What happens if we have a hash collision from _another_ batch on unrelated doc?'
7493,213979093,"b""No, `indexContext` will be disposed at the end of the batch:\r\nhttps://github.com/ravendb/ravendb/blob/83a41c8341566392a6ff02063018bb0589129f37/src/Raven.Server/Documents/Indexes/Index.cs#L1416\r\n\r\nThe sequence of actions is: \r\n- index writer commit\r\n- transaction commit\r\n- dispose contex\r\n\r\nWe're sure that lazy is evaluated always _before_ the context disposal"""
7493,213980275,"b""If we have hash collision then we're guaranteed that map results will be put into _the same_ reduce tree. Here we output docs per reduce tree so we're good.\r\n\r\nAnother batch of docs with collision would end up into putting them to the same reduce tree - we always output _all_ documents from a given reduce tree"""
7489,214550571,"b'Maybe we should limit this one to max of ProcessorInfo.ProcessorCount, so max task will allow to be less than that value, but not more than this one'"
7486,214550991,b'Maybe we could sort those first'
7486,214604055,b'Why does it matter?'
7530,214752081,"b""This is ugly, let's introduce an actual struct/class for this"""
7530,214752190,b'This is a _big_ change!\r\n@redknightlois Can you also comment on this?'
7530,214752219,"b""I'm pretty sure that this isn't thread safe."""
7530,214752265,"b'Note that the state here is all completely static. Better to create a dedicated class that would do the cleanup than change these to structs, I think'"
7530,214752864,b'This will kill the performance of the allocator.'
7539,215003849,b'Did this mean that we were updating _all_ the counters for all the previous documents on each operation?'
7539,215004315,b'This should go to `SingleRun.Reset` probably?'
7539,215033817,b'Yes'
7542,215441927,b'what about the `PrivateClean` memory here?'
7542,215442296,"b""I don't like the name, better to call it `TotalClean`, as that is what it seems to be doing."""
7550,215292667,"b'Maybe should not read from the table if there is metadata on the document?\r\nThe problem has been rise because there was no metadata in the document.\r\nBut if there is, we can avoid reading from the counter table and rely on the metadata on the document like before'"
7550,215441097,"b""We can't assume that the metadata value is correct, so we have to read from the table anyway"""
7550,215441220,"b'When reading from the table, yes, you can rely on it being sorted based on the index you are scanning'"
7550,215500044,b'https://github.com/ravendb/ravendb/pull/7550#discussion_r215441220'
7538,214948097,b'@redknightlois Can you suggest what change is required in `LogMinBlockSize`?'
7538,214973133,"b'The calculation is Log(2, 4*1024) ... those are the actual potential buckets you could have given the minimum block size in bytes we are defining. '"
7538,214973607,"b'No biggy here, we are reserving less (which is essentially what I am doing on the new allocators). '"
7538,214975004,"b'This is the actual issue, we are not resetting the pointers. I wouldnt perform both changes simultaneously (fix + size change) because you can be impacting performance hard... Fix the issue where you reset the actual pointers, check if the problem continue to be repro and if that is the case then perform the size change. '"
7538,214976296,b'`_currentlyAllocated` only track whole segments (which are the only actual memory allocated from the OS). The only place where `_currentlyAllocated` should count is there. To me this is not the case. '
7538,214984883,b'We cannot reset pointers since we have places where we want to keep pointers until a call to Reset().\r\nFor example [here](https://github.com/ravendb/ravendb/blob/v4.1/src/Voron/Data/Tables/TableSchema.cs#L366) - we want to keep the Slice alive until the transaction commits (and the context is reset when it is returned to the pool)'
7538,214999695,"b'But this is under `Reset`, therefore after that the memory is not guaranteed to exist.'"
7538,215003416,"b'Okay, so we should change it to 12'"
7538,215003606,"b'Yes, but the problem is that callers have allocated memory and did _not_ give it back.\r\nWe have to reset the state of the allocator back to the original'"
7538,215026120,b'As I see it we are using this value only for debugging.. But even so `AllocateWholeSegment` calls `AllocateSegment(size)` so it is an actual allocation.'
7538,215035286,b'What I mean is that the only place where `_currentlyAllocated` must be updated is right after we allocate on `AllocateSegment(size)` when it hits the actual allocator... '
7548,215253756,b'wrap those two lines into a method and use this in both places. You will avoid a situation where someone will change the initial creation of the executor and forget about the event.'
7548,215253842,b'wrap this into a method and use this in both places. You will avoid a situation where someone will change the initial creation of the executor and forget about the event.'
7548,215261424,b'Yes ok'
7548,215261460,b'OK\r\n'
7560,216148400,"b'Need to also use `Port` here, if not the default one'"
7560,216150274,"b""The 'Host' in HttpContext.Request already contains that."""
7563,216253950,"b""At the time of processing the deletion we don't know where a document was inserted. It could be inserted into one table, it could be split and inserted into multiple tables (e.g. order and order lines) etc. So we delete if from all tables.\r\n\r\nNote that `_tables` is modified only here and during `loadTo<Table>()` call. So if you process only deletion this is collection is empty and we always filter it out - that's why tests failed for this PR.\r\n\r\nThe issue is that we shouldn't iterate over `_config.SqlTables` (that are global for all scripts) but _only_ over tables that are specific per script. \r\n\r\n"""
7574,216565465,"b""Can't we stay with internal?"""
7574,216565526,b'can be removed?'
7574,216565708,b'rename to LegacyFileNameRegex?'
7574,216567225,b'this applies to our current backups as well (but should be very rare)\r\n\r\n2018-01-01-13-01-1.ravendb-incremental-backup\r\n2018-01-01-13-01-2.ravendb-incremental-backup'
7574,216567424,b'ok'
7574,216567923,b'done'
7574,216568037,"b'no, need to access it from RestoreUtils (Raven.Server)'"
7574,216568111,b'Internals are visible to Raven.Server'
7574,216569649,b'done'
7577,216566470,b'Same fix needs to be applied to `/databases/*/metrics/bytes` '
7577,216571541,b'done'
7572,216792098,b'I think we better just throw here a more significant exception'
7572,216794287,b'We do not want to throw here'
7572,216794420,b'Session is only used to generate IndexQuery'
7590,217107886,"b'@ayende if task had a name (`TaskId != 0`), do we want to regenerate it if on update `null` will be send or throw?'"
7590,217269307,"b'The question here is, why not use the _old_ name? '"
7590,217284571,"b""We can do that if 'name' is null. @ml054 can you apply that?"""
7590,217315573,"b""I've applied that same logic we had here as in UpdateExternalReplicationCommand"""
7591,217100165,"b""Let's extract this to a method. Write comments describing what each argument is.\r\n\r\n8? sizeof(long) ?"""
7591,217404126,b'done'
7598,217530334,b'Why this change? '
7598,217530886,b'what about map /reduce indexes?'
7598,217530945,b'JS indexes?'
7598,217533537,b'Just to be clear what default analyzer actually is. All places that call `CreateAnalyzer` are creating instance of `LowerCaseKeywordAnalyzer`'
7598,217534190,"b""MapReduceIndexDefinition inherits from MapIndexDefinition so it is fine.\r\n\r\nJS indexes do not support 'CreateField' at all """
7598,217539826,"b""But we may want to change that in the future, and I don't see what benefit the lowered type gives us here?"""
7598,217540043,"b'You can certainly do dynamic fields in JS, see:\r\n\r\n```\r\n @""map(\'Users\', function (u){\r\n                                    return {\r\n                                        Name: u.Name,\r\n                                        _: {$value: u.Name, $name:\'AnalyzedName\', $options:{index: true, store: true}}\r\n                                    };\r\n                                })"",\r\n```'"
7598,217540829,b'fixed'
7598,217541200,b'I will check that tomorrow'
7598,217549915,b'Done. Changed syntax a bit to cover more options.'
7598,217550327,"b""'storage' supports both:\r\n- true/false\r\n- 'Yes' / 'No'"""
7598,217556541,"b""isn't this a breaking change?\r\nThis is experimental feature, though."""
7598,217558111,b'This was my thinking. We can support both if needed but I do not think that this is a good idea in this case. Can you make a call here? '
7598,217558838,"b""It's fine to make this change, yes"""
7605,217721632,b'Error **in** a notification center timer'
7495,217906938,"b""I'm not really happy with this. This doesn't match the default behavior of Json.Net and I don't think it is required."""
7495,217907342,"b""I don't understand this comment"""
7495,217907345,"b""I don't understand this comment\r\n\r\n"""
7495,217907366,"b'This can throw NRE, no?'"
7495,217907373,b'`value` can be null here'
7495,217907565,b'use named arguments here'
7495,217907567,b'use named arguments here'
7495,217907727,b'can change to readonly field\r\n`public readonly JsonOperationContext Context`'
7495,217907824,b'Use regular foreach here.'
7495,217907876,"b""Do we want this endpoint to be synchronous? Or return 'OperationId' ? It looks like it could be async with OperationId?"""
7495,217907978,b'PUT/POST/etc need to return `NoContent` if they are not returning anything.\r\n\r\nUse `NoContent` or `NoContentStatus` methods for this.'
7495,217907982,b'PUT/POST/etc need to return `NoContent` if they are not returning anything.\r\n\r\nUse `NoContent` or `NoContentStatus` methods for this.'
7495,217908127,"b'Those converters can be moved to Server.Json.Converters, I think?'"
7495,217908196,"b""You can't make this aysnc, the file is still being streamed upward to the server"""
7495,217908235,b'True'
7617,218198156,b'@aviviadi I want to double check this change. Can you confirm?'
7619,218065496,"b""You can't do a `while(true)` """
7619,218065647,b'Can we do less than that? Maybe compensate with increasing the number of retries'
7619,218077517,"b""I'll write `static int RetriesOrThrow()` for both cifs retries and EINTR w/wo timeouts"""
7619,218077645,"b'Thread.Sleep(10 * (cifsRetry ^ 3)); // wait upto 3 time in intervals of : 10mSec, 80mSec, 270mSec '"
7619,218448042,b'ok'
7620,219306980,b'What about `EINTR`?'
7495,220071238,"b'Can you be more specific\r\nAre You not happy with that I get ""non-public field with JsonPropertyAttribute"" out from the filtering\r\nor you don\'t like filtering ""non-public field""?'"
7495,220083567,"b'> This ""skip"" is for performance only and it is done to prevent movement inside field\\property that will remain blittable in the result deserialized object\r\n\r\nIs it better?'"
7495,220086988,b'https://github.com/ravendb/ravendb/pull/7495#discussion_r220083567'
7495,220090635,b'There are checks in the base class so `reader` & `reader.Value` are checked at this point'
7495,220101229,"b""As I saw Newtonsoft.Json handle null by himself and doesn't  send it to converters"""
7495,220443644,b'done'
7495,220443819,b'done'
7495,220443841,b'done'
7495,220443852,b'done'
7495,220443879,b'done'
7495,220443904,b'done'
7495,220443921,b'done'
7495,220443939,b'done'
7495,220443961,b'done'
7495,220443986,b'done'
7495,220444009,b'done'
7495,220444036,b'done'
7617,220467159,"b'Let us put it this way:\r\n1. ""workingSet"" in windows and ""RSS"" in linux are different things\r\n2. Giving a single ""workingSet"" value which is roughly equal across the different platforms demands calculations which will give us ""something"" close to the real value (we often assume Raven is the only process running for those calculations)\r\n3. And the big question: DO WE NEED to read and show ""Working Set"" or ""Rss"" ?? (my answer is : defiantly no! We don\'t do with this value nothing and shouldn\'t, and also it is not a neccesarry debugging value)'"
7620,220474234,b'EINTR is being handled here : https://github.com/ravendb/ravendb/pull/7620/files/1cb4e93e1d54b066253835b1bb6f1c6344f43b6a#diff-88eebaae7a92649e943992aa772ff384R323'
7620,220524323,b'OK'
7617,220527620,"b""Agree, this is too complex for an informative only value, let's drop it."""
7630,219170384,"b'This will put all temporary files in the same dir as data, won\'t it? Maybe we can change it to:\r\n\r\n`Path.Combine(indexPath.FullPath, ""Temp"")`'"
7630,219309982,"b""I think it is better to append 'Temp' if you want to use Indexing.StoragePath to avoid putting files in the same dir?"""
7644,220818680,b'Wow! This is awesome.'
7587,216998428,"b""Not sure if this is possible, but maybe it would be better to introduce some kind dedicated context that would wrap the original HttpContext and this new context (if traffic watch is enabled) would 'record' the original body for the traffic watch. Thoughts?"""
7587,217010545,"b""It is better to do this at the `_router` level. Where we'll have an indication on the action itself if we want to record its contents."""
7587,217010645,"b'Actually, would be better if we could just add the data to log directly to the context directly.'"
7587,217010731,b'What is this `7` here?'
7587,217010781,b'What is this 65?'
7587,217011000,"b'We want to do this from the handler, not here. \r\nThe handler gets to decide what goes on in here.'"
7587,217041032,b'done'
7587,217041075,b'done'
7587,217103111,b'We need to watch everything. Not only those three.'
7587,217104965,b'try to wrap this inside dedicated httpcontext that will handle all of this additional stuff'
7587,217105087,b'need to register this for disposal\r\nhttpContext.Response.RegisterForDisposal'
7587,217105513,b'needs to be disposed'
7587,217105556,b'needs to be disposed'
7587,217106753,b'why we have those two cases?\r\n\r\nI think you should use: RequestBodyStream() method in both cases?'
7587,217125956,"b'all urls are currently watched, those three actions currently are returning content to the customInfo field'"
7587,217128428,"b'Yes, but we should not limit ourselfs. If there is a body and we have a traffic-watch turned on, then we should track the body and show it in the UI'"
7587,217269759,"b""@ppekrol I'm not sure that we want to just get the body of all requests in this manner.\r\nIn particular, `bulk_docs` and `BulkInsert` are two scenarios that we don't want to capture in this way.\r\nToo many details that would overwhelm the user."""
7587,217270200,"b""Body can be very large, and we don't usually want to show the raw data.\r\nFor queries / patch is pretty much the only case.\r\nbulk_docs isn't, we don't want the full docs there.\r\n"""
7587,217270289,"b""I don't like this approach. Better to pass a flag to the actions and have them construct their own custom data, instead."""
7587,217283866,"b'For bulk insert I agree, was thinking that the responsibility should be inverted, we could list the endpoints that we do not want to process in this way.\r\n\r\nAnyway, I think that allowing endpoints to inject the customData is a better approach.'"
7587,217912827,"b'What is this ? `/*""Counter:\\n""+ */`'"
7587,217912839,"b'Can just call `countersBlittable.ToString()` here, no?'"
7587,217912849,b'Please create a method that would accept a string only and set this internally. Avoid having the string constant repeated'
7587,217912856,b'Same'
7587,217912874,b'Use `StringBuilder` here and set it once'
7587,217912887,b'This will _not_ generate good output.'
7587,217913358,b'This is the output generated\r\n\r\n![image](https://user-images.githubusercontent.com/16625387/45596676-41014480-b9c8-11e8-9c69-0a3f20bfe280.png)\r\n'
7587,217913362,b'done'
7587,217913509,"b'How, `QueryParameters` should just return the type name'"
7587,217913743,"b'I can create a method which accepts a string as argument, in each class that we are taking the customInfo from.\r\nOr I can create a method inside the trafficWatchManager and pass the httpContext with string to it.'"
7587,217913807,"b'All the handlers inherit from a common base, put that there.'"
7587,217913824,"b'I didnt know if raw data is needed, or formatted with a title, like this:\r\nQuery:\r\n.....\r\nParameters:\r\n.....\r\n\r\nSo i kept it commented.\r\n\r\nThere are few places that I can use HttpContext.Items[""TrafficWatch""] = String / .toString()\r\ndirectly.'"
7587,217914167,b'done'
7587,217917968,b'Do not initialize SB if `HasRegisteredClients` is false. This will avoid doing unnecessary work.'
7587,217918009,b'`\\n` -> `Environment.NewLine` ?'
7587,217955402,b'Use `AppendLine` here.'
7587,217965695,b'done'
7587,217965750,"b'done, I used an AppendLine()'"
7587,217965766,b'done\r\n'
7587,218069390,"b'Probably need to handle `Offset` here, just to be safe'"
7587,218069432,b'Move this to a separate method'
7587,218069612,"b""Let's NOT use json as the format here. You are not escaping the output.\r\nJust write this in human readable form."""
7587,218069905,"b'Check `sb != null` instead, to avoid concurrency issues.'"
7587,218090223,b'done'
7587,218090277,b'done'
7587,218090386,b'done'
7587,219110926,"b""Let's have a single property here, and use a tuple, instead."""
7587,219111429,b'Why are you watching only patches?'
7587,219117130,"b' I am already iterating through this array so I could log the documents that are added via this function (Task BulkDocs()),'"
7587,219118705,"b'Yes, the idea is that you would write `PUT users/1`, `DEL users/2`, etc for each of the commands in this case'"
7587,219121424,"b'I made it in this pattern:\r\n\r\n```\r\nPUT    employees/1972-A\r\nDELETE    employees/1963-A\r\nPATCH    employees/15-A    this.FirstName = args.val_14;    {""val_14"":""Robert33""}\r\n```'"
7587,219305334,"b'@garayx This looks fine now, yes.\r\nJust make sure that this aligns nicely in the studio'"
7587,219589459,"b'oops, changed this already.'"
7587,219602805,b'can we reverse logic to avoid if (something === false) { doFirst() } else { doSecond} ?)\r\nInstead we can do: if (something) { doSecond() } else { doFirst}'
7587,219602865,b'remove double spaces before void'
7587,219603077,b'I think we already have formatters for this - no need to introduce new one '
7587,219603454,"b""we usually don't alias items in foreach loops - please use foreach: filteredTypeData"""
7587,219603619,"b""don't bind on click here - subscribe to observable instead."""
7587,219603698,b'please use prefix which is more unique'
7587,219604491,"b""it isn't columns list container for sure - you should use markup for standard dropdown ? """
7587,219693780,"b""This doesn't do what I expect you think it does.\r\nIt also not a good idea, because these are all mutually exclusive."""
7587,220081057,b'done'
7587,220081078,b'done'
7587,220100982,b'done'
7587,220101044,b'done'
7587,220559911,"b""I think it isn't indexes selector ;-)"""
7587,220560446,"b'why this logic is here? maybe if format time span gets 0 as value it should return string ""0 ms""?'"
7587,220560652,b'same here'
7587,220848785,"b'Reminder, TBD'"
7587,220848978,b'This is great'
7587,220890071,b'done'
7587,220894750,"b""Shouldn't we do it only  `if (TrafficWatchManager.HasRegisteredClients)` ?"""
7587,220895130,"b'Yes, good point.'"
7587,220895954,b'i think it should be if(method == HttpMethod.Get.Method && sb != null)\r\nbecause sb is initiated only if TrafficWatchManager.HasRegisteredClients'
7587,220898805,b'This will work too. Minor improvement could be to rename `sb` variable to something more meaningful'
7587,220899894,b'done'
7641,220796370,"b""No need, but can use MaxByteCount, which is cheaper and avoid traversing the whole string.\r\nWe don't need an exact count here."""
7641,221188842,b'done'
7659,221458225,"b'This is not valid. Multiple threads may call this, so you cannot use a single static buffer.'"
7659,221458239,b'This _must_ be in a local varaible or temp field. \r\n'
7659,221458322,"b""If the `GetAllocatedSizeFun` isn't set, return `totalMapped`, not `0`"""
7659,221458332,b'why are you using lazy here?'
7659,221458360,b'This comment is misleading'
7659,221458376,b'Why? We can get _this_ information from the pager state.'
7659,221681365,b'There is a single instance of MachineResourcesNotificationSender'
7659,221681473,b'The pager state contains the file size'
7659,221844321,"b""And it is thread safe?\r\nDoesn't matter what the case is right now, though, because we don't want to leave a trap here for the future."""
7659,221844374,b'So why return 0?'
7659,221914791,b'done'
7659,221914800,b'done'
7659,221914812,b'done'
7659,221914863,b'There could be multiple mappings for the same file. (increasing the file size or running in 32-bit)'
7659,221914875,b'done'
7659,221914881,b'done'
7664,221452422,"b'Can we avoid putting if in common class? It is better to customize this in target class instead of common class. I think we should put this logic in importDatabaseFromFile + importDatabaseFromCsv. See https://github.com/ravendb/ravendb/blob/0b46405e609328bcff6629479a4a1e580e806f46/src/Raven.Studio/typescript/commands/commandBase.ts#L135 and https://github.com/ravendb/ravendb/blob/4c56afcd420d952ea8d87398cb26e9ba96c84528/src/Raven.Studio/typescript/commands/database/documents/attachments/uploadAttachmentCommand.ts#L30 \r\n\r\nPlease also make sure that attachment progess is still working fine. \r\n\r\nAfter changes ""UploadProgress"" event should not be needed. '"
7664,221915500,b'done'
7662,221458080,"b""Shouldn't the logic here be reversed?"""
7662,221458096,"b'Okay, the code is correct, but _really_ confusing. \r\nWhy do you need it here if this is empty all the time?'"
7662,221515064,"b""rename to 'SkipIndexes'"""
7662,221925664,b'done'
7662,221926240,b'done'
7657,221458169,"b'There is not need to include the `Message` here, it is already in the exception'"
7657,221458200,"b""Need to check that `ActiveCores` isn't zero either"""
7657,221919678,b'done'
7675,221932597,b'use DirectoryInfo instead'
7675,221932633,b'use Path.Combine'
7675,221932776,b'If you will use DirectoryInfo then DirectoryInfo.Name should be what you want IIRC'
7675,221939059,"b'I\'ve meant that after creating a full path you can do:\r\n1. `var targetDirectory = new DirectoryInfo(fullPath)`\r\n2. `if (targetDirectory.Name == ""System"")` -> you cannot assume that `\\` is a valid separator on every platform\r\n3. `if (Path.Combine(targetDirectory.FullName, Voron.Constants.DatabaseFilename))`\r\n4. `if (Directory.Exists(targetDirectory.FullName, ""Journals""))`'"
7625,219114344,"b""Won't this cause a LOT of allocations now? Can we avoid the allocations?"""
7625,219115005,"b""Isn't this really eager operation?"""
7625,219116387,b'`Array.Clear` ?'
7625,219116480,b'Why do it one item at a time? '
7625,219200527,"b'Nope, this happens only once. And also now those arrays are not going to be bigger than 1K elements or so. '"
7625,219201017,"b'From the call chain, there is really no reason why to delay that. At that point the call-stack is already in control of the pager, so noone is gonna change that either way. '"
7625,219201344,"b'Yes. Cause it is untyped I forgot about it. I was writing that thinking, there is no zero memory for arrays?'"
7625,219201913,"b""Because that is only used for the case of acquiring a pointer, so there is no 'context' beyond someone else has asked for this one before too. """
7625,219203747,"b'If you ask me, I am more worried about the `MaybePrefetchPagesReferencedBy` allocations than this ones. '"
7625,219310982,"b'Why once? This happens every time you `Seek`, which we do a lot.'"
7625,219317367,"b'You are right. That is exactly the one I was worried about. I was under the impression you were talking about the initialization one. I was toying with the idea of using a struct iterator over a generic interface. It will avoid the allocation, completely thread safe and also generate the most efficient code when used. What do you think?'"
7625,219693747,"b""Wouldn't a simple buffer pool be enough here?"""
7625,222214369,"b'Can you change `Storage.IOPrefetchBatchSize` to `Storage.IOPrefetchBatchSizeInKb` ? The property name should stay as is, but the configuration entry needs to include the units.'"
7625,222214494,"b'Can you change `Storage.IOPrefetchResetThreshold` to `Storage.IOPrefetchResetThresholdInGb` ? The property name should stay as is, but the configuration entry needs to include the units.'"
7625,222272194,"b""Why can't we prefetch on temporary files?"""
7625,222328096,"b""I was a bit confused myself for a while. So let me try to explain. It is not that we cannot prefetch on temporary files, we cannot prefetchAhead which is an entirely different thing; the standard usage prefetch works on temporary files too. \r\n\r\nThe underlying problem is that we don't have a unified view of the 'page translation' at all moments. \r\n\r\nSo whenever we have a page number it may happen that:\r\n- It is in the proper location on the data file (we can prefetch ahead those)\r\n- It has been modified and written to the journal. \r\n- It is in the scratchpad (that is hot anyway)\r\n\r\nPrefetching ahead assumes that the page number corresponds directly on a memory position, and that is why you prefetch, therefore no translation has to be done. If we would like to prefetch ahead, we need to know exactly where the pages are stored (which probably is not contiguously anyways). To make it work we must do the page translation but that information is not available at the time we want to do the prefetch. \r\n\r\nSo, in essence, to prefetch ahead from a Journal is not such a good idea in general because it assumes that the data layout is already optimized. So instead of trying to page translate every entry in the tree, we just let the dynamic prefetching to take care of it and ignore any prefetch ahead request happening to end into a temporary map file."""
7625,222332552,"b'Moreover, the usage pattern of the prefetch ahead is especially useful when we are just starting. Which also has the side effect to disabling itself by design when the database has moved into a high frequency write mode.  '"
7625,222396157,"b'Okay, make sense.'"
7625,222426657,b'Bad comment here.'
7625,222427424,b'This greatly simplify things.'
7625,222428097,b'Bad comment'
7625,222430080,"b'Need to also go over the  next segment as well, to make sure that we are not going backward.'"
7625,222430360,"b""This isn't thread safe."""
7625,222431901,"b'We are not, forgot about that one... in a sec'"
7683,222423990,"b""Is this correct? It looks like we'll miss out on the things that are updated, no? Like the replication stats?"""
7683,222424310,"b""Better to avoid this allocation (should be false most of the time when we are active) and only allocate if we indeed get a no chance notification.\r\nFor that matter, since we are single threaded, we can just have a separate list of the modified values that we'll then set after the `foreach`"""
7683,222448527,b'Fixed.'
7683,222450722,b'Fixed.'
7683,222469024,b'@karmeli87 Need to see if the caller code can handle the case where we get the unchanged directly.\r\n'
7249,207730868,"b""I'm trying to follow the logic here, you add the key of the clause which I assume is the alias and the document data but the Match.Set will add this to a dictionary and this is done per Query result so i think Match.Set will throw if you add two documents to the same alias (I didn't run the code)"""
7249,207731014,"b""I'm not sure which GraphQueryRunner.cs is the right one but the other should probably be removed or renamed if it something else (this seems to be the working version)"""
7249,207731104,"b""I'm pretty sure this will throw if the query return more than one result"""
7249,207731602,b'TODO: need to handle With Edges'
7249,207731617,b'This is not used'
7249,207731690,b'I think that this class is entitled to its own file'
7692,222912320,b'can we avoid opening 2 server-store transactions by adding ctx argument to this method and moving it next to `WaitForExecutionOnSpecificNode` ?'
7692,222914602,b'Done'
7692,222992950,b'Why is this an instance method that also create a new _instance_ for this?\r\nWhat does this give us?'
7692,222993172,"b'Same thing here, actually. We are creating new instances from an instance method, which seems strange.'"
7690,222996236,b'This can be simply `PageModifiedInReduceTree?.Invoke(page)` with the same exact behavior'
7690,223003053,"b""Right. Initially I did it the old way, then applied r# suggestion but didn't remove the local var. I'll change it."""
7691,222993984,b'What happened to the `AssertClientVersion` ?'
7691,222994549,b'Probably a bad idea. We need to create a new instance with the inner exception set.'
7691,223002468,"b""In the 'catch' part"""
7691,223201716,b'done.'
7711,223379063,b'You have to at least log this.'
7711,223428211,"b'Any exception within the observer loop will be caught and logged inside the loop itself.\r\nIf we catch anything here, it probably means logging error or some race on the cancellation token. '"
7711,223639085,"b""This is the case right now, but it might not be there in the future. We don't try to protect ourselves from logging errors, note."""
7713,223633942,"b'That said, can we avoid the `Thread.Sleep` (will take 0.51 seconds here) in favor of passing the date directly?'"
7713,223641103,"b""I don't want to expose a parameter allowing to pass the date. Reduced the extra time to 10 ms: https://github.com/ravendb/ravendb/pull/7713/commits/c1a442ffc97591b6012e964dd1edc915281f97ac"""
7713,223643609,"b""That's fine, let's get this merged."""
7715,223731249,b'Is this always going to be a string here?'
7715,223732254,"b""Something should go very wrong if this isn't the case."""
7715,223732339,"b'Yes, this is from:\r\n```\r\npublic Dictionary<string, DeletionInProgressStatus> DeletionInProgress;\r\n```'"
7715,223733827,b'@karmeli87 \r\n\r\n```\r\nobj[prop]?.ToString()\r\n```\r\n\r\nMaybe just in case change to that?'
7708,223374325,b'why?'
7708,223384960,b'This is not used anywhere?'
7708,223402788,b'This will be used when the studio part will be implemented'
7708,223403249,b'need initial values for _threadTimesInfo'
7708,223639380,"b""Isn't there a better way to do that rather than force a sleep?"""
7708,223789729,b'done'
7712,224008658,b'It looks like SmugglerBetweenOperations does not require the ExportBulkInsert in any of the cases now. It can be removed from arguments?'
7712,224036022,b'No reason for it to be there I think.'
7712,224036160,b'Will change that before the actual PR'
7720,224009598,b'SystemTime.UtcNow'
7720,224009864,b'SystemTime.UtcNow'
7720,224012145,"b'Actually, you need to use cached.MountPoints here and pass it to the DiskUsageCheck to avoid concurrency issues'"
7720,224012316,b'See my comment with concurrency'
7720,224012408,b'see my comment with concurrency'
7720,224012832,b'Passing the DatabaseInfoCache instance should suffice or your case'
7726,224096065,b'switch it to internal'
7726,224096126,b'we can make it internal'
7726,224316725,"b""You aren't actually checking anything in here."""
7726,224334709,b'Fixed'
7310,209167038,"b'This is taking advantage on the fact that we are aware of the access pattern of indexing code, so we can do better here than usually.'"
7310,209167850,b'Why tracking both `_used` and `InUsed` ?'
7310,209169964,"b'This is already done in the `Reset`, why is it here?'"
7310,209170980,"b'Pretty sure that this violates the requirements, no? It need to be reversible'"
7310,209171753,"b'This actually gets the _smallest_ segment you have here, no? This is sorted by `bytesLeft`, and therefor from smallest to largest.'"
7310,209173640,"b""Aren't we going to release these first?"""
7310,209174692,"b""Aren't we concerned with multithreading here?"""
7310,209175648,b'why the cast to int here?'
7310,209175899,"b""I'm not so sure that we should discard these changes in release."""
7310,209176350,"b'Better names `Used`, `Total` ?'"
7310,209178186,"b'This comment and the one on `ReleaseMemoryPool` both mention `NativeAllocator`, so this is confusing.\r\nWhat is the use cases for the pool not owning their memory?'"
7310,209178704,"b""Shouldn't this be `DefaultAcceptArbitrarySize`?"""
7310,209182324,b'How is this different from the `Default`?'
7310,209185593,b'How is multi threading handled in this case?'
7310,209186096,b'Why not just use `ToString`?'
7310,209229216,"b'Yes, but I think we have a better facility now to do so using composition. Lets talk about the underlying issue (so I can have the big picture) and figure out what we need to do so. '"
7310,209229723,"b""Two different metrics. ``InUse`` is how many bytes the allocator has given out during the current cycle. ``_used`` is an internal pointer that tells us how much we have used of the current arena. Probably ``_used`` is obsolete right now, but I haven't started polishing that kind of stuff yet. """
7310,209230041,b'I changed the semantics of ``Reset`` and ``Renew`` to unify criteria. That was the second opinion I needed yesterday.'
7310,209230450,"b""You mean for the ``SortedList<T>``? I don't expect it to be the final solution though, I would prefer to have a different implementation there (HEAP)"""
7310,209230537,"b'Will check, it should be largest. '"
7310,209231123,"b""Composition, the idea is that the pool does not allocate memory, it uses a real allocator to do so. However, given that you can have Self Healing and Leaky allocators, the ownership is about transferring the responsibility. Pools don't need to release explicitly if the allocator is self-healing. """
7310,209231498,"b'Yes, there is a bug in all 3. '"
7310,209231674,"b'It is expected to die when the process dies, no explicit deallocation, therefore no checking for leaks.'"
7310,209231987,b'Underlying allocator must support it. The shell is Thread Safe.'
7310,209251023,"b""I didn't finish the ``IDescribe`` interface yet, for now, it is just a marker. Allocators are composable so there are multiple metrics along the way and each allocator in the chain paints a different picture. We need to be able to gather information along the way in a more structured way. Also ``.ToString()`` is vulnerable to out of band calls via the debugger and inspectors, which may complicate things. I would move away from the ``.ToString()`` mechanism for general inspection altogether and keep it bare essential for identification purposes instead."""
7310,209275861,"b'This is not a thread safety allocator, but probably we should pay the cost here anyways. '"
7310,209276296,"b'Yes, bug. '"
7310,209277340,b'Because Span constructor is not able to handle chunks of memory beyond int.MaxInt'
7310,209278275,"b'Makes sense, better to check than touch memory that is potentially not ours... I originally though it was the Allocator Leaks detection. In this case, you are right. '"
7310,209280549,"b""No, that's fine. For a moment I got confused. Those are actually partial blocks of memory that are big enough to be reused... say you request a 1Mb chuck of fragment memory, now you can either pool 1Mb (What the Pooling allocator does) or you can allow the allocator to slice it up to support smaller sizes (What the fragment allocator does). The difference is that Fragment allocator is tuned for very small, high reuse of memory... while the Pooling allocator may have keep lots of unused memory if still havent met the quota. """
7310,209285864,"b""That's right. Also reflected that there is no test yet that stresses that condition because there was another bug there too. \r\n"""
7310,209286731,"b'Just checked, no invariant is violated; it just works... would be if you would expect a stable sort though (which we dont care).'"
7310,209294390,b'There was an error in the comment. In the standard pool it was right. '
7310,209445390,"b'What _are_ the semantics then, now? This need to be explicitly stated.'"
7310,209445445,"b'`Size` is already int, no? `public readonly int Size;`?'"
7310,209445498,"b'If you are trying to allocate from one thread and release from another, bad things will happen right now.\r\nThis is also the case when you have chains of allocators where some are threaded and some are not.\r\n'"
7310,209445522,"b""`.ToString()` is too convenient to give up on. If the call is self contain and doesn't mutate the internal state (and it shouldn't), that that is what we want to use. """
7310,209445629,"b""What is the scenario where you'll use this?"""
7310,209445813,b'This JIT is now smart enough to move the exception throwing code to a cold location without creating dedicated method?'
7310,209459298,"b'Currently it is like that, I modeled it based on current operation. We can implement underlying thread safe and also thread sharing allocators which would fixed that if we want. The idea of composability is that you can implement behaviors based on the requirements and pay the cost only for those cases. Now the question is: do we need multithread safe allocators for pools and fragments? If that is so, we can implement those too'"
7310,209459372,"b""I haven't killed ToString I don't want it to generate chained information from all allocators in the chain or use it to inspect data. The idea is that the describe will return structured information that can be translated to a json for inspection on higher levels"""
7310,209498759,"b""I'm perfectly fine with stating that allocators being single threaded, but it needs to be stated clearly as such.\r\n"""
7310,209498797,"b'In particular, what allocators _are_ safe for multi threading and can be re-used.'"
7310,209498897,"b'The proper way to handle this is either: Return an _object_, not a string, that can be used for the debug endpoint.\r\nOr: Use `ToString` and call it a day'"
7310,209541508,b'Why do we pass the caller (`_nativeAllocator`) here and when calling `Release()` a few lines up?'
7310,209651770,b'The idea is to return an object. ``string`` is a placeholder at the moment. '
7310,209654614,"b""The semantics are:\r\n``Renew()`` ensures that if possible and supported by the allocator, no memory is going to be released to the underlying allocator. Let's say a pool, a pool unless is faced with memory pressure, it is not going to release the memory to the Arena Allocator or Native Allocator behind it if called ``Renew()`` but it will if called ``Reset``.\r\n\r\n``Reset()`` is a fresh start, let's say that the ArenaAllocator has been running for a long time and now has an arena size (``.Allocated``) of 400Mb. With a Renew it will just move the pointer to zero and go on with its business, with Reset it will go, check the new preferred size given the behavior of the last round and return the memory to the underlying memory system if different. \r\n \r\nThe current behavior of the allocators is confusing, because some behave like this, an others behave differently. What I am trying to do is to have a clear sematic for both operations. Now there is no reason why you would call ``Renew`` and ``Reset`` at the same time as we do in ``JsonContext``"""
7310,209656469,"b""That is a design decision that may or may not have merits, but until I have something working really well I won't revisit. The idea of why allocators go always by reference is because C# does not support static methods on generic types. The problem is that you can create copies of the allocators by mistake, that prevents that and also helps the JIT to figure out some stuff when inlining this kind of code at the caller size ``Allocator<T>``. It's highly probable that we may get away without it, but because of how difficult this code is I preferred to err on the side of safety. """
7310,209657437,"b'Only multi-threaded safe allocators now are:\r\n- NativeAllocator\r\n- ThreadAffinePoolAllocator\r\n\r\nBecause they are underlying allocators, they can be used as shared allocators to thread safe ones providing multithreaded shared pools backends to then thread-unsafe allocators built per context. '"
7310,209723732,"b'We should yes, but I didnt want to change overnight what has been long since day 1. '"
7310,209864672,"b'The problem we have here is that there are two distinct stages to deal with.\r\nA context is checked out, used and returned.\r\nThe problem is what you are expected to do on the return.\r\nYou might want to return the memory back, retain it, etc. \r\n\r\nWe need to play with the lifecycle of the context usage.\r\n\r\nGiven `AllocateContext` and `ReturnContext` in their use in web requests, for example, what will be called on either?'"
7310,209936135,"b'The idea behind a clear cut definition of what each operation do is to avoid the current situation, where each allocator decides how it interprete each one. It is the job of ``AllocateContext`` and ``ReturnContext`` to assess which one they should call based on usage patterns.'"
7731,224465058,"b""Why do we have to extend this to 'TranslateToJs'. The `documentsContext.CloseTransaction();` is not enough in `ExecuteQuery` ?"""
7731,224465215,b'Do we need to apply this to other retried queries? Check where we are using `CreateRetriesFailedException` \r\n'
7731,224496211,"b'Those are two different transaction: one for the compEx access and the other for the document access. We accessed here a blittable who\'se context was disposed (the .CloseTransaction and the TranlateToJS changes are two different fixes to two different problems, that end up ""meeting"" in that scenario)'"
7731,224498203,b'done'
7731,224682647,b'Right. Thanks!'
7731,224983112,b'ExecuteGetTermsQuery is executed by using(context.OpenReadTransaction()){} so on i = 0 the tx is already open therefore it will be used on the first iteration and we cannot close it.'
7704,223265294,b'Rename to `Theory64Bit`'
7704,223265401,b'Rename to: `Fact64Bit`'
7704,223265601,b'Avoid doing that.\r\n\r\nCreate two separate test cases:\r\n1. `ShouldWork32` with `Fact32Bit`\r\n2. `ShouldWork` with `Fact64Bit`'
7704,223265677,b'Avoid doing that. Create a separate method for 32Bit'
7704,223265704,b'Avoid doing that. Create a separate method for 32Bit'
7704,223265723,b'Avoid doing that. Create a separate method for 32Bit'
7704,223278050,b'Is there a reason this will _ever_ be false?'
7704,223278171,b'Or create a `Theory` that has `InlineData32Bits` and `InlineData64Bits`'
7704,223365542,"b'You can create `private void ShouldWorkInternal(int treeKeys, int treeKeysToDel)` to avoid duplication'"
7704,223366180,"b""Let's be consistent. Either go with `<name>32|64` or `<name>32Bit|64Bit` for all attribute names."""
7704,223366565,"b""Is this correct? Shouldn't be the opposite?"""
7704,223366945,b'Opposite?'
7704,223367007,b'Opposite?'
7704,223632512,"b""Why did you need to use `?.` operator in all those places? If tree is compressed then we are guaranteed that `DecompressionsCache` isn't null"""
7704,223632684,b'Probably debug code. Should be removed.'
7704,224345581,b'Use Constants here'
7704,224347585,"b""Not sure that I follow?\r\n\r\nThis is always 'true', I think that you will never increase the value, so you it will always process the same references, all over again."""
7704,224350738,"b'Its always oldEtag = etag on 64bit and on 32bit \r\nbut if the index batch is splitted (because of the 8mb limitation on 32bit) then oldEtag is the last etag of the document which will be indexed next, but if there no check for (oldEtag < etag) then etag just overwrite oldEtag and we miss indexing few documents. However I think I should add a check for DoMoreWork == true boolean.\r\nif(DoMoreWork &&  oldEtag < etag)\r\n'"
7704,224370485,"b""Let's add a comment here"""
7704,224398747,b'Fix here: https://github.com/ravendb/ravendb/pull/7728'
7704,224398836,b'Why this is needed? Looks like a debugging code?'
7704,224458332,b'done'
7704,224469788,b'Does it need to be removed?'
7704,224988412,b'![image](https://user-images.githubusercontent.com/16625387/46915837-341d4400-cfba-11e8-8e5f-f2d97249dbde.png)\r\n\r\nnew Reference used in lambda expression instead (line 134 and 142)'
7704,224990816,"b""I understood that, but why we can't have one instance? When enumerating without a `.ToList()` that you removed it should work as it should. """
7704,224994722,"b'It was debug code, IIRC, and we can change it back, I think'"
7742,225075339,"b""Probably we should use regular 'bool' instead?"""
7742,225076059,b'Maybe we should initialize ServerStore before starting the Kestrel?'
7742,225076762,"b""We can't, because if we bind to port 0, we don't know the real port."""
7741,224988300,b'this is not used'
7741,224988728,b'What is this for?'
7741,225042008,b'This tells to the terminal `set cursor position` \r\nhttp://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x361.html'
7760,225520996,b'This is a breaking change. Better to create an overload here.'
7758,225520311,"b""Am I missing something, or is this a test only analyzer?\r\nShouldn't we be moving this to the server?\r\n"""
7758,225521236,"b'Yes, forgot to move it!'"
7760,225527575,"b'We guarantee source-level compatibility between minors, so it should be OK?'"
7764,225538873,b'What happens if the database disposed _after_ this line?'
7764,225539956,"b'Then it should be OK, since this index was added to the `CollectionOfIndexes` and will be disposed as usual.'"
7732,224465716,b'What happens when `OfType` is used after the Select?'
7732,225086602,"b""I think this implementation works because `AddToFieldsToFetch` is called when we are inside `Select` processing. Although let's add a test for that (to ensure `OfType` used after the `Select` doesn't break anything). Also it might be good idea to skip setting `_ofType` field if  `Select` was already processed"""
7732,225554823,"b""a query with `OfType` after `Select`, like this one:\r\n```\r\nvar query = session.Query<Result, UsersIndex>()\r\n\t.Select(u => u.Friend)  //Friend type is 'User'\r\n\t.OfType<Result>();\r\n```\r\nwill still be processing `OfType` _before_ processing the `Select`.\r\nso the `_ofType` variable would be set before we reach `AddToFieldToFetch`, which seems a bit wrong.. \r\nbut it will only matter if the `Select` is selecting Id, and I'm not sure that this is a valid use-case. thoughts?"""
7732,225559903,b'Do we have any way to figure out if `OfType` was before or after `Select`? We need to use the type specified by `OfType` only if it precedes the projection'
7732,225590271,b'yes we can figure it out'
7761,225521676,b'Needs to be limit here.'
7761,225521968,"b'Why mark it `Obsolete`? You can either specify this in the query or outside, both will work fine.\r\nThe smaller of the values will take affect'"
7761,225522587,"b""If there is a second item there, need to exit here.\r\nOtherwise, you have `limit 10, 2 offset 3`, which doesn't make sense."""
7761,225522827,"b""Isn't this `limit` and then `offset` ?"""
7761,225522891,b'limit'
7761,225522917,b'limit'
7761,225522955,b'limit'
7761,225522986,b'limit'
7761,225523048,b'wrong order'
7761,225523091,b'wrong order'
7761,225523106,b'wrong order'
7761,225526621,"b""Wouldn't it be better to remove it in the future?"""
7761,225526984,"b""I did it because I'm detecting if 'offset' is already set to throw a nice exception to the user"""
7761,225527994,"b'Why, we always want to be able to narrow down the paging without touching the actual query'"
7761,225528149,b'okay'
7761,225529132,"b""This is why I'm using 'query parameters' for paging in `AbstractDocumentQuery.ToString()`"""
7761,225538556,"b""I don't follow?"""
7780,225898970,"b""Maybe let's extract:\r\n```\r\nRootAliasPaths.Count > 0 &&\r\nRootAliasPaths.TryGetValue(split[0], out _) == false\r\n```\r\nto a method and use it in all places that repeat this code\r\n"""
7780,225900925,"b""Does it need to be method of `QueryMetadata` class, it's called only from local `VerifyKnownAliases` function? Can it be local function as well?"""
7780,225900960,"b""Does it need to be method of `QueryMetadata` class, it's called only from local `VerifyKnownAliases` function? Can it be local function as well?"""
7780,225902577,"b'Can we change `""$p""` to `""$""` ? We shouldn\'t assume that parameters will be always defined using `p` letter e.g. this is a valid query that you can issue from the studio:\r\n\r\n```\r\n$company = \'companies/85-A\'\r\n\r\nfrom index \'Orders/Totals\' where Company  = $company    \r\n```\r\n'"
7800,226185365,b'Why did you make this change? This is `ValueTask` for a reason.'
7800,226185595,"b""We don't need the `database`, pass the `RequestHandlerContext` into this method and set the value as appropriate. That would save an allocation"""
7800,226196708,b'done'
7799,226183966,"b'The Esent filename is supposed to be just `Data`, no?'"
7799,226185914,b'![image](https://user-images.githubusercontent.com/1250431/47136128-059db280-d2b3-11e8-9f5e-4b6a90fbeeaa.png)\r\n\r\nI can see data and data.jfm. I used data.jfm as it is has better selectivity then simply *data*. Anyway I can change that if you wish. '
7799,226186294,b'I just saw conversation on youtrack. I will change this to Data or Data.ravenfs'
7799,226188648,b'Fixed'
7799,226205569,b'I think we should throw here when server is on non-Windows?'
7799,226205772,b'This method should also throw for non-Windows server. UI in Studio should be blocked'
7805,226329974,b'No sure if this is always correct assumption. Depending what we decide in http://issues.hibernatingrhinos.com/issue/RavenDB-12122'
7805,226331723,b'According to tests added there we might have the same blittables but with different sizes. I think the issue is only when creating blittables with the usage of `ManualBlittableJsonDocumentBuilder`'
7805,226560447,b'We got some test failures because of that: http://jenkins.hibernatingrhinos.com/job/PR_Tests_v4.1/1830/\r\n\r\nI dropped this condition in https://github.com/ravendb/ravendb/pull/7805/commits/e5c6a27eda19b1a3b0b15378538c6947f4ca646d'
7809,226851580,"b""Let's wrap this in a `try/finally`, to be safe."""
7809,226851600,"b""I know that we are using the aggregator here, but it is possible that other things could throw that aren't expected and it bugs me that the lock may be leaked."""
7809,226852335,b'Done'
7808,226852149,"b""If an exception occurred during `SendToLeaderAsync` it is probably due to network issues / cluster down etc.\r\nMeaning that the command is not committed to the raft log and wouldn't be executed.\r\n\r\nAny later exception will mean that the command is committed but it's execution has failed or wasn't completed in time. """
7808,226852229,b'Note that this will ensure the execution only on this specific node and not on the entire database group. \r\n'
7808,226852440,"b""That's fine. We are only catching TimeoutExeception here. Same flow as it was/is in `CreateIndex`"""
7808,226852470,b'That is enough for us here IMO. Same as in `CreateIndex`.'
7808,226852547,"b'Okay, but if we passed this line then the explanation for `TimeoutExeception` is incorrect, because the cluster is not down :)'"
7808,226852629,b'Oh... that is what you meant. I will fix the exeception. Give me few minutes.'
7808,226853399,b'Done'
7818,226859709,"b'Here I want to get the results of the query visitor, on purpose.\r\nThat give us consistent output regardless.'"
7818,226860039,"b""i'm not sure which object you refer to.\r\nIs this the output you want to see:\r\n{DECLARE function __selectOutputfunction __selectOutput(__alias1, o, p, rvnQueryArgs) { \r\n    return {\r\n    OrderId: id(o),\r\n    Product: p.Name\r\n};\r\n}\r\n\r\n\r\nWITH {\r\n    FROM Orders WHERE id() = 'orders/828-A'\r\n} AS o\r\nWITH {\r\n    FROM Products\r\n} AS p\r\nWITH...\r\n\r\n?"""
7818,226860665,"b'Yes, I want to strip it of as much magic as ossible.'"
7824,226862684,b'I think that this will not take into account the casing (if changed from default) in serializer?'
7824,226862974,"b""And since this is a user's default, we need it to.\r\nWe can copy the serializer customizations, I think?"""
7824,226869196,b'done'
7834,226991685,"b'This should be an async method, , not `RunSync`'"
7841,227244884,"b'Can it happen that `document`  will have `""Result""` (`DummyPropertyName`) property already defined?'"
7841,227245515,"b""I mean, will it work:\r\n\r\n```\r\nselect { o.Lines, Result = o.Company } \r\n```\r\n\r\nand won't cause property name clash ?"""
7835,227068966,"b'last assert should be ` item.u1 == ""Jill"" && item.u2 == ""Jack""`, no?'"
7835,227238879,"b'No, see here for the full explanation: https://ayende.com/blog/184833-B/graphs-in-ravendb-query-results'"
7841,227254667,"b'yes, it\'s possible if `fieldToFetch` is `""Result""`. in this case modifications are redundant, but it will still work. we know that the query projected a single field so `document` shouldn\'t have other properties besides `fieldToFetch` (and `@metadata`)'"
7841,227256257,"b""`select { o.Lines, Result = o.Company } ` won't reach this code, it will go to https://github.com/ravendb/ravendb/blob/ad558af8c2a8f8dbd15ea10bcbdc94610c997b96/src/Raven.Client/Documents/Session/Operations/QueryOperation.cs#L182"""
7841,227256397,"b""OK, thanks for clarification. It might be good idea to add `Debug.Assert` to make sure that's always the case"""
7840,227237875,"b""Any reason we aren't just pumping this directly to the console as the output of `Raven.Debug`?"""
7840,227238003,"b""Need to explain here that we couldn't find `dbghelp.dll` and how to get ti"""
7840,227238028,b'Same'
7840,227275077,"b'Was thinking that there was, because it was done like that in 3.5, but... it works fine. Writing the output to the zip entry now.'"
7840,227275530,"b'It was fixed by us (you) in 3.5. We are taking the DLL from the system dir, and the files comes with the OS so it needs to be there.'"
7844,227324840,b'we want to return SingleAllocationSizeLimit.Value here not `Math.Max` probably?'
7844,227325767,"b'No, this is by design.\r\nThe point here is that if the `requestedSize` is over the single allocation limit, we have to return at least `requestedSize`.\r\nHowever, we need to user power of 2 to avoid fragmenetation'"
7844,227328449,b'We can remove ApplyLimit from here I think?'
7844,227328782,b'Makes sense'
7844,227329257,"b""Don't do any harm, and avoid needing to think why it isn't here.\r\nOkay either way"""
7844,227330598,"b""I'm wondering... maybe it is worth setting 'AvoidOverAllocation' to true on 32-bit?"""
7844,227335716,"b""This isn't a global flag, it is used in specific circumstances, where we know we are done with writing and need the full operation"""
7844,227335742,"b'full buffer, once.'"
7849,227352045,"b""add a note here that when 'AttachmentType' is not send, we need to fallback to default which is 'AttachmentType.Document'"""
7847,227351103,"b""We need to support returning null from 'FindProjectedPropertyNameForIndex' and then fallback to 'FindPropertyNameForIndex' also"""
7847,227364447,b'fixed'
7854,227365193,"b'Given that this kills the indexing thread, this should also be an alert so user can see it.\r\nBetter to also (in memory only) mark the index as errored, so queries will fail'"
7854,227375031,b'Fixed https://github.com/ravendb/ravendb/pull/7854/commits/d64ed16ec215411f09c57eb88cc2ed0bf4298d3c'
7842,227016577,b'Why not simply wrap the whole Query operation in a `try/catch` ?'
7842,227272110,b'done'
7842,227277925,b'Can you push it?'
7842,227345200,"b""why can't we take the message from the catched exception? We do not need the 'errorMessage' variable here."""
7842,227365339,"b'I want to display the Failed query to tracker and trafficwatch, not the exception it throws, also I treat few scenarios here when and log them to trafficwatch and tracker.'"
7842,227378896,b'Please ping me on Slack'
7839,227015035,"b""Here need to indicate that we were able to connect to the remote, and it wasn't able to connect to us"""
7839,227015136,b'where is the error handling on the `Success == false`?'
7839,227233929,b'The `result.Error` already contains this info.'
7839,227233949,b'fixed'
7856,227545741,"b""There is the reduce key, which isn't guaranteed to be unique (fan out)\r\nNote that the `Data.ToString()` isn't unique either."""
7856,227546220,"b""Let's use `Empty` here for both"""
7856,227546722,b'huh?'
7848,227350202,b'And what if this is some other request?'
7848,227350461,b'Are we allowing two concurrent pulls?'
7848,227351727,b'why is this needed?'
7848,227351783,b'Why is this needed?'
7848,227351975,"b""I don't like how often you have `if (isPullReplication)` here"""
7857,227721641,b'we need to shorten all of those. Consult with @topalach '
7850,227356537,"b'Remember that user may also use  junction points, need to verify this for the `Journals` and `Temp` directory as well inside here.'"
7850,227359119,"b""`Temp` is checked below. But `Journals` needs to be checked separately. I'll fix it"""
7850,227359781,"b'`Temp` is checked only if it is specially declared, but you can also setup junction point there too'"
7850,227401296,"b""Just to be sure, does it mean that we need to call `GetDiskFreeSpaceEx`:\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Server/Utils/DiskSpaceChecker.cs#L14\r\nfor `Journals` and `Temp` directories for each environment we have just in case it's a link?"""
7850,227415777,"b""GetDiskFreeSpaceEx doesn't provide the free disk space if it's a link.\r\n\r\nhttp://issues.hibernatingrhinos.com/issue/RavenDB-12010"""
7850,227524471,b'The docs says it does: https://docs.microsoft.com/en-us/windows/desktop/fileio/symbolic-link-effects-on-file-systems-functions#getdiskfreespaceex'
7850,227525507,"b'@arekpalinski And yes, I think we need to check if each of them is a junction.\r\n@grisha-kotler Note that we also need this on Linux'"
7850,227662655,b'`GetDiskFreeSpaceEx` seems to be working as expected - http://issues.hibernatingrhinos.com/issue/RavenDB-12010#focus=streamItem-67-31686-0-0'
7850,227736584,b'Always checking temp and journal dirs as well added in: https://github.com/ravendb/ravendb/pull/7850/commits/a6dcded55dee85d7ca721022304352348ffe3a32\r\n\r\nHandling of symbolic links and proper drive detection then will be done by @grisha-kotler (RavenDB-12010)'
7867,227827883,"b""This shouldn't be here"""
7855,227528591,b'use `nameof`'
7855,227528890,b'Maybe we want it to be configurable per database also? I do not see a reason why not?'
7855,227528959,"b""Drop 'InSec' from the name of the property"""
7855,227529598,b'This looks like a Windows-specific? Do we need this?'
7855,227530120,b'Do we want to pass also other paths here? Not only the base path?'
7855,227530916,"b""I think that this should be moved to next 'if' statement?"""
7855,227531596,b'Maybe using `process.ErrorDataReceived` would be better (needs to be attached before `process.Start()`) ?'
7855,227532722,"b'`_options.BasePath` at least, needs to be quoted'"
7855,227533042,"b'Also, we want to have a _single_ log entry, not multiple of them'"
7855,227533202,"b""This shouldn't be in Voron, this is a RavenDB concept, not a Voron concept"""
7855,227536800,b'For escaping use: https://github.com/ravendb/ravendb/blob/v4.1/src/Sparrow/Utils/CommandLineArgumentEscaper.cs'
7855,227537683,"b""Hmm, maybe it would be better, instead of adding all of those fields to Voron, add 'OnBeforeDirectoryCreated' event and attach to it in RavenDB?"""
7855,227538371,"b'Yes, absolutely.'"
7855,228154542,"b""The problem with this approach is that each error line invokes a new callback asynchronously, and even though the process finishes and my program continues, not all the callbacks have been invoked. So to use this feature I'd have to add synchronization and continue my program only after I get the last error (empty line).\r\nThe current way is simpler and I can be sure that when I read the entire stream, all errors will be there for sure, because I waited for the process to exit."""
7850,228420743,"b""On Linux it would be better to write 'The following mount points...'"""
7855,228426816,b'Should we have any special handling for in memory ? We still use directories there.'
7855,228426957,"b""Does this handle null paths properly, so you'll get the right order of args?"""
7855,228428079,"b""I think that this is handled in options 'basePath' and 'tempPath' few lines below?\r\n\r\nBut I'm wondering now if we should not pass the information that this is 'inMemory' as an additional argument?"""
7850,228428465,b'Fixed in https://github.com/ravendb/ravendb/pull/7879'
7855,228429237,"b""Actually 'basePath' will have ':memory:' value so probably there is no need to do that."""
7855,228429569,b'We should check if this file exists'
7855,228429867,"b'Why? That would just give us a failure to start the process, which is already handled.'"
7855,228432100,"b""'basePath' and 'tempPath' cannot be null as I recall, so the order should be fine as long as we do not put a new argument after 'journalPath' ?"""
7855,228432917,b'Can quoting an empty string work here?'
7873,228427776,b'Should we log here as well?'
7873,228428530,"b'Can we use `ArrayPool.Rent` ? This is called quite frequently, as I recall'"
7855,228435574,"b'It looks like we can\'t (at least not in C#):\r\n\r\n```\r\ndotnet .\\Tryouts.dll aaa """" bbb\r\nNumber of arguments: 2\r\nArgument 0: aaa\r\nArgument 1: bbb\r\n```'"
7873,228428892,"b""It's called only once for each storage environment.\r\nThe drive/mount point won't change while it's open."""
7873,228435858,b'done'
7878,228432780,"b""We can use 'currentlyInUse' here instead?"""
7878,228441074,b'done'
7885,228701129,"b""This is wrong, we can't use `ThreadStatic` here, we are better off using `ThreadLocal`, because we may have mutiple different serializers"""
7883,228700555,b'Can probably put these in files and then use them as embedded resources.\r\nWould probably be more readable'
7883,228706252,b'Done'
7885,228708449,b'Fixed in https://github.com/ravendb/ravendb/pull/7888 / https://github.com/ravendb/ravendb/pull/7889'
7883,228717926,"b'I\'m not sure it should be ""here"", it probably should be treated in the database level.'"
7883,228758027,"b""Wasn't sure either. In general this is related to Indexes/Indexing/Querying, so I thought that it could be handled in one place."""
7890,228758091,b'Do we want to display this in Storage Report in Studio differently maybe?'
7890,228818172,"b""We could mark it's in `Journals` dir. I'll reopen the ticket for studio adjustments"""
7855,228826833,b'No need to include the actual exception? Same below'
7855,228859225,"b""Yes, Igal will finish his extension point soon and we'll write tests for all four invocations of processes (directory, metrics, master key, certificate)"""
7894,228749520,b'Need `madvise` here'
7894,228751123,"b'madvise should be used in the unmapping events, and maybe we can just fadvise instead : fadvise(fd, DONTNEED) ?'"
7894,228751825,"b'okey, irrelevant. fadvise is not good here. \r\nWe will:\r\nif (DeleteOnClose == true)\r\n  madvise(addr, DONTNEED);\r\nmunmap(addr);'"
7894,228838152,b'missing IsInfoEnabled'
7901,228850049,"b""I think it would be much better to introduce field 'SupportsUnmapping' and set it in 32-bit ctor to false and use it in 'ReleaseAllocationInfo'."""
7901,228852138,"b'I like it, yes'"
7901,228855782,b'will be done.  please add your comments at https://github.com/ravendb/ravendb/pull/7894 as this v4.0 branch will be overridden by v4.1 cherry-picks '
7897,228823361,"b""```suggestion\r\n        public ValueTask<IEnumerable<Match>> Execute(Dictionary<IQueryStep, IEnumerable<Match>> matches)\r\n```\r\n\r\nYou'll typically want _either_ `async` or `ValueTask`, they don't generally mix.\r\n"""
7897,228823422,b'Here you need to check if they are completed or wait.'
7897,228823558,b'Why do you care about this?'
7897,228823769,b'We want to have:\r\n\r\n* Index step\r\n* Collection source step\r\n* Collection dest step\r\n* Collection dest step + filter\r\n'
7897,228824171,b'async & value task'
7897,228824244,b'Why do we need the `QueryPlan` to be an interface?'
7897,228855874,"b'At first, the query plan was executing the steps but I figured it makes no sense.\r\nI left it thinking that the optimization might care about it but it is probably redundant and will be removed.'"
7897,228857090,b'The question is would we want to go complete OOP and have those as subclasses or would an enum be enough since they will all require pretty much the same parameters and logic to run.'
7897,228857179,b'Nope'
7897,228860709,"b'just to be clear i got you right, you want to remove the async method and replace it with.Wait()?'"
7897,228861182,b'the task themselves will never be completed at this point since the execution is reccursive in a post order manner. '
7881,228494660,b'Can you use size here?'
7881,228494690,b'Same here'
7881,228494737,b'Same here'
7881,228494970,b'Sure. I did it this way for consistency with existing messages. Will fix it since I saw you changed it it another PR'
7881,228700628,b'can this be defined per index?'
7881,228700794,"b'This should probably be a higher value by default.\r\nWe are in a bad place if this is hit, so we want to give the entire system more time to process things one at a time'"
7881,228700926,"b""I think we are also missing another limit here. The total amount of scratch page used in this index.\r\nThe `txAllocations` is just for the current batch, if we didn't flush yet from the scratch files, we may be gathering a lot of them, not on a single batch basis, but across many of them.\r\nWe need a limit on the amount of scratch files we have"""
7881,228708777,"b""Yes. It can be defined per index as setting any other index specific configuration using `IndexConfiguration` class in client API via `IndexDefinition.Configuration`. It's also exposed in the studio."""
7881,228708817,b'15 seconds would be enough as the default?'
7881,228709049,"b""Good point. I'll rename this config to something that will state it's about max transaction size per _batch_. \r\n\r\nThen current `Indexing.ScratchSpaceLimitInMb` will track the scratch space using the introduced `IScratchSpaceMonitor` but on index environment level.\r\n\r\n If we hit this limit then I assume we should behave the same like hitting `Indexing.GlobalScratchSpaceLimitInMb` - flush and force sync, right?"""
7881,228717235,"b'Lets go with 30 or so, just to be safer'"
7881,228717244,b'Yes'
7881,228930818,b'Fixed in https://github.com/ravendb/ravendb/pull/7881/commits/c017182f974b2fe0f6eff87f7549b7af16caf381'
7881,229206260,"b""Don't we need to wait until the flushing is done before doing the sync?"""
7881,229210606,"b""`MaybeFlushEnvironment` and `ForceSyncEnvironment` just enqueue environments for relevant operations The global flusher processes the flush operations first, next it do the syncs. So we're guaranteed that sync will be processed after the flush."""
7881,229213086,"b'Okay, then LGTM'"
7896,228752202,b'Pleases use a constant here.'
7896,228752286,"b""We don't need this here"""
7896,228752301,b'Use a local variable here'
7896,228753612,b'done'
7896,228753616,b'done'
7896,228753621,b'done'
7896,228753954,b'Why do you need inline edit here? What is edited inline on this view?'
7896,228760856,"b'We do not want to decrease ReadCount, it is a number of documents that we read/received'"
7896,228760865,"b'We do not want to decrease ReadCount, it is a number of documents that we read/received'"
7896,228761000,b'This should be the first thing that is increased after receiving a document. Check `DatabaseSmuggler` implementation:\r\nhttps://github.com/ravendb/ravendb/blob/abac5e14b447c03c8baa6f177346fffc4b2cc819/src/Raven.Server/Smuggler/Documents/DatabaseSmuggler.cs#L495-L504'
7896,228761033,b'No decreasing'
7896,228761115,"b""This is bizarre. Options are options, not a container for passing external stuff. Can't we pass things like tokens, documentDatabase instances as a separate parameters?"""
7896,228761179,"b""Can't this be a part of 'OperateOnTypes' ? We have revisions there IIRC?"""
7896,228839188,b'done'
7896,228847087,b'done'
7896,228952072,b'done'
7896,228952119,b'done'
7896,228952154,b'done'
7896,229091531,b'We do not want this. ReadCount is enough.'
7896,229093901,"b""This should be moved to a method 'SkipDocument' or something like that. Side-effect and flow worries me. We are increasing the skipped count, adding a flag and passing that to 'WriteDocuments' so it can be skipped inside.\r\n\r\n```csharp\r\nSetNonPersistentFlagsIfNeeded(buildType, item);\r\n\r\nif (SkipDocument(item))\r\n{\r\n    result.Documents.SkippedCount++;\r\n    continue;\r\n}\r\n```"""
7896,229607348,b'done'
7896,229610025,b'done'
7934,229721915,b'This will generate invalid JSON. Can you remove the comma?'
7934,229991941,"b""tested this on fiddler didn't notice i accidentally copied the comma line"""
7943,230301199,"b""Maybe let's put here just the name of the connection string as it was defined in RavenDB instead of the actual connection string containing login / pass"""
7943,230308074,b'Changed in https://github.com/ravendb/ravendb/pull/7947'
7945,230296777,"b""I wonder if wouldn't we be better off by controlling this at transaction level (or even `Commit` method) instead of dealing with storage environment options"""
7945,230298790,b'How did you determine that 80% threshold detects that case? I wonder if we could provide own merge scheduler based on `SerialMergeScheduler` here:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/942f8803f848fe68d0f29b61995cd44c72b134bc/src/Raven.Server/Documents/Indexes/Persistence/Lucene/LuceneIndexWriter.cs#L114\r\n\r\nand be aware if the merge was actually made (maybe there is no need for that)'
7945,230578260,b'Removed'
7954,230586428,b'Why did this change fix anything?'
7954,230586638,"b'Instead of `LazyStringValue.Length` we should use `LazyStringValue.Size` if not, we were creating Slice with incorrect size, so for similar Ids last characters were lost which resulted in overriding results in Map-Reduce.'"
7954,230656800,"b'Okay, I see. The difference between bytes & chars'"
7855,231026261,"b""Shouldn't we call it _only_ if we create a new database?\r\n\r\nhttps://github.com/ravendb/ravendb/blob/412d9c18257789e0012b0673e50635c345c3056d/src/Voron/StorageEnvironment.cs#L155"""
7855,231031386,b'The requirement was to call it whenever we create/open a storage environment. '
7855,231031821,"b""We can also send an extra argument indicating whether it's new or not."""
7855,231038429,"b""Yes, argument would be very helpful. I think we really need to allow users to distinguish if _create_ or _open_.\r\n\r\nGiven when it's called I wonder if `Storage.OnCreateDirectory...` isn't a bit confusing name. Maybe just `Storage.OnInitialize...` or `Storage.OnDirectoryInitialize...`. What do you think?"""
7855,231046910,"b""Changing the name is better.\r\nAnd the script can _check_ if the directories already exists, we don't need to provide that."""
7966,230725446,b'This should be handled when you are putting new ETL. In `OutgoingTasksHandler.AddEtl`'
7966,230726162,b'Also I think that when we want to remove connection string in `OutgoingTasksHandler.RemoveConnectionString` then we need to check if any ETLs are using it or not and throw exception with list of them when we find any.'
7966,230740930,b'done\r\n'
7966,230744450,b'We are deserializing the configuration here (`JsonDeserializationCluster.RavenEtlConfiguration(etlConfiguration)`). Use this instance and:\r\n1. Fire `.Validate()` method and throw if there are any errors\r\n2. Add new method in `abstract EtlConfiguration` called `.ValidateConnectionString(DatabaseRecord)`\r\n\r\n'
7855,231093175,"b'OK, Storage.OnInitialize sounds good'"
7972,231069886,"b""I think that this will not work the way you want.\r\nE.g. 'Query' method catches the exceptions and sets the tracker query already (e.g. in IndexQueryServerSide.Create) and after that it rethrows the exception, which you will catch again here and override the tracker value."""
7972,231070251,b'if (tracker.Query == null)'
7972,231070471,b'I overwrite only if tracker.Query is null otherwise I just throw.'
7972,231071796,"b""I'm getting old :)\r\n\r\nAnother question:\r\n```csharp\r\nif (TrafficWatchManager.HasRegisteredClients)\r\n    AddStringToHttpContext(httpContext, errorMessage, TrafficWatchChangeType.Queries);\r\n```\r\n\r\ndo we need sth like that here?"""
7972,231096682,"b""What happens if the `tracker.Query` _isn't_ null? How does the user get the error?"""
7972,231098573,"b'Its handled inside _await Query(context, token, tracker, httpMethod);_ and the query is passed to the tracker.\r\nThere is a problem with case that if we didnt succeed to _parse the query to memory_ OR didnt succeed to _AllocateOperationContext_ then the _tracker.Query_ remains null and this aims to change that.'"
7972,231105377,b'done'
7971,231070646,b'```suggestion\r\n        return this.connectionStringsTasksInfo[connectionStringName].find(x => x.TaskType === task));\r\n```'
7971,231071255,b'in typescript we put { around if every time'
7971,231071422,"b'in TS use TS like formating for {, ex.:\r\n```\r\nif (condition) {\r\n  ...\r\n} else {\r\n   ...\r\n}\r\n```'"
7971,231071498,b' if (!this.connectionStringsTasksInfo[connectionStringName])'
7971,231103335,b'done'
7971,231103351,b'done'
7971,231103425,b'done'
7971,231103567,"b'the logic I used here is not right, I have changed this so pls check in next PR.'"
7971,231114132,b'I think typeof is not needed here. \r\n\r\n```suggestion\r\n            && this.connectionStringsTasksInfo[connectionStringName].find(x => x.TaskType === task);\r\n```'
7971,231114317,b'it is still not valid javascript formatting:\r\n\r\nif (..) {\r\n   ..\r\n} else {    // this goes in single line\r\n    ...\r\n}\r\n'
7971,231115261,b'done'
7971,231116974,b'done'
7973,231139027,b'Nice'
7973,231147001,"b""I'm wondering if we can do better here... not sure if this is enough to measure the allocations, but I'm not sure what else could we do?"""
7973,231151857,b'Maybe instead of creating an action here per file (Lucene tends to create dozen of those). We can create a class `ReleaseFile` and pass one instance of it?\r\n\r\n```\r\npublic class ReleaseFile\r\n{\r\n    ctor(_voronIndexFiles) { }\r\n\r\n   void ReleaseFile(name)\r\n   {\r\n        _voronIndexFiles.Remove(name);\r\n   }\r\n}\r\n```'
7973,231154164,b'Is this safe? We can have a `DatabaseShutdown` or `_disposeOne.Disposed` here.'
7973,231158417,b'The total value is the same as _file.Length (which is more expensive)'
7973,231159471,b'We check that before that:\r\nhttps://github.com/ravendb/ravendb/pull/7973/files#diff-a98877097408ea1a038c4101886f9a9bR1827'
7973,231159834,"b""Let's change this to a real exception maybe?"""
7973,231160479,"b'Yes, and then you are executing this method here, even if those are true?'"
7973,231172857,b'done'
7973,231172954,b'Correct! fixed'
7973,231175223,"b""Wouldn't it cause index dispose to throw?"""
7973,231260734,"b'Lucene in general is copying back and forth the outputs, so you might be right, but if you are then Debug.Assert will kill the runtime when tests are executed in debug.'"
7973,231491498,b'done'
7977,231720236,"b""I've added missing `await` here. @ayende is this correct?"""
7980,231794528,"b""Add one more ConfigurationEntry with 'old' value."""
7975,231478130,b'This should be handled in StreamSource.GetDocuments.\r\nWe have a BlittableMetadataModifier there and you set a mode there that will strip the `@counters` property from the metadata when the document is being read.'
7975,231534843,b'done'
7975,231829456,b'use `NewDataPath` for this It will delete the directories/files when test will end.'
7975,231834079,b'done'
7989,232014048,"b""I'm not following how this is helpful for us.\r\nWe attempted to allocated some native memory (why, I can't think of a code path here that needs it) and failed.\r\nwhy are we waiting instead of just failing upward?\r\nIs this because it is potentially expected?"""
7989,232016834,"b""We try to allocate memory when opening a write tx.\r\nSee the stacktrace here: http://issues.hibernatingrhinos.com/issue/RavenDB-12286\r\nIn this case we aren't going to do any work using this write transaction (we hold it to prevent others to open a write tx). Can we disable this low memory check here?\r\nFailing here will result in VoronUnrecoverableErrorException to the storage environment."""
7989,232018490,"b""If we don't need the write tx, what about simply providing API to get the write tx lock, instead?\r\nI like it better than starting to mess with this here, and IIRC, there are other places where we start a write tx just to be able to get the lock"""
7989,232053114,b'done'
7983,232027543,"b""You aren't calling `_indexStorage ?.Dispose()` intentionally?"""
7983,232027883,"b'This is recipe for test failures. Can you add an event, instead? Or do active wiating?'"
7983,232039538,"b'It is not disposable, it just wraps _environment'"
7983,232175634,"b""Actually we don't need that. The below query will assert that that index state isn't Error. Fixed in https://github.com/ravendb/ravendb/pull/7983/commits/3094df574da4e8f74005637ab4ebae1211f8c631"""
7989,232181412,"b""This way we disable the check but still do the allocation - isn't it dangerous? """
7989,232182902,"b""Providing the API as suggested in https://github.com/ravendb/ravendb/pull/7989#discussion_r232018490 is more complex but would guarantee we won't do the allocation"""
7989,232184383,"b'In Voron we typically create dedicated struct which is disposable, no need the use DisposableAction and move to to Sparrow e.g. `public struct ExitWriteLock : IDisposable`'"
7989,232186381,"b""We do allocate 4KB for this and we don't do any significant work (write do write a single page or just hold the write lock)."""
7989,232187387,"b""My concern is: can this 4KB allocation kill? We have `EarlyOutOfMemoryException` to prevent that, if we disable it then we don't have this protection"""
7989,232187703,b'I meant *kill us'
7989,232188867,b'Where is this allocation - `LowLevelTransaction.InitTransactionHeader` ?'
7988,232020358,"b""You can just set flushing to false, which is much better.\r\nYou are also creating the `Env` and then setting the options, that isn't supported.\r\n`override` the customize options method"""
7988,232020454,"b""I'm not following how this helps us, can you expand on this?"""
7988,232057362,b'done'
7988,232060650,"b""I tried to use the existing function RemoveInactiveScratches. This solves the issue but doesn't clean the all the recycled scratches.\r\nFixed."""
7988,232185622,"b""Why? We _always_ want to schedule the sync. Even if we don't manage to do the flush in specified time. BTW this is unrelated to RavenDB-12268 please """
7988,232196465,b'- When you schedule a flush it will a schedule a sync afterwards anyway.\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Voron/GlobalFlushingBehavior.cs#L229\r\n\r\n- There is no point in starting a sync process before the flush process has finished.\r\nAnd calling MaybeFlushEnvironment will only schedule it.\r\n\r\n(After finishing the flush process we can delete the scratch files).'
7989,232198936,"b""I wonder if we could mark that this write tx isn't going to be committed (and throw on attempt to commit) and then don't do this allocation"""
7988,232204565,"b""- No, it won't. The line you put only filters out the duplicates. Maybe you meant different line?\r\nThe sync is run based on `_syncIsRequired` queue:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Voron/GlobalFlushingBehavior.cs#L161\r\n\r\n- `ForceSyncEnvironment` doesn't start the process, it enqueues the sync:\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Voron/GlobalFlushingBehavior.cs#L308\r\n\r\nSo both calls `MaybeFlushEnvironment` and `ForceSyncEnvironment` schedule the operations but we are guaranteed that order of operations will be _flush_ and then _sync_ because:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Voron/GlobalFlushingBehavior.cs#L89-L91\r\n\r\n"""
7988,232208025,"b""But you're right that sync isn't required to release scratch space, only the flush."""
7988,232208548,b'I meant this:\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Voron/GlobalFlushingBehavior.cs#L259\r\n\r\nIt schedules the flush and afterwards schedules the sync for the same environment.'
7988,232209473,"b'I think that the after finishing the flush process, we should schedule a sync for that environment.'"
7988,232220953,"b""After talking to Grisha I agree that `ForceSyncEnvironment` should be called as he changed it. The issue is that this guys:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/87367b6cc801708485f101b688a17797dcc7a6c1/src/Voron/GlobalFlushingBehavior.cs#L89-L91\r\n\r\njust call `ThreadPool.QueueUserWorkItem`. So we don't have guarantee that for a given environment the sync will be called _after_ the flush."""
7989,232283403,b'The problem is that we have two cases where we create a write tx mostly to keep the write tx lock but we also do the commit:\r\n\r\n1) WriteAheadJournal.WaitForJournalStateToBeUpdated\r\n\r\nhttps://github.com/ravendb/ravendb/blob/54cc370bfeecf2bf1bb8bca27718a2d7d945525e/src/Voron/Impl/Journal/WriteAheadJournal.cs#L709-L713\r\n\r\n2) ScratchBufferPool.Cleanup\r\nhttps://github.com/ravendb/ravendb/blob/54cc370bfeecf2bf1bb8bca27718a2d7d945525e/src/Voron/Impl/Scratch/ScratchBufferPool.cs#L460-L463\r\n\r\nAlthough in first case I think we have the commit because of possible lazy tx mode usage?\r\nhttps://github.com/ravendb/ravendb/blob/54cc370bfeecf2bf1bb8bca27718a2d7d945525e/src/Voron/Impl/Journal/WriteAheadJournal.cs#L764-L767'
7989,232285143,"b""Maybe since the allocation potentially causing problems in low memory is made in `InitTransactionHeader` and we don't always need it, we use it only if we write to journal:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/6c7905bdcd1f5c0b84c2be0371adc68a88523a77/src/Voron/Impl/Journal/WriteAheadJournal.cs#L1467\r\n\r\nthen maybe we could do this allocation on demand (lazily) instead of calling it in the ctor of LowLevelTransaction"""
7999,232489072,"b""isn't needed since the default is undefined"""
7999,232490574,b'done'
7991,232483204,b'Why do we have 10 retries here?'
7991,232483990,"b'GetOperationStateCommand can return null when operation does not exist, and it can happen because of a race between sending an operation e.g. ImportCommand and actually registering it on the server-side as an operation. Not sure how it can be solved better.'"
7991,232484223,"b'Okay, can you add a comment there explaining this?'"
8002,232628136,b'Use named arg here to make this clearer'
8002,233068909,"b""This should be the other way around and all values by default should be 'true'"""
8000,232606338,b'This means that old client libraries will stop working due to the lack of this method?'
8000,232607040,"b""I think that instead of 'o' we should use 'DefaultFormat.DateTimeFormatsToRead' ?"""
8000,232607187,b'Maybe we should use LazyStringParser instead?'
8000,232619195,"b'I think so, I believe we need to keep it around.'"
8000,232757915,b'@aviv86 can we use LazyStringParser here?'
8001,232921943,b'Can we automatically check documents when user checks attachments + avoid having generic field: validationMessage in this model? '
8009,233379509,"b""Shouldn't we have some way to recover from this?"""
8017,233382160,b'What happened when a 4.1 client talks to us?'
8017,233403817,"b""then it will fail.. i thought it was fine to drop it in 4.2 but you're right, we need to keep it"""
8045,234113638,"b'I think that, for debug only, we should error if we fail here.\r\nThat is important if we pass bad information, otherwise we might miss this entirely'"
8045,234113854,"b'I think we _always_ want to do that, even if we are about to close the file, no?\r\n'"
8045,234113952,"b'Also, we can do this _immediately_ after writing to the journal, why wait for the next round?'"
8045,234114088,b'Need to pass to inner'
8045,234114094,b'Need to pass to inner'
8045,234114315,"b""We unmap things pretty fast, so that shouldn't matter, yes."""
8045,234114336,"b""We unmap things pretty fast, so that shouldn't matter, yes."""
8045,234114489,"b'However, _because_ we unmap, we may want to discard before unmapping on temp data.\r\nNot sure if we can always do that, though. We rely on map/unmap/map show the same data, so we might need to map, discard and then map.'"
8045,234114584,b'Need to override it for both 32 bits posix / windows pagers'
8045,234114685,b'Same as the 32 bits windows pagers'
8045,234114729,b'Add comment here.'
8039,234115508,b'why remove this?'
8039,234120098,"b'In order to _not_ throw on `MoveNext()` if we already iterated over all values. See the following test:\r\nhttps://github.com/ravendb/ravendb/pull/8039/files#diff-e373029fe165f4fccd9ea5c3a9ea4b94R134\r\n\r\nNow the behavior is consistent with our other iterators and .net framework enumerators.\r\n\r\nIt could be thrown during compaction, note `MoveNext()` calls inside `while` loops:\r\nhttps://github.com/ravendb/ravendb/blob/791dec72ff727ca72ce82c6001d1774fe6448664/src/Voron/Impl/Compaction/StorageCompaction.cs#L228-L240\r\n\r\nWhen first `MoveNext` call returned `false` then the second one thew this exception'"
8045,234128800,"b'Maybe create an alert / performance hint then as we do if we detect ""non durable file system"":\r\n\r\nhttps://github.com/ravendb/ravendb/blob/791dec72ff727ca72ce82c6001d1774fe6448664/src/Voron/StorageEnvironmentOptions.cs#L47\r\n\r\nhttps://github.com/ravendb/ravendb/blob/791dec72ff727ca72ce82c6001d1774fe6448664/src/Raven.Server/Documents/DocumentDatabase.cs#L1353-L1363'"
8045,234130127,b'We already have usage of `madvise` with `MADV_DONTNEED`\r\n\r\nhttps://github.com/ravendb/ravendb/blob/791dec72ff727ca72ce82c6001d1774fe6448664/src/Voron/Platform/Posix/PosixAbstractPager.cs#L66-L73\r\n\r\nMight be good to call `Memory.Discard` there then'
8045,234132308,"b""@ayende If we discard this after each commit then next time we do the commit the OS will need to map the file again, won't it? Wouldn't it affect the overall commit performance?"""
8028,233581019,b'Need error handling here.'
8028,233581210,b'How much of this is Windows only?\r\n'
8028,233583165,b'All'
8047,234181845,b'Here is the fix - `HasActivelyUsedBytes` was missing'
7988,234181898,b'Here is the fix - `HasActivelyUsedBytes` was missing'
8060,234591591,b'Can we avoid spaces in property name? '
8060,234602243,b'sure'
8051,234457152,b'should be DatabaseSchemaErrorException '
8051,234518970,"b""I think this is an issue about references. Voron doesn't reference Raven.Client"""
8051,234742169,"b""This is in Raven.Server so it shouldn't be a problem?"""
8064,234889930,"b""Shouldn't you do the check on the right side as well? You know if there is no one there, the whole thing will return no results."""
8064,234889960,b'right side missing here too'
8064,234890232,"b""Same for the right \r\nAlso, let's avoid the reflection here. Add a property on the struct that will check this."""
8064,234921760,b'The majority of the performance is lost in the initialization so the performance gain to check afterward is much smaller since the logic is mostly in memory'
8064,234929632,b'done'
8064,234929673,b'done'
8064,234929701,b'done'
8064,235002101,b'We actually do a fair amount of work in edge steps and recursive steps during the actual `CompleteInitialization` that I want to save'
8064,235027696,b'is there anything else i missed?'
8069,235308158,b'Do you want to renew the server certificate?'
8069,235309022,b'What do we renew exactly ? '
8069,235309983,"b""I meant, fix the grammar, add a 'the'."""
8069,235315274,b'done - thanks :)'
8068,235271065,b'Please create a test for this and remove this line'
8068,235348562,b'*facepalm*\r\nwill do.'
8076,235521306,b'This is wrong'
8076,235522266,"b'Please add an error here that says ""you need `(_ as v)`""'"
8082,236003863,"b""This is wrong, you don't know that the types match here. """
8082,236003897,"b'I wonder if we should fail here or just have a default? @ppekrol, @arekpalinski thoughts?'"
8082,236003935,b'Need to handle type mismatch'
8082,236003960,b'Type mismatch'
8082,236003980,b'type mismatch'
8082,236004005,"b'Type mismatch? Not really sure how this would work, though.'"
8082,236004056,"b'Need to explicitly mention the types here. \r\nFor example, double and long would _look_ the same, but be different.\r\nAnd we actually do want to allow comparisions between long and double, for example.'"
8082,236004108,"b""Shouldn't the include clause just always be here?"""
8082,236004142,"b""Pretty sure that this won't do the right thing when you have multiple fields."""
8082,236004194,"b""Let's check if we can avoid the allocation on `ToList`"""
8045,236039561,b'What you mean by non durable file system?'
8045,236039596,"b'@arekpalinski I am still investigating the issue, but at least on Window `.DiscardVirtualMemory()` behavior suggests that is not the case.'"
8045,236039618,b'Not worth it. Per page discard seems to be too costly.'
8045,236039659,"b""Given latest blog on Oren's blog the behavior on Linux may not be appropriate and we sholdnt do discard there. Other Posix based system do implement it properly though. """
8045,236040163,"b'Certain file systems do not support o_direct, but we still want to support then.\r\nFor example cifs in docker'"
8080,235876802,b'Can we remove `Win32UnmanagedMemory.cs` file now?'
8079,235740023,b'This is explicitly meant to not be inlined'
8079,235740044,b'This is explicitly meant to not be inlined'
8079,235740375,b'Move to separate method'
8079,235740439,b'Move to separate method'
8079,235740535,"b'Do the comparisons on the `byte*` directly, do not turn them to `int64`'"
8079,235740758,"b""No, this is _always_ `IntPtr`, no need for both of them. And you didn't set the name, so this would always fail"""
8080,236062936,"b""No, we still use : memcmp, memove, which doesn't have Unsafe methods and we probably do not want to implement them by ourselfs (or may be we will..?)"""
8082,236067122,"b'i expect LazyNumber Value to throw in this case, i was trying to avoid yet another switch because the other side could be LazyNumber int long double i guess there is no avoiding it'"
8082,236067224,"b""I think you're right I need to concatenate the compares on each item separately, good catch."""
8082,236067317,"b'The output is a list so I need to generate the result, do you want me to change the result to be IEnumerable (this will have a ripple affect on the code)? \r\nI could save the two IEnumerable calls using a while loop.'"
8082,236073733,"b'I believe we must, yes'"
8082,236073757,"b""If `query.Start` is 0, then you don't need to allocate anything.\r\nSimply set remove anything from the end of the list until it hit `PageSize`"""
8082,236073764,"b""`.ToList()` always allocated, but you usually won't need to"""
8078,235741318,"b""That isn't a Studio decisions, it belongs to notifications"""
8078,235741472,"b""Let's not do that, we might change this and we don't want to break things if the user has a configuration for new version, frex."""
8078,235741628,"b'You are always comparing on this, easier if you will use `HashSet<string>` (case insensitive)'"
8100,236093952,b'@ayende something that I have noticed. It looks like `ToQueryable` creates and artifical projection? Is this by design?\r\n\r\nhttps://github.com/ravendb/ravendb/blob/eef63a81ffff8c5a496a65100111c8bda72d7c14/src/Raven.Client/Documents/Session/AsyncDocumentQuery.cs#L970'
8082,236150849,"b""What would be the default? How can we deal with that if types are different? Implicitly return `false`?\r\n\r\nI'm for throwing an exception and be explicit about the reason if failed."""
8082,236151994,"b""The problem is that we don't have types, and a single bad document can cause the query to _fail_, which can take prod down.\r\nWe need to define the sort order and just let it go in that manner"""
8100,236153999,"b""No, I wouldn't expect it."""
8080,236154869,"b""ok, no need to implement them on our own, we're better of by using those syscals I think"""
8045,236158590,b'ok'
8100,236160386,b'I will fix it in 4.1 and merge it to 4.2 afterwards'
8036,233826013,b'Why does it inherite from the BackupStatus?'
8036,233826243,b'LastRaftIndex => LastRaftIndexByDatabase'
8036,233826919,"b""why don't you use the currentLastRaftIndex?"""
8036,233832462,"b'This should be only invoked when transaction is committed (e.g. check SetValueForTypedDatabaseCommand) and I think it would be better to invoke this for all commands and filter it out there? You need only databaseName, index and type, not BlittableJSON'"
8036,233832714,"b'What happens to this after server restart? It would be empty, should we fill it?'"
8036,234118091,"b""`DatabaseRecord` that is nullable `long`? I don't understand what this is meant to do"""
8036,234118395,b'why are we keeping track of this in this manner?'
8036,234434043,b'currentLastRaftIndex == _previousBackupStatus.LastRaftIndex.DatabaseRecord'
8036,234445539,b'What is the meaning of this class and property?'
8036,234445589,b'Why not simply load the database record and check its etag?'
8036,234446689,b'to save the last raft index for compare exchange and identities'
8036,235309621,"b""why isn't this a `long LastRaftIndex` ?"""
8036,235309860,b'I like this approach'
8036,235310076,"b'Given that we backup the database record itself, what about all the stuff that mutate it?\r\nupdating the backup definition, updating ETL, etc?'"
8036,235910124,b'Probably better to use ReadDatabaseRaw and just get the `EtagForBackup` value. Rename the method to `GetDatabaseEtagForBackup`\r\n\r\nBy doing this you will avoid the deserialization cost of whole DatabaseRecord.'
8036,236065975,"b""we'll need the last raft index of compare exchange and identities (for incremental backup, not implemented yet)"""
8036,236066040,"b""We don't backup everything in the database record\r\nhttps://github.com/efratshenhar/ravendb/blob/v4.0/src/Raven.Server/Smuggler/Documents/StreamDestination.cs#L114"""
8036,236073727,b'We have to backup the whole thing'
8082,236169457,"b""@ayende, in that case, we should maybe return -1 meaning the bad cases will always show up last I think we do the same with NULL_VALUE in v3.x\r\n@arekpalinski there is no false here since it is a compare so it could be big small equal or throw\r\nWe could even return those values last regardless ordering so they won't show up when doing ascending or descending order."""
8082,236170563,"b""I'm fine with that"""
8082,236173769,"b""i'm going to open a new PR it seems my commit from yesterday didn't get in"""
7960,230584002,"b""forgot to change 'Security.MasterKey.Exec'"""
7960,230584591,b'This will read only one line of the error.'
7960,230586277,b'You need to skip those checks when using the CpuUsageExtensionPoint '
7960,230586332,b'same here'
7960,230604518,"b""What do we do with the previous value, if we have one, and if we don't, then it should be just a Lazy value?"""
7960,230604611,"b'Not sure that in this case we should use 0, maybe we should fall back to the ""normal"" calculation'"
7960,230604714,b'What if we failed starting the process?'
7960,230604855,"b""We should Try-Catch here, we don't want an unhandled failed task, we could for an instance have a temporary out of memory problem here, that will just kill the task, without us knowing/monitoring it."""
7960,230659365,b'This should be inside the `ea.Execute`'
7960,230659640,"b'There is no meaning from our perspective to `0.35` of a core. The extension script needs to do the transaction, not us'"
7960,230659791,"b""In what case this can happen? And why shouldn't we abort the extension at this point?"""
7960,230659913,"b'This like the admin, what is `from extension point` which one, etc?\r\nNeed to be very explicit about this.'"
7960,230662981,b'Also need error handling here'
7960,230663156,"b'Please use a descriptive name for the tag, not `string.Empty`'"
7960,230663298,b'use `Environment.NewLine`'
7960,230663361,b'what resets this value?'
7960,230663387,b'what if errors are thrown here?'
7960,230663409,"b""This shouldn't be in the finally"""
7960,230663504,b'Why does this need to be separate from the `Start`?'
7960,230663553,b'Can you explain what is the case when this is not int/long ?'
7960,230666692,b'Need to use `Environment.NewLine` instead of `\\n`'
7960,230666751,b'Need to use `Environment.NewLine` instead of `\\n`'
7960,230669957,"b""Wouldn't it be more convenient for the user if the script would be started every X seconds and we would only read one line from it?"""
7960,230671441,b'Is JSON a way to go when it comes to scripts? It is not a commonly used format.\r\n\r\nI would expect output like:\r\n```\r\n80.06 3.0\r\n```'
7960,230672764,b'We probably need to escape this?'
7960,230673030,b'We probably need to escape this?'
7960,230673174,b'Need to rethrow here?'
7960,230675995,"b'The problem is when running in k8s, when you can assign 0.5 cores'"
7960,230676252,"b'No, we want this to be long lived, otherwise there are a lot of extra costs.\r\nIn particular, the common scenario we see for this is making requests to a k8s controller, which means that it will need to auth, which means that we want to have connection pooling, etc. '"
7960,230676385,"b'We expect this to be a full fledged program, not just a script.\r\nAnd we want to make sure that we are future proof here.'"
7960,231016547,"b'By ""error handling"" do you mean exception from `StreamReader` method?'"
7960,231018391,b'@grisha-kotler Why? If I will get 0 cores I want the same behavior. To return the last  Cpu usage calculated or 0'
7960,231022011,b'@maximburyak The `CpuUsageExtensionPoint` should be set once in the server initialization. Maybe if I will pass it to a function it will make more sense?'
7960,231023149,"b'@maximburyak But the situation in the first place is the ""normal"" calculation is wrong.\r\nIn my humble opinion, it is better to display 0 that show you something is wrong'"
7960,231405401,"b'@ayende This can happen when: \r\n* There were issues in the extension point process and there was one try to restart\r\n*  If the process returns a negative value.\r\nWhat do you mean by abort? Just to kill the process? In the first scenario, it is already the situation. In the second scenario if I check for bottom edge maybe to check the upper side?'"
7960,231411090,"b'@ayende Nothing, the implementation now is if the process has an issue the system trying to restart it once and no more'"
7960,231413030,b'@ayende The `InitNewProcessHandle` function just set the new process object properties and `Start` function handles itself'
7960,231415714,b'@ayende I should not catch the exception?'
7960,231438421,b'@ppekrol As I understand it the error handling should be soft so I just notify there is a problem. What do you think? how the error should be handled?'
7960,231443319,"b""Then you probably want to return here, not 'ReadProcess' ? (check @maximburyak comment)"""
7960,232484693,"b'This still needs to be changed. The translation from partial units to integer number of cores should be done in the script, not by RavenDB'"
7960,232484704,"b'Yes, we do'"
7960,232484709,b'Yes'
7960,232484735,"b'Yes, on bad input from the script, kill it and retry.'"
7960,232484747,b'0 is _not_ wrong.\r\n0 is a valid value'
7960,232561460,b'So should I return a negative value?'
7960,232563223,"b'In a situation where the number of cores is a fraction, the process cpu calculation will be wrong. \r\nTo calculate the process cpu usage we compare the license limit vs the actual number of cores and use the min.\r\n'"
7960,232573608,b'https://github.com/ravendb/ravendb/pull/7960#discussion_r232563223'
7960,232579110,b'https://github.com/ravendb/ravendb/pull/7960#discussion_r232561460\r\nAnd to return a negative value or keep it 0?'
7960,232581063,b'I want to restart or dispose the object while notifying the problem any way'
7960,232597117,"b'Yes, and make sure that this is user visible'"
7960,232597272,b'That is not our responsibility. That is what the script is for.\r\nIt would be doing that translation'
7960,232597660,"b'To give more context, this is important because ""core"" isn\'t well defined.\r\nA Raspberry Pi has 4 cores, or example, but my laptop can probably beat all of them together with just one core.\r\n\r\nThe script defines what a core means in this context, not the system. \r\nWe do ensure that we aren\'t going over the number of licensed core, but that is it.'"
7960,232600929,"b'In this case, the origin methods to calculate CPU usage give wrong values so if the process didn\'t start or if it failed while running I still want to read the data from the disposed object to get error value from it. Another option I can think of is to switch the `CpuUsageExtensionPoint` to ""Failed object"" that will do this work and use it is I can\'t start. Is it make sense? '"
7960,232634621,"b""We calculate machine usage and process usage separately. If you want to delegate all that responsibility to the script, it will have to give us RavenDB's process usage as well. So the script will have to monitor the RavenDB process. It makes it much harder than just calling the K8s API metrics-server."""
7960,232650955,"b'Maybe the CpuUsage class shouldn\'t be a ""static"" class, but a singleton? And this way you\'ll initialize all the values you need inside the constructor? It looks to me that it lacks structure and state this way..'"
7960,232658108,"b'I pretty sure that we have to. \r\nAnd we can do that in the same way we do now, just in the script'"
7960,232946313,"b'If process died, then you want to `ReadErrors`, not the normal output I think?'"
7960,232947188,"b""Can't we read to end at the beginning?"""
7960,232947897,b'We need to dispose this'
7960,233455762,b'As I understand it the `ReadToEndAsync` would not return until the stream is closed.\r\nSo if the process send error without exiting it will continue to wait for the continuation'
7960,233463492,"b'There is a task that responsible to read errors, notify them and kill the process if needed. But after that or if the process killed/existed by another reason when for instance the Dashboard requests for CPU usage it will get negative values to indicate the problem '"
7960,235304767,"b'This is still double, and should be int'"
7960,235305025,"b'This should be an instance class, not a static class. \r\nThe problem is that in the tests, we have multiple raven servers, and you are going to impact all of them in this way'"
7960,235305080,"b'Only dispose the local instance, not a static one'"
7960,235305437,b'Why is this here and not in the Windows one?'
7960,235305892,b'Why _do_ you have multiple static members here for each type? '
7960,235306140,b'`CpuUsage.GetTime` move to this class'
7960,235307174,"b'This will be called all the time, which will flood the log'"
7960,235307494,b'need new line here'
7960,235307829,b'comment here that `HandleError` is called from inside the `TryGetValue`'
7960,235308125,"b'`TryGetValue` is a generic name, and you are also doing error handling here, call it as such'"
7960,235308460,b'`_didRestart` change this to a `DateTime` and allow it if `DateTime.UtcNow - _lastRestart` is greater than 15 minutes'
7960,235308581,b'activeCores should not be a double'
8102,236197903,b'```\r\ncase int _:\r\ncase long _:\r\n  yObject = yResult;\r\n  break;\r\n```\r\nIs easier'
8102,236198079,"b'And if it is double, we should still support it.'"
8102,236198113,"b'and if it is double, long?'"
8102,236198275,b'double ?'
8102,236198360,"b'long -> double, etc'"
8102,236198467,b'You are allocating what may be very large value.\r\nNeed to recurse here.'
8102,236198667,"b""There is no meaningful way to compare them, and I certainly don't want to use strings.\r\nUse the `Base` as a way to get just a stable sort order."""
8107,236617339,b'We should add actual checks on graph queries to the code. @talweiss1982 '
8080,236675718,b'in 4.2 we replace memove with Buffer.MemoryCopy'
8111,236689680,"b'I wonder if we need to make this a case insensitive comparison (on Windows, at least?)'"
8111,236695622,b'Use `RavenConfiguration.GetKey(x => x.Core.DataDir)`'
8120,237002252,b'Please change to `private`'
8120,237004106,b'done'
8074,235419210,"b'Please follow convention for different driver name (Driver Class Name), see 2 and 4 lines above.'"
8074,235419374,b'please reverse condition to avoid === false'
8074,235420154,b'include unsupported documents or columns?'
8074,235444903,b'done'
8074,235445192,b'done'
8074,235445280,b'done'
8074,235533249,b'`PR`?'
8074,235533531,b'How do you only run it if we have postgres available?'
8074,235533669,b'I think you need `RequiresNpgSqlFactAttribute ` here'
8074,235644829,b'done'
8074,235645425,b'done'
8074,236996508,b'Please fix namespace'
8074,236996602,b'Please fix namespace'
8074,236998939,"b'Why ""OracleClient"" instead of just ""Oracle"" ?'"
8074,237006409,b'done'
8074,237006451,b'done'
8074,237014158,b'done'
8119,236993737,"b""I'm probably missing something but how this can filter out '_' collection as stated in the comment?"""
8119,236994239,b'Shouldn we check exception message to ensure we got the exception that we really expected?'
8119,237009164,b'BTW this assertion fails :)\r\n`Expected: typeof(Raven.Client.Exceptions.RavenException)\\r\\nActual:   typeof(Raven.Client.Exceptions.InvalidQueryException): `'
8119,237022599,"b'That is handled by the query parser, if we see `_`, it is sent as `null`'"
8119,237023745,"b""OK, although it's a bit tricky. Maybe usage of `_` deserves a dedicated property in QueryMetadata."""
8119,237081038,"b'That would result in ""index / all / collection"" options that we\'ll always need to check.\r\nI don\'t really like that'"
8121,237011500,"b""Don't we have already a constant for that? If not, can we introduce it?"""
8121,237131350,b'done'
8128,237151181,b'let payload: { Query: string }'
8128,237156837,"b""const won't work ;-)\r\n\r\n```\r\nconst queryText = this.criteria().queryText();\r\nconst query = this.criteria().showFields() ? queryUtil.replaceSelectAndIncludeWithFetchAllStoredFields(queryText) : queryText;\r\n\r\nconst payload = {\r\n   Query: query\r\n}\r\n```"""
8130,237414411,b'I wonder if we could calculate both page densities and balance distribution at once and this way iterate over all pages of a tree one time'
8130,237470451,"b'No difference, the execution time is dominated hard by hard page faults. On codealike database it takes a minute the first run. Second is under a second. Also I was under the impression that the details enabled is not usually call. '"
8132,237438688,b'`IsDebugInformationEndpoint = true` will cause that it will be _always_ included in the debug package. In 3.x we had it as an option because it can be time consuming and pause the server process.'
8132,237439997,b'`sb.Append` on error? Did you mean `sw.Write`? '
8132,237440502,b'Below you parse the values to ensure they are integers. We should have the same here I think'
8132,237440948,"b""It's case sensitive, on purpose?"""
8132,237534467,"b""We shouldn't include it by default.\r\nIf we 'll stop the server to capture it, this can hurt production"""
8132,237534726,b'Do we need to worry about concurrency here?'
8132,237542318,b'done'
8132,237544051,b'done'
8132,237545929,b'I meant to use the sb to throw the error message. Fixed.'
8132,237543062,b'this is the result when you pass a command line option with no value:\r\nRaven.Migrator --includeStackObjects'
8132,237767018,"b'Now we will never include it. The debug package endpoint should provide an option whether we want this one or not, like in 3.x'"
8132,237796902,"b""WRT https://github.com/ravendb/ravendb/pull/8132#issuecomment-443143720\r\n\r\nOkay, that's fine then. Can you point where do we create stacktaces for the debug package - I wasn't aware we already have it."""
8133,237448770,b'I think you missed `Remove(Constants.Documents.Metadata.Counters)` if `counters.Count == 0 `'
8133,237450896,b'Why do we want to have them sorted?'
8133,237453518,b'Right. Done.'
8133,237453727,b'This is a requirement.'
8133,237567793,"b'does it mean that a batch will contain counters of 1024 different documents, with an unlimited amount of counters per doc ?'"
8133,237677038,"b'No, each 1024 counters. But I think that we can safely increase the size back to 10,000, since this is now much cheaper, no?'"
8133,237677104,"b""did you push the code? I'm not seeing this removed?"""
8133,237767985,b'Reminder - no fix was pushed'
8133,237791197,b'The list of counters was sorted in the previous implementation. I think that we use that when patching a document with a counter.'
8133,237794009,"b'IIRC, we need that for searching if a counter exists in the document as well'"
8133,238089946,b'Are you sure? it looks like `isNew` is set to `true` only when the document id is new to this batch. Or am I missing something?'
8133,238090154,"b'To improve performance we are trying to aggregate as many counters for the same document as possible. And it is indeed unbounded.. should I limit it, or simply revert this change completely? \r\n'"
8133,238094848,"b""Let's limit this to a high number, such as 32*1024 or something like this."""
8150,238594841,b'You can use `type.IsMapReduce()`'
7982,232494397,"b'We want to hold the full cert here, so we can do things like show the expiration'"
7982,232494442,"b'This is the definition on the _edge_, right? How do you decide which certificate to use here?'"
7982,232494547,"b'Unless I miss something, this stores the _private_ key inside the server, that is _not_ something that we usually want to do.\r\nWhy is this done here?'"
7982,232494561,b'Especially when you are talking about the global cluster level?'
7982,232494573,b'```suggestion\r\n                            writer.WriteString(Convert.ToBase64String(_certificate.Export(X509ContentType.Cert)));\r\n```'
7982,232494599,b'What is this string?'
7982,232494650,b'@grisha-kotler What is required here?'
7982,232496072,b'What happen if we delete / disable the pull replication / change its settings when the connection is already alive?'
7982,232496087,b'Pretty sure that this is already handled on `PoolOfThreads.GlobalRavenThreadPool.LongRunning`'
7982,232496158,"b'Bad idea here, We need to keep track of all the failures that we had an use them in an AggregateException as the inner exception here.'"
7982,232496175,b'Why interlocked here?'
7982,232496201,b'Why do we need this is we have all the fields that are there just for pull replication?'
7982,232499185,"b""Don't use `(int)` to get an integer here, use `Hashing.Mix` to make sure we include all the bits in the random effect"""
7982,232499213,"b'Also, why do you need the `taskId` here anyway?'"
7982,232499233,"b""I don't understand this comment?"""
7982,232499254,"b'You mean `_incoming.GetOrAdd` ? It is _not_ a known new instance, you might already have this instance live already'"
7982,232500946,b'Can save some code by unifying the `requestExecutor ` and `ctx` usages across the `if`s'
7982,232500980,"b""No, we don't want this.\r\nInstead, we want to have a `Certificate` property on the `ExternalReplication` directly that would hold the BASE64 certificate (including private key)"""
7982,232501021,"b'Actually, better would be to hold the actual certificate elsewhere (because the certificate private key is... private, but we need:\r\n* To upload the actual pull certificate when creating the pull replication\r\n* To prevent it from being downloaded \r\n'"
7982,232501036,"b'You have no way here to limit this for a single db. In particular, just knowing the certificate thumbprint allows you to use it from any db on the server, which is probably not ideal'"
7982,232501050,b'What is this remote info?'
7982,232501222,b'why this change?'
7982,232501565,"b""This shouldn't be using the same mechanism, as certificates that we store that aren't private information.\r\nThis should be _encrypted_, talk with @iftahbe on how we store sensitive information like that.\r\nI would also like it to be completely separated so you can't re-use existing value just by knowing its thumbprint."""
7982,232501598,"b""Let's use a better name here: `info/remote-task/topology`, for example\r\nThis won't be the only usage of the endpoint"""
7982,232501613,"b'No, there is no need for that. The number of calls you are likely to get is minuscule.'"
7982,232501646,"b'Security check need to be right here, front and center so it would be obvious that is is happening'"
7982,232501687,"b""Shouldn't this be in the proper order? Right now the current node tag is always first."""
7982,232501722,b'Why are you already getting the `TcpConnectionInfo` here? Let the client actually do that.\r\nThe response from here should be just the node urls as `http/s`'
7982,232501742,"b'The reason this concerns me is that you are using the internal channels, and the remote server might be using a different network.'"
7982,232501833,"b""This is wrong, because it presume too many states.\r\nYou need to account for: \r\n* http node\r\n* https with a known certificate that doesn't have access to this db\r\n* https with a known certificate that _has_ access to this db\r\n* https with a known admin certificate\r\n* https with an unknown certificate that is explicitly allowed, etc\r\n* using a database that doesn't exists.\r\n\r\nThis gives you a good way to check (with no auth) if a db exists."""
7982,232681571,b'The user should define it.'
7982,232684523,b'Done.'
7982,232685572,b'This is a client code to upload the certificate along with it private key to the edge.\r\nStoring the certificate is done at the endpoint.\r\n'
7982,232700483,"b'This is remote pull replication so, renamed to `PullReplicationDefinitionName`. \r\n'"
7982,232701864,b'This is converted to `int` anyway in the `WhosTaskIsIt`.\r\nWe need this since this is a legit external replication and we keep its state across the central cluster. \r\nhttps://github.com/ravendb/ravendb/blob/ab8b050739d768eab847dfc3e60937bee07cff46/src/Raven.Server/Documents/Replication/OutgoingReplicationHandler.cs#L260'
7982,232710130,"b'Okay, so when putting a certificate on the edge we have to specify permissions. \r\n'"
7982,232710693,b'renamed to `PullReplicationDefinition`. (note: this is the definition name on the central)'
7982,232712057,b'Need to extract the private key later. (see comment below)'
7982,232712088,"b'Okay, so the encryption will be locally on each node, but I need to propagate this certificate across the cluster so I need to include the private key to be transferred on the wire.'"
7982,232712238,b'Done.'
7982,232713777,b'The `GetResponsibleNode` take care of the proper order by executing `WhoseTaskIsIt` in a loop and removed the selected node every iteration.'
7982,232714792,"b""The reason here is that `/info/tcp` require `ValidUser` which the edge don't have."""
7982,232947590,"b""Sort of. If the user specified a certificate to use here, you'll use that, otherwise you'll use the usual server certificate as normal."""
7982,232947923,"b""Which we'll need to change when we have pull ETL?"""
7982,232948420,"b""Yes, _except_ that after that has been called, you call to `output.Add` directly, so it isn't in the right order"""
7982,232948667,b'So have another endpoint that would do the validation properly.\r\nThe problem of getting internal ip is something we want to avoid'
7982,232949216,b'internal'
7982,232949519,"b""Why do you need to keep its state on the central cluster?  You may have many of them, so you don't really have _state_ here.\r\nThe problem isn't the int, the problem is the cast throwing away 50% of the bits without mixing them.\r\n"""
7982,232949743,"b'if all of them are required, check for nulls'"
7982,232949970,"b""No, you don't.\r\nWhen you update a pull replication task you can provide it with a certificate, that will be stored internally (encrypted) and used.\r\nNo reuse between pull replications"""
7982,232950101,"b""This is something that we'll want to use for pull ETL as well"""
7982,232950584,"b""Hm.... you are correct. I didn't take into account the fact that we need this to be cross cluster.\r\nIn this case, I think we can just put the cert (with private key) in the db record and be done with it.\r\nWe already have similarly sensitive stuff with connection strings, and they go to the same location."""
7982,232952823,b'PutPullReplicationOperation?'
7982,232953311,b'string?'
7982,232953418,b'internal'
7982,232964128,b'PullReplication'
7982,232964210,b'42_300'
7982,232965846,b'Maybe do some validation?'
7982,232972616,"b'Is this correct? When specified key does not exist then we want to use the server certificate? If yes, then probably we should check users intention with `string.IsNullOfWhiteSpace(CertificateThumbprint)` ?'"
7982,232973359,b':)'
7982,232973775,"b""put this in 'using' ?"""
7982,232973990,b'No need if you are disposing the parent (rawDatabaseRecord) ?'
7982,232974120,b'Can this return false? Exception maybe in that case?'
7982,232974495,b'rename to Definition'
7982,232976340,b'centralDefinition ?'
7982,232977542,b'SSL one was moved to SlowTests. This can be removed.'
7982,232978962,b'can we rename to Options? In most cases we are using Options.'
7982,232979059,b'Just Enabled?'
7982,232980448,b'PullReplications'
7982,232981047,"b'If this happens often, then we can use ReadRawRecord?'"
7982,233368734,"b'That is a really good point. If the user specified a value, it _must_ exists or generate an error'"
7982,233430691,"b""I'm bad with names... how does `FeatureDefinitionName` sounds."""
7982,233566578,b'`AuthorizationFor` is probably better.'
7982,235684069,b'You can assume that this is valid here.'
7982,235684289,"b'Change to Dictionary<thubmprint, base64 cert>'"
7982,235684451,"b""Now that you have a match, you need to note that you _don't_ need to validate the certificate here.\r\nWhy? Because it was already validated (expiration, etc) by the calling code."""
7982,235684537,b'remove'
7982,235684694,b'remove'
7982,235685704,"b""Remove this, we don't need to validate this"""
7982,235685752,"b'Should be a dictionary<thumb, base 64 cert>'"
7982,235685932,"b'Just validating the thumbprint is fine, need to note here that we rely on calling code to validate the actual cert (expiration, etc)'"
7982,235685968,b'Remove'
7982,235686023,b'Remove'
7982,235686076,b'Remove'
7982,235686447,b'You cannot do this. This leaks the existence of a database by the fact that you are using `DatabaseRequestHandler`\r\nYou need to use a `RequestHandler` and accept the database name externally.'
7982,235686694,"b""Should allow, this is already handled externally and not here.\r\nIf we don't have HTTPS, we always allow."""
7982,235686799,"b'This is invalid, and even if we have restricted here, we should abort it early'"
7982,235686924,"b'If the cert has access, we get access.\r\n'"
7982,235687006,b'This is invalid'
7982,235687848,"b'create another case and if this fails, `goto null` will handle this'"
7982,235688052,b'nope'
7982,235688178,b'nope'
7982,235688216,b'nope'
7982,238095287,"b'This is wrong.  There no scenario where we have an ""anonymous"" pull replication, which is this is what this looks like.\r\nIf `Certificates` is null / empty, we return a negative result and do not allow access.\r\n\r\nNote that this is different from the behavior when we use a known client certificate that already have access to this node / database.\r\n'"
7982,238095600,b'@grisha-kotler Please check this. http://issues.hibernatingrhinos.com/issue/RavenDB-12415'
7982,238096067,b'Stilling missing handling for this'
7982,238096083,b'remove this line'
7982,238096087,b'remove this line'
7982,238096104,b'Probably a good idea'
7982,238096179,b'Probably need to validate that this is still valid here. \r\nNeed to revalidate if the pull replication def changed (especially if just a cert was removed)'
7982,238096545,"b'what about retries, backoff strategy, etc?'"
7982,238096638,"b""What if the pull replication doesn't exists?\r\nNote that in this case we must provide the same error as if the cert doesn't exists.\r\nWhat error do we get from missing db in this case, for that matter?"""
7982,238097265,b'Where is the validation now?'
7982,238097266,b'Where is the validation now?'
7982,238097300,b'Do you actually need to do any of the changes to this file now?'
7982,238097323,"b""what happens if the db doesn't exists? What happens if the pull replication doesn't exists?"""
7982,238097341,"b""This isn't true. The certificate is allowed to _some_ database, not necessarily this one."""
7982,238098419,"b'If the db doesn\'t exists `throw new DatabaseDoesNotExistException($""The database \'{database}\' doesn\'t exists."")`\r\nIf the pull replication doesn\'t exists `throw new InvalidOperationException($""Pull replication with the name \'{definitionName}\' isn\'t defined for the database \'{database}\'."");`'"
7982,238098499,"b""Don't think so. But since it was changed in different commits I'm not sure I can simply revert the file in this PR.   """
7982,238098542,"b'Both of which leak information that you may not be allowed to see. \r\nWe need to make sure that regardless of the method you use, if you don\'t have access to the db / pull replication, we reply with the same message:\r\n\r\n""Cannot connect to \'{pullReplicationName}\' on \'{database}\'. The database or task may not exists or you don\'t have the credentials to access it""`'"
7982,238098554,b'yes'
8148,238627723,"b""Why not to use megabytes? Let's think about embedded solutions e.g. running on raspberry pi when users could set it much lower value"""
8148,238631689,b'why is it commented?'
8148,238634090,"b""Let's say that:\r\n\r\n- CurrentCount: 2\r\n- StorageEnvironment.MaxConcurrentFlushes: 20\r\n\r\n2 < 10 - true, so we have enough resources available but we won't do the flush after this change\r\n"""
8148,238634397,b'flash -> flush'
8148,238635047,"b""Where do we have this logic now? If those aren't relevant could you explain how it's supposed to work?"""
8148,238636674,"b""Do we really need to remove them? Shouldn't we adjust to the current behavior? Maybe create new ones to verify how it currently works. I'm really reluctant to remove any  Voron tests unless there is a really good reason.\r\n\r\nPlease check the original issue: http://issues.hibernatingrhinos.com/issue/RavenDB-8515"""
8148,238640259,b'This is current flushes available'
8148,238644721,"b""Ouch. You're absolutely right. Very misleading name which made that we changed it quite recently CC @grisha-kotler """
8148,238645790,b'The sync operation run on [idle](https://github.com/ravendb/ravendb/pull/8148/files#diff-87366e0cab8e4af884a9411d055bbc61R72)\r\n and when it gets to the [configured threshold](https://github.com/ravendb/ravendb/pull/8148/files#diff-87366e0cab8e4af884a9411d055bbc61R126)\r\n'
8148,238655866,"b""But the previous threshold was `32 * Constants.Size.Megabyte` while now we have 1GB by default, right?\r\n\r\nWe also dropped the concept of forcing the sync after flush if we haven't done it since 3 minutes regardless the threshold and idleness? Please check http://issues.hibernatingrhinos.com/issue/RavenDB-10238 """
8148,238663367,"b'Fix the comment size\r\nIn general, the entry name should indicate the unit, too. \r\n`Storage.JournalSizeThresholdInMB`'"
8148,238663860,"b""We don't want to force it to sync now, just flushing is fine, and then letting the OS deal with background flushing.\r\nThe comment should probably be removed, though"""
8148,238664276,b'Should use `CompareExchange` here. \r\nBut note that we should verify that it is not hanging there with `InSync` all the time if there is an error'
8148,238664651,"b'Yes, I think we should rename this to be clearer'"
8148,238665634,"b'Sort of, the idea is that the trigger for a sync is the size of the journals, not anything else.\r\nFlush is because of scratch, sync because of journals.\r\n'"
8148,238666507,"b'Yes, we want to keep them, in spirit, at least.'"
8148,238670195,"b""We don't have a test for http://issues.hibernatingrhinos.com/issue/RavenDB-10238 but from some reason we didn't hit 32MB threshold then so we might not hit it now.\r\n\r\nCC @aviviadi """
8148,238938215,"b""I have looked at this for a long time and correct me if I'm wrong.\r\n[These tests are check for the possibility of one sync get to `UpdateDatabaseStateAfterSync`\r\nwhile another one started a new sync](https://github.com/ravendb/ravendb/pull/8148/files#diff-33af42ec0439152b32cc47c6739f3211L910).\r\nbut there is `_fsyncLock` that need to be obtained( [before](https://github.com/ravendb/ravendb/pull/8148/files#diff-33af42ec0439152b32cc47c6739f3211L980)/ [after](https://github.com/ravendb/ravendb/pull/8148/files#diff-33af42ec0439152b32cc47c6739f3211R829) ). There is [code](https://github.com/ravendb/ravendb/pull/8148/files#diff-33af42ec0439152b32cc47c6739f3211L870) in the program that dedicated just for the [test](https://github.com/ravendb/ravendb/pull/8148/files#diff-d783b9bf1a95ac3207ff8ef49e16f12fL70) and if I remove the code the test will not compile. """
8148,238940947,"b""In my checks, I ran a patch on 28.66 KB documents that each iteration multiple the document by 100\r\nThere were transactions that took for up to 7-8 seconds and lead to `SyncEnvironments(force: true);` even the system was in pressure and didn't get to journals threshold.\r\nMaybe we should raise the time before `SyncEnvironments(force: true);`  ?"""
8148,238966138,"b""We might not to have _exactly_ this tests but modify it or write something similar that will assure we won't suffer from the issue that made we added this test.\r\n\r\nNote that `UpdateDatabaseStateAfterSync` calls `UpdateFileHeaderAfterDataFileSync(` and it's important to ensure we won't call it with outdated values (`SyncOperation._lastSyncedJournal` etc)\r\n\r\nHow do we prevent from happening it now?\r\n\r\n@aviviadi could you take a look here?"""
8148,238969841,"b'Probably we should have better detection of ""no activity"". Maybe we could use `StorageEnvironment.LastWorkTime`, also check if there is no active write transaction right now'"
8148,238978662,"b""We don't care about active tx, we care that there hasn't been a flush (on any storage) for long enough that we can can doing other stuff"""
8148,239366987,b'We do `+=` but never `-=` and we have just one instance of `LockTaskResponsible` so we only append tasks and always execute all of them.'
8148,239368707,"b'@haludi Please check above comment, in particular ""How do we prevent from happening it now?"". I think it\'s handled by `LockTaskResponsible` now but please confirm'"
8127,237384382,"b""Shouldn't this be a list? What if someone would call `context.CreateBlittableMetadataModifier` twice on the same `context`? Then we won't clear allocations of the first one."""
8127,237461421,"b'This is odd, why have a delegate here?'"
8127,237461617,"b'If you need the options, better to pass them explicitly, rather than use the lambda.\r\nThe issue is that we are usually using this in hot spots.'"
8127,237461792,"b'Better yet, after you get the modifier from the context, just set these properties directly.'"
8127,238092759,"b""I'll replace this with register for cleanup"""
8127,238094915,"b'Why do we have the `IBlittableMetadataModifier`, then? If there is just one impl?'"
8127,238094943,"b'I think that this is a good idea, yes'"
8127,238096113,b'This is an excellent question'
8127,238096204,"b""If this is the case then we don't really need to do anything but generate a new modifier per builder.\r\nMaybe we should just remove the interface generate a new modifier and that's all."""
8127,238096440,"b'Fine by me. Can you check if we can make this a struct, to avoid the allocation per doc?'"
8127,238096500,b'okay the reason that this is an interface is because the builder reside in sparrow and the modifier is in the server so this is just for decoupling purpeses '
8127,238099465,b'modifying it to a struct breaks the code since it is passed as a parameter'
8127,238173771,b'Any particular reason to create a dedicated constructor for that? Why not to leave it as it was - create an instance of the modifier and set those options then'
8127,238174493,"b'No need to create a dedicated method. Just change the signature of the already existing method:\r\n`private BlittableJsonDocumentBuilder CreateBuilder(JsonOperationContext context, BlittableMetadataModifier modifier)`\r\n\r\nso `modifier` could be optional - `modifier = null`'"
8127,238267827,b'I always wanted to kill `IBlittableMetadataModifier` but I was reluctant to do so because I didnt fully grasp why it was there in the first place. Probably a good idea to look into that because that causes slowdowns down the chain.'
8127,238268127,b'A technique similar to what I do on the Allocators branch could probably works. '
8127,239112349,"b""let's leave it to the greater refactoring issue"""
8127,239112412,b'same'
8148,239377837,b'In `RunTaskIfNotAlreadyRan` method the `_task` field assigned to `null` [<sup>ref</sup>](RunTaskIfNotAlreadyRan)'
8148,239379132,"b""I didn't notice that. Makes sense"""
8179,239496233,"b""Let's wrap it in `try / finally`"""
7982,240026559,"b'You are only checking this _when the connection is started_, you need to also check it whenever the configuration changes and abort any existing connections'"
7982,240026744,b'This is done under `HandleCentralPullReplication`.'
8172,239436523,b'GetCscWriter -> GetCsvWriter ?'
8172,239437879,"b'Why do we have default value for `csvFileName = ""export""` while we are always overwriting it here? So the default it\'s just a prefix. Let\'s reflect that in parameter name: `csvFileName` -> `csvFilePrefixName`  '"
8172,239438856,"b'We never check for the value of `debug` variable. For now we have only `""entries""`. But in the future we might have more options. Let\'s throw if we get unexpected value here.'"
8172,239438938,b'exists -> exist'
8172,239439191,"b'`StartsWith(""csv"")` ? Shouldn\'t be exact match (case insensitive)?'"
8172,239442040,"b""Let's refactor `IndexEntries()` method so it will just call `IndexEntriesQueryInternal()`. See how `Query` is implemented"""
8172,239442197,"b""We already have the same piece of code in `QueryInternal` let's extract it to a private method"""
8172,239444749,b'It appears this class is the same as `StreamDocumentQueryResult`. Can we exact most of the code to a base class or have a generic `StreamDocumentQueryResult<T>` ?'
8172,239447468,b'Seems like only `void AddResult` needs to be overridden in both implementations'
8172,239457614,b'done'
8172,239457700,b'done'
8172,239460731,b'done'
8172,239480073,b'done'
8172,239482330,"b'its sent as {format: ""csv""} from query.ts, therefore it cant be anything aside ""csv"".'"
8172,239482863,b'done'
8172,239485084,"b""If you send a request directly from a browser:\r\n- streams/queries?debug=entries&format=CSV - will fail (it's case sensitive currently)\r\n- streams/queries?debug=entries&format=csveeeee - won't fail but it should because we don't support `csveeee` format"""
8172,239493343,"b'done, but currently going directly to the URL:\r\n- streams/queries?format=csv&debug=entries\r\n\r\nthrows System.InvalidOperationException'"
8172,239494069,b'done'
8172,239495689,"b'Because the actual query is missing, right? I just wanted to give an example, not fully working URL'"
8172,239500161,b'done'
8172,239727674,"b""The value of `debug` should to be checked here, not inside `GetIndexEntriesQueryResultWriter`. If we add another debug option we'll call a dedicated method to handle it here, not from `GetIndexEntriesQueryResultWriter`"""
8172,239729001,b'GetAnyWrites -> HasAnyWrites'
8172,239729252,b'BTW the above can be just properties e.g. `protected IStreamQueryResultWriter<T> Writer => _writer`'
8172,239732737,b'please avoid using any as a type.\r\n'
8172,240028926,b'done'
8172,240029170,b'done'
8172,240030869,b'done'
8193,240105221,"b'That will almost always be either `string` of `char[]`, we can check for them explicitly'"
8193,240105371,b'Can we avoid `.Cast<object>()` ?'
8193,240127002,b'best option considering performance / allocations right? please update the comment to reflect that'
8193,240156975,"b'done, i am checking for\r\nif (value is char[] chars) AND if (value is string)\r\ninstead'"
8193,240157268,"b'done, sorry thats a note to myself that I forgot to delete.'"
8193,240158277,b'should I cast each member of enumerable to object in a loop?'
8193,240197413,"b""I think that passing `DynamicNullObject` would make it will throw but it shouldn't. It's a bit dangerous, I would drop that check to avoid possible regression bug in indexing."""
8193,240201667,"b""Please check tests: http://jenkins.hibernatingrhinos.com/job/PR_Tests_v4.1/2195/testReport/\r\n\r\nI'm pretty sure they failed due to this check"""
8193,240214844,b'done'
8193,240536845,"b""there might be some perf benefit checking for IList **if** it's common input, now enumerator is always allocated vs direct indexing using old-school for-loop"""
8193,240554030,"b'I am not sure it will work, \r\nthe typeof value received here is object, so in both cases (IList or IEnuramble) we will have to cast it. Because we want to just enumerate on collection (we dont need the indexes that are present in lists) I dont see a point to make an if-case for IList type.'"
8193,240561490,"b'Fair enough, I merely wanted to point out there can also be a performance difference which way you do it. [Here\'s some numbers](https://blog.lahma.net/2018/11/optimizing-jint-part-4-interfaces-are.html) for iterating the same List with different casts. So not entirely related whether you need the indexes used when iterating.\r\n\r\nBut as said, highly usage scenario dependent (if most are not lists, no point of having extra complexity). With IList there would still be interface dispatch slowing things down, but ""a lot"" faster than iterating IEnumerable.'"
8193,240567586,"b""What do we get here depends on an index definition - so can't assume it will be IList mostly"""
8186,240033603,"b""Let's wrap this in a using, as it was.\r\nWe first create the file stream, then create the encrypting stream\r\nBoth of which are in a using statement.\r\n"""
8186,240033616,"b'We really care about the `FlushToDIsk`, mind, so we need to call the outer stream anyway'"
8186,240033629,b'These two consts should be defined only once'
8186,240033703,b'This is duplicated code from the decrypting one'
8186,240033744,b'Need proper error message here.'
8186,240033750,b'Explain that we are missing the header'
8186,240033756,b'Explain failure to init state'
8186,240033762,b'Explain failure to decrypt'
8186,240033775,"b""In particular, mention that the key might be wrong.\r\nProbably need this on other errors as well.\r\nOf course, don't include the key in the error"""
8186,240033779,"b'Test this with the wrong file, we must provide good errors here for users'"
8186,240033789,b'Provide proper error message here'
8186,240033800,"b'Do this within a `using` statement, like the previous comment'"
8186,240033831,"b'Probably better to do this far in the future, and trigger the backup manually.\r\nOtherwise, we might have it running automatically on us'"
8186,240033843,b'Same'
8186,240033848,b'Create a test on restoring with _wrong_ key'
8186,240121323,"b""That's the public key, right? Can we rename to be explicit about that in our API?"""
8186,240121598,"b""Let's throw in `default` (just in case)"""
8186,240122160,b'Can we revert this?'
8186,240123051,"b'This is the _secret_ key, not public key'"
8186,240123153,"b'we are using spans, so likely not.\r\nIn general, in 4.2, we are using the latest'"
8186,240124086,"b'Okay. The issue description somehow made me think it\'s a public key - ""1. The user supplies a public key and keeps the private key safe ..."" http://issues.hibernatingrhinos.com/issue/RavenDB-10683\r\n\r\nAnyway, I think it\'s better to be explicit so maybe call is `SecretKey` ?'"
8186,240124226,"b'Yes, we changed the behavior along the way'"
8186,240911040,b'Please apply the fix in separate PR'
8186,240911951,b'ok'
8204,240570861,"b'The issue description says: ""We should display 100 in such case."" Shouldn\'t we have `if (cpuUsage > 100) cpuUsage  = 100` ?'"
8204,240925512,b'fixed'
8212,240983807,b'What do you mean in this comment?'
8212,240984224,"b""Don't we need to clear the `_visited` here as well?"""
8215,241011811,b'`GC.WaitForPendingFinalizers` here\r\nAnd remove the delay'
8215,241015218,b'done'
8213,240983222,"b'Same issue below, line 67'"
8215,241022226,"b'This line should be just before `try`. If we failed here from any reason then running the finally clause could throw another exception (not in this case probably, but in general)'"
8215,241022290,b'RavenDB-12481 ?'
8215,241023913,"b""I wonder if we could somehow check here that `sender` is the guy that was causing the issue. I'm a bit worried that we can have failures of this tests due to other unknown unobserved tasks (which might be actually fine - something in server size)"""
8215,241026259,"b'just added it to mention that this test also checks the UnobservedTask from RavenDB-12481,'"
8215,241026766,"b'for now it checks all UnobservedTaskException, \r\n I can check if args or sender is not null if it is check if its equal to exceptions that I want to track.'"
8215,241028352,b'ok'
8215,241032468,"b""I'm pretty sure `sender` and `args` will never be null. I don't really know how to assure that the test can fail only due to the task spawn here. Maybe that won't be a problem."""
8216,241011333,"b'We can just rename the 2nd alias to be an anonymous missing one, no, using `_`?'"
8216,241011407,b'And update the previous one as well'
8188,240033480,b'where are you reloading the `_task`_ instance?'
8188,240033495,"b""This won't necessarily work. Use an `ManualResetEvent` instead"""
8188,240033504,"b""Let's avoid creating very long test, we can use events to coordinate this"""
8188,240033509,b'This should be set as the first thing'
8188,240033517,"b'You are spawning a lot of threads, with no error handling or waiting for them to complete'"
8188,240033528,b'Please add comments explaining what / how you are testing this'
8188,240033532,b'Use `ThreadPool` for this'
8188,240033537,b'Or just `Task.Run`'
8188,240033555,b'`Task.Run`'
8188,240033564,b'`Task.Run`'
8188,240033568,b'`Task.Run`'
8188,240033571,b'`Task.Run`'
8188,240107729,b'It looks you changed the formatting - 2 spaces of indent instead of 4 what resulted in modifying _entire_ file. Please revert it.'
8188,240108487,b'You need to do in test: \r\n```\r\nprotected override void Configure(StorageEnvironmentOptions options)\r\n        {\r\n            options.ManualFlushing = true;\r\n        }\r\n```'
8188,240108740,b'Where do we wait for it?'
8188,240298196,b'In the beginning of `WaitForTaskToBeDone` fuction [<sup>ref</sup>](https://github.com/ravendb/ravendb/pull/8188/files#diff-33af42ec0439152b32cc47c6739f3211R960) if I understand the question wright.'
8188,240374894,"b""No, I'm refering to loading the value on the variable, which may be cached in a register.\r\nTalk to me about this tomorrow, please"""
8188,240582902,b'Why did we switch from ` _task += task;` to `_task = task` ? '
8188,240585500,"b""In the beginning, I thought to allow adding more than one task but I realize this can lead to a problem in error handling when the lock owner runs the tasks and there is more than one and one of them throw an exception. And because we don't need it now I replace it to `=` to be more explicit about the usage and I added `Debug.Assert(_task == null);` """
8188,240932681,"b'For now, the implementation is every call to  `RunTaskIfNotAlreadyRan` only one assigned task executes.\r\nIs it make sense to change it to run all the assigned tasks?'"
8188,240977775,"b""No, just have a single one, we'll re-execute it soon anyway"""
8188,241025234,b'Amount -> Count ? or NumberOfJournalsThreshold ?'
8188,241025711,b'Maybe in order to underline it applies to sync operation add Sync prefix - SyncJournalsCountThreshold ?'
8188,241026270,b'Amount -> Count'
8188,241027502,b'`1 * (long)Constants.Size.Gigabyte;` sure ? we switched from bytes threshold to number of files'
8188,241027549,b'Amount -> Count'
8215,241307341,"b'Do we get the task itself? We might be able to get better logs on what it is.\r\nIf it fails, we can handle that as well'"
8213,241307876,"b""I'm trying to think if there is any case where we want a `where` without a `select`\r\n`[Friend where startsWith(Friend, $prefix)]` looks like the only thing, but that seems... odd"""
8215,241341908,"b""Okay, it seems we have first failure of this test:\r\n\r\nhttp://jenkins.hibernatingrhinos.com/job/PR_Tests_v4.1/2223/testReport/junit/SlowTests.Issues/RavenDB_12193/Should_Throw_On_UnobservedTaskException/\r\n\r\nIt's from testing https://github.com/ravendb/ravendb/pull/8159 PR"""
8215,241356471,"b""BTW I've just found we have: https://github.com/ravendb/ravendb/blob/436d63cd0b9b42473d7dc0945b8f4ebd2be6b2a3/test/Tests.Infrastructure/TestBase.cs#L70-L85\r\n\r\nRegarding the above failure, personally I'm fine with skipping this test (but leave it with comment so one can run it manually if needed) if we cannot make it behave consistently. This wasn't a but that made some functionality wasn't working."""
8217,241047666,"b'Also, `LazyCompressedStringValue`'"
8217,241047835,"b""I'm pretty sure that we don't want this. What if we have another method call here? `search`, for example, which isn't supported. """
8217,241048215,"b'`exact(Field, $argThatIsNull)` is valid.'"
8217,241063755,b'You want me to throw? I was asked not to throw from queries before.'
8217,241290084,"b""Throwing when the query itself is invalid - okay.\r\nIn this case, you are using a method that isn't supported.\r\n\r\nThrowing when the query is valid and some of the docs do not match the expected shape - not okay.\r\n\r\nIt is about consistency.\r\nIf we have a query that would fail for everything, great. Users won't issue that.\r\nIF we have a query that can fail if the data is bad, users might run into that in production, which is _bad_"""
8217,241290633,"b""Am I'm missing something? You are still not checking that `null` is valid.\r\nConsider the case where the field itself is null, are you are getting `null` as a arg.\r\nYou aren't handling this, but you should.\r\nAlso, what about things like `Name != $name` ?\r\nYou have handled just the equality case, which isn't right.\r\n\r\nAlso, `Name = $foo AND Age > 1` is valid.\r\nAlso, `exact(Age > 2)` is also valid (in this case, the `exact` is doing nothing, obviously"""
8217,241428411,b'this is not null value this is a null because of the casting is null'
8217,241428909,"b""also exact(Age > 2 ) is strange i wouldn't expect it to work"""
8217,241431655,"b'It works for regular queries, should work as well\r\n`value is LazyStringValue lsv` returns false for null values.\r\n\r\nSo a null field value to a null arg will return false but should return true'"
8217,241465785,b'I have added a test showing null args are been matched correctly'
8212,241471594,"b""Don't think so, because we are backtracking + clearing ```_visited``` only in the block that comes after ```if (top.Matches == null || top.Matches.Count == 0)```\r\n(https://github.com/myarichuk/ravendb/blob/RavenDB-12263/src/Raven.Server/Documents/Queries/Graph/RecursionQueryStep.cs#L368)"""
8219,241305379,b'Why did you remove `PageModifiedInReduceTree`? \r\nIt made that  `RavenDB_11643.PageModificationInAnyTreeMustRemoveItFromListOfFreedPagesInAllStores` failed (http://jenkins.hibernatingrhinos.com/job/PR_Tests_v4.1/2220/)\r\n\r\nPlease check https://github.com/ravendb/ravendb/pull/7690/ it was added there to handle edge case'
8219,241306058,b'How this can be called multiple times for the same tree instance? `InitializeTree` is supposed to be called just once'
8219,241326091,b'Maybe by IterateTrees?'
8219,241326279,b'StringComparer.OrdinalIgnoreCase?'
8219,241330987,"b""It's used in debug endpoint only for Map-reduce visualizer purposes, so not very likely I think. Those are different instances of trees anyway so that shoudn't matter"""
8219,241343365,"b'It gets called once per every tree. So in essence it will create a linear list of trees per batch, causing a huge slowdown and lots of wasted effort. Just to give you an idea a 24000 batch will generate 500M calls to `.Remove()`'"
8219,241343616,b'Back to the drawing board then. I need to understand what is the rationale of that edge case. Can you elaborate?'
8219,241347074,"b'Please check the commit message, and comment in test of https://github.com/ravendb/ravendb/pull/7690 PR. It would be probably the easiest to debug this test to see what is actually going on.\r\n\r\nThe main problem was that a page (_p1_) marked as _free_ when processing one reduce tree (_t1_), can be allocated by another reduce tree (_t2_). In the reduce phase, we go over the trees and remove the aggregation results for a pages that were marked as free:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/436d63cd0b9b42473d7dc0945b8f4ebd2be6b2a3/src/Raven.Server/Documents/Indexes/MapReduce/ReduceMapResultsBase.cs#L332-L336\r\n\r\nIn result, processing _t2_ tree added an entry to PageNumberToReduceResult table for _p1_ page but next processing of _t1_ removed it from that table.'"
8219,241348061,"b""So yes, my fix was: if a page is modified (in any tree), let's remove it from _all_ `FreedPages` collections (for every `MapReduceResultsStore`)"""
8219,241348956,"b""Okay, I understand. You're right it might affect the performance - I haven't thought about it. But still don't understand  how `_alreadyInitializedTrees.Contains(treeName)` can return `true` as `InitializeTree ` is called once"""
8219,241349379,b'Edited the above comment: can return false -> can return true'
8219,241350565,"b'Because now there is a single HashMap per each per `MapReduceStore`. Having said that will see if that condition ever triggers, I started trying to figure out where was the multiplicative factor be generated, and could be useless. '"
8219,241352305,b'ok'
8219,241360127,b'Is not reusing pages at all a viable strategy? What about having a shared FreedPages among `MapReduceResultsStore`?\r\n'
8219,241370180,"b'Shared `FreedPages` makes sense to me. Since this code:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/436d63cd0b9b42473d7dc0945b8f4ebd2be6b2a3/src/Raven.Server/Documents/Indexes/MapReduce/ReduceMapResultsBase.cs#L332-L336\r\n\r\nDoesn\'t need to be run in ""contex"" of any particular tree, we can run it before starting processing any tree (`HandleTreeReduction`) just once. That should be fine I think (tests will validate that for sure).'"
8219,241372086,"b""One potential problem, `HandleTreeReduction` might be called recursively\r\n\r\nhttps://github.com/ravendb/ravendb/blob/436d63cd0b9b42473d7dc0945b8f4ebd2be6b2a3/src/Raven.Server/Documents/Indexes/MapReduce/ReduceMapResultsBase.cs#L406-L427\r\n\r\nSo maybe we'll be better of by calling `table.DeleteByKey(pageNumberSlice); ` for shared `FreedPages` _after_ processing all trees"""
8230,241707894,b'TODO arek - we should measure the execution of the below deletions and put it on the indexing graph'
8129,241734896,"b'@grisha-kotler Is this correct? The `{typeof(RavenServer).Assembly.Location}` returns full path and I understand that `.dll` should be removed, but the rest of the path should still be there? When installing on our servers, we are passing full path there.'"
8215,241852624,b'@arekpalinski does this PR include #8159 or we still have that error there? This thing of having to run the slow tests to catch the errors get me sidetracked every day. Have like 3 PRs open that I cannot end up closing. '
8215,241881954,"b""@redknightlois No this PR doesn't include your https://github.com/ravendb/ravendb/pull/8159. Although your PR failed because of the test added here. We saw a few failures when testing PR due to this test so I'll skip it - https://github.com/ravendb/ravendb/pull/8235"""
8240,241978691,"b""Need to make sure that we don't dispose twice.\r\nWe do dispose in `Initialize` (if we there is an exception)"""
8240,241980471,b'Our code is fine with double disposal'
8241,241981117,"b""That isn't the right way to handle this.\r\nWe need to pass options to `IsMatchBy` where we'll configure `Exact=true` and change the behavior here: https://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/Documents/Queries/AST/QueryExpression.cs#L129"""
8236,241970927,b'Maybe the collecting data should be under flush lock?'
8236,241972464,"b""Doesn't actually matter, and might actually impact operations, so let's not do that"""
8241,241983033,"b""This doesn't handle methods methods are not suppose to be handled at that code path i don't understand why this come up now"""
8244,242040856,b'`= null` ?'
8244,242080274,b'We should reset the internal state of the Nullable<bool>'
8238,241974080,b'`Uri.EscapeDataString` for the parameters'
8238,241974093,b'`Uri.EscapeDataString` for the parameters\r\n\r\n'
8238,241974122,b'Why do we have a connection string here? And how do we define the cert?'
8238,241974183,b'Missing `AsHub`'
8238,241974222,b'Should also have this for `HubPullReplications `'
8238,241974234,b'@grisha-kotler '
8238,241974251,b'`Failed = null` would do the same much easier.'
8238,241974260,b'why is this required?'
8238,241974280,b'Probably should add this to the `FromToString`'
8238,241974301,b'Add this to the `FromToString`'
8238,241974343,b'`AsSink`'
8238,241974365,"b'We just initiated the connection, how can we be pull replication here?'"
8238,241974386,b'`AsSink`'
8238,241974583,b'Remove this'
8238,241974586,b'Or change to log statement'
8238,241974590,b'`AsSink`'
8238,241974606,b'`Hub`'
8238,241974664,b'sink'
8238,241974672,b'Why do you need to call this?'
8238,241974709,b'Why are you mutating the `pullReplicationAsSink` here?'
8238,241974733,b'`AsSink`'
8238,241974784,b'Also include ` info.AuthorizationFor` in the error'
8238,241974912,"b""Let's use the same error message on the TCP side as well"""
8238,241974934,b'sinks'
8238,241974940,b'hub'
8238,241974966,"b'If `Mentor` is defined, can we get it here multiple times?'"
8238,241981888,b'The connection string contains the entry points to the hub cluster.\r\n\r\nThis class is only to view the current status of the ongoing task. \r\nThe certificate is defined with the entire Sink at the `/databases/*/admin/tasks/sink-pull-replication` endpoint\r\n\r\n'
8238,241982058,"b""`HubPullReplications` is dictionary so we don't need to worry about duplicate names."""
8238,241982511,"b""Usually we don't care about this because we unregistered when an exception occurred.\r\nHere we gracefully closing the Sink."""
8238,241984106,"b'No, we remove the next node from the member list.'"
8238,242041453,"b""I don't see any other references to connection strings in pull replication. Where is this name from?"""
8238,242041534,"b""What you are doing is making sure that there aren't duplicated names across different types of stuff.\r\nsink pull, external repl, etc.\r\nIt isn't for correctness, it is to avoid confusion with the user"""
8238,242041582,"b'Just abandoning this instance should work well enough, no?'"
8238,242139093,b'Since we dispose in an `async` manner I worry about race between disposing and entering those events.'
8238,242139789,b'`PullReplicationAsSink` inherits from `ExternalReplication` and treated as such on the very beginning.\r\n'
8237,241973454,"b'What about sending the error to the user? Here you just disconnect the connection, which is probably not a good idea.\r\n'"
8237,241973460,"b'The process may take a *long* time, we want to return the operation id and let the user poll the op state.'"
8237,241973597,b'You are missing the window here'
8237,241973687,b'Reverse this'
8237,241973708,"b""We don't open write transactions directly. \r\n_everything_ must go through the transaction merger.\r\nOtherwise, features such as replay won't work."""
8237,241973726,b'This can be a _very_ big list.\r\nNeed to portion it off to several independent operations so as not to block the transaction merger completely.'
8237,241973756,"b""I'm missing concurrency handling here."""
8237,241974033,"b""I don't understand the logic here? \r\nWhy do you care about the revisions configuration here?"""
8237,241974047,"b""This shouldn't matter for the revert.\r\nWe revert _all_ found revisions."""
8237,242065517,b'Maybe just `time` ?\r\nWe are not using `-` anywhere IIRC\r\n'
8237,242068685,b'Need to be moved to Raven.Client'
8237,242068807,b'Need to be moved to Raven.Client'
8237,242069713,"b""If we consider this a 'time machine' feature, then the only value that would make that happen (keep the consistency) would be 'infinite' ?"""
8237,242077499,"b""Shouldn't this be a `break` ?"""
8237,242125719,"b'Think of the following timeline:\r\n1. We request the revert at local etag of 100\r\n2. Some inserted several documents and increase the local etag to 110. \r\n3. We start iteration over the revisions from the top. (from etag 110)\r\n\r\nSo we want to skip those document that was changed after etag 100, but we want to revert the rest.'"
8237,242126377,"b""You mean the default value? \r\nThe revisions aren't sorted by date so theoretically we need to iterate over everything. \r\nSo we are using the `window` for performance sake."""
8237,242185425,"b'Yes I understand that, but using any other value than infinite do not guarantee you consistency? That is my concern.'"
8160,238959167,b'Need to call inner for this'
8160,238959173,b'Need to call inner for this'
8160,238959314,"b'Probably nothing, we unmap it from memory entirely, so I would guess not.\r\nHowever, for temp files, we might want to explicitly discard before unmap, to avoid writing to disk'"
8160,238959374,"b'Same here, in temp files, discard before unmap'"
8160,238960117,"b""It looks like this is called, and then we even though we _have_ ` if (PlatformDetails.CanDiscardMemory)`, it isn't good enough?"""
8160,238977680,b'DiscardVirtualMemory can be used in Windows 8.1 and Server 2012 R2 or newer.\r\n\r\nYou need version 6.3 or higher.'
8160,238977906,b'Can we log this if we failed?\r\n(Debug level?)'
8160,238980815,"b'We should ignore all exceptions here (log this and ""disable"" the discard for all future calls)'"
8160,239215946,"b'We could. Just in debug mode though, not that it makes any difference to know though. It can fail and we will still working properly. '"
8160,239216380,"b'We should figure out which OSs do not support it correctly instead. Logging and disabling is not a good idea, because it hides from us important platform assumptions that are broken. '"
8160,239356977,"b""Maybe we could try it once on server startup and if we fail then log and create an alert?\r\n\r\nNot sure if this call might be expensive but maybe if we fail a few times consecutively then let's skip this call completely."""
8160,239357515,b'WRT my 2nd comment - already answered in https://github.com/ravendb/ravendb/pull/8160#discussion_r239216380'
8160,239558001,"b'No, the problem is when we discard data which is not temporary :)'"
8245,242149822,"b""Don't we need to check that `projectFieldValue` is null here?"""
8245,242157441,"b'Probably (will need to test if it can become null and how), and also we need to test for arrays of primitives that are not strings.\r\nI did this PR because I am not 100% sure that the code so far is good enough - and I mean the code around IsMatchedBy() that I added'"
8251,242210472,b'This will throw NRE on MapPhaseTree'
8251,242254738,b'done'
8249,242271029,"b""I'm not sure if these should be on the client side. \r\nCan this be moved to `IndexQueryServerSide` ?"""
8129,242281172,b'fixed in https://github.com/ravendb/ravendb/pull/8254'
8252,242273784,b'Why are you calling `StoreNextMapResultId` twice? Once in the `try` and once in the `finally` ?'
8252,242289337,"b""This wasn't ported correctly from v4.1. Fixed."""
8249,242302380,"b""I haven't noticed it's in the client, I navigates to the base class, yes this can be moved up to the derived class."""
8251,242324657,b'I think we talked about moving it to the end of the reduce phase. Why not to call it here:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/5951c3593455d7a42024f538bf30183bfc0c2900/src/Raven.Server/Documents/Indexes/MapReduce/ReduceMapResultsBase.cs#L149-L151\r\n\r\n?'
8251,242435532,"b""The problem with calling `StoreNextMapResultId();` here, in `Dispose()`, is that throwing here might hide the previous exception if it was already thrown. In general it's bad idea to have `Dispose` method that can throw I think.\r\n\r\nIf we moved it next to `WriteEtags` it would be called only if we complete the batch, without any unexpected errors, and that's when we actually want to store `NextMapResultId` (otherwise transaction won't be committed anyway)"""
8265,242627186,"b'This should be in try, finally.\r\nWe can have errors during copy, out of disk space, out of memory...'"
8265,242628118,"b'Yeah, I looked into that, but decided not to do it. Worse that can happen is your 512Kb array gets collected. Meanwhile, if you add a Try-Finally you are paying for the cost of exception handling prolog and epilog every time.'"
8267,242699795,b'What is the `true` here stands for?'
8267,242699907,"b""Return false here, we don't want to throw based on the data of the values."""
8268,242701492,"b""I'm assuming that this filters out the collection queries?"""
8268,242703437,"b""Why not re-use the same instance? I don't see it being used for other stuff?"""
8268,242847558,"b""I'm not sure I need to verify this."""
8268,242847165,"b""I can't modify the list while iterating on it, so I need a 'to delete' list anyway so I might as well just create a new one."""
8268,242848868,b'yes a collection query will return null'
8242,241980714,b'why is this initialized here?'
8242,241980719,b'ARM missing\r\n'
8242,241980779,"b""Let's remove this.\r\nI would rather have a dedicated function in PAL that I can hand an error code and get a string back that would hold the error string."""
8242,241980797,"b""Call to PAL, which will allocate a string, which we'll copy and then free."""
8242,241980823,"b'You can define this as `out`, not `ref`'"
8242,241980845,b'Remove this'
8242,241980860,"b'`size` is defined as `int32_t` here, but `uint` in the pinvoke sig'"
8242,241980879,"b""Shouldn't this be moved to header file?"""
8242,241980907,"b'If checking if synced failed, we always sync ? '"
8242,241980926,b'The whole code need re-formatting'
8242,241981070,b'it works (because executed before lib load) and makes logic to put it here in terms of context'
8242,241981133,"b'Why is it init to `$""{toFilename}.win.x64.dll"";` ?'"
8272,242877896,"b'This should be outside the `foreach`, no?'"
8272,242897896,"b'No, we want to clear its state after every page, to avoid filling up the memory with mapped pages in the case of 32 bits'"
8276,242901780,b'Why we removed that?'
8276,242906785,b'I passed it to [_token.ThrowIfCancellationRequested();](https://github.com/ravendb/ravendb/pull/8276/files/cd455fc9b8f00db11d6453bba4822982afda6e07#diff-33af42ec0439152b32cc47c6739f3211R1029). \r\nFor now it will throw exception the `LockTaskResponsible` will save it and [throw it again](https://github.com/ravendb/ravendb/pull/8276/files/cd455fc9b8f00db11d6453bba4822982afda6e07#diff-33af42ec0439152b32cc47c6739f3211R1010) in `WaitForTaskToBeDone` like all exceptions\r\nand just in case of `OperationCanceledException` it will [catch it and return false](https://github.com/ravendb/ravendb/pull/8276/files/cd455fc9b8f00db11d6453bba4822982afda6e07#diff-33af42ec0439152b32cc47c6739f3211R1015)'
8258,242518896,b'You can probably remove this and do the check in the `switch`'
8258,242519019,b'Reformat this'
8251,243033997,b'Done'
8261,242946370,"b""It's `Strict(bool strict = true)` so you could chain it as well"""
8261,242948184,b'Done'
8174,239431886,"b""Isn't this just runaway?"""
8174,239432121,b'There we are using `thread.TotalProcessorTime.TotalMilliseconds`'
8174,239437826,"b""It doesn't provide the actual CPU usage. @karmeli87 maybe we can combine the 2 endpoints?"""
8174,239446734,"b'I think those are 2 different measures. `runaway` measuring from the start-up, while `top` is only for the last second.\r\n\r\nBut we can merge them if you like, the question is how we will order them?'"
8174,240152265,b'Reminder - @grisha-kotler ?'
8174,243050235,b'Merged both endpoints'
8285,243053995,b'@grisha-kotler @arekpalinski Do we need to call it also here?\r\nhttps://github.com/ravendb/ravendb/blob/98d37f5a1f1754ee7062fc4523f4020a47f65cf5/src/Raven.Server/Documents/Indexes/MapReduce/ReduceMapResultsBase.cs#L81-L85'
8285,243054388,"b""The MapResultId shouldn't change if we filtered all results"""
8285,243055770,"b'It looks like it, but wanted to double confirm'"
8266,242698394,"b""This is called on _any_ exception, but isn't the intent just for disk full?"""
8266,242698616,b'Move this to the top of the method.\r\nProbably a good idea to do this on the Write as well'
8266,242698687,"b""Also, on Dispose, so it wouldn't try to create a new stream on another file?"""
8266,242699086,b'Handle the case where this is null and say `space: N/A` or something'
8266,242882226,b'done'
8266,242884272,b'done'
8266,242884924,b'This is for any exception. We have error handling and after a couple of errors we set the index as errored. Unless we do that the index just stops'
8266,242887890,"b""This is okay for me but I'm a bit worried that we'll error indexes very quickly after getting any error here  (e.g. what is the chance we'll recover from the disk full exception, we'll repeat it 10 times and mark the index as errored).\r\n\r\nI wonder if we should have a notion of fallback mode - e.g. after getting end of disk space then wait 10 seconds, and run indexing then.. next wait 20 seconds etc until the max fallback mode duration."""
8266,242893694,"b'Sounds good to me.\r\nWe should also force a cleanup of our state in this case, so a flush / sync of Voron and then ask to remove all the old recylced journals, old scratches, etc.'"
8266,243028441,b'done'
8266,243067708,"b""Why are you doing this? We are effectively waiting twice.\r\nIn any case, worse case we can try again and we'll wait for the sync on the next iteration, no?"""
8266,243091196,b'fixed the calculations'
8263,242856638,"b""Before we mark the transaction as failed let's add the current state of the transaction to the exception message. I'd like to be able to distinguish if the unrecoverable exception was thrown on a transaction in valid state or already marked as errored (just in case)."""
8263,242862246,b'done\r\n'
8263,242898219,b'Just return the enum value and let the `.ToString()` handle this'
8263,242925489,"b'The tx state will be mostly for debugging / troubleshooting so let\'s put it _after_ the actual message (`$""{message}. Current tx state: {lastTxState}""`'"
8263,242976251,b'done'
8263,242976282,b'done'
8285,243184962,"b""Yes, we didn't do any work during the map phase."""
8281,243019943,b'Can we sort the result by actionName?'
8281,243020115,b'Sorting is also needed for the index name'
8281,243182122,b'done'
8281,243189815,"b""let's simply use lodash:\r\n_.sortBy(array, x => x.indexName)"""
8281,243194766,b'done'
8281,243194838,b'Done'
8295,243232403,"b""I don't follow what is going on when an error is thrown here"""
8295,243232548,"b""We'll have entries from previous reads, then try to re-process them?\r\nBut we wait for the next network read?"""
8295,243232765,b'And if this fail?'
8298,243241750,"b""Future note, this should be changed to an options object if/when we'll have more state here"""
8301,243268102,b'What about if there is an _older_ command in the same transaction?'
8301,243270961,"b""Not sure I'm following. \r\nBut as long as we end up with the same state across the cluster it is fine."""
8301,243279019,"b""I wonder if we can get to a state where the database doesn't exist since we haven't created it yet on this node and if so this is a case that could be specific to some nodes and not consistent across the cluster.\r\nI know that if there is a creation command then it should be executed before the deletion but we have a two-phase deletion process and I have a gut feeling that there is an edge case lurking here."""
8301,243281174,"b'No, because this is running in the cluster, so this is running in the same sequence everywhere'"
8301,243300557,b'Should be `RachisApplyException`'
8301,243301778,b'I think that this is not used?'
8301,243303304,b'Copy paste failure :/'
8272,243527082,"b""Usage of wrong variable in the loop - `modifiedPages` instead of `sortedPages`. That's why it wasn't working.\r\n\r\nAlready handled differently in https://github.com/ravendb/ravendb/pull/8303 and removed the overflow checks from here in https://github.com/ravendb/ravendb/pull/8308"""
8272,243589647,b'BTW we could unintentionally skip validation of some pages as this line should be:\r\n`modifedPage + VirtualPagerLegacyExtensions.GetNumberOfPages(ptr) - 1` (note `- 1`)\r\n'
8272,243589802,b'Another case: https://github.com/ravendb/ravendb/pull/8313'
8313,243591577,b'I wonder if we should do better and ensure that `modifiedPage` was really modified in earlier transaction (by collecting not only the page numbers by also ids of transactions when a page was modified). \r\n\r\n@ayende ?'
8313,243753788,"b""We don't care about that, just that the value of the page is valid."""
8304,243334817,b'It would be better to attach to Exited before starting the process.'
8304,243335535,b'Are we expecting here that it might not be killed/exited earlier?'
8304,243754099,b'Better is an understatement. This is required'
8304,243754107,"b""If it didn't, we need to kill it, and the code above certain suggest we try"""
8304,243756759,b'done'
8304,243758551,b'done'
8321,243792891,"b""I don't like this. It just allocates and throw it away.\r\nWhy do we need this to be valid at all if `CollectIntermediateResults` is `false`?"""
8321,243792952,"b'In fact, why do we need it to be different from `_results` ?'"
8323,243803046,b'Here we need to make sure that this is done with InvariantCulture.'
8323,243803082,"b'Same, we need invairant'"
8323,243803119,"b""Let's move this to librvnpal"""
8321,243806650,"b'we could return null but I would still want an indication that the intermediate results are needed, see: https://issues.hibernatingrhinos.com/issue/RavenDB-12572'"
8321,243806664,"b""collection destination doesn't have _result and we need to collect the requested documents."""
8324,243806050,b'`AggregateException` is for when you have multiple errors'
8326,243821646,b'I think this can be changed to:\r\n_currentJournalFileSize = minRequiredSize;\r\nsince in this block:\r\n1. _currentJournalFileSize  > _env.Options.MaxLogFileSize\r\n1. _currentJournalFileSize  < minRequiredSize\r\nthus\r\nminRequiredSize >  _currentJournalFileSize   > _env.Options.MaxLogFileSize => \r\nminRequiredSize >_env.Options.MaxLogFileSize'
8326,243826905,"b'Assume `minRequiredSize` is 33MB in size and `MaxLogFileSize` is 48MB\r\nSo `_currentJournalFileSize` is 64MB initially and is larger than `MaxLogFileSize`\r\n\r\nWe want to set it to the 48MB rather than 33MB in this case, because we want to reduce the number of allocation on the FS.'"
8305,243530877,b'MaxFreeCommittedMemoryToKeepInMb'
8305,243531422,"b'Not sure if this is correct, because we will have a low memory exactly when first EOOM can be thrown and we probably want to do it a bit earlier to give a chance to cleanup a bit and to not throw the EOOM?'"
8305,243754966,b'done'
8305,243755031,"b'I suggest adding another configuration: LowMemoryCommitLimitInMb (by default set to 3 times the MaxFreeCommittedMemoryToKeepInMb).\r\nFor a 16GB machine:\r\nMaxFreeCommittedMemoryToKeepInMb: 128MB, lower than this will throw EOOM\r\nLowMemoryCommitLimitInMb: 384MB, lower than this, will trigger low memory notification'"
8305,243755179,"b'That sounds fine, but it should be at least 512MB by default or 5% (smallest).\r\n'"
8305,243827569,b'done'
8326,243827858,"b""You're right"""
8336,243922806,b'int32_t'
8320,243793006,"b'use `object`, not `dynamic` here'"
8320,243959573,b'done'
8339,243967546,b'What is this for?'
8337,243922946,b'Need to change the `#if DEBUG` for the entire finalizer.'
8337,243922968,"b""Need to change the `#if` to include the whole finalizer. \r\nWe don't need it otherwise"""
8337,243923706,b'Why do you need this?\r\nCan we avoid having a finalizer here entirely?'
8337,243923723,"b""Probably not required. The only thing you do differently is the lock on the `this`, and we _know_ that can't happen here."""
8337,243923729,b'Why `AllocatedMemoryData ` have a finalizer?'
8337,243923736,b'Does `BlittableJsonDocumentBuilder` need a finalizer?'
8337,243923756,"b""Let's just change the behavior of `SingleAttempt` to allow recursive calls"""
8337,243923765,"b'This should not be called during the dispose, I think'"
8337,243923770,b'why not?'
8337,243923778,"b""I don't think this should be required"""
8337,243923785,"b""I don't like this, we should add a `disposing` flag for when we run the actual disposing"""
8337,243962073,b'done'
8337,243962156,b'done'
8337,243962264,"b'yes, the cost of fnialization is greater then the benefit of clearing'"
8337,243962741,"b""It doesn't have one, removing this"""
8337,243962798,"b""what can't happen there? the locking of this?"""
8337,243962875,"b""it doesn't have one, removing this"""
8337,243963019,"b'Yes, if we are in the finalizer, we know no one is locking on `this`'"
8337,243963208,"b""it's not a dispose call, it's a resources release code (structs don't have finalizers..)"""
8337,243963442,"b""It is only _called_ from finalizer. That shouldn't be the case.\r\nYou are `guaranteed` that this is not a valid thing to do there."""
8337,243963771,"b""in the dispose function we do:\r\n1. throw exception if already disposed (we don't really care about it here)\r\n2. return memory to the context (we just did it)\r\n3. raise the IsDisposed flag for the LSV (actually, this one is the more important part..)\r\n\r\nWhat we really want to do is to raise the IsDisposed flag from outside (I'll do just that)\r\n"""
8337,243964560,"b""We need it for the UnmanagedStreamBuffer.Kill, which should destroy it's ManagedPinnedBuffer"""
8337,243964816,"b""I'm changing it so it will just call the _buffer.Dispose, in order to prevent concurrency issues with the disposal of the context"""
8337,243965233,"b'No need, `ManagedPinnedBuffer` already have a finalizer'"
8337,243970077,b'done'
8337,243970105,b'done'
8337,243973691,b'Can this now _ever_ be called from finalizer?'
8337,243973956,"b""Still pretty sure we don't need this"""
8337,243974026,b'Probably no longer required'
8337,243974048,b'Not required'
8337,243974160,b'Do we even need a finalizer here?'
8337,243974180,b'Not required'
8337,243974217,b'That is NOT safe to do. The `ManagedPinnedBuffer` has its own finalizer'
8337,243974307,b'Is this required?'
8337,243974343,"b'Better to change to: `return  _operationModeData.DuringDispose == false;`, no?'"
8337,243974370,b'Same as above'
8337,243983143,"b""that's right, so we don't want to try to enter lock at all"""
8337,243984261,b'you are right'
8337,243984282,b'ok'
8337,243985070,"b'no, we can remove _isFinalizerThread entirely'"
8337,243985173,b'right'
8337,243985229,b'done'
8337,243985283,b'done'
8337,243985344,b'done'
8337,243985402,b'done'
8337,243988896,b'no(relates to comment below)'
8337,243988907,b'right'
8337,243988922,b'yes'
8337,243997399,"b""I don't understand?"""
8324,244163306,"b'On Dispose, this will probably delete the _journalsToDelete before we updated the header files'"
8324,244165048,b'This is _bad_'
8351,244171324,"b""This is wrong, because collection queries should work, the problem is probably that we aren't filtering the ids."""
8351,244528915,b'In the original code we used HasWhereClause and indeed it is needed for id queries since they are collection queries and have a where clause.\r\nSo the quick fix is to add HasWhereClause to the other conditions.\r\nIf we want to support id queries than we need to support it in the IsMatchedBy method and see if the asked id is matched by the where clause in the CollectionDestinationStep'
8370,244631298,"b""I don't particularly like this, because of the allocations. But we can live with this for now"""
8370,244634511,b'We can save the allocation if we implement equality for QueryExpression and its descendants but there are other places using so much more managed memory in graph query that I feel that it is pointless and better handled in v4.5 where we should really think more about the memory footprint of graph queries.'
8370,244637763,"b""At this point, this isn't worth it, I agree. We can wait for the re-impl"""
8383,244697126,"b'No, you need:\r\n\r\n```suggestion\r\n            public long LastFlushedTransactionId => Interlocked.Read(ref _lastFlushed).TransactionId;\r\n```\r\n\r\nIn all places.\r\nThe values are _never_ mutated'"
8383,244697202,b'Interlocked?'
8383,244700347,"b""As we never mutate those values (since `LastFlushState` is the snapshot) I'd mark all of those fields as `readonly` and create a dedicated constructor to assign them"""
8383,244700728,"b""I think it is not necessary here because I don't really care what is the current values. It just needs to be all or nothing and in addition, we are under flush lock or write transaction lock so it will be updated anyway.\r\nMaybe just to be explicit? or there is something else?"""
8383,244700893,b'Great idea'
8383,244700913,"b""Yes, that's fine"""
8383,244701165,"b'O.k. except the `Journal` that assigned so the next sync will see there is nothing more to sync, right?'"
8383,244702054,"b""So actually I don't need `Interlock` here, right?"""
8383,244702209,"b""I'm not following?"""
8383,244702248,"b'Yes, that would be fine without it\r\n'"
8383,244702615,b'Can we set entire `LastFlushState` object as `null` then instead?'
8383,244703091,b'O.k. sound good'
8383,244707145,b'I checked it and this leads to some problems. We lose the information about the `TransactionId` and `JournalId` and the code rely on them in `ApplyLogsToDataFile` and in the gather details for reports'
8383,244708880,b'OK. Then we can leave `Journal` field as not readonly or create a dedicated boolean property (not readonly) to mark that this has been already synced.'
8383,244712285,"b""The journal is assigned only on `UpdateJournalStateUnderWriteTransactionLock`, with the rest\r\nI'm not following on the issue here?"""
8383,244713755,b'See here:\r\nhttps://github.com/ravendb/ravendb/pull/8383/files#diff-33af42ec0439152b32cc47c6739f3211R979\r\n\r\n` lastFlushed.Journal = null;`'
8383,244718714,"b'Better to add a flag, which we can set when we finished syncing.'"
8383,244719007,b'I will use `new SingleUseFlag();`\r\nO.k.?\r\n'
8383,244719739,b'ye'
8385,244729928,b'Changed default from 256 to 128'
8388,244760180,"b""It will be better if we zip those directories and embed the zip files. At the beginning of the test you can take that embedded zip and unpack it to the desired destination. Check 'LegacySmugglerTests'.\r\n\r\nIt is also safer to use 'PathSetting', it will unify the path separators for you (not needed when files are embedded)"""
8388,244770694,b'done'
8393,244958166,"b""Shouldn't we provide a setter to give the user the chance to modify the document?"""
8393,244958638,"b""I'm not sure if this is a good idea. We might want to just have them do that and just set the new instance value, instead of relying on `Modifications`"""
8393,244961253,b'Done'
8376,244642069,"b""what's the purpose of slice here? """
8376,244642115,b'message is: The data files will be created in\r\nso we return here:\r\nThe data files will be created in 3 of the following nodes? '
8376,244642161,b'please remove line break after } and before else ;-)'
8376,244642238,"b""for inline spinner you should use class: 'global-spinner' IIRC"""
8376,244642252,b'no need for $data.'
8376,244642256,b'same here. '
8376,244642344,"b""I wonder if we need 2 separate groups here: recent and not-recent - I know recent are bold on UI. I think we should have single style for both and make sure we don't have duplicates on this list. """
8376,244642358,"b'however .... recent are sorted by usage date and other are sorted A-Z, so maybe we should leave it. '"
8376,244643993,"b""Shouldn't this be disposed?"""
8376,244644008,b'Why 7 seconds? '
8376,244644017,b'Better to also include the value as a number'
8376,244644049,b'Why are we passing the `drivesInfo`?'
8376,244644083,b'Replace with Path.DirectorySeparator'
8376,244644087,b'Use Path.Combine'
8376,244644131,b'What is this for?'
8376,244644151,b'What?!'
8376,244698301,b'fixed'
8376,244698755,b'Yes. For example: 5 nodes in a cluster. Replication factor: 3.\r\nThe data will be created in 3 of the 5 nodes.'
8376,244698851,b'done'
8376,244699111,b'done'
8376,244699300,b'done'
8376,244699309,b'done'
8376,244699748,b'The HttpClient is cached (by the certificate thumbprint)\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Client/Http/RequestExecutor.cs#L132'
8376,244699945,b'No reason. Should it be lower?'
8376,244700698,b'done'
8376,244701202,b'In linux we need it to find the root mount (drive name in Windows)'
8376,244701619,b'done'
8376,244701629,b'done'
8376,244702284,"b""I don't follow?"""
8376,244713199,b'We should use custom RavenCommand instead of doing all of this? We have a RequestExecutor here available.'
8376,244713501,b'Then you would not need any HttpClient here and all of those changes made there.'
8376,244713659,b'I do not see those?'
8376,244713765,b'I do not see that change?'
8376,244714154,b'Name and Path should be parameters to command. Endpoint url should be hardcoded inside the command.'
8376,244716262,b'use command'
8376,244718534,b'Better to take that as an argument and not hard code it'
8376,244718584,"b""Agree, we don't want to manually use these"""
8376,244724393,"b""Wait it will be ' in 3 of the following nodes?'\r\nnot: created in 3 of the 5 nodes.\r\nI think 'created in 3 of the 5 nodes.' is better. """
8376,244766206,b'done'
8376,244767703,b'pushed my changes'
8376,244770235,b'This will display auto complete options when starting to write the path in the studio\r\n![image](https://user-images.githubusercontent.com/6964706/50599226-18895180-0eb6-11e9-916c-a16b02e7c056.png)\r\n'
8376,244796444,b'done'
8376,244796525,b'done'
8376,244796540,b'done'
8376,244796644,b'done'
8376,244796734,b'pushed my changes'
8376,244797347,"b""We need the DrivesInfo in Linux to find the root mount.\r\nThe reason for that is that the provided URL might not exists.\r\nFor example: /mnt/Data/NewDatabase. The root mount is: /mnt/Data/.\r\nRunning the DiskSpaceChecker on a folder that doesn't exist doesn't provide any result.\r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Sparrow/Utils/DiskSpaceChecker.cs#L141"""
8376,244797863,"b""Example: Nodes A & B.\r\nPath: E:\\Temp (Exists on Node A but doesn't exist on Node B).\r\n\r\nThis will output the free space on Node A and output that the path doesn't exist on Node B."""
8376,244821745,"b'Not like this. Create a class that has the full path and an error, not overload the path in this manner.\r\n'"
8376,244976101,b'done'
8376,244976470,b'Can this throw?'
8376,244989450,b'No. It will return false if any error occurs while trying to determine if the path exists.'
8403,245088245,b'Where is the error handling?'
8403,245088262,b'Where is the error handling?'
8403,245088940,"b'You need to also get _out_ the size of the the `journalSize`, it should be a `ref` parameter'"
8403,245089114,"b'```suggestion\r\n           ref Int64 file_size,\r\n```'"
8403,245089242,"b'```suggestion\r\nopen_journal(char* file_name, int32_t mode, int64_t* file_size, void** handle, uint32_t* error_code);\r\n```'"
8403,245089574,b'Mismatched signature'
8405,245087395,"b'This should not be valid, see: RavenDB-12624'"
8416,245504853,"b""Let's change the default timeout to 5 seconds, just in case."""
8416,245504865,"b""Let's check Azure only if AWS is `false`"""
8415,245504277,b'Should be: `obj?.GetType()` ?'
8415,245504290,b'typo: VisitUnknownObject'
8412,245638568,"b'Without ""calling"", not ""to call""'"
8412,245642367,b'Fixed in https://github.com/ravendb/ravendb/pull/8424'
8416,245645241,b'Adding timeout here?'
8416,245645264,b'Timeout?'
8416,245645404,"b'Never mind, I missed this part.'"
8416,245645482,b'Default timeout was changed to 5sec'
8437,245964703,"b""remove the 'a'... click here for detailed instructions"""
8437,245982567,b'force pushed my change. Thanks!'
8440,246127655,"b""What if two of them fail with this error, won't we get aggregate exception then?"""
8440,246144056,b'Fixed'
8436,246041038,"b'No, this is wrong.\r\nThis is server wide, and we have to make sure that this is:\r\n`/admin/debug` and that the permission level is `Operator`'"
8436,246281679,"b'We have single endpoint for every user, please have a look at https://github.com/ravendb/ravendb/pull/8436/files/2bb1368e4f0037cc356ebf5798659055073ce222#diff-e1eadb52a3455ec6c3d3be2636d09b4eR16  we filter to allowed databases. So you get only allowed db in this websocket. \r\n\r\nIs it ok then? '"
8436,246340799,"b'Turn this to a Set, instead.'"
8436,246340892,b'yes'
8436,246343456,b'done'
8419,245632120,b'@myarichuk Try to use `private class` next time'
8419,245639256,b'ok'
8419,245644762,b'Why -2 here?'
8419,245646979,"b'The last item in the path cannot be a ""junction""\r\nAlso, since we are dealing with current and next items and compare between their directions to detect ""junctions"", there is no need to handle the last one'"
8419,245647346,"b""Can you add an assert or failure to check that it can't be, just to be safe?"""
8419,245648410,"b'Sure, I will add more precautions to that area of code. '"
8419,246455841,b'changed it in commit after code review'
8439,246030035,b'Why?'
8439,246030357,"b""You don't need to check for whitespace , the scanner ignores it."""
8439,246034432,"b'You already skipped whitespace here, should be here'"
8439,246034598,b'You missed `_`'
8439,246457220,b'dev artifact - will remove this'
8439,246691577,b'Can we remove that?'
8465,246985969,"b""That doesn't actually work. You don't get a separate thread static per value.\r\nAn option here is to either use `ThreadLocal` or to have `ContextStackThreadReleaser` hold a list of associated pools"""
8465,247024834,"b""The commit message explains it, basically it caused thread id change in one context to affect another one. We suspect it happened because of shared instances of ThreadId members in ContextStackThreadReleaser. After that change above, duplicates in _threadIds were not reproduced, I undesrstand now that the ThreadStatic was ignored, but looking at the releaser's ctor, i think we might not need the thread locality. But yes, we better review it again next week"""
8465,247082203,"b""How could that be? The only way cross thread stuff is when this is finalized.\r\nI'm not seeing how that can happen."""
8422,245658758,b'Validate here that the `initial page size` is a multiple of the page size and at least 64KB'
8422,245659321,"b""Why isn't this a bool?"""
8422,245659420,"b'`FAIL_CODES` -> `PalFailCodes`, or something like that'"
8422,245659473,b'`MMAP_OPTIONS` -> `PalMmapFlags`'
8422,245659561,b'`out _` instead of unused variable'
8422,245659865,b'`MSYNC_OPTIONS` -> `MemorySyncFlags`'
8422,245660095,"b""I don't understand this TODO"""
8422,245660571,b'We need to implement a `SafeHandle` here'
8422,245660867,"b""Let do that through the `SafeHandle`, just make sure that we aren't throwing on dispose"""
8422,245661313,"b'Yes, very much so'"
8422,245661363,b'`out _`'
8422,245661587,b'Why is this not an error?'
8422,245661847,b'This depends on what the failure was.\r\nDid we fail to allocate more disk space ( `DiskFull` or fail to actually mmap the memory `OOM`)'
8422,245662127,b'`MPROTECT_OPTIONS` -> `MemoryProtectionFlags`'
8422,245662271,b'??'
8422,245662984,b'Need to write our own `SafeHandle` impl to take care of this.'
8422,245663547,"b'Only one error code should be returned, you can check the return value to check what was the actual error.'"
8422,245663587,"b'Only one error code should be returned, you can check the return value to check what was the actual error.\r\n\r\n'"
8422,245663785,"b'Kill these two, there is no such thing, we use `bool`'"
8422,245663924,b'```suggestion\r\n            public bool CanPrefetch;\r\n```'
8422,245664023,b'Why unused?'
8422,245664040,b'Why unused?'
8422,245664128,"b""I really don't like the R# notifications, let's fix them """
8422,245664247,b'```suggestion\r\n        public enum FailureFlags : uint\r\n```'
8422,245664319,"b'Use C# naming conventions, not UPPER_CASE'"
8422,245664383,b'This is about all of the stuff in this file'
8422,245664583,"b""This is a bad idea, you are reflecting the OS options to higher level code.\r\nInstead, let's say what we _want_.\r\nAnd unless I miss something, we always pass the same flags."""
8422,245664710,"b""Same, we don't need to expose these flags, we need to say what we want.\r\n`MemoryProtectionFlags` with `ReadOnly`, `ReadWrite` are the only things we use"""
8422,245664972,b'```suggestion\r\n                if (((PalFlags)specialErrnoCodes & PalFlags.ERRNO_SPECIAL_CODES.ENOMEM) != 0 || forceThrowOutOfMemory)\r\n```'
8422,245665054,b'```suggestion\r\n                if (((PalFlags)specialErrnoCodes & PalFlags.ERRNO_SPECIAL_CODES.ENOSPC) != 0)\r\n```'
8422,245665304,"b""Why are you calling `ToString` on the `result`? That wouldn't give a good error message"""
8422,245665413,"b'Same, `lastError` is a string, we need an actual error'"
8422,245665744,b'```suggestion\r\n    bool can_prefetch;\r\n```'
8422,245665983,"b'Also, this probably should be `int`, not `uint`'"
8422,245666408,"b""Should have just one `int32_t` error. We can't expose our internal impl in this manner"""
8422,245666474,b'One error out var'
8422,245666905,"b""`rvn_` prefix is for public stuff, let's use a different one"""
8422,245667293,b'When do we use this?'
8422,245667350,b'When do we use this?\r\n\r\nI really want to avoid copying the structure of the OS flags'
8422,245667707,b'```suggestion\r\n    uint64_t actually_written = 0;\r\n```'
8422,245667763,"b'```suggestion\r\n        int64_t result = pwrite(fd, buffer, count - actually_written, offset + actually_written);\r\n```'"
8422,245667944,b'Use `usleep` and the shorter sleep times'
8422,245671567,"b'Why is this required? we can just explicitly cast to `int32_t`, no?\r\nI believe that this could should be a macro with:\r\n\r\n```\r\n#define PtrToInt(p) ((int32_t)(intptr_t)p))\r\n\r\n```'"
8422,245671655,b'Single out error'
8422,245672089,b'`SUCCESS` ?'
8422,245672384,"b""isn't this done by `O_CREAT` ?"""
8422,245672914,"b""The min here isn't `sys_page_size` but `allocation granularity`, `4KB` on linux, 64Kb on windows, let's always make it 64KB"""
8422,245680298,"b""Let's document here what this means, that we are getting read/write memory, etc. \r\nso the flags that we are actually using and their impact"""
8422,245680485,b'Check that fd != -1 ?'
8422,245681218,"b""I don't understand the signature here.\r\nYou are operating of a file, so that should be first. \r\nwhat is the new_legnth and total allocation for?"""
8422,245681371,b'I assume that total_allocation_size is the current size?  Is this method increasing the size of the allocation?'
8422,245682071,b'single out error'
8422,245682712,"b""Nope, we aren't going to expose the same interface as the OS has, we need to expose our own, much simpler interface"""
8422,245683144,"b'On any failure, we immediately return'"
8422,245683231,"b'```suggestion\r\n        int32_t prefetch_rc = rvn_prefetch_virtual_memory(record.virtual_address, record.number_of_bytes, detailed_error_code);\r\n```'"
8422,245683353,"b""Nope, we don't expose the OS state outside, only our own state / options"""
8422,245683428,"b""Does this include @haludi 's changes?"""
8422,245683544,"b""that isn't a meaningful optimization, we write this very rarely"""
8422,245683901,"b'Can just use `pwrite` here and avoid setting calling `lseek` again.\r\nAlthough, can call `stat` here, which likely will be fastest option '"
8422,245684476,"b'We can probably just do `mmap64` ->`mmap` here, and avoid `MMAP` '"
8422,245684551,"b""All of this is not required. And this is exactly why not.\r\nWe don't need these options, and exposing them cause us problem """
8422,245896844,"b""As suggested from [this](https://stackoverflow.com/questions/20035826/why-dllimport-for-c-bool-as-unmanagedtype-i1-throws-but-as-byte-it-works?lq=1) and [this](https://docs.microsoft.com/en-us/cpp/dotnet/calling-native-functions-from-managed-code?view=vs-2017) C# `bool` must be marshaled (in our case to Int32, or maybe we want to change it to c89's byte?) """
8422,245899896,"b'It is a flag to return null, in order to be consistent with previous implementation (like [here](https://github.com/ravendb/ravendb/blob/v4.1/src/Voron/Impl/Paging/AbstractPager.cs#L315))'"
8422,245900522,"b'unmap exec madvise(DONT_NEED) and then unmap.  madvise might fail and unmap succeed.\r\nshould we fail on that call, should we log it, or should we ignore it? (ignore sounds right to me)'"
8422,245906301,b'I ended up with `[MarshalAs(UnmanagedType.I4)]` for the bool type to make sure we write int32_t into that bool and not something else (as it might change between OSs and compilers)'
8422,245906750,b'but we might have them both fail and we want to log both of them (to understand later if and why we have leftovers)'
8422,245907158,"b'here it makes sense to leave one error code if madvise error should be ignored and maybe even not returning madvise error at all if we are not logging it. Is this still the case? why not leaving the option to read all the failures? (if it is a signature issue, we can implement `(Int32 *)errorCodeArray`)'"
8422,245907472,"b""Is it ok to leave the SafeHandle implementation to the Rvn MMP's Windows part? """
8422,245908002,b'Will be done when we implement other pagers (added to [TODOs](https://issues.hibernatingrhinos.com/issue/RavenDB-12376#focus=streamItem-67-33365-0-0))'
8422,245933396,"b'no, it is not.'"
8422,245935363,b'I want to record the first error but continue with the other ranges. The above suggestion will override the errno if second iteration successful. '
8422,245937722,"b'as a precocious i would like to leave it this way, as :\r\n```\r\nvoid *mmap    (void *addr, size_t len, int prot, int flags, int fildes, off_t off);\r\nvoid *mmap64(void *addr, size_t len, int prot, int flags, int fildes, off64_t off); \r\n``` \r\nin [here](https://www.mkssoftware.com/docs/man3/mmap.3.asp) it states : `The mmap64() function is a part of the large file extensions. `'"
8422,245938315,b'nop.. @haludi will merge later on using this function'
8422,245940958,"b""we don't have rvn_get_file_size anyhow.. """
8422,245941757,b'Simple cast generates compiler warning which want to avoid just here'
8422,245950072,"b'total_allocation_size is the ""previous"" size and this is for knowing if we need to increase the file size or return ""AlloctionNoResize"". \r\nThe new_length.. is the new length to resize to.. '"
8422,245964458,b'> I assume that total_allocation_size is the current size? Is this method increasing the size of the allocation?\r\n\r\nit returns new_length_after_adjustment and the caller sets the total_allocation_size to the new value. '
8422,246008309,"b'`I4` is fine, yes'"
8422,246008441,"b'No, it is a bad idea. We want to exit early'"
8422,246008877,"b""We got an error, and continuing work from there means that we don't know what is our state.\r\ngiven that this is an optimization only, that doesn't matter"""
8422,246009458,"b""But this isn't actually an error. This is good, we don't need to do anything because we are big enough.\r\nFor that matter, can we move this check to the managed code?"""
8422,246009934,"b'No, when we want to `unmap`, that is what we care about.\r\nIf this is a temp file and the `madvice` failed, that is a missed optimization, not something we care about'"
8422,246010464,"b""That doesn't matter, we fail early and return the earlier failure code.\r\nNote that we still want to _close_ the file, but if we are already in error mode, we don't care if that failed."""
8422,246011071,"b""The reasoning behind this is that we can't expose our internal state and behavior outside. That changes over time.\r\nWhat we want to do is to have a common error handling interface.\r\nReturn code, `int32_t` with our own error code.\r\n`detailed_error_code` with the system error code.\r\n\r\nAny additional data you want, must be encoded in the return code, nothing else."""
8422,246012498,"b'Because you are baking the implementation behavior directly into the interface.\r\nWhat if we have a new behavior, we want to not have to change the signature.\r\nFor example, if we decided that encrypted files need to be zeroed first, and that fails, do we now need _another_  error code?\r\n\r\nThat violates design guidelines and something we want to avoid.'"
8422,246012968,"b""No, `SafeHandle` is something that we want for all platforms.\r\nBasically, this is just a way to ensure that if we leak a handle, the GC's finalizer will dispose it."""
8422,246013048,"b'Basically, same as `SafeFileHandle`'"
8422,246013695,"b""so call it `rvn_mmap` instead, I don't like `MMAP`"""
8422,246015147,"b'```//gcc 5.4.0\r\n\r\n#include  <stdio.h>\r\n\r\n\r\nint main(void)\r\n{\r\n    \r\n    void * a = (void*)5;\r\n    int  b = (int)(long)a;\r\n    printf(""Hello, world! %i"", b);\r\n    return 0;\r\n}```\r\n\r\nCompiles with now warnings. Note the _two_ casts, we are being explicit about it'"
8422,246015532,"b'But we already know that in the managed code, so why call out to here anyway?'"
8422,246018713,"b'if we move this back to managed, we need : _nearest_size_to_page_size.  It will not require pinvoke as we already have the page size from get_system_information.  \r\nDo you want to re-implement _nearest_size_to_page_size in managed ?'"
8422,246023397,"b""I4 doesn't work so I am left with U1"""
8422,246026341,"b'We already have the page size in managed code, so there is nothing else we need.\r\nWe can do that in managed code, yes.\r\nStill need to _verify_ that the desired size is page aligned.\r\n'"
8422,246027274,"b""The problem is that the moment we use `char` in here, that mess up alignment, padding, etc.\r\nWe want to ensure that this is not going to cause us (very subtle) problems down the line, so we want to make the compiler's job as simple as possible.\r\nThat means that we have to be strict about alignment, help the compiler avoid the need for padding, etc."""
8422,246027941,"b""I ment - can we delay the implementation to the window's part PR. and then when we do that - also for posix."""
8422,246029414,"b'Why, it is a pretty simple one'"
8422,246029935,b'so we have to cast from bool to int on the pInvoke calling'
8422,246036289,b'Or use `int`'
8422,246332461,"b'So, we are left with the native error code handling `GetNativeErrorString(lastError, msg, out var specialErrnoCodes)` which can return NoMem and NoSpc.  In posix we rely on the native error code returned by the syscalls. in windows we will return NoMem or NoSpc according to exceptions I presume'"
8422,246335690,b'NONE instead of SUCCESS (zero value). it is not Success necessarily '
8422,246339187,b'I originally used Int32.. get back to it ?'
8422,246340057,"b'What we get back (always) is out own codes.\r\nIf they happen to coincide in Linux with something, great.\r\nBut I would worry about that across distros and would rather use our own directly always'"
8422,246340208,b'yes'
8467,246934387,"b""fixed few typos: `Duplicate alias '{finalAlias}' detected. Note: if an alias is not specified, the implicit alias is equal to field name. So a select clause 'select employee.Name, manager.Name' is invalid because it has two fields with the same implicit alias - 'Name'. In order to fix it, use explicit aliases - 'select employee.Name as EmployeeName, manager.Name as ManagerName'`"""
8473,247346153,b'Wh?'
8473,247346197,"b""I don't like all the code associated with it.\r\nI don't think we need to carry it forward"""
8473,247346219,b'Need to remove this'
8473,247346232,b'Probably should remove this'
8473,247346250,b'Need to also have the `ManagedThreadId` here.'
8473,247347646,"b'I would actually feel more comfortable if we\'ll be running with this ""debug"" code for a while, at least until being a bit closer to 4.2 release'"
8473,247406438,b'@ayende ?'
8473,247420761,b'Rename maybe to `InternalId` and we need to check every place we are using this and probably change bunch of those to `ThreadId`'
8473,247420867,b'If we want to keep it then `z` is probably not the best name :)'
8473,247425920,b'This `return` needs to be removed'
8473,247428545,b'I think that the problem with `CleanThreadLocalState` still exists? https://github.com/ppekrol/ravendb/commit/99acb4e904c3938bd1845300b3e67c96d1da98f0#diff-1aa997bd6d5750decc752ea2c476347bR186'
8473,247434077,"b""That's too risky move, I think"""
8473,247434239,"b""I don't like it either, @ayende ?"""
8473,247434717,"b""@ppekrol I've run the slowTests-> kill in the middle scenario, and it worked well"""
8473,247436369,"b'But maybe we should rename it to InternalId, in order for the code to be more correct'"
8473,247437374,b'yes'
8473,247454119,"b""@maximburyak in https://github.com/ravendb/ravendb/pull/8473/commits/0804bbc5ca48fca2564df7293a2c4dd72370f0ba you introduced `ManagedThreadId` but note that nobody uses it right now. The issue is that `Id` filed, which was the managed thread id, was used in multiple places. I think that all of them should use `ManagedThreadId ` after changes made in this PR.\r\n\r\nI'm for renaming `ThreadStats.Id` to `ThreadStats.InternalId`"""
8473,247455866,"b'Some correction, maybe not all of them but at least _some of them_ e.g.\r\n\r\n- https://github.com/ravendb/ravendb/blob/cd1c8edf84f957153e9442e73248c8e889e33427/src/Raven.Server/Utils/ThreadsUsage.cs#L71\r\n\r\n- https://github.com/ravendb/ravendb/blob/cd1c8edf84f957153e9442e73248c8e889e33427/src/Raven.Server/Documents/Handlers/Debugging/MemoryDebugHandler.cs#L287'"
8473,247457986,"b'Yeah, but doesn\'t it look suspicious to you? We were wondering if that can cause other issues.\r\n\r\nIn `~ContextStackThreadReleaser() ` we mark ""slot"" as free by setting `ThreadId = -1; ` and later remove from the dict: `_contextStacksByThreadId.TryRemove`:\r\nhttps://github.com/ravendb/ravendb/blob/1118d10015513c32c29c1b61dba1ff20958bd3fe/src/Sparrow/Json/JsonContextPoolBase.cs#L73-L87\r\n While in `CleanThreadLocalState` we only call `_contextStacksByThreadId.TryRemove`. Shouldn\'t `-1` be set as well?\r\n\r\n'"
8473,247461571,"b'@arekpalinski for debug stuff, we want to use the ManagedThreadId, for any other place, where we want to identify the thread uniquely, we need to use the InternalId'"
8473,247463091,b'Makes sense. So we just need to fix debug stuff usages.'
8473,247467232,"b'yes, we should call the ContextStackThreadReleaser release logic from there, assign null and suppress finalization - it might be more complex than that, updates in next commit'"
8473,247475830,b'done'
8473,247481710,"b'The problem is that the `for` loop will not work as expected. When we fail to do compareExchange on first item, then we are returning and not registering our thread at all.'"
8431,245768272,b'Can we move it to GraphQueryRunner and acces it via Database.QueryRunner.Graph.CurrentlyRunningGraphQueries ?'
8431,245768315,b'Can we move it to GraphQueryRunner and acces it via Database.QueryRunner.Graph.CurrentlyRunningGraphQueries ?'
8431,245768650,"b""'@graph' should be moved to constants e.g. Constants.Documents.Indexing.GraphIndexName"""
8431,245769197,b'Can we use property without space? Maybe `@graph` that you used before?'
8431,245769430,b'Is this used?'
8431,245769452,b'Is this used?'
8431,245795182,"b""Yes, this shouldn't be on `DocumentDatabase`"""
8431,245795304,"b""Why do we need a separate behavior for graph queries? Can't we use the existing running queries for the same thing?"""
8431,245795557,"b""I really don't like it being separate. \r\nThese are just queries, and should be treated the same."""
8476,247478740,"b""Don't we need to use `WriteError` here?"""
8476,247478792,"b""Don't we need to use WriteError here?"""
8476,247478813,b'And return `false` ?'
8476,247478821,b'And return `false` ?'
8473,247491765,b'done'
8340,243968605,b'why `ToLower`?'
8340,243968710,"b""Let's also validate that the value is `true`"""
8340,243968907,"b""I think you should move this to be around `_client.ConnectAsync`, instead.\r\nThis can happen because the connection just broke, and we don't want to report server down for that."""
8340,243969207,b'Set to `true`'
8340,243969322,b'Also send the current topology here\r\n'
8340,243969506,"b""Doesn't this have global impact?"""
8340,243969514,"b""Doesn't this have global impact?"""
8340,243969574,b'Can we use something other than `Delay` here?'
8340,243969586,b'Can we use something other than `Delay` here?'
8340,244095854,"b""Wouldn't it be easier just to use RequestExecutor.TopologyUpdated event, in worst case this happens every 5 minutes, but when there are requests to that database, then it happens just after first request that happened after topology changed"""
8340,244106147,"b""No, the problem is that if we don't get topology updates, in a mostly idle app that watches `Changes()`, we won't know about this soon enough"""
8340,244108830,"b'Can we rename that to \'SendSupportedFeatures\' and have a single notification for supported features (more future proof)\r\n\r\n```json\r\n{\r\n   ""TopologyChange"" : true\r\n}\r\n```'"
8340,244108912,"b'I like that, yes.'"
8340,244109653,"b""Ok. Can we double check that this will not brake old clients (I think not because it lacks 'Type' property)?"""
8340,244110281,"b""Yes, it intentionally doesn't have `Type` properly.\r\nThe C# client is safe, need to check the others, though"""
8340,244145902,"b'just `true` not `""true""`\r\n\r\nthen you can do `json.TryGet(nameof(TopologyChange), out bool supports)`'"
8340,244146027,b'Use `nameof(TopologyChange)` and the `.TryGet(bool)`'
8473,247823979,"b'No, that is really heavy weight and it is something that we know will cause us issues.\r\nWe can always bring back this code'"
8473,247825324,"b""I don't think this is a  good idea. How do we know that this is from _our_ context pool and not from another?"""
8473,247862622,"b'Probably @maximburyak should confirm, but `_threadIds` are local to the context pool and we are no longer hijacking the ThreadIdHolders from other pools, we are always creating an instance for this specific pool in `EnsureCurrentThreadContextWillBeReleased` or reuse one from the ones that were previosly created by that pool.'"
8477,247489538,"b""We are setting 'Created' 2 lines below?"""
8477,247490082,"b'we want to have a property `Sorters` always, in worst case with empty array'"
8477,247632179,b'no content also removed application/json. It is common pattern in controllers. Although the method name is a bit misleading. '
8477,247865496,b'done'
8473,247879117,"b'Yes, you are correct.'"
8493,248230793,"b""I assume that we don't need to worry about concurrent queries here?"""
8493,248232641,"b""This was done to set a timeout on first batch of newly created index (test RavenDB_8847). I've assumed that even when we have more then 1 concurrent query, then it is still an acceptable behavior."""
8493,248232826,b'ok'
8473,248339732,"b""ok, created an issue for that, we'll let a few more nightlies to run with that and we'll get it removed https://issues.hibernatingrhinos.com/issue/RavenDB-12699"""
8485,248179313,"b""Maybe:\r\n`Failed to parse filter expression after a 'where' clause located next to '{collection.FieldValue}'. The problematic query element alias is '{alias}'`"""
8485,248179892,"b""`Expected operator after '{}' field, but found {}. Valid operators are...`"""
8485,248179949,b'Remove?'
8485,248180163,b'an -> a'
8485,248180241,b'an -> a'
8485,248182431,"b""Let's move those to a separate method"""
8485,248184678,b'I like it'
8485,248306575,"b""I've thought about extracting just the exception to `ThrowInvalidQueryException(string message)` and use it in all places where you are throwing the ex (we are doing similar thing with `ThrowParseException`"""
8485,248337590,"b""We could have a single function that receives exception message string, but I think that we could postpone it to later refactorings and we could merge this PR, because all significant preformance related issues we addressed, and I'd prefer avoid additional context switches. """
8496,248371785,b'I think we should use `DateTime.UtcNow` ?\r\nAlso it would be better to introduce variable before all of the loops and use one value'
8497,248557691,b'How can the old code create NRE here?'
8495,248558162,b'Also `flushToDisk: true` if the `outputStream` is a `FileStream`'
8495,248558268,"b'Same here, `FileStream` handling'"
8495,248558700,"b""Doesn't this mean that encrypted db always restore from encrypted database?\r\nBut we are restoring the db at this point, so I don't see how this can be possible? Where is that key coming from?"""
8495,248642156,b'FileStream is a stream. changed the name in https://github.com/ravendb/ravendb/pull/8506'
8495,248642169,b'FileStream is a stream. changed the name in https://github.com/ravendb/ravendb/pull/8506'
8495,248642185,"b""In https://github.com/ravendb/ravendb/pull/8506 I changed this method.\r\nThe key is from _restoreConfiguration.EncryptionKey . we do  '_serverStore.PutSecretKey(_restoreConfiguration.EncryptionKey,...' in Execute"""
8495,248642526,"b'So we need to check on `FileStream` and then call `Flush(flushToDisk: true)` here, no?'"
8512,248869640,"b""I thought it is pretty safe to assume there are not multiple nested aggregate exceptions in this path and we can directly access `InnerException` but I haven't done in-depth analysis"""
8523,249288215,b'method return type should be changed to `List<ProcessThread>`'
8523,249289031,b'done'
8531,249544683,"b'Add the thumbprint as well.\r\nAnd this should go to info, not ops'"
8532,249564724,b'@iftahbe the loop can continue after catching the exception? Can we succeed on some of the certificates and fail on others or we will just log a lot of exceptions? '
8532,249668288,"b""Yes we can fail on one and succeed at the other. I believe this is a very rare case. Anyway, I'm moving the logging to Info."""
8530,249543727,b'Why build it manually?'
8530,249543852,b'Would be better to move this to `ChangeVectorUtils` in general. Any changes / optimizations would only happen in one place'
8530,249544094,b'Missing equality to `LazyStringValue`'
8530,249544162,b'Comment here to explain different optimization levels can cause this'
8530,249697031,b'done'
8530,249697244,b'Will address it in a different issue: https://issues.hibernatingrhinos.com/issue/RavenDB-12731\r\n'
8535,249721310,b'Check those in the `IsExpectedException` also.'
8518,249785081,"b""I'm not sure how we can track that, but for the parsing above, we certainly should dispose of the LSV"""
8518,249787274,b'Can we use span here?'
8518,249797502,"b""Type converter is not the owner. Caller should know best. The semantics of this method is unclear, so on an optimization pass I wouldn't change the semantics. We should open a new ticket to figure out if we can allow destructive semantics on type converters and modify all of them accordingly"""
8518,249798735,"b""Probably, but wouldn't be clean anyways because right now the core is unaware or span. The spanification of the core should deal with that and treat span as first class citizen starting wit voron and sparrow"""
8518,249810156,"b""For the most part, we expect this to be called from indexing / projection code, so the target isn't a dynamically allocated string but rather a pointer to a blittable"""
8518,249810811,"b'We can already use span, we have already started to take dependency on it.\r\nSo we can technically get a `Span<byte>` and then use `Utf8Parser.TryParse` directly'"
8518,249810929,"b'Not sure how much that would help, the common case is a string, not date time'"
8518,249850526,"b'Yes, I have several cases where I am already working with spans already, but they are still a clutch that require the same method to be written in 2 different APIs. We need a definite solution. The generalized allocators are giving us spans for arbitrary memory with a decent API. That along with the ability to customize heavily the behavior is the big change there.'"
8518,249851138,"b'For example, if every call with a pointer you need to write `new ReadOnlySpan<byte>(ptr)` the code gets unwildly very fast.'"
8545,250094964,b'Did you include other icon files in this PR? Or average icon was already present? '
8545,250096486,"b""It was already present, I've reused other icon but with different class name."""
8545,250096773,"b'oh, I can see it uses the same code as icon-minus. Thanks'"
8539,249807858,b'Why is this method handling the `OPTIONS` here?'
8539,250098394,"b""Sorry, I didn't copy the actual handler."""
8518,250127746,"b'@redknightlois you are right, I was refering to the usage of the after compressed string decompression, thing is that ""here"" we know ""for sure"" that the value won\'t be used'"
8536,249768426,"b'You need to also include _the actual reason you failed here_, otherwise, the user is left guessing'"
8536,249768746,"b""There is a LOT going on in this statement, make it into its own function and use `if` to clearly show what is going on there.\r\n\r\nI'm not following why you have `Combine` there"""
8536,249784959,b'Are we combining this correctly? One `DataDirectory` with another one?'
8536,249785157,"b""instead of doing that you should use `ServerStore.Configuration.Core.DataDirectory.Combine('')` """
8536,249849638,b'done'
8536,249849710,b'done'
8536,249849789,b'done'
8536,249854925,b'done'
8536,249920831,b'I think we need to put `e` as inner exception in all of those exceptions here.'
8536,249921270,"b'Let\'s avoid multiple `:` in the message. Maybe change to sth like that:\r\n```\r\n$""Invalid snapshot file \'{restoreConfigurationJson.LastFileNameToRestore}\' at \'{zipPath}\' path""\r\n```\r\n\r\nThis should isolate the path nicely (need to apply to other messages also sth similar)'"
8536,249924052,"b'can we use `new PathSetting(restoreConfigurationJson.DataDirectory, baseDataDirectory).FullPath` here?\r\n\r\nWe do some validation inside that class.'"
8536,249924662,b'Should be `<` instead of `<=`'
8536,250114744,b'done'
8536,250121305,b'done'
8536,250124350,b'done'
8518,250150476,"b""The caller knows it won't be used, not the method. Callers responsibility to deal with it"""
8518,250151086,b'Clear responsibility and usage uniformity is key when handling memory manually. Having a non uniform destroy semantics here is just asking for trouble'
8518,250519343,"b'So is there a way we could avoid a ""temporary leak"" of the uncompressed string? or it\'s not a viable scenario in the first place (date string is too short to be compressed?)'"
8502,248638092,b'Missing `result` here'
8502,248639217,b'Huh? That looks strange. Why _would_ we have a `DeleteOnClose` for _journals_ ?\r\n'
8502,248639576,b'```suggestion\r\n        public override string ToString() => FileName?.FullPath;\r\n```'
8502,248640296,b'missing `rc` here'
8502,248640834,"b""If we aren't handling, then the error is opaque to us, the comment is misleading, then"""
8502,248642794,b'`SafeMmapHandle`'
8502,248643293,"b'`SafeMmapHandle` ?\r\nAlso, we probably want separate methods for closing journal handle and mmap handles.'"
8502,248643432,b'SafeJournalHandle  ? SafeMMapHandle?'
8502,248643562,b'`[StructLayout]` ?'
8502,248643737,"b'`Safe, Danger, PureMemory`'"
8502,248643850,b'You are missing the `rc` from the method call'
8502,248643999,"b'In order to produce good error, we need both the special error code _and_ the error code'"
8502,248644448,b'what does this mean?'
8502,248645367,"b'```suggestion\r\nrvn_prefetch_virtual_memory(void *virtual_address, int64_t length, int32_t *detailed_error_code);\r\n```'"
8502,248645822,"b'```suggestion\r\nrvn_dispose_handle(const char *file_path, void *handle, int32_t delete_on_close, int32_t *detailed_error_code);\r\n```\r\n\r\nAnd we should probably distinguish between journal / pager handles'"
8502,248645978,"b'```suggestion\r\nrvn_allocate_more_space(const char *file_name, int64_t new_length_after_adjustment, void *handle, int32_t flags, void **new_address, int32_t *detailed_error_code);\r\n```'"
8502,248646123,b'We have `rvn_close_journal` and `rvn_dispose_handle` which is confusing'
8502,248646319,b'Under what scenario would we use this?'
8502,248646481,b'File close options?'
8502,248646759,"b'```suggestion\r\nrvn_dispose_handle(const char *file_path, void *handle, int32_t delete_on_close, int32_t *detailed_error_code)\r\n```'"
8502,248646866,b'`delete_on_close` should be `flags` or something like that'
8502,248647438,"b'This will wait, `200ms, 100ms`  which is probably not intended for'"
8502,248648191,"b""Just one error isn't enough, you need both the special error and the return code."""
8502,248648358,b'This will never be true'
8502,248649044,b'This is wrong'
8502,248649108,b'```suggestion\r\n    *handle = (void*)(int64_t)fd;\r\n```'
8502,248650373,"b'```suggestion\r\nrvn_allocate_more_space(const char *file_name, int64_t new_length_after_adjustment, void *handle, int32_t flags,\r\n```'"
8502,248650940,b'Who actually closed the handle?'
8502,248651777,"b'This is linux only, not unix only'"
8502,248652892,b'why do we need this?'
8502,248652950,"b'Call truncate here, before we do the write'"
8502,248653325,b'why are you modifying the `buffer` / `size`  /`offset`?'
8502,248653590,"b""I _think_ that you are trying to continue from the previous location, but that isn't what we want.\r\nIf we failed, we assume that we failed completely and do this from the beginning"""
8502,248653913,"b""Let's do the check on 0, instead here"""
8502,248654182,b'```suggestion\r\n    if (size.QuadPart <= initial_file_size)\r\n```'
8502,248654276,b'Yes'
8502,248654319,b'No '
8502,248666756,b'This function writes the file in sections. Maybe `write_file_in_sections` will be more suitable?'
8502,248669234,b'If a more then 4GB write interrupted by low memory the next attempt to write in smaller pieces (4K) will start in the point when the write stoped '
8502,248669543,b'Not worth the extra complexity for super rare event. Make it start from scratch'
8502,248670075,b'But we know where we stopped why not to start from there? '
8502,248670370,"b'So? You are already in error state, better to make sure.\r\nAnd the real issue is that I want to make sure that the code is simpler. Better than having to deal with very rare event and complicate matters.'"
8502,249269997,"b'```suggestion\r\n[StructLayout(LayoutKind.Explicit, Pack = 1)]\r\npublic struct PrefetchRanges\r\n{\r\n  [FieldOffset(0)]\r\n  public IntPtr VirtualAddress;\r\n  [FieldOffset(8)]\r\n  public IntPtr NumberOfBytes;\r\n}\r\n```'"
8502,249270060,"b'```\r\n[StructLayout(LayoutKind.Sequential, Pack = 1)]\r\npublic struct PrefetchRanges\r\n{\r\n  public IntPtr VirtualAddress, NumberOfBytes;\r\n}\r\n```'"
8502,249270122,"b'In C, you use\r\n\r\n```\r\nstruct prefetch_ranges {\r\n     void * virtual_address;\r\n     size_t number_of_bytes;\r\n\r\n};\r\n```'"
8502,249271390,b'`DisposeInternal`'
8502,249271460,"b""That's was the old behavior, and this happens rarely anyhow."""
8502,249367295,"b'Use `Single` instead of `First` here, to assert that there can only be one'"
8502,249367351,"b'Log it out, as info'"
8502,249367548,b'why the format change?'
8502,249367714,b'Is this also closing the handle and ensuring no finalization?'
8502,249367994,"b""I don't like it, and I'm not sure that we even need this."""
8502,249368100,"b""Use `IntPtr` here, it isn't a pointer"""
8502,249368642,b'Why do you have `file_name` here?'
8502,249369161,"b""Let's not get the `file_path` here, instead, we can use: https://stackoverflow.com/questions/1188757/getting-filename-from-file-descriptor-in-c """
8502,249369799,b'very nice'
8502,249387049,b'This is a wrap to the origin function. \r\n[The `Pager.FileName.FullPath` and `Pager.IsDeleteOnClose` access required to release the handle](https://github.com/ravendb/ravendb/pull/8502/files#diff-2315f73cb69a4ae8a10a5fd39ba78ffbR246)\r\nso after the handle arrived from the `Pal` function [the `Pager` assigned to the handle](https://github.com/ravendb/ravendb/pull/8502/files#diff-6b6e477388dca67063d6e9687cf074b9R101)'
8502,249391863,"b""Let's not do that. Instead, let's move these values into the unmanaged memory and remember them"""
8502,249399609,"b'do you mean:\r\n```\r\nGC.SuppressFinalize(_handle);\r\n            var rc = rvn_mmap_dispose_handle(FileName.FullPath, _handle, IsDeleteOnClose, out var errorCode);\r\n            if (rc == 0) \r\n                return;\r\n            GC.ReRegisterForFinalize(_handle);\r\n```'"
8502,249400087,"b""unlink uses path (there's no other way, and we do not want to unlink other paths to the file which we didn't create)."""
8555,250601873,"b""The code here is actually correct. It is stating that we didn't use enough of the file.\r\nThe problem is actually different. It is that we are not checking for the maximum size that we should have here."""
8555,250602294,"b'That would still cause ""bouncing"". If you transactions are varying in size, that can cause you to grow & shrink things rapidly.\r\nThe problem is that we only have `initialSize` here, and we need the `maxSize` as well'"
8555,250603097,"b'The bounce would (with the latest change) happen only all five minutes, but I get your point. Should I close the PR, or attempt a ""real"" fix sometimes this week?'"
8555,250606878,b'I see you are way ahead of me; I see no more issues with your latest commit'
8518,250608026,b'what temporary leak? And strings are only compressed from 128bytes'
8538,250085004,"b""I'm a bit worried about that change. Note we call `_updateLogInfo` action from `UpdateFileHeaderAfterDataFileSync`\r\n\r\nhttps://github.com/ravendb/ravendb/blob/d476f61ccb2ffbc77fe95772c3599183a1204097/src/Voron/Impl/Journal/WriteAheadJournal.cs#L1216-L1226\r\n\r\nand this can override potentially `LastSyncedJournal` we set here:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/d476f61ccb2ffbc77fe95772c3599183a1204097/src/Voron/Impl/Journal/WriteAheadJournal.cs#L1221\r\n\r\nBTW The case that `JournalFilesCount == 0` might be tricky for us during recovery. See here:\r\nhttps://github.com/ravendb/ravendb/blob/d476f61ccb2ffbc77fe95772c3599183a1204097/src/Voron/Impl/Journal/WriteAheadJournal.cs#L163-L167\r\n I'm gonna double check that - I'm worried that we might still have some journals that were not synced and we should to run the recovery"""
8538,250112151,"b""Please confirm, but I think you did it specifically for compaction, didn't you? For that purpose I think that would be ok because we force syncing, but might be not to accomplish that so probably only if we `synced` successfully:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/69018d823cb89f4d0bbb9c636b82d14110250f8d/src/Voron/Impl/Compaction/StorageCompaction.cs#L87-L88"""
8538,250578898,b'Why are you exiting the write lock here?'
8538,250599278,"b""We're already under write lock so we release it so the updater can access the header accessor. We're in the constructor of storage env so nobody else can touch it anyway."""
8538,250618647,"b""I got NRE on `_lastFlushed.Journal.SetLastReadTxHeader` (`Journal` was `null`, test `RavenDB_10420`) after I added the suggestion to sync data file after recovery. I did it by adding the following at the end of ctor of `StorageEnvironment`:\r\n\r\n```\r\nif (isNew == false && _options.ManualSyncing == false)\r\n\tSuggestSyncDataFile(); // let's suggest syncing data file after the recovery\r\n```\r\n\r\nThe issue was that doing a sync _before_ we flushed anything isn't actually valid because `_lastFlushed` wasn't defined in `UpdateJournalStateUnderWriteTransactionLock`. So I decided to not scheduling the sync immediately after loading a database. We'll do it after the first flush."""
8518,250640948,"b'The ""possible"" leak was when we inflated the compressed string, but returned a datetime, or timespan, but given that strings are compressed only from 128bytes size, it\'s irrelevant for those types of input'"
8518,250714118,"b'Also, remember that those leaks get healed up on context reset, so they should be typically small anyways.'"
8554,250604247,b'Why do you have this change?'
8554,250660167,b'Wait for the topology to change'
8554,250763728,b'@efratshenhar check this PR https://github.com/ravendb/ravendb/pull/7688\r\nIt looks like we did not applied that to 4.0'
8554,251193584,"b'I understand what it does, but why are you waiting for topology change when updating external replication?'"
8538,251194034,"b""In that case, we need to do a suggested flush, anyway, no?\r\nI don't think it would be triggered until the first commit otherwise, no?"""
8556,251194721,b'Replace `NumberOfReservedBytes` with `3`'
8549,251223888,"b'But that is something that can happen, no?'"
8549,251223905,b'https://stackoverflow.com/questions/7491680/unicode-characters-having-asymmetric-upper-lower-case-why'
8546,250150389,"b'We need to move this inside the `actions.WriteDocument` for DatabaseDestination.\r\n\r\nYou can throw `DocumentDoesNotExist` exception there, catch it here and increase the errored count.'"
8546,250150532,"b'We need to move this inside the `actions.WriteCounter` for DatabaseDestination.\r\n\r\nYou can throw `DocumentDoesNotExist` exception there, catch it here and increase the errored count.'"
8546,250540053,"b""for StreamDestination we don't need it, right?"""
8546,250551343,b'I do not see a reason.'
8546,250578480,"b""Can we avoid opening a ReadTransaction for every call?\r\nIt would be better to open transaction when we haven't opened it before and in HandleBatchOfDocumentsIfNecessary when we are actually adding the batch for processing, we can close the transaction"""
8546,250600104,"b'Also, you _must_ provide more details here. For example, what is the missing document?'"
8546,250600155,"b'Same, not enough info on error'"
8546,250603946,b'@efratshenhar just pass the Id in the ctor. It will generate nice message.'
8546,250605503,"b'There is also a second parameter there, you can add a detailed message. We should add that to the progress so user will see what is the source of the error maybe? I think we have sth like `result.AddError` there available.'"
8572,251238600,b'@ml054 Can you review this part? I had a conflict here and I;m not sure if I merged this correctly.'
8518,251240767,"b""@redknightlois that's correct"""
8571,251233534,b'I think we need to initialize the CTS a bit earlier to avoid getting any possibility of passing `null` here. Also code in the `UpdateTopologyChangeNotification` should use cts.Token all the way down probably. Now it is mixed between cts.Token and ServerShutdown.'
8571,251233917,b'Why do you get a token _source_ here? '
8571,251247708,b'changed'
8571,251247711,b'changed'
8543,249950205,b'Maybe we should use `AddParameter` method. I do not remember if we are doing some validation there or not.'
8543,249950548,b'Maybe we should use `AddParameter` method. I do not remember if we are doing some validation there or not.'
8543,249950926,"b""Let's skip interpolation and split it to few writer calls."""
8543,249951341,b'I think we do not need cancellation token here'
8543,249951521,"b""Let's remember to add the overload with `IDocumentQuery<TOther>`"""
8543,249953181,"b'typo:\r\n\r\n```\r\n$""Select is not permitted in a \'With\' clause in query: {docQuery}""\r\n```'"
8543,249953277,"b'typo:\r\n\r\n```\r\n$""Select is not permitted in a \'With\' clause in query: {docQuery}""\r\n```'"
8543,250161613,"b""No, we don't, that isn't executing"""
8543,250177296,"b'I need to set the key of the parameter in the ""parent"" query the AddParameter only gets the value of the parameter.\r\nThe keys are promised to be unique so this will not throw (since we never remove parameters from the dictionary and I use the count of values and with statements)'"
8543,250179369,b'It will be less readable but okay'
8543,250184799,b'I need to see if my solution works for IDocumentQuery since the tokens might be already populated with parameter names'
8543,250185373,b'I might need to transform the DocumentQuery to a queryable and back so i could modify the tokens. writing a test to check this senario.'
8543,250195955,"b'@ayende @ppekrol \r\nwhat if we have something like so:\r\n.With(""Foo"", session.Advanced.AsyncDocumentQuery<Foo>(), q => q.WhereIn(x=>x.Name, names))\r\nThe issue here is that i need a clean DocumentQuery, i could replace the empty AsyncDocumentQuery with those three parameters:\r\nstring indexName , string collectionName , bool isMapReduce\r\nto construct the query myself but if not then we can\'t use my approach and we are back to iterating the tokens'"
8543,250205407,"b'We can either drop the support for IDocumentQuery or do:\r\n```\r\n.With(""Foo"",q => q.DocumentQuery<TIndex>().WhereIn(x=>x.Name, names));\r\n```\r\n\r\nThe q will be our own \'builder\' that will do:\r\n```\r\npublic IFilterDocumentQuery<T> DocumentQuery<TIndex>()\r\n{\r\n    var dq = session.Advanced.DocumentQuery<TIndex>();\r\n    dq.PrefixParameters = ""abc"";\r\n    return dq;\r\n}\r\n```'"
8543,250234275,"b'@ppekrol okay I have made modification they are still WIP please look at :\r\nIAsyncGraphQuery<T> With<TOther>(string alias, Func<IAsyncDocumentBuilder,IAsyncDocumentQuery<TOther>> queryFactory);'"
8543,250239597,b'rename to `IAsyncDocumentQueryBuilder`'
8543,250748944,b'We should not inherit from `IEnumerable<T>` but I guess this is related to https://issues.hibernatingrhinos.com/issue/RavenDB-10520 and for now we do not have much choice?'
8556,251314064,b'Fixed in https://github.com/ravendb/ravendb/pull/8576'
8538,251336718,"b""The recovery on startup is actually the same as flush - it writes data from journals to data file but it's unsynced stuff. So maybe we should set `JournalApplicator._lastFlushed` at the end of the recovery? Like we do at the end of flush?\r\n\r\nThen we can safely suggest data sync after the recovery."""
8538,251574897,"b'Yes, I think we should set that one. '"
8560,251292575,"b""Let's change that to `/tasks/pull-replication/hub`"""
8560,251293583,b'`taskId` instead of `key` ?'
8560,251294281,"b'We will not be able to remove the cert once it was set, only override it. Just want a confirmation that this is what we wanted.'"
8560,251294588,b'Just `PullReplications`'
8560,251307738,"b""we have 2 cases:\r\nhttp -> you can't provide certificate\r\nhttps -> you have to provide certificate\r\n\r\nso validation guard against this. \r\n\r\nI've added this condition (and I'm not proud of it) but it allows us using same cert when doing edit. """
8560,251308195,b'we use key in every other ongoing task so it is by convention. '
8560,251401896,b'done'
8560,251404338,b'done'
8560,251548243,b'Plural would be better.'
8560,251582071,b'you are absolutely right. will fix that - thanks!'
8560,251721797,b'done'
8574,251312113,"b""I'm pretty sure that we don't need `_llt.FreePage` now"""
8574,251312664,b'Can we just call `DiscardScratchModificationOn` here?'
8574,251327040,"b'Yes, you do. Consider the case where you _shrink_ the value.\r\nYou wrote 64 KB, now you write 16 KB. We need a test for this, though'"
8574,251327151,"b'Yes, I belive that would be best'"
8574,251334970,"b'I don\'t see a reason to call `FreePage` since we dropped `_dirtyOverflowPages` concept.\r\n\r\nThe initial 64KB write allocated page #10 (#23 in scratch). Now we have 16KB to write and we\'re in `TryOverwriteOverflowPages` optimization. We just need to discard #23, and allocate a new page in scratch for page #10 which will be smaller than initially.\r\n\r\nTest:\r\n\r\n```\r\n[Theory]\r\n        [InlineData(32 * 1024, 32 * 1024)]\r\n        [InlineData(32 * 1024, 16 * 1024)]\r\n        public void Can_update_big_value_in_the_same_transaction(int initialSize, int updateSize)\r\n        {\r\n            var r = new Random();\r\n\r\n            using (var tx = Env.WriteTransaction())\r\n            {\r\n                Tree tree = tx.CreateTree(""tree"");\r\n\r\n                var initial = new byte[initialSize];\r\n\r\n                r.NextBytes(initial);\r\n                tree.Add(""key"", initial);\r\n\r\n                var updated = new byte[initialSize];\r\n\r\n                r.NextBytes(updated);\r\n                tree.Add(""key"", updated);\r\n\r\n                tx.Commit();\r\n            }\r\n        }\r\n```'"
8574,251743974,b'@ayende You added some tests to verify the behavior when updated value is shrink. Do you still think that `_llt.FreePage` is necessary here?'
8581,251572787,b'This is a big method and not likely to be inlined even with this.\r\nWhy is this here?'
8581,251572974,b'remove this'
8581,251725657,b'done'
8581,251725667,b'done'
8581,251848500,b'Check what happens with attachments in the same scenario'
8581,251849292,b'Remove this'
8581,251859822,b'done'
8581,251859860,b'done'
8574,252000635,"b""Yes, inside `FreePage`, we are calling \r\n\r\n```\r\n_freeSpaceHandling.FreePage(this, pageNumber);\r\n_freedPages.Add(pageNumber);\r\n```\r\n\r\nOtherwise, we'll lose the space"""
8574,252016233,b'Right. '
8598,252024922,b'doc is DynamicNullObject.Null (the return value of LoadDocument when the document is missing)\r\nhttps://github.com/ravendb/ravendb/pull/8599'
8340,252190949,"b'It broke java client for sure, see: https://issues.hibernatingrhinos.com/issue/RDBC-268'"
8340,252192001,"b'And very likely the rests as well, I would assume'"
8609,252226308,b'Should probably be operations'
8609,252226801,b'Depending on the storage env type I wanted to suggest different actions to recover from this state. Please let me know if you see the potential improvement of those messages.'
8609,252227061,"b""When would this ever be triggered because of the missing journal?\r\nYou may be missing journal 16, but 17 is there, so it wouldn't call it, no?"""
8609,252228771,b'Fixed in https://github.com/ravendb/ravendb/pull/8609/commits/f82c40d830e0afbdf48da42e2457ecdf2f0964ee'
8609,252230026,"b""The existing code, in particular, `TryMoveJournals` was created to handle the change when we moved journals files to `Journals` directory in the past.\r\n\r\nIf journals are already in `Journals` directory then we're sure that missing 16 will cause throwing exception here."""
8599,252147113,"b'If `doc` is `DynamicNullObject`, your cast will fail, need to do the check higher than this.'"
8599,252220274,b'Done'
8621,252706893,b'lets use `nameof` here'
8621,252707230,"b""Let's avoid LINQ, also we need OrdinalIgnoreCase comparer here I think?"""
8611,252295926,b'Can we extract this computation to the constructor? \r\nI want to make it easy to ignore\r\n'
8611,252296276,"b""Also, what about the behavior a bit below, where we do the check again in:\r\n\r\n```\r\n// if I can't close the tx, this means that the previous async operation is still in progress\r\n// and there are incoming requests coming in. We'll accept them, to a certain limit\r\nif (modifiedSize < _maxTxSizeInBytes)\r\n    continue; // we can still process requests at this time, so let's do that...\r\n```"""
8611,252296663,b'Include the `lastWin32Error ` here too'
8611,252671478,"b""I'm not sure what should be the behavior in the merger, I don't want to start rejecting requests maybe it is better if @aviviadi  or @haludi will look into that?\r\n_maxTxSizeInBytes controls the max transaction size it is set to 4MB for 32 bit\r\nI'm not sure what the behavior is if we break from this loop..."""
8611,253290512,b'We need to move this to ctor and mark it as readonly'
8611,253290620,b'You can do that by accessing database.Configuration.Storage.ForceUsing32BitsPager'
8635,253307542,"b'@valeriob It is actually a big change, because now all queries that were doing `ToList()` will be allocating an array and after that allocating a second list.\r\n\r\nI think it would be better to just invoke `ToListAsync` extension method here and issue `ToArray` on the results here as a shortcut.'"
8635,253307566,b'Just invoke previous implementation and then do `ToArray` on the results as a shortcut.'
8635,253308205,"b""Yes and no: everybody will allocate an array , and only who calls ToList() will have the overhead of allocating a new list from it. \r\nI think that query should as default return arrays and not lists (like Load() does) and ppl should opt in into List or other structures. I've never used ToList() in any db (ORM, uORM or ravendb 2/3/4) query. I think that ravendb4 i so relative new that this change is still possible, maybe we can add some comment on the ToList version to warn ppl of that allocation, even though it should be expected \xf0\x9f\x98\x84.\r\nConsider also that the gains obtained from initializing the array upfront should be more than the performances spent doing a single copy in case of ToList(), i think it's a net gain afterall (i did not measure, just counting copies of memory, consider that EnsureCapacity doubles the array every time, so can be pretty inefficient).\r\n\r\nhttps://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs,eb66b6616c6fd4ef,references\r\nhttps://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs,9808f1f5ef16c436,references"""
8632,253306741,b'check also here if `dataDirFromZip` is not null or empty'
8632,253306758,"b'I think we want to put here the original currentDataDir value, not the evaluated one?'"
8632,253306762,"b'I think we want to put here the original currentDataDir value, not the evaluated one?'"
8632,253306884,b'yes'
8629,253277167,"b""Shouldn't we attach to this before doing `index.Start()` ?"""
8629,253387089,"b'Yes, we should. Thx'"
8629,253416377,b'Fixed. Force pushed'
8637,253313537,b'We need to add it to AsyncDocumentQuery also IIRC.\r\nCan you create test for both async and sync?'
8637,253358767,b'Probably it would be cleaner to do:\r\n```csharp\r\n            if (docQuery.TheWaitForNonStaleResults)\r\n                WaitForNonStaleResults(docQuery.Timeout);\r\n```'
8637,253396191,"b'@ppekrol TheWaitForNonStaleResults and Timeout are both protected not sure if we should expose them, will it be okay to check it with reflection?'"
8637,253399139,"b""No, I don't want that"""
8637,253402939,"b""No need that, just let's do the async version and add some simple tests"""
8637,253403178,b'how to test it?'
8637,253431771,"b""I've amended your commit. Check what I've did."""
8552,250608374,b'Why did you made this change?'
8552,250620952,"b'because of https://issues.hibernatingrhinos.com/issue/RavenDB-12660#focus=streamItem-67-33793-0-0\r\n\r\nIf someone copied new lib, we will move it to the general name. This way we avoid unnecessary copy tries and do it once per publish'"
8552,251193532,"b'I see, okay'"
8552,251336407,"b'```suggestion\r\n                $""Currently available space: {Sizes.Humane(freeSpace) ?? ""N/A""}. Error Message: {msg}""\r\n```'"
8552,251336555,"b""Let's move to a separate file"""
8552,251336914,"b'```suggestion\r\n                    PalHelper.ThrowLastError(result, error, $""Attempted to write to journal file - Path: {FileName.FullPath} Size: {numberOf4Kb * 4 * Constants.Size.Kilobyte}"");\r\n```'"
8552,251337140,"b'```suggestion\r\n                    PalHelper.ThrowLastError(result, errorCode, $""Attempted to read from journal file - Path: {FileName.FullPath} Size: {numOfBytes} Offset: {offsetInFile} ActualSize: {actualSize}"");\r\n```'"
8552,251337319,"b'```suggestion\r\n                PalHelper.ThrowLastError(result, error, $""Attempted to write to journal file - Path: {FileName.FullPath} Size: {size}"");\r\n```'"
8552,251337417,"b'```suggestion\r\n                        $""Attempted to close \'read journal handle\' - Path: {FileName.FullPath}"");\r\n```'"
8552,251337459,"b'```suggestion\r\n                        $""Attempted to close \'write journal handle\' - Path: {FileName.FullPath}"");\r\n```'"
8552,251338022,"b'```suggestion\r\n                Log.Info(PalHelper.GetNativeErrorString(errorCode, $""Tried to prefetch whole file. Result: {rc} FileName: {FileName.FullPath} Size: {allocationInfo.Size}"", out _));\r\n```'"
8552,251338220,"b""Shouldn't you use `RvnMemoryMapPager` here?"""
8552,251338466,b'Where is the file name here?'
8552,251338711,b'Where is the file name here?'
8552,251338844,b'Please add braces here'
8552,251339212,b'Where is the file name?'
8552,251339849,b'What is the file name here?'
8552,251339912,b'Need to remove this.'
8552,251339995,b'Need to remove this'
8552,251340128,"b'Where is the file name here?\r\nAlso, PROT_READ is linux, so not right.'"
8552,251340180,b'PROT_READ is not cross platform'
8552,251340687,"b'```suggestion\r\n        [StructLayout(LayoutKind.Sequential, Pack = 1)]\r\n        public struct SystemInformation\r\n```'"
8552,251342675,"b""Isn't this common to all platforms?"""
8552,251343957,"b'In open for write, we are using `journal_handle`, here we are storing the raw fd in the void*.\r\nWe need to be consistent, because otherwise, it can get messy'"
8552,251344208,"b'```suggestion\r\n        rc = _resize_file(jfh->fd, initial_file_size, detailed_error_code);\r\n```'"
8552,251344365,"b'This is an internal impl detail, use it as such \r\n```suggestion\r\n_open_file_to_read(const char *file_name, int *fd, int32_t *detailed_error_code)\r\n```'"
8552,251344439,"b'```suggestion\r\n_read_file(int fd, void *buffer, int64_t required_size, int64_t offset, int64_t *actual_size, int32_t *detailed_error_code)\r\n```'"
8552,251344833,"b'```suggestion\r\nPRIVATE void _free_journal_handle(struct journal_handle* handle)\r\n```\r\n\r\nBecause it is internal, no?'"
8552,251344973,"b'```suggestion\r\n    rc = _open_file_to_read(file_name, &jfh->fd, detailed_error_code);\r\n```'"
8552,251345120,"b'```suggestion\r\n    return _read_file(jfh->fd, buffer, required_size, offset, actual_size, detailed_error_code);\r\n```'"
8552,251345198,"b'```suggestion\r\n    rc = _resize_file(jfh->fd, size, detailed_error_code);\r\n```'"
8552,251346182,"b'Minor, `fstat` might be better here'"
8552,251346673,"b'Here you are _always_ syncing the directory on opening a file, why?\r\nWe only need to do that if the file size changed.'"
8552,251346736,b'Or the file was created'
8552,251348783,b'Here need to set the flags as delete on close if use pure memory mode'
8552,251349292,b'Why is this required?'
8552,251407375,b'yes... FastTest / Regular import was able to run without it (pure mem etc.)'
8552,251450373,"b""No. This is (will, when windows' map pager will be pal implemented) need to fit for both platforms. So the header must be **handle. Unless we want different headers (_open_file_to_read_linux and _open_file_to_read_windows, and call the appropriate from the posix/win rvn_* func)"""
8552,251450899,b'Why? (this prevents a compiler warning)'
8552,251451035,b'same as in https://github.com/ravendb/ravendb/pull/8552#discussion_r251450373'
8552,251452054,b'same as in https://github.com/ravendb/ravendb/pull/8552#discussion_r251450899'
8552,251452133,b'same as in https://github.com/ravendb/ravendb/pull/8552#discussion_r251450899'
8552,251452177,b'https://github.com/ravendb/ravendb/pull/8552#discussion_r251450899'
8552,251547274,"b'The sig for `_resize_file` should be `_resize_file(int fd, ...)`'"
8552,251560691,b'This is private for the impl. No need to expose the xplat stuff here.'
8552,251866180,b'Why not `RvnMemoryMapPager` here?'
8552,251866255,"b""For that matter, why isn't `WindowsMemoryMapPager` deleted?"""
8552,251866745,b'`int32_t fd`'
8552,251866782,b'`int32_t fd`'
8552,251866851,b'`HANDLE *handle`'
8552,251866903,b'`HANDLE *handle`'
8552,251867333,b'`jfh->delete_on_close = transaction_mode == JOURNAL_MODE_PURE_MEMORY;`'
8418,245515438,"b'GetNumberOfCountersToProcess does ont exactly number of counters, am I right? I think the name should be more accurate here, like get number of documents to process (which also sounds strange)'"
8418,245515578,b'Can DocumentId and ChangeVector be LazyStringValue instead of string?'
8418,245515782,"b'I think we should dispose the ""old"" data here'"
8418,245515851,b'we can probably call it docLowerId'
8418,245515988,"b'Can DbIDs be a sorted list and a binary search should be performed, or even an object, to do it using the existing blittable mechanisms?'"
8418,245517735,"b""It's better to implement the iteration here, instead of using ToDictionary with a lambda call\r\nAlso, can we use some kind of dictionary caching/cleaning here as we did with _scopes?"""
8418,245517793,"b'Please add caching of the calculated HashCode to LazyStringValue, so this will cost a bit less'"
8418,245518026,b'Please find more meaningfull name for that field - something like _counterModificationMemoryScopes or better (probably).'
8418,245518073,b'we should probably clear that field in a finally statement'
8418,245518152,"b""it's probably best to pass _scopes as parameter - it's caching is only an implementation detail"""
8418,245518329,"b'This should be called lazily, so the ""sorted"" list will be held in the calling method'"
8418,245518493,"b'Use an array pool here, probably'"
8418,245518991,"b'SortValuesByDbIdIndex\'s main purpose seems to be  making sure the dict holds all dbIDs, after that, the iteration in line 610 can be performed on the dictionary values, I don\'t think we need ""sorted"" at all here, or am I missing something?'"
8418,245519068,"b""I guess that this function can be merged with SortValuesByDbIdIndex, given that it won't need to be sorting anything, but just intializing the dict and modifying the localDbIds"""
8418,245519323,b'We can probably abandon the IEnumerable return type for this function and for GetCountersForDocument'
8418,245585845,"b""no, it's not just to make sure the dict holds all dbIDs.\r\nthe main purpose here was to avoid calling `context.Allocator.Allocate()` multiple times and moving the data around.\r\nby sorting the source dbIDs by their local dbId-index, then iterating the sorted array in reverse order, we assure that we have a single call to `context.Allocator.Allocate()` (at most) and that we're not moving the data more than once."""
8418,245588709,"b""yes, this was used only in counters ETL,  which doesn't work at all now. when i'll fix ETL part i'll change the name as well. maybe GetNumberOfCounterGroupsToProcess ?"""
8418,245592584,"b""the order of the counter partial-values in a raw blob rely on the order of the the DbIDs, so i don't think a sorted set is a good fit here - inserting a new dbId in the middle of the list will force us to modify all the raw data. \r\nobject can work. """
8418,245600285,"b""let's go with object then, but first, can you profile that on a multiple dbIndex scenario and see if GetDbIdIndex method is expensive? maybe it's just a preliminary optimization.."""
8418,245632490,b'can be `internal` ?'
8418,245632513,b'can be `internal` ?'
8418,245635921,b'Need to dispose the old data'
8418,245639367,"b""Need to dispose the old 'data' ?"""
8418,245640856,"b'I do not like that concept. It would be better to add method `RegisterForDispose(IDisposable toDispose)` to DocumentsOperationContext to be absolutely sure that we will dispose everything at the end, even when some exception occured. Thoughts?'"
8418,245641380,"b""dispose old 'data' ?"""
8418,245642312,b'Rename to `AddLegacy`'
8418,245691771,"b""I don't like this, you are holding resources here per transaction that are held by an object that outlive it. """
8418,245691840,"b'@ppekrol That would be better, yes'"
8418,245692176,"b""CounterKey, instead. This isn't the document id"""
8418,245692688,"b'We probably should, yes'"
8418,245693890,"b'No, this is intentionally a very simple array. In 99.999% of the cases, the number here is going to be < 5, so linear scan is better.'"
8418,245694423,b'```suggestion\r\n                var counter = &((CounterValues*)existingCounter.Ptr)[dbIdIndex];\r\n```\r\n\r\nIs that more readable?'
8418,245695268,b'Why do we need this at all? It would be better to do linear scan each time than pay the allocation / building price of the dictionary'
8418,245695735,"b""I really don't like `_scopes`, seems like it should be a value that is passed to the method from caller and then disposes"""
8418,245696140,"b""I don't follow why this is required? But in general we should kill the dictionary and not do any sorting"""
8418,245696758,"b""Question, what happens if a user defines a counter named `DbIds` ? Won't it kill us?"""
8418,245696955,b'Probably we should define the DbIds property as `@` and avoid a counter of this name'
8418,245698349,"b'Do we _need_ a separate tombstone?\r\nCan we mark the property itself on the object as deleted? \r\nSomething like, if counter property is null, it is deleted?'"
8418,245699629,b'Case insensitive on the doc id'
8418,245700126,b'How can this be?'
8418,245701542,"b'NotSupported, and with a proper message'"
8418,245728194,"b""I don't think we should kill the dictionary.\r\nwithout a dictionary, doesn't it mean that for each partial value in each counter, \r\nwe will need to do a liner scan on `localDbIds` (and if missing, look in `localDbIds.Modifications` ?) to get the DbId-index?\r\n\r\nbut yes, maybe sorting can be avoided.\r\nI was think of a case like this one:\r\n- local DbIds = [A, B, C, D]\r\n- local counter 'likes' has partial value of A\r\n- source sends counter 'likes' with partial values of B, C, D\r\n- all of these partial values are missing\r\n- if we don't do any sorting, each iteration will go to `AddPartialValueToExistingCounter()` , allocate `newVal`, copy old data, etc.\r\n- with sorting by local DbId (O(N)), we will go to `AddPartialValueToExistingCounter()` in the first iteration and all the next iterations will modify the data in place.\r\n\t\r\n\t\t"""
8418,245794345,"b'Do this, first read the `localDbIds` to a List, then scan this.\r\nAdd to this list if needed with new values.\r\n\r\nSame logic, simpler behavior. There is no need to do much here, we expect 3 - 5 max.'"
8418,245927610,"b'I agree that there could be small difference, but why will the linear scan be better?'"
8418,245928007,"b'the list is ""cleare"" at the end of the usage - this is only a mean of reusing the list between requests'"
8418,246013346,"b""We could just use a finally statment, in which we'll call the disposes and .clear. In wost case finalizers will catch that..\r\nIn the bottom line, all usages of the _scopes are performed inside the PutCounters function"""
8418,246027705,b'Linear scan for < 5 items is going to always be cheaper than the setup cost of anything else'
8418,246028488,"b'I know, but it open us the possibility for missing it later on. In general, we do caching and things like that at the context level'"
8418,246347813,"b'yes `DbIds` already has `@` prefix. we can avoid a counter of this name, but maybe better to wrap all counters in a nested object and call that `@Counters` property ?'"
8418,246351059,"b""We can do that, but a couple of things to consider here:\r\n- when deleting all counters in a group, we're left with a table entry that's all `null`s\r\n- if a counter was deleted and then created again, how would we deal with that in replication? \r\n probably need to keep a deleted etag to know which information is more up do date.   """
8418,246372048,"b""Yes, but let's use shorter name? We care about space."""
8418,246373264,"b""Not sure, right now we are explicit that delete + modify on counter is something that user need to verify won't happen and might cause the modification to be lost or the delete to be lost"""
8418,247408237,"b'Yes, sounds good'"
8418,248660740,b'done'
8418,248660764,b'done'
8418,248660791,b'done'
8418,248661011,b'removed the dictionary '
8418,248661047,b'done'
8418,248661125,b'done'
8418,248661174,b'done'
8418,248661241,b'I removed this function '
8418,248661293,b'removed this function'
8418,248661331,b'done'
8418,248661377,b'done'
8418,248661419,b'done'
8418,248661449,b'done'
8418,248661493,b'done'
8418,248661526,b'done'
8418,248661582,b'done'
8418,248662119,"b""I'm using `@dbIds` and `@vals`. okay?"""
8418,248662989,"b'removed CounterTombstones.\r\nAs discussed yesterday, deleted entries need to keep a change vector string'"
8418,248663326,b'done'
8418,248663467,b'done'
8418,248663995,b'fixed'
8418,249420936,b'Why do we need this?'
8418,249421049,b'Mark as `[Obsolete]`'
8418,249421848,b'Validate that this worked'
8418,249422079,b'Remove this line'
8418,249422817,b'Reverse this'
8418,249424031,b'Remove this check'
8418,249424816,"b""This isn't valid, we are disposing the value while still using `existingCounter`"""
8418,249425374,b'Need to check these'
8418,249425587,b'check this'
8418,249426459,"b""You don't need this. Can do the check directly on the change vector by asking to read by id for each of the existing db ids there"""
8418,249426704,"b'for `loaclCounterValues`, iterate over the internal values, for each non zero etag, go get the db id and then check just that.\r\nYou only care if there are all after the delete or no, nothing else'"
8418,249426937,"b'No need, the original is sufficent.'"
8418,249427165,"b""Extract this to a function that operate over delete cv and counter value.\r\nShould't matter which direction"""
8418,249427589,b'`localDbIds` - extract to a struct that contains both the array and the list in one shot. And can apply operations to them'
8418,249427807,b'Use pointer to avoid copying this'
8418,249428260,"b'Drop this, sum it up in the end which is easier'"
8418,249428373,b'Remove the `sourceDbId` clause'
8418,249428727,b'Should return `bool` here'
8418,249429504,"b""```suggestion\r\n                        if ( table.ReadByKey(counterKey, out var existing))\r\n```\r\n\r\nCan't use the CV here"""
8418,249429656,b'Move this to dedicated struct'
8418,249430010,"b'Paranoia, please'"
8418,249430232,"b'```suggestion\r\n        private static BlittableJsonReaderObject GetCounterValuesData(JsonOperationContext context, ref TableValueReader existing)\r\n```'"
8418,249430401,b'Remove this line'
8418,249430474,b'```suggestion\r\n  \r\n```'
8418,249430977,"b""Check where this is used. This should only be returned as a debug info / specific call. \r\nShouldn't be in general use"""
8418,249431025,b'```suggestion\r\n```'
8418,249431656,"b""Remove this, we won't track the number of counters for now"""
8418,249431801,b'```suggestion\r\n```'
8418,249432094,b'See if you can trim the number of params here'
8418,249432178,b'drop this'
8418,249432216,b'drop this'
8418,249432493,b'Need to handle tombstones here'
8418,249433728,b'Remove `CountOfCounters`'
8418,249433915,"b'Need to handle 4.1 -> 4.2 replication counter (error, abort connection)\r\n4.2 -> 4.1 want to replicate (error, abort connection)'"
8418,249434119,b'ensure the value is different from the value in 41'
8418,249770420,"b'We should hold only the db id here, not the node tag'"
8418,249770475,"b""just db id here. The node tag may change over time, and we don't want to mess things up"""
8418,250109813,"b'@ayende can we have the number of ""counter entries"" here (instead of the percise counters count) this way we\'ll have an indication of the order of magnitude of counters. It\'s the same as tracking the attachment count - there could be 1kb attachment and 10mb attachment, we still treat the equally in it\'s count field'"
8418,250119696,"b""let's try making this work"""
8418,250121686,"b""let's find a way to do that without materialization"""
8418,250166883,"b'Fine by me, yes, but needs to be carefully explained.'"
8418,250208417,b'done'
8418,250208930,b'done'
8418,250209494,b'done'
8418,250210286,b'done'
8418,250210324,b'done'
8418,250210427,b'done'
8418,250216035,b'done'
8418,250216079,b'done'
8418,250216289,b'done'
8418,250624837,b'done'
8418,250624878,b'done'
8418,250625220,b'done'
8418,250625249,b'done'
8418,250625285,b'fixed'
8418,250625340,b'done'
8418,250626567,b'done'
8418,250626668,b'fixed\r\n'
8418,250626716,b'done'
8418,250626866,b'done'
8418,250626931,b'done'
8418,250627997,b'done'
8418,250643825,b'done'
8418,250644217,b'removed this. using `CounterGroupDetail` instead'
8418,250644825,b'done'
8418,250645169,b'done'
8418,250645244,b'done'
8418,253502168,b'done'
8418,253509479,b'TODO to revert timeout'
8603,252161721,b'Where is this being disposed?'
8603,252174057,b'would be better to do that few lines up. After waiting for the task to complete and in try_finally'
8603,252174475,b'Move to DatabaseDestination.Dispose or action Dispose actually IIRC'
8603,252174859,b'we need to increase by the amount of the counters in batch.'
8603,252178734,b'Why concurrent dic?'
8603,252178971,b'NRE here'
8603,252179253,b'We must _never_ do this.\r\nAll `WriteTransaction` _must_ be through the tx merger'
8603,252190546,b'Was wrong here. Everything OK.'
8603,253302497,"b'Are we doing something with that? We need to increase the error count in the progress, right?'"
8603,253302532,b'need to be _database.Time.GetUtcNow()... Also probably can be handled inside the command.'
8603,253302560,b'You need to pass the _missingDocumentsForRevisions into the command and process everything in one batch inside the command.'
8603,253302566,b'Why are we opening the read tx?'
8603,253302577,b'Need to increase the error count here'
8603,253302608,b'move this to the command'
8603,253302615,b'this can be handled inside the command'
8603,253302748,b'This should be moved to Smuggler'
8603,253302941,b'Or batch the number of items by the same rules as we have in MergedBatchPutCommand.'
8603,253303154,"b""Let's use `Path.Combine(NewDataDir(force: true), Guid.New)`"""
8650,253752491,b'`IndexForCompareExchangeForBackup` ?'
8650,253752563,b'Use ReadRaw and read only one property here'
8650,253753664,b'formatting'
8650,253755275,b'use `nameof`. Probably `CompareExchangeCommandBase.Database`.\r\n\r\nuse `nameof` instead of `AddOrUpdateCompareExchangeCommand`'
8650,253756050,b'`nameof`'
8650,253756092,b'`nameof`'
8650,253756473,b'start and pageSize not used here'
8650,253756561,b'rename pageSize to take'
8650,253757764,b'We are doing here probably too much. Check what we are doing in Execute of AddOrUpdateCompareExchangeCommand'
8650,253757864,b'add a comment what +1 is'
8650,253760916,b'add comment: `for deserialization`'
8650,253761695,"b""combine this with 'DatabaseCompareExchangeActions', create one interface `ICompareExchangeActions` with `WriteValue` and `WriteTombstone`. Handle everything there."""
8650,253762317,b'Should be in next `if`. You need to pass the server transaction to read proper value of this'
8650,253762781,b'do it before a allocating context'
8650,253765169,"b""Similar method pops-up in few places. Can we create one method 'somewhere' to handle this? Maybe in `DocumentDatabase`?"""
8650,253767003,b'used named argument for the `true`'
8650,253767501,b'double-check all the places where we are using this ctor'
8650,253767650,b'Need to create a property with this name for proper deserialization?'
8650,253784293,b'done'
8650,253787117,b'done'
8650,253787429,b'done'
8650,253791116,b'done'
8650,253791274,b'done'
8650,253792392,b'done'
8650,253792927,b'done'
8650,253793887,"b'This is unused method, I will remove it.'"
8650,253794675,b'done\r\n'
8650,253795692,b'done'
8650,253813534,b'done'
8650,253819152,b'done'
8650,253819877,b'done'
8650,253826565,b'done'
8650,253826637,b'done'
8650,253835692,b'done'
8650,253835811,b'done'
8656,254154327,b'Can global change vector be null is some cases?'
8675,255031175,b'That can happen? Under what scenario?'
8682,255344472,"b'In Windows, these two flags go together, we want either both or none.'"
8682,255344485,"b""Why? If we aren't durable, we should have no flags."""
8682,255402594,"b'Non Durable is different then ""Danger Mode"", and the reason is FS doesn\'t supporting O_DIRECT flag. But we do use O_DSYNC for minimum guarantee we can achieve. Otherwise we can use danger mode.   O_DIRECT is what we are missing here and it is purely the ability to ask for ack when the data is physically on the disk. \r\n\r\nWe do want at least know the data is on the disk cache and not the OS cache with O_DSYNC.. '"
8682,255498199,"b""If we don't have `O_DIRECT` then we don't really need `O_DSYCN` either, I think. \r\nSame as the change you made for Windows."""
8682,255832070,"b""I disagree, because O_DSYNC provides a guarantee of returning from the write call only AFTER passing all the data to the disk.  \r\nThis is useful, i.e., on ungraceful reset/boot to the machine, without AC power loss. The write was done and written to the journal (but stays in the _device_ memory buffer), the system reboots and the device still have time to write is buffers physically. \r\n\r\nSo, unless we suffer a power loss during that time to the disk, O_DSYNC can protect us from thinking we wrote something we didn't"""
8682,255900064,"b""Actually, `O_DSYNC` force a write beyond the device buffer. In what cases are we not using `O_DIRECT`, though? What cases isn't it supported?"""
8682,255920403,"b'NFS (also zfs iirc, at least the old versions)'"
8682,255922411,b'I am changing this to zero. '
8682,255958348,"b""Okay, I follow. Don't change it to 0 in this case, your reasoning is better."""
8688,255933585,"b""This can generate very long names. Just throw if the 'caller' is null."""
8688,255946606,"b""it is the class name . invoking method it is not too long I have run the tests and didn't get any error about too long path names (on windows) I think it is more informative but if you want I can cut it down to the caller (which is not null since I send it explicitly)"""
8705,256487974,"b'here I wanted to avoid case when we start writing to response - and HTTP 200 was sent, then we encounter an error. Right now we either send error (with 5xx status) which is valid JSON - or valid response. '"
8715,257168233,b'use `Clone` method from BJRO'
8715,257351313,b'Actually why we need to re-read the blittable here? It is on a different context? I do not think so?'
8715,257362905,b'IIRC it throws with something. I will remove this and let you know or I will give a try with clone method. '
8715,257455150,"b'When I get rid of read object:\r\n\r\n```\r\n2019-02-16T09:59:39.0297239Z, 22, Information, A, Raven.Server.Rachis.RachisConsensus, Error when running leader behavior, EXCEPTION: System.InvalidOperationException: Attempted to copy a nested object. This will actually copy the whole object, which is probably not what you wanted.\r\n   at Sparrow.Json.BlittableJsonReaderObject.InvalidAttemptToCopyNestedObject() in C:\\workspaces\\ravendb\\src\\Sparrow\\Json\\BlittableJsonReaderObject.cs:line 872\r\n   at Sparrow.Json.BlittableJsonReaderObject.get_BasePointer() in C:\\workspaces\\ravendb\\src\\Sparrow\\Json\\BlittableJsonReaderObject.cs:line 173\r\n   at Raven.Server.ServerWide.ClusterStateMachine.UpdateValue(Int64 index, Table items, Slice lowerKey, Slice key, BlittableJsonReaderObject updated) in C:\\workspaces\\ravendb\\src\\Raven.Server\\ServerWide\\ClusterStateMachine.cs:line 755\r\n   at Raven.Server.ServerWide.ClusterStateMachine.SetDatabaseValues(Dictionary`2 databaseValues, String databaseName, TransactionOperationContext context, Int64 index, Table items) in C:\\workspaces\\ravendb\\src\\Raven.Server\\ServerWide\\ClusterStateMachine.cs:line 821\r\n   at Raven.Server.ServerWide.ClusterStateMachine.AddDatabase(TransactionOperationContext context, BlittableJsonReaderObject cmd, Int64 index, Leader leader) in C:\\workspaces\\ravendb\\src\\Raven.Server\\ServerWide\\ClusterStateMachine.cs:line 788\r\n   at Raven.Server.ServerWide.ClusterStateMachine.Apply(TransactionOperationContext context, BlittableJsonReaderObject cmd, Int64 index, Leader leader, ServerStore serverStore) in C:\\workspaces\\ravendb\\src\\Raven.Server\\ServerWide\\ClusterStateMachine.cs:line 275\r\n   at Raven.Server.Rachis.RachisStateMachine.Apply(TransactionOperationContext context, Int64 uptoInclusive, Leader leader, ServerStore serverStore, Stopwatch duration) in C:\\workspaces\\ravendb\\src\\Raven.Server\\Rachis\\RachisStateMachine.cs:line 45\r\n   at Raven.Server.Rachis.RachisConsensus`1.Apply(TransactionOperationContext context, Int64 uptoInclusive, Leader leader, Stopwatch duration) in C:\\workspaces\\ravendb\\src\\Raven.Server\\Rachis\\RachisConsensus.cs:line 74\r\n   at Raven.Server.Rachis.Leader.OnVoterConfirmation() in C:\\workspaces\\ravendb\\src\\Raven.Server\\Rachis\\Leader.cs:line 472\r\n   at Raven.Server.Rachis.Leader.Run() in C:\\workspaces\\ravendb\\src\\Raven.Server\\Rachis\\Leader.cs:line 321\r\n2019-02-16T09:59:39.0336249Z, 68, Information, Server, Raven.Server.RavenServer, TCP \r\n```'"
8715,257455208,b'Force pushed change with clone method. Thanks for suggestion. '
8721,257461947,"b""It's better to throw `BadRequestException` here and let the base handler to do the work."""
8716,257193266,"b""It's safe to add this but I don't think it's the root cause and might not guarantee `_current` will be _always_ disposed.\r\n\r\nThe current implementation assumes that `_current` file should be on `_scratchBuffers` dict - see `AddScratchBufferFile()` method.\r\n\r\nI wonder if we might have a race condition between iterating over `_scratchBuffers` and `NextFile()` call - `NextFile()` called at the time of `ScratchBufferPool` being disposed? \r\n\r\nThe only scenario I could think about is that `NextFile()` is called from `Free()` which is called in the background by the flusher - so maybe concurrently with environment dispose?"""
8716,257495220,"b""Yes, my fix is wrong, I forgot what I found before and even wrote about in the issue...\r\nThe problem is that scratch file dispose of isn't cleaning the dictionaries and the _current reference is keeping those dictionaries alive"""
8694,256911124,"b""I'm not sure we want to use not pooled memory here always.\r\nMaybe we better store some usage statistics and change this to some pooled solution, if we have a pathological high memory usage during replication"""
8694,257462213,b'This struct is disposable. We probably need to dispose this?'
8694,257462268,b'Should be `<=` in this case'
8694,257462303,b'`<=` ?'
8694,257462330,b'This only kicks-in after (assuming default configuration) 128mb'
8694,257502494,b'done'
8694,257502532,"b""Here we don't have enough space on the currently allocated chunk (added a comment)"""
8694,257503106,b'Added disposal for it.\r\nPretty sure that this is disposed during context dispose anyway.'
8694,257503499,b'We do dispose it in MergedDocumentReplicationCommand'
8728,257552629,b'Why? This is the same.'
8728,257552668,b'Why do we still need this?'
8728,257577659,b'Server uses PAL for this. Client needs to use PlatformDetails.'
8704,256442771,b'Is this debug leftovers?'
8704,256444106,"b""yes, but I'd like to leave this - as it may be useful for debugging memory issues in the future"""
8704,256484908,"b""No, lte's remove that, debug builds are already expensive enough"""
8729,257675341,"b'`[Obsolete(""DocumentsChanges.FieldOldType is not supported anymore. Will be removed in next major version of the product."")]`'"
8729,257675411,"b'`[Obsolete(""DocumentsChanges.FieldNewType is not supported anymore. Will be removed in next major version of the product."")]`'"
8729,257705442,b'done'
8729,257705465,b'done'
8648,253789155,"b'We drop the concept of counter tombstones completely, right? What is the approach now?'"
8648,253789898,"b""Here we have counter group vs number of particular items in a group, don't we? E.g. we have a one group but we processed 2 counters from that group, possible?\r\n\r\nIf it's gonna work differently then maybe renaming `EtlItemType.Counter` to `EtlItemType.CounterGroup` would make more sense?"""
8648,253790644,b'What is actually `CounterKey` ? Is it ID of a related document?'
8648,253793213,b'Does value being `LazyStringValue` mean that counter was deleted?'
8648,253809863,"b""yes, we dropped counter tombstones completely. \r\nnow we handle deletes by keeping a 'tombstone-change-vector' (dbid + etag of each partial value) inside the counter-group document . in replication, when we have a delete/increment conflict we use this 'change vector' to decide which more up to date """
8648,253810109,b'yes `EtlItemType.CounterGroup` makes more sense'
8648,253812109,b'yes for now `CounterKey` is just the document id. \r\nbut we are planning to limit the size of a counter group to improve performance. \r\nand then format of `CounterKey` will be : docId | record separator | prefix \r\n'
8648,253812380,b'yes'
8648,253817889,b'Do we ever remove those from the counter group?'
8648,253818207,"b""That's tricky. Could you put a comment so one won't be surprised as I was?"""
8648,253904905,"b""no we don't remove them, at least for now. we've discussed about trying to use the `TombstoneCleaner` to remove deleted counters that their 'change vector' is already merged. \r\nbut this is not implemented yet"""
8648,254160698,b'ok'
8648,256823388,b'@maximburyak can you please verify that this is correct ?'
8648,257678355,b'reverted this change'
8648,257698888,b'PlatformDetails.Is32bits'
8648,257739795,b'done'
8727,257549534,b'wrong comment?'
8727,257549611,"b""Why is that the case? The revision itself isn't conflicted, after all. \r\nOr is it that it was conflicted on another node? """
8727,257604688,"b'This is relevant in the case when revisions are enabled.\r\nSo node A generates a document with a revision, and node B also.\r\nWhen the conflict is resolved, we need to add the `Conflicted` flag to an already existing revision. '"
8727,257656173,"b'yes, removed'"
8734,257993108,"b""@aviv86 please verify if this change is correct. It was throwing when document doesn't have counter. Maybe we need test for that?"""
8675,257995204,b'ping'
8734,258007134,b'yes this is correct'
8731,257804996,"b'```suggestion\r\n                Task.Factory.StartNew(ExecuteClusterTransaction, Cts);\r\n```\r\n\r\nNo reason for this.'"
8731,257805241,b'What is this for here?'
8731,257821749,b'Tens of millions of dictionary entries showed up in the original dump. The leak was probably from the _current of the scratch buffer pool but still clearing the dictionaries will release the memory faster. '
8731,257922041,"b""The intend is to clear the dictionaries, right? I'd rather prefer to call `.Clear()` on those dicts explicitly in `Dispose()` method or create method `ClearDictionaries()` and using from both: `Reset()` and `Dispose()` \r\n\r\nI don't expect any changes in `Reset()` method in the future but just in case let's try to avoid calling it during the disposal as it's supposed to reset the state of the scratch buffer file and continue using it, not to dispose / clear the resources. """
8714,256794343,"b""Can't we do something like `context.Write(_writer, pullReplication.ToJson())`, if possible would be much cleaner."""
8714,256795138,"b""Let's rename this to `None`"""
8714,256796843,"b""Let's move this to `ApplyBackwardCompatibility` method"""
8714,256796907,"b""Let's move that to `ApplyBackwardCompatibility` method"""
8714,256797068,"b""Let's use `.Contain()` extension method"""
8714,256797343,"b'We can use the `ToJson`, yes. This is not a hot-path. On other items too, if applicable.'"
8714,256817044,b'should be static hashset (case insensitive)'
8714,256817140,b'use RavenConfiguration.GetKey to get those values'
8714,256817327,"b'can also be static and needs to be case insensitive, can use hashset here'"
8714,257502634,b'We need to use StringComparer.OridinalIgnoreCase here'
8714,257502636,b'We need to use StringComparer.OridinalIgnoreCase here'
8714,257503252,b'typo: `Pull Replication`'
8714,257503272,"b'What is inside the `pull replication` json. Any confidential data? If yes, then we probably do not want to write it to the log, just basic info.'"
8714,257513147,"b""Let's implement `ToJson` in `SqlEtlConfiguration"""
8714,257513163,"b""Let's implement `ToJson`"""
8714,257513166,"b""Let's implement `ToJson`"""
8714,257513183,"b""Let's implement `ToJson`"""
8742,258151454,b'finished to finish? running to finish?'
8742,258151925,b'where is that disposed?'
8742,258364051,"b'The issue was that we had an a polarity issue in the log statement.\r\nIf `Join` return `true`, we are finished, not running'"
8742,258364097,"b'When the state of the engine changes, IIRC'"
8742,258367921,b'The message looks something like this:\r\n`Waited for a full second for thread 123 (running) to finish`'
8754,258630538,b'OUCH!'
8752,258626839,"b""```suggestion\r\n                pagesRequired = Bits.NextPowerOf2(bytes) / Constants.Storage.PageSize ;\r\n```\r\n\r\nShouldn't this be just this? There can't be any remainder here."""
8714,258829293,"b""Aren't you overwriting the `DataDir` here?"""
8714,258829800,b'Why are you calling the commands here and not modifying the database record directly?'
8714,258830646,b'Why do we have a check here?'
8714,258845542,"b'No, I am not saving the DataDir in the backup'"
8714,258845788,"b'We are writing here certificates, password etc.'"
8714,258848324,"b'I need to get new information for the command. like, TaskId, mentor node etc.'"
8735,258014631,b'Is it possible to read values for a different database here?'
8735,258022794,b'Can be removed (EtagForBackup is being used)'
8735,258023063,"b'I see why it is easier to delete the compare exchange values also on soft delete, but is it correct?'"
8735,258027889,"b""1) In case of restore failure, make sure that all the compare exchange & identities are deleted (in case it happened before we saved the database record)\r\n2) RestoreFromLastFile isn't needed anymore since you already imported everything from all the files."""
8735,258031701,b'yes it returns all values starting from keyslice.'
8735,258032407,b'done'
8735,258034484,b'The compare exchange values needs to be deleted when the database is deleted (no matter if its hard or soft delete)'
8735,258386969,b'@grisha-kotler  how come we can create a compare-exchange values before there is a database record?'
8735,258456045,b'That breaks behavior for subscriptions cleanup in CleanupDatabaseRelatedValues(at least)'
8735,258457339,b'Did you forget to push this?'
8735,258457994,"b'```suggestion\r\n                        AddInfo($""Started {backupSizeType}{backupType} backup"", onProgress);\r\n```'"
8735,258458392,b'Add {} here'
8735,258458780,b'`currentLastEtag` vs `_backupResult.GetLastEtag()` - why is that?\r\nSame for `_backupResult.GetLastRaftIndex()` vs `currentLastRaftIndexForBackup `'
8735,258459051,"b""I think we should do it the other way around. \r\nBut once that happen, I don't think we should delete partial failure, let the user handle this"""
8735,258459387,b'Missing `Count = 1`'
8735,258459432,b'Missing `Count = 1`'
8735,258459494,b'Missing `Count = 1`'
8735,258459837,"b'Add the type of the command here as well, its index, etc. \r\nWe want to give as much detail as possible.'"
8735,258460119,"b""Why? This shouldn't be here. We should't be setting values before the db record exists"""
8735,258460501,"b""You need to make sure that this doesn't happen, otherwise, we might leak data from another db, etc."""
8735,258460656,b'Missing {}'
8735,258460843,"b'Here you are properly ensuring that we can get data only within the same db, should be done elsewhere as well'"
8735,258461048,b'Missing {}'
8735,258461156,b'Add a debug assert here that the size is correct'
8735,258461554,"b""Shouldn't we have a `using` here?"""
8735,258461663,b'Can read data from another db'
8735,258461715,b'`using` ?'
8735,258463723,"b""You aren't limiting this to just `db/` prefixes here"""
8735,258464007,"b""You aren't limiting this to just the relevant db here"""
8735,258464284,"b""You are writing to the compare exchanges, but not limiting to just cmp exchange values.\r\nAren't you also going to get other db scope values there?"""
8735,258464824,"b'Yes, we should always delete these. \r\nsee \r\n![image](https://user-images.githubusercontent.com/116915/53092764-4b4ae000-351e-11e9-8797-26b6cb769d88.png)\r\n'"
8735,258466034,b'Can we avoid this materialization?'
8735,258467515,b'fixed'
8735,258468901,"b""We can't access the compare exchange and the identities in a partial failure because the database doesn't exist. @maximburyak we added a new property IsFromBackup to bypass that.\r\n\r\nWe thought about doing something better:\r\n1) Add a property in the DatabaseRecord: State: Normal/RestoreInProgress.\r\n2) Save the database record, Disabled and with RestoreInProgress before starting the backup (and prevent access to it while restoring)\r\n3) If we fail we send DeleteDatabaseCommand (that will delete everything that is needed)\r\n4) After a successful restore, enable the database."""
8735,258485650,b'I have deleted this method and its CompareExchange reliative\r\nOnly left those who seek from given prefix'
8735,258487092,"b'loweredPrefix slice is made from ""db/"" string.'"
8735,258493943,b'fixed'
8735,258495934,"b""Just realized that we can't restore/import compare exchange or identities when the cluster is down.\r\nWe even can't restore the database record itself.\r\n\r\nI like the flow @grisha-kotler described, but maybe without the additional property and rely only on the Disabled.\r\n \r\nAs a side note: In the studio (not for this issue) we should gray-out the import options of compare-exchange and identities when there is not cluster. """
8735,258500157,b'I am using EtagForBackup as a index to backup both compareExchange and identities.'
8735,258503199,b'added'
8735,258504227,b'added'
8735,258504428,b'added'
8735,258506511,b'done'
8735,258506913,b'done'
8735,258507318,b'done'
8735,258507944,b'done'
8735,258519789,b'done'
8735,258520541,b'done'
8735,258520574,b'done'
8735,258520596,b'done'
8735,258521801,b'done'
8735,258523993,b'it looks right to me'
8735,258534411,b'done'
8735,258561086,b'You can modify the blittable directly. No need to deserialzie it.'
8735,258563776,b'Cannot be changed. Would brake backward compatibility and you would not be able to deserialize old compare exchange commands.'
8735,258567181,"b'""CmpXchgTombstone"" and `CompareExchangeTombstones`'"
8735,258575403,b'done'
8735,258671360,"b'The restore process should be:\r\n\r\n\r\n* Create the database record on the local machine, marked disabled\r\n* Restore cmp xchg, identities, etc\r\n* Restore the database itself, as usual\r\n \r\nError midway, abort as is and let the admin clean it up'"
8735,258671624,"b""And after you run through the `db/` stuff, you'll read other values.\r\nThe prefix you pass it empty here."""
8735,258873968,b'done'
8735,258874529,b'@karmeli87 replying only on the disabled will allow the user to enable the database during the restore'
8735,258875436,b'done'
8735,258879243,b'this should stay for backward compatibility'
8735,258879305,b'done'
8735,258888952,"b'So what? If user want to shoot own foot, let them'"
8648,259251829,"b'I thought that we had the ability to negotiate on specific features, why do we need to enable counters as well?'"
8648,259253606,b'Can we avoid the list allocation?'
8648,259253775,"b'Why are we using case insensitive sort?\r\nFor that matter, why is this sorted?'"
8648,259254631,b'Add {} here'
8648,259254819,"b""For very large number of counters, don't we have an issue here?\r\nThat _should_ be handled by the counter splitting, though."""
8648,259256340,"b""This can be a very big list (licensing has 31 millions). We can't do that in a single transaction.\r\nWe have to break it into multiple transactions."""
8648,259257569,"b'Can we reverse this logic?\r\nHere we check what the value is _not_, then in the `else` use `existingCounter as BlittableJsonReaderObject.RawBlob`\r\nI would rather we did the check here and reverse the if/else'"
8648,259258344,"b'This mutate the arg in a non obvious way, better to return `RawBlob` here'"
8721,259347401,"b""I will handle this in different way (like we do in other endpoints). \r\n\r\nI will respond with HTTP 200 if it passes validation and then it doesn't pass, but I return status in property: IsValid. \r\n\r\nThen we:\r\n- avoid having error in console \r\n- we can distinguish between connection error (http 5xx) and parse error (http 200 and isvalid = false)\r\n\r\nThis is how we handle such things in any other controller in the same file.  """
8735,259608411,"b""Let's use `==` instead of `Equals` here. It is safer, less possibility to get NRE if we will change `DatabaseState` to nullable in the future (probably not, but a good practice)"""
8735,259608459,b'`==`'
8735,259608464,b'`==`'
8735,259614028,b'done\r\n'
8789,259747410,"b'I think you mix classes responsibilities. You are in  HandleServerNotResponsive method in request executor, but comment is about changes api. So I think we should handle that in changes api instead. '"
8789,259747607,b'I think we should catch here and handle the exception. '
8779,259615311,"b""Let's use something better here. This will generate a double.\r\nEither use a Guid or an incrementing number"""
8779,259615364,"b'This is wrong. We should be invoking the `PutSubscription` here on each one of them, not trying to ship it to the Tx Merger and invoking it from there.\r\nThat is a bad idea.'"
8779,259615372,b'Drop this'
8779,259615388,"b""Note that you aren't actually waiting for this to complete here!"""
8779,259615419,b'How are we handling the change vector of the subscription?'
8779,259623623,"b'long index = 0;\r\nwhile(true) {\r\n    var subscriptionName = ""{SubscriptionName}.{++index}"";\r\n   if( SubscriptionNameExists(SubscriptionName ) == false ) {\r\n         SubscriptionName = subscriptionName + ""."" + index;\r\n        break;\r\n}'"
8779,259636437,b'rename to `_originalName`'
8779,259636474,b'please move it to separate file'
8779,259636484,b'`GetSubscriptions`'
8779,259636518,"b'no need for `async` and `await` here, I think?'"
8779,259736571,"b'Ignore this, old stuff'"
8623,252802173,"b""Shouldn't you be checking if this succeeded?"""
8623,252802351,"b""Isn't there a race here, why no check the return value from `CompareExchange` ?"""
8623,252804117,"b'That is a bad idea. If we are sleeping and suddenly want to prefetch, that is going to _not_ prefetch and we have piecemeal I/O\r\nShould use an event, instead.'"
8623,252806055,"b""Why do we want something like this?\r\nIt would be much easier to use a `ConcurrentQueue`, instead.\r\nThis is going to be triggering I/O, so I don't think we need to worry that much about efficiencies."""
8623,252806524,b'why this change? '
8623,252808891,"b'This is a reservation, I have code here that is using `Interlocked.Increment` instead. Needed to run slow tests, that is why I did this PR... '"
8623,252809088,b'Not really. Because it works as a reservation system. '
8623,252809665,"b'Nope. Because the caller is high frequency and we want to avoid the actual cost on the caller side. We dont care if we miss a few, in fact it goes way beyond that... we dont care if we miss a ton of them because we dont have enough space on the reservation queue. '"
8623,252809981,"b'Yes we do, because the one that is going to pay for it is the caller... The whole point of the optimization is to move the slow parts outside of the critical path, even at the expense of losing a few hits here and there.'"
8623,252810011,"b""The caller is already protected by `ShouldPrefetch`, so I don't think we are going to see too many of that"""
8623,252810333,"b'Because it was a mess, all methods there are Memory methods, not protect methods. They happen to be useful for that, but we have many things scattered all over the place. '"
8623,252810646,"b'Break it to a separate PR, it make it really hard to review the changes for this PR, which are already complex enough to require careful review'"
8623,252812994,"b'Its just a rename, nothing more. Had to move stuff around to access that. So you will still see the changes in places that used that anyway. To me is a simple refactor rename.'"
8623,252813508,"b""You will. Don't trust me, trust the profiling trace :)"""
8623,252837208,"b'After some changes, the profiling trace suggests we can do wake up based on quantity. I tried though to get down the number of milliseconds down, with barely any change in hard page faults though. '"
8623,252844943,b'Can you show the numbers?'
8623,252846151,b'180 hard faults per second either way. '
8623,252846722,"b""For reference we were in the 100ish range. But I didn't have time today to check the performance targets as I don't know the behavior yet of 4.2"""
8623,258623262,b'Implemented using a BlockingCollection instead. The wait was too much on average. '
8623,258623522,b'Using `BlockingCollection`'
8623,258624453,b'Needs to be moved to Sparrow.Server'
8623,258624579,b'Better to move it to Sparrow.Server if this is not used in Raven.Client'
8623,258625084,"b'Botched merge, that is not used. Removing'"
8623,258625710,b'That is going to be used by RavenDB-12799 (https://issues.hibernatingrhinos.com/issue/RavenDB-12799) on `Sparrow`'
8623,258662124,"b'Better to delete, rather than comment the code'"
8623,258662304,b'What is this going to be used _in sparrow_ ?'
8623,258662691,"b""The compiler can't assume power of 2 here, no?\r\nCan we turn this to a shift?"""
8623,258662983,b'what make us go through here again?'
8623,258663976,"b'Okay, this is used by the logging infrastructure, which we want to keep in sparrow'"
8623,258665086,b'```suggestion\r\n            PalDefinitions.PrefetchRanges command = default;\r\n```'
8623,258665151,b'This looks clearer (minor)'
8623,258665353,b'Delete commented code'
8623,258665769,"b""```suggestion\r\n                GC.KeepAlive(GlobalPrefetchingBehavior.GlobalPrefetcher.Value);\r\n```\r\n\r\nWe use this commonly, and it is guaranteed that the compiler won't elide this """
8623,258670400,b'Yeah. Was merging and wanted to be sure it was not needed and forgot to delete afterwards'
8623,258670626,b'We can if we control the size. Easy change if we want to do so. '
8623,258671961,"b'Ok, for readability purposes it makes a lot of sense. But, there is no way thr compiler could elide it, because of the static side effects. If that would happen, there are a few invariants violated (major regression). '"
8623,258673120,"b'The ring buffer works in a acquire, release mode. You first acquire, do what you need to do and then release. On very small buffers with very high traffic you could end up in a situation where you have hit the bounded size. You end up there when that happens. '"
8623,259727318,b'Should inherit from `NoDisposalNeeded`'
8791,259963566,b'why we need to do that?'
8791,260181949,"b""we don't, removed that"""
8758,258668318,"b'Can we avoid this allocation? Return `Span<ReplicationItem>` and user `ArrayPool`, instead?'"
8758,258668518,"b'Same, can we reuse?'"
8758,259046187,b'done'
8758,259239931,"b'ReplicatedItems is a struct, can never be null. You probably want just iterate over it.'"
8758,259239976,b'```suggestion\r\n                        item?.Document?.Dispose();\r\n```'
8758,259240033,b'Why do we need to make this distinction? It it better if the caller always pass an array from the array pool'
8758,259240550,b'Get this array from the pool'
8758,259619282,b'item cannot be null'
8758,259619287,b'but document can be'
8758,259622176,b'done'
8758,259622179,b'done'
8758,259622194,b'done'
8758,260147427,"b'Check if ReplicatedItems are not `null`, when you will get exception in `ReadItemsFromSource` then you will get NRE here'"
8758,260150300,b'This looks like `DocumentsStorage.Get`. We should not expose the method externally? Also probably you do not want to throw on conflict?'
8758,260151462,b'Can be private after using `Get` in the command'
8758,260163298,b'why we are creating logger each time?'
8790,260174091,"b""Why not to set `NumberOfPagesInSection` accordingly instead? Note that have multiple usages of `NumberOfPagesInSection` there (e.g. `FreePage()`) - isn't this a problem?"""
8790,260254641,"b""The issue is that we need to keep the same structure between 32 bits & 64 bits systems.\r\nSo we can't change the size, because then we wouldn't be able to open the files between platforms.\r\nThat is why I'm just marking some of the data as busy upfront.\r\nAnd in FreePage, the check is merely to catch bad data, which is fine"""
8790,260260569,"b""Oh, right.  It's ok then.\r\n\r\nMinor issue - let's extract this code to a method and use it in `GetNumberOfPreAllocatedFreePages()` to avoid code duplication"""
8802,260404259,b'Test failed. We need to wait for indexing after this I think?'
8802,260477532,b'Yep'
8824,261216343,b'Do we need to worry about case sensitivity here?'
8824,261219293,"b'Good question, I will check that using empirical mode. :) '"
8648,261225700,b'done'
8648,261225724,b'done'
8648,261225762,b'done'
8648,261225797,b'removed this\r\nproperties are already sorted in blittable '
8648,261225840,"b'not sure if we can avoid that, because we need to know the number of counters (excluding deleted counters)'"
8648,261225870,"b'not exactly. we negotiate on a set of supported features. \r\nfor `OperationTypes.Replication` we have to choose between : `ReplicationWithPullOption` (unknown to 4.1), `ReplicationAttachmentMissingVersion41`, `ReplicationAttachmentMissing`, `ReplicationBaseLine`\r\nso if we want to have `Cluster Transactions` supported for replication with v4.1.x, our only option is `ReplicationAttachmentMissingVersion41`'"
8823,261228666,b'Could be a `readonly struct` with readonly fields and then `TryConvertQueryMethod` could take as `in` parameter?'
8824,261231137,b'It needs to be case insensitive. Thanks. I will fix that. '
8826,261250884,"b'What about has delayed replication, has pull replication as sink, has encrypted backups, etc?'"
8826,261279787,b'done'
8823,261350800,"b""Wouldn't the implication be that the person referencing the client API would need to switch the project to C# 7.2+ in order to implement the converter?"""
8829,261306847,b'Also add the database name'
8829,261307570,b'Missing database name'
8829,261517193,b'it might be an AggregateException now. ExtractSingleInnerException on `e`'
8829,261517466,b'can we get AggregateException here now?'
8648,261619834,"b'Can I get more details about this? Blittable does not sort properties in any way, but you might be referring to a fact than during insertion to blittable those properties are sorted. Want to double check that.'"
8837,261621880,"b""let's avoid LINQ, some of these notifications are created often when Studio is connected"""
8837,261756867,b'done '
8830,261854695,"b""I don't think this is the case. Here we are running with no security, but we if we return no results, then the request won't work, would it?\r\nIn that case, a cluster using HTTP won't work either, unless I'm missing something?"""
8837,261854724,b'Why not return an empty array?'
8837,261854801,"b'We actually probably need this here. If we have a lot of events / messages, but none that we can send, we need to do the heartbeat here.'"
8648,261854824,b'This is an array property inside the metadata. The sorting is on the values in the array'
8829,261855295,b'Need timeout configuration'
8829,261855323,"b""Let's add a log here"""
8648,261856615,"b'Okay, I see'"
8837,261859014,"b""if we return null, then we don't append anything to the queue"""
8837,261859033,"b'see note above - when we return null such message is not queued, so we timeout on queue.get and heartbird is sent'"
8837,261859107,"b""moreover we need to filter inner structures and we don't want to send database names users can't access. """
8837,261859132,b'here: https://github.com/ravendb/ravendb/pull/8837/files/a22b9775326dfcd390fe541d5d948d731f9990ac#diff-88c47ac394f9600c53afb59060c78863L52'
8830,261859292,"b""Request contains origin when it is cross-site request, or request with not-simple methods (GET, HEAD). \r\n\r\nSo, if it is same origin - no headers needed - origin isn't passed. \r\nIf it is https with cross-site, then origin is filled in - we go further and filter based on topology\r\nIf it is http with cross-site, origin is filled in  - but we send back what we have. """
8837,261859337,"b'Okay, looks good, then'"
8830,261859428,"b'Okay, I see. '"
8827,261249042,"b""Why do we have multiple of them? We don't actually care if the concurrent usage is between methods or just in one method. I think we should have just one of these"""
8827,261254973,b'They call each other '
8827,261256428,"b""That being the case, let's do this differently and say that we want to do:\r\n`Interlocked.CompareExchange(ref val, 0, CurrentThreadId)`\r\n\r\nThis way, in the same thread, it will work, but you can catch it if it is between threads."""
8818,261860680,"b""Shouldn't we dispose of the Cts? maybe we need to override the Dispose of the HttpContent and dispose of the Cts there."""
8818,261860975,b'We are also seems to be leaking a timer here'
8648,261861661,"b""Yes sorry I wasn't very clear about it.\r\n\r\nI was referring to the `CounterGroup` blittable that I fetch the counter names from.\r\nEach counter-name is a property name in this blittable. \r\n\r\nduring insertion to blittable those properties are sorted. \r\nalso when iterating over them with `GetPropertyByIndex(i, ref prop)`"""
8818,261862084,"b'No, `StreamQueryContent` will handle that for us.'"
8818,261862093,"b""This is handled by `StreamQueryContent`, if there is an error here that isn't caught, we'll let the finalizer handle this.\r\nExpected to be very rare"""
8858,261862946,"b'Can we do that? I think we are reusing the servers, no?'"
8858,261863234,b'so? are we relying on timeouts in the tests?'
8858,261863304,"b'I can set no timeouts only for the server in hand, and restore the timeout once the test is over'"
8858,261867339,"b'We should do this only on our server, so we need `UseLocalServer` here too, I think'"
8858,261867686,b'Not needed: `var leader = await CreateRaftClusterAndGetLeader(numberOfNodes);` is being used in this test (creates new servers)'
8861,261869198,b'What is the difference?'
8861,261869354,b'at v4.2 it passes.  at 4.1 it fails.  I am searching the problem for 4.1 right now.. Please wait before merging.. '
8867,262397458,"b'In here, do we want to wait until `readAndCommitSnapshotTask` is done?\r\nBecause otherwise we might dispose the `cts` before it is noticed by the task'"
8867,262397651,b'Do we need `cts` here as well?'
8867,262398023,"b'I think it might be a better idea to move the context into the while.\r\nThe reason is that we want to reset / renew it on each iteration, rather than risk it getting too big if we wait for a lot of time'"
8867,262398252,"b'Reading the content may take a while (2GB, frex). I think we ought to provide the `cts` here as well'"
8867,262398554,b'`_followerMatchIndex >= earliestIndexEntry-1` ?'
8863,261951365,"b""Let's move it to server-side options"""
8867,262436512,b'done'
8867,262438792,"b""`SnapshotInstalledAsync` has two possible blocking calls.\r\n1. opening a write tx\r\n2. reload license\r\n\r\nIn both cases I'm not sure if cancellation is necessary. \r\nthough we can cancel between the two calls.\r\n"""
8867,262438968,b'done'
8867,262439794,b'done'
8867,262445408,b'This was only to make the code more clear and to add the comment in the same line.'
8868,262164058,"b'We need to add this to all the storages that we have (configuration, indexes, etc)'"
8868,262380696,b'minor: `Storage.` -> `Options.` ? maybe use `nameof` here'
8868,262399424,"b""Why applicable to ARM only? Don't we want it to be generally available?"""
8868,262399779,"b'```suggestion\r\n                            addToInitLog?.Invoke($""Still calculating checksum... ({sortedPages.Length - i} out of {sortedPages.Length}"");\r\n```'"
8868,262399886,b'Add the number of pages and the time that it took'
8868,262400224,"b'Why do we have this limitation? If we are running on low end x86 machine, we might want this as well'"
8868,262400337,b'Add `lastFlushedJournal` here'
8868,262416583,b'On my request.'
8868,262512932,b'What is the reasoning?'
8867,262542495,b'ok'
8867,262542966,"b'ok, not needed, then'"
8875,262610162,"b""I don't think that this method is used anywhere?"""
8875,262640506,b'I think it would be better to check why `DocumentCompare.IsEqual` does not return `DocumentCompareResult.NotEqual | DocumentCompareResult.AttachmentsNotEqual` flag'
8875,262806783,b'seems i forgot to clean this one up'
8875,262807100,"b""I did check it and it is tailored for put document and not generalized.\r\nIf I'll change it I'll mess up conflicts...\r\n"""
8875,262809288,"b'I think we need to look into that, to avoid iterating through document twice'"
8875,262830732,b'I already looked into it and its no good'
8875,262830929,"b""i'm not iterating the document i'm accessing a single property"""
8875,262839564,"b""There seems to be wrong logic behind the compare code i'm afraid this has high probabbility to break revisions and counter code but i guess we'll need to see the test result to know"""
8874,262539411,"b'Given that this is new configuration, why do we have `Hrs` here? Do we usually have both `Hrs` and `Hours`?'"
8874,262543564,"b'We are using _shortcuts_ (ms, sec, min, hrs) on TimeSetting fields in most configurations. Should I stick to it? or use _Hours_ ?'"
8874,262544450,"b'@ppekrol What should be our default position here?\r\nDo we want to have `Hrs` and `Hours`, just one?'"
8874,262546083,b'`Hrs` only'
8874,262633267,b'rename to `RetentionTime`'
8874,262633413,b'rename to `RetentionTime`'
8874,262636998,b'Also needs to be nullable to maintain backward compatibility'
8874,262637867,b'rename property to `RetentionTime`'
8874,262638133,"b'if this will be null, then use the value from configuration'"
8874,262907933,b'done'
8874,262908183,b'done'
8874,262908645,b'done'
8874,262909870,b'done'
8879,263264427,"b""Why do we need to use `Environment.Stacktrace`? Wouldn't it be the same as `ExceptionDispatchInfo.SourceException` that we have here (`exception.SourceException`) ?"""
8879,263337819,"b'That capture the case _until_ this point, with `Environment.Stacktrace` catching _From_ this point'"
8889,263338511,b'remove this empty selector'
8889,263338578,b'remove those empty lines'
8890,263386787,"b'```suggestion\r\ne.Data[""ReturnCode""] = 0xDEAD;\r\n```'"
8890,263387085,"b'```suggestion\r\n                            if(e.Data[""ReturnCode""] is int returnCode)\r\n                                   return returnCode;\r\n   \r\n```'"
8890,263391482,b'sure'
8890,263391517,b'done'
8794,263397121,b'probably we need to update this message as well. '
8888,263384628,"b'```suggestion\r\n            throw new InvalidOperationException(""Illegal modifications of \'@attachments\' detected for document: "" + documentId);\r\n```'"
8888,263384864,"b""Let's make this into a constant, like the `Default` field there"""
8888,263384935,"b""Let's make this into a constant, too"""
8888,263385126,"b'Am I missing something, or is this never set?'"
8888,263390429,b'done'
8888,263390464,b'done'
8888,263391673,"b""I forgot to set it but if we will use this than we can't use constant options so its allocation vs better erroring, i think it is best to catch the exception on patch only and add a better message there"""
8888,263499400,b'Better to just state that there was an error processing this and use the `ioe` as inner exception'
8888,263499515,"b'Sounds good, yes'"
8888,263569067,b'Done'
8893,263570548,b'Is there an option to calculate that only when we are switching from one RootObjectType to another?'
8893,263572976,"b'We did that, but the issue is that we may have multiple _instances_ of this pointing to the same location, that is why we have to read it anew every time'"
8687,255913256,"b""No. We may have a lot of them, and we don't want to process them by hand.\r\nInstead, add a Voron index for the public key pinning hash and check on that.\r\n\r\n"""
8687,255913450,"b""Don't you already have that, from when you loaded them, just before this code?"""
8687,255913639,b'Move this up?'
8687,255913772,b'Do we need to compute the hash again?'
8687,255914503,"b""Why? This isn't the right place to handle the actual logic of this.\r\nYou detected, based on your current state, that the certificate should be added.\r\nNow you call to `PutCertificateCollectionInCluster`, which is going to add it to the cluster, which already make it a sync operation.\r\nUse a dedicated command for this, that will handle  the check if it exists, remove previous copies, etc.\r\nNote that you should also be explicit that the certificate has already been replaced, so registering this in the cluster may _fail_, and should be handled. """
8687,255921886,"b'Certificate definitions are stored in the ""Items"" table along with other objects. Do you want to define an index on that table or move the certs to a table of their own?'"
8687,255957991,"b'Yes, given that we have new behavior for that, we should store it separately and have a dedicated index for that.'"
8687,260765272,b'Added a dedicated command.'
8687,261082232,"b'```suggestion\r\n                            var readCert = ServerStore.Cluster.GetCertificateByThumbprint(ctx, key);\r\n```'"
8687,261082508,"b'Revert this change, thumbprints are base 16 and case insensitive'"
8687,261082611,"b'```suggestion\r\n                                   ServerStore.Cluster.GetLocalStateByThumbprint(ctx, certKey);\r\n```'"
8687,261082960,b'Move to a dedicated method'
8687,261083143,b'You?'
8687,261083268,b'Should go to the audit log.\r\nShould have ip / port for the connection as well\r\n'
8687,261083417,"b'```suggestion\r\n                                                          ""registered in the cluster explicitly but is trusted implicitly by its Public Key Pinning Hash"" +\r\n```'"
8687,261083606,b'Provide the value that needs to be set here.'
8687,261083791,b'The message needs to also be shown to the user'
8687,261084055,"b""This isn't correct. We are now waiting for the cluster to go through.\r\nWe _must_ be able to proceed normally even without the cluster.\r\n\r\nNote that the cluster command need to handle the case of repeated registration of the same cert."""
8687,261084194,b'Need ip / port.\r\nRemove HTTP here.'
8687,261085871,b'Chain of server and user must be:\r\n\r\n* Same length\r\n* Same order\r\n* Public key hash same for all'
8687,261086100,b'```\r\nfor(var i = 0; i < userChain.Length; i++)\r\n{\r\n    if(userChain[i].PublicKeyHash != serverChain[i].PublicKeyHash)\r\n         return false;\r\n}\r\n```'
8687,261086222,"b'Alternatively, the user chain issuer is in one of the well known issuers.'"
8687,261086506,"b'```suggestion\r\n        [Description(""Well known issuer public key hashes that will be used to validate a new certificate\'s PKP if the issuer\'s certificate has changed."")]\r\n```'"
8687,261087125,b'openssl s_client -servername $1 -connect $1:443 | openssl x509 -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64'
8687,261087183,b'`openssl s_client -servername $1 -connect $1:443 | openssl x509 -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64`'
8687,261088087,b'What about permissions?'
8687,261089018,b'```suggestion\r\n        public IEnumerable<string> GetCertificateThumbprintFromCluster(TransactionOperationContext context)\r\n```\r\n\r\nChange cert key to cert thumprint globally'
8687,261089381,"b""Inverse this, if this isn't right, break immediately"""
8687,261089855,"b'This is only valid for admin callers.\r\nThis may be _generated_ by any user, but the command is sent by the cluster itself and require cluster admin permissions'"
8687,261091047,b'thumbprints are case insensitive'
8687,261091698,"b'Check for replication _errors_, not wait for this'"
8687,261993774,"b""Currently auth errors aren't caught here. Opened a separate issue: https://issues.hibernatingrhinos.com/issue/RavenDB-13010"""
8687,261993856,b'done'
8687,261993913,b'done'
8687,261994042,b'done'
8687,261994132,b'done'
8687,261994378,b'done. (Comparing against a known good client cert and not the server cert)'
8687,261994688,"b""It's too much to put in the configuration descriptiopn. I'll document it instead."""
8687,262385791,b'1. Use interpolation\r\n2. use `RavenConfiguration.GetKey` to generate the configuration key'
8687,262387130,b'certsWithSameHash.Select(x => x.Thumbprint).Skip(Constants.Certificates.MaxNumberOfCertsWithSameHash).ToList();'
8687,262387257,b'what if there are no keys to delete? Do we need to notify that value changed?'
8687,262389325,b'use `nameof(DeleteMultipleValuesCommand)`'
8687,262389379,b'use `nameof(DeleteValueCommand)`'
8687,262389830,b'use `nameof(PutValueCommand)`'
8687,262391655,b'are we using `feature` and `clientCert` here?'
8687,262392373,b'just a note:\r\n1. if there is a client command then we need to remove the paging\r\n2. need to check if this affects studio? paging there?'
8687,262392628,"b""We need to expose this in the studio? If yes, it would be 'nice' to know how many were purged."""
8687,262405161,b'do we need to pass ServerStore?'
8687,262472288,b'Not going to expose it in Studio.'
8687,262472487,"b""I didn't remove the paging, just moved it to the inner method: GetAllRegisteredCertificates"""
8687,262472612,"b'Not anymore, I used a short term context instead.'"
8687,262666198,"b'When documenting this, also include the OpenSSL commands to generate this hash'"
8687,262673845,"b'Why do we need to get the address here? I assume that this is for logging / error generation?\r\nIf so, better to pass these details to the `AuthenticateConnectionCertificate` method.\r\nI want to avoid this allocation if possible (most connections are successful)'"
8687,262674265,b'Why do we need this?'
8687,262674629,"b""why do we need to explicitly close the transaction here? Isn't this closed by the `using` above?"""
8687,262674881,"b""Let's reverse this if statement and reduce nesting in this way"""
8687,262675222,"b""Here, let's just return a single item, the latest, instead of the full list. We are never use anything else here, anyway"""
8687,262675722,"b""Don't we get a warning here about ignoring the return value?"""
8687,262675967,"b""Let's include the previous certificate's thumbprint as well here."""
8687,262676861,"b'This can be a pretty expensive operation. We read certificates, parse them, compute PK, etc.\r\nI wonder if we should put some rate limiting here to prevent ourselves from being hammered ? '"
8687,262676920,"b'Note, if we do, that should be in another PR'"
8687,262677134,b'This should be `Info` level'
8687,262677176,b'Info level'
8687,262677310,b'Info level'
8687,262677548,"b""Same here, let's avoid the string allocation if we can avoid it"""
8687,262677774,"b'```suggestion\r\n                    msg = ""The provided client certificate "" + (certificate?.FriendlyName  ?? ""<Missing cert>"")+ "" is expired on "" + certificate?.NotAfter;\r\n```\r\n\r\nAs well as elsewhere around here'"
8687,262677843,b'and how can this be null?'
8687,262678233,"b""It still isn't trusted. It _could_ be, but need the additional step.\r\nAlternatively, let's tell the admin to just register the new cert """
8687,262679243,"b""```suggestion\r\n            // { thumbprint, public key hash, data }\r\n```\r\n\r\nIsn't that the case?"""
8687,262679292,b'key & hash are too generic'
8687,262679526,"b'```suggestion\r\n                        if (cmd.TryGet(nameof(PutCertificateWithSamePinningHashCommand.Name), out string certKey))\r\n```'"
8687,262679568,"b'```suggestion\r\n                        if (cmd.TryGet(nameof(PutCertificateWithSamePinningHashCommand.PublicKeyPinningHash), out string hash))\r\n```'"
8687,262680124,"b""why aren't you calling `DeleteCertificate` here?"""
8687,262680153,"b""why aren't you calling `DeleteCertificate` here?"""
8687,262680443,"b""Is this correct? If this is registered locally, and we register it on the cluster, shouldn't we remove it now from the local?"""
8687,262680922,"b""why aren't you calling `DeleteCertificate` here?"""
8687,262681563,"b'Still need to change this, no?'"
8687,262681706,b'What is this method used for?'
8687,262681832,"b'I think you need to call `ToLower` here, no?'"
8687,262683992,"b""I don't understand this logic? You are either a cluster admin or not a cluster node?"""
8687,262885121,b'OK'
8687,262885151,b'OK'
8687,262885185,b'We need this so that it can be displayed to the user in: UnlikelyFailAuthorization() in the case of AuthenticationStatus.UnfamiliarIssuer.\r\nI chose to put it in the connection feature just like we do with the AuthenticationStatus.'
8687,262885210,b'Fixed'
8687,262885225,b'OK'
8687,262885235,b'Ok'
8687,262885264,b'Fixed'
8687,262885276,b'Ok'
8687,262886506,b'I agree'
8687,262886531,b'Ok'
8687,262886543,b'OK'
8687,262886562,b'OK'
8687,262886600,b'OK'
8687,262886626,"b""It cannot be null here. \r\nIt can be null in general but then we'll geth auth.Status = NoCertificateProvided which will make us fall to the default case in the switch.\r\n\r\nI believe I put the '?' there because of a compiler warning about the casting a few lines above.\r\nvar certificate = (X509Certificate2)sslStream.RemoteCertificate;"""
8687,262886722,b'Yes'
8687,262886773,b'ok'
8687,262886912,b'fixed'
8687,262886946,b'fixed'
8687,262886984,b'fixed'
8687,262887007,b'fixed'
8687,262887024,"b'We handle this in the caller, DeleteLocalState is called right after PutCertificate'"
8687,262887043,b'fixed'
8687,262887100,b'Renamed it to GetCertificateThumbprintsFromCluster. It is used to get all the keys so that we can delete them all from local state in OnSnapshotInstalledAsync() and in DeleteAllExistingCertificates()'
8687,262887140,"b'yes, I went over all the occurrences of thumbprint as a key and changed them to lower'"
8687,262887185,"b""I don't get it either, seems strange (it was copied from PutCertificateCommand). Fixing both."""
8687,262887396,b'fixed'
8687,263124351,b'OK'
8687,263127009,"b""That shouldn't cause it to warn about null, I think.\r\nLet's drop this `?`"""
8885,263686773,"b""Wondering if we should check if `dotnet` prerequisites are installed in this script or is it out of scope?\r\n\r\nHere's the ref from install script https://github.com/ravendb/ravendb/blob/v4.1/install_runtime_prerequisites.sh"""
8885,263691217,"b'Shouldn\'t we just follow what\'s in `settings.json` instead of overriding `ServerUrl` and other stuff?\r\nrvn service installation does not override anything with command line opts IIRC.\r\n\r\nGoing further (not for this time around I think) we probably should think of lay out stuff in Linux as people are used to - you know ""when in Rome.."" :) I mean using places like `/etc/ravendb/settings.json` and `/var/lib/ravendb` for data etc.'"
8885,263692406,"b'Ideally, I want to have just one place for these settings, and `settings.json` is the correct one, I think'"
8885,264032638,b'https://github.com/ravendb/ravendb/pull/8885/commits/57495de8703a719eac044db2deea831ef96ef552'
8885,264032394,b'dotnet is not a prerequisite any longer as RavenDB downloaded tarball contains it.. '
8885,264107040,b'Of course. .netcore runtime is part of the package. I meant .netcore prerequisites like `libicu` and friends.'
8882,262957781,"b'I noticed that we have a ""taskName"" query param for subscriptions, we should probably use the same param for all other tasks'"
8882,263127466,b'Can you break this on multiple lines?'
8882,263127713,"b'```suggestion\r\n                throw new ArgumentException($""You must specify a query string argument of either \'key\' or \'name\' , but none was specified."");\r\n```'"
8882,263266457,b'assert that string is not null of whitespace'
8882,263266882,b'`StringComparison.OridinalIgnoreCase`'
8882,263266896,b'`StringComparison.OridinalIgnoreCase`'
8882,263266910,b'`StringComparison.OridinalIgnoreCase`'
8882,263266923,b'`StringComparison.OridinalIgnoreCase`'
8885,264235094,b'@aviviadi ?'
8885,264235421,b'I am right now on it. answer in 10-15 minutes\r\n'
8885,264249010,b'@gregolsky @ppekrol Verified on scratch install of latest raspbian stretch and RavenDB v4.1.4 - nothing was needed at all.. '
8904,264229111,"b""Why are you first trying to take the lock, then try to check even if you didn't get it?\r\nIsn't it better to put the `CanSkip` first?"""
8904,264229552,b'Same here'
8904,264229781,"b'Why are we doing it in this manner?\r\nAnd can we use a cancellation token here, instead?'"
8904,264229859,"b'Same, better to use cancellation token'"
8904,264233431,"b""the await is consisted from basically three parts:\r\n\r\n1. fetch tcp info (can pass a cancellation token to the request executor)\r\n2. tcp client tries to connect (haven't saw an overload with cancellation)\r\n3. wrap ssl stream (no token either).\r\n"""
8904,264233731,b'See: https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.wait?view=netframework-4.7.2#System_Threading_Tasks_Task_Wait_System_Int32_System_Threading_CancellationToken_'
8904,264235225,"b""We waited for 5 seconds for the lock and got it (or not).. it might be that we don't need to do anything because in that time a newer index already updated the features.\r\n"""
8904,264235779,"b'and for (1), we cancel it after 15 seconds (the default value of `OperationTimeout`).'"
8904,264238588,"b'Why not put the `CanSkip` before trying to get the lock, as well as after?'"
8904,264241445,"b'Okay... I thought of passing a token to the `ConnectToPeer` method.\r\nI can pass a token, but I will still need to validate the term (more relevant for the follower ambassador)\r\n'"
8904,264251039,b'Done'
8904,264251427,b'We will deal with it in a different issue by limiting the concurrent number of ambassadors:\r\nhttps://issues.hibernatingrhinos.com/issue/RavenDB-13067'
8894,263686039,"b""we don't use explicit null notation in current version of studio. Let's be consistent. """
8894,263686075,b'remove |null'
8894,263686206,"b""let's avoid relative paths - r.js has issues with packing this properly """
8894,263686311,b'which has to moved to server wide studio configuration. Current it is in db specific studio configuration. '
8894,263686381,b'can we roll back formatting here? It hurts git blame. '
8894,263686628,"b""I wonder if our studio could have some node name in it's name. What if you have cluster - then you end up with few apps with the same name. Btw. did you check if you can install more than one app? """
8894,263807485,b'Boo.'
8894,263807581,"b""Typescript did that for me automatically. I'll fix it."""
8894,263807858,"b""Hmmm. I didn't do any formatting myself; Visual Studio must have done this."""
8894,263808125,"b""I'm aware of this limitation, but it means we'd need to generated the manifest on the server side. I decided against adding that in this first iteration, but I can add it."""
8894,263808238,"b'And yeah, you can install multiple Raven Studios.'"
8894,263808524,b':-('
8894,263813308,b'You want this moved to the server-wide Studio Configuration? OK.'
8894,263823075,"b""Marcin, to do this, we need to generate the manifest on the server. To do that, we could either:\r\n\r\n- Leave the manifest.json file in the solution, but when it's requested we read it, change the name, then return it.\r\n- Delete manifest.json file and just generate it on the fly from the server.\r\n\r\nDo you have a preference?"""
8885,264263138,"b'Raspbian ok. However they have listed these as ""required"" on e.g. Ubuntu and CentOS:\r\nhttps://github.com/dotnet/docs/blob/master/docs/core/linux-prerequisites.md#ubuntu\r\nhttps://github.com/dotnet/docs/blob/master/docs/core/linux-prerequisites.md#centos-and-fedora\r\n\r\nOn the other hand we don\'t install or check C++ redist for people on Windows when doing `install-as-service.ps1` so maybe we should *not* do that here to stay consistent.\r\nRelated docs page: https://ravendb.net/docs/article-page/4.1/csharp/start/getting-started#prerequisites\r\n\r\nThoughts?\r\n'"
8885,264401575,b'Fine by me'
8881,263141284,"b'```suggestion\r\n                        UpdateDatabase(context, type, cmd, index, leader, serverStore);\r\n```'"
8881,263141643,"b""Shouldn't we always overwrite it here?"""
8881,263142003,"b""If the `currentDatabaseRecord` is null, this won't get executed at all, which I assume isn't intended.\r\nIn that case, won't we want to add _all_ of them?"""
8881,263142071,b'Same'
8881,263142109,b'same'
8881,263142243,b'Same'
8881,263142265,b'Same'
8881,263142316,b'Same'
8881,263142521,"b""Don't we want to overwrite this?"""
8881,263261865,b'I think that this needs to be public `set` for proper deserialization. Or a field.'
8881,263262313,b'`StringComparison.OridinalIgnoreCase`'
8881,263264965,b'`StringComparison.OridinalIgnoreCase`'
8881,264236374,b'Is this method used?'
8881,264236703,b'Do we need to do OridinalIgnoreCase here?'
8881,264236812,b'OridinalIgnoreCase'
8881,264236873,b'Do we need to do OridinalIgnoreCase here?'
8881,264236942,b'OridinalIgnoreCase'
8881,264237045,b'OridinalIgnoreCase'
8881,264237088,b'Do we need to do OridinalIgnoreCase here?'
8881,264549060,b'No'
8881,264550129,b'No'
8881,264550145,b'No'
8881,264550639,b'Yes'
8883,263139601,"b""This does only part of the work. In particular, id doesn't check that the included documents are already there. \r\nIf they are, we don't need to hit the server at all"""
8883,263267677,b'This is to error prone. Sooner or later someone will do `ById` first and then `Include`. Need to move that logic to `CreateRequest` method.'
8883,263419414,"b'@ayende this actually already works, not treated here, see gist: https://gist.github.com/maximburyak/af6438d1847fa999960b99d2dcd1576d\r\n@ppekrol I think that this a topic of a seperate issue.'"
8883,263498708,b'where is the code that actually handles this?'
8883,263564721,"b""It's in the `CreateRequest` method. I will sit with @efratshenhar on Sunday and we will figure it out."""
8883,264238327,"b'better to use array only, then you will not have to do `.ToArray()` in `CreateRequest` '"
8885,264649176,"b'@gregolsky Required for SDK, not for ready to run published package.  It is like taking the safe side, but most of the packages are actually not needed in order to run RavenDB.'"
8869,262380937,"b""Under what conditions will this be `null` ? \r\nI think we want to always have this, and at a minimum, use the current url as the only entry here.\r\nThat simplify most of the logic for the client (even though we'll need to check both for backward compact reasons)"""
8869,262391267,"b'```suggestion\r\n        [Description(""When provided those URLs are used for all TCP communications to this node. The list is used in the order provided, and the first URL that can be successfully connected to will be used. This is meant to allow inter-cluster communication via private IPs, while external clients will use external IPs.  The provided URLs can be raw IPs or utilize hostnames."")]\r\n```'"
8869,262391603,b'Why do we need this and `TcpPriorityServerUrls` ? \r\nCan we have just one such configuration? What happens if we provide multiple ips here?'
8869,262396604,"b""These guys are meant for external use, not internal one.\r\nInternally, we'll usually bind to `0.0.0.0`, then we'll use the hostname to decide how to connect.\r\n\r\nAnother issue is that we probably should use `TcpServerUrl.Public`"""
8869,262434862,"b""The default is null.\r\nThis is something that bypass the public tcp url and as such i'm not sure we won't to always use it, we want to use it only for server->server communication.\r\nIf we want to use this always we might as well just use 'TcpServerUrls' (which i don't think is a good idea)"""
8869,262436424,"b'I don\'t understand what you mean by ""...we probably should use TcpServerUrl.Public""\r\nHere I chose to make sure that the hostname that is in the priority list listens to I could throw if they are not part of the {TcpServerUrls U PublicTcpServerUrl} \r\n'"
8869,262439047,"b'That is what I understood the request was if not then the issue should be more clear.\r\nTcpServerUrls are automatically generated and populated and have validations that there is no more than one item there for some cases.\r\nI found it wrong to use it.\r\nWe want to have multiple ips that is the whole point of this code, that server could have a priority list of ips they can connect to and it contains the private tcp url by the order of which you prefer to connect.\r\nThis is what i did now the server->server communication is using those ips to open a tcp client and not the public tcp url.\r\n'"
8869,264056796,"b""Don't we need to handle a null here?"""
8869,264056840,"b'Is there a compatibility concern here?\r\nhttps://ravendb.net/docs/article-page/4.1/csharp/client-api/faq/backward-compatibility\r\n\r\nSo a 4.2 client will not work with a 4.1 or 4.0 server, so this is fine, according to the docs. '"
8869,264056870,"b""We need to either fall back to the just the `Url` if the `TcpServerUrls` are not specified or give a good error here.\r\nOtherwise, we'll get NRE when connecting to an old server."""
8869,264056878,b'`Tcp` is already in the class name.'
8869,264056898,"b'Just return here, no?'"
8869,264057018,"b""Why do we have this? Worst case, we'll get an error on the TCP connection, no?"""
8869,264142216,"b'No, because we always populate the server list and if it is not set it will contain the ServerTcpUrl as a sole entry'"
8869,264143553,"b""It was the requirement that i'll move subscription to use the remote task, i could modify the database specific info/tcp to run the new logic and have a new entry point for the database/info/tcp that will handle this (this means duplicating code between the handlers), would that be better?"""
8869,264143994,"b""for the subscription you're correct we might have null need to handle it because of the client"""
8869,264144956,"b'for the case where the original server url was not tested we test it below this might mean we will try it twice if it appears in the url list, we could check if it contains it and return '"
8869,264227206,b'When did we get the `/tcp/info/remote` endpoint? '
8869,264227338,b'What happens if you are reading from a 4.1 or a 4.0 server?'
8869,264227616,"b""Unless I miss something, this function returns the first working url.\r\nI don't see any double checks here"""
8869,264650010,b'We got it for Pull replication not sure when that was added'
8869,264651114,"b""you're correct"""
8869,264652198,b'There is a failing subscription test where we disabled the database and the get tcp command is not failing and expected to fail.\r\nThe subscription code assumes that the get tcp info will fail if the database is disabled.\r\nI have fixed it so if the active connection could deal with disabling a database but @maximburyak  reviewed it and thought it is the wrong fix and that the tcp info call should fail if the database is disabled and this is why i added this.'
8900,264056709,"b'I think this should be `Operator`, is there a reason this is cluster admin level?'"
8900,264110211,b'Need to be moved to StorageHandler'
8900,264110555,b'Use same output format as in StorageHandler.'
8900,264718497,b'done'
8900,264718555,b'done'
8869,264777199,"b""Shouldn't this be `ServerUrls`"""
8869,264777322,b'Can remove this var'
8918,264720590,b'private bool _doNotIgnore;'
8918,264721165,b'private int _minSuffixToNotIgnore ;'
8869,265048881,"b""not sure what's going on here it seems not to fully push my changes..."""
8926,265090224,"b'can we rename that to `Urls` the single Url property is called `Url`, do not see a good reason to not call this property `Urls`'"
8926,265112201,b'`requestExecutor1` ?'
8926,265112555,b'And can we move this to a separate method?'
8926,265112622,b'why `shouldRetry`  is `false`?'
8926,265113449,b'what would throw this error?'
8926,265138013,b'resharper... sure'
8926,265138507,"b""I don't know this was the original logic, I think this is the case where you've already been redirected"""
8926,265139132,"b""the router when it doesn't find the path for the endpoint, I have tested this by modifying the remote task URL to something that doesn't exist and it propagate nicely to the client"""
8828,261271095,b'Should be a function like WriteStatus'
8828,261271395,b'Can be async as the function is async'
8828,261271942,b'only subscription'
8828,261272904,b'Need a better name than RestoreFromLastFile'
8828,261273655,b'You are reading the same file twice.\r\nFirst reading the subscriptions from it and and then restoring the documents.'
8828,261274347,b'Move this inside the restore before saving the database record'
8828,261274806,b'if (currentIndex > upToIndex)\r\n    return;\r\n\r\nDelete(id);\r\n'
8828,261277579,b'Need to do this in batches.\r\nWe can do it in the ClusterObserver. The same idea as auto indexes cleaning (every 10 minutes?).'
8828,261291052,b'done'
8828,261856435,"b""We don't use the `Row` suffix"""
8828,261858296,b'Need to do EnsureStepProcessed on this (check where the method is used)'
8828,261858348,b'Double-checking. We should first check if database is restored and then disabled or other way around is good?'
8828,261858486,b'Why this is here?'
8828,261865111,b'done'
8828,261865178,b'done'
8828,261865181,b'done'
8828,261865377,b'done'
8828,261865574,b'done'
8828,261875760,b'done'
8828,261876206,b'done'
8828,261876258,b'done'
8828,261876261,b'done'
8828,261876438,b'changed to table suffix'
8828,262540909,"b""This can take a while, isn't this going to cause the cluster observer to stop working?\r\nWhat about if there are any errors here, do we need to be concerned about this throwing?\r\n\r\n"""
8828,262540983,"b""Let's move this all outside of the open transaction"""
8828,262541349,"b""In this case, what _would_ delete them? Do we have code that don't create tombstones if there are no periodic deletions?"""
8828,262547203,"b'yes, I forgot to add a limit\r\nwe handle errors clusterstatemachine when we apply that command'"
8828,262883884,b'done'
8828,262883954,b'done'
8828,262890170,b'done'
8828,262941035,b'done'
8828,263268757,b'I think we need to change this to: `Cluster.CompareExchangeTombstonesCleanupIntervalInMin` ?'
8828,263272102,b'why `Slice` in the string?'
8828,263280005,b'use `nameof`'
8828,263280123,b'use `nameof`'
8828,263286323,b'done'
8828,263286688,b'done'
8828,263287175,b'yes done'
8828,263287211,b'done'
8828,263332340,"b'Might we rename this to `Maintenance`, it might be useful for other features as well.'"
8828,263332767,b'How can we not have the `Disabled` property?'
8828,263336347,b'Is it possible to unify `AddOrUpdateCompareExchangeBatchCommand` with `RemoveCompareExchangeBatchCommand`?'
8828,263342442,b'Not sure why the tombstones are here'
8828,263343534,"b'It is possible to use `context.Transaction.InnerTransaction.OpenTable(CompareExchangeTombstoneSchema, CompareExchangeTombstone)` instead of passing the `tombstoneItems` ?'"
8828,263366202,b'done'
8828,263366252,b'done'
8828,263369087,b'done'
8828,263375728,b'not better to introduce another property to enum when we will need it ?'
8828,263375865,b'probably just precaution'
8885,265156183,"b""well just heads up and no action required I think, but this is what I got on a fresh CentOS 7\r\n```\r\nFailFast:                                                                                      \xe2\x94\x82\r\nCouldn't find a valid ICU package installed on the system. Set the configuration flag System.Gl\xe2\x94\x82\r\nobalization.Invariant to true if you want to run with no globalization support.                \xe2\x94\x82\r\n                                                                                               \xe2\x94\x82\r\n   at System.Environment.FailFast(System.String)                                               \xe2\x94\x82\r\n   at System.Globalization.GlobalizationMode.GetGlobalizationInvariantMode()                   \xe2\x94\x82\r\n   at System.Globalization.GlobalizationMode..cctor()                                          \xe2\x94\x82\r\n   at System.Globalization.CultureData.CreateCultureWithInvariantData()                        \xe2\x94\x82\r\n   at System.Globalization.CultureData.get_Invariant()                                         \xe2\x94\x82\r\n   at System.Globalization.CultureInfo..cctor()                                                \xe2\x94\x82\r\n   at System.StringComparer..cctor()                                                           \xe2\x94\x82\r\n   at System.AppDomain.InitializeCompatibilityFlags()                                          \xe2\x94\x82\r\n   at System.AppDomain.Setup(System.Object)                                                    \xe2\x94\x82\r\n./run.sh: line 30: 11823 Aborted                 ./Raven.Server --browser                      \xe2\x94\x82\r\n[centos@ip-XXXXXX RavenDB]$\r\n```"""
8914,264690624,b'Move the log statement to the `if`\r\n'
8914,264690805,"b'Also, we need normal exception to be in info, and the retries in operations'"
8914,264695247,b'So the first time should be logged as `info` and the rest as `operations`?'
8914,264770890,b'do we need to create that each time?'
8914,264771355,b'this can throw OperationCanceledException and/or ObjectDisposedException probably?'
8914,264776385,"b'We want to handle `OperationCanceledException ` as well, yes'"
8914,264793788,"b'We will create it only once, after accepting the tcp was successful.  '"
8914,264803055,"b""Let's include here the exception"""
8914,264803311,b'This probably deserve an alert'
8914,265065037,b'done'
8914,265065633,"b'Not sure why this is necessary... we are shutting down in that case, but done.'"
8914,265119045,"b""This is describing implementation details. Let's just explain what is going on.\r\nUnable to accept connections from TCP and the listen socket was rudely disconnected or something like that"""
8914,265127497,b'I though what should I write to avoid support calls :)\r\n\r\nWhat do you suggest? should what you proposed be enough `Unable to accept connections from TCP and the listen socket was rudely disconnected` ?\r\n'
8886,263133259,"b'```suggestion\r\n                            // simplest case of having no counters for this documents, can use the raw data from the source as-is\r\n                            data = context.ReadObject(sourceData, documentId, BlittableJsonDocumentBuilder.UsageMode.ToDisk);\r\n```'"
8886,263133505,"b""Let's add this validation _before_ the previous `if`. So we validate the structure before we save it as-is"""
8886,263135017,"b""This is pretty complex, and I think this requires additional code review (and probably some comments).\r\nLet's sit on this tomorrow."""
8886,263383398,b'done'
8886,263383429,b'done'
8886,263385559,b'Why do you need that?'
8886,263390408,"b'when I call `SplitCounterGroup` from `PutCounters`  I do not have the table value reader at hand anymore (because now I do that at the end, after the loop). \r\nwhen I call `SplitCounterGroup` from `IncrementCounter` I do have the value reader'"
8886,263499927,"b""Yes, but why does this matter? Shouldn't we just always call `Set` ?"""
8950,266230390,"b""Don't we need to pass a cancellation token here with the configured timeout. """
8950,266230443,"b""What does this gives us that the usual timeout doesn't?\r\n\r\nAlso, note that this doesn't handle timeouts on read, which is the root cause of our problem"""
8933,265910426,"b'How are they going to be able to do that? \r\nCan we have the cluster observer re-validate this occasionally? Not notifying the cluster observer is actually pretty common in some failure scenarios, so we want a retry on that, and better if the cluster observer does this explicitly.'"
8933,265910774,b'And here is the code that does that. Does this run only once? '
8933,266262609,"b""It is too frequent to be called in the observer and here we can't tell between `failed to notify` and `deletion in progress`.\r\n\r\nOn the relevant node we will retry to send the command again after 15 seconds.\r\n """
8933,266263469,"b'""too frequent"" ? I\'m not sure that I follow. Isn\'t that twice a second?'"
8933,266263475,"b'Okay, if there is a retry, that is fine'"
8965,266545885,"b""Don't need to override the method now"""
8965,266549544,b'done\r\n'
8977,266970410,"b'Not a good idea, may get different values under different cultures. \r\nJust wrap the exception'"
8977,266973035,"b'Okay, but what if we getting a different `NotSupportedException`? what about to check only for the word `WriteAsync` ?'"
8977,266974602,"b""I don't consider this likely, and the idea is that we'll restart anyway"""
8977,266975597,"b'okay, done.'"
8984,267352293,"b'minor: can we define `"".dll""` as a const and use `.Length` instead of `4` to be explicit what is it from?'"
8984,267373110,b'done'
8982,267353853,"b'Maybe ""not supported on POSIX"" since it applies to Linux but macOS as well'"
8982,267386730,b'done'
8985,267351331,"b""Can we have a test which will ensure that if someone changes the regex we'll be aware of the need to change this text as well?"""
8985,267379326,"b'mb I can place debug assert inside that function?\r\nDebug.Assert(NameUtils.ValidIndexNameCharacters == @""([_\\/\\-\\.]+)"")'"
8983,267423319,b'What about `/` or `\\` ?'
8983,267423441,b'Why did you remove this?'
8983,267511937,"b""I wasn't used here. There is another place we have those constants. """
8983,267647440,"b""`/` and `\\` aren't valid character for database name and are checked by earlier validation check. \r\n\r\nAlthough `/` character is allowed for index name so I added that index name must not start with `.` if it contains `/` in  https://github.com/ravendb/ravendb/pull/8983/commits/d9c51cdf63e21211f202b21e3fb4357131a8fd2c"""
8987,267765797,"b""can't we wrap this with a method and call it with arg and expected result to avoid code duplication? """
8987,267768226,"b'ofc I can, but I am not sure if this is necessary for test.'"
8988,268120600,b'Should be either nested class or a separate file'
8988,268120715,b'What if I have multiple removals? '
8988,268120990,"b""Shouldn't we confirm anyway if we removed the ignored list? Or is it expected that this will be empty list, then?"""
8988,268121512,"b""I don't understand why you are involving the `OutgoingHandlers` here?\r\nI think that I'm missing something here in terms of logical flow of the operation.\r\n\r\nIn terms of what is actually going on, the `OutgoingHandlers` may not contain tasks that have just been added (this can happen on db startup, mind) or tasks that failed."""
8988,268121679,"b'You need cancellation tokens here, no?\r\nOr is that handled internally?'"
8988,268121910,b'Why is this a loop?'
8988,268122180,"b""Probably *rare* operation, don't really need to optimize it"""
8988,268122457,b'first use `context.LastDatabaseChangeVector = context.LastDatabaseChangeVector ?? GetDatabaseChangeVector()`'
8988,268122698,"b""I'm pretty sure we have `SaveDatabseChangeVector`, no? If no, create it, this leaks the storage abstraction"""
8988,268123117,"b""I don't understand what is the purpose of this. \r\nThis just tells you what is the last raft index that we sent this with, not whatever we properly updated anything internally about it.\r\n\r\nNote that the `LastRaftCommitIndex` is updated *without* waiting for the commands to actually finish applying (async)"""
8961,266422699,"b""If this happens in write tx, let's write a meaningful exception"""
8961,266537924,"b""This shouldn't be moved, right?"""
8961,266559310,b'It should to be aligned with regular commit. When moving this for commit it broke things pretty badly and async commit have the order backwards. This leads me to believe there is a very rare case where async commit will fail horribly. '
8961,266568018,"b""It isn't _actually_ a problem, because there is a lock on the _next_ transaction, but that is only true right now and is a bug waiting to happen. \r\nWe're better of _with_ this change."""
8986,268058906,b'1) Minor: please use `Constants.DocumentIdFieldName`\r\n2) Should we check for `Constants.ReduceKeyFieldName` as well? (see below code)'
8986,268544759,b'Done'
8979,267420921,b'```suggestion\r\n        public bool ValidateNonRandomPort = true;\r\n```'
8979,267421296,"b'```suggestion\r\n                                                        ""Adding nodes to cluster is forbidden when the leader has port \'0\' in \'Configuration.Core.ServerUrls\' setting. Define a fixed port for the node to enable cluster creation."");\r\n```'"
8921,266502095,b'Why are you _increasing_ the `_used` amount here?'
8921,266502439,"b""```suggestion\r\n                    allocator._nativeAllocator.Release(ref ptr);\r\n```\r\n\r\nIsn't this better?"""
8921,266503202,"b""On each `Reset` you'll return the memory? Isn't that going to be expensive with malloc / free on each usage?\r\n"""
8921,266503474,"b""If you previously `Reset`, then this is never going to be true, isn't it?"""
8921,266504350,"b""Did you change the concept of reset / renew as they are currently used?\r\nThis seems to assume that reset hasn't been called."""
8921,266504574,b'Why _increasing_ the amount here?'
8921,266504644,b'Why _increase_ the amount here?'
8921,266506231,"b""For allocations that are larger than the block size (which are likely rare), shouldn't we free them immediately?"""
8921,266512859,"b'This is pretty much by definition never going to work. \r\nYou just put the current segment there, because it was too small, and now you are checking the smallest one for this.\r\nThat is going to be the size of the current segment or smaller, so not big enough'"
8921,266514089,"b'Better to do binary search for the first value that is equal or greater to the size, no?'"
8921,266518089,"b'`Reset` is identical to this, why?'"
8921,266519094,b'Do we want to zero the memory on release as well (although might be only valid for secured)?'
8921,266519923,"b""Why do you need this? Isn't this skipping the first three lines? if so, `Split().Skip(3)` is more readable and this is debug code"""
8921,266520143,b'Need reformating'
8921,266520938,"b'Pretty sure you meant `ReadOnlySpan<T>` here, no?'"
8921,266521379,"b""Don't understand this comment"""
8921,266521554,"b""I don't understand this comment"""
8921,266522180,"b'Can probably do that by setting a static member value here, no?'"
8921,266522324,"b'`ReadOnlySpan<T> `, no?'"
8921,266522408,b'comment?'
8921,266522445,b'comment?'
8921,266522895,"b'```suggestion\r\n            return new BlockPointer(ptr.Address, ptr.BlockSize, ptr.SizeAsBytes);\r\n```'"
8921,266523059,"b""And I'm not sure about the `BlockSize` here either, is that in bytes, in elements?"""
8921,266524581,"b""Can't we spare that and always copy the `_freed` unconditionally?"""
8921,266525028,"b""Why not send the `ptr` directly?\r\nAlso, didn't reset `ptr`"""
8921,266525342,"b""I don't understand the usage of reset & renew in this PR"""
8921,266527863,b'What is the difference from `Default `?'
8921,266528709,b'Move to dedicated method?'
8921,266530045,"b""How can we ever support something that isn't fixed size here?"""
8921,266531453,"b'How, this is a interface field, so have to be boxed and have to go through the method dispatch'"
8921,266532854,b'All these constants need to take into account 32 bits as well'
8921,266533058,b'This is identical do `Default`? '
8921,266533803,b'Why do the copy?'
8921,266534676,b'Huh?'
8921,266550248,"b'Probably, but I am not entirely sure of all the potential semantic implications with the interplay between structs inside structs... Until I am not entirely sure about the potential implications I prefer to err on the side of caution. '"
8921,266550774,"b""The idea is that you don't use the `Arena` without a caching backend (unless you really need it like that). Always remember that the design is composable. """
8921,266551164,"b'Yes, `Reset` and `Renew` as they are currently used overlap in their responsibility. `Reset` and `Renew` now have clear implications. '"
8921,266557604,"b""Until we have everything integrated those numbers are sensible defaults. After that we will need to looks at all different variants of allocators we end up using (I will create custom configurations for each) until we can then go there and find the actual 'default' case."""
8921,266558054,"b'Nope, this particular case will actually hit a special JIT code-path as long as you never return a TOptions based naked interface. '"
8921,266558715,"b'No, the static one overrides the `ReleaseAllocator` disposing mechanism because it is designed to deal with the `readonly static` lifecycle instead of a normal method stored allocator. '"
8921,266559810,"b'Because when running in validation mode, that pointer may actually be `tracked` by a different allocator. For the purpose of the `AllocatorPool` the pointer is `new` no allocator tracking is needed. '"
8921,266561685,"b'Each `Reset` and `Renew` will increase the generation number. But in order to be able to track pointer crossovers between allocators, the first 12 bits are the allocator id and the rest are the actual generation. Both conditions are checked. Will add a comment there. '"
8921,266565256,"b'Actually, that is a no-op bug translated because of copy-pasta from Reset and Renew where it is added in the loop and then setup to 0 at the end of the method. Good catch. Removing from the 3 sites. '"
8921,266565698,"b""I can't see how this can be anything else."""
8921,266565809,"b""Please state clearly what they are, because I currently can't understand when each is use, it's semantics meaning, etc."""
8921,266566490,b'It will actually reuse them until we hit a `Reset` boundary so they are going to be either short-lived or amortized on long-running processes. '
8921,266567439,b'That is actually a no-op bug in the 3 places it happens. On `Reset` and `Renew` I add that and then store `0`. On `Dispose` well it is not going to be used anyways. Good catch. '
8921,266567648,"b""This is `Allocator<TAllocator>`, which is a class, unless I missed something?\r\nAnd the JIT don't know what the actual type will be here."""
8921,266568540,"b'We can configure that from the caller site. For secure that is part of the normal operation of secure memory, so while implicitly you will setup it like false at the allocator level. '"
8921,266569345,"b'Those 3 lines are the actual leak checker code, skipping them is more readable. From the code point of view, yeah `Split().Skip(3)` would do the trick. '"
8921,266569941,"b'Yeah, still every time you change something it gets screwed again... VS support for #define statements is quite crude for C#. '"
8921,266572045,b'Yes it is. '
8921,266572767,b'Comment no relevant anymore. Removing'
8921,266573016,b'No need that is why we use the `[MethodImpl(MethodImplOptions.NoOptimization)]` attribute. Modifying the comment to account for the misunderstanding. '
8921,266573590,b'Yes'
8921,266575582,"b""Actually, it looks like I've never used/tested those conversions... most of them are wrong. """
8921,266575980,b'Same rationale as before. '
8921,266576647,"b'No need now. that is Pre-2.0 JIT behavior. Until we are sure that we are only using 2.0 JIT we need to keep it, but this is going to be executed on hopefully 3.0 JIT so no need to do that anymore. '"
8921,266577056,"b""You can, you shouldn't because it is going to be inefficient. But still I left the option available because there were a few use cases that were like that. """
8921,266577438,b'Exactly'
8921,266587828,"b""I will add some information about it. But the concept is the following. \r\nEvery allocator, when asked to reset, will get rid of as much memory as it possibly can. Allocators when asked to `Reset` wont try to speculatively hoard on memory, they will release as much as they can to the parent allocator. On the other hand, calling Renew may be a 'no-op' in the sense that the allocator is free to speculatively hoard the memory for its own use. For example in the case of the `PoolAllocator` when asked to Reset it will `clean-up` its internal storage and release the pools to the parent allocator or release the memory if it has ownership. While when asked to `Renew` it will only release the internal store if there is a Low Memory Flag activated and keep the memory in hot standby to use on the next cycle. \r\n\r\nThat is the reason why we track not only the memory that the allocator has given to the callers (which could hint on internal fragmentation) but also the total allocated memory on stores. If those numbers are big, it would make sense to issue a `Reset`, or for example after an indexing call, etc... While for most cases you will end up only calling `Renew`. """
8921,266591547,"b'So this goes like this... we insert in biggest to smallest in order (unless I made a mistake on `DuplicateKeyComparer`)... If the biggest chunk is not big enough for the allocation, we just go an get a brand new segment of size BlockSize... remember that if the size is actually bigger than block size, we have a dedicated path to deal with it on `Allocate`\r\n\r\nWeirdly enough that is actually the proven way to limit internal fragmentation. The most efficient strategy (while it may sound strange) is to take the biggest chunk instead of the smallest. Someone at the math department of one of the top Israel universities was able to figure that one out (if I am not mixing the location of 2 pretty related papers on fragmentation).'"
8921,266592517,"b'For all uses and purposes, we just can call reset. Check my earlier comments on the difference between `Reset` and `Renew`'"
8921,266593158,b'It was missing a call to the internal allocator `Dispose` method though... Fixed.'
8921,266597955,"b""I lean with your viewpoint, but we are playing razor thin on what the language/JIT allows you to do here. This is internal API detail that can be changed on an afternoon, so I wouldn't do it until we have enough code to ensure that is the case... Last thing I want is to have to deal with weird feature interplay while stabilizing allocators at the same time. """
8921,266598975,"b'The trick is that it knows when it gets resolved, which aint by the time the code is emitted for `Sparrow.Server` but when it is used like in https://github.com/ravendb/ravendb/pull/8921/files#diff-ae8fcae82d91040bb8935f9585e85fbfR87'"
8921,266615873,"b""In that case, let's give these method different names, because they are conflicting with the existing terminology in the codebase.\r\n\r\nAnother issue is who call them, and when? \r\nWhen is Reset and when is Renew called?"""
8921,266616350,"b""You are correct, but let's rename `DuplicateKeyComparer` to `InverseDuplicateKeyComparer` to make it clearer what is going on."""
8921,266617061,"b'Makes a lot of sense to change the same to avoid mistakes. Any suggestion there?\r\nThose are called by the owner, which in our case and on our current design is `JsonOperationContext` and the indexing threads... I am not entirely sure we should keep that that way, even though it makes sense to have a single `OperationContext` manager which will decide based on a sensible heuristic if to call one or the other.  '"
8921,266617637,b'Done'
8921,266617640,"b'`Renew` -> `ResetState` and `Reset` -> `ReleaseResources` ?\r\n\r\nAnd who calls what is critical to the design.\r\nWe currently checkout a context, use it and return it.\r\nWho does what in this case?'"
8921,266618088,"b'Not fond of those names because `Reset` and `ResetState` can become false friends, but not as bad as `Reset` and `Renew` semantically speaking. '"
8921,266618541,"b'In the process of returning it, the general manager should decide before checkout of the context what to do with the allocator... a lease on the allocators themselves is not a bad idea either.  '"
8921,266636479,"b""That is too generic. Consider the scenarios we have.\r\nFor indexing, we know if we'll have a new indexing round or if we are going to rest, so that make sense.\r\nBut for requests, we have no such information, how do we deal with it then?"""
8921,266641436,b'For that how old or how much memory it has allocated makes sense as a possible heuristic. '
8979,268754098,b'can this be `null`? thought that by default it is `localhost:8080`?'
8998,269653751,"b""Does it fail without the change?\r\nI don't see any documents here."""
8998,269654334,"b'Yes, it fails during JS compilation in JavaScriptIndex ctor'"
8998,269717861,b'Should have `using (_engine.DisableMaxStatements())` here as well'
8998,269718415,b'There is no limit to the number of steps it takes to _define_ maps / reduce'
8998,269718437,b'There is no limit to the number of steps it takes to _define_ maps / reduce'
8998,269718499,b'There is no limit to the number of steps it takes to _define_ maps / reduce'
8998,269721323,b'`InitializeEngine` is wrapped with `DisableMaxStatements`'
8998,269721424,b'`InitializeEngine` is wrapped with `DisableMaxStatements`'
8998,269721446,b'`InitializeEngine` is wrapped with `DisableMaxStatements`'
9000,269713107,b'Why do we have the allocation on `ToList` here?  The `Files` is immutable.'
9000,269724214,b'done'
8998,269727854,b'So why use `ExecutewithReset` ?'
8998,269731044,b'Thought it would be good to reset CallStack and TimeoutTicks before calling next Execute. This is what we are doing after each Execute in other places.'
9012,270802580,"b'@talweiss1982 can we check for `<=` here and change the message to: \r\n\r\n```\r\n$""Expiration delete frequency for database \'{databaseName}\' must be greater than 0."");\r\n```\r\n\r\n?'"
9010,270833489,"b""shoudn't we remove this?"""
9010,270835954,"b""I did not want to break somebody's scripts - it's just an alias."""
9019,271298487,"b'You are exposing the `_lastReader` publicly before you called `IncRef`, a user calling `DecRef` can cause it to be closed, no?'"
9026,271302082,"b""This is already a `HashSet`, but I _think_ that in this case you'll be using one that is using case _sensitive_ comparer, which can cause conflicts later."""
9026,271306671,"b""You're right. Fixed in https://github.com/ravendb/ravendb/pull/9026/commits/5a9f0ff0c6846effe215c3b8dade4e56b89ea6bf. \r\n\r\nI'm making a copy of the global `HashSet` for validation purposes to avoid adding names of ETL tasks during the validation which aren't going to be started on this node anyway."""
9024,271329458,b'Can we add Counters to `Extensions`? We have `Attachments` there'
9024,271333866,b'done'
9023,271594148,b'Why not call `UpdateLastMatchFromFollower` here?'
9023,271609281,"b'It updates also the `_lastReplyFromFollower` which might cause the leader to think that this follower is alive even when no message was received from it. \r\nIf this happens in a loop, the leader is not moving to a candidate state, when he should. '"
9027,271340454,b'What if name will be null after checking all of the available subscriptions?'
9040,271633090,b'Invert the `if` and add `{}` for balance? '
9040,271634168,b'done'
9023,271635884,"b'The point there was to give us a leg up if the initial connection attempt is a long one. \r\n`InitialNegotiationWithFollower` is not called in a loop, does it?'"
9014,271144559,b'Can we check this earlier? After checking if transaction is null?'
9014,271144909,b'I think we can get rid of the GetByteCount here? We are using string.Length for that now?'
9014,271196720,b'done'
9014,271196778,b'done'
9015,270892210,b'why are you checking the count here?'
9015,270892478,"b""Isn't that too big? We are testing limitting this to 512 to have more breathing room"""
9015,270892823,"b'The key issue, BTW, is that we use the document id in many places.\r\nFor example, a doc id that is max size + counter id that is max size, etc.\r\n\r\nI think that we should have a hard limit of 512 and that is it.'"
9015,270901194,"b""if counter name is huge then it's possible to exceed `MaxCounterDocumentSize` while having just one counter in counter-group document"""
9015,271153525,"b""I don't see how that can be. We should have a much lower limit to the size of a counter name"""
9044,271692304,b'When are we accessing this across the cluster?'
9044,271694103,b'from ongoing tasks in studio - we always query responsible node directly. '
9039,271605037,"b""Shouldn't this be _before_ the `foreach` ? This would cause the value to reset per iteration"""
9039,271605124,b'`return true` on a separate line'
9039,271634086,b'Do we need to consider tombstones here?'
9039,271634257,b'`_MaximumAllowedMemory` -> `_maximumAllowedMemory`\r\n\r\nNeed to add a comment explaining why we have this limit'
9039,271634469,"b'This should be initialized once, not each time'"
9039,271634504,"b'This should be initialized once, not each time\r\n'"
9039,271636536,b'done'
9039,271636622,b'done'
9039,271636898,b'tombstones? we are not processing them here?'
9039,271636942,b'done'
9046,271728474,"b""I'm assuming that this happens before we go to the cluster state machine, right?"""
9046,271728636,"b'What happens if we have two separate requests like this? Is this a whole sale replacement over time, or individual ops?'"
9046,271730342,b'Full replacement: https://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Server/ServerWide/Commands/EditRevisionsConfigurationCommand.cs#L28'
9046,271731301,"b'yes,  this happens before we go to the cluster state machine'"
9043,271660398,"b""Why we don't need to call that before other usages of `ActiveTransactions.OldestTransaction` ?"""
9043,271662068,"b'This happens after write transactions, and will do the fixup for everything, basically.\r\nSo we only need to have this in one location'"
9043,271663248,"b'Can you elaborate on ""This happens after write transactions""? Why is that the case?'"
9043,271672836,"b""This is the flusher, and it is going to run after write transactions, so that will ensure that this gets update eventually.\r\nThe actual value we have here isn't really that important, the only thing that matter here is that we make some progress over time"""
9043,271682787,"b'Okay, so this way we prevent from getting stuck. Makes sense. Thanks for clarification.'"
9043,271682829,"b'Okay, so this way we prevent from getting stuck. Makes sense. Thanks for clarification.'"
9043,271684799,"b""I wonder if we can have a more specific name for this guy.  Maybe `ForceRecheckingOldestTransactionByFlusherThread` ?\r\nI'd like to have something more explicit here."""
9043,271685148,b'Fine by me'
9023,271763826,"b'We are giving a leg up on spinning the follower ambassador thread.\r\n\r\nIn the rachis test we fail on the first read from the follower (which is in `InitialNegotiationWithFollower`), because the follower sends an error message. So the ambassador try again by obtaining the connection and fails again on the first read.. and this happens in a loop.\r\n'"
8970,266762370,b'```suggestion\r\n    rc = SUCCESS;\r\n    goto error_cleanup_with_error;\r\n```\r\n\r\nHere you are leaking `dup_path` on success. \r\n'
8970,266762485,b'Need to check if we failed here'
8970,266763101,b'free dup_path missing'
8970,266763322,b'goto errorCleanup'
8970,266763376,b'verify dup_path != NULL'
8970,266765094,"b""Don't think that would be a good idea. It calls to `free(dup_path)`, and that is NULL.\r\nNot sure what will happen, but not valid option to do"""
8970,266765421,"b""use 0755 permissions (like dotnet's System.IO.Directory.CreateDirectory)"""
8970,266767782,"b'1. verify path != null (however we do allow empty string)\r\n2. dirname will return ""."" - verify _ensure_path_exists can handle string "".""'"
8970,271329352,"b""How can that be? What would be passing us something like this?\r\nAnd if they are passing us an empty string, wouldn't this cause issues with `strdup` never ending?"""
8970,271353080,"b'https://github.com/ravendb/ravendb/pull/8970#discussion_r266767782\r\n@avivadi commented that we should accept an empty string and it should reference to current directory as `"".""`. As I understand it `strdup` has no problem with an empty string but `stat` do\r\nso I switch it with `"".""`.\r\n'"
8970,271585888,"b'Consider the case where we send an empty C# string `""""`.\r\nThis is translated by pinvoke to `""\\0""` as a C string.\r\nYou are writing changing this to be: `"".""`, but you _don\'t have a null terminator.\r\n\r\nNow you pass a string without null terminator to `strdup` and will cause _issues_.\r\n\r\nYou can _change_ the value, so `if (path[0] == \'\\0\') path = "".""; `, which _is_ null terminated. '"
8970,271585910,b'Also add a comment explaining this explicitly'
9049,271737568,b'can be removed'
9049,271751097,"b""Shouldn't this be internal?"""
9049,271765082,"b'It fails on the TxReplay, since serializing this ignore the internal.'"
9049,271767485,"b""Can we fix the serialization, instead?\r\nThis is sitting on the client, and I don't want it exposed to users"""
9045,271708622,"b'I think it would be better to use the same constraint as for documents. Which is 512. Check here: https://github.com/ravendb/ravendb/pull/9014\r\n\r\nThat should be applied to initial subscription name only, not the generated one.'"
9045,271730086,"b'The generated subscription name should never be too long, I think'"
9060,272209332,b'const'
9060,272210417,b'*nodesToDisplay '
9060,272211023,b'const deletionInProgress = incomingDbInfo.deletionInProgress();'
9056,272158791,b'Is `_addToInitLog` thread safe?'
9056,272172351,b'Yes:\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Server/Documents/DatabasesLandlord.cs#L595'
9075,272792875,"b'> The resolved_path == NULL\r\n> feature, not standardized in POSIX.1-2001, but standardized in\r\n> POSIX.1-2008, allows this design problem to be avoided.\r\nhttp://man7.org/linux/man-pages/man3/realpath.3.html\r\n\r\nIs it ok to use a feature that not standardized in POSIX.1-2001 but do in POSIX.1-2008\r\nThe other solution is to use `PATH_MAX` or `pathconf` that are problematic too in some file systems'"
9075,272794245,"b'Yes, that is fine. We are going to learn about any incompatibilities very quickly, after all'"
9075,272806876,"b'Maybe, if the changes are approved we should add commit with recompile before merge'"
9075,272818868,"b'Yes, please recompile and push to this PR the changes. cc @aviviadi @haludi '"
9034,271385793,b'better to use `ReadRawDatabase` from ServerStore.Cluster'
9034,271387254,b'What is the relation between this failing test and this fix?\r\nWould it be better to do await NextIdAsync and then execute second operation?'
9034,271387700,b'Need a description here explaining the situation'
9034,271388106,b'We should rethrow here? Now we are ignoring all the exceptions.'
9034,271587405,"b""This obfuscate the actual exception stack trace. \r\nI don't follow why this is needed? """
9034,271587710,"b""Here you need to check that the load itself was _successful_.\r\nAnother issue here is that here you are handling the unload in an _async_ manner.\r\nI'm not sure that this is the right thing to do, and it may cause us concurrency issues.\r\nIn some cases, we'll issue a request to unload, but it takes time for this to be processed, but the request that was supposed to unload already returned, leading to file busy issues?"""
9034,271587892,"b""Yes, I don't like this. The error handling above is very explicit about why it is handling this. Why add this `catch`?"""
9034,271588043,"b'Why did you add the second check? Any update to the actual database record will not trigger this now, would it?'"
9034,271593808,b'This threw `AggregatedException` instead of `DatabaseDisabledException` as expected.\r\nBefore the change the `HiLo` request succeeded while the `SaveChanges` with `DatabaseDisabledException`.'
9034,271594189,b'It should be only triggered for newly created databases on this node.'
9034,271594542,"b'So handle that at the caller, or turn this into an `async` method, which will do that too'"
9034,271594637,b'Why does that matter?'
9034,271623883,b'done'
9034,271664411,b'done'
9034,271668512,b'done'
9034,271680120,b'removed'
9034,271694147,"b'there is a comment on line 73, I can also add it here.'"
9034,271699141,b'> Here you need to check that the load itself was successful.\r\n\r\nadded\r\n\r\n'
9034,271750235,"b'This can be delayed arbitrarily, no? '"
9034,272066485,b'done'
9034,272236843,b'redundant `await` ?'
9034,272238555,b'Check DatabasesInfoNotificationSender.IsDatabaseDisabled implementation. It takes more factors into account (e.g. DatabaseState).'
9034,272786341,"b'Yes, we can just pass it through.'"
9034,272786358,b'This is likely a problem. \r\nYou are doing the expensive ( network call wait) _while_ you are holding the lock.\r\nThis needs to be moved outside the lock'
9034,272833477,b'done'
9034,272835078,b'done'
9034,272835080,b'done'
9034,272835168,"b""_idGeneratorsByTag is a ConcurrentDictionary can't we use GetOrAdd?"""
9034,272835684,"b'no, the `lock` there is fine'"
9081,272899522,b'I have some doubts about that. If both of the settings `MinimumRevisionsToKeep` and `MinimumRevisionAgeToKeep` are `null` then we want to keep unlimited amount of revisions. What will happen now?'
9081,272907079,"b""If both are null it won't reach this point.\r\n"""
9081,272910367,b'Ok. Makes sense. I see the code now. The descriptions in the Studio match all our behaviors?'
9041,271636335,b'Add the command here?'
9041,271636661,"b""Just the exec wouldn't be good enough `/bin/bash` ? \r\nWe need the args here as well.\r\n\r\nDo you think we can assume that there isn't anything sensitive in the args?"""
9041,271642962,"b""I don't like this path name. It make sense, but it doesn't explain what the difference from the usual are.\r\nIt also doesn't handle users who are already using exec config, and we need to do something about it.\r\n\r\nWe can error (this is for 4.2) if this `Exec` alone is specified, but something there is required.\r\n\r\n\r\n"""
9041,271643493,"b""Maybe something like, if the `Exec` is specified, and we need to load, we'll strip the first argument and call anyway.\r\nAnd error on refresh / update ?"""
9041,271643961,"b""Might be better to do the `type` first ? How would that look like to the script?\r\nBecause we don't know how many args the user passes, but can say that the first arg to the script is the op type"""
9041,271644152,"b'Looking at this, I think that this gets too complex for the script.\r\nWe might want to simply provide three different exec options'"
9041,271644764,"b'Also, not sure if we should pass the cert in the command line. That is actually publicly visible info.\r\n`Get-CimInstance Win32_Process | select CommandLine`'"
9041,271648971,"b'I personally would prefer 1 script that can handle all the cases, not X-number of different ones. What is the industry standard for this?'"
9041,271658487,"b""I don't think there _is_ such a standard. And the problem with having a single script is that you turn something fairly simple (use certbot) to complex shell script, which I think we should avoid.\r\nA single exec also means versioning issues."""
9041,271671647,"b'Yes we need the args too.\r\nTheoretically yes, there can be sensitive stuff there. For example credentials to a DNS service. We can document and warn about this.\r\nI assume most users will just pass a path or a thumbprint or friendly name.'"
9041,271671872,"b""That's a problem. For example if the user does this:\r\nExec: powershell\r\nArgs: -NoProfile /path/to/script\r\n\r\nThen if I put the type first, it will run 'powershell type -NoProfile /path/to/script' but type is an argument to the script and not for powershell."""
9041,271672161,"b""Let's do the args. The arguments are publicly exposed anyway, and user can create a script to hide them anyway"""
9041,271672263,b'How should we pass the cert?'
9041,271672377,"b'Okay, that make me favor having separate config options more for this'"
9041,271672425,b'Redirect standard input?'
9041,271672494,b'Standard Input'
9041,271673314,b'The command is in the inner exception'
9041,272824189,"b""Let's rename to `Security.Certificate.Load.Exec`"""
9041,272824226,"b""Let's rename to `Security.Certificate.Renew.Exec`"""
9041,272824241,"b""Let's rename to `Security.Certificate.Change.Exec`"""
9041,272824261,"b""Let's rename to `Security.Certificate.Load.Exec.Arguments`"""
9041,272824284,"b""Let's rename to `Security.Certificate.Renew.Exec.Arguments`"""
9041,272824307,"b""Let's rename to `Security.Certificate.OnCertificateChange.Exec.Arguments`"""
9041,272824325,"b""Let's rename to `CertificateLoadExec`"""
9041,272824346,"b""Let's rename to `CertificateRenewExec`"""
9041,272824364,"b""Let's rename to `CertificateChangeExec`"""
9041,272824389,"b""Let's rename to `CertificateLoadExecArguments `"""
9041,272824396,"b""Let's rename to `CertificateRenewExecArguments `"""
9041,272824405,"b""Let's rename to `CertificateChangeExecArguments `"""
9041,272824418,b'https -> HTTPS'
9041,272825854,b'Can we avoid having this?'
9083,272926630,"b""Let's extract this piece of code to a method. We have exactly the same a few lines code below."""
9083,272928094,b'done'
9083,272943759,"b""This comment should not be here but when `NotifyAboutCompletedBatch` it's called"""
9083,272949051,b'done - sorry'
9081,272987819,b'Yes'
8675,273057790,b'This can happen when we very slow IO.\r\nIndex flushing is in progress and we try to open a write tx.'
9054,272122466,b'Can remove this line'
9054,272122815,"b'```suggestion\r\n        ///     By default, the field \'Id\' field will be added to dynamic objects, this allows to disable this behavior.\r\n```\r\n\r\nThat said, let\'s avoid the double negative here.\r\nMake the convention: ""AddIdFieldToDynamicObjects"" and default to true'"
9054,272131300,b'done'
9054,272131320,b'done'
9054,272234526,"b""No need to catch RuntimeBinderException. We are not performing any operations on 'dynamic'"""
9054,272235027,"b'We need to cache this, it is too expensive. Probably better to pass the entity from the calling method and just to `entity is IDynamicMetaObjectProvider`'"
9054,272786103,"b'Yes, passing it there is much better'"
9054,273009368,b'done'
9054,273009929,b'done'
9054,273049601,b'1. Use `ContainsKey` method\r\n2. `Assert.False(bJsonExpandoObject.ContainsKey(idField))`'
9054,273068806,b'done'
9094,273171456,b'Not needed. This should be supported in every 4.0.7+ version. Just make sure you are using the right one.'
9111,273917545,"b""Fix is here - we didn't add `state` returned by `GetPagerStateAndAddRefAtomically()` which takes into account that we have a new state"""
9116,274280222,"b'We assume that `info` is usually off, if you want to aggressively inline this, you can, but then the contents of the `if` need to be in another method, to reduce the amount of code that is inlined'"
9116,274306396,b'should that method need to be marked for inline too?'
9102,273507677,b'Documents -> HugeDocuments'
9102,273511765,b'We need a better message here:\r\n- explain that huge docs might impact performance\r\n- add the current threshold\r\n- provide configuration key name '
9102,273972493,b'talked with @arekpalinski - ignoring'
9102,273972537,b'updated. '
9131,275151474,b'Do we have here swaps[i].DeviceName null error handling?'
9130,275151082,b'local-state'
9130,275151116,b'local-state and change the action to `DELETE` ?'
9130,275151149,b'local-state'
9130,275151198,b'yes'
9131,275151633,"b'Please add also more `lines` to test:\r\n```\r\n{\r\n                ""Filename\t\t\t\tType\t\tSize\tUsed\tPriority""\r\n}\r\n```\r\nand\r\n```\r\n{\r\n                ""Filename\t\t\t\tType\t\tSize\tUsed\tPriority"",\r\n                """"\r\n}\r\n\r\nand \r\n```\r\n{\r\n                ""Filename\t\t\t\tType\t\tSize\tUsed\tPriority""\r\n                ""/dev/sda                               partition\t999420\t56320\t-2"", \r\n}\r\n```\r\nand also with filename'"
9131,275154969,"b""We can't get null at `DeviceName` as it implemented now and we shouldn't. \r\nI added a test to check it.\r\nI think if we still want to check this it should be by `Debug.Assert`"""
9132,275151430,b'I think only one is needed?'
9132,275151712,b'@ppekrol you should not prefetch in non prefetchable environment even if EnablePrefetching is enabled.  So I think the above change is fine.'
9132,275152279,"b""ok.. @ppekrol - you are right.\r\n@haludi -  `override protected virtual bool CanPrefetchQuery()`\r\nImplement it using both `SysInfo.CanPrefetch` and `_canPrefetchAhead` (make sure it _can_ be overriden by c'tor, i.e. - even if we are on Win10 and we are able to prefetch, but 32 bit pager wants this feature off)"""
9141,275195993,b'Why are you using a `BoxedInstance` and not just an `Instance` ?'
9141,275196053,b'Should we start this at the length of the segment?'
9131,275298712,b'PR Approved'
9143,275317328,b'You have to also have the old command functional.'
9143,275318614,b'For back compatibility?'
9143,275321703,b'yes'
9143,275323380,"b""So, I'll modify the implementation to accept `resetServer`\r\nand what about the description? to describe the old version too? (same question about the documentation)"""
9143,275325214,b'Both should use the same description'
9151,276136778,b'Where are you ever setting this?'
9151,276137556,b'https://github.com/ravendb/ravendb/pull/9151/files#diff-4539864a63aaae59904fb3d5a47f8e22R271'
9150,275926240,"b""At this point we shouldn't have the 'old schema' ?"""
9150,275945674,"b""News to update comment to explain what 'AndMissingValues' means"""
9150,275947021,b'Can we replace 2 and 3 by constants from the relevant schema?'
9150,275947671,b'4.2 RC1'
9150,276120746,b'done'
9150,276122177,"b'we dont have an appropriate enum for items schema, so I just put a comment'"
9150,276122271,b'done'
9150,276123722,"b'okay, anything more meaningful will work'"
9150,276130730,"b'Constants with a comment would be best, yes.\r\n'"
9149,275928960,"b""double 'Private'"""
9149,275929185,b'those files need to be removed'
9149,275929398,b'Needs to be removed'
9154,276210305,b'```suggestion\r\n        private static void ValidateCommandForClusterWideTransaction(MergedBatchCommand command)\r\n```'
9154,276210371,b'Do we need it for anything but `PUT` ?'
9154,276210559,b'can we not pass a null here for most cases?'
9154,276214835,"b""Don't think so. \r\nno silent merges if the document is deleted."""
9154,276219897,"b""I wanted to be on the safe side with this change. \r\nBut we probably later, can do a better reuse for the modifier.\r\nOr I'm missing the point?"""
9139,275196465,"b""This usually won't be persistent, though"""
9139,275196604,b'Is this also the priority order for reading the license?'
9139,275196831,"b""Won't this also trigger if we don't have the env var setup at all?"""
9139,275196851,"b""shouldn't this be on a try/catch?"""
9139,275196960,"b""This is non persistent set.\r\nFor that matter, I'm not sure that there is something that we _can_ do properly here.\r\nConsider a docker instance, which may have the env setup externally completely.\r\n\r\nShouldn't we keep a local copy of the license inside the server store instead as well?"""
9139,275197012,b'Why does this matter?'
9149,276620273,b'done'
9149,276620286,b'done'
9149,276620301,b'done'
9154,276760584,"b'The idea is that you are changing a lot of places, for single usecase.\r\nBetter to reduce the number of changes.'"
9135,275159689,b'Can we add the timeLimit to the `GetDataToSend` but when it is `null` then not apply the logic? This will avoid a lot of code redundancy I think?'
9135,275195684,"b'This method should accept a TimeSpan, not a `time` value'"
9135,276753746,"b'Why have this limit? We already have a time limit that also applies, no?'"
9135,276839665,b'I do not want users to request 1M results here and kill the Studio. This is used only for Studio/Subscription/Test functionality and the 1024 seams more than fine?'
9154,276842825,b'can we reuse the modifier here?'
9158,276902038,b'why did you remove this?'
9135,276902142,"b""Why bother? This isn't happening on the studio, it happens on the server, and limited by the time.\r\nIt is actually going to be pretty important to have large numbers there because we may need to scan a lot of documents to find a useful value if there is a where there."""
9135,276909007,"b'This is not related to the number of documents to scan (it is int.Max). This is a number of results to return to the user in Studio and display in the grid there. We can remove this, but I think 1024 is more than enough?'"
9135,276909841,"b'Oh, number of docs to return is fine, then.'"
9158,277155668,"b""There was a tight loop when the task from `TryModifyTopology` wasn't completed."""
9164,277156532,"b""I don't like this. Background refresh can be _really_ expensive and we don't want to do things behind the user's back"""
9154,277159802,"b'The modifier is bounded to the context. \r\nI wanted to avoid complexity for now, since we switch the context here (few times).\r\n\r\n'"
9157,276369738,b'A comment is needed here to explain why we do this _before_ starting the async task'
9157,276370862,b'- why do you need `Parallel.Invoke` here?'
9157,276371020,"b""- You aren't waiting for the task to complete"""
9157,276371419,b'Use `WaitForValue` here'
9157,276371798,b'Same here'
9157,276371841,b'Same here'
9157,276552054,b'this should be added only if the tx is committed'
9157,277280780,b'Use `TrySet` here '
9157,277280814,b'What errors can be raised here?'
9157,277280929,b'Where are we putting the error in the queue?\r\n'
9157,277281327,"b""For that matter, shouldn't we just use the dictionary, instead of doing linear search?\r\nWe can keep the tasks there until they are either:\r\n* done (no error)\r\n* done with error and observed\r\n* done with error, unobserved and too much time have passed"""
9157,277284561,"b'Removing the `TaskExecutor.Execute` do make sense, since there is no actual work here.\r\nBut why removing the try/catch ?'"
9157,277287371,b'done'
9157,277293088,"b'Nothing can throw there, except OperationCanceledException. Fixed.'"
9157,277293280,b'SetResult and SetException'
9157,277293345,b'changed'
9157,277295383,"b'But we do want to cancel the task, no?'"
9157,277295543,b'There are a couple of scenarios:\r\n- We are waiting on the task (no error)\r\n- We are waiting on the task (with error)\r\n- We start waiting after the task was already completed (and removed from the dictionary).\r\nIn that case we look in the last errors queue (this is the only case that we do that):\r\nhttps://github.com/ravendb/ravendb/blob/5e5be6d9c3da176b04242dfb760bdca526440f71/src/Raven.Server/ServerWide/ClusterStateMachine.cs#L2076'
9157,277296276,b'Done'
9164,277351688,b'Do we need `Unknown` ?\r\n\r\nBetter to switch to\r\n- `Live`\r\n- `Passive` maybe?'
9164,277352126,b'This will make things easier. Arek added this because it was written in the issue to implement this.'
9165,277352539,b'should be internal'
9154,277380174,b'BlittableMetadataModifier needs to be disposed. We need to detect if context has switched.'
9156,277382783,b'Use Assert.Throws.\r\nif this command will not throw then this test will still pass.'
9156,277383660,"b""Just in case can we check if attachments array is not null? I think that `{ '@attachments' : null }` might be a problem here?"""
9167,277164368,b'_can_ this fail?'
9167,277405707,b'@haludi ?'
9164,277526911,b'We typically have _something_ as `0` value in flags. Such as `None`.\r\nI would rather have something that is disabled. '
9119,277528413,"b""```suggestion\r\n            if (char.IsLetter(name[0]) == false && name[0] != '_')\r\n```"""
9164,277535346,"b""Yeah, the idea of having the background update was taken from https://issues.hibernatingrhinos.com/issue/RavenDB-7498 but I had some doubts how to do it properly so I left it without the implementation.\r\n\r\nI'll drop this option entirely then."""
9170,277241851,"b'```suggestion\r\n                    throw new InvalidOperationException(""Could not extract searchTerms value from "" + expression);\r\n```'"
9170,277242014,"b'You need to create an overload here, not modify the method.\r\nThis is a backward compatability concern'"
9164,277537266,"b""1) I removed `Unknown` in another PR (https://github.com/ravendb/ravendb/pull/9165/files#diff-950a76aa4eb57746fcc07663c915c377R5) and made `TrackChanges` option as `0` because it's our default and didn't want to allow users to choose `Unknown / None` which isn't a viable option anyway.\r\n\r\n2) `Live / Passive` aren't really meaningful. Let me stay with current names as they are more descriptive I think.\r\n"""
9167,277539928,"b""No, this can't happen and the check here is for satisfying the Code Analysis"""
9154,277540593,"b'The `BlittableMetadataModifier` is disposed when the context is and the behavior is not different from what we had before this change.\r\nHowever we do need to do that properly, so I opened an issue for that:\r\nhttps://issues.hibernatingrhinos.com/issue/RavenDB-13445'"
9164,277553610,b'Fixed in https://github.com/ravendb/ravendb/pull/9179'
9165,277553711,b'Fixed in https://github.com/ravendb/ravendb/pull/9179'
9156,277628442,b'It throws RavenException which is a very general exception'
9156,277629715,"b'Which is fine, but if it will not throw anything (e.g. someone will change sth in the future) then this test will still pass'"
9163,276745410,"b'This happens on each and every read from the network, which seems excessive.\r\nWe need the state persistent, but we can do well by just checking a property on the engine, instead.'"
9163,276747368,"b""Shouldn't we throw here? """
9163,276747522,b'Like in `SetNewStateInTx` ?\r\nOr is this because this is called from the timeout?'
9163,276747625,"b""This looks like debug code that wasn't removed"""
9163,276748225,b'Why are you storing it as a string? Can just store a byte.'
9163,276748447,"b""But I can, if I'm forcing myself back to passive?"""
9163,276749095,"b'No, not to all of this.\r\nIt is _really_ complex and have too many steps in the middle.\r\nInstead, use:\r\n* cannot call request snapshot on the leader (user can demote manually).\r\n\r\nAnd that solves the whole issue for you.'"
9163,277156729,b'done.'
9163,277156747,"b'yes, It is a timeout callback.'"
9163,277156756,b'oops :/'
9163,277156765,b'done.'
9163,277584639,b'switch to internal'
9163,277584827,b'switch to internal'
9163,277584886,b'switch to internal'
9163,277584894,b'switch to internal'
9163,277585169,b'do we need to escape the parameters?'
9163,277585515,b'rename string to `SnapshotRequest`'
9186,277705424,b'should we check that number of entries in 0 here?'
9186,277707221,"b""it's a perf thingy but yeah"""
9186,277964827,b'`|| tree.State.NumberOfEntries == 0` is already handled by the `Iterate` method'
9186,277964944,"b""I don't think we should do that, it is an already handled scenario"""
9186,277970442,"b'Small optimization to avoid creating iterator, setting prefix, seeking, etc. I do not see a good reason not to have this?'"
9186,277971169,"b""I can't think of any scenario where this would be meaningful performance optimization.\r\nNull / empty trees are rare, but you've added a new conditional for every call"""
9186,277976368,b'Removed this from 6 locations: https://github.com/ravendb/ravendb/pull/9188'
9194,279178182,b'Why not? This is really common thing. You start from the same definition you have and change it.'
9194,279182462,"b'Then class name needs to be changed. We are validating that when first sorter is created. Sorters is a Dict of `<name, definition>` and the initial agreement was that the name must match the class name inside the definition.'"
9200,279261590,b'Why do we need this change if we already have the change in the db init?'
9200,279264150,"b""if the command failed we should not commit the transaction.\r\nI don't know what bugs are lurking over here but surely somebody might add some more persistent state in the future that should never be commited so if a command fails it should not persist anything."""
9200,279264875,"b""We actually do want to do it.\r\nThe logic here is that this is an independent operation, so if it fails, it doesn't impact the rest of the merged tx.\r\nWe want to keep the same behavior to make sure that the next time we don't actually change the underlying datastructure but change the database change vector, we aren't getting NRE again"""
9200,279266726,"b""if you want this behavior than i'll just open a new PR with just that"""
9199,279189837,b'can be removed'
9199,279262774,b'Can this be null?\r\nCan we have the install at all times and just call Restart on PendingUpdate?'
9199,279286149,"b""Shouldn't be since we set UploadState to PendingUpload before starting the upload"""
9199,279287563,"b""I'm not sure we can always ensure that this happens.\r\nBetter to avoid the potential NRE"""
9199,279321396,b'Done.'
9207,279667389,b'remove  comma after string'
9207,279668118,"b'can we introduce method which returns pure computed, as we repeat code here? '"
9207,279668251,"b""entire method body can be replaced with: return this.changeVectorForNextBatchStartingPointFormatted().map(vectorItem => vectorItem.fullFormat).join('<br/>')"""
9207,279668721,"b""rate limit? What's the purpose? """
9207,279668808,b'code duplication '
9207,279674054,b'sometimes you use id selector but it this case it is class selector. Is it typo? '
9207,279674446,"b""don't format text using many nbsp;nbsp;nbsp;, we have css for that. """
9207,279674663,b'remove space before :'
9207,279674715,b'remove space before > '
9207,279674819,"b'nbsp nbsp, nbsp ;-)'"
9207,279674992,b'nice catch!'
9207,279675062,b'nbsp nbsp'
9207,279675194,b'this click handler looks fishy'
9207,279675356,b'nbsp nbsp'
9207,279683342,b'done'
9207,279685305,b'This is not a valid scenario.\r\nYou will not be able to find a document that was replicated from another instance'
9207,279685472,"b""why?\r\nLet's just have `/docs?changeVector=` instead"""
9207,279686357,b'done'
9207,279686410,"b'IIRC, @maximburyak did a lot of stuff around that when we were building replication. '"
9207,279686485,b'And just send the document itself back with the same format'
9207,279686962,"b""I add that so that the screen does not 'jump/flicker' if the answer is returned immediately -\r\nbecause the label and the icon change when searching"""
9207,279688339,b'It is not a typo.\r\nThis class is used in 2 places in the html.'
9207,279689032,b'done'
9207,279689280,b'done'
9207,279691694,b'ok great'
9207,279699275,b'fixed ....   :)'
9207,279709396,b'done'
9207,279715402,b'done - created a method that returns a pure computed'
9207,279735361,b'done'
9207,279736063,"b""removed one 'nbsp' but left only one 'nbsp' as it was mandatory"""
9207,279736350,"b""removed one 'nbsp' but left one 'nbsp' as it was mandatory"""
9199,279767470,b'Removed'
9209,280016794,"b'What if you have a batch command that contains 3 commands.\r\nAfter committing every command does something asyncly (`ExecuteAsyncTask`).\r\nSo you will notify the waiter that you are done only after the first command is completed. not all three, right?'"
9209,280018702,"b""All of them should happen in the same tx, no?\r\nIn that case, we'll register for this only once, and notify once the tx is completely committed"""
9209,280018766,b'What clears this value if the transaction _failed_ ?'
9209,280024007,"b""After the tx is committed, we run an async task.\r\nSo I have a command to notify db1 and another command (with the same index) to notify db2.\r\nIn this case, db2 wouldn't be notified.\r\n\r\nCan't we use the `ExecuteManyOnDispose` for this purpose?"""
9209,280028192,b'_can_ we have a batch command on mulitiple databases?'
9210,280026849,b'The attachment count needs to incremented'
9210,280030142,b':+1:'
9209,280038072,"b""I don't know if we are using it this way. \r\nBut I don't see a reason why not."""
9219,280697232,b'What are you doing with this param?'
9219,280697345,b'```suggestion\r\n            if (_lowLevelTransaction.Flags != TransactionFlags.ReadWrite)\r\n```'
9219,280697703,"b'We need to validate that there are no global indexes here, no?'"
9213,280694482,b'What is this property? I assume that this is meant to be `DocumentNumber`?'
9160,276758095,"b""Huh? That exception is _really_ misleading. The `dbName` isn't empty, it is just not a loaded database for this server.\r\n"""
9210,281078913,b'This looks bizarre? Why are we not using the Attachments here?'
9210,281087995,b'It is the same number. Migrating legacy attachment creates a new document + attachment.'
9210,281089945,b'we write the attachment as dummy doc therefore its proper to increase docs count.\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Server/Smuggler/Migration/AbstractLegacyMigrator.cs#L104'
9216,281088123,b'internal :)'
9216,281088790,"b""What if we have a 4.2 cluster with schema 15 and we want to add a new node with schema 16 (also 4.2). This should be supported, right? We cannot only add node with 'older' schema?"""
9216,281089665,"b""No it shouldn't... you don't know what changes there were.\r\nfor example changing tree to table.. like we did with identities."""
9208,281077063,b'use `Database.Time.GetUtc()`'
9208,281077171,b'use `Database.Time.GetUtc()`'
9208,281077190,b'use `Database.Time.GetUtc()`'
9208,281077241,b'just `Smuggler`'
9208,281138238,"b""Let's return 404 here to match behavior from other endpoints."""
9208,281138612,b'I think we can get NRE when accessing `IndexesHistory` ?'
9208,281138895,"b""Let's only return 404 when index is not found. When history is null or count is 0 just return empty array."""
9210,281165383,"b""How this is displayed in the Studio? Shouldn't we increase both numbers?"""
9210,281168597,b'we increase the docs count here and the attachments count increased by DatabaseItemType.Attachments so in studio we see both docs and attachments\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Server/Smuggler/Documents/DatabaseDestination.cs#L171'
9229,281131114,b'When this event is invoked in lazy suggestion query now?'
9229,281142208,b'in `ProcessResults`\r\nhttps://github.com/ravendb/ravendb/blob/v4.1/src/Raven.Client/Documents/Queries/Suggestions/SuggestionQuery.cs#L75'
9224,281125019,"b""This shouldn't be here"""
9224,281551759,b'removed'
9220,281117480,"b""Shouldn't this be `Base40CommandsVersion` ?"""
9228,281128375,b'This needs to only be applied when we have include on counters inside the query. We need to detect that and put that information inside the QueryMetadata. If we will not do that then counters will impact query caching mechanism pretty badly.'
9228,281529271,b'done'
9228,281932644,"b""We do you have a special  for a single item? Isn't this going to end up with the same thing in the end?"""
9228,282024862,b'done'
9244,281699597,b'Wrong constants used'
9113,273944211,"b'Why? That is explicitly something that can happen, this is not an error'"
9113,276611907,b'The write and the read to the array are not by `Volatile` except for the writing to `RingItem<T>.IsReady.\r\nIs it a problem?'
9113,276758656,b'@redknightlois Can you take a look?'
9198,279187604,b'```suggestion\r\n            if (GoogleCloudStorageSettings != null && GoogleCloudStorageSettings.Disabled == false)\r\n```'
9198,279187650,b'Can be removed'
9198,279187736,b'Can be removed'
9198,279187783,"b'Is ""Type"" is also accepted?'"
9198,279190669,b'Yes'
9198,279197310,b'use lowercase letter in variable name'
9198,279197455,b'remove those nbsp '
9198,279241778,b'Fixed'
9198,279263211,b'Fixed'
9198,279264078,b'You need to include the actual exception in _all_ the exceptions you rethrow'
9198,279266448,b'Fixed'
9198,279286560,b'Fixed'
9198,279286579,b'Fixed'
9198,279286602,b'Fixed'
9198,281069885,b'Rename:\r\n- type to `UploadToGoogleCloud` \r\n- property to `GoogleCloudBackup` '
9198,281072363,b'`GoogleCloudSettings`'
9198,281072440,b'just `Google Cloud`'
9198,281072520,b'missing space :)'
9198,281072529,b'`GoogleCloud`'
9198,281072848,"b""Let's split this to two operations. Also use OridinalIgnoreCase comparer"""
9198,281072918,b'why awaiting?'
9198,281072945,b'why awaiting?'
9198,281072958,b'why awaiting?'
9198,281072990,b'why awaiting?'
9198,281073143,b'Remove the `!`'
9198,281073172,b'just `GoogleCloud`'
9198,281497584,b'Done.'
9198,281497905,b'Done.'
9198,281498176,b'Done.'
9198,281498537,b'Done.'
9198,281498669,b'Done.'
9198,281501096,b'Done.'
9198,281502852,b'Done.'
9198,281948194,b'To return the object & metadata'
9198,281948577,b'So the stream will finish downloading the object.'
9198,281948976,b'To return the object & metadata'
9198,281949288,"b""Don't you need to wait for the object to finish downloading?"""
9198,281950699,b'Done.'
9198,281987764,b'We need to wait before starting a new test'
9198,282002978,b'you can remove `async/await` and just return the task from the client'
9198,282002996,b'you can remove `async/await` and just return the task from the client'
9198,282003017,b'you can remove `async/await` and just return the task from the client'
9198,282003039,b'you can remove `async/await` and just return the task from the client'
9198,282032942,b'Done.'
9198,282032966,b'Done.'
9198,282032981,b'Done.'
9198,282032997,b'Done.'
9261,283194958,"b'Pretty sure that you can just cast this, no?'"
9261,283195752,b'no'
9265,283761719,b'@ayende Do you think that it can be a potential source of problems on 32bits? (that we switched from max 2GB to 4GB) '
9265,283764272,"b""Shouldn't matter, you can't pass it there anyway in 32 bits"""
9265,283768725,b'Okay. I just wanted to make sure.'
9270,284309754,b'What are you actually testing here?'
9270,284553362,"b""It's just a handy test for debugging - not going to be committed to a final PR."""
9273,284787655,"b""I wonder if it wouldn't be more appropriate to handle this via a marker interface, instead of a property."""
9273,284788258,"b""That isn't a good idea. We need to have the Guid directly in the command json itelf.\r\nCertain commands may do a wire hop. Go over from node A to node B (which is the leader) and we want to Guid to be part of that.\r\nFor that matter, not crazy about the `Guid` as a name. A UniqueCommandId is better"""
9273,284788501,"b""Let's go ahead and declare a `delegate` here."""
9273,284788916,"b""This is a great example of why we don't want it in the headers. \r\nIt is very easy to forget to do that in various places, and lose the protection it gives us"""
9273,284789072,b'Why is the guid a string? Why no use an actual guid here?'
9273,284789472,"b'This is actually a good _reason_ to use a string for the unique id.\r\nYou can append to it `id + ""/"" + i`'"
9273,284790734,b'Why create value task just to create a task immediately?'
9273,284791060,"b""what's that?"""
9273,284791560,b'why do you care about the type?'
9211,281080243,b'I do not think that `indexDefinition.Maps` are filled at this point. This is done 50 lines below.'
9273,285364159,b'The reasons I did it as a property is:\r\n1. Not to forget any command\r\n2. Enforce future command not to forget it :-)'
9273,285364209,"b""The reason I've passed it via the headers is because it is easier to append it on the request.\r\nWasn't aware that redirecting doesn't preserve the headers..."""
9273,285364237,"b'But even when passed via the url it has to be retrieved.. so it is the same, no?'"
9273,285364262,b'Nice idea! keep the uniqueness and the injective property. '
9273,285365214,"b'mainly for debug... if we will ever wonder what the hell this command was about, at least we will have the type.'"
9273,285365411,b'1) That required to change a lot of unrelated code.\r\n2) Can do that more easily by validating the commands that go to the cluster directly.'
9273,285365420,b'Putting it in header / url means that it is outside of the data itself. We need it _in_ the command.'
9273,285365423,"b""Yes, so don't put it in the URL. Make it in the command body itself."""
9218,280414512,b'WaitForValue'
9218,281104157,b'needs to inherit from RavenException?'
9218,281105048,b'rename to `nodeTag`'
9218,281105211,b'rename to `SelectedNodeTag`'
9218,281115816,b'internal'
9218,281116410,"b'This code should be moved to NodeSelector, I think?'"
9218,282037244,b'done'
9218,282037399,b'done'
9218,282038696,b'done'
9218,283305276,"b""Let's use nameof"""
9218,283305289,"b""Let's use nameof"""
9218,283305499,b'Do we still need it?'
9218,283306733,b'`internal readonly string NodeTag`'
9218,283307754,b'I think that NodeTag should not be part of `RestoreBackupConfiguration`. It contains data that we are sending to the server and this is not related.'
9218,283309448,b'done'
9218,283310548,b'done'
9218,283315194,b'nodeTag'
9218,283315386,b'we also need to handle ChangesAPI part '
9218,283415493,b'done'
9218,284608260,b'done'
9218,284608289,b'done'
9218,284608546,b'yes we use this to explicitly select node to execute the command'
9218,284670470,b'I think we do need to notify the client about cluster topology change. So we probably should set it to a higher value here.'
9218,284670599,b'same.'
9218,284670823,b'do we still need that?'
9218,285371362,b'done'
9218,285371367,b'done'
9218,285374150,b'removed'
9218,285383798,b'done'
9218,285880517,b'You need to create a separate `Changes` method overload to not brake the binary compatibility'
9218,285881139,"b""Shouldn't this be the other way around? First take the node tag from result, then from command?"""
9218,285882591,b'rename `RequestDestination` to `DatabaseChangesOptions` '
9218,285884979,"b""should be TKey, but I do not think we need `AtomicDictionary` at this point? Are we using any of it's features? This can be just a concurrent dictionary? cc @ayende """
9218,285885287,b'create internal comparer for DatabaseChangesOptions'
9218,285890049,b'If we select node to execute => execute on this (selected) node\r\nif we dont select => execute on command.Result.OperationNodeTag'
9218,285895133,b'done'
9218,285897532,b'done'
9218,285904355,b'done'
9218,285904378,b'done'
9291,286035435,"b'```suggestion\r\n                                            $""Cannot update {task} configuration with DatabaseRecord. Please use a dedicated operation to update the {task} configuration."");\r\n```'"
9291,286035637,"b'```suggestion\r\n                                            $""Failed to create a new Database {addDatabaseCommand.Name}. Updating tasks configurations via DatabaseRecord is not supported, please use a dedicated operation to update the {task} configuration."");\r\n```'"
9291,286465323,b'done'
9291,286465359,b'done'
9204,279333436,"b""How can we handle a situation when can't be deleted?\r\nin case of:\r\n1) The file is in use\r\n2) The remote connection to file lost"""
9204,279334462,b'Should I consider a network error?'
9204,279335321,b'When compressed is it can be too much to get all the file names at once?'
9204,279335687,b'Should the configuration of the audit log be the same as the regular log'
9204,279336303,"b'```suggestion\r\n                    Name = _name + "" Log Compression Thread""\r\n```'"
9204,279336437,"b'What do you mean, when we are failing to get the directory is on the network?'"
9204,279336892,"b'We can usually state that losing I/O connectivity is _bad_. In this case, we can ignore the error and not handle it at all.\r\nIt will be fixed the next time we deal with it.\r\n'"
9204,279336945,b'Use `{}` here'
9204,279336999,b'Use `{}`'
9204,279337148,b'Use `{}`'
9204,279337175,b'Nothing'
9204,279337365,b'Network error is _really_ strange. We typically log to local disk'
9204,279338171,b'That is a LOT\r\nAnd network error is rare'
9204,279338275,b'You are also blocking the shutdown of the server while this is blocked'
9204,279339773,b'and what about when the file in use? should I continue deleting the next log?\r\nTo delete until we rich the limit of log size or it should be considered as we deleted it?'
9204,279340893,"b'yes, when the path to the log directory is on a remote computer.\r\nThis is the only exception I can think we can suddenly get from `GetFIiles` after we already use it\r\n(accept to when someone deleting the directory and create a file with the same name)'"
9204,279348486,"b""Ignore it, we'll be retrying this anyway"""
9204,279348628,"b'There are a lot of things that this can be.\r\nOut of file descriptors, I/O errors, permissions issues, etc.\r\n'"
9204,281140262,"b'Just a sanity check here... having this attribute and providing `null` will not set the min value, right? '"
9204,281140419,b'Needs to be `Security.AuditLog.RetentionSizeInMb`'
9204,281140451,b'Same here. Wrong prefix.'
9204,281140949,"b""shouldn't this be moved to `ConfigureAuditLog` method?"""
9204,281141317,b'rename to `Compressing`'
9204,281142357,"b'This will cause NREs. We need to continue the execution of this method, but ignore the cleanup parts that use both of those variables'"
9204,281143674,b'This should be before both of the loops to avoid checking that each time'
9204,281230365,b'Do you mean if I can set the value below 256 because of the `DefaultValue` is set to null?'
9204,281232906,"b' Actually, I forgot to decrement the `totalLogSize` value every deletion...'"
9204,281486256,"b'No, what will happen when I will set the value to `null` explicitly in `settings.json` ?'"
9204,281492178,"b""I do not like this approach, because logging will stop entirely when we will not be able to get the list of files in the directory. I think it would be safer just to omit the cleanup part. Also let's rename the method, now it does a bit more than the name suggests."""
9204,281494423,b'Can we have a test for this? We can create new instance of LoggingSource inside a test and check if everything is working as expected.'
9204,285997768,"b'I do not like this. We were extracting a date from file name here, for me it was better approach than rely on the last write time.'"
9277,285879814,"b'I do not like it, create 2 overloads'"
9277,286339216,"b'I cannot overload with an object,\r\npulled out the if to implementation of getNames'"
9277,286343998,"b""Can we be more explicit here? I've read that few times and I'm still having issues to understand what would be the action that I should take to not get this exception when this method is used."""
9277,286351609,"b""GetNames is the only one that has no overload by 'documentId', as opposed to other attachments' methods such as get, store, etc.\r\n"""
9277,286360199,"b'I understand, but the exception message is not 100% clear'"
9277,286448434,b'Done.'
9282,285903790,b'Also check for empty?'
9282,285904133,b'Why are you skipping the first char in the existing `Query` ?'
9282,285904433,b'`guid` of what? It looks like this related to the license id. Better to name it properly'
9282,285904635,"b'```suggestion\r\n        public async Task LeaseLicense(string raftReqId, bool forceUpdate = false)\r\n```\r\n\r\nOr something like that'"
9282,285904964,b'Meaningful name'
9282,285905562,b'Are they guaranteed to be unique? Also elsewhere where you do this'
9282,285905800,"b'Probably not, get the req id from the top?'"
9282,285906079,"b""I don't like this, however. You are throwing `Exception`, and we probably should be throwing the actual exception type that was raised."""
9282,285906363,b'This should be configurable'
9282,285906843,"b'For debug purposes, also include the time.\r\nWe can also expose this as an admin debug endpoint, which can be really useful.'"
9282,285907503,"b'The nightly also have a version indication, no?'"
9282,285907598,"b""I don't understand why you have this?"""
9282,285907817,"b'If the version match, and no request id provided, should throw'"
9282,285925433,"b'I keep the empty for ""don\'t care""'"
9282,285926089,b'followed this : https://docs.microsoft.com/en-us/dotnet/api/system.uribuilder.query?view=netframework-4.8'
9282,285926937,"b'guid is unique.. as long as the name of the index is also unique (or any other suffix for the particular operation), it should be fine.\r\n'"
9282,285927844,"b'Agree, but I keep the exception as a string and not sure how to convert it back to the original one.'"
9282,285928273,b'IIRC nightlys are simply 42'
9282,285929394,b'I want to avoid throwing any exception in `release`. \r\nIn order not to break any client..'
9282,285965355,"b""I don't think we _require_ that the name will be unique, though.\r\nBetter to add an index number there too"""
9282,285965404,b'Keep the exception time and create it dynamically?'
9282,285965569,"b""Right now you aren't throwing anything anyway, though?"""
9282,285986339,b'Would it make sense or even possible to pass 2 indexes with the same name in the same operation? '
9282,285988741,"b'Sense, no? \r\nPossible...'"
9282,285990434,"b'If the guid is null, I do throw before appending to the log (both release and debug)\r\nI want to throw only in debug builds, in release even if we have a bug we should put `string.Empty`.\r\n '"
9282,286337261,b'nameof'
9282,286337297,b'nameof'
9282,286337315,b'nameof'
9282,286337334,b'nameof'
9282,286337364,b'nameof'
9282,286337378,b'nameof'
9282,286337410,b'nameof'
9282,286337430,b'nameof'
9282,286337453,b'nameof'
9282,286337481,b'nameof'
9282,286338400,b'ErrorOnDatabaseDoesNotExists will be `false` now?'
9282,286339853,b'Should be `42_009` ?'
9282,286340862,b'Since we are using that all over the place and there are some magic string here e.g. `string.Empty`. I would say that we need to create internal static class called `RaftIdentifier` with two methods:\r\n1) `NewId` which will return this\r\n2) `OtherNameThatExplainsWhatItDoes` which will return `string.Empty`'
9282,286340917,b'what happened here? :)'
9282,286341233,b'This will also help centralize the identifiers.'
9282,286355611,b'This `ctor` is only for de-serialization. No code path uses it. \r\nWhat we do missing is to include the `ErrorOnDatabaseDoesNotExists ` in the `ToJson` of the `UpdateDatabaseCommand`'
9282,286361223,b'Depends for what purpose it is used. You know better.'
9305,287269616,b'Do we need this?'
9305,287269664,b'This is not used?'
9305,287273465,b'Needed for ThenBy'
9305,287285065,"b""Can't do `Enumerable.ThenBy(this, ...)` without it.\r\nIt expects `IOrderedEnumerable`."""
9305,287286160,b'Implemented because of the inheritance from `IOrderedEnumerable`'
9298,286834272,b'format code:\r\n} else {'
9298,286835831,b'why do we need this? '
9298,287589322,b'done'
9298,287589638,"b""well - we don't have to - I just thought the image looks nicer in the dialog when it is a bit **smaller**"""
9307,287598956,b'Can you make this a struct? Will this cause allocations?'
9307,287598969,"b""IIRC, doesn't this already happen?"""
9307,287598996,b'Can we use a ValueTask here?'
9307,287599038,b'Why a queue and not a list?'
9205,281074311,b'This is TCP related. I do not see a reason for us having that in RequestExecutor'
9205,281074553,b'Should be `Server.Tcp.ReceiveTimeoutInSec` and be `ServerWideOnly`'
9205,281074613,b'Should be `Server.Tcp.SendTimeoutInSec` and be `ServerWideOnly`'
9205,281076155,b'You removed all the occurences of this I think? What would be the reason to keep that configuration?'
9205,281076216,b'Where is this used now?'
9205,281076453,b'This changes previous 15 * 1000 (ms) to 30 sec. Do we want that? cc @karmeli87 '
9205,281551454,b'We need a timeout configuration in the RequestExecutor for TCP - and we need it BEFORE we initialize the TcpClient'
9205,281556025,"b""Still it is not related in any way to RequestExecutor. Maybe it can be moved to conventions, but only place where this is used in Client API is subscriptions and I'm not sure if this is something that we want to have configurable in the Client API"""
9205,281573593,"b'It is used by users, possibly.\r\nPerhaps we should throw a ""not supported"" exception (with informative error) if it is set a value so users will know that this config value is no longer valid?'"
9205,281588519,b'we should not use `GlobalHttpClientTimeout`. It is set to 12h.'
9205,281588584,b'can be removed?'
9205,281588874,b'We should use default TcpClient timeouts then?'
9205,281589943,"b""Let's remove this configuration property entirely."""
9205,281606229,"b""Thought about it, but at line 201 we have not yet created TcpClient.\r\nPerhaps we should add the timeouts to client Conventions? \r\nThe DefaultTimeout is there I think, is there a reason we shouldn't have RequestTimeout and ResponseTimeout there?"""
9205,281606792,b'probably yes. I will move Request/Response timout to Conventions I think'
9307,287601996,b'As it was implemented so far the read transaction is closed after we retrieve all the ids\r\nI just refactoring this so I can reuse the same code in query for documents and in query for ids'
9307,287602443,b'`ExecuteRateLimitedOperations` using a queue'
9302,287240401,"b'Do not override the will of the user. Better to do:\r\n```\r\n                var fileInfo = new FileInfo(toFile);\r\n                var directoryInfo = fileInfo.Directory;\r\n                if (directoryInfo != null && directoryInfo.Exists == false)\r\n                    directoryInfo.Create();\r\n\r\n                using (var file = fileInfo.OpenWrite())\r\n                    await stream.CopyToAsync(file, 8192, token).ConfigureAwait(false);\r\n```'"
9302,287596890,b'this will throw if last part of the path is existing folder'
9302,287598479,"b""I really hope so, because argument name is 'toFile'. You can detect that situation and throw different exception, for sure do not generate random file name."""
9302,287685983,b'Can you fix formatting?'
9302,287686047,b'Put the exception in inner?'
9302,287686069,b'Put the exception in inner?'
9302,287689474,b'done'
9302,287689480,b'done'
9302,287689494,b'done'
9302,287689525,b'done'
9309,287949681,b'Should be `-=` '
9309,287988192,b'fixed'
9317,288003657,"b""4.0.x shouldn't be supported, right?"""
9316,287988835,b'Can we avoid the sleep somehow? Can we do an active check?\r\nThis is likely to fail if the cluster observer is a bit slow.'
9316,287995932,b'I can change it if you want'
9316,287996309,b'please do'
9316,288002063,b'now it seems to fail on debug'
9316,288002317,b'why?'
9316,288003385,b'not sure why'
9316,288012373,b'rename to `SetDatabaseDynamicDistributionOperation`'
9316,288012628,"b""Let's assert if this is not null or empty"""
9316,288012718,b'mark as private and put inside the operation class'
9316,288012968,b'Do we want to expose this as a part of public API? Maybe internal is enough?'
9316,288014098,b'what is null?'
9316,288015234,b'why not? I think it was just missing and it is not breaking anything'
9316,288016652,"b'databaseName, string'"
9316,288017808,b'`IServerOperation<bool>` needs to be changed to `IServerOperation`\r\nThe endpoint does not return anything'
9316,288017943,b'ok'
9316,288018436,"b'I missed that interface, was looking for it, was below the other one'"
9315,288005088,b'typo'
9315,288006033,"b'Maybe it should be sorted list, then we will not have to sort it later on?'"
9315,288006135,b'method name should be `Sort`'
9315,288014439,"b'In windows, it is already sorted.'"
9315,288015113,b'Fixed'
9315,288015402,b'Fixed'
9315,288034153,b'please follow formatting rules'
9315,288034618,b'Please follow formatting rules. Also it should be `(o => o)`'
9315,288034963,b'Do we care that much? It is not a hot-path? How many items do we have there on average? 20?'
9315,288070255,"b'Ok, Changed to `SortedSet`.\r\nSortedList uses 2 generic types'"
9315,288071972,b'Removed'
9315,288072056,b'Done.'
9319,288414685,"b""counter names aren't case insensitive?"""
9319,288473874,b'Not anymore'
9301,287241521,b'Rename to `Exec` will match with our naming that we have in Configuration for e.g. security'
9301,287241763,b'Can name be `null` ?'
9301,287242149,"b""Isn't that a read request?"""
9301,287251873,b'Should use `Database` context?'
9301,287252101,"b""Don't we need to dispose this?"""
9301,287253549,b'Can this return false?'
9301,287253596,b'Or name can be `null` ?'
9301,287273536,b'done'
9301,287274462,b'done'
9301,287277878,"b""Shouldn't matter since I'm not using a read tx here./\r\nChanged to Database."""
9301,287278543,"b""shouldn't be but added a check"""
9301,287278625,b'done'
9301,287283684,b'done'
9301,287474619,b'Why do we have this? This forces us to have just a single one. But do we have to do it this way?'
9301,287487791,b'Do we need/want more than one?'
9301,287488153,"b'12 hours full / 15 minutes inc for S3.\r\nWeekly to glacier\r\n\r\nAS a good example, we need two of them for that.'"
9301,287754300,b'You should probably rebase and implement `IRaftCommand`'
9301,288166058,b'done'
9301,288186113,b'done'
9301,288467902,"b'This can throw IndexOutOfRange, right?'"
9301,288482940,"b'Let\'s add a separator here.\r\n\r\n```suggestion\r\n        internal static string NamePrefix = ""Server Wide Backup Configuration/"";\r\n```'"
9301,288484736,"b'Yes, it can. Better to simply remove them in the look above and then `i--`'"
9301,288495380,b'done'
9301,288496598,"b'I\'m adding a comma when adding the task to the database record.\r\nFor example:\r\nServer-wide backup name: ""Backup to S3"".\r\nBackup name in the database: ""Server Wide Backup Configuration, Backup to S3""'"
9324,288412457,b'Can we bump only by 1? '
9324,288422844,"b'Yes, auto generated'"
9325,288596252,b'Why is this being checked only for trial election?'
9325,288596660,"b'Okay, this is being checked here again for real elections, right?'"
9325,288597680,"b""Shouldn't we say, my last index entry or (if you gave me any entries, the last entry index you gave me) or the leader commit?"""
9318,288416291,b'Looks like debugging code and unrelated to the issue?'
9318,288416411,b'Unrelated to the issue?'
9318,289308884,"b'yes, it is unrelated indeed.'"
9318,289308903,"b'yes, it is unrelated indeed.'"
9332,289138807,"b'This happens as soon as we move to `Passive` state.\r\nBut previously, that was when we moved from `Passive` to something else.\r\n\r\nHow do you handle removal of node from cluster and then adding it again in this case?'"
9314,288004571,b'I think we also need to handle https://github.com/ravendb/ravendb/blob/9e63a0ad28db7bede401782cb2a882ef7d249e89/src/Raven.Server/Documents/DocumentIdWorker.cs#L214 ?'
9314,288004732,b'Inside `GetLowerIdSliceAndStorageKey`'
9314,288008654,b'yes!'
9348,290679606,"b""This would require to change how we deal with `Document` all over the places where we use that object because we needed to dispose it everywhere. We typically just dispose `BlittableJsonReaderObject`, `LazyStringValue` explicitly. So instead of introducing `IDisposable` here we can dispose what's needed inside the dispose method of `PatchResult`, right?"""
9348,290813956,b'What can be the problem? that I will dispose an external value that we still need?'
9348,291026564,b'```\r\nforeach (var document in results.Results)\r\n{\r\n\ttoken.Delay();\r\n\tresultIds.Enqueue(document.Id.ToString());\r\n}\r\n```\r\n\r\nCan we dispose the document there also (~10 lines up)?'
9348,291036155,"b""I've added this."""
9342,290696945,"b""I don't follow this computation?"""
9342,290717190,b'each iteration happened every 500 ms.\r\n500ms * 60 = 30 s'
9342,291032002,b'Can you add this as a comment? '
9342,291051377,b'done'
9351,291026086,b'Can we add OrderByDescending?'
9351,291090078,b'done'
9348,291103382,b'Question: \r\nI know that we cache `LazyStringValue`s inside the context.\r\nMight be that the `Id`/`LowerId` are cached and we are disposing them?'
9348,291125524,"b'IIRC the JsonOperationContext contains fieldName cache, and this is not related here, because the Document.Id and LowerId comes from allocator. I might be wrong... @ayende do you remember?'"
9348,291128576,b'I and @karmeli87 followed it and the pointer for the `LazyString` comes from the table itself (Memory Map File) and in this situation the `LazyString` object will not dispose the memory. It will dispose in a situation when the memory was  allocated specially for the `LazyString` but it is safe to dispose in this situation too. There is a reuse of the `LazyString` object but the context will renew the `LasyString` object before so no problem to dispose the `LasyString` object. The `FieldName` cache related to `DocumentBuilder` while it building a document. '
9348,291144432,"b'If you read from the mmap blittable, that gives you a lazy string instance on the mmap, nothing is allocated in this case.'"
9347,290492897,"b""Shouldn't we take into account that it might be disabled?"""
9347,290497553,"b'yes, was too eager on removing the `lock` :)'"
9347,290671191,b'What is the dead lock that you are running into here?\r\nAnd why not handle that using the already existing `lock (this)` by changing this to be `Monitor.TryEnter` ?'
9347,290720448,b'p1 is the timer callback (`SwitchToCandidateStateOnTimeout`)\r\np2 switching the rachis state (`SetNewState`)\r\n\r\np1 enters the lock -> p2 opens write tx -> p2 try to enter the lock but blocked -> p1 tries to open write tx.\r\n\r\n'
9347,290728694,b'Not sure how `Monitor.TryEnter` would help.\r\nI need that the execution of the callback to be outside of the lock.'
9347,291144873,"b""I don't like this.\r\nWe need to do this, but we have to capture the `_timouteHappened` value _inside_ the lock"""
9347,291150262,b'done'
9359,291997054,"b'I think we should just first do double, then long.\r\nThis is because JS have doubles,not longs'"
9359,292031581,b'Removed long since JavaScript numbers are always stored as double precision floating point.'
9358,291929930,"b'Am I missing something, but `(Path.GetExtension(current.FileName) == "".gz"" && Path.GetExtension(current.FileName) == "".log"")` should always be false, no?\r\nA filename cannot have both `.gz` and `.log` extensions'"
9358,291932250,"b'Oops. Yes, should be `previous`'"
9365,292424848,b'use `PlatformDetails.IsWindows8OrNewer` for this.'
9365,292425103,b'I think it would be best to add those `WINVER` (and friends) to the other DLLs. Those need to match Win8.'
9365,292425217,b'Is there no other way to do this?'
9365,292425524,b'We said do not want to use that'
9365,292425981,b'Why we do not want to use that?'
9365,292426533,b'We decided not to use PlatformDetails (and eventually throw it away).\r\nI can copy the methods to Pal.cs though'
9365,292426843,b'Another dll for Win8 or do you want to add WIN8 flags also for WIN10 ?'
9365,292427178,"b""Let's use them and when we will be throwing them away, you can refactor."""
9365,292427788,"b'OSDescription can give you Windows OS version in dotnet core.. We can parse it in many ways, but I am not familiar with another way to get the OS version in non-string corefx call'"
9365,292429241,b'done'
9365,292432024,"b'single dll, exactly the one that we have now, but with correct flags, so we will not add features that we do not have in the future.'"
9361,292318930,b'why?'
9361,292355864,"b""As I understand it, it shouldn't change so to be more explicit about it"""
9361,292364005,"b""The value doesn't make sense to me.\r\nYou `ByteStringStorage` size is 19, right?\r\nSo this translate to 16, but I don't know why"""
9361,292384109,b'The size is calculated in run time (sizeof(struct) is not constant !?!?) \r\nand in my computer sizeof(ByteStringStorage) =  24\r\nso: 24 + (8 - 24 % 8) = 32'
9361,292390126,"b""I actually tried to make it `const` but I found I can't do it.\r\nIs it make sense to make it static? One value for all the ByteStringContext objects of the same generic type? for better memory usage (less space and more likely to be on cash)? """
9361,292402487,"b'This cannot change, no.\r\nMake this a `const` with value of 32, yes. \r\nThen create `Debug.Assert` that will validate that this is the same value, and add a comment explaining why'"
9334,289139190,b'Why do you need this cast?'
9334,289139350,"b'That would probably be best, yes. This might be called a LOT'"
9334,289139461,b'Can we remember this here as well?'
9334,289322484,b'Maybe something similar to `IScratchSpaceMonitor`:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.2/src/Voron/Impl/Scratch/IScratchSpaceMonitor.cs'
9334,289632787,b'because somebody decided to implicitly implement this method and this is the only way to access it'
9334,289632822,b'remember what?'
9334,289714037,"b""Remember the value, I meant. So we don't have to re-compute it at all times"""
9334,289719794,"b""You can't just remember it, it is been modified constantly, the majority of the computation is done per CryptoState and that is already been computed on the fly.\r\nComputing the total for CryptoPagerTransactionState will mean hiding it too and I don't see the gain here it is already a tiny price to pay for a very expensive operation."""
9334,289728188,"b'What is this? \r\nThis has no meaning, dictionary has no defined order.'"
9334,289728411,"b""This is wrong. It _may_ work on a dictionary that is very small, but that is wrong. \r\nIt certainly shouldn't be in the API"""
9334,289729432,b'This was the code that was written I have just hidden the dictionary '
9334,289729978,b'I can delete the test if you want'
9334,289730744,"b""i'm the wrong guy to complain about this:\r\nhttps://github.com/ravendb/ravendb/blame/v4.2/test/SlowTests/Voron/Issues/RavenDB_10825.cs#L40"""
9334,290177746,"b""I don't think we want to delete a test. The test does this hack in order to confirm that something is working correctly but it doesn't need to use a dedicated method for that I think. """
9334,290185148,b'Can we change its type to `Size`? The usage of `Size` make the usage of it a bit less error prone'
9334,290186196,"b""if I expose the dictionary than I didn't do anything by hiding it.\r\nI could add an expensive setter that will re-calculate the size of the buffers and if it is used only by one test than it should be okay."""
9334,290186970,"b""I have changed it to long so we won't have to allocate size object every time we check the size. This is done this way everywhere else I have looked."""
9334,290187072,b'Why change it to `long`?'
9334,290188024,"b""so you won't have to do size -> long and long and then allocate new size.\r\nI can't accumulate the size of the buffers I only got the total and I don't want to add the total to the size each time I check the size, those are too many allocations it is better to use long.\r\n"""
9334,290188364,"b""Shouldn't `TotalEncryptionBufferSize` be part of `IPagerLevelTransactionState` (just next to `IPagerLevelTransactionState.CryptoPagerTransactionState`)?"""
9334,290190410,b'it is'
9334,290193919,"b""The reason we have `Size` is that it makes it more difficult to make a mistake like - oh, that's in bytes, I thought the value is in kilobytes etc. `Size` is a struct so it won't have expensive allocation impact."""
9334,290194777,"b""Then maybe let's rename the method `ReverseBuffers` to `ReverseBuffers_DebugOnly` and mark it as `internal` so it will be accessible in tests."""
9334,290195607,b'Right. I missed that.'
9334,290196658,"b""As commented above - `Size` is a struct. I'm for using `Size` everywhere across the board (where possible) since it makes the code less error prone."""
9334,290216515,"b""This behavior is fine with the _test_, but it isn't fine in the API.\r\n"""
9334,290241058,"b""@arekpalinski on the other hand, we could add 'InBytes' to the end of the property name, achieving the same readability, without impacting potential JIT optimizations, due to lack of ability to optimize structs to registers usage."""
9334,290248875,"b'@ayende  Regarding txAllocations limit in index: By default the value for Configuration.TransactionSizeLimit is null, therefore, we will not engage the logic that uses this value. In that case, should we have a default value for Index.TransactionSizeLimit in the case that there is no such value in the config? If we do, should it be 64MB, as we have in Bulk Insert?'"
9334,290603022,"b""We use `Size` pretty commonly in many places so I'm not so worried about its impact on JIT but we might ask @redknightlois about opinion.\r\n\r\nAdding 'InBytes'  prefix is fine but the usage of `Size` is even better because it has dedicated methods, operators etc and given that we use `Size` in other places too then it's easier to deal with them IMO e.g. like here just using `>` operator:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/843cf60f5341a57838e439265a77f1319494fb81/src/Raven.Server/Documents/Indexes/Index.cs#L3336\r\n\r\nWhat do you think?"""
9334,290666775,"b'Although it seems t\'s more of a style issue because both approaches are used throught the code, , while Size demands calling contructors and function calls even for increasing values (while in the bottom line it relies on an inner propery ""_valueInBytes"") using just a `long` type that represents value in bytes, when it\'s the only form of data that we are interested in is the simplest, most readable way to go. \r\nI think that Size starts to be significant when you are required to switch measurement units, therefore I would prefere a cleaner approach here. \r\nGenerally speaking, I think that we should be careful not to make `Size` the default tool, because it might introduce coding standards that may impact overall performance.'"
9334,290684110,"b'Size is a struct, should not impact performance that much. It was introduced to avoid miscalculations in the code in places like that (which we had few times in the past).'"
9334,290693433,"b""1. Let's use struct here.\r\n2. @maximburyak The JIT is smart enough to inline such a process and eliminate the costs."""
9334,290694191,"b'64MB is _very_ small. In the bulk insert case, we use that to limit the amount of data we read from the network.\r\nThe problem here is that we need to balance the speed of indexing with the cost of the transaction. '"
9334,290697152,"b'Use `Size` whenever possible. The cost of `Size` in allocations is 0 and in parameter passing, it is 2 registers, which is negligible. The positive impact it brings in reliability is so big that it is a no-brainer. '"
9334,290720103,"b""@redknightlois I think that only in .net 3.0 structs will be optimized into registers. Anyway, you could look into a little comparison I made, it's actually interesting: https://gist.github.com/maximburyak/23dde736e6d5d4178cbcbbc5b6c7f126 bottom line is that run time of Size.Add is more than an order of magnitude slower than long +=, and new Size is two time slower than the first one"""
9334,290744007,"b'@maximburyak There are many things wrong on that microbenchmark setup, we cannot trust those results. For proper setup, use BenchmarkDotNet which will handle most of the nuisances (albeit not all of them) so the probability of getting a proper microbenchmark from the get go are far higher.\r\n\r\nAside from that, there is no reason why you would want to do something like this in a hot loop:\r\n```csharp\r\n for (Size k = new Size(0, SizeUnit.Bytes); k < maxSize; k.Add(1, SizeUnit.Bytes));\r\n``` \r\nYou are obviously paying the cost of the constructor, and the `.Add()` which may not even get inlined depending on the context. Inside a hot loop, using the long is OK... but `Size` should be used for exchanging and cold checks like the one at the `Index`.\r\n\r\nhttps://twitter.com/federicolois/status/1117762997072617472\r\nThis is one of the cases where uglification is not warranted. \r\n\r\nStruct promotion for 2 longs structs already exist since 1.1, it was limited back then but kinda good, On 3.0 it is just amazing. '"
9334,290774280,"b'In my(subjective) eyes, using `+=` is at least as readable and elegant and safe as `.Add` or `new Size(` in that particular case, where we are tracking byte count. \r\nI think that this discussion is more fundamental than the specific case it is initiated for.\r\n\r\nAnyway, for completeness, here is a benchmark.net output:\r\n\r\n```\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.765 (1803/April2018Update/Redstone4)\r\nIntel Core i7-8700K CPU 3.70GHz (Coffee Lake), 1 CPU, 12 logical and 6 physical cores\r\nFrequency=3609377 Hz, Resolution=277.0561 ns, Timer=TSC\r\n  [Host]     : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0\r\n  DefaultJob : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.3416.0\r\n\r\n\r\n|          Method |      Mean |     Error |    StdDev |\r\n|---------------- |----------:|----------:|----------:|\r\n|   LongIncrement | 0.0110 ns | 0.0016 ns | 0.0014 ns |\r\n|   SizeIncrement | 1.5476 ns | 0.0085 ns | 0.0071 ns |\r\n| SizeConstructor | 3.0374 ns | 0.0058 ns | 0.0054 ns |\r\n\r\n// * Warnings *\r\nZeroMeasurement\r\n  MyBenchmark.LongIncrement: Default -> The method duration is indistinguishable from the empty method duration\r\n\r\n// * Hints *\r\nOutliers\r\n  MyBenchmark.LongIncrement: Default -> 1 outlier  was  removed (1.19 ns)\r\n  MyBenchmark.SizeIncrement: Default -> 2 outliers were removed (2.75 ns, 2.77 ns)\r\n\r\n// * Legends *\r\n  Mean   : Arithmetic mean of all measurements\r\n  Error  : Half of 99.9% confidence interval\r\n  StdDev : Standard deviation of all measurements\r\n  1 ns   : 1 Nanosecond (0.000000001 sec)\r\n\r\n// ***** BenchmarkRunner: End *****\r\n// ** Remained 0 benchmark(s) to run **\r\nRun time: 00:01:13 (73.8 sec), executed benchmarks: 3\r\n\r\nGlobal total time: 00:01:15 (75.17 sec), executed benchmarks: 3\r\n// * Artifacts cleanup *\r\n```\r\n\r\nSee code here: https://gist.github.com/maximburyak/3f83611c0e1a5dabd2da9943d2b53549'"
9334,290790974,"b'Not a big difference, and can be fixed if you aggressively inline the add and the constructor which by default is not applied. Either way, while agree about the `Add()` vs `+=`, the addition of the scale far outweigh the performance impact (in this case) and should be the default when such questions arise. Reliability and maintainability first, performance right after. '"
9334,291119687,"b""I didn't notice that this is about encrypted databases.\r\nFor those scenarios, we don't want to keep too much in plain text in memory. We also have to worry about how much memory we can lock. So let's got with 64MB by default for encrypted dbs here."""
9334,292575294,b'I think you missed changing this one'
9334,292575398,b'Here as well'
9334,292575472,b'Here'
9334,292763214,"b""Let's go with `Indexing.Encrypted.TransactionSizeLimitInMb`"""
9334,292765418,b'I think we need to enhance the logic here. Notice that we are doing some adjustments for map-reduce when the value is not null.\r\n\r\nmaybe sth like to simply the code here:\r\n```\r\nvar limit = DocumentDatabase.IsEncrypted \r\n    ? Configuration.EncryptedTransactionSizeLimit ?? Configuration.TransactionSizeLimit \r\n    : Configuration.TransactionSizeLimit;\r\n\r\nif (limit != null && Type.IsMapReduce())\r\n    limit = limit * 0.75;\r\n\r\n_transactionSizeLimit = new Lazy<Size?>(() => limit);\r\n```'
9370,292952333,"b""Isn't this too big?"""
9370,293236635,"b'We have 3 ""regular"" stop conditions to complete the batch and send the data:\r\n- 30 sec duration\r\n- 8192 docs\r\n- 64MB of data\r\n\r\nI believe that most cases 8192 will cause batches to complete. The default I set here - 64MB would be in my opinion mostly applicable if someone plays with attachments so I didn\'t limit it too much. What do you think?\r\n\r\nBTW I\'ll add the info that attachments are also accounted to the configuration description'"
9370,293271663,"b'Okay, that looks good'"
9373,293338377,b'typo: `ThresholdReleaseValue`'
9373,293338640,b'typo: `CreditsAccuredPerSecond`... `CreditsOccuredPerSecond`? `CreditsAquiredPerSecond`? Not sure what you meant.'
9373,293355134,b'Maybe we can add an option to throttle requests then?'
9373,293355531,"b""I mean when 'CpuCreditsExhaustionShouldTriggerFailover' is `false` then having additional option that will throttle the requests and reduce the load?"""
9373,293365553,"b'That would just defer it, no? \r\nWe can drop every Nth request, but that would probably suck'"
9373,293379737,"b""If we slow down the incoming load then we should be able to recover from current state earlier, don't you think? Once we manage to recover from it then slowly decrease the throttling (not immediately)"""
9374,293545836,b'Do we want to create new logger instance per each exception?'
9374,293548397,"b""We saw it once in 4 years, I don't think that this is going to be a hot spot"""
9383,294036687,"b'I think that we need to keep it, but for MacOS?'"
9383,294036739,b'I think we can remove this?'
9383,294036815,"b'Do we want always to attach passively? IIRC it is less accurate, on Windows we could stay with what we had?'"
9383,294056823,b'Yes'
9383,294056827,b'Yes'
9383,294056839,"b""The speed we are seeing in generating stack traces is _huge_, even if it isn't as accurate, that is far more useful"""
9384,294069862,b'This needs to be called separately from the cloud options.\r\nThe local backup can take a few hours and we request temp AWS credentials before it. (it can expire while we create the backup).'
9384,294073935,b'Done'
9388,294082287,"b'Another look here, please'"
9387,294190768,b'Minor - we could use `RavenConfiguration.GetKey(x => .... )` instead of hard coded option names'
9387,294192491,b'Invalid argument - 2nd one should be `route.DisableOnCpuCreditsExhaustion` instead of `route.IsDebugInformationEndpoint`'
9395,294185605,b'I think this should be `settings.RemoteFolderName ?? _database.Name` to maintain backward compatibility'
9395,294200672,b'done'
9398,294280047,"b'```suggestion\r\n                        reason = $""Node in rehabilitation because it run out of CPU credits.{Environment.NewLine}"";\r\n```'"
9399,294284420,b'you have defined `SMB2_MAGIC_NUMBER` but here we are using `SMB2_SUPER_MAGIC` ? Does it compile? Maybe if it does then `SMB2_SUPER_MAGIC` comes from somewhere else?'
9399,294310078,"b'\xf0\x9f\x98\x9e Sorry, PEBKAC. Thanks for finding it.'"
9404,294718420,b'Need to wait for it to finish on server dispose:\r\nhttps://github.com/ravendb/ravendb/blob/0568c39f984877569deead635c74a9b35928e094/src/Raven.Server/ServerWide/ServerStore.cs#L1793'
9405,294934589,"b'This will materialize a lot of LazyStringValues, can we avoid that. I do not see you using that anywhere?'"
9405,294935036,"b'Is this required? If no, then we should remove this to avoid adding this'"
9405,295027178,"b'Yes, this is to be avoided if possible.'"
9405,295027354,"b""I think it is, won't `ConvertEntityToBlittableInternal` throw on null?"""
9405,295139283,b'It is required only for CompareExchange as its value can be null. Renamed the function name to ConvertToBlittableForCompareExchangeIfNeeded.'
9405,295139316,b'done'
9412,295379034,b'You forgot these?'
9412,295380810,"b""Can we move this to the `BatchCommand.Dispose` ? That is called anyway, no?\r\n\r\nOne thing that worries me here, though, is the `SetResult`. IIRC, we are holding the blittable in the session, and they are the same as the one we have here, no?\r\nIf we can `SaveChanges` twice, won't that break?"""
9412,295672642,"b""This PR is meant not for merging, it is more of a note to self what i have modified while playing with the code.\r\nI'm not sure why i can't reply to the comment above, i'll reply here regarding Gen2.\r\nWhat is going on is that memory grows pretty much linearly with the parallel level, on my machine each thread is able to peak 100MB per context. there are about 32 session threads so the 4GB of allocated memory is somewhat expected.\r\nYou're correct regarding the fact that we utilize the unmanaged memory once the session is disposed of the request executor with its context pool is returned to the document store, there is only one request executor in this case but the pool it owns has about 37 contexts in it each with 100MB.\r\nSo the blittable unmanaged memory isn't leaking!\r\nThe thing is we are generating _alot_ of reader objects and the stress on the system might be the cause of them to reach Gen2 but what i can't explain is why they are not all collected when i call GC.Collect, there are the ones held by the context in caches it is expected they won't be released but there seems to be a whole bunch of them without GC roots and they are the results of the save changes and indeed looking at the code they are not been refrenced, not sure why they are not collected every 32 sessions i invoked GC.Collect, i would expect none to survive...\r\nI tested this on a new project, generated a bunch of unsafe object pointing to blobs of unmanaged memory and calling GC collect, one of them seems to always survive but the rest are been cleaned by the GC... I guess it is somehow been pointed by a temp variable on the stack generated by the JIT or something..."""
9412,295673441,"b'One important thing I missed in my scroll above is the fact that we don\'t have low memory notification on the client so the ContextPool is never shrinking even after the ""peak load"" I think that introducing low memory machanizem on the client side even if as an optional thing could help us behave nicer on client machines.'"
9412,295676228,"b""Good questions, \r\nI'm not sure if BatchCommand.Dispose will dispose of the results it seems to dispose of the commands as blittable (in the base class) while here the command is serialized to a C# object so I'm not sure those are the same instances, need to check.\r\nI also wasn't sure about SetResult I ran slow tests and they passed so either we don't have this in our tests or the results are been cloned, either way, we need to test this scenario explicitly.\r\nRegarding save changes twice we could clean the session commands in the first SaveChanges."""
9401,294307787,"b'```suggestion\r\n        [ConfigurationEntry(""Replication.RetryReplicationMaxTimeoutInSec"", ConfigurationEntryScope.ServerWideOrPerDatabase)]\r\n```'"
9401,294307865,b'Same on the prop name'
9401,294622194,b'Maybe just `Replication.RetryMaxTimeoutInSec` since we already know that this is replication'
9414,295861911,"b""Don't we need this when the studio reconnects to the WebSocket?"""
9414,295863883,"b'Tested this manually, seems to work. \r\nBut @ml054 is the higher authority for this :-)'"
9414,295998935,"b""I wonder if it breaks something else. We refresh topology in few cases. \r\n\r\nWhy can't we send valid information via web socket instead of not trusting web socket? \r\n\r\n@karmeli87 Could you test the following case:\r\n1. studio is connected to node A and A is leader\r\n2. kill A \r\n3. run A again\r\n4. I wonder if data will be refreshed. \r\n\r\nOr any other scenario when topology is changed and node is not reachable for a moment (which cases WS to disconnect). """
9414,296472095,"b""ok I talked with @karmeli87 and we don't need to fetch topology using endpoint, because we get current topology as first message after we connect to websocket. Moreover websocket gets information indirectly from leader, where endpoint does not. """
9412,296476529,"b'1. After testing this, save changes twice seems safe.\r\n2. indeed the commands are results are not related as I expected, but we could probably move the dispose of the result into the dispose of the batch command.'"
9424,296479965,"b'```suggestion\r\n            _engine.TopologyChanged += (_, __) => NotifyAboutClusterTopologyAndConnectivityChanges?.Invoke();\r\n```'"
9424,296480299,b'`NotifyAboutClusterTopologyAndConnectivityChanges` is a method'
9423,296482525,"b'this is some merge issue, will be modified anyway soon'"
9421,296495698,b'@grisha-kotler can we create some sort of fail check e.g. a test that will help us to manage those in the future? Currently this is a very easy place to skip when new metadata properties are being added e.g. timeseries.'
9428,296679586,"b""This still gives us a single context with 512MB of memory.\r\nLet's limit this to 64 MB total?"""
9428,296742211,b'64MB total and without capacity limit or 64MB instead of 512 items and still remove large streams?'
9410,295251453,b'Can this ever be negative?'
9410,295260090,"b""How? ..\r\nIt takes `maxMemoryUsage` (which is the containers max mem), decrement container's usage which always less then max usage, and adding zero or above clean mem.\r\nUnless cgroup usage is extremely high (and there's an if condition for this block to prevent that and decide we are inside a container), then no negative number can be produced.. """
9410,295297279,"b'User define a limit that is higher than the mem? \r\nOS weirdness? \r\nEven if negative, would this break stuff?'"
9410,296495395,b'@aviviadi ?'
9410,296761865,b'done'
9415,295932179,"b'This needs line breaks, and the ability for the user to just copy / paste to a terminal.'"
9415,296766061,b'done'
9406,294952948,"b'@ayende is this acceptable? SNMP does not have notion of double, I can return string, but it is hard to create alerts then '"
9406,295028464,b'See here: https://stackoverflow.com/a/2144106/6366\r\nIs this something we can do?'
9406,295306333,"b'Maybe we can use Opaque and encode Float there, looking into that.'"
9406,296850236,"b'Resolved by using OctetString, the conversion can be done easily on the SNMP software side (e.g. in Zabbix you can change expected value type to be numeric (float) and everything will happen automatically)'"
9428,297032943,b'I think that we need to dispose the stream in this case?'
9428,297067884,"b""Disposing a memory stream doesn't release any data, and we don't really care about flags like isOpen being closed"""
9428,297078842,b'Ok'
9432,297074995,"b""those names are misleading. It isn't settings, but flag if user can renew license, right?\r\nI'd suggest name: canRenewLicense, canActivateLicense, etc."""
9432,297075439,"b'names in LicenseConfigurationSettings are misleading, '"
9432,297075711,"b""you don't return this promise, but you await for that in $.when"""
9432,297076029,b'please make sure title works when button is disabled'
9432,297084344,"b'Well - no - it is not representing a can/can\'t flag \r\nThe flags that are responsible for that are in:\r\nhttps://github.com/ravendb/ravendb/blob/726ce180fc0a7f102d63ddab55f048dfb5e942f5/src/Raven.Studio/typescript/common/shell/accessManager.ts#L32\r\n\r\nThese new params represent the content of the settings.json file, \r\nor whatever is set with the env variables, or command line args\r\ni.e.  ""License.CanRenewLicense"": false\r\n'"
9432,297084657,b'same answer as above'
9432,297084830,b'done'
9432,297086957,"b""Added 'return'"""
9432,297087404,"b'I concur with Marcin, I think it would be better to match the configuration properties e.g. CanActivate, CanRenew (rename the property and add a 2nd key), etc'"
9432,297093575,"b'like I wrote: when I see property with name: SomethingCount, I expect number. When I see SomethingList I expect array/list. But when I see SomethingSettings then boolean type is unexpected. '"
9432,297134365,b'Changed the endpoint to use the original `LicenseConfiguration ` class'
9432,297134643,b'renamed to:\r\n```\r\nisActivateLicenseEnabled\r\nisRenewLicenseEnabled\r\nisForceUpdateEnabled\r\n```'
9415,297164519,b'Duplicate line?'
9435,297209614,"b""Old versions will not send anything so you will get 0. What will happen then?\r\nAlso 4.2.0 will not send anything. Actually nodes <= 41010 are not sending anything so I'm not sure if there is a point of having this at the moment? Can be used in future, but not know?"""
9435,297214385,"b'you are correct, at all points :)'"
9435,297237710,b'What is the point of this? Preparing for the future?'
9435,297357334,"b'Yes, correct. In theory we can remove this, but maybe it is better to have this extension point prepared.'"
9437,297351820,b'I think it would be more flexible for the users if we will have `IEnumerable<string>` instead of an array'
9437,297551896,b'done'
9327,288683349,"b""let's make default value for this parameter = true, as forceRevisionCreation should be rare case when calling this function """
9327,288684047,b'can we refactor to:\r\n    \r\nif (this.reportSaveProgress) {\r\n    if (this.forceRevisionCreation) {\r\n       ....\r\n     } else {\r\n        ....\r\n     } \r\n}'
9327,288684225,b'no need to add this extra param - use default'
9327,288685262,"b""I'm not sure I understand this title"""
9327,288685523,"b""do we want to hide or disable revisions tab? What's the logic for other tabs?"""
9327,288685968,"b""why do need partial here? forceCreateRevision doesn't take any arguments."""
9327,288880741,"b'This works well from Studio, but it will be problematic from Client API, because it is not per item, but per whole batch.\r\nIt needs to be either a new command or put command with a flag.'"
9327,288889634,b'done'
9327,288912020,b'done'
9327,288912150,b'done'
9327,288914376,"b""Well, I added this because:\r\n\r\nNow we have the 'Create Revision' Button, which is very visible/noticeable, in the Properties pane. \r\nUn-aware/new users might think this button is the only way to create a revision.\r\nI sort of wanted this title to achieve both the following:\r\n  1. Make them aware that a config option also exists\r\n  2. Clarify & point out the difference between the 2 revision creation options (as the new button also has a tooltip)\r\n\r\nEither way - this title can be always removed if it gets too annoying......\r\n"""
9327,288920950,b'done - removed partial'
9327,288925330,"b""1. Revisions tab is always _visible_, never _hidden_.\r\n2. Revisions tab is _disabled_ upon 'new document' & 'clone'"""
9327,288925530,b'Removed - as discussed'
9327,288954362,"b'If I understand this correctly we want to version only the old document, so this should return `true`, no?'"
9327,288990703,b'Changed this flag to be part of the commandData item'
9327,292974574,"b""It can be removed since this isn't implemented yet."""
9327,292975334,b'```suggestion\r\n            not -> no\r\n```'
9327,292978280,b'done'
9327,292978421,b'done'
9327,293050824,"b'If they are doing the same operation, why throw? Can we just check that the same `ForceRevisionStrategy` is applied and treat is a noop?'"
9327,293050901,b'Same'
9327,293051823,"b""Isn't this code duplicate from `HandleEntityPut`, can we avoid this duplication?"""
9327,293052558,"b'Am I missing something, the comment on `HandleForceRevisionCreation` says that we can force revision on document creation, but here it will throw?'"
9327,293053736,"b'Missing check for `StringBuffer[4]`, need to compare it to `short` value, I think.'"
9327,293073866,"b'I think we need to throw, because we will explicitly inform user how this works. If we will not throw then his intention might be to create N-number of revisions.'"
9327,293073995,b'Can be removed'
9327,293074312,"b""Rename paramter name to 'strategy'"""
9327,293074360,"b""Rename paramter name to 'strategy'"""
9327,293074560,"b""can be private or internal?\r\n\r\nAlso rename to 'IdsForCreatingForcedRevisions'"""
9327,293074627,b'ID -> Id'
9327,293076328,"b""I'm wondering if we need this actually. What we are going to do with this on client-side?"""
9327,293076613,"b""Let's rename this maybe to 'RevisionCreationStrategy'"""
9327,293076821,"b""rename the argument to 'revisionCreationStrategy'"""
9327,293077792,b'Can we change the name? Not sure what would be suitable... `CreateRevisionCommandData` ?'
9327,293077975,b'Maybe just `CreateRevision` ? Thoughts?'
9327,293155319,"b""I don't think we _can_ do anything with it. There is no record of revisions on the session, and no need to track those.\r\nI guess we might want to save the change vector of the revision? But we aren't returning it"""
9327,293156219,"b""I think that this is more likely that he might be trying to register the same thing twice.\r\nOnce he is doing that by id, once with the entity (can happen in complex cases).\r\nThat isn't an _error_, the end result is just the same.\r\nAnd we don't even have a way for him to _check_ that."""
9327,293249987,b'Why do we need None?'
9327,293265975,"b""imho - change to - **ForceRevisionCommandData**\r\nbecause this command is created only when coming from the 'Force Revision' flow\r\nWhat do you think?"""
9327,293266852,b'done'
9327,293267775,b'done'
9327,293268520,b'done'
9327,293269190,b'done'
9327,293274100,b'Done. Renamed and made internal.'
9327,293275142,b'fine'
9327,293276017,"b'Forward compatability, we may have other values there, and `Before` is an action, so we need a neutral value'"
9327,293318365,b'ok - leaving None'
9327,293322983,b'Fixed. Used int & short.'
9327,293335581,b'ok - extracted common part'
9327,293340673,"b'We\'re tracking the document in the session.\r\nWhen the document doesn\'t have the ""HasRevisions"" flag we need to update it and return the new document change vector.'"
9327,293365595,b'Done. Now throwing only if a different strategy is requested in the same session.'
9327,293366266,b'Done. Now throwing only if a different strategy is requested in the same session.'
9327,293379803,b'1. Comment here means: \r\nWe cannot force/create a Revision if the document (for which a Forced Revision was requested) was Not yet saved to the server.\r\n\r\n2. Comment in `HandleForceRevisionCreation` means:\r\nThe original document (for which you request a Forced Revision) may have changed & PUT to the server with this flow:\r\n\r\n* Create document\r\n* Save document to server (document is created without the HasRevisions Flag)\r\n* Request a Forced Revision\r\n   => A forced revision is created\r\n   => Original document is modified and saved - since HasRevisions Flag is added to it \r\n         So for tracked entities - `HandleForceRevisionCreation` must update the changeVector in the session \r\n\r\nI will rephrase so its clearer'
9327,293385387,b'imho - I prefer **ForceRevisionCreation** because this is not a regular revision - \r\nthis command is created from the special flow of forcing a revision - \r\nas opposed to a revision created just because the Revisions Settings are set.'
9327,293387162,"b""or maybe rename the param to just 'strategy' ? """
9327,293388608,"b""But why ? \r\nASFAIK This doesn't apply to 'regular' revisions, only to Forced Revisions\r\n"""
9327,297055778,b'We need to create a 2nd ctor to avoid issues with binary compatibility'
9327,297244992,b'done\r\nhttps://github.com/ravendb/ravendb/pull/9327/commits/a283f2ad28424f4f2bc547234d610be460e7ad19'
9452,298194400,b'We cannot remove those. Need to stay in the same place as they were.'
9452,298194438,b'We cannot remove those. Need to stay in the same place as they were.'
9452,298195162,b'Rename to `name` and `value` and check if name is not null or whitespace'
9452,298195228,b'Rename to name and value and check if name is not null or whitespace'
9452,298195434,b'Can merge those two ctors? By default force update is false?'
9452,298215556,b'done'
9452,298215587,b'done'
9452,298216886,b'done'
9452,298217396,b'done'
9451,298162171,"b'`[Obsolete(""PutConnectionStringResult.ETag is not supported anymore. Will be removed in next major version of the product. Please use PutConnectionStringResult.RaftCommandIndex instead."")]`'"
9451,298162279,"b'`[Obsolete(""RemoveConnectionStringResult.ETag is not supported anymore. Will be removed in next major version of the product. Please use RemoveConnectionStringResult.RaftCommandIndex instead."")]`'"
9451,298207922,b'done'
9451,298207959,b'done'
9453,298805337,"b""This is going to be the most common action, right?\r\nThe problem is that now this method is pretty big, and full of conditional.\r\nLet's move all the checks after this if to a dedicated method."""
9453,298809004,b'Done'
9447,298255003,b'This seems to be really expensive opening a read transaction each time we want to update a change vector.\r\nMaybe we can hold an in-memory list that we will modify in a volatile manner if we need to change it.\r\nThe persistent state will be written and read on startup.'
9447,298824078,"b""Let's check if the values are the same before replacing them.\r\nI'm worried about this getting to Gen2, then being replaced, having the new val in Gen2, etc."""
9447,298824138,"b""If we have a value here, we'll look it up a LOT.\r\nLet's make this into a `HashSet`?"""
9447,298824158,"b'Why are you removing from the list? You are mutating the global `UnusedDatabaseIds` here, no?'"
9447,298824163,b'Use `RemoveAt` ? To avoid scanning through it'
9447,298824187,"b""This doesn't look right.\r\nThis is a cluster wide operation, not a database operation. """
9447,298824963,b'done'
9447,298824967,b'done'
9447,298824973,b'done'
9447,298824995,"b'It is a cluster wide operation, but will affect a single database.\r\n\r\nchanged to `Operator`.\r\n'"
9447,298825873,"b'Maybe we should make it more atomic operation, like adding/removing database ids'"
9447,298826126,"b""We are very unlikely to have to do this very often, I don't think it matters"""
9447,298827802,"b'can be private, but need to put in inside the command'"
9447,298827890,b'What kind of comparer is set here? Does it have to be case insensitive one?'
9447,298827919,"b""Shouldn't this be higher?"""
9447,298827936,"b""DatabaseId will be null in 'old' commands, right?"""
9447,298828013,b'Can we change that to `/admin/databases/unused-ids`? Will match other endpoints here'
9447,298828040,b'change to `name` to match other endpoints'
9447,298828821,"b""Can't be private. It is used also in `JsonDeserializationServer`"""
9447,298828852,"b'it is base64, so it has to be case sensetive'"
9447,298828904,b'done'
9447,298828929,b'done'
9447,298828991,b'right! done'
9447,298829119,b'done'
9447,298830029,"b""Then let's move it inside UpdateUnusedDatabasesCommand  and make it internal"""
9462,299891112,"b""The problem with version 0 is that we can't distinguish between 4.1.x and 4.2.0 :/ """
9462,299892982,"b'Since we cannot distinguish between 4.1 and 4.2.0 we will allow then, but all new 4.1.x builds will be blocked.'"
9460,299615934,"b""This may wait (a *lot*) if the cluster isn't setup.\r\nWe are waiting for this in a sync manner, and it can hold up the server startup, no?"""
9460,299837577,b'Done'
9460,299897819,b'Should be: `BuildInfo?.ToJson()` ?'
9460,299897846,b'Should be: `OsInfo?.ToJson()` ?'
9460,299897961,b'Should be: `CurrentState?.ToJson()` ?'
9460,299898496,b'Should be moved to `ctor` at least. Also do we want that for every `GetNodeInfoCommand` or they should use default timeout and only the one created in licensing should have 15sec?'
9460,299899162,b'Can this be null?'
9460,299899273,b'`new DynamicArray(AllNodes)`'
9460,299899535,b'This needs to be 42_003? @karmeli87 ?'
9460,299905336,b'Implements IDynamicJson'
9460,299905361,b'Implements IDynamicJson'
9460,299905398,b'CurrentState is enum'
9460,299905969,b'done'
9460,299906372,b'No. We pass our own node info'
9460,299907172,b'https://github.com/ravendb/ravendb/blob/v4.2/src/Sparrow/Json/Parsing/ObjectJsonParser.cs#L220'
9460,299907390,b'Already handled :)\r\nhttps://github.com/ravendb/ravendb/blob/v4.2/src/Sparrow/Json/Parsing/ObjectJsonParser.cs#L350'
9460,299907753,"b""UpdateUnusedDatabaseIdsCommand isn't in the stable yet"""
9460,299908921,"b'For backward binary compatibility, since this is in the Client, you need to have empty ctor also'"
9460,299909052,b'Ok'
9460,299909437,"b'Forgot about this, nice'"
9460,299913720,b'Done'
9459,299437188,b'Maybe the overriding is unnecessary? If we want to use just the mssql from the remote VM?'
9459,299438196,"b'I checked it and because of all the SQL database run on the same machine, the requests can take time and lead to timeout exception. I set it to two minutes to be sure it has its time'"
9466,300476027,b'Can a server have _multiple_ old tags?'
9466,300480037,b'You can call `HardResetToNewCluster` multiple times with different tag every time. '
9466,300480620,"b""Wouldn't that put us in the same situation?"""
9466,300482728,"b""Shouldn't, because on every tag update we keep also the old one."""
9466,300482949,b'ok'
9446,298073789,b'`nameof(RetentionPolicy)`'
9446,298075430,b'I would wrap those two in brackets for readability'
9446,298075773,"b""Shouldn't be possible to set this to 0 or less, right? Are we checking that somewhere?"""
9446,298076474,"b""I'm 80% sure we have method like that somewhere. Can we reuse it? Maybe extract to some utils or helper?"""
9446,298076864,"b'Not a big deal, but Math.Max is not needed, because you cannot reach this line when MinimumBackupsToKeep is <= 0'"
9446,298078475,b'it would be safer to use `<=` IMO'
9446,298083035,b'done'
9446,298083943,b'done'
9446,298086106,b'added to BackupUtils'
9446,298086320,b'done. need to verify that we cannot have MinimumBackupsToKeep <= 0'
9446,298086731,b'done'
9446,298169316,b'Added validation of the configuration'
9446,300310334,b'Create a separate issue to support that.'
9446,300310428,b'Create a separate issue to support that.'
9446,300310494,b'Create a separate issue to support that.'
9446,300310585,b'Create a separate issue to support that.'
9446,300311568,"b""This worries me. \r\nWhat happens if we have a folder that has thousands of backups?\r\nWon't this cause us to scan it each and every time?"""
9446,300319343,"b""Won't this (and other) run on incremental backups? \r\n"""
9446,300338297,b'Done'
9446,300338528,b'Done'
9446,300338646,b'Done'
9446,300338817,b'Done'
9446,300344980,"b'Yes. We can optimize this by taking all the files in all the folders in a single call and parse it to folders locally (there are no ""folders"" in S3).'"
9446,300350555,b'Is this optimization critical? I think we can add it later on? (create an issue for that)\r\n\r\n@ayende what do you think?'
9446,300351517,b'Done'
9446,300478458,b'It can wait for a later issue.\r\n\r\n'
9465,300479174,"b'```suggestion\r\n                    $""Can\'t delete secret key for a database ({name}) that is relevant for this node ({NodeTag}), please delete the database before deleting the secret key."");\r\n```'"
9465,300479240,"b'```suggestion\r\n                    throw new InvalidOperationException($""Cannot enable \'DynamicNodesDistribution\' for encrypted database: "" + name);\r\n```'"
9465,300479279,"b'```suggestion\r\n\t\t\t\t\tthrow new InvalidOperationException($""Cannot toggle \'DynamicNodesDistribution\' for encrypted database: "" + name);\r\n```'"
9362,292366911,b'Maybe internal?'
9362,292367259,b'Can we set those via ctor and mark them as readonly?'
9362,292368322,"b""This 'set' is needed?"""
9362,292370137,b'Internal maybe?'
9362,292370294,"b""Let's mark this as readonly and pass via ctor"""
9362,292370593,b'empty?'
9362,292372615,"b""Do we want to add one with 'params' for convenience? The drawback is that it will be hard to extend the method in the future after doing this."""
9362,292377004,b'Do we make any changes to TS or Document CV? Name? Etc?'
9362,292387777,b'should we dispose this after parsing?'
9362,292387834,b'should we dispose this after parsing?'
9362,292412809,b'should be `TimeStamp`. We need to use nameof where possible.'
9362,292418513,"b""Shouldn't we use `TryParseDateTime` ?"""
9362,300433591,b'done'
9362,300433617,b'done'
9362,300433644,b'done'
9362,300433671,b'done'
9362,300433883,b'changed to `IEnumerable<double> values`'
9362,300433949,b'removed'
9434,297387464,"b""You need to construct a new dictionary here, you can't assume that this is a Dictionary"""
9434,297599209,b'done'
9434,299877383,"b""I wonder if we want / have to introduce `_IsDictionary` suffix? What is the benefit?\r\n\r\nI see we're using to set `FieldType.IsDictionary` but I don't see _any_ read usage of it\r\n\r\n"""
9434,299878095,"b""So we're intentionally changing it to `ValueType.ConvertToJson` ?"""
9434,299879229,"b""I really have some doubts if we need to introduce any new concept to LuceneDocumentCoverter? Since we're indexing it same as we did it - `ConvertToJson`"""
9434,299880460,b'Why you need to change it? Would it be a breaking change?'
9434,299889195,"b'Yes, it is the same as it was.\r\nI introduced _ValueType.DynamicDictionary_ just to get the ability to add __IsDictionary_ suffix, I tried to follow the same logic we have with Array (we adding this field there also). Anyway I can easily remove it, if needed '"
9434,299889347,b'followed the same logic as array.'
9434,299895477,"b""I'm think sure we don't need to change anything in `LuceneDocumentConverterBase` because from the Lucene point of view it doesn't matter. We're just storing a dictionary as JSON and that's it - so same behavior as we had.\r\n\r\n@ppekrol thoughts?"""
9434,299902578,"b""I've talked to Pawel. Given that we don't have any requirement to introduce _IsDictionary at this let's drop it."""
9434,300386488,b'this is how we store dicitonary key if it is DateTime '
9434,300388025,"b""Does it mean that if someone has the index definition as in this test (with the usage of `y.Key.ToString(CultureInfo.InvariantCulture)` then his index will stop working after merging this PR? That would be breaking change - that's my concern\r\n"""
9434,300390784,"b'If he has a DateTime dicitonary key then his index doesnt work now, because in document we store it using GetDefaultRavenFormat\r\nand in dictionary we store it just as ToString\r\nhttps://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/Utils/TypeConverter.cs#L243'"
9434,300397014,"b""Okay, I see this test was added by you in your previous PR related to the same issue (https://github.com/ravendb/ravendb/pull/9351/files#diff-2fb714770e61aff7a2f4afd3c71eb209R225)\r\n\r\nThat's fine then. Just wanted to double check that."""
9434,300465469,b'done'
9434,300558758,"b'""done""? - did you forget to push? :)'"
9444,297680954,b'Debug code?'
9444,297681029,b'same here'
9444,298021817,b'Fixed'
9444,298021832,b'Fixed'
9444,298027874,b'rename property to `Settings`'
9444,298028447,"b'adding an argument (even nullable) breaks binary compatibility. Also it would be better just to have `RestoreBackupConfigurationBase` here, then you will not need to have multiple ctors. RestoreBackupConfigurationBase should have an abstract method `ToJson` and property `Type`'"
9444,298028597,"b'When `RestoreBackupConfigurationBase` will have a `Type` property you do not need this. You can just send JSON, which will be more convenient'"
9444,298028700,b'This kind of formatting should be avoided.'
9444,298052081,b'Formatting'
9444,298052776,b'Formatting'
9444,298052807,b'Formatting'
9444,298052872,b'Formatting'
9444,298053039,b'Debug code?'
9444,298053068,b'Debug code?'
9444,298053552,b'Is there a JSON endpoint available?'
9444,298054502,"b'InvalidOperationException would be better, BadRequest is more related to HTTP'"
9444,298055571,b'We already know that from previous `if` statement'
9444,298055933,b'I think this is the 3rd time we are checking that. Can we move that earlier and use the `_hasEncryptionKey` ?'
9444,298074347,"b""We need to send the type anyway.\r\nThe endpoint admin/restore/database needs to be backward compatible (it's local by default)"""
9444,298079216,"b""No 'Type' in Json -> Local"""
9444,298819998,b'No. Only XML.\r\nhttps://docs.aws.amazon.com/AmazonS3/latest/dev/ListingObjectKeysUsingREST.html'
9444,298827545,b'Fixed'
9444,298835002,b'Fixed.'
9444,298835006,b'Fixed.'
9444,299052040,b'Fixed'
9444,299053531,b'Fixed'
9444,299065779,b'Yes. moved up and removed duplicate.'
9444,300265068,b'check if we need to escape prefix? '
9444,300266726,b'can we find better place for this method? handling backup connection type in abstract request handler is IMHO not right place (to board)'
9444,300267146,"b""I wonder if we should comment this out, as we won't support listing in s3 buckets for now, as we only support cloud? """
9444,300310798,b'Please remove this'
9444,300321828,b'Removed'
9444,300621699,"b'Does not matter, I will add escape prefix just for safety.'"
9444,300629519,"b'Fixed, moved to inside the controllers.'"
9444,300630439,b'@grisha-kotler '
9444,300632884,b'ok but please check if it still works after you escape. '
9413,296730559,"b""The name here is now confusing since it is now 'Trigger' some actions and not just delete documents"""
9413,296731179,"b""i'm not sure if this behavior is right if we are running on '@refresh' and get a conflict shouldn't we do a Put here rather than a delete?"""
9413,297035128,b'+1'
9413,297051461,"b""I'm wondering if this should not run e.g. on last node. We are performing a lot of operations on first already, e.g. client API is connecting to first by default. \r\n\r\nAlso I'm wondering if we should not check only Members?"""
9413,298827473,"b""I'm using the first one intentionally, that is the one that we are likely to already be writing for, so the chance of creating a conflict with user writes is even lower.\r\nAnd we need to take into account that we don't _have_ members, that all have a rehab, so we'll use that."""
9413,298827514,"b""This can only happen if all the conflicts have expired, so we can auto resolve by delete.\r\nCan't happen if there isn't such a scenario, so I don't think there is a problem here?"""
9413,301031696,b'`HasExpired` ?'
9413,301061443,"b'It applies to the refresh feature here, right?'"
9413,301075956,"b'This checks the specified metadata property and check if it passed, yes.'"
9413,301080524,"b""Then maybe rename to `HasPassed`? So it won't look it's specific for expiration feature"""
9475,301014820,b'Missing space after `Arch:` and `OSDesc:`. Do we really need that? It produces longer exception method and the assumption here is what? That the user does not know what OS he is running on? Same info is available in welcome message.'
9475,301015131,b'I would suggest to remove it so the message would be more clear.'
9475,301015471,b'Should be `current platform (${platformStr}).`'
9475,301015864,b'Same comments as in Pal.'
9475,301015954,b'Same comments as in Pal.'
9475,302016002,"b""This is for us so if we get this message from a client we don't need to do a ping pong with the client for this information"""
9475,302021583,b'So it should be at the end of the message. It hides the main part.'
9475,302022036,b'O.k.'
9492,302485548,b'rename to `duration`'
9492,302485655,b'rename parameter to `duration`'
9492,302486271,b'rename to `duration` and call this method from the other `EnsureIsAcceptable'
9492,302486538,"b'Maybe change to `internal` and make `duration` nullable? Then from the other `EnsureIsAcceptableAndSaveResult` call this method, but pass `null` for duration'"
9492,302496751,b'done\r\n'
9492,302503963,b'done'
9486,302324526,"b'I wonder if it would be better to just drop the js index caching altogether, if we are having such a hard time finding that leak.'"
9486,302327215,b'Nice'
9486,302328704,"b""Is this call critical here, or is it just a precaution? You did add it to the dispose as well. There are some cases (mostly tests, but also recovery) when we receive the options, and then temporarily change the OwnsPagers just to prevent disposal, but we always clear the option's events, so I'm not sure if something could get wrong then. \r\nAlso, would you recommend a code reactoring task that will see ways to remove the OwnsPagers mechanism, I think it's more confusing the helping right now/"""
9486,302336797,"b'Theoretically RegisterForDisposal, could have been yet another parameter in the function, but they just pile up, so I do like the refactoring of the way we pass those params, it ends up being more readable for the test reader.'"
9486,302465693,"b""This isn't required. We use this on small methods that we need to be high perfomant. \r\nThe first is true, but the second isn't."""
9486,302483071,"b'IndexCache is static, what if I will have 2 identical indexes e.g. in two separate databases with sample data?'"
9486,302486381,b'https://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/Documents/Indexes/Static/IndexCompilationCache.cs#L33'
9486,302486789,b'does it hurt us though?'
9486,302487308,"b""Ok, didn't know that"""
9486,302488852,b'The cache is used for reusing the same instance of an index and this is why it is in the cache other than that the index is unique since it has a state unlike the c# ones'
9486,302490473,"b""To be honest I find this confusing as well. I haven't dug too deep into this just saw that those handlers are holding quite a bunch of resources with them and also notice we didn't dispose of the options even though they are disposables.\r\nWhen and if you should dispose of them is unclear to me but for sure unregistering handlers is required otherwise you might be running handlers of a disposed of ENV in a context of a new ENV"""
9486,302517734,"b'Yes, because it gives the wrong impression.\r\nBasically, the rule is that unless you have looked at the ASM / have benchmark that show it, avoid it.'"
9486,302517893,b'Can we move this from static to the database level?'
9486,302518257,"b'@maximburyak we are just interested in the pagers, not he handlers. The handlers are always to the storage env, so that is going to be invalid anyway'"
9486,302529110,"b""no we can't and refactoring how indexing is cached is out of the scope of this PR lets focus on memory leaks and not further expend this PR"""
9486,302546412,b'I just created one: https://issues.hibernatingrhinos.com/issue/RavenDB-13819 separating the work will allow us to divide and conquer.'
9367,292759327,b'Should be `Distance`'
9367,292760444,b'where are we setting this now?'
9367,292760469,b'where are we setting this now?'
9367,292760481,b'where are we setting this now?'
9367,292760569,b'where are we setting this now?'
9367,292760805,b'where are we setting this now?'
9367,292761031,b'where are we setting this now?'
9367,292762024,b'is this valid?'
9367,292762374,"b'BTW, the comparator has a spatial field with option where you have access to units. Maybe we can take leverage from that?'"
9367,292773770,b'FinishDocumentSetup'
9367,292773797,b'FinishDocumentSetup'
9367,292773821,b'FinishDocumentSetup'
9367,292773839,b'FinishDocumentSetup'
9367,292773853,b'FinishDocumentSetup'
9367,292773861,b'FinishDocumentSetup'
9367,292773969,"b""No, it isn't. This was meant just to get me working on _something_ so we'll have a result."""
9367,292777855,b'There is no usage of this method?'
9367,293244301,"b'I think we need to return either WktField or PointField, so probably generic would have to be used'"
9367,293244500,"b""We shouldn't remove this probably?"""
9367,293244744,b'can we add `inheritdoc` ?'
9367,293246883,b'What if `TryGetValue` returns `false`? Is it fine to ignore it?'
9367,293247823,b'Not needed?'
9367,293248837,"b""It returns value in miles, right? Let's rename the method to `HaverstineDistanceInMiles` to be explicit about that"""
9367,293250386,b'What is `60 * 1.1515` ?'
9367,293254174,"b""Based on the above call of this method I assume it should return value in miles? Doesn't it mean we need to convert the longitude and latitude differences calculated here into miles?"""
9367,293271291,"b""Yes, we'll return `0` then"""
9367,293274076,b'But `null` is probably better'
9367,293274577,"b'This is for Cartesian, so no fixed measurement, whatever that values says it is.\r\nThis is useful for spatial on flat locations (such as places in warehouse), no sense is miles/km, the unit is whatever the user say it is\r\n'"
9367,293274772,"b""No, we can return this safely, we don't care what the actual type is.\r\nThere is a virtual method to handle this"""
9367,293275155,"b""And wrong, it is fine to have two fields that match but don't have the same spatial info"""
9367,293277898,"b""My comment didn't make sense. I just noticed we do this:\r\nhttps://github.com/ravendb/ravendb/pull/9367/files#diff-e5a57e10a19c3b4fc6617d363b0188a1R154\r\n\r\nonly for Haverstine distance, not for Cartesian.\r\nhttps://github.com/ravendb/ravendb/pull/9367/files#diff-e5a57e10a19c3b4fc6617d363b0188a1R150"""
9367,293278564,"b""Right. Same as commented above:\r\n\r\nMy comment didn't make sense. I just noticed we do this:\r\nhttps://github.com/ravendb/ravendb/pull/9367/files#diff-e5a57e10a19c3b4fc6617d363b0188a1R154\r\n\r\nonly for Haverstine distance, not for Cartesian.\r\nhttps://github.com/ravendb/ravendb/pull/9367/files#diff-e5a57e10a19c3b4fc6617d363b0188a1R150"""
9367,293285222,"b'You were correct at the time, I changed that based on your comment'"
9367,293306230,b'maybe just `@spatial` to make it simpler and shorter?'
9367,293307163,b'what if we want KM?'
9367,293310186,"b'I do not think this is the case in this flow? But I see inconsistency here, because for projection we were setting 0 and `null` otherwise. I think it should be set to 1 regardless if this is projection or not.'"
9367,293311669,"b'I do not think this is the case in this flow? But I see inconsistency here, because for projection we were setting 0 and `null` otherwise. I think it should be set to 1 regardless if this is projection or not.'"
9367,293312215,b'I think we should set 1 here?'
9367,293312778,b'I do not think this is the case here?'
9367,293315910,b'I do not think this is the case here?'
9367,293315932,b'I do not think this is the case here?'
9367,293334502,"b""That isn't how it works for cartesian, that is arbitrary system\r\n"""
9501,303298799,b'How does this generate this error?'
9501,303313483,"b""It doesn't it's an old test Michael wrote now it throws SO"""
9501,303376298,b'@ayende I think that this issue is related to an old issue that we had: https://github.com/dotnet/coreclr/issues/14672'
9501,303379061,"b""Yes, we wrote this test to make sure that we're correctly handling `InvalidProgramException` during indexing. Once https://github.com/dotnet/coreclr/issues/14672 got fixed we adjusted the test. See the following commit:\r\n\r\nhttps://github.com/ravendb/ravendb/commit/de998b8b9d36b181dfc95f69b4733c3074a4bb23#diff-452a08ab6d945d7e51d8683da35507b3\r\n\r\nNote that Pawel changed `[Fact64Bit]` to `[Fact]`. That's why we never saw any failures on 32bits before probably.\r\n\r\nInvestigation is reported in: https://issues.hibernatingrhinos.com/issue/RavenDB-13830"""
9508,303642626,"b""I think that for completeness it's better to add asserts for the rest of the array indexes (2-4) for this case and all others in this PR"""
9494,303400133,b'Usage of the property should probably be thread safe'
9494,303412356,b'Is it possible we may leak processes here?'
9494,303472575,"b""In places like this, please make sure we kill the process in the end of the test that uses it. I know it's a broader issue, but It will prevent long debug sessions looking for reasons to tests slowdown etc."""
9494,303775397,b'We kill them on test disposal.'
9494,303775430,b'done'
9494,303775611,"b""Those are skipped, haven't addressed them at all."""
9508,303821974,b'array indexes (2-4) return wrong information:\r\nhttps://issues.hibernatingrhinos.com/issue/RavenDB-13838'
9508,303829241,b'@maximburyak Nice!'
9507,303636317,"b'If the thread is blocked here, you still got the race :-)'"
9507,303875255,b'done'
9494,303919875,b'@karmeli87 you are correct'
9494,303919984,b'@karmeli87 right'
9512,304053245,"b""Let's avoid using `static` here, I want to be able to run this concurrently on two Rachis instances without issue.\r\nWe don't need multi threading support, since we can assume that this is in a write transaction.\r\nLet's accept the transaction as a parameter here and check that we have a write transaction to avoid future issues."""
9512,304053465,b'No need for compare exchange here'
9512,304053514,b'No need for a while here.'
9510,303914541,b'You dropped `try .. finally` and effectively `_nextRangeTask` is no longer set to `null` on exception'
9510,303929011,b'done'
9510,304262017,"b""How do you assure that we'll replace it? If someone replace `_nextRangeTask` meanwhile (possible, right?)  then below condition `if (nextTask == current)` will be false an we'll throw on:\r\n\r\n```\r\n// failed to replace, let's wait on the previous task\r\n                await nextTask.Value.ConfigureAwait(false);\r\n```"""
9510,304264385,"b'Good point, so we need to only throw an error higher IFF our own created task failed'"
9510,304264515,"b""This should be wrapped in try/catch and ignored.\r\nSomeone else failed, but we'll retry until our own task failed"""
9510,304297703,b'done'
9517,304449750,"b""Shouldn't the `WaitFor` already throw that?"""
9517,304473381,"b""It doesn't I have checked we will get stuck in an infinite loop"""
9517,304506700,"b'We also need to update the `WaitFor`, then.'"
9517,304516168,"b'I think it would change its current behavior and it is risky, no? '"
9517,304796941,"b'I expected that to fail, and not hang, if the cancellation token is cancelled.'"
9517,304807482,"b'what is hanging is the expired document cleaner logic, not the timing manager.\r\nBut if you pass a default cancelation token to the timing manager it will hang so it is a problem with the usage, not the underlining logic.\r\n@maximburyak will open an issue to review usages '"
9517,304824625,"b""We'll address that in a different issue: https://issues.hibernatingrhinos.com/issue/RavenDB-13849"""
9511,304060005,b'Why this change?'
9511,304060551,b'What changed the TX size? We need to fix the test / figure out why it changed'
9511,304218098,"b""hard to track what caused it, @maximburyak and I decided to finish fixing the rest of the tests and try to figure this one on a later PR since it was taking too long and I couldn't track what caused it.\r\nI know for sure this test was passing when I wrote it.\r\nnow the largest Tx is 334kb..."""
9511,304242288,"b""It is likely the limitations I have put on the merger that are limiting the indexing transactions. I'll open a separate issue to investigate this but for the short term let's get the tests green again. """
9511,304242292,"b""It is likely the limitations I have put on the merger that are limiting the indexing transactions. I'll open a separate issue to investigate this but for the short term let's get the tests green again. """
9511,304869973,b'That was resolved in the commit below'
9511,304926889,b'Nice'
9511,304927738,"b""I'm not sure about the consequences of not waiting through here, and we do a similar unbounded wait few line above, although I agree that unbounded waits in dispose function is a bad practice in general.\r\n```suggestion\r\n            ea.Execute(() => ConflictResolver?.ResolveConflictsTask.Wait());\r\n```\r\n"""
9511,304928727,"b'Right, because we started limiting the batch size in subscriptions'"
9519,305458858,b'Need to revert this'
9519,305468598,b'This is draft and I want it to run on 32 bits (64 is by default)'
9528,305687674,b'Do we do the same when we are using non collection runner?'
9525,305756510,"b""Let's add logging here"""
9525,305763970,b'done'
9502,303322526,"b""We are in low memory already, and you are allocating additional string.\r\nLet's create this once"""
9502,303380773,"b""I don't see any usage of this method (overload with 3 parameters). Do we need it?"""
9502,303382993,b'This looks a bit fishy to me. Can you please verify that we do not leak _environment here?'
9502,303399708,"b""You haven't changed much. You are still allocating _when you are in OOM condition_"""
9502,303399956,"b""I don't like this much.\r\nThe problem is that this is never cleaned, and may end up being a problem area all on its own."""
9502,303638661,"b""on the other hand, the for no InMemory databases, .ToString() eventually return a reference to the config path value, that is already materialized, so I don't think it's a big issue here.\r\nBut maybe we should return to using the Environment, but use a ConditionalTable instead of ConcurrentDictionary"""
9502,303761514,"b'I think that this is a much better option, yes.'"
9502,304911441,"b""In continuation to a conversation with @haludi, created this issue: https://issues.hibernatingrhinos.com/issue/RavenDB-13851 for now, we inherit this code from previous state, so I'm fine with it."""
9502,304920192,b'I think that we should also test that the environment is removed from the OutOfMemory collection by forcing GC'
9502,305745276,b'@haludi ?'
9527,305625523,"b""This wouldn't work, you are taking only one result from `var files = await _client.ListObjects(folder, null, false, 1);`\r\nNeed to check in the S3 docs, but maybe we can set the as prefix the last retention date and if we get a result we _can't_ delete this folder."""
9527,305687834,"b""Let's avoid calling & ordering this twice."""
9527,305687951,"b'This can be null, no?'"
9527,305775644,b'done'
9527,305777084,"b'if there is only file (no incremental) then first will be equal to last, but I will add check for backupFiles.LastFile == null just to be on the safe side'"
9527,305810277,b'done'
9527,306702441,"b""This is visible to the user, no? In this case, let's make this more user friendly message"""
9527,306728712,b'done'
9547,307668778,b'Why do we need that?'
9547,307679231,"b""`TransactionMarkerOffset` is to distinguish between transactions when they get merged by the tx merger.\r\nIncoming replication can have a batch that contains several transactions, and we need to distinguish between them as well.\r\n\r\nThe fix here is in case this command is part of merged tx, we don't want to override the existing `TransactionMarkerOffset`."""
9544,307160067,b'No sue if I follow - why is it `null`?'
9544,307287399,"b""It should be null, because we called session.clear, so we didn't send the not materialized fields back to the server"""
9544,307288372,"b""It's a not direct method to test the cleanup behavior.."""
9544,307315017,"b'but we called `session.Store(person, ""users/2"");` and `session.Clear` clears a state of UoW, not properties of entities - am I missing something?'"
9544,307986439,"b""`User` vs `Person`, I think.\r\n`Person` doesn't have `LastName` ?"""
9544,307998173,"b""That's right @ayende , so after clear, we should not send this value to the server. And if we do, that's an indication we didn't clear this removed fields data"""
9544,307998470,b'Can you use types that are defined in the test? It is _very_ hard to figure out inline'
9544,308098793,"b""Yeah, I haven't noticed this - `User` vs `Person`"""
9549,307327999,b'need to dispose it.'
9549,307329020,b'can we pass `DatabaseTopology` and `DeletionInProgress` as arguments instead?'
9549,307329254,b'`using`'
9549,307329902,b'`using`'
9549,307330054,b'`using`'
9549,307331193,"b""You will get an access violation...\r\nYou can't dispose the context that holds this `BlittableJsonReaderObject`.\r\n"""
9549,307332172,"b""You can't dispose the context that holds the `BlittableJsonReaderObject`"""
9549,307332550,b'What is the different between this and `ReadRawDatabaseRecord`?'
9549,307332818,b'`using`'
9549,307332906,b'`using`'
9549,307333728,"b'Saw this in few places, better to have a dedicate function.'"
9549,307333993,b'`using`'
9549,307334155,b'`using`'
9549,307334388,b'`using`'
9549,307334462,b'`using`'
9549,307335062,b'`using`'
9549,307335430,b'`using`'
9549,307335610,b'`using`'
9549,307336257,b'use `DatabaseExists` method.'
9549,307336353,b'`using`'
9549,307336952,b'`using`'
9549,307337256,"b'saw in few places, have a dedicated method of this.'"
9549,307337833,b'`using`'
9549,307338108,"b""let's have a dedicate method for this as well."""
9549,307338385,b'`using`'
9549,307339193,b'`using`'
9549,307339509,b'`using`'
9549,307341481,b'using'
9549,307342701,b'`using`'
9549,307343069,b'`using`'
9549,307343182,b'dedicated method'
9549,307343265,b'`using`'
9549,307343369,b'dedicated method'
9549,307343591,b'`using`'
9549,307344331,b'`using`'
9549,307344731,b'`using`'
9549,307345434,b'use `DatabaseExists`'
9549,307346582,b'`using`'
9549,307347700,"b""let's have a method for this as well."""
9549,308757677,b'need a method for this?'
9549,308764899,"b'Holding the read tx for a long time is a bad idea, since we will keep the journals/scartch/temp files of it and any write tx will allocate more and files until this tx will be disposed.'"
9549,308765790,b'you can close the tx after this.'
9549,309090195,b'`ReadRawDatabaseRecord` should just return `null`. Disposing `null` is a no-op and will not throw.'
9549,309090704,b'you might read twice `IsEncrypted`. Move it into variable.'
9549,309120005,b'done'
9549,309121896,b'd o n e'
9549,309123858,b'done'
9549,309127953,b'done'
9549,309128252,b'd o n e'
9566,309400701,"b""Why have this?\r\nNote that in some cases, we might have these things come and go dynamically.\r\nI'm also concerned about `MountPoints` being a static `List<T>`, which can cause concurrency issues"""
9566,309400892,b'what happens if there is a concurrent read of this at the same time?\r\n'
9566,309400990,"b'At a minimum, you need to replace the whole object in one go'"
9566,309584664,b'Code refactored - See the second commit'
9566,309584620,b'Code refactored - See the second commit'
9568,310008175,b'This needs to be inside Populate'
9568,310008537,"b""What should happen if I have a patch like\r\n`this.Address.City = 'abc'`\r\n? \r\n\r\nThe `Address` will be a new instance or old? What behavior do we want? Only the root entity instance cannot be changed?"""
9568,310008561,b'private'
9568,310353481,b'Agreed.'
9568,310353492,"b'It will create a new instance, yes.\r\nThe root instance is the only one we care about here, yes.\r\n'"
9568,310353502,b'What is the reasoning here? This is inside a test class.'
9568,310354824,b'Good practice. E.g. to avoid using it from different tests (happens often). Tests should be isolated and use only their own types or common ones defined elsewhere if possible.'
9568,310380662,b'done'
9568,310380691,b'done'
9557,308071136,"b""I don't think it matters, to be frank. Either way is very long"""
9557,308071259,"b""You are removing just one here, what if we have a lot of them? Should't we put this in a while?"""
9557,308071394,"b""shouldn't we also set it to null?"""
9557,308112972,"b""Yeah, I didn't want to add a new configuration here, so I decided to have a small preemptive move"""
9557,310494730,b'done'
9557,310495174,"b""IMO, clear is enough here, we don't want to expose ourselves to potential NREs"""
9570,310663648,b'what is this for?'
9570,310664385,"b'I would rather make this into an instance, that has two static properties `Normal` and `Lightweight`'"
9570,310664557,b'So: `LuceneQueryHelper.Lightwegiht.Term(...)`'
9562,310681524,b'Why do we need this now?'
9562,310682158,b'Is this cached? Can you get a smaller value from a previous call?'
9562,310682567,"b""I don't understand the `TODO`?"""
9562,310922649,"b'We are reading the `Type` from the stream, so basically we need those for backward compatibility. '"
9562,310924842,"b""No it isn't. for now we create a new instance every time.\r\n"""
9562,310926469,b'`Slice.From` will allocate and copy the value of `revisionTombstone.Id`. This is not required here because we (the current context) already own `revisionTombstone.Id`.\r\n\r\nThis is used only to convert from `LazyStringValue` to `Slice`. \r\n\r\n'
9576,311007514,b'We need to go over the other functions we have for JS usage elsewhere and see what else we need here.'
9576,311009992,b'There is a issue [RavenDB-13732](https://issues.hibernatingrhinos.com/issue/RavenDB-13732)\r\nTo add more functionality\r\nI added id() and getMetadata() as got requested on google groups.'
9573,311119392,"b""I don't like this. You missed `_lastName`"""
9573,311119900,b'this will now only kill a single one? Why would this code cause a hang?'
9573,311213403,"b""In addition to _lastName, is there anything else you want to be changed? Becuase this change _must_ happen, without it we have Thread objects leak.\r\nAlso, keep in mind that most probably this object won't be accessible if Thread is dead, because it also won't be in the ThreadLocal hodling it."""
9573,311213690,"b'@ayende we are trying to kill useless SubscriptionConnection objects, not ""recent connections"".  and recent connections list is limited to 10 anyway. In case of real low memory, a more through cleanup will be performed.\r\nThis code _caused_ a hang because recentConnection was never replaced and it didn\'t try to  remove items from the recent connections list.\r\nThe point in this cleanup is to make sure there are no unused subscription objects in the SubscriptionStorage.'"
9580,311576201,b'I think it would be better to have a dedicated exception that is caught in `StartBackupTaskAndRescheduleIfNeeded` and handled correctly e.g. we might not want to schedule new backup in 1min after having this'
9580,311910693,b'Done'
9580,311930501,"b""@ayende shouldn't we have this a configurable, different machine might need different TimeSpan to regain CpuCredit."""
9580,311933136,"b""It's a good suggestion, yes"""
9580,311940598,"b'Done, please review'"
9582,312003684,"b""I think it won't work in case of T as `dynamic`"""
9582,312004221,b'can you give an example?'
9585,312020353,b'Not sure if this is best name of the endpoint. Thoughts?'
9585,312020625,b'Do we want to expose this in different format? E.g. in seconds only (separate property)? Note that monitoring should be done via SNMP anyway IMO.'
9586,312348419,"b'I think that continuation few lines below will be done on a wrong task, so context will be disposed too early. Ping me when available, we have similar places to this in other parts of the system. I want to understand what is the cause and if it should be treat globally or not.'"
9586,312727344,b'Pretty sure that `Task.Run(Func<Task>)` will return a task that only completes when the inner task task'
9586,312800381,"b'Ok, but it does suggest that AddOperation should do that internally for all executions of that method. Not only here? There are 20 usages of this.'"
9586,312801203,"b""I've moved `Task.Run` inside the `AddOperation`. Waiting for CI."""
9591,312986947,"b""@ayende Shouldn't this be + ?"""
9591,313005526,b'Yes'
9588,312859946,b'typo:\r\n- invokation  -> invocation \r\n- Cpu -> CPU'
9588,312860094,b'Why not in Minutes?\r\n\r\nBetter to write in description then 1800 seconds to avoid unit change'
9588,312860141,b'SyncIntervalInSec'
9588,312860243,b'typo:\r\n- Cpu -> CPU'
9588,312860546,b'Do we have to check arguments?'
9588,312860622,b'typo:\r\n- Cpu -> CPU'
9588,312860947,"b'Here you are checking string is null or empty, few lines up only for null. Can we check null or empty in both places?'"
9588,312861081,b'typo:\r\n- Cpu -> CPU'
9588,312865602,b'Because in the code it is used as seconds. Do you prefer I use minutes here... and in the code do a conversion?'
9588,312867308,"b'Oh ok... I got what you mean now. You prefer that in the text I\'ll write ""Default: 1800 seconds""\r\n'"
9588,312919194,b'Is it mandatory now?'
9588,312919513,b'Why create it instead of clearing it?'
9588,312919710,"b'Use `Stopwatch` and check for time, rather than assume that the `Delay` would be seconds'"
9588,312919937,b'will this kill the server?'
9588,312920112,"b""This is a lot of duplicated code.\r\nWe know that we want to change this already, so let's centralized process execution"""
9588,312925694,b'I think it should be mandatory if you supply other CPU credits configurations.'
9588,312927017,"b""I assumed since this is all heuristic-based, it doesn't matter if it's going to be 30 minutes or 32 minutes... Does the accuracy matter here?"""
9588,312928416,"b'so it should throw, not log'"
9588,312928812,b'Will open an issue for that'
9588,312930260,"b""I don't like it because it isn't clear what you are doing.\r\nThe accuracy doesn't matter, but to understand the code you have to jump around a bit, and it is better if we said what we meant, rather than inferred it."""
9588,312959527,"b'Yes, I fixed it to be inside a try-catch with logging.'"
9588,312959678,b'ok'
9588,312960042,b'yes'
9588,313371407,b'do this maybe in `finally` so if something goes wrong this will be reset and we will not execute checks too often?'
9588,313372037,"b""Let's change this to Minutes"""
9588,313372219,b'use TimeSpan comparison'
9588,313380535,"b""Why? I don't like the compare functions where you have an integer result. \r\nUsing the >= operator does the exact same thing: https://referencesource.microsoft.com/#mscorlib/system/timespan.cs,164"""
9588,313382620,"b""If it's in the finally we'll always restart it and not get a chance to reach 30 minutes.\r\n\r\nInstead, I'm changing the order of execution so that restart will always come before the attempt to get credits so that if we have a failure the stopwatch will still be restarted. \r\n"""
9592,313608291,"b'Not sure why those are needed here. Even if they are, then I suggest creating a class `ServerWideBackupConfigurationForStudio` (in server project - probably in handler) that inherits from `ServerWideBackupConfiguration` and add it there'"
9592,313608495,b'rename to `AdminServerWideBackupHandler`'
9592,313610170,b'typo: serve -> server'
9592,313611351,b'Can you have more than one?'
9592,313611618,b'Use `FirstOrDefault` so you will avoid doing `Count()` then `ToList()[0]`'
9592,313611755,"b'If yes, then we need to switch all of them, but it should be unique IIRC?'"
9592,313611852,"b'OK is the default, you do not need to set this.'"
9592,313612132,b'does not need to be virtual'
9592,313614414,"b'Create a static method that will take path, requestTimeoutInMs and getNodesInfo as a list of arguments and will perform the operation. Use that in both places so we will not have desync in the future between those two endpoints.'"
9592,313718233,b'no need for constuctor'
9592,313718404,b'no need '
9592,313719009,b'why do we have this discrepancy? '
9592,313719473,b'can we be consistent with server?'
9592,313721977,b'Please format else correctly: \r\n} else {'
9592,313722182,b'no need to $.when here - you have single task to await. '
9592,313779827,"b""1. Yes - there is just '**one**' - I will refactor this.\r\n2. But, actually, we need to add server code that prevents creating a **new** task with an existing task name - as it is currently Not handled and new task with an existing name overrides the existing task"""
9592,313780709,b'OK removed'
9592,313786197,b'done'
9592,313796028,b'done'
9592,313796577,b'done'
9592,313797015,b'done'
9592,313810845,b'done'
9592,313819944,b'done'
9592,313848103,b'done'
9592,313848218,b'done'
9592,313849253,b'I cannot change this prefix on the server side - too late for that - \r\nso I can only manipulate the way it looks in the UI'
9592,313879074,b'done'
9592,313881022,b'done'
9592,313897743,"b'As discussed:\r\n1. Ongoing-tasks-list-view will show: `SERVER WIDE BACKUP, <TASK NAME> `\r\n2. Server-Wide-backups-list-view will show just:  `<TASK NAME>`'"
9614,316079787,b'Could have `in Key key`here'
9614,316080112,b'Could have `in Key name` here as well'
9614,316083469,"b""As you anyway have custom build of Jint, there's also possibility to make StringDictionarySlim public and use it. It's basically the [tuned version of Dictionary](https://github.com/dotnet/corefxlab/blob/master/src/Microsoft.Experimental.Collections/Microsoft/Collections/Extensions/DictionarySlim.cs) ([some history here](https://github.com/dotnet/corefxlab/pull/2458))."""
9614,316095656,"b""Or maybe it is better to include 'Microsoft.Experimental.Collections' and use `DictionarySlim<TK, TV>` instead of Jint's string version. What are benefits of `StringDictionarySlim<T>` vs `DictionarySlim<string, T>` or `DictionarySlim<Jint.Key, T>` ?\r\n\r\nLast one seems like the most reasonable option, because we would have an opportunity to take leverage from `Key`. Thoughts?"""
9614,316096668,b'Probably the most convenient path is to use the MS Experimental. Jint version just skips GetHashCode etc and accesses the struct field directly.'
9598,314989399,"b'Yes, we can. We can create a dictionary to hold that and add to it, would be much faster'"
9598,314989420,"b'Remember that in 99% of cases, this is going to be a single one'"
9598,314989434,b'You are iterating the iterator again here'
9598,315108756,b'So would make a sense to have a different code path for each case to avoid allocations?'
9598,315123646,b'I think so'
9598,316150953,"b""This can be removed, no? It's always null"""
9598,316151555,"b'For perf, we probably want to do this without the lambda.'"
9598,316151938,"b""I don't really like this approach, can we accept `AppendTimeSeriesOperation` directly and convert internally?"""
9598,316152160,"b'`appendDictionary` is always null, can be removed.'"
9598,316152365,"b'Add this in the `if` statement, instead'"
9609,315850782,"b'You can use: ""with: cloudCredentials"" in the parent div'"
9609,315850840,b'Same here'
9609,315851346,"b'Can this be like in the about page?\r\n""in 17 minutes"" (tooltip: the local date)'"
9609,315891073,"b""Remove 'Aws' user will know that from 'Backup Storage Type', right?"""
9609,316052993,b'done'
9609,316053071,b'done'
9609,316065206,"b""Removed 'Aws'"""
9615,316222247,"b'Maybe it is overkill, but does it have to be more thread-safe?\r\n\r\n```\r\nvar newClient = GetHttpClient();\r\nvar lastKnownClient = Interlocked.CompareExchange(ref _httpClient, newClient , httpClient );\r\nif(  lastKnownClient == httpClient )\r\n    return newClient ;\r\n\r\nreturn lastKnownClient;\r\n```'"
9615,316679979,"b'That would make you do a cross thread operation each time, why?'"
9615,316680951,"b'Also, probably for proxy errors, no?'"
9615,316681055,b'why are you setting this to the value it is already set to?'
9615,316683164,b'I was getting `SocketError.ConnectionRefused` in that case (handled). Do you know if there is anything else?'
9615,316684170,"b""I'm setting this from `true` to `false` because I've already tried that once and I now want `HandleServerDown` to behave correctly (return `false` if there is no other node to check and throw appropriate exception)"""
9615,316686783,"b'Consider the case where the proxy is alive, but returning errors to us. \r\nProxy auth failure, for example.'"
9615,316690414,b'Not sure that I entirely follow. I should retry on 407?'
9615,316693265,b'Yes'
9623,317142782,"b""I've set `updateExisting` to `false` to avoid opening a write tx each time. The only 'problem' is that the 'created' date will not be changed. Not sure if this is something that we should worry about? @grisha-kotler """
9623,317143151,"b'without this the `Id` is just a `LicenseManager_LicenseLimit` (@grisha-kotler please double check). Which means that all license limits alerts will be under the same Id, which is not what we want?'"
9623,317402909,b'It should be very rare (when you start your server)'
9597,314986257,"b'This is strange, you also have the current reader on the `it` here.'"
9597,314986274,"b""Can't happen"""
9597,314986314,"b'You cannot open a write transaction here.\r\nLike all operations on the database store, you *must* go through the transaction merger'"
9597,314987157,b'Why check the count? Just use `TryGetValue`'
9597,314987194,b'Why `ToLower`?'
9597,314987744,b'Why call `ToLower`?'
9597,314987779,b'Use case insensitive comparator'
9597,314987799,b'What is bad about putting empty dic here?'
9597,314987814,"b'Create an overload, instead of add these everywhere'"
9597,314990862,b'done'
9597,314990870,b'done'
9597,314991022,b'done'
9597,314991266,b'done'
9597,314991272,b'done'
9597,314991345,b'done'
9597,314991508,b'done'
9597,314991712,b'done\r\n'
9597,314994119,"b'I removed this code.\r\nThis was meant for the case when we have new replication, without documents replicated.\r\nWe treat it in RouteInformation now.'"
9597,317593954,"b""There is no `Remove` method in ConcurrentDictionary. I'm afraid that this might be some extension method? Use `TryRemove` instead."""
9597,317594087,"b""let's make it internal"""
9597,317603597,b'Should be `TryRemove`'
9597,317606824,b'done'
9597,317606834,b'done'
9597,317606849,b'done'
9626,317915265,"b""`TotalEncryptionBufferSize` that applies only to encypted dbs, does that work properly on non encrypted ones?\r\nAlso, where is the actual change here? I'm not seeing it?"""
9626,317923816,b'`maxSizeToSend.HasValue && totalSize > maxSizeToSend.Value.GetValue(SizeUnit.Bytes) ||\r\n                                     (batchSize.HasValue && numberOfItemsSent > batchSize.Value)))\t                                    batchSize.HasValue && numberOfItemsSent > batchSize.Value`\r\nwas removed'
9626,317924420,b'The reason for this condition was that we wanted to send all the attachments with its document.'
9626,317926348,"b""We still do, otherwise, the other side may see things that aren't complete."""
9626,317948262,"b""If not encrypted this will return 0.\r\n\r\nThe actual change is removing those lines:\r\n```\r\nitem.Type == ReplicationBatchItem.ReplicationItemType.Document ||\r\nitem.Type == ReplicationBatchItem.ReplicationItemType.DocumentTombstone\r\n```\r\n\r\nIf we had: \r\ntx 1 -> doc1 + attachment1\r\ntx 2 -> doc2 + attachment2\r\n\r\nand the first tx exceeded the size limit we didn't break the batch, because we fetch the attachment before the document and the condition above will be `false`.\r\n"""
9619,316998386,"b""This breaks binary compatibility. You need a separate 'ctor'."""
9619,316999674,b'I do not like this. I think it would be better to remove this and just have a separate endpoint to do that.'
9619,316999775,"b'This can take a long time. We should wrap this in an operation, return OperationId and create new `EnforceRevisionsConfigurationOperation` in Client API'"
9619,317003241,"b""Shouldn't we use 2 contexts like in RevertRevisions?"""
9619,317390712,"b""Unlike the revert revisions we don't need to keep the entire revision, we need only the id."""
9619,317390728,b'removed'
9619,317390738,b'done'
9615,318307558,b'I will handle 407 in a separate PR'
9627,317906042,"b""Isn't this duplicating the code in `GetPreferredNode`? Can we merge these?"""
9627,317922636,b'internal'
9627,317982671,b'done'
9627,318288996,b'maybe make it nullable?'
9627,318289140,"b""isn't this the same as `RequestExecutor.TopologyEtag` property?"""
9627,318421261,"b'That is not the same, no. Because the topology may change *while* the command is running'"
9627,318424233,b'The source of it is the same. `NodeSelector.Topology` which is taken from `State` inside the NodeSelector.'
9567,309620409,b'Can we get rid of the commented code?'
9567,309621321,b'Need to remove this'
9567,309621606,b'commented code'
9567,318942671,"b""Don't we need to change this on the C# as well?"""
9567,318942777,"b""I don't understand this comment."""
9567,318956934,"b'Still in ""draft"" mode\r\n'"
9567,318957008,"b'Still in ""draft"" mode'"
9567,318957052,"b'Still in ""draft"" mode'"
9567,318957874,"b'C# default enumeration is integer (C Sharp\'s ""int"") so it is 32 bits by default'"
9622,318625432,"b'Add the alias name here, to make the error better'"
9622,318625503,b'Add method name here'
9622,319075626,b'Done'
9622,319075671,b'Done'
9633,318905066,b'Why the new? '
9633,318905092,b'Why the new? '
9633,318905106,b'Why the new? '
9633,318905132,b'Why the new? '
9633,318905219,b'Probably better to have this as a `abstract` property with just `get`'
9633,318908673,"b""Don't we need to take advantage of the cancellation token here? For the server / db shutdown?"""
9633,318910687,"b""Let's use the database shutdown cancellation token here."""
9633,318910877,b'cancellation token'
9633,318956522,"b""This isn't needed in the client (the name for the server only)"""
9633,318956566,b'Same here'
9633,318956596,b'Same here'
9633,318956643,b'Same here'
9633,318956684,b'Same here'
9633,318957487,b'You can pass the name here'
9633,318976328,b'done'
9633,318976348,b'done'
9633,318976361,b'done'
9633,319025585,b'Need to wrap in try catch (in case of any exception)'
9633,319026418,b'You can replace uploadStatus.GetType().AssemblyQualifiedName with targetName'
9633,319026516,b'You can replace uploadStatus.GetType().FullName with targetName'
9633,319035335,b'done'
9633,319039507,b'### done'
9633,319135269,b'Need to log this error.\r\nYou cannot call SetException after calling SetResult (at this point the backup task has already completed.'
9633,319464790,"b""I think we need to 'gather' all previous catches, execute finally and only after success of finally, set appropriate state?"""
9641,319854084,"b""Let's unify this and put this in one place. IIRC we have it in 2 places now. Too easy to desync."""
9641,319868201,b'done'
9632,318944415,"b""We don't need this code any more?"""
9632,318946091,b'It is valid to request without any dates?'
9632,318946431,"b""I don't think this would work properly with the ranges.\r\nI don't believe that there is a good way to correlate multiple `from` / `to` parameters?"""
9632,318947765,b'Add a check here that the `ranges` is not empty'
9632,318948886,"b""Given that this is only used here, can't we already modify that in the `GetFromCacheOrFigureOutMissingParts` and spare this logic?"""
9632,318953111,"b""I'm having a hard time going through this function.\r\nCan you add some comments that explain the reasoning?"""
9632,318953618,"b'This is dense code, can you break it up?'"
9632,318953993,"b'In the comments, please add sample about the ranges involved.\r\nThat will likely make it easier to read'"
9632,319038977,b'moved it here: \r\nhttps://github.com/ravendb/ravendb/pull/9632/files/bad187f254c011a18a85cf7e276f8435c9488ac3#diff-8ccc7aca5fa95a155e4a440b9ad61d56R68'
9632,319039097,"b""there was code is `TimeSeriesHandler` that treats missing 'from' parameter as `DateTime.MinValue` and missing 'to' as `DateTime.MaxValue`. \r\nso I assumed it is valid to request without any dates."""
9632,319039212,b'done'
9632,319039293,b'done'
9632,319039328,b'added some comments'
9632,319039366,b'done'
9632,319039443,b'added examples in comments'
9632,319858998,"b'I think we need to introduce a class e.g. `TimeSeriesRange`. By definition classes are more extendable or easier to modify than tuples. You can mark properties  as obsolete, add new ones, etc. All without breaking any compatibility.'"
9632,319860393,"b""Shouldn't we use `DefaultFormat.DateTimeFormatsToWrite` ?"""
9632,319863474,b'Does Kestrel have max request query string?'
9632,319868260,"b'Not small enough that we would care about, I think.\r\nThe usual numbers are around 1 - 2 KB'"
9632,319871581,"b'We set it to 16kb, you can change that via configuration: `Http.MaxRequestLineSizeInKb` so it should not be a problem.\r\n\r\nWhen it comes to format I see that in other places we are using e.g.\r\n```csharp\r\npathBuilder.Append(""&before="").Append(_before.Value.GetDefaultRavenFormat(_before.Value.Kind == DateTimeKind.Utc));\r\n```'"
9632,320112707,b'done'
9644,319947634,b'What about keys?'
9644,320245576,b'added a test'
9644,320248562,"b'`curValue.Length == 6` is redundant, no? Already checked by the string comparer.'"
9644,320256860,b'done'
9650,320652289,"b""I do not think we want such a behavior? All child objects are working on the same memory fragment and it was always an assumption that clone needs to be done when you want to 'detach' child object from parent."""
9650,320694827,"b""This introduces almost totally opposite behavior to the current one. Instead of always disposing the parent, we do it _only_ in one particular case. Maybe that's ok, I'm just a bit concerned about implication and potential memory issues.\r\n\r\nCan you explain, please?"""
9650,320697782,"b""The reason this feature existed is to handle the `CreateArrayReader`, where we don't *have* access to the parent blittable.\r\nOtherwise, there is no point in trying to dispose a blittable that is an inner value. \r\n"""
9652,320852183,b'```suggestion\r\n        public readonly static object WorkingSetIncreaseLocker = new object();\r\n```'
9652,320852337,b'why not `lock`?\r\nAnd call `Sodium.sodium_mlock` again here'
9652,320852857,b'Need comment to explain why you are locking'
9652,320853173,b'why not same locker?'
9652,321164048,"b'When dealing with large data (like attachments) we can have single allocation which are more than 2GB. So we ran into `int` overflow issue, right?'"
9652,321176988,b'yes'
9656,321285335,b'Why is the `DoNotConsiderMemoryLockFailureAsCatastrophicError ` check inside the lock?'
9656,321285474,b'does it have to be public?'
9656,321637183,b'This is inside lock because it applies to the result of `sodium_mlock` from the `if` here'
9656,321637322,b'done'
9656,321751106,b'okay'
9661,321751293,b'Is this thread safe?'
9661,321893461,b'Very unlikely to have an issue here but... https://github.com/ravendb/ravendb/pull/9663'
9665,321993018,"b""This isn't static, though"""
9665,321993021,"b'In general, the commend here is wrong'"
9665,321993033,"b'If you now remove it from the cache on shutdown, what use is the cache in the first place?'"
9665,321993056,b'Should we just remove the cache completely?'
9665,321996438,b'ups... this one should be `static`'
9665,321996559,"b'But now we are back at making this static globally, no? So what is the purpose?'"
9665,321996639,"b""This one is for C# indexes. Second one is for JS ones. I'm checking all usages of cache now, maybe we can remove JS ones from cache entirely"""
9665,321996975,"b'The main reason we have a cache for C# is to control the # of assemblies.\r\nFor JS, we probably can drop it'"
9665,321997296,b'Done. Thx!'
9671,322094436,b'`/4.0/` ? Maybe better to use `/latest/` in all places?'
9671,322126217,b'https://github.com/ravendb/ravendb/commit/1f49d02bae103139338664bcfb91a4e65f5b4220'
9654,321593383,"b""Shouldn't we always ignore this? Why make this optional?"""
9654,321595208,"b""Here we need to see if the _next_ transaction is valid, (including the id), and only then agree to jump to it.\r\nBecause if the current tx is bad, we can't trust its length either"""
9654,321595417,"b'Here, need to (carefully) check that the _next_ tx is valid (proper id and checksum)'"
9654,321626001,"b""I was thinking about enabling it by default, but I don't like to silently ignore this kind of errors, even if that's safe. I prefer a user to make aware of such error. \r\n\r\nI propose that if we detect that a corrupted transaction was corrupted then we'll be thowing still, but we'll include to the exception message info it can be potentially fixed (without any data loss) by enabling this option. What do you think?"""
9654,321630574,"b""Note that here `TryReadAndValidateHeader` returned `true` so we already found a valid transaction. `CanIgnoreDataIntegrityErrorBecauseTxWasSynced` call was to check that we're _still_ in this special mode (corrupted but already synced) and can continue the recovery.\r\n"""
9654,321631829,"b""Why? Next transaction can also be corrupted and that's fine I think. Then we're looking for next tx valid header (where you already commented - see my answer there):\r\n\r\nhttps://github.com/ravendb/ravendb/pull/9654/files/2dd60ebbde8ee0da60f0c05559e906da9bd280c6#diff-500338b5995fcc8a61f42b513e64f35eR64-R66\r\n\r\nand if we find it and it's _still_ a transaction which was synced then we can skip multiple corrupted transactions.\r\n"""
9654,321633011,"b'For example, we do the recovery, last sync tx is 5:\r\n\r\ntx 1 - ok\r\ntx 2 - corrupted\r\ntx 3 - corrupted\r\ntx 4 - valid\r\ntx 5 - valid\r\n\r\nWe found tx 2 is corrupted then we start looking for next valid transaction. We found tx 4 is valid and was synced so we can safely skip both: tx 2 and tx 3'"
9654,321670270,"b""Added TODO comment for making sure the following won't pass: https://issues.hibernatingrhinos.com/issue/RavenDB-13940#focus=streamItem-67-40594.0-0"""
9654,321750770,"b'We saw how that turned out with the missing journal. Even with the actual fix in the message , we got a lot of support calls and scared users.\r\nGiven that we *know* that this is an okay scenario, no data loss, why force it on the user?'"
9654,321750878,b'ok'
9654,321751047,"b'Okay, make sense'"
9654,322110876,"b""I think this case is slightly different because I believe that in this scenario users might be running into this due to hardware problem. So we need to let them know about that even if it's safe to continue the recovery operation.\r\n\r\nI don't want to do it completely silently. I think this will be very rare BTW"""
9654,322205399,"b""So let's make this an alert by default? I agree that we want the user to be aware of this."""
9654,322224943,"b""Okay. Let's alert them at least."""
9654,322769911,b'Added in https://github.com/ravendb/ravendb/pull/9654/commits/6eb47e553813fbabcb6ccaadf0cdca75d266cbac'
9654,322770056,b'Test added in https://github.com/ravendb/ravendb/pull/9654/commits/6eb47e553813fbabcb6ccaadf0cdca75d266cbac'
9680,323117494,"b""We probably don't need this, given that we now hold all of this in the ValueHolder"""
9680,323117628,b'Need to use volatile read here.'
9680,323117824,b'valueHolder *must* only be set using `Interlocked` operations'
9680,323226875,b'This is running under the DocumentLock'
9680,323231915,b'valueHolder is volatile'
9688,323607091,"b'Also, JArray and JValue, no?'"
9688,323634667,b'Done'
9682,323094078,b'entries -> segments'
9682,323097747,"b""Shouldn't we check OperateOnTypes here?"""
9682,323099540,"b""Let's start using `Size` from Sparrow for this kind of things"""
9682,323099596,b'Use `Size` struct'
9682,323100109,b'Should we pass `collectionsToExport` here?'
9682,323100962,b'Will this yield a proper JSON?'
9682,323104200,b'In `StreamCounterActions` we are setting skipEscaping also here. What is the correct way?'
9682,323125418,"b""The value here is actually the segments. I'm not sure if we are even *storing* the number of the entries.\r\n@aviv86 do we have a cheap way to find how many _entries_ we have?"""
9682,323126794,"b""Shouldn't this also be increased for `TryAppendEntireSegment` too?"""
9682,323127260,"b""Why is this inside the inner loop?\r\nShouldn't we make this unconditional operation before this loop?"""
9682,323128559,"b'For 32 bits, we need to use 2048, not 2048000'"
9682,323130018,"b""Yes, but take into account @arekpalinski's work around this"""
9682,323136428,"b'Very unlikely, I would say. It just throw the raw bytes there.\r\nI think we need to handle that like attachments, no?'"
9682,323686842,b'done'
9682,323686896,b'done'
9682,323687047,b'done'
9682,323687961,"b'no this will not yield a valid JSON, just raw bytes\r\nattachments are handled in a similar way '"
9682,323688850,"b'in `StreamCounterActions` the `DocumentId` is a `LazyStringValue`, here `DocId` is a string'"
9682,323691042,"b""we are counting the total number of segments here. so either way it's increased. \r\nshould we count the total number of entries instead?"""
9682,323691194,b'done'
9682,323692307,"b'so, for 32 bits use 2KB and for 64 bits  use 10MB ?\r\nfor documents import we do 2MB and 32MB  '"
9682,323692738,"b'1MB for 32 bits, 16 MB for 64 bits'"
9682,323693849,b'no we are not storing the number of entries.\r\nnot sure about a cheap way to get this. \r\n\r\nwe also want to be able to get start / end dates & number of items cheaply \r\n(see https://issues.hibernatingrhinos.com/issue/RavenDB-13519)\r\n\r\nmaybe we should store all this information in a separate table ?'
9682,323694579,b'Separate issues / use case.\r\n* Tracking the total number of time series entries is for the whole db.\r\n* Tracking the start/end dates for a particular time series in a particular doc.\r\n\r\n'
9682,323694776,b'I think we can probably just get start / end cheaply enough by looking at the base value for the first segment and last value + most recent value (which we keep in the header)'
9682,323710159,"b""yes, separate issues. \r\nbut if we'll track start/end & count for a particular time series in a particular doc, then finding out the total number of time series entries for the whole db is trivial - it's just the number of entries in this new table"""
9657,321284856,b'missing space :)'
9657,321285073,b'You can remove isTest and use the static TestMode.'
9657,321285330,b'new line'
9657,321288207,b'Can we have a dropdown like we have in ```Edit Periodic Backup```?'
9657,321288539,b'Same here'
9657,321288668,b'```with: azureCredentials```  and then you can remove azureCredentials().[PROPERTY-NAME]'
9657,321289041,b'Same here'
9657,321289427,b'```with: ravenCloudCredentials``` and then you can remove ```ravenCloudCredentials().backupLink```'
9657,321290906,b'What is the difference between ```folderPathOptions``` and ```backupFolderPathOptions```'
9657,321291586,b'Already initialized'
9657,321336568,b'done'
9657,321336632,b'done'
9657,321336742,b'done'
9657,321337468,b'done'
9657,321343626,b'Removed `folderPathOptions`  - was duplicated\r\n'
9657,321668962,b'`public class`'
9657,321669078,b'`public class`'
9657,321669704,b'create a separate issue to handle that via streaming (which IIRC is not supported by Google Cloud API)'
9657,321669792,b'`public class`'
9657,321670129,"b""Let's create a separate issue, it would be better to handle that via method that streams the data, unless `blob.Data` does that already?"""
9657,321670211,b'`public class`'
9657,321670503,b'Same here. Create an issue to handle that separately. One issue for all providers.'
9657,321672161,b'We need to revert that'
9657,321699664,b'Aws -> AWS'
9657,321699726,b'Aws -> AWS'
9657,321699778,b'key -> Key'
9657,321699810,b'name -> Name'
9657,321699851,b'container -> Container '
9657,321700040,b'Google cloud bucket -> Google Cloud Bucket'
9657,321700072,b'Json -> JSON'
9657,321995845,b'Fixed'
9657,321995935,b'Done'
9657,321996011,"b'Thanks, removed'"
9657,321996028,b'Fixed'
9657,321996038,b'Fixed'
9657,321996195,b'https://issues.hibernatingrhinos.com/issue/RavenDB-14009'
9657,321996227,b'Fixed'
9657,321996288,b'`blob.Data` is a stream already '
9657,321996305,b'Fixed'
9657,321996349,b'https://issues.hibernatingrhinos.com/issue/RavenDB-14009'
9657,321996373,b'Thanks! reverted'
9657,321996410,b'Fixed'
9657,321996412,b'Fixed'
9657,321996470,b'Fixed'
9657,321996471,b'Fixed'
9657,321996476,b'Fixed'
9657,321996510,b'Fixed'
9657,321996518,b'Fixed'
9657,322001215,b'done'
9657,322622106,b'rename to LastModified? '
9657,322622716,b'ident this line'
9657,322623727,b'Credentials -> credentials'
9657,322624137,b'why not interface? '
9657,322625107,b'why do you map here?'
9657,322625733,b'move { to previous line'
9657,322626192,b'use const'
9657,322628370,"b""use require - this type of import won't work in relase mode IIRC. """
9657,322629290,b'move else to previous line'
9657,322671455,b'done'
9657,322671709,b'done'
9657,322672071,b'done'
9657,322672432,b'done'
9657,322673925,b'done'
9657,322680248,b'done'
9657,322686269,b'right - it is not needed - removed'
9657,322729557,b'ok'
9657,322733365,b'done'
9682,323915559,"b""I don't follow. _What_ new table?\r\nI meant that we'll be looking at the segments, not keep additional data"""
9699,325152031,"b""I don't like this option. Too tailored.\r\nInstead, let's just make it possible for the admin to make the selection between the option. Regardless of docker or not"""
9699,325152359,"b'Change this to be set in the ctor, so the _default_ can be affected by whatever we are in docker or not'"
9699,325191311,b'https://github.com/ravendb/ravendb/pull/9700'
9694,326024987,b'Why do not use `RescheduleDatabaseWakeup`? Is there a chance that we will have old timer that we need to dispose?'
9694,326025055,b'Why do we need this?'
9694,326025179,b'use `SystemTime.UtcNow`'
9694,326025733,b'Can we add to this test that database will be waken up after all the modifications and backups will be performed?'
9694,326025881,b'Wakeup -> WakeUp'
9694,326068794,"b'UnloadDirectly() is called if and only if the DB become idle so _wakeupTimers cannot have the DB. RescheduleDatabaseWakeup called from putServerWideBackup only If the DB is idle, so it could have a timer already.'"
9694,326072331,"b'to prevent a case:\r\nDB is idle and have timer to make a backup _for first time,_ \r\nIn this case we was passing now as lastFullBackup => nextBackupOccurrence calculated as the next occurrence (according to cron expression).\r\nFor example, db is idle and has timer for _first backup_:\r\nbackup each 5 mins -> woke up on 00:05 -> lastfullbackup = now (00:05) -> nextBackupOccurrence(lastfullbackup) = 00:10'"
9694,326074957,b'done'
9694,326075629,b'done'
9702,326200560,b'```suggestion\r\nvar arrayField = field + LuceneDocumentConverterBase.IsArrayFieldSuffix\r\n                if (f.Name == arrayField)\r\n```'
9702,326203287,b'done'
9708,327145009,b'Can we move it to dedicated `RefreshHandler`? '
9708,327145128,"b'Below method as well `/databases/*/admin/refresh/config"", ""POST""`'"
9708,327151727,b'done'
9712,327652565,"b""Shouldn't we use `StringComparer.OridinalIgnoreCase` here (and in the other stats) ?"""
9709,327671129,"b""I wonder if we shouldn't be setting these operations only once every 1 - 5 seconds.\r\nThe reason is that otherwise under load, we may create a hotspot.\r\nAnother issue is whatever in multi threaded code, we'll have tearing of the the value in some cases"""
9712,327938681,"b'Nvm, this comes from compiled.ReferencedCollections which has that compiler.'"
9712,327938736,b'Comparer*'
9709,327953662,"b""Hmm... can setting a property cause a hotpath? It's the same what we already have for any request:\r\n`_ravenServer.Statistics.LastRequestTime = now;`\r\n\r\nand never got problems with that.\r\n\r\nYou're right that value might be not accurate in some multi threading cases although discrepancy won't be big so I think we can afford it here"""
9709,328073285,"b'You are writing to the same memory location from multiple threads, may cause sync costs / cache fights between cores.\r\nWe can also do the `LastRequestCheck` every 15 sec'"
9715,328075259,"b""Let's make a proper struct of this at this point and accept it as a `ref` parameter"""
9709,328108044,b'Fixed in https://github.com/ravendb/ravendb/pull/9717'
9715,328480990,b'https://github.com/ravendb/ravendb/pull/9721'
9675,322077890,b'```suggestion\r\nrvn_pipe_for_child(int descriptors[2])\r\n```\r\n\r\nOr `int * descriptors` ?'
9675,322077992,b'```suggestion\r\nrvn_pipe_for_child(int descriptors[2])\r\n```'
9675,322078548,"b'This mutates the `line`, is that expected?'"
9675,322078657,"b""We don't actually need this size, do we? Let's default to `malloc(sizeof(char**) * 8)` and `realloc` as needed?"""
9675,322078852,"b'Can we use `strtok_r`, instead?'"
9675,322078905,b'naming convention'
9675,322078932,b'naming convention'
9675,322079146,"b'can we make this one liner, like in the pipe open?'"
9675,322079183,b'naming convention'
9675,322079472,"b""I don't like this, better to pass `file` to `parse_cmd_line` and have it set it there."""
9675,322079732,b'can use one line here?'
9675,322080080,b'can this cause us to hang?'
9675,322080403,b'why is this zero here?'
9675,322080477,"b'If the value is 1000 ms, then this would be zero too, no?'"
9675,322080575,b'what is the meaning of the variable name?'
9675,322080677,b'Why are we setting up signals above?'
9675,322080980,"b'leaking the handle here, no?'"
9675,322081024,"b'leaking the handle here, no?'"
9675,322081562,"b""If we had an error before `CreateProcess`, then `pi` is zeroed, and `hThread` would be zero, so we'll try to close handle 0?\r\nLet's set it explicitly above, before any failure can happen"""
9675,326015885,b'strtok_r is not thread safe. If someone passes the same string twice (tests?) then we should avoid the _r func. '
9675,328546077,"b'That is the other way around, actually'"
9690,323622950,"b'```suggestion\r\n        public (DynamicJsonArray , int) GetAttachmentsMetadataForDocument(DocumentsOperationContext context, string docId)\r\n```'"
9690,323623032,"b'```suggestion\r\n        public (DynamicJsonArray  Items, int Count) GetCountersForDocumentList(DocumentsOperationContext context, string docId)\r\n```'"
9690,323623860,"b'```suggestion\r\n                new RecreateAttachments(documentsStorage),\r\n```'"
9690,323624380,b'```suggestion\r\n        private class RecreateAttachments : IRecreationType\r\n```'
9690,323625225,"b""I don't like this, why do we need this? Can't you use `AfterAllKeys`, if you want this search?\r\n"""
9690,324448849,b'Return `List<string>` here? You do not need to return tuple.'
9690,324449112,"b""Can't we use AfterAllKeys?"""
9690,327668291,b'Is there a reason this is a property to a `Func` and not a simple method?'
9690,327668983,"b""I don't follow what you are doing here."""
9690,328448930,"b'That is going to be costly. Better to add, then reverse in the end'"
9690,328546160,"b'we need to find all of the time series names for a given document.\r\nfor example we have the following segments:\r\n```\r\n            doc/heartbeats/123\r\n            doc/heartbeats/234\r\n            doc/heartbeats/666\r\n            doc/pulse/123\r\n            doc/pulse/54656\r\n```\r\nso we seek backwards, starting from the end.\r\nextracting the last name and use it as a prefix for the next iteration'"
9690,328546200,b'done'
9724,328722144,b'please check if this is sync or async operation (in handler) - if async then we should write that config was enforced. '
9724,330438552,b'`EnforceConfigRevisions` operation in handler is **sync** - so I assume it is ok like this.'
9724,330477573,b'ok great - I was just double checking. '
9734,330589923,"b""can we avoid using `a` tag when it doesn't have href? """
9734,330629223,"b""If I use `span `instead of `a `then text will be 'gray', not 'red',\r\nand it will look _different_ from the other tasks.\r\nIf that is ok - then I will change to `span`."""
9734,330732877,"b""use `ServerWideBackupConfiguration.NamePrefix` instead 'server wide backup' `with prefix 'server wide backup'`"""
9734,330899757,b'done + fixed tests'
9735,330949430,"b'can we reverse logic ?\r\nthis.enabled() ? this.mode()  : ""None""'"
9735,330963827,b'done'
9735,331372192,b'if `_database.MasterKey` is null we need to throw?'
9662,321993362,"b""Do we need to `collections` here? Shouldn't we just pass it via the `state` ?"""
9662,321993392,"b""Let's use the `state.StartEtagByCollection` for this, instead of keeping the data in two locations"""
9662,321993398,b'Same'
9662,321993412,"b'This is O(N) operation, so another reason to just use the `state`'"
9662,321993422,b'Use `state.StartEtagByCollection`'
9662,321993463,"b'Yes, making this configurable is highly desired.\r\nFor that matter, should we allow it to be enabled in 64 bits as well?\r\nMight be relevant for 64 bits systems using encrypted dbs,  no?'"
9662,321993491,b'`== 3` ?  I assume that this is debug code right now?'
9662,322123432,"b""Right, I'll use `state` for that"""
9662,322142511,"b'Yes, committed accidentally.'"
9662,322143917,"b""We need this if running in 32bits or using encryption, otherwise `GetTotal32BitsMappedSize()` and `TotalEncryptionBufferSize` are always `0` so it doesn't make sense to do any checks.\r\n\r\nNot sure if 16MB limit should be allowed to be configurable for a user."""
9662,322177630,"b'Yes, we want to allow this to be configuration'"
9662,331373919,b'`PulseReadTransactionLimitInMb`'
9662,331374439,b'convert those to Fields?'
9662,331374793,b'Convert those to Fields?'
9662,331374882,b'Formatting'
9662,331376456,b'field maybe?'
9744,331124272,b'Are you using the realIndex?'
9744,331207210,"b""not sure if having default value here is a good idea, someone will forget about it in the future at we will end up with 'none'"""
9744,331207714,b'why not `TryDequeue`?'
9744,331207807,b'`Etl`'
9744,331207998,b'@arekpalinski can you review this? LGTM'
9744,331208550,b'use `<<` check e.g. `DatabaseItemType` enum'
9744,331208749,b'move it inside `enum`'
9744,331208795,b'move it inside enum'
9744,331209103,b'use action `() => new ConcurrentQueue(...)`'
9744,331209290,b'no `nameof` ?'
9744,331212757,"b""Is there a chance that those 'indexes' will not be ordered?"""
9744,331363273,"b'Nvm here, it was late :)'"
9744,331364157,b'Maybe introduce `OngoingTasks` in enum?'
9744,331366954,b'Why `UpdateEtlProcessStateCommand` is handled as `DatabaseRecordChange.None;` ? I think we should check if we need to reset ETL so I think  `EtlLoader.Reset` should be called then?\r\n\r\nhttps://github.com/ravendb/ravendb/blob/832bdb96a6f29ae4159b270925ca74b23eb29df0/src/Raven.Server/Documents/ETL/EtlLoader.cs#L486-L491'
9744,331368400,"b"" Just to be sure - @karmeli87 this is because we no longer have a distinction between `StateChange` and `ValueChange`, right? \r\n\r\nAlthough, wouldn't be better off by having dedicated `DatabaseRecordChange.EtlStateChange` and then separate flow for that. Please check my comment below. If you agree that introducing dedicated change for that it's good idea then we should have the same for Subsctiptions - a subscription state is handled the same way\r\n"""
9744,331776140,b'done'
9744,331776200,"b'no, done.'"
9744,331776208,b'done'
9744,331776815,b'You are correct. `OnDispose` is called after we release the write lock!'
9744,331777718,b'done'
9744,331777913,b'done'
9744,331777919,b'done'
9744,331777921,b'done'
9744,331778060,b'Resetting an ETL is done by `RemoveEtlProcessStateCommand`.'
9744,331778229,b'done'
9744,331778347,b'it is now under `TopologyAffected`'
9744,331779121,"b""If this change is (logically) correct and doesn't worsen performance, I think we should do a finer granularity later."""
9735,331794441,"b""It's validated before the backup starts:\r\nhttps://github.com/grisha-kotler/ravendb/blob/bfeb644d706ca5e844c8f75dc474298a2d99f0c5/src/Raven.Server/Documents/PeriodicBackup/BackupTask.cs#L645"""
9744,331864634,"b""You're right"""
9744,331866013,b'Current implementation is correct. Introducing finer granularity is an enhancement that can be implemented later.'
9744,331867474,"b""We need test / debug assert to verify that we aren't adding a new type here and not updating the `All`"""
9753,331864131,b'what would be the exception in this case?'
9753,331864274,b'That is a bad idea. Windows messages are localized.\r\nWhat is the error code here?'
9753,332032734,b'done'
9746,331176097,"b""Pretty sure that this won't work on Linux, no?"""
9746,331204311,b'Should work. `PathUtil` will normalize it'
9746,331204679,b'We should use `PathSetting`'
9746,331346391,b'done'
9767,334097892,b'Why ref HashSet here? It is a class'
9767,334110641,"b""I like to mark it explicitly that it's modified inside the method this way"""
9761,333502373,b'You are returning the memory to the pool when you exit the `using` statement'
9761,333505170,"b'Add a debug message here, if not we will not know during test execution where it failed.'"
9761,333505887,b'Same here'
9761,333893661,"b'```suggestion\r\n            UseAllDocumentsCounterAndCmpXchgEtags(documentsContext, q, length, indexEtagBytes);\r\n```'"
9761,333899071,"b""We pass it to `SeekOneBackwardFrom` method. In order to make sure it works as expected we need tests which have more than one database and multiple compare exchange values for each. This way we'll know that we get correct values as expected."""
9761,333899346,b'We need a test with multiple databases - see my comment above'
9761,334191450,b' This test case has 2 databases and 10 compare exchange values on each db.\r\nShould I test with more than 2 databases?'
9761,334349551,"b""I didn't notice it. That's great then.\r\n\r\nSmall note - instead of using `CreateDatabaseOperation` you can just call `using (var store = GetDocumentStore())` one more time. This way the database would be automatically deleted after the test. Right now the database remains on the server (most tests uses shared server instance)"""
9762,335359560,"b'Do we want to check the previous `afterFree` with the current `beforeFree`, to skip all of those `Clean` methods?'"
9762,335383338,b'Not sure that I follow? You can get `afterFree` only you execute them.'
9762,335384948,b'From the previous run'
9762,335388975,b'cc @grisha-kotler ?'
9773,335291512,b'Wrap this in another exception. You are modifying the exception stack trace here.'
9773,335291736,"b""Don't you need to verify that they all exist here?"""
9773,335326943,b'Right... maybe `await result` is a cleaner solution?'
9773,335327005,b'done'
9773,335364961,b'+1 for `await result`'
9773,335390129,"b""Shouldn't this be `LastValueChangeIndex` ?"""
9773,335395954,b'You are absolutely correct! I will add a test for this.'
9778,335452645,b'`Oids` here'
9778,335452841,"b'But `OID` here, the casing is not consistent'"
9778,335515181,b'Done'
9762,335614398,b'@karmeli87 good idea.\r\nhttps://github.com/ravendb/ravendb/pull/9781'
9583,335841417,b'I wonder if we could do better here by using `TryEnsureSufficientExecutionStack ` and throw own exception which would warn about huge number of clauses instead of a bit scary `InsufficientExecutionStackException`'
9583,335843545,"b""From my perspective, you have to do something _really_ nasty here, and I'm not sure that we _can_ have proper work done here, given the limited stack space."""
9583,335846578,"b""Oh I see. That's fine by me then"""
9774,335407598,b'Rename to `AmazonS3FactAttribute`'
9776,335417696,"b'it is ugly side effect, can we pass this from external ? '"
9776,335418060,b'can we simply this expression?'
9776,335418224,b'can we simply this? Also `!!` are not needed in javascript. '
9776,335440962,b'Is this valid? It differs from the `IsBackupEncrypted` logic'
9776,335456947,b'We only know that the configuration is encrypted'
9776,335485830,b'changed to:\r\n```\r\n        const keyConfirmationNeeded = ko.pureComputed(() =>\r\n             this.canProvideOwnKey() &&\r\n             (!this.originalKey() || this.originalKey() && this.changeKeyRequest())\r\n        );\r\n```'
9776,335489272,b'could you put `(` and `)` around. Please never use `||` and `&&`  together without braces. '
9776,335490718,b'changed to:\r\n\r\n```\r\n        if (this.originalKey() && \r\n           (!this.key() || (this.key() && !this.changeKeyRequest()))) {\r\n            \r\n            this.key(this.originalKey()); // using original\r\n            this.keyConfirmation(true);   // needed for validation  \r\n        }\r\n```'
9776,335496756,b'yes - done\r\n```\r\n        const keyConfirmationNeeded = ko.pureComputed(() =>\r\n             this.canProvideOwnKey() &&\r\n             (!this.originalKey() || (this.originalKey() && this.changeKeyRequest()))\r\n        );\r\n```'
9776,335503539,b'!this.key() || !this.changeKeyRequest()'
9776,335508560,b'done'
9776,335510296,b'done\r\n\r\n```\r\n        const keyConfirmationNeeded = ko.pureComputed(() =>\r\n            this.canProvideOwnKey() &&\r\n            (!this.originalKey() || this.changeKeyRequest())\r\n        );\r\n```'
9776,335910515,b'ok - done'
9783,335893275,b'Use `RevisionsHelper.SetupRevisions` instead.'
9783,335940535,b'done'
9784,335917308,"b""aren't we hiding potential exception from HttpClient here? Shouldn't we check that databaseShutdownToken is cancelled?"""
9784,335931199,b'done'
9795,337163642,b'@ppekrol I would suggest applying a full validation of the URL using something like `Uri.IsWellFormedUriString()` to see if there is anything else wrong with it other than just white space. '
9795,337372098,b'Done here: https://github.com/ravendb/ravendb/pull/9801'
9804,337490966,b'we do not want this. If you need to force running nightly build tests then change `NightlyBuildTheoryAttribute.Force` to `true`'
9804,337504537,b'done'
9803,337470500,"b""You are actually removing a check that seems valid, no?\r\nCan't this now cause us to be added to the cluster twice?"""
9809,338045142,"b'should be: `topThreads, threadsInfo` ?'"
9809,338136987,b'done'
9813,338399845,"b'There are couple of others that are missing here that I can think of e.g. `uint`, `ushort` etc\r\n\r\nIs there a chance that they were not added by purpose? cc @ayende do you recall maybe if there was such a decision?'"
9813,338400777,"b""No such reason, we just didn't add them."""
9813,338457712,b'Added more types'
9817,338510936,"b""Why is this just for out of disk space?\r\nShouldn't we do that for pretty much everything? (No permission on drive, for example)"""
9817,338511460,"b""Wouldn't the log fill up while we are sleeping?"""
9817,338520448,b'The logs are disabled at this point:\r\nhttps://github.com/ravendb/ravendb/pull/9817/files#diff-cebe7d3f975916f1be4ab533d581c22aR695'
9817,338521720,b'Okay'
9817,338522958,b'done'
9811,338033938,"b""Put this logic with the encodedPayload, so we'll have a `case` for the various options"""
9811,338049863,"b'few lines up you have `{}` as content, not here. Is this correct?'"
9811,338050367,b'same here. `{}` vs `string.Empty`'
9811,338050825,"b""yes that's correct. The first request of AuthorizationChallengeResponse should be a post with {} body.\r\nThen all the subsequent request to that should be post with empty body."""
9811,338088483,"b'Ok, thanks for explanation.'"
9822,339290430,b'Why exactly 16 milliseconds? Is it correct?'
9822,339307601,"b""Yes, it's timout's initial value. There is no scenario where it can be TimeSpan.Zero"""
9822,339343221,b'`nameof` ?'
9822,339343535,b'when can this be null?'
9822,339343568,"b""Let's make this a constant value, instead."""
9822,339343587,"b'```suggestion\r\n                                    await SendHeartBeat(""Didn\'t find any documents to send and more then 1000ms passed"");\r\n```'"
9822,339343629,"b'If there is nothing to flush, nothing will be sent the user.\r\nWhy did you remove the `SendHeartBeat` ?'"
9822,339344830,b'After SubscriptionConnection being disposed'
9822,339344909,"b'There is no way docsToFlush will be 0, look few lines above'"
9822,339345042,"b'I think that in that case, especially because it\'s a debug endpoint, it\'s more important to maintain clearer function name then to maintain ""strongly typed"" structure'"
9822,339345527,b'ok'
9822,339345561,b'ok'
9822,339440271,"b'For consistency with other endpoints, this should be `Tcp` instead of `TCP`'"
9822,339440388,b'The method here is `GetRecentStatusDescriptions` but the property is `StatusSubscriptions`. Is this valid?'
9822,339440492,b'check if not null?'
9822,339440744,b'typo: `statusDescription`'
9822,339441963,b'is this first `Waiting` needed?'
9822,339468726,"b""NP, I'll change this property to be a public readonly and create a copy of it upon consumption"""
9822,339470959,b'ok'
9822,339471135,b'changed to something else'
9822,339471746,"b'Yes, if the client died we want to know it as soon as possible'"
9822,339493767,"b""@maximburyak I'm talking about the text here.\r\n\r\nIt will be: `Client from IP Waiting '127.0.0.1' waiting for...`"""
9822,339494149,"b""It should be probably `Client from IP '127.0.0.1' waiting for...`"""
9745,331095372,b'```suggestion\r\n                if (_info.BufferConsumed == false)\r\n```'
9745,331095515,b'```suggestion\r\n                        // consumed stream\r\n```'
9745,331096046,"b'You can calculate it once (Math.Min(_size, count))'"
9745,331098573,"b""changeVector isn't needed here"""
9745,331099281,b'You need only RequestBodyStream()'
9745,331111034,"b'_\r\n```suggestion\r\n        private void CreateMemoryStreamFromBuffer(byte[] buffer, int offset, int count, int index, int? pos = null)\r\n```'"
9745,331111817,b'Add the count in the error'
9745,331111938,b'Add the count in the error'
9745,331112926,b'```suggestion\r\n        public void CanConsumeStream()\r\n```'
9745,331781949,b'done'
9745,331781956,b'done'
9745,331782268,b'done'
9745,331782727,b'done'
9745,331782782,b'done'
9745,331782993,b'done'
9745,331783937,b'done'
9745,331783944,b'done'
9745,331875852,"b""I don't like this. If we have large files, that is going to blow memory usage.\r\nInstead, how about we get a `Func<string, Stream>` that the user provides?"""
9745,331888581,"b""why aren't you using await here?"""
9745,331888635,b'```suggestion\r\n                Stream stream = await response.Content.ReadAsStreamAsync();\r\n```'
9745,331888695,"b""shouldn't this be in a using?"""
9745,331889226,b'Why cast int? We can have documents larger than 2GB'
9745,331917731,b'done'
9745,331918452,b'done'
9745,331930653,b'done'
9745,336168294,b'Why not just return CopyToAsync?'
9745,336168512,b'What is this for?\r\nAnd Why is AttachmentDetails recursive?'
9745,336169495,"b""We already have `LimitedStream` for this, I don't think any of this is needed"""
9745,336171327,"b'You can just return an enumerator of `LimitedStream` here, and that would serve the exact same purpose.\r\nThe only complexity is the fact that you are using the buffer, and that can be handled by concat stream more easily'"
9745,336345662,b'Maybe `/attachments/bulk` ?'
9745,336345797,b'nameof'
9745,336346050,b'This should be in `using` ?'
9745,336346463,b'Should be `DocumentId`'
9745,336346522,b'Should be `Name`'
9745,336346597,b'nameof'
9745,336346634,b'nameof'
9745,336347558,"b'create a dedicated type instead of using `KeyValuePair`. KeyValuePair is not extendable, it will be hard to add something in the future. Also it is hard to grasp what Key and what Value is.\r\n\r\nThe type should have ctor that fills all properties. Properties should have `private set`.'"
9745,336348292,b'Or at least maybe we can inherit from `LimitedStream` (was not aware that we have sth like that) if you need to to additional work?'
9745,336348437,b'we can put this in `using`'
9745,336348630,b'nameof'
9745,337420372,b'done'
9745,337421519,b'done'
9745,337431557,b'done'
9745,337431925,b'done'
9745,337438070,b'done'
9745,337469573,b'done'
9745,337481527,b'done'
9745,337488673,b'done'
9745,337488699,b'done'
9745,337499661,b'done'
9745,337573097,b'done'
9745,337575191,"b""`LimitedStream` adjust and uses Position, we don't have position in the inner stream(gzip) of attachmentsStream."""
9745,337576813,b'done'
9745,338576345,b'not used?'
9745,338576539,b'check both of them for null and whitespace?\r\nBoth of them are mandatory?'
9745,338576784,b'internal?'
9745,338577891,b'Are those used outside of this command?'
9745,338578283,b'internal?'
9745,338648136,b'yes I use them for nameof() in attachmentHandler & operation.'
9745,338648268,b'done'
9745,338648436,b'done'
9745,338649660,b'done'
9745,338650698,b'removed'
9745,338709827,"b'We need to add a dispose flag here (which will also be set in Dispose).\r\n\r\nThis is because if they call `MoveNext()`, the instance should throw'"
9745,338710188,"b""Let's remove this using"""
9745,339328618,b'done'
9745,339338138,b'done'
9745,339526649,"b""Shouldn't we use `IAsyncEnumerator` here like in Streaming?"""
9745,339526855,"b""Let's use ODE. We do not need dedicated exception here"""
9745,339528307,"b""No, we shouldn't.\r\nWe are waiting _once_, for the request to complete.\r\nThen we stream the results out.\r\n`IAsyncEnumerator` is for when we are waiting for the next read on the network.\r\nAnd that is done on the `Stream` itself."""
9822,339968050,"b'Correct, too much copy pasting, will be fixed in next PR'"
9822,339968849,b'Already fixed: https://github.com/ravendb/ravendb/commit/912c34ef475d94d8c11a191024ea021a105af0c1'
9834,340545534,b'where do we even use this?'
9834,340549990,"b'in Debug we do not, it is a part of runtime so when we are deploying standalone app the file is being included anyway. And since the Server was using newer version and Debug had the version from runtime, we encountered a DLL mismatch situation in our deployment package.'"
9808,338008913,"b""Shouldn't we throw here?"""
9808,338009721,b'Why string empty here?'
9808,338010064,b'what is the meaning of the path here?'
9808,338011129,"b'Need to validate here that we got the same number of time series, from and to '"
9808,338055924,b'1. add only timeSeriesIncludes to the ctors where we also have counters\r\n2. should be between counterIncludes and metadataOnly\r\n3. probably should be an array? '
9808,338056914,b'casing: `timeSeriesToInclude` ? or we want `timeseries`? But then we need to be consistent everywhere'
9808,338058878,b'should be explicit interface implementation?'
9808,338059558,b'do we want to have an option to include all timeSeries like with counters? cc @ayende '
9808,338059873,b'can this be internal?'
9808,338060508,b'`timeSeriesNames`'
9808,338060581,b'`TimeSeriesNames`'
9808,338074261,b'`TimeSeriesNames`'
9808,338075121,b'It looks like we are parsing those dates all the time? Can this be done once? Maybe lazy?'
9808,338143765,b'we can include time series of related documents by path'
9808,338144019,b'include time series of original document'
9808,338144388,b'done'
9808,338144641,b'changed to `timeSeriesToInclude`'
9808,338144759,b'done'
9808,338144797,b'done'
9808,338145057,b'done'
9808,338145148,b'done'
9808,338146188,"b""1. done\r\n2. done\r\n3. I'm using a HashSet in `IncludeBuilder`, so `IEnumerable` here saves me a `ToArray` call """
9808,338575774,b'I think it would be better to pass to this method a class/structure that has this cache so we can avoid parsing it per each document'
9808,340561913,"b'`TimeSeriesToIncludeBySourcePath` should be `TimeSeriesToIncludeBySourceAlias` and the `string path`, etc should be changed to reflect that'"
9808,340562103,b'No'
9808,340562479,b'alias'
9808,340609583,b'done'
9808,340609644,b'done'
9723,328551779,b'Use `strtok_r` here.'
9723,328553073,"b'This is duplicated, no?'"
9723,328553426,b'Where is `argv` freed?'
9723,328558473,b'Under what scenario do I want _this_ to happen?'
9723,328558536,b'```suggestion\r\n        public string Line { get; set; }\r\n```'
9723,328558769,"b'Remove this method, use `StreamReader`'"
9723,328558933,"b'You need to start this (and not wait), then wait for close, then wait on the result (to flush everything)'"
9723,328581919,"b'That what is actually happens when you start any process (i.e: ""xdg-open"" writes its stderr to the console). May be it is better to pass a TextWriter\'s stream from the caller to `Start` ? '"
9723,328614955,"b'sr returns only when the child process exists..\r\n```\r\nusing (var sr = new StreamReader(fs, Encoding.UTF8))\r\n    read = process.ReadLineAsync(fs, ctk).Result;\r\n```'"
9723,328963743,"b'That goes to `Console.Out`, which is the _server_ output, which is usually not observed.\r\nWe never want to allow that. Have the user provide a text writer for this, or better yet, a callback, instead.'"
9723,328964139,"b""That doesn't match the behavior I'm familiar with.\r\nIf you are doing things sync, use `ReadLine`.\r\n"""
9723,330540287,"b'Moreover,\r\nI used StreamReader\'s ReadLine(), and it waits until process exists and just prints the first line and the throws `System.ArgumentException: Stream was not readable.`\r\n\r\nLooking at : https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/IO/StreamReader.cs\r\n\r\nThey do (more or less) the same as I do. Reading from TW, however I do that char by char w/o throwing on null read. In corefx they throw if they ""read"" null. '"
9723,330545191,b'..and ReadLine blocks.. until new char is read. So without ctk we might face hung'
9723,330972765,b'Why is it a `MemoryStream` ?'
9723,330972821,b'Pass a `Span<byte>` here'
9723,330972916,b'Remove commented code'
9723,330973039,b'This is no longer async method'
9723,330973233,"b'This is wrong, the `\\n` can happen anywhere in the buffer, not just the first one.'"
9723,331034515,b'This is 1 byte buffer.  However I am going to rewrite this part (read 4096 and store the reset after \\n for next iteration)'
9723,331785794,b'my bad.. fixed in https://github.com/ravendb/ravendb/pull/9723/commits/fcb52895280d49b357ed0b831fda17cc66352a15'
9723,331860056,"b""Shouldn't we be closing the `descriptors` if there is a failure here?"""
9723,331860128,b'check if `argv` is `NULL` here'
9723,331860309,"b""I'm pretty sure that you need a _separate_ context variable here."""
9723,331860376,b'Check if this failed'
9723,331860713,"b'```suggestion\r\n        result = dup2(fd, fileno);\r\n```'"
9723,331860968,b'check if malloc failed here.'
9723,331861525,b'`if (modified)`'
9723,331861743,"b'I think you meant `|` here, no?'"
9723,331862468,b'```suggestion\r\n        public event EventHandler<ProcessExitedEventArgs> ProcessExited;\r\n```'
9723,331862903,"b'This is wrong here.\r\nYou are returning a task, but immediately disposing the stream before you actually read anything.'"
9723,331863215,b'why is the first thing that you are doing is waiting for it to close?'
9723,331863578,b'task.Wait(15)? '
9723,331971480,b'waiting to close with timeout.  polling... '
9723,331976430,b'https://github.com/ravendb/ravendb/pull/9723/files/3406eb2840bcaf009737f0a829f0da841e86e133#diff-26816b18cf670fbae58f7f07ce0927fdR258'
9723,331980132,"b""Is it enough to allocate only 2 bytes here? It's an allocation for array of pointers, isn't it?"""
9723,331986748,"b'ok. will be fixed so instead of polling, this is general totoal waitForExitTimeoutInSeconds'"
9723,332008191,"b""Maybe `bool TryHandleInfoReceived(string data, out string error)` instead to be more explicit if the method succeeds or not. Returning `null` on success isn't obvious and can be a surprise for someone in the future"""
9723,332009770,b'Minor: using `nameof()` for `Start` and `Filename`'
9723,332010385,"b""Can we drop `ctk` parameter? I don't see any usage of it"""
9723,332012417,b'I think it should be logged at `Operations` level'
9723,332013372,"b""shouldn't you assign 'serverStoreServerShutdown' here?"""
9723,332013464,"b""rename to 'serverShutdown'"""
9723,332013602,b'Minor: you can use `Timeout.Infinite` instead of `-1` to make it a bit more clear'
9723,332019808,"b'It is _not_ valid, you are correct. **Good** catch!'"
9723,332024173,b'Do not worry about this. Just tell me when PR is ready and I will rebase.'
9723,332024627,b'should we dispose this?'
9723,332025290,b'But future usage possible and also makes sense. '
9723,332025807,"b'`rest` is shown here twice, pretty sure you need to specify different variable here.'"
9723,332026202,b'this is a bad merge?'
9723,332026664,"b'I will handle that and the end, we can ignore this for now'"
9723,332027820,"b'Then we have the same issue below `argv = realloc(argv, argc + 1);`'"
9723,332027879,b'use ArrayPool here?'
9723,332028056,b'Add a const with 4096'
9723,332028142,b'Use the defined const here'
9723,332028226,"b'argv = realloc(argv, argc + 1); - see comment above'"
9723,332028277,b'Use the defined const here'
9723,332028904,b'already fixed... failed while I tried more then 3 arguments ;) .. '
9723,332029531,b'nop. I meant it to be this way.'
9723,332034889,"b'This is internal API, we can change it at will'"
9723,333448032,b'https://github.com/ravendb/ravendb/pull/9723/commits/35cf7d7b67f312e093d3a1b6ea29fd493c82c10f'
9723,333527090,"b'Although it works, you are right, the correct usage is:\r\nhttps://github.com/ravendb/ravendb/pull/9723/commits/34cebfa76f1074867f2e96a9f7d089719cf23ddb'"
9723,333557841,"b'```suggestion\r\n        char **tmpargv = realloc(argv, sizeof(long)*3); /* filename, empty, NULL */\r\n```'"
9723,333558935,"b""Still need the `if` here, and let's place it need the `argv`"""
9723,333560214,"b""You won't be _called_ here, so this wouldn't work"""
9723,333560350,b'what is this for?'
9723,333561575,b'`lineOutputHandler` is unused here?'
9723,333561630,b'Did you mean to call this?'
9830,339590899,"b'Just to double-check... This is used only to detect if reducing executer needs to do some work on that index or not? It is not used anywhere alse?\r\n\r\nAlso, do we have similar logic for IndexingExecuter?'"
9830,339605699,b'It is used only in AbstractIndexingExecuter.\r\nIndexingExecuter has the same logic:\r\nhttps://github.com/ravendb/ravendb/blob/v3.5/Raven.Database/Indexing/IndexingExecuter.cs#L72'
9850,341553614,"b""Shouldn't this come from the restore config?"""
9850,341553673,b'What if  the value was already disabled at backup time?'
9850,341554212,"b'why move it here? The tasks are enabled at this point, no?'"
9850,341558321,b'This is after we restored the database record but before we create the database:\r\nhttps://github.com/ravendb/ravendb/blob/462b73c58d4d9d7f48081dc305e053b9cbed3efa/src/Raven.Server/Documents/PeriodicBackup/Restore/RestoreBackupTaskBase.cs#L278'
9850,341558707,b'ok'
9850,341558826,b'We skip it if it was enabled in the restore config:\r\nhttps://github.com/ravendb/ravendb/blob/462b73c58d4d9d7f48081dc305e053b9cbed3efa/src/Raven.Server/Documents/PeriodicBackup/Restore/RestoreBackupTaskBase.cs#L567'
9850,341559107,b'It will stay disabled'
9829,339343685,b'This is probably a bad idea. What if we have a long database load time?\r\nYou cannot force a wait here.'
9829,339346620,"b'`HandleClusterDatabaseChanged` method is executed asynchronously, so it is not blocking any other operation, but it might eat-up threads.. would `AsyncHelpers.RunSync(() => task)` help here? \r\n'"
9829,339415416,"b'No, would also hold us the thread.\r\nInstead, change the execute to be async, so we can await there.'"
9829,341517820,"b'If this fails, the user is going to get an error, but does it impact anything else?'"
9829,341518401,"b""I don't like this.\r\nwhat happened if between the `IsCompleted` check and the `Cancel()`, you got the lock? Then you have a hanging lock here."""
9829,341519690,b'This is going to block until the task is done running?'
9829,341520171,"b'```suggestion\r\n                    throw new InvalidOperationException(e.Message, e);\r\n```'"
9829,341851138,"b'No, it should execute the action inside the `Task.Run` asynchronously. '"
9829,341851388,b'done'
9829,341851638,"b'It might only impact on the server start-up, I guess it is better to create a task for each database.'"
9829,341852237,b'done'
9851,341851271,b'`SnapshotSettings` ? '
9794,336863376,b'Why do we need this optimization? Can it be time consuming?'
9794,337427408,"b""Yes. When we have disabled indexes, we are not going to execute the RemoveFromIndexTask.\r\nIf we have only TouchReferenceDocumentIfChangedTask we need to search for RemoveFromIndexTask although we didn't find any at the beginning.\r\nSkipping tasks might be expensive if we have thousands of those."""
9794,337431563,b'Okay. Thanks for explanation. '
9851,341855801,b'done'
9849,341978638,"b""Instead of adding additional parameter I would prefer to use `definition` to detect if an index has `OutputReduceToCollection` defined. It would just require to cast it to `MapReduceIndexDefinition` when you're inside  `if (type.IsMapReduce())`\r\n\r\n"""
9850,341979797,b'Why do we need this?'
9850,341980243,"b""I'm fine with that, just wonder why did you need to add it?"""
9850,342008205,b'It fails here after restore:\r\nhttps://github.com/ravendb/ravendb/blob/462b73c58d4d9d7f48081dc305e053b9cbed3efa/src/Raven.Client/Documents/Operations/ETL/EtlConfiguration.cs#L79'
9850,342013667,b'Makes sense. After restore `TaskId` should be the same.'
9839,340561501,"b""`Encoding.UTF8.GetString(_smapsBuffer[0])}`  - This is going to get the *whole* buffer, but we didn't read all of it, did we?"""
9839,340640985,"b'true, but I want to _see_ the entire buffer. I have the positions where we read and from the text we can understand what went wrong.'"
9859,342026255,"b'IsAssignableFrom, instead?'"
9859,342026791,"b""we want to get 'closest' decendant and IsAssignableFrom returns any, or I'm wrong?"""
9859,342060554,b'But you are missing interfaces'
9859,342159260,b'Added test with classes that inherit from interface'
9842,341516767,b'why is this required?'
9842,341518282,"b""It's for the `ClusterRequestExecutor` in the client. So we can update its topology if needed."""
9842,341852545,b'Do we know why it was here?'
9842,341854379,b'I think it would be better to store this in memory in OnTopologyChangeInternal. This would avoid us opening transaction for each request and we are already doing that for DatabaseRequestHandler.'
9842,342173233,b'done'
9842,342225124,b'@garayx do we need to read it during ServerStore initialization?'
9842,342529397,b'done'
9855,341937132,b'why not `LoggingSource.Instance.IsInfoEnabled = true` ?'
9855,341937296,b'`LoggingSource.Instance.IsInfoEnabled` = `isInfoEnabled` ?'
9855,341937711,b'why not simply `await Task.Delay(15_000);`?'
9855,341939473,"b""do we dispose the `ms`? also, can't we pass the `entryStream` from the first place?"""
9855,342023702,b'done'
9855,342023842,b'done'
9855,342024042,b'done'
9855,342030855,b'done'
9855,342415119,b'this need to be in `tryfinally`'
9855,342415786,b'Why we removed this?'
9855,342448743,b'We use the endpoint instead of local function now'
9855,342531837,b'I put it in the catch'
9854,341860069,"b'This is duplicated, no?\r\nMerge this with the JS body but accept the `{` vs `(` as param?'"
9854,341860195,b'Needs to think how we can do this on _JS_ calls as well.\r\n'
9854,342024649,b'will be handled separately in https://issues.hibernatingrhinos.com/issue/RavenDB-13082'
9854,342025775,"b""If I'll accept open parentheses and closing parentheses as parameters, then I won't be able to use them as switch cases anymore (non constant values).\r\n\r\nI can handle that inside the default case, i.e :\r\n```\r\ndefault:\r\n\tif (_q[_pos] == open)\r\n\t{\r\n\t\tnested++;\r\n\t\tbreak;\r\n\t}\r\n\tif (_q[_pos] == close && --nested == 0)\r\n\t{\r\n\t\t_pos += 1;\r\n\t\t_tokenStart = original;\r\n\t\t_tokenLength = _pos - original;\r\n\t\treturn true;\r\n\t}\r\n\tbreak;\r\n```\r\nbut that will affect performance, wouldn't it ?"""
9854,342217754,"b'Then add a `isCurly` and do case for `{` and `(` and jump out if not? \r\nHonestly, though, I doubt that it would matter.'"
9854,342531116,b'done'
9863,342667162,b'Do we need those and the exception in default path?'
9849,342975401,b'https://github.com/ravendb/ravendb/pull/9868'
9861,342654963,b'```suggestion\r\n                for (int i = length; i < sizeof(char); i++)\r\n```'
9861,342655150,b'Why do we need this?'
9861,342655227,b'Why?'
9861,342949115,b'Notice that `int i = length` so I think this is correct?'
9861,342984868,b'This in order to match what we do in Pal also in Win MMap Pager (until it will go into PAL as well)'
9861,343011806,"b'We have a string of 200 chars, meaning UTF8 max size is 1KB.\r\nWe wrote 200 bytes, but now we are manually zeroing 1KB slowly.'"
9861,343039459,b'https://github.com/ravendb/ravendb/pull/9861/commits/20df27533b971d1bad662f48f62a59d4052b9e0b'
9871,343656267,"b'TryGet, not Contains'"
9871,343656505,"b'```suggestion\r\n        private static readonly ConcurrentDictionary<(string Url, X509Certificate2 Cert),  Lazy<ClusterRequestExecutor>> _requestExecutorsCache = new ConcurrentDictionary<(string Url, X509Certificate2 Cert),  Lazy<ClusterRequestExecutor>>();\r\n```'"
9871,343656825,"b'This is probably not safe, what is we are currently using this?'"
9871,343657065,b'Not concurrently safe'
9871,343657356,"b""We don't need this"""
9871,343661075,b'Thread safety : https://github.com/ravendb/ravendb/pull/9871/commits/4c6e96b6306919736303fa7e2c9c0b2ef0438c07'
9871,343665602,"b""This needs calculating hash of string and object. Why not use 'string url' so we use string comperator and we have single certificate per url any how, so this way it is more efficient lookup. No?"""
9869,343038524,b'Can we have here a message like: Exporting file: {file}.'
9869,343039017,b'And progress here (every 500ms..)\r\nCopied 10MB/500MB.'
9869,343042515,"b'Was this supposed to be `""Dump index "" + name`, or maybe even `""Dump index "" + name + "" to "" + path` ?'"
9869,343088388,b'done'
9869,343088425,b'done'
9869,343088480,"b'Yes, fixed'"
9869,343223516,"b""I'm wondering if we should not put `CurrentlyInUse` here?"""
9869,343224339,"b""This doesn't look like TotalBytes? It is per file?"""
9869,343225048,"b""this is also per file? Shouldn't this be global?"""
9869,343229218,"b'Yes, I think that would be good'"
9869,343229372,"b'That is the total bytes for _this_ file, yes. Need to change this'"
9869,343708383,b'done'
9840,341530683,b'Wrap the whole thing in `if(_patternForReduceOutputReferences != null) ` ?'
9840,341530859,b'Can we try this without allocations?'
9840,341531271,b'case insensitive match?'
9840,341531564,"b""Is it possible that we have ids in the `idsToRemove` that aren't in the `ids` ? \r\nI think we need to do the work to remove it always"""
9840,341531738,"b""Wouldn't it be easier, instead of removing it, to just build the new array?"""
9840,341532220,b'what happens when the pattern we have here is not valid?'
9840,341532534,"b""shouldn't we cache that?"""
9840,341532590,b'can this be null?'
9840,341987480,b'+1'
9840,341988561,"b""We call it very occasionally - once per indexing batch. For validation purposes only:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/9ce10e6847103dafa0f59c75ab5097a4b741b28d/src/Raven.Server/Documents/Indexes/Persistence/DeleteReduceOutputDocumentsCommand.cs#L16-L17\r\n\r\nI don't think it's worth to optimize that"""
9840,341989152,b'I used `StringComparer.OrdinalIgnoreCase` in all placed where I use HashSet or Dictionary'
9840,341991761,"b""Not possible. I'll add `Debug.Assert` for that."""
9840,341992964,"b""I believe that most cases we won't have to many deletions here so just removing it should be a bit lighter I think"""
9840,341996075,"b""`Transaction` has it cached already. I just changed `string ReduceOutputsIdsToPatternReferenceIdsTreeName` to `Slice` so we won't cause additional allocations"""
9840,341996458,"b""Should never happen. I'll add explicit exception for that"""
9840,341999745,"b'But not here ,though?'"
9840,342001884,b'Here as well. Why not? Document IDs are case insensitive - am I missing something?'
9840,342018864,b'it will be handled as regular indexing error'
9840,342025959,b'`new HashSet<string>(1)` will do case sensitive comparisons'
9840,342026591,"b'Oh, I meant that I changed it locally to `new HashSet<string>(1, StringComparer.OrdinalIgnoreCase);`'"
9840,342773390,"b""Shouldn't this be 'PatternFor...` ?"""
9840,342773807,b'Also the main property is `OutputReduceToCollection` maybe we should build upon that? e.g. `PatternForOutputReduceToCollectionReferences` ?'
9840,342774264,"b'Similar here, maybe we should consider renaming it to something more similar to the property name in index definition?'"
9840,342774615,b'Are we using this client side?'
9840,342775291,b'we can dispose this right after `.Put` probably?'
9840,342947277,b'We can probably dispose this after Put?'
9840,342947403,b'We can probably dispose this after put?'
9840,343018868,"b""It's very long but yes it will be consistent. I'll made that change."""
9840,343020592,"b'- Renamed to `OutputReduceToCollectionReference`\r\n- Yes, this is meant to be used client side. Eg.\r\n\r\n```\r\nvar doc = session.Load<ReduceOutputIdsReference>(""reports/daily/2019-10-26"", x => x.IncludeDocuments(y => y.ReduceOutputs));\r\n\r\nforeach (var docReduceOutput in doc.ReduceOutputs)\r\n{\r\n    output = session.Load<Result>(docReduceOutput);\r\n}\r\n```'"
9840,343021095,"b'Yes, it was done by @grisha-kotler in the following PR https://github.com/ravendb/ravendb/pull/9852. I need to rebase'"
9840,343021150,b'Yes'
9840,343021313,b'Yes'
9840,343802435,b'is it only visible when output reduce to collection is set to true?'
9840,343802997,b'should we check for this.outputReduceToCollection() as well? '
9840,344028700,"b'yes, done'"
9840,344028824,"b""yes, that's correct"""
9838,340557308,"b'```suggestion\r\n                                databaseTopologyAvailabilityExplanation[member] = ""Is the mentor node and a valid member of the topology, it should be the mentor node"";\r\n```\r\n\r\nMaybe should use: \'designated\' instead of mentor, though?'"
9838,340557596,b'Add here if we have a mentor node?'
9838,340557637,b'When can this happen?'
9838,340558016,"b'Agreed, `AssertIsNotPassive`? Note that this should still happen here.'"
9838,340558363,"b""This is not a good idea, note that this will mean that if the node is passive, we can't connect to it at all.\r\nIncluding to be able to add to it to a cluster.\r\nWe need to check it only if this is for a particular db"""
9838,340591607,b'Mentor is the terminology in subscriptions'
9838,340593016,b'When the node becomes passive in the middle of the subscription connection'
9838,340594423,"b'This endpoint is only for specific database, otherwise the endpoint /info/tcp will be used.\r\nNote that in this endpoint, database is mandatory'"
9870,343631377,"b'Add actual data: string such as `""\\0\\0""` will be translated to `\\u0000\\u0000`, etc'"
9870,343631691,"b""I don't understand what this is for.\r\nDid you mean, known special chars here?"""
9870,343633090,"b'those are whitespaces, so we save a guid as an ID in place of those'"
9870,343643792,b'done'
9870,345045017,b'I love C# :)'
9870,345045165,"b'This will be racy, high chance IMO that some of those will finish and not throw.'"
9870,345051295,b'Can we improve the error message a bit and add:\r\n\r\n```\r\nPlease make sure that all asynchronous session methods returning Task are awaited.\r\n```\r\n\r\nto be explicit about what needs to be checked.\r\n'
9870,345071836,"b""Here, we also want to error if we have a non zero old value.\r\nWe don't allow concurrent async tasks in the async session.\r\nOnly a single such task is allowed."""
9870,345072123,b'Can this be negative?'
9870,345143240,"b'The strLength should be smaller/equal to the initial value that was used to calculate idSize, so the sizeDifference value should be positive/zero. '"
9870,345146334,b'done'
9870,345146745,b'done'
9870,345155069,b'done'
9870,345172328,b'added debug assert there'
9870,345208140,"b'So we can just have an assert here, and avoid the `if` entirely?'"
9870,345210788,"b'no, we should move the pointer for idSize if there is difference, this is the same code like here :\r\nhttps://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/Documents/DocumentIdWorker.cs#L285'"
9874,344719763,"b""Let's rename this to `ReservedFileNames` and make it `internal`. We are already in `Windows` anyway."""
9874,344720148,b'can be internal?'
9874,344720670,b'can we do it in finally?'
9874,344750931,b'done'
9874,344752862,b'yes - done'
9874,344774341,b'yes - can be in finally - but I preferred to refactor order of actions - pls look'
9874,346158923,"b""I think this should be 'DatabaseDoesNotExistException' ?"""
9874,346160076,b'I would prefer to have this as soon as possible. Can we do it right away after deserialization?'
9874,346160968,"b'Please be aware that if above assertion will fail, then you would be left with a database in the global server'"
9874,346162172,b'I think it would be better to use `PathSetting` it performs this + additional validation'
9874,346162512,"b""Let's use instead of PathUtil a `PathSetting`"""
9874,346162609,b'Use `PathSetting` instead of `PathUtil`'
9874,346190271,b'done'
9874,346197317,b'done - moved right after deserialization'
9874,346204356,b'fixed - added finally'
9874,346220851,b'done'
9874,346220947,b'done'
9874,346222790,b'done'
9875,344736203,b'More fields will be added by Karmel in his PR'
9875,344736346,b'We should not parse when we are in backward compatibility mode'
9875,344737097,b'https://issues.hibernatingrhinos.com/issue/RavenDB-14230'
9875,344737550,b'will be handled as a part of auto TS indexes'
9875,344739425,b'Need to fix the text'
9875,344739522,b'Need to fix the text'
9875,344740235,b'Need to use overridable method `GetLastItemEtagInCollection`'
9875,344740411,b'Need to use overridable method `GetLastTombstoneEtagInCollection`'
9875,344741001,b'Check where this is used and what should be the key'
9875,344741885,b'Try to get rid of this and change `Collections` hashset to use `IIndexCollection`'
9875,344745057,"b'```suggestion\r\n        protected virtual bool HasTombstonesWithEtagInRange(DocumentsOperationContext databaseContext, IIndexCollection collection, long start, long end)\r\n```'"
9875,344745835,b'Fix text here'
9875,344745973,b'Fix text here'
9875,344746334,b'Why `StorageKey`?'
9875,344747328,b'This is a pretty big struct. We need to see how we are using it to avoid boxing / copying all the time'
9875,344754889,"b'Can actually make this into properties, instead of handling dynamically'"
9875,344756226,b'Need null check here too'
9875,344756378,"b""Don't need this, can always unsubscribe. But needs null check"""
9875,344756681,b'What does `isReference` mean here?'
9875,344757269,b'Can users give a LOT of collections here and smash the stack?'
9875,345434214,"b'I would prefer not to, because the name is very explicit that it is `> && <=` and Range does not suggest that.'"
9875,345434304,b'Removed'
9875,345436691,"b""Need to check if we can do it better, but for TS we are not processing tombstones (because we do no have them), but this method is used to get also the last etag of referenced collections, for which we need to kip track. I've added that so I can distinguish properly if this is called from references or from 'regular' map. Probably it might end up as a flag inside the map, so the call be skipped in code, then no additional paramter will be needed."""
9875,346198486,b'TODO: maybe introduce `entry.Value` which would be a `shortcut` for `.Values[0]`'
9875,346199541,b'TODO: add support for `all timeseries`\r\n1. e.g. `from ts in timeSeries` ?\r\n2. e.g. `from ts in timeSeries.Companies`'
9875,346204719,b'TODO: switch to class'
9875,346205674,b'TODO: revert this'
9875,346206344,b'TODO: implement JS TS indexes'
9875,346206760,b'TODO: support updating TS indexes'
9875,346207027,b'TODO: support TS Map-Reduce & JS TS Map-Reduce'
9875,346208387,b'TODO: fix this'
9875,346209198,"b'TODO: this cast is not rquired anymore, we moved everything to AbstractStaticIndexBase'"
9875,346210614,b'TODO: fix me'
9875,346210683,b'TODO: fix me'
9875,346211383,b'TODO: no casts needed'
9875,346215140,b'TODO: check which methods can be moved to base class'
9875,346215594,b'TODO: check if we can handle this better'
9875,346219612,"b'INFO:\r\nThis is a moment when we are picking appropriate indexing function e.g. we can have 2 indexing functions for time series, one for People+HeartRate, second one for People+Whatever. If there is no match, and since we are subscribed to all timeseries for People and we need to go over all of them, we are skipping here, but bump the etag.'"
9875,346220102,b'TODO: check if this is correct'
9875,346221961,b'TODO: check how we want to handle this? Maybe it would be better to expose this via method like we have with `Id()`'
9875,346223000,b'TODO: check if we can handle this'
9875,346224277,"b'TODO:\r\n\r\nwe need this, because when document is delete, all timeseries are deleted and no tombstones are created.'"
9875,346227165,b'TODO: implement in TS schema an index and a method that gets this instantly'
9875,346227661,b'TODO: maybe use `.Collections`'
9875,346228347,b'TODO: fix me'
9875,346231036,b'TODO:\r\nmove to a dedicated file'
9875,346233445,b'TODO: remember about pageSize'
9875,346234585,b'TODO:\r\ncheck if putting key as Key and LoweredKey is problematic for TS or not'
9875,346235604,"b'TODO:\r\nwe need to introduce proper time series container like `Document` and use instead of `string properties, `LazyStringValue` to avoid allocations'"
9875,346340850,b'done'
9875,346341401,b'done'
9875,346341772,b'done'
9875,346342361,b'done'
9875,346342728,b'done'
9875,346343006,b'done'
9875,346343393,b'done'
9875,346343799,b'done'
9875,346833375,b'done'
9875,346833534,b'done'
9875,346833734,b'done'
9875,346833909,b'done'
9875,346834222,b'Changed to class'
9875,346839775,b'done'
9883,346418847,b'```suggestion\r\n            hasInternalKeyOrValue = false;\r\n```'
9883,346421606,"b'Caution, hasInternal variable is used too in line 265'"
9883,347130458,b'done'
9888,347256941,"b'This is a _static_ instance, no?'"
9888,347266965,b'yes! done.'
9888,347779886,"b""Shouldn't be renamed to `ConfigureRevisionsForConflictsOperation`? For consistency with `ConfigureRevisionsOperation`"""
9888,347780765,b'Rename to `ConfigureRevisionsForConflictsOperationResult`?'
9888,347787042,b'How is that change related to introduced option of defining separate conflict revision configuration? Or this is another fix?'
9888,347803073,"b""I guess it both.\r\n\r\nOn conflict we were passing the configuration directly, and if we don't check for `Disabled` we will keep conflicted revision even if they were disabled.\r\nIn general if the configuration is disabled we should simply leave the state as is. """
9888,347804786,b'done'
9888,347804809,b'done'
9875,347849595,b'done'
9875,347849960,b'done'
9890,347248266,"b""Maybe another try/catch here.\r\nWe explicitly don't care if we failed to delete the file, no?"""
9890,347254137,"b'These checks can fail, no?'"
9890,347275393,b'No. All the info is in memory.'
9890,347275455,b'done'
9890,347309907,b'This actually requires to have 512 MB of free space regardless the backup size. Why?'
9890,347388682,b'This is the same logic that we use for database restore'
9890,347417969,"b""Okay. That might make sense. We won't consume free space completely this way. Do you think we should extract this logic to some helper method and used it here and during restore, so it will be consistent in both?"""
9890,347470172,b'done'
9892,347931593,"b""We only need it for a specific scenario, this shouldn't be here.\r\n"""
9892,347931767,"b""Same, shouldn't be on this class, certainly not as a public method.\r\nCreate a separate class that can use this"""
9892,347939651,"b""Should we shuffle the other stuff, that isn't in the priority order?"""
9892,347982700,"b'okay, so I shuffle the members any way'"
9892,347982731,b'done'
9892,347982764,b'done'
9892,348331645,"b""Can we change it to `private` or `internal`? I don't want it to be considered public API"""
9892,348332362,b'Can we change it to `internal`?'
9892,348333098,b'This breaks binary compatibility. Please add a new constructor for that overload.'
9892,348353994,b'done'
9892,348354032,b'done'
9892,348354075,b'done'
9882,348442404,b'We need a _list_ of these'
9882,348442565,"b'If null, create it.\r\nIf not null, add yourself to it. But may already exists, so probably use a set.'"
9882,348938709,"b'I preferred to add the strong ref instead of ""myself"" (this == pool).  Because the ref set to null at pool\'s Dispose, and then I do not care about this parent anyhow '"
9900,349035818,"b""This may cause us to send changes to the database that we shouldn't. \r\nBecause the listener wasn't called to mutate the data"""
9900,349035987,"b""why shouldn't we run it here?"""
9902,349073889,"b""I don't think we can change it. Operations API is out public API so that would be breaking change. You can add additional property and mark `public DateTime DateTime { get; set; }` as obsolete.\r\n\r\nThen both `DateTime ` and `StartTimeLocal ` needs to be provided in `ToJson()`"""
9902,349100273,b'The `DateTime` property name can stay (I changed it for convenience).'
9899,348956686,b'Minor: connection -> Connection'
9899,349028620,b'Put it inside a finally? '
9899,349028914,b'I think we want to make this slightly smarter. Do we have any state around the connection?\r\nCan we see when was the last time we got something from it?'
9899,349081744,b'done'
9899,349088860,b'We can have the last heartbeat time and last etag from source (and maybe other stuff as well).\r\nDo we want here a better exception? or we want to decide which connection should be dropped?'
9899,349092990,"b""We always want better errors :-)\r\nBut yes, if the old connection hasn't had communication recently, we want to drop that and let the new one in"""
9899,349105409,b'Do we really need to calculate that with the usage of `Ticks`? :) \r\n\r\n- Can we use `new DateTime(value.LastHeartbeatTicks)` ?\r\n- `TimeSpan.FromMinutes(1)` - please move to static readonly field'
9899,349311325,b'done'
9875,349618899,b'done'
9875,349619784,b'done'
9875,349622035,b'done'
9908,350842997,b'Why does evict goes here?'
9908,350843495,"b'Create a new instance, and null the old one.\r\nThat way, we can get call on our own changes and safely handle them'"
9908,350843604,b'New instance here as well'
9908,351186184,b'We need the old one since we track those entities'
9908,351186867,b'Because we cannot Evict during `OnBeforeStore`'
9916,351704795,b'So we _never_ switch from `true` to `false` ?'
9916,351741520,b'Why do we do this here?'
9916,351745299,"b""I'm not seeing usage of this?"""
9920,351844804,"b'This seems like a global change that we are doing.\r\nWe can use: https://docs.microsoft.com/en-us/dotnet/api/system.net.servicepoint.maxidletime?view=netframework-4.8#System_Net_ServicePoint_MaxIdleTime\r\n\r\nInstead, no?'"
9917,351695817,"b""Which is hooked to OnDatabaseLoaded event, so we'll do it on the actual database load, right?"""
9917,351696690,b'Can we add database names we tried? - `missingDatabases`'
9917,352465485,b'Yes. Updated the comment'
9917,352467444,b'done'
9916,352492753,b'Not in the same transaction.'
9916,352493080,"b""This is for debug purpose to assert that we don't move the global change vector back in time. """
9916,352499694,"b""I don't follow. Can you elaborate? What's purpose of it then?"""
9916,352512624,"b""This property is for debug assertion to validate that we do not moving the global change vector back in time (or conflicted). \r\n\r\nFor example if it was `A:10 B:5` it shouldn't be set back to let's say `A:11` or `B:5`.\r\nBut there are some exceptions to this, for instance when we remove unused change vector entries. \r\nIn this case we know that we will move the change vector back in time, so we need to skip the assertion.\r\n\r\nWe set the global change vector at the end of each transaction.\r\nSo once we set it to `true` we don't want to set it back to `false` until the transaction is over."""
9916,352537153,b'Thanks. Makes sense'
9916,352548499,b'@karmeli87 Can you answer this comment?'
9916,352551761,"b'We might put the the `local` one which after the removal of the entries is conflicted with the current global change vector, so we want to skip the assertion.'"
8512,352570232,"b""@ayende I'm still seeing the following from time to time \r\n\r\n```\r\n2019-12-02 10:17:43.7516|73|Warn|Raven.Database.Prefetching.PrefetchingBehavior|Error happened on discarded future work batch\r\nSystem.AggregateException: One or more errors occurred. ---> System.AggregateException: One or more errors occurred. ---> System.Threading.Tasks.TaskCanceledException: A task was canceled.\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\r\n   at Raven.Database.Prefetching.PrefetchingBehavior.<>c__DisplayClass97_0.<AddFutureBatch>b__2(Task`1 t)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()\r\n   --- End of inner exception stack trace ---\r\n---> (Inner Exception #0) System.AggregateException: One or more errors occurred. ---> System.Threading.Tasks.TaskCanceledException: A task was canceled.\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\r\n   at Raven.Database.Prefetching.PrefetchingBehavior.<>c__DisplayClass97_0.<AddFutureBatch>b__2(Task`1 t)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()\r\n---> (Inner Exception #0) System.Threading.Tasks.TaskCanceledException: A task was canceled.<---\r\n<---\r\n\r\n```\r\n\r\nwonder if\r\n\r\n```\r\n                var isTaskCanceledException = task.Exception?.InnerException is TaskCanceledException || task.Exception?.InnerException?.InnerException is TaskCanceledException;\r\n                if (task.Exception != null && !isTaskCanceledException)\r\n                {\r\n```\r\n\r\nor logic with flattening the exception would be preferred?\r\n\r\nHappy to send in a PR. I tried to see how I can repro this in the tests you have for the prefetch behavior but I failed to do so within reasonable time\r\n\r\nIt seems due to the nested nature of Continuations we are essentially getting nested aggregate exceptions"""
8512,352573606,b'Added https://github.com/ravendb/ravendb/pull/9926 in case you want to proceed with this'
9875,353150779,b'We still need to process tombstones of docs - if a document is deleted then we also need to handle it and delete related entries from index. I have introduced source document id (`sourceDocId()`) in order to handle that. \r\n'
9875,353151007,b'Added support for TS Map-Reduce'
9875,353151643,b'done'
9875,353151866,b'done'
9927,353127353,b'Is this enough jitter? Can we increase it?'
9927,353127508,"b""Didn't we already wait here?  `await ConnectionInUse.WaitAsync(timeToWait) `"""
9927,353187426,"b'The problem occures when ConnectionInUse is not turned on, and we go straight to this line'"
9927,353187854,"b""It's enough IMO, even without it, the problem was resolved, because Task.Delay is not too accurate"""
9929,353208915,b'how are normal errors handled now?'
9929,353212998,b'This is fine. Copy from `MapDocuments`'
9929,353213900,b'Can we avoid this? This will conflict in 5.0 and I do not see any benefit at the moment.'
9929,353215682,b'This is useful when we have a document that is referenced by many documents'
9929,353219277,"b""Ok, I haven't noticed that you have removed the List."""
9929,353219469,"b""Let's dispose the doc otherwise."""
9929,353281554,b'done'
9900,353620703,b'Backward compatibility issue. Create separate overload.'
9900,353620748,b'@grisha-kotler ?'
9900,353620866,b'@grisha-kotler ?'
9921,352357261,b'```suggestion\r\n            DateTime? wakeupDatabase = null;\r\n```'
9921,352357301,b'We can remove this:\r\n`wakeup.Value == DateTime.MaxValue.ToUniversalTime()`'
9921,352485562,"b'This can actually throw, I think.\r\nIf you have a local time where the UTC is beyond the limits, no?'"
9921,353150300,b'done'
9921,353150343,b'done'
9921,353603865,"b""I would prefer this to not be 'static'. You can get instance of RavenServer in tests and access DatabasesLandlord there."""
9921,353604734,"b""Let's avoid changes like this. Readability here is -10"""
9921,353821218,b'done'
9903,349448980,b'Otherwise?'
9903,349449052,b'Can this run concurrently?'
9903,349449705,"b'```suggestion\r\n                                databaseTopologyAvailabilityExplanation[member] = ""Is the mentor node and a valid member of the topology, it should be the mentor node"";\r\n```'"
9903,349921365,"b'k, will debug.assert that'"
9903,349921410,"b'no, the failover does not run concurrently and the _forcedTopologyUpdateAttempts is managed per instance'"
9903,349921584,b'done'
9903,350675068,b'@maximburyak is that TODO still relevant?'
9903,350677042,"b'Actually why? Isn\'t it too strong requirement?\r\n\r\nThe commit message introducing this is ""Handle passive nodes during subscription connection "" although this will affect much more than just subscriptions, right? So want to double check that.'"
9903,350811408,"b'This will affect only mechanisms that needs the TCP info for a database, which is only subscriptions AKAIK. \r\nWe have a similar validation in our DocumentsHandler'"
9903,350811800,"b""Yes, not something that in the scope of this PR, but it's a nice thing to do."""
9903,351155498,b'@karmeli87 What do you think? I see we have usage of this in `ReplicationLoader.GetPullReplicationTcpInfo`:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/ef7089368ffa23dd2d65a78bd6f2d155bcb53700/src/Raven.Server/Documents/Replication/ReplicationLoader.cs#L1048'
9903,351156169,b'Can you create issue for that?'
9903,351254267,b'NP: https://issues.hibernatingrhinos.com/issue/RavenDB-14307'
9903,351680708,"b""It is fine, I guess you shouldn't pull data from a node that is in passive nor you can't get the tcp info for other nodes in the cluster."""
9903,351719960,b'@karmeli87 Okay. Just to double check - do we need explicit handling for that in Pull Replication\r\n\r\n@maximburyak Do we have a test for that scenario?'
9903,353642539,b'instead of `\\n` use `Environment.NewLine`'
9903,353642916,b'If you want to keep 10 messages then it should be `>=` because you are adding new message 2 lines below'
9903,353643537,b'public readonly'
9903,353644005,b'Should we extract currentState to local variable? it can change during the execution'
9903,353645709,b'@karmeli87 @maximburyak ping?'
9903,353777222,b'this is fine'
9903,353777313,b'ok'
9903,353777373,b'ok'
9903,353777437,b'ok'
9903,353817016,b'You can use local variable in 2nd check also'
9903,354163068,"b'sure, missed it'"
9903,354233587,"b'Still missing there, no?'"
9903,354234385,"b""I don't see this?"""
9941,355298648,b'can we put that info to placeholder instead to title? If it fits'
9941,355412743,b'![image](https://user-images.githubusercontent.com/17376974/70434496-0718d400-1a8d-11ea-87fd-4768e3d50297.png)\r\n'
9941,355424000,b'please make input wider? '
9941,355494484,b'no need for title no - we have placeholder'
9941,355569563,b'done - title removed'
9941,355570542,b'done'
9933,355996708,b'Create a separate issue for this?'
9933,356000030,"b""I do not like that this is only for one case here. Shouldn't this be just after Assert in this method?"""
9933,356000254,b'This breaks binary compatibility. Can you create a separate overload for this?'
9933,356001685,b'Do we support concurrent cloning of blittable?'
9933,356003361,b'Maybe it would be better to set default broadcast timeout in conventions to this value instead of introducing nullable?'
9933,356004460,b'Maybe set default in conventions'
9933,356004806,b'DefaultRaftBroadcastTimeout?'
9933,356007513,b'This breaks backward compatibility'
9933,356008146,"b""This doesn't look correct? `command is IRaftCommand == false` ?"""
9933,356012260,"b""Isn't this method a bit of an overkill? SemaphoreSlim should be enough? It would make this method more readable."""
9907,353756560,"b'This means that we are processing Document Tombstones, right?'"
9907,353760143,b'We probably need always to subscribe to document deletes because of this.'
9907,355947830,"b""Yes, that's correct. It was working in the test because we forced to stop / start index"""
9933,356508723,b'https://issues.hibernatingrhinos.com/issue/RavenDB-14349'
9933,356509627,"b'It make sense to me that cloning the same object on the same context should return `this`.\r\nBut was afraid to make this globally (without this parameter), since someone might rely on the fact that cloning gives a completely new instance. '"
9933,356528973,"b""I'm not saying that we should not have it, just worried that we are only using this variable when we do not have modifications."""
9945,355696807,b'Is there a match between the etag and the change vector?\r\n_should_ there be?'
9945,355697705,b'why leave commented code?'
9945,355924308,"b'I think there should be a match.\r\nBut, does it really matter?'"
9945,355926952,b'removed'
9945,355996147,b'Why do we need to make the loaded aware of tomstones? Why was it not enough that each process implemented `ITombstoneAware`?\r\n\r\n'
9945,355996520,b'Why you no longer use `EtlProcessState.GetLastProcessedEtagForNode` ?'
9945,356041302,"b""Because even node that isn't responsible for the ETL should take it into account.\r\nIt can't purge the tombstone until the responsible  node sent it successfully."""
9945,356042219,b'This dictionary is updated on the responsible node.\r\nHow the other nodes should know if it is okay to delete their tombstones?\r\n '
9945,356049279,"b'Oh, I see it now. Thanks'"
9945,356050070,b'Makes sense.'
9945,356479350,"b""When we have a backup with `Full Backup/Snapshot` without an incremental, we don't need to keep the tombstones at all."""
9945,356490756,"b""I think we do need to keep the tombstones... consider we have an ETL or external replication task that didn't sent the tombstones yet."""
9945,356516194,"b""We don't backup tombstones during a full backup"""
9945,356550020,b'done'
9933,356557831,"b'you are correct, I will move the `CreateRequest` to be synchronous.'"
9933,356559109,b'done'
9933,356559164,b'done'
9933,356559650,b'done'
9933,356560993,b'done'
9933,356564666,b'done'
9933,356817564,"b""This is likely going to cause issues and should be removed.\r\nScenario, we have a blittable on raw data storage\r\nWe clone it explicitly, because we can't modify it and write at the same time.\r\nYou have now broken the write, because we read from where we write.\r\n\r\nOther issues are about modifying the instance, disposing the old one and then using the new one, etc.\r\n\r\nLet's roll back this change."""
9933,356817895,"b'Why is this concurrent, at all? The command is single threaded, after all.\r\nwhen we do stuff like read faster, we clone the _command_.'"
9950,356769317,"b'I cannot recall details, but removing from the same tree that we are iterating could cause a corruption.'"
9942,355298084,b'Why is this in a finally clause?'
9942,355897741,b'Done'
9942,355930009,b'Should we NotifyListeners about this? '
9942,355932142,"b'It is CPU bounded, no? If it is we might what to set `MaxDegreeOfParallelism` to the number of cores.'"
9942,355945013,b'Change to readonly field'
9942,355946029,b'Not sure if we should not take 50% of the cores or 75%. Thoughts?'
9942,355952493,b'+1 for 50%'
9942,355981756,"b""Remember to handle a single core scenario as well.\r\nBut let's not use the cores on the machine, use the _licensed_ cores."""
9942,355982677,b'But all of licensed ones or 50%?'
9942,355985727,"b'Math.Max(1, LicensedCores / 2)'"
9942,356479688,b'done'
9942,356479954,b'done'
9942,356480271,"b'Actually Math.Max(1, UtilizedCores / 2)'"
9942,356603113,"b'Should we continue to try and create the next index? \r\nSince we will notify the client about a failure, but still will try to create the next index,'"
9942,356726150,"b'This is running in parallel, the next index might have already run'"
9942,356765957,b'I do not think that this context is needed?'
9942,357104200,b'removed'
9950,357122955,"b'This is fine, we iterate once and re-create the iteration afterward'"
9907,357138266,b'Maybe `IDynamicMetaObject` ?'
9958,357814170,b'Can we avoid the deserialization and return the blittable?'
9958,357817854,"b'Likely not. You are modifying the data, after all.\r\nAnd the blittable just point to the data.'"
9958,357825770,"b'This is not used in any hot-paths at the moment. IIRC this is used in RemoveNodeFromCluster, which is not that common.'"
9865,342776247,"b""I can't follow what you are doing with this here, but that is suspicious and likely racy behavior"""
9865,351299975,"b'Am I reading this wrong, what can cause us to get a `null` here except at the end of the input?'"
9865,351311665,"b'Yes. `l` here contains the result of `sr.ReadLineAsync().Result`. It is `null` when nothing is being read (not the really end the process though). So as long as something is being sent to the standard stream within 60 seconds, it is ok.\r\n(This is at least what I understand from the previous implementation)\r\n\r\n'"
9865,351315508,"b'`ReadLineAsync` will only return null on end of input, no other scenario'"
9865,351317160,b'True.. (https://docs.microsoft.com/en-us/dotnet/api/system.io.streamreader.readlineasync?view=netframework-4.8#returns)\r\nSo we read line by line until no output.. I do not see where the problem is... (?)'
9865,351321441,b'Your code here does: `if (DateTime.UtcNow - lastReceivedLine`\r\nIt is attempting to handle the case where we have no input from the process.\r\nBut the current behavior means that it will never happen'
9865,351323784,"b""Ok, you mean ReadLineAsync will block if process hangs and will not return null. \r\niirc I've checked that but I will check again."""
9865,351335033,"b'Yes, there is no input there, so it will not return anything.'"
9914,350777327,b'maxResult: 1'
9914,350777870,b'We can skip this if `backupFiles.FirstFile == null`'
9914,350780911,b'There is no startAfter. You need to go over all the blobs using the continuation token.'
9914,350781516,b'Please open an issue for that'
9914,350782365,b'```suggestion\r\n        private string _nextMarker = null;\r\n```'
9914,351200015,b'https://issues.hibernatingrhinos.com/issue/RavenDB-14306'
9914,351237329,b'done'
9914,351237363,b'done'
9914,351237384,b'done'
9914,351237391,b'done'
9914,353648242,b'Why this was changed? Can this cause some issues now? What are the benefits?'
9914,353667164,"b""shouldn't we use `now` local variable here?"""
9914,353668039,b'Why we changed this?'
9914,353668974,"b""we already have it in a different test. Let's unify this."""
9914,353675416,b'This is the version that supports bulk instert'
9914,353851816,b'done'
9914,353854183,"b'we can skip it, it is not a backup file.'"
9914,353857640,b'done'
9914,353970572,"b""This can return 'nulls' ? Are we expecting that?"""
9914,353972446,b'Fix formatting here'
9914,353972614,b'we should use `await` here? The method is `async` '
9914,353972652,b'we should use `await` here? The method is `async` '
9914,353974099,b'What is the response? Is there no other way to parse it?'
9914,354331233,b'done changed the method to sync'
9914,354332054,"b'done, changed the method to sync'"
9914,354336334,b'done'
9914,354352662,b'this is old code'
9915,353816098,"b""I'm wondering if we should use some kind of an array pool for this. From the other side this is cached in query cache?"""
9915,353819764,b'can we make this class partial and move all TS stuff to `QueryResultRetrieverBase..TimeSeries.cs` ? This becomes monolith.'
9915,353822848,b'Or maybe we can extract that to separate class and introduce field e.g. `TimeSeries` in this retriever?'
9915,357142873,"b""This is fairly constant, I don't think we are going to need more. \r\nEspecially because it will be complex to return them.\r\nThat said, why not use a List here?"""
9915,357143717,"b'This looks really awkward, why do we have to this it this way?'"
9915,357145169,"b'I like this idea, yes'"
9915,357148057,b'Can this be a parameter? '
9915,357148309,"b'Note, this does allocation per call. Can we avoid this?'"
9915,357149816,b'Why did you add these?'
9915,357153075,"b""Can I also write:\r\n\r\n```\r\ndeclare timeseries out(x) \r\n{\r\n    from x.HeartRate between $start and $end\r\n        load $config as src\r\n        where (Values[0] between src.Min and src.Max) OR \r\n              (src.IsoCompliant = true AND Values[0] > $val)  \r\n    group by '1 month' \r\n    select min(), max(), avg()\r\n}\r\n```\r\n\r\nWhere the `$config` is some arbitrary document?"""
9915,357291289,"b'what do you mean? \r\nsomething like that? \r\n```\r\ndeclare timeseries out(x, index) \r\n{\r\n    from x.HeartRate between $start and $end\r\n\twhere Values[index] > 100\r\n}\r\n```'"
9915,357292117,b'no good reason.\r\nchanged to List '
9915,357292168,b'done'
9915,357292195,b'removed this '
9915,357292229,b'done'
9915,357292252,"b'otherwise, if the segment has an item with missing values (NaN), then min and max will both be double.NaN'"
9915,357292282,"b""no, this is not supported, we can only load by Tag\r\ndo we want to support that?\r\n\r\nwe can achieve the same by loading the document in root RQL and \r\npass it as an argument to the timeseries function, no? \r\ne.g.\r\n```\r\ndeclare timeseries out(x, src) \r\n{\r\n    from x.HeartRate between $start and $end\r\n        where (Values[0] between src.Min and src.Max) OR \r\n              (src.IsoCompliant = true AND Values[0] > $val)  \r\n    group by '1 month' \r\n    select min(), max(), avg()\r\n}\r\nfrom users as u\r\nload $config as src\r\nselect out(u, src)\r\n```"""
9915,357552796,b'Great error message'
9915,357553805,b'Do we need to check for null here? Before you put it in the `_loadedDocuments` or return it below'
9915,357977988,"b""right, I missed that.\r\n\r\nbut now that I'm thinking about it, I'm not sure if we should throw on null document/null tag. maybe just return null?\r\n\r\nIt might be useful to support things like this:\r\n\r\n```\r\nfrom x.HeartRate between $start and $end\r\n\tload Tag as src\r\n\twhere src != null and src.Accuracy > 2\r\n```"""
9915,357978488,"b'Good point, you are right'"
9962,358086275,b'do you know that pullAll mutates input array? Is it desired here? '
9962,358109193,"b""1. Here it doesn't matter that the input array is mutated -\r\n    because it is the array resulting from `_.values()`, Not the original list.\r\n2. I can use `_.difference` if you prefer"""
9962,358109952,"b'ok you are right we have values there as well, so it is fine.'"
9962,358139052,"b""This list does not contain all ServerWide (only) configurations. Also the 'size' suggests that there is something clearly wrong with parsing those. I've created a separate issue to handle that. This is RegEx issue probably: https://issues.hibernatingrhinos.com/issue/RavenDB-14374\r\n\r\n@Danielle9897 Can you fill the list with all the options that are parsed by the current implementation, then after RavenDB-14374 is done, we will update the list?"""
9962,358166619,b'Looking at _IndexingConfiguration.cs_ I see only 3 server-wide options :\r\n\r\n* CleanupInterval\r\n* GlobalScratchSpaceLimit\r\n* MaxTimeToWaitAfterFlushAndSyncWhenExceedingScratchSpaceLimit\r\n\r\n=> What are the other configurations that you mention ?\r\n\r\n\r\n\r\n'
9962,358169552,"b""I was missing 'GlobalScratchSpaceLimit' but I guess this is 'size' ?"""
9962,358178572,"b'Yes\r\nTaken from _configuration.ts:_\r\n\r\n```\r\nsize: ""Indexing.GlobalScratchSpaceLimitInMb"",\r\ncleanupInterval: ""Indexing.CleanupIntervalInMin"",\r\nmaxTimeToWaitAfterFlushAndSyncWhenExceedingScratchSpaceLimit: ""Indexing.MaxTimeToWaitAfterFlushAndSyncWhenExceedingScratchSpaceLimit"",\r\n```'"
9939,355179592,b'It needs to take into account the number of cores on that machine'
9939,355953320,b'There is no good value here. My machine can have 12 cores but different one in the cluster can have only 1.'
9961,358081192,b'Can be removed'
9961,358081576,b'```suggestion\r\n            var iBroadcast = command as IBroadcast \r\n            if (iBroadcast == null)\r\n```\r\n\r\nand use it later'
9961,358082886,b'What happens to the other tasks?\r\nMaybe we can pass `LinkedToken` and cancel them.'
9961,358083603,"b'Or better, record it as a failed request.\r\nIf we have the same command, will it succeed on all of the nodes? (if they are online) '"
9961,358101830,b'```suggestion\r\n            if (command is IBroadcast broadcast == false)\r\n```'
9961,358101915,"b'```suggestion\r\n                var clone = (RavenCommand<TResult>)(broadcast .PrepareToBroadcast(ctx, Conventions);\r\n```'"
9961,358102682,"b'We need to cancel the others, I think.\r\nImportant, we have to be sure that we dispose the ctx properly.\r\n'"
9961,358123903,"b'funny, compilation failed because ""Use of unassigned local variable \'broadcast"".\r\nBut `!(command is IBroadcast broadcast)` works.\r\nWill use girsha\'s solution..'"
9961,358152206,b'internal?'
9961,358153127,b'Set defaults in `DocumentConventions` ctor and remove nullable'
9961,358153163,b'Set defaults in `DocumentConventions` ctor and remove nullable'
9961,358154727,"b""If task is canceled I'm not 100% sure if Exception is set?"""
9961,358155516,"b""Don't we need to wait here for other tasks to 'complete' (become canceled) ?"""
9961,358155791,b'WaitForBroadcastResult'
9961,358157792,"b'if this method will throw we will leak the context, maybe we should have a try/catch clause here and in case of an exception we should cancel everything and return all contexts?'"
9961,358193344,b'done'
9961,358193366,b'done'
9961,358193421,b'done'
9961,358193508,b'done'
9961,358220073,b'done'
9961,358220443,b'done'
9961,358220735,b'I think we want to return as quickly as possible.'
9928,353177325,b'I thought about 10 seconds between checks while state is fine in order to have minimum affect on write speeds'
9928,353178136,"b'25 what? MB, % ? \r\nThe name of the property and its usage looks wrong'"
9928,353178417,"b""Let's make the time configurable as well"""
9928,353178997,"b""And default to 30 seconds, I think.\r\nThis isn't something that we are likely to need high precision for"""
9928,353179734,"b'Here, need to reject _all_ the pending operations that we have, no?'"
9928,353179995,b'`pendingOps`'
9928,353181091,b'Debug code'
9928,353181225,"b'why do we need this?\r\nAlso, there may be multiple concurrent maps to the same file'"
9928,353183624,"b'This is wrong. You are computing the total size of the scratches, but you need the *dirty* size of them.\r\nWe already can tell that from the scrtaches themselves, so trying to do this roundabout way is actually more complex.\r\nHave a way to find all the live scratches and ask them for their used mem'"
9928,354217560,"b'```suggestion\r\n        [ConfigurationEntry(""Memory.PercentageOfTemporaryDirtyMemoryAllowed"", ConfigurationEntryScope.ServerWideOnly)]\r\n```'"
9928,354217955,b'Move the timespan creation to the ctor'
9928,354218970,"b'Use: `totalScratchAllocated += scratchGetAllocated.Value?.Invoke()`\r\n\r\nRight now, you have a race condition here that will kill us with NRE in dedicated thread'"
9928,354219076,"b""Shouldn't the percentage be a double?"""
9928,354220239,"b""I don't like the separate checks.\r\nWe should error if _either_ percentage is too high or amount is too high.\r\nRight now we error on amount only if percentage is too high"""
9928,355975582,"b""Let's be consistent with other configuration options. Rename to `TemporaryDirtyMemoryAllowedPercentage`"""
9928,355975866,b'The config needs to have unit in the name: `TemporaryDirtyMemoryChecksPeriodInSec`\r\nProperty does not have to.'
9928,355976011,b'Should be TimeSetting'
9928,355976245,b'TemporaryDirtyMemoryChecksPeriod should be a TimeSetting'
9928,355976501,b'_parent.Time.UtcNow'
9928,355977016,b'_parent.Time.UtcNow'
9928,355977727,b'Sanity check. Is this fine? There is an additional space between mmap size and scratch dirty and we are using positions for writing values here.'
9928,355981590,"b'FYI. You can do: `result.AvailableMemory.Add(-totalScratchAllocated, SizeUnit.Bytes)`'"
9928,357979208,b'This space is needed'
9959,357801360,"b""I'm not sure that I'm following, what are you storing under this field name?"""
9959,357802836,b'Result of Map function for Map TS indexes.'
9959,357812070,"b""Why is that needed? Aren't we outputting the fields as usual here?"""
9959,357826685,"b'This is how we are handling that in Map-Reduce and since Map TS is behaving similar to Map-Reduce (qyerying-wise). I;m storing outcome same way as there. The returned query results from Map TS are exactly the values from the index, not the TS entries.'"
9959,357835472,"b'I see, make sense, then.'"
9954,357288275,b'make this prop lower case'
9954,357289306,"b""what's the purpose of this? """
9954,357289483,b'can we name parameters same as props we assign to? '
9954,357290759,"b""remove this - this component shouldn't know about from view we are coming from\r\n\r\nit operates on index[] or indexDefinition[] no matter from where it comes from."""
9954,357291385,b'can this class have 2 static factory methods? One for index and second for index definition? '
9954,357291807,b'use factory here. No need for { return ...} when single statement. You simply write:\r\nmap(x => indexInfoForDelete.fromIndex(x))'
9954,357291887,b'remove this'
9954,357292014,b'oops.. done'
9954,357293034,b'done'
9954,357293375,"b'can we move html to html file and expose boolean variable here and in html use: data-bind=""visible: thisVariableName"" ?\r\n\r\n'"
9954,357293976,"b'no need for $data, simply indexName'"
9954,357294385,b'done'
9954,357294501,"b""remove this comment and simply concat '(' with second span text? """
9954,357294737,b'remove $data here in below'
9954,357295014,"b'please use contact to avoid: span, span, span ;-)'"
9954,357295420,b'remove $data + just double checking: if ReferenceCollection is defined then use plular form in other case use singular? '
9954,357295735,"b'use visible tag, instead of if - it will reduce nesting.'"
9954,357296746,"b'I wonder if we should use small here - it is warning something should pay attention, on the other hand it is small to avoid paying attention ;)'"
9954,357297820,"b""title: Delete this index - I wouldn't care about index type here. """
9954,357297968,"b""When creating the index, if you specify a 'pattern',\r\nthen the server creates the referencing documents collection with this extension.\r\nYou don't get to choose this collection name.\r\n\r\ni.e if reduce-results go to **ABC** collection \r\nthen the referencing documents will be in collection: **ABC/References**\r\n\r\nI can of course remove the readonly, and paste directly in the constructor.\r\n"""
9954,357298427,b'removed'
9954,357301654,b'please leave it. It is fine. I was just curious about purpose. Thanks for explanation. :)'
9954,357537013,b'Wrong comment'
9954,357962034,b'....fixed :)'
9954,357962098,b'done'
9954,357962690,"b""It looks ok with small and with 'regular' size\r\nSwitching to regular - so it looks like this:\r\n\r\n![image](https://user-images.githubusercontent.com/17376974/70860221-9dcf1000-1f27-11ea-9364-c442cf705f01.png)\r\n"""
9954,357964761,b'done'
9954,357965114,b'right .... $data removed .....  :)'
9954,357965388,"b'* if referenceCollection is defined it will show:\r\nReduce Results **Collections**: aaa, aaa/References\r\n* if not defined it will show:\r\nReduce Results **Collection**: aaa\r\n'"
9954,357965440,b'done'
9954,357965456,b'done'
9954,357965689,"b""let's leave regular  - we had few reports that font size is too small it is better to use normal font size especially for warnings. """
9954,357965786,"b""I'm afraid I still don't get it. \r\n\r\nShouldn't be like this:\r\n\r\nReferenceCollection.length === 1? 'Collection' : 'Collections'? """
9954,357966129,b'done (regular)'
9954,357966340,"b'_referenceCollection_ is not a list/array.\r\nIt either has the string _\'aaa/Reference\'_ or """",\r\nas defined in the constructor, depending on the index.'"
9954,357966601,b'yes - done'
9954,357967509,b'done - much better like this :)'
9954,357967526,b'done'
9954,357969937,b'done'
9954,357969951,"b'done - so now it is clearer like this\r\n\r\n```\r\n<span data-bind=""visible: referenceCollection, text: \'(\'.concat(\'Reduce Results Collections: \',reduceOutputCollection, \', \', referenceCollection, \')\')""></span>\r\n<span data-bind=""visible: !referenceCollection, text: \'(\'.concat(\'Reduce Results Collection: \', reduceOutputCollection, \')\')""></span>\r\n```\r\n\r\n'"
9954,358083980,b'in js we concat string using `+`'
9954,358115393,b'right - done'
9954,358206297,b'2 things here: \r\nWhy in index we have: reduceOutputCollection but in index definiton we have: reduceToCollectionName?\r\n\r\nCan we use same name? \r\n\r\nSame for:reduceToCollectionName vs patternForOutput. \r\n\r\nput `!!` before: index.patternForOutput())'
9954,358207554,b'please avoid having variables which relay on observables since it might cause issues. Either make showWarning computed or make indexesInfoForDelete array (w/o observable)'
9954,358208463,b'add visible as well'
9954,358331818,"b""done - I added 'visible' - but it really looks the same here (w/ and w/o)"""
9954,358337465,b'done - made `indexesInfoForDelete` regular array'
9954,358434734,"b'ok, but we are protected when style change. '"
9954,358636805,b'done - I unified the relevant variables names in _index.ts_ and _indexDefinition.ts_'
9907,358743984,b'Yes. Changed to `IDynamicMetaObjectProvider`'
9947,356458655,b'Only if the number of cores in the license was changed (if `MaxCores` was changed)'
9947,357255840,b'done'
9963,358093635,"b'```suggestion\r\n        public static void WriteMetadata(this AbstractBlittableJsonTextWriter writer, Document document, BlittableJsonReaderObject metadata, Func<string, bool> filterMetadataProperty= null)\r\n```'"
9963,358093696,b'Naming is important'
9963,358094034,"b'I think it actually might be better to do this outside. That is, create 4 methods to do this filter.\r\nSelect between them based on the `_OperateOnTypes` in the ctor, and then pass it in.\r\nThat would save some indirection in a hot code path\r\n'"
9963,358264284,b'done'
9963,358317079,"b'done, please check if I understood correctly.'"
9963,358656915,b'add \r\n\r\n```\r\nif (skipCountersMetadata == false && skipAttachmentsMetadata  == false)\r\n    return false;\r\n```\r\n\r\nThis way you will avoid doing string comparisons for each metadata property if both of them are `false`'
9963,358658506,"b'It would be better to have `Func<LazyStringValue, bool>` to avoid converting each metadata property to string'"
9963,358664209,b'done'
9963,358664690,b'done\r\n'
9875,358843184,b'https://github.com/ravendb/ravendb/pull/9972'
9932,355960808,b'We need a test for this.'
9932,357102982,b'done'
9875,359314839,b'https://issues.hibernatingrhinos.com/issue/RavenDB-14389'
9875,359376944,b'done'
9976,359817759,b'```suggestion\r\n            ForTestingPurposes?.BeforeHandleClusterDatabaseChanged?.Invoke(_serverStore);\r\n```'
9976,359817810,b'This avoid the allocation'
9978,359509961,"b'![image](https://user-images.githubusercontent.com/1250431/71114142-6d110400-21cf-11ea-98e5-92b159e9abd3.png)\r\nso please use let indexTextHtml  = """";\r\n\r\nand always append.'"
9978,359510727,b'validator: (reduceContent: string) => reduceContent && reduceContent.trim()\r\n\r\nso we always return boolean value.'
9978,359510923,"b""I think we don't use exclamation marks in validation messages. Am I right?"""
9978,359511519,"b""let's avoid word: above / below in validation messages.\r\nWhy in reduce function emptyness we check outputReduceToCollection?"""
9978,359511655,b'remove exclamation mark'
9978,359514381,"b'please bind this in constructor like we usually do, see: https://github.com/ravendb/ravendb/blob/af780d93fef03cf52acccf6de13977bd11c0db4e/src/Raven.Studio/typescript/viewmodels/database/indexes/visualizer/visualizer.ts#L46'"
9978,359514421,b'same here'
9978,359514463,b'same here'
9978,359515183,"b""please don't use nbsp; for formatting."""
9978,359515579,b'do we need that? also class name suggests it is something global. It might be misleading in intellisense. '
9978,359515711,b'same here. '
9978,359515955,b'don;t we have set this up globally? Do we need to override this only here? '
9978,359516122,b'same here - tooltip inner overrides global value + ties to .tooltip style'
9978,359847004,b'done'
9978,359849789,b'done - removed the exclamation mark.'
9978,359850047,"b""1. done - removed 'above'\r\n2. on second thought - removing this validation, leaving only the 'required'"""
9978,359853864,b'done - removed this validation'
9978,359855694,b'right - done'
9978,359856185,b'done'
9978,359856233,b'done'
9978,359894037,b'removed  (&nbsp was not introduced in this pr)'
9978,359906420,"b'1. Moving this class (and _.no-padding-right_) to be global on _styles-common.less_\r\n2. These classes are used in _editIndex.html_ to make the new bootstrap columns  **closer** to each other.  Without this, the items look too far apart.\r\n\r\nIf I use `col-md-3` instead of `col-md-4`  for the left block then text breaks,\r\nso this was my prefered solution.\r\n\r\n![image](https://user-images.githubusercontent.com/17376974/71183961-9c804900-2281-11ea-9b38-55a06e1c627b.png)\r\n'"
9978,359911245,b'1. moved to _styles-common.less_\r\n2. used in _indexes.html_ to get the new icons in place'
9978,359932934,b'ok:)'
9978,359933428,b'ok so now we can use no-padding anywhere ;-)'
9978,359933611,b'ok'
9978,359944610,"b'1. I think we should override here \r\n    I see other places (such as _dashboard.less, metrics.less, index-performance.less_ ) that have \r\n   other overriding values\r\n\r\n2. Overriding is needed - as can be seen in the images\r\n\r\n3. Should we **unify** all over studio (i.e. tooltip-narrow -vs- tooltip-wide) ?\r\n\r\n![image](https://user-images.githubusercontent.com/17376974/71189433-824b6880-228b-11ea-87ab-18193f491002.png)\r\n![image](https://user-images.githubusercontent.com/17376974/71189456-88d9e000-228b-11ea-9aa1-ec9c952a43cf.png)\r\n'"
9978,359947414,"b'I changed _max-width_ to 100% for the _inner tooltip_\r\nbut for now, I am leaving this here, see above comment'"
9978,359849304,b'done ( + fixed the condition)'
9987,360367369,b'maybe `createDatabaseCommand` ? It is called like that in the Client API'
9987,360375669,b'(talked with @ppekrol about that personally) - solved'
9955,357558295,b'I really want to be able to pass strongly typed value here.\r\n`TimeRange.Months(1)` ?\r\n'
9955,357558543,b'Really nice'
9955,357790189,b'Builder pattern would be best IMO e.g. `.GroupBy(g => g.Months(1))`'
9955,357792449,"b'Oh, I really like it'"
9955,360317318,b'internal'
9955,360317359,b'internal'
9955,360325399,b'Maybe TimeSeriesRawResult?'
9955,360325520,b'Maybe TimeSeriesAggregationResult?'
9955,360327358,b'return this?'
9955,360327958,"b""Let's change to explicit interface implementation. It is way easier to track code changes then when interface changes."""
9955,360328015,"b""Let's change to explicit interface implementation. It is way easier to track code changes then when interface changes."""
9955,360328263,b'Maybe TTs -> TTimeSeries'
9955,360328285,b'Maybe TTs -> TTimeSeries'
9955,360329670,b'Do we need `ITimeSeriesLoadQueryable` also here?'
9955,360888393,b'done'
9955,360888419,b'done'
9955,360888448,b'done'
9955,360888471,b'done'
9955,360888542,b'done'
9955,360888575,b'done'
9955,360888607,b'done'
9955,360888657,b'done'
9955,360897489,"b'this can only happen if the expression ends with:\r\n```.Where((ts, tag) => ...)```  which is not valid (missing ToList)\r\nadded a check to catch this case and other cases with wrong return type + tests'"
9977,359818126,"b""`result.LowerId` is `LazyStringValue`. Although here we force to materialize it as `string` because that's the argument of `UnwrapLowerIdIfNeeded`.\r\n\r\nPlease also see my comment below"""
9977,359818845,b'We `lowerId` be `LSV` instead of string? \r\n\r\nThen instead of calling `IndexOf` we could check if at position `lowerId.Size - 2*sizeof(long)` we have `ConflictedTombstoneIdMarkerString`?'
9977,359819417,b'Why do you take an 8 bytes value for this?'
9977,359819595,"b'We typically use `30`, a byte, the record separator in ASCII'"
9977,359819717,"b'Here you would check if the value is > 9, and if so, if lowerId[len-9] == 30'"
9977,359819963,"b""However, you seems to be checking doing string comparisons here on value that isn't actually a string."""
9977,359898344,b'Please add a comment that long is etag and byte is separator char'
9977,359903077,b'TODO ?'
9977,360102164,b'fixed'
9977,360314681,b'null?'
9977,360316802,"b""How this affects all GetTombstonesFrom methods? E.g. What are we expecting to export via Smuggler? Let's talk about this on Sunday/Monday."""
9977,360695677,"b'This will delete the existing values in the same collection, right?\r\nBut what about removing the postfix for the value when we delete the oldest value?'"
9977,360696884,"b""Yes, this will delete the tombstone only if it in the given collection.\r\n\r\nWe don't care about removing the suffix, it is transparent to the other components since we always unwrap it (for replication, indexing, etl, etc.)."""
9977,360709721,"b'@arekpalinski I do need to parse it for the export/backup, so I ended up doing it like this.'"
9977,360790276,b'Are we unwrapping here anything now? It looks like it takes the whole buffer so it will be the same as `lowerId`?'
9995,360986836,"b'I wonder if these should be higher level classes.\r\nThe issue is that users may want to use them in queries, no?'"
9977,360988926,b'why this change?'
9977,360991888,"b'The ""source"" change vector is actually `_lastSentChangeVectorDuringHeartbeat`, which normally will be delayed in comparison to the destination change vector, which is the `LastAcceptedChangeVector` that gets updated every replication batch.'"
9996,360983479,b'What are you actually testing here?'
9996,360983509,"b'This task ""leaks""'"
9996,360983825,b'Why?'
9996,361161102,"b""On store dispose we send command to delete the db, and then WaitForIndexNotification of that command, which has a timeout of 15 sec, but the DB dispose has '[drain requests code](https://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/Documents/DocumentDatabase.cs#L633)' which can take up to 60 secs, and make the WaitForIndexNotification throw timeout exception and make the test fail. """
9996,361162789,"b""1. On store dispose, the WaitForIndexNotification doesn't gets timeout exception, because of  '[drain requests code](https://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/Documents/DocumentDatabase.cs#L633)'\r\n2. In DeleteDatabaseCommand we assign '[new topology](https://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/ServerWide/Commands/DeleteDatabaseCommand.cs#L74)' _without_ databaseId, if we have ClusterTransactions kicking in for that DB, they would throw on '[wrong serialization](https://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/ServerWide/ClusterStateMachine.cs#L764)'\r\n3. After db deleted and ClusterTransactions are still kicking in, the db record would be null, and we get NRE."""
9996,361170947,b'it is stopped when store gets disposed\r\nhttps://github.com/ravendb/ravendb/blob/v4.2/test/RachisTests/SubscriptionFailoverWIthWaitingChains.cs#L310'
9995,361299213,b'I will sync with @aviv86 after both of our PRs are merged.'
10004,361849994,"b'```suggestion\r\n        private static Exception CopyPalFile(string toFilename, string fromFilename, out Exception exception)\r\n```'"
10004,361850009,"b""Here you lost the exception trace, `throw new InvalidOperationException('msg', e);`"""
10004,361851821,b'done'
10004,361851825,b'done'
9989,361303276,"b'summing up `_currentSegment.SegmentValues.Span[0].Count` is incorrect\r\nwe should sum up `_currentSegment.NumberOfEntries`\r\nhowever, `_currentSegment.NumberOfEntries` does not exclude the ""dead"" entries.. so we might also need to keep a ""dead count"" in the `SegmentHeader`'"
9989,361316331,b'why is this incorrect?'
9989,361437543,"b'for example, if we have series (item1, item2) :\r\nitem1.Values = [1, 2, 3]\r\nitem2.Values = [NaN, 2, 3]\r\nthen `Span[0].Count` is 1\r\nbut I expect `GetNumberOfEntries()` to return 2'"
9989,361445548,"b""I'm pretty sure that this is not a valid option.\r\nThe `NaN` can only appear at the end, not at start / middle"""
9989,361515237,"b""IIRC I copy that from other place (in time series handler)? Could you push correct version to this PR? I'm not familiar with implementation, so I was writing this by mimic other endpoints. """
9989,362736665,"b""ok I took it from here: https://github.com/ravendb/ravendb/blob/85e1eb64b043c29ad724e57748852062ca304ea6/src/Raven.Server/Documents/TimeSeries/TimeSeriesStorage.cs#L406\r\n\r\nI'm not sure if it is correct. @aviv86 Could you verify? """
9989,362760035,b'reported as separate issue:\r\nhttps://issues.hibernatingrhinos.com/issue/RavenDB-14429'
9997,360984060,b'why all these changes?'
9997,360984176,b'Can the temp path be null here?'
9997,360984325,b'use named arg for the boolean'
9997,360984388,b'`doWork` name need to explain what it does better'
9997,360984483,b'What is this change necessary?'
9997,360984545,b'`Rider.cs` ?'
9997,361082390,b'I moved some of the code (the riders) in RemoteConnection file to another file and put them both in a directory called RemoteConnection'
9997,361090168,b'No'
9997,361090553,b'It just for better organization. \r\nBut I will think about how to make it cleaner'
9997,361093828,"b'Oops, should be ""Reader""'"
9997,361300567,b'Maybe change to `Raven.Server.Rachis.Remote`. We will avoid `RemoteConnection.RemoteConnection` all over the place then.'
9997,361300866,b'Can you fix formatting?'
9997,361301968,b'`dryRun` ?'
9997,361302052,b'When this file will be deleted?'
9997,361423132,b'In the `Dispose` of `StreamsTempFile`'
9997,361426405,b'I like this'
9997,362165037,"b""Is this correct? This was moved outside of the loop and switch statement doesn't have '-1' case"""
9997,362168519,"b""Yes, -1 should be sent just in the beginning and in a case we don't need to send the snapshot\r\nhttps://github.com/ravendb/ravendb/blob/6787a88d96c10c061e6b3d88525373c39a6e0873/src/Raven.Server/Rachis/FollowerAmbassador.cs#L510"""
9997,362168776,"b'I think in this way the meaning is more explicit and in a case, we will get ""-1"" in the middle we will get more describe error'"
9997,362330704,b'remove'
9997,362330724,b'remove'
9997,362330727,b'remove'
9997,362330731,b'remove'
9997,362330904,b'remove'
9997,362330906,b'remove'
9997,362330909,b'remove'
9997,362331064,b'Why `break` and not `throw new EndOfStreamException();`'
9997,362331452,"b""Why is this change? It wasn't before, right?"""
9997,362391342,b'I just refactored the read from buffer code to a dedicated function '
9997,362621098,"b'okay, now I understand... I think a cleaner way will be something like this:\r\n```\r\nif (_buffer.Used < _buffer.Valid)\r\n    return ReadFromBuffer(buffer, offset, count);\r\n\r\nreturn _stream.Read(buffer, offset, count);\r\n```'"
9997,363077247,"b'This is likely to be confusing WRT the `System.IO.StreamReader`, better to give a more specific name'"
9997,363077299,b'`using` ?'
9997,363077327,b'Need to change the file name'
9997,363077381,"b""Shouldn't we use `ArrayPool` here?"""
9997,363077395,b'`ArrayPool`'
9997,363077426,b'Need a better name'
10003,361313081,b'Where is the call to `ReadAsStreamUncompressedAsync` now?'
10003,361313796,"b""This is draft PR so I temperately removed it, since I noticed that `await response.Content.ReadAsStreamAsync()` return `GZipStream`, so it make me think that maybe we don't need that function any longer (but I need to dig into it).\r\n"""
10003,361317067,"b""Maybe I wrong, but to me it seems that `ReadAsStreamUncompressedAsync` was relevant only if the server return zipped response without the client supporting it. \r\n\r\nIs it even possible now? and if yes, why it was relevant only for `Raw` and not for `Object` response type as well.\r\n\r\nBut let's tackle this in a different issue I guess."""
10003,361317182,"b'No, you are correct that the http handler should be in charge of this'"
10003,362424843,b'You need to override the Dispose(bool)'
10003,362426278,b'internal'
10003,362426304,b'internal'
10003,362426402,b'Can we put a message here'
10003,362426420,b'Can we put a message here'
10003,362433748,b'done'
10003,362434109,b'removed those 2 methods.'
10003,363077549,"b""Shouldn't we set the `WriteTimeout` here? If there is a smaller timeout already defined?"""
10003,363077556,b'Set `ReadTimeout` ?'
10003,363077580,b'It is fine (and fairly common) to do both read & write operations at the same time.\r\nBut you are using the same `_cts` on both'
10003,363079969,b'Done.'
10003,363081493,"b'You right, we need to set the inner stream timeouts as well.\r\n\r\nAbout the smaller value, I think that if we specify a timeout is should take precedence over the existing one,'"
10031,364295153,"b""That limits us to IPv4 only, no?\r\nI'm not sure that we want this. In tests, sure, but we do want to be able to run on IPv6 as well"""
10031,364298467,b'We do support IPv6 (check few lines up).\r\nIn .NET Core 2.2 `new TcpClient()` and `new TcpClient(AddressFamily.InterNetwork)` are doing the same thing.\r\n\r\n2.2: \r\nhttps://github.com/dotnet/corefx/blob/release/2.2/src/System.Net.Sockets/src/System/Net/Sockets/TCPClient.cs#L23\r\n\r\n3.1: \r\nhttps://github.com/dotnet/corefx/blob/release/3.1/src/System.Net.Sockets/src/System/Net/Sockets/TCPClient.cs#L23\r\nhttps://github.com/dotnet/corefx/blob/release/3.1/src/System.Net.Sockets/src/System/Net/Sockets/TCPClient.cs#L478-L486\r\nhttps://github.com/dotnet/corefx/blob/release/3.1/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs#L76'
10030,364663560,b'Maybe assert here that the `connectionTask` is completed? '
10030,364665636,"b'done.\r\nBut it can be faulted, so I only assert for `IsCompleted`.'"
10038,364898755,"b""Wouldn't it be better to use DisposeOnce? It was created for this purpose."""
10038,364899033,b'We checked that this is not null 2 lines up?'
10038,364949589,b'done'
10038,364949773,b'in the test I do\r\n```\r\ndatabase.ReplicationLoader.DebugWaitAndRunReplicationOnce = null;\r\nmre.Set();\r\n```'
10041,365183812,"b""Can we avoid array allocation? Just `map.Split(' ', ... )` """
10041,365184053,b'Please add `StringComparison.OrdinalIgnoreCase` as second parameter - @ppekrol will make it case insensitive'
10041,365184108,b'Please add `StringComparison.OrdinalIgnoreCase` as second parameter - @ppekrol will make it case insensitive'
10041,365194387,"b""Let's merge those endpoints into one"""
10041,365197979,"b""we can't since we use override there char[] is needed, see:\r\n![image](https://user-images.githubusercontent.com/1250431/72151001-53667500-33a7-11ea-9ffc-c362f7f0f17d.png)\r\n"""
10041,365198152,b'done'
10041,365198175,b'done'
10041,365212203,b'done'
10041,365275851,"b'Yeah, it looks this overload is not available in .netstandard 2.0'"
10049,365582200,"b'```suggestion\r\n                                Assert.Contains(""did not get a reply for operation"", e.Message);\r\n```'"
10049,365588443,b'added messages to asserts'
10049,365706067,"b'If there is no other choice than doing that, then tests like that should be moved to Stress.'"
10049,365708024,"b""There is a race condition between executing 'WaitForCompletionAsync' and 'Initialize'. The 'Initialize' is executed in the background and it can swap the '_result'.\r\n\r\nI would suggest creating a separate synchronous method e.g. 'InitializeResult' that will just do this and execute it in the 'WaitForCompletionAsync'.\r\n\r\nCheck also the behavior of 'OnError'\r\n"""
10049,365764263,b'done'
10049,365764274,b'done'
10056,365801594,"b""I think that the issue is that we did not request 'Flags' in one of the flows that specified flags (by default we are retrieving 'All')."""
10056,365805841,"b'There is no scenarios where we _can_ avoid using `Flags`, we assert on it immediately afterward'"
10058,365826463,b'remove?'
10058,365831312,b'done'
10058,365869169,b'What is this? Can we remove this?'
10058,365873766,b'done'
10055,365778061,b'It should be: `uniqueIds` here'
10055,365778434,b'and need a test for this'
10055,365782759,"b""Thanks for catching this. Regarding a test - I saw it on your end but I'm not actually sure how it  happened."""
10055,365783629,b'Fixed in https://github.com/ravendb/ravendb/pull/10055/commits/017ca971f6456ff43e7a30c71c982c7203309dd7'
10055,365793633,b'Test added in https://github.com/ravendb/ravendb/pull/10055/commits/15285e3e932b39e3fbd946928b19205f74ca34ad. It was happening on index reset'
10055,365827467,b'```suggestion\r\n                            ThrowReduceOutputsPropertyNotFound(referenceDocument.Id);\r\n```'
10055,365827668,b'```suggestion\r\n                                ThrowReduceOutputsPropertyNotFound(existingReferenceDocument.Id);\r\n```'
10055,365829708,b'Can we rely on the value of `_prefixesOfReduceOutputDocumentsToDelete` here?\r\n(this is now updated after the transaction was commited)'
10055,366188416,b'Renamed in https://github.com/ravendb/ravendb/pull/10055/commits/5902446451ad63e2740e270632e414237edef4e5'
10055,366188454,b'Renamed in https://github.com/ravendb/ravendb/pull/10055/commits/5902446451ad63e2740e270632e414237edef4e5'
10055,366189376,"b""For the sake of safety I think we're better off by relying on values which are persistent. We pass `indexContext` with open transaction so it seems to be natural to be sure that the value is as of current transaction, not the in-memory value which could be updated meanwhile (even if it's not the case in current impl)."""
10053,365663644,"b""That isn't correct. the `Mac` is an array of 16 bytes, you need to check that the full array is set to zero"""
10053,365663750,"b'```suggestion\r\n                        $""this is a strong indication that you\'re recovering an encrypted database and didn\'t provide the encryption key using the  \'--MasterKey=<KEY>\' command line flag"";\r\n```'"
10053,365663858,"b""If we were able to get a _single_ valid page, we don't need to deal with this any longer.\r\n"""
10053,365776555,b'Invalid argument name in the message - `{nameof(config.IgnoreDataIntegrityErrorsOfAlreadySyncedTransactions)}`'
10053,365778530,b'Can we use `Assert.Throws<>()` and check the exception message to be sure that it throws what we need'
10053,365779254,b'Can we extract error message to const and use it here?'
10053,365781078,"b'Just to make sure.. what did you mean by ""in a raw"" ? I see you count it so maybe you meant ""in a row"" but from the other side I don\'t see you reset `_InvalidChecksumWithNoneZeroMac` anywhere'"
10053,366279907,"b'It is only the first pages in a row, once a valid page checksum was found we disable this check by using the flag: _shouldIgnoreInvalidPagesInARaw'"
10061,366230238,b'```suggestion\r\n        public async Task snapshot_encrypted_db__with_incremental_and_restore_to_encrypted_DB()\r\n```'
10061,366231319,b'done'
10072,368273692,"b""Why would we want to do this?\r\nIsn't it better to have a cache that will live as long as the parent live?"""
10072,368277222,"b""We are holding main server operation executor for the whole lifetime of the DocumentStore. I'm assuming that vast amount of usages will be without a dispose, but when someone will dispose then I'm removing that from the cache to not hold request executor."""
10072,368277413,"b""The problem is that we may have two threads, one that dispose, one that doesn't.\r\nYou give them both the same instance, and it gets dispose under you.\r\n\r\nWe need to either:\r\n* Give a different instance (and require disposal)\r\n* Give same instance and forbid disposal"""
10072,368281269,b'Done'
10076,368495247,"b""Shouldn't we read here following:\r\n```\r\nvar lastEtagInCollection = ...\r\nvar isLastEtagInCollection = lastIndexedEtag  == lastEtagInCollection;\r\n```\r\n\r\nand in `if (etag > lastIndexedEtag)` change to:\r\n\r\n```\r\nif (etag > lastIndexedEtag && isLastEtagInCollection == false)\r\n```\r\n\r\n?"""
10080,368548336,b'Is is possible that the value here would be an async task?'
10080,368614581,b'No since the only way we add a result to this dictionary is using Task.FromResult'
10082,368720927,b'please use css for that. '
10077,368310679,b'never use var in typescript. Const or let.'
10077,368310745,"b'and return this as object w/o assigning props line by line. I know you spent last week in java, but hopefully this is TS and we have nice syntax for doing this. ;-)'"
10077,368310770,"b'so it goes like this:\r\n\r\nreturn {\r\n   ""External replication"" : this.replicationTasks().length,\r\n....\r\n}\r\n'"
10077,368465209,"b""right - can't believe I overlooked that  :)"""
10077,368466887,b'done - thanks'
10078,368408716,"b'```suggestion\r\nrvn_mmap_file(int64_t size, int64_t flags, void *handle, int64_t offset, void **address, int32_t *detailed_error_code);\r\n```'"
10078,368409111,"b""I don't like the order of the parameters, in these declarations\r\nIt should be:\r\n* Handle - what we operate on\r\n* size/offset - together, they are related\r\n* output variables - the result of the call\r\n* detailed error code"""
10078,368409209,b'Also on `rvn_allocate_more_space`'
10078,368409668,"b""This isn't correct. `sizeof(int)` is _always_ 4 bytes on Linux and Windows.\r\nYou need to check `sizeof(void*)` if you want point size."""
10078,368410539,b'Why not use the constant?'
10078,368411111,"b""This is *not* safe to do.\r\nWhen we remap, we create a _new_ mapping. The old one is still there and valid.\r\nWe will be disposing that _separately_. If you don't handle this, you'll have crashes when read transactions that hold a reference to the old mapping are trying to read it."""
10078,368411284,b'What is this for?'
10078,368411691,b'Nope'
10078,368616351,b'Done.'
10078,368616559,b'Done.'
10086,368950820,b'please move this color outside hover. '
10086,368952786,b'maybe we should split this into 2 methods:\r\ncopyDocumentIdToClipboard\r\ncopyDocumentBodyToClipboard? '
10086,368953122,"b""let's avoid convey information about type , and rename to: copy-document-id"""
10086,368953395,b'+ probably we should rename from span to a to have proper cursor.'
10086,368963311,b'That was exactly my first thought - and then I changed to this because I thought you would prefer it united :)\r\n\r\nSo I will split '
10086,368968208,b'leaving this - as discussed'
10086,368969803,b'done'
10086,368976445,b'done'
10086,368985541,b'I think there is no purpose of having that ?'
10086,368988662,"b""This was added because when **'a'** is used instead of **'span**' then the default color is **red**"""
10086,368989307,"b'ok, thanks'"
10092,369404831,b'Also check empty?'
10075,368404779,"b'30 seconds is a _lot_ here, no? We have a pending client connection.\r\nWould it make sense to use 5 sec and diverge from our normal?\r\n'"
10075,368405150,"b""Don't we need to escape it here? What if this is empty?"""
10075,368405310,b'```suggestion\r\n                // Can have exit code 0 (success) but still get errors. We log the errors anyway.\r\n```'
10075,368405481,"b'This will NOT throw, so the error will never be raised.'"
10075,368405604,b'Is it safe to call `GetStdOUt` and `GetStdErr` multiple times?'
10075,368497107,b'Security.CertificateValidation.Exec -> `Security.Certificate.Validation.Exec` (same convention for others)'
10075,369037062,b'We should validate here that the file exists probably?'
10075,369039885,"b'Do we need args here? You cannot set them more than once, during server startup?'"
10075,369042980,b'Why do we need it now?'
10075,369044479,"b""Shouldn't we clear that not only when we do not have given key in cache?"""
10075,369430451,"b'We need to iterate over all the arguments (GetScriptLastWriteHash) and find their last write time because we don\'t know which argument is the actual script file. We do this so that if the script changes, we invalidate the cache value.\r\n\r\nThe special split function is used to split all the args even if they have a space in the path.\r\nFor example:\r\n""Security.Certificate.Validation.Exec.Arguments"": ""-File \\""c:\\\\work\\\\folder with spaces\\\\exec.ps1\\"" \\""another argument\\"""",\r\n'"
10075,369432236,"b""It's a little tricky because the file can be the exec (if it's a .exe for example) or it can be any of the arguments, for example, if we run a script via Powershell or bash.\r\n\r\nInstead, if the command won't succeed it will throw and log the error."""
10075,369433588,"b""No. When we don't have a key in the cache is when we add a new item to the cache which causes it to grow.\r\n\r\nWhen a key exists we just use the cached value and return quickly"""
10075,369433819,b'Fixing'
10075,369440715,b'I do not like it. We should either expose an endpoint to clear this cache or just let user either wait few minutes or restart the server. This is a very rare situation. We should not do any magic around that.'
10075,369444066,"b'@ppekrol This is done so if you develop the script, we can give you a good experience of fixing issues as you test it.'"
10075,369456465,"b""I understand the cause, but I'm afraid that this regex could not bulletproof. Especially if you will take into account all the platforms and all shells. It would be better IMO to add an endpoint to clear the cache."""
10075,369456741,b'Use original arguments not splitted ones?'
10075,369457096,b'Can File.GetLastWriteTimeUtc throw? Especially when this is not a file?'
10075,369473788,"b""If it's not a file or the file doesn't exist it returns a date 1.1.1601 and that is hashed."""
10075,369475781,"b""I'm concerned about the exceptions listed here: https://docs.microsoft.com/en-us/dotnet/api/system.io.file.getlastwritetimeutc?view=netcore-3.1#exceptions"""
10075,369477299,"b'I would say that it would be better to add a method and be able to clear it from the JS Console, instead.\r\n'"
10075,369477664,"b'Hm... agree. We need to catch exception there, then'"
10075,369555950,"b""`_externalCertificateValidationCallbackCache?.Clear()` wouldn't be better?"""
10075,369558667,b'yes'
10093,369554059,b'This is metadata needed by the Studio. It should not be part of Client API IMO. We probably should move this to QueryResultServerSide?'
10093,369554228,"b""Fill it only when query has 'fromStudio' ?"""
10093,369554705,b'Or even to DocumentQueryResult?'
9949,363077880,b'Why do we have all these changes?'
9949,363079737,b'Intrinsics is now a part of a framework and Popcnt.PopCount requires the value to be an uint.\r\n'
10040,365571909,b'```suggestion\r\n                if (args.Length != 1)\r\n```'
10040,365571939,"b""Is this true? Can't we call time series function with more than one arg? \r\nWhat is we want to pass additional parameters?"""
10040,365572050,b'why do we need this? Why not inject the call directly as CLR func?\r\nCan we get the name that the function was called under?'
10040,365572275,"b'How can I pass this as a param?\r\nSo for `Series`, it will be `tags/2` but for `Series2` it will be `tags/3` ?'"
10040,365572312,b'I like this format'
10040,365572324,b'How can I pass different ranges here?'
10040,365572373,"b'Is the ToList needed? \r\n\r\nI really like what you have done here, the API is beautiful'"
10040,365761807,"b""```\r\ndeclare timeseries out(d, t) \r\n{\r\n    from d.Stocks between $start and $end\r\n    where Tag != t\r\n}\r\nfrom People as p\r\nwhere p.Age > 49\r\nload p.WorksAt as Company\r\nselect {\r\n    Series: out(p, 'tags/2'),\r\n    Series2: out(Company, 'tags/3')\r\n}\r\n```\r\n\r\nadded test"""
10040,365839646,"b""```\r\ndeclare timeseries ts(name, start, end) \r\n{\r\n    from name between start and end\r\n    where Tag != 'tags/2'\r\n}\r\n```\r\nand then we can pass a diffrent start & end for each call \r\n\r\nadded test"""
10040,365840448,"b'no, this is wrong\r\nthis error message was copy & pasted from somewhere else\r\nneed to write proper error messages'"
10040,365846741,b'done'
10040,368550803,b'typo: TimeSeriesWhereClauseVisitor'
10040,368552435,b'Do we need to return this? Looks like redundant data?'
10040,368552672,b'internal?'
10040,368553810,"b""Let's remove that and create maybe two methods.\r\n\r\n`CreateFunction` and `CreateTimeSeries`"""
10104,371098444,"b""I wonder if we shouldn't wait a bit after we schedule the flush / sync. Maybe same behavior as we have for indexes:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/3ec9c0e4cd21c945b48e0ba58c7b204233fa518e/src/Raven.Server/Documents/Indexes/Index.cs#L1252-L1258\r\n\r\n?"""
10097,370166980,b'We `WaitForIndexNotification` after the command was completed.\r\nDo we need this here? @karmeli87 '
10097,370344062,"b'It was completed on the node you were talking to.\r\nIf later you are fetching the info from a different one, it might not be there..'"
10097,370344586,b'Why do you need all this?'
10097,370986996,b'I add the servers node tag to servers directory name\r\nhttps://github.com/ravendb/ravendb/pull/10097/files#diff-214e21a3b1d9db763301cffa4d095f2dR567'
10097,371192553,b'This should be only by the last status'
10097,371192916,"b""Why mentor node if it didn't run yet?"""
10097,371202707,b'done'
10097,371202795,b'done'
10104,371227614,b'This flushes only the current environment while the high dirty memory check is for all environments'
10099,371106239,b'Maybe move exception throwing to a dedicated method?'
10099,371106732,"b""Shouldn't we check if `_pos > int.MaxValue` and throw then? Just in case - same as you did above"""
10099,371115432,b'We have a `if (_pos >= _header->NumberOfEntries)` check. Since the `NumberOfEntries` is ushort then I assume that this is not needed.'
10112,371709387,b'Why a method that check if collection name requires quotes instead of wrapping it with quotes ever? Reduce complexity and avoid possible errors in the algorithm that check if it require quotes.'
10116,372280356,"b'The exception is already there in the caller, why not just pass it in?'"
10116,372388383,b'done'
10112,372493649,"b""https://github.com/ravendb/ravendb/pull/10119\r\n\r\n@montyclt I've opened a PR that addresses your comment. We were a bit defensive with the approach, but did additional testing and there is no impact of the performance of the RQL parser on the server."""
10090,369422748,"b'That is not a good idea, we want to return this to the same thread as we pull this from'"
10090,369422860,b'Why do we want these to be instance fields?'
10090,369423249,"b'We need to check if we have errors from any of the other nodes. And if so, we _have_ to give that error to the caller.'"
10090,369423608,"b'You are passing potential nulls here, that is likely going to kill the server'"
10090,369423991,b'We should be able to simplify this'
10090,369424799,b'unused'
10090,369425023,"b'That is going to cause us to hide errors from the user, which is something we want to avoid'"
10090,369470173,"b'The handlers are long-living aren\'t they?\r\nI want to ""object-pool "" those since they are managed objects are going to be generated a lot'"
10090,369470509,b'The first error?'
10090,369472826,"b'The same goes for success status, this is unclear what the behavior should be.'"
10090,369476029,"b""They aren't long lived. They are for a single request.\r\nAnd if they were, you would have thread safety issues"""
10090,369476268,b'how is it different from what we do with documents:\r\nhttps://github.com/ravendb/ravendb/blob/feature/sharding/src/Raven.Server/Documents/ComputeHttpEtags.cs#L103'
10090,369476302,"b'Gather all the errors you got.\r\nIf there is a single one, throw it.\r\nIf multiple, `AggregateException`\r\n\r\nAll the nodes should return the same status code '"
10090,369476993,"b""There it is known you can't get null.\r\nIn you EnumerateEtags, you are expecting nulls"""
10090,369477949,b'If we need to keep the load order how can we simplify this?\r\n@ppekrol do we need to keep load order in LoadOperation results?\r\nBreaking down commands and aggregate their results as blittables is going to be complex for sure and error-prone.'
10090,369478592,b'yes I thought of using object pools for the managed objects I need but decided that a private member will be better'
10090,369478608,"b'Got some ideas on this, coming over'"
10121,372952480,"b'we can simply return this value, no need to have if, let, etc.'"
10121,372989289,b'ok - thanks - done'
10120,372797494,b'I love this.\r\n'
10120,372797570,b'We *have* to do compression here.\r\nIt may make the change from 100GB to 8 GB sizes.'
10120,372797637,b'Test compression here.'
10120,372797880,b'Where are you reading the standard output?'
10120,372797962,"b'Can skip the exists, DeleteFile handles it.'"
10120,372798157,b'why is that?'
10120,372798604,"b""I wonder, for both Linux & Windows, if we can skip dumping the mmap files?\r\nWe typically don't need or want them"""
10120,372798697,b'What does this mean?'
10120,372799047,"b""where was this taken from? Don't we need to credit it?"""
10097,373152294,b'Would the backup occur on a `Passive` node?'
10120,373156672,b'Done'
10120,373156750,"b""Actually it doesn't"""
10120,373157212,"b""It's copied from https://github.com/dotnet/diagnostics """
10124,373483225,b'Should we create or fail?'
10124,373483600,"b'What should we do here? We can reset the doc\'s ""has attachment"" flag but it feels wrong'"
10124,373483678,b'Should we create or fail?'
10124,373486552,"b'You cannot use this for anything. This is information only, debug, not operational'"
10127,373772181,b'Should this be configurable via Conventions (NETCOREAPP only)? What should be the default value? '
10130,373793547,"b'This mean you will always issue at least 2 delete commands, one will delete and the other one will confirm that there is no further deletions needed.\r\n\r\nWould something like \r\n```\r\ncommand.NumberOfTombstonesDeleted <= numberOfTombstonesToDeleteInBatch ?? _numberOfTombstonesToDeleteInBatch\r\n```\r\n \r\nbe better?'"
10130,373797419,b'True. Pushed.'
10116,373827057,"b'Suggestion: Maybe not throw immediately here, because we request a flush and it might be fast enough. So we can wait longer and just then throw.   '"
10125,373798891,b'can we move it to Sparrow.Threading? Looks more appropriate?'
10125,373799214,"b""Wasn't the cache crated because accessing 'Thread.CurrentThread.ManagedThreadId' is expensive? Maybe it is better to access 'NativeMemory.CurrentThreadStats.ManagedThreadId' instead?\r\n\r\nAnyway, at least we can create a variable in this method to avoid accessing it twice."""
10125,373800499,"b""It used to be expensive, but now, I don't think so.\r\nSee:\r\n\r\nhttps://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs#L19\r\n\r\nhttps://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs#L156\r\n\r\nhttps://github.com/dotnet/runtime/blob/master/src/coreclr/src/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs#L161\r\n\r\nhttps://github.com/dotnet/runtime/blob/fcd862e06413a000f9cafa9d2f359226c60b9b42/src/coreclr/src/vm/object.h#L1426\r\n\r\nSo this ends up being as fast as our own impl"""
10116,373838596,"b""Flush isn't actually going to release any memory, the OS still need to do some work around that.\r\nWould rather trigger the flush and wait for the _next_ operation"""
10094,369610108,b'should be removed?'
10094,369612128,b'Reordering? Reordered?'
10094,369958129,b'done'
10094,369958142,b'done'
10094,370202322,"b""I don't understand the logic here. I think that you are checking to see if the members list match the priority order, but don't you need the inverse check in the for ?"""
10094,370280340,"b'Yes, I check if reordering of the members is needed.\r\nIt might happened that we shift the preferred node to be the last until he is loaded, and when he does we need to shift it back.\r\nWhat do you mean by inverse check?'"
10116,373852642,"b'By ""wait longer"" I meant: raise flag and if IsHighDirty is still on after X seconds, start rejecting.\r\nAnd it makes more sense to start rejecting after period of time and not after ""operation"" as it is disk write speeds issue.'"
10097,373864203,"b'No, before running the backup we check if task is ActiveByCurrentNode'"
10136,374026595,b'Thread safety'
9949,374580732,b'Move to `System.IAsyncEnumerable`'
9949,374580859,b'Move to `System.IAsyncDisposable `'
9949,374590743,b'Set to false.\r\nCheck that this works in offline mode'
9949,374590866,b'Need to check `HandshakeTimeout`'
9949,374591400,b'TODO here'
10144,374620383,b'bad comment?'
10144,374621634,b'removed'
10063,366724003,"b""What is we have 100000000 items here? Don't we need to break it up?"""
10063,366724661,b'We have `GetLazyStringForFieldWithCaching` for this'
10063,366830590,"b""This seems to be a more general problem even with regular tombstone and I guess we need the same behavior in both cases.\r\nSo I've opened an issue to address it: https://issues.hibernatingrhinos.com/issue/RavenDB-14484 """
10063,368272748,"b""I don't understand this code.\r\nYou are doing things in batches, but you are holding the transaction open for as long as needed.\r\nWe need to be able to do this in multiple transactions"""
10063,368273169,b'We do not want to put infinite number of them in `deleted` list and purging tombstones also removes all of them at once: https://github.com/ravendb/ravendb/blob/853599a811b45c9fe933606d9a04a163ef24e5b1/src/Raven.Server/Documents/DocumentsStorage.cs#L1848\r\n\r\nWe created a separate issue to optimize this: https://issues.hibernatingrhinos.com/issue/RavenDB-14487'
10063,368494928,b'How would this work with replication?\r\nAnd what if there is a conflict?'
10063,368504766,"b'We overwrite the existing segment with a new one.\r\nSo it should be replicated and appended as an entire segment. \r\nIf there is a conflict it will be merged with the other segment and replicated back, so it will replace the pending deletion segment (whether is was already deleted or not).'"
10063,373839760,b'```suggestion\r\n            DeletedTimeSeriesRange= 11\r\n```'
10063,373839938,b'Can remove this brace'
10063,373841009,b'done'
10063,373841011,b'done'
10063,374312961,b'TimeSeriesDeletedRanges?'
10063,374314578,b'Can we do better here?'
9949,374688225,b'@iftahbe is checking that'
9949,374688291,b'Not needed'
10137,374321763,"b""Can we wrap this in something similar to `Size`\r\nI'm afraid that without that it is a potential place for easy bug introduction. Let's talk about this tomorrow."""
10137,374640890,"b'Seems reasonable to do so, yes'"
10137,374641107,"b'You are returning the allocation here, but still using it.\r\nThis is _not_ valid'"
10137,374651036,b'`fullValues.ToArray()` copy them to managed memory?'
10137,374699587,"b""Let's do in a separate issue: https://issues.hibernatingrhinos.com/issue/RavenDB-14577"""
10137,375140120,"b'Oh, correct, but then why bother will all the song and ance? Just allocate them once directly and save all the complexity.'"
10137,375159562,b'right.'
10145,375103672,b'Here we want to check if this is already completed.'
10145,375103697,b'Here we want to check if this is already completed.'
10145,375104913,b'Check if completed successful and avoid calling this'
10145,375105091,b'Same'
10134,374317168,b'I think it would be better to implement that inside `reader.AllValues`\r\n\r\nWe will use it in few more places in the future probably.'
10134,374318943,"b'Should not be nullable. Just do `skip = 0` and `take = int.MaxValue`\r\n1. Do we want to change that to `long` ?\r\n2. In client API we are using `int start, int pageSize` more often'"
10134,374320350,"b""Not sure if this is a good idea. Let's talk about this tomorrow."""
10134,374640008,b'We use `start` and `pageSize` in the rest of our handlers'
10134,374640253,"b'Check that the naming is consistent.\r\n` GetDocumentsCommand(int start, int pageSize)`'"
10134,375289518,b'int pageSize = int.MaxValue'
10153,375330445,b'What if I have 100000 segments with no live values?'
10153,375338957,"b""It depends..\r\nIf they are deleted as a segment, we store only a single dead entry so each page will probably have several hundreds of those.. Which you still have to iterate.\r\nIf those segments are full with dead values, it is indeed a problem.\r\n\r\nBut in both cases after the cleaner did his job this shouldn't matter. \r\n\r\nI see 2 options:\r\n1. We can do binary search (not sure this is a good idea.. the cost might be even higher)\r\n2. Somehow track the first value\r\n\r\nI don't see any nice/better way here.\r\nI will test it on the 300M points data and see if it an issue.\r\nIf it isn't we leave this optimization for later. I think."""
10153,375339846,"b'Alternatively, ignore dead values and report start /end as they are.\r\nThen let the cleaner do its job?\r\n\r\n'"
10153,375340664,b'Also an option'
10153,375343477,"b""Let's go with this"""
10153,375352772,b'done'
10142,374600542,"b""here I'd check like this:\r\nif (this.numberOfDatabasesPerMountPoint[incomingItemMountPoint]) {\r\n\r\n}\r\n\r\nthis will check if key exists and have positive value"""
10142,374626915,b'ok - \r\nfixing to - \r\n\r\n```\r\n if (!this.numberOfDatabasesPerMountPoint[incomingItemMountPoint]) {\r\n                this.numberOfDatabasesPerMountPoint[incomingItemMountPoint] = 0;\r\n }\r\n```\r\n'
10142,374971284,b'why do we need to provide entire storePieChart? Can we provide colorClassProvider only ?'
10142,374972362,"b'please keep in mind that you are calling graphData in loop, as result it will redraw graph multiple times. Can we avoid doing that? '"
10142,374972611,b'so basically we can redraw if *any* count has mismatch.'
10142,374973423,"b""I wonder if we can't use color scale anyway, and avoid having this.pieData. IIRC """
10142,375124725,b'right - fixed'
10142,375146368,b'done'
10142,375269548,b'The color scale is now returned in the latest commit'
10142,375335729,b'does it sort asc or desc? I think bigger one should go first.'
10142,375336172,"b'please use double quotes whereever possible (except html file in knockout bindings as it is inside "")'"
10157,375373113,b'This by default is true. Do we want to change this? https://github.com/dotnet/runtime/blob/516956a01fee9aa732b199012a6ea0bcc2bd789f/src/libraries/System.Net.Security/src/System/Net/Security/SslServerAuthenticationOptions.cs#L16-L22'
10157,375686000,"b""Probably don't want to change this, you're right. I don't think we want to interfere with their logic.\r\nhttps://github.com/dotnet/runtime/blob/6f6c94dbb2259deb083eefb755698cc8e0f0a4ce/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs#L216"""
10161,375687846,b'We can pass this as parameter'
10152,375260108,b'What is the reasoning here?'
10152,375293166,"b""I wouldn't touch this. The original idea was to update stats only for the highest level reduce errors in the reduce tree. Those are supposed to be propagated from the bottom to the top anyway."""
10152,375294557,"b""Note that we might be getting an error because of the same reduce output multiple times when going over reduce tree - that's why we wanted stats to be updated just ones for a tree."""
10152,375304722,"b""The problem is a case that you get a _serious_ error which is not in the root. Than the index is not marked as _error_ and the index stats doesn't have any errors, which makes few methods (waitforindexing, getindexerrorsoperation, getindexstatsoperation) have wrong results, also its doesn't displayed as faulty in the studio. \r\n\r\nIn the case that reduce has errors the index definition going to changed, so I don't see any problems here."""
10152,375306079,b'another option could be updateStats when parentPage == -1 || typeof(e) == NRE (or other reasonable errors to log them)'
10152,375313659,"b""What test reproduces that? I'd like to see it with debugger"""
10152,375317174,"b'JavascriptIndexShouldPassContextToTypeConverter will throw NRE in StoreAggregationResult(leafPage, table, result); above, when parentPage != -1'"
10152,375699026,"b'1. Did you mean `JavascriptIndexShouldThrowOnExceptionInReduceStage` test? (`JavascriptIndexShouldPassContextToTypeConverter ` doesn\'t enter in that piece of code).\r\n\r\n\r\nAnyway, I have reverted that change and all tests `RavenDB_14576` are passing. Am I missing something?\r\n\r\n2. You said `""when parentPage != -1""` - the idea was that if an error is thrown at leaf level and that leaf isn\'t a root then an error is supposed to be thrown at branch level as well. Then we always update stats:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/ec89c9988d3882204cd82fabd07188fb0eeb0e9d/src/Raven.Server/Documents/Indexes/MapReduce/ReduceMapResultsBase.cs#L393\r\n\r\nDid you see a case where it didn\'t happen?\r\n\r\n3. I\'m not saying ""no"" for that change but just want to be sure we really need this.'"
10152,375721337,b'Did you remove the context to get the NRE ? https://github.com/ravendb/ravendb/pull/10152/files#diff-fb0e7df433238a2900c2270687216d68R40\r\n\r\nThats what I get:\r\n![image](https://user-images.githubusercontent.com/16625387/73923312-56d01c00-48d3-11ea-965d-d266b7a45e80.png)\r\n'
10152,375727449,"b""No, I didn't. So, now I repeated it with removing the context to force NRE and I still got indexing error where NRE was included as the inner exception (what is fine):\r\n\r\n![image](https://user-images.githubusercontent.com/376551/73924263-7d3e8900-48cc-11ea-8a55-c8f9eb821357.png)\r\n"""
10152,375727893,b'And `JavascriptIndexShouldPassContextToTypeConverter` test was failing as expected then'
10152,375729000,"b'> 1. You said `""when parentPage != -1""` - the idea was that if an error is thrown at leaf level and that leaf isn\'t a root then an error is supposed to be thrown at branch level as well. Then we always update stats:\r\n> \r\n> https://github.com/ravendb/ravendb/blob/ec89c9988d3882204cd82fabd07188fb0eeb0e9d/src/Raven.Server/Documents/Indexes/MapReduce/ReduceMapResultsBase.cs#L393\r\n\r\nThe index error do get thrown but it doesn\'t mark the index as faulty because we didn\'t get the 15% of results as error, and this is because we only throw it on the root level. '"
10152,375739805,"b'That\'s the point - threshold limit for marking an index as error. And that\'s why we updated the stats only if `parentPage == -1`.\r\n\r\nNote that in your case the error was triggered by _bug_ in RavenDB. It\'s not ""regular"" indexing error - like invalid index definition, invalid documents to index etc. \r\n\r\nAfter your change we\'re going to mark index as faulty _much faster_ because we\'ll error multiple times because of the same error - at leafs level (which is going to be a lot) and the same at branch levels. We shouldn\'t behave this way for ""regular"" indexing errors.\r\n\r\nThe current behavior is fine IMO - we had a bug in RavenDB, we put it as index error so user can get back to us and let us know about it (no error was hidden). Marking index as error would be good in this particular case, but your change affects ""regular"" indexing errors and how fast we mark indexes as faulty.'"
10168,376002976,"b'this endpoint allows you do specify list of indexes to clean, so method signature should be:\r\nindexNames: string[]; db: database'"
10168,376003907,b'I think shouldClearAll is redundant here. When we pass empty list then it means clear all. '
10168,376004351,b'looks like indentation is wrong here.'
10168,376004461,b'then no need to send multiple command - we can send single one.'
10168,376004903,"b""I'm affraid then code isn't correct when we remove all indexes."""
10168,376004974,b'all indexing errors'
10168,376006025,b'insert space between ) and {'
10168,376006264,b'same here'
10168,376007332,"b""tooltip is not visible when view is empty + text isn't true - no need to select anything - because then we delete all errors."""
10168,376007653,b'no need to check that - button is not enabled?'
10168,376007961,b'no need to refresh if you cancel in confirmation'
10168,376008736,"b""If wonder if we should be more explicit here, and write that index status of errors won't be set to normal, as it wasn't obvious for us during our call today. """
10168,376009665,b'oh yes :)'
10168,376010117,"b'hmm actually alt + / should work here -see accesskey=""/"". Could you check that?'"
10173,376761384,b'Why do we want to run `Console.WriteLine` here? '
10168,376764889,b'returning alt + / \r\nworks :)\r\n'
10168,376764912,b'done'
10168,376764914,b'done'
10168,376764960,b'done'
10168,376765283,b'right - done'
10168,376765491,b'done'
10168,376767390,"b""=> \r\nWhile the current indexing errors will be cleared,\r\nan index with an 'Error state' will not be set back to 'Normal state'.\r\n"""
10171,376761910,b'Why pass null here? Because it is on the client?'
10171,376761994,"b""Am I missing something? I don't see where this is being used."""
10171,376767524,b'Correct.'
10171,376767544,b'Thanks'
10173,376767634,b'It is only used in tests. I can easily check the test output because of that.'
10173,376767914,"b'It is only used in tests right now, I worry about this changing down the line.'"
10173,376768640,b'After https://issues.hibernatingrhinos.com/issue/RavenDB-14605 is done I will switch this to throw during test execution.'
10173,376768669,b'Great!'
10158,375845903,b'NRE'
10168,376773649,b'done'
10168,376773669,b'done'
10168,376773680,b'done'
10168,376773704,b'done'
10138,374324207,b'Is this needed?'
10138,374324291,"b""Don't forget about Embedded"""
10138,374324460,b'only `TESTING`'
10138,374324707,"b""Let's control that via xunit.setting.json"""
10138,374324922,b'Move everything under one namespace'
10138,374325232,b'Need a cleanup here. We do not want to keep all the methods. Also we want to make it synchronous.'
10138,374325621,b'Remember that we want to gather 2 results here. Before and after GC.'
10138,374587057,"b'No. I will delete those, it should be in .gitignore'"
10138,374591597,b'Ok. I will remove the DEBUG from there once everything else will be in place. No?'
10138,374592217,"b'I have removed the DisableTestParallelization, as we discussed.'"
10138,374592763,b'I will refactor this to be sync'
10138,374660648,b'Done (in the next commit)'
10138,374660682,b'Done (in the next commit)'
10138,375520430,b'Do we want to compact LOH?\r\nAlso do we need to GC.WaitForPendingFinalizers?'
10138,376787652,b'I think yes. Added that in the next commit.'
10179,376792870,"b'Assumes that we are using per thread values, no longer relevant'"
10179,376792880,"b'Assumes that we are using per thread values, no longer relevant'"
10179,376792890,"b'Assumes that we are using per thread values, no longer relevant'"
10179,376792982,"b'We have up to 64 slots per core, and then we fail over to a global queue. \r\nThe idea is that we have an intentionally small per core value and then a shared system.\r\nThere is no work stealing here because we assume that the cores are going to be scheduled by the OS significantly.'"
10179,376907082,"b'Need to measure whatever we have to cache that, see the ProcessorIdCache here:\r\nhttps://github.com/dotnet/runtime/blob/master/src/coreclr/src/System.Private.CoreLib/src/System/Threading/ProcessorIdCache.cs'"
10153,376912308,"b""I think that I'm missing calls to this from where we _delete_ values, no?"""
10153,376924246,"b'Upon every segment update, I reduce the old count and add the new count. This valid also for deletes. Even when we remove entire segment, we replace it with an empty one.. so the same logic apply as well.'"
10174,376800947,b' const args =  this.indexesNames ? { name: this.indexesNames } : {}.'
10174,376801020,"b""I wouldn't assume here that we removed selected from this command perspective. If you invoke this method from other place, like edit index view then this text won't be correct."""
10174,376921674,b'done'
10174,376927442,b'done'
10183,377263664,b'does it work from indexes page now? maybe we can use ko.unwrap function which unwrap value if this is observable or returns input value when it isn;t'
10183,377287879,b'used ko.unwrap - thanks!'
10178,376900587,b'Should be `Memory.MaxContextSizeToKeepInMb`'
10178,376901434,b'Safer maybe to do Interlocked.Increment?'
10178,376901530,b'create two separate ctors to not break binary compatibility'
10178,376901546,b'create two separate ctors to not break binary compatibility'
10178,376981773,b'done'
10178,376988624,b'done'
10178,376989082,b'done'
10178,377004505,"b'Yes, that would be good to do'"
10178,377023994,b'done'
10129,373771801,b'Still need to look into this'
10129,373771877,b'Need to think if this will not cause issues when 4.2 client will talk with 5.x server'
10129,373837702,"b'How could it? it will just default to the usual one, no?'"
10129,373837719,"b'Maybe a problem if you are using a multi char string, you mean? Very unlikely'"
10186,377736707,b'What is this?'
10186,377740014,b'Should be the other way around.. (UnderTest ? 256 : 3)\r\nIf we unable to set the license we should use 256 cores as default and not 3 '
10186,378071670,b'What updates this? What happens when we add a new node? Remove one?'
10186,378082056,b'`RefreshAmbassadors` will update this and handle add/remove. '
10186,378115332,"b'This is only called from the tests, right?'"
10186,378115887,"b""Yes, but maybe we should add a comment 'DEBUG ONLY', just in case"""
10190,378204589,b'Maybe make this method async?'
10190,378204875,b'It should be called `RestartServer` to match the `StartServer` one'
10190,378205623,"b'We should add `ServerProcessExitedEventArgs` here. They can be empty for now on, but it is easier to expand later on.'"
10190,378239594,"b""I made is sync and run in background because StartServer is also that.\r\nBut it make sense that you'll want to get any errors immediately."""
10201,379646192,b'from value might be null!'
10201,379646651,"b""check for null values!\r\nin /admin/studio-tasks/full-data-directory path isn't required."""
10201,379647248,b'done'
10211,379931262,"b""can we avoid tying this to html form, instead we can do:\r\nthis.changeVector().map(vectorItem => vectorItem.fullFormat).join(' ');"""
10211,379931292,b'we already have nice selector for that: document-properties no need for new one.'
10211,379931364,"b'do we need id=""changeVector"" here?'"
10211,380028374,b'done'
10211,380028667,b'removed'
10211,380029543,b'done'
10206,380065089,b'Maybe better names like:\r\n\r\n- `_freePooledMessageEntries`\r\n- `_activePoolMessageEntries`\r\n\r\n?'
10206,380065724,b'`CurrentProcessorNumber` or `CurrentProcessorIndex` ?'
10206,380066736,"b""Why do we need `% _pooledMessageEntries.Length` ? Shouldn't property `CurrentProcessNumber` already ensure that value is adjusted to `Environment.ProcessorCount`?"""
10206,380066973,b'Same as above - why `%_activeMessages.Length`?'
10206,380067412,b'Is it for debugging? Can we change accessibility to `internal`?'
10206,380078320,"b""Just to make sure - now we don't reference in `LightWeightThreadLocal._values` collection directly but via `WeakReferenceCompareValue` so it can return `false` more often, right? And that makes we we'll cleanup local thread resources - is it correct?"""
10205,379894399,"b""Don't we need to account for the total number of cores that the machine has?\r\nUser may have 16 cores license, but running on 2 core machine in a cluster of 8 machines."""
10205,379894501,"b""You are creating a new instance here, but you already passed the instance to other locations.\r\nThat means that we'll have two lock objs."""
10205,379896736,b'This is until the backup finishes.\r\nThe next backup will use the new instance.'
10205,379896822,b'The name is misleading. It should be `utilizedCores`.'
10205,379915563,b'Done'
10205,379915881,"b""Shouldn't we use ProcessorCount instead of MaxCores?"""
10205,379915882,"b""Shouldn't we use ProcessorCount instead of MaxCores?"""
10205,379915911,b'Message needs to be fixed.\r\n\r\n`Current maximum number of concurrent backups is: 3` ?'
10205,379915939,b'This is not being refreshed after assigned cores is changed or license is switched'
10205,379918396,b'Done'
10205,379918561,"b""No. We get here if:\r\n- First start of the server.\r\n- We didn't apply the license limits yet."""
10205,379918575,b'Done'
10205,380040638,"b""But you cannot have more utilized cores than ProcessorCount. Shouldn't this be `Math.Min(Environment.ProcessorCount, _licenseStatus.MaxCores)` ?"""
10205,380040875,b'This should be applied after `IgnoreProcessorAffinityChanges` check'
10205,380043401,"b""Shouldn't we just use LicenseChanged event?"""
10205,380045890,b'rename to `_concurrentBackups` or sth like this'
10205,380080259,b'What happens if this go negative?'
10205,380080485,b'```suggestion\r\n                using var backupCounter = _serverStore.ConcurrentBackupsCounter.StartBackup(periodicBackup.Configuration.Name);\r\n```'
10205,380127698,b'done'
10205,380127947,b'Done. SetAffinity is called as part of the license changed event'
10205,380130259,"b""Can't dispose here because the backup starts in a background thread."""
10205,380132785,b'It will allow new backups once its value is bigger than 0.\r\n'
10205,380138094,b'And moved it to be part of the LicenseChanged event.'
10206,380217825,"b""We technically don't need it, but I want to be on the safe side here."""
10206,380218099,"b'Yes, that is correct.'"
10206,380219692,b'Maybe it is better to do it inside the property then?'
10206,380230286,b'Removed'
10206,380230446,b'Moved it so it is only called once.'
10210,380084260,"b""I wonder if we shouldn't also use `ComputeHttpEtags` here, instead. """
10198,379328856,"b'It would be easier to still require min & max to be in UTC, no?'"
10198,380040035,b'So what is the scope of the offset?'
10198,380079413,b'The entire query'
10198,380080817,b'I do not understand your comment here then.'
10198,380082606,"b'Instead of add flags to `GetNextRangeStart`, just always require it to be UTC\r\nAnd convert before calling this code'"
10213,380597204,"b'I think you might leak contexts here. \r\nIf someone put the context back, after you copied it, but before the exchange.\r\n'"
10213,380598079,b'Do we need to check if in use?'
10213,380603662,"b'Good point, I think this is going to be really rare thing, and will be covered by the finalizer. But will think on how to resolve this.'"
10213,380603841,"b'This is in the `Dispose`, caller is responsible for ensuring this.'"
10227,381298127,"b'We should forbid setting `RunInMemory` via custom settings then. Throw when this is set and point user that `ServerCreationOptions.RunInMemory` should be used to do that.\r\n\r\nIt will be better, because now someone can change CustomSettings and then do the opposite in the ServerCreationOptions.'"
10227,381300011,b'Other option (easier?) is to change `ServerCreationOptions.RunInMemory` to nullable and detect that only one of them can be set.'
10227,381301118,b'What about DataDirectory ? it is also can be set via both ServerCreationOptions & CustomSettings ?'
10227,381305121,"b'https://github.com/ravendb/ravendb/blob/93d8b29d565b2d1245a321d119ee49d9efb2ca39/test/Tests.Infrastructure/TestBase.cs#L582-L598\r\n\r\nIt is handled, I think?'"
10227,381308237,"b'But you mentioned that someone can change CustomSettings and then do the opposite in the ServerCreationOptions, it also apply to DataDirectory, so my question is do we also want to disallow to pass DataDirectory via CustomSettings  ? '"
10227,381309547,"b'If you will mark ServerCreationOptions.RunInMemory as nullable. You can allow to set it either via CustomSettings or options, but not both.'"
10222,380898257,"b""hmm I don't quite like that we are using query operation options here, then we have something different in model, then we pass through dto with upper case and finally we lower case keys since we send this via request paramters. So let's use patchCommandOptions"""
10222,380898719,b'typo'
10222,380899644,b'no need to comment - it tents to remain not in sync after some period in time'
10222,380902171,"b'as I wrote in issue, please get rid of that padding'"
10222,380902395,b'Is it button group? '
10222,380902794,b'for stale index (singular form)'
10222,380905753,"b""let's avoid having this - try to use standard classes like: margin, padding, margin-lg, etc. Also you created global styles in view specific style. We should put such styles nested."""
10222,381118297,b'@ml054 in c# api we use `QueryOperationOptions` for that\r\n\r\nhttps://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Client/Documents/Queries/QueryOperationOptions.cs'
10222,381131452,b'done'
10222,381132080,b'done'
10222,381142694,b'right - done - using patchCommandOptions '
10222,381149942,b'Leaving current title - as discussed w/ @morhilai \r\n'
10222,381152092,b'removed'
10222,381201762,b'done'
10222,381201854,b'done'
10222,381418332,"b'can we use padding here only, remove padding-xs, and then remove inner div with margin-left margin-left-lg to avid so many padding inside margin inside padding inside margin ;-)'"
10222,381419511,b'I can see you started using flex. Great. I hope flexbox froggy was helpful. \r\n\r\n![image](https://user-images.githubusercontent.com/1250431/74857098-7b041200-5343-11ea-8921-375193ca35c6.png)\r\n'
10222,381419907,b'indent here is incorrect.'
10222,381534637,b'done'
10222,381567147,b'Played w/ this some more and removed some excess classes.\r\nNow looking like this:\r\n\r\n![image](https://user-images.githubusercontent.com/17376974/74879975-f92bdd00-5372-11ea-9163-5baa0a628bc0.png)\r\n![image](https://user-images.githubusercontent.com/17376974/74879988-021cae80-5373-11ea-8261-854249c72cd6.png)\r\n'
10233,381908408,b'instead of `\\n` use `Environment.NewLine`'
10239,382080704,b'space after comma'
10239,382081055,"b'I would use even path here - as it should well for any path, not only fileName ;-)'"
10239,382081615,b'+ I would be nice to have word extension in method name. \r\n\r\nShould we are checking if given path points to file with given extension.'
10239,382082219,"b'this is wrong. What if file contains dots like: ravendb.net.backup? In general you should check if path ends with ""."" + extension.'"
10239,382083274,b'done'
10239,382083308,b'nice :)'
10239,382084574,b'why do you need to introduce row and cols here? '
10239,382085026,"b""maybe let's use strong w/o ' (single quote)"""
10239,382085962,b'done'
10239,382086060,"b""I can see to nicely match warning boxes. Let's leave it then."""
10239,382111620,b'done - using getFileExtension method'
10239,382111736,b'done - using getFileExtension method'
10239,382111890,b'done - using getFileExtension method'
10239,382250004,b'nice I forgot pop exists ;-)'
10246,382986774,b'Can we avoid this allocation? Is there a a reason we run it one at a time?'
10252,383030109,"b'args = { format: ""csv"", debug: ""entries"",field: columns }\r\n\r\nif columsn will be undefined it won\'t be send to server anyway'"
10252,383030115,b'same here'
10252,383123785,b'done'
10252,383123809,b'done'
10246,383132210,b'Wondering if it would not be better to have \r\n\r\n```csharp\r\nbulkInsert.TimeSeries.Append\r\nbulkInsert.Counters.Increment\r\n```\r\n\r\nWe are doing similar separation in session.'
10246,383133590,"b'I like that. Especially true since we need to have better API so we can have:\r\n\r\n`bulk.TimeSeriesFor(docId, name)` And then you call `Append` multiple times here.\r\nThat matches the underlying format.'"
10246,383138770,b'We can either do it now or as a part of TimeSeries API revamp. @karmeli87 @aviv86 ?'
10246,383148715,"b""I like Oren's suggestion and would like to have it in the `session`, `bulkInsert`, `patching` and adjust how we send stuff on the wire accordingly.\r\n \r\nWe will handle this in a separate issue as part of the API unification."""
10208,380073800,b'appendTimeSeries'
10208,380073958,b'deleteTimeSeries'
10208,380074567,b'to match counters it should be called `timeSeries`. Maybe we can support both `timeSeries` and `timeseries`.'
10208,380078161,b'This is optional. @karmeli87 @aviv86 please work together on signatures. We have similar issue in the client API.'
10208,380079515,b'Why are we returning this? What should be returned here? Do we need to return anything?'
10208,380085444,b'`timeseriesAppend` - same for the rest'
10208,380086085,"b'You are getting the .NET type of the `JsValue`, which will be `JsValue`, you need to get the Jint type here.'"
10208,380086639,b'Why are we returning this? What should be returned here? Do we need to return anything?'
10208,380087320,"b""This can be null, but `GetStringArg` doesn't allow it"""
10208,380087533,"b'We can probably allow to pass either `[numbers]` or `number`, so not just array'"
10208,380088489,b'Do we need to normalize the values to `/10_000` here?'
10208,380088732,b'Do we need to normalize the values?'
10208,380088892,b'Why no create the Jint objects directly?'
10208,380089852,b'This will not match e.g. counter methods where you have `incrementCounter`'
10208,380201790,b'As I see it this is like `void`. The `TimeSeriesStorage.AppendTimestamp` and `RemoveTimestampRange` functions return `LastDatabaseChangeVector` maybe it will be better? '
10208,380220978,b'Talk with @karmeli87 and @aviv86 what is valuable to return there. JS methods by default are returning undefined so maybe this is enough what you did.'
10208,380231856,"b'It is because I found that both the `objectInstance` and `arrayInstance` return Object type.\r\nSo Just not lose the information I will return Jint type and .NET type, OK?'"
10208,380233789,b'ok'
10208,380261820,"b'Yes, we will do that on a separate issue: https://issues.hibernatingrhinos.com/issue/RavenDB-14651'"
10208,380262530,"b""I can't think of anything valuable to return here. \r\nSo returning `void` is fine and this also something we can change in the future without breaking any changes."""
10208,380263485,b'This happened internally https://github.com/ravendb/ravendb/blob/3680f63b61405ea221dff2fe5f589fb4d94f15be/src/Raven.Server/Documents/TimeSeries/TimeSeriesStorage.cs#L1328'
10208,382012791,b'@ayende @ppekrol What should it be?'
10208,382017431,b'Go with @ppekrol suggestion'
10208,383338624,b'Needs to be reverted'
10208,383338650,b'Needs to be reverted'
10208,383338896,b'Needs to be reverted'
10208,383339024,b'All changes in this file need to be reverted.'
10253,383779591,b'Either use smaller batch size or move this to stress'
10253,383785744,"b""that's 4096 documents in total"""
10253,383794705,b'Fixed.'
10261,383774006,b'remove DEBUG'
10261,383774572,b'Perf -> Performance'
10261,383774645,b'Perf -> Performance'
10261,383775173,"b""We shouldn't do any of this without `_resourceSnapshotEnabled` ?"""
10261,383775412,b'TODO'
10261,383775566,b'Perf -> Performance'
10261,383775665,b'Perf -> Performance'
10247,382983496,b'Do we need to do escaping here?'
10247,383117868,"b'I\'m not sure I follow. Did you mean one line below:\r\n`Out($"", \\""{collection}\\"""");`\r\n? \r\nWe have `\\""` to pass collection name as string parameter - `LoadDocument(""users/1"", ""Users"")`'"
10247,383132287,"b'Yes, what happens if the collection contains `""` ? '"
10247,383186145,b'If `FindCollectionName` convention was overwritten and returned collection name would include special characters then I think yes we would need to escape it here.\r\n\r\nI opened issue to verify all usages: https://issues.hibernatingrhinos.com/issue/RavenDB-14681'
10260,383777018,"b""Let's make it simpler. Either take the instance of the index from the database directly and assert number of steps or make this JS function simpler."""
10271,385033018,b'we are not disposing anything?'
10267,385005252,"b'```\r\nnew Size(totalRead / entry.Length, SizeUnit.Bytes)\r\n```'"
10280,385222943,b'Who sets this value?'
10278,385223759,b'Is there a reason not to remove this entirely?\r\n```suggestion\r\n            \r\n\r\n```'
10278,385223962,"b'Missing log, no?'"
10280,385544763,b'It is set during deserialization in ReplayCommandTxHelper'
10284,385618580,b'Just a note - `Slices.Empty` is allocated on static context so we must not return it to another one.\r\n\r\nhttps://github.com/ravendb/ravendb/blob/9803a5af2434339b6f1caf766cdf0a778fc2ce41/src/Voron/Slice.cs#L211'
10285,385622080,b'After merging this to 5.0 we need to use DocumentDatabase.IndentityPartsSeparator here'
10285,385622283,b'Can we add the full exception details?'
10285,385628341,b'Fixed in https://github.com/ravendb/ravendb/pull/10285/commits/14b715f1b78381ca8b839ca027e8fd7c57e4ee2e'
10285,385628765,b'Okay. Added TODO in issue comment'
10274,385551877,"b""Can you add a comment why `skipValidationInDebug` is set to 'true' in this case?"""
10274,386029176,"b'I guess it is a bug in the legacy backup file that had document without the correct metadata.\r\nBut it okay to set it to `true` here, since we are putting a counter and going to update the metadata.'"
10288,386033523,b'What does this comment mean?'
10288,386033529,b'What is the usefulness of this doc comment?'
10288,386037161,b'Removed.'
10288,386037176,b'Removed.'
10269,385002943,b'=> `/databases/*/timeseries/ranges`\r\n\r\nWould be better?'
10269,385231964,"b'Yes, the `GET` is in the HTTP method'"
10269,385232635,b'Why have both this and the `/ranges` endpoints?'
10242,382990647,"b""Let's create a real class here. This is getting too big"""
10242,382991697,b'How do you ensure we have enough space for this?'
10242,382991738,b'Move to separate file?'
10242,383191832,b'Handled in `CalculateIndexEtag`\r\n\r\n```\r\n            if (_handleCompareExchangeReferences != null)\r\n                length += sizeof(long) * 4 * Collections.Count;\r\n```\r\n\r\nActually I can make it smaller. It can be \r\n```\r\n            if (_handleCompareExchangeReferences != null)\r\n                length += sizeof(long) * 4 * _compiled.CollectionsWithCompareExchangeReferences.Count;\r\n```'
10242,386502342,b'Why is this relevant at the collection level?'
10242,386541130,b'We need to know which collections have compare exchange references. This is used in a lot of places e.g. during etag calculation'
10242,386851290,"b""Can you please update the comment to explain what are default fields depending on index type? So someone not familiar won't need to figure it out on their own"""
10242,386852898,"b""Is it allowed that one tx is open while another one is closed? Maybe let's add a check which will ensure that _both_ transactions are either open or closed?"""
10242,386853720,"b""Shouldn't be wrapped by `using` ?"""
10242,386854218,"b'Let\'s introduce a const for `""Object""` '"
10242,386855048,"b'Let\'s add same comment as above:\r\n\r\n"" // we intentionally don\'t dispose of the scope he ... ""'"
10242,386855202,b'Also comment here'
10242,386856374,"b""Consider to create a dedicated type for tuple `(HashSet<CollectionName> ReferencedCollections, bool HasCompareExchangeReferences)` - it's very long and hard to read it"""
10242,386858519,b'I think you have it already defined in constants. Can we use it here?'
10242,386858682,b'TIGnored -> TIgnored'
10242,386881027,b'Done'
10242,386884330,b'Done'
10242,386885326,b'We cannot. It is used as a value in dictionary that is used at the end of the batch to write references. Will be released when indexing batch ends.'
10242,386887941,b'Done'
10242,386888299,b'Done'
10242,386888843,b'Done'
10242,386894495,b'Done'
10242,386895908,b'Done'
10242,386896330,b'Done'
10242,386901972,b'OK'
10266,384346585,b'wrap this in EnsureDatabaseDeletion'
10266,384346707,b'wrap this in EnsureDatabaseDeletion'
10266,384346822,b'wrap this in EnsureDatabaseDeletion'
10266,384347010,b'wrap this in EnsureDatabaseDeletion'
10266,384355992,b'using'
10266,384356076,b'using'
10266,384356295,b'There should be no issue in changing this to async Task'
10266,384356962,b'Wrap this in a method'
10266,384356995,b'Wrap this in a method'
10266,384357921,b'nameof'
10266,384357951,b'nameof'
10266,385035315,b'no using here because sometimes I do want manually dispose it (and then enforce commit)'
10266,385374924,"b""Why is this required? Shouldn't we just use `RecoverDirectory` ?"""
10266,385375302,"b""I don't want to create a server here. Instead, you should be creating an instance of `DocumentDatabase()` and use that API directly."""
10266,385377098,"b""But you aren't doing any disposal internally at all, no?"""
10266,385377430,"b""You shouldn't be doing cluster operations here."""
10266,385377978,"b""why are you dealing with the configuration in this manner?\r\nIf there are revisions in the DB, we want to preserve them.\r\n\r\nIt does bring a good point. Recovery won't help us with overall config (etl, revisions) or cluster wide items such as identity or compare exchange values.\r\nNeed to be sure that we make a note of this"""
10266,385378875,"b""Let's use a real object here. That would make the code a lot easier and maintainable over time"""
10266,385379348,b'```suggestion\r\n                        if (newDocument.GetPropertyNames().Length == 1) // 1 for @metadata\r\n```'
10266,385379631,b'What does previous recovery session mean?\r\n'
10266,385380762,b'why multiple separate transactions?'
10266,385381801,"b'This document is going to get HUGE, no?'"
10266,385382433,b'What scenario would cause it to throw here?'
10266,385382569,b'use {} here.'
10266,385382893,b'why is this commented?'
10266,386098306,b'I do: https://github.com/ravendb/ravendb/pull/10266/files#diff-54908524c9c84febb0b2eaa52e9d26c1R277\r\n'
10266,386099143,b'this is still draft PR'
10266,386100219,b'The recovered database is a new db. I am creating new config. Is there another way of doing that? '
10266,386100289,"b'This is again about not running a server. You can manually set this value to the right parameters, in memory only.'"
10266,386115339,"b'Please elaborate, how can I create DocumentDatabase instance without ServerStore? (and therefor a RavenServer) without refactoring DocumentDatabase?'"
10266,386115417,"b'No, logging just errors'"
10266,386115474,b'Some exception in the creation of the log document itself'
10266,386115761,b'see https://github.com/ravendb/ravendb/pull/10266#discussion_r384347010'
10266,386115939,b'EnsureDatabaseDeletion added (a bit later after opening new store for it)'
10266,386115943,b'EnsureDatabaseDeletion added (a bit later after opening new store for it)'
10266,386115949,b'EnsureDatabaseDeletion added (a bit later after opening new store for it)'
10266,386116036,b'EnsureDatabaseDeletion added (a bit later after opening new store for it)'
10266,386116170,b'I am not following? .. '
10266,386330145,b'You do not need to declare variable'
10266,386330170,b'You do not need to declare variable'
10266,386330238,b'You do not need to declare variable'
10266,386330270,b'You do not need to declare variable'
10266,386330338,b'You do not need to declare variable'
10266,386330363,b'You do not need to declare variable'
10266,386330420,b'You do not need to declare variable'
10266,386330533,b'You do not need to declare variable'
10266,386332123,b'Even in local function. So someone will know what you are doing here.'
10266,386332688,"b'Different idea. Perform a recovery on a live server and take database down? Copy values from Server Storage (Cluster), etc?'"
10266,386332966,b'Why are you enforcing commit? What is the idea behind it?'
10266,386337043,"b""Let's create a separate class to handle each one of those. At this moment it is hard to follow and maintain."""
10266,386869305,b'To use different transactions.\r\n\r\nI am using DatabaseDestination (and not direct PUT command) in order to be compatible with what import does for instance. And then I want to commit (`actions.Dispose()`) and add another transaction _only if needed_. \r\n\r\nI cannot do everything in a single transaction AND use DatabaseDestination/TxMerger. '
10266,386874850,"b'I am not following... WriteCounterItem, WriteDocument, WriteRevisions, WriteConflicts and WriteAttachments exists.\r\nThey are 99% of this class any how? (or do you mean to split something else to a different class?)\r\n'"
10266,386878465,"b""Counter actions wrap in CountersRecover, Document actions wrap in DocumentRecovery, etc. A bit of OOP haven't hurt anyone."""
10266,386959706,b'Done here : https://github.com/ravendb/ravendb/pull/10266/commits/15db3036b2bbecff6f08aa46fdc062efb8ae55f6\r\n\r\nI am not so sure it is needed though.. In my eyes it brings more reading complexity.. \r\nAnd there is no real _pattern_ here.  (unless we want to revise Recovery.cs which I guess we do not)'
10311,387159723,b'this.activeDatabase() -> db\r\n'
10311,387166121,b'right - done'
10266,387524755,"b""After recovery let's deploy all indexes from sample data (you can export them in the test) and check if the counts on valid data and after recovery are the same + also if there are no indexing errors"""
10266,387524896,"b""After recovery let's deploy all indexes from sample data (you can export them in the test) and check if the counts on valid data and after recovery are the same + also if there are no indexing errors"""
10266,387527197,"b""let's put date in the name"""
10266,387527551,"b'this is for testing purposes only, you should remove this'"
10266,387531573,b'Ping'
10314,387523057,b'Here you also can pass the `RawDatabaseRecord`'
10314,387524036,b'`GetMaterializedRecord`'
10314,387525586,b'`GetMaterializedRecord`'
10314,387527005,b'Remove brackets'
10314,387528405,b'`GetMaterializedRecord`'
10314,387531278,"b'Not sure if possible, but can we do something to prevent mutation of this? and rest of the properties.'"
10314,387532091,b'dispose?'
10314,387540021,b'Done'
10314,387540434,"b""Not really. We are using fields there. I cannot 'freeze' them."""
10314,387541512,"b""Can't. We are also checking if those properties exist in the JSON at all (backward compatibility)"""
10317,387630827,b'internal'
10317,387632604,b'done'
10298,386123697,b'why [0]? '
10298,386123840,b'please initialize this above'
10298,386123859,b'no need to have observables here?'
10298,386123880,b'I would strip word selected'
10298,386123902,b'we can even make it static and access using .constructor in model'
10298,386123916,b'and remove constructor'
10298,386123980,b'move return to next line to have standard switch stmt formating.'
10298,386124045,b'do we need observable here? If yes then validation group might be invalid when observable value changes'
10298,386124101,b'I bet we can simplify this logic.'
10298,386124132,b'we suppose to have drop down for that. This error message suggest something else? '
10298,386124233,b'hmm actually it is for comments. I never seen comments in csv.'
10298,386124420,b'callback is called with $data by default - no need to bind here? '
10298,386124424,b'same here'
10298,386124440,b'same here'
10298,386124467,b'why  ? '
10298,386127543,b'Updated `JsonDeserializationBase.GetValue` to accept char as well'
10298,386127620,b'done'
10298,386128925,b'removed observables from here'
10298,386129083,b'ok - removed'
10298,386231770,"b""@Danielle9897\r\nCan't we just use `QuoteString` instead of `Quote` ?"""
10298,386232429,"b'Please extract `""CsvConfig""` to constants'"
10298,386342597,b'CsvImportOptions (to match naming from smuggler)'
10298,386342747,b'`csvImportOptions` (to match smuggler one)'
10298,386887753,b'done'
10298,386889284,b'done   :)\r\n'
10298,386891124,b'The csv reader provides this option - I thought it would be nice to have'
10298,386894940,b'we use quote because right now JsonDeserializationBase can handle chars'
10298,386895125,b'ok'
10298,386895559,b'Adding this will open the file dialog with 2 file types filters: \r\n\r\n1.  `*.ravendbdump`\r\n2. ` *.*`\r\n\r\nIt is very convenient. I did the same for the CSV.\r\n\r\n![image](https://user-images.githubusercontent.com/17376974/75762034-b7237380-5d42-11ea-9248-0fa9cfa33e67.png)\r\n\r\n'
10298,386911090,"b'As I understand, \r\nQuoteString is Not used to set the _\'text qualifier character\'._  (get only)\r\nIt is the string representation of the quote (text qualifier) character.\r\n\r\nFrom the CSVHelper docs:\r\n\r\nQuote:  \r\n```\r\n    /// <summary>\r\n    /// Gets or sets the character used to quote fields.\r\n    /// Default is \'""\'.\r\n    /// </summary>\r\n```\r\n\r\nQuoteString:\r\n```\r\n    /// <summary>\r\n    /// Gets a string representation of the currently configured Quote character.\r\n    /// </summary>\r\n```'"
10298,386914536,b'we had this and removed for some reason - please try to find in file history.'
10298,386922009,"b'for csv someone may want to import data from txt file,etc. On linux people tend to forgot about extensions, so please revert this , ok ?'"
10298,386927982,"b'using   `_.partial($parent.delimiter, $data)`'"
10298,386928089,b'ok'
10298,386928142,b'ok'
10298,386932206,b'why not $parent.delimiter ? $data is passed to function as parameter.'
10298,386938640,b'ok - made regular'
10298,386945384,b'done'
10298,386965384,b'leaving this - as discussed'
10298,386966259,b'done'
10298,386976610,b'done'
10298,387150434,"b'we can make this class static, then remove constcutor.'"
10298,387151432,b'remove space before )'
10298,387153473,b'remove space before :'
10298,387153653,b'and double space before {'
10298,387153895,b'same here. '
10298,387156433,"b""I wouldn't use trim in validation, as if you put {space}{hash} it will pass validation and send to server 2 characters. Unless we trim this data before passing to csv import library ? \r\n\r\nOther thing, I assume we can't use // for comment, right? Only single char? """
10298,387175157,"b""1. right - I will add another trim before passing to server\r\n2. can't use // - there is validation for entering only a single char"""
10298,387177033,b'done'
10298,387177757,b'done'
10298,387178083,b'done'
10298,387187959,b'done'
10298,387294735,b'where is this validation on our side or in library? '
10298,387487932,b'OK'
10298,387586131,b'Added validation on server side + another test'
10298,387703645,b'- internal\r\n- non-static\r\n- private ctor\r\n\r\nI do not want one of them to be different that rest'
10298,387705260,b'switch it to `nullable` char'
10298,387705466,"b""Why are we setting this to null? It is 'default'?"""
10298,387732100,b'changed to `internal static`'
10298,387740409,"b'* You can set field `BadDataFound` with a method that is called when bad field data is found.\r\n   You set it to `null `if you don\'t want an exception to be thrown in case of \'bad data\'.\r\n\r\n* From the CSVHelper docs:\r\n```    /// <summary>\r\n    /// Gets or sets the function that is called when bad field data is found. A field\r\n    /// has bad data if it contains a quote and the field is not quoted (escaped).\r\n    /// You can supply your own function to do other things like logging the issue\r\n    /// instead of throwing an exception.\r\n    /// Arguments: context\r\n    /// </summary>\r\n    public virtual Action<ReadingContext> BadDataFound { get; set; } = new Action<ReadingContext>(ConfigurationFunctions.BadDataFound);\r\n```\r\n\r\nAnd:\r\n```    public static void BadDataFound(ReadingContext context)\r\n    {\r\n      throw new BadDataException(context, ""You can ignore bad data by setting BadDataFound to null."");\r\n    }\r\n```\r\n\r\n\r\n* imho - I thought that it would be ok to have the user be responsible for such fields -\r\nunless you think otherwise ?\r\n\r\n\r\n\r\n'"
10298,387769528,b'done'
10281,385367292,"b""This seems to indicate that the region name isn't required for custom S3, but is that the case?\r\nI don't think that this is true, see: https://developers.digitalocean.com/documentation/spaces/"""
10281,386349753,"b'We are in S3 Settings, so CustomServerUrl is enough.'"
10281,386350031,b'HasCustomServerUrl?'
10281,386351821,"b'IIRC everything needs to be on HTTPS, but is this the case with custom server? Maybe someone will want a local instance without HTTPS? If we do want to handle that, then we need to return the protocol here also.'"
10281,386352743,b'AmazonS3FactAttribute'
10281,386353386,b'custom S3 settings'
10281,386353408,b'custom S3 settings'
10281,387050405,"b'Actually, I check it so far just on HTTP. The `GetHost` function is used just for the header and it does not accept the schema.'"
10323,388390743,"b'I think it should be """", 0, -200 so this row will be offscreen.'"
10323,388472946,b'done'
10330,389611461,"b'```suggestion\r\n        private static void GetComparisonExpressions(MethodCallExpression expression, out Expression firstArg, out Expression secondArg, out Expression comparisonArg)\r\n```'"
10335,390423695,b'introduce a field similar to `CanPrefetch` and use it. E.g. `CanUseHttp2`'
10335,390429918,b'Done'
10327,390803540,"b""Missing cancellation token for database shutdown.\r\nAnd why can't we do this?"""
10327,390809109,"b'node A has change vector of `RAFT:1000` (and truncated log), now we add new node B.\r\nBefore A sends any document we do a cluster tx, so A & B execute it, so the change vector of A & B is now `RAFT:1001` and so A will skip sending the previous documents.\r\n'"
10329,389521608,b'switch to field'
10329,389522016,b'How does it behave after reloading the index?'
10329,389523004,b'I would rather prefer to handle everything inside the filters instead of adding this logging outside'
10329,389535616,"b'after index reset the CollectionOfBloomFilters is recreated, and repopulated with BloomFilters'"
10329,389550231,"b""I'm talking here more about shutting down the database, not resetting the index."""
10329,389635743,b'If it was consumed then it will be marked as consumed from the storage when DB reset'
10329,389727300,"b'Great, can you write a test for this?'"
10329,389777725,b'Sure !'
10329,390157434,b'How many docs +/- this is?'
10329,390214269,b'~120k docs'
10329,390223553,b'Seems low?'
10329,390477160,b'increased to up to 500k docs (25k * 20)'
10329,390802425,b'Under what scenario this will happen?'
10329,390807654,"b'I copied it from Flush() method,\r\nThe scenario of Delete() is similar to Flush() both called from same place.\r\nhttps://github.com/ravendb/ravendb/pull/10329/files#diff-bbed84f00f70fe07cd5deb3915a02d4aR474'"
10327,390847935,"b""Isn't this the same scenario if you are running on normal members?\r\nWhat if there is a small lag?"""
10327,390850116,"b""Because for cluster tx we aren't rely on the replication.\r\nIf we are a member we will read it from the state machine"""
10327,390873716,"b""But won't that stop the replication anyway?\r\n\r\nIn the promotable case, you are also reading it from the state machine."""
10339,390929376,"b'```suggestion\r\n                              $""to a healthy node because the current license doesn\'t include the highly available tasks feature."" + Environment.NewLine +\r\n```'"
10339,390929547,"b'```suggestion\r\n                              $""Task\'s last responsible node `{lastResponsibleNode}`, is currently in a `{nodeState}` state and will continue to execute the task."" + Environment.NewLine +\r\n```'"
10339,390930955,"b'```suggestion\r\n                              $""You can choose a different mentor node that will execute this task "" +\r\n```'"
10338,390966521,"b'I do not see how does it help? Handler is attaching to `OnServerCertificateCustomValidationCallback` method, which is using the `_serverCertificateCustomValidationCallback`. Can you explain?'"
10338,390977931,"b""If you already have an `HttpClient` for that thumbprint, you'll keep using this.\r\nAnd will never re-create the `HttpHandler`, even if you create new `RequestExectuers`"""
10338,391041568,b'But why you need to recreate it?'
10338,391425843,"b'We are adding the callback only when we create the http handler, and only when creating the request executer. '"
10337,391458983,"b""We explicitly didn't want to have it IIRC. The whole indexing was even designed in a way that the name is not available at the storage level?\r\n\r\nThis will have severe impact on the storage size."""
10337,391472251,b'Good point. Will try to avoid this.'
10337,391553706,"b'Here, are we *sure* that the names are sorted using case insensitive manner? I would expect that they are case sensitive here.'"
10337,391556941,b'What is this for?'
10337,391557135,"b""If this is the case, need to actually throw real error here.\r\nOtherwise, in release, we'll do horrible things here."""
10337,391561766,b'The time-series `Heartrate` and `HeartRate` must be the same. \r\nWhy would you expect it to be case sensitive? \r\n\r\nanyway it should be consistent with:\r\nhttps://github.com/ravendb/ravendb/blob/bad6628a9e11862a5158da0eaef9c82818e4a16b/src/Raven.Server/Documents/TimeSeries/TimeSeriesStorage.cs#L1656'
10337,391562215,"b'Okay, that ensures the right behavior'"
10337,391562904,"b""It is only a precaution, but in case it did happened, do we want to fail the export because of this? if this happened in production, we need a way to fix it.\r\nWorst case we will export time-series that doesn't have any document (and with the lowered id name)  """
10337,391563084,b'related to the other comment'
10337,391567370,"b""If this is fine, then don't throw, just log a note about this.\r\nI really don't like debug / release different behaviors. They lead us to miss important issues."""
10324,390829365,b'TODO ? I think you already handled that'
10324,391563547,b'What would persist this change after this?'
10324,391568095,b'why todo here?'
10324,391631937,"b'Yes, sorry'"
10324,391632417,b'This is used during index Reset only and during that operation we are persisting whole definition again because index is being recreated'
10324,391633166,"b""I've marked it as todo, because I was not sure how to handle that, but at later stage I did handle this, but forgot to remove the TODOs"""
10340,391097629,b'remove space after ('
10340,391097725,b'2x'
10340,391098592,b'I think we should use better selector  - this is really fragile'
10340,391099103,b'do we need to escaping something here?'
10340,391108563,"b'done - and also:\r\nnow using `$("".list-view"").on(""click"", "".copy-item-button"", function(event) { ....`\r\n(changed class name in other places where needed)\r\n'"
10340,391482610,b'now using: `$(this).next().text()`'
10340,391491745,"b'can we use $(""span"", this).text() ? '"
10340,391498852,b'done'
10340,391505830,b'The dom structure per item is:\r\n\r\n```\r\n<div>\r\n    <pre>\r\n        <a>the copy button</a>\r\n        <span>the text to copy</span>\r\n    </pre>\r\n</div>\r\n```\r\n\r\n`$(this)` is the `<a>` element that was clicked on - it has no text on it.\r\nso I go to `$(this).next()` - which is the `<span>` that has the text.'
10340,391521883,"b'oh ok, so `$(this).next().text()` should be good'"
10340,391523877,b'yes - this is nice and less fragile'
10344,392523943,"b""@ppekrol I'm pretty sure that this is fine to do. Can you verify?"""
10344,392526277,"b'Missing handling of `win7` here, which is now out of support.  Not sure if we want to remove the `win7` support or keep it. Thoughts?'"
10344,392526281,"b'Missing handling of `win7` here, which is now out of support.  Not sure if we want to remove the `win7` support or keep it. Thoughts?'"
10344,392914058,"b""Don't we want to throw here?"""
10344,392914302,"b'From one side yes, from the other I have a feeling that it might still be popular in come circles. There is extended support option available? Or Windows Server equivalent that has still support?'"
10344,392914819,b'Should be fine. It is used only in Raven.Server which is a netcoreapp3.1 project.'
10344,392916100,"b'If I understand this correctly, by using new method we do not need to do any copying. Double checking.'"
10344,393001218,"b""As long as .NET core supports it, it isn't hard to support it too"""
10344,393001400,b'Yes'
10344,393001525,"b'Yes, this is no longer needed'"
10350,393204802,b'It is not related to the main issue but I think it is wrong (It probably worked just because the offset was always zero)'
10350,393306567,"b'Yes, that is fine, because we start from `Offset`'"
10345,392834029,"b""```suggestion\r\n                            _result.TrySetException(_additionalTask.Exception);\r\n```\r\n\r\n`.ExtractSingleInnerException()` should be on the caller, not here. We don't want to possibly lose information for the caller"""
10345,392907775,b'You are not failing the test here. After this line you should add an assert or throw that it should not happen'
10345,392907996,b'Is there a smaller version of this test available?'
10345,392909037,b'Have you pushed this?'
10345,393200593,b'yes'
10344,393928613,"b'instead of using mutator we can use PlatformDetails inside the DynamicNativeLibraryResolver, we will not need the mutator at all then (maybe rename to SodiumNativeLibraryResolver?)'"
10344,394150692,"b""The problem is that we don't have `win7` for Sodium (and won't for zstd)"""
10356,394841697,"b""Shouldn't this be `FindClrTypeNameForDynamic` to match the other convention `FindClrTypeName` ?"""
10357,395033822,b'```suggestion\r\n        public TimeSetting IoMetricsCleanTimeInterval { get; set; }\r\n```'
10357,395034648,"b""This isn't being used?"""
10357,395035883,b'Save the `_lastMetriceCleanerRun` in `DateTime` format'
10357,395040014,"b'no, will delete it'"
10357,395083990,"b""Missing `[TimeUnit(TimeUnit.Hours)]`\r\nLet's make it 24 hours by default"""
10357,395488213,b'Should go to `StorageConfiguration` IMO\r\nand key should be `Storage.IoMetricsCleanupIntervalInHrs`'
10357,395489040,b'Rename to: `_nextIoMetricsCleanupTime`'
10357,395489341,b'Why is this so important?'
10357,395489860,b'`Time (in hours) between IO Metrics cleanup`'
10357,395491155,b'Rename `ioMetricsCleanerTicks` to `untilTicks`'
10357,395541271,b'removed'
10357,395548144,"b""property does not have to have 'InHrs' in contract to configuration key. It is a TimeSetting with TimeSpan value"""
10357,395576352,b'Done'
10328,389611572,"b""I'm not sure if this is importatnt, but previous code was checking if database is not null. Currently check is missing. """
10328,389634440,b'done'
10328,395499328,b'Move it inside `ToggleDatabasesStateCommand` and rename to `Parameters`'
10328,395499473,b'Move it inside `ToggleParameters`'
10328,395499539,b'rename property name to `Type`'
10328,395500056,"b'I do not like that name, but I cannot think of a better one'"
10328,395502046,b'I do not like the inconsistency between this endpoint and `/admin/databases/dynamic-node-distribution` in naming'
10328,395502197,"b""The `/admin/databases/dynamic-node-distribution` has `enable`. Let's stick to one?"""
10328,395505033,"b'I would prefer disable everywhere, we probably can change the other endpoint, it is not exposed in any client api'"
10328,395622518,b'done'
10328,395624620,b'done'
10328,395624669,b'done'
10328,395649016,b'done'
10328,395650109,b'We have `SetDatabaseDynamicDistributionOperation` which uses the `/admin/databases/dynamic-node-distribution` endpoint.\r\nChanged to `enable`'
10328,395650342,b'Changed to `Disable` to be more clear'
10349,393953217,"b""```suggestion\r\n                        min = 0; // cannot delete the tombstones until we've done a full backup\r\n                        continue;\r\n```"""
10349,393953500,b'This change should also be here'
10367,396107478,b'Huh? Why do we need this like that?\r\n'
10367,396107884,"b""If the generated bytes form a negative number, certificateGenerator.SetSerialNumber() will throw, so I'm making sure random gives us a positive number."""
10367,396108055,b'Then why regenerate the number? flip the sign\r\n\r\nhttps://github.com/bcgit/bc-csharp/blob/master/crypto/src/math/BigInteger.cs#L721'
10367,396108520,"b""Ooh that's nice, I missed this method."""
10299,386476154,"b""I don't understand this.\r\nYou have two sides here: What the time frame that we work on? And what is the frequency that we do the roll up.\r\nBut the API seems really confusing. Also, why not simple have two time spans here?\r\n"""
10299,386476371,"b'Better to call it roll up, not down sampling'"
10299,386486343,b'Why this check?'
10299,386486695,b'This needs to run server side as well'
10299,386840141,"b'This draft PR is exactly for this purpose, to decide on a good API.\r\n \r\nI need here some ASCII art to explain what I\'ve tried to do:\r\n`+---- raw -----|t1|----- rollup1 ------|t2|------ rollup2 -----| delete >`\r\n\r\nEach rollup policy have `t`, which defines how far from `now` is should be applied.\r\nAlso, it defines the ""aggregation factor"" which define the down sampling.. \r\n\r\n'"
10299,393477809,b'This looks rather awkward API.\r\nWhy not simply do enumeration?'
10299,393478165,"b""I don't like this kind of API"""
10299,393541768,b'Make sure that you dispose the old `policyRunner` here'
10299,393542537,b'What if this does not exists?'
10299,393543529,b'This is very strange way to find a policy by name.\r\nWhy are you searching for a greater than here in an unordered policies?'
10299,393965840,"b""This is that check we do for revision configuration as well. \r\nI guess we don't want to override an existing configuration? But I agree that it might result in an unexpected behavior without any warning/message. \r\nWhat do we want to do here? overwrite or notify that we skip this config, because one is already exists?"""
10299,394207681,b'add `null` check'
10299,394214475,"b""Let's use properties here. We do not care about performance here and you can easily override properties in the future, and fields are not that easy to work with."""
10299,394215038,b'Can this be null?'
10299,394215152,b'Policies can be null?'
10299,394215398,b'IIRC you can make it internal?'
10299,394216387,b'Sanity-check. Null is expected value here?'
10299,394216531,b'TODO'
10299,394222477,"b""Do we want to 'split' it using `_` like in index names?"""
10299,394228086,b'rename to `Average` it will match what we have in Facets'
10299,394237045,"b""I don't understand this. Why are you doing a query like that, and why is it `O(n)` ? """
10299,394237264,b'Why comparing by greater than?'
10299,394237551,"b""This is pretty ugly. Can't we hold the index of the policy, so we don't have to do this?"""
10299,394237675,"b'Same, enumerator, maybe?'"
10299,394238683,"b""If we do this, then we have to provide the ability to have multiple rollups. One for min, one for max, etc.\r\nCan't we do all the aggregations, instead?"""
10299,394246732,b'Write a message here. It can be as simple as `size > 0`. It is easier to trace failing assert then'
10299,394248226,"b""Isn't the word just `Rollup` ?"""
10299,394248541,b'nameof?'
10299,394249742,"b""Are we certain that this MUST be in that dictionary? Shouldn't we use TryGet?"""
10299,394250319,b'This should be lowered?'
10299,394250373,b'This should be lowered?'
10299,394265878,"b""Do we want to go with first? Isn't that the most busiest one? It probably it the most up to date, but do we care about that?"""
10299,394267800,"b""Sanity-check. Shouldn't be an issue that we are allocating here instead of 'slicing' Slices?"""
10299,394268302,b'What is this used for?'
10299,394269383,b'Are we sure we want code like this here instead of e.g. `TimeSeriesStorage.Rollups.MethodName()` ?'
10299,394269855,b'Remember that we need to fix this later on'
10299,394270355,b'nameof?'
10299,394271779,b'can value be null?'
10299,394318137,"b'This will generate names such as: ""Every00:30ByAvgKeepFor1.00.00"", no?\r\nThat seems pretty ugly'"
10299,394320934,b'Do we have to worry about concurrency here?'
10299,394321127,b'```suggestion\r\n        private enum RollUpColumns\r\n```'
10299,394322042,"b""No, changing the policy doesn't delete data"""
10299,394322157,"b""I really don't like the next / prev thing, what purpose does it serve?"""
10299,394322420,"b'Yes, collection names are case insensitive'"
10299,394323828,"b""Shouldn't this be at the top ? Just in case we change the structure, it would be easier to manage"""
10299,394324246,b'This is what we do for expiration and refreshing. That give us the most consistency'
10299,394324758,"b""Shouldn't you have a `To` here?"""
10299,394327871,b'I think that this uses implicit conversions. But should it?'
10299,394328136,b'Used elsewhere to limit how many items we scan per batch'
10299,394328908,"b""I think this will delete everything, because `To` isn't specified."""
10299,394329681,b'What if there are more than `BatchSize`?\r\n'
10299,394330596,"b'TryGet, no?'"
10299,394330867,"b""Doesn't this consume the reader?"""
10299,394331464,b'Why do we have to get to this point to bail out? To remove the policies markers?'
10299,394332549,b'Why is this its own dedicated column?'
10299,394332591,b'```suggestion\r\n        private enum StatsColumns\r\n```'
10299,394337239,"b'I think this was originally meant for import, so if you update an existing value? '"
10299,394337565,b'This is not a valid way to handle things. `offset` might fall inside of UTF8 mulit byte char'
10299,394492690,b'`null` should remove the configuration and close the runner. \r\nwill verify and add a test'
10299,394546408,"b'no, test added'"
10299,394546455,"b'no, test added'"
10299,394547205,b'removed the `nullable` and the ambiguity between `null` and `TimeSpan.MaxValue`. '
10299,394553727,b'But there is a point that we are putting more and more load on the primary.. for now I leave it as is.'
10299,394556386,"b""Not sure I'm following."""
10299,394558288,"b""We are indeed allocating here. \r\nBut let's optimize it a bit later, since changing this will require to change `string` into `slice` in various places"""
10299,394559097,b'maybe. will safe-guard.'
10299,394567160,"b""This actually an interesting issue.\r\nLet's say we have a single value time-series. Stock price. \r\n\r\nRight now each aggregation result is represented by a point on the policy time-series. So if I aggregate daily by `Average`, each day I'll create a single point from the raw stock price.\r\n\r\nBut if I want to aggregate daily by `First`, `Last`, `High`, `Low`.\r\nRight now it is a problem, since I can define only a single type.\r\nTo allow this kind of thing we can either create a complex policy tree or create a single 4-dim time-series (which I like more).\r\n\r\nBut do we want to tackle this now?"""
10299,394567910,"b""Don't believe so, since eventually all goes through the tx merger."""
10299,394568997,b'So changing the configuration should keep left-overs?\r\nThe user should manually delete them?'
10299,394571234,b'I populate this in line `394` .\r\nEach policy has a different to.'
10299,394572528,b'Here we are in the tx merger. We will release it and loop in again from the caller.'
10299,394573936,"b'Yes, but I need it only for this purpose.'"
10299,394574428,"b'Yes, remove rollups that were already done and replicated.'"
10299,394575211,"b'Easier to work with, instead of adding/removing the separator each time.\r\nIs it a problem?'"
10299,394578017,"b""Okay, I'll remove this entirely, since we want to optimize the caller function anyway (`SplitKey`)"""
10299,394579171,b'Now I actually using it.'
10299,394580132,"b""Yes. Sorry. \r\nShould we let the user define it? \r\n\r\nNote that I persist the name of the policy which is unique for it's definition.\r\n\r\n """
10299,394588993,"b""The policies sorted by `AggregationTime`, I can extract this time from the name. \r\nBut should we care about it? `O(n)` where `n` is expected to be low.\r\nWhat do you suggest? I really don't want to persist the index of the policy."""
10299,394589450,"b""If it contains or not? and `Contains` doesn't work with `StringComparison`."""
10299,394600760,"b""Okay, let's hold the index"""
10299,394637596,"b'So we have a bigger problem here, we keep it with the original casing\r\ne.g. https://github.com/ravendb/ravendb/blob/23c596b3b0f84bca9f7c19ec02e64a89850189a2/src/Raven.Server/Documents/TimeSeries/TimeSeriesStorage.cs#L906\r\nAlso, why do we store the collection at all? for replication only? \r\n\r\nAnyway, why do we care about it here? we need only to ensure that when we read from the configuration we do it in case-insensitive matter. '"
10299,394843725,"b""What I've meant is that we are using xxxStorage classes for storage interaction and here you are inserting directly into table without using TimeSeriesStorage.Rollups for example"""
10299,394847467,b'Can we convert those timespan values to some human readable value and use them in the name or do we prefer user to specify the name?'
10299,394850223,b'database.Time.UtcNow()'
10299,394855181,"b'Okay, I will move it to dedicated class.'"
10299,396089649,b'We will let the user to define the policy name. It should be unique and we will do only best effort validation. '
10299,396089951,"b""Removing the policy will keep the data by default and it will be user's responsibility to delete them.\r\n \r\nChanging the parameters for an existing policy will take effect from the time of the change and will keep previous data intact. (unless is should re-aggregate due to the parameters change)"""
10299,396332810,"b'The raw time series will be always aggregated into (`First`,`Last`,`Min`,`Max`,`Sum`,`Count`).\r\nIn that order.\r\nOther policies will aggregate each of those values further independently.'"
10376,396540577,b'Use e.Data for this.\r\n\r\nhttps://github.com/ravendb/ravendb/blob/69acc524c4bfc80cd9aa1bd6a45b361b091d49a7/src/Raven.Server/Documents/DatabasesLandlord.cs#L643'
10364,396293641,b'@Danielle9897 Do we have any usage of this method now?'
10364,396351010,b'No usages. I will remove.'
10299,396957510,"b""Haven't you wrote that setting null here will remove the configuration? `ConfigureExpirationOperation` allows that."""
10299,396960154,b'What is the difference between `Mean` and `Average` ?'
10299,396961009,"b'Arithmetic Mean IIRC is average, is this another type of mean? '"
10299,396968254,"b""Indeed Arithmetic Mean is Average. We don't support anything else. \r\n"""
10299,396969051,"b""I think that we can remove 'Mean' ?"""
10299,396973178,"b'Actually passing `null` to `ConfigureExpirationOperation` will throw \r\n```\r\nSystem.InvalidOperationException : Cannot perform ReadValue when encountered the ReadObjectDocument state\r\n   at Sparrow.Json.ManualBlittableJsonDocumentBuilder`1.ThrowIllegalStateException(ContinuationState state, String realOperation) in C:\\Work\\RavenDB-5.0\\src\\Sparrow\\Json\\ManualBlittableJsonDocumentBuilder.cs:line 582\r\n   at Sparrow.Json.ManualBlittableJsonDocumentBuilder`1.FinishWritingScalarValue(BuildingState currentState) in C:\\Work\\RavenDB-5.0\\src\\Sparrow\\Json\\ManualBlittableJsonDocumentBuilder.cs:line 566\r\n   at Sparrow.Json.ManualBlittableJsonDocumentBuilder`1.WriteValueNull() in C:\\Work\\RavenDB-5.0\\src\\Sparrow\\Json\\ManualBlittableJsonDocumentBuilder.cs:line 284\r\n   at Raven.Client.Json.BlittableJsonWriter.WriteNull() in C:\\Work\\RavenDB-5.0\\src\\Raven.Client\\Json\\BlittableJsonWriter.cs:line 338\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)\r\n   ....\r\n```'"
10377,396543114,"b'[ConfigurationEntry(""Migration.MigratorPath"", ConfigurationEntryScope.ServerWideOnly)]'"
10377,396543598,b'MigrationConfiguration'
10377,396544115,b'Property name => MigratorPath'
10377,396544340,b'nameof(MigrationConfiguration.MigratorPath)'
10377,396545928,"b""Isn't this more like a StudioTaskHandler endpoint? This is used purely for Studio, right?\r\n\r\nIs Operator fine (I think it is). Who can do migration?"""
10377,396546097,b'Migration'
10377,396976012,"b""Yes, Studio only. I'll move it.\r\nMigration can be done by Operator."""
10377,396984183,"b""I think we don't want to expose the actual path, only if it is defined or not.\r\nSo I'm sending a boolean here."""
10371,396556544,b'I think this should only be applied when `nbe.Operator` is And or Or.\r\n\r\nAlso this changes:\r\n`Not ( <Field>: SomeProperty NotEqual p0 (Parameter) And <Field>: SomeProperty NotEqual p1 (Parameter))`\r\ninto\r\n`Not ( <Field>: SomeProperty NotEqual p0 (Parameter)) And <Field>: SomeProperty NotEqual p1 (Parameter)`\r\n\r\nwhich I do not think is correct? (running SlowTests.Tests.Linq.IsNullOrEmpty tests)'
10371,397065564,"b'You are correct, fixed now'"
10368,396148461,b'can we have a look at those change on skype tomorrow? '
10362,395699320,b'do we need to use self there? '
10362,395700099,b'why true by default ?!'
10362,395700677,b'oh you override this in constuctor - so please skip default value here'
10362,395703039,b'I think we have different message when url is invalid. '
10362,395703386,b'please format code:\r\n```\r\n} else { \r\n```'
10362,395703474,b'no need for !! here. '
10362,395704328,b'hmm actually we can call parent method here - which check for enabled + check other things here. '
10362,395711995,b'right - done'
10362,395712305,b'right - done'
10362,395733756,b'done'
10362,395735565,b'ok - will change to be the same'
10362,395738855,b'ok'
10362,395745492,b'right - changing back to this'
10362,396493654,b'here is another self? '
10362,396495320,"b""why can't we use validUrl validation rule? """
10362,396794000,b'ok - using instead:\r\n\r\n```\r\n validUrl: {\r\n                onlyIf: () => this.useCustomS3Host()\r\n }\r\n```'
10362,396799247,"b""In this case, I _haven't_ introduced a new `self`\r\nIt is used to access the right fields (see fields below also)\r\n`this` would be the validator object\r\n"""
10362,396946914,"b""do we need to use this with onlyIf - validurl doesn't compain when value is empty"""
10362,396947128,"b""I know it wasn't you but it would be nice to fix it. so please use arrow function instead. Then this will be bound correctly"""
10362,397358767,b'refactored'
10372,396393618,"b'`if (_listeners.IsEmpty == false || _pipeSink != null) return (true, true);`'"
10372,396966685,"b""Let's be consistent and convert this to a field"""
10372,396968490,"b""Shouldn't we move this inside the `if` now?"""
10372,397201002,b'While testing I ran to a situation when the logging thread run `SetupLogMode` it will run the restart on another thread.\r\nSo the `StartNewLoggingThreads` running without lock so someone else can  run `SetupLogMode` simultaneously'
10382,397670836,"b""I don't like this API. In this case, we want to prioritize performance.\r\nThe common case is for us to use many counters for many documents, so we'll be creating a lot of those instances.\r\nBetter to use API such as: `IncrementAsync(string docId, string name, long delta)`"""
10382,397671583,"b'This is *really* expense. And you are allocating here.\r\nWhy do you need it? It would be sufficent to just call `changeVector.Length *2`, which should be a great estimation.'"
10382,397672270,"b""I don't particularly love this API. \r\nThis force us to do allocations for the delegate on each call, which we would like to avoid.\r\nCan we avoid this?"""
10382,397795975,b'I only call it once per the entire BulkInsert operation (the size is cached).'
10382,398042848,b'Done'
10386,398104403,b'Do we want to have also the `from` and `to` as optional?'
10386,398108190,b'What do you think about `Append` without `DateTime` something like `AppendNow`? Do we want something like that?\r\nIt can use either server or client time.'
10386,398142316,"b""No, they aren't optional, they are required, and we want to make the user specify it"""
10386,398142916,"b""No, exactly because this is so hard to figure out, let's do that explicitly. \r\nUser need to call `DateTime.UtcNow`, not really hard"""
10384,398183151,b'for and id are not bound correctly - loadTimeout vs LoadTimeout'
10384,398183402,b'Do we need to say that default timeout is HttpClient timeout? '
10384,398197226,"b""1. Done - unified for and id\r\n2. Probably can do without explicitly saying 'HttpClient' and just say: '_Use default timeout (100s_)'\r\n    I just needed to have some text similar to the sql-etl task where we have: '_Use SQL provider default value_'\r\n    """
10386,398351443,"b""Just to note that if we put server's time we avoid conflicts on the the time-stamp and can handle clock/time issues.\r\nBut I guess if needed we can add this later."""
10384,398359099,"b""2. Yeah, we can drop 'HttpClient' there"""
10386,398363479,b'Not really a good idea. Because now you added network lag to the time we measure. '
10374,396410600,"b'@ml054 I added this for the certificate view in the Studio, if NotAfter is null the default expiration is still 5 years so nothing is broken and you can add the UI later.'"
10374,396410939,"b'@ml054 and this is for the setup wizard, if left null default is 5 years'"
10374,396945836,"b""@iftahbe when we are putting that into storage (in PutCertificateCommand for example - where else?) can this be null? If not, then maybe let's add a validation there?"""
10374,397135784,"b""There's also PutCertificateWithSamePinningHashCommand.\r\nYeah I'll add validation.\r\nAlso, I just realized this needs to be added to the cli as well."""
10374,397145520,"b""There's also PutLocalState which is for when we are passive."""
10390,399251666,b'for performance reasons please compute OBject.keys(cellValue).length 1 time.'
10390,399266886,b'done'
10390,399296646,"b'`prop.Value as BlittableJsonReaderArray` suggests that we are expecting that this might be `null`? If yes, then we can get NRE here, but I think this cannot be `null` so I would suggest using non-safe cast.'"
10390,399296856,"b'`prop.Value as BlittableJsonReaderObject` suggests that we are expecting that this might be null? If yes, then we can get NRE here, but I think this cannot be null so I would suggest using non-safe cast.'"
10390,399298254,"b'Previosuly we had a `HashSet` here. It suggest that we were expecting duplicates? If yes, then `.Add` will throw. You should use `[prop.Name] = value` instead. '"
10390,399299262,"b'If we are not expecting duplicates, then we can build DJV right-away. Instead of using Dictionaries, you can add values to DJV.'"
10390,399397884,b'typo'
10390,399765242,b'ok'
10390,399765269,b'ok\r\n'
10390,399765277,b'ok'
10390,399765297,b'done'
10399,400091294,b'Why do this? We are already creating this in the context.\r\nAdding it for each map means that we have a LOT more scripts to go through'
10399,400115933,"b'In `ExecuteCodeAndCollectReferencedCollections`(Line 200) we create a new program and using the visitor to execute it on each map to extract the referenced collection, if the map uses a script from additional scripts then the visitor will fail to extract the Referenced Collections, this is why I pass the map+additional scripts.\r\n\r\nTaking a 2nd look I can remove the `_engine.ExecuteWithReset(program);` from `ExecuteCodeAndCollectReferencedCollections`\r\nand add `_engine.ExecuteWithReset(map);`  before I concat the `additionalSourcesString` to `map` (line 238)'"
10399,400116812,"b'You can also pass the additional sources to the visitor, no?'"
10399,400145886,b'done'
10383,400143316,"b""Can't `CountersToIncludeBySourcePath` be null?"""
10383,400168182,"b""I just moved the old code, but the method 'IncludeCounters' checks that internally."""
10387,399135377,b'Do we want to have `timeseries(name)` also and Id would be taken (IIRC) from `SingleRun.OriginalDocumentId` ?'
10387,400097859,b'```suggestion\r\n                AssertValidDatabaseContext(_timeSeriesSignature );\r\n```'
10387,400098663,b'Why do you need this? Why not just use the `args` ?'
10387,400099052,"b'```suggestion\r\n                const string signature2Args = ""timeseries(doc, name).append(timestamp, values)"";\r\n```\r\n\r\nNo?'"
10387,400099111,b'Same here'
10387,400099310,b'What would this API look like for counters?'
10387,400099888,"b'You might be called on another document, though. Maybe loaded.'"
10387,400100397,"b'```suggestion\r\n                const string signature = ""timesieres(doc, name).remove(from, to)"";\r\n```'"
10387,400166823,b'This is why I thought to have it as an addition to the current one'
10387,400187348,"b'something like this ? :\r\n`counters(doc).increment(name)`\r\n`counters(doc).increment(name, value)`\r\n`counters(doc).delete(name)`\r\n`counters(doc).get(name)`\r\n\r\nand maybe also :\r\n`counters(doc).getAll()`\r\n`counters(doc).getRaw(name)`'"
10387,400191845,"b""Looking at this, I don't know if that would be worth our time"""
10387,400191940,b'@ppekrol ?'
10387,400183270,"b'I also didn\'t think that this was needed, and I originaly just used the `args` here\r\n\r\nbut then I noticed that I had a single test that was always failing :\r\n`CanAppendTimeSeriesByPatch_WithoutTag`\r\nwith InlineData : `@""timeseries(id(this), args.timeseries).append(new Date(args.timestamp), args.values);""`\r\n(the 2nd inline data for this test, with explicit tag = null, worked fine) :\r\nhttps://github.com/ravendb/ravendb/blob/v5.0/test/SlowTests/Client/TimeSeries/Patch/TimeSeriesPatchTests.cs#L174\r\n\r\nand in this failing test, when I reached line 308 here: https://github.com/ravendb/ravendb/pull/10387/files#diff-d69adfc2e1af26dc65c54a25d0723462R308\r\n`AppendTimeSeries(args[0], args[1], values));`\r\nargs[0] was the timestamp and args[1] was the values (i.e at this point `args` were the arguments for `AppendTimeSeries`, not the arguments for `TimeSeries`)\r\nI tried to investigate that, but couldn\'t figure out why this happned, and why only in this specific case..\r\n\r\ncloning the `args` into `originalArgs` solved this problem'"
10387,400206889,"b'It is nice, but we still probably would want to keep both of the syntaxes for some time. Because of that, I think we can do it later on in 5.x cycle and deprecate old syntax in 6 or 7 even. Thoughts?'"
10402,400342137,b'The cause of the test failure is that the `RemoveSocket` creates a new log thread async and it can happen after the test is finished and after `EndLogging` is called. The solution can be just to be sure in the test that `EndLogging` is called after the new log thread is set but using the same thread seem to be better implementation (and it fixes the test too).\r\nIs there a benefit of creating a new thread?'
10387,400661699,"b'Make sense, we can delay that, then'"
10333,391571580,"b'```suggestion\r\n            if ( _referencedCollections.Contains(change.CollectionName))\r\n```\r\n\r\nDo the same thing, no?'"
10333,391571845,"b""Why? If the referenced document was deleted, shouldn't we reindex?\r\n"""
10333,391576976,b'How can I index all counters in a collection? `counters.Users` would work?'
10333,391579055,"b""Yes, it will work the same way as for timeseries, but I haven't implemented that yet. Going one feature by one."""
10333,391579595,"b'We are, it is handled below.'"
10333,391579646,b'Yeah.'
10333,391581330,b'So why do we need this code?'
10333,391616795,"b""This is for source document deletion, not referenced. E.g. I'm indexing counters from companies/1. We need to trigger the indexing if it was deleted."""
10333,394308367,"b'TODO:\r\n- this is just an optimization, maybe we do not need to keep everything, just last X items\r\n- check if we are not disposing LSV'"
10333,394822848,b'Invalid source type - it should be `IndexSourceType.Counters`'
10333,394825286,b'Whats the purpose of size? What do we use it for?'
10333,394825689,"b'Just ""counter"" maybe?'"
10333,394826924,"b""Can you please put some comment explaining why do we have it? Something that it's related to how counters are stored, that we have counter groups and implications for indexing because of that"""
10333,394828120,b'`.QueryContext`? We call it during indexing not when querying it - please check it'
10333,394829218,b'TODO ?'
10333,394855316,"b'For stats, we are using this to record the amount of data that was processed'"
10333,394855949,b'done'
10333,394856009,b'done'
10333,394857598,b'done'
10333,394858142,"b'It is fine, in this case the name does not match very well, but indexing batch also needs to open that context, because we might be indexing compare exchange'"
10333,394859466,b'done'
10333,400088771,b'Can Count be 0 here?'
10333,400243319,b'spoke with @aviv86 it is not possible'
10387,400702490,"b'Okay, the issue is that Jint is reusing instances. Instead of allocating a new instance of the `args`, it will reuse it.\r\nI changed things so the value is carried in the object itself.'"
10387,400703777,b'see https://github.com/ravendb/ravendb/pull/10404'
10358,400673543,"b'Need to remove this, no?'"
10358,400681553,b'I will remove that in 4.2'
10403,400681550,"b'Can we rename this something less generic, like MigratorPathConfiguration '"
10403,400764806,"b""done (my original thought was that maybe 'configuration' interface will represent other settings in the future) """
10403,400765632,b'but this is migrator specific '
10408,401010133,"b""What? I don't understand this comment"""
10408,401011317,b'Calling delete will call delete?'
10408,401024276,"b""If `Delete` (by entity) called during `OnBeforeStore` then `Delete` (by id) will be used instead\r\nI added this warning because `Delete` (by id) don't call `OnBeforeDelete` listener"""
10380,397794502,b'Change to property'
10380,397843788,"b""Can we have '@' in the name of TS?"""
10380,398559527,b'https://issues.hibernatingrhinos.com/issue/RavenDB-14800'
10380,401064755,"b""I do not like this. Better to have 2 separate methods. Can't we have 2 separate methods? GetTable and GetOrCreateTable?"""
10408,401121862,"b""Let's remove the comment and make the `Delete(id)` raise the `OnBeforeDelete` as well"""
10408,401125484,b'IIRC this is a deferred command and we do not raise events for those and OnBeforeDelete requires an entity'
10408,401128614,"b'We can pass null for the entity, no?\r\nAnd there is a different between `Delete(id)` and `Advanced.Defer()`'"
10406,401124286,"b""Don't we need to filter `length` here?"""
10406,401133267,"b""Yes! I've introduced an extension method to handle this"""
10408,401136789,"b'The Delete(entity) should trigger the event for sure, the Delete(id) should not, I will check tomorrow with @garayx and we will see what can be done about that'"
10416,401581050,b'introduce parameters here and merge those two exceptions?\r\n`ThrowMissingProperty(nameof(DocumentId));`'
10416,401594060,b'done'
10416,401594572,"b'When I think about it, in most cases it is redundant, would it be better to assume that we get a sorted data from the client.\r\n\r\nOtherwise we will throw during the enumeration?'"
10416,401595454,b'@ayende @ppekrol '
10416,401606867,b'there is also the problem of having repeating timestamps in `_operation.Appends` \r\n(like in `CanCreateSimpleTimeSeries2` test) - which this code solves'
10420,402892233,b'We cannot do this like that. This will ignore OOM exception and e.g. kill the index without killing the server. User will not know that half of his indexes are not working. This needs to be handled internally in all of the actions.'
10405,400803481,b'Can you pass here the `LowMemSeverity`?'
10405,400804647,"b'Instead of `IsLowMemory` and `ExtremelyLow`, just `LowMemSeverity`'"
10405,400805557,"b""`totalClean` should start with 0 (it's initial value is `memAvailableInKb`)"""
10405,400812777,b'Why not expose the severity here?'
10405,400818992,"b""I don't follow?"""
10405,401812601,b'Still need to make the change here'
10405,401813550,b'Why do we want this?'
10429,403729228,"b""TimeSpan is struct so it can't be null, so I'm affraid comment here is misleading."""
10429,403729432,"b'we added this constructor to have user live easier. When we want to modify single propertly and leave other with same values, we use GetLogsOperation which returns GetLogsConfigurationResult, then we can use this object to initialize parameters for set operation with current values. '"
10429,403729551,"b'can we rename to getAdminLogsConfiguration to match url, object and error message? '"
10429,403729571,b'saveAdminLogsConfigurationCommand'
10429,403729689,b'success message is incorrect. This class allows us to configure not only log mode. '
10429,403729712,b'same here'
10429,403730036,"b""I'm not sure it will be properly transpiled. """
10429,403730161,"b""I think we don't need this observable at all. """
10429,403730398,b'why none is missing here? it can be static.'
10429,403730462,b'remove space'
10429,403730500,b'are you sure type here should be sprarrow.size?'
10429,403731011,b'Admin Log Settings on Disk'
10429,403731047,b'Logs Path? '
10429,403731209,b'why do we need margin-top: 5px here?'
10429,403731288,b'oh because none is listed explicitly'
10429,403731296,b'in html file'
10429,403731515,"b""I don't understand purpuose of this parameter"""
10429,403931408,b'done'
10429,403931891,b'See usage in the new test'
10429,403932594,b'=> Admin logs configuration was successfully set'
10429,403933019,b'=> Failed to set admin logs configuration'
10429,403933195,b'removed'
10429,403933373,b'done'
10429,403933845,"b""Sparrow.Size is now being translated to 'number'"""
10429,403934412,b'=> Admin Logs Settings on Disk'
10429,403934774,b'done (Logs Path)'
10429,403974228,b'done'
10429,403974332,b'done'
10429,404068289,"b""well - it wasn't aligned enough to my taste"""
10417,401706322,b'Maybe worth getting it dynamically to the latest nightly?'
10417,402123073,b'I do not like this. We need to discuss how we want to handle compatibility.'
10417,402133014,b'What checks in Smuggler we are doing based on version?'
10417,402133986,b'Create a separate issue for this.'
10417,402137384,b'https://github.com/ravendb/ravendb/pull/10417/files#diff-f1e6d3944a0fbb464ee785bbc0f410d1R34'
10417,402161016,b'https://github.com/ravendb/ravendb/blob/d0513b774ba3ac5735cb8191f80d9f66082b5e75/src/Raven.Server/Smuggler/Documents/DatabaseSmuggler.cs#L662-L672\r\n\r\nI think it would be better to introduce BuildVersionType.GreaterThanCurrent or sth similar'
10417,404600788,b'Also in `SetDocumentFlags`'
10417,404601171,b'Apply all necessary comments from 5.0 here first. Then I will do 4.2 to 5.0 merge and you can do further adjustments.'
10417,404747365,b'internal'
10418,401710732,b'Maybe worth getting the latest dynamically?'
10418,401814171,"b'Probably best to stay on a fixed version, I think'"
10418,404594579,b'internal'
10418,404595137,b'typo: Blob'
10418,404595577,b'typo: Blob'
10418,404596036,b'typo: Blob'
10418,404596118,b'BLOB'
10361,402916812,b'Can we find a better name? What if we will have V5?'
10361,405026417,b'done'
10440,405772915,"b'This should be thread safe, no need for locking'"
10423,403662902,b'Why is this secured?'
10423,403663210,b'Where is this being used?'
10423,403663262,"b""I don't understand the purpose of this? Are we talking about private information? Such as passwords?"""
10423,403668922,"b'It is for the UI, so we will be able to write there that the value is set, but user do not have access to it (e.g. DatabaseAdmin should not see ServerWideOnly values)'"
10423,403669038,"b""It is for the UI, so we can substitute the value with `***********` with 'button' to see the real value"""
10423,403669089,"b""I've secured all 'exec' values"""
10423,403669261,b'Where are you doing the filtering?'
10423,403669276,"b""Why? The arguments, I can understand, but the exec doesn't seems like it should be."""
10423,403669332,"b'```suggestion\r\n        [ConfigurationEntry(""Security.DisableHttpsRedirection"", ConfigurationEntryScope.ServerWideOnly, isSecured: false)]\r\n```'"
10423,403669350,b'Not secret'
10423,403669354,b'Not secret'
10423,403669385,"b'A lot of those values are not secrets.\r\nBasically, just passwords should be hidden\r\n'"
10423,403669663,b'There was no intention to do any filtering. It depends how we will design the UI.'
10423,403669947,"b'Depends on the angle. I prefer to hide it, because it reveals a path.'"
10423,403669951,"b'Let me rephrase, where are you replacing the value with `****` '"
10423,405358745,b'Done'
10423,405358867,b'Done'
10423,405773626,"b'Not a secret, probably'"
10423,405773771,b'Why is that a secret? It convey no additional information'
10423,405773919,b'Not a secret (and we report that to user anyway)'
10423,405773940,b'Not a secret (and we report that to user anyway)'
10440,405980191,b'Done: https://github.com/ravendb/ravendb/commit/b25e4814b1e65b27e456fb44c2f26acaf94bd263'
10366,396073060,b'Add comments for the values you are matching on'
10366,396077653,"b""This isn't going to be able to run from 2.x / 3.x - there is no way for the 2.x / 3.x to authenticate using client certs."""
10366,396079579,b'https://github.com/ravendb/ravendb/pull/10361'
10366,402914915,b'I do not like that this method is handling delete markers inside. Handle them properly outside. Maybe in TryHandleLegacyDocuments() or something similar.'
10366,405015083,b'Done'
10449,407233502,b'can we avoid reordering props in future unless really needed? It creates dust in git blame. '
10449,407233998,"b'you added start time for every operation type, but here we repeat this for every type, which looks weird. Can we put start time to proper location: single line object? Instead of creating start time/ duration/ etc for documents/revisions/counters/time series/etc? '"
10449,407234104,"b'we don\'t use { and around case statements IIRC + use double quotes whenever possible\r\n```\r\ncase ""Documents:\r\n    durationInSeconds = this.op.durationInSecondsDocuments();\r\n    break;\r\n\r\n```\r\netc.'"
10449,407234164,b'I think it should be: `smugglerListItem` '
10449,407234416,b'same here - put that logic to smugger item and call single method  instead of repeating code (the same code) for each item. '
10449,407350047,b'right - done\r\nactually - now refactored...'
10449,407378707,b'It should be `documents/sec` (lowercase)'
10449,407421155,b'As suggested by @ml054 now using:` items/sec`'
10449,407421467,b'ok - simplified logic'
10449,407421813,b'ok - refactored'
10449,407434125,b'I think we can revert naming conventions here as well. We are in operation class so we know it is duration *of operation* etc. '
10449,407434190,b'space after ? '
10449,407435102,"b""what's the purpose of this variable?"""
10449,407436284,b'done'
10449,407436318,b'done'
10449,407464300,b'As discussed - Leaving this for now'
10449,407464675,b'As discussed - static text used in a few places'
10446,406912509,"b""1. This makes that deletions (`_reduceKeyHashesToDelete`) and puts (`_reduceDocuments`) returned by  `CreateCommands()` can be run in mixed order. In previous implementation we processed them sequentially.\r\n\r\nI think this can cause issues in current impl - we need to call `_reduceKeyHashesToDelete` when calling `AddReduce`:\r\n\r\nhttps://github.com/ravendb/ravendb/pull/10446/files#diff-b59632789139fb86226314321cc91743R56-R70\r\n\r\n2. I'm not sure about implications of adding _everything_ immediately to TX merger. This is significant change. I thought we want to run one batch at a time to let other transactions run meanwhile. I wonder if we won't be better off by limiting the number of batches which run concurrently."""
10446,407151362,"b""1) Do we have to run them this way? I would rather have them run in the same tx. The issue is that is is fine is we are going from one valid state to another, but mixing deletes and inserts in such a way may mean that we move from valid state to an invalid state (just deletes, without the corresponding inserts).\r\n\r\n2) Adding a lot of work at once to the tx merger can cause stall for other things, yes.\r\nI would rather add a few, then wait for them to complete, then move on, etc.\r\nWe prioritize users' action over background work in general"""
10446,407151770,"b'The usual way we handle this is by having a single command that we enqueue multiple times.\r\nEach time it runs, we process a batch, and the calling code will check if it is done and if not, resend to the merger.'"
10446,408020063,b'Doing this sequentially now.'
10446,408020839,"b""I'm not sure where this is handled like that? We are creating a lot of sub-commands all over the codebase."""
10446,408052215,b'`ExecuteRateLimitedOperations` work in this manner.'
10456,409304056,"b""Isn't it too small for 64bit?\r\nCan we check what is the average size that we have?"""
10456,409312658,"b'Agreed, and I think we want to make this configurable for the user.'"
10456,409322040,"b""Isn't this a problem when we are running concurrently?\r\nOther threads may add to their view of `_currentGlobalStack` after you called `ClearStack`"""
10456,409322202,b'And why not simply clearing the *current* stack and be done with it?'
10456,409322750,b'Why the change from queue to stack?'
10456,409348868,"b""My thinking is:\r\na) this is Client API, so why it should retain big context at all?\r\nb) this is Client API, so why it should retain high amount of contexts?\r\n\r\nI've checked our api.ravendb.net, most of the context are below 1MB, with few that are up to 4MB of size, with total 4GB of memory kept in context pool."""
10456,409351112,"b""If we have a queue with 4000 items in it already and we are requesting let's say 20 contexts per second (synchronously even - no concurrency). It means that in 1min we will take 1200 different contexts from the pool and refresh their 'last used date', so the cleaner will not trigger, but by using stack, we will use only 1 context from the stack, so others can be safely removed by the cleaner."""
10456,409356052,"b""The idea here is that I still want to retain (maybe unnecessary?) contexts from the global stack that are not outdated. I'm doing that by creating new stack, but when allocating I'm taking values first from the 'old stack', then releasing them to the 'current stack'. I'm doing that, because I'm not removing anything from the stack during the cleanup (regular one - not the one that happens every 15min), only disposing contexts there.\r\n\r\nThe other option would be just to release everything as you wrote. It is easier, but not sure if we want that?"""
10456,409439970,b'Why switch from queue to stack?'
10456,409440370,"b'Here you may be pushing to the previous instance, no?'"
10456,409440888,b'Why are you doing this switch?'
10456,409441410,"b'This is also used internally for things like ETL, where we might have larger values.\r\nShould we customize the conventions there?'"
10456,409441898,"b'The easiest thing to do would be to keep the queue structure, and scan the whole queue.\r\nIf there are old stuff there, just mark it in use and dispose it.\r\nThe null pull from the queue will clear it up, no?'"
10456,409442752,"b""IIRC, there was a reasoning behind this.\r\nThe idea is that we aren't going to end up with so many items in the global pool, because that is quite strange to have.\r\nAnd when you pull from the global pool it goes to the per core one, no?\r\nThat would avoid this issue.\r\n\r\nThe auto cleanup of old instance really helps here. """
10450,407451324,b'I wonder if we should convey implementation detail on what we assert ;-) it is impl details for me '
10450,407451767,b'I wonder if we should also take into account the lap years? '
10450,407451998,"b'or actually we do, as years contains values around 2k, not 1-2 right? We add to current date? '"
10450,407454846,"b""Months and days are isolated in this solution, you can't convert from days to months and via versa.\r\n\r\nSo we don't care about lap years here, any year in the gregorian calendar has 12 months.\r\nUnlike the hebrew calendar that sometimes has 13 months :-)"""
10450,407467240,b'oh that make sense - thanks ;-)'
10450,408056623,"b'No, this is fine'"
10450,408056846,"b""This is now wrong, no?\r\n`TimeSeriesDownSamplePolicyComparer` isn't taking into account the `Months`"""
10450,408057947,b'LOL'
10450,408058489,"b""Need to explain *why* we can't compare"""
10450,408058648,b'Why is this a ref?'
10450,408058778,"b""Why are you passing by ref? `current` and `other` aren't changed"""
10450,409293655,"b""It is a `struct`, but I guess he isn't big enough to benefit from passing it like this.   """
10450,409299014,"b'We use the upper and lower bound of number of seconds in a month, so we compare it if we can, otherwise an exception is thrown.'"
10450,409312036,"b'Yes, it is same size as the pointer, no need to do this'"
10456,409461692,b'Increased to 8/2 MB (64/32 bit respectively) for server'
10439,404996085,"b""This isn't needed.\r\nThere will be only one upload of an attachment, like a document"""
10439,404997207,"b""You don't need IDisposable here. And there should be only one instance of it (like with counters)."""
10439,404999536,b'The length of the RavenData is more than enough here'
10439,405001453,b'Can this be inside the command?'
10439,405817426,"b""Don't we need to handle time series here too?"""
10439,405817694,b'\r\n```suggestion\r\n                        await stream.CopyToAsync(_operation._currentWriter.BaseStream);\r\n```'
10439,405817816,b'Async methods should have cancellation tokens'
10439,405817893,b'make sure to pass cancellation token.'
10439,405818140,b'What is the size is 10GB?'
10439,405818637,"b""We can't handle this. We need to write it to a temporary file, like we do with normal attachment load.\r\nWe can avoid that if we are using small files, but otherwise, need a stream"""
10439,405819358,"b""I don't want to have this at all. We need to have a stream based API"""
10439,408186129,b'private'
10439,408187958,"b""If we are not wrapping inside the structure like in Smuggler, then call this just 'ContentLength'. It will match other property 'ContentType' nicely."""
10439,408190024,b'The biggest buffer size that I found is 16 * 1024 in our code.'
10439,408192605,b'Is this used?'
10439,408192725,b'rename to ContentLength'
10439,408193374,b'GetBlob'
10439,408195304,"b""use await. 'WriteAttachment' method can be async"""
10439,408195432,b'FlushAsync'
10439,409476707,b'removed'
10457,409537929,"b""It is not '5'. It is 'Current'. E.g. what will happen if we will move to v6? Same for other names."""
10458,409750031,b'put { } around if'
10462,410160236,b'Copied this from documents operation context.'
10462,410161043,b'Each context in a pool can keep `_maxNumberOfAllocatedStringValues * sizeof(LazyStringValue)` where `sizeof(LazyStringValue)` is 80 bytes => 2.6MB'
10462,410161335,"b'Resseting not only allows to return the memory, but also to clear other fields, e.g. materialized string value'"
10462,410162311,b'Setting only 1024 in Client API. It is max 80kb per context kept in the pool.'
10435,407153330,"b""Aren't they going to be cleaned up automatically when we read them, see they are not relevant and removed it?"""
10435,407153482,"b""Why? Shouldn't we still generate a change vector for the deletion?"""
10435,407159095,"b'right, done.'"
10435,407159132,"b'Since the optimization was removed, so it that comment.'"
10461,411920453,b'convert to property'
10461,411924386,b'Raven.Client.Documents.Operations.OngoingTasks'
10461,411924547,b'DeleteServerWideOngoingTaskOperation '
10461,411924941,b'This breaks the backward compatibility'
10461,411925025,b'This breaks the backward compatibility'
10461,411926575,b'.Replication?'
10461,411932519,b'.Replication?'
10461,411932879,b'ServerWideOngoingTaskResponse '
10461,411933356,b'Move to separate file'
10461,411933693,b'.Replication?'
10461,411935793,b'.OngoingTasks'
10461,411935913,b'ToggleServerWideOngoingTaskStateOperation '
10461,411937878,b'static'
10461,411947153,b'You can remove that ctor I think?'
10461,411947476,b'DeleteServerWideOngoingTaskCommand '
10461,411950252,b'BadRequestException'
10461,411951344,b'What is this? We have dedicated Handlers for Studio items.'
10461,411951632,b'BadRequestException'
10461,411952250,b'ServerWideOngoingTasksResult'
10461,411952418,b'ServerWideOngoingTaskConfigurations '
10461,411956458,"b""Is this needed when 'topologyDiscoveryUrls' are passed externally?"""
10461,411957249,"b'The regular external replication handles that via ConnectionStringName, do you think we can do something similar?'"
10477,412996872,b'Were you able to get this to happen?'
10477,412997678,"b""Look at lines 216 here, we are doing explicit checks on the temp buffer, so this shouldn't be the case.\r\nHow can you get this error?"""
10477,413013056,"b'Yes, you can run the test.'"
10477,413015028,"b""This check is too late... either the assert kills me or an `ArgumentException`/`IndexOutOfRangeException` when I'm trying to add to the `tempBitBuffer` when there is not space left."""
10477,413090619,b'```suggestion\r\n                1 // take into account the status bit\r\n```'
10475,412345633,b'Why not `append.Tag.Length`?'
10475,412349074,"b'I still think we can do better by letting the server decide on the batch size (and not the client like here).\r\nSo, should we keep it as a const so we can easily remove it if needed, or pass it as a parameter?\r\n'"
10475,412356388,"b'This value is a `double` which in German culture is `3,14` instead of `3.14`.\r\nI _think_ it might be a problem and a test for it would be nice :-)'"
10475,412385195,b'done'
10475,412385377,b'done'
10475,412434743,"b""Let's do that as a parameter, yes."""
10475,412435034,b'We *must* write the values using culture insensitive manner'
10475,413149792,b'Do we need to do https://github.com/ravendb/ravendb/blob/7750eec880a0f5b185d11fce76ff74e1d3530fa5/src/Sparrow/Json/BlittableWriter.cs#L101 ?'
10475,413151719,b'done'
10475,413179399,b'I think that `EnsureDecimalPlace` is wrong?\r\ntake a look at this: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings#GFormatString\r\n'
10475,413304875,"b'We switched from G17 to R, because R is a round-trip format'"
10475,413513657,"b'Not according to the docs, https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings#RFormatString:\r\n> For Double values, the ""R"" format specifier in some cases fails to successfully round-trip the original value'"
10475,413547900,"b'Please open an issue and assign it to yourself. In the meanwhile, I think that we need to use exactly the same technique there.'"
10475,413590830,b'done'
10475,413596387,b'okay.. https://issues.hibernatingrhinos.com/issue/RavenDB-14902'
10474,412235490,b'rename to `DefaultConnectionLimit`'
10474,412235683,b'why `httpMessageHandler.SupportsAutomaticDecompression == false` was removed?'
10474,412239304,"b'Because the `else` handle it already, no? Or I miss here something...'"
10474,412255906,"b""Yes, you are correct. Didn't notice. My fault."""
10474,412419988,"b'Can we make this public static value, so users have access to it?'"
10461,413754428,b'done'
10461,413754621,b'done'
10461,413755045,b'I left the endpoint for backward compatibility'
10461,413755179,b'Same here'
10461,413755738,b'done'
10461,413756430,b'done'
10461,413756842,b'done'
10461,413757194,b'done'
10461,413757403,b'done'
10461,413758535,b'done'
10461,413759208,"b""It's getting all of the server-wide tasks"""
10461,413759272,b'done'
10461,413759581,b'We generate a connection string for the external replication'
10482,413797687,b'Why do we need that?'
10482,413908905,"b' Lucene is wrapping the exception with a SystemException except of IOException, SystemException and ApplicationException\r\n\r\nhttps://github.com/ravendb/lucenenet/blob/3.0.3-netcore/src/Lucene.Net/Index/IndexWriter.cs#L4636'"
10482,413911180,"b""Can you please add a comment here explaining what is the reason? Otherwise it's easy to forget about it"""
10482,413912538,"b""Nevermind, we'll have it in github\r\n"""
10488,415256716,"b""Do we have to do it like this?\r\nCan't we just use a local variable for storing the complete option (and if finding another one, switching if we have a better ranking)?"""
10488,415264844,"b""Actually this isn't even close to main cost there. I think I can optimize it even further.\r\n\r\nBTW. Here are the results:\r\n![image](https://user-images.githubusercontent.com/446555/80303532-1df86280-87b1-11ea-959d-ae08ee19b981.png)\r\n"""
10488,415265623,b'The main cost is here:\r\n\r\n![image](https://user-images.githubusercontent.com/446555/80303618-a1b24f00-87b1-11ea-8e3d-962637609572.png)\r\n\r\nWe are getting stats to check if index is invalid.\r\n\r\n1. We probably do not need to take whole stats\r\n2. GetMemoryStats is taking 77% of the time from which 58% are taken by GetDirectoryName!'
10488,415268827,"b'Still need to check where we actually want to retrieve that Memory stats, but:\r\n\r\n![image](https://user-images.githubusercontent.com/446555/80304021-eb9c3480-87b3-11ea-88ed-3b2ae5936010.png)\r\n\r\nWe are down from 49300ms to 10500ms now.'"
10488,415273432,"b'I have another way to do that, and I think it reduces a lot of the collection code'"
10479,413132423,b'internal'
10479,413139945,b'I do not think that we want that? All other operations are by Name?'
10479,413141322,b'I do not think we want this.'
10479,413141460,b'Can this return null?'
10479,413143018,b'What I think would be nice is to have the ability to create new subscription when it does not exist. Thoughts?'
10479,413625404,"b'I added it because of those reasons\r\n- support updating subscription name\r\n- it is supported to create subscription by id:\r\nhttps://github.com/ravendb/ravendb/blob/7750eec880a0f5b185d11fce76ff74e1d3530fa5/src/Raven.Client/Documents/Commands/CreateSubscriptionCommand.cs#L20\r\n\r\nPlease also note, to update the subscription, we anyway have to have the id in the handler:\r\nhttps://github.com/ravendb/ravendb/pull/10479/files#diff-85b7d24872d0ec9670afa7225e9686d1R398'"
10479,413625995,b'please see the comment above \r\nhttps://github.com/ravendb/ravendb/pull/10479#discussion_r413139945'
10479,413632432,"b""I am not sure we want to mix it. \r\nNow the user can catch SubscriptionDoesNotExistException and send a Create command if he want a update/create\r\n\r\nIf we make it update/create by default then we will lack the only update scenario, ie when I want to just update existing subscription, it will create me a new one in case it doesn't exist, which seems odd."""
10479,413660000,"b'no, it will throw SubscriptionDoesNotExistException if ther eis no such subscription \r\nhttps://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/Documents/Subscriptions/SubscriptionStorage.cs#L346'"
10479,413672056,"b""I'm thinking more about the usability, like we do have with indexes. I'm just doing .Execute and do not worry if the index is there or not.\r\n\r\nDo we have .Exists method at least?"""
10479,413673775,b'introduce `SubscriptionUpdateOptions` that inherit from `SubscriptionCreationOptions`. It will allow us to extend them in the future if needed. Maybe they will not be 1 to 1 with creation ones.'
10479,413674808,b'We can move then the Id to the options and maybe do some validation client side.'
10479,413679097,b'Note that updating the subscription is something that you should do with some thinking about the current change vector.\r\nAre you resetting it or preserving it?'
10479,413679201,b'there is no exists method.'
10479,413680296,b'I think we can add Overwrite option to SubscriptionUpdateOptions ?'
10479,413681954,"b'> Note that updating the subscription is something that you should do with some thinking about the current change vector.\r\n> Are you resetting it or preserving it?\r\n\r\nIt obey the value of `SubscriptionCreationOptions.ChangeVector`, see test:\r\nhttps://github.com/ravendb/ravendb/pull/10479/files#diff-2a118f7ce3e7b0101c6c2c0894fefaeaR433'"
10479,413698614,"b'Yes, we can add Overwrite property there.\r\n\r\n'"
10479,415388802,b'CreateSubscriptionResult -> UpdateSubscriptionResult'
10479,415628589,b'CreateSubscriptionResult just have a subscription name\r\nhttps://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Client/Documents/Subscriptions/CreateSubscriptionResult.cs#L5'
10479,415636220,"b'Just inherit from it, that is all.'"
10505,419063255,"b'Shouldn\'t it be `""names""`?'"
10505,419070762,"b'No, because you usually specify just a single one, and add it multiple times'"
10491,415333609,b'@ppekrol Backward compact issue here?'
10491,415333748,b'I think it would be better to *not* inherit here.'
10491,415333915,b'What are all these `else {} ` ?'
10491,415333945,b'Under what scenario can this happen?'
10491,415334038,"b'Also need to take into account:\r\n* Conflicts, Revisions and Tombstones.'"
10491,415334105,"b'```suggestion\r\n        public CollectionDetails GetCollectionDetails(DocumentsOperationContext context, string collection)\r\n```'"
10491,415334484,"b'Switch these lines and make `FillCollectionStats` expect an open tx, would save two tx here.'"
10491,415385898,"b""Yes, should be 'int'. We can change that in 5.0 only."""
10491,415387820,"b""In this case, since we already moved that to other class and endpoint, maybe lets not inherit and substitute 'Collections' from 'CollectionStatistics' with `Dictionary<string, CollectionDetails>` and put there the etag as well."""
10491,415950251,"b'Sorry, I didn\'t quite understand. I will remove the inheritance, but what do you mean by ""substitute \'Collections\' from \'CollectionStatistics\' with Dictionary<string, CollectionDetails> and put there the etag as well""?\r\n\r\nDid you mean I should remove the \'Collection\' property from the \'DetailedCollectionStatistics\' class, because the \'CollectionDetails\' class also contains the number of documents?'"
10491,415995098,"b'Isn\'t the DocSchema in this context always ""Documents""? How can I take your mentioned types into account? Could you give me an advice, please?'"
10491,416347796,"b'Yes, `DocsSchema` is for documents. \r\nBut a collection is also composed of other items, listed above. \r\nEach one of them has its own schema. See `RevisionStorage` for example.\r\n\r\n`Revisions`, in particular, may be a significant portion of a collection size'"
10491,416348104,"b""If we drop the inheritance between these classes, then we don't need `ExtendedCollectionDetails`, we can call the property `Collections`. That would make things simpler. """
10491,416815102,"b'Thanks for the advice.\r\nConflicts seems to be complicated, because they are not directly associated with a collection.\r\nThere is no CollectionTableType for conflicts. I tried to use the values of ConflictsStorage.ConflictsSchema and ConflictsStorage.ConflictsSlice to get the table + report, but the result is not referred to a collection. Or am I wrong in that?\r\n\r\n'"
10491,417146737,"b""Yes, you're right. Conflicts don't have per collection table. Only the following ones:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/5ee2e9602d646c4f3e50633854b3eb1bbf6fb2cd/src/Raven.Server/Documents/CollectionName.cs#L64-L70\r\n\r\n`CollectionTableType.Counters` is legacy value, currently we use `CounterGroups`"""
10491,419073062,"b""Shouldn't you use `long` here?"""
10507,419108740,b'I think those casting will box.. is it possible to get rid of the `object` and use `long` or `double` instead?'
10507,419110511,b'we use those aggragated values in `AddTimeSeriesResult` :  https://github.com/ravendb/ravendb/blob/v5.0/src/Raven.Server/Documents/Queries/Results/TimeSeriesRetriever.cs#L828 \r\nwe turn them into `DynamicJsonArray`..  and `DynamicJsonArray`  only works with objects'
10501,419072844,b'We are now losing the inner stack here.\r\nMaybe throw that in a *good* exception?'
10501,419072854,b'Same'
10501,419106130,b'Do we need the inner stack? (this exception is wrapped)\r\nhttps://github.com/ravendb/lucenenet/blob/3.0.3-netcore/src/Lucene.Net/Index/IndexWriter.cs#L4644'
10501,419106357,b'We never want to lose the stack'
10501,419111506,b'done'
10499,419125251,b'Move this to ConfigurationHandler and normalize the url'
10499,419125846,"b'Please ignore, I see that this is consistent with Revisions.'"
10502,419133125,b'Do we need to encode the token?'
10476,413558242,b'We can pass the context from the outside. Now we have double context allocation.'
10476,413561001,b'OridinalIgnoreCase'
10476,413561720,b'It is hard to trace failing debug asserts when there is no message.'
10476,413593563,b'We only need only when `CalculateMemoryInfo` returns that we are in low memory.\r\nThey need to be bound together.'
10476,413702492,b'fixed'
10476,413702539,b'fixed'
10476,413702678,"b""We are actually checking a bit earlier that this can't happen."""
10476,413703314,"b'This is for system metrics, for notifications.'"
10476,413704189,"b'This is used in `ServerTotalMemory`, not easy to make it rely on the MemoryInfo without more changes.'"
10476,413707510,"b'Spoke with @grisha-kotler. He said that it should be 5 second, because this is how often we check for that value in the LowMemoryNotification thread. This was probably called more often because Studio was opened and we are requesting this value when we are in low memory.'"
10476,413950641,b'Have you pushed this?'
10476,413951055,"b""Let's change this to 5 seconds"""
10476,414415656,"b""This isn't something that we operate on, however. This is used purely for reporting purposes.\r\nI couldn't find any use of that that we actually act on."""
10476,414438556,"b""This is used to determine if we are in low memory (only when the non extended version returned that we are).\r\nIt's used in the low memory notification thread."""
10476,414442888,"b'@grisha-kotler you are incorrect I think, the low memory handler is accessing that directly, not via cacher'"
10476,415367063,"b""We shouldn't change this. It was not added without a reason. Probably we are substituting one issue with another."""
10476,415367146,b'Do we have an issue for this?'
10476,415367575,b'Better to implement this in Index and use IndexStorage.ReadStats witch is fairly cheap.'
10476,415367876,b'Should we avoid LINQ here?'
10476,415368045,b'Ping'
10476,416415623,"b'I want to avoid the indirection here, and I checked, we preserve the same behavior'"
10476,416415663,b'yes'
10476,416416089,b'This is only ever called from tests.'
10476,416457696,"b'No, you are now calculating staleness everytime instead of doing it at later stage of that function.'"
10476,416467859,"b""It doesn't actually matter, this is only called on index error. \r\nI don't think we need to worry about perf here.\r\n\r\nWhich means that the indirection argument is also invalid.\r\n\r\nNeed to consider which option is clearer to maintain.\r\n\r\nThis way, we don't need to worry about the state of the func that we pass, which we previous dealt with.\r\n"""
10502,419343930,b'It is already escaped (using the Azure Portal and the Blob API)'
10503,419136561,b'We should move this to `ravendb` '
10503,419136684,b'Should be removed?'
10503,419239610,"b'Yes, I think we might want to get that file to 4.2 branch as well right?'"
10510,419379651,"b""Shouldn't we use `oldDocument.Equals(newDocument)` ?"""
10511,419392577,b'Why bother with this?'
10511,419393208,b'Can we apply this only to ARM?'
10511,419394321,b'Right.. will remove those'
10511,419396308,"b'Better yet, can we ensure that we are accessing this aligned? That would be better in general'"
10511,419398612,"b""I'll run a quick benchmark to see if this entails any performance penalty.. """
10504,419127208,"b""Just to be sure, this shouldn't be `new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).Ticks` ?"""
10504,419127379,b'Hmm... I would prefer to convert this value to enum and if it exists parse it. If it cannot be parsed then we should throw.'
10504,419127436,b'UnixTimeInMs?'
10504,419127482,b'UnixTimeInNs?'
10504,419127550,b'This cannot be LazyNumberValue?'
10504,419139143,b'LazyNumberValue has an implicit cast to `long`'
10504,419139246,"b""Let's be on the safe side, done."""
10504,419139254,b'done'
10504,419227975,"b""But that won't trigger here. That is something that the _compiler_ inserts, not runtime."""
10504,419426924,b'Will this box? should we `Inline` this?'
10504,419437253,"b""No, this shouldn't cause boxing. Why do you expect it to?"""
10510,419449790,"b""If the document size is different, I assume that the contents are different.\r\nSince we build this document, I expect it to be with the same structure if it hasn't changed."""
10511,419463764,b'Same results.'
10494,416359750,"b'I think you need this:\r\n\r\n```suggestion\r\n            return Convert.ToBase64String(buffer.Memory.Span.Slice(0, (int)size));\r\n```'"
10494,416360937,"b""Why not use the usual context & buffer here?\r\nI don't really like replacing `LongLivedInstance` with `ShortTermSingleUse`"""
10494,416361550,"b""This usage is the reason why I don't think that you _can_ remove the `Used` / `Valid` behavior\r\nWe can try to use `Slice`, but we'll need access to the original buffer when we need to refill it anyway"""
10494,416369599,b'Why do we need this? We want to use this only for unmanaged memory'
10494,416371095,"b""I don't understand why we have this limitation?"""
10494,416410506,"b'Yes, pushed already, but thanks :)'"
10494,416410844,b'Will rename and try to pass something here externally.'
10494,416411361,"b'Yeah, I was researching if we can remove this, but I do not think it feasible.'"
10494,416411535,"b'We have 1 usage, will try to get rid of this.'"
10494,416413107,b'Previosuly we had small buffers (32kb and large ones 128kb). Can be removed now.'
10237,407380563,"b""We'll add the compression to all the licenses.\r\nYou also need to update `LicenseValidator`"""
10237,407483036,b'done'
10237,407961807,b'Given that we have an option to control compression of documents per collection then why not to let user control revisions per specific collection as well (with the global option for all revisions of course)? '
10237,407962523,"b""The order of elements shouldn't matter I think"""
10237,407963510,"b'Why do we default to ""encryption""?'"
10237,407966375,b'This sets `Compressed` to `true` for _any_ revision table - regardless `public bool CompressRevisions;` configuration option'
10237,408002566,b'Given that the schema is different - do we need to prevent from changing the configuration once the compression was turned on for a given collection?'
10237,408003586,b'Why commented?'
10237,408052950,b'What is the official name for this? Compression or Document Compression?\r\n\r\ncc @Danielle9897 '
10237,408054002,"b""Let's stick either to Compression (too generic?) or Document Compression.\r\n\r\nIf we will go with 'DocumentCompression' then let's change this to `newLicenseStatus.HasDocumentCompression`"""
10237,408054360,"b'""documentCompression"" ?'"
10237,408054421,"b'""documentCompression"" ?'"
10237,408056706,b'I think this feature deserves dedicated configuration section. CompressionConfiguration with `Compression.ABC` keys.'
10237,408057923,b'Will this be `null`? It is initialized in `DatabaseRecord` by default.'
10237,408068198,b'Do we have a issue for this?'
10237,408069402,b'We need to apply https://github.com/ravendb/ravendb/pull/9300'
10237,408069574,b'Remove?'
10237,408070099,b'Why this is needed?'
10237,408070431,"b""Aren't we setting this value in ctor by default to true?"""
10237,408072939,b'Compression vs Document Compression'
10237,408075105,"b'Maybe we should go with Compression name, similar to Revisions?'"
10237,408088162,b'TODO. Do we have an issue for this?'
10237,408112828,b'Can this be null?'
10237,408135001,b'Why is it commented?'
10237,408135821,b'Something that came to my mind. We need to check if moving between 32 and 64 bits work.'
10237,408136847,b'CompressionDictionariesSlice'
10237,408137057,b'CurrentCompressionDictionaryIdSlice?'
10237,408145472,b'Should we use ArrayPool here?'
10237,408149183,b'Why are we taking those files now?'
10237,408151727,b'Why it was removed?'
10237,408332259,"b'The default for revisions is that they are all included, because they are rarely touched.\r\nCan you think of a reason why to have this for only specific collections?'"
10237,408332870,"b'There are a lot of licenses here without this flag, so we alias the encryption to allow this as well.\r\nIf the compression is set, it takes precedence.  So you can have a compression false, but with encryption'"
10237,408333231,b'What do you mean? The on disk schema is identical on both ends.'
10237,408333372,"b""I don't have access to a mac to build and test it yet"""
10237,408333442,b'Should restore it'
10237,408333572,b'I think we want to call it document compression'
10237,408334116,"b""Existing database records don't have this."""
10237,408334411,b'https://issues.hibernatingrhinos.com/issue/RavenDB-14840'
10237,408334709,"b'I think we want to keep it.\r\nWe need it enabled only in rare cases, but it hurts usability on debugging'"
10237,408334943,b'I want to be able to create sample database without creating indexes.\r\nUseful for tests where we test compression only'
10237,408335109,"b'When reading from old records, it it still null'"
10237,408335284,"b'No, we need to remove it. This is handled by wiping the allocator memory'"
10237,408336253,"b'No, this must return a value.'"
10237,408336590,"b""It *shouldn't* matter, but we are taking more memory in this case, I think"""
10237,408336880,b'So recovery of database snapshot could work'
10237,408336955,b'Gave wrong results'
10237,408594908,"b'Actually I was rather thinking about excluding some revisions from compression. For example a user might have heavy subscription on revisions from a particular collection, so faster access time and lower CPU usage can be preferred in that case.'"
10237,408595992,"b""```suggestion\r\n            DocsSchema.CompressValues(DocsSchema.FixedSizeIndexes[CollectionEtagsSlice], compress: false);\r\n```\r\n\r\nMinor but shouldn't be this way?"""
10237,408596921,"b'Okay, I see. Anyway, it is valid to turn off compression if it was already enabled?'"
10237,408602342,"b""Where do we use it? (I can't find any usage on github)"""
10237,408607545,"b""Can we add more details here?\r\n- transaction id\r\n- dictionary id\r\n- can we include the entire dictionary? would it make sense?\r\n\r\nI'm trying to collect as much details as possible in case we'll need that for troubleshooting """
10237,408621689,"b""It's meant to be called only for non-compressed data, right?"""
10237,408627678,"b""This means that for long running transactions we might have a lot of cached values even if we don't need them anymore. Maybe we should introduce LRU cache and clear old values if the cache grows too much?"""
10237,408632412,"b""Shouldn't the dispose be in inside `finally`?"""
10237,408633381,"b""Shouldn't be inside `finally` or just wrap by `using`?"""
10237,408635139,b'Can we add more details here? Basically all parameters that we pass to `TryWriteDirect`:\r\n- id\r\n- size\r\n- compressed'
10237,408639097,b'This look _very_ familiar to the issue we had with `NewPageAllocator` and we ended up with persisting the actual allocation size - see here:\r\n\r\nhttps://github.com/ravendb/ravendb/pull/9610'
10237,408639576,b'Wrapped by `{ }` ? '
10237,408650279,b'Do/should we return memory allocated here of `TryCompression` returns `false`?'
10237,408662137,b'Can we create const for `0x80`?'
10237,408662775,"b""Let's add comment explaining `>>= 7` ?"""
10237,408666837,b'What is the reasoning that we iterate from the last element?'
10237,408668712,"b""This is very crucial piece of code - I'd prefer to see explicitly the scopes of `usings` in this method. It's easier to read it IMO. """
10237,408672001,b'Debug.Assert ?'
10237,408673642,"b""Don't we need to call `fs.Flush(flushToDisk: true);` at the end?"""
10237,408674902,"b""Maybe let's add some logging or just console write line in DEBUG when the finalizer is called"""
10237,409323339,"b""I think this is a rather niche scenario, and even so, we aren't likely to spend too much time of this. Subscriptions are no time sensitive, I think. \r\nThe issue I have is that we would need `CompressRevisions` and `ExcludeRevisionCompression` and that seems like very rare scenario to need it."""
10237,409460653,b'Yes'
10237,409461805,b'dead code'
10237,409462103,"b'Yes, this is called, and then the is compressed is set.'"
10237,409462558,"b""We can't, someone may be looking at this value.\r\nWe are accounting for that in the tx sizes."""
10237,409463116,"b""The actual dictionary is 8KB in size, and is binary.\r\nDoesn't make sense.\r\n\r\nIt is there is we messed up the numbers, mostly."""
10237,409463441,"b'I want to avoid either options for perf costs. \r\nIf we leak, this will be disposed by the tx closing anyway'"
10237,409464489,"b""Same, this is perf sensitive, and I want to avoid the try/finally costs.\r\nIt isn't an issue if we leak, because the tx will dispose the values anway"""
10237,409466027,"b'The number of pages is persisted, see inside the ActiveRawDataSection'"
10237,409466218,"b""Note that this part is just moved code, I didn't change functionality from prev behavior"""
10237,409467426,"b'No, this is going to be cleanup anyway shortly when the operation is done.'"
10237,409467860,"b'No, this is actually clearer when you see the constant.\r\nBecause it follows the structure of varint.'"
10237,409468013,"b'That is explained elsewhere in the code, this is the same varint we use everywhere'"
10237,409469071,"b'We want to get the most recently update values, we assume that those are the most similar to the currently inserted dta.'"
10237,409470721,"b""I intentionally didn't do that. \r\nWe have two separate files here, and I want to avoid flushing the entire fs cache\r\nThat can kill our perf"""
10237,409499177,"b""I'm fine with that"""
10237,409499916,"b'Okay, but transaction id and dictionary id might be helpful when investigating some corruption issues'"
10237,409504595,b'Can we have the concept of tracking the actual usage and count it?'
10237,409505162,b'OK. Worth to comments that this is intentional because of performance'
10237,409509244,"b'1. But if non of the files is flushed then how can we be guaranteed that at least one have everything synced? \r\n2. This is called once per write transaction, right?'"
10237,411928317,b'This is called per value saved.'
10237,411928835,"b""Yes, sorry, once per write tx that created new dictionary\r\nAnd we don't flush because:\r\n* We have the data saved in the data file\r\n* We re-create it on new dictionarys\r\n"""
10237,412000007,b'Compression => DocumentCompression '
10237,412005385,b'DocumentCompressionConfiguration'
10237,412027401,b'documentCompression'
10237,412027461,b'documentCompression'
10237,412029188,"b""Wouldn't it be better to move this to DocumentCompressionConfiguration?"""
10237,412035314,b'Can you rebase? It should be fixed now.'
10237,412035389,b'This can be removed.'
10237,412035885,b'Do we want to expose this in the UI?'
10237,412047104,"b""Shouldn't we use SliceComparer here?"""
10237,412070129,"b""Can we move `.Recovery` to some const and use it here and in the Recovery.cs ? Maybe also consider changing the extension to `.compression-recovery`? It is easier to recognize the files via extension than the name. Some day we might add more 'recovery' files."""
10237,416487455,"b""I don't think so, it is very rarely going to be useful for users."""
10237,416488130,b'Done'
10237,416488737,b'done'
10237,416489334,"b'Yes, this is something that we have to do. \r\nhttps://issues.hibernatingrhinos.com/issue/RavenDB-14870'"
10237,416490164,b'Done'
10237,416490264,b'Done'
10237,416490446,b'Why singular here?'
10237,416490838,"b""We have just a single value, and it is already possible to change the code structure without the user seeing it. I don't think so."""
10237,416490944,b'done'
10237,416493400,b'Removed it entirely.'
10237,416500508,b'done'
10237,416634903,"b'""documents compression""'"
10237,416635053,b'documents compression'
10517,419969550,b'```suggestion\r\n            if (date.Kind != DateTimeKind.Local)\r\n```'
10517,419973214,"b""We do not want to touch 'Unspecified' also.\r\n\r\nShould this be\r\n```\r\nif (date.Kind == DateTimeKind.Local)\r\n    return date.ToUniversalTime();\r\n\r\nreturn date;\r\n```\r\n?"""
10517,420610374,b'why the swich to `DateTime.TryParse` ? \r\n`LazyStringParser.TryParseDateTime` should be much more efficient'
10517,420617483,"b""I don't think we care about efficiency here. \r\nAnd this should allow us to parse various formats like `DateTimeOffset` or simple date like `2020-04-04`"""
10517,420618876,b'We need to have a closed list of formats that we support here.\r\n'
10517,420625328,"b""Why not to support everything we can? \r\nAlso let's decide on that list here: https://issues.hibernatingrhinos.com/issue/RavenDB-14930"""
10517,420636525,"b'Right now, you are support local dates.\r\n`Mar 1, 2019` works, for example.\r\nAs does this, if you have the right locale settings.\r\n\r\nDateTime.Parse(""\xd7\x94 \xd7\x90\xd7\x99\xd7\x99\xd7\xa8 \xd7\xaa\xd7\xa9\\""\xd7\xa2"")\r\n\r\nI\'m not happy with either option actually working.\r\n'"
10517,420638667,"b""Actually that cool! :)\r\nBut I see why you don't like it.."""
10517,420641533,"b'That is cool, but it depends on too many things.\r\nIf the user is running on local machine, it may work, but not on server, etc.\r\n\r\nHaving a close and well defined list is best'"
10517,420642077,"b'The worst case, BTW, is this: `1/10/2010` \r\nThis can be either Oct 1 or Jan 10. And `1/10/12` can also be: `0001, Oct 12` in Japan.\r\nFun'"
10522,420544106,"b'Just to make sure, the `default` here is `null`s, right?\r\nSince having `0` is not what we want.'"
10522,420546359,b'Can we have more tests for that? With empty segments and some deleted values?\r\nAnd bit more complicated query will be nice :)\r\nMaybe something like that:\r\n```\r\nfrom segment in ts\r\nwhere segment.Min[0] > 10\r\nselect new {\r\n     segment.Entries.Where(e => e.Values[0] > 10)\r\n}\r\n```'
10522,420641750,b'We do not iterate over empty segments and deleted values. We had other tests for checking that IIRC.\r\n\r\n'
10522,420642060,"b'This returns default(TimeSeriesSegmentSummary) which have:\r\nCount = 0,\r\nMax = null,\r\nMin = null,\r\nSum = null'"
10517,420651508,b'@karmeli87 will handle this in a separate PR.'
10490,415331960,b'```suggestion\r\n        public bool Rollups;\r\n```'
10490,415332119,b'Add comment here specifying that the order matters.\r\nAnd user explicit values.'
10490,415332350,b'You can replace all of these with a single command before the swtich\r\n```suggestion\r\n                        val = values[index + (int)Aggregation];\r\n```'
10490,415332401,b'Can move all of these before the switch'
10490,415332613,b'Can this cause divide by zero?'
10490,415332959,b'We give no indication that we switch to the rolled up?'
10490,415391438,b'Can we decouple this from the `retriever`? and pass `collection` and `context` instead?'
10490,415642558,b'done'
10490,415642888,"b'no, we give no indication of that'"
10490,415643893,b'done'
10490,415644134,b'removed this'
10490,415645244,"b""I don't think so.. but I added a check for this, just to be safe"""
10490,416355208,b'Make the change to use `val` for the `_count` below as well'
10490,416562636,b'It means that we cannot use that char in TS name. The `_` is more popular than `@` I think?'
10490,416567826,b'Where is this actually used?'
10490,416659026,b'done'
10490,416684309,"b""reverted it back to '@'\r\n\r\n(The reason for the change was because we originally thought that the user will pass the roll-up names in query, and this '@' caused QueryScanner to not recognize these names as 'FieldExpression'.. We decided to go a different way so this doesn't matter anymore..)"""
10526,420685960,b'Can this throw if the value does not exists?'
10526,420686390,"b""This will throw an exception if the file doesn't exist"""
10526,420687064,"b'nevermind, this will throw for a directory'"
10521,420346360,b'We need to make sure this in UTC.\r\n(We can do that after https://github.com/ravendb/ravendb/pull/10517 is merged)'
10521,420346780,b'Same'
10521,420352395,b'Do we need to clear the cache as well?'
10521,420612546,b'what do you mean? this is the time series cache'
10521,420623701,"b'Right, somehow I thought there a different entity for TS caching.'"
10521,420653627,b'Can this be empty?'
10521,420653782,b'we need to escape this'
10521,420654005,b'We need to escape this'
10521,420657204,b'convert to properties. It is easier to inherit and override if necessary in the future.'
10521,421486161,b'we throw an exception if this is empty'
10521,421486219,b'done'
10521,421486271,b'done'
10521,421486366,b'done'
10521,421486510,b'done'
10533,421060183,b'Can we move this to DatabaseSmuggler? We modify documents there based on version type.'
10528,421343137,"b'The one thing I wonder is if we should reverse the order. \r\nI think it tries them in order, so we want the most common ones first.'"
10528,421350131,b'So I guess the most common case will be `yyyy-MM-ddTHH:mm:ss` ?\r\n'
10528,421352709,"b'The .NET one (full with ms)\r\nThen the seconds, then just the date.'"
10529,420733672,b'Why?'
10529,420734366,"b'`ToDynamicType` does nothing here, returns a `DateTime`, why not just use that?'"
10529,422061992,b'@ayende Can we handle that better? Any ideas?'
10536,422069981,b'Is this used?'
10536,422070466,b'I think we need to support includes like `timeseries(<range_name>)`. Requiring here a date will be a problem for non-clr clients'
10536,422070731,b'it will be better if we will not provide `from` in the URL at all'
10536,422070784,b'it will be better if we will not provide `from` in the URL at all'
10536,422070809,b'it will be better if we will not provide `from` in the URL at all'
10536,422086113,b'nope'
10536,422086925,"b'The thing is that we expect pairs of (from, to). \r\nFor getting multiple time-series there might be a problem if the first one will pass only `from` and the second one only `to`..'"
10536,422088072,"b'For ranges, I agree. But in this method?'"
10521,422338954,b'I think this requires studio change as well\r\n@ml054 '
10508,420098949,b'We use https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps/ as a base now. There are arm32 and arm 64 bionic images available. I think we should use them instead.'
10508,420099570,b'If base image is adjusted then this line needs a tweak as well: https://github.com/ravendb/ravendb/blob/v4.2/docker/ravendb-ubuntu/Dockerfile#L5'
10508,420103580,"b""Since it's still Ubuntu I would not duplicate `run-raven.sh` nor `healthcheck.sh`. Maybe we could have 2 or 3 dockerfiles in `ravendb-ubuntu` dir for each arch, a `.dockerignore` file and change `build-ubuntu` and `publish-ubuntu` to have an `-arch` switch and then call `docker build -f <file>...` for selected arch."""
10508,420109300,"b""Also if we're adding support for arm32 we should probably also think of 64. So instead of `ravendb-ubuntu-arm` we should say `arm32v7` etc."""
10508,420121270,"b'Umm cross that. We only need `arm32v7`, we do *not* support `arm64`.'"
10540,422624300,"b'I think there is an issue here, You are returning an array that may be *larger* than the requested size.\r\nBut the calling code is expecting just an array, and may consider all of it to be full.'"
10540,422624548,"b'Here we are doing something that may be very bad. We are passing the whole buffer here, but it may be larger than needed.'"
10544,422630429,b'```suggestion\r\n                return new List<string>();\r\n```'
10521,422806020,b'oh yes - now I can remove those magic constants! '
10545,422810506,b'remove double space'
10545,422811076,b'can item be null here? '
10545,422811494,"b'also please use reduce function here:\r\n```\r\nvar obj = arr.reduce(function(acc, cur, i) {\r\n  acc[i] = cur;\r\n  return acc;\r\n}, {});\r\n```'"
10545,422812057,"b'rename to Url, \r\nsee: https://danielmiessler.com/study/difference-between-uri-url/'"
10545,422812325,b'why we repeat this twice?'
10545,422812917,b'missing ; '
10545,422813430,b'reverse condition'
10545,422813613,b'it has XSS leak!'
10545,422813771,b'add protected'
10545,422814474,b'getCustomizedValueAsString'
10545,422816300,b'remove this method'
10545,422816596,b'remove'
10545,422816675,b'remove'
10545,422816738,b'remove'
10545,422816967,b'spacial -> special ?'
10545,422817244,b'remove'
10545,422817720,b'remove'
10545,422817767,b'remove'
10545,422817823,b'remove'
10545,422817909,b'remove'
10545,422817986,b'remove'
10545,422818210,b'please update imports'
10545,422818275,b'update import'
10545,422818388,b'update import'
10545,422819267,b'map is used to get results of map - if you ignore values then use forEach'
10545,422820203,b'please ping me'
10545,422820444,b'do we need when here? '
10545,422822091,b'why we fallback here? '
10545,422822212,b'wrong identation'
10545,422822532,b'specify type  here'
10545,422822634,b'specify type here'
10545,422831840,b'specify type'
10545,422832733,b'move this condition up  - to avoid repeating ourselves'
10545,422833417,"b""let's move this logic to abstract class to static method?"""
10545,422833589,b'add default: and throw error '
10545,422834031,b'can we avoid using css classes for that? '
10545,422834502,b'missing ;'
10545,422834713,b'maybe filter then map'
10545,422834845,b';'
10545,422835052,b';'
10545,422835422,b'can we move processAfterFetch to fetchDatabaseSettings?'
10545,422836009,"b""maybe let's relay on dirty flag?"""
10545,422836216,b'remove space before ?'
10545,422836414,b'reverse condition'
10545,422836868,"b""I wonder if we should cancel as well - someone may say: I'm not the expert. """
10545,422837519,b'?'
10545,422838067,b'I wonder if we need this code'
10545,422838165,b'escape'
10545,422846358,b'remove it'
10545,422847636,b'fix ident'
10545,422851307,b'move fallback ehere'
10545,422858024,b'move to hypertextColumnOpts'
10545,422858650,b'span in span?'
10545,422858860,b'remove span'
10545,422860636,b'please check that'
10545,422874007,b';'
10545,422876483,b'do same like customAction'
10545,422877500,b'do we need slidein ? '
10545,422880365,b'add as child'
10545,422976858,b'done'
10540,422983251,"b""Which is fine? We did exactly the same thing before. Check `GetReduceResultValueField` we are getting there a buffer, but to Lucene we are passing the 'reduceResult.Size'"""
10540,422983613,b'Check my other answer.'
10540,422986064,"b""No, not fine.\r\nPreviously, we created a new instance, which was guaranteed to be zero.\r\nSo if we had more data, it was just zero all the time.\r\nNow, you have a shared buffer, which may be dirty, so the data may be *different* on the portions you didn't use."""
10534,422068043,b'Can you check https://github.com/ravendb/ravendb/pull/10537 ?'
10534,422987876,b'Removed your changes in favor of the other PR.'
10540,422989643,"b""But since we are copying from the beginning of the buffer till the reduceResult.Size in `GetReduceResult` method and then passing the reduceResult.Size to Lucene, so it should be fine? Previously the buffer was for the whole index lifetime of an index, so after few runs it was 'dirty' too?"""
10529,422625607,b'Any reason not to use this?\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.buffers.text.utf8formatter.tryformat?view=netcore-3.1#System_Buffers_Text_Utf8Formatter_TryFormat_System_Int64_System_Span_System_Byte__System_Int32__System_Buffers_StandardFormat_'
10540,423061107,"b""I'm sorry, you are absolutely correct, I missed that part."""
10545,423074984,b'done'
10545,423135749,b'done'
10545,423140853,b'done'
10545,423141169,b'done'
10545,423142271,b'done'
10545,423145265,b'done'
10545,423151302,b'done'
10545,423154633,b'done'
10545,423155936,b'done'
10545,423156168,b'done'
10545,423156545,b'done'
10545,423156914,b'done'
10545,423157045,b'done'
10545,423157271,b'done'
10545,423157510,b'done'
10545,423157947,b'done'
10545,423158057,b'done'
10545,423158135,b'done'
10545,423158253,b'done'
10545,423158580,b'done'
10545,423159054,b'done'
10545,423161361,b'done'
10545,423161938,b'done'
10545,423169327,b'done'
10545,423185634,b'done'
10545,423195162,b'done'
10545,423205158,b'leaving it'
10545,423207328,b'done'
10545,423207398,b'done'
10545,423207492,b'done'
10545,423209553,b'done'
10545,423212654,b'done'
10545,423214116,b'done'
10545,423214836,"b'leaving it, as discussed'"
10545,423215185,b'done'
10545,423215851,b'done'
10545,423216028,b'done'
10542,422981752,b'check for null or empty?'
10542,423220844,b'done'
10545,423234825,"b'Even if I first filter by those entries that are `databaseEntries `then `entry.getEntrySettings()` can return null (it returnes `settingsItem | null`), so leaving this'"
10545,423253258,"b'Prefer not to because the first time `processAfterFetch `is executed is in compositionComplete, and `fetchDatabaseSettings `is in the canActivate'"
10545,423254104,b'done'
10545,423259419,b'done'
10545,423261187,b'done'
10545,423263167,b'done'
10545,423263405,b'done'
10545,423265850,"b'Code is now refactored w/o the warning text, but I left this condition in as it was more comfortable to generate the relevant html'"
10545,423265945,b'done'
10545,423266322,b'done'
10545,423266745,b'now refactored'
10545,423266851,b'done'
10545,423283003,b'done'
10545,423286816,b'done'
10545,423286857,b'done'
10545,423287468,b'done'
10545,423287597,b'done'
10545,423289408,b'done'
10545,423304611,"b""Well, it gives **.25s** **ease-in** delay when switching between the 2 grids\r\nDefined as: `@slidein-properties: slidein .25s cubic-bezier(0, 0, 0, 1);`\r\nIf I remove this class it is just a bit more 'jumpy'"""
10545,423514845,b'done'
10554,423682534,b'What are you trying to do here?'
10554,423682689,"b'Why keep it as a flag, we already have the count on the list, no?'"
10554,423692832,"b""I'm releasing the LSV instances (empty ones) so GC can collect them."""
10554,423693289,"b'I need this, because the underlying list can be 32k, but last non-null LSV can be at earlier index after cleanup.'"
10554,423693622,"b'That is why we have `Array.Clear`, no? Why are you doing this one at a time?\r\nAnd why are you probing the array?\r\n'"
10554,423694058,"b'There is the size of the buffer, and there is the number of valid items there.\r\nAll of which should be managed by the list itself, not externally.'"
10554,423710434,b'Done'
10554,423710469,b'Done'
10554,423718681,b'What is this for? The count is already the size of the list.'
10554,423773784,b'You are correct. After introducing Trim I can make it simpler. Cutting by half now.'
10559,424352769,b'Do we want to cache those routines? Now it generates them everytime?'
10559,424353959,"b""Would it help us to have it the other way around?\r\n\r\nThe `TimeSeriesRangeResult` would inherit from `TimeSeriesRangeResult<TimeSeriesEntry>`? Would that help us to avoid 'new' ?"""
10559,424354553,b'Not implemented?'
10559,424354634,b'Not implemented?'
10559,424354918,b'Implement that explicitly `IAsyncSessionDocumentTypedTimeSeries<TValues>.Append(TValues entry)`'
10559,424355449,"b""Shouldn't this call `GetAsync` not `GetAsyncInternal` ?"""
10559,424356372,"b""Can we cache those? Will try but not sure it's possible because of `TValues`."""
10559,424359197,"b""We can't.\r\nBecause we can't cast from base class to the derived."""
10559,424361183,"b'`GetAsync` is only for `TimeSeriesEntry`, here you have `TValues`'"
10559,424375868,b'done'
10559,424375940,b'deon'
10559,425103340,b'TimeSeriesEntryValues?'
10571,425117792,"b""what kind of operation doesn't have a token?"""
10571,425127544,b'TransactionRecorder and generation of certificates'
10573,425595545,b'We probably need to be case-insensitive here?'
10573,425597390,b'What happened to this?'
10573,426236571,"b""It's a legacy endpoint (and still can be used since this is all for auto-complete)"""
10561,426249125,b'This is expensive?'
10561,426249202,b'What is the type is an interface? `List<IFoo>` ?'
10561,426250706,b'Original implementation took 1600ms in my test. This one takes 400ms.'
10561,426250723,"b""Need to double check, but shouldn't be an issue."""
10565,424536281,"b""Shouldn't we do that on low memory as well? \r\nOr at least have some reaction to low memory?"""
10565,425193263,"b'This is wrong, I think.\r\nYou have _already_ allocated this, so you are double counting it, no?'"
10565,425194059,"b'This is an issue about accounting.\r\nFrom outside, we are always ""charged"" for this memory.\r\nYou are changing things so it will only account for the memory when it is out of the pool. But what about memory that is *in* the pool? That would be hidden from us. '"
10565,425255103,"b""I'm updating it only for that thread and the total amount of allocated memory remains (only updated when we actually release the memory)."""
10565,425255979,b'I update the allocations when the buffer is released to the pool.'
10565,425257497,b'Maybe update the generation in `LowMemory` and clean everything when `ExtremelyLow`?'
10565,425269530,"b'I like that, we could do the same for regular pool?'"
10565,425686561,"b""The problem here is that you are not accounting allocated memory (from the OS perspective), which will make it harder for us to know that there is pooled memory that isn't in use"""
10565,425686942,b'ditto'
10565,426239556,b'The total unmanaged and the total size of the encryption buffer pool will be visible in the stats'
10565,426267966,b'done'
10565,426523067,b'You are *always* raising the extremely low memory flag here.'
10565,426523764,b'You are always raising the extreme low memory '
10565,426524537,"b'Use a dedicated pool here, not the shared one'"
10565,426524614,b'Use dedicated pool'
10565,426544601,b'done'
10565,426544720,b'done'
10565,426544778,b'done'
10565,426545053,b'done'
10576,426606576,b'Also Property?'
10576,426606733,b'TimeSeriesValue => TimeSeriesValueAttribute'
10576,426606897,b'readonly?'
10576,426607867,b'`field.GetCustomAttribute<TimeSeriesValue>(inherit: false)` would be cleaner?'
10576,426608538,"b'`ConcurrentDictionary<Type, List<FieldInfo>>` would be enough?'"
10576,426609532,"b'`mapping = _cache.GetOrAdd(t, CreateMapping);` would be enough. Do not need to use TryGet and then GetOrAdd'"
10576,426610418,b'Can we find a better name for this? :)'
10576,426611304,"b'AllowMultiple is false by default, right?'"
10576,426615745,"b'Yes, is false.\r\nIf property might be problematic I think, this would work: \r\n`[TimeSeriesValue(0)]public double HeartRate {get;}` ?'"
10576,426616204,b'VS suggested to simplify :) '
10576,426617263,"b""I'm open for suggestions :)"""
10576,426617827,"b""Not sure I'm following.. This should be thread-safe... """
10561,427085765,"b""Tested. It yields exactly the same JSON as before. Left code in the issue that I've used."""
10560,423873123,b'`TimeValue` instead of `TimeSpan`'
10560,423873231,b'same'
10560,423873465,b'same after RavenDB-14988'
10560,423873576,b'same'
10560,423873757,b'same'
10560,423874986,b'Can we unify this method with the one form `ParseRange`'
10560,423876343,b'Why do we need this here?'
10560,423904105,b'in what case this can be default? I think we can set this always to `DateTime.MaxValue` '
10560,423904292,b'`stats.End.Add(-timeFromLast)`'
10560,423905023,"b'Not sure if this is correct when we use last, we might skip results, no? '"
10560,424405323,b'done'
10560,424406403,"b""changed, now we're always setting `max` to `DateTime.MaxValue` """
10560,424406515,b'done'
10560,424406761,"b'added test, seems to work fine :)'"
10567,424962319,b'```suggestion\r\n```\r\nThis will work just as well'
10567,424962441,b'```suggestion\r\n```'
10567,424963596,b'Do we have to worry about the order of operations here?'
10567,424963710,b'What happened if the user provided the same counter twice?'
10567,424964468,"b'Is the user going to expect index matching on input and output?\r\nWhat about the `null` here, should there be a match here?'"
10567,425005420,"b""- no, the order stays the same\r\n- if the user provided the same counter more than once, we will drop the duplicates from the request. I don't think it makes much sense to ask for same counter twice... \r\n- if we have a `null` counter name here, we will get a NRE here: https://github.com/ravendb/ravendb/blob/v4.2/src/Sparrow.Server/ByteString.cs#L1268\r\n\r\nAlso, because we were using `uniqueNames` in cases of small batches (when `uniqueNames.Sum(x => x.Length) < 1024`), I think we should use the `uniqueNames` in large batches as well"""
10567,425007095,"b""I was actually asking about what we'll get on the *client* side.\r\nWill we get the duplicate counter value twice as a result?\r\nWhat happens when we have a null?\r\n\r\nAlso, I don't think that I saw protection on the server side for this?"""
10567,425024785,"b""on the client side (before these changes) - if the user asked for a small batch with duplicates, he will get the counter value once as a result. \r\nIf the user asked for a large batch with a duplicate counter name, he will get the counter value twice in the result. \r\nif the user had any `null` counter name in his request. it will fail (regardless to batch size)\r\n\r\nAnd you're right, there's not much protection on the server side for this .."""
10567,425027987,b'Similar problem in `GetDocumentsCommand` - if the user had any `null` ids in his request - it will fail (regardless to batch size). \r\nAnd duplicate ids are always removed in this command'
10567,425198219,"b""Let's add protection on the server side, and return null for such an instance.\r\nFor `GetDocumentsCommand` as well.\r\n\r\nAnd if we match the client side behavior now of `GetDocumentsCommand`, it is good"""
10567,427282317,b'done'
10581,427291203,b'What does it mean? @karmeli87 ?'
10581,427311434,b'Got the answer. This optimization was removed. Will be added back in 5.0.x'
10564,424542473,"b'Make this an instance class, and then place an instance of the cluster state machine.\r\nIn this way, you cannot use it on multiple raft engines at the same time, and we need that, for testing, if nothing else.'"
10564,424543278,"b'This should not be a static field, or a field at all.\r\nIt should be something that you pass in the context.'"
10564,424543999,"b'Remove the if here, we always wants it.'"
10564,424545676,b'What happened if I pass a string as the value here?'
10564,424546319,"b'Here, you are changing how primitive exchange values are held, right?\r\nHow does this work with existing values?'"
10564,424979142,"b""This is existing code, I just reorganized the method, got the `raw == null` clause out of all if clauses, and added metadata.\r\n\r\nThis shouldn't have any changes on current behavior of primitive exchange values"""
10564,425276181,b'this should work because its converted to blittable\r\nI added a new test for it.'
10564,425629498,b'If it is null maybe do not send it?'
10564,425637263,b'PrepareMetadataForPut?'
10564,425640127,b'`Cluster.CompareExchangeExpiredDeleteFrequencyInSec` to match the ExpirationConfiguration'
10564,425640391,b'IIRC the default for regular expiration is 60. I do not think we should go below that here.'
10564,425644133,b'Pass the Slice and materialize it only if needed inside the method?'
10564,425644777,"b""Shouldn't this be `>=` ?"""
10564,425645781,"b""Aren't you doing double work here? `GetExpiredValues` already returns expired values and you are checking here again if they are expired?"""
10564,425649105,b'Please double check if you do not have an iterator of this table opened'
10564,425649689,b'Why is this needed?'
10564,426237243,"b'This is to handle update of `@expires` value\r\nIf the compare exchange `@expires` is updated there will be more than 1 entry for that compare exchange in the `CompareExchangeExpirationStorage`, so I have to check the value of compare exchange  `@expires` in the compare exchange table, then I can know the actual `@expires` value '"
10564,426237481,"b'no this is right, we should delete if the time is equal'"
10564,426238699,b'I reused a ravendb dump creating method from there\r\nhttps://github.com/ravendb/ravendb/pull/10564/files#diff-d7adabe65d19221ae0f622e52c1b2751R552'
10564,426242759,b'it is only opened for read/delete no iteration'
10564,426255015,"b""if we use `PutCompareExchangeValueCommand` without passing metadata, we won't send metadata,\r\nif we use clustertransaction, and don't add metadata, we also won't send the metadata,"""
10564,427063986,"b""If use didn't pass it, keep it as null"""
10564,427064313,"b""Why are you creating a new instance here when it doesn't exists, keep it null"""
10564,427064434,"b'Here, when accessed, create a new instance so users have easier time setting this'"
10564,427064947,b'Here check if metadata is null.\r\nMaybe add another property to avoid creating an instance uneccesarily.'
10564,427065224,"b'This is the client API, right? \r\nMaybe we want an additional overload with expiration?'"
10564,427065606,b'Why an out variable and not a return value?'
10564,427065992,"b'```suggestion\r\n            if (value.TryGetMember(Constants.Documents.Metadata.Key, out var metadata) && metadata != null)\r\n```'"
10564,427066040,"b'Also, reverse the if'"
10564,427067394,"b'\r\n```suggestion\r\n                if (expired.TryGetValue(ticksSlice, out List<Slice> list) == false)\r\n                {\r\n                     expired[ticksSlice] = list = new List<Slice>();\r\n                }\r\n                list.Add(keySlice);\r\n```'"
10564,427067905,b'```suggestion\r\n\r\n                var entryTicks = it.CurrentKey.CreateReader().ReadBigEndianInt64();\r\n                retyrn entryTicks <= currentTicks;\r\n            }\r\n\r\n        }\r\n```'
10564,427073223,"b'No related to this issue and I know we do it all over the place here, but I wonder if the observer need to `await` for anything.. \r\ncc @ayende '"
10564,427074291,"b'If this command will be executed twice, would you end up with the same result as a single execution?\r\nif the answer is no, you need to provide some `guid` to the command.'"
10564,427079679,b'I would rather have the metadata as a generic concept.'
10564,427079790,"b""We don't have to wait for it, but we can't create two of them at the same time"""
10564,427079851,"b'We need a guid, yes'"
10564,427083741,b'https://issues.hibernatingrhinos.com/issue/RavenDB-15021'
10584,427279527,"b'why initial, not none? '"
10582,427317231,b'use here Parameters instead and validate them'
10582,427318606,b'internal?'
10582,427319772,"b""implement inside Parameters internal method 'Validate'. You will be able to use it both client and server-side."""
10582,427320472,"b""Don't we need to wait for index to be applied?"""
10582,427321944,"b""most of the endpoints have `/config` and the end. Let's go with that."""
10582,427322000,"b""Don't we need to wait for index to be applied?"""
10582,427323825,b'this creates new MaintenaceOperationExecutor each time. Maybe it would be better to do it once in the ctor?'
10582,427326629,"b""I'm wondering if this isn't 1 step too far with taking the name from the class. Thoughts?"""
10582,427328328,b'probably better to implement interface explicitly like you did previosuly'
10582,427373326,b'done'
10582,427374476,b'what you mean? I have:\r\n* `timeseries/config/names`\r\n* `timeseries/config/policy`\r\n* `timeseries/config`'
10582,427377260,b'done'
10582,427398945,b'done\r\n'
10582,427408066,b'We need an async version as well'
10582,427408797,"b'It would make sense to also update the policies from here, no?'"
10582,427409148,"b""I don't like this name. Can we find something more descriptive?"""
10582,427410517,"b""I did it, because it play nicely with the `Register` and you don't need to worry about the name at all."""
10582,427412054,b'suggestions are welcome :)'
10582,427412663,"b'it is all `async` (return `Task`), we need sync as well?'"
10582,427416103,b'done'
10582,427421189,b'done'
10582,427421314,b'done'
10582,427422782,b'The problem is that I can have few TS with identical values but different name and now you are forcing me to create separate classes for them.'
10582,427423550,"b""I'm wondering if we need it at all. All of this can be handled inside `ConfigureTimeSeriesValueNamesOperation`."""
10582,427425171,"b'```\r\n[RavenAction(""/databases/*/expiration/config"", ""GET"", AuthorizationStatus.ValidUser)]\r\n[RavenAction(""/databases/*/refresh/config"", ""GET"", AuthorizationStatus.ValidUser)]\r\n[RavenAction(""/databases/*/admin/revisions/config"", ""POST"", AuthorizationStatus.DatabaseAdmin)]\r\n```\r\n\r\netc'"
10582,427426086,"b'`store.TimeSeries.SetPolicy<User>(policyName, retention, aggregation)`\r\n`store.TimeSeries.SetRawPolicy<User>(retention)`\r\n\r\n`store.TimeSeries.RemovePolicy<User>(policyName)`\r\n'"
10582,427428583,"b'you can use the other overload, or create another class.\r\nBut for the majority of the use cases, it is nice, I think.'"
10582,427431072,"b'Then I think we should either support\r\n```\r\nISessionDocumentTypedTimeSeries<TValues> TimeSeriesFor<TValues>(object entity, string name = null) where TValues : TimeSeriesEntry;\r\n```\r\n\r\nor `DisplayNameAttribute` on that class'"
10582,427862676,"b""Pass 'Parameters' as we do in other operations."""
10582,427862996,"b""You added 'name' to sync, but we need it in async as well."""
10582,427863488,"b""all 'async' methods available in Client API should have 'Async' in the name e.g. RegisterAsync"""
10582,427864046,b'PUT admin/timeseries/policy'
10582,427864149,b'DELETE'
10588,428496134,b'Maybe rename the file to Northwind.4.2.ravendbdump so we will know from which version the dump is?'
10592,428501521,b'Should be `AsRollupEntry`? Can you check if we have a proper casing in the solution? Especially public API?'
10592,428502447,b'Remember to add `string name = null` to other overloads.'
10592,428527511,b'Why do we have both `ToRollupEntry` and this one?'
10592,428540774,b'changed `AsRollUpEntry`=> `AsRollupEntry`\r\nforgot to remove `ToRollupEntry`.\r\n'
10592,428540818,b'done'
10592,429092999,b'@karmeli87 I just realized that after https://github.com/ravendb/ravendb/pull/10580 is merged I would like to avoid this kind of an approach. I think it would be better if you would write converter (supporting reads only).'
10609,429653104,"b""like I said I think we don't want to expose that as this is constant property - and should be part of index output not progress. Even if we have race and index type isn't send we simply don't show such item as we don't know about this index. we can have a look at details tomorrow. """
10609,429660196,b'What about multi map indexes that have both time series / counters / docs?'
10609,429665634,"b""wow, I wasn't even aware we can mix index sources. Then I assume we have to introduce new type of index source: Mixed? """
10609,429780642,"b'At this point we do not support mixing the sources of maps. I will create an issue to throw when something like that happens, till we want to actually support that.'"
10609,429782440,"b'We do need to take this into account, because this is very likely going to _be_ a feature.'"
10609,429782638,"b""I don't see the problem with adding `SourceType ` here, we already have `public IndexType Type { get; set; }`"""
10609,429784142,"b""For now let's stay with current implementation here - introducing the mixed sources will require much more changes in the studio anyway"""
10556,423630094,b'please report what?'
10556,423630202,b'remove space'
10556,423630337,b'and add space after data: '
10556,423631459,"b'please add type which is unknown: \r\n```\r\nthrow new Error(""Unknown entry type: "" + rawEntry.Metadata.Type);\r\n```'"
10556,423632359,b'remove space'
10556,423632570,b'nice ;-)'
10556,423634365,b'```\r\nconst  filterCondition =  !this.filterKeys() || this.entryContainsFilterText(entry);\r\n```'
10556,423635573,b'no need to pass this'
10556,423635833,b'escape'
10556,423637028,b'can we access data using this way:\r\nhttps://github.com/ravendb/ravendb/blob/eec3386e0c8bd96fa4970b9564da78245241b818/src/Raven.Studio/typescript/viewmodels/database/tasks/importDatabaseFromSql.ts#L568'
10556,423637427,b'why 70%?'
10556,423637906,b'```\r\nthis.categoriesGridController().setSelectedItems([category]);\r\n```'
10556,423646199,b'I wonder if we should have single factory'
10556,423647486,b'introduce findFirstERroredCatetory'
10556,423652965,b'I wonder if we should dispaly confirmation only when we are dirty? '
10556,423654024,"b""don't we have computed with category list? """
10556,423654290,b'indent is wrong'
10556,423654674,b'remove space'
10556,423655790,b'use double quotes'
10556,423656515,"b""let's inline this template hrere."""
10556,423657047,"b""we don't want to have form for every element"""
10556,423657302,b'it woulbe be nice to avoid having id haere'
10556,423657420,b'if we really need it then add prefix'
10556,423657762,b'you have multiple elements with name id on page!'
10556,423659151,b'please remove those comments - you duplicate info from next line'
10556,423659764,b'Enter number (default: null)'
10556,423660725,b'remove those styles'
10556,423660938,b'no need to specify px when value is zero.'
10556,423661075,b'?'
10556,423695296,b'//TODO '
10556,423711517,b'done'
10556,423712447,b'done'
10556,423712877,b'done'
10556,423713442,b'done'
10556,423714516,b'done'
10556,423717168,b'done'
10556,423719306,"b""I think I don't need to duplicate, \r\nthere is such an escape on the entry's `descriptionHtml` computed"""
10556,423746698,b'done'
10556,423752847,b'When using 100% then the horizontal scroll shows on the bottom.\r\nIt will Not show if for example 90% is used. (changed to 90% now)\r\n![image](https://user-images.githubusercontent.com/17376974/81700357-3931c600-9471-11ea-917f-841bee3253db.png)\r\n'
10556,423754715,b'done'
10556,423758130,b'done'
10556,423758492,b'done'
10556,423759068,b'done'
10556,423759441,b'done - removed'
10556,423761162,b'done'
10556,423761887,b'done'
10556,423763506,b'done'
10556,423770603,b'done'
10556,423772449,b'done'
10556,423815983,b'I refactored the templates html so that will not use the 65\r\n'
10556,423820752,b'done - removed that id completely'
10556,423831832,"b""Actually, I prefer that we leave this template since I would like to use it in **both** grids.\r\nI don't see any loading/performance problems w/ it.\r\n![image](https://user-images.githubusercontent.com/17376974/81714347-a51b2b00-947f-11ea-862a-dc5581408ea4.png)\r\n![image](https://user-images.githubusercontent.com/17376974/81714382-ae0bfc80-947f-11ea-91cf-13950b176e35.png)\r\n"""
10556,423836062,b'done'
10556,423870314,b'done'
10556,423877607,b'done'
10556,423894839,b'done'
10556,423903095,b'done'
10556,424241872,b'ok'
10556,424241992,b'ok'
10556,425606354,b'internal?'
10556,425609633,"b""Wouldn't it be better to just do:\r\n```\r\ncfg.AsEnumerable().Any(x => string.Equals(x.Key, keyName))\r\n```\r\n\r\nYou are already enumerating the cfg anyway.\r\n\r\nAlso do we need to be case-insensitive during the comparison?"""
10556,425610012,"b'FYI, if you do not use variable, you can use `out _` instead'"
10556,425610773,"b""Didn't we want also to validate that all of them have 'DefaultValue' ? This can be done in ConfigurationCategory.ValidateProperty"""
10556,425611095,"b""Same. It is better just to do it with '.Any`"""
10556,425617616,"b'Before doing that, do we want to dry run building the RavenConfiguration for that database to see if there are no failures?'"
10556,425619200,b'Why do we need those anyway?'
10556,426247774,b'done'
10556,426248025,b'Removed _ClientId_\r\n_StudioId_  is used as the debug tag in _context.ReadForDisk_'
10556,426256019,"b""Done\r\nThe key names within the configuration are Not lower case\r\nI don't think it must be a case-insensitive check"""
10556,426256345,b'but it is used as the second and fourth parameters passed to SettingValue()'
10556,426256712,b'done'
10556,426257041,"b'As discussed, this endpoint will be refactored\r\n'"
10556,426258057,b'done'
10556,426436760,"b'string.Equals(x.Key, keyName, StringComparer.OrdinalIgnoreCase)'"
10556,426471371,b'done - for both places where used - using _StringComparison.OrdinalIgnoreCase_'
10556,428808559,b'do we need this span inside div? '
10556,428808728,b'do we need span ? We can put text-muted on div?'
10556,428813475,b'why `value?`'
10556,428813772,b'remove space  + why `value?` ?'
10556,428815121,b'remove space'
10556,428815730,b'did you check logic for forbidden? '
10556,428819916,"b""here you concat tables multiple times. \r\n\r\nI'd rather filter this table twice and concat one time. Also try to avoid using lodash, js array has filter method. \r\n\r\nI don't remeber if we can avoid logic based on css classes? """
10556,428821528,"b'just:\r\n```\r\nreturn this.allEntries().first(entry) => this.getEntryStateClass(entry) === ""invalid-item"")?.data.Metadata.Category;\r\n```\r\n'"
10556,428821798,b'please also keep in mind this function has no explicit return'
10556,428822398,b'filter then map? '
10556,428822556,b'remove ( ) '
10556,428822949,"b""let's move refresh logic outside fetch command, ok ?"""
10556,428823482,b'typo in entries'
10556,428824043,b'remove space before !'
10556,428824804,b'I wonder if customizedEntriesCount should be observable to avoid need for manually tracking that?'
10556,428824911,b'+ missing ; at the end fo lines'
10556,428825621,b'remove class in h4? '
10556,428825872,b'from the databases view '
10556,428826185,"b'do we need to escape "" ? We are  in ` context'"
10556,428826949,b'removed'
10556,428827153,b'I wonder if we can pass object here and use JSON.stringify + pass through module for colouring? '
10556,428827573,b'done'
10556,428828494,b'done'
10556,428829959,b'done'
10556,428830310,b'why? '
10556,428830897,b'just hr or .hr? '
10556,428831043,b'can we do that or use some shade of grey ?'
10556,428852976,b'done'
10556,428854940,b'seems there is just one space after constructor....'
10556,428856848,b'done (just hr)'
10556,428861757,b'removed'
10556,428893776,"b'done - using `fade(@brand-warning-dark, 15%); `is quite nice'"
10556,429098825,b'done'
10556,429102511,b'done'
10556,429102920,b'ok'
10556,429108691,b'removed'
10556,429108833,b'removed'
10556,429121848,b'done'
10556,429121894,b'done'
10556,429141574,b'done - changed to observable'
10556,429147970,"b'Vertical scroll needed _position: absolute_\r\nIf I use _position: relative_ then vertical scroll is not in place.\r\nSo adding _top: 50_ solved it.\r\n(it is for the start location of the entries, below the titles, in edit mode)\r\n\r\n![image](https://user-images.githubusercontent.com/17376974/82654840-fc608e80-9c29-11ea-8861-6afa671c4a55.png)\r\n'"
10556,429162599,b'done'
10556,429306678,b'yes - refactored'
10556,429543626,b'done'
10556,429612150,b'done'
10556,429639325,"b'it is :\r\n```\r\nRecord<string, string>\r\n```'"
10556,429646079,b'done'
10613,429879205,b'Maybe `CurrentNumberOfRunningBackups`?'
10614,429889860,b'put original exception in the inner also.'
10580,428632857,"b'Note, breaking changes that we need to talk to the users about'"
10580,428633574,b'Why is this in the context of a session?'
10580,428634991,b'Can we avoid this?'
10580,428636247,"b'Remove this, the method is too big'"
10580,428637075,b'why lazy?'
10580,428653612,"b'Ok, all of the JSON.net conventions were moved to the JsonNetSerializationConventions, but I will summarize this.'"
10580,428654945,"b""I'm mostly concerned with this being something that users _are_ touching and being a barrier to update to 5.0\r\n\r\nSo we need a clear guide here."""
10580,428655473,"b'After looking carefully at EntityToBlittable we had 2 types of conversions, first one was session related only, that was also taking into account events that we bound to session. And this is what is exposed in this converter. The second set of methods were static and was doing similar thing, but without any events or metadata handling.'"
10580,428655613,b'I will check'
10580,428655797,"b'Ok, just copied what we had in previous one.'"
10580,428657565,"b""This is a problematic part. The 'DocumentConventions' might be in ctor.  Not sure how to make it convenient for the user.\r\n\r\nI would like them to be able to do:\r\n\r\n```\r\nConventions\r\n{\r\n    Serialization = new JsonNetSerializationConventions\r\n    {\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nand I did that, but this means that I cannot require in ctor of JsonNetSerializationConventions the parent DocumentConventions."""
10580,428658189,"b'You can set it when in the `Serialization` setter, no?'"
10580,428658974,b'Not sure that I follow?'
10580,428660071,b'I will write a detailed guide in our docs.'
10580,428660299,b'User writes:\r\n\r\n```\r\nConventions\r\n{\r\n    Serialization = new JsonNetSerializationConventions\r\n    {\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nAnd inside we do:\r\n\r\n```\r\nConventsion.Serialization\r\n{\r\n   set { \r\n          _serialization = value;\r\n          _serialization.Initiaize(this);\r\n   }\r\n}\r\n```\r\n\r\nSo here we provide the right value'
10580,428661716,"b'Ok, will check.'"
10580,428812690,"b'added CreateSerializerOptions here with our own TypeNameHandling. This could be a problem when implementing a different serializer, but not sure if we can avoid this'"
10580,429287054,b'Guide: https://github.com/ravendb/docs/pull/1154'
10587,428594768,"b'Maybe `""$timeSeries/""` for consistency with others?'"
10587,428596437,"b'We don\'t support sending TS to SQL, right? I think we\'re missing that check in `Validate` - for counters we have:\r\n\r\n\r\n```\r\n if (type == EtlType.Sql)\r\n                    {\r\n                        errors.Add(""Load counter behavior functions aren\'t supported by SQL ETL"");\r\n                    }\r\n\r\n```'"
10587,428596994,b'Please revert it'
10587,428597072,b'Please revert'
10587,428605182,"b""I think we can just make `ScriptRunner.GetDateArg` an internal method and use it here - it's static anyway"""
10587,428614005,b'comments are saying about conters - need to double check if the same logic is fine for time series'
10587,428626421,b'Rather not supported exception - do we have a plan to support TS ETL to SQL now? '
10587,428626537,b'Not supported'
10587,428626783,b'Can we remove this ctor?'
10587,428627349,b'Invalid method name - `GetNumberOfTimeSeriesSegmentsToProcess` ?'
10587,428630828,b'Here we delete _all_ time series - is it intentional? '
10587,428633093,"b'what if I return `{to : new Date(2020, 3, 28)}` - it will default to sending everything anyway'"
10587,428635060,"b'You are deleting everything on every call? \r\n\r\n@karmeli87 I think there is a concept of TS tomstrones, right?'"
10587,428638419,b'we are already iterating over `timeSeriesEntries ` in `FilterSingleTimeSeriesSegmentByScript` - can we handle removals of relevant entries as well?'
10587,428642709,"b""Need to review this against the other JS API we have on timeseries, I'm pretty sure we aren't using `TimeSeries`"""
10587,428642826,b'Same'
10587,428643352,b'Name'
10587,428643761,b'Remove this'
10587,428643851,b'Remove this'
10587,428645173,b'I wonder if we should be case sensitive here?'
10587,428645530,b'What is we have 10000 time series append? What is the etag that would be recorded?\r\nThe document or the time series?'
10587,428647039,"b""You aren't handling tombstones here, are you handling that elsewhere?"""
10587,428647200,b'timeseries'
10587,428647361,b'time series'
10587,428649312,"b""Right now we are sending the full segment when it changes, one entry at a time.\r\nNeed to consider how we can send a whole segment as a unit.\r\nBecause otherwise if we have 10 adds, we'll send batches of: 1,2,3,4,5,6,7,8,9\r\nTotal of 45."""
10587,428649838,b'Can avoid `from` ?'
10587,428653897,b'huh?'
10587,428656825,b'??\r\n'
10587,428657117,b'Can I load time series from _another_ document?'
10587,429631030,b'As I understand we do want to support ETL time series to SQL.\r\nSo no?'
10587,429632742,"b""We'll not support it at this point."""
10587,429633822,"b'It is temporary.\r\nBut I need to figure out how to track which time-series I need to remove \r\nwhile they are depended on the document and can be loaded entirely, none or part due to changes in the document, right? '"
10587,429636062,b'https://github.com/ravendb/ravendb/pull/10587#discussion_r429633822'
10587,429636785,"b'`FilterSingleTimeSeriesSegmentByScript` just define the filtretion by ""iterator methods"" the actual iteration is only here.'"
10587,429640129,"b""In script runner it is `timeseries(doc, name).get(from, to)`\r\nSo I will modify it as follow:\r\n```\r\nvar person = loadToPeople({ Name: this.Name + ' ' + this.LastName });\r\nvar ts = timeseries(name).get(from, to);\r\nperson.timeseries(name).append(ts);\r\n```\r\nDoes that make sense?\r\n"""
10587,429640151,b'https://github.com/ravendb/ravendb/pull/10587#discussion_r429640129'
10587,429640575,b'How does it relate to counters?'
10587,429641066,"b""In the ETL?\r\nWe do it that way:\r\n```\r\nvar person = loadToPeople({ Name: this.Name + ' ' + this.LastName });\r\n\r\nperson.addCounter(loadCounter('down'));\r\n```"""
10587,429643107,b'So what should the API be in order to have a consistent expereince?'
10587,429648301,"b""Consistent with other time-series JS API and ETL counters?\r\nMaybe as follow:\r\n```\r\nvar person = loadToPeople({ Name: this.Name + ' ' + this.LastName });\r\nvar ts = timeseries(name).load(from, to);\r\nperson.addTimeseries(ts);\r\n```"""
10587,429766448,"b""I don't really like it, but not sure what I would rather have here.\r\n\r\n@karmeli87 @aviv86 """
10587,429772128,"b'@karmeli87 how do we handle ""TS tombstones"" ?'"
10587,429773345,"b'OK, I see'"
10587,429778140,"b""I think we should have consistent API across ETL scripts - it uses 'load' naming convention which we obviously don't use in JS patching. I prefer:\r\n\r\n```\r\nvar ts = loadTimeSeries(timeSeriesName, from, to)\r\nperson.addTimeseries(ts);\r\n```\r\n\r\ninstead of \r\n\r\n```\r\nvar ts = timeseries(name).load(from, to);\r\nperson.addTimeseries(ts);\r\n```\r\n\r\nbecause:\r\n- we won't have so many methods that we need to introduce `timeseries(name).` wrapper\r\n- it's consistent with handling counters in ETL scripts (`person.addCounter(loadCounter('down'));`\r\n\r\n"""
10587,429779054,b'I like this'
10587,430173933,"b'Deleting by tombstones is in progress.\r\nBut I referred to a scenario like below:\r\n```\r\npublic async Task Test()\r\n{\r\n    const string script = @""\r\nloadToUsers({ Name: this.Name + \' \' + this.LastName });\r\n\r\nfunction loadTimeSeriesOfUsersBehavior(docId, counter)\r\n{\r\n    var user = load(docId);\r\n\r\n    if (user.Age < 18)\r\n    {\r\n        return true;\r\n    }\r\n}"";\r\n            \r\n    var user = new User {Id = ""users/1"", Age = 17};\r\n    \r\n    var src = GetDocumentStore(_options);\r\n    var dest = GetDocumentStore();\r\n    \r\n    AddEtl(src, dest, ""Users"", script);\r\n\r\n    using (var session = src.OpenAsyncSession())\r\n    {\r\n        await session.StoreAsync(user);\r\n        session.TimeSeriesFor(user.Id, ""Heartrate"").Append(DateTime.Now, new []{58.0});\r\n        await session.SaveChangesAsync();\r\n    }\r\n\r\n    using (var session = src.OpenAsyncSession())\r\n    {\r\n        session.Advanced.Increment<User, int>(user.Id, x => x.Age, 1);\r\n        await session.SaveChangesAsync();\r\n    }\r\n}\r\n```'"
10587,430184665,"b'I hope I follow you.\r\nAs I understand it we store the general last ETag (per node)\r\nAnd we track for a batch in memory per type - document, counters, attachment, and now timeseries.\r\nWhy did you specify ""10000""? Because it includes more than one time-series segment?'"
10587,430184908,b'In progress'
10587,430188128,"b""We can't know at any point if there will be more appends, right?\r\nSo we can't wait for segment to be full.\r\nMaybe a delay by time?\r\nAnd we can let change the value by configuration or somehow defined it in the script"""
10587,430198634,b'Just a mark for later to replace by a specific test scenario'
10587,430202069,"b""For now no.\r\nI mimicked the counters' behavior.\r\nDo we want to support it?"""
10596,428689309,"b'This will be a ""sticky"" alert. The user can dismiss it but it will pop up again in one hour. Also, if there are only 3 days left the alert becomes red.'"
10596,429088191,b'This can be negative? We want to set it to 0 then?'
10596,429610790,"b'Yes, I will display a relevant message if it is already expired.'"
10596,429910227,"b""@iftahbe maybe let's just invoke this inside `OnServerCertificateChanged` ? Instead of having two separate callbacks we will have one? You do not need `sender` and `args` then also and you do not have to deal with removing the event because we are handling that already for `OnServerCertificateChanged`."""
10596,429910890,b'Probably worth wrapping also everything in try catch and logging the error.'
10605,430187062,b'Do we need to expose this?'
10605,430187955,b'From implementation it more looks like `LoadBalanceBehavior` than `WriteBalanceBehavior`. I think we should switch the name.'
10605,430190959,b'internal'
10605,430191461,"b'I do not like this name, but I cannot think of a better one'"
10605,430193989,"b'I think we are missing a convenient way for a user to set a context for a session, which should be either used directly then or passed to a `WriteBalanceSessionContextSelector` method.\r\n\r\nE.g.\r\n```\r\nsession.Advanced.SetContext(""some value"");\r\n```'"
10605,430293033,"b'Yes, this is commonly needed when we want to properly use `ExecuteAsync` for custom commands.'"
10605,430298722,"b""Updated it, let's see if it would work better."""
10605,430298929,"b'`s3.Advanced.SessionInfo.SetSessionContext(""foo"");`'"
10605,430305198,"b'We need to rename this also, right?'"
10605,430305290,"b'We need to rename this also, right?'"
10605,430305444,"b'We need to rename this also, right?'"
10605,430305971,"b'We need to rename this also, right?'"
10605,430306688,b'internal?'
10605,430308212,b'The publicly available method should be IMO:\r\n```\r\npublic void SetContext(string sessionKey)\r\n```\r\n\r\nand should check if sessionKey is not null or whitespace and use the original `loadBalanceSeed` from the conventions (the one passed via ctor).'
10605,430310135,b'Can we have a test for this?'
10605,430311916,"b'I think we should also prevent user from setting this more than once in a lifecycle of a session. I do not see a valid scenario for this, it can only cause confusion and we should be safe by default.'"
10605,430315989,b'yes'
10587,430371104,b'What commands do we send to a destination db currently after modifying a document like in above test?'
10622,430317377,"b'Can we use `nameof` for the ""Count"" and ""Results""?'"
10622,430383467,b'done'
10587,430581612,"b""Do you ask about commands related to time-series?\r\nI just removed all (from DateTime.MinValue to DateTime.MaxValue) and readd the relevant.\r\nBut of course, it is not so efficient.\r\nI did the same test for counters to check how we handle it there but as I understand we don't.\r\nShould we?"""
10587,430878585,"b'Yes, I meant the commands that ETL sends under the covert to a destination db.\r\n\r\nRegarding updates to documents (like `session.Advanced.Increment<User, int>(user.Id, x => x.Age, 1);` in your test) and handling counters then - please see [here](https://issues.hibernatingrhinos.com/issue/RavenDB-11157#focus=streamItem-67-29744.0-0) the general overview - in particular ""we send all counters on document update (if not script is defined or the load counter behavior function returns true)""\r\n\r\nI don\'t know if we can do better for Time Series. @karmeli87 ?\r\n\r\n'"
10587,430928020,"b""After thinking about it a bit more I think we can differentiate two cases:\r\n\r\n- if a document is sent to the same collection (`users/1` from `Users` is send using `loadToUsers()`) then we preserve the document ID - > `users/1` - then if a document is updated we could skip sending `DELETE users/1` so we must not send _all_ time series\r\n\r\n- if a document is sent to different collection then we don't know its ID on destination side so we always sent `DELETE docs where prefix ID is users/1`, then I think we have to send all time series as well\r\n\r\nThoughts?"""
10587,430982125,"b'That make sense, but that would be _horrible_ for large systems, no?\r\nIt might be better to disable that entirely, if we are sending to a different collection.'"
10587,431008297,"b""Oren, we're talking here about the setup that someone _enabled_ it on purpose - by setting up a behavior function like:\r\n\r\n```\r\nfunction loadTimeSeriesOfUsersBehavior(docId, counter)\r\n{\r\n    return true; // not filtering - send every TS entry\r\n }\r\n```\r\nThat won't be our default behavior. So I think it's fine - we just need to make people aware of it in the documentation."""
10587,431016426,"b'Okay, then'"
10628,431100015,"b""I'm 99% sure we don't need this restriction since we check that renew exec is not null before actually starting the renew process."""
10626,431016630,b'```suggestion\r\n    public class DocumentsCompressionHandler : DatabaseRequestHandler\r\n```'
10626,431029030,b'done'
10626,431111684,b'space after : '
10626,431114326,b'why redirect to this view?'
10626,431117122,"b""I don't think we need to sort that"""
10626,431118944,"b""I think we don't need logic for title - as this is always the truth """
10626,431120475,b'I wonder if we should remove title and update label to contain info that we about to compress reivison from *all* collections? '
10626,431120946,b'do we need that?'
10626,431131995,"b""we don't - I forgot to remove - done"""
10626,431148053,b'using `Compress Revisions for All Collections`'
10626,431149597,b'done'
10626,431151199,b'done'
10626,431151545,b'done'
10626,431181047,b'leaving this - as discussed'
10628,431699603,b'What about backward compatibility?'
10628,432914511,"b'There is no backward compatibility in regards to this configuration property.\r\nI don\'t remember why but we gave it up when we did this:\r\nhttps://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/RavenServer.cs#L1356\r\n\r\nIt\'s funny and a little ironic because that commit\'s title is ""backward compatibility"" :) \r\nhttps://github.com/ravendb/ravendb/pull/9041/commits/09dcccec1999fd077bf6181e3411152d30c4b1c7'"
10627,431701294,b'Try in the future when you have direct `null` or `bool` values to use named parameters. It is easier when reading the code to understand what that value is for.'
10461,432952707,b'done'
10461,432952745,b'done'
10461,432952819,b'done'
10637,431814303,b'Dynamic null propagation will not work if this method is used. Also the values from this method will be indexed not like DynamicNullValue.ImplicitNull ones'
10637,431814670,b'We will loose precision here if the value was double. Should we do that or fail to convert?'
10637,432916530,"b'No, that is fine'"
10637,432916536,"b""Yea,I don't like it, but it make sense"""
10637,432936586,"b""Why can't we return `DynamicNullObject`?"""
10637,433090557,"b""It will be fine. I've somehow assumed that we will have issues when passing to methods like e.g. Convert.ToInt64 when we would not recognize the dynamic type properly."""
10637,433104000,b'Still null'
10637,433104042,b'Still null'
10637,433162605,b'```\r\n                var dbl = TryConvertToDouble(value);\r\n                if (dbl.HasValue == false)\r\n                    return DynamicNullObject.Null;\r\n```'
10643,433202260,b'why we need that?'
10643,433203540,b'just because I used it in the _less_ file'
10643,433203819,b'?'
10643,433229118,"b'please use "" whenever possible'"
10643,433230297,"b'use "" '"
10643,433240789,b'done'
10643,433241078,b'done'
10631,431655892,"b""Note, here we don't use flags, only the real value."""
10631,432911199,b'Why is it on the `ExternalReplication`?'
10631,432912390,"b""We can actually have a different filters for pull and push.\r\nNot hard to add and I think it might be useful.\r\ne.g. I want to pull only configuration document, but push all the data that I've collected."""
10631,432912471,b'Why do we need that?'
10631,432912706,"b'Not familiar with the `ShortTermSingleUse`, just wanted to notice that this isn\'t a ""short-term"" usage.'"
10631,432913006,b'Need to validate that changing the definition on the Hub will be reflected on the already opened connections'
10631,432913078,"b""Need to write a correct log message, don't want this to mislead us."""
10631,432913170,"b""Shouldn't this `if` come before the `switch` ?"""
10631,432913211,b'It is a new feature so we also need to add to the supported versions an option for push/filtered replication.\r\n\r\n'
10631,432913795,b'Does this change has any backward comp. issues that we care about?'
10631,432914179,b'Why we have this and `PullReplicationDefinition`  ?'
10631,432934819,b'Removed'
10631,432934909,b'Good idea.'
10631,432934921,b'Removed'
10631,432935078,"b""That just means that it isn't using a context. This will live as long as the validator lives, which is fine. """
10631,432935235,"b""Right now, IIRC, that wouldn't be the case for things like removing certificates.\r\nExisting connections are maintained. \r\n\r\nBut I agree: https://issues.hibernatingrhinos.com/issue/RavenDB-15090"""
10631,432935415,b'done'
10631,432935579,"b""No, it shouldn't. We need to do this check if the other side requested pull replication in this manner. \r\nThere should be no way that you'll get here if you aren't supporting pull replication\r\n"""
10631,432935625,b'Mid way through refactoring things to avoid putting certificates inside the database record.'
10642,433267288,b'This will update the licensed cores if we manually updated it'
10642,434515068,"b""Shouldn't this be `.Where(x => x.Value.Modified)` ?"""
10642,434516192,"b""No, Modified means that the current number of utilized cores, was set by the user explicitly.\r\nWe only want to reassign cores that wasn't set by user."""
10642,434520510,"b""Not sure that I follow this. If I have a license with 64 cores and a node with 32 cores then it will be always true? How this is 'set by user explicitly'?"""
10634,431820753,b'Better to implement inside TimeSeriesConfiguration a `ToJson` method via IDynamicJson interface and handle all of that there.'
10634,432293743,b'nice catch!'
10634,433240678,b'What if `hasCollectionsConfig == false` and `hasNamedValuesConfig == true` ? The code below can throw? Also are we doing something with `namedValues` variable ?'
10636,431816043,b'DocumentsCompression'
10636,431816142,b'DocumentsCompression'
10636,431816240,b'Documents Compression'
10636,431818010,b'documents compression'
10636,431818751,b'DocumentsCompression'
10636,431818843,b'documents compression'
10636,431818955,b'DocumentsCompression'
10636,431835681,b'or maybe compression? '
10636,431835885,b'in studio we have Document Compression I matched it'
10636,431836016,b'![image](https://user-images.githubusercontent.com/1250431/83147645-4351f680-a0f8-11ea-8060-da2e1c25fd13.png)\r\n'
10636,432283610,b'done'
10636,432283621,b'done'
10636,432283658,b'done'
10636,433238796,"b""wouldn't it be more safer to do?\r\n```\r\ncurrentDatabaseRecord?.DocumentsCompression.Collections?.Count > 0\r\n```"""
10636,435115470,b'done'
10652,435098201,b'update import '
10652,435101849,b'I think we have already class for that: max-height so somethign like that ? '
10652,435103082,b'done'
10652,435106988,b'There is an existing limit-height class with 250px \r\n```\r\n.limit-height {\r\n    max-height: 250px;\r\n    overflow-y: auto;\r\n}\r\n```'
10652,435741162,b'ok'
10662,436395867,"b""please never relay on magic string values. What if moment add locale support or we enable that? Code won't work. \r\n\r\nLooks like we can use this:\r\n![image](https://user-images.githubusercontent.com/1250431/83978576-ccdba280-a908-11ea-9b5a-9aa38e8df831.png)\r\n"""
10662,436396075,b'same here'
10662,436397966,b'done'
10662,436397969,b'done'
10663,436594214,"b""can we move this function to single location and make static? Right now we have this logic in 2 places. I'm affraid we forgot to change second place during any update. """
10663,436827786,b'done'
10670,436882307,b'How does this relates to the change you made?'
10670,436882481,"b'Would be better to do using a case here, no?'"
10670,437236258,b'forgot to push the test'
10670,437236402,b'changed'
10671,437004913,b'space after if'
10671,437008526,"b""Didn't we agree that we don't want to disable this option? But when we choose this option we uncheck second toggle."""
10671,437165584,b'done'
10671,437227881,b'fixed'
10676,437538593,"b""1. I suggest calling `this.toggleAutoCollapse()` instead of `foldAll `since it will sync the _Toggle Collapse_ button\r\n2. Do we want to do this also after clicking 'Refresh' button ?"""
10676,438427641,b'I wonder if can we can have single field: forceFold instead of refreshWasDone and alreadyFolded? \r\n\r\nthen we init this value with true and after refresh we also set this to true. '
10676,438674635,b'done'
10676,438674705,b'done'
10685,439023144,b'does it work properly? I remember knockout has issues with bindings are spread across multiple lines. '
10685,439082025,"b'From all tests that I have done, all seems to work properly.'"
10678,439257325,"b""Wouldn't it be better to have nullable here instead of all those checks in the TimeSeriesHandler?"""
10678,439277472,"b""I actually don't want it to be `nullable` ... I just want to send it over the wire as `null` for the sack of other clients.\r\n"""
10691,440636285,"b""How did we end-up in this situation?\r\n\r\nWhen we create the subscription we wait for it on the appropriate node:\r\n```csharp\r\nvar node = Database.SubscriptionStorage.GetResponsibleNode(serverContext, name);\r\nif (node != null && node != ServerStore.NodeTag)\r\n{\r\n        await WaitForExecutionOnSpecificNode(serverContext, ServerStore.GetClusterTopology(serverContext), node, subscriptionId);\r\n}\r\n```\r\nBut I don't see where we wait if `node == ServerStore.NodeTag`, so this is the issue?"""
10691,440642662,"b'hmm we do wait here:\r\n`var subscriptionId = await Database.SubscriptionStorage.PutSubscription(options, GetRaftRequestIdFromQuery(), id, disabled, mentor);`\r\n\r\nBut what might actually happened is that `GetResponsibleNode` will return `null` if we went to `Candidate` state.\r\nSince this is a new subscription,  we should do `return topology.WhoseTaskIsIt(RachisState.Follower, subscription, null);` inside the `GetResponsibleNode` function.'"
10691,440645878,b'What if the responsible node changed after we checked the current responsible node?'
10691,440648452,"b'That might happened as well, yes.'"
10691,440651870,b'So why not to wait upon the tcp connection to the responsible node?'
10691,440653715,"b'> But what might actually happened is that `GetResponsibleNode` will return `null` if we went to `Candidate` state.\r\n> Since this is a new subscription, we should do `return topology.WhoseTaskIsIt(RachisState.Follower, subscription, null);` inside the `GetResponsibleNode` function.\r\n\r\nthats what actually happens in GetResponsibleNode, we return WhoseTaskIsIt()'"
10691,440655395,b'> So why not to wait upon the tcp connection to the responsible node?\r\n\r\nthere is a tcp connection to responsible node but the subscription task is not yet created on it so we get subscrption does not exist (https://issues.hibernatingrhinos.com/issue/RavenDB-14696#focus=streamItem-67-48264.0-0)'
10691,440655655,b'Actually we do wait for it at `AssertSubscriptionConnectionDetails`.. :/\r\n> How did we end-up in this situation? '
10691,440657479,"b'5 nodes cluster, the subscription was created (on majority of the cluster, ABC), and returned responsible node, this node became down so the SubscriptionDoesNotBelongToNodeException thrown and we got a new AppropriateNode which could be D or E, and the task is not yet there so we get subscrption does not exist exception'"
10705,442659846,"b'this should be `new BooleanSetting(settings[""Raven/Storage/SkipConsistencyCheck""], false);`'"
10607,429841301,b'startWith => startsWith\r\nint start = 0;\r\nint pageSize = int.MaxValue'
10607,429841337,b'startWith => startsWith\r\nint start = 0;\r\nint pageSize = int.MaxValue'
10607,429927812,"b'Maybe\r\nint start = 0,\r\nint pageSize = 25\r\n\r\n(like in `LoadStartingWith`)'"
10607,429929320,b'ok'
10607,430281564,b'done'
10607,430281591,b'done'
10700,443198767,"b""I don't like this change. """
10700,443349071,"b""This was clearly a bug. It is a 'DELETE' endpoint not a 'GET' one. Copy/paste issue."""
10715,443373270,"b'Is it okay to ignore this error, aside from the log?\r\nWhat would be the behavior of the system?'"
10715,443396308,"b""If I don't ignore this it might take down the replication or import.\r\nAnd if we fail we will use the initial `tsName` that we got from the argument.\r\nWorst-case as I see it, is that the metadata might contain wrong casing."""
10716,443411055,b'Do we need that?'
10716,443413328,b'see PR desc'
10725,443968586,"b""For replication and backup I don't think you care what type it is. You just need to know the last processed etag overall.\r\nRight now we might delete dead segments without backing them up."""
10726,444148494,"b""Why ref parameters here? Doesn't seem to be used for anything"""
10726,444150877,"b""It's been used in `GetTimeSeriesRangeResults`, not sure if correctly though.. """
10726,444151276,"b""It isn't, and we should probably remove it."""
10726,444155485,"b'@aviv86, I remember we have this because:\r\nIf ask page size 10 and 100 time-series I would get only the total first 10, and not 10x100, right?'"
10726,444157159,"b""anyway, let's do it in a separate issue:\r\nhttps://issues.hibernatingrhinos.com/issue/RavenDB-15246"""
10725,444164093,b'What about counters?'
10725,444165207,b'https://issues.hibernatingrhinos.com/issue/RavenDB-14816 we do not clean them at all'
10729,444168077,b'if the cluster is down it will cause an infinite loop'
10729,444169066,b'it will create a timer for next backup occurrence'
10707,443209239,"b'Why is this an array and not a dictionary? That would allow O(1) searches, no?'"
10707,443209372,"b""Here to, if this was an array, it would be easier to run though.\r\nNote that we'll usually not trigger this work, so we want to avoid those costs if possible."""
10707,443209437,"b""We can't do that scanning all the time"""
10707,443209487,b'where is this called?'
10707,443209581,b'Why are we calling ToString() here?'
10707,444092703,b'changed from BlittableArray to BlittableObject'
10707,444093136,b'unused code'
10707,444093498,"b'no one, removed this'"
10707,444149790,"b""shouldn't we return `counterName` here instead of null?"""
10733,444674644,b'`HttpRequestException`?'
10733,444704705,b'Include IOException / SocketException here as well?'
10733,444706587,b'Probably not needed? https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.sendasync?view=netcore-3.1#System_Net_Http_HttpClient_SendAsync_System_Net_Http_HttpRequestMessage_ but maybe we should include `TaskCanceledException` ?'
10733,444713253,"b'Absolutely `TaskCanceledException`, but...\r\n\r\n```\r\nvar client = new HttpClient();\r\nclient.GetAsync(""http://e.example.com"").GetAwaiter().GetResult();\r\n```\r\n\r\nGives:\r\n\r\n```\r\nUnhandled exception. System.Net.Http.HttpRequestException: No such host is known.\r\n ---> System.Net.Sockets.SocketException (11001): No such host is known.\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n``` '"
10733,444714451,"b""Yes, but the 'SocketException' is an inner ex of HttpRequestException?"""
10733,444715383,"b'Hm... that is an inner exception, never mind.'"
10733,444715419,b'Do we want such deep error handling ? It still will throw a LicenseExpiredException with inner exception if it is not a HttpRequestException'
10733,444715948,"b'@garayx what you did is fine, I think'"
10712,442832666,b'@ayende I do not think this is correct (the comment) ? IIRC we will use session counter as the key then?'
10712,443197568,"b""No, this is correct. The session key is used only if the `LoadBalanceBehavior.UseSessionContext` is set.\r\nThat was done _explicitly_ to only opt in from the client.\r\n\r\nOtherwise, each session will use a different node and you won't have the usual mechanics of one primary normally."""
10712,443365249,b'This is exactly what I would expect after setting Load Balance Behavior to UseSessionContext. When context is not set (either via Selector or Manually) then each session should just use the counter. This is also a form of Load Balancing.'
10712,443374734,b'That will lead to strange errors. A write goes to one node and a read to the other.\r\nThat leads to support calls :-)\r\n\r\nI would rather this be very explicit. An application must _choose_ to enable this.'
10712,443374905,"b'And an admin setting is not enough, you may have multiple applications running.'"
10712,443378640,"b'What do you mean write goes to one and read goes to other? It will stick to the same node during the session?\r\n\r\nWhy you want to be so explicit? What is the difference between this and ReadBalanceBehavior? If we want to be so explicit, then I do not see a reason of having LoadBalanceBehavior in the Client Configuration.'"
10712,443382887,"b'Separate requests. PRG is a good example.\r\nTwo sessions, but same user seeing that, and data goes poof'"
10712,443404584,b'So the only usage in the ClientConfiguration for this is to turn it off? Do we want that or just Seed is enough?'
10712,443495779,b'Yes'
10712,444167829,"b'I think this is wrong. If the admin explicitly turned it off, even if you provide `SetContext`, it should not apply it.'"
10712,444168406,"b'The second time this is called, is will be true, because we set `_sessionId` from `_clientSessionIdCounter`'"
10712,444755035,b'Done.'
10734,444684166,"b'maybe move this to default case to support not only length of 0, 1,2,3,4\r\n\r\ncase 0:\r\n return """"'"
10734,444685005,"b""or maybe let's move this to generalIUtils? as right now we duplicate code + we can support all lengths."""
10734,444685183,b'or... can we simply join with comma?'
10734,444685856,b'typo?\r\n'
10734,444686671,b'typo'
10734,444798285,b'oops - fixed\r\n'
10734,444798408,b'oops - fixed'
10734,444824207,b'done'
10734,444824846,"b""done - moved to generalIUtils\r\nbut I prefer to keep it grammatically correct w/ '&' before the last one"""
10744,445566440,b'Do we have some numbers for this? What if this is 4/8/16/32/64/128k ?'
10744,445567263,b'Meaningful names here please. `Counters_1M_1Value_1User()` or sth like that.'
10744,445568794,b'no randoms. needs to be the same every day.'
10744,445577149,"b'yes I tested bulk insert of counter, ts, docs, for various values (1k to 20k), 8k gives the fastest result'"
10752,446697225,"b""according to comment + logic, \r\n\r\nif we restore encrypted backup we default to encrypted database. So I'm not sure putting false here is good """
10752,446822583,"b""It is possible to create/restore a **non-encrypted** **database** from an **encrypted**-**backup**.\r\n\r\n@iftahbe was requesting that the toggle will not be 'enabled' automatically. \r\nInstead, allow the user to turn on the toggle if needed.\r\n\r\nMaybe the comment should be refactored."""
10752,446827916,"b'User _may_ chose to set it up as non encrypted, but it should be an explicit choice. '"
10752,446835920,"b'@ayende, @ml054 why if we restore an encrypted backup we should default to an encrypted database?\r\nThe cloud backup is always encrypted, even if the original DB was not encrypted.\r\n\r\nWhen the user creates a new DB from backup, they should be able to choose if DB is encrypted or not.\r\nSo the toggle should default to false, and if the user wants an encrypted DB they should turn it on.'"
10752,446842358,b'to sustain security level by default - with an option to lower this to non-encrypted database. Safe by default. '
10752,446846304,"b'I disagree.\r\nTurning on Encryption has a significant impact on performance and should only be done by people who explicitly want it.\r\nAlso, there is no way to disable encryption afterward, and it requires to create a whole new database.'"
10752,446851406,"b""Please also notice that you create encrypted database to hold sensitive data. Encrypted cannot be enabled on http. \r\nSo it means someone imports sensitive data to https enabled server (which isn't probably dev). \r\n\r\nMaybe we should emphase that database is encrypted on UI? For me security is more important then performance. And we still can disable encryption during import."""
10752,446863204,"b""Maybe this argument is pointless because it's just about a toggle of a button, but I really think that encryption at rest should be turned off by default. \r\nJust because the server is https, doesn't mean that the user needs encryption. It is actually meant for people who are afraid their physical disk will be compromised. I think it's a very small number of users. \r\nAnd for cloud instances, encryption performance is very relevant. It consumes a lot of CPU credits."""
10752,446864319,"b""When we say encrypted when the backup is encrypted, the user still needs to selection encryption key\r\nThat is another step that they have to take to ensure that they aren't going to create encrypted by mistake.\r\n\r\nAlso, I don't think we saw meaningful performance difference with encryption, @iftahbe  ?\r\n\r\n"""
10752,446869086,b'When creating a database encryption is optional. The default is not encrypted.\r\nTo be consistent we should follow the same convention in the restore.'
10752,446871672,"b""We did see a little performance difference, more CPU usage. I don't have the numbers. I probably exaggerated."""
10752,446885455,"b""**Closing** PR means leaving current behavior:\r\nhttps: button is enabled and turned 'On'\r\nhttp: button is disabled\r\n\r\n**Merging** PR means:\r\nhttps: button is enabled but turned 'Off'\r\nhttp: button is disabled\r\n\r\nSo should I close this PR or Not?"""
10736,445333900,b'typo: usaAvailableCores'
10736,445577130,b'done'
10736,446176353,b'Should not be at any point configurable. We cannot run tests that affect processor affinity.'
10736,446177215,"b'this will affect whole process anyway, I do not see a point here'"
10736,446179741,b'should be static not local. it affects whole process anyway.'
10736,446610829,b'done'
10736,446610839,b'done'
10736,446610850,b'done'
10752,446921339,b'Close the PR'
10764,447267022,b'double space before ='
10751,446672812,"b""Those methods are also used to upgrade from 41_016, would it have any effect on some-one upgrading from earlier version (let's say 4.1.x) to 5.0?"""
10751,446674987,"b'We recreate here all counters, regardless of their casing?'"
10751,446675366,"b""Why do we need the prefix?\r\nWouldn't we simply continue to the next document? only after we consumed all counters of the previous one?"""
10751,446675929,"b'This looks very similar to the `PutCounters` of the `CounterStorage`, I would prefer to reuse _if possible_.'"
10751,446676010,b'same for the rest of the methods here'
10751,446885952,"b'The only method that is shared between `From41016` and `From41017` is `ReadDbId()`\r\nAnd yes, I intoduced some changes in `From41016` and upgrading from 4.1.x to 5.0 now works \r\nand is tested - unskipped `CanMigrateLegacyCounters`, `CanMigrateLegacyCountersWithMultipleDbIds`, `CanMigrateTablesWithCounterWord` tests'"
10751,446886351,b'When we have `commit = true` we are breaking from `GetCounters()` foreach loop.\r\nthen when we return to GetCounters loop we want to continue from were we left off. \r\nwithout the prefix we will start from the beginning again..'
10751,446888494,"b'Yes, we delete all `CounterGroup` entries and recreate them all from scratch (per document)\r\nWe can\'t simply lower-case the counter names (and keys) in each CounterGroup entry, \r\nbecause lower-casing a counter name changes it\'s lexical value and can affect the total ordering between CounterGroup entries.\r\n\r\ne.g. say we have 2 CounterGroup entries :\r\n- [A, B, X, Y] (key = ""users/1|"")\r\n- [c, d, e, f] (key = ""users/1|c"")\r\n\r\nif we were to lower the casing in each group we will get - \r\n- [a, b, x, y] (key = ""users/1|"")\r\n- [c, d, e, f] (key = ""users/1|c"")\r\n\r\nAnd now we are in a bad state - CounterGroup entry ""users/1|"" comes before ""users/1|c"" entry,\r\nbut ""users/1|"" entry contains counter names with lexical value that is greater than the first counter in the next entry (""x"" and ""y"" are greater than ""c"").\r\nNow for example if we want to get value of counter ""x"", we will search for it in entry ""users/1|c"" (because that\'s where we think it\'s supposed to be), won\'t find it there and return null.. \r\nSimilar problem with increment'"
10751,446891643,b'ok will try to reuse code from CountersStorage where possible'
10751,446994936,"b'This file has 40MB. If you need to create this anyway, then we can use Interversion tests to generate this on the fly.'"
10751,447012167,"b'I do not think this is a good idea. This is error prone. Consider in the future we will add additional items here that your current and some future schema upgrades should not ever encounter.\r\n\r\nI think it would be better to copy the method and avoid using it, especially when changes are required internally to make it actually work.'"
10751,447013123,"b""But it means that when 42017.cs is executed and migration was done from 41016, it will already produce the CounterNames property. Is this something that we would want? It means that 42017.cs will encounter them, but it shouldn't?"""
10751,447532578,"b'reverted changed in `From41016`, redundant work '"
10751,447534390,b'I accidentally used a snapshot that was creadted with no compression. \r\nchanged to optimal compression and now this file is 300KB'
10751,447535681,b'revereted changes in CountersStorage '
10770,447609762,b'`@timeseries-values-names` ? `@timeseries-value-names` ?'
10770,447610273,"b'This opens an additional tx for server store for each query. Do we need that? Is this for Studio? If yes, IIRC we have that information during the query, so we can only do that when using Studio.'"
10772,447817896,b'can we use build validation rule?'
10772,447868766,b'done'
10772,448151085,b'Please avoid using `Not`. If you need to emphasize this word please use strong or em.'
10772,448201589,b'ok'
10778,448224182,"b'```suggestion\r\n                                               $""{nameof(command.Type)}: ({command.Type}), {nameof(command.Index)}: ({command.Index})"");\r\n```'"
10778,448224367,b'why is it needed?'
10784,448819790,"b""It was 'pendingOps' which was renamed to 'executedOps'. Now you are using '_operations.Count'. Is this correct?"""
10777,448866318,b'We do not want that. The Sample Data should be already cleared out. This can be used to clean it up when needed after modifications (comment out the code).'
10784,448869528,"b'Yes, `pendingOps` were actually the executed ops (see line 870 we get it out of `_operations` and execute on line 897), then we check for more work using `pendingOps ` (line 930) which will always return `HasMore` and we will make another run of `TransactionOperationsMerger`. Also see the logging on line 934 it was actually counting the remaining ops using the `_operation` list.'"
10786,449037539,b'That will break a lot of the tests'
10787,449452009,"b""1. It took me a while to figure out what was the problem and why it failed only during compaction but I still don't fully understand it. I think it's very tricky and having a test for that case is a must.\r\n\r\n2. It would also be nice to have a comment here explaining why we need to call `SerializeSchemaIntoTableTree`. Actually I wonder if `ISchemaUpdate` shouldn't have a required field `Description` where an author of the schema update would need to provide a few sentences explaining what is the purpose (or purposes) of this schema change. \r\n\r\n3. The missing piece that I don't get is: why `SerializeSchemaIntoTableTree` (which is called for `DocumentsStorage.DocsSchema`) doesn't need to be called for `DocumentsStorage.CompressedDocsSchema`? NRE was thrown during this call:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/2f55c5f46bb26234c6ef888666fe353ac1c85631/src/Voron/Data/Tables/Table.cs#L809-L812\r\n\r\nso `_schema` was an instance of `CompressedDocsSchema`. I might be missing something so just want to make sure."""
10787,449459141,"b""The issue was that we didn't serialize the `CompressedEtagsSourceIndex` value. It is a new field in 5.0.\r\n`CompressedDocsSchema` isn't actually serialized, it is identical to `DocsSchema` with the `compressed` flag turned on.\r\n\r\nAgree that we got to have a test here.\r\n"""
10787,449478705,"b""Okay, that explains why I couldn't find where do we serialize `CompressedDocsSchema`. Makes sense. \r\n\r\nThis means that here we could use `DocumentsStorage.CompressedDocsSchema ` instead of `DocumentsStorage.DocsSchema`, right? Just for readability by making it more clear that it's related to the compression added in 5.0"""
10788,449398330,b'I wonder is it worth to mention what happens when we have 2 values in input collection? '
10788,449399197,"b""@karmeli87 What if I have 4 values for most of the time, and then by mistake I push TS with 6 values. I assume time series policy won't be applied, right? Will it fail silently? Will it continue to work once I delete 2 values from the entry with 6 values? I assume we should notify user about such case (performance hint in studio?)"""
10788,449851953,b'\r\nAdded\r\n![image](https://user-images.githubusercontent.com/17376974/86528912-3a9dce80-beb5-11ea-9d42-924d7f18f1f0.png)\r\n'
10788,449860589,"b""@karmeli87 @ml054 \r\n\r\nAs discussed with @karmeli87  :\r\n1. TS policy will Not be applied once an entry has more than 5 values\r\n2. After you delete the 'extra' values, the policies will continue to work as before\r\n3. I added this top warning : \r\n\r\n![image](https://user-images.githubusercontent.com/17376974/86530584-a0448780-bec2-11ea-9adf-7f4fa1439a24.png)\r\n"""
10788,449873149,b'1. The aggregation should stop working.\r\n2. Message in the notification center should appear.\r\n3. After fixing it (delete the extra values) it should resume the work.'
10798,450070398,"b""Why are you doing this? Shouldn't we worry about losing fractions?"""
10798,450077824,b'This is `Sum` of the `Count`.\r\nTo count the total number of points in a rollup segment we need to use the `Sum` of the `Count` value.'
10798,450096555,"b'But you are summing the `Sum`, not ` Count`, am I missing something?'"
10798,450099557,"b""In a rollup we have 6 values (First, Last, ... Count)\r\neach of them has `StatefulTimestampValue`, in order to calculate the total points of the original TS for the given rollup segment, we need to go the Count's `StatefulTimestampValue` and use the `Sum` property."""
10798,450109283,b'ok'
10787,450116892,"b""I don't think so, we aren't updating the compressed schema, we are updating the general one. """
10787,450134427,b'ok'
10794,450027260,b'better to use `GetCountersForDocument()` and do `.ToList()` \r\n\r\nThis way we can avoid having `GetCountersForDocumentList` method'
10797,450036216,b'can we create single formatting function instead of creating many new funcions?'
10797,450162522,b'done - I forced push'
10797,450191999,"b""let's use this function directly in view. Like I said during our call. We don't have to have so many fields in this class. Let's keep it clean."""
10797,450192329,"b'in html:\r\n\r\ndata-bind=""text: $root.formatBadge(attachmentsCount)""'"
10797,450223775,b'ok - forced pushed again'
10800,450228357,b'Why we did that?'
10800,450230099,"b""Because we have users that are already running the beta, and it isn't worth it to make people life harder"""
10800,450233593,"b""I don't think it is a good idea.\r\nFor instance, right now we are adding the Original TS name to the `Stats` table."""
10800,450234251,"b'Actually we do not have a choice anyway, because we applied many fixes to 50_000 migration regarding counters knowing that this is something that we do not care at this moment about and we cannot at this moment assume that for counters no one was affected, but for this change someone was and one is not a problem, but second one is.'"
10800,450234791,"b""So we basically can't use `50_000` at all? Because it is in an undeterminate state where we don't know where it is at?\r\n"""
10800,450235698,"b""Yes, this is what I've wrote in the original PR. There is an issue for that: https://issues.hibernatingrhinos.com/issue/RavenDB-15308"""
10804,450249896,b'What if it happens inside `OutgoingReplicationHandler`?'
10804,450288948,"b""`ReplicationLoader` is already alive only in the context of a database, so I don't see why this is required.\r\nIf the DB was disposed one ms afterward?"""
10804,450656044,"b'this code can run as not awaited [(code line),](https://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/Documents/Replication/ReplicationLoader.cs#L725) so when we null the `Database` on dispose of `ReplicationLoader` this code could still run so we get NRE'"
10804,450660624,"b'I do not like this kind of coding. Please ping me and we will figure it out. If the race is between disposing and creating outgoingReplicationHandler, then we need to prevent both of those operations to run at the same time.'"
10804,450662391,"b'Yes, there should never be something like that in our code.\r\n'"
10804,450662511,b'We need a better way to detect that. '
10804,450688188,b'done'
10755,446953106,"b""What will happen if we throw e.g. 'IndexDoesNotExistException' when Client version is 5.0.0.50?"""
10755,447439642,b'So we will get a warning about the version mismatch.\r\n'
10755,447453825,b'Which is incorrect? Right?'
10755,448233413,b'```suggestion\r\n                if (e is BatchRequestParser.InvalidCommandTypeException)\r\n```'
10755,448234082,b'Why are you comparing build version to revision here?'
10755,448234201,b'Why this line?'
10755,448805050,b'There are two different classes.\r\nThe `currentServerVersion` is `RavenVersionAttribute`\r\nAnd the `clientVersion` is System.Version.\r\nSo the `RavenVersionAttribute.BuildVersion` is equivalent to `System.Version.Revision`'
10755,448806146,b'If I understand it right it is to check if the client unofficially built (in a development environment)'
10755,448823661,b'We have dedicated namespace for exceptions. Raven.Server.Exceptions. Move it there.'
10755,448823963,b'+1'
10755,448825483,b'Is this a real case? Do we have aggregate exceptions anywhere? The .Any is not a cheap operaration.'
10755,448951734,b'You are excluding only 40 .. 50 here? '
10755,448954909,b'This is the range of v4.x other versions will be check by the first condition '
10755,448955983,"b'Problem is that the 6.0 client will be accepted here, accidently.'"
10755,448956888,b'How? The major is not equal?'
10755,448971542,"b""I don't like that line. It make no sense to me. \r\nThe dev version we use is either 40 or 50 for dev, no? In that case, check for those using equality, please."""
10755,448977589,b'Yes in the bulk insert it is. I can convert it to `foreach`'
10755,450671819,b'Better to move it to a dedicated method - like we did with `ThrowInvalidProperty`. The reason is slightly better performance - parsing is our hot path.'
10760,448228722,"b""Isn't this automatically generated?"""
10760,448967441,b'It is'
10760,450102855,"b'The one thing that pops to mind, now this is on each release, what updates this? Do we need to remember doing that?'"
10760,450137319,b'@gregolsky will handle that on CI'
10814,450878664,b'Why will it fail here?'
10814,450889393,"b""It shouldn't but if it does it's better to have it in the logs."""
10813,451039051,b'?'
10813,451039140,b'space after : '
10813,451039650,b'can we simplify this condition? '
10813,451039962,b'I wonder what we should write: whole number of integer. ;-)'
10813,451054252,b'done'
10813,451054565,b'removed  :)'
10813,451057040,"b""I think 'whole number' \r\nAt least according to https://www.mathsisfun.com/whole-numbers.html"""
10810,450797346,b'can we avoid having global scoped classes in view specific file?'
10810,450797543,b'I think we should remove th from selectors. It will work even when you change this to div right?'
10810,450798157,"b""+ maybe we can define limited width on parent level and override single column with min-width? By doing this we don't have to repeat classes and we use cascading feature from CSS. """
10810,451558806,b'Fixed.'
10810,451567685,"b""I've made it a bit different, with the same effect. I've also added the `title` attribute to the URL in Name column, so the full name will be visible on hover."""
10806,450311041,b'Let the slicer hold also the original nameSlice'
10806,450340956,b'do we need all of the different `GetOriginalName` if we have this method?'
10806,450628242,"b'What if we have a conflict on a time-series casing?\r\ne.g. ""Heartrate"" vs ""HeartRate""'"
10806,451568315,b'done'
10806,451568443,b'handled'
10842,453476457,"b""Actually... doesn't it affect last etag processed? Shouldn't this be handled in `ProcessTimeSeries` ?"""
10845,453541610,b'Use `ReadRawDatabaseRecord`. Here you are materializing the whole record'
10845,453542534,"b""use `ReadRawDatabaseRecord` and then `TimeSeriesConfiguration`,  we don't need the entire database record here"""
10845,453543969,b'you can use GetNames'
10826,452060774,"b""This will have a severe performance impact. The 'Collections' dictionary needs to have a proper comparer. I think you need to use `IFillFromBlittableJson` and implement it in RevisionsConfiguration."""
10826,453478847,b'What will happen if I will put `users` and `USERS` on the Client side and push it to the server (can we have a test for that)?'
10826,454220537,b'Yes. I will add one'
10856,454914389,"b""Is it ok that result returned by `Last()` isn't assigned? Just to confirm."""
10856,454916732,b'Given that this returns `bool` and actual result is `out` then I would rename the method to `TryFindByIndex` to follow the general convention'
10856,454917752,"b""This will create `TableValueReader ` instance even if we return `true`. It's minor but can we avoid that and create it only in cases where `false` is returned"""
10856,454919672,b'Why `- 1` ?'
10856,454924940,b'this is only to move the reader to the last segment.'
10856,454926423,b'the key slice is `docId/tsName/` and I need to transform it into `docId/tsName` \r\nnote: the `/` represents the record separator char'
10853,454295794,b'You can use: EasyReaderWriterLock'
10853,454304141,b'Why do you have two of these?'
10853,454304591,"b""I'm pretty sure that once we set it at the process level, it applies to the threads too"""
10853,454305000,"b""I really don't like the locking that we have here."""
10853,454305075,b'done'
10853,454307268,"b""It does. But it's changing it to the Process affinity and we need it to be 1 less (by default).\r\n"""
10853,454307621,b'What is the problem of using RWLS?'
10853,454314709,b'moved it to `ResetThreadAffinity`'
10853,454314834,b'leftover from changed to `EasyReaderWriterLock`. removed.'
10853,454317654,b'Okay'
10853,454317882,b'There is no need to do _any_ locking. That is handled by the OS\r\nWe just need to handle retries.\r\nAffinity changes can also come from outside.'
10853,454457379,b'done'
10853,454530588,b'What about removing this when the thread shuts down? Can we add an explicit handle for that when the thread exit?'
10853,454928074,b'done\r\nhttps://github.com/ravendb/ravendb/pull/10853/commits/2039600eff1c54add86773d92b75d83a06d84c4b'
10868,455570110,b'TimeSeriesRollupsAndRetention'
10868,455570212,b'rollups'
10868,455570466,b'rollups'
10868,455570552,b'rollups'
10867,455208055,"b""Reaching here, doesn't ensure that the command will be committed.\r\nThis ensures that it is in the the leader's log _only_, but it has to be in the majority of the nodes in order to be committed."""
10867,455208597,b'I would move this into the `try/catch`'
10867,455234336,b'Maybe it should be in its own `try/catch`?\r\nWhat if `WriteDatabaseRecordAsync` succeeds and we only fail in `WaitForIndexNotification`?'
10881,456302394,b'`2` is a valid number to have during normal operation'
10881,456312615,"b""yes. I've forcepushed the fix"""
10881,456313110,"b""and now i'm checking that it's not the same as in previous tx"""
10867,456316057,b'Why this was removed?'
10847,453830893,b'what if we add value to time series which contains many elements? Will it send all of them to browser? '
10847,453831332,b'oh actually we read this to detect if we have any item. Can we check this in more effective way?'
10847,453833291,b'those 3 functions are bad. Each invocation produces own observable and we calculate this few times. Move this to class field. '
10847,453833364,b'see note above'
10847,453833424,b'see note above'
10847,453834641,b'$data.Id -> Id'
10847,453834737,b'same here $data is not needed'
10847,453835833,"b""text: Tag || 'None'"""
10847,453836409,"b'please add if binding - visible still renders its children, right?'"
10847,453836509,b'this is general rule for each section. '
10847,453837062,"b""I always wonder what's proper casing for this word:\r\nTimeseries\r\nTimeSeries\r\nTime Series? \r\n;-)"""
10847,453837478,b'in your code sometimes you have timeseries and sometimes timeSeries. '
10847,453840372,"b""we should also optimize this, let's skype about this tomorrow. """
10847,453878231,b'done'
10847,453878400,b'done'
10847,453878457,b'done'
10847,453901162,b'I will unify:\r\n\r\n**for text/docs:** \r\n     *   Time Series  => as a title/heading\r\n     *   time series  => inside plain text\r\n     *  Time series => beginning of a sentence\r\n\r\n**for ts code:** \r\n     *  timeSeries => imho\r\n\r\n'
10847,454143465,b'done'
10847,454144754,b'done in all places'
10847,454145163,b'done'
10847,454150684,b'done'
10847,454154146,b'@karmeli87  \r\nCan this method ` _database.DocumentsStorage.TimeSeriesStorage.AppendTimestamp`\r\nbe modified so that it will inform if timeSeries existed and appended -or- whether a new ts was created ?\r\nsimilar to  `_database.DocumentsStorage.CountersStorage.IncrementCounter`\r\n'
10847,454158035,"b'We can, please open an issue for that.\r\nOn a brief look on this PR, it seems that running stuff in debug mode will change the actual time-series, right?'"
10847,454158760,b'I would like to have a test for that'
10847,454167176,b'issue created: https://issues.hibernatingrhinos.com/issue/RavenDB-15367'
10847,454173237,"b""This is only for Debug mode of the patch testing. It's not a hot path so I don't think we need to do anything dedicated here. This is very rare scenario."""
10847,454173767,"b""@karmeli87 \r\nIn Debug mode we _don't_ commit the transaction so it won't modify anything."""
10847,455567054,"b'You can use `Assert.True(cmd.Result.Debug.TryGet(""Actions"", out BlittableJsonReaderObject actions), ""<Actions> section not found"")`'"
10847,455756998,b'done for all places - thanks'
10847,456871845,"b""let's use single variable for that"""
10847,456902826,b'done'
10867,456912168,"b""It isn't needed anymore.\r\nWe don't wait for the database to be online in order to complete the restore operation."""
10892,457138010,b'It can be in `AdminStorageHandler`'
10808,451280683,"b'IIRC Those `tcpConnectionOptions` are already added in `DispatchDatabaseTcpConnection`.\r\nThis is pull replication, meaning the _destination_ opens the tcp connection to the source.'"
10808,454808777,b'This is likely wrong.\r\nBetter to have `LastChangeVector`'
10808,454828418,b'private fields should start with `_`'
10808,454828626,b'notice that everything is uppercased here'
10808,454829094,b'@efratshenhar this is used to identify the batches? '
10808,454838281,b'yes'
10808,454839287,b'@ayende I think it is easier to match between source and destination via etag than CV. Thoughts?'
10808,454839778,b'@efratshenhar it probably requires Studio work in Replication Stats view (Ongoing Stats view)?'
10808,454840686,"b""that may be the case, sure, but the code we have now is not going to work.\r\nIt is saying, give me the first cv's etag. What if we have multiple nodes?"""
10808,454845224,b'So maybe it would be easier via some internal identifier?\r\n\r\nE.g.\r\n```\r\nprivate static long _batchId = 1;\r\n\r\npublic static long GetNextBatchId()\r\n{\r\n    return Interlocked.Increment(ref _batchId);\r\n}\r\n```'
10808,454846313,b'How would that help the user seeing this? What does this corrleates to?'
10808,454846998,b'on A node I will see an Outgoing batch with Id 10 and on B node in Incoming I can identify it easily.'
10808,454847856,"b""This is to see where you are on the subscription. No? In that case, etag isn't meaningful.\r\nAnd an arbitrary integer won't help, you can't compare between nodes, there is only one node in subscription.\r\nOr did I miss something?"""
10808,454848382,"b'This one is in subscription, you are correct, but the original task (in YT) was to match replication batches'"
10808,454849184,"b'For replication, the etag is already handled, so no issue. \r\nFor subscription, I wonder if we even need it, we already report the last change vector, IIRC'"
10808,454858361,b'> @efratshenhar it probably requires Studio work in Replication Stats view (Ongoing Stats view)?\r\n\r\nWe can see the Etag but not the bytes sent/received '
10890,457129948,b'Move this to 4.2 and do the conversion inside the SNMP endpoint'
10890,457146497,b'done'
10885,456891791,"b'This is a huge change from the previous value, no?'"
10885,456892378,"b'Yes, previous value was 12 hours if no timeout was provided.\r\nSo each request without timeout would be hang for 12 hours.\r\nThis is to prevent cases like firewall dropped the packet and no-one knows about it..\r\n'"
10885,456892708,b'Note that this is a server-side only and used for the request executor in few places:\r\n- Replication\r\n- SecretKeyHandler\r\n- RavenETL'
10885,457140004,"b""The question is for what this RequestExecutor is used, because the implication of this is also that you cannot push/receive data for more that 15s. This is why it was changed to 12h in the first place and the idea was to 'cut down' the timeout on those operations that needed it only. We already did that in the past and implications were severe. ETL stopped working, etc. At this point I do not see a way to set it globally to such a low number, needs to be done individually for all needed commands."""
10884,457141865,b'Why the title starts from lower letter here? Also it is hard to know from the title what policy runner it is?'
10884,457151006,b'fixed the latter.\r\nThere only one runner per database'
10886,456911434,b'Can we do this in only in `StudioCollectionsHandler.cs` and not here?'
10886,457128550,b'done'
10886,457149721,b'Can this be done in `WriteDocument`?'
10886,457183150,b'done'
10900,457345393,"b""let's have it in try/catch and skip on error"""
10900,457391684,b'https://github.com/ravendb/ravendb/pull/10903'
10903,457393755,"b'should be `_logger.Info($""skipped \'{item.Key}\'. "", e);`'"
10920,459436608,b'Where is the NRE fix?'
10920,459487275,"b'Path.Combine was messing up the paths if we restore destination is cloud storage, if the data not found on cloud storage we return null'"
10924,459538981,b'Should ignore and then return false? Is this a case of double negation?'
10924,459539204,b'Should probably remove this'
10924,459546728,b'`IgnoreProcessorAffinityChanges` is static and used only for the tests not to change the affinity of the process.\r\nAs far as I understand we always want to skip setting the affinity in the test.'
10909,459967868,b'This is the fix'
10928,460481190,b'We need this also on a full snapshot'
10928,460491061,"b'which is exactly this line:\r\n```\r\nif (fullSnapshot)\r\n          await OnValueChanges(lastIncludedIndex, nameof(PutLicenseCommand));\r\n```\r\n\r\ntake a look here:\r\nhttps://github.com/ravendb/ravendb/blob/aa68edc645e3951ff432f630ca54f43c91df86f3/src/Raven.Server/ServerWide/ServerStore.cs#L1048'"
10908,458142061,"b'I added only this endpoint and not ""/admin/configuration/settings"" endpoint because the second defined as `AuthorizationStatus.ClusterAdmin` and the higher `AuthorizationStatus` of the ""debug-info"" endpoint is `AuthorizationStatus.Operator`.\r\nBut actually it seems (for now at least) that the ""/admin/configuration/settings"" endpoint contains less information.\r\nIn the current implementation, the user will not be possible to get the settings if there are no databases but will get duplicate of the server setting on any database.\r\nIn addition, ""/databases/*/debug/info-package"" endpoint defined as `AuthorizationStatus.ValidUser` so should we ignore the setting in the debug package if the user has less permission then `AuthorizationStatus.DatabaseAdmin` as ""/databases/*/admin/configuration/settings"" defined?\r\n'"
10908,458143604,"b'In the server configuration, the `ServerWideSettings` is always null'"
10908,458144000,b'https://github.com/ravendb/ravendb/pull/10908/files#r458143604'
10916,460495219,"b""We weren't waiting before, because it might take a lot of time and stall the loading of other databases"""
10916,460495803,b'Do we need to block it here to prevent the concurrent access?\r\nMaybe if lock not taking try to take it again down the line?'
10916,460496653,"b'We must return if the lock was taken or not, and release it only if it was taken.'"
10916,460498898,b'This results in missing indexes after the database started.'
10916,460499206,b'it is always taken unless there is a database shutdown'
10916,460501389,b'what do u mean by missing indexes? on the database record?'
10916,460501816,b'You can take the `_clusterLocker` in `NotifyFeaturesAboutXXX` methods as well and they can compete with each other..'
10916,460509536,b'This is how it used to work. I just unified both usages.'
10916,460509700,"b""The database was restored (smuggler). We start the database and the indexes aren't started (yet).\r\nYou are right, we cannot wait here. I'll fix the test."""
10916,460509841,b'We must wait since this can cause concurrent access to the indexes.'
10919,459904831,"b""This is unreachable. You are already handling 'Faulted' few lines up."""
10915,458746245,b'Need to expose it via an endpoint and limit it with `from` and `to`'
10915,459319216,b'`required: false`'
10915,459321334,"b""Let's have `SegmentSummary` to implement `IDynamicJson`.\r\nand use\r\n```\r\nusing (var writer = new BlittableJsonTextWriter(context, ResponseBodyStream()))\r\n                {\r\n                    context.Write(writer, summery.ToJson());\r\n                }\r\n```"""
10915,459351926,"b""shouldn't be `seg.Segment` as well?"""
10915,459352422,"b""there might be more debug endpoints.\r\nlet's call this one:\r\n`/databases/*/timeseries/debug/segments-summery`"""
10915,459353669,"b'this will happened in `SegmentsOrValues`, no?'"
10915,459353993,b'The `ToList` is not needed.'
10915,460737541,b'It looks like your method landed in between other attribute and ConfigTimeSeriesNames'
10915,460737640,b'typo: summery'
10915,460738033,"b""Let's avoid spaces in properties. Change to `Results` ?"""
10915,460739076,b'public fields should start from Uppercase'
10915,460739321,b'typo: Segmants'
10915,460744682,b'JSON fields should not be lowercased'
10793,454910338,"b'If I requested a range that has no entries, we will not put that into the cache, right? why?\r\n'"
10793,454912375,b'Would it make sense to this on the server-side? and spare the extra call?'
10793,454914109,b'Why do I care about the page-size here?'
10793,454916725,"b""1. Can't the server handle this case and return the wanted results ?\r\n2. If this call is indeed necessary, we need to collect all ranges and use `GetMultipleTimeSeriesOperation`."""
10793,454920610,"b""only when start is more then 0 because we can't know if we have entries when start will be 0"""
10793,454928431,"b'but we can know that on the server when returning the results, and change the `From` accordingly.'"
10793,454930781,"b""Also to consider is that if I'm doing the same request twice, I should go only once to the server.\r\nBut if I have `start` in my request, will that make me for the same request go twice to the server?"""
10793,454973591,"b""If we have in cache range 1-5 with 3 entries and we ask for range 1-7 with page size 3 so we don't care that the range is bigger then what we have because we have all the results we need  """
10793,460797213,"b'start and pageSize should be done just before the return after all other filtering (start first, then pageSize)'"
10793,460800435,b'Can GetTimeSeriesRange return empty result when pageSize is 0?'
10793,460831088,b'yes'
10921,459373045,b'do we need vargs here? + remove space before `(`'
10921,459373774,b'missing ;'
10921,459374230,b'TODO'
10921,459374865,"b'move to rollupDataModel, create function getValues(): number[] { }'"
10921,459375158,b'result.push(...item.getValues())'
10921,459375704,b'TODO'
10921,459376407,b'put in global stylesheet'
10921,459377284,b'try to avoid those customizations'
10921,459464321,b'done'
10921,459477405,b'done'
10921,459479460,b'done'
10921,459480389,"b'imho seems quite convenient to use _...values_ here\r\nconstructor is called once with data and once without, \r\nsaves passing an empty object, or some boolean param, or explicitly passing all 6 params'"
10921,459496976,b'done'
10921,459534121,b'done - removed all \r\n'
10921,459808839,b'done - refactored'
10921,460732014,b'remove space before :'
10921,460733661,b'do we need this one liner function? \r\n\r\nI think we can simply do: result.push(...item.getValues());'
10921,460733919,b'remove space'
10921,460734076,b'remove space'
10921,460735184,b'please avoid adding spaces at the end of line. \r\n\r\nMaybe you should use shortcuts for deleting entire lines like ctrl + shift + d.'
10921,460969930,b'done + fixed spaces'
10935,461022280,b'do we need public in interfaces? '
10935,461023732,b'semicolons at the end of line.'
10935,461023892,b'wrong indent'
10935,461024468,b'don;t we already have test for that ?'
10935,461040504,b'you changed processed to total. Is it breaking change? @ppekrol ?'
10935,461049588,b'removed'
10935,461049894,b'right - done'
10935,461051054,"b""1.  fixed indentation\r\n2.  I didn't see a test with bulk insert for all 4 types, so I added\r\n"""
10935,461332136,"b""`Processed` didn't come from `IOperationProgress` so that could be fine. Although can it break binary compatibility?"""
10935,461361780,b'Do we need this interface?'
10935,461362034,b'You cannot remove that field. You can mark it as obsolete and set the value from DocumentsProcessed in it instead.'
10935,461403498,b'Can do without it.\r\nI used in 2 places: ` class BulkInsertProgress` & `class BulkOperationResult`\r\n@ppekrol  should I remove it?'
10935,461404711,"b""Yeah, let's remove it."""
10935,461422821,"b""done\r\n1. removed this interface\r\n2. made 'Processed' property obsolete as suggested"""
10935,461430050,b'done'
10945,462053152,"b'Using a read-only HttpClient might be a problem, since it will fail to handle DNS changes\r\nhttps://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests\r\n\r\n(We address this issue in the client as well by replacing the HttpClient upon some failures)'"
10945,462096017,"b'We are not using MS DI, so using HttpClientFactory might not be a good idea. But we can use one HttpClient per StorageClient instance. Should be more than enough.'"
10648,434047374,"b""I know it isn't the case here, but we need to be careful here not to pass any command that contain blittables.\r\nMaybe in debug we should use the `ContainsBlittableObject` extension."""
10648,434048959,b'This is obsolete now?'
10648,434059030,b'Do we want to do the dispose in parallel?'
10648,434063738,b'Nice! one definition opens 2 independent connections.'
10648,434334513,b'Do we need that?'
10648,434336289,b'Hmm we will have the same `TaskId` for both. \r\nWonder if this might be a problem..'
10648,434339233,"b'We need also to remove all the certs from the `ReplicationCertificatesSchema` table, once the database record is deleted.'"
10648,434345319,"b""Don't we need to use the overload with `prefix`? we might iterate a lot here, no?"""
10648,434347251,b'What about non-english chars? like `\xc3\x96` and `\xc3\xb6`?'
10648,434348509,b'Is this something that will work globally?'
10648,434350110,"b""Yes, we need to remove it, but we can't for backward compatability reasons."""
10648,434353501,b'Yes'
10648,434354262,"b""We aren't doing that on dispose of the loader, I don't think this is something we should worry about"""
10648,434354359,"b'Yes, that make things a lot easier for the user.'"
10648,434354443,b'No'
10648,434354732,"b'They _are_ the same task, after all. Two sides of the same coin. '"
10648,434354885,b'Good point'
10648,434355788,"b'Oh, yes, we are scanning other things as well.'"
10648,434356512,"b'Check the condition on the `while`, we already filtered these.'"
10648,434356816,b'That is something that I expect you to define using an env variable.\r\nShould be removed here.'
10648,461338482,b'This is a public field - is it allowed to modify it and set to `PullReplicationMode.Incoming`?'
10648,461341305,"b""What if someone doesn't follow our default conventions and has docs with customized separators?"""
10648,461341664,b'forgot -> forget'
10648,461347457,b'We have some inconsistency in those strings - ` for: ` vs `for `'
10648,461347912,b'`NoCase` means ignore case?'
10648,461349430,b'Can we have a bit more meaningful message here?'
10648,461353241,b'Can we revert to `latest`?'
10648,462348474,"b'What do you mean, modify it? It is only something that you can manipulate using the commands on the server.\r\nBut yes, we expect users that setup incoming replication to set it.'"
10648,462349358,b'Then they will have to deal with it. Filtered replication is already going to require some attention from the developer anyway.'
10648,462350468,b'fixed'
10648,462350541,b'fixed'
10648,462350583,b'fixed'
10648,462351608,b'fixed'
10648,462351672,b'reverted'
10939,461810168,"b""Why can't we use TimeValue?"""
10939,462136965,"b'`TimeValue` has 2 native units `Seconds` & `Months`\r\nWe can either change from `Seconds` to `MilliSeconds`, but this will break compatibility and limit the max expressed value to 60 days (it is also an `int`)\r\nAdding an additional unit of `Milliseconds` will complicate the code, so we thought that adding `TimeSpan` here is the best solution.'"
10931,460851430,b'do we need all these extensions ?'
10931,460857500,b'I see that in v5.0 we changed it to this:\r\nhttps://github.com/ravendb/ravendb/blob/0c45f188594f7328a139184047a3738a53ba77a0/src/Raven.Client/Documents/Session/InMemoryDocumentSessionOperations.cs#L232-L237'
10931,460866517,"b""Let's check if this passes in 5.0. If yes. Add a test there and close down the issue. Do not want to make that change in 4.2"""
10931,462456983,b'done'
10648,462753042,"b""I thought that `PullReplicationMode.Outgoing` is the only correct value here because it's assigned by default (why not default it to `None`?). But it can be set to `PullReplicationMode.Incoming`, can't it?\r\n```\r\nnew PullReplicationDefinition()\r\n{\r\n  ...\r\n  Mode = PullReplicationMode.Incoming\r\n ...\r\n}\r\n```"""
10648,462753344,"b'OK, But maybe instead of hard coding it we can have those separators configurable?'"
10648,463083442,"b'The idea is that if you already define PullReplication in your code, nothing changes for you.'"
10648,463083590,"b'And yes, you can set to incoming, that is meant to work this way'"
10648,463083948,"b'Not a good idea, I think. That opens up complexities with different configuration up and downstream.'"
10941,464044651,"b""I think we would want to have an identical code to 5.0 here.\r\ncherry-picking will be problematic here, so simply copy-paste?\r\n\r\nnote that in 5.0 we don't check for `LastIncrementalBackup` at all.\r\n@ppekrol thoughts?\r\n\r\n"""
10930,461628459,"b""It might be other type of exception. let's use the `ExceptionDispatcher`."""
10936,461807416,b'Can we avoid LINQ here and use local static method instead (for both of the cases) ?'
10936,462156271,b'Or can we scale it while we are adding the results?'
10936,462279292,b'Scaling while adding is how I would like to go about it.'
10936,462326657,b'done'
10941,464895520,b'Is this code problematic? What case is not covered?'
10930,464908757,b'Why not create an overload for ExceptionDispatcher.Throw to which we are passing the schema and handling that correctly?'
10930,464927769,b'ExceptionDispatcher expect a different format.. we will be handling on unify those here:\r\nhttps://issues.hibernatingrhinos.com/issue/RavenDB-15455'
10941,464929047,b'If we have only full backup'
10962,464892520,b'You need to use `Engine.Date.Construct(date)`'
10961,464956842,"b""Why are you checking the configuration here? Shouldn't we check if we need to preserve the revision on delete? \r\nI think that is in the configuration"""
10961,464961278,"b""We want to delete revision when we delete a document and we don't have revision configuration"""
10961,464962569,"b'Okay, make sense'"
10964,464960141,"b""```suggestion\r\n            HashNumber(state, from.Ticks);\r\n```\r\n\r\nWe already have support for hashing long, so let's use that instead"""
10971,465543341,b'Why are we ignoring the collection field or the id here?'
10971,465547183,b'We already do that 10 lines below for new fields.'
10971,465701998,"b""Ccollection doesn't need to be there but we are removing the id in JsonConverter.ToBlittable and we don't want to mark that as removed"""
10943,462386279,b'Should we expose a `Stream` here as well?'
10943,462535498,"b'Yes, wrote that in the comment above.'"
10971,466307260,b'ok'
10979,466298609,b'Why? There is nothing expensive here that we are trying to save'
10979,466298862,b'How do I set it to null?'
10979,466299459,b'Check if empty (common) before calling LInq'
10979,466299591,"b'Better yet, move the linq statement to the `foreach`'"
10979,466301216,b'this is how it is done for other stuff:\r\nhttps://github.com/ravendb/ravendb/blob/8379818ad7c937cb4393321886749631741074ce/src/Raven.Server/Documents/Indexes/Index.cs#L3591'
10979,466303914,"b""wasn't sure it is safe to do. \r\ndone. """
10979,466305636,"b'I think one way is from the `settings.json` to do:\r\n```\r\n""Indexing.MangedAllocationsBatchLimitInMb"":null\r\n```\r\n'"
10979,466306895,"b""Let's just init all of that normally in the ctor"""
10979,466315929,"b""we don't have the configuration in the ctor\r\nI will read it directly from the config `Configuration.MangedAllocationsBatchLimit`"""
10979,466389781,b'typo'
10979,466389839,b'typo'
10979,466390715,"b""ToString on 'Configuration.MangedAllocationsBatchLimit.Value' and 'diff' yields human readable string?"""
10979,466393818,b'Does it work like taht or it will switch to 512?'
10979,466399731,"b'yes, those are `Size`.'"
10979,466404789,b'The description needs to mention that this is about memory _increase_ of managed allocations. I realized that after I saw the implementation where you calculate `diff`'
10979,466407452,"b""Why do you think `512` is the golden mean? I think that will drastically reduce the batch sizes for those who have large instances. \r\n\r\nI'm for limiting it but I have some doubts regarding the default value. Why not to limit the batch size (number of docs) or indexing batch size by default instead?"""
10979,466464738,"b""It isn't memory increase, we are allowing up to 512MB of allocations before closing the batch in this thread"""
10979,466465079,b'The issue is that we saw a customer that had a LOT of allocations in the index.\r\nThat meant that we started seeing GC pauses as a result and the cluster become unstable.'
10979,466839865,"b'What do you think about the following description to make it clear that it\'s about allocations in a single batch:\r\n\r\n""Managed allocations limit in an indexing batch after which the batch will complete and an index will continue by starting a new one""'"
10979,466841622,"b""I understand the reasoning of limiting that and I'm for it. But I have some doubts that 512 is too low. Especially on stronger machines.\r\n\r\nAs I know @karmeli87 talked to @ppekrol yesterday and there was an idea of setting this to `null` by default and introducing a new performance hint where we could explain the pros and cons of large indexing batches and point to 3 options that we have so a user can limit an indexing batch size."""
10979,466904704,"b'I not in favor for additional toggles here. \r\nI will run the indexing benchmark + SO import, so we will have some numbers around this change.'"
10979,466905115,b'done'
10979,466922232,b'At least we should put it as a separate position in indexing performance batch stats (and expose it in the Studio) so it will be easier to trace down.'
10979,466941756,"b'I agree that we want to see that in the stats.\r\nTake into account that we also have to deal with multiple indexes at the same time here.\r\nSo the 512MB limit is per index, not global.\r\n\r\nThat said, the issue is that we want to avoid accumulating garbage during indexing. Because we want to reduce the amount of GC pauses.'"
10979,467546005,b'So I ran the indexing benchmark and it is too small to show any difference. So I used the SO dump + indexes.\r\nImported all users and then deployed the indexes (only 2 out of 6 indexes are relevant)\r\n\r\nwith `null` - 3:01 min\r\nwith `512MB` - 5:30 min\r\n\r\nran it few time (on my machine) and got more or less same results as above.\r\nI guess those results are expected. '
10979,467569090,"b""How expensive is: `GC.GetAllocatedBytesForCurrentThread()`?\r\nThis is called per each document that we index.\r\nDon't we have this number from here:\r\nhttps://github.com/ravendb/ravendb/blob/3ad961e29b41eda13444a9d5d34c4491966a74c6/src/Raven.Server/Documents/Indexes/Index.cs#L3821"""
10979,467569332,b'Can this number be calculated on startup based on the total memory and the number of cores?'
10979,467570397,"b'The problem is ""How many objects do you have"", we might have enough memory to keep 10M objects but this will cause long GC pauses, which we want to avoid.\r\n2GB is some sort of indication that this batch has generated too many objects and should be closed.'"
10979,467570539,"b""we can adjust this number maybe by the CPU clock speed, but I'm sure we don't want to go there :-)"""
10979,467570747,"b'This is pretty light weighted and was requested by oren few years ago ;)\r\n\r\nIt is not about the memory, it is about the number of objects.'"
10979,467707401,"b""We don't want to go there, yes.\r\nThe issue is that we want to limit the amount of _garbage_ we have, not to limit memory usage.\r\nWe care about GC latency more than anything else."""
10979,467726314,b'ManagedAllocationsBatchLimitInMb => ManagedAllocationsBatchSizeLimitInMb'
10979,467731714,b'600?'
10979,467731946,b'@karmeli87 ?'
10979,467732286,b'Is this displayed in the Studio?'
10979,467732494,b'Can we do it every 100 or 1000 items? Not on every document?'
10979,467739024,b'done'
10979,467739200,b'done'
10979,467739959,"b'it is not displayed, but now it should be exposed to the studio. '"
10904,462107844,"b""Check how it is done in CopyAttachmentCommandData\r\nThe property is called 'DestinationId'"""
10904,462111305,"b'Instead of materialize all of the results at once, we can directly append them.\r\nshould be something like `AppendTimestamp(context, cmd.Id, collection, name, reader.AllValues())`'"
10904,467893965,"b""We don't need the change vector here, so please remove it from the ctor as well"""
10904,467897691,b'need to handle the `DeferInternal` method as well'
10904,467898300,b'you should use the CV from the `AppendTimestamp` result'
10904,467901646,"b""make this internal, currently we don't want to expose this to user."""
10991,468547435,b'How moving the context allocation here fixes the infinite loop? We open the transaction on each iteration - that should be sufficient/'
10991,468668062,"b'Two issues:\r\n- Infinite loop as long as the relevant indexes are stale and throwOnTimeout is false, here:\r\nhttps://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/Documents/Handlers/BatchHandler.cs#L365\r\n- If we have a long timeout, the memory allocations continue to grow'"
10991,469026091,"b""So the fix for the infinite loop is not here but it was the first commit - https://github.com/ravendb/ravendb/pull/10991/commits/50e4b7e1ec4914317ab23dd929e5057485ba0cc0. Now it's clear. \r\n\r\nWhy memory allocations continue to grow - don't we reuse already allocated memory in a given context?"""
10953,463535137,"b""Let's mark all of the fields as readonly and introduce a ctor with `Parameters` class as an argument."""
10953,463535475,b'1. Why do we need it?\r\n2. Should we mark error: true in Obsolete?'
10953,463536534,b'internal?'
10953,463536778,b'internal?'
10953,463536825,b'private'
10953,463537007,b'internal'
10953,463537400,b'Why do we need this?'
10953,463537540,b'Should rename to `ReplicationHubAccessResult`'
10953,463537712,"b""Should rename to 'GetReplicationHubAccessOperation`"""
10953,463537804,b'private'
10953,463537900,b'is this mandatory? should we check for null or whitespace?'
10953,463538129,b'can we move all of those to separate files?'
10953,463538267,b'can those parameters be null/whitespace?'
10953,463538302,b'private'
10953,463538737,"b'If we want to do this this way, then maybe it would be better to introduce ReplicationHubNotFoundException?'"
10953,463538901,b'Can those be null/whitespace?'
10953,463538953,b'private'
10953,463539374,b'Need to remember to update Studio dialog accordingly. cc @Danielle9897 '
10953,463539562,b'switch to property?'
10953,463539899,b'What is the security impact of this when database will not inherit? cc @iftahbe '
10953,463540394,b'can we dispose that record?'
10953,463540798,b'hub -> name?'
10953,463540878,b'hub -> name?'
10953,463541237,b'why do we need this?'
10953,463552164,b'remove?'
10953,463553670,b'51_000'
10953,463553689,b'51_000'
10953,463553711,b'51_000'
10953,463554521,"b""Shouldn't we use command.ToJson?"""
10953,463555098,b'revert'
10953,463556771,b'we are not registering certificate for deletion?'
10953,463557426,"b""Do we want that? Shouldn't we migrate data?"""
10953,463558447,b'Need also fill it in `EnsureProcessed`'
10953,463559571,b'it is HubDefinitionName or HubName actually?'
10953,463560635,b'Are we using that somewhere in database context now?'
10953,464106018,b'Bas64 => Base64 ?'
10953,464283995,b'Can there be a scenario where I want block everything? (temporary?)'
10953,464297394,"b""So if I'm adding a new cert to the list, this will break all running connections?  not sure it is nice on a large scale"""
10953,464302288,b'Is this correct? you are modifying while iterating and changing the `i`.\r\nyou probably will skip some `externalReplication` at the end.'
10953,464308984,b'what about `BulkRegisterReplicationHubAccessCommand` ?'
10953,464311296,b'not sure if it is okay to remove from list while iterating.'
10953,464359673,"b""Should the default Mode be '**None**' ?"""
10953,464363461,"b""`PullReplicationMode.Incoming / Outgoing` relates to the **direction** the data flows (To or From the hub)\r\n'Incoming' & 'Outgoing' relate to **paths** that task is allowed to read from / write to\r\n\r\nIn order not to confuse, can we rename here to:\r\n```\r\npublic string[] Incoming => WritePaths \r\npublic string[] Outgoing => ReadPaths\r\n```"""
10953,464422072,"b""Backward compatability, mostly. \r\nI don't want to mark it as error, users may be using this and I don't want to break their compilation"""
10953,464442203,"b""I did that, but I think that this doesn't come out nicely."""
10953,464446488,b'They are also all mutable and changed on the fly by the server.'
10953,464446964,b'done'
10953,464446994,b'done\r\n'
10953,464447134,b'done'
10953,464447773,b'So caller will know how many items we skipped in the list.'
10953,464448168,b'I removed it.'
10953,464448296,b'done'
10953,464448584,b'done'
10953,464448831,b'done'
10953,464449021,b'yes'
10953,464449421,b'done'
10953,464450056,b'done'
10953,464450955,b'done'
10953,464452856,b'done'
10953,464453060,b'done'
10953,464453148,b'done'
10953,464453717,b'done'
10953,464454190,"b'Zero issue, this is only ever checked on server level.\r\nHowever, if we define it as an env variable, this mess things up for us when creating databases because we have duplicate def'"
10953,464454867,"b""Done, but note that it doesn't matter, this is already cleared when we dispose the context."""
10953,464455844,b'done'
10953,464455899,b'done'
10953,464455946,b'Removed'
10953,464456491,b'Not there any longer'
10953,464457621,b'done'
10953,464457689,b'done'
10953,464457737,b'done'
10953,464458685,"b'No, they are not the same object, we are only saving some of the propertioes'"
10953,464458770,b'done'
10953,464459345,"b'No, I do that intentionally. To speed up tests, we preserve the test certificate for 24 hours'"
10953,464460880,"b""I think you can't make them read-only because IIRC the serializer doesn't support it"""
10953,464461516,"b'That gets quite complex, unfortunately. Easier to just maintain compatability'"
10953,464462304,b'done'
10953,464463991,"b'Yes, fixed'"
10953,464464143,b'Yes'
10953,464464331,"b'Sure, set the allowed path to a guid, that would do it.'"
10953,464464943,"b'This is when you update the _hub_ itself, not adding / removing / updating a cert'"
10953,464465248,"b'Yes, that is intentional, note that we are _adding_ an item to the list, the `i+=1` is the skip the one we just added'"
10953,464466198,b'Done'
10953,464466763,"b'See the next line, we `break` immediately afterward, no issue'"
10953,464467177,"b'No, we want to be backward compatible'"
10953,464467924,b'done'
10953,464468181,"b'but the ` externalReplications.Count` in the for loop is already fixed.. and you are inserting that item in the middle, so you will not go over the last item'"
10953,464468826,"b'Cannot do that, used in `out` variable.'"
10953,464471242,b'`i < externalReplications.Count`  is evaluated every single loop run'
10953,464520239,"b'For consistency, is it possible to have here also `AllowedWritePaths `& `AllowedReadPaths `?'"
10953,464899063,b'It looks like the problem is somewhere else then. This is clearly not a database item. Maybe revert it and create a separate issue for investigation?'
10953,464903178,b'Is this correct?'
10953,464904351,b'public?'
10953,468562700,b'hubName?'
10953,468562782,b'hubName?'
10953,468563844,b'hubName'
10953,468564235,b'hubName'
10953,468564297,b'hubName'
10953,468570216,b'It was not fixed?'
10953,468570307,b'HubName?'
10991,469063553,b'Okay. This is because of https://issues.hibernatingrhinos.com/issue/RavenDB-13589'
10993,469146042,b'CanReconnect'
11005,470543500,"b""I don't think that there is a need for this. After all, you can _already_ do recursion natively in js, no need to jump through hoops."""
11005,470548177,"b'It makes us consistent with C# API, also we do not require user to write that code + code there is not that straight-forward.'"
10982,467720171,b'private'
10982,467722578,"b""I don ot like this change. You should use 'CalculateIndexEtag' directly. IIRC the order of opened transactions heree mattered. """
10982,467722991,"b""This is incorrect. QueryOperationContext operates on both Server-Storage and Database-Storage transactions. IIRC there is a method there 'AreTransactionsOpened' to check that."""
10982,467723020,b'`d` ?'
10982,467821168,b'Changed to use that'
10982,467821331,b'done'
11002,470579923,"b""Shouldn't this only be called when QueryOperation is `null`? Check `InitSync` and `InitAsync` in DocumentQuery."""
11007,471121776,b'`dbl` can be removed.'
11007,471244151,b'done'
10980,470733899,"b""This will return null if it isn't there? If so, may want to add that to the comments."""
10980,470733932,"b""This will return null if it isn't there? If so, may want to add that to the comments."""
10980,470734701,"b""This comment isn't accurate, no? The rule is based on the provided `projectionBehavior`"""
10980,470734769,b'Same'
10980,471512260,b'Done.'
10980,471512294,b'Done.'
10980,471512331,b'Done.'
10980,471512363,b'Done.'
11008,471143199,"b""I don't know if performance-wise it is matter, but the `quotient` can be computed once."""
11008,471143607,b'Why avg/count has special treatment? '
11008,471145114,"b'does `yA.Length != yB.Length` possible, can we add an assert here?'"
11008,471146229,b'Why not `gapData.PreviousStats = aggStates` ?'
11008,471233437,b'Why not to fill the gaps before `AddTimeSeriesResult`? we keep the track of previous stats and here we can check and fill if needed.'
11008,471234893,"b""All tests here have a single value per bucket. \r\nLet's check what happened with several values within a bucket."""
11008,471259858,"b'```suggestion\r\n            _groupBy = $"" group by \'{timePeriod}\' {with}"";\r\n```'"
11008,471366579,b'done'
11008,471366970,"b""in count aggregation we keep the values in `_count`\r\nin avg we sum up the values in `_values` and use `_count` to comupte the average\r\n`Count` is always a part of the result. if `aggStats` doesn't contain a `Count` aggregation, we use `aggStats[0]._count` \r\nin all other aggregations `_count` is not needed"""
11008,471367557,"b""It's not possible but I added an assert to be safe"""
11008,471368007,b'because then `PreviousStats._values` and `aggStats._values` will be pointing to the same place'
11008,471368461,b'added a test with several values within a bucket'
11008,471369204,b'what do you mean? we fill the gaps before `AddTimeSeriesResult`'
11008,471961345,b'To mach other parts of the API rename this to `ITimeSeriesAggregationOperations`'
11008,472162087,b'done'
11010,471435627,b'change text to: `Simulated TCP failure`'
11015,472094944,b'Do we need to deploy whole sample data to check this? It takes time.'
11024,472926618,"b'This is confusing, better to run the sum operation again on the `catch` clause and use that there'"
10659,436357800,b'When / how is this going to be handled?'
10659,436358826,b'*can* this return null? I thought it would return empty list?'
10659,436358883,"b'This is already done, no? I mean, the `timeSeries` enumerator already do that'"
10659,436359030,b'Why do you have this check?\r\nA time series can appear both before and after the document etag.'
10659,436359424,"b'```suggestion\r\n                    $""{Transformation.TimeSeriesTransformation.AddTimeSeries.Name} method expects to get the reference to a timeseries while it got argument of \'{timeSeriesReference.Type}\' type"";\r\n```'"
10659,436511236,"b""It doesn't seem so - under the covers `new TimeSeriesReader()` is called"""
10659,436513753,b'I see that you have TODO to check this - but just to be sure - will we have the same behavior like for counters? I mean that those TS will be send together with document'
10659,436514319,"b""Please do so only after you'll be sure that we have exactly the same behavior for time series like for counters."""
10659,436531256,b'If the time-series does not exist so `LoadTimeSeries` will return `null` (not in the current implementation).\r\nI thought to return `null` also if the time-series does exist but there are no entries in the range.'
10659,436532196,"b""I'm not sure that I follow - where do we run the script to know if a doc is loaded to the same collection? `_script.IsLoadedToDefaultCollection` call doesn't _run_ the script. Can you please elaborate?"""
10659,436540020,b'This is https://issues.hibernatingrhinos.com/issue/RavenDB-15083 right?'
10659,436542260,"b'Can we use ""behavior"" instead of ""behaviour"" for consistency with the naming that we already have?'"
10659,436544775,"b""it won't work for `froM` for example. why not to just use `StringComparer.OrdinalIgnoreCase`?"""
10659,436545502,"b""if we add something in the future then we'll have to add a handling for that here anyway. I don't see the point to silently ignore the value here"""
10659,436545936,b'+1\r\n\r\nI think the returned object deserves a dedicated class'
10659,436546732,b'Where is it used?'
10659,436554950,"b""Please check Oren's answer - https://issues.hibernatingrhinos.com/issue/RavenDB-15070#focus=streamItem-67-48099.0-0"""
10659,436574287,"b""`_script.IsLoadedToDefaultCollection` just check if there is a possibility to load the doc to the same collection (check for the existence of loadTo<collection> in the script and compare `collection` to item collection).\r\nBut if the document is not actually loaded because of a condition.\r\nLike this for example:\r\n```\r\nif(this.Name === 'SomeName')\r\n    return;\r\nvar person = loadToUsers(this);\r\n```\r\nWe will keep trying to send time-series any time they change (I think we do that in `counters` as well).\r\nThis can be a big overhead if most of the documents are not loaded (or not loaded to the same collection).\r\nI added `_currentRun.IsDocumentLoadedToSameCollection(item.DocumentId)` in `EtlItemType.Document` case but I need the script to run to use this function.\r\nI don't want to actually run the script so the doc will not reload over and over for any time-series change but maybe a dry run? I tried to play with it a little bit but I think this requires a big change in the code (but not sure) so I left the comment.\r\n"""
10659,436574585,b'yes'
10659,436577845,b'in `RavenEtlDocumentTransformer.Transform` in `EtlItemType.TimeSeries` case'
10659,436612068,"b""This sounds like non trivial change so its a bit risky. It's shouldn't be part of adding TS to ETL for sure. Please create a separate ticket for that."""
10659,438111831,b'https://issues.hibernatingrhinos.com/issue/RavenDB-15147'
10659,451978097,"b""Why `IList` here for `appends` but `List` for removals? It's our public API let's try to be keep consistency"""
10659,451979256,"b""Don't we need to keep that info per node? So shouldn't it be `Dicitonary<string,  HashSet<string>>` ? Also this is needed for specific time series case - a comment here explaining why do we need it would be very handy for someone looking at that in the future."""
10659,451980566,"b""I see only one usage of this class and it's only in tests. I don't see why we would like to add it to the client assembly given that we don't have any usages of it there. Let's move it to `Tests.Infrastructure` project."""
10659,451981707,"b""Can we mark that `merged` is modified inside `ExtractXXXX` methods by adding `ref` to that parameter? I know it will be working the same but it's more explicit that items are added to it under the covers."""
10659,451987209,b'Please create a ticket for that that and remove TODO comment here'
10659,451988045,b'Why a test doc is always assigned to `SkippedTimeSeriesDocs` during the script test?'
10659,451988451,b'Why do we need do add Guid?'
10659,451989563,"b""Maybe let's put move this to a dedicated method called `CreateLoadTimeSeriesReference()`. And probably same for attachment references and others"""
10659,451992119,"b""Is is ok to remove it from state? What happens if we ETL batch fails afterwards? \r\n\r\nWe need to make sure it won't be persisted and we won't hold this state instance in next batches."""
10659,451992665,b'Is there any ticket for that?'
10659,451993694,"b""Same comment as above. I don't think any TODO should be merged to the master (v5.0) branch. If this is something we want to change / improve in the future let's create an issue for that and remove TODO comment here. This way we won't forget about it."""
10659,451994147,b'Do we have any different behavior on server side if `TimeSeriesBatchCommandData.FromEtl` is `true`?'
10659,452005549,b'Why do we have this?'
10659,452010162,"b""Try catch on entire test method looks a bit weird. I understand you want to include some additional info but is it really needed? That's handy for debugging a problem with failing test but I think it's more important to immediately see which assertion has failed."""
10659,452013724,"b""I don't like this try catch on entire method body. Can we do better? If we have `shouldSuccess: false` then shouldn't it throw on _specific_ assert or operation. I think we should handle it there instead of generic `try / catch`"""
10659,452014240,"b""We need to handle it better - it's not a good practice to `try / catch` entire test"""
10659,452015741,b'Why can we have more that 1 error?'
10659,452015865,b'Why it changed?'
10659,452022327,b'Only because those are the types of `TimeSeriesOperation`.\r\nI will change `removals` to `IList` as well'
10659,452112891,b'So it will process the time-series as well'
10659,452166893,"b'If the user is calling `loadAttachment` twice to the same attachment.\r\n```\r\nvar user = loadToUsers(this);\r\nuser.addAttachment(loadAttachment(\'photo\'));\r\nvar person = loadToPeople(this);\r\nperson.addAttachment(loadAttachment(\'photo\'));\r\n```\r\n  \r\nThe same `Stream` can\'t be used twice so anyway there is a need to open two separate `Stream`s.\r\nAs it was behaving so far (Before Jint changes) the `loadAttachment` return two different reference so I keep it the same.\r\nBut actually I thought maybe to do A ""Lazy loading"" and return just function/parameters and to relly load later in the `addAttachemt`.\r\nIn this approach, the user can use the same loaded twice \r\n```\r\nvar photo = loadAttachment(\'photo\')\r\nvar user = loadToUsers(this);\r\nuser.addAttachment(photo);\r\nvar person = loadToPeople(this);\r\nperson.addAttachment(photo);\r\n```'"
10659,452183372,b'The `SkippedTimeSeriesDocs` is stored only in the end of the batch in `UpdateEtlProcessStateCommand`'
10659,452221002,b'Now there is - https://issues.hibernatingrhinos.com/issue/RavenDB-15333'
10659,452235374,"b'Yes, the batch command will not throw if the doc does not exist in the destination'"
10659,452237266,b'To give more time while debugging'
10659,452246538,"b'I found it very helpful. \r\nIf you got failing test without the Etl error you have to rerun the test.\r\nAt best, it will just time-consuming but if the test becomes failing in once a couple of runnings the extra info is very important.\r\nIn the end, the final error includes the exact assert but you right it is not immediately.'"
10659,452811713,b'ok'
10659,452812049,"b'But it it mandatory to set it? If we have `addTimeSeries()` call it should add a time series anyway, right?'"
10659,452812672,"b""It's ok. I was just curious why we need to ensure uniqueness - good catch."""
10659,452812893,b'ok then'
10659,452813129,b'ok'
10659,452814073,"b'ok, I missed `Debugger.IsAttached`'"
10659,452814790,"b'yeah, I understand your point but this is very strange. Can we handle it somehow better? Maybe do something in the base class `EtlTestBase` ?'"
10659,453278874,"b'Yes, I added a check to test no `loadCountersOf<CollectionName>Behavior` defined without a call to load to this collection'"
10659,453279044,"b""Because we don't send the delete doc operation automatically when there is a script.\r\n"""
10659,453301184,b'https://issues.hibernatingrhinos.com/issue/RavenDB-15331'
10659,453301868,"b'If the user define `loadBehaviorloadTimeSeriesOf<CollectionName>Behavior(docId, timeSeriesName)` we will not run it in document change because the decision was to process time-series only on time-series change unless there is skipped doc. So the testScript will not test it.'"
10659,453479682,"b'Then why not `Assert.Equal(4, result.Commands.Count);` ? '"
10659,453480039,"b'So how many errors do we expect? 2 ? If then then why not  `Assert.Equal(2, ... `?'"
10659,453480767,"b'Okay, I see. Makes sense'"
10659,453629818,"b""I don't like tests that test the implementation and demand update on implementation changes.\r\nIf in the future someone will decide to add a check he will need to update this test again.\r\nBut if you prefer I will use `Equal` here."""
10659,453629840,"b""I don't like tests that test the implementation and demand update on implementation changes.\r\nThere are three loads in the script so actually as I see it it will be better to just check for 3 put commands.\r\nBut if you prefer I will use `Equal` here."""
10659,453641131,"b""I prefer to see a failing assertion and fix it once the implementation changes than silently pass an assertion while the original condition is no longer true.\r\n\r\nGiven the example here `result.Commands.Count >= 4` it's very risky because if someone make a mistake and will start sending each ETL command twice then `result.Commands.Count: 8` won't make the test to fail."""
10659,454881081,"b'No, when a node skips time-series while ETL because its document didn\'t replicate yes and then the ETL pass to another node the new node will skip this time-series because it was ""processed"" (skipped) by the first node so the time-series will not be marked as skipped by the new node. So when the new node will get to ETL the document it will see the document time-series was skipped by the first node and so will load the time-series with it.'"
10659,454898448,b'The `merged` is immutable because it is in `using` and so cannot be used as `ref`.\r\nI have couple of solutions to avoid that but none of them is pretty.'
10659,454898970,b'OK. Still a comment explaining why is this collection used for would be very nice.'
10659,454900767,"b""Let's leave it as is then."""
10659,462755118,b'Something wrong happened here - everything is in the single line'
10659,462755938,"b""I don't see any usage of `b`"""
10659,462755994,b'Same for `a`'
10659,462756584,"b""I would put it in `finally`. Effectively it's the same thing in current impl but to underline that his needs to be _always_ called"""
11013,471454524,b'What about failures here? How would you deal with the correlation?'
11013,471454794,"b'Not a good idea, we need to send the request as well to the after callback.\r\nOtherwise, not way to correlate'"
11013,471455104,"b'`BeforeRequest` and `AfterRequest`\r\n\r\nThe `On` prefix is for the invocation method, usually'"
11013,471455443,b'```suggestion\r\n        private class FirstFailCommand : PutDocumentCommand\r\n```'
11013,471462530,"b'We have `OnFailedRequest` so may it worth for consistency?\r\nIn addition, maybe while we have `OnFailedRequest` the `OnAfterRequests` should be `SucceedRequest`?'"
11013,471467897,"b'If the response cannot be null so the user can get it from the response, no?'"
11013,471468082,b'https://github.com/ravendb/ravendb/pull/11013#discussion_r471467897'
11013,471468367,"b'Good idea, yes'"
11013,471470548,"b'So, for ""On"" prefix I will add a property `FailedRequest` to wrap the `OnFailedRequest` and I will remove the ""On"" prefix from the two new. Is it make sense? '"
11013,471473424,"b'We already have `FailedRequest` that is obsolete\r\n```\r\n[Obsolete(""Use OnFailedRequest instead"")]\r\npublic event Action<string, Exception> FailedRequest\r\n```\r\n'"
11013,471473896,"b""All our events start from 'On' so this is fine, but we need to have 'BeforeRequestEventArgs' and 'AfterRequestEventArgs'"""
11013,471474258,"b""We need those also in DocumentStoreBase. Check 'OnFailedRequest' there."""
11013,471525993,b'What about adding the `HttpRequestMessage` to `FailedRequestEventArgs` for correlation too?'
11013,472236176,"b""those aren't actually required. adding/ removing entries from delegate is thread asfe"""
11013,472814980,b'So I will remove it from `OnFailedRequest` as well'
11013,473669782,b'OnBeforeRequest'
11013,473669850,b'OnBeforeRequest'
11013,473669929,b'OnSucceedRequest'
11013,473669983,b'OnSucceedRequest'
11027,473255619,b'Please revert this. This is used only in tests and should be written to console.'
11027,473256883,b'change to `match == false`. This is the form that we use elsewhere.'
11027,473259032,b'nameof'
11027,473267784,b'I would prefer a more generic name like `AfterDatabaseRecordUpdate` or sth like that. Maybe it would be better just to change the name of the `UpdateDatabaseRecord` and handle everything there? I do not like the idea of passing info from one method to another via private fields.\r\n\r\nAlso can we fix formatting?'
11027,473990138,b'We need to separate because the `UpdateDatabaseRecord` may fail (consistently) across nodes.'
11033,474433346,"b""Maybe it is better to use 'IFillFromBlittableJson' or 'IPostJsonDeserialization' ?"""
11034,474436127,"b'When we will have more than 1 backup, and one of them will be in error state, according to the PR description it should not clean anything. Now it will just ignore that one and continue with whatever others had. Is this what we want?'"
11034,474437273,"b""I know that this is unchangeable and the moment, but why this is called 'Internal' ?"""
11034,475200429,"b'LastFullBackupInternal is always updated and used internally (setup next backup timer, idle database)'"
11023,472895584,b'You can take the database name from `RestoreBackupTaskBase.RestoreFromConfiguration`'
11023,472896480,b'Does it download the whole snapshot file?'
11023,472898274,"b'At this point, you already downloaded it, yes. Because you have this opened.'"
11023,472899170,"b'it downloads on [GetZipArchiveForSnapshot](https://github.com/ravendb/ravendb/pull/11023/files#diff-e08d344e1eb26f22609c114ab3008af6R441), this method just sum the files length'"
11023,472900954,b'done'
11023,473270557,b'voronDataDirectory  => restorePath?'
11023,473271233,"b""Logic was previously more complex:\r\n\r\n```\r\n                var baseDataDirectory = ServerStore.Configuration.Core.DataDirectory.FullPath;\r\n\r\n                var destinationPath = string.IsNullOrEmpty(restoreBackup.DataDirectory) == false\r\n                    ? new PathSetting(restoreBackup.DataDirectory, baseDataDirectory).FullPath\r\n                    : RavenConfiguration.GetDataDirectoryPath(ServerStore.Configuration.Core, restoreBackup.DatabaseName, ResourceType.Database);\r\n```\r\n\r\nWe didn't miss something?"""
11023,473271349,b'VoronPathSetting? Why not PathSetting?'
11023,473667187,"b""\r\n\r\n> Logic was previously more complex:\r\n> \r\n> ```\r\n>                 var baseDataDirectory = ServerStore.Configuration.Core.DataDirectory.FullPath;\r\n> \r\n>                 var destinationPath = string.IsNullOrEmpty(restoreBackup.DataDirectory) == false\r\n>                     ? new PathSetting(restoreBackup.DataDirectory, baseDataDirectory).FullPath\r\n>                     : RavenConfiguration.GetDataDirectoryPath(ServerStore.Configuration.Core, restoreBackup.DatabaseName, ResourceType.Database);\r\n> ```\r\n> \r\n> We didn't miss something?\r\n\r\nin `SnapshotRestore` method the restore path is `voronDataDirectory` I dont see any point to use the logic which we had in handler.\r\n\r\n\r\n\r\n> VoronPathSetting? Why not PathSetting?\r\n\r\nthis is what it was I just reorder it https://github.com/ravendb/ravendb/pull/11023/files#diff-e08d344e1eb26f22609c114ab3008af6L483"""
11036,476283306,b'Not sure that this is a good idea.\r\nWhat happened if there were _other_ changes to the document in the meantime?'
11036,476284841,b'What do you mean? Refresh is fetching data as it is from the Server.'
11012,471449835,"b""We already have this method. Use 'GetDocumentsFrom` instead."""
11012,471450428,b'is this used?'
11012,471452532,b'use Constants'
11012,471452659,b'can we define that somewhere and use the constant?'
11012,471452838,b'private?'
11012,471453012,b'formatting?'
11012,471454349,"b'just a side note: if subscription for all docs will be created with filter, then for each document we will execute JS to check if it matches or not. This can cause some performance issues.'"
11012,471454610,b'can we create an entity that would not match the subscription?'
11012,471455986,b'That is used for replication and return the wrong result'
11012,471456110,"b'No, the `_doc` is used.'"
11012,471456550,"b""Pretty much the same rule for all subscriptions.\r\nIn practice, you typically have a single large collection, so that doesn't matter"""
11012,471457516,"b'```\r\npublic IEnumerable<Document> GetDocumentsFrom(DocumentsOperationContext context, long etag, long start, long take, DocumentFields fields = DocumentFields.All)\r\n```\r\n\r\nUse this one.'"
11012,471460084,"b""I'm just saying that there is a significant difference between doing\r\n\r\n```\r\nfrom Employees\r\n```\r\n\r\nand\r\n```\r\nfrom @all_docs where doc.'@metadata'.'@collection' == 'Employees'\r\n```\r\n\r\nwhen it comes to performance. Not only when we are changing something in 'Employees', but also when changing (maybe more often) documents in e.g. 'Logs' collection.\r\n\r\nThis needs to be documented well and should not be advised to do so if working on one collection."""
11012,471469297,"b'Sure, that is a good point. We can do `from @all_docs(Users, Items)` or something like that in the next itme'"
11033,476430245,"b'The problem happens during _serialization_, not deserialization, though.'"
11033,476442776,b'Then maybe we want to do:\r\n```\r\npublic string HubName { get => _hubName ?? (_hubName = HubDefinitionName); set => _hubName = value; }\r\n```\r\n?'
11043,476422771,b'OnBeforeInitialize'
11043,476427157,"b""`The license '<id>' obtained from '<configuration_key>' with expiration date of '<date>' is also expired.`\r\n\r\n`<key> = RavenConfiguration.GetKey()`"""
11033,476469511,b'Why does that matter?'
11033,476673866,"b""Hmm, actually now when I'm thinking about this, it doesn't."""
11012,476681971,b'This is also releasing all disposables (cloned documents). Who is releasing them now?'
11016,472941484,b'internal?'
11016,472941738,b'Please fix those warnings'
11016,472942231,b'Can we avoid having this?'
11016,472942559,b'internal?'
11016,472942927,b'Implement interface explicitly.'
11016,472943220,b'implement interface explicitly'
11016,472944291,"b""Wouldn't those methods cause ambiguity?"""
11016,472944629,b'stats?'
11016,472944663,b'stats?'
11016,472944686,b'stats?'
11016,472945238,b'IAsyncTimeSeriesStreamingBase'
11016,472945758,"b'it looks like we require `T : ITimeSeriesQueryStreamResult, new()` ?'"
11016,472945982,b'escape?'
11016,472946044,b'escape?'
11016,472946850,b'Can we get rid of those warnings?'
11016,472948143,b'nameof?'
11016,472948565,b'Should this endpoint return 404? Are we returning 404 from other endpoints here?'
11016,472950972,b'why we need this? Not sure that I follow what are you doing here?'
11016,472951652,b'Why this property starts with `_` ?'
11016,472951745,"b""What is the 'Key' ?"""
11016,472951974,b'Can we avoid this?'
11016,472952127,b'NotSupportedException'
11016,472972551,"b'check for nulls, etc?'"
11016,472973064,b'What is this?'
11016,473754345,"b'No, since we pass the `T` here to be an explicit type.\r\n```\r\n public partial interface IAdvancedSessionOperations : \r\n        IDocumentsSessionOperations,\r\n        ITimeSeriesSessionStreamOperations<TimeSeriesAggregationResult>,\r\n        ITimeSeriesSessionStreamOperations<TimeSeriesRawResult>,\r\n        ITimeSeriesSessionStreamAggregationResultOperations,\r\n        ITimeSeriesSessionStreamRawResultOperations\r\n    {\r\n\r\n    }\r\n```'"
11016,473755346,b'the name match to what we have in the normal stream.'
11016,473764732,"b""We don't use `nameof` here, all endpoints hard-coded this string.\r\nNot against change it, simply not in this issue :)"""
11016,473766050,b'you are correct.'
11016,473783876,"b'we need to treat the property `""@metadata"":{}` as a document, to have it as `{""@metadata"":{}}` .'"
11016,473788928,"b'It is the magic `Constants.TimeSeries.QueryFunction` prefix, which we return to identify this as TS result.'"
11016,474456378,"b""what if this is null? Shouldn't we change 'where' to ` where T : ITimeSeriesQueryStreamResult, new()` ?"""
11016,474457416,b'Why we need this? You know what you are streaming in the Client API'
11016,475172163,b'This is mainly for backward comp. so 5.1 server will work with 5.0.x client.\r\nthis is also the current format.. not sure if we want to change it.'
11016,475454158,b'pass the params to avoid closure.  '
11047,476671497,b'There are 6 usages for this method. You changed 1 which could mean that for other 5 you just disabled locking. Is this what you wanted? I suggest removing the default value from `underLock` and reviewing other usages.'
11047,476671997,"b""Having it as a required parameter will also help in the future to avoid potential problem. Someone will have to consider what value to put there instead of going with 'defaults'."""
11047,477069620,b'Can we use a regular `lock` to avoid this?'
11047,477071241,"b""you can't use a lock in this code path because you already under it """
11047,477073238,b'A semaphore is not reentrant but the lock is.\r\nhttps://github.com/ravendb/ravendb/blob/a4d8887f76796e9fb83b370c8f1f18a1b3d12bb6/src/Raven.Server/Documents/PeriodicBackup/PeriodicBackup.cs#L14'
11047,477084227,"b'Regular lock might be an issue here, because you need to be sure that we are releasing from the same thread. I would suggest leaving the code as is.'"
11038,476223873,b'I do not see a good reason for changing this. Can we revert?'
11038,476322380,b'done'
11038,477113197,"b""Don't we need to dispose the old data?\r\n\r\n```\r\nusing (var old = parentDocument.Data)\r\n{\r\n    parentDocument.Data = parentDocument.Data.Clone(context);\r\n}\r\n```"""
11038,477115974,b'Move it to this block:\r\n```\r\n            if (ensureStepsProcessed)\r\n            {\r\n                counts.Processed = true;\r\n\r\n                if (counts is SmugglerProgressBase.CountsWithLastEtagAndAttachments countsWithEtagAndAttachments)\r\n                {\r\n                    countsWithEtagAndAttachments.Attachments.Processed = true;\r\n\r\n                    switch (type)\r\n                    {\r\n                        case DatabaseItemType.Documents:\r\n                        case DatabaseItemType.RevisionDocuments:\r\n                            countsWithEtagAndAttachments.Attachments.Skipped = _options.OperateOnTypes.HasFlag(DatabaseItemType.Attachments) == false;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n```'
11038,477167445,b'done'
11038,477170228,b'done'
11050,477498775,"b'@gregolsky when dealing with this rename this to LinuxArm64, in .NET 5 we will have WindowsArm64 as well.'"
11050,478135115,b'ok gotcha'
11059,478910816,"b""Does this handle `User's batch processing logic unhandled exception` policies from https://ravendb.net/docs/article-page/5.0/csharp/client-api/data-subscriptions/consumption/how-to-consume-data-subscription ?"""
11059,478911949,b'Add also event and push through there all unexpected exceptions.'
11059,479736151,b'I will rethrow an appropriate error on serialization error.'
11058,479206184,"b'no need to await, you can return the task, right?'"
11058,479209134,b'implement interface explicitly'
11058,479214952,b'can you wrap this inside a command like we have with other includes?'
11058,479771546,b'done'
11058,479771558,b'done'
11058,479771477,"b'right, done'"
11054,480170414,b'What the heck.... Really?\r\n'
11053,478262747,b'maybe: WithFiltering?'
11053,478263172,b'property with space? Can we avoid that? '
11053,478263453,b'same here'
11053,478265018,b'Should be `TaskIndex`'
11053,478265091,b'typo baset64?'
11053,478266142,b'please assert on length before getting last and previous character.'
11053,478266223,b'missing ;'
11053,478267089,b'?'
11053,478267416,b'?'
11053,478267560,b'why unshift on array not on observable array ?'
11053,478267837,b'can we find item and then call remove? '
11053,478267889,b'same here'
11053,478269264,"b""I think we don't need this comment"""
11053,478298406,b'done'
11053,478298885,b'yes - typo - fixed'
11053,478299467,b'removed'
11053,478306696,b'done'
11053,478306756,b'done'
11053,478312709,b'done - changed to `WithFiltering`'
11053,478320067,b'done'
11053,478326272,b'done'
11053,478334301,b'done'
11053,479278597,b'switch all of those to properties here'
11053,479279496,"b'FYI, OK is a default status code. You do not need to set it.'"
11053,479281181,b'Can we use nameof?\r\n\r\n@karmeli87 this is not standard name that we use for this? What was it? `RaftCommandIndex` ?'
11053,479281513,b'Can we use nameof? Same name issue as above.'
11053,479281716,b'You can remove this.'
11053,479284097,"b""remove '?? 0' from both of those and use .HasValue for validation purposes"""
11053,479284327,b'else if'
11053,479285150,b'Does it break compatibility with e.g. 5.0?\r\nWhy are we not using here nameof?'
11053,479285796,b'Dispose old blittable\r\n```\r\nusing (blittable)\r\n{\r\n    return context.ReadObject(blittable...);\r\n}\r\n```'
11053,479629484,"b""where did you move this logic? Isn't it still needed?"""
11053,479629633,b'this is still invalid. You are checking if path length === 1 and then access last and previous character. '
11053,479629794,b'can we use find instead of filter? No need to scan all - we should break on first not matching item. '
11053,479629802,b'same here. '
11053,479630007,b'why we need self here?'
11053,479630072,"b'space after comma, not before'"
11053,479630112,b'I wonder if we want to handle failure here? '
11053,479630295,b'do we need self? '
11053,479630493,"b""do we have info about filtered/not filtered replication in editedReplicationAccessItem ? If yes then we can create observable which will choose proper validation group and here we don't care about editedReplicationAccessItem internals. """
11053,479630543,b'const'
11053,479630675,b'do we need this div here + html: html param?'
11053,479630710,b'same here. also if this html: true then we can escape name!'
11053,479630736,b'do we need self?'
11053,479630779,b'space after comma'
11053,479630823,b'if read as text is sync then no need to spinners'
11053,479630924,b'if (validity)  (no need to have `!= null`).'
11053,479631059,"b'oh validity is number so we want to accept zero, then this is fine. ;-)'"
11053,479631191,b'same here - we could move this logic to editedReplicationAccessItem and avoid repeating ourselves. '
11053,479631520,b'const'
11053,479631614,"b""if we don't include access info then export file with have `--` in name. """
11053,479632036,b'; at the end of lines in interfaces\r\n\r\nI wonder if we want to change prop: HubDefinitionName to HubTaskName?'
11053,479632436,b'RavenDB'
11053,479632524,b'Id vs ID? \r\n\r\non edit document we have: \r\n![image](https://user-images.githubusercontent.com/1250431/91634134-478afa00-e9ee-11ea-94a4-8e6028782adf.png)\r\n'
11053,479632636,"b'`,  ,`'"
11053,479632765,b'.replication-access-list and please use class not id. '
11053,479632867,b'do we need explicit field for that? Can we infer that from configuration ?'
11053,479772037,b'done'
11053,479772132,b'done'
11053,479772184,b'done'
11053,479772973,b'done - using RaftCommandIndex'
11053,479772996,b'done'
11053,479773220,b'done'
11053,479773255,b'done'
11053,479773403,b'done'
11053,479775023,b'this logic is inside `initValidation` inside :  `replicationAccessHubModel.ts`  '
11053,479775489,b'done'
11053,479775965,b'done'
11053,479776078,b'done'
11053,479776111,b'done'
11053,479776468,"b'as discussed, changing to `HubName`'"
11053,479776762,b'done'
11053,479776822,b'done'
11053,479776887,"b'as discussed, leaving this'"
11053,479777348,"b""done - renamed and used class instead of 'id'.\r\n(but - this _can_ be 'id' - it only exists in one single place on the page)"""
11053,479781483,b'ok - changed to ID'
11053,479781859,b'done'
11053,479783145,b'done - handled fail inside of `getPossibleMentorsCommand`'
11053,479784868,b'done'
11053,479784905,b'done'
11053,479786203,"b'done, removed'"
11053,479786418,b'removed'
11053,479786641,b'removed'
11053,479788469,b'ok - got it - done'
11053,479801603,b'ok - implemented in another simple way - w/o duplicating data'
11053,481020082,b'added `nameof` and removed the `HubDefinitionName` & `Database` that are not used by Studio in this case'
11053,482760311,b'internal (right?) and change `Response => Result`'
11072,482838291,b'remove?'
11053,482869236,b'1. changing to internal\r\n2.  @ppekrol  `ReplicationHubAccessResult` is already used in  \r\nhttps://github.com/ravendb/ravendb/blob/dd4d680c333b5a72be837f47c21e1f91b92729d8/src/Raven.Client/Documents/Operations/Replication/ReplicationHubAccessResult.cs#L3\r\n'
11074,482858876,"b""Don't you also need `?.ToList(); `?"""
11074,482874994,b'Why do you need this?'
11074,482887420,"b'consider the following: (A - sink, B - hub)\r\n\r\n1. doc create on sink (A:1- ... )\r\n2. replicated to hub (SINK:1- ..)\r\n3. modified on the the hub (SINK:1- .., B:1- ... )\r\n4. replicated back to the sink (A:1-.., B:1-..)\r\n\r\nI would like to avoid the tag SINK on the origin.'"
11074,482890551,"b'We compare the db id, so no issue there.\r\nAnd not a big worry from our perspective, because sink B will have the SINK from node A anyway, no?\r\n'"
11074,482892546,"b""I don't think that `Select(x => x.DbId)` can generate `null`"""
11019,472398331,"b'wait it means, we *have to* fetch *all* indexes on *every* query?'"
11019,472778601,b'https://issues.hibernatingrhinos.com/issue/RavenDB-15509#focus=Comments-67-49974.0-0'
11019,475191204,"b""it won't work - fetch is async operation, so currentIndex will still be falsy in next line. """
11019,479627092,b'create $.Deferred<string> and resolve with proper value - instead of creating variable for that. '
11019,479627108,b'here you simply return deferred. '
11019,482843953,b'we should call methods with side effects inside pure computed.'
11019,482844168,b'we should call methods with side effects inside pure computed. as it will be invoked on every change. '
11019,482844703,b'probably we should call this method in run query - but one time.'
11019,483275743,"b'done, moved to runQuery'"
11072,483442687,"b'No, there is some problem with less compilation, the colors are not assigned correctly.  Hovewer this is the way I want it defined once we move to SCSS.'"
11012,476784727,"b""I don't think so, the only thing it does is call to:\r\nhttps://github.com/ravendb/ravendb/blob/v5.0/src/Raven.Server/Documents/Patch/ScriptRunnerResult.cs#L52\r\n\r\n`JavaScriptUtils.Clear()` - But that is _shared_ on the whole script runner. This will be disposed by the calling script, so not a owrry"""
11073,482841307,b'can we find better solution for that? This is really fragile approach. '
11073,482846370,"b'do you mean use some pre-defined constant instead of ```""<br>""``` ?'"
11073,482849778,b'Why do we care? We can simply always include this'
11073,482850014,"b'Note that the same message is releavnt for FireFox, Safari, etc'"
11073,482850335,"b'By the browser, instead of chome.\r\nAnd the ""private browsing tab, Ctrl+Shift+N in Chrome""'"
11073,483046695,"b""good point! + we don't need this detection which is also fragile """
11073,483047411,b'in general we should escape those characters to avoid XSS. '
11073,483159846,b'np\r\n(this chrome detection was inserted only because that was the issue definition) '
11073,483219064,b'using `Environment.NewLine` instead'
11073,483220458,"b'Changed to:\r\n\r\n`Your certificate store may be cached by the browser. Create a new private browsing tab, which will not cache any certificates. (Ctrl+Shift+N in Chrome, Ctrl+Shift+P in Firefox).`'"
11073,483253382,"b""Do we need to break this at all? Can't we simply display this and single text? Such solutions are hard to maintain in future. Btw. you can split text using .Split method on string. """
11073,483265751,"b""1. The break was added because it seemed more nice & clear like this.\r\n   See  image:  https://issues.hibernatingrhinos.com/issue/RavenDB-13548#focus=Comments-67-50351.0-0\r\n2. I didn't want to use split because I only wanted to get 2 parts for the html,\r\n   and not an array of strings in case someone added more than one 'break' in the message text."""
11073,483430922,b'split has paramater to limit items count'
11073,483624447,b'awesome - done'
11081,484751353,b'So we were sending `null` even if someone set `Standard Analyzer` what resulted in defaulting to LowerCase analyzer. Nice catch'
11078,484759403,b'Why is that a _valid_ case? When can that happen?'
11072,484774045,b'ok\r\n'
11066,484805788,b'Why using List instead of HashSet here?'
11085,484057677,b'I think we want to throw that here. Or just continue.\r\nThoughts?'
11085,484057791,b'Right now we are returning that the item does not exists'
11085,484057847,b'Under what scenario that can happen?'
11085,484057932,"b'This should be under `Advanced`, not at the top'"
11085,484492724,b'removed'
11085,484495422,"b""Currently we allow to check if the entity loaded into session with `changeVector=null`\r\nI think if it's not loaded then we should throw an exception"""
11085,484731356,"b""I think we need to explain what is the condition actually. So user will know that if etag matches it won't send document over the wire."""
11085,484733781,b'in to -> into '
11078,484885902,"b'We got it on few of our DBs I currently work on reproducing it in a test, but it seems to be OK to have different tx marker for document and its attachment, but should not happen for revision and its attachment?'"
11071,484890959,"b""Why? We should throw then, shouldn't we?"""
11071,484950373,b'I think the purpose here it not throw if the time of `timeout` not passed. \r\nWhat is the benefit of not throwing when the time passed?'
11066,484965193,"b""The values here are from `Hashing.Combine` so there is no meaning if a value is smaller or greater from another value.\r\nThe main problem here was that one node wasn't updated so while the client switch between the nodes because of the `ReadBalanceBehavior.RoundRobin` configuration the `ClientConfigurationChanged` is called multiple times.\r\nThis is the print from `HasClientConfigurationChanged`:\r\n```\r\nB index(0) != actual(1100310647005720893)\r\nB index(1100310647005720893) != actual(1100310647005720893)\r\nB index(1100310647005720893) != actual(1100310647005720893)\r\nB index(1100310647005720893) != actual(1100310647005720893)\r\nB index(1100310647005720893) != actual(-2545487602637056995)\r\nB index(-2545487602637056995) != actual(-2545487602637056995)\r\nC index(-2545487602637056995) != actual(-1212807392199088769)\r\nB index(-1212807392199088769) != actual(-2545487602637056995)\r\nC index(-2545487602637056995) != actual(-1212807392199088769)\r\nB index(-1212807392199088769) != actual(-2545487602637056995)\r\nC index(-2545487602637056995) != actual(-1212807392199088769)\r\nB index(-1212807392199088769) != actual(-2545487602637056995)\r\n```\r\n\r\nI opened an issue to solve it - https://issues.hibernatingrhinos.com/issue/RavenDB-15548.\r\n\r\nSo to make a long story short I used `List` so the `Last` function will return the more updated value"""
11087,484102266,b'true or false by default? I think we should match current behaviuor '
11087,484102477,b'is it updated when you manually toggle folds? maybe we should avoid having this field?'
11087,484102602,"b'value is true  see line above, right?'"
11087,484102754,b'we have auto collapse mode field and isdocument collapsed. can we have single field to represent this state?'
11087,484102964,b'do we need that? obsolete code?'
11087,484938774,b'removed'
11087,484940727,b'done'
11087,484946366,"b'done, changed to false'"
11087,484982042,b'I will remove ```autoCollapseMode```\r\nIt is not used with the new implementation'
11087,485023974,b'Please look at the latest commit implementation\r\nI fixed bugs for when _cloning_ & when _exiting compare revisions_ state\r\nSeems that field is needed'
11057,478410104,b'`LastEtag` and `LastCleanup`'
11057,478411494,b'why not `long.MaxValue`?'
11057,478414767,"b""Let's make a function out of this.. `GetTombstoneAtOrBefore(...)`"""
11057,479222555,"b'IIRC we should use `Hrs` instead of `Hours`, please check that.'"
11057,479224563,b'`RetentionTimeWithReplicationHubInDays` maybe?'
11057,479225519,"b""Let's try to simply the name. Maybe `CleanupIntervalWithReplicationHubInHrs` ?"""
11057,479234728,b'we prefer `== false` instead `!`'
11057,479238111,b'We need to persist this? If server will be restarting every 3 days then what will happen?'
11057,479240844,"b'If this needs to be persisted, then we need to do it after cleanup is successful probably a 2nd method in ITombstoneAware?'"
11057,479731910,"b""I don't think we need to persist this.\r\n@efratshenhar correct me If I'm wrong, but upon server restarted we simply will do the binary search again.\r\n"""
11057,479746671,b'yes'
11057,482020935,b'What are the thread safety concerns that we should have here?\r\n'
11057,482021274,"b""Shouldn't you set the LastModified here too?"""
11057,482021783,"b'If we allow shorter time periods, should this be in days?\r\nWhat is I want this to be 36 hours?'"
11057,482021976,b'Left make this a value measured in minutes.'
11057,482022168,"b""Let's replace this value completely on each change."""
11057,484835708,b'`hoursToSave`  or simply `retainFor` ;)'
11057,484838354,b'daysToSave -> hoursToSave'
11057,484902521,b'Please rename to `GetTombstonesInReverseEtagOrderFrom` for consistency with other methods e.g. `GetDocumentsInReverseEtagOrder`'
11069,484799081,b'That can throw `TaskCancelledException`. Is it ok? I see the code below just catches everything.'
11069,484799611,"b""Whats the point of checking it here since we're passing `DatabaseShutdown` one line above?"""
11069,485400969,b'remvoed'
11069,485401500,b'`TaskCancelledException` is caught higher in the stack by `catch (OperationCanceledException)`'
11071,485432292,"b""Sorry, there are two similar conditions there and I didn't notice that this one is inside `catch`. """
11081,485439395,b'As we talked - this is the default analyzer _only_ for full text search field (`FieldIndexing.Search`). PR will be closed anyway.'
11085,485496264,b'Should this be added to `TrackEntity` as we do for `Load`?\r\n@ayende '
11044,477596249,b'please indent code'
11078,485518031,"b""A revision's attachment can be added by a previous revision, so that would be different."""
11085,485522541,"b'Why, that is why we have `IsLoaded` for, no?'"
11085,485523036,"b""I think so, we now know it doesn't exist. \r\nIt should be added to `missing`, no?\r\n"""
11095,485447507,"b""I know this is needed only for investigation but can we write it as helper method so we'll avoid repeating it multiple times. Once we figure out what is the problem it will be easier remove just a single method"""
11084,485512319,b'nameof?'
11067,484804907,b'@haludi Can you please explain why we need change change?'
11067,484947382,"b'The `Assert`s below should be invoked after the retention policy is applied.\r\nIn the previous implementation, the test waits until there is no logfile with just the `.log` prefix but while in this test case the log files are compressed this check is not relevant so I changed it to wait for `.log.gz` log files are removed too\r\n'"
11067,485436614,"b""Would `StartsWith()` work as well here? If yes then wouldn't it be a slightly safer check? Maybe let's add a comment explaining that logs are compressed here so they have `.log.gz` extension"""
11068,482010036,"b'```suggestion\r\n                if (string.Equals(databaseName, databaseToExclude.ToString(), StringComparison.OrdinalIgnoreCase))\r\n```\r\n\r\n(Avoids potential NRE)'"
11068,483441562,"b""let's rename this to ExcludedDatabases"""
11068,485515437,b'wrong indent'
11068,485516004,b'can we get this empty object from parent to avoid code duplicate? '
11068,486178555,b'done'
11068,486178594,b'done'
11068,486178651,b'done'
11068,486178905,b'done'
11074,486838919,b'Correct. It can return empty enumerable but not null.'
11074,486839285,b'@karmeli87 ?'
11074,486865846,"b'I would like to avoid a situation where the sink node have the `SINK` tag on its own dbid.\r\nI agree it is more a cosmetic issue, since we compare dbids, but it is ""cleaner"".'"
11094,485654593,"b'should be `timeSeriesFunction.Select`, no?'"
11094,485663445,b'this is only called from `VisitParameter`\r\nyou can change the parameter type to `ParameterExpression` and simplify the condition '
11094,486056430,b'yes.'
11094,487501845,b'```suggestion\r\n                return s;\r\n```'
11094,487501860,b'immutable'
11094,487501886,b'```suggestion\r\n            if (value is ValueType)\r\n```'
11094,487501952,b'```suggestion\r\n                return lcsv.ToString();\r\n```'
11094,487501961,b'```suggestion\r\n                return lsv.ToString();\r\n```'
11094,487501994,b'```suggestion\r\n                return lnv.ToDouble();\r\n```'
11094,487502139,b'Remove this'
11094,487502163,b'Remove this'
11094,487502220,b'remove'
11094,487502325,"b""Let's use the string representation"""
10944,461671613,b'Need to check if the license allows running this backup configuration'
10944,461673375,b'This can throw (killing the server).\r\nThis needs to be before `AddOperation`'
10944,461674357,b'Why pass both `periodicBackup` and `periodicBackup.Configuration`?'
10944,461676900,b'Pass the `RetentionPolicy` and `BackupStatus` as parameters'
10944,466247061,b'What if this fails?\r\nNeed to run `ConcurrentBackupsCounter.FinishBackup` or better move it just before starting the operation'
10944,470559636,b'just `BackupOperation`\r\nshould be `IMaintenanceOperation` ?'
10944,470559756,b'readonly'
10944,470559891,b'use `this(backupConfiguration)`'
10944,470559953,b'what if this is `null` ?'
10944,470560142,b'what is this used for in one time backup?'
10944,470560216,b'should be IMaintenanceOperation so this is not needed'
10944,470560339,b'internal'
10944,470560368,b'internal'
10944,470560401,b'internal'
10944,470560439,b'internal'
10944,470560484,b'internal'
10944,470560979,"b""Shouldn't this be called `LocalBackup` to match others?"""
10944,470561709,b'why we removed this?'
10944,470562143,b'why we removed this?'
10944,470562340,b'/databases/*/admin/backup ?'
10944,470562498,b'We need to assert at the beginning of the method?'
10944,470563065,b'this is also calculated few lines above?'
10944,470563335,"b'Are we validating somewhere that this configuration is correct? Properties are not null, etc.'"
10944,470563594,"b""just 'Database Backup' instead of 'One time' ?"""
10944,472980955,"b'renamed, I followed the logic of `RestoreBackupOperation` so I put it in `IServerOperation`'"
10944,472988346,b'we use the base class `BackupConfiguration` in BackupTask so it should contain Name'
10944,473020120,b'moved to `PeriodicBackupConfiguration` because it implements IDatabaseTask'
10944,473024615,b'[PeriodicBackupStatus](https://github.com/ravendb/ravendb/blob/v5.0/src/Raven.Client/Documents/Operations/Backups/PeriodicBackupStatus.cs#L43) returns FolderName\r\n\r\nIn `OneTimeBackup` we return `BackupResult` so I added `FolderName` and `FileName` to it.'
10944,473025510,b'TaskCancelToken.Token is _databaseShutdownCancellationToken'
10944,473027885,b'I need to do it after configuration got deserialized and before `ConcurrentBackupsCounter.StartBackup()` I reordered the methods'
10944,473033073,b'added validation in `BackupOperation` and test'
10944,473037298,b'readded'
10944,473674297,"b""why not put it in 'Raven.Client.Documents.Operations.Backups' ?"""
10944,473675506,b'I do not see a reason for that. If you need a name on the server-side then put a well known human readable name there.'
10944,473677630,b'Everything else is wrapped into classes. I think we need to wrap this too.'
10944,473681646,"b""rename to 'BackupConfiguration'"""
10944,473682740,"b""Shouldn't we add some `try catch` here? If something will throw in next 10 lines you will never recover"""
10944,473828570,b'Also need to add here:\r\n`AssertBackupConfiguration` and `AssertDestinationAndRegionAreAllowed`'
10944,475204012,b'added `AssertBackupConfigurationInternal`'
10944,475484712,b'lets try to change this to `private readonly string _nodeTag;`'
10944,475485698,b'create instance of this in ctor like others'
10944,475489933,"b""move this to 'catch' and in AddOperation add 'finally' with this."""
11085,487524450,"b""sending 'Load' operation 2 times with the same non-existent ID will send 2 requests to the server, therefore it is not added to `TrackEntity` if the the entity doesn't exists on server"""
11086,484391158,b'You can move it up to avoid the `serverWideBackupConfiguration.ToRemoveFromDatabaseRecord != null` check'
11086,484719496,b'Why do we need this? How do we handle update of a name of regular (not server wide) backup tasks?'
11086,484721330,"b""1) Shouldn't this method ensure that the configuration name starts with `ServerWideBackupConfiguration.NamePrefix` ?\r\n2) You removed the usage of this method here but there is another one in `DeleteServerWideBackupConfigurationFromAllDatabases` is its usage correct there?"""
11086,484721644,"b""Shouldn't we rely on `TaskId` instead of `Name` to detect that this is an update?"""
11086,484722564,"b""Additionally it's hard to know what is it actually about - is about TaskId to remove or TaskName to remove."""
11086,484883827,"b'In the database record, the `TaskId` is constant while in the server-wide configuration the `TaskId` change on any update to the configuration so we can\'t use the `TaskId` from the server-wide to know which configuration to edit (remove) in the database record (usually, we use the name but it is not useful when the user edits the name).\r\n\r\nOne option is to change this behavior and make the `TaskId` of server-wide backup constant as well.\r\nThis kind of change will not ""help"" to already exist server-wide backup configuration which already has different `TaskId` from database record `TaskId`. In this solution, we maybe can use a scheme upgrade.\r\n\r\nIn the current solution, I am using the name from the server-wide configuration update. This doesn\'t need any scheme upgrade'"
11086,484886524,b'The `TaskId` from the server-wide backup can be different from the `TaskId` from the database records\r\nhttps://github.com/ravendb/ravendb/pull/11086#discussion_r484883827'
11086,484899556,"b""I didn't remove the behavior of the method just the usage.\r\nI just wanted to use the backup name twice for the remove check and for the edit check\r\nand while the code in `IsServerWideBackupWithTaskName` is very small so there is a small benefit of reuse it.\r\n\r\nBy the way, I thought to get the name as `LazyStringValue` but I didn't find an overload of `LazyStringValue.Equal` with `StringComparison` and I don't know if it so relevant here"""
11086,484906676,b'Do I understand correctly that the server wide backup configuration has _constant_ `TaskId` in the database record? Can you please point me to the relevant code? Why is that?\r\n\r\n@grisha-kotler What do you think?'
11086,484971132,"b'Here https://github.com/ravendb/ravendb/pull/11086/files#diff-ad98abd3baf8509e485969ace15cd336R3098\r\n```\r\nif (backup.TryGet(nameof(PeriodicBackupConfiguration.TaskId), out long taskId))\r\n                                    oldTaskId = taskId;\r\n```'"
11086,486458234,"b""If it's a new one, you are missing the index `?? index`"""
11086,486828679,"b'```suggestion\r\n        private static bool IsServerWideBackupToEdit(BlittableJsonReaderObject backup, \r\n```'"
11086,486828917,b'minor - space after if'
11100,487503886,b'!=='
11100,487541307,b'done'
11086,487727002,b'Instead of using `index` I used `serverWideBackupConfiguration.TaskId`'
11085,487779076,"b""Why do you think the 2nd call of `ConditionalLoadAsync` with the same non-existent ID should sent the request to the server. We already know that it doesn't exist, don't we? So we should answer immediately without asking the server."""
11085,488552140,"b'Yes, it should update `_knownMissingIds` and for that matter, the `ConditionalLoad` should also check it.'"
11048,477107854,b'Please revert this.'
11048,477108870,"b""Why? Previosuly we did 'DocumentIdWorker.GetSliceFromId', now just 'Slice.From'"""
11048,477147731,"b""As I saw it the id here already escaped and converted to lower.\r\nIf the id has special char '\\v' it becomes '\\u000B'.\r\nThe `DocumentIdWorker.GetSliceFromId` function do toLower so '\\u000B' becomes '\\u000b' so the document not found."""
11048,477165365,"b""The main target was to escape the key so its document can be found.\r\nIn the beginning I just replace `Slice.From` whit `DocumentIdWorker.GetSliceFromId`.\r\n```\r\nSlice keySlice;\r\nif (keyLazy != null)\r\n{\r\n    if (keyLazy.Length == 0)\r\n        return DynamicNullObject.Null;\r\n\r\n    // we intentionally don't dispose of the scope here, this is being tracked by the references\r\n    // and will be disposed there.\r\n   DocumentIdWorker.GetSliceFromId(_documentsContext, keyLazy, out var keySlice);\r\n}\r\nelse\r\n{\r\n    if (keyString.Length == 0)\r\n        return DynamicNullObject.Null;\r\n    // we intentionally don't dispose of the scope here, this is being tracked by the references\r\n    // and will be disposed there.\r\n   DocumentIdWorker.GetSliceFromId(_documentsContext, keyString, out var keySlice);\r\n}\r\n```\r\n\r\nSo what do you me to revert? \r\nThe common code for `LazyString` and `string`?\r\nThe use of `DocumentIdWorker.GetSliceFromId`?"""
11048,477170521,"b'Make this pass a StringBuilder, you are doing needless allocations'"
11048,477170657,"b'More needless allocations, should use the string builder'"
11048,477171894,"b""You are not calling to lower, which can cause issues.\r\nWhy allocate a string if we don't have to?"""
11048,487008576,"b""Not sure if usage of `for` instead of `foreach` wasn't intentional because of slightly better performance. Let's get back to `for` just in case."""
11114,488466781,b'I wish I had value task'
11114,488575993,b'Either `await` or user `Write()`. You still have it.'
11114,488577180,b'You are disposing of the operation before the write is done '
11114,488583489,b'Ah sorry. Oversight. Will fix'
11114,488613774,b'Fixed'
11085,488813288,b'`_knownMissingIds` is used in `Delete` and `Include` pnly.\r\nIf you `Load` an entity with the same id twice (non-existing one) it will generate 2 requests.\r\nWe should probably call `RegisterMissing` for `Load` a well.'
11085,489250195,"b""That isn't how it works. `LoadOperation` calls to `CheckIfIdAlreadyIncluded` which handles this.\r\nNo two calls here."""
11085,489250585,"b""Oh, we aren't _registering_ in the known missing in `Load`, yes, we need that too."""
11085,490093802,b'https://issues.hibernatingrhinos.com/issue/RavenDB-15615\r\n\r\nI will add it to the ConditionalLoad as well'
11056,484843265,b'That is the first time we use `EventHandler / EventArgs` in our conventions. Why not to change to `Func` returning `bool`? '
11056,484844513,"b'For me it would be much more natural to just return `bool` here instead of assigning it to `ShouldIgnoreChanges`. The convention name is `ShouldIgnoreEntityChanges` anyway so the following is simpler:\r\n```\r\n s.Conventions.ShouldIgnoreEntityChanges\r\n                        => (id, entity) => entity is User u && u.IgnoreChanges;\r\n\r\n```'"
11056,485521093,"b'There is a recommendation against returning bool from events. Because you may have multiple subscribers, and only the last one will be respected.'"
11056,485521306,b'https://docs.microsoft.com/en-us/dotnet/csharp/event-pattern#returning-values-from-event-subscribers'
11056,485521438,"b'That said, we are returning values from other events here'"
11056,485584813,"b'Hmm.. okay, but the issue is that this is something totally different from the rest of our API.\r\n\r\nDoes it make sense to have multiple subscribers here? I think we were always assuming that there will be only one. Maybe we should explicitly forbid multiple subscribers and throw then.'"
11150,492662544,"b'There is a typo here, but I think it would be better to change this to `License.DisableAutoUpdate`. Thoughts?'"
11150,492663802,b'Can we change that to `License.DisableLicenseSupportCheck` ?'
11150,492686213,b'done'
11150,492686228,b'done'
11149,492664675,b'Should be `continue` ?'
11149,492667195,"b""It is called 'CanCacheAggressively' in Commands. Let's stick to that."""
11149,492667711,"b""Double-check. Do we need to apply logic here from 'RequestExecutor.TryGetFromCache' ?"""
11149,492676242,"b""I wanted to have this set to false by default, so we don't have to touch it in all call sites."""
11149,492676889,"b""No, the first one that isn't find for us, we'll break and the `Result`'s count will be different than `_commands` so we'll go to the server for all items."""
11149,492676984,"b'That is where I took the logic from, yes.'"
11149,492679411,b'Set it to `true` in ctor like we have it for RavenCommand?'
11149,492679530,b'OK'
11149,492679850,"b'There was additional logic for delete, but it is not possible to have that case here, wanted to double-check.'"
11123,492673613,"b'This is a debug information endpoint, it means that we will not include threads ans mappings for debug package. Is taht what we want? cc @karmeli87 '"
11123,492697583,b'I changed it to be `true` by default.'
11151,492573691,"b""Let's extract it to separate file."""
11151,492575442,b'Just to make sure. We no longer need that because after your changes docs and timeseries are processed in etag order (not as it was before that we were processing docs and their time series were processed later on). Is that correct?'
11151,492579157,b'Please provide exception message. Also you might extract the exception to a dedicated method to get slightly better perf. `Filter` is expected to be called quite frequently.'
11151,492581652,b'Why did you remove `currentItem.Type == EtlItemType.Document` check? We should check `Database.Configuration.Etl.MaxNumberOfExtractedDocuments` only for the docs'
11151,492582856,b'And fix the missing exception message in other places as well.'
11151,492585872,b'yes'
11151,492587562,"b'Frequent calls was my concern as well, but it is not suppose to be super performant anyway, right?\r\n`Filter` will be called as much as `MoveNext`.'"
11151,492588049,"b'we do, one line below.'"
11151,492590924,b'Yeah. Just moving the `throw` clause to a separate method and calling it here might let it optimize stuff by inlining.'
11151,492592308,"b""Okay. Makes sense, you don't have to check that `currentItem` is a document"""
11151,492675737,"b'You should do check and track attachments in `Transformation.ApplyToAllDocuments` as well, no?'"
11151,492685107,"b'In a case, there is no transformed item you still act as ""didWork""'"
11151,492690892,"b'yes, because there might be stuff that we skipped, but we need to update the etag.'"
11163,492932950,b'why not `await` ?'
11151,493276906,"b""It's for stats only but I don't think that the usage of `count` is correct. `LoadInternal` returns the number of commands (for example we might have DELETE and PUT for a single transformed item) while we should record `transformed - filtered` items here"""
11151,493277655,b'and we should use the same value for below `stats.RecordLoadSuccess()`'
11151,493302889,"b""To me it is not well defined.\r\n\r\ndoes sending a tombstone counts as `Load` ? (it doesn't count as `Transformed`, it counts as `NumberOfTransformedTombstones`)\r\nLoad of a time-series is segment based, entries based or is it count as 1 regardless to the number of segments (`TransformedItems` is segment based btw.)\r\nSame for counters.\r\n\r\nNot sure that `count` is the best choice though.. """
11151,493333320,"b""As we discussed there are other problems with using the transformed number of items - for example we might transform time series segment but filter out all it's entries under the covers.\r\n\r\nSo the usage of `count` had some drawbacks but appears to be the best number for stats purpose."""
11151,493670931,"b""what will send the counter to the other side afterward? won't this cause us to miss a write?"""
11151,493735123,b'we always load the counters together with the document itself.\r\nhttps://github.com/ravendb/ravendb/blob/4569e8a7bf34cc94c722b85bd16e6f342d3df663/src/Raven.Server/Documents/ETL/Providers/Raven/RavenEtlDocumentTransformer.cs#L217'
11165,493469226,b'Maybe `Manual database backup` ? '
11165,493473933,"b'maybe something like:\r\n```\r\nconst tokens: string[] = [];\r\n  if (databaseToCompact) {\r\n     tokens.push(""compact="" + encodeURIComponent(databaseToCompact));\r\n  }\r\n  if (restore) {\r\n     tokens.push(""restore=true"");\r\n  }\r\n  \r\n  const mergedTokens = tokens.join(""&"");\r\n  \r\n  return ""#databases"" + (mergedTokens ? ""?"" + mergedTokens : """");\r\n```'"
11165,493474823,"b'title : Backup Task dynamic hash: ExternalReplication, itemRouteToHighlight: backup. This is suspicious. '"
11165,493476831,b'do we need this if here? '
11165,493689760,"b'Currently, it looks like this:\r\n![image](https://user-images.githubusercontent.com/17376974/94034393-a6177e00-fdca-11ea-8d8e-cda50f610932.png)\r\n\r\nimho - it makes more sense to have:\r\n_Manual backup for database: q1_\r\n\r\ndo you still prefer:\r\n_Manual database backup: q1_\r\n?\r\n\r\n'"
11165,493732517,b'fixed'
11165,493740605,b'removed'
11165,493807521,b'refactored'
11165,493837892,"b""ok let's leave it"""
11145,491807432,"b'I know it was in the original code like this, but I wonder if we need to be on the safe side and do:\r\n`if (context.InUse.Raise())`'"
11145,491807880,"b'Not sure if it possible, but for instance we use the context pool in the request executor, what if we dispose it when some requests still pending?\r\n'"
11145,491816987,"b""I'm actually doing that here on _purpose_. The idea is that if we are calling `Dispose()`, the _caller_ is responsible for making sure that no one is using these. So we don't want to do a check, we want it to fail."""
11145,491823558,"b'But this will fail with AVE, right? maybe add a debug message to the destructor?'"
11145,491825370,"b""If you have concurrent usage, yes, it would. And that is what I expect it to do.\r\nThis is a use after free scenario, which is expected to fail _hard_.\r\nIt didn't so far, mind, so we are good."""
11158,494275333,"b'This is still required, no?'"
11158,494276382,b'why do we need this?'
11158,494278997,b'??'
11158,494285442,b'I removed project reference in RVN to Raven.Server and using file linking there. By doing this the Single File App for RVN is 30mb instead of 130mb'
11158,494285749,"b'I will have to check how to do it, but this is now throwing exception.'"
11158,494287288,"b""I'm attaching all .so for linux, all dlls for windows and all dylib for osx. Previosuly all distributions had all the DLLs. Not sure how in MSBuild detect that I'm building for ARM (x32 and x64) to include even less libs for Linux. Note taht we are talking here about ~1mb only so I consider this an optimization (the ARM detection)"""
11161,494143337,b'```suggestion\r\n            return mce.Method.DeclaringType == typeof(RavenQuery) && mce.Method.Name == nameof(RavenQuery.CmpXchg);\r\n```'
11181,496693511,b'I think we want to have 100 here?'
11181,496699026,b'can we avoid recomputing filtered items on every load? '
11181,496718876,b'As discussed - changing to 50'
11181,496724199,b'done'
11182,496719932,"b""Why do we need all this? can't we use `GetReplicationItems` in both dbs?"""
11182,497308695,b'done'
11182,497322155,b'For the 5.x please use the `Clone` method'
11188,497403165,b'why was it removed?'
11188,497489836,"b'Actually, it was a ReSharper warning.  `ConcurrencyException` is `ConflictException` so it always returns `false`'"
11171,494212219,b'```suggestion\r\n            MemoryStream stream = null;\r\n```'
11171,494212352,b'```suggestion\r\n            if (Stream != null)\r\n```'
11171,498056993,b'Hmm.. we have places that we do\r\n `var idEnd = key.Content.IndexOf(SpecialChars.RecordSeparator);` \r\n\r\nor \r\n```\r\nvar val = bytes[i];\r\nif (val != SpecialChars.RecordSeparator)\r\n```\r\nand I wonder if it is correct.. in case we have some unicode char might we identify it wrong?'
11187,497538277,b'Can this cause us to spam the user with alerts?'
11187,497563290,b'it will generate a message per (problematic) ts'
11187,498002671,"b'That can be a lot of them, no?'"
11187,498006592,b'So how to notify to the user about the issue? \r\nAlso I think there is an open issue in the studio to combine alerts by the type.'
11187,498007310,"b'We can use the key on the ""Collection/TimeSeries"", no? That would reduce the number of unique matches.'"
11187,498008560,"b""Without the docId, since we assume that all ts in the same collection will have the same structure? \r\nI'm fine with that :) """
11187,498064793,b'yes'
11187,498140742,b'done'
11185,497350312,b'backup ? '
11185,497400553,b'done'
11185,498210416,b'change to property?'
11185,498210794,"b""NamePrefix as a JSON field name? Does not look valid? Should it be 'Name' ?"""
11185,498214286,b'Does not look like a valid namespace for this kind of interface? Maybe put it Raven.Client.ServerWide.OngoingTasks?'
11185,498215248,b'create ServerWideExternalReplicationResponse and inherit from ServerWideTaskResponse. It will give us more flexibility in the future and we will not have to worry about breaking any compatibility.'
11185,498216069,b'Also not a valid namespace? Introduce Raven.Client.ServerWide.OngoingTasks?'
11185,498223026,b'Why do we need this? Also this should go into a separate Studio handler like we do with others.'
11185,498223421,b'backward compatibility issue?'
11185,498227900,b'Should be moved to a proper namespace'
11185,498229922,"b""1. Better to do 'Obsolete(error: true)`\r\n2. Formatting\r\n3. Assuming that there is no flow that uses this ctor."""
11185,498337842,b'done'
11185,498338683,"b""It was added for `ServerWideBackupConfiguration` for the studio so I guess we'll need the same here"""
11185,498339734,b'done'
11185,498368118,b'done'
11185,498370774,b'done'
11185,499271357,b'done'
11185,499271885,"b'This is a bug, you must provide the name.\r\nhttps://github.com/ravendb/ravendb/blob/564451a4742ba16ce44e45837d2b1df4112bd97e/src/Raven.Server/Web/System/AdminServerWideBackupHandler.cs#L158\r\n\r\nIt will just take the first task and disable/enable it'"
11185,499271895,b'done'
11185,499272099,b'done'
11159,492609296,b'Wonder if we should call it `Derivative` (or maybe `Change`?) instead of `Slope`.'
11159,492620736,b'I would prefer to use `SortedDictionary` with a comparer to handle duplicates.'
11159,494267310,"b""Isn't slope the right math term?"""
11159,494271007,"b'Agreed, also, and `insert` here will cause us to move a lot of values, potentially.'"
11159,494273287,"b""This rounds down, right? Do we need some manner to adjust the value based on the distance?\r\nSo if we have [1,2,4] and we ask for 75% percentile, we'll get [2] here. But that actually represent the 50%.\r\nShould we adjust that so it would be 3 as the result?"""
11159,496614661,"b""No actually we round up : `index = (int)Math.Ceiling(_percentileFactor * list.Count)`\r\nso in your example we'll get `4` as the result. (`2` is wrong by any definition)\r\n\r\nThere are different definitions for percentile and methods for calculating percentile.\r\nBy the definition that I chose to implement the result is always a part of the data set.\r\nSo if we want to adjust the result to be `3` we need to use a different method..\r\n\r\nI wrote more about it in the issue page : https://issues.hibernatingrhinos.com/issue/RavenDB-15020#focus=Comments-67-51024.0-0"""
11159,496618769,"b'I think `Slope` is the right math term. \r\n`Change` is inaccurate - we are measuring **the rate** of change\r\nand `Derivative` is the rate of change when the distance (delta X) tends towards 0, no? '"
11159,497491945,"b""Okay, that make sense.\r\nIf it isn't hard, let's go with extrapolation. Note that we need to document this."""
11159,498240160,b'done'
11159,498240322,b'done'
11159,498680556,"b""Can you check the warning?\r\n```\r\nsrc/Raven.Server/Documents/Queries/Results/TimeSeries/AverageAggregation.cs#L83\r\nThe default value specified for parameter 'scale' will have no effect because it applies to a member that is used in contexts that do not allow optional arguments\r\n```\r\n\r\nProbably just remove `= null` from `scale` here. It is an explicit interface impl."""
11159,498681025,b'Warning here. Explicit interface impl.'
11159,498681299,b'abstract?'
11159,498810513,b'done'
11159,498810579,b'done'
11159,498810620,b'done'
11159,499351997,b'Should we maybe shorten this to StdDev?'
11159,499354371,b'for consistency with above `oldCount <= i`'
11159,499446037,b'yes'
11159,499450258,"b'No, then Average should be Avg, etc. Either use full names of abbreviations. Not both.'"
11159,499451161,"b'Actually it is already mixed, nvm.'"
11159,499454311,"b""May I ask what's definition used for slope?"""
11191,499266829,b'?'
11191,499272021,b'can we invert if to avoid empty code branch? '
11191,499272129,"b""let's avoid having this customization on textColumn - this is generic class and we don't want to introduce any such customizations here. Either create subclass of textcolumn or handle that outside. """
11191,499272541,b'n/a or stars?'
11191,499350336,b'removed'
11191,499350403,b'done'
11191,499350462,b'done - handled outside'
11197,499507867,b'What is the meaning of Max on change vectors?'
11197,499508008,"b'Same, what is the meaning here?'"
11197,499509578,"b""I don't like this approach. There is no good way for us to do more interesting stuff here.\r\nBetter to do something like multi map with providing multiple queries.\r\nThere is also the issue of how to handle this on the client side? I don't like the kind we have right now"""
11159,499562921,"b'The rate of change within a range (only works with group by)\r\ni.e. `slope = dY/dX`, dY = `range.LastVal - range.FirstVal`, dX = `(range.End - range.Start).TotalMilliseconds`'"
11159,499612297,b'ok I thought  it uses linear regression'
11203,500129212,"b'Please return something here. This is a debug endpoint, and we expect some JSON'"
11203,500131005,b'I think it would be better to rename it to `/databases/*/alive` or `/databases/*/healthcheck` and return no-content. There is no need to return anything.'
11203,500131408,b'internal'
11203,500174574,b'What about backward compatibility? If you are connecting to a server version that does not have this endpoint then what will happen?'
11203,501491527,b'nameof(RouteNotFoundException)'
11205,501268692,"b""I don't see the point to detect if we should flatten or not. Just check if settings are present if yes then call flatten and this is end of story. \r\n\r\n```\r\n  function flattenObject(obj, parent, res = {}){\r\n    for(let key in obj){\r\n        let propName = parent ? parent + '.' + key : key;\r\n        if(typeof obj[key] == 'object'){\r\n            flattenObj(obj[key], propName, res);\r\n        } else {\r\n            res[propName] = obj[key];\r\n        }\r\n    }\r\n    return res;\r\n}\r\n```"""
11205,501268885,b'see: https://stackoverflow.com/questions/44134212/best-way-to-flatten-js-object-keys-and-values-to-a-single-depth-array'
11205,501488394,b'done'
11210,500988422,b'can we also have `Current = V50001` and use that in the Initialize?'
11210,501047907,b'done'
11210,501468205,"b'Why do we have all of those asserts here? If we are validating this, let\'s move all of this to a `[Conditional(""DEBUG"")]` method.'"
11210,501468361,"b'Same here, this is debug only code, no?'"
11210,501468517,b'What is the difference between the versions?'
11210,501468783,"b""wouldn't it be better to use `double.IsNaN(Convert.LongToDoubleBits(value))` ?"""
11210,501469073,b'Why do we check all the items in the array?'
11210,501469646,"b'It is all under `[Conditional(""DEBUG"")]`'"
11210,501470604,"b'it is the impl of `double.IsNaN`, so I avoid the double conversion (from `long` to `double` and then back from `double` to `long`)'"
11210,501471102,b'different issue...  we might have duplicate timestamps :/ '
11210,501471924,b'Eventually this check is used to decide whether we can use the `StatefulTimestampValueSpan` of the segment or not.\r\n'
11210,501472817,b'can you add a comment explaining the reasoning'
11211,501272577,b'let -> const'
11211,501275216,"b""I don't see declaration of: showSearchSmallScreen anywhere. Did you forgot to commit all files? """
11211,501275489,"b""do we need this id here? I don't see any usages. """
11211,501632287,"b""I didn't stage it. Fixed it now."""
11215,501651313,"b""Let's add a small delay here, to avoid tight loop"""
11215,501651759,b'cosmetics: `server.Dispose == false`'
11228,502897137,"b""Don't we need other changes in server side code to handle that? I can see this is only cs file touched in this PR. """
11228,502897350,b'ok answer is here: https://issues.hibernatingrhinos.com/issue/RavenDB-15680#focus=Comments-67-51338.0-0'
11228,502899515,"b'Why is this Obsolete? This was never released, we can simple remove it, no?'"
11228,502909298,b'Why the name contains `Include...` ?'
11242,503342581,"b'But that is what happened here, no? We had two values for the same reduce key'"
11227,502899926,b'Why is the `nodeTag` optional?'
11227,502902775,"b""It shouldn't be, but changing this might cause a compatibility issue."""
11227,502909562,b'be consistent. `node` -> `nodeTag`'
11227,502909572,b'nodeTag'
11227,502909758,b'nodeTag'
11227,502910034,b'just `NodeTag`'
11227,502910094,b'create a separate ctor\r\nthis breaks binary compatibility'
11227,502910149,b'nameof(GetNextOperationIdCommand .NodeTag)'
11227,503042253,b'done'
11227,503042304,b'done'
11227,503042336,b'done'
11227,503042371,b'done'
11227,503252353,b'nodeTag'
11227,503252538,"b""It is called 'RaftCommandIndex' elsewhere? Why do you need this?"""
11227,503682520,b'done'
11227,503683114,b'changed. \r\nwe need this so we can wait for the index creation (in the cluster) before checking it for staleness.'
11242,503693780,"b'No, what happened here was the case above - `result.Count == 0` because we filtered out the results in a given page during the reduce phase.\r\n'"
11227,503721211,b'Why you expose this to the Client? Indexes are already created after execution of CreateIndex(Internal) ?'
11093,485464260,"b'- let\'s put it in `PerformanceHintsConfiguration.cs` file\r\n- configuration key - `""PerformanceHints.Memory.MinSwapSizeInMb""`'"
11093,485467834,"b'Isn\'t it too much? The recommendation in the issue (https://issues.hibernatingrhinos.com/issue/RavenDB-15524) was ""half the size of the memory?"".  \r\n\r\nWe don\'t have it configured in our cloud this way. @gregolsky told me we have 1 - 2 GB of swap. So especially on stronger machines we\'ll be getting that alert.\r\n\r\nCC @grisha-kotler '"
11093,485468021,b'minor: space after `if`'
11093,485468342,"b""Shouldn't we check this on Linux?"""
11093,485503097,"b'In windows, I was a recommendation for 1.5X of the physical memory\r\nAnd in Linux I found more detailed recommendation:\r\nPhysical | Swap \r\n  <2        | X2\r\n 2-8        | X1\r\n 8-64      | X1/2\r\n\r\nSo as constant ratio default the most reasonable value to me was X1 \r\nBut actually we can use a dynamic ratio'"
11093,485506514,b'I am not sure I follow your question.\r\nThe check here is because first I check it on docker on Linux and I got the host value of Swap so it is not relevant unless we will implement the `MemoryInformation.GetMemoryInfo` differently .\r\n'
11093,485520647,b'Did you docker instance had limited memory?\r\nWhat about:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.gcmemoryinfo.totalavailablememorybytes?view=netcore-3.1'
11093,485541794,b'The physical memory is correct but the swap is incorrect (as I saw )'
11093,485551261,"b""Note that this is about minimal swap size, not the recommended size. Unless we want to change that alert to recommend the swap size instead of alerting on the minimal.\r\n\r\nSince we're setting the default value dynamically it doesn't have to be constant. You can calculate it dynamically based on the platform and available physical memory size."""
11093,485552464,"b""@haludi I got the feeling that this is relevant only for Linux. But it's not. It verifies the page file size on windows as well - is that correct?"""
11093,486819578,b'What about my comment regarding this - https://github.com/ravendb/ravendb/pull/11093#discussion_r485551261?'
11093,486823357,b'Did you see my question?'
11093,496486355,"b""> @haludi I got the feeling that this is relevant only for Linux. But it's not. It verifies the page file size on windows as well - is that correct?\r\n\r\nMy check? yes.\r\nDo you think it should be applied only on Linux?"""
11093,496583671,"b'If your check verifies the size of a page file on windows then it\'s okay. Although then the hint message shouldn\'t mention about ""swap"" but ""the page file""'"
11093,498045268,b'Write that this only applied to Linux'
11093,498045650,b'On Windows-docker we are good?'
11093,498046749,"b""```\r\nThe current swap size is '{swapSize}' and it is lower than the threshold defined '{Configuration.PerformanceHints.MinSwapSize}'.\r\n```"""
11093,498048301,b'```\r\nYour system has no PageFile. It is recommended to have a PageFile in order for Server to work properly.\r\n```'
11093,502902034,"b'In Windows, we only check if there is a PageFile without looking at the size but I will run it on Windows Docker to make sure it works properly'"
11093,503254523,b'Does it work?'
11093,503254566,b'Ping'
11093,503254928,b'linux -> Linux'
11093,503256896,b'Are we sure that we want to raise an alert when on 128GB machine swap is lower than 64GB?'
11093,503333019,"b'No, if the half of the physical memory is greater than 8GB so we set it to 8GB'"
11093,503734365,b'You are correct \xf0\x9f\xa5\x87 '
11249,504407388,"b'Should be `$""{node}:{cv}""` also, let\'s get the outgoing failures. \r\nSomething similar to the endpoint `""/databases/*/replication/debug/outgoing-failures""`'"
11262,506281993,b'Should this be this high on 32 bits?\r\n```suggestion\r\n                : 512;\r\n```'
11262,506318579,b'Not sure if we want to be that conservative here? In other places the ratio is 1:4 so I thought that we could use that ratio here too.'
11265,506437811,"b""Shouldn't we return items to the cache here?"""
11265,506437862,"b""Shouldn't we return items to the cache here?"""
11269,507490345,"b""can't we just call super.update(dto) ?"""
11269,507490887,"b'this.ravenEtlConnectionStringsNames([...regularNames, ...serverWideNames]);\r\n\r\n'"
11269,507491007,b'by doing that we notify subscribes once'
11269,507491628,b'remove?'
11269,507491969,b'IIRC we use camelCase for event names?'
11269,507493944,b'did you report issue for Rafal?'
11269,507508443,b'removed'
11269,507509150,b'done'
11269,507509955,b'done'
11269,507517098,"b'can, done'"
11269,507520986,b'Will open all related issues shortly'
11270,507595791,b'Can we do this a regular field and we set it? That avoids the virtual method call at all time'
11270,507599339,b'done: https://github.com/ravendb/ravendb/pull/11272'
11276,507804590,"b""Why aren't we checking and then creating the tables, then?"""
11276,507852214,b'We do that after the _Schema Upgrade_.'
11276,508233507,b'Why not simply always return `etag = 0` and `null` when items are null instead of introducing a parameter?'
11276,508233576,b'Should be `true` ?'
11276,508441535,b'done'
11276,508441818,b'removed'
11280,508398250,"b'We need to dispose this instance, I think'"
11280,508592633,"b'Is this correct? To dispose the certificate created by `GenerateAndSaveSelfSignedCertificate` ? It is used by the whole test suite. Maybe it is fine, because we are creating a new instance here, but I would like to double check.'"
11280,508988585,"b'I think it is fine, since we use `dummy.ServerCertificatePath` (which is a path and not the certificate itself).'"
11306,510870431,"b""This isn't correct, you remain on the same term that you are already know is too small"""
11298,510105832,b'What is the certificate?'
11293,511559298,b'Why not always to use `clusterNodes` ?'
11310,511790481,b'This needs to be done explicitly in BulkInsert. Like we do in Session.\r\nCheck here:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/52bb0beee6fe674b6f245433bbc82e442709e7d2/src/Raven.Client/Documents/Session/InMemoryDocumentSessionOperations.cs#L217-L219'
11310,511829330,"b'Please make it more user friendly, similar to what we have here: \r\nhttps://github.com/ravendb/ravendb/blob/f2fad77b13ce1f94a80b84c549fd615ad70db1c5/src/Raven.Client/Documents/Session/InMemoryDocumentSessionOperations.cs#L1119 '"
11300,510171360,b'I wonder if we can value null for this search ?'
11300,511651166,"b'IIRC talked to use null as a value here, right?'"
11300,511908949,"b'As discussed, currently leaving `analyzersNamesDictionary` & `IndexingWithSearchImplied` as is'"
11311,511596240,"b'You are modified the `size` and If the size is larger than 1MB, Will you return here more than you allocated??\r\n'"
11311,511596423,b'And zero it beyond the range.'
11311,511596799,"b""It is fine to return more than the requested size, yes.\r\nWe aren't zeroing the data here, the caller will do that when they return the data back.\r\n"""
11311,511630958,"b""Even here you will be over-allocating alot, just like before.\r\nlet's say you requested 275,000 pages (~2.1GB), next power of 2 of that is 2^19 = 524,288 pages which is 4GB of size.\r\nI guess you need to keep the original numberOfPages.. """
11311,511632939,"b'Sigh, sorry, that is me being silly. I wanted to avoid power of 2 if the size is greater than > 1MB'"
11311,511782801,b'Is this used?'
11313,511649592,b'why do we need html element here and some list? '
11313,511649599,b'missing ;'
11313,511649973,"b""why new definions? Can't we use existing (for example we have copy on document edit page) - it those copy styles are scoped, then we should move them to global scope and reuse. """
11313,511753370,b'done - refactored so that all places use the same global definition'
11313,511753414,b'done'
11313,512223180,b'done - refactored.'
11229,502910723,"b""Query without boost would look like:\r\n```\r\nfrom 'Docs' where search(StrVal1, $p0) and (search(StrVal2, $p1) or search(StrVal3, $p2))\r\n```\r\n\r\nThe missing `( )` inside the boost expression will not affect how Lucene generates (and then interprets) query?"""
11229,502911934,"b'No, the `()` is there to ensure order of operations, the `boost()` serves the same purpose.'"
11229,511795686,b'Issue with failing tests is here. We are using singleton.'
11229,511795763,b'Issue with failing tests is here. We are using singleton.'
11309,512238376,b'HasClientConfigurationChanged'
11309,512239060,"b""Not sure that I follow. If new record does not have a configuration then it didn't change (assuming that the old one has) ?"""
11309,512239573,b'hasClientConfigurationChanged'
11309,512433077,b'The goal is to give the new client configuration the ETag of the database record.\r\nAnd to do that only if the client configuration changed.\r\nIf there is no new client configuration so there is no configuration to set the ETag.\r\nMaybe if I will change the method name (and variable) to `ShouldSetClientConfigEtag` or something similar it will be more clear?'
11309,512694974,"b""Let's go with that. Yes."""
11308,512443262,"b'Can we call ` reader.Norms(_parent.Field, state)` just once before the loop and pass the returned array here?'"
11308,512444245,"b""It would be nice to use `ArrayPool` here but I don't see where we could return it back to the pool."""
11308,512444740,b'Maybe add `[MethodImpl(MethodImplOptions.AggressiveInlining)]` ?'
11308,513240844,"b'Yes, there should be no reason to do so.'"
11308,513241781,b'We can probably override the `DisjunctionMaxScorer` methods and detect when it is at end. Not sure how useful that would be.'
11308,513562850,"b'Probably not, this is small enough that we should let the JIT decide.'"
11333,515631136,b'where are you wait to be notified about this?'
11333,515737333,b'I am testing the behavior of `LoadBalanceBehavior.UseSessionContext`.\r\nAnd there is no need to wait while in the new implementation the server sends in the header of `PutClientConfigurationOperation` request the need to update so the client does it immediately after this request\r\nhttps://github.com/ravendb/ravendb/blob/1936579b7a63b726e036eac4de2558e99ce0141e/src/Raven.Server/Documents/Handlers/Admin/AdminConfigurationHandler.cs#L143'
11333,515815616,"b'The update is done in the background, no? What happens if this takes too long?\r\nThat would make this a racy test, no?'"
11333,515933151,b'We do await for both the client configuration update task and the topology update task\r\nhttps://github.com/ravendb/ravendb/blob/3d7a25151b978e717edd9f3fab2e965b085b4a87/src/Raven.Client/Http/RequestExecutor.cs#L897'
11333,515977420,"b'Okay, then LGTM'"
11334,515917112,b'maybe we should use some const here ? '
11334,515982932,b'done'
11327,515590146,b'What is that?'
11327,515590274,"b'```suggestion\r\n        public static IEnumerable<(string Key, BlittableJsonReaderObject Cert)> GetAllCertificatesFromLocalState(TransactionOperationContext context)\r\n```'"
11327,515590464,b'We have to dispose this value.'
11327,515624535,"b'Do you ask about `CollectionSecondaryKeys`?\r\nAs I understand it if the user supplies PFX that contains more than one certificate we save each one separately but we present all of them as secondary except to the first.\r\n\r\nBut your question makes me think about how the decision here should be.\r\nThe idea here is to give the user sufficient information to call for the edit but the original problem was to prevent sending sensitive data through the wire so maybe it would make more sense to divide it by sensitivity?\r\nSo if we want to keep `CertificateDefinition` unchanged to not break anything:\r\n```\r\npublic class CertificateDefinition : InsensitiveCertificateDefinition\r\n{\r\n    public string Certificate;\r\n    public string Password;\r\n\r\n    public DynamicJsonValue ToJson(bool metadataOnly = false)\r\n    {\r\n        var jsonValue = base.ToJson();\r\n        if (metadataOnly == false)\r\n        {\r\n            jsonValue[nameof(Certificate)] = Certificate;\r\n        }\r\n        return jsonValue;\r\n    }\r\n}\r\n\r\npublic class InsensitiveCertificateDefinition\r\n{\r\n    public string Name;\r\n    public SecurityClearance SecurityClearance;\r\n    public string Thumbprint;\r\n    public DateTime? NotAfter;\r\n    public Dictionary<string, DatabaseAccess> Permissions = new Dictionary<string, DatabaseAccess>(StringComparer.OrdinalIgnoreCase);\r\n    public List<string> CollectionSecondaryKeys = new List<string>();\r\n    public string CollectionPrimaryKey = string.Empty;\r\n    public string PublicKeyPinningHash;\r\n\r\n    public DynamicJsonValue ToJson()\r\n    {\r\n        var permissions = new DynamicJsonValue();\r\n        \r\n        if (Permissions != null)\r\n            foreach (var kvp in Permissions)\r\n                permissions[kvp.Key] = kvp.Value.ToString();\r\n\r\n        var jsonValue = new DynamicJsonValue\r\n        {\r\n            [nameof(Name)] = Name,\r\n            [nameof(Thumbprint)] = Thumbprint,\r\n            [nameof(SecurityClearance)] = SecurityClearance,\r\n            [nameof(Permissions)] = permissions,\r\n            [nameof(NotAfter)] = NotAfter,\r\n            [nameof(CollectionSecondaryKeys)] = CollectionSecondaryKeys,\r\n            [nameof(CollectionPrimaryKey)] = CollectionPrimaryKey,\r\n            [nameof(PublicKeyPinningHash)] = PublicKeyPinningHash;\r\n        };\r\n        return jsonValue;\r\n    }\r\n}\r\n```'"
11327,515635785,"b""I think that there is some issues with the reason for this feature.\r\nThis is _not_ about security. We assume the following:\r\n\r\n* The connection is encrypted between us and the server.\r\n* The certificate we keep is the public info only.\r\n\r\nThis is mostly so we'll not need to download and send back the certificate on each time. Users want to be able to provide a way to edit permissions on a user using just the thumbprint of the certificate.\r\n"""
11327,515738918,b'But the user still needs to get the old configuration so he could edit it and resend to the `edit` endpoint.\r\nSo it is all about the size of the request/response here?'
11327,515816588,b'I think that this is mostly about the ease of use.\r\nWhat if we change things up.\r\nAdd an `EditPermissions` operation that would allow simply replacing the permissions by thumbprint?'
11327,515816682,b'Without updating anything else?\r\n'
11327,515888451,"b'I think that this operation is already lightweight enough. Why making it more complex, adding an endpoint or any other additional logic?\r\n\r\n```\r\nstring thumbprint, string name, Dictionary<string, DatabaseAccess> permissions, SecurityClearance clearance\r\n```'"
11327,515888870,b'formatting'
11327,515888921,b'formatting'
11327,515889688,b'introduce nested `Parameters` class (we do not that in other places) and use those. Easier to extend in the future.'
11327,515890199,b'what is wrong with using `using` ?'
11327,516480997,b'So if it is not about sensitive data maybe I will remove the `metadataOnly` if it is not necessary (include the division to CertificateDefinition & CertificateMetadata)?'
11327,516490473,b'No'
11340,516554072,"b'IIRC, that would actually reduce the number of small machines, no?\r\nThe default is ~25 ?'"
11340,516557003,b'No. The default is the number of processors on a system. \r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.setminthreads?view=netcore-3.1'
11326,515804316,"b'This should yield same result without type conversions, right?\r\n`var distance = ticks - _start.Ticks; ` // keep it long\r\n`var ticksToAdd = ((distance / Ticks) * Ticks)`'"
11338,516263194,"b""can't we loop in both array = then no need to relay on starts with + use const not let. """
11338,516263713,b'why? btw. please use ; at the end of line in interfaces. '
11338,516263779,b'same here. '
11338,516263905,b'do we need computed here? Looks like it can be computed one time. '
11338,516565408,b'done'
11338,516565706,b'done -removed computed from here'
11338,516565786,b'done'
11338,516565837,b'done'
11338,516575785,b'why do we assign this to variable? Can;t we just call Prism.highlight when creating samples?'
11338,516617114,b'right... done'
11318,516485105,"b'Pretty sure that this is wrong, no?'"
11318,516485923,"b""What is the base directory? shouldn't this be under indexes?"""
11318,516490087,b'I think that this needs to be a configuration option.'
11318,516490388,b'Add package name here.'
11318,516490604,"b'Do we need to worry about timeouts here? This can take a _while_, the ML package is > 100MB.'"
11318,516492231,"b'Should we filter that? If they enabled logging, how do we see that?'"
11318,516564749,"b'This was generated by VS, but I will use R# to do it.'"
11318,516565241,"b'Index compiler is static, loaded assemblies are also application-wide. So it is in the main directory. I think it is correct?'"
11318,516565589,b'We can do that. Yes.'
11318,516620629,b'I do not know. Very low level messages. Your call.'
11318,516620840,b'Timeouts are controlled by the CTS (None). Do we want to introduce some or infinite is OK?'
11318,517371026,"b'That also compare using just the instances, not the values in them, no?\r\nYou need `SetEquals` here, IIRC'"
11318,517371267,"b""Pretty sure this doesn't compute the hash on each of the values"""
11318,517390397,b'Fixed.'
11318,517390518,b'Fixed.'
11318,517392943,b'yes'
11318,517393279,"b""My main issue is whatever the index creation is going to take a long enough time that we'll get a timeout on the request.\r\nWhat do we do then?"""
11318,517393400,b'Leave it like that for now'
11318,517394321,b'There is no timeout set on those requests IIRC?'
11318,517657070,b'I wonder if we want to clear those fields or just ignore them when saving? '
11318,517657434,b'put { at the end of line'
11318,517658125,b'can we move this logic to view? Like we talked 2 days ago: playing with UI directly in model is blending layers. '
11318,517659250,b'can we put autocompete on form elemnt instead of putting this on every input? '
11318,517802542,b'done'
11318,517807516,b'done'
11318,517809031,b'done - ignore relevant fields upon save'
11318,517825021,b'done'
11318,517826268,b'no need for this variable'
11318,517826344,b'please avoid as operator '
11318,517828055,b'removed'
11318,517831643,b'done'
11364,519167804,"b""shouldn't we return null here? Or a message that the platform is not supported?\r\nOn what platform isn't this supported?"""
11364,519167849,"b'This can throw, no?'"
11364,519169095,b'Done. Not sure which OS can throw this. Docs state it can throw that ex: https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.ipglobalproperties.gettcpipv6statistics?view=netcore-3.1\r\n\r\nWin7 maybe?'
11364,519174615,"b""No info in docs, but I got ex on a property where there was also no info, so I've added helper method to retrieve this safely."""
11364,519283333,b'Should we return empty array here?'
11364,519283502,b'This can return null'
11364,519283543,b'Can return null'
11364,519283784,"b'Should we return an empty object, instead?'"
11364,519293115,"b""Every extension method that I've added checks that."""
11364,519293151,"b""Every extension method that I've added checks that."""
11364,519293502,"b""No, I'm taking that into account in other extension methods. Also all of the implementations are internal."""
11364,519293808,b'I do not think so.'
11315,512061126,"b'Can we provide additional information here? In particular, what was merged, context, etc?\r\nhttps://github.com/ravendb/lucenenet/blob/3.0.3-netcore/src/Lucene.Net/Index/MergePolicy.cs#L72'"
11315,512061868,"b""Number of items that are being merged is also interesting\r\nAlso, I think we should be able to set a time limit, no?\r\nSo we'll only allow a certain amount of time to go here, then force a merge if we need to when the index is idle?"""
11315,512228799,b'`Storage/CopyFileStream` ?'
11315,512233695,"b""I think it would be better to release this after the commit, in some using so if something goes wrong we will not stay with 'leftovers'"""
11315,512236040,b'We have IndexingRunStats so it should not be a problem. We can just copy implementation of SerialMergeScheduler (https://github.com/ravendb/lucenenet/blob/3.0.3-netcore/src/Lucene.Net/Index/SerialMergeScheduler.cs) and write our own that will accumulate this.\r\n\r\nWhat would be a reasonable time limit? What is the impact of not doing merges?'
11315,513269276,"b""removed since it doesn't consume much time"""
11315,513269353,b'done'
11315,513270533,"b""Setting a time limit doesn't improve performance. It just delays the merge to the next batch.\r\nI added the merge details."""
11315,513324490,b'Can we have a better name here? Maybe `TimeTrackingIndexWriter` ? Something that would indicate that that it updates the timings of the stats'
11315,513325826,b'Same here - `TimeTrackingSerialMergeScheduler` ?'
11315,513328525,b'Can we require to pass `_mergeScheduler ` to the constructor of `new CustomIndexWriter` instead of setting it this way?'
11315,513329303,b'Did you change the default behavior?'
11315,513346366,b'done'
11315,513346418,b'done'
11315,513346524,b'done'
11315,513347202,b'waitingForMerges: true triggers a new index merge (if needed)\r\nWe are already doing the merge during the commit stage.'
11315,513348010,"b'It could be a leftover from 3.5 when we had a concurrent merger, now we have a serial one?'"
11315,513729496,"b'very likely, this also had the issue of the deadlock'"
11315,513730352,b'TBD - put a limit on how much time we allow this to run.'
11315,514931627,b'Indexing.MaxTimeForMergesToKeepRunningInSec'
11315,514934093,b'I will fix it'
11376,519638203,"b""TimeSeriesRetriever also requires changes. The parameter there is called 'isFromStudio'"""
11376,519666877,b'done'
11372,519708342,"b""This is here on purpose. \r\nThe idea is that even if the Thread Pool is backed up, we have a dedicated thread that would still churn through those tasks.\r\nWe need to make sure that we aren't doing that twice, mind you."""
11372,519746407,"b'The task executor make a competition between the dedicated thread and a TP thread.\r\n\r\nThe problem that we had, is that the Task Executor run a never ending task, it got stuck, all operations completed by the TP, but the queue of the Task Executor exploded. \r\n\r\n'"
11372,519746740,b'So I left only non-blocking operations to be run by the Task Executor'
11372,519747374,"b'Okay, yes. `TaskExecuter`  is for very short notifications, yes.'"
11372,519747551,"b'Like here,, no `NotifyFeaturesAboutStateChange` ?'"
11372,519801895,b'it is not short :-) \r\n1. It try to get a lock .. in a loop.\r\n2. It handles every feature change.. '
11385,520362319,b'Wow! Nice catch.'
11370,519343173,b'What will happen at this point?'
11370,519343347,"b""This is something that we really want to avoid. We are turning everything to async, so let's make this async and wait in the long running thread, instead."""
11370,519343485,b'Why do we retry at this length? '
11370,519354916,"b""Nothing will happen. It will be caught in the catch block, logged, and ignored. Then we'll try in the next time we have to sync (30 min)"""
11370,519355485,"b""I figured we don't get a result because of the cloud provider. We need to wait but for how long? Well, I just thought that one minute is a long enough period to get new results from the provider\r\n."""
11370,519357240,b'Yes of course.'
11370,519375655,"b'But at this point, we have 5 minutes that went by with no visible action, right?'"
11370,519375841,"b'The question is, why do we need to wait at all? We already have a periodic check, no?\r\nWhy hold up the thread for so long?'"
11370,519411095,b'Ok. I merged it with the existing loop.'
11370,519411352,"b'I merged the logic with the main loop, it will try to sync every minute until we get a valid result.'"
11370,519727593,b'Huh? Why not `Interlocked.Read` ? \r\n'
11370,519751477,"b""Because Interlocked.Read doesn't work for int, just long.\r\nThis is infact like Interlocked.Read. It performs an atomic read operation with no writing."""
11370,519760189,b'Does it matter? Do you want me to change the type to long and use Interlocked.Read?'
11370,519772885,"b'It mutates the data (more expensive. Can use `Thread.VolatileRead` instead, I think'"
11370,520407608,b'Few questions:\r\n- why this is not bool?\r\n- getting/setting bool is atomic\r\n- why do we care here about interlocked/volatile/etc?'
11370,520417455,"b""Actually, we don't really care.\r\nThe reason I did this is to be consistent with the above RemainingCpuCredits variable where it's actually important. So I guess I'll just use a normal bool there."""
11315,520433007,b'This should me: `Indexing.MaximumSegmentsMergeFactor` ?'
11315,520510298,"b""I didn't expect 1GB to be our default (I was thinking about 4GB). Does it mean that even if we limit the merge size significantly it doesn't affect the querying performance much?"""
11315,520511136,"b""So 'factor' is number of segments? Is that description correct?"""
11315,520511467,b'Can be removed'
11387,520419953,"b""Wouldn't it be better to get auth status from elsewhere? It would give you more flexibility in the UI e.g.\r\nLicense can be renewed, but you are not auth as Cluster Admin is a different case than License cannot be renewed at all."""
11387,520570956,b'done'
11393,520871040,b'please escape'
11393,520876268,b'done (forced pushed the fix)'
11315,521392048,b'This is the minimum size that Lucene is considering for segment merging.\r\nI had 10 segments of 3.9GB each which were merged to a single one of ~40GB.\r\nResulting in tx of 40GB (40GB of scratch files and ~80GB of compression buffer).\r\nThis single transaction took about 3 hours to complete.'
11315,521392249,b'It is the max size of a single segment that we consider for merge.'
11285,512226081,b'change return type to List<string>'
11285,512226447,"b'avoid Linq, by the way... kv.Value.Any is better because it looks for a first occurence'"
11285,512227133,b'it looks like you are doing this calculation for each document and it can be done once in ctor?'
11285,512227707,b'why first?'
11285,515631168,b'refactored this code'
11285,515631456,"b'if there is a request for range on `@all_timeseries` we forbidding to use additional ts includes, so it always going to be single.'"
11285,517379755,b'redundant ?'
11285,517383706,b'Do we want to skip or add an empty result?  Do we have a test for this case?'
11285,517383882,b'same'
11285,517386895,b'Why not to pass cr.Count to page size? or `TimeSeriesCountRange` is something else?\r\n\r\nI think it should have `From` & `Count` ?'
11285,519854522,b'When can it be `null` ?'
11285,519863202,"b""Wonder if this should be `ToLowerInvariant'"""
11285,519867215,"b'This is if an old client try to connect, right? What will happened here? \r\n'"
11285,520456697,"b'skip,\r\nfor reference on `TimeSeriesRange` if `result == null` dictionary returned without empty result'"
11285,520460381,"b'its case when last count requested is bigger then total count of ts, so I return all\r\nno, the TimeSeriesRangeType is Last'"
11285,520463317,b'if requested doc id wasnt found in the storage'
11285,520464531,b'the worker will be disconnected'
11315,521897320,"b""Is `MaximumSegmentMergeSize ` the correct name for that since it's about _min_ (not max)?"""
11315,521898481,"b""What's the unit of that size?"""
11377,519920356,b'Is it segments or the number of time series?'
11377,520396054,"b'This breaks backward compatibility. You can mark fields as obsolete, but the value should still be set in them.'"
11377,521133870,b'Segments'
11332,515616517,b'The types here are _very_ exact. Can it be other things? \r\nThis looks very fragile.'
11332,515616630,"b""Why is this required? The tag on the attachment is for debug only.\r\nWe don't actually need to rename it."""
11332,515616693,b'What if we have three duplicates?'
11332,515632910,b'this is returned from the attachments storage:\r\nhttps://github.com/ravendb/ravendb/blob/ff622ad5b817a4245e8011e0a5779599236f1511/src/Raven.Server/Documents/AttachmentsStorage.cs#L146\r\nand the values are from table'
11332,515633414,"b""yes the unique value is key, but we don't allow attachments to have same name when it is added from studio or Client API. Conflicts in replication can cause such scenario, which in place can break other things like patch."""
11332,515634378,"b""What happens if we have _another_ conflict? Then we'll have a duplicate on `resolved_name`, no?"""
11332,515634412,"b""That is fragile. If we'll change this in the future, there is no indication that this is related."""
11332,515634541,"b'The only chance for this is when the doc already has attachments with duplicate names (got conflicted before this PR merged) and gets into conflict again after this PR merged. For normal doc, after this PR there is always going to be max 2 duplicates.\r\n\r\nWe can treat this issue by handling here the > 2 duplicates case or do schema update to rename attachments with duplicate  name'"
11332,515845626,b'done'
11332,515861827,b'done'
11400,521906425,b'do we need this check here? I think we should just disable button? '
11400,521906638,b'use const?'
11400,522076584,b'update this method to never return null. '
11400,522492437,b'removed'
11400,522492483,b'done'
11400,522492514,b'done'
11332,522726482,b'Under what scenario do we want this behavior? We should always resolve things automatically'
11332,522726915,"b""This is effectively random, why do you do this?\r\nAlso, it isn't guaranteed to be the same on different nodes"""
11332,522727194,"b""I don't think we want this"""
11332,522728016,"b""Can use `_1`, `_2`, etc instead.\r\nCan use random value, etc.\r\n\r\nWe can't throw here."""
11332,522728361,"b""Shouldn't this be a missing attachment error?"""
11332,522728750,b'Why do you care about the attachment name? Only the hash matters to us'
11409,522457543,b'please use map instead of foreach.\r\n\r\nconst additionalAssembliesDto = this.editedIndex().additionalAssemblies().map(x => x.toDto());'
11409,522473036,b'done'
11409,522733196,b'usingsArray can be null. You need to wrap the code below in `if`'
11409,522858838,b'done'
11332,523446013,b'Right... we need some deterministic way to order them.\r\nMaybe rely on the CV for that? (But I guess we need to order it internally as well)'
11332,523734602,"b'Ordering by CV will be a good idea, yes.'"
11315,523735284,b'done'
11332,523740765,b'This is to prevent from adding an attachment in conflict resolver script\r\nhttps://github.com/ravendb/ravendb/pull/11332/files#diff-0274c68798c060bc7f04679d2b76c93d9d1f92404872601fcf7d4e7f547b224fR1951'
11332,523741116,"b'The duplicate names was the original issue we had to solve, because duplicate names can break patch and should be disallowed'"
11332,523741747,"b'`RenameAttachment` should not fail, its a precaution so it can be resolved manually if something goes wrong and we cannot add 1,2, random value, because this is result of script of the `ScriptResolver`'"
11332,523741825,b'this is to mark the doc as conflicted'
11384,520379055,"b""1. I don't think we can do that. If there is no transformation script we just put a document as is. So we need to have the read transaction open while sending data to a destination:\r\n\r\nhttps://github.com/ravendb/ravendb/blob/18a605ad027854aae791f060265cd21e30d064e7/src/Raven.Server/Documents/ETL/Providers/Raven/RavenEtlDocumentTransformer.cs#L277\r\n\r\n2. How this code could cause any regression - https://issues.hibernatingrhinos.com/issue/RavenDB-15713 - since we have it from the beginning?"""
11384,520383504,"b""Now I understand how you found https://github.com/ravendb/ravendb/pull/11385. Because tests here are causing this. I believe because you're tying to access data after disposing the read transaction"""
11384,520396701,b'You are correct on both comments :-)\r\nStill investigating.. '
11384,521963119,b'Not a good idea for public method in request executor. Use async one or write a helper method in replication loader.'
11384,521963649,b'use `using` to dispose. What will happen if commit will throw?'
11395,521939404,"b""Shouldn't we use QueryFieldUtil.EscapeIfNecessary ?"""
11425,524295089,b'@ppekrol do you know any good spot we can parse this out from? csproj?'
11301,510343870,b'Should the compare and move next go here?'
11301,510344122,"b""In this case, won't we cause a memory leak? What will clean up old values here?\r\nIn general, I think we are better off having a class here, which will hold all those properties.\r\nThere is a single instance per collection, no?\r\n"""
11301,510345907,b'Probably better to remove this and just state that the `CanContinue` will do a check every N items'
11301,510346628,"b'Under what scenario can we have a _lot_ of values for a counter / time series? That is effectively well bounded, no?\r\n\r\nA single compare exchange may be used by many documents, though.'"
11301,510347270,"b'This is racy, even if we did have 5 batches, we may not get notified on them in time, no?\r\n'"
11301,510347514,b'that is the right want to handle this'
11301,510347562,b'add a timeout'
11301,510347643,b'racy'
11301,510358513,"b'Since I changed the code, we now get the document id _before_ it was processed so there is no need to do that.'"
11301,510358819,b'done'
11301,510359628,"b""There can be and I don't take that into account (if we have the same id for compare exchange and a document for example)"""
11301,510359805,b'fixed'
11301,510359914,b'done'
11301,510360624,b'done'
11301,510362302,b'I clear it after a successful References batch.\r\nhttps://github.com/ravendb/ravendb/pull/11301/files#diff-37a2d054996e0ffcdc07cf1e752cbc4d6c5b9babbe0ba563f577ab7b119adfb8R328'
11301,510732726,"b""Shouldn't be ` != 0` ?"""
11301,510734893,"b'No, I want to do the actual check every 128 items.'"
11301,510735072,"b'And... you are of course, correct.'"
11301,510775327,b'Do we want to avoid doing this for every item? Should this be also done every 128 items?'
11301,510775907,b'LastProcessedReferences'
11301,510776036,b'ReferencedItemId'
11301,510776163,b'ReferencedItemEtag'
11301,510776925,b'referencedDocument => reference (it is not always document)'
11301,510777004,b'referencedDocument => reference'
11301,510777445,b'why nesting that inside LastProcessedReference? It should stay in HandleReferences?'
11301,511561739,b'done'
11301,511561766,b'done'
11301,511561798,b'done'
11301,511561851,b'done'
11301,511561886,b'done'
11301,511562205,b'done'
11301,511563408,b'done'
11301,518601008,"b'Need to update this comment, no?'"
11301,518601065,"b'Need to update this comment, no?'"
11301,518601114,"b'Need to update this comment, no?'"
11301,518601155,"b'Need to update this comment, no?'"
11301,518601288,"b'Need to update this comment, no?'"
11301,518601307,"b'Need to update this comment, no?'"
11301,518601347,"b'Need to update this comment, no?'"
11301,518601417,"b""Need to update this comment, no? Better yet, let's make this a const."""
11301,518609917,b'Where was this done?'
11301,518787823,b'done'
11301,518787930,b'done'
11301,518789686,b'done'
11301,518789741,b'done'
11301,518789809,b'done'
11301,518789869,b'done'
11301,518790102,b'done'
11301,520446210,"b""It's not about the length of references but it's about the size of etags, right? So maybe let's rename to `GetReferenceEtagsSize` or something like that"""
11301,520446705,b'GetCompareExchangeReferenceEtagsSize ?'
11301,520461712,"b""Maybe let's use above `For` method?"""
11301,520465773,"b""This method is supposed to be called just _one_ time in a given batch because of below `AfterCommitWhenNewReadTransactionsPrevented ` action (so no guarantee in order or processing attached actions). Is that correct?\r\n\r\nIf yes, then can we add some debug assertion for that. Relaying on the assumption that this is supposed to be called just once is a bit fragile. I'm for adding something that will protect us in the future."""
11301,520468727,"b'Resharper warning - Class `Reference` hides class from outer class.\r\n\r\nBecause in `HandleReferences.cs`, that is partial, you have another:\r\n\r\n```\r\npublic class Reference\r\n        {\r\n            public LazyStringValue Key;\r\n\r\n            public long Etag;\r\n        }\r\n```'"
11301,520470980,b'commited -> committed'
11301,520471604,b'Why this is a dictionary since we use only `_collection` as the key?'
11301,522865445,"b'it can be called multiple times during a single indexing batch, but only once per collection'"
11301,522865470,b'done'
11301,522865511,b'done'
11301,522865570,b'done'
11301,522865593,b'done'
11301,522865774,b'done'
11301,522865840,b'done'
11301,522922953,b'Okay. Then we can add some debug code that will validate that this is called only once per collection in a batch?'
11301,524340687,b'Done'
11419,523942626,"b""isn't better to use: https://github.com/ravendb/ravendb/blob/135743f79f7a52bfb0f747c432689039f8ed4f15/src/Raven.Studio/typescript/models/database/cluster/clusterTopology.ts#L10 \r\nfrom \r\nhttps://github.com/ravendb/ravendb/blob/v5.0/src/Raven.Studio/typescript/common/shell/clusterTopologyManager.ts#L13"""
11419,523951449,b'do we know if license is registered or no? '
11419,523951581,"b""I'd join last sentence with this one. \r\n\r\n"""
11419,523951736,"b'""In order to work"" - what\'s not working? '"
11419,524425493,b'done'
11419,524441401,b'Refactored text to be:\r\n\r\n![image](https://user-images.githubusercontent.com/17376974/99294236-74f87e80-284c-11eb-83a3-bff6324245f6.png)\r\n\r\n'
11419,524460415,"b""> do we know if license is registered or no?\r\n\r\nAs far as I see, at this point, we don't have this info\r\nThe '`registered`' observable https://github.com/ravendb/ravendb/blob/efba92603d4ba571907188e038c03b0b91250e13/src/Raven.Studio/typescript/viewmodels/shell/about.ts#L189\r\nreturns relevant info **only** when we have a cluster"""
11426,524499978,b'protected?'
11426,524501271,"b'Simplify it. Just load from the storage, if it is not there, calculate it and save it.'"
11426,524502155,b'Reference? IsReference?'
11426,524502424,b'We have IndexStorage for that. Move it there.'
11426,524502621,b'not needed?'
11426,524503984,"b'You could store last etag per each of the collection needed, then you could also apply that for references?'"
11426,524946271,"b""I don't particularly like the `Save` here. You are are mutating data in a way that is very subtle and hard to see. \r\nI would rather create this explicitly."""
11426,524958570,b'Cannot do that since this will break existing indexes.\r\nIt must be a new index or an index after a reset.'
11426,524959773,b'done'
11426,525077704,"b'I need the etag of the _referenced_ document when indexing a reference.\r\nActually, we can skip indexing references entirely until we reach the `LastDatabaseEtagOnIndexCreation`'"
11426,525077881,b'done'
11426,525078035,b'done'
11426,525263634,b'Done'
11426,526046400,"b""There is a mistake here, the variable should be called 'referencedItem'. It can be a compare exchange.\r\n\r\nDo the following:\r\n1. `referencedDocument` => `referencedItem`\r\n2.  change that condition to: `if (ItemsAndReferencesAreUsingSameEtagPool && _index._indexStorage.LowerThanLastDatabaseEtagOnIndexCreation(referencedItem.Etag))`"""
11426,526061839,b'done'
11426,526113711,"b""Actually, this isn't true.\r\nThe `referencedItem` is always a `referencedDocument` since you can only have `LoadDocument`."""
11440,526331441,b'I wonder if this can be `LazyCompressedStringValue`. Would it be safer to do: \r\n`foreach (string id in unusedDatabaseIds)`?\r\nWe have implicit conversion to `string` for both cases..'
11434,525185560,"b""Shouldn't we throw here as well?"""
11434,525186384,b'Why are you throwing here?'
11434,525187195,"b""No, you need to sort it by the string of the change vector, not this. I'm not sure how this will sort at all."""
11434,525188160,"b""I don't understand what you are doing here, can you explain?"""
11434,525188516,b'```suggestion\r\n                    return (from BlittableJsonReaderObject att in resolvedArray select JsonDeserializationClient.AttachmentName(att)).ToList();\r\n```'
11434,525194982,"b'This is when we resolve by script, we need to get same order of conflicted docs on all nodes/dbs, I used the hash of CV because it is the same for `A:1, B:1` and `B:1, A:1`, then ordered by `EnumerableHash`. '"
11434,525204366,"b'In the storage we already have all attachments for particular document id (both conflict + local).\r\nIn resolved document we have the attachments metadata which can be modified in script resolver.\r\n\r\nI get the attachments from storage to `storageAttachmentsDetails` then group by name, if I have more then 1 attachment in group, this mean I have duplicate attachments. Then I retrieve the `@metadata.@attachments` for resolved document and for each attachment in the group (duplicates) I check if I have the attachment in resolved metadata, if I do I mark it as `found` (so I don\'t have to check the resolved attachment so all next duplicates), for each next duplicate I ""resolve"" it according to the next logic: \r\n1. if `conflictResovler` doesn\'t have script I delete all duplicates, this mean only the attachment found in resolved metadata will be kept.\r\n2. if  `conflictResovler` do have a script I keep all the duplicates and rename them, by this we don\'t let the use modify the attachment using the resolver script.'"
11434,525205546,b'I think we should not throw here at all to not break the replication'
11434,525205554,b'I think we should not throw here at all to not break the replication'
11434,525212722,"b""You are calling GetHashCode, which isn't guaranteed to be identical\r\nNote that the change vector _has_ to be the same across nodes.\r\nThere is no way you can get `A:1, B1` and `B:1, A1` in our system. The node that generated this decided on the format, and all else will follow that"""
11434,525216061,"b""My issue is that you aren't syncing between the storage and document attachments.\r\nAnd why are you comparing to the document values on hash & content type? What does the script give you in this case?"""
11434,525857402,"b'@ayende you can have the situation of `A:1, B1` and `B:1, A1` and we consider this as an identical change vector.\r\nConsider two nodes send simultaneously and each of them resolve it independently.  \r\n\r\nBut I agree that `GetHashCode` on a string is not deterministic, I would say order them lexicographically by the dbId. '"
11434,525858849,b'I this possible?'
11434,525859879,b'Is this even possible?'
11434,525862268,"b'Note that you can define both `ResolveToLatest` and a script.\r\nIn that case, we try the script first and if we not succeed we will resolve to latest '"
11434,525862811,"b'You cannot get that. Only one server can generate a change vector, and the version it generates is what it will use.'"
11434,526145408,"b""The storage already have all attachments from all conflicts, when we put the resolved doc we recreate the attachments metadata from storage\r\nhttps://github.com/ravendb/ravendb/blob/v4.2/src/Raven.Server/Documents/DocumentPutAction.cs#L395\r\n\r\nIn this method I retrieve the attachments from storage so I have the merged attachments list, and manipulate the according to conflict resolution strategy.\r\n\r\nI compare the attachment from storage to attachment from resolved doc's metadata by name, hash, key (those 3 are part of the attachment key in the table). In this way I can know that I don't have to delete/rename this attachment in storage because it is in resolved metadata."""
11434,526155840,"b'changed to sort on string, and fixed the situation of `A:1, B1` and `B:1, A1` in cv'"
11434,526368003,b'if not found return false?'
11434,526369879,"b'instead, reuse `GetAttachmentsNameAndHash` or `GetAttachmentsFromDocumentMetadata` ? (move those methods `AttachmentsStorage`)'"
11434,526377442,"b'This looks very much as `MoveAttachment`, why not to use it?'"
11434,526382753,b'Why not to use the already existing `DeleteAttachment` ?'
11434,526663863,b'it uses partial key'
11434,526664079,b'it uses partial key'
11442,526949224,b'&  -> `&amp;` ?'
11442,526955184,b'done'
11422,524128885,b'Under what scenario can this happen?'
11422,524129064,"b""Also, shouldn't we also check for indexing errors?"""
11422,524136158,"b""We can change index to disabled only in one node. when that node tries to come back from rehab we don't want to promote him until the index is enabled.\r\nindex errors are being handled in https://issues.hibernatingrhinos.com/issue/RavenDB-15588"""
11422,524138075,"b'That would be a change in the same area of code, right?'"
11422,524141121,b'yes'
11422,524183828,"b'It means that we will stay forever in Rehab in this situation, is this what we want?'"
11422,528312010,b'What is the behavior that we _want_ here?'
11448,528325168,"b'Is there any more information that we can provide here. What _was_ the error, etc.'"
11448,528326549,"b""I don't think we save the reason after we log the state change"""
11443,528396363,b'Will `JsValue.Undefined` affect anything?'

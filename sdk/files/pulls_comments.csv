pull_no,comment_no,comment_body
528,92950778,"b""Ok, I wasn't sure which would be better. I don't remember my reasoning for going this way so I'll switch to what you agree on."""
1224,117336345,"b'In #1132, which was closed as a dupe of #1006 which this PR purports to fix, the repro occurs only when `TargetFrameworks` is defined in the project and `TargetFramework` is now. Are we sure it fixes #1132? Should we add another test to covers that scenario?'"
1224,117340596,"b""Good question. I don't remember whether I noticed and checked the one case without conflating the other."""
2028,173051337,"b'Almost. NB.GV uses this syntax: `1.2.3+gabc123`. Yes, g stands for git.'"
2028,173051406,"b""Where does `$(SourceRevisionId)` get set? And if it's empty, shouldn't you avoid appending to `$(InformationalVersion)` to avoid leaving an obvious hole in the added string?"""
2028,173051801,"b""If we haven't any precedent for `$(SourceRevisionId)` values yet, perhaps we can indicate they should assume that they are appending some `+` value to the version, semver 2 style. Just because technically there can be multiple build metadata identifiers specified, they should probably not specify `+` themselves (we should do that, or add `.` if there is already a `+` in the `$(InformationalVersion)` property)."""
2028,173249189,"b""It wasn't my idea, but I can't remember exactly where I'd seen the precedent for it. At the time I figured I'd follow the pattern others had established. It is a little inconvenient, I agree. """
2028,173250618,"b""I thought about nb.gv interop as well (thanks, @nguerrera). It won't be a problem because nb.gv already turns generation of this attribute off completely to avoid conflicts with the one it generates itself. """
2028,173584325,"b""One way to have a 'soft dependency' is change DependsOnTargets to AfterTargets. That doesn't fail if the target is missing. But it also doesn't guarantee that the antecedent runs first -- it just will in the common case."""
331,85586039,"b'If this is for .NET Core, why is it targeting desktop CLR?\n'"
13924,497665638,b'(this looks good to me?)'
44,75505585,b'They get deployed to $(MSBuildDir)\\Microsoft\\Managed. Yes the CSharp.targets includes the DesingTime targets if it exists which then brings in all the XAML files\n'
44,75766206,b'@mavasani  is adding integration tests and will presumably exercise the templates as part of that.\n'
44,75766397,"b'@nguerrera, once your assemblyinfo generation task is complete, we should remove this file from the template.\n'"
44,75766582,"b""Can't we use a version string here to line up with the version that's going to be built?\n"""
86,76093837,"b""@abpiskunov note that I've changed the name of the target to be consistent with the rest of the targets in this file. The XAML file needs to be updated on the project system side when you consume this.\n"""
86,76095257,b'Thanks. Fixed.\n'
92,76348108,b'The IsAnalyzer method feels odd. @natidea and I were just chatting - maybe the task can set the Type metdadata on the analyzer files as AnalyzerAssembly instead of Assembly and then this would flow more naturally?\n'
129,77890724,b'Call this ProjectSelector.pkgdef?\n'
129,77890808,b'The asset type should MS.VS.Package I think.\n'
129,77906532,"b'When my current open PR for VB templates gets merged in, we should probably move this key to the VB VSIX.\n'"
130,77917460,b'Fixed.\n'
130,78037623,"b""I thought netstandard20 is forking off netstandard13? In that case would we want to encourage netstandard16 as the default? Adding @terrajobst for guidance as he's working on a deck for the class library template.\n\nI will also rename the class library template to Class Library (.NET Standard) and make it have the regular C#\\VB class library icons \n"""
130,78042301,b'Made it 21 so that it comes after the desktop class library template.\n'
130,78050614,"b""Ok I'll make it netstandard16 for now to keep it consistent with the CLI and we can change it closer to RTM.\n"""
130,78073518,b'Alright. Changed it to 1.4\n'
132,78114923,b'We should probably move these files to a separate project. The web targets are different enough from core stuff that they should be in a different project. \n'
138,78618994,"b""If bin or debug was changed - it was almost certainly changed to be outside the project cone - in that case we don't need to add the Removes. Do we care about the case where it is changed to something inside the cone?\n"""
138,78619451,"b""What's a reasonable scenario for changing bin or debug to some other location within the same project? The scenario for moving it out is to either consolidate all outputs in one place or to not have output binaries interspersed with source.\n"""
138,79124544,b'@brthor - Added a DefaultExcludes property\n'
138,79124710,"b""Adding a BaseOutputPath is a change to common.props in MSBuild. I'm going to skip that change since I don't see any value in it. Feel free to log an issue if you think it's worth it.\n"""
152,79641086,"b""The web template still has project.json because it has a tools reference for which we don't have a PackageReference design yet.\n"""
152,79641846,"b""Yes these projects won't build without @nguerrera 's changes. They also won't build without updating the downstream tasks\\targets to respond to restore3 changes. This is, however, needed for restore3 and since we are using this branch to stage the work to switch over to restore3, I'm making this change so that we can in parallel work on fixing up tasks\\targets.\n"""
152,79642569,b'Fixed. Is the NuGet name for this is still netcoreapp1.0? Or is it netcoreapp1.0.1?\n'
152,79644817,"b'Added TF, TFI and TFV temporarily to simulate an inner build so that the sdk targets actually work and @natidea can fix them up in this branch.\n'"
152,79674527,b'Oops. Copy\\paste error. Fixed.\n'
152,79679519,"b""Yes that'll be nice. I can then remove the temporary proeprties I've added to the project.\n"""
154,79684801,b'Agree. We should probably call it something like CallInnerBuild or something like that to distinguish it from the actual Build target. #Resolved\n'
154,79685038,"b""Users may have items called TargetFramework. Can we name this item _TargetFramework or something like that so it's less likely to conflict? #Resolved\n"""
154,79685240,b'Also should it move into the Build target to scope the item to that target? #Resolved\n'
162,80157124,b'Oops. Yes. Fixed this in the merge to master PR.\n'
163,80253130,"b""There are two reasons for the cross-targeting test failure:\n- The test currently calls restore instead of restore3 which means a lock.json is generated instead of project.assets.json. Since this project has the TargetFrameworks property we expect project.assets.json. The test needs to call restore3. I have a change that switches all tests to restore3 but that revealed another issue in restore3. I've sent mail to @emgarten about that.\n-  Even if that issue is fixed, we need the latest CLI with the latest restore3 for the cross-targeting test to succeed.\n\nI'm thinking of filing a bug and disabling this test to let the merge go through and then follow up with a PR that switches tests to restore3 which can merge when we have all the restore3 fixes. This way we can atleast use the SDK to test PackageReference for non cross targeting scenarios. Any objections?\n"""
163,80276626,"b""Yes, brought this up NuGet yesterday. Currently restore couples TargetFrameworks with PackageReferences - meaning the assets.json is only generated for a project that has TargetFrameworks. This is incorrect since as you point out not all core projects need to have it and also that property has nothing to do with whether PackageReferences are read from a project file. This will need to be fixed when PackageReferences are enable for UWP for eg. I'll file a bug to track as well.\n"""
163,80277756,"b""This build will still have the restore3 bug that's causing tests to fail. So i'll take a drop of the new CLI in #164.\n"""
163,80278502,b'Yes - https://github.com/NuGet/Home/issues/3501\n'
186,80809086,b'These are the project jsons for the project that builds the template - it pulls in the VS SDK to build the template. This is not the template.\n'
188,81014311,b'The entrypoint emit is controlled by `<OutputType>Exe  vs <OutputType>Library`\n'
192,81871984,b'Was this the only change needed to get projects to target desktop?\n'
192,81876404,b'Ah ok. Makes sense.\n'
242,82893215,b'Oops :)\n'
262,83122285,b'Can we just make this bin\\$(Configuration)\\ unconditionally in all places? so that adding new configurations is not busted?\n'
282,83466697,b'Not sure I understand - This is just a discussion what the test should do right?- the change to the package will make it applicable for any TFM. Correct?\n'
331,85589831,b'This project builds the template vsix (on windows). The actual template Is https://github.com/codito/dotnet-sdk/blob/8ea2957a740f419b6df7213090eb2d65b1a48aec/src/Templates/ProjectTemplates/CSharp/.NETCore/CSharpXUnitTest/ProjectTemplate.csproj\n'
425,90174409,"b""The version folder won't be there now right?"""
425,90177683,b'Can we instead use $(MSBuildSDKsPath)\\nuget.build.tasks.pack\\.. to import?'
425,90177830,b'Why not just delete it instead of the TODO?'
425,90177862,b'Change name'
425,90177883,b'Change name'
425,90405668,"b""We still need ToolsVersion. Not having it makes VS pop up an upgrade dialog at the beginning and the change to fix that is not yet in. Let's separate the removal of ToolsVersion into a separate change"""
444,90558465,b'Fixed.'
444,90687742,b'Done'
461,91211580,"b'Per discussion on another thread, this should be conditioned on the TFM.'"
468,92012532,"b""Including *.cs means that every language that wants globs (like VB) will need to override. I like Nick's suggestion of moving this to the CSharp props file."""
505,92751151,"b""I don't understand - SigningConfig is moving from an item to a property? It should be $(SigningConfig) here then right? I don't understand why this needs to be a property instead of an item - what's broken?"""
510,92788990,b'Yes. Can we also make the project name\\folder name be CSharpNetStandardTemplatesSetup?'
510,92789621,b'Call these projects CSharpNetStandardClassLibrary as well?'
510,92881991,"b""Normally yes (in the extension manager dialog). However since these VSIXes will be marked as Productcomponent they won't show up in the package manager dialog. So no."""
461,92898642,"b""Not sure. I don't think anyone has tested that enough to enable it though. We can add it back if needed."""
465,92899089,b'Hmm.. Not sure. I think @natidea tried this but had to switch to desktop msbuild for some reason. Nat do you remember?'
510,93083697,"b""This shouldn't include the NET SDK - otherwise the same component is being included in two vsmanprojs. Ideally we should split out the SDK into a separate vsmanproj later when we move to the model for pulling in unzipped sdks."""
505,93087610,b'Ok this line needs to change then.'
489,93312306,b'NerCore.App is needed for netcore projects (even if the SDK is present). This is however a Desktop project - so not needed here.'
468,94067654,b'Is there an issue tracking this?'
468,94067830,b'Remove from here and get the PR ready for merging in?'
450,94210004,b'No check for DisableImplicitFrameworkReferences?'
450,94210013,b'Should this also be ReadOnly=true?'
450,94210051,"b""Where is this property defined and what's the relevance of adding this property to this change?"""
450,94514944,b'This ItemGroup should be deleted'
450,94515003,b'This too.'
576,94518974,b'Can you document this over at https://github.com/Microsoft/VSProjectSystem/blob/master/doc/overview/project_capabilities.md?'
582,94880451,b'Do we intend to add these back? can you file an issue for that?'
582,94880541,b'Again please file a bug on this.'
597,94912274,b'Isnt this line the only change you need to remove the node in the UI? I like having the folder in our repo to organize it better.'
608,95431720,b'If you sync this has already been fixed.'
608,95431974,"b""Actually no it's fixed in master but by using the new named parameter rootPath. Can you switch to that so that it's more self documenting?"""
608,95456861,"b""I think that just hides problems. Also longer term it's better to use the parameter name to document the code better."""
645,96108656,b'Did you mean to put this in the targets file?'
645,96108667,b'@davkean - will this make the tree show the properties node? You had some reservations against adding it. '
675,96720497,"b""A customer ran into a similar issue - https://github.com/dotnet/sdk/issues/679. Basically they had different casing for NetStandard.Library and we weren't deduping."""
687,96810117,b'Do you have to update the authoring in https://github.com/dotnet/sdk/blob/master/src/VsixV3/Microsoft.Net.Sdk.swr? Did the layout change?'
727,97837391,"b""You seem to fixed merge conflicts incorrectly. This change and the netci.groovy change shouldn't be there."""
762,98709532,"b""So in VS both 6.0.4 and 8 will get loaded or will the binding redirect be respected and only 8 will get loaded? \r\n\r\nAlso, the first time we tried multi-targeting, the deps file task blew up saying it can't find 9.0.1 because it was trying to load 9.0.1 right? Isn't that going to happen again?"""
797,99342508,"b""If a SDK-based project doesn't define a TargetFramework, do we issue an error today? I'm thinking if someone takes an existing project where TFI, TFV are set and makes it use the SDK and doesn't set TargetFramework, will we now think of them as not-single-targeting projects? """
805,99410304,"b""I think I'd say something like:\r\n\r\nProject '{0}' targets '{2}' but is being referenced from a project targeting '{1}' which is incompatible''"""
813,99447760,"b""Is there a way to know that this is the exhaustive list? Can you make sure to play with each property with the CPS Visible=False to make sure that it doesn't crash?"""
870,101404364,"b""Full msbuild means the one in VS. Pasting my comment to this thread as well:\r\n\r\nI assume it's not failing because the Jenkins machines won't have the corresponding change in NuGet.targets that adds a condition to skip import with these properties. When we move Jenkins to a build with the VS side change then it'll start failing"""
878,101816342,"b""Let's add a better comment here explaining why we are doing this."""
935,104208601,b'I think we can remove the comment. @emgarten is getting the nuget changes merged into the 15.3 VS branch today'
1090,110458234,"b""@abpiskunov I think you are thinking of the ResolvePackageReferences target. `CollectPackageReferences` is a separate target that currently just returns all the PackageReference items from evaluation. It is an extensibility point for some other tools\\package managers (say like Paket) to inject unresolved PackageReferences dynamically. It still requires a DT build (which is being performed anyway to run this target) but doesn't read the assets file and is quick. """
1140,112780209,"b""You'll need to delete this line."""
1173,114645286,b'It would be nice if we can detect the semicolon and issue a different error that says they probably should use TargetFrameworks instead of TargetFramework.'
1188,115321009,"b""The condition on TFM doesn't sound right. So netstandard libraries don't get these default imports?"""
1188,115321110,b'For that reason you probably also want a different property to disable the default imports.'
1188,115321449,"b""I'd say just drop System.Data altogether since that's not in the default set of referneces for netstandard\\netcore"""
1188,115331935,"b'We should use some new property instead of DisableImplicitFrameworkReferences - probably something like DisableImplicitImports. However for .NETFramework, we should check both properties.'"
1330,121233873,"b""It's not just facades - netstandard.dll for example won't have the Fa\xc3\xa7ade metadata but that needs to be reparented as well. Also why do we need to explicit check for NETStandard.Library? Can we just reparent items with NuGetPackageId and NuGetPackageVersion metadata under that package id,version?"""
1329,121481188,"b""The reason we decided to do that was because the same properties are used by analyzers as well and for C#\\VB those fields can have arbitrary error codes. From a user standpoint - it's easier to think of it as one place to suppress warnings coming from build than have one for each tool (given there's UI for these properties). \r\n\r\nWe hadn't considered F#. Should we maybe default these only for C#\\VB? """
1329,121531950,"b""We can always make up a new property but there's no UI for anything else."""
1330,121829576,b'I agree - I see nothing wrong with supporting a NuGetPackageId\\Version metadata property.'
1330,121829636,b'Why make it specific to 2.0? '
1330,122082765,b'There is code that was added in VS to see if an item is defined in the project and if not then make it unremovable. So not sure if this is still used.'
1352,122830887,b'@nguerrera mentioned that this should NuGetTargetMoniker to account for UWP? '
1373,124712722,"b""This shouldn't be conditioned on IsCrossTargetingBuild"""
1702,149508082,"b'>UsingToolSourceLink [](start = 5, length = 19)\r\n\r\nWhy disable source link?'"
1702,149508588,"b'><RoslynToolsMicrosoftSignToolVersion>0.3.7-beta</RoslynToolsMicrosoftSignToolVersion> [](start = 4, length = 85)\r\n\r\nNot necessary. The toolset itself references version that it needs to do signing.'"
1702,149508690,"b""><SourceLinkCreateCommandLineVersion>2.5.0</SourceLinkCreateCommandLineVersion> [](start = 4, length = 78)\r\n\r\nNot necessary. We don't use the SourceLink.Create package."""
1702,149509073,"b'>DotNetXUnitVersion [](start = 5, length = 18)\r\n\r\nNot necessary. The toolset defines default XUnit version'"
1702,149509110,b'ditto'
1702,149511680,"b'><NonShipping>true</NonShipping> [](start = 4, length = 31)\r\n\r\nNonShipping is not used'"
1702,149512062,"b"">Tests [](start = 16, length = 5)\r\n\r\nI'd remove this. What's the benefit of building tests to a Tests subdirectory?"""
1702,149512456,b'I see. Ok.\r\n\r\n---\r\nIn reply to: [149512347](https://github.com/dotnet/sdk/pull/1702#discussion_r149512347) [](ancestors = 149512347)'
1702,149516282,b'I think you want to do this only if $restore is true.'
1702,149516974,"b""The toolset makes it work automatically if you don't disable it."""
1702,149518768,"b'The toolset uses 2.3.0:\r\n```\r\n<XUnitVersion Condition=""\'$(XUnitVersion)\' == \'\'"">2.3.0</XUnitVersion>\r\n<XUnitRunnerConsoleVersion Condition=""\'$(XUnitRunnerConsoleVersion)\' == \'\'"">$(XUnitVersion)</XUnitRunnerConsoleVersion>\r\n<XUnitRunnerVisualStudioVersion Condition=""\'$(XUnitRunnerVisualStudioVersion)\' == \'\'"">2.3.0</XUnitRunnerVisualStudioVersion>\r\n```'"
1702,149518984,"b""Actually, ```DotNetXUnitVersion``` doesn't seem to be used at all."""
1702,149519084,b'The Core runner is in the same package as desktop runner.'
1702,149519208,"b""So we don't need tow different versions."""
1702,149519406,b'Feel free to update the toolset to this version.'
1796,156802423,b'Add a variable $(XUnitPerformanceApiVersion)'
1818,157025518,b'Which one is absolute? ```<Import>``` paths do not need to be absolute as they are evaluated relative to the containing file.'
1818,157032250,"b""That one points to a directory that's not in the source repo (it's in the toolset nuget package)"""
1818,157032650,b'in other words in this case ```$(RepoToolsetDir)Settings.props``` is not the same as ```Settings.props``` while in the previous case ```$(MSBuildThisFileDirectory)..\\Directory.Build.props``` is equivalent to ```..\\Directory.Build.props```.'
2000,171042549,b'I guess we can OR it. '
2028,173028222,"b'Is there a better syntax to use for the revision? I believe Nerdbank.GitVersioning uses `g+` and assume `g` stands for git. `SourceRevisionId` could be commit hash, TFVC changeset number, etc. '"
2028,173067931,"b""Ah, yes, forgot to add SourceRevisionId != '' to the condition. \r\nIt's set by InitializeSourceControlInformation target that is provided by a source control package."""
2028,173229394,"b'Yeah, i would not include the `g` in the version. Just `x.y.z+sha` seems good enough.'"
2028,173229804,b'How do we detect that though? Look for `+` in `InformationalVersion`?'
2028,173241876,"b""> But that isn't foolproof due to ordering and possible SHA abbreviation.\r\n\r\nYup, that's the problem. """
2028,173611195,"b""@AArnott We need the guarantee that `InitializeSourceControlInformation` runs.\r\n\r\n@nguerrera Yes, I agree we need to be careful about the dependency. Let's discuss it next week."""
2028,173611438,b'@nguerrera I have an idea how to avoid the break. Let me check with msbuild team.'
2028,174892544,"b""That's an interesting point. Can we run tests against older msbuild common targets? Ideally we would test against the current and a fixed previous version that doesn't have these."""
2028,174892628,b'OK.'
2028,174892978,b'OK.'
2028,174900822,"b""If that's the case wouldn't we want to remove the condition on `SourceControlInformationFeatureSupported` from the product as well?"""
2028,174939112,b'Removed.'
2028,174939628,b'Changed the names.'
2028,174940306,"b""The tests define different XML elements. I'd rather leave them separate."""
2028,174940394,b'OK'
2028,174940723,b'Filed https://github.com/dotnet/sdk/issues/2051'
2113,179810624,"b'No, these are overridden by the toolset when building offline. https://github.com/dotnet/roslyn-tools/blob/master/sdks/RepoToolset/tools/DefaultVersions.props#L63'"
2113,183802622,"b""Isn't `release/2.1.3xx-src` used for source build currently?"""
2113,183823411,"b""I'm saying that we should merge `release/2.1.3xx-src` into `release/2.1.3xx` if it is possible to do so now. Then delete `release/2.1.3xx-src`."""
2113,183828388,"b'I guess it is, but there might have been more changes in the -src branch since this PR was created. I think it would be better to create a new PR that merges the branch.'"
2113,183840163,"b'Yeah, I can do it today.'"
2178,184188669,"b'You mean the test projects in src\\Assets pull in nuget.config? Should we add an empty nuget.config to that directory then? Alternatively, I think that setting `RestoreSources` property causes restore to ignore nuget.config, so perhaps the test projects should set that property?\r\n\r\n---\r\nIn reply to: [184184799](https://github.com/dotnet/sdk/pull/2178#discussion_r184184799) [](ancestors = 184184799)'"
2178,184189137,"b""I'm not sure I follow why that would be the case. Shouldn't every file be adding itself?\r\n\r\n---\r\nIn reply to: [184184946](https://github.com/dotnet/sdk/pull/2178#discussion_r184184946) [](ancestors = 184184946)"""
2178,184189471,"b""Because it's are not under artifacts anymore. Artifacts are meant for artifacts produced by the build, not by tools the build uses.\r\n\r\n---\r\nIn reply to: [184185423](https://github.com/dotnet/sdk/pull/2178#discussion_r184185423) [](ancestors = 184185423)"""
2178,184189802,b'DOTNET_SDK_ARTIFACTS_DIR is no longer needed.\r\n\r\n---\r\nIn reply to: [184185770](https://github.com/dotnet/sdk/pull/2178#discussion_r184185770) [](ancestors = 184185770)'
2178,184189951,"b'Yes, the install dir environment variable is set by build.ps1, if not set already.\r\n\r\n---\r\nIn reply to: [184185819](https://github.com/dotnet/sdk/pull/2178#discussion_r184185819) [](ancestors = 184185819)'"
2178,184190115,b'The build now always produces binlog.\r\n\r\n---\r\nIn reply to: [184189056](https://github.com/dotnet/sdk/pull/2178#discussion_r184189056) [](ancestors = 184189056)'
2178,184197962,"b""`git clean -xfd` cleans everything if that's what you want to do.\r\n\r\nCleaning up the dotnet installation is not common. Deleting artifacts without deleting dotnet is more common. Downloading and installing dotnet takes long time and is only needed when the version changes.\r\n\r\n\r\n---\r\nIn reply to: [184195237](https://github.com/dotnet/sdk/pull/2178#discussion_r184195237) [](ancestors = 184195237)"""
2178,184199294,b'I see. Will fix. Thanks for pointing it out!\r\n\r\n---\r\nIn reply to: [184193805](https://github.com/dotnet/sdk/pull/2178#discussion_r184193805) [](ancestors = 184193805)'
2178,184200532,b'Yes.\r\n\r\n---\r\nIn reply to: [184186017](https://github.com/dotnet/sdk/pull/2178#discussion_r184186017) [](ancestors = 184186017)'
2178,184203817,"b""That still needs to be cleaned up (I'll follow up on that later). It's used as an optional override of the artifacts directory path here:\r\n\r\n[https://github.com/dotnet/sdk/blob/9cf7788e45687df15dae183dc9277ac690528062/src/Tests/Microsoft.NET.TestFramework/TestContext.cs#L100-L104](https://github.com/dotnet/sdk/blob/9cf7788e45687df15dae183dc9277ac690528062/src/Tests/Microsoft.NET.TestFramework/TestContext.cs#L100-L104)\r\n\r\nBased on discussion with @dsplaisted the scenario this was needed for was to switch to a different version of dotnet SDK. This can be done by setting `DOTNET_INSTALL_DIR` instead. So `DOTNET_SDK_ARTIFACTS_DIR` is not needed anymore.\r\n\r\n---\r\nIn reply to: [184195832](https://github.com/dotnet/sdk/pull/2178#discussion_r184195832) [](ancestors = 184195832)"""
2178,184225825,b'This is the current design. We can discuss changes in future.'
2264,190046155,"b'Yes, we are using it in other repos already without the condition. Not sure if we have actually shipped any of those yet...'"
2530,217519897,b'This package does not ship?'
2530,217536862,"b'This flag is passed to PushToBlobFeed task that uploads all assets to blob storage. \r\n\r\nhttps://github.com/dotnet/arcade/blob/master/src/Microsoft.DotNet.Arcade.Sdk/tools/Publish.proj#L70\r\n\r\nBy shipping to NuGet.org I mean to an official channel (as opposed to unofficial channel like myget). I\'ll reword the guidelines to be more clear. \r\n\r\n@mmitche to comment on what exactly PushToBlobFeed does with the ""NonShipping"" flag in artifact manifest.'"
2530,217537457,"b""Another thing that's controlled by the flag is localization. We only import XliffTasks for shipping components."""
2530,217539062,"b""@mmitche So what should we set for Microsoft.NET.Sdk? It's not shipping as a separate package to nuget.org, but it's included in the .NET Core installer. So it is a shipping component but the final publisher should not publish it to nuget.org"""
2530,217539391,"b'I think it would be reasonable to set IsShipping=true for this package and then in the publishing configuration have a setting that says ""do not publish"".'"
2530,217539846,"b'In other worlds, the project would declare IsShipping=true since we do ship the bits to an official channel. The fact that the package ships as a part of an installer and not standalone is a publishing detail.'"
2530,217544808,"b'@mmitche \r\n> Really this is saying whether it\'s an independent shipping unit or not\r\n\r\nWhat do you mean by ""this""? The value in the manifest?'"
2530,217545921,"b'> Do not publish is confusing, since you do have to publish for dependency uptake reaosns.\r\n\r\nWherever you specify the channel to be nuget.org for pushing various components to, we would specify ""no channel"" for Microsoft.NET.Sdk.'"
2530,217546877,"b'We do not specify what channel a particular component should end up in on project level. Therefore the fact that the component should not be published to any official channel should also not be specified on project level.\r\n\r\nIn other words, the result of the build (the bits) does not depend on where the component is being published. On the other hand the result of the build depends on whether we consider the component a shipping component or not (e.g. we do localization only for shipping components, we repack the shipping packages to have final pre-release and release version, etc.).'"
2530,217771556,"b""> It's up to the release process to interpret that information.\r\n\r\nHow is the release process defined? Could it decide not to publish certain packages?"""
2530,217803793,b'Do we have a way to specify for some packages that they need to be published somewhere else than to the dotnet-core feed? Or do we expect repos that want to publish somewhere else as well to do that independently? \r\n\r\nWhat about publishing to Visual Studio? Do we expect to have a different process?\r\n\r\n@jaredpar '
2530,217846946,"b'Currently we have this in Roslyn: https://github.com/dotnet/roslyn/blob/master/build/config/PublishData.json\r\n\r\nIt specifies where each kind of artifact should be published. I though we might have something similar on ProdCon v2 level. That\'s where I was thinking we could also have some exclusions - like  ""all shipping packages go here, except for these that are not published as standalone packages""'"
2530,217919787,"b""To close on this PR - `IsShipping` should be true here. We might need to add another property or specify somewhere else that the package is not published as a standalone package. But that'd be a new feature we'd need to add to the SDK first."""
2585,225722481,"b""I see. Then you'll want to keep `-msbuildEngine dotnet`. I'm working on another change that will allow to select the test runtime `/p:TestRuntime=core|full|mono`"""
2740,240761643,"b"">$RepoRoot\\.dotnet [](start = 15, length = 17)\r\n\r\nI'd avoid hardcoding the path. You can call `InitializeDotNetCli` function to get the directory if you're on the latest Arcade, or use `$env:DOTNET_INSTALL_DIR`"""
2740,240762423,"b'>$RepoRoot/.dotnet [](start = 13, length = 17)\r\n\r\nuse `$DOTNET_INSTALL_DIR`'"
2740,240762991,"b'>$(RepoRoot).dotnet [](start = 25, length = 18)\r\n\r\nCan we not hardocde `.dotnet` here? '"
2740,240787738,"b""Couldn't you call `Path.GetDirectoryName($(DotNetTool))`? """
2740,240790518,"b""Actually... it is somewhat more complicated :(. Remember how we discussed how to find the `dotnet.exe`? We concluded that we don't need the path since `Exec` resolves it on `PATH`. So the value of `DotNetTool` may be just `dotnet.exe`. In your case it won't though, since you always install it to the repo. Hmm... maybe keep the hardcoded `.dotnet` and file an issue to follow up."""
3099,273265500,"b'I think it would be sufficient to check RVA != 0 for all method defs (no need to decode their bodies).\r\nUnfortunately, there is no ""IL stream"" directory entry in the headers that would specify where to find the IL stream.\r\n\r\n---\r\nIn reply to: [273174990](https://github.com/dotnet/sdk/pull/3099#discussion_r273174990) [](ancestors = 273174990)'"
54,75021280,"b""My (possibly wrong) understanding is that this is slightly safer than  because build.ps1 still couldn't pull a remote unsigned script.\n\nI'm not understanding what user intervention is required with the way I have it.\n"""
54,75023629,"b'> The user has to call Set-ExecutionPolicy RemoteSigned \n\nI don\'t think so. That\'s exactly what I\'m trying to fix. I have not set anything on my machine. This is setting the policy to remotesigned for the execution of the script without affecting the global registry setting.\n\n```\n>powershell .\\build.ps1\n.\\build.ps1 : File D:\\Src\\sdk\\build.ps1 cannot be loaded because running scripts is disabled on this system. For more\ninformation, see about_Execution_Policies at http://go.microsoft.com/fwlink/?LinkID=135170.\nAt line:1 char:1\n+ .\\build.ps1\n+ ~~~~~~~~~~~\n    + CategoryInfo          : SecurityError: (:) [], PSSecurityException\n    + FullyQualifiedErrorId : UnauthorizedAccess\n```\n\n```\n>powershell -ExecutionPolicy RemoteSigned .\\build.ps1\nVERBOSE: dotnet-install: Get-Azure-Channel-From-Channel -Channel ""rel-1.0.0""\nVERBOSE: dotnet-install: Get-CLIArchitecture-From-Architecture -Architecture ""<auto>""\nVERBOSE: dotnet-install: Get-Machine-Architecture\n<snip>\n```\n\n> build.ps1 does pull a remote script. See:\n\nLol. AFAICT, it does so by copying it to a local file and then executing it as a local script, so RemoteSigned doesn\'t impede it. \n'"
54,75028673,"b""Hmm, I see https://github.com/dotnet/roslyn/pull/13121. I guess I'll go ahead and use bypass because (1) like @jaredpar I've already spent too much time on this :grin: and (2) this particular script actually does download ps1 from the internet so any lesser privilege that happens to work is just cheating anyhow.\n"""
44,75766979,b'Noted. Thanks.\n'
81,75905846,b'Looks like this is the first custom error message. Thoughts on localization for this assembly?\n'
81,75908439,"b""OK, I'll add a TODO with reference to #33.\n"""
81,75909020,"b'In this case, $(Version) does not parse as a semantic version. \n'"
81,75909154,"b'Oh, you mean the errors preventing loc. #33 has some details.\n'"
81,75913657,"b""I'd be fine with that. I'll do it unless someone pushes back.\n"""
81,75913719,b'Yes. Dropped it accidentally during some refactoring\n'
81,75914424,"b'Yep. Decided to just use Version directly, which corresponds precisely to #2 spec\n'"
81,75915588,b'I think I misunderstood how Returns works. ;) I can drop it.\n'
81,75916289,"b'I think we should discuss other default possibilities on #2, but not attempt to come up with something better as part of the initial PR. This is indeed hard.\n'"
86,76094479,"b""Nit: strange whitespace here. I'd say either line it with first attribute on same line or put first attribute on its own line with standard indentation.\n"""
89,76148297,"b""Only slightly related: I'm actually concerned about $(VersionPrefix) even being a thing in the customer-facing targets. The weird thing is that this will be 1.0.0 and have no relationship to $(Version) if customer sets $(Version) in csporoj. If we want to have $(VersionPrefix) always available, it should be computed from $(Version), ditto for $(VersionSuffix).\n"""
89,76148694,"b""I'm going to make a slight change where we only set $(VersionPrefix) if no $(Version) is set.\n"""
89,76149778,"b""So, right now. If you have say `<Version>4.5.6-beta</Version>`, `<VersionPrefix>` is defaulted 1.0.0. This can lead to bugs if we start using VersionPrefix elsewhere in targets.\n\nWe can continue to support specifying a prefix and a suffix as we do today, but we should leave VersionPrefix unset if it didn't come from the user..\n"""
89,76152009,b'My bad for discussing this inline. I was aware and did that anyway. Sorry. I am going to file a bug.\n'
89,76314718,b'Filed https://github.com/dotnet/sdk/issues/93\n'
81,76334669,b'Oops.\n'
81,76335227,b'This exposed a UNIX bug in FileVersionInfo: https://github.com/dotnet/corefx/issues/11163\n'
103,76834945,"b'What happens if ProjectLockFile is deleted between check and here? As general best practice, we should probably handle FileNotFoundException same as !File.Exists.\n'"
137,79658279,"b'In inner builds, IntermediateOutputPath will include $(TargetFramework) (short folder name of TFM). #Resolved\n'"
137,79658532,b'This should be $(IntermediateOutputPath)NuGet (no slash) The targets are very careful to add trailing slashes.  #Resolved\n'
152,79659062,"b""https://github.com/dotnet/sdk/pull/154 is out though I'm still working on tests. Would it help to merge early to Restore3 branch?\n"""
137,79659745,"b'Sorry, it should $(IntermediateOutputPath)NuGet\\ (no slash in the middle but one at the end) so that consumption can follow the same appending without slash model.  #Resolved\n'"
154,79665574,b'It should be targets. Left over from earlier attempt to do this earlier in props phase. #Resolved\n'
154,79665838,"b'$(TargetFramework) is correct here. This runs in the inner build to expand individual $(TargetFramework) to $(TargetFrameworkIdentifier), $(TargetFrameworkVersion) #ByDesign\n'"
154,79666459,"b'I\'ll just put the name without a path and I\'d be fine removing the names altogether, but we can do that separately. I\'m trying to follow a convention that doesn\'t yet exist, but that I\'m proposing in https://github.com/Microsoft/msbuild/issues/1046 where a package puts its cross-targeting (aka ""outer"") build participation in build/cross/packagename.targets. But that creates two files of the same name and so I updated the comment to distinguish them. #Resolved\n'"
154,79694445,"b""I added this to common targets so that any project can reference a cross-targeted project:\nhttps://github.com/Microsoft/msbuild/blob/e7019886b3fd520b547a7353d78d106d72a4b828/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L1494\n\nI'll copy some comments over to make it clear when seeing it on this side too.\n #Resolved\n"""
154,79694886,"b""The reason is that we need to preserve the spelling of target framework. We guarantee that whatever spelling you use in $(TargetFrameworks) (and there can be more than 1 for same target, e.g. net45 net4.5) is what you can condition $(TargetFramework) against in your project. With that said, it may be the case the NuGetFramework.ToString() doesn't adjust or canonicalize in which case I could use that. I'll investigate and add a comment to clarify the importance of being careful here.  #Resolved\n"""
154,79695252,"b""I'll factor it for clarity. I want to preserve that msbuild /p:InnerTargets=x;y;z will do the inner build of x, y, and z. I can do that without actually making build the worker though by making build use a worker too. #Resolved\n"""
154,79706977,"b""I'll look into getting a better error, but I think it's going to require passing in more from common targets. I've filed [https://github.com/dotnet/sdk/issues/155](https://github.com/dotnet/sdk/issues/155) to handle this separately.\n\n---\n\nIn reply to: [79675873](https://github.com/dotnet/sdk/pull/154#discussion_r79675873) [](ancestors = 79675873)\n"""
154,79714085,b'Oops. #Resolved\n'
154,79719327,"b""I've changed the final return true, but the early false exits are by design and easy to prove Log.HasLoggedErrors is false. I'd like to leave that. #Resolved\n"""
162,80156187,"b""Isn't this missing `<PropertyGroup>`?\n"""
163,80179135,"b'I think my update of msbuild is commit #3645, so ideally we need that or higher. Is there not a more recent successful build?\n'"
163,80286753,"b""> So i'll take a drop of the new CLI in #164\n\nDo you mind if I just update independently to 003665: #165\n"""
163,80287003,b'I have some changes that depend on common targets being updated pending.\n'
161,80346908,b'Nit: `var`\n'
161,80346981,b'Nit: `var`\n'
172,80350663,"b""Items generally have a singular name though we're not 100% consistent with that.\n"""
172,80350695,"b""I think there's a new use symbolic links too.\n"""
164,80583843,"b""I'm guessing we're still broken for restore and x-targeting based on email I just sent.\n"""
184,80800190,b'I actually fixed #178 yesterday but was still blocked on re-enabling the tests without everything here and the parts we debugged together. I just tried enabling it on top of this PR and msbuild targets hacked to include Microsoft/msbuild#1104. It worked great! https://github.com/eerhardt/core-sdk/compare/TestsUsingPackageRefs...nguerrera:enable-cross-targeting-test \xf0\x9f\x8e\x89 \n'
184,80806215,"b""Whatever's easier for you is fine by me. :)\n"""
192,81252440,b'We should have that for parity\n'
192,81252828,"b""Filed #194. Can you point me to code for how it worked in project.json land? I imagine I'd also want a NETSTANDARD define with no version.\n"""
192,81253014,b'Jinx. #195 it is. ;)\n'
204,81809842,"b""It occurred to me after the meeting that `/p:Configuration=` might be better, though I don't know if that will clear the env variable inheritance or not. Either way, can you reference a bug in a comment here?\n"""
204,81810632,"b""> I'll add a reference to #203. That's the right bug, right?\n\nYep, thanks.\n"""
192,81872382,"b""This was the big thing: https://github.com/dotnet/sdk/pull/176. I was under the impression that there was far more after that while we were still in a bad state with restore and P2P vs. cross-targeting, but the root cause was the same once @eerhardt and I debugged through that. I'm looking at publish now and there will likely be some changes there too. This still only tests build.\n"""
192,81992549,b'Typo. It was supposed to be non-desktop. Fixing.\n'
192,81994295,"b'Doh. I mean it was supposed to be ""on windows""\n'"
212,82212581,b'Should this ignore case?\n'
212,82213300,"b'Similar question, all of these tables are case-sensitive by design, right?\n'"
212,82213544,"b'If not, this line is equivalent to the more succinct `if (fullDependencyProjectPath == projectFileDependencyName)`\n'"
212,82213874,"b'WithXxx pattern is used extensively in immutable designs (e.g. basically all of Roslyn) to mean create a new instance with Xxx. Modifying current instance and returning `this` in a ""wither"" is very surprising to me.\n'"
212,82238156,b':(\n'
212,82238886,"b""cc @terrajobst. Irrespective of fluency, 'with' is an especially bad naming choice for something that has a side-effect IMHO.\n"""
212,82239008,b'`x.WithY(y)` changing x is really unfortunate.\n'
212,82243591,"b""Don't bother. I give up. \xf0\x9f\x98\xa2 \n"""
212,82247773,"b""The clear precedent across these projects is a fair reason to stick with it here. It's a mind bender for me that such a pervasive pattern in Roslyn is not universal in the ecosystem, but I'll just have to live with that. ;)\n"""
231,82492852,"b""No good can come from NoStdLib=false if we get here. Let's just wack it like the others.\n"""
231,82492884,"b""I'm not sure so I'll file an issue to think about it (no action item for this change), but I suspect the best defaults would be designtimeunify always, unify all class libs and autogeneratebindingredirects for desktop exes.\n"""
231,82492905,"b""Just confirming that the interesting case is only netcoreapp because netstandard exes aren't a thing (per offline conversation). I'm ok having in this group, but do we need a work item to error out on netstandard exe?\n"""
231,82493557,"b""Yes. I see these new targets as a fabulous opportunity to squash legacy defaults that we've been too afraid to change in-place. :)\n"""
229,82673451,"b""Please follow up on this as a separate PR. We need to drain the active PRs for a history rewrite, so I'll merge this now.\n"""
241,82841816,b'Is this fundamentally different from what msbuild does if an exception escapes execute?\n'
241,82842511,"b'Please throw a specific exception (define one it if we have to) to signal normal error in task execution and only catch that in TaskBase.Execute. Throwing System.Exception leads to catching System.Exception, and catching System.Exception (everything) leads to treating bugs as user errors.\n'"
240,82843117,"b""OK, I'll get to the root of it and remove the de-duping here. I'll leave the Path.GetFullPath normalizing because that was a red herring that cost me a bunch of time.\n"""
241,82843470,"b'Also, of we have a specific exception to mean normal error case, we should not show a stack trace.\n'"
241,82844038,"b'The correct behavior IMHO is:\n\nAny old exception -> it is unexpected (probably a bug) and we shouldn\'t try to make it pretty, let it go.\nAn exception we explicitly threw to tell the user ""hey, there\'s this problem with this input"" -> don\'t even showe a stack trace. Stack traces are for bugs.\n'"
241,82844351,b'That name sounds fine to me.\n'
240,82851071,b'Fixed. We no longer use RemoveDuplicates blindly across everything.\n'
244,82907256,"b'The condition was unnecessary, yes. Include of empty list is a no-op.\n'"
258,83082265,b'nit: whitespace\n'
262,83130004,"b""I almost did but have some concerns so opted to keep separate things separate. Let's discuss tomorrow.\n"""
276,83319070,"b""IIRC, I structured it this way so a new language, say F# could override only CoreGenerate. I misunderstood how inputs/outputs work with respect to DependsOnTargets. I wanted it to take care of as much as I could in non-core and let the overrides handle the rest. Maybe that's not worth it now that it doesn't work as I thought it did. (I thought if inputs and outputs were up to date, it wouldn't run its dependencies.)\n"""
276,83320807,"b""I think it is desirable for GetAssemblyVersion to run always though that wasn't actually my primary objective, I was trying to make it so overrides don't have to repeat what happens before/after core. This is still the case so I think we should keep the split.\n"""
282,83461904,"b'Yes, but if I add it to the test, it will trigger this though on most machines. \n\n```\nerror MSB3644: The reference assemblies for framework "".NETFramework,Version=v2.0"" were \nnot found. To resolve this, install the SDK or Targeting Pack for this framework version or \nretarget your application to a version of the framework for which you have the SDK or Targeting \nPack installed.\n```\n'"
282,83461964,"b'So, if you install the ref assemblies, you can target net20 or net35.\n'"
282,83463016,"b""I'm wrong about this, net2.0 builds on my machine in VS. Checking further. (Though do we really need to build net2.0 libs in 2016?)\n"""
282,83463538,b'This is just a test project. The condition belongs to it.\n'
282,83463611,"b""I'll change it to != netstandard1.0 for clarity\n"""
282,83464381,"b""What is your requirement here? What is the lowest framework you're actually going to use? I need to know if < 4.0 not working is part of what's marked as blocking for nuget team.\n"""
282,83464688,"b'Not making a decision here, but issue #270 is marked as blocking nuget. I just need to know if net40+ is enough to remove that flag, then I can add tests and investigate < net40 more leisurely.\n'"
282,83466352,b'@rrelyea Is net40(-client)+ sufficient to unblock NuGet?\n'
282,83467519,"b""It will, but I'm seeing net20 not find assemblies to compile against though it works fine if I do new classic 2.0 project. Trying to understand if it's critical to debug this now.\n"""
282,83474341,"b""@joelverhagen Make note that you need to do this in a project targeting net40-client. You'll get an error that inference failed and this is the way to be explicit about the TFM expansion.\n"""
283,83499924,"b'It might be better to use the x-targeting test with two netstandards because that runs on all platforms, whereas this one runs only on windows.\n'"
283,83500235,"b""Shouldn't this be $(TargetFrameworkMoniker)? This omits the profile if there is one.\n"""
283,83500322,b'$(TargetFrameworMoniker) here too.\n'
283,83501029,"b""I'm not sure how perf-sensitive this all is, but a struct that does actual ordinal ignore case comparison would be better if it is. That would save the allocations of the to lowered strings and the key instances, but you'd have to spell out GetHashCode and Equals.\n"""
283,83501232,"b""Why can't the dictionary be ordinalignore case instead of ToLowerInvariant here?\n"""
283,83508009,"b'Consider `KeyValuePair<string, NuGetVersion>` (struct) over Tuple to save more allocation.\n'"
296,83872732,"b'It\'s my understanding that this name is already depended upon so some coordination would be needed to change it. I\'ll try to get the stakeholders added to our repo so they can comment.\n\nI think ""cross platform"" is not granular enough, netstandard is also cross-platform, etc.  Maybe ""CrossPlatformExecutable""?\n'"
296,83953744,"b""Good question. This would be a nail in the' must be in props' coffin if so.\n"""
299,83982902,b'nit: named parameter for null literal would be nice.\n'
295,83985564,b'Use ToUpperInvariant\n'
310,84569577,"b""It does apply to those but the corresponding includes will be filtered by extension (_.cs, *.vb, *.resx). Those won't match xproj. The one exception is that project.json included compiler/resources/__/_ (no extension filter) as resources. That's why it's the only case where the xproj exclude matters.\n"""
313,84987729,"b""Is the extra / needed? Isn't MSBuildProjectDirectory guaranteed to have trailing slash? I've found it very good to keep with the convention of having trailing slashes in properties and concatenating them together without slashes. This limits the risk of setting something to near the root of the file system due to an error where a property is empty.\n"""
313,85001922,"b""Yuck, slashes are different between MSBuildThisFileDirectory and MSBuildProjectDirectory (?!?)\n\nYeah, let's use Path.Combine.\n"""
321,85048452,b'ReportUserErrorException (or whatever we called it)?\n'
321,85048975,b'Same question\n'
326,85230751,"b'Wrong name, cut and paste\n'"
326,85230783,b'whitespace\n'
339,85606554,b'This was not supposed to be commented out.\n'
310,86015179,"b'Why do these need to be special cased? Also, why are there two files?\n'"
310,86015256,"b'Same question, can you comment and factor out a helper?\n'"
310,86015375,b'nit: extra line of whitespace\n'
349,86171222,b'You should not put extra backslash between intermediate output path and assembly name. We have already guaranteed trailing slash.\n'
349,86174226,"b""I'm not sure I get the validation here. Do we really need It? It is very confusing to treat empty, false, and anything but true differently in different places.\n"""
349,86188991,"b""What about GenerateDocumentationFile=faalse (misspelled), then DocumentationFile takes precedence and there's no error. We need to be careful about not comparing the variable to true in some places and false in others. It causes bugs.\n\nI think we can say DocumentationFile always wins and GenerateDocumentationFile=true is just shorthand for setting DocumentationFile to an appropriate location.\n"""
349,86196856,"b'Or how about this: we assign semantics to all cases, instead of having error cases. If I set explicitly GenerateDocumentationFile to non-true, then don\'t generate a documentation file. :) This allows me to control the path independently of whether I use it. So I could set the path without conditions and then still  turn generate on or off per configuration.\n\n``` XML\n<PropertyGroup Condition=""\'$(GenerateDocumentationFile)\' == \'\'"">\n  <GenerateDocumentationFile Condition=""\'$(DocumentationFile)\' == \'\'"">false</GenerateDocumentationFile>\n  <GenerateDocumentationFile Condition=""\'$(DocumentationFile)\' != \'\'"">true</GenerateDocumentationFile>\n</GenerateDocumentationFile>\n\n<PropertyGroup Condition=""\'$(GenerateDocumentationFile)\' == \'true\' and \'$(DocumentationFile)\' == \'\'"">\n  <DocumentationFile>$(IntermediateOutputPath)$(AssemblyName).xml</DocumentationFile>\n</PropertyGroup>\n\n<PropertyGroup Condition=""\'$(GenerateDocumentationFile)\' != \'true\'"">\n   <DocumentationFile />\n</PropertyGroup>\n```\n'"
351,86379999,"b'Yes, this is already fixed in another PR.\n'"
351,86380384,"b""I filed https://github.com/dotnet/sdk/issues/329 to make sure we have settled on default output paths. There is definitely tension between traditional VS concept of $(Platform) and nuget concept of $(RuntimeIdentifier), etc. Everything is configurable, though, so I think we're bound to have some compromise on the defaults.\n"""
351,86380849,"b""Just being defensive in case the props aren't imported, though you probably have other problems. Regardless, the duplication pre-exists this change, so I'll leave de-duping as a separate exercise.\n"""
351,86381290,"b'Yes, it is related to the package output path being correct. There are different import paths for x-targeted and single-targeted cases and we only tested x-targeted. My first attempt at fixing this broke the x-targeted test and then I found it prudent to test both cases to prevent fixing one while breaking the other.\n'"
351,86381320,"b""I'll follow up with a separate test-only change to clean this up. \n"""
363,86921099,b'nit: use var\n'
363,86921165,"b'nit: whitespace missing between + and BuildVersion. Also, consider $""[{BuildVersion}]"".\n'"
371,87239901,b'File bug on SDK to represent the TODO and link to the blocking external issue.\n'
371,87239931,b'Ditto.\n'
371,87504522,b'Correct\n'
379,87528148,"b""I don't think this string manipulation is necessary. IIRC, @rainersigwald mentioned elsewhere that MSBuild can will automagically compare System.Version-parseable strings and compare them as such. \n"""
379,87528436,b'nit: sort these alphabetically.\n'
379,87528484,"b'There are other conditions needed for version < 4, right?\n'"
379,87532236,"b""Tests won't pass with version < 4 but that's only because of microsoft/msbuild#1333 combined with tests always running with core msbuild as of now. We keep getting requests for it, so we shouldn't discount version < 4 here.\n"""
381,87644195,"b""Wouldn't this cause GenerateBuildDependencyFile to run on Clean? That's not right. We want it to only run on build and log the write then. \n"""
381,87652956,b'Ah ok\n'
379,87890323,b'Maybe worth a comment that these comparisons actually do the right thing in msbuild\n'
379,87890435,"b""project.json had Microsoft.CSharp, should we do that if we're in a C# project?\n"""
398,88510010,"b""I was trying to make it obvious that we don't need localization, but now I think it's easier if we just go ahead and put all exception messages in a resource so that we can continue to audit all throw and log calls without exceptions.\n"""
398,88513109,"b""So, the caller of this code is doing it for each value in the enum. If we get here, we have a value outside the enum range and ToString() won't help much. This is indeed a bug to get here, so I'll just throw ArgumentOutOfRangeException(nameof(fileGroup)).\n\n---\n\nIn reply to: [88394333](https://github.com/dotnet/sdk/pull/398#discussion_r88394333) [](ancestors = 88394333)\n"""
398,88552896,"b""They used to be equivalent since the target we were running before was also Initial. But that was changed here: https://github.com/Microsoft/msbuild/pull/1280. To avoid the same class of issues, I'm making the call to validate only when the config validation is done is best. We were inconsistent between the runtime identifier check and the unknown target framework check so I standardized on the way that is consistent with the call made in  https://github.com/Microsoft/msbuild/pull/1280\n"""
425,90376038,"b'This is case insensitive, right? Still we should spell it Sdks for consistency and conformance with FDG.'"
425,90376189,"b""Also, the folder name should be spelled sdk if this is going to be in a nuget package since lowercase is a convention there. Later I see it that way. Perhaps that's what's making Linux builds unhappy."""
425,90376275,b'Casing: SdkFile'
425,90376347,"b'SdkFolder. Actually, SdkDirectory is probably better too.'"
425,90376465,b'Or SdkDir since that abbreviation is pervasive in msbuild: OutDir and this is alongside RecursiveDir.'
425,90376538,"b""Casing again. I'll stop commenting on it, but make it consistent and never SDK throughout."""
425,90376655,"b'Folder name should be lowercase. (Ok, I lied about not commenting anymore.)'"
425,90376764,b'I thought that change went in ages ago.'
425,90376856,b'File the bug now and reference it here.'
425,90377009,"b""What does equivalent mean here? Isn't the a plain Be()? It should be exactly that."""
425,90476272,b'We should not be working around things that are already fixed in the product to satisfy our out of date test environment.\r\n\r\nPlease update the CLI used instead.'
425,90477409,"b""Don't add TODOs without tracking bugs"""
425,90480705,b'So here it serves to compare a list with 1 element to a single element?  OK.'
425,90481304,"b""Above is my most important reason for still requesting changes. This is a step backwards.\r\n\r\nIf for some reason, we can't just update (I hope that we can), then at a minimum:\r\n\r\n* Use the exact same BeforeTargets as the MSBuild change that hasn't flowed to us yet.\r\n* Add a bug number to the TODO.\r\n\r\nI'm also curious what this has to do with this change. Can you split it out?"""
450,91272346,b'Did you leave any tests with explicit package references overriding the default?'
468,91336111,b'Also we usually spell true all lowercase'
468,91338247,"b""And why didn't this typo cause a test failure?"""
468,91339390,"b'Oh, this hunk is out of date. Missed that on my phone.'"
468,91360343,"b""What's with wwwroot here?\r\n\r\nAlso, we shouldn't hard-code *.cs in language-agnostic file. There's a props file for CSharp. We should use that or $(DefaultLanguageSourceExtension)."""
465,92048073,"b""This will include the template tests as well if they've previously been built"""
465,92048103,b'whitespace is off'
465,92062186,"b""The name of the functions and the error messages aren't accurate. This only checks if the file has the *optional* UTF-8 BOM, but does not validate that its byte sequence is valid UTF-8 (perhaps we should also check that, see below). \r\n\r\nYou could check that the file is valid UTF-8 using:\r\n``` C#\r\nvar strictUTF8 = new UTF8Encoding(encoderShouldEmitUTF8Identifier: true, throwOnInvalidBytes: true);\r\nusing (var reader = new StreamReader(filePath, strictUTF8, detectEncodingFromByteOrderMarks: false))\r\n{\r\n    try\r\n    {\r\n        reader.ReadToEnd();\r\n    }\r\n    catch (DecoderFallbackException)\r\n    {\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\nand then also check that the file has the BOM as you are now.\r\n\r\nThen I'd rename to IsUTF8EncodedWithBOM and adjust error messages accordingly too.\r\n"""
465,92062344,"b""Can we instead just get to the path of these files in source control and save this copy?\r\n\r\nDoes xcopy actually understand the full syntax of .gitignore or are we just lucky enough that it respects enough to exclude what we don't want to copy from the templates folder?"""
465,92063891,"b""@srivatsn Do you see an issue with changing the template build to use core msbuild? I assume this is OK, but I don't know if there's anything special about the templates build that would require desktop msbuild. It's changing here so that we can add a test project modeled after the others that use the SDK and package refs."""
468,92544275,"b""We're mixing / and \\ all over the place. Let's pick one and stick to it."""
468,92544377,b'Is there a bug tracking that?'
506,92719057,"b'Are all of the diagnostic messages intended to be around dependency resolution. It feels weird to have a list of targets that can warn be a requirement of ResolvePackageDependenciesDesignTime. Just about every target has the possibility of logging an error or warning that can go to the error list, but most should not run every time ResolvePackageDependenciesDesignTime does.\r\n\r\nIf the pattern we want is for dependency-related diagnostics to use this and straight Log.LogError|Warning for the rest, then we should make the names for these Diagnostics less general: DependencyDiagnostic* or something. \r\n\r\n'"
506,92720766,b'So adding diagnostics without parent target+package would be skipped here and is basically the same as just logging warning or error to msbuild. This increases my feeling that this diagnostic mechanism should be tied to dependencies (and named accordingly). And it should simply be required that the parent is specified when adding.'
478,92729509,"b""Nit: Let's be consistent on not abbreviating things. We have PackageDefinitions and ProjectDefs on the same line here. It should be ProjectDefinitions.\r\n\r\nItem names are also supposed to be singular, but that's one Microsoft has gotten wrong in many places so I feel less strongly about enforcing it. #Resolved"""
507,92747173,b'Turns out desktop resgen is unhappy without the goo'
507,92747370,"b""Yes, it should also depend on assembly info generation. Technically we build satellites late and get lucky but I'll be explicit"""
507,92747615,b'Good idea.'
507,92863980,b'Fixed.'
507,92864199,b'Done.'
510,92866254,b'Do the display name for the template vsixes surface to the user?'
510,92884055,b'Good because otherwise we have missed loc strings ;)'
510,92884737,"b""Yes thanks. This is a different string that doesn't surface if I've understood correctly"""
523,92890277,"b'Not for this change, but do we even need to check if empty in props?'"
525,92914496,b'We call it assets file elsewhere in these messages. '
525,92914521,b'Should we refer to dotnet even to VS users?'
525,92914529,b'I think we have almost this exact string elsewhere.'
525,92931090,"b""It is $(TargetFrameworkRootDirectory) in msbuild, but we also get in other code paths from DOTNET_REFERENCE_ASSEMBLIES_PATH via a CLI API. We're busted for desktop builds on Mono right now with the mismatch. I just so happen to be looking at fixing this while I'm on vacation, but I think the expedient approach (only SDK changes) involves respecting both."""
528,92962480,b'The intent of having GetAssemblyVersion on GenerateAssemblyInfo and not here was to make it so that the AssemblyVersion is always available to CoreGenerateAssemblyInfo overrides for languages other than C# or VB.\r\n\r\nIs moving this related to the feature requested here?'
528,92962886,"b""If it's unrelated, please revert."""
450,94256823,b'This is going to be a maintenance headache. Is the plan to add conditions here for every patch release?'
450,94257069,b'Should this be 1.6.1 now?'
450,94257380,"b""I don't like the inconsistency. Note that there is a real use case for not referencing this package at all: standalone app with smallest possible footprint. \r\n\r\nAlso, it's worrying that the only clean way to consume a patch release would be to acquire a new SDK.\r\n\r\n"""
506,94658760,b'nit: `Array.Empty<ITaskItem>()`'
506,94658885,"b'Pre-existing, but why do we have private properties instead of private fields with `_name`?'"
506,94658945,b'File bug for any TODO'
506,94659090,b'nit: sealed'
506,94659110,b'sealed'
506,94659374,"b""Nit: Does VS preserve this formatting on Ctrl+K, Ctrl + F? \r\n\r\nI'd prefer we did not get cute lining things up against the grain. It causes unnecessary diffs when something longer than all of the others gets added."""
506,94659453,b'nit: var'
506,94659594,"b""Is there a bug tracking this on nuget side + one on our side to follow up when that's done?"""
506,94660028,"b""Generally the property for depends on is XxxDependsOn, but we've also moved away from that in favor of BeforeTargets. I wonder if we shouldn't just have things use BeforeTargets=ResolvePackageDependencies and skip having this list? What else do we think will go here?"""
506,94660127,b'Why is RunResolvePackageDependencies hard-coded here and also in EmitsDependencyDiagnosticMessages?'
624,95676381,"b""This is really hard to follow for translators: leading whitespace, placeholder followed by two spaces followed by another sentence, placeholder immediately after a sentence. Can we just log consecutive independent messages? If not, maybe don't worry about DRY and just put the full text of each message a user can see so the translator has all of the context. At a minimum, use the `<comment>` element to explain how these compose."""
624,95676618,b'Why ToList()?'
624,95678815,"b""Also is g.Count() cheap here in practice? (do the groups implement ICollection?)\r\n\r\nI would be interested in seeing some measurment where this task shows up on the perf summary. Maybe it doesn't register in comparison to surrounding logic, but my instinct from lower level work is to cringe at all of this LINQ."""
626,95698832,b'It moved.'
624,95908764,b'We need to have an acceptable link before we merge.'
633,96079832,b'I would prefer NETSdkWarning and NETSdkError tasks just like the built-in Error and Warning tasks. It is weird to read Error then Warning only.'
591,96109046,"b""@srivatsn, what's going to be our policy on breaking changes to API surface area in Microsoft.NET.Build.Tasks. We have stuff that's public for unit testability but not intended to be called by customers. Should we lock it down with IVTA before RTM?"""
591,96109075,"b'This one is only breaking if someone *implements* the interface, which I doubt anyone would do, but my experience with these sorts of things on corefx was traumatic.'"
591,96292532,"b""> If someone tries, and they get broken in the future, they need to fix themselves.\r\n\r\nMy experience with these statements is that we make them while building v1 and then get blocked from actually breaking *anything* in v2 no matter how bizarre the use case. I'd rather make things explicitly internal to just avoid having to even discuss such a policy.\r\n\r\n\r\n> The reason we can't make these types 'internal' and use IVTA right now is because #55 isn't fixed.\r\n\r\nThe current skip-signing condition is too aggressive. Public signing works fine on non-Windows and would allow us to use IVTA with the same key across all platforms.\r\n"""
591,96292840,b'#656'
591,96293011,b'@ramarag @gkhanna79 You can disregard this for this PR.'
675,96705315,"b'I would think it would be the opposite: e.g. case-insensitive better for Windows, case-sensitive better for Linux. It would be valid (though asking for serious trouble) on some file systems to have two different files differing only by case and we`d insert an error where compilation would have succeeded. I am not sure what the best answer is here.'"
687,96871004,b'Why are there still some facades (eg Claims) explicitly listed here?'
687,96915627,b'Can you file a tracking bug on the extra files?'
733,98041910,b'Use the GroupBy overload that takes a comparer and pass StringComparer.OrdinalIgnoreCase'
762,98733375,"b'Please test this, but LoadFrom should respect binding redirects since CLR v2, IIRC.\r\n\r\nIt should now find 9.0.1 in our base path and 6.0.4 in the subdirectory. \r\n\r\n\r\n\r\n '"
768,98832496,b'Should this depend on actually doing the generation? '
782,99002773,"b""It means that if you build with desktop msbuild and non-English, you have to have the skip verification that our preinstall script gives you. If you build with core msbuild (as build.cmd does) there's no impact as we will be able to public sign. In official builds, everything is always delay-signed in the build step and then sent to be full signed so there is no product impact."""
782,99003625,"b'The output directory was becoming a mess with all of the loc dirs mixed with Packages, PackagesLayouts, ProjectTemplates, Sdks, Tests. At one point, it was interfering with my ability to glob correctly and pick up the satellites, but that may no longer be an issue with other changes I made since.'"
797,99248762,b'Can we use metadata to indicate ProjectHasSingleTargetFramework? Seems like it would simplify the consuming side.'
797,99248868,"b""I believe everywhere else we consider TargetFramework to win over TargetFrameworks, so this might be better as TargetFramework != ''"""
797,99251819,"b""If I have a project that sets both TargetFramework and TargetFrameworks, TargetFramework will win (we won't go to cross-targeting targets), but this won't report it as such."""
797,99358967,"b""Good point. I think we need this to be `'$(IsCrossTargetingBuild)' != 'true'`. Whatever condition causes us not to use the x-targeting is the same as what should get no additional properties."""
797,99370561,b'Looks like there are some whitespace and extra leading character issues'
805,99410603,"b""I was just writing something like that and I like Sri's wording even better."""
800,99414106,"b""So how big is the stuff that goes in the temp folder? Why not use a path in the project's intermediate directory?"""
819,99478115,b'It is appended to the caller member name.'
819,99478138,"b""Good catch. I guess imports are already relative to current dir, this is unnecessary and evaluating to empty, which still works. I'll correct the typo and keep it this way for consistency but we should probably remove the unnecessary uses of MSBuildThisFileDirectory for readability at some point."""
828,99747192,"b'What about if both are RID-specific, are compatible, but do not match: A (win10-x86) -> B (win7-x86)? '"
828,99747302,"b""I'm also confused by the term 'dependant' in this context. I'd say 'referrer' to match the variable used."""
848,100413012,"b""It's the right call. Running tests with that change now and will push if it works."""
848,100413861,b'Fixed'
849,100430985,b'typo: the user'
847,100438117,"b""Hmm, I'm reviewing the uses of PlatformTarget in msbuild /pp output. There's quite a bit more than I'd hoped. """
847,100438500,"b""I'll make the change to avoid any question, but Assembly.GetExecutingAssembly() doesn't suffer from these problems intrinsically. Assembly.GetCallingAssembly is the evil one. GetExecutingAssembly was guilty only by association and that we never bothered to make it intrinsic with identical code gen to typeof(CurrentType).Assembly.Location."""
847,100438600,"b""That would only happen if my libuv package ref was upgraded, which is unexpected and I'd be happy to have tests fail in that case."""
847,100878669,b'Removed.'
828,101125998,b'nit: inconsistency in naming of single-target framework vs rid-agnostic. I suggest `_IsRidAgnostic` to continue the nearby pattern. '
828,101126393,"b'nit 2: comment is not quite up to date with code changes here and in msbuild. How about something like ""indicate to caller that project is RID agnostic so that a global property RuntimeIdentifier value can be removed"" or something?'"
847,101195847,"b""It will contain 'net' in most cases: netstandard netcoreapp. I don't want to add regex or other parsing complexity here."""
847,101197016,b'I am trying to make sure that this is done as soon as we know the right PlatformTarget. Somebody could indeed force it to be sooner. \r\n'
847,101207705,b'I moved it to run soon after the assets are resolved.'
847,101207999,"b""I'm not really concerned about someone trying to run this target themselves at some other time and I don't want to reset testing for this."""
870,101309050,"b""I think you'll get coverage from the full msbuild runs in Jenkins."""
828,101463943,"b'Did you mean to check this in? I like it, but the formatting is off and it would be nice not to duplicate the command in Message and Exec.'"
878,101468714,"b""I thought we were getting away from this. It sucks to have to patch this file whenever there's a patch. Also, given all of the issues with NETStandard.Libary 1.6 -> 1.6.1, I think it would be prudent to get to a place where simply upgrading the SDK never changes your package graph."""
873,101621486,b'Coverage for on and off went in with #847'
890,102771648,b'nit: extra whitespace'
890,102771828,b'nit: extra whitepsace'
890,102771931,b'nit: extra whitespace'
890,102771981,b'nit: missing whitepsace'
890,102772008,b'nit: extra whitespace'
890,102773212,b'Put classes in their own files with matching names.'
890,102773758,"b'Avoid abbreviations. FilterProjectFiles?\r\n\r\nAlso, avoid splitting on semicolons manually, it is really hard to follow. Use array type for non-scalar msbuild input and msbuild will handle splitting for you.'"
890,102774168,"b""Nit: more whitespace issues. Avoid more than one blank line. And here the start of the comment for the next target looks like it's nested in the previous target as there is no blank line between them and the indentation is off."""
890,102774351,"b'What is RPackage? Again, Avoid abbreviations.'"
890,102775411,"b""It's weird that we're passing properties to msbuild invocation that are underscore prefix (signals 'private' by convention only). This seems like a public contract with the RunCrossGenTarget and so its inputs should have good names and not be underscore prefixed.\r\n\r\nAlso, again avoid obscure abbreviations. There is no point saving 4 characters to say CGen instead of CrossGen."""
890,102775653,b'nit: more extra whitespace'
890,102775743,b'nit: missing space before ='
890,102839581,"b'IIRC, you can pass semicolon delimited properties to array arguments of tasks and it does what we want. If so, this is not a reason to have manual splits in the code. cc @rainersigwald '"
908,102996866,b'It does fail without the change. I added an explanation of why that is in https://github.com/dotnet/sdk/pull/908/commits/60e3675e58303adaa2f6c3572a5bed04080e0fde'
852,103046909,"b""@jonsequitur This still isn't backed out"""
890,103073063,"b""If this file is going to be in msbuild format, then we need to evaluate it and get the items that way. We shouldn't have a parser for some arbitrary subset of msbuild baked in to the SDK. If it's just a list of packages and versions with no possibility of conditions, etc., then I think it would be better to just use a different format. """
923,103593832,"b""I don't understand why we are copying this project to the output directory and restoring it. Seems wrong. """
923,103599668,b'InitialOutDir is unused'
923,103599911,"b""Was it necessary to change the slashes here? It's inconsistent as outdir portion still has backslashes. If the final trailing slash is causing problems use trimend at invocation as we did for nuget pack."""
923,103599982,b'Looks like the dependency on LayoutSdkPackage was dropped'
923,103600054,b'Do we still get some indication of pack step at minimal verbosity?'
923,103600190,b'I see now how LayoutSdkPackage is wired in.'
923,103600398,b'Diff would need clearer if build still depended on it. Switching to beforetargets is unrelated to the task at hand.'
923,103600563,b'You should be able to use $(RootOutDir).'
923,103600667,b'Is the version coming out the same as before. I think common.props is not auto imported in this directory.'
923,103604558,"b""Yes, add it back here (using different variables for lhs and rhs of `->` and remove the echo exec. In general, let's keep the diff to things that are related to the feature you want."""
923,103604656,b'This is already available as RootOutDir'
923,103604708,"b""You don't need an item group. Just delete the nupkg."""
923,103604784,b'Why did you remove the Inputs and Outputs?'
923,103604839,b'This is a no-op.'
923,103604929,b'Just pass /p:Version=$(Version) and you can remove the whole target.'
923,103605493,"b""I'm wondering if this could be rolled in to Microsoft.NET.Nuget.proj and we could just invoke Pack target after layout. """
923,103606889,b'Remove the target in the other project that sets variables to other variables. Just pass the variables.'
923,103607053,b'I think the main project could probably just be an SDK project.'
923,103607737,"b""Oh sorry, I misread the other file. It would have to be something like /p:NuSpecProperties='version=$(Version)' (not sure about quoting/escaping the embedded `=`) to get rid of the target."""
923,103820434,"b""I'm surprised that the rename was necessary."""
923,103820585,"b'I think if you set AppendTargetFrameworkToOutputPath=false in Microsoft.NET.Nuget.proj, then you can revert all of these '"
923,103821482,"b""I think you can just set PackageOutputPath statically in the project, then set GeneratePackageOnBuild to true. We shouldn't need a separate MSBuild invocation and NoBuild isn't necessary since Build of this project is actually required before pack."""
923,103821870,"b'Actually, with AppendTargetFrameworkToOutputPath=false, it should get the right PackageOutputPath on its own. '"
923,103822053,"b""Please revert. It will cause the Microsoft.CSharp targets to be pulled in, but there's no C# being compiled in this project."""
923,103822568,b'Did you try this (just restating what might not have been clear):\r\n\r\n1. Remove this `<MSBuild>` call altogether\r\n\r\n2. Add this to a property group instead\r\n``` XML\r\n<PropertyGroup>\r\n  <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\r\n</PropertyGroup>\r\n'
923,103822922,"b'Weird. Yes, I think you can just set `<PackProjectInputFile>$(MSBuildProjectFullPath)</PackProjectInputFile>` yourself.'"
923,103823065,"b""@rohit21agrawal What's the rationale for that EndsWith('.csproj')?"""
923,103824131,b'nit: unnecessary whitespace diff.'
923,103824481,"b'ah, ok. Is the TrimEnd necessary?'"
890,103990074,"b'I don\'t like `Include` here since that is an msbuild concept, I think we should make it even more obvious that this is its own format, separate from csproj package references.\r\n\r\nThis is my suggestion:\r\n``` XML\r\n<CacheArtifacts>\r\n  <Package Id=""NewtonSoft.Json"" Version=""9.0.1"" />\r\n</CacheArtifacts>\r\n```'"
890,103990784,"b""I strongly disklike the ifdef precedent, it leads to spaghetti every time. You can leave it for now, though, and I'll look at fixing it by enabling IVTA from tests (#656)"""
890,104074395,"b'We talked offline, the problem with using any msbuild conventions is that it suggests other msbuild idioms might be possible. e.g. Can I use Remove? Exclude? Put common versions in props? etc.'"
934,104082227,"b'For net46, ExcludeAssets=Runtime. For netcoreapp, that + FilterCopyLocal.\r\n\r\nBasically we adjust the build step to deploy only the right assemblies and then packaging can copy them wholesale.'"
935,104163464,b'Do we need this comment? It is bound to get out of date as this version is bumped. What is non-official about it?'
935,104206171,"b'OK, please help me keep an eye on future updates so that when this version becomes official, we remove the comment.'"
935,104206260,"b'When are we getting off a ""private"" branch and on to a proper vNext branch for nuget?'"
935,104206399,"b'And, yes, please add a test.'"
941,104552229,b'This term should be avoided. Replace with ExcludeList or BlockList or something.'
949,104557999,b'Nit: extra whitespace line.'
949,104558287,b'Are we arranging to have this inserted to VS at the same time as the project system supports it?'
950,105057774,"b""We only set public-sign/delay-sign for non-shipping != true. Here we assume since we're using the internal key we can just full sign, but we can't."""
962,105080427,"b""Yes, I will fix it soon, but I'm splitting in to steps as it's easier to work through the issues."""
964,105088366,b'typo: s/correspoding/corresponding/'
964,105088428,"b""I don't see how this line does anything. It either does nothing when RuntimeFrameworkVersion is empty or sets RuntimeFrameworkVersion to itself."""
964,105088464,b'Same for RuntimeIdentifier just above it.'
964,105180664,b'So the $(...) in CDATA is replaced with evaluated value? I see. The Condition is weird then. Can you remove it?'
962,105185197,b'Yup. Will fix.'
894,105237962,"b"" I keep seeing unrelated whitespace cleanup. Is your editor configured to do that? It's not code review friendly."""
894,105238363,"b""This line is terrifying. Do we really need to delete it? CI does a clean of the enlistment, right? And we don't put stuff in there."""
894,105238760,b'This should say what things and link to bugs.'
894,105239010,b'Does this include 10.12?'
894,105244170,b'Bug filed?'
978,105517110,"b""Shouldn't this be checked against utf8-encoded byte length?"""
978,105517181,b'How big is apphost? This code seems very likely to be slow.'
978,105517382,"b'Foobar is among terms that are not to be used in products. Also, the  blind search and replace strategy carries risk that the mere 5 bytes occur elsewhere in the exe with completely different meaning.'"
978,105517945,"b""Oh, I missed that we're replacing the sha of foobar, not foobar. So disregard 5 byte risk part of earlier comment. Still why are we wasting cpu resources computing this fixed value every time?"""
978,105518849,"b""As of now, this will report 'foobar' to user which would be a world ready tenet blocker and really embarrassing if we ever have to explain this error.\r\n\r\nWhat is the point of using a hash for this marker. Can't we just generate a guid?\r\n\r\nI think the user facing message for this should not go in to the implementation details of the replacement. This is basically an invalid (corrupted?) apphost, right?"""
978,105519106,"b""Definitely not. (And not just because it's misspelled)"""
978,105526215,b'There are no hyphens to replace in placeholder'
978,105526686,"b""It's going to bleed in to pack, solution explorer, etc. etc. cc @davidfowl """
978,105526716,"b""Surely we can do better than copying everything in to 74 kb managed array and doing LINQ (!) over it. See @schellap's sample. Maybe it doesn't have to be quite that sophisticated, but I think the naive approach here is pushing it."""
978,105526734,"b'It is not. If AppName has characters outside ASCII, it will take up more than AppName bytes.'"
976,105526855,b'Why did you change this?'
976,105526866,"b""This was done and reverted before. It broke signed builds, but I don't recall why. These are windows-only builds. I am pushing to have them moved to a different repo."""
976,105526873,b'cc @srivatsn who may recall exactly what broke'
978,105526932,b'Nor anything to ToLower()'
949,105527519,"b""I know this is a loaded topic, but there is no currently supported way to do that. You can set MSBuildSdksPath or overwrite the SDK and we've been doing some of that to bootstrap dogfooding while vNext VS branch gets off the ground, but until SDK acquisition is a thing, the SDK used by an unhacked VS is what comes with it and would therefore have a matching project system. \r\n\r\nWe should investigate how this impacts VS for Mac and VS Code, though.\r\n\r\nInstead of making a hard switch, can we have the project system light up on whether Configurations or Platforms are non-empty and leave these matching, innocuous stubs and the capability in place for any consuming project system / IDE that doesn't yet know about the new way?"""
981,105982488,b'I take it you changed your mind on letting this be set by user leading to this whitespace? Should it go in targets (after user code)? @natidea is this still what triggers the targets from not getting imported at all with your subsequent changes?'
981,105982860,b'nit: extra whitespace'
981,105982902,b'+1.'
993,106276038,"b""Since we're changing the protocol anyway, this name is misleading. It will be false for a project with `<TargetFrameworks>xyz1.0</TargetFrameworks>`, i.e. using TargetFrameworks plural but only specifying one value. \r\n\r\nShould we generalize and just give the callee project the ability to specify properties to remove to avoid having to deal with these case-by-case?"""
999,106544047,"b""It should, but we're so close enough in time to current epoch, it doesn't really matter. (But moving forward, do as I say, not as I do ;))"""
993,106958514,"b'~~I believe this will not deal well with the case where RuntimeIdentifier is specified as a global property (-r from CLI). We removed it from global properties for GetTargetFrameworkProperties, but not from ShouldQueryForProperties :(~~\r\n\r\n**EDIT**: Nevermind, they are removed from this evaluation as well.'"
978,106964373,b'Nit: Can be `public string ModifiedAppHostPath { get; private set; }`'
978,106964583,b'Nit: placeholder is one valid word so use `placheholder` casing (no capital H)'
978,106964624,b'nit: extra whitespace'
978,106964738,b'nit: extra whitespace next to paren'
978,106964870,b'nit: extra whitespace'
978,106964971,b'nit: extra whitespace next to paren'
978,106965066,b'nit: extra whitespace'
978,106965104,b'nit: extra whitespace'
978,106965479,"b""`file name` (no caps, it's not a proper noun)."""
978,106966426,"b""We shouldn't need to re-encode the placeholder every time, why not just have a static readonly byte[] for that."""
978,106966503,"b""I'm still concerned about reading the entire file in to one big managed array every time."""
978,106967187,"b""Don't name non-test methods with underscores. \r\n\r\nThis doesn't need to be re-computed every time either. """
978,106969265,"b'This will be very rare so I think the message should help identify the problem better.  Saying ""modified"" is a bit misleading as it could also be a bug where we get out of sync with apphost changes. \r\n\r\nI suggest something like ""Unable to use \'{0}\' as application host executable as it does not contain the expected placeholder byte sequence \'{1}\' that would mark where the application name would be written.""\r\n\r\n{0} would be the full path to the file so we can see package version, etc. if someone actually hits this and asks for support.'"
1007,106997568,"b'While I appreciate the effort to keep line lengths down, the whitespace is going to be part of the property value, which will affect log readability, etc.'"
1007,106997887,b'Is using only 6 chars of hash to avoid long path issues?'
1012,107255819,b'Fixed. I moved Bundled to the front as well as I found it reads a little better.'
1024,107436759,b'It should not impact net462. What is the symptom when removed from this condition?'
1024,107449946,"b""We're having trouble communicating on this. The RuntimeFrameworkVersion property is expected to have zero impact on net462 projects. The condition and comment should be limited to netcoreapp2. """
1024,107450569,"b""Why are two tests here removed? I see there's overlap between this and new tests but don't understand what makes these two and only these two redundant."""
993,107542666,"b""Maybe I'm missing something, but that seems orthogonal. Today in this case we go to empty GetTargetFrameworkProperties, which won't set HasSingleTargetFramework or IsRidAgnostic.\r\n\r\nGenerally, it's not as bad to leave TargetFramework in place for non-SDK projects because they don't do anything with it. RuntimeIdentifier could be more problematic, but we have this problem today.\r\n\r\nInstead of defaults for HasSingleTargetFramework and IsRidAgnostic, can we have a default set of properties to remove?"""
993,107542917,"b""If we're renaming the target, shouldn't we also remove TargetFramework from this part of the contract? """
1024,108014882,b'nit: brace is on the wrong line.'
1024,108015033,b'nit 1: Please call this something more descriptive than `ret`. `testProject` would work fine. \r\nnit 2: Use `var` when type is obvious\r\n\r\n``` C#\r\nvar testProject = new TestProject()\r\n```'
1024,108015083,b'Do we have a bug filed to remove these workarounds once my fix is pulled back in to the repo?'
1062,109209247,"b""I think it should be false by default regardless. Apps can opt-in and packages that depend on it (like swagger) could even carry props to turn it on. It's consistent with the v1 behavior and it's pay-for-play in terms of publish size."""
1062,109470117,"b'> The situation currently is:  \\[...\\]\r\n\r\nI see. In that case, I think we want this new opt-out to disable that behavior for project refs too. '"
1053,109472234,b'Please use named arguments for bools.'
1053,109472262,"b'Ditto, named argument.'"
1053,109473468,b'`Debug.Assert(!isFrameworkDependent || platformLibrary != null)` ?'
1062,109479244,b'Makes sense.'
1053,109507801,"b""I don't have a strong opinion."""
1076,109803002,b'Fixed.'
1101,110499604,b'We can remove all of the SideBySide goop now that these versions are aligned. :)'
1052,110517177,b'Localized error messages should be formatted with current culture.'
1133,112578183,b'Why is this removed?'
1133,112578404,"b""I know you just moved this, but it's sloppy to catch all exceptions. We can introduce any bug at all in the try block and never know. Why is it just a precaution to remove these artifacts?"""
1133,112578502,b'Nit: drop the Attribute suffix.'
1133,112578983,"b""While we're getting better at xunit, should we have some sort of attribute to indicate core msbuild only?"""
1133,112579861,"b'This should be ns + additionalProperty.Key like the others above.\r\n\r\nYou want https://msdn.microsoft.com/en-us/library/system.xml.linq.xnamespace.op_addition(v=vs.110).aspx, not string concatenation.  I suspect this is only working now because the projects under test have no namespace declared.\r\n\r\n\r\n\r\n'"
1133,112743194,b'Roslyn has a nice pattern for combining common skip conditions: https://github.com/dotnet/roslyn/blob/master/src/Test/Utilities/Portable/Assert/ConditionalFactAttribute.cs\r\n\r\nI think we should steal it as it allows composing things like WindowsOnly and CoreMSBuildOnly and also has the benefit of consistency with other dotnet repos.'
1147,113079918,b'One of these needs to stay because (for now) it still contains the actual SDK.'
1169,114230920,"b""This seems to be a breaking change in the pack targets. We're passing a nuspec file and before we didn't have to have this set. Now, it tries to call targets we don't have (this is not a csproj) without this."""
1169,114234363,b'Try grabbing nguerrera:update-nuget and reverting this line to investigate.'
1171,114668450,b'I think semver is OK here (along similar lines that convinced me for Cli.Utils + the fact that there is no ship vehicle for consuming as a library). I believe there have been other breaks. '
1171,114668590,"b'I\'m a little more concerned about breaks to ""public"" targets than public task API.'"
1171,114669058,b'nit: separate lines for privateassets and publish'
1171,114669122,"b""Comment doesn't match actual metadata used."""
1171,114669801,"b'Maybe both the itemgroup and the target that computes it should be ""private"" (underscore-prefixed) because adding to manipulating the item group directly doesn\'t give you anything more than setting the metadata, does it?'"
1171,114669904,b'same nit about separate lines'
1172,114695944,"b'What if instead of checking runtime type, we check for existence of this path, i.e. probe for CLI path and fallback to VS? Then anyone making an msbuild-based toolkit (e.g. VS for Mac on Mono runtime) can just follow the same path conventions as the CLI in their msbuild deployment and have their bundled targets light up.'"
1172,114696006,"b'fsharp.sdk here refers to FSharp.NET.Sdk, right? The comment should match the actual package name.\r\n\r\nIs `<Project Sdk=""FSharp.NET.Sdk;Microsoft.NET.Sdk"" ` the only order that works when using that? If not, I think you wouldn\'t see these variables set if the SDKs were imported in the reverse order.\r\n'"
1172,114696144,"b'The negative name of this boolean is confusing. Also, again this should match the FSharp.NET.Sdk name more closely. Can this be UsingFSharpNETSdk or something?'"
1172,114696367,b'Does this file already exist in VS? Why do we need to ship it there?'
1172,114697248,"b'Actually, I think we should have a looser coupling where there\'s a way to signal ""don\'t use the FSharp support bundled with the .NET Core Sdk. \r\n``` \r\n<PropertyGroup>\r\n  <!-- For compatibility with older versions of FSharp.NET.Sdk that do not set UseBuiltinFSharp. -->\r\n  <UseBundledFSharpSupport Condition=""\'$(UseBundledFSharpSupport)\' and $(_FscTaskAssemblyPath_net)\' != "">false</UseBundledFSharpTargets>\r\n\r\n  <UseBundedFSharpSupport Condition=""\'$(UseBundledFSharpSupport)\' == \'\'"">true</UseBundledFSharpSupport>\r\n```\r\n\r\nSo the contract for someone wanting to replace the FSharp toolkit is to set UseBundledFSharpSupport and we only use the check for a known FSharp.NET.Sdk variable to avoid breaking existing versions. '"
1175,114697723,"b""This is not the only place that's broken. E.g. Winexe's won't get binding redirects turned on or the right logic for native dependencies on .NET framework. We need to scrub.\r\n\r\nThere was already a proposal to have something like 'IsExecutable' get respected regardless of OutputType so that test projects (which are dlls) could opt-in to behaviors like binding redirects without changing the output type. I wonder if we can tackle both while we're addressing this."""
1176,114855092,b'Another note: WinExe support on core may be coming soon: dotnet/core-setup#196'
1178,114859760,b'nit: unnecessary whitespace diff'
1178,114860327,"b""I believe this is after the use in BeforeCommon.targets and so the change won't have the effect you want. \r\n\r\nMind you, I'm surprised this test didn't fail: https://github.com/dotnet/sdk/blob/1d81050cab00c6f9ab8bf5b984bc42eff2760c1e/test/Microsoft.NET.Build.Tests/GivenThatWeWantToBuildADesktopExe.cs#L351 \r\n\r\nI'm also surprised to see it doesn't check the contents of the app.config. Can you check  that before and after your change?"""
1178,114861463,"b'Nevermind, it did fail. :)'"
1178,114861863,b'We should move this to BeforeCommon.targets to fix it.'
1172,114865714,"b'Notice that I still have a check for the variables for compat with existing projects. The idea is that we expose a ""public"" contract for overriding the toolset and grandfather in exsiting versions of FSharp.NET.Sdk for existing projects.'"
1172,114865890,"b""I'm surprised that there is an existing VS file with the name Microsoft.NET.Sdk.FSharp.props."""
1178,114882694,"b'Thanks, Eric. Here\'s what I propose based on your feedback.\r\n\r\n_IsExecutable : ""private"" variable that\'s true iff output type is exe or winexe. Use this everywhere we have OutputType == Exe. This is not an extensibility point, it is just for our own maintainability so that we don\'t reintroduce winexe bugs. Controls getting a run command that just launches the output exe.\r\n\r\nHasRuntimeOutput: defaults to _IsExecutable, but overridable by test project or similar. Controls binding redirects and other runtime configuration file generation.\r\n\r\nIf something other than a (Win)Exe wants to be runnable, it supplies a custom RunCommand as it already works.'"
1178,115101162,"b""I want to use $(_IsExecutable) in all these cases unless there's a reason to exclude WinExe but I don't think there is any such case. I think every case we did not treat exe and winexe the same was a bug."""
1178,115550122,"b""This will light up the docker integration in VS, which I don't think should happen for test projects once they switch to not being actual exes. @codito, @saurabsa Thoughts?"""
1178,115550320,b'Nit: This file has only whitespace diffs. Better to rebase them away to keep the history clean.'
1172,115798871,b'This is incorrect. We should not be forcing how common targets import their extensions.'
1172,115800415,"b'This isn\'t right either. In cross-targeting case, anything serving as LanguageTargets needs to import Microsoft.Common.CrossTargeting.targets *instead of* Microsoft.Common.targets (not in addition to it). When we\'re in the ""outer build"", there are supposed to be very few targets: (basically just build, rebuild, clean) that know how to loop over each target framework and call the ""inner build"", where the usual cast of targets (CoreCompile and friends) can continue to deal with just one target framework. This is overriding the inner build targets with the outer build targets, but leaving a bunch of inner build targets dangling that would do incorrect things if they were ever invoked.\r\n\r\nIn the cross-targeting case, this is all that VB and C# language targets do:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.CSharp.CrossTargeting.targets\r\nhttps://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.VisualBasic.CrossTargeting.targets'"
1172,115886725,b'This comment is repeated below where it actually applies. This copy can be removed.'
1172,115887163,"b""On both lines, `'$(FSharpTargetsShim)'  == ''` should be `'$(FSharpPropsShim)' == ''`\r\nOn the second line, we should be checking for existence of props not targets.\r\n"""
1172,116093373,"b""As discussed offline, I still want this to be decoupled such that everywhere else we're not referring to BuildingUnderFSharpSdk but more generally, we're shutting off the built-in fsharp targets."""
1172,116098355,b'nit: duplicated comment'
1173,116108192,"b""I'm going to merge this because it's a strict improvement. Happy to approve another PR to do an even nicer error message."""
1208,116544647,"b""We should register the code pages provider instead if we run in .NET Core 1.x. I've closed that issue."""
1208,116547470,b'The old test runner probably registered it for us.'
1208,116555636,"b""I'm not sure."""
1218,116882227,"b""Can't hurt"""
1224,117337749,"b""I'll add the coverage. \r\n\r\nThe diff shown in #1132 also changes from netstandard1.4 to net46. Are you sure that you had `<TargetFramework>net46</TargetsFramework>` working and only `<TargetFrameworks>net46[;...]</TargetFrameworks>` failing? This very test repros the issue without using `TargetFrameworks`.\r\n"""
1228,117351437,b'What sets this to true?'
1224,117365403,"b""I've added the coverage in 7ba7a66 to be safe. I can't see from code inspection how `TargetFramework` vs `TargetFrameworks` would make any difference so I suspect things were conflated."""
1245,118145348,"b'I guess msbuild only calls this once per task invocation, but calling ToArray() in a getter is usually a bad idea in the general case. Looks like field access, but is really O(N). \r\n\r\nPerhaps this is better:\r\n\r\n``` C#\r\npublic ITaskItem[] ItemsFromPackages { get; private set; }\r\n\r\nprotected override ExecuteCore()\r\n{\r\n    var list = new List<ITaskItem>();\r\n    // ... add to list ...\r\n   ItemsFromPackages = list.ToArray();\r\n}\r\n```\r\n'"
1245,118145366,b'nit: var'
1245,118145410,b'Same thing here.'
1245,118152089,"b""Thanks for moving this. I generated these with (Ctrl + '.'). I don't know why this one didn't go at the top like the others."""
1246,118157983,b'Can this be separate NeedsLink=true metadata? The sentinel feels hacky.'
1246,118158160,"b""Can you just use %(RecursiveDir) without checking if it's empty. Seems it would evaluate to the right thing in both cases."""
1246,118158264,b'Have you checked the perf of calling get full path this way on every item?'
1246,118220006,"b""Shouldn't LinkBase work inside the project cone as well? I might want to display/copy in/to a different relative path."""
1245,118294006,b'OK'
1246,118369137,b'whitespace: `@(EmbeddedResource )` -> `@(EmbeddedResource)`'
1246,118369221,b'whitespace:\r\n\r\n`@(EmbeddedResource )` -> `@(EmbeddedResource)`\r\n`</EmbeddedResource />` -> `</EmbeddedResource>`'
1255,118533626,"b""Another option that's arguably more consistent with what we have now, but not necessarily better is to slot this in to the dependencies of outer GenerateAssemblyInfo. The target can also be public and called GetAssemblyAttributes matching GetAssemblyVersion."""
1255,118547109,"b'> Does the DependsOnTargets=""A;B;C"" set the build dependency of ""b depends on a""?\r\n\r\nNo, but it ensures A,B,C ordering when it triggers them to run. IIRC, there is precedent in Common targets to slot CoreXxx in via DependsOnTargets of Xxx order without explicitly saying that CoreXxx depends on everything before it in the DependsOnTargets of Xxx. That was the idiom I had in mind when I first wrote this, but I think you\'re on to something nicer. We should make sure that GetAssemblyVersion is also sequenced by the same mechanism:\r\n\r\n``` XML\r\n<Target Name=""GenerateAssemblyInfo"" \r\n        DependsOnTargets=""PrepareForBuild;CoreGenerateAssemblyInfo""\r\n        BeforeTargets=""CoreCompile"" ... />\r\n\r\n<Target Name=""GetAssemblyAttributes""\r\n        DependsOnTargets=""GetAssemblyVersion"" .. />\r\n\r\n<Target Name=""_CreateGeneratedAssemblyInfoInputsCacheFile""\r\n        DependsOnTargets=""GetAssemblyAttributes""\r\n        BeforeTargets=""CoreGenerateAssemblyInfo""  ... />\r\n```'"
1255,118552107,"b'Nothing accidental, but it removes flexibility to invoke the individual targets via something other than GenerateAssemblyInfo and still have its dependencies satisfied. You\'ve convinced me that the explicit approach is nicer.\r\n\r\nThinking further, given\r\n\r\n1. Error handling subtleties of Microsoft/msbuild#2133\r\n2. That we need CoreGenerateAssemblyInfo overrides to re-declare the inputs and outputs. (I had put them on outer GenerateAssemblyInfo and that didn\'t work.)\r\n3. That one of the inputs is the generated cache file\r\n\r\nIt makes sense for CoreGenerateAssemblyInfo to explicitly state that it depends on creating the cache file.\r\n\r\nSo here\'s my proposal:\r\n\r\n``` xml\r\n<Target Name=""GenerateAssemblyInfo"" \r\n        DependsOnTargets=""PrepareForBuild;CoreGenerateAssemblyInfo""\r\n        BeforeTargets=""CoreCompile"" ... />\r\n\r\n<Target Name=""GetAssemblyAttributes""\r\n        DependsOnTargets=""GetAssemblyVersion"" .. />\r\n\r\n<Target Name=""CreateGeneratedAssemblyInfoInputsCacheFile""\r\n        DependsOnTargets=""GetAssemblyAttributes"" />\r\n\r\n<Target Name=""CoreGenerateAssemblyInfo"" \r\n        DependsOnTargets=""CreateGeneratedAssemblyInfoInputsCacheFile""\r\n        Inputs=""$(GeneratedAssemblyInfoCacheFile)""\r\n        Outputs=""$(GeneratedAssemblyInfoFile)"" ... >\r\n```\r\n\r\nIt\'s one more line to repeat in the CoreGenerateAssemblyInfo override, but it feels right next to the declared inputs.'"
1255,118553258,b'You need to rebase this out.'
1251,118559707,"b'IIRC, we have CoreMSBuildOnlyTheory for this now.'"
1256,118731358,"b'Today, CopyLocalLockFileAssemblies for netcoreapp include shared framework and don\'t respect other publish filtering mechanisms either. I think that\'s what you want here, but I also want to fix CopyLocalLockFileAssemblies to be more like ""publish in place"". See #933\r\n\r\nI\'m annoyed by the fact that the log can be filled with items called *CopyLocal* that are not in fact copied anywhere. I\'m not pushing back on this change because we\'re already in that boat, but it\'s something that\'s been on my mind for a while.'"
1262,118813217,"b""We should avoid concatenating messages like this. It makes translation more difficult. It's better to duplicate the fragments to give translators maximum flexibility. I see we have a similar pattern in conflict resolution, but that should be fixed as well."""
1262,118813241,"b""Where do we check for the case where the assets file simply doesn't exist?"""
1262,118813265,"b'At a minimum, if we think duplication is worth avoiding, the concatenation should be done by passing in one fragment into the next via format placeholder. Translators may want to reorder things.'"
1262,119197743,"b""I think we should come up with another way to test than to expect that we can pass an invalid rid if we're only compiling. It's not a vaild use case and it would make sense for the check here to be more defensive.\r\n\r\nOptions:\r\n\r\n1. A package that causes compilation to fail iff you use its rid-ful assets.\r\n2. Use GetValues to check ReferencePath is as we expect heading in to Csc."""
1274,119407663,"b""IIRC, this won't run before restore unless it's the root project. We use a private target (_GenerateRestoreSpec or something, search for it) with @emgarten's approval elsewhere."""
1274,119407781,"b""I don't see tests for both cases."""
1274,119437265,"b""This needs to go in inner build as it's validating targetframework singular. Do we need to intercept restore? Doesn't restore already have a good enough error for bad targetframework?"""
1279,119724826,b'Nit: I think  it would clearer to return true here and false outside the loop. The local + assignment is hard to follow IMHO and unnecessary.'
1279,119725579,b'Similar nit here. Factor out a method that loops over references and returns true/false and then assign result of that to DependsOnNETStandard.'
1279,119725787,"b""We should comment on why we're not using S.R.M here. I think I know the answer, but it should be noted here."""
1279,119917145,b'nit: remove unnecessary `return;`'
1279,119917591,b'Lonely code is good code ;)'
1279,119977787,"b""I am concerned about the risk of adding targets to the build of all 15.3 .NET Framework projects (including classic csproj) at this stage of the 15.3 cycle.\r\n\r\n* Have we adequately measured the performance impact given that this can impact all .NET framework projects, and hence a much larger set of customer projects.\r\n\r\n* Do we have the approval that will be required to put this additional feature in-box in 15.3?  \r\n\r\nI'm also unhappy with the complexity this adds to risk assessment of code changes in this repo moving forward. Previously, we could say that any change in the release/2.0.0 branch was scoped to the out-of-band .NET Core 2.0 SDK install, but now these targets are destined to go in-box, and so we'd have to audit each change to see the true impact and to know what level of approval we need. Furthermore, with the shared source files, it's not easy to see what changes are headed in-box and what changes are not. :(\r\n\r\nPreviously, insertions from CLI -> VS carried only 1.1 CLI and 2.0 resolver. This was simple to reason about. With this, we'd also have a chunk of the 2.0 SDK code going in to that payload. """
1279,119977823,b'This going to conflict with my loc automation change. And it has alerted me to a case I had not considered for the update-xlf-on-build option (which we only turn on in IDE builds): if two projects share the same resx and build in parallel then the update can race.'
1297,119986509,"b'This is going to write to random places: whatever cwd was when msbuild.exe was launched. This should go somewhere like ""$(IntermediateOutputPath)$(MSBuildProjectName).store""'"
1279,119992445,b'You can use reader.StringComparer.Equals to check this without allocating a string for each reference.'
1279,119992463,"b'By default, can this trigger only in the references-netstandard case to avoid adding overhead to all .NET framework projects?'"
1279,119992505,b'nit: we use capital letters after _ elsewhere.'
1279,119993357,"b'OK, that should work. Arrange for UpdateXlfOnBuild to always be false for this project after merging my change. Slap a TreatAsLocal=UpdateXlfOnBuild so that build /p:UpdateXlfOnBuild=true still works on the command line. Do you know if ResXFileGenerator -> Designer.cs can have the same problem (I vaguely recall that it can). We should probably exclude that metadata too.'"
1279,119993624,"b'The performance numbers are reassuring. Thank you for measuring and providing the details.\r\n\r\nFor risk assessment, what were the alternatives that were discussed? '"
1279,119993727,"b'Numbers would certainly help. Having it be part of all builds is goodness, but I want to understand the perf tradeoff.'"
1279,119993742,"b""We're probably ok if the measurements you provided below included conflict resolution."""
1279,119993787,b'readonly'
1279,119993815,b'nit: `var` since type is obvious from cast.'
1279,119993921,"b'Upon further thought, we should make this its own package. Doing it this way means the CLI build will have to do filtering on what it puts in the Microsoft.NET.Sdk folder. These are logically separate components that live together because they share code. They should be easy to trace through as distinct things in the CLI setup code.'"
1279,119994058,b'There should also be end-to-end tests that actually launch msbuild for .NET Framework (classic and sdk) -> .NET Standard 2 refs. These can be modeled after other tests in Microsoft.NET.Build.Tests.'
1279,120000247,b'Please make them separate.'
1279,120000254,b'Ok'
1279,120013137,"b""There isn't really anything difficult about using more than 1 package to insert in to CLI. The build definition for SDK pushes bin\\Release\\Packages\\*.nupkg already. And you'd just need to restore and use the extra package in the CLI build. The two packages would be used in different places in the CLI build so there's really no win I can see to keeping them together in 1 package."""
1284,120185490,b'Merge conflict unresolved'
1279,120246989,"b'Good catch on signing, but it looks like the assembly names still needs to be edited.'"
1323,120982929,"b'Is this a mistake? What is this project named just ""test""'"
1323,120982999,b'Remove the extra x64 and x86 solution configurations'
1323,120983396,b'Is it really the case that `<` has to be escaped but not `>=`?'
1323,120983871,"b""2c, I think I'd rather we not keep creating more test projects. I don't think splitting Build|Restore|Publish|Pack is buying us anything source folders wouldn't, and it costs build time and wrangling with the sln. This is consistent with what we have now, so not pushing back."""
1323,120984023,b'Please use VS to do that because there is more goo that needs to go. I think this is a bug in dotnet sln add if it added these.'
1323,120984287,"b'Yay, xml. '"
1323,120984521,"b""Oh I see, it's a sln folder. Open things up in VS and see how it looks. I think you'll end up with this test project in a folder, but not the others. If you want them all to be in a folder, that's OK, but let's be consistent"""
1323,120985743,"b'It is maybe buying us a way to run tests for just one verb. I find I mostly run all or one method, though.'"
1323,121029557,b'Why does the fallback folder need to be a source and a fallback?'
1323,121039008,"b""Got it. I read this wrong the second time. It's one or the other, not both."""
1323,121039128,b'What happened here. BOM change?'
1330,121261514,"b'There are many facades and many file definitions, right? This N*M loop seems like it could be quite expensive. ResolvePackageDependencies is already showing up as a bottleneck.'"
1330,121261626,"b""> Why wouldn't netstandard.dll have the facade metadata?\r\n\r\nBecause this is the thing that provides all the API to a netstandard 2.0 library, not just a bunch of type forwarders for compat with other targets. Facade indicates the latter.\r\n\r\nThis should not be tied to NetStandard.Library. The package is using targets because it has different rules than nuget defaults about which TFMs actually consume its assets, so it uses targets to add references instead of the default nuget rules based on folders. Another package may come along and have the same requirement\r\n\r\nWe should reparent any Reference with NuGetPackageId under the corresponding package. Facade==true should be strictly about de-emphasizing or hiding facades should we decide to do so."""
1330,121261741,"b""Sri, I thought you said the items used for the tree were distinct from these. I don't think rendering the IDE tree differently should impact items that are inspected by build."""
1329,121265684,"b""Can we limit this to NU1605? It's more test debt for loc case otherwise."""
1329,121265717,"b""We shouldn't overwrite existing warnings as errors"""
1329,121266384,"b""It is disconcerting to me that we're going to be passing NU1605 to the compiler as well as honoring it in nuget. \r\n\r\nI had a look and Roslyn will ignore unrecognized identifiers, but fsc will not. This is going to break F#:\r\n```\r\nFSC : error FS0241: 'NU1605' is not a valid integer argument [D:\\Temp\\wae\\fsc\\fsc.fsproj]\r\n```\r\n\r\n@srivatsn, @rrelyea, I don't think we should be passing the same property to the compiler and nuget. \r\n"""
1338,121580803,"b'I would keep the code consistent between platforms too. I don\'t know what you mean by ""no overhead"", though. We\'re copying the whole file only to replace its contents completely. We can fix this by finding the index of the marker, seeking to the right position and overwriting it.\r\n\r\nOn a related note, I pointed out in the original code review that reading the whole file in to a managed byte array was wasteful, but that was never addressed.\r\n\r\n\r\n\r\n'"
1338,121723425,b'Sounds good. Thanks.'
1330,121828363,"b""I still don't want to encourage manipulating FileDefinition and FileDependency here as I'm still convinced that we want to remove FileDefinition and FileDependency from all build logic and only promise that the output items of this task remain. There is a lot of perf to be gained if we don't produce all these items on every build.\r\n\r\nI'd rather bless this path as the general mechanism. Basically, if you're not adding references from the assets file, then don't fake up the assets file data structure and pretend like you are. Instead, just annotate (with package id and version)  the `Reference`s you added to build the old-school way, and we'll take care of putting together a tree view with both kinds of references."""
1330,121828499,b'Is this the only thing preventing it from generalizing? You mentioned something offline about having to set the TFM. Is that elsewhere or is it not a problem after all?'
1330,122051746,b'Please do clean up the comment to not suggest FileDefinition and FileDependency approach.'
1330,122052560,"b""The references from NetStandard.Library are already conditional:\r\n\r\nhttps://github.com/dotnet/standard/blob/master/netstandard/pkg/targets/netstandard/NETStandard.Library.targets#L6-L8\r\nhttps://github.com/dotnet/standard/blob/master/netstandard/pkg/targets/NETStandard.Library.targets#L7\r\n\r\nThis is *why* the package can't use standard nuget conventions. It wants to add references only to .NETStandard builds, but not to builds targeting a framework that is merely compatible with .NETStandard.\r\n\r\n\r\n"""
1330,122060476,"b""There's still a suggestion of FileDefinition/FileDependency mutation as a general mechanism here."""
1330,122082476,"b'@abpiskunov \r\n\r\nIIRC, this controls whether the item can be deleted via IDE. However, there was some discussion which I think was never resolved around the fact that essentially anything in a target cannot be deleted in IDE and relying on metadata for it is problematic.'"
1352,122833771,"b'Yes, see how NuGetTargetMoniker is used elsewhere in this file.'"
1368,123642853,b'3.3.0 ?'
1368,123642888,b'or vice versa?'
1368,123643568,b'Then this one is wrong.'
1368,123643603,b'https://github.com/dotnet/sdk/pull/1368#discussion_r123643568'
1368,123644325,b'File a bug on nuget?'
1378,125116042,"b'It is odd that %(Extension) is already the extension of the assembly name here.\r\n\r\nI debugged it and it is because NativeAppHostNETCore already gets the name of the app [here](https://github.com/dotnet/sdk/blob/cd25d6bbfc2aac61cc790c511900427ac64fdaa8/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Sdk.targets#L271).\r\n\r\nBut that is only for 2.0+ apps. The code is quite convoluted. :(\r\n\r\nI think the better targeted fix here is:\r\n\r\n``` diff\r\n     <ResolvedFileToPublish Include=""%(NativeAppHostNETCore.Identity)"">\r\n-        <RelativePath>$(AssemblyName)%(Extension)</RelativePath>\r\n+        <RelativePath>$(AssemblyName)$(_NativeExecutableExtension)</RelativePath>\r\n```\r\n\r\nThat at least leaves the handling of executable extensions by platform in [one place](https://github.com/dotnet/sdk/blob/cd25d6bbfc2aac61cc790c511900427ac64fdaa8/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Sdk.targets#L64).\r\n'"
1400,126510807,b'This comment looks to be in the wrong place and is missing some context. The fix to what?'
1407,127134200,b'ItemGroup?'
1407,127289868,"b'That makes sense, but if we change common targets for that, then I think the TFI/TFV should be added there too.'"
1407,127289943,b'Is there a TargetPlatformVersion already? Does it have a v?'
1407,127559263,b'nit: indenting here for fluent calls is different than elswewhere in same file.'
1407,127559372,"b'I\'d be tempted to say `r => r.Trim(\'""\')` is good enough. '"
1407,127559400,b'why ToList()?'
1420,127829833,"b'This is OK, but we should get the other parts of FileVersionInfo and convert them to appropriate attribute.'"
1423,128167855,b'variable should be called `assemblyVersion`'
1423,128168748,b'I would consider having the task return these items and renaming it to GetAssemblyAttributes. It will be more efficient with less code in XML to maintain.'
1423,128169232,b'Consider removing this variable and just giving the task parameter a more descriptive name. `RelativePathToTemplateFile`'
1423,128169725,"b""It's actually not necessarily relative, just possibly relative. IntermediateOutputPath is often setup to be a full path. """
1423,128171445,"b'typo: mainAssembly, satelliteAssembly (in variable and field names)'"
1409,129446787,"b'These can be enabled now, right?'"
1454,131058236,b'@rainersigwald?'
1454,131058567,"b""I don't think so. We have an atrocious pattern in msbuild xml elsewhere for this that we need to eradicate. A task is a step in the right direction for those cases but I still worry about the perf here introducing this complexity where it didn't already exist. Feels like a risky fix at best. \r\n\r\nDave, can we measure the impact of this on the Roslyn scenarios you've been tuning before merging?"""
1487,133819945,b'@eerhardt Will removing this ToLower() break anything?'
1511,133863309,b'File bug'
1511,133863516,"b'FYI, @eerhardt -- next time I hope we can just ingest the runtime soon enough.'"
1602,140893214,"b""> Or can we not do that right now because signing is down?\r\n\r\nI think that's exactly the issue. @livarcocc mentioned as much in  standup today and note that f1fe4af does this deliberately post-merge."""
1603,140904571,b'I think this should go before the other clause and just match on == 2.0. There should be symmetry between this and the .NET Core app case.'
1603,140905997,"b'Actually, hang on.'"
1603,140906263,"b'Looks like the intent was to change the final clause to 2.0.0 now. See the comment on line 62 before/65 after. ""Currently this is the same as the previous clause, but when we have a stable 2.0 package this should change.""'"
1603,140906325,b'@dsplaisted'
1606,141112226,"b'Not sure what the bools are for if they are always true,true.\r\n\r\nWe should probably also add cases that we expect to fail.\r\n\r\n'"
1606,141116420,b'Add copyright header matching other files.'
1606,141116473,b'nit: unecessary whitespace diff'
1606,141117121,"b""I would expect these tests wouldn't work on .NET Core msbuild because the deployment doesn't carry the PCL targets. """
1606,141120404,"b'I see now that even core msbuild can build these projects in the test environment because we force a VS Dev command prompt which sets VSINSTALLDIR and core msbuild is ""crossing the streams"" into VS land to pick up these targets. Since we already require a VS command prompt for building/testing SDK (there\'s an error from build.cmd otherwise currently), I suppose this is OK. '"
1612,141409304,"b""Can this be conditioned differently? Why didn't we need to know about netfx.force.conflicts here before, but now we do?"""
1612,141409881,b'I see now. This is just porting what was there before the revert to the new scheme. '
1618,141995271,b'Messages shown to the user should be formatted with current culture'
1618,141995309,"b""Some framework lists chain to others. Critically, I believe Mono's are that way and this will need to work when targeting net471 with Mono msbuild."""
1618,141995385,b'Extra whitespace'
1618,142248915,b'@akoeplinger @DustinCampbell '
1454,142739939,"b""Nit: These aren't very long and I think it would be easier to follow with the attributes on one line. (Maybe not for the cases that use all of the options)."""
1603,143023692,b'what was this about?'
1603,143024156,"b""Looks like a bug, there's still no netstandard2.1 TFM. I think it's because the bundled versions aren't right."""
1629,143068672,b'NoConfig=true is hard-coded for main assembly compilation too: https://github.com/dotnet/roslyn/blob/5e30fbc11bf2f4c4857616fdb0d70dbe364e5094/src/Compilers/Core/MSBuildTask/Microsoft.CSharp.Core.targets#L118'
1618,143875954,b'missing copyright header'
1652,144633014,b'This is because you reverted it at the end of 2.0.2. This accurately represents the state of 2.0.x. You only put back the better version in 15.5.x'
1661,145246312,"b'This will go away with repo api / repo toolset, but trying to decouple that effort from stopping the patch bleeding.'"
1667,146053241,"b""+1. I don't like that we're adding all this code to workaround a framework bug. """
1667,146056491,b'What is the case where DependsOnNETStandard==false (which is actually system.runtime >= some-ver or netstandard) but DependsOnNugetXxx==true. Which test covers that?'
1667,146059675,"b""Why didn't this code path check systemRuntimeMinVersion already? Bug?"""
1674,146399703,"b""Let's name the file TestCommandLine.Default.cs instead of NOPCommandLine.cs"""
1674,146401333,"b""It's unfortunately pervasive in CLI/SDK code to do stuff like this in property getters, but we shouldn't produce fresh strings on every property access. If I review calling code that calls this more than once, I'm not going to imagine that to be problematic, because it looks like field access. Now, this is test code, so my care factor is not high, but it's something that I'm going to be pushing back on in product code.\r\n\r\n"""
1674,146401723,b'nit: var since type is obvious'
1674,146401918,"b'Also, can we name this `spec` instead of `ret`.'"
1674,146402029,b'private static'
1674,146402087,b'var info'
1674,146402162,b'command'
1674,146402199,b'extra whitespace'
1674,146403002,"b""You have `ret` all over the place. I won't comment on all of them, but I'd prefer readable names."""
1702,148038631,"b""This isn't related to moving to repo toolset, is it?"""
1702,148039433,"b""Do you know why GitHub isn't seeing this as a rename? Are there actually changes to every line?"""
1702,148040382,b'I think Daniel deleted this file. Is this a bad merge that resurrected it?'
1702,148046293,"b""I'm all for removing unused usings, but please revert and do it as a separate change. It is not at all related to moving to repo toolset."""
1702,148046691,b'Why is this showing up as a new file instead of as a diff against the existing csproj?'
1702,148125527,"b""You should separate commits for renames/moves from significant modifications.\r\n\r\nAlso, I'm generally concerned about all of the file moves here vs. all the branches we have in flight. That's a recipe for serious merge pain. We should consider moving the files separately in release/2.0.0 which would then flow to all active branches. \r\n\r\n"""
1702,148125695,b'Are there unnecessary whitespace differences?'
1702,148841591,"b""Why don't we need this anymore? Repo toolset or something else is going to handle transport feed?"""
1702,148842073,b'Can we just remove the commented out parts and put a link to the Repo toolset default file. I think it could be misleading if Repo toolset defaults change.'
1702,148842187,b'Just a note that this is still there.'
1702,148844094,b'nit: all the other braces are on the same line.'
1702,148845279,"b'cc @dsplaisted Some of this would have to change, but this was a useful thing for local developpment to get dotnet that was downloaded on your path and a few other helpful setting in the env.'"
1702,148845811,"b'This one is even more useful, it lets you play with the SDK you just builit (including in VS if you run devenv via this).'"
1702,148846976,"b""It's kind of accidental that we need this everywhere now. Tasks are special because they need to copy their dependencies and apparently there's a new test requirement. We just have tasks and tests right now, but this is a scary default when we merge with CLI repo having regular class libs."""
1702,148861998,"b""This file doesn't exist"""
1702,148886043,"b'Only two tests fail for me with CopyLocalLockFileAssemblies=false: GivenThatWeWantToBuildANetCoreAppAndPassingALogger.*\r\n\r\nIt\'s because the test dll passes itself as an msbuild logger,  and the msbuild loader for loggers (just like tasks) can\'t resolve from .deps.json. \r\n\r\nThis could easily be fixed by moving the test logger into a tiny assembly and  having write out a simple format that doesn\'t need JSON.NET. e.g. ""EventName=X|Prop1=Val1|...|PropN=ValN"" \r\n\r\nI suggest:\r\n1. Limit use of CopyLocalLockFileAssemblies to the individual test project that currently needs it.\r\n2. File a bug to put the test logger in its own assembly and remove (1).\r\n\r\ncc @wli3.'"
1702,149160352,"b""See https://github.com/dotnet/sdk/pull/1702#discussion_r148886043\r\n\r\nThis is only necessary right now for the test assembly that has the telemetry tests. Please keep it off on any test projects where it isn't required. I would also like the one test project that needs it to have a comment pointing to a bug to do the telemetry test differently."""
1721,150144258,"b""It's moved from the other project. This is the one that actually needs to restore it."""
1721,150145062,"b""It's an unrelated change that should have been a separate commit. Shame on me for not following my own advice."""
1725,150671695,"b""Ya, that's worrisome. :("""
1725,150919479,"b'No, this is specifically for the netstandard libs that only include NuGetPackageId.'"
1725,150922565,"b'NETStandard.Library is special because it adds references in targets files rather than being raised from the lock file in the usual way:\r\nhttps://github.com/dotnet/standard/blob/9a99f024343e6a36d15e7073890c07daa81606fc/netstandard/pkg/targets/netstandard/NETStandard.Library.targets#L16-L17\r\n\r\nFor the regular case, we set FindDependencies here: https://github.com/dotnet/sdk/pull/1725/files#diff-4a26943c6456c3afd827c7b87e69d390R455 and there is no coupling to other metadata. '"
1725,150926547,"b'It\'s definitely broken (and thankfully we have tests that catch it).\r\n\r\nThe problem is when netfx project pulls in refs from nuget that depend on System.Runtime, but do not pull in System.Runtime from nuget. The expectation is that RAR will still detect the reference to System.Runtime and then ImplicitlyExpandDesignTimeFacades will use that detection to add `TargetFrameworkDir\\Facades\\*.dll` to ReferencePath.\r\n\r\nHere is a minimal repro that is broken with the current iteration:\r\n\r\n``` xml\r\n<Project Sdk=""Microsoft.NET.Sdk"">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net46</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=""System.Collections.Immutable"" Version=""1.4.0"" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n``` C#\r\nclass P {\r\n    static void Main() {\r\n        System.Collections.Immutable.ImmutableList<string>\r\n            .Empty\r\n            .Add(""hello"");\r\n    }\r\n}\r\n```\r\n\r\n```\r\nProgram.cs(5,14): error CS0012: The type \'Object\' is defined in an assembly that is not referenced. \r\nYou must add a reference to assembly \'System.Runtime, Version=4.0.0.0, Culture=neutral, \r\nPublicKeyToken=b03f5f7f11d50a3a\'. [D:\\Temp\\repro3\\repro3.csproj]\r\n```\r\n\r\n\r\n'"
1725,151005116,"b""I think we can handle facade injection as a special case. I have some work in progress on it where we use the same technique as design-time builds (still search primary references). It is the one case where RAR (actually RAR + ImplicitlyExpandDesignTimeFacades) actually add new items to ReferencePath. If there are other such cases (I'm not aware of any), they also invaldiate the assumption...\r\n\r\nThis case is actually not as bad as AutoGenerateBindingRedirects where I'm finding that we do need to do the entire dependency walk (but can skip search for .pdb, .xml, serialization assemblies)."""
1725,151171269,"b""Think of a unified assembly graph having edges labeled with the version of the assembly reference. We're not missing any nodes in that graph, but we're missing edges.\r\n\r\nBinding redirects are needed when there are incoming edges at multiple versions.\r\n\r\nWe could consider brute force redirecting every reference or discovering the edges more cheaply than the current dependency walk: we only need to enumerate references but not probe for them. I'm inclined to tackle that in a second change. The approach for now is to leave the dependency walk enabled when generating binding redirects. \r\n\r\nAs for detecting UsingSystemRuntime/UsingNetStandard from packages in the graph, I'm not sure that's possible in the general case. Today, it would work to put an assembly referencing system.runtime in a net45 package folder and not have a package dependency on anything. \r\n\r\nSo what I'm doing instead is to use the same fallback as the design time build to still do a shallow search. We can maybe do something better but again I want to proceed in steps.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"""
1725,151269229,"b""Current status: \r\n1. If auto-generate-binding redirects: don't skip find dependencies, but do skip find .xml, .pdb, serialization/satellites assembly.\r\n2. Borrow from design-time code to fix facade injection approach\r\n\r\nI think we can do better than this, but I'd like to focus on testing from this point on for this change.\r\n\r\n"""
1745,151510924,"b'Aside, but I think we can clean out a bunch of these.'"
1745,151511082,b'This looks like a no-op. Setting RestoreSources to itself.'
1745,151515530,"b""Should we still have one with `<clear />` to ensure that nothing is just using the machine config?\r\n\r\nTest assets won't import Common.props, so I suspect that's what tests are doing now. """
1745,151528524,b'My comment got rendered wrong (edited). I think we should have a `<clear/>` here to ensure that things are actually using RestoreSources and not the machine/default config. I suspect tests are doing the latter.'
1745,152125048,"b'When this merges with repo toolset, it will ned to change.'"
1725,153885739,b'Separate commit for separate issue: https://github.com/dotnet/sdk/pull/1725/commits/83912b834dc3faabe02d7ac76997bc9127473cb3\r\n'
1776,153913364,b'I think my comment about these still being useful was lost in the original PR. Can we please fix up the paths and retain these?'
1776,153941281,b'Will I actually get those environment variables set up for me if I do dogfood.cmd?'
1776,153941318,"b""Seems like they'd be trapped in the powershell process"""
1776,153941379,b'I want dotnet that was downloaded on my PATH too in this env.'
1776,153950726,b'I see.'
1805,155714039,"b'How much perf did you give back by creating this every time the task runs? I thought the version with a hard coded structure created every time was significantly slower than a static list. \r\n\r\nThe parsing logic looks very heavy on allocations: split, trim, tuple, yield.'"
1805,155879696,"b'I think we should ship any updates to this that way, but we need this to work on already shipped versions of these packages.'"
1805,155879738,"b""OK, I'm satisfied. We can tune the rest if it ever it shows up and this is clearly a nice win already."""
1805,156242078,"b""That makes sense to me. \r\n\r\nI'm wondering if there can/should be a test to validate that all of these overrides behave the same as the fallback assemblyversion/fileversion checks. I'm imagining a test that generates a set of package references from the overrides and then we build with and it without DisableDefaultPackageConflictOverrides and check that we get the same `@(Reference)` and `@(ReferenceCopyLocalPaths)` both ways. You can get the overrides and the reference lists with GetValuesCommand."""
1805,156242174,b'typo: s/symver/semver/'
1805,156242546,"b""> I'm not sure how this affects, if at all, Microsoft.NETCore.App < 2.0.\r\n\r\nI would think that none of the assets out of these packages would ever conflict with Microsoft.NETCore.App or NETStandard.Library < 2.0.0 and so there would be no impact there. Right?"""
1819,157573596,"b""I'm curious what the diff is here that fixes the issue. Do you have a pointer to the change?"""
1782,157879084,"b'In our own usage, comments are  usually notes to translators. I think it would be useful to see both the English text AND the comment in quick info.'"
1782,157879230,"b'`Language.Equals(""C#"", StringComparison.OrdinalIgnoreCase)`'"
1782,157883286,"b'This is only one case of an invalid identifier. I will see if we can find the code from the CodeDOM-based generator in order to get parity with it. I see that it knows to make ""a b"", ""a_b"", and even ""for"" into ""_for"".'"
1782,157884834,b'Another interesting case is non-string values...'
1821,157893928,b'We likely need to turn it back on after Clean because Rebuild is Clean;Rebuild'
1821,157899598,"b'I wonder if we can use $(BuildingProject) != ""true"" instead. It is flipped to true before CoreBuild. cc @davkean, @rainersigwald \r\n'"
1821,157900544,b'Probably not because that will break design-time builds from getting the diagnostics (I think).'
1830,157915517,"b""I think we should be using the files that publish resolved and not globbing the disk. For one thing,  it's faster (no need to reprobe the disk). For another, it won't pack files that are laying around in your publish dir when you're developing in non-pristine state."""
1830,157917354,"b""Looks like deps is also separate. I still think you should use the list + those two special cases because nothing else works by probing around in output paths like that. It will be weird that manually copying something in to the publish directory causes it to be packed in tool case, but manually copying to output directory does not cause it to be packed in normal case. \r\n\r\nIf we miss a new special case, it's just a bug that's easy to fix, but globbing implies by-design flaky behavior when the publish directory is dirty."""
1830,157917809,"b""I don't have a problem with this. Maybe we should fix the existing pack test to use the same pattern."""
1842,161355563,b'Why this change?'
1860,162458901,"b""I'm surprised that most of these are in our nupkg. They are supposed to be pulled in separately by the CLI from the corefx support package."""
1860,162462771,"b'\r\nMost of them are from Microsoft.NET.Build.Extensions\\msbuildExtensions\\Microsoft\\Microsoft.NET.Build.Extensions, but those are excluded from the CLI  ingestion here: https://github.com/dotnet/cli/blob/5c35438cfe1ac17fd4c748b8be6c2818d1238807/build/MSBuildExtensions.targets#L10-L17 \r\n\r\nWe could (and probably should) exclude them from the .nupkg and not need to update these exclusions when the corefx support package changes.\r\n\r\n\r\n\r\n'"
1860,162462900,"b'tools\\netcoreapp2.0 has nothing but our assembly + satellites. Some of these are from tools/net46 and necessary, but not all of them.'"
1860,162506386,b'Agreed. I filed https://github.com/dotnet/sdk/issues/1865'
1857,162764583,"b'Different conventions were used in different places. Semantically, they are the same. '"
1857,163422817,"b""Oops. I forgot to loop back to this. The thing is that we only process the PPOutputPath files in the common case because nuget writes content items directly to generated props otherwise. There's a bool to override it though. I decided to revert the optimization, but now I'm thinking about adding it back. I need to add a content file test still."""
1857,163422875,b'cc @ericstj We discussed this approach.'
1857,163423009,"b""I couldn't repro it. I talked to @emgarten and it has something to do with assets flags on project refs, but none that I tried caused it. This is just moved from elsewhere."""
1857,163955475,b'Fixed.'
1857,163955809,b'Fixed.'
1857,163955854,b'Fixed.'
1857,163956811,"b'By design. It should start with runtimes. \r\n\r\nThis matches https://github.com/dotnet/sdk/blob/b0433decc8278f001c0bbbf053b6d488f51a62b4/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.ConflictResolution.targets#L48\r\n\r\nIf you dotnet publish a portable app, the RID specific assets will go to a runtimes/ folder.\r\n\r\n'"
1857,163957245,b'It was wrong. Fixed.'
1857,163958123,"b""Let's just let corefx do that: https://github.com/dotnet/coreclr/blob/d265eba12fed4ac124ef6b9f3fa06e2dded7c20d/src/mscorlib/src/System/String.Manipulation.cs#L1019"""
1857,163958660,b'Fixed'
1902,164196988,"b'There are a lot of trade-offs here. We should never skip an entire test on a localized setup unless the only purpose of the test is to assert the value of a string. Generally, there are other assertions that are more directly under test and we should retain coverage of those on non-English. Consider cases where an issue with localization causes a behavior change other than translation. Clasically, a translation with incorrect placeholders could cause a formatting exception / crash.\r\n\r\nIn the CLI repo, I did a mix of these two things:\r\n\r\n(1)\r\n```\r\noperation.Should().Succeed(); // we always want to check this and not skip the entire test\r\nmessage.Should().BeIfNotLocalized(""Something 42""); \r\n```\r\n(2)\r\n```\r\noperation.Should().Succed();\r\nmessage.Should().Be(string.Format(Strings.Something, 42))""\r\n```\r\n\r\nA third (simpler) approach, which might be good  enough here, would be to just check for the placeholder args: assert that message contains both win10-x64 and x86.\r\n\r\nI chose (1) where I didn\'t think hard-coding a copy of the English string was adding enough value, and (2) where I thought it was.   One example where significant value was added was the complex formatting of multiple strings that ended up as the help text for a command.\r\n\r\n`BeIfNotLocalized` was a custom assertion that I added to avoid having branches all over the tests. It could be generalized to something that takes `(string formattedString, string format, params string[] args)` and asserts that `formattedString` is the exact string on English and that `string.Format(format, args)` is the string on all locales. This would maximize coverage, but make the tests more difficult to write and maintain. Again, trade-offs.\r\n\r\n\r\n\r\n'"
1928,165766352,"b'The pattern should be that only CLI sets BundledXxxVersion.\r\n\r\nIn SDK, we should set XxxImplicitPackageVersion informed by BundledXxx.\r\n\r\nSomething like:\r\n``` xml\r\n<NETCorePlatformsImplicitPackageVersion Condition=""\'$(NETCorePlatformsImplicitPackageVersion)\' == \'\' and \'$(BundledNETCorePlatformsVersion)\' == \'\'"">$(BundledNETCorePlatformsVersion)</NETCorePlatformsImplicitPackageVersion>\r\n```\r\nBasically, the bundled versions don\'t change just because you want to use a different versions, they just say what version the CLI came with/knows about. Other variables in SDK default to them in various circumstances but can be overridden.'"
1928,165771305,"b'Nit: This can be simplified to \r\n\r\n``` xml\r\n<NETCorePlatformsImplicitPackageVersion Condition=""\'$(NETCorePlatformsImplicitPackageVersion)\' == \'\'"">$(BundledNETCorePlatformsVersion)</NETCorePlatformsImplicitPackageVersion>\r\n```\r\n\r\nSince we\'ll still check for empty and fall back to 2.0.1.'"
1821,166161580,"b""I'm not sure we need the overhead of two more test projects for these. I'd be fine cheating and putting them in the build.tests project."""
1821,166162352,"b""(I don't have a strong opinion on this I requested changes based on another part that I misunderstood.)"""
1944,167142259,b'I believe we used to have nix .sh files you could source. We should recover that too'
1944,167367606,b'Should the sh have the same early return here?'
1971,168899158,"b'I think we should have the same task split as built-in tasks NETSdkError, NETSdkWarning, NETSdkMessage. They can share code with a base class. \r\n\r\nI find it nice to read error (being fatal to build) up-front. \r\n\r\nIt will also have the nice impact of making this diff easier to review. ;)'"
1971,168899468,b'Nit: formatting is off. '
1971,168899481,b'Nit: here too'
1971,170133988,"b""How about moving Log.LogWarning, Log.LogError, and Log.LogMessage out to separate `protected abstract void LogMessage(string message)`. Then the base doesn't need to know about importance and you don't need this dance. It also factors the switch into smaller overrides."""
1971,170134226,"b""This is expensive. If you do the suggestion, you don't need a concept of Severity. It is just the behavior of the Log override."""
1971,170134392,b'Maybe MessageBase since we already have TaskBase.'
1971,170134439,b'Add an internal constructor to prevent derived classes outside this assembly.'
1985,170145425,b'Delete this.'
1971,170391446,b'This one should not be in common. Each task library should have a unique name for any tasks.'
1971,170392635,"b'This is notoriously slow. It may not matter when we have one message per build (and only in previews at that) at first, but could get pretty brutal if we ever need to log a lot of volume. \r\n\r\nI suggest extracting to ParseImportance and just doing:\r\n\r\n\r\n``` C#\r\nif (string.Equals(importance, ""High"", StringComparison.OrdinalIngoreCase)) \r\n   return MessageImportance.High;\r\n\r\nif (string.Equals(importance, ""Low"", StringComparison.OrdinalIngoreCase))\r\n  return MessageImportance.Low;\r\n\r\nif (string.Equals(importance, ""Normal"", StringComparison.OrdinalIngoreCase))\r\n  return MessageImportance.Normal;\r\n\r\nthrow new ArgumentOutRangeException(nameof(importance));\r\n```\r\n\r\nI\'m not concerned about not supporting a (theoretical) future importance value, because we control all of the inputs and test would fail the first time you try to use it in new code, at which point you just update the parse method.\r\n'"
1971,170392994,"b""Another option: default to high importance without user option to override since that's all we pass and only bother adding when we need another value at which time we can think about perf. Simplifies code."""
1971,170393211,b'File name does not match rename here.'
1971,170393648,b'I suggest setting this as a global property because we set bundled versions to stage0.'
1971,170393678,b'Even more important here: this will fail when stage0 is preview (after we take stage0 with bundled versions updated)'
1971,170395334,"b""Hmm, so built-in Message does it as you have it: https://github.com/Microsoft/msbuild/blob/master/src/Tasks/Message.cs#L138\r\n\r\nAnd I guess having different behavior than Message without Importance arg wouldn't be good.\r\n\r\nI'll leave it to your judgment. We can always improve perf if it becomes a problem."""
1971,170395545,"b'Two nits if you keep this:\r\n\r\n1. Use var, the type is obvious.\r\n2. use named parameter for the boolean literal: `ignoreCase: true`\r\n'"
2000,171030267,b'The fix I saw in C# was to `|` Tls12 on to the defaults. Should we do that here?'
1971,171060359,b'Extract method on this since `importance is not actually an argument of get_MessageImportance().'
2007,171421596,b'Nit: run remove and sort.'
2007,171421641,b'nit: extra line of whitespace'
2007,171421673,b'nit: extra line of whitespace'
2007,171421850,"b""I believe there's an NormalizePath intrinsic now that is preferable to use, but I'm not sure what version of msbuild added that and if we can depend on it. cc @jeffkl """
2007,171422173,"b""This doesn't seem to make any changes. Is WithProjectChanges needed?"""
2007,171447793,b'I think NormalizeDirectory will add trailing slash if needed and then we can avoid that /.  '
2010,172070634,"b""This is a common enough case, right? e.g. You'd get it using `msbuild`  without /restore with no prior restore?. I don't think we should be mentioning ProjectAssetsFile the variable, but rather the fact that we can't locate the project assets file. This is getting into the implementation details."""
2020,172078204,b'Good catch. Need to add tests for this. I did think it derived from IOException.'
2020,172078335,b'Because we want to keep the reader open for the caller to own unless the header is out-of-date.'
2020,172300674,"b""The cache file is in Intermediate directory, and has msbuildprojectname in it. If we double write here, project configuration is busted. We'd double write a bunch of other stuff too."""
2020,172300742,b'Yes copy paste error. Thanks'
2022,172304156,b'I like that second suggestion better too.'
2028,173225871,"b""Is the g an official/standard thing? I've gotten tripped up by it, pasting it as part of the hash. After a minute, I realized g isn't valid hex but I'd rather the Sha appear with better punctuation around it. I'll back away if there's an industry effort to write versions that way."""
2028,173227183,"b'We should consider doing nothing if informational version already contains revision id. This allows custom formatting and will play better with pre existing techniques like nb.gv, right?'"
2028,173237064,"b""I was thinking $(InformationalVersion.Contains($(SourceRevisionId))\r\n\r\nBut that isn't foolproof due to ordering and possible SHA abbreviation."""
2020,173316966,b'Fixed and test coverage added.'
2028,173579376,"b""I believe build will break here if msbuild version used does not include your change and SourceRevisionId is set. I'm not sure we want such a hard break. We may need to stub InitializeSourceControlInformation in props. \r\n\r\nI think we are saying that 15.7+ is required for 2.1.300, though, so maybe it's fine. We need to think about it carefully and be deliberate. cc @livarcocc """
2020,174237500,"b""No. It is still used at design-time to add the diagnostics to nodes in the dependencies tree in the IDE. The old ResolvePackageDependencies is in the same boat...\r\n\r\nIt's next on the list to look at speeding up the depenencies node, but in the meantime, this has to stay."""
2020,174238118,"b""No. It is vital that we use a path that is unique to the current TFM (and to a lesser extent the current configuration). Each TFM caches the assets for that TFM and only that TFM. The assets file can move around to wherever it wants and this file can stay in the IntermediateOutputPath, so there's no maintenance issue. I can add a clarifying comment."""
2020,174238170,b'No. See above.'
2020,174239008,"b""I will remove intermediate directory from this comment. It's the path to the cache file. The targets choose the location (but they need to pick a safe per-TFM, per-Configuration location)."""
2020,174239589,"b""Yes, but I'm leaving the design-time changes out of this PR as much as possible. The messages are the least of your worries there right now. I'd rather tackle the whole design-time resolution together."""
2020,174244127,b'Fixed.'
2020,174245122,b'I added a clarifying comment.'
2020,174249984,b'Fixed.'
2040,174557089,"b'The one remaining JoinItems still shows up as relatively slow. We probably want to see about speeding it up. Given that this only kicks in with SatelliteResourceLanguages set, it is probably OK.'"
2020,174558506,"b""The reason for buffering is because we don't know how many metadata items will be written and we need to prepend the count. We have the same problem for items but there we write a placeholder and seek back to set the count. Seeking costs flushing the file stream buffer, though so we don't want to do that for every item. I was trying hard to avoid allocations in the writer so as not to over-penalize the first, uncached build. I will give some thought to how to improve this, but I won't hold on this for the initial PR. """
2020,174558614,b'This may be worth defending against. I will file a bug.'
2020,174560037,"b""They are mixed but the methods should be reasonably separated enough. This was indeed for perf so that we don't end up with any intermediate data to allocate when going from assets.json -> assets.cache."""
2020,174928582,"b""As discussed offline another approach to this would have been to make the first run go from assets.json to ITaskItems directly (as before), but also write out the cache file for the incremental builds and incremental builds alone to use. The main reason why I did not write it that way was to make it so that full builds and incremental builds get the items from the same code so that there won't be mysterious bugs that only show up on incremental builds. This means that the entire test suite is stressing the cache reading/writing now.\r\n\r\nThere is potential to improve the readability of the code and the performance of the first build here, but I am reluctant to tackle that and reset the preview2 measurements that have been taken with this approach, nor do I want to lose the coverage property.\r\n\r\nFiled #2048 to think about changing the approach.\r\n"""
2020,174929404,b'This is covered by #2048. See https://github.com/dotnet/sdk/pull/2020#discussion_r174928582'
2020,174929790,b'Filed #2049'
2020,174930100,"b""#1711 is what I'm leaving open to tie up the loose ends in the design time case."""
2020,174930707,"b""I've added test coverage for that in 7b0dbb04f63ec9947a11c6e3a8a477e4048ad9ba\r\n\r\nThere was actually a bug that this fixes: if $(ProjectAssetsFile) or $(ProjectAssetsCacheFile) were to change between builds, we might consider a cache from a different assets file to be useable.\r\n\r\nThis would also have been easy to get wrong over time, so the test is definitely valuable. Great feedback!"""
2064,175554601,b'This should be localized'
2064,175554675,b'How was this code chosen?'
2064,175554929,b'This file has tons of unrelated whitespace changes'
2064,175555941,b'We have NETSdkError task. We briefly had NETSdkWarning but I believe it was just deleted due to being unused. Resurrect it from history and use it.'
2064,175557190,"b""I think those are mostly left over from Nat defensively putting a bunch of messages from project.json era dotnet and nuget in strings.resx before v1 loc deadline just in case we needed them. We don't set Code elsewhere but probably should. I'd follow the current pattern here and we can file a bug to assign codes and use throughout."""
2064,175565970,"b""We don't have any extensions warnings yet so this is unnecessary task load. We can wait for first use to add."""
2064,175570875,"b'Actually load is clearly lazy extensions error is busted now due to build refactoring breaking ifdef, so this is ok.'"
2074,176277658,b'Can you comment on when this is expected to change?'
2085,177224518,"b""We've lost this property again. Note that we will need to bump this for security updates before they are available on nuget.org or even to this repo from anywhere."""
2090,177590568,b'Where does that show up?'
2090,177591870,"b'I don\'t think we can just invent a name to go there.\r\n\r\nAnd there\'s not always a project involved, right? What about just single project with `<Reference Include=""A.dll"">` and A depends on B.dll sitting next to it?\r\n\r\n'"
2090,177592458,"b""I think we're missing cases if we only work with MSBuild projectReference metadata. There can be indirect dependencies that do not come from project references."""
2090,177594142,"b'OK, I think it should just be ""reference"". I think things will break if not: \r\nhttps://github.com/dotnet/core-setup/blob/61fb41c28a3ec63356df1d03f26444502b7cd19f/src/managed/Microsoft.Extensions.DependencyModel/Resolution/AppBaseCompilationAssemblyResolver.cs#L54\r\n\r\nYou can still see from the dependency tree when a ""project"" dragged in a ""reference"". \r\n\r\nAnd if there\'s enough metadata also when a ""reference"" dragged in another ""reference"".\r\n\r\nRight?\r\n'"
2090,177595369,"b'Where do we handle this case: ""What about just single project with `<Reference Include=""A.dll"">` and A depends on B.dll sitting next to it?""\r\n\r\nWhat is deps.json for that? It\'s confusing me to talk about this mix of project references and references straight away.'"
2090,177595819,"b'OK, I think I see the distinction in the code now. Tests would be really helpful to understand if all cases are covered.'"
2090,177597796,"b'I am still confused, actually. so the question stands.\r\n\r\nConsoleApp has no project references\r\nConsoleApp has direct dll reference to LibOnDiskA.dll\r\nLibOnDiskA.dll references LibOnDiskB.dll sitting next to it.'"
2090,177597822,b'Do we handle that case?'
2090,177600109,"b'Huh, that has a ProjectReference in it. I am talking about no project references involved at all, but indirect binary reference.'"
2085,177846586,"b""I like to see this refactored a bit so that I can quickly read WriteAdditionalLogMessages and see which issues these are. Right now it's a little buried that all of this is for one specific additional message."""
2085,177846785,b'\xf0\x9f\x91\x8d Love the BundledVersions approach :)'
2085,177886990,b'Thanks. \xf0\x9f\x91\x8d '
2090,178387297,b'Looks like both tests have a ProjectReference between app and dll references. I think we should have a test with no ProjectReferences but with indirect dll deployed via Reference. I think that because discussing that change led to fixes in the product code. Somebody might reintroduce the same wrong assumption without test coverage about what metadata to expect.'
2090,178387608,b'nit: use named arguments for null literals.'
2090,178387671,b'nit: use named arguments for null literals'
2090,178389157,"b""I see NuGetSourceType around elsewhere, but I don't know what it's testing for. I think we may no longer be setting this anywhere."""
2090,178389384,b'Extract to MetadataKeys.'
2090,178389495,b'Do we have test coverage for this satellite path change?'
2090,178390994,"b""Use MetadataKeys for all GetMetadata, won't comment again."""
2090,178391125,"b""If it's already covered by dependency, will we have set locale?"""
2090,178391716,"b""I'm concerned about the perf of doing N linear searches through M items here."""
2090,178909124,"b""I did remove it along with a bunch of redundant goop that was filling the log file. Now I don't know how tests are passing, but something has probably regressed. :("""
2111,178994128,b'Correct. I will add a comment.'
2111,178994168,"b""True. I'll fix it."""
2111,178994257,"b'Yes, I have. :) I also tried various combinations of not having the right targets in _BeforePublishTargets.'"
2111,178995816,"b""This matches pack --no-build so I think it's worth the consistency. Otherwise it should have been `PackWithoutBuilding`."""
2111,178995844,b'Fixed.'
2111,178995895,b'Fixed.'
2111,178995917,b'Fixed.'
2109,178996699,"b""Shouldn't this also be conditiond on UseBundledFSharpTargets?"""
2109,178998520,"b'The second arg here, if not defaulted to CallerMemberName needs to be unique, but I think this is copied from another test. Consider just making this: `identifier: targetFramework`. '"
2109,178998562,b'Same problem with uniqueness here.'
2118,179895602,b'I think we want to be able to have the info on non-publish optionally.\r\n\r\nWhat Steve and I had considered was:\r\n\r\nDefault experience:\r\n* Build (F5) -> runtimeconfig.dev.json disables roll forward\r\n* Publish -> writes the info\r\n\r\nBut there could be an opt-in to have build write the info (taking a perf hit) and not disable roll forward.'
2090,180507766,b'There is a regression: #2121\r\n\r\nUnfortunate that we had no test coverage. I will add NuGetSourceType back'
2126,180579496,b'Should we also be excluding resx from None regardless of EnableDefaultEmbeddedResourceItems? Seems like that would be more consistent.'
2126,180606659,b'Maybe add coverage for resource items too.'
2126,180606945,"b""Q: Does this traverse the project tree three times. I realize we're already doing it in common case. cc @cdmihai """
2138,181207539,b'This is not correct. There are cultures like zh-Hant that match neither of these.'
2138,181213284,b'Not knowing if the target exists seems like a blocker to me. There are things other than .resx that can have .Designer.cs. What happens if we bring up WinForms et al? How will we know whether the .Designer.cs should match resx or something else?'
2138,181213836,b'Have you measured the perf hit to evaluation? This reminds me of the automatic Link metadata that ended up being a perf problem.\r\n '
2138,181214090,"b""It is perfectly legal to have only culture-specific resx files and no culture-neutral. Another case where existence matters. I'm not sure we should ever leave the evaluation with dangling DependentUpon\r\n"""
2138,181222388,"b'Another issue is, for example, MyProduct.MyStrings.resx where MyStrings is not a culture.'"
2136,181231327,"b""I've been finding test runs fast in VS lately. And I suspect this may have helped a lot. But I think this is the right thing to do."""
2136,181233147,b'Fair trade'
2138,181238346,"b""I think the existence check covers this. If there's both MyProduct.resx and MyProduct.MyStrings.resx, then the nesting should be fine."""
2140,181246726,"b""I don't really understand what you wrote here. We can't condition Publish on NoBuild because we need /t:Publish /p:NoBuild=true to work. I think you're acknowledging that and that this isn't final, but I'm not entirely sure. ;)"""
2140,181248757,"b'These should be _ (""private"") and still thinking about the names.'"
2140,181250737,b'I like those names :)'
2140,181510785,b'nit: empty line'
2140,181511128,b'nit: empty line.'
2140,181511261,"b'This is written elsewhere as Should().Pass().And.NotHaveStdOutContaining(""..."");'"
2118,181898400,b'nit: use named arg for boolean'
2118,181898423,b'nit: named arg'
2118,181899435,"b""I would like minor-roll-forward to be disabled in runtimeconfig.dev.json. Then there should be one gesture to stop disabling it and include the versions. I don't want to support subtle behavior differences between build and publish, I would prefer that there's a hard break when you try to roll forward in F5 case."""
2118,181899550,b'named arg'
2118,181899573,b'named arg'
2148,182233326,b'At least put whitespace-only changes in their own commits. It breaks git blame to touch lines for no reason.'
2148,182233893,"b""Yes, git blame has -w, but various things invoke it for you. It's really better not to mix in style changes unrelated to a PR. Thanks."""
2152,182553147,b'Better to use 2.1.0 to be absolutely sure msbuild does not coerce to float instead of version.'
2152,182553288,"b""As long as it's in one place only and we have near zero expectation of changing it again, I think hard-coding is actually fine and honestly more readable."""
2118,183190812,b'nit: indentation looks non-standard here.'
2185,185040029,"b""There's risk of shipping a random prerelease here unless we are getting dependency uptake from prodcon. Are we? Using RTM seems better if not."""
2185,185040347,"b""I'm not a fan of using TargetFrameworkIdentifier conditions since they only work in ItemGroups, not property groups and I don't want to have to explain this when folks try to copy/paste/adjust. Also, this is now inconsistent with the item group just below."""
2185,185965106,"b""Looks like we'll pick up the netstandard1.1 from net46 ref, which should only require in-box facades."""
2185,185970167,"b'Offline, I gave in and we agreed to change the one below to match. ;)'"
2210,186202656,b'Done in 315e27a'
2215,186899197,"b""You're going to get the repo toolset fix in before this, right?"""
2215,187179101,b'nit: extra newline'
2234,187490614,"b'nit: pre-existing, but this can be const.'"
2234,187490663,"b'nit: pre-existing, but this can be readonly.'"
2234,187491674,"b""I'm allergic to `Util` suffix. :) We have Utilities in a few places, but even that bugs me. It leads to grab bags of stuff. Also, EmbedAppHost reads like we're embedding the app host in something, but we're actually embedding something in the app host.\r\n\r\nI think this could be something like `AppHost.Create`. Still thinking about the name. What do others think? cc @dsplaisted @peterhuene """
2234,187674148,"b""OK, let's go with AppHost.Create."""
2215,187742381,b'Is there a project system bug tracking this? cc @davkean'
2239,188416815,"b'>PackageToolShimRuntimeIdentifiers [](start = 27, length = 33)\r\n\r\nI think we should rename this to match the property, or shorten it and decide there\'s enough context here to just ""ShimRuntimeIdentifiers"" or even ""RuntimeIdentifiers"". Right now, the unnecessary subtle difference between ""PackAsToolShimRuntimeIdentifiers"" and ""PackageToolShimRuntimeIdentifiers"" is confusing me.'"
2239,188418170,b'This looks copied from ResolvePackageAssets before [this](https://github.com/dotnet/sdk/commit/b9d8bcf65d67c7cf9049fe104eea69bbf0aeaad2#diff-42d31913aec3dcadaa9bf9b5eafba94cR44) and [this](https://github.com/dotnet/sdk/commit/d6b5c8095f381744c90db95b4dfe9d6369d2cee3#diff-42d31913aec3dcadaa9bf9b5eafba94cR48)\r\n\r\nYou should remove this and call ResolvePackageAssetPath on the resolver.'
2239,188418650,"b'Nit: use self-closing tag. \r\n\r\n``` xml\r\n<_PackageToolShimRuntimeIdentifiers Include=""$(PackageToolShimRuntimeIdentifiers)"" />\r\n```'"
2239,188418827,"b'>(targetframework [](start = 85, length = 16)\r\n\r\nNit: casing: `$(TargetFramework)`'"
2239,188419914,b'Maybe we should do this for all tests here:  [https://github.com/dotnet/sdk/blob/f0ead5620a318ca57aa1a9e3e7b18db5d6984eaf/src/Tests/Microsoft.NET.TestFramework/ToolsetInfo.cs#L51](https://github.com/dotnet/sdk/blob/f0ead5620a318ca57aa1a9e3e7b18db5d6984eaf/src/Tests/Microsoft.NET.TestFramework/ToolsetInfo.cs#L51)'
2239,188420376,b'It looks wrong that this is in this property group. Why does the condition apply to it?'
2239,188420978,b'ok.'
2239,188421046,b'nit: extra blank line'
2239,188421292,"b""typo: directory. (Also, nit, I wouldn't capitalize it.)"""
2239,188422035,b'Strange to see this next to other Path.Combine calls. I think Path.Combine with each portion of path as an arg on its own line would be better.'
2239,188422289,"b""nit: I find `ToolCommandName + Path.GetExtension(resolvedApphostAssetPath)` easier to read. It's also faster than string.Format. but perf isn't really my concern here."""
2239,188423226,"b""This is because for other contexts, Apphost.Create assumes if host is already written, it doesn't need to be regenerated?\r\n\r\nI think it would be better to have a `bool overwriteExisting` parameter on AppHost.Create.\r\n\r\nJust so I understand, is the issue that the args to Create can change without the path changing, hence we need to recreate it every time?"""
2239,188424353,"b""(Sorry in advance, I  think this came up in the meeting, but I forget the answer.)\r\n\r\nWhat's the story for signing the shims put in this directory? Are we relying on folks to repack nupkgs?\r\n\r\n"""
2239,188433576,"b'Like I said on the overall review comment, we can talk about this separately and (maybe) do it as a follow-up. Can you file an issue to track it? #Resolved'"
2239,188723972,"b'I believe this and  the 2 options above it are out of place in the property group. I believe the intention here is that there is a NuGet package for the build tasks that can override the pack targets that come from the SDK. As is, if that is used, then it will break packing tools. I think these should be set unconditionally.'"
2239,188724808,b'cc @rohit21agrawal '
2239,188725573,"b'(By ""unconditionally"", I really mean conditioned only on PackAsTool == true.)'"
2239,188759399,"b""The whole point of that condition is to allow you to get nuget pack targets out of band from SDK. See #888. \r\n\r\nSuppose the user wants to try a version with a bug fix over what's in the SDK. This should not prevent them from packing a tool with that configuration. \r\n\r\nAlso, this file, sdk/sdk.targets (main entry point) is also the wrong place to put code to handle specific scenarios. This should be closer to where PackAsTool is implemented.\r\n\r\n\r\n\r\n"""
2250,188807213,b'nit: add whitespace line after this.'
2250,188808276,b'This would be easier to read/maintain IMHO\r\n\r\n``` C#\r\n{\r\n    if (first == null || first.Length == 0)\r\n    {\r\n        return second?.ToArray();\r\n    }\r\n    \r\n    if (second == null || !second.Any())\r\n    {\r\n        return first;\r\n    }\r\n    \r\n    return first.Conact(second).ToArray();\r\n}\r\n```'
2250,188808835,"b'Damnit, I was looking for this as a local.'"
2250,189322522,b'nit: `var`'
2250,189322694,b'use explicit comparer to document that you thought about it. Is `StringComparer.Ordinal` indeed what we want here?'
2250,189323206,b'nit: remove blank line'
2250,189323648,b'use explicit comparer here too.'
2264,190044386,"b""I suppose, but then I'd immediately follow up with a 4xx change to remove the condition. Is there a real concern or this just theoretical? We already ship products built against the packages in other repo toolset repos, right? My gut is that we should just make the right change in one place, but maybe I'm missing a genuine risk."""
2250,190713048,"b""Normally, I don't like mixing formatting with other stuff, but here we have code that doesn't follow our guidelines AND moving local to field was part of a fix. Please go ahead and add underscores. :)"""
2250,190723803,b'Remove the method.'
2269,191036687,b'Oops. '
2269,191517004,b'I was half way to refactoring from your first suggestion to your second suggestion. ;)'
2269,191589692,b'Done.'
2282,191602269,"b""Just a heads up: You'll need to assign error codes to these when you merge with my changes. Tests will fail to alert you to it as well."""
2260,191607605,"b""@eerhardt Is there any reason why we can't drop the exec here? I'm thinking about suggesting some things that could generalize yet simplify the code if we can."""
2286,191608572,b'cc @mairaw'
2282,191610650,"b""The steps should be:\r\n\r\n1. Pick highest error code + 1 (tests will fail if you leave a gap)\r\n2. Add `NETSDK1234`: to value like the others have now\r\n3. Put StrBegin comment like the others too\r\n4. Update XLF as usual.\r\n\r\nThere shouldn't be any code changes needed, only resx + xlf are impacted."""
2293,191953439,"b'This is likely where the slow-down occurs. Did you profile? Each call here is going to be doing some acquire/release ref counting. This is quite a lot of overhead to do for every byte.\r\n\r\nYou can get a `byte*` from the memory mapped file and drop to unsafe. That is what we do elsewhere where we have used memory mapped files for perf (e.g. System.Reflection.Metadata). Span<byte> would be better, but this code has to run on NET46.'"
2298,192446275,b'typo?'
2293,192826359,"b""You should put ReleasePointer in a finally regardless. Read from memory mapped file could throw, or there could be an asynchronous exception like thread abort. This is a case where there's a clear pattern, and there's no harm to following the pattern always. Reasons why you think finally isn't required today can be invalidated as the code evolves, and diff won't draw attention to it in subsequent reviews."""
2293,192828196,"b""There's an unfortunate pit of failure with this API where you need to add  MemoryMappeViewAccessor.PointerOffset to the result of AcquirePointer.\r\n\r\n(Aside: An AcquireSpan that did the right thing would be very nice. I will file an issue on corefx as it doesn't look like this got Span love yet.)"""
2293,192830335,"b""You can keep indexer syntax with pointers `p[a] == *(p + a)` \r\n\r\nI'd even keep the `bytes` name for the pointer."""
2293,192833158,"b""The interesting argument for memory mapped access level is actually MemoryMappedFileAccess, which doesn't appear in this overload, but the default (ReadWrite) is what we want.\r\n\r\nI would just use CreateFromFile(string) and let it use all defaults. Or, if you want to be explicit about the access, then you could go with:\r\n\r\n``` C#\r\nMemoryMappedFile.CreateFromFile(\r\n    appHostDestinationFilePath,\r\n    FileMode.Open, \r\n    mapName: default,\r\n    capacity: default,\r\n    MemoryMappedFileAccess.ReadWrite);\r\n```"""
2293,192833452,"b""We could pull in System.Memory, but then it's more dlls to distribute with the build task. I'd rather avoid the dependency as it seems each one we've pulled into net46 build task has caused one problem or another :("""
2293,192834779,"b'You should also check if ptr is null before calling Release. We want to be as good a citizen as [`ReadByte`](https://source.dot.net/#System.Private.CoreLib/shared/System/IO/UnmanagedMemoryAccessor.cs,afe8e26be70dbb5e,references), but just hoist the Acquire/Release to cover multiple bytes.'"
2293,192834969,b'Is `ptre`  typo for `ptr`?'
2293,192835057,b'You can use `null` instead of `(byte*)0`'
2293,193172962,b'This can also be simplified to `ptrMemoryMappedView[i + offset] = 0x0`\r\n'
2293,193173343,"b'Consider same name as other method too, just `bytes`.'"
2293,193173594,"b'This should also be in a finally.\r\n\r\nIt might be nicer to put it all in one try block calling two extracted methods that take byte* bytes, int length.'"
2293,193174153,"b'Still missing PointerOffset: https://github.com/dotnet/sdk/pull/2293#discussion_r192828196\r\n\r\nMy memory is actually unclear on when it is going to be non-zero, but it bit us in metadata reader.'"
2293,193174444,b'All the credit for this idiom goes to C. ;)'
2293,193245835,"b'Sorry. missed this before, but the thing that you are expected to check for null here is the pointer. And AcquirePointer is supposed to be in the try. \r\n\r\nSee how it is documented to use AcquirePointer here: https://source.dot.net/#System.Private.CoreLib/shared/System/Runtime/InteropServices/SafeBuffer.cs,17340e3be744c19e,references\r\n\r\nSo in this case, it would be:\r\n``` C#\r\n\r\nbyte* pointer = null;\r\ntry\r\n{\r\n     accessor.SafeMemoryMappedViewHandle.AcquirePointer(ref pointer);\r\n     byte* bytes = pointer + accessor.PointerOffset;\r\n     // use bytes\r\n}\r\nfinally\r\n{\r\n    if (pointer != null)\r\n    {\r\n        accessor.SafeMemoryMappedViewHandle.ReleasePointer();\r\n    }\r\n}\r\n```'"
2293,193503306,b'nit: bytes can be declared at first use. It is not access outside the try {}.'
2282,194161547,"b""Hmm, I'm very confused by this key name and message. You can publish a framework-dependent app without specifying a RID, you just can't get an exe for it without one. This is what happens out of the box with `dotnet new mvc; dotnet publish` and this is documented as a framework-dependent deployment.  """
2282,194164845,"b""I think we should just make it so that you get an AppHost whenever you have a RID and don't when you don't. (We can allow /p:UseAppHost=false if you really want to be tied to a RID but not have the exe. This is current self-contained false, but the more I think about it, the more useless that case is so I don't think we need to have a nice CLI spelling for it.)"""
2282,194168817,b'OK. Sounds good. '
2282,194174784,"b'I\'d like to consider iterating on this a bit more, but I don\'t want to block the checkin on it.\r\n\r\n> I personally think there should be a distinction between a ""portable"" (RID agnostic) deployment and a ""framework-dependent"" (RID-specific) deployment\r\n\r\nWe\'d invalidate a lot of knowledge and docs if we say that ""framework-dependent"" as a general term means tied to particular OS and CPU. I don\'t call the shots either, it is something we can discuss with the broader team.\r\n\r\n> So if we call dotnet publish without RID a framework-dependent deployment, then what should dotnet publish --mode fx-dependent do? \r\n\r\nI would be in favor of having it just produce a portable app without the apphost:\r\n\r\n`dotnet publish --mode fx-dependent` --> portable framework-dependent app\r\n`dotnet publish --mode fx-dependent -r win10-x64` --> framework-dependent win10-x64 app\r\n'"
2282,194183416,"b'For my proposal, I think it only works if we drop the fx-dependent-no-exe mode. Might be worth talking it through some more with others. Feel free to iterate on this with a separate PR.'"
2366,199265436,"b""Nit for the smaller change before this one to just let this be customized, we actually don't need $(Configuration) because the IntermediateOutputPath is configuration-specific (unlike BaseIntermediateOutputPath), default it obj\\$(Configuration), so here we're making obj\\Debug\\Debug\\shims."""
2286,199302136,"b'Do we still want to take this change, then?'"
2362,200434762,"b'Make this ""private"" with leading ""_""'"
2362,200435706,"b'Please comment this. I know some poor souls are going to read this and wonder what it\'s about. This is bizarre enough that tests aren\'t enough convey ""why"" we\'re doing it.'"
2395,202178851,b'Do we want another escape hatch than setting PackageType? What else does that impact?'
2395,202187812,"b""Good point. I'm convinced. :)"""
2394,202196135,"b""If we go with this change, I would wish this property didn't exist and there would only be RuntimeFrameworkName  But that would be technically breaking."""
2394,202196810,b'Does it make sense to ever use TFM version as AspNetCoreAllVersion?'
2394,202196941,"b""Same applies to other lines for Latest instead of Default and AspNetCoreApp, but I won't comment everywhere."""
2394,202197145,"b""I'm in favor of locking this down until such a feature exists. It will be far easier to diagnose typos than generating a bogus packagereference with no version."""
2394,202197439,"b""I believe moving this out of .Common.targets to here will remove it from outer builds, which strictly speaking is a breaking change. I wouldn't normally be worried about something that is likely so obscure, but this is targeting a patch right now."""
2394,202202116,"b'TBH, I have no idea what this actually does. \xf0\x9f\x99\x83 \r\n\r\nLooking into it.'"
2394,202202615,"b""OK, it's the design time targets for the dependency node that consume this. Studying the code. If it's what I think the hard-coding above should be fine, but I'm still not 100% sure."""
2394,202203287,b'It seems to treat anything in this list as implicit but not look at IsImplicitlyDefined metadata. cc @abpiskunov '
2394,202216854,"b""Ah, until now there was no dotnet/sdk changes for 2.1.401 (only dotnet/cli). it. Let's just leave it targeted at 2.1.4xx and if we decide to merge for 401, we can create the branch then."""
2394,202217033,"b""I think this is OK since it's the ultimate fallback."""
2394,202217507,"b""The Publish=true is redundant now, right? \r\n\r\nIt feels like this should also be a conditional entry on the PackageReference. I'm having trouble following the rationale for Update in this case, but not for RuntimeFrameworkName != Microsoft.NETCore.App.\r\n\r\nI suppose there could be a behavior change if user has explicit package ref and DisableImplict != true."""
2394,202218253,"b""@abpiskunov @davkean I'm trying to understand the consequences of changing this.\r\n\r\nThis gets passed here:\r\nhttps://github.com/dotnet/sdk/blob/d6ad2456962d54b9c6c6c5ea09b0519cd6faa31a/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.PackageDependencyResolution.targets#L269\r\n\r\nAnd turned into a HashSet here:\r\nhttps://github.com/dotnet/sdk/blob/f5db1af0f3107233ef233cd7116b5405b4047e5f/src/Tasks/Microsoft.NET.Build.Tasks/PreprocessPackageDependenciesDesignTime.cs#L78\r\n\r\nAnd marks things as ImplicitlyDefined based on HashSet alone here:\r\nhttps://github.com/dotnet/sdk/blob/f5db1af0f3107233ef233cd7116b5405b4047e5f/src/Tasks/Microsoft.NET.Build.Tasks/PreprocessPackageDependenciesDesignTime.cs#L171\r\n\r\nWhat does dependency.IsImplicitlyDefined control in the Dependencies node? Does it impact anything else in the IDE?\r\n\r\nIt looks like this will mark explicit user package references to these packages as implicit, which feels wrong. Is that right?\r\n\r\n"""
2394,202219667,"b""https://github.com/dotnet/sdk/pull/2395 is out that I think would fix #2364. Since the pain is similar, I think there's a case to be made that we should pull in #2395 into the same release as this. It would end up making the code easier to follow. Something for us to consider, but not feedback for your change. cc @wli3 """
2394,202503118,"b'We can drop the CDATA now, right?'"
2404,203159469,b'I understood the rationale for why we can have just one property is that we will align the versions of these shared frameworks. It makes me wonder why we have separate logic for setting the version of each of them here.'
2404,203160732,"b""Presumably because when we have the core shared framework, the baseline is still 2.1.0, but we've already set the precedent of a different baseline of 2.1.1 for ASP.NET?"""
2408,203194854,b'@khoiph1 I noticed in several of these that target-language is changed to a more specific culture than we actually use it as in the product. I would prefer if these continued to match the file name.'
2408,203195156,"b""UTF-8 BOM removed. It is not required so I'll let that go, but noting the diff."""
2408,203196735,"b'If possible, consider changing the tooling that generated this to leave the BOM/NO-BOM state intact.'"
2408,203198325,"b""I'm going to revert this for this insertion. I'm 99% sure nothing in the product is using target-language, but I don't want to take a change other than translation at the end of the release. We can talk about it on the next handback."""
2413,203545584,b'I would expect the logic for this target to be the same as GenerateBuildDependencyFile. We went through a few iterations on that and ended up against beforetargets=incrementalclean IIRC. It would be good to have one pattern for extra files we create.'
2423,205539010,b'nit: Try to keep the whitespace consistent to two spaces with the rest of the file. '
2423,205539449,"b""Feedback for next time, not for this review. It was already like this, then I fixed it in the merge and then the bump put it back. I'll clean it up separately."""
2413,206615800,b'This deserves a comment. Memory-mapped write is not updating last write time?'
2413,206616552,"b'It\'s cumbersome to have ""ExecutableExtension"" in class and method. Maybe  `ExecutableExtension.ForRuntimeIdentifier`?'"
2413,206616984,b'I forget what we decided was correct fo RIDs: case-insensitive or not? Pass StringComparison.Ordinal if case-sensitive and StringComparison.OrdinalIgnoreCase if case-insensitive.'
2413,206618053,"b""Why doesn't this use your helper?"""
2413,206619021,b'Why is there a condition here?'
2413,206716753,b'nit: extra newline'
2413,206717078,"b'I wonder if we can avoid this altogether by just preserving the apphost extension (or lack thereof). In other words, if we find apphost.exe, we make mytool.exe. If we find apphost, we make mytool. (And more theoretically, if we find apphost.future_os_extension, we make mytool.future_os_extension,)'"
2413,206717659,b'These are confusing me since they seem like they might just be `using static Path` when reading the code. These names are generally OS-specific. How about rename to ForwardSeparatorChar and BackwardSeparatorChar. Or WindowsSeparatorChar and UnixSeparatorChar?'
2413,206718084,"b""I see now that we search for the full name, not the name without extension and the approach I thought about earlier where we just preserve the extension could be prone to breaking if there's ever an apphost.something_else in the package."""
2413,206718964,"b""I didn't know that Exists works on items. What does it return if one exists, but another doesn't.\r\n\r\nI don't think it's necessary to condition adds to filewrites"""
2413,206719163,"b""Consider using Touch task for this, which is more idiomatic in msbuild for this purpose. You'd lose this comment in the file, but I don't think we need it."""
2413,206720870,"b""This name sounds like it's going to publish something and also doesn't make it very clear that it's specific to getting the paths for a DotnetTools package"""
2413,207352997,b'This name is still confusing me. Can it be something like `ResolveToolPackagePaths`? '
2413,207353196,b'Can you just add a comment that Touch uses the same API and therefore has the same problem.'
2447,207412875,"b'For completeness, this should have optional TargetFrameworkProfile as well.'"
2447,207413053,"b'For completeness, sku should include Profile (if any) as well in TFM. We don\'t support net40-client directly with our target framework inference, but I believe some folks do it explicitly or use community ""extras"" package to do it.'"
2447,207413263,b'TargetFrameworkVersion should parse as System.Version'
2447,207413437,"b""This doesn't seem necessary: FileMode.Create below will truncate the existing file.\r\n\r\n\r\nCreate | Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. This requires\xc2\xa0FileIOPermissionAccess.Write\xc2\xa0permission.\xc2\xa0FileMode.Create\xc2\xa0is equivalent to requesting that if the file does not exist, use\xc2\xa0CreateNew; otherwise, use\xc2\xa0Truncate. If the file already exists but is a hidden file, an\xc2\xa0UnauthorizedAccessException\xc2\xa0exception is thrown.\r\n-- | --\r\n\r\n\r\n"""
2447,207413483,b'nit: newline here.'
2447,207413754,"b""This means that if I set GenerateBindingRedirects to false, but GenerateAppConfig to true, that it won't work? I think in practice all SDK projects should generate binding redirects, but it feels a little clunky to tie them together."""
2447,207413955,"b""I'm wondering if GenerateAppConfig is a good name. Probably better to say what in app config we're generating to match GenerateBindingRedirects. GenerateSupportedRuntime, perhaps? It is a common case for netfx apps to already have an app.config for other reasons so we aren't always generating one from scratch, but that's what the name reads like to me."""
2447,207645805,b'You will need to make profile optional and only use it if set.'
2447,208721218,"b'Ah, ok, I always get confused by that.'"
2462,208760366,b'cc @eerhardt @richlander @steveharter \r\n\r\nMain question here is: Can we depend on the 1:1 version relationship of Microsoft.NETCore.App:Microsfot.NETCore.DotNetAppHost?\r\n'
2462,208761196,"b""I think I'd prefer removing this as it reduces the coupling from SDK to framework packaging. My assumption is that the amount of code in the apphost is small enough that you can manually upgrade it if you actually encounter an issue.\r\n\r\nBut there's also a thread where we're discussing whether this should just work if I target .NET Core 2.1 and if we want that, then we need to do something to get a host that is not 2.1.0 by default.\r\n\r\nAnd I suppose there's some risk of a security problem in the apphost itself, in which case we'd have to advise folks to edit their projects and not just rebuild with a new SDK.\r\n\r\n"""
2467,209383020,"b""I forget now, is the content of AppHost a pure function of these inputs, and that's why we don't need to recreate it?\r\n\r\nI realize this is how it was before, just in a different place. This is going to need to change when we start putting more stuff in apphost (version resources, icon, etc.)"""
2470,209800400,"b""VS started doing this at some point. I think we should just take it because I've reverted it myself a bunch of times. Would have preferred to do it separately, but let's get it over with."""
2470,210058406,b'nit: typo: s/the create**s** apphost/the create**d**/apphost'
2470,210062503,"b'Nit: I think ""Customization"" is redundant when we\'re already talking about ""Settings"" or ""Options"". I also think ""Host"" is redundant in nested scope with AppHost. \r\n\r\nEven more subjective, but I also prefer ""Options"" over ""Settings"".\r\n\r\nAnd finally, Framework Design Guidelines discourage public nested classes. Those don\'t apply here, but I like to follow this one. \r\n\r\nI would prefer any of these (listed in my personal order of preference):\r\n\r\n* `AppHostOptions` (top-level)\r\n* `AppHostSettings` (top-level)\r\n* `AppHost.Options` (nested)\r\n* `AppHost.Settings` (nested)\r\n\r\n'"
2470,210062958,"b'Continuing earlier nit, I\'d rename parameter here to just `settings`. (Or  just`options` if you do take the ""Options"" over ""Settings"" in the class name.)'"
2470,210063217,"b'Yep, this name has been bugging me for a while. :)'"
2470,210064105,b'Can you put these numbers into consts? They can be local and close by first use and keeping the comments to documentation nearby as well. '
2462,210081404,"b""Given this, let's just not do the implicit and for the rare case where there's a servicing fix needed for the apphost, we can have users manual ref a later version or just target the whole app to latest patch."""
2462,210088718,"b""Good point. I'm personally fine with it. User could still force useapphost to true and add a ref to a newer apphost if they really need it on 2.1, right?"""
2462,210090147,"b""OK, let's see what comes out of the thread you pinged."""
2470,210132262,"b""CreateAppHost might be good since it matches what we called it in the C# helper. I'm OK with Prepare too though."""
2470,210410819,"b""This one is technically not a constant. I would have used s_windowsFileHeader from my corefx upbringing, but we don't seem to be consistent on that and I think our editorconfig was tweaked to use just _ even for static fields. \r\n\r\nI don't care enough about this to block the commit, though. Seems we should make a call and fix all the static fields up separately."""
2470,210411445,b'Commented on https://github.com/dotnet/sdk/pull/1589\r\n'
2530,217529665,"b""What does IsShipping control? We need to have symbols archived and all the rest. We just don't push a package to nuget.org because the ship vehicle is the larger .NET Core SDK."""
2530,217539649,"b""Yes, please. I don't want to be seeing IsShipping=false in the csproj of our product code."""
2533,217854542,b'nit: `sealed`'
2533,217854585,b'nit: `private set` for output'
2533,217854622,b'nit: `private set` for output'
2533,217854987,b'nit: extra whitespace'
2533,217855008,b'nit: extra whitespace'
2533,217855070,b'private'
2533,217855098,b'private sealed'
2533,217855135,b'Or maybe private struct.'
2533,217855488,"b""N is small here, but this wouldn't be much more code if extracted into a simple loop and a separate method."""
2533,217855733,b'We should check if this has an observable effect on what happens to duplicate package refs with conflicting metadata. F# ran into bugs around this.'
2533,217855794,b'nit: newline between closing brace and comment'
2533,217855883,b'nit: extra whitespace'
2533,217856248,b'We should make sure to test VS thoroughly with this new dependency on CollectPackageReferences target to set versions: e.g. does it impact the dependency node or nuget package manager UI in any unexpected ways. '
2533,218910566,b'Good catch'
2533,218963115,b'Hmm... Not sure about breaking this.'
2543,219271274,b'Is this supposed to be always embedded? @tmat '
2543,219271457,"b""I don't understand this comment vs. IsShipping=true."""
2543,219271700,b'This is used by arcade somehow?'
2543,219271953,"b""I'm not seeing it in the diff anywhere else. Comment suggests we should be putting this in the project files."""
2543,219285874,"b'I agree with IsShipping=true, but the comment seems to suggest the opposite. This repository ddoes more than support infrastructure.'"
2533,219325156,"b""We're not supposed to use two spaces after a period:"""
2533,219326095,"b""Yes, that is what I was saying. Then you could use a few more lines in the extracted method to avoid all this LINQ. The reference to N being small was that it probably doesn't matter much for perf, but this is a new target that runs in design-time builds so I think it might be prudent to err on the safe side."""
2533,219327962,"b'nit, you can pass arguments to LogWarning and let it format for you.\r\n\r\n``` c#\r\nLog.LogWarning(Strings.PackageReferenceOverrideWarning, item.ItemSpec, MoreInformationLink);\r\n```\r\n\r\n(I know you just move this.)'"
2533,219329484,"b'This makes me more curious about whether mutations to items are visible outside the task. Logically, I expected itemsToAdd to start via `TaskItem(ITaskItem)` ""copy"" constructor.'"
2545,219643310,b'Please pick a more specific type than System.Exception'
2545,219643404,"b""We have a few error messages that are generally not possible without a bug, and we've just gone ahead and given them codes and let them be translated. I think it would be fine to do that here too.\r\n\r\n---\r\nIn reply to: [219338566](https://github.com/dotnet/sdk/pull/2545#discussion_r219338566) [](ancestors = 219338566)"""
2545,219643647,"b""With this change, I'm wondering if we need to keep AppHostOptions. Seems that would have been more interesting if we were going to do the resources via that. Maybe we should just convert it to a bool?"""
2545,219643688,b'I think this should be [Required]'
2545,219643850,"b'There have been a lot of different ""standard"" practices over the years. I\'m happy to follow whatever is current in coreclr/corefx. We don\'t really have any interop in this repo yet apart from tests. I am deferring to you guys on how we should be doing it.\r\n\r\n---\r\nIn reply to: [219338255](https://github.com/dotnet/sdk/pull/2545#discussion_r219338255) [](ancestors = 219338255)'"
2545,219643903,"b""The class named after module + nameof is nice, but I don't feel strongly about it.\r\n\r\n---\r\nIn reply to: [219643850](https://github.com/dotnet/sdk/pull/2545#discussion_r219643850) [](ancestors = 219643850,219338255)"""
2545,219644127,b'I agree. It would be nice to have tests that demonstrate the end-to-end usage of all of these.\r\n\r\n---\r\nIn reply to: [219612834](https://github.com/dotnet/sdk/pull/2545#discussion_r219612834) [](ancestors = 219612834)'
2545,219644421,"b"">CoreCompile [](start = 49, length = 11)\r\n\r\nI'm not sure about this dependency on CoreCompile. I know we need the intermediate assembly available, but there could be scenarios where we end up triggering a re-build when we were supposed to be using what is already on disk. This has come up a few times with other targets. I have to think about the best approach here."""
2545,219644854,"b'Still thinking about it, but I think the best approach following the existing idioms in common targets would be to generate the apphost to intermediate directory upon/after compile and designate the intermediate item as something to copy separately.\r\n\r\n---\r\nIn reply to: [219644421](https://github.com/dotnet/sdk/pull/2545#discussion_r219644421) [](ancestors = 219644421)'"
2545,219645210,"b'The only classes that should be public in this assembly are the build tasks.\r\n\r\nI missed in prior reviews that the AppHost class was made public (though you changed it to internal, which is good.)\r\n\r\nWhy is this being made public?'"
2545,220371377,"b""Correct. \r\n\r\nI was thinking about changing the paradigm to react to compilation instead of depending on compilation. \r\n\r\nI am concerned that there may be places where this target is invoked without expecting compilation to happen even if the source files are out of date. Look at the long discussion on https://github.com/dotnet/cli/issues/5331 for some background on why this is worth worrying about.\r\n\r\nWhat I'm wondering is: can the apphost generation happen in a separate target that is AfterTargets=CoreCompile (after we compile a managed exe to the intermediate directory, create the matching apphost next to it). And this target would just add the intermediate location to the set of files to be copied.\r\n\r\nAdding @rainersigwald who may have other ideas here."""
2545,220388386,"b""If it's too costly, I can live with not testing this."""
2545,220389811,"b'> If the scenario you\'re thinking about is one where we do ""publish"" --no-build\r\n\r\nI\'m thinking even more generally. This will cause any caller of GetCopyToOutputDirectoryItems to trigger compilation and I don\'t think that\'s OK. \r\n\r\nAgree that AfterTargets=""CoreCompile"" alone doesn\'t solve it. I\'m still thinking about what\'s best here.\r\n\r\n\r\n\r\n\r\n---\r\nIn reply to: [220379741](https://github.com/dotnet/sdk/pull/2545#discussion_r220379741) [](ancestors = 220379741)'"
2545,220706376,"b'Thanks, @rainersigwald. This sounds like a good approach. @sbomer, can you look at doing it that way?'"
2545,220762612,"b'We should use `$(IntermediateOutputPath)`, not `$(BaseIntermediateOutputPath)\\$(TargetFramework)\\$(RuntimeIdentifier)`. \r\n\r\nAlso, do we need the host sub-folder.\r\n\r\n$(IntermediateOutputPath) also has logic to ensure a trailing slash and it is recommended to use $(IntermediateOutputPath)something and not $(IntermediateOutputPath)\\something. This avoids ugly looking paths with double and mixed slashes and it also prevents the case where you a misspelled variable during development ends up writing to the root of your drive instead of relative to CWD.'"
2545,220763629,"b""I see. I'm just reading this for the first time due to the diff. :)\r\n\r\nWe can change this separately. """
2545,220765312,"b""Filed https://github.com/dotnet/sdk/issues/2555, but do feel free to fix it now :)\r\n\r\n> Why $(IntermediateOutputPath) instead of $(BaseIntermediateOutputPath)?\r\n\r\nIntermediateOutputPath is the correct place for all intermediate build output. BaseIntermediateOutputPath is generally not used except in two ways: \r\n\r\n1) the default IntermediateOutputPath is constructed as $(BaseIntermediateOutputPath)$(Configuration), \r\n2) nuget project.assets.json is written there because it spans multiple TFMs and configurations.\r\n\r\nThis actually reveals a bug: if the Debug and Release configurations have different resources, then we will end up crossing streams and potentially using the Debug resource in release or vice versa. There is also the possibility of parallel debug and release builds colliding on the same destination.\r\n\r\nI don't see why we need the host folder. It seems clean if we put the same structure in IntermediateOutputPath (host and managed dll side-by-side) as OutputPath. It would be next to the intermediate pdb and config too.\r\n\r\n\r\n\r\n"""
2545,220765478,b'cc @peterhuene '
2545,221025947,b'Right.'
2545,221029437,"b""With the create/get split, can this go before AssignTargetPaths again so that we don't need to do this?"""
2558,221353569,"b""This doesn't look right:\r\n\r\n```\r\n> $timeStamp = date +'%Y-%m-%dT%H:%M:%SZ'\r\n=: command not found\r\n```\r\n\r\n\r\nI would expect something like:\r\n``` \r\ntimeStamp=$(date +'%Y-%m-%dT%H:%M:%SZ')\r\n```\r\n"""
2545,221684915,"b""I don't follow yet. We're just computing paths here in this target now, not actually generating the apphost. Why can't that be done sooner?"""
2545,221690404,"b""I don't know if there's a problem with that. @rainersigwald ?"""
2545,221701669,"b""I'm ok looking at this after the initial commit, btw. If this is green, we can merge as is."""
2545,221763687,b'Thank *you* for the contribution of this feature!'
2578,224607257,b'My intention for when we deleted codes was to delete them from resx/xliff and put them in:\r\n\r\nhttps://github.com/dotnet/sdk/blob/99909b3075402d3e01045c9d76eecea056a8757c/src/Tasks/Microsoft.NET.Build.Tasks.UnitTests/GivenThatWeHaveErrorCodes.cs#L19-L23'
2578,224623372,b'Good call on adjusting the message'
2585,225709778,"b""From the descriptions, these don't sound like they'll do the same thing. Previously, we would always build with 'dotnet', but -fullMSBuild would instruct the *tests* to run desktop msbuild. It doesn't really matter if we build with full msbuild or not, but we need to make sure that tests will. I think this may cause us to build with desktop msbuild but have tests running core msbuild. That said, I'm going off the description, so I will look at the code to be sure."""
2585,225710410,"b'Oh, nevermind previous comment. This is what needs to happen and looks like it still is.'"
2585,225733273,b'Filed https://github.com/dotnet/sdk/issues/2589 after we discussed this offline. I will take a look at fixing it.'
2646,232037280,"b""How come this can already be removed? Our build wouldn't have picked up the changes. Can you check the contentes of our output folder are the same before and after. I think at some point I did notice that what I was originally solving with this wasn't happening anymore (shared framework assemblies getting copied with CopyLocalLockFileAssemblies), but I didn't examine carefully."""
2646,232040444,b'It feels like this should also be named ResolveXxx.'
2646,232041800,"b""It would be good to get a performance read on the cost of this, which, if I've understood correctly is going to be invoked in incremental builds where only source code has changed. \r\n\r\nI suspect it will be high because previously we did not even read the assets file in common incremental cases (instead only the assets.cache of ResolvePackageAssets). We may need to fold the ResolveCopyLocalAssets into ResolvePackageAssets.\r\n\r\ncc @johnbeisner are we set up to compare a PR to baseline?"""
2462,236350168,b'Intentional for 2.x. See https://github.com/aspnet/Docs/issues/9214#issuecomment-441723840'
2700,236929602,"b""I dislike first chance exceptions as much as the next guy, but I have to wonder if attempting the p/invoke and catching failure wouldn't be simpler. Since the exception would not happen on our full windows dev boxes, it wouldn't be a day-to-day annoyance\r\n\r\n@jkotas what do you think is the best practice here?"""
2705,239304771,b'@livarcocc We may need this elsewhere to take a new arcade'
2738,240412005,"b""Shouldn't it come out out ResolveFrameworkReferences this way?"""
2740,240520606,"b""Lol, looks like somebody else was debugging the same issue. You're welcome. :)"""
2740,240763654,b'The only variable without .dotnet was `_` private that I found.'
2740,240787930,b'OK'
2740,241936625,b'Fixed'
2740,241936628,b'Fixed'
2740,241936642,"b""Reverted, this wasn't the problem. It will just not copy some files in the VS build, but doesn't block the VS flow, the other parts of this fixed it without this change. This didn't do what I thought it did because it defpes on NetCoreSdkVersion."""
2740,241956723,b'Now reverted. Unnecessary with change to arcade to set PATH'
2740,241956725,b'Now reverted. Unnecessary with change to arcade to set PATH'
2774,244072155,"b""We need to avoid reading the lock file on incremental builds (for perf). I haven't read enough to see if that's happening here, but I'm gurssing it is. #Resolved"""
2788,245380104,"b""Why can't we build two different projects without moving them or renaming them?\r\n\r\nAnother thing to consider here is that in WebLarge most of the projects are netstandard 2.0. We might want to make the entire sln netcore 3.0 to really stress the frameworkreference case."""
2774,245763065,b'Nit^2: missing newline between methods'
2774,245794193,b'We should put ExternallyResolved=true here to speed up RAR.'
2774,245794278,b'Please file bug(s) for TODOs.'
2774,245794757,b'We have AssetsFile (plural) not AssetFile (singular) elsewhere and we should be consistent.'
2774,245795285,"b""nit: pre-existing nearby, but I'd prefer explicit `private`. """
2774,245795624,"b'This should be marked static.\r\n\r\nAlso, nit: private again.\r\n\r\n'"
2774,245798717,"b'>project.Root.Elements(ns + ""PropertyGroup"").Elements(ns + ""TargetFramework"").Single( [](start = 16, length = 84)\r\n\r\nConsider making this more defensive about project files that do not have a PropertyGroup, or more likely have TargetFrameworks instead of TargetFramework.'"
2805,247227659,b'Consider using System.Reflection.PortableExecutable namespace in System.Reflection.Medata.dll in the BCL for this:\r\n\r\n``` c#\r\nusing (var peReader = new PEReader(File.OpenRead(path)))\r\n{\r\n    switch (peReader.PEHeaders.PEHeader.Magic)\r\n    {\r\n        ...\r\n    }\r\n}\r\n```'
2805,247227943,b'Can revert this if using System.Reflection.Metadata works.'
2805,247231740,"b""Aside: There's a PEBuilder too for writing. Roslyn emits with it, but I don't know that it would easy (or even possible) to do the apphost transformation with it. We do have an open issue to avoid the Win32 API so there might be some things helpful in there. In a few *simple* cases, we've managed to use just the reader to read some data then seek to an offset and patch a few bits. For example, before the compiler had public signing we had a little tool to do it after the fact this way.\r\n"""
2819,247672910,"b""Some of these have had the target node removed entirely. \r\n\r\nThis is causing xliff-tasks to crash.\r\n\r\nFYI, @tmeschter.\r\n\r\nI'm doing a fixup, but we should understand the root cause."""
2819,248022407,"b'Thanks, yes. It should leave the target alone in this case.'"
2822,248024931,b'nit: extra newline introduced'
2822,248025109,"b'Seems this is a bug per email thread, can you link to it?'"
2822,248025205,b'nit: extra newline'
2819,248032720,"b'This was handled better in the past, by the way, so this seems to be a new problem.\r\n\r\nLong ago, I requested changes to be made against the branch as it was when the handoff occurred, and then let git identify conflicts. We could then resolve by accepting in favor of the handback and letting the tool add back the new strings. That would address this among other things.'"
2822,248080245,"b""I guess the plan is that the real runtime pack won't have TFM-sepcific folders, but I still feel a little uneasy about hard-coded netcoreapp3.0 here. Maybe at least link to a bug that tracks changing this?"""
2822,248080466,"b""Also, seems we can't just put things in the root as we have to know what is native and what is lib."""
2822,248080608,b'And the runtime team has a need to keep crossgen in a tools folder.'
2822,248081623,"b'Not sure this will rate perf-wise in practice, but you can avoid allocating for every file with `assetPath.EndsWith("".pdb"", StringComparison.OrdinalIgnoreCase)`. These sorts of things did add up in the optimization of ResolvePackageAssets. '"
2822,248082419,"b'Enum.TryParse can be very expensive. Just check if ""native"" or ""runtime"".'"
2822,248087441,b'Perhaps this can also be solved with a manifest of some sort like we have tracked for the targeting pack.'
2822,248101248,b'nit: extract method'
2822,248101676,"b""This looks like an absolute path and I don't know if that has any consequences. Can we do ./ to avoid confusion until we fix core-setup 4978? cc @vitek-karas """
2814,249175860,"b'Wherever you do `metadataReader.GetString` of handle `x` to compare it to string `y`, it is preferable to use `metadataReader.StringComparer.Equals(x, y)` as the comparison will then be done without temporary string allocations on the GC heap.'"
2814,249178168,"b'Watch out here. this ""flags"" enum is a pit of failure.\r\n\r\nThe correct way to check visibility is to to mask with TypeAttributes.VisibilityMask (0x7) and see which of the eight values you get.\r\n\r\nAbove will be true for every odd visibility:  e.g. `((NestedPrivate=0x3) & (Public=0x1)) != 0`'"
2814,249179420,"b""I see GetTypeName concats namespace . name so you can't use this directly. You should compare the namespace and name independently with `MetadataStringComparer`. \r\n\r\nYou could make `bool HasTypeName(MetadataReader metadataReader  TypeReference baseClass,  string ns, string name)` and compare the namespace and names independently with `MetadataStringComparer`.\r\n\r\n---\r\nIn reply to: [249175860](https://github.com/dotnet/sdk/pull/2814#discussion_r249175860) [](ancestors = 249175860)"""
2814,249180190,b'This should not be plural.'
2814,249180311,b'I mean it should be `enum KnownType`\r\n\r\n---\r\nIn reply to: [249180190](https://github.com/dotnet/sdk/pull/2814#discussion_r249180190) [](ancestors = 249180190)'
2814,249183567,"b'I think it would be better to throw BadImageFormatException here with a comment that there are no enum arguments to the attributes we care about. If ever we did encounter an enum argument to these attributes,  the stack will be more obvious if we fail now rather than reading the wrong number of bytes IMHO.\r\n\r\nSide rant: The metadata format for attributes is really silly here in that it requires you to resolve an enum type to its definition to decide how many bytes to read. I wrote the custom attribute decoder and it pained me to have to have this method.'"
2814,249211995,"b'This should be `==`, not `!=`.\r\n\r\nConsider switching over `type.Attributes & typeAttributes.VisibilityMask`'"
2868,251545256,b'What is this file?'
2868,251638357,"b'Maybe ""UnreferencedProjectInfo"" since it\'s a ""valid"" case?'"
2881,252065528,b'I think this can also be Microsoft.AspNetCore.*All* on 2.x.'
2881,252065923,b'Maybe consider any platform library that is not base Microsoft.NETCore.App to depend on Microsoft.NETCore.App?'
2881,252067781,"b'Yes, that sounds good.'"
2886,252090951,b'You should handle BadImageFormatException.'
2886,252100536,b'This is defined on CorFlags'
2886,252100678,"b""You don't need to cast to int here if you use CorFlags value for IL only"""
2868,252890239,b'Is this constructor used?'
2814,253580332,"b""I'm not thrilled about yet another place where this is hard-coded. Hopefully, we won't invent another core library. I don't have a good solution for you. """
2814,253580866,"b'Nit: Capitalize public fields: `Type`, `Assembly`'"
2814,253583842,"b'This can be done without allocating temporary strings on each call:\r\n\r\n``` C#\r\nStringHandle assemblyName = reader.GetAssemblyReference(assembly).Name;\r\n\r\nforeach (string coreLibraryName in s_coreLibraryName)\r\n{\r\n    if (reader.StringComparer.Equals(assembyName, coreLibraryName))\r\n    {\r\n        return true;\r\n    }\r\n}\r\n\r\nreturn false;\r\n```'"
2814,253585083,b'Use reader.StringComparer here to avoid allocations.'
2814,253585207,b'Use reader.StringComparer here to avoid allocations.'
2814,253589062,"b""Is this called? I can't find a use where the type argument is a reference and not a definition. If it is called,  do we need to handle nested type references?"""
2814,253598864,b'We should wait until tests can be enabled to merge. Please remove all the skips so that this is red in the meantime.'
2814,253614316,b'Or is this for json serialization to correct casing? Is there another mechanism for that?'
2814,253615398,b'How big do we expect these clsidMap files to be? This should probably parsed via StreamReader -> JsonTextReader -> JObject.'
2887,253674265,"b""I'm torn on this being a non-BuildErrorException because KnownAppHostPack could be modified by anyone. Unlikely though, and I guess this is just moved from elsewhere."""
2887,253675157,"b'Why do we need an explicit empty metadata value? Is this so that it can become ""data"" folder later, and also not the same place for all targeting packs all at once?'"
2887,253676203,"b""Didn't you do this already?"""
2887,255265927,b'Why not name this `FrameworkReferences`. Items feels redundant with the `ITaskItem[]` type.'
2887,255266231,"b""nit: I'd pref `Map` over `Dict` abbreviation."""
2887,255266381,"b""I'm not sure this needs to be true. I would expect the transitive FrameworkReferences to be raised from assets files before we get here. Is it worth stating presumed implications on a feature that doesn't exist yet?"""
2887,255266492,"b""Let's put the early return on know framework references here too for consistency. Can't hurt to spare the allocations."""
2887,255267113,b'This normalization of right-hand-side can be hoisted.'
2887,255269605,b'Is this test netcoreapp3.0 specifc?'
2887,255270003,"b""@livarcocc Are you ok with disabling the store tests while we make a call. I'm a bit worried about taking on debt if we get the call to keep it."""
2887,255270580,b'Why is this necessary?'
2887,255270949,b'nit: extra newline'
2887,255273476,"b'Should we put ""_"" in front of it if it wouldn\'t be public?'"
2887,255276678,"b'Ah, of course. The task name is a little ambiguous. I think of ResolveXReferences as something that turns abstract references into paths. Maybe we should rename it.'"
2887,255276720,"b""I think the actual limitation in parentheses here is fine. I understand why it's needed now."""
2887,255276792,"b""It's a little concerning that we broke 1.x with this change. I can't think of a reason why that would happen. I'd prefer that we investigate in case we're breaking other aspects of exisitng projects."""
2887,255278863,"b'Foos=""@(Foo)"" is common. I don\'t see the issue.'"
2887,255279310,b'Can this be hoisted?'
2887,255279445,"b""I guess it's cached, but still."""
2887,255280100,b'This too.\r\n'
2929,256075670,"b""cc @rainersigwald \r\n\r\nI'm observing it work correctly. If this is wrong, we have a test hole that we need to fix. """
2929,256075972,"b'For empty package folders, array.empty is incorrect. I could split the cases if you like.'"
2929,256076208,"b""Some are still using it. Do you think it's worth scrubbing? I can do it if so."""
2929,256132870,b'There was only one more use of ProjectPath that was no longer needed.  Fixed. The other tasks use it for various other purposes.'
2919,256500251,b'Extrasct some methods here. These large blocks in if and else are hard to follow.'
2919,256501811,"b""As long as you're adressing feedback from previous PR at the same time, I asked about hoisting this split too."""
2919,256502633,"b'But I think the whole RID matching thing needs some perf work, so feel free to leave this alone.'"
2919,256503253,b'There should be a bug referenced to remove this.'
2938,256874229,"b""What's the deal with PackAsTool here?"""
2947,257327858,b'@v-zbsail Do you know why this one was moved in a few files? '
2947,257328461,"b""It's not necessary to fix this now, but it would be helpful in the future if the order was always preserved by handback. It makes it easier to review and reduces merge conflicts."""
2947,257328505,b'cc @tmeschter '
2947,257741523,"b""Yes. I'm asking to avoid moving it on handback from where it was at handoff."""
2919,257794724,"b""This doesn't depend on runtimePackNamePattern and should be hoisted."""
2919,257794898,b'Neither does this block'
2919,257795591,b'Or this one'
2919,257795698,"b""There is often redundancy between RuntimeIdentifier and RuntimeIdentifiers. We should make sure to process each RID only once as this runtime graph stuff isn't cheap."""
2814,259099132,b'Good call.'
2979,260366496,"b'I would remove ""In 3.0 and above"" since it makes me think we need a condition here, but we don\'t. '"
2990,260488891,"b""We are allowed to generate PackageReferences during CollectPackageReference. We're already mutating them in this target, which is why I did it here and figured I'd add a condition to stop doing the whole target when there are no PackageReferences."""
2990,260533153,b'Because it adds package references '
2990,260533710,"b'They both run before CollectPackageReferences, but I want to go first here.'"
2990,260540443,"b""Because the Condition on '@(PackageReference)' != '' would not be false after ResolveFrameworkReferences runs. This is actually only an issue now while we're using PackageReference to simulate PackageDownload. """
2990,260541210,b'I added an individual opt-out in [950afa9](https://github.com/dotnet/sdk/commit/950afa9164fe71b049b0ab6c1102977f8048aa9c)'
2990,260557915,b'right.'
2994,261372831,"b""Existing: What does ReferenceManagerAssemblies do and why weren't we removing it for .NETStandard?"""
2994,261373562,"b""@davkean Should these be moved to VS targets as in https://github.com/dotnet/project-system/pull/4400/files\r\n\r\nWe still don't seem to have clear guidance on when to put here and when to put there."""
2994,261385020,"b""Thanks. Looks like it's it just a bug that we're hiding this for .NET Core and not .NET Standard..."""
2994,261397249,"b""We can track this separately: https://github.com/dotnet/sdk/issues/2996\r\n\r\nI just spotted it while reviewing your change, but it's existing so no need to come to a conclusion on this change."""
2997,261439410,b'This is not meant to be uncommented.'
2997,261439471,b'It comes from the .NET Core SDK bundled versions props file.'
2984,261785715,b'I always ended up with NuGetFallbackFolder getting in the way for this algorithm. Are we saved by not installing < 3.0 SDKs?'
2984,261792561,"b'> `$([System.Convert]::ToString("";"").ToCharArray())`\r\n\r\nIs this necessary? We have Split(\';\') elsewhere.'"
2984,261792714,"b""> which should hopefully be the latest version\r\n\r\nI don't think GetDirectories() has this order guaranteed by anything."""
2984,261793082,b'This is the correct algorithm:\r\n https://github.com/dotnet/sdk/blob/3659227954921dc77de97f15215e96e6027468d0/src/Tests/Microsoft.NET.TestFramework/ToolsetInfo.cs#L100-L106'
2984,261793249,b'Maybe Exec `$(_DotnetRoot)` --version?'
3002,261831758,b'https://github.com/dotnet/cli/issues/10537 tracks the manifests.'
3002,261831933,"b""> native assets can have a variety of extensions and I'm not sure if we know what that list is.\r\n\r\nCan't we look at the fixed set of runtime packs we have now? Is it not .dll,.exe,.so,.dylib?\r\n\r\nSwitching to include list until we have the manifests seems reasonable to me to err on the safer side."""
3002,261831969,"b""But I'm ok with this more targeted fix to unblock things with the least change given that we have an even safer medium term plan."""
2997,263205047,"b'A RuntimeIdentifier (e.g. `win-x86`) is not a TargetFrameworkMoniker (e.g. .`NETFramework,Version=v4.0`)'"
2997,263206072,"b""I'm not sure why we need a separate RuntimePackIdentifiers. Seems like it would simpler to have RuntimeIdentifier metadata on the RuntimePacks item."""
2997,263206957,b'I would just call this RuntimePacks.'
2997,263207125,"b""I don't think this is needed as input since you want the RID of the runtime pack and not the RID of the app. It gets overwritten, which is confusing me."""
2997,263207537,"b""You also want null for runtimePackIdentifiers here, as these are runtime packs for other runtime identifiers, that we're just wanting to download during restore for a later build/publish for that RID. These rids should not impact crossgen for current RID in any way."""
2997,263207917,b'Removing RuntimePackIdentifiers as I suggested elsewhere and setting RuntimeIdentifier on the RuntimePack item would make it easier to not get these cases confused since there would not be two different lists with the same constraint'
2997,263208486,b'When would this be null?'
2997,263208733,"b""nit: We usually put braces around single-line blocks too. (This is pervasive, but I won't comment everywhere.)"""
2997,263208777,b'nit: use var when the type is obvious like this.'
2997,263208914,b'Use OrdinalIgnoreCase to compare file names.'
2997,263209475,"b'You are passing in @(ReferencePath) for this, and not everything in ReferencePath is a reference assembly. This will include implementation assemblies for nuget packages that have no ref/ folder as well as the implementation of project references.'"
2997,263209603,b'We should probably check the same flag that the runtime checks to throw on reference assemblies.\r\n\r\n'
2997,263210145,"b""Reading both streams synchronously like this can lead to deadlock. \r\n\r\nI think this should derive from ToolTask which can handle the process creation, the output redirection, etc. We will get much better msbuild logs too. \r\n\r\nCrossgen should also be made to format it' errors and warnings in the standard pattern and msbuild will handle logging them correctly.\r\n\r\nOne complication is that we make everything in SDK derive from TaskBase currently. We'll have to make a ToolTaskBase and duplicate a bit of code between that and TaskBase."""
2997,263210304,"b'The logic is tightly coupled to the set of runtime packs we have today. If we ever had a win10-x64 specific runtime pack, it would fail below.'"
2997,263211618,"b""Use ToLowerInvariant.\r\n\r\nAlso, Split is wasteful, let alone two splits.\r\n\r\n``` c#\r\nint separator = RuntimeIdentifier.IndexOf('-');\r\nif (separator < 0)\r\n{\r\n    return false;\r\n}\r\n\r\nstring targetPlatform = RuntimeIdentifier.Substring(0, separator).ToLowerInvariant();\r\nstring targetArchitecture = RuntimeIdnetifier.Substring(separator + 1).ToLowerInvariant();\r\n```"""
2997,263211936,b'Is there another CorFlags? You have System.Reflection.PortableExecutable above.'
2997,263211984,b'Make sure to copy the file header with copyright in every new file'
2997,263579382,b'Easiest repro: add a project reference to a class library in the solution.'
2997,265648808,"b'>ToolTaskBase [](start = 26, length = 12)\r\n\r\nThe file name does not match the class name. Rename to ToolTaskBase.cs'"
2997,265655094,"b""I don't think we should wholesale override ToolTask.Execute as base.Execute does a lot of things. Normally, you would override only things like ValidateParameters, GenerateFullPathToTool, GenerteCommandLineCommands and let Execute do its thing.  Crossgen is a little weird in that it takes two invocations ((1) to compile (2) to create profiling symbols), but it's hard for me to see what we're giving up by replacing Execute and calling ExecuteTool twice. I particularly don't like that we'd be baking this override into a base class for other tool invocations. I think we should probably split (1) and (2) into separate tasks.\r\n\r\nIn https://github.com/dotnet/core-sdk/blob/master/src/core-sdk-tasks/Crossgen.cs (internal task we use to crossgen the sdk itself today), we played a different trick with calling base.Execute twice, but I don't really feel comfortable with that either in product code."""
2997,265660694,b'Is rhel.6 intentionally unsupported? \r\n\r\nDo I have to be on a a linux-musl machine to run crossgen from linux-musl runtime pack? Does rhel have the same issue?\r\n\r\nI think it would be better to switch over the runtime packs that are actually supported than to use Contains.'
2997,265660904,b'nit: This would be more readable as a switch statement.'
2997,265662824,"b'Directory.CreateDirectory succeeds if directory already exists, the guard is unnecessary'"
2997,265663592,"b""There's way too much code in there to catch everything and discard the stack trace. This will lead to bugs that don't get caught."""
2997,265664121,b'You should use mdReader.StringComparer.Equals instead of calling GetString and comparing strings. This will save on unnecessary string allocations.'
2997,265664975,b'This method is quite big and should be split into helpers.\r\n\r\n``` c#\r\nif (ReferencesWinMD(mdReader) || IsReferenceAssembly(mdReader))\r\n{\r\n   return false;\r\n}\r\n```'
2997,265666172,b'What does this do? Disable pre-compilation of a method whenever a missing dependency is encountered?'
2997,265667792,b'Should also check TargetFrameworkIdentifier == .NETCoreApp'
2997,266665690,"b""I'm still not sure about this. @rainersigwald do you think it's legitimate for a ToolTask to override Execute wholesale and use ExecuteTool multiple times? \r\n\r\nAn alternative would be to have one task that produces the files to be crossgened, and chooses the crossgen, etc.  Then batch trough the list with a task that does the crossgening one execute at a time. And then do the profiling pdb generation in a separate batch."""
2997,266688657,b'The PEReader needs to be disposed. It should be in a using that extends to all uses of the MetadataReader.'
2997,266690352,"b""nit: PEHeaders can't be null.\r\n\r\nI suggest checking PEReader.HasMetadata here. It will not return true if there's no CorHeader either.\r\n"""
2997,266690389,b'Use `catch (BadImageFormatException)` here.'
2997,266690655,"b""Add a check for mdReader.IsAssembly here and return false if not. Otherwise, GetAssemblyDefinition() will throw InvalidOperationException. This would be for netmodules, which aren't supported on core, but if one finds its way into files to publish, we shouldn't crash."""
2997,266692581,"b""It just doesn't feel like the way ToolTask was designed to be used.  Execute isn't particularly simple so it takes a lot of reading for me to see what we're giving up. For example, now I just saw that it handles the case where a tool has returned non-zero but didn't output anything that could be logged as an error and makes sure to log a generic error. We don't seem to have that handled."""
2997,266692994,b'Typo: Targed?'
2997,266693991,"b""Yes. I worked on System.Reflection.Metadata. We have the same pattern elsewhere. I'd rather risk a bug that is easy to fix (add an exception type here) then hide bugs with catch all."""
2997,266695310,b'We need to return false if crossgen failed. This can lead to the build succeeding with errors. '
2997,266696708,"b""Hmm, this still wouldn't work if we had say separate win-x64 and win10-x64 runtime packs in the future. If the host was win10-x64 and the target of the app is win7-x64, then we'd get to win != win10.\r\n\r\nThis isn't really the check I was wondering about when we chatted. I was wondering if instead we could check if the host rid is compatible with the target rid. I think that would be `runtimeGraph.ExpandRuntime(hostRid).Contains(targetRid)`. But as I mentioned that doesn't work either because the graph claims linux-musl can fallback to linux and also we use different architectures for host and target in the arm cases.\r\n\r\nSigh, this is complicated. It's no fun to have a build tool that couples the target OS to the host OS like this. :(\r\n\r\n"""
2997,266816564,b'It will throw BadImageFormatException if the file is not a PE file.'
2997,266968617,"b""But, really, if you get something other than BadImageFormatException for invalid PE file, it's either a bug in S.R.M or something catastrophic. Neither of those should be masked here."""
2997,267073982,b'nit: empty line.'
2997,267074379,"b'I should have been more direct when I suggested `if (!peReader.HasMetadata)` instead here. This is the idiomatic way. When it is false, it is not a managed PE. This will ensure that you have a CorHeader and that the CorHeader specifies a valid size.'"
2997,267076614,"b""In the obscure case where there's an invalid metadata size in CorHeader, you'd get InvalidOperationException on GetMetadataReader()."""
2997,267079760,b'I think this was a bug that was fixed. Is this still needed?'
2997,267081427,"b""\r\nThis is one of the most common task authoring bugs when there's a mismatch between Log.HasLoggedErrors and the return value. Usually, we use return !Log.HasLoggedErrors (enforced by our non-tool base class). For tools there's the extra case of non-zero exit code without a captured output that was converted into an error. The base ToolTask handles all of the cases for you, but we're not using it. \r\n\r\nI think this needs to be something like this to get the invariant right on your own:\r\n``` C#\r\nif (_crossgenFailures && !Log.HasLoggedErrors)\r\n{\r\n    Log.LogError(SomethingGeneric);\r\n}\r\n\r\nreturn !Log.HasLoggedErrors;\r\n\r\n"""
2997,267083288,"b""Uh, no, our custom Log that was copied over from TaskBase won't know to return true for HasLoggedErrors that came from ExecuteTool. I'll fix this up after this is merged. You can leave this for now."""
2997,267086087,"b""We're missing other things from base Execute too:\r\n\r\nLogging of command line (very useful when investigating issues from binlog).\r\nCatching of failure to *start* the process.\r\n\r\nIt's tough to debate these 1 at a time. This feels like a case where we should follow the pattern and not have to worry about these details.\r\n"""
2997,267089680,"b'Ping, @rainersigwald, I could use another opinion on this.'"
2997,267090505,"b'If we must keep it this way, I think we can steal more code from base.Execute and use our own wrapper around ExecuteTool that mimics it more carefully.'"
2997,267096424,"b'Thinking about this some more, I see other advantages to the split tasks approach I mentioned in https://github.com/dotnet/sdk/pull/2997#discussion_r266665690\r\n\r\n1. We can do incremental R2R easily and idiomatically using target batching and inputs and outputs\r\n2. We can decouple the part that runs crossgen from the part that is tied to publish, allowing us to clean up dotnet store to share code with this\r\n3. This decoupling will also let us use the product code to crossgen the product.\r\n\r\nI can work on this as part of dotnet store cleanup that is currently on my plate and we can review separately. I appreciate that this review has gone on for a while and this is a significant refactoring.'"
3030,267586656,"b'I wonder if we should still return them, but not add them to the copy/publish list. Just in case someone out there has done something funky and has there own custom loader to load them, they can take the returned items from here and slap them in themselves. I might be being too paranoid here.'"
3030,267586793,"b""Probably worth a comment that other runtimes can't load these dynamically."""
3030,267589746,"b""Yeah, this is cleaner. Let's go with it. Wouldn't be hard to add something back if someone screams and I doubt it."""
3030,267990739,"b""I think it's worth taking a step back here.\r\n\r\nAFAICT, in 2.x, the behavior would be this for both .NET Standard, .NET Framework with RID == ''\r\n\r\nCopyLocalLockFileAssemblies (default for .NET Framework, not default for .NET Standard) -> no runtimes/\r\nPublish -> yes runtimes/\r\n\r\nSomeone could be depending on this in either case. If we're getting cold feet on one of these, I would get it on both. \r\n\r\nSo then I'd go back to having the task return the items and making a call in the targets. That call could be behind an escape hatch. \r\n"""
3030,268001616,"b""That jogged my memory that at one time roslyn had their build task as netstandard and were publishing it and their own custom code code to probe in the runtimes/. This caused a bunch of problems and they now multi-target. But it does suggest that in rare cases somebody else may be relying on this.\r\n\r\nHow about we have a boolean that defaults to .NET Core App only but is user-settable and pass that in to the task instead of checking the TFM in the task? Then if someone is doing something exotic, they can set the boolean as an escape hatch. It won't be materially more complicated in code than what we have in this PR, and I would argue it's a saner default to only do .NETCoreApp.\r\n\r\n"""
3030,268001879,b'Question: is publish getting runtimes/ to copy from here or still from a different code path?'
3030,268003959,b'Looks like it depends on this:\r\n\r\nhttps://github.com/dotnet/sdk/blob/98d209f37fdf80760db1595f6611b5835ec5e595/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L298\r\n\r\nwhich would change publish to this path for certain cases:\r\n\r\nhttps://github.com/dotnet/sdk/blob/51aba9eaa1b98c313df7a77bc108846cfb7ba51d/src/Tasks/Microsoft.NET.Build.Tasks/AssetsFileResolver.cs#L52\r\n\r\nIt would be good to sync these up behind the same flag / tfm check'
3030,268006181,b'I think that same flag should be respected in the cases where publish goes through the legacy path.'
3039,268850370,"b""I see, I just reverted the files to before the commits that changed them. It can be re-enabled with a revert of this commit, so I don't think it matters."""
2997,269311188,b'This name feels quite general for something that only supports a single item of a given type with no metadata.'
2997,269311664,b'We should not rely on English messages here. Check for the error code.'
2997,269312483,"b""I don't think you need this anymore with the task refactoring. """
2997,269313942,"b""From our experiment, you abandoned the part where we check the exit code and make sure that we abort the build steps that would happen after crossgen? Why?\r\n\r\nNow we're just adding the failed items to the publish list and continuing? This seems wrong."""
2997,269328603,"b""Can't it call the existing TaskBase overload now?"""
2997,269328979,"b'I\'m not crazy about this because there will be an additional confounding error like ""can\'t find foo.ni.dll"" but only if it was a clean obj directory. Plus, we have to wonder about whatever other steps are not expecting the build to be in a error state but continuing.'"
2997,269329395,"b""That's exactly what I meant by check the error code. :)"""
2997,269340396,"b""Since this is just tests, I'll let it go. The name is good, but the type is not general enough to express all items. Like you can't add two excludes with this."""
3079,272424005,b'I think we should use a name other than NetCore. It is possible to have an SDK project targeting other frameworks and invoke publish and this.'
3086,272717430,b'It was confirmed that this field is not used. I think we could omit it entirely. I will forward you both the thread.\r\n\r\ncc @vitek-karas '
3086,272775916,"b""Didn't review everything, but let's not write turd files to disk if we keep the comparison. Even without perf, it's sloppy. Also, I believe it is writing straight to the final output dir? This will cause junk left behind if we crash, etc. """
3086,272776252,"b""And, yes, no Fluent assertions in the product.\r\n\r\nWhile you're in here, I'd also recommend getting rid of the new Builder().WithX(x).WithY(x).WithZ(z).Build(). It has always irritated me. It is Fluent for the sake of fashion. It is a glorified function call with a bunch of parameters. But you don't need to fix this now. Just getting it off my chest while we're here. LOL."""
3086,272776403,"b""I'll let you guys decide, but I think new only with an escape hatch is sufficient."""
3086,272777392,"b""We have a lot of previews to go. If the app breaks, we'll hear about it and tell them to use the escape hatch while we fix it. The real interesting thing I think the comparison buys us is finding differences in .deps.json that  don't lead to obvious consequences. That said, I trust you guys to make the call, having invested the effort in writing and reviewing it."""
3087,272778830,b'I think we can move to 3.0.'
3086,272779328,b'@eerhardt '
3086,272779379,b'Do we have any test coverage for this servicing mechanism? '
3086,272779529,"b""This is quite expensive. deps files can be big. We're reading into Strings unnecessarily. I know this isn't an inner loop task, but that's a lot of waste."""
3087,272780474,"b""I'm not super kean on more copy-local assemblies for the desktop build. We ran into issues with System.Memory and S.RC.Unsafe and mismatched versions in PresentationBuildTasks.dll. I don't know if it's worth adding more dependencies if we can't remove NewtonSoft.Json. And we can't because NuGet depends on it."""
3087,272780496,"b""I think I'd wait for our dependencies to stop using newtonsoft.json. This is going to just create more DLLs to ship and load, not fewer."""
3087,272780523,"b""Honestly, spreading this to every repo is getting silly. Let's wait for it to be in. I don't understand the rush to use this API. Particularly because we can't actually remove N.J until NuGet does."""
3087,272781012,"b""It can't be 3.0 only. It can be 3.0 + 472. We have to run in Framework for VS msbuild"""
3099,273174990,"b'nit, this is an extension method, so you can call it as peReader.GetMethodBody(methodDef.RelativeVirtualAddress).\r\n\r\n@tmat is there a faster way to determine if there is an IL than to check every method def?'"
3099,273196026,"b'This is just a syntactic transformation. (hence ""nit"") These two compile to the exact same IL:\r\n\r\nPEReaderExtensions.GetMethodBody(peReader, methodDef.RelativeVirtualAddress);\r\npeReader.GetMethodBody(methodDef.RelativeVirtualAddress);\r\n\r\nIt\'s just how the `this PEReader` parameter works here: https://source.dot.net/#System.Reflection.Metadata/System/Reflection/Metadata/PEReaderExtensions.cs,25\r\n\r\nSo if you can do the first one, you can write it in the second form.'"
3087,273324384,"b""I find it quite troubling that we're expecting every consumer to think at this level. The BCL should provide a way to write Json to a Stream, IMHO. """
3087,273324575,b'Where does 1 MB guideline for synchronous case come from? How would we know to choose that?\r\n\r\n'
3087,273324603,b'(If we were writing a big payload)'
3087,273328292,"b""That's fine if you need the control, but as you spread this to every consumer of NewtonSoft.Json in the stack, you're going to hit many that don't. Not being able to just write Json to a file is very odd for many of these components. """
3087,273328591,"b'>  (writing to a growable stream without a sync threshold, for instance memory stream, has the same concern).\r\n\r\nI would expect to be able to switch to FileStream from MemoryStream in that case, not start worrying about buffering myself.'"
3087,273330273,"b""It feels like there should be a thing between serialization and this layer that lets me write forward-only to a Stream. I don't get how that would regress the lower layer, which someone could still use if they really need it."""
3087,273456137,b'Could there be `StreamBufferWriter : IBufferWriter`?'
3087,273480261,"b""Maybe what I really want are the higher level things like serialization or DOM and not a stream binding for forward-only writing. It's surprising that this doesn't exist, but it's probably still lower than what we'd use if there were a full JSON stack available.\r\n\r\nSystem.Reflection.Metadata (which I maintained) has similar tradeoffs. It is a low level API by design upon which higher levels can be built. I often told people that it was not the direct API for their higher level scenarios. Maybe it's premature to push tooling away from NewtonSoft.Json without the higher level parts being implemented. This is not the sort of code I expect to maintain at this level of the stack. I fully appreciate that there are scenarios for dropping down this far, but I don't think the json files read and written by build tooling are a good fit.\r\n\r\n"""
3087,273688957,"b'Let me rephrase. I wassaying ""maybe I really want Serializer or DOM, but I am surprised that forward-only-writer-to-stream does not exist / is not directly supported"". \r\n\r\nJsonDocument is read-only today AFAICT from above. Are there plans to be able to build one up programatically and save like XDocument?\r\n\r\n(I reach for XDocument a lot more than Xml serialization because I\'ve been burned by serialization many, many times.)\r\n'"
3087,273691642,"b'I did think that there was no JsonSerializer avaialble yet though, happy to see that is in.'"
3112,274394077,b'Can we do this on write instead of read? That would prevent doing the string scanning on every incremental build.'
3112,274399917,"b""~~Even better, perhaps. Looks like there's an `EvaluatedIncludeEscaped` setter. So we could default construct and set that. For some reason, it's an explicit implementation of ITaskItem2 so annoying to call.~~"""
3112,274423313,"b""(Nevermind EvaluatedIncludeEscaped, the setter does the same thing as ItemSpec setter. It's the ItemSpec getter that unescapes. Sigh.)"""
3099,274450711,"b'(nit: we put braces around all blocks. I mentioned this in the original PR, but it got lost in the mix of tons of more substantive feedback)'"
3112,274457609,"b""(The package doesn't have a +, it has a %2B.)"""
3112,274459396,"b""Which is super weird. Was this intentional? Why does nuget even match PLIB assets to portable-x%2By? I'm guessing there's a bug farm in msbuild for paths like that based on what ItemSpec getter does.\r\n\r\nDo we have any other reports of real packages that are like this?"""
3112,274479719,"b""I think it's both. NuGet unescaped to find the asset was applicable, and MSBuild unescaped the path too. I think neither of these things should be unescaping. """
3112,274480085,"b""I don't think this package should have even gotten this far, but I'd love to understand if the %2Bs inside are meant to demonstrate a real scenario, and what that scenario is. @nkolev92 """
3112,274581088,"b""I'm OK with the fix (after it is moved to cache write). I'm also just trying to understand if nuget picking assets based on unescaped folder name is deliberate or a weird quirk that this package happens to rely on."""
3121,275045151,"b'nit: Use a regular comment, not a region for this.'"
3121,275509431,b'Note to delete this as you intended.'
3121,275509893,"b""I know you're saying this is temporary, but why do we need to duplicate what the prepare step checks here? Why can't we handle building the right list in the prepare step?"""
3123,275511025,"b'Can we just change the text of the signgle messages to enumerate all the current prerequisites, then amend it when we support fx-dependent? I think it should say something about self-contained currently being required.'"
3123,275511688,"b""`'$(SelfContained)' != 'true'` for consistency."""
3123,275522319,b'(with quotes)'
3111,275548740,"b'nit, extra space between `string` and `[]`'"
3125,276415664,"b""This is exactly why we are putting the targets portion in the SDK. The contract to the linker is pure, no global mutations. Yes, other tools might do this sort of thing, but we specifically cut defining a strict contract for such tools. The linker will be first class and any mutation of the build state will happen in dotnet/sdk. This + sufficient tests will ensure that we don't just break the linker as we used to when it was it's own nuget package. I want to make it possible to write these sort of things outside of the sdk, but it is a hard problem and specifically not one we are going to solve as part of this work."""
3132,276852850,"b""```suggestion\r\n                                          bundleRelativePath: item.GetMetadata(MetadataKeys.RelativePath)));\r\n```\r\n\r\nNot sure if I got that exactly right, but there's a class with constants for metadata. Use that."""
3132,276852909,b'```suggestion\r\n            foreach (var item in FilesToBundle)\r\n```\r\nnit: spacing'
3132,276853115,b'```suggestion\r\n      <_ResolvedUnbundledFileToPublishPreserveNewest \r\n```\r\n\r\nnit on casing. Un is not a word on its own.'
3132,276853168,"b'(Obviously, rename all references to it too.)'"
3132,276854278,"b'EmbedPDBs is a pretty generic name since there is also a concept of embeddign PDB in dll (DebugType=Embedded). You can avoid having a new name, by defaulting IncludeSymbolsInSingleFile to false when empty. This is very idiomatic in msbuild, you will see it all over the place.\r\n\r\n``` xml\r\n<PropertyGroup>\r\n   <IncludeSymbolsInSingleFile Condition=""\'$(IncludeSymbolsInSingleFile)\' == \'\'"">false</IncludeSymbolsInSingleFile>\r\n</PropertyGroup>\r\n```\r\nI don\'t even think you need the comment if you do that, it is pretty obvious what this handles.\r\n\r\nThen pass EmbedPdbs=""$(IncludeSymbolsInSingleFile)'"
3132,276854422,"b'```suggestion\r\n        public bool IncludeSymbols { get; set; }\r\n```\r\n\r\nI think it is worth using the same terminology throughout, and the public facing name is symbols for this feature.'"
3132,276854480,"b'```suggestion\r\n            var bundler = new Bundler(AppHostName, OutputDir, EmbedPDBs, ShowDisgnosticOutput);\r\n```\r\n\r\nnit: type is obvious'"
3132,276854878,"b'```suggestion\r\n          Outputs=""$(PublishDir)$(AssemblyName)$(_NativeExecutableExtension)"">\r\n```\r\n\r\nWe ensure trailing slash and you can see this is how PublishDir is used elsewhere. This is another common idiom in msbuild, it prevents accidental writing to root of disk if something is undefined. I once deleted my entire hard drive this way so I stick to this now :)'"
3125,276855278,"b'Given that there is mutation of state, I would prefer to keep this here so we can have a pure contract with the linker.'"
3125,276855607,"b""Ensure $(IntermediateLinkDir) has trailing slash, and don't put the / in the condition or other uses of it plus a file. Look at how this is done for the other output paths."""
3125,276857510,b'Not wrong.'
3125,276857787,"b""Ensure trailing slashes and don't use slash. `$(IntermediateLinkDir)%(Filename)%(Extension)` where somewhere else there's a !HasTrailingSlash -> add trailing slash. Look at the other ouptut paths that have this pattern"""
3125,276859021,b'Switch to new logic based on linker being enabled as discussed.'
3125,276859901,b'Reference  https://github.com/dotnet/sdk/issues/3109 here'
3125,276861713,"b""I'd rather not advertise an extension point, and treat that as a separate feature.\r\n\r\nIt feels weird that this is tied to the TFM as well. Also, publishing for .NETSTandard is very weird (I wish it didn't work), and there is no .NETStandard 3.0, the current version aligned with 3.0 timeframe is 2.1. I think we should limit to NETCoreApp 3.0+ alone. But I think this limit should be applied directly to the linker and not to some generic extensibility point."""
3125,276861904,"b'Should this be ExtraTrimmerArgs if the other public facing options are ""Trimmer""?'"
3087,276862281,b'Sweet! Thanks!'
3132,276862950,b'Why did you change this to Array.ForEach? I liked the foreach loop better.'
3132,276866161,b'I love how delightfully simple this task ended up being. :)'
3132,276872062,b'```suggestion\r\n        public bool ShowDiagnosticOutput { get; set; }\r\n```\r\n\r\nJust spotted a typo'
3125,276872217,b'Is this dead now?'
3125,277108984,"b""I don't think you need this anymore if we can merge #3152 first"""
3125,277112487,b'Sure'
3125,277113001,"b'Are these files? It is weird to have a ""public"" item and property of the same name. Is there a reason why the user wouldn\'t provide these directly as items?\r\n\r\nAlso, item names are generally singular (though it is not 100% consistent) so this is more of a nit.'"
3158,279521626,b'nit: missing space\r\n```suggestion\r\n                        if (!IncludeSymbolsInSingleFile)\r\n```'
3158,279521850,b'Why is this WindowsOnly?'
3158,279542192,"b'ah, of course.'"
3195,280455755,b'nit: reduce nesting by using `&&`'
3195,280457606,"b'nit:: So many allocations, but we already have an issue to speed up this task.'"
3192,280883236,"b""This ../../.. won't work in our test environment for full framework, where we set up things to point at the build output.\r\n\r\nThinking about the best approach here."""
3086,281814824,b'This code is in Common/ so I imagine it is used by the extensions for classic projects?'
3212,282271673,"b""I think the second best place to put this would be where we decide the AppHost default: \r\n\r\nhttps://github.com/dotnet/sdk/blob/f97c9e71b981b8e328a820b51d8a5fc147f33a24/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.RuntimeIdentifierInference.targets#L106\r\n\r\nIn the same way that ideally these targets wouldn't know about PackAsTool, you can almost argue that PackAsTool shouldn't need to know about above. We either keep PackAsTool with PackAsTool or UseAppHost with UseAppHost. And only the latter actually works. ;)"""
3221,282707455,"b""Let's add a DisableTransitiveFrameworkReferences here to match the DisableTransitiveProjectReferences. Also, I think we should dedupe here like we do for framework assemblies. Better to keep the cache small than to dedupe in targets afterwards.\r\n\r\nFinally, if transitive framework references are disabled, we should change resolve framework references to not download all packs."""
3221,282708209,"b'After deduping in C#, I think this could be:\r\n\r\n```suggestion\r\n      <FrameworkReference Include=""@(TransitiveFrameworkReferences)""  Exclude=""@(FrameworkReference)"" />\r\n```'"
3221,282887876,"b""I'd still like there to be an escape hatch. """
3221,283030345,b'What did we decide about case sensitivity of framework references?'
3221,283033010,"b""I'd just use a HashSet, I don't think it will be much worse for 2 elements (looks like it will be backed by 3 element Slot struct array) and then we don't need to think hard about this every time we come across the O(N^2) here. Unless we've measured meaningful gain, I prefer the natural data structure that scales than one that needs a comment like this."""
3221,283033858,"b""Hmm, but we probably want the order to be deterministic, meaning we'd need SortedSet or a List AND a HashSet.... Less sure now."""
3192,285230967,"b""I'm curious is the passing now because this is empty and it ends up using dotnet.exe on PATH? Or did we already get a stage 0 with $(NETCoreRoot)?"""
3231,285234842,b'You should be able to use the existing GetValuesCommand for this.'
3247,285282929,"b'Is it worth filtering to *.resources.dll here? We got burned by over-aggressively picking up random files fro runtime pack before. I realize the manifests should be the real solution here, but I wonder if we should more conservative in the meantime.'"
3247,285283416,"b""I assume somebody did this for debugging at some point? I think I agree it's not worth maintaining."""
3240,286755862,"b""Feels weird that this isn't a % + .\r\n\r\nIs IsKeyOutput a standard thing elsewhere?"""
3262,287074431,"b""Oh man, I had bumped the lang ver for other fancy stuff I didn't need and reverted the props after removing the fanciness. I did not even know this was a feature, but I hope it just tolerates either order now. I can never remember the order."""
3262,287074920,b'Fixed.'
3240,287120868,"b'```suggestion\r\n        <IsKeyOutput Condition=""\'%(_SourceItemsToCopyToPublishDirectoryAlways.FullPath)\' == \'$(AppHostIntermediatePath)\'"">True</IsKeyOutput>\r\n```\r\n\r\n@rainersigwald in case I\'m missing something. Seems like we can access FullPath same as TargetPath above instead of transform over the single item in the batch. To me that\'s easier to read. I also added quotes for consistency, though I\'m unsure of any semantic difference. I think it can come into play if LHS or RHS is not defined?'"
3259,287542492,"b""Why are we calling Distnct() if we've already removed dupes?"""
3259,287542508,"b""I think Distinct() preserves order in practice, but docs say unordered so maybe not wise to use it here. I think this should be factored into a helper if we can't use it."""
3259,287561139,b'Distinct is still there?'
3268,288225874,"b'The API shape here is getting weird. `AndThrowIfNotFound` vs. `bool throwIfNotFound`\r\n\r\nHaving trouble coming up with a better shape though. Feels like it should just be GetTarget with the parameters modifying the behavior, but that conflicts with real instance GetTarget that can return null.'"
3268,288227257,"b""Here, the bool local feels like it's unnecessary. Would be easier to read (subjectively) as `throwIfNotFound: !_task.DesignTimeBuild. Earlier, though, the local is used more than once so it has some value, and then I can see wanting to be consistent between the methods. So I'm not sure..."""
3268,288228104,"b""Do we need this anymore? I can't think of a case from here forward where we'd be using core msbuild but PackageDownloadSupported != true. If we don't need it now, might as well keep it out. I guess this whole thing will go away. but I think there's still some value in keeping the bridge code as small as possible until then. Less moving parts to think about."""
3268,288333792,"b'I think this will be a perf regression, forcing the assets file to be read from disk on every incremental build. I think it used be like this in fact, and I folded it into ResolvePackageAssets for this reason.'"
3279,289088359,"b'Why does the process for testing this involve a custom target running after a ""private"" sdk target? If this is a valid user scenario under test, then the project file needs to be expressible without this.'"
3279,289091273,"b'So the non default modes are unsupported? I still don\'t get why it\'s not possible to switch modes using ""public"" properties and no targets.'"
3279,289096049,"b""Can you add a comment to the test code here explaining why we're doing this?"""
3275,289109969,"b""I read this wrong the first time and now I'm not sure how it works. Studying."""
3275,289127699,b'Not related to my other comments: I think this should be RuntimeInformation.IsOSPlatform(OSPlatform.Windows))`'
3275,289129255,"b""(Aside:  really think this Target needs to be renamed. This is like the 4th time I think this is what turns framework references into individual references, but that's elsewhere.)"""
3275,289130500,"b""So we're looping through all the known framework references here, and I don't get how this error wouldn't trigger always on non-Windows since I would expect windowsdekwtop to be always in this list. @dsplaisted, @peterhuene  What am I missing?\r\n\r\nOn the first read, I thought this was processing the resolved framework references, not the known framework references.\r\n\r\n"""
3275,289148112,"b'> frameworkReferenceMap is mapping the FrameworkReference names to their item specs\r\n\r\nThis is where I was confused, thanks.\r\n\r\nSo the map only has the direct FrameworkReferences, right? Because this runs before we can find transitive ones in the assets file? We need to error on the transitive case as well.'"
3275,289149584,"b""> However, I think it will still download the targeting and runtime packs, which we want to avoid.\r\n\r\nYes, we need to avoid this. I see that below, the adding of known framework reference to download is not conditioned on the frameworkReference != null, which it can't be because we have to eagerly download all in case we get transitive references, right?\r\n\r\n(EDIT: This was already covered. Hiding.)"""
3279,289152091,"b""I wonder if this should be information. It doesn't seems like a good experience that if you add PublishTrimmed to a project where you use msbuild's warnaserror, then you immediately get a failed build."""
3275,289156017,"b'> As is, it should fail with NETSDK1073: The FrameworkReference \'Microsoft.WindowsDesktop.App\' was not recognized.\r\n\r\nI think it would be useful. and much clearer if the error was NETSDK1100 in transitive case as well. Bonus points if we can have an error that ""blames"" the package/project that pulled in WindowsDesktop, though that would be involved and something I\'d definitely handle separately. If it\'s going to fail with 1073 as is, I can maybe live with that for now too with an issue tracking a better diagnostic. depending on how involved fixing it is.\r\n\r\n> It will be tricky to test the transitive FrameworkReference failure, because we won\'t be able to build a package or a project that has a WindowsDesktop FrameworkReference on the same machine.\r\n\r\nUgh, good point. We should at least manually test.'"
3296,289884448,"b""Nit: Pre-existing, but I'm not sure why some things are camelCased and other things are PascalCased. See tfm vs Framework(s). It seems that everything will end up camelCased regardless as we're passing some CamelCase thing to JSON.NET? If so, I'd prefer that we used .NET PascalCased convention throughout."""
3296,289899016,"b'nit: I would go with Tfm. Framework design guideline for acronyms with more than two letters. E.g. System.Xml, not System.XML.'"
3296,290427042,"b""```suggestion\r\n        [Theory]\r\n```\r\n\r\nI'm not seeing why this requires .NET Core msbuild. I think it should pass fine when using .NET Framework msbuild as well. Copied from above?"""
3296,290427147,b'```suggestion\r\n        [Fact]\r\n```\r\n\r\nSame here'
3276,290919331,b'Why did this become windows only?'
3276,290927428,b'So we can actually use Microsoft.NETFramework.ReferenceAssemblies to test these x-plat and we do when you use the TestProject API to create projects on the fly:\r\n\r\nhttps://github.com/dotnet/sdk/blob/ff80c824a9e62ec721b467c9f6b0b407fbb14fa0/src/Tests/Microsoft.NET.TestFramework/ProjectConstruction/TestProject.cs#L183-L192\r\n\r\ncc @dsplaisted '
3276,290927523,"b""For checked in test projects, you'd have to add the package ref."""
3276,290927702,"b'Incidentally, we should probably use the shipping preview on nuget.org of Microsoft.NETFramework.ReferenceAssemblies now.'"
3305,291312623,"b'This should probably impact copy local defaults. See https://github.com/dotnet/sdk/issues/2662, which maybe this can solve. cc @peterhuene @vitek-karas '"
3305,291313082,"b'IsComponent feels a little off to me. There aren\'t a lot of ""Is"" properties in msbuild. And maybe ""component"" is too abstract?\r\n\r\n'"
3305,291313218,b'@KathleenDollard @richlander for help on naming this.'
3305,291317297,"b""We don't have to tie this to the initial commit, but I would love to have the end goal in mind."""
3276,291420164,"b""```suggestion\r\n                SourceFiles =\r\n```\r\n\r\nI think you don't need the setter in that case."""
3276,291420203,"b'```suggestion\r\n        public Dictionary<string, string> SourceFiles { get; } = new Dictionary<string, string>();\r\n```'"
3315,292180410,"b""Something went wrong and things are resetting to English in some files. Can you try reverting all the xlf and let it regenerate? Also, if you have any insight on how this happened, let's add an issue to github.com/dotnet/xliff-tasks."""
3320,292610579,"b'There should probably be logging here, but I want to make a pass over all the logging in this task: see #3319 '"
3320,292616924,b'No idea how the test passed. Will investigate. Correction applied.'
3320,292649946,b'I decided not to bother. I will be doing some perf measurements.'
3320,292650303,b'Do you know how I might repro that?'
3320,292650724,"b'I put a sloppy, if + return in this: https://github.com/dotnet/sdk/compare/f0a30eecf14d6b93e656aed045a907525e5342ee..925903a4c3ff5a1ad2651d2f784ac062e63d9e04\r\n\r\nI can refactor to a WindowsOnlyFact.'"
3320,292667705,b'It appears to be possible if you have a `Reference` to this file and two copy local items. Trying to repro.'
3320,292676449,"b'I think it would have to be a Reference without Private=false, which would never come from a package.  Even so, not managing to repro.'"
3320,292678100,"b""It still ends up comparing the two CopyLocal items in this case, still trying to understand if that's guaranteed."""
3320,292681833,"b'It can\'t happen for the publish case because we inky pass _ResolvedCopyLocalPublishAssets to ResolvePackageFileConflicts and they will all be CopyLocal and we will pick a winner among them. So it\'s definitely sufficient for the bug this claims to fix for publish. If you have a file reference to the exact same file version without Private=""false"", then there will be duplicates in ReferenceCopyLocalPaths when RAR finishes, though. I think this is edge enough to leave for another fight. I can\'t construct a real scenario.'"
3320,292692536,b'I went ahead and cleaned it up in aaa271b'
3326,293091058,"b""Not necessarily. These include the framework assemblies in runtime pack. There is talk of supporting portable apps for linker. I'm leaving the task of generating the right lists to #3109. This is purely a fix for framework-dependent + crossgen. Crossgen still requires a RID always, linker may not. I think there will be some common set of items to both, but the input to the tasks probably cannot be identical."""
3326,293091615,"b""I will refactor code to share the commonalities. Basically build up the common list, then add/remove as necessary for each tool or something. But let's save this for the discussion on the fix for #3109. """
3330,293550444,b'nit: weird formatting/indenting here and below.'
3331,294463773,b'nit: var since obvious'
3326,295011861,b'Fixed.'
3326,295011927,b'Fixed.'
3326,295012118,b'Fixed.'
3342,295390586,"b""Won't this just overwrite to true always?"""
3344,295582581,"b'Yes, I have found that the code creates too much jarring line noise that looks like an error (also adds target file path and line number).\r\n\r\nSee #2468, which I fixed.\r\n\r\nI made debug builds throw when we put codes on to informational messages. Once it got passed the nullref crash, it hit that next.'"
3347,296040806,b'I expect a test to fail and force you to name this with _Info suffix. This is so we can enforce error codes.'
3347,296044274,b'Good call. Then we can always dig everything out of the binlog.'
3348,296889609,"b""It's safe to leave the version unchanged when only adding metadata. The metadata count is recorded in the file:\r\n\r\nhttps://github.com/dotnet/sdk/blob/5c959e93e6cdda30049b02c945712d2798edb14d/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs#L259-L266"""
3348,296891780,"b""Why don't I see this being removed from:\r\n\r\nhttps://github.com/dotnet/sdk/blob/8cb31b0fd0bb5d36b9781442865f2e26cf6fbedc/src/Tasks/Microsoft.NET.Build.Tasks/ProjectContext.cs#L102\r\n\r\nDo we need both, and why? I was expecting to see things moved in to here from elsewhere. Is that the right way to think about this change?"""
3276,297381562,"b'The initialization block will work:\r\n\r\n```\r\nMicrosoft (R) Visual C# Interactive Compiler version 3.2.0-beta4-19321-04 ()\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nType ""#help"" for more information.\r\n> using System.Collections.Generic;\r\n> class C { public Dictionary<string, string> D { get; } = new Dictionary<string, string>(); }\r\n> var c = new C { D = { [""A""] = ""B"", [""C""] = ""D"" } };\r\n> c.D[""A""]\r\n""B""\r\n> c.D[""C""]\r\n""D""\r\n```'"
3276,297382531,"b'It will call the indexer setter:\r\n\r\n```\r\n  IL_0000:  newobj     instance void C::.ctor()\r\n  IL_0005:  dup\r\n  IL_0006:  callvirt   instance class [mscorlib]System.Collections.Generic.Dictionary`2<string,string> C::get_D()\r\n  IL_000b:  ldstr      ""A""\r\n  IL_0010:  ldstr      ""B""\r\n  IL_0015:  callvirt   instance void class [mscorlib]System.Collections.Generic.Dictionary`2<string,string>::set_Item(!0, !1)\r\n  IL_001a:  dup\r\n  IL_001b:  callvirt   instance class [mscorlib]System.Collections.Generic.Dictionary`2<string,string> C::get_D()\r\n  IL_0020:  ldstr      ""C""\r\n  IL_0025:  ldstr      ""D""\r\n  IL_002a:  callvirt   instance void class [mscorlib]System.Collections.Generic.Dictionary`2<string,string>::set_Item(!0, !1)\r\n```'"
3355,298672182,b'Thank you for adding these. :)'
3355,298673101,b'What happened here?'
3355,298673961,b'Naming nit: Should this be TargetingPackProfile? '
3355,298742544,"b""That's not obvious. We should either make it so all tests can write binlogs or revert writing of binlog before committing. I don't want to see this spread."""
3355,298742617,b'Also binlog writing is significantly slower and our tests are already slow.'
3355,298750906,"b""I don't have a strong opinion, but why? The Profile has no meaning at runtime."""
3392,300122508,b'You can save one of two lookups by calling add and checking return value.'
3406,301318396,b'Do you have a change queued to remove this metadata from bundled versions?'
3406,301350037,"b'With this in targets, is there a good way to disable this in the csproj? Do we need one? Suppose I want to use a newer one from a package...'"
3398,301661857,"b'Did I see elsewhere from @davkean that design time builds set $(ContinueOnError)? If so, should we use that?'"
3398,301667559,"b'Oh, I see that was #3399. What was the build error? We can work together to validate it if it\xe2\x80\x99s a better pattern.'"
3398,301854154,"b""So if we can get it down to just that, it'd be a lot cleaner. We don't even need the part that default ContinueOnError to false do we? I'd like to push on matching the precedent in common targets."""
3406,301855144,b'File an issue to turn these back on?'
3398,301855926,"b""It is already defaulted here: https://github.com/microsoft/msbuild/blob/0cd0e92a7243088977d31b56626b56d6116de016/src/Tasks/Microsoft.Common.CurrentVersion.targets#L608. \r\n\r\nSo at this point I would expect #3399, minus the defaulting. If that doesn't work, I'd like to understand why before doing anything more complicated."""
3393,302280246,"b""We could make an aka.ms/report-runtime-list-issue or something?\r\n\r\nI don't actually recall such a discussion at this point. cc @livarcocc """
3393,302282755,b'That works for me.'
3413,302825025,b'We should also doc that msbuild and dotnet build will use your changes as well.'
3413,302825325,"b'Yeah, I mean you can do command line testing of your bits this way.'"
3413,302825372,"b'```suggestion\r\nTo test your locally built SDK, run `eng\\dogfood.cmd` after building. That script starts a new Powershell with the environment configured to redirect SDK resolution to your build. Then run `& devenv.exe`.\r\n```'"
3399,302977781,"b""Good catch. I'll merge this now. Let's wait until a few days after WPF merges to remove this, just to avoid a race getting to the core-sdk repo between sdk and wpf and having some bad builds."""
3393,303155835,b'Ship it.'
3415,303169093,"b'self-nit: missing space\r\n\r\n```suggestion\r\n        private static (VBRuntime, string[]) GetExpectedOutputs(string targetFramework)\r\n```'"
3415,303169135,"b""```suggestion\r\n                        and '$(UseReferencedVBRuntime)' != 'true'\r\n```"""
3393,303662331,b'Should this be OrdinalIgnoreCase?'
3427,305041745,b'DirectoryNotFoundException inherits from IOException so you can remove it from being checked separately here.'
3441,305562118,"b'I was about to point out that if DisablePackageAssetsCache is set, then the files will always be regenerated. As msbuild will log:\r\n\r\n```\r\nBuilding target ""Building target ""Build"" completely. Input file ""foo.assets.cache"" does not exist.\r\n```\r\n\r\nAnd say that it was a problem. But actually, I think it works out well. The only reason to disable the assets cache is as an escape hatch for a bug. Once you do that, incremental builds slow down considerably by design. So, the build would still be correct in all cases, it would just slow down even further. :)'"
3441,305562303,"b""There might be an extreme edge case.\r\n\r\nbuild with assets cache on\r\nbuild again with assets cache off, change self contained.\r\n\r\nI don't think it's worth trying to fix, though."""
3441,305562336,"b""I suppose it isn't that hard to fix, we could delete the assets cache file when assets cache is disabled. Still not sure if it matters."""
3460,307086080,"b""I believe our guideline is one space after period.\r\n```suggestion\r\n    <value>NETSDK1112: The runtime pack for {0} was not downloaded. Try running a NuGet restore with the RuntimeIdentifier '{1}'.</value>\r\n```"""
3447,307536076,"b'```suggestion\r\n                    // by passing null to assemblyToCopyResorcesFrom, it will skip copying resorces,\r\n```'"
3373,307540547,"b'This is file size or timestamp, right?'"
3373,307540755,"b""I think it's more interesting to say that PreserveNewest means to not revert to source copy if any changes have been made since publish."""
3373,307540850,"b'Actually, the next sentence covers that so OK.'"
3373,307560123,"b'I *think* it is technically newer or older, just different timestamp or different size. cc @rainersigwald \r\n\r\nBut this is fine.'"
3373,307561164,b'https://github.com/microsoft/msbuild/blob/95862314f14733dd0086b1747264c40e6989f2cf/src/Tasks/Copy.cs#L136-L164'
3459,307836700,"b'You have this in multiple places, suggest adding to MetadataKeys.'"
3470,307931625,"b'This file is getting removed as the app host generation code has been consolidated in core-setup to prevent three copies: core-setup, cli, sdk.\r\n\r\nhttps://github.com/dotnet/sdk/pull/3447\r\n\r\nMy suggestion for this would be to bump the retry up to the task caller of Create. We could also PR this to core-setup, but it feels like retrying is more of a build thing than an app host library thing.'"
3470,307931727,"b'Code looks good, we just have to find a way to merge with #3447'"
3470,307931749,b'cc @wli3 '
3484,308735176,b'Maybe `ex.GetType().Name == \xe2\x80\x9cHResultException\xe2\x80\x9d` for now against a bug on core-setup or were you going to PR the fix to core-setup and wait for it to flow? This is the case we\xe2\x80\x99re hitting right? \r\n\r\nAlso my suggestion would be for core-setup to make the public exception contract more abstract like ResourceUpdateFailedException or something. They could still include HResult in Exception.HResult property and message. This would allow the API to become x-plat without needing changes here.'
3484,308778059,b'I think either reusing completely or reusing defaults would be fine.'
3484,308950074,"b""Looks like the values are assumed to be empty by default, and the Copy task code is what defaults them. Good catch.\r\n\r\nWe could still reuse the same variables, but we would have to copy the defaults into the task. Maybe that's ok?\r\n\r\nhttps://github.com/microsoft/msbuild/blob/95862314f14733dd0086b1747264c40e6989f2cf/src/Tasks/Copy.cs#L49\r\nhttps://github.com/microsoft/msbuild/blob/acc2569a30fc9749942f4cdc58811e12acabf096/src/Tasks/Copy.cs#L76\r\nhttps://github.com/microsoft/msbuild/blob/acc2569a30fc9749942f4cdc58811e12acabf096/src/Tasks/Copy.cs#L89\r\n\r\n"""
3500,310337067,"b'Weird, does the summary default differ? I know dotnet build passes explicit /clp:Summary, but tests are executing `dotnet msbuild` which does not. Maybe cleaner to add ""/clp:NoSummary"" as Execute arg than to adjust expectation and not be sensitive to different defaults.'"
3500,310339333,"b'I can reproduce `msbuild` having a summary and `dotnet msbuild` not having one. It is bizarre, but explains it. \r\n\r\n'"
3501,310340381,b'NETCoreAppMaximumVersion is set in BundledVersions'
3501,310340482,"b'NETStandardMaximumVersion is not set in BundledVersions, but probably should be. BundledNETStandardTargetFrameworkVersion is completely bogus and set to 1.6'"
3500,310340519,"b""I would prefer passing /clp:NoSummary than to have to adjust test expectations based on which msbuild we're using."""
3506,310711526,b'Umm'
3506,310711600,b';)'
3513,312140864,b'```suggestion\r\n                .Execute()\r\n```\r\n\r\nOops.'
3516,312249423,"b""This is bugging me a little, but don't block on it. I think we could set it to 4.0 in the display name here and when the project system switched over to consume this, the inconsistency would get fixed."""
3542,314500575,b'You do not need the to lowers here msbuild != Should be case insensitive.'
3542,314795331,"b'```suggestion\r\n    <!-- RollForward is only supported since .NET Core 3.0, but we should allow limited usage when the app is targeting even lower versions\r\n```'"
3543,314929703,b'Bump format version'
3539,315500374,b'I\xe2\x80\x99ll do that '
3539,316824834,b'The refs folder would not be here because this is no longer just everything in in resolved files to publish. The set of assemblies are supposed to be known implementation assemblies before we get this far. But I decided to be careful and still check that they are actually assemblies. So it makes sense to be careful there too.'
3539,316825022,"b""I'll rename this. Just implementation assemblies was confusing me as to whether it was for referencing or compiling."""
3539,316825336,"b'OK, this should not happen, but it cannot hurt to be defensive and checking Eligibility at all for references is defensive. The list coming in should be all managed implementation assemblies already.'"
3539,321395274,"b""Thanks, that was a last minute change and I haven't gotten back to this PR since I returned from vacation yesterday."""
3584,321479732,"b""Why do we need to do anything special. Doesn't arcade handle this automatically?"""
3538,321512882,"b""This won't be necessary for C++ if we're disabling nuget."""
3538,321513466,"b""This also isn't necessary for C++ .net core case. I am wondering if we should reduce this down to the things that we really need for C++. We should discuss with @dsplaisted """
3538,321513638,"b""Shouldn't this check if Version is already set?"""
3538,321513806,b'Are any of these no longer needed as of latest 16.4 build?'
3538,321514515,"b""Bug here in xliff-tasks. I've seen it a few times now and really need to get to the bottom of it. Looks like a race condition. The translations got reverted."""
3538,321515848,b'Do the others need this too? _GetComHostPaths?'
3538,321853083,"b'What I mean here is that this is doing special work for targeting net framework, but that is not something we will be supporting for the C++ feature. We should check what happens now if you put TargetFramework=net46 in vcxproj. I think it will break as the features that are importing SDK in VC project targets are doing so along with netcore specific compiler switches, etc.?'"
3538,323493201,"b'I would remove the ""below 5"". '"
3538,323494869,b'.NET 5 is not .NET Framework 5'
3634,323922514,b'```suggestion\r\n    <value>NETSDK1116: C++/CLI projects targeting .NET Core must be libraries and cannot be applications.</value>\r\n```'
3634,323923087,b'```suggestion\r\n    <value>NETSDK1118: C++/CLI projects targeting .NET Core cannot be packed.</value>\r\n```'
3634,323923641,b'```suggestion\r\n    <value>NETSDK1119: C++/CLI projects targeting .NET Core cannot use EnableComHosting=true.</value>\r\n```'
3634,323923980,b'This TMP file should not be checked in. Another issue in xliff-tasks?'
3635,323925315,"b'```suggestion\r\n          Condition=""\'$(GenerateDependencyFile)\' == \'true\'""\r\n```\r\n\r\nThis is already handled in BeforeCommon.targets, or did we end up with the problem that $(Language) is unset? If so, should only handle this in one place. '"
3635,323929203,"b""I still don't understand why we need this here and and in BeforeCommon.targets, then."""
3635,323930612,b'But we also do not set GenerateDependencyFile to true here: https://github.com/dotnet/sdk/pull/3635/files#diff-047adddc7dd7939efb1136eb13a8798eR75\r\n'
3635,323930862,b'I remember discussing with @dsplaisted that we would use GenerateDependencyFile set appropriately and not repeat C++ here?'
3634,324374711,"b'Thanks, @johnbeisner, @wli3 cb5bb53 looks good to me. :)'"
3658,328268454,"b'Ah, yes.'"
3658,328270524,b'Done with 9ee0e94'
3673,328288318,b'`buildCommand.Execute().Should().Pass()` is asserted in all cases.'
3703,332789320,"b""This impacts both packages to download (what I was after) and runtime config version (which is a bug I introduced, now we're targeting latest in FDD.)"""
3703,333161050,b'Fixed with do-over in 2cc2b8a'
3697,333703651,b'nit: var since typoe is obvious.\r\n```suggestion\r\n            var frameworks = new List<RuntimeConfigFramework>();\r\n```'
3697,333703987,"b'That bug is fixed, right? Should we start listing all frameworks always?'"
3759,335772207,b'These should also check TargetFrameworkIdentifier is .NETCoreApp. '
3796,339258283,b'Are we supposed to use 5.0 version in 3.0 branch? Arcade is pushing out fixes from a servicing branch to .NET Core 3.x branches/channels.'
3813,339849510,"b""I believe ExternalRestoreSources are no longer used, but please correct me if that's wrong."""
3813,339849539,"b""I couldn't find any references to it in build yml"""
3813,339849607,"b'This gets auto-updated by darc, and was already wrong.'"
3812,340295867,"b'```suggestion\r\n            DependencyContext dependencyContext = new DependencyContextBuilder(mainProject, projectContext, includeRuntimeFileVersions: false, runtimeGraph: null)\r\n```\r\n\r\nExtreme nit.'"
3812,340296455,"b'What is ""current"" in this context. Does this work if cross-publishing to a different RID than build host?'"
3812,340303127,"b'Ah, I see the RID on project context. I was wondering where it would get it from.'"
3796,340387744,"b'```suggestion\r\n    ""Microsoft.DotNet.Helix.Sdk"": ""2.0.0-beta.19474.3""\r\n```\r\n\r\nThis is from the same arcade build that we already take. '"
3796,340387869,"b'```suggestion\r\n    <Dependency Name=""Microsoft.DotNet.Helix.Sdk"" Version=""2.0.0-beta.19474.3"">\r\n```'"
3796,340387916,b'```suggestion\r\n      <Sha>0e9ffd6464aff37aef2dc41dc2162d258f266e32</Sha>\r\n```'
3796,340387973,b'Same as Arcade SDK.'
3796,340388055,b'Can you move this up next to Arcade and SignTool also. Will make the bot updates nicer.'
3796,340388156,"b'HostModel and NuGet should be product, not toolset dependencies, but that`s for another change.'"
3850,342215986,"b'I believe this happens in WriteItem(itemspec, library)'"
3850,342216973,"b'Something came along here and added PackageName and PackageVersion when we already had NuGetPackageId, NuGetPackageVersion.'"
3850,343798663,"b""The duplication of MetadataNames and MetadataKeys looks like a historical missed opportunity to consolidate when code for conflict resolution that had been in another project was merged into this code base. We really only need one of these and can union the values together. That needn't be part of this change, though.\r\n\r\nI am not aware of a scenario where PackageName and NuGetPackageId would be different. Could you share a branch where you attempted to standardize and an example test failure?"""
3797,343916360,"b""I might be able to revert this as they've fixed that bug. I had to ski in other repos, I will send follow up PRs to try to revert it everywhere."""
3850,345408695,"b""Hmm, I personally think NuGetPackageId was the better name, but more importantly, we should think about how breaking this will be. When I filed the issue, I think it was before we shipped with the new redundancy in this particular place. I hadn't sized up how breaking it would be elsewhere to consolidate.\r\n\r\nI believe I've personally shared using NuGetPackageId on the items from ResolvePackageAssets here with customers. I also think that the non-SDK nuget build targets also use NuGetPackageId. And finally, for Content items that NuGet puts directly in generated props. it uses NuGetPackageId. So for these items, I think it would be better to stick to NuGetPackageId, but I'm less familiar with the items that have only PackageName today and how often that is used in code.\r\n\r\nI tried looking through GitHub, but there's a lot of noise:\r\n\r\nhttps://github.com/search?l=&p=1&q=NuGetPackageId+extension%3Atargets+extension%3Aprops+extension%3Acsproj+extension%3Avbproj&ref=advsearch&type=Code&utf8=%E2%9C%93\r\n\r\nhttps://github.com/search?l=&p=1&q=PackageName+extension%3Atargets+extension%3Aprops+extension%3Acsproj+extension%3Avbproj&ref=advsearch&type=Code&utf8=%E2%9C%93"""
3867,348862274,b'Any chance we could put it in arcade now? '
3957,349827279,b'nit: _Orphan*Publish*FileWrites to match the others? I found myself wondering if this would collide with build.'
3957,349828055,"b'Is PublishDir normalized to full path somehwere already? I think maybe we should normalize it. <Hash ItemsToHash=""$([MSBuild]::NormalizeDirectory($(PublishDir))"" />\r\n\r\nhttps://github.com/microsoft/msbuild/blob/9c33693c492a0cb99474dcb703bfd0947056d8a9/src/Build/Evaluation/IntrinsicFunctions.cs#L415-L420\r\n\r\nThis would guard against different spellings of the same output path breaking the incrementality.'"
3957,349828223,"b'How long are these hashes, any risk of Long path issues?'"
3957,349828467,"b""Does this step maybe mean we don't need the hashing. Because it will only consider files in current publish dir as delete candidates?"""
3957,349829929,"b'Answering myself, no because the hashing allows alternating between different directories and getting correct incrementality between them, right?'"
3912,358404787,"b""It feels wrong that this conditions on ReferencePath but doesn't use ReferencePath."""
4112,362570620,"b""```suggestion\r\n            StringHandle namespaceMaybe;\r\n```\r\n\r\nA nit, to be sure, but if I'm reading correctly, since we'll either assign a real value or return false before using it, this initialization appears to be unnecessary. Leaving it out will let the compiler catch issues with its definite assignment analysis."""
4112,362570709,b'```suggestion\r\n            StringHandle nameMaybe;\r\n```\r\n\r\n(Here too)'
4063,362653448,b'Naming suggestion: `projectContextHasProjectReferences` (here and wherever else this name is used.\r\n\r\nElsewhere it was confusing me that this seemed to be referring to a single project reference rather than the general set of all project references.\r\n'
4063,362654042,b'Sounds fine to me.'
4063,362654354,b'Do we not have one of these somewhere that can be reused?'
4063,362655127,"b""Seems OK. \r\n\r\nBut why does this depend on ResolveAssemblyReferences? I don't see anything from what it does being used here.\r\n\r\nruntimeconfig is so small, that I sort of wonder if it wound't be simpler, easier to maintain, or more efficient to just generate it and write the whole file only if different rather than any hashing that might need to be kept up to date with new properties.\r\n\r\n"""
3645,369232171,"b""Please put this back as it was, but put the code as it should be in the comment. Otherwise, we're left without the line to replace the other two pending https://github.com/Microsoft/visualfsharp/issues/3207. """
4207,373263927,"b""What's the bug? Yes, separate PR. Could be helpful if we need to port to other branches?"""
4236,379686977,"b""I think this should include the keys and values in the hash. Otherwise you're hashing just the keys, I think. So the values could change and not change the hash.\r\n\r\nSee this for an example of how to achieve that: https://github.com/dotnet/sdk/blob/e605483699158a9202beb4eb9b4e18717c83a6f9/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.GenerateAssemblyInfo.targets#L126\r\n\r\nBasically any metadata that is read by the task needs to be hashed.\r\n\r\nWe read at least both ItemSpec (Identity) and Value:\r\n\r\nhttps://github.com/dotnet/sdk/blob/a5f5bb5183517cb301050288b25c9c727e52e8a6/src/Tasks/Microsoft.NET.Build.Tasks/GenerateRuntimeConfigurationFiles.cs#L283\r\n\r\nhttps://github.com/dotnet/sdk/blob/a5f5bb5183517cb301050288b25c9c727e52e8a6/src/Tasks/Microsoft.NET.Build.Tasks/GenerateRuntimeConfigurationFiles.cs#L303\r\n\r\nI recommend a test case that stresses this if I've correctly identified an issue here, because it's very subtle."""
4207,380974580,"b'I would remove the ""for now"". '"
4207,380974729,"b'This has the wrong code, I though I added validation for this. Is there a test failing on it?'"
4207,380975746,b'.nit: we put braces around all if/else/loop blocks'
4207,380976401,"b'Already like this, so not high pri, but what is the error when this returns false. Should we consider logging the individual cases? I suppose these are mainly thing that are not expected to actually happen?'"
4207,380976472,b'nit: braces'
4207,380976564,b'nit: braces'
4207,380976811,b'nit: braces'
4207,380976874,b'nit: braces'
4207,380977078,b'nit: avoid regions.'
4207,380977908,"b'Looks like all uses of this are private, so this can be private. \r\n\r\nnit: consider moving this lower, away from the public task parameters.'"
4207,380978043,b'nit: braces'
4207,380978155,"b'ok, I give up on commenting on all of them. :)'"
4207,380979558,"b'Yes, there is a test failing with ""Expected string to start with \\n""{StrBegin=\\""NETSDK1126: \\""}"" because localization instructions should indicate invariant error code as preceding translatable message., but \\n""{StrBegin=\\""NETSDK9999: \\""}"" differs near ""999"" (index 17).""'"
4207,380989467,b'You never know how plans will change.'
10651,381014637,b'If this needs to be manual should it be outside the begin/end?'
10728,385953333,"b""My precious! We will need to bump the msbuild min version. Which I'm sure 5.0 will do eventually."""
10728,385954526,"b'nit: possible to avoid two version comparisons by checking if TargetFrameworkIdeintifier is still empty. Not sure the perf is any better, but could avoid having the 5.0 threshold duplicated.'"
10728,386017139,b'Note the !contains(+) above here. This was meant to filter out PCL and will bite for net5 platform specific tfms.'
10728,386720546,"b""Nevermind. I remember + was discussed at some point and for some reason that's what I remembered. lol"""
10750,386736333,"b""Is this up to date? Worth doing an update now if not? So we're not waiting on maestro as much?"""
282,83461191,b'Can you build `net20` or `net35`?\n'
282,83462271,"b""I don't have full context here, but shouldn't the condition be `$(TargetFramework.StartsWith('net'))` so that `net20` and `net35` get the `DESKTOP` define as well?\n"""
282,83464300,"b""> (Though do we really need to build net2.0 libs in 2016?)\n\nI'd hate to make that big of a decision in a PR comment, right? \xf0\x9f\x98\x89 @Sridhar-MS?\n"""
282,83473758,b'`net40-client` will unblock NuGet.\n'
12254,447087405,b'Please use `SearchQueryService/3.5.0`. This marks the service entry that supports package type filtering (which is required by your scenario).'
12254,447087899,"b'To be clear, this `domainAndPathOverride` is just for unit testing, right? So things can be tested offline?'"
12254,447088239,b'You could even link to here in your code comment:\r\nhttps://docs.microsoft.com/en-us/nuget/api/search-query-service-resource#versioning'
12502,455444229,"b'This should have been ""contains"" instead of ""does not contain"". essentially I was trying to test the integration between the .net CLI and nuget to ensure that the verbosity parameter is accepted. Really it would be enough just to verify that no error is returned. Just test fails right now on master branch because the nuget bits are too old.\n\nTotally agree on the parser tests. I\'ll take a look.'"
12502,455918278,"b""Fixed this test and added more detailed unit tests for the parser.\r\n\r\nI think it's nice to have a test (this integration test here) that asserts an acceptable version of NuGet is being consumed. I can remove if you'd like though."""
379,87483437,b'This is bigger than the original set of default references in project.json/DNX. How were these chosen? Based on the .NET Framework default template today? Can we make this a bit smaller?\n'
394,90761122,b'Can we change this to be an attribute?\r\n\r\n/cc @yishaigalatzer @rrelyea '
450,90791451,"b""Hard coding 1.6.0? Don't we want to match the major and minor of the netstandard TFM if it's > 1.6.0?"""
461,91223473,b'Is this really right? Why remove it? Is it a stop gap?'
450,91229716,b'Is this a version comparison? '
450,91444616,"b'lol, that is so random'"
461,91792493,"b""Doesn't com actually work on .NET Core (on windows)?"""
468,92012703,b'Makes total sense\r\n'
461,92926316,b'Can we file a bug?'
525,92931026,b'I think the property name is different in MSBuild /cc @nguerrera ?'
528,92950537,b'Yes that looks incorrect. It should be `$(Version)`'
561,94102024,b'Separate item groups with conditions would be clearer. '
561,94104052,b'Then manually group by similar conditions?'
978,105527090,"b'Errr, what is this thing...'"
1329,122363778,b'What does this look like in XML? An empty element?'
1725,150667463,"b""There's one piece of code in RAR that I'm worried about with this change https://github.com/Microsoft/msbuild/blob/cb6c2643fe4a072f28e685bc46df3bace17a7108/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs#L2305-L2306"""
1725,151038535,"b""It's not quite that rigid @cdmihai I think we just need to also set the UsingSystemRuntime or UsingNetstandard as a result certain packages being referenced in the assets file. @nguerrera is that what you were thinking?\r\n\r\n> This case is actually not as bad as AutoGenerateBindingRedirects where I'm finding that we do need to do the entire dependency walk (but can skip search for .pdb, .xml, serialization assemblies).\r\n\r\nUgh, wuttttt. Why do we need to expand the graph for binding redirects? Are we missing assemblies?"""
1725,151236719,"b""Binding redirect computation doesn't require a graph walk at all though. I get that RAR might use that information but it just requires the direct references (the edges) and all of the selected versions. The shallow check that design time builds do for netstandard and System.runtime might be enough to do this."""
1725,153696017,b'Why the new DependsOnTargets?'
2293,192543510,b'Maybe use Span instead of going unsafe?'
2293,192543524,b'Why not put this in a finally?'
2293,192947506,"b'Yea, seems fine.'"
11456,416208083,b'\xf0\x9f\x98\x84 nice!'
576,94502321,b'typo: `Direcotry` (should be `Directory`)'
685,96827734,b'Typo: `Intersetction`'
685,96827825,b'Typo: `FilterProFile` (`j` missing?)'
819,99477686,b'typo: `Driectory`'
837,100023810,"b'Consider using `String.StartsWith` with a culture-invariant comparison. The current `Regex.IsMatch` test does not do what is intended (the `.` character is a regular expression wildcard that will match anything). \r\n\r\nTry the following code in the C# Interactive window; it returns `true`: \r\n\r\n```csharp\r\n> using System.Text.RegularExpressions;\r\n> Console.WriteLine(Regex.IsMatch(""SystemX"", ""^System.""));\r\nTrue\r\n```\r\nhttps://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/'"
310,84566145,b'@livarcocc The only case where adding `**\\*.xproj` here would have an effect is if there is an `.xproj` in under the `compiler\\resources` folder.  Is there any normal scenario where that would happen?\n'
326,85249777,b'Is there ever a case where it would be correct to do this (ie have `RuntimeIdentifier` be for x86 but `PlatformTarget` be x64)?\n'
310,86056522,"b""One is for the `TargetFrameworkAttribute` and comes from the temp folder.  The other is for the other assembly attributes that the SDK adds, and is in the intermediate output path.\n\nI've factored this out into a separate method that removes these, with a comment to explain what's going on.\n"""
349,86188001,"b""What do you think we should do if `GenerateDocumentationFile` is false but `DocumentationFile` is set?  Since you've got two properties that essentially contradict each other and it's not clear which one should take precedence, I thought it might make sense to just make it an error.\n"""
351,86266856,"b""I don't think there's a way to solve this right now, but it seems to me that you wouldn't want the NuGet package generated in an x86 or x64 folder.\n"""
351,86268140,"b'You also have the Configuration and Platform defaults in `Microsoft.NET.Sdk.props`, is there a reason to also put it in this targets file?\n'"
351,86268801,b'Hack -> workaround (or did you already change this in another PR?)\n'
351,86269284,"b""We should probably rename this parameter or otherwise refactor so that we're not passing in `x64\\Debug` as the `configuration` parameter.\n"""
351,86270003,b'Is this test related to the OutputPath changes or is it just filling in more general test coverage?\n'
379,87484574,"b""> Based on the .NET Framework default template today?\n\nYes, that's what I based it on.  However, I'm suggesting that we make it even bigger by default, to include all the types that are in .NET Standard 2.0.  That way you'll have access to all .NET Standard 2.0 types by default whether you are targeting .NET Core or .NET Framework.\n"""
371,87503482,"b'> File bug on SDK to represent the TODO and link to the blocking external issue.\n\nTo clarify, you mean file a bug in the SDK repo to remove the workaround in tests once the NuGet bug is fixed.  Correct?\n'"
371,87507018,"b'OK, filed #380 for this\n'"
379,87626622,"b""@rainersigwald What's the syntax to compare version numbers in MSBuild?  Or do strings that parse as version numbers automatically get compared as such?\n"""
381,87651445,"b""> Wouldn't this cause GenerateBuildDependencyFile to run on Clean?\n\nThe `IncrementalClean` target runs during a normal build (`CoreBuild` depends on it).  `IncrementalClean` depends on `_CleanGetCurrentAndPriorFileWrites`, which depends on `_CheckForCompileOutputs`.  So it's confusing (which is why I asked for Rainier's review), but I think it's doing the right thing and not causing this to run during Clean.\n\n> Did you prefer this for a reason?\n\nI think it was because `GenerateBuildDependencyFile` also writes files to the output folder, so I thought it might make sense to be before the `CopyFilesToOutputDirectory` target, which depends on `_CheckForCompileOutputs`.\n"""
379,88151052,"b""I don't have a strong opinion, but I left it out because it's not currently included in .NET Standard.\n"""
398,88393698,"b'Looks like this is missing the word ""is"".  ""an error that **is** neither avoidable...""\n'"
398,88394333,"b""Doesn't this indicate a bug in the library, in contrast to the comment for `BuildErrorException`?\n\nAlso, I'd suggest putting `fileGroup.ToString()` in the exception message so that you can tell what the unexpected file group was.\n"""
398,88394816,b'Is there a reason not to include an exception message for the `InvalidOperationException` here?\n'
398,88396358,b'This condition also needs to be updated to compare with `portable-net451+win81`\n'
418,89031621,"b'Oops, yes.'"
424,89957767,"b""@rainersigwald Thanks for clarifying, I've updated the PR accordingly."""
397,90160808,"b'This should be `$(Configuration.ToLowerInvariant())` instead of `$(Configuration).ToLowerInvariant()` (and likewise in the other locations).\r\n\r\nFYI, you should be able to just run `build` from a command prompt in the repo folder to build and run all the tests.'"
425,90396192,"b'I had to look it up, but it means the elements of the collection [can be in any order](https://github.com/dennisdoomen/FluentAssertions/blob/4f396c423b6084d2c9c01f09a11aed0b2f55309f/Src/Core/Collections/StringCollectionAssertions.cs#L35).'"
425,90398897,b'I filed https://github.com/NuGet/Home/issues/4046.'
425,90403012,"b'I double checked, and in the version of the CLI we\'re using (1.0.0-preview3-003961), Microsoft.Common.CurrentVersion.targets has `InitialTargets=""_CheckForInvalidConfigurationAndPlatform""`.'"
425,90406646,"b""I've added back the `ToolsVersion` attribute to the templates."""
444,90415025,"b'I think the Sdk name in the folder path should be lowercased (ie `microsoft.net.sdk`).  This is what NuGet does, and is how you can have case-insensitive package or Sdk names on a case sensitive filesystem.  See also Microsoft/MSBuild#1421'"
444,90415528,"b'We also need `buildCrossTargeting\\Microsoft.NET.Sdk.targets`.  The cross targeting `.props` file is no longer needed, but the cross targeting `.targets` file is [imported in Sdk.targets](https://github.com/dotnet/sdk/blob/88733a44ea2ea464c9f06462c80714c4cc3250a2/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.targets#L37-L38)'"
425,90489912,"b""> I'm also curious what this has to do with this change. Can you split it out?\r\n\r\nWhen the .NET SDK comes from a NuGet package, this targets file is not imported during the NuGet restore operation.  Switching to an SDK means the targets file is always included, which means if `_CheckForInvalidConfigurationAndPlatform` is an initial target, then `_CheckRuntimeIdentifier` can cause NuGet restore to fail.\r\n\r\nI can't update to the latest CLI due to dotnet/cli#4884.  @piotrpMSFT, what build number could I use to get a recent version of the .NET CLI from before dotnet/cli#4824 went in?"""
444,90513026,b'@srivatsn For RC2 at least we should leave the casing as you have it here then'
444,90555963,"b'I think we should try to get the casing right in any case.  For now that means Microsoft.NET.Sdk\\Sdk\\Sdk.props, I believe.'"
425,90591789,"b""I've filed https://github.com/dotnet/sdk/issues/448 and referenced it from the targets file"""
444,90686258,b'All the folders with Microsoft.Net.Sdk in them need to be changed to Microsoft.NET.Sdk'
460,91005191,"b""This is setting an MSBuild property named `Verbosity` instead of setting the parameter to each of the loggers.  I don't think setting a `Verbosity` property will have any effect.  I think you still need to pass in the verbosity separately to each logger."""
460,91190091,"b""There's already a `BuildWithoutTesting` target in this file, I would prefer to invoke that target instead of `Build` in the Build.ps1 script if RunTests is false.\r\n\r\nNote that for this to work you'll need to change the invocation from `dotnet build` to `dotnet msbuild` as the build command currently [always runs the `Build` target](dotnet/cli#4815)."""
450,91233461,"b'Yes.  When you do a greater/less than comparison with strings, MSBuild tries to parse them as Versions and compare them as such.'"
468,91330452,"b""I'm matching the Web Sdk here, which put it in the .props.  What's the reason for preferring the .targets?"""
468,91339392,"b""It didn't cause a test failure because I had copied and pasted the property name into the tests :-)"""
468,92716834,"b""I don't think there's a bug.  We're not sure if it's feasible or the right thing to make CPS understand this.  We would like to have a discussion about it, but not before January."""
468,92716922,"b'Oops.  Fixed, thanks.'"
489,92725477,"b""Shouldn't this have a reference to Microsoft.NETCore.App until #450 is merged?"""
489,92727299,"b'You were probably copying this from code that I wrote, but it might just be easier to invoke the build command with a `/p:DisableImplicitFrameworkReferences=true` parameter, rather than modifying the XML here.'"
489,92727403,b'Is there a specific reason we need to test that these projects build correctly when you do it twice in a row?'
489,92727824,"b'Can you update the comment to point to https://github.com/Microsoft/msbuild/issues/1345 (as #367 has been closed in favor of that).  Also, these workarounds should only be necessary when targeting .NET Framework, so it would be nice to condition them based on that.'"
489,92727978,b'I think it would be helpful to have a comment here explaining how the FrameworkAssembly reference is expressed in the lockfile.  From the code I gather that it has a path which instead of referring to a file in the package is just the name of the framework reference to add.'
489,92728861,"b'Thinking about this a bit more, I think that even if Microsoft/msbuild#1345 is fixed, that it could still be a problem if there is a reference to the same framework assembly coming both from a NuGet FrameworkReference and the implicit framework references from the SDK.\r\n\r\nSo can you either disable the implicit framework references if targeting .NET 4.5 or greater (which is the lowest thing supported by .NET Standard), or file a bug to follow up and investigate?'"
507,92731636,"b'Wouldn\'t something like the following make more sense?\r\n\r\n```xml\r\n<TargetFrameworks>netcoreapp1.0</TargetFrameworks>\r\n<TargetFrameworks Condition=""\'$(OS)\' == \'Windows_NT\'"">$(TargetFrameworks);net46</TargetFrameworks>\r\n<RuntimeIdentifier Condition=""\'$(TargetFramework)\' == \'net46\'"">win7-x86</RuntimeIdentifier>\r\n```\r\n\r\nThat way when you run the tests locally on Windows, you get coverage of both scenarios.'"
507,92731799,b'What are the changes to this file?  Are the just the result of regenerating the file with the tooling?'
507,92732285,"b'Should this target have `DependsOnTargets=""ResolveAssemblyReference""` since it uses the output of RAR now?  Also, do the ReferencePaths need to be specified as an input to the target?'"
478,92742725,"b""Is there any reason these projects need to have a version?  If not, let's remove them from the project file."""
478,92743148,b'Same as my [comment](https://github.com/dotnet/sdk/pull/489#discussion_r92727403) on #489: Is there a reason we need to test building twice for this scenario?'
478,92743339,"b""My feeling is that we don't need to be testing the assembly versions and attributes here.  Tests should generally be specific about what they are testing as opposed to testing a bunch of behaviors that don't seem to be related in a given scenario."""
478,92745086,"b'Could we add `IncludeTransitiveProjectReferences` to `ResolvePackageDependenciesForBuildDependsOn`, and then put `BeforeTargets=""AssignProjectConfiguration""` on the `ResolvePackageDependenciesForBuild` target?  It seems like that would prevent us from having to repeat the same condition twice.\r\n\r\nIn any case, I would like to see comments in the targets file itself explaining how the ordering works.  IIUC, the key is that the `AssignProjectConfiguration` is the entry point that reads `ProjectReference` items, so this target needs to run before that, but only if there is an assets file.\r\n\r\nSeparately, what is the difference between the `ResolvePackageDependenciesForBuild` and `EnableResolvePackageDependencies` properties?  They seem to only be used together.'"
478,92745195,"b'Is it possible for there to be a transitive reference from the assets file to a project that is also directly referenced?  It would be good to have a test case to cover this, where B references C, and A references both B and C. #Resolved'"
510,92745509,"b'The DisplayName and Description should probably be ""C# .NET Standard Templates"".'"
468,94074211,b'I want to get feedback from @mlorbetske and/or @vijayrkn before removing these.'
468,94077010,"b""I've now filed https://github.com/aspnet/websdk/issues/86 for this."""
561,94103872,"b'There\'s already a condition on the item group: `Condition="" \'$(DisableImplicitFrameworkReferences)\' != \'true\' and \'$(TargetFrameworkIdentifier)\' == \'.NETFramework\'""`\r\n\r\nSo splitting into separate item groups based on the target framework version would mean duplicating that condition and adding an additional clause for the version.  I don\'t think that would end up being clearer.'"
561,94105290,"b'OK, Done'"
450,94240054,"b""No.  I haven't yet written up the thinking behind this change, but basically since right now the Microsoft.NETCore.App version needs to match the TargetFrameworkVersion, the idea is to hide the package reference entirely.  The NETStandard.Library package supports lower versions of the target framework, so it's OK to surface updates to that package in the UI."""
450,94240127,"b""No (and that's called out in the comment), because this package reference should be hidden from the developer as much as possible."""
450,94240431,"b""There's a bit of explanation of this in the comments on the property as it's defined in the task.  This allows the version of the shared framework written to the runtimeconfig.json file to be configured independently of the package version.  Since we don't update the target framework version for patch versions of the shared framework, this is the way you would choose a patch version of the runtime.  It would also allow us to update the Microsoft.NETCore.App package so that the latest version supportss targeting all previous versions of .NET Core, by putting TargetFrameworkVersion-specific `.targets` files in the NuGet package that would set this property to the appropriate shared framework version for each supported TargetFrameworkVersion."""
450,94264484,"b'> standalone app with smallest possible footprint\r\n\r\nI\'m not sure if that\'s actually supported at all today.  If it is, then we should figure out how it fits into this, but you **can** always remove the package reference in your project:\r\n\r\n```xml\r\n<PackageReference Remove=""Microsoft.NETCore.App"" />\r\n```\r\n\r\n> Also, it\'s worrying that the only clean way to consume a patch release would be to acquire a new SDK.\r\n\r\nYou can set the `RuntimeFrameworkVersion` property to target a new patch without getting a new SDK.  See my comments: https://github.com/dotnet/sdk/pull/450#issuecomment-269834989'"
450,94264542,"b'> This is going to be a maintenance headache. Is the plan to add conditions here for every patch release?\r\n\r\nIf we want to automatically target the latest patch release available, I think we have to have the mapping from TFM to patch release somewhere.  Do you see a better way to do this?'"
450,94291387,"b""I tried this at your suggestion, and it turns out that referencing version 1.6.1 causes a bunch of extra files to be published.  I've filed #571 for this."""
450,94291563,"b""@dasMulli \r\n\r\n> Shouldn't this be 1.0.3 now to qualify for support?\r\n\r\nI've filed #572 for this."""
450,94504092,"b'@dasMulli I\'ve renamed these properties from ""Default"" to ""Implicit""'"
584,94711903,"b""What does this ID number that's changing refer to?  Presumably it's the string that shows up, but where's that defined?"""
591,94871628,b'Call the previous overload of this function here instead of duplicating the logic.'
591,94872049,"b'Why is this method taking a `string` and trying to convert to a `bool` instead of just taking a `bool` directly?  Also, the parameter should be named `preserveCacheLayout` or similar instead of `cond`.'"
591,94877322,b'Change this to be of type `bool` and MSBuild will handle the conversion.'
591,94880768,b'I think using a path inside the temp path for this risks build failures if two different builds on the same machine try to write to the same folder.'
591,94881004,b'Is there any reason not to use a folder under the intermediate output path for this?'
591,94881182,"b'It looks like there\'s an \'e\' missing in ""Cache"" for `_ComputeResolvedFilesToCachTypes`'"
591,94881621,"b'Strings like these are supposed to be added to Strings.resx and then generated during the build with the `NETSdkError` task, so they can be localized.'"
591,94881953,"b""It looks like you're trying to get the relative path `..\\..\\..\\tools` from where the CoreCLR was resolved.  I think you can probably do this much more cleanly with Path.GetFullPath() or a similar method."""
591,94882077,"b""It seems like this should be based on the current OS you're running on, rather than the target you're crossgen'ing for."""
591,94882393,"b""I don't think you need this any more as of #450"""
582,94893064,b'Filed #594'
582,94893193,"b""I've filed #595 for this"""
608,95253766,"b'That\'s not an additional TestAsset, it\'s the ""callingMethod"" parameter, which is used as the name of the folder where the test assets are copied to.  By default it uses the calling method name, but there is a test in another class with the same name, so this serves to disambiguate them and avoid failures if those tests happen to be run concurrently.'"
608,95264927,"b""> Is this needed for the compile section also?\r\n\r\nIn practice, it didn't seem to be needed.  @natidea, any insight?\r\n"""
616,95278895,"b'Is this subtracting `8800` from the build number, or am I misunderstanding?  What does the subtraction do?'"
616,95279500,"b""> Unfortunately for releases in 2017 we can't go any higher, so we will continue the month counting instead: the build after 61231 is 61301.\r\n\r\nIs this supposed to be handled by the logic here, or will MicroBuild pass us something like 20161301.1 as the BuildNumber?"""
608,95423070,b'Turns out that libraries of type `project` are already handled specially for compile items: https://github.com/dotnet/sdk/blob/7baf434d67f8bce169755c46fb3e6d474c5fd521/src/Tasks/Microsoft.NET.Build.Tasks/DependencyContextBuilder.cs#L378-L382'
608,95442632,b'I left the parameter name out so that it will still compile locally if you have the old version of the package in your packages folder.'
630,95829659,"b""Point taken, I'll back that part out and send it as a separate PR."""
633,96059424,"b""Thanks for the catch, I've fixed it."""
633,96065971,"b'@eerhardt Yes, `DisableImplicitFrameworkReferences` is what you would use'"
633,96066174,"b""Yes, I wasn't able to figure out a way to Remove only the item with specific metadata."""
633,96079388,"b'This is a generic task that is used to generate localized errors from the Sdk.  This is the first time we needed it to generate a warning instead of an error, so I added that capability.'"
645,96128286,"b""I meant to put this in the VB targets file instead of the C# props.  I've fixed it now."""
645,96261873,"b""@davkean We're only publishing `None` if it has appropriate `CopyToPublishDirectory` metadata, which is the same as `Content`.  But I don't think that's the issue, we could always remove it from `Content` and add it to `None`, but we need to know which file to do it to.\r\n\r\nThe Web SDK wants to publish all *.json files under the project folder, except the launchSettings.json file.  So we need some way of specifying the file that should be an exception.  The `AppDesignerFolder` property is one way to do that, and another way to do it would be to exclude all files named launchSettings.json.  That's all I can think of."""
687,96903347,"b""There shouldn't be any new or removed files as part of this change, just changes in which versions are used.  However, it would be good to have validation that we don't forget to update the .swr, so I've filed #689 for that."""
687,96903740,"b""I did a diff of the files that were previously included in the tools\\net46 directory, and what was in the net46 output of the tasks build.  These were the ones which were missing.\r\n\r\nI think that we probably don't need them, but at this point it seemed less risky to leave them in."""
731,98032532,"b""We're currently doing it like this to skip tests on non-Windows, and perhaps in other cases.  I've filed #736 for actually marking these as skipped."""
762,98743461,"b'In VS, the load of 6.0.4 will be redirected to 8, so 8 will get loaded, as well as possibly 9 depending on which of our tasks run in-proc in VS.  In my testing I only saw version 8 loaded in VS.\r\n\r\nIn MSBuild, 6.0.4 and 9 will be loaded side-by-side.  With this fix the deps file task will find version 9 with our task DLLs, and the NuGet DLLs will find version 6.0.4 that has already been explicitly loaded by us.'"
782,98989992,b'Do we have a bug filed to enable parallel builds once we can do so reliably?'
782,98990342,"b""What's the reason for adding Raw to the output directory here?"""
782,98991824,b'Does delay-signing these satellite assemblies have any impact on how they are loaded?  Or do they get fully signed later?'
809,99439349,"b""Good catch, thanks.  I've made the change you suggest."""
817,99494644,"b""I think we probably already have tests which would cover this.  If DebugSymbolsIntermediatePath were changed to FinalDocFile here, I think we would see some publish tests failing as there would be a new file in the publish output that the tests aren't expecting."""
820,99657393,"b'Yes, see https://github.com/dotnet/sdk/blob/b11de8deb43adec64e53fc441b73799b979a78f7/src/Tasks/Microsoft.NET.Build.Tasks/GenerateRuntimeConfigurationFiles.cs#L39-L43'"
817,99658757,"b'Instead of setting the `DocumentationFile` property based on the configuration, just set the `GenerateDocumentationFile` to true.'"
828,99757703,"b""You can pass in a value to `CopyTestAsset` which it will use for the folder path, so you can have a long and descriptive test method name, but the path on disk will still be short enough.  Here's an example: https://github.com/dotnet/sdk/blob/b11de8deb43adec64e53fc441b73799b979a78f7/test/Microsoft.NET.Build.Tests/GivenThereAreDefaultItems.cs#L526"""
820,99963750,"b""I thought it was worth leaving in the C# task to make it easier to override the version written to the runtimeconfig.json if you really have to.  I've renamed the property on the task to FrameworkVersion now to try to make it a bit less confusing."""
820,99964313,"b""I've removed the `NetCoreAppImplicitPackageVersion` property, as it is now redundant with `RuntimeFrameworkVersion`.  It is true that this isn't consistent with the property name for changing the version of the .NET Standard package to reference.  In my mind, this makes sense because `RuntimeFrameworkVersion` expresses the intent to target a particular version of the runtime without referring to how it is implemented with packages.  `NetStandardImplicitPackageVersion` on the other hand is an escape hatch for people who do need to know that the implementation is using a package reference and need to change the default behavior."""
847,100430975,"b""This seems like the test might eventually break if the Libuv and Kestrel packages get updated to support AnyCPU .NET Framework deployments by deploying both x86 and x64 versions of the native library and Kestrel dynamically chooses which one to load.\r\n\r\nI'm not suggesting you change this now, just pointing it out."""
847,100432774,b'Missing space: `thanwin7`'
847,100433144,b'Should we remove this resource (`RuntimeIdentifierMustBeSetForNETFramework`)?  Or is that even something we can do?'
847,100433636,"b""How likely is it that there could be something else that consumes the `PlatformTarget` property between when we set it to x86 or x64 based on the defaulted RuntimeIdentifier and when we set it back to AnyCPU because we didn't resolve any native assets?"""
847,100434367,"b""I'd suggest `typeof(Program).Assembly.Location`.  I don't know that it matters at all, but `Assembly.GetExecutingAssembly()` is one of the methods that we originally removed from .NET Core because it doesn't play well with optimizations we might want to do (inlining across assembly boundaries)."""
847,100435269,"b'Naming suggestion: The name `GetProcessorArchitecture` makes me think it will return the architecture of the physical CPU or the OS.  Something like `GetCurrentAssemblyProcessorArchitecture` would be clearer to me, if more verbose.'"
852,100575670,"b""Was this intentionall?  I don't think the test projects would need to change."""
847,101194284,"b'Should we be testing the case where `AppendRuntimeIdentifierToOutputPath` is not specified in the project, as that will be the common case?'"
847,101194548,"b""Can you explain this change?  I haven't entirely grokked the difference between DependsOnTargets and AfterTargets, but I think this means that this target could run before ResolvePackageDependenciesForBuild if something else depended on this target."""
847,101194825,"b""Could we check to see whether `RuntimeIdentifiers` contains a `net*` target framework?  Even just checking if the string contains `net` would allow us to avoid this in most cases where we don't need it."""
870,101399174,"b""> I think you'll get coverage from the full msbuild runs in Jenkins.\r\n\r\nYes, if this isn't failing in the full MSBuild Jenkins run, then I think it's not testing what we think it is (since the corresponding change to the NuGet targets isn't on the Jevkins machine).  I'd like us to understand why this is the case.\r\n\r\nYou can run tests against full MSBuild locally with `build -FullMSBuild`."""
847,101416518,"b""This condition doesn't seem to be strictly necessary, as this file should only be imported when `TargetFrameworks` is defined, right?"""
847,101417078,"b'Should this be checking that the output is built using the correct RID, as is the case with It_handles_native_depdencies_and_platform_target?'"
893,102348014,"b""No, it's not really good- one of the motivations for targeting .NET Core 1.1 by default is that things like this happen when targeting 1.0.\r\n\r\nIn this case, those files are getting published because the app is referencing a library, and the library is using version 1.6.1 of the NETStandard.Library package.  We originally tried to fix this by using version 1.6.0 of NETStandard.Library instead (#793), but that leads to downgrade issues and still doesn't fix the problem if the app ends up transitively depending on System.ValueTuple, the latest version of immutable collections, or an ever-growing number of other packages.\r\n\r\nIf you are targeting .NET Core 1.0 and aren't referencing any NuGet packages that would bring in assemblies from the 1.1 band, then you can avoid getting local copies of these assemblies by setting `NetStandardImplicitPackageVersion` to `1.6.0` in all of your library projects.\r\n\r\nBut really, I'd recommend you just target .NET Core 1.1 instead."""
923,103578145,"b'I think you should probably change `@(NuSpec->\'%(LayoutTargetName)\')` to `LayoutSdkPackage`, since you\'ve gotten rid of the `LayoutTargetName` metadata on the `NuSpec` item.\r\n\r\nEDIT: I see, you\'re specifying `BeforeTargets=""Build""` on the `LayoutSdkPackage` target.  So if you want to leave it like that, you can remove this line.'"
923,103578894,"b'Does the `dotnet pack` command not have a way to specify the version to use when packing a .nuspec?  If not, can we file a bug to get that added (nuget.exe supports this).'"
923,103579939,"b'Looking at the docs, it looks like you could pass `/p:NuspecProperties=\\""Version=$(Version)\\""` or something similar to set the version without having to modify the file.\r\n\r\nIt looks like you\'re updating the .nuspec file in-place, which means once you\'ve run a build, the version number will be stamped in and won\'t get replaced by subsequent builds.  So I think that needs to be fixed one way or the other.'"
923,103579977,b'> Maybe you can add a comment here pointing at `https://github.com/NuGet/Home/wiki/Adding-nuget-pack-as-a-msbuild-target#packing-using-a-nuspec` to explain why we have this project?\r\n\r\n\xf0\x9f\x91\x8d '
935,104528341,"b'Done, thanks'"
935,104534489,b'[Done](#946)'
889,105464452,"b'Why not put the definitions of the `_SdkLanguageName` and `_SdkLangExtention` inside the corresponding .props files (eg Microsoft.NET.Sdk.CSharp.props).\r\n\r\nAlso, `_SdkLangExtention` is misspelled.'"
889,105464705,"b'Is the intent to ensure that the Visual Studio version is set to at least 15.0?  If so, then it looks like the comparison is wrong.'"
889,105464933,"b""I'd suggest using `StartsWith` instead of `Contains`"""
889,105517909,b'Would we be able to change this later?  Or would it be a breaking change to change the default?'
889,105518131,"b""Is this a TODO?  I would suggest the behavior here be to silently skip a test where targets don't exist, unless an option (e.g. an environment variable) was set to force all tests to be run, in which case the test would fail."""
889,105518325,"b'How were all these conditions generated?  Did you construct them manually or write a generator for them based that uses the PCL reference assemblies as input?\r\n\r\nAlso, what happens if someone specifies a Xamarin target framework or an invalid one in the list?'"
981,106002026,"b""`Optimize` and `DebugSymbols` are defaulted based on whether the configuration is Debug or Release.  The original issue leading to this change was that they wouldn't be set correctly if you set the Configuration in Directory.Build.props, so that's what I'm testing here."""
981,106002488,"b""I'm removing this check so that you can do a normal build (which will put other files in the output folder) and then get the values for specific items or properties.  I think I originally put this check in to make sure that the GetValuesCommand wasn't unintentionally building the project, but I don't think there's much value in doing so."""
981,106002842,"b""Yeah, I was just copying conditions into all the properties, then I thought about it and realized that we don't need to allow changing the NuGet-related properties."""
1012,107033420,"b'I\'m not sure about the term ""ReleaseVersion"" in `NETStandardBundledReleaseVersion`.  Should we call this `NETStandardBundledTargetFrameworkVersion` (and similar for the the .NET Core implicit reference)?'"
1013,107249508,"b'Something like this is specific to the Web SDK and should go there, not in the generic .NET SDK.'"
1013,107249814,"b'It looks like `ContentWithTargetPath` is used to resolve items that should be published from referenced projects, and hence this change is breaking that and some tests that cover this are failing.'"
1050,108798384,"b'I would suggest naming this class something more descriptive of what it does, like `DeleteNuGetArtifactsFixture`.'"
1050,108800854,"b""Since there's only one class that the fixture applies to, you can use a class fixture instead of a collection fixture, and it will be simpler."""
1050,108801450,"b""I think that since the tests don't use the fixture directly (it's just used for the logic in its constructor and Dispose method), that you don't need to define the constructor or create a field to store the reference to the fixture."""
1050,108802504,b'You can check the `UsingFullFrameworkMSBuild` property of the base `SdkTest` to only disable these scenarios when running using the full .NET Framework of MSBuild.'
1050,108807349,b'These should start passing once #1025 is fixed.'
1050,108809517,"b""I'd suggest factoring this path into a static property that can be used both here and in the `ConstructNuGetPackageReferencePath` method."""
1050,108811968,b'Consider putting this in the `TestProject.Create` method instead.'
1050,108816134,b'You should be able to just do an equality check here instead of `Contains`.'
1050,108817005,"b""Packing a project will automatically build it so I think you don't need the separate `BuildCommand` here."""
1050,108820391,"b""This is the path to the folder which contains the .nupkg, but the name doesn't make it clear that the value doesn't include the .nupkg filename.  One way to make it clearer would be to make the value be the full path to the .nupkg, and to rename the property to `NupkgPath`.  Then use `Path.GetDirectoryName` when you need to get the folder to use for the feed to add."""
1050,108820439,"b""I'd suggest renaming this to `TestPackageReference`, to go along with `TestProject`."""
1050,108823030,"b'I think we should represent the package references differently.  Instead of putting the referenced packages in the `ReferencedProjects` list, create a new `PackageReferences` property on `TestProject`.  Then you can remove the `PublishedNuGetPackageLibrary` property here and simply iterate over each list separately when processing the references.\r\n\r\n'"
1050,108823116,"b""There's probably no need for the call to `Any()` if you're just going to loop through the list.  It's OK and simpler to just let it loop through a list with no elements."""
1052,109729458,"b'I\'ve tried adding a test for this, and it\'s getting a bunch of DLLs in the output that shouldn\'t be copied there.  I think it\'s because the version of the Microsoft.NETCore.App package that we\'re using (2.0.0-beta-001834-00) has this logic in it:\r\n\r\n```xml\r\n  <ItemGroup Condition=""\'$(RuntimeIdentifier)\' == \'\'"">\r\n    <PackageConflictPlatformManifests Include=""$(MSBuildThisFileDirectory)Microsoft.NETCore.App.PlatformManifest.txt"" />\r\n  </ItemGroup>\r\n```\r\n\r\nSo the platform manifest isn\'t getting picked up for rid-specific shared framework apps.  Has this been updated in newer versions of the package?  What version would have a fix?\r\n\r\n@eerhardt @ericstj @weshaggard'"
1052,110273859,b'Filed #1091'
1052,110274365,b'These comments were from a list of scenarios to cover I wrote before writing the tests.  I think the test names are descriptive enough so I can just delete the comments.'
1052,110278326,b'Filed #1093'
1052,110278890,"b""We don't have one that's easily mockable for unit testing, so I left it as was."""
1052,110279723,"b'See the comment beforehand: Note that the RuntimeIdentifier is not passed to this task, as we want to process the rid-less assets which will be passed to the compiler.'"
1052,110280037,"b""It's a copy/paste from the .nuspec.  It seems less error prone (and easier) to just leave it in that form."""
1052,110293719,"b""Sure, it would be possible.  I think it's probably not worth it as there's risk of changing the behavior while refactoring the code, plus the naming is potentially confusing (should it be `WithFilesToSkip` or `WithoutFilesToSkip`?)."""
1052,110294332,b'Probably not currently but I imagine we will eventually.'
1052,110294527,"b""No, not really.  They're scattered throughout different targets files."""
1052,110294667,"b""Maybe, but it's not urgent and doesn't need to be part of this change."""
1052,110295162,"b""Previously our .NET Core 2 tests were specifying a RuntimeFrameworkVersion.  I didn't want to do that for the tests I added, so I updated to a new version of the CLI where you get the bundled version of .NET Core automatically.  However, the version of full Framework MSBuild on the CLI doesn't have the props file to set the bundled framework version yet, so I had to disable some tests from running on full framework."""
1052,110315074,"b'To me it seems to be on the same level as other targets (eg for generating the deps files) that we define.\r\n\r\n""Public API"" or not I think it\'s OK to change these if we need to- ie I don\'t think we need to guarantee compatibility across versions of the SDK for targets that plug into our SDK.'"
1090,110438179,b'Should this be run after something like `CollectPackageReferences` so that targets can add or remove package references before they are processed here?'
1052,110489648,"b""> So then why not just leave these tests alone? Again, changing these tests seems irrelevant to your current work.\r\n\r\nOther changes that I made (using the bundled version of .NET Core instead of explicitly setting RuntimeFrameworkVersion) broke these tests on full Framework.  I couldn't just leave them alone because these tests were loading the version of the RuntimeFrameworkVersion to use from DependencyVersions.props, which was the incorrect version after I updated to a new .NET CLI.  I could have updated the version in DependencyVersions.props to match the bundled RuntimeFrameworkVersion, but I don't think that's cleaner than just skipping the tests here."""
1052,110823697,"b""I've filed https://github.com/dotnet/standard/issues/298"""
1052,110824241,b'Filed #1109'
1121,111416307,"b'Scrub within the context of the SDK or are you saying I should look elsewhere too?  If so, where?'"
1121,111420448,"b'It looks like it is.  NuGet.ProjectModel is returning ""assembly"" for the Type property for this entry in the assets file:\r\n\r\n```json\r\n      ""runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl/4.3.0"": {\r\n        ""type"": ""package"",\r\n        ""runtimeTargets"": {\r\n          ""runtimes/debian.8-x64/native/System.Security.Cryptography.Native.OpenSsl.so"": {\r\n            ""assetType"": ""native"",\r\n            ""rid"": ""debian.8-x64""\r\n          }\r\n        }\r\n      },\r\n```\r\n\r\nSo when we get to this line, it is included in what we pass to the conflict resolution.'"
1133,112592146,"b""I wouldn't include the values of the theory parameters in the name of the test.  I'd call it something like `Net461_is_implicit_package_target_fallback`."""
1133,112592748,"b""It feels messy to use a field of the class to pass this object around.  I think I'm used to tests not storing any instance state."""
1133,112592852,b'Nit: no need for `$` in front of string here.'
1133,112593618,b'Nit: change `disabled` to `disable` in the method name.'
1128,113325383,"b'This gets [passed in now](https://github.com/dsplaisted/cli/blob/6139036bd4eef8d33ba55d23d226e38d3ed7b62d/src/Microsoft.DotNet.Cli.Utils/CommandResolution/ProjectToolsCommandResolver.cs#L342), based on the target framework from the assets file.'"
1128,113714763,"b""Yeah, that wouldn't hurt.  This code was written before that variable existed, and I'm moving it to a different location here."""
1128,113719377,"b""Since the point is to test conflict resolution, I think we want a fixed version so that we don't roll forward to a version of the library that doesn't need it (because it targets .NET Core / .NET Standard 2.0)."""
1171,114665248,"b'The other option would be to put it in an `ItemGroup` in the .targets file but outside of any Target.  I thought that in this target was the right place for it to go, since this is the only place that metadata is consumed, and this keeps the behavior consistent if someone adds `PackageReference` items in a target, or after the import of the default .targets files.'"
1171,114678019,b'@rainersigwald It looks like Microsoft/msbuild#1620 was never merged.  Did we ever end up making this an error?'
1171,114686220,"b""I think that's actually needed because the value you're comparing to is `Nullable<bool>`"""
1186,115110281,"b""Yeah, I called that out.  It's needed for the test coverage, so we could split it out if needed."""
1188,116322065,"b""This line (setting `DisableImplicitNamespaceImports`) should probably go in the .targets instead of the .props.  People will set `DisableImplicitFrameworkReferences` in the body of their project, but if this line is here then that won't affect the default value of `DisableImplicitNamespaceImports`."""
1208,116546341,"b""Any idea why the behavior changed with this PR?  The test app is running on 1.x, but my PR doesn't change that."""
1208,116550838,b'Makes sense.  Any thoughts on whether we should register the code pages provider in the test app or just retarget it to .NET Core 2.0?'
1218,116873561,b'Should this depend on `CopyAdditionalFilesToLayout`?'
1218,116887961,b'Extra whitespace'
1218,116887971,b'This looks like dead code.'
1245,118151685,b'Is the runtime store feature even supposed to be enabled for .NET Core 1.x?'
1253,118406954,"b""Hardcoding these versions to 2.1 in this test means we'll have to update the test data each time we start supporting a new framework.  Alternatively, we could target e.g. `netcoreapp100.0` in these tests, but then the test is not as close to the real scenario."""
1253,118407224,"b'Running before `Restore` applies to restoring the project from the command line, while running before `CollectPackageReferences` applies to the restore in Visual Studio.  See https://github.com/NuGet/Home/issues/4781.'"
1262,119176755,"b""Originally I was passing the `RuntimeIdentifier` parameter here.  However, that caused the `It_passes_ridless_target_to_compiler` test to fail.  I didn't see an obvious way to keep the test coverage except to not check the RID before the compiler is called.\r\n\r\nThe `GenerateBuildRuntimeConfigurationFiles` will check that the right RID has been restored.\r\n\r\nI'm not entirely sure whether we should just check everything up-front and remove the `It_passes_ridless_target_to_compiler` test, or whether there's a better way to get the same coverage."""
1262,119176904,b'It will happen the first time a task tries to load the targets file (which will be this task).'
1262,119178988,"b""I've switched to duplication over concatanation."""
1272,119206191,"b'Should this target have inputs and outputs so that the task gets skipped on incremental builds?  If so, then the FileWrites would also need to be set in an ItemGroup instead of an output, as the GenerateBuildDependencyFile task does, for example.'"
1272,119206712,b'Should this have a dependency to ensure that it runs after ResolveAssemblyReferences and anything else it depends on for input?'
1272,119220350,"b'Is there a reason to have two separate intermediate items here?  Could you just do something like this?\r\n\r\n```xml\r\n<_ReferenceAssemblies Include=""@(ReferencePath)""\r\n                                      Condition=""%(ReferencePath.FrameworkFile) == \'true\' or\r\n                                                 %(ReferencePath.ResolvedFrom) == \'ImplicitlyExpandDesignTimeFacades\'"" />\r\n<_ReferenceAssemblies Include=""@(ReferencePath)""\r\n                                Exclude=""@(_ReferenceAssemblies)""\r\n                                Condition=""%(ReferencePath.CopyLocal) != \'true\' and \r\n                                           %(ReferencePath.NuGetSourceType) == \'\'"" />\r\n```\r\n\r\nOr even just have one `Include` with the two conditions joined by an `Or`?'"
1272,119221032,"b""The functionality from the `NETStandard.Library.NETFramework` package is going to be merged into the SDK (see #1267).  Once it does I don't know what will happen with this test that depends on the package that's no longer used.  It might fail, or it might silently stop giving you the test coverage you want.\r\n\r\nIs there another way to test this without depending on this package?  Could you just build a project and then reference it's output DLL directly?"""
1272,119221864,b'>     NuGetPackageId=System.Xml.XPath.XDocument\r\n>     NuGetPackageVersion=4.3.0\r\n>     NuGetSourceType=Package\r\n\r\nIt worries me that mscorlib is getting metadata indicating it came from the XDocument package.'
1273,119258596,b'Is there going to be any way for us to test this Mono logic?'
1273,119258874,b'We have a lot of our full framework coverage disabled due to #1041 (Jenkins needs to be updated).  We should either fix that in order to get decent coverage of this or at least make sure the tests pass locally.'
1273,119259017,"b""This Description isn't accurate.  A lot of the metadata can probably be deleted, and I don't think we need to multi-target this project."""
1273,119259756,"b'Setting the `Link` metadata explicitly isn\'t required as of #1246.  And for the ConflictResolution files, you can just set `LinkBase=""ConflictResolution""`.  I\'m not sure whether that change has been integrated into the version of the CLI that the SDK repo uses to build, though.'"
1273,119259799,"b""Typo: `Exetnsion` (but as mentioned previously, this shouldn't be needed at all, at least once the update flows to the right place)"""
1273,119259862,"b'Instead of having any of the package layout stuff in this project, we probably want building the other project to include the layout from this one.'"
1274,119443300,"b'The message from restore is:\r\n\r\n> error : Invalid restore input. Invalid target framework \'unsupported\'. Input files: C:\\git\\dotnet-sdk\\bin\\repro\\WrongFramework\\WrongFramework.csproj.\r\n\r\nNote that it says that the target framework is ""unsupported"" for any invalid value of `TargetFramework`.\r\n\r\nAlso, in the case that you have multiple valid target frameworks separated by semicolons in the `TargetFramework` property, the restore operation appears to just work, restoring for both.'"
1273,119443690,b'I think it can all go into the same package.'
1274,119501137,"b""I've added both tests"""
1279,119953783,"b'Microsoft.Common.CurrentVersion.targets [uses the following condition](https://github.com/Microsoft/msbuild/blob/5fcb6c489a2039a008d7820139db1dff33bb7a03/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5780) to import Microsoft.NETFramework.targets:\r\n\r\n```\r\nCondition=""(\'$(TargetFrameworkIdentifier)\' == \'\'  or \'$(TargetFrameworkIdentifier)\' == \'.NETFramework\') and (\'$(TargetRuntime)\' == \'Managed\')""\r\n```\r\n\r\nShould we use the same condition here in order to work with projects that don\'t explicitly set the TargetFrameworkIdentifier (which I think may be most projects)?'"
1279,119955708,"b""VS 15.3 won't necessarily ship with the .NET Core SDK in-box, it may only ship with a 1.1 version of the SDK.  So if you haven't installed the 2.0 SDK, I think as is you'll always get this error message when you try to build an sdk-style project using full MSBuild.\r\n\r\nOn the other hand, if you haven't installed the 2.0 SDK but are targeting .NET 4.6.1, we should either make it work, or provide a good error.  We need to figure out when & how to raise the error, and the error text needs to be changed (since the 2.0 SDK won't necessarily be in VS 15.3) and put into a .resx for localization (which we do with the NETSdkError task)."""
1279,119975633,"b""I'd like to see an explanation of how this DLL selection works.  It looks like it doesn't have a way for a higher framework to remove a DLL, which we would have needed if we shipped something like System.ValueTuple in 4.7."""
1279,119975698,"b""Do the `PlatformManifests` and `PreferredPackages` parameters apply here?  Don't those only apply when targeting .NET Core or .NET Standard, in which the SDK target would be used instead?"""
1279,119975764,"b'Is there a reason this class needs a different name for each assembly?  If so, it would be nice to have a comment explaining why this is.'"
1279,120000180,"b""We have #1287 with on overview of the test scenarios we want.  I'd like to merge these changes as soon as they're ready so that we can work on the insertion into the CLI and VS in parallel while Eric works on those tests."""
1279,120000196,"b""I've been thinking it should be all in one package so there's a single insertion from the SDK to the CLI and we don't have to change how  that process works.  I'm coming around to thinking it would be better to have two separate packages though, as I look at how the layout would need to be filtered by the CLI."""
1322,121206931,b'I think the identifier should include bot the value of `isSdk` as well as the `scenario` in order to use a unique path for each case of the theory.'
1322,121208365,"b""I don't think we'll get any automated coverage of this.  Are the .NET 4.7 reference assemblies part of the VS install?  They aren't on my machine."""
1407,127296599,"b'There is a `TargetPlatformVersion` and unlike `TargetFrameworkVersion`, it [does not start with a ""v""](https://github.com/Microsoft/msbuild/blob/68bf979f5ea8f842d26d9ce48580383edfa3e944/src/Tasks/Microsoft.Common.CurrentVersion.targets#L87).'"
1407,127560322,"b'I usually call ToList at the end of a chain of LINQ calls to avoid accidentally having it evaluate everything lazily multiple times, and because it makes debugging slightly easier.'"
1440,128854287,"b""Saying they must match could be understood as meaning that the values need to be the same, which isn't the case.  Can we think of a better wording?"""
1440,128858800,"b'You can also pass a ""methodName"" parameter to the `CopyTestAsset` method if you want a descriptive method name but a shorter folder name.'"
1440,128858933,"b""When targeting .NET Framework, we default to the current architecture if it's not set, but then later back out that change.  Can you see how that interacts with this check, and add a test that covers it?"""
1440,128863426,"b""It matters, but I've looked at it more and convinced myself that extra tests for this aren't needed."""
1454,131237474,"b'@rainersigwald I don\'t understand how that batching is working.  The condition seems like it would do the opposite of a join (ie return all pairs where the identities didn\'t match): `Condition=""\'%(Identity)\' != \'@(R) \'""`.'"
1511,133870280,b'Issue filed: #1512'
1565,137641964,"b'This just tries to match the path that will come out of PublishAssembliesResolver here when doing conflict resolution.  If you have a package that assumes that native assets under `runtimes/` will be loaded when used in an AnyCPU .NET Framework app, then those assets will be placed in the `runtimes/` subfolders when the app is published and will fail to load at runtime.  This doesn\'t change that.\r\n\r\nIf you publish for a specific RID, then the items will be `runtime` items instead of `runtimeTargets` items and will get copied directly to your output folder, and conflict resolution will use the right path.  For example, under the `.NETCoreApp,Version=v2.0` target in an assets file:\r\n\r\n```json\r\n""System.Diagnostics.TraceSource/4.0.0"": {\r\n  ""type"": ""package"",\r\n  ""dependencies"": {\r\n    ""Microsoft.NETCore.Platforms"": ""1.0.1"",\r\n    ""System.Collections"": ""4.0.11"",\r\n    ""System.Diagnostics.Debug"": ""4.0.11"",\r\n    ""System.Globalization"": ""4.0.11"",\r\n    ""System.Resources.ResourceManager"": ""4.0.1"",\r\n    ""System.Runtime"": ""4.1.0"",\r\n    ""System.Runtime.Extensions"": ""4.1.0"",\r\n    ""System.Threading"": ""4.0.11"",\r\n    ""runtime.native.System"": ""4.0.0""\r\n  },\r\n  ""compile"": {\r\n    ""ref/netstandard1.3/System.Diagnostics.TraceSource.dll"": {}\r\n  },\r\n  ""runtimeTargets"": {\r\n    ""runtimes/unix/lib/netstandard1.3/System.Diagnostics.TraceSource.dll"": {\r\n      ""assetType"": ""runtime"",\r\n      ""rid"": ""unix""\r\n    },\r\n    ""runtimes/win/lib/netstandard1.3/System.Diagnostics.TraceSource.dll"": {\r\n      ""assetType"": ""runtime"",\r\n      ""rid"": ""win""\r\n    }\r\n  }\r\n},\r\n```\r\n\r\nWhile for the `.NETCoreApp,Version=v2.0/win10-x64` target, it looks like this:\r\n\r\n```json\r\n""System.Diagnostics.TraceSource/4.0.0"": {\r\n  ""type"": ""package"",\r\n  ""dependencies"": {\r\n    ""Microsoft.NETCore.Platforms"": ""1.0.1"",\r\n    ""System.Collections"": ""4.0.11"",\r\n    ""System.Diagnostics.Debug"": ""4.0.11"",\r\n    ""System.Globalization"": ""4.0.11"",\r\n    ""System.Resources.ResourceManager"": ""4.0.1"",\r\n    ""System.Runtime"": ""4.1.0"",\r\n    ""System.Runtime.Extensions"": ""4.1.0"",\r\n    ""System.Threading"": ""4.0.11"",\r\n    ""runtime.native.System"": ""4.0.0""\r\n  },\r\n  ""compile"": {\r\n    ""ref/netstandard1.3/System.Diagnostics.TraceSource.dll"": {}\r\n  },\r\n  ""runtime"": {\r\n    ""runtimes/win/lib/netstandard1.3/System.Diagnostics.TraceSource.dll"": {}\r\n  }\r\n},\r\n```'"
1591,139505592,b'This should also handle VB correctly.'
1602,140880673,"b""This means we're no longer using a master version of the SDK with the master version of the CLI?  Shouldn't we merge release/2.0-vs and release/2.0.0 into master in the SDK, then use that version of the SDK here?  Or can we not do that right now because signing is down?"""
1603,140908127,"b""Yes, I think @nguerrera is right, and the logic we want is:\r\n\r\n- If targeting bundled target framework version of .NET Standard, then use the bundled version of the package\r\n- If targeting a version of .NET Standard less than 2.0, then use version 1.6.1 of the package.\r\n- Otherwise, use the latest stable version of the package (currently 2.0.0)\r\n\r\nThis means that when there's eventually a .NET Standard 2.1 and a corresponding stable package, we would reference package version 2.1.0 even when targeting .NET Standard 2.0.  The reason we don't do that for 1.x is because the reference ends up getting exposed as a NuGet dependency when you pack the project, but we stopped doing that for 2.0.\r\n\r\n@ericstj @weshaggard does the logic I've outlined sound right?"""
1603,141139856,"b'@dasMulli Good point, it should probably be 2.0.1 for now, and updated again once there is a package with https://github.com/dotnet/standard/pull/510'"
1612,141370026,"b'> This also uses the simple name as the identity for the `Reference` items, and uses the `HintPath` metadata for the full path.  This should resolve at least some cases of #1499.'"
1618,142231930,"b""I took a look at this and it turns out that the `GetReferenceAssemblyPaths` target takes care of this.  If there are chained framework lists, it will set `TargetFrameworkDirectory` to a semicolon-separated list of the chained folders.  For example:\r\n\r\n> C:\\Program Files %28x86%29\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v6.0\\;C:\\Program Files %28x86%29\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v5.1\\;C:\\Program Files %28x86%29\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v5.0\\;C:\\Program Files %28x86%29\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v4.4.87\\;C:\\Program Files %28x86%29\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v4.4\\;C:\\Program Files %28x86%29\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v4.3\\;C:\\Program Files %28x86%29\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v4.2\\;C:\\Program Files %28x86%29\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v4.1\\;C:\\Program Files %28x86%29\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v4.0.3\\;C:\\Program Files %28x86%29\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v2.3\\;C:\\Program Files %28x86%29\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\;;;C:\\Program Files %28x86%29\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\Facades\\\r\n\r\nHowever, the `FrameworkList.xml` files for Mono don't list any `File` entries.  So I think we will need to scan the directory for assemblies to treat as platform assemblies if we don't find any `File` items listed in the `FrameworkList.xml`."""
1618,142244521,"b""@ericstj Yes, that's the way I would do it.  I'm not sure at this point whether we need this to apply to Xamarin/Mono.\r\n\r\nThe MSBuild API (the `RedistList` class) isn't public and doesn't have any way to get a list of the framework assemblies, only to check if a given assembly name is part of the framework.  We could make an API for this public if we have to, but so far it doesn't look like we do."""
1652,144631252,b'This seems backwards.  @weshaggard or @ericstj may be able to confirm which version we should be using.'
1667,146069600,"b""@weshaggard @nguerrera \r\n\r\n> Is it worth the extra complexity to try and detect references to these? Why not just always include them in 4.7.1 like we do for the earlier versions?\r\n\r\nShould we include these libraries in .NET 4.7.1 apps that don't reference .NET Standard assemblies at all?  That's what this prevents.  We can't just use the existing logic to detect usage of .NET Standard >= 1.5, because we need the updated libraries if they are used by a .NET Standard 1.4 or lower library too."""
1712,149791984,b'Do all of them contain implementation?  Are the version numbers for all of them 4.2.0.0?'
1712,149792629,"b'I\'d suggest updating this to say: ""do not yet match the ones shipped in the support package for .NET Standard 2.0 on .NET 4.7 and below.  This means that .NET 4.7 or lower libraries might have references to higher versions of these assemblies than are available in-box in .NET 4.7, leading to assembly loading errors.""'"
1712,149793390,b'Is the additional check that the target framework version is less than 4.7.1 necessary?  `NETStandardInbox == false` should imply that the target framework version is less than 4.7.1.\r\n\r\nOr is this there in case people explicitly set `NETStandardInbox` to false in their 4.7.1 projects as a workaround for this issue?'
1712,149793680,"b""Did you run all these tests locally (with the reference assemblies installed)?  We won't get any coverage for these tests on the CI machines."""
1712,149795870,"b""I'd suggest adding a comment explaining why these two libraries are included.  My understanding is that these were the only contracts from .NET Standard 1.x that have a higher version than what shipped in .NET 4.7.1."""
1712,149796779,"b""I'd use the same comment here as in the previous test: `//  This is an implementation dependency of the System.Net.Http package, which won't get conflict resolved out`\r\n\r\nI'm also pretty sure we don't want to include this inbox.  It's an implementation dependency of the OOB version of System.Net.Http.  Conflict resolution will pick the support package of the Http library, but it doesn't know that this dependency is no longer needed.\r\n\r\nIf you want to consider making it so that this library isn't copied, please file a bug for that in the sdk repo."""
1712,149797112,"b""I'd suggest also referencing a .NET 4.6.1 library in this test (either in addition to the 4.7.1 library, or making the test a `Theory` and running it for different referenced framework versions."""
1712,149797486,"b""I'd suggest adding a comment explaining this, ie: The version of the MSBuild libraries we are referencing doesn't have an enum value for .NET 4.7.1.  So we use the MSBuild API to find the path to the 4.6.1 reference assemblies, and locate the 4.7.1 reference assemblies relative to that."""
1712,149802496,"b'Add this at the end: So if there is a dependency on netstandard.dll, we include DLLs for .NET 4.7.1 from the support package to avoid these errors.'"
1702,150061776,"b'Yes, please keep the` sdk-build-env` and `sdk-test-env` scripts.'"
1796,157582063,"b""We want the perf tests to run with a single iteration during normal tests.  That will ensure that they don't get functionally broken.  When running in the perf lab, they should run with more iterations, but this will only happen automatically after a PR is merged (though it will be possible to request a perf run for an unmerged PR)."""
1796,157582436,b'Please file a bug for this in https://github.com/microsoft/xunit-performance/issues and link to that issue in this comment.'
1796,159554774,"b'File a bug in https://github.com/Microsoft/xunit-performance for this, and link to it from this comment.'"
1796,159556604,"b""This looks like it's just a formatting change (probably by Visual Studio).  Revert this."""
1796,159754746,b'The `stopwatch` and `executionTimes` variables are left over from previous versions of the code and should now be deleted.'
1843,160794715,"b""Why is this set here?  I see it's consumed in `Microsoft.NET.PackTool.targets`, but our repo's Directory.Build.props won't apply to developers using the SDK."""
1843,160798662,"b'My inclination would be to not use a serializer here, but just use LINQ over the XDocument to validate that it is correct.  Is there a reason you preferred to use the serializer?'"
1843,160807330,"b""Assuming we're going to put the tools setting file under the tfm/rid path, then the `_ToolsSettingsFilePath` should probably be just `IntermediateOutputPath`"""
1843,160807700,"b'I think this should be added in the target that generates the file instead of statically.  Also, to support multi-targeting and putting this file in tfm/rid, I think you want to use `TfmSpecificPackageFile` instead of `Content`.'"
1843,160808472,b'Does this cover all the files that are published?  Are the two properties you are including not included in `ResolvedFileToPublish`?  Are there other files that need to be included?'
1843,160809102,b'Remove `GetRandomFileName` per the TODO'
1843,160809994,"b""Put this in the CLI's `bundledversions.props`.\r\n\r\nIf it's not defined, default it here to the right version at this point in time (2.0.1)."""
1843,160811260,b'Probably the way to fix this is to move this logic from the constructor to a helper method that uses `[CallerMemberNameAttribute]` to create a separate folder for each test'
1843,160811854,b'Use `TestAssetManager.GetTestDestinationDirectoryPath` to get a working folder for the tests instead of using something in the temp path (this applies elsewhere in this PR too).'
1843,160812024,"b""I'd suggest using XDocument APIs to validate the structure of the XML rather than a simple string contains test."""
1843,160814388,b'Nit: I think we generally indent the subsequent lines of a chained multi-line statement like this.'
1843,160815719,"b'Additional test scenarios I recommend covering:\r\n\r\n- Multi-targeted projects (ie `<TargetFrameworks>netcoreapp2.1;netcoreapp2.0</TargetFrameworks>`)\r\n- Tools which depend on a graph of NuGet packages (IE tool depends on package A which depends on package B and C, and verify that A.dll, B.dll, and C.dll are all packaged with the tool)\r\n- Tools which depend on NuGet packages that have assets (ie native assets) that get deployed to a subfolder.  A sample package to use for this could be `Microsoft.DiaSymReader.Native`'"
1857,163337491,"b""Is this filter correct?  Can't there be NuGet content items where the build action is None which are copied to the output directory, or which are EmbeddedResources and so shouldn't be preprocessed?  If this filter is correct, then the check inside the setup delegate is redundant."""
1857,163338087,"b'This seems wrong.  Did you mean to set the metadata to the `locale` variable instead of the string literal `""locale""`?  Is this consumed anywhere, and if not so should it even be added?'"
1857,163338562,"b'Just to confirm, is `asset.Path` relative to the right directory here?\r\n\r\nIE, it probably shouldn\'t start with ""runtimes"".'"
1857,163343227,b'I would really like a definitive reference for the assets file format.  It would make writing and understanding code like this a lot easier...'
1857,163345657,b'A comment about why we need to look for whitespace would be helpful here (ie the dependency value is of the format `Microsoft.Build >= 15.1.0-dev`).'
1857,163347339,"b""Add comments explaining how this method works and linking to the bug you filed for NuGet to include better analyzer information in the assets file.\r\n\r\nEDIT: OK, I see you have links to the bug in the helper methods.  A comment explaining what's going on could still be helpful."""
1857,163367681,b'This assertion seems wrong.'
1857,163368473,"b""Should we add a check whether the directory separator character is already `'/'` and if so just return the path without modifying it?"""
1857,163413916,"b'This comment is now out of date, the ""ResolvedCompileFileDefinitions below"" it refers to has been removed.'"
1857,163418986,"b'This looks like an incomplete comment.  ""Not in the"" ...what?'"
1857,163419516,"b""I know you discussed this logic with me, but it's probably a good idea to get feedback from the CoreFx and NuGet folks to make sure it will work correctly."""
1857,163420124,"b""I'd suggest a comment here explaining what the format of `dependency` is and thus why we're looking for the whitespace."""
1857,163420376,b'What would cause there to be a project in the assets file that meets the other conditions but has a placeholder file?'
1944,167302820,"b""I think sourcing `build.sh - dogfood` should work, right?  So perhaps we don't need to generate separate shell scripts."""
1944,167381486,"b""I've added this now.  Turns out previously sourcing the script didn't work because it had an exit at the end.  I've disabled that if you pass `--dogfood`."""
1969,169429866,b'Use spaces instead of tabs for indentation'
1969,169430084,b'Use spaces instead of tabs'
1969,169430276,"b""Shouldn't this be `perf=true`?  Looks like a copy/paste error."""
1969,169431141,b'Use spaces instead of tabs'
2020,173947016,"b""Shouldn't you delete the `logToMSBuild` parameter to this method if you're removing the functionality?"""
2020,173948462,"b'Should this task be deleted entirely?  Based on this comment, I would think so:\r\n\r\n> On top of that, we merge ReportAssetsLogMessages into ResolvePackageAssets, which allows for project.assets.json to not be read at all if it has not changed.'"
2020,173949343,b'Can we base this on `Path.GetDirectoryName($(ProjectAssetsFile))` instead of hard coding the `IntermediateOutputPath`?  This will work better with changes we are working on to use `MSBuildExtensionsPath` more consistently (NuGet/NuGet.Client#2056).'
2020,173949509,"b'This should be next to the project.assets.json file, but not necessarily in the intermediate directory.'"
2020,173951569,b'Incomplete comment here.'
2020,173951778,b'Nit: Missing close parenthesis somewhere here :-)'
2020,173951990,"b'Probably missing ""pass to"" in this comment'"
2020,173952185,"b'Incomplete sentence. Is this supposed to be ""Messages from the assets file""?'"
2020,173952660,"b""I don't understand what this comment means.  Perhaps it will become clearer as I read the rest of the code (but ideally the comment should be understandable without this)."""
2020,173959628,"b""Do you think it's worth throwing something better than an `IndexOutOfRangeException` if the index is wrong here?  Should we try to throw an exception saying the assets file cache appears to be corrupt in cases like this?"""
2020,173978130,"b""It seems like it would be quite easy to end up writing the metadata out of order, since metadata is flushed before an item is written instead of afterwards.  What's the reason for buffering the metadata items anyway?  Would it be more straightforward to have `WriteMetadata` write directly to the stream, and in `WriteItems` call the `writeMetadata` callback after the call to `WriteItem`?"""
2020,173979009,"b'This class combines two things: Logic for how we interpret the contents of the lock file, and the format we use to cache it.  It seems like it would be cleaner to separate these two things into two different classes.  Is this possible, or do they need to be mixed in order to maintain the perf gains from the cache?'"
2020,173979222,"b'Do we have any way of helping to keep this method up to date, so that whenever there is a property that would affect the result we make sure to add it to the hash?'"
2020,173979737,"b""Is it possible that a build would run fast enough that these times are actually the same?  Should the test do a short sleep if `DateTime.UtcNow` hasn't increased at each stage?"""
2020,174238800,"b'Can we just use the `ResolvePackageAssets` task to load the log messages for the designer, so we get the benefits of caching?'"
2020,174239419,b'I had mistaken `IntermediateOutputPath` for `BaseIntermediateOutputPath` in the line you added.  Now it makes sense.'
2008,174534856,"b""I chatted with Tanner about this and it sounds like this is the feed that will be used for prod-con.  There is some capability to inject additional feeds in the build infrastructure, but it's not being used and wouldn't have flowed through to the tests before this PR either."""
2028,174869505,"b""This should probably also depend on the `GetAssemblyVersion`, which is where `InformationalVersion` is set by default.  It currently works because of the ordering of `DependsOnTargets` for `GetAssemblyAttributes`, but it's probably better to be more explicit."""
2028,174870272,b'Nit: You can add these properties to the `AdditionalProperties` of the `TestProject` instead of creating the XML nodes yourself here.'
2028,174870744,"b'Since the `IncludeSourceRevisionInInformationalVersion` property is set to true by default in the SDK, is there a reason to set it in this test?'"
2028,174871170,"b""For tests where the name only differs by a number appended to it, I'd like to see comments summarizing what the tests cover / how they are different."""
2028,174871425,"b'Nit: Looks like there\'s an extra underscore between ""available"" and ""version"" in the name here.'"
2028,174872226,b'Please file a follow-up bug for us to remove the `SourceControlInformationFeatureSupported` property and `InitializeSourceControlInformation` target from all of these tests once we are using a version of MSBuild that includes them in all places where these tests run (the last one will probably be the full Framework version of MSBuild that we use on CI machines).'
2028,174872598,b'Use `testProject.TargetFrameworks` instead of hardcoding `netcoreapp2.0` as the target framework to pass to the GetValuesCommand method (here and elsewhere).'
2028,174873398,"b'On the other hand, perhaps this was intentional to separate the different parts of the test name.\r\n\r\nYou might consider changing these tests to a Theory.'"
2028,174899722,"b""I don't think we need to.  Generally for customers to be using an SDK with this feature, they will be using an updated version of MSBuild.  The only way they wouldn't have an updated version of MSBuild is if they were using full Framework MSBuild and installed the 2.1.300 SDK, but hadn't updated VS/MSBuild to 15.7.  That combination might be blocked otherwise anyway."""
2028,174905406,"b""We need it there for now, as the updated version of MSBuild hasn't made its way into the SDK.  I would leave it there in general, in order to follow the recommended pattern for hooking into the extension point (since others who use it can't depend on shipping together with MSBuild), and in order to not block the 2.1.300 SDK / MSBuild 15.6 combination just because of this."""
2083,176882133,b'Add a link to the NuGet bug you filed.  Consider updating or filing new bugs for the other issues.'
2085,177242929,"b""The logic we had before felt too complex to me, and was never going to test the actual roll-forward behavior (since it always used a fake version to roll forward to when testing).  My thinking was that we could set `LatestNetCorePatchVersion` as a way to override this in tests.  Thinking about it more now, I'm not sure how well that would work."""
2085,177266092,"b""@nguerrera I've added properties that allow the latest patch for each minor version of .NET Core to be overridden.  We could use these to override this from tests like we were doing before, but I think a better solution would be to set the latest version in the CLI via BundledVersions.props."""
2085,177885359,b'@nguerrera I refactored this:\r\n\r\n```c#\r\nprivate void WriteAdditionalLogMessages()\r\n{\r\n    WriteUnsupportedRuntimeIdentifierMessageIfNecessary();\r\n    WriteMismatchedPlatformPackageVersionMessageIfNecessary();\r\n}\r\n\r\n```'
2091,177885709,b'Nice that you thought of a way to test this!'
2111,178992275,b'Should we use a less generic name for this property?  Perhaps `PublishWithoutBuild` or something?'
2111,178993227,"b'There should probably be a ""sleep until current time advances"" loop here.'"
2111,178993372,"b'As a sanity check for this test, have you tried running it without the `/p:NoBuild=true` parameter and verified that it fails due to updated modification dates of the output files?'"
2111,178993608,"b""I'm guessing this is going up one level from the `ProjectRootPath` in order to cover the referenced projects, but that's worth an explanatory comment."""
2111,178993809,"b""It shouldn't be necessary to restore TestLibrary separately from TestApp.  (I know this is old code that you just moved)"""
2126,180591151,"b'Good catch, I think we should also exclude .resx.'"
2118,180591667,"b""This is unrelated to the feature.  I retargeted this to master, and tests targeting .NET Core 2.1 were failing.  So I'm trying to update the stage 0 CLI, which brought in an update to NuGet, which had API changes which required this addition... \xf0\x9f\xa4\xb7\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f"""
2118,180599295,"b""@nkolev92 @rohit21agrawal Can you provide guidance on how to implement an `IPackageDownloader` for a test like this?  I tried naively just implementing one method, and it looks like it's failing when it calls the `SignedPackageReader` getter.  What actually needs to be implemented here?"""
2133,180601684,"b""If we control all the consumers of this metadata, I'd prefer we just update them to check if there is a package ID set.\r\n\r\nHowever, this change is also fine if you think it's better based on risk, churn, etc."""
2136,181234068,b'We could consider re-enabling node reuse but running `dotnet buildserver shutdown` after a test run'
2118,181521920,b'@johnbeisner Without adding this feed I get an error on CI: `Unable to find package Microsoft.NETCore.App with version (>= 2.1.0-preview3-26411-06`\r\n\r\nShould this package not be in the dotnet-core blob storage feed?'
2148,182200246,b'I would use `ExpectedVersion` instead of just `Verssion` as the metadata name here (and in the task that reads it).  That seems clearer to me.'
2148,182200497,b'How will the `DisableImplicitFrameworkReferences` and `VerifyMatchingImplicitPackageVersion` properties interact with the Web SDK?'
2148,182200577,"b'There are a bunch of whitespace changes in this file, please revert them.'"
2148,182200981,"b'I would include ""Expected"" in the name of this property.  Perhaps `ExpectedPackages` or `ExpectedPlatformPackages`.'"
2148,182213160,"b""So it sounds like if someone sets `DisableImplicitFrameworkReferences` to true, then `VerifyMatchingImplicitPackageVersion` won't be set, and there won't be any validation that the restored version of Microsoft.ASPNetCore.App matches what is expected.\r\n\r\nThat's enough of an edge case that it's probably fine."""
2148,182213364,b'Removing the trailing whitespace is extra noise in the diff.'
2148,182213690,"b""This metadata needs to be updated to ExpectedVersion.  I would expect tests to fail as is, if they're not, then there's probably a gap in test coverage."""
2118,182257046,"b'@tannergooding @eerhardt It looks like this is handled correctly, as the new code from #2090 ends up calling through `GetReferenceRuntimeLibraries` for the indirect references, the same as how the direct references are handled.'"
2152,182591919,"b'What is ""DotnetTool"" in this message?  Is this supposed to refer to the `PackAsTool` property?'"
2152,182592051,b'Did you edit this file manually?  Where are all the whitespace changes coming from?  It would be good to revert them.'
2152,182592705,b'I think this workaround will be unnecessary once we merge https://github.com/dotnet/sdk/pull/2157'
2152,182593502,"b""Can you use the same code that is generated for you in the properties?  IE:\r\n\r\n```C#\r\nstring message = Microsoft.NET.Build.Tasks.Strings.ResourceManager.GetString(error);\r\n```\r\n\r\nAlso I'd rename `error` to something like `expectedErrorResourceName` and `message` to `expectedErrorMessage`."""
2152,182593665,b'I think this should be `WindowsOnlyFact` instead of `FullMSBuildOnlyFact`.'
2159,182605254,b'Add a comment here about why this is swallowing errors similar to what you have in the PR description.'
2152,182842896,"b""We don't run our tests on nano though.  There are lots of other tests that assume that full framework is available on Windows.\r\n\r\nIf we want to support running the tests on Windows without the full framework (and full framework reference assemblies) installed, then we can make our Fact/Theory attributes more granular to represent this, but for now we should get the coverage on the .NET CLI as well as full MSBuild."""
2113,183873874,b'This is adding a path to a Directory.Build.props in the parent folder.  It should probably be:\r\n\r\n```xml\r\n<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileDirectory)Directory.Build.props</MSBuildAllProjects>\r\n```\r\n\r\n'
2178,184209971,b'As of #2157 a NuGet.config is generated for all tests (it goes in the root test execution folder)'
2178,184210569,"b""@tannergooding I think all .props and .targets should add themselves to MSBuildAllProjects.  It doesn't hurt to have the same file added twice, and it's much simpler to always do it rather than have to reason about whether the importer is doing it for you."""
2178,184212382,"b""Personally I really don't like that all projects have to be updated to use a different Sdk.  Also, Sdks don't compose if done this way- there's no way to use both RepoToolset and Microsoft.NET.Sdk.Web for example.\r\n\r\nWould it be possible instead to:\r\n\r\n- Not have the RepoToolset SDK import Microsoft.NET.Sdk\r\n- Have projects that use RepoToolset do so via Sdk imports in Directory.Build.props and Directory.Build.targets\r\n- Leave the Sdk imports in project files as they were (ie Microsoft.NET.Sdk or Microsoft.NET.Sdk.Web)\r\n\r\nWe don't need to change this before we update the sdk repo to the new repotoolset, but I would like to consider a change like this for the future."""
2196,185115715,"b""You shouldn't need to compare the project path unless you are creating multiple projects.  Since you only have one here you shouldn't need this."""
2196,185116398,"b""In this test, the HintPath won't be used (as there's no DLL at that path).  Instead the DLL will resolve to the one in the targeting pack.\r\n\r\nTo more closely match the user scenario here, you could compile one project, get the full path to its DLL in the output path, and use that HintPath in a Reference in a second project."""
2185,185963905,"b""@ericstj @nguerrera Agreed we should figure out if we can depend on an RTM version.  The problem with 1.5.0 is that it's not multi-targeted to .NET Framework, so it will need the .NET Standard facades, which means more risk of having loading issues with it in the MSBuild task context."""
2210,185967822,b'Add comment here explaining why deleting the SHA works here.'
2215,186892539,b'We will need to modify the build definition to also push the NuGet packages in this folder.  (If we switch to YAML build definitions changes like this will be a bit easier)'
2215,187165616,"b""@nguerrera I've merged https://github.com/dotnet/roslyn-tools/pull/253, and updated this PR to use the new repo toolset and remove the workaround."""
2229,187465365,b'I think it would be clearer to use an `MSBuildCommand` here and pass in `/t:Clean;Build` as targets.'
2229,187465474,b'Rename this to `assetsFilePath`'
2215,187746001,"b""@davkean Turns out it's just the folders that show up:\r\n\r\n![image](https://user-images.githubusercontent.com/145043/39949273-b6f68faa-552e-11e8-8fdb-a0c8f47df456.png)\r\n"""
2250,189143213,"b""@ericstj I think the warning from #1499 was because after building, there weren't any items matching the ItemSpecs of a `Reference` that existed from evaluation.  In this case we're creating items using the simple name, so the ItemSpec would match any corresponding reference that originally was in the project."""
2264,189999017,"b'In order to be super safe for servicing, I\'d consider only setting this with `Condition=""\'$(OS)\' != \'Windows_NT\'""`'"
2272,190597478,b'@joperezr @AlexGhiondea Is it correct to expect all of these files in the output directory for a .NET 4.7.1 project which depends on a .NET Standard 2.0 library?'
2272,190597800,"b""This feels a bit dirty (passing in null for the logger because we know it won't be used)."""
2250,190740679,"b""No it shouldn't break.  In a lot of cases you will still have 2 copies of a framework reference, one from your project file or implicitly from the SDK targets, and one from the framework assemblies from NuGet packages.  But 2 is a lot better in the logs than having 5 or more because several different NuGet packages had the same framework assembly dependency."""
2250,190741682,"b""The `ResolvedCompileFileDefinitions` items have the `HintPath` set.  This join basically changes the itemspec from the full path to the DLL in the NuGet package to the simple name of the assembly.  That's for the benefit of the project system so it understands that the simple reference didn't just disappear.  Later on in conflict resolution, if the platform copy of the DLL wins, then these items will be removed from the result, and a new simple name item will be added."""
2272,190753443,b'Turns out I think we can delete this test entirely.  The scenario is covered by `GivenThatWeWantToTargetNet471.It_builds_a_net471_app_referencing_netstandard20`'
2269,191032244,"b""Let's add tests that validate that we don't duplicate error codes over time.\r\n\r\nTo ensure that this still holds even for deleted messages, we discussed having a list of deleted message codes, and ensuring that there are no duplicates between the current and deleted message codes, and that the current and deleted message codes are contiguous."""
2269,191032465,"b""The pipes didn't make it clear to me that this wasn't just one long string.  Perhaps something like this would be clearer:\r\n\r\n```\r\n  Strings.resx:\r\n    Resource Name: SomethingIsWrong\r\n    Resource Value: NETSDK1234: Something is wrong.\r\n```"""
2269,191033347,b'Plumb the file through here from the NuGet message.'
2269,191033836,"b""Won't this fail in Debug?  I think it needs to be moved into the `#else` clause, or possibly delete it, bring `logWithoutErrorCode` out of the `#if` clause, and invoke it in the `#else` clause."""
2286,191605801,"b'@richlander The aka.ms link here redirects to https://docs.microsoft.com/en-us/dotnet/core/tools/global-json, which is just a generic global.json reference.  Is that the intent or will there be a different page more specific to .NET Core previews?'"
2298,192469832,"b""We don't need this line, it will fall through to the bundled version or the TargetFrameworkVersion if this isn't set."""
2293,192538907,b'> Before this change the search (all in memory) need 9461\r\n\r\n9461 what?  ms?  calls?  Does this mean that the new code is slower than what we currently have?'
2318,194493307,"b'This seems like the wrong way to check the values of environment variables.  I think the right way is something like this:\r\n\r\n    if [ ""$runType"" = private ]; then'"
2318,194493484,b'I think a better way to do this may be something like this:\r\n\r\n    if [[ -z $perfWorkingDirectory ]]; then'
2316,194925244,"b""Suggest:\r\n\r\n> This project uses a library that targets .NET Standard 1.5 or higher and targets a version of .NET Framework that does not have built-in support for that version of .NET Standard.  Visit https://go.microsoft.com/fwlink/?linkid=874511 for a set of known issues. Consider retargeting to .NET Framework 4.7.2.\r\n\r\nI'd also suggest creating an aka.ms link instead of a fwlink, that way we can choose a name that's easier to type in, for example http://aka.ms/net-standard-known-issues.\r\n\r\n@mairaw Can you review this for style?"""
2325,195233468,b'@DrewScoggins @jorive Does the submission script support specifying multiple `--config` parameters?'
2330,195243225,"b'Reading this message again it\'s not clear that ""and targets a version of .NET Framework"" refers to the project and not the library.  So how about this:\r\n\r\n> This project uses a library that targets .NET Standard 1.5 or higher, and the project targets a version of .NET Framework that doesn\'t have built in support for that version of .NET Standard. Visit https://aka.ms/net-standard-known-issues for a set of known issues. Consider retargeting to .NET Framework 4.7.2.'"
2330,195246805,"b""The identifier should be unique for each test case within a theory.  So here I think you'd want to combine `isSdk` with `description`."""
2330,195247309,"b'Nitpicking here, but I think in this case you can just use `framework` directly, instead of parsing it into a NuGet framework and then getting the short version of it.'"
2330,195249495,"b""I think we should not use `predicate.Method.Name` here.  It's not generally expected behavior to use the method name of a func you pass into a function, and if you use a lambda or anonymous delegate (perfectly reasonable to do), then this would be a compiler-generated method name."""
2346,196914990,b'Switch http to https in the link'
2352,197298653,"b'I think instead of disabling these tests, you can change GetRollForwardNetCoreAppVersion to set the TargetLatestRuntimePatch property to true in the project it creates.  Then it will return 2.1.1 which is what you want.'"
2352,197298971,"b'Is there any guarantee that all of the packages will be published to this feed?  The blob storage feed was supposed to be the ""One feed to rule them all"", so I\'m worried that we could end up not picking up a new patch because it wasn\'t published to the right feed.\r\n\r\n@johnbeisner '"
2362,197979623,"b""Per our discussion, I don't think that it is dangerous to remove the binding redirect for all frameworks above 4.7.1, as those frameworks should always have the assembly in the unification table, and thus the binding redirect should never be needed (nor correct)."""
2365,198637497,"b""Use `'$(_TargetFrameworkVersionWithoutV)' == '$(BundledNETCoreAppTargetFrameworkVersion)'` instead of the clause that checks whether the bundled version starts with `$(TargetFrameworkVersion).`."""
2366,198656165,"b'Do you mean the ""NoBuild"" flag instead of ""no build""?'"
2366,198937344,"b'I had started to review the full PR, but chatted about it a bit with @nguerrera, and decided to let him review this since he has more context.'"
2286,199302780,"b'I think we should either add back a sentence along the lines of ""You can define the SDK version via a global.json file in the current project."", or create a more specific page for https://aka.ms/dotnet-core-preview to point to.'"
2286,199587274,"b'> That page is getting expanded dotnet/docs#4704\r\n\r\nGiven those updates to the target of the link, I think the message in this PR is OK.'"
2382,201099819,"b""> Since you are trying to run a .NET Framework app, does this test need to be skipped when running on Unix?\r\n\r\nThat's what `[WindowsOnlyTheory]` does."""
2395,202176354,"b'Remove the ""_not_"" from this test name, it\'s testing the opposite.'"
2395,202180966,"b'I would say we already have another escape hatch: put the following in your project:\r\n\r\n```xml\r\n<ItemGroup>\r\n    <PackageReference Update=""Microsoft.NETCore.App"" PrivateAssets=""None"" />\r\n</ItemGroup>\r\n```'"
2394,202190825,"b""Isn't this supposed to be 2.1.1?"""
2403,202846637,b'I would prefer to do the git clone in C# instead of MSBuild.'
2447,207330790,"b'Rename this class/file to `GivenAGeneratedAppConfig` (it\'s missing a ""d"").'"
2447,207330968,b'Typo in method name: `nod` -> `node`'
2447,207331848,b'This task should be based on the `TargetFrameworkIdentifier` and `TargetFrameworkVersion` properties (which are by default inferred from `TargetFramework`) instead of directly depending on `TargetFramework`.'
2447,207333685,"b'Instead of using a map here, I would just use if statements, which check the range of values.  IE any version >= 2.0 but < 4.0 should use v2.0.50727 in the app.config.'"
2488,212128304,"b""@ericstj I think that it's guaranteed that the previous unresolved conflict would lose to the winner.  The list of previously unresolved conflicts are all equivalent to each other as far as conflict resolution goes, and the added check verifies that one of them lost to the winner.  So they should all lose.\r\n\r\nDoes that make sense?"""
2489,212417191,"b""Is this the full list of files expected?  If so, then probably `OnlyHaveFiles` is better than `HaveFiles`.  If not, it might be better to list all the files anyway and use `OnlyHaveFiles` to ensure we're not getting unexpected output."""
2533,218272102,b'Are you saying a separate method to construct the dictionary?'
2646,231022207,"b'FileResolver is a rather generic name, perhaps something like AssetsFileResolver would be better.'"
2646,231022942,"b""What's the difference between DestinationSubPath and DestinationSubDirectory?  This should be explained somewhere, if it isn't already."""
2646,231023786,"b""As long as we're refactoring this, I'd rename `_LockFileAssemblies`.  The assets file used to be called the lock file, which is where that name comes from.  Perhaps something like `RuntimeAssetsForConflictResolution` would be good."""
2646,231024087,"b'Do we still need to do conflict resolution separately for build and publish?  If so, can you add comments explaining why, and what the difference is?'"
2646,231186888,"b'Do we have a scenario for excluding assets from the publish output but not the build output?  Can we just have the same knobs control both, and get rid of this target and a lot more of the differences between build and publish?'"
2646,231188588,"b'It looks like this is comparing the target framework version but ignoring the target framework identifier.  We should be looking at both.\r\n\r\nAlso, should this be enabled by default for libraries?  My feeling is no.  Also consider whether it should apply to projects targeting .NET Standard.'"
2646,231189575,b'I think the method name would be clearer if it ended with `requested_not_to`.'
2646,231189980,"b'Instead of passing this in as a command-line argument, I\'d suggest:\r\n\r\n```C#\r\ntestProject.AdditionalProperties[""CopyLocalLockFileAssemblies""] = ""false""\r\n```\r\n\r\n(I think I got the member names etc right on that).'"
2646,231191048,"b""What's going to happen if we run this test on a RID that the SQLite package doesn't have an asset for, e.g. MUSL Linux?  I think this test would fail.  That is probably fine, we can deal with that when we come across it, but a comment about that might be helpful."""
2646,231192712,"b'Add a test testing whether a library project gets package assets copied local by default.  As stated previously, I think the default should probably be false.  If that is the default, we should probably also have a test that you can turn it on.\r\n\r\nAlso consider some coverage of projects targeting .NET Standard.'"
2646,231212443,"b""We should also have some test coverage for building self-contained apps.  Is the expectation that in that case all of the self-contained assets will be copied to the output folder too?  If so, then we should modify the self-contained publish tests to also test the same scenarios with build instead of publish.  If not, then we should add tests here that verify that runtime assets aren't copied to the output folder on self-contained build."""
2646,232104479,b'Should this use `HasRuntimeOutput` (which I think test projects set) rather than `_IsExecutable`?'
2646,232104770,"b""I'd recommend finding the existing self-contained publish tests, and updating them to also cover self-contained build (ie via a Theory)."""
2646,232543798,"b'Yes, this test is fine, I just think that there are a bunch more self-contained scenarios that we already have test coverage for, so we should apply them to self-contained build.'"
2686,236402872,"b""What's the reason for getting rid of x86?"""
2700,236921759,b'Is this the right way to probe this?  Have we asked the right folks in Windows?  Is it OK to call BeginUpdateResource without calling EndUpdateResource?'
2738,240450942,"b'Turns out it does, so this was unnecessary.  I think this was a leftover change from previous work I was doing.'"
2774,245834179,b'No idea \xf0\x9f\xa4\xb7\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f '
2774,245838153,"b'The item is an output from the GetPackageDirectory task.  There\'s only supposed to be one, but I\'m using an item so that I can set metadata on it instead of using multiple properties.\r\n\r\nI\'ve changed the condition on setting the property to this:\r\n\r\n```xml\r\n    <ItemGroup>\r\n      <ResolvedAppHostPack>\r\n        <Path Condition=""\'%(ResolvedAppHostPack.Path)\' == \'\'"">%(PackageDirectory)\\%(RelativePath)</Path>\r\n      </ResolvedAppHostPack>      \r\n    </ItemGroup>\r\n\r\n    <PropertyGroup Condition=""\'@(ResolvedAppHostPack)\' != \'\' And \'$(AppHostSourcePath)\' == \'\'"">\r\n      <AppHostSourcePath>@(ResolvedAppHostPack->\'%(Path)\')</AppHostSourcePath>\r\n    </PropertyGroup>\r\n```\r\n\r\nDoes this match what you were getting at?'"
2774,245866278,"b""It uses the `TargetingPackRoot` instance property, so it can't be static."""
2774,246263798,b'Filed https://github.com/dotnet/sdk/issues/2802 and https://github.com/dotnet/project-system/issues/4444'
2774,246267458,"b""My thinking here is to keep it simple for the way it's currently being used, but strict so that it will fail obviously if we try to use it in a scenario it doesn't support (e.g. a `TargetFrameworks` property)."""
2774,247013838,"b""I think that since you have to set the `UserSecretsId` property to enable this, it's probably not necessary to restrict this target to projects having an ASP.NET framework reference.  If for some reason you want to set `UserSecretsId` without having it generate the attribute (e.g. if you aren't referencing ASP.NET), then you can always set `GenerateUserSecretsAttribute` to false."""
2857,250815568,"b""Looking at https://semver.org/, I think the correct formatting would be `1.0.0-alpha.5` to make sure the packages are sorted correctly if we're not padding with zeroes.\r\n\r\nWe don't need to fix this before updating to use the new packages though."""
2883,252440057,"b""What's the reason for even having this check here?  Is this to avoid getting duplicate AppHost items while we haven't fully switched over to PackageDownload?\r\n\r\nAlso, if we do have this check, it should check the target framework identifier in addition to the version."""
2883,252441382,"b'There is a `WithTargetFramework` helper method for this that you could use.  You could also update it to support multi-targeting, or add a `WithTargetFrameworks` method.'"
2883,252444370,"b""I think it would be better to factor out the setup into a class fixture, so you don't repeat the setup but still have separate test results for each scenario.  I don't want to hold the PR up for this though."""
2888,252791544,"b""I'd remove or rename the `uniqueName` parameter here.  It looks like it's not unique, it's always `nameof(DefaultPackWithShimsAndResultNugetPackageNuGetPackagexFixture)`, and it's different than the `uniqueName` praameter to the CreateTestAsset method."""
2888,252791979,b'Nit: I would use a PascalCased alias for the fixture (and probably make it slightly more descriptive)'
2888,252793111,"b""I'd rename this method to make it clear that it is returning the path to a .nupkg, perhaps `GetTestToolPackagePath`."""
2888,252795876,"b'I\'m not sure what the difference between the new class name (`GivenThatWeWantToDefaultPackAToolProjectWithPackagedShim`) and the existing one (`GivenThatWeWantToPackAToolProjectWithPackagedShim`).  What does it mean to ""default pack"" a tool project?\r\n\r\nI would suggest just leaving all these tests in the same class.  Some of the tests won\'t use the fixture, but that\'s fine.'"
2887,253227391,"b""ResolveFrameworkReferences now resolves all the possible shared frameworks that could be referenced.  This is because eventually we will support [transitive shared framework references](https://github.com/dotnet/cli/issues/10666).  It won't be until we run ResolvePackageAssets that we know for sure which ones will be referenced, so we need to filter the targeting packs, runtime packs, and RuntimeFrameworks after that target runs."""
2887,254070728,"b'Do you mean the guideline ""Do not have public members that can either throw or not throw exceptions based on some option.""?\r\n\r\nI don\'t consider our tasks public APIs, so I don\'t think this guideline applies.'"
2887,254083480,"b""I feel like it's OK to throw these types of errors when the invalid input is something that wouldn't be public if there was a concept of non-public items in MSBuild."""
2887,254089486,"b'I think it was for parity with the runtime and apphost packs.  However, the asset resolution has changed since then so I can remove it.'"
2887,254527051,"b'Stage 0 needed to be updated, now done.'"
2887,255274704,"b""This target runs before the assets file is read (it's the one that generates the list of packages that need to be downloaded)."""
2887,255274863,"b""This one started failing for .NET Core 1.x.  I discussed disabling these tests with Livar, although I'm not sure I called out the fact that one of the failing ones wasn't for .NET Core 3."""
2887,255275024,"b'So that if you run the perf tests with an `-sdkVersion` argument, it will respect that.  Most of the time the global.json will be written when the test directory is created, but in this case `MirrorFiles` wipes out anything in the target directory, so we have to explicitly write it again.'"
2887,255278399,b'It was to resolve the singular/plural discrepancy between `FrameworkReference` as an MSBuild item name and `FrameworkReferences` as a task property :-)'
2929,256065389,"b""Are you sure that this works correctly?  I'm used to having to put conditions involving custom item metadata on a metadata subelement.  Maybe it's different because this is in a target."""
2929,256066474,"b""It seems like this is avoiding a call to `Array.Empty<T>()`, but makes the code less clear.  Unless we have reason to believe that the method call will have a perf impact, I'd go with clarity and make the call to `Array.Empty<T>()` here."""
2929,256068700,b'NIT: Spacing between method parameters'
2929,256070319,"b'Can we remove the ProjectPath parameter from some of these other tasks that were passing it to `CreateResolver`, or are they still using it for other things?'"
2929,256078020,"b'Never mind, I was confused.'"
2919,258245602,b'Filed #2962 for this (not referenced in the code though).'
2972,258814757,"b'Oops, copy/paste issue from the WPF test which only applied to Windows.'"
2979,259543476,"b""I would use this comment: In 3.0 and above, disable implicit framework references so we don't resolve targeting packs and conflict resolve dependencies which need to be written to the deps file."""
2979,259543609,"b""What's this necessary for?  A comment would be good."""
2990,260531069,"b""What's the reason for adding ResolveFrameworkReferences to the `BeforeTargets`?"""
2990,260532537,"b'This could cause issues with package downgrades.  There are some repos that had issues with package downgrades with this package, which they are resolving by doing an update on the `PackageReference`.  So we should probably offer an easier way to control this, for example a property to control the version or whether the reference is added at all.'"
2990,260539220,"b""Is there a reason it needs to go first?  I wasn't able to follow why it would matter."""
2990,260542391,"b""So if the only PackageReferences we have are fake PackageDownloads, we shouldn't need to apply implicit versions or add the platforms package, right?"""
3002,261800386,"b""The reason it's not an include list is because native assets can have a variety of extensions and I'm not sure if we know what that list is.\r\n\r\nEventually we would like the runtime packs to [include a manifest](https://github.com/dotnet/cli/issues/10442#issuecomment-454587259) which lists the managed and native files in the pack explicitly, so we don't have to glob for them at all."""
2984,262268948,"b""No, let's just do Debug"""
2984,262274502,"b""I've switched to using the `Exec` task on `dotnet --version`.  This can still be wrong locally if you switch to a branch with an earlier stage 0, but that's a problem we have anyway in other places, and when this runs on CI it should be with a clean enlistment."""
3021,265389603,"b""I'd suggest setting the RuntimeIdentifier property of the testProject instead of passing it in via the command lines."""
3030,267962881,"b""Should we be concerned about this potentially being a breaking change?  I wouldn't be surprised if some folks were relying on this behavior."""
3030,267971208,"b'Even with library projects, I think this scenario is probably not supported and won\'t work in general...\r\n\r\nBut I bet it works for some folks for their projects, so it would be nice not to break them.\r\n\r\nSo yes, I think changing it to `!= "".NETFramework""` would be better.'"
3030,267996186,"b""I figured that I had added this test back in the 1x days, and that there was probably a scenario for it back then.  I have a vague notion that people were trying to create .NET Standard test projects, or .NET Standard Exes.  Looking at the history I see that Peter actually added this test as part of his copy local work.  In that case I'm less concerned about the potential breakage, unless he was paterning this off of another test that already existed."""
3057,270136658,"b'Add a space here: ""tools (DotnetCliTool)""'"
3057,270138374,"b""I'd reword this to:\r\n\r\n> NETSDK1093: Project tools (DotnetCliTool) only support targeting .NET Core 2.2 and lower."""
3057,270140590,b'I would say this:\r\n\r\n> Maximum supported target framework for DotnetCliProjectTools is .NET Core 2.2'
3057,270144052,"b""I'd name this `It_packs_project_tools_targeting_netcoreapp2_2`"""
3057,270145314,b'You can write these two checks as something like this:\r\n\r\n```c#\r\nresult\r\n    .Should()\r\n    .Fail()\r\n    .And.HaveStdOutContaining(Strings.ProjectToolOnlySupportTFMLowerThanNetcoreapp22);\r\n```'
3057,270145661,b'Rename this to `It_fails_to_pack_project_tools_targeting_netcoreapp3_0`'
3057,270151211,b'Spelling: capped'
3086,272723815,"b""The DependencyContext APIs are writing this, so we'd need a change in that library if we wanted to not include the field in the deps file at all."""
3086,272762590,"b""Agreed, I don't think we should do that either.  I should change it to a simple string comparison, or if that doesn't work something that doesn't bring in a new dependency."""
3087,272764438,"b'If we are going to use this package, we should only reference it for .NET Framework.\r\n\r\nAlso, why is this using a sources package instead of a library?'"
3086,272776059,"b""Originally I had replaced all occurrences, but #2997 was merged while I was working on this PR, adding a use of RelativePath.  I'm not entirely sure that couldn't be changed to PathInPackage, but I left it as RelativePath and the crossgen tests passed, so I think it was probably right.\r\n\r\nIt is reasonable to add it back to MetadataKeys now though."""
3086,272777890,"b'Yes, the idea is eventually we just remove this whole section of logic.'"
3086,272777969,"b'As part of eliminating the heuristic to find the package ID based on a path in NuGetUtils, I was going through and trying to make sure all items where we would want to find the package ID had package ID metadata set on them.'"
3086,272778492,"b""I don't think so, but I wasn't sure so I figured it was best to preserve it in the re-implementation."""
3086,273105543,"b""This is covered somewhere in our tests, which is how I ran into the need for this.  I don't remember exactly where though."""
3086,273170940,"b""That's not a bad suggestion, but we don't expect for these to live for long.  The only reason we are including multiple modes is in order to help validate that the new logic behaves the same as the old, and to offer an escape hatch if there is a bug in the new logic.  After a few previews, we plan to remove the old logic altogether."""
3086,273171952,"b""I've filed #3098 to track removing the old logic."""
3102,273290723,"b""We're (going to be) using a targeting pack for .NET Standard, so the FrameworkReference is how we bring that in.\r\n\r\nWith Pack=false I think this should not affect NuGet or NuGet packages (just like the base Microsoft.NETCore.App FrameworkReference will be handled).\r\n\r\nBasically, FrameworkReferences which are represented by a target framework moniker should have Pack=false and not be represented in NuGet packages or flow transitively.  Does Pack=false have this behavior with the FrameworkReference work?"""
3102,274179763,"b'@nkolev92 Yes, we need to be able to prevent the NETStandard.Library FrameworkReference from flowing.  Does `Pack=false` prevent it from being added to the NuGet package?  To me it would make sense if that also prevented it from flowing through the projects, but we can also add a PrivateAssets-type flag to it if need be.'"
3112,274454287,"b""Add an explanation of why we're referencing this package.  As I understand it, it's because it will resolve assets in a PCL directory in the package with `+` in the path, which needs to be escaped."""
3123,275476637,"b""For reference, here's what the error is:\r\n\r\n> NETSDK1095: Optimizing assemblies for performance is not supported for the selected target platform or architecture. Either set the ReadyToRun property to false, or use a supported runtime identifier when publishing."""
3111,275560475,"b""It's the `GetPackageDirectory` task.  It doesn't change with this PR, with `PackageDownload`, the packages are downloaded to the same place that the would have been with `PackageReference`."""
3141,277095391,"b'Regarding `Publish=""false""`, I am going to propose making that exclude assets from build as well, so eventually the difference between the deps files might not matter here.'"
3086,281814428,b'.NET Core projects never use packages.config.  Under what circumstances could this be an issue with .NET Framework projects?'
3221,282751541,"b""@nguerrera I'm not sure there's value in opting out of transitive FrameworkReferences.  There's no split between compile and runtime assets for framework references, so disabling transitive framework references would either have no effect (since you already have the same direct references), or would break your app at runtime (since the framework your dependency needs isn't written to the runtimeconfig).\r\n\r\nWhat do you think?"""
3221,283052731,"b""Arcade doesn't give you meaningful names for the test results or the zip files.  See [here](https://dev.azure.com/dnceng/public/_build/results?buildId=185074&view=ms.vss-test-web.build-test-results-tab) for example:\r\n\r\n![image](https://user-images.githubusercontent.com/145043/57558419-7b8e6780-7332-11e9-8eff-c7dce76e5600.png)\r\n\r\nThere's discussion of this on this arcade PR: https://github.com/dotnet/arcade/pull/2525.  I made a similar change to core-sdk here: https://github.com/dotnet/core-sdk/pull/1609"""
3221,283072055,"b""I implemented it the same way other similar methods work: the HashSet keeps track of items for which you've already called `WriteItem`"""
3275,289132339,"b'Instead of hard-coding the name here, I\'d suggest adding metadata to the KnownFrameworkReference specifying that it\'s only supported on Windows.  Until that change makes it through core-sdk, you can add it in the ResolveFrameworkReferences target:\r\n\r\n```xml\r\n<KnownFrameworkReference Update=""Microsoft.WindowsDesktop.App"" IsWindowsOnly=""True"" />\r\n<KnownFrameworkReference Update=""Microsoft.WindowsDesktop.App.WindowsForms"" IsWindowsOnly=""True"" />\r\n<KnownFrameworkReference Update=""Microsoft.WindowsDesktop.App.WPF"" IsWindowsOnly=""True"" />\r\n```'"
3275,289133070,"b'The `frameworkReference != null` check looks like it stops the error from happening on non-Windows.\r\n\r\nHowever, I think it will still download the targeting and runtime packs, which we want to avoid.'"
3275,289138762,"b""There's now a FrameworkReferences property on TestProject which you can use instead."""
3275,289139739,"b'How about using `uiFramework` or something set to ""WindowsForms"" or ""WPF"" as the parameter?  I think that would be clearer than `desktopProperty`.'"
3275,289140234,b'Consider adding a `ProjectSdk` property to TestProject so we have a simpler way to set the SDK.'
3275,289149724,"b""It will be tricky to test the transitive FrameworkReference failure, because we won't be able to build a package or a project that has a WindowsDesktop FrameworkReference on the same machine.\r\n\r\nAs is, it should [fail](https://github.com/dotnet/sdk/blob/d6749cfae26412c188e26c247b15919afccef127/src/Tasks/Microsoft.NET.Build.Tasks/ResolveTargetingPackAssets.cs#L149) with NETSDK1073: The FrameworkReference 'Microsoft.WindowsDesktop.App' was not recognized."""
3275,289222642,"b""Add a comment to the continue statement explaining that there wasn't a direct reference to this framework and we skip the rest of the loop so that we don't pre-emptively download it in case of transitive references."""
3293,289970511,"b""It's [defined by arcade](https://github.com/dotnet/arcade/blob/ed3510aaa6610514c484e23a4b7f17963bf16e0c/src/Microsoft.DotNet.Arcade.Sdk/tools/DefaultVersions.props#L83).  I'm not sure why we had it pinned to an earlier version, maybe we were just using the same property name before arcade had this support built in."""
3315,292138777,"b""It looks like `_MicrosoftNetSdkWindowsDesktop` isn't set by the WindowsDesktop SDK yet.  Until it is, this will block WindowsDesktop projects from building.  I think you need to set that property in the WindowsDesktop SDK first, flow that through to core-sdk and then to stage 0 in this repo, before committing this change."""
3316,292188409,"b""I figured it would be easier to review without the rename.  But now I've pushed a commit that does rename it."""
3320,292644152,b'Is it worth first comparing the length for perf?'
3320,292646617,"b'The ""windows"" test needs to be under a `WindowsOnlyFact`'"
3320,292649293,"b""I'm wondering if it's possible to have 3 items conflict, where the first one is not CopyLocal, and the second two ones are CopyLocal.  Then the CopyLocal items would not be compared against each other, and you could still have double writes."""
3320,292653728,"b""No, I'm not sure if it's actually possible.  If it looks like it won't happen based on code inspection then we can leave it be."""
3320,292653801,b'Either way is fine with me.'
3327,294523132,b'Is this comment now outdated?'
3326,294963414,b'Can we fix the typo (`Suppoted` -> `Supported`) in this resource name?'
3326,294967954,"b""Nit: Don't call `EnvironmentInfo.GetCompatibleRid` twice here.  Use `testProject.RuntimeIdentifier`, or store the result of the first call in a variable."""
3326,294968810,"b'Do you know why all the commands had ""/v:n"" in them?  Were any of them checking for output that might only be in included at normal verbosity?'"
3348,296970353,"b""I'm not sure using three separate lists would end up being more efficient, since they are going to be combined to pass to the task anyway.  Putting them in one list means we don't have to duplicate the Remove code, so I think it's preferable unless we're somewhat confident it could be a perf issue."""
3348,296971151,"b'Yes, the code in `ProjectContext` is still used by `ResolveCopyLocalAssets`.\r\n\r\nMy hope is that we can remove `ResolveCopyLocalAssets` with further refactoring.  This would require supporting the equivalent of PreserveStoreLayout and RuntimeStorePackages in `ResolvePackageAssets`.'"
3355,297963036,"b""Would it be a problem if you end up with ResolvedFrameworkReference items that didn't have a corresponding FrameworkReference when you evaluated?  Would you just ignore them or would it be a warning or error?"""
3355,298003484,"b'I would expect IsImplicitlyDefined to determine whether you can delete the reference from the solution tree, but what would you do with PrivateAssets?'"
3355,298385585,"b""I'm not sure I consider PrivateAssets on FrameworkReference items a user-facing feature.  We use it to communicate that an implicit FrameworkReference is represented by the target framework, and thus doesn't need to flow transitively.  I don't think there's a scenario for setting it on other FrameworkReferences, and if it shows up in the UI it's more likely to cause confusion and incorrect builds if people set it."""
3355,298740320,"b'One of the args creates a binlog, so this ensures it goes to the right folder.'"
3355,298745011,"b'Thinking about it, I think it makes slightly more sense as `Profile` than as `TargetingPackProfile`.'"
3389,300188999,"b""Oops! That was debugging code that got left over.  I've fixed it."""
3394,301220079,"b""Rather than adding the `ResolveRuntimeAssetsDuringDesignTimeBuild` property and the `BeforePublishItemsOutputGroup` target, I think we can just delete the `'$(DesignTimeBuild)' != 'true'` clause on this condition."""
3393,301309580,b'I think there was some discussion in the past about whether we wanted to have links to our repos for filing issues in our error messages. @nguerrera '
3406,301335001,b'I now have this: https://github.com/dotnet/core-sdk/pull/2970'
3406,301363501,"b""I've moved it to .props now"""
3543,315362854,"b""@nguerrera I've bumped it, can you re-approve?"""
3539,315454354,b'Typo: `CopyLoca:`'
3539,315456189,"b""Suggest clarifying here that this filters out what will be written to the deps file - ie if an item isn't in this list it won't be written to the deps file."""
3539,315458052,"b'Not new, but should this use a Dictionary?'"
3539,315464452,b'Did you get an answer on whether or not this was the recommended way to conditionally depend on a target?\r\n\r\nI think you can also conditionally set a property that you use for DependsOnTargets.'
3673,327880796,"b""The bug being fixed is that currently the build will fail, because the attribute is emitted but the assembly it's from isn't referenced.  But we can still check that the attribute isn't emitted."""
3658,328259040,b'Can you also add this for when you run `dogfood.ps1` and `dogfood.sh`?'
3723,332273823,"b'Does this need to be a WPF app to repro the issue?  If so, then this needs to be a `WindowsOnlyFact`, as it could only be built on Windows.  If the same issue exists with a console app though it would be better to use that.'"
3771,338807593,"b'Nick made a change to our tests where a separate `RestoreCommand` is usually not necessary.  The `PackCommand` (and most other commands) will restore implicitly, which makes the tests run faster and matches the developer experience (`dotnet pack` also implicitly restores).'"
3771,338807701,"b""Restore command shouldn't be necessary here (see other comment)."""
3771,338807814,b'Typo: PPTiles -> PPFiles ?'
3771,338808342,"b""I'd recommend using `TestProject.TargetFrameworks` as the last argument here instead of hard-coding it.  That way if we retarget the test we only have to update one place."""
3850,342173800,"b""If we're not writing the PackageName metadata, should we be writing NuGetPackageId instead?  Also, should we be writing the version?"""
3850,342295385,b'If possible I think we should standardize on one metadata key or the other.'
3850,348723727,b'Looks like we may have duplication between PackageVersion and NuGetPackageVersion.  We can address that separately though.'
3867,348732597,"b'Did you have to write this code, or is it boilerplate?  Does every repo using Helix need to duplicate this code?'"
3867,348733719,"b""We should enable long paths on the Helix machines.  Hopefully that would mean we don't have long path issues."""
10714,383929343,"b'This appears to be in use, at least for testing:\r\n\r\nhttps://github.com/dotnet/sdk/blob/810f8190d6728e313a616f91a6097f7e52fb703f/eng/Versions.props#L123\r\nhttps://github.com/dotnet/sdk/blob/810f8190d6728e313a616f91a6097f7e52fb703f/src/Tasks/Microsoft.NET.Build.Tasks/Microsoft.NET.Build.Tasks.csproj#L108\r\nhttps://github.com/dotnet/sdk/blob/810f8190d6728e313a616f91a6097f7e52fb703f/src/Layout/redist/targets/BundledSdks.targets#L9\r\n\r\nIs there any reason this needs to be deleted?'"
10714,383931363,"b""Looks like the version property wasn't getting updated though, does that package come out of a different repo now or what?\r\n\r\nThinking about it more though, I think that package dependency is used to build the product.  It doesn't look like it's being used in core-sdk."""
10714,383970185,"b'I think there is a NuGet package with the ID Microsoft.NET.Sdk.WindowsDesktop which we depend on.\r\n\r\nIf you want to try removing this dependency, you should also remove the out-of-sync property from the version.props file.  I think the build would then fail though.'"
10714,383980565,"b""I see.  I was accidentally browsing the files in master, and saw that it still had an alpha version number so I thought it wasn't being updated correctly."""
10728,385957869,"b'The minimum version is 16.3.0 now, what version did the version comparisons make it into?  @rainersigwald '"
10728,386719053,"b""Will it bite net5 platform specific TFMs?  They will be something like `net5.0-ios14`, so there won't be a `+` character."""
10740,386766147,"b'Since `BundlePublishDirectory` runs before files are copied to the publish directory now, should it be renamed?'"
10666,389963705,"b""I'd suggest renaming this to `preferredLangEnvVarValue`"""
10907,395278454,"b""Would it make more sense just to check that there's nothing in the publish folder after running the PublishItemsOutputGroup target (but not Publish)?\r\n\r\nAlso you may be able to use the GetValuesCommand to gather the files from the output group in a list instead of having to write your own target to copy them and then check the contents."""
10981,397516472,b'Is there a change in behavior based on whether the reference assemblies are installed?  Is this expected?'
10981,397516827,"b""Let's use a property here instead of hardcoding `1.0.0` for the version number.  How about `MicrosoftNETFrameworkReferenceAssembliesLatestPackageVersion`?"""
10981,397521525,"b""I think we should probably also have this run before _CheckForInvalidConfigurationAndPlatform so the `PackageReference` item gets added during the normal build as well as for restore.  I don't think there's any hard requirement for this, but it feels more consistent.\r\n\r\nLet's also put the target behind a condition based on an `AutomaticallyUseReferenceAssemblyPackages` property which defaults to true, in case for some reason someone wants to opt out of this."""
10981,398211801,"b""VS does use design-time builds.  They would like to be able to restore based only on evaluation, but we add PackageReference and PackageDownload items in targets as a core part of the build for .NET Core, so it's not currently feasible for Sdk-style projects."""
11183,405019399,"b""I'd suggest a different property name here.  How about `_RuntimeIdentifierUsesAppHost`?\r\n\r\n"""
11181,406370778,"b""Shouldn't this just be `(!string.IsNullOrEmpty(environmentOverride))`, and then we don't need the try/catch further down?"""
11181,406428122,"b'From the linked doc issue, it sounded like the problem was that GetEnvironmentVariable was returning an empty string instead of null.\r\n\r\nSilently falling back to the installed SDK may not be what we want to do when there is actually an invalid value in this environment variable, perhaps due to a typo.'"
11213,406815363,"b""I think we might want to remove the Exists check.  If you've set the property to a nonexistent file, you probably want it to error instead of silently ignoring the property."""
11213,406816582,"b""We generally (or always, I think) don't need the ToolsVersion or xmlns attributes on the Project element.  I think we should try to avoid them so that we are showing examples of cleaner project files."""
11213,406817712,"b""Remove hardcoded path here :-).\r\n\r\nWhat I usually do now is to set the working directory of the command to the test directory, and then just use `/bl` without a path.  Probably we should try to remember to remove the binary logging from tests entirely before checking in, unless there's some reason we think we'll need to keep it."""
11213,406819977,"b'I would suggest trying to make this test match the scenario this feature was requested for more closely.  For example:\r\n\r\n- In the project file, set the `TargetFramework` to `netcoreapp3.0-<RuntimeIdentifier>`\r\n- In the custom .props, parse out the portions of the `TargetFramework` into `TargetFramework` and `RuntimeIdentifier`\r\n- Let the default `TargetFramework` parsing logic in the SDK parse out the ""stripped"" `TargetFramework`\r\n- Verify that `TargetFramework`, `TargetFrameworkIdentifier`, `TargetFrameworkVersion`, and `RuntimeIdentifier` properties are all set correctly.\r\n\r\nThere were other hoops the runtime team had to jump through to get everything to work, so it\'s possible that such a test won\'t work.  But I think the problems would be if you tried to restore and build, rather than just get the property values.'"
11213,406821467,"b""Note the comment at the top of this file:\r\n\r\n> Note that this file is only included when $(TargetFramework) is set and so we do not need to check that here.\r\n\r\nIs it OK to only import the custom TargetFramework parsing .targets when `TargetFramework` is set?  Or might there be scenarios where `TargetFramework` isn't set at all and you want your custom logic to set it?  @Anipik @ericstj"""
11213,406822354,"b'`CustomTargetFrameworkParsingTargets` seems like a pretty good name for this property, but does anyone have any other suggestions?  @rainersigwald @wli3 @Anipik @ericstj'"
11076,409212250,"b""It looks like we're not even using the [value that is returned](https://github.com/dotnet/sdk/blob/master/src/Layout/redist/targets/GetRuntimeInformation.targets#L6) in the `Rid` output parameter of the GetCurrentRuntimeInformation task.  So it looks like we actually can delete this implementation of `GetRuntimeIdentifier`."""
11242,410322906,"b'I think the way to do this is something like this:\r\n\r\n```xml\r\n<_ExistingReferenceAssembliesPackageReference Include=""@(PackageReference)"" Condition=""\'%(PackageReference.Identity)\' == \'Microsoft.NETFramework.ReferenceAssemblies\'""/>\r\n\r\n<PackageReference Include=""Microsoft.NETFramework.ReferenceAssemblies"" Version=""$(MicrosoftNETFrameworkReferenceAssembliesLatestPackageVersion)"" IsImplicitlyDefined=""true""\r\n                  Condition=""\'$(_FullFrameworkReferenceAssemblyPaths)\' == \'\' and \'$(_ExistingReferenceAssembliesPackageReference)\' == \'\'""/>\r\n```\r\n\r\nThat way you\'re filtering the items and checking if there are any that match instead of concatenating them all and doing a string search.'"
11357,412367767,"b""Looks like we have an error message here that isn't localized.  Can we fix that?\r\n\r\n(It can either be in this PR or we can file an issue to fix it later)."""
11317,412410253,"b'If you are calling this method from a `Theory`, then the different instances will still collide on the path.  The pattern we generally use for this is to also pass in an optional `identifier` parameter, which can be a concatenation of the `Theory` parameters.'"
11213,412422130,"b'We do have properties such as `CustomBeforeMicrosoftCommonProps`.\r\n\r\nHowever, I do think `BeforeTargetFrameworkInferenceTargets` or `CustomBeforeTargetFrameworkInferenceTargets` would be better for this property name.'"
11357,412423034,b'We use the `SdkError` task to support localization for errors.'
11213,412441157,"b""This is meant to be a public extension point.  It's mainly intended for the dotnet/runtime repo to use, but others could.\r\n\r\nI still lean somewhat towards the names that match the existing `BeforeXYZTargets` pattern."""
11451,416695841,b'We always read from the cache to make sure the cached and non-cached behavior are consistent.  So writing the metadata into the cache should be all that is necessary.'
11451,416701425,"b""Can we update the test, or add a test, to cover the case where you are calling multiple classes with the same name?  I think you'd need two aliases for that."""
11451,416702027,"b""Also I think it would be nice to cover the case where there are multiple aliases for a single assembly, if that's a supported scenario."""
11462,417541585,"b""Looks like this comment is out of date with the current code.  I don't see a _DepsPath property."""
11462,417545293,"b""I think it's better to write the assertion like this:\r\n\r\n```c#\r\npublishDepsFilePath.Should().Be(expectedDepsFilePath)\r\n```\r\n\r\nThat gives more diagnosable failure messages.\r\n\r\n(This also applies to the other assertions)"""
11462,417546319,b'I think you can remove the explicit restore commands.  The GetValuesCommand should restore by default for you.'
11502,418128485,b'Should this be walking the RuntimeIdentifier graph instead of checking what the RuntimeIdentifier starts with?'
11559,419818940,"b'If you use `TestProject` to create your test project, you can just use the `AdditionalProperties` property to set the repository URL MSBuild properties instead of having to call `WithProjectChanges` and create XML elements.'"
11358,422384281,"b'This seems like a typo: ""Filters and project items""'"
11352,422399023,b'Should we also cover the case where the property is implicitly vs explicitly set to false?'
11352,422400176,"b'Both of these assertions are the same.  Was one of them supposed to check for `childProject.Name`?\r\n\r\nAlso, if so, I think you can write it more simply like this (the syntax may be slightly off):\r\n\r\n```c#\r\nvaluesResult.Should().BeEquivalentTo(parentProject.Name, childProject.Name);\r\n```'"
11352,422400901,b'You can add a project reference via the `ReferencedProjects` property of `TestProject` instead of manipulating the XML as done here.'
11610,423189026,"b""You first need to run the build script in order to produce the sdk-build-env.bat file.  The reason to open VS this way is to use the stage 0 SDK from the `.dotnet` folder.  It's not technically necessary if you have a globally-installed version of the .NET SDK with a high enough version."""
11358,423798689,b'```suggestion\r\n    <!-- Setting this property to true restores pre-16.7 behaviour of ResolvePackageDependencies to produce\r\n```'
11623,424635965,"b""Can we get rid of this part of the clause: `'$(RuntimeIdentifier)' != ''`?  It should be OK to call `StartsWith` on property that isn't set, and that will make it easier to understand the condition."""
11635,427024152,"b'I think for Visual Basic, you need to separate the constants with commas instead of semicolons (also applies elsewhere).'"
11635,427024927,"b'This line is confusing to me.  I think `$(VersionlessImplicitFrameworkDefine);$(_FrameworkIdentifierForImplicitDefine)` means it will be `NETCOREAPP;NET`, but I think it would be more understandable if it was just hard-coded like that rather than using two property names that seem similar.'"
11635,427026100,"b""`TargetPlatformVersion` will probably not be set yet if it's implicit (ie the `TargetFramework` doesn't include it, such as `net5.0-ios`).  So this probably needs to go in a Target.\r\n\r\nAdditionally, we are also supposed to define the constants for previous OS versions, like we're doing for the target framework versions.  This would require a list of the valid OS versions, which we don't currently have.  I think what we should do for now is define how these should be provided, and have the workloads supply that list."""
11635,427026265,"b""`'$(TargetFrameworkIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp'` seems redundant (the first clause shouldn't be necessary)."""
11635,427037271,"b""Use the MSBuild version comparison intrinsic functions for this (and I don't think you need to check for empty)."""
11635,427037660,b'Use version comparison intrinsics for these comparisons.  Also I think it should be comparing against TargetFrameworkVersion instead of _FrameworkVersionNumberForImplicitDefine.'
11635,427038839,"b'@rainersigwald, should this target (which adds to `DefineConstants`) be `BeforeTargets=""Build""`, or something else?'"
11635,427521247,"b""It's fine to keep it separate, but make sure we have an issue tracking the outstanding work."""
11635,427523150,"b""Check to make sure I'm right about it needing to be commas.  If so, try to look at how we handle it for other implicitly defined compilation constants.\r\n\r\nA good way to handle it might be to create an `_ImplicitDefineConstant` item for each constant we want to add, and then have a target that runs that adds those to the `DefineConstants` property with the right syntax."""
11700,428309978,"b""I don't think we should include preview versions here.  Just use `16.7.0` for the value."""
11700,428312161,"b""I think these attributes should never skip if running on .NET Core (if we don't have the required MSBuild version in the .NET SDK, then we wouldn't be writing the test at all).  If running on full framework, then we need to shell out to `msbuild` instead of `dotnet msbuild` to get the full framework MSBuild version.  Also, make sure that we handle 3 versus 4 part version numbers correctly (where the required version is 3 parts and the msbuild version is 4 parts)."""
11717,429003747,"b""I'd suggest setting `GeneratePathProperty` to true on the PackageReference, then you can use `$(PkgMicrosoft_CodeAnalysis_NetAnalyzers)` instead of `$(NuGetPackageRoot)/microsoft.codeanalysis.netanalyzers/$(MicrosoftCodeAnalysisNetAnalyzersVersion)`"""
11717,429004700,"b'Project imports are already relative to the current path, so I think this should just be `<Import Project=""..\\analyzers\\build\\Microsoft.CodeAnalysis.NetAnalyzers.props"" Condition=""\'$(MSBuildProjectExtension)\' == \'.csproj\'"" />` (and similar for the next one).'"
11717,429004996,"b'Actually, it looks like these are both importing the same file, so I\'d collapse them:\r\n\r\n```xml\r\n<Import Project=""..\\analyzers\\build\\Microsoft.CodeAnalysis.NetAnalyzers.props""\r\n    Condition=""\'$(MSBuildProjectExtension)\' == \'.csproj\' Or \'$(MSBuildProjectExtension)\' == \'.vbproj\'"" />\r\n```'"
11717,429333678,"b'I would do this differently.  I would just have an `EnableNETAnalyzers` property which defaults to true if the target framework is .NET 5 or higher.  `EnableNETAnalyzers` would be the user-facing property.  If you want to capture telemetry about whether people have explicitly opted into or out of the analyzers, you can capture the value of `EnableNETAnalyzers` into another property before you set the default value if it is empty, and send that other value to telemetry.\r\n\r\nFor the version comparison:\r\n\r\n- Use intrinsic MSBuild version comparison functions: https://github.com/microsoft/msbuild/pull/4911\r\n- Also check that the `TargetFrameworkIdentifier` is `.NETCore`.'"
11717,429371905,"b""This is part of the build of the SDK, not something we ship, so we don't need to (and shouldn't) add localization for this."""
11805,432150091,b'You can use `WithTargetFramework` to change the TargetFramework without having to explicitly modify the XML.'
11805,432151071,b'```suggestion\r\n        public void It_fails_to_produce_winmds_for_net5_0_or_newer()\r\n```'
11805,432151397,b'```suggestion\r\n        public void It_fails_when_referencing_winmds_for_net5_0_or_newer()\r\n```'
11797,432601847,b'Preferrably this should use `net5.0` for the TargetFramework.'
11797,432604702,"b'Consider the following to avoid repeating the same `Select` clause:\r\n\r\n```suggestion\r\n                IsSelfContained ? \r\n                    RuntimePackAssets.Where(item => IsSingleFile ? !item.GetMetadata(MetadataKeys.DropFromSingleFile).Equals(""true"") : true)\r\n                                     .Select(item => RuntimePackAssetInfo.FromItem(item)) : \r\n                    Enumerable.Empty<RuntimePackAssetInfo>();\r\n```'"
11797,432610071,"b""What's the reason for having a separate `_IsSingleFilePublish` property rather than using `PublishSingleFile` directly?"""
11635,433530719,"b""NIT: to me it's more readable if the comparison is (in pseudocode) `Version >= 5.0` instead of `5.0 <= Version`."""
11635,433531975,b'Same comment about the order of the version comparison and readability.'
11635,433532869,"b""Does VB use `FinalDefineConstants` instead of `DefineConstants`?  I guess you have to supply each constant with a value in that case, so you're using `-1`?"""
11635,433534216,"b""This is a problem we didn't realize: The common targets set the `TargetPlatformIdentifier` to `Windows` if it's not already set.  This is not what we planned for, so we'll have to figure out how to address this."""
11717,434800218,"b'```suggestion\r\n  <ItemGroup Condition=""$(EnableNETAnalyzers)"">\r\n```\r\n\r\nExtra slash is causing syntax error:\r\n\r\n> error MSB4024: The imported project file ""/datadisks/disk1/workspace/_work/1/s/artifacts/bin/redist/Release/dotnet/sdk/5.0.100-ci/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.VisualBasic.Analyzers.targets"" could not be loaded. The \'Project\' start tag on line 12 position 2 does not match the end tag of \'ItemGroup\'. Line 28, position 5'"
11717,434801292,"b""Most of the logic in this file is the same as in the VisualBasic file.  Should they just be merged into one file and have conditions on the `Analyzer` items?\r\n\r\nAlso, repeating my comment from earlier:\r\n\r\n> In the analyzer layout under Microsoft.NET.Sdk/analyzers, there are cs and vb folders, and both have a Microsoft.CodeAnalysis.NetAnalyzers.dll file, as well as all its localized resources, which add up to close to 5 MB. Can we use a layout where this isn't duplicated across two folders for the different languages? Could we just put both the VB and C# analyzer DLLs in the same folder?"""
11717,435005071,"b'Yeah I was saying that we should try not to duplicate the same resources across C# and VB, which is what I think as happening.  We do still need them once though :-)'"
11717,435005805,"b""I would put an `EnableNETAnalyzers` condition on the `ItemGroup` so you don't have to repeat that clause for each item."""
11717,435006036,b'It looks like this will probably miss the localized resources for the VB analyzers.'
11717,435006261,"b""GetFullPath isn't necessary here."""
12073,440453957,b'Rename this to a less generic name.  We are using the generic `AssemblyMetadataAttribute` to store a specific piece of data (the repository URL).\r\n\r\nI thingk `GenerateRepositoryUrlAttribute` is probably a good name.'
12073,440454701,b'It would be better to check that there is an `AssemblyMetadataAttribute` with the expected `Key` and `Value`.'
12084,441216504,b'I think we also wont to set `UseOSWinMdReferences` to false here: https://github.com/microsoft/msbuild/pull/5391#discussion_r434203303'
12084,441217033,"b""I think this should just be `16.7`.  VS 16.7 hasn't released yet, and when it does I think the MSBuild version will be 16.7.0.something"""
12084,441217322,b'Or did microsoft/msbuild#5391 not go into VS 16.7?  In that case I think this value should be `16.8`.'
12106,442565201,"b'To avoid having to sync checkins between the wpf and sdk repos, you could update this .props file to set a `WindowsDesktopPropsImported` property to true.  Then when adding this import you could condition it on that property not being set.\r\n\r\nSeparately, what I would like to do eventually is to move the implicit WindowsDesktop FrameworkReferences to Windows-specific props in the SDK repo (which would eventually go in a Windows workload).  The rest of the logic in the WindowsDesktop props/targets is specific to WPF, so those targets could be renamed to Microsoft.WPF.props/.targets or similar.'"
12106,442566021,"b""I'm not sure TargetFrameworkInference is the best place for this check.  I would probably just put it in Microsoft.NET.Sdk.targets."""
12202,447901679,"b""What's the reason for trimming off the `.0`?  Won't this mean that the `TargetFrameworkVersion` will be `5` instead of `5.0` for a `TargetFramework` of `net5.0`?  I would hope that they're essentially equivalent, but `5.0` seems preferrable.\r\n\r\nIf we do want to trim, then I'd recommend a comment before these two lines saying that they're trimming trailing `.0` from the version."""
12202,447903936,"b""Do we need to check that there's a dash in the `TargetFramework`?  I would expect the NuGet methods to return empty if there's no dash, so we could just always call them.\r\n\r\nI would also consider putting this parsing in the same PropertyGroup as parses the target framework identifier and version.  I think it's probably OK to try to get the platform properties from the TargetFramework based on whether the `TargetFrameworkIdentifier` or `TargetFrameworkVersion` were unset."""
12202,447909703,"b""I don't think we need this type of check here.  It's the responsibility of the platform targets (generally in the workload, except initially for Windows) to check to see if the platform and platform version targeted are compatible with the version of .NET targeted.\r\n\r\nWe do need to error if a platform is specified that is not supported (perhaps because it's a typo).  The issue tracking this is #11232 (and could be addressed in this PR)."""
12202,447912377,"b'Use a ""real"" Windows 10 version number such as 10.0.19041.'"
12202,447913053,b'Add a test that `net5.0` results in an empty target platform identifier and version (or is that already covered elsewhere?).'
12202,447919509,"b""I'm not sure we need to be covering android/ios/etc currently.  With #11232, they should fail to build without the right workload installed."""
12202,447920471,"b""I think we should use case-sensitive comparison here (which will require us to normalize the casing of TargetPlatformIdentifier, which I've added to #11233).\r\n\r\nIf we do so, then we should also add test cases for `net5.0-Windows` and `net5.0-WINDOWS`."""
12202,447923833,"b'If we do case-sensitive comparisons, you can use `ShouldBeEquivalentTo` to simplify the assertions down to one line:\r\n\r\n```c#\r\ngetValuesCommand.GetValues().ShouldBeEquivalentTo(new [] { expected } );\r\n```'"
12124,447952498,"b""I'm not following what this logic is supposed to be doing with `TargetPlatformMinVersion`.  However, I think it should not be based on that property at all.  It should simply define constants for all supported versions less than or equal to the `TargetPlatformVersion`, pretty much the same way that it works for the `TargetFrameworkVersion`.\r\n\r\nIE, I think that [this section of the spec](https://github.com/dotnet/designs/blob/master/accepted/2020/net5/net5.md#preprocessor-symbols) is only talking about `TargetPlatformVersion`, not the minimum version. @terrajobst @mhutch """
12232,447959015,b'Any reason not to have this (and the next method) be a bool local variable instead of a method?'
12232,447961672,"b""I'd refactor this method to something like this:\r\n\r\n```c#\r\nif (kfr.Framework != TargetFrameworkIdentifier ||\r\n    Normalize(kfr.TargetFrameworkVersion) != normalizedTargetFrameworkVersion)\r\n{\r\n    return false;\r\n}\r\n\r\nif (string.IsNullOrEmpty(knownFrameworkReference.TargetFramework.Platform) &&\r\n     string.IsNullOrEmpty(knownFrameworkReference.TargetFramework.PlatformVersion))\r\n{\r\n    // Do Platform / PlatformVersion comparison, return false if doesn't match\r\n}\r\nreturn true;\r\n```\r\n\r\nThat way you don't repeat the comparison of the target framework identifier and version."""
12232,447970852,b'Rename to RuntimePackAlwaysCopyLocal\r\n'
12232,447977220,b'I would expect you to need to set the RuntimeIdentifier in order to have the base runtime pack downloaded.  Why is that not the case?'
12232,447977949,"b'I would suggest having a FrameworkReference to Microsoft.NETCore.App and a corresponding KnownFrameworkReference, and validating that it resolves the targeting pack but not the runtime pack for that FrameworkReference.'"
12232,448022420,"b'I think this is the right logic, and easier to understand.\r\n\r\n```suggestion\r\n            bool ShouldIncludeRuntimeAsset(ITaskItem item)\r\n            {\r\n                if (IsSelfContained)\r\n                {\r\n                    if (!IsSingleFile || !item.GetMetadata(MetadataKeys.DropFromSingleFile).Equals(""true""))\r\n                    {\r\n                        return true;\r\n                    }\r\n                }\r\n                else if (item.HasMetadataValue(MetadataKeys.RuntimeCopyLocal, ""true""))\r\n                {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n```'"
12232,448022555,b'```suggestion\r\n                RuntimePackAssets.Where(ShouldIncludeRuntimeAsset)\r\n                                 .Select(RuntimePackAssetInfo.FromItem);\r\n```'
12232,448023197,b'Nit: rename this to `KnownFrameworkReferenceAppliesToTargetFramework`'
12232,448024127,b'Nit: Rename to RuntimeRequiredByDeployment (and probably change to just a local variable instead of a method)'
12232,448026127,"b""Use MSBuild intrinsic version comparison functions for these version comparisons.\r\n\r\nAlso it would be good to apply the [workload .props pattern](https://github.com/dotnet/designs/blob/master/accepted/2020/workloads/workload-resolvers.md#workload-props-files) here, where we have a .targets file that's conditionally imported based on the TargetPlatformIdentifier, and it sets a single internal property which controls whether the FrameworkReference is included in the props file.  That doesn't necessarily need to be done in this PR though."""
12314,449196759,b'Is there a reason to make this conditional on the TargetFramework?  I would just always include it unless the property is set to opt out.'
12314,449197977,"b'I\'d suggest the following.  It follows the pattern of `NetCoreTargetingPackRoot` from the bundled versions file.  It will end up being the normalized path, and allows you to set the path to something else if you want to.\r\n\r\nIf you do this, you should re-test to make sure NuGet is OK with the trailing slash.\r\n\r\n```suggestion\r\n    <_WorkloadLibraryPacksFolder Condition=""\'$(_WorkloadLibraryPacksFolder)\' == \'\'"">$([MSBuild]::EnsureTrailingSlash(\'$(NetCoreRoot)\'))library-packs</_WorkloadLibraryPacksFolder>\r\n```'"
12318,450434853,"b'You can create multiple `TestProjects`, add them to the `ReferencedProjects` of others as appropriate, and then create them all at once with one `CreateTestProject` call. '"
12318,450447867,"b""It makes it a bit more complicated.  There's an overload of `WithProjectChanges` that takes an `Action<string, XDocument>`.  The string you get passed will be the path to the project file, so you can write conditional logic to apply the right changes to the right file.  At least, that's how I think it's supposed to work."""
12085,450540408,"b""`GroupBy` is lazy, so this method is doing the grouping (and filtering) three times.  I'd do this to avoid this:\r\n\r\n```c#\r\nvar groupsWithDuplicates = Items.GroupBy(item => item.GetMetadata(MetadataName))\r\n                                .Where(g => g.Count() > 1)\r\n                                .ToList();\r\n```"""
12085,450540900,"b""The `ToArray()` isn't necessary, and probably causes unneccesary allocations.  You should just be able to do `SelectMany(g => g)`."""
12085,450541695,b'So `ResolvedFileToPublish` has precedence over `_ResolvedCopyLocalPublishAssets`?  Why is that?  What do each of these items mean?'
12085,450541967,"b'`ContinueOnError=""false""` seems unnecessary here.  That\'s the default behavior.'"
12085,450542641,"b""I think this error message needs to include the duplicate paths.  Otherwise it's going to be frustrating when you run into it, it doesn't give you any information to help you fix the problem.\r\n\r\n(Unfortunately I don't think most people know about using .binlogs to investigate things like this)."""
12085,450545522,"b'Typo:\r\n```suggestion\r\n                Name = ""ConflictingFilePublish"",\r\n```'"
12085,450546493,"b'I assume that these test cases are cases that would have had duplicate files published before this fix.  It would be nice to explain why that was the case, in the name of the test and/or comments.  '"
12106,451184706,"b""Since this is only importing the WindowsDesktop targets if `UseWPF` or `UseWindowsForms` are true, the default `PlatformVersion` logic that [sarah added](https://github.com/dotnet/wpf/pull/3177/files) won't apply to projects targeting Windows but not using WPF or Windows Forms.\r\n\r\nI think what we should do is just move that logic into the dotnet/sdk repo.  Can that be done as part of this PR? (We'd delete the logic from the wpf repo later).\r\n\r\nNit: Can you wrap the condition onto multiple lines for readability?"""
11499,451665792,"b'Per our discussion, remove the `.ToLower()`'"
11499,451787319,"b""I'd suggest setting the TargetPlatformVersion to 14.0 for this test, instead of leaving it unset."""
12202,451834053,b'Does this need to be escaped?'
12386,453048807,"b""This isn't strictly true.  You should be able to set the `TargetPlatformIdentifier` explicitly.  I would reword to something like:\r\n\r\n> The target platform must be set to Windows (usually by including '-windows' in the TargetFramework property) when using Windows Forms or WPF, or referencing projects or packages that do so."""
12386,453049898,"b'I don\'t think we call it ""referencing"" when you use an MSBuild SDK.  Suggested rewording:\r\n\r\n> It is no longer necessary to use the Microsoft.NET.Sdk.WindowsDesktop SDK.  Microsoft.NET.Sdk can be used instead.'"
12386,453050841,"b""@rainersigwald Does this look like the right way to check if there is a `TransitiveFrameworkReference` item with `Microsoft.WindowsDesktop.App` as the ItemSpec?  Isn't `Contains` here actually the method on `String`?"""
12386,453051724,"b'I think you can drop the check that the TargetPlatformIdentifier is Windows, because it\'s actually going to be generating an error if that\'s not the case.\r\n\r\n```suggestion\r\n        Condition=""\'$(TargetFrameworkIdentifier)\' == \'.NETCoreApp\' and $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), \'5.0\')) and (\'$(UseWindowsForms)\' == \'true\' or \'$(UseWPF)\' == \'true\')"">\r\n```'"
12386,453052106,"b'I think you can drop the UseWindowsForms and UseWPF checks here as you covered them in the previous condition.\r\n\r\n```suggestion\r\n    <NETSdkError Condition="" \'$(TargetPlatformIdentifier)\' != \'Windows\'""\r\n```'"
12386,453053268,"b""Looking at the WindowsDesktop Sdk.props file, it looks like the MicrosoftWindowsDesktopSdkPath property is a test hook.  It would probably be better to rely on something else.  To do so we might need to add a property such as MicrosoftNETSdkWindowsDesktopImported to the WindowsDesktop Sdk.props.\r\n\r\nI'm fine with merging this as is for now though."""
12386,453053686,b'Pass `propertyName` as the optional identifier parameter to `CreateTestProject` so that the different instances of the test will use different project folders.'
12386,453055149,"b""Once we have platform support in the TargetFramework from NuGet, then I would expect Project A to use `net5.0-windows` as a TargetFramework.  In that case, we'd get an error from NuGet that the target frameworks aren't compatible, not the NETSDK1135 error.\r\n\r\nThe scenario for the NETSDK1135 error is when you are referencing a .NET Core 3.x project that has UseWindowsForms or UseWPF set to true.  That's the case where you'll get a WindowsDesktop transitive framework reference, triggering the error.  So I think you should update the test to test that."""
12386,453056548,"b""Until we have the TargetPlatform support in the TargetFramework, I think we should add logic that will set the TargetPlatformIdentifier to Windows if UseWindowsForms or UseWPF is true.  Then we won't break those projects, requiring them to set the TargetPlatformIdentifier explicitly, when what we want them to do eventually is to update the TargetFramework to include `-windows`."""
12386,453056658,"b""Same here, let's not work around this in tests."""
12386,453056983,"b'This ""requires MSBuild version"" logic is now in 4 different attributes, right?  Let\'s factor it out into a static method they can all call.'"
12430,453111713,"b""Can we avoid setting the TargetPlatformVersion in the test?  Didn't we already add the logic to set it by default to dotnet/sdk?"""
12430,453112220,"b""I don't think we should transform the OutputType from Exe to WinExe just because a project targets `net5.0-windows`.  It might be a console app that uses WinRT APIs.  I think we should only automatically use WinExe when the project uses a UI framework, ie UseWindowsForms or UseWPF (or in the future something for WinUI) is set."""
12430,453112679,"b""What scenario is this test supposed to cover?  And doesn't the TargetPlatformIdentifier need to be set to Windows somehow?"""
12451,454004331,"b""Do we need to run before Restore and CollectPackageReferences?  I don't think so."""
12386,454622098,b'Something wrong happened here and it lost a bunch of the translations for this language.  I would try just reverting the change and then building to see if it fixes it.'
12386,454626987,"b'Does this work if you use `StartsWith` instead of `Contains`?  That would be more accurate I think.\r\n\r\nAlso, I think this might generate multiple error messages if you have transitive references to different of the WindowsDesktop ""profiles"".  Can you test to see what happens there?  If it does generate multiple messages, you could fix it by doing something like the following:\r\n\r\n```xml\r\n<_WindowsDesktopTransitiveFrameworkReference Include=""@(TransitiveFrameworkReference)""\r\n                 Condition=""\'%(Identity)\' == \'Microsoft.WindowsDesktop.App\' Or\r\n                            \'%(Identity)\' == \'Microsoft.WindowsDesktop.App.WPF\' Or\r\n                            \'%(Identity)\' == \'Microsoft.WindowsDesktop.WindowsForms\'"" />\r\n<NetSdkError Condition=""\'@(_WindowsDesktopTransitiveFrameworkReference)\' != \'\'""\r\n                 ResourceName=""WindowsDesktopTargetPlatformMustBeWindows"" />\r\n```'"
12386,454664647,"b""I think we should still set `_EnableDefaultWindowsPlatform` to false in all cases.  We don't want the legacy MSBuild logic which sets it to Windows 7.0 to be active.\r\n\r\nThen Windows Forms or WPF projects will get the `WindowsDesktopTargetPlatformMustBeWindows` error you're adding if they don't set the target platform to Windows.\r\n\r\nWe can temporarily set the TargetPlatformIdentifier to Windows here if `UseWPF` or `UseWindowsForms` is true, until we have the TargetFramework support for `net5.0-windows` and the Windows Forms / WPF templates are updated.\r\n\r\nDoes that make sense?"""
12386,454669291,"b'If you always set `_EnableDefaultWindowsPlatform` to false, then you can remove this line I think.'"
12030,455381459,"b'I think you also want to check that `TargetFramework` is set, so that errors generated in the outer build don\'t get `TargetFramework:` (with an empty value for the target framework) added.\r\n\r\n```suggestion\r\n  <ItemGroup Condition=""\'$(TargetFrameworks)\' != \'\' And \'$(TargetFramework)\' != \'\'"">\r\n```'"
12202,456582209,"b""Do we need to set these?  If so, don't they need to be set if the TargetPlatformVersion is specified?  IE what will the `TargetPlatformMoniker` and `TargetPlatformDisplayName` be if the `TargetFramework` is `net5.0-windows10.0.19041`?"""
12202,456598524,"b""Makes sense.  I'd suggest explaining that in a comment here."""
12547,457708030,b'I think we should make this error message (and the logic to raise it) generic to different target platforms:\r\n\r\n> NETSDK1138: {0} is not a valid TargetPlatformVersion for {1}.  Valid versions include: \\r\\n{2}\r\n\r\nWhere {2} is a newline-separated list of the valid target platform versions\r\n\r\nAlso this will need to change to NETSDK1139 or later once #12202 is merged.'
12547,457709737,"b""I think we should make this logic generic for all target platforms.  Follow the same pattern as we do for checking the `TargetPlatformIdentifier` in #12202.  Move the target out of this file, and generate the error if a `TargetPlatformVersionSupported` property isn't set to true.  Set that property to true (also in the generic targets) if it isn't already set and TargetPlatformVersion matches any of the `SupportedTargetPlatform` items."""
12547,457710392,"b'This file should be Windows-specific.  The iOS and Android supported versions would be included in props/targets files in the corresponding workloads.  (Once Windows is a separate workload, this file would move into that workload also.)'"
12547,458375184,"b""I think these should be joined by newlines, because comma isn't the right separator character for all locales.  Confirm with @wli3, if he thinks this is OK then go ahead with it."""
12547,458376447,"b'How does this interact with the invalid platform error?  If you have an invalid platform and specify a TargetPlatformVersion, then we should only give you the invalid platform error, and not the invalid platform version error.  Can you add a test case covering this?'"
12579,458965183,"b""The targetFrameworks parameter isn't actually being used in the test, except to change the name of the project.  Did you intend to use it to set the TestProject TargetFrameworks on line 31?"""
12579,458966390,"b""Probably it would be better to check that there is (or isn't) a line with both NETSDK1138 and the target framework you're interested in.  That should work with localization."""
12579,458968054,"b""I don't think there's any reason to create a separate .props file to list the EOL versions.  Just put it in Microsoft.NET.EolTargetFrameworks.targets."""
12579,458968416,"b""I'd just rename this to _EolNetCoreTargetFrameworkVersions"""
12612,459676487,"b'What does NuGet do when you the requested versionPartCount is less than the number of non-zero version parts?  @zkat @nkolev92 \r\n\r\nI think maybe the correct behavior would be to interpret versionPartCount as a minimum, but not to truncate any real versions parts.  If that were the behavior, then we could just pass in 2 as the versionPartCount here and not worry about trimming a trailing `.0`.'"
12612,459677292,"b'I may have previously left the same feedback, but is there a reason to escape this value?'"
12612,459678053,"b'So is this test failing now?  If so, it seems like we should have it marked with a Skip.  If not, does it really need o TODO?'"
12612,459679099,"b'The expected platform should not be set to Windows in this case, right?  Or if it currently is set to Windows, then I think we should take the fix from Master to only set it to Windows for Windows Forms / WPF apps, and apply that to preview 8 also.'"
12612,459698360,"b""No, it's not blocking.  It looks like I had left in a fragment from before I reworded.  I've now deleted it."""
12422,461947015,"b""> if the user has set analysis level to 5 or higher\r\n\r\nIt's not necessarily that the user has explicitly set the analysis level, right?  It could also be implicit based on the TargetFramework, right?"""
12702,462605602,"b'We shouldn\'t be parsing the TargetFramework here.  We should try to write our code so that we\'re never parsing the target framework except in TargetFrameworkInference.targets.  See https://github.com/NuGet/Home/issues/5154\r\n\r\nInstead, this code should use the TargetFrameworkMoniker.  Probably we can update the task so that it no longer takes a `TargetFramework` argument.\r\n\r\nI also noticed that the following around line 128:\r\n\r\n```c#\r\n                ProjectContext projectContext = lockFile.CreateProjectContext(\r\n                    NuGetUtils.ParseFrameworkName(TargetFrameworkMoniker),\r\n                    RuntimeIdentifier,\r\n                    PlatformLibraryName,\r\n                    RuntimeFrameworks,\r\n                    IsSelfContained);\r\n```\r\n\r\nIt\'s not directly related to this issue, but I don\'t think this is going to work with projects with a TargetFramework such as net5.0-windows, since it won\'t be passing the ""-windows"" portion in to locate the section of the assets file.  This may be happening in other places in our code too.'"
12579,462756485,"b""We have a ton of tests that work like this, I'm not sure if individually they're especially slow.  But I also think that one or two TFMs is enough for coverage here."""
12106,465516558,"b""@Nirmal4G I don't know that we considered it."""
12763,465517881,"b""I'd suggest prefixing this with an underscore (ie `_ValidTargetPlatformVersion`) to indicate that it's an internal / temporary property."""
12763,465519686,"b""We do normalize the casing to `Windows`.  That said, if a test isn't meant to be testing case normalization, it should probably use `Windows` if the platform is specified via the `TargetPlatformIdentifier` property, and `-windows` if it's specified in the `TargetFramework`, as those are the standard casings in each case."""
12763,465520059,b'I would also add to this test a check that the `TargetPlatformVersion` gets the trailing `.0` trimmed off.'
12633,465960961,b'Would this property name make more sense as `FailedToResolveSDKSpecifiedInGlobalJson`?'
12633,465961907,"b""Can we avoid object creation if we're not going to use these collections?  IE initialize them to `null` and then create them when we want to use them?  That should help reduce memory usage."""
12633,465963100,"b""Perf: I'd suggest checking if the `minimumSdkMajorVersion` is zero here first, and avoid the string splitting and parsing if it is."""
12633,465967615,"b""Add a comment here for why we need version 5 or higher (I assume it's because we want to make sure we have an SDK that has the target that will generate the build error that we failed to resolve the SDK from global.json)."""
12633,465971221,"b""Does this target run during design-time build?  I think not, but can you make sure we don't prevent resolving framework references and NuGet packages so there's a decent intellisense experience."""
12633,465974666,"b""Instead of creating these properties specifically, could you create a global.json pointing to an invalid version?  Then you could also have to variants of the test, one with `BuildingInsideVisualStudio` true, and one false, and test the different behaviors.\r\n\r\nThis would be a full framework only test, since the resolver isn't used for .NET Core MSBuild.  And I'm not sure if we hook up the SDKResolver for full framework tests or not, so it might not easily be possible.  But if the SDKResolver already is hooked up, I'd go ahead and try to make the change."""
12702,465987468,"b'The `TargetFrameworkMoniker` is in a different format than what we want to write to the runtimeconfig, but yes, we should be able to in all cases parse the `TargetFrameworkMoniker` and then get the NuGet short name version of it to write to the runtimeconfig.'"
12633,466051707,"b""There are targets which gather the references to pass to the compiler for intellisense and other tooling.  We don't want to prevent those targets from running successfully.  \r\n\r\nI think that this target probably isn't run for the design time build, but check to make sure that when the global.json resolution fails, that in VS you can add a PackageReference and get Intellisense for APIs from the package as well as from .NET Core.\r\n\r\nIf the target is run, then we can avoid the check in design time builds, something like this: https://github.com/dotnet/sdk/blob/9b6505ef20113424d1f694463afa799438451a1b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets#L312-L316\r\n\r\n"""
12633,466053772,"b""Now I'm remembering more.  There's not a good test hook for adding an SDK resolver.  That prevents us from testing the MSBuild SDK resolver in end-to-end scenarios, and will also prevent us from testing the workload resolver on full framework.\r\n\r\nI think as a follow-up, we should try to add a test hook in MSBuild for this.  IE when looking for SDK resolvers, if an MSBUILDADDITIONALSDKRESOLVERSFOLDER environment variable is specified, then we should look there for SDK resolvers in addition to the SdkResolvers folder in the MSBuild bin directory.  If there are folder names with the same name in both paths, the one from the test hook should override the built-in one (so we can test changes to a resolver that ships in MSBuild).\r\n\r\nCould you file an MSBuild issue to add the test hook, and and SDK issue to add end-to-end tests for the global.json resolution once that's done?"""
12702,466102535,b'Removing this parameter will fail when the .targets try to pass it to the task: https://github.com/dotnet/sdk/blob/ee31a03ce4b6d58d6fca1505eced1f0f5e73bfd9/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L292'
12789,466578502,"b""```suggestion\r\n    <!-- Import winfx targets when we're targeting .NETFramework and not importing the newer WindowsDesktop targets via `UseWPF`. -->\r\n```"""
12827,467199614,b'Project imports should already be relative to the current file.  Was something failing without this change?'
12827,467200025,"b""A `GetValuesCommand` is for reading a property or item from the build.  It doesn't look like you're doing that here.  Should this be `BuildCommand` instead?"""
12827,467200319,b'Generally the way we do this is `buildResult.Should().Pass()`.'
12859,468249807,b'Spelling / capitalization nit:\r\n\r\n```suggestion\r\n    public class GivenThatWeWantToBuildAP2PReferenceWithTargetPlatform : SdkTest\r\n```'
12884,469314621,"b""I'm sure the API will change."""
12880,469616308,b'```suggestion\r\n## Run tests from the command line\r\n```'
12880,469616576,"b""I typically do something like `dotnet run -method NameSpace.Class.TestMethod` instead.  But I'm fine with doc'ing it this way."""
12897,470156396,b'We should generally avoid generic catch blocks like this.  What exception are we expecting?'
12897,470162791,"b""@zkat @nkolev92 What kind of impact will this have?\r\n\r\nAs a result of https://github.com/NuGet/NuGet.Client/pull/3548, NuGet restore now fails when you have a (singular) `TargetFramework` property with a semicolon in it, with the message:\r\n\r\n> F:\\workspace_work\\1\\s\\artifacts\\bin\\redist\\Debug\\dotnet\\sdk\\5.0.100-ci\\NuGet.targets(128,5): error : Invalid restore input. Invalid target framework 'unsupported'.\r\n\r\nSo now we will run our target to check for that case before restore, so we generate a better error message.\r\n\r\nWill this cause problems for scenarios where restore could succeed, or partially succeed when there was an invalid TargetFramework?  What about VS restore, which doesn't even run the Restore target?\r\n\r\n@clairernovotny, the comment in the updated test seems to indicate that MSBuild.Sdk.Extras might be impacted by this.  Can you comment on that?"""
12897,470203213,b'@clairernovotny https://github.com/dotnet/sdk/pull/12897/files#diff-afae3e8319c39f94ba88319480ed1917'
12933,471682496,b'Typo: band -> bond?'
12933,472356267,b'Typo: bond -> band'
12933,472357239,b'Suggested rename: `DirectoryIsSameVersionBandAsSDK`'
12933,472373901,"b'What is the behavior supposed to be for workloads that are not installed?  The template packs would be listed in the manifest, but the packages would not be found on disk.  Should this method be filtering them out?'"
12933,472495834,"b""In the case of resolving an SDK, we don't want the manifest reader to do the filtering.  The SDK resolver filters if the SDK pack is not installed, and adds the items that tell the build to fail and VS that the workload is required to build the project."""
12872,474041158,"b'I would add a comment here explaining what these items are for, preferably linking to a spec.'"
12872,474041741,"b'Since we renamed the `SupportedTargetPlatform` item to `SupportedPlatform`, we probably want to rename this file as well.'"
12872,474043140,"b""I'd add a comment here about how these items are used, including the name of the Target that processes them."""
13093,476605980,b'Oops! Leftover debugging code.'
13093,478570830,"b'It should be the raw `TargetFramework` value from the project.  So generally `net5.0-windows`.  It\'s the ""alias"".'"
13093,478572146,"b""Yes, I made this code change in response to test failures in `DesignTimeBuildTests`.\r\n\r\nThe scenario is when we are doing a design-time build after there has been a change to the project file.  In that case, the assets file doesn't necessarily match the information in the project file.  In that case we shouldn't save the result of ResolvePackageAssets to the cache.  This logic has been in there for a while, it just needed updating with the TargetFramework changes."""
13093,478574229,"b""We want to key our assets file lookups off of the (potentially aliased) `TargetFramework`.  So if someone uses custom logic to multi-target between `net5.0-x86` and `net5.0-x64`, there will be different assets file sections for each of those even though they both have the same TFM and TPM.  (Note that I don't think this works end-to-end yet, but this future-proofs our logic)."""
13272,480538257,"b""Ugh.  This is a side effect I didn't consider.  I think we probably want these to be based on the 3 part version if the 4th part is 0.\r\n\r\n@terrajobst thoughts?"""
13272,480540709,"b""Shouldn't `targetPlatformVersion` be an actual value instead of an empty string?"""
13211,481453670,"b""Consider only copying an XML file that points to the output path instead of copying all the files.\r\n\r\nThat's what I did for my WIP workload resolver: https://github.com/dsplaisted/sdk/blob/workload-resolvers/src/Resolvers/Microsoft.NET.Sdk.WorkloadResolver/Microsoft.NET.Sdk.WorkloadResolver.csproj#L30-L39"""
13211,481456546,"b""Do we need a separate command to set up the resolver?\r\n\r\nOr should all our tests be hooked up to use the resolvers we just built?  In that case we'd set the MSBUILDADDITIONALSDKRESOLVERSFOLDER environment variable in `ToolsetInfo.AddTestEnvironmentVariables` and in the dogfood script."""
13211,481457452,"b""I think it's also supposed to fail to build in VS.  It should load successfully, and design-time builds should succeed, but you should still get a build error.  Here's the spec:  https://github.com/dotnet/designs/blob/master/accepted/2020/workloads/workload-resolvers.md#globaljson-failures"""
13311,481490782,"b'This is all copied (and now duplicated from) the Microsoft.DotNet.SdkResolver project, right?'"
13311,481491171,b'Do we need to reference the DLLs from both types?  Should we just reference the MSBuildSdkResolver project and use the types from it?'
13211,483056687,"b""I think `DOTNET_MSBUILD_SDK_RESOLVER_SDKS_DIR` should not be necessary anymore if we are using the SDK Resolvers correctly.  I would try deleting that line.  You might also want to debug (or look at a binlog for) a test running on full framework to make sure it's resolving the SDK files from the right place."""
13402,483879783,"b""If you want to use the `RuntimeIdentifier` the correct way to do it (eventually) is probably to pass the runtime graph (a file now included in the SDK) to the task, and then use graph operations to figure out if the current RuntimeIdentifier inherits from a more generic RuntimeIdentifier specifying the architecture you're interested in.\r\n\r\nAlso, per [this](https://github.com/dotnet/project-system/blob/0189463807109508d2de9adf028a8ce81daca69a/docs/repo/coding-conventions.md#data), we should use `PlatformTarget` instead of `Platform` in this type of logic, as `Platform` can be an arbitrary alias that the developer defines."""
13441,485711397,"b""This type of parsing doesn't respect possible TargetFramework aliasing.  If we want to prevent the warning, let's just prevent it for all multitargeted projects."""
13441,486143552,"b""Yes, I think that's OK.  The warning is not critical, it's just a suggestion.  And there's not a cheap way to correctly check whether you're multi-targeted to .NET Core 3.x."""
13507,487350740,"b""We decided to rename it to SupportedOSPlatformVersion, but haven't done so yet.  I was planning to do that as part of #13453"""
13598,488840015,"b'Yes, thanks! :-)'"
13306,488941124,"b""Do we need to set `LangVersion` here?  It's set to `Latest` in Directory.Build.props"""
13306,488947468,"b""Is this a typo?  Shouldn't it be `WorkloadDefinitionId` (without the k)?"""
13306,488950260,b'Should we need to be handling the BOM here?'
13615,488965007,"b'We should not define versioned platform constants: `WINDOWS_10_0_19041`, `ANDROID2_2`, etc.  For now, we should just define the versionless constants: `WINDOWS`, `ANDROID`.\r\n\r\nWe should look at whether we should have versioned platform constants when we look at adding ""or greater"" constants for the target framework. @terrajobst '"
13306,488970013,b'Will this throw if duplicate workloads or packs are defined in different workload manifests?  Should we have better error handling?'
13306,488978112,b'This looks like just a stub project.  Do we need it?'
13598,488998412,"b""There is a list of allowed versions and an error if you use something not on the list.\r\n\r\nThere's not an error if there's no targeting pack for a platform.  This is supposed to be the case for Windows 7.0."""
13545,489010395,"b'I\'m not following how this design is supposed to work.  The list of items in the dropdown shouldn\'t depend on what the current target framework is, so I don\'t think this task should be taking the current target framework and platform as parameters.\r\n\r\nI think it should basically take UseWpf and UseWindowsForms as arguments, and if either of them is true, it should remove any supported frameworks below .NET Core 3.0, and add ""-windows"" to any of them that are 5.0 or higher.'"
13545,489065370,"b'What are the valid `TargetFramework` values for a Windows Forms or WPF project?  It should be this:\r\n\r\n- `netcoreapp3.0`\r\n- `netcoreapp3.1`\r\n- `net5.0-windows`\r\n\r\nThat list doesn\'t depend on what the current target framework or platform is.  So I would write the code something like this:\r\n\r\n```c#\r\nforeach (var tfm in SupportedTargetFramework)\r\n{\r\n    var targetPlatform = """";\r\n    var targetFramework = NuGetFramework.Parse(tfm.ItemSpec);\r\n    if (UseWindowsForms || UseWpf)\r\n    {\r\n        if (targetFramework.Version.Major >= 5)\r\n        {\r\n            targetFramework.Platform = ""Windows"";\r\n        }\r\n        if (targetFramework.Version.Major < 3)\r\n        {\r\n            //  Windows Forms / WPF not supported below .NET Core 3.0\r\n            continue;\r\n        }\r\n    }\r\n    var targetFrameworkAlias = targetFramework.GetShortFolderName();\r\n    var displayName = string.IsNullOrWhiteSpace(tfm.GetMetadata(""DisplayName""))? targetFrameworkAlias : tfm.GetMetadata(""DisplayName"");\r\n    convertedTfms.Add(new TaskItem(targetFrameworkAlias, new Dictionary<string, string>() { { ""DisplayName"", displayName } }));\r\n}\r\n```\r\n\r\n(This code doesn\'t account for projects that target something besides .NETCoreApp, so that would also need to be taken into consideration).'"
13655,489824293,b'What is IsKeyOutput?'
13655,489828663,"b""The test isn't reading the value of the metadata though.  So it seems like either the test should assert something about IsKeyOutput, or it shouldn't need to be in the MetadataNames list."""
13672,490462560,"b""We decided that the canonical property going forward should be SupportedOSPlatformVersion, so we're just supporting TargetPlatformVersion for Windows since it already exists."""
13545,492336972,"b""This should be `net5.0-windows`, and I think there's a bug that will cause the resulting target framework to be `net5.0-windows-windows` or something in that case."""
13545,492898842,"b""We get a bit less coverage if we only do unit tests.  Mainly it doesn't cover how we set the default TargetPlatformVersion."""
13782,494115931,"b""The workload resolver is combined with the SDK resolver for the full MSBuild resolver.  However, that resolver isn't used at all in .NET Core MSBuild, as there it doesn't need to go through the global.json resolution.  So the workload resolver is still in a separate, new MSBuild resolver DLL for .NET Core."""
13795,494451670,"b""I'd try to find a better place to put this than in DefaultItems.targets.  That target file is for dealing with the default globs."""
13782,494666314,b'This is addressed now by using a new pseudo-SDK (Microsoft.NET.SDK.WorkloadManifestTargetsLocator) so the resolver can return the right paths.'
13782,494666613,b'I reverted this change.'
13782,494874325,"b""Oops, yes, I've now removed this."""
13782,494876220,b'I just renamed an existing method.  I think that the naming pattern may have changed with nullable reference types.'
13782,494879731,"b'Yes, `It_should_build_with_workload` tests that the targets are imported by using a fake target platform that the workload targets enable.  And `It_should_import_AutoImports_for_installed_workloads` checks that the props are imported via a property that is set in the .props file.'"
13782,495287870,b'Filed #13849'
13904,497596394,"b""It's not a timing issue, it's that the same files are getting added twice when SelfContained and RuntimePackAlwaysCopyLocal are true, as they are included separately for each one.\r\n\r\nSee the description in the bug: https://github.com/microsoft/CsWinRT/issues/442#issuecomment-701157626\r\n\r\n"""
13924,497854301,"b'```suggestion\r\n    <value>NETSDK1146: PackAsTool does not support TargetPlatformIdentifier being set. For example, TargetFramework cannot be net5.0-windows, only net5.0. PackAsTool also does not support UseWPF or UseWindowsForms when targeting .NET 5 and higher.</value>\r\n```'"
13924,497855744,"b""If we're generating the paths ourselves, couldn't we generate the short folder name without the target platform for use here?"""
13924,497858036,"b""OK, but if we ignored the platform for the folder, we wouldn't support multitargeting between net5.0 and net5.0-windows, but net5.0-windows and netcoreapp3.1 should still work."""
14020,502029787,"b""You may want to merge from 5.0.1xx to master to pick up the latest error codes.  I think we've already used NETSDK1146."""
14020,502030292,b'I think this would be clearer if it were named `DuplicatedMetadataValues`.'
14020,502032028,"b""What's the intention here for specifying both AfterTargets and BeforeTargets?  I'm not sure if this is a good pattern, @rainersigwald may be able to clarify."""
14024,504300071,"b""What about setting up these environment variables for all tests (when running on full framework)?  That was flaky last time we tried it, but I'd still like to try to turn that back on.  It doesn't necessarily have to be in this PR though."""
14024,504303650,"b""Actually, it looks like we're already setting this up: https://github.com/dotnet/sdk/blob/release/5.0.1xx/src/Tests/Microsoft.NET.TestFramework/ToolsetInfo.cs#L154\r\n\r\nSo it seems like setting this variable here may be redundant."""
14093,504371691,b'Should this be using `CommonOptions.CurrentRuntimeOption`?'
14093,504424583,"b""I don't think this test needs to set the RestorePackagesPath.  Some of the other tests in this class do for different reasons.  So I'd suggest removing the RestorePackagesPath and switching to a normal `Fact` attribute."""
14093,504424920,"b""For this test I don't think there's any reason to run the restore command separately.  So just collapse it into a single `BuildCommand` using `Execute` instead of `ExecuteWithoutRestore`."""
14093,504425382,"b""I'd suggest renaming `sdkDirectory` to `targetFrameworkOutputDirectory` and `outputDirectoryFullName` to `outputDirectoryWithRuntimeIdentifier` or similar."""
14093,504428793,b'```suggestion\r\n    <value>Use current runtime as the target runtime.</value>\r\n```\r\n\r\n@KathleenDollard Any further suggestions for this text?'
12198,515421961,"b""@am11 @eerhardt Way late, but won't this be a null reference?  This was caught by a code scan tool we ran."""
14393,516400316,"b""It's set in Microsoft.Common.CurrentVersion.targets.  Previously the TargetPlatformVersion was defaulted after Microsoft.Common.CurrentVersion.targets was evaluated, so this logic had to be duplicated to pick up the modified TargetPlatformVersion.  Now we set the default platform version before the common targets, so we don't need to duplicate the logic anymore."""
14020,517034467,"b""Add a comment here explaining what's going on and why."""
14430,517649020,b'#14178 split the template dependencies.  I applied those changes then ran a local darc update to get the right 6.0 versions.'
14532,524811133,"b""Should this try to use `Path.GetFileNameWithoutExtension` instead of `Contains` (Similarly in the scripts, if there's an available way to do that)?"""
14532,524819176,b'Do you mean AfterTargets here or is this supposed to be DependsOnTargets?'
14532,524835194,b'Why did we need to normalize the paths for these tests to work on Helix?'
14532,524861457,"b'Typo (here and elsewhere, including command line help)\r\n\r\n```suggestion\r\n        public string MsbuildAdditionalSdkResolverFolder { get; set; }\r\n```'"
14532,524861762,b'Nit: I typically use InvalidOperationException for this kind of thing.  I think ApplicationException is sort of soft-deprecated.'
14532,524862833,"b""I'd suggest adding a comment here explaining what's going on.  It sounds like this is getting the relative path to put in the XML file so it still works in Helix when the absolute paths are different."""
14532,527102292,b'Should there be a space here?\r\n\r\n```suggestion\r\n    if (-not $test)\r\n```'
14532,527104934,"b""I'd love to see us eventually get rid of this hack."""
14532,527109811,b'```suggestion\r\nMost test failures on helix should repro locally. Try following the [developer-guide](developer-guide.md) _Run tests from the command line_ section first.\r\n```'
14532,527111377,"b'```suggestion\r\nRunning tests on Helix reuses the ""test as tool"" infrastructure. All tests projects are published  as tools that accept xunit command line arguments. The SDK under test, the published test project, and other dependencies are copied to a helix machine. This step changes the repo structure. Most of the helix-only failures are caused by tests depending on the repo structure or having dependencies that are not carried by the test project publishing step. The following steps help you to repro the test layout that is used on the helix machine. And you can run the individual test to discover the cause.\r\n```'"
14532,527114074,"b""Can we enable long paths on Helix machines?  We should try to avoid having to workaround long path issues, as we're likely to eventually go over the max path and have hard-to-diagnose issues."""
14532,527115056,b'What do you mean by configuration here?  Build vs debug?'
14664,528921612,"b""What would happen if you passed something like `/p:WeirdProperty=property:value`?  Wouldn't this parsing mess up the value?"""
14664,530009167,"b""I think MSBuild doesn't follow the GNU spec.  It doesn't require two dashes before the long form of an argument (`-property`), and it does require a separator (colon) between the option and the argument.  Does System.CommandLine intend to support that behavior to some degree so we can maintain compatibility with arguments that are passed through to MSBuild?"""
4,73369830,b'Should file a bug and reference it here. \n'
100,76645544,b'Curious: why have a separate property group down here for this vs. just putting it in the property group above? \n'
505,93087346,"b""@srivatsn items imply collections which isn't possible here.  The tool only accepts a single argument hence a property is more appropriate. """
1368,123643471,"b""That's the correct version.  See https://dotnet.myget.org/feed/roslyn-tools/package/nuget/RoslynTools.Microsoft.SignTool/0.3.3-beta"""
1368,123644045,"b""I have all the right numbers, they're just in the wrong order \xf0\x9f\x98\x84 """
1368,123644181,b'Fixed now.'
1751,151566062,"b""I don't believe this is needed from a correctness perspective. But it seemed to avoid unnecessary computation. """
2000,171031606,b'I copied from @tmat \r\n\r\nhttps://github.com/dotnet/roslyn-tools/pull/169'
3867,349633795,"b""When was this meeting? Long paths are required by practically every repository now including `dotnet/runtime`. At this point the expectation should be long paths are enabled everywhere, it shouldn't be the exception. Even DevDiv has added long path support to their build machines. Need to get Helix in line with this policy."""
3867,349634275,"b""I'd prefer to let this work go forward now and then switch it to use the arcade implementation when it's available. I'm still 2-3 weeks away from getting my code into Arcade. Don't want to block progress here on my messed up schedule."""
3867,349753393,"b""Can't we enable long paths everywhere else though? Basically why can't the machine images, for everything that isn't Windows 7 or 8, have long paths enabled?"""
10761,387761730,"b""Was the problem before simply that we had multiple entries for `<NuGetBuildTasksPackageVersion>` in the Version.props file? DARC was then simply updating the first one but not the second hence we did not get any true dependency flow here?\r\n\r\nIf so can we please file a bug in arcade. This seems like a really easy case to catch and given it's likely to contribute to a servicing event it's one we should definitely consider implementing."""
12104,442376229,b'@chsienki another case where work is predicated on `netcoreapp` versions. Should sync up to see if this is the preferred style and if so consider using in our code.'
468,91688808,"b"":+1: for me, and ok for F#, if i can use `OverrideDefaultCompileGlob` to disable **\\*.cs include.\r\n\r\nIt should be always possibile to individually disable implicit behaviour with a single feature flag (not shared with others, for example i like resx include but not compile items).\r\nSo dont remove the condition because if you use `$(DefaultLanguageSourceExtension)` instead that's gonna break F# badly.\r\n\r\n"""
1163,114138564,"b'Sure.\r\n\r\nThe others `Remove` are working now, because it just add everything and next step remove it.\r\n\r\nYes, the \r\n\r\n```xml\r\n<None Remove=""**/*$(DefaultLanguageSourceExtension)"" Condition="" \'$(EnableDefaultCompileItems)\' == \'true\' ""/>`\r\n```\r\n\r\nis pretty much useless afaik if i juse if \r\n\r\n```xml\r\n<None Remove=""@(Compile)"" Condition="" \'$(EnableDefaultNoneItems)\' == \'true\' "" />\r\n```\r\n\r\nto remove all `Compile` from `None` (i think is never right to be both `None` and `Compile`, but dunno, i dont want to create regression).\r\n\r\njust tell me @eerhardt , np for me\r\n\r\n'"
1079,109968745,"b'Might help to add:\r\n\r\n```C#\r\n<remarks><c>true</c> for projects running on shared frameworks (<see cref=""IsFrameworkDependent"" />) that do not target a specific RID.\r\n```'"
2382,199962344,b'Nice!'
12461,454725755,"b'Nit: _\r\n```suggestion\r\n    <_WebToolingArtifacts Include=""$(AppDesignerFolder)\\launchSettings.json;\r\n```\r\n\r\nA little unusual to see lower cased property names'"
12872,470306036,b'```suggestion\r\nMicrosoft.NET.SupportedTargetPlatforms.props\r\n```'
12775,470322201,b'@adamsitnik \\ @wli3  do you happen to know what values I should use to make this work for Blazor? What values do I need to specify in the SDK for `TargetPlatformIdentifier` and `MinimumOSPlatform`?'
12872,473031665,"b'```suggestion\r\n    <SupportedPlatform Include=""Android"" />\r\n```'"
12872,473031795,"b'```suggestion\r\n    <SupportedPlatform Include=""iOS"" />\r\n```'"
12872,473031892,"b'```suggestion\r\n    <SupportedPlatform Include=""Linux"" />\r\n```'"
12872,473031969,"b'```suggestion\r\n    <SupportedPlatform Include=""macOS"" />\r\n```'"
12872,473032050,"b'```suggestion\r\n    <SupportedPlatform Include=""Windows"" />\r\n```'"
13464,486450172,b'Should you simply remove the items from `ResolvedFileToPublish`? '
13464,486461302,"b""```suggestion\r\n             AND $([MSBuild]::VersionGreaterThanOrEquals($(_TargetFrameworkVersionWithoutV), '5.0'))\r\n```"""
13464,486464001,b'Would it make sense to evaluate this in the target? That way you do not necessarily rely on import order.'
11499,451674070,"b'Agreed `OSPlatform` is inherently redundant, but it aligns with the existing struct that is used in the API for runtime checks.'"
13306,481854744,"b""That's fair. `dotnetRootPath` and `sdkversion` it is then."""
13306,481857413,b'not really'
13306,481860505,b'this abstracts the process of collecting a set of workload manifests to be composed together e.g. all the workload manifests for a given sdk band\r\n\r\nit could certainly be named better'
13306,481862911,"b'I added IVT so the tests could still access everything.\r\n\r\nMaybe the tests could poke a delegate into the WorkloadResolver via an internal property, which would override the use of `File.Exists` if present.'"
13306,489983107,"b'Yes, System.Text.Json does not consider the BOM to be a valid part of UTF8 input.\r\n\r\n> Since the Utf8JsonReader considers the input to be JSON text, a UTF-8 byte order mark (BOM) is considered invalid JSON. The caller needs to filter that out before passing the data to the reader.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to#read-with-a-stream-or-pipereader'"
13306,489983207,b'Yes :/'
13306,489983693,"b""Nope, I didn't get round to implementing this. It should be punted to a later PR."""
13306,489984502,"b'Good catch. This should still be an error IMO - right now, the approach is to fail on validation errors, in absence of a well-defined recovery strategy, but this could absolutely be a better error.'"
13306,489985133,b'Still need to fix error positions in the Newtonsoft.Json reader.'
11666,499870023,b'This causes `dotnet test --help` to print:\r\n\r\n> `--blame-hang                             Run the tests in blame mode and enables collecting hang dump when test exceeds the given timeout. Implies --blame-hang.`\r\n\r\nThis is self-referential and redundant. Should `Implies --blame-hang.` be part of the documentation for `CmdBlameHangTimeoutDescription`?\r\n'
12422,454716830,b'Should the difference be commented in the code then?'
450,90791634,"b""Not to mention [we're already at 1.6.1](http://www.nuget.org/packages/NETStandard.Library/1.6.1)"""
11458,416396894,"b""I think we need also option to drop symbols (including embedded ones) which won't collide with this option"""
11458,417155234,"b""> I'm wondering if we need to continue supporting the current behavior (a way to keep a pre-link PDB as part of the output)\r\n\r\nI don't think so as such pdbs could be invalid for linked assemblies"""
12144,447102965,b'Do we actually need `_TrimmerLinkSymbols` property at all?'
12144,448977116,"b'TrimmerRemoveSymbols hooking up into linker will be done separately, right?'"
12144,449229974,b'Simplifications in follow up PR sounds great'
908,102991695,b'Can you confirm that this test fails without the change?  The specified symptoms are an error but a passing build - is this verification sufficient for that case?'
1618,142538617,b'Consider not using a yield enumerator if this is a hot path where allocations matter.'
1618,142538749,b'Consider not using `SelectMany` + `Concat` if this is a hot path where allocations matter.'
2441,206229400,"b""Wait, which F# SDK do you mean by this?  Didn't we fold things into the core SDK now?  @KevinRansom ?"""
2441,206243753,"b'Do the templates actually reference that though?  I thought we kept that for the few people who took a dependency on it in the 1.1 timeframe, but we know just pattern F# after C# and VB.'"
2441,206250573,b'Great - thanks for re-assuring me :)'
2486,211815362,b'Nit: suggest using a named param for the literal as for `isSelfContained:`'
2853,249893663,"b""Jeff's commit removes them outright which seems like a sensible approach. If his commit is going to be merged then we can close this PR."""
3413,302825184,b'Outside of VS you mean?'
3413,302826343,b'Thanks!'
3413,302826495,b'Nice. Updated.'
11358,421363764,"b""It's the same: https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEUCuA7AHwAEAmARgFgAoa0gZmoG9qACNlmPHAWxYFEWjFgEE0LAEIsAvq3ay2pEvMHL2/LtwB0AFSgBPAAoBDKAGcYACgBEVsRBwZ+HMgEoA3KvZ8NO/cbOWXAA2QXYOTjAk7p4KZACcFjCuHlRqakTxiVEpajJUUkA="""
11358,421364757,b'`Split` will not return `null`. It can return an empty array.'
11358,421365567,"b""This was mostly about making the code clearer. The reduction in allocation is a bonus. Later in this PR the `SetMetadataOnTaskItem` and containing type is removed entirely anyway.\r\n\r\nI'm interested to know how you lock perf improvements in with tests."""
11358,422954673,"b'Meant as the verb ""projects"", as in ""performs a projection"".'"
12069,440803928,"b""This should probably filter by `TargetGraphs` as well so that diagnostics appear in the correct place on multi-targeting project trees.\r\n\r\nI'll investigate adding a new input for the `TargetFrameworkMoniker`."""
12069,440807924,b'Done in ff326ab49345bb6ee9dc0fc302afa5c02113c385.'
12069,441437461,"b""The input items have already filtered by `TargetFrameworkMoniker` in `ResolvePackageDependencies`. I like keeping this property name the same as the MSBuild property that it comes from. The fact that it's currently only used for diagnostics is kind of an implementation detail."""
13093,476306571,b'?'
37,74465274,"b'No, I had a mental note to add parameters here and I forgot. Oops. Adding it.\n'"
37,74466326,"b""We don't on the CLI. In the CLI, we explicitly reference the path to stage0 instead of taking the dotnet version on the PATH.\n"""
37,74466390,b'Printing the parameters that are going to get passed down to MSBuild3 from the command line.\n'
35,74485436,"b'Is this publish for portable only? Even so, will the P2P dependencies be in the IntermediateAssembly item group above? If so, the comment is kind of misleading.\n'"
35,74505785,"b""I think that's fine. Given that it is in fact for the current project only.\n\nWhere will the code that copies the package dependencies for stand alone apps live?\n\nAnd the code that copies the P2P dependencies for both? Will it be simply the publish target running on the P2P projects?\n"""
48,74876155,"b'Yeah, forgot to remove, this was created with new -t msbuild.\n'"
48,74876182,b'Copy and paste from diff. Will remove.\n'
48,74876206,b'Absolutely. I added that later and forgot to come back to it.\n'
48,74876293,b'They were only partially actually. I used bits and pieces and refactored other pieces.\n'
48,74876491,"b'I thought about it, but then decided to be explicit for the cases where we would want to replace the msbuild being used. This way, we would be forced to update and/or improve the mechanism to inject these and we would have a reduced chance of forgetting to update one and have a test appear to pass with a custom msbuild.\n'"
48,74876758,"b'Yes, just not sure how to plumb that from msbuild into the test itself.\n'"
44,74980151,b'Will this work x-plat? I believe you need to use dotnet and xunit.console.netcore.exe.\n'
44,74980772,b'What are these templates for again? Will VS pick them up from here? #Resolved\n'
48,75012946,"b'I was trying to be a bit more resilient to the folder format, but I like your suggestion. Much better than string manipulation. Will change.\n'"
63,75369802,b'Can you follow the naming pattern of the other tests in the repo? We use a BDD naming convention of GivenAnAssumption for the class name. And the something like It_should_happen_this_way for the facts using snake casing. #Resolved\n'
63,75369961,b'use fluentassertions for assertions please. Like we do in the other tests in the repo.\n\nthis will read like result.Should().BeTrue() for instance. #Resolved\n'
63,75370011,b'These comments and the ones below are unnecessary. #ByDesign\n'
63,75370541,"b'NIT: should this read ""If any changes are made here...""? #Resolved\n'"
63,75391609,"b'I would suggest, instead of this comment, create a method called SkipIfPackageDefinitionDoesNotExist(items, currentItemId) and replace the condition above with it and then get rid of the comment. #ByDesign\n'"
63,75391691,b'Is this comment adding any value? Why not call this method PopulateUniqueAssemblies instead and get rid of the comment? #ByDesign\n'
63,75391972,b'I not just invoking it: shouldSkipItemCheck(dependency)? using the Invoke method seems more convoluted. #Resolved\n'
63,75392110,"b'Can we combine the two if conditions? Maybe extract it into a method, like ShouldSkipDependency or something like that and put the two conditions in there. #ByDesign\n'"
63,75392538,b'Is this comment adding value here? #Resolved\n'
63,75392793,"b'Dito. What is the value of grouping up these properties like that? Maybe what we should have is two types of dependencies. One called FrameworkDependencies and one Dependency? They seems to be used separately anyways. I see it being used in two places, in one, you fill the Dependency properties. In the other the Target Framework properties. This is a pretty big usage smell to separate them. #Resolved\n'"
63,75393133,"b'Separate this in two classes, like I said below. #Resolved\n'"
63,75393798,b'Move this condition in the method I suggested above. #ByDesign\n'
63,75393800,b'Same here. #ByDesign\n'
63,75394059,"b'Please, put this into an extension method of dependency. It will read much better. #ByDesign\n'"
63,75394112,b'Same for this. Extension method? #ByDesign\n'
63,75394183,b'I would move all this code into an aptly named method and invoke that method here. This whole check if parent exists and do something otherwise create one. #ByDesign\n'
63,75394893,"b""This comment does not seem right, there is nothing being created here, is there? That's why I am not a big fan of comments. Can we remove it? #Resolved\n"""
63,75395054,"b'Same here, why not call this PopulateUniquePackages? #Resolved\n'"
63,75395059,b'Move this method down. There are other methods under it that depend on it. Having it above is weird to the reading sequence. #Resolved\n'
63,75395159,"b""In what situations would this parse fails? It seems we don't care about it. Is this correct? #ByDesign\n"""
63,75395247,b'How about replace this condition with a method called SkipTargetsWithRids() and remove the comment below? #ByDesign\n'
63,75395483,b'Why kvp? #ByDesign\n'
63,75395485,"b""I don't think this comment is necessary! #ByDesign\n"""
61,75400939,b'This comment seems unnecessary. The code seems clear enough.\n'
71,75552397,"b'I think this should be a separate test. In the very least, the name of this test should be updated with a and_the_project_should_run or something like that. Though I would prefer a separate test.\n'"
71,75552475,b'Should we name this asset ProjectWithSimpleDependencies?\n'
71,75552691,"b'I believe we are going to be doing this enough that we should put this somewhere. Maybe in the PublishCommand itself, like we have GetOutputDirectory we should have a GetPublishedAppPath or something like that.\n'"
71,75552723,"b'Again, I would vote for separating these tests.\n'"
71,75552790,"b""Hopefully I will get a test target out there soon enough and we won't have to use these anymore.\n"""
71,75552960,"b'I know this is a test asset, but... var?\n'"
71,75552966,b'Ditto.\n'
71,75557934,b'NIT: 120 character limit. Break the parameters in new lines.\n'
71,75557946,b'Same here.\n'
71,75558063,b'Should we put this file in a special folder? Make it clear this is a test file?\n'
71,75558394,"b""Let's break this method up. There is no reason for us to stuck the isPortable knowledge in it. I would argue for a separate extension on LockFileTarget called IsPortable().\n\nI look at the implementation of GetRuntimeLibraries and there is no reason for it to return this isPortable output parameter.\n"""
71,75558556,"b""I hadn't refreshed so I didn't see Bryan's comment. Clearly, I agree with him.\n"""
63,75718689,b'NIT: Why are you adding snake casing here? Just to give emphasis to NotAssemblies? Mostly curious. #ByDesign\n'
63,75719056,b'Should you follow the naming pattern above and name this DesignTimeDependencies? Or you explicitly want it different because it is an output? #ByDesign\n'
63,75719442,b'NIT: Unnecessary empty line.  #Resolved\n'
71,75720089,"b""Updated name works for me. That's why I suggested it.\n"""
71,75720309,"b'Maybe it should be? I just think that people can understand hello world as being a hello world project a lot more than SimpleDependencies to mean a project with simple dependencies. If anything, I would read that as being a folder that contains simple dependencies.\n'"
71,75720456,"b""Yes, but doesn't it state that when you are using the new operator and the type is explicit you can use var?\n"""
71,75720679,b'Yes. We should. Why would we want to preprocess again just after we preprocessed? Some of these operations might be costly for us to run them twice.\n'
85,76105678,b'Should you print the path here in the message?\n'
100,76481723,"b""Should you condition this to it not being already set? I guess that's fine because the props gets imported first and if I re-define it in the csproj, that one wins, right?\n"""
99,76653945,b'Do we need this here to account for the culture sub-directory we introduced above?\n'
112,77233060,"b'Should this be dumped on the screen instead? Thinking about CI here? Or maybe, have it dumped on a file only for dev machines but always show it in the console?\n'"
112,77233700,"b'Can we keep this as the strongly typed CompilerOptions? I feel like whoever calls this should convert the ITaskItem into CompilerOptions and probably validate that input as well. So, the GenerateDepsFile task should convert it.\n'"
112,77234035,"b'I think we should have a GetRuntimeLibrary that returns a RuntimeLibrary instead of doing the cast. The fact that you are casting is an indication that you should have a separate method and given that this is a private method, we can have it.\n'"
112,77234067,b'Same here about the cast.\n'
112,77234227,"b'This should be on the caller of this class, or better yet, on some ""Converter"" helper class.\n'"
112,77234693,b'IsPortable should be a method on LockFileTarget. Or an extension on it.\n'
112,77234943,"b""Why isn't this on LockFileTarget too? Everything that happens here is dependent only on LockFileTarget.\n"""
112,77261578,b'I think we have a HaveFiles method. If you want to collapse the three asserts into one.\n'
112,77261835,"b'All right, but do we care about this file being generated in CI like that? I wonder if this is a bad pattern to pick up.\n'"
112,77262173,"b'Well, it is very hard to get all that from the name ""ProjectContext"". I worry that this class will turn into another GOD object like it did in the CLI.\n'"
112,77284923,"b""you are teasing me with this right.... Urgh... can't.... resits...\nNIT: var.\n"""
146,79711660,b'I think we should put that in a separate test. Otherwise this test will hold everything in it. Seems like bad practice.\n'
310,84565091,b'could we add `**\\*.xproj` as well? This would match exactly what we currently have in project.json world.\n'
310,84568863,"b""I see, so this does not get pulled into the excludes for compile and embedded resources? That's where we have this exclude in the CLI.\n"""
317,85184480,"b""We shouldn't be running dotnet test3 tests in the SDK.\n\nThese tests belong in the CLI.\n"""
468,92694034,"b""Won't this cause content items to get double up?"""
811,99460124,"b""Should this be '$(AppendRuntimeIdentifierToOutputPath)' == 'true'?"""
828,99745090,b'Will this be a problem for CI? Should you have RuntimeIdentifiers with Win and Ubuntu? the ones used by the SDK CI?'
828,99745270,"b""I don't think this describes the scenario enough.\r\n\r\nShould this be It_builds_a_runnable_output_when_depending_on_both_rid_and_ridless_libraries?"""
828,99745427,"b""You are missing single quotes on `$(RuntimeIdentifiers)`. It should be `'$(RuntimeIdentifiers'`."""
876,101608415,b'What is an assemblySatelliteAssemblies?'
876,101619844,b'public IEnumerable<ResourceAssemblyInfo> ResourceAssemblies { get; }?'
876,101621474,"b""What if the task item does not contain this metadata? Won't this produce a broken relative path?"""
962,105067499,"b'We need this because we are not using dotnet test yet, correct?'"
999,106544029,b'Maybe fix the comment then?'
1024,107481690,"b'These tests cover the whole supported reference matrix that we have. They are our guarantee that we are not regressing on that promise. I think that is a very good easy of mind thing over machine time. Also, it adds good coverage regarding backwards compatibility with old 1.0 TFMs, which is something else we really want.'"
1024,107494078,"b""We chatted about some strategies to try to reduce the running time of these tests during stand-up. Let's see how much improvement we can get out of them."""
1062,110216644,b'Why use member data here and inlinedata in the other? I particularly prefer inlinedata in this case.'
1119,111482478,"b'The formatting style is varying here. Please, when you put an argument on a newline, put them all in a new line. So, string type should be on the line below.\r\n\r\nAlso, the closing parenthesis should be in the same line as string hashPath = null'"
1119,111482785,"b'Same, type should be in its own line.'"
1119,111483510,"b'Also, how about fileList.Append($"";{targetManifestFileName}"")'"
1133,112583543,"b""Removed it because xunit returns non-zero even when we have skipped tests. Which now that we have skip attributes happened and caused the build to fail. We don't need this anymore because we are parsing the testResult.xml file and jenkins will fail if there are any failed tests in there."""
1133,112583577,b'@johnbeisner can you help clarify this?'
1133,112583598,b'Oops. Copy/paste. Will do.'
1133,112583750,b'Fixed.'
1133,112744912,"b""Can we do that in a separate PR though? I would like to merge this one and then we can bring that over.\r\n\r\nI agree that's much better."""
1171,114686136,b'Why the == true?'
1171,114686716,"b""There is a CoreMSBuildOnlyFactAttribute that you can use in all these cases. And there is a CoreMSBuildAndWindowsOnlyFactAttribute that you can use as well. Let's stick to this new approach now. Fix it here and in the other places you are adding as well."""
1172,115316873,b'Why the difference in path here?'
1323,120983591,"b""This is what dotnet sln adds. It adds the folder containing the project. If this is not right, we should take the feedback to the dotnet sln add command and fix it there. As you know, I don't usually have VS, so I used the command line to edit this project."""
1323,120983616,b'Will do.'
1323,120983792,"b'Correct. this is how this comparison is done in other parts of the SDK. If you just do <, then msbuild throws.'"
1323,121029882,"b""Because for 1.0 projects, it needs to be source, since the host (and dependency model) don't know to look for the package there.\r\n\r\nAnd for 2.0, we want for it to actually be a fallback folder to benefit from perf."""
1330,121232159,b'Should this be version >= 2.0?'
1329,121528271,"b""I don't think that not doing this for F# is the right approach. This is all package resolution and it should behave the same across all languages. However, it might be the easier way for now. @KevinRansom, is there a reason why fsc does not behave he same way as csc and vbc and ignores unknown identifiers? Would it be possible to make it do so? Also, @srivatsn, is there another property that we could use if none of the alternatives above work?"""
1378,125116420,b'I agree. I wrote that to you in IM \xf0\x9f\x98\x84.'
1423,128048738,"b'There is a typo here. It should say GivenThatWeWant, it is missing he final t. Also, HaveassemblyVersion should be HaveAssemblyVersion.'"
1423,128048985,"b'This is not disabling the test in full framework, this is just skipping the constructor. Also, we have an attribute that you should put in the tests to skip them.'"
1440,128846776,"b'Weird, this does not show up in my editor.'"
1440,128846793,b'Fixed.'
1440,128861324,"b'Can you give me some more detail on this? When targeting full framework, does rid even matter?'"
1440,128864802,"b'Yeah, I looked and the RuntimeIdentifierInference target and saw that we infer a win7-x64/x86 when we are full framework and a rid is not set.'"
1602,140898036,"b'Yep, signing.'"
1603,140923755,b'I see. It makes sense. I will change the default number to 2.0.0.'
1629,142990280,"b'This one does not need to be $(NoConfig), to be settable?'"
1603,143079052,b'Filled https://github.com/dotnet/sdk/issues/1632'
1702,148118033,b'Why do we need this?'
1702,148118098,b'Why is this commented out?'
1702,148118946,b'We should use this URL: https://dot.net/v1/dotnet-install.ps1'
1702,148119085,b'Use this URL: https://dot.net/v1/dotnet-install.sh'
1702,148136237,b'This will always have the latest released script available and they are backwards compatible.'
1702,148610261,b'Another example where changing the whitespace makes it super difficult to review the changes in the file.'
1718,150041418,b'why did we change this to testbin? just curious.'
1721,150144084,b'Why is this added here?'
1721,150144846,"b""I should have searched for it. I would have noticed the removal. I even looked for it and didn't see. Which is why I asked. I will go ahead and practice my reading.\r\n"""
1736,151200973,"b'Why is it outputpath does not work here? This is duplicating this information, which is not ideal.'"
1731,151201669,"b'I wonder if this condition should check against ""not true"" instead of empty.  Though, I see that above we are doing the check in a similar manner.'"
1821,159297762,b'@dsplaisted @tannergooding  do we really need the test projects in the SDK repo to be as explicit as it is below?'
1796,159784542,b'Are these the SDK files that the CLI requires that are not produced by dotnet/sdk?'
1796,159784726,b'NIT: empty line here seems weird.'
1796,159784841,"b""This name, TestProject, does it mean go run a test on the project or is it a more of a name to create TestProject, which happens to do things like build.\r\n\r\nThe name seems strange here. Does not read like an action. At least, I didn't read it as such at first."""
1796,159785031,b'NIT: there is an extra empty line here.'
1796,159785090,b'why is this called ret?'
1796,159785393,b'NIT: empty line after closing brackets. Check this in the rest of the files.\r\n\r\nWe should add this to our editorconfig.'
1796,159792142,b'What is this test doing?'
1796,159792204,b'ret? better name please.'
1843,161037559,b'Has this been addressed?'
1843,161066527,b'Should this be a parameter as well? To the task?'
1843,161087381,"b'Yes, ""Runner"". So, we are building the first version limited to only portable apps and you would rather make a change later to support other kinds of apps? Feels like it should not be a lot more to make this a parameter. But, your call.'"
1858,162432274,b'Do you really need this exclude section if you are being explicit on the dlls to sign above?'
1857,162764097,b'What is the difference between PackageName and NuGetPackageId?'
1857,162764230,"b""Don't you have a MetadataKey for this?"""
1857,162764261,b'And this.'
1857,162764279,b'And this.'
1902,164010245,b'@nguerrera is this OK for the loc CI?'
1902,164179752,"b'I noticed that on the CLI, we use string.Format and work with the Resx resource file. I think this is what I will do here as well. Just need to figure out if I want to make the Strings class public so that the test can see it (I think I prefer this) or use a InternalsVisibleTo attribute.'"
1971,168912242,b'I like the suggestion. I will make the change.'
1971,170437904,b'I will move it. We can move it to common if it becomes needed by extensions.'
2020,172292051,"b'Do you need to worry about concurrent writes here? I see you have None there, but if it happens, will this bubble up? Is that what you intend?'"
2020,172299822,b'Did you mean must match reader?'
2022,172300388,b'It_removes_other_package_dependencies'
2020,172302227,b'Sounds good.'
2022,172303548,"b'Given your explanation, how about naming this It_does_not_add_p2p_references_as_package_references_to_nuspec?'"
2008,174533466,"b""My only concern is that this won't break prod-con. @johnbeisner or @tannergooding please speak up to it."""
2134,180895952,b'Typo here: intermeidate should be intermediate.'
2369,198925217,b'Seems good.'
2369,198925322,b'Also seems good.'
2369,198980536,"b'You are right, this is what needs to change. My bad for not catching this.'"
2369,198980666,b'@JunTaoLuo you are right. I missed it when I originally reviewed this.'
2369,198980826,"b""Given that our implementation above was wrong and this test didn't catch this, I wonder if this coverage is right."""
2470,209800138,b'Why all the formatting changes o this file?'
2470,209800469,"b'There is a typo here. teh instead of the. Also, CUI system? Should it be GUI?'"
2486,212069907,b'Why not put this in its own file?'
2501,213857516,b'Does it make sense to opt-in on latest only to one particular framework reference but not others? Just wondering if all should key off of the TargetLatestRuntimePatch property.'
2530,217525546,b'Not to nuget.org. The email you sent me mentioned this should be false unless the package was going to nuget.org.'
2543,219277912,"b'Yes, on the other thread, we agreed to keep IsShipping to true and to come up/set another property to indicate that the packages produced here are not going to NuGet, which is why the comment is there. \r\n\r\nFull disclosure, the props files, I took from @chcosta who started on the process of moving the SDK to arcade. But I think this comment is still relevant.'"
2543,219289198,b'Sounds good. I will replace the comment with an issue to figure out this separate property to determine the nupkgs from here shuold not go to nuget.org. Sounds good?'
2543,219289245,b'I will follow up with Chris on this.'
2575,223876303,b'Yes. No more!'
2774,244072768,b'You are missing a `.` at the end of the sentence.'
2788,245352355,b'Do we really need to do this copy around stuff? I have some project manipulation code in this repo. Is it only for projects that are being created?'
2853,249886515,"b""I am not sure if this has been discussed. But these files should not be used with MSBuild less than 16.0.\r\n\r\nThe CLI will require Dev16, which means if someone tries to use this in Dev15, they will have to do hacks to enable it and we don't support it.\r\n\r\nAnd the CLI itself will carry MSBuild 16.\r\n\r\ncc @rainersigwald """
2857,249974206,b'Is this really latest? Why the change in versioning format?'
2860,250780690,b'Is it ok to add this dependency independently of the TFM the store is targeting?'
2887,255291789,"b""I wasn't aware that we were breaking 1.x projects as well. I thought the breaking was for netcoreapp3.0 projects."""
2972,258813127,b'Is this windows only to use .exe?'
2984,261778666,b'Do we really need debug and release for these?'
2984,261782098,b'I tried to do this for the CLI and I failed miserably. Good to know it is possible if you know enough msbuildfoo. '
2984,261782662,"b""Doesn't arcade define these already? Should we reuse it from there if that's true?"""
2997,267101274,"b""I appreciate @nguerrera's willingness to move this part of the code forward after this PR gets checked in. However, as a rule of thumb, we will take as long and as many iterations as it takes to get the code to a quality level that we feel comfortable with.\r\nExperience has taught us that a short while after the code gets checked in, it is owned by us and I, in particular, don't have to incur too much debt right from out of the gates.\r\nJust sharing our thought process and principles here."""
3039,268849866,"b""We should be able to leave this one around, since it won't be invoked due to the bigger YAML not having an agentOS for it. But your choice really."""
3062,270567994,b'Done.'
3062,271075166,b'Done'
3062,271075545,b'Done'
3062,271075734,b'Done.'
3062,271076282,b'Done.'
3062,271083785,b'Done.'
3062,271083800,b'Done.'
3221,283044125,b'This should not be needed. It is done by arcade. Any reason why you are adding it back?'
3293,289910265,b'@dsplaisted how are we referencing this version now?'
3293,289971022,b'Cool.'
13436,484739203,b'I actually wanted show that you can mix spaces with semicolons.'
13815,494631504,"b'So just to clarify... That option only applies to `dotnet test` command, and is passed-thru to `vstest.console.exe` which uses the same parameter.'"
1821,157896588,"b""Good catch. I'll fix that."""
1843,161350263,"b""I'm with Livar; it feels like the task should be generic and not hardcode the runner.  If we do need the task to use a different runner, it's one less code change in the future."""
1902,164011109,b'Could we not `string.Format` using `Strings.CannotHaveRuntimeIdentifierPlatformMismatchPlatformTarget`?'
1902,164011161,b'Nit: double semicolons at end of line.'
1902,164014477,"b""I (extremely weakly to the point of not really having any opinion on this) disagree that it's bad to assert against a formatted string; the test should verify the output is the expected resource string, whatever it is.  The test can't catch grammatical or formatting errors in the string; those can only be caught by human review, which is done on the resource files anyway.\r\n\r\nStill, I can see how it'd be a good thing that the test breaks when the resource changes; another opportunity to review the string I suppose.\r\n\r\nOn the negative side, however, the test with a hardcoded expected value won't catch a failure to localize the string because we would have to skip it on localized builds."""
2200,185102049,b'I assume this is to conform to the latest Roslyn tools change?'
2234,187519363,"b""I had similar comments when we copied this into CLI. I understand the desire to link it back to `EmbedAppNameInHost`, but that's a verb because it's an MSBuild task; it's not a good name for something that's generically responsible for creating new app hosts.\r\n\r\nPersonally, I'm \xf0\x9f\x91\x8d with `AppHost.Create`."""
2239,188478147,"b""I'm trying to understand this change.  It seems the only place we use `_DotNetAppHostExecutableNameWithoutExtension` is where there's a check to append `.exe` if on Windows anyways (the same check that's done to set `_NativeExecutableExtension` above).\r\n\r\nIs there a reason we couldn't use `_DotNetAppHostExecutableName` for `GenerateShims`?\r\n\r\nIs this just so that users can't override the extension in the task?"""
2239,188481346,"b""Oh, I see.  It's using a different RID list to check against for adding the extension.  Makes sense \xf0\x9f\x91\x8d."""
2282,191606323,"b""I'll review that PR and take the appropriate steps.  Thanks for the heads up."""
2282,194164601,"b'The problem with calling that ""framework dependent"" is that, while it **is** dependent on a shared framework being installed, it doesn\'t care which one.  I personally think there should be a distinction between a ""portable"" (RID agnostic) deployment and a ""framework-dependent"" (RID-specific) deployment, but I don\'t call the shots.\r\n\r\nSo if we call `dotnet publish` without RID a framework-dependent deployment, then what should `dotnet publish --mode fx-dependent` do?  Right now it tries to use the apphost which requires a RID and errors.\r\n\r\nWithout this change `dotnet publish --mode fx-dependent-no-exe` does not error, which is fine if we call out it\'s the default when a RID is not specified.\r\n\r\nI\'m ok with backing out this commit and having the option text explain that `fx-dependent-no-exe` is the default without a RID, `self-contained` is the default with a RID, and `fx-dependent` requires a RID to use.\r\n\r\n'"
2282,194168180,"b""Ok, I'll amend this commit to only change the error text to:\r\n\r\n```\r\nA RuntimeIdentifier must be specified to publish a framework-dependent application with an application host.\r\n```\r\n\r\nand this will only be displayed for `dotnet publish --mode fx-dependent`.  We'll allow `dotnet publish --mode fx-dependent-no-exe` with or without RID (default for without).  `dotnet publish --help` will explain things as needed."""
2282,194181311,b'Pushed.'
2282,194182682,"b'Sorry, I pushed up without seeing your comments.  I like that proposal, so let me make that happen on the CLI side.'"
2282,194184166,"b""I'll merge when green and we can further that discussion on the CLI side.\r\n\r\nI've made a change to the CLI now whereby `fx-dependent` and `fx-dependent-no-exe` do the right thing without RID specified (effectively mean the same thing).  With RID, the former produces the apphost and the latter does not.  The error message I changed just now only results if you explicitly try to set `UseAppHost` to true without a RID specified."""
2441,205928448,b'Note: this has to go off of file extension because `Language` is also not set when evaluating cross-targeted projects.'
2441,206237927,"b'We ship the F# SDK as a [bundled SDK in 2.1.4xx](https://github.com/dotnet/cli/blob/release/2.1.4xx/build/BundledSdks.props#L9).  The bug does not manifest for F# because F# sets this property in the root F# SDK targets, so it is properly set regardless of multitargeting.'"
2441,206250195,"b""The templates do not.  The .NET Core SDK does internally reference it when it's an fsproj."""
2462,208383444,"b'@nguerrera Here\'s the aforementioned implicit reference.  I\'m fine with removing this in favor of instructing users to do the following if they need the latest apphost patch:\r\n\r\n```xml\r\n<PackageReference Include=""Microsoft.NETCore.DotNetAppHost"" Version=""$(LatestNetCorePatchVersion)"" />\r\n```'"
2462,208993782,"b'Self-contained applications move the NetCore.App reference itself to latest patch level, so they already have the same version as this implicit package reference via a transitive dependency.'"
2462,209776999,"b'That\'s a good question, and something that probably would need to be addressed in the Test SDK by setting `UseAppHost` to false if desired.\r\n\r\nI don\'t have the background as to why test projects have an exe output type for .NET Core, but generating an apphost for them isn\'t ""bad"", per se, since executing it would be the same experience as `dotnet run` (i.e. does nothing since `Main` is empty for test assemblies).'"
2470,210049728,"b""We'll likely want to improve this UX if users are trying to build a `WinExe` output type project and specify a non-Windows RID, but that shouldn't prohibit merging this PR."""
2470,210052727,b'Should we have sanity bounds check that on the view handle that it is at least `0x99` bytes in length?'
2470,210053339,"b'\xf0\x9f\x91\x8d on name change, as this will also make more sense for additional 3.0 changes.'"
2470,210054442,"b'Yeah, with respect to this change this looks good; in the future I think we should error with something that informs the user that this project requires a Windows RID because the output type is `WinExe`.'"
2470,210054910,b'\xf0\x9f\x91\x8d '
2470,210055304,"b""I also couldn't math.  Need two checks: one that the size is at least 0x40 and the other is that the NT header offset + 0x5C is within bounds."""
2462,210058530,"b""@eerhardt @richlander @steveharter do we have an answer for whether or not the NetCore.DotNetAppHost package will always share a version number with NetCore.App package?\r\n\r\nThis change is relying on that, and thus far that's been true with the framework releases.  Otherwise, if we still want the implicit reference, we'll have to manage a separate version number just for the apphost."""
2470,210082361,"b""I don't mind a new file since we're likely to keep expanding the options as the 3.0 features get implemented.  I'd also second `AppHostOptions`."""
2462,210083787,"b""I'm fine with that provided we're ok with a 2.1 targeted project publishing with a 2.2 SDK doesn't get the apphost.  It could if we ported the apphost fix to 2.1 and kept the explicit reference (I probably wouldn't want to enable it out of the box without some automatic patching)."""
2462,210089969,"b""While that's true, users would still want the apphost fix backported to 2.1 servicing, and I don't think we should bother unless the friction from enabling it on the 2.2 SDK is minimal.  While setting a property and adding a package reference isn't difficult, it's just not discoverable."""
2470,210090433,"b'Nit: could we use const-naming from the guidelines? When reading the source, it makes me think these are fields.'"
2470,210132015,"b'Ugh, I didn\'t notice that we do it against the guideline already in this file.  I\'d still advocate for doing it the ""correct"" way here (PascalCased) :)'"
2462,210132736,"b'Per email thread, I will now back out the implicit reference and change the minimum to 2.1.'"
2486,212082983,b'Can the array be zero-length?  I forget what MSBuild does with empty items.'
2489,212421176,"b""It should be the full list.  I'll fix."""
2489,212441673,"b'Updated, including retarget against master with conflict (2.2 re-enabling of `UseAppHost` resolved).'"
2545,220766170,b'+1 on not needing the host subdirectory and using `IntermediateOutputPath`.  I can correct both later if we want to leave as is.'
2545,221020421,"b'This is a preexisting property from a previous commit, so I think we can make it ""private"" in a follow-up refactoring PR, if we don\'t want to fix this for these changes now.'"
2545,221029480,"b'To me, this warning is a little confusing.  I think the intent of the warning is to let users know that the application host isn\'t being customized, i.e. intentionally skipped.  Additionally, the `it` pronoun doesn\'t make it clear which needed to be built on Windows: the application host (which users don\'t ""build"", per se) or, presumably, the user\'s application.\r\n\r\nPerhaps this warning could be something along the lines of:\r\n\r\n`NETSDK1074: the application host executable will not be customized because adding resources requires that the build be performed on Windows.`'"
2575,223875707,b'Are we dropping the number from the preview suffix (i.e. not `preview1`) or is that how we always do it for the first preview?'
2578,224617767,"b""Cool, I missed that since I didn't look at the test's source, only saw the test failure message and took action.  I may change the failure message to mention intentionally deleted errors should be added to the exclusion list here.\r\n\r\nI'll amend with removing the message and adding it to the exclusion list, at least."""
2646,231297819,"b""I'll fix.\r\n\r\nMy feeling about enabling it for libraries was also no."""
2646,231297894,"b""I'll change."""
2646,231298140,"b""I'll add a comment where appropriate.  The former is a sub path to the file and the latter is just the sub path to the directory containing the file."""
2646,231298185,"b""I'll change."""
2646,231298693,"b""I'll add a comment explaining why.  This can also probably be scoped to the case when build and publish dependencies are different, such as publishing with excluded packages or when a runtime store is being used."""
2646,231300609,"b'Yes, currently Razor projects have a ""design"" package that is `PrivateAssets=""all""`; there may be some reliance on its dependencies in the deps file for runtime compilation to work, but I\'m not certain.  See my general comment regarding why publish and build deps generation isn\'t completely unified.'"
2646,231300959,"b""I'll fix."""
2646,231301158,"b""I'll fix."""
2646,231301233,"b""I'll add a comment regarding this potential future breakage."""
2646,231302036,"b'I\'ll add a test for a library to ensure that the assets aren\'t being copied locally, and a test to ""opt-in"" to the copy local behavior.\r\n\r\nWe are copying local all of the self-contained assets on build with these changes.  I\'m not sure what the right call is in terms of user experience: either build and publish have the same contents or self-contained is purely a publish concept and we only copy those assets on build.  I\'ll add a test for this as well.\r\n\r\nGiven this is going into the first preview, my hope was that user feedback would help guide this.'"
2646,232045682,b'I can rename.'
2646,232046024,"b""I'll verify and restore if there are differences."""
2646,232046651,b'I was thinking about combining this work into `ResolvePackageAssets` since it seems that would make sense even without a perf win (one central location for build for resolving package assets).  I can see what I can do to address this.'
2646,232425933,b'Fixed with the next push.'
2646,232426113,"b'Do we want to do that in addition to this test?  I feel like we should have at least one test covering self-contained builds from the ""build"" tests.'"
2646,232506741,"b'To be safe, I just restored both of these targets with a comment that they should be removed upon a toolset update that contains the fix.'"
2646,232506749,b'Renamed on next push.'
2646,232506769,"b""So I've changed this a bit in the next push.  Since we're emitting all assets anyway from `ResolvePackageAssets`, I now have more metadata on the items that signify if they should be copied local as well as properties needed to satisfy the copy.  We use that to populate what should be copied local.  Thus, we still write the same number of items to the assets cache, except now with some additional metadata for items that are to be copied local for build.  This calculation is done only when we need to write a new cache file, so if the assets don't change, there's only the overhead of filtering the asset items (read from cache) to what needs to be copied local."""
2666,233958692,"b""Explanation of change: `ReferenceCopyLocalPaths` is a superset of `_ResolvedCopyLocalBuildAssets` when we copy local package assets for build.  The intention of this was to add the subset of copy local paths that were not copied local from the build assets (`_ResolvedCopyLocalPublishAssets` may be a different set of items that was resolved just for publish).  If we're reusing the build copy local assets, then `_ResolvedCopyLocalPublishAssets` will already contain `_ResolvedCopyLocalBuildAssets`."""
2684,235536247,"b'We already set it at the item definition to `Always`, so I figured this was a less invasive change in case someone is using `ResolvedFileToPublish` items.\r\n\r\nhttps://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L25'"
2700,236928272,"b""Do you have a contact in Windows to query that might know?  This is relatively hacky, so I'd love a proper way of doing this.  Ideally (and what I assumed would be the case) Nano Server wouldn't export functions that aren't implemented as that's the simplest way to check if we can use an API.\r\n\r\nRe: calling `EndUpdateResource`: it will from the `SafeUpdateHandle`, but this needs a `using` statement, which I'll fix.\r\n"""
2700,236930294,"b""I'll collapse these two `if` statements into one.  Was the result of prior reformatting."""
2700,236930671,"b""I'm fine with that approach if others prefer it.  It would simplify this code a little and it should only occur once a build on (presumably) only Nano Server."""
2700,236932863,"b""Also, if this is a temporary fix (i.e. if we intend to rip this fix out for a cross-platform resource updater), then I'm more inclined to just catch the `EntryPointNotFoundException`, which seems to only occur for Windows Server 2016 Nano Server (end-of-support, I think).  I'll make that change."""
2778,244602071,b'Small nit pick: it looks like we generally use a tab width of 2 spaces in the targets files.'
2774,245459486,"b""```suggestion\r\n    <value>NETSDK1084: There was no application host available for the specified RuntimeIdentifier '{0}'.</value>\r\n```"""
2774,245459573,"b'In errors I think we should use `application host` or `apphost` as a shortened form.\r\n\r\nEither way, need to remove the extraneous `for` in the sentence.'"
2774,245459658,"b'Extreme nit: also, should we use present tense `There is no...` instead?  Although it is weird to me that this reads funny but ""was not found"" does not :/ Feel free to ignore.'"
2774,245459819,"b""An aside: what's with the changes to this file (i.e. the shuffling) while the others have the simple additions?"""
2774,245460027,b'Nit: move to inside `Items != null` check?'
2774,245461202,"b'I wonder if throwing an `InvalidOperationException` rather than `LogError` would be better?  The former would certainly lead users to file a bug (i.e. pretty easy for users to see a SDK task crashing as ""not my problem"") while this might require them to figure out what this means before doing so.'"
2774,245488992,b'What is this item used for?'
2774,245489037,"b'Should the item be conditioned on an empty resolved path rather than the property?  It seems odd to me that we have multiple `ResolvedAppHostPack` items, but expecting one to have a `Path` property to set the `AppHostSourcePath` property from.'"
2774,245489455,"b'This item now appears to be local to this target.  Perhaps the following for this target instead?\r\n\r\n```xml\r\n  <Target Name=""_GetAppHostPathsFromAssetFile""\r\n          DependsOnTargets=""ResolvePackageAssets""\r\n          Condition=""\'$(UseAppHostFromAssetsFile)\' == \'true\' and \'@(_NativeRestoredAppHostNETCore)\' != \'\'"">\r\n\r\n    <NETSdkError Condition=""\'@(_NativeRestoredAppHostNETCore->Count())\' > 1""\r\n                 ResourceName=""MultipleFilesResolved""\r\n                 FormatArguments=""$(_DotNetAppHostExecutableName)"" />\r\n\r\n    <PropertyGroup>\r\n      <AppHostSourcePath>@(_NativeRestoredAppHostNETCore)</AppHostSourcePath>\r\n      <AppHostIntermediatePath>$([System.IO.Path]::GetFullPath(\'$(IntermediateOutputPath)$(AssemblyName)$(_NativeExecutableExtension)\'))</AppHostIntermediatePath>\r\n    </PropertyGroup>\r\n\r\n  </Target>\r\n```'"
2774,245492607,"b'Thinking about this more, I think these three targets can be simplified to:\r\n\r\n```xml\r\n<Target Name=""_GetAppHostPaths""\r\n        DependsOnTargets=""ResolvePackageAssets""\r\n        Condition=""\'$(UseAppHost)\' == \'true\' and \'$(_IsExecutable)\' == \'true\'"">\r\n\r\n  <NETSdkError Condition=""\'@(_NativeRestoredAppHostNETCore->Count())\' > 1""\r\n               ResourceName=""MultipleFilesResolved""\r\n               FormatArguments=""$(_DotNetAppHostExecutableName)"" />\r\n\r\n  <PropertyGroup>\r\n    <!-- AppHostSourcePath will be set from ResolveFrameworkReferences if not using the apphost from the assets file -->\r\n    <AppHostSourcePath Condition=""\'$(UseAppHostFromAssetsFile)\' == \'true\'"">@(_NativeRestoredAppHostNETCore)</AppHostSourcePath>\r\n    <AppHostIntermediatePath>$([System.IO.Path]::GetFullPath(\'$(IntermediateOutputPath)$(AssemblyName)$(_NativeExecutableExtension)\'))</AppHostIntermediatePath>\r\n  </PropertyGroup>\r\n\r\n</Target>\r\n```\r\n \r\n`AppHostIntermediatePath` doesn\'t need to depend on the source path; we were always assuming the extension was `_NativeExecutableExtension`, which it should be.\r\n\r\n`_NativeRestoredAppHostNETCore` should be empty set when `UseAppHostFromAssetsFile` is not `true`, so the error check doesn\'t need an additional condition, but I wouldn\'t object to an additional check for `\'$(UseAppHostFromAssetsFile)\' == \'true\'` for clarity sake if you feel it necessary.\r\n\r\nWhat do you think?'"
2774,245492808,"b""If we do keep this as three targets, then this needs to be an absolute path to workaround an issue we were seeing with the Resource API used in the `ResourceUpdater` (I can't seem to find the issue, but it was reported from a user).  This is why we previously used `@(_NativeAppHostNETCore->'%(FullPath)')`."""
2774,245800806,b'Found the issue: https://github.com/dotnet/sdk/issues/2599'
2774,245840881,"b""You're right, I wasn't paying attention and didn't see that there's no `Include` on this item.  This is fine, so I'm resolving this comment."""
2805,247228253,"b""Completely ignorant of its existence \xf0\x9f\x98\x84 , thanks!  We should probably use it for the apphost customization (i.e. changing the subsystem in the PE header) too.\r\n\r\n**Edit: although this class appears to be a read-only interface, so the use case might only be applicable here.**\r\n\r\nI'll see what I can do to use the `PEReader`."""
2805,247233055,"b""After looking at the docs, the builder seems too heavy for that use case, and there's no easy way to transform a reader to a builder to make simple modifications from what I can tell.  I'd agree that it would be overkill to just toggle a byte at a well-known offset in the file."""
2860,250782915,"b'It should be, as < 3 (or not `NETCoreApp`) will cause the task to execute but not output any items since there were no framework references.\r\n\r\nThis is what we do now for any TFM since `ResolvePackageAssets` depends on this target too.'"
2881,252067631,"b'[You are correct](https://github.com/aspnet/Universe/blob/da48de7d7580ce316784dd3e250786ffa7017c25/src/Packages/Microsoft.AspNetCore.All/build/netcoreapp3.0/Microsoft.AspNetCore.All.targets#L10).\r\n\r\nPerhaps a check for ""not empty and not `Microsoft.NETCore.App`"" would be sufficient?\r\n\r\n'"
2881,252072911,b'Pushed.'
2883,252417398,"b""Can this return `ITaskItem` instead of an array?  It's a little weird that it does return a single item as an array, solely so that we can assign straight to `AppHost` above."""
2883,252418143,b'Nit: naming convention for property used for local variable.'
2883,252418914,b'Nit: using a negative assertion in a method name can be confusing.  Perhaps call this `CanResolveApphostFromFrameworkReference` or `CanResolveApphostFromAssetsFile` and use `if (!CanResolveApphostFromAssetsFile(...)))`?'
2883,252498989,"b""Do we need a null-check here from the `GetAppHostItem` return?\r\n\r\nI don't know how MSBuild handles output collections with null items (I assume ignore, but I'd like to not output any null items)."""
2883,252499376,b'Was this feedback going to be resolved as part of this PR?'
2883,252500104,"b""\xf0\x9f\x91\x8d what about Daniel's comment regarding checking the target framework in addition to the version?"""
2938,256966019,"b'That\'s a holdover from a different approach I was using that wasn\'t working for packing tools due to the dependency on the Publish target.  I will remove.\r\n\r\nWill and I need to talk about removing pack tool\'s dependency on the Publish target (seems like it could now rely on the ""copy local assets for build"" behavior in the SDK).'"
3021,265393459,"b""I'll fix."""
3030,267589566,"b""I don't have that strong of an opinion on this, so I can be convinced to fix it in the targets rather than the task.\r\n\r\nHowever, I highly doubt anyone would rely on this behavior since it only affected publishing .NET Framework-targeted non-exe projects prior to 3.0."""
3030,267591447,"b""I'll improve the comment then."""
3030,267966620,"b""Which specifically?  This was previously testing copying assets for netstandard targeted executable projects.  Is that even supported?  In my experiments, there's no way to run them."""
3030,267967559,"b'Erm, never mind, `IsExe` defaults to false in `TestProject`, so this was testing for netstandard libs, my mistake.\r\n\r\nShould I instead limit the output of the runtime target assets to `!= "".NETFramework""` so we can keep this existing behavior and test?'"
3030,267988538,"b""Ok I'll amend and restore the test, adding this one as an additional test."""
3030,268001194,"b""Hah, I had forgotten I added this test.\r\n\r\nI think I just added it as a check to see if `CopyLocalLockfileAssemblies` was being honored, without thinking through the scenario of actually wanted to copy local assets for `netstandard` TFMs.\r\n\r\nGiven that we've told people to just [set CopyLocalLockFileAssemblies for netstandard libs](https://github.com/dotnet/cli/issues/6261) in the past, perhaps we shouldn't break anyone relying on this.\r\n\r\nI'm in favor of suppressing the task output when the TFM is `.NETFramework`.  I don't see the benefit of always outputting the items and then filtering it based on `'$(TargetFrameworkIdentifier)' != '.NETFramework'` in the targets, but perhaps there is one I'm missing."""
3030,268005942,"b""That all still exists because currently publish assets can differ from build assets for, primarily, two reasons: packages were marked as excluded from publish or we filtered the packages based on a 2.0 runtime store.\r\n\r\nI would dearly love to rip all that out (I have a bug assigned to me to track that), but it would mean that excluded from publish packages no longer end up in the build's deps.json / copied local and that we can no longer support runtime stores.\r\n\r\nAt any rate, I think passing in a flag to request runtime target assets for `ResolvePackageAssets` makes sense."""
3079,272681620,"b'This is only true on Windows.  You\'ll need to use the `Constants.ExeSuffix` (e.g. `$""{testProject.Name}{Constants.ExeSuffix}""`) which is `.exe` on Windows and empty string on other platforms.\r\n\r\nThis appears to be why the tests are failing.'"
3079,272685307,"b""Erm, sorry.  This comment was meant for the assertion down below that doesn't have the RID.  This one is fine since it targets `win-x86`."""
3079,272685509,b'See comment above about using `Constants.ExeSuffix`.'
3079,272685955,"b'We have an assertion that can check for multiple files at once:\r\n\r\n```c#\r\nvar outputDir = buildCommand.GetOutputDirectory(targetFramework: ""netcoreapp3.0"", runtimeIdentifier: ""win-x86"");\r\noutputDir.Should().HaveFiles(FrameworkAssemblies);\r\n```'"
3079,272686493,b'```suggestion\r\n        private readonly static List<string> FrameworkAssemblies = new List<string>()\r\n```'
3086,272695305,"b""Judging from the description, this is an internal diagnostic meant to weed out instances where our assets aren't emitting with the correct metadata and therefore this doesn't need to be loc'd, correct?"""
3086,272695678,"b""Did we discuss the hash removal with the host team to verify that there aren't scenarios in which these get validated?"""
3086,272697158,"b'Also, is the `signature` field required in the schema?  Could we just not emit it at all?'"
3086,272773761,b'Nit: maybe a tuple here instead of the out params?'
3086,272773903,b'Nit: is this temporary comment from 2016 still relevant today?'
3086,272774543,"b'Taking into account that you called out the perf of this is not necessarily a main line concern (at least until we have confidence that we can get rid of the ""old""), but I wonder if `WriteDepsFileOld` and `WriteDepsFileNew` should take a stream instead of the path.  In the case of `new` and `old`, we write to a file stream.  In the case of `both`, we write to memory streams and compare them, then only write one of them to disk?'"
3086,272774751,"b""Oh and I second @rainersigwald's comment regarding the use of fluent.  I don't know what the proper exception message should be, however.  Even a diff of two deps files might be too verbose for a message.\r\n\r\nI guess if the comparison fails, we might just want both written to disk anyway so someone could diagnose the differences, so take my previous comment with a grain of salt."""
3086,272775166,"b'Should we not have kept `MetadataKeys.RelativePath`?  When I saw the change to `MetadataKeys` earlier, I thought `PathInPackage` was going to replace all uses of this metadata key.'"
3086,272775811,"b""I also agree with Will that the complexity of some of these methods inherited from the old implementation might need some refactoring for clarity.\r\n\r\nIf now isn't the time to do that, then I think we should file an issue to address it when we remove the old code."""
3086,272776210,"b""If we don't write it to disk, I think we should emit a diagnostic message containing the old and new content that we can get in a log (probably not in the exception message; who wants to see that in their build output when they run into a bug?).\r\n\r\nMy concern is that we're going to fail the build when the deps file isn't what we expect, and users won't be able to provide us with something we can use to diagnose the problem."""
3086,272776602,"b'I\'d also be comfortable ""enough"" with ""new by default with escape hatch"" as well, but the ""both"" model does have the benefit of ensuring compatibility correctness, such that we don\'t erroneously publish a user\'s application with a bad deps file, breaking them at runtime.  That scares me.'"
3079,272779231,"b""My previous comment on this line was incorrect as I had originally meant it only for the one in `GroupNotPopulatedWithoutRid`.  This one should be explicitly `.exe` rather than using `Constnats.ExeSuffix` since we're building for Windows.  Sorry about the confusion.\r\n\r\nThis is the cause of the currently failing tests."""
3112,274547180,"b""Good idea. I'll make that change."""
3112,274549481,"b""While this particular package might have been erroneous, several of the MSBuild special characters are legal path characters on supported systems.\r\n\r\nI don't have a particularly strong opinion on fixing this since this bug has been around for a very long time now and I'm guessing it has impacted very few, if any, users.  My argument for fixing it would simply be that the fix is simple, low-risk, and it makes asset resolution more robust to any paths contained in a package."""
3112,274562746,"b""To @dsplaisted's original point, a comment here would be appreciated as to why this particular package is being used for the test.  I'll at least add that while we deliberate on whether or not this should be fixed."""
3141,276828603,"b""So `$(ProjectDepsFilePath)` will be the deps file from the build output, which currently may differ from the one that might get generated from the publish operation.  We're planning on hopefully making these one and the same for 3.0, but right now there's a possibility that the publish targets might [generate its own deps file in the publish directory](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L728).\r\n\r\nIf a deps file does get generated on publish, then the path would be in the [PublishDepsFilePath  property](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L738).\r\n\r\nHowever, this target gets called last in publishing and occurs after the calculation for resolved files to publish.  We should refactor is so that the property gets calculated earlier.  If it's empty, you could use `$(ProjectDepsFilePath)` instead."""
3141,276855586,"b'Right, I think we can safely move setting the property to a dependent target.  I think moving it to `_ComputeUseBuildDependencyFile` would do the trick, since both `GeneratePublishDependencyFile` and `ComputeFilesToPublish` depend on it.\r\n\r\nIt would set the `PublishDepsFilePath ` property if it calculated `_UseBuildDependencyFile` to `false`'"
3141,276869839,"b""I think this should move into the `PropertyGroup` below after `_UseBuildDependencyFile ` is set and be conditioned on `'$(_UseBuildDependencyFile )' != 'true'`."""
3141,276870643,"b'Actually, scratch that change for a second.  Let me rethink this.'"
3141,276871386,"b'Actually, the more I think about this, the more it doesn\'t matter to the output group whether it\'s the build or publish deps file.\r\n\r\nWhat matters is if `GenerateDependencyFile` is `true`, then there will be a deps file in the publish output at `$(PublishDir)$(ProjectDepsFileName)` at the end of publish.  If we\'re using the build deps file, it will be copied to that location and already be an item in `ResolvedFileToPublish`.  If we\'re not using the build deps file, we generate a new one at that location, but it does not end up as an `ResolvedFileToPublish` item.\r\n\r\nWhat we really need here is this, a single entry to include the deps file if it isn\'t already in `ResolvedFileToPublish`:\r\n\r\n```\r\n<PublishItemsOutputGroupOutputs Condition=""\'$(GenerateDependencyFile)\' == \'true\' and \'$(_UseBuildDependencyFile)\' != \'true\'"" Include=""$(PublishDir)$(ProjectDepsFileName)"" TargetPath=""$(ProjectDepsFileName)"" />\r\n```\r\n\r\nI think we can revert the other changes.  Sorry for my confusion.\r\n'"
3141,276889561,"b""If `GenerateDependencyFile` is `false` (say your project targets a .NET Framework TFM), no deps file will be generated, so I would expect the output group to reflect that.\r\n\r\nAdditionally, if `_UseBuildDependencyFile` is true, then I would expect `ResolvedFileToPublish` to [already contain the deps file](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L339-L343).  Are we sure that isn't the case?\r\n\r\nIf so, is there a specific problem with the suggested line above?"""
3141,277046034,"b'I\'m confused what the use of the output group is then if all the files need to exist before the publish operation, since that would naturally exclude anything the publish operation generates itself (i.e. files that aren\'t related to build output).  Should it not describe the ""output"" of the publish operation were it run?'"
3141,277093889,"b'Ok, it just seems odd to me that it\'s a ""publish"" output group, but contains build output items.  They aren\'t necessarily the same thing as the publish operation itself might create files that do not exist as build outputs.  If I were a user, I\'d expect the installer to be operating off the publish output itself, but I can understand the limitation at work here.'"
3141,277094705,"b'Actually, I\'m not sure this is going to work as you have it.  If I build an application that has assets marked as excluded from publish, the build output currently will depend on those assets in the *build* deps file.  If you publish the application, those assets are excluded from `ResolvedFileToPublish`.  Copying the *build* deps file might not work because it\'ll have dependency information on assets that aren\'t being copied.\r\n\r\nCan you check if this solution works with a dependency on a package that has `Publish=""false""` in its `PackageReference` metadata?\r\n\r\nThis is something we\'re still looking on fixing for 3.0 (i.e. making build deps file generation entirely coherent with publish\'s output), but that\'s not it works today due to supporting some legacy scenarios.'"
3141,277098593,"b""I'm fully onboard with that and that would fix this particular deps file problem (assuming there is one).  It wouldn't resolve the issue where the publish target generates additional files, though."""
3141,277109055,"b""We're fairly confident, I think.\r\n\r\nI'm fine with taking this as-is to unblock your scenario, if it does so for now.  @dsplaisted do you have any additional feedback?"""
3179,278735435,"b'Nit:\r\n\r\n```suggestion\r\n                        if (_dependencyLibraries.TryGetValue(dependencyName, out var dependencyLibrary))\r\n```\r\n\r\n\r\n```c#\r\n...\r\nincludedDependencies.Add(dependencyName, dependencyLibrary);\r\n...\r\n```'"
3183,279236019,"b""Altering most of these properties would result in the wrong path to the import profile the tests that were added create, so it will cause them to fail because the wrong output from the publish will occur (primarily the publish directory won't exist since it'll be RID-less)."""
3183,279236119,"b""These are files that the publish profile doesn't affect, but it ensures the publish succeeded to the right (RID-based) path."""
3212,282279236,"b""I'd second that.  I think we can work this logic into the place we default `UseAppHost`."""
3197,284366306,"b""That's the RID I use to run tests locally on my MBP."""
3247,285283854,"b""That was my assumption; I looked high and low for any usages and couldn't find any."""
3247,285284048,b'I can add that.'
3262,287073765,"b""Apparently `@$` is too new a feature for us :(\r\n\r\nI don't know what the semantic difference `@$` poses over `$@`, though."""
3275,289129985,b'`MakeFrameworkReferencesWorkPlease`'
3275,289130172,"b""I'll make that change."""
3275,289135167,"b""The logic is a little confusing.  `frameworkReferenceMap` is mapping the `FrameworkReference` names to their item specs.  We're iterating the *known* frameworks and checking to see if it's in the map to see if it is being referenced.\r\n\r\nThus `frameworkReference` is only non-null if it's being referenced by the project.\r\n\r\nActually, now that I think about it, this should probably have a check for skipping `WindowsDesktop` on non-Windows when *not referenced* (but that's not an error condition) to avoid the download.  I'll fix. """
3275,289168975,"b'Thanks for the feedback, both.  I will investigate this.'"
3275,289169179,"b""Great idea.  I'll make that change."""
3275,289169385,"b""Thanks, I wasn't aware of that.  I'll fix."""
3275,289169596,"b""I can also address that; there's one or two other tests I've added prior that does this, so I can update those at the same time to use the new property."""
3275,289170179,"b""Agreed.  I'll fix."""
3275,289189817,b'Perhaps we should mark the `FrameworkReference` as windows only (copying the metadata from the known framework reference) and then again check the platform when resolving targeting pack assets to handle the transitive case? Thoughts?'
3275,289190157,"b""Scratch that, we don't output those currently.   Still looking for a minimally invasive way to handle the transitive case."""
3275,289207857,"b""I've been staring at the targets and tasks for a while now and I think I'll need more time than we have for P6 to gracefully handle the transitive case.\r\n\r\nI'm going to push up the feedback changes and proceed and I'll file an issue to improve the transitive experience."""
3275,289234985,b'Will add.'
3311,291718668,b'Is this check redundant?'
3315,292132933,"b""Nit:\r\n\r\n```suggestion\r\n    <value>NETSDK1107: Microsoft.NET.Sdk.WindowsDesktop is required to build Windows desktop applications. 'UseWpf' and 'UseWindowsForms' are not supported by the current SDK.</value>\r\n```"""
3315,292133263,b'Is this going to be used by a future change?'
3315,292133410,b'Is this going to be used by a future change?'
3316,292163240,"b'Now that this is gone, can we rename `DependencyContextBuilder2` to `DependencyContextBuilder`?'"
3315,292182863,b'Nice catch as I missed this (unexpanded) file.  I wonder what caused this.'
3315,292183146,b'It happened to `src/Tasks/Common/Resources/xlf/Strings.tr.xlf` too.'
3320,292612100,b'Is this not missing a `(`?\r\n\r\n```suggestion\r\n        <DestinationSubPath>%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(ReferenceCopyLocalPaths.Filename)%(ReferenceCopyLocalPaths.Extension)</DestinationSubPath>\r\n```'
3320,292618885,"b""It looks like `DestinationSubPath` isn't used, and `RelativePath` is set based on `DestinationSubDirectory` [here](https://github.com/dotnet/sdk/blob/c561c3f7e1ad8da7db424c75338c9d81623b2d99/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L410).\r\n\r\n"""
3320,292621671,"b""That is to say, it isn't being used by the targets that follow.  I think it would get used for conflict resolution, but that doesn't depend on this target."""
3326,294972511,"b""I was actually going to ask that, but there didn't seem to be any reason since the others didn't check the output at all and this one was checking for an error."""
3344,295576813,"b""What's the reason for removing the id-prefix from the message?  Is it because it's not an error? """
3344,295583336,"b'My only concern is it makes it harder to google for the curious, but thanks for the explanation.'"
3348,296880576,b'Style nit:\r\n\r\n```suggestion\r\n                if (!shouldCopyLocal && !shouldIncludeInPublish)\r\n```'
3348,296882254,"b""As we're now writing out additional metadata, do we need to rev the cache format version number?"""
3348,296884528,"b""I wish there were some way to combine this with the `Include`.  Perhaps three includes, one for each item type (`NativeCopyLocalItems`, `ResourceCopyLocalItems`, and `RuntimeCopyLocalItems`) that is conditional as not being excluded from publish?  Not that users typically have large sets of excluded packages, but I'd hate to dump them all in a set and then have to traverse the set to remove them again."""
3348,296892579,"b""Weird, when I submitted my review I guess I didn't commit this review comment:\r\n\r\nThis updated comment seems now out of date with the logic of how `_UseBuildDependencyFile` is calculated as it is still predicated on there being no excluded from publish packages (if the set of package assets differ then it makes sense that the build's deps file can't be copied verbatim)."""
3348,296895122,"b'I think the duplicate logic is still used by `ResolveCopyLocalAssets` (the old publish asset resolving code that still gets invoked when there are runtime stores being used after these changes).\r\n\r\nWe might be able to consolidate this bit, but might also not be worth the effort if the intent is to remove `ResolveCopyLocalAssets` and the `AssetsFileResolver` (and then by extension, `ProjectContext.GetRuntimeLibraries` as referenced) in the future.\r\n'"
3348,296984792,"b'Not three separate lists, three includes into the same list.\r\n\r\nI.e.:\r\n\r\n```xml\r\n<_ResolvedNuGetFilesForPublish Include=""@(NativeCopyLocalItems)"" Condition=""\'%(NativeCopyLocalItems.CopyToPublishDirectory)\' == \'false\'"" />\r\n<_ResolvedNuGetFilesForPublish Include=""@(ResourceCopyLocalItems)"" Condition=""\'%(ResourceCopyLocalItems.CopyToPublishDirectory)\' == \'false\'"" />\r\n<_ResolvedNuGetFilesForPublish Include=""@(RuntimeCopyLocalItems)"" Condition=""\'%(RuntimeCopyLocalItems.CopyToPublishDirectory)\' == \'false\'"" />\r\n<_ResolvedNuGetFilesForPublish Remove=""@(_PublishConflictPackageFiles)"" Condition=""\'%(_PublishConflictPackageFiles.ConflictItemType)\' != \'Reference\'"" />\r\n```'"
3389,299790354,b'This appears to be unused.'
3393,300202490,"b""I'm definitely open to suggestions regarding these two error messages."""
3393,301312170,"b""This is primarily why I wanted suggestions \xf0\x9f\x98\x84.  These are internal errors that are not actionable by users directly and I'd love to point them towards a way to inform us of the problem, even if it's really unlikely users would ever run into these before we do.  But I can understand not wanting repo references in the error messages."""
3393,302282514,b'Maybe a more generic `aka.ms/dotnet-core-issue` that takes them to `dotnet/core` and we can triage from there?  Thus we could use it for anything we consider an internal issue regardless of where it actually belongs.'
3393,303147115,"b""What about using `aka.ms/dotnet-core-sdk-issue` and we can point it at either the CLI or SDK repos? It's likely that the issue really belongs to core-setup for these two errors, but I think we should be responsible for triage given the errors are coming from the SDK.\r\n\r\nWe can then use the aka.ms link for any other internal SDK errors in the future."""
3393,303673451,"b""It should be; even if the file system is case-sensitive, we wouldn't ever want case-insensitive duplicates in the list.\r\n\r\nI'll fix."""
3427,304062326,"b""I'll catch the specific exceptions and log them if a logger was provided. """
3427,305046990,"b""I'll remove.  That's what I get for going through the docs and looking for what it throws without checking for base types."""
3441,305567391,b'I think we can probably do without addressing that corner case with these changes.'
3373,307540778,"b'I\'ll update to make that more clear.  That\'s correct, missing ""in addition to"" sentiment.'"
3373,307540881,"b""I'll amend."""
3373,307541310,"b'How about:\r\n\r\n```xml\r\n<!-- \r\n    PreserveNewest means that we will only copy the source to the destination if the source is newer.\r\n    SkipUnchangedFiles is not used for that purpose because it will copy if the source and destination\r\n    differ by size too.  Instead, this target uses inputs and outputs to only copy when the source is newer.\r\n    -->\r\n```'"
3373,307541593,"b""How about:\r\n\r\n```xml\r\n <!--\r\n    Use SkipUnchangedFiles to prevent unnecessary file copies. The copy will occur if the\r\n    destination doesn't exist, the source is newer than the destination, or if the source and\r\n    destination differ by file size.\r\n    -->\r\n```"""
3373,307588526,b'\xf0\x9f\x91\x8d '
3470,307945194,"b'Will and I talked this over.  I\'m going to rebase these changes on top of his work. I will move the retry to the outer `HostWriter` call (in the task) to retry the whole operation again.  It\'ll be slightly less efficient in the error case, but won\'t require us to modify `HostWriter` in ask mode.\r\n\r\nAnd I agree that ""retry"" sounds very build-oriented in nature, so that belongs in the task.'"
3484,308542614,b'This exception is currently private in core-setup.  We would need to update the `ResourceUpdater` to be able to catch it more specifically than `Exception`.'
3484,308861027,"b""I'm fine with reusing the same properties.  I'll fix."""
3484,308861803,"b""I can live with `ex.GetType().Name` check for now and file a core-setup bug to make the exception public (and better).  I'll fix."""
3484,308893932,b'Filed as https://github.com/dotnet/core-setup/issues/7516.'
3484,308917959,"b""Where do `CopyRetryCount` and `CopyRetryDelayMilliseconds` get defaulted?  I can't seem to find them being defined in the common targets/props.\r\n\r\nI think we should be defaulting the apphost creation retry count to non-zero."""
3484,308947105,b'I moved the defaulting of the properties out of the target and will reuse `CopyRetryCount` and `CopyRetryDelayMilliseconds` if I can find where they would be defaulted (and the defaults make sense for this use case).'
3484,308955651,"b""That approach works for me.  I'll do that."""
3500,310339308,"b""That's what Rainer said on the previous PR.  I can amend this.  This PR was an attempt to see what the hell is going on with full framework CI (I've had wonkiness with changing target branches in GitHub UI prior, so I thought I'd give a new PR a try).  I can't explain the test failures and release/3.0.1xx is passing tests locally for me."""
3500,310711196,"b""I'll make that change."""
3505,310813623,b'Would it ever be .exe on non-Windows?'
3505,310814040,"b""I'm confused about the change to the tests.\r\n\r\nShouldn't the `RunCommand` be the apphost for Windows and non-Windows?  I see nothing that would limit it to just Windows from these changes.\r\n\r\nI don't see why a change to pack would impact this test, other than `PackAsTool` projects should now debug/run with the apphost since they'll set `UseAppHost` by default."""
3505,310825364,b'Looks good.  I think we can probably change the test name back or update it to reflect it checks the runcommand too.'
3516,312263092,"b""Works for me.  I'll switch it to 4.0."""
3528,314044796,b'Is this `#if` necessary or can we use `OverrideVersion.TryParse`?'
12724,465207703,"b'Or unset `IncludeNativeLibrariesForSelfExtract`, right? Maybe just state the contract, something like, ""if IncludeAllContentForSelfExtract is true, IncludeNativeLibrariesForSelfExtract must not be false""?'"
12724,465211120,b'Does the `>` need to be escaped here (because XML)?'
12815,467199425,"b'I don\'t love the comment ""fix the errors"" because there\'s almost certainly going to be a case where the linker crashes or circumstances make it impossible to fix the errors. It\'s probably fine to just say, ""Optimizing assemblies for size failed. Optimization can be disabled by setting the PublishTrimmed property to false.""'"
12919,470743407,"b""The root problem here is that ChooseAppHost picks either the app host or the single file host, depending on options, and copies one to the intermediate output directory as 'app.exe'. If you switch which app host you are using by changing the options, it still looks like the copy in the intermediate output directory is up to date because it has the same name. \r\n\r\nWith this change we now look for app host.exe or singlefilehost.exe, so if you switch the property you'll look for a different file, and the up to date check will work properly. This relies on publish cleaning the final output directory, but that seems to work fine. """
817,99495782,"b""Thanks, Daniel. I'll give this a try.\r\n\r\nIn trying to repro the issue in a test Friday, I noticed that TestLibrary.csproj under KitchenSink isn't set to create documentation files. I thought I would have a repro by adding them but no luck. I added the documentation files to the build output and they did get published, causing the test I was looking at (`GivenThatWeWantToPublishAProjectWithAllFeatures.It_publishes_the_project_correctly`) to fail because the doc files were not in the expected output list. So SDK's tests seem to be doing something different from the CLI and don't exhibit the bug. However, the change above, when used in the CLI, does fix the bug. \r\n\r\nThis is my first foray into the SDK codebase so any insights are welcome. I definitely plan to get a test around this."""
817,99654952,"b""There is a good use case for using documentation files at runtime in web projects. I've used them to show programatically-generated API docs in a very similar way to what @masterjs and @dasMulli described in the issue. I'm not sure if the same use case exists for NuGet packages. That seems like it would much less common. P2P references probably fall somewhere in between.\r\n"""
817,99656537,"b'I pushed up a change to include doc files in the TestLibrary.csproj build output. This actually does cause the test to fail because the files do get published and (according to the way the test is currently defined), these files are not expected. The thing is, this change to TestLibrary.csproj will cause this test to fail even in the absence of the change I made to the targets file. '"
828,99750906,b'Calling this LibraryWithRid would be a bit clearer.'
852,100581003,"b""I'll back out this change.  """
14379,516229603,b'This is supported directly by System.CommandLine using the `[debug]` directive.'
14379,516230651,b'This looks redundant with the System.CommandLine behavior.'
14379,516231299,"b'Though the output might be slightly different, this is supported directly by System.CommandLine.'"
14379,516231589,"b'For these, I would suggest using `Option<T>` rather than `Option`.'"
14379,516232102,"b""I'd suggest using `Argument<T>` rather than `Argument`.  Setting the arity should be unnecessary."""
14379,516303345,b'This can probably inherit `Option<T>`.'
14379,516308077,"b""This could be an option or argument but it looks like we're expecting a command."""
14379,516308476,"b""This could be an option or argument but it looks like we're expecting a command."""
14379,516309477,b'Arity should be unnecessary if you use `Argument<T>`. (You might want to use `Argument<FileInfo>` here.)'
14379,516312186,"b'There are overloads for `ValueForArgument` and `ValueForOption` that take `Argument<T>` and `Option<T>` respectively, so if these objects, rather than just the strings, can be referenced here, it should provide some perf benefit because the lookups are more efficient.'"
14664,529782097,"b'The System.CommandLine behavior is by design. \r\n\r\n> An option and its argument may or may not appear as separate tokens. (In other words, the whitespace separating them is optional.) Thus, \xe2\x80\x98-o foo\xe2\x80\x99 and \xe2\x80\x98-ofoo\xe2\x80\x99 are equivalent.\r\n\r\nhttps://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html\r\n\r\n\r\n \r\n\r\n\r\n\r\n'"
397,90190934,b'thank you been a while since I did any msbuild @dsplaisted for some reason in linux the build is not working right with a clean checkout it check out the gist for the build out put: https://gist.github.com/dmportella/38d7ded5cd46747afb2f047a944df510\r\n\r\nI will push the new changes '
2545,219338566,"b""I wasn't sure if it makes sense to take up NETSDK error codes for these exceptions since they should only fire if someone tries to use ResourceUpdater incorrectly. Some of the other non-localized exceptions are implementation details of the updater that could change if we make it possible to customize a windows apphost from unix. @nguerrera do you have a recommendation?"""
2545,219959596,"b""I don't think this is worth doing due to the amount of work it would take to check that the icon or manifest is correct in the output - unless there's an existing end-to-end test for resources in roslyn, but I couldn't find anything like that."""
2545,220365981,"b""@nguerrera generating the apphost into the intermediate directory would still have a dependency on CoreCompile, wouldn't it?"""
2545,220379741,"b'Agreed that if the apphost creation will be invoked in a way that doesn\'t expect compilation to happen, it shouldn\'t depend on CoreCompile. But the current target logically depends on an up-to-date IntermediateAssembly, and I think ""DependsOnTargets=CoreCompile"" captures that.\r\n\r\nIf the scenario you\'re thinking about is one where we do ""publish --no-build"", and expect that this will create an apphost for the previously-built intermediate assembly (even if source files are out of date), then I can see your concern. To me it makes sense to implement this by expressing the dependency on the outputs of a target that logically produces IntermediateAssembly, and having that target internally respect the --no-build option by using the existing IntermediateAssembly in that case. This way the --no-build behavior is transparent to targets that depend on build outputs.\r\n\r\nAfterTargets=CoreCompile could work, but that has other issues. Any inputs to the apphost generator that don\'t come from CoreCompile should trigger apphost re-generation if they change. For example, setting the target to WinExe should cause the apphost to be re-generated with the gui bit, even if we don\'t want to re-compile.'"
2545,220388024,b'Went ahead and made them into localized strings.'
2545,220388073,b'I used your suggested convention.'
2545,220388237,"b'I made it IDisposable, using a new SafeUpdateHandle.'"
2545,220388305,b'Introduced ResourceNotAvailableException for this.'
2545,220388354,b'I took your suggestion and removed AppHostOptions.'
2545,220388444,"b'Just something I missed. I made it internal, thanks.'"
2545,220389462,b'Thank you. Fixed in https://github.com/dotnet/sdk/pull/2545/commits/ea4f506a0916f8523e32273ceff64f3ecd82a2a1. I also moved away from ThrowExceptionForHR due to https://github.com/dotnet/sdk/issues/2552.'
2545,220398652,"b'It generally makes sense for GetCopyToOutputDirectoryItems to trigger compilation, because it logically depends on the compilation output through the apphost. If we want to optimize for ""publish --no-build"", we need to cut out some some dependency edges from Publish -> CoreCompile in this case (or alternatively make CoreCompile do nothing).\r\n\r\nIn https://github.com/dotnet/sdk/pull/2111, it looks like we already cut one edge from Publish -> CoreCompile by making Publish not depend on Build in the ""--no-build"" case. Maybe we want to do something similar here? We could make GetCopyToOutputDirectoryItems depend on _ComputeNETCoreBuildOutputFiles unless NoBuild is specified. If NoBuild is specified, GetCopyToOutputDirectoryItems could just try to get the last-built apphost from the intermediate directory.\r\n\r\nJust an idea, but I\'m sure there are more constraints I don\'t know about. I\'ll let you decide how you think this should be done - let me know if there\'s anything I can do to help!'"
2545,220761211,b'Thanks @rainersigwald and @nguerrera. I think the latest change does the trick - PTAL.'
2545,220763335,"b""I didn't change the destination apphost path at all in this PR, but I can fix it with your suggestions. Why `$(IntermediateOutputPath)` instead of `$(BaseIntermediateOutputPath)`?\r\nI don't know if there's a reason we put it in the host subfolder. Should I remove that?"""
2545,220763932,"b""Ok! I'm happy to do it here as well since it's small, just wanted to understand your suggestions."""
2545,221675246,"b""I don't think so, unless we change when AssignTargetPaths runs. I see this dependency chain putting AssignTargetPaths before build, which is too early for the AppHost: CoreBuild -> PrepareResources -> PrepareResourceNames -> AssignTargetPaths."""
2545,221684204,b'Made it private.'
2545,221684385,b'Thanks for the explanation. Changed to `IntermediateOutputPath`.'
2545,221684474,"b'Good suggestion, fixed.'"
2545,221689903,"b""Oh, I think I understand now. It seems strange that we would add the apphost to None potentially before it exists. Won't that cause some item metadata to be missing?"""
2545,221739227,"b""I'll leave it as-is then. Thanks for all the help!"""
3125,275069012,b'Good question - @fadimounir can you answer this?'
3125,275069387,"b""I think you're right that it would make sense for netstandard, and the linker behavior is probably similar to the portable app case."""
3125,275547589,"b'I think that since linking happens during publish, the normal workflow of packaging a netstandard library would not run the linker, and it would take some work by library authors to package a linked library. I agree that it makes sense not to block it here.'"
3125,276315309,"b""I believe @nguerrera preferred to delete individual files rather than directories to be conservative and reduce risk of deleting things we shouldn't be. Please correct me if I'm wrong. :)"""
3125,276319824,"b""I'd like it to be in the SDK if possible. With the out-of-band linker package, we shipped our own targets that we had trouble keeping in sync with the SDK (see https://github.com/dotnet/sdk/issues/2583 for a taste of the issues).\r\n- One advantage that you already pointed out is that we don't have to use BeforeTargets/AfterTargets as an extension point.\r\n- There's also the dependency in `_ComputeUseBuildDependencyFile`: https://github.com/dotnet/sdk/pull/3125/files/3f83d196a8476f3889e2191e00c465e0c113b4a6#diff-7dc833d02f198e5a9f0ab88e229db18aR781.\r\n- Finally, the use of `ResolvedFileToPublish` as an input is something that I hope we can replace with a more well-defined list of runtime assemblies (see https://github.com/dotnet/sdk/issues/3109), which is another case where we have a pretty tight coupling with the SDK."""
3125,276320839,b'Good question - I see some targets that have `$(MSBuildAllProjects)` as an input. I believe that would have the desired effect. @nguerrera is that the correct approach? Is there a way to accomplish the same thing for properties passed on the command-line?'
3132,276407555,b'Should this be checking `PublishSingleFile` as well?'
3125,276409687,"b'The most important thing is that we have tests for the logic in these targets in the SDK repo. As long as we do that, it could live in either place but I think here makes sense. Curious what you think @nguerrera.'"
3132,276435598,b'Oh you already fixed it. :)'
3125,276869608,"b""Named it `_ExtraTrimmerArgs`. I don't want to advertise this as a public facing option, and am hoping we can stop using it in the future in favor of defaults that do the right thing. Taking a property here makes it easier to test and makes it easier for us to give users workarounds in case they encounter issues."""
3125,276869894,"b'I removed this, and made `_ILLink` a direct dependency of `ComputeAndCopyFilesToPublishDirectory`.'"
3125,276872429,"b'Yes, thanks!'"
3125,277111745,"b""@nguerrera mind if I do that in a follow-up PR? I'd like to get this change in sooner rather than later."""
3125,277113964,"b""They are files. In the OOB package we supported this to make it easy to test on the command-line. I'll get rid of this in a follow-up and we can iterate there."""
3157,280632533,"b""Yes, it only recognizes native binaries. Adding the deps file here is a workaround for the lack of a proper input set that represents the set of runtime assemblies. The input `_NativeAssetsToFilter` is computed as `ResolvedFileToPublish`-`_ManagedAssembliesToLink`, so it includes text files and other things. The out-of-band linker package used `ResolvedAssembliesToPublish`, which was a closer approximation. For this to work with apps that publish additional content files, we'll need to compute the correct input set."""
3157,280632536,"b'I believe that if the managed dlls use the native lib via a pinvoke, it will be kept due to a moduleref, but I need to check this. Maybe in addition we could also include a way to explicitly ask it to be kept, for cases where the native binary is used indirectly.'"
3157,280632598,"b""I believe that's fixed with https://github.com/dotnet/sdk/pull/3156."""
3192,285231792,"b""We have it in the stage 0. I don't think any logic related to this task would actually find dotnet on the path (the task uses the inputs or DOTNET_HOST_PATH directly). This PR was failing on windows when I introduced https://github.com/dotnet/sdk/pull/3192/files#diff-a532d5eabf1063f35b5fda0af8edd118R129, but passes again with the fix."""
3231,285236225,"b'Oh that looks much better, thanks!'"
3231,285315141,"b""I've addressed your feedback. Would you mind taking another look?"""
3279,289089674,"b""It's not testing a user scenario. The user scenario we want to enable is the one that roots non-fx assemblies. Some of the other tests are checking that the linker is actually running by testing its ability to strip some specific code from our test project - which doesn't happen in the default mode, but is how we tell that the linker is running end-to-end."""
3279,289093955,"b'Pretty much. Adding custom root assemblies or root descriptors will be supported, but we won\'t have a way to say ""aggressive"" and have that translate into a different set of specific illink options (at least in this preview). Someone who wants to do that will have to use the ILLink task directly or something similar.'"
3279,289097177,b'Sure!'
3279,289178298,"b'Thinking about how to do this... is it fine to use `<Message Text=""..."" Importance=""High"" />`, or do I need to worry about localization? Would you like me to introduce a `NETSdkInformation`? @nguerrera '"
3279,289192515,"b""The currently-supported ways to override defaults are:\r\n- adding roots via `TrimmerRootDescriptor` and `TrimmerRootAssembly`, which doesn't make it any more useful for portable apps, and\r\n- using ILLink task directly, explicitly specifying the set of roots.\r\n\r\nSomebody could do what the tests do and remove items from the defaults, but it requires depending on a private target.\r\n\r\nIn the future we may consider supporting something like `IsTrimmable` on `PackageReference`s, but until then I think we should keep the error - I can't think of a reasonable condition to put it under with the current override mechanisms. And someone who is willing to use the task directly will likely be able to work around the error as well.\r\n\r\nI'll add a comment indicating as much."""
3279,289193929,"b'I also wanted to note more generally about overriding defaults - the out of band package had more high-level msbuild properties that mapped to different combinations of roots and linker actions. However it ended up with a bunch of logic in msbuild that wasn\'t tested and kept breaking. If we do introduce a high-level ""mode"" concept, we\'ll need to ensure test coverage of different modes, and probably make this concept known to illink itself.'"
3279,289200701,b'I added `NETSdkInformation`.'
11317,412428486,b'Thanks!'
11458,416841171,"b""I'll look into always filtering out pre-link PDBs from the output - then the linker option will be used to choose between a linked PDB or no PDB. I'm wondering if we need to continue supporting the current behavior (a way to keep a pre-link PDB as part of the output)? I'm guessing not really - but it might be useful if there are any issues with PDB linking."""
11880,435534769,"b""I am going for opt-out. From the section of the spec where it introduces the metadata:\r\n\r\n> RuntimeHostConfigurationOption items will have optional boolean Link metadata which indicates that the feature setting should be optimized by the linker. This metadata can be set to false either in the SDK (for features which don't have defined linker optimizations) or by developers (if they want to disable linking of a particular feature). The default behavior will be for boolean RuntimeHostConfigurationOptions to be treated as if Link == true, using ItemDefinitionGroup or an appropriate MSBuild mechanism.\r\n\r\nYou're right that we need to filter out non-booleans. I will do that and add a test for this case, and also update that misleading line in the spec.\r\n\r\nThanks!\r\n"""
11880,435544618,"b""The reason I did this is that I want the test to fail if the built-in `RuntimeHostConfigurationOption` definition ever moves to a target that doesn't run before the linker. Do you think that is worth testing for?"""
11880,435548462,"b""I see - I wasn't sure that that would be a breaking change. I will take your suggestion."""
11880,437781334,b'Switched to opt-in here and in the spec. Thanks!'
12116,444374498,"b""The task still looks for `Action` metadata. Once the naming is finalized, I'll update the task and remove the workaround."""
12116,444528359,"b'I plan to merge this PR before https://github.com/mono/linker/pull/1292, then update the SDK in the linker repo so that integration tests pass there, and then remove this workaround when the linker change is in.'"
12116,444554747,"b""Correct. Technically they can do so, but it's unsupported - it wouldn't work with the rest of the publish pipeline. I'll make a note here."""
12116,444561573,"b""I suppose we could change the implementation to support this in case people wanted to add linker inputs that aren't normally a part of publish, or exclude some assemblies from being analyzed by the linker but still have them be processed by `PublishReadyToRun`.\r\n\r\nNormally though, I'd recommend changing the publish set instead. I generally prefer to restrict what we officially support until there is a more obvious scenario we can use to check the behavior."""
12144,447151084,"b'We need some way to set the linker option to `true` when `DebuggerSupport` is empty. We could do that by defaulting `DebuggerSupport` itself to `true`, but I don\'t want to commit to making that default available at a particular place in the import chain - it would have to happen before `RuntimeHostConfigurationOption`, but if it happens too early, then SDK components won\'t be able to distinguish between the default `true` and an explicit `true` set by the user.\r\n\r\nAside from that, this provides an ""escape hatch"" for people who want to tweak just the linker settings and are ok with relying on an unsupported property to experiment with things - see @eerhardt\'s [comment](https://github.com/dotnet/sdk/pull/12144#discussion_r446146454) for example.'"
12144,447995521,"b'It\'s necessary because the existing task option has the opposite polarity of the public property. (I don\'t think you can pass `=""! $(TrimmerRemoveSymbols)""`). We could remove this by changing the task option (and maybe the command-line arguments). edit: @eerhardt beat me to it. :)'"
12144,449198416,"b""It's already hooked up - `TrimmerRemoveSymbols` sets `_TrimmerLinkSymbols` (inverted) which is already consumed by the linker (`LinkSymbols` on the task -> `-b`). If you would like, I can change the linker task option (in a separate change) to `RemoveSymbols` so that we can simplify this."""
12362,450502917,"b""One of the design goals of the feature switches is to define a general-purpose pattern we use for features - the linker's ability to drop code for disabled features is just one use case (you could in theory disable a feature without linking for example) - so I think we don't need a prefix. edit: as usual @eerhardt beat me to it :)"""
12422,460313947,"b""Is `AnalysisLevel` intended to increment with the TFM by default? If so, would it make sense to move the TFM version check into a condition on `AnalysisLevel` (so that it's not defined for old TFMs by default)?\r\n\r\nThis would make it a little easier for other tools (ILLink in my case) to respect `AnalysisLevel`, by simplifying the mapping to our the tool-specific warning level property the same way that it simplifies the `EnableNETAnalyzers` condition."""
12724,465800698,"b""`<` does, but `>` apparently doesn't - we use this pattern in a lot of places for version checks."""
12724,465800800,b'Fixed!'
12814,466621823,"b'Will this work on windows? It seemed like the bundler was treating this as a string, causing `\\` to be part of a filename on unix, so I naiively would have expected this to just move the problem to windows.'"
12388,466684049,"b""When I added `IsExe` to the test project (it should have been set to begin with), this errored because no RID was specified. It worked when it was a library project where SelfContained doesn't do anything (and the test doesn't actually check anything about the produced files - just looks for a warning message being printed). The other tests pass a RID like they should."""
13402,483824935,"b""Good to know. What are the `aot` rids, and where can I find out more about them? :)\r\n\r\nThere is a [`PlatformTarget`](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.RuntimeIdentifierInference.targets#L68) computed from the RID. However it [doesn't](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.RuntimeIdentifierInference.targets#L90) have a case for ARM64, even though it is [used](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.RuntimeIdentifierInference.targets#L129) elsewhere. The linker [targets](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.ILLink.targets#L185) might also be incorrect. @wli3 @dsplaisted do you have a recommendation on how to get the target architecture?"""
13402,483833442,"b""There's also [`Platform`](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.props#L61) which sets `PlatformTarget` but again doesn't have an ARM64 case. And MSBuild has a [`ProcessorArchitecture`](https://github.com/dotnet/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L468) which comes from `PlatformTarget`.\r\n\r\nI agree we should fix `PlatformTarget` but am hesitant to touch it in 5.0 - so I'll just fix the RID parsing here unless SDK folks would prefer something else.\r\n\r\nI'm curious what the `aot` RIDs are for, but had trouble finding out much about them. Is there a document somewhere?"""
14589,526300200,"b'Yes, it should have an entry in https://github.com/dotnet/sdk/blob/master/eng/Version.Details.xml, then it should get updated when runtime bits flow.'"
14589,526506716,"b'There\'s a naming pattern - the property should be `<SystemReflectionMetadataLoadContextVersion>` in Versions.props.\r\n\r\nIf you run ""darc add-dependency -n System.Reflection.MetadataLoadContext -r https://github.com/dotnet/runtime -t toolset -v \\<version\\> -c \\<commit\\>"" it will locally add the property for you and update Version.Details.xml:\r\n```xml\r\n<Dependency Name=""System.Reflection.MetadataLoadContext"" Version=""..."">\r\n      <Uri>https://github.com/dotnet/runtime</Uri>\r\n      <Sha>...</Sha>\r\n</Dependency>\r\n```'"
13354,483762907,"b""If this will only used for sync namespace analyzer, then `'$(Language)' == 'VB'` would be unnecessary. """
14093,509911002,"b""@am11 @dsplaisted @eerhardt \r\n\r\nOn a Microsoft SDK, `UseCurrentRuntimeIdentifier` is the same as portable rid. So `--use-current-runtime` means publish portable.\r\nOn a source-build SDK, this is the same as the machine rid. So the result may be a more specific publish that doesn't work portable.\r\n\r\nI think this difference will bite source-build SDK users, and it is preferable to have a flag that means portable-rid consistently."""
14093,509944942,"b'> I do not know the full background why source-build chose to override it, but.. if the value of NETCoreSdkRuntimeIdentifier is overridden in source-build repo for set of reasons, do those same reasons not apply to RuntimeIdentifier?\r\n\r\nsource-build does it to indicate the resulting artifacts are not portable.\r\n\r\n> In other words, --use-current-runtime\'s docs are stating ""Use current runtime as the target runtime."", the one SDK is executing on. This is what we have implemented. It is not strictly calling out portable-rid, that\'s an internal detail of general (non-overridden, non-source-build) case.\r\n\r\nThe main use-case is to enable easy publish for the portable rid.\r\nIf this flag enables that on Microsoft sdk, that is what it will be used for.\r\nSo I\'d like this to have the same behavior on source-build sdk, and we can update the docs/implementation accordingly.'"
3,73190628,b':+1:  with @eerhardt \n'
8,73596375,"b""I don't understand what that means. No dev is going to be looking through the targets looking for properties to set, they are going to be looking at docs.\n"""
8,73596672,"b""It's because you don't have a default set in the targets. Usually this lives in the project file itself, but as part of the cleanup we'll pull it out into a targets.\n"""
35,74328466,"b""I don't know the history, but I also thought the same thing when I saw how they implemented this.\n"""
44,75201199,b'Looks different how?\n'
44,75202356,"b""We should use a property here to avoid getting out of sync. Don't block the check-on based on it, but please file a bug to fix it.\n"""
81,75908551,b'What errors?\n'
81,75910058,"b""Shouldn't OutputFile be an output of the target so that it plays nicely with up-to-date?\n"""
100,76828696,"b""We should separate logic that we expect users to override from those that we don't expect. DebugType is something we should expect them to be able to override. I'm writing up some strawman MSBuild guidance for this repro - and I'll write something up about what I was thinking here.\n"""
138,78613646,b'This needs to respect immediate and output variables.\n'
138,78614066,"b""We can't. This needs to respect user settings, which means it must go in targets, which means you have nothing to consume.\n"""
138,78618789,"b'@brthor It still suffers from the same problem, DefaultExcludes must respect intermediate and output properties which user settable. User settable properties are set between props and targets in the project file. That means that we must set DefaultExcludes in targets to pick up the right value, hence you cannot use this property in the project file.\n'"
138,78618843,b'@eerhardt Agreed.\n'
138,78619100,b'>  it was almost certainly changed to be outside the project cone\n\nSays who?\n'
583,94710139,"b""This is the wrong GUID, we're opt'ing everyone into the C# one. We should make the same change for VB."""
645,96152865,"b""I am against it, but I don't have a better workaround. Basically, the AppDesigner folder is just a normal folder and it's contents should be considered the same as the rest of the tree. The problem is that we put the debugger settings under there - and they don't want to publish that file. In the past we would use different item types such as `<None/>` to represent that concept, but we're publishing None, right @dsplaisted?"""
1454,131056592,"b""There's not a built-in way of doing this?"""
1454,131059076,"b'Yeah I would like to see the impact on the build, I\'m only testing 1.1 SDK - so I have no idea what impact 2.0 SDK has on perf.\r\n\r\nIs there a good write up on what we\'re trying to solve with all these ""fixups""? They smell like we\'re missing feature asks.'"
1454,131059580,"b""I was thinking of an item function or existing task that did something similar, but couldn't see one."""
1636,143627874,"b'We let the user/other targets opt out, can you condition it against itself?'"
2020,172077935,"b""It doesn't look like you handle InvalidDataException here - I would have thought we'd want to throw away the cache in that case?"""
2020,172078014,"b""Why isn't this just a using?"""
2020,172078075,"b""InvalidDataException doesn't derive from IOException - which you may have thought it did."""
2020,172078384,b'\xf0\x9f\x91\x8d '
2215,187745000,"b""I don't know what the bug is - the items show up? Or just the folder?"""
2215,187755851,b'Yeah we have a bug on this.'
2994,261418282,"b'Yes we should remove this page for .NET Standard, however, making this change here will only take effect for the new SDK. We should move this into design-time targets on our side so it takes effect regardless of SDK installed.'"
3355,297480270,b'What metadata does this item have?'
3355,297480603,"b'Will these appear as ""ResolvedFrameworkReference""?'"
3355,297481779,"b""Ah, its here: https://github.com/dotnet/sdk/pull/3355/files#diff-6cfbacaa410e7ee1787b4771b158ded0. It was collapsed.\r\n\r\nYes, this appears to be what we want. We'll also want a ResolveFrameworkReferences in MSBuild proper so that we can call regardless of we're an SDK project or not."""
3355,297482038,b'Can you show me an example of one of these and we can decide what properties we want to show up?'
3355,297965407,b'We will ignore them.'
3355,297966595,"b""We're expecting metadata (including IsImplicitlyDefined/PrivateAssets) to be copied from the original item -> resolved item, I think (?) this is what ResolveAssemblyReferences does."""
3355,298003781,b'It shows up in the Properties page so that you can flip it.'
3355,298401994,b'You might have a reference to a project with a direct FrameworkReference and not want to inherit its FrameworkReference.'
3398,301830345,"b""Here is an existing usage: https://github.com/microsoft/msbuild/blob/0cd0e92a7243088977d31b56626b56d6116de016/src/Tasks/Microsoft.Common.CurrentVersion.targets#L2145. It would be good to understand why that isn't work, are we not setting the property correctly in CPS?"""
13545,488452073,b'This causes it to inherit the metadata?'
13545,489137597,"b'I think this should say `Returns=""@(SupportedTargetFrameworkAlias)`.'"
13545,489824067,"b""The Outputs is on the _task_ not the target. We'll need the `Returns` or `Outputs` on the target to grab these values."""
13795,494027217,"b'Can you add a test case where the TFM is lower case? I want to see if NuGet normalizes it, if not, you need an OrdinalIgnoreCase check as TFMs are not case sensitive.'"
11183,405026820,b'Done.'
11623,424768852,"b'I tested and it works, updated.'"
1591,139570005,"b'\xe2\x9d\x93 What does this do for resx files with the code generation option set to None? For example, [this VSPackage.resx](https://github.com/tunnelvisionlabs/LangSvcV2/blob/79d7b636f1dd5bbf175f3a66c6cb31edb3060f5b/Tvl.VisualStudio.Language.Antlr3/Tvl.VisualStudio.Language.Antlr3.csproj#L536-L540) embedded resource should not generate a code-behind file, but the only way to indicate that is by omitting the `Generator` property.'"
1591,139570250,"b'\xe2\x9a\xa0\xef\xb8\x8f There are many other generated source files which match this pattern, including Windows Forms.'"
1591,139570412,b'\xf0\x9f\x92\xad It seems like this property would already be available by another name.'
1591,139570546,b'\xe2\x9d\x93 Should this be conditioned on `EnableDefaultEmbeddedResourceItems` as well? Or perhaps some other property?'
12865,468743430,"b""Yes, it should be utf-8-bom. I can't say whether or not to sent a PR to dotnet/runtime.\r\n\r\n```suggestion\r\ncharset = utf-8-bom\r\n```"""
12865,468743717,b'This is often problematic. I would not recommend using it.'
12867,468744343,b'\xf0\x9f\x92\xad It does not appear that this file uses explicit `ConfigureAwait` calls. I would recommend leaving them out unless the whole project is changing to use it everywhere.'
12865,468760927,"b'It may or may not. The project system ignores this setting and always saves with BOM, so the only way it would be wrong is if someone edited it in another text editor.'"
12865,468762180,"b'* Some files have significant trailing whitespace (e.g. Markdown, C# verbatim string literals)\r\n* Some files have generated trailing whitespace (e.g. the .Designer.cs files created from a .resx file)\r\n\r\nText editors ignore these in some cases but not others, so you end up with the potential to make incorrect changes and/or unintentional code churn.'"
468,94178808,"b""I'm preparing the web SDK pr now. lgtm"""
468,94178868,"b'Responded to the issue, the easiest fix is for us to just take web.config specifically instead of all *.config things'"
450,94413980,"b'FWIW, 1.6.1\xc2\xa0is essential for Xamarin as\xc2\xa0my users have hit issues installing 1.6.0 into Xamarin\xc2\xa0Studio projects. 1.6.1 fixes this,\xc2\xa0and should\xc2\xa0IMO be the default for all libraries to prevent user pain.'"
889,105452875,b'Most of these targets require full MSBuild and will only work on Windows. The Xamarin ones should work on VSfM though long as it builds on Mono. That variable is for the XAML targets and those only work on Windows (for building UWP apps).'
889,105453813,"b""These won't work at all with `dotnet build`. It only works with `MSBuild.exe` because the majority of the tasks don't support CoreCLR, now or possibly ever. There's no way the Windows UWP stuff ever needs to be (or can be built) outside of Windows for example.\r\n\r\nThey require the correct workloads are installed in VS 2017 -- which is where `MSBuildExtensionsPath` points to when run from `MSBuild.exe`"""
889,105455347,"b""These targets are *also* used by the Sdk's installed within `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Sdks\\Microsoft.NET.Sdk` There's no split. There are pieces that need to be in this SDK, they cannot be intermingled with a separate SDK."""
889,105457686,"b""@borgdylan I tried those and they weren't available in the props order when I needed them, that's why I defined my own in my NuGet."""
889,105520870,"b""I generated them by hand, manually. Without the ability to call a task in static property evaluation, I don't know how to handle optional TFM's like Xamarin. If Xamarin or an invalid one is specified, it won't match and it'll generate an Invalid TFM error."""
889,105520890,"b'Sure, any preference about what env variable to use for this?'"
889,105520926,"b""I certainly hope this can be changed later -- I put it there right now because it's effectively required. The Xamarin toolchain will error out with ppdb's right now."""
889,105521244,b'fixed'
889,105521261,b'fixed'
889,105521269,b'fixed'
12897,470185158,"b'Sorry, which comment in which test?'"
12897,470213020,"b""Fairly sure this was to ensure that we could define the right additional properties from the TFM so that restore would work.\r\n\r\nFor example, it'd set TPV, TFV and others: https://github.com/novotnyllc/MSBuildSdkExtras/blob/master/Source/MSBuild.Sdk.Extras/Build/Platforms/Windows.targets\r\n\r\nI don't think it ever explicitly cared/supported having an extra semi-colon in a TargetFramework element."""
12461,455200087,b'I wonder when AppDesignerFolder gets set. If a user sets it in the project file will this still work?'
12461,455203054,b'Why do we do this?'
12461,455245522,b'I understand that but I wonder if this code still works if the user changes it in the csproj. It might be worth trying'
12461,455247827,b'I was curious why we empty the collection first. '
12533,456525033,"b""You don't need the wildcard as there is just launchsettings.json. The wildcard could pick up unintended files"""
12533,456587254,"b'This is because these get included in None, got it. Looks good to me'"
2814,247594366,"b""It's just here."""
2814,249154718,"b""That's one of the changes we discussed offline. We've decided to require users to explicitly specify a GUID for any type they want to expose via COM.\r\n\r\nI can't think of any case for a user to have `[ComVisible(true)]` on a class and not specify an explicit GUID if the above statement still holds true. The other option (again assuming the statement above is still valid) would be to silently not expose the type to COM, which would result in a lot of unexpected behavior for users (and probably a lot of duplicate bug reports for us)."""
2814,249155424,b'I pulled this constant from the implementation of `System.Reflection.MetadataLoadContext` (see https://github.com/dotnet/corefx/blob/master/src/System.Reflection.MetadataLoadContext/src/System/Reflection/MetadataLoadContext.CoreAssembly.cs#L13).'
2814,249156430,"b""MetadataReader returns a token to the direct base class of the type. Also, com objects are still valid if they inherit from other classes, even if those aren't marked ComVisible. See https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.comvisibleattribute?view=netframework-4.7.2#remarks."""
2814,249156889,"b'""Intermediate"" is the MSBuild term for the `obj/$Configuration/$TargetFramework/` directory. The `IntermediateAssembly` is the assembly directly output by `Csc` into the `obj` directory. It is later copied to the output directory. This terminology is used throughout MSBuild and the SDK.'"
2814,249157038,"b""I haven't yet pushed out those changes."""
2814,249166196,b'This is giving an explicit error to the user. It will be (unless another PR takes the code before this is merged) error NETSDK1086. There error message is in Strings.resx. Do we want to downgrade this to a warning?'
2814,249194275,"b'This is only considering the source-built binary. If we wanted to consider generating a comhost for a previously built binary, that would be done differently (and probably not as an MSBuild integration).'"
2814,249195538,"b""As a note, this task (and this error) will only execute on projects with the MSBuild `UseComHost` property set to a truthy value. Since this property currently doesn't exist, users will have to opt-in to this behavior."""
3087,272779376,"b""These GUIDs should be wrapped in curly brackets. It's something I noticed they weren't while I was working on this."""
3087,273687890,"b""The source package (or at least version 4.6.0-preview3.19128.7 which I pulled from NuGet.org) doesn't contain the `JsonSerializer` class. Looks like the newer versions are all on the blob feed though so we could pull down a newer version with the serialization support."""
14315,512326310,"b'~~I think using the `Microsoft.Extensions.DependencyModel` APIs to handle resolving the RIDs to the correct JITs would be the best option if the APIs support it.~~\r\n\r\nThis was wrong, see the comment below.'"
14315,512327648,"b'Actually, disregard my last comment. You should use the `NuGetUtils.GetBestMatchingRid` method and pass in the supported JIT target os-arch combination RIDs as the available RIDs. That function will resolve the best RID to use for the target RID.'"
61,75345953,"b'string is hardcoded, should we put it to Resources?\n'"
61,75349619,"b'Even though we use nuget API, all our logic should be unit tested\n'"
63,75374787,"b'Its a matter of personal preference - to me they are necessary, since i like to mark where the actual code under test is and where is preparation end etc. Other comments i kept because in other tests i had this pattern. See test at line 230.\n\n---\n\nIn reply to: [75370011](https://github.com/dotnet/sdk/pull/63#discussion_r75370011) [](ancestors = 75370011)\n'"
61,75396680,"b'Should be good, if item is indeed an assembly... In any case i take only CompileTimeAssemblies.\n'"
63,75399088,"b'No we can not: each step should happen at its time, below i define another variable ""parentTargetId""\n\n---\n\nIn reply to: [75392110](https://github.com/dotnet/sdk/pull/63#discussion_r75392110) [](ancestors = 75392110)\n'"
63,75399204,"b""I can change that, however they are both valid and i don't see real advantage there ...\n\n---\n\nIn reply to: [75391972](https://github.com/dotnet/sdk/pull/63#discussion_r75391972) [](ancestors = 75391972)\n"""
63,75399497,"b'I read through your other comments , it feel weird ... You are so obsessed with methods?... :) Methods are for grouping repetitive or outstanding blocks of code, when comments are to catch an attention of the reader/dev - which is the case here. If i follow your logic i would have to create methods for string.IsNullOrEmpty, iEnumerable.Any() etc ...\n\n---\n\nIn reply to: [75391609](https://github.com/dotnet/sdk/pull/63#discussion_r75391609) [](ancestors = 75391609)\n'"
63,75399613,"b'Another thing is i hate when people create such small unnecessary methods, because when you read such code you jump all over the place instead of reading current block of code easily - evrything needs a balance :)\n\n---\n\nIn reply to: [75399497](https://github.com/dotnet/sdk/pull/63#discussion_r75399497) [](ancestors = 75399497,75391609)\n'"
63,75400016,"b'Oh yes it does, if you would be following more logic than ""chrome"" like comments , you would notice that key word here is ""unique"" which is not too obvious if you think about high level logic of two tasks ResolvePackageDependencies and this one. Please leave my comments alone :)\n\n---\n\nIn reply to: [75391691](https://github.com/dotnet/sdk/pull/63#discussion_r75391691) [](ancestors = 75391691)\n'"
63,75400584,b'Please look how DeepndencyMetadata is used : target is a dependency too\n\n---\n\nIn reply to: [75392793](https://github.com/dotnet/sdk/pull/63#discussion_r75392793) [](ancestors = 75392793)\n'
63,75400908,"b""Why do you think string interpolation was created? :)  i don't see a value in separating this little line into method that would take 3 lines of code and 2 parameters , then every one would need to jump to that method to see what it is doing and see this one line ... waste of time .. \n\n---\n\nIn reply to: [75394059](https://github.com/dotnet/sdk/pull/63#discussion_r75394059) [](ancestors = 75394059)\n"""
63,75401059,"b'Again - no one would reuse it - first, second - it would be hard to follow code logic if we would create too many unnecessary methods\n\n---\n\nIn reply to: [75394183](https://github.com/dotnet/sdk/pull/63#discussion_r75394183) [](ancestors = 75394183)\n'"
63,75401121,b'see my comment above - by design\n\n---\n\nIn reply to: [75394112](https://github.com/dotnet/sdk/pull/63#discussion_r75394112) [](ancestors = 75394112)\n'
63,75401404,b'Please follow code logic\n\n---\n\nIn reply to: [75395159](https://github.com/dotnet/sdk/pull/63#discussion_r75395159) [](ancestors = 75395159)\n'
63,75401534,b'because it is a KeyValuePair\n\n---\n\nIn reply to: [75395483](https://github.com/dotnet/sdk/pull/63#discussion_r75395483) [](ancestors = 75395483)\n'
63,75401633,b'Per my previous comments - i am against creating unnecessary jumps in code\n\n---\n\nIn reply to: [75395247](https://github.com/dotnet/sdk/pull/63#discussion_r75395247) [](ancestors = 75395247)\n'
63,75402018,"b'this comment needs to be changed to say ""Update parent\'s Dependencies count and make sure it is in the dependencies world"". Comments are good and helpful. \n\n---\n\nIn reply to: [75394893](https://github.com/dotnet/sdk/pull/63#discussion_r75394893) [](ancestors = 75394893)\n'"
63,75402461,"b'The whole idea behind this task is to merge all types of dependencies raised by ResolvePackageDependencies task into a single collection if items that can be consumed by xaml rules later. Thats why i have one class DependencyMetadata representing those items that will be sent to the output.\n\n---\n\nIn reply to: [75400584](https://github.com/dotnet/sdk/pull/63#discussion_r75400584) [](ancestors = 75400584,75392793)\n'"
63,75405018,"b'@piotrpMSFT  i think you mentioned problem that is orthogonal to what we have here: ""comments are out of date"" - totally agree, and this should be adressed by reviewers , who should make sure changes have corresponding comments changes (thats how it happens in our team). However adding 4 lines of code with some parameters that returns extrapolated string of those parameters - is kind of waste of time of the developer, reviewer and people who need to get familiar with the whole solution having hundreds of files and hundreds of such methods in each file. Just imagine how many jumps along the file one would have? Methods are for reusing or separating some outstanding code - not one liners like these ones... #ByDesign\n'"
63,75411417,"b'i looked at this class again and i think you are right, we could split this code to separate classes based on dependency type. I resolved that\n\n---\n\nIn reply to: [75393133](https://github.com/dotnet/sdk/pull/63#discussion_r75393133) [](ancestors = 75393133)\n'"
63,75411511,"b'see my comment above - i split this class into 3 separate classes and a base class \n\n---\n\nIn reply to: [75402461](https://github.com/dotnet/sdk/pull/63#discussion_r75402461) [](ancestors = 75402461,75400584,75392793)\n'"
63,75412477,"b""I partially agree, I use F12 and but don't like the jumps back and forth. When i go to method and see that it was unnecessary and i have to go back to calling method - it feels very annoying. Some times i remember to click Alt+F12 and it opens a new window in place , but again it should be used wisely when needed , not in samples like in this repo - it would be overkill. Notepad or refactoring tools, there are some coding conventions : add good comments and use methods wisely i believe belong to those ones .. \n\n---\n\nIn reply to: [75406728](https://github.com/dotnet/sdk/pull/63#discussion_r75406728) [](ancestors = 75406728)\n"""
63,75412907,"b'So does that mean that all your test classes start with the word ""Given""? \n\n---\n\nIn reply to: [75369802](https://github.com/dotnet/sdk/pull/63#discussion_r75369802) [](ancestors = 75369802)\n'"
63,75416809,"b""I changed the comment to be more descriptive there and moved to the method summary (same for other similar methods), see if you like what it says now.  If you still don't like it, i can remove them. Why i still keep them because method populates class property DependenciesWorld and without reading 15 lines of that method you would not know that, when comment hints it already. Another  way that you might like is something PopulateDependenciesWorldWithPackages  - let me know if you like that more (i just try to simplify things and long method names look harder to read to me when they are not necessary).\n"""
44,75495214,"b""Just to double check: how exactly project system's targets and xaml rules will be deployed to user machine (and where) and how they are imported? Will they some how imported by this Microsoft.CSharp.targets?\n"""
44,75709773,b'We used E2E Apex tests for templates\n'
63,75722027,"b'Name was very long and kind of hard to read, i just wanted to emphasize the condition of interest\n\n---\n\nIn reply to: [75718689](https://github.com/dotnet/sdk/pull/63#discussion_r75718689) [](ancestors = 75718689)\n'"
63,75722463,"b'Ah the DesignTime is a new postfix actually since this output items collection will be used only by design time build. The pattern is XxxDependenciesDesignTime, and since in this case all of them are grouped together we did not really have ""Xxx"" in front..\n\n---\n\nIn reply to: [75719056](https://github.com/dotnet/sdk/pull/63#discussion_r75719056) [](ancestors = 75719056)\n'"
86,76094104,b'sure\n'
86,76445925,"b""You need to update project system and make sure new xaml rules are deployed on your machine's msbuild location\n"""
103,76617672,"b'> System [](start = 6, length = 6)\n\nsort usings #Resolved\n'"
103,76618233,"b'> LockFile [](start = 25, length = 8)\n\nInstead of mocking LockFile you should mock File and create LockFile from a memory stream not from file path (there is another API already that creates it from a stream).\n'"
103,76618887,"b'> AnalyzerAssembly [](start = 65, length = 16)\n\nPlease also update logic in DesignTime task for AnalyzerAssembly instead of Analyzer=true metadata, its in the same project so you can just make changes at the same time #Resolved\n'"
103,76619370,"b'> Version [](start = 61, length = 7)\n\nwhat about $""{deps.Id}/{deps.VersionRange.MinVersion.ToString()}""; here? #Resolved\n'"
103,76619605,"b'> continue [](start = 61, length = 8)\n\nbrackets around continue? #Resolved\n'"
103,76619697,"b'> continue [](start = 57, length = 8)\n\nbrackets around continue? #Resolved\n'"
103,76619977,"b'> System [](start = 6, length = 6)\n\nsort usings #Resolved\n'"
103,76620739,"b'> ItsAssignsValidParentTargetsAndPackages [](start = 20, length = 39)\n\nIt #Resolved\n'"
103,76621261,"b""> validPackages [](start = 25, length = 13)\n\nthis check is not right, if all ParentPackage will be empty it still will be successful. Another thing - you are not verifying correctness of target and parent metadata, but only it's presence.\n"""
103,76621311,"b'> ItsAssignsValidTopLevelDependencies [](start = 20, length = 35)\n\nit #Resolved\n'"
103,76621967,"b""You are not verifying correctness of assigned Type , but only it's presence. I think yous should not rely on predefined lock file , but create your specific lock file strings for each test and load it from stream as i suggested. This specific strings would contain only several packages and files, with specific metadata that you will verify explicitly , otherwise these tests would have small value...\n"""
103,76622070,"b'> GivenAResolvePackageDependenciesTask [](start = 17, length = 36)\n\nNo test verifying version range and minimal version\n'"
103,76622164,b'NIT: line #Resolved\n'
103,76821470,"b""In that test you verify only top level packages, what about other packages? In this test if all level packages will have empty ParentPackage (top level and others) it would still pass.  Anyway i don't agree with this test approach anyway - see another comment where we discuss that.\n\n---\n\nIn reply to: [76817851](https://github.com/dotnet/sdk/pull/103#discussion_r76817851) [](ancestors = 76817851,76621261)\n"""
103,76822093,"b'It does not matter how large would be your test assets - what matters is to choose scenario under test to be real and verify things that matter. You can create  a folder TestAssets[ScenarioName] which would contain json files for each of your scenarios  and you could load them via stream. Then in each of those files you manually pre-create data in some specific way that it covers explicitly scenario under test. Otherwise tests would have too many holes and would be useless....\n\n---\n\nIn reply to: [76816552](https://github.com/dotnet/sdk/pull/103#discussion_r76816552) [](ancestors = 76816552,76621967)\n'"
103,76822429,"b'Why is that by design? If you use stream you could make more of your code testable and functionality wise it would be identical - so only benefits , why not change design then?\n\n---\n\nIn reply to: [76618233](https://github.com/dotnet/sdk/pull/103#discussion_r76618233) [](ancestors = 76618233)\n'"
103,76829515,"b'Well its not too critical, but by using stream you could also cover this code with your tests instead of substituting it:\n if (_lockFile == null)\n                {\n                    if (!File.Exists(ProjectLockFile))\n                    {\n                        ReportException($""Lock file {ProjectLockFile} couldn\'t be found. Run a NuGet package restore to generate this file."");\n                    }\n\n```\n                _lockFile = new LockFileCache(BuildEngine4).GetLockFile(ProjectLockFile);\n            }\n\n            return _lockFile;\n```\n\n---\n\nIn reply to: [76826805](https://github.com/dotnet/sdk/pull/103#discussion_r76826805) [](ancestors = 76826805,76822429,76618233)\n'"
103,76829757,"b'> ```\n> { MetadataKeys.Analyzer, ""true"" }, [](start = 15, length = 39)\n> ```\n\nRemove this line #Resolved\n'"
191,81430024,"b'yes , will fix it\n'"
223,82437003,b'just did\n'
223,82439866,"b'i see, my editor did not show them by some reason - fixed now\n'"
226,82452623,b'this is wrong  fixing it\n'
226,82453575,"b'white spaces fixed. There can not be circular dependencies: web-> on core and publish, publish -> core, which is not a circle. \n'"
226,82453700,b'Also publish now does not depend on core sdk\n'
226,82454425,"b'As i said even if publish adds dependency on core - it is not a circle, because core does not depend on web\n'"
226,82454629,"b'Web repo will build last, we will move our web package out of sdk soon. Web will be a metapackage that would include latest built versions of core and publish.\n'"
223,82456416,"b'its not me its VS, i am tired of looking at all spaces, its annoynig .. will fix that\n'"
1090,110456534,"b'PackageReference here coming from evaluation. and should be available. However  ResolvedPackageReference items indeed need to be accessed after collection target, however that is what i am trying to avoid here since that target reads assets file and is slow. In addition , we woul drun each of those targets 1 per target framework inthe project which would be even slower :)...'"
1090,110458774,"b'Ah, i see, so there maybe more PackageReferences coming from CollectPackageReferences . Sounds good i will depend on it here.'"
1149,113327545,b'Just pushed a change for that\r\n\r\n---\r\nIn reply to: [113310902](https://github.com/dotnet/sdk/pull/1149#discussion_r113310902) [](ancestors = 113310902)'
12536,457688339,b'Entity Framework both words are capital'
1487,133869300,"b""Cool ... It's a UX issue if the files have lowercase package names. Some devs are bound to wonder: Do they always need to be lowercase in the *artifact.xml* file? This will fix that prob."""
1052,110416713,"b""I'm not sure, if app referenced a library I think it would be consistent if it was reflected in `.deps` even if `.dll` is coming from the other one. """
1052,110419515,"b""Let's trim then, I can't come up with a good reason why they are needed and smaller deps file is better."""
3002,261798973,b'Should this be an include list instead of exclude list?'
12362,450621929,"b'Just to confirm, ""trim=true"" means ""this setting participates in the trimming process,"" not ""enable trimming only if the value is set to _true_,"" correct?'"
12434,453827187,"b""Correct, such an app will be broken. However:\r\n\r\n* The overwhelming majority of web applications don't do such a thing; and\r\n* The exception message text links to a document with clear remediation steps."""
133,78258936,b'@natidea the plan is to revert this change once we can get an updated CLI and build the SDK successfully . this should happen latest by Monday.\n'
1169,114232435,"b""@nguerrera what targets is it trying to call? i don't see any change related to this property having been made recently."""
1186,115110107,b'not sure if we want to update this just yet.\r\n\r\nCC: @rrelyea for confirmation.'
2118,180600122,b'we have a test implementation here: https://github.com/NuGet/NuGet.Client/blob/dev/test/NuGet.Core.Tests/NuGet.Packaging.Test/NugetPackageUtilTests.cs#L805\r\n\r\nHope that helps!'
1782,160449183,"b""@kant2002 Not in this PR, I'm afraid; I don't know a thing about F#. Sorry about that!"""
3533,314916906,"b'Typo? There is no .NET Framework 2.1, but there is a .NET Standard 2.1.'"
2148,182204433,b'My editor is set up to remove trailing white spaces. Why do we want to retain them?'
2148,182208069,"b""We don't use these properties in the WebSDK so there should be no interference. It will only impact the behaviour of the checks in Dotnet SDK"""
2148,182232634,b'You can ignore it with ?w=1'
2148,182233067,b'Ah it looks like I missed pushing a commit. It was fixed on my local branch.'
2148,182235183,"b""It's a bit hard to separate it out after the fact. I will keep that in mind in the future. I will revert the changes to the other file with only whitespace changes."""
2148,182236104,b'Oh actually there might be a way to do it. Let me try.'
2369,198951034,"b'Are we sure we are not supposed to update `RestoreAdditionalProjectSources` instead? What we want is to exclude the fallback folder as a restore source for 1.x projects when the switch is specified. I also tried this fix and confirmed the fallback folder is still specified as a restore source alongside myget feeds, etc in the lock file:\r\n```\r\n""project"": {\r\n    ""version"": ""1.0.0"",\r\n    ""restore"": {\r\n      ""projectUniqueName"": ""C:\\\\gh\\\\tp\\\\100App\\\\100App.csproj"",\r\n      ""projectName"": ""100App"",\r\n      ""projectPath"": ""C:\\\\gh\\\\tp\\\\100App\\\\100App.csproj"",\r\n      ""packagesPath"": ""C:\\\\Users\\\\johluo\\\\.nuget\\\\packages\\\\"",\r\n      ""outputPath"": ""C:\\\\gh\\\\tp\\\\100App\\\\obj\\\\"",\r\n      ""projectStyle"": ""PackageReference"",\r\n      ""configFilePaths"": [\r\n        ""C:\\\\Users\\\\johluo\\\\AppData\\\\Roaming\\\\NuGet\\\\NuGet.Config"",\r\n        ""C:\\\\Program Files (x86)\\\\NuGet\\\\Config\\\\Microsoft.VisualStudio.Offline.config""\r\n      ],\r\n      ""originalTargetFrameworks"": [\r\n        ""netcoreapp1.1""\r\n      ],\r\n      ""sources"": {\r\n        ""C:\\\\Program Files (x86)\\\\Microsoft SDKs\\\\NuGetPackages\\\\"": {},\r\n        ""C:\\\\Users\\\\johluo\\\\.dotnet\\\\x64\\\\sdk\\\\NuGetFallbackFolder"": {},\r\n        ""https://api.nuget.org/v3/index.json"": {},\r\n        ""https://dotnet.myget.org/F/dotnet-core/api/v3/index.json"": {},\r\n        ""https://dotnetfeed.blob.core.windows.net/orchestrated-release-2-1/20180423-01/final/index.json"": {}\r\n      },\r\n...\r\n``` '"
2369,198958297,"b""My understanding of this code was that `RestoreAdditionalProjectSources` was appended to add the fallback folder as a nuget feed. `RestoreAdditionalProjectFallbackFolderExcludes` is appended since the when the fallback folder is added as a restore source, it should no longer be used as a fallback folder. when we turn on the switch to disable fallback switch for 1.x, we should not append to `RestoreAdditionalProjectSources` so that the fallback is not used as a restore source and we should append to `RestoreAdditionalProjectFallbackFolderExcludes` so that it's not used as a fallback folder either."""
2369,198958470,"b""cc @dsplaisted in case he's more familiar with how this part of the code works."""
2369,199075247,"b""Nit: not sure what this is for. I don't see how this makes things more unique than just the `testProjectName`. Folders or files with `.` in its name should also work. """
2394,202191808,b'@natemcmaster is this in anticipation for https://github.com/aspnet/Universe/issues/1256?'
2394,202194511,"b""So does this mean there's no way for anyone to compose or use a different shared framework other than the ones we ship? I was under the impression that we want to support composable and custom shared frameworks at some point, maybe only for 3.0?"""
2394,202203292,"b""Ah good, I wasn't sure where that feature landed in terms of releases. Good to know it's only 3.0."""
2264,190055872,b'@omajid and @tmds for a looksee. '
1725,150903505,"b""Shouldn't this also check for the `PackageName` metadata?"""
1725,150910308,"b'So, under what circumstance would System.Runtime or netstandard not be found? The search is being done on [dependencyTable.Reference.Keys](https://github.com/Microsoft/msbuild/blob/cb6c2643fe4a072f28e685bc46df3bace17a7108/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs#L2258), which contains the flat list of all references. I assume the nuget graph includes those two, right? `_ComputeLockFileReferences` seems to add both for a netcoreapp. '"
1725,151001977,"b""Mkay, so the assumption that Nuget is responsible with resolving the closure of dependencies is actually valid only when the nupkg dependency graph matches the underlying assembly dependency graph (for each assembly edge there is a nupkg edge, or something like that). When is this guaranteed? Is it always guaranteed for netcore and netstandard?\r\n\r\nEither way, this means that metadata to skip dependencies should only be added when the nuget graph is guaranteed to match the assembly graph. No idea when this holds. Only on specific tfms? Maybe the tfm compatibility matrix should also store information whether the tfm may depend on facades.\r\n\r\nDoes this mean we can't do the optimization?"""
1725,151220081,"b""To summarize: RAR extracts data necessary for binding redirection from the closure. If nugets are skipped, then it does not have that data for nuget's closure.\r\n\r\n- it would be nice if binding redirection were a separate concern, done by another task.  Worst case it would be a lot slower, because it will have to do the closure walk again. Best case, for .netcore, it wouldn't be that much slower because much of the closure walk would be skipped in RAR. Only the walks from p2ps and non-nuget references would be redone. Or maybe msbuild could provide some shared memory model for tasks, so they can reuse in-memory caches and whatnot.\r\n- could nuget provide this data as even yet more metadata? For each reference, the metadata could be a list of all incoming version edges. Then, RAR can unify that with whatever it finds from the non-nuget closures. But I guess this is impossible because the nuget graph is not the same as the assembly graph. At best they are the same only by convention / accident :(\r\n\r\nIt would have been really nice if nuget had a different architecture, where each language could implement its own nuget graph extension of what it means to be a valid graph, and what conflict resolution means. Then, the integration with RAR could have been more tight.\r\n\r\n\r\n"""
2126,180915552,"b'Static removes (not under targets) do not hit the disk, but instead regex match existing items.'"
2868,251618401,b'Resharper stuff'
2868,253144442,b'I think I might have needed to have the private constructor in the base class. But I might also have just forgotten about it :('
2868,253145378,"b'Ah, I remembered. Initially I added it to have the private constructor, but then I realized I wanted the super class state to be initialized with empty collections (to avoid null refs), so I ended up using a different super constructor. But I forgot to delete the protected no-arg one.'"
3276,290925053,"b'It fails on crossplat due to missing reference assemblies to the referenced full frameworks: 472, 462, and 461'"
3276,290943040,"b""I'll bump it up in a separate PR"""
3276,297378972,"b""True, I could mutate the default empty dictionary, but then I can't nicely initialize everything in the initialization block :)"""
3276,297392168,b'Learning something new every time :)'
4,73248748,"b'@natidea and @eerhardt and I were talking about this offline, and we were only thinking Windows for the moment.\n'"
5,73256781,b'Is there even any point to the rest of this script now?\n'
4,73275484,"b'I use config at the bottom, for setting the PR hook names.\n'"
4,73376075,"b""If we want to put build status tags in our README that match the rest of the repos, we'll get those Jenkins.\n"""
4,73376157,b'Will do after this is merged.\n'
7,73439037,b'I believe so. See https://github.com/dotnet/roslyn-project-system/blob/master/src/Dependencies/Toolset/project.json for an example.\n'
8,73439112,b'File a tracking bug for this.\n'
8,73439129,b'File a tracking bug for this.\n'
8,73572772,"b'For the ci builds, is there any reason for us to build a different platform, or should we just leave it as is?\n'"
8,73592526,"b""What is the point of this? Doesn't it just set VersionSuffix to empty string if it's empty string?\n"""
9,73593271,"b""Are we guaranteed that MSBuildThisFileDirectory will always end in a `\\`? If it doesn't, then this will break.\n"""
9,73593695,"b""Same here. We should add a `\\` between them, just in case `DOTNET_INSTALL_DIR` is set to something without a trailing `\\`. Doesn't hurt anything, and potentially breaks builds otherwise.\n"""
7,73729719,"b""I probably want to move it back, to be honest. There's more targets and settings files, and I'd prefer to keep them separated so they're not overwhelming the root directory.\n"""
7,73729940,"b""I doubt we need it either, I've been copying from the Roslyn-project-system, and committed and pushed last night before I left. Still some more cleanup to do.\n"""
7,73765873,"b""Personally, I'm a fan of the less stuff in the repo root, the better.\n"""
7,73766124,"b""Namely, the repo root should be used for first impressions, and what few things _have_ to be there, like the netci config. The pattern that I'm following is the one used by Roslyn/Roslyn-project-system and such.\n"""
29,74110300,b'Remove VB and C++.\n'
29,74118942,"b""I don't think so\n"""
29,74119043,b'Not unless we plan on shipping C++/VB code.\n'
7,74150612,"b""Yes, but because test assemblies are marked as non-shipping, they're not signed with the standard public keys, but instead with the Roslyn internal key.\n"""
7,74151874,"b""Good point, it'll be in the next set of changes I push.\n"""
39,74354393,"b""Do we want to introduce a property that covers a property from VSO? I'd think we'd probably want to set our variable like BuildNumber\n"""
39,74354475,"b""Also, do we want to change VSO to be yymmddn? And with that, change this number to be 0000001 so it's the same length?\n"""
39,74355366,"b""As long as they're the same format, and having another - in there is fine with the build system, I'm ok with it.\n\nAs to the second property, that's the way that I've seen other projects do it. For example, Roslyn doesn't use NUGET_PACKAGES globally, they create their own variable for it. https://github.com/dotnet/roslyn/blob/ca3993b0300f3f2b515ef3f97176a45137076e96/build/Targets/Settings.targets#L8\n"""
47,74857673,"b""I'll re-increase the command line verbosity again, I didn't mean to include that in the change.\n"""
47,74857714,"b""MicroBuild. Signtool shells out to the native MSBuild (that's not xplat) and signs that way.\n"""
47,74857750,"b""What's the difference? I was going off the Roslyn repos.\n"""
47,74857972,"b""Yep, that's the correct variable name.\n"""
47,74858201,"b""The part that tells MicroBuild what to sign is a combination of the path at the end and SignToolConfig.json. I'm not sure how this conflicts with that PR, we'll just have to pass `$(OutDir)PackagesLayoutDir` as the path instead of just `$(OutDir)`. Is there something I'm missing?\n"""
47,74985590,"b'Right, but the last part of that SO answer is about .Settings.Targets, which it seems to me this falls under.\n'"
84,76095465,"b""Ah, I didn't realize that.\n"""
84,76102847,b'The weird thing is that it built on my machine. Must have been cached build artifacts.\n'
229,82484971,"b'We should change the sort order here as well. The existing console app is order 13, not 12.\n'"
950,105057431,"b""I don't think this is necessary; this should already be true on non-Windows."""
950,105057501,"b'Since the `<SignAssembly Condition=""\'$(OS)\'==\'Windows_NT\'"">true</SignAssembly>` conditional set was removed.'"
950,105058139,"b'Ah, got it. :+1:'"
894,105239387,"b'Not sure, @mmitche? What OS is the OSX host?'"
894,105239664,"b'I copied it from the CliCommandLineParser repo. @jonsequitur, was there a reasoning behind deleting everything?'"
894,105239900,"b""Yes, my editor trims whitespace. Which works fine when I'm creating a file, but less fine when I'm not."""
35,74324758,b'Any concerns about sub-directories colliding here?\n'
35,74324868,b'e.g. /v1/a.pdb; /v2/a.pdb\n'
35,74325215,"b'I would structure this a bit differently. Since there are so many parameters and they are the same, this seems like we should create a joined itemgroup that calculates the source + destination paths for the full closure, and have a single Copy invocation. \n'"
63,75404247,"b'In general we do prefer using methods to capture units of logic instead of comments. As this PR aptly showed below, folks tend not to take the contents of comments very seriously and they quickly get out of date, forcing engineers to understand the meaning of that logic without the context offered by the original creator. #ByDesign\n'"
63,75406728,"b""reusability of code is certainly a concern of methods. Another is the isolation of discrete computational concepts. `F12` to a well-named method is much cheaper mechanically and conceptually than is trying to parse the intent of a compound if statement, given the proper tools. \n\nI agree with you that the current state of the code in this PR is absolutely functional, but @livarcocc is pointing out that by introducing a less-verbose coding style on such a large level we will be reducing the efficiency of the team overall. In a majority of the codebase we can rely on folks using refactor-friendly techniques for isolating and describing unique concepts... while in this portion they may as well abandon their tools and fall back to notepad. I'm sure that the many contributors to this repo would be very happy to walk you through the efficiencies they gain by adhering to the styles they selected. Perhaps you will find it to be effective for you as well. #ByDesign\n"""
828,99745279,"b""Yes, I will expand to cover all CI flavors. Until the MSBuild fix is available, CI will be red anyways. I wanted to show a single instance of the test for the time being and will cross-target once we decide we're happy with the approach and have merge approval."""
828,99745291,b':D Thanks'
828,99745487,"b""Ok. I'll add another csproj to test that branch as well."""
828,99748414,"b""Thanks Nick, I 'll change the naming.\r\n\r\nAs to non-matching RIDs, for the moment I'm considering that to be a subsequent feature. The mechanics introduced here enable folks to add RIDs to their projects and get into a working state. RID equivalence mapping seems like a different feature, and a much more risky one. \r\n\r\nIf you feel that this feature is not useful in the current state please let me know and I'll take a deeper look, but I think that this is a reasonable feature scoping decision."""
828,99754684,"b'@livarcocc I added the test, but it did not identify the bug. I decided to see if this was a test bug by writing the following .proj file:\r\n\r\n```\r\n<Project DefaultTargets=""Default"">\r\n    <Target Name=""Default"">\r\n        <Message Condition=""$(foo) == \'\'"" Text=""empty == \'\'"" Importance=""High"" />\r\n    </Target>\r\n</Project>\r\n```\r\n\r\nThe Message did, in fact, print. So it looks like putting single-quotes around a property is more a convention than a rule. That said, the test is in place.'"
828,99754717,b'Fixed.'
828,99754807,b'I fixed the name a bit. The TestAssetsManager in this repo actually checks for long-file-paths and so I had to trim it down a bit. We should think about that feature in CLI!'
828,99761699,"b""Cool, @dsplaisted! Another feature to integrate over :)\r\n\r\nI'm pretty happy with the naming after update, but if folks want it to be different I'll take advantage of this feature."""
828,100857661,b'I need to push my local changes to the MSBuild change. '
828,100861275,"b""Removing it would certainly be better. If there is a clean way to do this, I'm happy to make the change. let's chat."""
820,99631929,"b""I'm not familiar with the internals of GenerateRuntimeConfigurationFiles task, but does removing this value mean it will instead use MicrosoftNETPlatformLibrary and project.assets.json to determine runtimeconfig version?"""
820,99632904,"b'IIUC NuGet will match this to ""1.0.0"" and ""1.1.0"". Should the SDK automatically lift to the latest patch release? e.g. the latest Microsoft.NETCore.App is 1.0.3. If so, 1.0.\\* and 1.1.\\* would do that.'"
820,99635710,b'Good point. Scratch the floating version idea.'
2042,174199575,b'Gotta get that perf. Will lift condition to the target instead'
2064,175555516,b'Happy to. How?'
2064,175555716,b'Found the highest DOTNET code in https://github.com/dotnet/sdk/blob/master/src/Tasks/Common/Resources/Strings.resx and added one.\r\nhttps://github.com/dotnet/sdk/blob/master/src/Tasks/Common/Resources/Strings.resx#L195'
2064,175564610,b'Added NETSdkWarning.'
2064,175565534,"b'Ok, opened this issue to follow up https://github.com/dotnet/sdk/issues/2065'"
2064,175565635,b'Sorry for the noise. VS Code made me do it.'
2394,202197262,"b""Bingo. We want to add a dependency from AspNetCore.App -> NETCore.App in 2.1.3. This implementation and https://github.com/aspnet/Universe/issues/1256 go hand in hand. This is one of the tradeoffs we'll try to balance with @DamianEdwards. Doing so would mean users with the explicit PackageReference to AspNetCore.App would get downgrade warnings about NETCore.App. I think we will be okay with that since we want to help users move to the RuntimeFrameworkName approach, but we need to discuss."""
2394,202197621,"b""This was more about users unintentionally attempting to use something as a shared framework package which isn't. Composable and custom frameworks is a 3.0 which I don't think we need to address in the 2.1 SDK."""
2394,202200451,"b'Yeah, I hope we can drop it in 3.0. I think we have to keep it for 2.1 because the source-build guys (cc @tmds) will need to toggle this separately from RuntimeFrameworkName to workaround https://github.com/dotnet/source-build/issues/375'"
2394,202200616,"b""It will in 2.2 (assuming we don't botch that metapackage, too)"""
2394,202201462,"b'Good to know, we should move it back then. Would there be any harm in hard coding this list to this?\r\n```\r\n<DefaultImplicitPackages>Microsoft.AspNetCore.All;Microsoft.AspNetCore.App;Microsoft.NETCore.App;NETStandard.Library</DefaultImplicitPackages>\r\n```'"
2394,202216594,"b""Ok, I've moved this back to Microsoft.NET.Sdk.Common.targets with the aspnet list.\r\n\r\nBtw, which branch should this PR change to? I don't see release/2.1.401 in this repo."""
2394,202218019,"b'The reason for this was that PrivateAssets=""All"" on NETCore.App only if OutputType == library, but for AspNetCore.App, PrivateAssets is always All (when using the implicit package version.)\r\n\r\nI think the resolution to #2364 is to actually tweak this line so PrivateAsset=""All"" is always true unless PackageType== DotNetCliTool, but that\'s a separate change to make...didn\'t want to muddy the PR.'"
2394,202220922,"b'Cool, glad that\'s going in to 2.2. \r\n\r\nAlso, yes, the Publish=""true"" is redundant. I can remove that line.'"
2394,202517238,b'Yes. Removed that along with the code snippet.'
2404,203199155,"b""Yup, that's why. I only added the separate properties because aspnetcore's baseline is 2.1.1 (for now.)"""
2501,213861537,"b""We added the separate flag for source-build SDKs. The RedHat SDK sets TargetLatestAspNetCoreRuntimePatch=true because users in that environment run from NuGet packages, not a shared framework. I think it's worth dropping 3.0, but we need it in 2.x."""
2462,236341686,"b""@peterhuene @nguerrera the PR title and description say UseAppHost should be true for fx-dependent apps, but I don't think this actually works for most projects due to the condition `'$(RuntimeIdentifier)' != ''`. @guardrex was trying to write docs for this and it doesn't look like the apphost is produced with the 2.2 SDK by default. https://github.com/aspnet/Docs/issues/9214#issuecomment-441073554.\r\n\r\nWas it intentional to require `RuntimeIdentifier` in order to generate the apphost in a fx-dependent app?"""
2462,236365222,b'Thanks for clarifying.'
2774,246834460,"b""Should we condition this target to only run when Microsoft.AspNetCore.App is referenced? If that targeting pack isn't reference, generated code may not compile since Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute would be undefined."""
3102,273284848,b'Is this a new FrameworkReference?\r\n\r\nWhat does it mean compared to the rest of the frameworks? '
3102,273291557,"b""The last part is new to me. \r\nRestore does not account for `Pack=false`. It flows everything by default. \r\n\r\nBasically the way it's currently working is targeted more for the optional shared frameworks. \r\n\r\nDo we need to reconsider that? Do we need to add a PrivateAssets like switch to FrameworkReference items? """
3102,274182641,"b'Restore does not read the ""pack"" attribute and it probably shouldn\'t. \r\npack=false will prevent it from being included in the package only. \r\n\r\nWe should discuss this in a separate meeting or a Monday sync-up. \r\n\r\nThe existence of a netstandard framework reference also kills our transitivity with FrameworkReference story. \r\n\r\nhttps://github.com/NuGet/Home/wiki/%5BSpec%5D-FrameworkReference-in-NuGet#what-happens-in-the-future-ifwhen-frameworkreference-are-added-to-other-frameworks \r\n\r\nWe need to rethink that as well. \r\n\r\nIssue: https://github.com/NuGet/Home/issues/7988\r\n\r\n//cc @rrelyea '"
3112,274601195,"b""Looking into it. \r\nThere's a historical reason for the normalization since VS 2013 didn't work with non-normalized paths. \r\n\r\nNuGet pack used to escape paths, now it doesn't. https://github.com/NuGet/NuGet.Client/pull/1855\r\n\r\n@nguerrera's comment is suggesting I should double check why/whether lib & contentFiles are treated differently anywhere in NuGet. \r\n\r\nI'll get back once I've looked into that. """
11451,416981147,b'Folder specific for this test. '
11451,416981715,b'I can add tests for both of those scenarios. '
11451,417014721,b'Added more tests. '
11954,438313161,b'fixed.'
12612,459717537,"b""Pretty sure NuGet always returns an actual version, if nothing is provided, we default to 0.0.0, if it's an invalid version we fail. """
12646,461101962,"b""Given that this is added responsibility for the NuGet team, I'm curious how this is expected to work in the sense that I'm not sure we have merge permissions. \r\n\r\ncc @aortiz-msft @jondouglas\r\n\r\nNot all members in dotnet/nuget-team are familiar with the test infra (some of us are because we've contributed). """
12646,461102406,"b""While we are added, can we 'refresh' the nuget team members. \r\n\r\nFrom the current people in the team, only myself and @rrelyea are actively on NuGet."""
12646,461910937,b'I was just waiting on @aortiz-msft for a comment :) '
12576,468741110,b'The sources specified through an msbuild property take preferrence over nuget.config and all. \r\n\r\nThis was my recommendation because it allowed fully locked down feeds.'
12897,470160591,b'I think you want `TargetFramework` here. \r\n\r\nThen you can ask NuGet about the framework based on the alias. '
12897,470162114,b'In https://github.com/NuGet/NuGet.Client/compare/dev-nkolev92-tfmImprovements?expand=1 I am adding a ParseComponents method that should take a TFM & TPM. \r\n\r\n'
12897,470162385,"b""For all tasks that make use of the assets file, ideally instead of looking it up by framework, you'd look up by the alias. """
12897,470208273,"b'NuGet won\'t restore if it ever detects an ""unsupported"" framework. \r\n\r\nNuGet could probably try to throw a better error though. '"
12897,470208428,"b""As far as hinging it off of restore, it won't run in VS. """
12915,470899964,"b'@sfoslund will the fact that msbuild reports `,Version=` be a problem here? '"
13093,476945634,"b""I think it'd nice if you didn't have this dependency, but don't think the current NuGet api has an alternative for you. \r\nThe lockfiletarget can certainly carry the alias...maybe I'll jsut add that. \r\n\r\nYou need a null check here: \r\n\r\n```suggestion\r\n                var frameworkAlias = lockFile.PackageSpec.TargetFrameworks.FirstOrDefault(tfi => tfi.FrameworkName == lockFileTarget.TargetFramework)?.TargetAlias;\r\n```"""
13598,488920785,b'oops :D '
13924,497811764,"b""Seems fine :) \r\nThis could become interesting if anyone tries to call this task with UWP projects, but that's not an officially supported scenario ofc :)\r\nJust keep it in mind in case you see some weirdness. """
13924,497812006,b'This looks right as well.'
13924,497812551,"b""cc @zivkan Remember the extension point for pack that's supposed to help customers get the short name?\r\nThis might be it :) """
14517,521735634,b'I think this looks good.'
14517,521736680,b'\xf0\x9f\x91\x8f '
3892,345022724,"b'why not just using `Condition=""\'%(ExcludeFromSingleFile)\' != \'true\'""`, easier to read, less prone to foot shooting.'"
130,78021185,b'I believe so. @srivatsn why `netstandard1.3`?\n'
11181,406846250,"b""In my case the environment return an empty string but how said @Forgind it's possible that the path contains invalid characters, and the try/catch prevent any issue related with this variable."""
81,75914128,"b'Only downside I can think of is that it makes it easier to accidentally double-import, and it makes debugging somewhat more difficult because you have to hop to another file.\n\nI think we\'ve gone way too far in the ""put everything in one giant mass of spaghetti"" direction historically, so I support separate files for logically separate things.\n'"
81,75914704,"b""Do you need `Returns` at all?\n\nIf so, it seems a bit odd to return a string with a semicolon-delimited list to another project--it's probably slightly more efficient than getting built twice, but I'd need to be convinced that it was worth it.\n"""
81,75915924,"b""Prior art: generally this is handled externally to the build by something like Jenkins or VSTS setting a property that flows down and is consumed here, or targets are included that compute a version--in MSBuild we use [https://github.com/AArnott/Nerdbank.GitVersioning/](https://github.com/AArnott/Nerdbank.GitVersioning/) for this.\n\nProblems in this space are that\n1. You don't want the version to change just because someone hit f5 again, potentially causing a rebuild cascade of useless work even with no code change.\n2. You'd like version numbers to correspond to source versions across machines.\n\nEspecially with distributed hash-based version control, this is tough.\n\n---\n\nIn reply to: [75915064](https://github.com/dotnet/sdk/pull/81#discussion_r75915064) [](ancestors = 75915064,75914917)\n"""
91,76444354,"b""I'm pretty sure this comment makes no sense. But it's there in common targets, too, so pulling it in here is the right thing. I just tried to divine why it is this way by staring at history, and it's been like this since 2005. So we can't track anybody down to ask :(\n"""
91,76444897,"b""Seems reasonable to me, even though it's an unpleasant level of hoop-jumping.\n\n---\n\nIn reply to: [76439742](https://github.com/dotnet/sdk/pull/91#discussion_r76439742) [](ancestors = 76439742)\n"""
154,79714144,"b""Style recommendation: never return `true` or `false` from within a task. Instead, always return `Log.HasLoggedErrors`.\n\nIt's _intensely_ annoying to debug builds that have failed but emitted no errors, and fairly annoying to go the other way. #Resolved\n"""
276,83316334,"b""They are indeed irrelevant there since it doesn't do anything.\n"""
276,83317550,"b""@nguerrera do you remember why it's structured this way? it does force `GetAssemblyVersion` to run which is probably desirable.\n"""
282,83470139,"b""Selfishly, MSBuild has a net35 project and it'd be awesome if that worked. But that can wait and if it never happened we'd probably be fine.\n"""
379,87610315,"b""That is true, though `System.Version.TryParse` will fail on a `v`-prefixed string so you'll probably need to do that still.\n"""
379,87627612,b'The latter: strings that parse as version numbers get compared that way with the usual comparison operators.\n'
381,87643007,"b""My instinct would be to go before `_CleanGetCurrentAndPriorFileWrites` instead, since this isn't really compile-specific. But `_CheckForCompileOutputs` is before that so this is ok. Did you prefer this for a reason?\n"""
381,87653279,"b""^ that meshes with my reasoning on @nguerrera's question. \xf0\x9f\x91\x8d \n"""
424,89807589,"b""Don't put this in a separate target, add it to `GenerateBuildDependencyFile`.\r\n\r\nMSBuild will manipulate items that it can statically understand even when it skips a target for being up to date. It wasn't doing that before because it can't predict what the task would have output."""
444,90457324,"b""I disagree with this, elaborated on your MSBuild PR.\r\n\r\nIt doesn't matter much here since this applies only to Windows, but it's probably too late to put this behavior in for the MSBuild-to-CLI drop for the next prerelease, and they should be consistent."""
444,90513418,b'Though in the current MSBuild the final `Sdk` should also have an initial cap.'
444,90513670,"b""(of course in Windows VS setup authoring it won't matter)"""
425,90552060,"b""This is what we agree it should be but doesn't match what MSBuild does right now."""
460,91009338,"b""Further, all of the loggers mentioned are file loggers, so you're just getting default console verbosity output. I think you're looking for `/verbosity:minimal` or `/consoleloggerparameters:Verbosity=minimal`."""
468,91328292,b'This should be in targets.'
468,91328327,b'Typo: overrid'
468,91329876,"b""Well, maybe not; it's reasonable to want to override the default. In which case, no need to prepend the existing blank one."""
468,91330845,"b'I was wrong, it should be here. But if it\'s here, no need to follow the ""augment the previous definition"" pattern since there won\'t be one.'"
624,95611752,"b""I suspect that the experiences of https://github.com/dotnet/sdk/issues/623 and https://github.com/dotnet/roslyn-project-system/issues/1126 indicate that we should also promote the `Update` and `Remove` mechanisms here. But that makes a very long error, which isn't ideal."""
624,95612142,"b""I'd say to do it here because `Content` is a type known in `Common.targets`, and this is the closest layer above that. If it were defined and used only in Web, I'd say to move it there."""
624,95615426,"b'I don\'t know what the right answer is. My guess is: change this to a semicolon (like MSBuild uses to separate items) and don\'t localize it (MSBuild itself doesn\'t seem to, probably in part because there\'s no distinction between ""format list of items to print"" and ""format list of items to pass a string to code"" which would have different localization needs).'"
630,95638537,"b""This seems fine but I'm a tiny bit worried about doing it in combination with the higher-pri change."""
633,96063383,"b""Is remove/readd required because Remove can't filter by metadata?"""
633,96063626,"b""I've seen comparisons like this collapsed to a single `'@(_ImplicitPackageReference)@(_OverridingPackageReference)' != ''`. Just FYI, no reason to change this."""
633,96067087,"b""I can't either. In a target, you'd batch to evaluate the condition multiple times but that wouldn't work here. We'll have to see if this comes up often enough to worry about providing convenience for."""
591,97168891,"b""That's correct, no way to do this within a project. You can create a new project that just does this work and invoke it multiple times in parallel, or you could invoke a target on this project multiple times in parallel."""
797,99249317,"b'Indeed it would, but it requires returning an item rather than a property which seemed more invasive.'"
797,99249602,"b""I don't think I understand. Can you rephrase?"""
797,99369455,b'Makes perfect sense. Thanks.'
797,99370942,"b""That's what I get for trusting the GitHub web editor."""
797,99372218,b'Fixed.'
852,100575980,"b'Since you\'re opted into v15-only features already, you could simplify this file by dropping `ToolsVersion` and the namespace and changing this line to\r\n\r\n```xml\r\n<Import Project=""$([MSBuild]::GetPathOfFileAbove(\'Common.props\'))"" />\r\n```\r\n\r\n(That property function is new to MSBuild 15: https://github.com/Microsoft/msbuild/issues/1277)'"
828,100852261,"b""Where is `AdditionalPropertiesForGetTargetFrameworkProperties` consumed? I don't see it in the MSBuild side of this PR or here."""
828,100852724,b'Do we actually want to pass an empty RID or is this now just like `ProjectHasSingleTargetFramework` where it should instead be removed?'
890,103803014,"b""As a shepherd of the MSBuild file format: don't use `ItemGroup`. It's a bad name even for MSBuild."""
981,105951557,"b""I don't understand the implications of this for other tests fully."""
981,105951978,"b'So `Optimize` is a derived property that was getting mangled before? If so, \xf0\x9f\x91\x8d '"
993,106278726,"b""Yes, that's a really good idea."""
993,106294220,"b""Ok, I really like this in theory but I'm worried it breaks when Project A cross-targets and depends on Project B (not an Sdk project). If Project B just has the common-targets placeholder for GetTargetFrameworkProperties, it won't return back that we should strip the TF and RID global variables--but we should. Right? Or is that a scenario we don't care about?"""
1007,106905023,"b""I guess everything `chomp`s input strings that are file paths, but I'd probably rather see this on one long awful line than have the newline+whitespace in the property."""
1007,106906248,"b""I'd also like to see a check that the previous hashed-name generated AssemblyInfo file is deleted (by `IncrementalClean` but that is an implementation detail) after changing it."""
993,107563876,"b'Ok, that\'s possible, but I don\'t think I can get through implementing it today.\r\n\r\nIt\'s easy enough to make `GetDesiredProperties` return the right set of properties to set and to remove.\r\n\r\nWhere it\'s hard is removing the right properties for projects that want to short-circuit by saying ""I don\'t cross-target, just strip the properties""--and not reevaluate with ReferringTF. We could change the protocol on `ShouldQueryForProperties` to instead get back an item with the project name and metadata for removed properties, basically the same way `GetDesiredProperties` does now. That\'s a harder thing to implement (especially in the default case) but not too bad.\r\n\r\n@AndyGerlicher does that description make enough sense for you to pick this up?'"
993,107570712,"b""@AndyGerlicher I pushed https://github.com/rainersigwald/msbuild/tree/general-prop-set-and-unset-through-refs and https://github.com/rainersigwald/sdk/tree/general-prop-set-and-unset-through-refs with a WIP of going down this road. It almost works--but only for cross-targeting projects. It doesn't strip TF/RID from refs to single-targeting projects.\r\n\r\nWhat should be done next to go down this road is to change `ShouldQueryForProperties` to return the same type of thing that `GetDesiredProperties`, except no `SetDesiredProperties`--we only care about `UndefineProperties`, which should be set for all future calls to that ProjectReferenceExistent."""
1173,114627692,"b""`$([MSBuild]::Escape('$(TargetFramework)')` ?"""
1171,114667069,"b'You don\'t need to specify `Update=""@(PackageReference)""`--inside a target, update is the default operation. In fact, I\'m very surprised this isn\'t erroring out for you--it should because of https://github.com/Microsoft/msbuild/pull/1620.'"
1255,118512836,"b'Opinion nit: since ""ownership"" of both of these targets is in the same place, I\'d prefer seeing the dependency expressed as a `DependsOnTargets` on `CoreGenerateAssemblyInfo`. Reading the dependencies in that direction ""feels right"" to me, in the absence of other factors.'"
1255,118518182,"b""That's an interesting idea. I'm convinced!"""
1255,118543397,"b'@dasMulli \r\n\r\n> Does the DependsOnTargets=""A;B;C"" set the build dependency of ""b depends on a""?\r\n\r\nDepends on how precise you\'re being with your language \xf0\x9f\x98\x81\r\n\r\n`DependsOnTargets=""a;b;c""` does guarantee an order, unless there\'s another factor like `a DependsOnTargets=""c""`. That happens because MSBuild uses a stack to order target execution, and encountering a target\'s `DependsOnTargets` pushes onto the stack in the given order. This is (almost) documented at https://docs.microsoft.com/en-us/visualstudio/msbuild/target-build-order.\r\n\r\nThere\'s another internal concept of dependency, though--when MSBuild considers a target and push prerequisites onto the stack, they get annotated with a ""Parent"". Then, if the target fails, the engine can additionally mark its parent as failed (and skip other targets that were building because of that parent). https://github.com/Microsoft/msbuild/pull/2133 is currently tweaking this for a corner case.\r\n\r\nThe latter is not done by an ordered `DependsOnTargets`--but that rarely matters.'"
1270,119189520,"b'I was going to suggest just doing this unconditionally, but it seems reasonable to defensively enable the .NET 3.5 scenario, if it ever gets lit up from other issues.'"
1407,127243830,"b""This will return different metadata when the project entry point is `Build` versus `GetTargetPath`, won't it? If building only `GetTargetPath`, the is-any-dependency-NETStandard target won't fire and the return value won't be transitive. But when returned from `Build`, `ResolveReferences` will have run and the return value will be transitive.\r\n\r\nThe behaviors could be aligned by adding reference resolution to this target's dependencies, but that would be a pretty big change; IDE and other specialized builds assume that `GetTargetPath` is very cheap and it wouldn't be if it was recursive."""
1407,127246132,"b'Adding this check (with inverted version-number checking) to `ImplicitlyExpandDesignTimeFacades` (for System.Runtime facades) would fix #1393, right? That might be less invasive than returning `Portable`.'"
1407,127292491,"b""Talked to @dsplaisted offline. This comment is wrong, because this target is a) unconditional and b) uses information only from this project. Since it doesn't refer to `DependsOnNETStandard` defined above, there's no danger of transitivity and thus no different behavior depending on the value of `DependsOnNETStandard`."""
1440,128860612,"b'""must be compatible""?'"
1454,131194931,"b'So you\'re trying to copy metadata from Right to Left items that correspond? You can do that with shared metadata batching:\r\n\r\n```xml\r\n<Project>\r\n <ItemGroup>\r\n  <L Include=""foo"" />\r\n  <L Include=""bar"" />\r\n  <L Include=""baz"" />\r\n  <L Include=""bat"" />\r\n\r\n  <R Include=""foo"" M=""m1"" />\r\n  <R Include=""bar"" M=""m2"" />\r\n  <R Include=""baz"" M=""m3"" />\r\n  <R Include=""bat"" M=""m4"" />\r\n </ItemGroup>\r\n\r\n <Target Name=""ExecuteJoin"">\r\n  <ItemGroup>\r\n   <Joined Include=""@(L)"" Condition=""\'%(Identity)\' != \'@(R) \'"">\r\n    <M Condition=""\'%(L.M)\' == \'\'"">@(R->\'%(M)\')</M>\r\n   </Joined>\r\n  </ItemGroup>\r\n\r\n  <Message Text=""Joined: @(Joined->\'%(Identity), %(M)\')""/>\r\n </Target>\r\n</Project>\r\n```\r\n\r\n```\r\ns:\\>msbuild S:\\msbuild\\join.proj\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 8/3/2017 11:20:22 AM.\r\nProject ""S:\\msbuild\\join.proj"" on node 1 (default targets).\r\nExecuteJoin:\r\n  Joined: foo, m1;bar, m2;baz, m3;bat, m4\r\nDone Building Project ""S:\\msbuild\\join.proj"" (default targets).\r\n```\r\n\r\nOnly caveat is you can\'t use different keys for the left and right item--but you can always first add a JoinKey metadatum to both lists.'"
1454,131245402,"b'True!\r\n\r\nThe condition should have been `\'%(Identity)\' != \'\'`, since all we need is to batch over a unique shared metadatum.\r\n\r\n```xml\r\n<Project>\r\n <ItemGroup>\r\n  <L Include=""foo"" />\r\n  <L Include=""bar"" />\r\n  <L Include=""baz"" M=""m3_original"" />\r\n  <L Include=""bat"" />\r\n\r\n  <R Include=""foo"" M=""m1"" />\r\n  <R Include=""bar"" M=""m2"" />\r\n  <R Include=""baz"" M=""m3_modified"" />\r\n  <R Include=""bat"" M=""m4"" />\r\n </ItemGroup>\r\n\r\n <Target Name=""ExecuteJoin"">\r\n  <ItemGroup>\r\n   <Joined Include=""@(L)"" Condition=""\'%(Identity)\' != \'\'"">\r\n    <M Condition=""\'%(L.M)\' == \'\'"">@(R->\'%(M)\')</M>\r\n   </Joined>\r\n  </ItemGroup>\r\n\r\n  <Message Text=""Joined: @(Joined->\'%(Identity), %(M)\')""/>\r\n </Target>\r\n</Project>\r\n```\r\n\r\n```\r\nExecuteJoin:\r\n  Joined: foo, m1;bar, m2;baz, m3_original;bat, m4\r\n```\r\n\r\nMy original attempt ""worked"" because I had a trailing space in `\'@(R) \'` . . . so the comparison never matched and always passed.'"
2042,174198870,"b""Presumably some, since we wouldn't have to even think about the task in that case, but I can't imagine it's significant."""
2136,181232891,"b'Yeah, I think so--slower tests but hopefully fewer mysterious undiagnosable failures.'"
2413,203541664,"b'`AfterTargets` is fine, with the caveat that you shouldn\'t do `AfterTargets=""Build""` because of https://github.com/Microsoft/msbuild/issues/3345. But I generally prefer to use `BeforeTargets`--can you `BeforeTargets=""IncrementalClean""`?'"
2413,203543971,"b'It\'s reasonable to have both `BeforeTargets=""IncrementalClean"" DependsOnTargets=""ResolveReferences""`. I\'d go with that.\r\n\r\nIt is funny looking, but they\'re different relationships: BeforeTargets means ""before you run that, run me first"", while DependsOn means ""before I run, run these first"". Both can be true at once.'"
2545,220695674,"b'`GetCopyToOutputDirectoryItems` should _not_ do actual work and should not depend on `CoreCompile` (and friends), because it is called on references in the `/p:BuildProjectReferences=false` case, which should not trigger compilation in the referenced projects. I don\'t think the `NoBuild` case applies here for that reason--you\'re building, but some other project.\r\n\r\nUnfortunately, I can\'t think of a great way to accomplish this. Best I can think of is to move the actual work into a target (`CreateAppHost`?) and append `;CreateAppHost` to `$(CompileDependsOn)`, which would insert it in the normal flow shortly after `CoreCompile` but not require it to express the dependency. Then, do no real work in `_ComputeNETCoreBuildOutputFiles` and run it `BeforeTargets=""GetCopyToOutputDirectoryItems""`.'"
2545,220959740,b'typo: `destination`'
2545,220960108,"b'Sanity check: this file gets imported _after_ `Microsoft.Common.CurrentVersion.targets`, right?'"
2545,220960492,"b'Does this need to be overrideable? Since it\'s set inside the target there\'s nothing the user can do to override it in their project, so perhaps it should have an underscore ""private"" name.'"
2545,221696973,"b""No, I don't think there'd be a problem. Well-known/built-in metadata is evaluated just-in-time, so if you create an item, create the file, and then ask for `%(Whatever.ModifiedTime)` it should still work."""
2590,226327622,"b""If you're switching URLs, I'd switch to the final location.\r\n\r\n```suggestion\r\n|[![](https://dev.azure.com/dnceng/internal/_apis/build/status/dotnet/sdk/DotNet-Core-Sdk%203.0%20(Windows)%20(YAML)%20(Official))](https://dev.azure.com/dnceng/internal/_build?definitionId=140)|\r\n```\r\n\r\n[![Build Status](https://dev.azure.com/dnceng/internal/_apis/build/status/dotnet/sdk/DotNet-Core-Sdk%203.0%20(Windows)%20(YAML)%20(Official))](https://dev.azure.com/dnceng/internal/_build/latest?definitionId=140)"""
2681,235042466,"b'Realistically, this will probably never happen :('"
2684,235479257,b'Are you doing this for most/all of the paths into `@(ResolvedFileToPublish)`? If so it might be more maintainable to set this in an item definition rather than at each location.'
2990,260482966,"b""Is it a problem to move this from eval to build time? Feels like you've hooked it in early enough but maybe VS has other ideas?"""
2997,267102514,"b'I agree that overriding `ToolTask.Execute` is surprising and likely to result in some unpleasant surprises. If it can be avoided, I think that\'s best--the ""split into two tasks"" approach sounds pretty good to me (but I don\'t have domain expertise in store/crossgen).'"
3086,272747892,b'Not sure how I feel about pulling fluent-assertions into product code.'
3112,274478934,"b""Yeah, I'd really like to know if this is a NuGet issue (unescaping the file on disk for internal consumption), or a case where MSBuild overzealously escapes/unescapes."""
3112,274559497,"b""I agree we should fix this in case someone has a folder with `%20` in it (or whatever). But I'd also like to understand the NuGet behavior."""
3125,276414515,"b""It all depends on how careful you want to be and whether you expect scenarios to be common or not.\r\n\r\n`$(MSBuildAllProjects)` catches changes to properties _specified in project files_. That's most projects, but it doesn't include things set on the command line. Here, that'd be something like `dotnet build -p:ExtraLinkerArgs={whatever}`.\r\n\r\nThat can also be handled, if you think it's likely to be an important scenario. Right now, it's done only for CoreCompile, added in Microsoft/msbuild#3978.\r\n\r\nYou know the scenario better, but I lean toward including `$(MSBuildAllProjects)` and leaving it at that until/unless there are significant user complaints."""
3240,287125870,"b""I also recommend quotes for consistency, the rules are too confusing to remember.\r\n\r\nFor `@(_SourceItemsToCopyToPublishDirectoryAlways->'%(FullPath)')` vs `%(_SourceItemsToCopyToPublishDirectoryAlways.FullPath)`, the batching engine will ensure that the item creation here is called once per unique set of `%(Item.Metadata)` values. If `FullPath` is not unique per `TargetPath`, the resulting batches could be confusing.\r\n\r\nIn that same condition before, `@(_SourceItemsToCopyToPublishDirectoryAlways->'%(FullPath)')` would be multi-valued and the condition would fail, so I don't think that's much worse here.\r\n\r\nIf `TargetPath` is unique (as we hope it would be to prevent double writes), there should be no meaningful difference between the two."""
3342,295391131,b'`timesDebuggingCodeLeakedIntoAPR++` \xf0\x9f\x98\xb3'
3342,295537807,b'Misunderstanding: I thought it was part of standard2.1. Restricting to the known-good .NET Core 3.0+ case.'
3347,296042623,"b'I would probably say ""yes"" but I don\'t know anything about the actual format of crossgen errors.'"
3347,296043251,"b""What it was doing previously was fed through\r\n\r\nhttps://github.com/microsoft/msbuild/blob/ee12fc2666de515d1981822e404ea40a8c5f71d5/src/Shared/CanonicalError.cs#L65-L81\r\n\r\nWhich admits some things but not everything before literal `warning:`. If crossgen uses any of that, I'd leave it as is; if it only does `^warning:` I'd scan for just that."""
3347,296043786,b'I think you should `Log.LogMessage` (at low importance?) even in warning-suppression mode. Dropping the warning lines entirely is surprising; demoting them in importance seems reasonable.'
3347,296043975,"b'Why is this a distinct property rather than just using the task output? Is it because it could get set for either invocation? If so, please comment to that effect and use distinct intermediate variables.'"
3427,303938962,"b""nit: what if this throws, say because the current user doesn't have permission to write or delete the file?"""
3484,308767241,"b'My instinct is to use `$(CopyRetryCount)` and `$(CopyRetryDelayMilliseconds)`--this feels very analogous. Or maybe as the defaults for the distinct properties?\r\n\r\nAlso, nit: usually this type of default property is defined outside a target.'"
3533,314511437,"b""```suggestion\r\n                .Execute()\r\n```\r\n\r\nshouldn't need this any more"""
3689,329759356,b'This looks ok to me. `_CheckForInvalidConfigurationAndPlatform` is run for ~all build scenarios.'
3957,350459224,"b'Should we make the filename more descriptive?\r\n```suggestion\r\n      <PublishCleanFile Condition=""\'$(PublishCleanFile)\'==\'\'"">PublishOutputs.$(NormalizedPublishDirHash.Substring(0, 10)).txt</PublishCleanFile>\r\n```'"
3957,350459922,b'Is this dependent on `PublishSingleFile` or `UseAppHost`? I think my mental model might be confused.'
3957,350461034,"b'Should the properties/items used only in this target be ""private"" (that is, prefixed with an underscore)?'"
3957,356325743,"b'Sorry, totally missed your question! This is my mental model, but it could easily be wrong:\r\n\r\n* `UseAppHost` controls whether a native application named `$(AssemblyName)$(_NativeExecutableExtension)` (`projectname.exe`) is created in the output folder\r\n* `PublishSingleFile` controls whether that application has all the applications dependencies bundled into it (`true`) or whether they\'re just next to it on disk (`false`). It requires `UseAppHost=true` (or you get `error NETSDK1067: Self-contained applications are required to use the application host. Either set SelfContained to false or set UseAppHost to true.`).\r\n\r\nIf that\'s right, then the question ""was `foo.exe` produced in the output directory"" would be better answered with `$(UseAppHost)`. But again: I\'m not confident of that.'"
10981,398208520,"b""Can you confirm that you tested restore in VS from a clean project?\r\n\r\nMy concern is: does VS use a design-time build to extract `PackageReference` when it does restore, or does it use only evaluated state, which wouldn't see this?"""
10981,398208689,b'Escape hatch opt out is a great idea.'
10981,398210046,b'What if the project has an existing reference to this? Does this conflict or supersede?'
11635,428619651,"b""This is a nice approach to this problem! But since it has to happen on every build, it's making me think about having some precomputation at SDK build time for faster execution time. We can keep that in our back pocket for the future."""
11635,428620254,"b'```suggestion\r\n          BeforeTargets=""CoreCompile"">\r\n```\r\n\r\nThe `Build` target is the _last_ target that runs in a normal build. This makes sense after you smash your head against the target-ordering rules for a bit: we want to `Build` the project. But that `DependsOn=""BeforeBuild;CoreBuild;AfterBuild""`. So those must run first. Each of them depends on various other things.\r\n\r\nIn this case, the defines will be consumed by the compiler in the `CoreCompile` target, so that\'s probably the right place to hook.\r\n\r\nAnother option, since the only inputs to the task are properties that shouldn\'t change during execution, would be to do it as early as possible, `BeforeTargets=""BeforeBuild""`. I can\'t think of a reason to prefer that though; generally we prefer to specify the actual dependency.'"
11635,428621062,"b'This also shows a weakness of the test method `AssertDefinedConstantsOutput`: it\'s looking at the _final state_ of the project, not the state at the time of the compiler invocation.\r\n\r\nYou could:\r\n\r\n1. generate code that uses the compiler constants and check for it in the output\r\n1. inspect the compiler command line somehow (scrape from log?)\r\n1. Inject a target that runs `AfterTargets=""CoreCompile""` that preserves the state you care about and test that.'"
12386,454627560,"b'I think you want this instead\r\n```suggestion\r\n    <NetSdkError Condition=""@(TransitiveFrameworkReference->AnyHaveMetadataValue(\'Identity\', \'Microsoft.WindowsDesktop.App\'))""\r\n```\r\n\r\nSmall test/proof:\r\n\r\n```xml\r\n<Project>\r\n \r\n  <ItemGroup>\r\n    <TransitiveFrameworkReference M=""g1"" Include=""a"" />\r\n    <!-- <TransitiveFrameworkReference M=""g2"" Include=""Microsoft.WindowsDesktop.App"" /> -->\r\n    <TransitiveFrameworkReference M=""g3"" Include=""Microsoft.WindowsDesktop.App.Bar"" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=""asdf"">\r\n    <Warning Text=""@(TransitiveFrameworkReference->\'%(Identity)\'    )"" />\r\n    <Warning Text=""@(TransitiveFrameworkReference->\'%(Identity)\'->Contains(\'Microsoft.WindowsDesktop.App\'))"" />\r\n    <Warning Text=""@(TransitiveFrameworkReference->AnyHaveMetadataValue(\'Identity\', \'Microsoft.WindowsDesktop.App\'))"" />\r\n  </Target>\r\n</Project>\r\n```'"
12030,457648351,"b'We made this switch, right?\r\n\r\n```suggestion\r\n    <ProjectConfigurationDescription Include=""TargetFramework=$(TargetFramework)""/>\r\n```'"
14008,501163415,"b""This is an indication that we've got channels set up wrong.\r\n\r\nThis one was bogus:\r\n\r\n```sh-session\r\n\xe2\x9d\xaf darc get-subscriptions --target-repo sdk --source-repo msbuild\r\nhttps://github.com/dotnet/msbuild (VS 16.8) ==> 'https://github.com/dotnet/sdk' ('master')\r\n  - Id: 541ffb79-a58a-4b7b-321c-08d8080363b6\r\n  - Update Frequency: EveryBuild\r\n  - Enabled: True\r\n  - Batchable: False\r\n  - Merge Policies:\r\n    Standard\r\n  - Last Build: 20201002.3 (ca44138662e3aa90eb9305dd31d906ef02e962cb)\r\n```\r\n\r\nI just updated it to the `VS 16.9` channel and retriggered the subscription."""
418,89031509,b'Should it be ==? '
12636,465483761,b'I think this can now be removed.'
12814,466627772,"b""AFAIK `/` is a reserved character in Windows and cannot be used for naming filenames/folders. This wouldn't be the only place where we use slashes for dir separators. """
14432,518216104,b'My bad \xf0\x9f\x98\x84 - fixed '
12198,445944279,"b'OSPlatform.FreeBSD is only available for netcoreapp 3.0+, while SDK also builds against netstandard 2.0 and older runtimes.'"
12198,445945247,"b'The official casing is lowercase (to disambiguate letters `i` and lowercase `l`, like iOS). In the output we print the value as is.'"
12198,452990483,"b'Thanks, fixed the casing for new platforms and used `OSPlatform.FreeBSD`. I was confused by the initial acquisition of several SDKs and thought we need to support older netcore TFMs:\r\n\r\n```sh\r\n$ sdk/build.sh\r\n...\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Runtime/1.0.5/dotnet-ubuntu.16.04-x64.1.0.5.tar.gz\r\n...\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Runtime/1.1.2/dotnet-ubuntu.16.04-x64.1.1.2.tar.gz\r\n...\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Runtime/2.1.0/dotnet-runtime-2.1.0-linux-x64.tar.gz\r\n...\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Runtime/2.2.8/dotnet-runtime-2.2.8-linux-x64.tar.gz\r\n...\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Runtime/3.1.0/dotnet-runtime-3.1.0-linux-x64.tar.gz\r\n...\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Runtime/5.0.0-preview.8.20325.1/dotnet-runtime-5.0.0-preview.8.20325.1-linux-x64.tar.gz\r\n...\r\n```'"
12198,453841387,"b'Interestingly, https://github.com/dotnet/runtime/pull/39209 is changing the platform name comparison to `OridinalIgnoreCase`. :)'"
12198,453861142,"b""> It's still more correct to use the actual property names and not rely on strings.\r\n\r\nAgreed.\r\n\r\n> Side question: Why aren't `ILLUMOS` and `SOLARIS` added to OSPlatform?\r\n\r\nFCL implementation is in-progress for these platforms and the new properties will require API review once that work is completed. I deferred to this guideline: https://github.com/dotnet/runtime/issues/23530#issuecomment-329523856. e.g. FreeBSD port work was started in Mar 2015, and the public property was added in Nov 2018 for .NET Core 3.0, when most of runtime+libraries were made functional on the platform. By that example, it will take some time and effort to implement all libraries starting with the complex ones (such as System.Diagnostics.Process, System.IO.File etc.) for SunOS-like platforms."""
14093,504378556,"b'Sure, pushed the update. I thought I did it for consistency; but now looking with (relatively) fresh eyes, the reason why `--rutime` is explicitly redefined here might be because MSBuild properties is pluralized. :)'"
14093,504686882,b'Updated in all resx/xlf files. More feedback from @KathleenDollard is welcome. :)'
14093,509931908,"b'I do not know the full background why source-build chose to override it, but.. if the value of `NETCoreSdkRuntimeIdentifier` is overridden in source-build repo for set of reasons, do those same reasons not apply to `RuntimeIdentifier`?\r\n\r\nIn other words, `--use-current-runtime`\'s docs are stating ""Use current runtime as the target runtime."", the one SDK is executing on. This is what we have implemented. It is not strictly calling out `portable-rid`, that\'s an internal detail of general (non-overridden, non-source-build) case.'"
14093,510332992,"b'> except maybe the word ""machine""\r\n\r\nIt was adapted from @eerhardt\'s question https://github.com/dotnet/sdk/pull/14093#issuecomment-708365676 (and maybe derived from the fact that \'machine config\' is a thing in .NET Framework) \xf0\x9f\x98\x89'"
12198,515455532,b'Ah it will. the testing was blocked by System.Diagnostics.Process port on this platform. I have opened #14395.'
226,82458009,"b'Should we add  ""1.0.0-alpha-*"" instead so that they get the latest package?\n'"
576,94520699,b'sure. will do.'
3183,279135928,b'The check for Exists for PublishProfileFullPath below should handle the default import. So we are good with the default scenarios. https://github.com/aspnet/websdk/blob/ef0b2621e90ed62b30b72d337c317f61f3df0c12/src/Publish/Sdk/ImportPublishProfile.targets#L20'
11914,436125492,b'This is what is causing the E2E tests to be disabled. '
11914,436126213,"b'Let me try running it locally to see if there are any issues, else we can enable it. I had disabled it for the net5.0 migration.'"
11914,436138667,b'yup. Agreed. hence the PR approval. '
11963,437532466,b'This was the issue. This was copying files from the installed sdks in the machine. '
11963,439178449,"b""@joeloff \r\nHad to add P2P reference to get the build ordering correct. This is actually not needed for building. Forcing a solution build order doesn't seem to fix it. \r\n\r\nWill look at a better way to handle it in a subsequent PR. """
12461,454727799,b'Did a couple of renames before I landed at this name and messed up the casing in the end. Thanks for catching it. Will fix it. '
12461,455236743,b'It is defined in the property in NetSdk. So this would be always available and users can also override from csproj through a property is needed. '
12461,455237922,b'This is used in a target later to compute the files that were added as part of pre-build/post-build/pre-publish step. e.g: web pack invocations that generate content which needs to be included in publish but were not evaluated as part of initial glob since the files were not present during the evaluation. '
12461,455275595,b'Discussed with Bill. This is because Razor still sets this initially in the Razor SDK - https://github.com/dotnet/aspnetcore/blob/master/src/Razor/Microsoft.NET.Sdk.Razor/src/Sdk/Sdk.Razor.StaticAssets.ProjectSystem.props#L49'
12533,456541902,"b'The problem with the actual path to a file is that if the file is absent, project system marks them as non-existent files. Wildcard does an exist check as well. I thought about the additional files getting included in none that starts with ""launchSettings"" and have "".json"" extension but if such a file exist, it should ideally be a none item any ways. \r\n\r\nThe other alternative is to add an exist check to all files without the wildcard but in this case since it is moving to None, thought a wildcard include on the file with the same name is more appropriate.  '"
12533,456542353,b'![image](https://user-images.githubusercontent.com/3981619/87808401-7ec29480-c80e-11ea-9775-026a9d4e8730.png)\r\n'
12536,457728018,"b'yes, thanks! will fix. '"
13464,485917449,b'@jkotalik - Are there other IIS native dlls that I should filter?'
13464,486475975,"b""I thought about it but I wasn't sure if I would break somebody who relies on other metadata for these files. These seemed the least impactful. """
13464,486477341,"b'This is currently used in 3 different targets. So, I was trying to reduce duplication. And property seemed safer if someone wants to use this later in an item group for example. '"
14376,514525433,b'Include to be consistent?'
1782,160322163,b'Would be any plans to support F# for ResX code-generation?'
465,92600917,b'Excluded Templates.UnitTests.dll.'
465,92601081,b'fixed.'
465,92601216,b'Changes done. Thanks for code snippet.'
3533,314961733,b'Whoops! Fixed.'
10998,421112847,"b""I may be mistaken but I don't see a `WindowsDesktop` `.targets` file? I'm going to merge this in and if it should be placed into a different file I'd be happy to do so."""
12965,472377914,b'Looks good \xf0\x9f\x91\x8d'
1013,107252223,"b'Shoot, you are right. I was mixed up with the DefaultItems.props file.'"
10998,405730588,"b""Shouldn't this be placed in `WindowsDesktop` Sdk targets?"""
11213,412437987,"b'Those targets have that name pattern because the `Microsoft.*.targets` are public. This target is internal. So, an user-friendly name (that describes the intent) would be better, IMHO!'"
11213,412479884,"b'What I meant, is the `TargetFrameworkInference` targets is internal!'"
10998,421136353,b'The `Microsoft.NET.Sdk.WindowsDesktop` package in [WPF](/dotnet/wpf) repo.\r\n\r\nMoved to: dotnet/wpf#2976\r\nMake it optionally disable: #11606'
12030,439744943,"b'```suggestion\r\n    <LogOutputProperties Include=""TargetFramework""/>\r\n```'"
12763,465502491,"b'```suggestion\r\n            testProject.AdditionalProperties[""TargetPlatformIdentifier""] = ""Windows""; \r\n```\r\n\r\nI thought TPI/TFI should be in PascalCasing, no?'"
12106,465512591,"b'```suggestion\r\n  <Import Sdk=""Microsoft.NET.Sdk.WindowsDesktop""  Project=""../targets/Microsoft.NET.Sdk.WindowsDesktop.props"" Condition=""\'$(_MicrosoftWindowsDesktopSdkImported)\' != \'true\'""/>\r\n```\r\n\r\nI just ran into an issue where I need to test a patched Desktop SDK. This allows easier substitution of SDK via global json from a custom NuGet feed.\r\n\r\n@wli3 @dsplaisted Can I ask why this pattern wasn\'t used?'"
12106,466083217,b'@dsplaisted Can we do this then?'
12106,466964251,"b'Sure, but it does not allow substitute Sdks from a custom NuGet feed without patching the base SDK.'"
130,78049635,"b""I've just [added the support matrix for .NET Standard 2.0](https://github.com/dotnet/standard/pull/9). For Dev 15, we'd like to default to .NET Standard 2.0 as this has better support and much more APIs.\n\nRight now it doesn't look like UWP will be able to support .NET Standard 2.0, though.\n"""
130,78052578,"b""Sorry, I should have been clearer. I think we'd want to make it .NET Standard 1.4 as .NET Standard 2.0 is a strict superset of it. The APIs we added in 1.5. and 1.6 will not be added to .NET Standard 2.0 but to .NET Standard 2.1.\n"""
212,82305291,"b""Fluent interface is one thing; but we have too keep in mind that we also have immutable/persistent data structures. They don't blend well and make code hard to review. Personally, I've given up with fighting fluent interfaces but: I'd definately not approve APIs in the framework that are named `WithXxx` that aren't immutable withers.\n"""
633,96077112,"b""I assume that's the default? Why do we need the ability to error out?"""
12872,470293028,b'I would go with `SupportedPlatform`. `TargetPlatform` would sort of imply that the resulting binary gets annotated. This one is only for controlling the analyzer.\r\n\r\n@dsplaisted @jeffhandley @buyaa-n @mhutch '
13507,487128569,"b""Any reason we don't use `$(TargetPlatformVersion)` that we defined right above? Seems odd to duplicate the version number.\r\n\r\n```suggestion\r\n    <SupportedOSPlatform>$(TargetPlatformVersion)</SupportedOSPlatform>\r\n    <TargetPlatformMoniker>Windows,Version=$(TargetPlatformVersion)</TargetPlatformMoniker>\r\n    <TargetPlatformDisplayName>Windows $(TargetPlatformVersion)</TargetPlatformDisplayName>\r\n```"""
13507,487129815,b'Is that the right name? I thought [we agreed](https://github.com/dotnet/designs/pull/157) on `SupportedOSPlatformVersion`.\r\n\r\n/cc @dsplaisted '
1172,114490098,b'I will chat with the sdk team tomorrow to find out about what happens with the sdk on mono.'
1172,114864527,"b""@nguerrera \r\nI will want existing fsharp.sdk projects to work.  This is a way of detecting that it is an existing project using the existing FSharp.Sdk.  new projects should use the dotnet sdk and so won't set these variables.  Also the fsharp sdk can go on evolving and add a clearer signal, I would like that, however, existing projects still need to build.\r\n"""
1172,114865392,b'This file is the existing VS shim to the f# compiler.   The Microsoft.NET.Sdk.FSharp.props that ships with the SDK is the SDK shim that switches between dotnet cli deployed compiler and the desktop compiler dependent on which msbuild is running.'
1172,114865689,"b'This is to switch between the desktop version of the compiler or the coreclr version, depending on whether the coreclr version of msbuild is running or not.'"
1172,114865768,b'Yeah comment is wrong.'
1172,115323256,"b'The path needs to be different, because Microsoft.FSharp.targets does not ship with msbuild.\r\n\r\nmsbuild has always used:  $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp to find target files.\r\n\r\nThis PR:\r\nadds a target and a props file in the sdk\\build directory, that points msbuild to the correct location.\r\n\r\n\r\n'"
1172,115899974,b'thanks nick.'
2109,179021589,"b""Not ... $(UseBundledFSharpTargets) was to stop us from stomping all over Enrico's FSharp.Net.   I figured, this bug should also be fixed for FSharp.NetSdk projects.  And that we'd disabled it before was also a bug."""
13436,484736920,"b'Consider naming the variables the same for the examples showing just one being provided in different formats, and adding an example for the multiple variable specification. I would also convert the values to lowercase. And maybe use ""value;with;semicolon"", to not mix semicolon and spaces.\r\n\r\n```\r\n-e VARIABLE=abc\r\n-e VARIABLe=""value with spaces""\r\n-e VARIABLE=""value;with;semicolons""\r\n-e VAR1=abc -e VAR2=def -e VAR3=ghi\r\n```'"
13436,484752972,"b""Okay. Let's use that then. """
13619,489514746,"b""Seemed a bit weird to ask forwarding app to give us an env var. But it's probably better than having to maintain the same code in two places. Fixed."""
13815,494797249,"b""This is to allow setting env variable just for the target process in unified way. On linux you can already do it this way, but not on windows: \r\n\r\n```\r\nkey1=value1 key2=value2 dotnet test\r\n```\r\n\r\nSo we just take that syntax and use -e or --environment to do the same thing cross platform. Here is my reasoning about the UI https://github.com/microsoft/vstest/issues/669#issuecomment-578813697, and here is the reasoning behind the feature https://github.com/microsoft/vstest/issues/669#issuecomment-578773872. \r\n\r\nWe already use a similar syntax for inline settings where you can do `dotnet test -- option1=value1 parent.option2=value2` this get's translated to nodes in the runsettings.xml. """
13815,494799146,b'I would add comment describing how the values are supposed to get here.'
13815,494799753,"b'```suggestion\r\n            // Apply environment variables provided by the user via --environment (-e) parameter, if present\r\n```'"
13815,494800363,b'SetEnvironmentVariablesFromParameters maybe?'
13815,494804525,b'```suggestion\r\n        public void ItPassesEnvironmentVariablesFromCommandLineParametersWhenRunningViaCsproj()\r\n```'
13815,494804737,b'```suggestion\r\n        public void ItPassesEnvironmentVariablesFromCommandLineParametersWhenRunningViaDll()\r\n```'
11666,500140851,"b""That's a typo, should have been: Implies `--blame`\r\n\r\n--blame is the option that observes which tests are running but does not create any dumps."""
1843,160066660,"b""Let me know when you get in. I'd like to touch base on this. I think I get it, but want to check. """
1843,161075642,"b""If we are not currently running it, I'm fine dropping it. Is it just there by habit, because we had it in CLI (old style) tools?"""
1843,161093220,"b""Right, let's remove it. I started thinking about documenting it, and YUK. Undocumented but present features would seem a bad idea."""
2152,182553178,b'Looks good'
2152,182556646,"b""Yes, let's notify on pack if it will fail later when we can. \r\n\r\nI don't think I've seen a message on netstandard."""
2239,187768443,"b'Will, is it practical to search our error/warning messages for Apphost to see how we usually do it. I would like consistency on that. Apphost, AppHost, or application host all make sense to me, although app host not as much. \r\n\r\nSame with RID vs RuntimeIdentifier. Do you have thoughts on the best place to keep notes that will help us be consistent on stuff like this?\r\n\r\nA link to valid RIDs would be great here. '"
2286,199641621,"b""I'm fine with @dsplaisted 's suggested resolution here. """
461,91843180,"b'Will that still allow for a ""browse > add custom assembly"" experience? esp. since netstandard 2.0 will allow ""old"" e.g. net45 assemblies to be referenced.'"
450,94259431,"b""Shouldn't this be `1.0.3` now to qualify for support? https://github.com/dotnet/core/issues/391#issuecomment-268108521"""
450,94431524,"b'Naming question: How is ""default"" being different from ""implicit""? Currently, there is a concept of ""implicit"" framework references. But then there is a ""default"" version?\r\nMy intuition would suggest there is a version property and if not set, a default would be used. Here, only the ""default"" is used if I\'m not mistaken.\r\nI feel it would be clearer if the property is named `ImplicitNetCoreAppPackageVersion`. Or simply `NetCoreAppPackageVersion`. Does that make sense?'"
1007,106999434,"b'No, I was trying to figure out how much is actually needed to have a high probability of changing but not get too long and ugly. Since this is autogenerated and purely aesthetic (like short git commit hashes), i might was well use the full string.\r\nAny preference?'"
1007,107023741,"b'@rainersigwald thx, restructured the test completely.'"
1062,109209837,"b""The situation currently is: if you haven an app and library as `ProjectReference`, the documentation file of the library is published with the app, but not the app's own documentation.\r\nThat's the main reason why i chose it to be on by default."""
1062,109478654,"b""> think we want this new opt-out to disable that behavior for project refs too.\r\n\r\nI think so. I'm thinking about renaming it to `PublishDocumentationFiles` (plural) to:\r\n* Control adding `@(FinalDocFile)` to `@(ResolvedFileToPublish)`\r\n* Filter out xml files ~returned from the `ResolvePublishAssemblies` task (maybe add a task parameter although it doesn't really seem to fit in there).~ from project references\r\n\r\nThoughts?"""
1062,110220355,"b""Rule of thumb.. 4x3 arguments was more than 2x2.\r\nBut you're right, even other tests use InlineData more. I'll change it."""
1172,114478269,"b""What about running on Mono? On mono, the runtime type isn't core and and there aren't VS-specific targets."""
1173,114629437,"b""Didn't know about that beauty \xe2\x9c\xa8 """
1255,118514056,"b'The idea was that `CoreGenerateAssemblyInfo` can be overwritten in language-specific targets. Having ppl override and use a ""private"" target seemed a bit weird to me. And a `CoreGenerateAssemblyInfoDependsOn` property seemed a bit.. overblown..  - but would still be an option. Alternative would be to make the targets public. What do you think is better here?'"
1255,118538074,"b'Does the `DependsOnTargets=""A;B;C""` set the build dependency of ""b depends on a""? \r\n\r\nOption: Merge `_CreateGeneratedAssemblyInfoInputsCacheFile` and `_CalculateAssemblyAttributes` into `GetAssemblyAttributes `, add `DependsOnTargets=""GetAssemblyAttributes""` to `CoreGenerateAssemblyInfo `.\r\n\r\nThat would merge both concerns of emitting the items and writing the cache but leave nicely named public targets. @nguerrera your call'"
1255,118549306,"b'I\'m asking because a huge\r\n```xml\r\n<Target Name=""GenerateAssemblyInfo"" \xe2\x80\xa6 DependsOnTargets=""PrepareForBuild;GetAssemblyVersion;GetAssemblyAttributes;_CreateGeneratedAssemblyInfoInputsCacheFile;CoreGenerateAssemblyInfo"" \xe2\x80\xa6 />\r\n```\r\nworks as well and I wanted to make sure it doesn\'t do so by accident. But it somehow feels morally wrong.'"
1603,140975418,"b'Any reason not to use `2.0.1`? https://github.com/dotnet/standard/pull/492.\r\nWith out it, it will never be used on mono (no bundled version), but it only contains an UWP fix and an xbuild workaround. But https://github.com/dotnet/standard/pull/510 will be important for perf improvements.'"
1830,157914150,b'Could this property be just named `PackAsTool`? Would be more imperative/direct'
1830,157916308,b'maybe it could also skip the `CopyFilesToPublishDirectory` step by only depending on the targets required to compute the right files'
1843,160013900,"b'Is there only ever going to be one entry point? If this task took multiple inputs via items with metadata instead of the properties, one could extend the pack by smuggling in additional runnable assemblies and adding items..'"
1843,161075634,"b'I think I suggested `ResolvedFileToPublish` previously but having doubts now. It could by `PreserveNewest` with some modification already done in the publish output or users could have targets with `<Copy>` stuff in there. (or even post-built steps using xcopy execute).\r\nThe most ""correct"" but also slowest would be to do the same as the web sdk does for publishing - clean an intermediate directory and publish to it, then use a glob to harvest this clean publish. e.g. like https://github.com/dotnet/sdk/issues/1846#issuecomment-356726385'"
2533,218664280,b'Note that this will update all PackageReference items due to https://github.com/Microsoft/msbuild/issues/1618'
3079,272485819,"b'Why is this for core msbuild only?\r\nesp. if it needs to work with VS installer projects - and from within VS, there should also be tests for desktop framework msbuild..'"
212,82249344,"b""It should be the same case, but that depends on MSBuild returning the same absolute path casing as Path.GetFullPath. There is probably a scenario where they will not match up, but for case-sensitive file systems you would need it. \n\nNuGet should be using the library name all over instead since that is unique. I've opened a bug to track that work: https://github.com/NuGet/Home/issues/3611\n\nAs a workaround for now you could detect if the name has a forward or back slash and then continue this path lookup, otherwise it's just the library name.\n"""
608,95261499,"b""Should this only read ``package`` type libraries instead? It might be safer in the scenario where a new type shows up. Not sure on which better matches the current build task's approach, just wanted to point it out."""
608,95262214,b'Is this needed for the compile section also?'
1228,117320941,b'\xf0\x9f\x91\x8d '
1274,119434750,b'``GenerateRestoreProjectSpec`` is the per project outer build target that restore executes. As mentioned restore is only called once and that might be in the root project or in the solution metaproj depending on how the restore was done.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks/NuGet.targets#L423'
3673,327880270,"b""What about testing it's not there when it shouldn't be there? That's the bug being fixed."""
3673,327881086,"b""Right, what I'm saying is that I don't see any assert in the test for the parameters `[InlineData(false, false, false)]` since line 402 will be false."""
3673,328288917,"b""Cool, I wasn't so familiar with this assertion style."""
12897,470863992,"b""The above `invalid target framework 'unsupported'` is exactly what we're hitting at the moment in dotnet/aspnetcore and dotnet/aspnetcore-tooling with VS 16.8.0 preview 2.0 (Int Preview) installed. Will the `;Restore` addition here fix that\xe2\x9d\x94\r\n\r\n/fyi builds in the dotnet/aspnetcore repo primarily use `dotnet msbuild`. We hit this error there only when attempting to use desktop `msbuild` for `*.vcxproj` and `*.wixproj` projects. Errors go away when only the external preview version of VS (16.8.0 preview 1.0) is visible to the build."""
12897,470864387,"b'(Believe users of the ""master"" version of VS also see the above error.)'"
12897,470935922,"b""I haven't checked aspnetcore-tooling but aspnetcore does _not_ use `@(TargetFramework)` items with semicolons in them. We do have a mix of projects, some using `@(TargetFramework)` and those that are multi-targeted using `@(TargetFrameworks)`. In addition, the only projects given to desktop `msbuild` in the aspnetcore failure case are `*.proj` and `*.vcxproj` projects. So, if it isn't this bug that's breaking us, what is\xe2\x9d\x94\r\n\r\nMy error for the aspnetcore case with the Int Preview version of Visual Studio and .NET SDK version `5.0.100-rc.1.20379.10`:\r\n``` text\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(128,5): error : Invalid restore input. Invalid target framework 'unsupported'. Input files: C:\\Users\\dougbu\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\5.0.0-beta.20403.5\\tools\\Tools.proj. [C:\\Users\\dougbu\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\5.0.0-beta.20403.5\\tools\\Tools.proj]\r\n```\r\n\r\nThe Tools.proj project contains `<TargetFramework>net472</TargetFramework>` and doesn't use an SDK. Is not specifying an SDK no longer supported\xe2\x9d\x94\r\n\r\nIf this fix does address our problem (even if accidentally), will we need more of NuGet/Home#9911 to build successfully or just an update of our .NET SDK to a verioin with this fix in it\xe2\x9d\x94"""
3087,272778757,"b'You would need to reference it for both of the TFMs here (net472, netcoreapp2.0). The library is built-in on netcoreapp3.0. '"
3087,272778822,"b""I am curious, what's the reason for this change?"""
3087,272778840,"b""Comment doesn't match intent. Remove it?"""
3087,272778851,b'This is disposable. Add a using.'
3087,272779245,b'This needs to be disposed.'
3087,272779310,"b'How large is the map expected to be? 1_000 was just an arbitrary example in the sample, and primarily for async writes.\r\n\r\nIf you are flushing the the stream synchronously anyway, I would remove this threshold all together (and flush after you have written everything) or make it much larger.\r\n\r\nIf you expect to go beyond 1 MB when writing JSON here (and definitely if you go beyond 2 GB), then keep the sync threshold but make it larger.'"
3087,272779881,"b'I believe there is bug in the sample which will cause issues here.\r\n\r\nAfter flushing, you need to reset the json writer local by re-instantiating it.\r\n\r\nIf you are keeping this `SyncWriteThreshold` pattern here (which in general should not be needed), change it to the following:\r\n\r\n```C#\r\n\r\n            foreach (KeyValuePair<string, ClsidEntry> clsid in map)\r\n            {\r\n                json.WriteStartObject(clsid.Key);\r\n\r\n                json.WriteString(""assembly"", clsid.Value.Assembly);\r\n                json.WriteString(""type"", clsid.Value.Type);\r\n\r\n                json.WriteEndObject();\r\n\r\n                if (json.BytesWritten > SyncWriteThreshold)\r\n                {\r\n                    json.Flush(isFinalBlock: false);\r\n                    buffer.CopyTo(clsidMapFile);\r\n                    json = new Utf8JsonWriter(buffer, json.GetCurrentState());\r\n                }\r\n            }\r\n```\r\n\r\nI\'ll fix the sample docs and call out that this pattern is mainly useful for async writes, not synchronous ones. Thanks!'"
3087,272780267,"b'Btw, based on your porting effort, feedback/contribution to the porting guide would be most welcome so it can be improved :)\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Text.Json/porting_guide/README.md'"
3087,272780814,"b""> I think we can move to 3.0.\r\n\r\nThe decision to port is up to you, but for clarity, if this moves to 3.0 and the built-in library is being used, then there won't be extra copy-local assemblies like System.Memory."""
3087,273327382,"b""The 1 MB guidelines is an implementation detail of using ArrayBufferWriter which is backed by the array pool. You can definitely continue to write up to 2 GB (and beyond until OOM), but beyond 1 MB, the array pool starts to allocate. That's why I suggested, that IF you were to set a sync threshold, 1 MB is reasonable. You don't have to, though, especially if allocations aren't a concern (writing to a growable stream without a sync threshold, for instance memory stream, has the same concern).\r\n\r\nFor performance oriented scenarios, we wanted to provide this fine grain control.\r\n"""
3087,273329832,"b""That's reasonable feedback. Much appreciated. We made a deliberate trade-off between usability and performance. Writing to a (file)stream is definitely a common scenario, and if I can make it easier without having the lowest layer of the JSON stack (i.e. JsonWriter) regress in performance, then I would. However, since our primary focus was not high usability, but rather an emphasis on performance, the design required synchronous buffered writes (to an IBufferWriter) with periodic streamed-writes to be done by the caller (which I don't think we can change at this layer). FWIW, the serializer layer, built on top of the writer, let's you write to a stream.\r\n\r\nhttps://github.com/dotnet/corefx/tree/master/src/System.Text.Json/roadmap#design-requirements"""
3087,273334841,"b""We could certainly consider adding such a type in the future. Though, it would likely contain much of the same API surface as the lowest layer (overloads like WriteString, WriteNumber, etc.), but those would just end up writing directly to the stream rather than an internal buffer. The caller of the writer is actively calling the write methods today, so I don't necessarily see periodically flushing to a stream (by tracking the `BytesWritten` property) as such a significant pain-point, to justify the feature at the moment, tbh. But, I am open to the feedback, and will consider it. Thanks."""
3087,273686112,"b""> Maybe what I really want are the higher level things like serialization or DOM and not a stream binding for forward-only writing. It's surprising that this doesn't exist\r\n\r\nI am not sure, I follow. It does exist, with plans to build up the feature capabilities:\r\n[JsonSerializer](https://github.com/dotnet/corefx/blob/6c027aebb8fd1c643401bf801083cff5e6d34853/src/System.Text.Json/ref/System.Text.Json.cs#L313-L327)\r\n[JsonDocument](https://github.com/dotnet/corefx/blob/6c027aebb8fd1c643401bf801083cff5e6d34853/src/System.Text.Json/ref/System.Text.Json.cs#L16-L29)"""
3087,273693875,"b'> Are there plans to be able to build one up programatically and save like XDocument?\r\n\r\nNot for 3.0, but something we are considering adding in the future based on feedback/user scenarios like yours.'"
3087,276861873,"b'FWIW, your concerns and feedback have been heard and hopefully addressed with the recent `Utf8JsonWriter` changes! We ended up making some trade-off between perf and usability to enable the scenarios you mentioned, @nguerrera :)\r\n\r\nhttps://gist.github.com/ahsonkhan/f6f30656717548212693e5eaa49cece5\r\nhttps://github.com/dotnet/corefx/pull/36961\r\n\r\nPresumably, we should re-visit this PR given the new changes!'"
2545,219339059,b'It is dangerous to throw exceptions out of C callback. The C callback should always catch the exceptions and return the error via lParam.'
2700,236931379,b'Catching the exception is certainly easier / less code - if the noise is acceptable.'
2814,259093474,"b'You just match the type name, and ignore the assembly name. If somebody defines their own `System.ValueType` or `System.Enum`, a lot of things will not work.'"
3064,270630471,b'I am not sure whether it makes sense to have `QuickJitForLoops` exposed in SDK first class. I look at it as one of those config switches for experts only.'
4019,359646686,b'```suggestion\r\n    Due to https://github.com/dotnet/sdk/issues/4012 we decided to disable UseAppHost to be the default on mac\r\n```'
12519,455928157,b'Add handling of macOS `.dylib`s while you are on it?'
14432,517873080,b'I guess this is meant to be conditioned on `StartupHookSupport`'
1338,121576803,"b""The 'if' should not be necessary, although keeping it will prevent the (unnecessary) file copy for Windows."""
1338,121719776,"b""OK I will remove the 'if', and log a future issue for the performance aspect so we only change the marker and not the whole file. The apphost file is ~77K so fairly small, but still we should do the right thing here."""
2118,180256022,b'Have you measured the overhead?'
2118,180256569,b'Did you try mocking the metadata (to see if it will pass when the metadata is available)?'
2462,208975672,"b""How is the reference to DotNetAppHost different between self-contained and framework-dependent apphost w.r.t. using the latest version? Why wouldn't we want the same semantics?"""
2462,210072809,"b'> do we have an answer for whether or not the NetCore.DotNetAppHost package will always share a version number with NetCore.App package?\r\n\r\nptal @weshaggard @leecow\r\n\r\nIt looks like the current scripts assume the same and map to ""ProductVersion""\r\n\r\nMicrosoft.NETCore.DotNetAppHost: https://github.com/dotnet/core-setup/blob/c54c12905b41cd5257794a2e06f7c9b5a1dc5fe4/src/pkg/projects/Microsoft.NETCore.DotNetHostResolver/Microsoft.NETCore.DotNetHostResolver.pkgproj#L11\r\n```\r\n<Version>$(AppHostVersion)</Version>\r\n```\r\n\r\nhttps://github.com/dotnet/core-setup/blob/6a89975a97472a52725b343bc17bb6bef7845d16/dir.props#L95\r\n```\r\n<UseShippedAppHostPackage>false</UseShippedAppHostPackage>\r\n<AppHostVersion Condition=""\'$(UseShippedAppHostPackage)\' != \'true\'"">$(ProductVersion)\r\n```\r\n\r\nMicrosoft.NETCore.App:https://github.com/dotnet/core-setup/blob/002fc811fbe09c23f525fb66b7f7156b164f2acb/src/pkg/projects/Microsoft.NETCore.App/Microsoft.NETCore.App.pkgproj#L8\r\n```\r\n<Version>$(SharedFrameworkNugetVersion)</Version>\r\n```\r\n\r\nhttps://github.com/dotnet/core-setup/blob/6a89975a97472a52725b343bc17bb6bef7845d16/dir.props#L78\r\n```\r\n<SharedFrameworkNugetVersion>$(ProductVersion)</SharedFrameworkNugetVersion>\r\n```\r\n'"
1379,125361515,"b""This comment's diff is strange, it should not show, it was there """
1379,125361544,"b'same here, I just did an extra method'"
1390,126559042,b'@livarcocc @nguerrera here is the 2 string version. the naming should be obvious enough'
1420,127803472,"b'This file should not reference ConflictResolution, I should move FileUtilities.GetFileVersion to a ""higher"" name space right?'"
1420,127803545,b'Right API to get FileVersion?'
1420,127803597,b'And TryGetAssemblyVersion?'
1420,127803700,b'Should I get the full path of the main dll here and pass the full dll path to the task?'
1420,127804276,"b""Should the condition to be '$(GenerateAssemblyVersionAttribute)' == 'false'?"""
1420,127804431,b'This is the non-loading API to get assembly name right?'
1420,127830072,b'Always copy from the main assembly no matter what'
1423,128084326,b'fixed -- Renamed to GivenThatWeWantSatelliteAssembliesHaveAssemblyVersion'
1423,128084374,b'fixed with [CoreMSBuildOnlyFact]'
1423,128345132,"b'Fixed, changed to assemblyVersion'"
1423,128345239,"b'Fixed, moved all these logic to csharp code in task'"
1423,128345326,"b'_CoreGenerateSatelliteAssembliesTemplateFile is removed, the parameter is called _PathToTemplateFile_'"
1423,128345582,b'all fixed'
1440,128846046,b'nit: space'
1440,128846258,b'nit: architecture'
1052,134563375,"b'@eerhardt I am working on removing these no asset libraries. However, I am not sure if I should trim these libraries solely on no assets. If there is **no assets** but these is **dependencies**, should I trim it as well?\r\n\r\nI am afraid of if there is a ""dependencies"" that has a asset, removing the parent node will remove the assets that is actually used.\r\n\r\nCould you give me pointer to the code to find out? If pull in assetB or not is decided before the code above, I can safely remove library A\r\n\r\n![image](https://user-images.githubusercontent.com/6993335/29580659-9ee3d020-872b-11e7-97c6-6f8d38462273.png)\r\n\r\n'"
1591,139506143,"b'need to consider the problem of flags, EnableDefaultEmbeddedResourceItems and EnableDefaultCompileItems'"
1591,139506486,b'Get file without extension and change extension can replace .Designer.cs'
1591,139571776,"b""yes, i haven't address that issue"""
1591,139575052,"b'@sharwell good point. And I just talked to Daniel, that sounds like a hard problem. I will set up a meeting for it'"
1830,157882676,b'This need to be evaluated before NuGet targets. Use props is appropriate?'
1830,157883262,"b'I skip _IsPackedAsTool_ at target level because this property is set in csproj, and SDK prop _TargetsForTfmSpecificContentInPackage_ will get evaluated before reading csproj'"
1830,157884536,b'This is an internal NuGet value. I will try to add it to _None_ first. The goal is to make this file shows up in nupkg implicitly'
1830,157885396,"b'I know we used to assert on intermediate nuspec. However, in my case, a lot of the production logic can be done by nuspec as well. So I feels this is circular and not reliable. So I choose to use ""real"" nupkg and a package from NuGet to assert the content'"
1830,157914427,"b'oops, ya exactly pack as tool'"
1830,157914767,b'fixed'
1830,157914865,"b'I skip _PackAsTool_ at target level because this property is set in csproj, and SDK prop _TargetsForTfmSpecificContentInPackage_ will get evaluated before reading csproj'"
1830,157915997,"b'I cannot find a complete itemgroup of all the files. Runtimeconfig is added at the end after resolving the files. Do you think I should use the list and append runtimeconfig to it? Sounds flaky tho, what if there is a more files like runtimeconfig'"
1843,160003434,"b""HELP NEEDED: I don't want to put logic here. But these 2 need to be evaluated after user's csproj and before NuGet pack. """
1843,160003487,b'There is a package version conflict. So I need to pin the version'
1843,160003571,"b""This is a must have. But we are pending NuGet's change. I am not sure I should check in before this is done. That is the reason I put WIP in the title"""
1843,160059494,"b'@KathleenDollard this part need your review. The experience is, use property `PackAsTool` to mark, and then user run dotnet pack to create a tool.\r\n\r\nThe entry point and command name will use MSBuild well known property `TargetFileName` as default (The file name of the primary output file for the build https://msdn.microsoft.com/en-us/library/c02as0cs.aspx)\r\n\r\nThe user can override it by adding explicit property `ToolCommandName` `ToolEntryPoint`'"
1843,160059960,"b'It is still in design. As of today in master, the setting format allow multiple entry point. However, CLI is blocking more than one entry point, due to time, no clear use case and no design on conflict (Package 1 has tool A,B,**C** and Package 2 has tool **C**, D, E).\r\n\r\nI am still focus on the basic scenario. And for pack, because I am defaulting to `TargetFileName` which is only one, it is easier for the producer to understand ""override the default"" than ""you can have multiple, and also you can keep the default and adding more or remove the default and adding more"". The interface will also need to be more complex. '"
1843,160280750,b'find a way to solve that'
1843,160280898,b'Is that a good way to remove package reference in nuspec?'
1843,160875990,"b'> Does this cover all the files that are published?\r\n\r\nYes\r\n\r\n> Are the two properties you are including not included in ResolvedFileToPublish? \r\n\r\nThese 2 file are created for publish\r\n\r\n> Are there other files that need to be included?\r\n\r\nNo, I checked the result with glob vs using ResolvedFileToPublish'"
1843,161027943,b'Add Nuget package name override here'
1843,161037860,b'working on it. I will default to this version in packtool.target and I will make a check in to CLI later'
1843,161038221,"b""I logged an issue on CLI so I won't forget"""
1843,161081700,"b'""Runner""? In master today, there is only dotnet available as running on consumer side. And I don\'t think we need user to override it. Either pack won\'t support at all, or we can derive it from portable(dotnet) vs self-contain(just run ./tool.exe)'"
1843,161093912,b'@KathleenDollard just to make it clear. We should not add a parameter to Pack to config runner. However we should keep runner in the settings.xml. right?'
1843,161148305,b'Fixed. added the default version. And I will add PR to cli later'
1843,161148447,"b'Fixed, use XDocument'"
1843,161148457,b'Fixed'
1843,161148498,"b'fixed, changed to per tfm/rid and added to TfmSpecificPackageFile'"
1843,161148749,b'Let me log an issue to further discuss this. https://github.com/dotnet/sdk/issues/1853'
1843,161148786,b'Fixed as what we discuss on live share'
1843,161148935,b'And I actually find a bug of subfolder. I changed here https://github.com/dotnet/sdk/pull/1843/files#diff-c9ebf740daee06e626e6636288feb1d1R42 to preserve folder structure like tools/netcoreapp2.0/any/runtime/stuff'
1843,161148950,b'Fixed'
1843,161149018,"b'Fixed, use testroot, which is from TestAssetManager.GetTestDestinationDirectoryPath'"
1843,161149043,"b'Fixed, use XDocument'"
1843,161149049,b'Fixed'
1902,164013702,b'We had discussion on loc with tests. It is bad we assert string.format with string.format but it is too hard to run these tests on the loc CI (CI machine in different language).  cc @nguerrera '
1902,164029727,b'The problem is this test will fail on a CI that has a different language enabled if we keep it that way. Maybe an attribute of skip on localization build is also fine.'
1928,165770429,"b'Change to if NETCorePlatformsImplicitPackageVersion not set, copy BundledNETCorePlatformsVersion, if still not set, then 2.0.1\r\n'"
1928,165771668,b'changed'
2007,171422588,"b'you are right, it should be moved. Several back and forth cause it left there'"
2007,171444917,b'fixed'
2007,171444923,b'fixed'
2007,171444928,b'fixed'
2007,171444977,b'fixed'
2007,171445120,"b'I talked to Mihai, the difference is on Windows it is faster and on unix it can replace \\ to /. So NormalizePath it is the way to go. Changed accordingly '"
2007,171448198,b'https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/IntrinsicFunctions.cs#L411\r\n\r\nyou are right. Let me just use NormalizeDirectory '
2022,172305250,b'Renamed as the second one'
2074,176279069,b'will do'
2140,181246126,"b'@nguerrera Only add an extra condition is added based on the ""WIP"" and let PackTool depends on both of them. But only one of them will be run according to the flag at that time'"
2140,181247012,"b'Ah... you are right. I still need a target to ""re direct""'"
2140,181250217,"b'`_PublishBuildAlternative _PublishNoBuildAlternative` ?? So people look at the following line will know only one of them will be run. And by appending `alternative`, it looks pretty internal\r\n\r\n```xml\r\n<Target Name=""Publish""\r\n   Condition=""$(IsPublishable) == \'true\'""\r\n  DependsOnTargets=""$(_PublishBuildAlternative);$(_PublishNoBuildAlternative)"" \r\n```\r\n'"
2140,181525912,b'fixed'
2140,181525924,b'fixed'
2152,182316487,b'Pending string review'
2152,182316620,"b'Should I access _TargetFrameworkVersionWithoutV or calculate it again. It is created by SDK, but it is a previous process.\r\n\r\nhard code 2.1 is fine? it **is** a hard number'"
2152,182316670,"b""I don't know a better way to walk around it"""
2152,182316763,b'And I will explicit block full framework and netstarnard. They should not work in the beginning'
2152,182530078,"b'@KathleenDollard for this 2 strings\r\n""DotnetTool only supports .NET Core.""\r\n""DotnetTool does not support target framework lower than netcoreapp2.1.""'"
2152,182532894,b'I cannot find a better way to walk around attribute need to be static'
2152,182533124,b'I am blocking full framework. It should not work in the beginning'
2152,182554826,b'@KathleenDollard I am blocking full framework and netstandard at the same time.'
2152,182558249,"b'No, but for netstandard it is pretty much impossible to create one. There is no entry point for the program at all. It will fail later down the road, but in this case it can fail more explicitly with better error message.'"
2152,182634466,"b'Global tools feature officially is called DotnetTool, since it is the nuget package type. And Rob once asked in mail for official name, that is the one. However, it does not stick that well'"
2152,182635170,"b""I edit by double click in VS. I don't know where they come from. But let me revert it"""
2152,182635977,b'will windows always has full framework? my understanding is fullmsbuild will have fullframework. And windows can have only dotnet core like nano'
2152,182636522,"b'@nguerrera as we discussed. use msbuild compare may cause problem on 2.11 vs 2.2. This looks ugly but it works. @rainersigwald is it supported? I cannot find a direct document about it.\r\n\r\nAlso $([System.Version]::Parse(""2.1"")) seems keep the type. If I just replace it with string 2.1 it will error and ask for Version type.\r\n\r\nThe alternative is to write a Task. It is a lot of code and also it might not be cleaner than that.'"
2152,182636582,b'Changed as suggested'
2152,182846532,b'Reverted to the original'
2152,182846801,b'workaround removed'
2196,185314361,b'Fixed'
2196,185314404,b'Created a project as suggested'
2230,187224341,"b'too much effort to pass in ""apphost"" ?'"
2234,187669953,"b""I don't like Util as well but I need to change something to avoid name conflict with the task. AppHost.Create sounds good."""
2234,187690911,b'changed to const'
2234,187690956,b'marked Readonly'
2234,187690987,b'Done'
2239,187747078,b'@mairaw could you help us review this error message while @KathleenDollard is in Europe?\r\n\r\nThis is the error message shown when (most likely) users used a wrong runtime identifier like win-x63. Or it is a rid that is not supported'
2239,188069844,"b""format change...  sorry about that. However that's not too much and this happens several times."""
2239,188104019,"b'@mairaw  @KathleenDollard \r\n\r\n> Apphost\r\n\r\naccording to https://docs.microsoft.com/en-us/dotnet/core/, it should be ""app host"". As in `The \'dotnet\' app host, which is used to launch .NET Core apps. It selects the runtime and hosts the runtime, provides an assembly loading policy and launches the app. The same host is also used to launch SDK tools in much the same way.`\r\n\r\n> should we add a fwlink to the RID topic for more info?  \r\n\r\ncreated https://aka.ms/rid-catalog\r\n\r\n\r\n> is it practical to search our error/warning messages for Apphost to see how we usually do it. I would like consistency on that. Apphost, AppHost, or application host all make sense to me, although app host not as much.\r\n\r\nshould be ""app host"". That doc is kind of a ""front page"" of dotnet core\r\n\r\n> Same with RID vs RuntimeIdentifier. Do you have thoughts on the best place to keep notes that will help us be consistent on stuff like this?\r\n\r\n""runtime identifier (RID)"" should be the standard. As in docs.microsoft.com\r\n\r\n# so what about that\r\n\r\n`Cannot find app host for {0}. {0} could be an invalid runtime identifier (RID). For more information about RID https://aka.ms/rid-catalog.`'"
2239,188369612,b'@mairaw  @KathleenDollard ?'
2239,188418078,"b'Thanks, I prefer your version. And I added you to the aka.ms link'"
2239,188424761,b'Correct. I had a bug during my test. So I have to enforce recreate all the time. I will add `bool overwriteExisting` param to AppHost.Create'
2239,188425941,b'It need to be set early enough before nuget is loaded. Only when PackAsTool=true aka use dotnet pack to create global tools this is useful. Also I want to add error when PackAsTool!=true and PackageToolShimRuntimeIdentifiers is set. According to what I talked to Kathleen'
2239,188428629,"b""PackagedShimOutputDirectory currently set to temporary folder under BaseIntermediateOutputPath. The producer (code gen in this case) need to unpack, sign and repack.\r\n\r\nTheir ask is to generate shim during publish instead of pack. We have not promised any further feature yet. \r\n\r\nI maybe able to just move this task execution from pack to publish. However, there are some package context needed like packageid, packageversion which is used in part of the embedded path. Maybe that's fine due to they are properties. But we do need some design on that interface. #Resolved"""
2239,188471745,b'created [https://github.com/dotnet/cli/issues/9288](https://github.com/dotnet/cli/issues/9288)\r\n\r\n---\r\nIn reply to: [188433576](https://github.com/dotnet/sdk/pull/2239#discussion_r188433576) [](ancestors = 188433576)'
2239,188476910,"b""This is the embedded string. If we use Path.Combine, the embedded file will be different according to which machine builds it. \\ build on win, / build on Linux. Although technically apphost is fine with that.\r\n\r\nI will add comments and move it away from other Path.Combine\r\n\r\n// This is the embedded string. We should normalize it on forward slash, so the result apphost won't be different according to\r\n// build machine."""
2239,188477402,"b'Will this look better?\r\n\r\n```c#\r\n\r\n                // This is the embedded string. We should normalize it on forward slash, so the file won\'t be different according to\r\n                // build machine.\r\n                var appBinaryFilePath = string.Join(""/"",\r\n                    new[] {\r\n                        "".store"",\r\n                        PackageId.ToLowerInvariant(),\r\n                        PackageVersion,\r\n                        PackageId.ToLowerInvariant(),\r\n                        PackageVersion,\r\n                        ""tools"",\r\n                        targetFramework.GetShortFolderName(),\r\n                        ""any"",\r\n                        ToolEntryPoint});\r\n```'"
2239,188480326,"b'This change it is to get a clean string ""apphost"" and it is only in one place.  The problem I cannot use ""_DotNetAppHostExecutableName"" is even on Windows, GenerateShims can create Linux/mac apphost. But at that point, it is apphost.exe passed in.'"
2239,188484628,"b'Fixed, changed to discussed'"
2239,188484673,"b'Fixed, changed to ShimRuntimeIdentifiers'"
2239,188484770,"b'Fixed, removed all these and just call nugetpackageresolver'"
2239,188484794,b'fixed'
2239,188484809,b'fixed'
2239,188484838,b'fixed moved to AddTestEnvironmentVariables'
2239,188484999,b'Note I did not move this logic due to the reason above. It is out of date due to rename change'
2239,188485009,b'fixed'
2239,188485021,b'fixed'
2239,188485048,b'changed as above'
2239,188485071,"b'fixed, changed as suggested'"
2239,188727515,"b'You mean like that?\r\n```xml\r\n  <!-- Import targets from NuGet.Build.Tasks.Pack package/Sdk -->\r\n  <PropertyGroup Condition=""\'$(NuGetBuildTasksPackTargets)\' == \'\' AND \'$(ImportNuGetBuildTasksPackTargetsFromSdk)\' != \'false\'"">\r\n    <NuGetBuildTasksPackTargets Condition=""\'$(IsCrossTargetingBuild)\' == \'true\'"">$(MSBuildThisFileDirectory)..\\..\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets</NuGetBuildTasksPackTargets>\r\n    <NuGetBuildTasksPackTargets Condition=""\'$(IsCrossTargetingBuild)\' != \'true\'"">$(MSBuildThisFileDirectory)..\\..\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets</NuGetBuildTasksPackTargets>\r\n    <ImportNuGetBuildTasksPackTargetsFromSdk>true</ImportNuGetBuildTasksPackTargetsFromSdk>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <IncludeBuildOutput Condition="" \'$(PackAsTool)\' == \'true\' "">false</IncludeBuildOutput>\r\n    <PackageType Condition="" \'$(PackAsTool)\' == \'true\' "">DotnetTool</PackageType>\r\n    <RuntimeIdentifiers Condition="" \'$(PackAsTool)\' == \'true\' "">$(RuntimeIdentifiers);$(PackAsToolShimRuntimeIdentifiers)</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n\r\n  ```'"
2239,188729709,"b'I read this condition as""if there is no override pack target use Pack target from nuget\'s pack"", which is most of the case. PackAsTool rely on nuget\'s Pack target, so it needs to be set only when use nuget\'s pack version. \r\n\r\nHowever, if we think `TfmSpecificPackageFile` is a public interface that custom pack target should implement, We can remove the condition on ImportNuGetBuildTasksPackTargetsFromSdk'"
2239,188788423,"b'Exactly as what you said. If I move these props to toolpack, it will fail on muti targeting. Microsoft.NET.Sdk.Common.targets is imported by both. So it is the right place.'"
2239,188788586,b'@nguerrera so I moved them here'
2293,191947502,"b'I am not sure about this line of `FileMode.Open`. However, according to the doc. It has to be Open. https://msdn.microsoft.com/en-us/library/dd987972(v=vs.110).aspx'"
2298,192269636,b'@nguerrera @dsplaisted I added this line to have a default value when CLI is not setting LatestPatchVersionForNetCore2_1'
2298,192269707,b'@nguerrera @dsplaisted These 2 test should be good to have. But it will only break when stage0 has 2.1.1'
2298,192443999,b'Actually should we set this to 2.1.1 or we should add this prop in CLI right away? And set it to 2.1.1'
2298,192444182,"b'My understanding is, the next prodcon build of CLI release/2.1.3xx will have 2.1.1 runtime right?'"
2298,192471525,b'Fixed'
2298,192471564,b'Fixed'
2293,192538733,"b'It does make a difference. \r\n\r\nBefore this change the search (all in memory) need 9461\r\nAfter the change with accessor.ReadByte need 86683\r\nAfter use unsafe code, it need 12061'"
2293,192538834,"b'I am not very familiar with unsafe in c#, please review with caution '"
2293,192541878,"b'in ms. Yes. The old code will load all in memory. Since we need to search for a pattern, that is the most fast way(one round of read is needed anyway). However, the memory consumption is very high, 100kb, in this case since we need to load the whole app host.'"
2293,192545182,b'reference to this comment  https://github.com/dotnet/sdk/pull/2293#discussion_r191953439 this code has to run on NET46'
2293,192545252,"b""there is not try-catch why `finally`? And this method is very procedure (due to perf), `finally` won't have any extra meaning"""
2293,192935680,"b'Fixed, changed to try and finally'"
2293,192935744,"b'C# is nice.\r\n\r\nFixed, change to bytes[m + i]'"
2293,192935782,"b'Fixed, used CreateFromFile(string) '"
2293,192935895,b'And added null check before ReleasePointer'
2293,192936025,b'fixed'
2293,192936047,"b'fixed, changed to null '"
2293,193241652,"b'Sorry, this should be right https://github.com/dotnet/sdk/pull/2293/files#diff-b3b03fee742dfb740c837b74d3d814bbR145'"
2293,193242100,b'The diff might be harder to see. Is this good? I moved pointer acquiring and releasing to the caller method. Only one try-finally is used \r\n\r\nhttps://github.com/dotnet/sdk/pull/2293/commits/a1a4f04791aef72abd76b1a1b4eaa26e1ca17ff2'
2293,193242123,b'Changed to bytes'
2293,193501055,"b'Sorry, this should be good now. Edit according to your code'"
2293,193507890,b'fixed'
2330,195254777,"b'I see, although description is not unique. I will use `framework + libraryNetstandard + isSdk.ToString() + description`'"
2330,195259217,"b'Agree, changed to it'"
2330,195259260,b'fixed'
2330,195259272,b'fixed'
2330,195259347,"b'fixed, changed to just explicitly pass the description.'"
2352,197295918,b'@dsplaisted  similar to https://github.com/dotnet/cli/pull/9507 need to scope the feed'
2352,197296110,b'@dsplaisted Since --fx-version will for the use the exact version. RuntimeFrameworkVersion property is 2.1 but what on the disk is 2.1.1. The similar reason why the test above it is disabled.'
2352,197307903,b'That works \xf0\x9f\x91\x8d '
2366,198279071,"b'These code is copied out of GenerateShim, However, there is only around 10 lines are duplicated. And there is no critical code that will need to keep in sync. If we want to share these code, the overhead will be more than 10 lines.'"
2366,198280373,"b'@nguerrera do you think use `AfterTargets=""Build""` should be the trigger for generating shim during build? I don\'t think there is a way to make build depends on this task'"
2366,198280567,b'@nguerrera and just change IntermediateOutputPath to OutDir (/obj to /bin)is good enough as we discussed right '
2366,198595058,"b'It is a simply task, but I find the most reliable way is to copy paste from corefx. Any suggestions?\r\nSee dotnet/corefx#4208'"
2365,198647615,b'Fixed'
2369,198922346,"b""@livarcocc we only detect 'true' (everything else is false). This should be enough. Do you think the flag name is good? Or we should make it longer but exact?\r\n\r\n`DisableImplicitNetcoreappMajorVersion1NuGetFallbackFolder`"""
2369,198922668,b'@livarcocc should be sufficient? There is one test right above it with the same input'
2366,198931106,b'yes. I will edit. If you are available could you review the full PR? I can give you more context.'
2369,198981639,"b'well, it is failing '"
2413,203535068,"b'These code is copied out of GenerateShim, However, there is only around 10 lines are duplicated. And there is no critical code that will need to keep in sync. If we want to share these code, the overhead will be more than 10 lines.'"
2413,203535336,"b'Using AfterTargets is a good way to integrate into build? I need to be before `IncrementalClean`, so the file can be ""registered""'"
2413,203535682,"b'It is a simply task, but I find the most reliable way is to copy paste from corefx. Any suggestions?\r\nSee dotnet/corefx#4208'"
2413,203542611,"b'@rainersigwald thanks, although the task itself depends on `ResolveReferences`. Should I just dependson =`ResolveReferences`. and `BeforeTargets=""IncrementalClean""`. But I think use dependson with before/after target is kind of strange.'"
2413,203547681,"b'I see, I read the comment. It makes sense. Now the problem is, how to set the timing(before or after what?) I think `BeforeTargets=""CopyFilesToOutputDirectory""` is reasonable.\r\n\r\nChanged to the following, I will push later, I don\'t want to hide the thread.\r\n\r\n```xml\r\n  <Target Name=""GenerateShimsAssets""\r\n          BeforeTargets=""CopyFilesToOutputDirectory""\r\n          DependsOnTargets=""ResolveReferences""\r\n          Condition=""\'$(PackAsTool)\' == \'true\'"" >\r\n\r\n    <ItemGroup>\r\n      <_PackAsToolShimRuntimeIdentifiers Include=""$(PackAsToolShimRuntimeIdentifiers)""/>\r\n    </ItemGroup>\r\n\r\n    <PropertyGroup>\r\n      <PackagedShimOutputRootDirectory Condition="" \'$(PackagedShimOutputRootDirectory)\' == \'\' "">$(OutDir)</PackagedShimOutputRootDirectory>\r\n    </PropertyGroup>\r\n\r\n    <GenerateShims\r\n      DotNetAppHostExecutableNameWithoutExtension=""$(_DotNetAppHostExecutableNameWithoutExtension)""\r\n      PackagedShimOutputDirectory=""$(PackagedShimOutputRootDirectory)/shims/$(TargetFramework)""\r\n      PackageId=""$(PackageId)""\r\n      PackageVersion=""$(Version)""\r\n      ProjectAssetsFile=""$(ProjectAssetsFile)""\r\n      ProjectPath=""$(MSBuildProjectFullPath)""\r\n      ShimRuntimeIdentifiers=""@(_PackAsToolShimRuntimeIdentifiers)""\r\n      TargetFrameworkMoniker=""$(NuGetTargetMoniker)""\r\n      ToolCommandName=""$(ToolCommandName)""\r\n      ToolEntryPoint=""$(ToolEntryPoint)""\r\n      >\r\n\r\n      <Output TaskParameter=""EmbeddedApphostPaths"" ItemName=""_EmbeddedApphostPaths"" />\r\n    </GenerateShims>\r\n\r\n    <ItemGroup>\r\n      <!-- Do this in an ItemGroup instead of as an output parameter so that it still gets added to the item set\r\n           during incremental builds when the task is skipped -->\r\n      <FileWrites Include=""@(_EmbeddedApphostPaths)""/>\r\n    </ItemGroup>\r\n  </Target>\r\n```'"
2447,206693058,"b'Use this map is good enough? Also, `net30` is not a tfm in dotnet core. So, this is not a valid tfm'"
2447,206693160,"b'If it is not a valid TFM, no `supportedRuntime` is generated'"
2447,206693655,"b'This override I am not sure. `PrepareForBuild` will find and put `AppConfigWithTargetPath`. And `GenerateBindingRedirects` will read AppConfigWithTargetPath, and add binding redirect on top of it.\r\n\r\nAnd this task will point AppConfigWithTargetPath to its intermediate result. So GenerateBindingRedirects will use the generated file.'"
2413,207058708,"b'Touch uses the same corefx api that is having the [bug](https://github.com/dotnet/corefx/issues/31379). Once it is fixed, we can remove all this.\r\nhttps://github.com/Microsoft/msbuild/blob/4972ebc6d2b81c5e967cd3260943a95c8e5eb4be/src/Tasks/Touch.cs#L133'"
2413,207060567,"b'Added comment. And yes, from the test for incremental build. The last write time is not set at all without this line.'"
2413,207060694,"b""Plus the comment below. It has problem with GetEmbeddedApphostPaths(a computer only, get where to look for these files). In this we don't require template apphost path. I think it is over kill to depend on template apphost path just to get the extension.\r\n\r\nI renamed it to ForRuntimeIdentifier"""
2413,207060836,b'fixed\r\n\r\n[insensitive](https://github.com/dotnet/cli/pull/8997#pullrequestreview-109813807 ). I added OrdinalIgnoreCase '
2413,207060915,"b'fixed, changed to use helper.'"
2413,207060929,b'Removed'
2413,207060941,b'fixed'
2413,207060991,"b'fixed, renamed to ForwardSeparatorChar and BackwardSeparatorChar'"
2413,207061011,b'removed condition'
2413,207061046,b'No change here'
2413,207061142,"b'fixed, Renamed to RelativePathFormatInPublishToFormatInPackPackage'"
2447,207391799,"b'Ah, forget to run through a round of spell checker'"
2447,207405066,b'fixed'
2447,207405081,b'fixed'
2447,207405122,b'used TargetFrameworkIdentifier and TargetFrameworkVersion instead'
2447,207405158,"b'Fixed, check between version range'"
2447,207580356,"b'an example? And is there a easy way to test it to make sure profile and tfm is in correct ""format""? I am afraid of adding more property and it ends up cannot be read by runtime. Today, I avoid this issue by matching exactly to the following doc.\r\n\r\nhttps://github.com/dotnet/docs/blob/master/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md'"
2447,207643401,"b'I find it, it is also a doc\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/startup/supportedruntime-element\r\n\r\nSo it will just do Profile=""${TargetFrameworkProfile}""'"
2447,207664019,"b'fixed, added TargetFrameworkProfile '"
2447,207664267,"b'Fixed, it is optional. Only add it when it is set'"
2447,207664314,"b'Fixed, used System.Version.Parse'"
2447,207664373,"b'Fixed, removed File.Exists File.Delete'"
2447,207664397,b'fixed'
2447,207664605,"b'Fixed, renamed target to GenerateSupportedRuntime and the task is called WriteAppConfigWithSupportedRuntime (since it will create one)'"
2447,207664756,"b'Fixed, beforetargets `ResolveReferences`.'"
2447,208422327,b'@rainersigwald this is the issue I asked. We are worried about if this target can still run when GenerateBindingRedirects is disable.'
2447,208711262,"b'> Before a target is executed or skipped, any target that lists it in a BeforeTargets attribute is run.\r\n\r\nhttps://docs.microsoft.com/en-us/visualstudio/msbuild/target-build-order#determine-the-target-build-order\r\n\r\n@nguerrera plus I tested out disable AutoGenerateBindingRedirects=false . it is fine to use BeforeTargets=""GenerateBindingRedirects""'"
2467,209384113,"b'For EmbedAppNameInHost task, the old publish, it is true. only the dll name is embedded, but when dll name is changed, exe name is changed as well.\r\n\r\nfor generate shim(the only other user), I did use hash to make sure incremental build will be triggered when property changes'"
2470,210108332,b'[WindowsOnlyFact]  ?  it used _windowsFileHeader'
2470,210109383,"b'nvm, it is not real file'"
2470,210111556,"b'nit: Although ""Prepare"" doesn\'t really mean too much. And the file is done after this target right? and it will just be copied around'"
2883,252488470,"b'Apphost is ITaskItem[]. there is existing comments. But i will make is return only ITaskItem\r\n```\r\n//  There should only be one AppHost item, but we use an item here so we can attach metadata to it\r\n        //  (ie the apphost pack name and version, and the relative path to the apphost inside of it so\r\n        //  we can resolve the full path later)\r\n```\r\n\r\n'"
2883,252497851,b'Added the helper method'
2883,252497888,b'I will send a PR later'
2883,252499954,"b'Sorry i miss this. I talked to Daniel, we still need this check in since assets will not be in asset.json for 3.0'"
2883,252500002,b'And i just add a commit to flip the logic'
2883,252500360,"b'ah, let me add tfm check'"
2883,252515346,b'PR is here https://github.com/dotnet/sdk/pull/2888'
2887,252883102,"b'nit: it is kind of [like that](https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-2.0/ms229030(v=vs.80)#do-not-have-public-members-that-can-either-throw-or-not-throw-exceptions-based-on-some-option) \r\n\r\nMaybe output a list of missing UnknownFrameworkReference, the error or not when it is not empty or not?'"
2887,252883478,b'suggestion: extract some methods or even classes. This method is too long. Too many nested layer'
2887,253220702,b'nit: this is a case you can replace the comment by extract several methods\r\n```\r\nstring SelectingRuntimeFrameworkVersion()\r\n{\r\n   return RuntimeFrameworkVersionMetadataOnFrameworkReferenceItem() ?? \r\n              RuntimeFrameworkVersionMSBuildproperty() ??\r\n               FromLatestRuntimeFrameworkVersion() ?? KnownFrameworkReference();\r\n} \r\n```'
2887,253222702,"b'just question, why we need to remove RuntimeFrameworks?'"
2888,253248635,b'I removed that param. It does not need to pass in'
2888,253248701,b'Change the fixture name to NupkgOfPackWithShimsFixture and not use alias. And I merged it into GivenThatWeWantToPackAToolProjectWithPackagedShim'
2888,253248712,b'Renamed to suggested'
2979,259545351,b'it is necessary. it is in the aspnet template. I added comment'
3056,269814735,b'The full spec is not available to public yet'
3057,269844326,b'The full spec is not available to public yet'
3057,270207354,"b""@dsplaisted I find the previous test restoring aspnet scaffolding is too slow, download too much, and may cause fullframework leg's time out. So I changed it to restore a sample project tool and only asset restore's TFM"""
3087,272740222,b'Do you need this? it should be part of runtime already'
3087,272740731,b'please add a comment like `// TODO Remove once we have https://github.com/dotnet/corefx/issues/34894`'
3087,272740966,b'you should not need this'
3087,272745008,"b'ah we need that for full framework. @dsplaisted need your opinion, should we take system.text.json package dependency? And we should set up automatic insertion'"
3086,272749763,"b'just question, when is this get used? Do we match ""TargetingPack"" and do something somewhere'"
3086,272752173,b'Tests for this kind of packages?'
3086,272753063,"b'(complaint for existing code, what does a boolean ""runtime"" mean...)'"
3086,272758482,"b'nit: The ""style"" is close to existing DependencyContextBuilder. The methods are still long. It could use some extract method at least. Considering there are so many fields, it should be able to extract more classes. I don\'t think we should block on that, but I hope this class can be more clear. And ideally add some unit tests'"
3111,275553625,"b""just help me understanding this nuget feature, we use PackageDownload to download, but i didn't find the code to dig (i think it is in)nuget cache."""
3125,276079043,"b'if other sdks to depend on it is expected, it should be public and follow backward compact rules'"
3125,276080544,"b'i prefer to have a separate package. Although in this PR, ILTransform is part of Publish, that means it is not optional, does it have to?'"
3136,276739274,b'Only this is needed right?'
3136,276740145,"b""why this change?\r\n\r\nIn general i don't like a flag to not make error to message. It is like a flag to control throw or not."""
3183,279232745,b'This looks like a generic output assertion (with publishing profile or without should be the same?). What really matters here? I guess as long as it succeeds?'
3183,279232824,"b'There is a lot of default property. If any one of these property is wrong, it will fail the build? If so the test is good enough'"
3212,281917434,"b'This is tricky. I don\'t have a good solution:\r\n\r\nThis line need to be inside a target. Since PackAsTool is set in csproj.\r\nAnd it need to be before Microsoft.NET.Sdk.targets (basically command target), so ""RunCommand"" property can use the correct value.\r\n\r\nI try to keep PackAsTool logic in one place. But I cannot in this case. So far that\'s where I think is the best\r\n\r\n@peterhuene @nguerrera '"
3212,282162142,b'ping :)'
3228,283579060,b'dotnet test is not xunit specific tho'
3447,307932128,"b'@nguerrera @peterhuene \r\n\r\nI added this change since last review.\r\n\r\nsorry for the churn. The feedback loop of tests is slow.\r\n\r\nI realize I do need to recalculate `WindowsGraphicalUserInterface`, since `WindowsGraphicalUserInterface` depends on `UseApphost` which will always be false in dotnet tools.'"
3470,307933262,b'this change is conflicting'
3505,310824336,"b'you are right. non-windows and windows can be combined. The only difference is "".exe"" vs no extension.'"
3505,310824433,b'could you look at it again? I combined 2 tests'
3505,310824474,b'could you look at it again? I combined 2 tests'
3505,310825649,b'Changed the name back'
3538,321553238,b'Good catch and I think there is mismatch between names.\r\n\r\nVC++ expecting Sdks\\Microsoft.NET.Sdk\\targets\\core\\Microsoft.NET.Sdk.Core.BeforeCommon.targets\r\n\r\nwe have Sdks\\Microsoft.NET.Sdk\\sdk\\Sdk.BeforeCommon.targets\r\n\r\nI will send email'
3538,321553315,b'i will revert this file and run generation again'
3538,321580409,b'Removed this'
3538,321580456,b'pending a meeting with Daniel tomorrow'
3538,321580521,b'added condition on Version being empty'
3538,321580689,"b""per Olga's email. We cannot remove it yet(blocked on this chance check in and build, and Olga do the change on their side)"""
3538,321580715,b'done'
3538,321580761,b'added explicit dependency to Comhost and apphost'
3538,321913405,b'remove it for now. and have better error message when there is fullframework tfm'
3538,321914437,b'UsingNETSdkDefaults'
3538,321915808,"b'""classic"" -> ""C++/CLI which don\'t use SDK style defaults""'"
3601,321916978,b'PackageDependencyResolutionStubs.targets'
3601,321917899,"b""just '$(Language)' != 'C++'\r\n\r\n"""
3601,321918561,b'also disbale https://github.com/dotnet/sdk/blob/4094dca1091f32f16b5756ef14e6e1f99d67bee3/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.BeforeCommon.targets#L68\r\n\r\nmay need to check extension when c++ is not set'
3601,321919176,"b'double check what need to be done if we want to support exe, maybe pass an empty is better'"
3605,321920121,b'Add Pack stub with error message as well'
3538,322031841,"b'All ""classic"" is changed'"
3538,322031861,b'Removed. And added check for fullframework'
3538,322031937,"b'I am not sure the error is good enough. The direct reason is UsingNETSdkDefaults=false + using full framework. However, from the user point of view. CLRSupport =netcore + targetframework=net4XX is the problem'"
3538,322031969,b'Added UsingNETSdkDefaults=true here. Comments looks good?'
3601,322038546,b'https://github.com/dotnet/sdk/blob/74b343a9f4db2924a37e78de817b2d314f812c16/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs#L111 is the reason GenerateDependencyFile fails. If we have to support exe one day. We could return `new Lockfile()` on this line'
3601,322040704,"b'by the time setting `GenerateDependencyFile`, language is available'"
3538,323499275,"b'Removed ""below 5""'"
3635,323928518,"b'Forget to paste comments from previous PR. \r\n\r\n----------------\r\ndouble check what need to be done if we want to support exe, maybe pass an empty is better\r\n\r\n-----------------\r\nhttps://github.com/dotnet/sdk/blob/74b343a9f4db2924a37e78de817b2d314f812c16/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs#L111 is the reason GenerateDependencyFile fails. If we have to support exe one day. We could return `new Lockfile()` on this line\r\n\r\n----------------------------------\r\nby the time setting `GenerateDependencyFile`, language is available'"
3635,323929444,"b'So $(Language) is available at that point. If want to support exe, we could edit the logic to language==c++ && outputtype==exe, and also return an empty new Lockfile'"
3635,323930042,"b""The task `GenerateDepsFile` throws on no assetsfile. And we don't need this task in C++ anyway (no exe support). So disable that task in C++"""
3635,323930194,b'ah i get it. '
3635,323930468,"b'this is not necessary, since we have logic in `BeforeCommon.targets` already. let me try to remove it'"
3634,323934788,b'hm.... i completely missed that. could also be bad merge conflict resolve'
3634,324288553,"b'~~However, the Target is missing due to we does not import Microsoft.PackageDependencyResolution.targets for C++ (not used in C++). And it fails to find one of the target there. We already has an empty stub targets file for a similar issue. So I added stub version of ResolveLockFileCopyLocalFiles to it too~~'"
3634,324289015,b'~~FYI @nguerrera I added a stub ResolveLockFileCopyLocalFiles to Microsoft.PackageDependencyResolutionStubs.targets since you last review. That target is dependent by Publish.~~'
3634,324291014,"b""cc @nguerrera Actually, John you are right, adding PrepareForPublish to block's beforetargets is easier and make more sense. """
3689,329747659,"b'I copied it from a similar task above https://github.com/dotnet/sdk/blob/63fa4e00148887ff50885f6068a677893def6fd0/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.TargetFrameworkInference.targets#L124\r\n\r\nAnd for C++, pretty much only build and restore is supported. These covered them'"
3789,338823814,"b""@nguerrera @KathleenDollard what do you think? If there is no use for the detail error it's less to maintain."""
3796,339351452,b'@MattGal does Helix.sdk version number associate with dotnet core release? Should we just use the latest or the matching release version?'
3867,348858190,"b""This @jaredpar 's code https://github.com/jaredpar/arcade/blob/rolex/Rolex/AssemblyScheduler.cs\r\n\r\nIt should go into arcade one day.\r\n\r\n> Does every repo using Helix need to duplicate this code?\r\n\r\nBy default arcade helix sdk will only distribute by test dll. Using this, you can potentially distribute one workload for each test class. There is a knob you can change. Unfortunately, due to Helix VM scale algorithm, it turned out slower, if it is too granular"""
3867,348858429,b'We had several meeting about it. And we have this request since last year. So far no plan.'
3867,348882109,"b""I'll send an email tomorrow. I'll see if I can check in that code to arcade and publish a nuget library. We don't completely use Arcade xunit integration since TestFramework.csproj has a commandline. So I don't won't design how it integrate into xunit command line today."""
3867,352932838,b'@nguerrera @dsplaisted  so we can merge it like that?'
4063,358407639,b'Need discussion. Although Rainier suggested we could add a target in C++ or SDK to override SelfContained to false. So we can keep the existing behavior'
4063,358407944,"b'need discussion, double check, No nuget involved, so no extra probing path, no runtimeConfigDev needed'"
4063,358408587,"b'need discussion. maybe over kill, but that should be the ""right thing""'"
4063,362657619,"b""That's the only place we use MockBuildEngine**4** since we have more logic about the cache has dependency on it"""
4063,362691809,b'renamed'
4063,362692003,b'Good idea. The hash is probably bigger than the file. I reverted that commit and added https://github.com/dotnet/sdk/pull/4063/commits/31cec9dcea3ada9732bda2e46f64f6e997d17c90 instead. '
4063,363566033,b'Reverted this'
4063,363566325,b'Move dependency on _DefaultMicrosoftNETPlatformLibrary to _GenerateRuntimeConfigurationFilesInputCache. So _GenerateRuntimeConfigurationFilesInputCache can get the same property as before. Some property need to be set by a target before _GenerateRuntimeConfigurationFilesInputCache runs'
4245,373269640,"b""This mirrors what's in [Microsoft.PackageDependencyResolution.targets](https://github.com/dotnet/sdk/blob/f98197d56b051f8c5078e9017de1ef7046125205/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.PackageDependencyResolution.targets#L70). This target only get imported when it is C++"""
11076,407856652,b'This is not great. Directly source reference a file to production code. The build tasks have been moving around several times.'
11076,407857079,b'no test coverage #Closed'
11451,416333338,b'will this drop a temp restore file in a share folder or a folder specific for this test'
11451,416333889,b'That is the only product change? I thought that is only a cache'
11181,417762635,"b""I think the goal of this change should be fail fast and return a more meaningful message to guide the user to set this env correctly or uncover the bug faster(since it is also set by the CLI itself).\r\n\r\nUse `Path.GetDirectoryName(environmentOverride);` to trigger an exception is smart but I think it is more clear to just use Directory.Exists() and throw with a better error message when it is not.\r\n\r\nI don't have a strong opinion about check null vs null and empty. We don't ignore empty consistently."""
11358,421194918,b'they are the same? Will Enum.TryParse chock on empty string?'
11358,421195722,b'Will defaultImplicitPackages.Split will never return null? Are you using a program to do these refactoring? If so I will assume all these refactoring are correct.'
11358,421228292,"b""nit: Did you do a profile on this? What is the improvement?\r\n\r\nIn general I don't like perf change without tests to lock the perf improvement to prevent future regression or at least some profile it to show visible changes. This change is ok considering it is equality readable."""
11586,424608150,"b""There are 4 new inputs. But there in only 1 set of tests.\r\n\r\nAlso if IncludeNativeLibraries  is not currently used, let's not add it today """
11586,425282440,b'IncludeAllContentInSingleFile  not used?'
11586,425282640,b'not used?'
11586,425285703,"b'Could you change the assertion(assert different files are present or not) to reflect:\r\n\r\n_In .net 5, single-file apps will leave native binaries unbundled in the publish directory by default.\r\nSince Single-file bundles are processed in the framework, hostpolicy and hostfxr DLLs cannot themselves be in the bundle (until statically linked singlefilehost is supported)._'"
11528,425304435,"b'this file is under eng/ folder, so please revert the change in this file'"
11528,425304501,"b'this file is under eng/ folder, so please revert the change in this file'"
11528,425304548,"b'this file is under eng/ folder, so please revert the change in this file'"
11586,425475537,"b'If this is covered in runtime we can skip that. These are very slow tests * 6.\r\n\r\nMaybe just have one test to ensure  \r\n\r\n`ExcludedFiles = FilesToBundle.Zip(fileSpec, (item, spec) => (spec.Excluded) ? item : null).Where(x => x != null).ToArray();\r\n` works. As in assert one file in one tfm that should be exclude not being there.'"
11586,425476468,"b'And is all these TFM combination necessary? Again, these are really slow tests. There is no SDK logic have if-else about TFM. Only one test in SDK is enough. Other coverage should be in dotnet/Runtime'"
11586,425494800,b'are all these combinations necessary too?'
11848,433530850,b'GitCommitHash is still used in `src\\Layout\\redist\\targets\\GenerateLayout.targets`\r\n'
11954,438235892,b'netcoreapp3.1'
12069,441295593,"b'only Diagnostic is relevant to TargetFrameworkMoniker? Should ""PackageDependencies"" be different when TargetFrameworkMoniker is different? (Although ""Diagnostic"" is the only thing TargetFrameworkMoniker applied to.)'"
12069,441296032,"b'If so, maybe we should call it something like `DiagnosticTargetFrameworkMoniker`'"
12105,442436816,b'this is refactoring'
12105,442479335,b'Just fallback to PATH'
12105,442482177,"b""won't write into runtimeconfig.json"""
12105,442482742,b'Try and see go over the rid logic and get the same'
12105,442493666,b'CopyLocalLockFileAssemblies need to be in consideration\r\n\r\nCopyLocalLockFileAssemblies should be false in a library build'
11824,443099846,b'clean up'
11824,443099873,b'clean up'
12199,445797580,"b'this ""else"" I am not too sure. Is it the same logic before https://github.com/dotnet/sdk/pull/11824 ?'"
12199,445798581,b'You can write unit test for this task like `src\\Tasks\\Microsoft.NET.Build.Tasks.UnitTests\\ProcessFrameworkReferencesTests.cs`. It will be at least better for documenting this long class'
12199,445801081,b'Ideally these comments should be able to express in code. But meanwhile this class should really split into 4-5 class to make things clear. I will try to refactor that. (you should try too if you have time. reference http://arlobelshee.com/the-core-6-refactorings/)'
12202,445878854,"b""Don't need to move the existing logic to use the intrinsic function? Or we already did?\r\n\r\nIf so parsing TargetFrameworkIdentifier and TargetFrameworkVersion might be duplicated"""
12230,446431410,b'https://github.com/dotnet/sdk/issues/12231'
12232,446432777,b'https://github.com/dotnet/sdk/issues/12231'
12202,446552961,b'It will give the same error? Why extra flag on `ErrorOnUnsupportedTargetPlatform` is needed?'
12254,447090099,"b'yes, for unit testing'"
12202,447183253,"b'@dsplaisted what do you think? I think error even it is below netcoreapp3.1 is fine, giving the escape hatch. @sfoslund you should mention the escape hatch in the error message tho. Something the guide the user to set the property.'"
12106,447957182,b'Without their side of change I am importing it twice. I need to somehow detect the props already been imported. And I see a prop in [there](https://github.com/dotnet/wpf/blob/52b9067325cd90cc38e100584075abe5a8489139/packaging/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.NET.Sdk.WindowsDesktop.props) can indicate that'
12232,448043067,b'they are local **functions**. I just want to group the logic to make them more readable.'
12232,448100497,"b""It is the Microsoft.NETCore.App without win-x64 need to download there due to the runtime graph is also not complete. I'll update the test to a more realistic scenario"""
12232,448124709,b'nuget change is still not ready. I will check it in for now.'
12232,448124791,b'changed to local variables'
12232,448124957,b'added a new test'
12314,450593486,b'Keep only one property'
12314,450593568,b'Tested. It works'
12106,451107378,"b'@dsplaisted could you check this change again? I added check on TargetPlatformIdentifier, and _TargetFrameworkVersionWithoutV >= 5.0 on this condition\r\n\r\nWPF side just merged.\r\n\r\n'"
12106,451158261,"b'So the new syntax only applies to net5.0-windows. If you use Microsoft.NET.Sdk.WindowsDesktop, that is still the same\r\n\r\n'"
12106,452404850,b'Done wrapping and added default PlatformVersion logic'
12106,452420675,b'@dsplaisted I added this to workaround the missing property issue while I am checking into dotnet/wpf'
11499,452968217,"b""@dsplaisted @mhutch I added the condition on > net5.0 . We won't have the type when it is lower"""
12430,453113571,b'Do we? If so it will try'
12430,453113775,"b'""Microsoft.NET.Sdk.WindowsDesktop"" still works'"
12430,453114376,"b""That's just a bad diff from github. I didn't change this test. I think we should make a separate issue for it"""
12430,453114525,b'@sfoslund do you mind to follow up on that?'
12430,453347595,b'Removed'
12430,453347660,b'create a separated issue https://github.com/dotnet/sdk/issues/12440'
12448,453796109,b'no need to set this now.'
12451,454013857,b'Added check for not empty'
12451,454013958,"b'Removed BeforeTargets - Restore, CollectPackageReferences'"
12502,455442976,"b'The assertion in not too useful. If the input is diag, it will pass too. Either make it more specific. (that will ""over reach"" to nuget behavior) Or change to an parser level (there are some _parsertests_) tests to assert on the forwarded command.'"
12547,458438636,b'Comma is ok. But whitespace is better'
12589,458911722,b'Add get SDK version method'
12589,458937301,b'yes packageid and version will be in the manifest. '
12589,458938935,b'IOptionalSdkTemplatePackageInfo'
12589,458939671,b'GetDotnetSdkTemplatePackages(string sdkVersion)'
12589,458939793,b'Path will come the library'
12581,459211617,b'no test coverage for this code'
12581,459211657,b'no test coverage for this code'
12604,460281546,b'You are testing if `HostingStartupInLaunchSettings` will be added from `LaunchSettings`? The test name is not very clear.'
12604,460282950,b'This is not ideal. SDK is supposed to be neutral. But this is clearly ASPNET specific code. Can it be something generic?'
12604,460285088,b'Have an abstraction in launchSettings to let a list of entries to be EnvironmentVariables maybe better.'
12649,461028686,b'yes. This is not something arcade can automatically handle '
12646,461327969,b'This is always owned by nuget. We can give you merge permissions.'
12589,461730508,b'package id and package version is no really needed. Although it is free for adding it'
12646,461805216,b'Are good on this or we need a meeting to discuss? @aortiz-msft @marcpopMSFT '
12646,461881756,b'Sorry I am confused by your thrum up. We are good? @nkolev92 '
12633,462718661,"b'Maybe call it ""FailedToResolveSpecifiedInGlobalJson"" and inverse the boolean. So, everything else is true. Currently it is not straght forward to know GlobalJsonHonored == ""True if either (A) there was no applicable global.json or (B) existing global.json was used in resolution. ""'"
12633,462719841,"b'nit: it is better not to mutate states after it is set. Use a non initialized local variable, and then set result.GlobalJsonHonored to it after the branch logic is done.'"
12633,462719923,b'You get the solution from Rainer?'
12579,462725056,"b'These ""start from msbuild /t:build"" tests are slow. I think just sample one TFM is enough. @dsplaisted what do you think?'"
12769,465333448,b'Correct'
12769,465334563,"b""no. it is an internal class. The call site won't pass null"""
12769,465338472,"b""Cannot do that reliably. I just lists out the templates in stage2 template folder, and we don't really control what goes in there (inserted from dotnet/templating). Plus, the proper implementation will only read the manifest file instead of probing the disk. This is good enough."""
12769,465356773,"b""It is for testing. A temporary implementation. We won't need it when it has the proper implementation"""
12769,465357237,"b""That's fine. The only user see it is the dev working on _dotnet/templating_. And they can react."""
12769,465367641,"b""This is a place holder implementation. Template engine currently don't need this. But it is part of the spec we decided on (for VS integration later)"""
12769,465368667,b'Hmm actually it would. https://github.com/NuGet/NuGet.Client/blob/784274cc9b2002ca73055e8134064261118d8a01/src/NuGet.Core/NuGet.Protocol/Utility/LocalFolderUtility.cs#L194'
12769,465375373,b'Just made it return empty array when null'
12763,465835012,"b'nit: usually it is called ""normalize""'"
12106,466706363,b'What advantage that give us? I think it is easy to understand what a simple file import does.'
12576,468334076,"b'Curious, this property is how to mock a feed?\r\n\r\nAs in you can simulate a restore with package with only given versions? '"
12865,468932278,b'i refer removing that'
12865,468932688,"b""let's keep -bom for now"""
12884,468999188,b'The interface is the same as the real thing or a place holder too?'
12919,470737168,b'hmm... how that fix the incremental build issue?'
12919,470737240,b'why this change?'
12919,470857608,"b'this is the path that apphost is decided, so we can just write apphost here?'"
12933,471708068,b'miss the manfiest folder directory. Workloadmanifest directory'
12933,471715551,b'no serialization code for type that does not need serialization'
12933,471715815,"b'we just rely on editorconfig. if it does not complaint, it is good'"
12933,471715934,b'good catch'
12933,471716201,b'`dotnet/sdk/{sdk-band}-manifests/{manifest-id}/`\r\n\r\nAt least missing `sdk` folder. But there might be a different spec'
12933,471830748,"b""We don't need this initialized in a non VS scenario"""
12933,471831174,b'it is formatted by IDE. Which part is inconsistent?'
12933,471831642,b'How so?'
12933,471832419,b'TemplateLocator take nothing as constructor in non test scenario. I added parameter validation for GetDotnetSdkTemplatePackages.\r\n'
12933,471833326,b'use <DOTNET ROOT>/workloadmanifests/<FEATURE VERSION BAND>/\r\n'
12933,472326323,"b""The only people see this error should be a dev. We don't localize internal error messages"""
12933,472327155,b'fixed'
12965,472358229,b'@BenVillalobos this merge looks good to you?'
12933,472494835,b'No. That is a good point. Although I think the manifest file reader should do the filtering.'
12989,473230245,b'This is the workaround provided by nuget team https://github.com/NuGet/Home/issues/3891#issuecomment-377319939 to include package reference to dll. Nuget targets are consuming this gruop'
12989,473230841,b'my VS keep encoding it for some reason. Changing it back'
13034,474995583,b'This test is better moved out of SDK. We have to sync the text with the behavior whenever that changes'
13093,478060260,b'this should have platform or not? net5.0 or net5.0-windows'
13093,478061364,b'and reminds why we use that instead of targetframeworkmoniker + targetplatformmoniker'
13093,478068175,b'any test is covering these code?'
13093,478068632,b'the cache file cannot be written is a new thing?'
13168,478733143,b'nice!'
13272,480791052,"b'Once we decide on 4 parts, everything should be 4 parts.'"
13311,481491625,b'yes'
13311,481492360,"b""I need to reuse the setup of testing msbuildsdkresolver to test template locator's finding VS version function. It is too much to duplicate, so i just added the template locator test in msbuildsdkresolver tests. And a type from template locator's dependency chain is used in the test. So i need Microsoft.DotNet.SdkResolver too"""
13306,481652117,"b'@mhutch it is better to just input SDK version. And the SdkDirectoryWorkloadManifestProvider will convert that into a band, or the consumer need to understand SDK version scheme'"
13306,481660823,"b'nit: Factory method is not easy to discover,  any reason it is not a constructor?'"
13306,481662066,b'Multiple manifests are possible?'
13306,481679519,"b""This API has disk IO dependency. It would be hard to test. Maybe pass in a Func for File.Exists, and if the Func is null then use the real thing?(Poor man's DI)\r\n\r\nNormal CLI has an in memory implementation of File and Directory. But we should not add more dependencies """
13306,481703373,"b'And a constructor taking `string sdkRootPath, string sdkVersionBand` makes it hard to dependency inject(i think that is the point for IWorkloadManifestProvider). Since getting sdkRootPath and sdkVersionBand is business logic. So you cannot inject a fully initialized SdkDirectoryWorkloadManifestProvider before in constructor of consuming class'"
13306,481706586,"b'sdkRootPath -> dotnetRootPath. sdk root might be considered as `program files/dotnet/sdk`. We have DOTNET_ROOT env already, so that aligns with what we want'"
13306,481715578,b'And packs are not accessible from the outside. Most of the functionality is not possible to test now'
13318,482240808,"b'nit: what does ""Online"" mean'"
13318,482241366,b'test coverage?'
13306,482561396,"b'Also make sure pack Path is constructed as\r\n\r\n`Path.Combine(dotnetRootPath, ""template-packs"", pack.Id.ToLower() + ""."" + pack.Version.ToLower() + "".nupkg""));`\r\n\r\n1. I verified with nuget team, `pack.Id.ToLower() + ""."" + pack.Version.ToLower() + "".nupkg""` is reliable to construct nupkg name from package id and package version.\r\n2. ""templates"" and ""template-packs"" are different folders. For template packs it should be in ""template-packs"". ""templates"" is for existing non workload templates\r\n'"
13306,482562544,b'And normalized package id should be all lower case. Although part of the system is not consistent about it'
13306,483177138,"b'string sdkRootPath, string sdkVersionBand should be parameter for GetManifests. You cannot dependency inject with sdkRootPath and sdkVersionBand required in constructor'"
13306,483183524,b'All nuget package name should be all lower case. Since nuget package id is normalized to all lower case. All valid manifest should not have non-lower case package id to avoid down stream mismatch.'
13410,483826995,b'@mmitche  revert this? Or macos will blocking the build'
13410,483827227,b'it is running 3 hours if not blocking'
13208,486005431,b'This cannot give a good error message if there is a typo in PublishProtocol. A space in it could be worse'
13208,486047264,b'is it done? What is the target to do the package generation? '
13208,487222417,"b'> If there is a typo in the PublishProtocol, the ClickOnce targets file will not be found, the import will be skipped and ClickOnce publishing will not happen. \r\n\r\nThis experience is hard to let the user trace back to the typo.\r\n\r\nBut if it is not set by the user that is fine. Do we have many PublishProtocol? and they are mutual exclusive?'"
13522,488834472,b'these are out dated helix **perf** tests. So this is fine'
13655,489819530,"b'yes. This is a flag to tell Microsoft.Windows.SDK.NET apart from other runtime assets that installed on client machine, therefor need to copylocal'"
13655,489827961,"b""I don't know exactly. But only the exe has it. @sbanni do you know?"""
13655,489828989,b'I am removing MetadataNames IsKeyOutput'
13655,489829093,b'the set up is copied from another wapproj test. No need to assert IsKeyOutput here'
13655,489832413,b'Removed'
13719,492332982,"b'nit: use better naming and extract class, extract method to reduce comments.'"
13719,492334791,"b'same here.\r\n\r\nAnd a method that worth comments every 3 lines is a dangerous method to edit later. We need more test around this method. And it is better to make it a separate method, even a separate class.'"
13719,492344482,b'method too long'
13719,492344917,b'@dsplaisted please check if the API shape is what you need'
13719,492346075,b'not used variable?'
13719,492347465,"b'no obvious test for the scores. This part sounds super complex. If a later change messed up the score logic, a test need to fail.\r\n\r\nAnd it is complicated enough that I cannot say it really works by just reading it.'"
13545,492398206,"b'Is it ok to use task level tests? These tests are expensive (several seconds for tests that starts from a project on disk). And we add about 30 minutes every release, it is no negligible '"
13782,493820952,b'SdkFeatureBand and the ManifestRoot is calcuated in manifest reader too. We should only keep one logic'
13782,493822719,"b""why this is needed? It is not part of existing msbuild resolver's dependency?"""
13782,493822960,b'This will break one of my test. It make sense to throw. There has to be a WorkloadManifest.json under manifest folder right?'
13782,493823182,b'read the folder name is enough. It is a contract used by at least template engine already'
13782,493823422,"b'This is temporary? Add a hook for test, and we should do the rest in the test setup'"
13815,494628583,"b'@KathleenDollard need your opinion on a parameter for passing EnvironmentVariables. is ""--environment"" too ambiguous?'"
13815,494629279,"b'why optionName need to pass in, this method can only deal with --environment'"
13815,494631683,"b""@KathleenDollard the syntax is a bit odd. _dotnet test --environment  key1=value1 --environment  key2=value2_\r\n\r\nBut we don't have something like this before. """
13782,494637097,b'Could you test both on commandline and in VS? I want to make sure it can boot up giving the complexity in dlls'
13782,494638332,"b'Could you also make the same change for template locator and all the ""resolvers"" project? They were all netstandard on core.'"
13782,494640174,"b'nit: I usually expect a method starts with ""try"" uses out var and returns a bool . GetPackInfo should be enough given null annotation.'"
13782,494641865,b'EnableWorkloadResolver.sentinel would be in VS hive for VS scenario. Is that ok?'
13782,494642419,b'We should file a bug to remove the feature flag in the future. A big problem of feature flag is people always forget to remove them'
13782,494645231,"b'Tested the feature flag works for on/off * commandline/VS * environment/sentinel, 8 scenarios? '"
13782,494646562,b'Does the test cover workload props and targets can be included to the project?'
13904,497461589,b'It is a timing issue? It is the same itemgroup but add at a different time?'
13924,497663909,b'@nkolev92 please double check this API use'
13924,497857476,"b""unfortunately no, that's a convention. during install, the short folder name is used to tell which tfm the asset is and select (code in nuget). We support multi targeting for tools."""
13924,497859703,"b'hmm, that might work. but it is hacky. it might cause more problem when we want to properly support this scenario later.'"
13719,499909167,"b""> How many additional (and potentionally unnecessary)\r\n\r\nI don't understand what that means. The number could be too high due to some of the packs are unnecessary? And I need to read the comments to understand what the property does. It is a complex concept, it is fine to have a longer name."""
13719,499909993,b'nit: please add explicit modifier per editorconfig'
13719,499913463,"b""what's the difference between this and Max() ?"""
13719,499914513,"b""I have problem understanding what's this class present. It is a collection of Workloads , Packs but  GatherCompleteSuggestions has a list and a set of them (collection of collection of workload?). What does the branch mean here?"""
13719,499914894,b'order matters?'
13719,499916345,b'possible to make it immutable? '
14053,502034010,b'@cristianosuzuki77 a typo?'
14393,516292781,b'not everything is moved? where is TargetPlatformDisplayName?'
14393,516432227,b'This is smart!'
14430,517644804,"b'this is strange, why merging 5.0.2xx to master will touch 6.x dependencies?'"
14379,521846838,b'`.FirstOrDefault(c => c.Token() != null && c.Token().Type.Equals(TokenType.Command))?` happened several times. It is better to extract it to an extension method or similar '
14379,521849761,b'nit: we can remove https://github.com/dotnet/sdk/blob/e06f00acfab778ace1e78e28ed833ea9946e0a49/src/Cli/dotnet/Telemetry/TopLevelCommandNameAndOptionToLog.cs#L23'
14379,521850465,b'how you test moving these null handling are safe?'
14379,522333521,b'is this new?'
14379,522334750,b'no file rename'
14379,522380421,b'wrong file name here too?'
14379,522382810,b'tested the help still looks the same?'
14379,522384018,b'will this get used? I remember `--help` will directly to go to template engine exe. And show help there'
14379,522384555,"b'This will provide a better help. However, we need keep this command structure with template engine commandline in sync'"
14379,522387617,b'I am not sure we should show this to the user especially for all commands. Only few command support -d. @KathleenDollard ?'
14379,522398407,b'includeRuntimeOption and includeNoDependenciesOption default are new?'
14379,522410475,b'this is no longer needed?'
14379,522411013,b'And this is removed?'
14379,522415203,"b'we cannot all use the same loc for GlobalOption, LocalOption, ToolPathOption. for install, uninstall, list. It has ""install"" work in the text. Although we can edit the text to make them generic for all'"
14379,522415544,"b'Install.LocalizableStrings is used for all install, uninstall, list'"
14379,522423770,"b'There is no equivalent of \r\n\r\n```\r\nAccept.AnyOneOf(\r\n                            ""full"",\r\n                            ""mini"")\r\n``` ?'"
14379,522424895,b'Same as global/local. The text between install and restore are actually different. You could try to make the text generic instead.\r\n\r\nPlease check the convert for tools command for similar issue. And you should remove unused restore/list/uninstall counterpart'
14379,522505549,"b'the existing logic does not have ""-target:Restore"". And usually ` msbuild -target:Restore;Build` is a bug since restore will include more props. `msbuild /restore -target:build` is the right way '"
14379,522511271,b'we removed this type of error report?'
14379,522512299,"b""yay! we don't have 2 layers of parsers anymore!"""
14379,522513862,b'equals works here? Does system commandline have special handing for command being equal?'
14379,522515755,b'nit: some lines are too long in this change.'
14379,522517632,"b'no, so NewCommandParser is only used for suggestion not help even after system.commandline change?\r\n\r\nThat should be fine, one day template engine would use system commandline too, so these work are not wasted'"
14379,523086128,"b'I cannot find the reason of disabling the test in ""https://github.com/dotnet/sdk/issues/14461. What is the current behavior?'"
14379,523135706,b'It has errors now? What are they?'
14529,523240195,"b""Yep, he is OOF, so I need to make the package myself. I found the instruction by asking around. I'll do that later"""
14529,523242080,"b""literally what cannot run on helix. Some will fail in helix, I want to get most of the test running in helix to reduce the time first. Plus if they run in parallel, it won't add to overall test time. They are mostly old dotnet/cli tests and websdk tests. dotnet/cli tests have dependency on the repo structure. I haven't get time to untangle them. """
14379,525388705,b'so this feature does not work? Could you work with dotnet test team to see if there is any workaround? '
14379,525399622,b'so i assume system.commandline has special handing for command being equal'
14379,525405025,b'is -- required now? It used to be optional'
14379,525408560,b'similar to the other comment. it will still run right? We disabled the error when it is unmatched right?'
14532,525563767,"b'There is no easy reliable way to do that other than regex in both powershell and bash. It is better to keep the logic in sync, since overlap or missing test projects are worse than accidentally run on host.'"
14532,525567035,"b'in the test, the path are constructed in 2 different ways. ""pair.value"" will not ""expand"". For example you have ""C:\\Users\\\\**ADMINI~1**\\\\AppData\\Local\\Temp\\dotnetSdkTests\\p5eoajv5.iq5\\It_builds_a_s---34401EFE\\""   vs ""C:\\Users\\\\**administrator**\\\\.....""'"
14532,527143603,b'My automatic formatter did that. I guess it is a convention somewhere'
14532,527144449,"b'Agree, we should eventually move all tests to helix. And we can remove that part completely.'"
14532,527146307,"b'I had a long talk about the long path issue. Last year for at least a month. (We first found it 2 years ago for the perf tests and started to ask for it) it is not easy, due to the way it is configured. Although, we get the path on helix trimmed, it used to have 2 guid in front.'"
14532,527149121,"b'Used ""pre-installed dependencies"" instead. It is mainly about VS version'"
14488,527268105,"b'No other way but need to write the same logic twice for publish and build?\r\n\r\nAnd I cannot find the logic of copying the referenced exe, how that worked?'"
14488,527269052,b'update this comment too'
14488,527269400,"b""update the comment after Vitek's reply"""
1172,114972558,b'This file looks similar to https://github.com/dotnet/netcorecli-fsc/blob/17930eb54a88d61f2d452856d64403b49df64e73/src/FSharp.NET.Sdk/build/FSharp.NET.Core.Sdk.targets.  Have you gone through that file and checked that all relevant functionality and settings is being correctly mirrored/transferred here? Thanks'
1172,114974352,b'@nguerrera  The file is being added here: https://github.com/Microsoft/visualfsharp/pull/2993/'
11499,451358773,"b'Should it be MinimumPlatformVersion to more closely match TargetPlatformVersion, especially since it defaults to it? Isn\'t ""OS"" and ""Platform"" the same in this context, so the naming is redundant, or am I overlooking something?'"
12460,458525594,"b""Looking at the build link you shared, shouldn't this be 015217?"""
12579,459133613,"b""I'm fixing these up."""
12579,459133626,"b'Good point, I forgot we have tests running under ESN.'"
12579,459133754,"b""Sounds good, I'll collapse props into targets"""
12579,459193436,b'fixed in the latest PR'
12579,462736540,"b""Good to know. I mostly did this to make sure we cover all the EOL frameworks and didn't forget to add one, but if it impacts perf I'm fine scaling this back"""
12769,465332880,b'So this is just a placeholder to unblock partner teams?'
12769,465333500,b'Can this ever be null?'
12816,466746354,"b""It's always relative? I was thinking you could use something like GetDirectoryNameOfFileAbove, but that also assumes there'd be a well known file that's unlikely to change or move."""
12933,472306861,b'Should this be a resource string so that it can be localized? Also seems to be used in more than one place.'
12933,472307623,"b'Missing comma before ""but"". Should probably be ""got"" instead of ""get""'"
12989,473229304,"b""Who/what is consuming this item group? The targetname suggests it's going to copy something, but it seems to just create/add items"""
12989,473230135,"b'Any reason we\'re encoding the ""->"" operator. Seems like we just use -> in other places?'"
13034,474945514,"b'Typo, it says ""Nanifest""'"
13272,480293981,"b""Should this test for < 10 instead, or aren't we concerned if there's ever an 11 version"""
13598,488414109,"b""Is there a warning if there's no match?"""
13615,488976357,b'What happens when you multi target? Each iteration gets a new set of constants right?'
13923,497872725,"b'Long term, would it make sense to have a {0} placeholder, then build a list of property names that cannot be supported in case there are more to be added in the future besides the 3 listed here now?'"
14020,501316403,b'missing space :)'
14644,528037930,"b""From what I've read, this directive (if present), shows how the commandline arguments were parsed, but it never executes the actual command. What's the benefit in having this? I can see it being useful when testing an application, or is this to ensure that any dotnet command would implicitly support [parse]?"""
13619,489481496,"b""Why don't make this internal and use it in dotnet-test as well? """
14338,518684733,"b'```suggestion\r\n        private static TestProject SetUpProject(string targetFramework = ""net6.0"")\r\n```'"
13208,485778306,"b""Updated ClickOnce targets to use correct deps json file based on Luke's comment."""
13208,485784570,"b'@NikolaMilosavljevic ClickOnce uses output groups that are visible in msbuild as well as Visual Studio for ClickOnce processing (e.g. Built, RefrenceCopyLocalPaths, Content etc). We have ClickOnce UI that also iterates through files in known output groups to show in the UI. Since we need to keep them in sync, it is risky to change the output groups we consume.'"
13208,486616084,"b'If there is a typo in the PublishProtocol, the ClickOnce targets file will not be found, the import will be skipped and ClickOnce publishing will not happen. That said, the PublishProtocol value is set by the Publish Provider in its schema file and not set by the user directly.'"
13208,486619573,"b""ClickOncePublish is a pseudo target that has dependent targets set by ClickOncePublishDependsOn. These dependent targets are defined in the MS.Common.CurrentVersion.targets file. The PublishProtocolProviderTargets property is an extension point defined in Microsoft.Net.Publish.targets and we set this property's value to ClickOncePublish. This way we inject the dependent targets from MS.Common.CurrentVersion.target that we need to invoke during the .NET Core Publish process."""
13208,487323432,b'Yes there can be several publishing providers with their own unique protocol names and they are are mutually exclusive. The provider author specifies the protocol in a schema file (schema file is not directly available the to end user).'
3,73228283,"b'OK, we could explore a rename\n'"
3,73228685,"b""Actually haven't been able to get my task working in this portable library, so I reverted my code to a plain Class Library. When checking that in we can nail down the correct targets.\n"""
8,73442641,"b'> _ProjectLockFilePath [](start = 5, length = 20)\n\nIn the package dependency task, we also address the case where the project file is `$(MSBuildProjectName).project.json`, setting the lock file in those cases to `$(MSBuildProjectName).project.lock.json`. Is this possible in .NET Core, or is this just legacy we should get rid of?\n'"
8,73443698,"b""> LockFileCache [](start = 22, length = 13)\n\nDid you figure out if this instance lives beyond more than one task? Also be interested to figure out how it plays with `msbuild /m` for building multiple projects in parallel. I can't think of anyway it could be harmful though.\n"""
8,73444200,b'Target and Props need copyright headers. Mine also include the standard warnings about not modifying them\n'
8,73447828,b'https://github.com/NuGet/NuGet.BuildTasks/blob/dev/src/Microsoft.NuGet.Build.Tasks/Microsoft.NuGet.targets\n'
10,74098560,"b'I can experiment with props. Note that ordering is important, since this should be turned off before certain targets run. But putting in props should not affect this.\n\n---\n\nIn reply to: [73918013](https://github.com/dotnet/sdk/pull/10#discussion_r73918013) [](ancestors = 73918013)\n'"
10,74100057,b'Removed from sdk.targets\n\n---\n\nIn reply to: [73919008](https://github.com/dotnet/sdk/pull/10#discussion_r73919008) [](ancestors = 73919008)\n'
10,74100778,b'Filed #31 to track this\n\n---\n\nIn reply to: [73918138](https://github.com/dotnet/sdk/pull/10#discussion_r73918138) [](ancestors = 73918138)\n'
10,74112668,b'Changed to $(MicrosoftDotNetCoreBuildTasksAssembly)\n\n---\n\nIn reply to: [73919858](https://github.com/dotnet/sdk/pull/10#discussion_r73919858) [](ancestors = 73919858)\n'
10,74112973,b'Removed (was a leftover artifact from testing)\n\n---\n\nIn reply to: [73923197](https://github.com/dotnet/sdk/pull/10#discussion_r73923197) [](ancestors = 73923197)\n'
10,74113963,b'Also removed\n\n---\n\nIn reply to: [73924724](https://github.com/dotnet/sdk/pull/10#discussion_r73924724) [](ancestors = 73924724)\n'
10,74120481,"b'Still need to iron out the differences between build and publish, but I wanted a target name that was agnostic to this, and just reflected what it was adding to copy local.\n\n---\n\nIn reply to: [73924082](https://github.com/dotnet/sdk/pull/10#discussion_r73924082) [](ancestors = 73924082)\n'"
10,74158501,"b'Removed this block, probably not relevant to NET Core anyway. Handling empty RIDs separately below\n\n---\n\nIn reply to: [73919433](https://github.com/dotnet/sdk/pull/10#discussion_r73919433) [](ancestors = 73919433)\n'"
10,74159946,b'Created common property and accounted for empty RIDs\n\n---\n\nIn reply to: [73920321](https://github.com/dotnet/sdk/pull/10#discussion_r73920321) [](ancestors = 73920321)\n'
10,74160646,"b""I've already removed much of the logic that was in this function. Will remove the rest with #24\n\n---\n\nIn reply to: [73927331](https://github.com/dotnet/sdk/pull/10#discussion_r73927331) [](ancestors = 73927331)\n"""
10,74161262,b'Modified to use LockFileCache\n\n---\n\nIn reply to: [73925569](https://github.com/dotnet/sdk/pull/10#discussion_r73925569) [](ancestors = 73925569)\n'
10,74161375,"b'Adding note here to also do this with #24\n\n---\n\nIn reply to: [73926529](https://github.com/dotnet/sdk/pull/10#discussion_r73926529) [](ancestors = 73926529,73925217)\n'"
10,74190135,"b""I get some errors when I try to introduce a resx file:\n- Opening up the file: Could not resolve mscorlib for target framework '.NETStandard,Version=v1.3'.  This can happen if the target framework is not installed or if the framework moniker is incorrectly formatted.\n- From the designer: 'Type' does not contain a definition for 'Assembly' and no extension method 'Assembly' accepting a first argument of type 'Type' could be found (are you missing a using directive or an assembly reference?)\n  Looks like there will be some work to get resx files working properly with this, so I'll open #33 and inline the message strings for now.\n\n---\n\nIn reply to: [73925408](https://github.com/dotnet/sdk/pull/10#discussion_r73925408) [](ancestors = 73925408)\n"""
10,74200310,b'Looks like this is relevant to xproj so dropping. Doing more testing to determine how this translates to Net Core\n\n---\n\nIn reply to: [73926701](https://github.com/dotnet/sdk/pull/10#discussion_r73926701) [](ancestors = 73926701)\n'
10,74274329,b'Dropping xproj\n\n---\n\nIn reply to: [74245139](https://github.com/dotnet/sdk/pull/10#discussion_r74245139) [](ancestors = 74245139)\n'
35,74375858,"b'If there are many categories of things to copy, is it worthwhile to eventually break this target up into multiple targets?\n\n---\n\nIn reply to: [74326038](https://github.com/dotnet/sdk/pull/35#discussion_r74326038) [](ancestors = 74326038)\n'"
44,75194127,b'Changed the template to match\n\n---\n\nIn reply to: [74762015](https://github.com/dotnet/sdk/pull/44#discussion_r74762015) [](ancestors = 74762015)\n'
44,75194526,"b""Calling it project.json caused build breaks. (It is renamed to project.json in ConsoleApplication.vstemplate.) To avoid confusion, I've renamed this file ProjectDepsTemplate.json\n\n---\n\nIn reply to: [74760667](https://github.com/dotnet/sdk/pull/44#discussion_r74760667) [](ancestors = 74760667)\n"""
44,75194998,"b'I believe when we ship, this will just be 1.0.0? So perhaps not worth the trouble, dogfooders can update this when they create the template\n\n---\n\nIn reply to: [74760490](https://github.com/dotnet/sdk/pull/44#discussion_r74760490) [](ancestors = 74760490)\n'"
44,75207324,"b'The templates will be authored into VS separately, and inserted\n\n---\n\nIn reply to: [74980772](https://github.com/dotnet/sdk/pull/44#discussion_r74980772) [](ancestors = 74980772)\n'"
61,75384945,"b""I'll add this to assembly. Does that sound good @abpiskunov ?\n\n---\n\nIn reply to: [75346889](https://github.com/dotnet/sdk/pull/61#discussion_r75346889) [](ancestors = 75346889)\n"""
61,75386166,"b'Yes, need to resolve some errors with resource file. Tracked by [https://github.com/dotnet/sdk/issues/33](https://github.com/dotnet/sdk/issues/33)\n\n---\n\nIn reply to: [75345953](https://github.com/dotnet/sdk/pull/61#discussion_r75345953) [](ancestors = 75345953)\n'"
61,75388864,"b""yes, I'm working on a bunch of tests. Tracked by [https://github.com/dotnet/sdk/issues/28](https://github.com/dotnet/sdk/issues/28)\n\n---\n\nIn reply to: [75349619](https://github.com/dotnet/sdk/pull/61#discussion_r75349619) [](ancestors = 75349619)\n"""
44,75704687,"b'These do not build here, and are in this solution for convenience so that they can be edited\n\n---\n\nIn reply to: [75687223](https://github.com/dotnet/sdk/pull/44#discussion_r75687223) [](ancestors = 75687223)\n'"
44,75704966,"b""Don't know what template tests would look like\n\n---\n\nIn reply to: [75686808](https://github.com/dotnet/sdk/pull/44#discussion_r75686808) [](ancestors = 75686808)\n"""
44,75756519,b'I could not figure out how to do this in powershell\n\n---\n\nIn reply to: [75686427](https://github.com/dotnet/sdk/pull/44#discussion_r75686427) [](ancestors = 75686427)\n'
44,75758900,"b'Nevermind. Write-Output was not working but echo seems to be\n\n---\n\nIn reply to: [75756519](https://github.com/dotnet/sdk/pull/44#discussion_r75756519) [](ancestors = 75756519,75686427)\n'"
44,75761080,"b'I can refactor the common options, but not the log options because they are actually different (writing to different log files)\n\n---\n\nIn reply to: [75758900](https://github.com/dotnet/sdk/pull/44#discussion_r75758900) [](ancestors = 75758900,75756519,75686427)\n'"
44,75761406,b'This names the hive templates are deployed into during development. Picked the same name used by Roslyn Project System and Roslyn so that all can be deployed to the same hive\n\n---\n\nIn reply to: [75687446](https://github.com/dotnet/sdk/pull/44#discussion_r75687446) [](ancestors = 75687446)\n'
44,75768665,"b""Signing is handled by the Microsoft.Dotnet.Core.Signing.proj project. This prevents it from being called twice. I'll update the config with directives to sign the vsix as well.\n\n---\n\nIn reply to: [75686108](https://github.com/dotnet/sdk/pull/44#discussion_r75686108) [](ancestors = 75686108)\n"""
44,75769099,"b'Yes, trying to add that with <CustomParameters>. Tracked by #64\n\n---\n\nIn reply to: [75766582](https://github.com/dotnet/sdk/pull/44#discussion_r75766582) [](ancestors = 75766582)\n'"
81,75908230,b'#33 tracks adding a resource file. There some (project system?) errors preventing us from using the designer\n\n---\n\nIn reply to: [75905846](https://github.com/dotnet/sdk/pull/81#discussion_r75905846) [](ancestors = 75905846)\n'
89,76149918,"b""The build number has format `nnnnnnnn-nn` which is not valid for VSIX. We could conjure up a number but I'm trying to examine how the roslyn project system does it. They have a $(BuildVersion) variable which I is passed in, it looks like from the microbuild template, otherwise just use 42.42.42.42.\n\n---\n\nIn reply to: [76129647](https://github.com/dotnet/sdk/pull/89#discussion_r76129647) [](ancestors = 76129647)\n"""
89,76157026,"b""I'm going to guess a valid format for vsix is just `n.n.n.n`. I've tracked down the setup in roslyn-project-system. Their build numbers are formatted differently `$(date:yyyyMMdd)$(rev:.r)` versus `$(date:yyyyMMdd)$(rev:-r)` in our build. But even that wouldn't be valid because it would add a fifth number. The version parsing does `$(BuildNumber.Split('.')[0])` to extract just the first part which means you don't get different build versions for two builds on the same day. I'll just concatenate to make the version number unique.\n\n---\n\nIn reply to: [76150160](https://github.com/dotnet/sdk/pull/89#discussion_r76150160) [](ancestors = 76150160)\n"""
86,76368435,"b""I'm seeing an error indicating the target name is `ResolveDependenciesDesignTime` instead of `ResolvePackageDependenciesDesignTime`\n"""
103,76816552,"b""I started down this path but found that even a contrived minimal lock file is over a hundred lines long, so I checked it in, and I'll add some tests that verify correctness of the content\n\n---\n\nIn reply to: [76621967](https://github.com/dotnet/sdk/pull/103#discussion_r76621967) [](ancestors = 76621967)\n"""
103,76817054,"b'The version here is not a range, and does not have a minimal version\n\n---\n\nIn reply to: [76619370](https://github.com/dotnet/sdk/pull/103#discussion_r76619370) [](ancestors = 76619370)\n'"
103,76817851,b'This is combined with another test which verifies that only top level packages have empty parent packages\n\n---\n\nIn reply to: [76621261](https://github.com/dotnet/sdk/pull/103#discussion_r76621261) [](ancestors = 76621261)\n'
103,76826805,"b'I can create the LockFile from a stream and then assign it to this field. Not sure why I need to change the design here when I can achieve the stream design from my tests without modifying this implementation.\n\n---\n\nIn reply to: [76822429](https://github.com/dotnet/sdk/pull/103#discussion_r76822429) [](ancestors = 76822429,76618233)\n'"
103,76826987,b'Updated DesignTime task and tests\n\n---\n\nIn reply to: [76618887](https://github.com/dotnet/sdk/pull/103#discussion_r76618887) [](ancestors = 76618887)\n'
103,76828663,"b""Yes, I'm creating more test scenarios using some combination of json files and text streams\n\n---\n\nIn reply to: [76822093](https://github.com/dotnet/sdk/pull/103#discussion_r76822093) [](ancestors = 76822093,76816552,76621967)\n"""
125,77872386,b'Actually I screwed up the projectLanguage code below. It should be C# (we are using $(Language) from the Language Targets files). Fixing that now.\n\n---\n\nIn reply to: [77827872](https://github.com/dotnet/sdk/pull/125#discussion_r77827872) [](ancestors = 77827872)\n'
125,77872970,b'The analyzer conventions only apply to cs and vb. F# is not supported at this time.\n\n---\n\nIn reply to: [77833261](https://github.com/dotnet/sdk/pull/125#discussion_r77833261) [](ancestors = 77833261)\n'
125,77873260,"b""> isAnalyzer = true; [](start = 20, length = 18)\n\nIf ProjectLanguage is something other than cs or vb, I'm currently returning all `analyzers/**/*.dll` files (leftover from earlier code). But I think I should change this to return nothing instead.\n"""
125,77874911,"b'Hopefully just this file would need to change (and the tests themselves are mostly isolated from format changes). I considered the object model as well, but strings initially seemed to offer the most flexibility and conciseness when produce custom lockfile content for testing different scenarios. In hindsight, the object model could have worked as well.\n\n---\n\nIn reply to: [77834231](https://github.com/dotnet/sdk/pull/125#discussion_r77834231) [](ancestors = 77834231)\n'"
130,77913412,"b'> $(NoWarn);1701 [](start = 12, length = 14)\n\nIssue #107, this arrangement seems to be adding an extra semicolon to the Suppress warnings dialog box. @davkean suggests replacing with `<NoWarn>1701</NoWarn>`\n'"
130,77935995,"b'> <SortOrder>1</SortOrder> [](start = 4, length = 24)\n\nNot sure how we determine Sort Order, but this should be similar to the ConsoleApplication (currently 12). Ditto the two VB templates\n'"
131,78079370,b'Is there a more permanent solution coming later?\n'
133,78258742,"b'> //[Fact] [](start = 7, length = 8)\n\nIs it not possible to use ""Skip"" to turn off tests. i.e. \n`[Fact (Skip=""https://github.com/dotnet/sdk/issues/<bugnumber>"")]`. That way we can track them later.\n'"
147,79428162,b'Good catch. Also fixed other collections that store NuGet Ids to use ordinal ignore case\n'
137,79541719,"b'The task also processes copyToOutput and buildAction on content items. `ContentPreprocessorOutputDirectory` is only needed if you need to do NuGet preprocessing (i.e. provide ppOutputPath metadata), otherwise it can be safely left out.\n\n---\n\nIn reply to: [78600186](https://github.com/dotnet/sdk/pull/137#discussion_r78600186) [](ancestors = 78600186)\n'"
137,79542170,"b'ResolvedPath only exists on FileDefinitions, while the task item we use later is a FileDependency. Hence the need to produce this lookup table. \n\nOverall this design is because there are relatively few file definitions, mapped to potentially very many filedependencies. Hence we want filedeps to only contain information unique to that dependency. Still, we could get rid of all this logic (and the lookup logic in the targets file) by putting resolved paths in filedependencies as well. We need to do some performance experimentation to determine which approach is more performant.\n\n---\n\nIn reply to: [78606738](https://github.com/dotnet/sdk/pull/137#discussion_r78606738) [](ancestors = 78606738)\n'"
137,79543857,"b""The assumption is that the `AssetPreprocessor` passed in through the constructor already has preprocessorValues (which is the case in our tests). I suppose looking at this code again that we don't have to do all this processing if `AssetPreprocessor` is not null, and I can move this check around the whole block. The alternative is to update `IContentAssetPreprocessor` with a `SetPreprocessorValues` API method instead of using the constructor. That would be a bit more testable (which is the main reason I created  `IContentAssetPreprocessor` in the first place. I'll follow up on that.\n\n---\n\nIn reply to: [78600906](https://github.com/dotnet/sdk/pull/137#discussion_r78600906) [](ancestors = 78600906)\n"""
137,79545367,"b""Including items with no output path would be a change in logic from the old nuget task. I'll add a warning but I don't necessarily see any problem with including these items if a scenario comes up where this should be the case\n\n---\n\nIn reply to: [78608243](https://github.com/dotnet/sdk/pull/137#discussion_r78608243) [](ancestors = 78608243)\n"""
137,79546402,"b""The code matches the logic in the old nuget task. The comment above indicates that one can use the '_._' placeholder with a language selection to opt some languages out of the 'any' files. In other words we are not treating 'any' as ALL. I don't know which of these two approaches is strictly correct, but I can follow up with the NuGet team.\n\n---\n\nIn reply to: [78607244](https://github.com/dotnet/sdk/pull/137#discussion_r78607244) [](ancestors = 78607244)\n"""
137,79546663,"b'In ProduceContentAssets, the relativeOutputPath includes package name and version.\n\n---\n\nIn reply to: [78605692](https://github.com/dotnet/sdk/pull/137#discussion_r78605692) [](ancestors = 78605692)\n'"
137,79632312,"b'> $(IntermediateOutputPath)\\NuGet [](start = 42, length = 31)\n\n@srivatsn is there a new property for intermediate output path that is TFM specific? #Resolved\n'"
202,82312965,"b""Building this swixproj file relies on a Microbuild plugin (Microbuild.Plugins.SwixBuild). The last I recall, this couldn't easily be used in a CI build, though the team was working on a solution to this. Is this still the case @basoundr @tannergooding ?\n"""
244,82906526,"b'Is the condition above redundant? i.e. if NuGetPreprocessorValue is not defined, this statement is a noop.\n'"
398,88551840,"b'> InitialTargets [](start = 89, length = 14)\n\nSo you are replacing the `InitialTargets` here with the `BeforeTargets` below. Are they equivalent?\n'"
478,91873690,"b'`BeforeTargets=""AssignProjectConfiguration""` ensures `ProjectReference` elements are created before they are processed into ResolvedProjectReferences. The alternative is to add this to the list `ResolvePackageDependenciesForBuildDependsOn`, but that would result in `IncludeTransitiveProjectReferences` being called too late. \r\n\r\nChoosing this approach means we have to copy the condition from `ResolvePackageDependenciesForBuild` to ensure we are not calling `RunResolvePackageDependencies` at inappropriate times. (E.g. Without this condition, the sdk build fails on building [xUnit.net.csproj](https://github.com/dotnet/sdk/blob/master/src/Dependencies/xUnit.net/xUnit.net.csproj)\r\n\r\nAnother alternative is to bypass ResolveProjectReferences and generate the `_ResolvedProjectReferencePaths` element directly, as is done in [Microsoft.NuGet.targets](https://github.com/NuGet/NuGet.BuildTasks/blob/dev/src/Microsoft.NuGet.Build.Tasks/Microsoft.NuGet.targets#L193). This currently does not work because of a bug calculating resolved paths (https://github.com/dotnet/sdk/issues/479).'"
506,92767894,"b""I agree that as I was implementing this, it became clear that currently only diagnostics that surface in the dependency node really need this infrastructure. Other diagnostics can just Log.LogError|Warning.\r\n\r\nOn the other hand, a collection of named Diagnostic items that can be manipulated downstream could be useful for as yet unimagined purposes. I'm also wondering if there is any distinction between the coded diagnostics listed in [NuGet](https://github.com/dotnet/cli/blob/d7b0190bd4ce49121a7cd5bdc0423ab85229a085/src/Microsoft.DotNet.ProjectModel/ErrorCodes.NuGet.cs)/[CLI](https://github.com/dotnet/cli/blob/d7b0190bd4ce49121a7cd5bdc0423ab85229a085/src/Microsoft.DotNet.ProjectModel/ErrorCodes.DotNet.cs), and errors/warnings we already emit in our tasks. The former seems dedicated to helping users diagnose why things may not be working as expected, while the latter are more general failures such as a null reference or some other unexpected value. \r\n\r\nI'm open to implementing it either way. Perhaps a compromise is to have an additional property `EmitsDependencyDiagnostic` that is limited to the subset of targets that emit relevant diagnostics."""
489,93144031,"b'Is this for the case where the SDK is not present? I would have expected `Project Sdk=""Microsoft.NET.Sdk""` to be sufficient here, and it appears to work on all my test machines.'"
489,93147227,"b""I've filed https://github.com/dotnet/sdk/issues/536 to investigate when the MSBuild issue is fixed"""
478,93161685,"b""It appears the two flag properties are redundant, and may have been added separately. I've removed `EnableResolvePackageDependencies` and also simplified the ordering as you suggested to avoid repeating the condition."""
465,93980671,"b'If I recall, at the time `dotnet build3` did not build the templates project successfully because of the version of MSBuild. If it is building now, then this change should be OK.'"
608,95297238,b'The assemblies in the compile section are raised to MSBuild and eventually added to the `Reference` items in [ResolveLockFileReferences](https://github.com/dotnet/sdk/blob/f07cdf44feb2328ccb3c5e9f83f041c0a2542961/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.PackageDependencyResolution.targets#L308). Could there be a problem (unrelated to this PR) with a project being added through ProjectReferences and its output simultaneously added to References?'
626,95698194,"b'>Microsoft.NET.Build.Tasks.dll [](start = 21, length = 29)\r\n\r\nSo did the location of this DLL move, or is it in both places? Did you check that it is still packaged properly etc.'"
624,95909702,b'Can required inputs be null? Change to \r\n```csharp\r\n(Items ?? Enumerable<ITaskItem>.Empty())\r\n```'
675,96703591,"b'>i => i.ItemSpec [](start = 47, length = 15)\r\n\r\nFor non-windows platforms, I think we need to handle ""duplicate"" items with different casing (e.g. Class1.cs and class1.cs) by making this `Items.GroupBy(i => i.ItemSpec, StringComparer.OrdinalIgnoreCase)`'"
675,96707917,"b'Actually I changed my mind. If we try to make this case insensitive, then even the implicit glob `**/*.cs` would fail if a user had both Class1.cs and class1.cs on Linux. \r\n\r\nI think the implication of leaving it case sensitive is that on Windows, a user could still get a duplicate sources error from compiler even with this fix. (E.g. if they have implicit `**/*.cs`, `<Compile Include=""Class1.cs"" />` and the file is actually named `class1.cs`)'"
659,96771335,"b'>Update [](start = 10, length = 6)\r\n\r\nWhat does `Update` mean here?'"
659,96771938,b'Can we make `Version` an attribute for some of these package references?'
870,101236263,"b""Note this test passes even without this fix because it uses dotnet.exe which already excludes Microsoft.NuGet.targets. But this seems like a good scenario to ensure we don't regress."""
870,101403877,"b'`build -FullMSBuild` did not fail. \r\n\r\nDoes ""Full MSBuild"" mean the sdk and targets under `%VSINSTALLDIR%` or under `.dotnet_cli`. I assume its under `.dotnet_cli`. In this case, these are the same ""ImportAfter"" targets used by the CLI i.e. they have already removed Microsoft.NuGet.targets (see `.dotnet_cli\\sdk\\1.0.0-rc4-004771\\15.0\\Microsoft.Common.targets\\ImportAfter\\Microsoft.NuGet.ImportAfter.targets`)\r\n\r\nI inspected the project.assets.json generated for the test under `bin\\Debug\\Tests`, and it only contains one (ridless) targets entry, so the test is correctly passing, but would fail if we were using the MSBuild under `%VSINSTALLDIR%`.'"
870,101417871,"b""OK figured it out. For some reason, the multiple rid problem only repros on apps targeting `netcoreapp1.0`, not on libraries targeting `netstandard1.5`. I guess some combination of the conditions in Microsoft.NuGet.targets is only affecting these projects, but its not obvious which ones. (To confirm, New NetStandard Library -> Add System.ValueTuple, does not produce any warnings.)\r\n\r\nI've moved the test to `GivenThatWeWantToBuildANetCoreApp` and modified it to check values from the `HelloWorld` app. Now `build` passes, but `build -FullMSBuild` fails. I'll push this change to confirm Jenkins fails, then disable the test until we update Jenkins."""
934,104081739,b'What is the new equivalent of these Removes?'
1149,113310902,"b'>items[currentItemId] [](start = 34, length = 20)\r\n\r\nSo the objects in `items` are never added to DependenciesWorld? I guess this is unnecessary extra work in Single-targeting projects(?) -- a (perhaps minor) performance enhancement may be to do this only on cross-targetting projects. #Resolved'"
1228,117362437,"b'This should be true by default. I set it to false because it is failing many tests until we get an updated CLI (with updated NuGet) into the sdk. Also NuGet wants to consume this property to determine whether to emit the diagnostics to the error list/command line themselves (i.e. only if it is false or not defined). So we may need to set it to true in a different target file as well, if this one is not appropriate.'"
1262,119246962,"b""IIRC there often isn't a discernable difference between the values coming from the RIDfull and RIDless targets, which is why I wrote the test this way. It is just some packages that could cause this problem (e.g the one in https://github.com/NuGet/Home/issues/4207, and even that one won't repro anymore because NuGet fixed the underlying bug in https://github.com/NuGet/NuGet.Client/pull/1103). But if you can construct a perverse package that contains bogus entries in the RIDfull targets after restore, then Option 1 is a good replacement for this test.\r\n\r\nIt is probably OK to temporarily skip the test since [my fix](https://github.com/dotnet/sdk/pull/836) and the [NuGet fix](https://github.com/NuGet/NuGet.Client/pull/1103) make this  scenario very unlikely."""
1330,121240109,"b'>.FirstOrDefault(); [](start = 20, length = 18)\r\n\r\nThe first two conditions of the ""Where"", as well as packageName and packageVersion, can be lifted out of the for-loop, so you are not recomputing this information for each facade (since presumable they are all part of one package). \r\nAlso the string comparisons should be Ordinal-Ignore-Case'"
1330,121240357,"b'>Path.GetFullPath(facade.ItemSpec); [](start = 33, length = 34)\r\n\r\nWhat does ItemSpec look like? Does Path.GetFullPath always work, or do you need to use a resolver (e.g. see ResolvePackagePath and ResolveFilePath at the end of this class)'"
1330,121241205,"b'>References=""@(Reference)"" [](start = 6, length = 25)\r\n\r\nAre we using this approach because the list of references is always strictly smaller than the list of DLLs listed in the assets file under NETStandard.Library? (Otherwise we could just mark all those assemblies as dependencies and avoid this parameter). Also, what ordering requirement guarantees that ResolvePackageDependencies is always called after the target the sets the Netstandard library references?'"
1330,122071908,"b'>""NETStandard.Library"" [](start = 35, length = 21)\r\n\r\nString comparison ordinal ignore case for robustness'"
1330,122072959,"b'>isImplicitlyDefined: false [](start = 22, length = 26)\r\n\r\nShould we regard these assemblies as implicitly defined?'"
1330,122080840,"b'Good question! I think the intent is that references that are not directly in the project file are implicit. Looking through the dependency tree code, I think the relevant code block is [DependencyModel.cs:L41-44](https://github.com/dotnet/project-system/blob/b82639ebeff7912b950ac6e85deaf99069eb27dd/src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Models/DependencyModel.cs#L41-L44): implicit nodes do not have a ""Remove"" action in the context menu.\r\n\r\n---\r\nIn reply to: [122074507](https://github.com/dotnet/sdk/pull/1330#discussion_r122074507) [](ancestors = 122074507)'"
889,105453971,"b""I have Xamarin Android installed on Linux, so I hope that the XA TFMs aren't tied to any OS."""
889,105455215,"b""I'd base these: https://github.com/onovotny/MSBuildSdkExtras/blob/be5b6c9c6c1bfe39bf505abcf1a83083a4d6be9f/src/build/netstandard1.0/MSBuildSdkExtras.Common.targets#L8 on the built in properties in the core targets/props."""
889,105455646,b'C# and VB define something like I have defined here i the support files for my language:\r\n```\r\n<Language>dylan.NET</Language>\r\n<DefaultLanguageSourceExtension>.dyl</DefaultLanguageSourceExtension>\r\n\t\t\r\n <_SdkLanguageName>dylan.NET</_SdkLanguageName>\r\n <_SdkLangExtention>.dyl</_SdkLangExtention>\r\n```'
889,105456962,b'They used to be there unless they were taken out before RTM.'
4210,370304888,"b""Oops I didn't realize what you were doing here.  \r\n\r\nCouple points:\r\n- Buildpool queues only are for, well, builds..  If you're concerned about perf (especially with internal), you can and should move to these.\r\n- While there indeed are server-based non-build Helix SKUs,  I don't think we've stood up any with VS on them because that's not something we've intended to do."""
14047,512977936,"b""This won't work"""
14433,518442111,"b'I definitely caused this, will address via https://github.com/dotnet/core-eng/issues/11362 '"
3,73176922,"b'How many ""tasks"" libraries do we expect to have in this repo?  This name seems very specific, and not many tasks will be able to live in this assembly.\n\nFor example, my next task is to add the tasks for ""Generate .deps.json"" and ""Generate .runtimeconfig.json"" files.  I don\'t think they would belong in an assembly named `Microsoft.PackageDependencyResolution.Tasks`.\n'"
3,73177035,"b'I think this should target some sort of ""netstandard"" TFM.  Preferrably netstandard1.3 or less.\n'"
3,73177194,"b""Along with targeting netstandard, we can't use DebugType=full on non-Windows platforms.\n"""
3,73178165,"b'I think these comments can be removed, as they add no value to this .csproj.\n'"
3,73196091,"b'After discussing with @davkean this morning, if we put all our tasks into a single library, we are going to need to multi-target the library.  My task is currently dependent on NuGet libraries and Microsoft.Extensions.DependencyModel.\n\nNuGet targets net45 and netstandard1.3.\nDependencyModel targets net451 and netstandard1.6.\n\nSo I think we will need to target net451 (or move DependencyModel down to net45) and netstandard1.6.\n\n@natidea - once this change is in, I\'ll make the ""multi-targeting"" changes necessary. ex. adding 2 .csproj files, one for each target.\n'"
3,73229796,b'Check out https://github.com/eerhardt/core-sdk/commit/271ebd17767d2e58fe774dd3b7a6719008e040de.  If you use that project will your task work?\n'
5,73247931,b'Not sure.  It needs to get packaged into the .nupkg (which is my next step).  That will get figured out then.\n'
5,73254654,"b""Doesn't appear to on my box.  It failed when this wasn't supplied.  It passes now.\n"""
5,73254788,b'Channel means nothing now when you pass in a `-Version`\n'
5,73272087,b'The `:BuildFailed` still gets invoked above.  The other stuff is probably not needed anymore.\n'
4,73330930,"b""I changed this in my PR last night. This should be \n'build.cmd -Configuration $config'\n"""
4,73331118,"b""Why do we need non-PR jobs?  Don't we only need Jenkins to run PR tests, and then VSO/Microbuild will run our official build after code is checked in?\n"""
4,73390106,"b""In the 'dotnet/cli' repo, we put build status tags in our README that point to our official VSO builds - which makes more sense to me.  I'd rather know if our official build is passing and publishing assets correctly than a Jenkins run.\n\nSee https://github.com/dotnet/cli#build-status for the CLI badges.\n\nThoughts?\n"""
7,73434516,b'This makes me nervous that our official product assembly needs to depend on MicroBuild.  Is this how other projects work in Roslyn?\n'
8,73447489,b'> Target and Props need copyright headers. Mine also include the standard warnings about not modifying them\n\n@natidea can you shoot me an example of how it should look that I can copy?\n'
8,73451958,"b""> Did you figure out if this instance lives beyond more than one task?\n\nThis cache is per AppDomain (process for .net core).  So if two tasks are run in the same AppDomain, they will share the cache.  Thus the lock file only needs to be loaded/parsed a single time.\n\nThinking more about this, if `msbuild.exe` doesn't unload the process/app domain, we could get cached, out of date data on the next build.  Maybe we should add a timestamp to the cache as well? We could check the LastWriteTime on the lock file before re-using the cached object. If the LastWriteTime matches the LastWriteTime in the cache, then it can be safely re-used.\n"""
8,73452058,"b'Eventually, I think it should be the NuGet team that defines this property.  And all the places that need to read the lock file use the property defined by the NuGet .props file.\n\n/cc @emgarten to get his thoughts.\n'"
8,73452173,"b'In the current project.json-based project system, the lock file is always named `project.lock.json`.  See https://github.com/dotnet/cli/blob/04f40f906dce2678d80fb9787e68de76ee6bf57e/src/Microsoft.DotNet.ProjectModel/Graph/LockFile.cs#L13\n'"
7,73521408,"b'But isn\'t the difference that there is just a random ""toolset"" project that depends on `MicroBuild.Core`, and here we are making our actual shipping assembly\'s project depend on `MicroBuild.Core`?  The equivalent in my mind would be if https://github.com/dotnet/roslyn-project-system/tree/master/src/Microsoft.VisualStudio.ProjectSystem.Managed had a direct dependency on `MicroBuild.Core`.\n'"
8,73543098,"b""So @rainersigwald just told me about this feature in msbuild:\n\nTurns out there's engine helpers for sharing state between task invocations: https://github.com/rainersigwald/msbuild/blob/b0b274596e62f1e652ace0ae7417d2872cf6326e/src/Framework/IBuildEngine4.cs#L32-L88\n\nI'm going to convert this to use that feature instead.\n"""
9,73582799,"b'Build calls the ""Build"" target.\n\nRebuild calls the ""Rebuild"" target.\n\nThe ""Rebuild"" target calls ""Clean;Build"".\n\n""Clean"" deletes the existing assets.\n\nSo they don\'t do the same things.  Rebuild ensures you don\'t do incremental build (because it deleted all the built assets).\n'"
9,73582954,"b'It will, when that gets set up.  We can only do so many steps at once.\n'"
9,73583021,"b'Also, this version gets overriden by the build since `--version` is passed into `nuget pack`.\n'"
9,73583211,"b""It works because all of NuGet's dependencies either come from the shared framework or on disk directly next to it.\n\nI can add it, for completeness.\n"""
8,73596038,"b'It does.  The point of this is to declare VersionSuffix as a property, and give it a default value.  That way the next line doesn\'t materialize the property ""out of thin air"". This gives a little more structure to what properties are available, because how else are you going to know that $(VersionSuffix) can be set?\n'"
8,73596432,"b""The build fails without setting this property.  I'm not sure if it is because our .sln file is configured incorrectly or not.\n\nFeel free to fix it.\n"""
8,73596781,"b""Well, I'm a dev.  And I went looking through the CSharp .targets and that's how I found about about the $(TargetExt) property. I'm not sure which docs I should have been looking in to find out about it.\n\nIf this is not a conventional pattern, feel free to remove it.\n"""
8,73597450,"b'This is the error I get when I don\'t set this property:\n\n```\nF:\\core-sdk\\core-sdk.sln.metaproj : error MSB4126: The specified solution configuration ""Debug|x64"" is invalid. Please specify a valid solution configuration using the Configuration and Platform properties (e.g. MSBuild.exe Solution.sln /p:Configuration=Debug /p:Platform=""Any CPU"") or leave those properties blank to use the default solution configuration. [F:\\core-sdk\\core-sdk.sln]\n```\n'"
8,73597896,"b""Looks like it is a problem with `dotnet build3`.  See https://github.com/dotnet/cli/blob/feature/msbuild/src/dotnet/commands/dotnet-build3/MSBuildForwardingApp.cs#L41\n\nIt is explicitly setting the current architecture as the `Platform`.  That's why this is failing.\n"""
9,73598760,"b'According to https://msdn.microsoft.com/en-us/library/ms164309.aspx\n\n```\nMSBuildThisFileDirectory\nThe directory portion of MSBuildThisFileFullPath.\nInclude the final backslash in the path.\n```\n\nFrom my understanding, it is a general practice to always include a trailing directory separator on MSBuild properties that represent directories.\n'"
9,73609230,"b""I've added a `Directory.Build.props` file that contains common properties.\n"""
9,73609403,"b""I've made this use `$version$` because this value should never be used.  It must always be set by the call to create the nuget package.\n\nI also set the current version to be `1.0.0-alpha-000001`.  The $(VersionSuffix) can be overwritten in our official build to use the appropriate build number.\n"""
9,73609417,b'Fixed.\n'
7,73627024,"b'Not sure we need this VB stuff, so we?\n'"
7,73627051,b'Or C++ or portable.\n'
7,73627111,b'Can I still open the solution using VS 2015 update 3?\n'
7,73627169,b'FYI I moved this settings file into the root as Directory.Build.props.\n'
8,73741232,"b""I think the alternative here is that the .csproj (or the Sdk .props/.targets) declares its default.  And the tool running MSBuild doesn't specify it.\n"""
7,73746222,"b'I think it makes sense to put ""global"" properties that all projects need in a single .props file in the root.  This is how all the corefx/coreclr/buildtools repos do it. They have a ""dir.props"" in the root.  This gives the folder hierarchy structure that these are properties for all the projects under this folder.\n\nBut yes, for ""more specific"" stuff that would overwhelm the root directory, putting them under `build\\Targets` makes sense.\n'"
7,73766565,"b'I agree not everything belongs in the repo root.  But some things make sense there.  Having a hierarchy structure of things that apply at that level is a pretty normal pattern.  web.config uses it.  NuGet.config uses it. .gitignore uses it.  If there are things that apply globally across everything in the repo, it makes sense to put that in the root of the repo.\n'"
10,73918013,"b""Should this be done here or in [https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.DotNet.Core.Build.Tasks/Microsoft.DotNet.Core.Sdk.props#L56-L57](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.DotNet.Core.Build.Tasks/Microsoft.DotNet.Core.Sdk.props#L56-L57)?  I'm not certain which is better.  My gut is to turn it off in the .props.  That way if a user wants to turn it back on, they easily can in their .csproj. #Resolved\n"""
10,73918138,"b""Just an FYI - at some point this is moving into the 'obj' folder.  Not sure when.  The NuGet team would know. #Resolved\n"""
10,73919008,b'We should get rid of the same property [https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.DotNet.Core.Build.Tasks/Microsoft.DotNet.Core.Sdk.targets#L41](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.DotNet.Core.Build.Tasks/Microsoft.DotNet.Core.Sdk.targets#L41) and combine the two into a single place. #Resolved\n'
10,73919433,b'FYI - having an empty string RID is completely valid.  This is the case for libraries and for portable apps.  The only time we actually need a RID is when we are publishing a standalone/self-contained app. #Resolved\n'
10,73919858,"b""See [https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.DotNet.Core.Build.Tasks/Microsoft.DotNet.Core.Sdk.targets#L14-L15](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.DotNet.Core.Build.Tasks/Microsoft.DotNet.Core.Sdk.targets#L14-L15).  The tasks dll won't be right next to the .targets file. #Resolved\n"""
10,73920261,"b'When the RID is empty, there is no `/`.  It should just be `$(NuGetTargetMoniker)` in that case. #Resolved\n'"
10,73920321,"b""You probably want to put '$(NuGetTargetMoniker)/$(NuGetRuntimeIdentifier)' into a common property so it can be reused below. #Resolved\n"""
10,73923197,"b""Do we really want this?  I thought we turn ResolveNuGetPackageAssets off, so why bother?  Wouldn't this just be getting in the way if some other target was trying to add these references? #Resolved\n"""
10,73924082,"b'Why is this named ""FullFramework""?  It seems like it is used in Publish.\n'"
10,73924724,"b""Why are we clearing the Item?  What if some other Target was adding to this Item before this Target?  Wouldn't we want to also include what someone else tried to include? #Resolved\n"""
10,73925217,"b'I said this in the https://github.com/dotnet/sdk/issues/24 issue, but the correct way to get the path for a package is to use `FallbackPackagePathResolver`.\n\nsee [https://github.com/dotnet/cli/blob/feature/msbuild/src/Microsoft.DotNet.ProjectModel/Resolution/PackageDependencyProvider.cs#L19](https://github.com/dotnet/cli/blob/feature/msbuild/src/Microsoft.DotNet.ProjectModel/Resolution/PackageDependencyProvider.cs#L19) #Resolved\n'"
10,73925408,"b'Do we want better exception messages than this?  Also, do we want/need the messages to be localized in a .resx? #Resolved\n'"
10,73925569,"b""I think we should use the [https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.DotNet.Core.Build.Tasks/LockFileCache.cs](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.DotNet.Core.Build.Tasks/LockFileCache.cs) class here, so the LockFile doesn't need to be loaded/parsed so often. #Resolved\n"""
10,73926529,"b'Especially because with the latest NuGet, they ""tolower"" all the package paths, which causes problems on Unix.\n\n---\n\nIn reply to: [73925217](https://github.com/dotnet/sdk/pull/10#discussion_r73925217) [](ancestors = 73925217)\n'"
10,73926701,b'Where does this dictionary ever get populated?  I only see it being called with a `TryGetValue`. #Resolved\n'
10,73927004,"b'Not sure if `OrdinalIgnoreCase` is the right thing here because Unix file systems can be case sensitive.  Which means you could have 2 project references, one to ""MyReference"" and another to ""myreference"", and they would be different paths. #Resolved\n'"
10,73927331,"b""With the `FallbackPackagePathResolver`, we don't need to do any of this.  We should let NuGet decide where to look.  We shouldn't be duplicating the logic. #Resolved\n"""
10,73927660,b'`ToString` or `ToNormalizedString`?\n'
10,73927930,"b'Should use `Ordinal`, since StartsWith by default does a locale based comparison, which is slower than Ordinal comparisons. #Resolved\n'"
10,73928407,b'Should we give a better error here? #Resolved\n'
29,74129057,b'Fixed.\n'
29,74129295,"b'If that ever happened, the test will fail, blocking that change.\n'"
29,74129485,"b""This is the way it is in https://github.com/dotnet/roslyn-project-system/blob/master/build/build.proj#L97.  And as you say, it is the recommended way.  Doesn't seem like it would be a good idea to diverge here.\n"""
7,74148991,"b""One thing to be careful about here is that nuget versions can't have a number as the first character after the `-`.  So you always need some sort of alpha letter to start the prerelease ($(VersionSuffix)) part.  Typically things like `alpha`, `beta`, `preview`, etc. These prerelease prefixes are usually checked into the repo, like the major, minor and patch numbers are.\n"""
7,74149186,"b""Won't this sign test assemblies as well?  Do we want that?\n"""
7,74150763,"b""https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.DotNet.Core.Build.Tasks.UnitTests/Microsoft.DotNet.Core.Build.Tasks.UnitTests.csproj doesn't appear to have this 'non-shipping' mark.\n"""
10,74244863,b'This file should be included in the NuGet package.  It is really easy to add to the nuspec:  [https://github.com/dotnet/sdk/blob/master/build/Nuget/Microsoft.DotNet.Core.Sdk.nuspec#L38](https://github.com/dotnet/sdk/blob/master/build/Nuget/Microsoft.DotNet.Core.Sdk.nuspec#L38)\n'
10,74245139,b'Do we need to continue caring about .xproj?  I would think that project type goes away. #Resolved\n'
34,74306773,b'I think you can remove the TODO comment above.  Right?\n'
35,74326038,"b'We can do that in another PR.  There are TONS of things to copy.  As you can probably tell, I like to split complicated problems into smaller, more manageable problems.  It makes it easier to handle.\n'"
35,74326986,"b""This is how symbols get copied during the build. I'm just doing what they do.\n\nSee https://github.com/Microsoft/msbuild/blob/9d79ad1f474e7bdcc766b9f7abf6eee5db442060/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L351-L355\n"""
35,74327612,"b'I was thinking the same thing.  But noticed that the `CopyFilesToOutputDirectory` target that runs during Build does not do it that way. https://github.com/Microsoft/msbuild/blob/9d79ad1f474e7bdcc766b9f7abf6eee5db442060/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L3780-L3792\n\nMaybe someone from @dotnet/project-system or @rainersigwald @AndyGerlicher @jeffkl has insight into why Build does it this way?  Or if it is just ""legacy"", and it is better to do it in a single Copy, \n'"
35,74330869,"b'Ok, unless someone comes in with a great reason to implement it like this, I will switch over to building up an Item for all the things that should be copied to the PublishDir, and then only invoke a single Copy.\n'"
37,74350656,"b""What's this for?\n"""
39,74355083,"b'> Do we want to introduce a property that covers a property from VSO? \n\nThis doesn\'t really ""cover"" the VSO property.  It just sets the property to a default value if no one else (i.e. VSO) has set it.\n\n> I\'d think we\'d probably want to set our variable like BuildNumber\n\nHow would that look?  Seems like it would be more complicated for less value.\n\n```\n<BuildNumber>$(BUILD_BUILDNUMBER)</BuildNumber>\n<BuildNumber Condition=""\'$(BuildNumber )\' == \'\'"">0000001</BuildNumber>\n```\n\nHow would we justify having 2 properties named almost exactly the same, and meaning the same thing?\n\n> Also, do we want to change VSO to be yymmddn? And with that, change this number to be 0000001 so it\'s the same length?\n\nGood call.  I\'ll update the 000001 to match the same length/format as the current build number format.  I think the current VSO build number format is fine.  Do you think we should change it?\n'"
39,74355860,"b'Ok, fixed.  PTAL.\n'"
35,74451908,"b'Following @piotrpMSFT\'s comment below, I think there will be a single ""CopyFilesToPublishDirectory"" target.  But it will depend on multiple targets that ""gather"" all the things that need to be copied.\n'"
37,74466605,b'Do we need that?  Seems unnecessary.\n'
37,74483090,b'The way tests are invoked today is that all the test assemblies are invoked by 1 invocation to xunit.  Thus there will only ever be one test results file.\n\nSee https://github.com/dotnet/sdk/blob/master/build/build.proj#L87\n\nThis is the way roslyn-project-system invokes tests as well.\n/cc @davkean @333fred \n'
35,74485945,"b'> Is this publish for portable only? \n\nNo\n\n> Even so, will the P2P dependencies be in the IntermediateAssembly item group above? \n\nNo. IntermediateAssembly is only for the current project.\n\n> If so, the comment is kind of misleading.\n\nThe MSBuild target is for the current project only.  How would you suggest fixing the comment?\n'"
37,74488504,"b""I don't think we need every platform in this repo. I think that puts an unnecessary strain on our resources.\n\nI think adding OSX and one Linux based platform would be enough.\n"""
37,74488625,b'/cc @dotnet/project-system \n'
35,74493048,"b'Also /cc @natidea, since he is following this same pattern in the new Microsoft.PackageDependencyResolution.targets file.\n\nWhat is the guidance here?\n'"
37,74495799,"b""I can't see the future.  When it changes, we can easily change this.\n"""
37,74496319,"b""Roslyn doesn't test on all 10 platforms.  https://github.com/dotnet/roslyn#linuxmac---unit-tests\n\nMaybe the question to answer is - What is the differing behavior in this repo between Ubuntu 14 and Ubuntu 16 (and insert other Linux platforms) that needs separate testing?  All the code in this repo is either managed or MSBuild targets, which are agnostic of the different Linux distros.\n"""
35,74506485,b'> Where will the code that copies the package dependencies for stand alone apps live?\n> And the code that copies the P2P dependencies for both? Will it be simply the publish target running on the P2P projects?\n\nThat will all leave here eventually.  It is Not Yet Implemented at the moment.  Trying to get the initial structure of Publish in.\n'
35,74506647,"b""> Will it be simply the publish target running on the P2P projects?\n\nIt can't be there, because the output directory for the P2P projects will be different than the output of this project.  So the current project will need to get all the P2P projects and copy their assets as well.\n"""
40,74516426,"b'No need for `Windows_2016`, since we only use `Windows_NT`\n'"
44,74760202,"b'Do we consider this repo to be a ""Roslyn"" repo?  The name of this ruleset doesn\'t seem correct in this repo.\n'"
44,74760490,b'Maybe we should generate this version string into this file?  We need the version number here to be the same as our current build number.\n'
44,74760667,"b'It is a little confusing to me why this file is called ""NuGet.json"" #Resolved\n'"
44,74762015,b'This file looks different than the template we have for the CLI (note we just changed it not too long ago).\n\n[https://github.com/dotnet/cli/pull/3922](https://github.com/dotnet/cli/pull/3922)\n\nSee the discussion here:\n[https://github.com/dotnet/cli/issues/3531](https://github.com/dotnet/cli/issues/3531) #Resolved\n'
44,74762177,b'I think we want some of these properties to go into the .csproj itself.\n\n/cc @brthor @davkean\n'
44,74762362,"b""This should be a full URL.  #292 doesn't exist in our repo (yet) #Resolved\n"""
47,74855689,"b""This change sort of conflicts with my latest PR [https://github.com/dotnet/sdk/pull/46](https://github.com/dotnet/sdk/pull/46).  Basically, the output assembly is getting placed into the PackagesLayout folder during build of the tasks assembly.  That's the assembly that needs to be signed.\n\nWhat do you think about hooking the signing tool up during the Build of the tasks assembly, instead of in an outside project?\n"""
47,74855779,"b'Instead of ""Settings.Targets"" is it more correct to call this a "".props"" file?\n'"
47,74855943,b'`RunningInMicroBuild` ?  Is that the correct name?  I thought we were just using plain VSO.\n'
47,74856312,b'Are we using Microbuild or plain VSO?\n'
47,74856449,"b""Is there a way to get these log files in Jenkins and VSO?  I'm concerned that if we only get minimal build output to the console, debugging build failures in Jenkins is going to be hard.\n"""
47,74856540,"b'I think you should use $RepoRoot here, so the script can be run from anywhere.\n'"
47,74856593,b'Are we concerned that our Windows build looks a lot different than our Unix build?\n\n/cc @livarcocc\n\n---\n\nIn reply to: [74856449](https://github.com/dotnet/sdk/pull/47#discussion_r74856449) [](ancestors = 74856449)\n'
48,74856698,"b'Shouldn\'t need ""runtimes"" anymore.\n'"
48,74856869,b'Seems unnecessary.\n'
48,74857016,b'Seems like this should use the RepoInfo.RepoRoot property\n'
48,74857188,"b""Should PublishCommand (and other TestCommands) default to Stage0MSBuild if one isn't supplied?\n"""
48,74857276,"b""(nit) spelling 'erro'\n"""
48,74857439,b'How much of a 1:1 copy were these files?  \n'
48,74857484,"b'Needs $Configuration instead of ""Debug""\n'"
48,74857497,b'(nit) spelling `Worl`\n'
47,74946908,"b'The difference is that .targets files contain logic while .props files contain only properties.  It helps people understand the intention of the file, just like any other file extension.\n\nSee\nhttp://stackoverflow.com/questions/2007689/is-there-a-standard-file-extension-for-msbuild-files\n\nAnd see page 23 of https://microsoft.sharepoint.com/sites/mslibrary/books/Microsoft%20Press/9780735645240.pdf\n\n```\n When you create an MSBuild file, you should follow these\nconventions for specifying the extension of the file:\n- .proj A project file\n- .targets A file that contains shared targets, which are imported into other files\n- .props Default settings for a build process\n- .tasks A file that contains UsingTask declarations\n```\n'"
47,74947870,"b'The tasks assembly is located in 2 places in `$(OutDir)PackagesLayoutDir`, once in netcoreapp1.0 and once in net46.  I\'d rather we sign the file once, and then place/copy the signed file into the packages layout directory.  So I think I\'ll move the ""layout"" code out of the Tasks.csproj and instead into the NuGet.proj file, which solves all these problems.\n'"
48,74954209,b'Can we use where the test is executing from? Currently the tests are running in `bin\\$Configuration\\Tests`.\n'
46,74967232,"b'Good call.  I could have if I continued this same approach.  But in my latest commit, I moved all this logic out of this project and into the NuGet project.\n'"
48,74995851,b'Would it be easier to just say `new DirectoryInfo(GetBaseDirectory()).Parent.Name` ?\n'
50,74997718,"b""Don't you need to change this line?\n"""
48,74998558,b'This message seems out of date now.\n'
47,74999114,b'Why would we use 2 conventions?  `.props` and `settings.targets` to mean the same thing?\n'
47,75008934,"b""We should ensure that `BuildNuGetPackages` is dependent on this target, or else we will build the nuget packages in parallel, and then we won't get our signed assemblies in the nuget packages.\n"""
47,75011593,"b""I don't think we need to list these anymore.  These assemblies will only be in the `PackagesLayout` folder with my latest change.  They won't be directly in the $(OutDir).\n"""
54,75021646,"b'build.ps1 does pull a remote script.  See:\n\nhttps://github.com/dotnet/sdk/blob/master/build.ps1#L39-L43\n\n```\n# Install a stage 0\n$DOTNET_INSTALL_SCRIPT_URL=""https://raw.githubusercontent.com/dotnet/cli/feature/msbuild/scripts/obtain/dotnet-install.ps1""\nInvoke-WebRequest $DOTNET_INSTALL_SCRIPT_URL -OutFile ""$env:DOTNET_INSTALL_DIR\\dotnet-install.ps1""\n\n& ""$env:DOTNET_INSTALL_DIR\\dotnet-install.ps1"" -Version $DotnetCLIVersion -Verbose\n```\n'"
44,75195140,"b""What we've done in the CLI is to call our template file `project.json.template`.\n"""
44,75195681,"b'The thing is, this is going to get out of date very fast, and we will always need to update it in our repo. And dogfooders will always have to update it since it will always be out of date for them. Anytime we update the version number it means we will need to spin a new build.  And spinning a new build will create a new version number. Thus, making the number we checked in, old.\n\nBut if we generate the version string based on the current build number, then we will never have to update it.\n'"
44,75201870,"b'```\nusing System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(""Hello World!"");\n    }\n}\n```\n'"
62,75240705,"b'You should be able to use $(DotNetTool) here.  It comes from the Common.props file in the root of the repo, which is already imported.\n'"
44,75322097,"b""This files doesn't actually exist right?  We have been using the NuGet that comes with the CLI in the rest of the code/build.\n"""
44,75323663,b'We already have $(VersionPrefx) and $(VersionSuffix) in the Common.props.  I think all the components built from our repo should use the same version number.  That way we can tell all the assets that came from the same build.\n'
44,75323948,b'Do we need this commented out line?  Can it be removed?\n\nSame for the .targets line at the bottom. #Resolved\n'
44,75324083,"b'I\'m sure VB is coming, but I don\'t think we should have ""Visual Basic"" in here until it contains VB assets.\n'"
61,75346889,"b'When the runtime target is ""native"" or ""runtime"", these are considered assemblies.\n\nex.\n\n```\n        ""runtimeTargets"": {\n          ""runtimes/unix/lib/netstandard1.3/Microsoft.Win32.Registry.dll"": {\n            ""assetType"": ""runtime"",\n            ""rid"": ""unix""\n          },\n          ""runtimes/win/lib/netstandard1.3/Microsoft.Win32.Registry.dll"": {\n            ""assetType"": ""runtime"",\n            ""rid"": ""win""\n          }\n```\n'"
71,75561570,"b'""content"" will be resolved here: https://github.com/dotnet/sdk/pull/71/files#diff-55936811a1845d0a14e9af78a884ef1dR112\n\nWe don\'t need copy ""analyzers"" during Publish.\n\nI\'m not sure what ""additional asset types"" are needed during publish.  I haven\'t discovered any by looking through the CLI code.\n'"
71,75561664,"b'""content"" is special because it can be preprocessed, and we already discovered it during ""build"". My thought is we should just re-use those already processed files in ""publish"" - just grab what we did during ""build"".\n'"
71,75561934,"b'I was following the existing naming pattern ""HelloWorld"".  It isn\'t ""ProjectHelloWorld"".\n'"
71,75562013,b'done.\n'
71,75562095,"b'This isn\'t ""two tests"".  This is ""two steps to verifying that publish worked"".\n\nThe test is ""publish this app"".  In order to verify publish worked, we look at the output and run the app.\n'"
71,75562371,"b'No, this is always going to test the sdk package that was built locally.\n'"
71,75562399,"b""Except on official builds the version number isn't going to match this.... :(\n\n@piotrpMSFT - maybe we do need to generate this version string...\n"""
71,75562525,"b""We've had this conversation before.  I follow the dotnet coding standard.\n"""
71,75562558,b'This is just a way to have multiple lock files for our test.  The file can be named anything.\n'
71,75562618,b'It is next to the existing test files that are already in this folder.\n'
71,75562647,"b""Good point.  I'll add those two.\n"""
71,75562897,"b'This isn\'t ""two tests"". This is ""two steps to verifying that publish worked"".\n\nThe test is ""publish this app"". In order to verify publish worked, we look at the output and run the app.\n\nI\'ll update the name.\n'"
71,75562993,"b'I think it may make sense to introduce a ""ProjectContext"" class that holds onto this information.  Then this method can be ""ProjectContext context = lockFileTarget.CreateProjectContext()"".  ProjectContext will have ""IsPortable"" and ""RuntimeLibraries"".\n'"
44,75686108,b'Does the .vsix need to be signed?\n'
44,75686427,"b'Since these command lines are almost identical, what do you think about refactoring this script so we can share the common options in the command line?\n'"
44,75686808,b'Does it make sense to have tests against the templates?\n'
44,75687223,"b""I thought the 'template' projects all existed in core-sdk-templates.sln.  Do these belong here?\n"""
44,75687446,"b""What does 'RoslynDev' do here?\n"""
71,75712536,b'fixed.\n'
71,75715542,"b'I\'ve moved all the lock files into a folder named ""LockFiles"".\n'"
71,75720652,"b'These are all under ""TestProjects"", so why would we need to put ""Project"" in their name?\n'"
71,75720776,"b""'can' and 'must' are two different words.\n"""
78,75767723,"b'In my mind, using the path to the project makes sense if we ever needed anything from the project.  It is sort of a ""forward looking"" thing.\n\nIf we ever needed the actual project path, we would need to change the API again, since you can have multiple projects in the same directory.\n'"
81,75913371,"b'Do you think it would be worthwhile to split this into its own .targets file?\n\nMy thoughts are twofold:\n1. It organizes the logic well.  Someone can easily see a file named ""Microsoft.NETCore.GenerateAssemblyInfo.targets"" and quickly understand what logic is in that file.\n2. It allows us to reuse this logic in other .targets files without importing the whole ""Sdk.targets"" file.\n'"
81,75913706,b'$(FileVersion) is listed twice in this list.\n'
81,75914189,"b""I don't see `InformationalVersion` being set.  Should it be removed from the Returns list?\n"""
81,75914917,"b""Is there some way we can automatically get a daily build number into $(FileVersion)?  I don't have any great ideas, but I was wondering if someone else did.\n\nNormally your AssemblyFileVersion changes on every build, so I can tell if I'm using build 1234 or 1235.  But your AssemblyVersion stays the same for long periods of time (usually only changes in-between releases).  So I'm wondering if our default of these two properties being the same is going to be useful or not.\n\nThoughts?\n"""
81,75915064,"b'Maybe we can do something with $(VersionSuffix)??  see if the value ends in a number, and use that number?  Again, looking to brainstorm on some ideas here.\n\n---\n\nIn reply to: [75914917](https://github.com/dotnet/sdk/pull/81#discussion_r75914917) [](ancestors = 75914917)\n'"
81,75915429,"b'My thinking has been ""if I was coding in C#, would I make a separate class for this logic?  If yes, I use a separate file.""\n'"
84,75987848,"b'File.GetFileName(srcFile) == ""project.json"" would be a better check here, IMO.\n'"
84,75988223,"b'""dependencies"" can occur at both the root of the project.json, or under a ""framework"".  It is safer to write something like:\n\n```\n            projectJsonRoot\n                .Descendants()\n                .OfType<JProperty>()\n                .Where(property => property.Name == ""dependencies"")\n                .Select(property => property.Value)\n                .SelectMany(o => o.Children<JProperty>());\n```\n'"
86,76094151,"b'FYI - I just merged the rename of ""Microsoft.DotNet.Core"" to ""Microsoft.NETCore"".  This namespace and the $(MicrosoftDotNetCoreBuildTasksAssembly) property name have been updated to reflect the new name.\n\nSo you\'ll have to sync the latest and update this.\n'"
84,76102266,"b'Sorry, I just merged the change that renamed this to `Microsoft.NETCore.Sdk`.  You will need to update... :(  I should have caught this before.\n'"
85,76106572,b'Sure i can do that.\n'
85,76112725,"b'Yes, that is the using statement that brings it in.  This is consistent with (read ""copied from"") the Publish tests.\n'"
85,76113170,"b'Honestly I think this could stick around.  If someone sets the $(ProjectLockFile) property to a relative path before this targets file is loaded (like `Microsoft.NuGet.targets` is doing today), this will ""fix"" it.\n\nWe discussed on email that it is better that the MSBuild Target code resolve full paths, and not have the task rely on using the current working directory.\n'"
89,76129647,"b'Don\'t we want our daily build number included in the .vsix?  That way we can tell which actual build we have?  Using just $(VersionPrefix), we will always get ""1.0.0"".  A user/tester won\'t be able to tell which actual version they are using.\n'"
89,76150160,b'We can change our micro build number format to anything we want.  We define it for our build...  What IS a valid format for a VSIX?\n'
89,76151602,"b""A things we make sure everyone is clear on here:  @natidea is editing our own build system in this change.  This change isn't for customers' projects.\n\nIf we want to discuss the usage of $(Version)/$(VersionPrefix)/etc for customers projects, we should do that somewhere else.  I don't feel this is the place for that discussion.  Please open an issue if what we are doing today is wrong.\n"""
89,76152355,"b'Thanks! I don\'t want to stiffle the conversation, and I think the discussion needs to happen. It just should be more ""official"", and not be confused with @natidea\'s change.\n'"
81,76334445,b'Was this line intentially duped?\n'
81,76335343,b'Testing #FTW!\n'
91,76437792,"b""This is what our default template looks like. Globbing and generators don't really work well together. I logged https://github.com/dotnet/sdk/issues/94 for this issue in the product.\n"""
91,76437879,"b""Good point.  I'll spice this comment up a bit.\n"""
91,76439742,"b'@rainersigwald @jeffkl @AndyGerlicher @cdmihai - These switches were all duplicated from CopyToOutputDirectory\'s implementation. At first I thought this was for backwards compatibility, and I didn\'t need to duplicate them. But thinking more about it, keeping symmetry with CopyToOutputDirectory makes a lot of sense. And the defaults to ""optimize"" this behavior is good.\n\nDo you guys have any thoughts here? Is what I\'m doing OK? Or should I do it a different way?\n'"
100,76489386,"b'Correct.  The .props file gets imported first, so the user hasn\'t had a chance to set the property first.  If the user wants something different, they just set it after the top ""Import"" of the Common.props.\n'"
100,76659352,"b'My thinking was that this property group is for .NET Core specific settings.\n\n`<!-- Default settings for .NET Core build logic -->`\n\nWhere the property group above are defaults for all .net projects:\n\n`<!-- User-facing configuration-agnostic defaults -->`\n\nBut I guess using that line of thinking, the `<DebugType>` should go into this group.\n\nMaybe this line of thinking is wrong/incorrect, and we should just merge the two groups.\n\n@davkean - any thoughts/opinions?\n'"
99,76660559,"b""I don't think I understand the question.\n\nThe satellite assemblies above will be copied each into separate culture sub-directories.  The `@(ReferenceCopyLocalPaths)`, gets all the assemblies from P2P projects and copies them to the appropriate directory.  Some of those assemblies may be satellite assemblies of the referenced projects, which will go into the same culture sub-directories because their `%(ReferenceCopyLocalPaths.DestinationSubDirectory)` will be set to the same culture.\n\nWhat needs to account for these sub-directories?\n"""
100,76830993,"b""We also need to take into account properties that would hold true across all TFMs, vs. properties that are TFM specific.\n\nHere, everything under `<!-- Default settings for .NET Core build logic -->` should only be set for `netstandard` and `netcoreapp` TFMs.\n\nAgain, I'll move the DebugType down to this section.\n"""
112,77258335,"b'It is always shown in the console. The exception thrown by `.Should().BeEquivalentTo()` contains both the baseline and the result.\n\nHowever that formatting is near un-readable because of [https://github.com/dennisdoomen/FluentAssertions/issues/453](https://github.com/dennisdoomen/FluentAssertions/issues/453).  And also ""diffing"" between the two is impossible when the object is larger than a few properties.\n\n---\n\nIn reply to: [77233060](https://github.com/dotnet/sdk/pull/112#discussion_r77233060) [](ancestors = 77233060)\n'"
112,77258527,"b""Good point.  I'll split the conversion out into its own converter class and change this back to CompilationOptions.\n\n---\n\nIn reply to: [77233700](https://github.com/dotnet/sdk/pull/112#discussion_r77233700) [](ancestors = 77233700)\n"""
112,77258895,"b'The idea is to move this logic out of extension methods, and instead in a dedicated class for it.\n\n""ProjectContext"" wraps the LockFileTarget (and maybe more information in the future), and provides project information to the tasks that need it.\n\n---\n\nIn reply to: [77234943](https://github.com/dotnet/sdk/pull/112#discussion_r77234943) [](ancestors = 77234943)\n'"
112,77263511,"b'If we could capture the bin directory in CI, then yes.  This would greatly help debugging failures of these tests.\n'"
112,77263635,b'IMO - it would be better to have a GOD object than to have GOD extension methods....\n'
112,77367175,b'Fixed.\n\n---\n\nIn reply to: [77234035](https://github.com/dotnet/sdk/pull/112#discussion_r77234035) [](ancestors = 77234035)\n'
122,77640902,"b'We already have this functionality, only in an MSBuild target.  See https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NETCore.Build.Tasks/build/netstandard1.0/Microsoft.NETCore.GenerateAssemblyInfo.targets.\n\nTalk to @nguerrera if you have any questions on the MSBuild code.\n'"
122,77642804,"b""Can we do this without directly referencing Roslyn assemblies?  Can we do it by invoking `csc` instead?\n\n/cc @jaredpar - in case he has ideas.\n\nThe reason I'm asking is because when we add a new reference to our Tasks assembly, we technically should be adding all of the necessary Roslyn assemblies into our .nupkg as well to be correct (which is something I don't really want to do).\n"""
125,77827872,"b'Since the code below expects ""cs"", I think this comment should use ""CS"" and not ""C#"".\n'"
125,77833261,"b""Why are 'cs' and 'vb' special cased here?  What about other languages like F#? #Resolved\n"""
125,77834231,"b'What about using the NuGet LockFile object model instead here?  My concern is that NuGet is going to change their lock file format, and then all this code will need to be rewritten.\n'"
130,78005398,b'Can we log a bug for this so it is tracked?  And then add a reference to the bug here.\n'
130,78006398,"b""I don't think this version exists.\n\n[https://www.nuget.org/packages/NETStandard.Library/](https://www.nuget.org/packages/NETStandard.Library/)\n"""
130,78006756,b'Our CLI template uses netstandard1.6 as the default TFM.\n\n@blackdwarf - is this still what we want?\n'
130,78007644,"b'Same comment here - there is only a ""1.6.0"" version of this package.\n'"
122,78013915,b'This is the only place in the whole target that uses `@(EmbeddedResource)`.  Should this instead be using `_SatelliteAssemblyResourceInputs`?\n'
122,78014365,"b""Doesn't this add the AssemblyInfo file to the current project's Compile list?  Instead, shouldn't it be adding it to the resource assembly's compile list?\n"""
122,78015683,b'Why use new FileInfo().Create() here?  Why not File.Create?\n'
122,78055063,"b'Creating a FileInfo object will do operations that you don\'t need.\n\nCreating a new FileInfo gets the ""full path"":\n\nhttps://github.com/dotnet/corefx/blob/d0dc5fc099946adc1035b34a8b1f6042eddb0c75/src/System.IO.FileSystem/src/System/IO/FileInfo.cs#L39\n\nAnd getting the full path may need to call Cwd:\n\nhttps://github.com/dotnet/corefx/blob/0588d187adc99aaed3bd356f343e3c8d92327d00/src/System.Runtime.Extensions/src/System/IO/Path.Unix.cs#L38\n\nThe real question is: what is the advantage of using `new FileInfo().Create()`?\n'"
131,78079898,"b""According to \n\nhttps://github.com/dotnet/sdk/issues/114#issuecomment-244241988\nand\nhttps://github.com/dotnet/cli/issues/4138#issuecomment-244236553\n\nThe real issue is an MSBuild issue with `Exclude` not working.  @rainersigwald @cdmihai can confirm.\n\nAnd also I've heard we are going to be getting rid of our usage of `Exclude` and use `Remove=bin/**/*.cs;obj/**/*.cs`.  @davkean can confirm that.\n"""
132,78119800,"b""Why not just add this NuSpec Item to the existing https://github.com/dotnet/sdk/blob/master/build/Nuget/Microsoft.NETCore.Nuget.proj.  It is set up to be able to build multiple nuget packages.\n\nThat way you wouldn't have to copy the whole project. \n"""
132,78119868,"b""These two properties don't appear to be used.\n\nIf you need them, then I'd put them in a common .props file instead of duplicating the version number in multiple spots.\n"""
132,78119928,b'+1\n'
132,78120139,"b'Pardon my ignorance, but what is this thing?\n'"
132,78120399,b'(nit) spacing\n'
133,78242059,"b""I don't think the unit tests need to be shut off.  I think just the Publish and Build end-to-end type tests need to be shut off.\n"""
137,78600186,"b""Does it make sense to have `ContentPreprocessorOutputDirectory` as optional?  Isn't it really a required property for this task to do its job?\n"""
137,78600522,b'(minor) the casing of the second `P` on `AssetPreProcessor` is different than `assetPreprocessor`. #Resolved\n'
137,78600748,b'Repeated for `NugetContentAssetPreprocessor` class.\n\n---\n\nIn reply to: [78600522](https://github.com/dotnet/sdk/pull/137#discussion_r78600522) [](ancestors = 78600522)\n'
137,78600906,"b""It seems incorrect that the AssetPreprocessor will only the the passed in preprocessorValues if it is lazy loaded.  But when it is passed into the constructor, it doesn't get these values. #Resolved\n"""
137,78603214,b'This method looks duplicated from `ResolvePackageDependencies`.  Can it be refactored to a common place? #Resolved\n'
137,78603476,b'Can this use `ITaskItemExtensions.GetBooleanMetadata`? #Resolved\n'
137,78604314,b'The SHA1 class is IDisposable.  We should be disposing it. #Resolved\n'
137,78604751,b'What do you think about using BitConverter.ToString here instead of all these string concats?\n\n---\n\nIn reply to: [78604314](https://github.com/dotnet/sdk/pull/137#discussion_r78604314) [](ancestors = 78604314)\n'
137,78604871,b'Does this need to be public? #Resolved\n'
137,78605346,"b'Why use `&apos;` here?  Why not just say `""{token}""`? #Resolved\n'"
137,78605692,"b'What happens if 2 nuget packages have `contentFiles` with the same output path?  The first one will win here, right?  The 2nd one will come in, and the file will already exist, so it will be skipped. #Resolved\n'"
137,78606738,"b""I don't understand why we are building this dictionary up.  Later, when we read out of it, we still have the ITaskItem - so we can just read the 'ResolvedPath' metadata off it then.  No need for this intermediate dictionary.\n"""
137,78607244,"b'Don\'t we want to select both the current language and ""any"" assets?\n\nSay I have 3 assets:\n\ncs\\SomeCSAsset.cs\nvb\\SomeVBAsset.vb\nany\\config.xml\n\nshouldn\'t I get both the `SomeCSAsset.cs` AND the `config.xml` files if my project is C#?\n'"
137,78608243,"b'If `copyToOutput` is ""true"", but there is no `outputPath`, should the file be copied directly to the output directory with the same name?  Or should we really skip it entirely?  Maybe we should log a warning in this case...? #Resolved\n'"
138,78616345,"b'> This needs to respect immediate and output variables.\n\nOne issue is that `bin` doesn\'t have a ""Base"" property like `$(BaseIntermediateOutputPath)`.  We directly set `$(OutputPath)` to `bin\\Debug` or `bin\\Release`.\n\nThe issue here is that when I build for `Debug`, and then build for `Release`, I will get any .cs files that are contained in `bin\\Debug`.\n\nSo to fix this, I think we will have to introduce a new property:  `$(BaseOutputPath)`.\n'"
138,78616541,"b'> If the items being removed were a property itself, I could consume that property from the evaluated project no?\n\n@brthor - why does migration need to reference this property?\n'"
147,79416078,"b""You're going to want to use StringComparison.OrdinalIgnoreCase whenever creating a dictionary of NuGet package Ids. They are case-insensitive.\n"""
146,79426659,"b'Since both the ""TestApp"" resources and the ""TestLibrary"" resources have the same strings, we aren\'t really doing great verification here.\n\nCan we have the resources in the TestApp be different than what is in the TestLibrary?\n'"
152,79614756,"b""Can we get rid of this?  we shouldn't have project.json anymore right?\n"""
152,79615194,"b'Should this be `1.0.1` now?  That version shipped, and it is what we use in the `dotnet new` templates.\n'"
152,79615656,"b""I don't think we can do this until @nguerrera's change comes in to do the transform.  All our .targets files read the `TargetFrameworkIdentifier` properties, so these projects will be broken until then.\n"""
146,79618867,b'There should also be a TestLibrary.resources.dll.  Can you add a check for that?\n'
152,79645317,"b""> Is the NuGet name for this is still netcoreapp1.0?\n\nYes.  The TFM didn't change.  Just a bump in the dependency version.\n"""
152,79645384,"b'OK, thanks for clarifying.\n'"
152,79645794,b'The TFM is still `netcoreapp1.0`.\n'
152,79648400,"b""Oh, I didn't see this at first.\n\nLibraries shouldn't reference Microsoft.NETCore.App.  Libraries should reference `NETStandard.Library`.  See the corresponding project-json-template.json for the package ID and version.\n"""
137,79651191,"b'Should we make a property for this directory, so other targets (like Publish) can read the items from it?\n\n---\n\nIn reply to: [79632312](https://github.com/dotnet/sdk/pull/137#discussion_r79632312) [](ancestors = 79632312)\n'"
154,79659213,"b'(nit) I think this section should go ""above"" the temporary hacks section, if possible.  It makes it more readable IMO - all the ""official"" properties go together, and then the ""hacks"" at the end. #Resolved\n'"
154,79665228,"b""This is sort of odd to me.  All the other .targets files don't have a path in this comment.\n\n(honestly, I'm not sure why we need this name here at all...) #Resolved\n"""
154,79665448,b'The file has `.targets` as an extension.  Which should it be? #Resolved\n'
154,79665664,b'`$(TargetFramework)` or `$(TargetFrameworks)`? #ByDesign\n'
154,79666826,b'type-o `rnning` #Resolved\n'
154,79678083,"b'Normally the ""Clean"" target doesn\'t do a ""Build"". #Resolved\n'"
154,79678333,"b'Maybe the ""Build"" target should be renamed here, as I find it confusing reusing ""Build"" to do things that are not ""Build"".\n\n---\n\nIn reply to: [79678083](https://github.com/dotnet/sdk/pull/154#discussion_r79678083) [](ancestors = 79678083)\n'"
151,79678751,"b""Oops - nice catch.  I'll fix it.\n"""
151,79679839,"b'I was, but I got cold feet.\n\nThe issue that made me go back to this folder structure is because when you publish ""portable"" and then publish ""self-contained"" (or vice versa), your ""portable"" publish output will contain the RID-specific publish outputs as well:\n\n```\n/<OutDir>\n  /publish\n    App.dll\n    App.deps.json\n    ...\n    /win10-x64\n      App.dll\n      App.deps.json\n      ...\n```\n\nThus, you can\'t just copy the ""publish"" folder for portable, you need to exclude all the RID specific publish folders.  So I felt it would be better to keep the current folder structure, since it will be a better user experience.\n'"
151,79680218,"b'> I guess the best to do here is look for the prefix win?\n\nYes, that was going to be my approach.  Is there a better approach?  We could add a C# task that takes in a RID and returns the OS value for the RID, but that seems a bit heavy-weight for something so simple.\n'"
154,79680579,b'(nit) whitespace. #Resolved\n'
154,79683833,"b""How does this Target get invoked?  I don't see it called. #Resolved\n"""
154,79713556,"b'Should probably return ""false"" here instead of ""true"" below. #Resolved\n'"
154,79713762,"b""Or even worse - since nearestNuGetFramework is null, you'll get an IndexOutOfRange exception on the indexer when passing in -1.\n\n---\n\nIn reply to: [79713556](https://github.com/dotnet/sdk/pull/154#discussion_r79713556) [](ancestors = 79713556)\n"""
154,79749252,b'Is this necessary?\n'
154,79749286,b'(nit) spacing\n'
154,79749449,"b""This variable doesn't appear to be used.\n"""
146,79959992,"b'Directly above this we have Include=""Resource1.resx"".  Do we need both?\n'"
163,80249167,"b'The CLI builds have been failing the past few days for 2 separate reasons:\n1. At first they were failing for `System.IO.FileLoadException: Native image cannot be loaded multiple times` in MSBuild.\n2. Then it started getting past that point, and now we are seeing Kestrel tests failing:\n\n```\n2016-09-23T02:12:36.6196056Z      2>DOTNETTEST : error : The process ""8480"" not found. [D:\\vsts-agent-win7-x64-2.104.0\\_work\\6\\s\\build\\test\\RunTest.proj]\n2016-09-23T02:12:36.7133604Z              Microsoft.DotNet.Tools.Publish.Tests.PublishDesktopTests.DesktopApp_WithKestrel_WorksWhenRun(project: ""KestrelDesktopWithRuntimes"", url: ""http://localhost:20302"", framework: null) [FAIL]\n2016-09-23T02:12:36.7133604Z                Expected True because Unable to connect to kestrel server - KestrelDesktopWithRuntimes @ http://localhost:20302, but found False.\n```\n\n@brthor @livarcocc @Sridhar-MS \n'"
163,80264708,"b'Are we saying that ALL .NET Core projects have to have a $(TargetFrameworks) property?  What if my project only needs to support a single TFM?  Can\'t I just have $(TargetFramework)=\'netcoreapp1.0\' and not need the ""outer"" and ""inner"" builds?\n'"
163,80273609,"b""I got a CLI official build to sneak through, with all the issues we've had.\n\nYou can update to `1.0.0-preview3-003665`.  That is our latest, and should have @nguerrera's change.\n"""
172,80489061,"b""Good call.  I'll rename to `ResolvedFileToPublish`.\n"""
172,80493636,"b""Good call.  This must have just come in.\n\nI'm also going to change the property name to use `ForPublishFiles` instead of `ForAdditionalFiles`, just like here:\n\nhttps://github.com/Microsoft/msbuild/blob/16c6f0718d0e437c4b10a3e15817d14f07eb594a/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L4996-L4997\n"""
164,80580506,"b""This was accidentally removed.  I'm making a separate PR for it.\n"""
184,80793218,b'It is a placeholder that gets updated during the test to the currently built Sdk package.  See https://github.com/dotnet/sdk/pull/184/files#diff-bd7b4ed106ed4a6b9328d9c7a7129f5fR56\n'
184,80793314,"b""No, we can't because Xunit writes to StdErr, which fails our build.  We haven't found a good way to work around that.\n"""
184,80806016,b'I updated the comment to point to the new #185 issue.\n\nOr @nguerrera - do you just want me to take your change instead?  That seems easier.\n'
184,80807154,"b""I re-enabled it on my machine, and it passed. I'll fix #185 with this PR as well.\n"""
188,80928720,"b""What's the plan for adding VB?\n"""
188,80928986,"b""Is this necessary?  I didn't think unit tests need a Main method.\n"""
188,80929095,b'Should unit tests output `Library` instead?\n'
188,80929556,"b'Are all 3 of these references necessary?  Can we trim it down with a metapackage?  (A metapackage is like Microsoft.NETCore.App - I only need to reference a single package, and I get all the .NET base class libraries referenced.)\n'"
188,80929722,"b""What's the plan for adding xunit templates?\n"""
192,81252371,"b'@srivatsn @davkean @nguerrera @brthor @livarcocc @blackdwarf @davidfowl -\n\nIn project.json-based projects, we had automatic defines injected for the TFM (so if I was building for netstandard1.3, there was an implicit define #NETSTANDARD1_3 that I could automatically use in a #if).\n\nAre we going to keep this ""convenience"" feature with the move to MSBuild?\n'"
192,81252748,b'I logged https://github.com/dotnet/sdk/issues/195 for this.\n'
192,81253320,"b'See https://github.com/dotnet/cli/blob/1278e9d6bf35500e9672fe3f53125df1d08717d8/src/Microsoft.DotNet.ProjectModel/ProjectReader.cs#L459\n\nWe only had the full version in the define, so if you were targeting netstandard1.3 and 1.6, you would have to have #ifs for both (&& or ||).\n'"
191,81348597,b'Should this be `**\\*.resx`? \n'
198,81425646,b'(nit) whitespace is inconsistent.\n'
202,81588509,b'Can we get an issue URL for this? #Resolved\n'
202,81588747,"b""This file doesn't exist. #Resolved\n"""
202,81589199,b'Does this path exist? #Resolved\n'
202,81589849,"b'I don\'t think this `commonBuildArgsVsMan` variable makes sense.  There is no ""common"" args because it is only getting used in one spot. #Resolved\n'"
202,81589942,b'(nit) whitespace appears off here. #Resolved\n'
202,81590589,b'This already exists in this repo.  See https://github.com/dotnet/sdk/blob/master/build/Targets/Templates.Imports.targets#L63 #Resolved\n'
202,81590689,"b""We aren't using `42.42.42.42` for non-official build numbers anywhere else in the repo.  Can you follow the established pattern? #Resolved\n"""
202,81590740,b'This change seems unnecessary #Resolved\n'
202,81591029,"b'It would seem to me, logic like this causes Jenkins CI jobs to pass, and then we get failures on our official builds.  Is there a way to make Jenkins CI jobs == official builds as much as possible?\n'"
202,81591212,"b""I don't think we should be using `Roslyn` versions at all.  We already have version numbers in this repo - they should be aligned. #Resolved\n"""
202,81591949,"b'We already have a ""ProducesNoOutput.Imports.props file.  I\'d like to see the existing ""produces no output"" structure being used, instead of introducing a completely different one.  It will be confusing going forward why we have 2. #Resolved\n'"
202,81592190,"b'Is this necessary?  Who/what is producing PCLs?  If there are any, they should be on .NETStandard instead.\n\nI think this should be removed. #Resolved\n'"
204,81810403,"b""No, that didn't work for me.  It was still failing with `/p:Configuration=`, and it was saying $(Configuration) was still set to 'Debug'.\n\nI'll add a reference to https://github.com/dotnet/sdk/issues/203.  That's the right bug, right?\n"""
192,81988863,"b""It's kind of misleading to call this test `It_builds_desktop_library_successfully_on_all_platforms`, but then skips doing anything on non-Windows.\n"""
212,82085429,"b'This is not a brand new file, it was renamed from `LockFileTargetExtensions` to `LockFileExtensions`, since there are more than just `LockFileTarget` extensions in here.\n\nIf you want to view the diff, pull the branch locally and use VS Team Explorer.  It shows the file as renamed, and only shows the changed code.\n'"
212,82232405,"b'This pattern is used extensively in the CLI (and NuGet and ASP.NET [same authors]):\nAn example from each repo:\nhttps://github.com/dotnet/cli/blob/1278e9d6bf35500e9672fe3f53125df1d08717d8/src/Microsoft.DotNet.ProjectModel/ProjectContextBuilder.cs#L78-L148\n\nhttps://github.com/NuGet/NuGet.Client/blob/4cccb13833ad29d6a0bcff055460d964f1b49cfe/src/NuGet.Core/NuGet.Protocol.Core.Types/UserAgentStringBuilder.cs#L34-L44\n\nhttps://github.com/aspnet/Mvc/blob/760c8f38678118734399c58c2dac981ea6e47046/test/Microsoft.AspNetCore.Mvc.Razor.Host.Test/SpanFactory/SpanConstructor.cs#L39-L71\n\nNot saying it makes it ""right"", but I don\'t think it has to be immutable, just ""fluent"".\n'"
212,82232881,"b""@emgarten ?  Will these paths always be in the same case?\n\nMy thought is we should be case-sensitive since we support case-sensitive file systems.  And if these really should be case-sensitive, I'll change to the more succinct code.\n"""
212,82233030,"b""Oh, these are case-insensitive actually, since the strings are NuGet package Ids - which are case insensitive.  I'll fix these up.\n"""
212,82242918,"b'I\'m not really inventing a new pattern here.  :\n\nhttps://en.wikipedia.org/wiki/Fluent_interface#C.23\nhttp://stefanoricciardi.com/2010/04/14/a-fluent-builder-in-c/\n\nHere\'s the same pattern in the corefx repo:\n\nhttps://github.com/dotnet/corefx/blob/bffef76f6af208e2042a2f27bc081ee908bb390b/src/System.Composition.TypedParts/src/System/Composition/Hosting/ContainerConfiguration.cs#L152-L156\n\nWe can change the word ""With"" to something else, if you feel that strongly.  But this pattern is more common than just my usage.  This is how you build fluent interfaces without creating a bunch of little, throw-away objects.\n'"
202,82316574,"b'The other checks should be removed.  We already have this property in Common.props:\n\n```\n    <NuGet_Packages Condition="" \'$(NuGet_Packages)\' == \'\'"">$(RepositoryRootDirectory)packages\\</NuGet_Packages>\n```\n'"
223,82436915,b'(minor) can you fix the whitespace issues while you are in here?\n'
223,82437635,"b'whitespace at the front of the element:\n\n``` XML\n....<Content Remove=""bin\\**"" />\n........<Content Remove=""wwwroot\\bin\\**"" />\n```\n\nSo they are all lined up.\n'"
226,82453159,"b""Where does this Package get built?  I'm concerned we are creating a circular reference in our repos, if `Microsoft.NET.Sdk.Publish` references the `Microsoft.NET.Sdk`.\n"""
226,82453199,b'Also (minor) - please fix the whitespace issues.\n'
226,82454247,"b""I'm talking about repo-dependencies.  Which repo needs to build first.  Currently, the dotnet/sdk repo isn't dependent on the `aspnet/aspnetpublishtargets` repo.\n\nIs your web package moving to another repo?  If so, then it won't matter.\n"""
226,82454353,b'> Also publish now does not depend on core sdk\n\nwill this be true forever?\n'
226,82454541,"b""As I said above, I'm talking about repo-dependencies.\n"""
223,82456129,"b""It's not a bad idea to look at the diff yourself in GitHub.  I see you added more of these, and made this one worse....\n"""
231,82493406,b'Done.\n'
231,82493426,"b""Sounds good.  My naive thought was: if this isn't the default for .NET Desktop apps/libraries today, then it doesn't make sense for it to be the default for desktop project when multi-targeting/using the new project system.  (Although that thought is wrong in plenty of cases.)\n"""
231,82493483,"b""> Just confirming that the interesting case is only netcoreapp \n\nCorrect, I just felt it wasn't necessary to explicitly have a different condition here.  It should be `.dll` for both of these target frameworks by default.  So no harm in setting it here for NETStandard.\n\n> do we need a work item to error out on netstandard exe?\n\nLogged #235\n"""
232,82493560,"b'Is ""My Project"" true for F# projects as well?  Or should we be conditioning on `.vbproj` here?\n'"
240,82842768,"b'I\'m not sure this is correct for a few reasons.  From MSDN [https://msdn.microsoft.com/en-us/library/ms164300.aspx](https://msdn.microsoft.com/en-us/library/ms164300.aspx):\n\n> This task is case insensitive and does not compare item metadata when determining duplicates.\n1. \'case insensitive\' on a case sensitive file system may be a problem.\n2. \'does not compare item metadata\' - What happens when there are multiple files with different ""RelativePath"" metadata?  Does the first win?\n\nWhy is this needed at all?  Who is adding the same file multiple times?  Is it `ResolvedAssembliesToPublish`?\n'"
241,82843565,"b'From a user\'s perspective yes.  When you don\'t catch the exception the error message says:\n\n```\n""C:\\temp\\WebApplication44\\WebApplication44.csproj"" (Build target) (1) ->\n(RunResolvePublishAssemblies target) ->\n  F:\\core-sdk\\packages\\microsoft.net.sdk\\1.0.0-alpha-00000001-01\\build\\netstandard1.0\\Microsoft.NET.Publish.targets(223,5): error MSB4018: The ""ResolvePublishAssemblies"" task failed unexpectedly.\\r [C:\\temp\\WebApplication44\\WebApplication44.csproj]\nF:\\core-sdk\\packages\\microsoft.net.sdk\\1.0.0-alpha-00000001-01\\build\\netstandard1.0\\Microsoft.NET.Publish.targets(223,5): error MSB4018: System.NullReferenceException: Object reference not set to an instance of an object.\\r [C:\\temp\\WebApplication44\\WebApplication44.csproj]\nF:\\core-sdk\\packages\\microsoft.net.sdk\\1.0.0-alpha-00000001-01\\build\\netstandard1.0\\Microsoft.NET.Publish.targets(223,5): error MSB4018:    at Microsoft.NET.Build.Tasks.LockFileExtensions.IsPortable(LockFileTarget lockFileTarget)\\r [C:\\temp\\WebApplication44\\WebApplication44.csproj]\nF:\\core-sdk\\packages\\microsoft.net.sdk\\1.0.0-alpha-00000001-01\\build\\netstandard1.0\\Microsoft.NET.Publish.targets(223,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ProjectContext..ctor(String projectPath, LockFile lockFile, LockFileTarget lockFileTarget)\\r [C:\\temp\\WebApplication44\\WebApplication44.csproj]\nF:\\core-sdk\\packages\\microsoft.net.sdk\\1.0.0-alpha-00000001-01\\build\\netstandard1.0\\Microsoft.NET.Publish.targets(223,5): error MSB4018:    at Microsoft.NET.Build.Tasks.LockFileExtensions.CreateProjectContext(LockFile lockFile, String projectPath, NuGetFramework framework, String runtime)\\r [C:\\temp\\WebApplication44\\WebApplication44.csproj]\nF:\\core-sdk\\packages\\microsoft.net.sdk\\1.0.0-alpha-00000001-01\\build\\netstandard1.0\\Microsoft.NET.Publish.targets(223,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePublishAssemblies.Execute()\\r [C:\\temp\\WebApplication44\\WebApplication44.csproj]\nF:\\core-sdk\\packages\\microsoft.net.sdk\\1.0.0-alpha-00000001-01\\build\\netstandard1.0\\Microsoft.NET.Publish.targets(223,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\\r [C:\\temp\\WebApplication44\\WebApplication44.csproj]\nF:\\core-sdk\\packages\\microsoft.net.sdk\\1.0.0-alpha-00000001-01\\build\\netstandard1.0\\Microsoft.NET.Publish.targets(223,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__25.MoveNext() [C:\\temp\\WebApplication44\\WebApplication44.csproj]\n```\n\nWhen calling LogErrorFromException, you get:\n\n```\n""C:\\temp\\WebApplication44\\WebApplication44.csproj"" (Build target) (1) ->\n(RunResolvePublishAssemblies target) ->\n  F:\\core-sdk\\packages\\microsoft.net.sdk\\1.0.0-alpha-00000001-01\\build\\netstandard1.0\\Microsoft.NET.Publish.targets(223,5): error : Assets file \'C:\\temp\\WebApplication44\\obj\\/project.assets.json\' doesn\'t have a target for \'.NETCoreApp,Version=v1.0/win7-x64\'. Ensure you have restored this project for TargetFramework=\'netcoreapp1.0\' and RuntimeIdentifier=\'win7-x64\'.\\r [C:\\temp\\WebApplication44\\WebApplication44.csproj]\nF:\\core-sdk\\packages\\microsoft.net.sdk\\1.0.0-alpha-00000001-01\\build\\netstandard1.0\\Microsoft.NET.Publish.targets(223,5): error :    at Microsoft.NET.Build.Tasks.LockFileExtensions.CreateProjectContext(LockFile lockFile, String projectPath, NuGetFramework framework, String runtime)\\r [C:\\temp\\WebApplication44\\WebApplication44.csproj]\nF:\\core-sdk\\packages\\microsoft.net.sdk\\1.0.0-alpha-00000001-01\\build\\netstandard1.0\\Microsoft.NET.Publish.targets(223,5): error :    at Microsoft.NET.Build.Tasks.ResolvePublishAssemblies.ExecuteCore()\\r [C:\\temp\\WebApplication44\\WebApplication44.csproj]\nF:\\core-sdk\\packages\\microsoft.net.sdk\\1.0.0-alpha-00000001-01\\build\\netstandard1.0\\Microsoft.NET.Publish.targets(223,5): error :    at Microsoft.NET.Build.Tasks.ResolvePublishAssemblies.Execute() [C:\\temp\\WebApplication44\\WebApplication44.csproj]\n```\n\nObviously the exceptions are different in this case, but the main point is the user doesn\'t see\n\n`The ""ResolvePublishAssemblies"" task failed unexpectedly` as the first message.\n'"
241,82843856,"b""Good point.  I'll create an internal `ReportUserErrorException` type.  (Does that name sound good?)\n"""
258,83082544,b'oops.\n'
276,83316128,b'Should the Inputs/Outputs get removed from `GenerateAssemblyInfo`?\n'
276,83316937,"b""Another silly question - since this is the target that depends on `PrepareForBuild;GetAssemblyVersion`, shouldn't the dependencies go here?  And then if you do that, should the whole `GenerateAssemblyInfo` and `CoreGenerateAssemblyInfo` be collapsed?\n"""
276,83317229,"b""Or is this how you get `GetAssemblyVersion` to run all the time, even if it isn't needed?\n"""
276,83320666,"b""> I thought if inputs and outputs were up to date, it wouldn't run its dependencies.\n\nMe too!  learn something new everyday\n"""
283,83502560,"b'Man, I am doing this wrong everywhere.  Fixing.\n'"
283,83502643,b'Because I was too busy `ToLowerInvariant()`ing all the things.  Changed.\n'
283,83506748,"b'I changed the code to use `IEqualityComparer<Tuple<string, NuGetVersion>>` instead, and handle the case-insensitivity in a class that implements that interface.\n'"
283,83511330,b'I put a similar test in the two netstandards test as well.\n'
283,83511345,b'done.\n'
292,83774585,"b""Should be able to remove the 'ContinueOnError=true' now.\n"""
296,83869307,"b'Is this really the correct name for this capability?  Nothing in our sdk/project/etc has any concerns with ""containers"".  Working with ""containers"" is capability that is built elsewhere.  This SDK doesn\'t create dockerfiles, or run them, or build the images.  Or anything else that would make it ""containerizable"".\n\nWould something like ""cross platform"" be more appropriate?  Or ""Windows|Unix""?\n\nI think by using this name, we are adding knowledge to our lower-level tooling about how it is being used at higher levels.\n'"
296,83870821,"b'What happens when we support GUI on .NET Core? (if that ever happens). An app that tried showing a GUI would most definitely not be ""containerizable"".\n'"
296,83873516,"b'> Maybe ""CrossPlatformExecutable""\n\nThat would be fine with me.  I just don\'t want us to advertise a capability we are not actually implementing.  If we had code in our SDK that worked with containers, I\'d be fine with ""Containerizable"", but we don\'t and we don\'t plan on having any AFAIK.\n'"
295,83880107,"b'I flip-flop on the best approach here...  When I\'m in .net code, I pretty much always expect bools to default to \'false\'.  But for some reason in MSBuild properties, I follow the convention of naming the properties with positive names, and then default to true or false.\n\nFor example, in GenerateAssemblyInfo.targets:\n\n```\n<GenerateAssemblyInfo Condition=""\'$(GenerateAssemblyInfo)\' == \'\'"">true</GenerateAssemblyInfo>\n```\n\nI\'m not sure the best way here.  But I guess I\'d like us to be consistent where possible.\n'"
296,83917354,"b""Do we also want `$(OutputType) == 'Exe'`?\n"""
313,84999319,"b""The example on https://msdn.microsoft.com/en-us/library/ms164309.aspx doesn't have a trailing slash.\n\nShould I change it to use Path.Combine instead....?\n"""
321,85045275,b'I logged #323 to fix this hard-coded extension.\n'
321,85049121,"b""This is more or less defensive coding.  If we get into this situation it is because of a bad assumption in the code, or some other component (like NuGet or the common MSBuild targets) changed and broke us.  The user didn't really do anything wrong, and can't really fix it.\n"""
321,85049516,b'Should we do something else here?  Like skip it?  It feels like that will just cause other issues downstream...\n\nMaybe log a warning?\n'
326,85252688,b'@gkhanna79 did some work to enable arm32. Does that have a different RID/architecture than arm64?\n'
326,85259663,"b'Should we put in an ""escape hatch"" for this Target?  Like a property that will shut it off completely if the users really, really knows what they are doing and wants to skip this check.\n'"
332,85383579,b'I think this is no longer needed \n'
348,86066976,"b""I think this can be removed. It should no longer be needed/used.\n\n(Obviously leaving it in now doesn't hurt anything. So maybe we should remove it after RC.)\n"""
528,92950418,"b'The value used to come straight from $(Version), but this is changing the default to use $(AssemblyVersion). Is that intentional?'"
528,92961862,b'$(Version) will change build-to-build. But $(AssemblyVersion) usually stays the same for an entire release.\r\n\r\nEx $(Version) = 4.0.0-build123\r\nEx $(AssemblyVersion = 4.0.0.0'
591,95028642,"b""If this isn't fixed by the time you check this in, it would be a good idea to put this info into a comment until we can take that new nuget change.\r\n\r\n---\r\nIn reply to: [94865939](https://github.com/dotnet/sdk/pull/591#discussion_r94865939) [](ancestors = 94865939)"""
591,95028941,b'This method should follow the same naming as the existing method.  `WithPreserveCacheLayout`.'
591,95029221,b'Can you add a unit test or two for the new behavior?\r\n\r\nAlong with that idea - it would be good to add an integration test or two in [https://github.com/dotnet/sdk/blob/master/test/Microsoft.NET.Publish.Tests/](https://github.com/dotnet/sdk/blob/master/test/Microsoft.NET.Publish.Tests/).'
591,95029439,"b""(nit) the casing/naming of this variable doesn't really match existing code.  It could be `srcPath` or `sourcePath`."""
591,95029871,"b'Do you want to replace all the occurences?  Or just the beginning?  Maybe checking if the libraryPath starts with pkgRoot, then substring the pkgRoot length off of libraryPath.'"
591,95030007,b'(nit) the typical coding in the dotnet repos is to use `string` not `String`.'
591,95030220,b'`face`?  Did you mean `phase`?'
591,95030270,b'this must be a copy-paste error.'
591,95030338,b'typeo `pulbishes`'
591,95030407,"b""(nit) this comment doesn't really add value since it is just repeating the name of the target."""
591,95031229,b'(nit) `Cach`'
591,95031548,"b""Does this support OSX?  Isn't it `dylib` on OSX?"""
591,95031751,"b""Don't we want to crossgen ALL of the app's references and the app itself?"""
603,95169321,b'(nit) I think it is uncommon to make assignments like this in our current code base.  Can these be split into 2 lines?'
603,95170288,"b""Question for my understanding (no change necessary):  Why the difference in metadata names here?  `NuGetPackageXXX` vs. just `PackageXXX`?  Why is one prefixed with `NuGet` and the other isn't?"""
608,95252930,"b""I'm not sure why you needed to add this TestAsset here?  I don't see it used in the test below."""
608,95254023,"b'Oh, right.  Makes sense.'"
633,96058800,b'`ReadOnly` comment is out of date.'
633,96059620,b'Should there be a way to turn this warning off?'
633,96061036,"b'I guess `DisableImplicitFrameworkReferences` should turn it off, right?  No change needed?\r\n\r\n---\r\nIn reply to: [96059620](https://github.com/dotnet/sdk/pull/633#discussion_r96059620) [](ancestors = 96059620)'"
591,96279818,"b""Nothing in `Microsoft.NET.Build.Tasks.dll` is meant to be consumed by callers outside of the .targets files in the dotnet/sdk repo.  Yes, it says `public` and people could try to use the types in this assembly, but we don't package them in any consumable way - i.e. no NuGet package that you can reference and now refer to types in the assembly. If someone tries, and they get broken in the future, they need to fix themselves.\r\n\r\nThe reason we can't make these types 'internal' and use IVTA right now is because https://github.com/dotnet/sdk/issues/55 isn't fixed.  So the signing of the assemblies gets messed up cross-platform, which leads to complications with IVTA."""
591,96657671,"b'Does this package need to be referenced in order to run the `ComposeCache` target?  Should there be a test of a ""normal"" test app, like [https://github.com/dotnet/sdk/blob/master/TestAssets/TestProjects/SimpleDependencies/SimpleDependencies.csproj](https://github.com/dotnet/sdk/blob/master/TestAssets/TestProjects/SimpleDependencies/SimpleDependencies.csproj)?'"
591,96658538,"b'Enum values are normally PascalCased.\r\n\r\n`DayOfWeek.Sunday`, `StringComparison.Ordinal`, etc.'"
591,96658611,b'unnecessary'
591,96658759,b'Public properties should be PascalCased.'
591,96659515,"b""NuGet doesn't seem to have an enum for AssetType, do we need one?  We are just turning strings into this enum, and then back into strings to put on Item metadata.  Is the enum necessary?"""
591,96660503,b'We fixed a bug the way Publish copies files and the bug seems to be duplicated here.  See [https://github.com/dotnet/sdk/pull/581](https://github.com/dotnet/sdk/pull/581)'
591,96660950,b'This seems redundant.  It is setting a property to itself.'
685,96906062,b'It is standard coding in C# to not use abbreviations or contractions in variable names.\r\n\r\n`coll1`\r\n`iter`'
685,96906430,"b""This method doesn't really seem to belong in LockFileExtensions, since it is not an extension method.\r\n\r\nMy thought would be to make it a private method next to where it is called, and if it needs to be shared somewhere, it can be moved to an appropriate place later."""
685,96906872,b'(nit) whitespace here.  This line should be indented since it is a continuation of the line above it.'
685,96907525,b'(nit) local variables should be camelCased.'
685,96907673,"b""Can reuse the LockFileCache created above, so we don't need to create 2 instances of this object in the same method."""
685,96908375,b'Where does this file get created?'
685,96953622,"b""You are right that we are using 2 assets files.  But what I'm saying is there is no point in creating two instances of the `LockFileCache` object.  The same cache object can load multiple asset files."""
591,97164509,"b""http://stackoverflow.com/questions/997047/how-to-run-tasks-in-parallel-in-msbuild\r\n\r\nAFAIK, the only way you can parallelize work in MSBuild is to split the work into separate `MSBuild` invocations.  That was the answer 7 years ago, and I'm assuming it is still the same answer.\r\n\r\n@rainersigwald @jeffkl @cdmihai - in case they know of a way"""
685,97599106,b'This comment and summary are outdated.'
685,97599820,"b""The property doesn't really align with the rest of the properties in the .json file.\r\n\r\n1. Its casing is different than the existing properties.\r\n2. It is an abbreviation, where the rest aren't."""
685,97600292,"b'Why can\'t this value be inferred from the existing ""Framework"" property?  Also, TFMs don\'t have patch numbers in them.  So if we had a bug fix in crossgen between 1.1.0 and 1.1.1, how would the cache get updated?  The assembly was crossgened using 1.1.0 and cached in ""netcoreapp1.1"", but when I installed 1.1.1, there is no way to get the cache updated, because the assembly was already cached for ""netcoreapp1.1"".'"
685,97601394,b'Taking both `TargetFramework` and `TargetFrameworkMoniker` seems redundant.'
761,98909154,b'This condition seems wrong IMO.  What if I set `<DoNotDecorateComposeDir>false</DoNotDecorateComposeDir>`?'
761,98910139,"b'Just a FYI for future reference - when refactoring a large chunk of logic from one file to another, it is best to move the logic without any changes in one commit, and then make the actual changes in another.\r\n\r\nMoving the logic and making changes all at once means reviewers and anyone looking at commit history has to go through this whole file to figure out what has changed.  As a reviewer, I basically have to re-review this whole file.'"
761,98918588,"b'FYI - when referencing Microsoft.NETCore.App ""2.0"", the crossgen tool won\'t be in the CoreCLR package, but instead as part of Microsoft.NETCore.App.  See [https://github.com/dotnet/core-setup/pull/1289](https://github.com/dotnet/core-setup/pull/1289).\r\n\r\nI\'m not sure this will cause problems here.  It is just something I thought you should be aware of.'"
761,98920006,"b'Do you need to set `BuildInParallel=""True""`?'"
761,98920395,b'Maybe put this command text in a property and then use it here in the Text and below in the Exec Command.  That way it is only in a single spot.'
761,98920776,b'Do we always want `-readytorun`?  Or should that be a property that the caller can toggle?'
761,98921389,"b""Do we need to specify \r\n\r\n```\r\n/App_Paths <path[;path]>\r\n                         - List of paths containing user-application assemblies and resources\r\n```\r\n\r\nIf we don't, how will crossgen find the other assemblies that are being referenced that aren't part of the .NET Framework?  For example if the application references 3 other libraries that the developer built."""
761,98921815,b'`Preserve this is as`?  Should that be `as-is`?'
761,98922463,"b'>Preserve this is as [](start = 124, length = 19)\r\n\r\nA different way to do this would be to set the `<RuntimeFrameworkVersion>$(FX_Version)</RuntimeFrameworkVersion>` property.  Then you wouldn\'t need both this ""disable"" property and the PackageReference below.  Setting RuntimeFrameworkVersion property tells the SDK which Microsoft.NETCore.App package to reference implicitly.'"
761,98923571,"b'Do we really need/want to delete and restore the crossgen project every time this target is run?  As a user, I would think that would be frustrating to have to ~download/~ restore ~20MB~ every time I tweaked my code and wanted to crossgen it again.'"
761,98958285,"b'Because in ""2.0"", Microsoft.NETCore.App no longer depends on the CoreCLR package.  Instead, it takes all the assets out of the CoreCLR package (and all the CoreFX packages) and puts them directly in the Microsoft.NETCore.App package.'"
761,98958738,"b'Scratch the ""20MB"" download part.  That will be cached in the nuget cache.\r\n\r\nBut even with it cached, deleting this project everytime and re-restoring takes a non-trivial amount of time.'"
761,98959192,"b'Do we want it configurable for the user?  Since crossgen itself gives the option, it would seem correct for this to allow the user to configure it.'"
761,98982132,b'For my information - then why is there an option in crossgen?'
809,99437526,"b'Doing a quick code search, it appears\r\n\r\nhttps://github.com/dotnet/sdk/blob/c663c1911c2d96a95c4433cc2900a7e8652b1005/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs#L85\r\n\r\nhas the same issue.  What do you think about changing that as well?  That method is only called from this method and unioned with this hashset, but in case someone else adds a call to it.'"
811,99467717,"b""If AppendRuntimeIdentifierToOutputPath is true, the RID will already be in the OutputPath. So we don't need to put the RID in again for the PublishDir."""
817,99467798,b'Include DebugSymbolsIntermediatePath seems incorrect.\r\n\r\nCan we add a test for this?'
819,99477167,"b""Does the identifier need to be unique by itself?  Or is something else appended to it to make it unique.\r\n\r\nIf it has to be unique, just the TFM probably isn't enough."""
820,99618672,"b""Can we remove the property from the C# Task as well?  That way it isn't dead code that someone in the future has to figure out where it came from and is it still used."""
820,99622574,"b""Won't this only contain `1.0` or `1.1`?  Will that cause any problems?"""
820,99623155,"b'Do we still need 2 separate properties now?  Is there a benefit to having both?\r\n\r\nAlso, it feels a little inconsistent that if I want to specify the NETStandard.Library version, I set  `NetStandardImplicitPackageVersion` property.  But if I want to set the Microsoft.NETCore.App version, I set `RuntimeFrameworkVersion`.'"
820,99634201,"b'Adding a `*` will cause NuGet to always hit your source feeds looking for a new version.\r\n\r\n```XML\r\n  <ItemGroup>\r\n    <PackageReference Include=""Microsoft.NETCore.App"" Version=""1.0"" />\r\n  </ItemGroup>\r\n```\r\n\r\n```\r\nF:\\DotNetTest\\New>dotnet restore\r\n  Restoring packages for F:\\DotNetTest\\New\\New.csproj...\r\n  Lock file has not changed. Skipping lock file write. Path: F:\\DotNetTest\\New\\obj\\project.assets.json\r\n  Restore completed in 645.75 ms for F:\\DotNetTest\\New\\New.csproj.\r\n```\r\nvs\r\n\r\n```XML\r\n  <ItemGroup>\r\n    <PackageReference Include=""Microsoft.NETCore.App"" Version=""1.0.*"" />\r\n  </ItemGroup>\r\n```\r\n\r\n```\r\nF:\\DotNetTest\\New>dotnet restore\r\n  Restoring packages for F:\\DotNetTest\\New\\New.csproj...\r\n  Lock file has not changed. Skipping lock file write. Path: F:\\DotNetTest\\New\\obj\\project.assets.json\r\n  Restore completed in 1.15 sec for F:\\DotNetTest\\New\\New.csproj.\r\n```\r\n\r\n\r\n'"
817,99649449,"b""The code you are adding is only publishing the app's doc file, not any P2P references.  So TestLibrary's doc file is not getting published because it is a P2P reference.\r\n\r\nI mentioned this in the issue, but I'll say it here:\r\n\r\n>Do you also expect that P2P references' doc files are published?  What about doc files from NuGet packages?\r\n> I think since documentation files aren't typically used at runtime, they shouldn't be published by default.\r\n> Projects that need this behavior can add their own target that runs during publish and adds the documentation file to the @(ResolvedFileToPublish) item, which will copy the xml file to the publish directory.  It isn't necessarily behavior that the core SDK has to provide.\r\n\r\n"""
817,99655770,"b""> There is a good use case for using documentation files at runtime in web projects.\r\n\r\nThen it seems like this behavior should be added to Web projects, not all projects.\r\n\r\nThis is the advantage we get to using MSBuild - it is extremely extensible.  The core SDK doesn't need to do everything. It implements a core set of behaviors. And others can build on top of that.  Just because a certain class of projects need a behavior doesn't mean it needs to be in the core."""
835,99954032,"b""I 'fat fingered' this name.  Let me fix it.  Please don't merge yet."""
820,99964830,"b'I\'m no fan of dead code.  I feel putting in things ""just in case we need it"" leads to more confusion over time than its worth.  For example, if someone new comes in to this class to fix a bug, and starts looking where this option is used, doesn\'t see it, and now starts looking through commit history to find out why it is there.'"
820,99966142,"b""Note that both of these properties are necessary when using pre-release versions of `netstandard2.0` and `netcoreapp2.0`.  (and when they move to 2.1, 3.0, etc)  In those situations I don't really see a difference in the scenarios.\r\n\r\nBut I do think it is probably too late to change the names."""
837,100105453,b'Can you explain to me why we are passing ALL the paths into the `/Platform_Assemblies_Paths` parameter?  Why are we not using `/App_Paths` ?  /cc @gkhanna79 \r\n\r\n```\r\n    /App_Paths <path[;path]>\r\n                         - List of paths containing user-application assemblies and resources\r\n    /Platform_Assemblies_Paths <path[;path]>\r\n                         - List of paths containing target platform assemblies\r\n                         - Cannot be used with Trusted_Platform_Assemblies\r\n```'
848,100411850,"b'This may be going too far, so if you don\'t feel like fixing it now, that\'s fine with me.\r\n\r\nWhat do you think about this calling ""base.GetOutputDirectory()"" and then appending `PublishSubfolderName` to that?'"
873,101396550,"b'Should we maybe set this to ""false"" to test out that the RID doesn\'t get appended to the output path?'"
893,102340087,"b'Is this good?  It seems wrong to me that if I target `netcoreapp1.0` and publish, that I will get all these assemblies in my publish directory.'"
890,102848071,"b""I don't think we should be doing this.\r\n\r\nWe have 2 types of tests:  unit and integration.\r\n\r\nUnit tests can/should test each class in isolation and mock out things.  Put those tests in the UnitTests project under [https://github.com/dotnet/sdk/tree/master/src/Tasks/Microsoft.NET.Build.Tasks.UnitTests](https://github.com/dotnet/sdk/tree/master/src/Tasks/Microsoft.NET.Build.Tasks.UnitTests).\r\n\r\nIntegration tests should have 0 knowledge of the inner workings of the code.  This test project is an integration test.  It should only be doing things that users would see/interact with."""
908,102848398,"b'(nit) Is there a space before this, since it is nested under `<Project>`?'"
890,102850084,b'All these field names should conform to our coding standards.  See [https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md](https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md)'
890,102850379,b'I think you want case-insensitive comparison here for Name.  NuGet package ids are case-insensitive.'
890,102850562,b'I think we should use [https://github.com/NuGet/NuGet.Client/blob/4cccb13833ad29d6a0bcff055460d964f1b49cfe/src/NuGet.Core/NuGet.Packaging.Core.Types/PackageIdentity.cs#L13](https://github.com/NuGet/NuGet.Client/blob/4cccb13833ad29d6a0bcff055460d964f1b49cfe/src/NuGet.Core/NuGet.Packaging.Core.Types/PackageIdentity.cs#L13) instead of making our own class.  PackageIdentiy from NuGet already has all the correct semantics built into it.'
890,102850849,b'This is a bad idea.  We should not be using a static anything here for communication between Tasks.'
890,102851661,"b""For Xml safety reasons, you should probably prepend the document's namespace.  Just in case someone adds the msbuild namespace to the document.\r\n\r\nSee [https://github.com/dotnet/sdk/blob/master/test/Microsoft.NET.TestFramework/ProjectConstruction/TestProject.cs#L100-L104](https://github.com/dotnet/sdk/blob/master/test/Microsoft.NET.TestFramework/ProjectConstruction/TestProject.cs#L100-L104) as an example."""
890,102851758,b'This should be normal XML style comments.'
890,102853741,"b'It seems like this should go above actually calling the Parser, since the string is ""ParsingFiles"".'"
890,102853912,"b'wording. Should this be ""Spins off""?'"
890,102854077,b'`artifact.xml` is a pretty general/abstract name for this file.  Can we think of a better name?'
890,102854644,"b""You don't need to use Path.Combine to make paths in MSBuild.  Just say `$(CacheWorkerWorkingDir)\\runtime`"""
890,102854730,b'This applies everywhere.'
890,102855454,"b""`$(OS.ToUpper().Contains('WINDOWS'))`\r\n\r\n1. MSBuild does a case-insensitive comparison by default.\r\n2. The way we do this check everywhere else in the repo is `'$(OS)' == 'Windows_NT'`"""
890,102855696,b'Who sets this property?'
890,102855790,"b'This is the exact same description as CacheWorkerMain.  Since they are separate targets, they should have separate descriptions.'"
890,102855898,"b'We can do a lot of this work and the CacheWorkerMapper work in parallel, right?  Or does it have to be sequential?'"
890,102856271,"b'Why are we using an MSBuild project for this .xml file?  There is no reason we should be using an MSBuild project/format.  It is just a list of Package Ids and Versions, and we are just parsing it with an Xml parser.  We should avoid using MSBuild just to hold a list of data.'"
890,102856443,"b""We've been using the pattern where the test method name describes what the test does and expects.  That way we can easily tell what the test is supposed to do."""
890,102978762,"b'Elements(""PackageReference"") should use the namespace prefix as well.'"
890,102978892,b'Why ToLower()?  That seems incorrect.'
890,102979705,"b""I'm not sure I understand why this has a 2nd Output parameter that is the exact same value as `AssembliesToPublish`.  Why can't we just have 1 output parameter?"""
890,102980119,"b""This isn't cased correctly.\r\n\r\nAlso - why not just make this a normal property with a getter and setter?"""
890,102980355,b'Should use StringComparer.OrdinalIgnoreCase for the Dictionary comparer.  Package Ids are case-insensitive.'
890,102980827,"b""`GetIntersection` doesn't really make sense for this method name anymore."""
890,102982910,"b'Should use ""TryGetValue"" instead of ""ContainsKey + indexing into the dictionary"".'"
890,102984002,b'Same comment as above - use TryGetValue.'
890,102984110,b'No need to use ToLower.  Use an ignore-case comparer in the HashSet/Dictionary.'
890,102984585,b'This should use an xml style comment.'
890,102984937,"b'If you insist on using MSBuild as the format of this file, then you should respect all ways that MSBuild can express Items.  This code doesn\'t handle the format:\r\n\r\n```\r\n<PackageReference Include=""Newtonsoft.Json"">\r\n  <Version>9.0.1</Version>\r\n</PackageReference>\r\n```'"
890,102985253,"b""This can be removed now.  It doesn't do anything - the collection is only ever added to, but no one gets the values out."""
890,102985434,"b'Basically, this whole file can be reverted.\r\n\r\n---\r\nIn reply to: [102985253](https://github.com/dotnet/sdk/pull/890#discussion_r102985253) [](ancestors = 102985253)'"
890,102985655,b'This call should be before calling the Parser.'
890,102987137,b'IMO - you should be baselining the file.  It is easier to view the differences/changes when tests start to fail.  You can see exactly what changed.'
890,102987491,b'No one else does this anywhere in the product.  This code should follow the same patterns used everywhere else.'
890,102987609,b'Who sets this property?'
890,102987895,"b""Why do we need this extra Item?  Why can't the calling code just use `@(ResolvedAssembliesToPublish)`?"""
890,102988054,"b'This is kind of a bad name for the value that is being returned.  The name says ""Packages"", but we are returning ""Assemblies"".'"
890,102988161,"b""If you insist on using MSBuild format - there is no need putting `ToolsVersion` in the file.  We don't in any of our templates."""
890,102988301,"b""Wording of this comment.\r\n\r\n`Cleansup` is two words.\r\n\r\n`Completion` doesn't need to be capitalized."""
890,102988718,"b'This should check if someone else already set `SkipOptimization`, and not overwrite what a user set.'"
890,102989146,b'Do you need this Condition?  What if the file contents changed because I upgraded to a new version of crossgen?'
890,102989171,b'Type-o `Fileame`'
890,102990649,"b""This property is not used in this file.  It is wrong to declare it here, if this whole file doesn't use it.\r\n\r\nSame for `DirectorySeparatorChar`."""
890,102990837,"b""I'd still like to get a better name than `artifact.xml`.  I don't think that is a good name."""
876,103036420,b'Fixed.'
876,103036837,"b'Agreed, it is a poor name.  But it matches the name in the product (GenerateDepsFile class).  And the reason it is named that in the product is because it matches all the other properties:\r\n\r\n- AssemblyName\r\n- AssemblyExtension\r\n- AssemblyVersion\r\n- AssemblySatelliteAssemblies'"
876,103051610,"b'Yes, it will be broken if we have a satellite item without this metadata.  What should we do in that case?  Throw an exception?  Ignore this satellite item?  Try to use it without knowing its culture?'"
913,103056628,b'@ramarag - Please use `TryGetValue`.'
890,103059336,"b'@piotrpMSFT had a really good idea that we log some sort of warning/info here telling people that they are using a higher version than what is in the cache.  That way they are aware that they will not be running against the optimized version of their dependency, and as a result their app may have slower startup times.'"
890,103059388,"b""Obviously that doesn't need to be addressed in this PR, but I just wanted to get the idea out there for ideas.\r\n\r\n---\r\nIn reply to: [103059336](https://github.com/dotnet/sdk/pull/890#discussion_r103059336) [](ancestors = 103059336)"""
890,103258563,b'It fits in with all other C# code.'
876,103310947,"b""Actually this doesn't work because we need to add to the list, but want to expose the member as IEnumerable."""
890,103476354,b'Is there any reason why we still have `<ItemGroup>` nodes in the xml file?'
890,103487852,"b""I really don't think we should be reusing this code file in our tests.  It is making the product code messier than it has to be.\r\n\r\nThe tests can just baseline the xml file and compare the result against the baseline.  Or even use very simple Xml logic  to ensure the file is correct."""
890,103488751,"b'I think you misunderstood my previous ask.\r\n\r\nIn C#, class summary comments should look like the following:\r\n\r\n```\r\n    /// <summary>\r\n    /// Represents a single diagnostic message, such as a compilation error or a project.json parsing error.\r\n    /// </summary>\r\n    internal class DiagnosticMessage\r\n```'"
890,103516385,b'(nit) capitalization.'
890,103516780,b'(nit) `Where` should be `Were`'
890,103517852,"b'From MSDN: ""This task is case insensitive and does not compare item metadata when determining duplicates.""\r\n\r\nSo what happens if we have multiple packages with the same ID but different versions?  Will they get de-duped?  Thus only 1 wins?'"
890,103730311,"b""I disagree.  This is putting extra constraints on our product code that don't need to be there.  For example these #ifs are unnecessary.  If we want to add more logic to this file, we will have to continue adding these #ifs.\r\n\r\nI still think baselining a couple xml files is the correct way for the tests to verify the output xml file is correct.  It makes it super easy to see what has changed in the file when it has changed.  And it catches things like when unexpected elements start showing up in the file.\r\n\r\n---\r\nIn reply to: [103600599](https://github.com/dotnet/sdk/pull/890#discussion_r103600599) [](ancestors = 103600599)"""
890,103732391,b'This comment seems like it was a copy-paste leftover.'
890,103732894,"b'`listofPackages` is misleading since it is a hash set.  Simply `packages` would work, I think.'"
890,103737090,"b""Is this property used?  I don't see where it is being used."""
890,103738612,"b""I don't think we need `<ItemGroup>` in this xml file.  That is a hold over from using MSBuild."""
890,103799682,"b""It doesn't make any sense for it to be named `ItemGroup`.\r\n\r\nAlso, XML is already extensible.  You can add any other `<Element>` you want without having things nested inside collection elements."""
935,104205343,"b'This build is from a branch that isn\'t an official NuGet dev branch.  It is branched off of the official branch and then @ericstj made a change do do the netcoreapp2.0 => netstandard2.0 mapping.\r\n\r\nThe point of the comment is to tell people that we are using basically a ""private"" NuGet build and to not take a new NuGet build that doesn\'t have the netstandard2.0 mapping.\r\n\r\nMaybe we could add a test that restoring a netcoreapp2.0 app that references netstandard2.0 works?  That would ensure we don\'t take a ""bad"" NuGet build.'"
935,104206452,"b""We've asked the NuGet team multiple times.  \r\n\r\n/cc @rrelyea @emgarten @rohit21agrawal """
935,104261712,b'@livarcocc @piotrpMSFT  - looks like we got a bad change in the CLI.  We are no longer padding our commit counts.  We should fix that.'
935,104481132,b'Can we put this in a common spot in the test framework?'
935,104530543,"b""Can we log a tracking bug to take this out when the underlying issue is fixed?  That way we remember to remove it.\r\n\r\nIn general, this is bad in our product because we don't know if we have access to do this or not."""
935,104530687,b'(nit) copyright.'
962,105183201,"b'Would it make sense to use the `$(NewtonsoftJsonOnNetFrameworkVersion)` propery in the `Folder` path as well?  Feels weird to use the variable here, but still have the hard-coded version in the folder path.'"
894,105239805,b'See https://github.com/dotnet/corefx/pull/16562/files for how corefx explicitly includes 10.12'
894,105269987,b'I have an extremely strong feeling that CliCommandLineParser just copied it from\r\n\r\nhttps://github.com/dotnet/cli/blob/master/build.sh#L19-L25\r\n\r\nwhich came in over a year ago here:\r\nhttps://github.com/dotnet/cli/commit/34b0b688f7db70003514e0aefbee47868e6d5f71\r\nwith the commit message `patch up some final missing CI build things`'
949,105450004,"b""Will this break VS 2017 RTM?  What if a user takes a new SDK, but they didn't update their VS?"""
889,105451818,"b'This sure doesn\'t give me a ""warm and fuzzy"" feeling.\r\n\r\nHow do we expect this to work from VS Code, VS for Mac, and `dotnet` CLI?'"
889,105453383,"b'`$(MSBuildExtensionsPath)` when building using `dotnet build` is set inside of the CLI\'s install path. We don\'t expect other project types to be putting anything inside this folder.\r\n\r\nThis assumes that the ""WindowsXaml"" SDK is installed on the machine.  (Same for Xamarin.* below).\r\n\r\nInstead, the intention of this new SDK (at least in my opinion) is that you shouldn\'t need machine specific things installed on the machine in order to build a supported project.  You should be able to install an MSBuild and a package manager (NuGet), and away you go building projects (restoring the required build assets as necessary).\r\n\r\nThis way you don\'t need to install VS on a build server.  Or on any machine you want to build.  It lowers the barrier of entry for people to collaborate on a project.  \r\n\r\n`$git clone XXX`\r\n`build`\r\n\r\nAgain this is just my opinion, but I think we should refactor these ""SDK""s to align with the [MSBuild SDK vision](https://github.com/Microsoft/msbuild/issues/1493) before we take these changes into `dotnet/sdk`.'"
889,105454416,"b""> These won't work at all with dotnet build. It only works with MSBuild.exe\r\n\r\nThen I think the layering is broken here.  As it states in the [README of this repo](https://github.com/dotnet/sdk#welcome-to-dotnet-sdk):\r\n\r\n> Core functionality needed to create .NET Core projects, **that is shared between VisualStudio and CLI**."""
978,105515570,b'`Nuetered` should probably not be used here.'
978,105515709,"b""?? Shouldn't we overwrite it if it already exists?  What if it doesn't contain the correct information?"""
978,105515745,b'local variables should not start with `_`.  Private fields should.'
978,105516302,"b'Why?  That target is for ""build"", this is for ""publish"".'"
978,105516702,"b""Won't this result in always referencing this package?  Even if I'm a portable app?"""
978,105516829,b'Why use 2 items here?  Why not just Include this into `<ResolvedFileToPublish>`?'
978,105516894,"b""Again, please don't use Nuetered."""
978,105516941,b'Why is this named `referencer`?'
978,105516999,"b""this comment doesn't belong.  We use a self-contained app because thatis what we are testing."""
978,105517142,b'Really?'
978,105517286,"b""Probably shouldn't be hard-coding `.dll` here.  If you really need the extension, use `$(TargetExt)`.  Why do we use the extension in the AppName?"""
978,105670679,"b'You can set metadata on the item even without using a separate item type here:\r\n\r\n```\r\n      <ResolvedFileToPublish Include=""%(NativeAppHostNETCore.Identity)"">\r\n        <RelativePath>$(AssemblyName)%(Extension)</RelativePath>\r\n      </ResolvedFileToPublish>\r\n```\r\n\r\nWorks and is simpler and more performant.'"
978,105672816,"b""What is the point of having the `Microsoft.NETCore.DotNetHost` package anymore?  We will never use the `dotnet` executable from it, since standalone apps always use `DotNetAppHost`.\r\n\r\nSo instead of doing it this way, why don't we just put the `apphost` executable into the `DotNetHost` package?\r\n\r\nAlternatively, change `Microsoft.NETCore.App` to reference `Microsoft.NETCore.DotNetAppHost` and remove the reference to `Microsoft.NETCore.DotNetHost`."""
978,105673545,"b""If it would always be a `.dll`, then we wouldn't have the `$(TargetExt)` property.  We would just hard-code `.dll` everywhere.\r\n\r\nUse the property."""
978,105673793,"b'But again, why do we put the extension in the AppName?  `MyApp` isn\'t ""named"" `MyApp.dll`.'"
978,105715662,"b""Correct, here and other places in the code `'$(RuntimeIdentifier)' != ''` means it is a standalone app."""
978,105719167,"b""Why not remove the reference to `Microsoft.NETCore.DotNetHost`?  What's the point of referencing it?"""
978,105730479,"b""> the latter three may not ever change once released\r\n\r\nWe haven't released 2.0 yet, so we can change it."""
978,105730998,"b""Aren't you breaking `1.x` standalone apps with this change?"""
978,105731396,"b""I'm specifically talking about `2.0.0`.  Why would we keep referencing `Microsoft.NETCore.DotNetHost` in `2.0.0`?  Customers would never use this nor need it."""
978,105747376,"b'Does this need to be an Item?  Normally, Items are used for multi-values, or if you need to put metadata on the value.  All we are doing here is returning a string.'"
978,105752560,"b'No it doesn\'t.  Just like:\r\n\r\n```\r\n<Content Include=""File1"">\r\n</Content>\r\n\r\n<Content Include=""File2"">\r\n  <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n</Content>\r\n```\r\n\r\nIn that scenario, how many files get copied to the output directory?  Only `File2`.  Adding a new Item and setting metadata on the item doesn\'t set the metadata on all the existing files in that item.'"
978,105755234,b'Why are we duplicating this logic here?  Why not just let the logic below do this?'
978,105757072,"b""https://github.com/dotnet/core-setup/issues/1722\r\n\r\n> but that does not affect the change here in SDK\r\n\r\nIt does affect the change here in the SDK.  If we configure the packages efficiently, the tooling doesn't need all this logic in it.  See the issue above.  In this change we are doing things like \r\n\r\n* Delete the `dotnet.exe` file from the published files.\r\n* First look for `apphost.exe`, if that isn't found fall back to `dotnet.exe`.\r\n\r\nThe tooling logic can be a lot simpler."""
999,106543757,"b'Should this get reset, like the above comment indicates?'"
999,106543880,"b'Or I guess it is the same year, so no real reason to touch it.'"
978,106685094,"b""Doesn't need to be public."""
978,106685537,"b""This string has an arg for it:\r\n\r\n`<value>The App host does not have the embedded hash value  '{0}'</value>`, but I don't see you providing it here."""
978,106685774,b'(nit) coding style is to explicitly declare visibility.  `private`'
978,106686358,"b'(We should only do this if we are super worried about perf)\r\n\r\nSince we are always searching for the same hard-coded string, it would be more performant to also hard-code the ""FailureFunction"" array as well.  That way we wouldn\'t need to compute the same thing every time.'"
978,106691403,"b'Please revert this whole file.  No reason to change this file, it will just be junk in the source control history.'"
978,106692293,"b""Don't hard-code `.dll`.  Use `$(TargetExt)`"""
978,106693203,b'Why is this called `referencerAsset`?'
978,106693353,"b""You don't need to pass `/p:RuntimeIdentifier={rid}` to publish.  That value is already hard-coded into the .csproj up above.  You can just say `.Execute()`."""
978,106693673,"b'Why do we use `Constants.DynamicLibSuffix`, but we hard-code our own prefix?'"
978,106693780,b'Do you also want to ensure that the executable has the app name embedded in it correctly?'
1024,107304794,"b""Let's use `RepoInfo.NetCoreApp20Version` instead of hard-coding this.  That way it gets updated periodically."""
1024,107304840,b'Why `net462`?'
1024,107305027,b'How long do these tests take to run?  Do we think the value we are getting out of every single permuation is worth the length of test time?'
1024,107305124,b'I only ever see `true` being passed in to `buildSucceeds`. Do we need this parameter?'
1024,107429540,"b'I was a little too terse above.\r\n\r\nThe comment says `//  Workaround for .NET Core 2.0`, and we are setting `ret.RuntimeFrameworkVersion = ""2.0.0-beta-001689-00"";`, which should have no impact on `net462`.  So why are we checking for `net462` here?'"
1024,107436950,"b'Can you explain `""2.0.0-beta-001689-00"" does indeed have an impact on net462;`?  I\'m not making the connection on how this property will impact net462.'"
1024,107473159,"b'Doing some looking at the Jenkins runs, it looks like these tests are doubling the job time in Jenkins.\r\n\r\nRuns without your change take between 7-8 minutes:\r\nhttps://ci.dot.net/job/dotnet_sdk/job/master/job/release_windows_nt_prtest/217/\r\nhttps://ci.dot.net/job/dotnet_sdk/job/master/job/release_windows_nt_prtest/218/\r\n\r\nYour runs are taking 16 minutes:\r\nhttps://ci.dot.net/job/dotnet_sdk/job/master/job/release_windows_nt_prtest/223/\r\n\r\nAre we getting that much value out of these tests?'"
1024,107795515,"b'does `{dependency.Name}` need to be quoted for it to be a string?  `return ""MyName"";`'"
1024,107795624,b'Or is this simply a stackoverflow waiting to happen?\r\n\r\n---\r\nIn reply to: [107795515](https://github.com/dotnet/sdk/pull/1024#discussion_r107795515) [](ancestors = 107795515)'
1053,108969012,"b""I need to add a comment here.\r\n\r\nBasically, `IsPortable` != `IsFrameworkDependent` and `IsPortable` != `!IsSelfContained`.\r\n\r\nBut `IsFrameworkDependent` == `!IsSelfContained`.  (for now until we add some other app model where it doesn't run on a shared framework and still isn't self-contained.)\r\n\r\n`IsPortable` means your app can run on any machine. It is portable across architectures, OSes, etc.\r\n`IsFrameworkDependent` means your app runs on the shared framework, but it can still be runtime-specific.  note: `IsPortable` [implies](https://en.wikipedia.org/wiki/Truth_table#Logical_implication) `IsFrameworkDependent`\r\n`IsSelfContained` means everything required to run your app is located in your publish output.\r\n\r\nIn this case, DependencyModel is strictly asking for `IsPortable`, not `IsFrameworkDependent` or `!IsSelfContained`.  And [looking under the hood](https://github.com/dotnet/core-setup/blob/master/src/Microsoft.Extensions.DependencyModel/DependencyContextJsonReader.cs#L94-L100), DependencyModel treats `IsPortable` and an empty `RuntimeIdentifier` the same.  In a perfect world, this boolean wouldn't be needed to be passed here."""
1062,109452580,"b'>  if you haven an app and library as ProjectReference, the documentation file of the library is published with the app\r\n\r\nCan you add a test for this?  I think using the `KitchenSink` project would be the easiest.  You could probably change your two tests below to use that TestAsset, and be able to test all these scenarios pretty easy.'"
1053,109491597,b'Done on both of these.'
1053,109493154,"b""I kind of like the readability of the way it is. It is very straight-forward to understand (at least to me).  The compiler will remove the `if` statement in release mode, since it is empty, so it isn't like it will affect the outputted assembly code.\r\n\r\nDo you have a strong opinion on this?"""
1052,109667521,"b""I'm not sure if this was in your plan or not, but instead of generating everything into the .deps.json file, and then removing the conflicts in a separate task, we should just be feeding the Conflicts into the original GenerateDepsFile task.  Then we can generate the whole thing in one shot.\r\n\r\nIt makes the logic simpler, and more efficient."""
1052,109667780,b'Is this the best file name for this targets file?'
1052,109667921,"b""I don't think we need to handle NuGet 2 or 3.  We will only ever support the NuGet we are using."""
1052,109668161,"b""We shouldn't need this condition/hack.  We obviously know that the project is using this SDK, because this file is being loaded from our SDK."""
1052,109668386,b'It was my understanding that trimming was not a 2.0 feature.  Should this be removed?'
1052,109668678,"b""We shouldn't need this file nor the .builds file.\r\n\r\nAll these targets and tasks should just come with our SDK just like any other targets and task."""
1052,109668822,b'We already have this file in our SDK.  This can be removed.'
1052,109669389,b'This needs the change I made here: https://github.com/dotnet/standard/pull/283/files'
1062,109678205,"b""@rainersigwald @cdmihai @KirillOsenkov @jeffkl - are documentation files the only type of `xml` files that can get put in `@(ReferenceCopyLocalPaths)`?  Is there some other way to distinguish what is a P2P reference's doc file?\r\n\r\nI'm not sure who else would know this, maybe @ericstj @weshaggard @davkean ...?"""
1052,109700860,"b'It would be good to also test ""low fat apps"" as well.  See https://github.com/dotnet/sdk/pull/1053.'"
1052,109732184,b'I just made a fix for that. https://github.com/dotnet/core-setup/pull/1936\r\n\r\nThat fix is in `2.0.0-preview1-001913-00`.'
1052,109732595,b'That build is working its way into the CLI now.  @dotnet-bot should be updating https://github.com/dotnet/cli/pull/6238 with the `1913` version soon.'
1052,109733759,"b'If we are leaving it in, we should have tests for it.'"
1052,109791236,b'@dsplaisted - there is a new CLI build that contains this fix:\r\n\r\n`2.0.0-preview1-005722`'
1076,109798346,"b'Since there are other targets after this target:\r\n\r\n                            GeneratePublishDependencyFile;\n                            GeneratePublishRuntimeConfigurationFile\r\n\r\nIt feels like this message should get written out at the very end of publish.  Maybe making a new target that is ""PublishCompleted"" or something similar?'"
1079,109971008,b'Added.'
1052,110246550,"b""Can this just go in [https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/NuGetUtils.cs](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/NuGetUtils.cs) so we don't have 2?"""
1052,110246730,"b'Can we either log an issue for this, or implement it?  We ARE the .NET Core SDK.'"
1052,110247187,"b""In general the approach we've been taking is that the test method name should describe the test, and not have a comment that is duplicate and can get out of date."""
1052,110247782,"b""I don't see this class used.  Can it be removed?"""
1052,110248336,b'(suggestion) I find an extension method on string named `FormatInvariantCulture` works well to cut down on duplicating this everywhere.'
1052,110249075,b'Can this be refactored with the existing [https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/ITaskItemExtensions.cs](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/ITaskItemExtensions.cs)?'
1052,110249366,b'Does this need to be `partial`? There is no other partial file.'
1052,110249959,b'`_exists`?  repeated throughout.'
1052,110250559,b'should derive from `TaskBase`.\r\n\r\ndoes this need `partial`?'
1052,110251512,b'`private`?  repeated throughout.'
1052,110251724,b'(nit) a bunch of extra newlines.'
1052,110251972,b'@livarcocc would complain about the length of this line.  :)'
1052,110252124,b'Do we support `winmd`?'
1052,110252515,b'Should we change this whole thing to use globbing?'
1052,110252653,b'(nit) sort usings.'
1052,110252704,b'`private` and `_compileFilesToSkip`.'
1052,110253046,"b'Yes, in general the `GenerateDepsFile` task should be pretty implementation free.  It just turns all the inputs into whatever `DependencyContextBuilder` needs.  And then it writes the file.\r\n\r\nPlease put this logic into `DependencyContextBuilder`.\r\n\r\n---\r\nIn reply to: [110251089](https://github.com/dotnet/sdk/pull/1052#discussion_r110251089) [](ancestors = 110251089)'"
1052,110253842,"b'I\'m wondering if we should not emit the library if there are no assets in it.  @ericstj @pakrym, what do you think?\r\n\r\nThat way we don\'t have a bunch of empty ""System.XXX"" libraries when they have all been conflict resolved out.'"
1052,110254840,"b""I don't understand why we are making this change here.  It seems irrelevant to your current feature work and shouldn't be modified."""
1052,110255274,b'Why hard-code xml here just to parse it below?'
1052,110255865,"b""We should probably have a test that verifies the .deps.json file is trimmed correctly.  I don't see one.  It could probably go into Microsfot.NET.Build.Tests"""
1052,110260918,b'This should pass in $(IsSelfContained)'
1052,110262138,"b'Note here that the deps file that is produced for ""build"" is different than the deps file that is produced for ""publish"", that is why they are called twice.\r\n\r\nOne of the main reasons for this is because of the push to make ""self-contained"" a publish time decision.\r\nAnother reason is because `PrivateAssets=All` assets are in the deps file for ""build"", but they are excluded on ""publish"".\r\n\r\n---\r\nIn reply to: [110252304](https://github.com/dotnet/sdk/pull/1052#discussion_r110252304) [](ancestors = 110252304)'"
1052,110262316,"b'Do we want these ""Conflicts"" Targets to be part of our ""public API""?'"
1052,110262410,"b'If not, we should prefix the name with ""_"".\r\n\r\n---\r\nIn reply to: [110262316](https://github.com/dotnet/sdk/pull/1052#discussion_r110262316) [](ancestors = 110262316)'"
1052,110414517,"b'So then why not just leave these tests alone?  Again, changing these tests seems irrelevant to your current work.'"
1052,110415366,"b'1. I think these ""handle conflicts"" targets are implementation details, and shouldn\'t be part of our public API.\r\n2. Generating the deps file isn\'t an implementation detail.  The deps file is a user artifact.\r\n3. I think we need to have an ""all up"" extension story on what we think we can and can\'t change across versions of the SDK.  The current approach has been to prefix ""private"" things with `_`. If that is changing here, we should document it somehow to let people know what our extension story is.'"
1052,110419049,"b""I can go either way.\r\n\r\nBut the reason I brought it up is because if NuGet was doing this conflict resolution, you wouldn't see this library at all in the `project.assets.json` file, thus it wouldn't be in the deps file.  However, since NuGet can't do this resolution (because we are collapsing the System.XXX libraries into Microsoft.NETCore.App), these old System.XXX v4 libraries are showing up in the deps file."""
1052,110419959,"b""@dsplaisted - I'm totally fine if you don't make this change in this PR and log a separate issue for this."""
1052,110686898,"b'I assume the Packaging.Tools package will change to not be enabled for SDK projects, and then this property can just go away.  Do we have a bug logged to track that?'"
1052,110687375,"b""These types don't need to be public, do they?\r\n\r\n---\r\nIn reply to: [110278890](https://github.com/dotnet/sdk/pull/1052#discussion_r110278890) [](ancestors = 110278890)"""
1119,111411254,"b'These casing changes are caused from using the new DependencyModel version that doesn\'t have all the ""ToLower"" hacks in it to work around the NuGet breaking change for netcoreapp1.0.\r\n\r\n---\r\nIn reply to: [111397750](https://github.com/dotnet/sdk/pull/1119#discussion_r111397750) [](ancestors = 111397750)'"
1119,111411907,b'This should be true now right?  Can we get an issue logged for this TODO so we do this testing?'
1119,111412176,"b""Should have an end-to-end test that ensures when this package can't be found (because the runtime store is unavailable), that a good exception is displayed."""
1119,111413133,b'This chunk of logic should be encapsulated in a method to enable easier reading.'
1119,111416417,"b'Could use:\r\n\r\n`_packagesThatWhereFiltered?.TryGetValue(pkg, out listofManifests) == true` instead.'"
1119,111416890,"b'We should use a `;` separator here, so we can tell the difference between a file name with space in it, and two separate files.'"
1119,111417756,"b'I\'m not crazy about putting this in between the ""Publish"" comment above and the ""Publish"" target below.  I see there is already ""stuff"" in between them, but adding to this makes it messy, IMO.'"
1121,111424322,"b'This seems like a pretty specific thing to be on the general `TestAsset`.  The above method went from something that was more general ""netstandard1.3. stuff"", to ""ConflictResolution""-specific.\r\n\r\nIs there a better place for this conflict resolution stuff than on the general `TestAsset`?'"
1121,111433576,b'Can we remove this comment?  It seems unnecessary.'
1119,111480300,b'@livarcocc @dsplaisted - ?'
1119,111480874,"b""Looks like you are talking about https://github.com/dotnet/cli/blob/master/test/dotnet-store.Tests/GivenDotnetStoresAndPublishesProjects.cs#L101-L104.\r\n\r\nAs long as we ensure this test fails when these changes are merged, then I'm fine with continuing to test the end-to-end in the cli."""
1128,111981249,"b""This this always going to hold true?  What if the project.assets.json file was restored with `netcoreapp1.0`?  Won't `GenerateBuildDependencyFile` raise an error because there isn't a `netcoreapp2.0` target in the lock file?"""
1128,111981495,"b'Instead of duplicating these property defaulting in two places, can we default it in a common spot?'"
1128,111981852,b'Maybe `DotnetCliToolTargetFramework` should be passed in to this project?  Or the `TargetFramework` should be passed in?\r\n\r\n---\r\nIn reply to: [111981249](https://github.com/dotnet/sdk/pull/1128#discussion_r111981249) [](ancestors = 111981249)'
1128,111982912,"b""This logic concerns me.  I don't think this will work correctly if the project includes P2P references.\r\n\r\nMaybe alternatively, we always create a `mainProjectInfo`, and instead have a boolean on it - `IncludeInDependencyContext` or something similar?"""
1128,111983498,"b'Again, a test would be nice here - have a project that sets `<IncludeMainProjectInDepsFile>false</IncludeMainProjectInDepsFile>` and has a P2P reference.\r\n\r\nI think this kind of scenario could be used in situations like the dotnet/cli uses.  See [https://github.com/dotnet/cli/blob/master/src/redist/redist.csproj#L62-L64](https://github.com/dotnet/cli/blob/master/src/redist/redist.csproj#L62-L64) where we have to go and strip the ""main project"" from the deps file.\r\n\r\n---\r\nIn reply to: [111982912](https://github.com/dotnet/sdk/pull/1128#discussion_r111982912) [](ancestors = 111982912)'"
1128,113713824,b'`NuGetCachePath`?'
1128,113718502,"b'I wonder if we need to go this far?\r\n\r\nCould we get away with just testing the GenerateDeps.proj file without bringing a bunch of ""tools"" stuff.  Just get a project.assets.json file, and invoke the GenerateDeps.proj file on it....\r\n\r\nthoughts?'"
1128,113718840,b'Can we get this version from our DependencyVersions.props file?  That way we are constantly updating it.'
1128,113729716,"b""Then let's use a released version, like `1.0.0` or `1.1.0`, etc.  Not some random daily build."""
1156,113775129,"b'Note: this change, and the similar one below are fixing a bug to allow the user to set the `RuntimeIdentifier` in their manifest file.  Today it only works if they pass it in on the command line.'"
1163,114137112,b'Can this go with the rest of the removes?\r\n\r\nhttps://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Sdk.DefaultItems.props#L26'
1163,114137340,"b'Oh, I see from your description why this doesn\'t work.  Then the real question is:\r\n\r\nCan you move all the other ""Removes"" to this location so they actually do something?  Especially this one:\r\n`<None Remove=""**/*$(DefaultLanguageSourceExtension)"" Condition="" \'$(EnableDefaultCompileItems)\' == \'true\' ""/>`\r\nsince it is pretty much a dupe of what you have here.'"
1163,114145641,"b""I think @dsplaisted has the context here and can make the right decision.  I didn't even know we were globbing every file into `None` items."""
1171,114663336,b'How concerned are we about breaking changes to the public APIs of these Tasks?'
1171,114663654,b'type-o `th`'
1171,114663834,b'copy-paste `NETStandard.Library`'
1171,114664004,b'This comment could use an update for the latest logic.'
1171,114664128,b'Is this the right place to be updating these items?'
1171,114672360,"b'I guess the most concerning thing is that the target is named `ComputeExcludeFromPublishPackageReferences`, and ""computing"" something doesn\'t necessary scream ""modify the inputs"" to me.'"
1178,114863256,"b'I was under the assumption that things like Test projects were going to set `$(IsExecutable)` to true.  If that\'s the case, then I don\'t think these two lines should be changed.\r\n\r\nThe ""Run Information"" is used during F5 and `dotnet run`.  If you try to `dotnet run` a Test project, will it try to execute the Test\'s $(TargetPath), which is a .dll on .NET Framework.  Thus failing with a bad error.'"
1178,114863586,"b'Also, if Test projects are expected to set this property, I think we should think about the best name to use for this property.'"
1178,114878976,"b'Test projects aren\'t ""executable"".  You can\'t double-click on it\'s output and expect the test to run.  You can\'t type into a command-line `C:\\mytest\\mytest.dll` and watch the tests run.\r\n\r\n> I am open for a better name.\r\n\r\nThe list I came up with before (which we can add more to) was:\r\n\r\n- TreatAsExecutable\r\n- HasRuntimeOutput\r\n- HasRunnableOutput\r\n- HasExecutableOutput\r\n- IsExecutable\r\n- IsRunnable\r\n\r\nI think the one I like most, given all the situations this is going to be used, is what we landed on in the project.json world: `HasRuntimeOutput`.  The output isn\'t ""runnable"" or ""executable"", but instead the output is associated with a runtime, and that\'s why we can generate binding redirects and deps.json files that will work at runtime.\r\n\r\n> I would think this would be valid and part of setting IsExecutable=true would involve having uses configure the F5 information (to use xunit, nunit, dotnet, etc...)\r\n\r\nThat\'s exactly my point.  Look at the rest of the code around this area that I commented on.  If `IsExecutable=true` on a test project, the ""Run Information"" being returned says that you can just run the output directly:\r\n\r\n```XML\r\n<PropertyGroup>\r\n  <RunCommand Condition=""\'$(RunCommand)\' == \'\'"">$(TargetPath)</RunCommand>\r\n  <RunArguments Condition=""\'$(RunArguments)\' == \'\'"">$(StartArguments)</RunArguments>\r\n```\r\n\r\n> However, maybe having a separate variable to disable (or explicitly enable) F5 for some scenarios would be desirable\r\n\r\nAgain, that\'s what the `RunCommand` property is for.  If it is set, you can `dotnet run` or F5 this project.  If it isn\'t set, then you can\'t.'"
1178,114922832,"b'Sorry, I meant to reply to this earlier.\r\n\r\nThis sounds like a great plan.  Thanks.'"
1178,115093788,"b""This should stay `'$(OutputType)' == 'Exe'` or $(_IsExecutable)..  Tests won't get a `$Test.exe`. """
1178,115094074,"b""Should stay '$(OutputType)' == 'Exe' or $(_IsExecutable)."""
1178,115094084,"b""Should stay '$(OutputType)' == 'Exe' or $(_IsExecutable)."""
1178,115094243,"b""Should stay '$(OutputType)' == 'Exe' or $(_IsExecutable).  I discussed this prevously that tests are not `dotnet run` able, becuase you can't just run the output assembly."""
1178,115094273,"b""Should stay '$(OutputType)' == 'Exe' or $(_IsExecutable)."""
1178,115101019,"b""My comment was a little vague.  I meant this should either:\r\n\r\n- stay '$(OutputType)' == 'Exe'\r\nor\r\n- use $(_IsExecutable)\r\n\r\nI didn't mean the MSBuild code should be ` '$(OutputType)' == 'Exe' or $(_IsExecutable)`"""
1178,115101178,"b'This should be \r\n\r\n`<HasRuntimeOutput Condition=""\'$(HasRuntimeOutput)\' == \'\'"">$(_IsExecutable)</HasRuntimeOutput>`'"
1178,115101389,"b""This should actually have a `Is .NET Core` check on it too.  RuntimeConfigurationFiles don't make sense for desktop or mono.\r\n\r\nBut I don't think you have to make the change here.  Someone should at some point."""
1222,117530108,"b""I'd use the term `FrameworkDependent` in code.  This is the term we use in documentation:  [https://docs.microsoft.com/en-us/dotnet/articles/core/deploying/](https://docs.microsoft.com/en-us/dotnet/articles/core/deploying/)\r\n\r\nAnd also in the rest of the SDK code: [https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/ProjectContext.cs#L19-L23](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/ProjectContext.cs#L19-L23)"""
1222,117530546,"b'NIT: I think putting some args on new lines, and some inline makes this hard to read.'"
1222,117530708,b'Why did this change to `private`?'
1245,118286041,"b""I'll fix this in the new files I'm adding.  Note that this is a pattern used in about half the places this repo."""
1245,118300237,"b""You're right.  Moved to netcoreapp2.0."""
1251,118372463,b'What does `post` mean in the name?'
1251,118373012,"b""`{Constants.ExeSuffix}` - this won't work correctly when this test is run on OSX or Linux.  When running on those platforms, `Constants.ExeSuffix` will be string.Empty.  However, since the project always targets Windows, the output self-contained executable will always be for Windows.  Thus no matter which platform this test is run on, the output assembly will be named `Hello.exe`.\r\n\r\nSo I think you can just hard-code `.exe` here."""
1251,118373060,"b""This variable doesn't appear to be used."""
1251,118373205,b'Same comment as above here.  The app will always target Windows.  Thus these files will always be named:\r\n\r\n`coreclr.dll`\r\n`hostfxr.dll`\r\n`hostpolicy.dll`.'
1251,118495856,b'The `selfContainedExecutableFullPath` variable is not used.  Can it be removed?'
1251,118496150,b'What do you think about adding `win10-arm64` to this list?'
1251,118501220,b'Sounds good to me.  Thanks for the explanation.'
1251,118501612,"b'Yes, the list of files will be the same.  Obviously, the contents of those files will be different, but the names will be the same.'"
1262,119093245,b'When do we verify that the RID has been restored?  Or is the existing error behavior good enough?'
1262,119093405,b'Does it make sense to have a `RuntimeIdentifier` parameter that is never used?'
1262,119205625,b'/cc @natidea - Looks like he wrote that test originally.  @natidea - any ideas/thoughts/opinions?'
1272,119215079,"b'It is definitely still necessary.  I took this check away and a bunch of the Reference Assemblies (ex. `mscorlib.dll`) were no longer getting picked up.\r\n\r\nDebugging into it, by the time it gets to `GenerateDepsFile`, I see `mscorlib` defined like this:\r\n\r\n```\r\nC:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\mscorlib.dll\r\n    CopyLocal=false\r\n    FileGroup=FrameworkAssembly\r\n    FrameworkAssembly=mscorlib\r\n    FrameworkFile=true\r\n    FusionName=mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n    ImageRuntime=v4.0.30319\r\n\tNuGetIsFrameworkReference=true\r\n    NuGetPackageId=System.Xml.XPath.XDocument\r\n    NuGetPackageVersion=4.3.0\r\n    NuGetSourceType=Package\r\n    OriginalItemSpec=mscorlib\r\n    PackageName=System.Xml.XPath.XDocument\r\n    PackageVersion=4.3.0\r\n    ParentPackage=System.Xml.XPath.XDocument/4.3.0\r\n    ParentTarget=.NETFramework,Version=v4.6.1\r\n    Private=false\r\n    Redist=Microsoft-Windows-CLRCoreComp.4.6.1\r\n    ReferenceAssembly=%(FullPath)\r\n    ReferenceSourceTarget=ResolveAssemblyReference\r\n    ResolvedFrom={TargetFrameworkDirectory}\r\n    Version=4.0.0.0\r\n```\r\n\r\nNote this:\r\n\r\n```\r\n    NuGetPackageId=System.Xml.XPath.XDocument\r\n    NuGetPackageVersion=4.3.0\r\n    NuGetSourceType=Package\r\n```\r\n\r\nNo clue who is putting this here, and I didn\'t take the time to investigate yet.\r\n\r\nI\'m not sure the best way to check for framework ""reference assembly"" assemblies, but this was the existing logic, and it didn\'t feel like a good time changing it.  Especially since I tried changing it and it broke - \xf0\x9f\x98\x9e '"
1272,119217286,"b""Good point.  I'll rename."""
1272,119223283,"b'Yes, the reason is because one set is used here https://github.com/eerhardt/sdk/blob/737411dd7f66ce1a7c999c0a74c329fc6d4385b6/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.PreserveCompilationContext.targets#L89'"
1272,119225251,"b'Agreed.  The first place I see this line comes from:\r\n\r\n```\r\nAdded Item(s): \r\n                       ResolvedFrameworkAssemblies=\r\n                           System.Xml\r\n                                   FileGroup=FrameworkAssembly\r\n                                   FrameworkAssembly=System.Xml\r\n                                   NuGetIsFrameworkReference=true\r\n                                   NuGetPackageId=System.Xml.XPath.XDocument\r\n                                   NuGetPackageVersion=4.3.0\r\n                                   NuGetSourceType=Package\r\n                                   PackageName=System.Xml.XPath.XDocument\r\n                                   PackageVersion=4.3.0\r\n                                   ParentPackage=System.Xml.XPath.XDocument/4.3.0\r\n                                   ParentTarget=.NETFramework,Version=v4.6.1\r\n                                   Private=false\r\n                           System.Xml.Linq\r\n                                   FileGroup=FrameworkAssembly\r\n                                   FrameworkAssembly=System.Xml.Linq\r\n                                   NuGetIsFrameworkReference=true\r\n                                   NuGetPackageId=System.Xml.XPath.XDocument\r\n                                   NuGetPackageVersion=4.3.0\r\n                                   NuGetSourceType=Package\r\n                                   PackageName=System.Xml.XPath.XDocument\r\n                                   PackageVersion=4.3.0\r\n                                   ParentPackage=System.Xml.XPath.XDocument/4.3.0\r\n                                   ParentTarget=.NETFramework,Version=v4.6.1\r\n                                   Private=false\r\n                           mscorlib\r\n                                   FileGroup=FrameworkAssembly\r\n                                   FrameworkAssembly=mscorlib\r\n                                   NuGetIsFrameworkReference=true\r\n                                   NuGetPackageId=System.Xml.XPath.XDocument\r\n                                   NuGetPackageVersion=4.3.0\r\n                                   NuGetSourceType=Package\r\n                                   PackageName=System.Xml.XPath.XDocument\r\n                                   PackageVersion=4.3.0\r\n                                   ParentPackage=System.Xml.XPath.XDocument/4.3.0\r\n                                   ParentTarget=.NETFramework,Version=v4.6.1\r\n                                   Private=false\r\n```\r\n\r\nFrom this target:\r\n`Target ""_ComputeLockFileFrameworks: (TargetId:16)"" in file ""F:\\sdk\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets"" from project ""F:\\git\\Mvc\\test\\WebSites\\BasicWebSite\\BasicWebSite.csproj"" (target ""ResolveLockFileReferences"" depends on it):`\r\n\r\nhttps://github.com/dotnet/sdk/blob/67fd3a133eb052fe396377b09b291cf32cd88212/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.PackageDependencyResolution.targets#L346-L361\r\n\r\nLooking to the input of that task, I see:\r\n\r\n```\r\n                            Microsoft.Win32.Registry/4.4.0-preview2-25328-01/mscorlib\r\n                                   FileGroup=FrameworkAssembly\r\n                                   FrameworkAssembly=mscorlib\r\n                                   PackageName=Microsoft.Win32.Registry\r\n                                   PackageVersion=4.4.0-preview2-25328-01\r\n                                   ParentPackage=Microsoft.Win32.Registry/4.4.0-preview2-25328-01\r\n                                   ParentTarget=.NETFramework,Version=v4.6.1\r\n                           System.AppContext/4.3.0/mscorlib\r\n                                   FileGroup=FrameworkAssembly\r\n                                   FrameworkAssembly=mscorlib\r\n                                   PackageName=System.AppContext\r\n                                   PackageVersion=4.3.0\r\n                                   ParentPackage=System.AppContext/4.3.0\r\n                                   ParentTarget=.NETFramework,Version=v4.6.1\r\n...\r\n                           System.Xml.XPath.XDocument/4.3.0/mscorlib\r\n                                   FileGroup=FrameworkAssembly\r\n                                   FrameworkAssembly=mscorlib\r\n                                   PackageName=System.Xml.XPath.XDocument\r\n                                   PackageVersion=4.3.0\r\n                                   ParentPackage=System.Xml.XPath.XDocument/4.3.0\r\n                                   ParentTarget=.NETFramework,Version=v4.6.1\r\n```\r\n\r\nLooks like Xml.Xpath.XDocument is just the last one defined, so it ""wins"" at the end.'"
1272,119226216,"b'I thought of that approach, but decided against it because it was ""too unit-testy"" and this felt more like what a user is actually going to do.\r\n\r\nI think when https://github.com/dotnet/sdk/issues/1267 is implemented, this test should be updated accordingly to what the new officially supported approach is for users to use netstandard2.0 on their desktop apps.'"
1272,119227788,"b""I modeled this target after [`CopyFilesToOutputDirectory`](https://github.com/Microsoft/msbuild/blob/a61828925261696fde4c57d0a809de06e1d9bad3/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4021), which doesn't set Inputs/Outputs.  Instead, each of the Copy tasks doesn't actually do the copy, since the file is unchanged and `$(SkipCopyUnchangedFiles)` is `true`.\r\n"""
1272,119228124,"b'Added.  The only input to this Target is `@(ReferencePath)`, which is populated by `ResolveAssemblyReferences`.'"
1279,119991100,b'This comment seems like a copy-paste error.'
1297,120136122,b'It would be nice to use these consts here:  [https://github.com/dotnet/sdk/blob/release/2.0.0/src/Tasks/Microsoft.NET.Build.Tasks/MetadataKeys.cs#L15-L16](https://github.com/dotnet/sdk/blob/release/2.0.0/src/Tasks/Microsoft.NET.Build.Tasks/MetadataKeys.cs#L15-L16) so we ensure we are using consistent metadata names across the board.'
1297,120137699,"b""I don't understand why this is called `ExclusionList`.  It seems like you are just returning all the transitive dependencies of the specified package."""
1297,120137823,b'This method is almost a complete duplicate of the method above it.  Can you refactor to share code here?'
1297,120140208,b'We have been moving away from this pattern in this repo.  See [https://github.com/dotnet/sdk/pull/1245#discussion_r118145348](https://github.com/dotnet/sdk/pull/1245#discussion_r118145348)'
1297,120140657,b'I made a helper method for this logic a few days ago.  Check out `ItemUtilities.GetPackageIdentity`.'
1297,120141708,"b'Is `package.Id` guaranteed to be unique across all the returned packages?  If not it would probably be best to put `Id/Version` as the TaskItem.ItemSpec to ensure it is unique.\r\n\r\nSomething like:\r\n\r\n```C#\r\nstring packageName = resolvedPkg.Id;\r\nstring packageVersion =resolvedPkg.Version.ToNormalizedString();\r\n\r\nTaskItem item = new TaskItem($""{packageName}/{packageVersion}"");\r\nitem.SetMetadata(MetadataKeys.PackageName, packageName);\r\nitem.SetMetadata(MetadataKeys.PackageVersion, packageVersion);\r\n```'"
1297,120142413,b'comment seems out of date.'
1297,120155747,"b""What is `EvaluationIteration` here and below when set to `2` used for? I don't see these properties being consumed anywhere."""
1297,120181618,b'Maybe this should pass the whole `$(TargetFrameworkIdentifier)` in instead of hard-coding `.NET Core`.'
1297,120181746,b'nit: `inserts.them`'
1297,120182285,"b""I meant `$(TargetFrameworkMoniker)` above.  Not Identifier, since Identifier doesn't have the version.\r\n\r\n---\r\nIn reply to: [120181618](https://github.com/dotnet/sdk/pull/1297#discussion_r120181618) [](ancestors = 120181618)"""
1297,120182660,"b""Why did `obj` get removed from this path?  Shouldn't the assets file go into the `obj` folder?"""
1297,120183548,"b""I'm not sure if this is the correct place to default this value.  Also, I'm not sure this is the correct default either.\r\n\r\nIs this line necessary?"""
1297,120183938,"b'I think dependencies like this make it hard to reason about the flow.  ComposeStore depends on CrossGen, but here CrossGen is depending back on ComposeStore targets.  It would be nice if there was a clear graph of dependencies between these two sets of targets.'"
1297,120186982,"b'Should we be relying on this NuGet target?  It has an `_` at the beginning, which usually means it should be considered \'private\'.\r\n\r\nAlso, is this target early enough?  Do we just want to say this should happen `BeforeTargets=""Restore""`?  Is it guaranteed that no earlier target will be reading `@(PackageReference)` before this target is called?'"
1297,120187537,"b'This target doesn\'t really ""insert them one by one"".  Instead this target just inserts the one specified PackageReference.  It is the Target that calls Restore with different `StorePackageName` values that does it ""one by one"".'"
1297,120196893,"b""Why doesn't `SelfContained` get defaulted in the place it normally gets defaulted?  https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.RuntimeIdentifierInference.targets#L107-L110"""
1297,120198075,"b'Use `OnlyHaveFiles`, to make sure no unexpected files are there.'"
1297,120199823,"b""Then I'd say to account for it in the test.  It is best to be very strict about our outputs, in general."""
1306,120372395,"b""This should assert that the file exists, not silently ignore when the file doesn't exist."""
1306,120375067,"b'This feels odd that we are passing part of the path in on a parameter named `DeveloperStoreLocation`, and then the C# code appends more folders to the path.\r\n\r\nInstead, I would expect the whole path to be built in one location (the MSBuild targets), and then passed in.  That way if, for whatever reason, someone can modify the whole path, if necessary.\r\n\r\nAlso, maybe it would be more extensible to have the parameter be ""AdditionalProbingPaths"" and take a list of paths.  Then the MSBuild targets just passes in one, but we can add more later (or someone else can).  Thoughts?'"
1306,120375452,b'Does it make sense to reuse `DefaultComposeDir` here?  Instead of duplicating this location between here and ComposeStore.targets.'
1308,120423092,"b'QUESTION: This version seems later than our current ""escrow"" version of Microsoft.NETCore.App `2.0.0-preview2-25402-02`.  Is that a problem?'"
1306,120660232,b'I have a slight preference to keeping ITaskItem in case we ever want to add metadata to these items.'
1487,133869039,"b'Package Ids are *supposed* to be case insensitive, so in theory it is fine to make this change.  If it does break something, that something should be fixed to use a case insensitive comparison.\r\n\r\nI did a quick look at where this is used, and the only place I found was it [gets passed into `FilterResolvedFiles`](https://github.com/dotnet/sdk/blob/cd25d6bbfc2aac61cc790c511900427ac64fdaa8/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.ComposeStore.targets#L426-L427), which then uses it to create a [PackageIdentity](https://github.com/NuGet/NuGet.Client/blob/1a1c474aab5c1e851b416c583ca4c6d727bd94e3/src/NuGet.Core/NuGet.Packaging.Core/PackageIdentity.cs#L13), which does case insensitive comparisons.  So this should be fine.'"
1052,134760431,"b'@wli3 - you are right, you can\'t remove a library based solely on ""no assets"".  You\'d have to take into account its dependencies as well.\r\n\r\n> Could you give me pointer to the code to find out?\r\n\r\nA pointer to what code?  There are a few consumers of the deps.json file, most notably is the MVC code:\r\n\r\nhttps://github.com/aspnet/Mvc/blob/c8a1bb69142792d1046044bde7082b4e3ac8ac27/src/Microsoft.AspNetCore.Mvc.Core/Internal/DefaultAssemblyPartDiscoveryProvider.cs\r\n\r\nAs you can see, MVC will walk all the dependencies looking for assemblies that eventually depend on an MVC assembly.  So yes, if a library has a dependency to another library that eventually has an asset, all the libraries in the dependency chain shouldn\'t be trimmed.'"
1612,141369770,"b'Why use the HintPath?  Why not just `<Reference Include=""full path""`?'"
1612,141370341,"b'Ah, I see it in your description now - for #1499.'"
1805,155704611,b'@weshaggard - is there a list I can compare these packages to for both NETCore.App and NETStandard? The tricky thing is which OOB packages need versions `> 4.3.0`. '
1805,155879135,"b""My original mistake was doing the data creation in the `ConflictResolver` constructor, which is called 3x per invocation of the task.  So that's why it came up when I profiled at that time (it was 3x what it needed to be).\r\n\r\nI did some profiling of my current approach, and this creation takes `<10%` of the time of the new task. The real time left in the task (according to PerfView) is getting Item Metadata multiple times for every ConflictItem.  This accounts for `~60%` of the time of the new task according to the profiles I've looked at."""
1805,155879299,"b""BTW - I've updated the original post with the perf numbers I'm seeing on my machine."""
1805,155879375,b'Oops.  This is not needed.'
1805,155880189,"b'We are already doing assembly version comparisons (which is the thing causing the performance problems - getting the assembly version).\r\n\r\nThis new approach is providing the NuGet versions, and a list of packages and versions that Microsoft.NETCore.App and NETStandard.Library override by default. That means we can read these NuGet versions and resolve conflicts before needing to read the AssemblyVersions.'"
1805,155880296,"b""You made my realize that I should be lazy-loading this data for the case where there are no conflicts.  No reason to build the dictionary up, until we need it.  I've pushed a change for that."""
1805,155880751,"b""Yes, it is definitely a better place, but we have already shipped Microsoft.NETCore.App 2.0.0 and NETStandard.Library 2.0.0.  Thus we can't add this data to those packages.\r\n\r\nThis change allows data to come from those packages in the future, and that new data will either augment this (see [MergePackageOverrides](https://github.com/dotnet/sdk/pull/1805/files#diff-210154c344df4e4338c157d85a780a87R44)), or the future packages can turn the default data off all together by setting `DisableDefaultPackageConflictOverrides` and just provide its own data."""
1805,155881141,"b'We are using [a `<=` check](https://github.com/dotnet/sdk/pull/1805/files#diff-210154c344df4e4338c157d85a780a87R72).  So if `Microsoft.CSharp 4.1.0` package is encountered, it still loses to `Microsoft.NETCore.App`.'"
1805,155934801,"b'FYI - this change is unrelated to the package override work, but I saw roughly a 200ms gain in OrchardCore by making this change.'"
1805,156146027,"b'Concretely, you mean we might ship a `4.3.1` Microsoft.CSharp that should override the `4.4.0` version inside Microsoft.NETCore.App `2.0.0`?  '"
1805,156185225,"b'My thinking is that these versions in the SDK won\'t change going forward.  They are the ""baseline"".\r\n\r\nWe can do the following going forward in future versions of Microsoft.NETCore.App and/or NETStandard.Library:\r\n\r\n1. Provide higher version numbers to the existing packages, and add new packages.  see [MergePackageOverrides](https://github.com/dotnet/sdk/pull/1805/files#diff-210154c344df4e4338c157d85a780a87R44)\r\n1. Set `DisableDefaultPackageConflictOverrides=true` and provide a whole new list of these packages and versions.  Or set that boolean to turn this functionality off all together.\r\n1. Choose to not update these packages/versions in Microsoft.NETCore.App or NETStandard.Library.  This won\'t cause any correctness issues, since this new check is only a performance optimization.  If a higher Microsoft.CSharp package (say `4.4.1`) conflicts with a future version of Microsoft.NETCore.App, then the existing AssemblyVersion and FileVersion checks will kick in and do the right thing.  They will just happen to be a bit slower than these NuGet version checks.\r\n\r\nI\'m choosing to go with the last option for now, until we have data that proves we need to add those future versions to Microsoft.NETCore.App and/or NETStandard.Library.  `>90%` of the conflicts are caused by packages that we aren\'t shipping new versions for (System.Runtime/Console/Collections/IO/etc).  So even if we don\'t keep the OOB packages up-to-date, we still get a big perf win here.'"
2060,175225598,b'Did you want to switch these around so the `platformItem` with a `null` PackageId comes first?'
2090,177623485,b'Does the satellite information for these `ReferenceDependencyPaths` come through `ReferenceSatellitePaths`?  It would be good to test this.'
2090,177623933,"b""I thought you mentioned that these don't show up as references to the compiler.  If they don't show up as references to the compiler, then I don't think they should show up as `compilationLibraries` here either."""
2090,178565205,b'(nit) wording - `process them will getting`.  `will` => `when`.'
2090,178573566,"b""`NuGetSourceType` was how you tested whether a Reference came from a NuGet package or not.\r\n\r\nIf we removed this metadata, I'm not sure how things are working...."""
2118,179769208,"b'It may be better to use `projectContext.IsFrameworkDependent` here instead of `!IsSelfContained`.  The comment even says ""publishing a framework-dependent app"".'"
2118,179770307,"b'What do you think about moving this logic out of the C# task all together and making a property for ""IncludeRuntimeFileVersions"" that is defaulted in the MSBuild XML?  That way someone could turn this on even if they weren\'t publishing, or in a self-contained app in case they wanted this info for some reason.'"
2118,180433720,"b""Note - when @tannergooding's change #2090 goes in, we will need to merge this with that, so the new references get `CreateRuntimeFile` called on them as well."""
2118,180436052,b'This seems unrelated.'
2205,185564911,b'Do you also want to pass `-nologo` in on line 144?'
2260,191771088,"b""I believe it can be dropped. Typically `exec` is necessary when you want to pass in optional arguments into `dotnet.exe`, like `--depsfile` and `--runtimeconfig`, which we aren't passing here.\r\n\r\nThe `exec` arg was ported from the project.json implementation:  https://github.com/dotnet/cli/blob/b5d312e7faff0e551b58e493bbb1d0de48999954/src/dotnet/commands/dotnet-run/RunCommand.cs#L191"""
2382,200413795,"b'Since you are trying to run a .NET Framework app, does this test need to be skipped when running on Unix?'"
2462,209037187,"b""`'$(HasRuntimeOutput)' == 'true'` is set for test projects, right?  Do we want to use the app host for test projects?"""
2462,210075182,"b'Oh, I didn\'t catch that part of the question.\r\n\r\nNo, you shouldn\'t rely on the DotNetAppHost having the same version number as `Microsoft.NETCore.App`.  We service the runtime (`Microsoft.NETCore.App`) more often than we need to service the host.\r\n\r\nWhen we serviced `1.0` and `1.1`, we serviced these packages separately. But looking at the history of `2.0` and `2.1`, it appears we\'ve serviced the host every time the runtime was serviced. I\'m not sure why that is the case, maybe @steveharter or @weshaggard would know.\r\n\r\nBut in general, if we need to fix a bug in the JIT, or in the BCL, there is no reason to ship a new app host. So in the core-setup repo, we have the ability to ship new `Microsoft.NETCore.App` versions without shipping new Host FXR, DotnetHost, or DotnetAppHost packages.\r\n\r\nAlso cc\'ing @jeffschwMSFT and @vitek-karas, in case they have any ""future"" looking insight into the app host.'"
3086,273151048,"b""We have to hard-code this because https://github.com/NuGet/Home/issues/2923 hasn't been implemented yet."""
3086,273153506,"b'What do you think about:\r\n\r\n* V1\r\n* V2\r\n* All\r\n\r\ninstead of \r\n\r\n* old\r\n* new\r\n* both\r\n\r\n?\r\n\r\nIf we ever wanted to add more ""modes"", the current strings seem limiting.'"
11076,408341549,"b""I don't know of a better way to do this. Both the production code, and this build task need this functionality. Do you have a recommendation?\r\n\r\n> The build tasks have been moving around several times.\r\n\r\nIf it moves again, then this line will need to be updated. But the mover will get a compile error when they move it, so I don't see a problem."""
11076,408401541,b'Added. #Closed'
11076,409582874,"b""Nice catch! After seeing that isn't used, I was able to clean up a lot more code as well."""
11076,409587401,b'This is now removed with the latest changes. #Closed'
11880,435530000,"b""Do you want this to be opt-in or opt-out? From reading the spec, it sounds like it should be opt-in:\r\n\r\n[https://github.com/dotnet/designs/blob/master/accepted/2020/feature-switch.md#generate-the-right-input-for-the-linker-in-sdk](https://github.com/dotnet/designs/blob/master/accepted/2020/feature-switch.md#generate-the-right-input-for-the-linker-in-sdk)\r\n\r\n> All names/values from RuntimeHostConfigurationOption with Link == true metadata will be passed to the ILLink task\r\n\r\nIf you keep it being opt-out, I think we may need to modify some of the existing `RuntimeHostConfigurationOption` items. For example \r\n\r\n[https://github.com/dotnet/sdk/blob/b910664dfd9f4c723606e8caf18b4a69d16d2c71/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L373-L379](https://github.com/dotnet/sdk/blob/b910664dfd9f4c723606e8caf18b4a69d16d2c71/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L373-L379)\r\n\r\nThose 2 options use non-boolean based values, which I believe will cause the linker to complain. The ILLink Task will [blindly copy any value to the command line](https://github.com/mono/linker/blob/ba6d3da58065e0487eeb05c1a3d688afd43b94dc/src/ILLink.Tasks/LinkTask.cs#L352-L359). Then the linker.exe will [spit out an `Invalid argument` comment](https://github.com/mono/linker/blob/ba6d3da58065e0487eeb05c1a3d688afd43b94dc/src/linker/Linker/Driver.cs#L897) saying it can't parse it to a bool."""
11880,435537323,"b""> We use the existing InvariantGlobalization property\r\n\r\nI'm not crazy about this .... it feels like we should make a new `@(RuntimeHostConfigurationOption)` item for this feature. And then in the `ILLink_ignores_host_config_settings_with_link_false` test case we can just add `Link=false` metadata to that item. That way we aren't hacking in the `DisableLinkingForHostConfig` method and hooking to a private target `_SetILLinkDefaults`. We would be testing like an actual user would be."""
11880,435541008,"b'Note - here\'s another one that has a non-boolean value:\r\n\r\nhttps://github.com/dotnet/docs/blob/master/docs/standard/globalization-localization/globalization-icu.md#app-local-icu\r\n\r\n```xml\r\n<ItemGroup>\r\n  <RuntimeHostConfigurationOption Include=""System.Globalization.AppLocalIcu"" Value=""<suffix>:<version> or <version>"" />\r\n</ItemGroup>\r\n```'"
11880,435546773,"b""I'm not sure I follow. All the built-in `@(RuntimeHostConfigurationOption)` definitions are in a global `ItemGroup`. Global ItemGroups are evaluated before Targets are executed.\r\n\r\nIf we ever moved the `@(RuntimeHostConfigurationOption)` definitions into a Target, that would be a breaking change."""
12116,444551497,"b""Another target can't add/remove assemblies from `@(ManagedAssemblyToLink)`, correct? They can only change the metadata (IsTrimmable, TrimMode) on the existing assemblies."""
12116,444835679,b'That makes sense to me. Let\xe2\x80\x99s wait to see if it\xe2\x80\x99s needed. '
12198,445813199,b'Is this supposed to start with a lower case character?'
12198,445814886,b'OSPlatform actually has a `FreeBSD` field. We should be able to change this\r\n```suggestion\r\n            if (RuntimeInformation.IsOSPlatform(OSPlatform.FreeBSD))\r\n```'
12144,446146454,"b'I know we consider `_TrimmerLinkSymbols` to be private, but it is safest to check if it is already set and not overwrite the value if someone has already set it.\r\n\r\n```suggestion\r\n      <_TrimmerLinkSymbols Condition="" \'$(_TrimmerLinkSymbols)\' == \'\' "">$(DebuggerSupport)</_TrimmerLinkSymbols>\r\n```\r\n\r\nI could imagine a case where someone wanted .pdbs to be created correctly, but also wanted the ""debugger only"" code to be trimmed from the application.'"
12144,447994745,"b'Since the naming is inverted, it is probably easier to read this way. Unless we wanted to invert the ILLink Task option.'"
12362,450501844,"b""> so that it is a bit obvious they are related and about the linker?\r\n\r\nThese options are not just about the linker - just like the `$(InvariantGlobalization)` property. These properties control runtime behavior. Setting these properties in any .NET 5 application will change its behavior as specified, since we set the value in the runtimeconfig.json. You don't need to run the linker in order to get the behavior. Yes, the linker recognizes and reacts to these properties, but to a user that is less important than the runtime behavior change."""
12362,450935852,b'Correct. This value gets passed into the linker when `Trim=true` is set on it. See \r\n\r\nhttps://github.com/dotnet/sdk/blob/931137e5bf1d62863243c92b943cca38589c4bcc/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.ILLink.targets#L172'
12198,452879973,"b""From looking at the code, your change is breaking this check.\r\n\r\nhttps://github.com/dotnet/runtime/blob/f4d39134b8daefb5ab0db6750a203f980eecb4f0/src/libraries/System.Runtime.InteropServices.RuntimeInformation/src/System/Runtime/InteropServices/RuntimeInformation/OSPlatform.cs#L14\r\n\r\nHas all upper case `FREEBSD`. And when we check `IsOSPlatform`, we call into `Interop.Sys.GetUnixName()`, which returns an all upper case string, and then we call `osPlatform.Equals(name)`, which then does a `StringComparison.Ordinal` comparison:\r\n\r\nhttps://github.com/dotnet/runtime/blob/4dccf9a5e1127f8be192b6b9b2f102138d620f6d/src/libraries/System.Runtime.InteropServices.RuntimeInformation/src/System/Runtime/InteropServices/RuntimeInformation/OSPlatform.cs#L48\r\n\r\nThis library builds for 2 TFMs: net5.0 and net472. We don't support FreeBSD on `net472`, so you can just add a `#if NETCOREAPP` around this code and use `if (RuntimeInformation.IsOSPlatform(OSPlatform.FreeBSD))`. Then it won't break because of casing or any other string mistake."""
12420,453076031,b'FYI - @joperezr - our runtime tests are going to fail when we uptake this change.\r\n\r\nhttps://github.com/dotnet/runtime/blob/266a5414b43664acdeeeec9697ece7e69148801b/eng/testing/linker/SupportFiles/Directory.Build.props#L5'
12434,453702858,"b'How easily does this break an existing application? For example, if I put images in a `.resx` file is my app broken now?'"
12198,453848608,"b""It's still more correct to use the actual property names and not rely on strings.\r\n\r\nSide question: Why aren't `ILLUMOS` and `SOLARIS` added to `OSPlatform`?"""
12198,453862981,b'That guideline makes sense to me. Thanks for the link.'
12814,466631344,"b""Couldn't any other custom Target use backslash, and then it would be broken as well?"""
12814,466632042,"b""Here's one example:\r\n\r\nhttps://github.com/ashmind/Unbreakable/blob/a4cca1c7d1a21182485b12b3084cdaad01b0d7cb/Demo/Demo.csproj#L17-L54"""
12388,466666392,b'Why was this needed?'
12843,473276216,"b'I mentioned this in the email - this file shouldn\'t be owned by the runtime team. This is a general ""test publish"" test that was written in .NET Core 1.0 - before we had ILLink and ReadyToRun targets.'"
14319,512052252,"b'Are these package references needed? It seems weird to have PrivateAssets on Newtonsoft.Json. And I\'m not sure what ""Humanizer"" does.'"
14319,512054711,b'I assume we have tests for this. But I just wanted to ensure that the scenario `EnsureNETCoreAppRuntime` is checking still produces a good user experience.'
12198,515423436,b'Looks like it to me... @am11 thoughts?'
14432,518157045,"b'It can\'t go into a .props file because then the project wouldn\'t get a chance to set `PublishTrimmed` before this check happens.\r\n\r\nSo instead, the check below should be \r\n\r\n`<PropertyGroup Condition=""\'$(StartupHookSupport)\' == \'\' AND \'$(PublishTrimmed)\' == \'true\'>`\r\n\r\nwhich will allow for both to be set in the project file.'"
14432,521451390,b'(nit) the rest of the `RuntimeHostConfigurationOption` items are in alphabetical order on the `Include`. This makes it easier to find the switch you are looking for. Can you move this new item up between the `System.Runtime` and `System.Text` entries?'
14432,521452530,"b'Since `net5.0` has already shipped, Should we be considering this a breaking change when users start building their existing `net5.0` apps with the 6.0 SDK?'"
1712,149521217,b'This has to change in the cli repo as well. This only controls what the sdk uses to test itself'
1712,149522771,b'< 4.7.1 ?\r\n\r\nOr move the 4.7.1 special work in a single place.'
1981,169704857,"b'This is fine in this case, no worries about conflicting imports.'"
1981,169711647,"b""@tannergooding In groovy here, files are required to map 1:1 to class names, so I don't think this can happen.  Java will also error if any imported class would have the same name as an already existing class."""
2318,194477782,"b'""\\${WORKSPACE}/artifacts/${config}/TestResults/Performance""'"
2530,217537509,"b""It doesn't do anything with it other than write it into the manifest. In prodcon v1, this then gets interpreted by various tools at release time to determine what needs to be pushed to nuget.org or not."""
2530,217540624,"b""Maybe we should just rename the property then?  Really this is saying whether it's an independent shipping unit or not.  For example, nothing in CoreCLR 'ships' in the sense that it independently goes on blob storage or nuget.org, but they do ship in that they end up in other components.  Do not publish is confusing, since you do have to publish for dependency uptake reaosns.\r\n\r\nMaybe...ShipsExternally=true/false?"""
2530,217549861,"b'> @mmitche\r\n> \r\n> > Really this is saying whether it\'s an independent shipping unit or not\r\n> \r\n> What do you mean by ""this""? The value in the manifest?\r\n\r\nYes, the value in the manifest says that.\r\n\r\nIn prodcon v1 we were specifying where a component ends up on a project level.\r\n\r\nIn reality, the endpoint isn\'t actually what we\'re indicating here. If we suddenly decided to augment nuget.org with Azure DevOps feeds, then we\'d have to go and update everywhere to specify the new endpoint.  For a specific output, we really just want the project to indicate in general where the output goes:\r\n- Official package feed\r\n- A storage account layout\r\n\r\nIt\'s up to the release process to interpret that information.'"
2530,217772858,"b""Today it's defined in the tic toc doc.  In general, it would be:\r\n1. Gather list of proposed packages to publish based on the output manifest.\r\n2. Confirm list (manually), looking for:\r\n  - Cases where we missed a package that we know changed.  This might show up in corefx if we forgot to update the list of packages that needed to be published.\r\n  - Cases where a package is being published that shouldn't be.  This is rarer.\r\n\r\nThe shipping vs. non-shipping gives a first cut.  Take a look at this latest manifest. Of the packages we create, 200+ do not go to nuget.org.\r\n\r\nhttps://github.com/dotnet/versions/blob/master/build-info/dotnet/product/cli/release/2.1/build.xml"""
2530,217807967,"b""I think we should probably identify those in some way, though not by the exact feed.  To support internal and external builds on equal standing, you need to move the final publish process out of the repo, so that the repo doesn't have to worry about whether a build is public or private, or is stable or not, etc.  That should ideally be handled post-build.  But we could identify feeds in a generic sense like:\r\n- dotnet-core (could correspond to internal or external)\r\n- roslyn"""
2567,222454899,b'You want to conditionalize this on !isPR'
2567,222454926,b'You want to conditionalize this on !isPR'
2567,222463699,b'Yeah'
3197,280623659,b'Thanks'
3197,280786667,b'I have Build.Repository.Clean as a global variable in the YAML (at the top).  I think this does the same thing. Any issue with that?'
3197,284345678,b'@peterhuene This is the correct RID?'
4171,366669679,b'This looks wrong.'
10714,383944575,"b'The names don\'t match: Microsoft.WindowsDesktop.App -> MicrosoftWindowsDesktopAppPackageVersion.\r\n\r\nThere does appear to be a node for the Windows desktop SDK in the version details file:\r\n\r\n```\r\n    <Dependency Name=""Microsoft.NET.Sdk.WindowsDesktop"" Version=""5.0.0-preview.1.20120.7"" CoherentParentDependency=""Microsoft.WindowsDesktop.App"">\r\n      <Uri>https://github.com/dotnet/wpf</Uri>\r\n      <Sha>4f541e550154be4447b4c2a99b53823fcc766882</Sha>\r\n    </Dependency>\r\n```'"
10714,383972924,b'That one still exists:\r\n\r\nhttps://github.com/dotnet/sdk/blob/d32f61fb3cf79a213774923fd59be3ebb0042f01/eng/Version.Details.xml#L60\r\n\r\nand matches with the version in version.props:\r\n\r\nhttps://github.com/dotnet/sdk/blob/d32f61fb3cf79a213774923fd59be3ebb0042f01/eng/Versions.props#L124\r\n\r\nThe one that I removed is a different windowsdesktop dependency that was unused (note: Microsoft.NET.**Sdk**.WindowsDesktop in the one you linked)'
11848,433533547,b'Ahh right good catch.'
11914,436138166,"b'Yep, just matching your change. May want to get this in first, then reenable.'"
11963,437543523,b'Ahh yeah. That makes sense.'
13410,483834403,"b'macOS still works quite a bit of the time, I can add it back in if you want though.'"
14050,503507554,"b""I don't believe those are listed as signable in the first place?"""
14050,503507697,"b""It should be in there already (somewhere). It's never signed today."""
14376,514542494,"b'Ahh I messed that up, let me fixup.'"
14433,518411454,b'Nope. @MattGal Any idea why the comments are getting duplicated?'
14462,520772970,b'This should be changed to servicing.'
163,80278153,b'do we have an issue filed for this restore3 problem?\n'
444,90740360,b'this folder will never be used by this VS install.'
444,90740679,"b""for VS scenarios, we already have all of these files installed by our VSIX. \r\nI sure hope don't need another set.\r\nwho can brainstorm about this with me?"""
450,90928378,b'I thought @terrajobst had a spec on this.'
603,95188817,"b""existing: why use batching here instead of a transform?  If you use @(_CompileFileDefinitions->'%(ResolvedPath)') it will preserve all the meta-data and you don't need to do things like\r\n```\r\n +        <NuGetPackageId>%(_CompileFileDefinitions.PackageName)</NuGetPackageId>\r\n +        <NuGetPackageVersion>%(_CompileFileDefinitions.PackageVersion)</NuGetPackageVersion>\r\n```\r\n"""
1053,108836443,b'Why do we use the RID check here but plumb IsSelfContained elsewhere?'
1053,109024324,b'Thanks for the thorough explanation.'
1052,109734496,"b'This should not be brought up.  @dsplaisted as we mentioned before the trimming stuff should be left in standard repo.  Just make sure you are able to support the same sort of hook it requires, which is the same as conflict resolution: items to exclude from copy to output by build and publish and exclude from deps file.'"
1052,109745724,b'Do not copy this...'
1052,109745992,"b""Nor the CSProj.  I'd expect this all to be added to your existing project."""
1052,109746225,"b'No, in fact it must be changed.'"
1052,109746583,b'The only thing we need is a good property to understand when the SDK is providing this so that we can use the version from the standard repo in that case (nuget2/nuget3).'
1052,109746745,b'We need to kill this target and task and add the proper support into to deps file generation to provide a list of things to omit.'
1052,110249985,"b""Depending on what you're targeting in your task DLL you may be able to remove this cross-compilation.  AssemblyName.GetAssemblyName was added back in netstandard2.0."""
1052,110250212,b'Feel free to replace this with whatever logging abstraction is appropriate for your task DLL.'
1052,110250299,b'Same with the MSBuildLog.cs.'
1052,110250707,"b""Probably.  At one point I was putting ITaskItems into a dictionary or hashset and wanted reference equality (rather than whatever the backing ITaskItem may have implemented).  I believe all cases that were doing this before now wrap the item in a ConflictItem so this isn't needed."""
1052,110251089,b'Is there a way to do this by following the above pattern?  EG: .WithoutFilesToSkip(filesToSkip)'
1052,110251187,"b""You don't need this on desktop."""
1052,110251547,"b""Why aren't you seeting RuntimeIdentifier?"""
1052,110252304,"b""You may be able to remove this target if you can somehow make the SDK targets provide the right data.\r\n\r\nThe purpose of this target is to get all the runtime assemblies as items so that they can be trimmed from the deps file.  When I first implemented this, there wasn't a good item I could use that represented the runtime items at build time but that may have changed or I may not have seen it.\r\n\r\nRuntime items are read for publish, since publish needs to do the copy.\r\n\r\nI was thinking that if the entire deps content flowed through msbuild this target could certainly go away since the runtime items which eventually get written to the deps file for build would be present.  Barring that it seems like the SDK could at least populate a similar item.  That would really help to get rid of this hack."""
1052,110252356,"b""Don't you have some common file for UsingTasks?"""
1052,110253005,"b""You ought to.  Don't go out of your way to prevent it.  I'm sure there's a time in the near future where you'll need to make a concerted effort to ensure it works."""
1052,110280598,"b""That's not what I created this for, I'm not sure why you changed it.  All the compiler assets are already populated in the reference items.  I created this to get the runtime assets that were never raised to refrencecopylocalpaths because they aren't copied during the build...  https://github.com/dotnet/standard/commit/31f0a1329bf18f54ec987a4735147ebb5dd01314\r\n\r\nThis is definitely **not** getting compile assets, look at the output: AssembliesToPublish are **runtime** assets."""
1052,110281679,"b'@eerhardt I\'m not talking about the deps file here.  This target has nothing to do with that.\r\n\r\nAll this target is doing is getting the set of runtime assets that ""will be loaded from packages"" for build.  It\'s totally reasonable to have that item populated during build and I\'m pretty sure there\'s already a target that does it.\r\n\r\nMoreover, ResolvePublishAssemblies shouldn\'t even exist.  That should just be a filtered set of the items already raised from the lock file.  I\'m fine if that work is put off a bit, but it seems like we could at least run the one target (RunResolvePublishAssemblies) during build, and just make sure that we didn\'t consume its output (by copying) in the build target closure.'"
1052,110474119,b'Once you have some more tests to reduce the risk you should do this.  I suspect the current implementation is very inefficient since it reconstructs the entire dependency context object graph.  File an issue?'
1052,110474470,"b""I think this still needs to be addressed.  You can file an issue to address in a follow up if you like.  This entire target exists because I implemented this stuff outside the SDK and didn't have enough confidence in what I could take a dependency on."""
1052,110475379,"b""You at least need to fix up the comment here.  Whether or not it requires the RID really depends on the behavior of `build` for a standalone app.  If that's expected to run from the shared framework and it uses the RID-less target for generating the deps file then you can omit the RID here too, I don't think that's the case.  If instead that's expected to run from RID-specific packages same as it would on publish, just without copying, then you must specify the RID here."""
1052,110475424,b'OK'
1052,110479455,"b'I do think folks will depend on doing stuff after these, so we have to imagine an extension point for ""where do I sequence a target to get a filtered list of reference/referencecopylocalpaths/deps-file-items.\r\n\r\nI agree with @eerhardt that these should not be public.\r\n\r\nThey should also not occupying the ""good spot"" for sequencing.  What I mean here is that folks should easily be able to run after them without having ambiguous ordering with these targets themselves.\r\n\r\nThe names/sequencing they have now are due to me implementing them outside the SDK.  Inside the SDK I think they should be rolled into other target sequences.\r\n\r\nHere\'s a straw man:\r\n1. As a dev extending the SDK I can sequence a target AfterTargets=""ResolveReferences"" and I am garunteed to get a complete and filtered list of Reference and ReferencePath items.\r\n2. As a dev extending the SDK I can sequence a target AfterTargets=""ResolvePackageDependenciesForBuild"" and I am garunteed to get a complete and filtered list of items used to construct the build-time deps file.\r\n3. As a dev extending the SDK I can sequence a target AfterTargets=""RunResolvePublishAssemblies"" and I am garunteed to get a complete and filtered list of ResolvedAssembliesToPublish items (not the case today).\r\n4. As a dev extending the SDK I can sequence a target AfterTargets=""ComputeFilesToPublish"" and I am garunteed to get a complete and filtered list of ResolvedFileToPublish items, as well as a complete and filtered set of items that will be used to construct the deps file.\r\n\r\nPerhaps 1 & 2 and 3 & 4 can be collapsed so long as the items output don\'t have a relationship (eg one copied to the other).\r\n\r\nMoreover, we should have a property that folks can append Targets to so that folks that want to hook this sequence can insert themselves into a deterministic sequence and follow a pattern with common inputs/outputs (a specific set of items) that they can operate on and garuntee those items are the only thing they need to care about updating.'"
1052,110705615,"b""This looks much better.  Any reason you didn't use @(AllCopyLocalItems)?  Those look like they'll have the NuGetPackageId metadata which HandlePackageFileConflicts depends on."""
1052,110709047,b'You can probably eliminate this as a separate target entirely and just have HandlePackageFileConflicts depend on _ComputeLockFileCopyLocal.'
1121,111412765,b'Can you update this comment?'
1121,111414402,"b'Not sure about the uniqueness of these item names, but do a scrub to make sure there are no conflicts with anything.'"
1121,111416763,"b'Existing issue, but we also need to do conflict resolution of native assets.  Is that covered by this?'"
1121,111420920,"b'interesting, I guess the deps file is still correct since that gets copied from assets but this is something @eerhardt might hit if we tried to reconstruct the deps file from these items.'"
1121,111421240,"b""Just sdk is fine.  I think we should probably have some naming convention for private items to help avoid conflicts but it doesn't make sense to start establishing that in this change."""
1272,119211790,b'Who sets this?'
1272,119212063,"b'I see it was used for distinction before, just want to make sure this is the right pivot.'"
1272,119213148,"b'I see, it gets set by RAR.  I looked through the code and it seems reasonable.  Make sure to check the cases around out-of-band assemblies (eg: System.Net.Http, System.Runtime) where NuGet package contains higher version of something that was inbox.  '"
1272,119214156,"b""Any reason you didn't use _referenceAssemblies?  Duplicated reference term is confusing."""
1273,119398354,b'I tested it manually in debugger.  I could provide a hook for testing it on Windows.'
1273,119398910,"b""I'll remove some of the goo from this project.  Do you think it even needs to have a package, or could we just put this stuff in some single package."""
1290,119893354,b'You could just pass these to the constructor.'
1279,119917365,b'The single assignment felt lonely.'
1279,119937761,b'I could move this entirely into the Build.Extensions dll since it is only used there now that I changed the tasks to be imported independently.  Thoughts?'
1279,119964077,"b""We can't make it work on 1.1 SDK without bringing back deps file re-writing.  We discussed this and decided to raise the error in the NETStandard injection targets, only when netstandard is referenced and running on old SDK."""
1279,119964911,"b""@dsplaisted and I discussed and decided to move it.  I'll need to create a separate test project to do that."""
1279,119965038,"b""TargetFrameworkIdentifier will be set by common targets by the time we're imported."""
1279,119970482,"b""I've done this.  I had to create a different task name so that it wouldn't collide with the SDK one."""
1279,119992497,"b'Good catch, will fix.'"
1279,119992736,"b'Ok, will look into that.'"
1279,119992761,"b""Let's just disable it for the Extensions project and make sure it builds after the main project."""
1279,119992846,"b'We have approval, folks specifically pushed for the design change to put this stuff inbox.\r\n\r\nI share your concern for performance, see below.\r\n\r\nAs far as risk assessment, what is your recommendation?  I discussed various options with @dsplaisted and this is where we landed.'"
1279,119992902,"b""/cc @terrajobst \r\nThat's something to consider.  Previously we had said we wanted conflict resolution to be a characteristic of any build so that its easier to reason about.  Would it help if I shared some numbers that illustrate the overhead?"""
1279,119993139,"b""RAR will remove the DLL if it becomes inbox in the framework.  We don't remove DLLs within subsequent out-of-band releases.  This is existing logic that's just been reimplemented from the package."""
1279,119993216,"b""Its common behavior that should be exposed regardless of TFM.  You are correct in that we don't make use of it by default for .NETFramework so these will be empty."""
1279,119993244,"b'Yes, I mentioned that in the commit.  I can add a comment.'"
1279,120146004,"b'I had discussed forking more of the code so that a minimal set was shared, which we could move to a common folder.  Also discussed building a separate package for this stuff.'"
1279,120146957,"b'Ok, this code was copied so I tried to make minimal changes.  I went through and sprinkled `var` where it was appropriate.'"
1279,120147042,"b""I'll look into doing this."""
1279,120160238,"b""Those were measurements I made early on of just the task that was being added.  I went back and measured the targets in their current form, results are here: https://gist.github.com/ericstj/b56c6a430e79e6768f93551b66219d22\r\n\r\nThis is for a packages.config-based desktop project building in visual studio.  It's showing zero-impact to the hello-world case, and 16 ms cold / 0 ms warm to the top-10 packages (20 assemblies) case.  I've tried a few different variations of this but can't get numbers worse than this for these projects, so I'm fairly confident that we'll be able to keep the impact low."""
1279,120209013,"b""I moved it into a separate package.  PTAL.  Also let me know if you'd like me to split the shared code into some common folder."""
1279,120401310,b'Doh.'
1308,120423415,"b'I just took the latest build out of `release/2.0.0`, I can choose a different version if one is more appropriate.  Let me ask around.'"
1308,120432171,"b'I got confirmation from @Petermarcu that the version that was just picked up by core-setup is the correct one: https://github.com/dotnet/core-setup/commit/1768bf1d4c7fd317d4a99d6c0cfba851ff2a61cd, so it is 25405-01 as I am using here.'"
1322,121214143,b'They use different templates which get included in the path.  I was actually hitting max-path at one point which is what I shortened the test method names and tried to be brief in these identifiers.'
1322,121215093,"b""I downloaded and installed it.  It's an optional component starting with 15.1.  Do you think we can install it on the CI machines?  Should be as simple as running https://www.microsoft.com/en-us/download/details.aspx?id=55168."""
1330,122249313,"b""I don't agree with special casing here.  You already have the PackageIds that you are considering SDK references you should use those."""
1330,122258901,"b""That's a bad assumption.  You wouldn't need to assume if you asked the folks who owned the package.  Now we need to come ask for a fix when we make NETStandard.Library 2.1?"""
1330,122260181,"b'Moreover you can further short-circuit this loop by examining some metadata that is ""normally"" available.  I\'d much more prefer this over the special casing.\r\n\r\n```\r\nif (DependencyType.Unknown != GetDependencyType(reference.GetMetadata(MetadataKeys.Type)))\r\n{\r\n    continue;\r\n}\r\n```'"
1330,122265683,b'This is not meant as a workaround.  What is it working around?  This needs to be thought of as a permanent feature.'
1352,122533817,"b""I suspect you're doing more work than necessary for all the references that came from NuGet.  I suspect you're not `continue;`ing until the last case.  Would it make sense to check `Type` metadata and `continue;` early if that was set?"""
1352,123065089,"b""Yeah, this loop is going to get all the references that came from NuGet as well.  Right now those don't get excluded until below: \r\n>// If we already know about the assembly file, skip it.\r\n\r\nI was thinking you could have a fast path that avoids some of this work.  I looked at how you determined *already know about* and saw that this was based on [Type metadata](https://github.com/dotnet/sdk/pull/1352/files#diff-56c31b357aa781955f3963adda6c22d2R184), I noticed that metadata is preserved on the `Reference` items, so I thought you could fast-path the check rather than doing the lookups and string comparison below."""
1407,129105928,b'This is no longer a target but you document it as if it were.'
1565,137314302,"b""Don't we need some sort of condition on this for frameworks that don't understand RuntimeTarget items, or did you have you decided that you're adding the RuntimeTarget concept to desktop?"""
1548,137868743,"b'@dsplaisted do you think we should do this here or in https://github.com/dotnet/sdk/blob/master/src/Tasks/Common/src/ItemUtilities.cs#L113?\r\n\r\nAlso, it may be better to first check `IsPathRooted` first for performance.  The MSBuild code this is based off of does that: https://github.com/Microsoft/msbuild/blob/ab090d1255caa87e742cbdbc6d7fe904ecebd975/src/Tasks/AssemblyDependency/ReferenceTable.cs#L407-L414\r\n'"
1565,137871562,"b""I understand, I'm talking about the desktop case where runtimeTargets are meaningless since nothing knows how to load them.  If you'd like you can treat that separately but make sure we have an issue on it."""
1612,141403285,"b""Yeah, I wonder if we want NuGet to do the same thing \xf0\x9f\xa4\x94   I can't recall why the NuGet task originally used RawFileName given that was inconsistent with what the project system was doing, @jasonmalinowski might know."""
1618,142235958,"b""That could get expensive, if you do need to do that make sure you don't crack the assemblies at that point but instead create lazy items that point to the TargetFrameworkDirectory location.\r\n\r\nI don't suppose MSBuild has an API built on top of their framework list / metadata cache?"""
1618,145000343,"b'Return here is confusing, can you eliminate the curly braces?'"
1667,146048977,b'Consider a short-circuit path once everything is set to true. '
1667,146049218,"b'Here you use 4.1.0.0, but below you say 4.0.1.0.  Which is it?'"
1667,146050571,b'What value are these comments providing?'
1667,146051277,"b'More potential for short-circuiting here, and below.'"
2060,175237945,b'No the distinction of the second test is that one item is in the override package list. I could add another call that swaps them just to ensure coverage.'
2185,184435239,"b""Since your task references `netcoreapp2.0` you might want to use 1.5.0 here instead since that's the one that's in `netcoreapp2.0`.  It's not a requirement and I don't see this property used anywhere else, but at least that way you aren't having to pick up new builds for this component."""
2185,185966289,"b""Correct.  You shouldn't see any facades deployed for this.  You'll actually get the portable-net45+win8 dependency group so no dependency on NS.L even.\r\n\r\n"""
2250,188998349,b'This can potentially cause issues like https://github.com/dotnet/sdk/issues/1499 but those would have already been present if we were completely removing the reference before.  I wonder if we should be applying any metadata to these.  I believe this is the first time this task constructed completely new items.'
2250,190734035,b'Can you use a ReferenceEquals here instead?  That would make me more comfortable than relying on list order.'
2250,190734846,"b'Elsewhere we use ToArray, any reason for using List here, if so should we do the same below?'"
2250,190735303,"b'Existing typo, class should be clash'"
2250,190735937,b'I suppose someone could have had a strong name in the project.'
2250,190737583,b'Then conflict resolution will later decide if the simple name wins or the package file does?  Where does the path to the package file get preserved?'
2250,190737807,"b'Nit you still may have duplicates if folks do stuff like mscorLib or system.core and System.Core.  I have seen this sort of thing in packages, will anything break?'"
2250,190737925,"b""It still stands that whatever the behavior its not made worse by this change so I'm ok proceeding."""
2488,212115395,"b""You still aren't examining if the previous unresolved conflict would actually lose to the winner.  I think you should actually remove this change and examine the return value of ResolveConflict below and only call foundConflict if the winner is an actual winner to previouslyUnresolvedItem."""
2488,212132703,"b'I\'m not sure its safe to assume ""unresolved"" == ""loser"".\r\n\r\nSome cases for bailing out of ResolveConflict are not always due to items being equal.  Sometimes we bail when we don\'t understand a reference (EG: can\'t load the file, or don\'t understand the format of the string, etc).  I believe you\'d still remove those in this case, if there happened to also be a tie with a loser.'"
3074,271956438,b'This is not consistent with copy step below.'
3074,271957695,"b""Per our discussion I don't think wildcard syntax works for includes.  You'll need to run a target before and evaulate this into an item."""
3074,271958626,"b'SDK folks, is this the right property to use for launching `dotnet.exe`?'"
3074,271960333,b'Try this with spaces in the path to the project file and spaces in the project file name / assembly file itself.'
3074,271964031,"b""I don't think appending to FileWrites will help here, since incremental clean doesn't write the file back during publish.  Moreover I don't think having an intermediate directory with a copy of all the files is buying you anything."""
3132,276899741,"b'Funny story, a similar issue caused CoreFx build perf to tank once, the cause `$(SomeProperty)\\**\\*.extension`.  Someone renamed `SomeProperty` and CI passed...'"
3086,281284056,"b""What happens for projects using packages.config?  Won't they always depend on this path?"""
3086,281825306,b'That was what I was thinking.'
3342,295520292,"b""System.Resources.Extensions is not part of .NETStandard2.1 and the package itself works on .NETStandard2.0.  What's the reasoning for tying this to 2.1?  Will it still check for the presence of S.R.E in references?"""
11213,412389766,"b'I think its ok to only do this with `TargetFramework` is set.  @Anipik?\r\n\r\nDo we use the term `Custom` elsewhere?  That seems a bit unusual to me, but if we have that pattern elsewhere its ok.  Another ideas for a name would be to reuse the `TargetFrameworkInference` term, like `BeforeTargetFrameworkInferenceTargets` or something.'"
14319,512159065,"b'Indeed, I wonder why these packages are present and marked as private.  If they\'re meant to represent some ""commonly used dependencies"" call that out, and not make them private.'"
3074,271979608,b'CC: @nguerrera '
3074,271980468,"b""@ericstj: The bundler currently takes in a publish directory and generates the bundled files. This can be changed to accept a series of files. \r\n\r\nHowever, I'm not clear about one scenario in that case. There was a request to bundle the contents of the publish directory and [all of its subdirectories](https://github.com/dotnet/core-setup/pull/5286#discussion_r264403799).  The bundler currently handles this case: reads files from all sub-directories of the `--source` directory; writes a manifest of files and sub-directory paths into the bundle. \r\n\r\nIf there's a `PreBundlePublish` directory, app developers can write anything to it, and have the contents bundled. If we don't have it, I'm not sure how this can be handled. Thanks."""
3074,271986782,"b'In order to support sub-directories, I think the bundler interface needs to support an interface that identifies: \r\n* The file to be bundled\r\n* The relative path within the bundle (The value of `RelativePath`)'"
3125,275058610,"b'Why is this only for `.NetCoreApp`? How about, if there are whole unused IL files that are not reachable from any public entrypoints in a `.netstandard` dll?  (ex: partial classes) ? '"
3125,275065795,"b""The linker works with `ResolvedFileToPublish` as input, and I think that's the way it should be for now.\r\n\r\nBut I'm curious why crossgen works differently. Crossgen targets run after `_ComputeResolvedFilesToPublishTypes` target, and processes/updates the files bifurcated into `_ResolvedFileToPublishPreserveNewest`  and `_ResolvedFileToPublishAlways` items. However, the processing /input-outputs for the two lists there are similar. So, why doesn't crossgen similarly process `ResolvedFileToPublish` ? """
3123,276026963,"b'Should this check be upfront (say in prepare for publish) before we do any work for R2R compilation? \r\nNot a significant issue, since this is only an interim check.'"
3132,276437322,"b'Thanks @sbomer; as you know, I saw the feedback over your shoulder :)'"
3132,276460212,b'https://github.com/dotnet/core-setup/issues/5903'
3132,276864492,"b'OK @nguerrera, I pushed 25c2b423608690a37da83dbdcecdc55138af67cb which revers back to the foreach() loop. '"
3132,276872768,"b'Thanks, fixed it in 671de2d5ed77d851e0d8dee635c5a9ad51e8d84c'"
3158,279535335,b'The `ni.pdb` files are only generated on Windows.'
3157,280591612,b'What about clrcompression.dll? What scenarios is it used? '
3157,280591795,b'Should be keep debugshim.dll and sos.dll in debug builds? \r\n'
3157,280593738,b'Why is adding the deps file necessary here?  Does FindNativeDeps recognize and only filter native binaries? And leave away other /text files? '
3157,280594574,"b'If the csproj exclicitly included a file to be published, I think we should not filter it away.\r\nFor example\r\n```xml\r\n<content include=""libnativebinary.so"">\r\n     <CopyToPublishDirectory>Always</CopyToPublishDirectory>\r\n</content>\r\n```\r\n\r\n\r\n\r\n   '"
3157,280598731,"b""I don't think we should preserve the debug DLLs by default -- at least not in release builds.\r\nThere can be a switch to control this.\r\nI'm not sure where `clrcompression.dll` is used, so this needs better understanding."""
3157,280633774,"b'Managed assemblies can use `NativeLibrary.Load()` methods to load native library from any string. This is similar to reflection in managed land. \r\n\r\nSo, if the developer explicitly wanted something in the publish directory, I think we should leave it be.  \r\n\r\nIs there any other way to tell the SDK to not remove a native binary? '"
3157,280634048,"b'I agree that we should compute and use the correct input set.\r\nIn the meantime, the task should keep any non-native binary file fed into it.\r\nI think being conservative about other file types is better than special-casing just the json configuration files.'"
3192,282708717,"b'If the SDK always sets a property `DotNetHost` similar to `AppHost` executable, I think that would be useful.\r\n'"
3279,289183494,"b""Should we always cause an error on fw-dependent publishing? \r\n\r\nI understand that with the current defaults, there's no point in running the linker on fw-dependent builds. But it isn't an error.  Is there a way to override the default settings (as done in the tests) and run the linker on fw-dependent apps? \r\n\r\nCan you please add a comment clarifying why we disallow fw-dependent configuration? """
3279,289201307,b'Thanks for the explanation @sbomer '
3381,299221201,"b""I'm not sure it is worth tracking what `.ni.pdb` files are generated in this test -- it makes the test a bit fragile because of other files changing. \r\n\r\nAlso,in the long term, I don't expect the mscorlib.ni.pdb (or any other ni.pdb) to be generated everytime. So, I'd keep the change as-is for now. Once the mscorlib compilation issue is resolved, we should move back to the `.OnlyHaveFiles` test."""
3789,338820431,"b'@wli3 If we catch this exception, it almost always means that the apphost executable in the package is corrupt. \r\nSo, I think the customer facing main error should say something like: $""Application host {apphost} is unusable; the file is likely corrupted. Please reinstall the dotnet SDK version {version}"" '"
3789,338822029,"b""Do we want to print the details about what went wrong? It seems like more to do with the implementation of the SDK/HostModel. Any failure should be straightforward to repro on our end.  \r\n\r\nI'm happy that you've already done the work ... so might as well keep it."""
3789,338822614,b'Suggest naming the function MachOErrorMap or something specific.'
3812,340299591,"b""Its the target RID for which the app is being built, I'll fix the comment wording. Thanks."""
3892,345520882,"b'We cannot skip the `_ResolvedFileToPublishPreserveNewest`/`_ResolvedFileToPublishAlways` qualification here, because not all items in these groups define the `ExcludeFromSingleFile` property.'"
4154,367207042,b'3.0'
10593,374425700,"b""Why is this step necessary? \r\nThe AppHost executable should already be in `ResolvedFileToPublish`, added by  `_ComputeCopyToPublishDirectoryItems`. \r\nThe AppHost name and the single-file name are the same. So, it shouldn't be necessary to add the singlefile path explicitly. """
10593,374438903,"b'OK the AppHost itself is not marked `ExcludeFromSingleFile`, but handled implicitly; hence the extra explicit copy. Thanks.'"
10600,375007764,"b""I'd recommend computing `FilesCopiedToPublishDir` within `PublishItemsOutputGroup`   """
10600,375033671,"b""I don't think this should be a WindowsOnly fact. Is should run on all platforms where `PublishItemsOutputGroup` is run. """
10600,375645653,"b""Hi @MSLukeWest , I saw some changes where you included diagnostics to test the failures on Linux. Did you figure out what was wrong?  If there's a known reason for that failure, its OK to limit the scenarios, as long as the issue is understood; thanks.\r\n"""
10740,386826515,"b""Thanks @dsplaisted. I've renamed the target `BundlePublishDirectory` to `GenerateSingleFileBundle`. """
10907,395318257,b'I think this test should be parametrized so that it runs in both single-file and non-single-file scenarios.'
10907,395318473,b'I second this.'
11024,399602499,"b""```suggestion\r\n      <!-- ResolvedFileToPublish shouldn't include PublishedSingleFilePath, since the single-file bundle is written directly to the publish directory -->\r\n```"""
11024,399602565,"b'Small change in wording, since the single-file bundle is not an output of this target.'"
11073,401258179,"b""@akoeplinger  Can you please provide more details about the architecture of the Mono extension? \r\nPlease post a pointer if there's a doc about it, thanks.\r\n\r\nI have the following main questions:\r\n* Where do the Mono-specific targets live (ex: `CoreMonoAOTCompilation`)? \r\n* Why do we need the extensions in the SDK? How are they expected to be used by the Mono build? \r\n   Can it be handled via `Before/AfterTargest` in Mono-specific files?"""
11073,401258744,"b""I don't think `CreateReadyToRunImages` should be conditioned on `PublishMonoAOT` settings (and fail silently).\r\nI think there should be a check in the early validation to throw an error if `CreateReadyToRunImages` and `PublishMonoAOT` are both true."""
11073,401258964,"b""Similar to the above comment, I don't think `PublishReadyToRun` should be checked here."""
11073,401260199,"b'If we add public extension hooks, it could be used for any arbitrary targets by users.\r\nWe should have good testing to ensure this case is well supported.'"
11060,401914766,"b'```suggestion\r\n        [InlineData(false, false)]\r\n        [InlineData(true, false)]\r\n        [InlineData(true, true)]\r\n        [Theory]\r\n        private void RunFilesCopiedToPublishDirTest(bool specifyRid, bool singleFile)\r\n```'"
11060,401916682,"b'Similar to the above, replace the three `[Facts]` with `[Thoery]` based on parameters of `RunPublishItemsOutputGroupTest`'"
11527,418703172,"b'If the deps.json file is directly written to the publish directory, it should be removed from ResolvedFileToPublish [here](https://github.com/dotnet/sdk/blob/c09668ef26a1c8917144e897b2989524cc332d47/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L1035) in the non-single-file case.'"
11527,418704004,"b""However, I'm not sure its a good idea to write to the publish directory -- before `CopyFilesToPublishDirectory` has run -- because something may be introduced into `ResolvedFileToPublish` that overwrites this file. Isn't it? \r\n\r\nCC: @dsplaisted  """
11527,418722669,"b'Can you please update the comments here to say:\r\nIn the single-file case, we write deps file to intermediate dir, and it is bundled into the single-file app.\r\nIn the non-single-file case, we write deps file directly in the publish directory due to legacy reasons.'"
11586,424672185,"b""OK Thanks @wli3, I've fixed this now."""
11586,424791308,"b'Hi @wli3, the PR tests have passed after the fix you recommended. Can you please take a look again? Thanks.'"
11586,425465048,"b'Thanks, removed the initialization.\r\n'"
11586,425467502,"b""@wli3 I've added a new test `It_leaves_host_components_unbundled_when_necessary` for this. \r\n\r\nI thought about this, but I originally didn't add the test here because it is a temporary idiosyncrasy of the host/hostmodel, and not a requirement for the SDK. \r\nThe host-tests do test for this:\r\nhttps://github.com/dotnet/runtime/blob/master/src/installer/test/Microsoft.NET.HostModel.Tests/AppHost.Bundle.Tests/BundleExtractToSpecificPath.cs#L58\r\nhttps://github.com/dotnet/runtime/blob/master/src/installer/test/Microsoft.NET.HostModel.Tests/Helpers/BundleHelper.cs#L63-L66\r\n\r\n"""
11586,425477253,"b""OK @wli3. I'll keep the one interesting case of .net5 self-contained in the `It_rewrites_the_apphost_for_non_single_file_publish` test.\r\n\r\nI think it is useful to have all the cases in the `It_runs_single_file_apps` case."""
11586,425488541,b'@wli3 This is done in https://github.com/dotnet/sdk/pull/11586/commits/85c42def2678ee194d3c888ee5ca6d1e02d64189'
11586,425496243,"b""Yes, for `It_runs_single_file_apps` I think we should have all combinations.\r\nThis guards against incompatibility between SDK and hostmodel that creates single-file apps that don't run correctly. I'm planning to add this test to [integration tests](https://github.com/dotnet/installer/blob/master/test/SdkTests/TestConfig.xml) in the installer branch, as recommended by Daniel."""
11797,432743289,"b'The `PublishSingleFile` property is captured by telemetry, which reports the three states: `true`, `false`, and `unset`. So, I wanted to leave the user input in its pure state and use a different variable. '"
12130,444498567,b'Why is `PrepareForPublish` not being called? Which target is being called ? `GenerateSingleFileBundle`? \r\nI think not calling `PrepareForPublish` can create other issues like: \r\n* Not checking for error cases (ex: trying to create a single-file for a class-library) which may cause unpredictable failures.\r\n*  Not creating the `PublishDir`. \r\n\r\nCan we make the target getting called depend on PrepareForPublish? '
12130,444569651,"b'Yes, I think it is better to add `PrepareForPublish` as a dependency. '"
12130,444580709,"b""I'd add PrepareForPublish as the first dependency -- there were a few other uses of `$(PublishDir)`, so just in case."""
1667,146051421,b'Is it worth the extra complexity to try and detect references to these? Why not just always include them in 4.7.1 like we do for the earlier versions?'
1667,146087277,b'I think we should use whatever logic we are using to detect netstandard for both 2.0 and for earlier. \r\n\r\n@alexghi will give you more data but we believe this set might be larger now. '
1712,149755480,"b""Don't blindly include that inbox. Please consult with @vancem first as I know they were trying to keep it out of box. """
1805,155823307,b'Do what just the latest versions? It would seem to make this a useful cache you would need all versions. \r\n\r\nAs for the list of them I think the best you can do is to provide the latest version of everything that lives in Microsoft.NETCore.App and lookup their latest version on nuget.org.'
1805,155823489,"b""Wouldn't a better place for this list be in Microsoft.NETCore.App itself? In fact we already provide the assembly list we should just be able to provide extra metadata for the version. """
1805,155824042,"b""Perhaps I'm missing something but don't we also need the assembly version and not just the package version? """
1805,155824322,b'Why do we need this list twice?'
1805,156145003,b'We need to be a little careful about that type of logic in servicing type of scenarios. During servicing we will have a 4.x.x that we might actually need to override what is in Microsoft.NETCore.App. '
1805,156148275,"b""I guess thinking about it a little more I think it is pretty unlikely to ship something that overrides the inbox Microsoft.NETCore.App from anything other then the release/2.0.0 branch (i.e. 4.4.x). So we need to at least ensure that these versions are somehow tied to a version of Microsoft.NETCore.App as well. As in we may very well want the 4.4.1 (if and when it ships) version of Microsoft.Csharp to win a conflict over the 2.0.0 Microsoft.NETCore.App but not for the 2.0.x and greater version that contains it. \r\n\r\nI'm not sure how this affects, if at all, Microsoft.NETCore.App < 2.0.0, but we need to be sure that this doesn't start to throw out packages there. """
1805,156243141,"b""Since < 2.0 were packages references nuget should unify the packages and so there shouldn't be a conflict but I not sure if there is any logic to always compare to what is part of Microsoft.NETCore.App so thought I would ask the question just to be sure others think about it as well. """
2113,179808919,b'Do we need to condition these for offline build? '
11190,421320550,"b""You shouldn't be changing all enabled protocols of the user here but rather `ADD` only the ones you need, like you do in line 124"""
122,77870371,b'@eerhardt Why should we add roslyn assemblies to our .nupkg. They are part of the sharedfx and will be loaded from the shared fx path. May be I am missing some scenarios?\n'
122,77923837,b'After a chat with @eerhardt we decided to run the GenerateSatelliteAssemblies target only when msbuild is running on .Net Core. For msbuild running on desktop fx it will default to AL.exe (and not use roslyn assemblies) for generating satellite assemblies.\n'
122,78042011,b'I picked up this code from the cli repo. But is there any advantage to File.Create()? In fact msdn says FileInfo.Create() is just a wrapper around File.Create() - https://msdn.microsoft.com/en-us/library/system.io.fileinfo.create(v=vs.110).aspx#Anchor_1.\n'
122,78043891,b'You are right. Let me remove it. (But my initial thought was that resource assembly is part of the current project). I am not sure if there is a separate Compile item group for resource assemblies.\n'
146,79433657,b'Fixed!\n'
146,79726795,"b'The existing publish test already covers a number of scenarios, I want to leverage that for satellite assemblies too. I did not want to create another test which runs the publish commands on the same project. That will increase a our test times.\n'"
146,79730481,b'Fixed\n'
146,79908150,b'Adding this test helped me find an issue on Unix. Here is the fix for it in msbuild - https://github.com/Microsoft/msbuild/pull/1057\n\nThanks @eerhardt \n'
2857,249983452,"b""It is the latest version we produced so far. I've discussed versioning with @dsplaisted offline before producing the packages and this was deemed a non-issue. Could we run into any issues with this versioning format change?"""
13208,484978634,"b'It would be ideal if ClickOnce can reuse the fixes made for Installer Projects automatically, by consuming same output groups. That way a single fix would solve the publishing issue for all types. ClickOnce publishing is based on folder publishing, and I presume Installer Projects depend on the same.'"
1969,169398670,b'Probably want to update the name of the job to better reflect the SDK. Something like SDK_Perf_${os}_${arch}'
1969,169400807,"b'I am fairly certain that when you use the output argument you need to also specify the file name, not just the out directory.'"
1969,169400969,b'Make sure that you add --append or you will overwrite the measurements'
1969,169401110,b'The container name should be coreclr'
1969,169401350,b'This should include something about SDK in the trigger phrase'
1982,170100274,b'Missing a closing quote here.'
1982,170127594,b'Need to use py to call the Python script'
2318,194500667,"b'Where are the result XML files being dropped and where are we running this command from? I assume the command is executed from the workspace root, but want to make sure. I think it might be good here to do some kind of error checking that we are still finding the results and making sure that we are generating the measurement.json with all of the data.'"
2318,194560543,"b""It's more I am worried that we could change the way that the results are produced and now the find command does not return all of the results to be processed. Given this is likely a small likelihood, but just something that I noticed."""
2696,236893635,b'This needs to be %pythonCmd%'
326,85268278,b'Its RID is win8-arm.\n'
591,95436566,"b""We shouldn't need this per the earlier comment."""
591,95436955,b'Shouldnt the invariant of this function be that it will always return non-null value?'
591,95437414,"b'Will being more specific (about ""runtime"" and ""native"") affect other scenarios that use this Resolve method?'"
591,95438166,b'Wouldnt this result in nullRef exception when GetDestinationSubDirectory returns null?'
591,95438345,b'Why not an enum instead of string?'
591,95829963,b'I am trying to understand what difference your change brings in from what the code currently is. Can you please elaborate?'
685,97638337,b'@ramarag is correct.'
761,98955070,b'What is DoNotDecorteComposeDir for?'
761,98955368,"b'Which ""20MB"" download are you referring to Eric?'"
761,98956086,"b'Why would crossgen not be in CoreCLR package? We are not removing it from there. Also, the intent should be to use crossgen corresponding to the TFM/NETCoreApp specified.'"
761,98956187,"b'FWIW, R2R is default for crossgen.'"
761,98977232,"b'No, we want R2R to be the public story for precompilation. It shouldnt be overridden.'"
800,99407270,"b'Suggestion - give it a more explicit name to avoid any possible conflict with another ""TEMP"".'"
827,99859388,b'Is NetCoreRefDir pointer to folder of reference assemblies or implementation assemblies that you need for crossgen?'
827,99859773,b'What happens if this SDK functionality is used in non-CLI scenarios (e.g. VS chooses to use it)? Who would set this?'
827,99860026,"b""Why are we removing this? Doesn't `FX_Version` get set by the time we are here?"""
890,102533679,"b'"".NET Core App""'"
890,102533873,"b'""Resolves the list of packages...""'"
890,102534202,b'Can you please add some comments on the role of the type?'
890,102534519,"b'For diagnostics, can we emit details of the package reference being worked upon?'"
890,102534705,b'Is the key case-sensitive?'
890,102535416,"b'Why are we trying to add a new value for an existing key? Per https://msdn.microsoft.com/en-us/library/k7z0zy8k(v=vs.110).aspx, Add would throw an exception.\r\n\r\nInstead, should the key be made unique so that such a conflict does not happen when there are multiple entries for different versions of a given package?'"
890,102536913,b'do we have a test that validates that the filtered packages are coming from the cache once the app targeting the cache is activated?'
890,102537274,"b""Also @eerhardt @ramarag in VS F5 scenarios, is the F5 done against the output of publish or dotnet build? If the latter, shouldn't we enable build to also consume filter artifact.xml so that output of build also runs against the cache?"""
890,102578763,b'What happens when the entry XML file contains two entries with different versions but same cased name of the package?'
978,105707808,b'It will be good to add more comments around this and pointers to areas in Core-Setup to which this is connect. It will help the reader with more context.'
978,105708326,"b'It is not really AppName but AppBinaryName, right? Can we reflect it in the field naming as well?'"
978,105708585,b'You should move the byte[] read to be after the checks below so that it is not performed in vain.'
978,105709313,b'I would also suggest writing a comment describing what is happening in the next set of statements for the reader to get context.'
978,105710214,"b'Presumable, the RID check implies that this is a standalone app - is that correct @eerhardt? If so, @ramarag please add a comment around it.'"
978,105710291,b'We should update this to reflect that this applies to standalone apps only.'
978,105717392,b'Microsoft.NEtCore.App already has a reference to Microsoft.NETCore.DotNetappHost - see https://github.com/dotnet/core-setup/commit/ea86ceed56522a0701dcd6e8966bc3407baab4ed#diff-e227ca1ddeaeec8ffe589df5f0928670R20 for details.\r\n\r\n@ramarag What is the purpose behind adding a reference here?'
978,105718529,b'@eerhardt Please see my first comment on the review of this PR - I think it should not be called AppName but rather AppBinaryName.'
978,105721813,"b'Status quo for package referencing is as follows:\r\n\r\nM.N.App -> HostPolicy -> HostResolver -> Dotnet\r\n\r\nIn the above, the latter three may not ever change once released. Thus, when Core-Setup build infrastructure publishes sharedFX, it has the need to restore the versions of the latter three packages. This is done via a special mechanism where this version information is maintained and this allows dotnet.exe released with 1.0.X (for example) to be published as part of M.N.App 1.0.5 and also being included in the respective platform installer.\r\n\r\nSimply removing DotnetHost package or changing its contents will break this approach.\r\n\r\nMoving forward to the AppHost work, @schellap  added AppHost package dependency to HostFXR package (see https://github.com/dotnet/core-setup/commit/ea86ceed56522a0701dcd6e8966bc3407baab4ed#diff-4482ab3edd31393e59c026dd6f9d60f6R19) and updated the SharedFX publisher task to delete AppHost package (https://github.com/dotnet/core-setup/blob/ea86ceed56522a0701dcd6e8966bc3407baab4ed/build_projects/shared-build-targets-utils/Utils/SharedFrameworkPublisher.cs#L130).\r\n\r\nHope this explains.'"
978,105730931,"b'This is really about post 2.0 - what happens if we update it in 2.0.1 and then we do not for the subsequent releases? We need to be able to maintain that invariant, independent of any infra change.'"
978,105731849,b'We definitely need to ensure that this change lights-up in the SDK only for 2.0+ apps.'
978,105732629,"b'For the reason I explained above - it is not about external facing scenario but to ensure that we get the appropriate host restore for sharedFX build. I concur it can be done differently for 2.0 but that does not affect the change here in SDK. Even so, I believe I am agreeing with your original comment that, given dotnet.exe/apphost.exe are referenced in m.n.app already, @ramarag may not need this change here.'"
978,105732781,b'Can you please file an issue in Core-Setup for 2.0 to look into package dependency cleanup for DotnetHost/AppHost?'
978,105763377,"b'I agree it can be made simpler once we have figured the correct changes for Core-Setup. However, that should not block enabling this feature. @ramarag please context to this discussion in the issue above so that, once the feature is enabled, you should visit cleaning up Core-Setup, followed by the SDK.'"
978,106686148,"b'Is it guaranteed that if the apphost.exe exists in the app bin dir, it has been modified? When would this happen? Incremental build?'"
978,106686327,b'Comment should clarify that this is the hash value embedded in _neutured_ apphost binary.'
978,106686652,b'SearchAndReplace should probably return a bool indicating a successful replacement and throw an exception if it failed to replace for any reason.'
978,106687369,"b'KMP_Search returning ""-1"" means the neutered pattern was not found. Since the array corresponds to the bytes of the source AppHost (and not destination), it cannot have been modified but likely replaced or corrupted. We should throw an exception indicating an invalid source apphost since we expect to find the neutered sequence.'"
978,106687603,b'Please make the variable names more descriptive of their role.'
978,106722191,"b'How about ""disabled""? Worst case, _default_?'"
978,106725275,b'I believe that is the issue I raised.'
1119,111397750,b'Why was this change required?'
1119,111398056,"b'Likewise, why do we need these casing changes?'"
1119,111398313,b'_filteredPackages?'
1306,120236817,b'Where does Store output folder get the architecture now from?'
1306,120236953,b'Why are we removing this? I would not have expected this to happen.'
1338,121576411,"b'Why do we need this ""if"" check. The ""else"" section would work for Windows as well and keep the implementation consistent.'"
1338,121576970,b'My suggestion would be to keep the code consistent - there is no overhead scenario in this operation.'
1338,121723118,b'Thanks @steveharter - I concur with you.'
2814,249135007,"b'Comments please.  I know that Create is pretty self explanatory, but it would be nice to know the intention and how it is doing it.'"
2814,249135913,"b'GetTypeGuid will cause a build error if it is not found.  Is it ever legit to have a [ComVisible] public class without a Guid?  If not, then this behavior is likely ok.  My only concern would be that the build processing would stop in such a case with an error.'"
2814,249136253,b'There has been some discussion around our corelib names.  Is this code following the same pattern as other places?'
2814,249136834,"b'I am less familiar with metadataReader... what is returned as the baseClass.  Is it the root (eg. object) or the inherited class?  If it is the later, are com objects still valid if they inherit from other managed or native classes?'"
2814,249151509,b'What does Intermediate mean in this context?  Is this phrase exposed externally?'
2814,249151733,b'Comments please'
2814,249152497,"b'With the recent decision to include runtimeconfig.json for these components, do these tests cover those scenarios as well?'"
2814,249175281,"b'In general warnings and errors are considered the same (as some people have warnings as error).  My primary question was around if the combo without the guid makes sense, which it seems like maybe no?\r\nA follow-up question, which binaries are considered for ComVisibe+Guid?  Are they only the source built or can binary files also be considered?  If the later, the developer may not have full control of them to work around that issue (other than ignoring it - how?)'"
2814,249195047,"b'> This is only considering the source-built binary\r\n\r\nThis is good.  Then my only ask is to do a little more due diligence on the likelihood of a case where ComVisible is present, but was benign but is now an error.'"
923,103536125,b'Why did this have to change?'
923,103536194,b'Why did the build command have to change?  Was this local only stuff to see what was going on?  Can we undo this line?'
923,103536775,b'What consumes this properties?'
923,103537156,"b""This is confusing to me.  What is `%(FileName)` here?  There's no item we are referring to, right?"""
923,103537281,b'This is a weird name for this property.'
923,103537594,b'Maybe you can add a comment here pointing at `https://github.com/NuGet/Home/wiki/Adding-nuget-pack-as-a-msbuild-target#packing-using-a-nuspec` to explain why we have this project?'
923,103572927,"b'I think having the `;` here is causing problems.  Unix uses ; as a separator between commands.  At a minimum I think this needs to change to  `\'/flp:logfile=""project.log;verbosity=diagnostic""\'` but it may be better just to drop this extra argument.'"
923,103600434,b'How is $(Version) defined here?  The dotnet pack command sets it implicitly somehow?'
923,103600493,"b""I don't think this property is correct.  What does `%(FileName)` refer to here?"""
923,103601830,b'FYI. I think the Clean target in this file now needs to work because it worked based on the itemgroup that no longer exists.'
13655,489818921,b'Is this guaranteed to always be true for `Microsoft.Windows.SDK.NET`?'
3167,277766584,b'How long does your perf testing run? Does this need to be 4 hours? Can it be shorter?'
1147,113084481,b'This VSIX is no longer created.  `Microsoft.VisualStudio.Templates.CSharp.NetCore.vsmanproj` is the only thing that is still built and its only purpose is to package `Microsoft.NET.Sdk.swixproj`.  '
11717,428879911,"b""@dsplaisted It appears this is failing on ubuntu runs. I'll investigate but I would appreciate it if this is a failure that you've seen before. I assume it has to do with the location of the packages folder in linux vs windows? #Resolved"""
11717,428883390,"b'nevermind, I got it. its filesystem case-sensitivity #Resolved'"
11717,428919122,"b'no, this would be something that we could see in telemetry (if we hash this name). So that we could get an inkling as to how many folks are using implicit analyzers in their project #Resolved'"
11717,428952845,b'@mavasani do we have a spec for `Analysis Level` yet? #Resolved'
11717,428953060,b'I assume that will not need to be set in these targets files correct? I suppose if it does we should set it in the analyzer props/targets #Resolved'
11717,434986591,b'reduced this to just deploy the dlls and not have duplicates. A about half of the size is for resource dlls which I believe we need. Let me know if there is something I am not thinking of that could reduce the size here.'
11717,435008832,b'There are no VB localized resources. `Microsoft.CodeAnalysis.NetAnalyzers.dll` contains all the resources for both C# and VB and each assembly then uses `Microsoft.CodeAnalysis.NetAnalyzers.resources.dll`'
11717,435009126,b'good idea'
12422,453663815,"b'my thinking was that `AnalysisLevel` controls both which analyzers are active and which warning level is passed to the compiler. `WarnVersion` is only about what the compiler produces. Today both of these properties will have the same value, but in the future `WarnVersion` will be tied to the compiler and `AnalysisLevel` will be tied to the platform'"
12422,460327155,"b""I'll update the PR"""
12422,461947874,b'correct. If the TFM is .NET 5 we set if automatically'
12827,467204140,"b""it was not. I verified that this does the right though without this change using -pp. I'll back this out. I was being paranoid."""
12898,469467402,"b""4 is the default. So I can check if the `WarningLevel` is not 4 and only change it in that case. I can't think of any other way to check if a user has set this value or not. It is set regardless."""
12898,469470944,"b""it must be an integer. It cannot be a string like '5.0'. I must be '5'\r\n\r\n```cmd\r\n> csc -warn:5.0 Hello.cs\r\nMicrosoft (R) Visual C# Compiler version 3.8.0-2.20410.4 (2c664a69)\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nerror CS2035: Command-line syntax error: Missing ':<number>' for 'warn' option\r\n```"""
12898,469479081,b'My recommendation is a user wants to do this is to set `<AnalysisLevel>none</AnalysisLevel>` and `<WarningLevel>X</WarningLevel>` with `<EnableNETAnalyzers>true</EnableNETAnalyzers>`'
12898,469487707,"b""So I want the analyzers from .NET 5 and the compiler warnings from some future version? The only thing I can think of is to not set `WarningLevel` iff it is higher than 4. It will never not be set to some value. The scenario we can't support in this case is the user doing `<AnalysisLevel>5</AnalysisLevel>` and `<WarningLevel>4</WarningLevel>`."""
12898,469493954,"b""ah, I believe you are right. the compiler itself sets the default not the targets. I'll update this"""
12968,472451081,"b""What is the name of the codestyle package for VB? I couldn't find one"""
12968,473061792,b'perhaps I need to define a different property here. This would mean installing FxCop analyzers will disable codestyle analysis'
12968,473179517,b'I would like to keep analyzer behavior for other frameworks the same as previous releases. I do not want to have to test and support a giant matrix of frameworks'
13224,479565104,b'I would at least check if the project is C# or VB. Otherwise this seems fine'
13354,483128004,b'align with previous item'
13354,483128779,"b'yep I think we want this: `<ItemGroup Condition=""\'$(Language)\' == \'C#\' Or \'$(Language)\' == \'VB\'"">`'"
13354,483763838,"b""why can't sync namespaces work for VB? both languages have namespaces?"""
1687,147248984,b'This target appears to be re-implementing some of the functionality of Publish.targets from the package.  Is this a temporary step (subsequent versions of the package have changed considerably)?  '
1687,147249945,"b'Is this necessary?  I suppose it is for this version of the package.  When you update to the later version, you should be able to get rid of this logic and just let dotnet determine the dll and handle imports.'"
1687,147250280,"b""Personally, I'd move this into the csproj (before the import) so that you can see the package reference and version in the same place rather than having to go the targets file to see what version is used.  I view the targets file more as supporting plumbing for the toggles defined in the csproj."""
1687,147250522,"b'Seems like these types of property should be defined in common.props.  ie NewLineTF, SetDotnet_Skip_FirstTime, etc...  '"
1687,147255708,"b""I'd be worried about temporary steps because they often become servicing branches and then updating them can be painful because they vary so much from other branches.  ie, I would hate for the servicing story to be, rewrite this target to match the new target in the package.  I understand that the api for this package was rough for the version you're currently using though."""
1687,147268304,b'Can you send me a link to your official build for sdk so I can get a better idea for how this is executed?'
2507,216407837,"b'In the other CLI repos I looked at, I changed this to reference arcade from local folders - https://github.com/dotnet/CliCommandLineParser/pull/121'"
3062,270566103,b'You should move this to use the `jobs/jobs.yml` file or `job/job.yml` file.  https://github.com/dotnet/arcade/blob/master/Documentation/AzureDevOps/PhaseToJobSchemaChange.md#--what-is-the-engcommontemplatesjobjobyml-template'
3062,270566236,"b""Technically, this condition shouldn't be needed.  The templates should do the right thing"""
3062,270569544,"b""nit, your default is 180, but you're explicitly passing 120 everywhere.  You might just set the default to 120 and then not override the default."""
3062,270571843,"b'I *think* that this might work, but only because you only have one variable defined in `.vsts-ci.yml`.  As soon as you add another variable, I think yaml will get confused because you\'ll be trying to insert the yaml variables ""object"" into the variables ""array"" and it won\'t know what to do with that.  The way to fix this would be to change `.vsts-ci.yml` to pass variables as an array...\r\n\r\n```yaml\r\n\r\n      variables:\r\n      - _PREVIEW_VSTS_DOCKER_IMAGE: microsoft/dotnet-buildtools-prereqs:ubuntu-16.04-cross-e435274-20180628134544\r\n```\r\n\xe2\x80\xa6 and then insert each of those items here like we do in job.yml...\r\n\r\nhttps://github.com/dotnet/arcade/blob/master/eng/common/templates/job/job.yml#L89-L109'"
3062,270573361,"b'change this to `\'\'` so that it aligns properly with the condition below that is checking to see if ""strategy"" is an empty string or not.  I\'m not sure if the comparison of `{}` resolves to `\'\'` or not.'"
3062,270573410,b'You should be able to delete this section of code as it is handled automatically by `job.yml` since you specified `enablePublishBuildAssets=true` above.'
3062,270574139,"b""The variables above need to be defined using the array syntax.  You can either define variables using the object syntax or the array syntax, but you can't mix n' match.\r\n\r\nhttps://github.com/dotnet/arcade/blob/master/Documentation/AzureDevOps/PhaseToJobSchemaChange.md#phase-to-job-schema-transition\r\n\r\nWe've settled on the array syntax because the object syntax doesn't support variable groups.  In its current state, I think all of the above variables will just get silently ignored."""
3062,271079099,"b""nit:  For variables defined using array syntax, you could just define the default and then override with the internal condition.  ie.\r\n\r\n```yml\r\nvariables:\r\n- name: teamName\r\n  value: Roslyn-Project-System\r\n- name: PB_PublishBlobFeedUrl\r\n  value: ''\r\n- ${{ if ne(variables['System.TeamProject'], 'public') }}:\r\n  - name: PB_PublishBlobFeedUrl\r\n    value: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\r\n  - name: _DotNetPublishToBlobFeed\r\n    value: true\r\n```"""
3062,271079326,"b""The conditions in this `variables` block have to be treated the same way as the rest of the values in the object.  ie, you have to treat them as array entries meaning prefix them with `- `\r\n\r\nie `- ${{ if eq(variables['System.TeamProject'], 'public') }}:`"""
3062,272340434,"b""It doesn't appear that this property (`timeoutInMinutes`) is being passed through to the `job.yml` template."""
3197,280623597,"b""Should add this step.  I noticed that repos that don't end up with dirty enlistments at times\r\n\r\n```yaml\r\n      - checkout: self\r\n        clean: true\r\n```"""
14050,503505280,"b'I saw some "".otf"" files as well, in one of my validation runs, I\'m not sure which repo it came from, I\'ll try to figure it out.  It might be a non-issue here.'"
14050,503506110,b'Will this need to be added to the signcheck exclusions file?'
591,94865939,"b'This is a hack for now, i filed an issue with nuget client and got them to get a change- https://github.com/NuGet/NuGet.Client/pull/1096, that we will use as\r\nFallbackPackagePathInfo.PathResolver.RootPath to get the packageRoot. '"
591,94878798,b'will also do this at the start of cache phase'
591,94878869,b'should change this to be unique to every invocation'
591,94888529,b'i have already called this out in https://github.com/dotnet/sdk/pull/591#discussion_r94878869'
591,95043235,"b'Only the managed assemblies, which are copied in step https://github.com/dotnet/sdk/pull/591/files/f8e0bd7d906be1ae3d1f8b105bf539455c3da6ce#diff-8a3d011306d4fb49ae22e3b9f51e2811R309'"
591,95716440,b'the earlier comment https://github.com/dotnet/sdk/pull/591#discussion_r94871628 is referring to duplication of logic within the function and not its usage'
591,95716526,b'corrected'
591,95716618,"b'I believe targetLibrary.RuntimeAssemblies by definition are ""runtime"" assemblies'"
591,95716962,"b'GetDestinationSubDirectory is not going to return null, unless the path needed for preservecachelayout=false is null ( i.e GetRuntimeTargetDestinationSubDirectory(runtimeTarget)\r\n\r\n'"
591,95716975,b'adding '
450,95723995,"b'Apart from the project and command line, do you see that this variable getting set for specific targets.\r\nFor example The Target for cache command will not want this implicit reference\r\n\r\ncc @schellap\r\nhttps://github.com/dotnet/sdk/pull/591'"
591,95724260,b'done'
591,95734351,b'done https://github.com/dotnet/sdk/issues/635'
591,95734394,b'done'
591,95734424,b'done'
591,95734448,b'done'
591,95734489,b'done'
591,95734518,b'done'
591,95734544,b'done'
591,95734611,b'Actually the Version of NetcoreApp is specified by the user '
591,95734678,b'done'
591,95734722,"b'yup, thanks'"
591,95734779,b'this should be fixed now'
591,95871659,"b'When results are getting populated previously we used to lose the information on the type of assemblies, [ their type was explicit due to their nuget layout and way nuget provides them as different lists like-\r\nRuntimeAssemblies - managed code\r\nNativeLibraries         - unmanaged code\r\n\r\nI am just adding back this information, to be used  in filtering the list by the msbuild targets'"
591,95933237,b'Added  tests  '
591,96111089,"b'@nguerrera correct me if i am wrong- IPackageResolver is more like the interface sdk consumes, kind of like PAL that abstracts Nuget package management. So if the interface changes it is unlikely to ever break our consumers.\r\n\r\nAs of now this interface is only implemented by sdk'"
591,96715208,b'The cache step is used to prime the assemblies. the run step will only occur after publish with filter profile. The CoreDistTools are unmanaged native component. I do not see the need for a SimpleManaged test. Will add one when i do publish PR'
591,96716161,"b'This is used to generate the Project to restore crossgen, the Alternative is to pass it as parameter to the Restore Target. I will leave it here for increased diagnosability'"
591,96744091,b'done'
591,96744117,b'removed'
591,96744292,b'done'
591,96744470,b'The Enum is convenient for reasoning on the types of assets we are dealing with'
591,96744584,"b'I am going to copy the files every time, will remove the comments'"
591,96947246,b'Currently the Exec tasks are running sequentially\r\n\r\n@eerhardt @dsplaisted any ideas on making them run in parallel ?'
685,96948077,b'This is created in https://github.com/dotnet/sdk/pull/685/files#diff-ffd1a974928a37a20fbc471c040962acR265 as product of restore on the filterprojfile'
685,96948751,"b'Correct me if i am missing something, i thought LockFileCache maps to a single asset file. We are dealing with two asset files here \r\nAssetsFilePath - the App project\r\nFilterLockFile  - the Filter profile supplied'"
685,97441455,"b'ah got it , you did not want to new up another object'"
685,97441490,b'fixed'
685,97441505,b'done'
685,97441523,b'corrected'
685,97441868,"b'yup, corrected '"
685,97441884,b'corrected'
685,97629980,b'i had a chat with @nguerrera there seems to be no other clean way'
685,97631596,b'Oops will correct it'
685,97631614,"b""The caching step is typically done by admin or installer scripts. We do not expect the end user to do this themselves.\r\n\r\nWhen this feature was spec'd, we decided to not do side by side install for the same TFM, to fix the crossgen bug- we would replace the assemblies already cached with the updated assembles, using the above mechanism\r\n\r\nThe readytorun images are supposed to be resilient to runtime changes  within the same TFM, worst case we are to fallback to jitting\r\n\r\n@gkhanna79 : Do correct me if i am wrong"""
685,97631717,"b'Runtime options are only read by the dotnet host, so we have some leeway here'"
685,97635676,"b'There seems to be no good way to get reliably the same TargetFramework which was used to create the TargetFrameworkMoniker. Since we use the user supplied TargetFramework at build time, we want it to be the same here'"
761,98985859,"b'This is used by tests, as the paths are exceeding MAX_PATH on windows'"
761,98986272,"b'can you share such a package with me, will need to see how the new layout will be. It would be great if we could ask nuget directly for an artifact called tool, just like we are asking for native,resources and runtime(managed)'"
761,98987139,"b'This is only used by dotnet cache, which only takes a list of packages. This is not to be confused with build of publish.\r\n\r\nHaving said that, it is easy to plumb this logic into build and publish by appending to _CGenPlatformAssembliesPath as  done at  L95:\r\n  _CGenPlatformAssembliesPath=$(_RuntimeRefDir)$(PathSeparator)$(_NetCoreRefDir);"" />'"
761,99034201,b'Nope it is not needed'
800,99413495,"b'That was actually the intention, on windows TEMP is defined and i am happy to use whatever it is,\r\nBut on Xplat it is undefined and the need to call the GetTempPath'"
800,99416176,"b'dotnet-cache does is not like other dotnet commands, as it is not associated with a folder. Think of it like install command.\r\n\r\nHowever an option is provided for the user to specify the intermediate directory.'"
827,99759670,"b'making the netcoreapp as the first place to look for dependencies before the closure of the specified package. as we are no longer shipping the corefx libraries individually, so they can not override it'"
827,99906119,b'i am using implementation assemblies here'
827,99931967,"b""the user is supposed to set this, if not then SDK will deduce a default through RuntimeFrameworkVersion, which is what i am making it move to now.\r\npreviously was disabling the implicit reference and adding an explicit ref, but changing it as per @eerhardt 's   https://github.com/dotnet/sdk/pull/761#discussion_r98922463"""
827,99932142,"b'FX_Version is an optional parameter, previous deduction was not always safe'"
837,100028703,"b""great catch, but instance methods can not be used inline in msbuild, we need a static method.\r\nI will escape the '.' for now"""
837,100031212,b'Giving the app assemblies the priority again as system assemblies are filtered out in the common case'
890,101936148,b'Will remove this and replace it with DisableImplicitFrameworkReferences=true in the invocation of CacheWorkerMapper'
890,101936172,b'will add a new line'
890,102134724,b'@dsplaisted is it fine to include product code in test ? Or is there any other good way to consume this logic in tests'
890,102576731,b'will do'
890,102578067,"b'The key is case-sensitive , as you can see from definition of filterLookup, it is a dictionary of hashset. This is necessary as we are indexing packages with just the package name for the purpose of efficient filtering, and out list could have same packages with different versions.'"
890,102578285,b'will change'
890,102635026,"b'HashSet does not throw, it just ignores duplicates'"
890,102635195,b'We only check for the layout in sdk repo.\r\n'
890,102635240,b'i am emitting them in its caller. as this code is shared with tests\r\nhttps://github.com/dotnet/sdk/pull/890/files#diff-12149d9a659a09923162cd8cd2ac24d0R62'
890,102819204,"b'These are specified via command line in msbuild like, hence the need to split by "";""\r\nmsbuild  /t:publish /p:FilterProjFile=profil1.xml%3bproflie.xml test.proj\r\n\r\nIf there is a good way to to specify an intemgroup [ i am assuming that is what you mean by non-scalar msbuild input, do let me know]'"
890,102850267,"b'The logic is used to verify the output of the integration test. I can duplicate the logic, but @dsplaisted was ok with using this to build test.'"
890,102860368,b'everything is parallelized'
890,102860559,"b'the test framework is incapable of handling long file names, this is one of the ways the file path length was reduced'"
890,102886504,"b'yeah, but i found one time, i believe for Exists. Where the directory separator actually matters and msbuild does not do the right thing.'"
890,102888070,b'done'
890,102888904,b'done'
890,102888955,b'done'
890,102889514,"b'As i have stopped copying temp files, I no longer need the nuget layouts from now on, will remove these'"
890,103017367,"b'I am providing an escape hatch here, so that all resolves can use the same target'"
890,103018753,"b'This is needed to ensure that we do not do redundant crossgen as this task is being invoked in parallel on an arbitrary list of packages which could very well have duplicates.\r\n\r\nThe issue you are referring to only occurs when we install the assemblies to user profile cache.\r\n Probably getting the output to a staging directory and then copying to the final destination would make sense, but for preparing zips it should not matter '"
890,103019105,"b'I am not picky with any of the names, suggestions are welcome. This is just the default name.\r\nIn fact users can rename the file when they are distributing it'"
913,103057705,b'done'
890,103069974,"b'i would like to know why, will do it anyway'"
890,103070012,b'great catch !!'
890,103365273,"b'The absence of an RID indicates that we can not do any optimization, so this should be an unconditional check. Anyway this condition will not be triggered in regular workflow'"
890,103370156,b'I am aggregating all parallel computations of PackagesResolved in  AllResolvedPackagesPublished'
890,103370375,b'This is the new format of FilterProfile that will be passed to publish \r\n@nguerrera @eerhardt is this fine?'
890,103370709,b'The logic here is used to generate the artifact.xml from the cache step'
890,103553516,"b'great catch, will remove this logic for now. As i am handling duplicates when consuming them'"
890,103593902,b'There is no good reason either way'
890,103600599,"b'This logic would need to be duplicated in test sources, there is no other way out.\r\nI believe this is the lesser of the evils'"
890,103629263,"b'spoke too soon, have fixed this with RemoveDuplicatePackageReferences'"
890,103798670,"b'i will keep this for now. as it will also lead to an extensible format, if we want to add anything more for cache.'"
890,103798802,"b'argh.. should stop doing this, will fix'"
890,103814184,"b'ok will get rid of it, yes if we need to extend we can add some other element '"
890,103814655,"b'It is used in the compose phase, will move it there'"
890,103816111,b'changed it to set'
890,103856667,"b'It is not as trivial as that, the contents of the file are going to differ across platforms and we will end up with multiple such files and make the test fragile. Logic like https://github.com/dotnet/sdk/blob/b3ee71d0186053f85d0a1d2094e9695ae2e7b1e9/test/Microsoft.NET.Publish.Tests/GivenThatWeWantToCacheAProjectWithDependencies.cs#L156  would need to be written\r\n\r\nIf it becomes unbearable we should just fork the logic at that point'"
890,104072343,"b""I don't want to start doing something different just because we can.\r\nI would stick to conventions as much as possible"""
890,104075198,b'@nguerrera changed them'
964,105092588,"b'it is part of CDATA, used to generate a csproj'"
978,105520847,"b'The info inside is the name of the app, so if we have placed a file here- there is not much to do.\r\nDo you think a comment will make it more clearer '"
978,105521050,"b'That is the meta package, it will not resolved to any assets'"
978,105521080,b'Because i need to set the metadata on the item'
978,105521153,b'oops copy paste error'
978,105521158,b'oops copy paste error'
978,105521211,"b'blame @schellap for this, does it make more sense to move this string into C# or just hard code the sha value ?'"
978,105521245,"b'This is the extension of the managed assembly, i believe it will always be a "".dll""'"
978,105521360,"b'This is a one time operation for every project. We have made the design decision to replace the byte stream in the host, i suppose there is no way out\r\n\r\nOn win7-x64 it is 74 kb'"
978,105521652,"b'publish pipes in from build, the notion is largely artificial '"
978,105522225,b'is it not the same ?'
964,105524965,b'done'
978,105739901,"b'This sets the metadata on all ResolvedFileToPublish, not what we actually want '"
978,105741012,b'no i check first if apphost.exe is available and if not then i fall back to dotnet.exe\r\n\r\nThe apphost reference is only added for post 2.0 projects'
978,105775682,"b'@eerhardt i have already done what you are suggesting.\r\n@gkhanna79 the latest M.N.App package indeed refers the Apphost package, but the one sdk currently refers does not, will update it to the latest version and remove this reference '"
978,105789745,"b'Actually spoke too soon, i will have to update M.N.App to get apphost.exe in it '"
978,105804999,b'Getting this done by https://github.com/dotnet/core-setup/pull/1728'
978,106721163,b'yes'
978,106721236,"b""people were against using the term 'neutured'"""
978,106721469,b'there is only one point of failure and we throw at that point '
978,106721512,b'will do'
978,106722227,"b'if it is not the apphost will fail. I was wondering should i add a knob to turn off the EmbedAppNameInHost and add a test case to turn of the knob and see the test fail, i decided against it as this is testing the host and we already do that in core-setup'"
978,106722970,b'There is no prefix in that class'
978,106723392,b'@gkhanna79  do you want a different error message ?'
978,106736945,"b'please suggest error messages,if you want that to be changed'"
978,107013694,"b""This is a one time per project's lifetime. We can revisit it later, will file a bug for it"""
978,107013770,b'Will file a bug for it'
1119,111475691,b'that is currently being done in cli. Has SDK enabled first class test experience for .Netcore 2.0 ?'
1119,111490615,b'moved the comment below'
1119,111500926,b'will track in https://github.com/dotnet/sdk/issues/1036#issuecomment-294038564'
1119,111500954,b'done'
1297,120047773,"b'@nguerrera that was my intention, but i am now going to revert this commit. As this folder is just a scratch space for store to perform its function.'"
1297,120165041,"b'This is the output of a ""resolve"" so all package Ids are going to be unique.'"
1297,120165453,"b'used for debug, will remove '"
1297,120183536,"b'not necessary, the store targets are the only one looking for the files under it and they all know the correct location'"
1297,120194316,b'it is necessary for conflict resolution'
1297,120194473,b'i confirmed with @emgarten. this is the correct place'
1297,120194935,b'Restore crossgen is only done once to get the crossgen infra setup. The other crossGen is to actually run the crossgen'
1297,120199505,"b'on linux we get one extra file, the test becomes brittle on cross plat'"
1297,120202758,b'because as of today it only gets set for self contained executable projects:\r\nhttps://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.RuntimeIdentifierInference.targets#L107 \r\n'
1306,120238087,"b'Previously userprofile store was in\r\n<user_profile>\\<arch>\\store\r\n\r\nsince we have removed both sdk and shared Fx from user_profile, this location no longer makes sense. I have moved store now under <user_profile>\r\n\r\nThe tooling adds <Arch> and <tfm> and passes this path as an additional probing path for developer scenarios '"
1306,120498552,b' I think you can use string[] here instead'
4,73268708,"b""You need to additionally specify either `latest-or-auto-internal` or `latest-dev15-internal` (both contain dev12 and dev14, but the latter also contains dev15). For example: `Utilities.setMachineAffinity(newJob, 'Windows_NT', 'latest-dev15-internal')`.\n\nThis is required for all internal jobs to ensure nothing can be maliciously pulled off a machine by an arbitrary PR made against a public repo.\n"""
4,73268861,"b""nit: It seems like you are only ever using `lowerCaseConfig`, so it would probably make sense to just do `['debug', 'release'].each { config ->` and then use `config` directly.\n"""
4,73395750,b'Fix comment now that only or jobs are generated.\n'
54,75020264,"b""`-ExecutionPolicy Bypass` is better, as it doesn't require the user to have explicitly set the execution policy to `RemoteSigned` first.\n"""
54,75021855,"b'The user has to call `Set-ExecutionPolicy RemoteSigned` before they can run `Build.cmd` (most, but not all developers, seem to do this if they work with Powershell frequently).\n'"
54,75026243,"b""If that's the case, then I am fine with RemoteSigned. @jaredpar might have some better knowledge, I know he recently changed one of our scripts to use Bypass due to a customer issue filed.\n"""
731,97979411,"b""Nit: use $env:VSInstallDir, so you don't need to specify the ..\\.."""
731,97979576,b'Nit: Use `ResolvePath -Path $msbuildPath`'
731,97981044,b'I would much rather we create a custom attribute and skip this dynamically: https://github.com/xunit/samples.xunit/blob/master/DynamicSkipExample'
731,97981215,"b'Same here, would much rather this be dynamically skipped than falsely marking it as passing'"
1178,114868938,"b'@eerhardt, I would think this would be valid and part of setting `IsExecutable=true` would involve having uses configure the F5 information (to use xunit, nunit, dotnet, etc...)\r\n\r\nHowever, maybe having a separate variable to disable (or explicitly enable) F5 for some scenarios would be desirable'"
1674,146051973,"b""I don't think this should be 'Visible=false'\r\n\r\nIt is nice to be able to view this file and open it from within VS."""
1674,146052066,b'I think `Environment.GetCommandLineArgs()` achieves the same thing and would work here.'
1702,148074712,"b""not sure why it isn't, there should only be a couple modified lines (where I added quotations around some of the names)"""
1702,148074749,b'potentially.'
1702,148074900,b'likely because it was moved and modified enough that git no longer tracked it'
1702,148075254,b'yes and no. I added or touched files which expect specific line endings/etc. Not having this means it is more likely to break due to a user change.'
1702,148118297,b'See the comment at the top of the file: https://github.com/dotnet/sdk/pull/1702/files/fb83bc7ce80f5f12ad21bf408678ee1f000aa331#diff-9260067da6a2db86b9a5db30fa8ee2aeR5'
1702,148118672,"b""We don't, must have been a copy/paste error from the base Version.props file."""
1702,148119453,b'will adjust. Is which script to use documented somewhere?'
1702,148126012,"b'as long as your fine with the standalone commits not being buildable, I can do that.'"
1702,148959809,b'Fixed.'
1702,148959828,b'Fixed.'
1702,148959829,b'Fixed.'
1702,148959851,b'Fixed.'
1702,148959933,"b""I'll look into this."""
1702,149511867,"b""We aren't using it yet."""
1702,149512010,b'This is a newer version than what repo-toolset is consuming by default.'
1702,149512042,b'This is newer than what toolset uses by default.'
1702,149512347,b'less changes required to the existing test framework used by the SDK repo.\r\nI have a local list of a number of things which need further cleanup'
1702,149526181,b'Its used by tests'
1702,149751819,b'Fixed.'
1702,149751851,b'Fixed.'
1702,149751861,b'Fixed.'
1702,149751889,b'Fixed.'
1776,153935134,b'Added a `-dogfood` option and an explicit `build\\dogfood.bat` script'
1776,153949177,b'`-NoExit` preserves the powershell context when the script finishes executing'
1776,153949283,b'Its added to the path already down below'
1796,156193490,"b'Do we want the perf tests to run as part of the unit test switch, or do we want them to run separately (which, I believe, is what most of the other repos are doing)?'"
1818,157019478,b'@tmat had brought in this change.'
1796,159753406,b'I thought that both perf frameworks provided infrastructure for all this. Why are we writing our own?'
1858,162432688,"b'Yes. The SignTool expects all binaries in containers (nuget, vsix, etc) to be explicitly signed or explicitly excluded.'"
1858,162432704,b'CC. @jaredpar '
1860,162461132,b'I believe most of them are in the `tools` directories.'
1860,162461234,b'(for netcoreapp)'
1860,162501523,"b'Fair enough, but that looks like it should be a separate work item, since this has been like this since before the infrastructure switch.'"
1981,169703831,"b""Why `*` instead of being explicit? I'm never in favor of relying on `*` for anything that can impact the dependencies of a build..."""
1981,169708612,"b""Just because it doesn't cause conflicts today, doesn't mean it can't/won't in the future.\r\n\r\nHaving any kind of `*` that impacts your build is generally bad practice. It makes things non-deterministic and means that you don't have explicit control over what things are being brought in.\r\n\r\nWe have explicitly kept away from using `*` everywhere else because of this. (CC. @jaredpar)"""
2000,171030733,"b""I copied this line verbatim from @jaredpar's fix."""
2000,171030885,b'https://github.com/dotnet/roslyn/pull/25053/files'
2090,177585791,"b'This causes the ""library"" section to be populated properly.'"
2090,177586060,"b'Not sure if calling this ""projectReference"" is ok., but it allows the user to disambiguate a direct reference from an indirect reference.'"
2090,177586287,"b'This allows the references to be listed as dependencies of the containing project, rather than as direct dependencies of the current project.'"
2090,177591237,"b'```json\r\n{\r\n  ""runtimeTarget"": {\r\n    ""name"": "".NETCoreApp,Version=v2.0"",\r\n    ""signature"": ""41fbaae64145566d43875d212a202eacef28ceea""\r\n  },\r\n  ""compilationOptions"": {},\r\n  ""targets"": {\r\n    "".NETCoreApp,Version=v2.0"": {\r\n      ""ConsoleApp34/1.0.0"": {\r\n        ""dependencies"": {\r\n          ""ClassLibrary1"": ""1.0.0""\r\n        },\r\n        ""runtime"": {\r\n          ""ConsoleApp34.dll"": {}\r\n        }\r\n      },\r\n      ""System.Runtime.CompilerServices.Unsafe/4.4.0"": {\r\n        ""runtime"": {\r\n          ""lib/netstandard2.0/System.Runtime.CompilerServices.Unsafe.dll"": {}\r\n        }\r\n      },\r\n      ""ClassLibrary1/1.0.0"": {\r\n        ""dependencies"": {\r\n          ""System.Runtime.CompilerServices.Unsafe"": ""4.4.0"",\r\n          ""ClassLibrary2"": ""1.0.0.0""\r\n        },\r\n        ""runtime"": {\r\n          ""ClassLibrary1.dll"": {}\r\n        }\r\n      },\r\n      ""ClassLibrary2.Reference/1.0.0.0"": {\r\n        ""runtime"": {\r\n          ""ClassLibrary2.dll"": {}\r\n        }\r\n      }\r\n    }\r\n  },\r\n  ""libraries"": {\r\n    ""ConsoleApp34/1.0.0"": {\r\n      ""type"": ""project"",\r\n      ""serviceable"": false,\r\n      ""sha512"": """"\r\n    },\r\n    ""System.Runtime.CompilerServices.Unsafe/4.4.0"": {\r\n      ""type"": ""package"",\r\n      ""serviceable"": true,\r\n      ""sha512"": ""sha512-9dLLuBxr5GNmOfl2jSMcsHuteEg32BEfUotmmUkmZjpR3RpVHE8YQwt0ow3p6prwA1ME8WqDVZqrr8z6H8G+Kw=="",\r\n      ""path"": ""system.runtime.compilerservices.unsafe/4.4.0"",\r\n      ""hashPath"": ""system.runtime.compilerservices.unsafe.4.4.0.nupkg.sha512""\r\n    },\r\n    ""ClassLibrary1/1.0.0"": {\r\n      ""type"": ""project"",\r\n      ""serviceable"": false,\r\n      ""sha512"": """"\r\n    },\r\n    ""ClassLibrary2.Reference/1.0.0.0"": {\r\n      ""type"": ""projectReference"",\r\n      ""serviceable"": false,\r\n      ""sha512"": """"\r\n    }\r\n  }\r\n}\r\n```'"
2090,177592206,b'`package` is currently used for all package references (direct or indirect)\r\n`project` is currently used for all project references\r\n`reference` is currently used for direct references\r\n\r\nI can either have indirect references labeled as `reference` or something else. I had picked `projectReference` since that is what the MSBuild metadata labels it as.'
2090,177592480,"b'> I don\'t think we can just invent a name to go there.\r\n\r\nRight, which is why I made sure to call it out. If we can\'t then I can just relabel it to ""reference"".'"
2090,177593683,"b'> I think we\'re missing cases if we only work with MSBuild projectReference metadata.\r\n\r\nDependencies of transitive direct references show up the same transitive direct references.\r\n\r\nFor example:\r\n* `ConsoleApp34` has a `<ProjectReference Include=""..\\ClassLibrary1\\ClassLibrary1.csproj"" />`\r\n* `ClassLibrary1` has a `<Reference Include=""ClassLibrary2"" HintPath=""..\\ClassLibrary2\\bin\\Debug\\netstandard2.0\\ClassLibrary2.dll"" />`\r\n* `ClassLibrary2` has a `<ProjectReference Include=""..\\ClassLibrary3\\ClassLibrary3.csproj"" />`\r\n* `ClassLibrary3` has no dependencies\r\n\r\n`ConsoleApp34` still gets a `ReferenceDependencyPaths` entry for `ClassLibrary3` with a `ReferenceSourceTarget=ProjectReference`'"
2090,177599759,"b'Yes, that is the case I explained here: https://github.com/dotnet/sdk/pull/2090#discussion_r177593683'"
2090,177600291,"b""Fixed to just be 'reference'"""
2090,177604395,"b""Talked to @nguerrera  in person. He was asking about the deps.json for a project that had a direct reference to a dll, which in turn had a dependency (basically what the deps.json for `ClassLibrary1` would look like for https://github.com/dotnet/sdk/pull/2090#discussion_r177593683).\r\n\r\nIn that case, `ClassLibrary3` shows up in the `ReferenceDependencyPaths` but with `ReferenceSourceTarget=ResolveAssemblyReference` (where-as it shows up as `ReferenceSourceTarget=ProjectReference` in `ConsoleApp34`).\r\n\r\nI've updated the logic to not filter the `ReferenceDependencyPaths` nodes by `ReferenceSourceTarget` to account for this."""
2090,177820213,"b""Right. I'll fix this up."""
2090,177828074,"b'Yes. The `ReferenceDependencyPaths` satellites come through `ReferenceSatellitePaths`.\r\n\r\nUnder the current code, the satellites are being adding to the project reference resources and the actual reference resources, so I\'ll need to fix up the logic slightly:\r\n```json\r\n""ClassLibrary1/1.0.0"": {\r\n  ""dependencies"": {\r\n    ""System.Runtime.CompilerServices.Unsafe"": ""4.4.0"",\r\n    ""ClassLibrary2"": ""1.0.0.0"",\r\n    ""ClassLibrary3"": ""1.0.0.0""\r\n  },\r\n  ""runtime"": {\r\n    ""ClassLibrary1.dll"": {}\r\n  },\r\n  ""resources"": {\r\n    ""de-DE/ClassLibrary2.resources.dll"": {\r\n      ""locale"": ""de-DE""\r\n    },\r\n    ""de-DE/ClassLibrary3.resources.dll"": {\r\n      ""locale"": ""de-DE""\r\n    }\r\n  }\r\n},\r\n""ClassLibrary2.Reference/1.0.0.0"": {\r\n  ""runtime"": {\r\n    ""ClassLibrary2.dll"": {}\r\n  },\r\n  ""resources"": {\r\n    ""de-DE/ClassLibrary2.resources.dll"": {\r\n      ""locale"": ""de-DE""\r\n    }\r\n  }\r\n},\r\n""ClassLibrary3.Reference/1.0.0.0"": {\r\n  ""runtime"": {\r\n    ""ClassLibrary3.dll"": {}\r\n  },\r\n  ""resources"": {\r\n    ""de-DE/ClassLibrary3.resources.dll"": {\r\n      ""locale"": ""de-DE""\r\n    }\r\n  }\r\n}\r\n```'"
2090,178391496,b'Not sure what you are asking for here.'
2090,178391584,b'Not sure what you are asking here.'
2090,178391905,"b""It can probably be removed in a later PR, along with all the other uses, if it isn't actually needed anymore."""
2090,178391955,"b'No, looks like I forgot to push those, let me see if I still have them locally.'"
2090,178392698,b'Fixed.'
2090,178392715,b'Fixed.'
2090,178392721,b'Fixed.'
2090,178393108,"b'ah, I see, there is a static class which contains constants for these strings.'"
2090,178393984,b'Fixed.'
2090,178393989,b'Fixed.'
2090,178400422,b'Fixed.'
2090,180158829,b'Fixed.'
2138,181153002,"b""Ideally, we would condition this on whether or not a matching resx file exists...\r\n\r\nHowever, MSBuild does not let you condition on the Identity item metadata outside of a target and CPS doesn't run targets for the tree view (at least that I could find/remember).\r\n"""
2138,181209568,"b'I can update this to be just `**/*.*.resx`, which will match any file that has the same filename without extension....'"
2138,181215112,b'Right. This might need a project-system or MSBuild feature (https://github.com/Microsoft/msbuild/issues/2346) to get it working properly.\r\n'
2138,181215277,"b'Actually, it looks like @dsplaisted commented that this works if we move it to proper metadata rather than the ""inline metadata"": https://github.com/Microsoft/msbuild/issues/2346#issuecomment-332095422'"
2138,181233607,b'Fixed.'
2138,181234117,"b""> It is perfectly legal to have only culture-specific resx files and no culture-neutral. Another case where existence matters. I'm not sure we should ever leave the evaluation with dangling DependentUpon\r\n\r\nIt's been updated to include a working condition for only existent files.\r\n\r\n> Another issue is, for example, MyProduct.MyStrings.resx where MyStrings is not a culture.\r\n\r\nThis seems like the kind of nesting users may want by default, but we can certainly drop the `*.*.resx` matching as default or even in general."""
2138,181234154,b'Not yet.'
2118,181759650,"b'#2090 was merged, was this handled?'"
2178,184184799,b'This can potentially impact tests as nuget.config are automatically imported.'
2178,184184946,"b'This is incorrect, Directory.Build.props are added to MSBuildAllProjects by the file that imports them, they do not add themselves. #Resolved'"
2178,184185423,"b'Why? We had them under artifacts, explicitly, in order to help prevent pollution of the root directory... #WontFix'"
2178,184185562,"b'This is incorrect, Directory.Build.props are added to MSBuildAllProjects by the importing file, they do not add themselves. #Resolved'"
2178,184185770,b'Is this set by RepoToolset now? #Resolved'
2178,184185819,b'Same for this? #Resolved'
2178,184185913,b'Why was the log command removed? #Resolved'
2178,184186017,b'Is this part of RepoToolset now? #Resolved'
2178,184186104,b'Is this part of RepoToolset now?'
2178,184192918,"b""I think we are already creating a nuget.config, but we should make sure that is the case, so that we don't start taking an accidental dependency on the root nuget.config getting auto-imported.\r\n\r\n@dsplaisted, do you know if we are creating one for all tests, or just for the perf tests?"""
2178,184193805,"b'Normally, yes. However, MSBuild does something ""smart"" with `Directory.Build.props/targets` since they are auto-imported...\r\n\r\n```xml\r\n<!-- \r\n      Determine the path to the directory build props file if the user did not disable $(ImportDirectoryBuildProps) and\r\n      they did not already specify an absolute path to use via $(DirectoryBuildPropsPath)\r\n  -->\r\n<PropertyGroup Condition=""\'$(ImportDirectoryBuildProps)\' == \'true\' and \'$(DirectoryBuildPropsPath)\' == \'\'"">\r\n  <_DirectoryBuildPropsFile Condition=""\'$(_DirectoryBuildPropsFile)\' == \'\'"">Directory.Build.props</_DirectoryBuildPropsFile>\r\n  <_DirectoryBuildPropsBasePath Condition=""\'$(_DirectoryBuildPropsBasePath)\' == \'\'"">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), \'$(_DirectoryBuildPropsFile)\'))</_DirectoryBuildPropsBasePath>\r\n  <DirectoryBuildPropsPath Condition=""\'$(_DirectoryBuildPropsBasePath)\' != \'\' and \'$(_DirectoryBuildPropsFile)\' != \'\'"">$([System.IO.Path]::Combine(\'$(_DirectoryBuildPropsBasePath)\', \'$(_DirectoryBuildPropsFile)\'))</DirectoryBuildPropsPath>\r\n</PropertyGroup>\r\n\r\n<PropertyGroup Condition=""\'$(ImportDirectoryBuildProps)\' == \'true\' and exists(\'$(DirectoryBuildPropsPath)\')"">\r\n  <MSBuildAllProjects>$(MSBuildAllProjects);$(DirectoryBuildPropsPath)</MSBuildAllProjects>\r\n</PropertyGroup>\r\n```\r\n\r\nBecause of this, `Directory.Build.props/targets` shouldn\'t add themselves, they instead add any additional `Directory.Build.props/targets` that they import, from further up in the chain (hence why this was `$(MSBuildThisFileDirectory)..\\Directory.Build.props`). #Resolved'"
2178,184195237,"b'These are artifacts produced by the build. They may not be artifacts produced directly by our own source code, but they are artifacts that exist solely to support the build and that are not checked into the source tree. Having it under a single folder makes it very convenient to manage and clean up things, as you have a single location to track, rather than 4-5.'"
2178,184195578,"b""Doesn't this break the scenario of building the solution from the command line, directly, rather than going through the build scripts?"""
2178,184195832,"b'What do you mean, it is still used by our tests for dogfooding.'"
2205,185569799,b'Yes. Fixed.'
2318,194495778,"b'Please run this through shellcheck (there is an online form via `https://www.shellcheck.net`)\r\n\r\nThis is reporting a number of items that should be fixed before merging:\r\n```\r\n$ shellcheck myscript\r\n \r\nLine 53:\r\nrm -r -f $perfWorkingDirectory/Microsoft.BenchView.JSONFormat > /dev/null 2>&1\r\n         ^-- SC2154: perfWorkingDirectory is referenced but not assigned.\r\n         ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 55:\r\nif [ ! -d $perfWorkingDirectory/Microsoft.BenchView.JSONFormat ]; then\r\n          ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 58:\r\n    curl -o $perfWorkingDirectory/benchview.zip http://benchviewtestfeed.azurewebsites.net/api/v2/package/microsoft.benchview.jsonformat/0.1.0-pre024\r\n            ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 59:\r\n    unzip -q -o $perfWorkingDirectory/benchview.zip -d $perfWorkingDirectory/Microsoft.BenchView.JSONFormat\r\n                ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n                                                       ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 71:\r\nbenchViewName=""SDK perf $OS $architecture $configuration $runType $GIT_BRANCH_WITHOUT_ORIGIN""\r\n                            ^-- SC2154: architecture is referenced but not assigned.\r\n                                          ^-- SC2154: configuration is referenced but not assigned.\r\n                                                         ^-- SC2154: runType is referenced but not assigned.\r\n \r\nLine 74:\r\n    benchViewName=""$benchViewName $BenchviewCommitName""\r\n                                  ^-- SC2154: BenchviewCommitName is referenced but not assigned.\r\n \r\nLine 80:\r\necho BenchViewName: $benchViewName\r\n                    ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 82:\r\necho Creating: $perfWorkingDirectory/submission-metadata.json\r\n               ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 84:\r\n                    -o ""$perfWorkingDirectory/submission-metadata.json"" || { echo Failed to create: $perfWorkingDirectory/submission-metadata.json && exit 1 ; }\r\n>>                                                                                                  ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 86:\r\necho Creating: $perfWorkingDirectory/build.json\r\n               ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 87:\r\npython3.5 ""$perfWorkingDirectory/Microsoft.BenchView.JSONFormat/tools/build.py"" git --branch $GIT_BRANCH_WITHOUT_ORIGIN --type ""$runType"" \\\r\n>>                                                                                           ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 88:\r\n                   -o ""$perfWorkingDirectory/build.json"" || { echo Failed to create: $perfWorkingDirectory/build.json && exit 1 ; }\r\n>>                                                                                   ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 90:\r\necho Creating: $perfWorkingDirectory/machinedata.json\r\n               ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 92:\r\n                   -o ""$perfWorkingDirectory/machinedata.json"" || { echo Failed to create: $perfWorkingDirectory/machinedata.json && exit 1 ; }\r\n>>                                                                                         ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 94:\r\necho Creating: $perfWorkingDirectory/measurement.json\r\n               ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 95:\r\nfind $perfWorkingDirectory -maxdepth 1 -type f -name ""*.xml"" -exec echo Processing: ""{}"" \\;\r\n     ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 96:\r\nfind $perfWorkingDirectory -maxdepth 1 -type f -name ""*.xml"" -exec python3.5 ""$perfWorkingDirectory/Microsoft.BenchView.JSONFormat/tools/measurement.py"" xunitscenario ""{}"" --better desc --append \\\r\n     ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 99:\r\necho Creating: $perfWorkingDirectory/submission.json\r\n               ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 112:\r\necho Uploading: $perfWorkingDirectory/submission.json\r\n                ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n \r\nLine 113:\r\npython3.5 ""$perfWorkingDirectory/Microsoft.BenchView.JSONFormat/tools/upload.py"" ""$perfWorkingDirectory/submission.json"" --container coreclr || { echo Failed to upload: $perfWorkingDirectory/submission.json && exit 1 ; }\r\n>>                                                                                                                                                                       ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n\r\n$ \r\n```'"
1330,121234017,"b""Why wouldn't netstandard.dll have the fa\xc3\xa7ade metadata?"""
1330,121234173,"b""We could do this for other assemblies, except then I'm not sure what target they should belong to.\r\n\r\nThere's also the question of whether or not we should be encouraging this pattern elsewhere, or if we should limit it to a NETStandard.Library-specific hack."""
1330,121234277,"b""Possibly. But I wouldn't expect assemblies from older versions to have the Facade metadata."""
1330,121486031,"b""@natidea  It sounds like we don't want this to be tied to NETStandard.Library, so the package and version might be different.\r\n\r\nI'll fix the string comparisons.\r\n"""
1330,121486661,"b""@natidea We need the metadata from the Reference (that is, whether or not it is a fa\xc3\xa7ade, and the NuGetPackageId and NuGetPackageVersion).\r\n\r\nI'll take a look at the ordering."""
1330,121486804,"b'Yes, that will need to be addressed. First order of business is to get something that works correctly. :-)'"
1330,121487705,"b'@natidea The goal is to match up a FileDefinition with the corresponding Reference. I\'d like to use the full path to the file to do that. The call to `Path.GetFullPath` is meant to ""clean up"" the path and remove extraneous `\\`, `..`, etc. Would ResolveFilePath be a better choice for that?'"
1330,121489687,b'Different parts of the tree use different items. The nodes shown under Packages and SDK are based in part on the `FileDefinition` and `FileDependency` items.'
1330,121958995,"b'@nguerrera Sorry, the comment pre-dates our conversation on Teams yesterday. I could simply remove the references to `FileDefinition` and `FileDependency`.'"
1330,121994213,"b'@nguerrera @srivatsn Conceptually, we need three pieces of metadata to properly determine where a `Reference` should end up: the package name, package version, and target framework. The last is necessary for multi-targeting scenarios. The NETStandard.Library package provides `NuGetPackageId` and `NuGetPackageVersion` but not the target framework. So no matter what we do we will need to have some NETStandard.Library-specific workaround to inject that info.\r\n\r\nI see a couple of issues with turning this into a general mechanism:\r\n\r\n1. We need to extend it to other item types. Definitely `AnalyzerReference`, but what about other item types?\r\n2. Specifying the target framework correctly might be tricky for package authors.\r\n'"
1330,122007106,"b""At the moment I'm assuming a future version will do something different and I don't want to conflict with that. If we turn this into the general solution, then this is not needed."""
1330,122009700,"b'Let me expand a bit on that second issue.\r\n\r\nSay you are a package author and can\'t add references from the assets file for whatever reason so you need to use this mechanism. Say you also need to include different files for netstandard2.0 and net46. You\'ll need to do something like this:\r\n\r\n``` xml\r\n<Reference Include=""net46support\\Alpha.dll"" Condition=""\'$(TargetFramework)\' == \'net46\'"">\r\n  <NuGetPackageId>MyPackage</NuGetPackageId>\r\n  <NuGetPackageVersion>1.0.0</NuGetPackageVersion>\r\n  <NuGetTargetFramework>.Net Framework,Version=4.6</NuGetTargetFramework>\r\n</Reference>\r\n<Reference Include=""netstandard20support\\Beta.dll"" Condition=""\'$(TargetFramework)\' == \'netstandard2.0\'"">\r\n  <NuGetPackageId>MyPackage</NuGetPackageId>\r\n  <NuGetPackageVersion>1.0.0</NuGetPackageVersion>\r\n  <NuGetTargetFramework>.Net Standard,Version=2.0</NuGetTargetFramework>\r\n</Reference>\r\n```\r\n\r\nDue to the conditions on the `Reference` items, is the project system even going to see both references, or only one at a time depending on the ""active"" target framework? The end result being that in multi-targeting scenarios you might only see one or the other assembly in Solution Explorer, not both.\r\n\r\nWe don\'t have this problem with `FileDefinition` and `FileDependency` items.'"
1330,122061672,b'Oops. Corrected.'
1330,122074507,"b'@natidea Possibly. What does ""implicitly defined"" mean? :-)'"
1330,122075499,b'Fixed.'
1352,122514302,"b'Just to be absolutely clear: this is the metadata we want to use to control whether or not an item is visible by default in Solution Explorer, right>'"
1352,123061292,"b""@ericstj I don't entirely follow. The `Type` metadata on what item? The `Reference`?"""
1352,123063404,"b""@srivatsn @nguerrera I've switched to `$(NuGetTargetMoniker)`; could you take another look?"""
1829,158101260,b'@johnbeisner Why do you have 3 different versions for NuGet?'
1829,158108079,"b'@johnbeisner I do not understand the need for 3 different variables. We can fix our automated PR process to update all of those, but if all three have the same value, then why not just use 1?'"
11213,412538695,b'> I think its ok to only do this with TargetFramework is set. @Anipik?\r\n\r\nYes its ok to import this when target framework is set'
202,82420902,b'Roslyn repo today does the validation and we dont have it in Rolsyn Project system repo yet. I remember @jaredpar working on it and the CI machines can be installed with the plugin using Nuget packages. \n'
394,88149048,"b'@RaulPerez1  Taggen you in the Teams discussion.\n\nBut in short, removal of ToolsVersion results in Package Restore Fail and addition of few MSbuild properties\n'"
1178,114869023,"b""@eerhardt \r\n\r\n> I was under the assumption that things like Test projects were going to set $(IsExecutable) to true. \r\n\r\nYes, thats true.\r\n\r\n>  If that's the case, then I don't think these two lines should be changed.\r\n\r\nWe still need it so the Windows Application output type projects can still be run\r\n\r\n> I think we should think about the best name to use for this property.\r\n\r\nI am open for a better name. But I feel `IsExecutable` conveys its purpose to the point.\r\n\r\n"""
1178,115100659,b'Using _IsExecutable since that was original intent of this PR'
1178,115100662,b'Using _IsExecutable since that was original intent of this PR'
1178,115100719,b'Seems _IsExecutable is the one we are looking for since we need to handle Winexe here as well'
1178,115100730,b'Seems _IsExecutable is the one we are looking for since we need to handle Winexe here as well'
1178,115103239,b'Opened #1183'
3867,349724724,"b""We discussed this with @wli3 because their payloads hit this immediately. We made the decision to not enable long paths because we still support Windows 7 and Windows 8 where long paths aren't supported."""
460,91191269,"b'Alright, let me change it accordingly.'"
511,92853205,b'This seems wrong - why are we default DelaySign to false when it already has a non-empty setting?'
511,92857130,"b'Yes, but why is DelaySign defaulting conditional reverse of the ones above?'"
616,95279926,b'This is basically replicating the logic that we used for Roslyn and Roslyn-project-system: https://github.com/dotnet/roslyn/blob/master/build/Targets/Versions.props#L43 @jasonmalinowski did the math magic here :-)'
11717,428879874,"b'```suggestion\r\n    <Dependency Name=""Microsoft.CodeAnalysis.NetAnalyzers"" Version="""">\r\n``` #Resolved'"
11717,428880135,"b'```suggestion\r\n    <PackageReference Include=""Microsoft.CodeAnalysis.NetAnalyzers"" Version=""$(MicrosoftCodeAnalysis.NetAnalyzersVersion)"" ExcludeAssets=""All"" />\r\n``` #Resolved'"
11717,428880306,b'Same changes here to pick the correct package. #Resolved'
11717,428918225,b'Would this be the user facing MSBuild property to turn on/off analyzers? #Resolved'
11717,428919198,"b'Tagging @mikadumont - as we discussed, we should add a checkbox to Code Analysis project properties page to map to the user facing property to guard the analyzers. We should also rip out the text box and buttons that were added for FxCop analyzers install/uninstall. @mikadumont Can you open an issue on project-system repo for this work? #Resolved'"
11717,428919504,b'We likely also want a combo box in Code Analysis project properties page for `Analysis Level` property. #Resolved'
11717,428961123,b'We do not have a spec for it. The location of the property will depend on whether we want to tie NuGet package versions to it OR keep it an SDK specific property. #Resolved'
12422,453250495,b'Why not use a single property name `WarnVersion` for both compiler and .NET SDK analyzers? Do you feel people might want to provide different values for them? Will two property names confuse users?'
12898,469447330,"b""Shouldn't we always default `AnalysisLevel` to `latest` instead of `5.0`?"""
12898,469448247,b'I think we can change this to `latest` and move it above the `EffectiveAnalysisLevel` group and never have to change this line again.'
12898,469450465,"b'Shouldn\'t this default to `EffectiveAnalysisLevel` so we have never have to change this in future?\r\n```suggestion\r\n                             $([MSBuild]::VersionGreaterThanOrEquals($(EffectiveAnalysisLevel), \'5.0\'))"">$(EffectiveAnalysisLevel)</WarningLevel>\r\n```'"
12898,469452922,"b'This will override `WarningLevel` if user sets it to a custom value in their project file, say `6.0` or say `0.0` if they are interested in using a higher `WarningLevel` then `AnalysisLevel` OR turning off compiler warning wave while still retaining analyzer warning wave respectively. I think we need to ensure that we do not override user override of this property.'"
12898,469485971,b'What if I want `<AnalysisLevel>5</AnalysisLevel>` and `<WarningLevel>6</WarningLevel>`?'
12898,469492213,"b'Yeah, say we release .net6 with new compiler and analyzer warnings in warning wave 6. I would like to get new compiler warnings, but am not yet ready for new analyzer warnings.\r\n\r\nWhere does the compiler force set `WarningLevel`? I looked at targets file under https://github.com/dotnet/roslyn/tree/master/src/Compilers/Core/MSBuildTask, but could not find anything. The only default values seem to be in the task https://github.com/dotnet/roslyn/blob/master/src/Compilers/Core/MSBuildTask/Csc.cs#L141 and then in the command line parser if no switch was specified.'"
12968,472448378,"b'VB?\r\n```suggestion\r\n    <PackageReference Include=""Microsoft.CodeAnalysis.CSharp.CodeStyle"" Version=""$(MicrosoftCodeAnalysisCSharpCodeStylePackageVersion)"" ExcludeAssets=""All"" GeneratePathProperty=""true""/>\r\n    <PackageReference Include=""Microsoft.CodeAnalysis.ViusalBasic.CodeStyle"" Version=""$(MicrosoftCodeAnalysisViusalBasicCodeStylePackageVersion)"" ExcludeAssets=""All"" GeneratePathProperty=""true""/>\r\n```'"
12968,472459664,b'https://dev.azure.com/dnceng/public/_packaging?_a=package&feed=dotnet-tools&package=Microsoft.CodeAnalysis.VisualBasic.CodeStyle&protocolType=NuGet&version=3.8.0-3.20418.5'
12968,473073430,"b'Yes, a different property sounds better. Given that there are no warning analyzers in this package (and should never be one in future), should that property be defaulted to true for all managed projects regardless of the TFM?'"
12968,473222283,b'That is good point. Thanks!'
13354,482871984,"b'Are you missing quotes on the condition? Also, I am wondering if we should make this non-conditional so it enables this feature in IDE even when users are not enforcing code style on build. @jmarolf your thoughts?'"
13354,483014876,"b""Hmm even with that PR, the condition disables it explicitly if user directly installs the CodeStyle NuGet package: https://github.com/dotnet/roslyn/blob/master/src/CodeStyle/CSharp/CodeFixes/build/Microsoft.CodeAnalysis.CSharp.CodeStyle.props\r\n\r\nI think we should keep it simple:\r\n1. Remove the condition here, so this feature works in VS + command line for SDK style projects for all the 3 analyzer sources:\r\n   1. Default VS install with built-in code style analyzers coming from VS\r\n   2. User sets `EnforceCodeStyleInBuild` to true and consumes code style analyzers from the .NET SDK\r\n   3. User installs CodeStyle nuget package to consume code style analyzers from a specific version of the package.\r\n2. Don't add support for this feature in non-SDK style projects, users would be asked to migrate to SDK style projects to get this feature."""
13354,483015922,"b'With the above, you should not need the VS side PR. Also note that Microsoft.CodeAnalysis.Targets is not imported during `dotnet build`, so it will cause inconsistency where it works somewhere, but not everywhere.'"
13354,483029381,b'> do we not intend to support Non-SDK style projects in VS \r\n\r\nThat is an open question that probably @mikadumont should answer.'
13354,483064292,b'I think we want to condition the item group on this being C# or VB language.'
591,95095744,b'Please file an issue on yourself to clean this up and reference the issue in the code. NIT: spacing issues'
591,95095875,"b""\xf0\x9f\x91\x8d for @eerhardt's comment. @ramarag it is important that an end to end test exercises this functionality as `dotnet cache` is the only one that'd exercise the `preserveCacheLayout`. Please file an issue and try to close it when you are ready to commit this PR."""
591,95095936,b'NIT: `With` `PreserveCacheLayout()`.'
591,95234893,b':+1'
591,95235196,b'Why does `assetType` get a default null?'
2470,209880461,"b""Thanks, fixed. CUI is the Windows term for console app subsystem. GUI - Graphical subsystem, CUI - Console subsystem. The apphost.exe should be prebuilt as a CUI, if not this check will fail (also there to make sure we didn't compute wrong index).\r\nI added the (Console) into the error message to make this clearer."""
2470,209883358,b'Created #2471 with just the formatting changes - will wait for it to merge.'
2470,210051089,"b""Currently the .targets will make it so that we effectively ignore WinExe on non-Windows RIDs. Just like we do today. I didn't want to break anything, so on Windows RIDs, we now honor the OutputType=Exe (CUI)/WinExe (GUI). On non-Windows RIDs both Exe/WinExe will behave just like now - that is the same."""
2470,210053316,"b""Good point - will do. Will reuse the exception message that it's not a valid Windows PE file (since it wouldn't be :-))"""
2470,210055740,b'Definitely - already working on it'
2470,210067650,"b'I thought about making the AppHostOptions class separate (top-level), but then it would require its own file and seems way too small for that. But I will happily oblige if others would like that.'"
2470,210091910,b'Definitely - I just copied what was already in the class (look at the top of the file).\r\nJust to make sure - const field would be PascalCased right?'
2470,210108975,"b""Sorry - I don't understand your comment.\r\nThe GUI bit only works on Windows RIDs. I guess it might be possible to run the publish on Mac for a Windows RID and it should still work... I'll have to try that somehow."""
2470,210112633,"b""I can't think of anything better right now - if you have a better name, I'll be happy to change it."""
2470,210413704,"b""Actually this should be const/readonly.. I'll fix that. In which case the new naming scheme fits much better."""
2545,219393711,"b""Please add this comment here:\r\n> // https://en.wikipedia.org/wiki/Portable_Executable\r\n\r\nThe math here is about the PE format, so it's best to have that close by.\r\n"""
2545,219611737,"b""Nit: remove the trailing 'q' in `hResourceLoadedq`"""
2545,219612355,"b""I would prefer more descriptive names for the Enum functions. They do enum, but they will eventually copy the resources as well.\r\nMaybe something like:\r\nEnumAndCopyToTarget_LanguagesCallback (NamesCallback, \xe2\x80\xa6).\r\nWith these names I simply expected it to build a list somewhere which the top caller would go over... which it doesn't."""
2545,219612834,"b""I think we should test both file version and icon in some way - since those are our primary scenarios.\r\nMaybe even the manifest...\r\nI know that the test are essentially doing the same thing - but it's covering the end-to-end behaviors we want from this."""
2545,219613002,b'I think this should implement `IDisposable` since it owns the update handle. In case of exceptions this will likely leak that handle.'
2545,220519641,b'Same here - if you tried and it looks like a lot of work - manual testing it is for now.'
3086,272721485,"b""The host doesn't seem to use it. The `DependencyContext` can read/write it, but I don't think it uses it either."""
3296,289890571,"b""Good point - didn't notice the magical converter.\r\nI've fixed `tfm` -> `TFM` as well. The camel case conversion seems to convert that to `tfm`.. interesting, but it works."""
3697,333715020,b'I wanted to keep the change to the minimum for 3.1. For 5.0 we should do that.'
11545,419105841,b'Unless we have that test somewhere else it would be good to validate that there are at least some runtime packs written in the `.deps.json`.'
12144,447975969,b'Do we need the `_TrimmerLinkSymbols` property anymore?'
13402,483816935,"b""This is problematic - for example `win81-arm64-aot` is a valid RID - which would throw here. Can't we get the target architecture directly from the MSBuild as a parameter/property?"""
13402,483825644,b'We should fix PlatformTarget - this comment is obviously wrong: https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.RuntimeIdentifierInference.targets#L90'
13402,483826138,"b""That said for 5.0 I think it would be OK to implement a similar algorithm as the SDK has (so EndsWith or Contains) and call it good enough. For 6.0 we should definitely teach the SDK about ARM64 (since it's a perfectly valid platform) and make sure we have ideally only one place which computes the target architecture."""
13402,484227279,"b'The AOT RIDs are for AOT (Ahead of time compilers) - one such example is building for .NET Native. I don\'t think they\'re ""widely"" used for now.\r\n\r\nI don\'t think bundler should be in the business of trying to understand RIDs - that\'s a complicated topic. SDK needs to correctly define properties describing the target - in this case `PlatformTarget` - and bundler should just use them. (That is obviously the ideal state, not what we need to do for 5.0)'"
14142,504502571,"b'```suggestion\r\n            Assert.True(!missingWarnings.Any() && !extraWarnings.Any(), errorMessage);\r\n```'"
14142,504506638,b'Nit: Sort usings'
14432,521525544,"b'This is great point - we should probably only change the default for `net6.0` and above. Everything else can stay the same, just changing the default value of the feature switch when trimming should only happen for `net6.0` apps and above.'"
14432,521981225,"b'Nit: Maybe add the net5.0 version as well and validate that it will NOT change the default - just to be sure we don\'t ""break"" existing apps.'"
14589,526147027,b'Nit: Sort the usings'
14589,526149066,"b""The version should go into the https://github.com/dotnet/sdk/blob/2829afcb4f31f65f195f5b4dc82b4d84ae096610/eng/Versions.props#L141 into the test dependencies section.\r\n@sbomer should there be some DARC magic configured to get the latest? I don't think we want to hardcode 5.0.0 forever...."""
14589,526456809,"b""How does DARC figure out which component it is - is there some kind of pattern in the name of the version property? And how would it know that it comes from the runtime repo?\r\nJust curious - if it works... I don't complain :wink:"""
12635,460348227,b'```suggestion\r\n2. Microsoft.NET.Sdk.Publish\r\n```'
12635,460348262,b'```suggestion\r\nPublish package contains the tasks and targets to publish an ASP.NET Core web application.\r\n```'
14315,512279733,b'crossgen2 in .NET 6 should also support Max OSX. Does that need to be added here?'
14315,512323124,"b""I've looked a bit deeper into Rids, and I think we may need to have a more thorough understanding of rids here. https://github.com/dotnet/runtime/tree/master/src/libraries/pkg/Microsoft.NETCore.Platforms explains the details, but essentially, I believe there are many, many more possible operating systems. For instance, I believe that `sles.12-x64` is a perfectly reasonable RID, but I don't think this logic will behave correctly."""
14315,512323314,b'This architecture switch should probably also handle armel.'
1251,118382192,"b'Hi - this came from a convention in an existing test method that I used as a template earlier in the same class, which was called ""Publish_standalone_**post**_netcoreapp2_app_and_it_should_run"". \r\n\r\nThat method has a comment above the test explaining that distinction between behaviours in pre and post Netcoreapp2.0 (which I guess will be relevant to this test too) - I\'ve copied that in and re-committed the file, hopefully this explains the ""post"" bit of the method name better?'"
1251,118382212,"b""I see what you mean - I've updated the file to have these file names and recommitted the file."""
1251,118500570,"b""Yes - sorry, I only noticed you asked this earlier, for some reason some comments are collapsed and tagged as outdated, I missed them. I'll update this when I'm in front of my dev machine to remove the unused variable and address any earlier comments I missed."""
1251,118500977,"b""I think that's a good idea, the more we cover the better - the only thing is I don't have an arm64 device to test this on, do we know if the list of files present on arm 32-bit devices should be the same as the 64-bit devices? """
1251,118501399,"b""Yes - I think we spotted this one in parallel, I've changed this one."""
1251,118501535,"b""Yes - just saw this comment too - I'll remove and re-commit."""
1251,118505536,"b""Cool - I'll update that in my next commit. """
12589,465217575,b'sdkVersion'
129,77892485,b'done\n'
129,77906619,"b'yep , makes sense \n'"
510,92884361,b'I did add a new string in roslyn project system https://github.com/dotnet/roslyn-project-system/pull/965 '
584,94712385,b'@dsplaisted updated the description with the pr where strings are added'
597,94912398,"b'oh , thought it needs both the directory struture and this. Let me try with just this'"
941,104859675,"b'ah , agree will fix that'"
2325,195234106,"b'Yes, it supports specifying multiple `--config <key, value>` arguments.'"
2558,222117422,b'You might want to add the -NoProfile option to powershell (the process will load/execute faster).'
2558,222123657,"b""It should be:\r\n```bash\r\ntimeStamp=`date --utc '+%Y-%m-%dT%H:%M:%SZ'`\r\n```"""
12769,465355765,"b""Sometimes we put _ in our environment variable names and sometimes we don't.  Is there a reason we choose one or the other?"""
12769,465356736,"b""If the directory doesn't exist, won't GetDirectories() return an empty array and then trigger an exception when you look at the [0] item"""
12769,465357613,b'Can GetPackagesV2 return null?'
12769,465357779,b'Should this be centralized eventually?'
12897,470136582,b'Any reason not to use !string.IsNullOrEmpty here?'
13441,485927361,"b""This works for now but if you multi-target 5.0 and 6.0 in the future, wouldn't this suppress the warning when it shouldn't?"""
13964,500622826,"b""@dsplaisted I incremented your error numbers by 1 as it conflicted with Will's change.  Let me know if there are any concerns (like documentation or tests looking for that number)."""
2113,183776898,"b'To avoid a patch, this should be `2.1.300-preview2-008533` to match the preview2 SDK we use in source-build.'"
2113,183815774,"b""That's the branch used, not sure how that relates to the SDK version though. If you're saying that we could rebase `release/2.1.3xx-src` on top of this change to make this modification, it's true that wouldn't be a literal patch, but dev branches aren't any better for maintainability than patches.\r\n\r\nThe SDK we have to use to source-build RC is the one we delivered as 2.1-preview2, which is `2.1.300-preview2-008533` (matching the version we shipped from prodcon)."""
2113,183816203,"b""Actually, soon we'll have a `global.json` updater that would replace a patch, so it's probably fine to patch/branch for this change temporarily. LGTM as is."""
2113,183824789,"b""Isn't that basically what this PR is doing? How does that relate to the SDK version?"""
2113,183834502,"b'I see, that sounds fine to me. Will you have time to do that soon?'"
2178,184189056,b'It is not a valid arg in the new version of the repo toolset and caused source-build builds to fail. #Resolved'
14093,510248128,"b'From my perspective, the source-build scenario was being discussed earlier, and this proposal came up that I think was very nice (except maybe the word ""machine"" in particular, since it doesn\'t line up with any other concept I\'m aware of):\r\n\r\n> `--use-current-runtime`, `UseCurrentRuntimeIdentifier` for portable RID.\r\n> `--use-current-machine-runtime`, `UseCurrentMachineRuntimeIdentifier` for non-portable RID.\r\n\r\nDocs could then consistently use `--use-current-runtime`, and source-build users can elect to use the non-portable RID if they so choose.\r\n\r\nBut then this PR was merged without resolving that discussion, abruptly--it seems to me. \xf0\x9f\x98\x95 (There were also no approvals.)'"
11181,406374255,"b'There are other reasons `Path.GetDirectoryName` could fail, like if it has invalid characters.'"
11352,415997844,b'```suggestion\r\n    <CopyConflictingTransitiveContent>false</CopyConflictingTransitiveContent>\r\n```'
14008,500705249,"b""It looks like MSBuild's master branch is still set to 16.9. I'm guessing it's because we needed real optprof data for the vs16.8 branch, and we hadn't collected it before branching for 16.9. @rainersigwald triggered a new build to collect the data; apparently that made a PR here? ([Internal link](https://teams.microsoft.com/l/message/19:3212bf033f4c4b5198643a04fa1048fa@thread.skype/1602015803800?tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47&groupId=4ba7372f-2799-4677-89f0-7a1aaea3706c&parentMessageId=1602015803800&teamName=.NET%20Developer%20Experience&channelName=MSBuild&createdTime=1602015803800))"""
2239,187766184,b'My comments @wli3:\r\n- should Apphost really be one word?\r\n- RuntimeIdentifier -> runtime identifier (RID)\r\n- missing punctuation in the last sentence\r\n- should we add a fwlink to the RID topic for more info? https://docs.microsoft.com/dotnet/core/rid-catalog'
2239,188407390,"b""I can change the wording on docs if it's preferred. \r\nOnly minor suggestion:\r\nFor more information about RID, see https://aka.ms/rid-catalog. \r\n\r\nAnd can you add me as a co-owner of that aka.ms link?"""
2286,191609963,"b""Microsoft's style guide asks for contractions (https://docs.microsoft.com/en-us/style-guide/word-choice/use-contractions):\r\nYou are -> You're\r\n\r\n@dsplaisted I wasn't aware of that link going to our topic until a customer got confused with that page after getting this message. I was just planning to add a Troubleshooting area to that topic to explain some warnings you might get and what to do. There's also a warning from EF projects that are redirected to that same topic.\r\n\r\nHowever, this simplification makes the warning even more cryptic in my opinion. """
2316,194982482,"b""Your suggestion LGTM @dsplaisted! Only nit per Microsoft style guide is the use of contractions\r\ndoes not -> doesn't"""
2286,199309349,b'That page is getting expanded https://github.com/dotnet/docs/pull/4704'
13354,482997129,b'I have fixed the quotation. Would the addition in VS [here](https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/271377) not enable the IDE scenarios?'
13354,483028068,"b""Ah I see. I wasn't aware this was explicitly disabled on installing the package. Removing the condition here makes sense.\r\nOn the note of Microsoft.CodeAnalysis.Targets, do we not intend to support Non-SDK style projects in VS since we wouldn't be able to support them in CLI build scenarios?"""
13354,483136720,b'Added the condition to the ItemGroup'
14432,517857315,b'Should this go into a props file so that it can actually be overriden from a project?'
14432,517858072,b'Why is this conditioned on binary formatter serialization? Could you add a comment?'
1712,149741827,"b""Noted, I'll make sure it changes in the CLI repo as well."""
1712,149742795,b'Done.'
1712,149753970,"b'@AlexGhiondea I believe this might actually be a bug on the framework, so we might want to include this file inbox on 472.'"
1712,149798290,"b""Sounds good I'll update it as requested."""
1712,149798540,"b""No, some are partial facades, and some are full facades so I'll update the comment"""
1712,149798609,b'will change.'
1712,149799227,"b""> Or is this there in case people explicitly set NETStandardInbox to false in their 4.7.1 projects as a workaround for this issue?\r\n\r\nYes that is the case. Initially I had it just with `!=` but got a comment saying that in case people override that value, we should make sure this logic doesn't kick in for 4.7.2+"""
1712,149799315,"b'Yes ran all, and they all passed. And I do have 4.7.1.'"
1712,149799441,"b""yes, that is why. I'll add a comment."""
1731,151219715,"b""What we are really checking here is whether or not we have to run the DependsOnNETStandard task, and so what we check is that if we don't know yet if we depend on it or not (if value is empty) then we might want to run the task."""
1731,151220189,"b'if we added a condition to be ""not true"", then what if we want to force the property to be false? We would evaluate this condition to be true and run the task anyway which will override the value we wanted to force, which is why we should check against empty.'"
1819,157576808,b'Here is the PR https://github.com/dotnet/corefx/pull/25786. Basically what we did is to add a netfx.force.conflicts.dll file to the net471 closure so that we force the generation of binding redirects for the 12 shims we are servicing for net 4.7.1'
2272,190674356,"b""Yes. As long as you target 471 and consume a .Net Standard assembly (2.0 or 1.x) you will need these 12 extra shims in your output folder. If you instead target 4.7.2, you shouldn't need them any longer."""
2362,197972257,"b""I don't like this approach given that we've seen that this happens on versions other than 4.7.1. I think applying this to all frameworks above 4.7.1 is dangerous. @AlexGhiondea if asking people to remove the binding redirect is also acceptable, I would much rather do that than to special case ZipFile on the tooling for all frameworks 4.7.1 and above."""
2488,212125802,"b""I think that what he is trying to do is to not even enter the block if the winner is not actually a winner, although I'm not sure if that is going to be true every time. I did try locally the other change where I examine the ResolveConflict return, and it seemed to work just fine from my testing."""
2488,214109029,"b""I'm not 100% sure I understand why we want to keep the newUnresolvedConflicts around."""
12362,450499924,b'Some minor comment not directly from your PR is do we want to add some common prefix/sufix to these properties so that it is a bit obvious they are related and about the linker?'
12362,450502498,b'makes sense.'
12420,453080008,"b""Thanks for the headsup, I'm also expecing one more thing to break our tests which is the TrimMode rename. I'll keep an eye on darc update PRs and fix when we get the update."""
13318,482419023,b'Options that require online lookups to services for their information'
13318,493192485,b'(code removed per main comment above)'
13318,493193105,b'Added'
5,73246329,b'Should this be copied to output?\n'
4,73247925,"b""Shouldn't we test on non-windows as well?\n"""
5,73248268,b'Okay sounds good.\n'
5,73254570,b'will the space here throw off the arg parsing when passing it through to msbuild?\n'
5,73254701,"b'the default channel here looks to be rel-1.0.0, should probably set -Channel below\n'"
5,73254785,"b""I'm not as familiar with PS quoting defaults as bash, thanks for the clarification.\n"""
5,73254938,"b""yes that's right, :+1: \n"""
9,73566937,"b'> RebuildNuGetPackages [](start = 75, length = 20)\n\nWhy do you need build and rebuild, they appear to do the same things here.\n'"
9,73567112,"b""Should these properties get put in some shared .props file so we don't need to duplicate them?\n"""
9,73567703,"b""Do you need `--depsfile` here as well? I'm surprised if it works without it \n"""
9,73567985,"b""Shouldn't this have some form of prerelease suffix?\n"""
8,73733018,"b""Shouldn't it set some form of default platform? What is the alternative here?\n"""
29,74118129,b'@333fred Do we need anything here except CSharp?\n'
29,74118522,"b'Could we get some assembly version manifest mismatch errors here, if the product assemblies stomp on test dependencies?\n'"
29,74118716,"b""nit: I've seen `&quot;` used quite a bit and seen it as the recommended way of quoting, but have had good success with single quote as well `'`, might clean this up some.\n"""
35,74324609,b'Even in the initial implementation I think that we should be copying the CopyToOutputDirectory items. \n\n@davkean and I sat down and discussed that we could cover the Copy to Publish only scenario by having `CopyToOutputDirectory` imply `CopyOnPublish` but `CopyOnPublish` Can be optionally set on an item to prevent it from being published.\n'
37,74349537,"b'recommend quoting the value here: `""$(cat ""$REPOROOT/DotnetCLIVersion.txt"")`""\nSeems unlikely there\'d be a space in that file, but it if it was, things could blow up.\n'"
37,74349577,b'is this always debug?\n'
37,74349686,"b""do we want it to be on the path inside of the `dotnet build3` and subsequently `msbuild` invocation?\n\nMy gut says yes, and for that you'll want to `export` this var.\n"""
37,74350937,"b'`""${args[@]}""` should be `""$@""`\n'"
37,74468409,"b""while you're in here, should this use a globbing pattern, so we can pull results from more than one xunit run?\n"""
35,74476763,"b'Can we not just use `<Target AfterTargets=""Publish"" />`  instead of carrying forward this old pattern?\n\n@davkean @eerhardt \n'"
37,74495566,b'Do we foresee this needing to change? Is this how dotnet test is going to work?\n'
37,74495717,b'What is the plan for testing on the other platforms? Rely on CLI testing?\n'
37,74504607,"b""I don't know all the differences between all the linux distros. I imagine there's a lot, maybe they're meaningful to msbuild targets, maybe they're not. \n\nI think discovering that delta (if it exists) is a good reason for having tests on those platforms.\n"""
44,74805043,b'Should we be using dotnet.exe instead of corerun?\n'
44,74832814,b'Yes see here: https://github.com/dotnet/sdk/issues/2\n'
46,74868612,b'Could you use `TargetPath` here?\n'
46,74868682,b'nice approach \xf0\x9f\x91\x8d \n'
47,74999719,"b""\xf0\x9f\x91\x8d Let's stick to a convention \n"""
71,75552813,"b""Is the idea here that portable apps don't have runtime exports? Couldn't they have runtime exports of non-sharedfx packages?\n"""
71,75553110,"b""nevermind, I see the extension method now. I don't know about this pattern, why should the `GetRuntimeLibraries` extension be the thing that determines whether or not this is a portable app, and then need to pass that out with an `out` parameter? \n\nIn my mind it makes more sense to pass whether or not we are portable into the `GetRuntimeLibraries` Extension and maybe provide a `lockFileTarget.IsPortable()` extension.\n\n---\n\nIn reply to: [75552813](https://github.com/dotnet/sdk/pull/71#discussion_r75552813) [](ancestors = 75552813)\n"""
71,75553606,"b'Where will ""content"", ""analyzers"", and additional asset types be resolved?\n'"
71,75553799,"b'If the intention of this lock file is to have all asset types, I think we are missing both content, and analyzers\n'"
71,75553907,b'projectname.project.lock.json?\n'
71,75554135,b'Is this going to test the latest sdk package?\n'
78,75766862,"b""What if we passed in the project directory rather than the project path? Would that make sense so you don't need to call Path.GetDirectoryName, or is there another reason we need the full path to the csproj\n"""
81,75962732,b'\xf0\x9f\x91\x8d for non-giant-mass-of-spaghetti targets\n'
81,75963800,"b'The `NuGetVersion` utility allows for a four part version to be specified, one idea is that the fourth part could only be propagated to FileVersion and ignored in other places if it exists:\n\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Versioning/NuGetVersion.cs#L186\n'"
85,76110582,b'Why stick this here rather than in the task itself? Is this a point in time thing because of the issues we discussed or do you see this sticking around?\n'
85,76110858,b'I might be totally missing it but where does this `Stage0MSBuild` variable come from?\n'
85,76111029,b'I see this now `using static Microsoft.NETCore.TestFramework.Commands.MSBuildTest;` Does this bring these things in?\n'
89,76149145,"b""The intention with `VersionSuffix` was to provide a way for users to have an easy way to increment their version between builds in a similar way to how they did it in the cli. \n\nThere was no intention of a requirement that `VersionPrefix` always be `1.0.0` in fact in many cases I'd expect it to be something like `1.0.0-beta` and `VersionSuffix` being only a number that increments. \n\nThe only concern I have with having `VersionSuffix` computed from `Version` is that then the user needs to go and implement the logic to increment the build number. While it would be admittedly simple, why not provide an easier experience? There may be reasons, I am just trying to show my reasoning for the current case.\n"""
89,76150442,"b""> So, right now. If you have say <Version>4.5.6-beta</Version>, <VersionPrefix> is defaulted 1.0.0. This can lead to bugs if we start using VersionPrefix elsewhere in targets.\n\nI think we should try to stay away from using the version prefix/suffix in targets and treat `Version` as the consumable property while `VersionSuffix` and `VersionPrefix` exist to populate `Version`\n\n> We can continue to support specifying a prefix and a suffix as we do today, but we should leave VersionPrefix unset if it didn't come from the user..\n\n100% agree this makes sense. There's no way to strictly parse the version to determine the prefix and suffix unless we begin to create some policy around it. \n"""
91,76350864,b'Why are these checked in?\nEDIT: never mind I see it now.\n'
91,76350949,b'should the generator be set here as well?\n'
91,76351080,"b'Without any context, I find this comment confusing.\n'"
138,78613875,"b'Can we put these values (`bin\\**`, `obj\\**`) in a semicolon delimited property and use that to remove here?\n\nI think this will make it easier for migration to consume the default excludes here as it could query that property rather than needing to look for this remove syntax.\n'"
138,78614620,"b'If the items being removed were a property itself, I could consume that property from the evaluated project no?\n\n`<Compile Remove=""$(DefaultExcludes)"">` ?\n'"
138,78623681,"b""> @brthor - why does migration need to reference this property?\n> \n> @brthor It still suffers from the same problem, DefaultExcludes must respect intermediate and output properties which user settable. User settable properties are set between props and targets in the project file. That means that we must set DefaultExcludes in targets to pick up the right value, hence you cannot use this property in the project file.\n\nMy intention here wasn't to create a property for use in the project file, but rather by use of the thing that goes and figures out the defaults in the project file for certain properties/items so migration doesn't do a transformation when the result is the default. \n\nOf course this can all be done by hand, I'm simply thinking ahead and I think having this property would make this set of defaults easier to auto generate. My idea here is generally that a default `dotnet new` template will get evaluated and the defaults constructed from that.\n"""
154,79675873,b'I think this may be confusing which project this error is referring to. \n\nLooking at the code it looks like this would be one of your dependencies right? Does msbuild give you any nice output that helps clear this up? #Resolved\n'
151,79677971,"b""nit: do you need this? don't see it in use\n"""
151,79678042,"b'Never mind, LockFileItem\n'"
151,79678469,b'I had thought you were going with `<OutDir>/publish/<RID>` ?\n'
151,79678667,b'For Cross Publish you should check the RID here rather than the current OS\n'
151,79679573,"b'\xf0\x9f\x91\x8d It kind of sucks the rid is an opaque string, I guess the best to do here is look for the prefix win?\n'"
154,79680401,b'What is the reason for indexing here rather than just returning `nearestNuGetFramework` ? #Resolved\n'
154,79680661,b'Maybe just a comment that this is the outer build?  #Resolved\n'
151,79681532,"b""yeah agreed, all of the rid handling logic I've seen is just doing a split anyways, we don't need c# for that\n"""
151,79681646,"b""Okay I see, the xcopy experience isn't as good\n"""
154,79700738,b'I see this makes sense now. #Resolved\n'
184,80792750,b'0?\n'
184,80793111,"b'nit: Can we use [Fact(Skip="""")] instead, so it comes up as skipped in xunit results\n'"
295,84146601,"b""It looks like project.json may have included the profile in the define.\n\nI don't know if you're trying to match behavior but it's worth taking a look at.\nhttps://github.com/dotnet/cli/blob/rel/1.0.0/src/Microsoft.DotNet.ProjectModel/ProjectReader.cs#L799\n"""
10699,382849347,b'There should be a corresponding update in `version.details.xml`'
11649,425413883,"b""Here's the problem, this needs to be conditional. Same w/ line 241. I'll push a fix"""
12460,458526003,"b""Yeah, once the linked build finishes. I'll update this PR once it's done (and I'll back out the test changes)"""
923,103540013,b'Bad rebase. will fix.'
923,103573198,b'Good point. Will remove it.'
923,103580997,"b'I agree, testing this change.'"
923,103593260,b'Comment added below.'
923,103594144,"b""True, this probably isn't required anymore. Will remove"""
923,103596952,b'Resolved.'
923,103601406,"b""It's used as the NuspecBasePath below."""
923,103601426,b'Nope will revert.'
923,103601448,"b""I'll get rid of this property."""
923,103601469,b'No longer required.'
923,103601565,b'Currently we do not. I think changing verbosity to detailed from normal and adding an echo command before this line will help.'
923,103601686,"b""I'll change to Build to DependsOnTarget=LayoutSdkPackage. The build still requires the package layout to be constructed for the nuspec to pick it up, unless there is some change there that I'm missing?"""
923,103601700,b'Will pass this in.'
923,103602722,b'I could add this back if needed.'
923,103606242,b'Remove the build target?'
923,103606301,b'Would the targets be included in a non-sdk csproj? Or do you mean call the target in the bin dir?'
923,103820979,"b'I thought it would be more consistent with the repo, but I can revert this.'"
923,103821056,b'Ah I was looking for this inside Microsoft.NET.TargetFrameworkInference.targets'
923,103822164,"b'I can remove PackageOutputPath, but I get a circular dependency on removing NoBuild=true.'"
923,103822622,"b'Oh that\'s right. I had to change this because of \r\n```\r\n  <Target Name=""_LoadPackInputItems"">\r\n    <!-- Allow overriding items with ProjectFileToPack -->\r\n    <PropertyGroup Condition=""\'$(PackProjectInputFile)\' == \'\'"">\r\n      <PackProjectInputFile>$(ProjectFileToPack)</PackProjectInputFile>\r\n    </PropertyGroup>\r\n\r\n    <!-- Project case -->\r\n    <PropertyGroup Condition=""$(MSBuildProjectFullPath.EndsWith(\'.csproj\')) == \'true\' AND \'$(PackProjectInputFile)\' == \'\'"">\r\n      <PackProjectInputFile>$(MSBuildProjectFullPath)</PackProjectInputFile>\r\n    </PropertyGroup>\r\n  </Target>\r\n```\r\nShould I just include it as ProjectFileToPack?'"
923,103823232,"b'Ah I see, I was confused whether you wanted an explicit call to Pack. Will change to this way.'"
923,103823990,b'I had to set this for it to be dumped inside Packages instead of in NuspecBasePath.'
923,103824948,b'nope. Got rid of it. Was copying the pattern from the nuget command previously but resolved.'
3850,342225210,"b""That was my understanding and the reason I didn't add another write to NugetPackageId here. \r\nI also didn't remove PackageName from MetadataKeys because, based on what @nguerrera tagged as the commit where the redundancy arose, it seemed to me like the metadata wasn't redundant everywhere, just in this specific case. Did I misunderstand?"""
3850,343381559,"b""I'm getting a lot of test failures when I try to standardize one way or the other.  Are NuGetPackageId and PackageName always the same thing? I'm also not clear as to what the difference is between the metadata in [MetadataNames](https://github.com/sfoslund/sdk/blob/RemoveExtraMetadata/src/Tasks/Common/ConflictResolution/MetadataNames.cs#L14) and [MetadataKeys](https://github.com/sfoslund/sdk/blob/RemoveExtraMetadata/src/Tasks/Common/MetadataKeys.cs#L65)- they both have NuGetPackageId."""
3850,345391170,"b""Fixed the issue. I've consolidated to PackageName and removed NuGetPackageId from MetadataKeys. """
3850,345856869,"b""Switched back to NuGetPackageId. It's hard to tell how often PackageName is used based on that search. """
3957,349836111,"b""Yes, that's the idea"""
3957,350868158,"b'I was basing this off of the logic in [_GeneratePublishDependencyFile](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L876-L941), which uses `PublishSingleFile`. Is there somewhere else I should look for uses of `UseAppHost`?'"
3957,356226913,"b""@rainersigwald it doesn't look to me like `UseAppHost` will work here- can you expand?"""
3957,356735546,"b""You're right- just updated it. Thanks!"""
3440,366606687,"b""nit: I believe it's not usually necessary to explicitly restore before building anymore, is that correct @dsplaisted """
3440,366607135,b'nit: variable never used'
3439,367200944,"b'nit: Same as #3440, restore is no longer necessary'"
4236,382278224,"b'Thanks for catching that, I added a test to cover that issue and updated the hash.'"
10981,397524628,"b""No change in behavior. I removed the [special case](https://github.com/dotnet/sdk/pull/10981/files/3e7b18b53b58f2a2ae97540d827924fd7986514a#diff-d43ce974025b3d970a2ce51853809514L43) for when reference assemblies weren't installed. The logic is still the same if they are installed (we assert that we're using the [default runtime](https://github.com/dotnet/sdk/pull/10981/files/3e7b18b53b58f2a2ae97540d827924fd7986514a#diff-d43ce974025b3d970a2ce51853809514R120)) but when they aren't installed we now automatically reference them and as a result we use a [referenced runtime](https://github.com/dotnet/sdk/pull/10981/files/3e7b18b53b58f2a2ae97540d827924fd7986514a#diff-d43ce974025b3d970a2ce51853809514R124)."""
10981,398724989,"b'It supersedes, I added test coverage in the latest update: https://github.com/dotnet/sdk/pull/10981/commits/fb3772a07b7ebd2d41606cae85863e8d920b2d34#diff-8ba7e75c46a5fe96b147fd79709da01eR116'"
10981,398725594,b'Added in the latest update: https://github.com/dotnet/sdk/pull/10981/commits/fb3772a07b7ebd2d41606cae85863e8d920b2d34#diff-81720bb5fb8b13c6dff8490812b4c44aR327'
11213,406829956,"b'Oops my bad, I forgot to take this out after using it to debug :)'"
11242,410495214,"b""That's much cleaner, thanks. I've updated this PR. """
11357,412378163,b'Can you reference localized strings from .targets files?'
11213,412459285,"b'`BeforeTargetFrameworkInferenceTargets` sounds like a good name to me, I can update to that. '"
11352,415989762,"b'I think this needs to be switched to false, per https://github.com/microsoft/msbuild/pull/4931#discussion_r415856633'"
11528,426687964,b'This file is in the `eng/` folder and should be reverted.'
11528,426688082,b'This file is in the `eng/` folder and should be reverted.'
11635,427504545,"b""Yeah, I was planning on coming back to that once the the formatting for the list of valid OS versions is defined, but I can add it in this PR if it's already been settled on. How will the list be formatted?"""
11635,427505281,b'For separating property values? So we need to case on Visual Basic each time we add to this list?'
11635,428128947,"b""Sure, I added a note to the original issue and I'll keep it open after this PR. """
11635,428838376,"b""I've updated to overwrite `CoreCompile` with the target that writes `DefineConstants` to our output file. I overwrote compilation instead of running the target afterwards because the net6.0 tests won't compile yet so the build fails before I can get output. If there's a better way to do it, let me know."""
11717,429314768,b'Please use `NETSdkError` here instead for localized error messages'
11717,429315942,b'Use MSBuild version comparison intrinsic functions for version comparisons (line 17 as well)'
11635,434883501,"b""Yup, I noticed that while implementing this. Once we add the condition for including those defaults I'll have to come back and change this test (remove the `WINDOWS` assertions in this line). """
11635,434883735,"b""Yes, that's right. `-1` seems to be the default so that's what I'm using here. """
12202,445883186,"b'Right now if we try to specify a target framework of this format (ex ""net5.0-windows"") it errors out [here](https://github.com/dotnet/sdk/pull/12202/files#diff-b1cca2205c228925d515de229057c7c6L99) because [TargetFrameworkIdentifier or TargetFrameworkVersion is empty](https://github.com/dotnet/sdk/pull/12202/files#diff-b1cca2205c228925d515de229057c7c6L87-L89), so I think we should be good to leave the old logic without having duplication.'"
12202,446392644,"b'Just pushed changes, I removed the old logic for parsing TargetFrameworkIdentifier and TargetFrameworkVersion and replaced it with calls to the new nuget functions. '"
12202,447077037,"b""I was giving an escape hatch for projects like [this test asset](https://github.com/dotnet/sdk/pull/12202/files#diff-7dde177f90cb7a97b30bfe7b4aad8d44R14), which does some custom parsing of the target framework `net40-client`. \r\nI'm not sure the behavior we want here, right now it errors when the new target framework format (`{target framework}-{target platform}`) is used with a target framework below .NET 5. An alternative is to not attempt to parse out the target platform at all if the framework is below .NET 5, so it wouldn't error in cases like `netcoreapp3.1-ios` but it would just ignore the ios part of the target framework."""
12202,447949711,"b""We get back a 3 part version here so we're trimming 5.0.0 down to 5.0. The logic here is slightly complicated because we can't tell if we have a 2 or 3 part version (net472 vs net5.0) so it has to work for either. """
12124,448456781,"b""Sounds good, I've pushed a fix. """
12202,448632864,"b'Great, I just added the logic for #11232 to this PR. '"
12314,449063652,b'Why is this condition empty? Should it contain something or can it be removed?'
12318,450439712,"b'That prevents us from being able to add project changes when creating the asset, right? We need to be able to do that here to add the content with the right metadata. '"
12085,451108136,"b""That's the main reason this PR is a draft, I wanted to check with you which should have precedence. `_ResolvedCopyLocalPublishAssets` consists of assets from packages that need to be copied for publishing and `ResolvedFileToPublish` is eventually everything else, so at this point in execution it contains everything calculated [here](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L715) which includes child project items, content, resources, compile items, etc.\r\n\r\nFor example, in the [second test](https://github.com/dotnet/sdk/pull/12085/files#diff-4167a132d5b170df471fdaa1d7da1040R56) System.Runtime.CompilerServices.Unsafe.dll is coming from both the microsoft.netcore.app.runtime.win-x64 package (which is in the `_ResolvedCopyLocalPublishAssets` itemgroup) and it is copied as content in the microsoft.testplatform.cli package (which is originally in the None itemgroup and added to the `ResolvedFileToPublish` itemgroup in [GetCopyToPublishDirectoryItems](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L715)). \r\n\r\nHere I'm choosing `ResolvedFileToPublish` to have precedence but I'm not confident that this is the right choice. """
12202,451856607,"b""Probably not :) I'll remove it. """
12430,453710245,"b'Sure, PR is out here: #12448'"
12448,453800067,"b'Sorry, that was the result of a bad merge, should be fixed now. '"
12386,453906516,"b""Cool, I've updated to use the `_MicrosoftWindowsDesktopSdkImported` property they recently added. """
12386,453907986,"b""I've updated so the target platform properties are defined with UseWPF or UseWindowsForms is set. Note that we also discussed this change over email in relation to #12418 and the preview 7 XAML designer bug. """
12451,453964684,"b""We'll need to check that MinimumOSPlatform isn't empty before this """
12386,455201705,"b""I think we'll be able to remove it when #12492 is fixed but for now we would infer the target platform to be windows here. """
12386,455202447,"b""Yes, that makes sense. I've made #12492 to track removing this change once the templates are updated. """
12386,455207606,"b""Yes, it did generate multiple error messages so I've updated to Daniel's second suggestion. """
12202,456595628,"b""I've included [test coverage](https://github.com/dotnet/sdk/pull/12202/files#diff-f9faa4d119d988118a9ff5cb495f33c1R61) for the TargetPlatformMoniker and TargetPlatformDisplayName properties in this PR. When the platform version is specified these properties are generated automatically but that generation occurs before this file is imported, so they aren't defined in this specific case. """
12612,459683179,"b""A commit from the original PR got lost, I've added it back now so tests should pass :)"""
12612,459684293,"b'We reverted the change that disabled the legacy defaults for preview 8 when we merged preview 7 into preview 8 earlier this week, here: #12577'"
12612,459696305,"b'As discussed offline, this change has been added to the other preview 8 PR I have out, which has carries the test attributes this change relies on: https://github.com/dotnet/sdk/pull/12613/commits/a8bbd938a566d77943ad758b4ec5e4dd80fda7b0'"
12612,459697291,"b""@dsplaisted did your comment get cut off? This seems like reasonable behavior although it would require a MSBuild change. I assume it's not blocking? I can make an issue to track updating to this logic. """
12612,459702254,"b""Great, I've made an issue for it: https://github.com/dotnet/sdk/issues/12614"""
12633,460245682,"b""@rainersigwald @dsplaisted @wli3 during manual testing I ran into a problem here. It seems that `IsRunningInVisualStudio` is only true when we're opening VS, but once it's open and we're building inside it this flag is false and we're getting the old SDK resolution failure. Is there an alternative way I should[ set this flag from MSBuild](https://github.com/dotnet/msbuild/commit/699aeb65a984d7a5bdf71cbe4ab16b5e03528f25#diff-56a0887c6185e284af9f399c27a85c13R245) to get consistent behavior?"""
12576,460286849,b'This is now `net5.0`'
12576,460287017,b'Nit: more descriptive name here'
12576,460288252,b'Nit: there should be an overload that allows you to just pass the test asset instead of constructing the path. '
12576,460289221,"b'It looks like this is the only place this build command is used, can we pass the path directly and delete the build command?'"
12576,460290282,"b'These assertions can be chained, see [this as an example.](https://github.com/dotnet/sdk/blob/master/src/Tests/Microsoft.NET.Build.Tests/GivenThatWeWantToBuildALibrary.cs#L773-L777) '"
12649,460974938,b'Merge issues'
12649,460975382,b'Do we need the changes in this file?'
12633,462503547,"b""This is solved by https://github.com/dotnet/msbuild/pull/5562, I'll update this PR once that change flows."""
12702,462624941,"b""Oh okay, I guess I misunderstood the issue. So in all cases the tfm in the runtimeconfig should be the TargetFrameworkMoniker, that won't break anything else? \r\n\r\nFor line 128, would we want to parse the TargetFramework there instead then?"""
12633,463071218,"b'Yes, the solution is here: dotnet/msbuild#5562'"
12702,464622829,b'Ping @dsplaisted '
12769,465335000,b'nit: mockMock? '
12769,465336675,b'Is there a way to have more extensive assertions here?'
12633,465988716,"b""I don't have a good understanding of design time builds, so I don't know. Right now this target runs before resolving framework references and packages in the build, does that interfere with intellisense? Should I hook it in later in the build?"""
12633,466021043,"b""It doesn't seem like the SDK resolver it hooked up, I haven't been able to write this type of test. """
12702,466036667,"b""I see, I've updated to parse the short name from the TargetFrameworkMoniker. """
12633,466501498,"b'I see, I did some manual testing and I was able to add a package and get intellisense for the package APIs, so we should be good here. '"
12633,466505746,"b""That makes sense, I've filed https://github.com/dotnet/msbuild/issues/5618 and https://github.com/dotnet/sdk/issues/12810. I'll keep these in my backlog of work, I should be able to get to them in the next few weeks. """
12872,468745614,b'@terrajobst is this the right name or did we decide to go with `SupportedPlatform`?'
12085,468828981,"b""@dsplaisted circling back around to this, do you have any thoughts as to the right behavior here?\r\n\r\nAs it's getting late in the release cycle and it's possible that there are other cases in which we have duplicte writes that would now produce an error with this change, I'm wondering if it makes more sense to hold off on this and include it in an early preview of 6 so we can get feedback?"""
12897,470173643,"b""I was seeing an exception with invalid target platform versions without this change, which was odd because I couldn't repro it locally. In general I agree, but as this is a work around and should be removed soon I think it should be okay. """
12897,470873928,"b'Adding `;Restore` will cause a different failure if the issue is that `TargetFramework` is being used instead of `TargetFrameworks` otherwise, this is a different issue. '"
12915,470901302,"b""Oh, that's probably the case I was running into when I was testing that I didn't fully understand. I was getting an error with an invalid target platform when  parsing it with ParseFrameworkName. This should be fine though, because we'll just catch the error and return the target framework"""
13093,476540290,b'I think the `TargetPlatformMoniker` input can be removed from this task now'
13211,482210942,"b""Yes, it does fail to build (see line 43). I'm asserting that we see the correct error/warning messages from the resolver here but I've been unable to assert the build error because we fail before that erroring target is run when we're outside of VS because we're missing the ResolveSdk target."""
13211,482222991,b'When we hook the build resolvers in they get bypassed by [`DOTNET_MSBUILD_SDK_RESOLVER_SDKS_DIR`](https://github.com/dotnet/sdk/blob/master/src/Tests/Microsoft.NET.TestFramework/ToolsetInfo.cs#L150). Is that environment variable important or should it be removed in favor of using the newly build resolvers?'
13441,485945011,b'@dsplaisted thoughts?'
13507,487132716,b'It looks like it got renamed to `SupportedOSPlatform` [here](https://github.com/dotnet/sdk/pull/12775/files#diff-b1cca2205c228925d515de229057c7c6R81). '
13522,488041533,b'@wli3 do we want the helix tests removed from this branch?'
13545,488762657,"b'Yes, this copies the item including the metadata. '"
13598,488766598,b'Leftover from debugging?'
13615,488978203,"b""Sounds good, I've updated to remove these too. """
13615,488998119,"b""Yes, that's right. """
13545,489024476,"b""Currently the target framework drop down is bound to the `TargetFrameworkMoniker`, so part of this change is changing it to bind to the `TargetFramework` instead (see [this line](https://github.com/dotnet/sdk/pull/13545/files/1d6963e324995cee06ccdae90325a54c146e8eb9#diff-11e7b7431abbd0596f030eefc10620e9R42)). \r\n\r\nFor generality, I'm constructing the target framework from both the `TargetFrameworkMoniker` and `TargetPlatformMoniker` values. This requires the special case [here](https://github.com/dotnet/sdk/pull/13545/files/1d6963e324995cee06ccdae90325a54c146e8eb9#diff-11e7b7431abbd0596f030eefc10620e9R33) because the `TargetPlatformMonkier` defaulted to windows 7.0 before 5.0, so we want to remove that unless we really are targeting windows (that is, UseWPF or UseWindowsForms are set). """
13545,489551048,"b""My motivation for using the target platform is generality in the future so that we're minimizing the special casing for windows. This way the code works for target platforms besides windows. \r\n\r\nThe platform property in a nuget framework is also readonly, so we'll need a target platform moniker to use in initialization to set the platform property regardless. """
13545,489553556,"b""I'm using the outputs attribute instead here, I think it's the same thing with different syntax: https://docs.microsoft.com/en-us/visualstudio/msbuild/target-element-msbuild?view=vs-2019#attributes"""
13545,489641615,"b""@dsplaisted per our discussion I've added the test case you suggested and made the code more explicit. Let me know if you have any other feedback. """
13672,490352796,b'Why does this need to be windows specific?'
13545,492415447,"b'Sure, just converted to unit tests. Look okay to you (and @dsplaisted)?'"
13545,492902869,"b'We are able to test that the target platform version from the target platform moniker gets included in the target framework in [this test](https://github.com/dotnet/sdk/pull/13545/files/69c2724cdf27f4ecb484814744ca4ca17e9cedb2#diff-23f23314e105085486eb13f5b1650dccR54), is there more coverage you think we need?\r\n\r\nEdit: got confirmation offline that the unit tests are enough. '"
13795,494428572,"b""Good catch, thank you. I've added a test case. """
14008,500634084,b'@rainersigwald @Forgind why is the version going from 16.9 back down to 16.8?'
14020,502553951,"b'This removes all duplicated files from `_ResolvedCopyLocalPublishAssets`, which is fine as those files still exist in `ResolvedFileToPublish`. Later in the logic these item groups will be concatenated together anyway. '"
14433,518375438,"b""@mmitche I'm assuming we shouldn't be getting these duplicated comments here?"""
14379,521508614,"b""System.CommandLine has help built in, so it's specified in the parser: https://github.com/dotnet/sdk/pull/14379/files#diff-75f24d684a51fe02f83d64c70e9cd87276f55132b61facd9fd41bb0b5d1da847R134"""
14379,522262466,"b""Nope, we don't want to change anything that will require changes on your side in this PR, so I'll remove it. Thanks for pointing this out. """
14379,522439328,"b'This is all handled by system.commandline now, so we know the parse result will never be null and it generated the error for us if the wrong number of package references are specified.'"
14379,522442269,"b""The options in this common options file aren't included in all commands, just shared across more than one. I did include the diag option in too many commands though, I'll remove the extras- thanks for pointing this out"""
14379,522465847,"b""Good catch, it doesn't look the same, I'll fix it. """
14379,522469587,"b""This isn't used for --help, it still goes to the template engine exe ([redirected through out help builder](https://github.com/dotnet/sdk/pull/14379/files#diff-75f24d684a51fe02f83d64c70e9cd87276f55132b61facd9fd41bb0b5d1da847R157)). But it is used for suggestions (see https://github.com/dotnet/sdk/blob/629cbd8664118463a12645b3332561ceed1b9a93/src/Tests/dotnet.Tests/CommandTests/CompleteCommandTests.cs#L84). Does the template engine exe provide suggestions that we should defer to instead?"""
14379,522472901,"b""No, not new, these options used to always be included. We can't do that anymore because some commands (like build for example) already have a --runtime or --no-dependencies option. With the old parser it didn't care and would just overwrite the duplicate option, but system.commandline throws if we add an option twice."""
14379,522474194,"b""No, it wasn't being used even before this change. """
14379,522479283,"b'Yes, we get this help behavior for free with system.commandline'"
14379,522480424,"b""There is, FromAmong, which I'm using with the options above and below this one. Should this option only accept full or mini as well? The original code doesn't specify that. """
14379,523107551,"b'> no, so NewCommandParser is only used for suggestion not help even after system.commandline change?\r\n\r\nRight, only used for suggestions.'"
14529,523198664,"b'Note that Jared manually releases new packages only when we ask him, so this will make it more difficult to test full framework changes. '"
14529,523200395,"b'nit: spelling, MsbuildAdditionalSdkResolverFolder'"
14529,523201489,"b""Question: what distinguishes between tests that can and can't be run in helix?"""
14379,523221730,"b'This is another instance of https://github.com/dotnet/command-line-api/issues/1077, the environment variables are specified after an option flag so they are being treated as option arguments, which is incorrect. '"
14379,523280873,b'System.CommandLine reports any errors if there are unmatched tokens. So `dotnet tool run dotnetsay -- hi` is fine but `dotnet tool run dotnetsay hi` causes an error. '
14379,523285637,"b'This logic existed before, just in a different location. Before, we called RestoreCommand.FromArgs (see line 60) to get the restore command whereas now we\'re using the RestoreCommand constructor directly (because we don\'t want to have to re-parse everything). The FromArgs method adds ""-target:Restore"" to the arguments whereas the constructor doesn\'t.'"
14379,525394683,b'It will work once dotnet/command-line-api#1077 is resolved :)'
14379,525461414,"b""Not that I'm aware of, I changes this to check that the names are equal in one of my later commits. """
14379,525462770,"b'Yes, we have `TreatUnmatchedTokensAsErrors` set to false for both the run commandsm (dotnet run and dotnet tool run)'"
14379,525545977,b'Just switched it back to being optional: https://github.com/dotnet/sdk/pull/14379/commits/5927d4ccad0aa47cfccb95ba5c8a6b6b0e6decbe#diff-c59ee7ae48403cce44671ddc3549eb921e7c23bda26840c883b29d9f7e7942e5R36'
14644,528858399,"b'This is one of the opt in features that we get for free from System.CommandLine, so with this change all dotnet commands will implicitly support [parse]. '"
14664,528926727,"b""Yes, it would. The string replace is a work around for a system command line behavior (bug?) where the first option alias is matched even if a better match exists. So with the property option, we have the aliases `-p` and `-property` but since `-p` is the prefix in both cases it's always the alias that's matched. For example, with the input `-property:prop=true` the token result is option: `-p` and option value: `roperty:prop=true`\r\n\r\ncc @jonsequitur """
14664,529025727,"b""Will track this issue with https://github.com/dotnet/sdk/issues/14461, but in the meantime I don't think it effects this change."""
2997,261439761,"b""Not really sure what's the process of getting these messages translated. There are other english strings too in these non-english xlf files"""
2997,261440544,"b'Yes, just noticed it while looking at the list of changes. I just submitted a new commit to revert this'"
2997,261441129,"b""The logic in this function seems like it could be useful to other tasks too (if not already implemented somewhere else that I couldn't find). Where would you recommend we put this?"""
2997,263492494,b'Are there variables in the SDK that we can read instead of doing this?'
2997,263521753,b'Read from ResolvedRuntimePacks now'
2997,263521882,b'Removed'
2997,263536966,"b'Leaving it as is for now, as we discussed'"
2997,263562636,b'I refactored this and using ToolTask now. Thanks for that suggestion!'
2997,263567430,"b'Yes, crossgen already formats the messages correctly. Fixed with a ToolTaskBase implementation'"
2997,263568501,"b""I see. I'll look into what flag the runtime checks.\r\n\r\n> not everything in ReferencePath is a reference assembly\r\n\r\nCan you give me a example that I can repro locally? I was just testing by setting `<PreserveCompilationContext>` to true"""
2997,263600906,b'Checking for the presence of a ReferenceAssemblyAttribute now.'
2997,265734061,b'Interesting... I thought it would throw an exception. Thanks for letting me know'
2997,265734795,"b""Yes. We have all dependencies, so adding this switch shouldn't really matter, but it's an added layer of robustness. We do the same with Desktop"""
2997,265737627,b'Reduced the size of the try-catch to the PE/MD loading portion.'
2997,265739009,b'Sounds good'
2997,265745724,"b""rhel should be supported. This is just a bug here.\r\n\r\n> Do I have to be on a a linux-musl machine to run crossgen from linux-musl runtime pack? Does rhel have the same issue?\r\n\r\nI don't believe there's any linux flavor specific code in crossgen\r\n\r\n> I think it would be better to switch over the runtime packs that are actually supported than to use Contains.\r\n\r\nAgreed"""
2997,266177316,"b'I rewrote this as we discussed, comparing the platform obtained from the runtime pack RID to the platform obtained from the host OS.'"
2997,266177801,"b""I need a custom implementation of Execute really, so I'll just remove the override from the base class (I agree with you... doesn't feel correct), and override it in my task."""
2997,266669260,"b""Why wouldn't it be legitimate for a ToolTask to override Execute and call ExecuteTool multiple times? The implementation of ToolTask.Execute seems to do a bunch of validations and command line building, which is what the crossgen task does here already, then calls ExecuteTool.\r\n\r\nThe implementation of ToolTask.ExecuteTool also seems capable of being invoked multiple times (https://github.com/Microsoft/msbuild/blob/master/src/Utilities/ToolTask.cs)\r\n"""
2997,266693279,"b""Ah, that's a good check to have"""
2997,266693356,"b""yeah it's a typo"""
2997,266693494,b'is that the only kind of exception we can get if the file is not a valid PE file?'
2997,266693824,"b""Hmm... that sounds suspicious. What if the file is not a valid PE, like a text file, is PEHeaders also not null? I'll double check that."""
2997,267020550,"b'I think we can keep this check the way it is for now. In the future, if we decided to add a win10-x64 and win7-64 that do not fall back to win-x64, we can revisit this.\r\nFrom a crossgen perspective, there is no difference between the different versions of Windows, and we\'ll need a graph that is able to fallback to just ""win"", and if that\'s not possible, we\'ll need to implement some logic here that detects ""win"", regardless of the version.\r\nThe call to GetBestMatchingRid right now handles all these cases, because it mirrors what we do for the target platform.'"
2997,267064599,"b""You're right. it's either not-null, or we get a BadImageFormatException"""
2997,267064771,b'Verified that there are no other exception types thrown on non-PE files.'
2997,267065697,"b'Ok. The task will emit errors anyways when crossgen execution fails, and this will fail the whole build anyways.'"
2997,267079250,"b""Sounds good. I'll change the check. Sigh... not an expert on these System.Reflection.Metadata APIs :("""
2997,267080233,"b'Ah, let me check'"
2997,267081147,b'All good. I removed the workaround.'
2997,267083349,"b""I can add a generic error. Based on my crossgen testing, that shouldn't really happen since crossgen has to emit some kind of failure message to stderr when it fails to compile an assembly"""
2997,267110846,"b'I added a generic error, but getting into the if statement will never happen, given how crossgen has to report a failure message to stderr on errors.'"
2997,267125107,"b""I see, sounds reasonable. I'll look into refactoring this to not override ToolTask.Execute"""
2997,267965776,b'Refactored. Thanks for the feedback guys!'
2997,269323820,"b""I was thinking about this. The end result is that the build fails (although i think it might copy some files to the publish folder). I was just thinking that given that it shows an overall failing result, whatever is in the publish directory is not considered valid anyways, so it doesn't really matter what we add to the publish list... does this make sense?"""
2997,269324308,"b'Let me know if you have a better name :). I was following the pattern PropertyGroup -> AdditionalProperties, and ItemGroup -> AdditionalItems :)'"
2997,269324469,"b'How can I check for the error? Should I check for ""NETSDKnnnn"" instead?'"
2997,269325250,b'Reverted'
2997,269325644,"b'Translated error messages look like they still have the ""NETSDKnnnn"" text. I think i can check with for that, unless you can think of a reason why this wouldn\'t necessary work?'"
2997,269327946,"b'Actually, I still need this (PrepareForReadyToRunCompilation.cs line 89). We were chatting that we could leave the call to NuGetUtils.GetBestMatchingRid to be on the safe side'"
2997,269339567,"b""Ah, forgot that it's no longer a ToolTask. Fixed"""
2997,269365138,"b'Fixed. Errors are getting detected now, and we stop building after the last crossgen step if there are any errors'"
3099,273175822,"b""> peReader.GetMethodBody(methodDef.RelativeVirtualAddress)\r\n\r\nWouldn't this throw if the RVA is 0?"""
3099,273624594,"b""Thanks folks. I'll change this to just checking the RVA"""
3099,274539245,b'Added'
3123,275052015,"b""I wanted to get your thoughts on the error message here... It's a bit confusing because it's not mentioning that the failure is because we're publishing a FX dependent app. This is however a very temporary situation, so I wasn't sure if it was worth adding another entry for it in Strings.resx. I'm happy to add a new entry if we think it's better, I just wanted to get your thoughts on it first."""
3123,275915014,"b""@nguerrera That's a good suggestion. We can amend the message and change it later"""
3121,275980814,"b'FWIW, filed https://github.com/Microsoft/msbuild/issues/4315. I really think this should be fixed in msbuild'"
3123,276034575,"b'It is upfront. It runs before the PrepareForReadyToRunCompilation task, which runs before any compilation'"
3125,276041714,"b'Not sure bout this, but i think this file should be added the the ILLink nuget package as a Sdk.targets file. I see other SDKs do that too. @nguerrera What are your thoughts here?'"
3125,276041899,"b'Example: see Microsoft.NET.Sdk.Razor, or Microsoft.NET.Sdk.Web'"
3125,276042300,"b'>RunILLink [](start = 28, length = 9)\r\n\r\nThe convention i see in the main Microsoft.NET.Publish.targets is to use underscores as name prefixes for ""sub-targets"" executed from a main target. We should probably do the same here (_ILLink, _RunILLink, ...)'"
3125,276044454,"b""When I started implementing this, i was under the impression that I would need to add some logic to the crossgen task to distinguish between the 2 lists, and only compile things in the PreserveNewest if they were out of date.\r\nThings have evolved since then, and thinking about it now, I believe we should be able to just make crossgen work with the 'ResolvedFileToPublish', before the split that '_ComputeResolvedFilesToPublishTypes' does.\r\nI'll make that change. For the linker, i think this looks correct.\r\nThe linker does one operation with multiple input files. Crossgen does multiple operations, each with its own input file, so splitting the 'ResolvedFilesToPublish' by type doesn't make sense here i believe"""
3125,276045749,"b'><Delete Files=""@(_LinkedResolvedFileToPublishCandidates)"" /> [](start = 5, length = 60)\r\n\r\nI thought we were going to RemoveDir, no?'"
3125,276046155,"b""What if the set of inputs are unchanged here, but the user decides to use a different more aggressive linking mode by changing some property in the csproj. Wouldn't msbuild skip this target here, given that all inputs/outputs are unchanged?"""
3125,276048884,"b""This is the kind of change that would be undesirable if we moved this targets file to the ILLink nuget package, because if the names here change, this would be breaking.\r\n@nguerrera, how can we ensure that name changes here won't break other tools/SDKs that depend on this? CI tests good enough?"""
3132,276454412,"b'>currently [](start = 54, length = 9)\r\n\r\nI feel we should remove ""currently"". If we support this in the future, we can delete this error message'"
3132,276455590,b'We should also handle the .pdb/.map files created by crossgen here. We can do this later (I want to make some changes to the R2R related stuff first). Please file an issue to track this.'
3157,280590064,"b""Nit: I think you should rename this to ILLink without the underscore. I think the convention used seems to be that all targets in the `DependsOnTargets` for the `ComputeAndCopyFilesToPublishDirectory` don't have underscores. Subtargets like `_RunILLink` can have the underscore"""
3157,280591352,b'What about the SOS/DAC binaries?'
3157,280592096,"b""Also, when @swaroop-sridhar and I were trying a few tests last week, we noticed that System.Private.CoreLib.dll was dropped. We tried a helloworld (references System.Runtime.dll, which references S.P.Corelib.dll), but neither dependencies seemed to get copied (maybe that's a different bug that we can fix in a different PR)"""
3157,280597908,"b""Here's a list of files that i think should be copied from the runtime pack (not sure about all of them though... @swaroop-sridhar can you comment if there are files we should remove from this list?) :\r\nclrcompression.dll\r\nclretwrc.dll\r\nclrjit.dll\r\ncoreclr.dll\r\ndbgshim.dll\r\nmscordaccore*.dll\r\nmscordbi.dll\r\nmscorrc.debug.dll\r\nmscorrc.dll\r\nsos*.dll\r\n\r\n\r\n"""
3157,280599333,b'And ucrtbase.dll (coreclr.dll depends on this I believe)'
3157,280602135,"b""> I'm not sure where clrcompression.dll is used, so this needs better understanding.\r\n\r\nIf you use the Compression APIs i believe"""
3157,280929669,b'Thanks for confirming. So the fix is not in Preview 5 then'
3326,293086628,b'Thanks for catching and fixing that one'
3326,293087324,"b'This `_ReadyToRunImplementationAssemblies` would be the same one we pass to the ILLinker too, correct?'"
3326,294988807,b'Probably a forgotten switch from the time I was debugging the test failures...'
3326,294996464,"b'It would be nice to duplicate this test for the framework dependent scenario, to validate the behavior of the `_CreateR2RSymbols` target'"
3347,296041034,b'I can add an _Info suffix'
3347,296041713,b'@rainersigwald Should `!= -1` rather be changed to `== 0`?'
3347,296045062,b'added comment'
3347,296046286,"b""That's a good idea. I'll make that change"""
3347,296336417,"b""I kept the message with normal importance. It hides during the default verbosity, and for a higher verbosity level they don't show up in yellow (unless the property is set)"""
3381,299213183,b'Do you think it might be worth adding this check also:\r\n``` c#\r\nforeach(file in output folder)\r\n{\r\n    if (file == SingleFile || file == PdbFile || file == NiPdbFile)\r\n        continue;\r\n    else\r\n        Verify file.extension == ni.pdb\r\n}\r\n```'
3381,299213296,b'LGTM otherwise'
3539,316819300,"b'I think the term `References` here could add ambiguities in the future, and someone could end up passing non-implementation assemblies as references to crossgen. I would like the names to reflect the notion of ""implementation assemblies"" used as crossgen references here if possible. Maybe something like `ImplementationAssemblyReferences`?'"
3539,316821147,"b""I don't think this is correct because the `GetInputFileEligitility` now returns `Eligibility.ReferenceOnly` for reference assemblies, and we can't reference those. Crossgen needs to reference implementation assemblies."""
3539,316821807,b'We should probably return `Eligibility.None` when `IsReferenceAssembly` returns true to prevent crossgen from referencing non-implementation assemblies.'
3539,316822220,"b""Just to confirm here, again, we need to make sure that the `ReferenceOnly` metadata does not get added to reference assemblies, since crossgen can't take those as references"""
3539,316822701,"b""I'm thinking of the case where we get those references assemblies published under the refs folder. Just wanting to make sure they don't show up here"""
4207,369810203,b'This is a fix to a separate bug... maybe it should go into a separate PR? Let me know'
4207,369810643,b'Temp code. Will be removed after https://github.com/dotnet/core-sdk/pull/6227 is merged'
4207,369811472,"b""There's a conversation going on around the native symbols feature. Most likely, it's looking like we'll use crossgen for it, as this won't be implemented in crossgen2 for the .NET 5.0 timeframe"""
4207,373623675,"b""The bug is that we couldn't run the native arm/arm64 crossgen and publish from a Windows arm/arm64 device. I'll move that to a separate PR."""
4207,381032962,b'Added braces to a bunch of places'
4207,381048914,b'Good catch. Yes this was an oversight from a previous attempt to use 9999 as a code. Fixed'
4207,381049451,"b'Correct, this is not expected to actually happen. If we fail to resolve the crossgen tool earlier in the pipeline (PrepareForReadyToRunCompilation), the task will show meaningful messages.'"
591,97165664,"b""Running things in parallel while waiting until they are all complete is a hard enough problem as it is :)  The `<Exec />` task certainly can't do this and parallel-ism in MSBuild (AFAIK) is for _building_ at the same time not executing targets or tasks.\r\n\r\nWhat would work best is use a `Task` from a task library that can do this in parallel which would give you a lot of options including better logging, caching, etc.  Maybe someone should work on a CrossGen MSBuild task?"""
981,105952971,"b'I would use a random value that would never actually be used.  If for whatever reason the default changed in the SDK to ""Release"", then this test wouldn\'t break.  If you put something like a GUID here, the test would really be making sure that its value is used.'"
1062,109688487,"b'Here\'s how the documentation file works:\r\n\r\n1. It starts life as a property `<DocumentationFile />` defined in an individual project\r\n2. It gets added to an item group `@(DocFileItem)` [here](https://github.com/Microsoft/msbuild/blob/5463237b0c014e9f3e0f1c5157780a8f40545ed3/src/Tasks/Microsoft.CSharp.CurrentVersion.targets#L156)\r\n3. `@(DocFileItem)` is passed to `<Csc />` [here](https://github.com/Microsoft/msbuild/blob/5463237b0c014e9f3e0f1c5157780a8f40545ed3/src/Tasks/Microsoft.CSharp.CurrentVersion.targets#L261)\r\n4. It is added an item group `@(FinalDocFile)` [here](https://github.com/Microsoft/msbuild/blob/2634f05a660b14c64ae4e924d900dd200d5032e7/src/Tasks/Microsoft.Common.CurrentVersion.targets#L350) which is a full path to where the file should be copied to\r\n5. The `@(DocFileItem)` is copied to `@(FinalDocFile)` [here](https://github.com/Microsoft/msbuild/blob/2634f05a660b14c64ae4e924d900dd200d5032e7/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4062)\r\n6. `<ResolveAssemblyReference />` gets passed a [list of related file extensions](https://github.com/Microsoft/msbuild/blob/2634f05a660b14c64ae4e924d900dd200d5032e7/src/Tasks/Microsoft.Common.CurrentVersion.targets#L578) which includes `.xml`.\r\n\r\nSo technically, the only reason the Doc file shows up in `@(ReferenceCopyLocalPaths)` is because it has the same file name without extension as the output assembly.  [This logic](https://github.com/Microsoft/msbuild/blob/6851538897f5d7b08024a6d8435bc44be5869e53/src/Tasks/AssemblyDependency/ReferenceTable.cs#L879) takes the output file name and looks for ""related"" files by extensions, one of which is `.xml`.  If people were trying to be fancy, they could have their documentation file named something else and it would show up in `@(ReferenceCopyLocalPaths)`.\r\n\r\nThat said, it\'s probably safe to assume that the only related file ending in `.xml` is the doc file.  MSBuild does not currently translate any metadata to these related files that indicate what they were originally.'"
1636,143714262,"b""I've added a condition"""
2042,174198311,b'@rainersigwald is there any perf gain with having both of the conditions on the target instead of the task in this case?'
2819,247786438,"b'Hi Nick, the string is not localized in the platform yet. (new string) and seems tool is stripping target tag when no translation exist. We will log this as request to be fixed by the tool owners.'"
2947,257701374,b'@nguerrera String is changed to different line in the same file.'
188,80980905,"b'VB is planned, C# came first so that we can start dogfooding.\n'"
188,80981833,"b'I agree, we would like to remove this. Was added to avoid errors for ""Main"" not found since we targeting output as exe.\nIs there an equivalent of ""emitEntryPoint: false"" from project.json world ?\n'"
188,80983417,"b""That's a good point. Our initial decision was to keep these separate, so we went ahead with that, We will definitely revisit this.\n"""
188,80983792,"b'We are planning to work with xunit community, and get it done.\n'"
188,80985923,"b'Our initial assumptions required it to be an app, for eg, we needed runtimeconfig.json created, which does not happen for a library, and there were some debugging related issues.\nAs I mentioned in my PR comments, we want to explore this option but since it has not been tested, we did not want to make this change right now.\n'"
394,88148137,b'Did you try and see if ToolsVersion could be removed as well?\n'
461,92698047,"b'@dasMulli - Yes, the browse functionality is controlled by another capability (ReferenceManagerBrowse).'"
511,92854767,"b""The property pages are expecting a Boolean value and empty strings are throwing a wrench on things.\r\n\r\nFor your other question - I'll forward you the email threads with the discussion but basically yes they should be defaulted as it is the right thing from the project perspective."""
511,92857429,"b""Good catch, that's getting wiped away (details on the thread) so I missed that. I'll send out another PR with an update."""
813,99448220,"b'I was just talking about this with @jinujoseph, basically the properties that need defaults are those that are not strings (e.g. Booleans). These are the only 2 that I found on this bucket that needed to be default. She tried this change on top of the CPS changes and the visible property changes and things are working as expected (sans other unrelated issues).'"
949,104558841,"b'Without the defaults though the project system will fail miserably so they need to go in together. So we could split this up into two stages, first adding the 2 new defaults and leaving the workaround in place and then a second one to remove the workaround. But that would only help if the SDK changes go in first.'"
949,105736069,"b""I was thinking of ways of working around this and while we can leave the conditioned statements the capability is exclusive. If both capabilities are defined things go very bad. I do have one other idea, I'll sync up offline and circle back on the thread."""
949,106545143,"b""Talked offline with Nick and tried another approach here. I'm moving the capability workaround to the design time targets and leaving the old workaround in place. This makes it so that things can flow smoothly in the short run (since this change requires coordination across 4 repos).\r\n\r\nhttps://github.com/dotnet/sdk/issues/1001 tracks the removal of the workaround."""
3315,292134512,"b'Yes, as soon as this change flows into `dotnet/wpf`, we will consume this in `Microsoft.NET.Sdk.WindowsDesktop`'"
3315,292134621,"b'Yes, as soon as this change flows into `dotnet/wpf`, we will consume this in `Microsoft.NET.Sdk.WindowsDesktop`'"
3315,292143365,"b""I'm watching DARC flows (I triggered one earlier this morning from core-setup -> toolset exactly for this purpose: https://github.com/dotnet/toolset/pull/1177). Won't merge this until it's _very safe_ to do so. """
3315,292175880,b'Update global.json with latest core-sdk that contains support for `_MicrosoftNetSdkWindowsDesktop`'
3315,292206894,"b""Looking through the history, this happened in the very first commit. I'll redo the work and look through each file this time... and see if I can repro the problem along the way.."""
3315,292608224,b'Fixed these.'
4154,367202443,b'Is this supposed to be a check for 3.0 or 3.1? '
10750,386736860,"b'Yeah, it\'s up-to-date. \r\n```\r\n\xce\xbb darc get-asset --name Microsoft.WindowsDesktop.App --channel "".NET 5 Preview 1"" --max-age 5\r\nLooking up assets with name \'Microsoft.WindowsDesktop.App\' on channel \'.NET 5 Preview 1\' in the last 5 days\r\nMicrosoft.WindowsDesktop.App @ 5.0.0-preview.1.20127.5\r\nRepository:    https://github.com/dotnet/windowsdesktop\r\nBranch:        release/5.0-preview1\r\nCommit:        3220fe28e26c10885932b29f653b573f7d845b31\r\nBuild Number:  20200227.5\r\nDate Produced: 2/27/2020 5:27 PM\r\nBuild Link:    https://dev.azure.com/dnceng/internal/_build/results?buildId=539885\r\nBAR Build Id:  44403\r\nReleased:      False\r\nChannels:\r\n- .NET 5 Preview 1\r\nLocations:\r\n- https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json (NugetFeed)\r\n- https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5-transport/nuget/v3/index.json (NugetFeed)\r\n\r\nMicrosoft.WindowsDesktop.App @ 5.0.0-preview.1.20127.4\r\nRepository:    https://github.com/dotnet/windowsdesktop\r\nBranch:        release/5.0-preview1\r\nCommit:        80f111daf668cc7bc8c601fc34e5d559096ab043\r\nBuild Number:  20200227.4\r\nDate Produced: 2/27/2020 12:15 PM\r\nBuild Link:    https://dev.azure.com/dnceng/internal/_build/results?buildId=539352\r\nBAR Build Id:  44369\r\nReleased:      False\r\nChannels:\r\n- .NET 5 Preview 1\r\nLocations:\r\n- https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json (NugetFeed)\r\n- https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5-transport/nuget/v3/index.json (NugetFeed)\r\n```'"
14020,502050947,"b'Will this remove *all* copies? In other words, instead of two copies of some file, will we have zero copies of it?'"
14315,515421476,"b'@davidwrighton @jkoritzinsky In this code `_targetRuntimeIdentifier` is not a user-specified RID but the RID of the downloaded `Microsoft.NETCore.App.Runtime.*` package, i.e. it is already resolved to one of the well-known RID values. For this reason I could not find any single case when `NuGetUtils.GetBestMatchingRid` would do anything useful here.'"
14315,515425995,"b'Under the current design it is not possible to have `""armel""` here.'"
1024,107428816,b'Why would we not include net462?'
1024,107429487,"b'Yes, the next work item is to test the negative cases.'"
1024,107435304,"b'OIC; I will update the comment - ""2.0.0-beta-001689-00"" does indeed have an impact on net462; I think we should not need to set the RuntimeframeworkVersion for any of these.\r\n'"
1024,107437140,b'updated...'
1024,107452475,"b'\'The RuntimeFrameworkVersion property is expected to have zero impact on net462 projects\' - the observed testing behaviors are in direct opposition to this statement - without the entry all SDK ""net462"" & classical .NET Framework ""v4.6.2"" unit tests fail; with the entry all unit tests pass. The qualifier is that initial testing was done on a VM I created. The created VM may or may not be representative of the Jenkins testing bed image.\r\n\r\n'"
1024,107456936,"b""The unit tests in 'GivenThatWeWantToReferenceAProject' can be broken down into 4 categories:\r\n1. negative single-target unit tests\r\n2. negative multi-target unit tests\r\n3. positive single-target unit tests\r\n4. positive multi-target unit tests\r\n\r\nThe removed unit tests are in category 3. \r\n\r\nAlthough the 'v4.6.1/netstandard1.4' is not 'exactly' redundant as the new unit test uses the SDK csproj construction where the removed unit test used the classical method."""
1024,107477359,"b""On Jenkins the 'RuntimeFrameworkVersion' property is not necessary for net462; removed for net462"""
1024,107495453,b'I agree that we could be more efficient with these added unit tests; I am looking into combining similar references sets into a single mutli-targeted unit test.'
1024,107764936,b'Unofficial time-to-complete deltas:\r\ndebug_windows_nt_fullframework_prtest   +14 seconds\r\ndebug_windows_nt_prtest                 +1 minute 50 seconds\r\nrelease_windows_nt_fullframework_prtest -28 seconds\r\nrelease_windows_nt_prtest               +1 minute 14 seconds'
1024,107939369,b'This is a reference to the supporting projects - I did get it wrong; fixed now:\r\n**{dependency.Name}.{dependency.Name}Class.Name;**'
1050,108959308,b'done...'
1050,108959394,b'Added a comment...'
1050,108959499,b'done...'
1050,108960523,b'I would prefer not to have to unravel the logic; the follow-up action after the resolution of #1041 seems simpler here.'
1050,108963039,"b""'ShortTargetFrameworkIdentifiers' is a list of strings; so we need to use the 'contains'. In the current usage, the list contains only one. However, the test is able to handle a multi-targeted reference project."""
1050,108964701,b'done...'
1050,108965514,b'done...'
1050,108966769,b'done...'
1050,108968266,b'done...'
1050,109005947,b'done...'
1050,109005990,b'done...'
1050,109039757,b'done...'
1050,109039908,b'done...'
1687,147251914,"b""This is a stand-alone task - and as such, should be as self-contained as possible - this can be removed by a simple deletion of the 'Publish' directory."""
1687,147252433,b'This is a temporary step in the sense that the SDK repo will be folding in the CLI repo. The PR is to support step 1 completion.'
1687,147265974,"b""Can you elaborate on this comment - I do not think the VSO msbuild-task implementation uses 'dotnet'."""
1687,147266302,b'Good idea...done.'
1745,151518871,"b""Put back a NuGet.config with just the 'config' values."""
1745,151519042,"b'Yup, I realize that now...'"
1818,157018725,b'nit: Why is one import value absolute [Settings.props] and the other is relative [Directory.Build.props]?'
1818,157027335,"b'I understand that functionally this does not matter; I\'m commenting on this stylistically.\r\nIsn\'t this one absolute? Import Project=""$(RepoToolsetDir)Settings.props""'"
1829,158086899,"b'@mishra14\r\nWhy is ""NuGetPackagingVersion"" at the older version? Is this an oversight in the updating process?'"
1829,158102406,"b""@mishra14 \r\nThe question is for you to field: Why would your 'update-tool' update one and not the others?"""
1829,158111239,"b'@mishra14 \r\n""I do not understand the need for 3 different variables"" - orchestrated build dictates the granularity of the packages\r\n\r\nWhat is your process updating? And I\'ll base the others on the one your process is updating.'"
1796,160470099,b'Fixed...'
1796,160470126,b'Fixed...'
1796,160470406,b'These are SDK files that the Performance tests require that are not produced by dotnet/sdk'
1796,160470488,b'Fixed...'
1796,160471405,b'Fixed...'
1796,160471703,b'Fixed...'
1796,160471915,b'Fixed...'
1842,161361626,"b'There is a blind ""return;"" \r\nThe test should execute block A or block B based on the conditional ""RuntimeInformation.IsOSPlatform(OSPlatform.OSX)""- essentially the return is acting as the \'else\'; therefore, I added it.'"
1969,169401107,b'Done...'
1969,169401339,b'Done...'
1969,169402332,b'Done...'
1969,169402662,"b'@DrewScoggins \r\nWhy is the container: ""coreclr""?'"
1969,169404845,b'Done...'
1969,169446847,b'Done...'
1969,169447020,b'Done...'
1969,169447189,"b'Yup, done...'"
1981,169705273,b'CoreCLR does it in this way - I am following their lead: https://github.com/dotnet/coreclr/blob/master/perf.groovy\r\nhttps://github.com/dotnet/coreclr/blob/master/netci.groovy'
1982,170101470,"b'Yup, fixed...'"
1982,170128650,"b'Yup, Thanks'"
2318,194531746,"b'""making sure that we are generating the measurement.json"" - we do a check at each call to ""measurement.py"" Is that not sufficient?\r\n\r\n'"
2318,194535451,b'done...'
2318,194535469,b'done...'
2318,194535486,b'done...'
2318,194535559,b'done...'
2346,196918907,b'done...'
2403,202849815,b'@dsplaisted \r\nDoes git have C# apis?'
2423,205540465,"b""@nguerrera \r\nI'll take care of this..."""
2558,221356007,b'This is the form:\r\n\r\ntimeStamp=```date +%Y-%m-%dT%H:%M:%SZ```\r\n\r\nthe trick is the back-ticks'
2558,222118527,b'Done...'
2558,222133667,"b""I don't think it matters; both appear correct:\r\ndate --utc '+%Y-%m-%dT%H:%M:%SZ'\r\n2018-10-02T22:33:43Z\r\ndate +%Y-%m-%dT%H:%M:%S%:z\r\n2018-10-02T15:34:05-07:00\r\n"""
2567,222456157,"b'Do you mean adding the line to the ""if (isPR)"" conditional:\r\n\r\n            if (isPR) {\r\n                TriggerBuilder builder = TriggerBuilder.triggerOnPullRequest()\r\n                builder.setGithubContext(""${os} ${arch} SDK Perf Tests"")\r\n                builder.triggerOnlyOnComment()\r\n                //Phrase is ""test Windows_NT x64 SDK Perf Tests""\r\n                builder.setCustomTriggerPhrase(""(?i).*test\\\\W+${os}\\\\W+${arch}\\\\W+sdk\\\\W+perf\\\\W+tests.*"")\r\n                builder.triggerForBranch(branch)\r\n                builder.emitTrigger(newJob)\r\n            }\r\n            else {\r\n                TriggerBuilder builder = TriggerBuilder.triggerOnCommit()\r\n                builder.emitTrigger(newJob)\r\n                Utilities.addPeriodicTrigger(newJob, ""@daily"", true)\r\n            }'"
2567,222466500,b'Done...'
2567,222466520,b'Done...'
2686,236404888,b'@dsplaisted \r\n@tmat \r\nThe SDK repo [master] and Arcade does not seem to support running x86 tests - at least not with ease.'
2696,236895113,b'Fixed...'
2788,245356348,"b'@livarcocc \r\nThis netcoreapp2.0 project already exists @ https://github.com/dotnet/BuildPerformanceTestAssets/tree/master/PerformanceTestProjects/WebLarge\r\n\r\nIt would be more straight-forward to make a \'3.0\' copy at the BuildPerformanceTestAssets repo - but that would result in a double local copy when we pull it down to run tests.\r\n\r\nAn alternative method would be to string replace ""netcoreapp2.0"" -> ""netcoreapp3.0"" in the project file.\r\n'"
3167,277769159,"b""About 1 hour 15 minutes - I'll shorten it up."""
3539,321393482,b'```suggestion\r\n        public ITaskItem[] ReadyToRunAssembliesToReference => _r2rReferences.ToArray();\r\n```'
3539,321393732,b'This should fix the failing tests. Running tests on my dev box now...'
3634,324286336,"b'The target that fails first appears to be: ""PrepareForPublish""; can we trigger the check before both?\r\nReferring to the test: Microsoft.NET.Build.Tests.GivenThatWeWantToPublishACppCliProject.When_not_referenced_by_csharp_project_it_fails_to_publish'"
3689,329746531,"b'Why are these the only 3 \'BeforeTargets\':\r\n\r\n1. _CheckForInvalidConfigurationAndPlatform\r\n2. Restore\r\n3. CollectPackageReferences\r\n\r\nI would think there would be many more - ""Build"" for example.'"
14338,518462067,b'Typo'
12405,452488572,"b'```suggestion\r\n-TsaBugAreaPath ""DevDiv\\NET Tools\\CLI""\r\n```'"
2545,219336430,b'Please update the documentation for this function.'
2545,219337273,b'What is our localization story for this code base? Exception messages are normally localized.'
2545,219338255,"b'Standard practice has been to put all P/Invokes and associated code in a private sealed class. It then allows use of the `nameof` operator and scopes functions properly. Unsure how important that is in this code base.\r\n\r\n```\r\nprivate sealed class Kernel32\r\n{\r\n        [DllImport(nameof(Kernel32), SetLastError=true)]\r\n        private static extern IntPtr BeginUpdateResource(string pFileName,\r\n                                                         [MarshalAs(UnmanagedType.Bool)]bool bDeleteExistingResources);\r\n} \r\n```'"
2814,247298783,b'All source files should have a banner I believe.'
2814,247298880,b'Document origin of these values.'
2814,247299034,b'`.cslidmap`? Is this typo other places as well?'
2814,249163519,"b"">I can't think of any case for a user to have [ComVisible(true)] on a class and not specify an explicit GUID if the above statement still holds true.\r\n\r\nThat happens all the time and in fact is the normal case in .NET Framework. I think @jeffschwMSFT's point here is we want an explicit error or perhaps a warning about what happened because this requirement will be new to users. """
2814,260941557,"b'Extra spaces. Line is good, but it looks like you have a tab/spaces.'"
2994,261417747,b'>should we remove both assemblies and COM for .NET Standard?\r\n\r\n@etbyrd I can only speak for COM and .NET Standard. Making the call for regular assemblies is above my pay grade.\r\n\r\n@jeffschwMSFT can you provide some guidance on who could make the above decision?\r\n'
11240,406977116,b'Nit; extra `;`'
11805,432128296,b'We should have an aka.ms for the CSWinRT tool if we are promoting this so much.'
11805,432128717,b'~~supportd~~ -> supported'
11805,432129009,b'~~supportd~~ -> supported'
11805,432129074,b'~~supportd~~ -> supported'
11805,432129415,b'Verify all messages for this spelling mistake.'
11805,432130145,b'Nit: extra line'
11805,432130280,b'Nit: extra line.'
11805,432130944,b'Should we make this future proof: `It_fails_from_referencing_winmds_for_net5_0_or_greater`? Previous test as well.'
12628,462773759,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462773939,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462774111,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462774195,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462774276,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462774395,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462774476,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462774567,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462774647,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462774786,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462774866,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462774988,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462775087,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462775334,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462775425,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462775499,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462775588,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462775657,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462775744,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462775830,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462775928,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462776028,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462776104,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462776181,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462776311,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462776420,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462776492,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump\r\n```'
12628,462833813,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462833881,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462833936,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834010,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834066,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834152,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834236,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834316,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834376,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834435,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834491,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834586,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834690,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834809,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834850,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462834956,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462835013,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462835165,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462835245,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462835319,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462835367,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462835425,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462835471,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462835545,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462835579,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462835658,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12628,462835722,b'```suggestion\r\nThe tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump \r\n```'
12865,468538359,"b""`csharp_new_line_within_query_expression_clauses` isn't a valid option.\r\n\r\nhttps://github.com/dotnet/roslyn/blob/a4329104e42cbda2d602068a4a56953a91b3327d/src/VisualStudio/Core/Test/Options/CSharpEditorConfigGeneratorTests.vb#L146"""
12865,468539351,b'The vbproj was missing here.'
12865,468540227,b'This will ensure the file header template exists in all files.\r\n\r\n```suggestion\r\nfile_header_template = Copyright (c) .NET Foundation and contributors. All rights reserved.\\nLicensed under the MIT license. See LICENSE file in the project root for full license information.\\n\r\n```'
12865,468541522,b'I copied the editorconfig exactly the same from dotnet/runtime.\r\nShould I use utf-8-bom here instead? and probably give dotnet/runtime a PR too?\r\n\r\ncc: @sharwell'
12867,468754457,"b""After a second review, I even think it's not recommended to use ConfigureAwait(false) here.\r\nThanks for review, I'll revert it."""
12865,468755947,"b'What kind of problems do this introduce?\r\n\r\n@wli3, Are you okay if there will start to be differences than dotnet/runtime?'"
12865,468756392,b'@sharwell Will this require a bulk PR like the one you did in dotnet/docs a short time ago?'
12865,468760854,"b""I also just noticed it's not set for .cs and .vb files. The charset should include these extensions right?"""
12865,468761676,"b""If a forgotten file extension isn't included in .editorconfig, it may use indent_size = 4 by mistake. I think it makes more sense to move this option to .cs and .vb files only.\r\n\r\nFor example, the .editorconfig existed before this PR didn't include yml extensions. So, it will use 4 spaces by default, where it should use only 2.\r\n\r\nIt's more robust to set it only to cs and vb."""
12865,468769527,"b""These are really interesting scenarios that I never thought of.\r\n\r\nI agree that this option should be removed, but I'll wait for @wli3"""
12865,468773011,"b""I actually often use notepad++ for very small changes as it's very light and fast :smile:\r\nI'd leave this up to @wli3 to decide."""
12880,469012861,b'```suggestion\r\n## Run tests in command line\r\n\r\n```'
12880,469013017,b'```suggestion\r\n\r\n## A simple test\r\n```'
12865,469065521,b'```suggestion\r\n```'
2994,261383863,"b'These properties control the available tabs in the reference manager that is opened from the dependencies node context menu -> ""Add Reference""\r\n<img width=""590"" alt=""refmang"" src=""https://user-images.githubusercontent.com/36282608/53598528-def16180-3b59-11e9-8802-0c93d392974b.PNG"">\r\n\r\n\r\n'"
2994,261394994,"b""I'm not sure - @Pilchie @AaronRobinsonMSFT  should we remove both assemblies and COM for .NET Standard?"""
3079,272677533,"b'ok, how about just ""PublishItemsOutputGroup""?'"
3079,272762263,b'Fixed'
3079,272762309,"b'Ok, I changed it to just ""Fact""'"
3079,272762331,b'Fixed'
3079,272762446,"b'Thanks for letting me know, looks much cleaner now'"
3079,272763052,b'Fixed'
3079,272779846,"b'Got it, fixed'"
3141,276853118,"b""I've updated it to use PublishDepsFilePath instead of ProjectDepsFilePath if PublishDepsFilePath is set.  However, I don't think making this output group depend on the target that calculates PublishDepsFilePath (GeneratePublishDependencyFile) since this output group will be used for design time builds.  In fact, making that change results in the design time build failing and this output group being empty."""
3141,276861643,b'updated'
3141,276875611,"b""That doesn't work, since there's never any actual publish operation that creates the publish dir and it's contents.\r\n\r\nI think my original change is correct, I've reverted the rest.  Don't think about this output group as the items that _were_ generated after a publish, think about it as the items that _would_ be collected by a publish operation.  In practice just using ProjectDepsFilePath works perfectly."""
3141,277042254,"b'The main problem with that line is that proposed file path:\r\n\r\nInclude=""$(PublishDir)$(ProjectDepsFileName)""\r\n\r\nThe publish dir isn\'t created in this case, so that path doesn\'t work.  Using ProjectDepsFilePath works, as it\'s set to a path like ""WpfApp4\\WpfApp4\\bin\\x86\\Debug\\netcoreapp3.0\\win-x86\\WpfApp4.deps.json""\r\n\r\nHowever, the condition part of your suggestion makes sense, I\'ll try it out.'"
3141,277063488,"b""With this change this output group contains the output of ComputeFilesToPublish + the deps.json file (when necessary).  The primary use case is VS installer projects, adding the contents of this output group to an installer project will give it all files necessary to run the app.  We can't actually run the entire publishing operation because installer projects have no knowledge of the publishing profile.  For this reason the self contained .net core 3 scenario requires specifying the RID directly in the project file (this is something we may look into improving later).\r\n\r\nI added your suggested condition to handle the case where the deps file isn't needed."""
3141,277106345,"b""I see the publish=false issue you're talking about.  It's true that if this is set on a package reference my installer will have the dependency listed in the deps.json file but the actual assembly won't be there.  Are you fairly confident that this difference between the deps files will go away for 3.0?\r\n\r\nPeter, I'm open to renaming this output group if you think PublishItems is misleading."""
3141,277456485,"b'@peterhuene - Thanks Peter, please sign off and merge this PR for me when you have a chance'"
3240,287116214,"b""Yes, this is a well established pattern.  CPS looks for this property in it's implementation of IVsOutputGroup2.get_KeyOutput.\r\n\r\nCan you elaborate on the first part of that comment?  This is trying to set the metadata IsKeyOutput to true when the item's full path is equal to the value of the AppHostIntermediatePath property.  How exactly would you change it?"""
3240,287128053,"b""I've made this change and agree that it reads much better this way.  Thanks to you both."""
3394,301226759,b'Fixed'
10593,374429192,b'The bundled version of the exe is never added to the ResolvedFileToPublish (or any) item group.  The non-bundled version that is in the item group will now get intentionally excluded in the single file case and the bundled version will be included instead.'
10600,375012525,b'I intentionally am putting it in a separate target so that the desktop bridge (wapproj) targets can consume it without using PublishItemsOutputGroup.'
10600,375575042,"b""PublishItemsOutputGroup is only used by the VS Installer Projects extension (https://marketplace.visualstudio.com/items?itemName=visualstudioclient.MicrosoftVisualStudio2017InstallerProjects), which only runs inside Visual Studio on the Windows platform, so this attribute is appropriate.  I've changed it to include CoreMSBuild as well."""
10907,395347240,"b""Good point, I can just verify the build succeeds without the publish dir being created.  Updated.\r\n\r\nI also see what you mean with GetValuesCommand.  I didn't know it existed when I first wrote these tests so I added the copy files targets in order to verify the contents of the output groups.  I'll leave this as is for now in this release branch change, but will refactor to use this next time these are updated."""
10907,395347563,b'The SingleFile property in the first version was actually irrelevant to what this test is verifying.  I removed it.'
11024,400395040,"b'Thanks, I updated the comment'"
11060,401948805,b'Fixed'
12130,444552570,"b""@swaroop-sridhar  This is for the wapproj scenario, the wapproj targets use ComputeFilesToPublish, which depends on GenerateSingleFileBundle.\r\n\r\nIf you don't want me to add this check here how about I just add PrepareForPublish to the ComputeFilesToPublish depends on list? (right above GenerateSingleFileBundle) """
12130,444573965,"b'Sounds good, updated'"
12130,444584089,b'Done'
13208,483889396,"b'Using ProjectDepsFilePath will be correct in the default new project scenario, but there are scenarios where a second publish specific deps file is created and you\'ll need to use that.  To reproduce this issue, create a new WPF .NET Core app, add a Nuget reference to ""Microsoft.EntityFrameworkCore.Tools"" and then build and run your app.  The app will likely fail to run, and in event viewer you\'ll see the reason is that there was a dependency that isn\'t found.\r\n\r\nFortunately there\'s already a property that tells you which deps file to use, and I just fixed this exact issue for wapproj so you can follow this example: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/270214\r\n\r\nBasically this will need to be changed to:\r\n\r\n```xml\r\n<ProjectDepsFilesForClickOnce Condition=""\'$(_UseBuildDependencyFile)\' == \'true\'"" Include=""$(ProjectDepsFilePath)""/>\r\n<ProjectDepsFilesForClickOnce Condition=""\'$(_UseBuildDependencyFile)\' != \'true\'"" Include=""$(PublishDepsFilePath)""/>\r\n```\r\n\r\nAnd you may also need to depend on target _ComputeUseBuildDependencyFile'"
13507,487251243,b'From this test seems it is producing `7.0` by default'
3305,291315847,b'Definitely would like better naming suggestions.'
3305,291699094,"b""Making the project to copy nuget references by default when it opts in to being a 'component' sounds reasonable to me. Would that just be through `CopyLocalLockFileAssemblies`?"""
3305,291704630,"b'The first name I had was `BuildAsComponent`, but that seemed even less consistent with other known properties.\r\n\r\nMaybe another option could be to make the property indicate something like `ComponentType` and have different known values for basic component / plugin / com server?'"
3305,293024109,b'@KathleenDollard @richlander I would appreciate any help you could provide on naming.'
3305,296349317,"b'Per offline discussion, will be changing:\r\n`IsComponent` -> `EnableDynamicLoading`\r\n`UseComHost` -> `EnableComHosting`'"
14379,521041389,"b""I don't see `help option` for all the `dotnet nuget` commands. Am I missing anything?"""
14379,521099200,b'```suggestion\r\nvar input = complete.ValueForArgument<string>(CompleteCommandParser.PathArgument) ?? string.Empty;\r\n```'
14379,521718175,"b""The current `dotnet add package` command doesn't have `--diagnostics` option. No references to this option in NuGet side [implementation](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.CommandLine.XPlat/Commands/PackageReferenceCommands/AddPackageReferenceCommand.cs) for this command. I see that this is one of the common options. Is this something new that we should support?"""
14379,521725216,"b""The current `dotnet list package` command doesn't have `--diagnostics` option. No references to this option in NuGet side [implementation](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.CommandLine.XPlat/Commands/PackageReferenceCommands/ListPackage/ListPackageCommand.cs) for this command. I see that this is one of the common options. Is this something new that we should support?"""
14647,528228128,b'Can we set `DisableTransitiveFrameworkReferences` property to `false` if we are not interested in `TransitiveFrameworkReference`? I am not sure of the side effects though :)\r\n\r\nhttps://github.com/dotnet/sdk/blob/67d902bf9382641e63f993da916784c6a268b553/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs#L91'
12933,471670256,"b'minor: seeing how this is _readonly_ & gets instantiated in a .ctor, why is it a Lazy object? '"
12933,471683893,"b'minor, inconsistent spacing of ```OptionalSdkTemplatePackageInfo``` .ctor params'"
12933,471688209,"b'if either param is null, the result = unhandled exception.  Is this by design?'"
12933,471696089,b'minor: this if\\else could be simplified'
12933,471704169,"b""minor: inconsistent state assignment verification.  In this .ctor, state is verified & exceptions thrown if needed.  In other class' .ctors, potentially bad state is allowed to be set; where exception would be thrown when such state is referenced. Why verify here and not elsewhere?"""
12933,471705532,b'minor: consider overriding ```ToString``` for POCOs '
12933,471707536,b'minor: inconsistent use of ```var``` vs. explicit type declarations. '
11190,421442026,"b'`+=` isn\'t safe to use if `Tls12` flag is already set. I guess the correct way to fix this is to use ""binary or"" `-bor`.'"

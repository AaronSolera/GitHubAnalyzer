pull_no,comment_no,comment_body
4,9314371,"b""I think we should leave Include out since we aren't planning to have it around to start with.\n"""
4,9314727,"b'Assuming MusicStore currently depends on it, I think we can leave it in until we figure out what to replace it with. \n'"
5,9470137,"b""Is this the root of the universe? I ask because you're injecting the  IServiceProvider instead of the individual dependencies.\n"""
5,9470346,b'tabs! No tabs!\n'
5,9470365,"b""You don't need version numbers for project references.\n"""
5,9471184,b'Is this unimplemented future magic or a ReSharper thing?\n'
5,9472126,"b'Yes, but it is WIP and so will likely change.\n'"
5,9472172,b'This is FxCop magic to denote an arg validation method.\n'
5,9472221,b'My bad - My VS keeps resetting my settings!\n'
5,9472269,"b""Not following, this is a package ref isn't it?\n"""
5,9472525,b'This is a project reference right?\n'
5,9472547,"b'My bad, commented on the wrong one. Look below \n'"
5,9472622,b'Will fix.\n'
3,9277814,b'Should be EntityType; entities are instances of entity types.\n'
3,9278054,b'Not sure this distinction actually matters here:\n- This type is in Metadata.\n- Would we have another type called Entity representing an instance?\n'
3,9278069,"b""I'm glad semantics like this are built in.\n"""
3,9278115,"b'Classy, reminds me of JavaScript\n'"
3,9278217,"b""What's with these R# things here? I don't think we have any intention of using these in our new code base.\n"""
3,9278519,b'I wish there was a way to denote API is only for testing\n'
3,9278571,b'Missing checks\n'
3,9278832,"b""FYI we'll end up having a common DotSetting file across all repos, but this is probably fine for now.\n"""
3,9278964,"b""Remove mentions of VB. And no need to mention C# because that's all we should show. I know this will end up for desktop scenarios as well, but we can keep the message clean.\n"""
3,9279049,"b""Hmm what's this T4 file about? Is this the only we to do resources?\n"""
3,9279230,"b""I want to get rid of these utility classes for two reasons:\n1. They shouldn't be public.\n2. The call stacks are incorrect. I know we discussed this back in EF6, but we need to switch to a consistent model for the new project.\n"""
3,9279282,b'Is this needed?\n'
3,9279311,"b""These extensions shouldn't be public.\n"""
3,9279352,"b'Per other comment, we are not planning to put these annotations in our code.\n'"
3,9279374,b'Does this need to be public?\n'
3,9279381,"b'Not sure we need these extension methods. They just make code more difficult to read because these extensions are not familiar. Just like we don\'t use ""var"" because it adds mystery to code.\n'"
3,9279385,"b""These are harmless code annotations that allow R# to do a better analysis of our surface. In practice, it means that R# users get squigglies/warnings etc. if they make a mistake. I think they add value but if you don't think we would ever consider using them then I will remove.\n"""
3,9279410,b'Think that one can be removed.\n'
3,9279431,"b""These extensions shouldn't be public.\n"""
3,9279540,b'Will do.\n'
3,9279844,b'This is how we have traditionally done strongly typed resources with intellisense. We have found it valuable but could easily use something else.\n'
3,9279911,"b""Traditionally it's done with VS's ResXSingleFileGenerator. Of course, I have no idea how that will work in the new build system... so I'm not sure what realistic options we have right now that will work both in VS and from command line builds (such as CI).\n"""
3,9280126,"b""What is the consistent model? I can't actually find any arg validation in Logging/DI etc. One concern we have is that if arg. validation is ugly or hard, then it will be more likely to be missed.\n"""
3,9280146,b'This is how we agreed to do internal pre-conditions.\n'
3,9280205,b'These are intended to be shared across all of the EF assemblies. \n'
3,9280222,b'This is intended to be shared across all of the EF assemblies. \n'
3,9280338,b'We use these primarily to enforce localization consistency. Disagree that var adds mystery to the code. We use var exclusively:\n- It is refactor friendly\n- It promotes better variable names\n- You can easily determine type by holding mouse over var.\n'
3,9280342,b'These are intended to be shared across all of the EF assemblies. \n'
3,9280421,"b""My initial thought was also EntityType, but I'm willing to try without the type for now and see how it ends up feeling.\n"""
3,9280489,"b""I think that there is a lot of value in having tools like ReSharper help create correct, solid code in a productive way.. I don't really see the value of forbidding this kind of thing.\n"""
3,9280595,b'It seems to me that as a team/org we should figure out which patterns/conventions help produce high quality code in the most productive and maintainable manner. These patterns have worked very well for us in that respect so it seems to me that they should at least be considered.\n'
3,9280670,"b'One of my college professors always insisted on using the proper terminologies, so anything but entity type just feels wrong to me. I also got a little confused in the Model class at first thinking it was the change tracker (since it was adding entities and not entity types).\n'"
3,9280673,b'Totally agree with Andrew. Using var has worked very well for us and many others inside and outside Microsoft.\n'
3,9280711,b'One of the advantages of our approach over ResXSingleFileGenerator is that we pull out string format parameters and make them args to the helper method. \n'
3,9280741,b'If necessary we could look at using visible internals.\n'
3,9280804,"b'But the current fluent api also doesn\'t feel wrong since I read `mb.Entity<Person>()` as ""Entities of type Person...""\n'"
3,9280919,"b'When we moved out of the DevDiv branches, this is the solution our team came up with to replace ResXSingleFileGenerator.\n'"
3,9280955,b'These utilities are just a different syntax for something that is already super familiar to all .NET devs. There is argument validation to do in a method and it is only that method that should throw exceptions.\n'
3,9280976,b'Not sure who agreed to this - we need to have consistent standards on this and I have never seen this before.\n'
3,9281144,"b""Hmm very interesting. I remember that from back in the .NET 1.0 days. I guess we have a broader work item to figure out how to do resources in general. I'll add this to the engineering discussion notes.\n"""
3,9281148,"b'Or linked files, copy/paste :-/\n'"
3,9281176,b'Use InternalsVisibleTo. They should not be exposed as public APIs to customers.\n'
3,9281185,b'I believe that there needs to be a wider discussion on this.\n'
3,9281294,b'It involves adding public API surface of another product into our code base.\n'
3,9281323,b'I meant the EF6 discussion you mention above.\n'
3,9281394,"b'@bricelam Are you arguing that it is not ""mathematically correct""? :-P\n'"
3,9281595,"b'Yes, but I was very careful to avoid that phrase. ;)\n'"
3,9281614,"b'No, these are specifically designed to be added to the code base. R# even has a button for it :-)\n'"
3,9281730,b'Will change.\n'
3,9281748,"b""Per Eilon's directive, will use IVT.\n"""
7,9644333,b'Async only?\n'
7,9644359,b'Could this namespace be confusing with regard to ASP.NET Identity providers?\n'
7,9644393,"b'Curious: is this the recommended way to do sequential GUIDs? Which ""part"" of the GUID gets incremented?\n'"
7,9647048,b'See here: http://sqlblog.com/blogs/alberto_ferrari/archive/2007/08/31/how-are-guids-sorted-by-sql-server.aspx\n'
7,9648160,"b""I had the same impression. If we can find something in the lines of auto-generated or key generation that doesn't sound too artificial I would go with that. \n"""
7,9648372,"b'It is a bit unfortunate that we have to do the async dance (i.e. allocating a Task, possibly having the compiler setup a state machine) even for things that will end up happening in-memory. On the other hand I see the benefit of keeping the contract simple for these low level components and if we are going to have only one signature it should return a Task. Seems fine for now, just not sure it is the right compromise. \n'"
7,9648936,b'Agree it seem fine for now.\n'
7,9649775,b'I was curious so ran some numbers. Using sync I was able to generate 100000 guids in ~50ms whereas the async version took ~100ms. \n'
7,9649974,"b'Just a suggestion, but it might be nice to make this a [Theory] test and pass in the fluent API type as a parameter. That way the failures will appear more specific in the unit test runner. Or not? :question: \n'"
7,9650181,"b'That is great data, and it seems to support that this is fine for now (and that ""for now"" may mean a long time :) )\n'"
7,9650380,b'I think that the principle that comes out of this is that we should do async only unless:\n- There is a usability/experience reason for doing sync as well (e.g. LINQ)\n- Perf is measurably an issue\n\nThis means that for most low-level components we can probably do async only.\n'
7,9650459,"b""Nice idea, but theories are part of xunit.extensions, which we don't have a dependency on (yet).\n"""
7,9650490,b'+1\n'
7,9650570,b'Sounds good.\n'
7,9650644,"b""Ah, so it's a good idea, in theory :smile: Any reason not to use xunit.extensions? Will we need it soon anyway? I know in WSR it's used extremely extensively - not sure about EF.\n"""
7,9651711,b'Will try it out :smile: \n'
7,9736754,"b'@Eilon, going to hold off on this as Brice is making good progress with PCL xunit and it will be version 2.0, which has the theory stuff in-the-box.\n'"
7,9739204,"b""Sounds awesome, thanks! @bricelam can't wait to see what you cook up!\n"""
9,9756946,b'Nit: Given that little endian is going to be the most common maybe do the reverse when big endian instead?\n'
9,9757287,b'Nevermind--misread the code.\n'
13,9807412,b'This will silently succeed if number of elements in names and values is different.\n'
13,9807697,b'If we expect lots of instances of this class this may be too much wrapping that adds unnecessary memory overhead. The lazy creation can be done with a static method.\n'
13,9807721,b'Is there a reason why you prefer returning IEnumerable<IAnnotation> instead of CompiledAnnotationsBase : IEnumerable<IAnnotation>?\n'
13,9807826,"b""I can add a check, but the intention is that this is only called from Roslyn generated code so I'm trying to avoid doing anything unnecessary. I'm not even sure that the null checks should be there.\n"""
13,9807861,"b""We covered this at the design meeting I think. I prototyped a static version and it does have slightly better memory characteristics, but it doesn't allow for garbage collection later so it seemed this was the better option.\n"""
13,9807879,b'Can Enumerable.Empty<TResult> be used here?\n'
13,9807908,"b""This doesn't seem to provide any value at the moment.\n"""
13,9807933,"b""I'm not sure I really follow the question, but this property is ultimately the implementation of the Annotations property on IEntityType and so must have the same signature.\n"""
13,9808009,b'Will do.\n'
13,9808023,"b""Which bit doesn't provide value?\n"""
13,9808242,b'Fine to avoid null checks here.\n'
13,9808324,b'Any value in a separate namespace either for the interfaces or impls?\n'
13,9808419,b'I would like to understand why the Immutable collections are needed here. I did not look at how they are implemented but I am guessing Add/Remove methods come with overhead.\n'
13,9808428,"b""I can remove them, but they will get auto-generated when the Roslyn null-check stuff gets checked in. That's really why I put them in--they will ultimately be there unless we do something special to avoid putting them on this surface. (We could use [CanBeNull] but that's not really true.)\n"""
13,9808481,"b""I considered it and I'm open to it, but didn't do it since both the interfaces and normal implementations will be used by application code and at the moment there aren't that many classes here. But like I said, I'm open to it. We always end up changing namespaces during API review anyway. :-)\n"""
13,9808492,b'What is the advantage of coupling these two things?\n'
13,9808517,b'Which methods are hitting this?\n'
13,9808527,"b'@anpete @ajcvickers yeah we\'ll no doubt do full API reviews of everything in the project eventually anyway. It\'s often good to put the most common types in the ""main"" namespace and put stuff that only ""extenders"" or ""customizers"" need to use in sub-namespaces. MVC is a great example of how _not_ to do it :smile: and Web API is a great example of a much better way to do it :smile: \n'"
13,9808535,"b""Andrew may have more context, but this is basically a way of doing thread-safe collections where all the overhead is in building the collections and none for runtime access to the collections. It's a pattern being used more and more and is favored in newer BCL surfaces over thread-safe collections with locks like ConcurrentDictionaary.\n"""
13,9808580,"b""Do you mean coupling name and storage name? If so, it's the same pattern that was in MetadataBase where storage name is always the same as name unless storage name is set explicitly. As discussed last week this got removed from the base class because it doesn't really fit for Model, but I still wanted to reuse the logic for other places that need it--tables and properties for now.\n"""
13,9808610,"b'The methods in the ""Compiled"" classes. I could make them virtual, but given that the intention is for them to be used by fast, generated code, and already form an interface implementation which is good for test doubles, it made sense to keep them non-virtual and avoid the indirection cost. I don\'t feel strongly about this though.\n'"
13,9808650,b'Depends how the Roslyn null-check stuff works :-)\n'
13,9808711,"b'Yes, we are using them for lock-free concurrency, which we may yet not need - depends on what we decide re model mutability. See here for the impl/perf info: http://blogs.msdn.com/b/bclteam/archive/2012/12/18/preview-of-immutable-collections-released-on-nuget.aspx\n'"
13,9808909,"b""This is a tighter coupling in that it's an explicit new type. Is this just for DRY? If so I would rather this just be in-lined because I don't think this represents a real concept in metadata.\n"""
13,9808914,"b""Okay. I'll remove them. If they get added back automatically it's unlikely to matter.\n"""
13,9808921,b'Makes sense. I will exclude them when/if I fix the other issue :smile: \n'
13,9809013,"b""It's an internal class and maybe the class name could be better. Either way, I have no problem inlining.\n"""
13,9809470,b':thumbsup: \n:shipit: \n'
13,9835951,b'... but the class does not implement IEntityType. Am I missing something?\n'
13,9836025,b'It is used as a base type to provide part of the implementation of IEntityType.\n'
13,9836955,"b'I am not sure I understand what ""doesn\'t allow for garbage collection"". \nOn 64bit platforms there are 24 bytes overhead for each LazyMetadataRef instance, which adds up to megabytes if there are lots of instances. I guess it depends on how lean we want this to be. Also it can be changed later if memory turns to be an issue.\n'"
13,9837187,b'I think I need some background on what these classes are for. At first glance a property with a getter that returns null all the time seems useless.\n'
13,9838201,"b""I understand their general purpose but I don't know why we need to use them in EntityType. Usually we should start with the simplest and fastest collections possible and then add thread safety where needed. Is the plan to make the metadata model thread safe in any scenario? I doubt that that is needed.\n"""
13,9838714,b'I guess I am missing information about how this is used.\n'
13,9838966,"b""Maybe I'm misunderstanding what you mean by using statics. I was referring to having a class with static properties such that the first time the class is used the static properties will be initialized. This works, but once those static properties are initialized they remain initialized for the lifetime of the app domain/equivalent. This means that once you have loaded metadata for property A then that metadata will remain loaded and can never be garbage collected. This might be okay for some scenarios, but other scenarios can be envisioned where it is not okay. When we discussed this in the design meeting and elsewhere the general impression was that the improvement in memory usage was not good enough to forgo garbage collection of metadata that is no longer being used. But maybe I am missing what you suggestion for statics really is?\n"""
13,9839038,"b""It is a base class implementation of the Annotations property and annotations indexer of IProperty for properties that don't have any annotations.\n"""
13,9839158,"b""My understanding is that some limited form of mutability is going to be required. However, if we don't need it now I'm okay with using a different implementation for now. @anpete did this as an initial implementation but it could be changed if we can do it better--I suggest a team room discussion.\n"""
13,9840915,"b'If we just gen classes that implement the interfaces, then we can perfectly tune object creation. Maybe another reason to not have any framework types for compiled models?\n'"
13,9841929,"b'Possibly, but there is also a concern about the increase in size of the application assembly. I think these are all things that we can change quite easily later. The important thing for now is having the metadata defined in a way that it can be implemented in the application assembly in some form. That form can be tuned to whatever makes sense as we develop dependencies on it.\n'"
13,9877998,"b'I meant static method, not class. Something like this:\n\npublic T Property { get { return LazyInitializer.EnsureInitialized(ref _field); } }\n'"
13,9879391,b'To be more precise:\nprivate TAnnotations _annotations;\nprotected TAnnotations LazyAnnotations { get { return LazyInitializer.EnsureInitialized(ref _annotations); } }\n'
13,9885894,"b'Ah, I see. Yes, that could work.\n'"
15,9888369,b'parameterName checks should be compiled out in Release build ;-) (I love my bikeshed!)\n'
15,9888449,b'There is no Release build. :tongue: \n'
17,9916354,"b'I think there is an overload of EnsureInitialized that takes just ""ref T target"" and uses the type\'s default constructor, which may be a tiny bit faster, depending on what the compiler does with ""() => new T()"".\n'"
23,10002025,b'Would we also need a constructor where we pass a model but not an identity generator?\n'
23,10002359,b'Do we ever plan to have value types as entities?\n'
23,10002774,"b""Suggestion: Keep it simple if this is the only check we'll be doing here. IOE seems fine.\n"""
23,10003034,"b""I know we don't have proper tracing yet, but once we do: Suggestion - trace where the entry is not found in the change tracker which could be helpful during dev.\n"""
23,10003253,b'Will we need this be virtual for testing purposes?\n'
23,10005146,b'Not currently.\n'
23,10005217,"b""I think that it is unlikely, but I don't think we have explicitly disabled this yet.\n"""
23,10005226,b'I will make it virtual.\n'
23,10005286,"b'It is the only check now, but there will likely be more checks and also this code could end up being called from other paths. In the current stack we always just throw IOE, which is sometimes limiting in handling of specific error conditions. This could be a case where a more specific exception would allow you to do some form of identity resolution and retry.\n'"
23,10005317,b'Sounds reasonable.\n'
23,10005521,"b'@muratg Presume you mean structs? If so, then I agree we likely don\'t want to do this. The problem is that it would make change tracking a lot harder because we would potentially need to worry about multiple ""copies"" of the object within a single UOW.\n'"
25,10051615,b'I think a delegate object is created each time this is called. That can probably be avoided if we want.\n'
29,10139476,b'Nice.\n'
29,10139561,b'Abstract activation as service? \n'
29,10139614,"b'Yeah, that could be good. Not going to do it right now.\n'"
30,10172761,"b'This is cool. However, I think you should split it out into a separate data structure so that the bit twiddling stuff is nicely encapsulated, testable etc.\n'"
30,10173485,"b""Agreed. I'll look into it.\n"""
31,10182202,b'We should try to get consistent code cleanup across machines.\n'
31,10185283,"b""@ajcvickers That's what the change to Data.sln.DotSettings in this PR is for (hopefully).\n"""
34,10222005,"b""I did some quite extensive refactoring of this class in my change which included making this public and changing the name. I don't see anything here that conflicts, so this is just an FYI for the merge depending on who commits first.\n"""
35,10223852,b'Eschew checks when no impl.\n'
35,10223881,b'Nest this class?\n'
35,10224067,b'Would impl of SetOrAdd be different here? \n'
35,10224177,b'Why this vs. an optional list of principal properties on the FK? The advantage of the list is that in the common case it could just be a delegation to principal.key.\n'
35,10224981,b'Okay\n'
35,10225007,b'Considered doing so--will take another look.\n'
35,10225025,"b'Note sure what you mean by ""here""?\n'"
35,10225062,"b'Yeah, could do it that way instead.\n'"
35,10225099,"b'Sorry, meant in the compiled model impl. I think there is some benefit to keeping these interfaces purely metadata related.\n'"
35,10225188,"b""This is really just a placeholder. I'm planning to look at the whole area of storing/getting data soon, especially as it relates to both shadow state and the ability to use non-default strategies such as collections that are not simply ICollection.\n"""
35,10231210,b'Done\n'
33,10220135,b'Consider splitting these out into a separate class for SQL gen.\n'
33,10220291,b'Yeah. I thought about this since it got big. I could also make it public virtual instead of protected virtual when it is separated...\n'
33,10220375,b'Use Check for pre-conditions on public surface (stop gap until the automation is available).\n'
33,10229788,b'Will do.\n'
38,10392880,b'Should add a break if count ever reaches 2? No point checking any further? Similarly in CountAsync() below.\n'
38,10393508,"b""Maybe add a test that GetDeclaredConstructor(new[] {typeof(int), typeof(int)}) does _not_ match i.e. it doesn't just check the first type but compares the sequence of types?\n"""
38,10393735,"b'Is this just to test that the InMemoryDataStore is _not_ changed if you don\'t save? I wasn\'t quite sure what it was for as it isn\'t referenced anywhere else - maybe worth adding a comment or just change the value to ""Change that will not be saved to store""?\n'"
38,10394006,"b""No, it's to check that the values saved are actual copies - Wouldn't be the case if we were storing the actual instances directly.\n"""
41,10442156,b'Can or cannot be null?\n'
42,10442624,"b'Consider adding a constructor per used operations, add/update/delete\n'"
41,10442672,b'Missing arg check?\n'
42,10442673,b'Consider caching on construction\n'
42,10442682,b'Will this be provider specific? (IOW will it ever be overridden?)\n'
41,10443156,"b'Ah, I see now it is an override.\n'"
41,10443622,b'Fixed.\n'
41,10443726,"b""This still needs a check call even though it doesn't need an attribute. (At least until the equivalent of the check call is done automatically.) I have added it.\n"""
42,10444012,"b""Don't know at the moment. For instance SqlServer allows just a new line to separate commands in a batch\n"""
42,10444166,b'I did consider it but there is a conflict due to parameters being of the same types so you cannot use overloads. As a result I would have to add the ModificationOperation flag as a parameter which is kind of redundant because can be inferred from values (agree that it could improve readability of the code).\n'
42,10444294,"b'I would have to add variable for something that is readily available - note that I just compare references to null so it is cheap to calculate, so I decided against it (it is also kind of related to the other comment where if we passed the kind of operation it would probably make sense to store it - otherwise it would only be used in asserts since this class is internal and it does not make sense to spend cycles on parameter validation in ret builds)\n'"
44,10455507,b'No documentation for this?\n'
44,10455562,b'No documentation for most things yet...\n'
44,10455612,b'Ok. For some reason I failed to notice that :)\n'
45,10481921,"b'So, if _table is null, then there will be an assert if an attempt is made to set it to some non-null value. Why is this?\n'"
45,10481949,b'Use Check.NotEmpty for strings.\n'
45,10482139,"b'Given that it is possible to create a column that is not associated with a table, how can we assert that the column.Table is non-null?\n'"
45,10482261,"b""I'm not a big fan of this pattern where the first column is passed to the constructor, but I'm not sure exactly how this is used. What is the rationale for this?\n"""
45,10482322,b'What makes this always true?\n'
45,10482336,b'Use Contract.Assert in K.\n'
45,10482394,b'We should be consistent about return type of RemoveX methods.\n'
45,10482485,"b""If I am reading this correctly, the caller can call remove on a column that is contained in the columns list, but then we will not remove it if it is the only column in the list. This seems very unintuitive to me. I get that it is useful for Remove calls to be no-op rather than error if the column doesn't exist, but if it does exist it feels like removing it should either succeed or be an error.\n"""
45,10482487,b'We should consider a design that is consistent with similar concepts in Data\\Metadata.\n'
45,10482632,b'What about the case where somebody adds the same column multiple times. Is just adding duplicates the correct behavior?\n'
45,10482728,b'See previous comment on calling Remove but not removing.\n'
45,10482782,"b""I don't mind very much, but I think we had decided to be consistent at least in the Data project on the way tests are named.\n"""
45,10483026,b'I think we should try to keep the DB model pretty simple at this stage. It is mostly just a vehicle for SQL gen.\n'
45,10483066,"b'Agreed, we are using underscores in Data.\n'"
45,10483816,"b'@ajcvickers The assert is supposed to prohibit re-setting _table to not-null if already not null, or re-setting to null if already null.\n@anpete Ok.\n'"
45,10485503,b'Theoretically it makes sense to prohibit the creation of a PrimaryKey using a column that is not assigned to a table. Without that restriction the validation of the column gets more complicated.\n'
45,10485660,b'As far as I understand a PrimaryKey does not make sense without at least one Column. One  way to model that is to have a constructor that requires the column.\n'
45,10485901,"b'I agree that removing the single column should throw exception instead, but was thinking to change that later, after I catch up on latest team conventions/decisions about exceptions.\n'"
45,10485981,"b'I was thinking about having a way to lookup columns, etc, but I did not do that yet for the same reason Andrew mentions. Can add later.\n'"
45,10486067,b'I did not add that test. Can change though.\n'
45,10486108,"b'Yeah, I missed that.\n'"
45,10486211,"b""The assert enforces that the columns added to the primary key are part of the same table? Isn't that correct?\n"""
45,10486295,"b'Returning bool seems to be the .NET pattern, unless you decided otherwise.\n'"
47,10544627,b'.ConfigureAwait(false)\n'
47,10545082,b'fixed.\n'
45,10549409,"b""I don't think we should use assertions as a way of doing validation of public surface. I'm okay with doing it for now to avoid writing validation code and exception messages that we may not need, but if this is the case can you put TODO: comments to indicate that we need to change this before shipping an RTM?\n"""
48,10546695,"b""Seems like too agressive YAGNI, especially because it doesn't save that much.\n"""
48,10546823,b'async?\n'
48,10546832,b'async?\n'
48,10546930,b'CreateSharedAsync\n'
48,10547003,b'Invert condition to remove goto\n'
48,10547109,b'CreateDatabaseIfNotExistsAsync\n'
48,10547234,b'same as above\n'
48,10547377,"b""Which bit? The T wasn't actually needed here.\n"""
48,10547393,b'Naming?\n'
48,10547396,b'Naming?\n'
48,10547406,b'Does this matter for privates?\n'
48,10547428,b'It could be needed elsewhere later with a different value for T\n'
48,10547435,"b'no, OpenAsync()\n'"
48,10547442,b'ExecuteReaderAsync()\n'
48,10547576,"b'for readability, not too important\n'"
48,10547696,"b'Oops, thanks, copy and paste goodness\n'"
48,10547743,b'Will do.\n'
48,10548039,b'You probably figure this out already but you will need to move the case that includes reader initialization into its own real async method in order to use await. Then you can return the task anyway (I did this in EF 6.1).\n'
48,10548097,"b""This reminds me we should discuss this in K engineering (for public surface it matters more and currently we aren't consistent).\n"""
45,10593315,"b'I will either add TODOs or remove these Asserts for now. \nI failed to explain the intent of this whole change. It was not intended to be final but rather something closer to what is needed for migrations.  Mainly I needed the container for tables (Database), an API to retrieve add/remove tables, columns that is closer to what we probably want than just a public List, which was the initial implementation. Then I wrote a unit test and made a copy/paste error and it took me a bit to realize that. The error could have been avoided if some basic validation existed, so I added a few asserts. The references to parents were useful in the initial MigrationOperation functionality that I prototyped, but after a couple of iterations they may not be needed.\n'"
49,10598433,"b'Because the input of GetPrincipal (entry, foreignKey) is also passed to DoFixup, maybe it is worth having a DoFixup(StateManager, ForeignKey, Entry) overload that includes the GetPrincipal call and the null check.\n'"
49,10599890,"b""Hopefully the compiler is smart enough to optimize this to something like:\n\nvar definition = Definition;\ndefinition.DependentPropertyIndexes.Select(i => _model.EntityTypes[definition.DependentIndex]);\n\nand avoid extra calls to virtual Definition and passing the struct through the stack multiple times.\n\nAnd hopefully Enumerable.ToArray in this case is optimized to not enumerate twice (for array length and then reference copy) or do unnecessary allocations (array re-sizing). \n\nPlus I don't know if the delegate passed to Select involves the creation of an object.\n\nThat is why in cases like this I prefer writing the old for loop and not have to worry about magic.\n"""
49,10600787,b'Should this be Empty.Annotations to avoid dependency on ImmutableList?\n'
49,10600802,b'Is EmptyArrays a better name?\n'
49,10601518,"b'Though it will involve a few more lines of code, from an OO perspective it may be conceptually better to inline these methods in each class instead of having the NoAnnotations class. At least theoretically annotations seem to be of secondary importance, so if the need arises to introduce a base class that encapsulates information of primary importance, the NoAnnotations class could stand in the way. \n'"
49,10613179,"b'Feels like the separation of concerns between the two methods is cleaner this way, although I guess to be consistent DoFixup should not be called if dependents is empty.\n'"
49,10613256,b'We can consider optimizing this some more when it gets closer to being more than proof-of-concept.\n'
49,10613311,"b""I'm not sure that there is a problem using ImmutableList here. What is the issue with the dependency?\n"""
49,10613385,"b""Possibly, but it's just a small internal helper class to avoid creating multiple constant values from having them in a generic class, so I don't think it matters that much. I used Empty because Empty.Navigations reads quite nicely.\n"""
49,10613417,"b""It could be refactored in several ways, but as of now I think it's fine like it is.\n"""
49,10618748,"b'There is no reason to use ImmutableList just for .Empty. It creates a dependency on  System.Collections.Immutable.dll that is not really needed here. Plus is inconsistent with other places where you uses Empty.Navigations, etc.\n'"
49,10621021,"b""I created the empty arrays because I needed empty arrays. In this case I need an empty IReadOnly list, which doesn't have to be an array, so I used BCL code rather than adding new code to our assembly,\n"""
51,10621178,b'TODO?\n'
51,10621883,"b'Yeah, will address.\n'"
50,10621254,b'Can you lift Create() outside of test and set loop?\n'
50,10627171,"b'Lifted. As discussed, this could mean that Create happens twice instead of once. In the common case (no contention) either way uses one Create call. But with it lifted there are no cases where we call Create over and over again in the loop. The most important point seems to be to keep the code in the loop fast so that there is less chance of interruption and repeated failures, so it is better do it outside the loop not so much to avoid extra objects being created, but to keep the code in the loop fast.\n'"
52,10630130,"b""stateEntry.Entity can be null if the EntityType is defined with only shadow state. But as far as I can tell the code doesn't use the entity anyway, so it looks like it could be okay to just remove this assert.\n"""
52,10630153,"b'This should use stateEntry.GetPropertyValue, but I think I already checked in the change so you should get it when you merge with my latest commit.\n'"
52,10630161,b'Likewise here.\n'
52,10630237,b'Will fix - I just moved this code from the CommandBatchPreparer and it was added before we had the GetPropertyValue on StateEntry\n'
52,10630245,"b'Nit: typo - should be ""..._separator_...""\n'"
52,10630294,b'fixed\n'
52,10630301,b'fixed\n'
52,10630306,b'done\n'
53,10633149,b'This should use First instead of Single.\n'
53,10663532,"b'I will add the target and inverse logic back in a form or another, removed them because the current implementation does not seem right.\n'"
53,10669259,b'upgrade_or_downgrade\n'
53,10712120,"b""I could be missing something, but are these the migration fluent APIs? They don't look like what we have now..\n"""
53,10712183,b'Delegate to up/down strategy impls instead of switching everywhere.\n'
53,10712320,b'This was based on the current impl. Fine to change it if there is a better way.\n'
53,10713109,"b""I'm not sure about this pattern, what if the object I want to work on isn't part of my model. I know we don't want to optimize for that scenario, but we should definitely still support it.\n"""
53,10722115,b'Will revert to using anonymous types as discussed.\n'
54,10719563,b'But _sets is LazyRef?\n'
53,10722200,"b'It is supported with this model, but will revert to the model in current EF.\n'"
56,10722797,"b'I was avoiding the use of ""shadow"" in the main public APIs because it doesn\'t appear to be a well-known term in the wider community. If you Bing for ""shadow state"" you don\'t get any hits that relate to database mapping.\n'"
56,10722988,"b""Do you think we will use the term as part of the EF domain language; or something else? I'm not sure there is anything better, so perhaps we should just commit (for now)...\n"""
56,10723282,"b""I'm okay with most naming choices we make for now. The term has been creeping in anyway so I think it's okay to use it for now. Whether we ultimately use it or not I think depends on whether or not there is another term for this concept that is more well-known and/or more understandable, and that's something I haven't really looked into. I was hoping you, Diego, Rowan, etc. would know. :-)\n"""
56,10723501,b'None that I know of. :smile: \n'
56,10727379,"b'I am not aware of a better term either. I think it is ok to adopt it provisionally and leave a TODO somewhere in case we do find something better. FWIW, perhaps it is easier to arrive to a term that describes the opposite concept...\n'"
57,10764828,b'I thought this was already the default behavior of .Equals() (and the == operator)\n'
57,10769951,b'You are right. Will remove StringExtensions.\n'
57,10772134,"b'@emilcicos, @bricelam Bear in mind that you still need .Ordinal as donuts for the FxCop.\n'"
57,10774010,"b'Probably we want a ForeignKey in the relational metadata, in which case we can use it here.\n'"
57,10774050,"b'True, was quick to change and forgot that.\n'"
60,10802181,"b'FYI - swapping to this overload of Read because Read(Type, IModel) on the base class just delegates to this one. So Read(IEntityType) used to throw NotImplementedException, but now both will work.\n'"
60,10802540,b'Be explicitly private.\n'
60,10802582,"b""Isn't Context already available on base class?\n"""
60,10802730,"b""Looks like there is a tabs/spaces issue here. Also, curious as to why so much is showing as changed here. Maybe it's all been tabified or vice versa?\n"""
60,10802800,b'Indeed it is... missed that one :)\n'
60,10802838,b'I try to make nested entity classes in tests private if possible. It avoids them showing up elsewhere and keeps them nicely contained in the test that uses them.\n'
60,10802893,"b""Done, swapped to 'private readonly'\n"""
60,10802985,"b'Changes to spaces. Yeah if you look at the full diff it shows as a bunch of delete/add. Not sure why, the other lines are all still spaces.\n'"
60,10803269,"b'Makes sense, done.\n'"
60,10803757,"b""Shouldn't this be an abstract property implemented in the derived class (and then the argument to the ctor would be removed)? Note that this class is already abstract.\n"""
60,10803812,"b""(note to myself) - BatchExecutor (or ExecuteAsync) needs to take the logger. At the moment we don't log anything.\n"""
60,10803964,"b""Discussed with @anpete and our thinking was that having it as a ctor param allows you to pass in a different implementation if you want (without having to derive from SqlServerDataStore). It's exposed in a ctor on SqlServerDataStore too.\n"""
60,10804231,"b""You could still take it as a param in the ctor of the derived class and return in the property without polluting the base class which always has to be inherited because it's abstract... (this makes testing easier - if I want to mock RelationalDataStore and I don't care about the SqlGenerator I would still have to create and pass a mock SqlGenerator with the current design whereas with an abstract property I would not have to do that). \n"""
60,10805384,"b""Makes sense, I'll do that.\n"""
69,10958928,b'Use TypeCode here instead of strings. \n'
69,10958975,"b'Even better, just use dynamic to dispatch to the strongly typed overloads below. \n'"
69,10958982,b'Any\n'
69,10959044,b'Not sure what DiffSource means here. I would consider creating a separate operation builder class instead.\n'
69,10961024,"b""Only types that implement IConvertible have GetTypeCode. DateTimeOffset for example is not one of them. Dynamic doesn't appear to work well with base methods. Switch on strings is optimized to do a lookup, similar to hashtable.\n"""
69,10961054,"b'I like Count more :), but ok.\n'"
69,10961064,"b""Agree that it is not the most suggestive name, but I'll have the same problem with naming the class, so any suggestions are welcome.\n"""
69,10962900,"b'Ok, using dynamic instead.\n'"
69,10962918,"b'I prefer to leave this as is because the rest of the code in the method is using indexers to get to columns, so using count is consistent with that style.\n'"
69,10962923,b'Added TODO to rename or move to different class.\n'
67,10939753,b'Are we only handling this for primary key?\n'
67,10940473,"b""We do it for any store generated property however the WHERE condition for the SELECT after INSERT only needs keys. If the key was store generated then we don't have the value/parameter for it and have to ask the provider for creating the condition. \n"""
67,10941517,b'Got it; makes sense.\n'
75,11086085,b'Do this in the front end.\n'
75,11086110,b'EntityStateExtensions.IsDirty?\n'
75,11086203,b'By that you mean in the context before we hit the store?\n'
75,11087339,b'I thought about making the batchExecutor null by default and instantiating it in the ctor if it is null...\n'
75,11088045,"b""Yeah I think we need to standardize on how we handle these things that kind of have a default value that needs to work but we want folks to be able to override (when folks are creating the type by hand that is, for stuff we create that's the dependency resolver :)). I kind of like the pattern in SqlServerDataStore where we have an overload with only what's required and another that takes everything... but it sucks that you have to supply everything even if you only want to override one.\n"""
75,11088073,b'Ya. Only send what needs to be saved.\n'
75,11088074,"b""Good idea, I'll add it.\n"""
75,11088171,"b'Poor mans DI is fine, usually to make testing easier.\n'"
75,11088204,"b""Cool, I'll make the relational stuff throw then if it detects anything it's not expecting (just because it can have big side effects if you get something wrong :) )\n"""
75,11088238,"b""@moozzyk that means I don't need to make the changes in Relational to make stuff public. Do you want me to leave them in or revert?\n"""
75,11099448,b'Need to pass entriesToSave to SaveChangesAsync here otherwise filtering is not used. Also need a test for case where there is a mix of dirty and clean entities.\n'
75,11099452,b'Use IsDirty here\n'
73,11076832,"b""I don't think this concept belongs on Column.\n"""
73,11079574,"b""Little detail, but from the samples I have seen PK is used as prefix most commonly. Also, I am not sure if KeyName should be renamed to PrimaryKeyName, since with current design IForeignKey derives from IKey, so one can pass an IForeignKey and get a name that has PK in it. It doesn't have to be changed now, just saying.\n"""
73,11081760,"b'In the future we could add operations similar to the migration ones but for insert, update, delete to avoid all these parameters. They may prove useful for doing data migrations as well.\n'"
73,11087129,b'Where does it belong then?\n'
73,11088247,"b'Not sure, what relational aspect on Column does this map to?\n'"
73,11088685,"b'Whether the value is generated by the store and what kind of generation it is (identity vs. computed, possibly default in the future). Column was the closest thing to me it belonged to \n'"
73,11089017,"b""I don't think we want to couple the relational model directly to Metadata. I also don't think this concept maps well to relational columns. Rather, a column can have a default value, and in some databases, an identity spec.\n"""
73,11089724,"b'We should probably chat about this. I think at this level of the model we probably need to know whether a column can acquire a new value after insert or update, and whether it can be written to.\n'"
73,11217606,b'I will add a store specific enum for this.\n'
73,11217665,"b""It's easy to change. Will do.\n"""
73,11217685,b'Possibly.\n'
73,11223610,b'Database does not have a name anymore so this can be removed.\n'
73,11223700,b'Yes. I am rebasing on the latest version and already removed this.\n'
73,11223701,"b'DatabaseBuilder generates names if StorageName is not specified, so this can be removed.\n'"
73,11223764,b'This is also gone - Rowan introduced a method that does the same in the ModelBuilder and I am now using it.\n'
73,11224408,"b'Small detail but  should the property be named ValueGenerationStrategy? \nAlso we probably need to come up with a consistent way for naming types that exist in both the Metadata and Relational namespaces. If we decide to prefix them with Store, then maybe ForeignKey from Relational needs to be StoreForeignKey. Otherwise StoreValueGenerationStrategy needs to be ValueGenerationStrategy and we can use namespaces to identify them where both are used in the same file. I would add a TODO for that..\n'"
73,11224841,"b'Minor, but ""c"" should be ""pair"" or ""p"" to avoid confusion with column. Ultimately it is ok.\n'"
73,11224944,b'Instead of .Where(...) does .Except(table.PrimaryKey.Columns) work?\n'
73,11225270,"b'Maybe we can have a IsStoreGeneratedValue method somewhere, maybe on Column, to avoid repeating the 2 lines above.\n'"
73,11225387,"b'My current change in review, about the model differ, adds a ModelDatabaseMapping class with instance created by DatabaseBuilder that can be used to go from model objects to database objects and viceversa. If passes review maybe it can be used here, instead of directly using StorageName.\n'"
78,11214626,"b""Do we need all 3 classes ShadowStateEntry, ClrStateEntry, MixedStateEntry? From a general point of view, I am used to see either the specialized classes (ShadowStateEntry, ClrStateEntry) or the mix (MixedStateEntry) but not all 3. But I don't know details about the design so this question may not make sense.\n"""
78,11215000,b'One of the constructors seems to extract the shadow values from a value buffer that is passed down to the base class. Here a shadow value is updated. Does the value buffer from the base class need to be updated too?\n'
78,11215215,"b""typo in NullSentinal in case you have not noticed already, but doesn't have to be changed as part of this.\n"""
78,11215544,"b""Does this mean that it would be beneficial to use the valueBuffer optimization for original values but is currently not possible, in which case this should be a TODO, to maybe adapt the design to be able to use the optimization? Ignore this comment if it doesn't make sense.\n"""
78,11215984,"b'At first glance this looks like a contract for the constructor and not a simple condition. Should an exception be thrown or at least have an assert if valueBuffer.Length != _entityType.OriginalValueCount, or is the usage of this simple enough to guaranty the correct length?\n'"
78,11216325,"b'I hit the following case in the past. Not sure if it has a negative impact here, just mentioning it in case it has: \nobject o1 = 3;\nobject o2 = 3.0;\nEquals(o1, o2) is false\n'"
78,11217171,b'NullSentinel?\n'
78,11217731,"b'Don\'t know the exact reason why, but the best practices for using strings in .NET say ""Use the String.ToUpperInvariant method instead of the String.ToLowerInvariant method when you normalize strings for comparison.""\n'"
78,11218855,"b""I prefer the invalidate and rebuild when needed method, because the business of updating indexes is usually error prone. However I don't have the full mental map of how these are used, so ignore the comment if it doesn't make sense.\n"""
78,11223952,b'Shadow is used for an entity with all properties in shadow state. Clr is used for an entity with no properties in shadow state. Mixed is used when some properties are in shadow state and some are not. Each case has different storage and functional requirements.\n'
78,11224137,"b'Shadow values are not stored in the base class. Original values are. This is an update to a current value for a property in shadow state, so it goes here not in the original values.\n'"
78,11224219,b'Fixed\n'
78,11224907,b'For an entity with all properties in shadow state the value buffer is the correct size and contains the correct data such that it can just be used directly for current values. For cases where original values are being saved eagerly for all properties it would also be possible to use the value buffer. But there is only one value buffer so I chose to use it for current values rather than original values because this is likely most commonly useful.\n'
78,11225061,"b""The part of the contract that could be violated is that the value buffer becomes owned by the state entry and cannot be used for anything else once the state entry has it. But the state entry only uses it if it meets the requirements for use. It could be up to the caller to determine if it means the requirements and only pass it if it does, in which case an exception would be thrown if it doesn't meet the requirements. It seemed cleaner to always pass it (if we have it and we're not using it for something else) and have the constructor figure out if it meets the requirements for use.\n"""
78,11225084,b'This is the behavior I expect.\n'
78,11225087,b'Fixed.\n'
78,11225152,"b'I think I did lower because I was doing some more complex matching of the field at first, but then I switched it to just this for now. Changed to use uppers.\n'"
78,11225188,b'Will leave as is for now.\n'
73,11227968,"b""Yes. We should look at using it when it's available. At the moment we just need this simple thing but I assume it will get more complex once we start support more advanced scenarios.\n"""
73,11228256,b'I will leave it as is at the moment.\n'
81,11271334,"b'true should be generateIdempotentSql. Also can do new[] instead on new List<MIgrationOperation> since Array implements IReadOnlyList.\n\nLater I will probably make this non-static and have the following code:\n\nvar builder = new IndentedStringBuilder();\nperation.Accept(this, builder, generateIdempotentSql);\nreturn new SqlStatement { Sql = builder.ToString() };\n\nthen call it from the next method.\n'"
81,11271476,"b'We can rename these methods to Generate now, but I can do that later if you want.\n'"
81,11271623,b'Can rename these to GenerateSql like they were initially.\n'
81,11271691,b'This should probably take the SQL in the constructor since that is the main thing it represents.\n'
81,11271830,b'Same as base class\n'
81,11272240,"b'Done, and the refactor sounds good too.\n'"
85,11307701,"b""I believe that Database can sometimes return different things depending on whether the connection is open or not. I'm not sure if it matters here or not but it might be worth adding a TODO to look into it.\n"""
85,11307734,"b'needed at all??  (you can use just ""catch"" (i.e. without (Exception) if you want to keep this)\n'"
85,11308126,"b""Will it close the connection for you automatically in the Dispose() that will get called at the end of the using() {...}?\n\nIf not you may want consider putting connection.Close() in a finally() clause - if there's a failure during the Close() call what do you want to return?\n"""
85,11308481,"b""You can't have a try without a catch or finally (and wanted to #if the minimal amount of code). Swapped to just catch without the exception type.\n"""
85,11308622,b'+1 on not polluting code with #idfefs\n'
85,11308646,"b""Here is the excerpt from the docs (though no guarantee they are correct :smile:). Sounds like the only time it would not be correct is if you opened the connection and swapped databases - which won't happen here given we are creating the connection. I'll add the TODO though, to make sure that is actually true.\n\n```\n    //     Gets the name of the current database after a connection is opened, or the\n    //     database name specified in the connection string before the connection is\n    //     opened.\n```\n"""
85,11308763,"b""If the connection opens then the next thing we do is close it, so I don't think we need the finally. If closing throws then we'll just throw and not return anything (I don't think Close would ever hit the login failed exception).\n"""
86,11369054,b'Could you refactor this so SetEntityState is the sync equivalent to SetEntityStateAsync and move it right before SetEntityStateAsync. This will make it easier to see that if one changes the other needs to be changed.\n'
86,11369220,"b""Wouldn't this override the existing key value even if it's not the default one?\n"""
86,11369286,b'.ConfigureAwait(false)\n'
86,11369318,"b'I will move them close together, but I prefer to have the property setter  syntax rather than the method syntax for the sync version because it makes use by the caller easier to read.\n'"
86,11369379,b'We can keep SetEntityState private and call it from the property setter.\n'
86,11369404,"b""Yes. That is the intended behavior here. We have talked about having a method that would allow the default value to be used as a flag to determine whether or not an entity should be added or update, but that isn't implemented here. If you tell us explicitly that this is a new entity and that a key generator should be used for keys of this entity, then we will generate a key for the entity regardless of the current value.\n"""
86,11369412,b'Okay.\n'
86,11369424,b'Will do.\n'
86,11369479,"b'Ok, do we have a test for this scenario?\n'"
86,11369523,"b""For generating key values? Yes. For switching add/update based on value of key, no--because this isn't implemented yet.\n"""
86,11369612,b'For explicitly adding a new entity that uses a key generator and has a non-default key value.\n'
86,11369800,"b""I'm not sure because the value of the key is not used in making the decision here so I doubt that there are tests for each case. Also, to be clear, I don't believe that the value should be used to make a decision here. I think we should consider an AddOrUpdate method which decides whether to Add or Update based on the initial key value. Once we know the entity is being added then key generation should be controlled by the key generator, not by the state manager.\n"""
86,11370006,"b""I'm thinking of a different case: I'm adding a new entity, so it should not be an update, but I want to use a specific key even though it's usually generated. This could be the case when I am handling the association fix up.\n"""
86,11370121,"b""That's a valid scenario, but isn't it difficult to do in general when things like Identity columns are in play? I have said several times recently that I think we need to agree on a general plan in this area because it feels like there are several different ideas going around about how it should all work I don't think we have consensus on how to handle all these cases.\n"""
86,11370151,"b'Also, it still feels like this is something that should be handled by the key generator, not the state manager, which may mean that the key generator gets passed the current value.\n'"
86,11370745,"b'Yes, that sounds like a more flexible design.\n'"
91,11375519,"b'Saw your comment in the description and I agree it would good to read the values in a strongly typed manner even for shadow state, mainly to work with those providers that may depend on this to return an instance of the right type. Maybe just add a TODO for now?\n'"
91,11398565,b'Added TODOs.\n'
80,11221153,b'Differ needs to handle name reuse between renames as well as circular renames.\n'
80,11260218,"b'This may need to fully compare the properties, not just the names.\n'"
80,11272255,b'This should include the case of property being renamed but column being the same.\n'
94,11543493,"b'Question: it looks like you could pass in negative values of propertyIndex or values which are >= the original propertyCount. This could cause issues (ArrayIndexOutOfBoundsException, or more subtle bugs. E.g if you passed -2 you would actually be setting a bit within the AdditionalState). On the other hand if you check that the value is within bounds that might be a performance issue. Is it worth putting the bounds checking in, at least as Debug?\n'"
94,11544008,b'Is it possible that 2 different sidecars could store the same IProperty? If so do you need a method to say store this property in this particular sidecar?\n'
94,11544186,"b""I'll look at how the method is called and see where it makes sense. (This is an internal nested struct used only by the StateEntry and as such these methods are very similar to private methods in how they are used.)\n"""
94,11545181,"b'Yes, it is possible. It is setup now such that the last added gets the value. It might be better for all sidecars to get the value in this case. You can set a value in a specific sidecar already by asking for the sidecar and setting the value--we do this for original values.\n'"
94,11547068,b'OK. Adding to all sounds good.\n'
94,11547153,b'Sounds good - thanks.\n'
94,11548388,"b""Usually TryGetXXX() returns a bool and an out parameter instead. Consider renaming this method (but personally I'm fine if you decide to just keep the name - people can easily see what it does).\n"""
94,11550844,"b""It is quite common in our code now to use Try methods that return null--see the metadata APIs for more examples. The out parameter is problematic, especially when the object you want may be a subclass of Sidecar (which is always the case here) because you can't do a simple cast when using the out parameter.\n"""
93,11595410,b'It may be possible to just use the Name of the property info and not have to refer this here.\n'
93,11597493,b'The guidelines want us to use C# type keywords in favor of .NET type names.\n'
93,11597536,"b""Any reason this isn't a generic method?\n"""
93,11597757,"b'Ok, will update.\n'"
93,11597884,"b""Shouldn't `isDestructiveChange` be calculated? Not all alter column operations will be destructive. (e.g. widening the type of a column)\n"""
93,11598255,b'Any reason it should be?\n'
93,11598676,"b'Yes, I added somewhere a TODO to revisit that because it requires some thinking, but I missed adding it here as well.\n'"
93,11605071,"b""Is there any reason we don't just use the `GetMethod` property directly?\n"""
93,11605157,"b'No tabs, please\n'"
93,11605268,"b""So long as we don't call it TypeUsage :wink:\n"""
93,11605385,"b'I think in the metadata APIs, we give you a way to get the Type and the property name, but we make a point not to hold on to PropertyInfo objects.\n'"
93,11605889,"b'Seven fewer characters per call :smile: `M<T>(p)` vs `M(typeof(T), p)`\n'"
93,11606001,"b""Cool, so long as it's tracked somewhere.\n"""
93,11606611,"b'... but more code generated by the compiler, one method for each T.\n'"
93,11606749,b'Copied this as is from old stack. Will take a second look and remove if not necessary.\n'
93,11606828,b'Will update.\n'
93,11612345,b'I thought .NET generics were very different from C++ templates in this regard.\n'
93,11650556,"b'Well, yes, the generic argument instantiation probably happens at runtime instead of compile time. But it is very likely that, at least for value types, there will be a method for each T (will have to check). \n'"
96,11783253,b'CompletedAsyncEnumerator?\nAlso why is it sealed and nested?\n'
96,11783484,b'This looks hacky. Can ExecuteCollection return something that implements both interfaces?\n'
96,11785005,"b""Not currently because this method is defined in re-linq. We don't have to use the re-linq front-end glue - I have more work to do in this area and this is just a first cut at enabling async with relinq.\n"""
96,11785038,b'Impl. detail.\n'
96,11785381,b'Consider exposing this as internal so it may be used in unit tests\n'
96,11785478,b'Not opposed to it if we find a need.\n'
96,11785581,b'We will need it for the mock implementation of GetAsyncEnumerator() for any class implementing IAsyncEnumerable<T>\n'
96,11785822,b'Unless we also mock IAsyncEnumerator.\n'
97,11787020,b'French?\n'
112,11924690,"b'""modelBuilder"" (pedantic)\n'"
112,11924759,"b'""KeySuffix""\n'"
112,11924887,b'Can probably inline this local.\n'
112,11924993,b'Potential multiple enumeration of keyProperties below?\n'
112,11925016,b'Interface may be OK here.\n'
112,11925062,b'Is your plan to inline attribute handling - Would be nice to still support user defined attributes\n'
112,11925105,b'Consider obtaining the conventions from DI.\n'
112,11975095,"b""I considered optimizing it but in the non-exception path, it's just over one element.\n"""
112,11975227,"b""For this particular attribute, yes I will inline to prevent undoing work later. For others, I think they'll continue to run as separate conventions. I'll be sure to bring any major decisions like this to the design meetings.\n"""
112,11975264,"b""I did, but didn't know how the user experience would look when using ConventionalModelBuidler outside of EntityContext. Will track as a TODO.\n"""
126,12174729,"b'Curious, why the default CancellationToken is removed. \n'"
126,12193221,b'Why did this change?\n'
126,12193355,b'Somehow I cannot find where the definition of AnyAsync moved :smile:\n'
126,12193779,"b""I guess the one on IQueryable<T> didn't move, but the one on IAsyncEnumerable<T> disappeared. Is that intentional?\n"""
126,12193880,b'Looks like many tests are gone. Are they coming back in a later commit or are we losing the functionality they test with this integration?\n'
126,12194188,"b'Ah, I see your ""more tests to come"" comment. Also starting to get that we no longer have our own LINQ operator over IAsyncEnumerable because we adopted IX\'s, so we also remove the tests for ours.\n'"
126,12194292,"b'Yeah, it is intentional :)\n'"
126,12194598,b'This is a low level API.\n'
126,12194615,b'Merge. Will fix.\n'
140,12253793,b'Did you remove the NotNullAttributes intentionally?\n'
140,12257964,b'Consider lookup table.\n'
140,12260093,b'I am wondering now if we have any query and save test coverage for the types for which we have defined non-exact mappings. I have no doubt  we can make it work but I just wander if things like SqlDataReader.GetValues() will do the right thing. In any case this can be in a separate PR.\n'
140,12288722,"b""Yes. They should only be placed where the method is first declared; they don't need to be on overrides.\n"""
140,12288774,"b'Not going to do too much work here considering that there is already a comment that says ""this doesn\'t belong here"" but added a new TODO to consider a lookup table.\n'"
140,12288825,"b'I wrote some tests and found that char, sbyte, ushort, uint, and ulong do not work. Added some TODOs to the code.\n'"
140,12289173,b'Thanks!\n'
143,12297803,"b""Are these adjustments introduced by ReSharper or the editor every time we touch a file? Should we do them all in one shot that they don't keep showing up? Not an issue with this PR though.\n"""
143,12298022,"b""Would it be possible to have this take just DbContextOptions and still allow to make changes in OnConfiguring? I think it would be good if most customers didn't need to know about ImmutableDbContextOptions.\n"""
143,12298089,"b""On the other hand if the point is to have a constructor form that just picks up an externally cached options object, I guess I just don't like the name of ImmutableDbContextOptions.\n"""
143,12298092,b'I did a code cleanup and they came out of that. Not sure if they will reoccur or not.\n'
143,12298127,"b'Yes. I have a personal TODO to look into this, but this PR is just about the renames.\n'"
143,12298317,"b""I hate the name, but I think it is what we have for now. And I think we may want both constructors, but we'll have to see how things come together.\n"""
143,12302159,b'I also thing the parameter name itself should change when you do the next change.\n'
143,12302219,b'Agreed. I missed it both here and in OnConfiguring. \n'
148,12347759,"b'I suspect this is probably the right thing to do anyways. I think the hacky part is only that we are not specifying the parameter type, right?\n'"
148,12347931,"b""Yes, I think we should be passing DBNull instead of null, but this is not sufficient. For example, with just this change null byte arrays still can't be saved. And there are other issues (such as with DateTime) that are still broken because of incorrect type inference.\n"""
162,12506961,b'This will skip creating the tables if the database exists. Will update.\n'
158,12500312,b'Please keep the TODO we had here for switching from 128 to 900.\n'
158,12500325,"b""Didn't we have byte[]? Maybe not.\n"""
158,12500334,"b'Ah, I see it below.\n'"
158,12500343,b'Same TODO\n'
158,12506740,b'Will do.\n'
158,12506741,b'Will do.\n'
158,12507118,b'There is a type parameter overload that allows the type to only be specified once.\n'
158,12507123,"b""Yeah, I just saw that in your code. It didn't used to be there--but glad it is now. Will go through and update all our usages in a separate checkin.\n"""
158,12507128,b'Use `reader.Read()` for now? (I think `ReadValue<object>()` will currently fail on SQLite.)\n'
158,12507158,"b""This is a method on IValueReader which has two implementations--RelationalTypedValueReader and RelationalObjectArrayValueReader. We currently default to the former in both update and query. So if SQLite can't use the typed one then it will need to override the one to use for query. There isn't currently a way to change the one used for update (there needs to be--it just isn't done yet) so for update we may have to hard-code the other one for now. (Note that this hasn't change with this checkin so if it was working before for query and/or update then it was working with the typed one.)\n"""
167,12554455,b'Nit: No need to call `Close()`\n'
167,12555866,"b""Use ~~`SELECT count(*) FROM sqlite_master WHERE type IN ('table', 'view')`~~ for the sub-query.\n"""
167,12556151,"b""No need to, but prefer to. :-) But don't really mind either way.\n"""
167,12556636,"b""Revised to take into account virtual tables:\n\n``` SQL\nSELECT count(*) FROM sqlite_master WHERE type = 'table' AND rootpage IS NOT NULL\n```\n"""
167,12558090,"b'Nice, thanks. :-)\n'"
169,12611153,b'For some value of N :-)\n'
169,12611235,"b'For primitive types, fastest is probably to switch on Type.GetTypeCode\n'"
169,12611766,b'8 :smirk:\n'
169,12615072,b'Currently no type codes in CoreCLR. :crying_cat_face: \n'
169,12615079,b'Will change.\n'
174,12760222,b'Should be checking for concurrency token not CLR property\n'
174,12760280,b'Consider extension method\n'
174,12760692,"b'Yes, and I will add a unit test for that.\n'"
191,12977915,b'Should be 1 for First?\n'
184,12979595,b'This switch is...interesting...\n'
184,12979902,"b""Was thinking more about this and am suspicious that it is a premature optimization. I'm really not sure as to whether shared value generator contention would actually cause an issue.\n"""
184,12979909,b'Can change to an if instead. Was just using a common pattern for all the value gen selectors.\n'
184,12979958,"b'Should probably be more nounish. ""ValueGenerationTime""?\n'"
184,12979994,"b'Is Update valid on its own?\n\nOnInsert, OnUpdate might sound better.\n'"
184,12980016,"b""Yeah, maybe not. It's easy to remove. I was going to file a bug for Luke to do some perf/stress testing in this area so we can make a more informed decision as to whether or not we need this and, if we do, what a reasonable pool size should be.\n"""
184,12980032,"b'To me, this is just the ""where"" part of value generation: ""ValueGenerationLocation""? \n'"
184,12980074,"b""The thing is we sometimes do value generation at Add and SaveChanges. For example, for Identity or its moral equivalent using sequences. So one enum saying when we do value generation doesn't really work.\n"""
184,12980112,b'Could be a good idea - Took me a few double-takes to figure it out. Also consider extension methods on the enum that capture common combinations of checks.\n'
184,12980153,"b""I don't think update on its own is valid, but not sure. I think we should discuss the naming of these things in a design meeting or similar. The split into two enums and the values for each are what Diego and I agreed on late last week, although we didn't decide on the naming.\n"""
184,12980179,"b""I don't think just where and when works. For identity we do both client on add and server on save.\n"""
184,12980235,b'Okay\n'
184,12980280,"b'You mean for the surrogate values? Isn\'t that just a function of the ""where"" being ""server""?\n'"
184,12980484,"b'For sequences are ""server on add"" and ""nothing on save"". So in that case the where is server, but it happens at add time and there are no surrogates. We really do want to know what to do on add and what to do on save. If you look at how we use the values it works out this way too--the value generators are all about what we do on add and only use that enum, and the update pipeline is all about what we do on save and only uses that enum. To make certain patterns work you set combinations of the two enums, and we should have higher-level API (fluent and attributes) that allow this. But I think the two enums we have work well for what needs to be recorded and how it needs to be used.\n'"
184,12980602,"b'Do you mean client sequences? i.e. The one that produces values independently of the update pipeline. This is related to our discussion the other day. The fact that the sequence lives on the server is irrelevant here. The values are, in effect, generated on the client (albeit by code that uses a remote resource). We also need ""server"" sequences. i.e. One that is used in a column default and read-back by the update pipeline.\n'"
184,12980760,"b'We should discuss whether or not it is irrelevant. To me the fact that the value is generated on the server is relevant, both from the perspective of how it will perform and what it means for your app code--that add calls may talk to the database--and in terms of the key space being controlled by the server and not by the client while the key still being available before SaveChanges is called.\n'"
184,12980855,"b'Sorry, I meant not relevant from the perspective of how we use it. Agree that the customer should be aware of the various runtime properties of specific generators. Lets discuss.\n'"
181,12900333,b'When/how is this batch method used?\n'
181,12900409,"b""I can't remember whether or not it is safe to just call Wait here or whether that might result in deadlock. Diego will likely know. I assume there are no synchronous APIs to use?\n"""
181,12900588,"b""Consider the case where only some properties are marked as modified. For relational providers we don't try to save non-modified properties partly because it is not needed, but mostly because if the entity was attached from a partial DTO then the non-modified properties may not have valid data.\n"""
181,12900717,"b'Would be good to know if it is even possible to implement this when using Azure Table Storage. If not, it could influence the direction we take for this method since there are already several opinions on what it should do.\n'"
181,12906859,"b""TBD. I wrote this as a way to optimize large amounts of changes, but the DbSet API doesn't expose away to use this (yet).\n"""
181,12906932,"b'Actually, there is a synchronous API. If it is unsafe to use Wait(), I can rewrite the sync calls.\n'"
181,12906968,b'Add the Utilities\\Check class and use Check.NotNull to validate args on public surface.\n'
181,12906997,b'Use PascalCase for constants\n'
181,12907158,b'Use Task.WhenAll?\n'
181,12907222,"b'Batching should be controlled via configuration. If batching is supported, have it enabled by default with a sensible default batch size. Take care to deal with server generated values (if such a concept exists in ATS)\n'"
181,12907298,"b""Noted: this may be better as a merge, but it depends on what the user is trying to accomplish. Because entities are schema-less, I'm not sure what to do with fields that don't map to the POCO. \n"""
181,12907329,b'Use cancellationToken.ThrowIfCancellationRequested();\n'
181,12907336,"b'What is HasTables supposed to accomplish? Is it just a general ""there exists some tables"" or are we checking for a specific set of tables? The first is not possible on ATS; the second is.\n'"
181,12907377,b'public class?\n'
181,12907391,b'An assert is probably better here.\n'
181,12907496,"b'It is currently any tables, but one of the options that is being considered is to check for a specific set of tables.\n'"
181,12907513,b'Rename these visitors to match the provider.\n'
181,12907557,b'See comment about batching above.\n'
181,12908556,"b'Use the sync API if available, file a bug if it is not available and it is our code :smile: Invoking async APIs synchronously in a good way requires some ceremony, e.g. we have code like this in Identity:\n\n``` C#\n    internal static class AsyncHelper\n    {\n        private static readonly TaskFactory _myTaskFactory = new TaskFactory(CancellationToken.None,\n            TaskCreationOptions.None, TaskContinuationOptions.None, TaskScheduler.Default);\n\n        public static TResult RunSync<TResult>(Func<Task<TResult>> func)\n        {\n            return _myTaskFactory.StartNew(func).Unwrap().GetAwaiter().GetResult();\n        }\n\n        public static void RunSync(Func<Task> func)\n        {\n            _myTaskFactory.StartNew(func).Unwrap().GetAwaiter().GetResult();\n        }\n    }\n```\n'"
181,12908926,"b""sounds good. i'll rewrite the calls to use sync where possible.\n"""
181,12909051,"b""I'll add my vote to checking for a specific set, but either way, it's good to clarify what this call was meant to do. I'll look into the API more carefully to see if this can be implemented with ATS.\n"""
181,12910171,"b'Moreover, it looks like this async method only needs to await at the tail. In general for case like this, you can remove the async keyword and return the task directly at the end as an optimization. See http://msdn.microsoft.com/en-us/magazine/hh456402.aspx for some context on what you are saving.\n'"
181,12911059,"b'As with the other method, consider removing the async keyword and returning the task directly, and using Task.WhenAll as Andrew suggested.\n'"
181,12914484,b'Should this condition throw until we support POCO entities with this provider? If yes consider doing `var entity = (ITableEntity)entry.Entity` above. \n'
181,12914837,b'Is this string in a format that will work in machines with other locales?\n'
181,12916003,"b""good observation. I'll adjust this so tests should work on other locales.\n"""
181,12981108,"b'Changed. 3102022ddec08384758ec2d91a8d84df7215ad2c\nAlso, ATS does not generate values.\n'"
181,12981139,b'Fixed: 3102022ddec08384758ec2d91a8d84df7215ad2c\n'
181,12981143,b'Changed in 3102022ddec08384758ec2d91a8d84df7215ad2c\n'
181,12981191,"b""I've update these methods. I still use the async keyword, but have instead used it according to the guidelines mentioned in the article you shared with me.\n"""
252,12981373,b'This can be removed when #177 is resolved.\n'
181,12982156,"b""If you haven't already, then I would add a TODO or create an issue to decide whether we should ignore or throw when a property is configured as server-generated.\n"""
181,12982248,"b""We have the concept of property-level change tracking, which means that in a given modified entity only some of the properties may be marked as modified. If possible we should only update the values for properties that are marked as modified. I'm not sure about how to handle fields that are not mapped--we may be able to use shadow state, but this might not work if we don't know when building the model which fields will be there. I'm find with us not handling either of these things for now, but I think we should have a TODO or an issue to track them (if we don't already have one, which I didn't check. :-))\n"""
181,12982285,"b'I think it might be a good idea to pass the model to this method in the same way it is passed to CreateTables. This would provide greater flexibility in how providers implement the HasTables method because the provider would have model tables to use. It might then be that for some providers the heuristic for HasTables resolves to ""do any/all of the tables I need to be there exist.""\n'"
181,12982402,"b""Let's defer answering that question this issue. https://github.com/aspnet/EntityFramework/issues/234\n"""
181,12982426,"b""Likewise -- I'm not sure how to handle the unstructured nature of ATS entities. I've added this issue to https://github.com/aspnet/EntityFramework/issues/234\n"""
181,12985368,"b""Ok, I still think we should not have async if unnecessary. But let's chat about it in person. Not blocking on this.\n\nSent from my Windows Phone\n\n---\n\nFrom: Nate McMastermailto:notifications@github.com\nSent: \xc3\xbd5/\xc3\xbd22/\xc3\xbd2014 17:03\nTo: aspnet/EntityFrameworkmailto:EntityFramework@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [EntityFramework] Beginnings of a provider for Azure Table Storage (#181)\n\nIn src/Microsoft.Data.Entity.AzureTableStorage/AzureTableStorageDataStore.cs:\n\n> -                        {\n> -                            startBatch.Invoke(batch, table);\n> -                            batch = new TableBatchOperation();\n> -                        }\n> -                    }\n> -                    if (cancellationToken.IsCancellationRequested)\n> -                    {\n> -                        break;\n> -                    }\n> -                    if (batch.Count != 0)\n> -                    {\n> -                        startBatch.Invoke(batch, table);\n> -                    }\n> -                }\n> -            }\n> -            return await new TaskFactory<int>().ContinueWhenAll(allBatchTasks.ToArray(), InspectBatchResults, cancellationToken);\n\nI've update these methods. I still use the async keyword, but have instead used it according to the guidelines mentioned in the article you shared with me.\n\n\xe2\x80\x94\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/EntityFramework/pull/181/files#r12981191.\n"""
181,13017300,"b""Looked at this with Nate. Turns out that the await was necessary in this case.\n\nFrom: Diego Vega\nSent: Thursday, May 22, 2014 9:14 PM\nTo: aspnet/EntityFramework; aspnet/EntityFramework\nSubject: RE: [EntityFramework] Beginnings of a provider for Azure Table Storage (#181)\n\nOk, I still think we should not have async if unnecessary. But let's chat about it in person. Not blocking on this.\n\nSent from my Windows Phone\n\n---\n\nFrom: Nate McMastermailto:notifications@github.com\nSent: \xc3\xbd5/\xc3\xbd22/\xc3\xbd2014 17:03\nTo: aspnet/EntityFrameworkmailto:EntityFramework@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [EntityFramework] Beginnings of a provider for Azure Table Storage (#181)\n\nIn src/Microsoft.Data.Entity.AzureTableStorage/AzureTableStorageDataStore.cs:\n\n> - ```\n>                      {\n>   ```\n> - ```\n>                          startBatch.Invoke(batch, table);\n>   ```\n> - ```\n>                          batch = new TableBatchOperation();\n>   ```\n> - ```\n>                      }\n>   ```\n> - ```\n>                  }\n>   ```\n> - ```\n>                  if (cancellationToken.IsCancellationRequested)\n>   ```\n> - ```\n>                  {\n>   ```\n> - ```\n>                      break;\n>   ```\n> - ```\n>                  }\n>   ```\n> - ```\n>                  if (batch.Count != 0)\n>   ```\n> - ```\n>                  {\n>   ```\n> - ```\n>                      startBatch.Invoke(batch, table);\n>   ```\n> - ```\n>                  }\n>   ```\n> - ```\n>              }\n>   ```\n> - ```\n>          }\n>   ```\n> - ```\n>          return await new TaskFactory<int>().ContinueWhenAll(allBatchTasks.ToArray(), InspectBatchResults, cancellationToken);\n>   ```\n\nI've update these methods. I still use the async keyword, but have instead used it according to the guidelines mentioned in the article you shared with me.\n\n\xe2\x80\x94\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/EntityFramework/pull/181/files#r12981191.\n"""
257,13094192,b'Nit. Assert.Null(...)\n'
257,13094323,b'Nit. Maybe add a test or change this one to test that persist: true is recorded in extension.Persist.\n'
257,13098039,b'Fixed.\n'
257,13098114,b'Added a test.\n'
261,13102920,"b""This is the error you'll see if you open and build the solution without running `build initialize` first.\n"""
261,13103182,"b""Oops, I'll add a corresponding PackageReference.\n"""
263,13109359,b'This is about the only significant change.\n'
260,13149118,"b'This may need a corresponding PackageReference item in the .csproj file:\n\n``` XML\n<PackageReference Include=""Microsoft.Framework.ConfigurationModel"" />\n```\n'"
260,13155511,b'Already added--see csproj file above.\n'
260,13155676,"b""Ah, got it. The one here isn't needed -- it is already a dependency of Microsoft.Data.Entity.\n"""
260,13155851,"b""It's not in the project.json for Microsoft.Data.Entity.\n"""
260,13155972,"b'Microsoft.Framework.DependencyInjection is which, I believe, depends on it.\n'"
260,13156015,"b'Ah, okay. :-)\n'"
264,13155306,"b""Don't worry, @ajcvickers, I remembered. :smile:\n"""
264,13156421,"b""Thanks. Not that it's actually used yet. ;-)\n"""
262,13162794,b'Nit: rename to AzureTableStorageOptionsExtension? \n'
267,13195605,b'Use Task.Run\n'
267,13195645,b'Add NotNull to connectionString and use Check.NotEmpty\n'
267,13195699,b'Marker interface? Consider an attribute.\n'
267,13195784,b'Add NotNull and Check. for all public APIs\n'
267,13195925,"b'This is a placeholder until I implement support for POCO objects.\n\nOn Thu, May 29, 2014 at 11:19 AM, Andrew Peters notifications@github.com\nwrote:\n\n> In\n> src/Microsoft.Data.Entity.AzureTableStorage/Interfaces/IAzureTableEntity.cs:\n> \n> > @@ -0,0 +1,11 @@\n> > +\xef\xbb\xbf// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved.\n> > +// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n> > +\n> > +using Microsoft.WindowsAzure.Storage.Table;\n> > +\n> > +namespace Microsoft.Data.Entity.AzureTableStorage.Interfaces\n> > +{\n> > -    public interface IAzureTableEntity : ITableEntity\n> \n> Marker interface? Consider an attribute.\n> \n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> https://github.com/aspnet/EntityFramework/pull/267/files#r13195699.\n'"
267,13195995,b'Dump this file from test projects.\n'
267,13196132,"b'One thing we need here (but not immediately) is the NorthwindQueryTests. These tests will be one our LINQ ""specs"" that all our providers run. Take a look at SQL Server and In-memory to see how this is currently structured.\n'"
273,13249083,b'I would add a test for replacing ] with ]] and maybe test that [ works too. Otherwise looks good. :shipit: \n'
183,12918344,b'I will remove SourceModel because we only need TargetModel so far.\n'
183,13017128,b'Does this constructor interfere with DI?\n'
183,13017368,"b'I removed it, it is not needed.\n'"
183,13018085,"b""Users should be able to scaffold an empty migration. This allows them to make changes to the database that don't affect the model. (e.g. Add users, triggers, sprocs, etc.)\n"""
183,13018451,b'Migrations may not have been applied in order. This should use the difference between the two sets.\n'
183,13018599,"b'Again, there may be discrepancies between what is local and what is in the database. Logic here should not rely on indexes.\n'"
183,13020741,b'Done. Will update the pull request.\n'
183,13020977,b'It feels strange to create a provider-specific one of these. I wonder if there is a way to get around this that still works well with DI.\n'
183,13021122,"b'In EF6, these operations were encapsulated inside migration operation classes and passed through the migration sql generator. For now, this seems fine, but it may become problematic when we implement migration scripting.\n'"
183,13021218,b'Might be clearer to call this something like `DatabaseMigrationMetadata` or `AppliedMigration` or something.\n'
183,13021319,"b'Returning a `ScaffoldedMigration` object may be easier to consume. However, we can iterate on it as we implement migration tools.\n'"
183,13021906,"b""That was Arthur's suggestion. The other option was to take an IEnumerable<BaseServiceClass> and filter out the one that is needed, but that seemed a bit worse.\n"""
183,13022094,"b'It looks a bit strange to have DML operations handled by the SQL generator designed for DDL operations. To me this seems a bit better, at least conceptually, but maybe I am missing something.\n'"
183,13022170,b'This is not for database migrations only. It is also instantiated to hold the information about a migration to be scaffolded. It practically specifies migration metadata without requiring the Up and Down methods.\n'
183,13022183,"b'Agree, that is probably better. Will change.\n'"
183,13022223,"b'Ok, will update to handle those scenarios.\n'"
183,13022348,b'Another option is to create one Migrator type that depends on DbContextConfiguration and then uses the DataStoreSource/DataStoreSelector to get provider-specific Migrations services.\n'
183,13101579,b'Will change this after I move MigrationScaffolder and code generators to the .Design assembly.\n'
183,13101782,b'Added a TODO for now.\n'
183,13210591,b'These should be available now.\n'
183,13210655,b'Makes sense.\n'
183,13210709,b':ok_hand:\n'
283,13313022,b'Surprised this is false. Would have expected it always to be true? Similarly for async method below.\n'
283,13313061,"b""Maybe a separate checkin, but didn't we decide to rename these to TDataStore and DataStore?\n"""
280,13295886,b'This kind of Reflection (MakeGenericType and GetConstructor) are usually pretty slow so at some point we may want to look into creating cached delegates to do this faster. Fine not to optimize now though.\n'
280,13295951,"b'I would consider making this a factory class rather than a static class with a static factory method. Factory classes are usually easier to test, easier to replace, and easier to add caching to without that cache necessarily being app-domain wide.\n'"
280,13295953,"b""Maybe it's because I haven't looked in a while, but do we need these checks in addition to the `[NotNull]` attributes? (I know the `[NotNull]` thing isn't yet implemented, but I thought people have been coding on the assumption that it will be.)\n"""
280,13296246,"b""Implementing NotNull in the way we discussed is far from trivial--as our experience with the equivalent of it in Code Contracts showed. If we end up getting this implemented then it will be easy to go through and remote the Check calls. I suspect that other work will be higher priority than this for quite some time, so we're going with something that is easy and works well until something else is available.\n"""
280,13296395,"b'We should be able to use non-public getters and setters. Also, we will likely need special handling for properties that are inherited from a base class but have a private setter in the base class implementation, but that bit can be a TODO for now.\n'"
280,13296578,b'We have code for doing fast (delegate-based) CLR property access--look at depending on ClrPropertySetterSource and ClrPropertyGetterSource.\n'
280,13296728,"b'Look into the standard patterns for overriding Equals. Resharper\'s ""generate equality members"" is a decent place to start. Also, make sure that GetHashCode is overridden whenever Equals is overridden.\n'"
280,13296911,"b'Why is this and other methods here marked as ""new""?\n'"
280,13297120,"b""At some point I think we probably want to support some form of type conversion rather than just ignoring anything that doesn't match. However, I wouldn't do anything specific here because I think this conversion could come from a higher-level service provided by EF and used where needed.\n"""
280,13299643,"b'Understood, thanks!\n'"
280,13312847,"b""Artifact of inheriting TableEntity, which I can remove now that I've changed some implementation details.\n"""
280,13312869,"b""Didn't know these existed. I'll add them in my next round of edits, which is to make better use of DI\n"""
280,13312922,"b""I'll add a TODO\n"""
280,13312966,"b""Added a factory. It's kinda hacked in, but i'll spend tomorrow adding better usage of DI.\n"""
283,13343276,"b'The return value indicates whether the database was actually created in some way by the call, or whether it already existed and so the call did nothing. Since the call always does nothing the return value is always false.\n'"
283,13343360,"b'This is the API class that you get from doing context.Database which is currently called Database, as it was in EF6. The DataStore class is something different and is at the top of this list of generic arguments.\n'"
283,13344147,"b""Hmmm. I would expect this to be used in code like this:\n\nif (!EnsureCreated()) {  throw someException; }\nelse { // carry on assuming creation happened }\n\nsimilar to e.g. the TryGetValue() syntax. At the least I think we should document what we're doing. But I would recommend that the bool represents whether or not the Database exists at the end of the call including the case where it already existed.\n"""
283,13344271,"b""Hmmm. I thought we decided to rename context.Database. I'd like to understand the difference between a Database and a DataStore. But I can do that offline - don't block on that.\n"""
283,13344517,"b""It's certainly not that. If EnsureCreated fails it will throw. If the bool represents whether or not the database exists at the end of the call then it will always be true. The intention of the return value is to allow some additional operation to happen only if the database was actually created--for example, seeding with test data.\n"""
283,13344610,b'OK. Then I definitely think we should add some documentation saying that. After that :shipit:\n'
283,13344650,"b""The Database class is just called Database because that's what the API is represents is called--we did discuss briefly if context.Database should be renamed, but I'm pretty sure we didn't make a decision. There is value in having consistency with the old APIs.\n"""
283,13344908,"b""We aren't really doing API documentation at the moment because of the amount of code churn. I'll make sure it gets documented correctly when we do API docs. Note that we have the same semantics in the old stack for methods like CreateIfNotExists, which is the moral equivalent of this method. Also, it's a pattern used elsewhere--for example, indicating whether a call to Remove actually removed an item or was a no-op because the item didn't exist in the list.\n"""
283,13348388,b'I would argue that the most helpful return value for the method in the InMemoryProvider is `true`: if you write code that needs to react to the result what you want to know is if you can now proceed to use the database not if the method really did anything.\n'
283,13348581,"b""Talked to Arthur and now I understand that the method won't return false if the database couldn't be created. Instead it will fail with an exception. So this is fine.\n"""
284,13360182,"b""Probably going to need to create parameters using the appropriate type mapping to get the correct types. This is important for nulls where type inference doesn't work, but also for types like DateTime where the default inference isn't what we want. We also sometimes need to set scale/precision/length, etc.\n"""
284,13360436,"b'Yep, will add TODO.\n'"
287,13464310,b'This?\n'
287,13464525,b'We should catch a DI specific exception\n'
287,13464768,b'There is currently no DI-specific exception--it just throws Exception. But I will change this to use enumerable anyway.\n'
285,13450313,"b'Can we make this an extension method for now rather than adding to the IProperty interface and requiring all implementers to create an implementation? If we decide to optimize this lookup and that optimization requires the addition of an index or similar then we may have to modify IProperty, but until we know we need that I think an extension method is probably the better approach.\n'"
285,13451966,"b""Sure, I've moved the code to an extension instead. I'll squash this to one commit before merging.\n"""
285,13500071,b'Put in the same namespace as IEntityType.\n'
285,13500135,b'Check that the exception contains the correct exception message--see other uses of Assert.Throws for examples.\n'
286,13507833,"b""What's this?\n"""
286,13507897,b'Consider LINQ (Zip)\n'
286,13508015,"b""Any reason PointsToPrincipal can't just be a regular property on Navigation?\n"""
286,13508035,"b""Don't know. Visual Studio added it automatically when I ran custom tools. I will remove it.\n"""
286,13508185,"b'It could be. I thought that there was going to be more in here, but it turns out that there may not need to be now.\n'"
286,13508762,"b""Actually, it looks like the other projects have it and it will get added back in if I remove it, so I'll leave it  as is.\n"""
294,13513166,"b""Note, this will cause a bit of extra yellow during build. Please, don't be alarmed.\n"""
294,13513194,b'I wonder if this contributed to any test flakiness...\n'
294,13513367,b'Personally prefer to have this commented out with a reference to the bug number rather than start having warnings in the build.\n'
294,13513406,b'Make explicitly internal?\n'
294,13513412,"b""I'm not sure there's a way to do this with an override (There is also a [Fact] on the base class.). I'll look into it.\n"""
294,13513459,"b""Ah, okay. If it's not possible then okay.\n"""
294,13513460,"b""To be clear, they're not build warnings, just skipped tests. They used to be warnings in the EF6 repo because we were using the MSBuild runner.\n"""
294,13513479,"b'Thanks, will fix.\n'"
294,13513749,b'Just public.\n'
294,13514084,b'Updated tests to no-op/pass with a TODO comment.\n'
289,13606823,"b""Shouldn't this be an error case, potentially handled by the BinaryExpression constructor?\n"""
289,13607092,"b'No, this is to deal with the case: [a].Foo == [b].Foo where a and b are currently resolving to separate queries. This will change once we start correlating on the server.\n'"
289,13607262,"b'Do we plan to support database semantics for null comparisons? If yes, this logic may need to change.\n'"
289,13607381,b'I am tracking this with #292\n'
289,13607522,"b""FWIW, I would say supporting database null semantics is low priority as long as we can support in-memory semantics efficiently (e.g. as long as the SQL we generate isn't uglier/less efficient than it can be).\n"""
289,13607960,b'+1 :smile: \n'
295,13656556,"b""Looks like this is a cache for ConstructorInfos to avoid calling MakeGenericType many times. This is good. However, some things to consider:\n- The Invoke call is still slow. Caching something that doesn't require any Reflection-based invocation is usually better. For example, cache a factory instance.\n- The most benefit in terms of caching will come when this service is rooted as a Singleton in the DI container, which I see you are doing. However, this then means that the cache needs to be thread-safe, which isn't currently the case. Consider using ThreadSafeDictionaryCache for this.\n"""
295,13656650,b'Can you add TODOs to make sure these get implemented?\n'
295,13657188,"b'I realize that the ""Database"" class and the ""DataStoreCreator"" class look like they are two places for the same functionality, and it could be that we ultimately end up going there. However, the intention at the moment is that the Database class is the API that app developers see for things related to the store--such as creating and deleting databases, but also access to connections, transactions, etc. On the other hand, the DataStoreCreator is the component responsible just for services around database creation and deletion. In other words, Database is a fa\xc3\xa7ade API that makes use of other services to do actual work. For these reasons I think the code for creating tables, etc. that is currently in this class should probably be moved to the DataStoreCreator implementation leaving this class as just a fa\xc3\xa7ade API. Also, I think it could be useful to expose AtsConnection here in the same way that we expose relational connections in the relational API.\n'"
295,13657657,"b'I would move this to the Microsoft.Data.Entity namespace. One of the big problems with extension methods is discoverability. Intellisense in Visual Studio (when not using ReSharper) will only find extension methods if the namespace is already being used in the source file. For this reason we often try to put extension methods into namespaces that are likely to be already used. This can be the namespace of the type that is being extended, but sometimes this doesn\'t help much because the type being used is likely not explicitly declared in the source file--for example, somebody doing context.Database.AsAzureTableStorageDatabase will likely not have a using for ""Microsoft.Data.Entity.Infrastructure"" which is where Database lives, nor will they likely have ""Microsoft.Data.Entity.AzureTableStorage"", which is where this extension currently lives. They are much more likely to have ""Microsoft.Data.Entity"" and hence putting the extension there makes it more likely to be discovered.\n'"
295,13658041,b'Invert the condition to remove the continue.\n'
295,13658152,b'Try and break really long lines\n'
295,13658189,b'public?\n'
295,13658335,"b'Configuring services in this way is interesting. It means that, assuming an application is using a single DI container, then it can either have batching or not have batching, as opposed to being able to use batching for some connections or some stores, but not others. This seems like a reasonable thing to me.\n\nHowever, one downside is that when somebody is not setting up their own service provider and hence not calling AddAzureTableStorage directly then there is no way for them to change this setting. This may be fine if there is a reasonable default that almost everybody will want to use, but perhaps not so good if it is a common thing that people want to change.\n'"
295,13658461,b'Consider using TryGet on the dictionary rather than catching an exception.\n'
295,13658964,"b""There seem to be a lot of places in the code where try/catch is used for control logic. This is usually not a good idea. Is it possible to refactor this such that normal (non-exceptional) code paths don't require running through a try/catch block, and especially not using the catch as a normal part of flow control?\n"""
308,13731081,b'Commonly referred to as column _constraints_.\n'
308,13731339,"b'Is there an object for the primary key definition? If not, it may be more useful to pass through all the parameters that were in `GeneratePrimaryKey`.\n'"
308,13733611,b'IDENTITY is not really a SQL constraint (though teorethicaly it could be considered one). \nAnother similar example is in the SQL generation for primary key where the code appends NONCLUSTERED. The method could be named GeneratePrimaryKeyConstraints but that would be a bit confusing considering that  from SQL point of view a primary key is a constraint. That is why I c chose Traits.\n'
308,13733740,"b'I thought about the same thing. This code is called from two execution paths, one when a table is created, the other when a primary key is added. In the first case we have a PrimaryKey object, in the second we have an AddPrimaryKeyOperation. Maybe I can create an AddPrimaryKeyOperation from the data in PrimaryKey so I can change the signature of this to take an operation.\n'"
310,13730746,"b""(This is the ALTER TABLE ... ADD FOREIGN KEY issue I'm currently working on.)\n"""
310,13731096,"b""Cool. It's not blocking me at all; just wanted to get some additional coverage.\n"""
314,13781911,"b""This looks like pretty general purpose functionality. Can you add a TODO to consider if this should live somewhere else or whether there is something in the framework that we could use? (I know k and desktop .NET  implement Convert.ChangeType, but it is not portable and throws when the conversion isn't possible). \n"""
314,13813443,"b""True. This functionality isn't specific to Azure Table Storage. I've added a TODO to generalize this.\n"""
314,13837962,"b""Looks like it could derive from existing ObjectArrayValueReader. Also, it shouldn't be necessary to check IsNull in ReadValue since the caller is supposed to call IsNull and not call ReadValue if IsNull returns true. You could add an Assert instead. Also it is possible that the original intentions of how IValueReader is used may not hold anymore.\n"""
316,13873783,"b""What's this?\n"""
316,13873870,b'Make sure project.json is updated and use build initialize to add this.\n'
322,13884751,"b'This good because it creates a compiled delegate to create instances. I\'m fine with it staying like this for now, and possibly for always. However, it is possible that for project-n the delegate created will be interpreted rather than truly compiled. This is one of the reasons we are avoiding creating ""compiled"" delegates where possible. Take a look at SimpleEntityKeyFactory and related classes. In these classes we avoid having to compile any dynamic code by creating a generic type for the factory using Reflection, creating one instance of this factory, then caching the factory instance such that it can be used over and over to create SimpleEntityKey instances without Reflection and without using any ""compiled"" delegates. All that being said, I am fine with leaving this code as is for now, especially since it is for ATS which does not currently intersect with project-n.\n'"
322,13885391,"b""Agreed. For now, I'm intentionally not caching instances to avoid storing an adapter for every entity in the table. This would be faster on the CPU in some cases, but worse for memory in others. These issues can be mitigated by limiting the cache size or using a different method of generic type construction. I'll add a TODO to investigate these options and their performance gains.\n"""
322,13885137,b'I talked to Arthur about this. I think it is worth having a TODO to consider doing what he described later.\n'
321,13838035,b'I thought we were not making Clustered first class in the API.\n'
321,13841592,"b'To me ""first class"" meant ""on the IIndex interface"". However, if clustered is SqlServer specific I will move it from relational to sqlserver extensions.\n'"
321,13866111,"b'Clustered vs. non-clustered is a general concept and equivalent functionality exists across many relational database systems but as far as I know very few (e.g. SQL Server and Sybase) allow you to specify it like this at index creation time, so I think moving it to be SQL Server specific is the right call.\n'"
320,13906350,"b'Can propertyBase be anything other than INavigation on this path? If not a cast may be preferable instead of ""as"".\n'"
320,13917486,"b'Given that IPropertyBase is a public interface the actual type could be something that is not INavigation. That being said in normal usage it currently will always be an INavigation here. But the idea here is to do something specific to navigations if the property is a navigation, as opposed to do one thing or the other depending on the type, so all in all I feel that the as is more appropriate here.\n'"
311,13734987,"b'EntityKey value could be null. Either add checking for nulls, or consider creating a NullEntityKey sentinel to avoid checking for nulls in multiple places.\n'"
311,13735134,b'Not sure that I understand the semantics of this key comparison code. What does it mean to order to arbitrary keys?\n'
311,13735185,"b'I wonder if these methods should be collapsed/consolidated, possibly with an enum for the value source--current value, original value, or fk snapshot.\n'"
311,13735321,"b'I hope this message never has to be understood by EF users! Does it ever escape? If not, why a message. If so, can we make the message a bit less implementation-specific and a bit more actionable?\n'"
311,13735392,"b'The reason this was IReadOnlyList is to avoid possible multiple enumerations of the IEnumerable, which can cause subtle bugs as well as having perf implemetations. Can we consider if we really want to use this with IEnumerables, and/or whether or not the IEnumerables elsewhere might be better replaced with something stronger?\n'"
311,13735567,"b""I think if we're going to make this change now then we need to also make the change to avoid setting the key properties (or any read-only property) as modified when the entity is marked as modified. Otherwise any code that sets the state to Modified (or uses the Update method) will throw in the update pipeline. I believe Music Store does this, for example.\n"""
311,13738188,"b""I'll use a sentinel\n"""
311,13738219,"b""There's no intrinsic significance. Just one way to sort the keys in a deterministic manner.\n"""
311,13738274,"b""This doesn't sound like a bounded set of possible values so enum might not be appropriate. How about a noop SideCar - CurrentValues?\n"""
311,13738318,b'This is a placeholder message. It is meant for users who override the default ModificationCommandComparer.\n'
311,13738350,b'Will do.\n'
311,13738365,"b""I'll review its uses.\n"""
311,13755698,"b'I think we should discuss. It looks like the requirement for ordering is quite pervasive, which means we have lots of code that needs to be updated to still sort correctly when we add new members, etc. I wonder if we really need to have things completely sorted in this way, or whether we can extract just the salient information and use that as a sort key.\n'"
311,13755757,b'Possibly a method that takes the sidecar at this level rather than a flag? We should discuss.\n'
311,13946108,b'Just use the field instead of having a private property for this?\n'
311,13946163,b'Ok\n'
311,13946319,b'Likewise\n'
335,13978378,b'Why extensions?\n'
335,13978621,b'So that the same code can be used regardless of which implementation of IEntityType is being used.\n'
335,13978777,b'Makes sense.\n'
348,14101605,b'This assumes that the caller ensures that newValue != oldValue. Moving ClearInverse before SetInverse may be a tiny bit better.\n'
348,14105603,"b'It is intended that this only be called when an actual change has been made, but I switched the order anyway to add a smidgen of robustness.\n'"
355,14106495,"b""I see that this mirrors DbUpdateException in the relational provider. Some form of update exceptions are probably common to all providers, relational or not, and there doesn't appear to be anything provider-specific in these classes, so probably these should be merged into one class in the core assembly. Feel free to do this as a separate checkin.\n\nAlso, we generally put code in the folder that corresponds to the namespace of the class except in cases where this is not practical--such as extension methods in external namesapces. So this should not be in an Exception folder.\n\nFinally, FxCop will complain for exceptions that don't provide a parameterless constructor. But we may not care. :-) \n"""
353,14087062,"b""We're going to make the schema name part of the table name.\n"""
353,14087095,"b""Initially, we're going to throw on cycles.\n"""
353,14087143,b'This will become a rename table operation.\n'
353,14087667,"b""Apparently, I've been over-thinking this. The referenced tables do not need to exist when the foreign key constraint is created. The check is only done on insert/update. :unamused:\n"""
353,14102201,b'This is just a heuristic. Users could add drop/rename operations in between.\n'
353,14103263,"b""There is nothing that calls ToList because the other parts of the stack use IReadOnlyList. Can change to IEnumerable but I don't see a good reason why.\n"""
353,14103389,b'It is currently used by the SqlServerDataStoreCreator. Why should it not be part of the contract?\n'
353,14103736,"b'If I am not mistaken a bunch of servers use this syntax, so it may be ok to keep here.\n'"
353,14103897,"b'In the SQLite implementation, I perform LINQ operations on the list and then call the base. I have to call ToList there.\n'"
353,14103951,"b""Some databases (like SQLite, SQL Server Compact, and Firebird) don't support doing this in SQL.\n"""
353,14103992,"b'There seems to be two commonly used standards. This one, and one like it without the `ON` clause.\n'"
353,14104077,"b""Where exactly? I'd prefer to not have TODOs that are not really actionable.\n"""
353,14104129,"b""Actually, it looks like a lot of major players don't have the `ON` clause: DB2, Oracle, SQLite, PostgreSQL\n"""
353,14104486,b'A TODO may be necessary here to remember to cover those cases. \n'
353,14104697,"b""Looks like it's used by add column, alter column, and create table. Create table already has this information. I suspect it's always going to be false for add column. So, just in alter column I suppose.\n"""
353,14104760,"b'The other option is to not use binding, but allow it to be specified in the alter column operation.\n'"
353,14104827,"b""Also, it doesn't seem to be generally used by the migrations pipeline.\n"""
353,14104950,"b'Ah, ok, missed ""ON"". Then it makes sense to move.\n'"
353,14105367,b'Ok then.\n'
353,14105712,"b'Well, depends on how you look at it. SqlServerDataStoreCreator is currently using the migrations pipeline to create/drop the database. And some databases support doing that in SQL. Anyway, my main goal is to have the TODOs resolved, and at this point I am not convinced they should be moved somewhere else.\n'"
353,14105987,"b'Currently I think it is required for add column as well, because the column can be later be made part of a key. And I think we already decided not to add anything to the operations to specify whether a column is key or not. We could separate the create table case but I am not sure it is worth doing.\n'"
353,14137718,"b'Thanks, will add.\n'"
353,14140045,b'Be careful not to iterate IEnumerables multiple times. \n'
353,14140747,b'Changed.\n'
353,14140795,b'Moved `ON` clause to SqlServer.\n'
353,14140958,b'@anpete will fix.\n'
353,14142020,b'Will leave as is and remove TODO.\n'
353,14142039,b'Will leave as is and remove TODO.\n'
354,14163834,b'Add a test for constructor argument checks\n'
354,14216906,"b""We decided some time back to not add these tests anymore because the overall value proposition was negative. However, we haven't been removing ones that are there. Also, if we ever move to a more sophisticated method of generating the checks using Roslyn, then we will likely need to start adding these tests again because, as with the Code Contracts approach, a Roslyn approach will, at least initially, likely have bugs around the non-obvious cases.\n"""
361,14162107,b'What is the default mapping for int properties? A na\xc3\xafve assumption is that int properties would map to INTEGER columns by default.\n'
361,14162203,"b""Won't this always resolve to the same CLR type? If so, why make the call for to get it?\n"""
361,14195226,b'int maps to INT. long maps to INTEGER which is 64-bit and has special semantics in SQLite.\n'
361,14195484,"b'No, it is intended to be extensible. We provide a default mapping at the ADO.NET layer of CLR types to column types (which is compatible with the System.Data.SQLite EF6 provider), but it may need to be tweaked for other existing databases.\n'"
361,14195639,"b'We could remove the ADO.NET mapping and only let you use long, double, string, and byte[] values, but EF would have to compensate to allow entities to use more types.\n'"
361,14216361,b'SQLite columns are confusing. :)\n'
361,14216740,"b""I didn't realize that the SQLiteTypeMap could be mutated. I see now that it is, although it appears that it is static and therefore global to the app domain. I wonder if this should go through the EF type mapping service rather than going directly to the ADO.NET provider? That would allow an EF app to change type mappings for a given database without affecting global shared state, although possibly in a less efficient way. Regardless, signing off on this.\n"""
361,14252667,"b""Yeah, this is an area that I think we still need to work out. I expect it will need to be configured per connection. I'll add a TODO about going through the EF service instead.\n"""
377,14301338,b'Do you need a generator != null test in here as well?\n'
377,14301384,b'Nit: why not just use serviceProvider and not define closureProvider at all?\n'
377,14302969,"b""GetGenerator should never return null, so I don't think that the check is needed.\n"""
377,14303092,"b""See http://blogs.msdn.com/b/ericlippert/archive/2009/11/12/closing-over-the-loop-variable-considered-harmful.aspx I recognize that the issue is fixed with C# 5, so maybe this code isn't needed, but it just makes explicit what the compiler would do anyway, so I think it's okay.\n"""
364,14251569,b'Validate args.\n'
364,14251589,b'Formatting.\n'
386,14378223,"b'Not sure what to do about those - should I create a similar test suite in relational and test it there? Also I did not remove Storage name from everywhere in compiled model - are we OK with doing that also? (Arthur mentioned that we want compiled model to be very low memory and inlined, so storing some of that in annotations may not be ideal.\n'"
386,14378543,b'Use `Check.NotEmpty()` for the column name.\n'
386,14378562,"b'In addition to the NotNull attribute, use `Check.NotNull()` on all public methods. \n'"
386,14414197,"b'Put a blank line after the Checks, for readability.\n'"
386,14414286,"b'@emilcicos, is this OK?\n'"
386,14419567,"b'Yes, it was a typo.\n'"
373,14419472,b'Why has Timestamp been split out? \n'
373,14419806,b'The purpose of the timestamp is clearer this way. Any concerns?\n'
373,14424729,"b""I can change to MigrationId instead if that is what we want but that shouldn't stop this from going in. Maurycy needs it for his change.\n"""
387,14430466,b'Do we need a SetTableName here as well?\n'
387,14431044,"b""Don't we have a ColumnName() extension method that we can use here instead of Where(...)?\n"""
387,14431260,"b'ToTable should probably go before other annotations. Also it may be better to have a GenerateEntityTypeAnnotations method that handles the special annotations (TableName, Schema)\n'"
387,14431346,"b'Similar to EntityType annotations comment. I would move this logic to a GenerateKeyAnnotations method, which can handle the special strings.\n'"
387,14431841,b'I am wondering whether it is better to return null if an annotation is not present. These methods may not have enough context to return a good name in case of complex mappings. Not sure what is best.\n'
387,14432020,b'ToTable?\n'
387,14432026,b'ToTable?\n'
387,14432158,b'Maybe this can return SchemaQualifiedName and then it can be reused below.\n'
387,14436529,b'Done\n'
387,14436584,"b'The problem is that ColumnName always returns something, even if the column name is the same as property name. Ideally, we would want to scaffold this call only in cases when database name is different than model name. I did change it to use property[""ColumnName""] instead.\n'"
387,14438513,"b""Original logic for storage name was that it would return Name, if the Storage name was not provided, i didn't want to change that, even though it does seem more explicit.\n"""
387,14438617,"b'SchemaQualifiedName does some extra magic that I wanted to avoid here (it basically strips away the quoting on type, if it was provided. So that if your table name was ""[Foo]"", you would get ""Foo"" back. We want all those names to be stored verbatim, so that table/key/column/whatever name is exactly what user provided.\n'"
387,14438663,b'Done\n'
385,14469962,"b""It is common to have a blank line after Check calls. Also, just a style thing, but I would probably inline requestContext instead of creating an explicit local. But it's fine either way.\n"""
385,14471407,"b'Thx! I need to send a new pr just for code formatting. I\'ll do that soon.\n\nOn Wed, Jul 2, 2014 at 10:13 AM, Arthur Vickers notifications@github.com\nwrote:\n\n> In src/EntityFramework.AzureTableStorage/AtsConnection.cs:\n> \n> > ```\n> >      {\n> > ```\n> > -            Check.NotNull(tableName, ""tableName"");\n> > -            return _account.CreateCloudTableClient().GetTableReference(tableName);\n> > -            get { return _account.Value; }\n> > -        }\n> >   +\n> > -        public virtual TResult ExecuteRequest<TResult>([NotNull] AtsRequest<TResult> request, [CanBeNull] ILogger logger = null)\n> > -        {\n> > -            Check.NotNull(request, ""request"");\n> > -            var requestContext = SetupRequestContext(request, logger);\n> > -            return request.Execute(requestContext);\n> \n> It is common to have a blank line after Check calls. Also, just a style\n> thing, but I would probably inline requestContext instead of creating an\n> explicit local. But it\'s fine either way.\n> \n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> https://github.com/aspnet/EntityFramework/pull/385/files#r14469962.\n'"
389,14489585,"b'Can this class be immutable? If Name changes, GetHashCode will return a different value...\n'"
389,14489846,"b'Good point. Yes, it should be immutable.\n'"
398,14682101,"b'Typo: ""string .This""\n'"
401,14683968,b'Consider adding this as an overload of IModel.GetReferencingForeignKeys()\n'
401,14684065,b'Is this this necessary?\n'
401,14684079,b'Will do.\n'
401,14684130,"b'Yes, because GetPrimaryKeyValue is now an extension method on IHazPropertiesInABag (or whatever it is called).\n'"
401,14684247,"b'Leave this test, change the assert to compare against NullEntityKey\n'"
401,14684313,b'Will do.\n'
401,14684523,"b""If the principal key is null wouldn't this return all 'dependents' that have a null foreign key?\n"""
401,14684789,"b""I'll add a test. :)\n"""
401,14685793,b'Use stateManager.Model.GetReferencingForeignKeys(entityType)\n'
401,14686046,b'Done.\n'
407,14742186,b'Re-enable the tests\n'
408,14742242,b'Note: `?` is an alias for `where`\n'
402,14689575,b'Ignore this. Will revert.\n'
402,14731769,b'Missing checks?\n'
409,14744274,"b'This was read-only before so that EntityType could keep its indexes in sync. If it is mutable, then EntityType needs some other mechanism to make sure indexes stay in sync.\n'"
409,14744380,b'I wonder if it is really worth doing another read here. How easy would it be for somebody to get into the state where too many rows were returned?\n'
409,14744829,"b""I'll revert this. It's interesting how the functional tests passed even though the indexes were wrong.\n"""
418,14884295,"b""I don't see any tests for column expression aliasing...\n"""
418,14889040,b'Take_with_single_select_many is one.\n'
418,14891653,"b'Ah cool, missed it.\n'"
419,14946059,"b""I know I've said it before, @emilcicos, but I really don't think the IConfiguration stuff belongs in this class...\n"""
419,14946116,b'Also tracked by #420\n'
419,14951684,"b'Can the args dictionary be empty, does this need to handle missing arguments, or will that be done later?\n'"
419,14953002,"b""That it doesn't belong here I am not so sure, I don't think it is theoretically bad to have it in MigrationTool, but as things are now it can be moved, maybe to Program.cs. Let me know if I should move that code.\n"""
419,14954003,"b""We ensure it's added up the callstack (in the PowerShell script), but this class is public... I'll add a TODO to consider validating this and other arguments.\n"""
419,14954044,"b""I'll add a TODO, we can address it later.\n"""
431,15019871,b'Store the strings as consts in an appropriate class\n'
431,15020228,b'Do you actually need to specify the Key again? If so this might be a bug.\n'
431,15020772,"b""This is intentional. The tests don't work when using composite keys. We have to do the same thing for Northwind.\n"""
437,15093536,"b""As a team we should probably be consistent in whether we always check for null/empty before passing to the base constructor, or only do the check here if the value is used inline. I typically only add a Check call here if I'm using the value inline and in other cases just put normal Check calls in the body of the base constructor.\n"""
436,15084180,b':sunglasses: This is so fun to use...\n'
436,15084223,b'Any name suggestions? I considered `New-MigrationScript` for the command and `Guarded` for the parameter.\n'
436,15084265,"b""Note, we don't build for tab expansions.\n"""
436,15084473,"b""I'll be tackling this next.\n"""
436,15084995,b'I should probably change it before merging since it spits out yellow on install. /cc @rowanmiller\n'
436,15093303,b'Sweet!\n'
436,15093407,"b'I like ""Script-Migration"" but I realize we should use approved verbs. Is there any way to disable the warning on install? :) Beyond that I can\'t think of anything better than New-MigrationScript. For the parameter I would stick with Idempotent. Most people won\'t know what it means in this context, but that is probably true with Guarded or anything else, and Idempotent probably makes the most sense once you do know what it means.\n'"
436,15093444,"b""Not a fan of having opening curlies on the same line. Is this a PowerShell convention, or personal choice? If the former, then fine. If the latter, then still okay, but just saying I'm not a fan. :)\n"""
436,15094179,"b""In some places it's actually necessary because of the way the language gets parsed. They may have a line continuation operator like in VB. I'm not a fan either, but I didn't want to fight the parser. Like I say, PowerShell is a psychotic language...\n"""
436,15094416,"b""Yes, it can be disable via the `-DisableNameChecking` parameter on `Import-Module`. Here is the specific warning.\n\n> Some imported command names include unapproved verbs which might make them less discoverable.\n\nI don't think discoverability is an issue since we'll list the commands in `Get-Help EntityFramework` and tell users about that on install.\n\nI'll disable the warning for now and we can discuss names during an API review.\n"""
440,15127407,b'Will the tests still work even though ATS cannot support transactions/rollback?\n'
440,15127546,"b""I didn't run them, but it should be the same as it's now for ATS\n"""
443,15182936,b'Is optionsExtensions guaranteed not null here?\n'
443,15182970,b'Compute this once in ctor?\n'
443,15183368,"b""I think we should be pipe-lining in this method. To do that, don't await each async call, but instead, stash the tasks and then use Task.WhenAll to await all of them.\n"""
443,15183380,"b'This should be async, no?\n'"
443,15184318,"b""Yep. You can't add a null extension.\n"""
443,15184354,b'Will do.\n'
443,15184509,b'Yep - just spotted that myself. Will fix.\n'
443,15185553,b'Is it guaranteed to be added here?\n'
443,15187196,b'We discussed and decided to just fire-and-forget all the tasks and then await the txn.ExecuteAsync() method (which will ensure all the tasks are complete) and then return the # of stateEntries if successful.\n'
443,15187264,"b""If it hasn't been added Extract() will throw.\n"""
438,15196017,b'What will this resolve to in cases where multiple ModelBuilderSelector classes are registered?\n'
438,15196176,"b'I believe DI resolves to the type most recently registered.\n\n.AddSingleton< TypeA , implementation>() overwrites any previous\nregistrations for ""TypeA""\n\nOn Mon, Jul 21, 2014 at 1:59 PM, Arthur Vickers notifications@github.com\nwrote:\n\n> In src/EntityFramework/Infrastructure/DefaultModelSource.cs:\n> \n> > -        public DefaultModelSource([NotNull] DbSetFinder setFinder)\n> > -        public DefaultModelSource([NotNull] DbSetFinder setFinder, [NotNull] ModelBuilderSelector modelBuilderSelector)\n> \n> What will this resolve to in cases where multiple ModelBuilderSelector\n> classes are registered?\n> \n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> https://github.com/aspnet/EntityFramework/pull/438/files#r15196017.\n'"
438,15196666,"b""So if I am using both the ATS and a relational provider in the same application I will need to have both convention builders registered and choose the correct one for the provider that is currently being used. It doesn't look like this will happen with the code as it is now unless I am missing something. This is the reason for going through the DataStoreSource/DataStoreSelector code for other places where we have provider-specific functionality. It allows multiple providers to be registered with the context instance selecting which one will be used and hence the set of services that will be used.\n"""
438,15237697,"b""Good point. I'll change this to run through the datastore selector and push the changes to this branch.\n"""
456,15365611,"b'They seem ordered, what do you mean by ""consider namespace ordering""?\n'"
456,15365937,"b'For example, putting System namespaces first.\n'"
456,15368738,"b'Ok, so changing the order from alphabetical to something else. Should probably say that, otherwise the comment may get deleted.\n'"
460,15425905,"b""I'll remove this. No longer overrideable by the config file - so can just have as a const.\n"""
460,15481484,b'txn: Prefer un-abbreviated variable names.\n'
460,15481591,"b""I'm not sure we need to support existing servers - just always start up the test one.\n"""
460,15481638,b'Do we need any of this now? We should just always start the server.\n'
460,15486764,"b""I find that very useful when I'm debugging - I can just start things up and e.g. put in pre-existing data or check things easily that way. Do you object if it stays?\n"""
460,15486797,b'Will do.\n'
460,15486902,b'See previous note. Plus want to make sure that there is only one server not matter how many tests are running on different threads.\n'
460,15488965,"b""I don't object to that specifically (although, personally, I think I would still find it easier to setup such data programatically, in a test).\n\nI do, however, think that this is approach is overly complex.\n\nHow about this: Use IClassFixture instead of an XunitTestFrameworkExecutor to control the Redis server. In order to determine if it is up simply try and connect to it. You can implement IDisposable if you want to tear the server down, but this is not required.\n"""
460,15489437,"b'I did originally do it that way but I intermittently got some strange ""unable to connect"" exceptions which seemed to be the result of the test running on a different thread in the VS execution engine and the timing of the Dispose() of the class fixture. I found that when I put the start-up/tear-down code in the XunitTestFramework I no longer saw those issues. Plus it seemed like it supported the future - where there will be many more such tests potentially running in parallel and I only want to start one server for the whole set no matter how many class fixtures there are.\n'"
472,15612769,"b""Have updated this to look for TEMP as well as TMP - just in case. Now I'll only throw if can't find either of them.\n"""
472,15612800,"b'Changed Environment.GetEnvironmentVariable(""TMP"") to tempPath.\n'"
470,15621278,"b'This is a bit orthogonal to the main changes in the PR, but we should talk about the need for escaping here.\n'"
470,15621833,"b'Curious, do we already support Any and All inside the query, e.g. not as the capping operators of the query, e.g. as in `categories.Where(c => c.Products.Any(p => p.Name.StartsWith(""A"")))`?\n'"
470,15652190,b'This is just for debugging.\n'
470,15652306,"b'Yes, but via client sub-query. This is an example of the async composition case we were discussing :-)\n'"
470,15653600,"b'Ah, I remember now.\n'"
470,15653768,b'Got it. Does the actual translation escape if you pass strings with wildcard characters to `string.StartsWith()`?\n'
477,15767276,b'Arg annotations?\n'
477,15768318,"b""We don't have that yet in the new stack for any of the operations. Will put a TODO to remember to add.\n"""
482,15773625,"b'This could be flattened to\n\n``` SQL\nSELECT COUNT(DISTINCT  c.[Address], c.[City], c.[CompanyName], c.[ContactName], c.[ContactTitle], c.[Country], c.[CustomerID], c.[Fax], c.[Phone], c.[PostalCode], c.[Region])\nFROM [Customers] AS c\n```\n\nNot necessarily a ton better but in my experience additional nesting makes things harder for both humans trying to read SQL and certain query optimizers trying to produce fast query plans :smile:\n\nPerhaps worth having a bug tracking un-nesting for this case?\n'"
486,15773904,b'Could you change tempPath to `Path.GetTempPath()` in `CanConnectToExistingRedisServer`\n'
482,15775262,"b""Doesn't this cause a spurious error when there's more than one matching row?\n"""
482,15779386,"b""@anpete pointed out that COUNT(DISTINCT exp)) only works when exp is one element. There is probably also a not nested translation based on GROUP BY translation but going in that direction doesn't look compelling. \n"""
480,15723808,"b""Totally open to naming suggestions... I really don't like this name :smile:\nI do want it to be specific to failed data store operation though, which is why I didn't go with the more generic DbException.\n"""
480,15767481,b'No need for string.Format here\n'
480,15767614,b'That name is decent. I think DataStoreException would also be good.\n'
480,15767731,"b'This should probably refer to ""data store""\n'"
480,15767842,b'Consider something like ExceptionInterceptor for clarity.\n'
480,15767866,b'Consider logging all caught exceptions\n'
480,15768127,"b'These tests look more functional, which is fine but consider moving them. I would also put all of the exception interception tests together in a new test class.\n'"
480,15775958,"b""Yeah that sounds better. I'll also move it to the .Storage namespace\n"""
480,15776327,b'Removed (and other instances in the same method)\n'
480,15776351,b'Renamed to DataStoreException\n'
480,15776473,b'Renamed to:\n- EnumerableExceptionInterceptor\n- EnumeratorExceptionInterceptor\n- AsyncEnumerableExceptionInterceptor\n- AsyncEnumeratorExceptionInterceptor\n'
480,15777562,b'Moved to new ExceptionInterceptionTest in EntityFramework.FunctionalTests\n'
480,15777612,b'NICE!  Thank you SO MUCH for getting this right :)\n'
480,15777763,b'@anpete  We still include the original exception as the InnerException. Do you think logging still adds value since we end up throwing an exception anyway?\n'
480,15781358,"b""Don't forget the message too\n"""
480,15782517,"b'Ah, duh :smile: \nIt\'s missing from the updated commit, but I\'ve changed it over now:\n""An error occured while running a data store operation. See InnerException for details.""\n'"
483,15774080,"b""Why wouldn't we always want the cloneCache available to any clone operation? Seems like something that should be assumed to be available and passed down to ensure any child-Clone action is using the same cache.  Perhaps a better name of cloneContext?\n"""
483,15774193,"b""Should the setter have internal access only to prevent accidental mutation now that we've had to remove the readonly on the underlying field?\n"""
483,15775989,"b'Initially I wrote it having the parameter, and further, each Clone method would add the clone to the cache, whether needed or not. While that looks more ""uniform"", it is only necessary in some cases. I was thinking that the graph structure is unlikely to change so I removed the parameter and kept it minimal. I can go back to what I had initially if you feel strongly about it, from my point of view it is probably ok either way.\n'"
483,15776187,b'The intent is to allow updating the model as we process migration operations. We have a RenameIndexOperation and thus it is needed to allow resetting the name. This happens in a different assembly (Migrations.dll) so it has to be public.\n'
483,15776555,b'I will add the parameter.\n'
483,15776960,"b'Will also change the name to CloneContext, just in case we want to add something else to it other than the cache, though at the moment that seems unlikely.\n'"
497,15886794,b'What does this do?\n'
497,15901049,"b'Says ""this code is not dead, even though there are no symbolic references to it""\n'"
488,15828253,b'typo in logic\n'
488,15828817,b'typo in key\n'
488,15829565,b'Why call ToUpperInvariant if you are comparing with StringComparison.OrdinalIgnoreCase?\n'
488,15829705,"b""Will change. (I was doing the compare differently in an earlier iteration and then didn't remove the ToUpperInvariant.)\n"""
499,15909333,b'I would like to chat about the possibility of having some runtime behavior in this extension method. I think it would be fine to track this as a TODO unless you already found a strong reason to always throw outside queries.\n'
499,15911090,b'Will create a bug.\n'
495,15849208,b'Use platform independent line termination?\n'
495,15890641,"b""As long as it matches the verification code it doesn't matter\n"""
508,16002719,"b""Nit: I see you've replaced OneToMany<T>(null, xxx) with ManyToOne(xxx) which is good. But just wondering is OneToMany(null, xxx) still legal and do we still have test coverage for it (either for expected success or expected failure)?\n\nOtherwise looks good. :shipit: \n"""
508,16002798,"b'Yes, we still have test coverage for it in the ModelBuilderTests and it still all works.\n'"
505,15961686,b'use string.Concat?\n'
505,15963667,b'@ilmax Can you explain why?\n'
503,16003052,b'Remove this dictionary and just do a scan on _selectedProperties.\n'
503,16003101,b'Why do you need this check?\n'
503,16003207,b'I find it clearer to put a line break after any pre-conditions.\n'
503,16003313,b'Why do we need this?\n'
503,16003439,"b'Re these two query methods, in our query framework they are idiomatically an "" entity query"" or a ""projection query"" so I would update the method names to reflect that.\n'"
503,16003586,b'Why do you need AsEnumerable here?\n'
503,16003662,"b'NorthwindQueryTests are the spec for provider query support. Just use those and if you encounter missing scenarios, add them to the base class so that all providers may benefit.\n'"
503,16004622,"b""I'm still finding a lot of problems with the ConnectionMultiplexer. Only way to debug was to have already started server - otherwise it frequently died as soon as it tried to connect - which meant I couldn't debug anything after that. Will update this when I address https://github.com/aspnet/EntityFramework/issues/487\n"""
503,16005049,"b'The scan would have to be performed every time GetProjectionIndex() was called. It\'s already called a few times even for the relatively small queries and small number of customer ""rows"" I have in the tests. If there were many rows or more complicated queries it would be called many hundreds or even thousands of times. Hence I though pre-calculating it was better.\n'"
503,16005138,"b""It was a hold over from the previous form of this code where we were looking up by name and I needed to do something if the name wasn't found. Will remove.\n"""
503,16005156,b'Agreed. Fixed.\n'
501,15961475,b'Implement Column.Equals?\n'
501,15961560,b'All protected virtual methods need arg annotations and validation.\n'
501,15964643,"b'This is used to determine whether a column was altered. It does not compare names because the algorithm can pair columns with different names (same property names), which will result in a column rename operation. Column.Equals would probably have to compare names.\n'"
501,15964680,b'Will add.\n'
501,15965320,b'Makes sense.\n'
503,16005259,b'Changed to GetEntityQueryObjectsFromDatabase() and GetProjectionQueryObjectsFromDatabase()\n'
503,16005370,"b""You're right. Not needed. Removed.\n"""
503,16005421,"b""Will add this to #487. I'd like to get these tests checked in as they make sure that people don't break Redis query scenarios but will update to use Northwind as well ASAP.\n"""
503,16006131,b'In general scans can be pretty fast for a small number of elements so there is likely a size under which scans are faster no matter how many times you need to do it. A dictionary also uses more memory. In general we are trying to not pre-optimize. I would replace this with a scan and then add a TODO comment to actually measure & optimize.\n'
503,16006429,b'OK. Will do.\n'
503,16006700,"b'This should _not_ be called as part of query execution, if it is then something is wrong. It should only be called as part of query compilation.\n'"
491,15888032,"b'There are two directions we can go about this:\n1. We can be strict and throw exceptions with explanatory messages every time we detect an inconsistency. The downside is that that does not allow for scenarios like, lets say, a table is created using a SqlOperation, then a column is added using MigrationBuilder.AddColumn, since the table will not be present in the database model.\n2. We can ignore inconsistencies (or produce warnings). The downside is that early detection of potential errors will not be available, they will likely show up when the SQL script is run.  \n'"
503,16007310,"b""OK, but bear in mind that, without these, we don't actually know whether query is working for Redis.\n"""
505,16008777,"b'Because string concatenation is bad. The compiler is able to perform some optimization, but rely on compilers optimization is a kind of lazy , and even worse using string + int? incurs in one totally avoidable boxing allocation.\n'"
503,16008794,"b""I've created an issue for it and assigned it to me - https://github.com/aspnet/EntityFramework/issues/509 \n"""
503,16009755,"b""My mistake - I thought it would be called once per row per property - it's removed now per Diego's comments anyway.\n"""
514,16090017,b'The table not existing is one scenario but is that the only exception that can be thrown? Do you want to catch both DataStoreException and DbException?\n'
514,16125845,"b""We should always throw that exception (that was the work I did last week to make sure we throw a DataStoreException when a query/save operation fails). It's definitely imperfect, but the purpose of this catch block is to detect that the table doesn't exist.\n"""
514,16125977,b'OK :shipit: \n'
516,16139586,b'Really needed?\n'
516,16139768,b'Seems more readable than () => null and should perform better\n'
516,16139913,b'Fair enough.\n'
516,16140012,b'Alternatively we can add another constructor to LazyRef that takes a value\n'
516,16140254,b'I would be okay with that.\n'
526,16187570,b'Throw some newlines into these tests to visually separate the arrange/act/assert parts.\n'
526,16187598,b'Extension method?\n'
526,16187908,b'Will do.\n'
530,16208281,b'Nit: minMethods and minMethod should be aggregateMethods and aggregateMethod?\n\nOtherwise :shipit:\n'
530,16208330,b'Will fix\n'
512,16092152,b'This is missing a call to ProcessCompositeOperation(null)\n'
512,16130899,b'Should I make this stuff public?\n'
512,16205487,b'Argument null checking throughout this class.\n'
512,16205848,"b'Yes, unless there is some specific reason for it to be internal. Typically the only reason we have internal surface in EF7 is when it impacts the usability of the public surface. Occasionally surface may be internal because it really is implementation detail that would never be accessed/replaced at the given level. It does not seem like either of these things are true here.\n'"
512,16205987,b'Also in several other places in this change.\n'
530,16209201,"b'@lajones Are you signing off on both commits? If not, this commit depends on the previous PR :-)\n'"
524,16149761,"b""This is used to generate code from the .cshtml file. It's basically a copy of code from the Diagnostics repo - we'll work out how best to share the code but just copying it and tweaking it for the moment.\n"""
524,16206203,b'Use the NotNull attribute stuff that we have in other EF projects.\n'
524,16206325,b'Can we be sure that Context is not null here? (Traditionally this is hard with exception types and hence it is usually worthwhile programming defensively.)\n'
524,16206465,"b'This is a lot of code doing a lot of stuff in a catch block, which is often not a great idea. Also, what is the expectation if any of this code itself throws?\n'"
524,16206550,b'Consider extract variable refactoring for ServiceProvider.\n'
524,16206587,"b'Also, use generic extension method `GetService<T>` where possible.\n'"
524,16206694,b'Or maybe investigate a way to do less in the catch block.\n'
524,16207029,b'Make public members virtual by default. Consider bringing over the static analysis test for this along with the ones for checking for the NotNull attribute.\n'
524,16207288,"b""Good point, at the moment we always set it, but I'll just skip the error page if there is no context set.\n"""
524,16207707,"b""Is it just a layout thing (i.e. refactor to new method) or the fact that we are running logic in the catch? \n\nError handling is something I still need to work out - the main diagnostic page just bails out and lets the rest of the pipeline handle the request by rethrowing the original exception (that may well be the best thing to do). At the moment, if this code throws you get the standard error page for the exception encountered here, which does hide the original exception (but maybe we could do something with combining the two using InnerExceptions).\n\nI'd be happy to swap to the 'rethrow original exception' approach for the moment if you think that is better?\n"""
524,16207886,"b""It's that it is actually running while handling an exception--extracting to a method won't really help. But I'm okay with this going in like this for now. I just think we should investigate if it can be done differently.\n"""
524,16208078,"b""I wondered why we didn't have a generic version... extension method and missing namespace duh :smile: \n"""
524,16208513,"b'Will do, tests are next on the list\n'"
524,16208692,"b""Sounds good, the try/catch approach is what the standard error page uses. Let's discuss though as I agree it would be cleaner without it.\n"""
530,16212696,b'@anpete - yep - both commits. Go for it.\n'
532,16215258,"b""This doesn't look very clear to me. A couple of reasons that pop to mind:\n1. In the overload that takes a property access the generic argument is there to provide the starting point, but if you just remove the property access it doesn't quite read in the same way, i.e. `ForeignKey<Product>()` per se doesn't convey to me that Product contains the FK in the same way that `ForeignKey<Product>(e => e.AlternateProductId)` conveys that AlternateProductId **_is**_ the FK.\n2. My first intuition when looking at this overload is that the empty parenthesis assert that the FK isn't present in the CLR type, i.e. that it overrides the convention. \n\nI understand that I might just need to adjust my mental model but I would still want to discuss this and hear what others think.\n"""
532,16215571,b'@divega Should I check in and then we discuss or should I back this out?\n'
532,16216472,b'I am fine either way. We can always back it out later if necessary. Please check it in if it is blocking other changes. Hope we can chat tomorrow anyway.\n'
532,16216507,"b""@divega Okay, I'll check in, I have two more commits on top of this.\n"""
535,16253757,"b'We should convert all of these to JSON arrays.\n\n``` json\n{\n    ""code"": [""**\\\\*.cs"", ""..\\\\Shared\\\\*.cs""]\n}\n```\n\nThis allows the really long ones to span multiple lines.\n'"
544,16281521,"b'The change in type name here is slightly unfortunate. One option would be to call the non-convention mb something like: ""SimpleModelBuilder"".\n'"
544,16295600,"b'Agreed that the convention builder should be called ModelBuilder, especially since the ModelBuilder in the old stack was always a convention builder. Not sure about the name of the non-convention model builder. We should discuss with Rowan.\n'"
519,16320448,"b""This reference should be under the k10 framework. (I'll fix in a future PR.)\n"""
551,16320933,b'This hurts my eyes\n'
551,16321007,b'Why are these deleted?\n'
551,16321061,b':sunglasses: \n'
548,16299022,"b'Do you know if this is ordering by current culture, invariant culture, ordinal? And the follow on question--which is most appropriate here?\n'"
548,16311100,"b'The default seems to be InvariantCulture, case sensitive.\n\nCurrentCulture may be preferred in some cases, for example \'z\' is after \'\xc3\xa4\' with InvariantCulture, while \'z\' is before \'\xc3\xa4\' with sv-SE. Also, in some cases IgnoreCase may be preferred. Some may want a custom order, based on the ""importance"" of the column. Ideally we should provide a way to customize the column order (I can add a TODO for that), but for now I think the default is fine.\n\nMSDN says the following about InvariantCulture: ""Use culture-insensitive linguistic string comparison if you want to handle linguistically relevant strings from multiple cultures in a consistent way.""\n'"
548,16311588,"b'This made me think of another aspect. If someone specifies a primary key ""B"", ""A"", then ""B"" is somewhat more ""important"" than ""A"" so we should not order the primary key columns by name. What do you think?\n'"
548,16311937,"b'I could actually remove all OrderBy calls which will result in the following order: primary key columns first, in the order they were specified, followed by other columns in the order provided by entityType.Properties, followed by fk columns in the order they were specified.\n'"
548,16314977,"b""A couple of points:\n1. It is very desirable that the order is deterministic across machines, i.e. independent of the culture, so invariant case sensitive seems the right choice.\n2. For the order of PK members I think we should try preserve the same order that the key members have in the model. This can help someone looking at the database directly and trying to debug, etc.\n\nFor FKs it isn't super clear, we could try to preserve the order defined in the model when they don't overlap overlap.\n\nRe the custom ordering, isn't this just the order in which things get in the scaffolded code? If the user then reorders thing in the scaffolded code I would expect use to use whatever order they specified. Does that work?\n"""
548,16316144,"b'You are right, the user can reorder the columns in the scaffolded code. \nI will remove the OrderBy call for primary key and foreign key columns. That will give us primary key columns first, in the order they appear in the key, followed by other columns ordered by name using InvariantCulture, case sensitive, followed by foreign key columns in the order they appear in the foreign keys, excluding duplicates (fk1.C1, fk1.C2, fk2.C3, ...).\n'"
551,16325299,b'Because after discussion with @divega and @ajcvickers we decided to not throw there.\n'
551,16325934,"b""I don't think assignments belong in `if` or `return` statements either. But I'm all for artistic license, so whatever floats your boat. :boat:\n"""
551,16325313,b'@AndriySvyryd You should get that checked out :astonished: \n'
551,16373837,"b""I am not sure I got this right though. Why wouldn't these be cancelled?\n"""
551,16374653,"b'If it is because these are unit tests and are not hitting the actual query pipeline then it is fine, but I think in a ""real"" scenario if any of these operations are requested with a cancelled cancellation token we should throw from somewhere.\n'"
551,16377679,b'Correct. I added a test for actual provider cancellation to the FTs.\n'
559,16425442,"b""I would just use 'configuration' for the local variable, no underscore.\n"""
559,16425540,b'Seems like you could move this test to SqlServerModificationCommandBatchFactory line 43 and catch the exception earlier?\n'
560,16426210,"b""Nit: is it OK to assume relationalDatabase != null? I know we don't intend to use migrations on non-relational DBs but is there anything that enforces that or should we have the test?\n\nOtherwise all looks good. :shipit:\n"""
558,16389716,"b""Shouldn't that be $fullIntermediatePath?\n"""
558,16389785,b'What happens if something goes wrong within the catch{} section?\n'
558,16389822,"b""Doh, thanks. (I'm in the process of creating a VM to actually test this code.)\n"""
558,16390580,"b""Then it's unhandlable here, and the user's VS must be really screwed up. :wink: (The error message will be displayed to the user.)\n"""
558,16390635,"b""OK. If there's nowhere you can just output an error message then :shipit: \n"""
558,16399573,b'Wiil this work on non-English VS? http://social.msdn.microsoft.com/Forums/vstudio/en-US/eb032063-eb4d-42e0-84e8-dec64bf42abf/how-can-i-create-items-in-visual-studio-in-a-localeindependent-way?forum=vsx \n'
558,16425250,"b""Wow, what a pain! Personally, I'm fine letting the `catch` block handle this. The only thing `NewFile` gives us over `OpenFile` is that it lets the user decide where to save it.\n"""
559,16429327,b'yes\n'
559,16429635,b'SqlServerModificationCommandBatch might then end up with an invalid value if used from a different class or the test would need to be duplicated.\n'
560,16431274,b'I think it is OK. An instance of DbMigrator will not exist in the context of non-relational databases. To have one by mistake is not easy because it requires a bunch of relational stuff. \n'
559,16432137,b'I prefer catching early where you can but OK :shipit:\n'
552,16429541,b'var?\n'
552,16429673,b'var\n'
552,16430559,b'Consts?\n'
552,16431037,b'with PascalCase?\n'
552,16431178,b'Yes.\n'
569,16506200,"b""Shouldn't AddProperty throw on duplicated property or update the keys when replacing it?\nWhere do the duplicated properties come from?\n"""
569,16518852,"b""Yes, it should but currently it replaces the existing property without updating the keys. Maurycy will open a bug about that. Regardless of that bug's outcome this fixes the tests.\n"""
574,16551094,b'Can you add a TODO to replace this with a CollectionFixture when they work properly?\n'
574,16558607,b'Sure - np.\n'
583,16624562,"b""Note, we're using a modified version of Ix-Async that we've uploaded to our MyGet feed.\n"""
583,16624633,"b'Note, because the KRE loads a specific version of Immutable Collections (for Roslyn), we have to reference different versions for different target frameworks.\n'"
573,16686839,b'[NotNull]?\n'
573,16686967,b'[NotNull]?\n'
573,16686979,b'[NotNull]?\n'
573,16686990,b'Defined as NotNull on the interface this implements.\n'
573,16686992,b'Defined as NotNull on the interface this implements.\n'
590,16730971,b'Are there tests for this?\n'
590,16731326,b'If I remember correctly this cast is not necessary.\n'
590,16731521,b'Many of the Northwind async tests hit this. I have a negative case test in the next PR.\n'
590,16731577,b'This implements IAsyncEnumerable<T> implicitly.\n'
590,16731652,"b""This won't work for indirect implementations\nsee http://stackoverflow.com/questions/503263/how-to-determine-if-a-type-implements-a-specific-generic-interface-type\nAlso applies to other places with similar checks\n"""
591,16731693,b'Talked about changing this so accessing Current is not required. Will be done as a separate change.\n'
590,16731974,"b""I know. We have a method in TypeExtensions for that case. This case doesn't matter.\n"""
582,16688266,b'This should be called automatically and can be removed?\n'
582,16688408,b'Left it accidentally after a refactoring. Will remove.\n'
589,16689078,"b""Note, we're using a modified version of the Ix-Async package that we've uploaded to our MyGet feed.\n"""
589,16689119,"b'Note, because of Roslyn we need to reference a different version of Immutable Collections on KRE and non-KRE.\n\n@davidfowl Do I need to file a bug anywhere for this?\n'"
589,16689727,"b""Not sure what you would file. There'll always be a difference.\n"""
581,16726160,b'Should this live on Property?\n'
581,16788769,"b""It would have to live on IProperty as that's what property is. That seems a bit much to me so I'll go ahead as is - but let me know if you disagree.\n"""
581,16790094,"b'Seems like this would be useful in metadata, @ajcvickers? \n\nEither way, you should use SharedTypeExtensions.UnwrapNullableType.\n'"
581,16791351,"b""@anpete I looked at that. But it's internal. If I try to make it public I get clashes since it's included in both EntityFramework and EntityFramework.InMemory (and similarly for EntityFramework.Redis). We could make it public and move it into EF so that it's only defined once?\n"""
581,16791813,b'Take a look at how it is used by other projects...\n'
581,16792146,b'I think it is useful to include in core metadata. It is something that both we need to know and is useful for external consumers doing meta-stuff like code gen.\n'
581,16792628,"b'@ajcvickers Would adding a getter to IProperty, e.g. GetUnderlyingType or GetUnwrappedType, work?\n'"
581,16792814,"b""Yes, put it on IProperty. It should be a read-only property, not a method. UnderlyingType is a reasonable name, but I'm open to other suggestions.\n"""
581,16792853,b'What @ajcvickers said.\n'
581,16793091,"b""OK. UnderlyingType it is. If no-one objects I'll remove the SharedTypeExtension UnwrapNullableType() method at the same time and make everything point to UnderlyingType instead.\n"""
581,16793669,"b""Never mind. Can't remove in every case. Will do it where I can.\n"""
594,16859258,b'This was made private and a public setter on the EntityState property was added instead based on some previous code review feedback. To be consistent leave this private and use entry.EntityState = EntityState.Added instead.\n'
594,16859369,b'Will do.\n'
595,16866222,"b'I am not happy with the design of this class, I am open to any suggestion on how to improve it without affecting perf.\n'"
612,17135660,b'I assume this is a temporary implementation. Perhaps add a TODO?\n'
600,16925984,b'extra line\n'
642,17389411,b'How is this set when not building from VS? Is it set by K?\n'
642,17390039,"b'Also, is there some other way we can already detect this rather than using a new environment variable? Maybe @bricelam knows?\n'"
642,17390622,"b'Yes, the K build adds it.\n'"
634,17391211,"b'Naming, but I think ""referencesPrincipal"" might be better than ""pointsTo""\n'"
634,17395024,"b""I'll leave as is for now--we can discuss in naming review.\n"""
647,17443283,"b'Note, this class will change significantly in my next PR anyway...\n'"
650,17500949,b'[NotNull] annotations?\n'
650,17504818,b'Specified in the base class on the abstract method that is overriden here.\n'
656,17554701,"b'Should these say ""DbContext"" for clarity?\n'"
656,17554816,"b'Sure. ""DbContext-derived type""?\n'"
656,17554913,"b'The second sentence doesn\'t read that well to me. How about: ""Specify which context to use by providing its fully qualified name.""\n'"
656,17554934,b'As above.\n'
656,17554961,b'...where? How to fix?\n'
656,17555008,b'Consider the command pattern as a way to factor this.\n'
656,17555127,"b'Not sure, we often just say ""DbContext"" to mean that...\n'"
656,17560484,"b""Agree - just DbContext is fine (we used to say 'context' because we had ObjectContext as well)\n"""
662,17636350,b'Remove the corresponding product code?\n'
662,17636509,b'Will do.\n'
669,17710303,"b'I would prefer to have the contextType parameter after model in all the methods below, because model is the primary input.\n'"
669,17710879,"b'The name IsForContextType is a bit misleading. This would read ""Migration assembly is for context type (type)"" but (type) is not a context type. I would rather have a GetContextType(Type type) that retrieves the attribute.ContextType and then do a comparison of the types in the linq queries above.\n'"
669,17734777,b'Will change.\n'
669,17734795,b'Will change. I struggled to find a good name. :smile:\n'
664,17634397,b'This is a copy the tests that used to be in ExceptionInterceptionTest.cs - updated to work with logging rather than exception wrapping.\n'
664,17794847,b'readonly\n'
664,17794868,b'We usually have a blank line after Checks.\n'
679,17822094,b'Roslyn all the things! :wink: I found some [examples of compiling](http://roslyn.codeplex.com/SourceControl/latest#Src/Samples/CSharp/APISampleUnitTests/Compilations.cs) under the Samples directory in their repository.\n'
679,17822100,"b'This path is specific to our build. In VS 14 using the kprojs, the path will be different. In fact, there may not be files on disk at all if the tests are run without building first.\n\nYou should be able to get to a MetadataImageReference for the in-memory assemblies using the ILibraryManager service. @davidfowl would know more.\n'"
679,17829738,b'Yea this should be using the LibraryManager to get the compilation export. Scaffolding does something similar.\n'
679,17835794,"b""Is that approach supposed to work when building our .csproj files from VS and running the tests there? At first glance it doesn't look like it will work.\n"""
679,17860476,"b'First look for an assembly location, then fallback to the LibraryManager compilation export. It will always have a location in the .csproj files.\n'"
679,17862683,"b""Yeah, that's what I thought. I was just wondering if I was missing something.\n"""
679,17929235,"b'It might be better to compare the `migration` and `compiledMigration` objects. If any information is lost during code generation, it will not be caught by these tests.\n'"
679,17929283,"b'Again, it might be better to compare the models instead to catch any data loss during generation.\n'"
679,17933179,"b'Most of the tests are targeting a granular aspect of code generation and the output is compared with an expected string, so potential information lost should be caught there. This part validates that the generated code is functional. Plus the models code (metadata and migrations) does not have ""equivalency"" methods already implemented and I don\'t feel like writing them now, especially considering that there are other tasks to complete.\n'"
679,17933744,"b'Agree, but I would prefer to do that at a later stage if needed.\n'"
679,17936203,b'Sounds good. We could even run them through the model differ and assert that no operations come out.\n'
679,17936289,b'This is awesome! Thanks for taking the time to make this a general-purpose component.\n'
679,17936445,b'Sounds good. Definitely not worth implementing equality checking in the model at this stage.\n'
692,17981939,"b'Nit: use Environment.Newline instead of ""\\r\\n"".\n'"
692,17983427,"b""If cancellation is requested wouldn't you want to abandon running the accumulated tasks and just return 0 immediately?\n"""
692,17995556,"b'The accumulated tasks have already been started, only they themselves can cancel.\n'"
692,17995923,b'ok\n'
708,18066722,"b""typo in 'Genertor'\n"""
708,18066918,b'No need to use async and await when returning a task. Also why not implement GetNextGeneratedValueAsync using StringIncrementAsync?\n'
708,18067823,"b""I was trying not to get into async yet. I have another issue coming up to support the needed async APIs in Redis and was waiting for that - but this inherits from BlockOfSequentialValuesGenerator - which needed an async copy of the API to also support SqlServerSequenceValueGenerator.\n\nThat said your suggestion should be a small fix. I'll try it and see if it causes any issues. If not I'll update.\n"""
708,18067836,b'Will fix.\n'
698,18059571,"b""Use a Dictionary, it shouldn't be that much slower\n"""
708,18069109,b'Does cause an issue - will wait to do all async together.\n'
709,18107663,b'Consider using a smaller base type for the enum if space is important?\n:shipit: \n'
709,18112880,"b'Possibly, but only if field packing in the class can take advantage. Leaving as is for now.\n'"
755,18315034,"b'The previous ordering of usings was the agreed one - System etc first, then others alphabetically.\n'"
755,18315288,b'will change\n'
760,18345566,"b""What does it mean to get a primary key for a specific property or properties? Does this mean try to get the primary key but only if it matches the properties, otherwise don't get the primary key even though it may exist? This seems confusing to me.\n"""
760,18345637,"b""There was a fairly strong desire from some people to support params in these methods. I don't really mind either way.\n"""
760,18346144,"b""I don't think it is appropriate to provide a core API that asks for an FK based just on the properties of the FK. I think when we discussed FKs we came to the conclusion that having two FKs with the same properties and the same referenced key was not useful. But having many FKs that share the same properties but which reference different keys at the principal end is normal and common.\n"""
760,18346711,b'According to MSDN using == for two strings results in ordinal comparision. http://msdn.microsoft.com/en-us/library/system.string.op_equality(v=vs.110).aspx\n'
760,18346798,"b""I think Remove methods should be no-op if the item doesn't exist. This is the general pattern used for most collections because it usually isn't useful to throw and forces callers to use an explicit check before calling Remove in cases where they might not know whether the item exists or not.\n"""
760,18347152,"b'We need to make sure that when we remove an existing piece of metadata and replace it with a new one any annotations are copied over. However, this could be a problem where the annotations only make sense before the move. I have a note to file an issue on this; it may require some more thought.\n'"
760,18347259,"b""I prefer Any. Is it not optimized for IReadOnlyList like it is for IList? I would like to see some quick perf numbers and/or get David's opinion on it.\n"""
760,18347336,"b""This is an ambiguous message. It's perfectly valid to add more than one FK that reference the same set of properties, so long as they reference different principal keys.\n"""
760,18347450,b'I would like to get some input from Diego and/or Andrew on this. Index is such a general concept used in so many ways that it seems like it may be necessary to allow two index objects attributed in possibly provider-specific ways that both reference the same set of properties.\n'
760,18347619,"b""We used to get push back from localization about including dynamically formatted lists in messages. I think its okay from a pragmatic perspective, but its worth being explicit that we're consciously doing this.\n"""
760,18359762,"b""I'll remove it\n"""
759,18349177,b'Basest?! A new entry on the wall of shame for programmer-invented new words. :clap:\n'
760,18370273,"b""We've discussed this and concluded that supporting this is not necessary.\n"""
760,18370317,"b""I'll revert this\n"""
760,18375683,"b'We should only remove metadata added by convention, so all annotations will be readded by conventions.\n'"
760,18375716,b'Will revert\n'
760,18375788,"b""We decided it's not valid anymore.\n"""
760,18375820,b'Index will be restricted to be unique on a given set of properties for now.\n'
760,18375958,b'Will match by value and return the removed item or null if nothing matched.\n'
718,18312831,b'The changes in this file are not as scary as the diff. The migrator is conceptually the same for the most part. Mainly I moved code around and split a couple of methods but the diff is not smart enough to figure that out. It may be easier to follow by looking at the full file than looking at the diff.\n'
718,18370064,"b""Should we specify IsolationLevel? Shouldn't this be up to the provider and/or user?\n"""
718,18370110,b'It looks like this is only ever called with one statement.\n'
718,18370887,b'Will this fail on a non-English machine? (assuming we localize our resources)\n'
718,18371781,"b'In any case, serializable is super expensive. Is that what we had in the EF 6.x stack?\n'"
718,18372470,"b'I think I wrote it like that so I can mock it, but it is not needed anymore, so I can call the implementation directly.\n'"
718,18372558,b'Good point. Will redo to use Strings.\n'
718,18372602,b'I think so. I will double check and create a work item to make it configurable.\n'
718,18372862,b'Not sure it is worth making configurable. We should discuss with @anpete if there was a good reason to user serializable in the EF 6.x stack and otherwise change both to not specified. \n'
718,18418908,b'Leaving it as Serializable as we discussed. Someone can easily override ExecuteStatementsWithinTransaction and use a different IsolationLevel if needed.\n'
718,18418946,b'On second thought I will leave the method as is in case someone needs to override the default behavior for executing outside transaction.\n'
792,18479567,"b""don't iterate twice, just write:\n\n```\nforeach (var property in foreignKey.Properties.Where(p => p.IsNullable))\n```\n"""
792,18483083,"b""I'll evaluate the performance of your suggestion and take it accordingly. Thanks.\n"""
801,18486240,"b'Yes, there was actually a vertical tab character here.\n'"
792,18489246,b'Based on conversation lets use Any() unless the code is in a real hot path and something else is measurably better.\n'
791,18467787,b'Are these strings supposed to be localized?\n'
791,18469480,"b'Just following suit with the other K tools... :smile: But yes, they probably should be eventually.\n'"
792,18489456,"b""Although @divega just looked up the code and it isn't quite as I remember it, so maybe we should use Count. :-)\n"""
806,18492366,b'Is this a thing we are doing now? :question: :question: \n'
806,18492409,b'I find it more useful than plain CanBeNull in this case\n'
785,18409399,b'Will remove this line - no longer needed.\n'
785,18488351,b'Not an async method.\n'
785,18488417,b'We typically want to do polymorphism vs conditional here\n'
785,18488467,b'See above re polymorphism\n'
785,18488729,b'Take a look at how IQueryMethodProvider is used in relational.\n'
785,18489015,b'Do you want me to pull IQueryProvider down into EF core so that any provider can use it? Or replicate that setup in Redis?\n'
790,18423799,"b""I'll revert this :tired_face: \n"""
792,18501529,"b""I don't know if it impacts performance, but it's abvious, that this is suboptimal code - iterating twice and creating a list object, that will have to be GC'ed.\n"""
785,18539724,b'Move this to the compilation phase. i.e. Pass in the query.\n'
785,18539765,b'As above.\n'
785,18539944,b'Could use ternary here.\n'
785,18546013,b'Done. Also found I could remove the IQuerySource.\n'
785,18546028,b'Done - as above.\n'
785,18546212,b'Done\n'
798,18491781,b'These type of exception should probably have a explanatory messages unless there is no way that this will ever get called.\n'
798,18492003,b'Better message.\n'
798,18492126,b'Why was this change needed?\n'
798,18494295,"b'Because the sequence data type can be smallint, int, in which case ExecuteScalar returns Int16, Int32 objects that cannot be cast directly to long, unless I am missing something.\n'"
798,18494575,"b'Ok. Will add something like ""SQLite does not support sequences.""\n'"
798,18494624,"b'It won\'t be called for SqlServer or SQLite but if someone writes a new provider that uses sequences and doesn\'t override the method they can get the exception. Will add a message like ""Override to generate SQL for renaming a sequence.""\n'"
798,18499352,b'copy/paste sequence instead of table\n'
798,18520360,"b'So are we saying that people must override these methods? If so, why are they not abstract?\n'"
798,18520899,"b'Previously we only used 64-bit sequences and hence we always got back a long. Its good that we now support sequences of other sizes but raises some questions:\n- Does Migrations use the size of the property to determine the size of the sequence to create?\n- If so, what if multiple properties of different sizes share the same sequence?\n- We already convert from long to the target type, if necessary, it seems we are now potentially converting from the target type to long and then back to the target type. This may not ultimately matter, but can it be avoided?\n'"
798,18535440,"b""I don't remember why they were not made abstract and I can't think of a reason why they shouldn't. Probably they had an implementation initially. You are right, abstract is better, will change to that.\n"""
798,18535887,"b""1. Yes, Migrations use the data type of the property to determine the size of the sequence.\n2. Not sure what happens when the sequence reaches the maximum value. I guess it is provider specific. SqlServer has CYCLE, NO CYLCE. The question still remains regardless of size. Plus, if a BIGINT sequence was used for an int column how is the existing code handling values out of range?\n3. Maybe it can be avoided, I didn't give it much thought because it is more an EF metadata question. Migrations can do whatever we decide to support in metadata.\n"""
798,18540860,b'By default SqlServer throws exception if the max value is reached.\n'
813,18556425,b'Wondering - should `NullLoggerFactory` and friends be moved to the Logging repo so anyone can use it?\n\n@lodejard @davidfowl @bricelam \n'
813,18556724,b'The Mvc repo also has [the same files for testing](https://github.com/aspnet/Mvc/tree/dev/test/Microsoft.AspNet.Mvc.Core.Test/Logging)\n'
813,18556866,b'Oh yuck. @SonjaKhan can you log another bug in the https://github.com/aspnet/Logging repo to move these over there? Should get triage approval before doing it.\n'
813,18557484,b'@Eilon https://github.com/aspnet/Logging/issues/33\n'
813,18592357,b'I defer to the opinion of @anpete.\n'
813,18594120,b'Sounds good.\n'
841,18685020,"b""After talking to @halter73, @HaoK and I don't understand why we want to take this change. The proposed name seems more confusing than the old one. @loudej, @davidfowl, any thoughts?\n"""
841,18686989,"b""We had discussed adding app.UsePerRequestServices() as the method that takes no arguments. I don't think we talked about changing app.UseServices(services=>{}); at the same time. I think there was an assumptions that they were thought of as an overloaded set, but that might not be the case. \n"""
841,18687690,b'I thought we were only chaining the no args version of this method\n'
841,18688678,"b""Why would the version that takes no arguments be called UsePerRequestServices? Are we talking about a method that will be invoked inside Startup.Conifgure and that doesn't need to take any arguments because Hosting will call Startup.ConfigureServices as appropriate, or is this a different thing?\n"""
817,18677868,b'Maybe this is okay because of the way this is used but in general this kind of resolution is dangerous because the principal and dependent types can be the same.\n'
817,18677899,b'Never mind. I guess if they are the same it returns the same thing. :-)\n'
817,18678248,"b""These methods can now return null, but I couldn't figure out how the null value is handled.\n"""
817,18678363,"b'They will never return null if configurationSource is Explicit. So null needs only to be handled in conventions, once they use this API.\n'"
817,18682694,"b'Makes sense,\n'"
826,18666242,"b""I would add some tests about what happens if you try to remove an entity by type and that type doesn't exist in the model. Similarly by name. And similarly what happens if you try to remove but the list of entities is empty.\n\nOtherwise looks good.\n"""
836,18683723,"b""I don't like that this is internal, although I see why and it is useful from the places it is used below. I know that I also said previously that it was confusing to have this as a public method. Maybe we can make it a public method with a more descriptive name? Maybe TryGetPrimaryKeyForProperties? Bit long, I know. Open to other ideas.\n"""
841,18733516,"b'Okay so it looks like ConfigureServices gets called by hosting regardless of which overload gets called, so shouldn\'t these methods have the same name?\n\nI added the following test just to verify that having a ConfigureServices and then passing in a Action(IServiceCollection) add both sets of services.  Although it does mess up the options (the ConfigureServices options get ignored, so I need to investigate that behavior more)\n\n```\n        public void ConfigureServicesUseServices(IServiceCollection services)\n        {\n            services.Configure<FakeOptions>(o => o.Configured = true);\n            services.AddTransient<IFakeService, FakeService>();\n        }\n\n        public void Configure(IApplicationBuilder builder)\n        {\n            builder.UsePerRequestServices(services =>\n            {\n                services.AddTransient<FakeService>();\n                services.Configure<FakeOptions>(o => o.Message = ""Configured"");\n            });\n        }\n\n        [Fact]\n        public void StartupClassWithConfigureServicesAndUseServicesAddsBothToServices()\n        {\n            var serviceCollection = new ServiceCollection();\n            serviceCollection.Add(HostingServices.GetDefaultServices());\n            var services = serviceCollection.BuildServiceProvider();\n            var manager = services.GetService<IStartupManager>();\n\n            var startup = manager.LoadStartup(""Microsoft.AspNet.Hosting.Tests"", ""UseServices"");\n\n            var app = new ApplicationBuilder(services);\n\n            startup.Invoke(app);\n\n            Assert.NotNull(app.ApplicationServices.GetService<FakeService>());\n            Assert.NotNull(app.ApplicationServices.GetService<IFakeService>());\n\n            var options = app.ApplicationServices.GetService<IOptions<FakeOptions>>().Options;\n            Assert.NotNull(options);\n            Assert.Equal(""Configured"", options.Message);\n            Assert.False(options.Configured); // REVIEW: why doesn\'t the ConfigureServices ConfigureOptions get run?\n        }\n\n```\n'"
841,18736529,"b""Ah the weird behavior I'm seeing with options I think might be related to the fact that OptionsServices are registered twice here, once for the ConfigureServices method automatically, then again for the UseService(services => { }) call\n"""
841,18737487,b'Sounds like a reason to stop calling ConfugureServices implicitly. \n'
844,18733697,b'Why are we explicitly prohibiting using an unsigned type?\n'
844,18733873,"b""Basically because they don't work for SQL Server through most of the stack. It is possible that for the Migrations aspect of sequences they could work, but I don't know--the old EF7 code that this is replacing supported these types so I kept the same set. We have an issue on the backlog to support all types everywhere, but I could file a specific issue for sequences if you like.\n"""
844,18733931,b'just add a todo with that issue number\n'
844,18733968,b'Will do\n'
850,18735975,b'Nit: set up DaneelOlivaw Sequence with different block size so that this test can have different result from the one above it? Otherwise :shipit:\n'
850,18736079,b'I think that would then make this test the same as Block_size_is_obtained_from_specified_sequence() below.\n'
850,18736151,"b'Oh, I see. OK never mind then :shipit:\n'"
840,18780047,b'There may be objections to this name. :-)\n'
840,18780426,"b""I'm the first to object, but I couldn't come up with a better name yet... so I left this really bad one in place so that we would change it when it comes to API review :smile: \n"""
856,18738121,"b'This test will fail if TestContext has only the constructor that takes DbContextOptions, being unable to find a DbContextOptions service (notice that the test registers an IOptionsAccessor&lt;DbContextOptions&lt;TestContext&gt;&gt;). What should happen in that case?\n'"
856,18738146,"b'It is not clear what service to query for, so I coded this such that it starts with IOptionsAccessor&lt;DbContextOptions&lt;ContextT&gt;&gt; and falls back to DbContextOptions&lt;ContextT&gt;, IOptionsAccessor&lt;DbContextOptions&gt;, DbContextOptions.\n'"
856,18762562,"b""In general we can try to resolve the following types in this order:\n1. `IOptionsAccessor<DbContextOptions<TContext>>`\n2. `IOptionsAccessor<DbContextOptions>`\n3. `DbContextOptions<TContext>`\n4. `DbContextOptions`\n\nBut 1 is the only one that is really important to resolve automatically even if the constructor doesn't explicitly asks for it, because that is what `AddDbContext<TContext>` will make available. \n\nI would be fine with supporting the others only via an explicit constructor, but I would like to hear what @ajcvickers and @rowanmiller think about it.\n"""
856,18762706,b'I think it is either a negative case (i.e. the exception is expected) or we would need to add to the service collection what the context constructor is expecting. Not sure this was your question though...\n'
856,18778966,b'Can we be sure that an ITypeActivator service is available? How does it get added?\n'
856,18779140,"b'How does this IOptionsAccessor stuff normally get added? That is, in a normal app scenario how does it get in the service collection?\n'"
856,18779180,b'Is there a way for an application context instance to get options in its constructor without jumping through hoops or is the OnConfiguring method now the only easy way to get access to options in the context instance?\n'
856,18779210,b'What is this used for and why is it internal?\n'
856,18779310,"b""Does this need to be on the DbContext class and does it need to be internal? It seems like it could be separated out and be a normal public method, either as a service or as a static method if making it a normal service doesn't make sense because of the time it is called in the pipeline.\n"""
856,18779626,"b'I would like to understand what the options are for getting options into the context instance. We should then define constructors on DbContext that work with that, which would then allow people to ""override"" these constructors in their derived context classes. After all that we can see if it makes sense to do anything automatic if such a constructor is not overridden. Hopefully it will not be very useful, in which case we will only need to support 1.\n'"
856,18781903,"b'Unit tests only. I should probably add a comment, or maybe there is a better way to test that the external service provider is used.\n'"
856,18782077,"b""I don't know. I would also like to understand better the scenarios around ITypeActivator and DbContextOptions to form an opinion. Here I did what Diego asked.\n"""
856,18783660,"b""I preferred to have the ThreadStatic field declared as private, so I put it on DbContext together with the static method. This practically hides the hack from anything outside DbContext. If we think it is useful to have public surface for this we can either make the method public or have another public method in some other place that calls the one on DbContext. Or we can do what you suggest and make the ThreadStatic field internal. I don't mind either. Not sure what is best.\n"""
856,18785640,"b'TypeActivator is one of the basic services of DependencyInjection. It is added very low. It could still be missing, if e.g. it is not an ASP.NET application. We can wrap and throw a nicer exception in that case. Whatever we are doing elsewhere for similar cases.\n'"
856,18785837,"b'The alternatives for getting options into the DbContext are:\n1. Any constructor in which we leave the options as an argument\n2. Service location using IServiceProvider, which I am proposing we only do for DbContextOptions<TContext>, which is the one that AddDbContext<TContext> will register in DI.\n'"
856,18786011,"b""We don't have a general pattern for elsewhere. We discussed a pattern for logger factories, but it hasn't been implemented. I believe Emil was going to follow up with Lou or whomever else is appropriate as to what the expectations are around how logger factories should be added/chained. That would allow us to make an appropriate call for dealing with no factory being present and allow us to do something to deal with this across the different consumers rather than just for EF.\n"""
856,18786206,"b'So if a context has DbContextOptions or DbContextOptions<TContext> as a constructor argument and the normal pattern for options is used in Startup.cs, then this will ""just work""? Or do they need to do something special in Startup and if so what?\n'"
856,18786441,"b'Not sure what information is missing to make a call. We can either pass the option instance to the context constructor as an argument (we get to choose which constructors we have) or have the constructor locate the service in the ""magic"" path. I am saying that the only case in which it seems compelling to do service location is `IOptionsAccessor<DbContextOptions<TContext>>` because that enables a parameterless constructor to work with `AddDbContext<TContext>()`. For all other cases it seems reasonable that customers add constructors that take options and pass them to the base constructors. Those will work with both direct instantiation and DI. \n'"
856,18786562,"b'by normal app, you mean ASP.NET app or not and ASP.NET app? @HaoK can answer better.\n'"
856,18786698,b'So this gets added as part of the AddDbContext call when the lambda is used?\n'
856,18786723,b'I think we can finish those details later this week. @rustd needs this enabled to be able to add it to the templates.\n'
856,18786781,"b'Be good not to need it. Is there a way to test without needing access to internals, or can stuff be factored differently to test without needing access?\n'"
856,18786857,b'I would move it all out of the context and make it all public.\n'
856,18787075,b'Will remove it and try to find a different way to test.\n'
856,18787170,"b""Let's then add a TODO and/or a bug for this.\n"""
856,18787625,"b'The ""normal"" pattern will be `AddDbContext<TContext>(Action<DbContextOptions<TContext>)`. If user wants that to be resolved by DI they will have to have `IOptionsAccessor<DbContextOptions<TContext>>` in their constructor. If we don\'t put a constructor that takes that in DbContext they can do the same thing you need to do today, e.g. call the base with .Options on their own constructor.\n'"
856,18787860,"b""Okay. I think we need to understand the value of the constructor that just takes DbContextOptions and how we expect to to be used in both ASP apps and other kinds of app. I don't think we need to do it before this code gets checked in, but I think we should understand it in general soon since I think it can be quite confusing right now to know what to do if I just want access to the options from inside my context instance.\n"""
856,18787968,"b'The `IOptionsAccessor<>` service is added only once as a open generic at a lower level, IIRC in Hosting, but the AddDbContext will add the service that will feed the options to the accessor (until recently called IOptionsSetup<T>) in DI.\n'"
856,18787993,b'It then seems that right now that only 1 is useful. But as I said above we should understand the scope of how DbContextOptions is used in various types of apps with/without DI.\n'
856,18788091,"b'The options services get automatically added during the app.UseServices(services => { }) lambda in startup. We are considering moving the registrating to hosting instead, or somewhere else lower (perhaps even in DI).\n'"
856,18788171,b'For this test you can consider just adding OptionsServices.GetDefaultServices to your service collection instead of directly adding an options accessor\n'
856,18788362,"b""I want the details to be encapsulated and the DbContext intellisense in normal usage not to be affected. This implementation is simple and gives you that. If we can find something else that is good from that perspective I am fine with that, but let's check in what affects the templates ASAP.\n"""
856,18788635,b'Do the `DbContextOptions<TContext>` typically add more option properties or is this just the way to associate options instances to particular DbContext types?\n'
856,18789280,"b""If you use the most common pattern everywhere else right now it would be for DbContext to have an Options property which is guaranteed to be initialized by every constructor.  So there could still be one primary constructor which took an instance, which the DI constructor fed the appropriate IOptionsAccessor.Options into.  \n\nChild ApplicationDbContext's should be able to just use the .Options property.  This is similar to what the Security classes do today, they pass the IOptionsAcessor to a base constructor which ensures it is initialized properly, and then they continue via .Options in its derived constructor\n"""
856,18791387,"b""I think being able to pass DbContextOptions into ctor is super useful, especially when your app uses DI but for testing you just want to create the options and pass them in. The `IOptionsAccessor` thing is difficult to understand, so I don't think we should expose those from the ctors.\n\nSeems like there is a lot of questions about how all this stuff actually works, so we should discuss in person rather than trying to solve it here.\n"""
856,18794217,b'I made the change Arthur suggested. I added a DbContextActivator with a public field and method.\n'
856,18795135,b'Move to Infrastructure namespace.\n'
856,18795165,b'Expose as property\n'
856,18795167,b'Will rename this to CreateInstance.\n'
837,18806571,"b""Why do we need this dto? Doesn't a concrete migration have all of this info?\n"""
837,18806637,"b'We need it when we add a new migration, generate code, etc. to pass information about the migration to be created.\n'"
837,18839960,"b'Oh, is this the analog of ScaffoldedMigration in EF6?\n'"
837,18842249,"b""No, it practically specifies a migration, so we don't have to pass the fields as separate parameters. The Migration class cant be used there because the upgrade and downgrade operations are specified as method calls instead of collections of operations.\n"""
854,18924154,b'I think this line is unnecessary but I am ok with it.\n'
880,18930764,b'Talked to @anpete about the fact that `GetFieldValueAsync<T>` could be replaced with `GetFieldValue<T>` since apparently we are not using SequentialAccess.\n'
880,18930887,b'This applies to other calls below.\n'
874,18930054,b'These need to be public?\n'
874,18930125,b'I could make them protected\n'
874,18930161,"b'As above, maybe IPropertyDefaults.IsConcurrencyToken? \n'"
874,18930478,"b'Yeah, just wondering if they add a bit too much clutter to the surface.\n'"
886,18931228,b'One less level of indentation for the last line\n'
870,18932682,b'Will file a bug on making method like this non-async again when we can remove the HACK below.\n'
870,18933049,b'#889\n'
877,18929718,"b""Looks good. Is there any problem if the user later mutates the DatabaseErrorPageOptions so it no longer has EnableMigrationCommands set but you've already set it up to use the migrations endpoint here?\n"""
877,18930127,"b""No problem, we'll still honor that in the error page and not display the button.\n"""
877,18930464,b':shipit:\n'
899,18970064,b'Helper method for adding explicit annotations?\n'
899,18970520,"b""If annotations are added to the model directly they are explicit by default.\nI'll refactor the whole BasicModelBuilder class later.\n"""
878,18964723,b'I will move this to a separate pull request and add unit tests. It is something I noticed missing from the unique constraints support.\n'
878,18976238,"b'This should still be registered as ModelDiffer (i.e. `.AddScoped<ModelDiffer, SQLiteModelDiffer>()` otherwise it breaks components such as the migrations commands that rely on the differ and request it from DI.\n'"
878,18976575,b'What about the case where DataType is null on one property but not the other? Is the correct column type used for the one that is null?\n'
878,18977965,"b""Scrap that, just discussed with others and Migrator and ModelDiffer should be handled thru DataStoreServices since you can have multiple providers registered. I'll work on this change for the existing code to unblock the migrations commands.\n"""
878,18982140,"b'This pull request should fix that already (see changes in MigrationTool.cs). We still register the Migrator with AddScoped&lt;Migrator, SQLiteMigrator&gt; and the fix queries for Migrator, then uses it to get the ModelDiffer. We can try to put them into DataStoreServices instead, though as far as I can tell, that may require adding some migration related interfaces into the core assembly.\n'"
878,18982467,"b""Currently we create an AlterColumn in that case since sourceColumn.DataType != targetColumn.DataType, though it may be a no op if the implicit DataType is the same. I can either try to improve that for beta or add a TODO/Issue because it doesn't seem as important. I can definitely add a unit test to verify.\n"""
878,18983216,"b""That pattern runs into the same issue because then you have two Migrator's registered when you have two providers.\n"""
878,18984718,"b'I may be missing something, but it seems to me that every property/column has a data type and that it should be obtained before any diffing happens. The diffing should not care at all where the data type came from--by convention from the provider or because it was explicitly specified.\n'"
878,18985177,"b'When generating C# code for the column specification, like c.Int(dataType: ""X"") it is preferable to not include the dataType parameter if it was not explicitly specified. For that reason column.DataType is not set by DatabaseBuilder if a DataType annotation does not exist on the property. The SQL generator uses the type mapper to get the implicit data type. Maybe there is a better way to handle this?\n'"
878,18985348,b'So then how does the generated SQL make sure it has the correct column type? Does it use the TypeMapper itself or does it duplicate the type mapping logic?\n'
878,18985419,b'Uses TypeMapper.\n'
878,18985581,"b'If Column was a view over IProperty or had an IProperty reference, then the code generator could check for the annotation instead, while column.DataType could be always set.\n'"
878,18985614,"b""I'm going to sign off on this for now. However, I think this should be revisited as part of #853.\n"""
902,18985278,b'Need test for oldConfigurationSource == null?\n'
902,18985418,b'Already there\n'
902,18985703,b'Never mind. Brain freeze.\n'
904,18985717,b'@ajcvickers - OK with adding this?\n'
904,18985806,"b'Fine for now, but we may ultimately need a RelationalDataStoreServices between these two classes.\n'"
904,18986113,b'Agreed.\n'
904,18986408,b'Yes.\n'
904,18988788,b'Will you file a bug for that?\n'
904,18989162,"b""I don't think there needs to be a bug. We should add it when we need it, unless you mean to try to protect against breaking changes if we don't need it before RTM?\n"""
904,18990203,"b'I just meant for the thought not to be forgotten, even it is just for API review, so whatever works.\n'"
904,18990291,"b""I think we can just add it if/when needed. It shouldn't be a breaking change to introduce a new type between two existing ones.\n"""
755,18993406,"b""Hey @maumar, don't override this. Rather, pass typeof(bool) to the base ctor.\n"""
907,18989834,b'This should resolve #810\n'
919,19049231,"b""If you're OK that it is no longer an error to have a status code >= HttpStatusCode.BadRequest then :shipit:\n"""
919,19055270,"b""I've added another method to this file in f1f43cfec3b898debcce3cf7936acc1e7f5a8dc1\n"""
922,19067523,b'This will resolve #896. @davidfowl was also looking into it...\n'
923,19099973,b'This was causing a build warning.\n'
930,19183485,"b'maybe name those classes Product603, MyContext603 - i can imagine more similarly named entities will end up in this file\n'"
912,19040324,"b'This needs to be:\n\n``` XML\n<PackageReference Include=""Microsoft.Bcl.Immutable"">\n  <TargetFramework>portable-net45+win8+wpa81</TargetFramework>\n  <Assemblies>System.Collections.Immutable</Assemblies>\n</PackageReference>\n```\n'"
912,19042731,b'Updated and working correctly\n'
912,19054180,"b'I think the idea was to change these to something like\n\n``` C#\nthrow new Exception(\n    string.Format(\n        ""The property \'{0}\' on entity type \'{1}\' could not be found. Ensure that the property exists and has been included in the model."",\n        name,\n        typeof(TEntity).Name));\n```\n\nYou can find the strings in [src/EntityFramework/Properties/Strings.resx](https://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework/Properties/Strings.resx)\n'"
912,19054222,"b'For these, you can just inline the old code\n\n``` C#\nvar typeInfo = typeof(TProperty).GetTypeInfo();\nreturn !typeInfo.IsValueType\n    || (typeInfo.IsGenericType\n        && typeInfo.GetGenericTypeDefinition() == typeof(Nullable<>));\n```\n'"
938,19290248,b'No need to change naming here as these are nested private.\n'
938,19291197,b'Make these private and remove the bug number.\n'
938,19291214,b'Assert the SQL in these tests.\n'
950,19318403,"b'It might be better for these to be abstract with no implementation since the default implementation is, for a ""correctly"" written provider, wrong. I\'m not sure why I didn\'t do this originally--it might have been an oversight.\n'"
951,19349102,b'How does line 697 prove that the options service has been replaced (I believe it has been - just not sure that this test proves that)? Otherwise looks good.\n'
951,19349297,"b""It doesn't. I spent half an hour trying to figure out how the options stuff worked such that I could do something other than the default, then gave up. The test at least shows that things still work even if it has been added first, and I don't think things would work correctly if it was added twice.\n"""
951,19349402,b'OK :shipit:\n'
952,19322872,b'What do the trailing ForSqlServer calls do?\n'
952,19322904,"b'Can we make this test consistent with the rest of the query tests? Ideally we want it to be provider agnostic and also we want to assert the SQL. Perhaps you could move it to MappingQueryTest - It currently uses Northwind but you could change the test to use ""dbo"", which would have the added benefit of not requiring fixture ddl.\n'"
952,19349433,b'Nothing; probably a copy/paste error. Will remove.\n'
952,19350048,"b""The MappingQueryTests that you wrote yesterday now cover this case because they specify a schema which was previously ignored and is now included. This test is actually not really a query test, but an end-to-end test for creating a database with an arbitrary schema, saving into that database, and querying from it. I originally wrote it to use Migrations as well, but that doesn't work yet. I would like to leave it as a useful end-to-end regression test.\n"""
952,19350870,b'Fine by me. Heads up @AndriySvyryd \n'
951,19364098,"b'@HaoK Heads up that because of this change you may be able to do some cleanup in the Identity tests as well. \n\nAny recommendation on this test? \n\nAlso, any nuance around registering the default `IOptions<>` from inside `AddEntityFramework()` that we should be aware of?\n'"
955,19362378,b'?\n'
955,19362556,b'Thanks :-)\n'
951,19366440,"b""@SonjaKhan Wanted to give you visibility on the fact that `services.AddEntityFramework()` will be adding the LoggerFactory service by default if it isn't already in the service collection. This is done to simplify testing and applications that are using DI and EF but are not ASP.NET vNext Web applications (i.e. they don't get the service automatically added by Hosting).\n"""
951,19374314,"b""I would suggest something like a FakeOptionsManager that just returns null for every option and verifying that null behavior in the replacement test.  I don't think anything actually would fail if you register the options services twice, as replacing the services with the same types should just be a no-op.\n\nThe only caveat with options is with service containers breaking things (IEnumerable<IConfigureOptions> aren't aggregated across containers), but since those don't appear to be involved here, should be fine.\n"""
958,19419569,"b""I haven't finished reviewing yet, but it looks like these changes will resolve Issue #633.\n"""
958,19420008,"b'This is interesting. How often do you think this will fail as used by these tests, if you have any idea of that? Also, can you file a bug to look into integer generation for ATS that is suitable for production code?\n'"
958,19420346,"b'As I understand it from talking to @bricelam, in terms of concurrency issues when tests are being run in parallel, there will be one and only one test fixture created for each test class. I think this means that as long as there is a 1:1 relationship between test fixtures and classes, then this approach will not result in two classes attempting to initialize the database twice. But if more than one test class uses the same fixture, then there will be an issue. Do we, or can we, ensure that there is a 1:1 relationship between test class and fixture, or are concurrency issues around database initialization not a problem for some other reason?\n'"
958,19423467,"b'@ajcvickers, assuming that no two fixtures share a database. E.g. NorthwindQueryFixture and MappingQueryFixture both use the Northwind database. This is (was?) handled by concurrency protection in the specific concrete TestDatabase class.\n'"
958,19423571,"b""Nate added this. I don't think this would cause any failures. I think that the perf is what we should be worrying about. At least in SQL GUIDs destroy index perf, but ATS might not be as susceptible to this. Filed #961\n"""
958,19423618,b'Use fluent api to set table names?\n'
958,19423713,"b""@anpete That's still accurate\nIn the future we should use ICollectionFixture that has the desired behavior, however it currently doesn't work.\n"""
958,19423859,"b'If TestDatabase ensures no concurrency issues, how is that working here?\n'"
958,19423890,b'Why do we need provider-specific derived contexts?\n'
958,19423967,b'Will do.\n'
958,19424122,b'Good point. Forgot about moving this to TestStore.\n'
958,19424180,b'Not sure this change makes things any better. Could just have a Sql prop directly on the base?\n'
958,19424526,b'To contain logic that is provider-specific and model-specific\n'
958,19424741,"b'@AndriySvyryd oh, yeah, that looks like it _should_ work :-)\n'"
958,19425048,b'Will do\n'
958,19425383,"b""That's what fixtures are for. It would be great if we didn't need to create yet another provider specific artifact when creating a new test collection. Simpler to just standardize on fixtures as the single place where configuration is performed. \n\nSome other potential disadvantages: \n- Derived types mean we are more likely to hit context caching issues like we did in the old stack.\n- A single context type better tests our ability to work against multiple providers (from one context).\n"""
958,19425970,"b""Our SQL guids don't :smile: \n"""
958,19426157,"b""The fixtures are just for perf benefit of sharing read-only instances. Some tests, like OptimisticConcurrencyTest do not have anything that can be shared and thus don't use fixtures.\n\nIt would be beneficial to test sharing the same model between different providers, but then the FunctionalTest project that contains the models would have to reference the providers and become provider-inclusive instead of provider-agnostic.\n"""
958,19427441,"b'""The fixtures are just for perf benefit of sharing read-only instances. Some tests, like OptimisticConcurrencyTest do not have anything that can be shared and thus don\'t use fixtures.""\n\nFixtures are a way to set up the ""context"" that one or more tests depend on. Given we are using them already, with the base/derived pattern, to me, it makes sense that we just standardize on a single, consistent pattern, rather than having multiple ways of setting up tests. What is the advantage of having both fixtures _and_ derived contexts?\n'"
958,19427926,"b""I would agree if we needed fixtures in all tests. Using a fixture that doesn't have any state is misleading.\n\nAnother benefit of using derived contexts is that it's closer to the typical use case of customizing the model by overriding OnModelCreating.\n"""
958,19428777,b'I prefer having derived contexts and fixtures only as necessary.\n'
958,19429150,"b""I don't think a fixture is just about state. It is about setting up the _context_ under which tests execute. Creating test collection specific models is a perfect application of fixtures IMHO. \n\nRe derived contexts, we are _not_ advocating creating provider specific derived contexts. In fact, this is something we will actively discourage and I think this is another reason why we don't want to do it in our FTs.\n\nAgain, given all that, and that having a single, consistent approach is desirable, what is the disadvantage of just using fixtures?\n\n@bricelam, @ajcvickers, @divega - Any thoughts?\n"""
958,19431916,"b""By using fixtures only when necessary we make it more explicit what tests are safe to share state. I've only ran into caching issues when sharing the service provider between mutating tests and this is an easy mistake to make if they use a fixture to setup the service provider. I believe that in xUnit.net the fixtures _are_ only about sharing data.\n\nIMHO having provider-specific code to create the model outside the context is even further from what we advocate.\n"""
958,19435433,"b'""IMHO having provider-specific code to create the model outside the context is even further from what we advocate.""\n\nBeing able to create the model outside the context is a fundamental ""building block"" API that is there to support scenarios just like this one. It allows for explicit, fine-grained control over the configuration of services for a specific context. Additionally, we still want the tests to run as fast and so needlessly re-initializing the entire stack per test seems like the wrong approach. \n'"
964,19444443,"b'Nit: I would add the word ""relational"" before database providers.\nOtherwise :shipit:\n'"
964,19447311,"b'Are we calling these things ""providers"" or ""data stores""?\n'"
964,19491825,"b'Discussed with @anpete, @bricelam, and @ajcvickers  and decided we\'ll use ""data store"".\n'"
972,19501975,"b""Shouldn't this be named GenerateValueOnAdd?\n"""
972,19502200,b'That is probably a better name.\n'
972,19502295,b'Use FAPI?\n'
972,19502367,b'Will do.\n'
972,19503191,"b""I don't think that it's correct to call this property IsIdentity. If the values are coming from a sequence I wouldn't expect IsIdentity to be true.\n"""
972,19503757,"b""I agree. However, there are lots of TODOs/issues in this code based on the idea of removing the special Migrations model so I decided to do something which somewhat fits with the current Migrations model where this concept is called identity even when it isn't while keeping the mapping from the core model to the Migrations model simple. On looking at the code in Migrations it seems to me that a lot of the stuff around this doesn't work correctly. For example, I can't see how store computed properties are appropriately mapped or round-tripped. Hopefully this will get fixed when the issues referenced above are fixed. Also, I couldn't think of a better name.\n"""
972,19504186,b'Just calling it GenerateValueOnAdd seems more correct for now\n'
972,19504275,b'OK.\n'
976,19569156,"b""I know it's not really part of the change you are making, but the pattern of setting the partition and row key to define a primary key definition and then immediately replacing the primary key definition with a different one seems problematic since the store thinks items have one identity while the EF thinks they have a different identity. I think it would be interesting to consider the relationship between identity and partition and row key in ATS, and also the implications of trying to reuse the same tests for different providers when the model is different for those providers.\n"""
976,19569447,"b""Yes, that's the second point in #633, right? I'll leave that one open.\n"""
976,19569577,b'Yes. I was kind of hoping you would just have a clever idea of how to make it all work. :-)\n'
976,19569724,b'So was this code broken before?\n'
976,19569736,b'Not of the top of my head. Besides we need to have some work for Nate.\n'
976,19569765,b'Yes\n'
976,19569850,"b""I'm probably being dumb, but can you explain?\n"""
976,19570092,"b'Before it returned true if there were any entity types in the model, regardless whether they were deleted or not. \n'"
976,19570166,"b""One of the things you get with a derived context with DbSets is that entity types are included in the model by convention. This means you often don't have to call OnModelCreating at all for models that are built by conventions. With this pattern you will have to call OnModelCreating always. It would be nice if that didn't have to be the case.\n"""
976,19570260,"b'Okay, got it.\n'"
976,19570512,"b'Currently yes, but I think that set discovery should be a convention on ModelBuilder instead of being a responsibility of ModelSource.\n'"
976,19571164,"b""That's an interesting idea. In the old stack some people had quite strong opinions that the model builder should not be coupled in any way to the context. But maybe it can be done in an abstract enough way that the coupling is avoided. Also, when would the convention run? I.e. Would the entity types already be in the model when OnModelCreating is run? I would file an issue on this unless you are already tracking it as part of the convention work.\n"""
976,19572177,"b""Filed #977\nThe convention needs to run as soon as the ModelBuilder is created so we could have the ModelBuilderFactory to call it to avoid invoking virtual methods from the constructor.\nI don't see a big problem with the ModelBuilder being coupled to the type of the context. This would give us ability to support other conventions, perhaps some that use annotations on the context types or set properties.\nHowever if we don't want that we could make the ModelBuilderFactory to perform the discovery.\n"""
989,19636736,"b""This change was missed when the bulk renames were done but didn't fail because the generated code file was updated rather than being regenerated. Needed to update this time as I regenerated based on cshtml.\n"""
989,19638551,b'I strongly believe we should petition to change the official spelling of this word.\n'
995,19684796,b'Why do we want to change SaveChanges to be called for each customer?\n'
995,19684956,"b""I originally had the () and I think they were removed in @AndriySvyryd 's code cleanup a little while ago.  is it best form to have the parentheses or not?\n"""
995,19685253,"b""Resharper removes them, but it's ok to leave them.\n"""
995,19685277,"b""I'll remove it.\n"""
995,19685356,b'Because the entire batch is larger than EF supports. I was getting an error indicating that our command was over the limit per single query. This is probably a Sql Server limitation. The keyword here is: batch.\n'
995,19685433,"b""This is a bug, I'll fix it next week.\n"""
995,19685516,"b'ok, should we put a note to change the test when the fix goes in?\n'"
995,19685654,b'reference #974\n'
995,19685838,b'Thanks!\n'
1016,19967542,b'Why internal?\n'
1016,19967666,"b""So it doesn't run\n"""
1016,19967771,b'Does that work for all runners?\n'
1016,19967886,"b'Yes, unless you run it explicitly.\n'"
1032,20048333,"b""It's better to get rid of this Entity. and include the namespace.\n"""
1024,20092881,b'May want a better variable name here :wink:\n'
1011,20098285,"b""This method uses the runtime type of the passed object to determine the operation type, while the other methods all use generic parameter. It probably won't matter, but it probably should still be consistent.\n"""
1040,20116923,"b'You are calling EnsureDatabaseCreated not EnsureCreated, and true is returned the first time and false thereafter. So old name for test seems better? Similarly (just for name) for the non-persistent test below.\n\nOtherwise looks good :shipit:\n'"
1040,20122626,b'Will fix in next check in.\n'
1011,20171195,b'The generic version cannot be called with a reference to the base class.\n'
1011,20171707,"b'If I create a class derived from AddColumnOperation--say, MyAddColumnOperation--and add an instance of this with Add it will add it to the operations list  for MyAddColumnOperation, but if I add it with AddRange<IEnumerable<AddColumnOperaton>> it will add to the operations list for AddColumnOperation. And there is no way using the Add method that I could get my operation into the list for AddColumnOperation.\n'"
1011,20172015,"b""Good point. Didn't think about that.\n"""
1011,20178643,b'Changed to generic method and updated code such that the call with reference to base class is not needed.\n'
1062,20378175,b'Any reason to not just do this in the SQL generator for DropDatabaseOperation?\n'
1062,20378343,"b'Rather than doing this as a separate call, can it just be wrapped around the ALTER DATABASE?\n'"
1064,20393548,b'Yuk. This might be a Roslyn/VS2015 bug.\n'
1064,20393615,"b'Looks like VS and R# are disagreeing on this again. @anpete How did we fix it on the EF6 codebase, again?\n'"
1060,20332668,"b'I debated whether to do this now by passing in max length, or to just wait until we pass in an `IProperty`.\n'"
1082,20470324,b'$projectName never null? If so :shipit:\n'
1082,20473613,"b'It can be null in which case, it will get the one selected in the drop-down..\n'"
1082,20474012,"b""OK. So long as GetProject doesn't fail - sounds good. :shipit:\n"""
1092,20528971,"b'Nit: I think this would benefit from a comment ""used to cache XXXXs"" or some such thing. Otherwise it\'s a bit obscure what sort of objects are actually getting cached.\n'"
1092,20529010,"b'Nit: typo on ""eegerly""\n'"
1092,20531352,b'Done.\n'
1092,20531361,b'Fixed.\n'
1088,20475640,"b""Note, this won't block portable projects that only target store and phone.\n"""
1088,20475712,"b""Oh my, these are all **_tabs**_! I'll fix before @Eilon can comment :wink:\n"""
1088,20486234,b':open_mouth: \n'
1096,20549650,b'var?\n'
1096,20549785,b'Re-assigned below.\n'
1096,20549792,b'invert condition for simplicity\n'
1096,20549838,b'Changed.\n'
1098,20610848,b'Ternary expression?\n'
1098,20610930,b'Ok\n'
1098,20611041,"b""This seems weird - I guess it's side-affecting?\n"""
1098,20611114,b'Consider a declarative style: list.AddRange(linq)\n'
1098,20611228,"b""It will throw since the property doesn't exist. Avoids duplicating the exception-throwing.\n"""
1098,20611405,b'How would it return a null list though?\n'
1098,20611536,b'Perhaps a separate method for the throwing? This seems confusing.\n'
1098,20611588,b'Ok\n'
1098,20611685,b'Missed the early return.\n'
1086,20475931,"b""`public`? They won't run otherwise...\n"""
1086,20603514,b'I think the namespace should be EntityFramework.Microbenchmarks.Core.\n'
1086,20603569,"b'Remove the ""using"" of the double Microbenchmarks namespace once the declaration is fixed.\n'"
1086,20614863,b'`public`?\n'
1086,20614894,b'`public`?\n'
1106,20623759,"b'On the old code that you removed in your previous check-in this was ""4.0.10-beta-*"". Can you check if that also works? Then we should chat with @bricelam about what is the best way to have this reference.\n'"
1095,20545312,b'Yuck!\n'
1095,20545985,b'yah yuck...this is like your own slightly gimped version of what startup loader is doing :/\n'
1095,20547776,"b""I don't care too much about this method because it is a temporary workaround (see the TODO comment), but each time someone uses  CallContextServiceLocator.Locator.ServiceProvider I worry. Does the new stuff requires it?\n"""
1095,20661577,"b'This look right as it was doing this before:\n\n``` C#\n.AddInstance<IHostingEnvironment>(new HostingEnvironment { EnvironmentName = ""Development"" })\n.BuildServiceProvider(CallContextServiceLocator.Locator.ServiceProvider);\n```\n'"
1095,20673129,"b'Yes, you are right. It was yucky from before. I should not review on my phone :smile: I really hope we can get rid of this code.\n'"
1104,20682590,b'Why not let configuration dispose the ScopedServiceProvider?\n'
1103,20672453,b'Remove?\n'
1118,20753349,"b'@bricelam for SQLite create table needs to be in separate batch, does it apply to any other operations as well? \n'"
1118,20773535,"b""Nothing needs to be in a separate batch. There's no concept of batching in SQLite, so we fake it by splitting the commands in the ADO.NET provider.\n"""
1118,20829426,b'Typo\n'
1118,20829484,b'Consider Enumerable.Select that takes an index\n'
1118,20829541,b'readonly inline initialize this\n'
1101,20736573,b'This needs to call OperationProcessor.Process at the end.\n'
1101,20736596,b'This needs to call OperationProcessor.Process at the end.\n'
1101,20807904,b'It seems like this is never the correct thing to use since consuming code should always go through the provider-specific calls not the relational calls. So do we need this?\n'
1101,20808035,b'Where is this class used now?\n'
1101,20808475,b'It is used in ColumnBuilder.cs. It is equivalent to ColumnModel in EF6. Will rename if you want and move to the Migrations namespace. Was hoping to do that as part of the fix for the bug that suggests removing the Relational.Model namespace.\n'
1101,20808652,b'Move it so that we can remove the Model namespace and fix #803.\n'
1101,20808808,"b'Well, if the plan is to require all the extensions to be specialized by the provider, regardless of whether additional stuff is added or not, then it is not needed. Currently it is used for SQLite, but once specialized extensions are added it can be removed.\n'"
1101,20809028,b'On second thought this can be the SQLite extension provider. Will rename and move to SQLite.\n'
1101,20809060,"b""Yes, I get that SQLite isn't done yet. We should have a work item for that--can you reference the work item in the code. If we don't have a work item then it would be good to create one.\n"""
1101,20809307,b'OK. Will rename and move to SQLite and add work item with reference in code about SQLite extensions.\n'
1133,20834907,"b""I would follow Stopwatch implementation - don't start the time in the constructor, add methods for starting the time, and also I would rename the ResetStartTime/ResetEndTime to something different (maybe start and stop?), otheriwse looks good\n\n:shipit: \n"""
1176,20967326,"b'Probably not important, but if I am not mistaken this will retry 31 times instead of 30.\n'"
1176,20967391,"b""It's an arbitrary number.\n"""
1176,20967668,"b""Sure, in this case 1 more retry doesn't make a difference, however I assume that the intent was to have MaxRetryCount = 30.\n"""
1176,20967805,b'No. The intent was to have some arbitrary number that was somewhat close to some other arbitrary number that I pulled out of...the air.\n'
1176,20967885,b'Add .WithCurrentCulture() to all await calls\n'
1176,20967934,b'Will do.\n'
1176,20968218,b'Leave the connection open\n'
1176,20968361,b'Store 30 and 100 in readonly static fields\n'
1176,20968498,"b""I don't think this adds value since they are used in one place and the meaning is entirely clear from the context.\n"""
1176,20968644,b'ok\n'
1176,20968673,b'Did you mean 4060?\n'
1176,20968675,"b'Not sure what that means, but ok.\n'"
1176,20968799,b'Why?\n'
1176,20968881,b'To avoid having to open it again\n'
1176,20969029,b'Chatted about it being called from two places. Will leave as is.\n'
1176,20969097,b'Fixed.\n'
1154,20967293,"b'These should be available on any Migrations-enabled relational provider, not just on SQL Server.\n'"
1154,20974615,"b""This can't return an IDbContextOptions because other calls chained after it will see IDbContextOptions rather than DbContextOptions, as we discussed.\n"""
1154,20974655,"b'I see that it is ""hidden""  by the other extension methods. This then seems like an implementation detail that can be made private.\n'"
1154,20975895,"b'It cannot be made private because it is used in EntityFramework.Commands/MigrationTool.cs. \nThere the existing code calls GetRequiredService<DbContextService<IDbContextOptions>>().Service to obtain a reference to IDbContextOptions, and then set the MigrationAssembly and MigrationNamespace.\n'"
1154,20975973,"b'I guess I can call AddOrUpdateExtension instead, and not have this method.\n'"
1154,20975974,"b""It doesn't have to be used there. There could be a cast there.\n"""
1154,20975990,"b""That's fine too.\n"""
1182,20979042,"b'So here, instead of try adding a new service collection that you fill, just directly TryAdd which gets rid of the nested ServiceCollection which looks a bit odd:\n\n```\nvar describer = new ServiceDescriber(Configuration);\nservicesCollection.AddScoped(your 3 listeners)\nservicesCollection.TryAdd(describer.Singleton<>()) \n```\n'"
1182,21102875,"b""TryAdd can't be chained. It returns bool.\n"""
1182,21105195,"b'This is mainly just a nit anyways, but my point was that you can just directly TryAdd the services even without chaining, rather than adding them to a new ServiceCollection and then passing it to the overload of TryAdd that turns around and enumerates the new service collection and adds them one by one...  \n'"
1182,21105348,"b""Stylistically, I prefer chaining. It would be nice to chain without the additional collection, but given this isn't possible the collection is the way to use chaining with this API.\n"""
1208,21212607,"b""I'm going to refactor this a bit to make it easier to override.\n"""
1208,21249036,b'Is there a better pattern for testing protected methods? I hate making everything internal.\n'
1208,21249209,b'I suppose we could add an `Invoke` extension method to `object` in our tests :smile: \n'
1211,21214853,"b'Need to decide whether we can eliminate the need for the condition after ||. Without it a bunch of tests fail currently because Id columns are not marked with IDENTITY. This is logic similar to what we had in SqlServerMigrationOperationSqlGenerator.cs, see below.\n'"
1211,21214917,"b'The SqlServerOptimisticConcurrencyTests fail currently without this, when the database does not exist already, because they attempt to insert values into columns marked with IDENTITY. This part may need to be revisited based on what is decided about the issue mentioned above. \n'"
1211,21248397,b'The correct logic is in SqlServerValueGeneratorSelector. You can factor this out into a common location now that Migrations is making use of IProperties.\n'
1211,21248491,b'This is because the logic above is incorrect. It does not look for the value generation strategy set at the model level.\n'
1211,21255432,b'Replicated logic from SqlServerValueGeneratorSelector in SqlServerMigrationOperationFactory.Column(IProperty property) and removed IPropertyExtensions.IsIdentity\n'
1211,21255481,b'Removed this since they are not needed with the udpated logic that determines whether a column needs to be marked with IDENTITY.\n'
1192,21123806,b'Can you get this from the reflection method info?\n'
1192,21123834,b'Dead code?\n'
1192,21123951,"b""This isn't really a visit method. I think we can change this slightly:\n1) Store queryAnnotations in a field\n2) Make QuerySourceRequiresTracking always do a scan\n"""
1192,21124008,b'Remove redundant overrides.\n'
1192,21124071,b'will remove commented code\n'
1192,21132931,b'yes\n'
1214,21265967,b'We should remove the sample databases since we have tests that create and use Northwind now.\n'
1214,21266082,b'ok\n'
1217,21276840,b'I wonder if you can do this with a project.json. I think you might be able to\n'
1217,21277538,"b""I tried that first. :smile: I've filed aspnet/KRuntime#958.\n"""
1216,21277243,b'Call Entry here and other places like this rather than duplicating the code.\n'
1216,21277319,"b""Nevermind--I see this avoids getting the state manager every time. It's OK as is.\n"""
1223,21345509,b'Why is this copied into all the assemblies? I thought the idea was to only have it in Core and the other assemblies would read it from there using `Microsoft.Data.Entity.Internal.Strings`.\n'
1223,21345678,b'I can do that\n'
1236,21406574,b'Consider using existing IsNullableType and UnwrapNullableType extension methods that are in SharedTypeExtensions.\n'
1236,21406678,b'We have this code for enums in a few places. Consider consolidating into an extension method in SharedTypeExtensions.\n'
1236,21406973,"b'Shouldn\'t this be `b.Property<Days>(""Day"");`?\n'"
1236,21406999,"b'Also, add a test for nullable enum.\n'"
1236,21407320,b'@emilcicos - What should be generated code for Enum type?\n'
1236,21408467,"b'This is an interesting question because the code is a serialized form of the model and hence should include the correct types. But in this case the enum type likely comes from the application code, so including it could cause problems if the app code is changed. So maybe using the underlying type is the correct thing, but only if doing so has no impact on what Migrations will do. Also, this seems like a general problem for properties that are not well-known types, enum or not, so we should probably have a bug to track this.\n'"
1236,21410117,"b'@ajcvickers - To put ""?"" for nullable propery I am not able to use IsNullableType() as it gives string as nullable too. Is this fine?\n'"
1236,21410198,"b'@ajcvickers - In case of non-enum type, earlier code used to return ""type"" instead of unwrappedTargetMemberType. Was this typo before? or expected behavior? \n'"
1236,21410307,"b'Yes, in that case using Nullable.GetUnderlyingType is appropriate here.\n'"
1236,21410461,b'Not sure. Write some tests for EntityMaterializerSource for nullable and enum types to test it out and add coverage for these cases.\n'
1236,21413423,b'The code takes of it by self. The generated expression tree is bit different but results are same. Existing tests cover it.\n'
1236,21477158,b'Including enum type requires reference to enum to be added in migration code. I tried using underlying type of enum and adding/retrieving data from db and it works correctly.\n'
1236,21487013,"b'Use the underlying type for now, but please file an issue to investigate this. Mention that using a json model snapshot may help.\n'"
1236,21489860,b'added #1252 \n'
1254,21499267,b'@rowanmiller is going to build upon this stellar foundation.\n'
1256,21561266,b'You might want add TODOs as well to help prevent them from slipping through the cracks later.\n'
1256,21562596,b':+1: \n'
1218,21404528,b'Consider breaking long lines\n'
1218,21404647,b'Ok\n'
1277,21755842,b'Semantic HTML zealots will scoff at your `<b>` tags. Use `<strong>` instead.\n'
1277,21756295,"b""Likewise, your `<table>` doesn't contain tabular data. :scream: \n"""
1277,21759736,"b'I guess the ""I\'m not a web developer"" defense isn\'t going to fly :smile:. The `<b>` tags come from the ASP.NET 5 project readme... so we can just deflect any criticism (since blaming someone else is always the best option).\n'"
1277,21763246,b':+1:\n'
1289,21783036,"b'Nit: What is the goal of asserting on this? Looks to me like whether the condition is hit is going to depend entirely of external factors (e.g. the tests themselves being correctly written, any unpredicted failure) rather that some assumption in this method being wrong, so I would probably not assert on this.\n'"
1289,21783223,"b'I added this assertion to percolate the message from any exceptions thrown during the performance tests to the surface failure.  This assertion is effectively: assert no performance tests failed, and if there are any that do, print the message\n'"
1289,21783409,"b'Yes, I understand that, and I am ok with it if you believe it is useful to get that just here. It just seemed odd to me to use an assert for this instead of relying on something (maybe in the code that prints the summary?) printing the full list of failures.\n'"
1274,21842756,b'There are two full stops at the end of this line.\n'
1274,21842965,b'These look like good candidates for a `Theory`.\n'
1274,21845205,b'Fixed.\n'
1274,21845638,"b""Done. Works nicely here--doesn't detract at all from the test being clear what it does.\n"""
1289,21850250,"b""This change was primarily intended to print a more useful test failure message on the TeamCity server.  The way we currently have this implimented we will only have one test failure per run and we reinstantiate the test runner per test, rather than having it go off and run all of the tests at once.  We could also update the test runner to have one test at a time be the default use case, but I don't think that it is worth the time necessary at this point\n"""
1290,21846771,"b'So if I deleted my snapshot file, what do I do? Exception message tells me that the snapshot is deleted, but not if there is anything I can do about this.\n'"
1290,21847611,"b'We discussed possible confusion in what do in various cases. ""Unapply"" is probably one of those cases where just saying Unapply may not be enough information for me to know what to do. Don\'t block on this for this code review, but we should consider how to best help people know what to do in various situations that they get into.\n'"
1290,21849430,"b""SOL. Don't delete your snapshot file. :smile: I don't think it's likely given that users are probably just trying to remove the last migration.\n\nIt would be possible to re-create it using the last migration. We could extend migrations further and, if there isn't a snapshot, we could use the one from the last migration (a la EF6)\n"""
1290,21850753,b'Filed #1298\n'
1289,21852869,"b'Thanks for the additional information. I agree cleaning up the test runner code might not be the most valuable activity to do at this time, but it sounds like something we might want to do later. Could you please file a bug?\n'"
1296,21850365,b'I would also add a test case for a null value\n'
1296,21856433,b'Added a test for this case\n'
1295,21805094,"b'@ajcvickers \nAlternatively, for PK-PK Foreign Key we could set IsRequired to false? \nThis way we would INNER JOINS for cases where they are safe (PK-FK or PK-shadowFK). Would that have some side-effects?\n'"
1295,21844818,"b'PK-PK relationships are required because the FK property is non-nullable, which is what required means.\n'"
1297,21851190,b'Nit: whitespace is unnecessary.\n'
1297,21851215,b'Nit: maybe add something saying what the unexpected value is.\n'
1270,21694676,b'We may need to up this if we start seeing new deadlocks.\n'
1270,21695317,"b""Even though it's not mathematically correct, I think I'll make xunit.runner.kre depend on xunit so the projects don't have to explicitly depend on a specific version of xunit.\n\nWhen the runner contracts stabilize we can go back to letting each project pick its own version of xunit.\n"""
1291,21849953,"b""It doesn't seem like keyPrefix is anything other than empty string and therefore isn't really used. Can this code be removed?\n"""
1291,21850591,"b'It would be good to not re-parse this every time that a new batch is created. Could you look at putting MaxBatchSize into SqlServerOptionsExtensions? We could also look into whether RelationalOptionsExtensions can be used such that any relational provider can set a match batch size, although each provider should still be able to set its own batch size.\n'"
1291,21854666,"b'keyPrefix is being used in storing keys which are beyond 3rd level. Key like ""EntityFramework:MyContext:SqlServer:MaxBatchSize"" will be stored as ""SqlServer:MaxBatchSize"". To achieve this and use the same function recursively, keyPrefix is used and in the very first call passed as string.Empty.\n'"
1291,21855250,b'Fair enough. I missed the recursive call.\n'
1291,21863593,b'I have shifted MaxBatchSize to SqlServerOptionsExtensions.\n'
1291,21988178,"b""Don't use exceptions to control the flow of the program. The code in Extract that checks for only one extension doesn't seem useful here. In the place you copied it from it was used to ensure one and only one provider is registered. In this case the code just needs to find the SqlServerOptionsExtension and use it if found--so a simple query with a FirstOrDefault should be fine.\n"""
1291,21988415,"b'This needs a CanBeNull or a NotNull attribute. Did the tests pass without it? if so, there is probably a bug in the API consistency checker. I imagine that CanBeNull is appropriate here assuming that null means that the default batch size should be used.\n'"
1291,21988495,b'We tend to use the + operator rather than String.Concat because it usually results in more readable code.\n'
1291,21988619,b'Move variable declaration to just before it is used.\n'
1291,22000499,b'I have put CanBeNull\nTests passed without attribute too\n'
1291,22009568,b'Please file a bug for this.\n'
1291,22011181,b'reported at #1309 \n'
1291,22012230,b'Consider using conditional operator.\n'
1313,22020353,b'Did you try looking at the default expression visitor as a base class?\n'
1313,22020398,b'Not sure we need to make every single thing internal here. @ajcvickers what do you think?\n'
1313,22020596,"b'Use `[Conditional(""DEBUG"")]`?\n'"
1313,22020795,"b""I need ExpressionVisitor<T> and it doesn't see to be there\n"""
1313,22020798,b'done\n'
1304,21989466,b'Did this undo a perf optimization?\n'
1304,21989796,"b'I wondered about that, but there is no comment indicating that it is a perf optimization. Should I revert?\n'"
1313,22058359,b'I think it can all be public.\n'
1313,22058499,b'@maumar @divega Is it just not there because we need to bring in a new dependency? Or is it never available on CoreCLR?\n'
1313,22062771,"b""I talked to @maumar yesterday. The default expression visitor can only be used for expression rewriting, e.g. all methods return Expression. We needed a visitor that we can use to return our own type (in this case TreeNode). We had a base class DbExpressionVisitor<T> for DbExpressions in EF6, but there doesn't seem to be any standard base class that we could derive from here.\n"""
1315,22065564,b'No need to check here as it will build an EntityType eventually\n'
1315,22066047,b'Add that an entity type needs to be a reference type\n'
1315,22066095,b'No need to check it here\n'
1315,22074501,b'This one can be removed too\n'
1315,22074531,b'As well as this\n'
1315,22074540,b'And this\n'
1312,22060189,b'Why to sidecars need to be rolled back here?\n'
1312,22060367,"b'Can this code go further down between the existing StateChanging and StateChanged calls instead of being its own little island? Also, not directly related to this, but it seems to me that properties should be flagged after the changing event rather than before so that code can, for example, look at which properties are modified in that event. Do you want to do this as part of this change, or should I file another issue?\n'"
1312,22060935,"b""I don't think there should be an acceptChanges parameter here, as discussed. Make it reject changes always.\n"""
1312,22060968,"b""Slight preference for default value of false, but don't care really.\n"""
1312,22061065,"b'Too many unnecessary thises. Even if you like them they will disappear when R# does cleanup, so may as well remove them now. :-)\n'"
1312,22061314,"b'I think it would be good to only set the property if the original value is different from the current value since setting a property may trigger both change tracking behaviors in our code or validation, etc. code in the entity. Also, as Rowan pointed out a few minutes ago, usually the original values and the current values will be the same.\n'"
1312,22061457,b'Drumming up business. :+1: \n'
1312,22067523,b'ok\n'
1312,22067844,"b""they don't, I added that code when I trying ideas to solve the problem.  will remove\n"""
1312,22078831,"b'I added a change to move the location of the reset to after the flagAllProperties call, is this the change that you wanted?\n'"
1312,22079082,"b""Remove default value from this one--it's private and only called from the other methods.\n"""
1312,22079164,b'I think CancellationToken should still be at the end.\n'
1312,22079433,b'ok\n'
1318,22078504,"b""Per 027c488, you'll need to remove these and install the `xunit` (prerelease) package via plain-old-NuGet.\n"""
1318,22079425,"b'Done, thanks :smile: \n'"
1318,22120943,"b'When we spoke before, we discussed the idea of putting EF6 in the metric name rather than the test name for the sake of comparison.  We can add the ability to add custom labels to the performance metrics now and remove the label from the test name, or we can keep it this way for now, and modify the data in the database once we make this update.\n'"
1318,22120977,"b""I think I'm leaning towards leaving this how it is for now, and updating the data later\n"""
1318,22126681,"b'I noticed that you have the class with the actual facts for these tests within the project directory, we have the rest of the top level tests outside of the project directories.  I would prefer to see the test class at the top level of the project rather than inside of the folder.  \n'"
1318,22181954,"b""Yeah, I think having the ability to compare two tests would actually be better than trying to cram them on the same graph by using metric names. Comparison EF6/7 is one useful thing... but there will also be batching/non-batching etc. and I don't know that the metric name thing scaled fantastically.\n\nEither way, I think we can sort that out later (as you said). \n"""
1318,22182030,b'I was trying to follow what we do in other test projects... we tend to break things up into folders based on the component/area they are testing. My thought was it probably makes sense to move everything query related into a query folder etc.\n\nThoughts?\n'
1318,22182284,"b'I do like the idea of moving everything to the query folder, If this happens, we should move the rest of the test files into their respective folder.  I think this is something we can tackle as part of #1259 \n'"
1318,22184068,"b""Discussed offline, I'm going to be working on query tests next (and addressing #1259) so will check this in with subfolders and use same approach in query tests.\n"""
1320,22324345,b'Did you add all of the sync tests here?\n'
1324,22324648,b'I think this removes the feature where we attempt to use the user-specified range variable from the query as the alias.\n'
1333,22331848,b'Should these use the same test db infra as the FTs?\n'
1333,22333057,"b""We talked about that but it seemed to add little value since there is a dedicated database per set of tests and we only need to create it if it hasn't already been created (since the test data needs to be static in order to have comparable runs).\n"""
1333,22334071,"b""Wouldn't the value also be in having a single infra.? And if we wanted to do x-provider perf tests?\n"""
1333,22359114,"b""The thing is that there isn't really any infra, since all we need is a connection string. Creating the database etc. is all handled within the test since it deals with seed data etc. at the same time (using the product APIs).\n\nThere may be some value with x-provider tests though, we haven't really worked out how that's going to work with perf just yet as we don't want the code to deviate too much from what a customer would write in their app.\n"""
1338,22366418,b'+1 for getting moving default values to somewhere more appropriate\n'
1339,22368093,"b""This file contains several classes and should be split into separate files... I'll do that in another change though to keep this diff cleaner.\n"""
1339,22372089,"b'^^ Line 73 `<None Include=""project.json"" />` should be removed\n'"
1350,22479371,"b""Isn't this still unique-ifying across multiple queries?\n"""
1350,22486216,b'QueryModelVisitor is created per query - so aliases are only unique within one query\n'
1350,22492796,b'But _queriesBySource can have multiple queries.\n'
1354,22479575,"b'I think this should just be ""CreateDatabase"", for consistency and because idempotency is traditionally an impl detail of SQL gen.\n'"
1354,22479730,"b'@rowanmiller suggested this name, the idea was to be very explicit about the idempotent nature of this operation\n'"
1354,22480148,"b""Don't think it is right from an API stand-point. If we need to call out the idempotency (and I'm not sure we do) then a named parameter would be more Migrations idiomatic.\n"""
1354,22480308,b'What is this flag for?\n'
1354,22481002,"b""Within the generated code none of the other operations are idempotent (i.e. CreateTable will fail if there is already a table with that name). \n\nWe discussed with @divega and @ajcvickers and we had agreed on CreateDatabaseIfNotExists name... but not sure how strongly they feel about it. I prefer to call it out, but I'm not super opposed to just calling it CreateDatabase if others agree.\n"""
1354,22481285,"b""I don't feel strongly (and I don't remember the discussion very well :smile:). Sure we can chat again about this. \n"""
1354,22481699,"b'In EF6, SQL gen would sometimes output idempotent ops E.g. CreateSchema - Is this no longer the case? I think another issue with the proposed name is that is conflicts with the EF6 initializer.\n'"
1354,22482801,b'This flag allows us to only scaffold the CreateDatabase operation when the CreateSchema operation is called for the first migration.  \n'
1354,22483084,"b""I Agree with Andrew about the conflict being a problem, it's also a fairly obtuse name which I'm not really a fan of.  I would feel good about changing this method name to `CreateDatabase()`\n"""
1354,22490441,"b""Ok, let's go with CreateDatabase\n"""
1354,22493016,"b""I don't remember the discussion about the name. I like CreateDatabase for the operation name.\n"""
1354,22493449,b'When is it called otherwise? I would try and think of a more descriptive name either way.\n'
1354,22493486,"b""Shouldn't we be scaffolding the name here?\n"""
1354,22493676,"b""I could be missing something but why has this code moved? Shouldn't the SQL generator be doing this?\n"""
1354,22495208,b'It is used to generate the historyTable and a couple other places in migrations.  I could rename it to `createDatabase`\n'
1354,22495297,"b'We use the database name from the connection string, I think that since the database is configured in the connection string the name should not be hardcoded into the migrations since an application can be reconfigured to target a different database simply by changing the connection string. \n'"
1354,22495415,"b'SqlGeneration for the CreateDatabase command is effectively a noop since this is never an operation that should be scaffolded into a script.  The connection string also needs to be modified for database creation because we need to target the master database for database creation, then retarget to the newly created database for the rest of the migrations commands\n'"
1354,22495486,"b'+1, this layering feels backwards...\n'"
1354,22495548,"b'Oh yeah, that is kind of unfortunate.\n'"
1313,22503926,"b""> 1) Build up the state using instance state in the visitor\n\nD'oh, makes total sense!\n"""
1360,22557441,b'should I remove uniquefication from here?\n'
1360,22557532,b'Does it matter if we just always set this?\n'
1360,22557590,b'Does this work when there are sub-queries?\n'
1360,22557625,b'If it is no longer being used..\n'
1313,22494435,"b'Why is TreeNode required? Incidentally, there are a couple of solutions to this general problem:\n1) Build up the state using instance state in the visitor\n2) Create a custom expression type: TreeNodeExpression.\n\nRelinq has an ET pretty-printer: Take a look at Remotion.Linq.Clauses.ExpressionTreeVisitors.FormattingExpressionTreeVisitor.\n\ncc @maumar \n'"
1356,22498739,b'I like this solution to the namespace conflict :)\n'
1356,22499830,b'I think these should be `M.D.E.Relational.Migrations.*` and the files should be moved into a `Migrations` subdirectory of the Relational project.\n'
1356,22499857,b'+1\n'
1356,22500018,b'(Because Migrations is an isolated sub-component of Relational)\n'
1356,22500437,"b""I don't like how we add all of the other dependencies to the provider services here.  I think we should separate this out for migrations and leave what we had for relational\n"""
1356,22550483,"b'Sounds reasonable, moved into subdirectory as requested\n'"
1356,22615034,b'Does this still need to be renamed to MigrationsModel?\n'
1356,22615114,"b'If so, I like _Operations_ better.\n'"
1356,22615535,b'(But we can discuss in API Review)\n'
1356,22617332,"b""(I'm a fan of covering this in API Review, moving on for now)\n"""
1369,22689269,b'Add parenthesis around the first and second lines of the condition for clarity\n'
1369,22689985,"b""Use Task.FromResult(false), Task.FromResult(true) or Task.FromResult(null) as they don't allocate memory.\n"""
1369,22690168,b'Merge with previous if block\n'
1369,22690427,"b""Shouldn't we unsubscribe from PropertyChanging and PropertyChanged when we stop tracking the entity to avoid leaking memory?\n"""
1369,22691281,b'Could you elaborate on the TODO comment or remove it?\n'
1369,22697177,b'Done\n'
1369,22697284,b'Done.\n'
1369,22697303,b'Done\n'
1369,22697417,b'Created #1378\n'
1369,22697467,b'Updated to `// TODO: Implement this appropriately rather than always just returning false.`\n'
1366,22692240,b'Add a test where DetectChangesCalled is set to true to make sure that the infra works correctly.\n'
1366,22698148,b'Added code at the end of the test that calls DetectChanges and then checks that the flag is true.\n'
1380,22727124,"b'Did you consider having out parameters `contextServices`, `logger` and `setInitializer`? You can keep the fields read-only that way.\n'"
1380,22727312,b'I would pretty much never consider having out parameters.\n'
1380,22727382,b'LOL\n'
1394,22885240,b'This check needed?\n'
1394,22885358,"b""Move this below so that we don't do it unless required. (SelectExpression may be the common case)\n"""
1394,22885387,b'Make this IEnumerable and buffer in caller if required.\n'
1361,22562426,"b'""command""?\n'"
1361,22562469,b':+1: \n'
1361,22562489,b'Not sure we need to do the range validation here - we are just flowing the value to ADO.\n'
1361,22562543,b'What about update pipeline?\n'
1361,22562627,b'We need an FT for this - something that ensures that the timeout is propagated to ADO.\n'
1361,22562664,b'What happens when CommandTimeout is null here? Is that behavior what we want?\n'
1361,22563115,"b'Historically, if the user set the CommandTimeout to null, we would use the default value for the DbCommand\n'"
1361,22563137,"b'Good catch, I will add it there too\n'"
1361,22563176,"b'We did validation here in EF6, I will test without the check when I add the FTs\n'"
1361,22563270,"b'Sorry, missed the null check above.\n'"
1361,22952118,"b""Shouldn't the master connection make use of the command timeout?\n"""
1361,22952315,"b""The exception message for valid timeout is included above, but there don't seem to be any checks that use it. Can you add one here?\n"""
1361,22952380,b'Add check here as well.\n'
1361,22952844,"b""It's interesting that you can do:\n\n```\ncontext.Database.AsRelational().CommandTimeout = 10;\n```\n\nor\n\n```\ncontext.Database.AsRelational().Connection.CommandTimeout = 10;\n```\n\nDo we really need both? We didn't have an abstracted connection class like this in EF6 (other than EntityConnection which was an entirely different beast), but now that we do I wonder if it means that you should always go down to the connection to specify the timeout? This does, however, make it less discoverable. We should discuss briefly with @rowanmiller and/or @divega but I'm okay for this change to go in anyway.\n"""
1361,22953448,b'should we also include MaxBatchSize and all of the other configuration that is done on the SqlServerConnection that we are cloning? This makes me feel like we should have an easy way to clone a connection.  \n'
1361,22953555,b'Yes. Agreed.\n'
1361,22953924,b'Also see Issue #1406 \n'
1361,22955994,b'ok\n'
1361,22956037,b'ok\n'
1361,22956154,"b""I won't address this work as part of this change, but I will make a note on #1406 \n"""
1413,23044761,"b""I don't think there needs to be a new method here. Just add the new generic parameter to the existing method. It's fine If it ends up not being used on some code paths.\n"""
1413,23044982,"b""Only use the special ClrPropertySetter class when the property type is both nullable and an enum. Otherwise we're adding an additional null check and cast when it is not needed for all the more common cases.\n"""
1413,23045063,"b""This class should be in a new file. Also, I'm not sure that NonNullableClrPropertySetter is a good name since it is only used for nullable enums. So maybe call it NullableEnumClrPropertySetter.\n"""
1413,23045228,"b'Put the check for nullable enum type here and return either the normal ClrPropertySetter or the special one. Then the additional generic method is not needed, as mentioned in my previous comment.\n'"
1413,23053766,b'Consider using conditional operator.\n'
1412,23118369,b'Use false\n'
1412,23118469,"b""Oops. Sorry. You won't have to tell me again. Promise.\n"""
1422,23119650,"b'Why do we look for ProviderPrefix here, but not for the command timeout case?\n'"
1422,23119682,b'Can we reuse the parsing code from above--the two pieces of code seem almost identical.\n'
1422,23240661,"b'Can command timeout be zero? If so, the exception message is wrong. If not, the check here is wrong.\n'"
1422,23240960,b'Why are these not ArgumentExceptions?\n'
1422,23248057,"b'To avoid duplicating the range checking logic, these exceptions will be thrown for an invalid setting from Configuration as well as setting the wrong value on the instance.\n'"
1409,22982781,"b""Is this intentionally simplistic? It won't handle any variation on spacing before they key name or before the equals sign.\n"""
1409,22982817,b'If you keep the simplistic parsing can you at least replace 5 with the length of NamePrefix?\n'
1409,22982900,"b'Unless we need to make this more general purpose, consider having both more specific string name names and helpful exception message.\n'"
1409,22983185,"b'FYI, this is the code we have in EF6. (I\'m not sure if we want to treat a string with no key value pairs as a name or not.)\n\n```\n// <summary>\n// Determines whether the given string should be treated as a database name directly (it contains no \'=\'),\n// is in the form name=xyz, or is some other connection string.  If it is a direct name or has name=, then\n// the name is extracted and the method returns true.\n// </summary>\n// <param name=""nameOrConnectionString""> The name or connection string. </param>\n// <param name=""name""> The name. </param>\n// <returns> True if a name is found; false otherwise. </returns>\npublic static bool TryGetConnectionName(string nameOrConnectionString, out string name)\n{\n    DebugCheck.NotNull(nameOrConnectionString);\n\n    // No \'=\' at all means just treat the whole string as a name\n    var firstEquals = nameOrConnectionString.IndexOf(\'=\');\n    if (firstEquals < 0)\n    {\n        name = nameOrConnectionString;\n        return true;\n    }\n\n    // More than one equals means treat the whole thing as a connection string\n    if (nameOrConnectionString.IndexOf(\'=\', firstEquals + 1) >= 0)\n    {\n        name = null;\n        return false;\n    }\n\n    // If the keyword before the single \'=\' is ""name"" then return the name value\n    if (nameOrConnectionString.Substring(0, firstEquals).Trim().Equals(\n        ""name"", StringComparison.OrdinalIgnoreCase))\n    {\n        name = nameOrConnectionString.Substring(firstEquals + 1).Trim();\n        return true;\n    }\n\n    // Otherwise it is just a connection string.\n    name = null;\n    return false;\n}\n```\n'"
1409,22983492,"b""> I'm not sure if we want to treat a string with no key value pairs as a name or not\n\nI see no harm in doing that.\n"""
1409,22987588,b'Updated according to what we have in EF6\n'
1409,22987602,b'Matched with EF6\n'
1446,23270143,b'What a hack :stuck_out_tongue_closed_eyes: \n'
1442,23321455,b'Should these be matched by parameter type instead?\n'
1442,23324980,b'This seemed easier/simpler.\n'
1416,23090554,"b""Target directory should remain the migrations project's. Otherwise we'll run into assembly resolution issues.\n"""
1416,23090631,"b'I thought about this more, and I think we should. We had a bug filed a long time ago to honor linked items.\n'"
1416,23090856,"b""This should be set to the start-up project's _target_ directory.\n"""
1416,23091114,b'We should fallback to the migrations project.\n'
1416,23091310,"b""This function isn't used anywhere.\n"""
1416,23106718,"b'Will remove, this code was used by the -StartupProject flag to verify that only one project with the specified name was found\n'"
1416,23107143,b'ok\n'
1416,23107321,b'ok\n'
1416,23108073,b'ok\n'
1416,23245070,b'It seems possible to get this warning even when you are referencing EF.Commands...\n'
1416,23245485,"b""You can inline this method. I don't  think it throws even if the item doesn't exist.\n"""
1416,23245677,b'Remove. (logged in Get-MigrationsStartUpProject)\n'
1416,23246153,"b""Catching `Exception` doesn't seem like the right approach. Can you remove for now and file a new issue with the errors your were hitting?\n"""
1416,23467615,"b'it does throw actually, calling .Item() for an item that doesn\'t exist throws a parameter exception\n\n```\nUsing project \'ConsoleApplication11\'.\nadd-migration : Exception calling ""Item"" with ""1"" argument(s): ""The parameter is incorrect. (Exception from HRESULT: 0x80070057 (E_INVALIDARG))""\nAt line:1 char:1\n+ add-migration first -verbose\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Add-Migration], MethodInvocationException\n    + FullyQualifiedErrorId : ComMethodTargetInvocation,Add-Migration\n```\n'"
1416,23468102,b'ok\n'
1416,23468984,b'filed as #1459\n'
1416,23469082,"b""I'm going to leave this method intact\n"""
1462,23485138,"b""I pursued alternatives using the `ImplicitlyExpandTargetFramework` & `ImplicitlyExpandDesignTimeFacades` MSBuild properties, but wasn't able to make it work. Leaving this here for now seemed like the pragmatic thing to do.\n"""
1416,23485563,b'lame :expressionless: If I designed .Item()...\n'
1464,23553261,b'Why is this an extension method?\n'
1464,23553334,b'named arg?\n'
1464,23553828,"b""Consider a name that doesn't read like a hook method.\n"""
1464,23553976,b'string.Empty?\n'
1464,23562314,b'Will move to EntityType\n'
1464,23562525,"b""I'm open to suggestions. It represents a list of entity type conventions that run when a new entity type is added.\nNote that in the future there might be also entity type conventions that run when something different happens.\n"""
1464,23562651,"b'We\'ve discussed this with Arthur and """" is as readable in most cases and uses less characters.\n'"
1464,23562977,"b""I'll add it, but you won't like it. It's onNewKeyAdded:\n"""
1464,23564698,b'Is it a delegate? :-)\n'
1464,23564737,b'EntityTypeAddedConventions?\n'
1464,23565108,b'it is!\n'
1464,23565145,b'ok\n'
1486,23707809,"b""_command can be moved into the conditional block. Actually, perhaps it doesn't even need to be field - can you try making it a local of MoveNext? Can't remember if it is OK to dispose the command while the reader is open.\n"""
1486,23707937,"b'One other thing, it is good practice to dispose resources in reverse acquisition order so dispose the reader before the connection close.\n'"
1474,23660584,b'Is the cache provider-specific? If so a provider-specific singleton should be registered instead.\n'
1474,23661545,"b'It should be. Spoke to @ajcvickers and he was investigating how to do this (we also need it for cached models, which we are also not currently doing) - Or do you already know how to do this? :-)\n'"
1474,23702972,b'@anpete @AndriySvyryd Andriy and I talked about the same plan that I mentioned to you. Pretty sure it will work.\n'
1474,23706401,b'Tracking with #1461. Will create a new bug for updating query caching.\n'
1497,23739103,b'Initialize inline?\n'
1497,23739412,"b""Good idea, haven't tried those yet\n"""
1503,23815552,"b""I don't think this is needed. Just call `Get-Project` directly.\n"""
1477,23574198,b'Was this an intentional change?\n'
1477,23574369,"b'yes, TryGetKey searches first for a primary key and then through the `_keys` This preserves the logic but still lets us use the BinarySearch\n'"
1477,23574756,b'I see. Why not change the TryGet methods to use binary search instead?\n'
1477,23574972,"b'The BinarySearch requires an instance, we use it in some of the Properties methods, but we have a performance note about the impact of creating a surrogate instance for the sake of searching.\n\nWe have some options to consider with respect to surrogates, binary search, and lazy if we want to start down that path on this PR.\n'"
1477,23575101,"b'Yes, we should measure the impact of this at some point, but for now we should be consistent. Either use binary search in all TryGet methods or in none.\n'"
1477,23575448,b'Nit: this test looks like it belongs in Keys_are_ordered_by_property_count_then_property_names() below. Here would just add some non-overlapping keys and ensure you can retrieve them.\n'
1477,23575605,"b'Nit: maybe add another key k4 on (idProperty, abcProperty) just to prove that even in composite keys it orders them by name.\n'"
1491,23732866,b'It would be good to convert those tests into what would they look in the new API\n'
1491,23742512,"b'If I am interpreting the code correctly with the removal of this overload you can now only use `ThenInclude()` after an `Include()` that landed on a collection (i.e. the new overload). I am tweaking my mental model to something like this: ""dot through"" the navigation property path that you want inside the `Include()` method but when collections disrupt the path you can use `ThenInclude()` to ""escape"" them. \n\nE.g. you can now do this:\n\n``` C#\norders.Include(o => o.OrderLines).ThenInclude(ol => ol.Product.Category)\n```\n\nBut you can no longer do this:\n\n``` C#\norderLines.Include(ol => ol.Product).ThenInclude(p=> p.Category)\n```\n\nPersonally I like the approach better (I especially like that the superfluous versions of `ThenInclude()` won\'t be offered by Intellisense anymore) but I would like others to be able to chime in /cc @ajcvickers @rowanmiller \n'"
1491,23787672,"b'Correct. As I understood it, that was a constraint of your proposal, but I am happy to be wrong about that :-)\n'"
1491,23787722,b'I had versions of those already :-)\n'
1491,23800211,"b""The new overload worked alongside the existing ones when when I tried (i.e. they didn't seem to confuse the compiler), although the one that landed on a collection was definitively redundant.  Let's chat about the pros and cons.\n"""
1491,23802913,"b""I don't mind either way.\n"""
1491,23806584,"b""I prefer to use either Include/ThenInclude consistently for any kind of navigation property, rather than using dotting sometimes and then dropping out to ThenInclude when I can't dot. But if others think that ThenInclude should only be used for dropping out, then I won't push back.\n"""
1491,23810550,b'I prefer using Include/ThenInclude for references as well - seems more consistent and (from testing perspective) more composable.\n'
1491,23859325,b'Going to start without the other overload but will consider adding if we get feedback on it.\n'
1491,23859399,b'@anpete I would really like to hear what @rowanmiller thinks.\n'
1491,23860369,"b""That's fine. I will check this in but am happy to send another PR if required.\n"""
1492,23740178,"b""I don't really understand why these tests were changed. Can you explain?\n"""
1492,23741669,"b'These changes are not necessary. Previously it was ""MyConnectionString"" only.\nWhen changes according to EF6 were brought in, it started assuming value without \'=\' sign as named connection string (which we are removing here). So it was changed to ""Data Source=MyConnectionString"".\n'"
1492,23742094,"b'Okay, so we still have tests for the case where there is no indirection? That is, one ""="" but not preceded by ""name"", and multiple ""=""s, one of which may or may not be ""name""?\n'"
1492,23805449,b'I have added tests for all possible combinations.\n'
1492,23805554,"b'@ajcvickers - should we throw different exception is the connection string is like ""name="". In such case we look for empty key in configuration.\n'"
1492,23805708,"b'@ajcvickers  This test and next 3 are verifying behavior when connection string doesn\'t start with ""name="".\nSuggestion for test names?\n'"
1492,23810995,"b""I don't think it is necessary to have a different exception.\n"""
1492,23811241,"b'It seems like these are not ""indirect"" connection strings. These are three cases where having an equal sign in the string does not cause redirection to happen.  The first is a single key/value pair. The second is a string starting with ""="" and the third is just a single ""="". Does that help with naming?\n'"
1518,23946965,b'Why is this not in M.D.E.Relational?\n'
1518,23947491,"b'That would make just as much sense. There are a few other ""Extensions"" related classes in the assembly in the M.D.E namespace (`RelationalBuilderExtensions` `RelationalDatabaseExtensions`, and `RelationalMetadataExtensions`) and I was just matching what was there.\n'"
1518,23947741,b'We typically put extension methods into a namespace which makes them show up in Intellisense when people have common using directives in their class. This is often M.D.E. But in this case the class does not have extension methods.\n'
1521,23970530,"b'""of your entities""?\n'"
1521,23971244,b'I think it would be worth documenting that the options passed into this method is cloned from the DbContextOptions that was passed to the constructor or obtained from the service provider. This allows different options to be used for each session even when only one DbContextOptions is registered in the service provider.\n'
1521,23971363,b'Document that this method automatically calls DetectChanges unless AutoDetectChanges is turned off.\n'
1521,23971453,b'Ditto document calls DetectChanges.\n'
1521,23971560,"b'Not sure if it is worth documenting here, but if the entity is currently Added, then it will be Detached following a call to Remove.\n'"
1521,23971623,b'Might be worth explicitly stating that this is the entry point for LINQ queries.\n'
1521,23971759,"b'Adjusted summary to look like this:\n\n```\n        /// <summary>\n        /// <para>\n        /// Override this method to configure the data store (and other options) to be used for this context.\n        /// This method is called for each instance of the context that is created.\n        /// </para>\n        /// <para>\n        /// If you passed an instance of <see cref=""DbContextOptions""/> to the constructor of the context (or\n        /// provided an <see cref=""IServiceProvider""/> with <see cref=""DbContextOptions""/> registered) then\n        /// it is cloned before being passed to this method. This allows the options to be altered without\n        /// affecting other context instances that are constructed with the same <see cref=""DbContextOptions""/>\n        /// instance.\n        /// </para>\n        /// </summary>\n```\n'"
1521,23971986,"b""Actually, moving that to remarks instead... you don't really need to know that to use the API\n"""
1521,23972001,"b'```\n        /// <remarks>\n        /// This method will automatically call <see cref=""ChangeTracker.DetectChanges""/> to discover any changes\n        /// to entity instances before saving to the underlying data store. This can be disabled via\n        /// <see cref=""ChangeTracker.AutoDetectChangesEnabled""/>.\n        /// </remarks>\n```\n'"
1521,23972135,"b'```\n        /// <remarks>\n        /// If the entity is already tracked in the <see cref=""EntityState.Added""/> state then the context will\n        /// stop tracking the entity (rather than marking it as <see cref=""EntityState.Deleted""/>) since the \n        /// entity was previously added to the context and does not exist in the data store.\n        /// </remarks>\n```\n'"
1521,23972252,"b'```\n        /// <summary>\n        /// Creates a set to perform operations for a given entity type in the model. LINQ queries against\n        /// <see cref=""DbSet{TEntity}""/> will be translated into queries against the data store.\n        /// </summary>\n```\n'"
1532,23980955,"b'this is not very clear (i.e. its not obvious that we are stripping alias here) - I added the comment, alternatively I could introduce the state into the visitor that would add/ignore alias depending on the context in the ColumnExpression visit method itself\n'"
1532,23981689,b'Just inline the relevant code from VisitColumnExpression here..\n'
1523,23968731,b'This might need a better name\n'
1550,24141513,b'will add [NotNull]\n'
1507,23868418,b'fixed in 128aabd2c \n'
1507,23881294,b'`assembly` is the current project. We need to add a `-startUpProject` parameter to each command that executes user code and set the current directory based on that.\n'
1507,23881376,"b'No, this comment was about enabling `ef help migration add` which currently throws. Only one level--`ef help migration`--works.\n'"
1507,23881456,"b'`ef migration add --help` works, but you have a point, I\xe2\x80\x99ll put the comment back in\n'"
1507,24104288,"b""`projectName` may be `null` if the user didn't specify one. `GetLibraryInformation` could throw.\n"""
1507,24104323,b'Not used\n'
1507,24104344,b'Please re-add. (Or file a bug)\n'
1507,24108269,b'Not used\n'
1507,24108477,b'Should probably do this in a `finally` so it gets reset even when the `_migrationTool` throws.\n'
1564,24284232,"b'Nit: Being picky but ""exists in the database"" only as far as EntityFramework knows. It could have been deleted/changed by something outside of EF\'s knowledge. But not sure how you state this succinctly. Perhaps ""existed in the database last time the framework checked""?\n\nSimilarly below.\n'"
1564,24348171,"b'I think the simpler description is better. It is true that the database might be different for a number of reasons, but the point of having this state is to assert that the state of the entity being tracked is the same as the state in the database. I think the simple one line description captures this well.\n'"
1577,24452666,"b""FYI I put this one in `Utilities` rather than `Internal` because it is only used to build in VS and isn't included in the binaries we actually package up.\n"""
1583,24460240,b'Do you get any build warnings because of this?\n'
1583,24461384,b'Nada\n'
1583,24461658,b'`nameof`\n'
1583,24461799,b'Going to wait until R# 9.1 is stable.\n'
1562,24347014,b'What is this method for?\n'
1562,24347383,"b""I don't think it should be done this way. We don't want to add new surface to EntityEntry for this. Instead, get the StateEntry itself, set the state to Unchanged passing in true for the acceptChanges flag. Then create an EntityEntry around that StateEntry and return it.\n"""
1562,24347456,"b'Also, make sure that all the Attach and AttachRange methods on DbContext and DbSet have this behavior, and add tests to ensure this.\n'"
1562,24357682,b'Removed\n'
1589,24478310,"b'Can\'t remember if we talked about this already but these should use escaping, e.g. in case the value is something like ""_m"".\n'"
1589,24534555,b'I had already filed this as #474. \n'
1589,24535931,b'@anpete thanks for making this immune to https://entityframework.codeplex.com/workitem/1108 :smile: \n'
1598,24541871,b'Is this file supposed to be here?\n'
1598,24542111,b'Reverted.\n'
1589,24542961,"b""I'm not sure that does what you think :-) But I know how to make it do what you suggest...\n"""
1589,24553446,"b""Do'h, you are right, I was thinking `@object` should not be null. I was also thinking you can just fallback to the lambda compilation to fail with the right exception. Want me to file a bug? :smile:\n"""
1600,24556077,b'We typically use `Check.NotEmpty()` for strings.\n'
1600,24556677,"b'Are these used anywhere? If not, remove.\n'"
1600,24629673,b'There is a test which uses them. Though test works without escaping also. Do we need escaping code somewhere while generating sql?\n'
1600,24630838,"b""We have escaping elsewhere. This type of escaping is SQL Server-specific anyway and doesn't belong in Relational.\n"""
1601,24697509,b'Should probably add a `DatabaseTool` class and do this in the constructor the same way as `MigrationTool`.\n'
1601,24699847,b'Can [DesignTimeServices](https://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework.Commands/DesignTimeServices.cs) be reused instead?\n'
1601,24700047,b'Update `Indenter` to call these.\n'
1601,24700333,"b""Singletons don't play well with DI. Ensure this can be easily replaced everywhere it's used--preferable by just replacing a service.\n"""
1601,24700397,b'Most of our existing APIs take the builder as the last argument.\n'
1601,24700885,b'It moved to `TypeInfo` in the new Reflection APIs. `propertyType.GetTypeInfo().IsGenericType`\n'
1601,24701539,"b""I had not included System.Reflection.Extensions in the aspnetcore50 framework dependencies - so it wasn't showing up. Got it now. Thanks.\n"""
1601,24701638,b'Should eventually merge with [CSharpHelper](https://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework.Commands/Utilities/CSharpHelper.cs).\n'
1601,24701716,b'`virtual` all the things.\n'
1601,24701855,b'(Enabling [ApiConsistencyTestBase](https://github.com/aspnet/EntityFramework/blob/dev/test/EntityFramework.Core.Tests/ApiConsistencyTestBase.cs) on this assembly will catch things like this.)\n'
1601,24702083,b'No need to specify the array type.\n'
1601,24702147,b'Could use C# 6 getter-only auto properties for these.\n'
1601,24702353,"b""I don't think we format arguments like this--with commas at the beginning--anywhere else in the codebase.\n"""
1601,24702705,"b""I wonder if we should generate entities without keys. Perhaps we should make the entire row the key. (I think that's what EF6 does.)\n"""
1601,24703128,"b""I wonder if `EntityType.Properties` should always return primary key properties first. We seem to want this order in a few different places throughout the stack. @mikary, is there any reason this wasn't done as part of #1314?\n"""
1601,24703423,"b""The `EntityType.Properties` already had an absolute order (based on `Property.Name`). The goal wasn't necessarily to have a specific order so much as an order that wouldn't change if the model was constructed in a different order.\n"""
1601,24703581,b'`.ForRelational()` facets should be handled here in the base class. Providers then only have to worry about their provider-specific facets like identity and computed expressions on SQL Server.\n'
1601,24703683,"b""I believe ordering is handled by the model, and there's no need to do it again here.\n"""
1601,24703820,b'Can use `.Except()` instead.\n'
1601,24704007,b'EF6 reverse engineering assumed that all non-nullable columns where the key. There were lots of problems down the path. I would prefer it to produce a warning / TODO: comment and skip the entity.\n'
1601,24704119,"b'> I wonder if  `EntityType.Properties`  should always return primary key properties first\n\nUnless it is better to have different orders optimized for different purposes, sounds good to me. \n'"
1601,24704230,"b""We've decided in the past on no protected fields, but to instead expose them via protected properties if necessary. We could revisit this decision as a team.\n"""
1601,24704352,b'Why clone the list?\n'
1601,24704437,b'The `PropertyExtensions` already have performance notes about `Contains` calls on `IsForeignKey` `IsPrimaryKey` and `IsKey` and these paths would be hit every time we iterate over the properties.\nThere may be performance / complexity concerns with this kind of change unless we can make the model readonly at some point.\n'
1601,24704657,b'DRY. This is a copy of the code in `DbContextCodeGenerator.OrderedProperties()`.\n'
1601,24704734,"b""I don't know how I feel about these classes. If feels like the information could just be flowed as method parameters instead.\n"""
1601,24705073,b':warning: Singleton\n'
1601,24705350,"b""Shouldn't this generate an anonymous type instead of an object array?\n"""
1601,24705558,b'YAGNI. Can you remove filters until we decide how to implement them end-to-end? (In `BaseGeneratorModel` too.)\n'
1601,24705635,b'This should take the exact services needed instead.\n'
1601,24706077,b'I can imagine an assembly with multiple providers. Perhaps they should be referenced by assembly **and** type instead.\n'
1601,24706206,b'It might be better to use `DbConnection.Database` for the name instead after opening the connection.\n'
1601,24706253,"b""Parenthesis aren't needed.\n"""
1601,24706522,b'Agreed. But we had decided to keep separate for now and merge in one go later.\n'
1601,24706663,b'It does what Diego said.\n'
1601,24706717,b'Why not just pass the string?\n'
1601,24706752,b'I can imagine different providers wanting to do different things. This method is overridable just so that provider-writers can choose their own order.\n'
1601,24706775,b'We may not want to prevent the generation of non-C# files.\n'
1601,24706419,"b""I don't know how important it is to check the return value for `null`. If it's part of the contract, it might be safe to assume here that it'll be set.\n"""
1601,24705681,b'Resourcify. (All other messages too.)\n'
1601,24706859,"b""Even though e.g. the MaxLength facet is available without saying ForSqlServer() it's still true that only the SQL Server provider knows what metadata to pick up from a SQL Server DB in order to fill this in. I think we need the current setup.\n"""
1601,24707073,"b""I was thinking about later on someone wanting to override the way the SQL Server provider does it. They could then provide a new XYZmodel class inheriting from this but putting in any extra info. Then in their own provider they could cast to XYZModel and continue to use it. If we hard-code the method params that wouldn't be possible.\n"""
1601,24707099,"b'`e.Message` is useless here. It will almost always be ""Exception has been thrown by the target of an invocation."" It\'s probably better to not catch here. You could also include the exception as an inner exception.\n'"
1601,24707121,b'Are we supposed to throw `InvalidProgramException`? Everywhere else we throw `InvalidOperationException`.\n'
1601,24707147,"b""OK. I hadn't bothered since the class (unlike `MigrationTool`) would only have one method, but I can do that. Would probably call it `ReverseEngineeringTool` though.\n"""
1601,24707216,"b""I'm not sure this is an error; maybe they just pointed it at an empty database.\n"""
1601,24707251,"b'Again, I think this is too defensive. We can assume providers implement the contract that we define.\n'"
1601,24707350,"b""There's no need to check for existence before calling this method. It's just a no-op if it does.\n"""
1601,24707371,"b'Hmm. I\'ll look into it. They work slightly differently - this one would use the ""design-time"" services first and only use the ""runtime"" services if it can\'t find the service there. That allows you to override if that\'s what you want (this was taken from a similar class in Scaffolding). Plus the list of services in DesignTimeServices is hard-coded. But I don\'t currently use the override functionality and I could hard-code the ILogger service. I won\'t block on this if that\'s OK?\n'"
1601,24707426,b'Done.\n'
1601,24707438,"b""It seems unethical to change this automatically. If it's due to source control, we should go through the VS APIs.\n"""
1601,24707449,"b""Yep. It's on my list to do - to provide these as services - I hadn't gotten to it yet.\n"""
1601,24707531,b'Hmmm. OK. That seems weird to me but not weird enough to contest.\n'
1601,24707774,b'Done (and in the 2 classes that inherit from this too). Enabling `ApiConsistencyTestBase` will be part of adding the tests.\n'
1601,24708151,b'OK. Done.\n'
1601,24708347,"b""Yep. Sorry - was doing it originally but changed my mind for the same reason. Thought I'd taken them out. Will fix.\n"""
1601,24708656,"b""Hmmm. I like having the ability to override.\n\nWhen constructing the Model you tend to process the EntityTypes in whatever order makes it easier - you might for instance do some analysis of what the dependencies are and insert them in that order. The developer of that code probably doesn't care much in what order they get inserted into the model.\n\nOn the other hand the developer of the codegen code does care. We had a lot of problems with e.g. the EDMX where re-ordering of e.g. properties under different circumstances caused the diffs between successive code gen's to get out of control.\n\nSo I'd like to retain the ability for the codegen developer to decide what the order is.\n"""
1601,24708713,b'Done.\n'
1601,24708811,"b""Holdover from before I added a property for Generator. I'll convert to a C#6 auto-property and use that.\n"""
1601,24708892,b'Holdover from some previous code. Fixed.\n'
1601,24709015,b'Moved the functionality to ModelUtilities and called from both places.\n'
1601,24709106,"b""Yes. I'm not sure I want this to be a service though. It's really just some helper methods. Previously I would have just made them static but that too is not very testable. Was thinking that when I do the testing I could add a protected constructor just for testing and test that way?\n"""
1601,24709122,b'Yep - it was an error. Already fixed.\n'
1601,24709217,"b""Agree we're not using them now. And I will remove. I maintain that we will need them though. There's no way you're going to want to generate the code for a whole database for something with 1000's of tables in it all in one namespace.\n"""
1601,24709300,b'Hmmm. I wanted to provide a ServiceProvider so that later I could just add services and have whatever part of the code needs it look up what it needs (similar to DbContext). Otherwise you end up re-defining this constructor any time you think of something else you need?\n'
1601,24709307,b'Next steps...\n'
1601,24709319,b'And anyway - are we providing non-English command line warnings?\n'
1601,24709371,"b""You mean assembly and type name? It's possible but I've been told to hard-code just to the single SQL Server one for now.\n"""
1601,24709409,b'Fixed.\n'
1626,24727227,b'Filed #1627 before we forget. Also consider using `nameof` in the `Next()` method.\n'
1601,24761636,"b""Is there any reason we can't use the product to query the database and materialize objects?\n"""
1601,24761778,b'I wonder if we should just query the `sys` tables everywhere. The documentation on `INFORMATION_SCHEMA` says that the schema names may not always be correct.\n'
1601,24762151,b'Just _SqlServerDbContextCodeGenerator_?\n'
1601,24762438,b'Why the cast? `IForeignKey` seems sufficient for following usage.\n'
1601,24762776,"b""Should we ensure somewhere that `dbo` is the user's default schema?\n"""
1601,24762971,b'Argument padding in `entity.Key( e => e.Id );` is a bit unorthodox. I think we should use the default VS/Roslyn formatting for generated code.\n'
1601,24763119,b'Any reason not to use `using (sb.Increment())` here?\n'
1601,24763544,b'(`SqlServerEntityTypeCodeGeneratorContext` too.)\n'
1601,24763594,b'Can also just use `EntityType[SqlServerMetadataModelProvider.AnnotationNameEntityTypeError]`.\n'
1601,24763812,b'What about self-refs?\n'
1601,24763910,b'Groovy. I love how well documented errors are in the generated code now.\n'
1601,24763979,b'(Other places too.)\n'
1601,24764061,b'Does `datetime2` also have configurable precision?\n'
1601,24764134,b'These can be `const`.\n'
1601,24764235,b'It might be worth creating data structures for these and other places where things like `Tuple` are used.\n'
1601,24764504,b'(Other places too.)\n'
1601,24765163,b':smile: Property properties!\n'
1601,24765253,"b""Strange heuristic. Doesn't the database say whether it's max or not?\n"""
1601,24765322,b'Can we get the computed expression too?\n'
1601,24765333,b'Can we get the default expression?\n'
1601,24765414,b'Can this be combined with [SqlServerTypeMapper](https://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework.SqlServer/SqlServerTypeMapper.cs) somehow?\n'
1601,24765691,b'We need to map `timestamp` columns to `byte[]`.\n'
1601,24765731,"b""I'd much rather issue an exception that says what's wrong than just wait for it to produce an unhelpful NRE.\n"""
1601,24765834,b'I think I inherited that from Scaffolding. Fixed.\n'
1601,24765981,"b""Again inherited from Scaffolding. I'll fix if there's a necessity but I think a Stream works fine. \n"""
1601,24766041,"b""Let's fix that when/if we see the need. Last I checked we were only supporting generation of .cs files (not e.g. VB).\n"""
1601,24766114,b'But if we ignore it users will get a DbContext file with almost nothing in it and no EntityType files. It would be hard to know what was wrong.\n'
1601,24766135,b'Hmmm. Disagree for same reason as above - much better to get an exception that says what the problem is than just to wait for unhelpful NRE.\n'
1601,24766212,"b""So assuming it's under source control you'd like to attempt to check it out and if that fails for any reason throw? Or do you want to carry on and output everything we can and just issue a warning on the files that fail? If so you risk having a set of files which is not internally consistent.\n"""
1601,24766447,"b""I was thinking it could contain other commands that involve pointing to a database with no context. One example we've talked about is a command to drop the database.\n"""
1601,24766526,b'Have changed it so that it no longer catches. But if the error message that comes out is not actionable I think we should change the approach so that the user sees something from the inner exception that can tell them what they did wrong.\n'
1601,24766546,b'Fixed.\n'
1601,24766601,b'Interesting. DesignTimeServices is designed the other way around--let the user optionally override design-time services. We may need mechanisms for both.\n'
1601,24766699,"b""No Idea what the reasoning is. :smile: It was just that way in EF4.3 Migrations. Maybe because they're kind of like out parameters?\n"""
1601,24766709,b':-) Yes. Not sure how that happened. Will fix.\n'
1601,24766780,b'Just expressing that decision publicly. :wink: \n'
1601,24766816,"b'See ""Features still to be worked on"" - some are fine classes (e.g. Table) would be just fine. Some, such as Identity and StoreComputed on TableColumn, are more difficult. Would like to check this in and then work on what can be done there.\n'"
1601,24766838,b'Works for me.\n'
1605,24727399,b'Is this visitor applied on all parts of the query?\n'
1605,24765956,b'Most places it matters. I will need to do similar for #649.\n'
1601,24767041,"b""The queries I have here are the ones that we used to decide what is meant by a table, or column or foreign key constraint etc for all the EF's through EF6. I'm leary of changing them - just because there may be obscure situations I'm unaware of where we could be changing those definitions. But we should talk about it. There are definitely some things it would make easier.\n"""
1601,24767165,"b""You'd think so, but actually GetAnnotation() is defined on ForeignKey, not on IForeignKey.\n"""
1601,24767227,b'Filed #1634\n'
1601,24767415,"b'The `.SqlServer()` extension methods will fallback to the relational annotations and core metadata. Also in light of #1542, the provider-specific Fluent API may be going away.\n'"
1601,24767491,b'Nope. Fixed.\n'
1601,24767543,b'I think that throws if the annotation is not there (which is expected most of the time - it should only be there in error scenarios).\n'
1601,24767576,"b""I'm fine with having the virutal method here, there's just no need to call `.OrderBy()`. Collecitons in the Metadata API are always deterministic. This is by design because of all the re-ordering issues you mentioned.\n"""
1601,24767741,b'Totally agree. People want filtering.\n'
1601,24767858,"b'The loop at line 128 creates the NavProp on the dependent end of all foreign keys, including self-refs. The loop here is to put a NavProp on this entity where the foreign key is on the other entity.\n'"
1601,24767954,"b""I don't think we've made a conscious decision yet.\n"""
1601,24768030,"b""Good catch. It obeys DateTimePrecision rather than NumericPrecision. I've updated the code to cover that too.\n"""
1601,24768056,b'Fixed.\n'
1601,24768107,"b""Yes. But if I manage to use EF to load everything this would all go away anyway. I'll fix if I can't get EF to do what I want.\n"""
1601,24768165,"b""True, it's not an issue yet.\n"""
1601,24768504,"b""It was just a low-hanging perf improvement. So long as it's functional, I guess I don't really care.\n"""
1601,24769699,"b'Sort of, not quite. In EF6 the query itself had a CASE statement that added ""(max)"" to the data_type for the appropriate data_types and I had decided to put that in code instead of the query as I found I needed the underlying data_type and didn\'t want to have to strip off ""(max)"" whenever I needed that.\n\nThat said there is a bug. The Int32.MaxValue was an attempt to deal with the older data_types ntext, text and image which have the MaxValue set not to -1 like the others but to Int32.MaxValue/2, Int32.MaxValue and Int32.MaxValue respectively. I\'ll update to just check for -1 for the appropriate data_types and specifically check the above values for those data_types.\n'"
1601,24770103,"b""To be worked on. It wasn't part of the queries for EF6.\n"""
1601,24770258,"b'See ""Features still to be worked on"". The DefaultValue contains different things depending on whether the value is fixed or a generated value such as getutcdate(). So there\'s still some work to do in this area.\n'"
1601,24770308,b'We had decided to keep them separate until we deliberately merged them?\n'
1601,24770366,b'OK. Will do. timestamp columns were also automatically marked as StoreGenerated in the EF6 queries.\n'
1621,24767864,"b'Not sure we should include the validator that throws on warnings in product code at this time. YAGNI and if we do want this it may need to have stuff like the ability to ignore warnings. For now, I think anyone who wants this could easily write it themselves.\n'"
1621,24768139,"b""I'm not sure if these should be in IModel or extension methods. Fine with having them in IModel for now.\n"""
1621,24768280,b'Are the changes here just formatting?\n'
1621,24768403,"b'Ah, we can now have curlies in the the messages?\n'"
1621,24771115,"b""I'll move it to test code\n"""
1621,24771150,b'This allows implementations to be better optimized\n'
1621,24771175,"b""That's just what VS did to the file while editing it.\n"""
1621,24771259,"b""Yes, that's why I'm not sure whether it should be or not. :-)\n"""
1601,24778799,b'Done.\n'
1601,24778819,b'Done.\n'
1601,24778885,b'Done.\n'
1601,24779253,"b""You can't configure a length for the ntext, text & image types. We should ignore the max length values for these types.\n"""
1601,24779287,"b""This is in the CodeGen code (as opposed to the Metadata-model-creation code) which would otherwise have no need to open the connection. I'd prefer to keep it that way. Is something wrong with builder.InitialCatalog?\n"""
1601,24779655,"b""Correct, _we_ are only supporting C#, but we shouldn't _prevent_ others from generating different languages. In Migrations, this was done using a simple [Language property](https://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework.Commands/Migrations/CSharpMigrationGenerator.cs#L35) on the generator.\n"""
1601,24779841,"b'@rowanmiller, any thoughts?\n'"
1601,24779944,b'OK. Updated to do that.\n'
1601,24780037,"b""I think it is a valid scenario. I'm thinking that I have a SQL Azure database that it already created for me, I point the tool at it to take care of connection strings etc. and then I can add my entity types and use migrations to add the schema.\n\nAnother data point is that I'm pretty sure this scenario works in the EF6.x tooling.\n"""
1601,24780081,"b""Can we do it in a transaction? :trollface: Just kidding. I'm not sure what the right thing to do would be.\n"""
1601,24780362,b'Done.\n'
1601,24780406,"b""> The queries are the ones that we used for all the EF's through EF6\n\nThat's a scary thought.\n"""
1601,24780433,b'Is the indexer for accessing annotations enough?\n'
1601,24780507,"b""This is a little different than a convention. If you don't specify a schema, EF7 doesn't pass specify one in queries and the database decides what to do. This is different from EF6 where we always specified a schema and dbo happened to be EF's default.\n"""
1601,24780660,"b'No, [it returns `null`](https://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework.Core/Metadata/MetadataBase.cs#L86-L90).\n'"
1601,24780706,"b""Got it. It looked like they were handled elsewhere, but I wasn't seeing where.\n"""
1601,24780945,"b""Yes, they should still be. It's a special SQL Server type that exposes a value that gets changed every time a row gets updated. Conceptually, it's like a computed column with a server-defined expression.\n"""
1601,24781321,b'OK. Done.\n'
1601,24781507,b'OK. Done. That is no longer an error.\n'
1601,24782033,b'I thought the indexer threw if the annotation was not there - but it turns out not. Have changed to use indexer (here and wherever else I can do so in the code).\n'
1601,24767342,"b'Let\'s talk about this. This was just my first attempt to not output fluent API which the conventions code would do for us. Ideally I would like to be able to ask a question such as ""what would be the value the conventions code would generate for X"" - then if it\'s the same as the fluent API I was about to generate I can skip generation. But haven\'t got there yet.\n'"
1601,24782079,"b""OK. Let me fix that later. I was just trying to arrange that we don't output lots of fluent API where I didn't think it would be needed, but sounds like I'll need to revisit that assumption.\n"""
1601,24782264,b'OK. Fixed.\n'
1601,24786609,b'Will use Relational() where I can. Looks like there are still some that are SqlServer specific.\n'
1636,24782724,"b""~~I need to add a check that we don't have any keys here~~...Any other validations?\n"""
1636,24782873,b'Will fix.\n'
1636,24785428,"b""If A derives from B and C derives from B than this would make it impossible to change A to derive from C however there's no cycle,\n"""
1636,24785627,"b""Didn't know that throwif was a word.\n"""
1636,24786242,"b'If you want to leave this test just comment out [Fact], otherwise delete\n'"
1636,24790383,"b'Typo, will fix.\n'"
1636,24790577,b'You could set it to null first ;-) But I will improve this anyway.\n'
1636,24791351,b'Fixed.\n'
1601,24798317,"b'If the file exists and is under source control, checkout out and try to update. If still read-only, throw. Otherwise update.\n'"
1601,24831881,"b'No, in fact, the behavior of `DbConnection.Database` is to read `IniitalCatalog` if the connection is closed. There is, however, a small chance that it can differ from the actual database name.\n'"
1601,24832125,"b'@ErikEJ I agree, this sounds like the right thing to do.\n'"
1601,24836253,"b""@bricelam @ErikEJ That all sounds good to me. And I'll raise a bug to look at how to do this when this tool runs inside VS. But at the moment it's just command-line. So instead I'll just update it to throw if any of the files are read-only (which they might be for any number of reasons, not just SCC). Then the user will have to explicitly make them writeable before re-executing the command.\n"""
1601,24836525,"b'@lajones @bricelam Sounds good, but I was under the impression that you could run this from the PMC...\n'"
1601,24836709,"b""Not quite yet. There's some more code I have to add to make that happen. But it's on the list.\n"""
1601,24837158,b'@lajones  So for now it is: k ef something ?\n'
1601,24838115,"b'@ErikEJ Correct. ""k ef revEng connection_string"" :-)\n'"
1643,24929382,b'fixed\n'
1643,24929396,b'fixed\n'
1648,24956478,b'Why are the docs removed?\n'
1648,24956618,"b'At one point in the iteration the doc was wrong, so I removed it. (Since it\'s not documentation that has been ""officially"" written yet--it\'s just a developer comment.) I think things gravitated back a bit so it is probably a somewhat true statement again, so I can add it back if you want.\n'"
1648,24956657,b'We should discuss the name in API review\n'
1648,24956710,"b""I'm sure we will. :-) Or maybe make it an interface.\n"""
1650,24969438,b'Should be portable.\n'
1650,24969495,b'Is this needed?\n'
1650,24969545,b'Portable.\n'
1643,25012534,b'I think we are missing some result operators: I think the test can just be: \n\n`resultOperator is ValueFromSequenceResultOperatorBase && !(resultOperator is ChoiceResultOperatorBase)`\n'
1604,24727012,"b'typo ""canidate"" \n'"
1604,24854878,b'This expression got complex. You should probably store the sorted create table operations in a temporary variable before the return statement.\n'
1604,24854891,b'Is this ever going to return `false`?\n'
1604,24860791,"b""It shouldn't, the keys are all ones we've already iterated over previously.\n"""
1604,24861234,b'You can replace the inner while with a foreach and use break statement\n'
1604,25007642,"b""I'd call `.ToList()` on this. It seems bad to modify the `alterOperations` collection as it lazily evals in the return statement.\n"""
1604,25008264,"b""The `TopologicalSort` call isn't lazy so `ToList()` would only really impact the `Select(k => createTableOperations[k])` which is fetching from a dictionary. That being said the lazyness is an implementation detail and not necessarily part of the contract so I could see adding it just to be explicit.\n"""
1643,25012748,b'Think you can do this more efficiently with a reverse for loop.\n'
1643,25012913,"b'Can you add this test:\n\n```\n// Base\n[Fact]\npublic virtual void Take_Count_OrderBy()\n{\n    AssertQuery<Order>(\n           os => os.OrderBy(o => o.OrderID).Take(5).Count());\n}\n\n// SQLServer\n\n        public override void Take_Count_OrderBy()\n        {\n            base.Take_Count_OrderBy();\n\n            Assert.Equal(\n                @""SELECT COUNT(*)\nFROM (\n    SELECT TOP(5) [o].[CustomerID], [o].[OrderDate], [o].[OrderID]\n    FROM [Orders] AS [o]\n    ORDER BY [o].[OrderID]\n) AS [t0]"",\n                Sql);\n        }\n```\n'"
1658,25038011,"b""Break long lines. Also you don't need to execute this line until _after_ you match the resultOperator in the line below.\n"""
1650,25039609,"b""Discussed with Brice. The k build works on net451, aspnet50 and aspnetcore50. But we can't make the csproj's portable yet because we depend on System.IO. Will update when we can.\n"""
1650,25039632,"b""As above. Can't yet - will when we can.\n"""
1660,25039699,b'removed\n'
1660,25039705,b'removed\n'
1646,25082021,"b""There's an extension method for doing this--`GetRequiredService<T>()`.\n"""
1651,25082285,b'Should also add `Check.NotNull()` calls.\n'
1646,25082691,b'Will do. Thanks.\n'
1651,25083121,b'Will do. Thanks.\n'
1661,25041694,"b""It would be ideal if you only used GetOutgoingNeighbours when populating predecessorCounts since it's a O(1) operation, but this is not necessary until we get perf numbers.\n"""
1661,25089734,"b""I would also like to factor some reusable parts of the two topological sort algorithms together to make this more DRY, but it's not to urgent yet.\n"""
1656,25090274,"b'Probably not important, but entries can be obtained for entities that are not being tracked such that these APIs can be used to consistently access any entity and potentially start tracking it. This might seem pedantic, and it may not be necessary to put in the API docs, but it is something Diego pushed hard for because it can make code to change state (such as used in the TrackGraph methods) simpler to write,\n'"
1656,25090375,"b""Although I guess since the Entry method is not on ChangeTracker, maybe this doesn't apply here. :-)\n"""
1656,25090574,b'Practical consideration for GitHub reviews--at least in Chrome on my machine it is hard to read these long lines.\n'
1656,25091238,"b'Consider a reference to the KeyValueEntityTracker, or if we change this, then whatever mechanism allows people to easily use the key value to determine Added or Unchanged/Modified state.\n'"
1656,25091392,b'Should this be the IAccessor pattern?\n'
1656,25190628,"b""I'll add it to the docs on ChangeTracker.Entry... oops, I mean DbContext.Entry... would have expected Entry to be with all the other change tracking stuff :smile: \n"""
1656,25202040,"b""Yeah I have a note taken to discuss KeyValueEntityTracker. Personally I'm not sure how much value it adds given the logic is really simple to write inline... but we should discuss. I added a note to revisit the docs once we discuss.\n"""
1656,25202220,"b""Yeah, that's what we decided in API review. Figured the docs can be kept inline as we change the surface.\n"""
1687,25306434,"b'Add, not use. :-)\n'"
1687,25306585,"b""I don't know how to make this better, but if I read this I still wouldn't really know what AddDbContext does or when I should use it.\n"""
1680,25384065,"b'nit:"" Cannot"" instead of ""Cant""\n'"
1680,25384261,"b""don't store this until perf tests show it's on a hotpath\n"""
1680,25385189,b'You can avoid talking about a materializer and just say that instances of an abstract entity type cannot be created\n'
1680,25385728,"b""What's the advantage of this?\nJust grouping two references doesn't justify a new type IMO.\n"""
1680,25386071,b'Should be called ToListAsync\n'
1680,25386674,b'This is so hard to read. Use a foreach.\n'
1680,25386765,"b'Interesting, are you saying that Tuple<,> or KeyValuePair should not exist?\n\nIn this case, I have methods that return these and I prefer this over Tuple.\n'"
1680,25386879,b'Will change.\n'
1680,25386889,b'Will change.\n'
1680,25386947,b'Will change - these are pending our favorite review anyway...\n'
1680,25387065,"b""The Ix-Async operators don't have the suffix.\n"""
1680,25387125,"b""I see, it's ok then.\n"""
1680,25387161,b'Subjective.\n'
1680,25388606,"b'The final call is nested 4 times and two of the calls are async, it is objectively complex for a non-fluent call.\n'"
1710,25393543,b'I will remove the comment - too much copy/paste.\n'
1659,25445446,b'Can you explain why these tests needed to be changed?\n'
1659,25446372,"b""I'm not sure we should be setting Identity by convention for one property in a composite key. Would like to hear what @divega thinks.\n"""
1659,25446462,"b""Is there some reason that the sugar API can't be used here? If so we should consider if the sugar API needs to be changed.\n"""
1659,25446717,"b""Won't this mean that if I set the value generation strategy on the model, then any property marked as GenerateValueOnAdd will becomes an Identity column? If so, I don't think this works for the same reason that the previous convention didn't work--multiple properties will become Identity columns.\n"""
1659,25446791,b'Maybe we need an IPrimaryKeyConvention?\n'
1659,25447401,"b""I don't see tests for checking that GenerateValueOnAdd is set for principal keys (primary or alternate) except where the properties are also foreign keys. Including more than one link in the chain to the root principal. Is this already covered somewhere by existing tests?\n\nAlso, we should have tests that the cases involving cycles that @mikary has been looking at are also handled appropriately.\n"""
1610,24691250,"b'Note, `GO` is just an implementation detail of the tests. It represents batch boundaries returned by the product.\n'"
1610,25408282,b'A recent comment from a customer made me realize we should consider generating these with `WHERE NOT NULL` (and make that work on the runtime as well). It makes SQL Server behavior more consistent with other relational databases (excluding DB2).\n'
1715,25465364,b'Did you mean to leave this in?\n'
1715,25465403,b'Looks like a debug thing - did you mean to leave this in?\n'
1715,25465490,b'Looks like a debug thing - did you mean to leave this in?\n'
1715,25465669,b':+1: will remove\n'
1715,25465677,b':+1: will remove\n'
1715,25465716,b':+1: will remove\n'
1717,25483282,b'Remove line 110\n'
1717,25483307,b'Reformat\n'
1717,25483443,b'Remove lines 66 and 67\n'
1717,25483478,b'Remove lines 100 and 101\n'
1717,25483554,"b'Consider just ""P"" as the suffix\n'"
1717,25483633,b'Use indexer\n'
1717,25489001,b'Thanks.\n'
1717,25489120,b'Done.\n'
1717,25489227,b'It should throw here.\n'
1719,25522194,"b'I wonder if this is helpful enough given that this is something that people often try to do? But then I\'m not sure what to say that doesn\'t get into principal/dependent terminology that will be confusing. Maybe @rowanmiller has an idea. Also, is there any way we can support this mapping--that is the ""spouse"" mapping where any entity only has a principal or only has a dependent, and never both? Not saying we do it now, but if there is a reasonable way to do it we could file an issue for it.\n'"
1719,25532134,b'You could do it on the clr entity type: map the relationship using two private nav properties and access them through an unmapped Spouse property that will enforce this.\n'
1719,25535146,"b""It would be nicer to allow the nav-prop to be mapped twice for that case. But I don't think we need to do it now.\n"""
1718,25478393,b'FWLink tool is offline at the moment... will replace 000000 with actual FWLink before pushing\n'
1719,25535286,"b""It will require special code in fixup and query since we will need to get the fk value to determine whether this navigation is to principal or to dependent. I don't think its worth doing.\n"""
1719,25536783,"b""I'm fine with us not doing it.\n"""
1732,25624667,b'@AndriySvyryd At the moment I catch the exceptions that this method can throw. But should we consider adding a throwOnError bool instead? Then you could pass true and I could pass false (and have the code return null if the flag is false and it would have thrown).\n'
1710,25629925,b'We use `GenerateLiteral((dynamic)value)` to do this in other places.\n'
1710,25630270,b'Should this be a service?\n'
1710,25630553,b'It might be better to use the `Convert` class than to look for instance methods named _Parse_.\n'
1712,25630924,"b""Is there a different way to factor this that doesn't require a union type?\n"""
1710,25631048,"b""Apparently `Convert` isn't available everywhere. Do we need this code to work everywhere?\n"""
1712,25632566,"b""I'm open to suggestions. I did think about it because it seems ugly, but there is generic code which we want to apply to all SQL Server values (remove the surrounding parens and potentially reporting the failure to understand the value at all), then we want to determine whether that value is an expression or a value - so that the EF code knows which Fluent API to apply. Unfortunately these concepts are both stored in the same value in the database. So this code need to report one of 3 things: i) I don't understand this value at all, ii) I understand it as an expression and here's the expression, iii) I understand it as a value and here's the value. So this seemed the most pragmatic way of doing it. Another alternative was out params but that seemed even uglier.\n"""
1732,25632598,b'This exception will likely be converted to a log message.\n'
1710,25633060,b'Will do. Thanks.\n'
1710,25633492,"b""I thought about it, but it seemed very specific to this particular provider and not something other provider writers would find useful to override. But I have a couple of other issues where I'm considering changing to a service - I've added considering this to #1672).\n"""
1732,25634473,"b""@AndriySvyryd - when the conventions architecture calls this code, yes. But for this code I just care whether you can find a key or not - if it fails to find a key I don't need to know or report why. I just want to know that it has failed and hence that there is no key that would be chosen by convention.\n"""
1732,25634656,b'If it fails it will just return an empty list\n'
1732,25634959,b'@AndriySvyryd What about the multiple matching properties InvalidOperationException?\n'
1732,25635206,b'It will just return an empty list in that case\n'
1732,25635506,b'@AndriySvyryd  ??? - lines 53-57 of KeyConvention currently throw in that situation. Am I missing a rebase or something?\n'
1732,25635619,b'I am talking about the future version of this when I add logging to conventions.\n'
1732,25635843,"b'@AndriySvyryd OK. Let\'s change this when we you add logging then. At the moment if I came across that situation and I stop catching the exception then RevEng would throw, when really all it needs to do is treat it as ""no key found"".\n'"
1732,25636037,"b""I don't think we should be using exceptions for flow control, especially when we own the code that is throwing the exception.\n"""
1732,25636066,b'@divega Do you have an opinion?\n'
1732,25637331,b'What about removing the exception as part of this change instead of waiting for logging support to happen? Would that break many tests? It seems Andriy is already tracking that change but a TODO might help point out where the warning needs to be logged. Thoughts?\n'
1732,25637425,b'Fine by me\n'
1732,25638235,b'You mean remove throwing the exception and just return null? That works for me.\n'
1710,25638330,b'I had to add a dependency on System.Runtime.Extensions. After that Convert was available everywhere. So have changed to use Convert.ChangeType().\n'
1732,25638437,"b'Not null, empty list.\n'"
1732,25638712,"b""Yep - sorry - that's what I meant. OK. Will do. Thanks.\n"""
1739,25653425,b'Dead code?\n'
1746,25744444,b'Typo: migraiton\n'
1746,25744484,b'Are these guaranteed in (ascending) Id order? The going down version below has an OrderByDescending(...).\n'
1746,25744510,b'Typo - same as above.\n'
1746,25748156,"b'Yes, order is ascending by default.\n'"
1752,25827457,b'This work for !Discontinued?\n'
1751,25827896,"b'Have been thinking about this and will update to strip off the ""Id"" only if it is specifically ""Id"" or ""ID"". ""id"" might be the end of some other word and ""iD"" just seems weird.\n'"
1756,25831353,"b""I don't like this, maybe LogMessages ?\n"""
1756,25832085,"b'+1, and I would change the constructor parameter. Otherwise just leave it as it was.\n'"
1754,25883905,"b'Consider\n\n```\n.Append(operation.PrincipalColumns.Count == 1 ? "", principalColumn: "" : "", principalColumns: "")\n```\n'"
1751,25962912,"b'Yes, this feels brittle. Instead of `EndsWith(""Id"")` can we do something like `EndsWith(principalPKColumnName)`? This might also allow us to handle composite keys better too. E.g. EmployerId1, EmployerId2 could become Employer instead of just Company.\n\nIt also doesn\'t seem to work well with databases that name things using underscores like EMPLOYER_ID.\n\nI wonder if it\'s worth even trying to do this in v1. In EF6, we just uniqified the principal table name.\n'"
1751,25962965,b'Are we going to pluralize these?\n'
1751,25965943,"b'There\'s a whole lot more we could on pluralization/singularization. But discussed that with @rowanmiller a while back and decided not to get into that - at least for this release.\n\nAs for priority - #1076 is marked as pri0. Again I\'d defer to @rowanmiller on that. And unfortunately just uniquifying the principal table name is what causes the Employee, Employee1 situation which is the main complaint of that issue.\n\nNot sure I follow on the composite key scenario. If the foreign composite key is {EmployerId1, EmployerId2} and the principalKey is (CompanyId1, CompanyId2} how does EndsWith(matchingPrincipalPKColumnName) help me come up with ""Employer"" as the NavProp name? The problem with composite keys is you have to pick one name from all the column names - and it\'s hard to guess what would be most helpful - I could try to find a common prefix that all the column names share and then strip off ""I[dD]"" and uniquify that? An alternative is to use the name of the constraint in the database - but that\'s usually something unhelpful like FK_Customer_Employee_1 i.e. all it tells you is the names of the tables at either end. And it doesn\'t have to follow that pattern - the DBA is free to name it whatever they want.\n'"
1751,25965966,b'Not for now at least - see comment above.\n'
1751,25966439,"b'Also am happy to extend it to look for EndsWIth(""_id"", StringComparison.OrdinalIgnoreCase) as well.\n'"
1781,25986776,b'Use conditional operator.\n'
1781,25986809,b'Use First when you have already checked the length.\n'
1781,25986874,"b""Don't set this to false - it might already be true.\n"""
1781,25987138,b'I think we want to avoid making InExpressions have this dual behavior.  I would rather just have Values contain the parameter expression here.\n'
1781,25987169,b'See comment above.\n'
1781,25987270,b'I think there is an injection vulnerability here.\n'
1781,25987315,b'This should optimize.\n'
1784,26064847,b'Is there any way that we could get a selectExpression back that still requires partial client evaluation?\n'
1784,26066168,b'This is just tracking whether this particular WhereClause requires client eval.\n'
1787,26088950,"b'Sorry my lack of context on this, but is the argument querySource supposed to be ignored?\n'"
1787,26089133,"b""I see it get's used in derived classes. \n"""
1788,26092449,b'We need a custom exception type for this?\n'
1788,26092462,b'Check inline when arg is passed to base.\n'
1788,26092465,b'Check inline when arg is passed to base.\n'
1788,26138086,"b'Not necessarily, the `ModelItemNotFoundException` seemed inappropriate for a general purpose component, but an `InvalidOperationException` is probably just as good.\n'"
1751,26162635,"b""I talked with Rowan, and I'm fine with however much of this we want to implement. We should, however, review what we do by convention in a (possibly ad-hoc) design meeting.\n"""
1751,26166659,b'@bricelam Sure. No problem - happy to review.\n'
1779,26149216,b'byte[]?\n'
1779,26149328,b'Call this VisitInExpressionValues and make it protected virtual.\n'
1779,26149475,b'Is it correct to call First() here?\n'
1779,26149687,b'I wonder if we should remove NotInExpression and just use Not(InExpression). We would then need to handle this in SQL gen.\n'
1779,26170232,b'will remove the else\n'
1779,26171195,b'Break this line.\n'
1791,26243536,b'Are these tests broken / going away?\n'
1791,26246108,b'I missed re-enabling them. Will do so.\n'
1791,26246732,b'Should the values in `_onConfiguringMethodParameters` also be updated?\n'
1791,26247007,b'Will do. Interesting that no tests failed...\n'
1791,26247511,b'Should this file be updated (or removed)?\n'
1791,26247681,b'Missed re-enabling these--will do so.\n'
1791,26247784,b'Intentionally left commented out?\n'
1791,26248100,b'Should be removed. Will do so.\n'
1812,26354904,b'Why do we need to enumerate columnOperations twice?\n'
1812,26400014,b'Changed.\n'
1734,25639868,"b'If you need these, share them, rather than making this public.\n'"
1734,25646566,"b""Don't duplicate the code below. Refactor both into something that pivots on the source table expr.\n"""
1734,25646883,"b""Don't think this is needed, is it?\n"""
1734,25647430,"b'Can we rename this to ""RawSqlDerivedTableExpression""?\n'"
1734,25647600,b'This is how the `DefaultSqlQueryGenerator` is able to distinguish a table from a raw query so it knows to make a sub query.\n'
1734,25647716,"b'""Custom"" is a pretty bad name, it would probably be better as ""RawSql"" in most places\n'"
1734,25647811,b'Would we want an optional expression parameter so the existing code path can use the element type as it was but we still have a way to pass in the query string?\n'
1734,25648396,"b""Let's try and do this using a custom LINQ operator instead. Take a look at how AsNoTracking and Include are inplemented. The difference here is that the op will be defined in Relational and so we will need to figure out how it gets registered - currently this happens in CompiledQueryCache.CreateNodeTypeProvider\n"""
1734,25648528,b'This can go away and the new operator can just hang from IQueryable<T>\n'
1734,25648587,b'Inline these. Optimize for readability in tests.\n'
1734,25649068,"b""No, just extract a new method and call it from both places. It may be DRY'er to have the new method take a Func<TableExpressionBase> as a factory for the table expr. but I would see what it looks like to just build the table expr. externally first.\n"""
1734,25649105,b'Meant Schema.\n'
1734,25649211,"b'Ideas for the operator name:\n\n1) ""FromSql""\n\ncc @divega \n'"
1734,25649549,b'I had the same in mind. +1\n'
1734,25832265,"b'fix the formatting - e.g. space between base.ToString() and annotations, maybe wrap annotations in some kind of parenthesis. \n'"
1734,25832321,"b""Consider more explicit name - not super important since it's private class\n"""
1734,25832440,b'missing check.notnull\n'
1734,25833221,b'collapse into one condition\n'
1734,25833362,b'i would move the null-check to the public surface and remove it from here\n'
1734,25833737,b'consider not passing rawsql as closure\n'
1734,25833884,b'add parentheses around RawSql for more readability \n'
1734,25883980,b'Use extension method rather than custom DbSet.\n'
1734,25884202,"b""Don't inherit here as the base tests are going to be run twice. Refactor the asserts into a test helper if required.\nMake this test base class abstract.\n"""
1734,25884237,"b""Don't inherit here as the base tests are going to be run twice. Refactor the asserts into a test helper if required.\nMake this test base class abstract.\n"""
1734,25884351,b'What is the purpose of this interface?\n'
1734,25884410,b'This need to change?\n'
1734,25884853,b'I think we should just change MetadataBase to be this and move it out of metadata. Another option is to introduce AnnotationCollection and use it in both places.\n'
1734,25885338,"b'""sql""\n'"
1734,25885528,b'Good catch.\n'
1734,25885635,"b'If this is not overridden, I would just inline it.\n'"
1734,25885781,b'Start the subquery on a new line and indented - see Take_Distinct_Count for example.\n'
1734,25905233,b'It is intended to simplify the casting logic in the Expression Tree Visitors.\n'
1734,25905323,"b'Need is a strong word, but this logic is common between both visitors and the reflection work seems a bit heavyweight for identifying a type and pulling out non-generic property values\n'"
1734,25905685,b'I like the idea of having a non-abstract version of this class for re-usability (Trying to keep a DRY solution where we have to avoid multiple-inheritance)\nAny thoughts on this thread? @bricelam\n'
1734,25905953,"b""This probably isn't the best factoring, we could also calculate these parameters within the methods and just pass in a `TableExpressionBase` but there are properties of this construction that would be calculated in three different places in that factoring.\n"""
1734,25906035,"b""That's not a pattern I've seen much before, how does it aid readability?\n"""
1734,25906160,"b""Any suggestions for making sure this doesn't leak outside of the relational context?\n"""
1734,25957962,"b'It only ""lights up"" if you are referencing relational. \n'"
1734,25958193,b'I would prefer to leave this code as it - unless it is needed for this change.\n'
1734,25958649,b'Move the alias construction into the main method and pass the alias to the func.\n'
1734,25961659,"b""I'm fine with either inheritance or composition for sharing the implementation. If everything can inherit then yes, we should rename MetadataBase to Annotatable and move it to Infrastructure.\n"""
1734,25978321,"b""Added an issue (#1778) to track this, since it's not directly related to this PR.\n"""
1734,26146047,"b'Does this comment still apply? Sounds to me like we actually only want this to be callable on a root, i.e. on a DbSet<T> by I might be missing something.\n'"
1734,26146523,"b'If the raw SQL query contains multiple lines, will they all be indented the same?\n'"
1734,26146708,b'What is the story with parameters?\n'
1734,26147436,"b""I don't think this is applicable anymore. The operator approach resulted in unwanted client side processing and leaves questions about how to process custom SQL at an arbitrary node in the query.\n"""
1734,26147859,"b'""("" + Sql + "") AS "" + Alias?\n'"
1734,26148202,"b""There isn't any logic in place to do this right now, did we want to try?\n"""
1734,26148451,"b'I was just looking to get the basic DbSet pipeline in place with this PR, we still have parameters, best-effort materialization(off of the Database) and possibly dynamic types.\n'"
1734,26150001,"b""That doesn't seem very DRY to me, since this would be guessing at the interpretation of the SQL generator that consumes this object.\n\nThe current implementation is consistent with the other TableExpressions, but we could revisit this if it's important / useful enough.\n"""
1734,26150011,b'Should be easy if you use a StringReader to read each line and append to the output.\n'
1734,26150118,b'This is just for debugging so do whatever makes it clear.\n'
1734,26150285,b'Would we need to worry about literal line-breaks in quoted strings etc.?\n'
1734,26150747,"b""I don't think you can do that - at least in TSQL. \n"""
1734,26151024,"b'Maybe it is not too bad, but the alternative is to not worry about it at all and not try to indent raw SQL. \n'"
1734,26162555,b'Added #1795 to track this\n'
1734,26162725,b'NotEmpty\n'
1734,26163251,"b'Calling this ""Visit"" is confusing. How about ""CreateQuery""?\n'"
1734,26163365,b'Just AppendLine?\n'
1734,26163534,b'Disposable\n'
1734,26163708,b'string line;\nwhile ((line = reader.ReadLine()) != null) {\n'
1734,26163776,"b""Yep, let's do that separately.\n"""
1734,26163869,"b'Reformat this line, move constraint to new line.\n'"
1734,26164056,b'Remove this check (and the Context property). If we are in this method then we can assume relational is in use.\n'
1734,26164348,b'I think this would harm readability\n'
1734,26164849,"b'Rather than do this, explicitly implement IAnnotatable on DbSet<> and then provide an impl in InternalDbSet. The impl can just delegate to _entityQueryable.\n'"
1734,26164913,"b'Without this, someone can include relational and make a call on a non-relational context (i.e. InMemoryStore) and it will silently ignore the custom SQL.\n'"
1734,26165048,b'This is a well known pattern for avoiding the duplicate calls to ReadLine.\n'
1734,26165433,b'DRY this up everywhere. Rename to AssertQuery.\n'
1734,26165650,b'Test the same query but with different FromSql.\n'
1734,26166190,b'I thought that case was covered by `From_sql_queryable_cached_by_query`\nis this test just redundant?\n'
1734,26166287,b'Do we want all of the `AssertQuery` (sync and async) moved in here?\n'
1734,26166427,"b""I'm not sure I understand what you mean. I'm getting the provider so that I can create a query and creating a new EntityQueryable to make sure we aren't persisting any annotations beyond this call.\n"""
1734,26166628,"b""That's a stronger constraint than we have on `Annotatable` itself, do we want to update that as well?\n"""
1734,26168469,"b""Seems unlikely. Either way, the way this is checked seems hacky. I don't think we can guarantee that Database will always be a RelationalDatabase. The type of the concrete Database class seems only coincidentally related to whether or not the underlying query provider understands the annotation.\n"""
1734,26168611,b'We always have a unique EntityQueryable instance per DbSet.\n'
1734,26168697,"b""Only where it makes it DRY'er\n"""
1734,26168833,"b'Oh, I see that now. Just wondering how it works because it seems like there should be a single cache entry that is bound to the first SQL statement.\n'"
1734,26168950,"b'Yes, seems like an oversight.\n'"
1734,26193838,"b'What if the return type of this method was not just IQueryable, but something that still denotes it is a query root, e.g. DbSet? I thought about it because I was wondering how to enable the chaining we talked about today, e.g. of different provider specific raw query methods, but I think beyond that it would make sense since the method just adds information to the DbSet. Thoughts?\n'"
1734,26229971,"b""We could have some kind of `DbSet<T>` wrapper or builder returned instead of IQueryable.\n\nI'm currently working with a change where I added `IAccessor<EntityQueryable>` to `DbSet<T>`, but the extension method clones the query before annotating so it still won't chain like that yet\n"""
1741,25707554,b'It seems unfortunate that we have to do this now. Can we think about this some more and see if we can come up with a better experience?\n'
1741,25708166,"b""What is it about TagId that means it should not have generate values on add set? And why is it that the conventions don't pick up on whatever this is and not set it?\n"""
1741,25708226,b'Likewise for other properties here where we are changing what the convention does.\n'
1741,25708892,"b""I'm not sure that composite keys should get one property set as SQL Server Identity by default. Also, the fact that we have some essentially arbitrary rules that kick in to determine which property to use seems like not a great idea. It might be better to not set any property as Identity by convention and to let the app do this explicitly to one property if this is what the app needs.\n\nAlso, we want to switch over to make Sequences the default at some point, and we may be ready to do that now because Migrations support was holding us back, but that should now work. (We also may need a story for SQL Server versions that don't support sequences.) If using sequences becomes the default, then it's not clear when this would be useful. Also, multiple columns could use the sequence if needed, but I'm not sure we should do that by convention either.\n\nWe should discuss this with @divega.\n"""
1741,25728479,"b""I'm ok with not doing anything to composite keys for now.\n"""
1741,25735219,"b'In the tests we are not assigning the values for TagId, Because of GenerateValueOnAdd being true the value generation assigns a value. This notifies PrincipalKeyChange. But the tests expect it to be null.\n'"
1741,25743016,b'+1 It seems better to me not to try to be smart about value generation for composite key members.\n'
1741,25746643,b'You can use key.IsPrimaryKey\n'
1741,25746954,"b""I believe the last time we discussed this we decided that this case would be handled by 'lightweight conventions':\n\n```\nforeach (var entityType in modelBuilder.Metadata.EntityTypes)\n{\n    var key = entityType.GetPrimaryKey();\n    if (key.Properties.Count == 1)\n    {\n        var keyProperty = key.Properties.Single();\n        modelBuilder.Entity(entityType.Name)\n            .Property(keyProperty.PropertyType, keyProperty.Name)\n            .ForSqlServer()\n            .UseSequence();\n    }\n}\n```\n"""
1741,25791368,"b'We have a convention that sets Identity on a primary key column if neither Identity or Sequence is explicitly set. (As noted in previous comments, this should be simplified so that it only sets Identity for single integer keys, not composites.) Can we not change this convention to set Identity or Sequence based on what is annotated at the model level?\n'"
1741,25791475,b'That makes sense given that this is a unit test for this specific behavior. Thanks.\n'
1741,25791695,b'Why do we need to switch GenerateValueOnAdd off here?\n'
1741,25791785,b'Why do we need to switch GenerateValueOnAdd off in all the cases here?\n'
1741,25791879,b'Why do we need to switch GenerateValueOnAdd off in these cases?\n'
1741,25791964,b'How about here?\n'
1741,25796099,b'The convention runs before the model is annotated.\n'
1741,25796533,b'Does that mean we need a convention that runs when the model is annotated so that changes to annotations can be responded to?\n'
1741,25799064,"b""We can do that, but it's much more granular than any conventions we have now or expect to have in near future.\n"""
1741,25967514,"b""After discussing with @AndriySvyryd  & @ajcvickers , \nwe decided that we won't do anything for composite key. \nFor PK with only 1 property and if that property is common integer type then we will add Default as value generation strategy.\nWhenever SqlServerValueGenerationStrategy.Default is present, we use Identity only if there is no model level value generation strategy assigned.\nIn the absence of any input from what will be the value generation strategy, we use Identity.\n"""
1741,25967729,b'This was old code where we had to turn off the value generation for dependent end of relationship.\nRemoved now.\n'
1741,26145220,"b""It's unfortunate that we don't use the sugar API here and instead restore to building annotation names and values manually. One of the advantages of the sugar API is that it creates a single place where the annotation name building happens. Can we investigate why the sugar API can't be used here? Maybe @AndriySvyryd knows?\n"""
1741,26146135,"b""This doesn't seem right to me. It seems like if a property has GenerateValueOnAdd, but doesn't have a ValueGenerationStrategy set, then it will use the generation strategy set on the model. I think it should only use the strategy set on the model if the property is annotated with Default.\n\nAnother way of thinking about this is that the SQL Server model building conventions are now entirely responsible for determining value generation strategy for each property. Migrations doesn't even need to look at GenerateValueOnAdd anymore. It just looks if the property is annotated. If it is, then it either sets that strategy directly, or if it is annotated as default it will instead use the strategy set on the model. If no strategy is set on the model it will use the overall default--currently Identity, soon to be Sequence. However, it might would be good to remove this last set and annotate the model in every case. Then if we change the default in the future existing models will continue to work without any additional work.\n"""
1741,26146288,"b'If possible, factor the code here and the code used in Migrations into a common place, since in both places it is about finding the effective strategy for a given property.\n'"
1741,26154243,b'There is no sugar API for internal model builders. We can add it if you think it will add value.\n'
1741,26158761,"b""For composite PK, we don't set any annotation by conventions. What is expected behavior in such cases if user doesn't specify strategy. Presently all tests which have composite PK, uses Identity so it has been explicitly specified.\n\nWhen a new key is added in SqlServer, GenerateValueOnAdd and annotation both are set. But if the key later becomes dependent end of FK then we set GenerateValue false but annotation still remains there. Therefore we are making check on GenerateValue.\n"""
1741,26159470,"b'1. The expected behavior is that if the property should use Identity, then that must be specified explicitly using the fluent API.\n2. Annotation should be removed if it was added by convention.\n'"
1741,26159736,b'Possible place to put method for refactoring?\n'
1741,26160176,b'Same place ValueGenerationStrategy property is.\n'
1741,26250376,b'@ajcvickers - This test fails because we use model annotation only if Default is applied to property.\nRemove/modify?\n'
1741,26250421,b'Done.\n'
1741,26250473,b'Updated.\n@AndriySvyryd - There are changed in conventions related to FK added and removed. Can you review again?\n'
1741,26252267,b'Default should be first\n'
1741,26252518,"b""Since the convention will remove the annotation you don't need to check GenerateValueOnAdd here\n"""
1741,26252906,b'Modify by applying Default to all properties. Also add another test that asserts that model annotation is not returned if property annotation is not set.\n'
1741,26254682,b'This condition will return true for a composite key where a foreign key is defined on only a subset of properties or a key whose properties are a subset of foreign key properties. Change the check to account for this and add tests.\n'
1741,26255145,b'Same as above. Extract check to a method to avoid duplicate logic.\n'
1741,26255307,"b""This isn't related to your changes, but change this line to return new Property[0]\n"""
1741,26255702,b'Merge with SqlServerKeyConvention and rename to SqlServerValueGenerationStrategyConvention\n'
1741,26255838,"b""typo in 'Annotaion'\n"""
1741,26256012,b'Also need to check that ValueGeneratedOnAdd is true\n'
1741,26256096,"b'No need to check for existing foreign keys, just that ValueGeneratedOnAdd is true. Extract logic to avoid duplication.\n'"
1741,26256500,b'This should be public.\n'
1741,26256581,"b'And should be defined on ReadOnlySqlServerModelExtensions because it is only about inspecting metadata, not changing it.\n'"
1741,26256692,b'Can you make the change to always put the default value generation strategy in the model rather than hard code it here? Or file another issue to do so if you prefer.\n'
1741,26256850,b'Can you use GetSqlServerValueGenerationStrategy here?\n'
1741,26257154,b'This would fix the logic as currently it will return the model strategy if property strategy is null\n'
1741,26257222,"b'Consider using the SQL Server conventions with the model builder. This will then test that given the SQL Server conventions and the model annotated with Sequence, the correct generators are used for the correct properties.\n'"
1741,26257297,b'Memory: add the same instance\n'
1741,26257849,"b""@ajcvickers I think that would be a different test for ModelBuilder that I mentioned in a previous comment. These unit tests shouldn't depend on correctness of the conventions.\n"""
1741,26258254,"b""@AndriySvyryd I'm fine with that so long as the functional test is added.\n"""
1741,26342533,b'We should add sugar API for removing this annotation\n'
1741,26342781,b'We should add sugar API for this.\n'
1741,26343741,b'Did you file an issue to not return Identity by default but instead always put it in the model?\n'
1741,26343935,b'Can you use GetSqlServerValueGenerationStrategy here?\n'
1741,26344135,b'Why is this a static method here instead of an instance method on the property extensions?\n'
1741,26351827,b'filed #1811 \n'
1741,26353705,b'moved to property extension ValueGenerationStrategy property\n'
1741,26353715,b'Simplified.\n'
1741,26400598,"b'Can\'t call this UseDefault because there is no indication as to what ""default"" this is. Change to UseDefaultValueGeneration for now, but we should review these names in API review and also review whether to change to just one method with a parameter.\n'"
1741,26400710,b'Consider using null propagation operator.\n'
1741,26400767,b'Fix whitespace\n'
1750,25826968,b'This looks like LINQ Aggregate.\n'
1750,25827034,b'Should this be a constant?\n'
1750,25827084,b'Seems over factored.\n'
1750,25827254,"b""It doesn't have to be any specific value, just a placeholder before the real PK is configured\n"""
1750,25827327,b'Subjective\n'
1750,25827577,"b'Looks better as is. The main purpose of the call is in the side effects, not the return value.\n'"
1750,25828089,"b'""Placeholder""?\n""Temp""?\n'"
1750,25828196,"b'I predicted that answer. Curious, do you do this for all x.Count == y.Count expressions? What is the criteria?\n'"
1750,25828223,"b'Also ""Equal"" is more correct than ""Same"" here.\n'"
1750,25828251,b'TempId?\n'
1750,25828410,"b""It looks more consistent with ArePropertyTypesCompatible here. Local template method.\nI'll change the name to ArePropertyCountsEqual\n"""
1821,26429281,"b""Don't check these removals in :wink: \n"""
1821,26429352,"b""Thought I'd reverted them all - missed that one. Will fix - thanks!\n"""
1597,24644094,b'Should this be settable?\n'
1597,24649837,"b""Yes. It is useful for setting original values for concurrency or FK properties. You think it shouldn't?\n"""
1597,24650158,b'Do we have a negative test cases for passing wrong name and/or type? Sorry if I missed it.\n'
1597,24690803,b'I added test for wrong property name\nCurrently there is no mechanism to throw if wrong type is passed.\n'
1597,25281426,"b""It appears that this won't throw if TProperty is the wrong type because the strong types on the generic PropertyEntry is pure sugar around the non-generic, e.g. the type is not even passed or verified in the constructor. You would very likely get an invalid cast exception later when trying to set or get the values. I believe we should validate the type and throw a useful exception but I would like to hear what @ajcvickers has to say.\n"""
1597,25284311,"b'Yes, we should do early validation.\n'"
1597,25746494,b'Added validation and test.\n'
1826,26432151,b'Not sure why all the whitespace changes. The 3 lines above are the only real change.\n'
1831,26436366,"b'this could be optimized to p.Discontinued = p.Discontinued if I run negation optimizer before equality expansion. Currently running it just after the expansion, since it optimizer more real-life cases. Running it twice seems like too much cost for the benefit, but could be done if you guys think it makes sense. \n'"
1831,26438247,"b""Couldn't we optimize out the whole WHERE clause for this case? :smile: I don't have a strong opinion on executing the rules more than once. In principle we could design it so we can apply simplifications in a loop until either the tree doesn't change or we go over some threshold, but not sure about the cost/benefit ratio here.\n"""
1831,26440398,"b""We could, I was thinking to add tautology/redundant constants optimization as well. In this case however, since the properties are wrapped in a 'Not' clause, we would still have to apply 'Not' elimination before tautology elimination to optimize this out (or make tautology removal more sophisticated)\n"""
1826,26504155,"b'You can always throw exceptions to ""log"" errors.\n'"
1826,26504578,b'Someone probably ran R# Code Clean-up which formats it differently than VS does by default.\n'
1826,26506674,"b""Did it this was to be consistent with some logging that MigrationTool does. I don't really mind which way though. Would you prefer exceptions? Any particular kind of exception?\n"""
1826,26512876,"b""Looks like ContextTool uses InvalidOperationException. So I'll do the same.\n"""
1835,26518195,b'Can this be called just ReadValue?\n'
1835,26520139,"b'It can, but when I had it like this I ended up with runtime bugs because the overload that was taking object was called instead of their being a compile error. This was because my code was wrong, but I decided to change the name to make it not compile in such cases.\n'"
1835,26520390,"b""Since it will result in an exception anyway if the wrong one is used I would prefer the shorter name, but I don't feel strongly about it.\n"""
1835,26520513,"b""I'd rather have compile-time checking than a runtime exception.\n"""
1835,26520597,b'ok\n'
1831,26595807,b'optimizated? Cool!\n'
1831,26595892,b'Should have a space after NOT\n'
1837,26595514,"b""Is all of this config required? Isn't Code First doing a bunch of this?\n"""
1853,26710963,b'Sorry if I was unclear - You want to pass the type to the base ctor. All Expressions already have a Type property.\n'
1853,26711040,b'Call base.\n'
1845,26683415,b'Not sure about the name - perhaps something like IAnnotatableQuery?\n'
1845,26683873,"b""I don't think we need the attribute now.\n"""
1845,26684141,"b'We should try and prevent chaining of this. In particular, can we return IQueryable<> from FromSql?\n'"
1845,26684393,b'Add AppendLines to IndentedStringBuilder?\n'
1845,26684427,b'Return IQueryable\n'
1845,26706469,b'Use nameof\n'
1845,26706589,b'Add a Check.NotNull to the setter\n'
1845,26706679,b'Null check inline and attribute.\n'
1845,26706701,b'Null check and attribute.\n'
1845,26706853,b'Can skip the check here\n'
1845,26706922,b'Can remove private set\n'
1845,26707016,b'Optional: Can write this with a single AddTable call with an embedded conditional expr.\n'
1845,26707167,b'Use a Cast here.\n'
1845,26707451,b'Make this public but move it to the Query namespace.\n'
1848,26683295,"b'Nit: better to name the parameters what it is a ""count"" of and similarly for ""expected"". Otherwise looks good.\n\nDo you need other tests where you reset the Batch Size and show that the above changes?\n'"
1860,26797815,b'Count\n'
1860,26797830,b'Count\n'
1548,24133828,"b'This would repeat the entity type name and does not include the referenced key, perhaps something like ""EntityType {p1, p2} -> "" + ReferencedKey.ToString() ?\n'"
1548,24134029,"b'This will print all visited keys, not just the ones forming the cycle. You need to find where the repeated foreignKey is and start from there.\n'"
1548,26790536,"b""This is redundant since it's already checked before the call to TryGetValueGenerator.\n"""
1859,26808781,b'Nothing to dispose I guess. Is this what looks weird? :smile:\n'
1859,26815667,b'Also needing to write all this infrastructure just to get a Hosting built ApplicationServices out.  Lots of repos are needing this exact usage (creating a hosting built ISP)\n'
1859,26816078,"b""We might need to look at this a bit. Seems like we might need to be able to boot the hostingEngine without a server (that's what this is). If you replace the IServerFactory you get the same effect.\n"""
1859,26820377,b'Good to hear this is a common need. Is it always about desing-time?\n'
1859,26820515,b'I am going to guess testing is another reason.\n'
1859,26821246,b'Yeah mostly its testing I think\n'
1871,26872514,"b'nit: small ""p""\n'"
1871,26872658,b'call this()\n'
1871,26873602,b'Keep the ordinals in the string and call string.Format in SQL gen.\n'
1871,26873689,"b""This isn't safe in general. See comment below.\n"""
1871,26878779,b'nit: You could make this an array as it is fixed size. Then you can avoid the alloc below.\n'
1871,26878818,"b""nit: '+' is fine here for concat - and is faster.\n"""
1876,26884751,"b'Nit: could be about any sort of properties, right? Not necessarily keys.\n'"
1880,26899766,"b'The difference between the two overloads is in the source query argument, not the navprop path argument. Changing the name of the latter is very misleading.\n'"
1880,26900165,b'Something like `ThenIncludeAfterCollectionMethodInfo` would probably make what this is clearer.\n'
1880,26900180,b'OT: Can we start using nameof() for these?\n'
1880,26905246,"b'Renaming the source parameter should be fine, but it is hard to come up with a good name. E.g. `sourceQueryIncludingCollectionNavigation` would be more accurate than `sourceCollection` :stuck_out_tongue_winking_eye:. Another option would be to leave the parameter names the same and select the MethodInfos using type information, e.g. something like this: \n\n``` C#\ninternal static readonly MethodInfo ThenIncludeAfterCollectionMethodInfo =\n    typeof(EntityFrameworkQueryableExtensions)\n        .GetTypeInfo().GetDeclaredMethods(nameof(EntityFrameworkQueryableExtensions.ThenInclude))\n        .Single(mi => mi.GetParameters()[0].ParameterType.GenericTypeArguments[1].IsGenericType);\n\ninternal static readonly MethodInfo ThenIncludeAfterReferenceMethodInfo = \n    typeof(EntityFrameworkQueryableExtensions)\n        .GetTypeInfo().GetDeclaredMethods(nameof(EntityFrameworkQueryableExtensions.ThenInclude))\n        .Single(mi => mi.GetParameters()[0].ParameterType.GenericTypeArguments[1].IsGenericParameter);\n```\n'"
1880,26905309,"b""Thanks for trying this. It ends up looking a bit more verbose than the string literal. Let's find out what @anpete prefers.\n"""
1880,26905509,"b""BTW, I like very much the way in [Queryable.cs](https://github.com/dotnet/corefx/blob/master/src/System.Linq.Queryable/src/System/Linq/Queryable.cs) they take advantage of the compiler to resolve the right `MethodInfo` on each method, although not sure if it is as performant as what we do. Let's leave that to chat later.\n"""
1880,26905607,b'I will try to differentiate based on type. Proposed name seems too long to me.\n'
1880,26905635,b'Agreed :smile: Thanks!\n'
1880,26907064,b'Like nameof. \n\nFine doing the Queryable thing too - anything that reduces boilerplate/complexity here is great.\n'
1809,26363548,"b'A few little things:\n1. Only one space after a period\n2. Recommend using parameter substitutions in the string and passing in either `nameof(Foo)` or whatever from within the code.\n3. The term ""SQL"" should be in all caps.\n'"
1809,26421299,"b""addressing 2. this is expected to be a static message, I don't expect anything to change, but I can parameterize the names of the log levels if you think that is necessary\n"""
1809,26546911,"b'It makes it easier for the localizers if every bit of the string is actually localizable text. That way we don\'t have to ""lock out"" strings to prevent them from being overlocalized.\n'"
1682,25114142,b'@troydai and I decided that using `File.Exists()` is a good contract not to break for the output of `kpm list --assemblies`.\n'
1682,25115085,b':+1:  :ok_hand: \n'
1682,25882628,"b'Note to self, we should leave this as net451 so we get test coverage on that framework.\n'"
1898,27090306,"b'I talked to @maumar and while this seems correct we believe we can do better on aspect of making this human readable (which was the goal of using names from the compiler in the first place). We will file a bug for that, but we can check this improvement that makes the name a valid parameter name beta 4.\n'"
1891,27072389,"b'Consider refactoring into a helper method and moving the assertion, which I think should be asserting that FindExtension is not returning null.\n'"
1891,27072466,b'Consider DRY into a helper method.\n'
1900,27159464,b'Are we keeping the bug open for the remaining skipped tests or filing a new one? @maumar would be good to investigate these.\n'
1900,27160750,"b""I don't mind either way. I can file a new bug or you can assign the current one to me.\n"""
1900,27162145,"b""I'll file a new bug. The existing issue can remain just about re-enabling all (but 2) of them.\n"""
1900,27163624,b'Filed: #1905\n'
1897,27174118,b'Remove `async`\n'
1896,27232042,b'Consider conditional operator.\n'
1896,27232224,b'Why not just assert the expected order rather than re-sorting?\n'
1896,27232370,b'Same comment again.\n'
1896,27232697,b'Is the actual order relevant to the behavior that the test is intended to exercise?\nEnforcing order on tests outside of the metadata seems redundant to me.\n'
1896,27252640,b'The order should be fixed in metadata and I would rather have less code in the tests coupled with additional coverage that the order is what it is supposed to be.\n'
1896,27255660,"b""Since here it's only 3 places I think the coupling is fine, but in the ModelBuilderTest a change in the ordering would require changes to hundreds of lines.\n"""
1896,27255974,"b""to be fair, I'm already fixing hundreds of tests in `SqlServer.FunctionalTests` to reorder columns in queries. As long as we don't make any further changes to the property order it's not that bad, I only made this change because it felt more future-proof.\n"""
1896,27264675,"b""I'd rather keep the tests with less code, but I don't mind too much one way or the other.\n"""
1887,27051202,b'Can this be added to the SQL generator so that it can be tested?\n'
1887,27051679,b'Are you thinking something like `AppendSelectValue(StringBuilder)`?\n'
1887,27060149,"b'""Generate"" is probably enough here, but yes, just so you can write a test for the change.\n'"
1930,27338987,b'Default value rather than new overload? Not sure which is best...\n'
1930,27339016,b'Never mind. CancellationToken on the async version makes the default value approach less nice. \n'
1930,27339034,b'Default value means that we will never change it.\n'
1920,27363642,b'Holy one liner :smile: \n'
1920,27368890,"b'Not trying to be a wet blanket, but can you please split it? :smile: \n'"
1893,27165156,"b""I think this class should be removed for now. They'll probably end up being nested under a `.ForSqlServer()` call like in Code First.\n"""
1974,27619641,"b""If you haven't already, can you please file a bug for us to consider reverting this one in the future (e.g. as soon as Mono is fixed)?\n"""
1943,27804377,b'Should the method body also be updated to remove the calls to `.HasValue` and `.Value`?\n'
1943,27809341,b'Will do.\n'
1988,27805318,"b""Hmm... I think I'm with @anpete on this--the sooner it throws, the better. It'll be hard to track down the line of code that modified it if we wait until `SaveChanges` to throw.\n\n/cc @divega\n"""
1988,27811630,"b""I'l bring it to a design meeting or small group discussion.\n"""
2000,27890704,"b""There isn't a project in this directory.\n"""
2000,27890716,"b""There isn't a project in this directory either\n"""
2000,27899374,b':+1: scripting ftw\n'
2000,27899378,b':+1: scripting ftw\n'
2021,28459618,"b""I'll change this to be a resource.\n"""
2002,28468456,"b""I'm guessing this is addressed in the next PR? :-)\n"""
2002,28470598,b'Why is this a func?\n'
2002,28470769,b'Just call these args sql and parameters.\n'
2002,28470977,"b""I was preserving the behavior (new generator instance each time a command is built) but it doesn't need to be. If we drop the func we can also look at caching in the generator like one of the comments below mentions.\n"""
2002,28470999,"b'yep, this is the part that inspired me to make the next PR.\n'"
2002,28471008,b'We have a CommandParameter class we could use here.\n'
2002,28471063,b'This seems strange. Can we unify here?\n'
2002,28471230,"b'Yeah, fine to drop the func.\n'"
2002,28471251,b'Funnily enough it is not actually used anywhere right now.\n'
2002,28471534,"b""There's a bit of an input parameters vs output parameters thing going on here.\n\nThe generator adds to the dictionary in some cases, and in others it uses the value as a constant in the generated SQL and ignores the value in the dictionary. Rather than mutate the provided dictionary or maintain the list of the used parameters, I felt it would be cleaner to make a dictionary that only contains the key-value-pairs that need to be made into `Paraeter`s\n"""
2021,28557633,b'Have pulled this and the other XXXConfiguration classes out into separate .cs files in a future PR.\n'
2022,28467413,b'this is not really a rename\n'
2022,28467536,"b'for comparison, that 3rd query in EF6 would be translated to:\nSELECT\n    [Extent1].[Id] AS [Id]\n    FROM [dbo].[NullSemanticsEntity1] AS [Extent1]\n    WHERE  NOT (((CASE WHEN (([Extent1].[NullableBoolA] = [Extent1].[NullableBoo\nlB]) OR (([Extent1].[NullableBoolA] IS NULL) AND ([Extent1].[NullableBoolB] IS N\nULL))) THEN cast(1 as bit) WHEN ( NOT (([Extent1].[NullableBoolA] = [Extent1].[N\nullableBoolB]) AND ((CASE WHEN ([Extent1].[NullableBoolA] IS NULL) THEN cast(1 a\ns bit) ELSE cast(0 as bit) END) = (CASE WHEN ([Extent1].[NullableBoolB] IS NULL)\n THEN cast(1 as bit) ELSE cast(0 as bit) END)))) THEN cast(0 as bit) END) = (CAS\nE WHEN (([Extent1].[NullableIntA] = [Extent1].[NullableIntB]) OR (([Extent1].[Nu\nllableIntA] IS NULL) AND ([Extent1].[NullableIntB] IS NULL))) THEN cast(1 as bit\n) WHEN ( NOT (([Extent1].[NullableIntA] = [Extent1].[NullableIntB]) AND ((CASE W\nHEN ([Extent1].[NullableIntA] IS NULL) THEN cast(1 as bit) ELSE cast(0 as bit) E\nND) = (CASE WHEN ([Extent1].[NullableIntB] IS NULL) THEN cast(1 as bit) ELSE cas\nt(0 as bit) END)))) THEN cast(0 as bit) END)) AND ((CASE WHEN (CASE WHEN (([Exte\nnt1].[NullableBoolA] = [Extent1].[NullableBoolB]) OR (([Extent1].[NullableBoolA]\n IS NULL) AND ([Extent1].[NullableBoolB] IS NULL))) THEN cast(1 as bit) WHEN ( N\nOT (([Extent1].[NullableBoolA] = [Extent1].[NullableBoolB]) AND ((CASE WHEN ([Ex\ntent1].[NullableBoolA] IS NULL) THEN cast(1 as bit) ELSE cast(0 as bit) END) = (\nCASE WHEN ([Extent1].[NullableBoolB] IS NULL) THEN cast(1 as bit) ELSE cast(0 as\n bit) END)))) THEN cast(0 as bit) END IS NULL) THEN cast(1 as bit) ELSE cast(0 a\ns bit) END) = (CASE WHEN (CASE WHEN (([Extent1].[NullableIntA] = [Extent1].[Null\nableIntB]) OR (([Extent1].[NullableIntA] IS NULL) AND ([Extent1].[NullableIntB]\nIS NULL))) THEN cast(1 as bit) WHEN ( NOT (([Extent1].[NullableIntA] = [Extent1]\n.[NullableIntB]) AND ((CASE WHEN ([Extent1].[NullableIntA] IS NULL) THEN cast(1\nas bit) ELSE cast(0 as bit) END) = (CASE WHEN ([Extent1].[NullableIntB] IS NULL)\n THEN cast(1 as bit) ELSE cast(0 as bit) END)))) THEN cast(0 as bit) END IS NULL\n) THEN cast(1 as bit) ELSE cast(0 as bit) END)))\n'"
2022,28467717,"b'I will add heuristic to use the (a && b) || (!a && !b) instead of case, when null semantics expansion is not needed in the children - it looks bit cleaner and is more sargable. WIll do this in separate checkin, per conversation with @divega \n'"
2022,28468840,"b'I will add heuristic to use the (a && b) || (!a && !b) instead of case, when null semantics expansion is not needed in the children - it looks bit cleaner and is more sargable. WIll do this in separate checkin, per conversation with @divega\n'"
2022,28484761,b'Can we inherit ExpressionVisitor and call base here instead?\n'
2022,28484775,"b'More sargable, LOL!\n'"
1749,25825961,"b'It seems like in here you should check whether binaryExpression.NodeType is Equal or NotEqual and output op = "" IS "" or op = "" IS NOT "" appropriately? (Any other NodeType being an error).\n'"
1749,25902607,"b""This actually looks like it is a bigger problem that I will address, it looks like we already have logic to deal with null comparisons, I just don't have my expressions in the right form.  Will fix\n"""
1749,25986940,b'add tests for projection and filter as well as its pretty common scenario\n'
1749,25987684,"b""I don't think this works in general. Add a test that Includes a collection where the outer query has a OrderBy with a non-ColumnExpression.\n"""
1749,25987895,b'Add these tests to QueryTestBase and use Northwind.\n'
1749,25987921,b'Never do all of this in the test - this is why we have fixtures.\n'
1749,25987941,"b'This method is really only for the conditional logical operators, so remove Coalesce.\n'"
1749,25988089,b'Use a switch here.\n'
1749,25988209,b'Redundant.\n'
1749,25988222,b'Use QueryModelVisitor above.\n'
1749,25988450,"b""This doesn't work in general. The target SelectExpression is looked up as part of member binding. \n"""
1749,25988495,b'Redundant?\n'
1749,25988518,b'Remove this. \n'
1749,25988579,"b""Don't try and do this here, just handle Coalesce separately.\n"""
1749,25988641,"b'We support CaseExpression in the tree directly - so rather than do this here, just embed the appropriate CaseExpressionNode in the OrderBy.\n'"
1749,25988657,"b""This one isn't, if I don't override the method and allow it to hit the base, we turn the parameterExpression into a MemberAccessExpression which we don't correctly sql gen\n"""
1749,25988854,b'Weird. Do you know why?\n'
1749,25988999,b'Lets create new issues for those.\n'
1749,25989093,b'How does a MemberExpression get into the SQL tree? It should be a ColumnExpression as a result of binding.\n'
1749,25989109,b'As above re binding.\n'
1749,25989327,"b""I don't think the solution below is quite right. For complex translation you should follow the pattern in the filtering visitor. i.e. Build up the SQL expression tree by returning it from the visitor (rather than trying to update the SelectExpression on the fly). I think an easier approach to this might be to add this translation to filtering first. Then we can go back and triangulate into ordering.\n"""
1749,25989402,"b'Eventually we should land in a place where there is little difference between translating expressions between filtering, ordering or projection - we should be using the same code.\n'"
1749,25990220,b'ok\n'
1749,25990771,"b""Ok, I'll pull all of the coalesce logic out to before the `else` block\n"""
1749,26053951,b'ok\n'
1749,26256906,"b'i would make it into if -else, rather than switch. Alternatively keep it as is, but add { } for the relevant code blocks\n'"
1749,26257260,"b'same as above: i would make it into if -else, rather than switch. Alternatively keep it as is, but add { } for the relevant code blocks\n'"
1749,26260471,"b'I would move all that logic up the stream - process the expressions into column expressions, and use existing AddToProjection(ColumnExpresssion) instead\n'"
1749,26260654,"b'add safeguard for case when we hit unexpected node here (not Column, Coalesce or Conditional) - we should throw in that case\n'"
1749,26261307,"b""Our previous behavior was to ignore any expression we didn't know how to handle rather than throwing.  I tried to preserve this behavior.  Do we want to change our default behavior to throwing for expressions we don't know how to parse?\n"""
1749,26261457,"b'keep it as is then, my bad\n'"
1749,26262736,b'UpdateOrderBy does not reflect what that name does - please rename or break it into two methods\n'
1749,26319005,b'ok\n'
1749,26319115,b'ok\n'
1749,26320892,b'Ternary should probably format into one line.\n'
1749,26320957,b'Blank line.\n'
1749,26321099,"b'Change ""Coalesce"" to ""Null coalesce"" everywhere.\n'"
1749,26321567,"b'Change ""Ternary"" to ""Conditional operator"". Also change test name format to match others in this file. E.g. ""OrderBy_conditional_operator"".\n'"
1749,26321703,b'This SQL seems incorrect. In the query the coalesce operator is in the projection not the order by.\n'
1749,26331210,b'Switch is fine for NodeType.\n'
1749,26331905,b'ok\n'
1749,26332141,"b'updating with this signature `private static void UpdateOrderbyColumnBinding(IEnumerable<Ordering> orderBy, SelectExpression targetSelectExpression, JoinExpressionBase innerJoinExpression)`\n'"
1749,26337001,b'Will address as part of #1798 \n'
1749,26684614,b'Inline this...\n'
1749,26685473,b'We should change ColumnExpression to use this too.\n'
1749,26685653,b'Update? Why did I not know about this!? :-)\n'
1749,26687778,b'I think CaseExpression is going away... @maumar ?\n'
1749,26687955,b'Aliases should be assigned at the point the expression is added to the projection. See ColumnExpression.\n'
1749,26688258,"b""We shouldn't mutate the expression as part of SQL gen.\n"""
1749,26705301,b'ok\n'
1749,26707227,"b'I want to finish null semantics first. I would say keep it as is for now, I will fix things globally when I get to it.\n'"
1749,26707588,"b""I Chatted with Maurycy and this isn't going to change for a couple weeks.  leaving as is for now\n"""
1749,27931537,"b'perhaps make extension method e.g. IsColumnExpression or/and AsColumnExpression - the way it is now, it looks fairly gnarly.\n'"
1749,27931804,"b'instead of creating an AliasExpression here, I will just call the new method I will add `AddAliasToProjection(string alias, Expression expression);`\n'"
1749,27931846,b':+1: \n'
1749,28105148,b'This could use some cleanup\n'
1749,28105616,"b'Take another look at this, the semantics have changed\n'"
1749,28105941,b'Follow up on this\n'
1749,28106126,b'Can we remove?\n'
1749,28106636,"b""investigate more, what if it isn't a column expression?\n"""
1749,28106762,"b""This code path shouldn't be hit\n"""
1749,28108569,b'This could probably be simplified a bit\n'
1749,28109278,b'``` cs\n.AliasHasColumnExpression()\n```\n'
1749,28109503,b'Use extension method\n'
1749,28109509,b'here too\n'
1749,28109559,b'And here (probably just search for as AliasExpression)\n'
1749,28189170,"b""this is because I wrapped the column expression in an alias expression, so the situation we're trying to match has changed\n"""
1749,28189289,b'how does this look?\n\n```\nvar innerJoinSelectExpression\n    = selectExpression.Clone(\n    selectExpression.OrderBy.Select(o => o.Expression).Last(o => o.AliasHasColumnExpression())\n    .GetColumnExpression().TableAlias);\n```\n'
1749,28189571,b'Changing to `Alias.Expression`\n'
1749,28189578,"b'Verified, removing\n'"
1749,28263103,"b'updated to \n\n```\n            var columnAliasCounter = 0;\n\n            foreach (var aliasExpression in _projection.OfType<AliasExpression>())\n            {\n                var columnExpression = aliasExpression.GetColumnExpression();\n                if (columnExpression != null && subquery._projection.OfType<AliasExpression>().Any(ae => \n                        ae.ColumnExpression()?.Name == columnExpression.Name))\n                {\n                    aliasExpression.Alias = ""c"" + columnAliasCounter++;\n                }\n\n                subquery._projection.Add(aliasExpression);\n            }\n```\n'"
1749,28263461,b':+1: \n'
1749,28263495,b':+1: \n'
1749,28263998,b':+1: \n'
1749,28264052,b':+1: \n'
1749,28284736,"b""^^ this change hasn't happened yet\n"""
1749,28285449,b'It looks like we need to keep track of this state independently of the other properties on this expression.  \n'
1749,28445672,b'just to be safe - add a null check for propery\n'
1749,28446684,"b'nit pick - make the formating of the call consistent - i would break the line after ""return new AliasExpression(""\n'"
1749,28447044,b'should visit underlying expression here - look at some other custom expressions we created\n'
1749,28447181,"b'put this into expressionextensions instead, no need for a separate class for those couple of methods\n'"
1749,28447354,b'format - break lines between arguments to the AddAliasToProjection\n'
1749,28458619,b':+1: \n'
1749,28458859,"b'Ok, will visit inner expression\n'"
1749,28459073,b':+1: \n'
1749,28459353,"b'Adding `Check.NotNull(property, nameof(property())`\n'"
1749,28461766,"b'rename AliasHasColumnExpression here, also check if we need to check for column expression at all - they should all be wrapped in alias, no?\n'"
1749,28462110,b'will remove columnexpression logic as it is never hit\n'
1749,28462180,"b'yes, confirmed we never have a ColumnExpression here\n'"
1942,27340869,"b""Doesn't this mean that these are no longer marked as being set by convention?\n"""
1942,27340915,"b'Also, the sequence should not be added to the model if it is not needed by the model. This is important for supporting SQL Server 2008 where creating the sequence will fail and so applications should be able to switch 100% to Identity and have no remnants of sequence functionality remaining.\n'"
1942,27803742,"b'The sequence annotation should be marked as ""by convention"" and removed if the user calls `.UseIdentity()`. We should also file a bug to remove it if it never ends up being used.\n'"
1942,28483367,b'Should these somehow be passed `ConfigurationSource.Convention`?\n'
1942,28483388,b'We should only do this if it was added by convention.\n'
1942,28556789,b'at Model level it is not possible to know configuration source of the annotation. So we cannot verify if this was added by convention or not.\n'
2022,28567263,b'Awesome improvement!\n'
2003,27927845,b'will break line here\n'
2035,28736218,b'Duplication of code in EntityMaterializerSource?\n'
2035,28736606,"b""This looks like a perf issue. I don't think we can call GetValueTypes per value reader, we need to move it to query compile time.\n"""
2035,28736669,"b'Its somewhat different, although there are similarities. This will likely change when we handle nulls better anyway.\n'"
2035,28736707,"b""I'll file a bug for the optimization.\n"""
2035,28736895,b'We should try and move this to type determination to query compile time.\n'
2035,28736979,b'Will file a bug on it.\n'
2035,28737204,"b'I think a way to do this could be to create a ValueReaderFactoryFactory, move the types list and reader offset to that, and then bind the ValueReaderFactory into the query expression tree directly. That way, the AppDomain cache can potentially go away too.\n'"
2037,28752826,b'would it be safe to skip brackets for all non-logical expressions?\n'
2039,28806151,b'StartsWith?\n'
2039,28806380,b'Can you add a note here that we need to set any other client eval flags that we add.\n'
2039,28806407,b'Parens\n'
2039,28808147,b'What would providers need to do to detect non-composable queries based on a different criteria?\n'
2039,28808557,b'Seems like we could use something that expresses than the whole thing cannot be composed over. I am ok with leaving it for a bit later.\n'
2039,28809921,b'Added #2040\n'
2039,28810279,b'Just a side note related to previous discussions. We still need to add the `SelectExpression` to the `QueryModelVisitor` for `FromSql` where the only composition is `IncludeQueryAnnotation`s.\n'
2039,28827615,"b'Will this match a stored procedure called SelectProducts? If yes, please file a bug to make it more robust and add negative cases.\n'"
2039,28834041,b'Regex: ^\\s*select\\s+\n'
2039,28887559,"b'Not good at regex, but check needs to append check for whitespace char following select\n'"
2038,28806502,b'might be good to add comment here\n'
2038,28806821,b'This whole class is going away soon. This is just a temp hack until we change how included entities get tracked.\n'
2006,28257812,b'Are we okay with a blocking default implementation of these async methods? /cc @divega \n'
2006,28258220,b'Do you think we should remove the SQL Server dervied class as well? I think we should be consistent. \n'
2006,28258475,"b'This seems like it will always result in using the relational annotations and not any provider-specific overrides, so it seems like this is never the correct implementation for any provider and hence should not be a default implemention in this base class.\n'"
2006,28258684,"b""Assuming this is returning RelationalDbContextOptionsBuilder  because there aren't any SQLite specific options yet?\n"""
2006,28259125,b'C# 6 Ninja!\n'
2006,28264539,"b'Seems consistent with the default implementation of the async methods in relational, i.e. ADO.NET. I would add `cancellationToken.ThrowIfCancellationRequested()` on each of them though.\n'"
2006,28264884,b'Will throw when cancelled.\n'
2006,28265397,"b""My goal here was to provide a minimal implementation. We'd then democratize the work to flesh it out. The provider-specific RelationalDatabase classeses did seem a bit YAGNI...\n"""
2006,28265520,"b""Query had a default implementation like this. I'm fine forcing the providers to override, but we should be consistent.\n"""
2006,28279002,b'Correct\n'
2006,28279874,b'Sounds good.\n'
2006,28279948,"b""I'm fine with removing them.\n"""
2006,28280056,b'I think query should change--a default implementation that is never the correct implementation seems like a pit of failure. Happy to for you to fix it here and then file a bug on query.\n'
2006,28829345,b'Filed #2043\n'
2006,28830809,b'Reverted and added a comment to review query (and anywhere else) in #1904\n'
2050,28913912,"b""Can we replace built-in C# types too? They're:\n- bool\n- byte\n- char\n- decimal\n- double\n- float\n- int\n- long\n- object\n- sbyte\n- short\n- string\n- uint\n- ulong\n- ushort\n"""
2050,28920889,b'Updated.\n'
2050,28976716,"b'Section 3.4, paragraph 2 of the official [ASP.NET 5 Project Coding Guidelines](https://github.com/aspnet/Home/wiki/Engineering-guidelines#coding-guidelines) states that, ""All fields MUST begin with an underscore.""\n\nOk, so it actually doesn\'t... :grinning: but could you make this field start with an underscore to be consistent with the rest of our code base?\n'"
2050,28977159,"b'Oh, can you specify a visibility modifier on these nested types too? `private` is fine. (This one actually is in the guidelines)\n'"
2062,29062664,"b""I'm no expert at this, but they can't _both_ be `1`, can they? :smile: \n"""
2062,29062734,"b'Oops, I feel ashamed there, will fix right away\n'"
2021,29086742,b'Are these right for .NET Core?\n'
2021,29086994,"b""I don't think this is needed. `.ToArray()` don't care.\n"""
2021,29087818,b'Why not make this one abstract and remove the other one?\n'
2021,29088069,b'The Razor engine expects the ExecuteAsync() with no args method.\n'
2021,29088128,"b""Don't follow?\n"""
2021,29088407,"b""I don't see anything that requires the stream to be reset back to the beginning.\n"""
2021,29088623,"b""I see. Just didn't understand the `.ToArray()` part. Otherwise agreed.\n"""
2021,29088547,"b""At the moment this supports net451, dnx451 and dnxcore50. I haven't updated for netcore451 yet. Let me do that as a separate PR.\n"""
2021,29099895,"b'@lajones Is there some docs or blog post explaining all these new target farmework variants? (too many, IMHO)\n'"
2021,29099968,b'A library can provide multiple metadata references. Packages do this.\n'
2021,29099970,"b""@bricelam Nope, it's not right for anything bull full CLR.\n"""
2021,29169322,b'Have updated to loop over them instead.\n'
2021,29198149,"b""@ErikEJ I don't know of one but I'll try to get you an answer for this.\n"""
2021,29289195,"b'@ErikEJ You may have already read it, but [Introducing .NET Core](http://blogs.msdn.com/b/dotnet/archive/2014/12/04/introducing-net-core.aspx) has a lot of great information in it.\n'"
2084,29292178,"b'Can we not put versions, public key tokens, etc. here?\n'"
2084,29292320,b'(Doing so will decouple it from package upgrades.)\n'
2084,29292610,"b""Yep. It works without them. I've already committed to dev based on previous sign-off but I'll go through, change all the System.Reflection.Metadata references and re-commit.\n"""
2084,29293192,"b'Cool. The framework ones (e.g. System.Runtime) for whatever reason needed to be full assembly names, but any that we can just use the short names for, we should.\n'"
2021,29327721,"b'@bricelam & @lajones  Thanks, I read that... Slowly beginning to understand\n'"
2068,29095120,b'should I just inline the VisitConditionalExpression here instead?\n'
2068,29296615,b'This seems fine.\n'
2068,29296702,b'It would be great if we could format this better.\n'
2092,29517398,b'@bricelam good idea to look at this since you have a PR out that touches the same file and we were not sure this was the minimal way to add the dependency.\n'
2092,29524670,b'This is correct.\n'
2081,29207925,b'Any ideas for a better (shorter) name?\n'
2081,29269196,b'this should probably be an extension off of `IQueryable<T>` instead of `DbSet<T>`\n'
2081,29283247,"b'Not shorter, but maybe more precise: `UseRelationalNullComparisons()`\n'"
2081,29296884,b'What is this type for?\n'
2081,29296968,"b'Just pass in the bool ""useRelationalNullComparisons ""\n'"
2081,29297026,"b""Didn't you add this somewhere else already?\n"""
2081,29300814,"b'After thinking a bit more about it, I would like us to bring the name back one step closer to how the context-level flag looked like in the EF6 API, so I propose we use `UseRelationalNullSemantics()`. \n\nThe reason is that I believe we should use the presence of the annotation to control the SQL generation for other null semantics-related behaviors, such as `String.Concat()` with nulls ([which we implemented in EF6](http://entityframework.codeplex.com/workitem/2457)), and `Enumerable.Sum()` and `Queryable.Sum()` for empty sets, in which we could automatically compensate so that [no casting is needed](http://data.uservoice.com/forums/72025-entity-framework-feature-suggestions/suggestions/2410716-result-of-sum-of-an-empty-set-should-be-0-rather). \n'"
2081,29302178,b'@mikary @anpete Anyone remembers why `FromSql()` returns an `IQueryable<TEntity>`? Looks like with this design it should also return a `DbSet<TEntity>` same as the new operator and that both should work in any order applied to the same query.\n'
2081,29357483,b'Would we rather use `InternalDbSet<TEntity>` for this? We could add a constructor overload to avoid the new type.\n'
2081,29379284,b'Why does there need to be another type at all? Can it not be that we create a new real DbSet instance which contains the annotation and return that?\n'
2081,29398669,"b'removed, going to re-use InternalDbSet\n'"
2081,29398703,"b'this used to be in composite visitor, but now needs to be moved to sql gen, since we need NotNullExpression (which is reducible) so that we know whether we should apply null semantics in the sql gen or not.\n'"
2081,29400592,b'Agreed. @mikary?\n'
2081,29449701,"b""Not really, I'm still not convinced that there's a good reason to switch back to a DbSet after FromSql. If we have a compelling reason to compose on FromSql as a DbSet, it's not a breaking change to switch from IQueryable, but until we have a compelling reason, it only seems to enable cases like\n\n``` cs\ncontext.Set<Customer>().FromSql(myQueryString).UseRelationalNullSemantics().AddRange(myCustomers);\n```\n"""
2081,29451038,"b""Yes, it removes the strange API ordering restriction and doesn't seem to have any downsides? I guess it could simplify the impl too.\n"""
2081,29452404,"b""I don't like what it does to the API surface for intelisense, it's like having `Where` return a DbSet. I don't see FromSql behaving as a query configuration option so much as a part of the query itself that just happens to need to be the first clause so we know how to alias/compose it.\n"""
2081,29477835,"b'> I don\'t like what it does to the API surface for intelisense\n\nThe only possible downside I see in the Intellisense experience is that you would now be able to chain multiple calls to `FromSql()` on the same query. It is fair point. Most likely code that did this would be written by mistake. However this not worse than being able to call `.ToList().ToList()` as long as we follow consistent rules on how this is interpreted, e.g. we could pick between ""last one wins"" (my preference) and more than one call results in a run time error. \n\n> it\'s like having Where return a DbSet,,,\n\nWhy is that? It is true that `FromSql()` and `UseRelationalNullSemantics()` are different. `FromSql()` applies to query roots (and you can have more than one root in a query) while `UseRelationalNullSemantics()` is meant to apply to the whole query regardless of how many roots it has. Associating the call to `UseRelationalNullSemantics()` with one of the roots is just a pragmatic compromise (although it is yet another reason for me to prefer the introduction of explicit ""relational comparison"" operators and a context-level flag over this design). Once you have more than one ""query operator"" that can only be assigned to the root (as opposed to arbitrary parts of the query), it is really very desirable that they can be called in any order.\n'"
2081,29485773,b'Are the commented lines in this file intentional?\n'
2081,29486562,"b'No, will undo\n'"
2081,29515605,"b'> The only possible downside I see in the Intellisense experience is that you would now be able to chain multiple calls to `FromSql()` on the same query. It is fair point. Most likely code that did this would be written by mistake. \n\nWe were also talking about `AsNoTracking` being a \'configuration\' option of this type. If we return a `DbSet` we also make something like this compile:\n\n``` cs\ncontext.Set<Foo>().AsNoTracking().Attach(myFoo);\n...\ncontext.SaveChanges();\n```\n\nWhich looks like it\'s attaching an untracked entity, but since it\'s just a query annotation on the DbSet in a code path that isn\'t actually being visited, the annotation does nothing.\n\nMy objection here would go away if we had the extension off of a different type without the extra DbSet functionality, for example:\n\n``` cs\npublic static RootQueryable<TEntity> FromSql<TEntity>([NotNull]this RootQueryable<TEntity> rootQueryable, [NotNull]string sql)\n```\n\n> it is really very desirable that they can be called in any order.\n\nI\'m not convinced that it is desirable. Part of the reason I left the return type as `IQueryable` was due to YAGNI. `FromSql` was the only extension that we needed rooted to the beginning of the query. Now that we are adding other options, we were commenting that this pattern isn\'t very good for the other configuration options anyway.\n\nThe original scenario we were discussing with `FromSql` was some kind of cross-store situation where each provider has some kind of composable raw command operation, i.e. `FromSql` and `FromRedis` so we could have something like:\n\n``` cs\ncontext.Set<Foo>().FromSql(sqlCommand).FromRedis(redisCommand).Where(f => f.bar == 5);\n```\n\nWhile there is clearly some utility to being able to do this, it also seems to say ""I have a context and I don\'t know what provider it has, but try this."" Given that the concept of composable opaque raw commands is fairly new, and that we are talking about cross-store functionality, I think it would be safer to leave it as is rather than introduce a potential pit of failure.\n'"
2081,29520894,"b""(trying to bring the discussion to the present diff to make finding it less annoying)\n\n> we also make something like this compile: `context.Set<Foo>().AsNoTracking().Attach(myFoo);`...\n\nI see. You are right on that.\n\n> My objection here would go away if we had the extension off of a different type without the extra DbSet functionality\n\nI agree this would be a way to improve it. Let's file a bug on this issue and discuss more options on how to improve it. We can hold off making changes to `FromSql()` until we decide.\n\nRe you other comment I do think it is important to keep this composable and hopefully we will be able to come up with something good. I cannot think how support expressing alternative raw root queries for different providers could become a pit of failure.\n"""
2081,29522865,"b'Right now, AsNoTracking _is_ a real ResultOperator and so it makes sense to exclude it from this discussion.\n\nHow about this:\n\n``` c#\ncontext.Products\n    .ConfigureQuery(o => \n        { \n            o.FromSql(""blah"") });\n            o.UseRelationalNullSemantics();\n        })\n     .Where(); // ...\n```\n\nConfigureQuery can then return IQueryable, and it matches our standard closure/annotation pattern for config.\n'"
2081,29523112,b'Opened #2106 to track this and copied over what we have discussed so far\n'
2081,29533642,b'Put this under Query.\n'
2081,29533691,"b""Won't this cause a null ref if the user calls any method that needs _context?\n"""
2081,29533743,b'Conditional op?\n'
2081,29533806,b'Can you re-target this extensions to IQuerySource?\n'
2077,29288853,b'Did anything change here? Why have these been moved?\n'
2077,29449374,b'Make this a method and rename to something like GetDirectDescendents\n'
2077,29450405,"b'Is there any point doing this if we are going to force prevent it at the API level. If we are checking, then we need to check for other possible instances of the problem. E.g. relationships. \n'"
2077,29450760,b'Could you use EntityType.GetDerivedTypes().SelectMany(et => et.Properties) here?\n'
2077,29451884,"b""I think we have some inconsistencies in how aggressively we are guarding against building invalid models.\n\nFor example AddKey verifies that the the first element in the list of provided properties are from the appropriate EntityType, but doesn't examine the remaining properties match or even exist in the model. While we do have a model validator that will run later, it seems like we could do a lot more in terms of sanity checking for the users who want to build their own model\n"""
2077,29454051,b'Can you create a bug?\n'
2113,29595491,"b""Should call  `.EndBatch()` instead. Sending a `GO` statement to the database will result in an error--they're just tooling sugar. (See [the documentation](https://msdn.microsoft.com/en-us/library/ms188037.aspx) for more info)\n"""
2098,29698256,"b""Any reason we're not using the indented string builder?\n"""
2039,29721384,b'@mikary Did you file a bug on this? Can you help me find it?\n'
2039,29778284,"b""@divega I didn't open a new issue for it, but it has been fixed in PR #2053 which is still awaiting review\n"""
2126,29790375,b'Why not use a Tuple for this?\n'
2097,29782965,"b""Is it OK that we lose the type's nullability here? Should it just unwrap the enum type? (e.g. `MyEnum?` would become `int?`)\n"""
2097,29783224,"b""Can you file a bug to pass this in? (Not that I'll forget or anything... :suspect:)\n"""
2097,29783946,"b""What if it was a 1:*? If it doesn't matter, `.InverseCollection()` would feel like a more natural default to me.\n"""
2097,29784389,b'Calling `UnwrapEnumType()` on `MyEnum?` returns `MyEnum?` only. But it make sense to have `int?` for `MyEnum?`.(i.e. `UnwrapEnumType()` returns nullable of underlying type for nullable enum)\nWhere should I add this logic? ModelSnapshot or modify `UnwrapEnumType()` ?\n'
2097,29784787,"b'Is this needed? It seems like we already have both entity types at this point:\n\n``` C#\nmb.Entity(""Post"") // Dependent\n    .Reference(""Blog"") // Principal\n    .InverseCollection()\n    .ForeignKey(""BlogId"");\n```\n'"
2097,29784900,b'(Same as above)\n'
2097,29785001,b'filed #2128 \n'
2097,29785040,b'@smitpatel UnwrapEnumType should be fixed. Make sure to check other places it is used as well for correctness and any possible code simplifications that can be done once it works correctly.\n'
2097,29785278,"b""I wonder if we should just add the methods we'll scaffold: `Reference` & `InverseCollection`\n"""
2097,29785474,"b""Or maybe we just add back `ForeignKey`. @anpete wouldn't object :wink: \n"""
2097,29785772,b'More context:\n\nInstead of having to do this...\n\n``` C#\nmb.Entity<Post>().Reference<Blog>().InverseCollection().ForeignKey(p => p.BlogId);\n```\n\n...we use to have something like this.\n\n``` C#\nmb.Entity<Post>().ForeignKey<Blog>(p => p.BlogId);\n```\n'
2097,29786839,"b'Could move this into the `Test` template method. Call would look something like:\n\n```\nTest(\n    builder => builder.Annotation(...),\n    ""..."",\n    m =>\n    {\n        Assert.Whatever(...);\n    });\n\n```\n'"
2097,29787349,b'Could you file a bug to blacklist unused core annotations like this?\n'
2097,29787473,b'We probably want do to something similar to #1951 here too.\n'
2097,29788374,"b'FYI, xUnit.net has an idiom for this\n\n``` C#\nAssert.Colletction(\n    o.EntityTypes,\n    t => Assert.Equal(""EntityWithOneProperty"", t.Name),\n    t => Assert.Equal(""EntityWithTwoProperties"", t.Name));\n```\n'"
2097,29789525,b'May want a case for composite indices too.\n'
2097,29789740,"b""May want to check with @lajones on how reverse engineering scaffolds relationships. I don't think the additional indent should be here on `.Unique()`.\n"""
2097,29790006,"b""Sweet ...another person I've influenced to **not** call them _candidate_ keys. :smirk: \n"""
2097,29790225,b'It might read better to keep `Unique` immediately after `ForeignKey` if possible.\n'
2097,29790558,"b""Probably shouldn't assert that there are three if we only really care about one of them.\n"""
2097,29801423,b'filed #2130 \n'
2097,29814858,b'`InverseReference()` & `InverseCollection()` are used as per uniqueness of relationship.\n'
2097,29814948,b'for `1:1` case the dependent type needs to be explicitly mentioned. For `1:*` case we are not generating the dependent type name again.\n'
2097,29815021,"b'@bricelam - Should we add extra methods for consistency or just the ones which is used? (i.e. `Reference()`,`InverseReference()` & `InverseCollection()`)\n'"
2097,29815037,b'Updated\n'
2097,29870233,"b""For now, I'd say just the ones we use. The others can wait until we enable unbound navigation properties.\n"""
2097,29873888,b'Could just do\n\n``` C#\nvar isNullable = type.IsNullableType();\nif (isNullable)\n```\n'
2097,29900161,b'Should set inside the if statement to avoid assigning every iteration\n'
2139,29947564,b'Just `new Model()` (no need for a mock)\n'
2139,29947917,"b'It\'s better to use a string literal here. I refer to tests like this as, ""Testing the product by re-implementing the product."" In other words, you\'re asserting that the product does what the product does. Instead, assert that the product returns the correct value.\n'"
2157,30055497,"b"":smile: Yeah, using `Parse` probably wasn't the best idea.\n"""
2157,30055423,"b'FYI, we tend to use the C# built-in type names when available on our team (e.g. `string` instead of `String`). See our [Coding Guidelines](https://github.com/aspnet/Home/wiki/Engineering-guidelines#coding-guidelines) for a bunch of other rules we pretend to follow.\n'"
2157,30067202,"b'Oops, sorry about that. We do that in re-linq, too, but I actually (thought that I) saw the type name being used so I figured... Turns out, that it was ""Strings"" (plural) :blush: Thanks for the pointer to the Guidelines. Had them open for all the stuff on how to contribute, and promptly missed the bit about casing rules.\n'"
2142,30058067,b'Consider refactoring to make only one call to FindPrimaryKey\n'
2142,30058125,b'Likewise.\n'
2142,30058203,b'Add back space before attribute. Consider using R# for formatting.\n'
2053,29005211,b'underscore\n'
2053,29005440,"b'Match above? i.e. ""requiresClientOrderBy""\n'"
2053,29005523,b'Reason for this?\n'
2053,29005644,b'Turn off ChangeTracker.AutoDetectChangesEnabled\n'
2053,29006008,"b""As is, I don't think these are cross provider. In this case it might be better to just make the whole SQL string a virtual property in the base.\n"""
2053,29006139,b'No need for a deep comparison in these tests. Just manually assert the number of rows in each test + any test required test specific asserts.\n'
2053,29006699,b'I was having test failures with lists containing the same ordered sequence of elements. It appears the comparison was on the collection being the same instance rather than having the same contents. This behavior also seems to be more consistent with the unordered version below.\n'
2053,29006862,"b'The deep comparisons were important for some of the tests, in particular the forced client eval orderby in the stored procedure composition\n'"
2053,29007289,"b'The lists can\'t ever be the same instance. This was using the xunit assert that does a deep collection compare. We have been using the ""asserter"" action arg to do custom asserts so I wonder if we can do away with some of these if we change to your code above. Can you check? \n'"
2053,29783607,"b'NIT: Whitespace - suggest using R#, even just for code cleanup.\n'"
2053,29783677,"b""NIT: Doesn't match our code style here.\n"""
2053,29784560,b'Why is this abstracted?\n'
2053,29784740,b'Remove this. Just probe the results in each test.\n'
2053,29784805,b'Just assert against the scalar props directly. Remove Equals and GetHashCode from the entities.\n'
2053,29816110,"b""@Eilon was asking me today if a regex wasn't too big of a hammer for this, so giving him a chance to gives us his feedback :smile: \n"""
2053,29916392,b'You just won at LINQ :smile: \n'
2053,29917990,b'Nice :checkered_flag: \n'
2053,29920103,"b""It does look fancy, but unfortunately on my machine this code runs between 10% and 20% slower than the interpreted regex (and FWIW, for this simple regex, interpreted is consistently faster than compiled). Don't take me wrong, it is possible to write a version that is 10 times faster (I did it, just for the sake of it), but you have to stick to very simple parsing logic, i.e. it looks awful :smile: \n\nAt the end of the day, I don't think it was worth switching from the regex. \n"""
2053,29920564,b'Correction: the simple parsing version is 30 times faster :smile: (not that it matters that much here).\n'
2053,29955817,"b""It would almost be worth moving this (and a fair number of other bits of logic) into its own method / helper, but there's not an obvious place to hang that logic.\n"""
2053,29976820,b'Yeah I suppose this case demonstrates the price of LINQ as well.\n'
2177,30190525,b'nit: nameof(ValueBuffer)?\n'
2177,30250120,b'I prefer the correct parameter name casing.\n'
2198,30398378,b'I have been told in the past that something like this was a bad idea. Just checking... :smile:\n'
2198,30398624,b'Worth wrapping in a finally clause to make sure it does get disposed even if there is a transient failure?\n'
2198,30398842,"b'Same as with the sync version, it may be worth wrapping the loop into a try block and the dispose into the finally block.\n'"
2198,30419347,b'Will add using.\n'
2198,30419352,b'Will add using.\n'
2198,30419398,b'It might be :-)\n'
2200,30387944,b'nit: should this variable be sqlGenerator?\n'
2200,30419441,"b'Yep, thanks.\n'"
2194,30344172,b'We should use CultureInfo.CurrentCulture instead so that it can flow through async calls and work on Core.\n'
2194,30354952,"b'Actually, the tests project is set to .NET 4.5, so CultureInfo only has a getter available. Should I still use CultureInfo for getting and Thread for setting?\n'"
2194,30355233,"b'Ah, good point. @bricelam, what do you think? Could se update the test project?\n'"
2194,30363365,"b'Yes, we should be OK to use .NET 4.6 for our test projects.\n'"
2194,30422856,"b""Good to know. I've created an issue for this (#2203) and will be sending a PR shortly. Will be updating the PR for the current issue once the test projects are have been switched to .NET 4.6.\n"""
2208,30470321,"b""Shouldn't we be using xunit.runner.dnx now?\n"""
2208,30524694,"b""We haven't done the work to update yet.\n"""
2222,30556152,"b'Ultimately, Sqlite will ignore schemas and throw if you try to configre them specifically for Sqlite. (Part of #1132)\n'"
2222,30558525,"b""It should, but Sqlite is still including schema name in queries. This was required to get MappingQuery tests to pass for Sqlite \n\n```\nTest 'MappingQuerySqliteTest.All_orders' failed: Microsoft.Data.Sqlite.SqliteException : \n      Error: no such table: dbo.Orders\n```\n"""
2222,30565317,"b""This doesn't actually do anything in the ADO.NET provider. :smiley: \n"""
2222,30565353,"b""Should this include the '@' symbol?\n"""
2222,30565569,"b""Fine for now. I'll update it when I break it.\n"""
2222,30617340,"b""Good catch. Yes, this should use '@'\n"""
2186,30333605,"b""We should probably create a CoreAnnotationNames class (similar to RelationalAnnotationNames or SqlServerAnnotationNames) so we're not copying strings around.\n"""
2186,30333655,b'A name like `_ignoredAnnotations` might be more appropriate.\n'
2186,30333754,b'This can also be static.\n'
2186,30344509,b'Could we have metadata in the annotation itself on what kind of annotation is instead of maintaining external lists?\n'
2186,30561442,b'filed #2226 \n'
2237,30754641,b'I am concerned about short-circuiting await here because I imagine it could cause some exceptions to stop being logged because they occur after the first time the thread is yield.\n'
2237,30754721,b'@AndriySvyryd what do you think?\n'
2237,30754740,"b'Hum, removing `await` here will prevent exceptions thrown asynchronously from being caught by the `catch` block: is this really what you want?\n'"
2237,30754744,b'Same remark.\n'
2237,30754802,"b'Meh, @divega was too fast for me :smile: \n'"
2237,30754925,b'I like your explanation better @PinpointTownes :smile:\n'
2237,30754948,"b""Good point. Wouldn't it save allocations if we add a continuewith onfaulted and log there?\n"""
2237,30755349,"b""Not sure it's really worth it. Have you tried creating a benchmark?\n"""
2237,30755794,"b""No I haven't. Tried it out and it makes the code ugly. So I'll revert and force push just one minor change.\n"""
2241,30761498,"b'The previous functionality was only replacing the database if it did not already exist. But in iterating over this during testing I found I needed to replace it multiple times. This also sets us up for the future so that if the DB has to change again (which it probably will as we find more test cases) that can be done easily.\n\nThat said, if recreateIfAlreadyExists is false (the default) then the functionality is identical to what was there before.\n'"
2241,30761594,b'The previous functionality assumed the script was in the top-level dir relative to appBase. This now allows it to be in a sub-directory.\n'
2241,30761787,"b""I will fix the extra ':' character.\n"""
2241,30763598,"b""I'm in two minds about this. The collection form of the Assert is easy to use. But if it fails you're not likely to get back useful output about why it is failing - more than likely the actual error will be buried somewhere in the '...' which is output by this to avoid outputting long lines for long collections. Perhaps it would be better to loop over each filePath asserting individually. That way if something goes wrong the output will say at exactly which offset it went wrong. Similarly for the file contents below.\n"""
2231,30644297,b':smirk: \n'
2223,30550634,b'How does this guarantee that _compiler_ is only invoked once? Or did GetOrSet not have those semantics previously?\n\ncc @Tratcher \n'
2223,30550717,b'GetOrSet never guaranteed that.\n'
2223,30551236,"b'OK, figured that given this change. \n\n_compiler_ is really expensive here - Any recommended pattern for doing single init here? \n\nIt superficially seems like it would be a nice feature of the IMemoryCache API.\n'"
2223,30551448,"b""Cache a `Lazy<T>`? It will get put into the cache fast and then everyone will block resolving it. It's still not guaranteed unique, but it's much closer.\n"""
2223,30552376,"b'It is unique with LazyThreadSafetyMode.ExecutionAndPublication, I believe.\n\nDouble-check around TryGetValue?\n'"
2223,30560909,"b""I think we shouldn't lock unless we didn't get an entry from the cache. On the other hand not sure the double-check pattern is safe for cross platform (see #960). We should probably go back to the original change (i.e. let a the compiler method be invoked more than once) and file a separate issue for optimizing this.\n"""
2223,30560959,"b'BTW, it would be cool if we could ""AsyncLock"" this for the async path.\n'"
2223,30622224,"b""We should keep the lock. We had a mistaken assumption that GetOrSet guaranteed a single invocation of the creation delegate. The lock fixes that and is unlikely to cause perf issues.\n\nDouble-checked should be OK here because MemoryCache is itself thread safe.\n\nBTW, we don't need AsyncLock here because query compilation is a purely sync operation.\n"""
2223,30635453,b'I am fine with taking this offline. Will explain what I mean.\n'
2223,30663123,"b'And by ""taking offline"" I meant we can merge this change as is now and discuss further improvements later.\n'"
2250,30859192,b'Should these return the ISqlliteXXXExtensions instead?\n'
2250,30862618,"b""No; they're defined on the interface which is a Relational concept.\n"""
2257,30926542,"b'The previous functionality was only replacing the database if it did not already exist. But in iterating over this during testing I found I needed to replace it multiple times. This also sets us up for the future so that if the DB has to change again (which it probably will as we find more test cases) that can be done easily.\n\nThat said, if recreateIfAlreadyExists is false (the default) then the functionality is identical to what was there before.\n'"
2257,30926663,"b""The collection form of the Assert is easy to use. But I found that if it fails you're not likely to get back useful output about why it is failing - more than likely the actual error will be buried somewhere in the '...' which is output by this to avoid outputting long lines for long collections. So instead have chosen to loop over each warning asserting individually. That way if something goes wrong the output will say at exactly which offset it went wrong. Similarly for the file paths below.\n"""
2257,30926869,b'Moved to prevent a stack overflow with AddReferenceFromName() calling InitializeReferences() repeatedly.\n'
2257,31182754,b'Could you avoid recreating by using cancelled transactions in the tests?\n'
2257,31188334,"b""After discussion am leaving this approach as is to allow for future changes. It's unlikely that this test's schema will stay the same in the near term.\n"""
2300,31367915,b'Should this be `.UnwrapNullableType().UnwrapEnumType()` to work with nullable enums?\n'
2300,31369202,b'Localize?\n'
2300,31369779,b'@smitpatel fixed UnwrapEnumType so it works either way now.\n'
2300,31369790,b'Oops. Good catch!\n'
2300,31370115,b'Hmm... Why bother setting precision and scale?\n'
2300,31370582,"b""I'll change it to never set it if SQLite will always ignore it.\n"""
2300,31370704,"b'`datetime2` only supports precision, not scale.\n'"
2300,31371181,b'Should these be commented out? (below too)\n'
2300,31371259,"b'This code works correctly for only precision or for precision and scale. In the negative case that you get it wrong, creating the database with Migrations will fail. I decided not to add an additional check here because it seems unlikely checking the negative case here will ever be of real use.\n'"
2300,31371270,b'You could add an extension method to cast to IDbParameter on net45.\n'
2300,31371505,"b'Thanks, @smitpatel\n'"
2300,31371717,"b'Yep, just like max lengths on strings, precision and scale are also ignored. :smile: There are [some TODOs](https://github.com/aspnet/Microsoft.Data.Sqlite/blob/dev/src/Microsoft.Data.Sqlite/SqliteParameter.cs#L13-L15) to light up more on SqliteParameter, but most things are ignored by SQLite in the name of dynamic typing.\n'"
2300,31371767,b'Sounds good.\n'
2302,31369350,b'Our pattern is to make the type internal and the members public.\n'
2302,31369366,b'QueryAnnotationMethod may be clearer.\n'
2302,31369472,b'Can you just use MethodCallExpression here? Instead of the two fields.\n'
2302,31369526,b'Null conditional?\n'
2302,31369557,b'String interpolation?\n'
2302,31369570,b'String interpolation?\n'
2302,31369606,b'Maybe QueryAnnotatingExpressionTreeVisitor?\n'
2302,31369740,"b'Oh, I see the usage below, this is fine.\n'"
2302,31369816,b'I think an extension method would be more idiomatic here.\n'
2302,31369913,b'Can you make a method on compilation context that takes the target annotation method and returns the annotation? This would DRY up the places where we currently do a query like this.\n'
2302,31369934,b'Format.\n'
2302,31369968,b'clauses?\n'
2302,31456704,b'Spoke offline. Will leave this as is.\n'
2302,31474535,"b""Maybe it's OK, but this will throw if MethodInfo is non-genertic.\n"""
2302,31474583,b'Check args?\n'
2302,31474748,"b'Maybe this can just be QueryAnnotation now? ""Custom"" seems wrong - if anything, the include one is more custom.\n'"
2321,31674342,b'NOOOOOOOOOOOOOO!!!!!!!!!!\n'
2249,30855432,b'those will be provided from outside. What is the best place to put it in - Database?\n'
2249,30855529,"b""@MichaelKetting  shouldn't this be the default behavior for VisitSubquery?\n"""
2249,30855571,b'any suggestions for a better name?\n'
2249,30855623,b'missing anything here?\n'
2249,30855684,b'will rename to _functionTranslationProvider\n'
2249,30855961,"b'this is just so that Sqlite tests pass (failing randomly, unrelated to the change) - this will not be checked in\n'"
2249,30856023,"b'Will uncomment and add more tests, need to fix in memory data for OrderDetails collection first\n'"
2249,30856108,b'You could DRY some of these up by introducing some base classes for common translators. E.g. StringToLower/Upper etc.\n'
2249,30856281,b'Most of these were handled by the object overload.\n'
2249,30856303,b'Make the format string an abstract prop like the date ones.\n'
2249,30856467,"b'Problem was that I had to add double overload, and once I did that, the int (dynamic) would resolve to the double overload, rather than object. Not sure if thats specific to int (as in its easier to convert int -> double than int -> object specifically), or is it more general problem.\n'"
2249,30856728,"b""I was hoping we wouldn't need this. Can we just disable all of them?\n"""
2249,30904169,"b""@maumar Yes, you are abosolutely correct about that one. The historic reason for this is that the QueryModel itself is mutable. So, you should always visit a clone of the QueryModel, not the original QueryModel and return an new SubQueryExpression. Originally, we did not want to pay the performance penality for cloning the QueryModel, but that's not really that big of an issue. So I think this should get changed for the 2.0 release and I've create an issue for it : https://www.re-motion.org/jira/browse/RMLNQ-73\n\nThanks, Michael\n"""
2249,30992001,"b""@maumar You're right about the extension point lacking in re-linq in regards to the partial evaluation. I dug around a bit in our issue archive and pulled this one here out: https://www.re-motion.org/jira/browse/RMLNQ-7. It's basically the same thing you are doing, only integrated :smile: I've pushed it into the 2.0 release plan and am hopeful that I'll get around to it in the nearish future. If so, I'll get back to you with a PR for your PR.\n"""
2249,31058884,"b'This should not be registered as the interface here. Since it is a provider specific service, it needs to go through the provider specific mapping mechanism, which means this interface should be registered as function that is resolved at runtime. The registration here should be for the provider-specific type directly, which is then used by the mapping.\n'"
2249,31059161,b'Same here.\n'
2249,31059528,b'Did you check whether any of these had any possible impl. in relational?\n'
2249,31060335,b'This needs to be `.AddScoped(p => GetStoreServices(p).RelationalFunctionTranslationProvider;` to register the mapping function.\n'
2249,31061061,b'Can we go back to the more command-oriented approach where we have the Translate method and composite translators? Can we just keep IMethodCallTranslator and add IMemberTranslator?\n'
2249,31160299,"b'@MichaelKetting Awesome, thanks for looking into this!\n'"
2249,31160489,b'spoke with Andrew in person and it seems that we are ok with having the list (disabling evaluation for all methods prevents inlining some custom methods users would create)\n'
2249,31298811,b'Ternary?\n'
2249,31298831,b'Inline variable.\n'
2249,31298897,b'These should be static.\n'
2249,31298972,b'Formatting.\n'
2249,31298997,b'Null conditional?\n'
2249,31299025,b'Move ctor up.\n'
2249,31299030,b'Move ctor up.\n'
2249,31299098,b'Formatting.\n'
2249,31299131,b'IReadOnlyCollection\n'
2249,31299162,"b""I don't think we use this pattern in other places. \n"""
2249,31299203,b'Any of these need CultureInfo?\n'
2249,31299252,b'Introduce a base class and make Translate a template method.\n'
2249,31299277,b'These supposed to be commented out?\n'
2249,31299281,b'Can remove.\n'
2249,31360082,"b""If it's possible and reasonable for providers to not have any custom translators (such as appears to be the case now for SQLite) then don't make this abstract and force the provider to implement an override that does nothing. And then in, for example, AddSqlite just register the base implementation.\n\nOther than that, the DI code now looks good.\n"""
2249,31360139,b'Inline initialization and make field readonly. Also for other classes in this change.\n'
2249,31360199,"b""Don't take a loggerFactory if its never going to be used or passed to anything else. Also for other classes in this change.\n"""
2249,31648539,b'Dead?\n'
2249,31648856,b'What is this line for?\n'
2321,31675242,b'We just had a mini-discussion in the team room and decided we should discuss as a team whether or not this is a good dependency to take. //cc @divega\n'
2321,31676702,"b'We talked and the conclusion is that it is fine for now, but we can remove it if it causes problems in the future.\n'"
2321,31693821,b'Please avoid doing this...\n'
2321,31695869,"b""Is it because you don't have the package and you'll need it now?\n"""
2321,31700016,"b'@divega  I have not tried, but having this dependency may pull in other ASP.NET dependencies, and it seems irrelevant for functional tests of a desktop only provider.\n'"
2321,31701452,"b'@dougbu I can\'t seem to properly restore the dependency on ""Microsoft.AspNet.Testing"" when I\'m compiling via Visual Studio or using ""dnu restore"" from the command line. It might be related to a similar issue that exists in the ""EntityFramework.Sqlite"" project after a dependency on ""System.IO"" was added. I\'ve mentioned this over in https://github.com/aspnet/EntityFramework/pull/2218.\n\n@ErikEJ The ReplaceCulture attribute is needed to harden the tests against formatting changes when running them on a system that isn\'t using the US system culture settings. It\'s also an replacement for this PR: https://github.com/aspnet/EntityFramework/pull/2194.\n'"
2321,31712251,"b'@MichaelKetting Thanks, Yes, I understand that, but I would imagine that it could be fixed in the implementaion of the Relational parameter logger code.\n'"
2321,31715571,"b'@ErikEJ Certainly. And this was one of the two ways on how to fix it. @rowanmiller suggested that it should be fixed in the test, i.e. the logger output should follow the current culture (see https://github.com/aspnet/EntityFramework/issues/2160).\n'"
2321,31718180,"b'@MichaelKetting  Just did a ""rebel"" PR https://github.com/aspnet/EntityFramework/pull/2328 \n'"
2321,31724011,b'@ErikEJ :smile: \n'
2328,31723980,"b""Hmm...I think you're missing the Sqlite test there.\n"""
2328,31724415,b'@MichaelKetting  I think you are right! :-)\n'
2323,31766118,b'??\n'
2277,31184767,b'Any reason not to just always use a shared cache?\n'
2277,31185027,"b'With this, you can re-add the built-in types tests.\n'"
2277,31447472,b'I can only think of one reason: it is not the default SQLite behavior.\n'
2352,32048194,b'Hmm so why is `dnx451` being _added_ here?\n'
2352,32058392,"b""@bricelam @Eilon It got removed during the clean-up that was done around all of the changes to dotnet etc. It appears to work even if you just specify net45. Personally I'd rather be explicit about the fact that we support dnx451 as well but if Brice says it's OK not to have that framework in there then that's OK by me too.\n"""
2352,32059503,"b""If it's not needed I don't think I'd put it there... @bricelam thoughts?\n"""
2352,32060033,"b""It's not needed. I think we should avoid cross-compiling to platforms when we don't need too. It just make the nupkg files bigger than they need to be.\n"""
2352,32060195,"b""There doesn't seem to be any reason these tests _shouldn't_ be able to run on `dnxcore50`. Is there a test (or product) fix we can make instead?\n"""
2352,32060299,"b""@Eilon @bricelam  OK. I've added another commit - to just use net45. Tests pass either way.\n"""
2352,32060355,"b""Why doesn't this work on dnxcore50? We need to be able to reverse engineer on CoreCLR...\n"""
2352,32060974,"b'It\'s a problem with the references that get passed to the compile step of the templates. The references look correct but the compiler complains that it doesn\'t have a ""BinaryOperation"" member that  it\'s expecting. I\'m working on it. But want to get this checked in so we can have a working release branch without muting this test while I figure out what\'s going wrong.\n'"
2355,32071940,"b""Is this because SQLite doesn't support composite keys? Also, why using the string overload instead of the lambda overload?\n"""
2355,32072375,"b""It's because SQLite only supports server value generation for one column per table.\n\nAnd we use the string overload because of the generic constraints on TMessage in MonsterFixupTestBase.cs\n"""
2355,32073138,"b""Hmmm. I didn't realize the model required server value generation on more than column--it didn't when it was originally created because it used SQL Server Identity, which can only be on one column as well. It must have morphed into this at some point, either intentionally or not. It's not a huge deal, but we might just want to make it consistent for all providers.\n\nIt used to be the case that the lambda overload could be done with a cast to the interface type. It was a bit ugly, but at least still allowed automatic refactoring, etc. For example, `builder.Entity<TMessage>().Key(e => ((IMessage)e).MessageId);`\n"""
2355,32074246,"b'The tests do not require generation for multiple columns. But because SQLite only supports generation for one column AND only if that column is the primary key.\n\nAlso, added added a few lines so we use generic constraints better ==> no need to use string overload. Will squash before merging.\n'"
2355,32074484,"b""Update: got ahead of myself. There was a good reason to use the string overload. This test setup does not agree well with Change Tracking.\n\n```\nThe instance of entity type 'Microsoft.Data.Entity.FunctionalTests.TestModels.ChangedOnlyMonsterContext+ProductReview' cannot be tracked because another instance of this type with the same key is already being tracked. For new entities consider using an IIdentityGenerator to generate unique key values.\n```\n"""
2361,32270975,"b""I'm glad this is removed. It was the wrong way to do this anyway.\n"""
2366,32258067,"b'is this fine, or should we only do client side for the mulitple property projections?\n'"
2354,32294504,"b'This check is redundant, this could be simplified with if (!tables.Add(tableName))\n'"
2371,32546528,"b""This should say that generating _idempotent_ scripts isn't supported. You can still generated scripts.\n"""
2371,32546868,"b""@ErikEJ hit a similar limitation in the SQL Server Compact provider. I'll look for a better way we can factor this whole class.\n"""
2371,32548701,"b'`ATTACH DATABASE` technically defines a catalog name, not a schema. But the lines are pretty blurry here--especially on Oracle.\n'"
2371,32548859,"b""As above, I think this should say SQLite doesn't support schemas. Multiple attached databases is arguably different.\n"""
2371,32549080,"b""This probably belongs in a separate discussion thread, but one way we could work around this limitation is to (1) produce a separate file for each migration containing only that migration's SQL statements relevant and (2) generate a Python or LUA (or something else) script that conditionally executes each migration.\n\nhttps://github.com/aspnet/EntityFramework/issues/2394\n"""
2371,32549132,"b'I wonder if we should mention something like ""This operation requires a table rebuild."" in the appropriate messages.\n'"
2371,32549226,b'(as above) should clarify that this is just _idempotent_ scripts.\n'
2371,32549229,"b""Agreed. I'll update the PR to say this instead.\n"""
2371,32549641,"b""Hmm, I think it's an error to ever call this with a schema name. Ignoring this might be hiding other errors. Asking for the SQLite-specific schema name in metadata will always return null. If callers are getting the schema some other way, it's wrong.\n"""
2371,32549905,"b'Oh I see, users can bypass metadata using migration operations. It might be interesting to log a warning here.\n'"
2371,32550397,b'We generally discourage the use of Moq.\n'
2371,32554128,"b'Why only if it contains ""CURRENT_""?\n'"
2371,32554252,"b'In general, we should only throw if it would result in invalid SQL. Otherwise, we should let the database throw.\n'"
2371,32555455,"b'Yup, this needed changing because of migrations sql generation. I can add a log warning...sidenote: have we establish logging conventions for EF?\n'"
2371,32555598,"b'More detail: CURRENT_TIMESTAMP, CURRENT_DATE and CURRENT_TIME are not supported when adding a column. These can only be set as the default when creating a table.\n'"
2371,32556410,"b'No, we still need to sort out logging conventions. For now, a TODO would suffice\n'"
2371,32566888,b'What do we use instead?\n'
2073,32183559,b'Nit: I would just keep the original call to `ActivatorUtilities.CreateInstance()` and avoid creating a new object[] for the default case.\n'
2073,32183756,"b""Test looks good to me. It seems we didn't have anything covering `DbContextActivator`. Thanks! \n\n@ajcvickers any concerns with the test?\n"""
2073,32251993,b'Looks good.\n'
2392,32552722,b'typo. Also name should be changed according to rename.\n'
2392,32574800,b'@smitpatel Will fix. Are you going to finish reviewing this or should  somebody else look as well?\n'
2392,32586850,b'Looks good to me. Though I suggest somebody else should look as well.\n'
2392,32652161,"b""I'll merge now. Happy to respond to any other feedback as we move forward.\n"""
2330,31834142,b'`Database=:memory:` would keep it more isolated\n'
2330,31834163,b'Not that it should ever be used...\n'
2325,31766945,b'csproj & xproj file has mismatch for AssemblyName and RootNamespace.\n'
2325,31767925,"b'Yes, it should be the other way around\n'"
2325,31779904,b'But we decided to not have this namespace? ;-)\n'
2325,31780186,b'So this will be one more place to be changed\n'
2393,32570155,"b'Nope! This is specifcially NOT about creating a unique ""index"". :-) This is for cases where you want an unique constraint on a column, but don\'t want an index, and don\'t want it to be used at one end or the other of a relationship. (Or, put differently, you might want those things, in which case you will need to make some other call anyway and this call will be redundant.)\n'"
2393,32570170,b'Not an index.\n'
2393,32570183,b'Not an index.\n'
2393,32570236,"b'Not an index,\n'"
2393,32570555,b'Consider expression body syntax for lots of these methods.\n'
2393,32582771,"b'We call it ""unique index"" in the .PrincipalKey docs. Should that be changed to ""unique constraint"" as well?\n'"
2393,32586025,"b'Probably, yes.\n'"
2399,32694563,"b'will that work for nested method calls, or should we use stack instead?\n'"
2399,32694786,b'te for consistency\n'
2399,32750385,b'Fixed.\n'
2399,32751043,"b""I believe it will work. Nested member expressions can't contain additional QSREs and we only do it for Property method calls.\n"""
2430,32886414,"b""I assume in this case you didn't need to specify the type because `ReferenceNavigationBuilder` only implements `IAccessor<TService>` once. It might just be me, but this seems to make the code opaque.\n"""
2430,32886419,"b""A bit OT but this also makes me wonder again about the name of the `IAccessor<TService>` interface (in fact it has been bothering me for a while). Wouldn't it be better to call it `IServiceAccessor<TService>`?\n"""
2430,32955093,b'We should discuss in API review. We could consider renaming or having bespoke extension methods for different services.\n'
2430,32967938,"b""Sounds good. From my perspective it would be enough if we specify the generic argument even when it is redundant to improve readability. Of course there isn't a way to enforce that...\n"""
2430,32969006,"b""We'd also have to make sure ReShaper doesn't just remove it on cleanup.\n"""
2430,32970067,"b'Ah, good point.\n'"
2440,32994695,"b""Shouldn't this return a IRelationalTransaction and be called GetTransaction? We are trying to discourage using the DbTansaction directly.\n"""
2440,32994949,"b""I don't remember whether we discussed this in the API review, but this property should be removed to discourage the use of DbTransaction directly.\n"""
2440,32995173,"b""We decided in API review to flatten and not return RelationalTransaction anymore, and likewise for RelationalConnection. We don't want people to do stuff on either DbConnection or DbTransaction directly, but we still wanted to provide a way to get access, and this is what we decided on. I think it could be worth discussing whether the drop-down should be more hidden than this. I can file a bug on that so we can discuss again.\n"""
2440,32995286,"b'Same comment as before. We want to discourage people using it, but at the same time we want people to be able to get to it in some way.\n'"
2440,32995567,b'We should discuss this. I think having it just on IRelationalTransaction is enough.\n'
2440,32995665,b'I have a list of things that I am going to file issues on--I have added it to that list to ensure we discuss it.\n'
2433,32983064,b'We need a more efficient way to do this; creating all the operations and throwing away all but one is wasteful. Exposing `ModelDiffer.Add(IEntityType entityType)` might be enough.\n'
2433,32983321,b'It will always be a `CreateTableOperation`. Should this be `if (createTableOperation  == null)`\n'
2433,32984464,b'Could use EF to setup the test. Create tables using `context.Database.EnsureCreated()` and insert as normal\n'
2433,32984607,"b""Unnecessary. `StoreGeneratedPattern` doesn't influence much on SQLite yet.\n"""
2433,32984768,"b""Asserting this doesn't seem related to the functionality you're testing. SQLite always generates new values for `INTEGER PRIMARY KEY` columns\n"""
2433,32985465,b'Any way to leverage parts of the Migrations pipeline for this?\n'
2433,32985895,"b'Would be neat to leverage the materializer and do something like\n\n``` C#\ncontext.Columns.FromSql(""PRAGMA table_info({0})"", tableName).ToList();\n```\n'"
2433,32986320,b'May get better failures with\n\n``` C#\nvar rename = Assert.IsType<RenameTableOperation>(op1);\n```\n'
2433,33073960,"b'True, but this was much easier.\n'"
2433,33074001,b'Will add as a TODO\n'
2433,33074098,"b""No, but it would be nice to have an API for this in migrations so I don't have to recreate ApplyMigration()\n"""
2452,33091701,"b""May want to add a comment saying they can't be `var`.\n"""
2452,33092029,b'Sure - will do.\n'
2454,33100652,"b""Wasn't this DatabaseUpdateException?\n"""
2454,33100856,b'Do we need Check.NotNull(options)?\n'
2454,33101030,"b""DbUpdateException will go to SaveChangesException\nDataStoreException will be removed if possible\n\nI'm doing these changes in stages because there are so many. This change is just general renaming from data store to database, with some conflicts resolved by other renames. I still have other more specific changes to come.\n"""
2454,33101153,b'Yes.\n'
2454,33101297,b'Sounds good.\n'
2422,32844361,b'Note sure this needs its own class. Why is it being moved from where it was before?\n'
2422,32844490,"b'Slight preference for ""EF"" rather than ""Ef"" if we go with this, but I\'m also happy with DbFunctions or pretty much any other name.\n'"
2422,32845710,"b""It could remain on `QueryExtensions` since it is a query extension related method. Still seems a bit awkward either way since it needs to be available outside of core but shouldn't show up when dotting on `Ef`\n"""
2422,32854496,b'It could be moved to EntityQueryModelVisitor. What about the ValueBuffer overload? @ajcvickers Could we get rid of the ValueBuffer overload by boxing?\n'
2422,32854735,"b'Agree, prefer EF.\n'"
2422,33102819,b'Added #2456 to track this to get the other changes in more quickly\n'
2422,33108518,b'Wrong namespace. Should be `Microsoft.Data.Entity` for discoverability.\n'
2462,33169750,b'Why not make things async throughout? AFAIK DNX supports async `Program.Main`. Is it hard to use async methods from PowerShell?\n\ncc @bricelam \n'
2462,33273974,b'Note: Have updated the above to simpler async () => await ... syntax.\n'
2462,33284550,"b'No need to use await here, just return what GenerateAsync returns\n'"
2462,33284834,b'remove await\n'
2462,33285005,b'You can remove async/await\n'
2462,33285572,b'Can this be made async?\n'
2462,33285669,b'Or is this the PowerShell stuff?\n'
2462,33285869,b'I guess it is :smile:\n'
2462,33286784,b'If you do that the compiler complains that this method has no await in it.\n'
2462,33286920,b'As above\n'
2462,33287000,b'Yep - this is the place where we agreed the sync-async crossover would take place for Powershell.\n'
2462,33287365,b'you need to remove the async keyword as well\n'
2462,33287830,b'Nope - produces compiler errors warning that the async and await are necessary.\n'
2462,33288014,b'I suspect in this case it is needed.\n'
2453,33096304,"b'Must be exactly ""INTEGER"" any other value won\'t work.\n'"
2453,33096460,"b'We could probably just override the user-specified type with ""INTEGER"" if the CLR type is an integral type. I\'ll look into this with #2421.\n'"
2453,33096725,"b'Hmm, I think we should use annotations for autoincrement and inline primary key.\n'"
2453,33096914,b'Why were these removed?\n'
2453,33097910,b'They were testing for a scenario we removed several commits ago  (throwing on CURRENT_TIMESTAMP in the SQL generator). The base class still tests add column.\n'
2453,33098136,"b'Right. ""INT"" will not work with autoincrement. The typemapper should be returning INTEGER, but this catches some cases in our testing where we specify ""int"" (and possibly where a user specifies ""int"").\n'"
2453,33098271,"b""To clarify, you're suggesting we apply this logic during model building instead and then use annotations to generate a different CreateTable operation? Or some other place...\n"""
2453,33102085,"b'We decided to pass the SQL through to the database and let it throw. These test that we\'re generating the ""correct"" (or at least valid-to-parse) SQL.\n'"
2453,33160290,"b'For now, let\'s detect if the type merely _contains_ ""INT"" and override it with INTEGER. This is similar logic to how SQLite determines column affinity.\n\nAfter #2421 is in, it can be even smarter and do it based on the CLR type instead.\n'"
2453,33160789,b'To capture what we discussed yesterday:\n1. Add an annotation like `Sqlite:Autoincrement = true` to the property during model diffing via a `SqliteMigrationsAnnotationProvider`\n2. Add an annotation like `Sqlite:InlinePrimaryKey = true` to the property as an implementation detail of the `SqliteMigrationSqlGenerator`\n'
2453,33219926,b'This may make more sense on the property\n'
2453,33219971,b'Not needed here. This can just be an implementation detail of the `SqliteMigrationSqlGenerator`.\n'
2453,33220034,"b""Don't call base on these.\n"""
2453,33220147,"b""Don't abuse the `Type` property like this. Override how the SQL gets generated in the `ColumnDefinition` method.\n"""
2453,33220196,b'Add these tests back.\n'
2453,33313811,b'Agreed. Moved it to property.\n'
2453,33325734,"b'Does the CLR type actually matter? If it\'s an INTEGER column, things should ""just work"" for any CLR type.\n'"
2453,33325809,b'Also only if `property.StoreGeneratedPattern == StoreGeneratedPattern .Identity` This will let you turn it off in the case that the keys are managed by the application.\n'
2453,33326006,b':frowning: Is there a way to not have to re-implement the base method? I think SQL Server calls base then tacks on `IDENTITY` to the end of the string.\n'
2453,33326235,"b'Keep the original and add a new method instead? ""Maintainable code"" takes on a different meaning in test code--it\'s often OK to copy-and-paste in tests since it\'s better to be explicit about what\'s being tested in each case.\n'"
2453,33326367,"b'Also, an auto-generated bool key sounds like fun: 1, 2, 3... becomes true, true, true... on the client\n'"
2453,33370545,"b""I think technically it would work, but users may not expect this behavior if the CLR type isn't a integer-ish type (including short, long, and unsigned variants.)\n"""
2453,33370724,"b""SQLites is very specific about the order of words. 'integer [not null] autoincrement primary key' != 'integer primary key autoincrement not null'.\n"""
2453,33373563,b'Summing up what we discussed: we will let users shoot themselves in the foot with autoincremented boolean. We only check now for StoreGeneratedPattern == Identity\n'
2478,33389388,b'consider renaming to `updateModel` or `modelAction`\n'
2474,33321935,b'shall I use Queue instead?\n'
2474,33323138,"b'It is spelled indices, right? :sweat_smile:\n'"
2474,33323199,"b'ESL, will fix :)\n'"
2474,33367021,"b'""indexes"" is fine too.\n'"
2474,33367079,b'Return null in base and remove this.\n'
2474,33367178,"b'Actually, can we make this relational only?\n\nEDIT: see comment above.\n'"
2474,33367980,"b'Re: making this relational only: Extract Method on the foreach loop. Call it ""IncludeNavigations"" and make it protected virtual, then override it in relational to compute the indexes before calling base. Maintain the index state in a field in the visitor.\n'"
2474,33368258,"b""Move the sort in IncludeNavigations up, so that you don't need to do it here.\n"""
2474,33368388,b'Or a dictionary of INav -> index?\n'
2474,33386847,"b""This was my first thought, however there can be multiple instances of same INav pointing to different indexes. This could be done with the ordered list, and by removing the elements accordingly in the IncludeVisitor, but I don't like this idea, since it makes IncludeVisitor instances share state and become inter-dependent.\n"""
2474,33386870,b'went with the indexes\n'
2474,33394253,b'IReadOnlyCollection \n'
2474,33394283,b'Nice.\n'
2474,33394302,b'IReadOnlyList\n'
2474,33394379,b'Ternary here\n'
2474,33394421,b'Nice to add a line break before the foreach loops\n'
2474,33394526,b'Consider replacing the imperative loops with a LINQ query.\n'
2474,33394619,b'Can you change to loop above to use a counter and then index here?\n'
2448,33074790,"b'The code outside ""using reader"" has no assumptions about the reader contents so it can be pulled up.\n'"
2448,33074863,b'The Consume\\* methods should be protected virtual\n'
2448,33074997,"b'The code for throwing this exception is pretty generic, so it can be extracted as a method and pulled up\n'"
2448,33204691,b'Since the command has already been executed consider renaming this to `Consume`\n'
2481,33423256,b'Is this removal related?\n'
2481,33483683,"b""It's not removed. It's just moved up a few lines to be with all the other overrides.\n"""
2481,33485388,"b""D'oh! missed it.\n"""
2429,33413668,b'Nit: nice chance to use string interpolation for Format.Length.\n'
2463,33296660,"b'No need to add subfolders, just have all the conventions under ModelConventions.\n'"
2463,33297518,"b'This check and the .PrimaryKey call are unnecessary, just make the final call\n'"
2463,33297612,"b'Sort `properties`, even though we will probably throw later.\n'"
2463,33298180,b'Rename to OnModelBuilt to be consistent with other methods.\n'
2463,33298485,"b""It doesn't make a lot of sense replacing the model builder in a convention. `IModelConvention.Apply` should just return void\n"""
2463,33298918,b'The annotations need to be set through entityTypeBuilder.Annotation\n'
2463,33298947,b'The annotations need to be set through propertyBuilder.Annotation\n'
2463,33299316,"b""You don't need to register RelationalConventionSetBuilder, the providers need to use it or a derived one.\n"""
2463,33299658,"b""Add tests that ensure these conventions override configuration from non-data annotation conventions and don't override explicit configuration\n"""
2463,33299856,b'Same comment as above\n'
2463,33300364,b'Sort on alphabetical order?\n'
2463,33300756,b'Yes\n'
2463,33517645,b'This method is redundant and can be removed\n'
2463,33517672,b'This method is redundant and can be removed\n'
2419,33634284,"b'BTW, this one was for you, @natemcmaster\n'"
2419,33634503,b':thumbsup: Go Blue!\n'
2500,33795800,b'So redundant operations _before_ the rebuild will execute normally?\n'
2500,33796074,"b""It's also possible that foreign keys are created outside of the create table operation.\n"""
2500,33796229,"b""BTW, we'll probably have to remove a lot of this dynamic code for UWP/.NET Native\n"""
2500,33818761,b'Remove operations that are obviated by the rebuild.\n'
2500,33818874,b':disappointed: dang. dynamic dispatch looks so clean.\n'
2500,33818898,b'In SQLite? I thought these can only be added in the `create table` statement.\n'
2500,33823882,"b""Yes, the model differ will pull them out if there are schema-level cycles. You're right; SQLite should probably push them back into the create table operation if possible.\n"""
2500,33823930,b'I was sad too... :panda_face: \n'
2523,33816587,b'Validate args\n'
2523,33816689,b'Any other places we do this explicitly and could change to use the extension method?\n'
2523,33826332,b'there is one more place that I found (in the null semantics) but it actually needs to know the conversion type of the original. Will make another sweep.\n'
2527,33833318,b'typo:topological\n'
2525,33826142,b'Need a switch to turn this off too.\n'
2525,33826355,"b""Possibly similar to SQL Server's [SuppressAmbientTransactionWarning](https://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework.SqlServer/Extensions/SqlServerDbContextOptionsBuilder.cs#L52).\n"""
2525,33954771,"b""Is caching this an issue? Would the user want to change it over the lifetime of this instance? E.g. turn it off for seed data, but turn it on for the rest of the app's operations.\n"""
2525,33955144,b'These tests could be simplified to just assert that `PRAGMA FOREIGN_KEYS;` returns `0` or `1`.\n'
2525,33957697,"b'This is cached, but only affects connection EF opens. For someone seeding data, they could turn it off by executing a pragma statement.\n'"
2525,33959753,"b""Maybe SuppressForeignKeysEnforcement is YAGNI. We should look at what it's like to suppress it globally and one-off and discuss with others.\n"""
2525,33959919,"b""Regardless, it looks like we don't expose a way of changing DbContextOptions over the lifetime of an instance, so caching is fine for now.\n"""
2515,33793179,b'Did we throw in EF6?\n'
2515,33793295,b'I think EF6 also set the length to 8.\n'
2515,33793455,b'This can also apply to entity types.\n'
2515,33793568,b'...and navigation properties.\n'
2515,33793835,b'I think there are already functional tests for this in `OptimisticConcurrencyTestBase` and friends.\n'
2515,33793912,b'Asserts?\n'
2515,33794079,b'Probably existing tests for this too.\n'
2515,33794153,b'Existing tests?\n'
2515,33820755,b'Yes.\n'
2515,33820888,b'SqlServerTypeMapper conversion the type to rowversion. Should we set default value just in case for other providers? or leave it to provider how to handle?\n'
2515,33822111,"b""I couldn't find any method in ef7 to ignore navigation property.\nI also checked EF6 conventions. There is no convention for ignoring navigation property.\n"""
2515,33822895,"b""If Ignore doesn't work it may be a bug.\n"""
2515,33832058,"b""`Ignore` works on navigation properties also though this implementation of `[NotMapped]` doesn't ignore navigation properties.\nFor `[NotMapped]` to work on navigation properties it needs to be implemented in different way which is similar to relationship attributes which I am planning to implement in next PR. I prefer to remove `[NotMapped]` for properties for this PR and implement it with relationship attributes. Or I can implement all those in this PR.\n"""
2515,33840401,"b'Up to you, but I also prefer moving it into the next PR. \n'"
2550,34057725,"b'If tests need a database, they may belong in the functional test project.\n'"
2550,34059124,"b'This feels wrong. What is it doing? Consider the following.\n\n``` C#\nmb.RenameColumn(""Name"", table: ""Person"", newName: ""FirstName"");\nmb.AddColumn<string>(""Name"", table: ""Person"");\nmb.Sql(""UPDATE Person SET Name = FirstName || \' Smith\'"");\n```\n\nBut the code here would remove the mapping from Name->FirstName during the table rebuild because there\'s also an add column operation?\n'"
2550,34059867,b'Is there a bug on the foreign keys as mentioned in [#2500](https://github.com/aspnet/EntityFramework/pull/2500#discussion_r33796074)?\n'
2551,34060618,"b""We may have to do something with paths for the NuGet commands--MSBuild won't copy a referenced assembly to the bin directory unless it's used during compilation.\n"""
2551,34060713,"b'Alternatively, I suppose the NuGet commands could copy it.\n'"
2551,34061533,b'``` C#\nvar type = designTimeProviderAssembly.GetType(providerTypeFullName);\n```\n'
2526,33999492,b'consider refactoring to Visit(memberExpression.Expression)\n'
2526,34003854,"b'I wonder if we can avoid rebuilding this array every time (and hence creating new instance of the NewExpression, even if we dont have to)\n'"
2551,34062393,b'We need one more level of indirection between the `IDatabaseMetadataModelProvider` and the `designTimeType`.\n\nFor example:\n\n``` C#\nvar designTimeServicesFactory = (IServiceProviderFactory)Activator.CreateInstance(designTimeType);\nIServiceProvider designTimeServices = designTimeServicesFactory.Create();\nvar databaseMetadataModelProvider = designTimeServices.GetService<IDatabaseMetadataModelProvider>();\n```\n'
2551,34062534,"b""I think _runtime provider_ can be just _provider_. Provider consumers shouldn't need to know there's a difference.\n"""
2551,34062776,b'Do we want to be more presumptuous and tell users to install the {designTimeProviderAssemblyName} NuGet package? (cc @rowanmiller)\n'
2551,34062963,"b""@bricelam Hmmm. Am not seeing this problem at the moment with the tests I've done. Let's investigate.\n"""
2551,34063002,b'Yes :smile: \n'
2551,34063110,"b'Agreed, that will also enable us to use DI to inject services into the design time components (https://github.com/aspnet/EntityFramework/issues/1769)\n'"
2551,34063322,b'Sure - that sounds OK.\n'
2551,34063552,"b""Hmmm. I had the other feeling. Since there are likely to be 2 packages (the runtime one and the design-time one - see e.g. ErickEJ's comments above) it was good to distinguish which one you meant - and users will in general need to know the difference?\n"""
2551,34063649,b'Yep - totally agree - much better. Will do.\n'
2551,34063699,b'OK. Will do.\n'
2551,34063837,"b'I agree with Brice, we are just going to treat the package that has the main (runtime) components as ""the provider"". If the provider requires a second package to light up design time scenarios then we can provide a nice error message around that (as Brice suggested in another comment) but conceptually the runtime package is ""the provider"".\n'"
2550,34064921,"b'This code is adjusting the list of columns that need to me moved. New columns do not need to be moved from the old table.\n\nThis specific example, however, is a difficult edge case. If the code snippet didn\'t include the Sql operation, and were only\n\n``` c#\nmb.RenameColumn(""Name"", table: ""Person"", newName: ""FirstName"");\nmb.AddColumn<string>(""Name"", table: ""Person"");\n```\n\nthen the user might be expecting a new column ""Name"" to be empty and the old Name column to be moved to FirstName. In SQL Server, this would be the case. But in SQLite, these two operations must be in different migrations for this to work (with the current code).\n'"
2551,34066572,b'OK. Will do.\n'
2550,34071153,"b""Yes, foreign keys are going to be a little messy. Let's hold a more thorough discussion about what level of rebuilds we want to support.\n"""
2552,34066518,b'Expression body\n'
2552,34066658,b'Check null\n'
2552,34066836,"b'Never mind. I see it is checked in the overload. In that case, expression body. :-) And other places here as well.\n'"
2560,34100746,"b'Consider using expression body syntax, here and throughout PR.\n'"
2560,34101259,b'Shadow primary key...just because you can?\n'
2560,34101556,b'Will do\n'
2560,34101595,"b""Yeah just didn't want to pollute the RunSummary object with data access stuff :smile: \n"""
2560,34101635,b'Typo\n'
2560,34101864,b'Use fixtures for this so it only runs once per test class.\n'
2560,34101938,b'using block for these?\n'
2560,34102090,b'string interpolation can be used\n'
2560,34169005,"b""Good point, I'll send a follow up PR with that change after I merge this.\n"""
2560,34169296,"b""I didn't use it here because I want to capture the result and then Assert it was a valid test outside of collection. Having a using would require declaring `records` outside of the block, which I think negates the cleanliness of the using pattern.\n"""
2560,34169341,"b'Thanks, also swapped the test case naming code to use it :smile: \n'"
2561,34101776,b'Good time to update this also.\nsee #2524 \n'
2561,34129630,b'Identity ?\n'
2561,34204827,b'Pool Size also null/default?\n'
2561,34204881,b'PoolSize?\n'
2561,34204970,b'Will do.\n'
2561,34204994,b'Will do.\n'
2561,34205898,"b'ValidateDefaultSequence, ValidateDefaultSpecificSequence dead code in this file. possibly safe to remove.\n'"
2561,34206236,b'Already removed in a future pull request.\n'
2582,34275666,b'We should filter it to the packages installed into the current project. Something like...\n\n``` ps1\nProvider = {\n    param ($context)\n\n    $projectName = $context.Project\n    if (!($projectName)) {\n        $projectName = (Get-Project).ProjectName\n    }\n\n    return Get-Package -ProjectName $projectName | select -ExpandProperty Id\n}\n```\n'
2582,34276888,"b""Don't think we have a $context for Reverse-Engineer? But we already look up $Project (see the Register-TabExpansion already in place). Can we use that instead?\n"""
2582,34287797,b'How about: \n\n```\nGet-Package -ProjectName (Get-Project).ProjectName | select -Expandproperty Id\n```\n'
2582,34299988,"b'`$context` is just a DTO of the other specified parameters on the command invokation. Think of it as the context of tab-expansion. Nothing to do with DbContext or a -Context parameter. You could name it whatever you want.\n\n`$context.Project` is just whatever the user has specified (if anything). For example, if the user does `Reverse-Engineer -Project WebApplication1 -Provider <tab>` the value would be `WebApplication1`.\n'"
2582,34303068,"b""Darn! That sucks. Let's rename it e.g. TabExpansionContext or something else then if we can. Assuming you don't enter a value for the project on the command line (which is likely the default way you'd do it), does $context.Project contain the default value of the project or just null?\n"""
2582,34304810,"b""No, but I covered that case in the code snippet above. `$context` is the de-facto name, and we use it other places in the PowerShell module. Feel free to change if you want, but it doesn't feel overloaded to me in the context of tab-expansion logic.\n"""
2582,34305386,"b""How do you rename it? I don't see where it is declared. It would certainly help me understanding the Powershell code.\n"""
2582,34307151,"b"":smile: `param($context)` is the declaration--That's how you define method parameters. Think of that block like `(object context) => { }` in C#.\n"""
2582,34307823,b'@bricelam OK. Makes sense now. Thanks.\n'
2585,34310249,"b""Don't duplicate this below, make it public and share it. Use fixture inheritance to specialize the EnsureCreated parameters and connection string database name where required.\n"""
2585,34310517,"b'Consider defining a base test class that has the fixture field and a ""CreateContext"" template method (this is what we do in the runtime).\n'"
2585,34373193,"b""Will do. I was originally going to do that but it seemed like overkill to share two partial lines of code (given the initialization is already in a component that just takes the counts)... but I guess it sets it up to better add stuff in the future. I think I'll also add the CreateContext method you suggested to the fixture rather than a base class for the tests.\n"""
2549,33988922,"b""Probably want a test for this - doesn't have to be inheritance related.\n"""
2600,34437356,b'add newline\n'
2600,34437795,"b""isn't the old version better? IIRC Resharper used to complain about scenarios like this. \n"""
2602,34490018,"b'We need to be careful about expanding the scope of inheritance for RTM. If supporting keys on non-root types is something we think is high priority we need to make sure it works across the stack (query, fixup, code first, etc.)\n'"
2602,34490684,b'@anpete @ajcvickers @divega @rowanmiller Thoughts? Should we scope to not allow alternate keys on derived types? Code First appeared to superficially work after removing this.\n'
2602,34492867,"b""I'm ok with limiting it for now and enabling it when we have time to test it properly\n"""
2602,34497176,b'+1\n'
2602,34498145,b'Will undo. Filed #2611.\n'
2598,34621918,b'DRY. Pull this out into its own function now.\n'
2598,34622073,"b'Oops, did I put that `$` there?\n'"
2598,34622357,b'`Path.Combine()`?\n'
2598,34626205,b'Will do.\n'
2598,34626237,b'Will do.\n'
2598,34626305,b'Yes. But I copied it around without noticing. Erik spotted it.\n'
2520,33770010,b'This is the equivalent to dbContext.Database.ExecuteSqlCommand in EF6. We may come up with a better name but I would suggest we keep it the same until we can discuss it in API review.\n'
2520,33770139,"b'(of course I was trying to say that about the actual method in RelationalDatabaseFacadeExtensions, but regardless, we should be consistent).\n'"
2623,34629816,b'Remove this line?\n'
2623,34630164,"b""Why is this needed? Can't commands just get an `IDatabaseMetadataModelProvider` from the service provider?\n"""
2623,34630228,"b""Yeah, this is silly; it's basically what DI does for you. Instead, register `SqlServerMetadataModelProvider` as an `IDatabaseMetadataModelProvider`.\n"""
2620,34624355,"b'Consider a better name for this. Perhaps something like ""CustomData""?\n'"
2620,34625430,"b""Sure, I'll change it :smile: \n"""
2623,34637518,"b""Yeah - that's fine. I want to keep the majority of the service-registering in `DesignTimeMetadataProviderFactory` - so other providers can use it. But I'll update this so instead of a separate Create() method it just overrides `DesignTimeMetadataProviderFactory.AddMetadataProviderServices()`, calls the base class and then adds the service  `SqlServerMetadataModelProvider`  as an  `IDatabaseMetadataModelProvider` as you say.\n"""
2587,34374311,"b'now that I think about it, it would be nice to add \'Marcus\' Hammer of Dawn"" with null ammunition type - for completeness, and also to make sure that null semantics works well with enums\n'"
2587,34374490,b'formatting - add space after while/if\n'
2587,34376684,b'Use ExpressionExtensions.RemoveConvert\n'
2587,34376767,b'Seems like the Hammer of Dawn would always have ammo though.\n'
2587,34376986,"b""We were considering Butcher's Cleaver, but most likely it will not pass policheck...\n"""
2621,34702400,b'Override and assert the SQL in the SQL Server tests.\n'
2621,34724414,b'Done.\n'
2614,34527096,"b""I think we should only do this if the [Required] is on a reference navigation to principal, putting it on a collection navigation or a reference navigation to dependent doesn't have the same semantics.\n"""
2614,34527290,"b'you should be able to just call `fkOwner.Relationship(foreignKey, true, ConfigurationSource.Convention)`\n'"
2614,34527424,"b""This is redundant as it's already checked in `CanSetNavigation`\n"""
2614,34527722,"b""This shouldn't be necessary as IsRequired is calculated from the contained properties. Instead this should be changed to an Assert and if it fails then the logic needs to be fixed.\n"""
2614,34606118,"b""I changed my mind on this, I don't think this is the right way to fix it. Ignore behavior should be the same for any configuration source. The problem here is that we don't record the ConfigurationSource for navigations, that's what should be fixed.\n"""
2640,34846444,b'We may want a line break before calling `.BaseType()`\n'
2640,34846838,b'Should be named FindDeclaredPrimaryKey\n'
2640,34847063,"b'In the near-future Indexes and Keys will be able to use inherited properties, so they should be configured after BaseType is set\n'"
2640,34847257,"b'If that is the case then how about,\nSort entities so that base types are declared before derived types.\nIn derived type declaration, make call to base type before any other declaration.\nthoughts? @bricelam \n'"
2640,34847527,"b'Or you could group the code by member type, rather than by entity:\n- BaseType\n- Properties\n- Indexes\n- Keys\n- Relationships\n'"
2640,34849111,"b'I don\'t like the idea of breaking up entities into different ""parts"". Foreign keys make sense since they could be cyclic, but everything else should be in a self-contained call to `.EntityType()` in my opinion. Ideally, I\'d like the FKs inline too--just pulling out one in the cycle if needed.\n\nThe idea of the snapshot file is to be easily diff-able. If an entity type spans multiple blocks of code, I think we loose a lot of that.\n\n cc @rowanmiller\n'"
2625,34710955,"b""I don't know what this means, but it seems weird to allow _both_ base types and derived types.\n"""
2625,34711157,b'Could C# 6-ify these.\n'
2625,34711346,b'Could it be set after this code runs?\n'
2625,34711754,"b""You are right, I'll revert this\n"""
2625,34712049,"b""Can't we always assumed `unchecked` by default? We're certainly not going to add the compiler flag.\n"""
2625,34712312,b'Resharper should show a warning for this. I no longer read my own code.\n'
2625,34712813,b'Yes\n'
2625,34712993,b'It has the quick-fix. You can probably change the severity.\n'
2625,34713356,"b""I don't see why we wouldn't do it at some point for a debug build.\nI'll use the lambda form:\n\n```\nobj.Aggregate(0, (hash, p) => unchecked((hash * 397) ^ p.GetHashCode()))\n```\n"""
2625,34713786,b'Should this (and other comparers) compare annotations?\n'
2625,34714017,"b'Maybe, depends on what you are testing\n'"
2625,34714297,b'Should existing keys be removed in that case?\n'
2625,34714622,b'Found it. Will include in the commit.\n'
2625,34714743,b'Setting BaseType would have already done that\n'
2625,34715033,"b'Now that you mention it, I do remember seeing that code... :grinning: \n'"
2641,34833285,b'Should also change variable name to principalKeyProperty considering it may not be primaryKeyProperty\n'
2641,34833424,b':+1: \n'
2641,34837687,b'will do!\n'
2643,34846558,b'ToString?\n'
2643,34846621,b'Typo\n'
2643,34846653,b'Not sure why this needs to be lazy.\n'
2643,34846791,"b""Yeah I went back and forwards on that. I couldn't decide... I'll swap it :smile: \n"""
2643,34846907,"b'Here is the full code:\n\n```\n#if DNX451 || DNXCORE50\n        private static Lazy<string> _framwork = new Lazy<string>(() => \n        {\n            var services = Microsoft.Framework.Runtime.Infrastructure.CallContextServiceLocator.Locator.ServiceProvider; \n            var env = (Microsoft.Framework.Runtime.IRuntimeEnvironment)services.GetService(typeof(Microsoft.Framework.Runtime.IRuntimeEnvironment)); \n            return ""DNX."" + env.RuntimeType;\n        });\n#else\n        private static Lazy<string> _framwork = new Lazy<string>(() => "".NETFramework"");\n#endif\n```\n'"
2643,34847160,b'Are there code paths where .Value is not accessed?\n'
2640,34929551,"b""Agreed with @bricelam, although I do think it is fine to always pull FKs out separately since relationships are somewhat conceptually self contained (I don't think it's worth the complexity of working out which ones to split out).\n"""
2658,34938900,b'Curious: what does this do?\n'
2640,34943152,"b'Yeah, the simplest logic would be to topologically sort entity types by hierarchy then configure foreign keys afterward.\n'"
2658,34943244,"b""Tells the VS built-in testing stuff there's tests in this project.\n"""
2640,34943574,"b'As a user, I kind of like it more if relationships are separate. I guess this is very subjective.\n'"
2657,35014396,b'This name feels a little strange. Maybe`StartsAt`...\n'
2657,35016552,"b'Agreed. We has a blanket comment to prefix Has, but I agree StartsAt is better. Will do.\n'"
2676,35120481,b'``` C#\nAssert.IsType<long>(sequence.ClrType);\n```\n'
2672,35053739,b'Should use `DisplayName()` function from `TypeExtensions` for better handling of nested classes.\n'
2672,35056015,"b""Then I can't do crazy hacks like this inside my provider. :wink: \n\n``` C#\nvar context = Activator.CreateInstance(Type.GetType(model.GetContextKey()));\n```\n\nBut on a serious note, is it worth it? It seems to only make generic types prettier and you can't use open generic types with Migrations anyway. In other words, you'd have to do what Identity does to close them, after which the type will no longer be generic.\n\n``` C#\nclass ApplicationDbContext : IdentityDbContext<ApplicationUser>\n{\n}\n```\n"""
2672,35056628,"b""So it doesn't not help with nested types?\n"""
2672,35056784,"b""As long as the string `Type.FullName` is kept intact, there won't be any issue.\nConsidering above usage, it is not worth. :smile: \n"""
2672,35059037,"b""I didn't think we still had a restriction that the DbContext could not be a generic type? Or a nested type in a generic type for that matter. Is it only Migrations that imposes this restriction?\n"""
2672,35059256,b'I found a test that does `using (var context = new BloggingContext<TBlog>()` so it is at least nominally supported.\n'
2672,35067379,"b""We need to work out how to get an instance of it, but after that, you're right, it should be possible.\n"""
2672,35122497,b'Will update to use `DisplayName` and [make a note](https://github.com/aspnet/EntityFramework/issues/1162) to test generic context types with Migrations.\n'
2672,35123659,"b'@divega No, just generic types.\n'"
2673,35056968,"b""Nit: above you use 'CommandTimeout' in the test method name, here it's not mentioned and below you use 'commandTimeout'. I would update them to all be the same.\n"""
2673,35057085,b'Am I missing something? Why not just assert that ponies.Count = 3?\n'
2673,35057110,b'Typo: uniquness -> uniqueness\n'
2673,35057186,b'This seems to be testing the same thing as the method above? Copy-n-paste error?\n'
2673,35057265,b'Good question. This test is a port of [test/EntityFramework7.SqlServer.FunctionalTests/CompositeKeyEndToEndTest.cs](https://github.com/aspnet/EntityFramework/blob/dev/test/EntityFramework7.SqlServer.FunctionalTests/CompositeKeyEndToEndTest.cs)...not sure what the original author was testing for.\n'
2673,35057477,"b""It's an intentional override of tests in the base class that shouldn't work on SQLite.\n"""
2673,35057757,b'This override should call corresponding method from base class.\n'
2673,35057828,"b""Aha, I didn't read carefully. Will fix.\n"""
2673,35058011,b'I would talk to @ajcvickers or @bricelam - they will probably know. Otherwise am fine to :shipit:\n'
2673,35117765,"b""I believe these need to escape the `-` too so they don't get globalized.\n"""
2673,35118098,b'We also use upper-case `FFFFFFF` [in the ADO.NET provider](https://github.com/aspnet/Microsoft.Data.Sqlite/blob/dev/src/Microsoft.Data.Sqlite/SqliteParameter.cs#L159-L168) to trim trailing zeros.\n'
2673,35118531,b'PascalCasePlease\n'
2677,35166859,b'Probably the only change which is not EF7 -> EF. Is this intentional? \n'
2696,35342605,"b""Hmm, not sure it's right to reuse `Identifier`. I don't think you can escape keywords in namespaces using `@int`.\n"""
2696,35342970,"b'Identifier should add a leading _, not remove it. This is a valid namespace:\n\n``` c#\nnamespace @int._13\n{\n    public class Abc { }\n}\n```\n'"
2696,35344417,b'Sounds good.\n'
2601,35058635,b'@lajones do you see any problems with using placeholders in the *.expected files?\n'
2601,35058714,b'@bricelam @ajcvickers @divega Any reason not to allow per-machine config in this fashion?\n'
2601,35059504,"b'It would be good for @divega to look and see if this is a correct and appropriate use of the configuration stuff. In particular, does it need to have all the static code?\n'"
2601,35120851,b'Does CustomizedTemplateDir need the same treatment as above?\n'
2601,35122095,"b""So what gets output is DbContextCodeGeneratorHelper.VerbatimStringLiteral(configuration.ConnectionString). They might differ if the connection string contains double quotes.\n\nAlso I don't see the changes to the *.expected files themselves?\n"""
2601,35122209,"b""I don't think we should be checking this in in a publicly readable file?\n"""
2601,35124263,b'The only change I needed to make was to https://github.com/aspnet/EntityFramework/blob/b6576d35c1fcee55ada520941530ea6733c9be93/test/EntityFramework7.SqlServer.Design.FunctionalTests/ReverseEngineering/ExpectedResults/E2E/SqlServerReverseEngineerTestE2EContext.expected\n'
2601,35124355,b'Yes it does. I missed this addition when I rebased\n'
2601,35124474,"b""It's just an example password. But yes, we should not be checking in password files. \n"""
2601,35124575,"b""@natemcmaster My mistake - you're right on the *.expected files.\n"""
2601,35126402,"b""OK - then how about `'<your_password_here>'` or something similar - just to make it clear?\n"""
2601,35127764,b'@lajones agreed. Updated.\n'
2698,35371277,"b""Assign the found entity type to a variable so it's more readable\n"""
2698,35371355,"b""Add a comment why this is needed so we don't forget\n"""
2698,35372283,b'No need to throw for explicit as it will never fail\n'
2698,35373047,"b'This is ok for now, but ideally should be handled in the Navigation() method. At least add a comment so it can be moved when #1924 is fixed\n'"
2698,35373404,b'This should be handled in the method passed as the onNewKeyAdded parameter to reduce code duplication\n'
2698,35373469,b'Exception will never be thrown\n'
2698,35373985,b'Bool parameter values should be qualified with the parameter name\n'
2698,35374078,"b'""shouldUpgradeSource"" better conforms with the guidelines\n'"
2698,35374432,b'Instead of adding this method you could add another parameter to GetOrAdd for the temporary configuration source while `onNewKeyAdded` is invoked\n'
2698,35383677,b'Remove this\n'
2633,34735270,b'Simplify this switch to `if/else` since this is not meant to handle any type except Int32\n'
2633,34735379,"b""Move this test into SqlServer tests only, since the translator doesn't run on SQLite queries (and other providers).\n"""
2633,35056536,b'Could use [DebuggerDisplayAttrribute](https://msdn.microsoft.com/en-us/library/x810d419.aspx) instead\n'
2633,35056682,"b'On all of our public methods/ctors that have `[NotNull]`, also make sure to use the check utility e.g. `Check.NotNull(arg, nameof(arg))` or `Check.NotEmpty` for strings. See [check.cs](https://github.com/aspnet/EntityFramework/blob/dev/src/Shared/Check.cs)\n'"
2633,35209126,"b""Great! I didn't knew this even existed. Thanks.\n"""
2633,35469527,b'please remove redundant usings here and in other files\n'
2633,35469619,"b""remove comment, not really needed here, as it's fairly straightforward what the code does\n"""
2633,35469771,"b""remove the region and endregion for consistency with rest of the tests (we don't use them)\n"""
2633,35555483,b'Done.\n'
2723,35598272,b'-v for version gone?\n'
2723,35598462,b'your?\n'
2723,35598750,b'Typo: you -> your?\n'
2723,35599560,"b'""DbContxt""\n'"
2723,35661089,"b'Yeah, it more commonly means verbose which will be added later.\n'"
2723,35661219,"b'lol, wow... I fail.\n'"
2710,35464194,b'@AndriySvyryd - Any reason we were using `TryGetElementType(typeof(IEnumerable<>))` instead of `TryGetSequenceType`? `TryGetSequenceType` checks for `IEnumerable<>` and `IAsyncEnumerable<>` both.\n'
2710,35464287,b'Only set uniqueness if the CLR property was found\n'
2710,35464404,"b""Probably because that method didn't exist yet.\n"""
2710,35465559,"b""It also seems useful to put the `ClrType` on the `Navigation`, so we don't need to look it up again.\n"""
2733,35734159,b'Wrong filename...\n'
2733,35780120,"b""Why are we switching away from using MigrationOperation? Doesn't this mean we have now duplicated SQL generation for deleting rows?\n"""
2733,35780593,b'Should this be `default(T)`?\n'
2733,35780712,b'Oops :astonished: \n'
2733,35781002,"b""Yes, and I would like to get rid of that duplication. I tried my best, but was not able to reuse the Update pipeline in it's current state. The default implementation of this interface, `HistoryRepository` should, for the most part, hide that duplication from provider writers. In the future we should be able to swap it out to use more of the Update pipeline and not break providers. (I've added TODO comments for this.)\n"""
2733,35781028,b'Hard coded connection strings :shock: ... we still need a better solution for configuring our testing infrastructure.\n'
2733,35781502,"b'There is no `T` here. It could also remain `null` and the call could be updated to `Execute<object>(`, but I liked this better.\n'"
2733,35781577,b'When in Rome... :wink: \n'
2733,35782258,b'Filed #2737 too.\n'
2733,35783626,"b"":facepalm: you're right. I didn't look carefully at the context of this change. Carry on.\n"""
2741,35809108,b'@ajcvickers It feels odd to me that the DbContextCodeGeneratorHelper method is abstract whereas the EntityTypeCodeGeneratorHelper method is virtual. That arises because DbContextCodeGeneratorHelper has the IRelationalMetadataExtensionProvider we discussed. I can make the EntityTypeCodeGeneratorHelper method abstract and simply override it SqlServerMetadataModelProvider to return new EntityTypeCodeGeneratorHelper() but that seems unnecessary?\n'
2729,35805591,b'move to the end of file\n'
2729,35815090,b'I prefer to to co-locate it with the field.\n'
2729,35818065,"b""introduce convert only if it's necessary?\n"""
2729,35819285,b'Will take a look\n'
2743,35847346,"b'The datatype name returned fro the schema query in all current versions of SQL Server is always ""timestamp"" and never ""rowversion""\n'"
2743,35847388,b'Same comment as above\n'
2743,35858711,"b'And, just to be sure, by ""current"" in this case you mean ""existing""?\n'"
2743,35858935,"b'Yes, all existing\n'"
2743,35893358,"b""My mistake. I was making the code consistent with what EF6 did, but it looks like (as usual) Erik is right. I'll update.\n"""
2678,35276731,"b""Don't use reflection here or below.\n"""
2678,35276780,b'This should be part of the printer class.\n'
2678,35276821,b'Can we make these internal to the top-level printer class?\n'
2678,35276867,b'Merge this into the visitor below.\n'
2678,35819725,b'Duplicated above\n'
2678,35819872,b'Remove namespace?\n'
2678,35819909,b'ToString?\n'
2678,35819935,"b'""VALUE"" just seems to add noise here...\n'"
2678,35819989,"b'Newline before "",""\n'"
2678,35820141,b'string.Empty as a small optimization?\n'
2678,35820173,b'Not using return value?\n'
2678,35820191,b'Not using return value?\n'
2678,35820352,b'Do we need these new interfaces? Can ConstantExpressionPrinterBase be nested?\n'
2678,35823807,b'done\n'
2678,35823889,"b'removed funcs from ConstantPrinterBase, added static properties to ExpressionPrinter instead, that other classes use as well\n'"
2678,35826272,"b'this code just flattens the parameters which are collections, parameterValue is used for this purpose in line 466\n'"
2678,35826365,"b'Using it in a line below (502), this code only filters out the parameters which are null\n'"
2678,35826390,b'done\n'
2678,35826414,b'removed across the board\n'
2678,35828064,"b'This is a problem with DI setup, RelationalExpresionPrinter should already handle this\n'"
2678,35892606,b'Return value of TryGetValue - would be typical to conditionalize on that.\n'
2699,35383301,"b""Why can't you use a Multigraph instead of creating a new Graph implementation?\n"""
2699,35437870,"b""Multigraph takes Edge of a particular type. In the case of base type, there are no edge objects. Moreover edges are defined by themselves by BaseType property and doesn't required to be added explicitly. Also topological sort of multigraph is implemented to handle breaking/formatting cycles which doesn't arise in basetype.\nMultigraph can also be used in this place with building the graph appropriately. Whichever way it is preferred is fine by me.\n"""
2699,35453670,"b""You can use any type for the Edge here, it doesn't matter\nIf you are adding a new implementation of the topological sort then you need to add tests for it, it's your choice\n"""
2699,35454404,b'@bricelam - what you say? :smile: \n'
2699,35663931,"b""Use `int` and set it to `0`. :smile: We don't need to break cycles, so they don't actually matter.\n"""
2699,35664047,"b""@mikary Did the a Graph implementation that didn't have edge objects go away?\n"""
2699,35696283,"b""The old implementation without cycle breaking or edge values `BidirectionalAdjacencyListGraph` went away in b4bf8b291e4d0ad2e4c642e41faf02d5922ea64b because it wasn't being used. If it makes sense for this situation, we could bring it back.\n"""
2699,35924888,b'Switched to MultiGraph\n'
2741,35993518,b'Why does this check matter? \n'
2741,35993565,b'Can use c# 6.0 fat arrows here.\n'
2741,35993917,b'Can we just use a string literal? (Thinking about #623)\n'
2741,35994056,b'If the foreign key is unique you have a 1:1 (or 0..1:0..1 etc) relationship. NavPropInitializers are used to create a new empty HashSet for a NavigationProperty which represents a 1:N relationship.\n'
2741,35994132,b'OK. Will update.\n'
2741,35994145,"b'Since this is in the reverseengineering namespace, can we drop ""ReverseEngineering"" from the name of classes?\n'"
2741,35994226,b'I believe @ajcvickers said we should be avoiding calling this extension since we may need provider-specific annotations. Can we abstract this?\n'
2741,35994366,b'Empty method?\n'
2741,35994473,"b""We could. Obviously if the assembly name changes we'd need to remember to change this. And there have been assembly name changes recently (EF -> EF7 -> EF), but then again the tests would fail if we forgot. So I'm OK with the string approach if we're taking that approach generally throughout the code.\n"""
2741,35994725,"b""It seems odd to me that we use Annotations as the mechanism for passing error messages...not sure if there is a better way, but it just doesn't seem like this is consistent with how annotations are used in other places in our stack.\n"""
2741,35994877,b'Nit: this is a really long variable name.\n'
2741,35995016,"b""There was a time when this class was not abstract. But now it is I could make this abstract too. However in the SQL Server case we actually don't need to pass any additional references - so my thought was why make the provider provide this method when I could do provide base functionality which would work for most providers here.\n"""
2741,35995228,b'Maybe using the builder pattern would be better here instead of passing codeGenModel in a chain through several layers of calls. (TODO)\n'
2741,35995575,"b'It\'s the same pattern used for Microsoft.Data.Entity.SqlServer.SqlServer_.cs, Microsoft.Data.Entity.Sqlite.Sqlite_.cs.. Plus ""MetadataModelProvider"" just sounds too generic to me and doesn\'t really indicate what it\'s for. So I\'d prefer to keep it this way.\n'"
2741,35995715,"b""I'll look into it. In RevEng it matters less because RevEng is constructing the model in the first place. But if it's easy, sure.\n"""
2741,35995744,b'Same as above. Not sure if we should be using .Relational() since Sqlite and Sqlserver override this.\n'
2741,35996088,"b""Hmmm. I want to attach a piece of information to a particular EntityType and pick it up again later. I thought that was a prime candidate for annotations. If I don't then I'll have to construct some map from EntityType to error message and pass that around. So I thought why not just use the existing mechanism? Remember this model is thrown away once the code is generated - so no code outside of RevEng will see or have to interpret those annotations.\n"""
2741,35996462,"b'What would you suggest? Long variable names don\'t bother me - I\'d rather be precise and have other devs understand exactly what it is meant for, rather than save them a few keystrokes typing the name, especially as we have code completion. But I\'d be happy to, e.g., remove the 2 instances of ""Type"" from the name.\n'"
2741,35996814,"b""Yeah - that's a good idea - I'll put it in as a TODO.\n"""
2741,35996861,"b""I'll look into it - as above.\n"""
2741,35996894,b':+1: Thanks for clarifying.\n'
2741,35997114,"b""It's too bad `nameof` doesn't work on assemblies. We can leave this as-is. I may change later as I try to improve our .NET Native-unfriendly code.\n"""
2741,35998872,"b""Per https://github.com/aspnet/EntityFramework/pull/2701 `Relational()` was removed from the consumption (i.e. read-only) interfaces because if you use it you would miss the overrides. Not sure this usage has problems, because I don't know if how this method fits in the big picture.\n"""
2741,36007167,"b""It doesn't cause problems in this case because in this code the provider is also in charge of putting the annotations on in the first place - so the provider can decide whether they are Relational() annotations (which they currently are) or provider-specific annotations. That said I think it would be better practice to update this to do as Nate is suggesting.\n"""
2741,36009194,b'`_relationalToCodeGenEntityTypeMap`?\n'
2741,36012555,b'Sounds good. Will do.\n'
2762,36026729,b'good idea!\n'
2756,35922877,b'this is being duplicated in `InversePropertyAttributeConvention` and `RelationshipDiscoveryConvention`. Any good place to put it in common place?\n'
2756,35923130,b'I have added both interface on same class. Though the attributes which are part of `INavigationConvention` will have methods of `IEntityTypeConvention` as not implemented and vice-versa. Should divide this in 2 parts or this is fine?\n'
2756,35923411,b'I have modified `CanAddNavigation` so that navigation can be added if it can remove the foreign key of existing navigation.\n'
2756,35937634,b'Add a comment explaining why we need to make this check again\n'
2756,35937768,b'Add as another overload of InternalEntityTypeBuilder.Relationship and return the new relationship\n'
2756,35938003,"b""Divide it, I don't see any advantage in keeping them together.\n"""
2756,35938147,b'If Ignore is successful this should return null\n'
2756,35999883,b'This is part of EntityTypeAddedConventions - returning null from here means the entityType has been removed and further convention should not run. It is not the case here. This is just ignoring property but the entityType still exists in the model. \n'
2756,36001957,b'If this returns null then `NavigationAttributeConvention.Apply` should stop processing other attributes on this property. The original entityTypeBuilder should be returned from that method.\n'
2756,36143172,"b'Should be a ""TODO:""\n'"
2756,36143809,b'Just change it to Assert.True?\nAlso applies for other removed asserts\n'
2777,36248639,"b'ignore those, this is temporary due to changes in DI - I will not check this in\n'"
2787,36540043,"b"":frowning: Looks like there's no way in KoreBuild to exclude things from [the targets](https://github.com/aspnet/Universe/blob/dev/build/_k-standard-goals.shade#L39-L52) that run npm, bower & grunt.\n"""
2787,36541084,"b""Discussed and agreed we should move this to a separate repo. I think once we RTM we may want to split all the benchmark stuff out to a separate repro anyway since we'll be testing various versions and not just the current dev branch.\n"""
2780,36349198,"b""Having a hard-coded path here doesn't seem right. Can we see if we can find a way around this?\n"""
2780,36349358,b'Say which table / property was the problem.\n'
2780,36349394,b'Say what the bad column type was.\n'
2780,36349680,b'Point to the SqliteMetadataExtensionProvider already in EntityFramework.Sqlite.\n'
2780,36349871,"b""Nit: Since you already declare it shouldn't need i=0\n"""
2780,36350181,"b""Shouldn't need _logger. `ReverseEngineeringMetadataModelProvider` has a public Logger property which is set by the constructor.\n"""
2780,36350413,b'What happens if any of the above are null? Does the sqlite_master table allow that?\n'
2780,36350535,b'Presume this is because sqlite_sequence is a system table. Are there any other sqlite_\\* tables you should avoid?\n'
2780,36352031,"b""Nit: perhaps add a comment saying what this is supposed to do and /or rename. From its name I didn't expect it to do everything it does. Maybe make non-static and add a few tests as well?\n"""
2780,36352159,"b'Can strings contain escaped double-quotes? As in C# ""\\""""? If so don\'t think the algorithm works. Also if strings can contain \'(\' or \')\' not sure that won\'t interfere with the above else if?\n'"
2780,36352367,"b""Nit: Here you hard-code the 0, 1, 2... offsets. Elsewhere you use enums. I'd be consistent.\n"""
2780,36352933,"b""Nit: I'd expect a GetXXX method to return XXX's. Maybe a better name would be BuildTablesAndPrimaryKeys()?\n"""
2780,36353186,"b""I'll clean that out. Resharper put it in automagically.\n"""
2780,36353346,b'They are guaranteed to exist. Only the SQL field can be empty.\n'
2780,36353433,"b'sqlite_master, but it will never show up in this result set.\n'"
2780,36353629,"b'In SQLite, escaped double quotes use two sequential double quotes : `CREATE TABLE ""Name """" Has Quote"" ()`. When within a string literal, matching parenthesis doesn\'t matter.\n'"
2780,36353765,b'Here the select statement allows me to specify order of columns. The return of pragma statements do not and could potentially change with SQLite version.\n'
2780,36353817,"b""Good point. I'll update to reflect better what is occurring.\n"""
2780,36359959,"b""We probably don't want this on MSDN...\n"""
2780,36360019,b'Write descriptions or remove these.\n'
2780,36360945,"b'If these can change, it may be better to get them by name, not ordinal.\n'"
2780,36361028,"b"":trollface: Foreign key constraints aren't keys\n"""
2780,36361163,b'You could avoid boxing by using `.GetInt32()` instead. ...since this is _so_ perf-critical. :wink: \n'
2780,36361872,b'I wonder if we should default to something like `byte[]` or `string` since SQLite will just coerce values anyway.\n'
2780,36362062,"b""I don't think we should maintain a list like this. Having the affinity rules and a good default type (like `string`) is probably good enough. The user can always hand-edit any types we guessed wrong.\n"""
2780,36362180,"b""I also think it would be fine to only reverse engineer columns to either `long`, `double`, `string`, and `byte[]`. It's the purist implementation.\n"""
2780,36362256,b'double space: `for  SQLite`\n'
2780,36363687,"b""FWIW `GetFieldValue<int>()` shouldn't need to box, unless the implementation does it.\n"""
2780,36364151,"b""There was some weird IL verifier limitation about having to box before returning a value type in place of an unconstrained generic type. See [the implementation](https://github.com/aspnet/Microsoft.Data.Sqlite/blob/dev/src/Microsoft.Data.Sqlite/SqliteDataReader.cs#L395). I'd love to know how to get around it!\n"""
2780,36364741,b'Perhaps this issue? http://stackoverflow.com/questions/2031010/cast-value-type-to-generic\n'
2780,36364824,"b'One slight optimization to GetFieldValue<> would be to move more commonly used types ""up"" so that less comparisons are needed on average.\n'"
2780,36365325,"b'Am I missing something? I\'d have thought that example would prove the point? Above wouldn\'t you start trying to split again after Name"" instead of after Has Quote""? Similarly what happens if your string looks like this: ( xxx "")"" ) - wouldn\'t you want the paren-matching to ignore the end-paren within the double quotes?\n'"
2780,36383065,"b'If you look at the declared type, maybe at least you should include all the ones here: https://www.sqlite.org/datatype3.html - at least the ones resulting in a affinity that is not ""NUMERIC""\n'"
2780,36470377,"b'Yup, verified. Added some tests and fixed.\n'"
2780,36471061,"b""GetOrdinal doesn't work correctly with the results of pragma statements.\n"""
2780,36537930,"b""Internal for testing? We've tended to move away from that pattern...\n"""
2780,36538099,b':smile: I wondered if they even had names\n'
2780,36538484,"b""Isn't there an overload of the static `string.Contains()` method that takes a `StringComparison` value?\n"""
2780,36539885,b'Wish there was. I looked.\n'
2780,36539940,"b'...to what? protected? or public on methods, internal on class?\n'"
2780,36559364,b'Probably a public class in an `*.Internal` namespace with public methods\n'
2780,36559461,"b""But it's probably fine to leave it as is for now\n"""
2773,36537153,b'We should consider removing the use of `dynamic` in this code.\n'
2773,36537369,"b""Do we want to leave the TODO's in here or do we have bugs to track them?\n"""
2773,36537421,"b""I say this in part because I believe this raw content will be shipped to customers :smile: (Granted, it'll be obscured inside a resource, but just the thought of it... :smile: )\n"""
2773,36560978,"b""We are tracking initial .NET Native support with #623 . When it actually works, then we can then we can move on to optimizing. Till then, let's leave this as a TODO.\n"""
2780,36561065,b'Did you not want to override ClassName? The default produces a fixed name. The SQL Server one (by contrast) interprets the connection string as a SQL Server connection string and tries to use the Initial Catalog.\n'
2780,36561267,"b'I\'m fine leaving it as ""ModelContext"" by default. It\'s easier than trying to sanitize a file path into a context name.\n'"
2773,36561572,"b'Got it, thanks!\n'"
2781,36560562,b'Nit: typo - missing an a\n'
2816,36705355,"b'I made this column be an IDENTITY column - so as to test the plain IDENTITY, integer column. That means that this property now is the single, integer, identity primary key mentioned in the comments and hence needs no fluent API.\n'"
2816,36705375,b'I added this as a test of a column which is an integer and is identity but is not the primary key.\n'
2814,36767294,b'Use null conditional\n'
2814,36767333,b'null conditional\n'
2814,36767392,b'Ternary\n'
2814,36783596,"b""doesn't work with Nullable of T\n"""
2814,36784079,"b'Good point, missed that.\n'"
2819,36780679,b'Nit: extra space after Id near end of line.\n'
2819,36780831,b'Nit: could you fix the spacing on the 3 lines above so they match the EntityFramework.\\* lines above? Plus the #else is not lined up with the #if.\n'
2819,36781514,b'Nit: Maybe add a comment saying why this is necessary / when we can remove it.\n'
2819,36781698,b'Is it only so TestDriven.NET works? Or are there other reasons?\n'
2819,36781918,"b""Nit: usually have #if's at beginning of line.\n"""
2819,36782165,b'This is good for now. Make sure to log yourself an issue to a) extend this to more complicated database and b) implement the other 2 tests (the custom templates tests) as in SqlServerE2ETests.\n'
2794,36792345,b'formatting: remove redundant empty line\n'
2822,36814223,b'What happens if a user specifies an absolute path?\n'
2821,36815992,b'are we guaranteed not to have convert on the right side of the binary op?\n'
2821,36882473,b'Removed the RemoveConvert from above as it was no longer needed.\n'
2827,36883564,b'Can you add a version and description to this `project.json`? (Look at the other ones here for an example.)\n'
2827,36883989,b'Updated.\n'
2797,36563660,b'Is there supposed to be a dangling comma?\n'
2797,36564044,b'Yup. The value is supposed to be comma separated list of foreign key properties. If the incorrect list is provided then the attribute will be ignored. There is a test verifying this scenario which uses this navigation.\n'
2797,36568193,b'Could you squish this check with the if check on line 70?\n'
2797,36568279,"b'If we skipped the check here, will this get caught later when looking up properties?\n'"
2797,36568444,"b""Nit: (passing along Brice's styling suggestions) when passing null literal, it's more readable to include the variable name. [Example](https://github.com/aspnet/EntityFramework/commit/4a11781499ea95165cf4bc11c55b1b5778064c0d#diff-4ae577e6726dfbb2a31b20bd07e1af96R53)\n"""
2797,36569988,b'will do. :smile: The conditions were pretty complex before that I had to keep this separate.\n'
2797,36570322,"b'If we skip check here, it means the empty property will be passed in the list. When the list is used to look into existing properties the `FindProperty()` on line 90 will throw due to incorrect parameter.\n'"
2797,36570433,"b""Right, won't this work too for letting the user know they have a bad param passed into ForeignKeyAttribute? Seems like we could skip the check here and let it percolate.\n"""
2797,36571237,b'At present we are logging error and ignoring the attribute. If user is using a logger which throws on error then only code will throw otherwise the code will ignore and move ahead.\nThis triggers interesting discussion whether we should throw in case of data annotations (or conventions). We definitely do not want to throw when things are just ambiguous. In worst case user will not get a model as expected. Which is fine if the user using annotations in wrong way.\nIn this case we can throw and tell user that there is typo in the name. But it is not possible to know the user intent in all cases. \n'
2797,36653721,"b'IMO it is okay to ignore attributes that are irrelevant. But in this specific case, it would be better for users if our code threw errors because the attribute parameter specified is invalid.\n'"
2797,36816947,"b""This variable doesn't save much repetition and the code would be easier to read without it\n"""
2797,36900705,b'filed #2829 to drive discussion around this and make a decision.\n'
2819,36918315,"b""Don't reuse GIUDs :smile: (I'll fix in my next PR)\n"""
2819,36918399,"b""``` XML\n<CopyToOutputDirectory>Always</CopyToOutputDirectory>\n```\n\n(I'll fix in my next PR)\n"""
2819,36919840,b'I caught this one in #2833 \n'
2800,36654960,b'@rowanmiller What do you think about this API?\n'
2800,36782811,"b""I'm not sure we need the parameterless overload. Since the user will specify the values perhaps we should force them to specify the type explicitly.\n"""
2800,36911257,"b""This is unfortunate but can't think of an easy solution.\n"""
2800,36913015,b'Is this for the case where we introduce a shadow prop?\n'
2800,36913091,"b'Not sure. A few things spring to mind:\n\n1) No generics for the derived types.\n2) Feels more natural to configure the derived via Entity<TDerived>() but I guess you came up with this to keep strong typing.\n\nE.g.\n\n```\nmodelBuilder.Entity<Plant>().DiscriminatorProperty(p => p.Genus)\nmodelBuilder.Entity<Rose>().DiscriminatorValue(PlantGenus.Rose)\n```\n\ncc @divega, @bricelam, @ajcvickers \n'"
2800,36913442,b'for index and FK cast has been removed. Is this required?\n'
2800,36916667,"b""@anpete \n1. There's no point for specifying derived type via a generic argument, since there's nothing to deduce it from and there's no API downstream that would benefit from it\n2. Yes, I prefer the value to be strongly typed in the API. You can still add the value from the derived type:\n\n```\nmodelBuilder.Entity<Rose>().Discriminator().HasValue(typeof(Rose), PlantGenus.Rose)\n```\n\nWe could add sugar for this to make it look like yours\n"""
2800,36916831,b'Yes\n'
2800,36917268,b'I can remove it\n'
2800,36917774,"b'@AndriySvyryd \n\n1) We also do it just because it just looks better and is easier to type. E.g. `modelBuilder.Ignore<Foo>();`\n2) Yeah, your example looks kinda strange because its WET :-)\n'"
2800,36918089,"b'So there is another one that takes the shadow prop name and is generic on the type? If so, then this no-arg one could go away.\n'"
2800,36918106,"b""It would be good to discuss this all up tomorrow in the design meeting. \n\nFWIW, I don't like the API a lot at first glance but I would like to make sure I understand what we are trying to achieve. \n"""
2800,36996419,"b""We'll discuss this in the API review. It wouldn't affect the bulk of the commit though.\n"""
2830,36918204,b'byte array?\n'
2830,36921821,b'Fixed thanks.\n'
2798,36758897,"b'I think Configuration has first-class support for arrays. You\'d have to investigate the specifics, but I seem to remember the format being something like this.\n**JSON**\n\n``` JSON\n{\n  ""mySection"": {\n    ""myArray"": [\n      ""a"",\n      ""b""\n    ]\n  }\n}\n```\n\n**Environemnt**\n\n``` cmd\nSET mySection:myArray:0=a\nSET mySection:myArray:1=b\n```\n'"
2845,37096113,b'Does the assemblyBinding element have any purpose after removing the bindingRedirect?\n'
2839,37129872,b'nit: tabing\n'
2839,37129902,b'nit:could use `typeof().name` as done in tests below.\n'
2831,37015333,"b""Couldn't these strings be replaced by nameof()?\n"""
2831,37018671,b'Likely only in the scope of the owning method.\n'
2831,37018734,"b'""isNullable"" should be ""nullable"" to be idiomatic.\n'"
2831,37200051,"b""@anpete We have _is_ prefixes on Fluent API parameters:\n- IndexBuilder\n  - Unique(isUnique)\n  - SqlServerClustered(isClustered)\n- PropertyBuilder\n  - Required(isRequired)\n  - ConcurrencyToken(isConcurrencyToken)\n- ReferenceCollectionBuilder/ReferenceReferenceBuilder\n  - Required(isRequired)\n- KeyBuilder\n  - SqlServerClustered(isClustered)\n\nI'll leave for now, and we can discuss in the next API Review.\n"""
2859,37249489,b'object is redundant\n'
2859,37316508,"b':smile: I know, but only because _everything_* is an object... Will change; it just feels weird.\n'"
2847,37121173,b'@natemcmaster - re your previous comment in #2822 - have added some testing that the path has to be relative.\n'
2847,37205006,b'It would be more clear that `_rootNamespace` is the fallback value if it were assigned on line 264 rather than in the function call here.\n'
2847,37205424,"b'Drop the word ""overrides"". \n\nAdd the second clause in the powershell help. This makes it a more clear that namespace and output directory are optional.\n'"
2847,37205429,b'~~Overrides~~\nSame as before\n'
2847,37205454,"b""Fair enough. I'll fix.\n"""
2847,37207619,b'OK. Sounds good.\n'
2847,37319218,"b""Actually this code is in a separate class and doesn't have access to _rootNamespace.\n"""
2847,37320420,b'Good point. nvm\n'
2863,37361168,b'collapse into one if statement?\n'
2863,37361185,b'same as above\n'
2863,37363626,b'Fixed thanks.\n'
2863,37363629,b'Fixed thanks.\n'
2880,37471801,b'@rowanmiller I forgot to mention you could have just done `s => s.Value` with the new API here. Most likely not worth changing for now.\n'
2880,37472130,"b""Cool, I was going to ask why I couldn't do that... but good to hear I now can :smile: \n"""
2873,37666484,b'@maumar after I told @dcga to copy the `DateTime.Now` test I began wondering if this assert is enough coverage.\n'
2873,37675366,"b'use nameof(DateTime.Now) instead, same of UtcNow\n'"
2873,37675979,"b'might be worthwhile to add more e.g compare to constant, DateTime.Now/UtcNow in projection. Also, I will add more tests once I add more DateTime related functions.\n'"
2758,36541321,b'The name of this method is misleading. Perhaps something like `AppendWithParameters` would be better...\n'
2758,36568913,"b""You need to do this because `RelationalCommandBuilder` uses `ParameterNameGenerator`, right?\nCan't you just create a `RelationalCommandBuilder` instance in `CreateStoreCommand` that has a noop `ParameterNameGenerator`?\n"""
2758,36644640,"b""I'm leaning toward moving the `ParameterNameGenerator` out of the `RelationalCommandBuilder` since there isn't any other provider-specific / SQL generation logic in the builder.\n"""
2758,37014583,b'With that the Update changes will look good\n'
2758,37578699,b'This should probably be renamed to GenerateCommand or something\n'
2758,37578884,b'rename\n'
2758,37579140,b'rename\n'
2758,37579239,b'rename\n'
2758,37579663,"b'formatting, add space after [NotNul]\n'"
2758,37580466,"b'Could simplify all of this a bit further to just:\n\n``` C#\nbuilder\n    .Append("".Sql("")\n    .Append(_code.Literal(operation.Sql))\n    .Append("")"");\n```\n'"
2758,37581528,"b'Thanks, these [should have been re-enabled a while ago](https://github.com/aspnet/EntityFramework/pull/2277#discussion_r31185027).\n'"
2758,37581880,b'What value does this add over `SqlStatementExecutor`? Can it go away?\n'
2758,37582359,b'So much cleaner!\n'
2758,37583049,"b""This class provides an entry point for the `ExecuteSqlCommand` extension and it basically serves as a place to inject the `IRelationalConnection`. The `object[]` overload could move into the `SqlStatementExecutor`, but I think we need to leave the connection out since there are cases where we use different connections in migrations (you'd probably know more about that than I do).\n"""
2758,37583305,b'Pass connection to Func instead of capturing in the closure.\n'
2758,37583326,b'NotEmpty?\n'
2758,37583404,b'Missing Dispose?\n'
2758,37583422,b'Missing Dispose?\n'
2758,37583439,b'Missing Dispose?\n'
2758,37583584,b'Perhaps move DbCommand creation here so you can centralize and dispose in one place?\n'
2758,37583688,b'Unify to a single version of each method. params?\n'
2758,37583750,b'NotEmpty\n'
2758,37584123,b'Is this pending DI?\n'
2758,37587048,"b'Yes, should be trivial to add to the query DI change\n'"
2758,37587858,b'Why is this not obtained from DI?\n'
2758,37590059,"b""Getting an item from DI in this part of query is difficult and I'm working on a large change to query that will make fixing this trivial, so this is just an intermediate solution.\n"""
2758,37595380,"b""I agree, but I think that is beyond the scope of this PR. Once we have the basic unified commands through, I'd like to do separate PRs for each of the feature areas to cleanup/refactor around the changes.\n"""
2758,37595738,"b'Are you thinking we would move the `DbCommand` and `DbParameter` creation logic out of `RelationalCommand` and `RelationalParameter` and have everything depend on the `SqlStatementExecutor`?\n\nThat sounds like it could be a good factoring, but I would suggest we save that kind of change for a later PR so that the individual feature areas can be adjusted to use the executor first as there are still some areas that are not very DI friendly.\n'"
2758,37607803,"b""SQL Server needs to execute `CREATE DATABASE` statements against `master`, but that's the only special case I can think of. We should look at simplifying these in another wave.\n\nThere are a few components in Migrations that depend on `IRelationalConnection` just to pass it into the executor. That can probably be simplified.\n"""
2758,37652556,"b'No, was just calling out a way to DRY up the ExecuteX methods. Specifically, the call to CreateDbCommand and the missing using.\n'"
2758,37658039,"b'Ah, yes, that does improve the factoring quite a bit. :)\n'"
2758,37669933,"b""I don't think the params pattern helps here, it requires a lot of existing code to add `ToArray()` calls and makes consistency with the async version weird:\n\n``` cs\nExecuteQueryAsync(\n    [NotNull] IRelationalConnection connection,\n    [NotNull] CancellationToken cancellationToken,\n    [NotNull] params RelationalCommand[] relationalCommands)\n```\n\nthis is also more of a provider surface than public surface, so we might want to revisit in API review but this doesn't seem like a pri0 decsision\n"""
2758,37682496,b'Do we need to introduce a new namespace? Should this go under `Storage` instead?\n'
2758,37682640,b'Is this removal intentional?\n'
2758,37682709,b'No need for a field; just use a read-only auto-property.\n'
2758,37682791,"b""Wrap inside `finally` so reference counting doesn't get off on exceptions.\n"""
2758,37682804,b'`finally`\n'
2758,37684159,"b'Yep, this is just a tweak for the `RelationalExpressionPrinter` related to some of the `IRelationalTypeMapper` changes in `DefaultQuerySqlGenerator`\n'"
2903,37683516,b'Cache this?\n'
2903,37684008,b'The delegate is cached. Not sure if you are meaning to cache something else?\n'
2903,37684885,b'Meant this: `return _ => { };` Not sure if it matters.\n'
2903,37685082,b'Changed it to return null instead to avoid creating an executing any delegate in the common case that there are no conversions needed.\n'
2901,37676795,"b'Unless I am missing a detail, new usings should be wrapped in an #if. Otherwise they will tend to be removed by cleanup.\n'"
2901,37678022,b'It may be a bit cleaner to factor this into its own partial.\n\n``` C#\n#if NET45 || DNX451\npartial class DbSet<TEntity> : IListSource\n{\n        IList IListSource.GetList()\n        {\n            throw new NotSupportedException(Strings.DataBindingWithIListSource);\n        }\n\n        bool IListSource.ContainsListCollection => false;\n}\n#endif\n```\n'
2901,37678265,b'Nice. We can put it in a different file with its own using statements.\n'
2901,37678282,"b""Don't add `DNX451` here.\n\nI've found the cleanest way to do this is to use `#if !DNXCORE50` in the tests. That way `NET46` isn't needed here either.\n"""
2901,37686732,b':+1: \n'
2901,37686822,"b'targets for Core.Tests => net46, dnx451. Do we need it for the test?\n'"
2901,37687072,b'Suggestion for file name? :confused: \n'
2901,37763697,"b'No `DNX` in the `*.csproj` files, please. (Below too.)\n'"
2856,37236224,"b'Interesting, we seem to have come full circle here. See #1646\n'"
2856,37236992,"b""The idea here was that if a provider required that you pass in additional info they could just override the ReverseEngineeringConfiguration class and pass that into an overridden ReverseEngineeringGenerator. You could define a new method into which to pass this info but then you'll still be inheriting the old method. So prefer the old way.\n"""
2856,37237684,"b""Agreed. Plus I thought we were avoiding static methods if we could so as to make it more testable (you could write your own CSharpCodeGeneratorHelper, override the methods you needed and pass it in to test other parts of the code). That said we're no longer using Moq where this was a very common approach - so may not be as important any more.\n"""
2856,37238304,b'Not sure why are we putting this in 2 classes (the DbContext and EntityType Helpers) and hence keeping copies of the pointer in multiple different objects when having it on the Generator meant we would only have it once?\n'
2856,37238754,"b""Am I missing where you are checking these now? In my other PR for instance this is where we check that the output path passed in is relative. I'd prefer to fail fast with a helpful message.\n"""
2856,37239718,b'Looser coupling. Moving this to DI removes the responsibility of `Generator` to provide access to an instance of utilities class.\n'
2856,37240163,"b""Removing this simplifies the code. We don't yet support provider-specific parameters on the command line, so it seems unnecessary to add the complexity.\n"""
2856,37240291,b'This is [already checked](https://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework.Commands/Program.cs#L137) by the command line tooling \n'
2856,37240782,b'I was planning to revert this. Making it static was the easiest way to reduce the number of dependencies `ReverseEngineeringGenerator` and `EntityTypeTemplate.cshtml` have on each other.\n'
2856,37890868,b'Did you mean to remove CSharpUtilities as well? In DesignTimeMetadataProviderFactory you add an instance of CSharpUtilities as a service.\n'
2856,37891061,b'Protected - so derived classes can reference?\n'
2856,37891077,b'As above.\n'
2856,37892151,"b""Oh I see - you moved CSharpUtilities. I'm not sure that CSharpUtilities is just for Templating, but I have another bug to review that - so maybe it's fine for now.\n"""
2856,37892994,b'This is much better. Thanks.\n'
2923,37915424,b'Nit: You can just get rid of the whole `<ItemGroup/>`\n'
2836,36938223,"b""we could also support string.Compare(string, string, StringComparison) and ignore the third argument - not sure if it's worth though\n"""
2836,36938316,"b'not really happy about the name, also might be worthwhile to store the ""magic constant"" in one place and reuse it. Thoughts? I need it here, in the StringCompareTranslator and in DefaultQuerySqlGenerator - what would be a good place to store it?\n'"
2836,37024208,"b'Curious, when are the extra params needed?\n'"
2836,37024274,b'Can the third arg affect translations semantics?\n'
2836,37026722,b'string concatenation (strA + strB)\n'
2836,37065570,b'A static in StringCompareTranslator?\n'
2836,37066071,"b""BTW, not to change this PR but it would be very nice if in the future we could figure out a way that adding functionality like this didn't require touching so many places, e.g. if it was somehow possible that the changes required to the visitor, the translation and the SQL generation for a specific operation were encapsulated in a single place. \n"""
2836,37130256,"b'Moved this code from SqlTranslatingVisitor into a separate (post-processing) step, after we are done with the query model. In the future we can make it more extensible, but all the post processing should happen there\n'"
2836,37131910,"b'done only for predicate for now enabling it for projection etc will require some extra work - simply making SelectExpression more mutable might be problematic, because many visitors depend on reference equality comparison to determine whether given expression has changed - if we end up mutating SelectExpression , we might miss some of those changes in a nested subquery scenarios\n'"
2836,37209535,"b""SequenceEqual is an extension method. Isn't reference equality enough here?\n"""
2836,37209570,b'As above.\n'
2836,37209917,b'What does the optimization look like?\n'
2836,37209971,b'Switch statement?\n'
2836,37210194,"b""This doesn't matter if nothing holds on to the stale state.\n"""
2836,37211040,b'This should be static. Provide a template method for extension.\n'
2836,37211181,b'nameof(string.Replace)\n'
2836,37211500,b'Can we improve the formatting here?\n'
2836,37211534,b'nameof\n'
2836,37215415,b'Will investigate\n'
2836,37215714,"b""Are you sure? I've seen a lot of code that just does reference equality on the collection.\n"""
2836,37215717,"b'strA [operator] strB, basically this method recognizes the pattern and extracts strA and strB to be used to construct the resulting expression (line 45)\n'"
2836,37216062,b'was planning to do this in a next checkin - recognize the pattern like this and transform it to:\nCASE WHEN condition1 THEN result1 WHEN condition2 THEN result2 ELSE result3 END\n'
2836,37253306,"b'should I use two different names for this, rather than just distinguish based on return type? Those are:\nbool Method(string left, string right, ExpressionType op)\nint Method(string left, string right)\n'"
2836,37364213,b'readonly\n'
2836,37364269,"b""Weren't you going to make an extension method for this?\n"""
2836,37364335,b'Can you just use the map above for this check?\n'
2836,37364489,b'Do you need the Type checks?\n'
2836,37364505,b'Do you need the Type checks?\n'
2836,37364559,b'readonly\n'
2836,37364808,b'I think this fit better if the signature was something like: string GenerateBinaryOperator(ExpressionType)\n'
2836,37364948,b'Is this code path still needed?\n'
2836,37365389,"b""I'm still missing how this works with the bool return type and node type third argument.\n"""
2836,37371282,"b""StringCompareMethod can have a return type of either int (with 2 arguments), which we want to optimize, eg:\nSqlFunction_returning_int(strA, strB) > 0\nthis gets optimized into \nSqlFunction_returning_bool(strA, strb, '>')\nHow if we have a nested scenario we want to make sure that we wont incorrectly try to optimize out the latter expression. We could probably get rid of one of the type checks (assuming that if one of them is int, the second one won't be a bool), but might as well leave both, just in case\n"""
2836,37371444,"b""2-argument function returning bool, compared to constant 0 will be transformed into 2-argument function returning bool, the third argument being the operator between the original function and the constant 0, eg:\nfunc(strA, strB) >= 0  -> func(strA, strB, '>=')\nDuring sql generation, we recognize both of those, and depending on the return type, we generate either:\nCASE WHEN strA = strB THEN 0 ELSE CASE WHEN strA > strB THEN 1 ELSE -1 (for the 2 arg and int return type)\n\nor strA [operator, the third argument] strB (for the 3 arg and bool return type)\n"""
2836,37371664,"b'yes, in case we can\'t optimize expression to the simple form, e.g. \nString.Compare(strA, strB) > 42, or should we just simplify this to ""false""?\n'"
2836,37689449,b'two separate interfaces to work around the covariance issue in RelationalCompositeExpressionFragmentTranslator. Any better way to deal with this problem?\n'
2836,37920073,b'Initialize inline?\n'
2836,37920464,b'Move NodeType to first arg to match BinaryExpression?\n'
2836,37920651,b'Can probably simplify this code by first checking the constant and then the node type. \n'
2836,37920745,b'Can you extract method on these two code blocks and then call the helper with the left/right flipped?\n'
2836,37921397,b'Is the map part of this still used?\n'
2836,38039963,b'Initialize inline?\n'
2836,38040060,b'What is this used for?\n'
2836,38040198,b'Cache the casted value in a local?\n'
2836,38040225,b'Looks better here BTW.\n'
2836,38040260,b'Nice.\n'
2836,38041608,"b'other providers can add their own translators, we use similar pattern for MethodCallTranslator\n'"
2836,38042675,"b""It's readonly :-) Better to hide the underlying list and provide an Add method the provider can call. Make this change in MethodCallTranslator too if required.\n"""
2932,38066211,b'Keep read-only?\n'
2932,38113711,b'Can this be a static field?\n'
2932,38113765,b'Can this be a static field?\n'
2932,38113827,b'These need to be virtual.\n'
2932,38145928,"b""will investigate bit more since I'm getting null refs when running tests if I make this change\n"""
2948,38158455,b'should not?\n'
2904,37687584,"b""I have slight preference for calling it `DefaultSchema` here as it only applies to objects that don't have it specified explicitly. Thoughts?\n"""
2904,37688541,b':+1: \n'
2904,37777921,b'Why is this broken out into a separate protected method?\n'
2904,37778548,"b""If I call GetOrAddSequence without specifying a schema, then set the model schema, then make the same call again, I will get a different sequence back the second time. Is this what we want to happen? More generally, what does setting the model schema really mean when it comes to entity types, indexes, sequences, etc in the model? Does it mean if these things don't have a schema specified, then they will use the model schema? Or does it mean that when they are created they should be created with the model schema? I think it should probably be the former, in which case it looks like this Sequence code might need to change.\n"""
2904,37778858,b'I agree. What we are trying to accomplish is the former.\n'
2904,37778965,"b"":+1: it should be anything that doesn't have a schema specified when the model is completely built\n"""
2904,38159809,b'Sequence will store the value of schema if specified while creation. `FindSequence` will work in the same way so that we always find the same sequence again even if the value of `DefaultSchema` changed. `Schema` property inside `Sequence` object will fallback to model level default schema if the schema for sequence is not specified.\n'
2957,38246703,b'Composite PK is not possible with `Key`\n'
2957,38246751,b'Composite PK is not possible with `Key` so this may not be true always.\n'
2957,38247341,b'We used to allow this? See e.g. https://msdn.microsoft.com/en-us/data/jj591583.aspx#Composite.\n'
2957,38247829,b'It caused a lot of confusion in EF6 because you had to combine it with [Column] to specify an order. In EF7 you need to use the Fluent API.\n'
2957,38248280,"b""OK. We don't output anything if the KeyDiscoveryConvention would identify the property as a key anyway. So I'll just always use fluent API for this and never output the [Key] attribute.\n"""
2957,38250043,"b""@rowanmiller @smitpatel If the key is a single property, but doesn't match the naming conventions by which we would automatically make it a key would you prefer the [Key] attribute or the fluent API?\n"""
2957,38250246,b'FWIW I would prefer [Key] for that case.\n'
2957,38250527,b'+1\n'
2957,38251057,b'This is a SQL Server specific condition. Postgres uses a different default schema name.\n'
2957,38251908,"b""@natemcmaster  Good catch. How about I setup a virtual getter DefaultSchemaName which by default is null and other providers override. If it's set then we use it here. Do you know what the right value for SQLite is?\n"""
2957,38251944,b'OK. Will do that.\n'
2957,38252108,b'This duplicates much of what is in SqliteE2ETest. It would be better to create a test base. \n'
2957,38252177,"b""@lajones `null`. There are no schema names in SQLite*.\n\n*(usually...we don't support [it](https://www.sqlite.org/lang_attach.html))\n"""
2957,38252985,"b""Agreed. I'll see if I can do it simply. If not I'll do as a separate PR.\n"""
2957,38341924,b'Is `Required` necessary here? The property is of non-nullable type.\n'
2957,38342358,b'`Required` is not required\n'
2957,38342746,"b""Agreed. I'll fix in another PR.\n"""
2959,38253377,b'No assertions that SQLite query-gen is ok?\n'
2959,38257315,b'The queries are running. I can add some SQL verification.\n'
2959,38470578,"b'add requiresClientResultOperator: true for readability, as we usually default to false\n'"
2959,38471360,b'add any with predicate?\n'
2959,38471537,"b'might be good idea to add some more verification, those queries will always return 91 results as there is no predicate\n'"
2959,38471670,b'Will do.\n'
2959,38471682,b'Will do.\n'
2959,38471708,b'Sure.\n'
2959,38485199,b'Going to leave this as the default is true.\n'
2793,36540106,"b""Please don't introduce new namespaces - we have already done API review here.\n"""
2793,36540135,b'New namespace.\n'
2793,36540190,"b""I don't think we have to pull out all nested classes. Some of them are implementation detail.\n"""
2793,36540302,"b""Shouldn't this be registered via interface? Same with QueryCompiler.\n"""
2793,36540442,b'This class is an implementation detail of the cache.\n'
2793,36540739,"b""Isn't the point of this change to make this go away?\n"""
2793,36543721,"b""I would rather put them in M.D.E.Query.Internal, they are implementation details but the purpose of the precompiler is to run through a series of transformations and the details shouldn't matter (Trying for more of an open/closed principal approach)\n"""
2793,36543900,"b""It's registered as a provider service to allow custom cache key generation and this implementation is simply the default. It's the same with QueryCompiler, though at this point only the InMemory provider needs to override.\n"""
2793,36544145,"b""It probably will go away in the long run, but this PR is intended to be an incremental change. We can hold off on merging if it would be better to have the full implementation but I didn't want too overwhelming of a PR\n"""
2793,36545950,"b""That's fine when they are not purely implementation detail.\n"""
2793,36546054,"b""I'm referring to lines 127, 128, in that I thought we always registered via interfaces.\n"""
2793,36548955,"b'There are exceptions required for the `DatabaseProviderServices`, for example the `ValueGeneratorSelector` is registered this way (though in that case both InMemory and Relational have implementations registered so it might not be necessary).\n\nI originally had the Core compiler as an abstract class with InMemory and Relational implementations, but the logic for relational just duplicated what happens in core.\n'"
2793,36549432,"b'OK, I guess I must be missing something about how this works. I guess another question is: Is it required to be this way in order to work?\n'"
2793,36550556,b'Anything else would be going against the pattern for `DatabaseProviderServices` or result in duplicated code (registering as a class in the AddProvider methods or being completely abstract and using the same logic in InMemory and Relational)\n'
2793,36679635,b'compiledQuery/queryPlan rather than func?\n'
2793,36679928,b'private?\n'
2793,36680225,b'fix formatting\n'
2793,38443427,"b""Don't duplicate this..\n"""
2793,38443540,b'This new abstraction seems unrelated to the DI change.\n'
2986,38579993,"b""`CurrentDirectory` is shared, global state. You may want to use `AppDomain.CurrentDomain.BaseDirectory` instead. BTW, that's the default so you can just use the overload of `CreateDomain` that takes only the name.\n"""
2986,38580096,"b""BTW, I've since learned that these don't have to be unique. They're really just for debugging.\n"""
2986,38581687,"b""So this doesn't run on DNXCORE50 anymore?\n"""
2986,38582042,"b""You could have a default constructor that news the fixture up. That way it'll never cross the domain boundary and doesn't have to be serializable.\n"""
2986,38582137,"b""Although I'm not sure how xUnit.net will handle it. (Probably well.)\n"""
2986,38583347,"b""Yeah I thought about that. This particular fixture isn't really necessary because all the config is static and there is no database existence logic - so sharing the same instance between test methods doesn't really buy anything. It is nice to keep using the same consistent fixture patterns though.\n"""
2986,38583463,"b'The cold variations do not run on core, the warm ones do. \n'"
2986,38583534,"b'Sounds good, I will do that.\n'"
2986,38583629,"b'I\'ll just use something static then like ""Cold Start Sandbox""\n'"
2986,38667130,"b""Found that it failed to load assemblies if I didn't specify the `ApplicationBase`, so I left it in but swapped to use `AppDomain.CurrentDomain.BaseDirectory`\n"""
3013,38769461,b'Can `GetMetadataModel` be made private?\n'
3013,38769533,b'Can `CheckOutputFiles` be made private?\n'
3013,38769845,b'Protected?\n'
3013,38770257,b'Not sure what ReadOnlyOutputFiles means. Can you clarify what this method is for?\n'
3013,38771004,b'Am planning on going through all the classes / members / methods etc to review private / protected / public when I respond to #2956.\n'
3013,38771015,b'See above\n'
3013,38771029,b'See above\n'
3013,38771216,b'Of the output files this class is about to write which a) already exist and b) are read-only (so that we can raise an error message saying they need to be fixed - probably by being checked out of Source Control).\n'
3013,38771954,"b'Ok. It wasn\xe2\x80\x99t clear to me just from the name of the method. Since this is an API providers may implement, can we clarify the behavior and name? Something like `void AssertWriteAccess(IList<string> files)` (with exceptions thrown) or `bool CheckWriteAccess(IList<string> files)`  seems more straightforward IMO\n'"
3013,38772592,"b""I assume this being ~~false~~ true turns DataAnnotations off. I think we will generate fluent APIs regardless of the value of this parameter, so the name isn't super clear.\n"""
3013,38773573,"b'Happy to change the name of the method, but we need to return the list of files. I want this code to be responsible for determining which files are a problem, but the calling code to decide what to do about that (check out the files automatically, throw etc.). How about `IList<string> CheckWriteAccess(...)` with a comment that says what it does.\n'"
3013,38773952,b'@divega Correct. How about `useFluentApiExclusively`? I use that elsewhere. The problem is that a correct name is `useFluentApiInsteadOfAttributesEvenWhereThereAreAttributesMatchingThatFunctionality` which is obviously ridiculous.\n'
3013,38775445,"b""Could we just invert it and say it is `useDataAnnotations`? You will always have to pass this parameter, so I don't think the fact that using DataAnnotations is the default for the high level experience matters here.\n"""
3013,38776479,"b""I saw the command line only accepts just `-UseFluentApi`, as opposed to `-UseFluentApi=true` or `-UseFluentApi=false`. Assuming that this is by design, I see why this can't be `useDataAnnotations`. \nThen `useFluentApiOnly` (for here and the command line) sounds better to me than `useFluentApiExclusively`. Does it sound ok to you from the English perspective?\n"""
3013,38776837,b'`GetReadonlyOutputFiles(...)`?\n'
3013,38777244,"b""I don't think we really need to append `exclusively` or `only`, we use annotations by default so you are really just telling us that you prefer fluent. The other options is a config flag like `-configStyle fluent` `-configStyle annotations`\n"""
3013,38777306,b'If we just have the flag to swap to fluent though... then maybe just `-fluent` is enough\n'
3013,38777553,"b""FWI, isn't this the entry point into the provider that the code generation invokes? If yes, I don't think it can be private.\n"""
3013,38777804,"b'Above I was suggestion also changing the behavior, giving CodeWriter and not Generator the responsibility to ensure file paths are accessible. Preserving existing behavior, a better method name may be `GetInaccessibleFilePaths()`. \n'"
3013,38777969,"b""Yep - that's by design (matches e.g. usage of `-Idempotent` for migrations). `-UseFluentApiOnly` sounds good to me (and is shorter). So then I'll use `useFluentApiOnly` as the variable name throughout.\n"""
3013,38780939,"b'Agree we\'re returning paths - will change that part of name. But I prefer `GetReadOnlyFilePaths()`. We are not returning a list of files which are ""inaccessible"". I would read that as ""cannot be reached"" - which could happen for any number of reasons, including the file not currently existing. But that latter is the default state and should return a zero-length list. We are specifically testing that they do exist and are read-only - meaning we won\'t be able to write to them. We don\'t test anything else. \n'"
3013,38782214,"b'I don\'t think `-fluent` by itself would be understandable. We know what we mean because we use it all the time, but as a new user I\'d ask myself ""fluent what""? How about a compromise and have it as `-FluentApi` (and also change `-u` to `-f` in `Program.cs`).\n'"
3013,38782497,b'`-FluentApi` sounds fine to me. \n'
2979,38585353,"b'""CreateNode""?\n'"
2979,38585637,b'Not sure about this name. InboundNavigation?\n'
2979,38585806,"b'Consider adding ""Entity"" somewhere in the name.\n'"
2979,38669079,"b'I would like to propose we introduce an enum type instead of a bool, e.g.: \n\n``` C#\n enum GraphOperationBehavior {IncludeDependents, SingleObject};\n```\n\n(This is the best name I have, but probably makes sense to keep iterating over it :smile:)\n\n**Pros:**\n1. Leads to more readable code when you use it\n2. Allows for easily exposing new behaviors in the future without breaking changes\n**Cons:**\n1. A bit more complicated than a bool?\n\nAnother option that can be combined with the enum or not: Move to a context-level property instead of a parameter:\n**Pros:**\n1. Keeps `Add()` and `Attach()` simpler and AddRange() more consistent \n2. If your application works best with a specific behavior, you only need to make the choice once\n**Cons:**\n1. A bit less discoverable\n2. You need to remember to switch back when you wanted a behavior only to apply only to a few calls (we have been afraid of that in the past, but in most cases it turned out well)\n\nNote that this would look similar to what we decided to do for the [context-level default query tracking behavior property](https://github.com/aspnet/EntityFramework/wiki/Design-Meeting-Notes---August-6,-2015#default-query-tracking-behavior) although in this case I am proposing we get rid of the fine grained per-call option.\n'"
2979,38777382,b'Filed this as an issue so we can discuss.\n'
2979,38777757,b'Done.\n'
2979,38778526,b'Done\n'
2979,38778587,b'Done\n'
3020,38800165,b'Makes the compiler unhappy. Will revert...\n'
2931,38051017,"b'space after ,\n'"
2931,38226738,b'We can probably capture this in CI configurations instead of the makefile.\n'
2931,38480794,b'Should we be doing some caching here? In the benchmarks I had a static Instance property so that we only ever ran all this logic once.\n'
2931,38480870,"b""I think it's fine to leave this in... but I'm not sure how much value it adds. I think it's pretty obvious how to use the config file and this will probably just get out of date. \n"""
2931,38481000,"b""I don't cache because some tests modify the ConnectionStringBuilder to add custom properties.\n"""
2931,38481038,"b""K good. Then i'm gonna remove to reduce update-burden.\n"""
2931,38481141,b'I wonder if we should cache the base one and then have With return a new instance of the builder\n'
2931,38481212,"b""I'm only thinking of perf though... if it is fast enough then it doesn't matter :smile: \n"""
2931,38481276,b'The slowest part is probably reading config from file. I can easily cache that part.\n'
2931,38483407,"b'Nit: Can you make this look a bit cleaner by storing the configuration section for the prefix in a variable? E.g.:\n\n``` C#\nvar section = config.GetSection(prefix);\n// ...\nif (!int.TryParse(section[""ConnectTimeout""], out connectTimeout)) \n```\n'"
2931,38484544,b'Is anyone using this outside the class? Maybe make private?\n'
2931,38484829,"b""> I don't cache because some tests modify the ConnectionStringBuilder to add custom properties.\n\nBut aren't you deferring the creation of the ConnectionStringBuilder until later?\n"""
2931,38485745,"b""Still think @rowanmiller is right and you can cache this because anyway you haven't created the string builder that others will modify. Of course, if this wasn't test code, I would also recommend making it immutable :smile:\n"""
2931,38485772,"b""Oh, it already is immutble, isn't it?\n"""
2931,38486051,"b'Ah, I think I see what the difficulty is: the connection string builder you keep around is mutable and tests can change that. I would recommend removing the field and creating the connection string builder every time. It would require removing the version of With() that takes a key and an object (it is redundant anyway) and changing the other With() to return the connection string directly (and maybe rename it?)\n'"
2931,38486072,b'With what? Assuming this is connection string config? NIT: Formatting and braces not required.\n'
2931,38486543,b'Use blank lines between blocks and members.\n'
2931,38486699,b'Can this test be standardized away from OnConfiguring?\n'
2931,38486758,b'Can this test follow the standard fixture pattern?\n'
2931,38486766,b'Can this test follow the standard fixture pattern?\n'
2931,38486816,"b""Half of this class looks like a DTO for a connection string builder, and I am not sure that is needed. E.g. we could just use connection string builders, an extension method to populate them from configuration, and a default populated instance we cache (and we promise tests will never change :smile:). But given that this is test code and that there can be different opinions I don't care too much. \n"""
2931,38601842,b'Is `Lazy<T>` necessary?\n'
2931,38602312,"b""Interesting to see this code... Maybe there is a good reason we are doing it in this case, but simply deleting the files has traditionally been a broken way of dropping a SQL Server database, even on LocalDB. An usual consequence AFAIR is that next time you try to create it you'll get a failure and you will have to try opening it and closing it before SQL Server records the fact that it doesn't exist anymore.\n"""
2931,38602497,"b""Ah, I just saw the drop above. I don't understand why we would need to delete the files, but it might be ok.\n"""
2931,38602747,"b'One possible theory: we had some test that failed to recreate the database because the files were still there after the drop had executed, and deleting the files seemed to help. I wonder if DROP DATABASE is just a fire and forget operation. Maybe it would be more robust to just poll for the files before we return, yet it might not matter too much.\n\n@anpete it seems that you added this code in https://github.com/aspnet/EntityFramework/commit/6eec03d4103a45f35122eb8907771f07a9195aae. Do you remember why?\n'"
2931,38602982,b'Should the overwrite flag apply to this too?\n'
2931,38602993,b'Overwrite too?\n'
2931,38603052,"b""Nit: it wouldn't bother me if you just chained it all inline when you can :smile:\n"""
2931,38603134,"b""Moreover, do you ever not overwrite? Maybe you don't need the flag.\n"""
2931,38603205,b'Nit: maybe just ApplyConfiguration?\n'
2931,38604921,"b""Yeah, the overwrite flag isn't necessary. I'll remove it.\n"""
2931,38605496,b'Nope. Moving to static constructor.\n'
2931,38664861,"b'Actually I was wrong on who added this code. @AndriySvyryd, do you remember why we needed to delete the files?\n'"
2931,38664917,"b""Don't abbreviate.\n"""
2931,38665096,b'Can we unify these (and the two below) to use the standard fixture pattern?\n'
2931,38678993,"b""@divega Your theory is correct. Dropping the database didn't delete the files right away so the following tests would fail.\n"""
2931,38687810,b'Use the SqliteTestStore\n'
2931,38688246,b'Build options in ctor and cache?\n'
2931,38688279,b'Use test store?\n'
2931,38688410,b'Use test store.\n'
2931,38688429,b'Build once and cache?\n'
2931,38688481,b'Use test store?\n'
2931,38688501,b'Build once and cache?\n'
2931,38688626,"b""This shouldn't need to be called in each test. That's what fixtures are for. It looks like there might be multiple fixtures here and so we may need to split out each set of tests so the fixtures can vary.\n"""
2931,38688685,b'Thanks. I will file a test bug on this to follow up when we have time.\n'
2931,38704441,"b""I'm going to backout changes to MonsterFixup and move to a separate PR. This is expanding beyond the scope of the original PR.\n"""
2931,38704673,"b'Also, the CreateAndSeedDatabase function is not used in every test.\n'"
3008,38706182,"b'alternatively we could reuse the existing CompiledQueryCacheKey, by introducing some sort of list of annotations. However this solution is bit faster (as you can rely on hashcode comparisons. Thoughts?\n'"
3008,38706268,b'See my comment in the Conversation tab.\n'
3008,38714639,b'Now that we have flattened relational extensions into the database fa\xc3\xa7ade this will read:\n\n``` C#\ncontext.Database.UseDatabaseNullSemantics(true);\n```\n\nrather than\n\n``` C#\ncontext.Database.AsRelational().UseDatabaseNullSemantics();\n```\n\nHence I think we should swing back to the `UseRelationalNullSemantics` name.\n'
3008,38766651,b':+1: \n'
3008,38796438,"b""Don't flow the whole database, start with just the bool value of the option.\n"""
3008,38796508,"b'I think we are likely going to want some kind of query options objection going forward - async would live there too, and the stuff @natemcmaster is working on. But fine to postpone that for now.\n'"
3020,38805391,b'Thanks!\n'
2557,34163503,b'This is a bad practice. (See [Async Best Practices](http://channel9.msdn.com/Events/TechEd/NorthAmerica/2014/DEV-B362).) We need a proper end-to-end async implementation.\n'
2557,34181621,"b'Hi, re implemented this line. Also added async methods that uses in this apply migrations.\n'"
3074,39075784,b'Can we add another ctor to SqlFunctionExpression for the no args case?\n'
3074,39075918,b'sure\n'
3087,39108496,b'arguments.ToList().AsReadOnly()\n'
3085,39105964,b'missing sql verification\n'
3085,39105975,b'missing sql verification\n'
3085,39106003,b'missing sql verification\n'
3096,39216958,b'Skip_when_no_OrderBy ?\n'
3096,39217774,"b'would be also nice to add a case with composite key, not sure if we have one in Northwind, but there is one for sure in GearsOfWar\n'"
3096,39219541,b'@anpete and I talked about cases in which the left side can be a projection (from one or more tables). He is going to add a few tests to see if we should change this logic.\n'
3096,39219672,b'Changed.\n'
3096,39219684,b'Will do.\n'
3024,39217499,"b""This isn't the right condition, as the relationship might have been configured explicitly. You need to check for the presence of conflicting annotations\n"""
3024,39217747,b'Redundant comment\n'
3024,39217833,b'Redundant comment\n'
3011,38792713,b'We typically just use auto props for this.\n'
3011,38792929,"b'One question here is whether the config should be fine grained like this, or, whether you should just opt-in to the whole dialect. E.g. Use2005Dialect() \n'"
3011,38793038,b'Just subclass the SQL Server fixture and add a template method to configure the options. #dry\n'
3011,38793137,b'Sneaky\n'
3011,38797257,b'Resharper strikes again.\n'
3011,38797408,"b'We discussed a little about this in #2180. Because SQL Azure is a grab bag of features that does not align with SQL sever, we still need this little knobs. @divega https://github.com/aspnet/EntityFramework/issues/2180#issuecomment-136528449 showed preference for the ability to opt-in to specific features. Perhaps we could add a Use2005Dialect() extension  that represents a set of features. \n'"
3011,38797602,"b'visit orderings as well, also if any of them change - recreate the RowNumberExpression with new arguments\n'"
3011,38798889,"b""I don't have a strong preference. The thing we once said we didn't want to do is to specify the server version and pivot on that for potentially **all** kinds of behavior. Just the SQL dialect feels smaller and potentially manageable, but it also seems ambiguous and could be a slippery slope. E.g. is the dialect referring to just the SQL dialect we are going to use inside SELECT queries or does it affect CUD and DDL (which are also SQL)? If the latter, then it is almost the same thing we said we were going to avoid :smile:\n"""
3011,38799275,"b""I prefer that we address specific cases rather than an over-arching dialog, especially since we're not trying to make everything always work with SQL 2005 (or whatever) when you have this flag turned on, and we don't have a plan to do many of these kinds of flags. So basically, I am agreeing with what @divega said. :-)\n"""
3011,38805371,"b""I'm fine either way, just wanted to make sure we were being explicit here. I also think @natemcmaster's idea of the higher level sugar that builds on the fine-grained stuff could be worth pursuing.\n"""
3011,38902793,"b'I agree that is probably a good idea and we may very well end up doing it. \n\nSo for now I would just add the method for paging and name it very explicitly after what it does, e.g. something like `UseRowNumberForPaging()` rather than `UseLegacyPaging()`.\n\nWe should then keep testing against specific versions and SKUs of SQL Server to see what else we find we need to do. \n\nWhen/if we add these sugar methods we may use them to control other aspects besides the dialect of SQL we generate, e.g. database creation options, or even default batch sizes, retry logic some day, etc.\n\nAnother thing we can consider is whether to use `optionsBuilder.UseSqlServer(...).UseXBehavior()` or `optionsBuilder.UseSqlServerX(...)`.\n'"
3011,38958941,b'@divega how about `UseDerivedTablePaging()` ?\n'
3011,38959671,b'I prefer UseRowNumberForPaging as it is a little clearer to me.\n'
3011,38960267,b'@anpete +1 - https://www.mssqltips.com/sqlservertip/2696/comparing-performance-for-different-sql-server-paging-methods/ \n'
3011,38972772,b'Separate file. Rename to match API name?\n'
3011,38973242,"b'Use the fixture below? Also, this test seems like half functional, half unit :-) Might be easier just to just run a full end to end query, verify SQL, change the flag and then re-run the query.\n'"
3011,38973609,b'Can we just use ParameterExpression?\n'
3011,38973794,b'Property.\n'
3011,38973873,b'Call out RowNumber in the docs here.\n'
3011,38974045,"b""We don't normally worry about this (AsReadOnly).\n"""
3011,38974374,b'Can you use VisitAndConvert here?\n'
3011,38974464,b'Reference equality is typically enough here.\n'
3011,38974597,b'Do you really need Equals and GetHashCode?\n'
3011,38975149,"b""Don't you need to use a visitor here? Sub-queries with paging could potentially occur anywhere in the tree.\n"""
3011,38991129,"b""I should rename this method. This method isn't really a visitor. \n\n> Sub-queries with paging could potentially occur anywhere in the tree.\n\nThe method visits the tree recursively to adjust any selectexpressions that need adjustment.\n"""
3011,38991229,"b""Figured it doesn't hurt...\n"""
3011,38991702,"b'Nope. Our parameter binding will bind an empty string\n`SqlCommand.AddParameterWithValue(""@@RowCount"",null)`\n'"
3011,38992364,"b'Not sure how that API works, despite reading documentation and looking at examples...sample?\n'"
3011,38993952,b'SqlFunctionExpression\n'
3011,38993963,b'YAGNI\n'
3011,38994049,"b""`Ordering` isn't a subtype of expression, so I don't think it will work.\n"""
3011,38994749,"b'Oh yeah, Ordering is kind of annoying that way.\n'"
3011,38995830,b'Looks like we have lost the new Ordering expression(s).\n'
3011,38995976,"b'I see now that this is @@RowCount, which is a System Function\xe2\x84\xa2. We should be able to use SqlFunctionExpression.\n'"
3011,38996101,b'SqlFunctionExpression would append parenthesis => `@@RowCount()` \n'
3011,38996414,b'Do we need the underscores?\n'
3011,38996683,"b""I still can't see where you are visiting sub-queries in the predicate/projection/orderby.\n"""
3011,38997040,"b""Handle VisitSqlFunction in SqlServerQuerySqlGenerator and check for '@@'\n"""
3011,39063291,"b'Can you clarify why we must return new expression instances from `VisitChildren`?\n\nWe are inconsistent about `VisitChildren` returning new instances or not. SelectExpression, CrossApply, and CrossJoin do not. Others do.\n'"
3011,39063419,b'No. This is arbitrary.\n'
3011,39063603,"b""I visit all SelectExpression's in `selectExpression.Tables`. Can subqueries also be nested in `.OrderBy` and `.Predicate`?\n"""
3011,39067208,b'Yep\n'
3011,39070493,"b'@anpete correct if wrong. This visitor should ensure **all** SelectExpressions are visited, including those nested in a Prediate or OrderBy.\n'"
3011,39072217,"b""I think so but add a few tests to be sure. We have ISqlExpressionVisitor but it's kinda awkward right now because we don't have a base impl. and so you end up stubbing all the other methods in a case like this. Also, we are inconsistent in our visitor pattern impl. across SQL expressions. We need to do some refactoring here.\n"""
3013,39449981,"b'Yes, agreeing with others that `-f` is not a good abbreviation.\n'"
3133,39450119,"b'No need for a functional test, IMHO. I would just assert the SQL with a new unit test in [SqliteMigrationSqlGeneratorTest](https://github.com/aspnet/EntityFramework/blob/dev/test/EntityFramework.Sqlite.Tests/Migrations/SqliteMigrationSqlGeneratorTest.cs).\n'"
3133,39450307,"b""This way also doesn't assert that the foreign key was actually added...\n"""
3133,39450569,b'Good point. This test used the example from #3041. Will move to a simpler test as you suggested.\n'
3102,39299895,"b""Couldn't find where this is being used.\n"""
3102,39302185,b'found it in revEng.\n'
3133,39522629,b'Self-refs are actually not broken out into their own operations. :smile: \n'
3130,39534425,b'Does this work? I thought you had to declare a Command within a Command to get sub-commands?\n'
3130,39538109,"b'I think the key has to be ""useFluentApiOnly"" to match the .psm1 file?\n'"
3130,39538622,"b'This is just for display purposes; it\'s never used by the parser. The user can register it however they want, this is just what help shows.\n\n``` C#\n{\n  ""commands"": {\n    ""unicorn"": ""EntityFramework.Commands""\n  }\n}\n```\n'"
3130,39538824,"b'Thanks, I had a few merge conflicts in that area...\n'"
3140,39544169,b'move to separate file or unnest from CompiledQueryCacheKeyGenerator\n'
3140,39544658,b'Prefer to keep this as impl detail so have made it protected.\n'
3139,39547013,"b""Should this be `Restrict`? (They're the same on all databases but SQLite which will literally take no action, not error)\n"""
3139,39547282,"b""I think that is an open question because we have also talked about using SetNull when the FK is not required. So for now I'm just enabling cascade delete and then we can decide what to do about other cases.\n"""
3139,39547685,"b""Sounds good, but let's note forget about on cascade set null please :smile:\n"""
3145,39662277,"b'this is a very common pattern of creating commands, consider adding some sugar method for it\n'"
3145,39666744,b'you can remove /\\* */ now\n'
3145,39667503,b'So does this mean that the command is always disposed and the connection is closed before the reader has been consumed? Does this always work?\n'
3145,39668929,"b'Consider the code here. Previously we were creating the command, creating the reader, consuming the reader, disposing the reader, disposing the command.  Now we are creating the command, creating the reader, disposing the command, consuming the reader, disposing the reader.\n'"
3145,39669262,b'It seems unfortunate that the derived class is now maintaining its own reference count.\n'
3145,39672354,"b""yes, it seems this results in the command being disposed and the connection being closed before the reader is consumed. This works in the existing code because the calls happen to be made while the connection is already open, but even this behavior isn't necessarily guaranteed with all providers.\n\nWe could work around this sequencing issue if `ExecuteReader` takes a consume action as a parameter.\n"""
3145,39673367,"b'This does resolve an existing issue where the Sqlite connection would send a command to enable foreign keys whenever `Open` is called, regardless of the state of the existing connection.\n\nWe considered a few different options for solving this problem:\n- Check the `DbConnection.State` when `Open` is called and only enable keys when the previous state is `Closed` - Does not behave properly with a user owned connection that is already open\n- Add lifetime events / template methods to `RelationalCommand` (i.e. `OnOpen`, `OnClose`) to accommodate these kinds of actions - Only required by Sqlite for now, YAGNI\n- Count open/close calls in the `SqliteDatabaseConnection` - Duplicates logic in `RelationalCommand`\n\nThis seemed like the most pragmatic solution for the time being, but there is defiantly merit to using an alternate solution.\n'"
3145,39674092,b'Can the current count just be exposed from the base class? Open is already virtual.\n'
3145,39674446,"b'The factoring for Query would be a bit strange with a consume action, as the existing behavior disposes the command and saves the reader for later iteration.\n\nDo you know of any issues with the life-cycle of the `DbCommand` vs. the `DbDataReader` @anpete ?\n'"
3145,39674624,"b'What is the semantics of this supposed to be? Do we want the user to be able to to control this in any way? For example, if the user gives us an open connection with foreign_keys off will we always switch it on? If yes, then should we switch it off again when done or just leave their open connection with it switched on? What if they give us a connection with it on already? Do we just try to switch it on again anyway even if it is already on? Is the connection even the right object to use for this?\n'"
3145,39674990,"b""I know that in the old stack when we attempted to retro-fit disposing of the command in this way it started to cause some things to fail. In other words, the old stack didn't ever dispose the command, but changing the code to dispose it before the reader was fully consumed caused issues--I just don't remember exactly what those issues were. Maybe this isn't an issue on the new stack for any providers we care about.\n"""
3145,39675921,b'Return a reader decorator that takes care of disposing the connection?\n\nEven better return an IEnumerable of reader similar to what we do in query.\n'
3145,39676660,"b""I do like the idea of a reader decorator. I didn't add one already because I've been trying to avoid needlessly wrapping the ADO objects.\n\nIn some of the prototyping I've done, I was also able to use a wrapped `DbDataReader` to transparently handle MARS. (not something we need now, but potentially useful)\n"""
3145,39677062,b'We also need to be careful with the perf of this code path in query\n'
3145,39677330,"b""I'm a bit concerned that we will end up over-wrapping and over-abstracting and we won't end up with something that is significantly easier to use or maintain and may result in worse perf.\n"""
3145,39679199,"b""While it doesn't necessarily address the dispose issue, should we consider removing the connection `Open`/`Close` calls out of this class and assume that part of the contract for ExecuteXxx is that the provided connection is open?\n"""
3145,39684098,b'remove /\\* */\n'
3145,39762682,b'Any thoughts on this @bricelam @natemcmaster ?\n'
3145,39768193,"b'We should use FK enforcement by default for new and existing connections. Users can opt-out with `.UseSqlite().SuppressForeignKeysEnforcement()`.\n\nFor existing connections, we should still ensure FK enforcement matches what the user has specified by calling `PRAGMA foreign_keys=OFF/ON` on first use.\n\nIMO - many users will pass us a connection wanting FK on, but not going to the effort to turn it on themselves. For users who want FK off, they can still use `SuppressForeignKeysEnforcement` to make sure FK stays off.\n'"
3145,39786177,b'I think we should hold off on this until the factoring of the commands and the consuming classes stabilize.\nAdding a note to #2498 to add sugar methods\n'
3167,39812785,"b'currently there is bug here - we conventions discover this on officer first, then we add explicit definition in OnModelCreating, which leads to Tags being declared on both Gear and Officer, resulting in exception\n'"
3167,39813070,b'Can you just use the RemoveConvert extension method?\n'
3162,39807667,"b""Nit: shouldn't the whitespace format should be consistent with the ones above?\n"""
3086,39879475,b'Consider ?:\n'
3086,39879785,b'Can we just always run this test without using sequences?\n'
3086,39880339,b'Yes. Will update.\n'
3167,39924191,"b'> currently there is bug here - we conventions discover this on officer first, then we add explicit definition in OnModelCreating, which leads to Tags being declared on both Gear and Officer, resulting in exception\n\n@maumar Is the bug filed? Sorry if I missed it.\n'"
3167,39924507,"b'@divega I talked with Andriy about this, and he is aware of this and was apparently working on this before the perf issue took precedence. Not sure what is the bug number though\n'"
3167,39924526,b'@divega bug number is 1704\n'
3167,39924528,b'Thanks! \n'
3191,40169191,b'isFlagged -> flagged\n'
3191,40169271,b'Consider renaming property to propertyBase as above\n'
3196,40163472,b'Nit: I would probably just inline this into the return below.\n'
3196,40163977,"b'So if you try to do anything ""meaningful"" on an already disposed DbContext it will throw here. I think this is neat!\n'"
3196,40164191,b'Nit: do we really expect this to ever be null?\n'
3196,40169001,b'Yes. It should be null if a context instance has been created but not used for anything.\n'
3196,40169401,"b'I would consider doing the regular, boring thing here. Is this trick always guaranteed to work as the code evolves?\n'"
3196,40169419,b'Any reason to not check the _disposed flag first?\n'
3196,40169538,b'Got it. I was confusing `Initialize` and `InitializeServices`.\n'
3196,40230409,"b""No, if we add new properties or methods that don't access ServiceProvider, then they won't properly throw an ObjectDisposedException. I can add smarter tests that will help us catch these changes.\n"""
3196,40235234,b'I think what we have here is fine. If you want to put the check on the Database and ChangeTracker properties as well I think it would cover everything of substance.\n'
3197,40164895,b'will not check this in\n'
3197,40164898,b'will not check this in\n'
3197,40165062,b'this is quite hacky - i could make it bit better if the CreateMaterializer returned out parameter with the predicate it created and yield decision to change the predicate on select to a call higher up. Thoughts?\n'
3197,40165094,"b""Haven't filed the bugs yet, will do so once I get the PR in.\n"""
3197,40165137,"b'IN optimization should kick in here, will file a bug on this also\n'"
3197,40167372,"b'Yeah, I remember we noticed that before, too.\n'"
3197,40167424,b'I though oldPredicate was always null here?\n'
3197,40167658,b'Consider Extract Method here\n'
3197,40167669,b'Typo\n'
3197,40167684,b'Wow!\n'
3197,40167698,b'Inline these..\n'
3197,40167737,"b""What is this protecting against?  We don't typically do this..\n"""
3197,40167767,b'This is a good FT in itself! :smile: \n'
3197,40167850,b'Dead?\n'
3197,40232475,"b""if the first entity has inheritance, it's discriminator predicate is going to be there.\n"""
3197,40232853,"b'initially took the numbers from the test results - wanted to make sure that the queries don\'t ""eat"" any results. Will remove since I got my confirmation and the dataset is now stable.\n'"
3197,40232910,"b'yup, actually found a product bug with this code :)\n'"
3197,40233290,"b""base tests don't work due to product bugs, will uncomment however so I won't forget to fix to enable it once the scenario is lit up\n"""
3197,40235985,"b'some of this (key declarations, specifically) will go away when bugs in mapping are fixed \n'"
3197,40246399,b'I see. I think this approach is fine vs the out param.\n'
3197,40246461,b'Can this be a static method?\n'
3197,40246498,b'This is great coverage.\n'
3197,40253929,b'its using non-static _sqlQueryGeneratorFactory to create SelectExpression\n'
3212,40276818,"b'Nit: Since you\'re in here could you fix the ""useing"" typo please?\n'"
3166,39874943,b'Why not use typeof() for these 3 lines as above?\n'
3166,39875251,"b""Why are you changing this to be an ILoggerFactory rather than an ILogger? AFAIK all RevEng needs is a single logger and passing in an ILoggerFactory makes it look like it's going to need several.\n"""
3166,40235118,b'`ILogger` should not be registered in DI. This is how logging was designed to be used.\n'
3166,40235354,"b""That assembly is not referenced by this project. I've been thinking about alternative ways to do this including ones that don't use Logging.\n"""
3166,40238957,b'AFAIK that evolved and if you ask for an ILogger you will get one for your class.\n'
3166,40240770,"b""Ok, I'll try to update these to depend on `ILogger` directly again.\n"""
3166,40257638,"b'Nevermind, I decided it was cleaner to use a well-known string, not the class names.\n'"
3166,40259145,"b'Hmmm. Still seems a bit odd IMHO. 1) could we define ""EntityFramework.Commands"" as a variable somewhere and use that throughout? But 2) it still seems odd to me that e.g. `RelationalMetadataModelProvider` and `SqlServerLiteralUtilities` both create a new `ILogger`, (even if they\'re both created with the same name) when AFAIK we have no reason for them not to be the same logger. It feels like something the calling code should deliver as a service?\n'"
3166,40261634,"b'Using `ILoggerFactory` instead of sharing `ILogger` is a better pattern. This allows us greater flexibility when logging. It also makes it clearer inside the class which log it is going to.\n\nAgreeing with @lajones - let\'s try to use a const string for `""EntityFramework.Commands""`. It makes refactoring easier. We could implement via shared .cs file. \n'"
3166,40337022,"b'@lajones `serviceContainer.AddLogging()` does not add an `ILogger` to the service provider. It has a bit of magic to create `ILogger` objects on the fly from the `ILoggerFactory`, but there is no way to specify the name if we do that.\n\n@natemcmaster I was also thinking a shared `*.cs` could help.\n'"
3166,40341333,"b""After discussion looks like we're stuck with this approach to logging for now. :shipit: after you create the shared string.\n"""
3211,40271632,b'Why is this All and not Any?\n'
3211,40271698,"b""Don't put Check calls in internal APIs.\n"""
3211,40271740,b'Can this be private?\n'
3211,40272384,b'That seems to be inconsistent. All apply function in this file have Check calls.\n'
3211,40272417,b'It is being called in `KeyConvetion.cs` - can be made internal.\n'
3211,40272440,b'Then they are all wrong.\n'
3211,40272627,"b""Missed that--leave it public. Definitely don't make it internal.\n"""
3211,40274209,b'Converted to any. Both will have same result since if any shadow property is created by convention for a key defined by convention then all other properties in the key will be also be shadow and defined by convention.\n'
3210,40360592,b'Any?\n'
3210,40360674,b'dead code?\n'
3210,40360705,b'dead code?\n'
3210,40360968,b'Somewhat strange calling this a list.\n'
3210,40361055,b'Formatting\n'
3210,40370184,"b'This eventually resolves to a StringBuilder.Length call, rather than resulting in a ToString\n'"
3190,40387267,b'Why not use `Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsValidIdentifier`?\n'
3190,40387312,b'Debug?\n'
3190,40388514,b'Oops. Will fix.\n'
3190,40388531,b'Good point. Will use that instead.\n'
3190,40389694,"b'I am personally not sure we need to do any of this, but FWIW, the namespace should be a valid identifier as well.\n'"
3190,40390836,"b""@divega The namespace is constructed from the project and sub-directory names and already goes through the 'making sure it's a valid identifier' process.\n"""
3190,40395681,"b'OK, thanks!\n'"
3214,40271859,"b""I'll fix these whitespace changes. Not sure how they crept in.\n"""
3214,40372748,b'Nit: `_tableSelectionSet = tableSelectionSet ?? TableSelectionSet.InclusiveAll;` would be clearer.\n'
3214,40372834,b'Do we need this?\n'
3214,40372848,b'Same\n'
3214,40385292,b'Will do.\n'
3214,40385340,"b""I did have an equals comparison at one stage - but I think it got removed. I'll check.\n"""
3214,40385359,"b""Required if Equals is required. I'll check.\n"""
3214,40395688,b'No longer needed. Removed.\n'
3214,40395738,b'No longer needed. Removed.\n'
3214,40445144,b'Internal?\n'
3214,40445167,b'Also Internal?\n'
3221,40372436,b'Make an issue to track these?\n'
3221,40385159,b'Will do.\n'
3221,40451465,b'We should discuss this syntax at a design meeting.\n'
3230,40465223,"b""Again, let's discuss this format at a design meeting.\n"""
3230,40465955,b'Yep. Sounds good.\n'
3231,40467064,"b""I didn't expect this to be exclusive to relational. Do you think it won't apply to other stores or that we will need something different?\n"""
3231,40474362,"b""What would it mean for in-memory? no-op? We could do that, although I'm not sure to what benefit. We don't really know what it means for other stores either. E.g. Redis would likely need client eval very often.\n\nWould it be a big problem to lift it later, if we determine it makes sense?\n"""
3231,40480759,b'CheckClientEval(whereClause.Predicate)\n'
3231,40481166,b'Fixed.\n'
3231,40482930,"b'add a case for filter with combination of client and server eval, as there is some relevant logic around that scenario\n'"
3231,40483223,"b'I think that will just throw on the same code path, but can add.\n'"
3236,40480992,b'Move this into QueryAnnotationExtractor and do it at the time we add the annotation\n'
3236,40481059,b'I think you may find comprehension syntax easier for joins\n'
3236,40481091,b'These are disabled because of the other bug?\n'
3236,40481117,b'yes\n'
3236,40481140,"b'not for the composite keys, its terrible\n'"
3236,40481151,b'will do\n'
3236,40481268,"b'on new {a.Foo, a.Bar} equals new {b.Foo, b.Bar} should work. \n'"
3236,40481546,b'combination of mismatched key names and types makes intellisense act up (when I tried it earlier)\n'
3236,40483010,b'Does this work for c.Foo.Bar?\n'
3231,40487245,"b""Ok, thinking about it more, I agree it would be ok to lift it later. I wasn't thinking about in-memory or even Redis as the interesting cases for it.\n"""
3231,40487973,"b""Na\xc3\xafve question, but do we need coverage for queries that will **not** throw with this flag on? (It may very well be there and I just don't know how to find it).\n"""
3237,40567804,"b"":frowning: Didn't we decide just _Sql_ was OK in API Review?\n"""
3237,40567969,b'Does this really need both or can `IUpdateSqlGenerator` be removed?\n'
3237,40574061,"b""Oops, didn't mean to change the name, this is just an artifact of some incremental changes where both generators were being used.\n"""
3237,40574685,"b'If the referenced code on `IUpdateSqlGenerator` (or any of the other generators) is general purpose, we could move it to the `ISqlGenerator`. I expect we will want to keep adding to this as we refine SQL generation (i.e. parameter prefixes for #2916, operators, etc.)\n'"
3238,40568744,b'Debugging? Can remove.\n'
3238,40570239,b'Yup. Good catch.\n'
3238,40571454,"b""I'd like to change this to work the way other Get*Configurations() work to be consistent. I.e. update RelationshipConfiguration to have a HasAttributeEquivalent getter which by default is set to true. For the specific situation you outline above, set HasAttributeEquivalent to false when you create the RelationshipConfiguration. Then here if useFluentApiOnly is true return all RelationshipConfigurations, but when useFluentApiOnly is false only return the ones with HasAttributeEquivalent == false.\n"""
3238,40572865,"b""Let's talk about this. I'm concerned that _relationalToCodeGenPropertyMap[p] might not always exist. E.g. if you use the select-table feature I just checked in you could select the table with the FK, but the principal end, though it exists in the database, might not be part of the relational model.\n"""
3238,40573665,b'Was this debug?\n'
3238,40577607,"b'Yes, this was debug. Will remove.\n'"
3238,40577627,"b""Yes, we don't handle that case. Will test it once the table selection changes are added.\n"""
3238,40580870,b'Updated to add HasAttributeEquivalent.\n'
3264,40845021,b'Do you want indexes whose `TableName` is not allowed by `TableSelectionSet`?\n'
3264,40845860,b'Yes. Good catch -- will add this in.\n'
3271,40822208,"b'Rather than changing this existing test case, can we add a second one? We still want to ensure this scenario works.\n'"
3271,40822327,b'This would be cleaner if you introduced an internal datatype. It makes the code much more readable too. \n'
3271,40822611,"b""Isn't the `.ToList()` redundant?\n"""
3271,40823875,b'This seems like a lot of overhead just to track what type of constraint we are working on. Can this be added as a property to TableConstraintColumn?\n'
3271,40824169,"b""Nvm. It looks like it already is a property on `TableConstraintColumn`. Why are we duplicating data into another dictionary? I can't see why we need this extra dictionary.\n"""
3271,40824421,b'Will fix.\n'
3271,40824562,"b'Nit: post-rc1, we could consider cleaning up the ordering of logic. We have a mix of model building and validation all mixed into one giant `ConstructRelationalModel` step. It could be easier to manage by separating into distinct steps in our reveng process.\n'"
3271,40825129,b'Hmmm. Will think about it. This is just a map of tables -> their constraints -> the ordered list of columns which make up those constraints.\n\nHaving said that I had a think about this last night. I will change the `List<>` to a `SortedList<>`. Then I can inject the data directly and read it out in sort order - which is all I really need.\n'
3271,40825220,"b""Nit: also post-rc1. Let's consider switching to using ModelBuilder where possible. `MatchProperties` duplicates checks we already have in `EntityTypeBuilder.HasKey(string[] propertyNames)`, which will find properties or throw a `ModelItemNotFoundException`\n"""
3271,40825632,b'Similar to the note above. We could simplify here by relying on `ReferenceCollectionBuilder.ForeignKey(string[] foreignKeyPropertyNames)` to do the right thing by finding properties.\n'
3271,40826032,"b'For updating the model I need to just iterate over the primary and unique keys _before_ I iterate over the foreign keys. Initially I tried storing them in separate trees, but then I found that the code that injected the data in the first place had to be replicated.\n\nThen I tried to store the 2nd string (constraintId) as a tuple {constraintId, constraintType}. But that made the key of that dictionary the tuple, when in fact the constraintId uniquely defines what type of constraint it is. So in the end this made sense.\n'"
3271,40826602,"b'It is still pretty messy. When adding primary/alternate keys, could you iterate over all TableConstraintColumn and just filter out foreign keys?\n'"
3271,40827251,"b""I would have liked to put generation of this message inline with creating the key as I do for other warnings that get issued. But there is a situation which applies to primary keys in particular where no PK exists in the database. In this case no `TableConstraintColumn`s exist for that table and so when I iterate over `_constraintToColumnsMap` we can't spot that it's missing. But I see your point. I can pull this particular validation down into Relational.Design. However I can imagine other situations where only the provider knows that it is a problem and then the provider will need to be responsible for issuing that error message.\n"""
3271,40827911,"b""Let's discuss for post-rc1. `MatchProperties` is matching columnId's from the database to properties that it itself has built up in creating the model. I wouldn't have thought that `ModelBuilder` would have the concept of the columnId as that is specific to SQL Server? Note: column name is something different. \n"""
3271,40827939,b'See below.\n'
3271,40830382,b'Yes. Can do.\n'
3271,40851140,"b""Good points to consider. What is here is fine for now. If this is something you think we should revisit post-rc1, let's create a separate issue to track it.\n"""
3271,40851996,"b'ModelBuilder can use arbitrary strings to name properties. AFAIK `columnId` is the property name, so ModelBuilder should find it just the same.\n'"
3271,40852095,"b""But as noted, yes let's move this to a separate issue to be considered after rc1.\n"""
3285,40864235,"b'Nit: typo ""emtpy""\n'"
3285,40864653,"b""Nit: Doesn't affect anything but here parameters can be null. But it seems that all the points where you call it you check that it's not null?\n"""
3285,40927293,"b'This is actually intentional, the `SqlCommandBuilder` will be replacing part of the functionality of the `SqlStatementExecutor` which manages both command building and execution. Some existing calls in the `DatabaseCreator`, `HistoryRepository` and a few other classes will make use of the null parameter, but it was impractical to include those changes in this PR without expanding the scope of the PR and including changes that would immediately be reverted / reworked in the next PR. \n'"
3285,40937608,b'OK. Sounds good.\n'
3295,40962688,b'nit: change variable name too.\n'
3295,40962885,b'`SqlServerConfigurationFactory`? (and likewise for sqlite)\n'
3295,40962999,"b""Agreed - I'll check throughout.\n"""
3295,40963050,"b'Nit: style preference. For boolean literals, use named parameters (will require rearranging). Makes code more readable.\n'"
3295,40963060,b'Agreed - will fix.\n'
3295,40963308,"b""Can't - tried but you can't mix it with params. Happy to add /\\* hasAttributeEquivalent */ if you like?\n"""
3295,40963400,b'Last argument to function is params type. Use inline comment to specify parameter name?\n'
3295,40963655,"b""This is the only quirky part about this change. It just seems odd to give a reference to the factory in a ctor. But don't know there is a better way to get around this...\n"""
3295,40963903,"b""Agreed. But I couldn't think of a quick way around it. In design mtg would like to discuss using a builder approach. The builder is passed the ConfigurationFactory but the builder is what creates the *Configuration objects. But this is just a quick fix for tomorrow's API review.\n"""
3300,40969484,b'Move to its own file?\n'
3300,40969491,b'Move to its own file?\n'
3300,40969737,"b'Does this working depend on when AddEntityFramework is called? In other words, can I accidentally defeat this if I do some logging registration in Startup after AddEntityFramework has already been called?\n\nIf so, do we care?\n'"
3300,40970876,b'Will do.\n'
3300,40970887,b'Will do.\n'
3300,40977127,b'Discussed offline and decided to introduce a new type of ILogger instead.\n'
3278,40968500,b'Consider SelectMany\n'
3299,40967896,b'typo in name?\n'
3299,41181456,"b""Don't pass anything for `runConventions`, that's only for delaying running the conventions if you want to set several things without conventions running in-between\n"""
3299,41181638,b'Cast to IForeignKey\n'
3305,40992530,"b'This should be an anonymous object like:\n\n```\ntelemetrySource.WriteTelemetry(telemetryName, new { command = command });\n```\n\nThe object that you pass in here gets ""splatted"" into method parameters on the listener adapter.\n'"
3305,40993191,"b""This can't be right\n"""
3305,40993477,b'Is it possible to get an `Microsoft.Data.Entity.AfterExecuteReader` as well? That way we can run timers between the two?\n'
3305,40993485,"b""Ok. Can someone explain what it should be? We only add a TelemetrySource if there isn't one already in the container. So if someone wants to consume EF telemetry, they will need to handle both Microsoft.AspNet and whatever we put here.\n"""
3305,40993604,b'Also do you only ever execute `ExecuteReaderAsync`? Do you ever run the sync equivalent or `ExecuteScalar``ExecuteScalarAsync`?\n'
3305,40993648,"b""Reason I ask is that it would be good to be able to know when someone does an Async call vs not... we can flag this to the user so they know that they aren't running it as an async call. \n"""
3305,41031929,b'I will add the after event. The sync code is in QueryingEnumerable.\n'
3305,41032114,b'Will fix.\n'
3305,41034420,"b'Thanks! And given that we have sync code, could you add a property to that anonymous object to indicate whether the query was sync or not? \n'"
3305,41038036,b'@avanderhoorn Implemented in latest commit.\n'
3305,41040495,b'I wondering if its worth creating a separate `WriteCommandError` method? It seems a little weird that the `Before``After`events have an`Exception` property that is not relevant do them. \n'
3305,41042405,b'Do you still want the non-exception part of the payload in the error case?\n'
3305,41043126,"b""Yes please. Because in an exception case we don't get the `After` message. Keeping that data would be inline with the way other cases like this work.\n"""
3305,41046508,"b""Talked to @rynowak about this. In our usage of `TelemetrySource` we do only expect one in the DI container but at the same time the name passed in the constructor is only informational and we don't expect consumers to have to do any special handling or filtering based on the name (e.g. they will just resolve the service type to get it). So changing this string to be EF specific isn't very important but seems more correct and should be harmless. \n"""
3305,41172289,"b'OK, will change it.\n'"
3305,41200069,b'What happens here when AddRelational is called multiple times?\n'
3305,41200120,b'Why internal?\n'
3305,41201062,b'We use TryAdd below\n'
3305,41201208,b'These are internal extension methods.\n'
3334,41207516,b'Can we leverage existing JSON serializers?\n'
3334,41208442,"b""Why? :smile: The format is static and the inputs are well-known, so there's little value in adding a new dependency.\n"""
3334,41208566,"b""Basically just to make code easier to inspect. I thought DNX already provided a json serializer...but if not, then nvm this as I'd also prefer not to take a new dependencies.\n"""
3334,41208884,"b'It looks like there is an [internal JSON parser](https://github.com/aspnet/dnx/tree/dev/src/Microsoft.Dnx.Runtime.Json.Sources), but no serializer.\n'"
3299,41212154,"b'Assume you meant IProperty. If so, done.\n'"
3299,41212164,b'Fixed.\n'
3299,41212644,"b""If I don't pass runConventions: false, then I get something like the following exception every time the convention runs:\n\n```\n---- System.InvalidOperationException : Cannot remove foreign key {'ProductID'} from entity type 'Microsoft.Data.Entity.FunctionalTests.TestModels.Northwind.OrderDetail' because it is referenced by navigation property 'OrderDetails' in entity type 'Microsoft.Data.Entity.FunctionalTests.TestModels.Northwind.Product'. All navigations must be removed or redefined before the referenced foreign key can be removed.\nTest 'Microsoft.Data.Entity.InMemory.FunctionalTests.MusicStoreQueryTests.Music_store_project_to_mapped_entity' failed: System.InvalidOperationException : Cannot remove foreign key {'GenreId'} from entity type 'Microsoft.Data.Entity.InMemory.FunctionalTests.MusicStoreQueryTests+Album' because it is referenced by navigation property 'Albums' in entity type 'Microsoft.Data.Entity.InMemory.FunctionalTests.MusicStoreQueryTests+Genre'. All navigations must be removed or redefined before the referenced foreign key can be removed.\n    Metadata\\EntityType.cs(549,0): at Microsoft.Data.Entity.Metadata.EntityType.CheckForeignKeyNotInUse(ForeignKey foreignKey)\n    Metadata\\EntityType.cs(532,0): at Microsoft.Data.Entity.Metadata.EntityType.RemoveForeignKey(ForeignKey foreignKey)\n    Metadata\\Internal\\InternalEntityTypeBuilder.cs(909,0): at Microsoft.Data.Entity.Metadata.Internal.InternalEntityTypeBuilder.RemoveForeignKey(ForeignKey foreignKey, ConfigurationSource configurationSource)\n    Metadata\\Internal\\InternalRelationshipBuilder.cs(929,0): at Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder.ReplaceForeignKey(InternalEntityTypeBuilder principalEntityTypeBuilder, InternalEntityTypeBuilder dependentEntityTypeBuilder, String navigationToPrincipalName, String navigationToDependentName, IReadOnlyList`1 dependentProperties, IReadOnlyList`1 principalProperties, Nullable`1 isUnique, Nullable`1 isRequired, Nullable`1 deleteBehavior, ForeignKeyAspect aspectsConfigured, ConfigurationSource configurationSource, Boolean runConventions)\n    Metadata\\Internal\\InternalRelationshipBuilder.cs(882,0): at Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder.ReplaceForeignKey(ForeignKeyAspect aspectsConfigured, ConfigurationSource configurationSource, InternalEntityTypeBuilder principalEntityTypeBuilder, InternalEntityTypeBuilder dependentEntityTypeBuilder, IReadOnlyList`1 dependentProperties, IReadOnlyList`1 principalProperties, Nullable`1 isUnique, Nullable`1 isRequired, Nullable`1 deleteBehavior, Boolean runConventions)\n    Metadata\\Internal\\InternalRelationshipBuilder.cs(330,0): at Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder.DeleteBehavior(DeleteBehavior deleteBehavior, ConfigurationSource configurationSource, Boolean runConventions)\n    Metadata\\Conventions\\Internal\\CascadeDeleteConvention.cs(23,0): at Microsoft.Data.Entity.Metadata.Conventions.Internal.CascadeDeleteConvention.Apply(InternalRelationshipBuilder relationshipBuilder)\n    Metadata\\Conventions\\Internal\\ConventionDispatcher.cs(78,0): at Microsoft.Data.Entity.Metadata.Conventions.Internal.ConventionDispatcher.OnForeignKeyAdded(InternalRelationshipBuilder relationshipBuilder)\n    Metadata\\Internal\\InternalEntityTypeBuilder.cs(1421,0): at Microsoft.Data.Entity.Metadata.Internal.InternalEntityTypeBuilder.Relationship(InternalEntityTypeBuilder principalEntityTypeBuilder, InternalEntityTypeBuilder dependentEntityTypeBuilder, String navigationToPrincipalName, String navigationToDependentName, IReadOnlyList`1 dependentProperties, IReadOnlyList`1 principalProperties, ConfigurationSource configurationSource, Nullable`1 isUnique, Nullable`1 isRequired, Nullable`1 deleteBehavior, Boolean strictPrincipal, Func`2 onRelationshipAdding, Boolean runConventions)\n    Metadata\\Internal\\InternalEntityTypeBuilder.cs(1219,0): at Microsoft.Data.Entity.Metadata.Internal.InternalEntityTypeBuilder.Relationship(InternalEntityTypeBuilder principalEntityTypeBuilder, InternalEntityTypeBuilder dependentEntityTypeBuilder, String navigationToPrincipalName, String navigationToDependentName, ConfigurationSource configurationSource, Nullable`1 isUnique, Boolean strictPrincipal)\n    Metadata\\Internal\\InternalEntityTypeBuilder.cs(1109,0): at Microsoft.Data.Entity.Metadata.Internal.InternalEntityTypeBuilder.Relationship(InternalEntityTypeBuilder sourceBuilder, PropertyInfo navigationToTarget, PropertyInfo navigationToSource, ConfigurationSource configurationSource)\n    Metadata\\Conventions\\Internal\\RelationshipDiscoveryConvention.cs(96,0): at Microsoft.Data.Entity.Metadata.Conventions.Internal.RelationshipDiscoveryConvention.Apply(InternalEntityTypeBuilder entityTypeBuilder)\n    Metadata\\Conventions\\Internal\\ConventionDispatcher.cs(27,0): at Microsoft.Data.Entity.Metadata.Conventions.Internal.ConventionDispatcher.OnEntityTypeAdded(InternalEntityTypeBuilder entityTypeBuilder)\n    Metadata\\Internal\\InternalModelBuilder.cs(64,0): at Microsoft.Data.Entity.Metadata.Internal.InternalModelBuilder.OnEntityTypeAdded(InternalEntityTypeBuilder entityTypeBuilder)\n    Metadata\\Internal\\MetadataDictionary.cs(57,0): at Microsoft.Data.Entity.Metadata.Internal.MetadataDictionary`2.GetOrAdd(Func`1 getKey, Func`1 createKey, Func`2 createValue, Func`2 onNewKeyAdded, ConfigurationSource configurationSource)\n    Metadata\\Internal\\InternalModelBuilder.cs(47,0): at Microsoft.Data.Entity.Metadata.Internal.InternalModelBuilder.Entity(Type type, ConfigurationSource configurationSource)\n    Metadata\\Conventions\\Internal\\RelationshipDiscoveryConvention.cs(33,0): at Microsoft.Data.Entity.Metadata.Conventions.Internal.RelationshipDiscoveryConvention.Apply(InternalEntityTypeBuilder entityTypeBuilder)\n    Metadata\\Conventions\\Internal\\ConventionDispatcher.cs(27,0): at Microsoft.Data.Entity.Metadata.Conventions.Internal.ConventionDispatcher.OnEntityTypeAdded(InternalEntityTypeBuilder entityTypeBuilder)\n    Metadata\\Internal\\InternalModelBuilder.cs(64,0): at Microsoft.Data.Entity.Metadata.Internal.InternalModelBuilder.OnEntityTypeAdded(InternalEntityTypeBuilder entityTypeBuilder)\n    Metadata\\Internal\\MetadataDictionary.cs(57,0): at Microsoft.Data.Entity.Metadata.Internal.MetadataDictionary`2.GetOrAdd(Func`1 getKey, Func`1 createKey, Func`2 createValue, Func`2 onNewKeyAdded, ConfigurationSource configurationSource)\n    Metadata\\Internal\\InternalModelBuilder.cs(47,0): at Microsoft.Data.Entity.Metadata.Internal.InternalModelBuilder.Entity(Type type, ConfigurationSource configurationSource)\n    ModelBuilder.cs(115,0): at Microsoft.Data.Entity.ModelBuilder.Entity(Type type)\n    Infrastructure\\ModelSource.cs(72,0): at Microsoft.Data.Entity.Infrastructure.ModelSource.FindSets(ModelBuilder modelBuilder, DbContext context)\n    Infrastructure\\ModelSource.cs(49,0): at Microsoft.Data.Entity.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\n    Infrastructure\\ModelSource.cs(32,0): at Microsoft.Data.Entity.Infrastructure.ModelSource.<>c__DisplayClass8_0.<GetModel>b__0(Type k)\n    Internal\\ThreadSafeDictionaryCache.cs(34,0): at Microsoft.Data.Entity.Internal.ThreadSafeDictionaryCache`2.GetOrAdd(TKey key, Func`2 factory)\n    Infrastructure\\ModelSource.cs(32,0): at Microsoft.Data.Entity.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\n    Internal\\DbContextServices.cs(57,0): at Microsoft.Data.Entity.Internal.DbContextServices.CreateModel()\n    Internal\\LazyRef.cs(32,0): at Microsoft.Data.Entity.Internal.LazyRef`1.get_Value()\n    Internal\\DbContextServices.cs(70,0): at Microsoft.Data.Entity.Internal.DbContextServices.get_Model()\n    EntityFrameworkServiceCollectionExtensions.cs(104,0): at Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.<>c.<AddEntityFramework>b__0_5(IServiceProvider p)\n    at Microsoft.Extensions.DependencyInjection.ServiceLookup.FactoryService.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceProvider.ScopedCallSite.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceProvider.ScopedCallSite.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass12_0.<RealizeService>b__0(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\n    at Microsoft.Extensions.DependencyInjection.ServiceProviderExtensions.GetService[T](IServiceProvider provider)\n    EntityFrameworkServiceCollectionExtensions.cs(66,0): at Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions.<>c.<AddEntityFramework>b__0_0(IServiceProvider p)\n    at Microsoft.Extensions.DependencyInjection.ServiceLookup.FactoryService.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceProvider.ScopedCallSite.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceLookup.ClosedIEnumerableService.CallSite.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceProvider.ScopedCallSite.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceProvider.ScopedCallSite.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceProvider.ScopedCallSite.Invoke(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass12_0.<RealizeService>b__0(ServiceProvider provider)\n    at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\n    at Microsoft.Extensions.DependencyInjection.ServiceProviderExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\n    at Microsoft.Extensions.DependencyInjection.ServiceProviderExtensions.GetRequiredService[T](IServiceProvider provider)\n    DbContext.cs(169,0): at Microsoft.Data.Entity.DbContext.GetStateManager()\n    DbContext.cs(723,0): at Microsoft.Data.Entity.DbContext.SetEntityStates(IEnumerable`1 entities, EntityState entityState, GraphBehavior behavior)\n    DbContext.cs(742,0): at Microsoft.Data.Entity.DbContext.AddRange(IEnumerable`1 entities, GraphBehavior behavior)\n    Internal\\InternalDbSet.cs(71,0): at Microsoft.Data.Entity.Internal.InternalDbSet`1.AddRange(IEnumerable`1 entities, GraphBehavior behavior)\n    MusicStoreQueryTests.cs(33,0): at Microsoft.Data.Entity.InMemory.FunctionalTests.MusicStoreQueryTests.Music_store_project_to_mapped_entity()\n```\n\nWill leave as is for now and talk to you about this tomorrow.\n"""
3347,41304516,b'Could you add a comment saying why we do it this way?\n'
3355,41327411,b'Interesting. Should Hosting also add this as a singleton?\n'
3355,41327878,"b""It actually shouldn't make a difference.\n"""
3356,41332753,"b'Can we just create a default, parameterless constructor?\n'"
3356,41333018,b'Trivial test. We can just delete altogether.\n'
3356,41333466,"b""Thought about it - but I'd rather people used static InclusiveAll object for that.\n"""
3356,41333834,b'This is just wrapping `null`. We can safely assume a null reference for TableSelectionSet = include all.\n'
3356,41333941,"b""OK. I thought it wasn't obvious that a null would become an empty list. But I'm fine without it.\n"""
3333,41338497,b'using?\n'
3333,41351925,b'Fixed.\n'
3350,41440937,"b'Is it always uppercase NULL? Also, the style we use everywhere else is to put the string literal on the right of the operator.\n'"
3350,41442277,"b""Thanks. Yes, it is capitalized even if you put some different capitalization in the column definition. I'll change the order of the comparison.\n"""
3372,41462149,b'~~we have `IsPrimaryKey()` on key if it can be used.~~ would throw exception.\n'
3337,41213530,b'move TODO above OnDelete\n'
3337,41333189,b'You have [CanBeNull] but then Check.NotNull() on tableSelectionSet?\n'
3337,41333340,b'CreateStatement feels odd to me. Is there any way you can (in Sqlite) parse the CreateStatement into the info you need and store only that on Table?\n'
3337,41333461,"b'Yes, this is a good point. This is a carry-over from the previous implementation. It can be removed.\n'"
3337,41333504,"b""Are you looking at an outdated diff? This isn't in the changes anymore.\n"""
3337,41335943,"b""Are the setters required? Don't we always just Add() to the list?\n"""
3337,41341032,"b""I would like to hear what others think about having more of an object oriented domain model, e.g. Table could have a list of Columns and then Column wouldn't have schema, table and ordinal members (essentially what was implicitly proposed here: http://entityframework.codeplex.com/wikipage?title=Schema%20Information). \n\nAs it stands this seems to be a purely relational domain model of the relational model :smile: and I don't necessarily think that is bad thing, but I believe we should make an explicit decision.\n\nAlso, I wouldn't block this PR on this question at all (we can always change it if we decide we need to change it).\n"""
3337,41357970,b'@divega +1 for a object oriented model!\n'
3337,41408266,"b""For the sake of discussion I'll add here that using flat, DTO objects was deliberate. It keeps the code simple and makes it easier for our provider writers to plug-in to reverse engineering. EF provides the code to find the relationships between tables, foreign keys, columns, and indexes.\n"""
3337,41411794,"b'If we go with an OO model, we should make it consistent with the [Create/Add*Operation classes](https://github.com/aspnet/EntityFramework/tree/dev/src/EntityFramework.Relational/Migrations/Operations) in Migrations.\n'"
3337,41417941,"b'Does anyone have reasons for preferring an OO model? The more I consiter it, the more I prefer the flat DTO.\n\nIMO in the design-time scenarios, a completely OO model adds unnecessary complexity _for provider writers_. With OO, providers would need to also manage:\n- foreign keys that reference tables and columns not yet fetched (topological sorting)\n- principal tables that are referenced but filtered from selection\n- optimizing perf (implies...)\n  - having temporary dictionaries of columns and tables (thus avoiding `O(n)` lookup in a list)\n  - ensuring the dictionary keys are unique ids. e.g. schema, name, and table name\n\nThese are not impossible, but again, for what benefit do we get from OO? Why require all providers to duplicate effort to handle the scenarios above?\n'"
3337,41420121,"b""I don't have a strong preference so long as any OO model has weak binding between the objects such that it is easy to populate from the database schema without substantial sorting and/or multiple passes being required. From the discussions I have been in over past few months it seems like the flat DTO approach is probably the most pragmatic one--so I basically agree with @natemcmaster. However, I don't have a strong preference as long as what we end up with is easy to create and easy to consume.\n"""
3337,41422156,"b'@natemcmaster  great advocacy. If dto is the easiest to implement and requires minimal amount of provider code, I am all for it!\n'"
3337,41423655,"b""It is sad (and ironic) that we aren't using EF to do this.\n"""
3337,41426558,"b""+1, it makes sense on SQLite since they're retrieved via `PRAGMA` calls, but we should try to do it for MicrosoftSqlServer (issue #1667)\n"""
3337,41426802,"b'BTW, I had a prototype for testing [here](https://github.com/bricelam/EntityFramework/blob/migtests/test/EntityFramework.SqlServer.FunctionalTests/TestUtilities/InformationSchema.cs).\n'"
3337,41426950,"b'@bricelam Nice! Most other relational providers will work this way, too.\n'"
3337,41650129,"b""_tableSelectionSet doesn't work this way any more - you'll need to sync up and see `SqlServerMetadataProvider.AllowedBySelections()`\n"""
3337,41650258,"b'As discussed, when testing this will need to make sure datetime precision and numeric precision are both tested - as they are separate things in `INFORMATION_SCHEMA`.\n'"
3337,41650419,b'Nit: `TableSelection` and `TableSelectionSetBuilder` no longer exist. Need to sync up. Also not sure why the entries moved - but no big deal.\n'
3337,41650668,"b""Nit: I know they're commented out but shouldn't the return types for `OnDelete` and `OnUpdate` be the same?\n"""
3337,41650863,"b""Is this missing the table's schema name?\n"""
3337,41651164,"b""Would add a test where the foreign key has 2 or more columns. We've had bugs in that area before.\n"""
3337,41651334,b'There are no schemas in SQLite.\n'
3337,41651389,"b""I'll add a TODO. (This will be in the next PR.)\n"""
3337,41651406,"b'Yup, working on a rebase right now.\n'"
3337,41651602,b'Nit: default value of empty string may be allowed and be different from default value of NULL. Suggest changing this to only test for null.\n'
3337,41651870,b'Doh. Nvm.\n'
3337,41653325,b'Added a test :)\n'
3393,41671254,b'Thinking about this some more - will make `shouldAddNewLine` into member rather than passing it around.\n'
3393,41671440,b'Will remove. VS must have inserted it.\n'
3386,41672749,"b'Curious, why does composite not work?\n'"
3348,41581446,b'Can you make this smaller and use extension methods?\n'
3348,41581544,"b""By design that parameter type isn't interface?\n"""
3348,41581571,b'Can you just use the real one?\n'
3348,41584666,"b'The `RelationalParameter` type is only a poco, while the other classes have dependencies for type mapping, logging, ect. I could add an interface to the parameters if that seems like it would make more sense / for consistency.\n'"
3348,41584941,"b'The `AddParameter` versions could be replaced with a single version and a few extensions (i.e. `AddParameter(RelationalParameter)`). The other methods are just to expose `IndentedStringBuilder` methods, do you think we should rework them somehow?\n'"
3348,41585664,b'The real one brings along provider-specific dependencies and I was hoping to use this version as a basis for additional unit tests when the `SqlStatementExecutor` is removed. My thought here was to have a trivial implementation to allow fakes like the one in `ReaderModificationCommandBatchTest` without having to fully implement the interface.\n'
3348,41653703,"b""On closer inspection, the `AddParameter` methods depend on the `IRelationalTypeMapper` and couldn't be converted without exposing the service. There really aren't any obvious candidates for  conversion to extension methods.\n"""
3348,41654656,"b'Think logging. For methods below that have overloads, create a single version that handles all cases.\n'"
3348,41654868,b'Dependencies should be a detail of the impl.\n'
3348,41671783,"b""Don't need CanBeNull here.\n"""
3348,41671858,b'Can we change the name of the property to SqlBuilder or CommandTextBuilder?\n'
3399,41783948,b'Parens.\n'
3399,41784122,b'Typo\n'
3399,41784376,"b""Isn't counting also done in the base class?\n"""
3399,41785017,"b'Wow, this is a lot of setup code for enabling a few unit tests. Would have probably been better just to create simple functionals that use real providers. And if you are going to do this style, why not just use Moq and avoid a bunch of work?\n'"
3399,41788736,"b'This code does duplicate the counting in the base class. In #3145 we discussed the possibility of adding lifetime events or exposing the connection count in the `RelationalConnection`, but at the time we favored doing the counting in this class as a special case, rather than expanding the API surface\n'"
3399,41790259,"b'The FakeProvider classes do add a fair amount of code and they were originally something I wrote when more of the ADO objects were being passed around. I also spoke with @bricelam  at the time and I believe he noted that there are compatibility issues between Moq and Core and that we would like to get away from using it.\n\nIf we are getting away from Moq, I would expect these classes to be useful for other areas, such as `RelationalConnectionTest`, `ReaderModificationCommandBatchTest`, and any future relational unit tests that depend on provider implementations.\n\nWhile we could cover most of these scenarios in functional tests, we would end up with more tests like the `CommandConfigurationTest` that seem fairly fragile and tend to fall half way between unit and functional test\n'"
3414,41817010,"b""I don't understand why this is now needed or why it has to be this version (the EF runtime depends on 1.1.36).\n"""
3414,41817042,"b'Anyway, thanks for fixing if this was blocking the build.\n'"
3414,41817055,b'DNX picked up a new set of Roslyn packages earlier today. Perhaps that caused this issue?\n'
3414,41817567,"b""Makes sense. But it is weird. The reference wasn't even here before (was it picked up transitively from the runtime?) And the runtime still depends on 1.1.36, I think on purpose.\n\n@bricelam should probably take a look when possible.\n\nAgain, thanks!\n"""
3393,41892060,"b""How does this behave when there's default value for the property? or when it's getter only vice versa, etc.\n"""
3367,41426865,"b'Can this be combined with _simpleNameMappings, possibly with the introduction of a CLR type pn the RelationalTypeMapping? Otherwise the provider is still providing the mappings twice.\n'"
3367,41444832,b'`<space>`\n'
3367,41446109,"b'Actually, that was my first approach, but reverted to this when I realized the list of datatypes we support forwards and backwards are not the same.\n'"
3367,41447552,"b'Doesn\'t that mean we are either missing some mappings or one side or the other will have redundancy, which doesn\'t matter? For example, having a mapping for ""rowversion"" even though reverse engineering will never use it doesn\'t seem to be a problem.\n'"
3367,41448871,"b'Yes, I suppose it means we have some redundancy. On second thought and further analysis, we can reduce this.\n\nQuestion then. If we add a property `RelationalTypeMapping.ClrType`, should this always be true : `mapper.GetMapping(Type input).ClrType == input`? This will add some bloat to our current code.\n'"
3367,41449423,"b""The RelationalTypeMapping can be obtained from a number of inputs. If you ask for it from a CLR type and then look at the mapping, then you will see that it is for the CLR type. I think this is fine and don't really see it as bloat. To have an entirely separate dictionary of mapping information seems more like bloat to me. But maybe I am not understanding.\n"""
3367,41449732,"b""No, it's minor, bloat is the wrong word. I'll update the PR with changes.\n"""
3367,41530638,b'`IRelationalTypeMapper`?\n'
3367,41533979,b'Same difference. This is going to be pulled out in #3337 anyways.\n'
3367,41538158,"b""@natemcmaster @bricelam I would like to understand the philosophy around which design-time services are registered and how they are registered. My questions:\n- Do we expect runtime services to be available without them being added here, or are the two configurations completely separate? If we do expect runtime services to be available, then we shouldn't be registering the type mapper again.\n- Are we following the same pattern as for the runtime by always resolving contracts through contract interfaces and never through non-interface types? If so, then most of these registrations should be added as interfaces, and all constructors resolved by DI should only use interfaces.\n- How are we dealing with provider-specific services? Is it always true that only one provider will have services registered at a time? This isn't true for runtime services, so if we are using runtime services at design time, then it won't be true at design time either. Assuming it is not true, how do we select the correct service for the provider that is currently being used? At runtime, the UseSqlServer, etc. methods coupled with the scope of the context and the indirection delegates registered by the provider are used. Is this also what is used at design time?\n"""
3367,41575207,"b'> Do we expect runtime services to be available without them being added here, or are the two configurations completely separate?\n\nCurrently, we do not expect runtime services to be added, only services needed for design.\n\n> Are we following the same pattern as for the runtime by always resolving contracts through contract interfaces and never through non-interface types?\n\nNot yet. Currently we are inconsistent about this. Should we update?\n\n> How are we dealing with provider-specific services? Is it always true that only one provider will have services registered at a time?\n\nYes, only one provider. Design-time is invoked by the command line with the provider specified as a required parameter. Each provider adds the services they require.\n'"
3367,41575348,"b'Somewhat related: this PR will need to rebase against https://github.com/aspnet/EntityFramework/pull/3369 before merging, which improved design-time to use the startup convention used by other commands.\n'"
3367,41658254,"b'@natemcmaster Thanks for clarifying. I think we should only depend on interface contracts throughout the stack, so yes, I think the design time contracts should be updated, but this can be done as a separate work item. It should be done for RC because it is potentially public surface.\n'"
3367,41658875,b'Will add an issue to ensure all services follow this pattern. I just updated to use `IRelationalTypeMapper` instead.\n'
3367,41658905,b'In what situation can clrType be null?\n'
3367,41659070,b'Sqlite.\n'
3367,41659372,"b""Code for GetMapping seems to throw if it can't return a mapping, so why code here to handle it returning null?\n"""
3367,41659701,"b'Contract on interface says that typeName cannot be null, so either the contract is wrong, or this code is not needed.\n'"
3367,41660925,"b""This handles the empty-type oddity of SQLite's loose type affinities. We want to still return a default type mapping here.\n"""
3367,41661333,b'Will remove this redundancy.\n'
3367,41662156,"b'What does null mean? In other words, in what situation does null get set and how is that null value consumed?\n'"
3367,41662277,"b'So if it is acceptable to pass null to the method, then the parameter should be marked as CanBeNull in the contract and all implementors should honor that.\n'"
3367,41664587,"b'Another situation: (see [RelationalTypeMapperExtensions.cs](https://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework.Relational/Storage/RelationalTypeMapperExtensions#L11)) - a caller asks for mapping of a null object or of DBNull. It seems unclear to me when this would every be useful, but we already have it in our code. Should we remove?\n'"
3367,41664894,"b'I think `[NotNull]` is a better contract. SQLite is the one-off case. The situation I want to handle here is an empty string, not necessary null reference type. If you want, we can throw for null but let an empty string pass through. \n'"
3367,41675508,b'I would move the _nullTypeMapping singleton into the RelationalTypeMapping class and have it use a private constructor and then ensure anyone using the public constructor must pass in a CLR type.\n'
3367,41675832,"b""Sounds like a good solution. I'll add this.\n"""
3367,41675997,"b'If a caller can ever pass null and it not be an error, then the contract of NotNull is wrong. I think it is okay, but unusual, to not allow nulls (and therefore use NotNull) but still allow empty strings in this case.\n'"
3367,41891634,b'Something is wrong if we have to use exceptions to control non-exceptional program flow. It probably means we need to have a non-throwing way to get this information from the type mapper.\n'
3367,41892144,"b'We made a decision some time ago to consistently not use these attributes for return values. I can see why it makes sense to do so here, but that could be said of lots of other code too. I think we should either be consistent and not use the attribute here or revisit with the team the decision we made.\n'"
3367,41892566,"b'clrType needs a NotNull attribute. Did the API consistency tests not pick this up? If so, we should file a bug on that.\n'"
3367,41892642,b'Why CanBeNull here when base contract is NotNull?\n'
3367,41892735,"b""Agreed. I'll add a TryGet version.\n"""
3367,41893195,b'Missed this one. Will update.\n'
3367,41893248,b'Will add.\n'
3412,41792764,b'typo: `width`\n'
3412,41796472,b'Nit: typo -> Sanitizes\n'
3412,41796678,b'Nit: extra blank line\n'
3412,41805163,"b""Just a question. Why is this line not\n\n```\n_nameCache.Add(item, name);\n```\n\n? As it seems that there's no corresponding key exists in _nameCache\n"""
3412,41805506,b'This does the same thing.\n'
3412,41811174,"b""In this context I think [] is add or update if I remember correctly while .Add method would throw an exception. In single-thread scenario the code would do the same thing, given that you're already calling ContainsKey above. However, what would happen if someone call the method in multi-threaded code? Would one that is written by thread 0 be overwritten by another thread 1 silently? Just by looking at the method name, GetName I think people would assume it is thread-safe (i.e read-only operation) but it isn't.. Any thought?\n"""
3412,41811205,b'- Adding @lukewaters to the discussion.\n'
3412,41811446,"b""I don't think this matters. Even using `.Add()` does not guarantee thread-safeness in this section of code, which is why we have a our own utility class `ThreadSafeDictionaryCache`. \n"""
3393,41916424,"b'Nit: where the types are the same, using just one type argument has the same effect.\n'"
3393,41916524,b'Also remove these resources from the project.json file.\n'
3393,41917204,b'(nvm: we can do this when we actually support #3076)\n'
3393,41916805,b'~~Is it possible to have error messages _and_ to still scaffold the rest of the entity type? (to support #3076 )~~\n'
3398,41817593,"b""Although this is existing code, I wonder if this was discussed. That the 'async' is a keyword but used as a variable name here. Isn't there naming convention for this case? (conflict between variable name and keyword).\n- modified : adding @lukewaters to the discussion.\n"""
3398,41817787,"b'Assert.IsFalse(context.ChangeTracker.Entries().Any(), ""because ...."") reads better?\n'"
3398,41894701,"b""Can this get stale if the value is mutated in the ChangeTracker after the CompiledQueryCacheKeyGenerator is created? I'm not sure what the lifetime of the CompiledQueryCacheKeyGenerator is.\n"""
3398,41894765,b'Looks fine as it to me.\n'
3398,41895070,b'I think you are right. I have a test but obv something is wrong.\n'
3398,41895370,"b'In other words, do both of these work:\n\n``` C#\nusing (var context = new Context())\n{\n  context.ChangeTracker.TrackQueryResults = false;\n  var foo = context.SomeSet.ToList(); // Not tracked\n\n  context.ChangeTracker.TrackQueryResults = true;\n  var foo = context.SomeOtherSet.ToList(); // Tracked\n}\n```\n\n``` C#\nusing (var context = new Context())\n{\n  context.ChangeTracker.TrackQueryResults = false;\n  foreach(var e in context.SomeSet) // Not tracked\n  {\n    context.ChangeTracker.TrackQueryResults = true;\n    var foo = context.SomeOtherSet.ToList(); // Tracked\n  }\n}\n```\n'"
3398,41895950,"b'Yep, will add. The test I have uses two contexts.\n'"
3398,41896035,b'Why is AutoDetectChangesEnabled being disabled for all these tests?\n'
3398,41896735,"b""Just making consistent the way we do fixtures for query only tests. I guess we could remove them as it shouldn't affect perf in the read-only case, right?\n"""
3398,41898629,"b""I think we should remove them. It should not affect the perf or functionality if detecting changes isn't needed, and if somehow detecting changes is being used, then disabling it might mask a test or product bug.\n"""
3398,41916662,b'Will do.\n'
3305,41936248,"b""Seems like it's also logging sensitive data. Is it a concern?\n"""
3305,41957727,"b""Guidance on Diagnostic Source is that because all of this is occurring inproc, there aren't privacy concerns from a publishing standpoint. From a subscriber perspective, the owness is on them to insure that they meet privacy guidelines). Additionally, getting access to this data without Diagnostics Source is possible, it just takes a little more effort. Lastly, we are going through the process of getting similar event notifications put directly in ADO (timing is further out at the current time) and the same policy that I've mentioned for this context applies there. \n"""
3393,42026123,b'This is only for reverse engineering. We produce both getter and setter in the generated code. The customer is free to remove the setter once the code has been generated (along with any other changes) if that better suits their model. Default values are assigned via fluent API in the generated DbContext sub-class.\n'
3393,42026139,b'Will do.\n'
3393,42026168,b'Will do.\n'
3423,42056130,b'Please include the schema name for SQL Server tables.\n'
3423,42056602,b'Include schema name as above. This applies to any kind (error/warning/info...) of message for SQL Server.\n'
3423,42056848,"b'Add a comment here saying that for datetime types the ""precision"" is stored in the ""scale"" column.\n'"
3423,42057317,"b'Just checking: is this for the ""relational model"" or the ""codegen model""? For the codegen model property names can need to be uniquified too. E.g. 2 properties can clash if one is based on a column called `123Col` and the other is based on one called `_123Col`. So long as they make sure that they don\'t use names which are already in scope you should be fine.\n'"
3423,42057886,"b""How come we can't avoid this in the type mapping itself?\n"""
3423,42058061,"b""Feels like we should put out a warning that we can't locate the table on the principal end of the FK as well.\n"""
3423,42060849,"b'It\'s a quirk in how maxlength is handled by SQL Server\'s typemapper. Because this is specific to SQL Server, we need to override the base case. SQL Server\'s default type mapping for `System.String` is `nvarchar(max)` which does not equal `nvarchar` (which is actually `nvarchar(1)`).  In other words, `typeMapper(""nvarchar"").DefaultTypeMapping != ""nvarchar""`\n'"
3423,42061435,"b'We do, just not here. See `RelationalMetadataModelProvider.AddPrimaryKey`.\n'"
3423,42061519,"b'This is for the ""codegen"" model. I\'ll update so they are always unique.\n'"
3423,42061541,b'Will update.\n'
3423,42062968,b'OK.\n'
3423,42062985,b'Thanks.\n'
3423,42063540,"b""Sort of. There we say we can't find the primary key on a table. Here we are unable to find the table at the other end of a foreign key. Though it's likely that the latter is caused by the former I'd like to say what code generation does about it here. Maybe some message like:\n\n`For foreign key {fkDefinition}: unable to find principal table {principalTableName} in model. Skipping generation of foreign key.`\n\nBut feel free to add a TODO - don't let this hold up checking this in.\n"""
3423,42065805,b'How does that work? Is it something we should correct on the layer below?\n'
3423,42066770,"b""I don't thinkg EF/ADO.NET needs to do anything to represent DateTime with limited precision. This is here so the data type flows through to migrations.\n"""
3423,42067202,"b'@divega - it\'s a quirk of the SQL Server sys tables. Datetime precision gets stored in the Scale column. Weird, huh?! (BTW we didn\'t see it in INFORMATION_SCHEMA because those views have the concept of a DatetimePrecision column - and we used that instead). What I mean here is that the datatype we\'re producing has what would normally be called ""precision"" coming from the ""Scale"" column. That is _not_ a typo and I thought it would be good to have a comment saying so.\n'"
3423,42067913,"b""Ok, I might be missing context on this but:\n1. Although I know @bricelam filed a bug on switching from INFORMATION_SCHEMA to SYS, I haven't seen any solid argument yet to actually do it and I would like to understand better why we are doing it. \n2. I believe I am looking at SQL Server specific code and hence it seems that it is ok to compensate for a quirk here. Can you confirm that? Regardless, based on our recent conversations I am expecting the goal to be that that the code that translates from the database schema domain model to the IModel will be mostly common relational implementation. If that is really what we are trying to do then I believe the compensation from this quirk should happen in the layer in which we materialize the database schema domain model instances.\n"""
3423,42068025,b'Besides all that I agree with @lajones that a comment conveying why we have to do this would apply.\n'
3423,42150132,"b""@divega \n\n> Although I know @bricelam filed a bug on switching from INFORMATION_SCHEMA to SYS, I haven't seen any solid argument yet to actually do it and I would like to understand better why we are doing it.\n\nI believe the reasonsing was that sys.\\* tables adhere to the T-SQL standard.\n\n> I believe I am looking at SQL Server specific code and hence it seems that it is ok to compensate for a quirk here. Can you confirm that? \n\nYes, this is SQL Server specific. It would be trivial to put into the metadata layer, but as this seems like a typemapping issue, I left it in the part of code that actually does type mapping.\n"""
3423,42150531,"b""My mistake. I misread which lines you were commenting on. We catch the missing principal table with `RelationalMetadataModelProvider.LogFailedForeignKey` which goes something like:\n\n> Could not scaffold the foreign key 'dbo.DepTable (FkProp1)'. One of the referenced properties or the referenced table could not be found.\n"""
3423,42153311,b'May be more helpful to say what the referenced table and properties are. But no big deal. :shipit:\n'
3423,42153467,b'...would have been trivial to do with a flat DTO... :no_mouth: \n'
3305,42177730,"b""In case you're not aware of it, TelemetrySource is refactored as DiagnosticSource.\n"""
3439,42165550,"b""I vaguely remember a discussion on whether provider should still need to derive and have their own implementation (or was it their own interfaces?). Things have been in flux and I can't remember if this ended up being a concern or not. @ajcvickers would know.\n"""
3439,42166725,"b'It seems interesting to think about the code left in this class in terms of ""how do we get rid of it"". E.g. it raises a few questions:\n1. Should the datetime precision quirk be normalized in the schema reader so that we don\'t need to do it here?\n2. What is different about SQL server treatment of default values? Would it make sense to abstract that into a component that all providers can supply? \n3. Why do we need to special case timestamp here? Should reverse type mapping handle it?\n\nI see this as discussion items (possibly bugs) not blocking this PR.\n'"
3439,42180268,"b""> Should the datetime precision quirk be normalized in the schema reader so that we don't need to do it here?\n\nT-SQL maps 1:1 into `Table.Scale`. INFORMATION_SCHEMA does not. If we switch back, we should just be consistent about where this info is store.\n\n> What is different about SQL server treatment of default values? Would it make sense to abstract that into a component that all providers can supply?\n\nWe could abstract into a feature of reveng, but for now it is very SQL Server specific. @lajones should we  file an work item to abstract this?\n\n> Why do we need to special case timestamp here? Should reverse type mapping handle it?\n\nI'll update to move this into the metadata reader. It's trivial.\n"""
3439,42182267,"b""> T-SQL maps 1:1 into  Table.Scale . INFORMATION_SCHEMA does not\n\nRegardless of whether we do #3438 I still believe it is better to push the compensation down to the provider's schema reader. There is no strong need to have a 1:1 mapping if there is a quirk. You already have a ton of `CASE` statements in that SQL so it seems to be just a matter of getting the right ones! \n\n> We could abstract into a feature of reveng, but for now it is very SQL Server specific\n\nOk, I will wait for the bug. \n\n> I'll update to move this into the metadata reader. It's trivial.\n\nWhy is this not a type mapping concern? Do we fundamentally lack the ability to have database types that are synonyms or something?\n"""
3439,42183223,"b'> Why is this not a type mapping concern? Do we fundamentally lack the ability to have database types that are synonyms or something?\n\nNo, typemapping works fine. We have alias support. This was just a matter of getting `ValueGeneration` set correctly in the IModel.\n'"
3439,42183331,b'Should we abstract an interface for `MetadataModelProvider` then?\n'
3439,42184981,"b'Got it. That makes sense to me now. \n\nNow what is confusing to me is that `SqlServerMetadataReader` currently seems to [handle timestamp and not rowversion](https://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework.MicrosoftSqlServer.Design/ReverseEngineering/SqlServerMetadataReader.cs#L158) :smile: \n\n``` C#\nIsComputed = reader.GetBoolean(12) || dataTypeName == ""timestamp"" \n```\n\nI don\'t even understand why this is `||` as opposed to `&&`.\n'"
3439,42185823,b'Talked to @natemcmaster in person and that part makes more sense to me now. Thanks!\n'
3431,42069852,"b'this seems a bit sketchy, but not sure if there is better (cannonical) way of doing this - two visitors working on one expression tree, sharing some state\n'"
3387,41686845,b'Would\n\n```\nif (clrProperties.Any()) \n```\n\nread better?\n'
3387,42050391,b'PropertyMappingValidationConvention?\n'
3387,42052743,b'Use GetRuntimeProperty(clrProperty)\n'
3387,42053369,b'You could move this check to IsCandidateProperty\n'
3387,42162159,b'Do you mean inside `IsCandidateProperty` function? Filtering out Interface type properties since we do not add them to model.\n'
3387,42165044,"b'Yes, since we would not add them to the model then they are not candidates and thus should be filtered out early.\n'"
3387,42166709,"b'Sorry, I haven\'t looked at the code closely, just seeing the comments. When you say ""we would not add them to the model"" does this mean we throw indicating we don\'t know how to map them? I think the only thing we should silently ignore (not map) based on our current thinking would be read-only non-navigation properties, since these are likely to be computed properties and we think in the majority of cases the application would want them not mapped. (Although it could be argued that we also throw for these.) For every other property that we can\'t map we should throw unless it is explicitly ignored.\n'"
3387,42171921,"b'@ajcvickers So you think we should throw on properties of interface or abstract type, private properties, etc.?\n'"
3387,42174549,"b""@AndriySvyryd Private properties, probably not. The idea is to throw on anything that the user might reasonably expect to be included in the model but isn't because of limitations in what we can map. So, things that are likely intended to be navigation properties, but aren't mapped as such, then yes. Maybe we should get together and figure out whether to throw or ignore for various cases so we are all on the same page. //cc @rowanmiller @divega \n"""
3387,42191161,b'Micro-optimization :wink: \n'
3305,42209472,b'Yep see #3422\n'
3447,42262693,b'Anyone mind if I make this public and add some unit tests?\n'
3447,42269221,"b'Nope, go ahead. This is going to be moved in to commands anyways when we do the big RelationalDesign => Scaffolding rename.\n'"
3463,42400464,"b'We decided to not use these attributes for return values. We should be consistent about that, or we should revisit that decision.\n'"
3463,42417544,b'Removed\n'
3449,42398925,"b""It feels like we're repeating the code from `KeyConvention` here - with the risk that the two pieces of code get out of sync. We used to have a method in `KeyConvention` which defined when it would automatically decide to add `ValueGeneratedOnAdd()` and here we just consulted that method. I'd like to go back to doing that.\n"""
3449,42400024,b'Agreed. This would be cleaner. Will do.\n'
3449,42403385,b'Sounds good. :shipit:\n'
3449,42438956,"b""FYI - I'm adding as a TODO due to upcoming changes in conventions proposed today by Andriy.\n"""
3481,42443830,b'file name changes. also for other classes.\n'
3481,42520099,b'Done\n'
3480,42442428,"b""This could be generalized to relational as extension method instead, rather than changing the current inheritance of our metadata readers. Until we finish #3438, let's not provide a class by this name.\n"""
3478,42446718,b'Is there a way we can do this in providers since primitive type support is tied to providers?\n'
3478,42526831,b'Perhaps a better method is to expose a utility class publicly and let providers pass in their primitive types.\n'
3478,42569298,"b'I like that. Also, I kept mulling on it after our in person discussion and here are some of my thoughts:\n- The goal is to make .NET Native support as transparent as possible to application developers (as opposed to provider writers)\n- I would like to see providers do whatever they need to do so that their valid primitive types are supported in .NET native in code that is near/related to their type mapper\n- If we do this for some well known set of types in the core it actually increases the chances that providers are just going to miss that they need to do it for all the types they support in their type mapper until they have some customer trying to use a particular type that is not part of the subset on .NET Native.\n'"
3478,42569566,b'@divega I added some of the related actionable items of these in https://github.com/aspnet/EntityFramework/issues/623#issuecomment-149737147.\n'
3492,42566018,b'Consider inlining Check call and using expression body.\n'
3482,42574680,"b""that's a problem, I will fix this in some later checkin, the expression printer should be handling all the Expression nodes that appear in the query\n"""
3504,42715520,b'redundant OR\n'
3504,42722564,"b""Yes. This was a quick fix for the CI and I suspect @pranavkm did it with a script. I think we should do a pass over the TFMs and #ifs we have in our code and make sure we don't have less or more than what we need. We should revisit if we need to add back plain .NET 4.5.\n"""
3504,42735999,b'@divega Does that mean that you no longer support a provider targeting .NET 4.5 plain? (Like the SQLCE provider currently does) ?\n'
3504,42750394,"b""I think it should actually mean that EF itself requires 4.5.1. An ADO.NET provider built for 4.5 should still work since the provider model was extended in compatible ways and there shouldn't be any problem loading it in .NET 4.5.1.\nBut regardless, this may be just a temporary change while we stabilize things using the new framework monikers across all of the Microsoft.Extensions.\\* packages. Stay tuned.\n"""
3504,42764643,"b'I mean that the EF.SqlServerCompact40 package only requires 4.5 currently! But maybe I need to change that to 4,5,1?\n'"
3442,42651103,b'This looks strange\n'
3442,42651362,b'I think it might just be a case of renaming this to make the consuming code look less strange.\n\nDataReaderHolder or something like that.\n'
3442,42653933,b'maybe DataReaderContext? The pattern seems consistent with DbContext in terms of being a scoped disposable with the expectation of cleanup on related items.\n'
3442,42654808,b'Keep in mind a pattern such as _[MethodName]Result_ for naming this.\n'
3442,42655183,"b'With the proposed name change and a rename on the property, would this look more reasonable?\n\n``` cs\nusing(var readerContext = await command.ExecuteReaderAsync(_connection, cancellationToken))\n{\n    while(readerContext.Reader.ReadAsync(cancellationToken)\n    {\n        // ...\n    }\n}\n\n```\n'"
3442,42655997,"b""BTW, `ExecuteReaderResult` that has a Reader property seems strange too, but maybe it is the method that needs a rename since it is currently called `ExecuteReader` after the object that it is supposed to return. We could break with ADO.NET (I don't think aligning has ever been a goal) and call it something else, e.g. something like `ExecuteQuery` (symmetric to `ExecuteNonQuery`) and then the return type could be something like `QueryResult` which would be an IDisposable and contain a Reader property.\n"""
3442,42675689,"b'What about move a few of the common methods like Read/ReadAsync up to the RelationalReader but keep the DbDataReader property for advanced consumption, such as with query?\n'"
3442,42676643,b'Not sure it is worth doing. It seems that we would need to add field access to it as well for any meaningful consumption to work without dropping down to the DbDataReader.\n'
3442,42678671,b'Agree but we only do the meaningful consumption inside ValueBuffer factories and so that part is essentially opaque. I.e. we call Read and then just hand-off the underlying reader.\n'
3442,42686870,"b""That's also true for `AffectedCountModificationCommandBatch`, but `HistoryRepository` is using `GetString` off of the reader itself. Not really a huge deal, but there's no ValueBufferFactory involved.\n"""
3442,42687921,"b'Yeah, agree it would be fine to just leave Migrations as is.\n'"
3442,42692612,"b'I had a quick chat with @anpete and we ended up coming back (full circle) to believe that this class it is alright the way you have it here. `RelationalDataReader` as a name is consistent with other relational wrappers we have created which are also ""partial decorators"" that layer some functionality over the underlying ADO.NET object they hold. On consumption you would still get the underlying `DbDataReader` and call `Read[Async]()` on it.\n'"
3442,42779100,"b""I was still in favor of lifting the ReadX methods in our discussion :smile:\n\nBut I don't feel strongly about it. Will leave it up to @mikary \n"""
3442,42781835,"b""I think it's pretty good where it is now and we're down to the point of grooming the API surface. After this PR we should be able to API review all of the commands related code we skipped over in previous reviews.\n\ncc @rowanmiller \n"""
3500,42687852,b'This actually runs the model built conventions and not validate the model. ModelValidator is called from different place.\n'
3500,42690483,"b'Perhaps a silly question... why is it called ""Validate"" then? :smile: \n'"
3500,42691860,"b'I think when first time Model Built conventions were added, it used to verify that composite PK is not set by Data annotations. Now the conventions ran from here are - `KeyAttributeConvention`, `ModelCleanupConvention` & `PropertyMappingValidationConvention`.\nSome of them does validation though `ModelValidator` is different from this since ModelValidator runs on IModel, while this runs on ModelBuilder.\n'"
3500,42774564,"b'@AndriySvyryd tells me this method is going away, so I will just remove the docs for the moment\n'"
3500,42777665,"b'This is not true anymore. It will be the same instance, so this paragraph can probably just go away. The way it works now is that the DbContextOptions itself is immutable. When the builder operates on it, it creates a new DbContextOptions with the changes applied to it. I think the practical upshot of this is that it will ""just work"" as expected, even when both passing in a DbContextOptions and doing something to it per instance in OnConfiguring, which is why this paragraph can go away.\n'"
3504,42789156,"b'No. We need this. Using ""-*"" for system packages breaks UWP.\n'"
3512,42791863,b'If this path is hot then consider de-linqing.\n'
3512,42792467,b'It is currently 1% of total time. I am still looking at other changes.\n'
3441,42200422,b'this part would fix #3161 ?\n'
3441,42200454,b'correct\n'
3441,42200796,"b'Probably a silly question, but why not always use `DeclaringEntityType`?\n'"
3441,42203726,"b""That's a good question and the reason is discriminator properties.\n"""
3441,42271848,"b'I see... but discriminators and keys are not the only cases of properties that are associated to value generators, are they? Should we explicitly store in the model if the generator is supposed to be associated with the type or the whole hierarchy?\n'"
3441,42281278,b'Talked to @AndriySvyryd offline. Apparently right now it is not easy to setup things for value generation outside of keys and discriminators so this assumption should work.\n'
3505,42718352,b'Do we drop newValue and oldValue from the calling method?\n'
3505,42782157,b'That would require changing the interface. @ajcvickers would know better if we wanted to do that.\n'
3505,42782841,"b'Why are we making these changes from strong Navigation parameter to weak string parameter, strong ForeignKey parameter to weak property list parameter, and so on? Is this really all part of the same change?\n'"
3505,42783291,"b'The effective parameter strength is the same, since the only thing we used from it is the id value. Passing in just the id makes implementing the interface easier and the API more consistent.\n'"
3505,42783900,"b'I assume that once other changes related to configuration source are made then these will not be nullable. Also I have never seen ""new: used in an interface like this. I hope there aren\'t any gotchas. ;-)\n'"
3505,42784307,"b""I don't think we need to change the interface at this time. It's internal anyway, so it doesn't really matter.\n"""
3505,42784388,b'Correct. `new` works just as one would expect as far as I can tell.\n'
3505,42795637,"b""I asked originally because I was surprised the parameters didn't matter anymore and wanted to make sure this change was intentional. If you guys know why it is ok to drop the parameter values on the floor, then no problem.\n"""
3505,42796465,"b""It's okay because they are not being used in ForeignKeyPropertyChangedAction.\n"""
3522,42822337,"b'This is going to lead to NullReferenceExceptions. In this case (and others), the ""Get"" method doubles as an assertion.\n'"
3522,42822690,"b""Yes, we decided that NRE is ok if it's caused by a bug in our code.\n"""
3522,42822814,"b'In this case, it is not a bug, but expected behavior. This is easy to get around by adding a check for null after calling .Find, but it needs to be there for scaffolding to work correctly. Did testing not catch this?\n'"
3522,42822949,"b""In that case I'll add null checks and remove code that catches the exceptions.\nTests are still running.\n"""
3520,42816748,b'This is specifically used for the Diagnostics handler. \n'
3520,42816786,"b'SQL is relational-specific. Fine to say ""compiled"" here.\n'"
3520,42817014,"b'""from a"" -> ""representing""\n""is"" -> ""was""\n'"
3520,42817495,b'I think this can go away now that the whole query is either tracking or not - I will remove.\n'
3520,42817623,b'Describes the execution expression resulting from LINQ query compilation.\n'
3520,42817666,b'related data -> Navigation properties\n'
3535,42925434,"b'Rather than have the two refs, just make this method product the completed EqualExpression. Also can be a static method.\n'"
3509,42922869,"b'Feels like we should log a warning here: ""Unable to find table XXX for index YYY"".\n'"
3509,42922961,b'When does this happen? Is there a warning logged for it?\n'
3509,42923100,"b""Do we have a bug logged for using KeyConvention? IIRC it's not just that the PK consists of 1 column - it's also that the column has to be of a specific set of types?\n"""
3509,42923233,b'Added as a TODO on https://github.com/aspnet/EntityFramework/issues/3454\n'
3509,42923281,b'The base implementation will log when it encounters an error and return null. This is just passing this failed condition up the call stack.\n'
3509,42923349,"b'I think we use OperationException. Also exception messages should be localized. Also there is no workaround - so I think the exception should say something like ""Contact your provider and tell them that they must define the UseProviderMethodName in the XXX method of their YYYY class.""\n'"
3509,42923576,b'Add the name of the referenced table.\n'
3509,42923694,"b""This is a provider-writer-time exception. Users should never see it. I'll add clarification that provider-writers need to add an annotation.\n"""
3509,42923752,"b""Make sure there's a bug for this.\n"""
3509,42923817,"b""This is for when the table was filtered. We don't know the name.\n"""
3509,42923844,"b""Shouldn't this line be referring to `modelBuilder` and be at the start of the method?\n"""
3509,42923873,b'https://github.com/aspnet/EntityFramework/issues/3456\n'
3509,42924084,"b""I thought we'd fixed this. Can't we put this test back in? Just expect a comment in the `DbContext` file instead of an EntityType.cs file?\n"""
3509,42924165,b'Yup. Missed this in refactoring.\n'
3509,42924455,b'Why? It doesn\xe2\x80\x99t test anything not covered in other tests.\n'
3509,42924458,b'Sounds good.\n'
3509,42924609,"b'Sounds good. But I still think we\'re supposed to localize. Also shouldn\'t it be ""Cannot scaffold ..."" rather than ""Cannot scaffolding ...""?\n'"
3509,42924816,b'https://github.com/aspnet/EntityFramework/issues/3534\n'
3509,42924835,"b""Are we throwing this too late then? Can we instead throw back where we construct the ForeignKeyModel with the null PrinicpalTable - we know it's going to cause problems later and at that point we know what the sys tables are telling us the table on the other end of the FK is. Then we can include that in the message to the user warning that perhaps it was filtered out by the table selection.\n"""
3509,42924859,b'Updated.\n'
3509,42925059,b'I don\xe2\x80\x99t think that is useful information to output on the console. The user already knows about filtered tables/schemas as they are specified on the command line.\n'
3509,42925450,"b""I think you're basing this on the fact that part of this tested the commented out the NavProp which has gone away with this fix - but we are planning to fix that at which point we'd need this test again. And in any case the scenario remains valid. Otherwise where do we have coverage of generating a class where there is a FK which refers to it but the target of the NavProp is in a class which we are not generating because of an error?\n"""
3509,42925706,"b'I\'m not suggesting outputting the filters themselves, but the table that you were trying to target does seem like useful information. A warning message such as ""Could not scaffold the foreign key {FKname} because its target table {principalTableName} is not included in this model. Was it filtered out by the table selection?"" makes the user go ""Oh yes - I should just include that table in my filters"" which seems more useful to me.\n'"
3509,42925863,"b'We seem to have removed the reason why we couldn\'t generate the entity type. Is this necessary because you are generating this message in a different part of the code now and so don\'t have that info? If so could you add ""Please see the warning messages."" to the end? I like messages to guide the user towards what to do to fix the problem rather than just state that there is a problem.\n'"
3509,42926259,b'Updated. Restored the test and updated error messages.\n'
3509,42926610,"b""Well this wasn't quite what I wanted but I understand you want to get this in so go ahead for now. But could you add revisiting this to one of the bugs you raised or a new one please?\n"""
3558,43014157,"b""Don't we need to use the RTM package versions?\n"""
3558,43015429,b'I essentially undid the changes from my previous commit: https://github.com/aspnet/EntityFramework/commit/7e0ba479a2cc1242ff7d6688687a740bd8a606f4#diff-0346fce18fd5fb2d9f6971bfa089439aL28\n'
3558,43016971,"b""Ok. We may need to change this in the future, but SqlClient doesn't work on UWP anyways right now.\n"""
3504,43027248,"b""Won't this break installing on net451? The design-time facades shouldn't be listed in the nuspec\n"""
3504,43027313,b'(But they were needed on DNX)\n'
3531,42921346,"b""I'll be sending a PR to remove `originalValue` parameters shortly.\n"""
3531,42924513,b'@ajcvickers turns out we do actually use these to get key values for deleted entities https://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework.Relational/Update/Internal/CommandBatchPreparer.cs#L216.\n'
3531,42926015,"b'Should reference `cref=""DatabaseErrorLogState""` instead.\n'"
3531,42929858,"b'""a database""\n'"
3531,43021254,"b'Typo: ""not"" => ""no"". Also, maybe consider prefixing with the word ""Warning:""?\n'"
3504,43027992,b'Why does listing these as framework references break on net451?\n'
3504,43028098,b'yes it will\n'
3504,43028159,b'Tho I dunno if all break. System.Runtime certainly does\n'
3504,43028452,"b""What's the fix here - add a separate `DNX451` node?\n"""
3504,43029004,"b""Please don't break .NET 4.5.1...\n"""
3518,43033544,"b'Wait, we still need to cancel the async call in this case...\n'"
3504,43037684,"b""Yes, that's one of the main reasons we had both net45 and dnx451 listed\n"""
3504,43038413,"b'@davidfowl wants to fix this in DNX as a pack time gesture. @davidfowl, would this be an appropriate work item to track this issue: https://github.com/aspnet/dnx/issues/2031?\n'"
3562,43045945,"b""Use LazyRef instead since it is lightweight and this doesn't need to be thread-safe. But, there really isn't any point in doing this--the Lazy/LazyRef allocates an object anyway, so if we want to return the same instance every time, then just create it eagerly. If it's okay to create a new instance when asked for, then do that, and consider making a method rather than a property.\n"""
3562,43046405,"b""It's nice not to create them when we use this internally, so I'll just go with the new instance each time and we can optimize later if needed.\n"""
3518,43054342,b'Fixed in #3567\n'
3569,43066552,"b'@ajcvickers can you read over this and IsReadOnlyAfterSave, IsStoreGeneratedAlways, ValueGenerated, and RequiresValueGenerator to make sure I have them accurate.\n'"
3569,43066675,b'IModel\n'
3569,43070635,b'This reads more like no action than restrict.\n'
3569,43146869,"b'Note that this is now not only when the principal is deleted, but also when the relationship to the principal is severed even if the principal is not deleted.\n'"
3571,43147535,"b'Nvm, was looking at the wrong section.\n'"
3571,43147466,"b""~~Shouldn't all the framework assemblies be specified like this one? (this is how we had it in https://github.com/aspnet/EntityFramework/blob/36c7ef55036b02792657563786fba4f0b59e4ebf/src/EntityFramework.Core/project.json#L48)~~\n"""
3569,43147600,"b'IsReadOnly ones sound good. One minor point is that the exception is not thrown until SaveChanges is called, but what you have is pretty clear and I would err on the side of clearness rather than detail.\n'"
3569,43147928,b'They all look good to me.\n'
3579,43192688,b'Nit: refactoring safeguard: use `nameof()`\n'
3579,43192999,b'Nit: line breaks for each call in the chain?\n'
3579,43196068,"b""I'll add this to #3394.\n"""
3579,43196104,b'Good point. Will do.\n'
3580,43221757,"b""if this is a hot path don't use async keyword and don't use a lambda\n"""
3580,43283171,b'Not looking at this path...yet :-)\n'
3568,43201025,b'Why not use LazyInitializer?\n'
3568,43201165,b'Why not use LazyInitializer?\n'
3568,43201745,b'What is the advantage?\n'
3568,43201885,"b""I don't think these should be part of this interface. They are redundant and are really just for perf improvement.\nAs we've discussed previously a cleaner way of adding perf API is through optional interfaces. An extention method would try to cast to it and get the value or fallback to calculating the value if the interface isn't implemented.\n"""
3568,43215189,b'1) Using a built-in (and recommended) lazy-initialization primitive instead of rolling our own.\n2) Having a consistent pattern for such initialization -  we use LazyInitializer elsewhere.\n3) Making our code easier to understand.\n'
3568,43285883,"b""Yep, especially because these presumably don't apply to shadow props?\n"""
3568,43288038,"b'@AndriySvyryd @anpete Can you guys remind me what the pattern is that will satisfy the following:\n- Be fast--i.e. avoid dictionary lookup, etc.\n- Be thread safe\n- Work even if the implementation of IProperty is not our implementation\n'"
3568,43293620,"b""Our `Property` would implement this like in this PR.\nFor other implementations that don't implement the new interface we'll fallback to calculating the value without any caching. This would be slow, but just as functional. And they can easily copy our implementation to get the perf.\n@divega Are you ok with this?\n"""
3568,43295359,"b'As far as I can understand it and if is it fast enough, yes... I think an extension method that tries to cast to an optional interface and falls back to the slow implementation is a generally good pattern.\n\nIf I am missing something, can we discuss this in person?\n'"
3568,43295820,"b'This is what the code is now:\n\n``` C#\nprivate volatile IClrPropertyGetter _getter;\n\npublic virtual IClrPropertyGetter Getter\n    => _getter ?? (_getter = new ClrPropertyGetterFactory().Create(this));\n```\n\nThis is what I have with LazyInitializer:\n\n``` C#\n// Warning: Never access this field directly as access needs to be thread-safe\nprivate IClrPropertyGetter _getter;\n\npublic virtual IClrPropertyGetter Getter\n    => LazyInitializer.EnsureInitialized(ref _getter, () => new ClrPropertyGetterFactory().Create(this));\n```\n\nThe LazyInitializer version is about 25% slower for the case where it is already initialized. Breaking the inline lambda out into a method does not have any impact on performance.\n\n@divega Which would you prefer?\n'"
3568,43296481,"b'@divega What do you mean by, ""if it is fast enough""? Do you mean if the slow implementation is fast enough or if the fast implementation is fast enough? The fast implementation should be almost as fast as the current implementation (additional method call and cast). The slow implementation will probably be between 2-3 orders of magnitude slower.\n'"
3568,43296728,"b""I mean if the cost of having to cast to the optional interface and any other overhead associated with the implementation of the extension method doesn't dilute the optimization. \n"""
3568,43297060,"b'And yes, I imagine in this case it will be fine, but the pattern might not be applicable in other situations if the optimization is not as significant. \n'"
3568,43302448,"b""@ajcvickers Need more information. What is the incidence of this 25% slowness in the overall path you are optimizing with this? Is it the same in 32 and 64 bits? Same across CoreCLR and .NET? \n\nMy main concern with the volatile approach is that I personally don't know if it is safe to use across all architectures (see #960) and without knowing for sure I would stick to not rolling our own. But if you have done the groundwork to be confident that it is the case then I am fine with it. \n\nBesides that, based on what I have read I am a bit surprised that LazyInitializer is slower. It uses [`Volatile.Read<T>()`](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Threading/Volatile.cs#L189) which is supposed to be able to leverage at runtime an implementation that is optimized for the platform and architecture. My only guess is that at this level of granularity a few levels of method calls might be have a higher incidence on the execution time than the perf of the memory barrier itself.\n"""
3581,43204383,"b""Shouldn't this be `BaseType?.GetNavigations()` ?\n"""
3581,43204656,b'Yes! Will add a test.\n'
3581,43212635,b'Name :smile: \n'
3581,43218789,b'Question: Why this is `IEnumerable` with yield when there can be only 1 navigation in each direction for given foreign key?\n'
3581,43221968,b'I am open to suggestions\n'
3581,43221993,"b""Because here I want an empty IEnumerable if there's no navigation instead of one with a null\n"""
3591,43321802,"b'Just checking: did you mean ""Required"" here? Elsewhere you use ""Required All""\n'"
3591,43322062,"b'Intentional. ""Required All"" is not a valid option for MethodInstantiation\n'"
3591,43323635,"b""OK. As far as I'm concerned :shipit: - but you should probably get at least one more pair of eyes to look at this.\n"""
3589,43312050,b'Typo: projet -> project. And same in a few more places below.\n'
3589,43315448,b'Doh. :smile: \n'
3589,43315525,b'Not unixy enough.\n\n`--target-project`\n'
3589,43316723,"b""I'll send a PR to kabob-case all the things.\n"""
3572,43207120,b'Why are you changing this?\n'
3572,43208220,b'You can make this check faster:\n\n```\nif(!property.DeclaringEntityType.IsAssignableFrom(entityType))\n```\n'
3572,43208565,"b""This test can be removed, we don't test argument validation anymore\n"""
3572,43210657,b'I will revert this for current PR. Filed #3583\n'
3614,43562450,"b'I think the second clause here could be simplified to say `When called on inherited properties or derived entity types, this entity type may be different from the declared entity type on <paramref name=""property"" />`\n'"
3596,43361416,b':+1: \n'
3632,43689936,"b""Nit: I'd add a note explaining that the DbConnection can be either open or closed and that if it's closed the context will close the connection when it is disposed? (Assuming that that is still correct of course).\n"""
3628,43711903,b'bit of a bummer that this gets compiled in\n'
3628,43719042,"b'Yeah, but it does mean less to compile. If we want we can keep a string representation of the materializer ET around for this.\n'"
3641,43836959,b'Should property be used here? And a message?\n'
3641,43837261,b'Consider a struct\n'
3641,43842537,"b""This should never get called now, outside of an application error. I'm planning to remove in another checkin.\n"""
3641,43843092,"b""I don't think it's going to help making it a struct, but I'll look into it.\n"""
3653,43948804,b'remove\n'
3653,43948902,b'Will do.\n'
3653,43949851,b'break down into multiple lines\n'
3653,43950881,"b'apparently this check is built into the Update method, so we could remove it (applies to multiple places in the code)\n'"
3653,43951434,b'not so sure we are doing _optimal_ expansion for all cases where this is true\n'
3653,43955403,b'Will change. Changed some others to Update but missed that.\n'
3653,43955442,"b""It's relative here :-)\n"""
3653,43957195,b'Is the functionality of the result operator and the query annotation related? It seems like there should be a separation of concerns unless there is a benefit to this kind of factoring (i.e. updating the expression updates the annotations)\n'
3653,43957515,"b""Yes, the result operator is the implementation of the annotation. This simplifies things and also means that we don't incur an ET rewrite during query cache resolution.\n"""
3653,43959265,b'this check can also be removed\n'
3653,43959373,b'Done\n'
3494,42566688,"b""I think it would be worth discussing with @divega and @anpete whether or not we should introduce a non-relational connection concept just because we have a non-relational transaction concept. We had this in the past and I'm pretty sure somebody really pushed not to have it.\n"""
3494,42566734,"b'Also, IConnection and ITransaction are very general interface names. I wonder if we need something more specific to EF.\n'"
3494,42566944,"b""I'm still concerned that this no-op implementation gives the impression that transactions are supported by in-memory, which really they are not. Should we maybe log a warning, or even throw with a provider flag that could be set to allow no-op transactions? Would be interested to hear what others think.\n"""
3494,42567151,"b""We don't need `IConnection` for `ITransaction`. The concept of a transaction is not related to the concept of a connection. There might be a global transaction on some data stores.\nYou can check ad57ba065a049cde3cae7c4629ff9c48d1440661 for what we had before\n"""
3494,42567186,b'Does IRelationalTransaction have any value now? It seems to be an empty interface.\n'
3494,42567469,"b""Its a bit unfortunate that we need to do a cast here. I'm not sure of any way around it.\n"""
3494,42570710,"b""I agree with this. I don't feel strongly on whether this should be a warning or a error + opt out.\n"""
3494,42570873,b'Agreed with both @ajcvickers and @AndriySvyryd but I am finding it very hard to imagine good names for the types.\n'
3494,42571002,b'Feeling slightly inclined to do error + opt out option. It feels like a warning could be more easily missed. \n'
3494,42571562,"b""I am likely missing something but I couldn't find in either `Execute()` or `ExecuteAsync()` any place in which we are using the transaction as anything but `ITransaction`, which BTW is expected since `IRelationalTransaction` is now an empty interface (and should be removed).\n"""
3494,42572677,"b""Can't remember how we ended up exposing both the DbTransaction and I don't know that the introduction of the new interface changes anything, but I have to say it feels weird and I wonder if there is a better way.\n"""
3494,42572705,"b'The names of the properties also seem weird. It is like the word ""Current"" is missing there.\n'"
3494,42645271,b'@divega I think that would be my preference too. Would like to hear from @rowanmiller.\n'
3494,42645459,"b'Agreed, exception with a flag\n'"
3494,42656090,"b'It seems unnecessary and could be removed, but as you mention, we would still need a cast to `IAccessor` to access the DbTransaction\n'"
3494,42656890,"b""I'm not sure what this change would look like in terms of the `DatabaseFacade` if we kept the concept of connection out of core. We currently extend the facade through extension methods and it seems like we would have to add a `DatabaseFacadeFactory` if we wanted to customize the behavior at the provider level.\n"""
3494,42657573,"b""@mikary The DatabaseFacade method needs to get a service on which it calls BegingTransaction, but that service doesn't need to be the connection. I don't see how it requires any changes to the design of DatabaseFacade.\n"""
3494,42885620,b'You can remove the duplicated call to Check.NotNull on optionsBuilder.\n'
3494,42885741,b'Auto prop?\n'
3494,42886029,b'Possible InvalidCastException?\n'
3494,42886316,"b""Any reason we need to can't keep this property name? (IMO shorter is better)\n"""
3494,42888106,"b'@divega requested this change to alleviate confusion about the semantics of the transaction (i.e. new transaction, ambient transaction, etc.).\n'"
3494,42888269,b'Matching the pattern from `RelationalOptionsExtension` and using non-standard default value. I could go either way on this.\n'
3494,42889007,b'Sounds good. :+1: \n'
3494,42889214,"b""`public virtual bool ThrowOnTransaction { get; set; } = true`. Seems simple to me, but this is nit that won't prevent a signoff.\n"""
3494,42891831,"b""I don't love it but I think this should be called IDbContexTransactionManager :smile:\n"""
3494,42893178,b'Naming of SuppressTransactionException? @rowanmiller @divega \n'
3494,42893414,"b'Its a matter of not calling a virtual property from a constructor. I personally think this is a guideline we can break in some circumstances, but then again when there is a simple way of not breaking the guideline we may as well go with it.\n'"
3494,42893524,b'Message wording? @rowanmiller @divega \n'
3494,42893745,"b""I don't have any strong candidates in mind but one idea would be to call it IgnoreTransactions. Currently it will flip between the exception and no-op. If anyone every makes InMemory transactional it will flip between having actual transactions and not having them (for back compat).\n"""
3494,42893810,b'I think it is fine to throw only on BeginTransaction and assume that once they have got one of these then it is because they went through BeginTransaction with the exception disabled. Unless there is some other easy way of getting one of these that I am missing.\n'
3494,42894207,"b""Won't this, and other methods that use GetRelationalConnection, fail when using in-memory? That would mean that test code could not use these methods when testing against in-memory. Is that what we want?\n"""
3494,42894367,"b""Yeah, this seemed like a bit of overkill when I was writing it. Other than calling BeginTransaction, this class shouldn't be instantiated.\n"""
3494,42894538,b'Wording is similar to `RelationalStrings.AmbientTransaction`\n'
3494,42894574,b'Not a huge fan of this name. @divega @rowanmiller Any ideas?\n'
3494,42894762,b'I like IgnoreTransactions.\n'
3494,42904634,"b""I am not a fan either, but I proposed this name because I didn't like ITransactionManager any better. I can be convinced. Another thought that crossed my mind was to call this interface a factory which would imply the method name should be Create (we would still keep BeginTransaction on the top level API). But not sure it is a good idea.\n"""
3494,42905209,"b'Yep, factory and Create is good.\n'"
3494,42905322,b'Do we want to promote the concept of IsolationLevel to core?\n'
3494,43069613,"b'Reverted to `IDbContextTransactionManager` as the service is now responsible for holding a reference to the active transaction. The name `ICurrentTransaction` has been suggested, but that may cause confusion with the `RelationalConnection.CurrentTransaction` property that maintains a reference to an `IDbContextTransaction` instance\n'"
3494,43150290,"b""Don't need constructor; compiler generates automatically.\n"""
3494,43150483,"b'This uses FirstOrDefault, which implies the result could be null, but the null is never handled anywhere else.\n'"
3494,43150693,b'Factor into single return statement.\n'
3494,43150954,b'Not sure we should go as far as making a UseTransaction with a DbTransaction on relational behave as a BeginTransaction on other providers. @divega?\n'
3494,43152482,b'Inverse the if and drop the else.\n'
3494,43154680,b'Update: We agreed that UseTransaction() is only relational.\n'
3494,43159362,b'Should it be SingleOrDefault()?\n'
3494,43159409,b'Or First()?\n'
3494,43159493,b'Or Single()? :smile:\n'
3494,43161673,b'Nit: call this _dbTransaction or something to make it less confusing.\n'
3494,43185135,b'Looks like other places use the FirstOrDefault with null checking for extensions. Seems reasonable to check here\n'
3667,44062001,b'What is the reason for this replacement?\n'
3667,44062132,b'LF vs CRLF. The logger uses Environment.NewLine but git ensures this file is CRLF even on Linux.\n'
3667,44062362,b'What is different on mono?\n'
3667,44063011,"b'Setting builder.PersistSecurityInfo throws ""NotImplementedException"". PersistSecurityInfo is always true on Mono.\n'"
3667,44223325,"b""I had some newline-related issues as well (see #3116).\n\nShouldn't this trick be done in all tests?\n"""
3667,44300301,"b""@roji We'll need to add this trick to all files that use multiline verbatim strings. These small changes were focused only on getting the SQL Server testing working for local dev work. We will need to make many more changes to fully automate these tests to work on Linux. (See #3594 )\n"""
3702,44346617,b'private static readonly object NullSentinel  = new object();\n\nThis?\n'
3697,44353690,"b""I think we can just throw InvalidOperationException here. Pretty sure we decided in API review to get rid of the ModelItemNotFoundException and I don't think we want to bring it back.\n"""
3690,44314095,b'Add AttributeUsage for the cases we honor? (I think it is just method).\n'
3690,44315551,b'Will do.\n'
3690,44316237,b'So there is IQuerySqlGenerator and ISqlQueryGenerator? :confused:\n'
3690,44316460,b'OT: Consider naming of this method to something like `CreateDefaultSqlQueryGenerator()` should make it easier to understand the difference with `CreateFromSqlQueryGenerator()`.\n'
3690,44316929,b'Would this change affect providers?\n'
3690,44317157,"b'Possibly, they would typically derive from DefaultQuerySqlGenerator.\n'"
3690,44317261,b'With `Query` and `Sql` in whatever the right order is :smile: \n'
3690,44317343,b'Will improve this some more.\n'
3690,44317594,"b'I think I see usage of the interface name in the source code of our own provider, but it could be confusing the interfaces. If you can confirm we can tag this as providers-beware.\n'"
3690,44319281,"b'Yep, we should add the tag.\n'"
3690,44319793,b'Changed to CreateDefault and CreateFromSql per our factory naming pattern.\n'
3690,44320033,b'Much nicer! Thanks!\n'
3690,44351747,b'I was struggling to understand why it was ok to use inheritance here so I asked @anpete and it turns out this class is only used in the non-composable case (in which only a FromSql() call needs to be processed). Since we are making a breaking change for relational providers around the name of the class (and related methods) my preference would be to use a name that conveys that it only applies to the non-composable case. \n\nThat said if we are going to end up removing this type (which according to @anpete is a clear possibility) then I think this name is fine.\n'
3690,44353356,b'Renamed to FromSqlNonComposedQuerySqlGenerator. Added base class for QuerySqlGenerators and moved the FromSql generator to internal.\n'
3690,44354461,"b'I have mixed feelings about having one `RelationalCommand` type that supports two separate calling patterns at the same time:\n1. Pass parameters in constructor, execute once and discard\n2. Pass parameter metadata in constructor, execute multiple times rebinding parameter values each time\n\nPerhaps this is just clever and I need to wrap my head around it :smile: but it makes me wonder if having only the second option would be a forcing function for us to make other improvements where we use this class. I will file a bug.\n'"
3690,44354579,b'Agree we can move everything to fully separate construction from execution.\n'
3690,44358805,"b'I suspect using `RelationalCommand` in hybrid mode (i.e. passing non-null initial values in the constructor, then sometimes passing parameter values on the `Execute` methods) would break because any null value passed on `Execute` would be ignored in favor of the initial value (which could be different from null). I assume we are never really using `RelationalCommand` in ""hybrid"" mode, so it doesn\'t have any immediate consequence, but I took note of this in https://github.com/aspnet/EntityFramework/issues/3704 as another potential reason allowing both calling patterns may be broken.\n'"
3690,44358845,b'https://github.com/aspnet/EntityFramework/issues/3704\n'
3688,44201121,b'We need to use the actual parameter name\n'
3688,44207971,b'prm -> parameter\n'
3715,44483183,b'Should the rest be wrapped in a finally block?\n'
3715,44483318,b'Intentional?\n'
3715,44483326,"b'No, this will be handled by the iterator state machine.\n'"
3715,44483389,"b""Yeah, I'm adding the class to make profiling easier.\n"""
3715,44485507,"b""I don't understand why but OK if you do :smile: (anyway not sure what happened to the PR)\n"""
3723,44558611,"b""Debug strings shouldn't be resources. They'll just be a waste of space on Release builds.\n"""
3723,44559279,b':+1: \n'
3713,44594818,b'EntityTypeName? \n'
3713,44595298,b'Will do.\n'
3714,44479894,b'IsUnique should be removed\n'
3714,44480104,b'IsUnique should be removed\n'
3714,44480306,b'Negate and rename to IsInUse\n'
3714,44480564,"b""Shouldn't the keys be removed before the indexes?\n"""
3714,44481043,"b'rename parameter to ""unique""\n'"
3714,44481485,b'If unique is false this should also check for keys using this index and remove them.\n'
3714,44483002,"b""The ConfigurationSource check should be preserved. I'm surprised this hasn't caused a test failure.\nYou can add methods to get the ConfigurationSource.\n\nThis also applies to other places where _isUniqueConfigurationSource was being used.\n"""
3714,44485834,b'filed #3716 \n'
3714,44485996,"b""I don't  remember it being the intention that foreign keys, which define relationships in our metadata, would no longer control whether the relationship is 1:1 or 1:*. Does this mean that you can no longer have a 1:1 relationship in the model without also having an index?\n\nI think we should discuss in the design meeting.\n"""
3714,44491301,b'Luckily no test failures :wink: \n`_isUniqueConfigurationSource` was being used for following purposes:\n- While adding navigation to align uniqueness with collection/reference navigation - I think it would be better to pass that task to `CanSetUnique` on IndexBuilder since there can be other relationships defined over same properties. If the uniqueness based on navigation is clashing with some other foreign key defined over same properties then navigation should not be added.\n- While setting isUnique - Same as above since it also needs to take care of other relationships over same properties.\n- While replacing the foreignkey - the case mentioned above - It should be used in this case so that if the foreign key source is higher than isUnique configuration source then FK should have ability to change uniqueness though I am not sure how would that work with other FKs defined on same properties.\n'
3714,44565007,b':cry: Can you add this to #3710 to ensure it is re-enabled?\n'
3714,44566872,b'it is reported on #3642 which is superseded by #3710 \n'
3714,44598522,b'Fixed.\n'
3714,44599932,b'I believe these changes fix #3642. Could you update that issue as well? The Design changes look good to me but I would get others to check the other changes.\n'
3714,44602983,"b'After discussing in-person, everything is working correctly so looks like this check is not required. If in future if some bug arises, we can revisit.\n'"
3714,44605769,b'Updated and added a test.\n'
3714,44607454,"b""Foreign key does control the relationship is 1:1 or 1:\\* but it won't store the information with in itself. It will modify the associated index uniqueness appropriately. So you cannot have unique & non-unique FKs using same set of properties ( #3551 enables that scenario). It also mean that you can no longer have 1:1 relationship in the model without having unique index on same properties which is present situation in migration and database. All our relationships in database are non-unique regardless of FK's uniqueness. Correcting it exposed #3648 because we were inserting duplicate values in unique FK temporarily.\n\nI will bring this to design meeting for further discussion.\n"""
3714,44610476,b'How does this look now?\n'
3714,44611240,b'looks good\n'
3714,44685395,b':+1: \n'
3714,44685665,"b""Tests? I don't think this will work because of the space at the beginning of the string literal. \n"""
3737,44722516,"b""Just to make sure, would it make sense to have a test in which:\n1. A CLR entity type derives from a base type that different from System.Object but isn't a valid entity type\n2. There is a property of that base type somewhere in the model? \n"""
3737,44722796,b'Add quotes\n'
3737,44722845,b'Use .DisplayName()\n'
3737,44723018,"b'I think this might be the same thing @divega is saying, but it doesn\'t seem to me that special casing ""object"" is the right thing to do here because object is not any more special than any other type that might be the base type for all or some entities in the model,\n'"
3737,44723499,b'Standing issue #3583. Which one you prefer here?\n'
3737,44723706,"b"".DisplayName(), since there's no ambiguity\n"""
3737,44723904,b'It is special because it is much less likely to be an entity type than any other base type\n'
3737,44724864,b'We have test to verify \n1. Non-primitive types are discovered as entity type\n2. When base type is present as entity type in the model then base type will be set for derived types\n3. When invalid entity is present in model throw exception\nAbove scenario is just combination of all of them and should not be necessary.\nThough I can add test if you want. :smile: \n'
3737,44725319,"b""I would like to see this test too. I'm not understanding how this fix will make the test Diego suggested pass.\n"""
3737,44725478,b'I think it is important that we understand the behavior in this general case because `System.Object` should just be just an example of it. \n'
3737,44731172,"b""General behavior is,\nIf user have 2 entity types in the model added explicitly/conventionally, and if they are in CLR hierarchy then we will create TPH. We will throw exception if user tries to create key in derived type.\nWe will throw exception if there is any invalid entity type (entity without PK) regardless of above.\n\n`System.Object` is kind of stands out because,\n1. We know that it is not valid entity type (unless shadow PK defined but if we want to support that we have to remove this check)\n2. object is base type for every clr type hence it will be set as base type for every other entity type.\n\nThis change is not the fix for the user reported exception.\nUser has property of `object` type which cannot be mapped by typemapper. Hence user should be notified to exclude it from model since discovering `object` as entity type throws misleading exception.\nFor any type other than `object`, there won't be clr inheritance unless user has defined it using derived class. At which point it is fair to throw above exception notifying user that we have put both entities in same hierarchy by convention (or there is invalid entity type in the model)\n"""
3737,44738924,b'@ajcvickers I talked to @smitpatel and @AndriySvyryd and right now I understand the reason for this design and I am ok with it. Hopefully I can explain it to you tomorrow before I forget :smile:\n'
3737,44745652,"b'@divega After looking through it all again it seems to me that the only real issue is that the original exception message didn\'t specify that we had pulled ""object"" into the model. With an appropriate change to the message (possibly more than what is in this PR, although that is a good start) it seems that is all we need to do. In other words, I don\'t think we also need to special case object. But I look forward to hearing why special casing object is a better thing to do than just having a better exception message for the general case.\n'"
3754,44846393,"b""Why do we need the lambdas? Assuming you are reacting to https://github.com/aspnet/DependencyInjection/commit/ff7eb2f2c9bc584205f143f9ca23feee024f0ee6, it doesn't look  like this needs to change.\n"""
3754,44846532,"b'our build is/was using old version of DI, will close this and wait for the right version to propagate\n'"
3756,44962025,b'Calling `_code.Literal(foreignKey.DeleteBehavior)` method would also return _DeleteBehavior.Cascade_\n'
3734,44690573,b'typo\n'
3734,44691008,"b'Consider moving these alongside the method definitions, and making the methods private (if they are only accessed via the delegate).\n'"
3734,44691154,b'One thing that helps in query is logging the ET at Verbose level.\n'
3734,44691202,b'private?\n'
3734,44706310,b'Done\n'
3734,44706328,b'Done.\n'
3734,44715359,"b""Not sure how much value that would have since this is very much an implementation detail. I'm going to hold off on the logging for now.\n"""
3739,44964695,"b""We'll also need to ensure this gets published to NuGet for our provider writers...\n"""
3756,44965925,b'will update in some future PR\n'
3764,45090877,b'Will this assert fail if the application creates an index explicitly on a property created by convention?\n'
3764,45093035,"b'BTW, this formatting bug is fixed in Update 1.\n'"
3764,45114204,b'Will revert this\n'
3764,45114676,"b'I have just moved the code block here so that we detach relationships before removing indexes because detaching relationship will remove FK and conventional index defined for that FK.\nThis assert should never fail. This is `RemoveProperty` function. When we add any component in the model, we update the configuration source (CS) of the property to have highest CS of all component defined using this property. At the start of this function we check if given CS is able to remove this property. If it can remove the property then all components defined using this property should get removed. Hence assert should always pass.\n'"
3764,45124037,"b'Sounds good. I didn\'t know we did this: ""we update the configuration source (CS) of the property to have highest CS of all component defined using this property.""\n'"
3764,45124611,"b""@ajcvickers Yes, we do that for any referenced member of the model. However we don't downgrade the CS if the referencing member is removed, that's something that would be fixed with https://github.com/aspnet/EntityFramework/issues/2869\n"""
3764,45125130,b'You need to call FindForeignKeysInHierarchy() instead to account for FKs on derived types.\n'
3764,45125461,b'This should be called with `ConfigurationSource.Convention`\n'
3764,45125635,b'The condition can be made faster:\n`p.Builder != null`\n'
3764,45125790,b'Add the index before running the conventions so that the conventions can find and use it\n'
3764,45126490,b'That will require canoverridesamesource function then.\n'
3764,45132745,"b""This fails. I don't think we set builder to null while removing property.\n"""
3777,45138975,b'Use ctor that takes a collection and a comparer.\n'
3777,45143037,b'Done.\n'
3755,45143495,"b""This would be fine if removing property is setting `Builder` to null else we may need check for property's existence.\n"""
3755,45143590,b'Different variable name since these are not actually property builders?\n'
3755,45143664,"b""That's handled in https://github.com/aspnet/EntityFramework/pull/3762/\n"""
3755,45143873,b'or `ConfigurationSource.Convention.Overrides(p.GetConfigurationSource())`\n'
3755,45144421,b'Do you mean `!ConfigurationSource.Convention.Overrides(p.GetConfigurationSource())`?\n'
3755,45148866,b'No update to config source required?\n'
3755,45149372,"b""It's handled in `ForeignKey.UpdateConfigurationSource()`\n"""
3755,45150357,b'yes. :smile:\nIt was translated like that `KeyConvention` also. Prefer to use Convention source.\n'
3778,45258527,b'@AndriySvyryd Was just mentioning the `AddMissingParentheses` thing...\n'
3778,45259755,"b""It's all over my head, but won't having multiple group-bys cause multiple enumerations of `_sourceEnumerator`? Is that OK?\n"""
3778,45260614,"b'Yep, R# 10 feature, attempting to get us back to the old style.\n'"
3778,45260694,"b'Ah, the order-by seems to help with this. I [sort of] see now.\n'"
3778,45260818,"b'No sure what you mean exactly, but multiple GroupBys will result in multiple enumerables.\n'"
3778,45260949,"b'Yep, that is the sneaky bit and what makes it streaming. :-)\n'"
3800,45390369,"b""Nit. This seems like an odd way to do it, but if you can't pass `_connection.Value.Database` and `_connection.Value.DataSource` directly then OK.\n"""
3800,45390584,"b'Re the [NotNull], what gets passed here if `SensitiveDataLoggingEnabled` is false?\n'"
3800,45400814,"b'`ISensitiveDataLogger` will exist either way, the flag is just a setting from `DbContextOptions` that can be accessed through this interface. Checking the value also logs a warning if sensitive data logging is enabled.\n'"
3800,45401932,b'Could work with an anonymous type. We use a strong type for LogCommand (`DbCommandLogData`) which is a public type. Not sure if there is a preference / pattern we want to establish for these.\n'
3800,45408071,b'Use a nominal type when it needs to be consumable. E.g. from tests.\n'
3800,45408687,b'This is either public or use an anon type.\n'
3800,45411703,b'OK. No problem then.\n'
3810,45415676,b'worth putting a comment for this?\n'
3810,45420314,b'this.DisplayName() ?\n'
3810,45434601,b'Which is the lesser of two evils..?\n'
3789,45427560,b'Why not return and cache the empty `ISnapshot` itself?\n'
3810,45498915,b'+1 for this\n'
3780,45399204,"b""Careful with await. It is contextual but is in context in many places where the others aren't.\n"""
3780,45414062,b'The only things we currently generate identifiers for (using this code) are class and property names in their definition.\n'
3780,45426900,b'Sounds great then.\n'
3776,45291056,b'You could unify this new code with the code in `HasForeignKey` by moving it to `GetOrCreateProperties` and adding a parameter of `IEnumerable<Type>` to it containing the principal properties CLR types\n'
3776,45294800,b'Should we create properties when the principal key is shadow?\n'
3776,45297858,"b""I think we decided we wouldn't. You can pass a null if the corresponding principal property is shadow.\n"""
3776,45416828,b'It looks like you can further reduce duplication by just passing through the principal properties and moving the filtering logic to `GetOrCreateProperties`\n'
3827,45526185,"b'You can also remove this await using this extension method:\n\n```\n        public static Task<TDerived> Cast<T, TDerived>(this Task<T> task)\n            where TDerived : T\n        {\n            var tcs = new TaskCompletionSource<TDerived>();\n            task.ContinueWith(t =>\n                {\n                    if (t.IsFaulted)\n                        tcs.TrySetException(t.Exception.InnerExceptions);\n                    else if (t.IsCanceled)\n                        tcs.TrySetCanceled();\n                    else\n                        tcs.TrySetResult((TDerived)t.Result);\n                }, TaskContinuationOptions.ExecuteSynchronously);\n            return tcs.Task;\n        }\n```\n'"
3827,45538594,"b'Nice, will use that.\n'"
3852,45666872,b'Why 2 different values as 60 & 90?\n'
3852,45770317,b'Typo: Compenstate.\n'
3852,45766932,b'I made SqlServerTestStore more lenient due to the number of scratch database it creates/deletes.\n'
3812,45419919,b'worth drying up?\n'
3812,45420161,"b'not happy about this - I need model in the subquery injector to find the EntityType and then INavigation. Alternatively, I could pass it in constructor to the NavigationRewritingExpressionVisitor. Thoughts?\n'"
3812,45420275,"b'will change ; into , at the end of 639\n'"
3812,45496098,b'What is the difference between TCollection and concreteType?\n'
3812,45496224,b'I would just call this Create - analogous to the collection ctor that takes a sequence.\n'
3812,45496436,b'E.g TCollection = ICollection<Foo> and concrete type = HashSet<Foo>.\n'
3812,45496564,b'Sounds good\n'
3812,45496909,b'private?\n'
3812,45497017,b'You should use one of the bind methods on EntityQueryModelVisitor\n'
3812,45497114,b'Why do we revisit here?\n'
3812,45527786,"b""It seems strange that everywhere else in this class we use pre-prepared delegates to do the requested operations rather than using Reflection. Maybe it doesn't matter here because of the way query uses the Create method, but is there some reason not to follow the same pattern as the other methods?\n"""
3812,45527938,"b""Is this needed? The collection doesn't exist before the method is called, so it can't already have duplicates. The only reason this check should be needed is if the caller is passing in duplicates. is that something query will do?\n"""
3812,45528070,"b""was erring on side of caution, will remove and indeed it _shouldn't_ happen\n"""
3812,45528984,"b""Should there be a version of AddRange that does not check for duplicates that can be called by query when it knows that it has materialized a new entity and hence the collection is empty, and knows that it won't be passing any duplicates? When people use lists for collections and there are a lot of related entities the duplicate checking can get expensive. /cc @anpete\n"""
3769,45120471,"b'Do we have any reason for using `.klog` folder? It existed during the `k` world but after renaming to `dnx` world, `.klog` is not used by anything else.\n'"
3769,45120957,"b""Idk. It appears other @aspnet projects don't use `.klog` anymore. What is this log file used for anyways?\n"""
3769,45122073,"b'IIRC, this was an old, primitive way of observing test output. Can likely be deleted now.\n'"
3769,45782528,b'Is this temporary? If so add TODO. If not why is the exception message different on Mono?\n'
3769,45782754,b'Not temporary. Mono just did not implement this error message the same way.\n'
3769,45783547,"b""Hmmmm. OK. Guess there's nothing we can do about that. Go ahead and check in.\n"""
3819,45518588,b'I think we have code like this already (perhaps in Bind) can you unify if so?\n'
3869,45689984,b'Beware that @bricelam hates this :smile:\n'
3869,45690034,b'Cool!\n'
3869,45690265,b'Would it be better if even this lived in the type mapper for SQL Server?\n'
3869,45690348,b'Have you had any chance to measure if this has a perf impact?\n'
3869,45767052,"b'Yes, I do. Concatenation is cheaper.\n'"
3869,45767298,b'Everywhere in this file or just this instance?\n'
3869,45796709,"b'Maybe, if it is useful in any other places. I slightly prefer to have it private until we want to share it.\n'"
3869,45796824,"b""No, since I don't think perf has big impact on whether we do this.\n"""
3869,45804772,"b""When we discussed the bug we stated that if the solution had a significant perf impact we should consider keeping a path that doesn't support triggers and an opt-in flag for the behavior that supports triggers (that runs slower). \n"""
3869,45805039,"b'Ok, we can do that after we get the perf numbers from the CI machine.\n'"
3869,45806549,b'I am fine with that. It might actually be the only case in which we will ever need this anyway. \n'
3881,45812587,"b""Shouldn't be any Convert nodes should there?\n"""
3896,45928207,"b""What's the reason to not use `GetTypeInfo()` ?\n"""
3896,45928421,b'`TypeInfo.GetRuntimeMethods()` does not exist in .NET Core. The same result could have been be done with `GetTypeInfo().DeclaredMethods`\n'
3896,45936572,b'Thanks for this! :smile: \n'
3899,45934667,b'We should do the same in `Property<T>()`?\n'
3934,46313359,b'This column (`sys.columns.is_nullable`) is never DbNull\n'
3934,46313551,b'YAGNI. Columns must have a name.\n'
3934,46313957,"b""This is going to blowup the log output when a user filters a table. We should only log this warning if we hit this unexpectedly i.e. table was allowed by TableSelectionSet AND we didn't find it in `_tables`\n"""
3934,46313966,b'I looked at the definition for the view. It is nullable.\n'
3934,46314099,b'Likewise. YAGNI. Indexes must have names.\n'
3934,46314210,"b""I looked at the definition of the view. It is nullable. I agree that's weird and would mean something strange but I'd rather issue a warning than die with the KeyNotFoundException that people are seeing.\n"""
3934,46314424,b'is_unique is always defined.\n'
3934,46314504,b'We do this. See the lines just before this.\n'
3934,46314537,b'YAGNI\n'
3934,46314971,"b""As above. Weirdly this is not true. In fact this was the case that caused the error the user was seeing. Basically I've guarded against every situation where the appropriate sys view definition allows nulls.\n"""
3930,46310450,b'What happens if the table name is set using the provider-specific API rather than the common relational API?\n'
3930,46313484,"b'You\'ll get both:\n\n``` C#\nbuilder.Entity(""This.Is.MyEntity"", b =>\n{\n    b.ToTable(""MyEntity"");\n\n    b.HasAnnotation(""SqlServer:TableName"", ""MySqlServerEntity"");\n});\n```\n'"
3930,46314153,b'Got it now. :shipit:\n'
3738,44735413,b'Why is this `Instance`? Is that what we decided? Looks weird but I may be missing something.\n'
3738,44735849,"b'Looking at the usage, I think I remember now. It still looks weird though :smile: `Text` or `Sql` would probably look better IMO, but I am fine with `Instance` if others really like it.\n'"
3738,44949164,"b'It seems a bit strange, but I believe this is consistent with other internal services that are provided only for the sake of extensions. We could back it with a private field with a more descriptive name, but that seemed unnecessary.\n'"
3738,46216023,"b'Instance seems wrong. To me, ""Instance"" usually denotes the singleton pattern. My vote would be to leave the name and also make it an explicit impl. - It should only really be used via EMs\n'"
3738,46216391,"b""We generally don't want to use exceptions in this way.\n"""
3738,46217301,"b""I would like to do something else here, but there isn't a method on the public API that doesn't throw. The implementation does have `FindMapping` methods for the other two patterns, but we are making those protected as a part of these changes. I'm not sure we have much of an alternative here.\n"""
3738,46218107,b'We should change or add API. Ideally a single method on the interface combined with companion sugar extension methods. cf Logging etc.\n'
3949,46446585,"b'""force"" is good as a command line parameter but in code its meaning is obscure. ""overwriteFiles"" would be more clear.\n'"
3949,46447350,b'Sounds good. Will fix.\n'
3946,46368328,"b""Nit: Not immediately obvious when reading the code why you're doing this. So I would add a comment. But otherwise looks good. :shipit:\n"""
3957,46494443,"b'Would do this case-insensitive. E.g. I often use ""(LocalDB)"".\n'"
3969,46619414,"b'Looks good, but the message could be confusing because you will see something like, ""The entity type \'DiscontinuedProduct\' should derive from \'Product\' to reflect the hierarchy of the corresponding CLR types."" and if you got here by mistake you probably won\'t know what to do. That being said, I don\'t know how to improve it. :-) /cc @rowanmiller \n'"
3970,46857837,"b'""ReadOrighinalValue\'\n'"
3970,46858526,b'Can this case be removed by changing the type of the array above?\n'
3970,46859866,"b'Not really, because the T is not a class generic, and this is because the calling code is supplying T, which as far as the compiler is concerned may be different from T0, even though we ensure at runtime that they are the same.\n'"
3959,46521239,b'Why repeat the words of the name of the class in each property?\n'
3959,46521582,"b""Are you sure that `Path.Combine()` doesn't do this check already?\n"""
3959,46569684,b'Will change them.\n'
3959,46570828,"b""Just checked and you're right. Will fix.\n"""
3959,46582978,b'Was this check intentionally removed?\n'
3959,46583432,b'Nope - well spotted. Will put back in.\n'
3959,46584108,"b'Not completely sure if this is the same, but this looks almost the same as `Uri.MakeRelativeUri`\n'"
3959,46585139,b'Could we use `Uri.Segments` to make this more x-plat safe?\n'
3959,46587197,"b""I tried `Uri` stuff a while back. Don't remember exactly what the problem was now but would rather keep full control over what we are doing.\n"""
3959,46588052,"b""Hmmm. It seems to be passing on both Linux and Windows platforms already? I'd rather not complicate it unless I have to.\n"""
3975,46875946,"b""Since this is so SQL Server specific, we shouldn't put this on the interface.\n"""
3975,46876093,b'This should just be part of `DatabaseModel` (See https://github.com/aspnet/EntityFramework/pull/3783).\n'
3975,46876282,b'This removal is causing build errors.\n'
3975,46897425,b'It is with the 2nd commit.\n'
3975,46897462,b'Yep - now fixed.\n'
3975,46897477,b'Fixed with 2nd commit.\n'
3999,47043478,"b""We should also return null if there's any other conflicting foreign key that can't be removed\n"""
3999,47043566,"b""Wouldn't above 2 ifs will take care of it?\n"""
3999,47043600,"b""No, it wouldn't. :cry: \n"""
3999,47043617,b'newRelationshipBuilder should never be null here\n'
3960,46536647,b'Maybe ResultSetMapping\n'
3960,46536682,b'Maybe ResultSetMapping ?\n'
3960,46536744,b'ResultSetMapping ?\n'
4010,47020980,b'`SqliteConventionSetBuilder.Build()` ?\n'
4010,47021315,"b""What does this assert actually verify? Isn't table name is going to be `Product` in SqlServer/SQLite/Core all?\n"""
4010,47021324,"b'Yes... Hmmm this test is useless, will change\n'"
3974,46861050,b'We should discuss this. I would prefer to keep this in core if possible.\n'
3974,46861472,"b'We could do this, but then we would have to compensate for the type changes in a few places (I know of join and binary expressions but there might be more). I will send a new pull request with that alternative, see which one you like better. \n'"
3995,46898164,b'Nit: Mention Mono in SkipReason?\n'
3995,46898247,b'Current can return null -  what happens if it is null? Similarly in the comparisons below.\n'
3995,47001270,b'The comparison would return null. This code should never be reached though.\n'
3995,47001294,b'will update.\n'
3995,47024385,b'OK :shipit:\n'
4001,47164019,"b'I added some more (commented) tests for those cases, you can find them by global search for the bug numbers\n'"
4001,47164754,b'where TDerived : TEntity\n'
4001,47173125,"b'I think I got them all - GearsOfWar, right?\n'"
4001,47173255,"b""Can't actually do it because the method is declared on EntityShaper (non-generic).\n"""
4001,47173585,b'ahh right i missed that - they are all enabled now\n'
4032,47173788,b'Is it worth clarifying in the comment that the finally will only execute when the outer enumerator is disposed? Not sure.\n'
4037,47277837,b'Seems like there could be complications here with in-memory databases.\n'
4037,47278538,"b""Hmm... I suspect it won't really matter. `Exists` will unexpectedly return `false`, but calling `EnsureCreated` will behave as expected.\n"""
4037,47280564,"b'In this scenario, wouldn\xe2\x80\x99t this try to recreate already existing tables?\n'"
4037,47282640,"b'No, databases are created by SQLite when you open the connection (see the `Create` method above). If the database already exists, this will no-op. Creating the tables, etc. is done in a separate step.\n'"
4041,47304080,"b'Actually discussed this code a bit more in depth with @maumar. We believe it would be slightly cleaner (and possibly work for more cases) if we pivot just on the operation being a string concatenation and then we explicitly cast any arguments we find not to be of type string. I.e. no need to say ""if left is string but right is not string or viceversa"".\n'"
4041,47304327,"b""We talked about translating this to STR() in SQL Server, but STR leaves leading blanks so we would need LTRIM and in general we don't see much benefit.\n"""
4041,47318407,b'Nit: extract method and apply to both binaryExpression.Left and binaryExpression.Right?\n'
4023,47308695,b'You can rename `cycle` to `cyclicWalk` and `lastCycle` to `cycle`\n'
4023,47311359,b':+1: \n'
4011,47307646,"b'Could you call `IsIgnored(oldBaseType.Name, oldBaseType.Name)` instead?\n'"
4075,47560112,"b'I am personally ok with removing these extension methods from the public surface, but want to make sure we are all in agreement. \n\ncc @rowanmiller \n'"
4075,47563116,"b'Additional context: They were added for (and only used internally by) the model differ to support TPH, but this PR required a more specialized usage so I removed these.\n'"
4051,47406826,b'Using the previous value when setting has more potential of ending up with an unexpected value in concurrency scenarios making this potentially less effective. Just use a bool and assign a constant\n'
4051,47554756,b'This message is no longer appropriate because we are not just doing this for async operations anymore.\n'
3973,47177438,"b""Nit: I know it doesn't matter but it would read more clearly to me if we put `HasMin()` before `HasMax()`.\n"""
3973,47177495,"b""Back to this again, huh? Could we add a comment saying why - just so others know what's going on. Similarly for other App.configs.\n"""
3973,47177628,"b""Nit: I believe we're supposed to spell out Entity Framework rather than EF.\n"""
3973,47177671,"b'Typo: ""and"" should be ""an""\n'"
3973,47259785,b'Does this need to change? Incrementing by anything over two billion seems a little ridiculous...\n'
3973,47274821,"b""I agree it's probably an unlikely scenario, but this is still theoretically possible in SQL Server. \n\n``` sql\nCREATE SEQUENCE BigStepSequence INCREMENT BY 300000000000 -- works in SQL Server\n```\n"""
3973,47276911,"b'`long` is fine. The SQL standard doesn\'t really prescribe the type beyond ""numeric"".\n'"
3973,47282118,"b""TD.NET, that's why. I'll add as a comment.\n"""
3973,47298119,"b""@bricelam @natemcmaster We did actually discuss this when designing ISequence and decided to keep it as int even though long is possible. I don't mind too much one way or the other, but the team previously came out on the side of int.\n"""
3973,47303593,b'Do we expose `ISet<T>` properties anywhere else? Seems like `IReadOnlyCollection<T>` would be more idiomatic.\n'
3973,47305667,"b""I'm pretty much impartial here too. Knowing this was a deliberate design choice changes my opinion. I'd rather keep the interface the same and side the team choice of using `int`. Ass increments > 2 bil are probably never done, I'll revert to use `int` instead.\n"""
3973,47305863,"b""Good catch. I'll update.\n"""
3973,47306532,"b'I would be fine either way, as long as we are consistent across the stack.\n'"
3973,47388039,b'Missed one.\n'
3973,47668486,b'Good catch. Updated.\n'
4087,47673240,"b'Does this cover all VB.NET projects, or just class library? \n'"
4087,47675211,b'I would say all relevant project types: http://www.mztools.com/articles/2008/mz2008017.aspx\n'
4087,47675277,"b'In EF6, we detected using `project.CodeModel.Language == CodeModelLanguageConstants.vsCMLanguageVB`. I believe this caught all projects including Web Sites.\n'"
4087,47676110,"b""I'll test a few more project types, but the above code was taken from `VsUtils` in EF6.\n"""
4084,47588973,"b""FWIW, the reason it does not compile for me is that the compile-time version of System.Reflection has an internal parameter-less constructor for Assembly. I don't know why that is, but it might be a reason to file a bug on that and/or to take a different testing approach.\n"""
4039,47727209,"b'Can we suppress this behavior for SQLite? SQLite ignores attempts to set the constraint name on the primary key.\n\n``` sql\nCREATE TABLE People ( Id INT, CONSTRAINT ""PK_People"" PRIMARY KEY ( Id ) );\n-- done.\nSELECT * FROM sqlite_master;\n-- shows the index created is named ""sqlite_autoindex_People_1""\n```\n'"
4106,47836397,b'Do we have the same issue in SQLite?\n'
4106,47837108,"b""I can answer the question myself. We don't have the same problem because we don't have a SQLite version of this method translator... In fact it seems there are several method translators we have only implemented for SQL Server but we could implement for SQLite as well.\n"""
4106,47838554,"b""We don't have a `IMethodCallTranslator` implementation for `Substring` on SQLite so all of the calls are going through client eval. SQLite does have a `substr(X,Y,Z)` function which uses 1-based counting for string indexes if we want to add a translator for it.\n"""
4039,47846155,"b""Discussed this with @natemcmaster offline. SQLite won't do anything with it this extra API and it should cause no problems. This seems to be something we should address in a SQLite-specific codegen layer, but we don't have that at the moment pending decisions in #4038. So checking in as is. Will discuss as part of #4038.\n"""
4106,47848488,"b""Filed #4108 for triage. We shouldn't block this PR on the outcome. \n"""
4106,47899022,b'Typo => Accommodate\n'
4107,48049970,"b'Should this be `if ((values[index++] = getValue(entry, property)) == null) { return null; }` as in `CompositeDependentValueFactory` above or are you ok if some of the objects passed back are null?\n'"
4107,48050269,"b""The principal key will not be null because we don't allow null principal keys.\n"""
4107,48060504,"b""OK. If a user can't do that (even by mistake) then :shipit:\n"""
4135,48086449,"b'Nit: typo ""assigns"" -> ""assign""\n'"
4135,48086529,b'Nit: This looks more like `It_loads_composite_key_references`? When it said multiple I was expecting multiple foreign keys in one table - which might also be interesting...\n'
4135,48086771,b'Very small nit: maybe put comment on next line.\n'
4135,48086831,b'Nit: spaces around `=>`\n'
4135,48086874,"b'Nit: depending on where this is used, may be better to sort the columns by ordinal before combining them in `string.Join()`\n'"
4151,48202009,"b'Don\'t put NotNull on overrides. (R# will show this as grayed out ""dead code"".)\n'"
4138,48449622,b'Why magic numbers?\n'
4138,48449631,b'Magic numbers\n'
4156,48458226,b'Should we throw or Assert on `else` ?\n'
4098,47718076,"b'I chatted with @rowanmiller, and we decided to throw here instead instructing users to use the appropriate target project (or change the migrations assembly).\n'"
4156,48466965,b'Implement the interface explicitly?\n'
4138,48494648,"b'Would you prefer named constants? Or using values from the enum itself? Or explicitly listing each value? None of these options will prevent this code from breaking if a new enum value is added, so I went for the simplest thing. Other ideas welcome, as long as the code is fast. \n'"
4156,48494940,b'Good point. Let me look to see if the check can be made a debug assert.\n'
4156,48495483,"b""Why? It's on internal code already.\n"""
4138,48495968,b'Put the result of `Enum.GetValues(typeof(EntityState)).Cast<int>().Max()` in a static readonly field\n'
4136,48449532,b'Why are the setters part of the interface?\n'
4136,48494379,b'Left over from previous slightly different implementation. I will remove them.\n'
4138,48496440,b'Will do.\n'
4156,48496740,"b""To make it even less likely to be used. This is optional, as it doesn't matter much.\n"""
4171,48397658,"b""Is there any coverage for the cases in which this SQL gets generated? (Couldn't find it in this PR, but I was using a mobile browser)\n"""
4171,48398178,"b""Yes, it's covered by the functional test, but it doesn't assert the actual SQL since it's rather esoteric.\n"""
4171,48399073,b'Got it. Thanks!\n'
4250,49132985,b'Do this inline and save the allocation here\n'
4243,49119927,b'@bricelam - There are some scenarios which creates extra lines like this which are not required. Should this be fixed now or it can wait?\n'
4243,49144733,b'Seems fine for now. File a bug.\n'
4243,49147181,b'#4253 \n'
4141,48987792,b'DRY this up with predicate case below.\n'
4141,48987937,b'One question: Should this handling be in our base SQL gen vs SQL Server? Is it appropriate for the general case?\n'
4141,48988123,"b""I'm assuming we do this rewrite as part of SQL gen because it can be dependent on parameter values?\n"""
4141,48999228,"b'This works on MySQL, looks like SQL server specific issue.\n'"
4141,49223747,b'This need to be protected?\n'
4141,49224684,b'Looks good. I think we could make the pattern more consistent by tweaking it slightly: Introduce a method VisitProjection(IReadOnlyList<Expression>). In the base class it would run the null comparison transformer and call VisitJoin. In the SQL Server override it would run the projection comparison transformer and then call base. Do you think that would work?\n'
4141,49230208,b'Changed it. Looked better pattern as it allows provider to change the way projection is processed.\n'
4252,49139827,b'Note to self: I think `Text` might be a better name for this. It represents the text the user inputted on the command-line after the `-s` or `-t` flag.\n'
4252,49140207,"b'Note to self: `""schemaNonExistent""` should be `""schemaOther""`. It does exist in the database. Similarly for `""tableNotThere""`.\n'"
4252,49228426,"b""@natemcmaster @rowanmiller I'd like some advice on this. At the moment I've coded it so that any `-s` entries the user makes for SQLite are basically silently ignored - they will not cause a warning saying that the selection is not satisfied, nor will they cause any warning that using a `-s` flag under SQLite is basically meaningless. I can continue to take this approach or I can:\n\nA) take out this section - which means if the user enters any `-s` flags all of them will raise warnings saying they are unsatisfied.\nB) check for `-s` flags much earlier in the process - the question then is do I a) error - i.e. issue an error message and stop the process; or b) warn that `-s` flag is meaningless but continue, and when I continue do I also raise the warning messages that the `-s` flags are unsatisfied?\n"""
4252,49228785,b'My vote would be warn if the flag is present and then just ignore it from that point on\n'
4252,49229067,b'I\xe2\x80\x99ll second that. Warn but carry on ignoring `-s`.\n'
4252,49229193,b'Will do.\n'
4252,49244261,b'nit: code formatting. We should run R# over our design projects (separate PR).\n'
4252,49244603,b'`Matched` ?\n'
4252,49244622,b'How about `Pattern`?\n'
4252,49247536,"b'I thought about that but I\'d rather not as it makes me think we\'re inputting things like ""Abc*"" which matches anything starting with Abc - which we don\'t support.\n'"
4252,49247635,"b""Has to be `IsMatched` I think, but otherwise I'm fine with that.\n"""
4252,49251618,"b'Nit: `SQLite`\nAlso, I would shorten to one sentence if possible e.g. `Scaffolding from a SQLite database will ignore the schema filters argument.`\n'"
4252,49251968,b'OK. Will fix.\n'
4184,48507142,"b'This is going to get very long for things like images. Maybe if the length is greater than 16, then do just the first and last eight bytes--something like ""0x0102030405060708...0102030405060708"" @divega @rowanmiller Thoughts?\n'"
4184,48507615,"b""I'm torn... having the full value is nice... but then again perhaps the full value is of less benefit when it's binary data. The same could be true for string data too, `Post.Content` could be a very sizable string.\n"""
4184,48524476,"b'Given that parameter logging is something you opt-in for, I vote for logging the full values\n'"
4184,48914356,"b""Agree with @ajcvickers. I think it would be fine to just truncate the data. To @rowanmiller's point, we should consider doing the same thing for strings.\n"""
4184,48945289,"b""I can see that logging parameters of arbitrary large sizes could cause problems. I can also see that this probably isn't worth adding another knob :smile: So I guess I would personally truncate at a larger size than 16, so I would still get the full value for more cases. I also probably wouldn't bother logging the tail of the value when I truncate. \n\nBTW, isn't how parameter values get formatted for the log and truncated potentially a type mapping concern?\n"""
4184,48958552,"b'So: Log the first 16 bytes.\nIf more than 16 bytes long, log the first 16 bytes and append ... (3 dots)\n0x01020304050607080102030405060708...\nIs that how to do it for now?\n'"
4184,48977875,"b'By ""at a size larger size than 16"" I was trying to suggest to pick a larger number, e.g. 32, as the limit. I don\'t feel strongly about any of this though. \n'"
4184,48983164,"b""Ah, got it. Let's go for 32 for now, then?\n"""
4184,48986843,b'Still too small? Perhaps 50?\n'
4184,48988719,b'how about 64 ?\n'
4184,48989072,"b""I guess it could help to agree on what the problem is with too long parameters. I believe the main ones are:\n1. Log files that are too large would turn logging unusable\n2. Too many cycles spent formatting would turn logging unusable\n3. Too long parameter values could turn the console log unreadable, so pick a lenght that multiplied by two (since byte[] is rendered as hex) plus a typical lenght of a parameter name, colon, space, 0x and the ellipsis at the end doesn't make it overflow a line in a typical console. \n\nTo me the 3rd issue makes 32 a reasonable number, but I am not sure this is a strong argument.\n"""
4184,48990341,b'@divega Had not thought about 3 - in that case 32 makes a lot of sense\n'
4184,49226170,b'We probably want to keep this strongly typed for structured logging.\n'
4197,49107840,"b'To better match the existing code, this should just `return CreateContext(FindContextType(contextType).Value)` and the logic here should be moved to a new `FindContextType(Type)` method.\n'"
4197,49108563,"b""This one isn't coming from the `DbContext`'s services, so it probably doesn't belong in this method. Perhaps `ConfigureServices`?\n"""
4197,49108687,"b""I don't think there's value in differentiating; I'm sure they'll all use things like `IModel` and `ILoggerFactory`...\n"""
4197,49108801,b'My expression-bodied syntax! :scream_cat: \n'
4197,49109546,"b""Hmm... We don't really have a well-defined list of primitives anymore. E.g. on SqlServer, [SqlInt32](https://msdn.microsoft.com/en-us/library/system.data.sqltypes.sqlint32.aspx) might be considered a primitive type at some point...\n"""
4197,49109605,b'Could we get a list from the provider?\n'
4197,49109754,"b'Also, should this include nullable versions?\n'"
4197,49110288,"b""I recently discovered a new pattern that I prefer for mixing comprehension syntax and methods:\n\n``` C#\nEnumerable.ToList(\n    from i in items\n    select i);\n```\n\nI'm also a firm believer in artistic license, so pick whichever one floats your boat. :boat: \n"""
4197,49110589,"b""Like the primitives, this list also doesn't feel fully defined.\n"""
4197,49111269,b'The StyleCop [rejects](http://www.stylecop.com/docs/SA1013.html) your closing curly bracket spacing. :trollface: \n'
4197,49111807,"b""Oh weird. I'm not sure I like using a placeholder type for this. Could these be expanded eagerly in `MakeGenericMethods`?\n"""
4197,49112198,b'Could this fallback behavior be moved to the `MethodName` getter?\n'
4197,49112270,b'(same for `TargetType`)\n'
4197,49112435,"b'Feels like this should be an exception, not an assert.\n'"
4197,49112612,b'Log a warning?\n'
4197,49112750,"b'Hmm, seems impossible...\n'"
4197,49113164,"b""Yeah, I really don't like these marker types. Maybe we need two attributes--one that can take types and one that can take categories.\n"""
4197,49113617,b'Could avoid generating an enumerator for this at compile time and just `return entityType.GetKeys().Select(key => key.GetWeakReferenceIdentityMapFactory().Invoke().GetType().GetTypeInfo());\n'
4197,49113767,"b""`yield`, like `async` should be avoided when possible. They're backed by a lot of compiler magic.\n"""
4197,49114391,"b""Do you need this method's side effects? Could you add a comment--it isn't obvious.\n"""
4197,49114733,b'A lot of these methods are returning `.GetType().GetTypeInfo()`. It might be cleaner to let them return `IEnumerable<Type>` and project `.GetTypeInfo()` in the thing that consumes them.\n'
4197,49115245,b'It feels like this should be merged into `DbContextOperations`.\n'
4197,49115478,b'Should this come from the design-time service provider? Users could theoretically provide their own implementation...\n'
4197,49116076,b'This repeats a lot of work that was just performed by `_contextOperations.GetContextTypes()`. Maybe we should have a `CreateContexts` method.\n'
4197,49116361,b'I think you can just call Create. It will no-op if it already exists.\n'
4197,49116581,"b'Do we ever anticipate generating other artifacts? If not, this type can probably go away; YAGNI.\n'"
4197,49116844,b'Impossible?\n'
4197,49117147,b'This file might get diffed. We may want to add some explicit sorting to minimize differences.\n'
4197,49117640,b'No tabs :space_invader: \n'
4197,49118032,b'(other places and in `EntityFramework.psd1` too)\n'
4197,49118051,b'P.S. I use the [Productivity Power Tools](https://visualstudiogallery.msdn.microsoft.com/34ebc6a2-2777-421d-8914-e29c1dfa7f5d) to catch this.\n'
4197,49119013,"b""Technically, we can't even run it in Debug mode if they've checked **Compile with the .NET Native tool chain**. It looks like we can detect this with the following.\n\n``` ps1\n$configProperties = $dteStartupProject.ConfigurationManager.ActiveConfiguration.Properties\n$isNative = (GetProperty $configProperties ProjectN.UseDotNetNativeToolchain) -eq 'True'\n```\n"""
4197,49119225,"b'Also, this is terminating so it should `throw` instead of warn.\n'"
4197,49119742,"b""We're generally against `internal` members...\n"""
4197,49120718,"b'I would also have a constructor overload for this. (`.ctor(Type, string, Type[])`)\n'"
4197,49121155,b'Scratch that. I thought this was `TypeArgumentCategory.EntityTypes`\n'
4197,49121342,"b'Again, I think this should be an enum that is either a separate property on the attribute or a separate attribute.\n'"
4197,49121679,"b""Hmm... I'm starting to see why it was done this way. You could have `SomeMethod<TEntity, int>` and so they need to be mixed in the array.\n"""
4197,49122030,"b'I wonder if a syntax like this would work\n\n``` C#\n[GenericMethodFactory(new[] { TypeArgument.EntityTypes, TypeArgument.Of<int>() })]\n```\n'"
4197,49132031,"b'Will this change with MSBuild integration? E.g. Generate it behind the scenes under `obj/` and include it in the compilation. If so, maybe this command should have an `-OuputFile` parameter.\n'"
4197,49132285,"b""It looks like we don't use this overload, can remove for now.\n"""
4197,49142949,"b'Yes, I think an output path would be generally useful. I\'ll add to the contract.\n\nHowever, I don\xe2\x80\x99t think there is a need to surface this in powershell. In fact, I specifically avoided. I\'m considering adding this to our uwp MSBuild integration (in place of the invisible, auto-gen approach).\n\n``` xml\n<Error Condition=""!Exists(\'Properties\\EntityFramework.g.rd.xml\')"" Text=""hey! you need to run rdxml gen"" />\n```\n\nThis may have its own problems (if user renames the file), but it could be generally useful as a default. \n'"
4197,49143157,"b""Yup, you figured out why I needed mark types. Although it reads well, `TypeArgument.Of<int>()` isn't a constant expression so it can't be in an attribute parameter list.\n"""
4197,49143266,b'Is preserving `nameof()` references a compelling enough reason to allow this? \n'
4197,49144673,b'Yes. This was left behind as I moved code around. \n'
4197,49144998,"b""It is possible. I have some potential use cases in mind, like dropping multiple files or multiple types of files. I'd like to leave as we may do further changes to output a we build the msbuild client.\n"""
4197,49145007,"b'Doh, silly attributes.\n'"
4197,49146414,b'Seems like YAGNI.\n'
4197,49149740,"b'As with primitives, this discoverer does not (yet) make an exhaustive list. This is a TODO - increase coverage.\n'"
4197,49149934,"b'For now, Sqlite and inmemory are our only types that provider that works on UWP. This could be improved to use the type mapper to make sure all supported types are included. And yes, this should be expanded to include nullables.\n'"
4197,49150982,b'Good idea. I\xe2\x80\x99ll sort alphabetically.\n'
4197,49351388,b'Can this be a singleton service?\n'
4197,49353304,b'`CallsMakeGenericMethodAttribue`?\n'
4197,49358637,b':+1:  I like this name. Will update PR.\n'
4197,49358694,b'Yes. Will update.\n'
4277,49382234,"b""Really? That has become a very long line. Isn't it possible to break it in some way that R# finds compatible? Maybe put everything after the = on a newline and see what happens?\n"""
4277,49382672,"b'That\'s kinda weird compared to the next line. Maybe put ""Warning""... on a newline?\n'"
4275,49357023,b'Can we remove `ScaffoldingUtilities.OrderedProperties` then?\n'
4275,49369630,"b""Afraid not. It's also used to decide in what order the fluent API is generated in OnModelCreating(). There I thought it made more sense to keep alphabetical - at least I know I would find that more useful than having to search in a long list for the one I want.\n"""
4266,49258397,b'filed #4267 \nWill also write it in comment.\n'
4266,49355566,b'Does it matter if we re-enter here via nested conditionals?\n'
4266,49381900,b'Case block inside `When` part (`node.Test`) is not supported. There can be nested conditionals inside `IfTrue` & `IfFalse` but not inside `Test`. So we do not enter VisitConditional while `_insideConditionalTest` is true.\nAlso added test for nested conditionals.\n'
4283,49485600,b':cry: so close to actually getting rid of mono in our build\n'
4283,49486378,b'Can merge into one #if section\n'
4283,49486560,b'(Part of UWP verification you mentioned) Will the `build/netcore50/*.targets` still work?\n'
4283,49486764,b'Does this go away now?\n'
4283,49487014,"b'`""dotnet.""` ? what is the new framework named?\n'"
4283,49490547,"b'Soon-ish, I think NuGet will start distributing a self-contained, .NET Native-compiled binary for the various platforms.\n'"
4283,49490757,b'In theory. Build scripts are selected independent of the referenced libraries.\n'
4283,49490831,"b'No, still waiting for a .NET Core CLI runner and updated Web Tools.\n'"
4283,49491190,"b'Still TBD, but the current thinking is `netstandard` (.NET Platform Standard) and `netstandardapp` (.NET Platform Standard + console app model). And Full .NET will just be `net` (.NET Framework) without a custom CLR host like DNX.\n'"
4283,49505567,b'Is `DNX451` defined/used here?\n'
4283,49507720,"b'Yes, when the source file is included in the functional tests\n'"
4282,49523274,b'Can we use SelectExpression.GetTableForQuerySource instead?\n'
4282,49525482,b'Nope.\n'
4282,49525605,"b'Tried, but this method gets `FirstOrDefault` and we need `Last()`.\n'"
4297,49653939,"b""add a comment why we need alias here, it's not obvious\n"""
4297,49655029,"b'also add a test, that has a predicate on the OrderDetails, e.g. pr.Where( p => od.Where(o => o.Quantity > 7).Where(o => o.ProductID == p.ProductID).Select(o => o.Quantity).Contains<short>(5)))\n'"
4297,49656763,b'Consider using SelectExpression.Clone\n'
4297,49656978,b'Move to nav query tests?\n'
4297,49658053,"b""Adding the predicate results in a query like\n\n``` sql\nSELECT [p].[ProductID], [p].[Discontinued], [p].[ProductName], [p].[UnitsInStock]\nFROM [Products] AS [p]\nWHERE (\n    SELECT CASE\n        WHEN 5 IN (\n            SELECT [o].[Quantity]\n            FROM [Order Details] AS [o]\n            WHERE ([o].[Quantity] > 7) AND ([o].[ProductID] = [p].[ProductID])\n        )\n        THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT)\n    END\n) = 1\n```\n\nIt looks like the SQL is right, but the composition of the predicates isn't part of this code change.\n"""
4297,49673568,"b""Can we simplify this translation to just have 'Chai' IN with a subquery in the WHERE clause?\n"""
4297,49673739,"b'Ah, just saw you filed https://github.com/aspnet/EntityFramework/issues/4304. \n'"
4296,49635614,"b""Can we keep log warning here? Then we don't have to duplicate this in the override.\n"""
4296,49635656,b'`TypeMapper`\n'
4296,49635757,b'`GetTypeMapping` ? Consistent w/ pattern we use on the other apis in this class\n'
4296,49635986,b'This calls `_typeMapper.FindMapping` twice. Can we just get the type alias first and then ask for mapping once?\n'
4296,49659488,b'Is this a R# thing?\n'
4296,49659856,b'OK. Will do.\n'
4296,49660168,b'R# catches this. Everywhere else in our project we use protected properties and private fields. So this should probably be `protected virtual IRelationalTypeMapper TypeMapper { get; }`\n'
4296,49660200,b'Yes - will do.\n'
4296,49661317,b'Sure.\n'
4296,49661972,b'Yep - have updated it to match `Logger`.\n'
4292,49886049,b'Why not use `handlerContext.SelectExpressionFactory`?\n'
4292,49886306,b'No need to expose the service if we use the factory in `RelationalResultOperatorHandler`\n'
4292,49886375,"b""That's better, thanks.\n"""
4292,49886397,b'Yay.\n'
4322,49912814,"b""Small tweak to exception message...\n\n> Cannot create a DbSet for '{typeName}' because this type is not included in the model for the context.\n"""
4322,49913711,b'I updated the message.\n'
4315,50151969,b'Can we just prune all Property method calls?\n'
4315,50152469,b'No. We need to leave some e.g. GroupJoin with shadow properties queries.\n'
4338,50198457,b'I would be OK with just the NETCORE50 approach if we wanted to simplify further.\n'
4338,50198623,b'Consider typeof(EF).FullName\n'
4338,50198954,"b'So, not worried about the perf difference between string comparison and reference comparisons?\n'"
4338,50199121,"b'No, it should be negligible in the context of query compilation.\n'"
4265,49663718,"b""This shouldn't be needed\n"""
4398,50874005,b'The URL should just be part of the resource and not formatted in (allows localizing content later if we do that).\n'
4358,50431901,b'Using the `BuildDependsOn` property is more idiomatic.\n'
4358,50892433,"b'Just `@(_CommandsLibrary)`... Actually, just hard-code `$(MSBuildThisFileDirectory)..\\..\\lib\\net451\\Microsoft.EntityFrameworkCore.Commands.dll` here and get rid of the item group.\n'"
4358,50892477,b'I think `$(TargetDir)` might be more reliable\n'
4358,50892574,b'(`$(OutputPath)` could be relative)\n'
4359,50940232,b'Make this a protected virtual property so that overrides of CreateQueryBuffer can access it.\n'
4348,50328324,b'Anyway we can capture this in the SqlServer type mapper? I thought it was already designed to handle lengths.\n'
4348,50328690,b'Possible to simplify?\n`=> column.Table.Database.SqlServer().TypeAliases?.ContainsKey(column.DataType) == true;`\n'
4348,50328709,b'`HasTypeAlias`?\n'
4348,50330867,b'Sure.\n'
4348,50330895,b'OK. Will do.\n'
4348,50878379,"b""What about rowversion and uniqueidentifier - would these map to byte[] and string CLR types, respectively, and need to be excluded?\n\nAlso, I don't think date, datetime, or smalldatetime allow max length (at least per SQL Server, not sure about `HasMaxLength()`), but those would be excluded implicitly by CLR type in `MaxLengthQualifiedDataType`\n"""
4348,50879313,b'What about decimal/numeric that take a precision and scale vs. a single max length? anything to consider for that or outside the scope of #4312 ?\n'
4348,50879919,"b'Please don\'t review just yet - I\'m in the process of updating this and will add the ""Needs Review"" tag back when it\'s ready. Nonetheless I take your point and will check those scenarios.\n'"
4433,51323970,b'Formatting.\n'
4433,51324154,b'Duplicate null check of selectExpression. Suggest doing the projection count test before pulling out the conditional expression.\n'
4433,51324250,b'Could use null-conditional here and omit the null comparison above.\n'
4465,51632857,"b""Should the plain `HasDefaultValue()` (without `Sql`) contain similar logic? I can't remember if there is a reason we only do it in the SQL version.\n"""
4465,51633559,b'`HasDefaultValue()` does not contain any logic for ValueGenerated since it does not required value generator. @ajcvickers  can comment more on that.\nAnother question - Should `HasComputedColumnSql()` should have similar logic? It sets `ValueGenerated.AddOrUpdate`.\n'
4465,51641343,"b'@divega @smitpatel I think we probably should do it on HasDefaultValue as well so that the update pipeline will back-propagate the value. If the value is explicitly set, then the update pipeline should do nothing with it anyway. But it is possible that this will cause issues (bugs?) with other parts of the stack, such as the creation of identity columns by MIgrations. if so, we may want to fix the issues, or we may want to revisit.\n\nHasComputedColumnSql should again only set AddOrUpdate if no other value has been explicitly set.\n'"
4465,51643054,"b"":+1: on also setting it for `HasDefaultValue` - you can get an entity instance that doesn't match database values after `SaveChanges` without it.\n"""
4465,51648819,b'Updated.\nAdded `ForSqliteHasDefaultValue` API which was not present before. (not sure of reason)\n'
4439,51336214,b'@rowanmiller & @divega - Any suggestions for exception message?\n'
4439,51646228,"b""Here is my proposal:\n\n> The child/dependent side could not be determined for the one-to-one relationship that was detected between '{declaringEntityType}'.'{dependentToPrincipalNavigation}' and '{principalEntityType}'.'{principalToDependentNavigation}'. To identify the child/dependent side of the relationship, configure the foreign key property. See <FWLink> for more details.\n"""
4439,51646350,b'FWLink would probably go to here http://docs.efproject.net/en/latest/modeling/relationships.html#one-to-one\n'
4439,51647046,b'Navigations can be null (using fluent API).\nLink for more details?\n'
4439,51647736,b'I think it can be <TypeName>.<Navigation> if there is a navigation property and just <TypeName> if there is none.\n'
4439,51647900,b'http://go.microsoft.com/fwlink/?LinkId=724062\n'
4464,51635369,b'StringComparer.OrdinalIgnoreCase?\n'
4464,51638787,"b""Not sure this is cleaner than what was already in place:\n1. IMO, the shape and the name of the FieldDbDataReader are weird even for an internal type because it is an incomplete wrapper for DbDataReader that mainly only extends what `GetFieldValue<T>(string)` does and because the name doesn't seem to mean anything.\n2. It may not matter in this case but accessing the fields by index is generally faster than doing it by name. Incidentally using EF for this would have made the code nicer and use indexes (because shapers use indexes) at the same time :smile:\n"""
4464,51641810,"b""@divega I certainly debated whether to include this internal class or not. I'm not convinced it is the right move either. If manually mapping field names => field index via dozens of `.GetOrdinal()` calls is okay, I'll revert to that approach instead.\n"""
4464,51643467,"b""DbDataReaders already map field names to field indexes. I don't think we have enough evidence that adding our own map here will be better. IMO, the only optimization that is worth considering is to avoid using the map for each row, i.e. only use it once at the beginning of a query and store the field index as we were doing in some of the code you have replaced in this PR. If we convince ourselves that we don't need that optimization then I would suggest just leverage the map the the reader returned by the provider as that will be less code and probably as fast as maintaining our own map.\n"""
4464,51645024,b'E.g. we could have extension methods that take the field name and return the value by calling the `GetOrdinal()` method every time.\n'
4464,51645325,"b'Would it be worth doing some perf testing to understand the value of getting the indexes only once per query vs. getting them every time in the reverse engineering scenario?\n\nBTW, I have seen in some of the code in the rest of the PR we have hardcoded ""magic"" numbers for the field ordinals. I think that is brittle as changes to the SQL queries will cause it to break. Once we pick a pattern we should use it consistently.\n'"
4464,51646028,"b""Maybe I missed the point of your remark. This class caches the field/index map for each reader and doesn't refresh it per row. From a reveng perspective, the perf gain is probably not worth adding more code. We could settle for something simpler, such as an extension as simple as \n\n``` csharp\npublic T GetFieldValue<T>(this DbDataReader reader, string name) \n    => reader.GetFieldValue<T>(reader.GetOrdinal(name));\n```\n"""
4464,51653696,"b""Yep, I knew it didn't refresh it per row, but it did the name/ordinal lookup per field per row which the previous code avoided. \n\nAnyway, I agree the simple extension method you have in the new iteration makes the code cleaner. We can always come back to optimize this code if we find perf issues.\n"""
4464,51654295,b'Is `SqlDataReaderExtensions.GetStringOrNull()` still in use after this change?\n'
4464,51654909,"b'Nit: Personally I prefer the low-tech implementation that was there before. Also, not sure if it matters but I think the new implementation will throw if SQLite ever starts supporting a different option, while in the old implementation it would return null, correct?\n'"
4464,51658837,"b""Good catch. No, it's not used anymore. Will remove.\n"""
4464,51662005,"b'>  the new implementation will throw if SQLite ever starts supporting a different option\n\nSeems unlikely, but since the ""low-tech"" implementation works, I\'ll leave it alone.\n'"
4518,52233809,b'typo\n'
4518,52234502,"b'""providers-beware""? (assuming providers can re-implement this)\n'"
4508,52204271,"b'This behavior is odd to me, but the team seems to be OK with it for now. cc @rowanmiller \n'"
4508,52223982,b'I agree it is odd. But it seems fundamental to the way we figured out we could fix this issue. Do you have a different approach in mind?\n'
4508,52234026,"b'The way I imagined the fix originally was to unwrap the enum value in the model snapshot during serialization, and compensate for the mismatch between the current model and the model snapshot in the model differ.\n'"
4508,52256566,"b""I like this approach better... to me the enum is just sugar for the actual value. I'm not super passionate either way... just feels like we are best insulated from renamed enum types/values that way.\n"""
4508,52259468,"b""I think we should do whatever is easier. We don't support arbitrary types in annotations because we can't serialize and deserialize them. We also don't constrain what kinds of types can be mapped by providers. This means if a user puts a default value of some arbitrary type on a property, then we will bomb. As far as I know we are not attempting to fix this for v1, but we decided we do need to support enums because they are very common. So the question was how to do this in the simplest way possible. If we had a generalized mechanism to support arbitrary types, then we would use that. Until then, I say do whatever is easier.\n"""
4508,52262697,"b"":+1: on taking the easiest possible approach that works for now. I was thinking I like @bricelam's idea slightly better because I suspect when/if we add a more general type mapping feature it is going to be desirable to be able to set and get the default value as an instance of the actual type (and we'll probably have to tackle serialization as a separate aspect). However I am not even sure that enums in general should be mapped as primitive types as opposed to model types so any thinking in this area can be invalidated by that (see one of the reasons at http://www.postgresql.org/docs/9.2/static/datatype-enum.html).\n"""
4508,52366176,b'This approach is easier since Enum is out of picture as soon as we store in metadata. Which avoids any extra dealing with Enum types later.\nShould I merge with this?\n'
4508,52371707,b'I am ok with it.\n'
4506,52338273,"b""If the principal end is ambiguous, then its CS should be null. So the only condition here should be\n\n```\nforeignKey.GetPrincipalEndConfigurationSource() != null\n```\n\nIf there are places like `HasOne` that set the principal end CS when they shouldn't then they need to be fixed.\n"""
4381,50607050,"b'@Eilon @pranavkm @victorhurdugaci It might be a chicken-and-egg problem, but are we going to add the CLI packages to our feed?\n'"
4381,50607228,"b'For the xunit runner I actually manually pushed some CLI packages to our feed. If you need something from there, I think we should do the same thing as we do for CLR: gated-clone with some sort of verification.\n'"
4381,50607280,"b'Yup! They had some issues with their packaging which was why I was avoiding pulling their packages in, but I could set up the CoreCLR configuration to clone the CLI packages.\n'"
4381,50607306,"b""There's another problem. Since we don't always have the latest CLR, the packages in the dotnet-cli feed might require never versions. \n"""
4381,50607954,b'Not used anymore\n'
4381,50608078,"b""I'm not sure mismatched versions will be an issue. The common utility libraries are rather self-contained, so using different versions in different tools should be fine.\n"""
4381,50608123,b'Required?\n'
4381,50608216,"b""My worry is that you'll not be able to restore because the packages on the CLI feed reference a newer version of the CLR which is not part of their feed and we only have the older version on aspnetcidev/volatile\n"""
4381,50608421,"b""Yes, to satisfy EF's [API consistency tests](https://github.com/aspnet/EntityFramework/blob/dev/test/Microsoft.EntityFrameworkCore.Tests/ApiConsistencyTestBase.cs). That the namespace our `[NotNull]` lives in.\n"""
4381,50897472,"b""So what's the course of action here? I assume other tools are also starting to need these...\n"""
4381,50898088,"b""It looks like you added these in f2a1c5dbea6446f7acc5e40cb68750a660b0a694. We're free to remove them now?\n"""
4532,53069190,"b""builder can be null after running conventions.\nAlso shouldn't source be upgraded before running convention. (since some conventions do rely on CS)\n"""
4532,53070333,b'Will fix\n'
4550,52812911,"b""don't forget to revert this\n"""
4550,52812948,"b""This should be gone if you're running tests with dotnet test\n"""
4550,52813035,b'@bricelam is this change okay?\n'
4550,52813072,"b""Line 20 in this file shouldn't be there anymore\n"""
4550,52813083,b'Seems unnecessary but fine\n'
4550,52813173,b'xunit.runner.aspnet should be gone from dependecies\n'
4550,52813241,b'Ugh... Probably not related but this dependency should go away. @bricelam ?\n'
4550,52813259,b'Same for line 44\n'
4550,52813282,"b""This shouldn't be here\n"""
4550,52813493,"b""Not sure what it's used for. @natemcmaster or @lajones might know.\n"""
4550,52814666,"b""@bricelam @victorhurdugaci  I'm speculating, but after we have scaffolded the .cs files we go ahead and compile using Roslyn just to check that the C# we're producing compiles. Could this reference be for that?\n"""
4554,53238994,b'Typo\n'
4554,53255164,b'The hard-coded string.Concat methodinfo seems concerning. Can you elaborate?\n'
4554,53263705,"b""this is to unify the types of binary operation after nav rewrite. During the rewrite types get changed from non-nullable to nullable, e.g.\n\nfrom c in ctx.Customers\nwhere c.Detail.Id == 5\nselect c\n\nthis compensation needs to happen because c.Detail.Id will be changed to int?.\n\nWe take object into account also for cases where property is compared to null constant (which has it's type set to object). \n\nstring.Concat is special cased for cases like:\n\nfrom c in ctx.Customers\nselect c.Detail.Name + 1\n\nThis will use BinaryOperator with a method (string.Concat), and for this case we don't want to change the type of that second argument because it won't match the method signature.\n\nHowever I think we can remove the special case for object and this method altogether, currently. This will cause null constant be evaluated on the client, but since everything is evaluated on the client anyway it doesn't make much difference. Once SelectMany-GroupJoin-DefaultIfEmpty is being properly translated to sql, we can re-evaluate this scenatio (we already have tests in place) \n"""
4537,52671398,"b'we could change this to work the same for one letter aliases as well as multi letter aliases, i.e.\ncurrently we have:\na -> a0, a1, a2\nbb -> bb0, bb00, bb000\n\nwe should aim for \nbb -> bb0, bb1, bb2, bb3\n'"
4537,52673986,b'updated.\n'
4537,52772887,b'Use named parameter to clarify false here.\n'
4537,52773052,b'Named parameter.\n'
4537,52773297,b'Is a null alias allowed here now?\n'
4537,52773360,b'queryCompilationContext null check?\n'
4537,52773593,b'Regular Check.NotEmpty is fine\n'
4537,52773757,b'Never reach here due to assert above.\n'
4537,52774048,b'Lets try and do this without Regex. Use Char.IsNumber while iterating backwards.\n'
4537,52774685,b'It looks like we are losing the behavior of trying to re-use the range variable name. We need to try and preserve this behavior. I.e. Only unique-ify when necessary.\n'
4537,52806479,b'Added check.\n'
4537,52806558,"b""null alias is still not allowed. We unique-fy alias before assigning it therefore we don't use it in direct call to base.\n"""
4537,52817398,"b'break those long lines into 2 separate ones, we usually do something like:\n\nvar innerSelectExpression \n   = handlerContext.SelectExpressionFactory.Create(handlerContext.QueryModelVisitor...)\n'"
4537,52817929,"b'we can probably change the base generated name from ""subquery0"" to ""subquery"", since it\'s being uniquefied anyway\n'"
4537,53204568,b'Redundant check\n'
4537,53205516,b'Its for Empty Check. if currentAlias is empty then we return empty. Is there any other way to check?\n'
4537,53238216,"b'Or, currentAlias.Length == 0\n'"
4598,53394395,"b""A bit OT but I wonder why some queries have `[g].[Discriminator] IN ('Officer', 'Gear')` and some others `([g].[Discriminator] = 'Officer') OR ([g].[Discriminator] = 'Gear')`\n"""
4598,53394993,"b""cc @maumar perhaps a bug in EqualityPredicateInExpressionOptimizer? Or maybe we don't run it over the secondary include queries?\n"""
4598,53396492,b'@maumar @anpete please help me file a good bug on this :smile:\n'
4598,53396886,b'#4603\n'
4602,53395430,b'@davidfowl Good enough?\n'
4602,53397140,b'Doh! `DOTNET_HOME` is being removed in dotnet/cli#1478\n'
4602,53397821,"b""If you find a `-v` or `--verbose` at say, `i = 4`, then having re-calculated `args` wouldn't you need to start at `i = 4` again in order to look at whatever was originally at `i = 5` but now is at `i = 4` instead of just carrying on with the `i++` in the loop?\n"""
4602,53397960,b'Seems like we should raise an error if `DOTNET_HOME` is not defined?\n'
4602,53398093,b'Add the exit code to the message.\n'
4602,53398496,b'Am I misunderstanding? It looks like you are expecting the project to be one level down from the current directory? But I would hope we could run a command from any directory we like and just pass in the project directory to which we want to point?\n'
4602,53400474,"b'The loop breaks after this. We find the first one, process and remove it, then stop\n'"
4602,53400521,b'Useless information. The user can manually build their project to see the errors.\n'
4602,53400579,b'(The experience is more-or-less the same in VS using the NuGet commands)\n'
4602,53400980,"b""You currently run the tool in the project's directory (i.e. the one containing the `project.json`). We could add a `--project` parameter if we wanted. It just seemed YAGNI to me. cc @rowanmiller\n"""
4602,53401061,"b""Oh, I remember why I didn't. `dotnet.exe` can only find `dotnet-ef` if you run it in the same directory as the project. This is a limitation of how it looks for tools.\n"""
4602,53401084,"b'I don\'t know - a message that just says ""Build failed."" doesn\'t seem very useful. Maybe include what the user needs to do to see the errors?\n'"
4602,53401707,"b""Sounds like we're going to assume it's on the path. (see dotnet/cli#1150) I'll update the PR.\n"""
4602,53401712,"b""I think it's ok as-is. This is the same experience we have in VS. If the build fails I think it's pretty intuitive that you build the project to see errors.\n"""
4602,53402624,"b""OK. As long as the error message you get if you're in the wrong directory is helpful.\n"""
4602,53402696,b'OK. Seems like a small helpful thing we could do for the user to me - but no big deal.\n'
4602,53402830,"b""OK. Sounds fine so long as if there are multiple `-v` or `--verbose` flags it doesn't cause some strange error later on.\n"""
4602,53404488,"b'It\'s more-or-less useful. `dotnet.exe` reports the following.\n\n> No executable found matching command ""dotnet-ef""\n'"
4602,53404701,"b""lol, it's no worse than what DNX did. :wink: \n\n> Error: Unable to load application or execute command 'ef'.\n"""
4602,53405384,"b""They're swallowed gracefully by the parser. :cocktail: \n"""
4602,53408028,"b'Yeah - I\'ve seen that error message and not been clear on what to do myself. If it\'s easy for us to add something that says ""you need to be in the project directory to run this command"" I\'d do that. In general I think we should aim for a higher level of usefulness on the error messages than was typically provided by DNX :wink:\n'"
4602,53408100,b'OK. Sounds good.\n'
4611,53552486,b'Is this change intentional? Do you know why it is commented out? \n'
4611,53552689,b'It was already commented out. TODO note above it says complex projection translation.\nAutoformat on file changed formatting. I will revert it so the commit does not mislead in future.\n'
4467,51651683,"b'Curious, why 18?\n'"
4467,51654553,b'Pulled the value from the `DefaultDecimalPrecision` in the `SqlGenerator` for EF6\n\nEF6 also has a fair amount of logic around the total length of the string and conditionally adds a server side `decimal()` call.\n'
4467,51655856,b'I wonder if 30 would be a better number so that there is no data loss for any .NET decimal instance. \n'
4467,51657100,b'Do we want to consider a solution closer to what EF6 does? Upon closer inspection it looks like a longer decimal (i.e. 30 characters long) would result in SQL that looks more like:\n\n``` sql\ncast( 1.1234567890123456789012345678 as decimal(30))\n```\n'
4467,51658085,"b""I don't know if/when we need the cast. I would test without it and only add it if necessary. I was just pointing out that using 18 will cause rounding and data loss for some .NET decimal instances, and it seems unnecessary to go through that data loss given that SQL Server supports even more precision. \n"""
4467,51658240,"b'Also if we had to add the cast, I imagine there is a chance we would need to provide the right scale, not just the precision. Yet another reason to avoid it if possible.\n'"
4620,53686158,b'Parameter values need to stay strongly typed here. Move the formatting to the formatter delegate. \n'
4620,53789025,b'Moved!\n'
4550,54015965,"b""Wait. These tests don't use `MetadataReferencesProvider`...\n"""
4631,53865177,"b""Is this correct? Don't you have to reference the Schemas `.PARAMETER` in some way? Similarly for Tables below.\n"""
4631,53865293,b'Does this work fine with the new command line? What happens if a user passes no `-s` or `-t` options on the command line?\n'
4631,53866391,b'Yes. `CommandOption.Values` will return an empty list if none are specified.\n'
4631,53866794,"b""I'm not following... The only change here is to give them a default value of `@()` which is PowerShell for an empty array. That way if they're not specified, they're empty instead of null.\n"""
4631,53866927,b'Nm. I was mis-reading it.\n'
4631,53866958,b'OK. Sounds good.\n'
4638,54177525,"b""Shouldn't need the parantheses.\n"""
4638,54179513,"b'True, but I left it deliberately so it will be easy to search & replace when we strip out dnx451.\n'"
4591,53721035,b'`TCustomAttribute` better?\n'
4591,53721137,"b'haha, nice spot\n'"
4591,53722552,b'can be merged as else in previous if.\n'
4591,53722800,b'parameter name for Boolean.\n'
4591,53722838,b'parameter name\n'
4670,54600669,"b""Why don't we need this anymore? Does dotnet-cli automatically include resx files now?\n"""
4670,54601103,"b'I think we can get rid of "".testPublish/**"" now. KoreBuild stopped using this path for testing\n'"
4670,54605264,"b""I decided to embrace the CLI's default name and compensate in MSBuild instead.\n"""
4670,54605339,b'Cool. Will do.\n'
4667,54602537,"b'Whenever we are using EscapeLiteral, shouldn\'t we keep the ""N""?\n'"
4667,54602784,"b'Here also. Seems like we shouldn\'t change this line because EscapeLiteral doesn\'t add ""N\'"".\n'"
4667,54623894,b'Nice catch! Will update at all places affected.\n'
4680,54758539,b'Calling CreateKey twice here.\n'
4680,54758599,b'Need an exception message here.\n'
4680,54758734,b'Exception message.\n'
4680,54758877,"b""Use ToList here. Doesn't matter much, but slightly more efficient for short term use of the data structure.\n"""
4680,54759697,b'Use Assert.False.\n'
4680,54760432,b'Assert correct exception message here. (Would have caught that there is no exception message in the product code.)\n'
4680,54760525,b'Assert message.\n'
4680,54760741,b'Consider using expression body syntax where applicable.\n'
4688,54824475,"b'I was thinking that `EntityType` would implement this interface, not `IMutableEntityType`, since `InternalEntityTypeBuilder` is using `EntityType`.\n'"
4688,54825707,b'Talked to @AndriySvyryd and will revert to casting to EntityType and add a note to the public conventions bug.\n'
4669,54512803,b'@rowanmiller to review the exception message.\n'
4669,54515783,"b'This might be too strict. Perhaps comparing the type string would be more correct:\n\n```\n(_relationalExtensions.For(duplicateProperty).ColumnType ?? _typeMapper.GetMapping(duplicateProperty).DefaultTypeName).Equals(\n    _relationalExtensions.For(property).ColumnType ?? _typeMapper.GetMapping(property).DefaultTypeName,\n    StringComparison.OrdinalIgnoreCase)\n```\n\n@ajcvickers Thoughts?\n'"
4669,54599040,"b'I think what @AndriySvyryd has is better because it considers explicit column types set for the properties, which just getting the type mapping does not do. So, for example, two string columns, one marked with ""nvarchar(20)"" and the other with ""varchar(20)"" would not flag an error.\n\nIn the old stack if you put an explicit mapping on one property but not the other, then we would use that explicit mapping for both. We could consider doing that here, but I don\'t think it is worth the additional code complexity.\n'"
4669,54625959,"b""I think it can be more concise with\n\n> '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different data types.\n"""
4669,54626120,"b""BTW do we have the types? If so, we should include that in the message too...\n\n> '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different data types ('{dataType1}' and '{dataType2}').\n"""
4669,54627650,b'updated with second message since we have type info available\n'
4669,54627732,b'Changed to string based comparison of types.\n'
4656,54320660,b'Will revert\n'
4656,54320667,b'Will revert\n'
4656,54674086,b'this is way nicer than what I was trying to do - this should unblock another group of LOJ tests\n'
4706,55103371,b'will remove this comment\n'
4706,55103377,b'and this one\n'
4696,55081541,b'Consider keeping entries as the first arg.\n'
4704,55100051,b'Verify message. Fine to move the tests to UnitTests so you can access the string resource.\n'
4704,55101210,"b'Unless we changed something, string resources are public now and can be accessed from functional tests.\n'"
4704,55101526,b'Even easier then :-)\n'
4723,55395093,"b""While you're at it, this should be `compileFiles` since it's pointing directly to a file.\n"""
4723,55395534,b'Thanks!\n'
4723,55395803,b'...and `resource` `resourceFiles`?\n'
4723,55396228,"b""resource is the right one, it's a bit different just because you can specify the name of the resource.\n"""
4723,55396263,b'...and `content` `contentFiles`?\n'
4718,55307799,b'why is this applied here?\n'
4718,55316770,b'Inheritance between Gear and Officer. \n'
4720,55443985,"b'I think the implementation details of what it means to be ""added to the model"" are leaking out here. Conceptually (for the app developer) all properties (with a public getter/setter) are included in the model but EF can\'t work out what to do with this one.\n\nHere is my suggestion:\n\n> Unable to determine the relationship represented by navigation property \'{entityType}.{navigation} of type \'{propertyType}\'. Either manually configure the relationship, or ignore this property from the model.\n'"
4720,55444285,"b""> The property '{entityType}.{property}' could not be mapped, because it is of type '{propertyType}' which is not a supported primitive type or a valid entity type. Either explicitly map this property, or ignore it.\n"""
4720,55444448,"b""> The property '{entityType}.{property}' is of type '{propertyType}' which is not supported by current database provider. Either change the property CLR type or manually configure the database type for it.\n"""
4720,55444726,"b""> The property '{entityType}.{navigation}' is of an interface type ('{propertyType}'). If it is a navigation property manually configure the relationship for this property by casting it to a mapped entity type, otherwise ignore the property from the model.\n"""
4737,55466986,"b""I don't like the out parameter, but couldn't figure out a nice way to factor this method. Better to return KVP instead or is this fine?\n"""
4737,55580599,b'This is fine for private impl.\n'
4737,55580773,b'How about ExpressionTransformingQueryModelVisitor? Can the pattern be applied anywhere else?\n'
4737,55591193,"b""done, the only other place I could find was EntityQueryModelVisitor, but I don't think the pattern would be that useful there\n"""
4719,55592356,"b'Good. This starts a simplification I began writing but never got around to committing. We can simplify this even further by just relying on ""PRAGMA index_list"" you added below to provide a list of all indexes on a table.\n'"
4719,55592661,b'See https://github.com/natemcmaster/EntityFramework/blob/50436db8a8f4a280a2548eb2a6216bf55bf17d35/src/Microsoft.EntityFrameworkCore.Sqlite.Design/SqliteDatabaseModelFactory.cs for reference\n'
4719,55593488,b'IMO `isPk` makes this section more understandable.\n'
4719,55593795,"b'Nit: coding preference. Instead of creating all of these local variables, logging them, and then setting as the property on another local variable, just move this log below ColumnModel instantiation and log `SqliteDesignStrings.FoundColumn(table.Name, column.Name, column.DataType....` etc\n'"
4719,55594268,"b'Can this be combined with FoundIndex? something like `Found index: Name={name}, Table={tableName}, IsUnique={IsUnique}`\n'"
4719,55594399,"b""If we simplify the fetching (as I suggest above), we won't need this error messages as indexes will only be fetched after tables have been filtered.\n"""
4719,55594541,"b""I can add the local variable `isPk` back in as shorthand for `primaryKeyOrdinal != 0` and use that. But I'd rather that what goes out in the trace message is just exactly what we got back from the DB, no logic on top of that, to be consistent with all the other trace messages.\n"""
4719,55594986,"b'The diff engine on this didn\'t come out very well. I didn\'t add in ""PRAGMA index_list"". It was already in `GetIndexes()`. But let\'s discuss.\n'"
4719,55595878,b'If we do your suggestion of moving finding the indexes into `GetIndexes()` - then yes there will only be the one message.\n'
4719,55595906,b'Noted.\n'
4719,55596094,"b""Yep - that's probably OK. Will do.\n"""
4719,55598837,"b""This function feels quirky. I have an idea for how we can make this cleaner. Let's discuss\n"""
4719,55599567,"b""Actually, no. `primaryKeyOrdinal` is what we read, the setting of `IsNullable` and `PrimaryKeyOrdinal` on the `ColumnModel` requires logic So would rather just output what we receive. But your approach does work for `IndexModel` - so I've updated that to work as you suggest.\n"""
4719,55620746,"b'Syntax error? I believe this should be `!=` in sqlite.\n\nAlso, do we not filter the migrations history table?\n'"
4719,55620798,b':+1: much cleaner\n'
4750,55718051,"b'Should this just happen in the action now? Or, is this the pattern for required config?\n'"
4750,55718942,b'Yep. This is the pattern for required config.\n'
4719,55721687,"b""Nope on the syntax error - both `<>` and `!=` are valid SQL and we seem to use `<>` elsewhere - see [the code we use for generating SQL queries for Sqlite](https://github.com/aspnet/EntityFramework/blob/d4b96d5d8d2f822f22fed70973fa55aed32e0673/src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs#L35).\n\nRe the migrations history table - it seems right to exclude it so I'll add in the same clause we use for excluding it for `SqlServerDatabaseModelFactory`. Just FYI though: it wasn't there before.\n"""
4719,55727568,"b'+1 for `<>`. It\'s more ""ANSI""\n'"
4740,55571071,b'Note: have added a space before `ORDER BY` - so that there is whitespace between it and the previous clause.\n'
4747,55720656,b'Add asserts that `derivedFk` has`SpecialOrders` and `null` navigations\n'
4747,55721037,"b'Instead of adding `modelBuilder.Ignore<OrderCombination>()` everywhere you could put [NotMapped] here and add it explicitly where needed, which should be less places.\n'"
4575,53108980,"b'Typo on ""required"".\n'"
4575,53110225,"b""I am not sure why this part changed but isn't this potentially a hot path? The LINQ query over all parameters could be expensive. \n"""
4575,53111578,"b""I am not too fond of using tuples for this and would consider defining a type for this instead. Let's hear what others think. @anpete? \n"""
4575,53111755,"b""Isn't the default value of null contradicting `[NotNull]`? Did you intend to remove the default value?\n"""
4575,53198375,"b""This was just a factoring change. The logic already existed in `RelationalCommand`:\n\n``` cs\n        public virtual void AddParameter(IRelationalParameter relationalParameter)\n        {\n            Check.NotNull(relationalParameter, nameof(relationalParameter));\n\n            if (relationalParameter.InvariantName == null\n                || _parameters.All(p => p.InvariantName != relationalParameter.InvariantName))\n            {\n                _parameters.Add(relationalParameter);\n            }\n        }\n```\n\nThis isn't the main hot path scenario, this is only hit when we have a cache miss on the command cache.\n\nThe previous implementation ignored duplicate definitions by default. This seems like a dangerous assumption and moving the logic here revealed an issue with the `ReaderModificationCommandBatchTest.CreateStoreCommand_creates_parameters_for_each_ModificationCommand` test.\n"""
4575,53198730,"b'The default is correct, the value should be `[CanBeNull]` since it is optional for parameterless commands.\n'"
4575,55245610,b'formatting\n'
4575,55246670,"b""Nit: Core can't really know about FromSql here. \n"""
4575,55247318,"b""I'm not sure this type is necessary. It also doesn't look like a traditional list type.\n"""
4575,55247475,b'Agree. \n'
4575,55257167,"b'Would we rather have glorified tuple (a poco with properties for the `RelationalCommand` and the `IDictionary<string, object>`) or more of a wrapper / facade?\n'"
4575,55258699,"b'True, but it would be misleading to say this was here for any other reason.\n\nI wonder if it would be better in the long run to use some kind of parameter metadata to determine how to compare / cache.\n'"
4575,55262113,"b""It's a bit strange, but this class exists for the sake of API surface and `CompositeRelationalParameter`s. While this is more of an internal/provider level API, it might be worth having a design meeting/discussion about the options and patterns here.\n"""
4575,55274014,"b'I would suggest creating the simplest type that could work (maybe the POCO), try to find a good name for it and then looking at it again to see if it encapsulation would be compelling. There are no hard rules. You have to use some refactoring instinct :smile:\n'"
4575,55274571,"b'Also, is this the only place that returns a command and a list of parameters? I.e. do we have something like this elsewhere or could we reuse something like this? Sorry, I know I am stating the obvious.\n'"
4575,55275600,"b""This only really happens in two places, here and in the `ReaderModificationCommandBatch`. It might be useful in migrations in the future, but we currently don't use parameters in any of the commands there.\n"""
4575,55431838,"b""On second thought, this isn't core. We don't have the concept of Commands outside of Relational.\n"""
4575,55452540,b'_nothing to see here_\n'
4733,55453549,"b""@bricelam This is OK for now if you need to get this in. But I'd prefer to come up with a new short-form for `--schema`. It's odd that `--table` still has one but `--schema` does not.\n"""
4733,55464236,"b""This was the fix we decided on in triage. You can create a new issue if you think it's common enough to deserve a short name. Personally, I think we should remove even more short names.\n"""
4733,55586751,"b""If table is going to be more commonly used than schema then I think having a short name for table makes sense and I don't think we need symmetry between table and schema. Otherwise I think we should reassess. \n"""
4733,55589803,"b""> Personally, I think we should remove even more short names.\n\nAgreed, I think we've gone a little overboard with them. To me they are most useful when you type by hand a lot (`-verbose` etc.). I imagine things like table/schema/etc. will generally be stored in a script etc.\n"""
4733,55593491,"b""I think users will find the lack of symmetry odd. But I'm OK if we wait and see. It will be easy to add some abbreviation back in if we find it's wanted. Since we have no exclusion syntax, I do expect that the average number of `-t|--table`s on the command line will exceed the number of `--schema`s, sometimes significantly.\n"""
4740,55886417,"b'Could you just make this a one-liner? \n`Version.TryParse(_connection.ServerVersion, out _serverVersion)`\n'"
4740,55886605,b'`_serverVersion?.Major >= 11` ..and elsewhere\n'
4740,55888726,b'Sure.\n'
4740,55889849,b'OK.\n'
4767,55785237,b'Is there a difference between the .NET Core and ASP.NET Core project kinds?\n'
4767,55785304,b'Can we open the file?\n'
4767,55785445,b'This limitation feels weird. We should brainstorm about alternatives\n'
4767,55785661,"b'Hmm, Warning, Information, etc. semantics will be lost.\n'"
4767,55785964,b'Would it be cleaner to branch in InvokeOperation? I know it would have to change a bit... Maybe using an enum-like structure to abstract the differences. Example: `InvokeOperation $operation.AddMigration ...` Where `AddMigration` had string properties for `migrations add` and `AddMigration`\n'
4767,55855949,"b""Yes, this is the part I like the least about piping through to dotnet-ef. It's quirky and it leaves room for enhancement.\n"""
4767,55857597,"b'> Would it be cleaner to branch in InvokeOperation?\n\nMaybe. This was my original approach, but found it difficult to make it any cleaner than my current implementation. If only we could use powershell classes... :-/\n'"
4767,55858002,"b'We would need to parse the log output of the command to find the location it used....seemed like an unsafe precedent.\n\nBut on this note (related to the logging below), can make enhancement to dotnet-ef to produce more powershell-friendly output? e.g. dbcontext list --json is actually pretty useful.\n'"
4767,55864167,"b""Adding more `--json` flags on commands would be great! They're there for situations like this.\n"""
4767,55864608,"b""We could adopt a node-style output to help with parsing:\n\n```\nwarn: This is a warning\ninfo: This is information\n```\n\nOr we could pass through ANSI escape sequences and parse them out to determine logging level.\n\n(I don't actually like either of these ideas)\n"""
4767,55867975,"b""Yeah, not sure I like either but can't think of anything better. I filed https://github.com/aspnet/EntityFramework/issues/4771 to address this\n"""
4767,55868020,"b""I haven't been able to get an installation of WTE to work yet...so not sure.\n"""
4767,55869880,"b'How about instead, `$project.FileName.EndsWith("".xproj"")`?\n'"
4767,55892778,"b'Updated. Added a `--json` flag to ""migrations add"" and updated the cmdlet to use it.\n'"
4767,55893174,b'Alternative approaches:\n- install dotnet-ef into the project\n- bundle dotnet-ef in the commands package. Execute `corehost dotnet-ef ...`\n- make dotnet-ef a console app as well\n'
4767,55896711,b':+1: Nuget has [code like that](https://github.com/NuGet/NuGet.BuildTasks/blob/dev/src/Microsoft.NuGet.Build.Tasks/Microsoft.NuGet.targets#L22).\n'
4769,55865854,"b""Isn't this method too general a place to throw this specific error? It seems like we also use the method to resolve non provider services.\n"""
4769,55866923,"b""We use it to resolve EF services, and with the recent changes to D.I. registration if the app has not used a provider, then there typically will not be any EF services at all registered. The solution is to use a provider. So while it may not technically be a provider service that we failed to resolve, the guidance to the user is still the same.\n\nWhile it is possible, but now unlikely, that the app may have EF services registered but not provider services, this method would then pass for all EF services but fail for provider services, in which case the message is still appropriate.\n\nThe only other case is that this method is being used for some other non-EF service, and that service is not registered. We could try to detect this case but it seems pretty obscure so I didn't attempt to do so.\n"""
4769,55871054,"b'> Entity Framework services have not been added to the internal service provider. Either remove the call to UseInternalServiceProvider so that EF will manage its own internal services, or use the method from your database provider to add the required services to the service provider (e.g. AddEntityFrameworkSqlServer).\n'"
4813,56370994,b'Recommend changing `like` to `such as` because this is a proper example.\n'
4734,55752360,b'IsCacheable?\n'
4734,55865090,b'Can we remove this and use IsCacheable directly?\n'
4734,55865173,b'Formatting. Consider R# code cleanup.\n'
4813,56905573,b'Are we not globalizing strings for dotnet-ef?\n'
4813,56905782,"b'Not yet. When they do, we will. :wink: \n'"
4873,56905410,b'Is this already being tracked in an issue? \n'
4873,56910440,b'Nope. I think I saw this assumption--that design-time always uses `Debug`--in a few other places across the stack.\n'
4873,56910565,b'When is this `null`/empty?\n'
4873,56910758,"b'Can you add a TODO to call `AppDomain.SetData(""DataDirectory"", ...)` on `net45`? It sounds like this tool will be going that direction...\n'"
4873,56911464,"b""I found odd corner cases, mostly due to restore errors. I think this is just due to the fact that we currently build against DependencyModel 1585. They've made lots of updates in the last 300 builds of cli.\n"""
4883,57023744,b'`IDbContextAdapter`? :trollface: \n'
4901,57366215,"b'No default value. This is not a user-facing API, so it will probably do more harm (by being forgotten) than good.\n'"
4901,57366280,b'No default value.\n'
4901,57366297,b'No default value.\n'
4901,57366907,b'Good point. Will remove\n'
4901,57370586,"b""I realized this after finding a few places where `CancellationToken`s weren't being passed downstream.\n"""
4893,57247927,"b""Don't worry, I'll add a comma. :wink: I don't always compile, but when I do...\n"""
4890,57193490,b'Why does this need a cast now?\n'
4890,57193957,"b'Refactoring artifact, will remove\n'"
4904,57407822,b':smile: \n'
4912,57509095,b'nit:does\n'
4912,57605107,b'Use SelectExpression.RemoveRangeFromProjection\n'
4920,57666288,b'Consider LINQ or GetShadowProperties extension.\n'
4928,57802585,b'This comment can be removed\n'
4907,57472725,"b""shouldn't we skip read altogether this if `--force` was used?\n"""
4907,57806906,"b""Bad news. This results in `Cannot serialize delegates over unmanaged function pointers, dynamic methods or methods outside the delegate creator's assembly.` :disappointed: \n"""
4661,56868772,"b""This doesn't feel right. We should only create the history table if `fromMigration` is null, empty, or `Migration.InitialDatabase`.\n"""
4661,56869078,"b'Nit: Can we reuse the concept of applied migrations here instead of introducing the concept of ""skipped"".\n'"
4661,57163688,b' _imho_   In thiscontext  i think this more suitable word (since we not apply migration that already was applied). But i could change it :)\n'
4661,57164238,"b'Well we create script when migration include firstMigration (left OR statement) or if we not have any migrations (right OR statement). Well this conditions little bit odd, i should change it :sweat_smile: \n'"
4661,57192918,"b""Nope, I was just nit-picking. I'm happy with whatever you think is best.\n"""
4661,57193596,"b""Shouldn't this be `if (fromMigration ...`?\n"""
4661,57193733,b'It might be worth adding some tests for this.\n'
4661,57311508,"b""make sense, i'll add it.\nThis new dotnet cli have really weak tooling right now, and debugging tests is real pain :cry: \n"""
4661,57382727,"b""Amen to that. If you run `build initialize` then open `EntityFramework.sln` it bypasses most of the CLI and Web Tooling workflow and lets you use plain-ol' csproj on Full .NET. You can run the unit tests using [TestDriven.NET](http://testdriven.net/).\n"""
4661,57857194,"b'@bricelam shame on me :scream_cat:, you are right this should be `if (fromMigration ...`\n'"
4657,54761114,"b'I would rather see all of this confirmation code inline in the `Execute` method for now. If we need it more generally later, we can always extract it.\n'"
4657,54761861,"b'We should make sure this logs something like ""Dropping database \'Northwind\' on server \'(localdb)\\MSSQLLocalDB\'."" and add it to [the list of loggers that get forwarded to the console](https://github.com/aspnet/EntityFramework/blob/dev/src/Microsoft.EntityFrameworkCore.Commands/Design/Internal/CommandLogger.cs#L18-L22).\n'"
4657,54762139,"b""I don't think this information is necessary. It's expected that if they cancel, nothing happens.\n"""
4657,54763500,"b'Idiomatic PowerShell is something like the following. I\'m not sure if there is idiomatic CLI; I couldn\'t find any examples of confirmation in the DNX or CLI repositories. Regardless, I think we should at least tell them the database and server name here.\n\n```\nConfirm\nAre you sure you want to perform this action?\nPerforming the operation ""Drop Database"" on target ""\'Northwind\' on server \'(localdb)\\MSSQLLocalDB\'"".\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is ""Y""):\n```\n'"
4657,54791350,"b""Sure, i think it would be nice to see such feature in DNX repo (Microsoft.Extensions.CommandLineUtils namespace) i'll create issue for them :smile: \n"""
4657,54792427,"b'Well i try to found any confirm like behavior in asp net libs and have no success. According to my experience usually command line prompt looks this way - some bla-bla, are really sure and (y/N) where capital letter is default option. But i could change this message to this one (and implement all this options)\n'"
4657,54792897,"b"":+1: good mention. i'll check it.\n"""
4657,54794680,"b""(If it doesn't, you can just file a bug--no need to fix in this PR)\n"""
4657,54795134,"b""Ok, i'll create bug after merge.\n"""
4657,54795339,"b""Oh no, I don't want it to look like PowerShell. :smile: It was just an illustration of what information and options PowerShell engineers thought were important.\n\nI like your convention. Let's make it a thing. Just add a bit more information. Something like:\n\n```\nAre you sure you want to drop the database 'Northwind' on server '.\\SQLEXPRESS'? (y/N)\n_\n```\n"""
4657,54795574,b'Where database is `DbConnection.Database` and server is `DbConnection.DataSource`.\n'
4657,54796051,b'This one looks perfect :heart: \n'
4657,55264558,"b'I think this message needs to be generated by the caller (it will be different for PowerShell). Make `confirmCheck` take the two pieces of information instead of the message, and format them into a message in `DatabaseDeleteCommand.Execute`.\n'"
4657,55272529,"b""Great, I'll fix it.\n"""
4933,57962731,b'I thought we were just going to probe for our concrete metadata implementations from extensions.\n'
4933,57963084,"b'We were, but that information is not cached in a way that makes it fast to lookup--each type only caches its direct descendents. So this way worked out better in terms of a fast lookup.\n'"
4933,57963675,b'Guess I must be missing something; thought we could just probe for Model.\n'
4933,57964881,"b'Not sure what you mean. We decided as a team to use this mechanism of accessing cached metadata without changing the underlying interfaces. If you mean cast to model and use it if the cache succeeds, I agree that would be easier and less work, but in the big discussion on this subject its not what we decided to do.\n'"
4933,57980980,"b'OK, I guess I must have missed/forgotten why we decided to add the extra interfaces.\n'"
4946,58111757,b'IEntityTypeMember?\n'
4946,58113075,b'INamed?\n'
4946,58114354,b'IPropertyDefined?\n'
4946,58118524,b'Typo\n'
4946,58126261,b'`IPropertiesDefined` ? since there is a list.\n'
4946,58128983,"b'Either that or `IEntityTypeElement` (depending on what meaning you want to give to member, I feel a bit biased by CLR). It also seems that the word ""Type"" could be removed.\n'"
4946,58129666,"b'This is only for IKey, IForeignKey, IIndex which actually don\'t ""define"" but ""reference"" properties defined (or declared) by IEntityType (in turn, IEntityType doesn\'t implement this interface, which is a bit strange but I guess is by-design).\n'"
4946,58131129,b'The interface name I proposed means that the object is defined by properties which is semantically different from declares. Referencing is ambiguous since IForeignKey also references properties on the principal side.\n'
4946,58133225,"b""> The interface name I proposed means that the object is defined by properties \n\nGot it now, although it isn't very clear IMO.\n\n> Referencing is ambiguous since IForeignKey also references properties on the principal side.\n\nBut not directly in Properties, right? Aren't the properties from the principal side only in PrincipalKey?\n"""
4946,58133762,b'+1 for IEntityTypeMember\n'
4946,58134148,"b""> But not directly in Properties, right? Aren't the properties from the principal side only in PrincipalKey?\n\nCorrect\n"""
4946,58134451,b'IStructuralType?\n'
4937,57984493,b'nit: Move static above instance fields.\n'
4937,57984516,"b'Oh, and const?\n'"
4937,57985243,b'TryGetColumnExpression should really probe for ColumnExpression\n'
4937,57985383,"b'""unicode""\n'"
4937,57985497,"b'Rather than change all overloads, probably better to add a special case at the caller.\n'"
4937,57990654,b':+1: \n'
4937,58109502,b'Factor these two methods into a single method rather than copy/pasting all the logic.\n'
4937,58109529,b'Likewise here\n'
4937,58110312,b'Not sure why this constructor exists. Maybe consolidate with the one above.\n'
4937,58110348,b'Consider default value for unicode here as well.\n'
4937,58110443,b'One method with default value for unicode?\n'
4937,58114143,b'It is used for `NullMapping` at present which does not have clr type\n'
4937,58114236,b'already has default\n'
4937,58119046,b'Ah. I missed that.\n'
4946,58140984,"b""That would be weird because IEntityType doesn't implement it. I guess I am biased by EF6 too :smile: \n"""
4946,58141255,b'I guess EF6 had it wrong as both ETs and CTs are nominal.\n'
4946,58143518,"b""I think they idea was that NominalType: StructuralType but the former wasn't defined in the metadata API. ETs and CTs were structural because they had a structure, not because they were not nominal :smile: RowType was the only one that was purely structural. \n\nRegardless, I don't know what the right name would be.\n"""
4961,58259659,b'should change name of the function.\n'
4712,55251575,"b'It looks like we can just use _queryModel to store the current query. I think it means we can remove _parentSelector, too.\n'"
4712,55251904,b'Add a test with > 1 Intersects.\nAdd a test with a non-entity result type.\n'
4712,55251950,b'Looks good.\n'
4712,55578697,"b'Consider creating helper method: HandleSetOperation, parameterized on operator method.\n'"
4712,55620933,b'Done\n'
4874,57049647,"b""FYI https://github.com/dotnet/cli/issues/1858 \n(at the moment the tool and the app have to target the same TFM otherwise the tool can't be resolved)\n"""
4954,58145693,b'`Thread.MemoryBarrier()`?\n'
4954,58145839,b'We decided to copy the code directly from LazyInitializer to avoid making those all-to-easy mistakes around what works on one architecture or another.\n'
4954,58269709,b'Could you use the regular LazyInitializer here?\n'
4929,57810263,"b'@anpete , @maumar - Do we have something in current codebase which trims conditions like this? `0 = 1` is always false and there is actually no point of whatever is after OR.\n'"
4929,57816336,"b""@smitpatel Don't think so. Should be easy to add to the rather poorly named: CompositePredicateExpressionVisitor\n"""
4929,58269436,"b'@anpete , @maumar - Any suggestion for better name?\n'"
4929,58270011,"b'PredicateReductionExpressionOptimizer? ""Optimizing"" is generally how we talk about this stuff and this name aligns with some existing ones.\n'"
4977,58465008,b'Should this be `Microsoft.EntityFramework.Commands.OperationException`?\n'
4977,58465773,"b""Change return type of function? This doesn't compile.\n"""
4977,58467533,"b""Looks like we also need to update tests\n\n```\nMicrosoft.EntityFrameworkCore.Design.Internal.OperationExecutorTest+SimpleProjectTest.AddMigration_works_cross_domain [FAIL]\n      System.InvalidCastException : Unable to cast object of type 'System.Collections.Hashtable' to type 'System.Collections.Generic.IEnumerable`1[System.String]'.\n\nMicrosoft.EntityFrameworkCore.Design.Internal.OperationExecutorTest.AddMigration_begins_new_namespace_when_foreign_migrations [FAIL]\n      System.InvalidCastException : Unable to cast object of type 'System.Collections.Hashtable' to type 'System.Collections.Generic.IEnumerable`1[System.String]'\n```\n"""
4977,58570131,"b""I think this is correct. I'll rename some of the types in Commands, so it's less confusing. (currently there are two `OperationException` and `OperationExecutor` types)\n"""
4977,58570386,b'Thanks. :smile: I rushed the review out. I was going to actually bash on it today.\n'
4995,58740039,b'How is this different from LazyInitializer?\n'
4995,58740655,b'Will remove\n'
5003,58930733,b'we could add tests where we reference static field and/or property\n'
5003,58945754,b'Looks like we already have a few tests to cover these kinds of cases (i.e. `Where_static_field_access_closure_via_query_cache`)\n'
5016,59080010,"b'Are you just trying to run this test class on our normal runs of mssql functional tests? If so, it will be simple to just remove the IsSqlAzure condition.\n'"
5016,59080427,"b'I know, but I think it would be useful to have this condition as well and get a clean pass on SQL Azure for Linux\n'"
5016,59080572,b'Good point. Keep it.\n'
5018,59113854,"b'GETDATE() is a default value, it is not computed on updates.... (unless you add some other RDBMS feature to do this)\n'"
5023,59238218,"b'Weird that R# insists on this. AFAICS ""constructible"" is more normal, but if it stops R# warnings then so be it.\n'"
5023,59240143,"b""The dictionary it's using is not very flexible, e.g. It also marks behaviour as misspelled\n"""
5018,59257741,"b""Had a chat with @divega and we think this is a little different.\n\nThe definition of that column is `ComputedDateTimeColumn AS GETDATE()` i.e. it is a computed column, not a default value. We have a separate column to test a datetime2 column with a default value which is a computed expression (see the `WithDateDefaultExpression datetime2 NOT NULL DEFAULT(getdate())` column also on the `PropertyConfiguration` table). The 2 types of columns are treated differently in SQL Server metadata - the first is treated as a computed column (has an entry in `sys.computed_columns`); the second is not a computed column but does have a default value.\n\nSo, although technically you're right, the server does not compute a new value when a row is updated, in practice we keep the `ChangeTracker` up to date with updates by performing a select immediately after we've updated the data. Now on `SELECT` the value of this column will be updated, so the value stored in the `ChangeTracker` would likewise be updated. The closest we can come to this behavior is to assign it `ValueGeneratedOnAddOrUpdate()`.\n"""
5018,59266779,"b'Got it, thanks!\n'"
5039,59292903,"b""Is the setter actually needed. Can't tell from looking at the code.\n"""
5039,59293214,"b""No. I'll change it to\n\n```\npublic virtual bool HasAttributeEquivalent => false;\n```\n"""
5039,59296173,"b""Can we change the above 2 lines so that the `nameof()` matches the object we're testing? Looks like they got mixed up at some stage.\n"""
5039,59296776,"b""I think making the above 2 const's `public` (or keeping them `protected`) would be better. So that an inheritor could easily override them. Other changes from `protected` to `private` are fine.\n"""
5021,59306757,"b'For possibly improved logistics, consider merging the changes from https://github.com/aspnet/EntityFramework/pull/5037 as well, since UWP does not work until the commands work.\n'"
5021,59417790,b'Why change these?\n'
5021,59420193,b'This file also needs to be compiled in c# 5.0 by powershell. See #5036 \n'
5021,59425652,"b""Shouldn't that go in a separate PR? If the hope here is that eventually we won't have to cross compile for netcore, we could revert this change in entirety.\n"""
5021,59425964,b'Why are some of these `type: build` and not others?\n'
5021,59426705,"b'In short, to make dotnet-restore pass but they don\'t need to be in the nuspec because these packages will only ever be installed alongside Microsoft.NETCore.UniversalWindowsPlatform.\n\n""build"" dependencies are there only to upgrade the version of the package dotnet-restore pulls. Without this (for example without ""System.Dynamic.Runtime"" build dependency), nuget fails. ""Could not find runtime-assembly for win7-x64 for System.Dynamic.Runtime 4.0.0.\n\nThe same is true of including ms.netcore.platforms. It doesn\'t need to be in the nuspec.\n'"
5037,59276954,"b'@natemcmaster and I talked about this and we are going to attempt an approach that should avoid leaking this flag to the public surface. Assuming it works it is still just an RC2 only workaround, but would have less impact.\n'"
5044,59454949,"b""Are you sure on this? It's in the `Internal` directory?\n"""
5044,59455179,b'In this case the class itself is internal\n'
5044,59458889,b'Hmmm. OK.\n'
5037,59460814,"b'Lol, silly R#, I wrote it that way for a reason....\n'"
5019,59297574,b'should we compensate for nullability difference etc?\n'
5019,59299000,b'why is it done this way rather than\n\nif (binaryExpression.NodeType == ExpressionType.Equal\n                || binaryExpression.NodeType == ExpressionType.NotEqual)\n{\n  var newLeft = Visit(binaryExpression.Left);\n  var newRight = Visit(binaryExpression.Right);\n...\n}\n\nThis seems to be the pattern we usually follow in those cases. Is there a situation where base visitor changes the NodeType of the expression?\n'
5019,59301875,b'nit: missing space before ctor definition\n'
5019,59308729,b'also worth adding test with optional navigation to verify that we properly compensate for the nullability change. ComplexNavigationsModel has the right entities.\n'
5019,59424743,b'Added. Disabled for now as I found #5043\n'
5018,59605532,b'We decided in a design meeting some time back to not use these attributes for return values.\n'
5018,59616748,b'OK. Will remove (and similarly from the existing one above). Thx.\n'
5002,59588312,"b""If the DllImport ends with `.dll`, won't this fail to strip that extension off on non-Windows platforms because of the static constructor above? Might I suggest `Path.GetFileNameWithoutExtension`?\n"""
5002,59590300,"b""Good point. I'll use that instead.\n"""
5020,59140707,b'This goes against our general principle of only logging data to stdout.\n'
5020,59228187,b'Verbose then?\n'
5020,59233282,b'`Information` would seem to be the right level to me.\n'
5020,59233819,"b'There are only three levels on Reporter: Error, Verbose, and Output. \n'"
5020,59242320,"b"":-( OK, `Verbose` sounds good then - but we should log something against `Reporter`. That doesn't seem to provide enough levels to me.\n"""
5020,59279339,"b""@natemcmaster and I talked about this, in particular about @bricelam's [feedback](https://github.com/aspnet/EntityFramework/pull/5020/files#r59140707). It seems that what we have is consistent with the conventions of .NET CLI commands so we need to find out if msdeploy can use this differently or if those conventions need revisiting.\n"""
5020,59459674,"b'BTW, `Verbose` writes to stderr.\n'"
5020,59460396,"b'But only if -v is specified, right? \n\nDiego and I talked in person. We are going to investigate a little more before/if we merge this. We want to avoid corner-casing this one command.\n'"
5020,59461600,"b'Oh good point, yes.\n'"
5020,59636100,"b'Logging ""Done"" has little value. How about we just remove altogether and revisit after RC2?\n'"
5082,59886842,"b'I would create an issue to track fixing this, then add a TODO comment here referencing that issue, then :shipit:\n'"
5064,59744377,"b'The rootnamespace can be ""Microsoft.EntityFrameworkCore""\n'"
5064,59744452,b'Same here.\n'
5064,59744636,b'I think we may not need this here....but only way to know is to try. Does this build w/o this dependency?\n'
5064,59744747,b'Can you write what should be root namespace for all 3 projects?\nI will update them all. There was mismatch between csproj & xproj so I made them consistent with csproj.\n'
5064,59744824,"b""We'll have to try this, but I think inmemory will work just fine on Mono 4.0\n"""
5064,59748202,"b""I'm not 100% sure. Let's discuss in design meeting today.\n"""
5064,59788258,b'changing namespace to Microsoft.EntityFrameworkCore.Specification.Tests & related\nsee #5073 \n'
5082,59914427,b'Already tracking as a part of https://github.com/aspnet/EntityFramework/issues/3925\n'
5063,59777181,"b'should we handle `a == false -> !a`, etc?\n'"
5063,59812189,b'Pull out ! for easier reading of condition.\n'
5063,59812221,b'null can appear on either side if its binary expression.\n'
5063,59817085,"b'in this change I only covered scenarios generated by OData. Per conversation with @divega, I will deal with the problem in general in a separate issue/pull request\n'"
5063,59958748,b'Simplify to `isLeftNullConstant == isRightNullConstant`\n'
5063,59958807,b'`return resultExpression`\n'
5081,60125643,"b""I think I was expecting this to be an optional param on the `UseInMemoryDatabase()` method, rather than something that is chained. I'm not really fussed either way... but just curious if you considered that as an option?\n"""
5081,60127323,"b""I was going to do that at first too, but I recalled that we had had a discussion that parameters on UseInMemoryDatabase or similar were more for required configuration, like the connection or connection string, as opposed to optional modifiers.\n\nI'm open to doing it either way. @divega?\n"""
5081,60151527,"b'I may need more data to form a helpful opinion, but assuming I understand how things work it seems to me that named in-memory stores is probably the pit of success and I would probably never use it without a name again. So having it as a parameter in the method feels better to me. It also feels more consistent with the other providers in which you pass the connection string here. \n\n(I even wonder about having to pass a null name explicitly to get the current functionality would be better than having a parameter less version of the method, but that might be one of my extreme points of view :smile:)\n'"
5081,60259703,"b""@divega Personally I think that is a little strong. We use the in-memory store for the majority of our tests and we don't use a named instance and we have not run into issues. When we need tests to be isolated from each other we isolate using the service provider, which ensures there is no shared state between the tests. You could argue that using named stores is a pit of failure because it encourages tests to be written that share state. I think that would be too strong too.\n\nUsing a named in-memory store is good for those people who are okay (either ignorantly or pragmatically) with sharing state between tests, but don't want to share the actual store. \n"""
5081,60271682,"b""I think the other use case for InMemory is when you are stubbing out the actual app, but don't want to hit an actual database. Admittedly in this case it would be very easy just to give it a name, so I don't think it's a big deal, but my preference would be to leave it optional. \n\nI really don't have a strong opinion either way though.\n"""
5081,60280411,"b""> Using a named in-memory store is good for those people who are okay (either ignorantly or pragmatically) with sharing state between tests, but don't want to share the actual store. \n\nWhat are the possible unintended consequences of sharing the service container for a developer writing functional tests for their application code? Shouldn't we be able to assert that named in-memory stores provide enough isolation for this?\n\nIt makes more sense for me to have more complete isolation in most of our own tests (I hope we are not missing bugs we would only detect if we reused the service container though :smile:)\n\nAfter this discussion I still feel that most EF Core customers using in-memory databases should look into using named ones. Discoverability and similarity with the other database providers makes me prefer the name to be an argument in an overload of `UseInMemoryDatabase()` method. You conviced me that it is ok to have a paremterless overload. We can discuss this in person.\n"""
5078,59799345,"b""Do we know how this plays with IntelliSense... I was picturing this being the last parameter so that it was out of the way... I'm worried it might show up before the overload without it in IntelliSense now. Could we make it last and options with a default value?\n"""
5078,59799611,"b'Yes, we can make it last. It just seemed to me to read better as the first parameter before the lambda, especially when the lambda is relatively long and multi-lined.\n'"
5078,59942673,"b'The description of the new parameter seems good, but I think there are a couple of paragraphs that are no longer true (unless I am missing something):\n- ""You do not need to expose a `<see cref=""DbContextOptions"" />` constructor parameter for the options to be passed to the context. If you choose to expose a constructor parameter, we recommend typing it as the generic context. If you choose to...""\n-   ""`<returns>` A builder that allows further Entity Framework specific setup of the `<see cref=""IServiceCollection"" />`.""\n'"
5081,60310685,b'Should this be required on this overload?\n'
5081,60311302,"b""If you're calling the method dynamically it can be useful to be able to just pass null, like we do in our tests. But I don't  have a strong opinion.\n"""
5081,60311869,b'I figured that might be the reason. Just wanted to check it was by design.\n'
4917,57667166,"b""This catch block isn't necessary. The `Dispose` in the `finally` will rollback the transaction if it isn't committed.\n"""
4917,57667333,"b""This class doesn't add much value. The Execute methods could be be private helpers in the migrator or extension methods on `IEnumerable<MigrationCommand>`.\n"""
4917,57667411,"b""This isn't a list of lists, is it?\n"""
4917,57667482,"b'It feels like this should either return `MigrationCommandList` or `IEnumerable<MigrationCommand>`, but not a list of lists.\n'"
4917,57669205,b'We _really_ want to avoid copy-and-paste overrides. Could you add a `bool terminateSatement` parameter to the base instead?\n'
4917,57669301,"b'Instead of calling `EndCommand` inline, can we put it in a `virtual` `EndStatement` method instead? This should make it easier for providers to implement batching if they want.\n'"
4917,57669425,"b""Oh I see, it's a way of forcing a new transaction. I wonder if there's a better way to model that in `MigrationCommand`.\n"""
4917,57669456,b':+1:\n'
4917,57922930,"b""The dispose doesn't explicitly rollback the transaction, so it would depend on the ADO dispose. Is that good enough?\n"""
4917,57925507,"b'It seems like a reasonably encapsulated unit of functionality to me. The transaction logic is relevant to the `RelationalDatabaseCreator` and the `SqlServerDatabaseCreator`, so at very least we should have a common implementation. The `IEnumerable` version would be effectively the same pattern we had in `RelationalCommandExtensions`, but that still feels like an awkward / non-oo pattern.\n'"
4917,57926276,b'It seems like we have at least a few cases where we generate a list of `MigrationCommand`s and want to merge them either with or without splitting the transactions. This could be a feature of the `MigrationCommand` / `MigrationCommandList` if it seems like it would be valuable.\n'
4917,57927186,"b'We could, but I think it would have to be a parameter for all of the `Generate` methods. Doing it that way might be for the best, since it would preserve the extensibility of the previous implementation.\n'"
4917,57927486,b'That would work pretty well. Would we want to append the statement terminator in that method as well?\n'
4917,57928818,"b""The ADO.NET contract is to rollback during dispose if it isn't committed.\n"""
4917,57932101,"b'> I think it would have to be a parameter for all of the Generate\n\nI think we should evolve the API based on need. For now, we should just be able to add two overloads:\n\n``` C#\nprotected virtual void Generate(\n    CreateIndexOperation operation,\n    IModel model,\n    MigrationCommandListBuilder builder)\n    => Generate(operation, model, builder, terminate: true);\n\nprotected virtual void Generate(\n    CreateIndexOperation operation,\n    IModel model,\n    MigrationCommandListBuilder builder,\n    bool terminate)\n{\n    // ...\n}\n```\n'"
4917,59589429,b'Agree with @bricelam. I think we just need to change this to something like MigrationCommandExecutor and pass the commands to execute. \n'
4917,59590106,"b""I don't think we should add a new type here. IReadOnlyList<MigrationCommand> seems better.\n"""
4917,59590578,b'default value?\n'
4917,59592025,"b'Related to that, IMHO this would be a better way to do scripting than what we currently have. I.e. a MigrationsScriptingExecutor vs. the duplicated migration code path in Migration.GeneratedScript.\n'"
4917,60304257,"b'Given, that this is not really a command - It has no Execute like method - a name like ""MigrationOperation"" seems better. Did you consider subclassing RelationalCommand here? \n'"
4917,60304507,b'Consider Law of Demeter here\n'
5146,60766669,"b'Could you add ""String"" to the names of these nested classes?\n'"
5146,60778904,b'Also remove the resource\n'
5136,60648876,"b""All the FindReferencing\\* properties should be renamed to GetReferencing*\nWe decided that methods returning a collection that don't take parameters should be prefixed with Get. This and the ones for Property were missed.\n"""
5136,60649594,b'The exception message is specific for metadata interfaces. Either add a check so it is only thrown for metadata interfaces or rename the method to reflect this.\n'
5136,60649991,b'Will do.\n'
5136,60650013,"b'Will rename,\n'"
5136,60650684,b'Same goes for FindContaining*\n'
5174,61007922,b'What is going to replace this? e.g. what API would user code call to get this path now?\n'
5174,61008104,"b""The only reference to this was in `StartupInvoker` which was removed. There's already code that sets up `HostingEnvironment` with the right `ContentRootPath`\n"""
5142,60805389,b'Sort usings\n'
5142,60813531,b'Error for writeinformation?\n'
5142,60814497,b'static\n'
5142,60814938,"b""Note: We're probably gonna have them remove these string extensions from the cli.utils package. For now is fine, but an FYI\n"""
5142,60815035,b'If this is going to be consumed by VS/scaffolding may want to provide some extra information here so when those tools consume ef they provide verbose enough errors when things go wrong.\n'
5142,60815240,b'move this into the if statement below\n'
5142,60815303,b'Wont this need to be done in the dispatch layer? Reason: Users project needs to be built in order to dispatch in the first place.\n'
5142,60815468,b'Why does this and the startupProject bits potentially fork?\n'
5142,60815568,b'Why not just utilize Assembly.Load everywhere?\n'
5142,60815836,b'Based on [this](https://github.com/aspnet/EntityFramework/pull/5142/files#r60815303) having frameworks here may not be interesting.\n'
5142,60815941,b'`Create` would probably make more sense.\n'
5142,60816013,"b""This'll result in some duplicated output with the reporter writeline below\n"""
5142,60816073,b'Why not rely on dotnets verbose options/Reporter.Verbose?\n'
5142,60817957,"b""Don't need a projectContext. See https://github.com/aspnet/RazorTooling/pull/65/files#diff-33c97b345caf0ab940bd32a46634dde0R73\n"""
5142,60818176,"b'Needs to be done in both places. Example:\n\n```\nAspNetWebApp/\n    Startup.cs\nLibrary/\n    TestContext.cs\n```\n\nIf I run `C:\\Library> dotnet ef migrations add Initial --startup-project ../AspNetWebApp`, I need to go build ""AspNetWebApp""\n'"
5142,60818214,"b""Project is not necessarily the same as startupProject. I'm going to clean this code up to make it a little more clear.\n"""
5142,60818228,b':cry: but I like these extension methods...\n'
5142,60818272,b'Why build them both separately though? Can you not make the assumption that the startup project references the project that will have the migrations done?\n'
5142,60818298,"b""Build errors should be show on stderr, but I'll add the name of the project we were trying to build as well.\n"""
5142,60818346,"b""Actually, this commit didn't include a change I'm about to push. In some cases, I need AssemblyLoadContext. In others Assembly.Load is fine. AssemblyLoader is just a wrapper to make this abstraction easier.\n"""
5142,60818436,b'This is by design. We only log the stack trace if we get an unexpected error type. OperationException is an exception we throw intentionally to short-circuit the command execution\n'
5142,60818552,"b'In this scenario, AspNetWebApp references Library. The dispatcher only builds Library. We could make dispatcher smarter and have it build AspNetWebApp too, but this mixes dispatcher with inside-man too much IMO\n'"
5142,60818574,"b'Yeah, I need to cleanup the framework logic...will add in a follow-up commit.\n'"
5142,60818629,"b""We'd like both of these to work: `dotnet ef -v` and `dotnet -v ef`. Does dotnet utils have an API for this now?\n"""
5142,60831963,b'Not that I know of\n'
5142,60966154,b'If this is tied to this assembly you should use a typeof to ensure it stays consistent without needing to manually update.\n'
5142,60966348,b'TODO or remove completely?\n'
5142,60967496,"b""Might be good to allow a user to specify some of these so they don't get build output spewed in their current directory.\n"""
5180,61131869,"b""Just to keep my understanding up to date: didn't we originally create these classes (`GroupByAsyncEnumerable`, `GroupByAsyncEnumerator`, etc.) also as a workaround for some limitations with the Ix-Async ones?\n"""
5180,61133051,"b'No, these are the relational streaming versions.\n'"
5180,61139663,"b""Would the trick of making the enumerator a struct like `List<T>` work for us here? I understand it probably wouldn't have a dramatic impact.\n"""
5180,61142513,b'Not as it stands because we use interfaces throughout.\n'
5180,61142816,b'Got it. I forget this often.\n'
5180,61143741,"b'Got it. I think it would be nice if that was clear in the name, but NABD :smile:\n'"
5153,60812033,b'I am curious about the reason for all the changes you made that are similar to this.\n'
5153,60812719,"b""This stuff got refactored so much with all the TFM changes that it just ended up being wrong. Somewhere along the way the EF Core cold start tests were removed altogether and the EF6 ones ended up in a state where they never actually run... they were compiled out on NET451 (where they could run), and just skipped on NetCore (because they can't run).\n"""
5153,60812798,"b'Actually, correction, the Core ones would have failed... but currently the benchmarks are just running against Full .NET because the Core runs were super flakey while everything was moving to CLI.\n'"
5186,61162714,b'Presumably there will be another change to make use of this in Migrations?\n'
5186,61162865,"b""Yes, I'll merge this first and then rebase the other PR on top of this.\n"""
5157,60819126,"b""From the perspective of the APIs offered by EF, I am not sure we should call the sync ones the default. Perhaps there is a practical reason to do it though, e.g. to avoid having to rename existing data sets?\n\nAnyway, the comment likely applies to the `SaveChanges()` PR as well, but I didn't noticed it when I was reviewing that one. \n"""
5157,60819662,"b'Good point, ""Default"" is the name the variation has if nothing is specified, so I just used this name to match the existing data. I\'ll change all these to have a "" - Sync"" and ""- Async"" variation.\n'"
5185,61167888,b'build time dependency\n'
5185,61168023,b'ditto and below\n'
5185,61170938,"b'Ah, will fix\n'"
5195,61321190,"b""So we still need `--infer-runtimes` for Ms.EfCore.Tools? That's unfortunate\n"""
5195,61321317,"b'Yeah, it fails to pack without it :crying_cat_face: \n'"
5193,61325430,b'Why are these changing?\n'
5193,61325512,b'I have a fix for this in my impending PR :smile: \n'
5193,61325657,b'Ha! You fixed this the exact same way I did.\n'
5193,61325899,b'Why is this disabled?\n'
5193,61326244,b'`ClientEvalPredicateStateless` is static constant function so it was getting translated to SQL. I changed this so that count remains client eval and the test scenario remains the same.\n'
5193,61326494,b'Copied from above method `String_Contains_Literal()`. Both of them are being run in `QuerySqlServerTest`. I can updated them both here if needed.\n'
5193,61327824,"b""Isn't that true of most of the base test methods? I think our default is just to run them all anyway.\n"""
5193,61328341,b'Enabled both.\n'
5200,61362337,"b'not sure what to do for ValueBuffer - currenly we dont check for differences between ValueBuffer results, so there still might be come instances where we get wrong results\n'"
5196,61481327,"b""`required interface '{notificationInterface}'` should probably read `required '{notificationInterface}' interface`\n"""
5196,61481546,b'Maybe `The collection type being used for navigation property...`?\n'
5196,61482189,b'Does this imply that strategy is used for all entity types? Or only those that implement the interface?\n'
5196,61482549,b'All. We never infer based on interface implementation anymore.\n'
5196,61482708,"b'Can you use a `<see cref=""..."" />` tag for the collection type\n'"
5196,61483037,"b""\xf0\x9f\x91\x8d that's what I was hoping \xf0\x9f\x98\x84 \n"""
5196,61499864,b'Are these lines commented out on purpose? \n'
5196,61500829,"b'When the tests were ported from EF6 there was no inheritance support, so the stuff that used inheritance was commented out. They are still commented out now because nobody has updated the tests following addition of inheritance support.\n'"
5196,61508492,"b""@rowanmiller Not sure how this would work in an exception message. We don't do it anywhere else I can find.\n"""
5196,61508891,b'Haha... brain fart on my behalf... never mind \xf0\x9f\x98\x84 \n'
5208,61520144,b'Do we need 1000 to repro the original bug? Or would fewer suffice? (Thinking about slow a full build is are already.)\n'
5208,61520406,"b""I tested with different numbers and it made no difference to the test execution time. We don't need 1000, but there is no good way I can think of to ensure that the bad one isn't first. Using a lot makes it less likely that the bad one is first.\n"""
5213,61519156,b'Could this just be part of the SQL query? `WHERE is_system_object <> 1`\n'
5213,61521494,"b""Furthermore, if the condition doesn't need to be in the projection it seems we can remove the CASE and write a simpler condition in the WHERE clause.\n"""
5213,61522696,"b""You can't directly refer to `is_system_object` in the WHERE clause - however I can do @divega's plan. Updated - please refresh and review again. Thanks.\n"""
5213,61524022,"b""Much nicer IMO. It would be perfect with NOT EXISTS :smile:, e.g. \n\n``` SQL\nAND NOT EXISTS (SELECT *  \n  FROM  sys.extended_properties  \n  WHERE major_id = t.object_id  \n  AND   minor_id = 0  \n  AND   class = 1  \n  AND   name = N'microsoft_database_tools_support') \n```\n"""
5213,61536567,b'Why not: WHERE t.is_ms_shipped = 0 ?\n'
5213,61606500,b'Yep - is_ms_shipped is a `bit` column - so will do.\n'
5222,61627333,"b""don't you need similar thing for CompositeShaper?\n"""
5222,61628214,"b'Might want to incorporate tests added in https://github.com/aspnet/EntityFramework/pull/5200, specifically files: QueryNavigationsTestBase, NorthwindData, QueryNavigationsSqlServerTest - there were a few scenarios returning wrong results that were caught by the overhaul\n'"
5222,61634285,b'See my comment on the PR\n'
5222,61635052,"b'Sounds good, will add the tests separately once your fix is in\n'"
5222,61640395,"b""This is ValueBuffer, not Shaper (if that's what you meant) :smile: \n"""
5222,61641909,"b""I meant the result of CompositeShaper.Shape - TransparentIdentifier, but it's default comparison should work since its a struct\n"""
5225,61626843,"b'these methods are being used in 2 places (other one being `EntityEqualityRewritingExpressionVisitor`), any good place to refactor?\n'"
5225,61630194,b'typo (pedicate)\n'
5225,61630695,b'Maybe EntityQueryModelVisitor? we already have a IsPropertyMethod on there\n'
5225,61630816,"b""that's something we could probably optimize (in the future)\n"""
5225,61633077,b'_Predicate_\n'
5225,61633688,"b'Even introducing a new helper class would be preferable here. I mean for the duplicated discriminator building logic, too.\n'"
5225,61633883,"b""I don't think this should just be for predicates. Add some tests with _is_ in the projection etc.\n"""
5225,61648375,b'filed #5230\n'
5225,61651398,"b'Minor but consider reducing coupling here by only passing the required dependencies: Model and RelationalAnnotationProvider. Then you can revert the RelationalAnnotationProvider property change, too.\n'"
5225,61651618,b'Nice.\n'
5228,61652261,b'Curious why these are in a separate class\n'
5228,61758211,"b""Because only one instance of each is needed and if there were in the main class there would be one instance per generic type. It's not a big deal either way.\n"""
5253,61785725,"b""cc @natemcmaster \\ @bricelam \n\nI'm commonizing `dotnet-test-xunit` in order to allow us to use the dotnet test runner on desktop and netcoreapp. This line was failing to compile when I moved the dependency. However this project doesn't have any projects of it's own so I moved the runner into `Microsoft.EntityFrameworkCore.Microbenchmarks` and `Microsoft.EntityFrameworkCore.Microbenchmarks.EF6`\n"""
5214,61618102,"b""This should really be an instance method on the fixture. The static one just exists because the cold start tests do complicated stuff with AppDomains etc. Leave it as-is for now, I'll add an instance one later.\n"""
5214,61618510,"b""What kind of results do you see for this? I'm wondering with 466 results if it might execute too quickly to give us any meaningful numbers. You typically want to be seeing 50ms on your local machine at a minimum (100-300ms is ideal).\n"""
5214,61625350,"b""The filter actually runs on the client, so the number of results doesn't affect the time too much. However EF6 might be executing too fast. Will take a look\n"""
5214,61627347,"b""Ok, it's probably fine then - though I assume we are aiming to translate this at some point. Looks like the store table has 701 rows and most the other tests pull back 1000 rows... so I think you are good.\n"""
5214,61627525,"b'I not too worried about this, but would have a slight preference for method chaining syntax to be consistent with the other tests.\n\n``` c#\nvar query = context.Store\n    .Where(s => s.SalesPerson.Bonus > 3000);\n```\n'"
5229,61644797,b'@natemcmaster what should this say for `dotnet ef`... how do I tell it what project to put the migrations into?\n'
5229,61764826,"b""`or by using the '--targetProject' option for dotnet commands` unfortunately this doesn't exist in CLI commands. \n"""
5229,61765205,"b""> what should this say for dotnet ef... how do I tell it what project to put the migrations into?\n\n@rowanmiller unfortunately this isn't really an option on CLI commands. The user needs to execute dotnet-ef on the project where they want migrations store. If this project is a library, they have to manually figure out how to move migrations between folders, setup different TFMs, etc....this is messy, and is a result of the limitations in CLI https://github.com/dotnet/cli/issues/2645.\n"""
5263,61970518,"b""What exactly difference this create in PS? Isn't `+=` adds new element at the end?\n"""
5263,61970788,"b""The problem isn't here (exactly). It's with a few lines down where we splat arguments `InvokeDotnetEf ... @options`. If `options.length ==1`, it passes a `string`, instead of `string[]`. \n"""
5263,61970988,"b""Adding the comma `+= ,` changes the way this splatting works....\n\nand btw, this is one of the most confusing powershell quirks I've every seen.\n"""
5263,61971636,b'Why did this change?\n'
5263,61971793,b'Assuming this is to remove the error `The system cannot find the file specified.` at the build time \xf0\x9f\x91\x8d \n'
5263,61971795,b'I wanted this test to use the lowest possible PCL import. This is also the import we are putting into the templates.\n'
5255,61795003,b'@divega Any smarter translation? Built-in function etc\n'
5255,61807210,b'This looks good actually.\n'
5255,61807477,b'Agreed\n'
5255,62113172,"b'I think we want to visit when the array has elements, no?\n'"
5255,62113346,b'Break long lines like this\n'
5255,62114154,b'The array is value of `ConstantExpression`. We never visit it regardless of it has values or not. `VisitConstant` function just verifies if the type if supported or not without looking into actual values.\n'
5255,62114405,b'Should we move the check to VisitConstant?\n'
5255,62117728,b'Methods which takes params args generates ConstantExpression with array values. That is the only case we need to pass the array as is. In all other cases we block array valued ConstantExpression (except byte[]). Moving this to VisitConstant could have unwanted side-effects.\n'
5284,62386360,"b""What's this?\n"""
5284,62386864,b'It allows us to specify a build quality on a per project basis.\n'
5279,62273457,"b'cc @rowanmiller as mentioned in person, this behavior change here is something we should discuss in triage before we merge PR. This is a potential can of worms, and is only a workaround for CLI limitations anyway.\n'"
5279,62407680,"b""Can anyone think of a better way to describe this package? The package only exists as an internal implementation detail. People shouldn't install and use this directly (at least in RC2). It would be good if this description communicated that.\n"""
5279,62407757,"b'Just curious, is the ""\'migrations\' is used if not specified"" part implemented somewhere else?\n'"
5279,62407835,b'Implementation components?\n'
5279,62408306,"b""I wouldn't worry about this too much... I was just looking at the other descriptions to see if we have standard language we use and we need to do a full review before RTM - opened https://github.com/aspnet/EntityFramework/issues/5291\n"""
5270,62198154,b'Why entryCount: 0 ?\n'
5270,62212140,b'No results.\n'
5270,62218259,"b'Yep, its because none of the existing orders in the [Northwind](https://github.com/aspnet/EntityFramework/blob/dev/test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/Northwind.sql)  test database have a timepart other than \'00:00:00\'.\nSince the ""real"" testcases verify the generated SQL anyway, I thought it is not worth to add additional data just to get an entryCount > 0.\n'"
5270,62222699,b'You could modify Northwind.sql to have a non-zero datetime order?\n'
5270,62344681,b'Sure. I will push an update as soon as I find some time.\n'
5270,62346127,"b""I think it is fine as is. We don't typically modify Northwind.sql - we would usually create a separate fixture for specific data requirements.\n"""
5270,62355595,"b'Fine, less work for me :smiley: \n'"
5270,62378765,"b'Just asking, does we need all those Dictionary to keep mappings? they are not static, so each time SqlServerDateTimeDatePartComponentTranslator  is newed up, this dictionary should be created as well.\n\nWhat about converting dictionaries to a method?\n'"
5270,62378886,b'Mind you adding support for DateTime.Date as well?\n'
5270,62408143,b'Interesting point. I am not sure if this is worth creating a dictionary (and a second one for the SQL generation) for this each time. A virtual method with a switch statement or even a static dictionary could be ok. @anpete What do yo think?\n'
5270,62408938,"b'What about `DatePart` enum? Do we actually need it? Based on member name here we put `DatePart` value in `DatePartExpression` and the `SqlServerQueryGenerator` uses another dictionary to convert `DatePart` to string. I think we can use the string in the `DatePartExpression` which `QueryGenerator` would use it directly (without going through enum)\n\nAlso the string mapped are same as the name of member. We can use a list of supported parts here or switch statement for all supported parts, which would use `nameof` on `Member.Name` to put appropriate string on `DatePartExpression`\n'"
5270,62410644,"b'Sounds good to me. I would probably still encapsulate the mapping currently implemented with `TryGetValues()`  into a method to facilitate extending  the list, but the implementation could be right passing the name through for all  currently supported parts. \n'"
5270,62415799,"b'[DatePart ](https://msdn.microsoft.com/de-de/library/ms174420%28v=sql.120%29.aspx)can only extract integral values from a date instance, but cannot convert a datetime into date. \nThis can be done via `CAST` or `CONVERT` and I have implemented this in this PR via [SqlServerDateTimeDateComponentTranslator.cs](https://github.com/davidroth/EntityFrameworkCore/blob/datetime_component_translation/src/Microsoft.EntityFrameworkCore.SqlServer/Query/ExpressionTranslators/Internal/SqlServerDateTimeDateComponentTranslator.cs)\n'"
5270,62415836,b'Sounds good to me as well. I will remove the `DatePart` enum plus both dictionaries and use a method with `switch` instead. I`ll push an update soon.\n'
5270,62421245,"b'Changes pushed - no more dictionaries, no more enums :smile: \n'"
5270,62473541,"b'Sorry @davidroth, totally missed that!\n'"
5312,62599010,b'Is it not supported in .NET Core projects or in project.json based projects?\n'
5312,62599121,"b'Good catch. It\'s all ""xproj"" type projects.\n'"
5312,62716196,b' http://go.microsoft.com/fwlink/?LinkId=798221\n\nHere is my suggestion for the message...\n\n> This preview of Entity Framework tools does not support targeting class library projects in ASP.NET Core and .NET Core applications. See {fwlink} for details and workarounds. \n'
5312,62716315,"b""@rowanmiller here's another error message to look at\n"""
5312,62734617,"b'I think we should remove the reference to "".NET Core"" in the error completely. \n'"
5312,62734977,b'@rowanmiller new exception message if I am not mistaken.\n'
5312,62735819,"b""Minor changes....\n\n> No parameterless constructor was found on '{contextType}'. Either add a parameterless constructor to '{contextType}' or add an implementation of 'IDbContextFactory&lt;{contextType}&gt;' in the same assembly as '{contextType}'.\n"""
5137,60635067,"b'Not sure about this. Currently we have separate ""bind"" methods for members vs method call I.e. BindMethodCallExpression\n'"
5137,60635371,"b""I'm not sure this is correct. Can you test when the subquery returns 2 items/zero items?\n"""
5137,62744047,b'Multiple enumeration of properties.\n'
5356,63221385,b'DI this?\n'
5356,63221711,"b'Oh, I see this is a nested class. Does it need to be a field, or should we just create a new instance each time (we do this in other places)\n'"
5356,63221795,"b""Don't need checks for private surface.\n"""
5356,63221965,b'Do a R# pass to uncover fields that should be readonly\n'
5356,63222132,b'Worth moving this condition to compile time?\n'
5356,63222416,b'yeah i will do the R# pass before checking this in - got the vm almost set up:)\n'
5356,63223295,"b""it doesn't need to be a field anymore - in one of the early iterations I was caching navigations that have already been included, but with the newer design it is no longer needed - will change\n"""
5356,63223385,b'will give it a try\n'
5359,63253668,b'Can you do a quick check for any other instances of this?\n'
5359,63253705,"b'I had a chat with @maumar because this translation seemed strange, even if we say we will only do client side evaluation.\n'"
5359,63253787,b'He will look a bit more at it.\n'
5359,63253855,b'Is node.Update better here?\n'
5359,63254395,"b'There are few instances where we do equality, that the method is not preserved - we only need that for Add, right? or should we do this across the board, just to be safe?\n'"
5359,63254428,b'Good! :smile: \n'
5359,63254620,b'I think we need to do it across the board to avoid more of these potential errors. node.Update seems safest (when we can use it)\n'
5359,63259083,"b""the reason for strange query is that there is optimization in nav prop, which caused o.Customer.CustomerID to be simplified to o.CustomerID, which doesn't require access to LOJ-ed Customer table and can be translated directly into sql. Modified the test so that now we concatenate two properties requiring nav prop, and query is as expected. \n"""
5359,63260013,"b""But why aren't we getting the projection optimization here? (no materialization required).\n"""
5359,63260602,"b""If I understood what @maumar said to me, when we do client evaluation we project everything. Assuming that is true I am ok with saying that the spurious `[o].[CustomerID] + N' '` here is just a corner case, but I would like us to consider a separate improvement to only include things we end up binding to in the projection when we do client evaluation.\n"""
5359,63263047,"b""OK, I'm assuming the client-eval here is because of DefaultIfEmpty, @maumar?\n\nSeems like a bug in the projection translation that we gen the [o].[CustomerID] + N' '\n"""
5359,63263397,"b'> OK, I\'m assuming the client-eval here is because of DefaultIfEmpty, @maumar?\n\n@maumar said yes when I asked the same question :smile:\n\n> Seems like a bug in the projection translation that we gen the [o].[CustomerID] + N\' \'\n\nYeah, maybe. But FWIW, it seems that part is for `o => o.CustomerID + "" ""` so no it is not affected by the nav prop translation.\n'"
5359,63263705,"b""@divega Yeah, something seems wrong if we are both materializing that Order, but still pushing down part of the concatenation expression. Perhaps it won't matter once we start pushing down the DefaultIfEmpty.\n"""
5359,63265077,"b'In RelationalProjectionExpressionVisitor first we visit the entire selector and determine that we need client eval, then we defer to base implementation, which in turn visits the left (o.CustomerID + "" "") and right (o.Customer.City). The left side is translatable to SQL and so it is automatically added to the SelectExpression. Then we visit the right side (which can\'t be translated), but the unnecessary SQL fragment has already been added. \n\n@anpete should we add logic that if the client eval in needed for the projection, we never add anything to the underlying SQL?\n'"
5359,63267070,"b""@anpete I switched back to Expression.MakeBinary in some cases because update doesn't work. Basically if the old expression was reference comparison but the new expression is value comparison, the update will throw. (we do that in navigation rewriting and entity equality rewriting). Will keep expression.Update anywhere else\n"""
5388,63560599,b'Did I miss the other packages here?\n'
5388,63560821,b'This was the only missed package I saw. Everything else is rc3/preview2\n'
5360,63592292,"b'Sorry I am only chipping in after this has been merged but this string reveals that we weren\'t all exactly on the same page with the rules :disappointed:. \n\nIn my mind one of the rules was that if a string contained mixed case we would assume that the user already had it the way they wanted it to be and would avoid any further transformation, including removing ""_""s.\n\n@rowanmiller @roji thoughts on this?\n'"
5360,63608713,"b'What we have is consistent with what I thought we\'d come up with \xf0\x9f\x98\x84 \xf0\x9f\x98\x95 . My understanding was that the pascal casing was only skipped on a per-segment basis after we had split on the underscore... so in this case we leave it as ""ParentId"" rather than making it ""Parentid"".\n'"
5360,63611306,"b'@divega  My understanding was the same as @rowanmiller\'s. But see also 2dc6007 where I checked in an update because I had missed a test that became broken because of this. For that test there is a table called ""E F"" which becomes an Entity called ""E_f"" because we split words only on \'_\' and \'-\' and so the algorithm regards all 3 chars as one ""word"" which it Pascalizes to ""E f"" which then goes through the part of algorithm which makes sure it\'s valid C# and we end up with ""E_f"".\n\nI\'m not sure how far we want to go down this route as it\'s a fairly unusual case but maybe we should add in more characters which act as ""word separators""?\n'"
5360,63611514,"b'I would treat "" "" the same as ""_"" and ""-"".\n'"
5360,63613921,"b""What about '+' or '&' or any kind of whitespace? Or punctuation?\n"""
5360,63615360,"b'That\'s probably overkill I think, the common ones I have seen are ""-"", ""_"", and "" "" (though I think underscores are the most common). \n'"
5360,63619472,b'OK. Have re-opened #3987 and will submit another PR for that.\n'
5358,63582182,b'Why is `IsIgnored` called here?\n'
5358,63595308,"b""The return value of the conventions determine whether the next convention should run for this event. Since this runs when a member is ignored then we shouldn't run any other conventions (if there were any) if the member is no longer ignored (in case adding a relationship triggered another convention that unignored the member)\n"""
5340,63448658,b'tabbing\n'
5355,63743489,b'Use method group instead of lambda\n'
5355,63743816,b'Use method group\n'
5355,63744402,b'Wrap this block in `if (openParen > 0)`\n'
5409,63745787,"b""Shouldn't this be `GetDeclaredProperties()`? Otherwise if the entity type has derived type then `SingleOrDefault` will fail due to multiple properties matching the condition.\n"""
5409,63745999,b'Yes\n'
5409,63746577,b'Can you add 1 more derived type deriving from `SpecialPerson` for better coverage. (i.e. entity type with max length property has both base type and derived type).\n'
5409,63746802,b'Sure\n'
5367,63301482,b'`modelBuilder.Entity<Chasis>().HasKey(c => c.TeamId);`\n'
5367,63302766,b'@smitpatel have corrected and push-forced\n'
5367,63817525,"b'To query the shadow property use `EF.Property` in the `Select` body:\n\n``` C#\n.Select(d => d.GetValues(internalEntry.EntityType, EF.Property<byte[]>(d, ""Version"")))\n```\n'"
5367,63917462,b'extra line\n'
5367,63917508,b'Move these comments to the base\n'
5360,63625450,"b""@lajones @rowanmiller I don't feel super strongly about this but I would like to make sure you can see what I mean: if I have a column in the database called `ParentId_A` the chances that I expect or want reverse engineering to fiddle with it to produce a property called `ParentIdA` are almost nil IMO. E.g. if I already knew to use mixed case in `ParentId` then the underscore is likely there on purpose. \n\nIt is just heuristics but I don't think there is a way to turn it off, so I am trying to apply the principle of least surprise. \n"""
5435,63974364,b'make this one OrderByDescending instead\n'
5405,63750442,b'@Tasteful Can you add the derived Sql Server version of this so we can see the SQL?\n'
5405,63968774,b'~~We cannot clear Order by here since they are required for the query which contains Top or Offset. See line 418.~~\nWe are adding all ordering again. May be we can check conditions before and decide if we need to add orderings again or not.\n'
5405,63998839,b'I have now added so the clear/adding orderby is in condition\n'
5396,63952719,"b'I am not sure how often this code would be called (maybe once per request?) but we should probably cache the outcome of the `Enum.GetValues()` or maybe we should use a separate value in the enum representing ""all warnings"".\n'"
5396,63952962,"b'Anyway, @anpete and I talked and he mentioned there are a few other options we should discuss:\n- Use the new event id struct that Logging defines\n- Have a bespoke type (enum perhaps) for use in this API instead of trying to reuse event ids\n\ncc @ajcvickers @rowanmiller @bricelam \n'"
5396,63959431,"b'Yikes, we were returning void!? :open_mouth:\n'"
5396,63960816,b'I believe I understand why there are core and relational versions of this API but it seems unfortunate you cannot do it only once. Maybe another thing we can chat about.\n'
5396,64060093,"b'I think I was expecting an API more like this:\n\n```\noptions.SetWarningLevel(WarningLevels.Ignore) // <- Default level for all warnings\n       .SetWarningLevel(WarningLevels.Throw, Warnings.ClientEvaluation)\n       .SetWarningLevel(WarningLevels.Warn, Warnings.IgnoredIncludes, Warnings.SomeOtherWarning)\n```\n'"
5396,64081239,"b""I like what @rowanmiller  suggests better, e.g. regardless of the naming, a method to which you can pass values for ignore, throw or warn. From what I remember when we discussed this in triage we said (or at least I thought to myself) this would become a full superset (and replacement) for the current `QueryClientEvaluationBehavior()` method.\n\nI am still not sure about the granularity...\n\n@rowanmiller FYI, when we discussed yesterday we looked at several alternatives for how to represent and configure individual warnings. The main challenge is that they are defined by several different components, e.g. we have some defined by core, some by relational, and potentially we may have provider specific warnings. It didn't look like a single enum would work, and the other alternatives didn't look very straightforward, so we left the meeting with the idea of scoping granularity out for RTM (e.g. the setting would apply to all warnings), so we can have more time to bake an API for it. What do you think?\n"""
5396,64086724,"b'@rowanmiller Another thing to consider is that we have enums for warnings already, in the form of our logging event ids. \n'"
5396,64087716,"b""> so we left the meeting with the idea of scoping granularity out for RTM\n\nYep that's fine. I think we should have the ability to set any of the three levels though, and not just the ability to make warnings throw.\n\n> Another thing to consider is that we have enums for warnings already, in the form of our logging event ids. \n\nFor sure, I should have put a note in that the API names etc. were all just a sketch of a general pattern, not actually what I thought we'd have. EventId's do seem like the logical thing to control this.\n"""
5396,64093092,b'Yep :smile: \n'
5432,64119665,b'null check for navigations needed?\n'
5432,64247421,b'@smitpatel Will do. After that can I convert the LGTM to a ship-it?\n'
5398,63628138,"b""Do you want to make this a tool instead? Might be more reliable to use nuget APIs to do this. Here's what we do in Coherence-Signed: https://github.com/aspnet/Coherence-Signed/blob/dev/src/PushCoherence/Program.cs#L90-L122\n"""
5398,63742953,"b""Yes, this plus what we add in https://github.com/aspnet/EntityFramework/pull/5399 make me think we'd be better of making this a tool. Too bad we can't use nuspec directly or avoid compilation and yes still produce a nupkg that targets netcore50 (https://github.com/dotnet/cli/issues/897).\n"""
5478,64304392,"b""This shouldn't be needed as we have a bot that posts info when a CLA is needed.\n"""
5478,64304669,"b'I would write something more like\n\n> Ideally include a complete code listing that we can run to reproduce the issue. Alternatively, you can provide a project/solution that we can run.\n'"
5478,64305103,"b'I would combine these two, templates that have these (such as our Connect system) always get paired statements like ""The entity is added""/""The entity is not added"" - which is not useful. Maybe more like...\n\n```\n### The issue\n\nDescribe what is not working as expected. If you are seeing an exception, include the full exceptions details (message and stack trace).\n```\n'"
5494,64433437,"b'Not sure what ""Normal"" means here. Is it ""default""?\n'"
5494,64437827,b'Use product code?\n'
5494,64446449,"b""It's all internal for some reason. See #5472\n"""
5494,64446868,"b""Kind of, but it's more like a heuristic. Different providers may have different defaults, or may default to nothing at all. So it's like if its a DbType that seems like it would be expected, then don't include it in the output.\n"""
5474,64416854,"b""Don't we still need this to work with class library projects?\n"""
5474,64452308,b'What does setting this property actually do?\n'
5474,64481680,b'At one point it was the only way to actually get dependencies into the `bin` directory.\n'
5474,64482839,"b'Oh, so this https://github.com/NuGet/Home/issues/1084. This was fixed in VS Update 2. Since we require Update 2 for .NET Native compiler upgrades anyways, it is safe to remove this.\n'"
5501,64476601,b'Does the Scaffold-DbContext line now need a comma?\n'
5501,64481700,b'Oops. Yes. Will fix.\n'
5501,64494382,"b'I know this is merged already, sorry I still need to comment... I was thinking how we can fix it, but can we just get rid of the second sentence altogether? Maybe a link to our documentation page would be more useful \n\ncc @rowanmiller \n'"
5433,64432625,b'Better variable name?\n'
5443,64463411,b'nit: break this long line\n'
5501,64589860,b'Agreed...\n\n> This topic describes the Entity Framework Core commands. See https://docs.efproject.net for information on Entity Framework Core.\n'
5523,64666878,"b'i think we should either do CAST(1 AS BIT) everywhere or just for the coalesce case (global vs local fix), rather than make it more nuanced, like it seems to be according to this example - i.e.  @__flag_0 = 1 but @__flag_0 <> CAST(1 AS BIT)\n'"
5523,64670436,"b'Had a chat with @mikary and @maumar about this and there is going to be another iteration of this PR. A couple of issues are:\n- We are not being very consistent about it (what @maumar called out above)\n- It is not clear whether we should keep assuming the existence of BIT type and the need to CAST to it across all relational databases and have providers that don\'t support it opt out or whether we should do the opposite. Regardless, the next iteration of the PR should be ""providers-beware"".\n\ncc @anpete \n'"
5513,64687571,"b'I think this wording is better. `EnsureDeleted` (and this command) are designed to be a ""delete it if it is there"" operation, so the database not being there is still a valid scenario.\n\n> Database did not exist, no action was taken.\n'"
5513,64704126,b'@rowanmiller fixed\n'
5479,64313614,"b'If you follow the link you just get to an index page. Then you have to click on "".NET Core CLI"" link and navigate to the ""Install by editing project.json"" section. Is there any way we can make the link take us closer to the actual directions the user needs?\n'"
5479,64418806,b'Why does we require Windows?\n'
5479,64419500,"b""It's a shame PowerShell doesn't just do this using [the package metadata](https://github.com/aspnet/EntityFramework/blob/dev/src/Microsoft.EntityFrameworkCore.Tools/tools/EntityFramework.psd1#L23-L24).\n"""
5479,64419586,"b""Why do we need it in both places? Isn't `init.ps1` enough?\n"""
5479,64450856,"b'@lajones this is the same fwlink we use for all of the other .NET Core CLI tooling error messages. We can always update the fwlink but as docs will likely change much in the coming weeks, the general landing page is okay.\n'"
5479,64450980,"b"".NET Core CLI doesn't launch exes on non-Windows. This would require mono.\n"""
5479,64451182,b'It seems NuGet eats errors in init.ps1 when installing a package.\n'
5479,64451539,"b'PowerShell will actually throw an error on PS 2.0 because of syntax errors...but yeah, PS2 ignores metadata in psd1\n'"
5479,64471249,b'@natemcmaster :-( OK.\n'
5479,64484119,"b""Ouch. Maybe we should create a dummy module with the commands that just error with this message. We could conditionally load that module if they don't have 3+.\n"""
5479,64485336,"b"">  create a dummy module\n\nYeah, this is good scenario for those using NuGet GUI or restoring from templates. The error will still be thrown by install.ps1 but they won't see it.\n"""
5479,64676877,b'`$toolsPath` might also be set...\n'
5479,64676897,b'Is this needed?\n'
5479,64676932,b'(You pass in the full path below.)\n'
5479,64677822,"b""Yes. From my testing, Import-Module in PS 2.0 doesn't respect the file path unless the containing folder is also in `$env:PSModulePath`.\n"""
5533,64784847,b'Minor comment: looks like usings need to be sorted.\n'
5502,64483052,"b""Can we just add `.0` to the end if it doesn't have any decimal places?\n"""
5502,64485037,b'yes\n'
5534,64779563,b'Can cause NREs? ReflectionTypeLoadException.Types array can contain null values.\n'
5534,64784940,b'Good catch.\n'
5534,64785178,"b""I should've copied [it from EF6](https://github.com/bricelam/EntityFramework6/blob/master/src/Common/AssemblyExtensions.cs#L40). :wink: \n"""
5542,64827130,b'@NTaylorMullen we still do tool verification for now. We needed to remove dependencies on Microsoft.DotNet.Cli.Utils and Ms.Ext.PlatformAbstractions\n'
5542,64946170,b'Why? Can it wait until we need it?\n'
5542,64947067,"b""Why depend on JSON.NET? We don't parse JSON or serialize unknown types. It adds little value.\n"""
5542,64947614,"b'We already depend on it, but it came transitively from Ms.DotNet.Cli.Utils, but in the spirit of removing dependencies, we could also remove this too.\n'"
5542,64947719,b'We need it for pmc commands to parse the json output.\n'
5542,64948851,"b""Ah, since it's no longer the only thing on stdout. Got it. :blush: \n"""
5542,64948972,b'Does it need to be an option or should we always do it?\n'
5542,64949206,"b""I think it's worth it--one less piece to the puzzle.\n"""
5542,64949827,"b'I considered it, but figured it better to make these opt-in as comments not in the JSON spec.\n'"
5542,64950043,b'Sounds good. We can reevaluate this interaction with the new architecture.\n'
5542,64961766,"b""Ok. I'll follow up in a separate PR.\n"""
5556,64950163,b'cc @natemcmaster   \n'
5556,64953875,"b""I think we decided not to depend on `System.Collections.Immutable`, but maybe they came back? Or maybe they didn't go away because they are immutable \xf0\x9f\x98\x86 \n"""
5556,64955252,"b""We could ignore this issue in Coherence if you'd like to stick to 1.1.37. \n"""
5556,64955929,b'They returned when we decided to store the discovered navigation property infos on entity type builder as annotation inside RelationshipDiscoveryConvention. That is the only place which uses it. \n'
5556,64961638,"b""> We could ignore this issue in Coherence if you'd like to stick to 1.1.37. \n\nNo, I wasn't suggesting that.\n"""
5462,64841968,"b'I am bit curious about how the behavior of bitwise operators will be with null in the database vs. in-memory, as a predicate but also in other places, e.g. the projection. I talked to @smitpatel and we will try it. \n'"
5462,64847564,"b'in-memory and database both working in same way for this. i.e. for int/long/enum values result is null when one of the operator is null. For values like string, it is compiler error (T-Sql also throws on that)\n'"
5462,64847884,b'Thanks. This is good information. So it seems it is good as it is. \n'
5591,65268615,"b""Sorry I'm late to the party here. So far we've been using tags without spaces, e.g. `entityframeworkcore`, `aspnetcore`, etc. And these are both new tags compared to EF 6.x and earlier. Do you feel strongly either way about this?\n\nFor example, here's what I put in for the EF Diagnostics page: https://github.com/aspnet/Diagnostics/blob/dev/src/Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore/project.json#L10-L12\n"""
5591,65268785,"b'In all the tooling packages so far we also put in some hint about the command name, e.g. `This package includes the dotnet-ef command line tool.` This is part of the ""cost"" of having package names not match assembly names \xf0\x9f\x98\xa6 \n'"
5591,65268883,b'Would `In-memory` be clearer?\n'
5565,64996646,b'The `-eq` prameter on `where` is a ps 3 thing. Use a script block\n'
5587,65238440,"b'If this change is going to introduce other regressions, we should investigate more thoroughly the find out what is wrong or revert #5555\n'"
5587,65238882,"b""`GetMaxLength()` returns `int?`, so shouldn't this extra check be unnecessary? Perhaps the bug is actually in `property.GetMaxLength()`\n"""
5587,65240690,b'It is not regression. It is limitation of our test base. For this test to work the typemapper needs to have `StringTypeMapper` property populated which is null in `RelationalTypeMapper`. All provider specific type mappers populate it in constructor so this test would work fine in providers but not in relational since for relational tests we use `ConcreteTypeMapper` which is just fake implementation. I will disable this test specifically for relational and let it run for SqlServer & SQLite. Does that look good?\n'
5587,65240863,b'+1\n'
5587,65241289,"b""Can we move the test to the SqlServer ones then? I had to do this with a few others because the relation mocks aren't as complete.\n"""
5587,65241828,b'So the check needed is either maxlenth is null then use property whatever is the value of max length there or if maxlengh is not null but same as property then use property. Any other way to describe this logic?\n'
5587,65242341,b'Moved to provider specific and removed from Relational.\n'
5531,65274117,"b""Having a `ColumnExpression` with null property doesn't look very good. @anpete - thoughts?\n"""
5590,65253772,b'Doc comments are almost a direct copy from HashSet<T>\n'
5590,65253853,b'@ajcvickers can you look at this file in detail\n'
5590,65253905,b'@AndriySvyryd can you look at this file in detail\n'
5590,65254017,b'@AndriySvyryd super generic comment at the moment \xf0\x9f\x98\x84... when do these actually run?\n'
5590,65254041,b'As above \xf0\x9f\x98\x84 \n'
5590,65256562,"b'Typo: missing word ""event""\n'"
5590,65258468,"b'Not an English expert, but ""ignored from"" sounds weird.\nAlso it\'s ignored on the entity type, not the model.\n'"
5590,65258991,"b'It is run after the model is built, ie after `OnModelCreating`\n'"
5590,65259194,b'The counterpart to the above. Run before `OnModelCreating` and before discovering the sets on `DbContext`\n'
5590,65259873,b'Perhaps we should rename the property itself to `PropertyNullabilityChangedConventions`\n'
5590,65261986,b'Could you also mention that if any instance data from `dbContext` is used for the configuration then the same data needs to be included in the object returned from `IModelCacheKeyFactory.Create` to ensure that the model is cached properly?\n'
5590,65262219,b'Not an interface\n'
5590,65262290,b'Not an interface\n'
5591,65275100,"b'I\'m not sure ""entityframeworkcore"" without spaces really helps, it looks kind of like a TFM based on our product name \xf0\x9f\x98\x84. If I was searching for EF packages, I would use ""Entity Framewor"" or ""EF"" and not ""entityframework"".\n'"
5591,65275194,"b""Or we could do InMemory since that's what all the APIs related to it use.\n"""
5591,65275372,"b'Will do, it also ""contains"" the Package Manager Console commands, so I will mention those too. BTW do we still put the hyphen in `dotnet-ef`... it seems like `dotnet ef` is more helpful since that\'s what you actually type.\n'"
5591,65281408,"b""I'm fine either way \xf0\x9f\x98\x84 \n"""
5591,65281473,"b'I\'d use InMemory if it\'s the full type name, e.g. InMemoryWhateverProvider, but ""in-memory"" if it\'s just plain English (which seems to be the case here).\n'"
5591,65281614,"b'I personally prefer space-less tags because that\'s the norm (or even requirement) in many systems, so it\'s nice to have the same tags across different systems (e.g. StackOverflow). I think having extra tags such as ""entity framework"" ought to be just fine as well. No harm having several tags, assuming they actually carry some meaning.\n'"
5600,65280597,"b'Consider the wording for this that DI uses: ""Unable to resolve service for type \'{0}\'""\n'"
5600,65280650,b'Should this be fully qualified type name?\n'
5600,65285254,"b'Yep that sounds good, will do.\n'"
5600,65285620,"b""Will do. I know we've gone back and forwards on this in general... but given it's likely not a user type, I think it makes sense to fully qualify here anyway.\n"""
5603,65285734,b'Not sure I would mention CLR. It makes it sound more complicated and I think the sentence is clear if you omit it. Otherwise looks good to me. \n'
5603,65285903,b'\xf0\x9f\x91\x8d \n'
5531,65288234,"b""@smitpatel and I talked and reviewed other places where it was already possible to use `ColumnExpression` without a property, e.g. by using the constructor that takes a type. It seems that this is ok, and that the change in `ColumnExpression.Equals()` potentially fixes a NRE we just didn't know about.\n"""
5597,65282155,"b""This comment is obvious \xf0\x9f\x98\x84 \n\nYou could also assert that a key exists on Id before this and it doesn't after.\n"""
5599,65277866,b'Yay for `nameof`!\n'
5590,65299690,"b'Note, the return type and its value are ignored (might as well say `void` here). The method can also be either `static` or instance (with a constructor that can inject `IHostingEnvironment`, Logging, or Options services)\n'"
5590,65299836,b'Services can also be injected into the method.\n\nSome of this might change with #4546 \n'
5590,65300049,b'Is this intentionally `public` _and_ in the `System.Reflection` namespace?\n'
5591,65300321,b'@divega / @Eilon Can (and should) we update the GitHub repository description to this too?\n'
5591,65300466,"b'Good point, I can do that... and I have \xf0\x9f\x98\x84 \n'"
5591,65300830,"b""Just to throw one more convention into the mix \xf0\x9f\x98\x84... on StackOverflow we use `entity-framework`, so how about we have:\n- `Entity Framework`\n- `Entity Framework Core`\n- `entity-framework`\n- `entity-framework-core`\n- `EF`\n\nI'm not convinced the spaceless one makes much sense... but happy to add that into the mix too if you want it...\n"""
5591,65300848,"b'Or perhaps we don\'t even need the versions without ""Core"" in them?\n'"
5531,65305070,"b""@smitpatel @divega Fix in `ColumnExpression.Equals()` was because of an NRE. Another solution to not allow null property in the `ColumnExpression` is to add a new expression, lets say `AliasColumnExpression` that will do the same as `ColumnExpression` that not have an property assigned. If that should be introduced my feeling is that it's another PR because it will change other places where the `ColumnExpression` is used also.\n"""
5531,65306338,b'@Tasteful - We found some other places also where `ColumnExpression` is used without property. The absence of NRE was just co-incidence.\nI am trying to merge this. After rebasing on latest dev there is minor issue in generated Sql. If you can change it now else I will update it while merging.\n'
5591,65315181,"b""@rowanmiller sounds good to me (and I'm fine dropping the Core-less ones).\n"""
5602,65284066,b'Is it ok to say `when overriding DbContext.OnConfiguring` although many ASP.NET customers will be doing `AddDbContext()` or should we say something more generic like `when configuring the DbContextOptions`?\n\ncc @rowanmiller \n'
5602,65284511,"b':+1: for first sentence. It fixes #4147. \n\nFor second sentence\n- I believe it should say ""To suppress this exception use the ConfigureWarnings API"" like in the previous one, assuming we switched it back to throw by default. \n- Same concern as before that many customers will call this in `AddDbContext()` rather than overriding `OnConfiguring()`.\n\nStill not sure about second sentence. \n'"
5602,65284737,"b'We might also want to extend this message with a link to a transaction management topic, e.g. that explains `SaveChanges()` uses local transactions automatically and we have the `BeginTransaction()` API, etc. \n\ncc @rowanmiller \n'"
5602,65284792,b'In other parts of the stack we have used...\n\n> overriding the DbContext.OnConfiguring method or by using AddDbContext on the application service provider\n\nso perhaps say...\n\n> Transactions are not supported by the in-memory store. To suppress this Exception use the ConfigureWarnings API. ConfigureWarnings can be used when overriding the DbContext.OnConfiguring method or using AddDbContext on the application service provider.\n'
5602,65285054,"b'Agreed, you can use this link  http://go.microsoft.com/fwlink/?LinkId=800142 (no page at the destination just yet)\n'"
5589,65250855,b'Do you need this? This app is only `netcoreapp1.0`.\n'
5543,65256349,b'Typo\n'
5543,65256521,b'Unify the calls to subQueryModel.GetOutputDataInfo() via a local.\n'
5588,65240219,"b'i was considering return Expression.Constant(expression.NodeType == ExpressionType.Equal), but readability was somewhat worse. Thoughts?\n'"
5588,65268084,b'Either is fine or you can use a local var to store the value for readability too.\n'
5561,64973074,b'Note this is only a heuristic. Migrations SQL generators have no way to diff against the previous model... cc @rowanmiller \n'
5618,65452453,b'What happens if there is no stderr? I.e. does this need `if ($stderr) { ... }` around it?\n'
5618,65452706,b'See line above. I could remove `-and $stdout` from the predicate because that is always true...\n'
5618,65454084,b'Let me put it another way - what happens if **both** stderr and stdout are empty? Does the call at line 704 error?\n'
5618,65454295,"b'I suppose it would, but I do not know of any case when a call to dotnet returns with a non-zero exit code an has no output on either stderr or stdout\n'"
5618,65456002,"b""OK. I'd rather issue an error message in that scenario, but that's not the main point of this fix.\n"""
5631,65649705,b'`IsUnique` function on `InternalIndexBuilder` can be used here by chaining.\n'
5648,65777497,"b""I haven't been including these <value> tags as they are pretty redundant - the auto-templating in VS actually doesn't emit them anymore. I don't think there is any issue including them, just don't feel like you have to include them in future docs.\n"""
5653,65781535,"b'""warning is generated""?\n'"
5653,65781722,"b'Maybe ""Configures the runtime behavior of warnings generated by Entity Framework""?\n'"
5653,65785083,"b'Yep I like that, updated to this language for all the warning related APIs\n'"
5635,65741096,b'Should we copy this source into our project now and remove the dependency?\n'
5635,65742929,"b""I considered that, but since we aren't changing its behavior and the package [has minimal dependencies](https://github.com/aspnet/Common/blob/dev/src/Microsoft.Extensions.CommandLineUtils/project.json), I figure it is low risk to keep it as a dependencies.\n"""
5635,65744928,"b'...or, we could create a .Sources package in Common...\n'"
5635,65749115,b'Seems fine to wait.\n'
5649,65760036,"b""Couldn't you just remove this?\n"""
5649,65760173,b'`_output` is assigned value in ctor but it is commented out since it is there for debugging only.\n'
5649,65760317,b'Comment out field too?\n'
5649,65761083,b'The field is being used in file multiple times. Commenting out fields means commenting out all occurrences of usages also.\n'
5654,65792036,b'`alias.Alias`\n'
5654,65792096,"b'on line 149, make `alias?.Alias`\n'"
5676,66101707,"b""Any reason you're using a custom attribute in EF instead of the OSSkipConditionAttribute from Testing?\n"""
5676,66101921,"b""EF doesn't depend on Microsoft.AspNet.Testing. We have similar implementations, but needed slightly different things.\n"""
5681,66151141,"b'Is the GUID always uppercase? Or is this some kind of ""soft"" GUID equality comparison?\n'"
5681,66153107,b'`-eq` is case insensitive :)\n'
5681,66155795,"b'I refuse to learn PowerShell, so thanks \xf0\x9f\x98\x84 \n'"
5678,66128320,"b""We shouldn't cross-compile this check out. It's still technically possible to run netstandard libraries on Mono.\n"""
5678,66128726,"b""Likewise. We can't rely on how this was compiled to be sure if this is running on coreclr or not. This library is compiled for .NET Standard 1.3, which could technically run just fine on .NET 4.6.\n"""
5681,66284000,b'Pet peeve: Use single quotes unless you need string interpolation!\n'
5689,66314245,b'Is this intentionally part of the PR?\n'
5689,66314320,"b'Ah, yeah, I remember now this is because of the improvement in the new version of IX-async.\n'"
5689,66314578,b'Yes. It fixes #2192\n'
5687,66310635,b'Does this work when combined with inheritance? Any existing metadata helpers you can use here? (ForeignKeyExtensions)\n'
5687,66311074,b'Will check.\n'
5692,66189361,"b'OK, so we do need it for all queries? \n'"
5680,66281999,"b'This isn\'t ASP.NET-specific. Maybe something like ""...base directory for the application.""\n'"
5680,66286200,"b""Can we drop the data directory and merge them into one parameter? I can't think of a scenario in which data directory is different from the app base path.\n"""
5680,66288064,b'Classic ASP.NET uses `<base>/App_Data`\n'
5680,66288409,"b""But yes, it's probably OK to do that for now on CLI.\n"""
5680,66314404,"b""I think I'm going to leave it, as long as there is the possible scenario that data directory may not be the app base path.\n"""
5656,65791967,b'you can just do expression.RemoveConvert() (no need for the condition and the loop)\n'
5656,65792044,"b'also add tests for other cases, just to make sure\n'"
5656,65792073,b'Which are the other cases? \xf0\x9f\x98\x84 \n'
5656,65792152,"b'like, in, string compare should be more than enough\n'"
5656,65792559,b'We already have tests which use those operators as root predicate.\n'
5656,65793051,b'I did not know it was recursive \xf0\x9f\x98\x84 \n'
5656,65794108,b'Short-circuit when NodeType != Extension?\n'
5656,65794247,b'AliasExpression is also Extension.\n'
5656,65794723,b'I meant you can skip checking any node that is not an extension (and not a binary).\n'
5656,65794742,"b""Doesn't the compensation need to apply to any node in the predicate tree. I.e. Does this work for coalesce as one side of a binary op?\n"""
5656,65797910,"b'Ah, ok!\n'"
5656,65798071,"b""That thought crossed my mind and then I got confused that we are only appending `= 1` at the root level of the predicate. We did have 3 cases where we compensated. Either we don't hve test coverage for those coming as a node or we are doing something to compensate that in some other way. I will look into it more.\n"""
5656,65978194,"b""Verified this. We don't have test coverage. Need to change the solution to generalize it for all cases.\n"""
5700,66353498,b'Are these using needed?\n'
5700,66354322,b'Will clean up.\n'
5709,66474691,"b'Is `array` a reserved keyword? If not, this seems like a typo.\n'"
5709,66474856,"b""Couldn't you sort both the arrays and do an `Assert.Equal`?\n"""
5709,66475400,"b""No, I'm taking part of elements from HashSet, but it doesn't not guarantee which ones. \n"""
5709,66475865,"b""Ahh ok. Maybe use `Assert.Contains(element, orderedDistinct);` in that case. `Assert.True` wouldn't tell what was missing and what the source array was.\n"""
5727,66670632,b':art: :smile: \n'
5729,66673867,b'So @roji overrides this to return `TRUE` for PostgreSQL. What does he need to do instead? \n'
5729,66676369,"b'In current code,\nThere are 2 cases where we add `= 1` (or `""= "" + TrueLiteral`)\n1. If the test in conditional is SimpleExpression\n2. In logical binary expression (AND/OR) either side is SimpleExpression.\nThe `SearchConditionTranslatingVisitor` makes sure that those cases are already converted to search conditions before they are converted to SQL.  (`ParameterExpression` was missing in that which is added in this PR, trying to find if anything else is missing.)\nTherefore there won\'t be case arising when we need to compensate.\npreviously there was `expression` of value type, after the visitor it is converted to `BinaryExpression` with right node being `True` valued `ConstantExpression`.\nHow the value of `True` gets translated is governed by `RelationalSqlGenerationHelper` which providers can override to produce something other than `1`. In case of PostgreSQL, that returns `True`.\nHence there is no longer need of having `TrueLiteral` & `FalseLiteral` here. There will be only single place providers needs to specify what is the value of `TrueLiteral`\n'"
5729,66678653,b'Excellent! Thanks!\n'
5744,66839725,b'These guys pull it in transitively now via dotnet-test-xunit.\n'
5749,66988528,b'Not sure saying we resolve from an external `IServiceCollection` is clear. I would use `IServiceProvider` here and in the next instance in the same paragraph as well.\n'
5749,66988687,"b'or maybe just ""dependency injection container"".\n'"
5749,66989102,"b'> or maybe just ""dependency injection container"".\n\n\xf0\x9f\x91\x8d \n'"
5749,66989204,"b'Technically the fact that are messages from this ""assembly"" my matter and be correct, but it seems a bit obscure for the user. Can we use something else? E.g. ""provider""?\n'"
5749,66989693,"b'Idem re ""assembly"" maybe from ~~""Entity Framework Core""~~ ""relational providers"" this time?\n'"
5749,66993178,b'Same comment as before re service collection vs. provider/container. Applies to both instances in this paragraph.\n'
5749,66995356,b'I went with `...when logging messages from a relational database provider`\n'
5758,67018157,b'@rowanmiller is this wording okay?\n'
5758,67020535,b'This would be more consistent with the wording used in the other packages...\n\n> Shared design-time components for Entity Framework Core tools.\n'
5759,67025011,"b""Remarks don't show up in VS IntelliSense, so if this is info that folks would want when coding against the API I would move it to a <para> in the <summary>\n\n. Your call though, I'm fine either way.\n"""
5759,67025954,b'This is just copied from the base BCL docs.\n'
5759,67026181,b'Sounds good to leave as-is then\n'
5759,67028833,b'Did you mean the opposite?\n'
5759,67029463,"b'Well, it is correct for the class it came from :smile: \n'"
5780,67249195,"b""The src project references are fine. Test -> test is the one that's broken.\n"""
5796,67416096,b'Can you move this visitor creation into a method on HandlerContext and update all of the places we do it?. I.e. handlerContext.CreateSqlTranslatingVisitor\n'
5800,67438060,"b""Don't verify the SQL here unless there is a meaningful difference from SQL Server. We removed this type of verification because it added a significant maintenance burden to query.\n"""
5800,67438812,b'Did you consider avoiding these breaks by just using a ValueBuffer (possibly with these as extension methods instead)?\n'
5800,67439050,b'This is already cached on EntityQueryModelVisitor. Can we unify?\n'
5800,67439194,"b'We typically just use EF.Property for nominal properties, too.\n'"
5800,67439271,b'Cache this in an annotation on IKey?\n'
5800,67439549,"b""It's also a way of ensuring that the database has/has not been hit. Okay if I change it to empty string verses not empty string?\n"""
5800,67439799,"b'Positions of key values in the value buffer are not necessarily the same as those in the key values array, so it would require translation to a new array, which might also have to have empty spaces for padding. This is not going to go into a patch release, so the internal API breaks are fine.\n'"
5800,67439890,"b'We can, but it would have to be made public and a new dependency introduced. Decided it was cleaner to not have the dependency.\n'"
5800,67439980,b'Why?\n'
5800,67440080,"b'Considered this, but would like to test perf difference before doing it.\n'"
5800,67442832,b'Casing.\n'
5800,67442859,b'Just simpler when building the expression.\n'
5800,67443191,"b""Aren't you already getting that verification by using Assert.Same?\n"""
5685,67758647,"b'Since the INNER JOIN Level2 has been lifted into the query, we shouldn\'t be needing the client-side join here, and therefore there should only be one SQL query, not two, i.e.:\n\n```\n             Assert.Contains(\n                 @""@""SELECT [e2].[Id]\n FROM [Level2] AS [e2]"",    \n                  Sql);\n```\n\nShould not be needed. We do similar thing in RelationalQueryModelVIsitor.OptimizeJoinClause (removing the additional select when incorporating it into the join)\n'"
5685,67757989,"b""we don't want any overhead here as it has a significant perf impact on the query execution. Instead, indexes should be properly set during compilation. Looking at the query plan, there is a join between two queries and the final projection is taking the index from the outer query and applying it to the inner query to extract the ID property. However the client-side join shouldn't be necessary in the first place, since the join has been lifted into the SQL already.\n"""
5824,67909621,b'Potential null ref?\n'
5824,67912906,b'Will fix.\n'
5767,68425861,b'Too many `m`\n\n`AddEdge_updates_incoming_and_outgoing_neighbors`\n'
5849,68425199,"b""I find it confusing that the `StateChanging` is saying `EntityState.Unchanged` but the `StateChanged` call is saying **`EntityState.Detached`**.  This looks like a typo, but I haven't read this code base in a long time.\n\nI'm used to event notification patterns that have the same value set in the _ing_ and _ed_ calls. Is this intentionally **Detached** not **Unchanged**?\n"""
5849,68427849,"b'If you look at the API you will see that StateChanging contains the state that the entity will change to, while StateChanged contains the state that the entity was previously in. The current state is always available from looking at the entry.\n'"
5849,68442564,"b'Gotcha, thanks\n'"
5890,69018042,"b""If it's first-class on the builder API, why not make it first-class on the Metadata API as well?\n"""
5890,69018594,b'Because we decided that for facets like this and max length we would make them annotations accessed by extension methods.\n'
5890,69018869,b'I think we decided this mainly to keep the metadata interfaces minimal.\n'
5921,69213009,"b'@roji @ErikEJ @alexkeh @PrashanthIBM @gmartinezsan This property is defined on IRelationalConnection in the RTM release. Moving it to here is technically a breaking change because it is possible that a provider could have implemented this interface directly rather than through IRelationalConnection. However, we think that this is unlikely. Can you guys confirm whether or not this change would break your providers?\n/cc @rowanmiller @divega \n'"
5890,69248308,"b'Should this be ""lifted"" to a Fluent API call? We do it for other relational configuration.\n'"
5921,69250687,b'I do not think so: https://github.com/ErikEJ/EntityFramework.SqlServerCompact/blob/master/src/Provider40/Storage/Internal/ISqlCeDatabaseConnection.cs \n'
5890,69380013,"b""@bricelam Good point. I'll do that.\n"""
5925,69343797,"b'GroupJoin_SelectMany_Where() - no DefaultIfEmpty in the query, same thing below\n'"
5925,69346202,b'Will fix.\n'
5925,69346242,"b'there are more tests blocked by this issue in GearsOfWar tests, they should be enabled also\n'"
5925,69361959,"b""Got 'em, thanks.\n"""
5990,69667942,b'better name suggestions?\n'
5990,69668030,"b""before we would use the parameter collection as cache key, and since we modify the parameter collection during execution the cache would become corrupted - so we need to clone them now, only doing it upon adding new entry to the cache so the perf impact shouldn't be too big\n"""
5990,69668162,"b""we disable this for order by, because you can't have parameter (that is integer) in the order by\n"""
5990,69768508,b'Ternary (can you run R# over the changes?)\n'
5990,69768782,b'Use Dictionary ctor that takes a Dictionary.\n'
5990,69769383,b'Can this be private?\n'
5990,69769601,"b'""Mehod""\n'"
5990,69769918,b'Why is this generalized? Can we just make it specifically about parameter introduction?\n'
5990,69805592,b'Add comment in code?\n'
5986,69676204,"b""Could these changes possibly wait for a bit? @anurse's KoreBuild v2 changes are nearly done and a bunch of this code would have to be transpiled to xml soon. Might as well start off writing this in xml\n"""
5986,69676276,b'This is going to be pretty tricky to keep update to date between releases.\n'
5986,69760850,"b""How long? I'm working on other changes that need to happen on top of this.\n"""
5986,69809707,"b""I assume you mean that it would be nicer if a script could update this instead of manually updating...as changing the makefile is not actually hard. Ironically, I didn't do this because of the msbuild/project.json changes that are coming. Is it sufficient for now though?\n"""
5985,69647549,"b'I\'d go with this...\n\n`Configures the <see cref=""ValueGenerator"" /> that will generate values for this property.`\n'"
5985,69647891,b'Configures the _type_ that will generate values for this property?\n'
5985,69647969,"b""We've used this wording elsewhere, I think it's a little clearer, but also ok with what you have if you want to leave it...\n\n> Values are generated only when the property is assigned the CLR default value (null for string, 0 for int, Guid.Empty for Guid, etc.).\n"""
5985,69648158,b'We typically use database provider rather than Entity Framework provider.\n\n> ...usually handled automatically by the database provider\n'
5985,69648367,"b""What are the use cases for this one? It seems pretty complicated for the top level API... but maybe I'm missing a use case \xf0\x9f\x98\x84 \n"""
5985,69648639,"b""I'd add something to the effect of\n\n> Setting null does not disable value generation for this property, it just clears any generator explicitly configured for this property. The database provider may still have a value generator for the property type.\n"""
5985,69648823,"b""We could move it off the top level if you want. This is what all the other APIs are doing, they are just sugar for when you have a simple type. I don't think it is any more complicated that the other APIs. In some respects it is simpler because it is less magic.\n"""
5985,69649496,b'When I got to the resources I realized this is needed for non-parameterless constructors... which is enough of a reason to leave it here (IMNVHO).\n'
5985,69649752,b'Sounds good\n'
6002,69971303,b'this is non-deterministic and will probably fail on postgres @roji  reported similar problems a few times\n'
6002,69971355,b'same as above\n'
6003,69961785,b'Should this have a class constraint to match the other APIs in CF?\n'
6003,70003522,b'Will do.\n'
6003,70004067,b'The Type overload should be removed from base. The current implementation would become the implementation of the new overload in ModelBuilderNonGenericTest\n'
6003,70004352,b'Why the Type suffix?\n'
6003,70004661,"b'These should remain Facts, the variations are handled at class level\n'"
6003,70006624,"b""Don't know how that got there...\n"""
6003,70006641,b'Will do.\n'
6003,70011690,b'It was in the parallel class to this. Looks like it refers to passing a Type as opposed to a string as the entity type name.\n'
6022,70001550,b'It should be safe to just rely on Dispose to do this.\n'
6022,70001592,"b""This can't be null, right?\n"""
6032,70319938,b'`originalType` is always same as `originalType.UnwrapNullableType()` here.\n'
6032,70320467,b'will fix\n'
5948,69362143,b'Second null-conditional not required.\n'
5948,69362207,b'Multiple null checks on columnExpression - Is there a more efficient way to write this?\n'
6045,70520090,b'Remove this and use a default value for cancellationToken.\n'
6045,70520138,b'Remove this and use a default value for cancellationToken.\n'
6045,70520480,b'Presumably you mean by making the API non-params?\n'
5949,70656114,b'Nit: I liked these in their own file too.\n'
5949,70657654,b'Will this ever happen?\n'
5949,70657836,b'Nit: Unused references\n'
5949,70657977,b'Nit: This is the default.\n'
5949,70658217,"b'Clever, but I think I prefer `#if` blocks\n'"
5949,70670897,"b'Yes. When project has the .NET Standard version of .Design, which compiles w/o the serialization attribute and forwarding proxy code.\n'"
5949,70671763,"b""Yeah, I'm going to move this into separate files. I'm trying to come up with a way that this part of the code can be shared between dotnet-ef and ef.exe so that we can get proper help output w/o having two versions of this (for #5188 )\n"""
6068,70716715,b'Need [Fact]?\n'
6068,70716977,b'Would break the build as the test fails\n'
6068,70717344,"b'Ah, mistakenly thought we were verifying the issue was fixed :relaxed: \n'"
6074,70725216,b'Any way to restructure logic to remove the duplication here?\n'
6074,70727188,"b'was thinking about it also, will try\n'"
6071,70733357,b'nit: move this a bit lower\n'
6071,70733413,b'missing docs\n'
6071,70853531,b'Fixing.\n'
6082,70895921,b'internal by design?\n'
6082,70896022,b'Could we just use ValueBuffer instead?\n'
6082,70896059,"b'Yes. Wanted to be nested and private, but then no good place to cache the MethodInfo because Finder is generic.\n'"
6082,70896238,"b""Maybe. But it has stuff we don't need.\n"""
6082,70896825,"b'Could be worth measuring. Advantage is avoids an extra type, and we already have similar code to build the get value expressions.\n'"
6093,71056462,"b""any ideas on how to avoid DynamicInvoke here? (since the argument is TransparentIdentifier I can't store the accessor as Func<object, object> and I can't add type arguments to the GroupJoinInclude itself because that would be breaking change\n"""
6093,71057678,"b""GroupJoinInclude is internal. Let's discuss next week.\n"""
6075,71215419,b'Consider using nameof for method names to ensure they stay up-to-day and never get localized\n'
6075,71382503,b'Good idea. Done.\n'
6093,71391956,b'``` cs\npublic virtual Type GroupJoinIncludeType => typeof(GroupJoinInclude);\n```\n\non QueryMethodProvider is the problem\n'
6075,71394957,"b'Think this should just be ""navigation property"" rather than ""property or navigation property"".\n'"
6075,71395094,b'Think this should be:\n\n> An object that exposes change tracking information and operations for the given navigation property.\n'
6075,71395160,b'Same as previous comment\n'
6075,71395231,b'Same as previous comment\n'
6075,71395372,b'Same as previous comment\n'
6075,71395426,b'Same as previous comment\n'
6075,71395438,b'Same as previous comment\n'
6075,71395734,"b""Maybe document what this returns for collection navigations. I know that is probably documented on the derived class (haven't got there yet), but it would be good to know here for folks using the Member() method.\n"""
6075,71396018,"b'This is just navigations in general right, not just collection navigations\n'"
6075,71396235,b'Yes. Copy/paste error.\n'
6111,71605346,"b'ignore this part, its going away - residual code from different investigation\n'"
6111,71766704,b'You could collapse these conditionals into a single expression.\n'
6111,71766813,b'You could probably collapse these conditionals into a single expression.\n'
6131,71786483,b'Looks like a nice test model. Would be great if the model/fixture was split out to be re-usable. \n'
6120,71767446,b'add tests for more than 1 include (both sync and async)\n'
6120,71767581,b'nit: formatting\n'
6120,71770585,"b'this is a breaking change to a public surface: IQueryMethodProvider.GroupJoinIncludeType, i.e. we should keep the IDisposable interface here\n'"
6120,71771023,b'_relatedEntityLoaders are shared between all GroupJoinIncludeContext instances - would that be a problem when disposing asynchronously?\n'
6120,71778274,"b'Yeah, we can just make it a no-op. @divega Can we obsolete this?\n'"
6120,71778571,"b""They aren't shared I believe. The factories are shared.\n"""
6120,71778860,b'Can you do the test against Northwind in the shared style?\n'
6120,71804775,b'Added.\n'
6120,71804786,b'Added no-op Dispose methods.\n'
6120,71804861,b'@maumar - I added test with multiple includes and multi level includes both are working fine. Any other way to verify that there is no problem?\n'
6120,71806160,b'@smitpatel we should be good as far as tests are concerned\n'
6099,71742096,b'Typo?\n'
6099,71750340,b'Why are these changing?\n'
6099,71756763,b'Why there are mixed `new CancellationToken()` and `default(CancellationToken)` ?\n'
6099,71757563,b'can be simplified with `return source is IAsyncEnumerable<TSource>`\n'
6099,71781299,"b""Apparently it changed automatically when doing some copy/pasting due to my Resharper settings and i didn't catch them when reviewing my commit changes. I'll get these patched back up.\n"""
6099,71784842,"b""added to support a minor defect in a related project that was intermixing EF core with 1.0 RTM libraries. This may be redundant outside of mixed-library scenarios such as that, but it doesn't hurt anything to leave it in place.\n"""
6099,71784864,"b""added to support a minor defect in a related project that was intermixing EF core with 1.0 RTM libraries. This may be redundant outside of mixed-library scenarios such as that, but it doesn't hurt anything to leave it in place.\n"""
6099,71918771,"b'@rdefreitas Starting to look at this. First couple of things:\n\n1) Microsoft.EntityFrameworkCore.csproj no longer builds. Looks like some shared files got removed.\n2) CoreStrings.resx got moved. If we need resources in Abstractions, then split them out into an AbstractionsStrings.resx and link the Resources.tt file\n\nThanks!\n'"
6099,71928347,"b""Why is this necessary? In principle it doesn't seem right.\n"""
6099,71928535,b'It seems weird to have internal surface in an abstractions package. \n'
6099,71932348,"b'@divega I has split out the small necessary components from the EF Core project into the Abstractions project, and added a dependency on the abstractions in the Ef library, with a focus on minimizing breaking changes..\n\nWith the exception of classes whose namespaces were intentionally changed, I tried to keep the same namespaces intact whenever possible, particular in the case of highly related components.\n\nConsidering that all of the Internal namespaces give warnings in the code docs for outside parties not to rely on them, I suppose it\'s safe to change them, and in doing so, simplify the library a bit.\n\nIEntityQueryProvider is a helper interface that was introduced in place of EntityQueryProvider and used in the extensions for IIncludableQueryable, as the EntityQueryProvider type is no longer accessible to those extensions.  Would you propose I eliminate any ""Internal"" namespaces and only preserve old namespaces if they would have resulted in breaking changes?\n\nI could move everything into the Microsoft.EntityFrameCore.Abstractions namespace unless there is a good case for why it lead to breaking changes.\n'"
6099,71934107,"b'@rdefreitas In general the bar for moving internal types to public surface his quite high, so no, I am not suggesting that we move anything. My main point is that carrying internal types in an Abstractions packages smells. It may be a symptom that what you are creating is not really an abstractions package, that the factoring needs improvement or - like with any smell - it maybe ok for some reason (although in this case I would be surprised). Anyway, I will let you and @anpete figure that out :smile:\n'"
6099,71935925,"b""I agree that it feels wrong...\n\nIt was necessary to move CoreStrings in Abstractions so that the embedded resources could be accessed there, but oddly the shared utility classes, particularly Check, were encountering type collision issues when they existed in both libraries.\n\nIn light of the collision and in the interest of minimizing future support, I did not wish to break out CoreStrings and Check to include a different internal version in each of the 2 libraries. allowing EFCore to reference those from Abstractions.\n\nI can go back to that issue this weekend and see if maybe there was something overlooked that led to that type collision during builds, although nothing comes to mind off-hand. If you have any suggestions I'm open to them :)\n"""
6099,71936040,b'@rdefreitas Change the Include stuff to test for IAsyncQueryProvider.\n'
6099,71937961,"b""To be honest, I think these extensions, with the exception of IIncludableQueryable would feel more natural as part of System.Interactive.Async in [Reactive-Extensions/Rx.NET](https://github.com/Reactive-Extensions/Rx.NET), but then that would leave the questions of the best way to hook up special handling for EF's EntityQueryProvider, where the Includable extensions would live, and of course the overall issues of API coupling across disparate projects.\n\nThe idea here was to allow an indispensable set of Extension methods from Entity Framework to be utilized in service libraries that do not directly reference the bulk of EFCore, without the need to introduce proxy/wrapper classes which easily can get out of hand.\n"""
6099,71938943,"b""@anpete this covers the reason behind the moving of CoreStrings.resx, although I did not encounter the build issues you're speaking of regarding EntityFrameworkCore.csproj ... were you building that in isolation from the solution and is that a scenario that needs to be supported?\n"""
6099,71939733,"b'No, opened EntityFramework.sln and hit build.\n'"
6135,71912239,b'Can we only do this cast once?\n'
6135,71919138,b'Oops! :smile: \n'
6135,71919395,b'Why this cast?\n'
6163,72163719,b'You can use `GetDeclaredKeys`\n'
6143,71960164,"b'I think maybe ""target columns"" rather than ""principal columns""?\n'"
6143,71960326,"b""Actually, the Fluent API for this concept is `HasPrincipleKey(...)` so I think it's fine as-is.\n"""
6168,72439665,b'`Will *be* sent to the`?\n'
6168,72476345,b'Is this if block part of `HasChanges()`?\n'
6168,72477028,b'Not sure what you mean? I changed some internals of how conceptual null flags are handled to make the counting cleaner.\n'
6168,72477540,b'Got it. I was just curious because it looked related to https://github.com/aspnet/EntityFramework/pull/6142. \n'
6168,72477817,"b""No, wasn't related to that.\n"""
6225,73195948,b'?\n'
6225,73200643,b'This one is disabled due to bug\n'
6229,73260816,b'`AppendLine`?\nWhole code seems to have no line breaks while printing.\n'
6229,73265116,b'yeah I did that first but it was too verbose. Wrapped expression tend to be one-liners and try-catch block was taking much more space than stuff that is actually significant.\n'
6230,73258479,"b'make this also work for non-search condition cases, e.g. in projection (and add corresponding test)\n'"
6230,73260477,b'updated.\n'
6230,73264895,"b'maybe also add 3 conditions? c.Foo == ""A"" | c.Foo == ""B"" | c.Foo == ""C"", :shipit:  otherwise\n'"
6230,73392353,b'Added with 3 ORs and mixed.\n'
6201,73423594,b'@rowanmiller @divega - Review on obsolete message.\n'
6201,73426015,"b'""in a future release""\nDo you need the error arg or is false the default?\n'"
6247,73583052,b'Fall through to core value generator since it will do this anyway.\n'
6189,73598934,"b""I think we should rather change AsAsyncEnumerable to return null instead of throwing, instead, because this approach seems problematic:\n- It doesn't do the test for IAsyncEnumerableAccessor\n- AsAsyncEnumerable will never throw now.\n- We end up testing for IAsyncEnumerable twice.\n\nSound OK?\n"""
6146,73592388,b'pull this out of the if block\n'
6146,73592488,"b""RelationalNullsExpandingVisitor doesn't have state so you can make one of them and reuse it\n"""
6146,73603279,b'Does it have state? `IsOptimalExpansion`? \n'
6173,72370890,"b""this technically is a breaking change. Current behavior is that we run relational translators first, and after that we run provider-specific translators (so if provider wants to override our relational implementation, they can't - translation is short-circuited after the first translator is able to handle the expression). \n\nThis change reverses the order, to allow providers to override our default implementations with their own. However if a provider already has a buggy implementation that was just not being called ever, now things could start to fail :) \n"""
6173,72865989,b'@smitpatel  can u take a look at this bit also?\n'
6173,72866608,"b""there is a discrepancy between CLR semantics and the result we have here - if the EndsWith that takes null as argumens and its compared (!=) to null, we would expect to get positive result, but we get a negative instead. Reason is that EndsWith term is converted to CASE block as it's a search condition, a boolean value is expected, and that case block never returns null. I don't think we can do anything about this case, but it shouldn't be a big deal, because C# would throw in this case anyway :)\n"""
6173,72868441,b'LGTM.\n'
6173,72868510,b'nit: Alphabetical order?\n'
6173,73562799,b'Need a transaction here?\n'
6173,73633220,b'@anpete @ajcvickers can you guys take a look at the message?\n'
6189,73762565,b'> AsAsyncEnumerable still throws\n\nIt will never throw because we always call IsAsyncEnumerable first. AsAsyncEnumerable is an internal impl. detail and so we are free to change it.\n\n> would then require we add a null check everywhere we call the method\n\nYes. Consider the idiomatic c# pattern of using the as operator followed by a null check.\n'
6189,73760121,"b""**As**AsyncEnumerable still throws... that method hasn't changed.  IsAsyncEnumerable is a shortcut method that is used inside some of the extension fallbacks (ToDictionaryAsync,ToListAsync). It is possible to remove the AsAsyncEnumerable method altogether and just call `source is IAsyncEnumerable<TSource>` inside of these methods.\n\nI believe that it should still throw if calling AsAsyncEnumerable() on a collection that is not.  The As method feels like an assertion. I'm going to use this object as this other object because I know it can be done.\nIf I assert it can be done and I'm wrong, I deserve my code to blow up in my face (which null would do anyway and would then require we add a null check everywhere we call the method).\n"""
6079,73914690,"b'FYI, I leave these off of supplemental partials because DRY.\n'"
6079,73916078,b'This type seems unnecessary. YAGNI\n'
6079,73916849,b'I like this pattern better than `DesignMarshalByRefObject`\n'
6079,73918593,"b""Oh yeah, forgot about this guy. I added for (yet to be implemented) testing. But I'll pull this out as there is no need for it yet.\n"""
5879,73940382,"b""@bricelam there's a trailing space in the key here. Can we fix that?\n"""
5879,73940408,"b'(I realize it probably has no effect, but just in case.)\n'"
6112,72668040,b'nit: Empty line\n'
6112,72668831,"b'Cannot this be simplified with `.Split(new[] { Environment.NewLine, ""\\n"" }, StringSplitOptions.RemoveEmptyEntries)`? Do we care about empty lines in the middle of the message?\n'"
6112,72825725,"b'> Do we care about empty lines in the middle of the message?\n\nYes, this is intentional.\n'"
6112,73918086,"b""Why enable this? The other code path won't work unless you copy `ef.exe` to your `bin` directory, and even then the `App.config` won't get used for settings, redirects, etc.\n"""
6112,73918250,b'&nbsp;\n'
6112,73919189,b'Just `Debugger.Launch` instead?\n'
6112,73919552,b'Eww... Is there any way we can get away with not owning a C#-implemented cmdlet?\n'
6112,73920964,"b""Isn't there an active one we can just use?\n"""
6112,73921238,"b""I don't like having these numbers hard-coded here and below.\n"""
6112,73921651,b'Should we just default to `ef.exe`?\n'
6112,73921769,b' (and see what happens)\n'
6112,73921839,"b""Yeah, I agree it's not ideal. But I haven't found anything in PS that gives us the functionality we want. Here was my thinking on why we need this:\n- Invoke-Expression has all sorts of yucky problems with argument escaping. We've already solved most, but not all of them (such as dangling quotes). With a C# cmdlet, we can just pass in `string[]` arg instead and use a more-robust argument escaper.\n- Argument escaping issues could have been mitigated by using the call operator instead `& ef.exe`, but PMC hides all output from out-of-proc calls initialized with the call operator.\n- Therefore, the only way to show output would be redirect to file or variable and print its contents when the ef.exe operation completes.\n- AFAIK not possible to process both stderr and stdout in parallel from code in psm1\n"""
6112,73922318,"b""UWP design-time. UWP ends up with the NETStandard .Design assembly which means the internal OperationExecutor isn't an MBRO.\n"""
6112,73922532,b':trollface: Can we have `--im-a-robot` as sugar for `--no-color` and `--json`?\n'
6112,73922542,"b""Not AFAIK. I searched the DTE namespace but couldn't find anything.\n"""
6112,73922745,b'Makes sense.\n'
6112,73922957,"b'yes, absolutely yes. \xf0\x9f\xa4\x96\n'"
6112,73923109,b'Sounds justified. We should test what will happen in the future during upgrade scenarios.\n'
6112,73923313,"b""It might be web-tools specific (which means it'll probably change anyway)\n"""
6112,73923811,"b""Here's what I've found so far:\n- binary PS modules cannot be unloaded. \n  Implications:\n  - `Uninstall-Package` tools package requires VS restart b/c the .dll is still loaded in the PMC domain\n  - `Remove-Module` silently fails to remove binary modules. => Upgrading 1.1 to 1.2 (without a VS restart) will still have the old version of the binary module. We could mitigate by adding full version to the name of the name of the binary module.\n"""
6112,73935910,b'Is it likely to ever actually change?\n'
6112,73937889,"b""Given our recent tooling history, then absolutely yes this will change. But of course I'd like to think this won't need much revision. \xf0\x9f\x94\xae \n"""
6112,73976116,"b'Any suggestion for alternatives? \n\nAlso, most of this will change as project.json dies. In theory we should be able to pull this from DTE/CPS instead\n'"
6112,73988588,b'Can we get just the framework identifier (without the version) e.g. .NETFramework?\n'
6112,74100705,"b""Not from DTE. This isn't exposed as a property on the project or in the active configuration. We could start bundling Nuget.Frameworks.dll to parse the tfm string, but I'm not sure we want to do that either.\n"""
6112,74101164,"b'For reference, here is what DTE gives us about an xproj `Project`.\n\n```\nOutputType = Library\nOutputName = \nFullPath = C:\\Users\\namc\\dev\\ef\\src\\Tools.DotNet\nActiveDebugFramework = \nIsClasslibraryProject = False\nRootNamespace = Microsoft.EntityFrameworkCore.Tools.DotNet\nAvailablePlatforms = System.Collections.ObjectModel.ReadOnlyCollection`1[System.String]\nFileName = Tools.DotNet.xproj\nTargetFrameworkMoniker = .NETFramework,Version=v4.5.1\nIsWebProject = False\nAssemblyName = Tools.DotNet\nProduceOutputsOnBuild = False\nApplicationIcon = \nTargetFramework = 262405\nActiveDebugRuntime = \nTargetDNXVersion = \nDebugCLRTypeOverride = \nUserSecretsId = \nName = Tools.DotNet\n```\n\n(FYI Tools.DotNet only targets ""netcoreapp1.0"", but ""TargetFrameworkMoniker"" says .NETFramework for some reason, and ""TargetFramework = 262405"" doesn\'t appear to actually correlate to the TFMs in projectjson)\n\nFrom active configuration\n\n```\nOutputPath = .\\bin\\\n```\n'"
6112,74108070,"b""There's enough TODOs in here to just move forward with what you have for now. :wink: \n"""
6269,74157563,b'Consider using an out parameter or return a Tuple\n'
6269,74159607,b'Note for myself to revision this assert\n'
6269,74166234,"b""We'll likely need to cache this\n"""
6279,74336689,"b""Nit: EF 7? What's that? :trollface: \n"""
6294,74360882,"b'If this is supposed to be somewhat general purpose (even if internal) consider ""using"" the enumerators so that they get disposed. \n'"
6294,74470571,b'ok\n'
6288,74458276,b'`virtual`? May want to enable the API consistency tests (or at least some of them) on this.\n'
6288,74458700,b'Should we just always do this if `--no-color` is specified?\n'
6288,74458979,b'Do we use this? Are we ever gonna need it?\n'
6288,74459714,"b""Good point. We don't really need this now that dotnet-ef.dll and ef.dll are always inside the same package. I'll remove it. (Yay for more code deletion!)\n"""
6288,74460137,"b'I assumed YAGNI. This isn\'t really an ""API"" in the sense that we don\'t expect other developers to be able to reuse this.\n'"
6288,74460290,b'Use the unicorn sparingly. I think I had it so only `ef` (not even `ef --help`) would show it.\n'
6288,74461149,"b""I don't think this is an error--nothing went wrong, we just didn't find any.\n"""
6288,74461706,b'I am 100% against using verbatim strings for newlines in the product. :smile: Please switch to `+ EOL` (or `string.Join` like below)\n'
6288,74462230,"b'Again, not an error.\n'"
6288,74462713,"b""Why throw here? Should this just be `Debug.Assert(sql != null)`?\n\nAn empty script file is acceptable; it just means there's no work to do. Imagine an automated scenario that gens all the time just in case.\n"""
6288,74463562,"b""I don't want to see the stack trace in red--just the message.\n"""
6288,74463680,"b""...or is this still the CLI reporter which doesn't color?\n"""
6288,74464543,b'Is this necessary? I thought `Launch` already blocked until it was attached.\n'
6288,74466206,"b':crystal_ball: I wonder if we should call this `GetContextInfo` I can imagine wanting to retrieve a lot more of the context configuration besides just these parts of the database connection. (e.g. full connection string, EF provider, ADO.NET provider, etc.)\n'"
6288,74466758,"b""It's actually the other way around. Using `--prefix-output`  implies `--no-color`, but I can see some scenarios for wanting no color _and_ un-prefixed output. ( \xf0\x9f\x94\xae I'm thinking integration w/ VS Code)\n"""
6288,74466936,"b""Ok, I'll update to match original behavior. \xf0\x9f\xa6\x84\n"""
6288,74467037,"b""I'm not sure having `.net451` in the filename adds any value. (Having `AppDomain` is hint enough)\nBut I do think it's worth discussing in a design meeting. I think we can come up with some more consistent ways of organizing our framework-specific code.\n"""
6288,74467107,"b""Will update. I didn't know empty output was acceptable.\n"""
6288,74467339,"b""This is our reporter, so the stack trace will be in red. I'll add more API to reporter to suppress color for specific messages.\n"""
6288,74467607,b'We should review these methods. They were a blend of PowerShell and Logging (before they did their renames) and we can probably simplify a lot now that everything goes through `ef.exe`.\n'
6288,74467903,"b""I hit an odd case where the debugger launch API didn't actually work. Maybe it had something to do with how the PMC host works.\n"""
6288,74468072,b'\xf0\x9f\x91\x8d\n'
6288,74468133,"b'It serves to delight, but not get in the way. :wink: \n'"
6288,74468618,"b"">  it's worth discussing in a design meeting\n\ni'll bring it up at the next one\n"""
6288,74469191,b'This name is a lot more general than the implementation. Perhaps it should be something more specific like _EFToolCommandResolver_?\n'
6288,74470787,"b""Cool. I didn't know they published something like this.\n"""
6288,74473281,"b""Doesn't the initialization of `options` make the `@` unnecessary here?\n"""
6288,74475023,b'I wonder if we should add more structure to this result. Something like `$result.ContextFile` and `$result.EntityTypeFiles`.\n'
6288,74475153,b'(This line relies on the context file being first.)\n'
6288,74475695,"b""It doesn't really make a difference here since we aren't using named parameters\n"""
6288,74476008,b'.NET Core CLI :arrow_right: .NET Core SDK\n'
6288,74476645,"b""Doesn't `ef.exe` tell you this too?\n"""
6288,74477203,"b'Sorry to flop, but I think the way you had it before was better. VS only runs on x86 and x64, so the chances of this succeeding are 0%.\n'"
6288,74477662,"b'Only dotnet-ef and .psm1 log this. I assumed anyone invoking ef.exe directly will understand that whatever value the specify in --data-dir will get used, so a logging that value back out seemed unnecessary.\n'"
6288,74479292,b'_Upgrade_? Perhaps something like _WhichEF_ instead?\n'
6288,74480122,"b""This needs to stream output (unless we're parsing JSON). `Update-Database` will be way too unresponsive otherwise.\n"""
6288,74480644,"b""Fine to leave, it's just DEBUG code anyway.\n"""
6288,74480925,b'Fine as is. I was just curious. PowerShell can be weird.\n'
6288,74481004,b'Sounds good.\n'
6288,74481579,b'Fine to leave\n'
6288,74481838,"b""I agree it's YAGNI, but consistency merit too. I'm fine not fixing for now.\n"""
6300,74483681,b'`SupportsShouldProcess = $true`\n\nThis is the idiomatic way of doing confirmation and dry runs in PowerShell\n'
6300,74483968,"b'Use `$PSCmdlet.ShouldProcess(""$databaseName on $dataSource"")` instead.\n'"
6300,74617198,"b'Using `-Force` for this in PowerShell is an anti-pattern. Instead, the user would either set `$ConfirmPreference` or use the `-Confirm:$false` default parameter.\n'"
6300,74617384,"b""May want to also set `ConfirmImpact = 'High'` so it prompts by default in PMC.\n"""
6300,74617619,b'`-WhatIf` is handled by `ShouldProcess`. It will show a differnt message and return `$false` without prompting.\n'
6300,74617720,b'This needs to be `ShouldProcess`. `ShouldContinue` is used when processing multiple things.\n'
6290,74343389,b'`7.0.0-test` is just a hard-coded test value. Any resemblance to versions both real and imagined is purely coincidental. Void where prohibited. @natemcmaster \n'
6334,75172858,b'YAGNI. Remove for now.\n'
6334,75173586,b'We should just inline the fwlink.\n'
6341,75164422,"b""Do we need to mention shadow keys at all here? Maybe:\n\n> No primary key compatible with the foreign key type was found for the relationship from '{referencingEntityTypeOrNavigation}' to '{referencedEntityTypeOrNavigation}' with foreign key properties {foreignKeyProperties}. Configure a principal key or a set of compatible foreign key properties for this relationship.\n\nBecause it seems very unlikely that anyone will get this message for anything other than us creating the shadow PK for them, and the shadow stuff in the message is very distracting/confusing to people.\n"""
6341,75172116,"b""By this point we know that a primary key exists, so how about this?\n\n> The relationship from '{referencingEntityTypeOrNavigation}' to '{referencedEntityTypeOrNavigation}' with foreign key properties {foreignKeyProperties} cannot target the primary key because it is not compatible. Configure a principal key or a set of compatible foreign key properties for this relationship.\n"""
6341,75172651,"b'I like it except that what does ""is not compatible"" mean? Usually the wrong type, possibly wrong number of properties.\n'"
6341,75173606,"b""We could include the types as well. So formatted it would look like\n\n> The relationship from 'OrderDetails.Order' to 'Order.OrderDetails' with foreign key properties 'OrderId : int, OrderUniqueId : Guid' cannot target the primary key 'Id : string' because it is not compatible. Configure a principal key or a set of compatible foreign key properties for this relationship.\n"""
6341,75174217,b':shipit:\n'
6341,75200325,b':+1:\n'
6349,75221816,b'why was this added?\n'
6349,75221869,b'Test also happens to fail in release mode.\n'
6349,75222125,"b'Although this fixes that, but would be nice to know why? Also, did you verify this fix with Templates?\n'"
6349,75222492,b'I believe this is essentially a test parallelization problem.\n'
6349,75222905,"b'Okay, as long as no functional issues here.\n'"
6349,75222966,"b""Oh, and yes. I've verified this fixes the issue.\n"""
6348,75343433,b'Is there anything that was calling `CreateMaterializeExpression` than can be updated to use this new cache?\n'
6348,75371429,"b""Extra 'the'\n"""
6348,75378306,"b'Consider taking a `IReadOnlyDictionary<string, object>` here and implementing it by `PropertyValues` or having it as an overload\n'"
6348,75508899,"b'Query uses it, but I believe it compiles it into its own delegates that are cached at a higher level. @anpete can probably comment about whether it would make sense to combine these at all.\n'"
6348,75509060,"b""Seems like a good idea. I'll create an issue for it. I wonder why we didn't have it in EF6?\n"""
6370,75567687,b'Why not call `.Select` instead of yield?\n'
6370,75735300,b'Fixed\n'
6376,75564843,b'Split into two loops to avoid the double cast\n'
6376,75564950,b'Since we throw for multiple attributes the `OrderBy` is irrelevant\n'
6376,75565176,"b'Also there is no point collecting the candidates, we can just throw when another one is found\n'"
6376,75743531,"b'Tried this, but there is more code and it seems less readable, so made a minor change to not store targetType into a local but left as a single loop.\n'"
6376,75743566,b'Fixed.\n'
6376,75743580,b'Fixed.\n'
6376,75743732,b'ok\n'
6395,76152143,b'Why did this change?\n'
6395,76152619,"b'Now we materialize the inners as entities, so we need all the columns in the projection\n'"
6408,76255994,b'Is it intentional not to use `IsRowVersion` for this one?\n'
6408,76275119,"b'Yes. Both ways should do the same thing, so this adds coverage for both ways of doing it.\n'"
5576,72717950,b'Derive directly from `IMethodCallTranslator`\n'
5576,72718565,b'Is this doing something other than null value check? If no then there should not be any need to recreate the constant expression.\n'
5576,72719352,b'Alphabetical ordering.\n'
5576,72719386,b'nit: extra line breaks\n'
5576,72719425,"b""you don't need to put attribute `[ConditionalFact]` in derived test class.\n"""
5576,72719468,b'Should Assert Sql in this test.\n'
5576,72719510,b'Redundant method override. Remove.\n'
5576,72719520,b'Redundant method override. Remove.\n'
5576,72906067,"b""At first I tried to create IMethodCallTranslator, but it never get called, because the argument type of Enum.HasFlag() is a System.Enum, and it's not mapped to any CLR type.\n So, I changed to IExpressionFragmentTranslator\n"""
5576,73775815,"b'That should not cause any issue since, the argument would be either parameter or constant. For both the cases, we try to find database mapping for the underlying type (which is necessary because we need to represent the argument in SQL) and if that is non-null then translator should get called.\n'"
6407,76458619,b'Internal?\n'
6407,76458674,b'If this type remains public then need Checks here.\n'
6407,76458912,b'This test is likely going to cause more pain that its worth.\n'
6406,76477539,b'Should this derive from `ObservableHashSet`? Also should the doc comment recommend that for WPF?\n'
6406,76477897,"b'Ah, we already have that. Why does this class exist?\n'"
6406,76484619,"b'Apparently `IListSource` is in netstandard1.5 and up, defined in the `System.ComponentModel.TypeConverter` package. Should we add this dependency and compile the same code for more targets?\n'"
6406,76499921,"b""We have had this conversation a number of times before and so far the answer has always been no, but it may be time to revisit it again. I don't think it depends on anything in this PR, but rather on whether we can take a dependency on 1.5, which so far has always been no.\n"""
6406,76500001,b'It exists for WinForms binding when people are using ObservableCollections as their nav props.\n'
6406,76505963,"b""Ok, last time we had that conversation I believed that `IListSource` wasn't in netstandard at all. But yes, I am not sure it being in netstandard1.5 changes things enough.\n"""
6419,76638466,b'_callined_ :arrow_right: _calling_\n'
6419,76638566,b'Copied below too\n'
6281,74505685,b'I think it would be better to try and call Evaluate directly here so we can avoid the Parameter creation completely.\n'
6281,74515196,b'Do we need the same Try..Catch as in TryExtractParameter?\n'
6431,76717134,b'no need to look at the ExpressionType since you are soft-casting argument to ConstantExpression and testing it after\n'
6430,76703505,b'@divega Should we specify `Message` and/or `IsError` for any of these?\n'
6430,76703576,b'@smitpatel Should these get disposed with the object?\n'
6430,76708937,"b'I am leaning towards having something in the message in the lines of ""This internal API is deprecated as of version 1.0.1 and is only preserved for binary compatibility with version 1.0.0. It should not be used by any code.""  Not sure why we didn\'t use the term ""internal"" in the XML comment to describe the API though. \n'"
6430,76727970,b'Yes. `_currentContext.Dispose()` should be called in `Dispose()` method.\n'
6430,76852676,b'Unfortunatelly I confirmed the return type change in Initalize() is also a binary breaking change \xf0\x9f\x98\xa2 \n'
6430,76852919,b'We can chat but I think using a new method name should work.\n'
6430,76860378,b'What about an overload with an `out` parameter?\n'
6430,76860656,b'The overload seems less messy than obsoleting `Initialize` and adding `Initialize2` just to rename `Initialize2` back to `Initialize` in 1.1\n'
6430,76889358,"b'Should we assign this only in `Initialize()`? My reasoning is this may have unintended side effects, e.g. keep alive the object more than needed.\n'"
6409,76907101,"b'The condition based on the `Name` was introduced while fixing bug #5909 \nEssentially we compare name (doing OR with property) due to shared columns in TPH scenario where properties may be different but column is same in the table. Which is correct behavior. If same column is being projected from a table, it should not repeated.\n~~Adding condition with `&&` regress the bug #5909~~\nIn this particular case, issue is arising because the table is a push down subquery, hence `TableAlias` is same even though projections are coming from different tables through joins. Though this does not seem to be correct way to fix it\n'"
6409,77086901,"b'Can you remove line `(ce.Property == columnExpression.Property || ce.Name == columnExpression.Name)` altogether because with these new conditions, property match does not matter.\nAlso change similar thing in `AddToProjection(ColumnExpression)` function.\n'"
6417,76887035,b'Consider adding an example\n'
6417,76887256,b'Can you elaborate on this?\n'
6417,77212719,"b""The include string should not be parameterized, so In used the same mechanism as FromSql uses to not parameterize it. However, that didn't work because all methods of EntityFrameworkQueryableExtensions were being skipped, presumably for perf reasons. This allows the Include method to be handled correctly without changing the code to process all methods of EntityFrameworkQueryableExtensions.\n"""
6417,77213689,b'Makes sense. That is indeed a perf. shortcut.\n'
6442,76891063,b'My gut feeling is that this should go just before `createSequenceOperations`.\n'
6442,76891367,b'I have no objections\n'
6442,76891670,b'Doing this always felt wrong to me. It seems like you should never need to know any additional information to drop it...\n'
6442,76891747,b'W00t! I need this.\n'
6442,76891772,b'(Same as above)\n'
6442,76891845,b'...and other places.\n'
6442,76891917,b'Well you do need it for memory-optimized to suppress the transaction\n'
6442,76892113,"b""It's interesting that you can't actually annotate a sequence in metadata, but you can synthesize annotations...\n"""
6442,76892209,b'Obscure C# feature of the day: calling indexers from object initializers\n'
6442,76892402,b'Should we no-op?\n'
6442,76892493,b'We could enable sequence annotations in metadata when we find a compelling scenario that needs it\n'
6442,76892792,b'I also need Old\\* of everything else.\n'
6442,76893541,b'Yes\n'
6442,76895735,b'Will extract to base type\n'
6442,77011272,"b'lol, one of my favorites! It inspired me to write my [C# Object Notation](http://www.bricelam.net/2015/02/01/csharp-object-notation.html) post.\n'"
6442,77012823,b'Huh? The differ never generates DropDatabase operations...\n'
6442,77013546,"b""Oh interesting. It's a special AlterDatabase when you're going to InitialDatabase\n"""
6442,77013735,b'Makes sense.\n'
6442,77014489,b'My preference is just to have `OldAnnotations`\n'
6442,77015224,"b'(Or get rid of RenameTableOperation, but we already decided not to do that in a design meeting)\n'"
6442,77015689,"b'To put it differently, my preference is to not have Schema & Name on OldTable (which just leaves the annotations).\n\nAlterColumn.OldColumn would have type, is null, etc. but not schema, table, and name.\n'"
6442,77016074,b'Extract method.\n'
6442,77016299,"b""I think `UnwrapNullableType` is superfluous now. (It wasn't when this was originally written)\n"""
6442,77016794,b'Ditto for AlterSequenceOperation\n'
6442,77017653,"b""(I can't remember if I said this already so sorry if I have.)\n\nWe have a similar pattern that is used to not add StatementTerminator and allow appending to the end of the statement. Instead of passing terminate, I think we should pass what we really need here: suppressTransaction.\n\nThis would also play better with the batching when we have it. (See [my prototype](https://github.com/aspnet/EntityFramework/compare/dev...bricelam:batch))\n"""
6442,77020410,b'I am 100% against using verbatim strings for newlines in product code. Please put each line in an `AppendLine` call.\n'
6442,77021039,"b""This syntax is so much better! It's a shame we can't just always use it.\n"""
6442,77021359,b'XOR?\n'
6442,77042716,"b'Agree, but I would still call them OldTable, etc so we could put more things on them without renaming\n'"
6442,77056266,"b""I'm following the existing pattern. I think this is more flexible than just passing suppressTransaction as it also allows appending to the end.\n"""
6442,77056480,b'I was wondering if anyone would notice \xf0\x9f\x91\x80 \n'
6442,77056949,b'good catch\n'
6442,77095711,"b'Given warning above, `.Internal` namespace?\n'"
6442,77095977,"b""I'll remove the doc comment\n"""
6442,77176351,b'We should be consistent about whether the statement terminator is appended or not then\n'
6442,77230508,"b""Makes sense. Should it be renamed for methods that don't append the statement terminator?\n"""
6442,77367425,b':+1: That seems to be where my thinking lead me too.\n'
6442,77367627,"b""I think we should just make them all not append it. It seems more generally useful. It's trivial for the caller to add it if they just wanted to control the call to `EndStatement`.\n"""
6442,77369712,"b'I wonder if these should be grouped in the API. For example...\n\n``` c#\n.AlterColumn(\n    oldColumn: new ColumnModel<int>(\n        isRequired: false));\n```\n\n...or...\n\n``` c#\n.AlterColumn()\n    .OldColumn<int>(\n        isRequired: flase);\n```\n\nMight be worth discussing in a design meeting, but I also like the simplicity and consistency with Rename\\* of the way you have it.\n'"
6442,77369979,b'Is there a way to make this `null` for existing migrations? (Or at least distinguish the defaults from unspecified.) It might be time to start using the version metadata...\n'
6442,77370445,b'We might be able to accomplish it with an overload where `oldNullable` is required.\n'
6442,77371175,b'YAGNI? Or just good OOP? Hard to say... :wink: \n'
6442,77387909,b'We need this for AlterOperationBuilder\n'
6442,77398996,b'k\n'
6464,77424257,b'Thanks for removing that extra space :smile:\n'
6489,78055866,b'I think this is redundant with DeclaringEntityType\n'
6489,78056611,b'Redundant?\n'
6489,78057959,"b""This shouldn't be part of the interface\n"""
6489,78061873,"b""It is redundant in the sense that it is always the same thing as the DeclaringEntityType, but it's always going to be there because it comes from the base interface, and since it is always going to be there and we know it will be an IEntityType, then it makes sense to me to redefine it as such.\n"""
6489,78062084,b'Will move.\n'
6489,78062371,"b""This seems confusing, the declaring type should be the entity type while the complex type would be the defining type. It's also redundant since you can get the defining complex type from DefiningProperty\n"""
6489,78063650,"b""But the implementation would still need to implement it in addition to the other 2 and I don't think there's a scenario where it would be used instead of the others. It would make more sense if we renamed DeclaringEntityType to DeclaringType and added a extension method for backwards compatibility\n\n---\n\nIn reply to: [78061873](https://github.com/aspnet/EntityFramework/pull/6489#discussion_r78061873) [](ancestors = 78061873)\n"""
6489,78063653,"b'I guess it depends what we decide ""DeclaringType"" means in this case. It\'s redundant in either case because the entity type can be obtained from the ComplexTypeUsage\n'"
6489,78064027,"b""Extension properties don't exist...\n"""
6489,78064211,"b'But in principle I agree that if we decide we can rename DeclaringEntityType, then it cleans things up.\n'"
6489,78064548,b'DeclaringType should always be the least derived type that returns this instance in .GetProperties()\n\n---\n\nIn reply to: [78063653](https://github.com/aspnet/EntityFramework/pull/6489#discussion_r78063653) [](ancestors = 78063653)\n'
6489,78065237,b'I can go with that.\n'
6489,78065863,"b""Yes, also if we didn't do any of what I proposed we would also need to hide it in INavigation and IMutableNavigation\n\n---\n\nIn reply to: [78064211](https://github.com/aspnet/EntityFramework/pull/6489#discussion_r78064211) [](ancestors = 78064211)\n"""
6489,78069324,"b'Not directly related to the current changes, but I think this should be split into 3 overloads:\n1. With only 2 parameters that adds a shadow property\n2. With a PropertyInfo parameter that adds  a non-shadow property that later could also have a FieldInfo\n3. With a FieldInfo parameter that adds a non-shadow property without a PropertyInfo\n\nThis would be more in-line with the explicitness of this layer\n'"
6489,78071393,b'Is this required?\n'
6489,78071472,"b""Shouldn't this derive from IProperty instead?\n"""
6489,78072854,b'Will remove\n'
6489,78073050,b'Yep.\n'
6489,78073598,b'This should be renamed to IComplexTypeReferenceUsage\n'
6489,78073828,b'If this derived from Property it would have little logic in it\n'
6489,78074234,"b'Yes, except that is very long. :-)\n'"
6489,78074403,"b""I'll look into it.\n"""
6489,78075282,"b'This should need less indexes, perhaps we should use a smaller type to store them. Same for Navigation indexes\n'"
6489,78075430,"b""That hasn't stopped us before\n\n---\n\nIn reply to: [78074234](https://github.com/aspnet/EntityFramework/pull/6489#discussion_r78074234) [](ancestors = 78074234)\n"""
6489,78076276,"b'I was thinking about that. They may need only the basic index, possibly with shadowIndex too. Navigations require a basic index and a relationship index.\n'"
6489,78076928,"b""The definition shouldn't have any logic for the defaults as the values it's using might not be the same as on the usage\n"""
6489,78077484,"b""I think it would make more sense to make the properties on IComplexPropertyDefinition nullable so they are only used when set, this way we don't need to come up with some arbitrary default value\n\n---\n\nIn reply to: [78076928](https://github.com/aspnet/EntityFramework/pull/6489#discussion_r78076928) [](ancestors = 78076928)\n"""
6489,78079645,"b""This shows why it's semantically incorrect to derive IComplexPropertyDefinition from IStructuralProperty even though they are structurally compatible\n\n---\n\nIn reply to: [78077484](https://github.com/aspnet/EntityFramework/pull/6489#discussion_r78077484) [](ancestors = 78077484,78076928)\n"""
6489,78079918,"b""I'm not sure what is best for this whole thing. For example, if I make the definition of the property explicitly nullable, but some uses are in keys, then do those usages just ignore that the definition was set nullable? Or should it throw immediately? Or in validation? \n"""
6489,78080907,"b""I think if we don't do this then we have to ask what IStructuralProperty is for, or indeed what the definitions are for. If I want to set the max length of any string property to some value, then if the way I do that is to traverse all usages of the property, then why have this? And if the answer is for query, then when used in the context of a query it surely is a structural property; it just doesn't belong to an entity type. \n"""
6489,78081484,"b""I think we don't need IStructuralProperty or IStructuralType. The definition provides the defaults, so you don't have to traverse all the usages.\nThe usage implementation of IsNullable would be _isNullable ?? DefiningProperty.IsNullable ?? DefaultIsNullable\n\n---\n\nIn reply to: [78080907](https://github.com/aspnet/EntityFramework/pull/6489#discussion_r78080907) [](ancestors = 78080907)\n"""
6489,78082310,"b'But then I have to write the code twice--once for setting the default on the entity types, and again for setting the default on the complex type definitions.\n'"
6489,78082832,b'What do you mean? Are you speaking as a user or as the implementer?\n\n---\n\nIn reply to: [78082310](https://github.com/aspnet/EntityFramework/pull/6489#discussion_r78082310) [](ancestors = 78082310)\n'
6489,78083880,b'User\n\n``` C#\nforeach (var structuralType in model.GetStructuralTypes())\n{\n    foreach (var structuralProperty in structuralType.GetProperties())\n    {\n        if (structuralProperty.ClrType == typeof(string))\n        {\n            structuralProperty.SetMaxLength(100);\n        }\n    }\n}\n```\n'
6489,78084581,"b'Doing it on GetEntityTypes will have the same result, unless you add a new ComplexTypeReferenceUsage after this\n\n---\n\nIn reply to: [78083880](https://github.com/aspnet/EntityFramework/pull/6489#discussion_r78083880) [](ancestors = 78083880)\n'"
6445,77064813,b'Are migration ids still the best thing to return from these APIs?  \n'
6445,77067478,b'Why are these methods buffering via ToArray? \n'
6445,77366408,"b""Mostly because the underlying one does, so there's little value in streaming just the projection.\n"""
6445,77367026,"b""Yes, at a high level, that's the only thing you can really use (to pass one it into `Migrate` or one of the commands). For more advanced scenarios, you can use `IMigrationsAssembly` to get the types and instances of the migration classes, but I have no idea what you'd be trying to do with them--analysis?\n"""
6445,77421314,b'But this will create a copy.\n'
6445,77421500,"b'Was thinking tooling etc. but it seems fine to just use IMigrationsAssembly, too,\n'"
6445,77732388,b'So which is the lesser of two evils--returning an enumerator with a reference to an array of objects that would otherwise get GCed or copying the strings to a new array? :smile: \n'
6445,78208657,"b'Copying :smile: With ToArray you are both allocating an array and copying the contents. If you are going to buffer here, then at least change the return type so that the caller gets the benefit. I.e. IReadOnlyList\n'"
6516,78828597,"b""Shouldn't all of these be nullable?\n"""
6446,77177655,b'I believe the filename and database name can be different. Not sure if it matters here.\n'
6446,77177860,b'Also need to resolve |DataDirectory| on Full .NET\n'
6446,77178155,b'Our guidelines suggest using string.Empty\n'
6446,77179106,"b'Hmm, maybe this should actually be null instead\n'"
6446,77220066,"b""I'll rewrite this just to make sure.\n"""
6446,77220128,"b""Yeah, I'll add that.\n"""
6446,77220759,b'`SqlConnectionStringBuilder` throws an exception if null\n'
6446,77225831,"b'`builder.Remove(""AttachDBFilename"");` does the trick\n'"
6446,78096653,b'This should be addressed before merging. I think we should use `AppContext.BaseDirectory` and _only_ run these tests on LocalDB. Extending the [SqlServerCondition](https://github.com/aspnet/EntityFramework/blob/dev/test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/Utilities/SqlServerConditionAttribute.cs#L61) enum would be the way to do this.\n'
6446,78097246,"b""I seem to remember some weird issues when this didn't have `_log` appended to the filename. We should be safe and just do what EF6 did.\n"""
6446,78097409,"b'Likewise, EF6 included the file extension here.\n'"
6446,78097512,"b""Might as well hardcode the length here. It's not going to change :wink: \n"""
6446,78097661,"b""I'd prefer the `ON` and `LOG ON` clauses to each be on their own line, but I'll let you decide.\n"""
6446,78098360,"b""I'd like to understand these errors a little better. We need to make sure we're only catching the errors that happen when everything else is setup right. If the error when database can't access the path is different from when the file just doesn't exist, we should only catch the not exists one. Unless, like you say SQL2008 just throws a different error.\n\nI'll set up some test machines with various versions of SQL Server and dig into this a bit more...\n"""
6446,78098561,b'I ran the tests against SQL Server 2008 Express and was still getting `5120` after 30 retries. :frowning: \n'
6446,78221665,"b""Okay, I'll use `AppDomain.BaseDirectory` for classic .NET then too (consistency).\n"""
6446,78221772,"b'Yeah, that would match the default behavior of SQL Server too.\n'"
6446,78222951,"b""But that's not what SQL Server does by default, I just checked that to be sure.\n\nThe _Bronies_ database from the integration tests get `(name = 'Bronies', filename = 'C:\\Users\\Axel\\Bronies.mdf')` and `(name = 'Bronies_log', filename = 'C:\\Users\\Axel\\Bronies_log.ldf')`.\n\nI would suggest to match SQL Server default's behavior instead of EF6.\n"""
6446,78223152,"b""Yeah, just a habit to improve readability. The compiler evaluates this to a constant expression, if I remember correctly. (If not, it won't matter here anyway...)\n"""
6446,78223204,"b""Sure, I'll add some line breaks here.\n"""
6446,78223861,"b'Makes sense. ""Unable to attach database"" as ""Unable to open"" made enough sense for me to add them here. Especially since we\'re checking for ""access denied"" too, which could also mean the current user just doesn\'t have access to an indeed existing database (which should be okay, since a then wrongly executed create database operation would fail anyway?).\n'"
6446,78224428,"b""Hm, I've no idea why. :thinking:\n"""
6446,78227583,b'Sounds good.\n'
6446,78227727,"b""I'm also fine leaving it as is.\n"""
6446,78810537,b'`CanBeNull`\n'
6446,79059766,b'Finished testing and everything looks good. SQL Server 2010 & 2012 returned 5120 while 2014 & 2016 returned 1832.\n'
6572,79460484,"b'You can remove this test, I will be running it anyway :)\n'"
6558,79462130,b'Why is propertyType optional now in all these methods?\n'
6558,79463469,b'Why was it required before?\n'
6558,79464300,"b'Or, to be more specific, previously you could call this method with null and if a CLR property was matched, then the call would succeed. So it seems like it was never really a required parameter.\n'"
6558,79468395,"b'Because it needs to be specified explicitly for shadow properties, while non-shadow use the MemberInfo overload\n'"
6558,79468591,"b""Except it doesn't...\n"""
6558,79469198,"b""It does, we throw NoPropertyType if it's null\n"""
6558,79469214,"b""Are you suggesting that we make the string overload stop working for non-shadow properties? In 1.0 you could use it, and our code did use it. We now still use it. If you give us the MemberInfo, then we will use that, but if you don't give us the MemberInfo then we look it up for you. That was what we used to, and we still do it now. That code could be moved, but then it would be duplicated in several places, would be more of a breaking change, and I don't see that it adds value.\n"""
6558,79469842,b'You can create a non-shadow property with a string name and a null type.\n'
6558,79471220,"b""The benefit would be perf as we wouldn't need to get the list of CLR members in any of these overloads.\n"""
6558,79471840,"b""Assuming we are not allowing shadowness to be forced, then if we get given a name we always need to lookup MemberInfos to make sure that we don't create a shadow property when it should not be one. If we get given a MemberInfo, then we won't look up MemberInfos anyway.\n"""
6558,79472523,"b""What I am proposing will allow to force shadowness and I think it could improve the factoring in the internal builders. I'll look into it later.\n"""
6558,79472762,"b""Btw, there are places, such as the FK data annotation convention, where we look up MemberInfos but then don't flow them through to here, and hence the MemberInfos get looked up again. This was the case before and is still the case now. But that doesn't mean this should change, it just means that in those places where we have MemberInfos we should be using them if perf is important. The couterpoint to that is that just using names makes that code simpler, so it really does depend on whether there is a perf bottleneck at all. With this API the way it is, the choice of collapsing to names or preserving known MemberInfos is preserved.\n"""
6558,79473459,"b""Yep, we'll need to go through the code to ensure that MemberInfos are not discarded. Reflection is usually in the bottleneck for model building.\n"""
6590,80335599,b'Why PK & only first property\n'
6590,80337119,"b'This is the case when a bare QSRE is encountered E.g. Where(c => c != null && c.CustomerID == ""ALFKI"")\n\nWe only need to test a single PK column because none can be null. \n'"
6607,80565252,b'add: select.Predicate != null\n'
6607,80565490,b'this is unnecessary\n'
6607,80566243,b'That removal was intended.\n'
6607,80567072,b'updated\n'
6612,80609061,b'What to do with this method? Since it is `protected` in a public class.\n'
6584,80333057,b'Not keen on the name. Perhaps `GetModelTypes`?\n'
6584,80333865,b'NotNull\n'
6584,80736544,"b""Let's discuss in the design meeting when we look at the metadata.\n"""
6584,80736560,b'Fixed.\n'
6596,80560694,"b'> Suspended [](start = 30, length = 9)\n\nCan you explain a bit how this is used and how the documentation related to the property name?\n'"
6596,80561135,b'Consider conditional operator.\n'
6596,80561646,"b'Normally it should be only used by the strategy itself. It is set to true when a strategy starts an execution, so if there are any nested calls to the strategy inside the operation being executed the nested operation will be just executed, without any exception handling or retries.\n'"
6596,80561654,"b'> ExceptionsEncountered.Add(lastException); [](start = 12, length = 41)\n\nIt seems a little strange that a method called GetNextDelay would add the exception to the encountered list.\n'"
6596,80561803,b'Consider conditional operator.\n'
6596,80562217,b'Maybe point to the method or some other information on how to actually do this?\n'
6596,80562219,b'Changed\n'
6596,80562320,b'Changed\n'
6596,80562592,b'Moved out\n'
6596,80562665,"b'> Func<DbContext, TResult> operation [](start = 83, length = 34)\n\nIt is somewhat unfortunate that this is a Func of DbContext when the application will likely have some derived context type with DbSets on it.\n'"
6596,80562967,"b'> CancellationToken cancellationToken [](start = 83, length = 35)\n\nWhy no default value for the cancellation token?\n'"
6596,80563379,"b""Yes, that's why I added CreateExecutionStrategy(), we could remove ExecuteWithStrategyInTransaction if nobody objects ( @divega @rowanmiller )\n"""
6596,80563647,b'Added\n'
6596,80565323,"b'> databaseFacade.CreateExecutionStrategy().Execute(database => [](start = 23, length = 60)\n\nRemind me how we know that the command is idempotent or otherwise handle arbitrary commands that may or may not have side effects?\n'"
6596,80570736,"b'> RelationalExecutionStrategyFactory [](start = 17, length = 34)\n\nWhat makes this relational?\n'"
6596,80571519,"b'That makes sense, but for some reason I am having trouble reading ""Indicates whether the strategy performs any additional actions when executing an operation"" to mean that. \n'"
6596,80571626,b'Could we make it generic and do the cast for them?\n'
6596,80572096,b'It reads `RelationalOptionsExtension`\n'
6596,80572426,b'Any suggestions on how could it be phrased better?\n'
6596,80572664,b'They would still need to specify the type in the call\n'
6596,80573962,"b"">  public class BaseType [](start = 6, length = 23)\n\nWhy are these all public? They were specifically made protected so that they don't pollute the space of public types visible to all tests, which makes Intellisense and automated tooling easier to use.\n"""
6596,80574187,"b""We don't. A safer approach would be to leave this method as is and add an overload where we start a transaction and use the execution strategy.\n"""
6596,80575260,"b""FindFixtureBase needs to be public because it's used as a generic constraint so FindContext needs to be public because it's returned from a public method so all these entity types need to be public for DbSets\n"""
6596,80575852,b'I can make them protected again by introducing casts in two places\n'
6596,80576141,"b'> SqlAzureExecutionStrategy [](start = 17, length = 25)\n\nGiven that the normal way to get this is to use ""EnableRetryOnFailure"" which doesn\'t mention SQL Azure, should this really be called the SqlAzureExecutionStrategy?\n'"
6596,80576606,"b""Yeah, I get that. I'm not sure it is better.\n"""
6596,80576743,b'That second option seems better to me. Would be curious what others think.\n'
6596,80576971,"b""How about 'SqlServerTransientErrorHandlingExecutionStrategy'?\n"""
6596,80577579,"b""Would prefer them to be protected. In general I don't like the patterns we settled on that require a fixture and use of the TestDatabase and all that stuff. I came to peace with this by using a pattern that that keeps all that stuff isolated to the tests with as few public types as possible introduced just for infrastructure stuff or stuff that is only used by those particular tests.\n"""
6596,80578280,"b'By using a fixture and sharing the database the tests are much more faster. I think we can modify the pattern to be more usable now that we have EnsureClean and DbContextOptions constructor, but it would be an even larger change.\n'"
6596,80578471,b'Indicates whether the strategy is suspended. The strategy is typically suspending while executing to avoid recursive execution from nested operations.\n'
6596,80578599,b'Sounds good.\n'
6596,80580111,"b""Sounds better, though now it doesn't explicitly say how it behaves when suspended\n"""
6596,80580212,b'Ok\n'
6625,80955451,"b'> public class Child [](start = 8, length = 18)\n\nThought we agreed that model types would not become public?\n'"
6625,80956143,"b'> EnsureClean(context); [](start = 19, length = 22)\n\nWhy is EnsureClean removed here?\n'"
6625,80956801,"b""> EnsureClean(context); [](start = 20, length = 21)\n\nLikewise? Note that all of these use EnsureClean so that changes to database structure don't cause failures on the C.I. Most of these were EnsureDeleted followed by EnsureCreated before they became EnsureClean because of the database structure change issue. It also makes the tests more consistent--there are less likely to be bugs related to running on a clean machine verses a machine that already contains the database.\n"""
6625,80960830,b'missed these ones\n'
6625,80961304,b'SqlServerTestStore now calls EnsureClean when creating a database if it already exists.\n'
6625,80962510,"b""Ah, I missed that. It's doing it with an empty context, so it will never create tables and this call to EnsureCreated now only ever creates tables.\n"""
6629,81014369,"b'Why two methods? Also, this helper is nice. Did you check whether it could be used elsewhere?\n'"
6629,81014466,b'New line before if\n'
6629,81014651,b'Do these tests _need_ custom asserters?\n'
6638,81202309,b'This could be an extension method now\n'
6638,81202895,"b'It could be, but it would be ""more"" of a break since it would change from property to method. We can discuss if you want, but I\'m fine with leaving as a property.\n'"
6638,81203123,"b""It's not a big deal, we can leave it\n"""
6579,80339399,b'Are these Single calls safe?\n'
6579,80581060,b'Converted to `FirstorDefault()`\n'
6646,81269358,"b""Does this conflict with the VS default auto-format indentation? I can't stand when they flip back and forth every commit.\n"""
6646,81269607,"b""That's an odd place to put a parenthesis\n"""
6646,81269807,"b""I don't understand the reasoning for the double indent here. It's only nice if there's something after it.\n"""
6646,81274627,"b""Without the parenthesis resharper adds an extra ident to parameters and body, I think it's a bug\n"""
6646,81274692,b'Probably parenthesis and lambda rules overlapping\n'
6646,81275553,b'VS formats it the same way. At least on my machine.\n'
6646,81381448,"b""I don't like this at all. Did some rule change cause R# to do this automatically? If so, was that rule change really important enough for this consequence?\n"""
6646,81383574,"b""This wasn't caused by a rule change, but (probably) a bug in the current version. By default it would format it like this:\n\n``` C#\npublic virtual ExpressionVisitor Create(\n        EntityQueryModelVisitor queryModelVisitor, IQuerySource querySource)\n    => new InMemoryEntityQueryableExpressionVisitor(\n        _model,\n        _materializerFactory,\n        Check.NotNull(queryModelVisitor, nameof(queryModelVisitor)),\n        querySource);\n```\n\nIdeally it should be:\n\n``` C#\npublic virtual ExpressionVisitor Create(\n    EntityQueryModelVisitor queryModelVisitor, IQuerySource querySource)\n    => new InMemoryEntityQueryableExpressionVisitor(\n        _model,\n        _materializerFactory,\n        Check.NotNull(queryModelVisitor, nameof(queryModelVisitor)),\n        querySource);\n```\n\nWhich is the closesest to statement body formatting:\n\n``` C#\npublic virtual ExpressionVisitor Create(\n    EntityQueryModelVisitor queryModelVisitor, IQuerySource querySource)\n{\n    return new InMemoryEntityQueryableExpressionVisitor(\n        _model,\n        _materializerFactory,\n        Check.NotNull(queryModelVisitor, nameof(queryModelVisitor)),\n        querySource);\n}\n```\n\nBut I couldn't find any rule to achieve this.\nSo the workaround is to move the parenthesis:\n\n``` C#\npublic virtual ExpressionVisitor Create(\n    EntityQueryModelVisitor queryModelVisitor, IQuerySource querySource\n) => new InMemoryEntityQueryableExpressionVisitor(\n    _model,\n    _materializerFactory,\n    Check.NotNull(queryModelVisitor, nameof(queryModelVisitor)),\n    querySource);\n```\n"""
6646,81385813,"b'To me the ""default"" one looks better than the ""workaround"" one.\n'"
6626,80959463,"b""Isn't this brought in transitively?\n"""
6626,80959740,b'Do we really want this in the nuspec for Full .NET?\n'
6626,80959817,"b""(That's a lot of packages you don't really need.)\n"""
6626,80960241,b'Do these `frameworkAssemblies` still need to be referenced if we use `NETStandard.Library` on Full .NET?\n'
6626,80960682,b'Eww.. How did that creep in?\n'
6626,80961835,"b""Yes, but we decided it's easier if we just add this to every project. It might also make it easier to independently rev these if we ever create a release where downstream dependencies we own don't get updated.\n"""
6626,80962022,b'I could make it `netstandard` specific if this is concerning. My guess was that package trimming should take care of this. cc @Eilon \\ @davidfowl \n'
6626,80962135,"b""Possibly not. I'll try removing this and check if it the nuspec ends up with the same references\n"""
6626,80962279,"b""\xf0\x9f\x98\x9e there's a few in Mvc like these. Perhaps we can fix up some of these in 2.0.\n"""
6626,80967241,b'@pranavkm is correct. We do want this everywhere.\n'
6626,80967636,b'Filed #6628\n'
6626,80967926,"b""My main concern is for pre-dev15-csproj + `packages.config` where trimming most likely won't exist.\n"""
6626,80968643,"b""Seems fine. But it seems more DRY just to have the root EF package depend. It'll never be different between packages in the same repo.\n"""
6626,80977571,"b""That is a very good point.  Maybe we actually don't want to do this for EF Core and its dependencies? \n"""
6626,80980626,"b""IMHO, making it `netstandard`-specific would for us and our dependencies would be ideal.\n\nPersonally, I'd _always_ make it `netstandard`-specific since it adds little-to-no value elsewhere.\n"""
6626,81046567,b'@pranavkm @Eilon should we discuss this further in person? \n'
6626,81050110,b'I think @DamianEdwards was planning on addressing this.\n'
6626,81180571,"b""We were going to talk about this yesterday but not enough people were around. Let's find time ASAP to go over what to do here. I think one of the big questions we have is: how bad is it _actually_ to do this? I.e. in the csproj scenario what is the actual negative impact of this?\n\nOne of the problems we're trying to avoid is that when you reference a package it's odd to get wildly different references based on your TFM.\n"""
6670,81650911,b'Done.\n'
6670,81654898,b'Will rename _logHandler_ to _reportHandler_.\n'
6676,81672866,"b""should we add new line before printing query model? (now that it's formatted)\n"""
6676,81678360,"b""If this is not being DI'd then new it up lazily, inline.\n"""
6676,81678416,b'Nice.\n'
6676,81678632,"b'Yep, make sure to use Environment.NewLine\n'"
6676,81678691,b'Redundant?\n'
6676,81678716,b'Typo\n'
6676,81678803,b'Why are expressions rendered differently here vs. other places?\n'
6676,81790160,b'field is initialized in declaration and in constructor both. Is both of them necessary? \n'
6676,81790300,b'Same as above for field.\n'
6676,81791282,"b'Instead of declaring & setting another stringbuilder here, we should utilize the one from ExpressionPrinter in some way. \n'"
6692,82119468,b'Add 1 more line here to separate each commands?\n'
6692,82208153,"b""I think `BatchTerminator` does that. I'll double-check.\n"""
6692,82217711,b'Confirmed. They are separated and consistent with `Script-Migration`.\n'
6704,82301661,b'clenaup newlines\n'
6704,82302432,"b""Won't that break on coreclr due to difference in which sources get executed first?\n"""
6704,82303480,"b'Checking now, less queries now and so it might be good.\n'"
6744,82861736,b'Braces\n'
6744,82875665,"b""I'm trying out the indent-less nested using pattern, looks better IMO\n"""
6744,82875934,b'Would be great to discuss as a team\n'
6729,82494295,b'Simplify by just returning the conditional expression.\n'
6729,82494323,b'Introduce ColumnExpression.IsNullable property that is initialized from Property nullability but can be set. Remove ForceNullability\n'
6729,82862955,b'Consider our extension methods here.\n'
6729,82862994,b'Consider our extension methods here.\n'
6724,82858075,b'Should these methods have Checks?\n'
6724,82858944,b'Add parameter name when passing null.\n'
6724,82860422,b'Breaks in here?\n'
6724,82860661,b'Breaks in here?\n'
6724,82860982,"b""Why is this changing? It seemed DRY'er in the finally and it no longer checks the flag on the error path\n"""
6724,82861731,"b'No, the delegated methods have them\n'"
6724,82861781,b'Ok\n'
6724,82862519,"b""It's unlikely this is used outside our code\n"""
6724,82863255,"b""It's unlikely this is used outside our code, if it is recompilation would be enough to fix.\n"""
6724,82875360,"b""There were two checks, now there's only one - cleaner.\n"""
6724,82884679,"b'Is there a semantic change here, though? Any user code that handles the exception will now have the connection closed always.\n'"
6724,82907865,"b'No, finally is called before propagating the exception up the stack\n'"
6753,83060119,b'Make ctor private?\n'
6753,83082597,"b'ISet is not readonly, perhaps IReadOnlyCollection would fit better\n'"
6753,83083169,b'IReadOnlyCollection?\n'
6757,83101385,b'Modified\n'
6757,83101495,"b'Modified, likewise for other Update methods\n'"
6759,83118435,b'Move this logic into IncludeResultOperator.QuerySource. Why only AdditionalFromClause and not joins etc.?\n'
6721,83128369,b'no prefix on parameter.\n'
6721,83502624,"b'FYI we came up with a different name in API review. I think it was SqlServerRetryingExecutionStrategy but @rowanmiller has the notes. The same change applied to several other APIs (some public, some internal) that are using SQL and Azure in their names.\n'"
6798,83701011,b'Should this be `loggerFactory.CreateLogger(GetType())`?\n'
6798,83704205,b'I think it is fine like this. This is the code I have.\n'
6800,83725796,"b""OT: I am likely missing something, but I am a bit surprised that we don't short circuit earlier on `!_tableSelectionSet.Allows(schemaName, tableName)`, i.e. do we ever hit the condition that a column is skipped for any other reason than we are ignoring the whole table? If not, then what value does this add in the log? cc @lajones \n"""
6811,84776074,"b'I think this would read better as ""Sets the table alias for the star projection...""\n'"
6838,84551112,"b""this seems bit hacky, but don't know how to do it better\n"""
6856,85010357,b'Swap order for a marginal perf gain\n'
6856,85159503,b'Done\n'
6854,85342886,b'Alphabetical sorting.\n'
6854,85361126,b'done\n'
6854,85395965,b'It would be interesting to understand why it is generating `15E0` instead of just `15`. Numbers are not that big which needs scientific notation. Also this happens only for day and not `AddYears` or `AddMonths`\n'
6854,85398590,b'Looks to be because AddDays takes a double.\n'
6866,85209581,b'Add `[param: CanBeNull]`\n'
6866,85209882,b'Add `[CanBeNull]`\n'
6866,85209906,b'Add `[CanBeNull]`\n'
6866,85213390,"b'Filtered indexes are a SQL Server feature, so it should be stored as an annotation using extension methods. See how `.IsClustered` is implemented.\n'"
6866,85247289,"b'On a second though, other relational providers support it so it can go in `.Relational`\n'"
6866,85278842,"b""Any reason this is plural? Am not familiar with SQL Server here but in PostgreSQL it's just a standard single WHERE clause\n"""
6866,85279180,b'Typo\n'
6866,85279206,b'Typo\n'
6866,85279580,"b""This is SQLServer-specific SQL in a provider-independent test. However, it's not terribly important as this is only a unit test (i.e. the SQL never gets sent/evaluated), so no real harm.\n"""
6866,85280119,"b""Shouldn't this test simply override `CreateIndexOperation_with_where_clauses`, defined in MigrationSqlGeneratorTestBase.cs?\n"""
6866,85280164,b'Should probably be defined in MigrationSqlGeneratorTestBase.cs and overridden here (useful for other providers)\n'
6866,85314532,b'This should be renamed in `Filter`. Just forgot this entry.\n'
6866,85404411,b'The properties on this interface should be read-only.\nAlso the fix typos in the comment or just remove it.\n'
6866,85405311,"b'You need to use `Annotations.For(t).Filter` in all of the migrations code, this allows it to read the provider-specific value\n'"
6866,85405681,b'Use `Annotations.For`\n'
6866,85409024,b'You missed this one :)\n'
6866,85409563,"b""This project shouldn't reference `.Relational`\n"""
6866,85409834,b'Move this to `RelationalBuilderExtensionsTest` and add a similar test to `RelationalMetadataExtensionsTest`\n'
6866,85526622,b'@AndriySvyryd May be HasDifferences can handle this comparing? It looks like i can remove this lines\n'
6866,85580308,"b'`HasDifferences` diffs migrations annotations, while they have the same API they are different from model annotations, the added conditions are still needed.\n'"
6866,85590663,b'This needs to be virtual. Also correct spelling in the comment or just remove it.\n'
6866,85607033,b'String interpolation?\n'
6866,85607104,b'Should be HasFilter?\n'
6866,85607280,b'Missing empty line\n'
6870,85195813,b'@anpete @maumar - This test is disabled atm because due to nav rewrite we converted order by on fk property to pk propery and we are project out fk property therefore orderby cannot be copied outside (invalid column).\nIf rest of work looks good then I will fix this test.\nIf we are projecting out dependent entity than we should not convert order by on dependent entity to principal entity.\n'
6870,85616164,b'Filed #6896 and assigned to @maumar \n'
6909,85821875,b'In what cases is this not the same type?\n'
6909,85822899,b'I will remove that check.\n'
6898,85968353,"b""The reason for the groups (`alterTableOperations`, `alterOperations`, etc.) is so we don't have to iterate over lists multiple times. It would be better to split `columnOperations` into two lists--`columnOperations` and `computedColumnOperations`. Then the `Where` methods aren't needed here because they're put in the right collection the first time we iterate through the operations.\n"""
6898,85972960,"b""@bricelam sounds reasonable, i'll do it.\n"""
6898,85979579,"b'Cool, thanks for going the extra mile. :+1:\n'"
6862,85033698,b'should events be more granular?\n'
6862,85033780,"b""using MainFromClause is not always perfect - in some cases the type can be compiler generated which doesn't tell much to the user. Are we ok with that?\n"""
6862,85056962,b'Base tests need asserts\n'
6862,85057173,"b'Yeah, may be better just to blat the whole QueryModel.\n'"
6862,85160488,"b'Probably should put these in WarningsTestBase, too.\n'"
6862,85161224,b'Why is Single different? \n'
6862,85162822,"b""I'm not sure having the First methods included here makes sense because often there will be a predicate that matches just a single row. If we keep the First methods then we should only generate the warning when there is no predicate.\n"""
6862,85191681,b'I think this is fine.\n'
6862,85208481,b'single will throw if there is more than 1 result and if its one result then its deterministic already\n'
6862,85208900,"b'I tried that initially but it looked really bloated for a bit more complicated query. @divega was proposing that we could assign an alias to each query model and refer to them via alias in all the log messages. If we opted for it, it would be in different pull request.\n'"
6862,85209116,"b'good idea, will do\n'"
6862,85220161,b'Makes sense.\n'
6862,85221214,"b""What about if we truncate it?\n\n```\nThe query 'from c in DbSet<Customer> where c.Name...' uses paging operation (First/FirstOrDefault/Skip/Take) without OrderBy which may lead to unpredictable results.\n```\n"""
6862,85221559,b'sounds like a reasonable compromise\n'
6862,85221694,"b'""paging operation"" -> ""a row limiting operation""\n""without OrderBy which may lead to unpredictable results."" -> ""without an OrderBy which may cause unpredictable results.""\n'"
6862,85221788,"b""one problem is for cases like:\n\n```\ncustomers.Where(c => c.Orders.FirstOrDefault().Id == 1)\n```\n\nThis doesn't have a filter, but we add one during nav rewrite, so we won't issue warning for this case, even though we should\n"""
6862,85222343,b'Consider extracting this into a protected virtual method.\n'
6862,85222661,"b'Cool, we should make sure there are no newlines, too. We could just use QM.ToString(), which is single line formatted.\n'"
6862,85224117,b'Do it before nav. rewrite?\n'
6862,85242971,b'Should we be doing the same thing for all query-related warnings? \n'
6862,85244705,"b'Perhaps. The most common one is client-eval and for that one we log the offending expression itself, which is usually enough context. \n'"
6862,85246459,"b'im adding no-formatting option to expression/qm printers. default tostring leaves full type names which ""steal"" way to much space sometimes\n'"
6862,85439068,b'Add Parameter name in Print\n'
6862,85439269,b'This extra space expected?\n'
6862,85441835,b'Going to try and unify to TransformExpressions here\n'
6862,86031140,b'Is it hard to fix this extra space?\n'
6819,84159822,b'Is this reliable enough? In some situations a single collect is not enough.\n'
6819,84161147,b'Could be an issue if there were pending finalizers involved. \n'
6819,84162245,"b""@anpete I think I asked you yesterday but I don't remember the answer. What are the chances that different query operators from `First()` could introduce additional references to scoped services or state?\n"""
6819,84163680,"b'@divega We should be OK here. We are careful not to explicitly introduce such dependencies in the query pipeline itself. The two being fixed here are in a sense ""outside"" of the main pipeline, which is why we missed them.\n'"
6819,84163974,"b""Was wondering this. I haven't seen any flakiness yet and so was going to start with the simple thing.\n"""
6819,84201443,b':trollface: \n'
6884,86406049,b'We run conventions for relationships and key after removing it. Should we do the same for indexes also?\n'
6884,86406698,b'Breaking change?\n'
6884,86406842,"b'Yes, we might as well.\n'"
6884,86407113,"b""I don't think so, also it's internal API\n"""
6932,86458367,"b""those tests shouldn't be here, they are part of a different fix that I will merge before merging this one - it can be ignored. Gears tests are the valid ones.\n"""
6932,86459718,"b""residue from another issue I'm working on at the moment, please ignore (test wont be deleted)\n"""
6925,86272646,b'This should be actually `[l3.OneToOne_Required_FK_Inverse].[Id]` since we are projecting out `[l3.OneToOne_Required_FK_Inverse]` columns.\n'
6925,86462446,b'nit: `methodCallExpression`\n'
6933,86647787,b'Why is this needed for the change?\n'
6933,86648051,b'To allow the ModelBuilder tests that now run with SqlServer conventions (that add a discriminator) to pass\n'
6933,86655975,b'Where does it get translated to SQL now?\n'
6933,86656362,b'It will be stored on `index.SqlServer().Filter` by conventions wherever applicable. Migrations use it from there.\n'
6945,86653187,b'We should always client eval Last because in case collection is empty it should throw an exception. LastOrDefault we could translate safely\n'
6945,86653278,b'What is current behavior with `First`?\n'
6945,86655464,"b""Both First and FirstOrDefault are translated to TOP(1), but on top of that First is always client-evaluated to accommodate for the possible exception when collection is empty. FirstOrDefault doesn't throw so we don't need to client eval.\n"""
6945,86656426,"b'Do we issue client eval warning for top level `First()` (when it is not inside subquery)? Due to exception, we would evaluate it on client anyway.\n'"
6945,86690288,b'`First()` in that case may be evaluated on the client to be able to throw but as long as the filtering happens on the server I believe it would be confusing to issue the warning. \n'
6945,86878511,"b'yeah I think you guys are right, my concern was that if someone builds on top of Last(), they would want to know that those additional operations are evaluated on the client, but we shall issue warning for those, when they come. Perhaps we could add this as a test, i.e. use Last in the subquery and then compose on top of the result\n'"
6945,86896165,b'>  Perhaps we could add this as a test...\n\nSounds good to me.\n'
6972,87254216,b'`var`?\n'
6972,87269086,"b""nop, that's an old-school non-generic `IEnumerable`\n"""
6813,84000211,b'Should there be factor of 1000 somewhere since timeout in SqlConnection is in seconds rather than milliseconds.\n'
6813,84000301,"b""If it is in Seconds I'll change it to `TotalSeconds`.  The whole reason I am creating this PR is because I have no idea what units `timeout` is actually in.  \xf0\x9f\x98\x83 \n"""
6813,84000587,"b'Fixed.  I believe I chose Milliseconds originally because I had some code with a timeout of `150,000` and assumed that must have been 150 seconds because 150,000 seconds is just crazy.  Apparently I just had a really long timeout...\n'"
6813,84010546,b'\xf0\x9f\x91\x8d \nHere is more info on ConnectionTimeout in SqlConnection.\nhttps://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlconnection.connectiontimeout(v=vs.110).aspx\n'
6813,84233881,b'not `milliseconds` in message.\n'
6813,84408598,b'Fixed.\n'
6813,84775602,"b""Can we just remove the API docs for the moment. The rest of this file isn't documented and I will deal with them when I get there.\n"""
6813,84775718,"b""We should discuss the name of this method in triage. Let's talk about it tomorrow morning.\n"""
6813,85262387,b'Fixed.\n'
6813,87461989,b'@rowanmiller - Did we take any decision on this?\n'
6813,87470409,"b""Sorry this dropped off my radar. Just discussed it now and it seems like the primary use case for TimeSpan APIs is to set the value. There isn't really a scenario (that we're aware of) where app code would be getting the value. The Get method would be called by EF itself, which needs it in int/seconds because that's how ADO.NET takes it. Given that, it seems like the best option is probably to remove this API.\n\n@MicahZoltu what are your thoughts on this?\n"""
6813,87484586,"b""The only reason I can think of where I would want to get this value (rather than just set it) is if I were building a generalized monitoring library.  Since my main concern is getting the `TimeSpan` setter, I'm willing to ignore the monitoring story in an effort to move the rest of this PR forward.\n"""
6813,87485523,"b""Removed.  However, I did it from the GitHub GUI since I'm not at my home computer, if the build doesn't pass I may have to wait until this evening to test it locally.\n"""
6944,86859082,"b'Is it only decimals? What about floats and doubles? What about string mappings where we create, for example, nvarchar(128) by convention? Likewise for binary?\n'"
6944,86867361,"b""Didn't we have something already that detects when `varchar` and `nvarchar` are set without size because the default size is 1 and it is unlikely to be the user's intent? How does that one work? Would it make sense to unify the approach?\n"""
6944,86868342,"b'This isn\'t about setting ""decimal"" column type with no precision/scale. It\'s about always having to set some column type.\n'"
6944,86890767,b'Got it. Thanks for clarifying. I had forgotten that detail. \n'
6944,86899080,b'@ajcvickers The default float and double mappings already have the max precision. String and binary truncations always result in errors.\n'
6944,87042273,"b'@AndriySvyryd How about datetime? Specifically, conversions between datetime and datetime2?\n'"
6944,87061768,b'@ajcvickers datetime2 is the default and there are no values in datetime that cannot be represented by datetime2\n'
6944,88110374,"b'> \'{entityType}\', this [](start = 84, length = 20)\n\n""\'{entityType}\', this"" should be ""\'{entityType}\'. This""\n'"
6944,88113704,b'Done\n'
6950,86844582,b'This probably has the same issues as #6826\n'
6950,86845079,"b""Doesn't this need memory barrier protection?\n"""
6950,86848505,"b""Is this a DI bug? I can't think of any other way to do this - We can't call GetService here.\n"""
6950,86849009,"b""Can you elaborate? The intent of this is we might end up calling Snapshot multiple times, but we don't care which one we end up with - they should all be equivalent.\n"""
6950,86850333,b'How do we guarantee that the object has been fully constructed when viewed from another thread? Pretty sure this needs some form of memory barrier.\n'
6950,86851498,b'I think it is a D.I. bug.\n'
6950,86854651,b'I see. Would changing the snapshot to be a class and removing the flag be a better option?\n'
6950,86855922,b'https://github.com/aspnet/DependencyInjection/issues/197\n'
6950,86857565,"b""I don't see anyway to do it without a memory barrier.\n"""
6950,86858008,"b'OK, it looks like we should validate that the context type does not have a default ctor.\n'"
6950,86859145,"b'Oh, so another thread could see _configurationSnapshot != null even though _configurationSnapshot was not fully constructed?\n'"
6950,86859460,b'Yes\n'
6950,86863000,"b""I wonder if this is a symptom of a wider issue. The DbContext class is being registered in D.I. as a scoped service, but it isn't really used that way because of the pool. So what happens if it depends on other scoped services? How does it get the correct instance of those services?\n\nTwo other architectures to consider:\n- Make the pool explicit such that other services (e.g. controllers) depend on the pool and grab a context from the pool when needed. The DbContext would never be registered in D.I. at all.\n- Be like DbConnection where the instance of DbContext itself is created by D,I, in the normal way, so it gets correctly injected other services, but the guts of DbContext is obtained from a pool.\n"""
6950,86880332,"b'We still want scoped here because we want still want context-per-request semantics. Its just that with pooling, a request defines the scope of exclusive ownership of a pooled instance, not the physical lifetime of the instance. Regarding ""correct"" instances, this is just the reset problem. Either, the scoped service is safe to re-use (because it is stateless and the scoped-ness is an artifact of our current architecture); or, we need a safe way of resetting the existing instance - like we do with the StateManager for example.\n'"
6950,87092488,b'Could we leverage `ActivactorUtilities.CreateFactory()` here?\n'
6950,87095409,"b'Typo in ""An""\n'"
6950,87100872,b'We should mention in the summary for both overloads that polling would be enabled so no state should be maintained on the context and `OnConfiguring` will not be called\n'
6950,87102274,"b'Different hardware configurations need different values, so it would be more useful if this was based on `ThreadPool.GetMinThreads`, though with current API it would be rarely used.\n'"
6950,87109704,"b'Another thing to chat about: Is it better to add these new overloads of `AddDbContext<TContext>()` that take `poolSize` or instead have a new method, e.g. `AddDbContextPool<TContext>()` that makes it a bit clearer that you are forking from the regular behavior of `AddDbContext`, for which `poolSize` is optional (or not specified in all overloads) so that we can pick a good default for you, and for which we can also have very specific and separate documentation/xml comments.\n'"
6950,88170959,b'@ajcvickers Spoke to @divega about allowing non-generic options here and he felt it was safe. Any concerns?\n'
6950,88172063,"b'Assuming we can and it makes sense to use the API that @AndriySvyryd had suggested for an optimal pool size, I think we should consider making it of type int? or using overloads instead of an optional parameters.\n'"
6950,88172365,b'The rest LGTM.\n'
6950,88288863,b'@anpete @divega Non-generic options is fine. Hopefully this makes it work with non-derived DbContext. Maybe add a test for that?\n'
6950,88295738,b'@ajcvickers Added the test. Had to loosen the ctor validation logic slightly to ignore NonPublic ctors.\n'
6950,88297844,"b'@divega ThreadPool.GetMinThreads is not what we want here, at least not for web apps. For a web app, what we really want is something close to the average number of concurrent requests (FYI IIS defaults to 5000 for maxConcurrentRequests for example). So I think we may just need to pick a number that is somewhat sensible. \n'"
7009,87892177,"b'add query with contains, e.g. \ncontext.Customers.Where(c => args.Contains(c.Id))\n\nargs being both parameter and closure\n'"
7009,87892652,"b'another interesting query could be:\n\ncontext.Customers.OrderBy(c => c.Id).Select(c => c.Name).FirstOrDefault() + context.Orders.OrderBy(o => o.Id).Select(o.CustomerId).FirstOrDefault()\n\ni.e. the root of the query is context, not dbset, curious if that gets translated into one query or will string concat be client-evaled\n'"
7009,87894754,b'we think 5 parameters is enough? in EF6 we had 10+ IIRC\n'
7009,87896367,"b""We can add more. I'm also going to enable object arrays as an alternative.\n"""
7009,87903398,b'In EF we had `ObjectContext` + 15 arguments + `TResult` = 17. I think 5 is a good start :smile:\n'
7009,87903912,b'nit: Make the name more indicative of what it does? (Singleton/Scalar etc) It was not obvious for me at the first glance.\n'
7009,87904561,"b'Open issue @anpete and I already talked about: this may mean the user has to add a direct reference to `System.Interactive.Async` which `IAsyncEnumerable<T>` for any meaningful usage. We may make it easier by creating a few extension methods, e.g. `ToListAsync()` and `ForEachAsync()`. Another option could be to return `IQueryable<T>` or an EF specific query result type for which we support async enumeration. \n'"
7009,87905763,"b'Had ""Singleton"" but switched to Task for clarity \xf0\x9f\x98\x84 Happy to change it though.\n'"
7009,87905819,b'@maumar volunteered to add more!\n'
7009,87907507,b'Looks like we need to do some work to make these work. Filed #7016\n'
7009,87907531,b'Added\n'
6930,86437129,b'This can be converted to private method and expose only `MethodInfo` just like other operators for consistency.\n'
6930,86437462,b'Our custom enumerable adapter classes have different protection levels like `private/protected/internal`. Some of them are also sealed. Should they be consistent if not being used elsewhere?\n'
6930,86437816,"b'We have only 1 custom operator left which is `GroupBy`\nOur `GroupBy` operator returns `IAsyncEnumerable<IGrouping<TKey, TElement>>` whereas Ix-Async returns `IAsyncEnumerable<IAsyncGrouping<TKey, TElement>>`.\n'"
6930,86439484,"b'Also class `TaskResultAsyncEnumerable` is being used here internally only still it is made public sealed in a different file. (`.Internal` namespace). Due to being public, now we have unit testing for it too. Which is unnecessary if its kept private.\n'"
6930,86462008,b'@anpete - There is no LoadAsync method but this trick works also. Looks good?\n'
6930,86467180,"b'FWIW, this has been this way in 3.0 as well:\nhttps://github.com/Reactive-Extensions/Rx.NET/blob/v3.0.0/Ix.NET/Source/System.Interactive.Async/AsyncEnumerable.Single.cs#L1166\n\n`GroupBy` returned an `IAsyncGrouping`. That said, as an implementation detail, our `Grouping` impl does implement both `IAsyncGrouping` and `IGrouping`:\nhttps://github.com/Reactive-Extensions/Rx.NET/blob/v3.1.0-rc2/Ix.NET/Source/System.Interactive.Async/Grouping.cs#L394\n\nIf you need to only expose `IGrouping`, then we can add notes in there to ensure that never changes so a cast would be safe. Just let us know.\n'"
6930,86690533,b'Remove await\n'
6930,86690540,b'Remove await\n'
6930,86690573,b'The previous version is likely more efficient and straight-forward enough so I think we can just leave it.\n'
6930,86690581,b'Remove await.\n'
6930,88359371,"b""Re: 1, IIRC accessibility was changed to make .NET Native work. Could be we don't need the changes anymore. They are ideally private sealed. Also take a look at whether some can go away by using IX version. E.g. I seem to remember IX had something like ToAsyncEnumerable.\n"""
6930,88359507,b'Re 2: Fine to move that into AsyncLinqOperatorProvider.\n'
6930,88359533,b'Also see comment above.\n'
6930,88359623,b'@smitpatel Can you see what it looks like to switch to the IX version?\n'
6930,88366108,b'Converted all but one to `private sealed`. `EnumerableAdapter<TResult>` is private not sealed since we derive from it in `OrderedEnumerableAdapter<TResult>`.\n`ToAsyncEnumerable` is converted to IX version already. These are the classes which are adapters or specific to EF only.\nMoved `TaskResultAsyncEnumerable` and made it private sealed. Removed its testing.\n'
6930,88366808,b'Converted the return type to use `IAsyncGrouping` and all works fine.\nWe can do either casting or change return type.\n'
6930,88366900,b'Changed though the usage had to change to make cast to `AsyncLinqOperatorProvider` since this method is not part of `ILinqOperatorProvider`.\n'
6930,88373482,b'Lets change the return type.\n'
7002,88556606,b'is this needed anymore?\n'
7002,88558002,b'no :)\n'
7026,88528387,b'It can be alternate key also. Not necessarily primary key.\n'
7026,88532674,b'This logic to identify principal/dependent side does not work always. Current codebase allows creation of a model in which this logic picks up incorrect navigation hence wrong sides.\nI am discussing with @AndriySvyryd for the validity of such models.\n'
7026,88988829,"b'Any reason for not calling base here? I think it will not go down inside any of structure other than binary tree otherwise.\r\nAlso I assume you trying to calling `VisitBinary` only if `DependentToPrincipalFound` is false. Instead of doing it this way, you can have condition at the start of `VisitBinary` to just return node.'"
7026,88989133,b'twice call to `Single()` store in a variable.'
7026,88990707,"b'There should be no reason to visit every node that is not BinaryExpression. Top level node is always == or || and in the VisitBinary, if the children are not BinaryExpressions themselves we add them to the order by list and return (without visiting). Will move DependentToPrincipalFound check to VisitBinary as suggested'"
7026,88990756,b'\xf0\x9f\x91\x8d '
7090,89013012,b'we should also remove the special handling of try-catch in expression printer'
7090,89013167,"b""...and maybe make it so that TryReadValue method always prints in a single line, and without parameter names - so that the query plan doesn't get bloated too much"""
7090,89015637,b'I think we should minimize the changes for 1.1.1 but we can do it for 1.2 - sound good?'
7090,89015874,b'\xf0\x9f\x91\x8d '
7090,89015944,b'@maumar  & his printers :trollface: '
7099,89229438,b'Introduce a private VisitExistsExpression the same way as VisitSelectExpression is being handled.'
7106,90071362,b'Add Check.NotNull'
7106,90072044,b'Move arg to newline.'
7106,90072964,"b'Looks like we are firing the event before disposing the underlying reader, which is probably more useful anyway. I think we should tweak the event name to reflect that. I.e. ""Disposing"" instead of ""Disposed"". '"
7106,90073600,b'Do you actually need the reader instance for your use case?'
7106,90188971,b'Done'
7106,90189843,"b'Yes, we need it before the disposing. So I changed the name to ""Disposing"".\r\nAlso we need just the instance of `DbDataReader`, which has the command with the statistics and the connection. So I changed this also to send just the  DbDataReader.'"
7106,90189929,b'Done'
6786,83748325,"b""Why have the facts be conditional if we don't have any conditions?\n"""
6786,83748834,"b'Plenty of facts still commented out, if we want to unconditionaly keep them from running for now doing `[ConditionalFact(Skip = ""The reason why it\'s skipped"")]` will at least make it known when the tests are run that some tests are being ignored.\n'"
6786,83772347,"b'That is interesting point. They entered due to different version of SqlServer not supporting all kinds of query. There were Conditions on the actual class implementation of the tests (rather than each method) but a lot of those things have changed. e.g. `PlatformSkipCondition` or `FrameworkSkipCondition` is not being used in EF anymore. Several of them can be changed to `Fact`.\nSo either\n1. We could use ConditionalFact only when used, or\n2. Leave all to be ConditionalFact if there is no harm.\n@anpete , @divega \n'"
6786,83772792,"b""For this particular test, I have to file an issue to add number here but apart from it all other commented out Facts have TODO comment with issue number.\nThe main thing is, these tests are not ignored/skipped temporarily. They are bug in the product found by us which are reported in test to reproduce the issue. It saves time to conversion to  stand-alone repro and translating repro code into a test scenario. They are enabled when scenario becomes actually supported and I don't think there is any value in knowing that these tests are being ignored.\n"""
6786,90147529,"b'@ryanbrandenburg - We decided to keep `ConditionalFact` as is. While tests may not have skip conditions directly on them, there are skip conditions on class or whole assembly or in derived types.'"
7044,91350229,b'Previously we would do this immediately in the API. What is the advantage to doing it in a convention like this?'
7044,91352785,"b'Given what we discussed, why is it that SQL Server needs its own convention here?'"
7044,91354693,"b'This way it will use the current provider-specific annotation value\r\nSo if the property is configured with SqlServerDefaultValue, and later with ComputedColumnSql currently it would end up being ValueGenerated.OnAddOrUpdate, but with this change it would be ValueGenerated.OnAdd.\r\n\r\n---\r\nIn reply to: [91350229](https://github.com/aspnet/EntityFramework/pull/7044#discussion_r91350229) [](ancestors = 91350229)'"
7044,91354898,"b""It's needed to mark key properties as ValueGenerated.OnAdd when SqlServerValueGenerationStrategy is configured on them\r\n\r\n---\r\nIn reply to: [91352785](https://github.com/aspnet/EntityFramework/pull/7044#discussion_r91352785) [](ancestors = 91352785)"""
7044,91355358,"b""So it wouldn't be needed if setting SqlServerValueGenerationStrategy marked the property as ValueGenerated.OnAdd?"""
7044,91356923,"b'So this is a problem with some facets allowing provider overrides, while other do not? ValueGenerated can only have one value, while DefaultValue/DefaultSql can have different values per provider. In your example, OnAddOrUpdate would be wrong for SQL Server, but OnAdd would be wrong for non-SQL Server providers. I think if the provider-agnostic part of the model needs to be inconsistent in this way then there is currently no way we can model this properly. But two other things to consider:\r\n* In what way would an app use an inconsistent model? In other words, does it matter?\r\n* If we stop trying to do one model for all providers, then the annotations can work differently and this will no longer be an issue.'"
7044,91370483,"b'Ok, but independently of what we choose to be the correct behavior here the convention has more data available to it to consider.\r\nAnother issue is that currently ValueGenerated is only set from Fluent API, and not the Metadata API as we had decided not to put any conventional behavior there.\r\n\r\n---\r\nIn reply to: [91356923](https://github.com/aspnet/EntityFramework/pull/7044#discussion_r91356923) [](ancestors = 91356923)'"
7044,91370736,b'Yes\r\n\r\n---\r\nIn reply to: [91355358](https://github.com/aspnet/EntityFramework/pull/7044#discussion_r91355358) [](ancestors = 91355358)'
6908,85792423,b'Does size matter here? I.e. for some expressions we know the column size from metadata.\n\ncc @divega \n'
6908,85793776,b'@anpete i believe when we convert size is not really matter.\n'
6908,85797675,"b'It think it may matter more if it is in the projected results, e.g. reading `varchar(max)`/`nvarchar(max)` values can perform poorly. In general what input types are we supporting with this translation? We probably need some special casing for different types to make the translation correct and once we are special casing it should be easier to pick adequate sizes.\n'"
6908,85800410,b'@divega that sounds reasonable. I need to add more logic into conversion. \n'
6908,89171087,b'@divega Can you please review the new version?'
6908,90119027,b'@laskoviymishka I think this test needs to be updated.'
6908,90119189,"b'Can we switch to using a Dictionary<Type, string> lookup for this?'"
6908,90119447,b'What about when methodCallExpression.Object?.Type is nullable or an enum? We have helpers UnwrapNullableType and UnwrapEnum that you can use here.'
7213,92511335,"b""Don't we have to run conventions at some point?"""
7213,92532139,b'Updated to still run the conventions.'
7213,92689913,b'Is this call safe? At max only 1 match?'
7213,92690242,"b'Yes, we ensure this in `AddInverseNavigation`'"
7213,92691542,b'`inverseNavigationPropertyInfo.Name`?'
7213,92691697,b'nice catch'
7213,92699530,"b'Another question, since we are not un-ignoring `baseNavigationPropertyInfo` does `ConfigureInverseNavigation` will take care of it?'"
7213,92705021,b'It will if it adds that navigation'
7323,94093494,b'I think the behavior changed here - https://github.com/dotnet/corefx/commit/7888677b3c53596085c2fa53860d9a0519eeecfd#diff-d7bff8835e6985ab9107a59a282e1a60L153. '
7323,94098011,"b'It seems so. If this is blocking the build we can take your fix, but I am going to create a corefx bug because I am not sure this change was intentional.'"
7361,94848680,b'Is the comment still useful?'
7361,94849013,b'Probably not.'
7362,94866924,"b""I suspect that the majority of developers that will end up using this overload are going to be application developers that will get it picked up by the compiler based on their navigation property types as opposed to library developers that explicitly choose it.\r\n\r\nOn the other hand removing this overload in 2.0 means the enumerable version will be picked up by the compiler and the code is source compatible, so no actual break as long as you are compiling the code again (which will very likely be required in 2.0).\r\n\r\nSo in this particular case isn't the obsolete message potentially more confusing than helpful?"""
7362,94867171,b'Could that this is all that is needed. I assume we are not adding tests because when we recompile the tests a bunch of them will start using this version?'
7362,94868509,"b'I ran all the tests while it was still a non-obsolete extension method, and all was well.'"
7362,94868575,"b'Not an extension method, so no ""normal"" code will pick it up.'"
7362,94868673,"b'Talked to @ajcvickers and it turns out this is just a static method as opposed to an extension method (cool trick that @bricelam came up with), so my concerns were not justified. '"
7362,94868769,b'This can be ignored. @ajcvickers tested that using the overload still works.'
7366,94887390,"b""nit: I might be even missing why this change was needed but doesn't the `?.` operator become unnecessary after checking that optionsAction isn't null? """
7366,94984792,b'Yep. One little grayed out character is easy to miss. ;-)'
7287,93485976,b'Why is this needed?'
7287,93487119,b'Will this throw if the strategy is set on the model or entity type?'
7287,93488225,"b'Does this work for cases where we generated an PK for a dependent, but now want it to be updated because it is also an FK and the principal has now been added?'"
7287,93488452,b'Does this need to be public API?'
7287,93488821,"b'Why add ""by the database"" here?'"
7287,93488830,"b""But only if one is explicitly set, right? If so, I don't think this line is helpful."""
7287,93489407,b'Why is this test removed?'
7287,93490085,b'Why does this throw?'
7287,93497893,"b""Yes and there's a test for this."""
7287,93499196,"b""The new value would be propagated, so it won't use this code path. I've seen the test for this, but can't locate it atm."""
7287,93499959,"b""I'll move it to Internal."""
7287,93500044,b'Because it can still be generated on the client'
7287,93500276,b'Or by a convention. It is probably more helpful for the provider/convention writers'
7287,93501025,"b""Because a custom value generator cannot be used for a non-key property anymore. I'll add it back with a key over the properties."""
7287,93501554,b'Because there was no value set on a required column as the comment states'
7287,93502562,b'To avoid marking a property as ValueGeneratedOnAdd since the default value is `NULL` which is already the default for nullable properties.'
7287,93513496,"b'How does it get done by convention? My understanding of Never is that it really means never. That is, no real or temporary value should be generated--it is the responsibility of the application to set any needed value before the entity is tracked.'"
7287,93514197,"b'But NotId is setup as a key and has ValueGeneratedOnAdd set, so why it no value generated?'"
7287,93514416,b'Never mind. I was looking at the wrong context class.'
7287,93514798,"b'No, we decided that value generators will run even if ValueGenerated is set to Never so that in case a CLR default is generated it is still sent to the database. Discriminators are configured by a convention.'"
7287,93516017,"b""But that's the case where a value generator is set on the property, right? I guess it's semantics in the wording of the documentation. Probably @rowanmiller should decide. Even though it is technically true that if something explicitly sets a value generator on a property then a value will be generated, in the context of how this API is used it adds confusion to say that. The most common case for using this API is to make a key property not get generated values, and when the documentation states that it may still get generated values when it won't I don't think the documentation is helping. """
7287,93516604,"b""I'm fine delegating to @rowanmiller, but I think correct documentation is better than documentation that is less confusing for the normal use case. Also note that this is in remarks section, so it won't be visible in IntelliSense"""
7287,93518323,b'Why not make it more clear in the documentation that this is a corner case that most users will not hit?'
7287,93518616,"b'Ok, is this better?\r\n> Note that values may still be generated by a client-side value generator, if one is set explicitly or by a convention.'"
7287,93519117,"b'Can you point me to the test? It seems to me that a non-key property set to OnAdd that does not have default or computed value or SQL will get the strategy from the model, which would then trigger this even though the strategy has not been set on the property.'"
7287,93519335,b'I can live with that.'
7287,93519458,"b""Yes, that's what I said, it will throw even if it hasn't been set on the property."""
7287,93519862,"b'Sorry, then the question is why? Setting it on the model is shorthand for ""anytime I need you to pick a strategy, then this is the one to use."" It should never cause anything to throw.'"
7287,93520013,"b""Also, I don't much care if setting it on a non key property does nothing, but I can see the value in that case of warning."""
7287,93520280,"b""We decided that using 'DatabaseGeneratedOption.Identity' annotation on a non-key property should throw so that the user is aware that the property is not configured as Identity"""
7287,93522943,"b'When did we decide that? Using DatabaseGeneratedOption.Identity is the same as setting ValueGeneratedOnAdd, which means if the value is default or temporary then the update pipeline should expect the database to generate a value.'"
7287,93523734,"b""I don't remember the exact date when we'd discussed this with @divega. But basically there were a couple of reports where users would expect this annotation to actually configure the property as Identity. I'm fine with making it a warning though."""
7287,93525360,"b'We need to discuss in a design meeting or similar because it was a fundamental outcome of the design we agreed upon that the data annotations do exactly the same thing as the fluent API. We debated at length the term ""Identity"" and the confusion it could cause but ultimately decided that continuing to have it mean ""value generated on add"" (which is what it has always meant since it was introduced--see GUIDs) was the best thing to do in the circumstances.\r\n\r\nNow the SQL Server value generation strategy is different. In this case it really does mean use an identity column, or, more specifically, configure an entire end-to-end key generation strategy (including DDL) to use an identity column. We certainly agreed that if the application explicitly sets this strategy for a non-key column, then it is okay to throw because the strategy is only designed for keys. This is something we did agree on in a conversation with Diego. However, if the key strategy for the model is set to Identity, it doesn\'t mean that non-key properties that are value generated are somehow invalid. So if we are going to do this validation, then it needs to be done in a way that distinguishes the strategy being set on the property as opposed to the model.'"
7287,93525959,"b'Yes, we can throw for explicit and warn for derived from model.'"
7287,93526102,b'Why warn? What are we warning about?'
7287,93526598,b'That if a non-key property is configured as ValueGeneratedOnAdd it will not use the model default of Identity or HiLoSequence so if the database is created by migrations it might be different from what one expects.'
7287,93528011,"b""I think this would be an unnecessary and annoying warning. With regard to Migrations, it would still be valid for Migrations to create an identity column if possible. If Migrations is unable to do this or something else that works, then I would expect an error from Migrations.\r\n\r\nAnd with regards to customer's reporting this, I haven't seen anybody be confused by the value generation strategy. I've barely seen anyone who knows about it at all. So if I, quite correctly, make a property value generated on add, and then get a warning about it referring to something that pretty much nobody knows about it, how is that helpful?\r\n\r\nWe're not going to fix the long-standing confusion of DatabaseGeneratedOption.Identy by adding warnings about the SQL Server value generation strategy."""
7287,93528653,"b""The confusion this warning would alleviate is the difference in behavior between setting  ValueGeneratedOnAdd on a key vs on a non-key property. It wouldn't be correct to always throw for this in migrations as we can't detect whether the user has added a trigger or a similar mechanism to provide the value."""
7287,93529230,"b'If Migrations is unable to generate an appropriate column, then it is fine/correct for it to scaffold something with a warning or that throws such that the developer can then edit this as appropriate, for example, by adding a trigger.'"
7287,93529452,"b'And besides, at model validation time, we have no knowledge that Migrations are even being used.'"
7287,93530040,"b""There is no mechanism to inform migrations that a trigger will by added by a custom SQL command.\r\nThat's why it should be a warning and I don't think there's currently a way of showing warnings from migrations."""
7287,93530075,"b""So it seems this warning would be for people that:\r\n* Are using Migrations\r\n* Have a clue that we have an end-to-end strategy\r\n* But don't understand that the strategy is only for key values\r\n* And are not intending to edit their migration to generate appropriate DDL\r\n* So will be suprised if Migrations does not generate an Identity column\r\n"""
7287,93532354,"b""I'll change this to throw only for explicit configuration and I opened #7295 for the warning"""
7374,95490734,"b""'entity instance' is redundant, just 'entity' or 'instance' would be enough"""
7412,96775261,"b""Shouldn't this be like this?\r\n```\r\n(EntityState == EntityState.Unchanged  \r\n             || (EntityState == EntityState.Modified \r\n                && !IsModified(property)))\r\n```\r\n"""
7412,96913621,"b'I guess that is slightly more efficient given that if the state is Unchanged, then IsModified will always be false, but it is functionally equivalent. '"
7437,96775718,b'A good practice would be to check cancellationToken before making the call for all of these methods.'
7437,96775803,b'FromResult(true) is marginally faster.'
7437,96918351,"b""I thought we didn't typically do that unless we were doing some I/O task or other long running operation. At least, that's what I remember us deciding."""
7437,96918574,"b""I knew one was preferred over the other, but couldn't remember which, so I searched the code and found we use FromResult(0) more frequently than FromResult(true) or FromResult(false). We should probably switch them all over..."""
7437,96950134,"b""Since this could result in a database call I think it qualifies as I/O. That's why we added the async overloads in the first place, right?"""
7437,96950171,b'Filed https://github.com/aspnet/EntityFramework/issues/7445'
7437,96950597,b'Use a TaskCache? https://github.com/aspnet/Common/blob/dev/shared/Microsoft.Extensions.TaskCache.Sources/TaskCache.cs'
7437,96950830,"b""In that case, shouldn't the check be made at the time that the database call is made?"""
7437,96953802,"b""But we don't have the cancellationToken by that time because we are using the sync path"""
6989,87476802,b'Why is this not an interface?\n'
6989,87477997,"b""Because the thought didn't even cross my mind... I was just doing it like we did in EF6 (eyeroll from @anpete \xf0\x9f\x98\x81). I'll swap it to an interface.\n"""
7447,96986665,b'Consider breaking into two statements to improve readability'
7447,96987640,b'Consider refactoring these methods to make them structurally equal to the sync versions'
7331,97384862,b'simplify this as `_isSearchCondition = expression.IsLogicalOperation()`'
7331,97386370,b'Just for coverage - Test for binary and with binary and.'
7331,97386616,"b""Also add same tests in `AsyncQueryTestBase`. You don't need to assert SQL gen for those."""
7473,97818972,"b""Looking at this now I don't think it needs thread-safe initialization. DbSets are not shared and not thread safe. But I can make this change as a separate pull request."""
7473,97819549,"b""It's unfortunate that this needs to be internal. Is there any other way it could be done? Explicit interface implementation, perhaps?"""
7464,97905125,b'Should this be inlined as well?'
7464,97905331,"b""@AndriySvyryd I guess its a matter of preference. I don't think it adds much value, but then I don't think it causes much harm."""
7464,97905783,"b'Would be nice if we did for all of the logical groups. I.e. AddMigrations, AddUpdate etc. Otherwise probably just better to inline.'"
7464,97906846,"b'There does tend to be quite a lot of overlap, and the more groups we have, the more overlap there would be. Query was originally inlined like the rest. I think it was split out at some point because it was hard to find services, or something like that. So I guess my slight preference would be to go back to a single list of services.'"
7484,97900311,b'Could we do ICollection?'
7484,97900380,b'Any way to avoid this alloc?'
7484,97901050,b'Yes'
7484,97901130,"b'Possibly, with more code, if it is critical.'"
7484,97901560,b'Consider caching the empty array here and unifying with the one in ObservableHashSet. It looks like .NET 4.6 introduced Array.Empty<T>() to handle this.'
7484,97902313,b'Certainly not critical. It might be good to have a team discussion on our approach to these kind of optimizations. How far do we go etc.'
7484,97928676,b'I guess you meant to remove `.Cast<object>().ToList()`?'
7484,98047834,"b'Yes, missed that.'"
7494,98112661,"b""Consider using a more granular approach: `WithOptions`, `WithLogger`, etc.\r\n\r\nThis way we don't need to obsolete the overloads as we add more dependencies."""
7494,98113189,b'Would we strictly need to obsolete the overloads?'
7494,98113650,"b""If we don't obsolete them then we'll end up with redundant methods. We could avoid that altogether."""
7494,98115388,"b'@anpete @AndriySvyryd The ""With"" thing is nice--we\'ve done it before--but it can result in lost of code--as it did before! It somewhat depends how often we think this will happen.'"
7494,98115692,b'@AndriySvyryd That depends on whether we use optional args.'
7494,98117798,"b""Even if we use optional args, we will probably need to add new methods to avoid binary breaks. I think I'm leaning towards With methods. We shouldn't have inheritance hierarchies here, like we did with DbInterceptionContext, so the number of methods should be more manageable."""
7498,98299912,b'Possible alternative: Probe each implementation type for IServiceInjectionSite?'
7498,98300094,b'Could even be called IServiceLocator \xf0\x9f\x98\x84 '
7498,98307995,b'Not sure what value it adds but this came up in a conversation with @anpete: instead of registering a delegate we could in theory register a decorator that implements the service contract and gets the concrete type as well as any additional services injected in its constructor. Then this decorator could pass the set the additional services to the instance of the concrete type. \r\n\r\nIt is basically the same solution but with a decorator instead of the delegate.'
7485,98286291,"b'Needs a better name \xf0\x9f\x98\x84 ""ForType"" to somewhat match how we do this in other places?'"
7485,98286436,b'Use an array here and a non-allocating loop below'
7485,98286725,b'Do this allocation only when we need it. Default should be null'
7485,98287373,b'`ValueBufferForType`?'
7485,98298442,b'Uncomment this'
7485,98298497,b'Uncomment this'
7485,98298671,b'We usually omit the type name because it is the return type. E.g. WithOffset.'
7485,98306219,b'Why not use the entity type as key? With delegated identity entity types there could be several entity types using the same CLR type'
7485,98306402,"b""We don't have the EntityType at the places we need to access this."""
7485,98306647,"b""Ok, but we'll need it soon."""
7485,98307099,b'Do we ever hit second condition here? '
7485,98307116,b'virtual'
7485,98307259,"b'""Creates a new ValueBuffer containing only the values needed for entities of a given type.""'"
7485,98307497,b'@AndriySvyryd Can the different ETs have different values for their property indexes??'
7485,98308054,"b""Yes, that's how a customer with home address and work address can be materialized from the same ValueBuffer"""
7485,98308512,"b""Yes we do. When 1 derived type has shadow property, we will have typeIndexMap not null but we don't store the index map for other types if they don't contain shadow properties."""
7485,98308602,b'No virtual inside struct.'
7485,98313307,b'We can flow the ET but only for query root types. Chatted to @AndriySvyryd and we are thinking of disallowing inheritance within delegated ETs so we would be OK here.'
7483,98030251,"b'Are we saying that we are removing the semantic of `WriteCommandError` and that from now on all exceptions are at the ""connection"" level? Note, there is code out there that is already looking for command level exceptions is tapping the `WriteCommandError` event. I\'m not sure we want to simply remove this.'"
7483,98030617,b'Love having these transaction events!!! Good Addition.'
7483,98031199,"b'Note, I\'m not saying it can\'t be done... but the reason its like this is because we wanted to try an ensure that a ""closing"" event is ""always"" registered. Obviously downstream systems have to assume that it mightn\'t be if the error was bad enough, but with this, we could still alert people to how long the command took to error, etc.'"
7483,98347008,"b""OK, I'll bring this back.\r\nBut my thought was that the executeMethod, instanceId, Timestamp and Duration isn't needed here, as most users would want to investigate the error itself at this point."""
7483,98570043,"b""Getting build error here: error CS1503: Argument 1: cannot convert from 'method group' to 'string'"""
7483,98570081,"b'Looks like a typo, can you address?'"
7483,98570532,"b'virtual, doc-comments'"
7483,98570589,b'nit: formatting'
7483,98579111,b'We are tracking `DataReaderDisposing` but what about its opening? i.e. tracking now long the read takes. Also it would be nice to know how many records were affected.'
7483,98653404,b'Sure'
7483,98656372,b'Done'
7483,98656428,b'Fixed.'
7483,98661182,"b'Done.\r\nAlso added the results of the commands, which is most valuable in case of ExecuteNonQuery.'"
7483,98745178,"b""Just wondering if we need to add `transactionId` here? i.e. if we are wanting to correlate the command not only to the connection it was a part of but also to a transaction, with this current set of data, I'm wondering how we do that? """
7486,98282283,b'Use Cast<object> to avoid an `is` check for each element?'
7486,98283525,b'Will do'
7483,98843077,"b""This is another issue should be in another pull request.\r\nI'll take a look."""
7483,98850204,b'Implemented in in a new PR: https://github.com/aspnet/EntityFramework/pull/7522'
7495,98519951,"b""Didn't we identify other places where we needed to do this?"""
7495,98805916,b'How about using `QueryModelBuilder` to build the qm instead of doing a copy like this?'
7495,98807877,"b'added this to the other place also, thanks'"
7495,99248997,b'we need to keep the same instances of QuerySources'
7495,99391797,b'Does it still work if we exit on this branch?'
7495,99391942,b'Does it still work if we exit on this branch?'
7495,99397986,"b""it's fine - we only need to recreate the original shape if the client evaluation is needed (for the second pass thru query model), and if we exist here (keeping the changes to the query model) but the outer querymodel needs client evaluation, code in the outer will recreate the original shape, undoing the changes done in the inner querymodel."""
7495,99398377,"b""That's what I thought \xf0\x9f\x98\x84 """
7513,98570103,"b'this query now becomes N+1, so i made it run quicker (was taking 30sec on my machine before I scoped it down)'"
7327,94630679,"b""I don't think this is the correct change. The issue is about the uniqueness on the index being overwritten This instead changes the IsUnique flag on the FK."""
7327,94635304,"b""That makes sense and I will update accordingly; out of curiosity, is there anything else 'linked' to the FK's IsUnique flag I might have missed?"""
7327,94683876,"b'@tuespetre In EF Core metadata, a ForeignKey object defines a relationship, and the IsUnique flag determines whether that relationship is 1:1 or 1:*. EF therefore uses this flag to determine how to handle the relationship in queries, updates, fixup, etc.\r\n\r\nIndex objects define which indexes should be created in the database when using Migrations. They are currently not reasoned about by non-Migrations code, although this could change.\r\n\r\nWhen a ForeignKey is created an Index will also be created with appropriate configuration for the FK. However, the application may change that Index in some way. This should have no effect on the ForeignKey and will only change how the index is created by Migrations.'"
7327,94684399,"b""@ajcvickers thanks! That'll get me thinking about some scenarios. Maybe there also needs to be a test to ensure that the very thing done by this current change does not happen (i.e. test to ensure that changing an index does NOT affect a foreign key.)"""
7327,96985492,"b'The correct fix is to remove line 927 from InternalRelationshipBuilder.cs, leftover from before we had the convention:\r\n```\r\nbuilder?.Metadata.DeclaringEntityType.FindIndex(builder.Metadata.Properties)?.SetIsUnique(unique, configurationSource);\r\n```\r\nAnd to run `OnForeignKeyUniquenessChanged` conventions in `InternalRelationshipBuilder.ReplaceForeignKey` if the FK uniqueness actually changed.'"
7554,99457915,b'remove this comment - seems inaccurate (visit children comes later)'
7554,99457931,b'remove this comment as seems redundant - fairly obvious what the code is doing here'
7554,99457966,"b'This pattern in repeated several times, consider DRYing it up.'"
7554,99457974,b'remove comment'
7554,99457977,b'remove comment'
7554,99457984,b'remove comment'
7554,99458002,b'remove comment'
7554,99458007,b'remove comment'
7554,99458104,"b""nit: maybe 'Build' or 'Create' instead of 'Make'"""
7554,99458324,b'Can we call Visit instead on Convert?'
7554,99458366,b'Put this in /// Summary doc comment'
7554,99458460,b'I find the naming confusing. Is it that this visitor is a predicate translator that performs a different translation when the target expression is a search condition?'
7554,99460226,b'I also need suggestions for name. Visit would be starting method for every expression. But the code block should be applied only at top level or starting expression. I moved the extra handling at top level inside the visitor to make it more contained in itself.'
7554,99473558,"b""How about `Translate` as method name?\r\n\r\nThis is visitor which converts value to search condition or vice-versa as needed. It is applied to predicates/join conditions & projections. After thinking more about name of the visitor,\r\nI believe it shouldn't be named with Predicate."""
7554,99907048,"b'Translate is fine. I was looking for symmetry with the 3 lines above, but I see why it needs a custom entry point method.\r\n\r\nHow about something like:\r\n```c# \r\nnew BooleanExpressionTranslatingVisitor().Translate(expression, searchCondition: false);\r\n```\r\n'"
7327,100157727,"b'Perhaps the problem is here, try instead:\r\n`oldIsUnique != newRelationshipBuilder.Metadata.IsUnique`'"
7327,100161894,"b'Something is happening in one of the conventions, so the `newRelationshipBuilder` is assigned something new. I see it runs through the `ReuniquifyTempProperties` bit, and each time it comes through it changes to `QRefId1`, `QRefId2`, and so forth.'"
7517,100208101,"b""Doesn't this block the reducible node pattern? I think we want to call base here."""
7517,100209544,b'fixed'
7517,100397798,"b'Remove the assert, too.'"
7327,100446897,b'Perhaps a more accurate test would be\r\n```\r\noldIsUnique != newRelationshipBuilder.Metadata.IsUnique\r\n```'
7581,100618747,"b""I'm only looking at the diff, but you're populating `_methodInfo` with a call to `SingleOrDefault` above, which means `null` might be an expected value for `_methodInfo`.\r\n\r\n`if (Object.Equals(_methodInfo, methodCallExpression.Method))` might be a better check in that case."""
7581,100624732,"b'Good catch, thanks.'"
7592,100923452,"b""Change to interface is problematic here. We won't be able to add functionality to it without introducing a breaking change. Abstract base class doesn't have this limitation."""
7587,100631698,b'This change in a way scoping down the optimizations to only predicate of select expression (applied recursively)'
7587,100926576,"b'+1 to what @smitpatel said. Please remove this for now, we need to look into the CompositePredicateExpressionVisitor in general, rename it and see where the optimizations can be applied to other parts of the SelectExpression. This can be done in a separate PR tho.'"
7587,100926934,b'please revert these changes for now'
7587,100926942,b'please revert these changes for now'
7607,100935278,"b'Not sure whether this will be necessary after project.json files are removed. But, for now best to cover both cases&hellip;'"
7607,100949633,"b""@natemcmaster bit of a concern that I needed to change this project. Without the change, CI runs failed with missing symbols in test projects because the dependencies listed below weren't brought in. Is that a bug in transitive references?\r\n\r\nWith this change, I will also need to change other `src` projects that reference this one."""
7607,100951659,b'Might be. We should try this on csproj and see if it works better there (#7542)'
7596,100656698,"b""@anpete - Any place to put this visitor? It doesn't need to be on public surface. (May somewhere in .Internal)"""
7596,100679485,"b'Any reason not to do this in Core? If not, then QueryOptimizer would be the natural place to put this logic.'"
7596,100681875,b'I guess this can be done in core too. I started in relational because extra columns/select expression is in relational. \xf0\x9f\x98\x84 '
7596,101088368,b'Can remove this and the corresponding entry in the handler map because client-eval is the default.'
7596,101089768,b'Wrong type?'
7596,101090084,"b'Can this be done in VisitResultOperator in QueryOptimizer? If so, we can DRY up some of the code below that deals with updating QSREs and annotations.'"
7596,101090737,b'DRY this up by moving this and the nav rewrite version to a shared helper. Perhaps IAsyncQueryProviderExtensions.CreateQueryable?'
7596,101090958,"b'If we add this, we should use it everywhere. Can be a separate PR.'"
7596,101137708,b'Can you unify any of this fix-up stuff with similar code in this class?'
7596,101137880,b'Make this a ctor param.'
7596,101138171,"b""Does this code need to move? This isn't really an optimization but rather a specific translation."""
7596,101144621,"b""It causes indirect optimization in terms of materialization. We have a test with `a is Kiwi` in projection. If this is done in optimization we don't materialize. If we do during VisitQueryModel, we materialize the entity."""
7574,100212279,b'remove'
7574,100213227,b'we should also keep baselines for the string version'
7574,100420056,"b""Don't we need VisitSubquery here as well?"""
7574,100424611,"b'No, these query sources can only originate from the outer-most query.'"
7574,100429302,b'parameter names'
7542,99250614,b'Will be set automatically for Release builds by Internal.AspNetCore.Sdk'
7542,99250805,"b""Nit: i've been condensing itemgroups so there is one block of package + project references. But up to your team to decide if you like separate blocks better."""
7542,99251012,b'Nit: concat nowarns.'
7542,99251195,b'Is there a nuget package for this? cref https://github.com/aspnet/Coherence-Signed/issues/389'
7542,99251226,b'Nit: concat nowarn'
7542,99251318,b'Nit: PrivateAssets can be an attribute instead of a nested element. '
7542,99268389,b'Not until 2.0. Will remove ASAP.'
7542,99370943,b'(But it will no longer be propagated to the nuspec)'
7542,99372623,"b'Feels more idiomatic as an element to me, but I might just be living in the past...'"
7542,99373237,"b""I've observed that VS likes to create different groups for different item types. Following suit tends to keep edits via VS cleaner."""
7542,99373594,"b'YAGNI, but we might need it, so... \xf0\x9f\x98\x89 '"
7542,100952814,"b'This will conflict with #7607 changes. Will need to rebase and deal with the fallout, sorry.'"
7542,100953121,"b'- `<TargetFrameworks>net452;netcoreapp1.1</TargetFrameworks>` to match #7607\r\n- (channelling @natemcmaster because I couldn\'t fit this into #7607) add the following to automatically disable full desktop testing on non-Windows\r\n  ``` xml\r\n  <TargetFrameworks Condition="" \'$(OS)\' != \'Windows_NT\' "">netcoreapp1.1</TargetFrameworks>\r\n  ```'"
7542,100953290,"b""Wow @bricelam you are old school \xf0\x9f\x98\xba Haven't seen a `<link>` in forever."""
7542,100953589,b'Lots of these test projects depend on each other or on Microsoft.EntityFrameworkCore.Specification.Tests. Should be bringing at least the xUnit package in transitively. Leave transitive dependencies out.'
7542,101103135,"b""Hmm... By default, I don't think build scripts of packages are brought in transitively. I think I have to leave these since both `xunit` & `xunit.runner.visualstudio` have build scripts."""
7590,101168461,b'Why is this needed?'
7590,101168713,b'Keep this method but make it private.'
7590,101168836,b'remove this.'
7590,101169478,b'What is the reason to remove methods in favour of new operator?'
7590,101174120,b':+1:'
7590,101174235,"b"":+1: yeah, I didn't mean to leave that in there"""
7590,101177841,"b'It is used for OUTER APPLY/LEFT JOIN LATERAL in the other big PR I am splitting apart. I felt it made sense for this PR because introducing it is what drove the rename of the LateralJoinExpression, and addressing this change now would eliminate some noise later when dealing with the changes that actually use the LeftLateralJoinExpression.'"
7590,101179237,"b""The methods didn't do anything special at all, and with the addition of LeftJoinLateralExpression, it would be adding yet another method or two to be consistent, or just clean it up a bit by ditching them. SelectExpression has a lot going on and these methods just seem to clutter up the API."""
7590,101182602,b'Add the types when you really need them.'
7590,101190801,b'While method may seem to clutter up at the same time they provide re-usability. Also it encapsulate the formation of join inside SelectExpression. Which could help in future to achieve referential integrity. Lets keep the methods unless we have compelling reason to remove them.'
7590,101205285,"b'I see what you did in recent commits regarding these now, fair enough :+1:'"
7590,101209701,b'Is this still being referenced?'
7590,101209767,b'Preserve variable name. '
7634,101635320,"b""lol, let's ship it. :trollface: """
7634,101641743,b'It may be better than the EF6 one \xf0\x9f\x98\x89 '
7635,101629627,b'Is this requires client anything?'
7635,101652530,b'ClientEverything.\r\n'
7651,101871455,b'NIT: Run code cleanup'
7651,101871508,b'CheckNotNull'
7651,101871515,b'virtual'
7651,101871623,b'Add another branch for Round.'
7651,101871764,b'And Truncate'
7639,101660509,b'Can you change this to `ods => ods.Where(od => od.OrderID == 11077).Where(Math.Exp(od.Discount) > 1)`\r\nThat will make the size of result set smaller and reduce test execution time.'
7639,101660788,b'This should actually derive from `SingleOverloadStaticMethodCallTranslator` just like `SqlServerMathPowerTranslator`.\r\n`Math.Exp` got only 1 method and no other overload.'
7639,101661060,b'Also add same test in `AsyncQueryTestBase` too.'
7639,101662153,b'Thank you @smitpatel for the comments. I will add/change the parts you pointed out.'
7646,101876349,b'Use `?:` syntax.'
7646,101876577,"b'Given that optimizations in `CompositePredicateVisitorExpression` are running on all where predicates appearing anywhere in the select expression, these changes should be captured by it. At present it is not happening due to incorrect `VisitChildren` method in `ExistExpression` (notice that all these changes are happening when there is `Exists` in query). So these tests would be improved with just `ExistExpression` changes. What is the benefit of all other source changes here? Nothing is visible in tests.'"
7646,101879199,b'I suppose you are correct here. I was going off of another comment from @maumar about splitting out the `VisitChildren` implementation of `InExpression` into its own PR.'
7646,101882189,b'@smitpatel this change is actually due to the `InExpression`.'
7646,101883289,b'Not really. Just implementing `VisitChildren` in `ExistExpression` gives above change. I tested on latest dev.'
7646,101883419,b'For the specific test `Optional_navigation_type_compensation_works_with_contains()`? '
7646,101883852,"b""Irrespective, I think there is value in implementing VisitChildren on InExpression. However, I do agree with @smitpatel that there is not enough value to justify creating CompositeExpression node in this PR.\r\n\r\nSupposedly, the other PR in which the new node provides real value doesn't get accepted (due to some fundamental issue, or we decide it's too risky or there is better solution, etc) we would then end up with extra Expression that doesn't really do us much good."""
7646,101883868,"b'Sorry, my mistake. I did not see full SQL for this test. Though this should be fixed easily by writing correct `VisitChildren` for `InExpression` without bringing in any additional expression.'"
7646,101884823,"b""Question: any thoughts on how to handle the `ListInitExpression` then? The reason I opted to use `CompositeExpression` here is because then instead of having three different properties hanging off of the `InExpression` (for `ListInitExpression`, `IReadOnlyCollection<Expression>`, and `SelectExpression`), there could be a single `Expression Values { get; }` property that could be pattern matched. `ListInitExpression` has to be handled specially in order to implement `VisitChildren` and it doesn't work when shoved into a `IReadOnlyCollection<Expression>`.\r\n\r\nI do care very much about aesthetics but I guess this is one of those cases where I want to be clear that it wasn't just an aesthetic decision and I did have reasons for doing it. I'm sorry I am not very good at offering up explanations."""
7646,101890247,"b'@tuespetre \r\n\r\n```cs\r\n        private InExpression(\r\n            Expression operand,\r\n            IReadOnlyList<Expression> values,\r\n            SelectExpression subQuery)\r\n        {\r\n            Operand = operand;\r\n            Values = values;\r\n            SubQuery = subQuery;\r\n        }\r\n```\r\n\r\n```cs\r\n        protected override Expression VisitChildren(ExpressionVisitor visitor)\r\n        {\r\n            var newOperand = visitor.Visit(Operand);\r\n            var newSubQuery = (SelectExpression)visitor.Visit(SubQuery);\r\n\r\n            var valuesChanged = false;\r\n            var newValues = new List<Expression>();\r\n            if (Values != null)\r\n            {\r\n                foreach (var value in Values)\r\n                {\r\n                    var newValue = visitor.Visit(value);\r\n                    if (newValue is BlockExpression && value is ListInitExpression)\r\n                    {\r\n                        newValues.Add(value);\r\n                    }\r\n                    else\r\n                    {\r\n                        newValues.Add(newValue);\r\n                        valuesChanged |= newValue != value;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return valuesChanged || newOperand != Operand || newSubQuery != SubQuery\r\n                ? new InExpression(newOperand, newValues.AsReadOnly(), newSubQuery)\r\n                : this;\r\n        }\r\n```\r\n'"
7646,101890294,b'just tested that implementation and all tests seem to be passing '
7646,101893324,"b""Alright, I will tweak that when I have time this weekend.\r\n\r\nHaving the ListInitExpression be nested inside of a list of expressions doesn't feel weird to you though?"""
7646,101901216,"b'It does feel a bit hacky, but the code churn is not worth it. We might as well reconsider this once/if CompositeExpression is justified by a future change.'"
7646,101901266,b'please switch this to:\r\n```\r\nreturn expression != Expression\r\n ? new ExistsExpression(expression)\r\n : this;\r\n```\r\n\r\nWe tend to use this pattern whenever we can.'
7646,101901287,"b'Oh, shoot, I missed this one'"
7663,102339022,b'whoops :)'
7663,102339737,b'possible NRE'
7663,102340265,b'Can you elaborate what this would generate and why it is needed?'
7663,102340368,b'Purpose of `mutateProjections`?'
7663,102340446,"b'thanks, will change it from `do...while` to `while`'"
7663,102343127,"b'`SqlTranslatingExpressionVisitor.VisitSubQuery` could return a `SelectExpression`, but it was always setting the `Alias` to `string.Empty`, which can cause invalid SQL in some cases now that more queries can be inlined. The solution was to only make the resulting `SelectExpression` into an anonymous subquery when appropriate.'"
7663,102344855,"b'Ah, I see. We need to investigate why it is needed. Ideally, we start with top level select expression without setting any alias. We need alias only when we add it as subquery in another select expression. While flattening can cause one of more select expression to be joined, there is no code path which would cause select expression to split, hence we should not have to set the alias to `string.Empty` ever. If we are doing so then we are assigning alias incorrectly in first place which should be fixed.'"
7663,102346039,"b""I think I have a relatively simple fix in progress that makes this better, so that we don't regress here"""
7663,102346075,"b""Well the string.Empty makes it a parenthesized, anonymous subquery. It's just that with new optimizations, it should only be applied on the right occasion instead of unconditionally like it was before.\r\n\r\nwhere (select count(*) from ....) > 7\r\n\r\nand so forth. Sorry for the formatting, on a phone right now"""
7663,102347352,b'Is this a regression though? The resulting SQL is smaller'
7663,102348168,"b""There are places where the visitor should not be adding to the projections, like in the projection visitor, some result operator handlers... this prevents every place from having to use a 'projection count map' or whatever"""
7663,102350907,b'@maumar - Subquery is getting lifted. Better SQL.'
7663,102351001,b'Can we name it something different? We are trying to make SelectExpression as less `Mutable` as possible. \xf0\x9f\x98\x84 '
7663,102351271,b'Good point. Are all such calls go through single path where we can put it instead of having a function to do it?'
7663,102351573,b'Sure! '
7663,102351731,b'They did go through a single path but now not everything coming out of that single path should have it applied'
7663,102352057,b'Oh it looks like the selected columns are different. (More being selected.)'
7663,102390376,b'Use null propagation.'
7663,102390478,b'Possible NRE.\r\nAlso why we need to use FirstOrDefault instead of direct indexes? Property method always have 2 args.'
7663,102391395,"b""I looked into usages of this function. They are being used at various expressions without any corresponding logic around it. We shouldn't have it this way.\r\nEncapsulate this code into the particular code path with condition where this is required. Subquery with empty string as alias is pitfall for many invalid SQL. We should identify the pattern where this is required and apply for those cases only. Ideally this function should be removed."""
7663,102391633,b'\xf0\x9f\x91\x8d '
7663,102391989,b'This change is good in a way that we have reference to QMV which visited this QM already. Hence avoiding revising same QM again. @anpete - Any side effects of this? (like visiting a QM adding something to SelectExpression of some other QM)'
7663,102466168,b'\xe2\x9c\x94\xef\xb8\x8f '
7663,102466406,"b""We don't need to, that should be an indexer \xe2\x9c\x94\xef\xb8\x8f """
7663,102468438,"b'@smitpatel, regarding `MaybeAnonymousSubquery()`:\r\n\r\nI added this condition as a workaround for not being able to always inline a subquery into a projection (due to an `EntityShaper` being present, or otherwise.) It looks like maybe this takes care of the reason I had put in `MaybeAnonymousSubquery` so I can remove it after all. \xf0\x9f\x8e\x89 '"
7663,102470586,b'actually changed the preceding condition to return early if the ancestor is null instead'
7663,102566843,b'@tuespetre - This change would improve perf for query compiler though there is a slight chance of side-effects of caching querymodelvisitors if there are any changed flags in parent qmv in between multiple visits of same QM. The only way to verify is to just make caching changes and see if no tests change. Can you submit a separate PR for that?'
7663,102567753,b'I have approached it that way before (it was one of the first split-out PRs I tried to do) but it does not work (a lot of stuff breaks without other changes made in this PR). :chicken: \xe2\x9e\x95 \xf0\x9f\xa5\x9a; also with these changes there is no multiple visiting of the same query model.'
7663,102568673,"b'If caching QMVs is breaking tests that means it has unintentional side-effects and we cannot cache it. While binding/lifting, QMV peeks into parent QMV and even though same query model is being visited it can produce different results. Mostly, caching is not usable here.'"
7663,102569132,"b""> even though same query model is being visited it can produce different results\r\n\r\nThat's my point, the same query model will not be visited more than once"""
7663,102570219,"b'> If caching QMVs is breaking tests that means it has unintentional side-effects\r\n\r\nThe problem I found was not with the caching itself, but that introducing caching actually **prevents** the query models from being visited more than once, and once you do that, you have to use/account for new and different flags on the parent QMV, such as `CanBindOuterProperties`, `RequiresOuterParameterBinding`, etc. in order for that one-and-only visit of the query model to produce the desired result'"
7663,102595278,"b""I will try removing the caching from this PR and see if it breaks anything. If it doesn't break, I will push up a commit that doesn't have the caching. Does that sound good to you"""
7663,102599469,"b'I tested out caching part and it breaks many tests. In current pipeline, visiting a QM not only dependent on outer qmv flags but also mutates the QM itself. When we fail to translate the QM, we have to revert the QM. We have methods like `PopulateQueryModelMapping` & `RecreateQueryModelFromMapping` for that. That is enough evidence to say that current pipeline generate different results while visiting same query model again.\r\n\r\nBefore we introduce caching on QMVs, we need to make sure that pipeline can generate the required translation of QM which can be used under any circumstances later.\r\n\r\nRemove the caching part from this PR. We can add it when we reach above stage.'"
7663,102603213,"b'Ohhh you gave me an idea for how to deal with all the unnecessary uniquification without the caching bits (for another PR, another time) and also I think I know how to get around the removal of the caching for this PR.'"
7638,102561931,b'We should also indicate that the proper way of getting an instance is through DI'
7638,102565870,b'Why not a property?'
7638,102601985,b'Group with the dependent service?'
7638,102602040,b'It should be--will fix.'
7638,102602187,"b""I'm going to revisit this and possibly add some specific API for registering these. Only our code should be doing it--providers should never need to."""
7638,102602698,b'Move to a separate file'
7638,102603788,"b'How about ""Do not call this constructor directly from provider or application code as it may change as new dependencies are added. Instead, use this type in your constructor so that an instance will be created and injected automatically by the dependency injection container. To create an instance with some dependent services replaced, first resolve the object from the dependency injection container, then replace selected services using the \'With...\' methods. Do not call the constructor at any point in this process.""'"
7638,102603838,b'Will do.'
7638,102606282,b'Property'
7638,102607462,"b'sounds good, I like that you repeat ""do not call the constructor"" \xf0\x9f\x98\x84 '"
7690,102614805,b'`PushDownSubquery` returns this already.'
7671,102310475,"b'@natemcmaster This doesn\'t seem to do anything... (still need `Update=""NETStandard.Library""` below)'"
7671,102324290,b'You probably need to update https://github.com/aspnet/EntityFramework/blob/dev/tools/EntityFramework.props#L23-L25'
7671,102324755,"b'Would be good to explain how this is different from ""M.EF.Sqlite"" i.e. that a users must also provide a reference that satisfies the native SQLite requirement.'"
7671,102351382,b'We should still keep this until we resolve https://github.com/aspnet/Coherence-Signed/issues/401. Just add a condition to exclude when DisableImplicitFrameworkReferences is set'
7671,102355320,b'Thanks. I was on my way out so I decided to let the CI see if it would actually work..'
7671,102538811,"b""I don't think anyone would see it here, so I filed aspnet/EntityFramework.Docs#354 instead. Also the exception message you get points you in the right direction."""
7671,102541089,b'Updated.'
7671,102541161,b'Updated. Thanks!'
7671,102544519,"b'Docs and runtime errors may help, but I\'d still add something here. ""Core"" has become an overloaded term that confuses users. I suspect the "".Core"" suffix will mislead new users into thinking Ms.Ef.Sqlite is for ""old"" projects and ""MS.Ef.Sqlite.Core"" is for .NET Core. Docs and runtime errors don\'t show up in NuGet.org or VS\'s NuGet package manager window.'"
7671,102548249,b'The description is quite visible in the NuGet UI in VS...'
7671,102762515,"b'Will defer to @rowanmiller. P.S. The `.Core` suffix may not be used in the end; I just ""picked something"", but intend to review it with the team.'"
7691,102620614,b'update the comment here also'
7691,102620908,b'That is actually unrelated comment but it should have been removed during changes to `SE.AddTable`'
7694,102807300,b'Does expression need RemoveConvert?'
7694,102819186,b'Possibly. will update.'
7715,103064603,b'sort usings'
7715,103064667,"b""Don't eat doc comments on public surface \xf0\x9f\x98\x9b """
7715,103064715,b'doc comments'
7715,103066153,"b""Use [0] if you've already checked length"""
7703,102869357,b'rename VisitJoin to something else the name is confusing a bit'
7703,102876110,"b'IIRC, VisitJoin is just an existing private helper method.'"
7703,102876275,"b'Rename these two to GenerateX, which is the pattern we are using for these kinds of virtual methods - Visit methods should deal with handling a specific node type.'"
7703,102877867,"b""Yeah, was thinking its a good opportunity to rename it now as it doesn't have anything to do with JoinExpression"""
7703,103004636,b'Suggest a new name if you want change \xf0\x9f\x98\x9d '
7703,103005301,b'how about ProcessExpressionList?'
7726,103122037,b'Forcing it on with <SourceLinkCreate>true</SourceLinkCreate> is just to show that it works. The line should be removed before a merge.'
7733,103357397,"b""Don't you need `testOutputHelper` in constructor?"""
7733,103358371,"b'good catch, updated'"
7737,103362945,"b'small, unrelated bugfix'"
7737,103375643,b'use parameter names'
7737,103376353,"b'problem here is that highlightNonreducibleNode comes last, so the call would have to look:\r\n```\r\nPrintInternal(expression, removeFormatting: false, characterLimit: null, highlightNonreducibleNodes: highlightNonreducibleNodes);\r\n```\r\n\r\nwill add named param for the Print(..) method tho'"
7737,103376574,b'It is not a problem \xf0\x9f\x98\x9b \r\nThe way you have written in above comment is right.'
7737,103377142,"b'yeah, it looks ugly tho. Also feels bit redundant to me, since the method that is being called is directly below. But I guess I can add this for consistency with the other method'"
7737,103541177,b'For future references - we use commented parameter names if they are not at the end of parameters.'
7695,102811269,"b""this shouldn't be needed after you rebase on current dev"""
7695,102811769,"b""I thought that may be the case, I saw @smitpatel's other change (`ProjectStarTable`)"""
7695,102812622,b'do the conversion after the visit and only if needed'
7695,102828260,b'The contents of this if block should be simplified to:\r\n\r\n```\r\nif (node.Expression is QuerySourceReferenceExpression qsre)\r\n{\r\n    DemoteQuerySource(qsre.ReferencedQuerySource);\r\n}\r\n```'
7695,102841209,b'remove'
7695,102841787,b'nit: ++'
7695,102841806,b'nit: --'
7695,102842651,"b'```\r\nvar ifTrue = newAccessOperation.Type != nullConditionalExpression.Type \r\n  ? Expression.Convert(newAccessOperation, nullConditionalExpression.Type) \r\n  : nullConditionalExpression;\r\n```'"
7695,102843271,b'sort usings'
7695,102844158,b'Why these tests are removed?'
7695,102844268,b'they no longer materialize entities therefore exception is no longer thrown'
7695,102844788,b'For which scenarios simply returning visited AccessOperation (after we adjust for potential type difference) is not enough?'
7695,102845371,"b'CompexNavigationsInMemoryTest, GroupJoin_on_right_side_being_a_subquery'"
7695,102846877,b'???'
7695,102850801,b'The GroupResultOperator cannot be demoted until GROUP BY is being implemented. Those are the two lines I mentioned in my initial comments for this PR'
7695,102851260,b'Can you add the same in code comments? PR comments are disconnected with source (and even commit)'
7695,102851361,b'Sure thing'
7695,102870432,b'@maumar This seems to be what was needed (the `|| finalResultOperator is DefaultIfEmptyResultOperator`)'
7695,102946142,"b""~~~On second thought, I thought it through and I'm pretty sure this last block can go away and the previous block can test for convergesToSingleValue || isSubQuery. If it's a subquery there shouldn't be a need to trace it because the new implementation of PromoteQuerySource will re-promote it when necessary.~~~ \r\n\r\nDisregard that. \xf0\x9f\x90\x93 I tested that out on my branch that has all of the optimizations and it marked several things incorrectly. This change is right. (I tested this change on that branch as well and it improved both of the queries you pointed out @maumar.)"""
7695,102953742,"b""I don't think this check (`choiceResultOperator.ReturnDefaultWhenEmpty`) really needs to be here, so this block can be collapsed with the preceding block. I've tested this idea on my branch with all of the optimizations and everything stayed the same test-wise."""
7695,103068208,"b'yup, ran the updated code alongside my changes and the queries are better indeed'"
7695,103073998,"b'No need to pass querymodel here, also this could be more general-purpose, e.g.\r\n```\r\nPromoteQuerySources(IEnumerable<IQuerySource> querySources)\r\n```'"
7695,103075517,"b'i think we are missing test coverage, there should definitely be a difference between First and FirstOrDefault when used in a subquery. FoD we can sometimes translate but first will always result in client evaluation. Wrt LastOrDefault, we can only translate it if the query also has orderby (we change the asc <-> desc and slap FirstOrDefault instead). Perhaps we can make this change as part of QueryModel optimization (before this step), so every time you encounter LoD here, you know it needs client eval.'"
7695,103077440,b'We do not modify the LoD in optimizequery model instead we do it in HandleLast here https://github.com/aspnet/EntityFramework/blob/dev/src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/RelationalResultOperatorHandler.cs#L561'
7695,103081333,"b""Whether or not those result operators need to be client evaluated doesn't affect whether the underlying query source needing materialization or not though. customers.Select(c => c.Name).Single() should not materialize the whole customer"""
7695,103082133,"b'Really the method could go away altogether, just needs to be:\r\n\r\nif (queryModel.ResultOperators.LastOrDefault() is IQuerySource querySource) { PromoteQuerySource(querySource); }'"
7695,103084873,"b'@smitpatel yeah, but we can move that earlier'"
7695,103085025,"b'Or rather, `foreach (var querySourceResultOperator in queryModel.ResultOperators.OfType<IQuerySource>())`. I mean realistically only the `GroupResultOperator` is an `IQuerySource` (I think) but for the sake of correctness? \xf0\x9f\x98\x9b '"
7695,103086199,"b""@tuespetre this is because in your example the subquery that Single is wrapped around doesn't need the c materialized on its own (it's not projected by that particular subquery). If the query model was instead:\r\n\r\n```\r\nfrom c in customers\r\nselect\r\n{(from c2 in customers select c2).Single()}.Name\r\n```\r\n\r\n(that thing will be optimized by relinq, but lets assume its not)\r\n\r\nthen the Single will force materialization on the inner subquery, and since result of that subquery is c2, its query source should be marked.\r\n\r\nWhat is happening in the code (in AdjustForResultOperators) is, we peek into the parent selector, and if that selector can't be traced back to the result of inner query, we demote the result of that inner query. This is ok for most cases, but with Single/First etc we still need the result of that inner subquery materialized. \r\n\r\nHowever one could argue that this is not a concern of the RequiresMaterialization visitor, since it shouldn't care which operators can be translated.   """
7695,103086393,"b'@maumar in the new example you gave, the customer still does not need to be materialized. But if it were to select a `NotMapped` property instead of `Name`, or call some client method on it instead of accessing the `Name` member, it should be materialized.\r\n\r\nIOW: `Single().Name` can translate to `SELECT TOP (2) c.Name FROM ...`, no need for materialization. SQL example, but should hold true for any provider.'"
7695,103087537,"b'@tuespetre yeah that\'s because relinq optimized the case. I gave this (simplified) case with a caveat that   the QM will be processed in this form. A real life example would be: (with the complex navigations model - using required navs so that QueryCompilationContext doesn\'t compensate)\r\n\r\n```\r\nctx.LevelTwo.Select(l2 => ctx.LevelTwo.First().OneToOne_Required_FK_Inverse.Name)\r\n```\r\n\r\nthis gets converted into the following QM:\r\n\r\n```\r\nfrom Level2 l1 in DbSet<Level2>\r\nselect \r\n    (from Level2 <generated>_1 in DbSet<Level2>\r\n    join Level1 <generated>_1.OneToOne_Required_FK_Inverse in DbSet<Level1>\r\n    on Property(<generated>_1, ""Level1_Required_Id"") equals Property(<generated>_1.OneToOne_Required_FK_Inverse, ""Id"")\r\n    select <generated>_1.OneToOne_Required_FK_Inverse)\r\n    .First().Name\r\n```\r\n\r\nnow, this will be translated into the following query plan:\r\n\r\n```\r\nTRACKED: False\r\n(QueryContext queryContext) => IEnumerable<string> _Select(\r\n    source: IEnumerable<ValueBuffer> _ShapedQuery(\r\n        queryContext: queryContext, \r\n        shaperCommandContext: SelectExpression: \r\n            SELECT 1\r\n            FROM [Level2] AS [l1]\r\n        , \r\n        shaper: ValueBufferShaper\r\n    )\r\n    , \r\n    selector: (ValueBuffer l1) => Level1 First(\r\n        source: IEnumerable<Level1> _Select(\r\n            source: IEnumerable<TransparentIdentifier<ValueBuffer, Level1>> _ShapedQuery(\r\n                queryContext: queryContext, \r\n                shaperCommandContext: SelectExpression: \r\n                    SELECT TOP(1) [l0].[Id], [l0].[Date], [l0].[Name], [l0].[OneToMany_Optional_Self_InverseId], [l0].[OneToMany_Required_Self_InverseId], [l0].[OneToOne_Optional_SelfId]\r\n                    FROM [Level2] AS [l]\r\n                    INNER JOIN [Level1] AS [l0] ON [l].[Level1_Required_Id] = [l0].[Id]\r\n                , \r\n                shaper: CompositeShaper`3\r\n            )\r\n            , \r\n            selector: (TransparentIdentifier<ValueBuffer, Level1> t0) => t0.Inner\r\n        )\r\n    )\r\n    .Name\r\n)\r\n```\r\n\r\nNote that the inner query, inside First() is materialized into entity, so everything works fine.\r\nHowever, if you remove the ```&& choiceResultOperator.ReturnDefaultWhenEmpty``` from the line 417 this query will now not be marked for materialization and will fail to compile.\r\n\r\nFrom the perspective on QM translation to query plan, First, Single, SingleOrDefault are indistinguishable from a simple client method that takes a collection and returns single element. \r\n'"
7695,103088067,b'Inlining sounds good. \r\n'
7695,103088108,"b'In that case though, it should not fail to compile because the `MemberAccessBindingExpressionVisitor` will check if the type is `ValueBuffer` and use `BindMemberToValueBuffer`'"
7695,103089650,"b""@tuespetre I think you are right. Currently we can't properly bind in this case, but that's a bug in the  compilation rather than the ```RequiresMaterializationExpressionVisitor```"""
7695,103126940,"b'convert this to a single if statement instead, there is only one case + default'"
7695,103127003,"b""don't we need to add group result operators here also? (like we do for the top level query)"""
7695,103127345,"b'how about:\r\n\r\n```\r\nvar unreachableFromParentSelector =\r\n    tracer.FindResultQuerySourceReferenceExpression(\r\n        _queryModelStack.Peek().SelectClause.Selector,\r\n        referencedQuerySource) == null;\r\n\r\nif (unreachableFromParentSelector)\r\n{\r\n    DemoteQuerySource(referencedQuerySource);\r\n}\r\n```'"
7695,103127657,"b'in general, this method is quite complicated - can you provide some description of the logic behind it? (similar to the part in VisitBinary - I found that very useful)'"
7695,103127679,"b'We do that on the parent query because it absolutely has to be, but for subqueries, any group result operators should be promoted/demoted as necessary via `HandleUnderlyingQuerySources`'"
7695,103130948,"b""I will give it a shot -- I also see some restructuring that could be done to make it 'flow' better, which should help"""
7695,103134228,"b""this can be calculated later, only when it's needed. Extract it to ```ConvergesToSingleValue(queryModel)```\r\n"""
7695,103134332,b'consider:\r\n\r\n```\r\nif (condition1)\r\n{\r\n...\r\n\r\nreturn;\r\n}\r\n\r\nif (condition2)\r\n{\r\n...\r\n\r\nreturn;\r\n}\r\n```\r\n\r\nthis way there is a good place to put some comments (just before the ```if```s)'
7695,103280192,b'compute this after the GroupBy check'
7695,103281488,b'Done \xe2\x9c\x94\xef\xb8\x8f '
7695,103524562,b'Can you update comment that QSRE referencing entity type is re-written into key equality comparison.'
7695,103524962,b'Why this method return same node instead of the visited node like other methods.'
7695,103525232,b'What is the different when operand is subquery & its entitytype expression? This subquery expression will be revisited in VisitSubquery when you call Visit(operand)'
7695,103525582,"b'What is guidance on using AdjustForResultOperators?\r\nAt very top level, we add result operator before visiting query model and then adjust result operators after visiting qm. Here we did not add result operators. Few lines above we also visiting query model but we are not doing anything with result operators.'"
7695,103526297,b'Will there be more than one sourceExpression matching current expression?'
7695,103526760,b'This is being repeated multiple times. Make a method which try safe cast to QSRE and returns referenced query source.'
7695,103526937,"b'Similar to above, function to get selector after safe casting to Subqueryexpression'"
7695,103528018,"b"">new QuerySourceTracingExpressionVisitor() [](start = 31, length = 41)\r\n\r\nThis can (or should) be stored in static in this class so that we don't initialize it all the time. The same instance can serve all the invocations of the function."""
7695,103528294,b'unreachableFromParentSelector asserts isSubQuery already.'
7695,103528550,"b'>DemoteQuerySourceWithUnderlying [](start = 20, length = 31)\r\n\r\nrename function to something better. @maumar suggest a name.'"
7695,103528885,b'Sure'
7695,103529325,"b""Because the version before my changes did the same. This visitor doesn't actually change anything, but I guess it wouldn't hurt to return `node.Update(newLeft, node.Conversion, newRight)`."""
7695,103530303,b'We should be consistent about it. Either we return same expression in everything or we send updated. Change every overridden method to return the same expression which came via parameter.'
7695,103530327,"b'The previous version did the same thing, it should be the same thing as the `QuerySourceReferenceExpression` case -- for key equality comparisons.'"
7695,103531340,b'@maumar to verify where and how this is needed.'
7695,103531732,"b""The top-level `IQuerySource` result operators are added that way because it's the top level and they won't get promoted the same way they do for subqueries (via `HandleUnderlyingQuerySources`.)"""
7695,103532074,b'It is not thread-safe so `static` is off limits. Caching a single instance per `RequiresMaterializationExpressionVisitor` may work.'
7695,103532761,"b""@smitpatel it's needed because we are counting references and visiting each of the `Caller` and the `NullableCaller` and the `AccessOperation` would throw off the count (as I found when working on materialization changes.) """
7695,103533426,"b""Shouldn't be, the old version used a `foreach` loop too, a more succinct version would be:\r\n\r\n```\r\n                    if (resultSetOperators.Any(r => r.Equals(expression)) \r\n                        && _querySourceReferences[parentQuerySource] > 0)\r\n                    {\r\n                        PromoteQuerySource(referencedQuerySource);\r\n                    }\r\n```"""
7695,103535019,"b'This line was written before the VS2017 conversion, and now the language makes it so much nicer \xf0\x9f\x98\x89 \r\n\r\n```\r\nif (groupResultOperator.KeySelector is QuerySourceReferenceExpression keySelectorQsre)\r\n{\r\n    action(keySelectorQsre.ReferencedQuerySource);\r\n}\r\n```'"
7695,103536837,"b""Maybe we can do a check similar to the one in binary expression here - if Caller/NullableCaller is qsre of type entity, we don't promote, but otherwise we do"""
7695,103537315,"b""Don't we need `VisitMember` to ensure proper counting though? What if the accessed property is `NotMapped`"""
7695,103538598,"b""You would visit the AccessExpression, just it's done currently, but on top of that peek into the Callers. They *should* be just entity qsres for all the real cases, so for all those cases, the code will behave the same way. But we would also cover our bases for the weird cases (e.g. when the user manually creates NullConditionalExpression)"""
7695,103538602,"b""I'm changing to return `node.Update(newLeft, node.Conversion, newRight)`"""
7695,103538931,"b'Can we possibly revisit that later, if it becomes an issue'"
7695,103539431,"b'> Can we possibly revisit that later, if it becomes an issue\r\n\r\nAre we removing this override fully then? If yes, then its fine to revisit later.'"
7695,103545113,"b""@smitpatel @maumar I'm not sure I understand. \r\n\r\nIf we just remove this override altogether, the base implementation skips visiting the `NullConditionalExpression` entirely. The override here is at least an improvement and makes sure we count the references as we should; we can take it out but then we may not be catching things we should (like `NotMapped` properties.) \r\n\r\nAnd what about the other places that only work with `AccessOperation`, like `ExpressionEqualityComparer` and `SqlTranslatingExpressionVisitor`? That's why I'm asking if it can be revisited later: because places like that aren't doing anything special with `Caller` and `NullableCaller`, and if we're going to put that under a microscope here, shouldn't it be addressed in the other places too? """
7695,103545287,b'Adding comments for this.'
7695,103545306,b'Adding comments for this.'
7695,103545429,"b'Making a change that will make this more terse/compact but not quite enough to justify a method, IMO.'"
7695,103545852,b'Can you try removing this whole part and see how VisitSubquery works out?'
7695,103546070,b'It is being repeated at multiple places in same pattern. It can be simple method `TryGetSelectorFromSubquery`'
7695,103547814,"b""```\r\nTest 'Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.RowNumberPagingTest.Where_query_composition_is_not_null' failed:\r\n\tSystem.InvalidOperationException : Reference equality is not defined for the types 'Microsoft.EntityFrameworkCore.Storage.ValueBuffer' and 'System.Object'.\r\n```\r\n\r\n(Posted under the wrong comment at first!)"""
7695,103548170,"b""@smitpatel It's only this block using this exact pattern, and only two times next to each other, just doesn't seem like enough to warrant a whole separate method..."""
7695,103552658,"b""> the base implementation skips visiting the NullConditionalExpression entirely.\r\n\r\nWasn't aware of that. I assumed it would call VisitChildren in class. Since it is skipping over, lets keep this. @maumar - to file issue on usage of `NullConditionalExpression` (based on our discussion around caller) and link it to #7520 """
7695,103552669,"b""we were under the assumptions that the VisitChildren would get called, which would visit all the nodes. However thats not the case (we special case NullConditional in the base visitor), so this is fine as it is. I will try to come up with some tests, see if I can break it, but this can be done later. Let's leave this method as is for now."""
7695,103553547,b'It is being used many times like line 156 or 237. I suppose this thing is being used at multiple places even outside of this file and a good candidate for extension method. You can leave it as is though. I will update it in future refactoring.\r\n\r\n---\r\nIn reply to: [103548170](https://github.com/aspnet/EntityFramework/pull/7695#discussion_r103548170) [](ancestors = 103548170)'
7695,103560178,"b""I don't like the name either, but can't come up with anything much better. Maybe DemoteQuerySourceAndItsFromClause? Method is not very complicated, so having a bad name is not a big deal. I'm fine with either."""
7695,103566146,b'`DemoteQuerySourceAndUnderlyingFromClause`?'
7695,103567016,b'@tuespetre sounds good to me'
7696,103019701,b'revert the name change'
7696,103019760,b'change to `memberExpression`'
7696,103019850,b'`memberExpression`'
7696,103021765,b'variable name -> outerQueryModelVisitor'
7696,103021812,b'remove null check on qmv'
7696,103021852,b'var name -> outerSelectExpression'
7696,103021935,b'Remove do part of loop by assigning values when declaring variables.'
7696,103023237,b'make inline.'
7696,103024469,b'You may not be able to bind to parent query model visitor if it requires client projection.'
7696,103024612,"b""Is this method being used elsewhere? If not then we don't need to create this method."""
7696,103028465,"b""Why? It's used twice. (See: https://github.com/aspnet/EntityFramework/pull/7696/files/e7e61afd4d65c3c1d158f9bd7911440f10f32148#diff-c0990b2bb9d2ed7c8071a0c4323c01a4R708)"""
7696,103029006,b'CanBindToParentQueryModel should never be true if the parent qmv requires client projection.'
7696,103029886,"b""Inline in the sense, you don't need to declare variables for `column` & `table` just put them directly in constructor since they are not being used."""
7696,103029977,b'Can you point me to the place where we are setting that flag appropriately?'
7696,103030065,"b'There are several other methods (even in this class) that are only used in one place. I feel that the readability was greatly improved by making this into its own method:\r\n\r\n```\r\nreturn TryBindAliasExpression(node, (visitor, binder)\r\n        => visitor.BindMemberExpression(node, binder))\r\n    ?? TryBindQuerySourcePropertyExpression(node)\r\n    ?? _queryModelVisitor.BindMemberToOuterQueryParameter(node);\r\n```\r\n\r\nAdditionally, this method can be expanded on (for instance, to add support for translating access of a grouping key.)'"
7696,103030827,"b'K, thanks'"
7696,103031148,"b'The flag is set by `RelationalQueryModelVisitor.VisitSubQueryModel`, which is called in `RelationalQueryModelVisitor.LiftSubQuery` and `SqlTranslatingExpressionVisitor.VisitSubQuery`.'"
7696,103031857,b'change to `memberExpression` or revert to `expression`?'
7696,103031864,b'Sounds good then.'
7696,103035343,b'no need to set to false. Its default'
7696,103036025,"b'FWIW, When a new query model visitor is created, the flag is set to false. So in the case of client projections we create the qmv in ProjectExpressionVisitor which would be called for client projections only.'"
7696,103036430,"b""This is actually a closure rather than a Func since you are passing value of node into the lambda expression. If you look at the function `TryBindAliasExpression` then you will see the first parameter is never used in its method body. We don't want to create a closure here. Instead change this lambda to take the node as argument and pass the node to it in `TryBindAliasExpression`"""
7696,103044624,b'e -> expression'
7696,103044675,b'Format the doc.'
7696,103044880,b'e -> expression'
7696,103045061,b'memberExpression'
7696,103045092,b'oops'
7696,103045419,"b""huh, wonder why Visual Studio diff didn't show that"""
7696,103045562,b'can we move away from this variable name. ancestor does not specify ancestor of what particularly.\r\nBetter name would be outerQueryModelVisitor (since its not direct parent always)'
7696,103045730,"b""~~Do we need generics here? Does a simple `Expression` work?~~\r\nProbably won't work as binder methods are type specific."""
7696,103045810,b'Generic due to `MemberExpression` vs. `MethodCallExpression`'
7696,103046024,b'Done (also changed `canBindtoAncestor` to `canBindToOuterQueryModelVisitor`)'
7696,103046128,b'function name `TryBindMemberOrMethodToAliasExpression`?'
7696,103046760,b'boundExpression'
7696,103574840,b'Can we name it injectedParameters?'
7696,103580251,b'\xe2\x9c\x94\xef\xb8\x8f '
7696,103592310,"b'add virtual, NotNull annotation and null check on parameter'"
7758,103781386,b'also make predicate private set only.'
7758,103785977,b'I thought of that too but there are too many places that set it for other reasons than combining with an existing.'
7758,103787933,b'I reviewed usages. Not worth removing the setter at this stage.'
7760,104007333,b'Not going to attempt to determine if this is correct... \xf0\x9f\x98\x89 '
7760,104009192,b'No timeout? '
7760,104013835,b'Same as EF6... \xf0\x9f\x98\x87 '
7760,104014890,b'Will add.'
7760,104017744,b'I had no idea what `(?:` meant and had to look it up. (non-capturing group)'
7757,103776388,b'This used to use `Microsoft.Extensions.Internal.RuntimeEnvironment.RuntimeType` but that now returns `CoreCLR` even when running on the `net452` output in the xunit console runner. What I have now is what we used to have before we split the benchmarks out to a separate repo (where the compilation of tests may not have matched the compilation of product).'
7757,103777975,b'Do we need attribute on each method if the class is already marked with it?'
7757,103782902,"b""Possibly not, I'll play around with that after I've got the code merged. I wanted to move it over with minimal changes to start with \xf0\x9f\x98\x84 """
7757,103814850,b'Might be able to get away with just `<TargetFramework>` (no *s*) here if the EF and ASP.NET targets can handle that.'
7757,103814977,b'Might also need to exclude this from non-Windows. @natemcmaster probably knows how to do that...'
7757,103815125,b'Example: https://github.com/aspnet/EntityFramework.Tools/blob/dev/build/repo.props'
7769,104057666,b'Revert this little piece of annoyance that VS has now again started adding for us.'
7769,104057767,b'@bricelam said to add it so that it stops annoying us.'
7747,103786866,"b""Consider having a ConventionScope (or some sugar API) that doesn't batch to avoid having to do this conditional every place."""
7747,103787540,b'Is it OK to Run if an exception is thrown and Dispose happens as part of unwinding the stack?'
7747,103787806,"b'> while (true) [](start = 15, length = 13)\r\n\r\nCould we avoid an infinite loop here by stopping (or at least warning) if this goes on for a very large number of iterations?'"
7747,103788178,"b""We can throw. I don't think a warning will do much of a difference.\r\nIs 65536 a reasonable limit?"""
7747,103788656,b'Will do'
7747,103789386,b'I would hope so...'
7747,103789925,"b""The conventions should be robust enough to not throw even if the model is in a bad state due to an exception. All of our negative test cases work correctly. But in theory we should avoid running them after an exception, though I'd have to figure out how this can be detected."""
7747,103790351,"b""I think it's fine to leave as is unless we discover a real issue with it in practice."""
7747,103795964,b'Is this `CanBeNull` true? Other constructor and setter has notnull'
7747,103796352,b'sort using in all files'
7747,103796690,"b'Oops, the other one CanBeNull as well'"
7747,103796767,b'yup'
7747,104066603,"b'The exception message would be \r\n\r\n> The convention invocations have reached the recursion limit. This is likely an issue in EF Core, please report it.'"
7747,104067200,b'Add a fwdlink for where to report it? @rowanmiller Maybe also suggest to include repro code and version of EF being used--we could include the version in this message.'
7768,104218881,"b""Looks like this isn't needed."""
7765,104250164,"b'we internally refer to this as ""lifting"", please change to IsLiftable'"
7712,103047410,b'Method name should not be find.'
7712,103049220,b'changing to `GetProperties` '
7712,103049486,"b'Not needed. Just use `.Append(string.Join(separator, o))`'"
7712,103049801,"b""Empty should be allowed. (There's no legitimate reason to prevent it.)"""
7712,103049990,"b""`model` can be `null` if users hand-craft their migrations. (i.e. they don't use `Add-Migration`)"""
7712,103050098,b'(same as above)'
7712,103050434,"b'We should just use the property names of the anonymous type. Migrations should always be expressed in terms of the database, not the domain model.'"
7712,103050576,b'Does this match the formatting of the update pipeline? Seems strange to have `VALUES` on its own line.'
7712,103051156,"b'These `null` propagation operators seem a bit excessive. Maybe just `row.GetType().GetAnyProperty(c)?.GetValue(row)`.\r\n\r\nIMHO, if users add `null`, throwing `NullReferenceException` is acceptable.\r\n`GetType()` will never return `null`.'"
7712,103051682,"b""Per the comment in FindProperty, this method shouldn't be needed."""
7712,103052197,"b'Maybe `InsertRowsOperation<T>`? Then `Rows` could be of `T`. But this might cause issues when only some of the values are specified on some rows... (I\'m not sure if anonymous type inference is that good.) For example, would  this work?\r\n```C#\r\nnew[]\r\n{\r\n    new { Id = 1, FirstName = ""Brice"" },\r\n    new { Id = 2,                      LastName = ""Lambson"" }\r\n}\r\n```'"
7712,103052320,b'`IEnumerable<object>` or maybe `IReadOnlyList<object>`'
7712,103052852,"b'Hmm, do most databases support adding multiple rows in a single `INSERT` statement? Is it in the SQL standard?'"
7712,103053035,"b""Don't specify a model."""
7712,103053424,b'(And the column names on their own line.)'
7712,103053598,"b""if `o` is large, the we're back to having a long string (and that's why we use a builder in the first place)"""
7712,103053740,"b""I discussed this with Andriy and we arrived at the same conclusion. Then things like the model can be null since we're not using it."""
7712,103054096,"b""An insert operation with no rows should just be empty. Then what's the point of allowing that? Also, I'll be using `operation.Keys[0].GetType().GetRuntimeProperties()` to get the column names, and I don't want to hit an index error."""
7712,103054406,"b'I\'m not sure using types will work here. What do we do for column names with spaces in them? On `CreateTable` we handle it like this:\r\n```C#\r\nCreateTable(\r\n    columns: x => new\r\n    {\r\n        FirstName = x.Column(name: ""First Name"")\r\n    });\r\n```\r\n...but that might be a bit cumbersome here. maybe we should just do an array of arrays:\r\n```C#\r\n new InsertRowsOperation\r\n{\r\n    Table = ""People"",\r\n    Columns = new[] { ""Id"", ""First Name"", ""Last Name"" },\r\n    Values = new[]\r\n    {\r\n        new object[] { 2, ""John"", ""Snow""}\r\n    }\r\n}\r\n```'"
7712,103055333,"b""It seems to be:\r\n\r\n```\r\nSELECT FROM [Table] ([Column]....)\r\nVALUES (...), (...), ....\r\n```\r\nI'd prefer to have values in different lines, but let's be consistent.\r\n \r\nhttps://github.com/aspnet/EntityFramework/blob/dev/src/Microsoft.EntityFrameworkCore.Relational/Update/UpdateSqlGenerator.cs#L270"""
7712,103056190,"b'Just tried and it won\'t compile because it can\'t find a best type for an implicit array. I had to do:\r\n\r\n```cs\r\nnew[]\r\n{\r\n    new { Id = 1, FirstName = ""Brice"", LastName = default(string) },\r\n    new { Id = 2, FirstName = default(string), LastName = ""Lambson"" }\r\n}\r\n```\r\n\r\nAnother solution is to have `new object[] {...}`, but then we\'d need to do an union on all object property names. What would you recommend?'"
7712,103056409,b'I was following the pattern on [other operations](https://github.com/aspnet/EntityFramework/blob/dev/src/Microsoft.EntityFrameworkCore.Relational/Migrations/Operations/AddForeignKeyOperation.cs#L13). Should I change it anyway?'
7712,103056576,"b""[It's SQL92](https://en.wikipedia.org/wiki/Insert_(SQL)#Multirow_inserts), but I can change it to multiple inserts if that's better."""
7712,103057641,b'Maybe use a Dictionary? `Values` could also be a tuple to get strong-typing across objects.'
7712,103058831,"b""The builder isn't used here for perf. This isn't a critical path. It just makes the API easier to extend. I don't think the benefits outweigh the cost of maintaining this method."""
7712,103059610,"b'Sorry, I mean return on empty instead of throw. Imagine the following when `env` is *prod*.\r\n```C#\r\nvar users = new Rows();\r\nif (env == ""dev"")\r\n    users.Add(""test"", """");\r\nelse if (env == ""test"")\r\n    users.Add(""test"", ""password"");\r\n\r\nmb.Insert(users);\r\n```'"
7712,103060092,"b""I'd be OK putting them on their own line when there's more than one.\r\n```SQL\r\nINSERT INTO T (C)\r\nVALUES ('V1'),\r\n       ('V2');\r\n```"""
7712,103060204,b'(or whatever varient we agree on)'
7712,103060347,"b""My rationale being that this SQL is more visible to users and we don't have to worry about hitting length limits."""
7712,103060467,"b'Hmm, nevermind then. \xe2\x98\xba'"
7712,103060904,b'See my comment below. We may not be able to use anonymous objects.'
7712,103061124,"b""No, I like this better. Providers can override if it won't work. In general we just aim to generate standard-compliant SQL here."""
7712,103061378,"b""We'll have to think about it more. Maybe there's a non-cumbersome way to use anonymous objects and non-CLR-identifier column names."""
7712,103062779,"b'Maybe an optionally chained `Map` method:\r\n```C#\r\n.Map(\r\n    x =>\r\n    {\r\n        x.Property(e => e.FirstName). HasColumnName(""First Name"");\r\n    });\r\n```'"
7712,103063937,b'something like https://www.typescriptlang.org/docs/handbook/advanced-types.html#index-types lol'
7712,103300593,"b'How about\r\n\r\n```cs\r\n// NOTE: we\'ll need System.ValueTuple from Nuget\r\nColumnNames = new[] { ""Id"", ""Full Name"" },\r\nKeys = new [] {\r\n    (2, ""John Snow""),\r\n    (3, ""Arya Stark"")\r\n}\r\n```'"
7712,103337175,"b""I don't think we can use tuples. We need to work in places where C# 7 won't be available."""
7712,104277507,"b'You already know this, but it seems silly to me not to just do this:\r\n\r\n```C#\r\nfor (var j = 0; j < valueCount; j++}\r\n{\r\n    if (j != 0)\r\n        build.Append("", "");\r\n\r\n    builder.Append(_code.UnknownLiteral(operations.Values[i, j]));\r\n}\r\n```'"
7712,104277614,b'I discourage using expression-bodied members in tests since it ruins **Collapse to Definitions** (I use this often when writing and running tests)'
7712,104277700,b'Just `Insert`?'
7712,104277804,b'(same comment as above)'
7712,104277822,b'This might get confusing with composite keys. Maybe we should generate separate `DELETE` statements. Does the Update Pipeline batch like this?'
7712,104277985,"b""This operation's structure doesn't feel right. You have to do too much filtering here."""
7712,104278016,"b""Surely there's code in the Update Pipeline that we can be leveraging for a lot of this..."""
7712,104278065,b'Just `DeleteOperation`?'
7712,104278080,b'`KeyValues`?'
7712,104278097,b'Just `InsertOperation`?'
7712,104278143,"b""As stated above, this doesn't feel like the right structure. Having the values used for filtering mixed in with the values used for updating may be creating unnecessary work on the consumer."""
7712,104278151,b'Just `UpdateOperation`?'
7712,104278184,"b""`protected`? If providers override, they'll probably want to use this too."""
7712,104278258,"b""Don't batch statements in the base relational provider (call `EndStatement` between rows)."""
7712,104278276,b'Add a test that shows updating multiple columns.'
7712,104278296,"b'Well, the parenthesis help with confusion, but it still looks a bit ugly to me. \xf0\x9f\x98\x89 '"
7712,104493900,b'But every single test in this file is written this way. Maybe I can fix all of them or we can open a new issue for clean-up.'
7712,104504047,"b""It seems [`AppendDeleteCommand`](https://github.com/aspnet/EntityFramework/blob/f386095005e46ea3aa4d677e4439cdac113dbfb1/src/EFCore.Relational/Update/UpdateSqlGenerator.cs#L128) is called once for each row to be deleted. But it's the same with `AppendUpdateCommand`.\r\n\r\nYou think the resulting SQL is not clear and we should split the commands, or just fix the code?\r\n\r\n```sql\r\nDELETE FROM [People]\r\nWHERE ([Id] = 1 AND [Full Name] = N'Daenerys Targaryen') OR\r\n      ([Id] = 2 AND [Full Name] = N'John Snow');\r\n```"""
7712,104513084,"b""I'll probably need some help to integrate with that. For now I'm writing my own SQL code as you see above."""
7712,104565216,b'Fine to leave as is.'
7713,104263355,b'What about doing this in RelationalQueryModelVisitor.VisitSelect? I think we get the goodness in more places if we do it there.'
7713,104263504,"b""We don't need to change this, right?"""
7713,104263649,"b'My bad, reviewing this in GH is awkward; will pull the changes locally after rebase.'"
7713,104748516,"b'Hey, you see my earlier comment on this? Can we do this in RQMV.VisitSelect so we can get this optimization at the top level?'"
7713,104752302,"b""Looks like that would make a lot of stuff angry. `QuerySourceUpdater` can't work as intended, top-level seems to complain about an invalid `queryContext` parameter reference, some include-related things fail, and so forth."""
7713,104767300,"b'Some of those are caused by compiling the newShaper below. Once compiled, the delegate can have two issues:\r\n\r\n1) Any qsres that have not been bound yet will never get bound. A solution is to detect this case (there are relatively few) and prevent the optimization.\r\n2) Any references to the queryContext parameter will be invalid because the materializer is no longer connected to the larger expression scope. Solution is to make a new materializer delegate that is additionally parameterized by queryContext, which can then be passed to the delegate in the Shape method.\r\n\r\n'"
7713,104776188,"b""Good call on both of those. It also looks like the query source for the shaper can just be taken from the 'old' shaper (by making the `QuerySource` property public. Doing these three things so far has resolved most of it; I'm still seeing a few issues related to includes but I'm working on it."""
7713,104785905,"b""WRT Includes, it's likely that the AccessorExpression is getting broken. It's fine to disable this optimization when there are Includes as that is being reworked to not use accessor expressions at all. """
7713,104791998,"b'The accessor expression appears to be fine but the `resultType` of the `methodCallExpression` no longer matches it, i.e. by the time it gets to the Includes, it no longer has access to the transparent identifier to make any use of the accessor expression.'"
7713,104792178,b'Question: is this really any kind of optimization for top-level queries anyways? '
7713,104792310,"b'Yep, the accessor expression needs to be in terms of the new type. I.e. the result of the projection.'"
7713,104793013,"b'@anpete ohhh. Need to update the `QuerySourceMapping` when the shaper is created, then.'"
7713,104795532,"b"">  is this really any kind of optimization for top-level queries anyways?\r\n\r\nYes, in the sense that we don't need a client Select. Small optimization, though.\r\n\r\n> Need to update the QuerySourceMapping when the shaper is created, then.\r\n\r\nYeah, or rewrite the accessor somehow.\r\n\r\n"""
7713,104796984,"b""Hmmm. Updating the mapping solved the simple cases but not the complex multi-include cases due to the obliterating of access to the transparent identifier (no way to rewrite the mappings for those since there is 'nothing' to map to after that.) Looks like skipping when there are includes is the way to go"""
7771,104075214,b'`AddToPredicate` is supposed to be a simple function. This logic should not be here at all. '
7771,104078173,"b""I placed this logic here to be consistent with the several other 'simple' methods (and even setters) that use similar logic to ensure that a `SelectExpression` is pushed down into a subquery when appropriate: `set_Limit`, `set_Offset`, `SetProjectionExpression`, etc., but also because it is applicable in several places."""
7771,104250942,b'can we avoid this here? (previous query was better)'
7771,104255271,"b'@maumar, the previous query generated for this test was incorrect but the test was not producing the proper conditions to show how it was incorrect.\r\n\r\nAfter changing the test from `cs.OrderBy(c => c.ContactName).Skip(5).Take(10).All(p => p.CustomerID.Length == 5)` to `cs.OrderBy(c => c.ContactName).Skip(5).Take(10).All(p => !p.CustomerID.StartsWith(""A""))`\r\n\r\nOld query, returns 1:\r\n\r\n```\r\nSELECT CASE\r\n    WHEN NOT EXISTS (\r\n        SELECT [t].[c0]\r\n        FROM (\r\n            SELECT 1 AS [c0], ROW_NUMBER() OVER(ORDER BY [c].[ContactName]) AS [__RowNumber__]\r\n            FROM [Customers] AS [c]\r\n            WHERE [c].[CustomerID] LIKE N\'A\' + N\'%\' AND (CHARINDEX(N\'A\', [c].[CustomerID]) = 1)\r\n        ) AS [t]\r\n        WHERE ([t].[__RowNumber__] > 5) AND ([t].[__RowNumber__] <= (15)))\r\n    THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT)\r\nEND\r\n```\r\n\r\nNew query, returns 0:\r\n\r\n```\r\nSELECT CASE\r\n    WHEN NOT EXISTS (\r\n        SELECT 1\r\n        FROM (\r\n            SELECT [t0].*\r\n            FROM (\r\n                SELECT [c].*, ROW_NUMBER() OVER(ORDER BY [c].[ContactName]) AS [__RowNumber__]\r\n                FROM [Customers] AS [c]\r\n            ) AS [t0]\r\n            WHERE ([t0].[__RowNumber__] > 5) AND ([t0].[__RowNumber__] <= (15))\r\n        ) AS [t]        \r\n        WHERE [t].[CustomerID] LIKE N\'A\' + N\'%\' AND (CHARINDEX(N\'A\', [t].[CustomerID]) = 1))\r\n    THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT)\r\nEND\r\n```'"
7807,104817544,"b""I'll fix those smart quotes in the resx..."""
7807,104818660,b'Consider allowing digits in the parameter names'
7807,104828424,"b""YAGNI. We'll update to fit our needs as they evolve."""
7712,104991562,"b""This could use some refinement. I don't like that the key and column values are split in this API. It makes it less readable."""
7771,105080580,b'@smitpatel this one that @maumar commented on previously'
7771,105080697,b'@smitpatel IIRC this test would also fail without a fix'
7771,105080768,b'@smitpatel this one'
7771,105085285,b'What is wrong with the original query here? The test itself was changed causing different SQL.'
7771,105085505,b'Test changed. Original SQL looks fine.'
7771,105085772,"b""This could potentially fail. Though looking at generated SQL. It doesn't look very good given it has * at top level select. We should have proper column projected out. The reason we never generate SelectExpression with * at top level is you cannot accurately bind the valuebuffer to properties with star projection. """
7771,105161831,"b'I changed the All predicate within the test to demonstrate the issue. The predicate that was used before was hiding the issue. A subquery with Limit/Offset has to be pushed down before adding another predicate.\r\n\r\nEDIT: In other words, if you changed the data in the database so that there actually were some customers with a customer ID that was not 5 characters long, the original query would have produced incorrect results'"
7771,105222298,b'Good catch. It indeed is incorrect query. The modifying `AddToPredicate` does not seem to be right way to fix it.\r\nThis situation arises because of multiple result operators. And it should be fixed in same manner as done in #7578 . i.e. Result operators should be taking care of other result operators which may come before. Do you want to submit a fix for it in `HandleAll`?'
7771,105224495,"b'Yes, do you have any objections to also fixing the `.Skip().Skip()` issue and including the new test cases in the same PR?'"
7771,105225247,b'No objection as long as they are localized in handling result operators.'
7771,105225693,"b'OK, great. Thanks!'"
7809,104840166,"b'I looked at doing something smarter with pluralization of self referencing navs... but it seems like whatever we generate is going to need updating anyway, and what we generate is pretty clear. So I decided to leave them as-is and skip any pluralization.'"
7826,105293764,"b'use ExpressionType.Equal rather than expressionType here, just so its more clear'"
7826,105293901,"b'Expression.Constant(true), since translatedExpression is guaranteed to be bool'"
7826,105302476,b'I actually forgot to submit updated. Will fix in future PR.'
7822,105242338,b'How about overriding `VisitMainFromClause` here?'
7822,105242703,"b""Doesn't work, the `SubQueryFlattener` base class will not hit all of the `SubQueryExpressions` and it won't hit the `MainFromClause` unless its own conditions are met (no result operators, etc.)"""
7822,105245992,"b""You can always override `VisitMainFromClause` apply your logic and if it doesn't work then call base. Question becomes if we want to do this merging in MainFromClause only or on AdditionalFromClause too (later may be better but probably needs some more tests to be added).\r\nWe are already overriding `FlattenSubquery` there you should be getting all subquery expressions."""
7822,105247067,"b""@smitpatel that is what I tried first. It doesn't get all of the subquery expressions, and the `SubQueryFromClauseFlattener` base class won't even visit the `MainFromClause` if there are result operators on the query model."""
7822,105312365,b'@tuespetre - You are right. It does not get all subquery expressions. The dual dilemma of ExpressionVisitor & QueryModelVisitor (which forces @maumar to make recursive visitors)'
7822,105334486,"b'Since we are using Expression/QueryModelVisitor pattern, can you move visiter creation & entry calls to `EntityQueryModelVisitor.OptimizeQueryModel` method. `QueryOptimizer` is a visitor on query model. So it is a stand-alone thing. If we need any other visitor on QMV then we add visitor in optimize query model just like `SubQueryMemberPushDown` or `EntityEqualityRewriting`.\r\n\r\nRest of changes look good to accommodate it. Its really unfortunate that QueryOptimizer is suboptimal at present to deal with such cases.'"
7827,105409941,b'Use `public` (since the type is already in .Internal) and consider renaming to reflect its more general purpose.'
7827,105452921,b'@bricelam Sure. How about `SchemaNamePairKey`? (Obviously `SchemaNameKey` is confusing).'
7827,105454068,"b""lol, I couldn't think of one so I didn't suggest one. \xf0\x9f\x98\x89 Maybe `SchemaQualifiedKey`?"""
7827,105454230,"b""I'm good with whatever. It's internal code too, so keeping it `TableKey` is OK with me."""
7827,105455378,"b""`SchemaQualifiedKey` sounds good to me. I'll go with that and check in. Thanks."""
7822,105461625,"b""Just a side note: can we avoid having such cleanups in the PRs which fixes certain bugs/issues? It makes harder to review when finding what code path actually changed. We generally run clean up on whole code together so that we don't have to review it in detail."""
7822,105464128,b'Want me to cut this part?'
7826,105483447,b'Is `TranslatedExpression` is guaranteed to return bool type?'
7826,105484022,b'updated in #7843 '
7826,105487328,"b""It should be but it's not that clear. I guess it is safer to leave it as is after all"""
7826,105494147,b'I concluded this way:\r\nTransformNullComparison returns either IsNullExpression or Not(IsNullExpression).\r\nIsNullExpression as type hardcoded to bool. Not expression takes type from the inner expression so it have to bool only in this case.'
7843,105482179,b'nit: add newline before return'
7843,105482505,"b'thanks for reminding, it should be changed to base visitor actually.'"
7843,105482631,b'And base returns expression only. :trollface: '
7843,105482835,b'@maumar - Decide what you want? `return Expression` or call base? \xf0\x9f\x98\x9b '
7843,105483011,"b'call base is ""more correct"" ;)'"
7867,105794854,b'Possibly add some filter here too.'
7646,105814742,"b'This line is incorrect. If we are having InExpression with subquery (where Values is null), and if the operand or subquery changes after visiting then we will create a new InExpression with Empty List as Values instead of null. That makes InExpression to produce `0=1` hence incorrect SQL.'"
7646,105815038,b'\xf0\x9f\x91\x8d indeed'
7853,105958492,b'*willkeep* is my new favorite word.'
7874,105999203,b'we should look into optimizing out ```@_outer_Country IS NULL``` part - can you file a bug on this?'
7874,105999405,b'add null check'
7874,105999690,b'catch or safe-guard?'
7874,106000654,b'Ironic! :trollface: '
7874,106000819,b'nit: \r\n\r\n```\r\n=> expression as ColumnExpression \r\n   ?? (expression as AliasExpression)?.TryGetColumnExpression() \r\n   ?? (expression as NullableExpression)?.Operand.TryGetColumnExpression();\r\n```'
7874,106001127,b'#7875'
7851,106003544,b'I think this needs to be removed because it means we never visit children on the NullConditionalExpression.'
7851,106005001,b'Removing this causes failures. I thought @maumar  has work item to handle NCE consistently at all places.'
7851,106005250,b'Fine if it is being handled'
7851,106023179,b'I will remove it from base and move to derived types.'
7772,104065661,"b'This code has been copied and modified from the EntityQueryModelVisitor.IterateCompositePropertyExpression Might be worthwhile to add a ""debug""/""mock"" binding to EQMV. Wasn\'t sure if its worth to add public surface to that class - this approach is sort of a hack, ideally we would fix the binding itself to work for those scenarios. That\'s why I opted for copying the code into a private method that can be removed without issue once a proper fix is implemented. Thoughts?'"
7772,104066984,b'Can we avoid rewrite twice?'
7772,104067246,"b'I can try, but IIRC we were missing some cases if the equality rewrite happens only after nav rewrite'"
7772,104067579,"b'I can split this into individual properties and pass them directly. In earlier iterations there was a boolean state that was shared between query model visitor and expression visitor so passing a reference was needed. Now it can be rewritten, but not sure if it\'s worth - this ""nicely"" encapsulates all the data/helpers that those visitors need. Thoughts?'"
7772,104068006,b'why does nav rewrite depends on equality rewrite?'
7772,104071440,"b'Could the same result be achieved by assigning the appropriate `QuerySource` to `joinExpression` in `OptimizeJoinClause` (assign it the `joinClause`, ~~and then if flattening a `DefaultIfEmpty`, assign it the `additionalFromClause` instead~~)?'"
7772,104080560,"b""@maumar these changes work but keep the 'hairiness' out of `TableExpressionBase`:\r\n\r\nhttps://github.com/aspnet/EntityFramework/commit/6a20802ebe7470dd78b595917ce7f1ef8e5b627e\r\n\r\nIt should be noted that the extra-hair-tastic bit (the `else if` block) is only required because we don't lift all the subqueries we could yet (i.e. lifting `_Select` using a `ProjectionShaper`) and thus the group joins aren't flattened as they could be."""
7772,104086911,"b'No need to pass the state in -- the QueryModelVisitor and the ExpressionVisitor each can have a `public HashSet<IQuerySource> QuerySources { get; }` that they add to. In `FindQuerySourcesRequiringMaterialization`, the resulting sets from all three visitors (the original + two compensating) can be combined'"
7772,104087029,"b'Not much need for this, once inside the `BindMemberExpression`/`BindMethodCallExpression` lambda, there can only have been a single property, so `RemoveConvert()` on `node.Expression` or `node.Arguments[0]` suffices'"
7772,104087367,"b""Shouldn't need to check the result operators -- if it's a subquery bound to a property, you can just promote the selector as a QSRE, using `HandleUnderlyingQuerySources` pointing at a `MarkForMaterialization` method that adds them to the collection"""
7772,104094917,b'good call!'
7772,104095060,"b""Currently some scenarios involving navigation entity comparison is broken if entity equality doesn't run before nav rewrite. We could probably refactor that code by adding some intermediate step between nav rewrite and entity comparison, filed #7773 to track this"""
7772,104097215,"b'is selector guaranteed to be QSRE? Might be safer to just delegate to the requiresmaterialization visitor, but I agree that there is no need to check for result operators - (I think) there should always be one if we end up in this situation'"
7772,104097944,"b""Makes sense, simplifies this code a lot, now that both visitors don't share state"""
7772,104098049,"b""@smitpatel @anpete any thoughts on this? - you guys know this area better than me ;) One thing worth pointing out is that we can't rely on ProjectionShaper optimization to simplify the code, since there can always be client method involved"""
7772,104153640,b'Noting before I forget: The block itself was only needed to make two tests pass: GroupJoin_on_left_side_being_a_subquery and its twin.'
7772,104157567,"b""If it's an entity property access, I would think so (or it's another subquery that returns an entity, which `HandleUnderlyingQuerySources` should handle) BUT now that you bring it up, what about a subquery that selects an entity via a constructor, like `(from c in customers select new Customer() { SingleProp = c.SingleProp }).FirstOrDefault(),SingleProp`? I'm not sure I've seen a test that covers that already.\r\n\r\nEDIT: Thought occurred, and that case wouldn't matter -- because it would return a Customer object, not a value buffer."""
7772,104158280,b'\xe2\x9b\x8f : `if (expression.RemoveConvert() is SubQueryExpression subQueryExpression)`'
7772,104163957,"b'Hold up, new developments coming in'"
7772,105303686,b'why hello there beautiful \xf0\x9f\x92\x96'
7772,105305218,b'@maumar - Is it visitor to visit a visitor? :trollface: '
7772,105306394,"b'This reminds me, we can reuse this in NondeterministicResultCheckingVisitor'"
7772,105449420,"b""Yo @maumar would you mind splitting this into its own PR so it can be merged sooner? I've got multiple places in multiple branches where I'd like to use this."""
7772,105449630,b'Sure'
7772,105456610,"b""Base VisitExtension calls VisitChildren on the extension node. I know we have been inconsistent with this but I'd like to fix that \xf0\x9f\x98\x84 """
7772,105461377,b'@maumar - We talked about it yesterday only. \xf0\x9f\x98\x84 I had implemented a visitor which would apply QueryModelVisitor recursively. Lets discuss about it.\r\n\r\n@tuespetre - PR #7822 can utilize such recursive visitor & detect all subquery expressions but there is one test which is regressing on that due to how parsed querymodel is generated and order which optimizations are applied. If you want to tackle that issue in that way. I do not want you to block you on that so the current changes in that PR is also fine.'
7772,105464909,b'we skip over ```NullConditionalExpression``` in ```ExpressionVisitorBase```. However we do process NullConditional in ```DefaultQueryExpressionVisitor``` so it can be safely removed here'
7772,105478122,"b'> we skip over NullConditionalExpression in ExpressionVisitorBase\r\n\r\nYeah, this needs to change, too. We are breaking the pattern by doing that.'"
7772,105516122,"b'For this reason, I wonder what is difference between `caller` and `nullableCaller` in NullConditionalExpression.'"
7772,105516321,b'#7843  is merged so you can simply this. Can you also post reference where this is being used? (I suppose there is derived class for this else this 2 visitor does nothing other than calling each other. So much Love)'
7772,105516950,b'DRY this conditions with the GroupJoin visitor. You can put it in QuerySourceExtensions if it is used outside of this file. Or private function in this file. This thing basically takes AdditionalFromClause and find the pattern.'
7772,105517064,b'remove these.'
7772,105520657,b'Why did we not require this before and what changes brought this requirement now?'
7772,105520907,b'`PreProcessQuerySource` uses this. Make extension method on AdditionalFromClause. Can also used in GroupJoin visitor if you override VisitAdditionalFromClause method.\r\nName this pattern something good in extension method like `IsMaumerJoin` :trollface: '
7772,105522391,b'This \xf0\x9f\x94\xa5 '
7772,105522494,"b""It was an existing bug, we just didn't catch it because for the relevant tests we have, LOJ and IJ were returning the same results. """
7772,105524410,b'I will do this in a separate PR'
7772,105524444,"b'its relevant for the nested NCEs - nullable caller can be another NCE, whereas caller and access operation will always be normal expressions (methods/member access)'"
7772,105525266,"b""Wrt ```GroupJoinMaterializationCompensatingVisitor``` I need to process GroupJoin clauses, not AdditionalFrom clauses because there can be a groupjoin without select many, and we would not catch those cases (i.e. wouldn't mark them for materialization)"""
7772,105529925,b'test failure?'
7772,105548181,"b'yes, problematic scenario is ```entities.Select(e => (int?)e.Optional.Id)).Sum()``` which we now fully translate to sql. When converting single result element to a collection, the expected element TResult is int? but looking at selectExpression, we think its int (because we nuke all converts when translating). Fix is to look at query model instead which has appropriate typing.'"
7772,105548192,"b""Don't forget Min/Max! :cactus:"""
7772,105548210,b'Can be simplified (only needs to check if HandlesQuerySource)'
7772,105548219,"b""Also wouldn't hurt to fallback via OrElse to base.HandlesQuerySource"""
7772,105548244,b'Should probably explicitly check if the GroupJoinClause is the immediately preceding body clause in the query model '
7772,105799974,"b'I tried that initially, but some queries deteriorate - CROSS JOIN gets converted to CROSS APPLY, where no correlation is present. Will leave as is.'"
7772,105807012,"b""this actually requires query model, which we don't have in some contexts. Currently we are doing this check in the caller code, will keep as is."""
7772,106048812,b'outputType = inputType?'
7772,106049571,b'Anyway to unify all of this inside RequiresMaterializationExpressionVisitor?'
7772,106068728,"b'I implemented them intentionally outside - RequiresMaterializationExpressionVisitor should just find query sources that are reachable from the final projection and/or ones that need to be materialized due to client evals. Those visitors here are just hacks/workarounds for existing issues and once those issues are resolved, they can be removed - without tinkering with the RMEV, which is itself quite complicated.'"
7772,106068875,b'Tracking issues to remove hacks?'
7772,106069963,"b'#7787 is already tracking OptionalCollectionNavigationCompensatingVisitor, will file a new issue to track GroupJoinMaterializationCompensatingVisitor once this is checked in (and 7290 gets closed) - to track the remaining work on groupjoin materialization'"
7878,106035336,b'How about conditional If? combines both return false.'
7878,106045554,"b""I like it! But... I'll keep it the same as the upstream for now."""
7880,106206186,b'Yay!'
7880,106214422,"b'Does anyone know what exact version is this? Is it regular SQL Server or LocalDB, is it RTM or RC1? Curious because that can affect whether [instant database file initialization](https://msdn.microsoft.com/en-us/library/ms175935.aspx) can and will be enabled.'"
7880,106215058,b'`SQL Server 2016 Express`'
7880,106476869,"b'Only `SqlServer` is being used. Remove `All`, `Unit`, `Functional` & `Benchmark` groups until we need them.'"
7880,106477060,b'(Their items too)'
7880,106486805,b'Updated.'
7893,106273395,"b""Maybe it is YAGNI, but what this command does could apply to any SQL Server instance. Maybe have an optional instance name parameter? (please don't ask me how :smile:)."""
7893,106273591,b'nit: -S argument seems to work without the quotes as below. Probably was like this in the stuff I sent you :smile:'
7893,106273772,b'Quotes are needed for PowerShell'
7893,106273959,b'YAGNI \xf0\x9f\x98\x84 '
7893,106275521,b'ok :+1:'
7893,106275726,b'add them in the last two lines then?'
7893,106275920,b'Yes'
7893,106291210,b'nit: Configuring model **database** to grow with default settings'
7845,106326934,"b""can you add more tests? this case doesn't seem to be covered by any of the existing ones"""
7845,106327031,b'anything preventing us from translating more body clauses/result operators? e.g. with Skip/Take people often add OrderBys'
7845,106328638,"b""Do you have an example? An additional from clause using OrderBy().Take() is a lateral join, whereas OrderBy().Take() in the group join is not. WhereClause is the only reasonable thing to bother shifting into the group join clause (and only when Skip/Take/Concat/etc are not present on the group join's inner sequence)"""
7845,106328798,"b""For sure, need to ensure other bases are covered there too (group join's selector must be a QSRE, cannot have any Concat/Except/Intersect/Union/GroupBy, Distinct should work)"""
7845,106330370,b'Hmm.... might punt on this part for now and skip the case altogether. There are problems with query compilation. Will file a separate issue'
7845,106341204,b'Is separate Visitor necessary? This does not seem to be doing anything specific which relates to any kind of state between qmv & ev. This should be part of `QueryOptimizer`.'
7845,106410244,"b""Sounds good to me, checked out `SubQueryFromClauseFlattener` source and it shouldn't hinder anything: https://github.com/re-motion/Relinq/blob/develop/Core/Transformations/SubQueryFromClauseFlattener.cs#L86"""
7845,106411173,"b""@smitpatel scratch that. It's no good because then we miss the optimization on queries after rewriting navigations into them."""
7845,106418227,b'Do nav rewrite before query optimizer ?\r\n'
7845,106422998,b'That causes lots of problems. I think this is a chicken/egg scenario like the entity equality rewriting visitor. We could run it both before and after.'
7845,106429168,"b""@smitpatel I'm going to put together another PR that runs query optimizer before and after nav rewrites so we can review the difference. I think doing so will make it much clearer that we can reliably place this optimization and any other ad-hoc optimizations into the QueryOptimizer in the future."""
7845,106445944,"b'Entity-equality rewrite is not chicken/egg scenario. It is the bug (or bad assumptions) in nav rewrite. Both of them affects different kind of Expressions. EntityEquality should only deal with binary expressions where qsre are being equated whereas nav rewrite should only deal with member access expressions where members are navigation. The deterministic order is to run nav rewrite first and expand all navigations & then run entity equality rewrite to convert qsre to key property access (including new qsre introduced by nav rewrite). There is one tricky step that nav rewrite optimizes navigation key access by writing it in forum of FK property instead of principal key to avoid join (or may not still having join unsure). Though even if nav rewrite does that it should not affect entity equality because there is no qsre comparison anymore.\r\n\r\nThe overall structure of `OptimizeQueryModel` is not very well defined. We should be running all custom stuff like nav rewrite, entity equality rewrite, the new include compiler @anpete introducing, possibly `SubQueryMemberPushDownEV` (which may go in `QueryOptimizer` too) and then run the QueryOptimizer on all of that to generate the optimal QM we can get.\r\n\r\n@maumar @anpete '"
7845,106453268,"b'That may be so with entity equality but `QueryOptimizer` is just going to be better off running before and after the navigation rewrites. There are subqueries that can only be flattened before the navigations are rewritten and there are subqueries that can only be flattened afterwards. Not just subquery flattening but optimizations in general (subquery member pushdown, optimizations like this one, etc.)'"
7845,106487275,b'we have a bug for this - https://github.com/aspnet/EntityFramework/issues/7773 we can add this scenario to the pile'
7845,106571050,"b""we can also do the same for Order clauses - it's maybe not very useful to write orderby in this context but it *should* be safe"""
7845,106572979,"b'this optimization could be done as part of nav rewrite (RewriteNavigationIntoGroupJoin method - we are already in the right place so the bulk of the condition below can be removed, we just need to analyze the body clauses)'"
7845,106573107,"b'I found some issues myself when digging, this area is definitely not a bug-free zone ;) '"
7845,106573258,b'yeah you are right'
7845,106573492,"b'Should the navigation rewriter be responsible for general purpose optimizations like this, though? '"
7845,106574805,"b""Ahh that's right. User could manually write GroupJoin with a filter and we would miss this optimization. Let's keep it where it is."""
7845,106589375,"b""please add test for that (that hits this scenario using manually created groupjoin, i.e. doesn't go thru nav rewrite)"""
7845,106651380,b'Sounds good'
7845,106651627,"b'Added a test and see an issue related to the other query compilation bug I found with additional from clauses. Looks like this optimization needs to run before any subquery flattening; once again, something that should be run both before and after navigation rewriting.'"
7845,106766966,"b""nit: move this bit lower (just before it's called)"""
7845,106767279,"b'I would expect this to be translated to a single query, like so:\r\n\r\n```\r\nSELECT [t].[OrderID], [t].[CustomerID], [t].[EmployeeID], [t].[OrderDate], [c].[ContactName]\r\n FROM [Customers] AS [c]\r\n LEFT JOIN (\r\n     SELECT [o].[OrderID], [o].[CustomerID], [o].[EmployeeID], [o].[OrderDate]\r\n     FROM [Orders] AS [o]\r\n     WHERE [o].[OrderID] > 5\r\n     ORDER BY [o].[OrderDate]\r\n ) AS [t] ON [c].[CustomerID] = [t].[CustomerID]\r\n```'"
7845,106767322,"b""i guess we can address order by in a different commit if thats significant work - it's not like we are enabling some crucial scenario with it, just a nice-to-have"""
7845,106768424,b'ORDER BY cannot be in a subquery without TOP.'
7845,106768553,"b""ok, lets just do the 'where' - sorry for the confusion ;)"""
7929,106765863,"b""Isn't this a breaking change?"""
7929,106767376,b'Yes it is. This is going to dev branch though.'
7929,106770854,"b""Didn't we agree to add some label to PR's with breaking changes - so that we could highlight them all come release time? I can't remember what we agreed though."""
7929,106966920,b'I added labels.'
7929,106973148,b'Thx. LGTM.'
7948,107291510,"b""Overwriting this every time now since it could be from the 1.0.0 tools. We could try and be intelligent (e.g. compare timestamps), but I'd rather just keep it simple."""
7974,107801771,b'Can we move these methods into a separate file or in `AsyncLinqOperatorProvider` ? '
7974,107802219,b'why do we issue this query?'
7974,107802323,b'helper method?'
7974,107802350,b'how is it different from base?'
7974,107802485,b'do we still need legacy?'
7974,107803061,"b""There are a few cases for complex queries where we generate worse queries after this change. Haven't looked deeply into it yet, but something is preventing full lifting for this query."""
7974,107803258,b'should we file a bug to track this?'
7974,107806185,"b'Looks like some stale code, will remove.'"
7974,107806298,b'For a little longer.'
7974,107806348,"b'Yep, will do.'"
7974,107811131,b'consider adding a more complex scenario with coalesce :trollface: e.g.\r\n\r\n```\r\n                var query = from g1 in context.Gears.Include(g => g.Weapons)\r\n                            join g2 in context.Gears\r\n                            on g1.LeaderNickname equals g2.Nickname into grouping\r\n                            from g2 in grouping.DefaultIfEmpty()\r\n                            join g3 in context.Gears\r\n                            on g2.LeaderNickname equals g3.Nickname into grouping2\r\n                            from g3 in grouping2.DefaultIfEmpty()\r\n                            select g3 ?? g1 ?? g2;\r\n```\r\n\r\nit actually does work!'
7974,107815038,"b'DRY it up with MethodIsClosedFormOf, or u wanted to avoid the second methodCallExpression.Method.IsGenericMethod?'"
7974,107815910,b'+1'
7974,107816800,"b""node.Update doesn't work for some cases? (the default implementation from ExpressionVisitor)"""
7974,107817599,"b""Could be worthwhile to create extension method IsNullConstantExpression, this pattern is used in other places also (e.g. member access binding, sql translating visitor). Unless we don't want extension on Expression (base type)"""
7974,107817888,"b""nit: move the comment up, so that it's not in the middle of coalesce expression."""
7974,107819519,b'But having block comment in the middle of binary operator is awesome! :trollface: '
7974,107827591,"b'@smitpatel @maumar These have no sync counterparts and so would prefer to keep them as impl. detail. I have been pondering using partials more for managing nested classes, thoughts?'"
7974,107827647,"b'For the whole block? If so, considered it but will take another look'"
7974,107827696,b'@maumar Did you ever doubt it? :trollface: '
7974,107828017,b'R# \xf0\x9f\x98\x8d '
7974,107828240,b'Checking'
7974,107828354,b'DRYing is fine'
7974,107828385,"b""The lambda's type may change here, which Update does not allow."""
7976,107905397,"b'Not a fan, but I can see the value...'"
7976,107909443,"b""Btw, I wasn't sure if you still need the observable types. Are they replaceable by the ones in `NETStandard1.3`? """
7976,107910114,b'@ajcvickers?'
7857,105548290,"b'Ugh, C#7 came out since I first wrote this'"
7976,107917574,"b""I'll merge the PR in to unblock the rest of my work. You can remove this in a follow up if it is indeed removable. """
7522,98939665,"b'Not that it bothers me too much, but wondering why these where removed? I seem to remember that @anpete created them originally for a specific use case.'"
7522,99064121,"b'I removed them because there is no need for them and there are two comments to remove them after an issue resolved, which is already true.'"
7522,99176348,"b""I think it's fine. It looks like they were created (900bf16dcc) as a workaround for something I'm guessing is no longer an issue."""
7950,107444422,b'`out var resultHandler`'
7950,107445747,b'`out _`'
7950,107445866,b'`out _`'
7950,107446438,b'`out var typeIndexMap`'
7950,107447580,"b'Can these lines be encapsulated into something like `selectExpression?.GetMappedProjectionExpression(member)`? Remove burden of `ContainsKey` from the caller, etc.'"
7950,107448160,b'Thank you \xf0\x9f\x98\xad '
7950,107450389,b'Make `private readonly` field and use methods to manipulate?'
7950,107791690,b'Consider switch..case for clarity here.'
7950,107792222,b'Same here for switch..case'
7950,107792995,b'Braces'
7950,107793151,b'Formatting'
7950,107793424,b'Are you sure you want to use reference equality on _projections here? We typically do SequenceEquals here - same for GetHashCode below - aggregate the hash codes of the elements.'
7950,107794254,b'Might want to review any other possible instances of this.'
7950,107811203,b'Added everywhere needed. Resharper \xf0\x9f\x91\x8d '
7950,108295712,b'nit: add newline  before return #Resolved'
7950,108298631,b'Equals and GHC over collection'
7950,108299289,"b""I don't see Equals implemented on NullConditionalExpression"""
7950,108299356,b'Implement this on NullConditionalExpression'
7950,108299570,b'Polymorphic method on SQL extension nodes? What happens in null case?'
7950,108306653,b'Lets talk in person.'
7950,108311459,b'There are few expressions where Equals in not implemented. We can chat more about it in person.'
7950,108491906,b'use string interpolation'
7950,108492137,"b'nit: newline after {, and before return'"
7950,108552479,b'why fully qualified name here?'
7950,108555900,b'Some auto-formatting may have loved it.'
7950,108563406,b'Implemented `Equals` for all expressions of extension type except abstract classes & SelectExpression.'
7950,108563503,b'For now only this types would need it. By design it should cover all cases and should not require anymore types to be evaluated.'
7950,108568142,b'nit: this can be moved down'
7496,108788950,"b'For future consideration: I think it would be good to revisit the style discussion about inlining Check calls so that expression body syntax can be used. In cases like this, maybe we should err the other way...'"
7496,108791230,"b""Why removing the static on these? (I don't mind either way, but curious on the reasoning.)"""
7496,108791923,b'Consistency with other Default* properties'
7496,108792058,"b'We may need to be more helpful as to what the application actually tried to do in these cases. Like, what did I do that causes the FKs to target the same entity type? Also, I think saying ""delegated identity"" in these messages will translate to ""something of which I have no understanding and will therefore ignore"" when entering the developer\'s brain. So we may need to come up with more of a language to talk about these things. cc @divega'"
7496,108792380,"b'What does ""SameAs"" really mean here?'"
7496,108793168,b'That both would be mapped to the same IProperty'
7496,108802408,b'can use `var`.'
7552,100165704,"b""Maybe this?\r\n\r\n> Configures a relationship where the target entity is owned by (or part of) this entity. The target entity does not have it's own key. It's key value is always controlled by the entity is belongs to."""
7552,100166066,"b'I think the example should be representative of this type of relationship, so maybe `<c>customer => customer.Address</c>`\r\n'"
7552,100166673,"b""That's not accurate. The owned type can be the principal in the relationship between it and the owner type.\r\nThe owner, or more specifically the navigation on the owner, just provides a way of finding the related type."""
7552,100418473,"b""Let's discuss in person \xf0\x9f\x98\x84 """
7552,108796229,"b'> //[Fact] [](start = 11, length = 9)\r\n\r\nWhy are the tests commented out?'"
7552,108797007,b'Why did we used to have this and why do we not need it now?'
7552,108797220,"b""They don't pass without changes to conventions (next PR)"""
7552,108797380,b'(The tests are still valuable as a compile-time check of the API)'
7552,108798823,"b""It allowed to reuse the base implementation.\r\nNow I realized that the public builders shouldn't have much implementation apart from calling into the internal builder, so reusing the same boilerplate code is not worth two virtual calls and a cast"""
7552,108803416,b'null check gone.'
7552,108804866,b'The base method has the check'
7552,108817452,"b'Get the concept (HasAnnotation puts the annotation on the entity type, while HasOwnershipAnnotation puts it on the FK) but not sure it is the best API. Could consider one to be YAGI, or maybe also explicitly name the entity type one to HasTypeAnnotation. @divega @anpete Ideas?'"
7552,108821075,b'I tend to agree with the suggestion but honestly I feel like I need a refresher of the whole thing to have more context.'
8051,109271326,"b""what's reflection for?"""
8051,109272071,b'Removed'
7947,107288218,b'@bricelam Is this ok?'
7947,107320995,"b""Hmm... Maybe add `AND '$(OS)' == 'Windows_NT'`"""
7947,107834696,b'can use `var`'
7947,107835170,b'`foreignKey.DependentToPrincipal?.Name ?? foreignKey.PrincipalEntityType.ShortName()`\r\nWhichever you think is better. '
7947,108809360,b'Can we have parameter name? in `/* */`'
7947,108809637,"b'Even better, it can be not a comment'"
7947,109727201,b'Why was this change needed?'
7947,109727481,"b'>entiy [](start = 62, length = 5)\r\n\r\nTypo'"
7947,109727950,"b'Related to comment on previous PR, we need to come up with some language to talk about this that will be understandable. Probably a design meeting thing. /cc @divega'"
7947,109737165,"b""The property created by convention is now not nullable if the FK is required, but these tests still need a nullable property. (Functionally it's the same, but different SQL is generated)"""
8061,109551360,b'nit: formatting (add newline before ```&&```)'
8061,109551496,b'nit: make indentations consistent'
8061,109552540,"b'add some funky characters to the name that would prevent clashes, just like relinq does for their generated item names (e.g. ```""<set_1>""```) - and add suitable test'"
8061,109553338,b'is constantExpression guaranteed to be of generic type? Otherwise this line will throw. Maybe add defensive check.'
8061,109555228,b'Done. Added check to verify if the type is generic.'
7855,105710795,b'@bricelam Did you check these auto-generated comments are where we want them to be?'
7855,105781889,"b'Yes. But thinking about it more, they may not belong on the model snapshot since users are expected to manually merge conflicts...'"
7855,105782122,b'But we did decide (in the issue) to put them there at one point.'
7855,105783234,b'This does not prevent manual merging. Only stylecop will be quiet \xe2\x98\xba '
7855,109765379,"b'Hard-coded English strings are problematic for localization. Instead of this huge header, can we simplify it to just:\r\n```c#\r\n// <auto-generated />\r\n```'"
7855,109765746,"b""I'm fine keeping it on the snapshot. I seem to remember calling this out when discussing the issue and we still landed on putting them there."""
8061,109774028,b'DRY this with other 3 places in stack.'
8061,109774210,b'Use a better name? Type name'
8073,109803045,b'Simplify.'
8061,109804502,b'For reference #8074 '
8074,109802953,b'@anpete - :trollface: '
8084,110045962,b'those two are the same'
8084,110047378,b'can we use Environment.NewLine instead of \\r\\n to avoid issues in cross-plat testing.'
8084,110059489,b'No cross plat issue here - I added some assertions with the other flavors.'
8062,109574593,b'...'
8062,109574689,b'Can any value in the array be null?'
8062,109983592,b'this should be Assert.Equal still'
8062,109984959,"b""we should either verify contents of optimized query model here, or remove the test altogether - in this form it doesn't provide any value over Queryable_simple test"""
8062,109985772,"b'It is checking that we are logging everything up to an including the QueryModel, just no longer the specifics of the QM itself, which changes often.'"
8062,109986386,"b'In this workflow,\r\nIf the table is SelectExpression we just return the projection but if table is joinexpression enclosing a select expression (which is direct cast. safe?), we lift it from subquery. Why do we not need to lift it in first case?'"
8062,109986872,b'What did change in IncludeMethod args?'
8062,109986971,b'Can DRY this'
8062,110001661,b'do we know why these joins are now performed on the client?'
8062,110003040,b'Can we avoid this? Creating PropertyExpression without property.'
8062,110003516,b'#8054'
8062,110003731,b'Can we get away with having this method? Is there any other way we can correlate inner expressions of AnonymousObject from outside?'
8062,110014830,b'consider changing helper method name to ```IsAnonymousObject``` as welll'
8062,110042193,b'Yes.'
8062,110042210,b'No.'
8062,110042381,"b'Considered it, but I think in this case it always represents a composite key and so is more descriptive.'"
8062,110046120,"b'In the first case we are translating the join predicate and so are binding directly to the join inner sequence query. In the second case we are translating the order by after the join and so are binding ""through"" the join expression, which has been lifted. Let me know if there is a better way here. '"
8062,110046196,b'Pre-pended queryContext parameter - was previously accessed via closure.'
8062,110053750,b'Not specific to this PR but why do we have actual as arg here? we always pass `Sql` as actual.'
8062,110056181,"b'Oh, nice. We should do that.'"
8089,110282902,"b'Forgot to mention the index here. I\'ll make it something like ""The principal end of the foreign key \'{foreignKeyName}\' is supported by the unique index \'{indexName}\' and contains the following nullable columns \'{columnNames}\'...."" and check in.'"
8070,110434454,"b'>_dietReferenceMap [](start = 90, length = 17)\r\n\r\nIf I understand things correctly, we need this so that the same entity instance can be shared by multiple different ""owners"". Is that correct? If so, is it necessary to allow this?'"
8070,110435067,"b""Correct. It's not necessary for owned entities, but it is necessary for DIETs and we decided that all owned entities will have a DIET"""
8070,110435341,b'Why is is necessary for DIETs?'
8070,110435890,"b""To be able to reassign it from one reference to another. Ok, strictly speaking it's not necessary, but I feel it does improve the experience considerably."""
8070,110444311,"b'By re-assign, do you mean if I do this:\r\n```C#\r\ncustomer.Address = office.Address;\r\n```\r\nthen, after DetectChanges, both customer and office reference the same object instance? Does this mean that the same instance can have different key values? '"
8070,110446577,b'I was referring to\r\n```\r\ncustomer.Address = office.Address;\r\noffice.Address = new Address();\r\n```\r\n'
8070,110447849,b'So is this needed only for the temporary state where customer.Address and office.Address are the same instance? Since at the end of these two lines the same instance is not shared anymore.'
8070,110448702,"b'Correct. As a side-effect instance sharing is possible if the PK is shadow, but this is not the goal.'"
8070,110457284,"b'Signing off for now, but think we should probably re-visit.'"
8070,110457866,"b'Perhaps this can be removed if we tracked deleted entries separately, but we would need to ensure old one is marked for deletion first.'"
8103,110468081,"b'Base is always returning true. Either we can simplify it here. Or if we want to safe-guard against changes in base class in future, we should consider adding call to base in MemberExpression also.'"
8076,110084464,b'@maumar Any better place to apply NullConditional?'
8076,110235231,"b'@maumar Think this is just a bug, I had to add this here because for GroupBy, we use the projection expression from the result operator, not the SelectClause. Can you confirm whether I am calling this in the right place, or whether it should be later on in this block?'"
8076,110242822,"b'```\r\nAppend(""return "");\r\nVisit(blockExpression.Result);\r\n```\r\n\r\nOtherwise stuff will get printed twice'"
8076,110253598,b'`Fact` removed? Use skip instead.'
8076,110254280,"b""This should be good, it needs to happen before ```base.VisitResultOperator(resultOperator, queryModel, index);``` 2 lines below, and subquery injection won't change the type, so the ```originalElementSelectorType``` won't be affected by this"""
8076,110257069,b'nit: unnecessary parens'
8076,110258992,"b'why ```StartsWith``` over ```==```? also, use ```nameof (IQueryBuffer.IncludeCollection)```'"
8076,110260295,b'Two versions (async). I technically should be checking for the methodinfos and this was meant to be temporary :trollface: '
8076,110272232,b'Does this mean we were asserting incorrectly before?'
8076,110272266,b'space'
8076,110272793,b'^Online resharper check.'
8076,110273128,b'~Does remove convert work here?~\r\nIt is not even check if its a convert expression. What is it supposed to do?'
8076,110273968,b'Why do we need this conversion?'
8076,110274410,b'Function name is pluralized but taking one arg only. Which is the other querysource?'
8076,110274859,b'better variable name'
8076,110275957,"b""Shouldn't this be 1 level outer?"""
8076,110276343,b'Was this incorrect query earlier?'
8076,110276431,b'Beware of ordering issues on .NET Core'
8076,110276523,b'Why conditional assertion? '
8076,110278534,b'this applies orderings to clonedParentQueryModel and collectionQueryModel. Example InMemory test: Include_collection_on_join_clause_with_order_by_and_filter'
8076,110279429,"b'order is now different, it might be good idea to make the test more deterministic by adding explicit ordering'"
8076,110283342,"b""@anpete this seems like a good spot. In the future we could be smarter about applying NullConditional (only when it's needed) - If we had information about which query source comes from optional navigation chain/groupjoin. \r\n@smitpatel some inmemory scenarios break"""
8076,110284104,b'That was what my question was for. Blanket changes to NCE. Its fine to improve this in future.'
8076,110284156,"b'consider hard cast instead. AFAIU those projections are guaranteed to be wrapped in Convert(..., typeof(object))'"
8076,110284674,"b""consider performing the analysis via Visit() method, rather than in ctor. (we usually don't do much work in the ctors for visitors)"""
8076,110292428,"b'@smitpatel Specifically, since this value can be null and the QSRE is translated to a ValueBuffer, we fail with null ref because we end up binding to TryGetValue over ValueBuffer. I see special code in MemberBinding to deal with some of these cases but it was hard to integrate there. Ideally we would do it during member binding because we already do for BinaryExpression case.'"
8076,110292628,b'@smitpatel Extra parens for clarity!'
8076,110292699,"b""But really it's a tuple."""
8076,110297718,b'There can be multiple query sources of lower priority than the passed one.'
8076,110297765,"b'No, just different.'"
8076,110304668,"b""This shouldn't change again - it's a function of the algorithm."""
8076,110304883,b'I want to remove Convert but put it back if it was there.'
8076,110305044,"b'Yep, bad merge!'"
8076,110305075,b'Will check.'
8076,110305094,b'Re-linq gens different QM.'
8076,110319688,b'Going to leave this as is because this is simpler.'
8076,110320641,b'Still not seeing this. clonedParentQueryModel is referenced in the JoinClause of collectionQueryModel and so it is expected that collectionQueryModel looks like it has changed.'
8076,110321176,b'> Why do we need this conversion\r\n\r\nBecause AnonymousObject ctor takes object[] so we need to box any value types.'
8076,110321449,b'Removed in error.'
7912,106653992,b'@smitpatel @maumar @anpete this block was here only because we have not been running the query optimizer once more after rewriting navigations.'
8091,110256388,b'Can we call this LiftOrderBy to be consistent?'
8091,110256634,b'Add bug no.'
8091,110256697,b':trollface: :trollface: :trollface: '
8091,110256753,b'TODOs. I will file bug and link it here and other places.'
8091,110299880,b'@anpete - Lifted this includes. \xf0\x9f\x98\x84 '
8091,110430387,b'Update comment'
8091,110430813,"b"">Infrastructure [](start = 40, length = 14)\r\n\r\nI think the interface can be internal to, since it's provider-specific code."""
8108,110502245,"b'those were suppose to be testing EndsWith, but were testing StartsWith (copy paste error)'"
8108,110502795,b'Just check here is the `nonParameterExpression` is not `NonNullableExpression`'
8108,110505040,"b'This is causing ambiguity in the meaning of `NotNullableExpression`.\r\n\r\n@anpete @maumar - We need to discuss this in person.\r\nWhat does `NotNullableExpression` mean?\r\nFrom name it means that the expression should never be null.\r\nBut based on its usage around null semantics, \r\nDoes it mean that we should not look inside `NNE` while applying any kind of null semantics?\r\nWhat should we interpret for `NNE` == null for? (perhaps false?)\r\n\r\nOnce we figure out what is true meaning of NNE, we can determine when do we need to wrap something inside it and also if we need to give it different name.'"
8108,110508832,b'Can you factor out a base class for both translators - they both look very similar'
8108,110508841,b'Can you make a base class for both translators?'
7697,111023363,"b'Remove these (and also methodcall) methods, and call appropriate code from main `Visit`.\r\nIt is good to have expression type specific visitors but if they are doing the same task as the main Visit method then it does not serve much value.'"
8143,111237193,b'Do we need to reduce here? It would be nice if reduction only happens during final compile.'
8143,111238327,b'used named parameter for bool types'
8143,111239211,"b""To avoid the need to reduce here we could use a lightweight, reducible marker expression (`SubqueryBoundaryExpression`?) so the query model visitor doesn't try to flatten when it shouldn't. I was thinking about that for `InjectParameters` originally, in order to combine and lift multiple calls to `InjectParameters` up to a spot higher in the expression tree while respecting subquery boundaries."""
8143,111239954,"b""Doesn't shaper knows about the SelectExpression it is going to shape already?"""
8143,111242985,"b""It's fine to reduce here if we have to, was just trying to understand why. So, it's because we otherwise incorrectly lift the subquery?"""
8143,111259186,"b""I'm not sure what you mean. """
8143,111259447,b'That is correct'
8143,111317690,b'Shaper has a way to get SelectExpression but it is pretty indirect. It is fine to use SelectExpression here though we can avoid adding a property in ShapedQueryExpression if we retrieve SelectExpression as we used to do it in current codebase.'
8143,111396550,"b""I don't see any way to get a `SelectExpression` from a `Shaper` -- the `ShaperCommandContext` does hold a delegate that closes over the `SelectExpression` but I don't see a way to get at the `SelectExpression` itself.\r\n\r\nI think the property is good to have because the data relevant to the expression is right there in the expression and you don't have to ask some query model visitor to find it for you. It seems to me that it has been too easy to cram data points into the `RelationalQueryModelVisitor` (`RequiresClient____` properties, `QueriesBySource`, `_subQueryModelVisitorsBySource`, `_injectedParameters`, etc.), which has resulted in a number of methods that don't really have anything to do with visiting a query model but instead give other expression visitors a means of interacting with that data (`TryGetQuery`, `BindMemberExpression`, `LiftInjectedParameters`, etc.)\r\n\r\nWith some careful consideration we could figure out how to represent that data right within the expression tree that we are building. In this case, it would be a step away from `RelationalQueryModelVisitor.TryGetQuery` and `RelationalQueryCompilationContext.FindSelectExpression`."""
8136,111283442,b'Remove extra whitespace here and a couple of places below.'
8030,111445035,b'Just a side question: Where is this used?'
8030,111446348,b'SDK uses it when implicitly referencing `Microsoft.NETCore.App`'
8030,111446847,"b""I believe this is saying: Don't use the version that ships with the SDK KoreBuild downloaded, use the latest."""
8030,111448624,"b""Right, the one is SDK is usually older than the package and doesn't have the fixes quick enough."""
8161,111468706,"b'Instead of commenting out this way, put `ConditionalFact(Skip = ""See issue#7654"")` on the method so it shows up in test logs that test is being skipped. '"
8096,110285546,b'Why this was changed? `AddOrUpdatingMapping` does the same thing. Either we keep the function and use it in all cases (including 1 above) or we remove the function.'
8096,110285760,b'I removed the function as it seemed redundant'
8096,110285949,b'pass directly to function?'
8096,110287031,b'Refactoring gone wrong'
8096,110287116,b'you can use `constantExpression.IsEntityQueryable` extension method.'
8096,111472137,b'DRY to method on QueryCompilationContext'
8096,111472980,b'Can we keep the dictionary private and add accessor methods.'
8096,111473179,b'Should have told you to ignore the old Include code paths. It is all going away :trollface: '
8130,111025101,b'Can you also file issue for me to clean this up?'
8130,111025148,b'netcore for win :trollface: '
8130,111025237,b'This got fixed?'
8130,111027054,"b""No, it doesn't need to be disabled for in-memory."""
8130,111472164,b'Beautiful!'
8130,111473586,"b'Yeah, we should improve this.'"
8166,111506612,"b'nit: `/*assertOrder:*/ false, expected`'"
8167,111523186,b'@ajcvickers - This is change in Specifications project which we ship for provider writers. We need to add virtual to override the test and disable it in SqlServer. Is this breaking change?'
8167,111590516,"b""No, breaking the tests is fine. Provider writers can react to it in their tests. Doesn't impact product code."""
8177,111649183,b'Had to take this dependency to find out os version.'
8177,111649201,b'to import the attribute'
8177,111649276,b'These look backwards?'
8177,111649469,"b""Just so I'm clear, no tests in EFCore.Benchmarks.EFCore will be run on win2008R2 or Win7?"""
8177,111649684,b'code copied from Testing repo'
7861,111837845,b'This should not be required on latest dev now. If it is still required then fine to use. \xf0\x9f\x98\x83 '
7861,111838454,b'Can we utilize `ReferenceReplacingExpressionVisitor` from Re-Linq?'
7861,111838602,b'Redundant override.'
7861,111838777,b'Probably we should not derive from `ExpressionVisitorBase` here. Do we want to visit querymodel inside of subquery expression? De-duplicating those would be covered by `VisitQueryModel` method in the QMV by using TransformExpressions.'
7861,111838819,b'nit: Change parameter name to subQueryExpression.'
7861,111839076,b'can you add a test where `d` is also being used in where clause along with select. We may need to add VisitWhereClause (and check for order by too) in QMV if we can de-duplicate those too.'
7861,111839177,b'parameter name'
8195,111836635,"b""we don't need this condition anymore."""
7861,111838172,"b'Can we change this to `queryModel.GetNewName(""<generated>_"")` so that we generate the table alias appropriately.'"
7857,112027202,b'Any specific reason to remove check on tables count?'
7857,112027514,"b'value being used in all the paths, store in variable before entering the if blocks.'"
7857,112027687,"b'also use different variable name here. Causes bit of confusion with the table count check above, that how did we end up with 2nd table in innerSelectExpression.'"
8133,111078495,"b'need to use Contains here, due to client join ordering discrepancy between .net and core'"
8133,111079340,b'would static but not extension make a difference?'
8133,111083821,b'The brand new `AssertSql` would solve that issue :trollface: '
8133,111086585,"b""It shouldn't, extension method looks like any other static in Linq tree."""
8133,111269509,b'`memberExpression` instead of node'
8133,111269567,b'indent'
8133,111269794,b'indexer with 0'
8133,111281757,b'that returns char'
7856,112099496,"b'DRY it up, perhaps extension method on AdditionalFromClause? (similar set of conditions can be seen in AdditionalFromClauseOptimizingQueryModelVisitor->VisitAdditionalFromClause'"
8198,112014087,b'DRY this with VisitNew'
8198,112014898,b'Why not TryGetValue?'
8198,112020310,"b'based on the complex logic of finding member id in NewExpression (since newExpression.Members can be null), it provides no value to DRY it.'"
8219,112319482,b'use var.'
8219,112319798,b'remove this function.'
8219,112320260,b'Expression body all the things (R# is your friend :trollface: )'
8217,112093357,b'Did not want to delete this and the below as they are part of the public API.'
8217,112093826,b'I will put this in correct alphabetical order.'
8217,112331468,"b""You can delete them or not--all this is changing for 2.0 anyway. Fewer merge conflicts for me if you don't delete them now, and I will do it as part of my change."""
8217,112331869,b'Does this not work if registered as the open generic?'
8217,112332380,"b'@bricelam From what I can tell, in DesignTimeServicesBuilder, ConfigureProviderServices, which indirectly calls this, is called after ConfigureContextServices. This means that any service that has been obtained from the context will then be overwritten if GetProviderDesignTimeServices also tries to add it. So, for example, in this case ILoggingOptions from the context will be overwritten.\r\n\r\nIs this intentional? Would it be better for these services to be TryAdded?'"
8217,112340687,"b'@ajcvickers @bricelam Probably still need the answer to the above, but note: Scaffolding does not call `ConfigureContextServices()`. That only happens if you call `DesignTimeServicesBuilder.Build(DbContext)`. Scaffolding does not have an existing `DbContext` so it calls `DesignTimeServicesBuilder.Build(string)`.'"
8217,112488395,"b'The order is as follows.\r\n* ConfigureServices\r\n* ConfigureContextServices (if using a context)\r\n* ConfigureProviderServices\r\n* ConfigureUserServices\r\n\r\nGiven that, I think `ILoggingOptions` and `IInterceptingLogger<>` need to be added to `DesignTimeServicesBuilder.ConfigureServices` (and overridden by `ConfigureContextServices` when possible).\r\n\r\nThe design is intentional. If a provider needs to replace a default service at design-time, they can. Likewise if a user needs to override a provider service, they can.'"
8217,112504048,b'@bricelam Would it be better to add them to [AddScaffolding()](https://github.com/aspnet/EntityFramework/blob/dev/src/EFCore.Design/Scaffolding/Internal/ScaffoldingServiceCollectionExtensions.cs#L23)?\r\n\r\nAlso how does the call to [AddLogging()](https://github.com/aspnet/EntityFramework/blob/dev/src/EFCore.Design/Design/Internal/DesignTimeServicesBuilder.cs#L80) in `DesignTimeServicesBuilder.ConfigureServices()` interact with this? '
8217,112505601,"b'@bricelam Thanks, that makes sense. @lajones Yes, they should be added to AddScaffolding. With regard to AddLogging, it adds external logging dependencies. These are our own logging abstractions.'"
8217,112524240,b'I was able to get it to work with the generic instead. So I did that. See 2nd commit.'
8217,112525346,b'Have checked in new commit implementing the above. Could one of you sign off please?'
8213,112065791,b'@ajcvickers @Eilon - Just notifying that this file did not license not earlier (in current codebase) if there are any consequences of that.'
8213,112251160,b'Should be fine. Thanks for adding it.'
8213,112290766,"b""If there's ever a missing license in a file, no worries, just add it in."""
8247,112563687,"b'I think the fact that all of these were missing the prefix was just an oversight. It worked because nothing clashed with ""no prefix"". But we shouldn\'t leave it that way. This could affect anyone (probably only providers) who were looking up annotations using hard-coded names, but hopefully people were not doing that but instead using the programmatic way of getting them anyway. Plus this was already a breaking change - so it seemed like the right time to correct this.'"
8249,112739957,b'switch the order so that actual executes first (in case expected has a null ref or something)'
8249,112740590,b'remove'
8249,112745438,"b""Wouldn't you want to see the exception in expected first, so that you don't waste time debugging actual?"""
8249,112746344,"b'if expected runs first and throws, then the product code never runs - in my experience, exceptions coming from expected (in this test suite at least) are mostly due to null refs during nav access, something that is perfectly fine for the product query.'"
8249,112746580,b'ok'
8249,112746807,b'add skip annotation here also? or would that be too much spam in the build.cmd?'
8249,112747048,b'I think Skip is only for tests that are expected to pass'
8249,112747891,b'This can throw null ref'
8249,112756769,"b""Yes and in that case the exception message would be wrong:\r\n An exception occurred while reading a database value for property 'Order.ReplacedOrderId'. The expected type was 'int?' but the actual value was null."""
8249,112759530,"b'No existing tests fails, right? If not, then I think this is OK. We are effectively saying that seeing ValueBuffer.Empty is an error here.'"
8249,112759962,"b'Well we throw in either case, just the exception is different'"
8249,112760174,b'ctor dependency?'
8249,112760590,b'QueryCompilationContext is not in DI'
8249,112762619,"b'Yes, and we are discussing whether that is correct \xf0\x9f\x98\x84 This change asserts that a null coming from the database (incorrectly) never results in ValueBuffer.Empty appearing in the executing query.'"
8249,112763414,"b'Ah, I had assumed that QueryOptimizer was not in DI. Makes me wonder whether having QueryOptimizer in DI is correct as it has state - We have to be careful here \xf0\x9f\x92\xa3 '"
8249,112764139,b'Should we cache this?'
8249,112764536,"b'Sure,  more caching _never_ hurts'"
8249,112783212,b'~~null check?~~'
8249,112783480,"b""We don't need checks on .Internal API"""
8249,112783819,b'null annotation.'
8249,112785372,"b'Actually, I see that your change improves this situation! \xf0\x9f\x99\x8c '"
8249,112785954,b'Filed https://github.com/aspnet/EntityFramework/issues/8256'
8249,112788526,"b""Since this is a relational concept, proper caching would require non-trivial infrastructure changes, I think it's better to do it as part of https://github.com/aspnet/EntityFramework/issues/8258"""
8251,112758947,b'test Truncate (and other math methods) also'
8251,112764732,b'We use `new[]`'
8251,112765667,b'I will check rules and update them.'
8251,112765746,b'We are doing it based on case only. Else it is a complex matching problem with multiple elements on both sides.'
8251,112768187,"b""Truncate is translated to ROUND on SQL, so at least that one should be tested/compensated. I'm fine with skipping the other ones for now, as it indeed would be too much work."""
8242,112561607,"b'@anpete - So now binder does not return same instance. (also removed adding it to star projection because it was not used and current handling of star projection is quite inaccurate).\r\n\r\nSide-effect of this & alias-ing, when you add something to projection or try to get projection index, you need to account for aliased projection. Which seems a decent logic.'"
8242,112561690,b'This file has only code clean up no changes.'
8122,111596338,"b""It's actually intentional that the SetInitializer used here is not saved for use later. The reason is that this may not be the service provider that will be used as the internal service provider going forward, because at this time OnConfiguring has not yet been called. Mostly that isn't a problem because set initialization is done by our internal services, but in the case where some of those services are replaced, this could initialize set using non-replaced services. In this rare case if this is a problem for the app, then the app can just not use this mechanism to create DbSet instances, and this code becomes a no-op. However, if this set initializer is then saved and used later for the Set method, then it makes the problem bigger because now an app is using the non-replaced services even when it doesn't need to."""
8122,111596456,b'Bad rebase resolution?'
8122,111596759,"b'Can we document these explicitly with the ""it\'s internal!"" message? At least for the ones that are internal service contracts.'"
8122,111610196,"b""ok, I'll add a comment"""
8122,111610268,b'yes'
8122,111610369,b'Sure'
8122,112325688,b'Nice comment. :wink:'
8122,112326218,"b'Would it be better to factor out these ""cached services"" into a different class, and then be an IInfrastructure of that? It would mean that users will not see all these implementations, it could be made obviously and explicitly internal, and we could add new ones without changing DbContext. Thoughts? @divega @anpete @bricelam '"
8122,112327784,b'Comments as a Service? :trollface: '
8122,112344036,"b'What is the exact goal of this PR? I feel like without knowing that it is too easy to come up with silly ideas :smile_cat:\r\n\r\nRe having this in a separate class, assuming it matters, would that preserve lazy initialization of the individual services? E.g. would that class be an IInfraestructure for each the service types? Would that mean that you need to jump two hoops to get each service, possibly defeating the purpose of the PR?\r\n\r\nAnyway, I agree this is a concern.\r\n'"
8122,113053387,b'Why is this in Infrastructure instead of Internal?'
8122,113053665,b'Misclick'
8274,113090380,b'@anpete FYI ;)'
8274,113092233,b'Why this one does not use AssertIncludeQuery?'
8274,113092798,"b'those entities are not part of in memory data, and are only used for this one test (copied verbatim from a bug report long time ago). I should probably move this to QueryBugsTests instead'"
8283,113327743,b'Magic number? Make this a provider override-able property.'
8283,113336682,b'missed 125 here'
8291,113566600,"b'Please add a comment that this is a temporary workaround for https://github.com/dotnet/corefx/issues/18997, and should be removed when https://github.com/dotnet/corefx/issues/18997 is fixed.'"
8288,113568633,"b""We should make EventId implement '=='"""
8288,113569140,b'Noun?'
8288,113570065,b'Might be nice to make LoggerCategory<T> implicitly convertible to string'
8288,113570299,"b""Not sure it's worth having these private enums. Could just inline the magic number when creating the EventId."""
8288,113573187,b'Review any payloads that allocate/do work even when logging/diagnostics could be disabled.'
8288,113573810,"b'""to with cref configure"" -> ""with cref to configure"". I think this is in all the other similar classes too. (As is the noun comment by Andrew below).'"
8288,113576860,b'Do we still need the `IInterceptingLogger` since Scaffolding now uses an `IDiagnosticsLogger`?'
8288,113577886,"b'Nit: ""tablename"" -> ""tableName"". Similarly for any other resource using this.'"
8288,113586426,"b""I'm actually not sure what the semantics is supposed to be for EventIds that have an Id but no name when compared to EventIds that have the same Id and a name. The EventId code makes it look like the name is optional, but then the comparison current requires the name to match to compare equal, so it seems inconsistent. I have a not to file an issue on Logging for this.\r\n\r\nI'll do the implicit conversion on LoggerCategory."""
8288,113586749,"b'I did it that way at first, but using the enum helps prevent accidental reuse of the same ID as a copy/paste error. '"
8288,113587003,"b'I have general tried to do this. What would you suggest here? I went for an IEnumerable that is not enumerated unless logging is enabled, which seems pretty low cost. It could be a delegate instead, but not sure that would be lower cost.'"
8288,113587094,b'Yes. IDiagnosticLogger depends on IInterceptingLogger'
8288,113588746,"b'Yeah, we could just decide we are OK allocating in these cases - IIRC we were still allocating delegates in the old impl. Otherwise we need an option to move the enabled check to the call site.'"
8288,113588835,b'Can we just add a test that does the validation instead?'
8288,113589066,"b""That's correct, so in general we are allocating a lot less now."""
8288,113589182,"b""Yep...but I like it like it is. \xf0\x9f\x98\xb8 Let's briefly discuss in the design meeting tomorrow to see what others prefer."""
8288,113589792,b'Should these go away?'
8288,113590308,b'They will at least change as part of #6946. Not sure yet if they will go away completely or not.'
8288,113590413,b'Filed https://github.com/aspnet/Logging/issues/607 on EventId'
8288,113739147,"b""IMO worth adding a comment here (as the above won't show up in a diff review later), e.g.:\r\n```\r\n// New Additions must happen here to prevent ID movement\r\n```\r\n...or make those IDs explicit in the enum to *really* prevent such a thing."""
8288,113740656,"b'Same comment as above - IMO this would be far more resilient to both unintentional breaks and readability with:\r\n```c#\r\nTableFound = CoreEventId.RelationalDesignBaseId + 1000,\r\nTableSkipped = CoreEventId.RelationalDesignBaseId + 1001,\r\nColumnSkipped = CoreEventId.RelationalDesignBaseId + 1002,\r\nIndexFound = CoreEventId.RelationalDesignBaseId + 1003,\r\nIndexColumnFound = CoreEventId.RelationalDesignBaseId + 1004,\r\nIndexColumnSkipped = CoreEventId.RelationalDesignBaseId + 1005,\r\nSequenceFound = CoreEventId.RelationalDesignBaseId + 1006\r\n```'"
8288,113741116,"b'Same description as above, intentional?'"
8288,113741449,b'referenced*'
8288,113741784,"b'Since this is often used twice in a row - memoize it?\r\n\r\nAlso a shorter call path: \r\n```c#\r\n!string.IsNullOrEmpty(SchemaName) ? (SchemaName + ""."" + Name) : Name;\r\n```'"
8276,113248054,b'Nit: I would rename the DB to be something more easily tracked to this test e.g. HiddenColumnTest.'
8276,113248278,"b'Nit: Personally I like the ""comma at the beginning of the line"" convention, but as a team we decided to put them at the end of the previous line instead.'"
8276,113249337,"b""Does this condition just happen to coincide? Or are supporting sequences and supporting hidden columns different things? I'm wondering whether we should create a new condition `SqlServerCondition.SupportsHiddenColumns`?"""
8276,113278007,b'We should create condition for SqlServer 2016'
8276,113299909,"b""@smitpatel I don't think this is just a SQL Server 2016 issue. See bug #5553 about supporting sequences in SQL Azure as well. This could be similar, so I would prefer to keep the flag named for the function, not the version of SQL Server."""
8276,113366528,"b'I will add a new condition - #5553 is getting moot, as Azure DB v11 is being deprecated'"
8276,113366551,b'Will do!'
8276,113366594,b'I will move the commas :smile: '
8276,113371699,"b""Preferable thing is to have flag based on the function. I mistakenly thought that we may end up with multiple conditions. Instead of having a large set of conditions to specify its good to have only one. But we won't hit such issue because this conditions are +ve. Means specify the one which needs to be present."""
8276,113543433,"b""Shouldn't this be false as MemoryOptimized? This is our default connection string for testing and we still use SqlServer2014 which does not support hidden columns."""
8276,113547300,"b'I am confused now - so you use 2016 on the CI (appveyor) and 2014 on what ?? (your dev pcs) - in that case it should be false, yes (it has no impact on the functional tests, though) '"
8276,113548183,b'@ErikEJ - Did not realize this confusion \xf0\x9f\x98\x84 Minimum requirement to build EF repo is SqlServer 2014 (or it could run with older version too may be).\r\nWe use SqlServer 2016 in appveyor because appveyor was failing to start sqlserver 2014 service and build failed always providing no feedback.\r\nThe normal dev work is on sql server 2014 as of now.'
8276,113551856,"b""@ErikEJ @smitpatel Smit is right. I was thinking this was like `SupportsSequences`, but it's more like `SupportsMemoryOptimized` and so should be false by default."""
8276,113554850,b'In the meantime - I have run this test on my dev machine (which has SQL Server 2016) and it works fine.'
8288,113770425,b'@NickCraver We discussed this today in design meeting and I will look at a few options for avoiding breaks.'
8288,113770481,b'Will fix.'
8288,113770507,b'Will fix.'
8310,113805409,b':facepalm: this was supposed to be in `DbContextOperations`'
8310,113806418,b'Fixed in a664dd13d'
8288,113829128,b'Great stuff!'
8300,113603932,"b'I could maybe add helper for MethodCall expressions also, this would simplify this code and potentially safeguard scenarios around converts+methodcalls. Thoughts?'"
8300,113603967,b'is EQMV the right place for those?'
8300,113604121,"b'ESL, any suggestions on making those descriptions less confusing?'"
8300,113608993,"b'I was also thinking of moving this along with IsPropertyMethod, which is used elsewhere and looks especially weird. How about EFPropertyExtensions and make them extension methods?'"
8300,113609020,b'Make them internal :trollface: '
8300,113816638,b'IsEFPropertyMethod to better clarity'
8300,113818435,b'I think Equals should just work now and I suspect we can simplify this.'
8300,113818505,"b'Maybe add a version that accepts Expression or MethodCallExpression, too.'"
8300,113818591,b'Same with the other methods.'
8300,113818758,b'Why do these types differ?'
8300,113840209,b'still broken :('
8314,113846479,b'Should this be `IEnumerable<string>`?'
8300,113981229,b'You tested it on .NET Native?'
8300,113986723,"b'I goofed, will update this in next checkin'"
8296,113593972,b'empty returns'
8296,113594479,b'extra whitespace'
8296,113814275,b'we use this pattern in several places (creating identity queries) - consider adding helper'
8296,113817768,b'cleanup usings'
8296,113828600,b'validate'
8296,113828662,b'derived type with query filter'
8296,113828906,"b'Instead of initializing every time we set filter, can we make this static and pass entity type as argument?'"
8296,113829282,"b'Since this is checking if it is not set on navigation. Does that mean we allow filter on unmapped properties ?\r\nAlso navigation can be absent (in case of multiple navigations in each direction when fluent api configuration is required), so you can set filter in such cases on navigation and then configure relationship, what happen in such cases?\r\n@ '"
8296,113829325,b'@AndriySvyryd '
8296,113829863,"b'Its fine either way, Just object initialization.\r\n\r\n---\r\nIn reply to: [113814275](https://github.com/aspnet/EntityFramework/pull/8296#discussion_r113814275) [](ancestors = 113814275)'"
8296,113830041,b'how about deriving from ExpressionVisitorBase?'
8296,113830076,b'We should move this validation to ModelValidation. The filter will not be used during model building anyway.'
8296,113839554,b'Happy to move to validation step.'
8296,113977454,b'No reason filter ETs are pure CLR ETs.'
8296,113982711,b'CreateAssignment helper method should do the work'
8296,113982764,b'save the object in variable outside foreach? Not sure how much it matters though.'
8296,113983658,b'Lets not use it here. This convert is independent of RemoveConvert.\r\n\r\n---\r\nIn reply to: [113982711](https://github.com/aspnet/EntityFramework/pull/8296#discussion_r113982711) [](ancestors = 113982711)'
8314,114032993,"b'Yeah, I think so.'"
8314,114034315,b'Sounds good.'
8330,114035862,b'Move the `!key.IsPrimaryKey()` clause to the first `if` for marginal perf gain'
8314,114040402,b'Should I call ToArray in the templates or push for IEnumerable all the way down?'
8314,114040686,b'There might also be value in keeping an array to mirror Main and drive home the point that this is an entry point into the application'
8314,114044136,"b'It looks like both [WebHost.CreateDefaultBuilder](https://github.com/aspnet/MetaPackages/blob/rel/2.0.0-preview1/src/Microsoft.AspNetCore/WebHost.cs#L150) and [IConfigurationBuilder.AddCommandLine](https://github.com/aspnet/Configuration/blob/rel/2.0.0-preview1/src/Microsoft.Extensions.Configuration.CommandLine/CommandLineConfigurationExtensions.cs#L21) (which it calls) are `string[]`. Given that, I think we should keep it `string[]`.'"
8314,114044157,"b""I'm fine with keeping an array for that reason."""
8341,114080799,"b'This may be confusing because Customer is an ET.\r\n\r\nHow about something like: ""The Include operation \'{include}\' was invalid. All components of an Include load path must be entity types.'"
8341,114090710,b'Could we say it is because `Item1` is not a navigation property defined in an entity type?'
8323,113996590,b'Hmm this is suspicious... what if it was a customer ILoggerFactory? What should happen?'
8323,113997251,"b'We could allow it to call the ILoggerFactory.AddProvider method and just pragma the warning, then remove it in 3.0.0 when the API gets deleted.'"
8323,114002840,b'What is the underlying change that results in this change being needed?'
8323,114003322,b'https://github.com/aspnet/Logging/pull/605/files#diff-528cfd1fcf044b63339b2b84f3b77f84R28'
8323,114010386,"b""> when the API gets deleted\r\n\r\nThis functionality seems pretty fundamental to a logging abstraction. What's the story going forward? Is the `ILoggerFactory` interface going away in favor of making `LoggerFactory` a public type in `Microsoft.Extensions.Logging.Abstractions`?"""
8353,114383647,b'We might still need these...'
8357,114418811,"b'Maybe just, ""Cannot save changes for...""'"
8357,114420062,"b""That's what I meant to write \xf0\x9f\x98\x81 """
8333,114045891,b'or should I just apply last Cast operator? see #8334 for some more context'
8333,114058365,b'any other operators?'
8333,114441861,b'typo'
8377,114682315,b'@bricelam - VS format code changed this. Does this make any difference?'
8377,114694755,"b'@bricelam - Also tests building code in memory (Design.Tests, SQLite/SqlServer.Design.Tests) failing with the appdomain change. To pass them I am putting empty file for now. Any better way?'"
8377,114698587,"b""It shouldn't"""
8377,114698665,b'Do they only fail with TestDriven.NET?'
8377,114698799,b'I did not try on TD.Net. They failed on command line. MethodNotFound exception for CodeCompilationOptions..ctor'
8377,114699021,"b""Probably conflicting with dotnet or MSBuild's version of Roslyn. Easiest to just use AppDomains so it's isolated and can use the right binding redirects"""
8377,114709697,"b'@bricelam - Last change in this PR \xf0\x9f\x90\xb0 \r\nIn the absence of database, it was looking for the Northwind.sql file inside Sdk\\Testhost folder (not sure why) and somehow it ran fine earlier. Perhaps we packed it always or for local dev box we always had database. I had to update this so that the sql script is found correctly. Is there any better way for this?'"
8373,114649062,"b""there is some overlap between this and EntityEqualityRewritingExpressionVisitor (around comparing to null mostly). Those two could be combined to DRY it bit more, however I found it bit awkward - EEREV explicitly doesn't rewrite navigations (those are suppose to be handled in nav rewrite). Thoughts?"""
8373,114649183,b'Assert result count'
8373,114649385,"b'or should we just not bother with collection comparison, since it cant be perfect and force client eval (at least when we fix MaterializeCollectionNavigation)'"
8373,114650034,b'?'
8373,114650124,b'Can we do reflection based comparison here?'
8373,114650447,b'cc @smitpatel We should change EEREV to handle all of it.'
8373,114650702,b'collections are not supported for DIETs'
8373,114650893,b'Add a comment'
8373,114652465,b'Thanks for fixing one copy/paste error in the comment. But then you introduced this one. ;-)'
8373,114654778,b':trollface: '
8373,114655310,"b""EEREV does not rewrite navigation == null because nav rewrite wanted to do it \xf0\x9f\x98\x9b \r\nEEREV doesn't have any issue rewriting them.\r\n"""
8373,114655914,"b'Merge this code in EEREV, there is nothing specific here, it is just more branching.\r\nIn current dev, EntityEquality does not rewrite, navigation == null (explicitly) & it does not know how to process collection navigation comparison so it does nothing there.\r\nThis code want to relax that to bit more like following\r\n- Do not rewrite reference navigation == null\r\n- Rewrite collection navigation == null or collection navigation comparison.\r\n\r\nIt would be easy to add this processing in EEREV.\r\n'"
8373,114656055,b'nit: Use `Expression result = qsre`'
8373,114656122,b'Merge into one and remove this class'
8373,114656387,b'unused using'
8373,114658589,b'#8254 fixed here?\r\n\r\nThanks for removing skip on #8255'
8373,114664327,b'mistake'
8373,114842144,b'Can this go inline? `out var` is possible.'
8374,114848151,"b'Boilerplate ""internal"" doc comments?'"
8374,114848375,b'Is there an issue filed for this?'
8374,114853863,b'redundant'
8374,114854473,"b'Part of https://github.com/aspnet/EntityFramework/issues/214:\r\n\r\n> Whenever a configuration source of an aspect is changed because it is referenced from another element this reference should be stored in a collection, so if all references are removed the aspect can be removed as well or its configuration source downgraded to what it was previously.'"
8317,114162198,b'Add API doc boilerplate code for internals.'
8317,114162975,b'Why partial?'
8317,114163436,b'Generally not a good idea when these things are localized because it restricts that way expressions can be arranged in different languages. We should just create different full sentences.'
8317,114166433,b'Because R#. Will revert'
8382,114870423,b'Probably a silly question: was this just not needed? Is it because it happens later for the whole class?'
8382,114870779,"b""If it's not deleted the tests will pass but they might not be creating the database, therefore not exercising the code"""
8361,114628527,b'The environment variable APPVEYOR is already set to true. You can just use that.'
8361,114628606,b'See https://www.appveyor.com/docs/environment-variables/'
8361,114637145,b'Try `TargetFramework=` (singular).'
8361,114639631,"b""Second idea: use the binary logger feature I emailed the team about yesterday. Search for the TestProjects target and look so see that the EFCore.SqlServer.FunctionalTests project is correctly invoked with TargetFramework. The binary logger will show you details about property reassignment as well, so you should be able to see what's causing the TargetFrameworks value to be ignored."""
8361,114648052,b'I tried singular first. That also did not work.\r\nI will try logger to investigate further.'
8391,115078742,b'Checking for IsSeeded twice?'
8391,115079046,"b""Yes, so we don't enter the lock every time."""
8386,114925403,"b'Be wary of concurrency issues here. E.g. From the code it looks like setting TestOutputHelper is not thread-safe (not sure if it matters). In general, try to avoid shared state in tests where possible.'"
8386,114933824,b'How about each fixture initializing own instance of TestLoggerFactory? Would that make it thread safe (or fixture isolated)'
8386,114934251,"b'Yep, that is better.'"
8420,115570854,b'inline current alias here.'
8420,115573883,b'currentAlias is being reused later'
8429,115615745,b'need to handle NOT IN as well'
8429,115621458,b'`Not in` uses AND operator and does not suffer from short circuiting issue.'
8408,115330092,b'summary'
8408,115330897,b'Does this work with Composite key case?'
8408,115331510,"b'It should work with just joinExpressionBase (no need to unwrap) But if something is failing due to that, just file an issue for me to investigate.'"
8408,115332437,b'Intentional? '
8408,115360382,"b'Yeah, forcing Equals here.'"
8408,115360772,b'Filed #8412'
8437,116068568,b'Is it OK to not stop the stopwatch? Does it consume resources or anything?'
8437,116069933,"b""It's fine, no resources (it just stores ticks internally)."""
8392,115080200,"b""Sorry this file is so ugly. It's the only way to author it to get what we want."""
8442,116302688,b'Try to see if it can work with just this overload.'
8442,116302789,b'Expression body'
8442,116307705,"b""Only works if passed strings are always interpolated. I.e. start with '$'"""
8439,116102074,b'this thing *desperately* needs a better name'
8439,116328122,b'Can you convert these conditionals to switch statement?'
8439,116328785,b'NullKeyEqualExpression?\r\nNullConditionalEqualExpression?'
7857,116623823,b'add test for this - similar to SelectMany_Joined_DefaultIfEmpty but with .Distinct() or other result op after DIE (also maybe Distinct and then DIE?)'
8454,116540027,b'Just `<TargetFramework>netstandard1.3</TargetFramework>`--no `#if` = no cross-target'
8454,116540306,b'Add an `AppInsightsVersion` property to `build/dependencies.props` and use it here.'
8454,116540911,b'(note the missing *s*)'
8454,116627986,"b"">switch (eventData) [](start = 16, length = 18)\r\n\r\nIt's interesting that we're just using the payload type here. Is it the idea that if a new event is added that uses the same payload type, then it should be automatically handled? Or would we have to filter by event type as well instead?"""
8454,116628191,"b'>IsAsync [](start = 12, length = 7)\r\n\r\nBeen wondering why we treat bools as special and give the property names an ""Is"" prefix?'"
8454,116650229,b'https://msdn.microsoft.com/en-us/library/ms229012.aspx '
8454,116650359,"b""Mostly a result of using nominal types + c# pattern matching - We don't really need the event name (although we do end up sending it to AI)"""
8454,116785375,"b'""Optionally, you can also prefix Boolean properties with ""Is,"" ""Can,"" or ""Has,"" but only where it adds value.""\r\n\r\nDoes it add value?'"
8454,116787910,"b'You could debate that in general, but I think it certainly does for us now because of consistency - I found > 200 occurrences of this pattern in our code base.'"
8478,116852710,b'expression body'
8478,116859268,"b""it's weird that this interface is internal, but the class that implements it (QueryContext) is public"""
8478,116878162,b'It is only consumed by internal components and so I think this is OK.'
8502,117100394,b'Keep them alphabetical'
8510,117363916,b'Expression body? \xf0\x9f\x98\xb8 '
8510,117364105,b'Should we file an issue to get this into net standard?'
8510,117365899,"b""It's in 2.0"""
8458,116359311,"b'We should not need remove convert here at all. It is `SelectExpression` the convert will never be printed out. If we need Convert around the projection, it should be converted to explicit cast otherwise trimmed out. Also this code is specifically used for projections only. NullableExpression are also not needed. A top level projection should never be nullable expression because null semantics are not applicable on it.'"
8458,116388300,"b'should be safe to remove all converts here, right? @smitpatel '"
8458,116581477,"b'It should be. Though thinking about whole thing, we may get issue if we are referencing projection outside and if it contains different type.'"
8458,117306546,b'Can we call BindMethodCall here instead?'
8418,115573733,b'`!IsNullConstantExpression`'
8489,116858725,b'leftover'
8534,117637915,b'Is this right for Core? It feels like an InMemory-specific implementation'
8534,117639445,"b'Yeah, I debated this myself and I think it is a good question. I think you can at least make an argument for it being in Core:\r\n\r\n- Types satisfying this condition are able to be consumed by Core framework code (StateManager etc.) and should just work. I.e. This represents the current set of assumptions made in Core about primitive types. Aside: whether or not IsValueType is accurate enough here we should discuss - we could strengthen this condition by instead checking for IEquatable. \r\n- Less important, but it is often convenient to have a default impl. in Core, particularly for testing.\r\n'"
8534,117639615,"b'Override the registration of ITypeMapper in EntityFrameworkRelationalServicesBuilder so that regardless of whether a service depends on ITypeMapper or IRelationalTypeMapper, they will get the same instance. Something like:\r\n```C#\r\nTryAdd<ITypeMapper>(p => p.GetService<IRelationalTypeMapper>())\r\n```'"
8534,117639660,"b'Thanks, that was missed!'"
8534,117639674,b'Created a related bug (#8537)'
8534,117639707,"b'Yeah, think we should discuss. My initial reaction was the same as @bricelam, but now I am not sure. :-) '"
8543,117791694,"b'Is the ""terminate"" pattern something we have used before, or is this a new concept? Is it something we should add generally across operations?'"
8543,117805502,"b""It's common. It enables two scenarios:\r\n1. Using statements as part of a larger batch. (done here)\r\n2. Appending SQL to the end of statements.\r\n\r\nSo far, we've just done it where needed since it's not a breaking change to add more."""
8567,118071012,b'intentional? '
8567,118072284,"b""Yeah, didn't match project file."""
8567,118074285,b'AFAIK all files in Relational.Specification.Tests are in EFCore.Specification.Tests namespace.'
8567,118076849,"b""Could be but that is not what it says in the project file. We are very inconsistent here and consequently generate a lot of R# warnings about incorrect namespaces. I would like to fix this, @ajcvickers, can you remember if we had decided on a standard convention for test project namespaces? I'm happy with any approach that is consistent :-)"""
8567,118082731,"b""We did decide a long time ago, but we never really implemented the decision consistently. Also, it was a decision based on what all of ASP.NET was going to do, which I don't think is relevant anymore. Happy for us to discuss again and come up with a decision and then implement it."""
8567,118110906,"b'Many of the test projects have ""Microsoft.EntityFrameworkCore"" as the default namespace. I\'m happy to just make this our standard. Thoughts?\r\n\r\ncc @bricelam '"
8567,118111094,b'Sounds good to me.'
8533,118124031,"b'""before"" -> ""after""'"
8441,116528724,b'Fixed. Can unskip once we take a new Core CLR build.'
8441,117378451,"b""It turns out this package version isn't going to align with BundledNETStandardPackageVersion. We're just using `2.0.0-*`. The gatekeeper build will pull this package and mirror it to aspnetcore feeds."""
8441,117378558,b'`netcoreapp1.4` ??'
8441,117378956,b'where did these go?'
8441,117403261,"b""Lol, I suppose it doesn't really matter since it just uses the nuspec. I'll update to a real version though."""
8441,117403298,b'Transitive.'
8441,117403374,b'Thanks. I was wondering what the story was. This gives warnings. Will update'
8441,117528408,"b'xunit.runner.visualstudio has msbuild assets, so I believe it still needs to be referenced in all test projects'"
8441,117557155,"b'I thought so too, but it appears to be working fine everywhere we need it to. \xf0\x9f\x98\x84 '"
8441,117557405,"b""hmm, wonder what they're for then."""
8441,117559800,b'Last time I looked (a very long time ago) I think they were just used to light up the device runners'
8441,117561399,b'I think they just need to be in one project in the solution for Test Explorer discovery to work'
8545,118063378,b'Can `GetService<IEnumerable>()` return `null`?'
8545,118063805,b'?'
8545,118080993,"b""It's never been very clear in the spec--it may depend on the D.I. container being used."""
8545,118081282,b'There are asserts in the context below. But I will add some more code that checks that the asserts actually get hit.'
8545,118082097,"b'Ah, good point.'"
8568,118122373,"b""Note: the above was just moved from `RelationalSqlGenerationHelper` and supports the `GenerateLiteral(DbType)` below which is used by the query pipeline. It's odd for a number of reasons and I don't think it should ever have been in `RelationalSqlGenerationHelper` to start with because what is really being asked for is a mapping from `DbType` -> storeType. But I talked this over with @maumar and the correct fix is more complicated. We decided we'd be better off doing the fix for that issue separately and later."""
8568,118123393,b'Do we still need a special method for strings?'
8568,118126238,"b'The problem was the (dynamic) call. Almost everything can be converted to a string and so a `GenerateSqlLiteral(string)` method could get called when you meant to call one of the other overloads. So, yes, I believe so.'"
8568,118127090,b'Interesting. Which tests failed?'
8568,118127727,"b""I haven't tried it this time - that was just my experience the last time I used `dynamic` - so I recognized the reason the original `RelationalSqlGenerationHelper` code had special treatment for strings and didn't attempt to change it. I can try it out if you like?"""
8568,118128328,"b'Yes, please do.'"
8568,118299544,"b""Tests are fine and I'm unable to repro the problem I remember seeing with dynamic casting - so I'll go ahead and change it."""
8520,117526645,"b'Note, changed from just *Create*'"
8544,117860999,"b'Will rename to `InsertData`, etc.'"
8544,118059731,b'I wonder if we should have overloads for a single key column. We do this in other methods that take key columns.'
8544,118061239,b'Sounds reasonable. @divega?'
8544,118103998,"b'If it is sugar for the common case, sounds great.'"
8544,118109904,b'Updated. Love the terseness!'
8574,118292603,"b'I liked functional/specification tests in their own sub-namespace (obviously, I wrote these \xf0\x9f\x98\x89), but not enough to push back.'"
8573,118159289,b'Should we have a no-arg version that does the guid name by default?'
8573,118174476,"b'Would a no-arg version that generated a random name make it harder to clean up after use? I.e. users would need to create a new service provider instead of just `EnsureDeleted()`, correct?\r\n\r\nFWIW, I filed https://github.com/aspnet/EntityFramework/issues/8548/ suggesting we add back the no-arg version as obsolete.'"
8573,118299247,"b""It's interesting that @anpete is asking for a no-args version that acts like the scoped database, while @divega is suggesting we bring it back as the singleton database. To me this is a good sign that the meaning of a no-args version is always going to be ambiguous, and hence we should probably only have it as obsolete to move people away from it."""
8530,117611794,b'Keep this one. I want to add stronger semantics to it. (i.e. ContextFile and EntityTypeFiles)'
8530,117611810,b'See #7263'
8530,118374290,b'TODO?'
8530,118375398,b'Ah. Thanks for reminding this bit. \r\nWhat should we do with these tests? We have removed function this test was testing.\r\n'
8530,118376539,b'Remove the test'
8592,118525990,b'\xf0\x9f\x91\x8d '
8509,118516910,b'There is code that does this in Migrations too. (Added a comment to #1671)'
8509,118517040,b'Intentional?'
8509,118517807,b'This is WIP. I m creating PRs against this branch and merging them to allow easy rebasing. #8583 will remove this line.'
8583,118401098,b'missing `NotNull` annotation'
8583,118563035,"b'""Please see the warning messages"" should be a resource. (File a general bug to address)'"
8583,118564629,b'\xf0\x9f\x8e\x89'
8583,118564670,b'\xf0\x9f\x8e\x89'
8583,118566623,"b'Were `OnDelete`, `HasConstraintName`, etc. just getting dropped before?'"
8583,118566905,b'\xf0\x9f\x8e\x89'
8583,118567910,"b'Yes. Earlier, it created fluent API only if targeting AK. in all other cases, it generated annotations which swallowed any kind of custom configuration.'"
8583,118568104,b'#8599 '
8585,118512329,"b""This probably doesn't belong here."""
8585,118513223,b'I think keeping these under `Scaffolding` would be more appropriate.'
8585,118513406,"b'This one, however, definitely belongs in `Design`.'"
8585,118514055,"b'Their next question will be, ""Why?"" Something like this might be better: ""SQLite doesn\'t support schemas. The specified schema selection arguments will be ignored.""'"
8585,118514649,b'So to be consistent\r\n`Migrations` namespace will have migration specific code\r\nsame goes for `Scaffolding`\r\nAnd `Design` will have code common to both (more precisely any interaction with PMC/command line)\r\nright?'
8529,117598031,b'added #8528 to track improvement for set result operators'
8529,118098826,b'Can this logic go in materialization EV directly?'
8529,118098976,b'use generate new name as subquery prefix using the querymodel itself to avoid clashes.'
8529,118100789,b'What about `LastOrDefault` or `Single`?'
8529,118104757,"b""The way I think about it is that RMEV should only mark query sources that are truly needed for materialization (present in the final projection or behind client methods). All compensation needed due to bugs and shortcomings should go somewhere else - it's easier to remove them in the future, once the bugs are addressed.\r\n"""
8529,118104950,b'They should be ok because they force client eval (similar to SingleOrDefault that we have test for -Where_subquery_distinct_singleordefault_boolean). Will double check tho.'
8529,118104982,b'Sounds good.'
8529,118615456,b'redundant. It is there in EVBase too.'
8605,118631022,b'Is `property.Builder` unavailable here?'
8605,118745662,b'Fixed.'
8612,118775145,b'`CreateCopyT`?'
8612,118775241,b'Also can we name this something different?'
8612,118775740,b'Is this correct? \r\nWhat if you create a nondefault size ByteMapping and then call CreateCopy on that with same size?'
8612,118780311,b'Why this became protected?'
8612,118785331,"b'Can this just be something like `string.Format(CultureInfo.InvariantCulture, ""{0}"", value);`? If not, should throw an exception? Or be an abstract method maybe using the template method pattern?'"
8612,118785376,"b""Don't get bogged down in the names of things - they'll probably change anyway. This particular one is just a hold-over from my editing - there will end up being just one `CreateCopy()` method - though I'm disappointed I have to repeat it everywhere."""
8612,118785640,"b""This is how the code works right now. I agree it's not very robust - but the copies are only ever made from the default-sized version - so it works, but as I say not very robust."""
8612,118785702,b'Splitting this into a method that external code calls and a template method that can be overridden could be a way to handle the null check in a single place.'
8612,118785816,"b'Because the SQLServerQuerySqlGenerator needed to do:\r\n\r\n```\r\n                var existingTypeMapping = _typeMapping;\r\n                _typeMapping = null;\r\n                // do whatever needs doing - now will get TypeMapping from value, not from _typeMapping\r\n                _typeMapping = existingTypeMapping;\r\n```'"
8612,118786047,"b'> @""yyyy\\-MM\\-dd HH\\:mm\\:ss.FFFFFFFzzz"" [](start = 56, length = 38)\r\n\r\nCould this be factored to not need another class, but to allow the format string to be passed to the base class, or overridden in a template method?'"
8612,118786227,"b'>{ typeof(ulong), new LongTypeMapping(_integerTypeName) } [](start = 20, length = 56)\r\n\r\nULongTypeMapping?'"
8612,118786525,"b'Not following - could you explain? `null` is a valid value to be passed to all the methods - but I wanted to have only 1 place that actually returned ""NULL"".'"
8612,118786531,"b""> //LAJLAJ - shouldn't dbType be DbType.String? [](start = 64, length = 46)\r\n\r\nNope. Things will break if the DbType is set explicitly. We went though a process to get to figure out which DbType values to use, and when to not use them at all. We might have got some wrong, but we shouldn't change this without being sure the change it correct."""
8612,118786706,"b""We shouldn't be seeing any changes in these tests--we should fix the root cause of the DbType being different here."""
8612,118786827,b'That is already done. Unfortunately the string (and not just the format of the `DateTimeOffset`) that is output is different too. That could be changed so that the whole string is the format and then what you say would work (the way above is the way we currently do it).'
8612,118787155,b'Yes. I was trying to avoid having another full set for TypeMappings for the `ulong`|`uint`... set of types but they might be necessary. This was also just a note to myself to investigate if setting up a `ulong` property on Sqlite fails right now.'
8612,118787523,"b""OK. I'll bear that in mind. Though that is putting functionality on the `DbType` getter that was not immediately apparent when editing it / to providers who provide their own TypeMappings.\r\n\r\nI would like to know why the `Guid` one wasn't set though - that seems like it would only ever map to `DbType.Guid`? """
8612,118787902,"b""This is the ambient _typeMapper issue. As you see the value being passed was a `Guid` but the TypeMapping that was generating it had a `DbType` set to `String`. This only worked because string TypeMappings knew how to generate `Guid` literals. That will no longer be the case with the new setup. It's clearer in the other test where the value being passed is `1` but it is nevertheless being treated as a string."""
8612,118788619,"b'Something like this:\r\n```C#\r\npublic virtual string GenerateSqlLiteral([CanBeNull]object value) \r\n    => value == null ? ""NULL"" : GenerateNonNullSqlLiteral(value);\r\n\r\nprotected virtual string GenerateNonNullSqlLiteral([NotNull] object value)\r\n{\r\n    Check.NotNull(value, nameof(value));\r\n\r\n    return string.Format(CultureInfo.InvariantCulture, ""{0}"", value);\r\n}\r\n```'"
8612,118789154,"b""Probably because, for SQL Server, we found the most pragmatic approach to be not setting the DbType unless it was needed.\r\n\r\nCan we factor it in a way that the DbType is not assumed? That is, regardless of what CLR type the mapping is for, the DbType is always passed in the constructor?  I know this seems wrong, but the way DbTypes is used is very provider-specific, so in reality we can't really assume a DbType just because we know the CLR type."""
8612,118786291,"b""We can talk about what should be there finally. But that's just there right now as an error-catcher while I was updating the code - anything except null should have been handled by the parent class - or we are trying to use the wrong value on the wrong TypeMapping - which is a situation I want to spot."""
8612,118790914,"b'OK. I can make the `DbType` not have a default value in all of the constructors.\r\n\r\nNote: as well as the usage of what\'s really a mapping `DbType` -> store type mentioned in #8609, `DbType` is used when creating `DbParameter` - some of that is shared between providers in `RelationalTypeMapping.CreateParameter()` so it would be nice to add a comment to the `DbType` getter along the lines of ""a null value implies xyz..."" so that anyone so sets it to null knows what others will assume about it.'"
8612,118794370,b'OK. That makes sense.'
8614,118788924,b'> A string representing a raw SQL query... '
8614,118790325,"b'To replace in xml docs:\r\n- Summary:  \r\n  > Creates a LINQ query based on an interpolated string **representing** a SQL query.\r\n- Param sql: \r\n  > The interpolated string **representing** a SQL query.\r\n\r\n@ajcvickers feel free to use ""containing"" or ""representing"" or any better idea you might have. '"
8614,118790943,b'Replace in xml docs:\r\n> This overload also accepts DbParameter instances as parameter values. This allows you to use named parameters in the SQL query string -\r\n'
8620,118802692,b'Do we know we will have permission for this query?'
8620,118807898,"b'No idea, but we query sys tables in other places too.'"
8620,118808069,"b""Thought about it more and I think it's fine for code in Migrations that is already doing schema stuff."""
8629,118836106,"b'Nit: Did we ever consider not including CommandType in this case? I believe it will be 0 in not specified, although documentation says default is `Table`, neither is very interesting. Also, do we always log the numeric value or do we log the name of the enum member?'"
8629,118850435,"b""@divega Don't know. We never set it, so it will always be zero, which is not a valid enum value and hence is shown like this. This was done a long time ago--I doubt it was really thought about, but I don't know."""
8637,119204200,b'Duped exception arg being passed'
8637,119205823,"b""Yep. I generally didn't change any of the logger messages that we generate. So where we had the exception in the message format string it is still there. I don't think there is a way to get it into the format string using the LoggerMessage facilities without including it as one of the args, meaning it gets duplicated here. But we could choose to remove it from the message if we wanted to."""
8641,119227830,"b'By convention, `""ConnectionStrings""` is the well-known section to place connection strings in `IConfiguration`. There are already a few things aligning to it:\r\n- ASP.NET Core templates\r\n- The environment variable configuration provider that allows overriding connection strings in this section with connection strings set in the Azure portal \r\n- The `GetConnectionString()` extension method (which could be used in this code)\r\n\r\nI think we should align to this too. That means allowing for `""name=Foo""` instead of or in addition to `""name=ConnectionStrings:Foo""`. '"
8641,119261848,"b'@divega Updated to look in ""ConnectionStrings:"" in addition. '"
8646,119395745,"b'This should be a nominal type, following the pattern of other methods here. Also, consider passing actual IEntityType instances instead of just strings.'"
8644,119235665,"b'Not sure if this should be `Information` or `Debug`.\r\n\r\nFor the tools, it should be `Information`. Not sure about Kestrel and other places...'"
8626,118811190,b'*is* prefixes are discouraged on parameters'
8626,119155894,b'For this to be correct we have to know whether the property is part of a key.'
8626,119160624,b'Why has the HasName() call disappeared? Where is the name being stored now?'
8626,119161832,"b'I find the name of this class confusing as, if I understand correctly, it is responsible for scaffolding all the code, not just the DbContext?'"
8626,119162294,"b'Re the deletions above, what error message do users see if they fail to set these things (or e.g. set them to non-existent paths) now? We spent a bit of time making sure the error messages were useful...'"
8626,119217949,b'git inability to detect file move & broken resharper. I changed it to something else and forgot original name. I will remove is in parameter.'
8626,119218350,"b'At present, ReverseEngineer does not flow enough information to put here directly. This is not correct. (same goes for keyOrIndex being passed as false always). I can set this one as false too for now. We can decide later how to flow the information about key/index/rowversion from database model & make this call accurate.'"
8626,119218431,b'The name is same as default name. It was a bug to scaffold them.'
8626,119219605,"b'I am happy with better name if there is any. This class is an orchestrator to our scaffolding.\r\nI have aligned the name with our command names. While this class is scaffolding all the code not just the DbContext, same way all the code is scaffolded even though we call the command `Scaffold-DbContext`  '"
8626,119220273,"b""How about `ScaffoldingOrchestrator` or `ScaffoldingController` then? (I didn't like `Scaffold-DbContext` for the same reason)."""
8626,119220496,"b""I'm fine with postponing it. Please don't close the issue until it is fixed."""
8626,119220724,"b'Good catch, but I would like to have at least one test where we do generate it because it is different from the default. Can we arrange that somehow (e.g. rename a PK or two in the E2E.sql file)?'"
8626,119221282,b'Added comment https://github.com/aspnet/EntityFramework/issues/8594#issuecomment-305015152'
8626,119221520,"b'@bricelam @ajcvickers - Name suggestions? I am fine with any name. as long as it conveys meaning.\r\nAfaik, migrations have MigrationScaffolder.\r\n'"
8626,119235402,"b'My two cents: \r\n- Consider the word ""model"" to convey both the `DbContext` and the types\r\n- Not sure this is comparable to `MigrationsScaffolder`. At first glance it looks like that one is doing more of the work.'"
8626,119235784,b'`MigrationScaffolder` adds a new migration. (actual runner of `Add-Migration`) is it something different @bricelam ?\r\n\r\n`ModelScaffolder` sounds good to me.'
8626,119239688,b'I changed it to false.'
8626,119240673,"b'These were removed in other PR which was already approved.\r\nAs explanation,\r\nIn current codebase, above messages are thrown from `ReverseEngineerConfiguration.CheckValidity()` (I am talking about namespace/project dir/connectionstring).\r\n\r\nWe create RevEngConfig object in this class https://github.com/aspnet/EntityFramework/blob/dev/src/EFCore.Design/Design/Internal/DatabaseOperations.cs\r\n\r\nBased on the annotations in the class, none of those properties will ever be null. If they will be then we will throw long before we reach at validation check.\r\n\r\nThe only way to get those exception is user passing invalid Config object in ReverseEngineerGenerator.GenerateAsync function. But we have removed the config object and added those properties as parameter. So for our normal UX from PMC/cmd, the values will be proper. The only way exceptions will arise is when user explicitly pass null to parameters marked as not-null and I believe it is fine to just throw argument null exception in that case.'"
8626,119241796,"b'OK. Have a check what happens if you fail to enter/enter bad info at the command-line. If the error you get back is sufficient to help the user figure out what\'s wrong and fix it then so be it. But if they just get some generic error that\'s along the lines of ""something went wrong"" then we really tried to be more useful than that with the error messages.'"
8626,119243226,"b""I checked codebase.\r\nRootNameSpace -> we take from command line if passed else it will be same as AssemblyFileName of the assembly\r\nProjectDirectory -> Use command line arg or take the current directory\r\nSo we will never have incorrect values for above unless passed wrong by user. \r\n@bricelam  can tell what would we throw because it is not specific to scaffolding but rather any EF command.\r\n\r\nConnectionString is required arg in scaffold command, if user don't provider it then we show error as it is required arg missing. which is self-explanatory."""
8626,119258431,b'ModelScaffolder sounds good.'
8626,119260221,"b'Add-Migration code basically looks like this:\r\n```C#\r\n// Generate the code\r\nvar migraton = migrationsScaffolder.ScaffoldMigration(name, namespace)\r\n\r\n// Write the files\r\nreturn migrationsScaffolder.Save(migration, directory)\r\n```\r\n\r\n+1 for `ModelScaffolder` here'"
8626,119260792,"b'Should only need to replace ""core"" design-time services in the provider, not re-add them.'"
8626,119472807,b'Updated.'
8660,119511341,b'This warnings are at present not happening. They were happening during visiting type mapping (which is not task of that function). They will come back when we introduce annotation handling (coming in very next PR).'
8660,119523652,b'\xf0\x9f\x8e\x89'
8660,119523746,b'\xf0\x9f\x8e\x89'
8631,118853602,"b'@ajcvickers Re your comment about requiring `DbType` on all the constructors. The 6-arg constructor below appears on every TypeMapping and that can always be used to specify the `DbType` if needed. But I found that I needed to pass in the `DbType` only for any `DateTime` or `string` type mappings. For all the rest there was only 1 suitable choice of `DbType`. So for the ""convenience"" constructors like the above I decided to not have it. Let me know if you strongly disagree though - I can put it back the other way, but I was always passing the same thing so I thought this was better for the ""convenience"" constructors.'"
8631,118853768,"b'I\'d like to throw here, but can I get opinions about the type of exception?\r\n\r\nYou should never reach here (we don\'t in any of our tests). If you do it\'s a sign that your provider has set up a TypeMapping badly.\r\n\r\nWhile we could just always return ""NULL"" or we could just do `ToString(CultureInfo.InvariantCulture)` on whatever is passed in, that looks like it might lead to data corruption to me: any non-null value should have been handled by GenerateNonNullSqlLiteral() in whatever your current TypeMapping is. So I\'d prefer to throw to alert the providers (and their users) to what\'s going wrong.'"
8631,118853842,"b""I'd like to rename these to e.g. `_unboundedString`, `_keyString`, `_unboundedAnsiString` etc as in `TestRelationalTypeMapper`. Any objections?"""
8631,118856685,b'Is value known to be non-null?'
8631,118856702,b'Consider conditional operator and expression body.'
8631,118856911,"b""I don't think that there should be any place where we specify a DbType in our provider-agnostic code. I think that the DbType should be null by default for any type mapping. Then if SQL Server, or some other provider, needs to specify a DbType that should be done when it is constructed, in the code for that provider. In other words, I think we should maintain the previous approach which is that DbType is null unless some provider decides to explicitly set it."""
8631,118857065,"b'It seems that many of these subclasses do the same thing here--that is, use string.Format (or something that can be replaced with string.Format) to generate a value, but with a different format string. I wonder if we encapsulate this into a common class, then we will be able to remove a lot of these subclasses.'"
8631,118857233,"b'ToString(CultureInfo.InvariantCulture) seems like a reasonable default here. It seems fine to say that this is what this method does if there is no override. In other words, provider code is not required to override this unless it needs to do something different for the literal. Maybe this could be combined with a string format as a constructor parameter at this level such that many types will not need to override this?'"
8631,118857369,"b'Note sure the generic is needed. I can see how it is nice in some places, but on the fence as to whether it really adds enough value.'"
8631,119150831,"b""OK. I think they're useful. But I'll put them back the other way."""
8631,119151003,"b""I'm going to go ahead and do this since I haven't seen any objections."""
8631,119151495,"b""Good catch - we'd get an `NRE`. There is one case where it is not guaranteed so I'll fix to just return `_typeMapper` in that case. (It shouldn't matter which one we use as all TypeMappers know how to respond to a null value.)"""
8631,119151522,b'Will do.'
8631,119153149,"b""Yes, we can do that. BTW do you know why the relational (i.e. non-provider specific) TypeMappings for the DateTime types return `TIMESTAMP '...'`? The addition of the `TIMESTAMP` literal seems odd."""
8631,119153558,"b""I liked it as it helped produce compile-time rather than runtime errors. I've now found all of the compile-time errors I need for below, but it might be useful in the future when we or provider-writers produce new Type Mappings for other types."""
8631,119155973,"b""@lajones re `TIMESTAMP '...'` notation, it is a SQL standard thing. It can be used for literals in several common databases, e.g. MySQL and PostgreSQL, but doesn't work in SQL Server. The latter even assigns a completely different meaning to the `TIMESTAMP` type from the standard. """
8631,119163433,b'@divega Good to know. Thanks!'
8631,119228278,"b'While this is micro-optimization perhaps, but we should either move this outside of if or add better comment.\r\nWe are not resetting the type mapping but we are setting it as per operation.StartValue, which is long.'"
8631,119233206,"b'I originally had it outside, but then we regen the TypeMapping even if it was the correct one to begin with. I can change the comment to ""Set the typeMapping for use with operation.StartValue below"" if you like?'"
8631,119233478,"b'Hence ""micro-optimization"" \xf0\x9f\x98\x89 \r\nI am fine with just updating comment. So that at least it becomes clearer why we update it and why we use typeof(long).'"
8631,119234144,"b""Yeah - but I'd have had the complaint the other way around if I hadn't done it. I thought the comment was clear but I'll rephrase as mentioned above."""
8631,119263715,"b""Why did this change from `int`? I don't think we should change it, but if we do, this should be `nchar`."""
8631,119397380,b'Overriding methods should not have `[NotNull]` attributes. These only go where the method is defined--in the interface or base implementation of a method. R# will show them grayed out here. '
8631,119398189,"b""Agree with @bricelam This isn't a string mapping, it's a numeric mapping."""
8631,119401811,"b""Agree on `nchar` vs `char` comment. I don't understand the rest though - why do we want to map to an integer when we have a SQL Server data type which maps directly to a single character?"""
8631,119401834,b'OK. Will fix.'
8631,119402774,"b""@ajcvickers I'm in the process of removing this. Let me know if my comment above changed your mind."""
8631,119403271,"b""I'm fine with leaving it or removing it. Up to you."""
8631,119407937,"b""OK. I'll keep it then - since I found it useful. Thanks."""
8631,119493900,b'This constructor seems unnecessary because bool mappings can never be Unicode or have size.'
8631,119494101,b'Remove Unicode facets. Maybe collapse into one constructor with default values?'
8631,119494199,b'Not needed for same reasons.'
8631,119494272,b'Remove size params.'
8631,119494306,b'Not needed for same reasons.'
8631,119494343,b'Not needed for same reasons.'
8631,119494462,b'Not needed for same reasons.'
8631,119494490,b'Not needed for same reasons.'
8631,119494542,b'Not needed for same reasons.'
8631,119494569,b'Not needed for same reasons.'
8631,119494614,b'Not needed for same reasons.'
8631,119494663,b'Not needed for same reasons.'
8631,119494767,b'Should this be protected?'
8631,119494822,b'Expression body?'
8631,119495085,b'Is this override needed?'
8631,119495124,b'Not needed for same reasons.'
8631,119495145,b'Not needed for same reasons.'
8631,119495210,b'protected?'
8631,119495236,b'Expression body?'
8631,119495254,b'Not needed for same reasons.'
8631,119495279,b'Not needed for same reasons.'
8631,119495298,b'Not needed for same reasons.'
8631,119495310,b'Not needed for same reasons.'
8631,119495420,"b""We generally don't have doc comments like this on internal classes, but doesn't matter much."""
8631,119495774,b'Can these now be moved inline? Or are the referenced elsewhere still?'
8631,119496028,b'Is the null needed here? Does (or can) the parameter have a default?'
8631,119496108,b'Do we know why this changed?'
8631,119509586,b'They are referenced in a couple of places.'
8631,119510953,b'Will do'
8631,119511030,b'Will investigate - will remove if not needed.'
8631,119511894,b'Will do.'
8631,119511906,b'Will do.'
8631,119511921,b'Will do.'
8631,119512884,b'Updated'
8631,119514189,"b""Because DbType.String is the default (for SQL Server) if you don't specify a parameter type. But for SQL Server we now specify that properties of type DateTimeOffset now correspond to parameters of type DbType.DateTimeOffset. Is this wrong? I know we're not specifying in Relational but this is SQL Server and I thought it was right to be specific."""
8631,119652069,b'Can you explain a bit how this is needed?'
8631,119652435,b'Okay. '
8658,119509550,"b'Will the part about ""and a service provider"" stop being accurate when you address #8659?'"
8658,119509872,"b'I figured we can re-write the message as it evolves. I was expecting to still say this, but add an ""or"" clause every time we add a new way of doing it. :-) Might be better to have a fwlink and a doc page?'"
8658,119513531,b'@ajcvickers here it is: https://go.microsoft.com/fwlink/?linkid=850912. '
8661,119653733,b'Check.NotNull'
8678,119759361,b'I am inclined to keep the name `escapeCharacter` even if we change the type.'
8678,119759489,b'cc @ajcvickers @anpete '
8678,119759743,"b'Yep, keep the name.'"
8678,119765597,b'OK. Will do.'
8675,119752679,b'Should this be `IsEntityTypeWithDefiningNavigation`?'
8675,119753878,"b""It looks strange to me since it's called on the model."""
8675,119757584,b'`Has` sounds more appropriate since it is asking model - do you have ~DIET~ with this type'
8675,119759089,b'Ok'
8677,119751633,b'Magic :trollface: '
8677,119751691,b'Older versions use `Red`; newer ones use `DarkRed`...'
8677,119764731,"b""lol, don't tell the NuGet team..."""
8677,119772421,"b""@ajcvickers Are you ok with this? If it ever breaks, we'll just fallback to `DarkRed`."""
8669,119743131,b'Might be worth having a base type that returns `false` for everything.'
8669,119743768,b'\xf0\x9f\x8e\x89'
8669,119744055,b'Intentional?'
8669,119744258,b'\xf0\x9f\x8e\x89 '
8669,119746848,b'Yes. The annotation was always set but we need to determine when to generate fluent API for it (true/false) both since conventionally PK is clustered'
8669,119773619,b'I will file an issue for all the bugs/missing pieces this whole change introduces.'
8669,119774394,b'Done'
8676,119773260,b'File an issue to remove all logging from Design. `IOperationReporter` should be used instead.'
8676,119773521,b'Will do. \r\nSorry these commit got bit messed up since I am in process of cherry-picking commit since rebase was disaster.'
8676,119773975,"b""No worries; I just looked at the commit which I hand't reviewed yet."""
8677,119900244,b':shipit:'
8680,119773618,b'File an issue to add interfaces and dependency objects to these where applicable.'
8680,119788582,b'#8691 '
8684,119772181,b'Optional: Update the doc comments.'
8684,119783330,b'changed'
8684,119783437,b'do we do processing when annotation value modifies? In that case this should be changed otherwise set/removed is also fine.'
8684,119783471,b'changed?'
8684,119907088,"b'This one is special, because it also runs when the ConfigurationSource for principal end is changed, we should probably split it into two'"
8684,119916355,b'I was also wondering the splitting part of ModelBuilt & ModelInitialized convention. It may be good to align them but if they are similar kind then probably we can keep differently named same interface perhaps.'
8684,119916671,b'They need to be separate so that both could be implemented in the same class'
8681,119763219,"b""unrelated change - it's needed to make MaterializeCollectionNavigation async. I might not get around to doing this for 2.0, but this API change helps doing it post 2.0"""
8681,119763574,"b""we could capture lastNavigation here instead and gen the GetCollectionAccessor().Create() code. I can't come up with easy way to avoid referencing this constant altogether. Thoughts? Do we even care?"""
8681,119764779,"b'just realized its internal API - I can revert this. No harm making this change tho, lmk'"
8681,119912898,"b'alternatively, we could make ProjectCollectionNavigation expression, to capture this '"
8681,119915884,"b'ideally, we should be tracking 6 items, but customer is also tracked as a side effect of using include pipeline. Will add issue for this'"
8701,119953099,"b'Do we have a provider service that can go from connectoinString to DbConnection? If so, we should provide a base implementation that uses it so the provider just has to implement the one that takes a DbConnection.'"
8681,119956472,b'I would revert for now.'
8700,119957046,b'Why?'
8700,119958977,"b""Everything else in the assembly is. We did it for two reasons:\r\n* It's an app, not a library\r\n* You used to see the public types when the package was installed into a .NET Core project. (This doesn't happen any more)"""
8708,119967172,"b'We want the word ""NULL"" in only 1 place (the base class) - that\'s why we have this setup.'"
8708,119967650,"b'At present it is already at multiple places. Its in RelationalModelValidator, Query SQL gen, NullMapping etc.\r\nThere does not seem to be any value is making 1 place if we are not doing across the board.\r\n'"
8708,119968156,"b'Sorry - I disagree. I think we _should_ do this across the board - so no need to make it worse here. Though actually I think the best solution would be to have a constant somewhere set equal to ""NULL"" and just refer to that everywhere. If you raise a bug to do that then this is OK.'"
8708,119969763,"b""I still don't understand why we even have this override. Doesn't it do the same thing as the base class?"""
8708,119969942,b'Converts value to type `T` rather than object. I am uncertain if it is required.'
8708,119971659,b'It is required. I did some investigation today and it turned out the problem with not having the cast to `T` was to do with Enums. If you just use the base class implementation of `GenerateNonNullSqlLiteral()` then Enum literals come out as their string representation instead of their integer representation. This way it automatically casts them to the correct `int`/`long`/... value.'
8708,119973991,b'Kept the override for now.'
8717,119978462,b'Can we avoid using the word constraint to describe the case in which no unique constraint will be created in the database?'
8717,119978465,b'Idem'
8717,119990815,b'Done.'
8709,119969312,"b'ended up keeping this change - we need to produce this call in the ProjectCollectionNavigation, and this change makes the call bit easier (no need to specify the unnecessary argument).'"
8709,119975091,b'how about overload?'
8709,119975299,b'include in using'
8709,119975373,b'AddRange maybe'
8709,119977331,"b""ICollection doesn't have it."""
8709,119977535,"b""can't - there is already using for NavigationExtensions (the one in Core)"""
8709,119979283,b'Check.NotNull?'
8709,119979301,b'Add QCC.AddAnnotations method?'
8709,119979316,b'Move static fields to top.'
8709,119979322,b'Check can be removed for Internal class.'
8709,119979329,b'Use property initializer'
8709,119979497,b'This check needed or will be handled by BindNavigationPathPropertyExpression?'
8709,119979537,b'This means we end up doing model binding twice for the nav path. Perhaps add a new ctor for this pre-bound case?'
8709,119979550,b'querySource.ItemName for parameter name?'
8709,119979562,b're-use qsre from above.'
8709,119979573,b'Resolve the collection accessor at compile time'
8709,119979590,b'Why prune?'
8709,119979691,b'This can go away anyway if we eagerly resolve the collection accessor at compile time.'
8709,119979725,"b'for cases when there is result operator at the end, e.g customers.Select(c => c.Orders.Count())'"
8709,119979771,b'What about Select(new {  context.Customers.Select(c => c.Orders) })'
8709,119980107,b'removed'
8709,119980677,"b'you mean, to resolve it only when compiling accessor body Expression (rather than statically when type is created)?'"
8709,119981087,"b""that wouldn't get optimized, so we would produce N+1. Pruning at subquery also handles all composition cases (customers.Select(c => c.Orders.Where(o => o.Id >5)). I would rather keep it strict and simple for now, and deal with it properly when we tackle the composition case."""
8709,119981408,"b'Sounds good, but may be easy to only prune when SQ MFC is a nav?'"
8709,119983335,"b""that works as far as the QM rewrite is concerned. However currently include pipeline doesn't work for qsres inside a subquery (IncludeReplacingExpressionVisitor needs to TrasnformExpressions inside  VisitSubquery). On top of that, there seems to be some more issues - the include QM fragment is partially evaluated on the client."""
8709,119988630,"b'OK, file an issue.'"
8709,119988695,b'Call GetCollectionAccessor in the compiler and bind the result into the compiled query as a constant.'
8709,119992069,b'filed #8722 and added test'
8704,119958992,b'doc comment'
8709,119998812,"b""@maumar Missed this earlier, but this doesn't actually prevent re-binding. The goal is to prevent going from string -> INavigation, because we already have the INavigations."""
8709,120004178,"b'@anpete this should be fine - the ctor saves INavigation[] into a field, and GetNavigationPath which normally performs the binding, returns the stored value rather than computing it from strings. '"
8736,120196031,"b'Please file an issue to un-skip the test, and use the issue URL in the skip string.'"
8732,120165906,b'\xf0\x9f\x8e\x89 '
8748,120459019,b'Remove this resource'
8748,120459237,b'Remove named parameter. It provides no value.'
8753,120496713,b'This may become an annotation when we revisit the DatabaseModel'
8767,120721111,b'Is config.abstractions sufficient?'
8767,120726728,"b'Yes, but need to fix some test projects. Working on it'"
8769,120764445,b'should we create overload here instead?'
8774,120769899,b'\xf0\x9f\x8e\x89'
8774,120770317,b'I wonder if we should call this WriteCode \xf0\x9f\x98\x9b '
8774,120777542,b'Internal. Can always change later...'
8766,120789806,b'I wish we indented warning in Scaffolded DbContext like this. Messes up auto-format of VS atm.'
8766,120792538,b'\xf0\x9f\x91\x8d Filed #8778'
8768,120797986,b'Why not `MS.EFCore`?'
8768,120798217,b'Why does this throw? How this test work?'
8768,120798310,b'Yup it failed.\r\n\r\n```\r\nMicrosoft.EntityFrameworkCore.ApiConsistencyTestBase.Service_implementations_should_use_dependencies_parameter_object()\r\n\r\nFailed   Microsoft.EntityFrameworkCore.ApiConsistencyTest.Service_implementations_should_use_dependencies_parameter_object\r\n\r\nError Message:\r\n\r\n System.NotImplementedException : The method or operation is not implemented.\r\n\r\nStack Trace:\r\n\r\n   at Microsoft.EntityFrameworkCore.ApiConsistencyTest.AddServices(ServiceCollection serviceCollection) in C:\\projects\\entityframework\\test\\EFCore.Design.Tests\\ApiConsistencyTest.cs:line 14\r\n\r\n   at Microsoft.EntityFrameworkCore.ApiConsistencyTestBase.Service_implementations_should_use_dependencies_parameter_object() in C:\\projects\\entityframework\\test\\EFCore.Tests\\ApiConsistencyTestBase.cs:line 34\r\n\r\n[xUnit.net 00:00:12.2767815]   Finished:    Microsoft.EntityFrameworkCore.Design.Tests\r\n\r\n\r\nTotal tests: 232. Passed: 231. Failed: 1. Skipped: 0.\r\n\r\nTest Run Failed.\r\n\r\n```'
8768,120798524,"b'This was a mistake, I have fixed it locally but not re-pushed yet.'"
8777,120800331,b'If we are not logging `DiagnosticSource` event then where are these ids used?\r\ncc: @ajcvickers '
8777,120800771,b'Move warning outside of this if block & right after checking conditions.'
8777,120800793,b'Create variable nullable taking value from Column.IsNullable & update the variable if conditions match (in same block as log message)'
8777,120800807,b'This would be just !nullable.'
8777,120800852,b'`BooleanWithDefaultValueSql` and likewise for other property & classname'
8777,120943037,"b""OK. Don't think it's important as the test already explains that but OK. Why the `Sql` addition?"""
8777,120943426,"b""It's a relatively minor point, but I think the way it is now is much clearer. I think it's good for the developer to know that this is happening because nullability is being forced by the scaffolding, rather than it being any intrinsic property of the underlying database model. By saying `forceNullable` you are explaining that."""
8777,120943812,b'@ajcvickers for response to this.'
8777,120944128,"b""Could. Don't feel it makes make much difference."""
8777,120944197,b'See comment above - I think this is better.'
8777,120945115,"b""Just because it is Bool property with DefaultValueSql set. Becomes more explicit and easy to evaluate the expected output file as in fluent API, you can check if the property has HasDefaultValueSql generated. It's not important but being more explicit in test not gonna hurt and helps person to read the tests more easily."""
8777,120946606,"b""Its minor point but no need to compute same thing multiple times, if we are having extra variable then why not use it in well way. We start with value in database, we update the variable with whatever conditions comes up and we set nullability based on that. Today its 2 conditions, it may expand more in future. Its better to right a condensed code. We don't need variables to explain what is happening. Logging message would make it very clear why we decided to introduce nullability. And if still doesn't look very clear, feel free to write a comment for explanation."""
8777,120946918,"b""I thought `bool` was obvious a) from the name of the test and b) from the produced type. And actually `HasDefaultValueSql()` is the choice of the scaffolder - it could (and did in the past) do something different if it wanted. The fact that the underlying database model has `ColumnModel.DefaultValue` set is what's being tested. But OK - like I say I don't think it really matters."""
8777,120947529,b'This is still the event ID for the ILogger message.'
8777,120947675,b'Used here.'
8777,120947849,b'@divega fwlink this?'
8777,120949661,"b""You still need to issue the warning message only if you are forcing nullability - and not just because something is `nullable` - so you will need the `forceNullable` variable (or at least an `if` statement with the same logic). I could create `forceNullable` and then immediately create `nullable` as well to do what you want. If the variable name was something like `wasNullableInDatabaseOrNullabilityWasForced` I'd be OK with it. But that's ridiculously long. Personally I find the other way much clearer so I'm going to stick with it for now."""
8788,120995226,b'filed #8790 to track enabling this for broader set of scenarios - too risky/too much work to do it now.'
8788,120999629,b'`CanBindToParentQMV`'
8788,120999916,b'variable/parameters not prefixed?'
8788,121000899,b'we already have property CanBindToParentQueryModel that is being used for non outer-param binding. How about CanBindToParentQueryModelUsingOuterParam?'
8788,121003601,b'but but we need `parameter` full not `param` \xf0\x9f\x98\xa2 '
8788,121003751,"b'yup, used ""parameter"" in the final name'"
8751,120496553,b'And this and the one above are not extension methods because...'
8751,120497647,"b""... of the `beginTransaction` parameter. This overload is for code reuse and shouldn't be used directly."""
8751,120504355,b'And it needs to be public because... :smile:'
8751,120504716,"b""... it's used in `RelationalExecutionStrategyExtensions`"""
8751,120506146,b'And it would be useful for non-relational providers that want to add their own overloads.'
8751,120553730,"b""@AndriySvyryd @ajcvickers FYI, this method signature allows for type inference for `TContext` but the Intellisense experience is poor: while typing things in order you won't get any help with member completion on the action or the func because you haven't typed the context variable yet."""
8751,120553928,"b'And just to confirm, moving the context parameter before the action and the func fixes that.'"
8751,120657412,b'The same would apply to the `state` parameter. Should we move it too?'
8751,120720265,"b'Sure, I am fine with trying that (or anything to make the API more usable). But I lost track of what we already had vs. what we are adding. Are these breaking changes?'"
8751,120725331,"b""I don't think we should do it for `state` because it's not present on all overloads and it would be better to have it separate from `context` to reduce the overload resolution confusion.\r\n\r\nAdding the DbContext parameter in lambdas broke all usages already."""
8507,117333251,b'Add braces even when single line block'
8507,117336571,b'@ajcvickers Would a relational IModelCustomizer be a better option here?'
8507,117336992,b'readonly all fields where possible.'
8507,117337130,b'Unused field.'
8507,117337185,b'name has NotNull attribute.'
8507,117337503,b'Use built-in type names.'
8507,117337703,b'Can move predicate to FirstOrDefault and remove Where.'
8507,117337790,"b""Can move predicate to FirstOrDefault and remove Where.\r\nredundant '== true'"""
8507,117338039,b'nit: Use Parameters.Count property'
8507,117338230,"b""break long lines. We break these before '&&'"""
8507,117338738,"b""Don't put NotNull annotations on overriding/implementing methods."""
8507,117338989,b'public'
8507,117339415,b'Add StringComparison to StartsWith call'
8507,117339483,b'annotation has CanBeNull'
8507,117339565,b'Redundant name'
8507,117339709,b'nit: formatting'
8507,117345079,b'Should Check.NotNull still be performed in overriding methods for NotNull parameters?'
8507,117345544,"b""What's the formatting nit here?"""
8507,117345546,"b'Yeah, but Checks are only required for public components (not in .Internal namespace).'"
8507,117346431,"b""space before ';'"""
8507,117349078,b'var'
8507,117349618,b'This needed?'
8507,117349739,b'out var all the things.'
8507,117349839,"b""Redundant '== true'"""
8507,117349887,b'use var everywhere'
8507,117349929,b'Method can be static.'
8507,117350217,b'possible null ref? (pa)'
8507,117350462,b'Redundant AllowMultiple'
8507,117350681,b'Check.NotEmpty on value'
8507,117364910,"b""Shouldn't this be done in a relational convention?"""
8507,117499338,"b""Are you asking about just the HasTranslateCallback property or the entire TranslateCallback piece?\r\n\r\nI added The TranslateCallback as a way for users to provider their own methodcall to SqlFunctionExpression translation in the cases where the fluent api isn't expressive enough.   It gives the end user the most flexibility to perform a translation, but will it be too confusing to the average user to leave in there?\r\n\r\nThe HasTranslateCallback bool property itself can go away - I can move the != null checks to where they are actually used."""
8507,117504687,"b""Yea my first TA in college had us do that to more easily see missing semis, back in the era before fancy ides and good compiler errors. \xf0\x9f\x98\x84   Old habits die hard.  I'll find a remove the rest of those."""
8507,117653720,b'I need access to the context in order to search for methods tagged with the dbfunctionattribute.\r\n\r\n@anpete suggested using an IModelCustomizer.  I am looking into that approach now.'
8507,117656999,"b'I took a look and I could create a RelationalModelCustomizer, which finds the dbFunctions before calling OnModelCreating, and use that for IModelCustomizer DI for relation providers.  \r\n\r\nThe other options I see would be to add the context as a parameter to IModelConvention.Apply, or add a new convention type which accepts the context on its Apply method.\r\n\r\nThoughts anyone?'"
8507,118078101,"b'Is there a constrain on specific set of types which can be returned? Given this is relational, ideally it should determine based on type mapper. \r\n'"
8507,118078882,"b'Should this ordering be changed? with default for schema being null (or ctor with just name). Just like the way `TableAttribute` is constructed.\r\nWith above signature, user have to specify null schema or prolly use parameter names instead of positional. '"
8507,118079167,b'Same as valid return type on DbFunction.'
8507,118079422,b'Probably inherit flag but use parameter name for `false` arg. Also any reason disabling inherited DbFunctions?'
8507,118079795,b'name the parameter in comment like `/*schema:*/ null`'
8507,118080111,b'Core.Specification does not reference Relational.'
8507,118080215,b'If you are adding something in Core.Specs which needs relational component then right place is Relational.Specs'
8507,118081289,"b'Is there any blockers in copying this method in derived type. There can be many points of extension in the sense that when someone wants to change the model builder. i.e. when it is build, or after running dbset discovery, after running fluent api code, after running customizer, after validating.\r\n\r\nPerhaps best if all code here can be called in derived method then it would give much better control while overriding.'"
8507,118081768,b'CreateModelBuilder'
8507,118081857,b'CreateConventionalModelBuilder may be'
8507,118081969,b'Collapse to same method with parameter to add the convention.'
8507,118082121,"b'SqlServer should be in the name,'"
8507,118159550,b'Yes - this was overlooked during refactoring.'
8507,118162818,"b'Disabling inherited funtions here is a bug.  \r\n\r\nHowever GetRuntimeMethods does not return static methods on base classes.  Also GetMethods is not a part of .Net Standard 1.3, so I will need to roll some custom code here to find base class methods.  '"
8507,118163380,"b""I am using the Northwind context for some of my tests and I added some test methods to it which had DbFunctionAttributes on them.  \r\n\r\nI have refactored this into Relational.Specs.  The last thing I need to change is TestModelSource.  I need to somehow refactor out the call to FindFunctions.  \r\n\r\nRight now I don't see a clean way to do this without duplicating a bunch of code in TestModelSource and NorthwindQuerySqlServerFixture.  I'll take another look with fresh eyes tomorrow."""
8507,118164851,"b""@anpete and @ajcvickers both have concerns about this line as well.\r\n\r\nThe issue is timing.  I need to find the dbFunctions after the model has been created and before model validation runs.  Overriding this method doesn't give enough granularity to get the FindFunctions call where it needs to be.   I also need access to the context.  Therefore using a ModelBuiltConventions won't work.\r\n\r\nI'm open to ideas here.\r\n\r\n"""
8507,118633699,"b""@smitpatel - We just need to make sure that the parameter/return type can be mapped to a provider type - you can't use any random classes as a parameter type.\r\n\r\nWhen I originally wrote this I just missed that there was an IRelationalTypeMapper that I could use to verify the parameter type instead of hardcoding the list.  \r\n\r\nI will switch over to use  IRelationalTypeMapper.IsTypeMapped, the problem being I don't see how I can get an IRelationalTypeMapper into the DbFunction class.  The call chain doesn't lend itself to a place where I can DI one.  I'm looking for a similar example which I can copy, but I am not finding anything.  Have any ideas?"""
8507,119167341,b'Can this be singleton?'
8507,119196785,b'@pmiddleton +1 to moving the null checks.'
8507,119198443,b'Can we re-purpose FindSets here? We could rename it to reflect that it is a general provider-level model post-processing hook. E.g. PostProcessModel\r\n\r\ncc @ajcvickers '
8507,119203822,"b'No.  \r\n\r\nThe IEvaluatableExpressionFilter needs access to the current model in order to know which methods are marked as translatable.  The ParameterExtractingExpressionVisitor will try to evaluate  methods at query compilation not marked as translatable which also have constant parameters.\r\n\r\nWe could look at injecting the model directly into the ParameterExtractingExpressionVisitor, but that will involve making it a scoped service and make the code there more confusing.\r\n\r\n'"
8507,119223192,"b'Based on how `ModelCustomizer` is, we can probably use it. We run our OnModelCreating method through customizer. Also it has access to modelBuilder & DbContext both.'"
8507,119226513,"b'Sorry, I could not check code directly. What actually sets the return type?\r\nIt is something which user can set directly or we do that while initializing functions?\r\nIf it is the latter case then we can probably move the check during some sort of validation. The validation can take advantage of TypeMapper.\r\n'"
8507,119227078,"b'Yeah, but this code is conceptually the same as FindSets. I.e. Customize the model based on some aspects of the DbContext CLR type - We could implement FindSets in a customizer...'"
8507,119231559,"b""This was something that was user settable, but should no longer be.  \r\n\r\nThe parameter and return types are pulled via reflection.  The user defines a function and registers it with the fluentApi, or tags via the dbfunctionattribute and then it is processed at model creation time. \r\n\r\nYou're right I think this should move to model validation.  I will look at verifying that tonight and then making the changes."""
8507,119231863,"b""@anpete - I'm confused on your thumbs up.  Are you for leaving the code as is, or looking into if it can be moved into ParameterExtractingExpressionVisitor?\r\n\r\n"""
8507,119232175,b'Leave as is'
8507,119233119,b'> We could implement FindSets in a customizer...\r\n\r\nI like this part. Why `FindSets` gets special status :trollface: '
8507,119234647,b'Probably because it was there first'
8507,119256150,b'DbSet properties need to be initialized without building the model.'
8507,119273285,b'@smitpatel - This is now changed.  Return and Parameter types are checked with the relational type mapper during model validation.'
8507,119274570,"b""@smitpatel @anpete - Are there any plans to ever allow end users to remove/replace the default conventions used to build the model?\r\n\r\nIf not I want to mark this method as internal because it is only used by the RelationalDbFunctionConvention and end users shouldn't be calling it.  However if that convention can be removed then end users will need this method."""
8507,119275027,b'#214 & #1414\r\nThere may be but no mechanism at present.'
8507,119275057,b'I found #977 today.'
8507,119278995,"b""I'm inclined to hide it for now and expose it once the ability to replace convention sets is there.  \r\n\r\nAlong the same lines RelationalDbFunctionParameterBuilder.HasParameter should be internal with a new FindParameter being exposed.  There is no reason for the end user to add parameters as the convention creates them from the MethodInfo.\r\n\r\nThat way there are a few less ways to mess things up for the time being, but I'm fine going either way.  \r\n\r\nWhat are your thoughts?"""
8507,119376491,"b'Make this a ModelBuilt convention, it even could be implemented in `RelationalDbFunctionConvention`'"
8507,119376603,b'Remove comment'
8507,119380347,"b'This class contains public API, so it should be documented appropriately.'"
8507,119382403,"b""Currently the `ConfigurationSource` is not being stored or used. This means that if, for example, the schema is configured using the `DbFunctionAttribute` it will override the schema configured using `HasDbFunction`.\r\n\r\nA simple way to fix this is to use the `ConfigurationSource` of the annotation containing the `DbFunction`, so if any aspect is configured using Code First (`HasDbFunction`) then the convention won't change anything.\r\n\r\nFor a more granular implementation the `ConfigurationSource` of each aspect needs to be stored in `DbFunction` (Name, Schema, Parameters, MethodInfo, ReturnType) so that the convention could fill in anything not configured through Code First, """
8507,119383654,"b""We don't provide `Remove*` methods in CF API, as they aren't declarative. Remove it or move it to an `Internal` class."""
8507,119383986,b'This class should be documented too'
8507,119387523,"b""Since `schema` is optional it doesn't need to be in the constructor parameters"""
8507,119406507,b'There is a discussion about this going on in a comment on ModelSource.cs.  '
8507,119408417,b'Is the rule that the Code First api takes priority over attribute based configuration if both are present?'
8507,119411951,"b""It would be ok to find sets and functions in `ModelCustomizer`. Though it would be better to refactor the way it's called to make it more extensible similarly to `ConventionSet`/`CoreConventionSetBuilder`, but this can be done in a separate PR"""
8507,119412680,"b'Yes, CF uses the `Explicit` `ConfigurationSource`, attributes use `DataAnnotation` and other conventions use `Convention`. This is the order used to resolve conflicts.'"
8507,119531752,"b'@AndriySvyryd - I have made some changes to DbFunction so the Name and Schema properties  use ConfigurationSource.  Those changes are in another branch in my repo.  \r\n\r\nCan you take a look there and let me know if that approach is in line with what you are thinking.\r\n\r\nHere is a link to DbFunction.cs - \r\nhttps://github.com/pmiddleton/EntityFramework/blob/udfTake2ConfigurationSource/src/EFCore.Relational/Metadata/DbFunction.cs\r\n\r\nIf that is going down the right path I will finish making the changes to DbFunctionParameter, fix/add unit tests, etc and get it merged into this PR.\r\n\r\nThanks'"
8507,119660683,"b""Yes, you are on the right track. Though you don't need to store `_configurationSource` as it is already stored in the annotation itself. You can access it by using `RelationalAnnotationsBuilder`, see https://github.com/aspnet/EntityFramework/blob/dev/src/EFCore.Relational/Metadata/Internal/RelationalEntityTypeBuilderAnnotations.cs"""
8507,119686691,b'Great - I will keep down this path and finish these changes up tonight / tomorrow.'
8507,119906368,b'We changed our naming convention for these. Could you rename the interface and property to `IModelAnnotationChangedConvention` and `ModelAnnotationChangedConventions`?'
8507,119913985,b'Will do.'
8507,119914204,"b""I've got most of the changes done, I just need to fix the unit tests.  I should be able to get everything in this weekend so you can review again on Monday."""
8507,119925276,b'So is the consensus to move FindSets into ModelCustomizer and then derive off a RelationalModelCustomizer to run FindFunctions?'
8507,119937242,"b""Yes, we'd like to try that.\r\n\r\nThanks for all your effort on this!"""
8507,119959081,"b""Glad to help.  Thank you all for helping me find the places I wasn't following conventions, or missing an existing service I could be using.  There is a lot of code to learn in this project."""
8507,120132660,"b'@AndriySvyryd \r\n\r\nI pushed a fix for this, and your other issues.  Let me know what you think.'"
8507,120160983,"b""Add `&& oldAnnotation == null` condition. This code doesn't need to run more than once per function."""
8507,120162733,b'You can drop `Relational` from the name'
8507,120162797,b'You can drop `Relational` from the name'
8507,120163105,b'Rename this to `Metadata` for consistency with other builders.'
8507,120164172,b'You can drop `Relational` from the name'
8507,120164569,b'You can drop `Relational` from the name'
8507,120165480,b'Rename this and the underlying property to `Metadata`'
8507,120169348,"b""@pmiddleton Don't forget to do the above"""
8507,120271592,b'I have pushed an update for this now.  '
8507,120439234,b'sort usings'
8507,120440283,b'DbFunctionFinder name? Seems inconsistent with SetFinder that way but FunctionFinder seems too generic. cc:@AndriySvyryd '
8507,120441232,b'Minor thing. May be round brackets around the parameters & comma separated so annotation name become more readable. (though the only place it would be visible is Model.ToString.'
8507,120441513,b'Not in internal namespace.'
8507,120441927,"b'We can avoid having to come up with a good name by inlining this into `FindDbFunctions`.\r\nThe reason `SetFinder` is a service is, as Arthur said, because it is also used to initialize the set properties.'"
8507,120445605,b'FindDbFunctions was just a static method on a static class until I got the bright idea to turn it into a service at 12:30 last night.  IDbSetFinder was a service and FindDbFunctions was jealous :)\r\n\r\nI can revert this back which will remove this class and the naming issue.'
8507,120447936,"b'To be able to configure the DbFunction with just this API, without annotations, this should be changed to `HasParameter` and also add a way to set the parameter type using `DbFunctionParameterBuilder`'"
8507,120449306,b'Move this to a separate file'
8507,120449508,b'Rename to `Metadata`'
8507,120449892,b'[CanBeNull]'
8507,120450124,b'[CanBeNull]'
8507,120452424,"b""The function parameters are discovered when the RelationalDbFunctionConvention runs.  The parameters and their types are picked up from the signature of the .Net method.  This happens regardless of how they function was added (attribute or fluent api).  Setting the parameter type should be done by changing the signature of the .Net method.\r\n\r\nOriginally I had this feature, but I pulled it.  The only scenario where you would need to add a parameter is when you have a database function which requires a constant value (like DateAdd in sql server) which doesn't have a corresponding parameter on the .Net method call.  In that case we have the TranslateWith option on DbFunction which can be used to provider a custom mapping from IDbFunction -> SqlFunctionExpression.  It seemed redundant to have both options.\r\n\r\n\r\n\r\n"""
8507,120453529,"b""Is this considered internal?  It's not in an internal namespace or folder.  If so I will remove all of these comments in this file."""
8507,120455607,"b""Those doc comments are there for public classes (which requires doc comments for build to pass) but in `.Internal` namespace. Classes in `.Internal` may break in minor release too and we believe most app developer won't need to use them. So providing a good documentation is not a priority hence this stub."""
8507,120455828,"b'I agree that this is low value in this case, but generally we allow the users to supply the full configuration without having to rely on the convention. This will become more useful when we add an easy way of removing conventions.\r\n\r\nWe already have a lot of redundancy in model building because we support different coding styles (Annotations, Fluent API, Nested Closures, etc.)'"
8507,120456517,b'We need a public way of changing the low-level Metadata. To be consistent with other API (like Sequence) move this class to .Internal and add `IMutableDbFunction` interface'
8507,120483579,"b'Any input on whether we want want to remove the IDbFunctionFinder Service here and go back to a static method for FindDbFunctions, or fix the naming issue?'"
8507,120485107,b'My preference would be to remove the service and move the code to `RelationalModelCustomizer.FindDbFunctions`'
8507,120532764,b'This is cleared up now.'
8507,120533482,b'Ok - I will take a look at this tomorrow.  Everything else has been cleaned up.'
8507,120641355,"b""@AndriySvyryd - Regarding configurationSource for this.  If a parameter was added via the convention and the user then calls .HasProperty should we replace the entire convention parameter with the explicit api parameter?  I am thinking not, since then we would lose any properties on the parameter set by the convention which the fluent api then does not set.\r\n\r\nI am looking for an example of this pattern and I'm looking at Property on InternalEntityTypeBuilder.  There if the property already exists it is not replaced.  I just want to make sure that is the correct pattern to be following."""
8507,120656039,"b""Yes, that's the right thing to do. Just update the configurationSource to Explicit, configuration stays the same."""
8507,120799958,b'@AndriySvyryd - I have made the changes to the api.  Take a look and let me know if they meet what you are thinking in regards to expanding the api surface.  \r\n\r\nI still need to add unit tests for the new apis.'
8507,120929843,b'New unit tests have been added for the new apis.'
8777,121181769,b'@lajones - wait for this'
8777,121183384,"b""@ajcvickers @smitpatel @divega are we doing a fwlink within the warning message? I didn't see a response from @divega"""
8794,121037533,b'I wonder if this should be more general. Something like `errorsExpected`...'
8794,121038470,b'@divega & @ajcvickers - to determine the name of parameter. '
8794,121144331,"b""Fine with `errorsExpected` or `logErrorAsDebug`. @divega ?\r\n\r\n@smitpatel Please don't block on this name for merging."""
8794,121144709,b'Switch the order of these around so the cancellationToken is last.'
8794,121145455,b'I tried that first. But we are using this in many places with cancellation token passed. So need named parameter or both of them. What is more preferable from user perspective (if users are supposed to use this API)?'
8794,121179520,b'Changed to `errorsExpected` except for the log message where `logErrorAsDebug` is more appropriate. '
8794,121179556,b'Switched order.'
8777,121189888,b'@lajones I will have it in a couple of minutes. Trying to pick a temporary landing page for it until we have the actual topic.'
8777,121191307,"b'@lajones https://go.microsoft.com/fwlink/?linkid=851278, for now it points to https://docs.microsoft.com/en-us/ef/core/modeling/generated-properties#value-generated-on-add.'"
8777,121191851,"b""Thanks, @divega. I'll add this to the message and check in."""
8798,121094888,b'tmi?'
8798,121094931,"b""will fix this tomorrow, it's getting late ;)"""
8798,121095234,"b'currently, gears.Include(g => (g as Officer).Weapons) will include weapons on all gears, not only on officers - is this ok? It could be confusing, but we only use this to extract INavigation path information - if the navigation is declared on base, information about casting to Officer is lost to us.'"
8798,121122392,"b'Provided that `(g as Officer).Weapons` is just a way to address the navigation property (which may exist on other types), I think it is ok. I can see however why one could have a different expectation. \r\n\r\nAn alternative is to throw if you use any type other than the declaring type of the navigation, but it seems pretty unhelpful. '"
8798,121130978,b'@maumar - Perhaps that is limitation of how includes are stored internally and we may need to work on that to actually support the scoping. Should be fine for now.'
8798,121167063,b'We can warn here.'
8798,121168534,b'Typo? Just use BaseType from IET'
8798,121224774,b'Change name'
8798,121226311,"b""'Specify lamda parameter type explicitly'?"""
8798,121226564,b'Any issues in using var?'
8798,121227065,b'This should change. We do have type available to find actual entity type on which we need to search the navigation.'
8806,121227166,b'Should this be in the type mapper?'
8806,121227318,b'Remove braces?'
8806,121228150,b'This change only affects one SQL baseline? Do we have enough coverage for SQL gen here?'
8806,121228492,"b'Also, consider using verbatim strings here like we do in query - The Env.NLs add a lot of clutter.'"
8806,121232792,"b""It's very update-specific, I doubt it could be reused."""
8806,121233056,b'I believe that ideally a single change in SQL gen should require a single change in the baseline.'
8806,121234296,b'And I believe in \xf0\x9f\xa6\x84 and \xf0\x9f\x8c\x88 \xf0\x9f\x98\x84 '
8794,121272073,"b'Just in case, did we miss a rename here or is this the one that stayed like this on purpose?'"
8794,121272220,b'Missed it. Will update it in my next PR.'
8794,121272254,b'I see it is in a test.'
8812,121246756,b'This was disabled by @anpete  in Aug 2014 :trollface: '
8812,121246980,b'We got there! \xf0\x9f\x8d\xbe \xf0\x9f\x8d\xbe \xf0\x9f\x8d\xbe '
8812,121247014,b'Gross!'
8812,121247054,b'Hehe'
8829,121544345,b'Need any nullable unwrap here?'
8829,121545762,b'Updated'
7824,106696764,"b'Note, when the `Down` operations are being generated, `source` and `target` will be backwards from what you expect. `source` will be for the current model.'"
7824,108005633,"b""Thanks for the pointer, it's mostly taken care of now :)"""
7824,108239872,"b""I had to change the API because I'm using `UpdateSqlGenerator` and it works with single-row operations"""
7824,108249253,"b'This is an ""Extract Base Class"" type of refactoring. Please review, but a quick summary would be that this class was changed to maintain its current behavior.'"
7824,108249532,"b'Same as `ColumnModification`: this is an ""Extract Base Class"" type of refactoring. Please review, but a quick summary would be that this class was changed to maintain its current behavior.'"
7824,108249888,"b'This was changed to use a more lightweight, POCO base class containing modifications'"
7824,108250557,b'This adds the feature of generating SQL with literals and not only parameters.'
7824,108250978,b'This has to do with the comment in `StateManager.GetOrCreateShadowEntryWithValues`'
7824,108251170,b'Please advise on API naming and documentation'
7824,108251558,b'This just exposes a private method. Maybe we can make that public instead.'
7824,108253085,b'Going through the `UpdateSqlGenerator` adds the row count SELECT. We should discuss whether this could be useful for error checking or if we could add an option to avoid generating it.'
7824,108253315,b'Please advise on how to reuse `TestModificationCommandBatchFactory` from `CommandBatchPreparerTest`'
7824,108254996,b'I have no idea how my code impacted this.'
7824,108285760,"b""Just checked with @smitpatel: UpdateSqlGenerator.cs:391 has a side effect on the ColumnModification class of generating a parameter name when calling `ColumnModification.ParameterName`. It should be fine since we're reusing code for another feature, but we could consider changing the condition to `columnModificationBase.GetType() != typeof(ColumnModification) && columnModificationBase.ParameterName == null` for 100% backwards behavior compatibility."""
7824,108291928,"b""I haven't been able to figure out why this is happening yet. I'll work on this during the week, but worst-case scenario I'd like to merge and open a new issue to track it."""
7824,108530999,b'You can remove _parameterName  and _originalParameterName by adding a protected setter on the base property'
7824,108536392,"b'`GetOrCreateEntry(IDictionary<string, object> values, IEntityType entityType)`'"
7824,108536821,"b'Making `GetEntriesToSave()` public would be better, this is still in Internal'"
7824,108538489,b'If the supplied object is of the type mapped to this entity type then we should only use the mapped properties.\r\nYou can just file this as a future improvement.'
7824,108538911,"b'This method is useless in the current form, you can just invoke `Metadata.AddSeedData` directly'"
7824,108539345,"b""Don't use mocks as we are trying to remove all of them"""
7824,110671761,"b'This is fixed. I moved this logic to `GetSeedData` where the `EntityType` is not mutable anymore, and so we can use `GetProperties`'"
7824,110981527,"b""It's scoped because it now depends on the scoped `ICommandBatchPreparer` and `IStateManager`"""
7824,114194178,"b'Is this just a temporary hack to make things work for seeding? Seems like if seeding needs shadow nav props, then we should make it work correctly, rather than with this kind of special-casing.'"
7824,114194446,"b'Do we need an issue to track this, or is this something that should be done before shipping?'"
7824,114195500,"b'When is this path used? Generally we avoid using Activator.CreateInstance directly. We have factories setup to create entity instances already, so we should try to wire these through.'"
7824,114195669,b'Are we sure this is safe? Could you end up with two state entries referencing the same entity?'
7824,114196093,"b'>  IEnumerable<IDictionary<string, object>> GetSeedData(); [](start = 6, length = 57)\r\n\r\nThis is returning mutable data from a non-mutable API surface. Is this okay?'"
7824,114196177,"b'>This API should only be called after model configuration is finished. [](start = 20, length = 69)\r\n\r\nWhy is this? This differs from all our other metadata APIs.'"
7824,114196368,"b'Does calling this replace all the existing seed data, or add to it? If it adds, how are things merged?'"
7824,114197150,b'Does this work with shadow properties? (Not sure I understand what is happening here...)'
7824,115096957,"b""Shadow navs would be very well received because:\r\n\r\n1. this and the other workarounds for shadow navigations wouldn't be necessary\r\n1. they would provide a richer experience, allowing people to use navs in their seed data (note: they would still need to specify all object ids for Migrations to work)\r\n\r\nFor now, this is needed because the snapshot models are 100% shadow, and currently our code throws exceptions when using shadow navs in the State Manager (which wasn't used in `MigrationsModelDiffer` before adding the Migrations feature)."""
7824,115099334,"b""This is linked to your other comment here: https://github.com/aspnet/EntityFramework/pull/7824/files/9c2a5b8def1f5e37875b43a7b9a217a6314f327a#r114194446\r\n\r\nThis comes from `MigrationsModelDiffer.DiffSeedData`. I believe we can make it more specific and just keep the `CreateEntry` part. We're using `StateManager.TryGetEntry(key, keyValues)` to retrieve them later on, and not this method because the `values` dictionary is not tracked.\r\n\r\nThe branch in particular that falls in `entityType.HasClrType()` is the one where the model is the current one (and not a snapshot), where we can have real entities (and not only shadow ones).\r\n\r\nI had to instantiate an empty entity and then call `CurrentValues.SetValues(values)` because:\r\n\r\n1. `InternalEntityEntryFactory.NewInternalEntityEntry` doesn't support dictionaries\r\n1. `InternalEntityEntryFactory.NewInternalEntityEntry` doesn't allow null values\r\n1. I couldn't find a factory to create empty entities"""
7824,115099919,"b""This method receives just a `values` Dictionary (akin to a bag of properties, which is not an `entity`). I think we should rename it to `CreateEntry` as I mentioned in another comment so people don't expect to get the same entry twice."""
7824,115100508,"b'If you check the method implementation, it uses the property information to create the dictionary. It **needs** the configuration to be finished to be able to use that.\r\n\r\nIt could be changed to ""This API only returns meaningful data after model configuration"", which is also probably the case with `GetProperties` and other similar methods.'"
7824,115100675,"b""True. And even if you mutate it, the implementation always returns a new object. What's the signature for this kind of immutable data?"""
7824,115100900,b'Can be called multiple times to add. Does the documentation need clarification?\r\n\r\nImplementation is:\r\n\r\n```csharp\r\nvoid IMutableEntityType.AddSeedData(params object[] data) => _seedData.UnionWith(data);\r\n```\r\n\r\nWhere `_seedData` is a `HashSet<object>`.'
7824,115101275,"b""Shadow props, not shadow navs. This code:\r\n\r\n1. gets all the property names for this entity (excluding navigations)\r\n1. gets the value from the seed objects through reflection\r\n1. creates a dictionary of { propertyName: seedValue }\r\n\r\nNote:\r\n\r\n1. We ignore navs\r\n1. We ignore properties missing in the seed object\r\n1. We ignore properties in the seed object that are not in the model\r\n1. This could be cached, but since it's only used in the differ we are not doing that (premature optimization?)"""
7824,115101806,"b""I don't know, it's hard for me to say. This code is clearly ignoring the entity, and it could be used to pre-populate the shadow entity. Probably worth opening an issue if you plan to extend shadow entity support."""
7824,117575364,b'Can convert a single migrations operation into multiple update operations. Allowing multiple rows in the migrations operations would also allow us to group like statements into a single method call in the migration.'
7824,117575676,"b""This is SQL Server specific and shouldn't be in the base `MigrationsSqlGenerator`"""
8850,121810162,b'Move them to single folder `QueryTestBase`'
8850,121810610,"b""We don't use folders for grouping tests by functionality right now."""
8850,121811324,b'We should. The list of files inside folder is growing too large.'
8850,121812484,"b'I\'m OK with that, but then let\'s just create a folder for all query tests: ""Query""'"
8850,121834532,"b'any ideas how to ""convince"" git that this is a rename?'"
8850,121834669,"b""We don't convince git. Git convinced us that we are its slave :trollface: \r\nIts fine whatever git says."""
8850,121834772,"b""the only non-rename change - number on the AnonymoutType changed on my box, removed the number from baseline so that future changes won't break this test"""
8850,121835018,b'I think it is fine to have it there too. The magic number changes whenever anonymous type declaration is moved from one type to another (namespace change also makes different type). If you think the test should verify this log fully then update it.'
8834,121581681,b'Also ComputedColumnSql'
8834,121709187,"b'A key with ComputedColumnSql would be very strange... In fact, we should block it in model validation.'"
8834,121760397,b'Then add it to model validation \xf0\x9f\x98\x84 '
8808,121231993,b'nice!'
8808,121232114,b'CanBeNull?'
8808,121242759,b'intentional?'
8808,121548039,b'This is implied for `Nullable<T>` properties'
8808,121548280,"b""Yes. I'm pretty sure empty connection strings are valid on SQL Server and we allow them elsewhere."""
8808,121771707,b'Minor: Should we swallow this in scaffoldingmodelfactory?'
8808,121771950,b'Can we align parameter name with their types?'
8808,121772088,b'Also to sequenceBuilder'
8808,121772348,b'Where is ColumnOrdinal used later?'
8808,121772859,b':cry:'
8808,121773412,b'What is this id for? Why its type changed?'
8808,121774262,b'Any specific reason to use StringBuilder? Single string block (using $ & @) would be easier to read.'
8808,121775305,"b'We should be consistent and prefix everything with ""Database""'"
8808,121776569,b'In what scenarios would `Table` be null?'
8808,121786373,b'`Column` can be created without passing in Table (default ctor) which is different from our Metadata which requires ctor parameter connecting back ref.'
8808,121786820,"b'Ok, but why do we allow this?'"
8808,121809377,b'We can disallow it. It is coming from `legacy design`'
8808,121989090,"b""You can't get FK constraint names without parsing DDL. This is an internal I'd for it the native type has always been long."""
8808,121991360,"b""I think that would make the model wrong. It has a name, it just happens to be the by-convention value and doesn't need to be explicitly configured."""
8808,121991792,b'We order by it when writing the properties.'
8808,121992762,"b'lol, not sure how to interpret that comment.\r\n\r\nI think we need another round of end-to-end cleanup. But this PR gets the public API in order.'"
8808,121993652,"b""Main goal was to not rely on the line endings of the file. I'm good with any format so long as it uses `Environment.NewLine`"""
8808,121993892,"b""I'm thinking so too. I'll tee up an API Review."""
8808,121994499,"b'Yep, I just used the existing code. We need to do another pass of internal cleanup.'"
8808,122001234,"b""Then it does not align with TypeMapping system we have in place. We annotate those facets only if we need during ScaffoldingModelFactory.\r\nI think it is fine to say that generate `Model` would be same as what runtime `Model` represent. i.e. Things don't need to be specified if they are having same values as default.\r\n"""
8808,122001560,b'the parameter name `fkModel`. Things are quite ambiguous in naming. I think we can fix those names later since its Internal'
8808,122005354,"b""I'm fine either way. It's all internal code, so we can adapt it to any future needs as needed.  This code exists in a few other places in this file. I'll file a general cleanup issue with a note on this."""
8808,122005517,b'Yes. I was going to wait for API Review before aligning any of the internal code.'
8808,122006366,"b""('Cause you never know if we'll go with `Store` or `Database`. \xf0\x9f\x98\x89)"""
8808,122013355,b'Filed #8853 '
8878,122513458,b'null check on `_rowNumberPaging` ?'
8878,122513559,b'extra lines'
8878,122516624,b'Fixed'
8878,122516631,b'Fixed'
8861,122146346,"b""this is unfortunate, cast is not needed because SUM takes care of the type discrepancy, but result operators are translated after selector (in a separate step), so when translating selector we don't know that it's wrapped in a result op. We could recognize this when handling result ops, and remove the explicit cast, but it seems like an overkill. Thoughts?"""
8861,122236278,"b""Don't use try/finally. Use the usual pattern of storing old value locally running the code and restoring the value."""
8861,122236329,b'Check R# settings'
8861,122271974,b'we do both'
8861,122273026,b'Finally is convenient because of return'
8861,122273323,b'Can we remove for all providers?\r\nWe could do it as SQL tree optimization.'
8861,122544976,b'Check NodeType instead.'
8878,122567216,"b'Just out of curiosity, why 397? Just any old prime number?'"
8878,122569236,b'https://stackoverflow.com/questions/102742/why-is-397-used-for-resharper-gethashcode-override\r\n'
8868,122335797,"b""While we are here, if we are going to use HashTable to combine multiple files, can we use that for `ScaffoldContext`'s return type too. (so that we can get rid of `ReverseEngineeringFiles` class."""
8868,122483785,"b""No. We want strongly-typed .NET APIs everywhere possible.\r\n\r\nThe purpose of `OperationExecutor` is to provide a loosely-typed compatibility layer between the tools and the design-time logic. This allows us to make changes in the design-time logic without breaking compatibility with tools. Ultimately for example, version 3.0 of the tools could work with versions 2.x AND 3.0 of the runtime.\r\n\r\nWe decided not to maintain compatibility with 1.x in 2.0 because of all the design-time changes around application services, but this shouldn't be the case going forward.\r\n\r\nIt's particularly important for the PMC commands, since there can only be one version of them loaded per solution. This would enable users to run `Update-Database` etc. on a solution with both EF Core 2.0 and 3.0 projects.\r\n\r\nIt will also become important when we have global `dotnet` tools."""
8912,123076932,"b'Since we are here, change variable name to something better?'"
8912,123077964,b'`providerSpecificName`?'
8912,123078420,b'As simple as `var parameterBuilder = CreateParameterBuilder()` would be fine too. (or add relational word too)\r\n'
8912,123090489,b'Ideally we are not printing out facets which are default. So size should not be printed for `nvarchar(max)`. File a new issue to check if we have a bug.'
8912,123091956,"b""The default is 0,  and we correctly don't print it if the value is null or empty"""
8912,123092393,b'err... 0 sized string is default. Ok.'
8911,123055833,"b'Move this up, closer to the other FK conventions'"
8911,123056304,b'This is overly spacious \xf0\x9f\x98\x84 '
8911,123069854,b'nit: use IQuerySource here and only construct QSRE when needed? (before passing to IncludeResulOperator)'
8911,123072727,b'Need to comment this out?'
8917,123129747,b'Why no SQL is using year 1605?'
8917,123129779,b'Is this access null ref safe?'
8917,123146812,"b""Because the test I changed doesn't validate SQL"""
8917,123147000,b'Add SQL validation to the test if it is static.'
8917,123147119,"b'The test already asserts round-tripping, SQL validation is redundant'"
8917,123147771,"b""You mean `parameter`? Yes, it's never null"""
8919,123128884,b'There is also `ValueGenerated.OnUpdate` in the enum now. Should we check that also if there is a mechanism to assign that value using core metadata?'
8931,123392255,b'Keep lower bound'
8931,123392505,b'Done'
8931,123395609,b'Why is the `sources` element needed?  I think just `packages\\libunwind8` should be sufficient.'
8931,123395705,b'Unable to find package with just that.'
8931,123395920,"b'Yeah, I found this issue: https://github.com/travis-ci/travis-ci/issues/4780.  CC: @natemcmaster '"
8931,123396929,"b""libunwind8 shouldn't be required for .NET Core 2.0 IIRC"""
8931,123397034,b'Try adding this instead:\r\n```yml\r\ngroup: deprecated-2017Q2\r\n```\r\n\r\nTravis changed the trusty images today: https://blog.travis-ci.com/2017-06-21-trusty-updates-2017-Q2-launch'
8931,123397201,"b'Saw that. Is there a point of going backwards?\r\n> We are planning to keep the previous generation of images around until September 1st, 2017.'"
8931,123397279,"b""@natemcmaster: Docker deps still installs libunwind8 so I assume it's required: https://github.com/dotnet/dotnet-docker-nightly/blob/master/2.0/runtime-deps/stretch/Dockerfile#L16.  Also the CLI install scripts block if libunwind not installed: https://github.com/dotnet/cli/blob/release/2.0.0-preview2/scripts/obtain/dotnet-install.sh#L194."""
8931,123397554,"b""You're right. Looks like these are still required on debian.\r\n\r\n![image](https://user-images.githubusercontent.com/2696087/27412136-6112c878-56a7-11e7-91d2-4223d6c56d5e.png)\r\n"""
8885,122552999,"b'Since IRelationalParameter.AddDbParameter` has value parameter, passing null in this case.'"
8885,122767038,b'So this is to support {0} syntax with raw parameter?'
8885,122767148,b'Just use else instead?'
8885,123393687,b'This ever false?'
8885,123393756,b'Change to polymorphic call on parameter'
8947,123643609,b'No restore for this one?'
8947,123644337,b'Blanket disable in whole file.'
8950,123785377,b'Is this right? If seems like it would only ever be removing `Clustered = false` on the primary key. This would default it to `CLUSTERED` causing more than one clustered index to be created on the table. This would result in an error if you tried to recreate the database using Migrations.'
8950,123810333,b'(Discussed offline.) Looks good.'
8951,123652418,b'@bricelam - Why do we need this extension method? SQLite calls `GetString` etc method directly. Is there anything different in SqlServer which requires this?'
8951,123786322,"b""IF the data might contain `NULL` values, it's convenient. Otherwise, it tries to cast `DBNull` objects resulting in an invalid cast exception."""
8951,123786652,"b'I double-checked all the places in SQLite, and there was only one column that was nullable, So I just decided to inline the logic:\r\n```C#\r\nvar value = !reader.IsDBNull(0)\r\n    ? reader.GetString(0)\r\n    : null;\r\n```'"
8953,123786522,b'var'
8953,123787911,b'Remove metadata/builders relating to parameters.'
8953,123788536,b'Add a note about the convention for function name when using the default .ctor.'
8953,123788828,b'Why these casts?'
8953,123789338,b'CanBeNull or add Check.NotNull'
8953,123789728,"b'The unit tests look at the parameters collection to make sure the convention ran correctly.  One of the changes was to remove the parameters collection from IDBFuction, so I need to either cast or use reflection so I can make sure everthing was built correctly.\r\n\r\nThe other options is to add the parameters collection back onto IDBFuction.'"
8953,123789907,b'see my note below on why I had to do this.'
8953,123790696,b'Ok - will switch over to direct constructor calls and remove the InternalParameterBuilder'
8953,123792470,"b""I just realized there is a bigger issue with this.  DBFunciton.Translation passes an IDbFunction to the callback.  The end user won't have access to the parameters.  We either need to change the callback signature to pass DbFunction, or add the parameters collection back to IDbFunction.\r\n\r\nWhich way do you guys want to go."""
8953,123794946,b'We want to remove all trace of parameters including DbFunctionParameter \xf0\x9f\x98\x84 '
8953,123808451,"b""We actually don't need to do any processing of parameters at all. DbFunction will store methodInfo/FunctionName/Schema. The Translate will do any processing of parameters if needed else, we will just forward the args of MethodCallExpression as is."""
8953,123808643,b'Does this file move to root folder? @ajcvickers '
8953,123808953,"b""We don't need this class"""
8953,123809825,"b'It should, yes.'"
8953,123810188,"b'Does `Translate` needs access to `IDbFunction`?\r\nActually `Translate` can be `Func<IReadOnlyCollection<Expression>, Expression>`\r\nWhen user configures it, they know which DbFunction it is already they just need to utilize the args and construct the translated expression. The only usage DbFunction had in test was to use return type which is also removed.\r\n'"
8953,123813480,"b'@smitpatel - It does have the name and schema which could be useful, but to your point if they are doing things manually they should know what they want for these values.'"
8953,123823881,"b""Indeed. So we should simplify it further.\r\nAlso if user is providing manual translation then name & schema should be absent. We are not strictly enforcing this but they won't be used anyway. """
8953,123861199,b'nit: `.NET`\r\nor @divega would know lol'
8953,123861371,"b""Capitalized.  I'm open to a better sentence if someone has one."""
8953,123862947,"b'drop function at the end.\r\n`A method for converting a method call into sql.\r\n(of course user would need to understand how to generate ""sql""'"
8953,123863169,b'@anpete - Do we want the lambda to have `dbFunction`?\r\n\r\nThe only thing it is being used is for return type which user is aware of while calling the method. The other properties on DbFunction is name & schema which is also user known. If we remove DbFunction from here then we can make return type private field instead of exposing as public property.\r\n'
8953,123863397,b'@smitpatel So we need ReturnType?'
8953,123864078,"b'We need return type when we invoke ""SqlFunctionExpression""\r\nFor internal purposes, we can store it in field in `DbFunction`\r\nFor user fluent API, user can write explicitly without depending on DbFunction.\r\nI am not seeing enough value to provide user access to `DbFunction` in the lambda expression because it will be at the same place where user is adding DbFunction.'"
8953,123864112,b'I think we can remove return type and use the return type on methodinfo to check for a supported return type.'
8953,123864417,b'Yes the only item the user could use from dbfunction is name and schema.  They can just capture those in the lambda closure they pass into translate.'
8953,123867056,b'@smitpatel We wanted to try and do what @pmiddleton said about ReturnType :smile: Only question was whether or not it can be different from CLR method return type.'
8953,123867848,"b'The only place where I could see the return type being different is if someone wanted to expand or truncate a datatype on purpose.  \r\n\r\nSay the database function returns int and you try to map it to a long, or vise versa.  What will the materializer/shaper do if the returned datatype is convertible, but not an exact match?  \r\n\r\nI can see the end user getting into a lot of trouble with this ability.  They may try making the .NET method return one type and the database function return another and expect it to automatically convert.  Like returning a string and trying have it automatically parse to an int.\r\n\r\nI say just force the return types to match and then use the methodInfo return type.'"
8953,123868192,"b'Sounds good. We are going to handle the type conversion issue as a separate feature anyway, so this will just be another place where it may apply.'"
8953,123868743,"b""Plus if we need to add it back in at a later point that is easy to do, but once it is in the wild we can't as easily pull it back."""
8953,123868763,b'I have pushed updated code with the return type removed.'
8953,123889186,"b'Another instance of "".Net"" here. I would consider removing it so it is just ""the method"". Also, for ""datastore"", prefer ""database.""'"
8953,123889214,"b'Consider removing "".Net"" or make it uppercase.'"
8953,123889220,b'It is actually a few lines above.'
8953,123889240,b'There are more.'
8959,123885430,b'Consider using ArrayList here to avoid allocating during Cast.'
8959,124088648,"b'ArrayList requires an ICollection, but we only have an IEnumerable'"
8959,124089949,b'Typical!'
8964,124075406,b'add test for nested groupby'
8964,124075666,"b'also, make recursive?'"
8964,124092916,"b'Copied existing logic from TrackEntitiesInResults, will file a bug to investigate whether it is good enough.'"
8975,124123560,b'The common pattern is to not put the *thrown if* (or *when*) part.'
8975,124130336,b'Fixed here and other places in the code.'
8958,123847981,b'redundant'
8958,123848009,b'redundant'
8958,123848054,b'redundant'
8958,123848439,b'Updated'
8958,123850027,"b'this is wrong, order of the characters shouldn\'t matter. e.g. ""alfki"".TrimStart(\'l\', \'a\') should result in ""fki"", just like ""alfki"".TrimStart(\'a\', \'l\') - also add test like this'"
8958,123852852,b'nevermind :)'
8958,123862662,"b'@bricelam - Do you have any other approach how to deal with this?\r\nThere are ""extra"" overloads in netcoreapp2.0. In other tfm it resolves to different overload.\r\nAt present I am checking equality if not null.'"
8958,123870889,b'This seems best to me.'
8968,124076306,"b'> warning MSB3568: Duplicate resource name ""LogColumnNameEmptyOnIndex"" is not allowed, ignored.\r\n\r\nWill fix.'"
8913,123278523,"b'Would ""create an object of type"" be ""easier"" than ""instantiate""?'"
8977,124360510,b'Why not expression body? :trollface: '
8960,123860484,b'all the code below will go away - it will be unified with helper methods in complex navs'
8960,124369078,b'weird name.'
8960,124369390,"b'whoops, will clean this up'"
8983,124388590,b'SQL assertion may be? Or validating Query plan indicating that there is actually no parameter.'
8987,124379791,b'this seems bad - should we add a context option to get the old behavior? or perhaps introduce a warning telling people to switch to nullable type to avoid N+1'
8987,124382048,b'Bad because we are changing the behavior? We already did the right thing for Single etc. and so this is just fixing that inconsistency. We will gen a client-eval warning as expected.'
8987,124383255,b'Going to add a new warning for this specific case.'
8987,124408543,"b'after merge you will have to add ordering func to this (because it projects anonymous type, like so:\r\n\r\nAssertQuery<Order>(os => os.Where(o => o.OrderID < 10300)\r\n        .Select(o => new { o.OrderID, Sum = o.OrderDetails.Average(od => (float?)od.Discount) }),\r\n    e => e.OrderID);'"
8987,124408718,b'client evaluation'
8987,124412688,b'nit: comment parameter name for  bool value?'
8990,124415914,b'`out var`'
8991,124426490,b'Do we know why these need to be disabled?'
8991,124426629,b'collection navigations are not supported in owned entites'
8991,124426732,b'merge If'
8991,124427095,"b""Shouldn't we just end up in this else branch instead (by making the first if conditions more explicit)?"""
8991,124427277,"b'yup, just made this change'"
8991,124431685,b'Save result of Remove Convert'
8991,124432112,b'done'
8989,124403933,"b'I did try to be more explanatory, but the explanation got too long to display easily. But if anyone has a better idea of what to say here speak up. '"
8989,124408486,b'Pass as argument.'
8989,124412973,b'The design of passing func all around seems bad. All the naming happens inside of `RelationalScaffoldingModelFactory`. It should be contained within.'
8989,124413256,"b""I can see the argument (if you'll forgive the pun) for that."""
8989,124414689,"b'The problem is that `UseDatabaseNames` is used in 2 places: 1) when we originally come up with candidate names (the default is to ""Pascalize"" the database name), 2) when we pluralize or singularize. In the past the algorithm was:\r\n\r\n1. Come up with candidate name\r\n2. Make sure it\'s a valid C# identifier\r\n3. Uniquify\r\n4. Pluralize or singularize\r\n\r\nSteps 1 and 4 were done outside of `CSharpUtilities`, but 2 and 3 were done together at one time within it.\r\n\r\nIt was rightly pointed out in the bug that step 4 ought to happen before step 3. But this involves either coming back to the code that was calling `CSharpUtilities` between steps 2 and 3 above, or passing into `CSharpUtilities` what needed to be done. Since we already used the process of passing in a `Func` for the uniquification it seemed better to me to pass in a `Func` for this too. The other way will work as well - but we would then have to have separate calls within the calling code to `CSharpUtilities` to do step 2), then perform singularize/pluralize, then call back to `CSharpUtilities` to uniquify. That would be messy too.'"
8989,124419386,"b""I traced back why do we need to pass, func for uniquification. The only part when it differs is naming navigations. Interestingly it has note to do it using `CSharpUniqueNamer`.\r\n\r\nNow the default func to uniquify is in `CSharpUtilities.Uniquifier`. The only case when it uses the list of identifiers is when naming navigation because the uniquification for rest of the stack happens using `CSharpUniqueNamer`.\r\n\r\nSo apart from 1 block (navigations), we do have every part in above list modularized. \r\nOf course best option would be to remove special processing for navigations but if that is bit far-fetched goal for this PR then, we should split it out to a single method in `CSharpUtilities` which does only step 3 in above list.\r\nThen we can move around pluralizer & uniquifier. And then we don't need to pass in anything to `CSharpUtilities`.\r\n\r\nOverall design would be,\r\n1. CandidateNamingService\r\n2. Make C# identifier\r\n3. Pluralizer\r\n4. Uniquification\r\n\r\nStep 2,4 will call method in `CSharpUtilities` (Step 1,3 are services in ScaffoldingModelFactory)\r\nIn CSharpNamer, it calls the same method as step 2.\r\nUniqueNamer will also call the method used in step 4.\r\n"""
8989,124488150,"b'""Use database column and table names as-is"" ?'"
8989,124673386,"b'I started doing the plan above, but there is also a 5th step - which is storing off the generated name, so that a future name (generated in the same context) will clash causing uniquification. That was starting to get really complicated so (after talking this over with @smitpatel) going back to the original plan for now. I added a step in #8853 to cover fixing this properly.'"
8989,124674734,"b'Thx, @ErikEJ. I started with that - but we do still make sure they are valid C# identifiers and that they are unique - so we may change them a little. That made me uncomfortable with using the phrase ""as is"".'"
8998,124610411,b'\xe2\x9c\xa8'
8998,124613019,b'No logging for RevEng?'
8998,124613577,b'Question: Why do we have to add this as service? '
8998,124615776,b'Handled by adding the provider in `serviceCollection.AddLogging()`'
8998,124616143,"b""Because the tests don't use the full design-time services builder--just the `AddScaffolding` piece. We should update them... I'll add a note to the internal cleanup issue."""
8998,124617358,"b'(But yes, only the providers use Logging. Everything else uses IOperationReporter directly.)'"
8976,124689197,b'Is this yet another test initialization pattern? \xf0\x9f\x98\x84 '
8976,124689472,b'Consider adding a comment describing the algorithm here.'
8976,124690080,b':cry:\r\nDo we need to create new store everytime? Have a fixture based testing'
8976,124690342,b'This seems unusual - why is dependents declared using IReadOnlyList?'
8976,124690453,b'how does foreach & throw Exception work together? \xf0\x9f\x98\x95 '
8976,124691329,b'I wish there was another way to right this code to make it self-explanatory. (or you can suggest something)\r\nIn brief the algorithm is\r\nInput List of entity types\r\n1. Take first entity type and make it first node in graph.\r\n2. Find all ETs which are either derived type or connected via identifying relationship and add them to graph.\r\n3. Repeat step 2 till graph no longer expands.\r\n'
8976,124691750,b'Can we use LINQ for this?'
8976,124692475,b'There seems to some mismatch here. Dictionary.Value is readonly list but the value being assigned is List instead. Consider making it one type.\r\nIf Readonly list is needed for perf then consider making them explicitly.'
8976,124692804,b'We moved from one bug to another \xf0\x9f\x98\x85 '
8976,124693210,b'Progress! :trollface: '
8976,124693407,"b'If we get here and invalidTypes.Count > 1, then why not just exit the loop above early. I.e. stop on the first invalid type.'"
8976,124693565,b'Maybe something recursive like in EagerLoadingExpressionVisitor.WalkNavigations?'
8976,124693680,b'It is due to graph traversal.\r\n\r\nFor the graph of A->B->C and starting point as A. Till B is discovered C is invalid type. So we need to iterate over the graph till it expands (and stabilizes). Then only we can be certain of invalid type.\r\n'
8976,124694082,"b'Similar.\r\nOne difference I see is, in WalkNavigations, we know all outbound edges, we do DFS and add the leaf nodes. So the graph is known we are just walking.\r\nHere we have list of nodes in which need to find the edges, hence create the unknown graph.'"
8976,124876879,"b""The fixture is unnecessary as we don't share anything. The store needs to be created every time to get a clean database"""
8976,124883745,"b'`ModificationCommandIdentityMap` constructor takes `IReadOnlyDictionary<IEntityType, IReadOnlyList<IEntityType>>` and one cannot cast `Dictionary<IEntityType, List<IEntityType>>` to it.'"
8976,124884138,b'It would be uglier IMO'
8976,124886436,b'I refactored this to look like a BFS'
8976,124887620,b'Can you change the name of parameter in lambda?\r\npicking validatedType from unvalidatedTypes enumerator :trollface: '
8976,124888404,b'This can be removed when `Enqueue`ing if nextTypeSet is allocated using `ToList()`.\r\nWhichever is more performant \xf0\x9f\x91\x8d '
8976,124888573,b'This was added specifically to avoid ToList() \xf0\x9f\x98\x84 '
8976,124888620,b'`FindIndex` method?'
8976,124889424,b'Do we have that or are you proposing to extract it?'
8976,124891611,b'`FindIndex` is on List. ~You can use `First`. Would do the same as above loop just smaller code.~\r\nLeave it as is.'
8976,124892171,b'Is this better?'
9020,124925711,b'When did this become a thing? For consistency use ```// ReSharper disable``` syntax'
9020,124926168,"b'Curious, can these just be put on the class itself? (DRY)'"
9020,124926476,b'Even if we could they have different flags on different test'
9020,124926731,b'XUnit could combine :-)'
9020,124927027,b'Or we could'
9020,124927609,b'That would add complexity for little value'
9020,124927918,b'Disagree. Elegant and DRY.'
9020,124928197,b'`IsNoTeamCity` on class.\r\nand all tests would have `ConditionalFact`'
9020,124931119,"b""Ok, it works if I put it on the immediate class, so it's not completely DRY, but better"""
9008,124681594,b'Is there a specific reason you guys are on 4.6.38-alpha instead of 4.7.1 like the rest of the repos? Is so we might have to find another solution for you.'
9008,124681725,b'Yes. Try upgrading it and see test failures \xf0\x9f\x98\x89 \r\n\r\n#7627 '
9008,124847777,b':shipit: (this change)'
9008,124856206,"b'Hmm, ok. @mikeharder and I were wanting all the Universe repos to be warning free for 2.0.0. Do we think getting #7627 done for 2.0.0 is realistic or do we need to pursue another solution?'"
9008,124862755,b'I can try to upgrade Moq and see if I can fix the test failures.'
9008,124923699,b'Missed a closing bracket here'
9008,124924782,"b""Yep. My VSCode is broken, it didn't hightlight."""
9026,125095023,b'Can uncomment the parameter name'
9026,125095132,b'Can uncomment the parameter name'
9026,125111377,"b""The callback return doesn't have to be a SQL Expression anymore, perhaps add a links to the docs?"""
9026,125112619,"b""Wouldn't this make the column variable length in the schema? I thought we would only do this for parameters."""
9026,125113219,b'Nope. The only thing Migrations cares about is the store type name. DbTypes are only used for parameters.'
9026,125113284,b'@divega Do you want to create a fwlink for this?'
9026,125113487,b'ADO.Net continues to confound me \xf0\x9f\x98\x95 '
9026,125140805,"b""Both these are captured into an expression tree by MOQ, and expression trees can't have named arguments."""
9032,125140758,b'reference to diet \xf0\x9f\x99\x81 '
9026,125160171,b'@ajcvickers https://go.microsoft.com/fwlink/?linkid=852477.'
9026,125190532,b'Thanks @divega. Pushed it.'
9034,125189370,b'Leave this in please. This was added because there were cases where calling DetectChanges multiple times would result in bugs showing up.'
9025,124956731,b'Type names can contain spaces. (e.g. `DOUBLE PRECISION`) Do we need to quote these in square braces?'
9025,124962880,"b'We could. Or its just YAGNI may be.\r\nWe are just special casing ""real"" on SqlServer here. Instead of using StoreType, we can just write real itself. In any case if someone decides to override this, they may probably end up providing own SqlLiteral generation.\r\n\r\nLet me know what should we use here. I am fine either way. Bit preference for no braces for saving few characters in Sql\r\n'"
9025,125065671,"b""Looks like `ExplicitCastExpression` doesn't use braces either. Leave 'em off."""
9025,125085726,"b'What does the generated ""HasDefaultValueSql()"" call end up looking like when we do RevEng on a SQL Server REAL column which has a default value? It looks like it may look very strange. Do we always need the `CAST()` call or only in certain (query?) situations? And if so should we provide a separate method to produce that?'"
9025,125087318,"b'`HasDefaultValueSql` puts up the SQL as is from database. We never generate `HasDefaultValue`.\r\n\r\nThese is how we can actually generate a real literal in SqlServer. else it will be float literal always. While it may not cause issue in some cases but once you do any operation with any other real column, the float literal will use the higher type, regardless of where it is being used. Since the point of this method is to _generate real literal_, the explicit casting is right way to do it.\r\n\r\nThe only issue with bigint is `Sequence` creation DDL where even if the StartValue is any numeric type, it will be converted to the type of the `Sequence`, perhaps we should special case migration.'"
9025,125093489,"b""OK. Good. Glad it doesn't affect `HasDefaultValueSql`."""
8986,124418920,b'Use out var'
9072,125763358,b'Rewrite this avoiding using `IConcurrencyDetector` directly to cover the real use case.'
9072,125763657,b'Very hard to make it reliable...'
9072,125767413,b'Filed https://github.com/aspnet/EntityFramework/issues/9074'
9075,125784919,"b""Can we say something that indicates it was ignored and we continued?\r\n\r\nMaybe something like \r\n```\r\nAn error was ignored while calling method 'BuildWebHost' on class '{startupClass}'. Error: {error}\r\n```\r\n@divega?"""
9075,125785885,"b'@ajcvickers agreed. Maybe `An error occurred but was ignored...`, or whatever make the most sense in English.\r\n'"
9075,125957614,"b""How does this sound?\r\n\r\n> An error occurred while calling method 'BuildWebHost' on class '{programClass}'. **Continuing without the application service provider.** Error: {error}"""
9075,125978692,b'I don\xe2\x80\x99t have a strong preference.'
9092,126043226,b'You only need `queryModelVisitor.QueryCompilationContext`\r\n\r\n'
9094,126042733,"b""Since you're in the file maybe fix the typo at line 71: `scaffoldMaxLength` is missing the `t`."""
9094,126058200,b'\xf0\x9f\x8e\x89'
9094,126058230,b'\xf0\x9f\x8e\x89'
9079,126047266,b'What exactly changed here? Seems like auto-loading of owned navigation is dropped.'
9079,126047339,"b'These are no longer owned types, just dependent types'"
9091,126040801,b'Shadow nav property?'
9091,126040989,"b'yes, for snapshot'"
9091,126041263,b'Does this mean Owns always means required?'
9091,126041395,"b'Yes, it has to be, since it creates an identifying fk.'"
9091,126041528,b'Doh. \xf0\x9f\xa4\xa6\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f '
9091,126044517,"b'can you remove ""diet""'"
9095,126040504,b'We are reaching close to `ModelVisitor` just like `ExpressionVisitor` \xf0\x9f\x8e\x89 '
9095,126041372,"b""I thought about it, but there's really not that much to traverse."""
9095,126046495,b'Do we need better warning? :trollface: '
9095,126046866,b'Should this be ISnapshotModelProcessor?'
9095,126046983,b'Oops!'
9095,126047059,"b""I'm fine with ISnapshotModelProcessor or ISnapshotProcessor , but I didn't worry too much since it is internal anyway."""
9095,126047101,"b'I would say this is not efficient, but this is migrations...'"
9095,126047171,b'Indeed.'
9095,126053554,b'We should only do this for 1.x models'
9095,126193681,b'Fixed.'
9095,126193709,b'Fixed.'
9095,126193998,b'Changed to ISnapshotModelProcessor '
9096,126040873,b'TODO?'
9096,126040993,b'alignment? '
9096,126043693,"b'If I didn\'t look at the code I wouldn\'t be sure what kind of info. Are you going to tell me about it\'s properties and constructors? I\'d add some kind of adjective(s) before ""information"", maybe ""provider and connection""?'"
9096,126056763,b'Intentionally vague. This command will likely evolve over time with whatever information we deem interesting.'
9096,126056881,b'Worse: Tabs \xe2\x9e\xa1\xef\xb8\x8f \xf0\x9f\x98\xb1\xf0\x9f\x99\x80\xe2\x9d\x97\xef\xb8\x8f'
9096,126056894,b'See PR #9090'
9103,126224420,b'`ICSharpHelper.Identifier()` can take care of uniquifying if you keep track of the names used in the current scope.'
9103,126228225,b'Then I would need to flow the scope. Current approach seems simpler.'
9108,126251424,b'Update this to rtm too.'
9153,126838792,b'Remove `IMB.Validate`'
9153,126841062,b'Should this interface be IDisposable?'
9153,126841284,b'What causes this change?'
9153,126842110,"b'Never mind, figured it out.'"
9153,126842312,"b'Using ModelCustomizer, it configures table names as DbSet names'"
9177,127356657,"b""Isn't the Count method checking this already?"""
9177,127356750,b'I mean the Count benchmark.'
9177,127356754,b'It first checks no. of groups And then no. of products in each group.'
9177,127356973,"b""Isn't this and the 'is int' case all the only sanity checks that we need? """
9177,127359579,b'@smitpatel and I talked about why the namespace is used. It is because we still have our own attribute also called Benchmark. It will go away.'
9177,127359684,"b""Will remove all result checks. We just need one sanity check to verify data we don't need to verify results.\r\nI will try doing it in ctor or GlobalSetup whichever is invoked lesser times."""
9177,127360069,"b'In the switch to BenchmarkDotNet we are loosing the ability to decide when we actually want to ""start collection"": the perf of the whole method will be reported. Hence we want to make sure that the overhead of the machinery we are using to apply tracking vs. no tracking and and async vs. non-async isn\'t skewing the results. @smitpatel will try comparing runs of the parameterized method vs. the a non-parameterized method. '"
9177,127392776,"b""That's true. For cases where the added conditional overhead of benchmark parameters (e.g. sync vs. async) is important, it's always possible to break down the single benchmark into multiple (i.e. WhereSync vs. WhereAsync). However, I'm guessing the overhead here is supposed to be marginal (after all database I/O is being performed), otherwise that itself may be a performance issue :)"""
9163,127095483,"b""this provides functionality that we use in owned complex navs, where we do additional processing on context.Set<T>() before it's used in a query."""
9163,127095653,"b'this is temporary, once all the tests using static NorthwindData are moved to the new pattern, the static class will be removed'"
9163,127095746,b'You could extract this back into `AssertQuery` for more DRYness'
9163,127563807,"b'switch to abstract class, since we are likely to add more methods?'"
9163,127565016,b'Missed these 2'
9163,127565206,"b"">QueryFixtureBase [](start = 17, length = 16)\r\n\r\nThis should be an interface, otherwise it won't be compatible with the new test pattern I'm working on"""
9163,127565440,b'Can these be moved to QueryTestBase?'
9163,127565839,"b'Sure, give it a go. Perhaps the only abstract method we actually need is CreateContext()\r\n\r\n---\r\nIn reply to: [127563807](https://github.com/aspnet/EntityFramework/pull/9163#discussion_r127563807) [](ancestors = 127563807)'"
9163,127567131,b'IClassFixture<TFixture> requires TFixture to be a class'
9163,127567532,"b""That's fine:\r\n```C#\r\nwhere TFixture : class, IQueryFixtureBase, new()\r\n```\r\n"""
9189,127770534,b'Can we have better variable names? Perhaps indicating what this command used for.'
9189,127770739,b'blank line?'
9186,127764324,b'Can we have consistent pattern that ctor of test is at top? SqlServer test has line to enable logging in ctor and it would be good to have a fixed location always.'
9186,127767129,"b'>[ [](start = 8, length = 1)\r\n\r\nWhy this was removed?'"
9186,127769233,"b'Merge with `GetOrCreateShared(string, string)` ?'"
9186,127777871,"b""This one doesn't run `InitializeShared`. I'll remove the other method once all tests are converted"""
9186,127778194,"b'I moved it to `IncludeTestBase`, seemed out of place here.'"
9177,127856324,b'No EF?! :trollface: '
9177,127859985,b'Cannot use EF since this is class library shared between EF6/EFCore1.1/EFCore2.0/EFCore latest dev. \xf0\x9f\x98\x89 '
9177,127861839,b'Web service! :trollface: '
9149,126842323,b'Can we use indenting consistent with the other projects? (Which is what we have R# set to do cleanup as.)'
9149,126842440,"b'Is it work crefing these? (Probably not since they are primitives, but maybe it could be useful?)'"
9149,126842795,"b'Should ""reflection"" have an upper-case ""R""?'"
9149,126842826,"b'Based on feedback from Rowan when he was doing API docs, we no longer do ""summary"" and ""remarks"" but instead split things with multiple ""para"" paragraphs. Not sure if this has changed, or if we should sometimes do one and sometimes do the other, but would be good to know/decide and be consistent.'"
9149,126844111,b'Will do. Got tired of fighting VS...'
9149,126844451,"b'I thought about it, but wanted to reinforce that these were more about the C# language concept and not the CLR types...'"
9149,126844539,"b'lol, the whole sentence could probably use some rewording. Will update'"
9149,126844675,b'In the end VS wins always :trollface: '
9149,126844918,"b""The motivation was because remarks don't show up in intellisense--only on MSDN. I'm fine either way. My thought was that almost nobody would be using these so only having it on MSDN (or docs.microsoft.com I guess) would be sufficient. """
9149,126984542,"b""I was thinking about this last night (because I'm such an exciting person that I think about such things on my evening!) and think that the idea should be that if there are multiple paragraphs of information that are very relevant and so should show up in Intellisense, then we should use paras in the summary. Only in places where there is some incidental comment that's not super important should it go in remarks. So remarks should be quite rare, because most of the time if it's worth writing it, then it's worth showing up in the Intellisense."""
9149,126984764,b'I can always run R# cleanup on it after it goes in... :trollface: \xf0\x9f\x98\x89 '
9149,126984938,b'Agreed.'
9232,128858849,b'\xf0\x9f\x98\x8f'
9232,128863464,b'Just removed (not altered).\r\n(Below too.)'
9232,128864831,b'\xf0\x9f\x98\x86 *fluentish*'
9232,128867023,b'\xf0\x9f\x99\x80'
9232,128875132,b'R# code clean up :trollface: '
9235,128868509,b'Can remove.'
9236,128869668,"b""This won't be available. Should it be `2.0.0-preview2-final` until `2.0.0` ships?"""
9236,128873797,b'Updated to preview2-final. Will change to 2.0.0 once we ship.'
9232,128881975,b'I ignored the spell checker on this one. Really want to leave it in. :-)'
9234,128852084,b'Do this in Base?'
9234,128853359,b'Marking all methods virtual. & doing stuff in base wherever common.'
9234,128867975,b'Would be nice to not have to update this every time we add a new test.'
9234,128873965,b'Discussed with @bricelam . This allows us to run particular test locally if we want to run. Whenever adding new benchmarks you need to add line here to test anyway so keeping this as is also have value.'
9243,128877610,b'Should a schema be added here?'
9243,128886588,"b""I think the intent has been superseded by the spec tests. There's little point to doing it now."""
9232,128888724,b'Totally fine with it; articulates my feelings about this API well'
9240,128888701,b'Can keep at 2.0.0'
9258,129389140,b'Remove'
9283,129986770,"b'File names will match in the final checkin, current state is just to make CR easier.'"
9283,129987621,b'codeflow makes it easy :)'
9283,129987922,"b""You could extract this value to a property 'Async' , then derive 'AsyncQueryTestBase' from 'QueryTestBase' and override the 'Async' property there"""
9283,129988389,"b""You don't need async/await if the only call you await on is the last one"""
9283,129988838,b'The restriction on TResult seems unnecessary'
9283,129989058,"b""#9074 isn't fixed yet"""
9283,129989230,b'you still need to return the Task'
9284,129988965,b'@pranavkm @ryanbrandenburg - This is feed for BenchmarkDotNet nightly packages. We need their nightly build for a critical fix till they push a new package to NuGet.'
9284,129989228,b'https://github.com/aspnet/EntityFramework/issues/9285'
9284,129989382,b'https://github.com/aspnet/EntityFramework/issues/9286'
9284,130108183,"b""BenchmarkDotNet v0.10.9 (with fix for https://github.com/dotnet/BenchmarkDotNet/issues/481) has been released, it's already available on nuget.org: https://www.nuget.org/packages/BenchmarkDotNet/0.10.9"""
9305,130426739,b'@Eilon for 3rd party dependency change approval.'
9305,130437250,"b""this shouldn't be needed"""
9305,130437608,b'There is no overload which satisfy `IQueryable<string>`'
9305,130483295,b'Done!'
9315,130721796,b'Even though comment says no `DiagnosticsSource` events there are still events defined in `SqlServerEventId`. Since that class is public but not internal I cannot remove event ids. (hence left cleaning up other verbose logging)'
9315,130743704,"b'```csharp\r\nnew[] { ""User"", ""Comment"" }\r\n```'"
9315,130743847,"b""Couldn't remove any thing."""
9315,130743964,b'Removing from logger and having event id fails a test.'
8950,131034522,b'This speculation was correct. It indeed causes issues while recreating using migrations. filed https://github.com/aspnet/EntityFramework/issues/9324'
9349,131791199,b'Should this test use fixture instead of creating test store in each test?'
9349,131792044,b'Does it not throw anymore?'
9349,131792738,"b""I stumbled upon this class not using fixture (perhaps creating new db is really cheap in sqlite).\r\n\r\nInstead of modifying all tests this way, we should adopt the pattern same as SqlServer i.e. clean up script. So we use one db only but we don't have any other objects than what test needs.\r\n"""
9349,131793106,b'Are we certain this works? :trollface: We can test out feature branch'
9349,131793113,"b""The model is different in the tests, so there's really nothing that can be shared in a fixture"""
9349,131793439,"b""It does, but we usually don't test precondition checks"""
9349,131793968,b'Maybe you could do this as part of the reveng test cleanup \xf0\x9f\x98\x89 '
9349,131794050,"b'We did, seems to work'"
9349,131794173,b'Can you leave test as is then? It would be more work if you modify this file like this. \xf0\x9f\x98\x9e '
9362,132038114,b'Why does source code depends on TestUtilities? It would be better to keep utilities separate. (cannot break source utilities but can break test one)'
9362,132044525,b'Should have reviewed the files before sending the PR \xf0\x9f\xa4\xa6\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f '
9362,132060791,b'Intentional?'
9362,132060870,"b'Yes, the scenario was moved to `OptimisticConcurrencySqlServerTest`'"
9362,132061711,b'Why this test needs to create own service provider?'
9362,132062095,b'Is this correct namespace? & it does not correspond to the folder name.'
9362,132063619,b'Fully converting this test to the new pattern will take more time. This change is the first step.'
9364,132068435,"b'algorithm for finding all the matching navigation paths on derived types (that match the given name pattern). We need to find at least one fully matching chain, otherwise we throw the exception. Provided that this fully matching chain is found, other chains that are only partially matching will be included also. '"
9365,132077689,b'Has this Roslyn bug been fixed yet?'
9365,132302029,"b'No, still puts attributes on the override'"
9363,132076774,b':tada:'
9363,132077090,"b'Can we remove these resources and APIs? If not, we should mark them as obsolete.'"
9363,132079558,b'I cannot remove the APIs ( \xf0\x9f\x98\xa2 )\r\nThe logger methods are in internal namespace. The resources are in internal namespace. but there is a test which complains that for each event id there should be logger method with same name. Are we supposed to mark things in internal namespace as obsolete? \r\nEventIds are public so cannot break them.'
9363,132085554,"b""Maybe we should allow marking event IDs as obsolete in the test so it doesn't fail for them."""
9363,132316422,b'I am leaving this as of for now. Will file an issue.'
9386,132750504,b'Remove'
9386,132750561,b'Remove'
9386,132750729,b'The old code is so much more readable.'
9386,132750818,b'I like the old code better.'
9386,132751156,"b""We shouldn't change anything under the `CommandLineUtils` directory. It's a fork and merging upstream changes will be more difficult."""
9386,132751327,"b'Not DRY. IMHO, only one partial should specify visibility.'"
9386,132751591,"b'Also, why no expression bodied getters and setters?'"
9386,132754626,"b""Agree, but that wasn't consistent with other places. Will reformat manually."""
9386,132755210,b'Would it be better with expression body?'
9386,132755765,"b'R# limitation, will revert'"
9386,132776543,"b""We don't do this automatically because too many expression bodies in a file cause VS to become unresponsive"""
9386,132780492,"b""Meh. Don't really care. If I ever happen to put an attribute on these I'll do it above, but I don't mind if they periodically get reformatted by R#."""
9332,131277966,b'Will revert. Using to test on AppVeyor.'
9332,131278352,b'tab'
9332,131476081,b'Consider renaming to something like EqualMultiline and remove `fixEOL` parameter'
9332,131498277,"b'That was one option I wanted to discuss. This was the idiomatic, vanilla version that I wanted to use to start the discussion in a design meeting.'"
9332,131498457,"b""I'm awfully tired of satisfying R# on this point."""
9332,131498548,"b""(But I don't mind if someone wants to run R# cleanup periodically to catch these.)"""
9332,131508811,b'Is it R# thing? I thought that was rules we had to adheres to.'
9332,131510495,"b""Yeah, it just happens to be the way R# formats them. I don't think we ever formalized it as a rule."""
9332,132568671,b'Note: Fixing up the expected value here since it was the path of least resistance.'
9255,130693572,"b'You can drop ""Executes the command to"" here'"
9394,132807740,b'Anyway to DRY the MARS randomization (with line 435)'
9394,132808465,b'Is this intentionally false?'
9394,132808487,b'What is the reason this need MARS=true?'
9394,132809813,b'Extracting a method would be more code'
9394,132809817,b'yes'
9394,132809822,b'some of the tests fail without it'
9394,132809863,b':trollface: '
9394,132810720,b'LOC is not the important metric. DRY means that the logic is expressed in one place. '
9394,132811566,b'Is that another bug we are tracking or expected?'
9394,132811838,"b'FWIW, I think that a single `CreateConnectionString` method with mandatory `databaseName` and optional `filename` and `multipleActiveResulsets` arguments would be easier for me to follow. Then If you have to hardcode MARS to `true` or `false` you have to do it explicitly in the call (and it would be good to add a comment explaining why). '"
9394,132811849,b'Why? :smile:'
9394,133014653,b'indent'
9394,133069809,b'Filed #9404'
9410,133093353,b'This is kind of unrelated but disabling R# solution-wide analysis '
9303,130386268,"b'Should this default to ""dbo"" always or whatever is defined on model?'"
9303,130388430,"b""I'm not understanding your question.  With this change if you don't set a schema it will default to dbo.  \r\n\r\nOne thing I just thought of is if we should use the global schema if it is set or go with this default.\r\n\r\n@anpete thoughts?"""
9303,130396035,"b'> One thing I just thought of is if we should use the global schema if it is set or go with this default.\r\n\r\nThat\'s what I meant. If user has done \r\n`modelBuilder.HasDefaultSchema(""MySchema"");`\r\nThen should function go there?'"
9303,130405055,"b'Should it be `IModelBuiltConvention`?\r\nSo that once the model is fully built, plug in missing schemas in DbFunction based on default if set on model or ""dbo""'"
9303,130417886,b'Would there every be a reason someone would try to pull the schema back out of a function before finishing building the entire model?  That is the only thing I can think of where waiting for `IModelBuiltConvention` would be different.'
9303,130418370,b'Suppose user defines a function without configuring schemas & then define the default schema.'
9303,130419535,b'Yea that would be worse.  Ok ill refactor it tonight.'
9303,130476474,b'Ok I switched it over to `IModelBuiltConvention`  I need to pop a few unit tests to deal with the defaultSchema vs defaulting to dbo still.'
9303,130940651,b'@AndriySvyryd - Name sounds good to you?'
9303,132731737,b'would this be same as `_model.Relational().DefaultSchema`?'
9303,132747701,b'yes - I will switch it to add the abstraction back in.'
9303,132777770,b'Use `StringComparison.Ordinal`'
9303,132778283,b'Also in `RelationalDbFunctionConvention`.\r\nActually you can derive this from `RelationalDbFunctionConvention` and replace it in `SqlServerConventionSetBuilder`'
9303,132848191,b'Calling base this way means the check is happening twice. Instead a helper function to do the task of setting name/schema which can be overridden in derived convention could be more DRY.'
9450,133829697,b'Should this be `mi.GetParameters().Length == 2` ?\r\nAnd also check that it only has one generic type argument'
9450,133837385,b'I should just pass the full list of generic args from the old method.'
9398,132807364,"b'this will be improved (i.e. made sargable) as part of general purpose improvement, tracked here: #9395'"
9398,132807885,b'Do we need two passes? Or can we just do one pass here? cc @smitpatel '
9398,132808336,b'I believe the first one can be removed.'
9398,133269889,"b'Should this be default behavior of method? If not, collapse two if statements.'"
9398,133270244,b'This still used?'
9398,133271703,"b""Some proposed tweaks:\r\n```\r\nThe {methodName} property lambda expression '{includeLambdaExpression}' is invalid. The expression\r\nshould represent a property access: 't =&gt; t.MyProperty'. To target navigations declared on derived types,\r\nspecify an explicitly typed lambda parameter of the target type, E.g. '(Derived d) =&gt; d.MyProperty'. For more\r\ninformation on including related data, see http://go.microsoft.com/fwlink/?LinkID=746393.\r\n```"""
9398,133273120,"b'If easy, can we move GetNavigationPaths out of the result op and into compiler?'"
9398,133273583,b'GetNavigationPaths can just always return an empty list? Check Count rather than allocating via Any'
9398,133273932,b'This looks like a duplication of other expression parsing logic we have elsewhere...'
9398,133277567,b'This text needs to tell only about the derived. Basically the example should correspond to actual API.'
9398,133278450,b'ExpressionExtensions in Core i think\r\n\r\n---\r\nIn reply to: [133273932](https://github.com/aspnet/EntityFramework/pull/9398#discussion_r133273932) [](ancestors = 133273932)'
9398,133279324,b'This code is overly allocatey! We need to improve it.'
9398,133280091,b'Is this correct?'
9398,133280551,b'no space'
9398,133284334,"b'ExpressionExtensions.GetComplexPropertyAccess still uses it, as that message is more generic (not specific to include)'"
9398,133284831,b'That API was previously used only for Include.'
9398,133285253,"b'good catch, i need to improve the asserter to catch false negatives'"
9398,133337701,b'any ideas how to improve this message?'
9398,133585783,b'combine with WalkNavigations'
9398,133585872,b'You can find all derived type using extension method & select declared navigations'
9398,133593800,b'Or use an existing method that does that - `entityType.FindDerivedNavigations(name)`'
9398,133777084,b'Consider SelectMany'
9398,133778130,b'Consider using `entityType.FindDerivedNavigations(name)` instead of double foreach :trollface: '
9398,133778193,b'@divega @ajcvickers '
9398,133799284,b'InvalidOperationException'
9398,133799811,b'static method?'
9398,133799896,b'static method?'
9398,133803316,b'that would be a breaking change'
9398,133806560,"b'Hmmm, any reason we used NotSupportedException there? We generally should use InvalidOp. cc @ajcvickers\r\n\r\n---\r\nIn reply to: [133803316](https://github.com/aspnet/EntityFramework/pull/9398#discussion_r133803316) [](ancestors = 133803316)'"
9398,133807827,"b""Not sure. I don't remember making an explicit choice here. """
9450,133856872,b'Should have named this variable based on case block they represent'
9454,133848291,b'This is necessary. Some tests are running queries in parallel in different context. We need to have MARS enabled for that.'
9454,133848766,b'If logger fails we will not close connection?'
9454,133848874,b'yes :trollface: '
9454,133848976,b'No check needed'
9454,133849859,b'\xf0\x9f\x98\xb1 \xf0\x9f\x98\xb1 \xf0\x9f\x98\xb1 '
9476,134075178,b'This method can be called just `BuildQueryRoot`'
9483,134099240,b'My only concern here is that this is technically a breaking change. Does resolution work correctly (even in D.I.) if we leave the original constructor as well?'
9483,134290063,b'How about a new class that inherits from DbContextPool and has the changed constructor? Should still be able to register this without a delegate and hence minimal perf impact.'
9483,134290918,"b""On reflection, I don't think there is a perf. concern here - The pool is a singleton and so that Func only runs once per context type. """
9483,134291073,"b'Okay, cool.'"
9522,134589284,b'cd -> od\r\nc -> od\r\n\r\nWhat happens with normal anonymous type for this test?\r\n'
9522,134589533,b'Can we do the anonymous type expansion?\r\n'
9522,134594502,b'It also fails. Needs different solution.'
9522,134599394,b'== :trollface: '
9525,134621382,b'Just use `Expression.Constant(Task.CompletedTask)`'
9541,134852148,b'This is caused by https://github.com/aspnet/EntityFrameworkCore/issues/9509'
9479,134273193,b'`two` --> `too`'
9479,134273518,"b""I don't think we should add *any* public surface area in a patch, unless it's absolutely required. Can we make this `const` be `internal` and then make it public in the next release?\r\n\r\nThe risk is that a future patch could risk a breaking change because this is an API change in a patch version (for complex reasons I can share internally)."""
9479,134273614,"b'These probably would have been better as `public static readonly`, no? (Too late now, of course.)'"
9479,134273819,b'Actually I think this needs to be `internal` as well...'
9479,134274011,"b'And even though this is just a test, it\'s a ""public test"", so should this be done in a non-breaking way via an overload?'"
9479,134289118,"b""We haven't ever tracked breaking changes in tests; we just expect consumers to update in the normal way. Would be good to discuss the rationale for this."""
9479,134291967,b'Never been an issue for me (and I consume the tests big time)'
9479,134302690,"b'Yeah it was just a question, so if people who ""consume the tests big time"" are ok with it ( \xf0\x9f\x98\x84 ), then I\'m ok with it.\r\n\r\nWith patches my default mode is ""better safe than sorry,"" hence the question.'"
9469,135084247,b'File issue for this?\r\n'
9469,135084436,b'Quirk'
9104,135092210,b'Quirk'
9555,135126075,"b'FYI - this will also be installed by default when you run `build.cmd` or `build.cmd /t:Restore`. Since it\'s not needed for a regular run, we could introduce a new condition, something like this:\r\n\r\n```xml\r\n<DotNetCoreRuntime Include=""1.1.2""  Condition=""\'$(IsBuildingBenchmarks)\' == \'true""/>\r\n```\r\n\r\nThoughts @smitpatel ?'"
9555,135127280,b'Conditional sounds good. I will set it as environment variable in Teamcity configuration.\r\n'
9564,135337444,"b'I think this says ""If the switch is not present and the switch is enabled"" then perform the new behavior.\r\n\r\nI think it should be ""If the switch is not present OR the switch is enabled"".\r\n\r\nDid you test with and without the switch set, at least manually? I might be getting it wrong...'"
9564,135350740,"b'The new behavior is in the iftrue part, old behavior is for iffalse. We do the new behavior if NOT (switch is present AND set to true)), i.e. when switch is not present OR switch is not set to true. Will push the negation into individual components, to make it less confusing. I did test (manually) for no switch and with switch set to true, will double check that it behaves correctly when switch is set to false'"
9494,134359911,"b""Remove the `RelationalAnnotations` bit. It doesn't mean much without looking at the code."""
9494,134360405,b'Remarks?'
9494,134361503,b'Rename `fallback` to something like `avoidConflicts` for this and other methods and make all calls use it explicitly.'
9494,134547735,b'The type of object being renamed. (e.g. COLUMN or INDEX)'
9494,135360903,b'We generally perfer paras over remarks because the former show up in Intellisense.'
9494,135360925,b'Breaking change...'
9588,135368273,"b""There are no 1.0.x changes in EF and we don't depend on any changes in other assemblies to make EF work, so we shouldn't be bumping product assembly versions. It may be that we need to bump up test assembly dependencies; but pretty sure this does not do that.\r\n/cc @muratg """
9588,135368515,b'These changes were made in both of the previous 1.0.x changes: https://github.com/aspnet/EntityFrameworkCore/commit/853c79b70fe85047e372a1185950b485068772f0 and https://github.com/aspnet/EntityFrameworkCore/commit/595b76bd3eacbb168037e520f7f077e0e91e33c5'
9588,135368472,"b""There were updates in EF's dependencies, see https://github.com/aspnet/EntityFrameworkCore/commit/95f0663d47352805d823cc94d708d3f2e38c2aac. Specifically, Microsoft.AspNetCore.Hosting.Abstractions."""
9584,135349174,b'Use MethodIsClosedFormOf'
9588,135369647,"b""What is it in Hosting that changed that means that EF has to change? Will EF not work correctly without the new version? If so, how?\r\n\r\nI'm fine with changing test dependencies to make sure that we test EF against the latest version--as discussed with @muratg--but updating the product dependencies seems wrong."""
9588,135370186,"b""Cascading updates like this is not new. We've done it for all patch releases so far. The thinking is that if a project has only a dependency on EFCore, users won't get the patched transitive dependencies unless they know to live the transitive ref to a top-level ref _and_ update that to the latest patch.\r\n\r\ncc @Eilon """
9588,135370334,"b""Okay, if that's what we're going to do, then that's what we're going to do..."""
9588,135595155,"b'Right, starting with 2.0.x this goes away because the metapackage is what people use and will lift all dependencies. But in 1.0.x/1.1.x with specific package refs, this is what we do to make sure people easily get the latest updates.'"
9587,135376246,b'@ajcvickers @divega  Any value in these quirk names containing the bug number?'
9587,135376295,"b'We could create an extension method: IsQuirkEnabled, to encapsulate this small piece of logic.'"
9587,135466233,b'store fixupTask outside fhe condition and add quirk check alongwith null condition for await'
9469,135648026,b'@AndriySvyryd Did we decide we already had an issue for this?'
9469,135650333,b'https://github.com/aspnet/EntityFrameworkCore/issues/4016'
9469,135650843,b'#9610'
9588,135652282,"b'Should we just update it to `""1.0.""`?'"
9588,135652593,b'Yeah that definitely seems like the safer thing to do. Avoids the hassle of updating everything on each patch.'
9588,135653205,"b""\xf0\x9f\x91\x8d IMHO, we can let the `#if CSPROJ` code rot too. We'll update it when we need to."""
9614,135902575,b'Typo'
9614,135908618,b'static'
9614,135910094,b'We should brainstorm a way to DRY this with the existing code path: I.e. Result op handler and SQL translating visitor'
9618,136119762,"b""If `^` doesn't work, `$` probably doesn't either."""
9618,136129150,b'Let me check if `^` was real issue then will update $ too and travis too.'
9651,136229667,b'unrealted?'
9651,136233248,b'testing building of feature branches on travis'
9598,135688605,"b'Add a new fixture derived from `SharedStoreFixtureBase<DbContext>` and create the functions in `Seed`  method, see `SqlServerTriggersTest`'"
9598,136223483,"b""I don't see a way to access the generated sql with this fixture.  Ideas on what I can use to get access to the sql?"""
9598,136224795,b'Add this property to the derived fixture:\r\n```C#\r\npublic TestSqlLoggerFactory TestSqlLoggerFactory => (TestSqlLoggerFactory)ServiceProvider.GetRequiredService<ILoggerFactory>();\r\n```'
9598,136224957,b'I figured out how to get access to the TestSqlLoggerFactory.  \r\n\r\nShould we expose an AssertSql and ClearLog method on the SharedStoreFixtureBase?'
9598,136225168,"b""We cannot do that as `SharedStoreFixtureBase` is at the Core level, so it is also used for non-relational provider tests. We'll consider adding a `RelationalSharedStoreFixtureBase` if this keeps coming up."""
9598,136244591,b'Consider only ignoring specific warnings'
9598,136245705,"b'Fixture goes to bottom of the file, no? @AndriySvyryd \r\ne.g. https://github.com/aspnet/EntityFrameworkCore/blob/dev/test/EFCore.SqlServer.FunctionalTests/Query/IncludeOneToOneSqlServerTest.cs'"
9598,136246325,b'Yes'
9692,137172332,b'Should we make this internal?'
9692,137173919,b'Seems to be a reasonable name. '
9692,137176064,"b'> To use the in-memory database globally,... to root the in-memory databases globally. \r\n\r\nSeems redundant.\r\n\r\nPerhaps something like this:\r\n``` csharp\r\n///     The in-memory database is shared anywhere the same name is used, but only for a given \r\n///     service provider. To use the same in-memory database across service providers, call \r\n///     <see cref=""UseInMemoryDatabase{TContext}(DbContextOptionsBuilder{TContext},string,InMemoryDatabaseRoot,Action{InMemoryDbContextOptionsBuilder})"" /> \r\n///     passing a shared <see cref=""InMemoryDatabaseRoot""/> on which to root the database. \r\n```\r\n'"
9670,136626231,"b'Do we need visitor for this?\r\nSpecifically since we are just finding querysource, we can just compare mainfromclause to _querySource &\r\nBodyClauses.Any(b => (b as IQuerySource) == _querySource) in single method.\r\n'"
9670,137179443,b'visitor is here just to peek into subqueries'
9670,137185455,"b""We need ExpressionVisitor to peek into subqueries but we don't need QMVisitor. It can be just a private method which would work on a QM instead."""
9670,137188461,"b""didn't we create TransformingQueryModelExpressionVisitor pattern exactly for this purpose?"""
9670,137190391,"b'The purpose of `TransformingQueryModelExpressionVisitor` is to apply QM transformations recursively in subquery. In this particular case, the QM visitor just walk the QM instead of transforming it into something else. Further the ""walk/transformation"" is simple enough that we don\'t need to utilize QueryModelVisitor to visit whole QM. Therefore, the whole task of this QMV can be simplified into single method which would work on QM and combining it with ExpressionVisitor to peek into subqueries simplifies code.\r\nIf we are certain that whatever is happening in `QueryModelFindingVisitor` is not going to change a lot in future then lets not put in complex solution.'"
9702,137340876,b'Does this need to change?'
9702,137341675,b'What is the purpose of this vs just having ```IEnumerable<IModelCustomizer>``` in DI?'
9702,137342033,b'Break'
9702,137342074,b'Break'
9702,137342513,"b'>ModelCustomizer [](start = 25, length = 15)\r\n\r\nNo concrete types here--all our services are registered by interface contract.'"
9702,137355665,b'These constructors are specifically designated as breakable API'
9702,137355891,b'To allow ordering'
9670,137387496,"b'On different dimension, there are multiple operators which are deriving from IQuerySource apart from `MainFromClause` & `AdditionalFromClause` like `JoinClause` or `GroupResultOperator` or `ConcatResultOperator` do we need to consider them too?'"
9677,137069275,b'Rename to OracleAnnotationCodeGenerator?'
9677,137069420,b'Never mind...just saw the comment on this.'
9677,137098266,"b'>IsMemoryOptimizedError [](start = 21, length = 22)\r\n\r\nIs this left over from the SQL Server code? Should it be removed?'"
9677,137099134,"b'>OracleEntityTypeBuilderExtensions [](start = 24, length = 33)\r\n\r\nRemove?'"
9677,137099419,"b'>ForOracleUseIdentityColumns [](start = 35, length = 27)\r\n\r\nIs ""Identity Columns"" the appropriate term for Oracle?'"
9677,137099700,"b'>ForOracleUseSequenceHiLo [](start = 38, length = 24)\r\n\r\nShould we file an issue to move this functionality into Relational (or some other place) so it can be re-used across providers?'"
9677,137099836,"b'>AddEntityFrameworkOracle [](start = 41, length = 24)\r\n\r\nConsider AddEntityFrameworkOracleSample? /cc @dievga'"
9677,137100046,b'Remove?'
9677,137100421,b'Remove?'
9677,137102498,b'Should we file an issue to factor this into shared code? Looks the same as the SQL Server code.'
9677,137102724,"b'>ef_pdb_admin [](start = 46, length = 12)\r\n\r\nIs this something that should be hard-coded?'"
9677,137103106,"b'>goto [](start = 24, length = 4)\r\n\r\nInfinite loop? (With a goto!)'"
9677,137103854,"b'>OracleRelationalCommandBuilderFactory [](start = 17, length = 37)\r\n\r\nDo we need to file issues on what is needed to avoid having to replace this whole factory?'"
9677,137104406,"b'>49920 [](start = 29, length = 5)\r\n\r\nAre these still the SQL Server numbers? Should we remove them and then maybe leave this as a place holder?'"
9677,137104580,"b'>IOracleUpdateSqlGenerator [](start = 21, length = 25)\r\n\r\nRemove?'"
9677,137129529,b'Will remove.'
9677,137129576,b'Will remove.'
9677,137129633,"b'Yeah, they support it.'"
9677,137129902,"b'Unless there was a reason this was not done in the first place - Postgres has sequences, too.'"
9677,137129977,b'Will remove.'
9677,137129989,b'Will remove.'
9677,137131479,b'Will do.'
9677,137131634,"b'Yep, I plan to revisit this.'"
9677,137131694,b'You mean no max iteration counter?'
9677,137131751,"b'No, except in a sample \xf0\x9f\x98\x84 '"
9677,137131777,b'Will file'
9677,137132021,"b""Maybe. Unless we're confident Oracle won't just keep throwing the same exception over and over."""
9677,137132250,b'We should at least call this out in the readme. :-)'
9677,137132420,b'Agreed.'
9677,137132711,"b""I'm personally fine with this in sample code, but am happy to change it if you would prefer."""
9677,137138362,"b'>IOracleEntityTypeAnnotations [](start = 21, length = 28)\r\n\r\nRemove'"
9677,137138370,"b'>IOracleIndexAnnotations [](start = 21, length = 23)\r\n\r\nRemove'"
9677,137138392,"b'>IOracleKeyAnnotations [](start = 21, length = 21)\r\n\r\nRemove'"
9677,137138851,b'Why is this needed?'
9677,137140449,b'Are these values and most of this file actually used?'
9677,137140949,b'Reformat'
9677,137329371,b'Removed'
9677,137389087,b'This file is not part of the provider project (but was renamed).'
9677,137396946,b'This import would need to be removed depending on PR [https://github.com/aspnet/EntityFrameworkCore/pull/9628](https://github.com/aspnet/EntityFrameworkCore/pull/9628)'
9677,137397079,b'Remove TableSelectionSet was destroyed recently.\r\n'
9677,137397152,b'This needs to be updated based on #9628'
9677,137397420,b'Include or exclude? What is in that folder which is not auto-picked?'
9677,137397774,b'Some of these event ids are obsolete in current codebase.'
9677,137398188,b'Does Oracle also have RowNumberPaging restrictions? '
9677,137398354,b'Some of these methods are removed or modified in SQL Server. worth updating?'
9677,137398550,b'remove'
9677,137398811,b'named parameter'
9677,137399955,b'remove '
9677,137401153,b'Just store parameter name?'
9677,137401216,b'rename'
9677,137401645,b'No.'
9677,137402610,b'rename'
9677,137403085,b'IOracleOptions is going away'
9677,137403111,b'WIll do.'
9677,137403334,"b'Since Scaffolding is not working at present, would it be better to throw NotImplementedException instead of having code copied from SqlServer here. Scaffolding code is changing (mainly refactoring) based on Update Model from Database. Like TableSelectionSet is removed from codebase. I wonder if keeping this code here would cause more confusion. '"
9677,137415064,b'Going away.'
9677,137415180,b'Will remove.'
9677,137415476,b'Rename back to `SqlServer` or something more explicit like `NotYetImplemented`'
9677,137418011,b'Will try and remove'
9677,137418153,"b'This may be dead code, investigating'"
9677,137418310,b'Will do'
9677,137418331,b'Going away'
9677,137418396,b'Will try and prune unused.'
9677,137418422,b'Will try and prune.'
9677,137418528,"b'Excluded ""Design""'"
9677,137422772,b'Will do a full cleanup.'
9677,137422807,b'Removed a bunch of these unused files.'
9677,137422830,b'Will do.'
9677,137422839,b'Will do.'
9677,137422848,b'Will do.'
9677,137422861,b'Will do.'
9724,137622023,b'new VS :trollface: '
9724,137622262,b'extra spaces in the middle'
9724,137622370,b'this ``` may need to be on new line.'
9561,135337953,b'Why did this change?'
9561,135338449,"b""Redundant test. AutoTransactionsEnabled only affects SaveChanges. This test doesn't call SaveChanges."""
9561,135338779,"b'I think we need more here to document what flavor of .NET transaction this ""Transaction"" type is. @divega?'"
9561,135339543,"b""I may be missing something here, but is this better than just throwing? In other words, what's the valid scenario where we need to do this?"""
9561,135340537,b'This is EF6 behavior. If the query reader enlisted in the first transaction is never read from after this the second operation will still work. We can choose to throw instead.'
9561,135355140,"b'Not sure, would like to discuss with @divega '"
9561,135368918,b'System.Transactions.Transaction?'
9561,135371983,b'@divega I was thinking of some more words than this to help people decide which to use...'
9561,135658853,"b'Ok. I misunderstood. Stepping back I think these API additions can be very confusing. Not sure additional words in the member documentation are going to help. \r\n\r\nI am thinking we should brainstorm something we can use in the API names as well to differentiate from the normal scenarios we already support. Right now ""external transaction"" comes to mind.'"
9561,135660868,"b'Another approach suggested by @anpete would be to make these extension methods in the System.Transactions namespace, so people have to add a using statement to light the API up.'"
9692,137957024,b'Documented explicitly as internal.'
9692,137957085,b'Updated'
9743,137913715,b'Removed this code because we already do conversion to value from condition in our SQL Gen phase in more general way. Also it allows us to match ordering by condition added in projection which was not happening earlier.'
9743,137915979,b'formatting'
9743,137916014,"b""Don't rename this."""
9743,137916035,"b'ae -> ""aliasExpression""'"
9743,137916069,b'Use public AddToOrderBy method instead of private field?'
9743,137916082,b'Consider ternary expression inside call to Add instead of if statement.'
9743,137917735,b'R# complained about it'
9752,138170530,"b'Should we keep the informational description, too?'"
9754,138170661,b'Just a reminder to remove quirk since this is going to 2.1'
9743,138170765,b'Disable at file level?'
9628,136685958,b'drop xunit.runner.json'
9628,138204233,b'Leave this nowarn'
9628,138204419,"b""Could remove this now. we discussed in team meeting and everyone have moved to 15.3. Though optional. i will clean up if you don't want to."""
9628,138204445,"b""It's in test/Directory.Build.props"""
9628,138204606,"b""I'll let you handle it this one :)"""
9628,138204792,b'Saw it just now. Thanks.'
9752,138221403,"b""I think it's pretty easy to look up the issue, and since the code gets removed once it is ported to 2.1 I don't think there is much value adding more to the code."""
9628,138399822,b'*Fool me once...*'
9629,136156444,b'Is there an issue filed about fixing this?'
9629,136158031,b'https://github.com/aspnet/EntityFrameworkCore/issues/9207'
9629,136198764,b'Pretty sure we can remove this whole thing now...'
9629,136200384,"b""Ok, I'll update this PR to take care of this too."""
9629,136210853,b'This should not be removed.'
9629,136211027,b'You can inline these versions to csproj. It is unlikely they would change. And even in case of change it is not huge overhead.'
9629,136211232,b'It would be good if warning system detected this on own instead of adding NoWarn on every usage.'
9629,136214858,"b""@bricelam said we could. I don't have TD.net to try it myself."""
9629,136215013,b'Lets keep it on safe side. We already have issue to clean it up. #9207 '
9629,136216728,b'Whatever you guys want. I rolled back the change.'
9629,138414238,"b""The warning is meant to guide our devs away from using Version on PackageReference and instead using the lineup to select versions. Ideally, NoWarn should be rare. EF Core is the only repo where I had to add a bunch of NoWarn's. \r\n\r\nFYI - this may change when we start working on build-from-source as we'll want to minimize external dependencies required to build aspnet core. cc @mikeharder for details"""
9779,138415203,b'typo: of?'
9779,138486289,"b'""chan""'"
9782,138483812,"b'Will it always be ""((0))"" or sometimes ""(0)"" or ""( ( 0 )) "", etc?'"
9782,138483982,"b'Also, quirk?'"
9782,138490242,b'I tried with different amount of `()` all of those goes to `((0))`. I will add with spaces.'
9782,138496688,"b'Since the column type is bit whichever it is specified, SqlServer will make it `((0))`'"
9772,138476276,"b'>public virtual IReadOnlyList<InternalEntityEntry> GetEntriesToSave() [](start = 8, length = 68)\r\n\r\nShould this really be exposed publicly? What ends up using the InternalEntityEntries? Is it provider code at all?'"
9772,138476791,b'`IStateManager` is an Internal service'
9772,138476901,"b'This method seems like it needs some work. There is duplicated logic here with other GetOrCreate methods, and this could make better use of the materializer.'"
9772,138477712,"b""What's the consequence of just skipping propagation here?"""
9772,138478418,"b""I'm concerned in general about the hacks for shadow nav props--for example, how they may influence other code paths rather than just seeding. Do we have a plan to either fix #749 in 2.1, or make the hacks less hacky?"""
9772,138479633,"b""I don't think that these hacks have any functional impact on non-seeding scenarios. If we have time to do #749 in 2.1 I would prefer it instead of trying to improve the hacks further."""
9772,138480027,"b'These are here because we added a base class? So, not really breaks?'"
9772,138480220,"b'Yeah, seems to be a bug in the API tool'"
9772,138480446,"b'>Entry == null [](start = 47, length = 13)\r\n\r\nWhat is it that allows Entry to be null now?'"
9772,138481166,b'The new constructor.\r\nThis is needed because when generating SQL when applying a migration we might not have an `IModel` anymore'
9772,138481840,"b""I was just concerned that it might be consumed by code that could be overridden by a provider--the same reason we introduced IUpdateEntry for the update pipeline. Looks like this isn't the case, so no problem. However, did we consider returning IUpdateEntrys instead?"""
9772,138483024,"b""I'll change it to return `IReadOnlyList<IUpdateEntry>`"""
9781,138483596,b'Quirk?'
9781,138490143,"b""Did we decide to quirk this? I couldn't find note anywhere."""
9781,138492025,"b""We're quirking everything by default, only not quirking if there is a compelling reason not to."""
9729,137679848,b'do we need to store in the model var? how about `Assert.NotNull(context.Model)`?'
9729,137680409,b'extra line break. :trollface: '
9737,137907756,b'This one is missing.'
9782,138669478,b'Should this be a case-insensitive comparison?'
9782,138670227,"b'I will check what happens with different casing. Though most likely it would be fixed case since whatever casing user defines storetype, SqlServer combines them into one (like nationalchar/nchar going to nchar)'"
9782,138672431,b'YAGNI'
9772,138671120,"b'We should look into accumulating these. Instead of creating one per row, if the last operation was the same type for the same table, we should just append the values.'"
9772,138671543,b'Should it throw or is is made impossible at a higher level?'
9772,138672319,b'Could you hit issues if you call `HasDifferences` during `SaveChanges`? This seems like a dangerous side affect...'
9772,138674860,b'So the last statement is in a separate batch now?'
9772,138675635,b'This looks like a bad merge.'
9772,138676000,b'Unnecessary `HasKey()` calls were removed from these tests.'
9772,138673631,"b""This doesn't feel like a property to me. Lets discuss during API review."""
9782,138679872,"b""I hope SQL Server normalizes, but I also know that SQLite doesn't. \xf0\x9f\x98\x89"""
9772,138682234,"b""You mean concurrently? We definitely don't support that."""
9772,138682363,"b""Yes, it's on the ToDo list: https://github.com/aspnet/EntityFrameworkCore/issues/629"""
9772,138682439,"b""It's on the ToDo list: #629"""
9793,138683855,b'@bricelam - Added variation of `bit` too. all of them comes out as bit only. '
9772,138684584,"b""No need to discuss, I'll just make it a method"""
9772,138685282,b'Looks more like a bad PR differ'
9772,138694188,"b'I imagined something like this:\r\n``` csharp\r\ndb.Add(customer);\r\n\r\nif (differ.HasDiferences(modelSnapshot, db.Model)\r\n    Log.Warn(""Someone forgot to migrate. This might fail."");\r\n\r\ndb.SaveChanges();\r\n```'"
9772,138704306,"b""Still doesn't look like an important enough scenario, but I am open to hearing opinions from others"""
9772,138724477,"b""Appears so. I'll revert this when I add batching back"""
9772,138726207,b'cc @divega @ajcvickers '
9772,138727211,"b""No, the old code didn't have `HasKey()` and used chaining (not a closure) on the target model."""
9782,138754466,b'SqlServer does normalize it.'
9807,138760537,b'inline?'
9807,138760961,b'typo'
9807,138764537,b'Split for clarity.'
9815,138953476,b'Interesting. Any reason we cannot use just Visit here?'
9815,138961682,"b'Visit tries to put the method call back together, which will throw because the args are no longer compatible.'"
9832,139235208,b'Would try/finally pattern have any value here?'
9832,139256235,b'Can we name this variables on type of methodcall they are capturing?'
9832,139261421,"b'Probably not in this case. I think that can help when the method contains multiple exit points, though.'"
9832,139262969,"b""Although that one in particular doesn't have a better name \xf0\x9f\xa4\xb7\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f """
9834,139260283,b'Nice \xf0\x9f\x98\x84 '
9821,138987869,b'Will merge these changes to `dev`.'
9838,139484843,"b'Typically, if you explicitly call DetectChanges, then we always do it regardless of what settings there might be. Are we 100% sure this is a no-op?'"
9838,139497198,b'I just lifted the check from `ChangeDetector.DetectChanges()` we could lift it further to get the behavior that you are describing.'
9838,139515796,b'I thought about it more and I think it is fine.'
9839,139476965,"b'Is the assumption here that if evaluation null-refs, then the value of the parameter must be null?'"
9839,139481882,b'Yes.'
9846,139586092,b'How is this name used? Can it collide when there are multiple filters?'
9846,139777240,b'#9850'
9846,139788957,b'Field?'
9846,139794533,b'&& field is null'
9846,139794713,b'sealed'
9846,139794829,b'node => constantExpression :trollface: '
9846,139794997,b'nit: can just return node.'
9846,139795100,"b""nit: we usually call this 'newExpression'"""
9846,139797443,b'the use of out variable blocks it.'
8989,139810072,"b'Hi @ErikEJ , I just notice you mention ""Use database *_column_* and table names as-is"", i was asking in another topic about column names, because I used this parameter when scaffolding some tables and table names wasn\'t PascalCased but column names was. Is this a bug?\r\nRegards!'"
8989,139880365,"b'@piyey Yes, it is a ""feature"" issue: https://github.com/aspnet/EntityFrameworkCore/issues/9820 '"
9840,139801462,b'Why do we need to visit only in some cases?'
9840,139811403,b'Existing code but I think we use it to signal when to stop.'
9792,138737151,"b""Interesting that the tests pass, but this won't work for connection resiliency. Count would be incremented on every retry."""
9792,139296527,"b""@AndriySvyryd I added a test using connection resiliency and fixed a test bug, but can't get product code to to fail. Probably going to need some help writing a test that demonstrates this."""
9792,139523200,"b'I found the issue in test code: `TestRelationalTransaction.ClearTransaction()` calls `_testConnection.Close()` for some reason, hiding the product bug.'"
9792,139579559,"b""@AndriySvyryd I simplified TestRelationalTransaction and TestSqlServerConnection so that they don't have any logic other than causing failures...still can't reproduce the issue."""
9792,139592859,"b""I see, that was unrelated then. The code you added to `TestRelationalCommandBuilderFactory` hides a bug.\r\nI've also added tests for the other places where an `ExecutionStrategy` is used: see `origin\\MoreResiliencyTests` https://github.com/aspnet/EntityFrameworkCore/commit/ce4bf0d06a231680e8ceac901feed55b48796d4f"""
9792,140094542,b'New bits up with query fix.'
9851,139785600,b'any reason not to make this method an extension method? (and the other `With` methods)'
9851,139786076,"b""We don't use extension methods unless there's a good reason to. This improves cohesion."""
9851,139788528,"b""These methods seem to me like utility methods and therefore they should not be inside the class, they don't use any private members or anything like that"""
9851,139789349,b'The whole purpose of this class is to hold and manipulate dependencies. The `With` methods are part of its responsibilities and contract.'
9862,140112607,b'Most tests added in a patch :trollface: '
9862,140136649,"b'Yeah, ""thanks"" for that hehe'"
9871,140394974,b'Reformat'
9871,140395657,"b""Wouldn't this work with a `bool?` instead of `AsyncLocal`?"""
9871,140396859,b'No.'
9871,140397451,b'Can you elaborate? The tests pass with `bool?`'
9871,140398405,b'Are you sure? Double_dispose_concurrency_test fails for me without the async local.\r\n\r\nRequest A calls Dispose - context A is returned to pool.\r\nRequest B calls Rent and acquires context A.\r\nRequest A calls Dispose and context A is returned to pool. Boom!'
9871,140399146,b'I see. The test passes unless I run it on its own.'
9871,140545852,"b'Is this thread-safe? Depending on what caches have been flushed, thread A could see the old value for _leased even though thread B has set a new value, Thread A would then see this instance as not leased and attempt to lease it.'"
9871,140548021,"b'AFAIK, I thought that was the point of AsyncLocal. Perhaps @AndriySvyryd or @divega can comment.'"
9871,140548730,"b""My understanding is that if you set a value on an AsyncLocal, then it will only be visible to the current execution context--i.e. `_leased.Value = true;` But unless the compiler is doing some magic on the _leased field, then it's just a normal field holding something that happens to be an AsyncLocal."""
9871,140549205,"b'Oh, you mean the _leased field. SetPool is only ever call once when the context is created.'"
9871,140550860,b'Got it! :-)'
9884,140610022,b'null are handled in VisitConstant properly.\r\nOn higher level we could move this special handling to VisitConstant only based on condition on which block we are in or something.'
9885,140616444,b'Hard-coded in core?'
9885,140617376,b'I thought it was same across providers.\r\nWe cannot move this to SQL server due to limitation here #9143\r\nRecalling this. Not so easy to get this done it seems. I will remove milestone and bring it back to triage when I m back in office.\r\n'
9887,140620197,"b""This is one possible way to resolve this issue.\r\nI did not modify `GetHashCode` which skips IQueryable too (perhaps to verify `EnumerableQuery` here). We could perhaps add check there too.\r\nI got this check from `EntityQueryableExpressionVisitor` which essentially states that we don't do anything with any other expression then EntityQueryable so such expression should be marked different unless they are same.\r\n"""
9887,140620387,b'@anpete '
9772,140644742,"b'Coming very late to this comment, but I need more context. It seems it would be good to discuss it when @bricelam is present. @AndriySvyryd can you please file something so that we remember?'"
9772,140648030,"b""I already fixed this in the new PR that's currently open"""
9755,140689215,"b'This is changing annotation name for DbFunction. Since everything is runtime, it would not break anything particular. But hand-crafted model can break may be.'"
9755,140689287,"b'Should re-word this message. Its not invalid type always. Sometimes user may just need to make it a static method.\r\ncc: @divega, @ajcvickers to suggest exception message.'"
9755,140799589,b'This change is actually fixing a bug I ran into.  If you declare two static methods on different types with the same name then the annotation name was colliding.  We need the type name to differentiate the methods.\r\n\r\nSee the new unit test DbFunctions_with_duplicate_names_and_parameters_on_different_types_dont_collide'
9755,140799766,b'Yes please.  I suck at naming things :)'
9755,140851352,"b'How about ""The DbFunction \'{function}\' defined on type \'{type}\' must be either a static method or an instance method defined on a DbContext subclass. Instance methods on other types are not supported.""'"
9755,140865871,b'works for me - change made'
9874,140556701,b'Can this ordering cause an issue if the Data Delete is on the dropped table? or do we not generate delete data operations for tables dropped?'
9874,140570666,b'The latter. We only consider added and (potentially) changed tables'
9874,140571073,b'This order is needed if the user drops a dependent table or FK and deletes the corresponding principal seeds.'
9874,141127406,b'I think C# needs a `\xc2\xbf\xc2\xbf` operator for this.'
9874,141128871,b'Real `internal`? (and shared source)'
9874,141130199,b'Lost coverage?'
9874,141164754,b'Already covered by `Add_column_*` tests since they assert up and down operations'
9907,141447035,b'File an issue to fix this in 3.0'
9907,141448315,b'Should this be `as RelationalTypeMapping` ?'
9907,141448560,b'#9913'
9907,141448907,"b""Maybe. If it's a relational model, then any type mapping it has should be a RelationalTypeMapping. Not sure yet what the best way to enforce this is."""
9907,141449563,b'Do we really need to enforce it? As long as we can get a RelationalTypeMapping it should be fine and the relational validation already covers this'
9918,141679518,"b'Does this need to be generic? For the collection snapshot, we just use object.'"
9918,141713657,"b""This class is mostly superfluous, I'll just inline it."""
9918,141936223,b'Expression body?'
9918,141936578,b'Forgot to add `Debug.Assert(!navigation.IsShadowProperty);`'
9918,141938605,"b'>ClrCollectionAccessor [](start = 17, length = 21)\r\n\r\nThe ""I"" is there for a reason. It means this is the implementation for ICollection, rather than just the gneral concept of some kind of collection of things on a thing.'"
9918,141939106,"b'Still, it goes against our naming guidelines'"
9918,141939118,"b'>IEnumerable [](start = 8, length = 11)\r\n\r\nDo we need to constrain this to only collections that implement IEnumerable?'"
9918,141940051,"b'We already have this constraint, see https://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore/Metadata/Internal/ClrCollectionAccessorFactory.cs#L42'"
9755,142489237,b'Do we have logic for selecting only this set of `BindingFlags`? It includes static protected methods from base types in search but not instance protected methods.\r\nAlso should we only support public methods or protected methods too. @anpete @divega'
9755,142547218,"b""The `BindingFlags.Public` will filter out the protected static methods as well as protected instance methods. \r\n\r\nI think we should only bring in public methods since users shouldn't be putting their queries directly in their DbContext class - imho.  Therefore there is no need for protected methods."""
9755,142548723,b'Filed #9956\r\n'
9954,142730460,b'Did you report this anywhere? It looks like an analyzer bug.'
9937,142739103,b'cc @smitpatel '
9954,142739269,b'https://github.com/dotnet/roslyn/issues/22505 & https://github.com/dotnet/roslyn/issues/22184 should cover it\r\n'
9970,142814294,"b""Don't merge back any of the project-system changes. That includes any changes to .props, .targets, .csproj, or NuGet.config files."""
9970,142814398,b'Any build.sh/ps1/cmd scripts too'
9970,142814474,b'Please add a commit to reverse all the changes which are not supposed to merged back in.'
9982,143043363,b'This can be DRY with method below but for the patch I kept it separate. '
9937,143049665,b'Curious why this is ConcurrentDictionary?'
9937,143050376,"b""Because it's a singleton service than currently can be added to at runtime."""
9937,143051109,b'Name conflicts with type in System.ComponentModel. Suggest renaming for clarity.'
9937,143051363,b'CoreTypeConverter?'
9937,143051579,b'Intended that we no longer log the type?'
9937,143051884,"b""Yep. Previously the type of the object was different from the type expected by the parameter. Now it is the same, so we don't output it."""
9937,143052983,"b'I wonder whether we should just use plain old inheritance/abstract methods here for improved dispatch/alloc perf. We could still allow lambdas as sugar at the user level, but it seems fine for providers to just provide specific conversion concrete classes - They do for everything else in Type Mapping.'"
9937,143053209,b'Another consideration is whether the conversion methods can just be defined directly on the TypeMapping? I.e. is there an advantage to this additional factoring?'
9982,143055301,b'Combine conditions '
9982,143060468,b'Kept it separate intentionally.\r\nIn past @anpete raised point not to combine conditions of quirks with code so that it becomes easy to understand exact condition.\r\n\r\n'
9982,143068953,b'fair enough'
9986,143064873,"b""Can you try out 2.3.0-rc3? I'm about to upgrade everything to this. https://github.com/aspnet/Universe/pull/578"""
9986,143065004,"b""Fine for now, but this will need to change in the future. This is just an FYI though. I'll send details and a PR later."""
9986,143065609,b'Upgraded.'
9981,143062360,"b""You wouldn't need cast to EntityType. `IEntityType` should be fine to use."""
9981,143069544,"b'Good point, changed it.'"
9937,143237620,"b'@anpete I think we should leave as is for now and see how the rest of the functionality ends up building on this, then we can decide to replace the converters defined in type mappings with a different pattern if it seems like the right thing.'"
9937,143238944,b'Taking a look at it.'
9937,143243222,"b'More ideas: ValueConverter, DataConverter, ValueMapper '"
9937,143243816,"b""Those are good, because it's not really about converting types, it's about converting values, sometimes also to a different type. I'll do ValueConverter for now, and we can discuss again in API review."""
9872,142546938,b'return newExpression.Arguments.All(e => IsAggregateSubQueryExpression(e) || IsKeySelector(e)) seems simpler'
9872,142547403,"b'revert this, sequenceType was used in two places, so it made sense to store it in variable.'"
9872,142559991,b':trollface: \r\n\r\nThis was changed because the _expression can change between 2 calls. So both times `sequenceType` would evaluate to different things.\r\n'
9872,142735499,b'Check not null'
9872,142735729,b'Break long line'
9872,142736065,b'nameof?'
9872,142736562,b'Return this from IsAggregateGroupBySelector? #Resolved'
9872,142737263,b'We should change to .Length > 0 for these checks to avoid allocs'
9872,142737768,b'Can we still throw on no element group? Is there a test for it?'
9872,143081166,b'`IsAggregateGroupBySelector` is actually not looking into group by query source or resultoperator. It would just verify the shape of aggregate operator query. #Resolved'
9872,143081188,b'`nameof(???)`'
9872,143081251,b'Can you elaborate? '
9872,143089795,b'IGrouping.Key'
9872,143256236,"b'Conclusion: `GroupBy` does not produce a group with no elements in it. For every key value pair, grouping will generate group for each key. So for every key there will be group with some value. That value can be null but a non-empty group containing null will always be there.\r\n'"
9937,143289995,"b'There could be associated change in the code added by group by which also uses similar,'"
9937,143290612,"b""There are few options here:\r\n1. Keep this as is.\r\n2. Make ColumnReferenceExpression to store IProperty so that we don't need to do this.\r\n\r\n---\r\nIn reply to: [143238944](https://github.com/aspnet/EntityFramework/pull/9937#discussion_r143238944) [](ancestors = 143238944)"""
9937,143291824,"b""I'll leave as-is for now, but feel free to make this cleaner as you see fit."""
9989,143289192,"b'>entity.GetType() != typeof(TEntity) [](start = 20, length = 35)\r\n\r\nThis has to be an exact match?'"
9989,143289402,"b'yes, because any derived property will be ignored'"
9989,143289538,"b""> if (stateManager == null) [](start = 15, length = 26)\r\n\r\nWhen is one of the state manager's null?"""
9989,143289769,"b""when there's no corresponding model\r\ni.e. Starting from an empty DB or going to one\r\n"""
9989,143290248,b'Named delegates are...unusual...'
9989,143290552,b'Funcs were too cumbersome'
10005,143315022,b'Does this mean that we would be building against last RTM release on that particular release cycle locally? How would this be updated if they need to be? Just curious\r\n'
10005,143315214,"b""Yes, this means you're building against the last successful build, at least at the moment. The plan is to make tools to automate updating dependencies.props. We'll build these tools before we put this on dev.\r\n\r\nFor now, if you need to work on rel/2.0.1, feel free to manually update any 2.0.1-rtm-* packages to newer builds as needed.\r\n\r\nAlso FYI - the versions in this file are overridden during a run of aspnet/Universe."""
10004,143312573,b'Filed #10003 '
9903,141160492,"b'@anpete Can we get rid of `SupportsSchemas`? It was introduced for Oracle, but SQLite was already handling this by overriding the `SqlGenerator.DelimitIdentifier()` overload. That overload is used by Query, Update, and Migrations.'"
9903,141325591,"b""I'm fine if it works. Can you check that we don't break the Oracle sample."""
9903,141664938,"b""This is turning into a yak shaving exercise. Oracle solution was broken by #9629. Need to install Oracle Database... lol, I'll keep at it."""
9903,141925076,"b""I'm getting thousands of test failures with the following:\r\n\r\n> ORA-00972: identifier is too long\r\n\r\nI'm using version 12.1. Is the sample only compatible with 12.2?"""
9903,141926986,"b""According to stack overflow max length was 30 upto 12.1 and was increased in 12.2.\r\nWe need to have a vm setup somewhere for this kind of testing so that all of us don't have to install oracle. May be efci host machine. """
9903,141927721,"b'Yep, the required version is listed in the [readme](https://github.com/aspnet/EntityFrameworkCore/tree/dev/samples/OracleProvider): 12c Release 2.'"
9903,141939705,"b""Lame. Latest Docker image is 12.1. I'll spin up my own VM."""
9903,141940182,"b""(But when there's a 12.2 Docker image, I'll send out instructions to the team since I've got it all working.)"""
10011,143613963,b'This would need timeout on regex prolly.'
10011,143615333,"b""True, I'm implementing!\r\nThanks @smitpatel """
10011,143640362,b'Use 4 spaces for indenting'
10011,143640467,b'Why are these internal?'
10011,143640527,b'Force braces even for single statement blocks'
10011,143640714,b'Perhaps @AndriySvyryd can help us to remove this hack.'
10011,143640786,b'Fields are _lowerCamelCase'
10011,143640930,b'Typo and capitalize'
10011,143698659,b'Done!'
10011,143698678,b'Done!'
10011,143698733,b'Done!'
10011,143701506,b'Thanks @anpete.\r\nDone!'
10011,143755694,"b""@anpete , I understand, but when the PR started was done, I was curious about this, but then I understood the initial idea for this.\r\nI think at the moment, wearing that is good.\r\nWe can improve later, I can be responsible for this improvement.\r\n\r\nI'll see what features can improve with that. \r\nBut at the moment I think this is very functional."""
10011,143807570,"b""Please use `TimeSpan.FromMilliseconds(1000.0)` that's what we are using in whole codebase for timeout."""
10011,143808476,"b""Okay, I'm doing it!"""
10011,143810385,b'Use braces for single-line blocks'
10011,143811096,"b""Shouldn't the `cur` parameters be counted as well?"""
10011,143811580,b'These parameters should be added in `OracleModificationCommandBatch`. You could split `ReaderModificationCommandBatch.CreateStoreCommand()` to make it easier to add parameters in this way.'
10011,143812595,b'You should insert enough entities to trigger the max parameter count check'
10011,143817900,b'Done!'
10011,143818420,"b'I made some adjustments, there was already this class, but I see it!'"
10011,143818719,"b""Ok I'm doing this, at the moment the intention was to just run a simple test!"""
10011,143864554,b'Done!'
10011,143879739,b'Too many blank lines \xf0\x9f\x98\x81 '
10011,143883345,"b'I did not realize that, but I corrected and sent!'"
10039,143891675,"b""I think it's technically better to just use `_lastExecutionContext == Thread.CurrentThread.ExecutionContext`, and let the `==` operator decide if they are equal.  According to docs, `ExecutionContext` currently does not override `==` or `Equals()` so they should be equivalent to `ReferenceEquals()`, but in theory this could change in the future."""
10039,143892760,"b""Should this check be inverted?  Don't we want to only call `_dbContextPool.Return()` if we're on the *same* thread which called `ResetState()`?"""
10025,143612639,"b'DRY ""$""\r\nHow about ""filter"" as base name for non-member case?\r\nDo we have test for non-member case?'"
10025,144074454,"b'NIT: ""filter""'"
10061,144407220,b'Possible null ref?'
10061,144409471,b'Do we need to do this if FK is required?'
10061,144409691,b'We have similar code in LiftOrderBy'
10061,144410714,b'EFProperty method call so no null ref.'
10061,144410756,"b'Yup, we do. I tried to make changes minimal in patch.'"
10061,144410951,b'We need to determine if the `querySourceReferenceExpression` here is nullable or not. Do we have a way to identify that?'
10061,144415953,b'Change cast'
10033,143835620,"b""@divega @anpete @AndriySvyryd @smitpatel @maumar @bricelam Opinions on this change? It's technically a breaking change to a public interface, but I don't think that anybody is directly implementing this interface--they extend from our base classes, which are not broken. However, people have hacked this area, so there may be implementations out there. We could create a new interface instead, but it's considerably more ugly."""
10033,143836284,"b'We could ask/check known provider writers if they implement this directly, otherwise it should be ok'"
10033,143836719,"b""I'm fine with it."""
10033,143840723,"b'You know my motto: *Break early, listen for feedback.*'"
10033,144599177,b'typo.'
10033,144599227,b'typo'
10038,144601796,b'Breaking change? Will providers need to react if they have custom update-pipeline code?'
10038,144602361,"b""This interface is meant for consumption, not implementation.\r\nNon-relational providers would need to react to support this, but it won't break anything that was working before."""
10071,144648940,b'Why did you change the base type?'
10071,144650270,"b'I changed to be able to pass parameters of cursors, to avoid the undesirable hacks that had!'"
10071,144652747,"b'But if you do not like it, I can use ""override"" in the methods.\r\n\r\nI particularly liked it, even for simplicity'"
10071,144655911,"b'I see. We prefer to not repeat code if possible, this allows to make changes faster.\r\nYou could add methods like these to the base and override them:\r\n```C#\r\nprotected virtual object[] GetTenMostExpensiveProductsParameters()\r\n    => new object[0];\r\nprotected virtual object[] GetCustomerOrderHistorySprocParameters()\r\n    => new object[0];\r\n```\r\n'"
10071,144657361,"b'I liked that, I did not want to implement it without your analysis!'"
10076,144681304,b'YAGNI dictionary?'
10076,144681325,b'\xf0\x9f\x8e\x89 '
10076,144681369,"b'Yes. but as this is the sample I was showing a pattern and making it easy for people to just add new methods as needed. However, I can change if you prefer.'"
10076,144681697,b'Makes sense'
10076,144681736,b'Any reason to not just have this on RelationalTypeMapper?'
10076,144681861,b'Can remove this: See https://github.com/aspnet/EntityFrameworkCore/blob/61952a43a17785490c041a71ba573455a04f94b2/src/EFCore/Query/ExpressionVisitors/Internal/FilterApplyingExpressionVisitor.cs#L74\r\n'
10076,144681875,"b'Hmm, I could try it. I kind of like small simple services, but it is part of type mapping, so it could be an optional method on the type mapper.'"
10076,144681945,"b'Could be easier for providers to do it in ""one place"". '"
10076,144681968,"b'Nice. \xf0\x9f\x91\x8d (I was thinking that there might be something that did this already, but I failed to find it.)'"
10076,144681975,"b""Yep. I'll change it."""
10088,144997556,b'I suspect some users will want an option to ignore case.'
10088,144997895,"b""Good point. I'll add it."""
10051,144167263,b'This is not extension method on SqlDataReader but we needed this due to some complex group by. Should we put this in different class or rename this class? Both of the methods are used in reveng only.'
10051,144348006,"b'I strongly discourage the use of verbatim newlines in the product. I prefer:\r\n``` csharp\r\ncommand.CommandText = new StringBuilder()\r\n    .AppendLine(""SELECT"")\r\n    .AppendLine(""    schema_name([t].[schema_id]) AS [schema_name],"")\r\n    // ...\r\n    .ToString();\r\n```'"
10051,144348685,b'Can we get rid of `SelectionSet` and generate a `WHERE` clause from the specified tables and schemas?'
10051,144349376,"b""+1 to Erik's N+1 comment. Can we pull back all the columns in one trip (e.g. using a `JOIN`)?"""
10051,144350578,b'I tried StringBuilder approach but verbatim was more readable. Happy to convert to stringbuilder.'
10051,144388023,"b""I'm OK using verbatim here since it's never output to the user and SQL Server can handle both CRLF and LF."""
10051,144993555,b'@bricelam - to suggest type of exception & the message. This is parsing error of schema qualified table name.'
10051,144994140,"b""While this (and similar code in GetIndexes/GetForeignKeys) are present as exception throwing, this actually never hit. This is a proof of concept that our filters are precise & restrictive enough that we don't fetch metadata for any table which is not going to get scaffolded. What should I do with this?\r\n- Leave exception throwing? (with or without message)\r\n- Convert `FirstOrDefault` to `First`?\r\n- Use `Single` instead of `FirstOrDefault`?\r\n- continue;"""
10051,145454221,b'Seems fine as it is.'
10051,145458468,"b""System.InvalidOperationException: The specified table '{table}' is not valid. Specify tables using the format '[schema].[table]'."""
10051,145464889,b'Use `First()` or `Single()`. We should know when impossible happens but not go out of our way to handle it.'
10051,145466378,"b'Do we use `string.Replace()` in other parts of the stack? Returning a `Func<string, string>` feels more natural to me.'"
10051,145540953,b'@AndriySvyryd \r\n'
10051,145545104,b'Just return a lambda witch takes a string and does that same thing?\r\n```C#\r\nreturn schema =>\r\n{\r\n    var schemaFilterBuilder = new StringBuilder(); \r\n    schemaFilterBuilder.Append(schema);\r\n    ...\r\n    return schemaFilterBuilder.ToString();\r\n}\r\n```\r\n\r\nAnd you can return `null` if `schemas` is empty'
10040,145570956,"b'> BindingFlags.DeclaredOnly to search only the methods declared on the Type, not methods that were simply inherited. \r\n\r\nI believe this should be different. When working with multi-context scenarios (using different contexts for read/write), user may want to just put method on common base instead of the exact context instance.\r\n\r\nAlso FlattenHierarchy should be there to find static members from base classes.'"
10040,145583583,b'The while loop will walk up the inheritance chain pulling methods until it gets to DbContext.\r\n\r\nWe need to do this because base class private methods are not returned when methods are pulled from derived types.  \r\n\r\nFlattenHierarchy is disabled to prevent duplicate static methods from being returned during the inheritance walk.'
10040,145603167,"b""Ah. didn't realize the loop."""
10110,146023414,b'Merge ifs'
10106,145764905,b'why was this test changed?'
10106,145785424,"b'The test was added with `using` in 2.0.1 patch (& later copied over). Since we have AssertQuery now, I converted it.'"
10106,145867252,"b'I mean, why was Take(1) removed from the query itself'"
10106,145867416,"b'rename this method, maybe add issue number?'"
10106,145867713,b'Oops! '
10106,146039400,b'Earlier Take(1) was there because of manual verification. Due to automated verification we can check for multiple rows.'
10132,146055954,"b'So, no batching is expected?'"
10132,146057194,"b'Yes, this PR corrects just that!\r\n\r\nIn fact, this error occurred when I tested with my locale setting,\r\nThere were a few places in the code that contained American dates. So I had to make some adjustments.\r\n\r\nThank you!'"
10132,146062626,"b""I did the tests and were satisfactory with this adjustment.\r\n\r\n5618 passed, 0 failed, 78 skipped (see 'Error List / Messages'), took 450,90 seconds (xUnit.net 2.3.0 build 3820)."""
10132,146064735,"b""This is expected. After https://github.com/aspnet/EntityFrameworkCore/commit/a22e4069f528693a9fdb72d9e2e819b14b3503c3 we don't batch less than 4 statements by default."""
10100,146029424,"b'I prefer this pattern:\r\n``` csharp\r\nDebug.Fail(""Unexpected value: "" + webHostFactoryResult.ResultKind);\r\nreturn null;\r\n```'"
10100,146030214,"b'It may not be important to preserve all these messages. If you think it\'s more maintainable to replace them with a generic ""can\'t find web host factory"" message, I won\'t push back.'"
10132,146067390,"b""So now, it's correct according to https://github.com/aspnet/EntityFrameworkCore/commit/a22e4069f528693a9fdb72d9e2e819b14b3503c3\r\n\r\nmakes sense, Thanks @AndriySvyryd """
10132,146082365,"b'OK, thanks @ralmsdeveloper @AndriySvyryd '"
10136,146401676,b'Any reason not to get this directly from `ISqlGenerationHelper` here?'
10136,146401982,b'(Adding it to `RelationalDatabaseCreatorDependencies`)'
10136,146454567,"b'I actualky did this first, but got warnings about breaking changes due to constructor having been changed'"
10136,146455364,b'@ErikEJ - Which ctor? ctor of `RelationalDatabaseCreatorDependencies` is fine to break.'
10136,146519993,"b'@smitpatel Yes, ctor of RelationalDatabaseCreatorDependencies  - I will break it then! \xf0\x9f\x98\x84 '"
10136,146638336,b'@smitpatel Broken!'
10075,145573154,"b""@AndriySvyryd is this this right? In Relational, do navigation-defined entity types always map to the principal entity type's table?"""
10075,145574087,"b""No, that's just the default."""
10075,145574751,"b'K, will add some more tests and react'"
10141,146918072,"b""It's not a great idea to add a new LoggerFactory instance for every context instance since it causes the internal service provider to be rebuilt, but it doesn't matter too much here."""
10141,146920500,"b'Thanks. This was copied from some old code, what is the preferred way to do this now?'"
10141,146921436,"b""I'm not entirely sure. I took a note to go investigate the best way to do it now."""
10158,146964843,"b'We always try to include information about which properties caused the conflict.\r\n\r\nIt would also be useful to tell people what the conflicting values are, but only if sensitive data logging is enabled. However, I think we would still take the PR without this.'"
10158,146964944,"b""What's the scenario that requires this?"""
10158,147601376,"b""@ajcvickers Thanks for your feedback. I've now updated it to include this information."""
10158,147601520,"b'@ajcvickers I\'d imagine it would be every scenario? The reason is that when comparing boxed value types, they are not automatically considered equal, even if the values ""inside the boxes"" are equal. I got the code snippet from this Stack Overflow post: https://stackoverflow.com/questions/6668697/boxed-value-type-comparisons'"
10158,147879614,"b""@shaynevanasperen Looks like this would only be an issue where comparing different types that have been boxed. Does this happen in the in-memory provider? If so, is there a test that fails or can one be written? (It's not that this is necessarily bad, but we have lots of code that rely on exact type comparisons, often in dynamically compiled code, so I would like to understand more clearly why this is needed in case is is masking a more fundamental bug.)"""
10158,147935772,"b""@ajcvickers Without this, my code doesn't work and always throws the `DbUpdateConcurrencyException`. Most of the existing tests in [EFCore.Specification.Tests/UpdatesTestBase.cs](https://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore.Specification.Tests/UpdatesTestBase.cs) fail without this code (when running the [EFCore.InMemory.FunctionalTests/UpdatesInMemoryTest](https://github.com/aspnet/EntityFrameworkCore/blob/dev/test/EFCore.InMemory.FunctionalTests/UpdatesInMemoryTest.cs).)\r\n\r\nLike this one for instance:\r\nhttps://github.com/aspnet/EntityFrameworkCore/pull/10158/files#diff-125fbbaa7088e78da7b5c772bb2ddb65R35\r\n\r\n\r\n\r\nIn that case it is comparing a boxed decimal to another boxed decimal and even when the values are the same the equality check fails, so I had to write this."""
10158,148156691,"b'@shaynevanasperen I pulled your code and changed `...en && !ValueEquality(_ro...` in both places to `...en && !Equals(_ro...`, commented out the ValueEquality method, and all the tests pass for me. It would be great to figure out why we are seeing different behavior here, since the rest of the PR looks great.'"
10158,148159811,"b""@ajcvickers That's bizarre! I originally wrote it as `...en && _rows[key][index] != entry.GetOriginalValue(properties[index])`, but that didn't work.\r\n\r\nIsn't `x != y` functionally equivalent to `!Equals(x, y)`?\r\n\r\nI'll see if I can reproduce it now and then get back to you."""
10158,148161132,"b'Oops! I feel so silly now. `x != y` is a reference equality check. For some reason, I wrongly thought that if falls back to doing a value equality check if the reference equality check returns `false`. In fact it is the other way around. A value equality check first does a reference equality comparison and then falls back to value comparison.'"
10158,148161640,"b""@ajcvickers I've just updated the code to use `...en && !Equals(_ro...` in both places, and I've removed the ValueEquality method."""
10146,146448086,b'tableList is being ignored while scaffolding tables.'
10146,146449374,"b""You're right, I did not realize that."""
10146,146450139,b'Done! '
10146,148312454,"b""Couldn't this be written as a join (instead of a function)?"""
10146,148317194,b'Same as base. Remove.'
10146,148317377,b'Same as base. Remove.\r\n\r\nWhen deriving from `AnnotationCodeGenerator` provider does not need to override any method unless they need to process the annotation while generating code (like custom fluent api or skip annotation)'
10146,148317662,b'Can you write a short description why this was changed for future references?'
10146,148318180,b'This file needs clean up.\r\nRe-Sync this file from SqlServer provider with keeping in mind.\r\n- There are several event ids which are obsolete in SqlServer. They should be removed in Oracle. And also associated enum entries should be removed.\r\n\r\n'
10146,148318388,"b'Same as EventIds, there are logger messages associated with obsolete event ids have been removed. Remove all the methods here who associated event ids get removed.'"
10146,148318560,b'Continuing eventids/logger changes. Remove all string resources which are not being used in LoggerExtensions.'
10146,148319025,b'Inline schemaFilter if not being used for anything else.'
10146,148319233,b'Add Missing Schema/table warnings.\r\ni.e. log warning for user specified table/schema which were not found in database and was not scaffolded.\r\nSqlServer has some fancy code for it.'
10146,148319654,b'You can inline this in string interpolation above with `?:` to avoid string concatenation.'
10146,148321658,b'Does this cause issue if the same table name is in a different schema?'
10146,148321778,b'Rename function. It returns different Keys not just FKs'
10146,148322257,b'Use grouping else you would computing all these values for each column in composite key.'
10146,148323053,b'This would add partial FK when FK is composite. That would be incorrect model generation. This either needs grouping on FK itself or it has to continue adding columns till FK change and add FK only when FK changes.'
10146,148323379,"b'For composite PK case, this will cause creation of new PK for every column and PK with only last column will go to model that is incorrect.'"
10146,148323717,b'Faces same issue as PK/FK for composite index.'
10146,148324096,b'Why default is `SetDefault`? What would be behavior in database when this is not set? Other providers tend to return null instead.'
10146,148324349,b'No candidate keys scaffolding?'
10146,148325209,"b'We should be consistent in SQL generated. Since, query generate upper case SQL. \r\nCan you upper case all SQL parts which are not column/table names?\r\nYou can look at SqlServer for guidance. '"
10146,148325612,b'Only keep methods which are actually used in the code. Also rename the class to something else. @bricelam - Suggestion? `OracleDataReaderExtension`?'
10146,148331011,"b""I also think it's better! OracleDataReaderExtension"""
10146,148337583,"b""Thanks, I get it, I'm doing it."""
10146,148337841,"b""Thanks for explication , I get it, I'm doing it"""
10146,148337899,"b""I get it, I'm doing it"""
10146,148338445,"b""Okay, i'm gonna make it now"""
10146,148365356,"b'Hi @bricelam I also like, may not seem like, but this function is really necessary so I can get convert the default values \xe2\x80\x8b\xe2\x80\x8bof the fields.'"
10146,148368400,"b""Remove this. Type Schema is only used for aliased types since aliased types can be in own schema. There is no support of typealias in oracle scaffolding as of now so we don't need to select this."""
10146,148368625,b'No need to alias things if not processed. You can use as is. This is provider specific code and it does not need to select exact column names from query.'
10146,148368896,b'Let it be null. You can work with null instead of 0 on client side code too.\r\nSame for DATA_SCALE not sure if it is nullable though.'
10146,148369345,b'~~~There is no `identity_column` in user_tab_cols. Can you give link to doc?~~\r\nFound it in 12.2c\r\n'
10146,148370059,"b'Yes of course, imagine the following situation:\r\n\r\n_Using sqlplus as an example to create and display._\r\n\r\nSQL> create table efCore (a decimal(10,5), b number (10, 5));\r\n\r\nTable created\r\n\r\nSQL> desc efCore;\r\n```\r\nName    Type        \r\nA       NUMBER(10,5)                  \r\nB       NUMBER(10,5)\r\n```\r\n\r\nNote at this point that the displayed type is NUMBER and not DECIMAL\r\n\r\nIn Oracle this type DECIMAL is treated as a NUMBER\r\n'"
10146,148370873,b'Just select `data_default` and `virtual_column` separately and apply logic on client to figure out it if is default/computed sql.\r\nAll above would allow us to get rid of function/case/coalesce altogether. \r\n'
10146,148374216,b'Solving this now!'
10146,148374572,"b'OK, make this now!'"
10146,148379949,"b""Yes I'll do it!"""
10146,148395294,"b""Yes I'll do it!"""
10146,148396212,"b""All right, I'm implementing!"""
10146,148397417,"b'Okay, doing this!'"
10146,148398123,"b""Ok, I'll do that, it was that I looked at SQL Server and it had something like that. But I'm doing it."""
10146,148400809,"b""I already looked at this, I'll load the fixes!"""
10146,148403017,"b'No, why do I look at this *tablespace_name*'"
10146,148404096,b'Okay!'
10146,148404235,"b'@smitpatel, I made the adjustment on all that I found! '"
10146,148404452,b'Now it is!'
10146,148405268,"b""@smitpatel , Any problems using this?\r\nHere, I already deal with the primary keys and the constraints!\r\n\r\nI found this easier, and funcinal.\r\nI'm analyzing more to improve these things."""
10146,148409655,"b""Issue is, for composite case, you would get multiple rows from database for same PK.\r\nEverytime you would read values & compute properties/table of an PK for each column of composite PK. That is unnecessary computation. Further as I commented below, you would end up creating new PK object for each row so incorrect PK computation.\r\n\r\nIn older code we used a pattern where we looped over row and emitted output PK/FK whenever the name changed, collecting the columns while name was same. That's basically how group join works. To make code better we just moved to use group by. \r\n\r\nThis is link to older code https://github.com/aspnet/EntityFrameworkCore/blob/rel/2.0.0/src/EFCore.SqlServer/Scaffolding/Internal/SqlServerDatabaseModelFactory.cs#L756\r\n\r\nLook at how it breaks grouping based on name and accumulates otherwise. """
10146,148410310,"b""@smitpatel , I understand, I'll be doing it, to meet the standard."""
10146,148602662,b'Does oracle have sequences? If not remove.'
10146,148602719,b'Does oracle have type aliasing? If not remove.'
10146,148602958,b'Also associated logger messages and string resources to be cleaned up\r\n\r\n---\r\nIn reply to: [148602719](https://github.com/aspnet/EntityFramework/pull/10146#discussion_r148602719) [](ancestors = 148602719)'
10146,148603373,b'Make database model a local variable rather than a field. It is not used outside this function anyway.'
10146,148604178,b'Where schemaFilter var being used apart from this? If we decide to implement scaffolding for sequences then we would be using it there. \r\nI would leave upto you if you want to add code to scaffold sequences also in this PR. If it is not then just inline the variable for now. It can be extracted out later when needed.\r\n\r\n---\r\nIn reply to: [148404452](https://github.com/aspnet/EntityFramework/pull/10146#discussion_r148404452) [](ancestors = 148404452)'
10146,148605155,"b'Use string interpolation only. Ternary would be code but for its true part you can used nested interpolation.\r\nsomething like this `$""WHERE ... {tableFilter !=null ? $""..."" : """"};`'"
10146,148605353,b'You can just call it GetConstraints. PK/CK/FK all are constraints only :)\r\n\r\n---\r\nIn reply to: [148324349](https://github.com/aspnet/EntityFramework/pull/10146#discussion_r148324349) [](ancestors = 148324349)'
10146,148605567,"b'Yes there is, but I am not implementing the nessee PR, I will check with other improvements in a near!'"
10146,148605924,"b""@bricelam - I leave this upto you if we want to apply logic on client side or in SQL. I don't know which would be more performant. If perf difference is really small then client side is better."""
10146,148606417,b'Remove case block and both function calls (and function too). Just use the data and virtual_column on client side to do all these processing'
10146,148607290,b'Okay!'
10146,148607403,b'Will principal table schema be same? SqlServer allows FK between cross schema tables. I ask because principal table name is computed using query. Should we get principal table schema in the same way?'
10146,148607896,b'Can you move this joins to join with whole table? this is kinda N+1 query '
10146,148609076,b'tableFilter is never null or empty (we always generate filter to exclude migration history table). Remove this If and just append filter (like in GetColumns)\r\n\r\n---\r\nIn reply to: [148403017](https://github.com/aspnet/EntityFramework/pull/10146#discussion_r148403017) [](ancestors = 148403017)'
10146,148609595,"b""I just wanted to create an alias, really that does not make sense.\r\n\r\nI'm cleaning this"""
10146,148609824,b'tableFilter is never null/empty'
10146,148610721,"b""This code is not scaffolding FKs anymore. Just PK & candidate keys.\r\nDrop C because we don't scaffold check constraints.\r\nSplit out R in a separate function/query to scaffold FKs so that we don't need to join for principal table/column for other constraints which does not have them."""
10146,148613185,"b'@smitpatel , What do you think?\r\n\r\n````csharp\r\n$""WHERE t.table_name <> \'{HistoryRepository.DefaultTableName}\' {(tableFilter != null ? $"" AND {tableFilter(""t.tablespace_name"", ""t.table_name"")}"" : $"""")}"";\r\n````\r\n\r\nsometimes I think my English / communication is very bad :)'"
10146,148614252,b'I solved this'
10146,148615435,"b""I'd rather remove!"""
10146,148620556,"b'Yup exactly that. The last `$""""` does not need `$`'"
10146,148622503,"b'@smitpatel, Here is a problem, so I did this function, it was not possible to retrieve this type of information from the database with ""Oracle.ManagedDataAccess"".\r\n\r\nThe returned values \xe2\x80\x8b\xe2\x80\x8bare always empty, I already made that attempt, so I use this function to retrieve those values.'"
10146,148625793,b'Did you type cast it? The function uses varchar2 but c.data_default is of type long. You may need to account for that change.'
10146,148626475,"b'Exactly, only in the conversion of functions it allocates the bytes to varchar2.\r\nThat way we have the expected result, referring to the other things I am concluding!'"
10146,148638745,"b'No, this really is necessary.\r\nI really need to do this subquery by FK.\r\nTo get the main table and column of the main table.\r\nLet\'s imagine the following scenario:\r\n\r\n```sql\r\nCREATE TABLE ""Orders"" (\r\n\t""OrderID"" NUMBER(*,0) NOT NULL ENABLE, \r\n\t""CustomerID"" NCHAR(5), \r\n\t""EmployeeID"" NUMBER(*,0), \r\n\t""OrderDate"" TIMESTAMP (6), \r\n\t""RequiredDate"" TIMESTAMP (6), \r\n\t""ShippedDate"" TIMESTAMP (6), \r\n\t""ShipVia"" NUMBER(*,0), \r\n\t""Freight"" NUMBER(19,4) DEFAULT (0), \r\n\t""ShipName"" NVARCHAR2(40), \r\n\t""ShipAddress"" NVARCHAR2(60), \r\n\t""ShipCity"" NVARCHAR2(15), \r\n\t""ShipRegion"" NVARCHAR2(15), \r\n\t""ShipPostalCode"" NVARCHAR2(10), \r\n\t""ShipCountry"" NVARCHAR2(15), \r\n\t CONSTRAINT ""PK_Orders"" PRIMARY KEY (""OrderID"")\r\n  USING INDEX  ENABLE, \r\n\t CONSTRAINT ""FK_Orders_Shippers"" FOREIGN KEY (""ShipVia"")\r\n\t  REFERENCES ""Shippers"" (""ShipperID"") ENABLE\r\n   )\r\n\r\n\r\nCREATE TABLE ""Shippers"" (\r\n\t""ShipperID"" NUMBER(*,0) NOT NULL ENABLE, \r\n\t""CompanyName"" NVARCHAR2(40) NOT NULL ENABLE, \r\n\t""Phone"" NVARCHAR2(24), \r\n\t CONSTRAINT ""PK_Shippers"" PRIMARY KEY (""ShipperID"")\r\n  USING INDEX  ENABLE\r\n   )\r\n\r\n```\r\n\r\n**With this query:**\r\n```sql\r\nSELECT\r\n   t.tablespace_name,\r\n   a.table_name,\r\n   a.column_name,\r\n   (SELECT const.table_name\r\n       FROM all_constraints const\r\n       WHERE const.CONSTRAINT_NAME = c.R_CONSTRAINT_NAME)\r\n   AS principal_table_name,\r\n   c.delete_rule,\r\n   a.constraint_name,\r\n   c.constraint_type,\r\n   (SELECT col.column_name\r\n       FROM all_constraints const\r\n       INNER JOIN all_cons_columns col\r\n       ON col.CONSTRAINT_NAME = c.R_CONSTRAINT_NAME\r\n       WHERE const.CONSTRAINT_NAME = C.R_CONSTRAINT_NAME)\r\n   AS principal_column_name\r\nFROM all_cons_columns a\r\nJOIN all_constraints c\r\n   ON a.CONSTRAINT_NAME = c.CONSTRAINT_NAME\r\nINNER JOIN user_tables t\r\n   ON t.table_name = a.table_name \r\nWHERE t.table_name <> \'__EFMigrationsHistory\'  \r\nAND t.table_name IN (N\'Orders\')\r\n AND c.constraint_type IN (\'P\',\'R\',\'C\') \r\n```\r\n\r\nI\'ll get the result I need.\r\n\r\n```\r\nTABLESPACE_NAME TABLE_NAME  COLUMN_NAME\tPRINCIPAL_TABLE_NAME  DELETE_RULE  CONSTRAINT_NAME     CONSTRAINT_TYPE  PRINCIPAL_COLUMN_NAME\t\r\nSYSTEM          Orders      OrderID     NULL                  NULL         SYS_C007631          C               NULL\r\nSYSTEM          Orders      OrderID     NULL                  NULL         PK_Orders            P               NULL\r\nSYSTEM          Orders      CustomerID  Customers             NO ACTION    FK_Orders_Customers  R               CustomerID\r\nSYSTEM          Orders      EmployeeID  Employees             NO ACTION    FK_Orders_Employees  R               EmployeeID\r\nSYSTEM          Orders      ShipVia     Shippers              NO ACTION    FK_Orders_Shippers   R               ShipperID\r\n```'"
10146,148644623,"b""Okay, I'm checking this out!"""
10146,148661795,b'@anpete - Any ideas?'
10146,148672955,"b'So the idea here is, to split both queries in 2 parts. - FK and everything else. for non-FK you can skip retrieving principal table/delete rule etc. which is going to be null anyway. \r\nand for FK you can retrieve other things. Which will not give you issue with join.'"
10146,148676247,"b""@smitpatel, I've separated that already!  https://github.com/aspnet/EntityFrameworkCore/pull/10146/commits/ad7a37bad4406a66e27856e007214fc8190ff268\r\n\r\nI ask your patience if I do not understand, I am trying to improve my communication.\r\n\r\nMore I separated this in methods, I had as reference the SQLServer\r\n"""
10146,148680376,"b'@smitpatel \r\nI have already resolved with:\r\nInitialLONGFetchSize = -1\r\n\r\nThanks for insisting, it made me analyze OracleCommand better\r\n\r\nPlace of reference:\r\nhttps://docs.oracle.com/cd/B19306_01/win.102/b14307/OracleCommandClass.htm#BABCBFFB'"
10146,148682657,b'no type alias'
10146,148682702,b'no sequence.\r\n'
10146,148682757,b'Run T4 template and make sure it generates compile-able code.'
10146,148682833,b'prefix private. We use explicit identifiers. '
10146,148683202,b'For a computed column this will set default value and computed value both. If column is virtual then default value should be null.\r\n'
10146,148683323,b'Change name to GetKeys since it covers PK & candidate keys both.'
10146,148683427,"b""You don't need to select principal_table_name & principal_column_name in this query because it will be always null for P & U"""
10146,148683574,"b""you don't need tableName here. We have already grouped by table outside of for. So all data inside the loop is for a particular table only."""
10146,148683726,b'same as PK. table name is not required.'
10146,148684155,b'Do a left join with all_constraints for 2nd time on the key based on where clause and use the value from that column.\r\nSame for principal_column_name.'
10146,148684368,b'`CASCADE` and `NO ACTION` are only valid answers from oracle. Rest of case should be removed.'
10146,148701838,b'Makes sense!\r\nThanks.\r\n\r\n'
10209,148833273,b'Add ConnectRetryCount=0 to the connection string to prevent SQLClient from hanging.'
10242,149828569,"b'Edge case, but this would include things that begin with:\r\n* Systematic\r\n* Systematize\r\n* Systemic\r\n* Systemize'"
10242,149834485,"b'== ""System"" OR StartsWith(""System."") sounds good?'"
10242,149857285,"b""That'll work."""
10276,150640007,b'Do we need to hit this branch when _generateContextAccessors == true and parameterValue is not a LambdaExpression?'
10276,150978511,b'Constant in Pascal case'
10276,150981538,b'Lack of R#'
10326,151565170,b'CoreOnly!= true in small caps?'
10326,151565845,b'Sure.'
10326,151571474,b'`And` in pascal case? :trollface: '
10326,151571713,"b'...and no padding in conditions, please. \xf0\x9f\xa4\x93'"
10326,151571954,b'I asked because I am not sure if the equality is case-sensitive or not.'
10326,151571771,"b'(Just kidding, I could care less how people format their MSBuild/XML)'"
10326,151572230,"b""Yeah, MSBuild don't care. I personally prefer `True` since it reminds me of VB.NET \xf0\x9f\x92\x99 """
10326,151578252,"b""MSBuild's string comparisons aren't case sensitive. I'll change it to `True`"""
10328,151582160,b'@smitpatel Will you use 8 spaces?'
10328,151589717,b'This looks like a R# bug. Do you have the newest version?'
10328,151591154,"b'Thanks @AndriySvyryd, \r\nI was already getting confused, until I started looking at all code. \r\nthere are many places that are like this!\r\n\r\nAn example:\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore.SqlServer/Internal/SqlServerLoggerExtensions.cs#L141'"
10328,151588136,"b'@smitpatel , sorry for the silly question, looking better, I saw that in Expression Body Definitions you use 8 spaces!\r\n'"
10328,151615151,b'@AndriySvyryd - I have 2017.2.2 i think. Probably not the latest.'
10304,151502822,b'This should be false \xf0\x9f\x98\x84 But better to use ```Debug.Fail```'
10324,151535175,b'If someone can review this list. '
10324,151559503,"b'remove the `true`. Valid syntax is  ```csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async```'"
10324,151560644,b'If you only want expression bodied members on single-line methods you can use ```when_on_single_line:suggestion```'
10324,151570290,"b'you can combine all of these into one applicable_kinds:\r\n\r\n```\r\n# Classes, structs, methods, interfaces, enums, events, properties must be PascalCase\r\ndotnet_naming_rule.class_naming.symbols = class_symbol\r\ndotnet_naming_rule.class_naming.style = pascal_case_style\r\ndotnet_naming_rule.class_naming.severity = warning\r\n\r\ndotnet_naming_symbols.class_symbol.applicable_kinds = class, struct, interface, enum, method, property, event\r\ndotnet_naming_symbols.class_symbol.applicable_accessibilities = *\r\n```'"
10324,151570557,"b""You don't need this rule grouping for parameters if you have the one below."""
10324,151571669,"b""You'll need to pull out interfaces though. Sorry I missed that."""
10324,151816157,"b""We prefer expression bodies everywhere. We'll see how it goes and update as needed in future."""
10324,151817523,"b'this is actually ""always""\r\nhttps://github.com/dotnet/roslyn/blob/160c4098fa90cff36fadad616eab2ae967ad2563/src/Workspaces/Core/Portable/CodeStyle/AccessibilityModifiersRequired.cs#L8-L15'"
10355,152117185,"b""Sometimes I feel like we're baking too much into the individual repos, and we could do a better job of separating concerns to decouple them from Universe and other consumers."""
10355,152120390,b'Who are your other consumers?'
10355,152120910,"b""Local builds and submodules.\r\n\r\nI get there's no harm in these being here, it just also feels like they may not belong here."""
10355,152121333,"b'For example, instead of having these flags, have a general hook to override the sources then put the particulars in DotNetBuild and AspNetUniverseBuild'"
10355,152121797,"b""But it's much more general than just this PR and ultimately probably a non-issue."""
10289,151290600,b'@davkean Any idea why this check fails for F# projects?'
10289,151291626,"b'Note, we do this before trying to [get the unconfigured project](https://github.com/Microsoft/VSProjectSystem/blob/master/doc/automation/finding_CPS_in_a_VS_project.md).'"
10289,151296635,"b""F# isn't always CPS-based."""
10289,151486494,"b'Turned out to be a limitation of PowerShell in NuGet; it was picking the (string, string) overload with an empty string as the first argument.'"
10289,152106033,b'How would this Override used/set?'
10289,152113236,b'Only used to preserve the semantics of calling `MigrationsScaffolderDependencies.With(IMigrationsCodeGenerator)` can go away in 3.0.'
10355,152139789,"b""Yeah, this issue is larger than this particular PR.  Code in EFCore versus code in aspnet/Universe is an issue I'm not prepared to tackle yet. I have ideas for how we might solve this one, but definitely out of scope."""
10276,152157393,b'@maumar :trollface: '
10359,152161251,b'Filed https://github.com/dotnet/roslyn/issues/23320 \xf0\x9f\x98\x89 '
10359,152162388,b'Why not expression body?'
10359,152162515,"b""Can this rule be just disabled so it doesn't change it one way or the other?"""
10359,152163182,"b""We don't want to convert all tests to expression body especially AssertQuery once.\r\nAlmost all test files have resharper disable at top to avoid conversion to expression body.\r\nI would much prefer not to have expression body in tests to have simple & consistent code even if it doesn't look most concise. I am not sure how R# is configured but it is disabled in many files so no idea how it would interact with this code + current configuration + editorConfig.\r\n"""
10359,152163322,b'EditorConfig can be easily factored into multiple files to apply these rules on folder basis so we can configure it whatever way we want (unlike R#)'
10359,152178619,"b""That's fine as long as it doesn't flip back and forth. R# doesn't enforce this."""
10371,152620571,b'\xf0\x9f\x8e\x89 Resolves #4553'
10370,152445751,b'I added obsolete to avoid breaks. (3 of them in this file)\r\nIt was dead and obscure coding style. Only providers would be overriding them. \r\nBreak or obsolete?'
10370,153319932,b'Make helper method and call so you can handle null Instance case?'
10411,153391856,b'We can easily get rid of this logic by matching AdditionalFromClause with _unflattenedGroupJoinClauses.'
10381,153325355,b'Do we ever eliminate these when there is no skip/take? Can we?'
10381,153326072,"b'We will probably need to encapsulate the idea of an enumerable ""primitive"" type in type mapping cc @ajcvickers '"
10381,153343104,"b""We haven't but we possibly can.\r\nWould the rule be - eliminate order by select 1 when there is no skip/take?"""
10381,153346512,"b'Yeah, seems OK.'"
10381,153350347,b'At present we do not have easy access to current SelectExpression. Filed https://github.com/aspnet/EntityFrameworkCore/issues/10410'
10381,153600406,"b'""IsParameterDependent""?'"
10381,153600680,b'nit: Newline after fields'
10381,153600780,b'nit: ws'
10424,153689201,"b'note to self, take care of inserting in star projection'"
10436,154160182,"b""That's not a warning--you asked it to do it. Use Information instead."""
10436,154161524,b'`NoDiagnostics` might better reflect the semantics.'
10452,154227570,b'_eol'
10459,154256046,b'GenerateCode would be more suitable name now. Same with DbContext/ETGenerators.'
10459,154256228,b'Or just generate may be'
10459,154256378,b'Is new [] {}.Concat(..) more efficient?'
10459,154256419,b'Can also inline it in foreach\r\n\r\n---\r\nIn reply to: [154256378](https://github.com/aspnet/EntityFramework/pull/10459#discussion_r154256378) [](ancestors = 154256378)'
10459,154260908,"b'Yes, I started out having just about everything renamed, then decided I might as well wait until we move them out of `.Internal`'"
10459,154261105,b'(It was called GenerateModel.)'
10459,154261287,b'I tried a few alternatives before landing on this since it seemed like the most readable to me. Not worried about efficiency on this path.'
10459,154262425,b'Is there a reason for insertion at 0?\r\n'
10459,154262474,"b'Sorry, I commented because my eyes hurt looking at in-efficient linq queries. :trollface: '"
10459,154389206,b'Preserving old behavior'
10422,154004023,b'Consider making this and the parent protected nested classes in RelationalTypeMapper / TypeMapper'
10408,153657355,b'Alphabetical sorting.'
10408,153657478,b'No new expression. Use `SqlFunctionExpression` with correct set of parameters to represent this.'
10408,153657877,b'An expression with type void is not correct.\r\nWithout this it may produce extra = true calls. Are those causing an issue?\r\n'
10408,153657909,b'Use SqlFunctionExpression'
10408,153657970,b'Throw NotImplemented instead'
10408,153657989,b'Remove'
10408,153657998,b'Remove'
10408,153658039,b'Remove'
10408,153658180,b'The whole assembly is marked with this attribute. It is redundant. '
10408,153658206,b'ConditionalFact'
10408,153658767,"b'Remove this whole class. Instead update `SqlServerConditionAttribute.IsMet` property to check with TestEnvironment\r\nAnd in TestEnvironment, put this code as fallback to config (like DefaultConnection)\r\nThat will allow to disable the feature in config as needed and fallback based on server otherwise.'"
10408,153658800,b'use using around command & reader'
10408,153714840,"b'Yes, i had this issue. \r\n\r\nWhen translating my expression, EntityFramework does write an extra "" = 1"" after my FREETEXT call and the query fails.\r\n\r\nHow can i resolve that without returning a void in the expression ?'"
10408,153727956,"b""Once you convert it to SqlFunction, there is no longer expression of void type. (it doesn't make any sense anyway). That is where you would hit #9143\r\nProvider has no way to override and effectively tell us that this SqlFunction is of value type or condition type. Unless that is fixed you cannot do anything inside this visitor.\r\n\r\nThere is a way to work-around it though. Basically this visitor is going to create `FREETEXT(...) = 1` binary Expression. in SqlServerQuerySqlGenerator inside VisitBinary method, evaluate for that pattern and remove `=1` part from binaryexpression to generate correct SQL.\r\n"""
10408,153735434,"b""Ok i'll work on this for the moment until #9143 is solved. \r\n\r\nThank you for your support! """
10408,153847187,"b'This is unsafe casting. It will throw exception is Left is not SqlFunctionExpression. Use pattern matching like\r\n`if (binaryExpression.Left is SqlFunctionExpression sqlFunctionExpression && sqlFunctionExpression.FunctionName == ""FREETEXT"")`'"
10408,153852342,b'return just binaryExpression. This visitor returns the same expression. It is just about Visiting parts & generate SQL'
10408,153852548,b'nit: `)` goes on the line before.'
10408,153853565,b'Why `CanBeNull` instead of `NotNull` what happens when you pass null to columnName?\r\n'
10408,153853791,b'Try to find a test which gives non-zero result and assert the some part of result to verify it returned expected result.'
10408,153853983,b'Inline SQL assertions in the test running query itself and remove all tests which are just sql assertions'
10408,153854340,b'verify exact count.'
10408,153855064,b'Align all names to this concept in conditional testing to `SupportsFullTextSearch`'
10408,154010941,"b""I did't understand what you are asking for here """
10408,154136483,b'Properties named `SupportsFullTextSearching` or `SupportsFullTextSearches` should be renamed to `SupportsFullTextSearch`'
10408,154395123,b'Why this needs to be type of constant? Can it be parameter?'
10408,154412369,"b""You are rigth. It can be Parameter. I'll add some more test for this and i'll push soon. """
10408,154415196,b'What is the error when it is neither of those? Like using another column here.'
10408,154433127,"b""When the sql is like: \r\n\r\n`SELECT TOP(1) [e].[EmployeeID], [e].[City], [e].[Country], [e].[FirstName], [e].[ReportsTo], [e].[Title]\\r\\nFROM [Employees] AS [e]\\r\\nWHERE FREETEXT([e].[City], [e].[FirstName])`\r\n\r\nSqlServer throws : Incorrect Syntax near '[e]', Expecting STRING, TEXT_LEX or VARIABLE.\r\n\r\nAnd when the Sql is like :\r\n\r\n`SELECT TOP(1) [e].[EmployeeID], [e].[City], [e].[Country], [e].[FirstName], [e].[ReportsTo], [e].[Title]\\r\\nFROM [Employees] AS [e]\\r\\nWHERE FREETEXT([e].[City], N'')`\r\n\r\nNull or empty full-text predicate.\r\n\r\nAnd when:\r\n\r\n`SELECT TOP(1) [e].[EmployeeID], [e].[City], [e].[Country], [e].[FirstName], [e].[ReportsTo], [e].[Title]\\r\\nFROM [Employees] AS [e]\\r\\nWHERE FREETEXT([e].[City], NULL)`\r\n\r\nIncorrect syntax near the keyword 'NULL'."""
10408,154433684,"b""In my last commit i check for all these cases and i've added a test that expect for ArgumentException thrown by the translator on these cases."""
10408,154446157,b'You cannot evaluate this. Especially for parameters.'
10408,154446254,b'~Make freeText non-null & add Check function for Check.NotEmpty~'
10408,154446334,b'~`InvalidArgumentToFreeTextFunction`~\r\n'
10408,154447495,"b""No checks needed. Just let it pass because SqlServer would throw exception anyway. We don't have alternate pipeline to evaluate this. So all that is happening here is capturing an exception which sql server would have thrown anyway."""
10408,154447527,b'Remove this check'
10408,154447584,b'Remove exception throwing mechanism'
10408,154447687,b'Put `NotNull` annotation for freeText parameter.'
10408,154447729,"b'Yes, you are rigth. Should i let SqlServer throw the syntax error ?'"
10475,154689754,"b'Will this not replace any occurrence of "";"" in the SQL statement?'"
10475,154693060,"b""Yes any occurance.\r\n\r\nT-SQL doen't allow any other use of `;`, except at the end.  \r\nBut when I think about this, it will be more safe and general, to handle only the trailing `;`. There could be a strange column name, etc.\r\n\r\nI'll update the PR."""
10408,154740402,"b""@divega @ajcvickers - Doc comments for this? It is not implementation because we don't evaluate it on client."""
10469,154513162,b'@smitpatel Was this client-evaling before?'
10469,154814899,b'Should give some different name. QueryModelGenerator?'
10469,154814953,b'Yes. Filter based list values were not being expanded in sql.'
10478,154789582,b'But LINQ.....'
10478,154789819,"b""I'll make it use LINQ if you like. :-)\r\n"""
10478,154790977,b'~Would this be more condensed by creating service of `SqlServerUpdateSqlGenerator`?~'
10480,154808917,b'@divega @anpete @ajcvickers - Need doc comments for this.'
10480,154814006,"b'""propertyName""'"
10480,154814095,b'DRY this string?'
10480,154814927,b'A DbFunction method stub that can be used in LINQ queries to target the SQL Server FREETEXT store function.\r\nRemarks: This DbFunction method has no in-memory implementation and may throw when the querying is executing in memory. This can happen if the query contains one or more expressions that could not be translated to the store.'
10480,154815023,"b'nit: no ""is""'"
10480,154815084,b'Redundant.'
10480,154815371,b'Add an error message and probably InvalidOperation'
10480,155047698,"b'""The \'FreeText\' method is not supported because the query has switched to client-evaluation. Inspect the log to determine which query expressions are triggering client-evaluation.""'"
10480,155048608,"b'""and will throw if the query switches to client-evaluation.""'"
10480,155048728,b'column -> property'
10480,155048934,b'nit: Period at end of param sentences.'
10480,155049119,b'A Language ID from the sys.syslanguages table'
10480,155051062,"b'""The text that will be searched for in the property.""'"
10480,155051319,b'IsFullTextSearchSupported :trollface: '
10481,154814029,b'Will rename \xf0\x9f\x98\x8f'
10481,154815904,b'AddRange or ctor args to create the list.'
10481,155036590,"b""IList doesn't have AddRange, and I couldn't see an already existing extension method."""
10481,155103430,"b""We really need to add more RevEng tests. (#9111) I'll try to get to it soon.\r\ncc @ajcvickers"""
10483,155084177,b'Why not else if'
10483,155090308,"b""It was in case it became marked as an owned type while adding it to the model, but actually that can't happen, so I'll revert this."""
10499,155825656,b'\xf0\x9f\x8e\x89'
10499,155830188,b'This is much more enjoyable.'
10499,155847058,"b'The generated migrations will also look better:\r\n\r\n``` csharp\r\nmigrationBuilder.InsertData(\r\n    table: ""People"",\r\n    columns: new[] { ""Id"", ""Full Name"" },\r\n    values: new object[,]\r\n    {\r\n        { 0, null },\r\n        { 1, ""Daenerys Targaryen"" },\r\n        { 2, ""John Snow"" },\r\n        { 3, ""Arya Stark"" },\r\n        { 4, ""Harry Strickland"" }\r\n    });\r\n```'"
10512,155860213,"b'\xf0\x9f\x91\x8c The writers of providers, could use the same logic!'"
10516,155889664,b'remove comment'
10264,152161773,b'There is no need to create DateDiffExpression.\r\nUtilize existing SqlFunctionExpression'
10264,152434520,b'This should go to Core. like EFFunctions.Like\r\nAlso tests would go to specs tests and SqlServer would be only provider translating it.'
10264,153284626,b'nit: ternary expression'
10264,153284754,b'nit: ternary expression'
10264,153284854,b'Same for other methods further down'
10264,153935953,b'Revert'
10264,153947019,"b'Ok, @smitpatel, I did this to delete warnings, which appeared after the change in .editorconfig \xf0\x9f\x98\x81'"
10264,154789229,"b'typo: ""Separator""'"
10264,154802119,b'No new Expression. It is breaking change which we cannot take. Describe what is the purpose of this. We can figure out if it is possible with current framework. If it is impossible then we can look at breaking the API or moving this feature to next major release.'
10264,154802384,b'baseline.*.json files are _never_ modified unless doing a major release.'
10264,154802653,b'No test for `DateDiffNanosecond`?'
10264,154803258,b'This set of conditions are SqlServer specific. Check documentation of SQLite what you need to do. SqlServer does not allow values outside of range of int for year & month in DateAdd.\r\n'
10264,154804654,b'Remove string comparison use methodinfo comparison. Why AddMilliSecond is returning seconds as datepart?'
10264,154804966,b'SqlFunction with empty name is not supported. We are missing checks in SqlFunctionExpression ctor.\r\n'
10264,154805352,b'No SqlFunction with empty string.'
10264,154805461,b'Remove this class. Inline the consts wherever they are used.'
10264,154805516,b'If used multiple times in the class then store in private static field.'
10264,154808062,b'Use AssertSql pattern.'
10264,154808076,b'Use AssertSql pattern.'
10264,154808148,b'revert'
10264,154810696,b'These tests should not be skipped. It should eval on client without error.'
10264,154812298,"b'I had already removed it, but I have not uploaded it yet!'"
10264,154812780,"b""OK I'll be doing this, I was just following the example.\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/dev/test/EFCore.SqlServer.FunctionalTests/Query/DbFunctionsSqlServerTest.cs#L18-L52"""
10264,154812962,b'There is not!'
10264,155046312,b'Add test for DateDiffNanosecond'
10264,155046505,"b'Remove these comments. Till we actually decide to support it, there is not much value putting it here.'"
10264,155047918,b'No method of string exists which takes expression & string params. It would match with object one instead.'
10264,155048319,b'Why do we need explicit cast here? Convert to string should be fine. in SQL it will be string value anyway. And we may need convert to align types for add.'
10264,155048403,b'`firstArgument.ToString()` is big NO.'
10264,155048705,"b'This logic is bad. We want to just print constant/parameter node + "" datepart"";\r\nJust use Add regardless of arg type.'"
10264,155048756,b'Inline const values if used only once.'
10264,155048824,b'We are only translating DateTime here so why 2 branches?'
10264,155048978,b'Would it be better to actually compute this values when generating sql instead of doing calculations on server for each query?'
10264,155052089,"b'DateAdd translation should be like,\r\n`strftime(""%Y-%m-%d %H:%M:%S"", dateColumn, Convert(Arg, string) + "" datePart""))`'"
10264,155052779,b'Would these DateTimeOffset based methods be translated? @anpete @bricelam '
10264,155053048,b'avoid this check. Switch is already doing that.'
10264,155053261,b'make this a dictionary and use trygetvalue. You can do similar change in sqlserver if you want.'
10264,155053488,b'@bricelam - Can you check what should be the full date format since it is different from what we generate in SQL for SQLite.'
10264,155055532,b'Translate them exactly how this sql is formed. https://github.com/aspnet/EntityFrameworkCore/issues/4108#issuecomment-279837564'
10264,155064558,"b""@smitpatel, but that's what's being done.\r\nThis comment was edited in a few minutes, the CAST I had already implemented.\r\nIf you look at: https://github.com/aspnet/EntityFrameworkCore/pull/10264#issuecomment-349128694\r\n\r\nThis is already being done. The translation is being done."""
10264,155065957,"b'The current implementation (at the time of reviewing) for date diff was finding seconds for 2 dates and subtracting them diving by some number to change units.\r\nlike `(Date1.Seconds - Date2.Seconds)/ (const to convert to year)` to find out DateDiffYear. But client side code is Date1.Year - Date2.Year\r\nThe translation should be same for server/client both as much as possible.\r\nSo translation becomes\r\n`Cast(strftime(""%Y"", date1) as int) - Cast(strftime(""%Y"", date2) as int)`'"
10264,155093140,b'Please do not look at this yet ...'
10264,155093287,b'I have some questions to ask!\r\nI am checking...\r\n'
10264,155093618,b'Done!'
10264,155128001,"b'@smitpatel,\r\nFor this case of year and second, do only one subtraction, more for the rest, of course, has to be done calculation!\r\n\r\nthe output for sql, is good now!\r\n```sql\r\n--DateDiffDay\r\nSELECT ""p"".""Id"", ""p"".""Data""\r\nFROM ""Test"" AS ""p""\r\nWHERE CAST((strftime(\'%s\', ""p"".""Data"") - strftime(\'%s\', strftime(\'%Y-%m-%d %H:%M:%S\', \'now\', \'localtime\'))) / (60 * 60 * 24) AS INTEGER) > 0\r\n\r\n--DateDiffMonth\r\nSELECT ""p"".""Id"", ""p"".""Data""\r\nFROM ""Test"" AS ""p""\r\nWHERE CAST((strftime(\'%s\', ""p"".""Data"") - strftime(\'%s\', strftime(\'%Y-%m-%d %H:%M:%S\', \'now\', \'localtime\'))) / (60 * 60 * 24 * 365/12) AS INTEGER) > 0\r\n\r\n--DateDiffYear\r\nSELECT ""p"".""Id"", ""p"".""Data""\r\nFROM ""Test"" AS ""p""\r\nWHERE (CAST(strftime(\'%Y\', ""p"".""Data"") AS INTEGER) - CAST(strftime(\'%Y\', strftime(\'%Y-%m-%d %H:%M:%S\', \'now\', \'localtime\')) AS INTEGER)) > 0\r\n\r\n--DateDiffSecond\r\nSELECT ""p"".""Id"", ""p"".""Data""\r\nFROM ""Test"" AS ""p""\r\nWHERE (CAST(strftime(\'%S\', ""p"".""Data"") AS INTEGER) - CAST(strftime(\'%S\', strftime(\'%Y-%m-%d %H:%M:%S\', \'now\', \'localtime\')) AS INTEGER)) > 0\r\n```\r\n'"
10264,155128279,b'There is still mismatch between client version and server output.\r\nIf you like then I can build on the top of your PR to implement SQLite translators.'
10264,155134082,"b'@smitpatel,\r\nMy intention was for everything to be perfect.\r\nI did some basic tests and it works for me, I do not see inconsistency, could you guide me?\r\nAnd yes, feel free to complement the PR!'"
10264,155140871,"b'For example lets take dates\r\n`> var date1 = new DateTime(2016, 2, 27);\r\n> var date2 = new DateTime(2016, 3, 1);`\r\n\r\nThe DateDiffMonth on client side is `12 * (date1.Year - date2.Year) + date1.Month - date2.Month` Which would give us result of -1. There is difference of -1 month as we can see there.\r\n\r\nWhen converting this using %s and dividing by no. of seconds in a month. we generate this SQL\r\n```\r\nsqlite> select (CAST (strftime(""%s"", ""2016-02-27 00:00:00.0000000"") AS REAL) - CAST (strftime(""%s"", ""2016-03-01 00:00:00.0000000"") AS REAL))/(60 * 60 * 24 * 365 / 12);\r\n```\r\nWhich gives us answer as `-0.0986301369863014`\r\n\r\nBoth answers are far apart because in first case even though the dates are 3 days apart only month changes and our client method just consider months. Nothing else.\r\nSo if convert everything to seconds and start using it on server then we would be generate results which would change based on client/server eval. Since translation is something which we are introducing we should align the results to make it deterministic.\r\n\r\nI believe the client implementation is taken from SqlMethods class from Linq2Sql so we would preserve it and write our translation accordingly.\r\nSo above would generate in sql following\r\n```\r\nselect 12 * (CAST (strftime(""%Y"", ""2016-02-27 00:00:00.0000000"") AS INT) - CAST (strftime(""%Y"", ""2016-03-01 00:00:00.0000000"") AS INT)) + CAST (strftime(""%m"", ""2016-02-27 00:00:00.0000000"") AS INT) - CAST (strftime(""%m"", ""2016-03-01 00:00:00.0000000"") AS INT)\r\n```\r\n\r\nIt is somewhat ugly but it aligns us with client.\r\n\r\nIf you look at the translation then it is basically putting pieces together what client would have done otherwise using MemberTranslator.\r\n'"
10264,155210885,"b""I wanted to do this, but I thought it was strange.\r\nMore really that's the way!\r\n@smitpatel thank you very much, I am adapting ..."""
10467,155396968,b'Going to use `[IO.File]::ReadAllText($projectAssetsFile)` instead.'
10517,156167054,b'Are these args converted to full path specification rather than relative paths?'
10517,156187822,b'Would we review these names before release?'
10517,156218544,"b""Yes. We'll cover in API review"""
10517,156219168,b'I wanted to do a bit verification in this area before merging.'
10517,156224479,b'`projectDir` is. `outputDir` is as it was entered by the user'
10517,156225121,b'Will normalize outputDir here.'
10533,156206792,b'Add access-level modifier.'
10533,156207114,b'inline var.'
10533,156207590,b'Can you add SQL Assertions in SqlServer? They would client eval but it would be still good to have it so that we know it actually does not translate fully.'
10533,156215208,b'Invalid syntax. This is a static constructor...'
10533,156215442,b'(Less readable to me.)'
10533,156216363,b'\xf0\x9f\x98\xae '
10530,156180118,b'Add sql assertions for SqlServer also.'
10530,156181330,"b""You don't need special processing for empty string. Same formula returns correct result. No need to over-optimize."""
10530,156181415,b'Inline variable.'
10530,156182971,b'Use pattern match like\r\n```\r\nmethodCallExpression.Arguments[0] is constantExpression\r\n&& constantExpression.Value is int value\r\n? Expression.Constant(value + 1)\r\n: Expression.Add(....)\r\n```\r\n'
10530,156183299,b'Add test for IndexOf with empty string\r\nReplace with empty string replacement to check erase\r\nSubString with startIndex = 0 and/or length = 0\r\n#Resolved'
10530,156183465,b'What is the relation of SqlServer to Sqlite test?\r\nI am not sure if I understand what are you asking for.'
10530,156184217,"b'Override this methods in SimpleQuerySqlServerTest class and assert SQL generated.\r\nAll functional tests are run against all the providers. So even you are making change in SQLite only, the test will run on SqlServer too. Since SqlServer provides most functionality, we always assert SQL for all sync tests in SqlServer.\r\n'"
10530,156298024,"b'Any reason this are not using AssertQuery syntax?\r\nI think the function for single result would be AssertSingleResult.\r\nAlso use a predicate on Customer like `c => c.CustomerID == ""ALFKI""` to reduce the data fetched from server.'"
10530,156299964,"b'Even though the arg - string.Empty is inlined, it still created parameter for. If the constant of string empty is never going to appear, would it be necessary to optimize the constant case in translator?\r\nI will run some tests tomorrow to check out what is happening. I am commenting since i found it interesting.'"
10530,156318382,"b'I replaced string.Empty with a """" in a test and parameter has gone but it seems like client evaluated now, because it produced the following SQL:\r\n```\r\nSELECT TOP(1) [c].[ContactName]\r\nFROM [Customers] AS [c]\r\nORDER BY [c].[CustomerID]\r\n```'"
10530,156319992,"b'Well there are other tests (e.g. for Substring) in `SimpleQuerySqlServerTest.Functions` file that follows same pattern, so I just borrowed it from there:)'"
10530,156321690,"b'Actually I can just refactor all of them - there is no problem about that.\r\n\r\n> Also use a predicate on Customer like c => c.CustomerID == ""ALFKI"" to reduce the data fetched from server.\r\n\r\nDoes this really necessary, considering that I use First?'"
10530,156454503,"b""Its a minor thing. Few months ago, i wouldn't have said so. But while working on writing a provider for EF, the test time issues i ran into are glaring. In brief, We translate `First` to server so it is not going to fetch a lot of data but a provider which cannot translate `First` to server have to fetch whole table. Unless test really requires lack of predicate, it should restrict result set. Or you can use table like Employees which has only 9 rows."""
10530,156546957,"b'@SSkovboiSS - I filed #10547 That is the cause why string.empty created parameter. (so we need to use """") for now.\r\nIt client eval\'ed because of some optimization we do in projection when it translates to constant. Filed #10548\r\n\r\nCan you revert this optimization for now?\r\nJust return Conditional Expression always. Likewise for Sqlite'"
10530,156547067,"b'Use `""""` instead of string.Empty in all tests for now till #10547 is fixed.\r\n'"
10530,156547164,b'Substring_with_IndexOf'
10530,156547227,b'These are alphabetically sorted. Can you sort them? Also in SQLite.'
10530,156547816,"b'Can you remove the optimization return the constant?\r\nIf the patternExpression is constant and not null or empty then return charIndexExpression. In all other cases, conditional block. Also check for IsNullOrEmpty because null can appear.'"
10530,156547951,"b'Sorry for my earlier comment But since the first arg is always int type, you can remove the check `constantExpression.Value is int` and instead do hard cast like `(int)constantExpression.Value`\r\nSame in SQLite.'"
10530,156548075,b'#Resolved'
10530,156593587,"b""Like that?\r\n\r\n```\r\nreturn patternExpression is ConstantExpression constantExpression\r\n                    && !string.IsNullOrEmpty((string)constantExpression.Value)\r\n                        ? (Expression)charIndexExpression\r\n                        : Expression.Condition(\r\n                            Expression.Equal(patternExpression, Expression.Constant(string.Empty)),\r\n                            Expression.Constant(0),\r\n                            charIndexExpression);\r\n```\r\n\r\nIt produces SQL:\r\n```\r\nSELECT CASE\r\n    WHEN N'' = N''\r\n    THEN 0 ELSE CHARINDEX(N'', [c].[ContactName]) - 1\r\nEND\r\nFROM [Customers] AS [c]\r\nWHERE [c].[CustomerID] = N'ALFKI'\r\n```"""
10530,156781707,b'Yup. That sounds correct.'
10557,156799590,b'Change name to _eol'
10557,156800560,"b'Interesting. I had to add ""."" to correctly run the tool. Is it working correctly for you? Could be a random breaking change in VS.'"
10557,156802352,"b'Yeah, I get an extra ""."" on VS 15.4.5'"
10557,156805866,"b'Breaking change in 15.5\r\nI lack ""."" while running template in 15.5.1 & 15.6 preview 2\r\nUpto you what you want to do. :trollface: '"
10557,156806446,"b'Resharper is still slow on 15.5, so I think we should wait a bit before making the whole team  upgrade.'"
10564,157079663,"b'@ajcvickers This is the major kind of break OracleProvider is facing. The bug existed earlier (since translation was not safe in all cases). Addition of more testing in specs breaks the provider testing since bugs start surfacing in functional tests. Regardless, user faces the issue.'"
10564,157082040,b'cc: @bricelam '
10564,157086311,b'Why do we need netcoreapp2.1 here?'
10564,157089605,b'#10558 '
10564,157090298,"b""Don't we still need to exclude `net461` on non-Windows?"""
10564,157090456,b'(And in `EFCore.Specification.Tests.csproj`)'
10564,157090744,"b'That issue explains the need for netcoreapp2.0, but I still see no need for netcoreapp2.1'"
10564,157091078,b'It would capture if more overloads are added in netcoreapp2.1 adding overload is non breaking. Though it would rarely fail queries in current setup.\r\nMore basically it gets our specs in 2.1runtime else runners running 2.1 is not much help'
10564,157091304,b'Net461 can compile but not run. We need to include it to compile oracle functional tests on linux. We can conditionally exclude running tests but not compilation. '
10564,157091982,b'In my opinion the chance of an overload being added that would break us is too small to have to compile and ship another tfm.'
10564,157093670,b'I will exclude netcoreapp2.1 for now. It is not needed for this change. I just needed compilation for net461.\r\n'
10569,157111441,b'cc: @ryanbrandenburg - This would remove that weird project from build.cmd script solution'
10569,157111579,"b""@natemcmaster - This ones can perhaps go away from build infra altogether. They don't change anyway. They are inlined in csproj right now (could be put it in a file too) but regardless, it does not need to interact with universe build/automation."""
10564,157296078,"b""Thanks @smitpatel. Let's talk with @anpete on it after the holidays."""
10528,155911494,"b'@smitpatel, since it will eliminate the fraction, it does not make sense to use %f.\r\nYou can use %S so eliminate the fraction without needing rtrim.'"
10528,155912571,b'Incorrect. rtim will remove fractions only if they are 0. In all other case we need fraction.'
10528,155919005,"b""Alright, I interpreted it differently!\r\nAnd I wanted to refer to an exit like [this](https://github.com/aspnet/EntityFrameworkCore/blob/a3e3d8c9bb2edb62097b2a986eedbb465c22351a/test/EFCore.Sqlite.FunctionalTests/Query/DbFunctionsSqliteTest.cs#L56).\r\n\r\nI believe this:\r\n`rtrim (rtrim(strftime ('%Y-%m-%d% H:%M:%f', 'now', 'localtime'), '0'), '.')`\r\n\r\nIt could simplify for this reason:\r\n`strftime('%Y-%m-%d% H:%M:%S', 'now', 'localtime') or datetime('now', 'localtime')`\r\n\r\nBut it is only a humble suggestion.\r\nThis is just ideas, you have helped me a lot to think about it.\r\nIf it is not valid you can disregard it.\r\n"""
10528,155930922,"b'It is valid optimization but there is no way to figure out in this translator if the result is being equated to parameter or a column in database of being used inside another function which would prune out fractions regardless.\r\nWe could potentially identify such patterns in translator which is consuming this but at that point we are effectively reconstructing the whole translated expression. Moreover, all the consumers need to be aware of the pattern & do the pruning which is easy to miss out.\r\nThe best way to solve it to have a good visitor which could identity such pattern and do the pruning but such thing is not just a simple pattern to identity but also to understand the consumer node so it could be pretty complex.\r\n\r\nGiven that it is on server side, and server would also apply some optimizations, the only drawback is more complex looking query. At that point it is very low value to make SQL pretty looking at the expense of increasing complexity.'"
10567,157093599,"b""Note, using an assembly-qualified name here instead of `Type` so that we play nicely with Publish/AOT. These things are design-time only and shouldn't be deployed."""
10565,157305876,b'Looks like you need a rebase. I believe @smitpatel just removed this sln configuration.'
10530,157630844,b'Missed picking up this bit in last commit. Merged via 778eeb31f5b79d1d47231fc34479d459fc4e7248'
10579,157599014,b'Remove IsLiteral. Unless it is absolutely necessary in which case add a regression test.'
10579,157630193,b' Removed.'
10579,157632632,b'I added a commit in dev which would stop this adverse optimization to run. Can you rebase on dev? This test may require an update.'
10579,157633438,"b""Yes, I'm doing rebase and will verify if this test passes."""
10587,157817425,"b""Should we throw/warn if they call this and the provider doesn't support it?"""
10587,157853291,"b'Yeah, we could throw by default, but noop for InMemory\r\n@divega '"
10587,157858592,b'@AndriySvyryd AFAIR there is already an option flag for in-memory to ignore transaction calls. Should it only noop if that flag is enabled?'
10587,157859146,b'They were always ignored previously. What would be the behavior if the flag is not set? Throw?'
10587,157859415,b'Nit: provider -> provider**s**'
10587,158012256,"b'Actually, I think for the other transaction APIs we log `InMemoryEventId.TransactionIgnoredWarning`. Then you have to use `ConfigureWarnings` if you want to either throw or completely ignore it. Makes sense?'"
10587,158118971,b'ITransactionEnlistmentManager?'
10587,158121215,b'I have no objections. @divega?'
10604,159314846,"b""Does Precision have a real impact for these types? If so shouldn't it be higher for `Enum8` than `EnumS8`?"""
10604,159317421,b'I believe that 6 is correct for both--i.e. big enough for both 127 and 255.'
10604,159317798,"b'Never mind--I see that precision is 3 for byte. I think it is because Oracle has a specific type mapping for byte but not for sbyte, so sbyte is being converted to map to short, and hence it has precision 6.'"
10604,159319944,b'Use `HashSet` for `visited`'
10604,159320811,"b'List is faster for a small number of elements, which this will almost always be.'"
10604,159320919,b'\xf0\x9f\x98\xb1 \r\nUse `else if` please'
10604,159321387,b'For clarity? Is this not clear?'
10604,159322022,b'It takes longer to parse for me.'
10604,159326752,b'By reusing the same array this method would be more efficient and shorter'
10604,159327525,"b'Yes, but the array can be owned by the entity, which which then causes bad things to happen--I was originally reusing the same array.'"
10604,159328933,"b""At least you could precompute `GetByteCount(type)` as it won't change call-to-call"""
10604,159329524,"b'Okay, I can do that.'"
10604,159331043,"b""Minor: it doesn't seem that grouping these 3 types together gives much benefit"""
10604,159331295,b'Typo in `Prefferd`'
10624,159346592,b'If there are multiple bindable constructors with the same number of parameters we should throw instead of arbitrarily selecting one'
10624,159347441,b'This could bind several parameters to the same property if they only differ in case. We can choose to just throw in that case.'
10624,159520801,b'Done'
10624,159550584,"b'Discussed and changed the matching to use the same rules as for fields, but not preventing the same property being bound to multiple parameters.'"
10624,159556308,b'@ajcvickers  Typo'
10624,159557039,"b'@ajcvickers \r\nIt would be slightly more query-idiomatic to take QueryContext here. We could also introduce a MaterializationContext type here that so that the delegate would be ```Func<MaterializationContext, object>```. The advantage would be to simplify further changes and to DRY things up a bit - Changes here seem pretty viral and unpleasant.'"
10624,159559623,b'Discussed with @anpete and created issue #10641'
10594,157907786,b'Is it model event or model validation event?'
10594,157907831,b'Above comment because Model & Model.Validation seems to be different loggers.'
10594,157909473,b'Will change to `// Model events`'
10594,157909619,b'Seems ok without having to rename the existing property/parameter'
10586,157867295,b'RemoveTypeAs'
10650,159975011,"b""Nice, didn't think of doing this. We should put a note to remove it in 3.0"""
10650,159976978,b'Filed #10651'
10646,159762976,b'More properties are paired here now which exposed this bug.'
10668,160554282,"b""I'm going to play around with this a bit more and add some tests. This doesn't feel like the correct fix to me.\r\n\r\nI don't think this should be looking at the names of just *any* entity type. My initial instinct is that it should only be the *root* entity type(s), but there's also a case for introducing a new base type...\r\n  """
10668,160677883,"b'I have thought about this, and I agree. I was just thinking of solving the issue I had and not the bigger picture of what the code is intended to do.\r\n\r\nI see the challenge as two fold and may need to be solved in the table mapping code. As I see it, the TableMapping type represents one DB table and all of the entities that use it. The function here is trying to determine if one table map matches another without just comparing the names in order to catch table renames. The second issue is table/entity splitting. Just matching by the root entities could still mix up the tables if two or more entities are split across two or more tables.\r\n\r\nMy best thought is that the TableMapping should separate owned and root entities as two different properties (as owned are necessary for detecting column changes) but instead of tracking the entity it tracks its mapping to the table, then I think an apples-to-apples comparison can be made.\r\n\r\nUpdate:\r\nI see that entity splitting not yet a thing, but it much requested so for now I guess an entity fully maps to a table, but it is definitely something to keep in mind.'"
10647,159940315,"b'>DbQuery [](start = 26, length = 7)\r\n\r\nRename file to match type name'"
10647,159940787,b'Copy paste doc error'
10647,159941348,"b'>InternalDbQuery [](start = 17, length = 15)\r\n\r\nRename file'"
10647,159941466,b'Rename file here and generic'
10647,159942340,"b'What is the reason for adding the fake key here? Does it ever get set to any value, or used in some other way?'"
10647,159943005,"b'>Adding_entity_to_state_manager_of_different_type_than_local_view_type_has_no_effect_on_local_view [](start = 28, length = 97)\r\n\r\nInappropriate rename?'"
10647,159946164,b'The rename was pretty heinous \xf0\x9f\x98\x84 '
10647,159965810,b'This may have been an early requirement to work around the validator. Will try and remove.'
10647,160077755,b'Can this be added to IMutableModel?  I have been working on table value function support based off your vt-new-* branches and need access to this method.  '
10647,160249780,b'@ajcvickers This would be a break.'
10647,160262448,"b""Is the version after 2.1 a breakable change version?  I think some of the other changes for TVF will introduce some breaks as well so it might be better to hold off.  I'm also not sure of the current timeline for 2.1, but it seems to be getting close, and I don't want to force something if I can't make that deadline."""
10647,160487237,"b""Not sure at this stage. I would still try to target 2.1 if you think it's feasible. Include the breaks you would like to make and we can deal with them on a case-by-case basis. - We can often put it workarounds in the short term or suggest alternatives."""
10647,160510065,b'Why would you do a double lookup?'
10647,160510590,b'Invert condition'
10647,160510789,b'Combine conditions'
10647,160510838,b'What happens if conventions change annotations but _annotations.Count is unchanged?'
10647,160512107,b'Conventions use `SetAnnotation` instead of `AddAnnotation`\r\n\r\n---\r\nIn reply to: [160510838](https://github.com/aspnet/EntityFrameworkCore/pull/10647#discussion_r160510838) [](ancestors = 160510838)'
10647,160513511,b'Invert condition'
10647,160514136,"b'Some leftover references to ""view"" in this file'"
10647,160514270,b'And here too'
10647,160515600,b'Will we support weak query types? If not then you can omit the `FindInDefinitionPath` call.'
10647,160517145,"b'>foreignKey.DeclaringEntityType.IsQueryType() [](start = 29, length = 44)\r\n\r\nDo we support relationships between query types?'"
10647,160517946,b'This should be a property on `IEntityType`'
10647,160518628,b'Move this to `ForeignKey.Navigation`'
10647,160519625,b'Separate the `throwOnQuery = false` overload as something like `EntityOrQuery`. You can do this as a separate PR if you want to keep the size down.'
10647,160520676,b'Discussed offline. Problem happens when a convention removes an annotation as a result of a different annotation being added.\r\n  '
10647,160521294,b'Not currently.'
10647,160524894,b'Will remove.'
10647,160528573,b'This should only remove annotations added by conventions. Explicit annotations should be removed or trigger an exception in the extension methods themselves.'
10647,160529206,b'Why was this separated?'
10647,160529980,"b""Finally we've reached the perfect API size"""
10647,160530615,"b""Don't forget to test the non-generic version"""
10647,160545993,b'Easier debugging.'
10647,160765138,b'Removed convention.'
10674,160562420,"b""not sure if there's anything we can do here"""
10674,160566648,b'will unify with Include pipeline in future checkin(s)'
10674,161094733,b'Properties count check can be omitted since it is handled by `CreateKeyAccessExpression`.'
10674,161095092,b'Typo.'
10674,161114590,b'Maybe a custom node here instead? We should try and avoid the duplication here.'
10674,161114789,b'Internal?'
10674,161115324,"b""I think it's fine to leave the redundant check - majority of cases are single property key accesses, so by leaving this check we make sure they fall into the correct method right away, rather than jump to CreateKeyAccessExpressionand then back to CreateEFPropertyExpression"""
10674,161115392,b'Typo in comment.'
10674,161115518,b'IReadOnlyList/Collection'
10674,161115639,b'Typo'
10674,161115689,b'Check length instead'
10674,161115751,b'declared -> defined ?'
10674,161115832,b'Check length instead'
10674,161115912,b'Check length instead'
10674,161116202,b'OfType makes it IEnumerable'
10674,161118273,b'Will give it a try'
10674,161132280,b'Property'
10674,161294432,"b'the logic in relational is quite complicated - I would rather keep properties simple, hence the method.'"
10674,162480513,b'Use a tuple type.'
10720,162506102,b'Save alloc with [0]?'
10720,162506622,b'DI?'
10720,162506643,b'DI?'
10720,162735915,b'Done'
10720,162735955,b'D.I. enabled the factory'
10356,155356242,"b""Don't bother with adding end-to-end tests yet. We have #9111 to figure out the best approach for this."""
10356,155921389,b'@bricelam There used to be an `IFileService` interface that abstracted the file system so you could mock it. Is there an alternative to that now?'
10741,163009864,"b'I think we need `EXEC` for SQL Azure. Even though it never executes `ALTER DATABASE`, it still needs to parse it.'"
10735,163035391,b'typo ;)'
10219,157823978,"b""On SQL Server, we did this since there is no way to change the default in the `ALTER TABLE..ALTER COLUMN` statement. It looks like Oracle may have better support for this:\r\n\r\n``` sql\r\nALTER TABLE MyTable MODIFY MyColumn DEFAULT 'NewDefault';\r\nALTER TABLE MyTable MODIFY MyColumn DEFAULT NULL;\r\n```\r\nAlthough it can't actually remove the default constraint, it may not matter since setting it to `NULL` effectively disables it.\r\n\r\nI'll leave it up to you whether it's worth simplifying this..."""
10219,157824270,"b'As above, all of this could be simplified to just\r\n\r\n``` sql\r\nALTER TABLE """"People"""" MODIFY """"LuckyNumber"""" int NOT NULL DEFAULT 7\r\n```'"
10219,157830201,"b""The above code isn't needed. This statement should include a `GENERATED..AS IDENTITY` clause."""
10219,157831107,"b""Again, the above code isn't needed--we know it remained an `IDENTITY` column.\r\n\r\n`AlterColumnOperation_add_identity` shouldn't throw, just include the `GENERATE..IDENTITY` clause.\r\n\r\n`AlterColumnOperation_remove_identity` shouldn't throw; include a statement like this:\r\n``` sql\r\nALTER TABLE MyTable MODIFY MyColumn DROP IDENTITY\r\n```"""
10219,157832892,"b""All `AlterColumnOperation`s when not `IsOldColumnSupported` and not `IDENTITY` should be querying `ALL_TAB_IDENTITY_COLS` and conditionally issuing a statement like this:\r\n\r\n``` sql\r\nALTER TABLE MyTable MODIFY MyColumn DROP IDENTITY\r\n```\r\n\r\nIn other words, if it's not an `IDENTITY` column, but we don't know if it *was* an `IDENTITY` column, we should check if we need to drop the `IDENTITY` constraint."""
10219,157835241,"b'Do you have to drop the existing column, or can `ALTER TABLE..MODIFY` handle this?'"
10219,157835683,b'Do you have to rebuild indexes here on Oracle or can we remove this logic?'
10219,157837124,b'What is this code doing? Why is it needed?'
10219,157837479,"b""Again, this doesn't seem right. Why is it needed? Does Oracle not support statement batching? Instead of using `EXECUTE IMMEDIATE`, we should just put each statement in its own command."""
10219,157839468,b'Why `BEGIN` and `END`?'
10219,157866284,"b'@bricelam , this is necessary.\r\nTo insert batch data, we do not have the same SQL Server support.\r\nOracle returns us error ""ORA-00933"" command not terminated!\r\n\r\nThanks for all the reviews, I\'ll be analyzing every case!'"
10219,157904833,"b""Thanks for the hard work! In some ways, I hate that we used the SQL Server code as a starting point since all of its quirks almost certainly don't apply to Oracle."""
10219,157920612,"b""I'm going to start working on it and we'll see the progress."""
10219,157926300,"b'@bricelam , this may not seem nice, but stay with it, because we can remove a batch of indexes, with more security.\r\n\r\nAnd it is necessary to declare the block ""BEGIN .. END""'"
10219,157926556,"b""I'll check this out, and do some testing!"""
10219,158044487,"b""I'm looking at this, thank you it makes really sense!"""
10219,158078084,b'Was your idea to have something like that?'
10219,158090236,"b""This is one more problem that we have to think about as we will solve later, Oracle's version 11 is different from the increment.\r\nFor now, I will only be compatible with version 12.\r\n\r\nDone!"""
10219,158101989,b'Why define a function and not use Exists directly as condition?'
10219,158112371,"b""@smitpatel \r\nThe reason is that we do not have the same SQL Server support to validate if the table exists, so it's necessary, it may seem ugly, but that's the way to do it.\r\n\r\nAll I've seen so far are really weird adaptations, and I did not like it.\r\nThis is a sure way to do this validation.\r\nUnfortunately, there is a limitation, unless you have a better idea.\r\n\r\nI have not seen anything better than that, that it is functional and the query is cleaner."""
10219,158119127,"b'```\r\nIf Exists (...)\r\nThen ....\r\nElse ....\r\nEnd\r\n```\r\nWhat is wrong with above. What goes inside is different between SqlServer/Oracle.\r\nIf count of something is 0 then selecting without count will give you false for `Exists` query. So unless we are matching count to some specific numbers other than 0 or 1, function is not necessary.'"
10219,158129451,"b'In fact I did not follow his logic, I want to understand.\r\nMy reasoning was if the count is 0 is why there is no table, since we can not use EXISTS here.\r\n  '"
10219,159301855,b'@smitpatel No `IF EXISTS` in PL/SQL'
10219,160221153,b'Why `MODIFY` when the next statement is `DROP COLUMN`?'
10219,160222393,b'\xf0\x9f\x8e\x89 So much prettier than SQL Server!'
10219,160240420,"b'@bricelam , I believe it is necessary.\r\nbecause if it is a computed field, it will remove the default value.\r\n\r\nI will follow your recommendation as you see fit.\r\nMy opinion is to stick with it!'"
10219,160261612,"b""https://github.com/ralmsdeveloper/EntityFrameworkCore/blob/a666e9ef2bd867151f374b22028b99399d5e8b43/samples/OracleProvider/src/OracleProvider/Migrations/OracleMigrationsSqlGenerator.cs#L536\r\n\r\nI don't think this line is needed on Oracle."""
10219,160276296,b'I removed it.'
10754,163421020,b'Use this test to resolve the open MethodInfo before calling MakeGenericMethod.'
10754,163421208,b'is there better way for determining sync vs async query?'
10754,163421211,b'As above.'
10754,163421287,b'Make a local for collectionQueryModel.SelectClause.Selector.Type ?'
10754,163421546,b'IsAsyncQuery'
10754,163421671,b'Why do we need this. I think we know this already.'
10754,163422536,"b'we know on the top level but then we lose that information if child EQMV gets created from another visitor, e.g. RelationalProjectionExpressionVisitor. I guess we could flow that information to all visitors that can later create a child EQMV, but that seems more disruptive, and not sure if we can predict all places when EQMV will be created in the future'"
10754,163423126,"b'OK, we usually flow it from the argument passed to EQMV.OptimizeQueryModel. We can add this to QueryCompilationContext, but just set it from EQMV.CreateAsyncQueryExecutor'"
10754,163423856,b'These can be readonly'
10754,163424206,b'I think there is dead code on line 556.'
10754,163424287,b'LiftOrderBy had two dead args.'
10760,163746667,b'Why? The other constructor has 3 parameters'
10760,163746994,b'Doc comment?'
10760,163902491,"b""```\r\nSystem.InvalidOperationException : Unable to activate type 'Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RelationalConventionSetBuilderDependencies'. The following constructors are ambiguous:\r\nVoid .ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCoreTypeMapper, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1[Microsoft.EntityFrameworkCore.DbLoggerCategory+Model], Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext, Microsoft.EntityFrameworkCore.Internal.IDbSetFinder)\r\nVoid .ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper, Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext, Microsoft.EntityFrameworkCore.Internal.IDbSetFinder)\r\n```"""
10760,163902664,b'Done'
10773,164006392,b'\xf0\x9f\x91\x8d '
10592,157855291,b'@natemcmaster @ryanbrandenburg - This is new dependency to add. Where it should be added in Universe for automation?'
10592,157855498,b'This is currently sample which makes it easier to expand (rather than finding the test for the scenario). It would be removed in future or can be converted to doc sample.'
10592,157855982,b'Current Version.'
10592,157857251,b'You should remove these to properties. They are managed automatically via dependencies.props'
10592,157857545,b'https://github.com/aspnet/Universe/blob/dev/build/external-dependencies.props'
10592,158405391,b'Move to options'
10592,158405532,b'Throw from all of these?'
10592,158407104,b'Why is this needed?'
10592,158411172,b'Moved to options coming from `UseDocumentDb` method. Was pending a push to the branch.'
10592,158411217,"b""I copied that over from InMemory. I am not sure what should be behavior of these since I haven't added tests which uses this."""
10592,158411264,b'Copy over. Other projects have it. At present there are no unit tests.'
10592,160488692,b'Noooooooooo :trollface: '
10592,160489245,"b'Remove ""Sample"" from here and directory?'"
10592,160490241,b'Core extension method?'
10592,160490643,b'Tail await call. Remove try and return Task directly. Or is the try needed for some reason?'
10592,160490707,b'Tail await call. Remove try and return Task directly. Or is the try needed for some reason?'
10592,160490752,b'Tail await call. Remove try and return Task directly. Or is the try needed for some reason?'
10592,160491175,b'nit: options'
10592,160491391,b'TODO: Add API check tests at some point'
10592,160492268,b'Consider changing IDocumentCollectionService to have a single Update method that has this switch in its impl.'
10592,160492754,b'nit: blank line before methods.\r\n  '
10592,160494495,b'Need any AssertSql?'
10592,164184830,b'but its single! :trollface: '
10592,164187051,"b'Formatting of ""light-weight annotations framework"" is pending. Will be doing once some annotations are in.'"
10775,164209173,"b""I would change the condition to `.Overrides(configurationSource) && configurationSource == ConfigurationSource.Explicit` so it doesn't throw for data-annotation configuration or configuration from conventions"""
10775,164210576,"b'this should be\r\n```C#\r\nif (duplicateNavigation.IsDependentToPrincipal()\r\n    ? foreignKey.GetDependentToPrincipalConfigurationSource()\r\n    : foreignKey.GetPrincipalToDependentConfigurationSource())\r\n{\r\n    if (foreignKey.Builder.DependentToPrincipal((string)null, configurationSource) == null)\r\n    {\r\n        return null;\r\n    }\r\n}\r\nelse\r\n{\r\n    if (foreignKey.Builder.PrincipalToDependent((string)null, configurationSource) == null)\r\n    {\r\n        return null;\r\n    }\r\n}\r\n```'"
10775,164211049,b'Will do'
10775,164211100,b'Will change'
10775,164217989,"b""Oh and you should wrap this in a `using(ModelBuilder.Metadata.ConventionDispatcher.StartBatch())` so that conventions don't add it again before you are finished"""
10777,164208681,b'Message?'
10776,164015001,"b'could DRY ToString method by creating new instance of ExpressionPrinter and using it instead of repeating the logic. Probably not worth the perf hit tho, especially since it affects debugging. Thoughts?'"
10790,164264421,b'nit: _disposed'
10790,164264430,b'Nice'
10797,164409265,b'Just change SQL to \r\n\r\n`Select * from [Orders]`'
10797,164410123,"b'or `SELECT * FROM """"Orders""""` Looks like it is highly inconsistent across tests'"
10797,164519624,"b'Well, I change to `SELECT * FROM """"Orders""""` won\'t it break SQL Server? I mean, this is actual SQL code getting executed against the database, right? If so, it\'s going to be different across providers. I\'m confused as to why Relinq actually looks at this though.'"
10797,164521440,b'It is basically pattern used here https://github.com/aspnet/EntityFrameworkCore/blob/dev/src/EFCore.Relational.Specification.Tests/Query/FromSqlQueryTestBase.cs\r\n\r\nIt will break SqlServer FTs in a way that AssertSql are incorrect.'
10838,165188979,b'ConfigurationSource.Convention'
10838,165191007,b'Move this to a separate convention and make it idempotent'
10838,165191816,b'Cache the MethodInfo'
10838,165192756,b'Use pattern matching'
10838,165193997,b'Not available in this query.'
10838,165194028,b'Will do.'
10838,165194106,b'Cache the type arrays'
10838,165194164,"b'Had them separate, then combined for some reason, but will try separating them again. Will make idempotent.'"
10838,165194195,b'Will do.'
10838,165194244,b'Will do.'
10838,165194941,b'Whitespace'
10838,165210172,"b""Consider moving this, `FindCandidatePrimitivePropertyMapping` and `FindCandidateServicePropertyBindingFactory` to a new type so that the conventions don't need to depend on an unstable set of services and the logic is in one place"""
10838,165211320,"b""Shouldn't this be `.DeclaringType.GetTypeInfo().IsAssignableFrom(typeof(TEntity).GetTypeInfo())` ?"""
10838,165213594,b'_serviceProperties?'
10838,165214034,b'IEntityType?'
10838,165214941,"b""Because: `entityType.SetNavigationAccessMode(PropertyAccessMode.Field);` I can probably guess what you're going to say next..."""
10838,165215046,b'Cast to `EntityType` and return `_serviceProperties.Values`'
10838,165215076,"b""It's interesting that no tests failed without this."""
10838,165215194,b'I copied this from the properties one--should the same change be made there?'
10838,165215345,"b""It's not wrong, just inefficient"""
10838,165215471,b'Yes'
10838,165217673,b'This needs to be documented so might as well do a case-sensitive comparison'
10838,165402118,"b""Not sure exactly what you meant and didn't want to block on it, so filed: https://github.com/aspnet/EntityFrameworkCore/issues/10847"""
10833,165789259,b'Extension method on QueryModel - unify with above.'
10833,165789324,b'Multiple enumeration of query'
10833,165789777,b'Yay'
10833,165789861,"b""This hook isn't specific to groupby. How about OnBeforeNavigationRewrite or something"""
10833,165790114,b'Should we add qcc.HasIncludes and cache result?'
10833,165790196,b'Skip/Take would be ChoiceResultOperatorBase derived?'
10833,165790355,b'we could'
10833,165790455,b'Can we discuss API design if we want to add hooks in the middle of OptimizeQueryModel?'
10833,165790552,"b""Don't we have IsIncludeQuery method/property somewhere?"""
10833,165792661,"b""seems very specific to this case - if distinct wasn't there we could it something like HasOrderDependentResultOperator, but distinct is not that - any good idea for the name, or maybe its too specific to justify the extension method?"""
10833,165794508,b'@smitpatel you are correct'
10832,165024392,b'In SingleOrDefault case it should be Take(2).'
10832,165152579,"b'Top level projection will take 2 and it will be fed into Single to check if more than 1 elements exists. The inner QM just needs to return all the results that are needed to match with the outer, for the positive case.'"
10832,165547387,"b'disregard this part, it will be removed in the fix for #10828'"
10832,165788908,b'Dupe check?'
10832,165789377,b'Are we blocking GroupResultOperators from optimization here?'
10832,165789756,b'Is take ValueFromSequenceResultOperator? This would remove the newly added TakeResultOperator otherwise.\r\n\r\nIf not why are we removing this RO now?'
10832,165789834,b'What happens when user uses Last without OrderBy?'
10832,165800412,"b'yes, tracked here https://github.com/aspnet/EntityFrameworkCore/issues/10831'"
10832,165801496,b'correlated collection always adds ordering'
10859,165781835,"b""Do this always. Using the `DEFAULT` results in an error anyway when `NOT NULL`, so we shouldn't reverse engineer it."""
10859,165782268,b'(Discussed with @smitpatel)'
10859,165791210,b'May be `FilterClrDefaultValue`?'
10859,165791274,b'Pending note?'
10859,165806545,"b'No, for future reference to others when they need to update it.'"
10809,164846312,b'These all could be simplified by writing `Equals` method on Class directly.'
10880,166143491,"b""These two look funny, but they're what SQL Server normalizes `CAST(0 AS real)` and `0E0` to."""
10883,166146945,b'@ajcvickers This break OK?'
10883,166148749,b'Tool did not catch it then it should be fine.'
10883,166179957,b'Tool did :trollface: '
10883,166355483,"b""Probably should not make this change--binary compat break and doesn't seem to add much value other than cleanup."""
10883,166356407,"b'Would be nice to test if a method is ""called on"" a generic builder, then it returns as generic builder. There are lots of places where we have generic overloads, and it\'s easy to miss them or get the return type wrong. But this is probably a separate issue.'"
10853,166044920,b'Can we add in the middle of this enum?'
10853,166095068,"b""These members haven't shipped yet"""
10892,166425722,b'@smitpatel @maumar @anpete The `Convert` overload is different on .NET Core. Do we need to follow up with the Roslyn team?'
10892,166449492,b'Actually it is same overload. net461 also has convert to object around. I am trying to figure out why the print out is different.'
10892,166451613,b'Intentional change in netcore\r\nhttps://github.com/dotnet/corefx/blob/b3e75fc1a4954ce0ef87faa371432f21abde28d7/src/System.Linq.Expressions/src/System/Linq/Expressions/ExpressionStringBuilder.cs#L659-L663'
10894,166453649,b'private method'
10894,166454133,b'~Sensitivedata logging?~\r\n'
10894,166457550,b'What do you mean?'
10894,166457793,b'I did not realize it was already sensitive. Ignore.'
10884,166180168,"b""Isn't there a Visit method that takes args?"""
10884,166180241,b'Set flag to prevent introduction in the first place?'
10884,166461861,b'`VisitAndConvert` may be'
10884,166462100,b'Prevent would be best. If not we should add convert around otherwise we are changing type information inside the user defined tree. We should always do type matching to avoid type mismatch. (there are a lot of checks and adding convert at many places)'
10904,166549368,b'Use Task.CompletedTask'
10904,166549874,b'Flip CancellationToken and name parameters?'
10904,166665263,"b'Is this something we should now do everywhere? (Currently we use .FromResult(0) throughout the stack, based on recommendation from @AndriySvyryd)'"
10904,166666026,"b'We should discuss in API review--name is CallerMemberName which should also be last, and the signature of this func must currently match the signature of the method (since there is no manipulation of the order, etc. when building the expression tree.)'"
10904,166710449,"b'Yeah, it may not have been around previously.'"
10904,166733877,"b""Any is fine for now, it'll be cleaned up by https://github.com/aspnet/EntityFrameworkCore/issues/7445"""
10908,166737657,b'Only need to do this if current or old base type is null'
10674,166779251,b'pattern match to variable directly instead of cast later.'
10674,166780746,b'Better DRY compile time\r\n\r\n---\r\nIn reply to: [161115324](https://github.com/aspnet/EntityFramework/pull/10674#discussion_r161115324) [](ancestors = 161115324)'
10674,166781566,b'sub-optimal equals. Inconsistent with others'
10674,166782435,b'We should allow re-setting this visitor. That would avoid allocations.'
10647,166787827,b'@AndriySvyryd - Is this needed? If yes then file an issue.'
10647,166788254,b'left over of ViewType'
10647,166788720,b'File name mismatch'
10647,166793592,b'https://github.com/aspnet/EntityFrameworkCore/issues/10913'
10735,166798210,b':trollface: \r\nBoss is fan of Alicia'
10923,167094878,b'left and right are already result of RemoveConvert.'
10923,167112331,b'This code seems bit sketchy.\r\n`arg0` and `arg1` has same type. We remove converts to make type unequal then call `TranslateEquals` which in turn unwraps nullable types and add convert to non-nullable types and then form equal. Why do we need to remove convert and later add it back again? '
10923,167114664,"b""the tricky part is when you are comparing two types that are not the same, using (object, object) overload. If you compare int with long, it will look something like this: Equals((object)myInt, (object)myLong), and this always returns false, even if both values are, say, 1.\r\n\r\nIf you compare nullable int with non-nullable int it will look something like: Equals((object)myNullableInt, (object)myInt) and that will return true if both values are same. So we are always stripping the converts (presumably to object) and test if undelying types have matching nullability. \r\n\r\nFor the instance case, only the second argument is converted to object, e.g. when you compare int with long we would use myInt.Equals((object)long), or int with nullable int - myInt.Equals((object)myNullableInt). First one always returns false, second one returns true if both values are the same. However in this case, types are not the same. I wanted to DRY those two codepaths, and maybe that's why code seems clunky."""
10896,166550657,b'typo'
10896,166551757,"b'Is the state really changing when we are loading from query? Should this be a separate ""EntityMaterialized"" event?'"
10896,166666871,"b""EntityMaterialized is different--that would fire for tracking and no-tracking queries. I added this flag because sometimes certain things, like validation, can be skipped if the entity starts tracking after being queried, but it's still a state change from Detached to Unchanged."""
10896,167093260,b'Check not null'
10896,167093699,"b'Provide DbContext here, too?'"
10896,167093800,b'As above'
10896,167093961,b':trollface: '
10896,167095438,"b'Having these On methods to allow individual entries to raise events on the state manager caught my attention.\r\n\r\nWhat do folks think about the idea of pushing the event down on to the entries themselves? That way, that state manager would just subscribe to the event on the entries. cc @AndriySvyryd @bricelam @divega \r\n\r\n'"
10896,167119871,b'Seems like it would use a lot more memory if every entry had a reference to the handlers.'
10896,167131739,"b""Yeah, that's likely true. """
10896,167274669,"b""It's an internal constructor."""
10896,167274723,b'Its available on the EntityEntry'
10950,167636006,b'\xf0\x9f\x8e\x89 So much cleaner! I always hated the code above.'
10941,167634162,b'Why do we return the exception?'
10941,167636180,b'For provider-specific verification.'
10939,167647749,"b'Should be just `GetMemberInfo`, otherwise might be confused with the semantics of `GetDefiningNavigation`'"
10939,167682808,"b'I\'m trying to avoid people calling this when they want the other GetMemberInfo, since that is the general purpose method that should be called whenever you need a MemberInfo to operate on. This one is just about getting the MemberInfo that ""defines"" the CLR ""property""--for example, it may be the PropertyInfo even when all reads and writes are using the FieldInfo. Given this, any other suggestions for the name?'"
10939,167692025,"b'`GetPrimaryMemberInfo`, `GetIdentifyingMemberInfo`'"
10939,167692425,b'I can live with Identifying.'
10960,168054778,b'regression test for this?'
10951,167948682,b'Can delete this line since this is the default service setup for relational providers anyway.'
10975,168520749,b'Why Tuple not ()?'
10975,168599130,b'Will change'
10984,168642664,b'stray?'
10977,168393588,b'May be we should have ExpressionEqualityComparer.Instance static property so that we can invoke it from any class whenever needed rather than defining as private field. It could also help us in using it inside CustomExpression.Equals method. (Outside scope of this PR though)'
10977,168393687,b'What is the reason this tests are skipped?'
10977,168635939,b'filed #10983'
10977,168636020,b'will add region for all the disabled tests'
11000,168898906,b'@natemcmaster - We are removing benchmarks for EF Core 1.1 so no longer need 1.x runtime. Tagging you here just in case this could cause clean up in Universe.'
11000,168899110,"b'No change in Universe required for removing this runtime. Should be okay. IIRC, all of the benchmarks stuff in EF no longer runs in a universe build'"
10990,168902903,b'TypeMappingSource ?'
11012,169773129,b'typo'
9472,134039646,b'PredicateReductionExpressionOptimizer and PredicateNegationExpressionOptimizer and are not safe to apply here - we are adding redundant terms to mark join on composite keys (this would be removed by predicate reduction)'
9472,134890334,b'Use Aggregate with seed to combine with result instead of doing it in block below this.'
9472,134890441,b'Is it valid to derive from `ExpressionVisitorBase`? Do we want to extract discriminator inside of subquery models?'
9472,134890517,b'extra line break above.'
9472,134890603,b'Use `IsNullConstantExpression` extension method.'
9472,134890917,b'You can call `IsEfProperty` directly on methodcall expression. You can perhaps also do soft casting and null conditional method call comparing to true. instead of 2 blocks.'
9472,134891045,b'condense same as above'
9472,134891320,b'inline this'
9472,134891969,b'This does not utilize pipeline to find qsre to entity type for queries which is used for owned entities. It would be correct result at present given owned entities does not allow inheritance atm. Not sure if we should just write safe code or react later. @anpete'
9472,134892159,"b""Do we need to check for null here? Don't we have bigger issues if `PredicateJoinExpressionBase.Predicate` is null at this point?"""
9472,134900148,b'Move it to `else if` and do `is` pattern matching.'
9472,134901043,b'done'
9472,134901378,b'this would not optimize if right side is EF.Property'
9472,134901432,b'This is overwriting for query source but that could cause unknown effects if multiple discriminator accesses are there.'
9472,169846886,b'avoid `{...}`'
9472,169846947,b'This may be unsafe'
9472,169847206,b'File a new issue for de-dupe. '
9472,170141814,b'break long lines and leave and empty line before next case block.\r\n'
9472,170141948,b'Collapse all the conditions which are branching to the base method into one if.'
9472,170142211,b'Put this into CompositePredicateExpressionVisitor to make it DRY.'
11044,170349591,b'Why are these commented?'
11017,170776284,b'lower case variable'
11017,170777210,"b""Intentional Camel case so that it matches the casing of DbContext base field. The test verifies that parameter names we generate don't clash and casing is necessary."""
11065,170774188,"b""Non-sensitive events shouldn't take sensitive data"""
11065,170775028,b'All the data should always be sent to the diagnostic events. Only the log messages (from either source) should not contain sensitive data.'
11065,170775386,b'We should discuss that'
11054,171023436,b'`RewriteSelectManyInsideSubqueryIntoJoins` may also need same pattern.'
11079,171063488,b'expression body'
11086,171105284,"b'@bricelam some of our tests uses AdventureWorks database. To run those tests, we would need copy of the database for Sqlite.'"
11086,171105527,b'@bricelam how to define a stored procedure in sqlite? We have definition for SqlServer right now. It is used in a test where FromSql is used with sproc'
11082,171106094,b'This may also needed to be added to dependencies in universe if not already being referenced.'
11103,171423480,b'IsDefaultValue already verifies for value == null'
11107,171438745,b'redundant async/await'
11107,171438757,b'redundant async/await'
11107,171439034,b'We went through this pattern during patch 2.0.1. Are we creating ET? Why the task returned is null instead of Default?'
11110,171691890,b'static?'
11110,171691922,b'static?'
11110,171692294,b'Add method to base type?'
11110,171692516,b'Make template method on base type?'
11110,171692693,b'Would keep this local & private for now till we understand all interactions with value conversions.'
11028,171693671,"b""These shouldn't be obsolete. They could be generated by Migrations if you using every parameter but the new one. (On `ColumnsBuilder` too.)"""
11028,171694842,b'@bricelam Okay. Will un-obsolete them. Is there a better non-breaking pattern we could use here?'
11086,171697977,"b'As discussed offline, use `.EnsureCreated()` to create the schema, select the data from SQL Server and insert into SQLite.'"
11086,171699345,b'No procedures in SQLite--just TVFs.'
11086,171704744,b'Can you file an issue for that?'
11008,169440619,b'Consider using patterns 4 - 6 as described here: http://csharpindepth.com/Articles/General/Singleton.aspx'
11008,169473950,b'Great remark. Thank you'
11008,169501638,"b'alternatively, we could make it cheaper/simpler by removing IEqualityComparer<Expression> interface implementation and making Equals and GetHashCode methods static instead. @anpete thoughts?'"
11008,170123768,"b""@Marusyk `protected struct CompiledQueryCacheKey` is problematic since we don't have dependencies defined for it - you can add a new constructor here that accepts IEqualityComparer<Expression> argument and obsolete the old one (also update the `GenerateCacheKeyCore` method to use the new ctor.) The old ctor calls into the new one passing the static _expressionEqualityComparer. This adds small perf cost in case a provider creates the cache keys in their own custom way. Are we fine with this? @anpete @ajcvickers """
11008,170390549,b'There will be breaking changes for `CompiledQueryCacheKeyGeneratorDependencies`. \xe2\x9a\xa0\xef\xb8\x8f \r\nWhat about not public APIs? Should we leave it as is?\r\n\xe2\x84\xb9\xef\xb8\x8f all TODO in comments I will fix later when you when you rate the main changes'
11008,170395669,b'@ajcvickers - Is removing a service from ServiceProvider in later release a breaking change?'
11008,171121524,"b'non public API we can break, so you can change the ctors for them. When it comes to *Dependencies they can be broken as well'"
11008,171121668,b'i would leave _expressionEqualityComparer field and just assign it with Dependencies.ExpressionEqualityComparer in the ctor'
11028,171719916,"b'No, this is the best non-breaking pattern, and we can still remove the ""old"" overloads when binary breaks are allowed. We just can\'t mark them obsolete.'"
11086,171720938,b'#11120'
11158,172342183,b'These can be dotted.'
11158,172342912,b'Good point. I will revert this one.'
11126,171744556,"b'@smitpatel  Could not use the OR operator (||), only on the level of knowledge, is there something I did not realize here?'"
11126,171771202,"b""I am not sure what you exactly mean. But We can collapse this if block with next one using `||`\r\nWhile refactoring this, I tried to arrive at the simplest possible code which we can understand easily (the previous code was hard to understand).\r\nI'll combine this and tidy up code in future PR. I am looking to integrate GroupBy translation inside this rather than a separate visitor."""
11126,171842239,"b'Thanks @smitpatel for the answer, but I talk about using the operator as short-circuit\r\n```csharp\r\nif (expression == null || _selectExpression == null)\r\n{\r\n   return null;\r\n}\r\n```'"
11126,171884458,b'@ralmsdeveloper - I understood that only. And will do it in future PR.'
11126,172328965,b'readonly?'
11121,171734644,b'Remove _validator field. Unused.'
11139,171998700,b'Use VisitAndConvert pattern'
11139,171999009,"b""Actually just call base and it should take care of preserving tree as long as the _targetExpression's type matches current expression inside it.\r\n\r\n---\r\nIn reply to: [171998700](https://github.com/aspnet/EntityFramework/pull/11139#discussion_r171998700) [](ancestors = 171998700)"""
11139,171999108,"b""Isn't this check too broad? Or we are certain that there would be only one instance of _methodToReplace? What if the query is combination of multiple parts and it matches more than one _methodToReplace"""
11139,171999169,b'Likewise above'
11139,172332528,"b""realistically it will only be the InjectParameters or the naked method we need to replace. It short circuits after first replace, so multiple methods are not a problem. I originally stored the expression to replace and try to find exact match, but that's dangerous in case the expression is mutated. Alternatively, I can just check for InjectParameters and blindly replace what's inside."""
11139,172333016,b'> It short circuits after first replace\r\n\r\nHow do we know that first found method is the one we need to replace though.\r\n'
11139,172349621,"b""TryFlattenMethods always have the method that is supposed to be flattened on top - unless SqlTranslatingExpressionVisitor mutates the Expression. However, in order to hit this path, STEV must also translate the expression (i.e. no client eval). As far as I can tell, this only happens for InjectParameters, Select and Group+Aggregate. Select and GroupBy shouldn't be possible, because they can't be on top of the join predicate and still be valid/translated.\r\n\r\nBefore we were nuking the expression without checking it at all, so even if there is an edge case for which this is broken, its certainly an improvement over existing behavior."""
11139,172356929,"b""there are cases where type changes, so can't use the base, will use VisitAndConvert """
11139,172715563,b'If you are returning same expression if pattern fails then call method Unwrap*\r\nIf you call it Try... then return null'
11179,173025250,b'\xf0\x9f\x98\xa8 '
11180,173288607,b'This also needs to be updated in Universe with updated package name so that automation writes the dependency correctly.'
11180,173288901,b'@smitpatel Can you make these fixes?'
11180,173310347,"b""@smitpatel this is blocking @pakrym on some corefx changes. We're going to ignore EF from the submodule auto-update until this is in Universe"""
11224,173609160,"b""move this into one of the query suites, we don't do anything specific here so using of QBT is not necessary."""
11226,173613572,b'@maumar touch the test at own risk \xf0\x9f\x98\xa8 '
11229,173847477,"b'It\'s hard to do, but I\'d love if this was `new[] { ""foo"", ""bar"" }`. But I definitely don\'t want `new[] { (byte)1, (byte)2 }`'"
11229,173860600,"b'Yeah, we could have a list in the generator of types which are ""default"" for their literals, and which can therefore be omitted... Do you think it\'s worth it? :)'"
11229,173864691,"b'No, not really worth it now.'"
11259,174308882,b'@natemcmaster Should this have happened automatically?'
11259,174309165,b'Yes. Normally this config would do it: http://aspnetci/viewType.html?buildTypeId=Coherence_UpdateRepos. It looks like the last few runs of the auto-updater have failed on EFCore.'
11255,174298373,b'Should eventually change these...'
11222,174314882,b'Having'
11222,174508137,b'\xf0\x9f\x8e\x89'
11222,174520907,b'Can the default block be moved after the switch?'
11222,174521744,b'Flip condition?'
11222,174531547,"b""Flipping condition wouldn't avoid nesting. First if block retrieves the QSRE in multiple cases. Second if block uses QSRE to find the translation."""
11222,174531987,b'Yes. Would it matter though?'
11222,174533452,b'Code would be more standard. n-dev problem :trollface: '
11268,174608562,b'should we add some funky number here to distinguish between null and empty?'
11268,174609266,b'Is that distinction important?'
11246,173999622,"b""We should reset the original value if store value didn't change even if the model value did"""
11246,174322676,"b""This still doesn't look right. This should `continue` even if `modelValuesChanged`. The order should be changed: if `modelValuesChanged` then we can mark the property modified even without comparing provider values."""
11287,174955422,b'~keys~ name it keyProperties'
11277,174970916,b'maybe add helper to access the group result operator? can be done in some other PR'
11301,175156719,b'\xf0\x9f\xa4\xa2 Where do I file an issue to switch to YAML? :trollface:'
11301,175157773,"b""Beggars can't be choosers \xf0\x9f\x98\x89 """
11301,175157961,b'@bricelam should I specify these two envs that are used in your appveyor.yml:\r\n\r\n```\r\n    Test__SqlServer__DefaultConnection: Server=(local)\\SQL2016;Database=master;User ID=sa;Password=Password12!\r\n    Test__SqlServer__SupportsMemoryOptimized: true\r\n```\r\n'
11284,174854634,"b""Change uses of 'entity' to query type (generic and doc comments)"""
11284,174854868,b'nit: whitespace'
11284,174855215,b'also the generic parameter?'
11284,174858344,b'Yes: TQuery'
11284,175139745,b'`TQuery` ?'
11284,175140236,b'Damn :( will fix!'
11301,175163444,"b'AppVeyor use SqlServer instance over tcp/ip therefore we defined connection string like this.\r\nDoes the machine running this have localdb installed?\r\nIf yes, then no need to set env var.'"
10480,175295005,"b""Could you please look at the issue #11316? Don't you think it's better to add more generic `if` statement?"""
11273,174639275,"b'@natemcmaster I was getting errors when I tried to add `<ProjectReference Include=""..\\ef\\ef.csproj"" />` to dotnet-ef. Have you encountered anything similar?\r\n\r\n> error : Could not find a part of the path \'src\\ef\\bin\\Debug\\netcoreapp2.0\\publish\'.'"
11273,174829315,"b""Yes, I've seen this. I couldn't find an issue for this already, so I opened this: https://github.com/dotnet/sdk/issues/2047\r\n\r\nIt's the reason that aspnet/Scaffolding and aspnet/DotNetTools still use a .nuspec file for these tools"""
11273,175512296,b'Typo: Extenal => External'
11328,175540460,b'@ajcvickers I can do this non-breaking if required. LMK.'
11289,175886344,b'ConvertingQueryModelVisitor'
11289,175887872,b'Is changing Selector creates new QM or mutate the existing one? Depending on that we may not need this.'
11289,175888275,"b""QM stays the same, but its type can change, we produce new SubQueryExpression so that it's type match the updated type of QM"""
11289,175888631,b'Could this be LastOrDefault if there is ordering specified?'
11289,175890431,"b""we only match pattern created by nav rewrite, it's very unlikely that users would manually construct the QM like this"""
11328,175908639,"b""I think it's okay to break here. Seems very unlikely that anyone else is implementing this."""
11357,175931787,"b""As @jbagga found, this made Microsoft.EntityFrameworkCore.Design a netcoreapp2.0-specific dependency which means you don't get it on net461 (or other netstandard2.0 frameworks)."""
11357,175932108,"b""We can't achieve this using csproj since we'd need a netstandard2.0 project to depend on an (incompatible) project cross-targeting netcoreapp2.0 and net461."""
11334,176173926,b'The check for sourceEntityTypeBuilder ignored in ModelBuilder is removed. Is it not needed anymore?'
11334,176183578,"b""I moved it to the call side as it's not always needed"""
11365,175961644,"b""These properties don't have a custom conversion, but the wrong mapping was being applied because TypeMappingInfo didn't check `Property` equality"""
11365,176157843,b'Why does this need to be replaced here?'
11365,176164150,b'Is `Property` excluded from GetHashCode by design?'
11365,176165453,b'TypeMappingSource here is of type `IRelationalTypeMappingSource`. If relational & core interface resolves same service replacement would be needed\r\n\r\n---\r\nIn reply to: [176157843](https://github.com/aspnet/EntityFramework/pull/11365#discussion_r176157843) [](ancestors = 176157843)'
11365,176167125,b'nit: Move to top'
11360,176265978,"b""Change name to something more generic (e.g. IsExpressionInProjection) - it's not really tied to ordering"""
11388,176561740,"b'This should be good.\r\n\r\nYou can test it by install master build of CLI and unzip it under `C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008385\\DotnetTools`. Make sure the folder structure is similar to dotnet-watch which is also there.\r\n\r\nRun `dotnet ef`, it should find it automatically.'"
11388,176581285,b'Works great'
11378,176285736,b'Solution-wide\r\nCA1032 - Implement standard exception constructors\r\nCA1034 - Nested types should not be visible.\r\nCA1063 - Implement IDisposable correctly\r\nCA1815 - Override equals and operator equals on value types\r\nCA1819 - Properties should not return arrays'
11378,176285799,b'Oracle.FunctionTests\r\nCA1822 - Mark members as static '
11378,176285978,"b""All test projects\r\nCA1822 - Mark members as static \r\nTests which are not marked as virtual can end up showing CA1822 in case they don't use fixture."""
11378,176286045,b'Should be ok to break this one. '
11378,176286126,b'I am fine breaking it. @bricelam @ajcvickers ?'
11378,176286286,b'Probably fine to disable this globally for all tests'
11378,176293490,"b""Isn't this caused by the .editorconfig file? Can't we just update that?"""
11378,176293669,b'Would it be a binary break?'
11378,176293902,"b""I wonder if we should implement the exception constructors... The only reason we didn't was because we couldn't in .NET Standard 1.x. It's really only important for serializing exceptions across domain boundaries, but could be worth at least discussing in a design meeting."""
11378,176296381,b'It is caused by .editorconfig file and the names violate our coding guidelines. I believe these properties are named like this to verify that we discover Id as PK regardless of casing of it.'
11378,176574104,b'@AndriySvyryd - ping!'
11378,176606402,"b""I don't think it would be, but we can leave it as is for now"""
11325,176824333,b'This broke 2.0.x providers'
11325,176824368,b'Adding this back should fix #11399'
11401,176844236,b'While these files are auto-generated. Next generation would remove this warning and diff will point us to make sure not to break.'
11401,176854546,"b""Generated files usually aren't reviewed"""
11401,176856303,b'Redundant comment'
11401,176856649,b'Alternative?'
11401,176856836,"b""Also this is used only in our providers, so it shouldn't be an issue breaking it."""
11401,176857049,b'Other providers are also using Strings files'
11401,176857238,b'You can put comments in the .resx files over the resources that are used'
11444,177582027,b'private doc comments?'
11444,177582398,b'Can Convention ignore a property?'
11444,177583286,"b""It can, but I don't think we have any that do."""
11444,177585950,b'Condition should be unnecessary then'
11444,177586463,"b'The condition is: ""Is this ignored at convention source or higher?"", so I could replace it with `entityTypeBuilder.IsIgnored(propertyInfo.Name, ConfigurationSource.DataAnnotations)`, but I don\'t think it\'s much of a difference'"
11411,177586789,b'can inline local variable'
11441,177481459,b'Why not use just `%f` then substr may not be needed.'
11441,177485602,"b""Yes, you're right, but `substr` is needed anyway, because `%f` returns the value in `##.###` form. The `length` function is redundant in this case."""
11441,177489664,b'~Oh! If we just need seconds part then use `%S`~\r\n`\r\n%S  seconds: 00-59\r\n`\r\nSorry i misunderstood what is being translated.\r\n'
11441,177518771,"b""hmm... What about `strftime('%f', $original) * 1000`?"""
11441,177519982,b'`%f` will give SS.fff format. We just want fff part.'
11441,177560911,"b""``` sql\r\nstrftime('%f', $original) * 1000 % 1000\r\n```"""
11441,177567920,b'Whichever is more performant according to @bricelam \xf0\x9f\x98\x84 '
11441,177569554,"b""I don't know about performance... IMHO, string manipulation should just always be used as a last resort."""
11441,177570054,"b""I agree. Changed to `strftime('%f', $original) * 1000 % 1000`"""
11441,177570896,"b""We don't need explicit cast here since SQLite will coerce to int anyway."""
11441,177571103,b'Can you also add a test where we are reading DateTime.Millisecond from server in a projection to verify that we read int back correctly without explicit cast?'
11441,177573752,"b""I'd like to, but could you please point me to an example?"""
11441,177577148,"b""It seems that we don't have coverage for any component. \r\nFor tests like here\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/6db9e31f1f68bf881e4736e4e372425eb7fab0f4/src/EFCore.Specification.Tests/Query/SimpleQueryTestBase.Where.cs#L722-L779\r\n\r\nYou would add similar test in `SimpleQueryTestBase.Select.cs` file with name starting as `Select_datetime_year_component`.\r\nTest would have body like this\r\n```C#\r\nAssertQueryScalar<Order>(os => os.Select(o => o.OrderDate.Value.Year));\r\n```\r\n(1 test for each component)\r\nThen override those tests in SimpleQuerySqliteTest.cs and `AssertSql`.\r\nFor SqlServer override tests in `SimpleQuerySqlServerTest.Select.cs` file and AssertSql."""
11441,177595149,b'Seems like we can drop this Explicit cast also. Perhaps lack of test coverage made us add cast.'
11441,177596219,b'That was the first thing I tried.\r\n\r\nWithout this cast `string` is returned and test are failing. Milliseconds code is different because it involves `INT` and the result is converted.'
11441,177600626,"b""Oh, I mean it can be returned, but the following query is evaluated to false\r\n\r\n```\r\nselect strftime('%Y', '2018-01-01 01:01:01.123') = 2018;\r\n---\r\n0\r\n```\r\n\r\nwhereas this one \r\n```\r\nSELECT CAST(strftime('%Y', '2018-01-01 01:01:01.123') AS INTEGER) = 2018;\r\n---\r\n1\r\n```\r\n\r\nand this one\r\n\r\n```\r\nSELECT (strftime('%f', '2018-01-01 01:01:01.123') * 1000) % 1000 = 123;\r\n---\r\n1\r\n```\r\n\r\nare evaluated to true, which is correct."""
11441,177601390,b'@bricelam - Do you know why first one gives incorrect result? I was hoping it would do comparison correctly.'
11441,177602115,"b""Since, tests are not passing otherwise, I will merge this PR with Cast in place. Let's see what @bricelam 's insight on why it is not doing comparison correctly and we can update the code later."""
11412,177594239,b'Simplify to single return statement.'
11441,177832246,b'I noticed this weirdness before too--SQLite seems to have some undefined behavior when it comes to coercing function results.\r\n'
11441,177832649,b'I think `=` is a lot stricter about types than other operators too.'
11433,177205059,b'Is `IsEqualityExpression` a good name for this?'
11433,177206086,"b""Query model must have single `WhereClause` in order to be translated, isn't this too strong restriction?\r\n\r\nUPD\r\nProbably no, considering, that `Any` has nothing more than single predicate. But I could have missed something."""
11433,177216460,"b'Can you write a test which has Where clause & any with predicate both? That would tell us, what shape we need to consider here and if we can process multiple WhereClauses.'"
11433,177217778,b'separate lines. \r\nAlso move at the start of method. Just a small convention to assign out var at the start so that method'
11433,177503034,"b'""TryMatchEqualityExpression""?'"
11433,177525470,"b'Much better, thanks'"
11433,177543494,b'Can you combine both visitors into one?'
11433,177543991,b'Use indexer with 0 rather than Any to avoid allocation.'
11433,177555106,"b'Will try, though I think they have not so much in common.'"
11433,177555670,"b'They can be made DRY with some level of abstraction. Though if it becomes difficult, you can leave it as is. I can do it as part of merge process.'"
11271,177216457,"b""This package doesn't exist anymore, not to self to remove it and the netframework version."""
11449,177614425,b'Better name?'
11445,177588584,b'Should this be updated to the `output`?\r\n'
11445,177589119,"b'I had it like that, but decided to revert. You\'ll see it when running `dotnet ef --verbose` and I\'d rather see ""my.sql"" than ""C:\\Where\\You\\Just\\Invoked\\Dotnet\\EF\\From\\my.sql""'"
11458,178168510,"b""Oops, 2bdb72f0206ef0f4657f565b5a5bf7226564befc didn't go into `release/2.1` \xf0\x9f\xa4\xa6\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f """
11467,178110033,"b""Why `INFORMATION_SCHEMA`? We've typically favored `sys` in EF Core."""
11467,178148175,b'No particular reason'
11467,178197191,b'Inconsistent formatting :trollface: '
11467,178198036,b'R# did it'
11497,178352115,"b""consider adding note why we are skipping this (i.e. would have to copy the subquery for each key property) - it's not obvious"""
11497,178358960,b'@maumar :trollface: '
11448,177795087,"b""I think we may want to be even more clear than this that these don't necessarily indicate any errors/mistakes in your code. But not sure how to word this. @divega Any thoughts?"""
11448,177964244,"b""I agree that is exactly what we decided in triage: we wanted to make that clearer that this was a just a signal that one of the preconditions of the convention was not met but that it wasn't even a warning. I am just not sure what to do to the text to better convey that.\r\n\r\nAnd on the other hand I am starting to see that the stream of messages you'll see coming from model building is going to be by nature very advanced and there are diminishing returns in trying to make them look super simple. """
11448,178153656,b'We can add: `This message can be disregarded if explicit configuration has been specified.`'
11448,178187068,b'Sounds good.'
11480,178345366,b'@bricelam Would it help to have an fwlink to point to the global.json workaround? '
11480,178358251,"b'Here is the link: https://go.microsoft.com/fwlink/?linkid=871254. It currently points to https://docs.microsoft.com/en-us/dotnet/core/tools/global-json, but we can write something more specific if necessary.'"
11504,178353054,b'Does this have to be protected? (not private). `GenerateConstant`?'
11504,178366372,"b""this doesnt compile (cannot convert from 'long?' to 'long')"""
11508,178408265,b'This put it under `analyzers/dotnet/cs/netstandard2.0/` when I tried it...'
11508,178410044,b'I copied it from logging repo. Should I revert?'
11508,178413869,b'Reverted to original. We can determine later if our packaging is not correct. '
11493,178218289,b'Fancy'
11493,178412035,b'Is it safe to cast?'
11493,178412536,b'Can you just Call member Setter'
11493,178412568,b'Member access?'
11493,178412587,"b""All the added casts are safe for now as we don't support other model implementations"""
11477,178192229,b'SqlServer specific type.'
11477,178192414,b'@ajcvickers - Is this type supposed to be provider specific for relational one? There is inconsistency in this file.'
11477,178372951,b'~You could just remove flags~'
11518,178572366,b'Can use `genericTypeParameters`'
11518,178611389,b'Will update later today or tomorrow evening CET time'
11518,178636920,b'@ilmax - Its alright I will update while merging.'
11518,178638304,b'@smitpatel  I can do it now :smirk:'
11523,178651424,b'We do string comparison (`>`) on the decimal values.'
9777,138723342,"b""I don't think we want to use smart quotes here."""
9777,138816764,b'Fixed'
11541,179102691,b'Do we need a default for this? What value can we use?'
11541,179103211,b'How can I handle this one better?'
11537,179005360,b'Do we still need `!=` condition? if we are using `IsInstanceofType`?'
11537,179005578,b'Probably no'
11526,179230930,b'Could DRY this with if condition in a private function'
11526,179241639,b'Do we need `Find` here since it was `First` earlier? Direct key access?'
11555,179552814,b'Is Test20 is valid for Oracle?'
11555,179557058,"b""Test20 doesn't run Oracle, but still needs to compile it \xf0\x9f\x98\x95 """
11562,179604512,b'My favorite kind of fix. \xf0\x9f\x98\x89'
11524,178668056,b'@divega to suggest exception message.'
11524,178861981,"b'Instead of LCID, can we take CultureInfo?'"
11524,178896652,b'We can'
11524,178930362,"b""Can you work with this? \r\n\r\n>The expression passed to the 'propertyReference' parameter of  the 'FreeText' method is not a valid reference to a property. The expression should represent a reference to a full-text indexed property on the object referenced in the from clause: 'from e in context.Entities where EF.Functions.FreeText(e.SomeProperty, textToSearchFor) select e'.\r\n\r\nMay be a good idea to parameterize 'FreeText' so that the same exception message can be reused for Contains in the future."""
11524,178931290,"b'I hadn\'t noticed but the other two arguments ""freeText"" and ""languageTerm"" are weird too. They do align with the arguments in the [documentation for FreeText T-SQL function](https://docs.microsoft.com/en-us/sql/t-sql/queries/freetext-transact-sql) but not sure this should be the higher-order bit. \r\n\r\n@smitpatel do you remember if we looked at this in API review?'"
11524,178933598,"b""I don't think so. Should i change to CultureInfo in this PR or leave for API review?"""
11524,178935660,b'I looked into parametrizing function name but then the parameter name for Contains could be different and if the same exception message is used then example becomes invalid. Since it is provider internal code i kept it non-parametrized. We can change it when we decide on API for Contains function.'
11524,178936215,"b""Discussed with @bricelam in person. We believe we should probably come up with a guideline for functions like this, so it would be better to discuss it as a team (can you please make sure it surfaces in triage?). \r\n\r\nIn theory we could make them very .NET-idiomatic, but we have the alternative is to keep them closer to the original function they map to in the database. If we went with the latter in this case, the first argument would be something like columnName, which IMO doesn't work at all. Staying in the middle of the road probably doesn't work great either."""
11524,180209303,b'We decided in triage to leave this as is and add overload with CultureInfo if we need it.'
11579,179908135,b'How come annotation became null?'
11579,179908186,b':trollface: '
11579,179934242,b'It was just to make R# happy'
11579,180174649,b'breaking change? @ajcvickers'
11579,180176284,b'Is it true that we never want to render null valued annotations? cc @bricelam '
11579,180179178,b'~Why this would be needed?\r\nIf ValueGenerationStrategy is set then it will be at least Convention source.~'
11579,180179855,b'Should we be filtering here? This seems to imply that null is not a usable annotation value.'
11579,180183059,"b""Yes. Semantically they're the same as not having an annotation."""
11579,180209331,"b""This is a way of limiting the breaking change, since providers might be calling this and don't currently have code to handle null values."""
11579,180209927,b'It would just produce a lot of unnecessary bloat. If we find places where it is useful to render we could make this check more specific.'
11579,180212384,b'Filed https://github.com/aspnet/EntityFrameworkCore/issues/11600'
11541,180252986,b'@ajcvickers @AndriySvyryd @bricelam - What are your thoughts about these breaking changes?'
11575,180206229,b'Should file an issue'
11575,180206463,b'Mutating selectExpression during SQL generator is bit risky.'
11575,180206644,b'Could add another test where at least one of the queryable is from subquery'
11575,180207562,b'Also a test for DbQuery somewhere?\r\n+ why these tests are not in specs test?\r\n\r\n---\r\nIn reply to: [180206644](https://github.com/aspnet/EntityFramework/pull/11575#discussion_r180206644) [](ancestors = 180206644)'
11575,180216123,b'Yes...but less risky than any other place :trollface: '
11575,180216367,"b'Not sure, will try and move.'"
11575,180224323,b'#11601'
11541,180257274,"b""Probably okay on the ISequence/IMutableSequence ones. The others looks like they can/should be avoided. (Note: none of this should go in 2.1 at this time anyway, so don't merge to dev.)"""
11541,180257714,b'There are some migration ones also.'
11541,180257961,"b'The migration ones is what I meant by ""the others"".'"
11569,180225366,b'nit: newline before &&'
11569,180225524,b'Use .NodeType'
11569,180254191,b'unused usings'
11569,180254290,b'break line'
11569,180254695,b'i guess incorrectly named constant :trollface:'
11541,180546301,"b""@ajcvickers Any hint on how to avoid breaking changes in migrations? I'm not sure I understood your previous comment well, can you clarify a bit?"""
11605,180471285,"b'Separate lines, please'"
11605,180472543,b'@bricelam - separate lines for? Can you check output in tests? And put an example of how output should look like?'
11605,180479745,b'``` csharp\r\npublic MyContext()\r\n{\r\n}\r\n```'
11613,180560055,b'Intentionally commented out?'
11618,180614116,b'~Does this convention use this service actually?~'
11619,180587209,b'Could you also assert that setting everything to Unchanged afterwards marks the collection as not modified?'
11623,180622558,b'Two lines :trollface: '
11641,180924204,b'`var`?'
11641,180925031,b'memory cache values are untyped'
11644,180928193,"b""Now doesn't set entity state."""
11644,180928255,"b""Now doesn't set IsLoaded."""
11644,180928368,b'Does XUnit still execute this asynchronously?'
11644,180928410,b'oops. yep will fix that'
11644,180928486,b'yep'
11645,180936776,b'add newline after'
11645,180943099,b'Will cover in future PR.'
11639,180981391,b'Will this (plus the fact that this targets .NETStandard 1.3) have an impact on how many packages are restored on .NET Framework?'
11639,180982008,"b'Ah, I missed that it exactly what this change is supposed to fix!'"
11639,181147362,"b'Correct--it was already automatically referenced. This just adds `PrivateAssets=""all""` to keep it out of the `*.nuspec`.'"
11638,180880556,"b'This overload was unused and added in 2.1, so I removed it.'"
11643,180927437,b'breaking changes?'
11643,180927691,b'Should name this method something more descriptive'
11643,180935704,"b""Will review the breaking changes and see if there's a non-breaking way to do it. Overload resolution might get ugly. Break is probably very low impact, but I'll do my due diligence."""
11643,180935913,b'Name is intentionally vague. I imagine more overloads as we need to generate different kinds of fragments. This is a mostly internal DSL class so the names are a bit unorthodox'
11643,180936144,b'I like to think of it as analogous to the Html helper in Razor which reduces the amount of boilerplate required to generate HTML.'
11643,181164162,"b'Look, @roji, no more `int[]` or `string[]`! Just `byte[]`. \xf0\x9f\x98\x89'"
11643,181165283,b'cc @ajcvickers '
11628,180843977,b'Should `DateTimeOffset.UTCNow` have different translate? Does it lose data too? Should it do client eval or there is not accurate translation available?\r\ncc: @anpete '
11628,181006067,"b""@smitpatel I checked and `DateTimeOffset.UtcNow` loses data too. Simply because `datetime` is not as precise as `datetimeoffset`. However it's possible to use `SYSUTCDATETIME` function which returns `datetime2` and then cast it to `datetimeoffset`. \r\nWill do it. """
11669,181482090,b'@maumar @anpete \xf0\x9f\x8e\x89 '
11669,181482384,"b""Without GroupBy there shouldn't be having clause. But I moved it out so that if we ever generate it incorrectly we would catch it instead of swallowing it."""
11669,181483051,"b""Don't alloc unless needed?"""
11700,181911799,"b'add some more tests for this, since we enable much more complex scenarios now'"
11709,182193026,b'We could pass this to ctor and deconstruct inside ctor into component'
11643,182353169,b'Nice :)'
11716,182509851,b'Should this be part of Relinq instead?'
11713,182274879,b'Perhaps existingNavigation.GetTarget().ClrType == targetEntityType.Type would work better for non-collection navigations.'
11713,182292460,"b'The new conditions are better. Slight difference (which caused query test to fail) was, when we were comparing declaring type, if the convention relationship was inverse we removed it instead of inverting. And in that case the shadow FK generated is non-nullable.'"
11713,182298434,b'Note to self: this should use the projection based on index.'
11713,182298511,b'Add extra Asserts.'
11713,182504512,b'Any verification?'
11746,182887597,b'TransformExpressions - outermost QM is guaranteed to be unique'
11743,182845152,b'save selector in local var'
11749,183132931,b'Introduce local'
11761,183165673,b'@anpete :trollface: '
11714,182266234,b'Should I revert to using `MethodInfo`?'
11714,182266514,b'This `CAST` is unnecessary. Is there an easy way to avoid generating it?'
11714,182266776,"b""Old code tried to simplify things like `1 || ' days'` to `'1 days'`. Is it worth trying to do this for constants?"""
11714,182605531,b'MethodInfo allows us to keep working in case new overloads are added to BCL since we do specific overload resolution using types. But upto you.\r\n\r\n---\r\nIn reply to: [182266234](https://github.com/aspnet/EntityFramework/pull/11714#discussion_r182266234) [](ancestors = 182266234)'
11714,182605765,"b'rename the dict :trollface:\r\n\r\n\r\n---\r\nIn reply to: [182605531](https://github.com/aspnet/EntityFramework/pull/11714#discussion_r182605531) [](ancestors = 182605531,182266234)'"
11714,182605984,b'I think its fine. Very low value.\r\n\r\n---\r\nIn reply to: [182266776](https://github.com/aspnet/EntityFramework/pull/11714#discussion_r182266776) [](ancestors = 182266776)'
11714,182606120,b'magic number :trollface:'
11714,182606682,b'This would be what you could achieve with identifying ConstantExpression and converting its value to string and putting in string constant. Then it would print out string literal without explicit cast\r\n\r\n---\r\nIn reply to: [182266514](https://github.com/aspnet/EntityFramework/pull/11714#discussion_r182266514) [](ancestors = 182266514)'
11714,182607629,"b""Thanks for reminding me. I was going to add a comment saying what this is. could also just generate `julianday('0001-01-01 00:00:00')`"""
11714,182608068,"b""I'll revert since it's consistent with other method translators."""
11714,182608610,"b""Feels like there should be an implicit cast expression to satisfy LINQ's type checking, but avoid generating a SQL CAST..."""
11714,182609025,"b""That's what ConvertExpression do. We strip them out since in SQL they are not needed like operator upcast or nullability differences. Hence we got ExplicitCastExpression when we really want to generate cast in SQL."""
11714,183211945,b'Review and fix return types'
11714,183558647,"b'@anpete @maumar @smitpatel How do you feel about this change?\r\n\r\nI needed to update the base relational one to add `.0` since it was causing integer arithmetic in some cases. I could compensate in the SQL Server provider to *not* add `.0`, but to me it feels better just to have it here too.'"
11714,183891634,b'Why convert around constant? You could specify type in Expression.Constant as 2nd arg.'
11714,183891852,b'likewise above maybe'
11714,183892676,b'Actually could use just `Expression.Constant(1000D)`'
11714,183893010,b'This is to generate `3.0 / 1000` instead of `3.0 / 1000.0` letting the server implicitly convert the RHS from INTEGER to REAL.'
11714,183893012,b'RemoveConvert. Apparently you used cast in other translator. :trollface:'
11714,183893780,b'The convert & constant are using different patterns on almost all occasion. I am fine with either SQL. Can you add a small comment to method above so that it does not get cleaned up in future?'
11714,183895483,"b""The baselines will break if the converts are removed. Then you'll see the method to my madness. \xf0\x9f\x98\x89 """
11788,183562294,b'Why do we need to clear it here?'
11788,183621778,"b""@smitpatel I've added it here to avoid unnecessarily retain memory. It's not required from an implementation point of view, it's just an attempt to be memory/jit friendly.\r\nCan be removed if you prefer so."""
11788,183795661,b'Init inline.'
11788,183809260,"b'Seems like correct place to do clearing. It could still cause duplicated parameter in some case when we have to go recursively, (i.e. when parameter is of type Expression), but those case are rare and requires manual construction of ET.'"
11788,183814910,b'This block should be moved to the start of this method so that we avoid any work if its already seen expression.'
11788,183815804,b'Good point!'
11812,184214591,b'typo: dervived'
11812,184214832,b'Merge ifs'
11812,184231205,b'Same typo'
11863,185132294,"b""Does this matter?\r\nIt is used in Cosmos.Sql package only, which is not being shipped. And we don't even have a versioning story for it yet."""
11863,185132363,b'Yes. Packages from release/2.1 and dev end up on the same myget feeds'
11863,185132570,b'The package contains no source code. \xf0\x9f\x98\x86 '
11872,185567964,"b""FYI - one thing to point out. This is going to require users to initialize the project from command-line first. I see this is already pointed out in https://github.com/aspnet/EntityFrameworkCore/wiki/Getting-and-Building-the-Code, so I hope this is okay. I'm planning to address this soon on dev with more improvements to KoreBuild.\r\n"""
11872,185569535,b'Most people use `EFCore.Runtime.sln` anyway which excludes the tools.'
11872,185576518,"b'ok, good to know.'"
11864,185828126,b'\xf0\x9f\x91\x8d'
11816,185178458,b'nit: async and await are redundant'
11816,185178699,"b'FirstOrDefault could return null, so I think we should probably access `Key` with the elvis operator'"
11816,185285848,b'They are needed for compilation.\r\nEither we await AssertQuery or we return the task. But every task returned by AssertQuery is different type so we cannot use Task without generic parameters.\r\n'
11816,185287683,"b""It is actually neither required nor compile-able for dictionary.\r\nFirstOrDefault for a dict always returns a KeyValuePair. If it is not found then it returns KVP with default values of key & value in it. So we don't need null safety here but the key could be null if not found."""
11816,185340883,"b""That's true, my bad... I didn't notice it was a dictionary :|"""
11829,184533094,b'Need to buffer here?'
11829,184538506,b'Modifying the collection while iterating. I will convert to `ToArray` call though.'
11880,185662468,b'remove the comment'
11880,185662790,"b""we don't even need to populate the data, since we are only testing the generated SQL"""
11868,185335318,"b""ignore this part - it's copied from smit's PR which is needed to unblock the test"""
11868,185339074,b'typo - GrouBy'
11895,185925415,b'This should just be Accept unless I am missing something'
11895,185925570,"b'could DRY those - reduce them to two actions (one with aliases and one without), not sure if worth it. Thoughts?'"
11893,185916755,b'Do we want to follow Detach/Attach pattern which `InternalEntityTypeBuilder` does for adding a property in base type with conflicting derived type property?'
11893,185917217,b'Not sure what this means?'
11893,185917901,"b'https://github.com/aspnet/EntityFrameworkCore/blob/14290a0f71f38c727deaa76f8bca326321761610/src/EFCore/Metadata/Internal/InternalEntityTypeBuilder.cs#L389-L394\r\n\r\nDetach derived properties, create new base property, re-attach derived property to merge config.\r\n'"
11893,185925671,"b""I don't think there is actually any conflict here. The property just needs to be on the base type, but otherwise it is functionally the same. There's really only one thing an ILazyLoader property can do.\r\n\r\n@AndriySvyryd thoughts?"""
11893,185937396,"b'I agree with @ajcvickers, reattaching is only needed if there was some user configuration we wanted to preserve.'"
11898,185956992,b'non-correlated? '
11898,185957734,b'Top-level'
11864,185970789,"b""Not 100% sure on this one. Can we double check that no known providers are overriding this? Also, if we're going to break it anyway, then we could consider adding a parameter object."""
11864,185971226,b'Can we create a new overload instead of breaking this?'
11864,185971511,"b'Not sure about this break either, Looks like at some point it was necessary to add an Obsolete, which means something was calling the other overload.'"
11864,185971640,"b'Why ""message: ""?'"
11864,185971659,b'Why named param here too?'
11864,185971689,b'Lots of these creeping in from somewhere.'
11864,185972184,"b""This is technically a break, but it's not clear to me why this is public surface, since it isn't on the contract interface."""
11864,185972546,b'More named parameters here and below.'
11864,185984328,b'Looks like a code cleanup issue throughout.'
11899,186006503,b'No modifications should be done to any project under benchmarks folder.'
11899,186140452,b'Can you go into a bit more detail than that? Why not? Why do we test these benchmarks against netcoreapp2.0 but not netcoreapp2.1 currently?'
11918,186245284,b'Should add test in GroupByQueryTestBase without include too.'
11918,186245336,b'Just do `[0]`'
11864,186491507,"b""Couldn't find any uses.  Happy to add parameter object."""
11864,186491886,"b'Had an idea to avoid this, will try it out.'"
11889,185892354,b'\xe2\x98\xb9\xef\xb8\x8f `.Internal` API'
11889,185900072,b'Pains of provider writers :trollface: '
11889,185905357,b'virtual instance more useful?'
11889,185905690,"b'Consider just hard-coding the types in the condition below, this set may be overkill'"
11889,185906365,b'Projection[0] - alloc'
11889,185929114,"b""I think the whole class could be more overridable (everything is `private static`), but it's an .Internal class so the priority seemed low."""
11965,187672265,b'This will let non-Objects expression types that have a Value of null through. Do we properly handle that?'
11965,187674960,"b""@maumar @smitpatel @anpete Can you answer @Petermarcu's question?"""
11965,187675751,b'Yes. This method is always supposed to check type mapping on database side (regardless of null or non-null) because that type mapping is required to generate the SQL. In current pipeline there are some places we are creating null constant of type object (rather than actual type). Hence we need to still skip the type mapping check for Object types. Object does not have type mapping but they are printed using borrowed type mapping which comes from inference. '
11966,187506301,b'Is there an existing method like this in REQMV?'
11966,187510557,b'Yes. it is private. Tried to avoid DRY-ing for 2.1'
11966,187511265,b'Real internal might just be better than copying cc @ajcvickers '
11966,187664874,"b""Fine with either, as long as it's cleaned up going into dev."""
11980,187758208,b'@natemcmaster @bricelam - I think this one was bumped to netcoreapp2.1 due to some check. Should this update or remain same? global tool so this would be shipping in .NET Core SDK 2.2'
11980,187760679,b'Update to 2.2.'
11980,187763465,"b""Might want to consider running this on desktop too since that's what VS does."""
11980,187844877,b'I will file a new issue for that. When we added test there was some issue on running them on net461. Not sure exactly what it was.'
11980,188043911,b'Filed #11996'
11978,188073269,"b""I've convinced myself that this isn't a compile break. Are we sure that it isn't a binary break?"""
11978,188073762,b'The base method is still there and nobody should be calling the override directly.'
11978,188075064,b'Why are tests removed here?'
11978,188079229,b'These types are invalid'
11978,188080237,"b""Interesting. Didn't know that."""
12028,188732477,b'Just my 50 cents.\r\nI believe you could improve this for something like this:\r\n\r\n```csharp\r\nprivate static bool IsCompatibleIdentityColumn(IProperty property)\r\n    => IsCompatible(property.ClrType) && !HasConverter(property);\r\n        \r\nprivate static bool IsCompatibleSequenceHiLo(IProperty property)\r\n    => IsCompatible(property.ClrType) && !HasConverter(property); \r\n\r\nprivate static bool IsCompatible(Type type)\r\n    => type.IsInteger() || type == typeof(decimal);\r\n```'
12028,188735031,b'Or\r\n```csharp\r\nprivate static bool IsCompatibleIdentityColumn(IProperty property)\r\n    => IsCompatible(property);\r\n\r\nprivate static bool IsCompatibleSequenceHiLo(IProperty property)\r\n    => IsCompatible(property);\r\n\r\nprivate static bool IsCompatible(IProperty property)\r\n{\r\n    var type = property.ClrType;\r\n\r\n    return type.IsInteger()\r\n        || type == typeof(decimal)\r\n        && !HasConverter(property);\r\n}\r\n```'
12028,188738578,"b'Hey Ralmsdeveloper,\r\n\r\nI maked minimal changes, but your comment i think improve too\r\n\r\nI close this pull request, make changes and send again ?\r\n\r\nThank you,'"
12028,188745513,"b'You can push right here.\r\nBut it may be that the team has some other thoughts about it, it would be good to wait for a team opinion.\r\n\r\ncc/ @ajcvickers @bricelam '"
12020,188674379,b'Can we before 3.0?'
12020,188738304,"b""It's provider code.\r\n@ajcvickers """
12020,188742625,"b'I believe it is expected that applications may use SqlServerMigrationsSqlGenerator, which is why it is explicitly not in an internal namespace.'"
12020,188744570,"b""Ok, I'll put an Obsolete on it then"""
11983,188011339,b'`==`?'
11983,188368642,"b'After looking at code more, basically null-ref happens only if the underlyingstore type is also not mapped. That is the reason for test failure. Since `bit` is mapped type on SqlServer.\r\nnit: Could add `typeScaffoldingInfo != null` check in this `if` instead of additional return statement.'"
11983,188368738,b'Need to use some unmapped type on SqlServer for this test to pass.'
11983,188381521,"b""You're right @smitpatel (as I said I couldn't actually run the test, sorry).\r\n\r\nRegarding the nit, I just code this way in case any more logic is added later. The moment that `typeScaffoldingInfo` we know that we're not going to be able to scaffold."""
12039,189032367,b'Store this as field on RQMV?'
12039,189032463,b'Or on QCC?'
12039,189080527,"b'dont want to add public api for this change, will do it in rqmv'"
12039,189110384,b'Not sure about this. I think this should be delegated to the IDiagnosticLogger.'
12038,189021876,b'Missing checks'
12038,189021943,b'Stub out doc comments?'
12038,189030137,"b'Added checks here. Though the NotNull annotation was copy over from other provider. In general most APIs being written in this does not have annotation set. Api consistency check should catch those when its run, at which point we can add annotations & checks both.'"
12038,189030213,b'Not writing any doc comments at present since shape of API could change a lot.'
12035,189138808,"b""Riderization. I usually revert, but probably doesn't matter."""
12035,189138929,b'ICoreSingletonOptions?'
12038,189384305,b'Make the default collection name configurable on the model.'
12038,189386041,b'Should this be internal? Possibly with a public interface'
12038,189386265,b'expression body'
12038,189386641,"b""Shouldn't all implementations be in .Internal?"""
12057,189160010,b'should these have `[]` around names?'
12057,189367730,"b""They don't _need_ it"""
12069,189412951,b'Conflicts with https://github.com/aspnet/EntityFrameworkCore/issues/11601'
12069,189725551,b'Do we have regression test for this bug?'
12069,189726017,"b'Yeah, exposed by new test ```Duplicate_tags```. The same thing would probably happen for duplicate sql in call to FromSql.'"
12103,189964621,"b""We can't make this change. Sorry, when I said yes to PR I meant to fix the failing test, not to update to the new provider version. The Oracle pre-release licensing is very restrictive so we decided not to use it."""
12103,189984826,"b""Okay, I misinterpreted it, I'll do it!"""
12072,189992078,"b'Casing of OracleUDFFixture. Lets use ""Udf"" everywhere'"
12072,189992500,b'Remove redundant overrides.'
12072,189995248,b'Are there no plans to eventually check the Oracle sql?'
12072,189999044,"b""No. Unless SQL is drastically different. We do SQL assertion for specific member/method translation which uses different function on server across provider, but if the shape is nearly same then we don't."""
12072,189999054,"b'Probably not, unless it is different in some way that is worth verifying - we try to only verify it in one place (when we can).'"
12095,189749424,b'Just this missing return caused this issue.'
12095,190012650,b'its more than that - for static non EF.Property methods we were printing incorrectly - printing a caller instead of first argument to a method - sometimes the caller is not on the first position'
12111,190311761,b'Feels like this should not be documented as internal if the intention is for providers to override it. Maybe give it the text block we use elsewhere for things that we expect only providers to use?'
12111,190330480,"b'It is optional to override, as are the other methods in this class (which currently have the same comment). Want to change it for all?'"
12111,190344741,"b'No, leave it for now. I think I need to understand better how providers are supposed to interact with this internal class.'"
12158,191561548,b'`UdfFixtureBase`'
12094,189748445,b'Not much of a test...'
12094,189748561,b'Redundant named parameter'
12094,189748929,b'Extra blank line'
12094,189749800,"b""Don't be impatient. :trollface:"""
12094,191885454,b'It is required due to multiple optional parameters'
12140,190748924,b'Check NodeType'
12140,190753944,b'There are other places too where we match like this. I will update those too.'
12164,191824258,b'Should the entityType argument be called queryType?'
12164,191824361,b'Same here'
12235,192929152,"b'@smitpatel \r\nFYI: Some providers may need to rewrite the `Name` property, just like my provider and the Oracle example\r\n\r\ncc/ @AndriySvyryd '"
12235,192930187,b'Avoid `ResolveName` function. Can inline the logic.\r\nCan you move this logic to ctor?'
12235,193089971,b'Just move it to call to `base`'
12235,193097768,b'\xf0\x9f\x99\x88'
12236,193246821,"b'Instead of adding new method just make apply optimizations protected. So provider can control if they want to apply base optimization before or after own optimizations.\r\nFurther, that method needs quite a few things to be moved from it.'"
12299,193931084,"b'unrelated, ordering by OrderDate is not deterministic for SAVEA, works by accident on SqlServer but breaks on MySql'"
12299,193932505,b'It is not supposed to remove `[t0]` but I can investigate later.'
12311,194505567,b'Do we also have test for `DateTimeOffset` type?'
12311,194526082,"b'@smitpatel,\r\nIn our test database (Northwind) I have not found any properties that support DateTimeOffset, but according to the documentation:\r\nhttps://docs.microsoft.com/en-us/sql/t-sql/data-types/datetimeoffset-transact-sql?view=sql-server-2017\r\nIt works perfectly I did tests on my base, but if you want, I can create a basic test for this.\r\n\r\n```csharp\r\n[ConditionalFact]\r\npublic void Time_of_day_datetimeoffset()\r\n{\r\n    using (var db = CreateContext())\r\n    {\r\n        var orders = db.Orders.Select(p => DateTimeOffset.Now.TimeOfDay).FirstOrDefault();\r\n\r\n        AssertSql(@""SELECT TOP(1) CAST(SYSDATETIMEOFFSET() AS time)\r\nFROM [Orders] AS [p]"");\r\n\r\n    }\r\n}\r\n```'"
12311,194532403,b'`Mission` entity in `GearsOfWar` has `DateTimeOffset` property.'
12311,194596215,b'Test goes to the base class in specification.tests project. SqlServer will just assert the SQL. Same for the other.'
12311,194596271,b'You can remove this test as the other one in gearsofwar covers it in better way.'
12311,194598731,b'I had thought of doing this but as it was something related to SQL Server I thought it was enough here only :)'
12252,194609554,"b'My 50 cents, I think it would be less redundant!\r\n\r\n```csharp\r\nprivate static bool IsCompatible(IProperty property)\r\n{\r\n    var type = property.ClrType;\r\n\r\n    return (type.IsInteger()\r\n        || type == typeof(decimal))\r\n            && !HasConverter(property);\r\n}\r\n\r\nprivate static bool IsCompatibleIdentityColumn(IProperty property)\r\n    => IsCompatible(property);\r\n\r\nprivate static bool IsCompatibleSequenceHiLo(IProperty property)\r\n    => IsCompatible(property); \r\n```'"
12252,194697435,"b'DRY, let\xc2\xb4s fix this.'"
12252,194776859,"b""Remove 2 functions which are just calling `IsCompatible`.\r\nThey were 2 because it had different logic. Now that logic is same, we don't either of them. private static methods - replace the usages."""
12341,194931209,"b""@smitpatel investigated using OutputDataInfo instead of operators directly, but the problem is that Sum/Avg/Count/LongCount produce StreamedScalarValueInfo, but Min/Max/FirstOrDefault produce StreamedSingleValueIInfo - problem is that Min/Max we can optimize out, but FirstOrDefault we can't. """
12353,195435185,b'Commented code'
12353,195494416,b'By design.'
12352,195264224,"b""probably not ideal place for this (handler itself shouldn't reason about sync/async), but my rationale as to make the fix as contained and local as possible given it could land in a patch."""
12352,195272275,b'unnecessary `async`'
11541,195572538,b'@ilmax Sorry for the long delay here. Can you explain what advantage there is in have a DefaultCacheSize like this?'
11541,195573383,b'Not sure we need the default here either.'
11541,195579642,"b""Minor edits: Cannot use '{cacheSize}' as a sequence cache size. The value must be greater than zero."""
11541,195585652,"b""@ajcvickers No problem :) I put a default mostly to be consistent with other properties, but I was not sure about the default, as I stated in the TODO comment there, so I will get rid of the comment.\r\nATM I'm a bit stuck with #11610 , will get back on this one as soon as I've fixed the test failures on the aforementioned one"""
12266,194914324,b'Just call `StructuralComparisons.StructuralEqualityComparer.Equals`'
11541,195612199,"b'@bricelam knows this code best, but I think he break here can be avoided by:\r\n* Removing all the defaults from the current method, but otherwise leaving it unchanged. This ensures that binaries already bound to this method will not break.\r\n* Adding a new overload, containing all the defaults.\r\n* Adding the new parameters to the end of the new overload. They must be at the end or existing code with positional parameters may bind incorrectly.\r\n\r\nSomething like this:\r\n```C#\r\npublic virtual AlterOperationBuilder<AlterSequenceOperation> AlterSequence(\r\n    [NotNull] string name,\r\n    [CanBeNull] string schema,\r\n    int incrementBy,\r\n    long? minValue,\r\n    long? maxValue,\r\n    bool cyclic,\r\n    int oldIncrementBy,\r\n    long? oldMinValue,\r\n    long? oldMaxValue,\r\n    bool oldCyclic)\r\n{\r\n...\r\n}\r\n\r\npublic virtual AlterOperationBuilder<AlterSequenceOperation> AlterSequence(\r\n    [NotNull] string name,\r\n    [CanBeNull] string schema = null,\r\n    int incrementBy = 1,\r\n    long? minValue = null,\r\n    long? maxValue = null,\r\n    bool cyclic = false,\r\n    int oldIncrementBy = 1,\r\n    long? oldMinValue = null,\r\n    long? oldMaxValue = null,\r\n    bool oldCyclic = false,\r\n    int? cacheSize = null,\r\n    int? oldCacheSize = null){\r\n...\r\n}\r\n```\r\nWhen we are able to make breaking changes (3.0) we can drop the old method and all re-compiled code will use the new method.'"
11541,195613596,"b'Again, we should check with @bricelam, but I think here we can avoid the break by creating a new overload and then calling the old method from the new one. Something like this:\r\n```C#\r\nprotected virtual void SequenceOptions(\r\n    [CanBeNull] string schema,\r\n    [NotNull] string name,\r\n    int increment,\r\n    long? minimumValue,\r\n    long? maximumValue,\r\n    bool cycle,\r\n    long? cacheSize,\r\n    [CanBeNull] IModel model,\r\n    [NotNull] MigrationCommandListBuilder builder)\r\n{\r\n    Check.NotEmpty(name, nameof(name));\r\n    Check.NotNull(increment, nameof(increment));\r\n    Check.NotNull(cycle, nameof(cycle));\r\n    Check.NotNull(builder, nameof(builder));\r\n\r\n    SequenceOptions(schema, name, increment, minimumValue, maximumValue, cycle, model, builder);\r\n\r\n    var longTypeMapping = Dependencies.TypeMappingSource.GetMapping(typeof(long));\r\n\r\n    if (cacheSize.HasValue)\r\n    {\r\n        builder\r\n            .Append("" CACHE "")\r\n            .Append(longTypeMapping.GenerateSqlLiteral(cacheSize));\r\n    }\r\n}\r\n```\r\nThis way, if providers have overridden the old method, then we\'re still going to call their overridden code, but then add the cacheSize in at the end.'"
12179,195569840,"b'Missing `,` at the end of the line'"
12179,195635065,"b'Fixed, thanks.'"
12040,188851595,b'Should I DRY this with an `EnumToStringConverter`? E. g. via additional base class or just `ValueConverter` class?'
12040,188851728,b'Should I DRY this with a `NumberToStringConverter`? E. g. via additional base class or just `ValueConverter` class?'
12040,188852174,b'Did I pick the correct order?'
12040,195810138,"b'Sorry to take so long on getting to this. (There has been a lot on with the 2.1 release!) On thinking about this, it might make sense to introduce a base class for all the SomethingToString and StringToSomething converters since they both need logic to convert to and from strings and it would be good for that logic to be common and in one place. '"
12040,195811787,"b""It seems like there probably shouldn't be any cases where we would do a conversion when the provider type isn't known, except to byte[]. This is because all providers are expected to support at least one of string or byte[] without conversions. If the provider supports strings, then strings will always be mapped to strings unless an explicit conversion to a different type has been requested. If the provider doesn't support strings and no provider type is specified, then the conversion should be to byte[]."""
12040,195812100,"b'After making the change I suggested in the Selector, these should no longer be returned.'"
12040,195812235,b'But all the other tests below should still pass.'
12040,195939236,"b'Yes, this will help to avoid duplication of logic, but I am not sure if we can do something about unit tests. I mean testing just a base class logic will be a bad idea because this does not guarantee, that actual converters work.\r\n\r\nAny thoughts of how can we handle this or should I basically do a copy-paste?'"
12040,195939250,b'Done.'
12040,196262720,b'Unit tests should just test the derived types--I think the tests you already have look good.'
12383,196521765,b'`_cancellation`'
11610,180511822,b'Single line. \xf0\x9f\x98\x8a'
11610,182553436,b'Why do we need code duplication instead of one path for both property/field'
11610,182553659,b'This should go inside nonrelationshiptest base if no relations. And in relationship testbases according to relationship type'
11610,182568398,"b""@smitpatel I agree, it's unfortunate, I have opted for this solution to avoid changing the actual method `GetPropertyAccess`, because all call sites now only accepts properties, so changing it would be a change in the current behavior. Do you think we should just have one method to serve both purposes?"""
11610,182568633,b'The exception message should be updated'
11610,195573987,b'@andriysvyryd - Is this acceptable break?'
11610,195574432,b'@andriysvyryd - And this variation of break?'
11610,195575071,b'Also add variation for composite case (for relevant places)'
11610,195578503,b'Yes'
11610,195578599,b'Yes'
11610,197285268,b'Rename to `MatchSimpleMemberAccess`'
11610,197285344,b'Rename to `MatchMemberAccess`'
11610,197286849,"b'Also add tests for `HasOne`/`HasMany`, `WithOne`/`WithMany` and tests calling all the methods on `ReferenceOwnershipBuilder` returned by `OwnsOne`'"
12385,197260221,b'`_logger.DataReaderDisposing` should still be the last call'
12385,197267206,b'And it should receive the disposed (destroyed) objects? 8-)'
12385,197267946,b'Yes. This way logging cannot interfere with the disposal.'
12385,197269020,b'How it may interfere to code from finally section?'
12385,197271271,b'If it is really critical - I may use CER.'
12385,197271880,"b'Although this is unlikely but the objects are passed to the `DiagnosticSource` and it may dispose the reader itself. Which may cause the second `Dispose()` call to throw.\r\n\r\nTurning this around, is there a reason not to pass disposed objects to `_logger.DataReaderDisposing`?'"
12385,197274532,b'A CER would not help here. However you could put each of the  finally calls in a nested try/finally. But this might be overengineering.\r\n\r\n@ajcvickers Any thoughts?'
12385,197277971,"b""Calling Dispose multiple times should not be an issue--Dispose is clearly documented that it should be safe to call multiple times, even if the object is already disposed. I don't feel strongly one way or the other. However, pragmatically, we know of providers that clear out a bunch of stuff on Dispose--the old SQLite provider, for example, and SQL Compact. So I would err on the side of logging before disposing, rather than the other way round. While it is true that logging could cause something to later go wrong in the finally clause, I think that is quite unlikely."""
12385,197278035,b'Why add a call to Close here?'
12385,197278178,b'We should be defensive against Parameters being null here...just in case.'
12385,197278750,"b'This ensures `RecordsAffected` is set, see https://github.com/aspnet/EntityFrameworkCore/issues/12137#issuecomment-392261628'"
12385,197278886,"b'Should be moved into `try`, just in case'"
12385,197344239,"b'Personally, I vote for removing of call _command.Parameters.Clear() from here.\r\n\r\nIt is work of _command.Dispose.'"
12385,197362690,"b'Just for info:\r\n\r\n void Structure_IComponentLifeTerminator.ComponentLife__Terminator\r\n       (bool disposing)\r\n {\r\n  if(disposing)\r\n  {\r\n   var ParamList=Interlocked.Exchange(ref m_ParamList,null);\r\n\r\n   //--------------------------------------- Release command resources\r\n   this.Helper__ReleaseCommandResource();\r\n\r\n   //--------------------------------------- Detach from parameters\r\n   if(!Object.ReferenceEquals(ParamList,null))\r\n    Helper__DetachFromParameters(ParamList);\r\n  }//if disposing\r\n }//ComponentLife__Terminator\r\n\r\n private static void Helper__DetachFromParameters(List<OleDbParameter> ParamList)\r\n {\r\n  Debug.Assert(!Object.ReferenceEquals(ParamList,null));\r\n\r\n  for(int i=0,_c=ParamList.Count;i!=_c;++i)\r\n  {\r\n   Debug.Assert(!Object.ReferenceEquals(ParamList[i],null));\r\n   Debug.Assert(!Object.ReferenceEquals(ParamList[i].Parent,null));\r\n   Debug.Assert(Object.ReferenceEquals(ParamList[i].Parent,ParamList));\r\n\r\n   ParamList[i].DetachFromParent(ParamList);\r\n  }//for i\r\n }//Helper__DetachFromParameters\r\n\r\n// --------------\r\n internal void DetachFromParent(object CurParent)\r\n {\r\n  Debug.Assert(!Object.ReferenceEquals(CurParent,null));\r\n  Debug.Assert(Object.ReferenceEquals(m_Parent,CurParent));\r\n\r\n  //----------------------------------------\r\n  //! 1. Reset StateWasGenerated.\r\n\r\n  Debug.Assert(!Object.ReferenceEquals(m_Data,null));\r\n\r\n  m_Data.ResetStateWasGenerated();\r\n\r\n  //----------------------------------------\r\n  //! 2. Detach from parent.\r\n\r\n#if DEBUG\r\n  var PrevParent=\r\n#endif\r\n   this.Helper__CompareExchangeParent(null,CurParent);\r\n\r\n#if DEBUG\r\n  Debug.Assert(object.ReferenceEquals(PrevParent,CurParent));\r\n#endif\r\n }//DetachFromParent\r\n'"
12385,197477563,b'Not all providers clear the parameters and this causes issues.'
12385,197504911,b'Issues with what?'
12385,197510388,b'If the parameters are not cleared then trying to add them to another command throws.'
12450,197504073,b'This file is the baseline for the APIs that were shipped and so should not be changed.'
12450,197594861,b'thanks @ajcvickers. this should be fixed now'
12400,196201449,"b'            List<Order> orders = null;\r\n            using (var context = CreateContext())\r\n            {\r\n                orders = context.Orders.Where(o => o.OrderID < 10300).ToList();\r\n            }\r\n\r\n            await AssertQuery<Order>(\r\n                os => from o in os\r\n                      where orders.Select(t => t.OrderID).Contains(o.OrderID)\r\n                      group o by o.CustomerID into g\r\n                      orderby g.Key\r\n                      select g.OrderByDescending(x => x.OrderID),\r\n                assertOrder: true,\r\n                elementAsserter: CollectionAsserter<Order>(elementAsserter: (e, a) => Assert.Equal(e.OrderID, a.OrderID)));\r\n'"
12400,196893965,b'Add more cases that cause client eval and make sure they work.'
12400,196939148,b'Added few more cases (where I could reproduce the issue).'
12416,197967350,b'You could just list out the types:\r\n```C#\r\nreturn type == typeof(int)\r\n    || type == typeof(long)\r\n    || type == typeof(short)\r\n    || type == typeof(sbyte);\r\n```'
12416,197968132,"b""The `property.ClrType.IsDefaultValue(value)` condition should remain in the top `else if`, otherwise it won't detect incompatible values supplied for key properties"""
12416,198325647,b'I think you need to remove the `property.RequiresValueGenerator()` condition to fix the test'
12468,198047248,b'Is this class an aproppriate place for such logic?'
12468,198048110,b'Hopefully not too aggressive \xf0\x9f\x98\x8f'
12468,198246164,b'Move this to query optimizer class.'
12468,198246377,b'Way too aggressive \xf0\x9f\x98\xb1 \r\nThis would stop blocking join with grouping which fails badly.'
12468,198543984,b'Probably not the best way.'
12300,193933320,b'Could linq-ify'
12468,198665134,b'Perhaps not best to fix this before #12089 '
12468,198718933,"b""Well it's up to you @smitpatel, I am ok if we close this for now. But considering that #12089 is scheduled for 2.2.0, maybe we can leave PR open, so I will re-engage when #12089 will be completed. """
12498,199004757,"b'use constant strings for those well established names (like query, and root)'"
12498,199007124,"b'""TODO"" :)'"
12498,199007926,b'`typeof(IEnumerable<JObject>)`'
12498,199008995,b'remove'
12497,199000797,b'Feed would remain the same for all branches?'
12497,199002405,b'Yes. We no longer fork our myget feed based on branch.'
12500,199024084,"b'>//  [](start = 0, length = 3)\r\n\r\nRemove commented out code'"
12383,199259992,b'Remove `_dummyCancellationToken` and review when `CancellationToken` should be looked for at all'
12413,199259167,b'Make this a `ConditionalTheory` and run with the quirk mode switched on too'
12411,196550172,b'quirk'
12419,196622702,b'Can you add test for each of the result operator which calls `PrepareSelectExpressionForAggregate` since all of them cause a pushdown now in certain scenario?'
12419,197220451,b'Inline this.'
12419,197221064,b'Replicate these tests in Async test base also.\r\nAdd tests for Average & Sum as final operator. \r\nAdd tests (or modify these to cover) for variations of aggregate operator over group being Min/Max/Count/LongCount/Average.'
12419,197263896,b'@smitpatel @maumar I think this should be quirked. /cc @divega '
12419,199259434,b'Add variants that tests with quirk mode on'
12500,199025386,b'Why not stick to overloads mirroring LINQ? I.e `AssertAny` instead of `AssertAnyWithPredicate`'
12500,199025768,b'will change'
12503,199286618,"b""I know we won't, but this would include `2.10`."""
12503,199288046,"b""\xf0\x9f\x98\x86\r\nWe'll deal with it at that point"""
12612,201156850,b'no cancellationToken ?'
12612,201157473,b'extra line'
12612,201158167,b'Consider only doing this if the discriminator is not set.'
12612,201158204,b'extra line'
12619,201525695,b'redundant'
12619,201527744,b'Will cleanup in future PR.'
12593,201515337,b'comment this out'
12593,201532283,b'TryPopulateIncludeLoadTree? '
12699,203228601,b'First is not fixed. We should use where + single'
12699,203228833,"b'The other two are reader disposed messages, which will happen after the message we are looking for - First should be ok.'"
12700,203231508,"b""AssertIncludeQuery can't handle this scenario, might improve it in the future"""
12655,203500308,"b'Should we obsolete the ctor with string, type'"
12655,204489924,"b'No, it effectively makes the default value for niladic false.'"
12655,204505642,b'Is there any issue with that?'
12655,204511982,b'Niladic is going to be seldomly used so false is a good default.  '
12779,204926642,b'internal set may be?'
12785,205281579,b'Can you change this to `InternalWebHostBuilderFactorySourcesPackageVersion`?'
12860,207040680,b'Test name. Remove'
12971,209386072,b'unnecessary using'
12969,209372060,b':+1:'
12987,209845045,b'Use `await Task.Delay(500)` for the async version?  No strong reason but it could help avoid deadlocks depending on what causes them.'
12990,209795609,b'Move this to ExpressionExtensions to generate ConstantExpression with Default Value.\r\ni.e. A function where you pass in the type and it will invoke reflection/generic method to return appropriate constant Expression. (make reflection/generic method both static)'
12990,209795671,b'Get ConstantExpression from the other function and use it as 2nd arg in both together.'
12990,209795707,b'Alphabetical sort order (tribal knowledge)'
12990,209795835,b'Is this being used?'
12990,209796070,"b'yes, by the test above, its not new code, just moved it closer to where its used'"
12990,209796261,"b'Interesting to see that we are not hitting #12797 here, given northwind uses `datetime` on database instead of `datetime2`.'"
12990,209797425,"b""I think it's because all orders have order dates, so sql never evaluates the second term. Couldn't find anything better tho."""
12990,209807956,b'static field'
12808,206351829,b'Test comment #Resolved'
12808,210193137,"b'@smitpatel elia5\r\n\r\nI think you worked on improving the quality of the results we were getting. If that is ready, feel free to merge. We can always keep improving the report itsellf based on feedback.\r\n\r\n'"
12991,210072601,b'?'
12991,210075487,b'?'
12991,210075534,b'?\r\n'
12843,207322137,b'Why no pooling?'
12843,207323228,b'Something failed in Reset method. '
12843,207323808,b'Make sure this is only executed once per run'
12843,207324285,b'File an issue?'
12843,207395969,b'#12878 '
13035,210752412,"b""Shouldn't these and `RelationalCompositeMemberTranslator` be in Core?"""
13035,210763845,b'Member/Method translators are SQL specific hence should go to relational for now.'
13035,210980313,"b'Talked to @bricelam on this. Will try to make the order deterministic, not what that service provider returns.'"
13024,210452315,b'will remove'
13024,210452588,b'is this the best way to determine if navigation is owned? @AndriySvyryd '
13024,210452940,b'will remove'
13024,210713836,b'protected? constructor based?'
13024,210714398,"b'Why is this needed?\r\nIf they are structurally same but referentially different, there should not be any issue in replacing it.'"
13024,210751108,"b'Small optimization. The expression ends up the same in both case in the end, but this simplifies it a bit. Useful for QM debugging'"
13024,210765284,"b'Replacement if not same reference. If visitor mutated the expression in any way, we will change it. (strict immutability). And faulty Equals could generate a lot of bugs in unrelated area with this change.'"
13033,210765632,b'\xf0\x9f\x8e\x89 '
13033,210765934,b'cc: @maumar on various singleton patterns and why we chose the earlier one rather than this one (if on purpose)'
13033,211005933,b'Can you also add RCS1141? All overridden method in query use different parameter name than node.'
13033,211007215,b'RCS1141 is about XML docs https://github.com/JosefPihrt/Roslynator/blob/master/docs/analyzers/RCS1141.md\r\nDid you mean https://github.com/JosefPihrt/Roslynator/blob/master/docs/analyzers/RCS1168.md?'
13033,211007693,b'I guess both. It is showing error/suggestion for missing parameter in xml docs for pub-internal APIs.'
13033,211008353,"b""1141 doesn't appear in the error list by default, so I think it's fine to leave it"""
13033,211631549,"b'@AndriySvyryd Should it still be an singleton?\r\nSeems the new one will create an new instance for every call, or you mean the below code?\r\n`public static ExpressionEqualityComparer Instance { get; } = new ExpressionEqualityComparer();`'"
12988,209778097,b'@Eilon approval needed'
12988,209784777,"b""FallbackTypeMappingSource should not be used here--it's for bridging the gap between old type mapping and 2.1 type mapping. We should probably obsolete it in 2.2."""
12988,210013711,"b""It's `.Internal`. I just didn't want to break anyone that was still overriding and replacing the old type mapper"""
12988,210014181,b'I think I saw an issue to remove all the old classes in 3.0 and figured we could live with it this way for a release.'
12988,210054693,b'Can we use `nameof()` here?'
12988,210069614,"b'Nope. We avoid referencing GeoAPI directly, so users can optionally bring it in.\r\n\r\nThe alternative is to introduce `Microsoft.EntityFrameworkCore.InMemeroy.NetTopologySuite`, but it would essentially only contain a single type mapping class.'"
12988,210139316,b'Oracle too?'
12988,210710557,b'Removed FallbackTypeMappingSource from here'
12988,211351067,b'Registration complete. Good to go.'
12988,211722181,"b""Got to the bottom of it. Reference types weren't being copied to and from the in-memory store."""
12988,211748800,"b'Consider building typed delegates (that take, for example, object) to avoid dynamic invoke here.'"
12988,211761575,b'Filed #13072'
12988,212129889,"b""Filed #13085. This shouldn't be used."""
13101,212729409,b'add AssertSql in the FromSqlQuerySqlServerTest'
13096,212466287,b'first condition is no longer needed'
13096,212724453,b'you can use model from AsyncGearsOfWarQueryTestBase\r\n\r\nsomething like this:\r\n```\r\n        [ConditionalFact]\r\n        public virtual async Task Group_by_sum_nullable_double()\r\n        {\r\n            using (var ctx = CreateContext())\r\n            {\r\n                var result = await ctx.Missions.GroupBy(m => m.CodeName).Select(g => g.Sum(m => m.Rating)).ToListAsync();\r\n            }\r\n        }\r\n```'
12778,206298388,"b""We should throw if we don't want to make this work."""
12778,206332868,b'Do you have any idea how to make it work? It is trying to modify a singleton service once its initialized. I am leaning toward just throwing in this case. (Bad provider code?) cc: @divega @ajcvickers \r\n\r\nIf we throw then what should be exception msg/type?'
12778,206335795,"b""To make it _work_ we could add a lock here and clear out `_nodeTypeProviders`. But we would only do this to avoid introducing any breaking changes, though from my understanding it's unlikely that someone could actually get this exception, correct?"""
12778,206337559,"b""This isn't needed, you can just check `_nodeTypeProviders` for null"""
12778,206706756,"b""This is double-check locking. Is this safe on .NET Core for all architectures? Last I heard it wasn't safe on ARM."""
12778,206707425,b'So we will hit this exception if a provider (or other code) calls this method outside of the constructor--is that correct?'
12778,206708316,"b'Could we instead in this case log a warning and do what we were doing before, but in a thread-safe way? That is, using the lock?'"
12778,206709896,"b'Is there a reason this needs to be pubternal in the patch? If not we should make it real internal for the patch and make it pubternal when going from the patch branch to 2.2. (I know a strong case can be made that this is not necessary, but it will make it easier going through shiproom where any new public API is heavily frowned upon.)'"
12778,206717335,b'It can certainly made internal but this class registers FromSql. So if providers are going to react to this then they would need to derive from this class or copy code from this.'
12778,207386361,b'As per discussion this is safe as memory barrier is automatically introduced. '
12778,207386466,"b'Removed the exception. In the absense of else part, it will behave same as how it did before this fix.'"
12778,207387080,b'Make `_nodeTypeProviders` volatile just to be sure'
13065,211402216,b'add empty line'
13115,213137370,b'@ajcvickers Worth creating a new services builder?'
13115,213137575,b'Submitted NetTopologySuite/NetTopologySuite#255'
13115,213138072,b'@ajcvickers Have we considered adding a hook before the value gets converted?'
13115,213284280,"b'Might it make more sense to provide a more specific message, and/or move this into `Geography.ReadFrom`?'"
13115,213285701,"b'> Can this be represented in NTS?\r\n\r\nNot directly / separately, but I think the logic would be:\r\n```csharp\r\nbool IsLargerThanAHemisphere(IGeometry someGeometry)\r\n{\r\n    return someGeometry.EnvelopeInternal.Width > 180 ||  someGeometry.EnvelopeInternal.Height > 90;\r\n}'"
13115,213288988,"b""PERF: I'd typically do this using a `GeoAPI.Geometries.ICoordinateSequenceFilter` implementation (`Done` = false, `GeometryChanged` = false), to avoid lots of extra allocations and copying all the data around.\r\n\r\nThen this would be something like:\r\n```csharp\r\nvar pointOffset = geography.Points.Count;\r\nvar filter = new MyGeographyPopulatingFilter(geography, _emitZ, _emitM);\r\ng.Apply(filter);\r\nif (filter.PointsAdded)\r\n{\r\n    geography.Figures.Add(\r\n        new Figure\r\n        {\r\n            FigureAttribute = figureAttribute,\r\n            PointOffset = pointOffset,\r\n        });\r\n}\r\n\r\nreturn filter.PointsAdded;\r\n```"""
13115,213291400,b'note: NetTopologySuite/NetTopologySuite#156 is the reference number'
13115,213293081,"b'then again, this would often do the completely wrong thing if the geometry wraps around the antimeridian (e.g., Alaska including Aleutians), so it would need to be a bit more sophisticated than this sample code.'"
13115,213385190,"b""Thanks! I also wanted to dig into why SQL Server even needs this. I think it's related to how the external rings of `geography` polygons are handled..."""
13115,213385752,"b""Thanks! There's a lot of unnecessary allocating here with the enumerators too. We should do some profiling before we RTM."""
13115,213386640,b'Filed aspnet/EntityFrameworkCore#13144'
13115,213388571,"b""Definitely belongs in `Geography.ReadFrom`. The default message isn't very useful, is it:\r\n\r\n> One of the identified items was in an invalid format."""
13115,213753280,b'@divega We should probably call out these plugin mechanisms explicitly in the preview2 blog post because they are generally useful outside of just spatial.'
13115,213754299,b'Add to the provider log that base.FindMapping should be called?'
13115,213755225,b'Probably not worth it for just this service.'
13115,213755961,b'Internal because these move to NTS before RTM?'
13115,213758233,b'Add API doc that setting is a no-op and why. Also for RepairRings.'
13115,213758850,b'Likewise in this class'
13115,213759263,b'Temporary?'
13115,213851608,b'Yep.'
13115,213853820,"b""Probably not needed. I'll remove."""
13156,214158371,b'inline temp variable?'
13156,214158595,b'Would visiting member expression require same condition?'
13156,214162505,"b'Sure, this is just for perf at this point. A possible optimization would be to separate the translatable part of the predicate and leave the rest, see https://github.com/aspnet/EntityFrameworkCore/issues/13159'"
11129,198672629,b'This would be a breaking change for other implementers of this interface. It may be acceptable if we are convinced the only implementation that makes sense is in EF Core itself.'
11129,198676165,"b'For the ones that return `IQueryable<T>`, do we actually execute anything when you call Execute? Or should this rather be a ""CreateQuery"" method?'"
11129,198677453,"b'I think the amount of ceremony (e.g. specifying generic arguments and the lambda) required by the proposed shape and usage of Execute may be reasonable. However I wonder if we could do something with the EF static class to allow something like this:\r\n\r\n``` csharp\r\nreturn EF.Execute(() => this.SchemaName());\r\n```\r\n\r\nFor TVFs it could be \r\n\r\n``` csharp\r\nreturn EF.CreateQuery(() => this.GetCustomerOrderCountByYear(customerId)); \r\n```\r\n\r\nI believe type inference should be fine (that is, sufficient) for these, and they become little more than sugar over the corresponding IQueryProvider.Execute and IQueryProvider.CreateQuery methods. \r\n\r\nSpeaking of which, we could enable manually building the expression. For examples, for AddValues:\r\n\r\n``` csharp\r\npublic int AddValues(int a, int b) =>\r\n    EF.Execute<int>(\r\n        Expression.Call(\r\n            Expression.Constant(this), \r\n            (MethodInfo)MethodInfo.GetCurrentMethod(), \r\n            Expression.Constant(a, typeof(int)),\r\n            Expression.Constant(b, typeof(int))));\r\n```'"
11129,198680134,"b'To support static functions or functions that are mapped to instance method on the context, we could have overloads that take two parameters where the first parameter is the context instance to use for the query. \r\n\r\nBTW, did you try these cases with CompileQuery? '"
11129,199324998,b'I highly doubt anyone outside of EF Core will have implemented this interface.  If we think someone has we can change this to an extension method on IDbFunction.  The data we need is already returned by IDbFunction.MethodInfo so this is more of a convenience method to avoid reflection in a bunch of spots.  '
11129,199325282,"b""There are overloads of Execute that do both.  For methods which return `IQueryable<T>` Execute calls `QueryProvider.CreateQuery` and returns that.  That query can then be built upon with further linq statements.\r\n\r\nFor a method which return a scalar value then the function is executed.\r\n\r\nFor example.\r\n\r\n```csharp\r\npublic string Schema_Name()\r\n{\r\n     return Execute<UDFSqlContext, string>(db => db.SCHEMA_NAME());\r\n}\r\n\r\nvar schemaName = context.Schema_Name();\r\n```\r\n\r\nI was trying to keep the naming consistent, but I can see where the first can be renamed to properly convey it's meaning.  What do you think?"""
11129,199325801,b'Yes the bootstrapping of static methods is rather verbose.    \r\n\r\nLet me play around with your ideas and see what I can come up with.  '
11129,199333299,"b""I have no tried these with CompileQuery.  I'll add it to the list."""
11129,199333423,b'@divega \r\n\r\nWhen you say \r\n```csharp\r\nreturn EF.Execute(() => this.SchemaName());\r\n```\r\n\r\nAre you envisioning that becoming the way of coding the mapped method like this.\r\n```csharp\r\npublic string SchemaName()\r\n{\r\n     return EF.Execute(() => this.SchemaName());\r\n}\r\n\r\nvar mySchema = context.SchemaName() ;\r\n```\r\n\r\nor becoming the way to execute the method like this?\r\n```csharp\r\nvar mySchema = EF.Execute(() => this.SchemaName());\r\n```'
11129,199353998,"b""@divega \r\n\r\nI have been playing around with this this morning. \r\n\r\nI have removed the DbContext parameter to the lambda and use the implicitly captured 'this' instead.  This allowed me to remove the generic TContext parameter from Execute which then simplifies the method call.\r\n\r\nYou now define the method on your DbContext like this.\r\n```csharp\r\npublic string SCHEMA_NAME()\r\n{\r\n     return Execute(() => SCHEMA_NAME());\r\n}\r\n```\r\n\r\nI'm not sure what I was thinking when I originally added that parameter to the DbContext  :blush:\r\n\r\nWhat are your thoughts?"""
11129,199354345,"b""I renamed the version used to create a query to 'CreateQuery'"""
11129,202052718,b'`Qwertyable` \xf0\x9f\x98\x9b '
11129,202110716,"b""Ha.  I don't think we can sneak that one past @divega"""
11129,202469071,"b'You could have tried, now it is too late :smile:'"
11129,210797947,"b'@pmiddleton here is an idea that I had last time I reviewed this and I was sure I had written it down in a comment, but I cannot find it anywhere so perhaps I forgot to submit it:\r\n\r\nWhat if the Execute and CreateQuery methods used to bootstrap functions where hanging from somewhere under the EF class? They would likely take the DbContext (likely the derived one) as an argument or allow it to be captured in the closure. \r\n\r\nHonestly I cannot remember all the possible advantages this could have :smile: but I remember discussing it with @smitpatel and maybe he will remember. There is some similarities with compiled query, so it may have been about getting similar experience or about avoiding adding top level methods to the DbContext for something that is relatively advanced.'"
11129,211055318,"b'@divega - Yes we can move the public surface for the Execute and CreateQuery methods to the EF class.  \r\n\r\nWe still need these methods on the DbContext class in order to work, but we can switch their access modifiers to internal and access them via EF.\r\n\r\nThe registration calls in your model then end up looking like this.\r\n\r\n```csharp\r\npublic IQueryable<OrderByYear> GetCustomerOrderCountByYear(int customerId)\r\n{\r\n     return EF.CreateQuery(this, () => GetCustomerOrderCountByYear(customerId));\r\n}\r\n```\r\n\r\nIs this what you were going for?'"
11129,211063557,b'Let\xe2\x80\x99s revisit it when I am fully available. I would not block the PR for this.'
11129,211107135,b'Ok I will hold off on making any changes.'
13236,215804361,b'yay'
13236,215804892,b'ExecuteSqlQueryAsync?'
13236,215805105,b'Does this actually execute query async? Can it be unified with sync?'
13236,215807434,"b""It doesn't return a `Task` or an `IAsyncEnumerable` ..."""
13236,215808017,b'It returns a query that can only be executed asynchronously. The API is weird.'
13241,215801734,"b""It's always a test project...\r\n\r\nProbably better represented by using an `ExcludeFromTest` item in `build/repo.props`."""
13241,215803708,"b'I tried that it did not work. Even after putting unconditional ExcludeFromTest, it still runs the tests.\r\ncc: @natemcmaster '"
13241,215806154,"b""ExcludeFromTest may not work if the file patterns don't match exactly. MSBuild include/exclude isn't very forgiving, so make sure your patterns match.\r\n\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/d59be61006d78d507dea07a9779c3c4103821ca3/build/repo.targets#L10\r\n\r\nFYI- checkout https://github.com/aspnet/BuildTools/blob/master/files/KoreBuild/modules/vstest/module.targets and https://github.com/aspnet/BuildTools/blob/master/files/KoreBuild/modules/vstest/Project.Inspection.targets to see what KoreBuild is doing under the hood."""
13245,215805654,b'@Eilon Do we need additional approval for this NTS package?'
13245,215812204,"b'There is no need to add this. Just create a new provider-specific options builder in the provider-specific fixture, see NorthwindRowNumberPagingQuerySqlServerFixture'"
13245,216002972,"b'Ah thanks, I had a feeling I was over-complicating things.'"
13245,216069934,b'@natemcmaster Any way to do the following on the agents?\r\n\r\n``` sh\r\n# linux\r\nsudo apt-get install -y libsqlite3-mod-spatialite\r\n\r\n# osx\r\nbrew install libspatialite\r\n```'
13245,216100439,b'Add #if !Test21'
13245,216100463,b'Add #if !Test21'
13245,216100501,b'Add #if !Test21'
13245,216100524,b'Add #if !Test21'
13245,216394699,"b""Yup, every version of every package, that way we get notifications in the future if there's a specific issue with the specific instance.\r\n\r\nI registered this one.\r\n\r\nBTW new automated registration is coming soon. That way when I'm out sick (like last Friday) there will be a robot to do my job \xf0\x9f\x98\x84 """
13279,216466347,b'Why 3163 here?'
13279,216467315,"b""Because it's a bigger prime."""
13279,216471780,b'If you want to reduce `warningsConfiguration` hash code impact on collisions you can use `3` for the previous two as they are just bools and use a bigger prime for the last one'
13279,216473914,"b""Like `1073742113`, it's just below `2^31`"""
13279,216480356,b'Will do.'
13293,216832223,b'Obsolete this and the attribute name'
13293,216832316,b'GetUnderlyingStoreType too'
13259,217090046,"b'""when performing key comparisons"" isn\'t right.'"
13308,217260455,"b""Don't we need to call `Convert.ChangeType(value, unwrappedType);` as well if `unwrappedType` is different from the underlying type (e.g. int enum mapped to a byte) ?\r\n\r\nAlso do we use `Convert.ChangeType` anywhere else in the code that might need the enum handling this as well? If so extract extension method"""
13308,217456090,b'Will do some further investigation into what exactly is needed and if it is needed elsewhere.'
13294,217092542,"b'Missing case: If there are multiple startup projects in the current directory, it should throw.'"
13294,217093142,b'Ditto. (throw when multiple)'
13294,217093575,b'Only use `project` when there are no startup projects.'
13113,215752417,"b'Format should be G17 instead of R.\r\n> Note that, when used with a Double value, the ""G17"" format specifier ensures that the original Double value successfully round-trips. This is because Double is an IEEE 754-2008-compliant double-precision (binary64) floating point number that gives up to 17 significant digits of precision. We recommend its use instead of the ""R"" format specifier, since in some cases ""R"" fails to successfully round-trip double-precision floating point values. \r\n\r\nRef: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings?view=netframework-4.7.2#GFormatString'"
13113,215755112,"b""I tried to do this in the first place but it would break some tests so I left it as `R`. I'll implement it and see which tests fail and get back to you with the results. """
13113,215755913,b'Interesting data point especially the example of 6E-14.'
13113,215759836,b'These are some results\r\n\r\nOriginal | G17 | R | Covered by test  \r\n---------|------|-----|----\r\n6E-14    | 5.9999999999999997E-14 | 6E-14 | yes\r\n0.84551240822557006 | 0.84551240822557006 | 0.84551240822557 | no\r\n4.2 | 4.2000000000000002 | 4.2 | yes'
13113,218976059,b'We discussed in the team and decided to go with G17 format.'
13113,218976184,b'@Matthiee - Can you update PR?'
13371,219004679,"b""The generic parameter should not be `TEntity` since it's not necessarily an entity. I would use just `T`. @divega?"""
13397,219927536,b'Might make these tests harder to use for providers without spatial support.'
13397,219936873,b'Will move as discussed.'
13396,219916171,"b'Not sure if this should be `"".cs""` or `""C#""`. I\'d like to standardize on `""C#""` since that\'s what gets flown in from MSBuild.'"
13396,219917648,"b'Elsewhere, I think the parameter is just called `langauge` (to match the MSBuild property name)'"
13396,219921520,"b'Wow, this gets ugly fast. Here\'s the code we\'d need to support M.\r\n``` csharp\r\nnew WKTReader(\r\n        new NtsGeometryServices(\r\n            new PackedCoordinateSequenceFactory(\r\n                PackedCoordinateSequenceFactory.PackedType.Double,\r\n                dimension: 4),\r\n            NtsGeometryServices.Instance.PrecisionModel,\r\n            srid: 4326))\r\n    .Read(""POINT (0 0 0 0)"")\r\n```'"
13396,219923775,"b""\xf0\x9f\x98\x84 That's how this class started out. Glad to see it like this again."""
13396,219936406,b'C# is good; will change.'
13396,219936458,b'Will do.'
13396,219936590,"b""As discussed, let's not support M for now. :-)"""
13396,219938388,b'Looks like `WKTReader` supports prefixing the string with something like `SRID=4326;`'
13325,217568214,b'Make this static'
13325,218568943,b'We could possible remove `AS query` now'
13325,219913685,"b""Removing it doesn't change the shape of the result, it just uses the alias from the query."""
13325,219917731,b'But we could still do it.'
13325,219994422,"b'It wouldn\'t change shape of result but it would lift inner json to higher level. If the `_underlyingEnumerator.Current` is of type `Jobject` already then we can avoid call to `Current[""query""].ToObject()`'"
13325,220014454,b'Casting instead of calling `ToObject()` seems to take the same amount of time. `ToObject()` is probably optimized for this already.'
13325,220014957,b'We might be able to see some difference if we actually stream the results one by one instead of calling `ToObject<List<JObject>>()` above'
13408,220005556,b'This is a pattern used by the SqlClient types--the Value property will give you the CLR equivalent. Using to make `SqlBytes` log better.'
13408,220008440,b'Curious: when is SRID -1?'
13408,220268941,"b""The default geometry factory creates them like this. I'm not sure of the reasoning behind it since it's invalid in most other spatial systems."""
13427,221355759,"b'@maumar Is there any way to not generate it like below on SQLite? (caused by `BooleanExpressionTranslatingVisitor`)\r\n``` sql\r\nCASE\r\n    WHEN Distance(""""e"""".""""Point"""", @__point_0) <= 1.0\r\n    THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT)\r\nEND\r\n```'"
13427,221390212,b'Filed #13444'
13440,221706351,"b'Use `Reference(expression.Type)`, not `.ShortDisplayName()`.'"
13440,221731370,b'ditto'
13440,221732349,b'ditto'
13467,222030988,"b'This was a workaround to allow us to build 2.2 with a 2.1 SDK. By removing this, EF devs will need to have a 2.2 SDK installed and have VS >= 15.8.'"
13467,222043508,b'This should be okay. @bricelam?'
13468,222086428,"b""Use 'if' for better perf"""
13455,221683906,b'Rename `Validate` to `FinalizeModel`'
13455,221689589,"b'Was thinking we should not do this until 3.0, since even though it is internal code we know people are calling it.'"
13455,222087917,b'All other calls to `IModelValidator.Validate()` should be removed'
13455,222099887,b'Fixed'
13455,222100156,b'Remove'
13455,222100236,b'Remove'
13455,222100646,b'And search for other usages'
13455,222102293,"b""This one is still needed. The TestModelSource doesn't add the validator as a convention. It's only when the ModelBuilder is created externally from the context using the static `CreateConventionSet` method that the validator is added as a convention."""
13455,222127361,b'Move this to `CreateConventionSet`'
13469,222094778,b'Do we have a check for Empty WhenThenList?'
13469,222095410,b'Bit counter intuitive to have `WhenThen` but not expression type. If it is expression type then this logic can be moved to itself.'
13469,222108909,b'Will validate types too.'
13469,222120898,"b""Fun fact: The SQL spec actually allows for multiple tests, but I don't know of a database that implements it.\r\n\r\n``` sql\r\nCASE Name\r\n    WHEN 'Brice', 'BRICE', 'brice' THEN 'me'\r\nEND\r\n```"""
13469,222395528,"b'""Result type of \'{whenResultType}\' ..."" ? Using when as a noun seems bit weird (ESL though, so I might be wrong ;))'"
13469,222401430,"b'also add IPrintable, for the pretty-printing hook'"
13469,222402389,"b'Will reword. Maybe something like ""The result type \'blah\' of a when clause...""'"
13305,217095700,b'You can use `MockAssembly` to keep make these tests more targeted (i.e. not invoke all the configurations every test)'
13305,217097763,b'Consider using our `GetConstructibleTypes` extension method.'
13305,217106229,"b""Just wondering if I'm missing something: Given that these fields are static, is there any problem with test parallelization?"""
13305,217107412,"b""Not parallelization--xUnit.net serializes tests within the same class (technically speaking, within the same collection).\r\nBut there could ordering issues. Reset them in the test class's constructor."""
13305,217107631,b'Thanks for the explanation. I figured I was missing something. I always seem to forget that about xUnit!'
13305,217127148,b'comment typo: constructor'
13305,217283807,b'Thanks for pointing this out!'
13305,217290710,"b""After some thinking, I'll get rid of those fields all together, and just use and check for different property configuration in each method. Static is just confusing."""
13506,222885574,"b'Remove public class, Inline initialize the expression visitor and visit it wherever needed. To make it DRY you can create a private static method inside RelationalResultOperatorHandler.'"
13506,222885684,"b'Make it private Visitor inside the resultoperator handler. Optional, can make it non-generic and hard code selectexpression. generic version may never be needed. YAGNI'"
13506,222885721,b'is operator takes care of null so you can remove this check'
13506,222885759,b'Add test for all 4 result operators which requires this processing.'
13504,222789734,b'@divega @ajcvickers - Open questions:\r\n1. Should we keep `EFCore` prefix & `()`. Formatting looks bit weird in multiline case.\r\n2. Should multiline tag with empty line print out `--` or just skip printing anything entirely?\r\n3. Do we need to make SingleLineComment `--` provider overridable? Does any provider have a different default?'
13504,223081109,"b""I'd add a space between the token and the text."""
13504,223081648,"b""I like 2 as is.\r\nYes, do 3. I'm sure some obscure database decided to use `//` instead. \xf0\x9f\x98\x89"""
13504,223108322,b'```\r\n-- First tag\r\n--\r\n-- More first tag\r\n\r\n-- Second tag\r\n-- more of second tag.\r\n\r\nSELECT *...\r\n```\r\n'
13536,223440055,b'Test should add `FakeDbContextOptionsExtension2` and verify that `IsConfigured` returns true.'
13523,223159241,b'nit: formatting'
13523,223160651,"b'consider using this in other places in the existing code, there are some in correlated collection and include compiler'"
13523,223160963,"b""I wouldn't know how to write a test that would be fixed by this"""
13523,223165009,b'HasParameterRoot?'
13523,223431287,b'We should put this in ExpressionExtensions rather than here. That is the pattern we follow for all other methods.\r\n\r\n---\r\nIn reply to: [223160963](https://github.com/aspnet/EntityFramework/pull/13523#discussion_r223160963) [](ancestors = 223160963)'
13523,223436907,b'Do we need to override whole thing here rather than using from Specs.Tests?'
13523,223436956,b'Other tests are not worth verifying SQL?'
13523,223442618,"b'Yes, because of https://github.com/aspnet/EntityFrameworkCore/issues/13441'"
13523,223443098,"b""Yes, we don't currently translate much, so these asserts would need to be updated anyway when we do,"""
13533,223446692,b'Should this be `WithDetailedErrorsEnabled` just like `WithSensitiveDataLoggingEnabled`?'
13533,223469935,b'`WithDetailedErrors` -> `WithDetailedErrorsEnabled`'
13536,223516677,b'Other test already does this.'
13522,223154416,b'You can remove `RemoveConvert` calls since the visitor will go inside it anyway.'
13522,223154730,"b'Can you just align them? like use Average with AssertAverage.\r\nthat would be these 4 tests.\r\nAnd it would be super useful to have 2 more tests, which combines different operators. Like in above test instead of sum/sum, use min/max.'"
13522,223154795,b'Move this class and method at the bottom of the file.'
13556,223848231,"b""Change required. Please don't use Take without OrderBy.\r\nJust add `OrderBy(c => c.CustomerID)` before doing Take(3) in all newly added tests please"""
13556,223849109,"b""That makes sense...I should've thought of that :)\r\nShould I be doing new Pull Requests each time like I've been doing, or is it ok to have multiple commits in a single PR?"""
13556,223853057,b'Add multiple commits in single PR. I will squash them.'
13556,223860002,"b""Cool.  I didn't know you could do that.  \r\nChanges made."""
13558,223881915,b'Also add on lines 616 and 845 (or better yet extract a method)'
13558,223884011,b'Updated.'
13555,223932061,b'Ordering of parameters in above 2 methods are painful to eyes. \xf0\x9f\x98\x9d '
13555,224156154,"b""lol, `provider` is first in the top one because it is essential to loading those services. It's last in the second one because it's just metadata used to filter out some services. It fits my personal conventions of parameter ordering perfectly. \xf0\x9f\x99\x83"""
13562,223915233,"b""turns out we already had some tests for this scenario, but the interesting part of the data was filtered out, because it doesn't quite work for L2O - added MaybeDefaultIfEmpty helper method that works for null inputs"""
13583,224279226,"b'unrelated, defensive check. I found this possible problem when debugging all sorts of invalid QMs'"
13599,224604164,"b""I think there's an implicit conversion available from `string` to `SqlString`..."""
13599,224604402,"b'Oh I\'d much prefer `SqlGeometry.STGeomFromText(""wkt"", srid)`'"
13599,224605405,b'(And *I* actually know what those bytes mean \xf0\x9f\x98\x89)'
13599,224605789,b'NB: Use `.AsTextZM()` to get the right WKT value.'
13599,224606208,"b'@bricelam There is, but then I would have to figure out how to represent and translate that in the expression tree, and so for now I went with something super simple. Same for implicit conversion from `SqlBytes` to `byte[]`.'"
13599,224606481,"b""I wasn't sure if anything other than serialize/deserialize would be lossy, but I can change to this if it is safe."""
13599,224607672,"b'Yep, this is non-lossy and human-readable.'"
13599,224608297,b'K. Will send out a new PR with the change.'
13585,224302400,"b'Does ""No matching discriminator values where found."" sound clearer to you?'"
13463,222125908,"b'@divega also mentioned setting a few things ""by convention"":\r\n* **InitialCatalog** to the `DbContext` type name\r\n* **MultipleActiveResultSets** to true'"
13463,222367410,b'MARS makes sense \xe2\x9c\x94\xef\xb8\x8f\r\n\r\nReg. InitialCatalog convention:\r\nShould I implement this on the UseSqlServer overload or in a new UseLocalDB overload?\r\n@divega mentioned this in conjunction with an additional overload (UseLocalDB).'
13463,222643427,b'Mars is enabled by default now.\r\nPlease let me know your thoughts regarding my other question.'
13463,224338418,"b'I am having second thoughts on setting MARS by default. It is true that doing so can make a few things behave more nicely, there is also value in leaving the choice to the provider and requiring the application to explicitly set it otherwise.\r\n\r\n@ajcvickers @bricelam any opinion on this?'"
13463,224357994,"b'@divega Regarding your 1. concern (performance):\r\nWell, there is always the possibility to register `DbContextOptions` as a singleton by using the overloaded  `AddDbContext` with the optionsLifetime parameter. (Which should have been the default IMHO, but that`s another story \xf0\x9f\x98\x84  )\r\n'"
13463,224485345,"b""> Reg. InitialCatalog convention:\r\nShould I implement this on the UseSqlServer overload or in a new UseLocalDB overload?\r\n\r\nI think they are orthogonal, but please give us a chance to gather our most current thoughts on both. UseLocalDb isn't very useful IMO."""
13463,224512402,"b""@divega I think MARS should be off by default, especially if we start buffering by default in more places so that it just works. Buffering by default so MARS is not needed also makes the experience better on databases like Postgres that don't have MARS.\r\n\r\nWith regard to per request ues, @davidroth is right that the options are scoped by default. We did this because a) it enables things like different connection strings per request, b) because the overhead (at the time) was minimal, and c) because the optimization to make it singleton is easy to do if this is perf critical."""
13611,225693853,b'Could you just call `IsSameAs` instead of the clause after the `||` ?'
13634,225725712,b'No `e`?'
13634,225733767,b'Oops. No wonder that passes!'
13646,225735278,"b""Hmm... Personally, I'd just make the next `if` an `else if`."""
13646,226039465,b'Agree :)'
13653,226081703,b'else if are on same line.\r\nMove comments inside the block after if'
13635,225347608,b'double cast is hacky but seems safer than messing with the constraint on  TCollection. Thoughts?'
13635,225675275,b'Consider refactoring these checks to not repeat the same code twice in the same method.'
13635,225676125,"b'Does `where TCollection : class, IEnumerable<TElement>` work without the double cast?'"
13635,225677115,b'nit: extra space'
13635,225679609,"b'`IEqualityComparer<>` is contravariant, so you can just use the existing non-geneneric `ReferenceEqualityComparer`'"
13635,225729785,b'nope'
13635,225730057,"b'""cant convert from Hashset<T> to TCollection. Alternatively, types don\'t match for the line below: setterDelegate(entity, collection)'"
13635,225731248,"b'tried that at first: ""can\'t convert from ReferenceEqualityComparer to IEqualityComparer<TElement>""'"
13635,225734670,b'I \xe2\x9d\xa4 [Trailing Whitespace Visualizer](https://marketplace.visualstudio.com/items?itemName=MadsKristensen.TrailingWhitespaceVisualizer)'
13635,225735966,b'![image](https://user-images.githubusercontent.com/1528107/47052430-2522c700-d15d-11e8-8db4-bd04b239b332.png)\r\nAuto-remove white spaces.'
13635,225736055,"b'DRYing the second condition is slightly less performant because now we always compute the check for OHS, even when the logic short-circuits after finding HashSet (most of the cases, presumably). Thoughts? @ajcvickers '"
13635,225743973,b'Where do you get that?'
13635,225744272,b'You might need to add `where TElement : class `'
13635,226010431,b'Consider a local method so the code is not duplicated.'
13656,226097501,b'nit: add `isIndexProperty:` to the calls'
13656,226047901,b'I wonder if we should check whether there is an appropriate indexer earlier? Maybe in the call to `AddIndexedProperty()`? We will still need to check here but that would give the user feedback earlier rather than waiting til they actually use the property getter.'
13656,226048338,b'Maybe add a test that if there is no indexer we see the appropriate exception?'
13656,226111852,b'Will do.'
13656,226111953,b'Will not do this now. Will add later if needed.'
13656,226112036,b'Will add.'
13656,226116874,"b'Actually yes, we should supply this propertyInfo as the memberInfo in `AddIndexedProperty`, but then we would need to review the usages of `GetIdentifyingMemberInfo()` to make sure that two or more indexed properties are handled correctly, since they would share the same `PropertyInfo`'"
13648,226128689,"b'we already have (a private) one of those in RelationalResultOperatorHandler, consider reusing this in all those other places'"
13648,226143169,"b'Oops, I meant to but forgot to remove it.'"
13648,226484695,"b""Do we need to check count? Shouldn't the count be same?\r\nIt would simplify to typeMappings?[i] ?? parentTypeMapping;"""
13648,226485177,b'Could DRY this code'
13648,226485273,b'And this'
13648,226485385,"b'Just being extra forgiving to providers.They may give us an empty collection, or only the mappings for the first *n* arguments.'"
13648,226486034,b'Looks like `FindProperties()` is only used to do this now. Will hid behind a more specific extension method.'
13648,226489254,b'Hmm... going to repeat myself on these ones to keep the code simple and clear.'
13672,226431533,b'Use `DeclaringType.GetRuntimeProperties()` for perf'
13672,226432101,"b""I don't think it's worth to parameterize `objectType`"""
13672,226734690,b'I think you mean `DeclaringType.ClrType.GetRuntimeProperties()`. Will do.'
13672,226744604,"b'No, I mean `DeclaringType.GetRuntimeProperties()` https://github.com/aspnet/EntityFrameworkCore/blob/23512622b34dd3b8a0a4bf70596421564809b34a/src/EFCore/Metadata/Internal/TypeBase.cs#L101'"
13679,226748396,"b""There's probably a way of making the graph do all the ordering, but it might be less readable."""
13679,226750216,"b'I think for RTM, localized would be safer fix.\r\nThe logic is quite complex here. @bricelam to determine if we want to change this as you suggest above.'"
13679,226750645,"b""I don't think we should change it at this point"""
13681,226530109,b'nit: Naming style'
13705,227069330,b'Can you move this test to one of the existing test bases? Like `SimpleQueryTestBase`? Just use it in Where clause to have small result set.'
13717,227101346,b'Move to top?'
13722,227179525,b'add virtual for those'
13722,227179870,b'add null checks for args'
13722,227184319,"b'eww, reflection'"
13722,227185646,"b""non-virtual. What is the use-case you think, we should allow this to be overridable? Further it's getter-only, ctor set."""
13722,227186319,b'One should not complain about reflection on async code path :trollface: '
13722,227186395,b'Sync path also uses reflection.'
13697,227075713,b'What about LazyLoadingEnabled?'
13697,227101118,b'Good point. Will do.'
13697,227462598,b'@smitpatel Added LazyLoadingEnabled.'
13704,226879132,"b""Here you haven't visited IfTrue/IfFalse part of the expression.\r\n```suggestion\r\n            return Visit((bool)returnValue ? conditionalExpression.IfTrue : conditionalExpression.IfFalse);\r\n```"""
13704,227069878,"b'I thought about this more in connection of the test which changed. This is actually incorrect fix.\r\nAll we should do here is to check if conditionalExpression is evaluatable then do tryextractparameter. Similar to how ArrayIndex is working and you are applying fix for coalesce.\r\n\r\nThe reason is, the test whose sql is changing, by effectively trimming tree of range variable, now we have 2 different trees for different values of same parameter, which causes us to recompile the tree again, effectively defeating the purpose of parameterization.\r\n```suggestion\r\n        protected override Expression VisitConditional(ConditionalExpression conditionalExpression)\r\n        {\r\n            if (_partialEvaluationInfo.IsEvaluatableExpression(conditionalExpression)\r\n            {\r\n                return TryExtractParameter(conditionalExpression);\r\n            }\r\n            \r\n            return base.VisitConditional(conditionalExpression);\r\n        }\r\n```'"
13704,227097605,"b""You don't need to make change of flag anymore. All such tests should remain as is."""
13704,227128069,b'Can you also move this to `SimpleQueryTestBase`?'
13496,227533099,b'Convert LINQ to for loop for better readability. '
13496,227533277,b'Why such filter?'
13496,227533389,"b'If any of the property change during visit, you need to reconstruct this expression.'"
13496,227533520,b'SequenceEquals comparison.'
13496,227533601,b'foreach to get hash code'
13496,227534167,b'You cannot pass the MemberExpression as is. You need to visit them. You are printing based on member names. What if the property is mapped to a different column name on database side. This code falls apart on that.'
13496,227534362,b'If you do translation write then you can use GenerateList method.'
13496,227534553,"b""We don't put hardcoded `[]`. Check VisitTable method to see how we delimit the table names."""
13496,227534773,"b'Change variable names, make this `_freeTextMethodInfo` and rename existing ones to `_freeTextStringMethodInfo` and likewise for others.'"
13720,227181619,"b'Call this instead.\r\n\r\n```suggestion\r\n                        : DependentEntityType.Builder.GetActualProperties(oldBuilder._foreignKeyProperties, null);\r\n```\r\n\r\nAlso for `_principalKeyProperties`'"
13720,227186299,b'Extra indent'
13720,227187708,b'ConfigurationSource.DataAnnotation'
13720,227188072,b'Something like `oldNamedDependentProperties`'
13720,227188278,b'Move this to go after `dependentProperties`'
13720,227189296,"b""Change this into an assert inside the `if`, there shouldn't be any cases when both are specified."""
13720,227189833,b'Added ` Debug.Assert(dependentProperties == null || oldNameDependentProperties == null); ` before this line.'
13720,227190354,b'Move this and `HasForeignKey_infers_type_for_shadow_property_when_not_specified` to a new file - `EFCore.Tests\\ModelBuilding\\ModelBuilderTest.Other.cs`. Tests from `UnmappedTypesTest` can also go there.'
13720,227190600,b'You should be able to remove this `dependentProperties == null` now'
13720,227201680,b'Cannot move `HasForeignKey_infers_type_for_shadow_property_when_not_specified` since it uses property method without specifying type. But I will move other tests.'
13720,227532536,"b""You don't need to use the `TestModelBuilder` in these tests"""
13695,227585431,"b""You shouldn't need a null check here. Visit(null) returns null;"""
13695,227587341,"b'Thanks, I was throwing code at it to fix ""must be reducible node"" but forgot to take this back out.'"
13734,227617740,"b'this translation looks weird but is actually correct, consider the truth table breakdown in RelationalNullsExpandingVisitor.ExpandNullableNotEqualNullable'"
13734,227620517,"b'this should be optimized out to nothing, will do in another PR when I add more complex optimizations'"
13734,227951119,b'Use else and remove this return statement'
13734,227951341,b'Convert to switch statement'
13734,227951609,b'Is there a specific reason we are not calling into base? Calling base would cover this case automatically and may be for other expression types too'
13734,227952182,b'Move it outside of if to make it DRY'
13734,227952216,b'Also move it to very first\r\n\r\n---\r\nIn reply to: [227952182](https://github.com/aspnet/EntityFramework/pull/13734#discussion_r227952182) [](ancestors = 227952182)'
13734,227952635,b'So complex case works but basic fails :trollface:'
13734,227953114,b'Could we do simple optimization that a != a => false\r\n\r\n---\r\nIn reply to: [227620517](https://github.com/aspnet/EntityFramework/pull/13734#discussion_r227620517) [](ancestors = 227620517)'
13734,227957777,"b'Not sure how you should write it but better way to represent this is\r\nSince, `a != b` both of them being null means false, so `(a != b) || (a is null && b is not null) || (a is not null && b is null)`'"
13734,227962027,"b'when both a and b are null this would return null, we want to have only 1s or 0s as the result of rewrite, since its the ""full"" expansion - getting rid of nulls so we don\'t need to worry about null semantics further up the pipeline.'"
13796,229012445,"b""Interesting. [This code](https://github.com/aspnet/EntityFrameworkCore/blob/release/2.2/src/EFCore.Design/Migrations/Design/MigrationsCodeGenerator.cs#L130-L146) gets the namespace of the instance's type, but that's never an interface. At runtime, there's no way to get that interface type.\r\n\r\nShould we only use the full name here if it's an interface?\r\n\r\nShould we ever put the interface here?"""
13783,228694277,b'Distinct? No need to load them twice. Especially when target and startup are the same.'
13770,228373166,b'Store the Random in a static field instead'
13770,228373511,b'The checked in tests should use a hard-coded seed.\r\n\r\n---\r\nIn reply to: [228373166](https://github.com/aspnet/EntityFrameworkCore/pull/13770#discussion_r228373166) [](ancestors = 228373166)'
13770,228373567,b'Verify the results?'
13770,228375189,b'Ideally mutators should try to not generate invalid queries'
13770,228375553,"b""We'll probably need to flow through the test name by using CallerMemberNameAttribute or getting it from xUnit"""
13770,229053743,"b""will do that in the future PR. Our current result asserter is not smart enough to handle most of the cases and it's significant work to implement it."""
13789,228725187,b'@divega Can I get a fwlink?'
13789,228725188,b'@divega Ditto. (Same section but in the CLI docs)'
13789,229069613,b'@bricelam https://go.microsoft.com/fwlink/?linkid=2034705'
13789,229089536,b'@bricelam https://go.microsoft.com/fwlink/?linkid=2034781'
13789,229157452,b'Thanks!'
13803,229416575,b'Is this covered anywhere?'
13803,229430244,"b""It wasn't being verified, just a leftover from an ad-hoc test"""
13816,229476967,b'Unintentional'
13816,229477787,b'Unintentional'
13816,229478341,b'Where did they go?'
13816,229478853,b'Could this break providers?'
13816,229480555,"b""Didn't we introduce a new base type here?"""
13816,229480972,b'Unlikely for relational providers'
13816,229481394,"b'Ah, new (Internal) base type'"
13816,229484079,b'False positive.'
13816,229484385,b'False positive.'
13810,229412306,"b""Ideally, this would take an open connection to let you do things like #10487. Unfortunately, it will probably require some breaking changes to other Scaffolding code so we'll have to wait for 3.0."""
13810,229455262,"b""I'm concerned that I didn't have to add an exception for this..."""
13810,229464297,"b""@ajcvickers Looks like we never updated our baselines to 2.1. This explains why other regressions weren't caught by the tool."""
13810,229465290,b'Possibly attempted in PR #12349 but fell through the cracks'
13810,229469026,"b""@bricelam Luckily we haven't shipped 2.2 yet! Can you update the baselines so we can double check there were are no breaks that we missed in API review?"""
13810,229475988,b'On it'
13810,229518210,"b""That's better."""
13802,229462925,b'Extract common code in `IndexedPropertyGetterFactory` and `IndexedPropertySetterFactory`.\r\nUse `entityType.GetRuntimeProperties()` for better performance.'
13802,229468605,b'OK. Will do.'
13802,229508519,b'consider using AssertQuery<T> test infrastructure for this - element asserter for city should be updated (they reside in GearsOfWarQueryFixtureBase class)'
13802,229510425,"b'add some more tests - projection, order by, join (using indexer in the join key), group by indexer property. It would be nice to also  test correlated collection but for that you would need to add another indexer on entity that is the many side of a navigation, e.g. gear or mission'"
13802,229510974,"b""Many of these things won't work yet e.g. projection is the `ValueBuffer` queries I mentioned I hadn't gotten to yet. I'd like to get this simple functionality in and then improve it."""
13802,229513585,"b""I'd like to do this in the next check in. At the moment this is just testing a very simple entity query."""
13802,229890236,b'@maumar updated to use the `AssertQuery` infrastructure in #13845'
13845,230132609,"b""we usually don't put comments like that in tests. it relatively easy to figure out what the test does and the test file is already huge ;)"""
13845,230137983,"b'Instead of assigning here, re-create the newExpression here so that rest of code can do proper binding automatically'"
13845,230138711,"b'Just inline the property name rather than putting like this. But to verify the scenario where query replaces the variable correctly,\r\nadd test like this with name, Can_query_on_indexed_properties_when_property_name_from_closure\r\n\r\n---\r\nIn reply to: [230132609](https://github.com/aspnet/EntityFramework/pull/13845#discussion_r230132609) [](ancestors = 230132609)'"
13845,230138780,"b'and remove comments\r\n\r\n\r\n---\r\nIn reply to: [230138711](https://github.com/aspnet/EntityFramework/pull/13845#discussion_r230138711) [](ancestors = 230138711,230132609)'"
13845,230170882,b'OK. I will cave to pressure :('
13845,230172689,"b""I tried that. But I couldn't figure out an expression that would work as the `ValueBuffer` no longer has the `get_Item()` method on it. And we don't need the `newExpression` either as we already have all the information we need for the `BindMethodCallToValueBuffer` so its better just to directly call it. If it's not a `ValueBuffer` then the code will fall through as you suggest."""
13862,230502410,b'consider negative case when one of the arguments is correlated with customer'
13911,231605803,b'Should the parse and the literal generation be done explicitly with invariant culture?\r\n/cc @bricelam '
13911,231642725,"b'Wut, no trailing comma??,'"
13911,231649440,"b'Sorry about that, will amend to pass `NumberFormatInfo.InvariantInfo` to `ToString()` and `Parse()`.'"
13911,231652878,"b""Just followin' the existing style :)"""
13889,230892767,b'@divega to decide between `deregister` vs `unregister`'
13889,232000781,b'ping @divega '
13926,232104611,b'Does this have any effect? We ignore propertyInfo when property is non-null'
13926,232106802,b'Yes. [Further down the method](https://github.com/aspnet/EntityFrameworkCore/blob/bdad53567525520f6fecf2fcef13cf7f4c7298ba/src/EFCore/Metadata/Internal/ClrAccessorFactory.cs#L49) we pass `propertyInfo` in as we invoke the method we created and I need to see that `propertyInfo` for indexed properties.'
13889,232355888,"b""@smitpatel @ajcvickers by far my favorite pattern for this kind of thing is to have the Register method return and IDisposable registration object. It seems this would work here, but I am not sure about the breaking change impact. On the surface the breaking change would be greater that way, but maybe it really doesn't matter if only us use this and providers are going to have to recompile anyway?\r\n\r\nIf we need to add a method, I have a super small bias towards Deregister, but Unregister seems to be more popular in the internet. """
13889,232361618,"b""For now we are adding method. We don't know what will be the shape and pattern in new pipeline anyway."""
13889,232366046,"b'I am ok with that, for now. Do we have an issue tracking revisiting buffering? I would add a note there on revisiting this API. '"
13889,232656597,b'I like the idea with the `IDisposable` de/unregister object. Like a subscription in `Reactive Extensions`.'
13950,233248843,b'Nothing is awaiting this method.'
13950,233248871,b'Nothing is awaiting this method.'
13950,233248984,b'Oh and no one is awaiting this method either.'
13950,233249176,"b""I'll take a look, I just did a find & replace all over the repos"""
13950,233265831,b'The EF samples may or may not be functional--most are just used to add code to the docs. \xf0\x9f\x98\x89'
13981,234745089,b'unrelated question: Why this package version uses - after preview rather than . like others?'
13981,234749759,"b""I don't know. @vitek-karas @mmitche why are core-setup packages using SemVer1.0 when the rest of dotnet repos have started using semver2.0 versioning?"""
13981,234771532,b'@sdmaclea - can you please take a look at the versioning of `Microsoft.Extensions.DependencyModel`?'
13981,235065284,"b""@natemcmaster core-setup hasn't adopted arcade yet."""
13867,230474948,b'Should this be called `SqliteBlobStream`?'
13867,230847688,b'@ilmax We try to match System.Data.SQLite names where it makes sense to ease the transition.'
13867,233258866,b'Why disallow non-BLOBs?'
13867,233261015,"b""In theory, if we had all the values of the primary key or a unique constraint we *could* SELECT the rowid. But let's not. \xf0\x9f\x98\x89"""
13867,233262027,b'Should we cache this so we only have to compute it once per statement/result set? Doing this might make enabling GetBytes() and GetChars() more feasible.'
13867,233263118,b'Can make the one in SqliteConnection `internal`.'
13867,233264259,"b""This tests too much--failures are less meaningful. I'll split these out into a new SqliteBlobTests class as I review (and possibly add to) the coverage."""
13867,233266282,b'It probably makes sense for writable to have a default value of `false` here (and below)'
13867,233268303,"b'I removed the condition and added more tests around it (I was not sure if sqlite3_blob_open works on non-BLOBs, but they are handled as TEXT).'"
13867,234402964,b'This should throw if writable is true'
13867,234413865,b'It throws now.'
13867,234830833,"b'Oops, I forgot to remove these comments...'"
13867,235100060,"b""I'm not sure about this overload anymore... I'll discuss with the team."""
13867,235100208,b'...or maybe `true`.'
13867,235153500,b'Filed #13987'
13867,235153625,b'Will discuss when we review the API'
13988,235473157,b'Remove this test. If you want to add a functional test then look into gearsofwar query test base. That model has DateTimeOffset column'
13988,235823553,"b""@smitpatel I've removed that query test and added a GearsOfWar functional test. Let me know if this is what you were looking for. Happy to remove the tests entirely, just felt it was worthwhile having some form of test for the literal parameters."""
13988,236353135,b'Also assert the sql generated in SqlServer specific functional test.'
13988,236460567,b'Thanks @smitpatel. Still getting my head around the layout of the unit tests. Let me know if you want anything else added.'
14018,236789421,b'Nit: Use C# pattern matching to make these more terse?'
14022,236829251,b'Expected column type will never be aliased type.'
14022,236829480,b'This test may be redundant. not sure'
14022,237612228,b'Updated to verify that not-by-convention types are set.'
14022,237612466,b'Verified not redundant'
14034,237403497,"b""Should'nt this be changed to `bool readOnly = true`?"""
14034,237541117,b'I wanted to match the product. For most of the tests the value doesn\xe2\x80\x99t matter. I made the value explicit where it mattered.'
14057,238044345,b'Could add a `FindSharedTypeEntityType(string name)` method on `Model` and use that instead of the above?'
14057,238044517,b'Maybe this should be `Singleton`? Should we allow different contexts to do this in different ways?'
14057,238039962,b'Wondering about making this a Chain-Of-Responsibility pattern by adding a `NextFinder` getter/setter. That way if you are using multiple different patterns of identifying a Shared-Type-EntityType from instance in your context you can set up multiple of these chained together in the order you want to apply them.'
14057,238084366,"b""I don't think that would be necessary, this logic shouldn't be replaced or extended and it shouldn't need to change often. Furthermore it's in a perf-sensitive part of the code and keeping all the patterns for finding the EntityType in one class will be slightly faster."""
14057,238090152,"b""This doesn't need to be writable"""
14057,238090273,b'`_model.FindRuntimeEntityType(entity.GetType())` can be moved into the `SharedTypeEntityFinder` implementation and it could be renamed to `EntityTypeFinder`.\r\nAre you planning to implement other type finding strategies? Is there a tracking issue that lists them?'
14057,238156899,"b'You could just add `EntityTypeName` to `InternalDbSet`, no need to add another type.'"
14057,238158274,b'This should be readonly'
14057,238160018,b'`Singleton` should be fine'
14057,238357735,"b""I can see your point. Don't agree that it shouldn't be replaced or extended. I'd be really surprised if different users of this functionality are completely happy with just the one way of doing it. It was not even agreed among us that the index property was the only way to go. That said I take your point on perf (though we do cache the result of course) and maybe we could wait on Chain-Of-Responsibility til we get feedback from customers."""
14057,238362928,b'This was just following the same pattern as used for `IsQueryType`. See `Model.AddQueryType()` and then `AddSharedTypeEntityType()` immediately below it.'
14057,238363065,"b""You mean add `EntityTypeName` to `InternalDbSet`, then add a constructor that takes the name, assign to `EntityTypeName` in that constructor and later use the fact that `EntityTypeName` is set to distinguish when trying to find the `EntityType`? That would be possible. It's true I didn't like having to make various things protected. to make this work But this seemed cleaner to me - during e.g. debugging I can immediately see what this is representing - but I'm open to the possibility. """
14057,238358942,"b'I actually thought was a nice feature, It just allows you to pick a different argument to the indexer - other than ""\\_\\_EntityTypeName\\_\\_"" - which I kind of picked at random.'"
14057,238365397,"b""Not sure I'm following. This service is meant to find _Shared-Type_ EntiyTypes only. I did have an idea for another one of those - which is for a CLR-type which is shared, and has an indexer for the other properties, but could have a known, fixed-name CLR-property for the EntityType name. But I hadn't discussed that with @ajcvickers or @divega yet and I seem to remember one of them had a 3rd idea on how we should do this. Basically I can see people wanting to identify Shared-Type entities in various different ways and wanted to make it as easy as possible to write your own service if you wanted to.\r\n\r\nBut I did not intend to change or make into a service the existing functionality to find EntityTypes using their CLR-type. There are 6 methods already existing on `Model` which do that in various different ways. Did you want to encapsulate all of that somehow?"""
14057,238376370,"b'One would need to do that in the constructor, allowing to do it afterwards could easily lead to inconsistency in the model.'"
14057,238377901,b'In general I would like to avoid having to special case Shared type entity types as much as possible and here this can by accomplished by making the service look for non-shared types as well.'
14057,238378978,b'You could also implement the strategy that uses a normal property and have the name passed in the constructor or a overridable readonly property.'
14057,238379254,"b""Also since it's overridable derived classes can just replace it with a different value."""
14057,238380011,"b'Again, I just want to reduce special casing and handling this in one class would result in less code and less code means there are fewer places to introduce bugs.'"
14057,238381091,"b'Yes, we would need to change `IsQueryType` too. Changing the value for either after the type is already in the model could leave it in an incosistent state, since it would avoid the checks done in `AddSharedType` and `AddQueryType`'"
14057,238442950,"b""It is true that users could get themselves in trouble if they changed the value half way through. I was just trying to make it simple - so they didn't have to write a whole new class just to change that one value."""
14057,238510515,"b""If we really want to make this simple to configure we should add sugar API that doesn't require messing with services at all, perhaps something on `DbContextOptions`"""
14067,239631397,b'Should change the test name since subquery is lifted now'
14110,239668835,b'```suggestion\r\n    <MicrosoftExtensionsDependencyModelPackageVersion>3.0.0-preview-27122-01</MicrosoftExtensionsDependencyModelPackageVersion>\r\n```'
14110,239669814,"b""Can you revert? 3.0.0-build-20181114.5 is older than what's currently in use."""
14110,239670064,"b""It's taking it from Extensions/dependencies.props ... should we fix it there too then?"""
14108,239657474,b'Why do we still need this?'
14108,239659832,b'Should rename the variable here'
14108,239663933,b'We don\xe2\x80\x99t until we test 3.0 providers on 3.1'
14108,239664174,"b'Happy to remove. lol, I thought you\xe2\x80\x99d object if I did.'"
14108,239664461,"b""We'll probably do it in a different way for 3.1."""
14120,239968182,b':trollface: '
14120,239981880,b'Expression bodies are worth it'
14131,240328009,b'Can you leave this version as is?'
14131,240328765,b'Done'
14162,241565897,b'Filed #14163 '
14177,242382228,b'Should we build both Debug and Release?'
14177,242383006,b'KoreBuild did it better'
14177,242383445,b'How do we make this work with VS? Seems bad each repo has its own copy of the SDK that may be at different versions'
14177,242384338,b'Why are we removing these from the ignore list?'
14177,242386177,b'Unintentional. Will re-exclude QueryBaseline.cs'
14177,242386647,b'Add all of them to the path?'
14177,242623803,"b""You might try adding this script to your repo: https://github.com/aspnet/AspNetCore-Tooling/blob/master/startvs.cmd. I've been in contact with the .NET SDK team about how painful it can be to dogfood new versions of the SDK. Although everyone acknowledges it's not great, there doesn't seem to be any agreement on what to do about it. So, local copies of the SDK, magic environment variables, and scripts to start VS seem to be the best we can do for now. \xf0\x9f\x98\x9e """
14177,242624528,b'It was required until 6 days ago. See https://github.com/dotnet/arcade/commit/c53e1ce277343f33810433bb3f95fe70177b7516. PR to remove this: https://github.com/dotnet/arcade/pull/1617'
14177,242629350,"b'FWIW - in other aspnet repos we stopped using conditional TFMs and have started just simply putting `<TargetFrameworks>netcoreapp3.0;net472</TargetFrameworks>` in the project file. I don\'t care much either way, but thought I\'d point out that you\'re welcome to drop the ""StandardTestTfms"" property if you want.'"
14177,242629763,"b""Double check that your files don't have `/`, `\\` or `;` in them. These characters cause problems for `WriteLinesToFile `"""
14177,242630608,b'You could copy this workaround: \r\n\r\nhttps://github.com/aspnet/AspNetCore-Tooling/blob/master/eng/Tools.props\r\nhttps://github.com/aspnet/AspNetCore-Tooling/blob/094985d867067fd245dcace70553db10e8cc1277/eng/Versions.props#L120-L123'
14177,242630882,"b'```suggestion\r\nInstallDotNetSharedFramework ""2.0.9""\r\n```\r\n2.0.9 is the latest 2.0.x runtime.'"
14177,242642920,"b""I likewise changed it, but reverted it since some of the team still like to exclude net461. Will re-consider when decide on what frameworks we're targeting in 3.0."""
14177,242645091,b'Will wait and see what other repos do. Hopefully the functionality becomes first-class in Arcade.'
14177,242681988,"b'Thanks, @jcagme!'"
14177,242687567,b'Thanks! Good enough for now...'
14177,242691627,b'Project ending with FunctionalTests are unit tests?'
14177,242691917,b'Any particular reason to remove these?'
14177,242695519,b'Clutter. Nobody else uses Roslynator. Can you disable them locally?'
14177,242695975,b'Sure.'
14177,242696277,"b'Yep. They have two other categories in Arcade (Integration and Performance), but our functional tests fall under the Unit category.'"
14177,242696341,b'I use Roslynator'
14177,242725744,b'Will keep'
14256,244410193,"b""Don't we allow the store to generate a default value?"""
14256,244411223,"b'Why not `Equals(value, defaultValue)` ?'"
14256,244411370,b'Move to bottom of the file'
14256,244412608,"b""Shouldn't we reset the store generated value too?"""
14256,244413757,"b'This line is redundant, `DiscardStoreGeneratedValues()` already does this.'"
14256,244413930,"b""Shouldn't we discard the temporary values? And throw if any hasn't been store generated?"""
14256,244415849,b'Repetition'
14256,244419894,b'Will do. '
14256,244420007,b'Hmm. Possibly--I have to write some tests for it.'
14256,244420056,b'Is that a style we use elsewhere?'
14256,244420104,"b""This doesn't reset; it just makes sure the sidecar has been initialized if it hasn't already."""
14256,244420349,"b""I don't think you can get into a state where the update pipeline succeeds and a store generated value hasn't been set where there is currently a temporary value. We're more restrictive now on when you can make a value temporary."""
14256,244420462,b'Will fix.'
14256,244420553,b'But we should discard temp values.'
14256,244421407,b'I think most of the nested types are at the end'
14256,244421672,"b'Above this the normal property value is set to the default, but if the store generated value is not the default then the newly set temporary value will not be visible.'"
14256,244429195,b'Works as long as temporary values are discarded on AcceptChanges.'
14256,244430631,"b""I see what you mean. I'm not sure it's very important since setting a temporary value while a store-generated value is present (i.e. not accepted) would be quite strange, but I've changed it to also reset the store-generated value if needed."""
14256,244440439,b'Call `GetDeclaredForeignKeys()` to avoid duplicates'
14256,244440691,b'Or even better `currentProperty.GetContainingForeignKeys()`'
14216,243114544,b'cc @Eilon for approval'
14284,244838507,"b'new FrameworkName(AppDomain.CurrentDomain.SetupInformation.TargetFrameworkName).Identifier == "".NETCoreApp""'"
14284,244839189,"b'Sorry, that might not be in .NET Standard 2.0. Use `new FrameworkName(AppContext.TargetFrameworkName).Identifier == "".NETCoreApp""` instead'"
14208,243015759,"b""EF6 (and I think SqlClient) have some [extra checking](https://github.com/aspnet/EntityFramework6/blob/master/src/EntityFramework/Core/Common/DbProviderServices.cs#L808-L812) to make sure you don't go outside of the data directory. (i.e. `|DataDiretcory|\\..\\my.db` isn't allowed. Not sure if we want to do the same or not..."""
14208,243016380,b'\xf0\x9f\x98\x84 Not sure we need an EF Core test for this. Can you add a test to `Microsoft.Data.Sqlite.Tests` instead?'
14208,243016962,"b""I suppose we don't block it in relative paths, so we probably shouldn't with the macro."""
14208,243409850,"b'Yeah nice, made for a much nicer test too.'"
14208,244817467,b'Can be `private`.'
14208,244817742,"b""Nit: I'd call this `DataDirectoryMacro`, but I'm also incredibly jaded. \xf0\x9f\x98\x89"""
14208,244817955,b'Nit: Not really needed (all tests that set this should clean up after themselves--even on failure)'
14273,244834931,"b""Can base handle `string`, `byte[]` and value types? It also seems silly that providers need to derive from `CoreTypeMapping` even when they're not adding additional functionality."""
14273,244835485,"b""The problem with that is that we're then assuming that all providers can handle these things. Which isn't true for many relational providers (e.g. unsigned integer types), and I don't know that we can assume it is true for any non-relational provider."""
14273,244837262,b'Is this Un-Obsolete-ing by desing?'
14273,244843901,"b""Yes. Because I couldn't figure out why we obsoleted it. Anyone know? @AndriySvyryd @bricelam @divega """
14273,244844246,b'@AndriySvyryd did it in https://github.com/aspnet/EntityFrameworkCore/pull/9838'
14273,244846175,b'@AndriySvyryd Does it still make sense to remove this?'
14273,244850820,"b'It was done to prevent further usages of this in our code and avoid introducing unintentional coupling. The attribute should stay, perhaps with a comment.'"
14273,244859975,"b""@AndriySvyryd If we don't want it to be used, then shouldn't we remove the code rather than leaving the attribute?"""
14273,244860711,"b""Yes, but I couldn't figure out how to do it"""
14273,244862030,"b""Most of the time, usages of this can be replaced with `context.GetService<IStateManager>()`. I'll try that."""
14273,244864779,b'Did that without issues. New version up.'
14273,244866336,b'Nice. Perhaps the problematic usage has been removed.'
14125,240430140,b'Might be able to replace this block with just...\r\n``` csharp\r\nsqlArguments.AddRange(strftimeFunction.Arguments.Skip(2));\r\n```'
14125,240802711,"b'Nice, like that!'"
13779,228608167,"b'I will change ""Lenght"" to nameof (string.Length)'"
13779,228608470,b'@bricelam that should be enough.'
13779,228610288,b'Good enough for now. I have some ideas on how to better organize the member/method translators but they can wait for 3.0.'
13779,228610540,b'Might be worth renaming the class/file to just LengthTranslator'
13779,228610979,b'sort in alphabetical order.'
13779,228611879,b'This would fail with LongCount due to type mismatch.\r\nI see there are no tests for this. You can drop this whole visitor (given relinq may be removed this would be throw-away code).'
13779,229448519,"b""Let's just drop this whole thing. We are removing Relinq so this piece of code would be outdated anyway."""
13779,229478632,"b""Should this be merged?\r\n\r\nWhy refactor this, there are many others that need refactoring to remove Relinq, and that would not be possible now.\r\n\r\nIf there is already an example of something done without relinq, can you show me?\r\n\r\nI'm working on branch 2.2"""
13779,229482474,"b'I changed branch to master. Perhaps too late for 2.2 now.\r\nI understand there are many existing methods which needs to be converted to work without Relinq. This visitor is one of those because it works on `SubQueryExpression` which is essentially relinq type which would be totally gone. Hence in expression tree world, we would probably need to pattern match a method call of type `Count/LongCount` on certain types and translate them accordingly. Hence basically this work would not be useful in same format.\r\n\r\nPresently, there is no infra which works in the absence of Relinq. I am currently working on it (See #12795 ). Once some basic infra is in place, you could contribute. At that point, it would be more clearer on how to work in expression trees for this pattern.\r\n\r\nMost importantly, there are no test for this feature hence instead of working on this more for we can just revisit and implement few months later.'"
13779,229489375,"b'I fully believed that this change would not be so shocking as not to get into 2.2.\r\n\r\nBut if this is not possible, what I have left is to wait and work in 3.0.'"
14313,245117887,"b""I'm against adding API only used for testing. Seems OK not to have an explicit test for this. I intend to add some benchmarks that should catch things like this."""
14313,245118099,b'Should be able to remove `_commands.Clear()` below.'
14313,245132875,b'Removed.'
14313,245133101,b'Replaced by assertion that the list is empty.'
14313,245157341,b'\xf0\x9f\x91\x8d'
14317,245155707,b'cc @ajcvickers (for transparency)'
14317,245156663,b'Should we support these?'
14317,245160688,b'Explain?'
14317,245168316,"b""There's no way in SQLite to determine whether encryption is supported, and sending `PRAGMA key` is a no-op (not an error) if it isn't.\r\n\r\nMy clever solution is to call internal SQLitePCL.raw APIs to see if what provider is being used. If it's e_sqlite3 (the one used by bundle_green) we know it'll never support encryption so we throw saying it's not supported. This will prevent most users from shooting themselves in the foot.\r\n\r\nWe still no-op if you're using an unknown SQLite library, but if you managed to get that far, you probably know what you're doing."""
14317,245168656,b'(CCed you as a heads up about (loosely) depending on internal API)'
14317,245169344,b'Thanks. Looks safe to me.'
14316,245153926,b'Make return type non-null?'
14316,245168838,b'Will do'
14237,245127695,"b'We need somewhat robust pattern matching here. User can define a Compare function with int return type which takes different types of arguments, and things could fall apart.'"
14237,245153268,b'`ComparisonExpression` better'
14237,245451237,"b""Good shout, I've added checks for types and number of the arguments. Any other checks worth adding?"""
14325,245462883,b'cc @Eilon'
14325,245462917,"b""\xf0\x9f\x98\x84 I'll never forget to add it now."""
14357,246516098,"b'@ryanbrandenburg @natemcmaster @rynowak @pranavkm I was seeing merge conflicts because two dependencies next to each other were updated by separate PRs. After the first is merged, git says the second has conflicts.'"
14394,247604664,b'Apparently this tries to connect... Tests are failing while building services. Lazily initialize it?'
14394,247613490,b'Do we still need this reference?\r\n'
14394,247614708,b'If _database == null then GetDatabaseAsync will create the database and then we are deleting database in this method. It does not seem to be good behavior. Creating database just to delete it straight ahead.'
14394,247615225,"b""I agree, but there doesn't seems to be a way around this in the new SDK. I've already sent this and other feedback to the SDK team."""
14394,247615759,"b'Yes, `dotnet-ef` uses it.'"
14394,247616742,b'`Microsoft.Azure.Cosmos` references it already. But I think we should still keep this as we do use it directly and `Microsoft.Azure.Cosmos` might drop it in the future.'
14420,248016731,b'Not a fan of `private` setters...'
14420,248017350,"b""Well, I suppose it's no more wrong than before \xf0\x9f\x99\x82"""
14420,248020298,b'(Fixed via f7875cf76)'
14378,246939343,"b'This is a bit misleading, it assumes people have/will move to generic host.'"
14378,246947003,"b""I'll do another pass on them. Will the new web templates look like this?\r\n``` csharp\r\nclass Program\r\n{\r\n    public static IWebHostBuilder CreateHostBuilder(string[] args);\r\n}\r\n```"""
14378,246949012,b'https://github.com/aspnet/AspNetCore/pull/5706\r\n`public static IHostBuilder CreateHostBuilder(string[] args);`'
14436,248125219,b'Would it be useful to verify the value generated?'
14436,248125570,"b""That would add coupling between the test and the implementation. We don't actually care what value is generated, only that it is the same for the same PK value and different for different PKs/types."""
14430,248148300,"b'```suggestion\r\n            for (var i = 0, l = operation.Columns.Count - 1; i <= l; i++)\r\n```'"
14430,248148426,b'```suggestion\r\n                if (i < l)\r\n```'
14511,250827433,b'This expression turns out to be ExpressionType.Call rather than ExpressionType.Index'
14512,251184570,b'Also ConvertChecked\r\n'
14512,251534433,b'redundant? '
14512,251537015,b'case default!\r\n'
14512,251537837,b'inline temp var'
14549,252070530,b'*Addresses'
14575,252896708,"b""Change to expression-bodied method while we're at it?"""
14575,252906616,b'for a multi statement method?'
14575,252940259,"b""I may be misreading the code, but isn't the following possible?\r\n\r\n```suggestion\r\n        private Task SetEntityStateAsync(\r\n            InternalEntityEntry entry,\r\n            EntityState entityState,\r\n            CancellationToken cancellationToken)\r\n        => entry.EntityState == EntityState.Detached\r\n            ? DbContextDependencies.EntityGraphAttacher.AttachGraphAsync(\r\n                entry,\r\n                entityState,\r\n                forceStateWhenUnknownKey: true,\r\n                cancellationToken: cancellationToken)\r\n            : entry.SetEntityStateAsync(\r\n                entityState,\r\n                acceptChanges: true,\r\n                forceStateWhenUnknownKey: entityState,\r\n                cancellationToken: cancellationToken);\r\n                cancellationToken: cancellationToken);\r\n```"""
14575,252956726,b'but doesnt that make it less readable?'
14575,253202608,b'The expression is fine. It is the ternary that i think makes it more difficult to grok. \r\n\r\nBut either way. Isnt that out of scope for this change? '
14569,252847842,b'Why is _functionName nullable?'
14569,252848744,"b""That's because there's a (public) constructor which doesn't initialize it. I was wondering what that meant - do we infer the store function name somehow from the CLR function name? If it doesn't make any sense, we could consider removing..."""
14569,252849793,b'> do we infer the store function name somehow from the CLR function name?\r\n\r\nYes'
14569,252852017,"b""Hmmm. It's actually a bit weird to have something that can be null, but can never be set to null. I would expect this to either be an immutable type, or for the setter to allow null to be set. @smitpatel @divega Any idea why it is this way?"""
14569,252855728,b'Why this change?'
14569,252856701,b'DbFunctionAttribute.FunctionName can be null (or un-initialized). DbFunction.FunctionName cannot be null.'
14569,252874362,"b'@smitpatel Right, but this is the DbFunctionAttribute class, and it prevents the function name to be set to null, even though null is a valid value here and this class is mutable.'"
14569,252874621,"b'The compiler currently needs this in order to correctly analyze the flow. It may get better at it in the future, although I personally think the new version is also a bit more readable.'"
14569,252877377,"b'The designer file for strings here is generated from a T4, so that will likely need updating. /cc @bricelam @AndriySvyryd '"
14569,252877913,b'Should this be filed as a bug on corefx?'
14569,252882072,"b""We could follow structure similar to ColumnAttribute.\r\nproperties set through ctor don't have setters. And properties with setter is not in ctor directly."""
14569,252882638,b'Or we could just allow null to be set...'
14569,252886384,"b""Yeah... I'll take a look at it and will ask for help if needed."""
14569,252888311,"b""This actually turned out to be a mistake on my side - the type for `_explicitMappings` simply wasn't updated allow null values. Pushed a commit fixing this."""
14569,252888682,"b""I'm fine with whatever - the idea was to change/touch nothing beyond the absolutely necessary for nullability, leaving things as they are. Unless you guys really care, we can just merge it as-is, we can always revisit later."""
14569,253141881,"b""No need to do anything in this PR. It's not a big deal."""
14470,251148313,b'Also mention that this performs `DetectChanges`'
14470,251151639,b'Is this cowered elsewhere now?'
14470,253184867,"b""Yes, it's covered by several functional tests."""
14470,253184893,b'Done.'
14609,254017539,"b'Should we try interpolated strings? (not sure if following works)\r\n`[ForeignKey($""{nameof(Id1)},{nameof(Id2)}"")]`'"
14609,254069755,b'Ha totally the first thing I tried when writing the code but unforunately attribute arguments must be constants.\r\n\r\n![image](https://user-images.githubusercontent.com/638359/52307900-d14e1f00-2993-11e9-9170-402b9ebbafc3.png)\r\n'
14607,253659493,"b""Doesn't this need a memory barrier since memory in the creating thread may not be immediately visible to other threads even after the reference has been set?"""
14607,253674940,"b""That's fine, we just don't want any other threads mutating the same dictionary."""
14607,253676746,"b""But can't that thread access a dictionary object that isn't valid because the memory it uses is not yet visible?"""
14607,253679299,"b""Ok, I'll add a barrier to make sure it can't be mutated by the creating thread after another thread accesses it."""
14607,253688923,"b""But that can't happen, right?\r\n\r\nThe scenario I'm talking about is:\r\n* Thread one allocates and initializes a bunch of memory. This memory may be in a CPU cache.\r\n* Thread one writes the address of this initialized memory\r\n* Thread two reads the address of the initialized memory and sees that it is non-null\r\n* Thread two therefore attempts to use the object...but the memory that it points to has not yet been flushed, and hence thread two is using stale memory, which may not even be a valid .NET object.\r\n\r\nThis is definitely an issue in Java. It also was an issue in the ECMA spec for .NET, although I believe the way it was implemented on x86 meant it wasn't a problem. I would really like to know if it's something we need to code for or not."""
14607,253691355,"b""Without a barrier Jit can reorder the operations and actually make the dictionary accessible to other threads before it has been fully populated. So even if it's in a consistent state, it's not correct as it won't have all the data.\r\nEither way a full memory barrier will prevent any shenanigans."""
14607,253691805,b'Fair enough. '
14607,253693642,"b""As for the scenario you were describing thread two won't be able to get the address to the dictionary until it's properly flushed to memory (since 2.0), but something similar could happen - thread two could access the dictionary before its constructor has finished https://stackoverflow.com/a/51504067/1171992."""
14607,253694844,b'Good to know. Thanks for finding that.'
14607,253797582,"b""Unless I'm mistaken, another important function of `Thread.MemoryBarrier` here is to make sure the new version of `_runtimeProperties` is properly visible in all other cores, i.e. that no other core uses a stale version (regardless of any partially-constructed object problem)."""
14628,254442786,b'Store `callback` as state in the node'
14628,254444590,"b""The reason I didn't do this is because then the node has state which is the callback, which looks quite strange when looking at the nodes in the callback. Seemed like it was leaking in a way that wasn't clean. But we think that's okay, then we can go back to what we had before and avoid capturing the callback in the closure."""
14628,254450595,"b""Could you derive `EntityEntryGraphNode<>` from `EntityEntryGraphNode`, so `callback` doesn't see the state?"""
14628,254451323,"b""Yeah, maybe. I'll try that."""
14611,254423485,b'Merge ifs? anything wrong with previous?'
14611,254423753,b'could pull `owned` from below before the if\r\n\r\n---\r\nIn reply to: [254423485](https://github.com/aspnet/EntityFramework/pull/14611#discussion_r254423485) [](ancestors = 254423485)'
14611,254425881,b'file name'
14611,254426378,b'yay!'
14632,254556055,b'Can you explain this condition? lol'
14632,254585255,"b""This is just a short circuit for perf, since if there's only one fk then it's the one we just ran through the convention and we don't need to process anything else.\r\n I'll add some comments or remove this."""
14627,254361928,b'cc @Eilon'
14627,254365743,b'Go for it.'
14575,253163679,"b""I personally always use expressions where possible, it's definitely more readable to me. But maybe someone else can weigh in."""
14631,254858350,"b""What scenario fails when `ToList()` isn't called here?"""
14631,254858806,b'Expression body?'
14631,254858887,b'Dependent deletes itself and removes itself from the collection.'
14631,254858965,b'Will do'
14631,254860810,b'When we start optimizing this code we should consider doing this lazily - only call `ToList()` after we detect that the collection needs to change'
14575,257014410,b'@SimonCropp @roji Did we come to any conclusion on this?'
14575,257056555,b'i gave up and moved on. sorry.'
14706,257065775,b'Probably QCC can directly expose Logger of DbLoggerCategory.Query since it always ask for same logger. I am fine either way though'
14706,257066089,b'I think it also needs the Database logger.'
14706,257066149,"b""Or maybe that's somewhere else. :-)"""
14706,257067255,b'Certainly not fan of this. '
14706,257078279,b'Suggestions?'
14706,257078438,b'We could create new MethodCallTranslators each time they are needed and inject into the constructor that way.'
14706,257341612,"b""That could be a way. I prefer to put it in constructor rather than method itself. If translator needs it, they can ask for it. They don't have to understand the method args when they don't even need it at times. We can re-visit when I integrate logging into new pipeline."""
14706,257347004,"b""Yep, let's revisit then."""
14714,257358631,"b""Oops, we'll need to update this"""
14728,258282342,"b'Named arguments are a bit redundant, perhaps just specifying all of them would be shorter'"
14728,258473852,"b'Yep, done.'"
14754,258618165,b'Model building is already performed in an exclusive section (provided through `Lazy`). Do you think adding a barrier here would make any difference?'
14754,258725015,"b'Not in any real sense, the idea is mainly that this class already manages concurrency for some updates (with interlocked), so it seems healthy do so also in this other update, for completeness. It could also help a bit in case we ever clear the cache later (e.g. by mistake), and has no actual price :)'"
14776,259482050,b'Are we obsoleting `ToView` as well? It could still be a synonym for `ToTable`. @divega?'
14776,259483292,b'It looks weird on a normal entity type'
14776,259484330,b'Not if that entity type is mapped to a view...'
14804,259648523,"b'How does this work exactly? It makes sense in my head that CoherentParentDependency would be set on dependencies from dotnet/corefx because the repo building Microsoft.NETCore.App (core-setup) depends on the corefx repo. Core-setup, however, does not depend on aspnet/Extensions.'"
14804,259649022,"b""I'm not positive this is necessary. However the aspnet/Extensions packages themselves depend on dotnet/corefx and dotnet/core-setup and the new `darc` doesn't complain."""
14804,259649200,b'@mmitche @jcagme do the `%(CoherentParentDependency)` additions for dependencies from aspnet/Extensions matter?'
14789,259525267,"b""I wish we had a better hook to manipulate connections regardless of whether EF creates them or they're passed in. cc @ajcvickers"""
14789,259526855,b'@bricelam File an issue for events here?'
14789,259550072,"b'Note that going from `DbConnection` to `SqliteConnection` may cause issues when a wrapping provider is being used. Not sure how much it matters on these methods specifically, but just wanted to mention it.'"
14789,260019060,b'We can discuss in API Review if we want to keep it compatible with DbConnection. We also have #14821 to consider.'
14789,260019192,b'Filed #14822 '
14789,261327020,b'Why not an extension method?'
14789,261333142,"b""Most people shouldn't use it. (None now that we do it for externally opened connections.)"""
14895,261658416,b'Can the pattern be non-string? or this is writing null check in fancy way?'
14895,261659772,"b'Invalid comment? :trollface: \r\nApart from that, if you are passing constant of string, why would you need char type mapping?'"
14895,261660539,b'Fancy null check :)'
14895,261660956,"b'Well, I would have preferred to pass a constant of char, but neither SQLServer nor Sqlite support it well (on Sqlite the literal generation of char gives a number...).'"
14643,256170267,"b""I would recommend not proceeding beyond preview 3 yet. Our master branch is still at preview 3. Preview 3 SDKs can be found in the 'release/3.0.1xx' column on this page: https://github.com/dotnet/core-sdk/tree/release/3.0.1xx#installers-and-binaries"""
14643,262334285,"b""Did you add a subscription from dotnet/standard to aspnet/EntityFrameworkCore in the `'.NET Core 3 Dev'` channel? Without that, this line will only ever get updated manually."""
14643,262334689,b'Do _not_ update files in `eng/common` manually. These changes will be overwritten the next time we update the Arcade SDK.\r\n\r\nFYI this is only a default. Can pass whatever version you like on the command line.'
14643,262608776,"b""I didn't. darc did."""
14643,262609199,"b""It's on my TODO list."""
14643,262654795,b'Removed. Not needed.'
14643,262657190,"b'@roji Hopefully in the future, updating the SDK will only require changing this file. \xf0\x9f\x98\x89'"
14916,262253584,b'Might be faster to do an explicit `Concat` instead'
14916,262254251,"b""Didn't seem to be, but I could test it again."""
14916,262255423,"b""I don't like that without any arguments this returns an empty enumerable, I'd prefer a parameterless overload and a no-defaults overload instead."""
14916,262258122,"b'The ""parameterless overload"" is just `Entries`. Maybe this is just a naming thing? How about `GetEntriesForStates()`?'"
14916,262258409,b'Another optimization you could try is to implement `Count` on the state manager with the same parameters as `GetEntries` and use it to preallocate the list of the exact size you will need to avoid resizing.'
14916,262259209,"b""Hmm. I did part of this and it didn't make much difference, but I like the idea of pushing the Count logic to the state manager. Will look into that."""
14916,262260639,"b""No, I'm more concerned about the default values, but this isn't critical unless somebody else agrees with me. @divega @bricelam """
14916,262262372,b'Also you can check whether the map is empty before iterating'
14916,262262581,"b'It looks very nice from the consuming side:\r\n```C#\r\nGetEntries(unchanged: true, modified: true);\r\n```'"
14916,262262711,"b'Also, this is internal API. :-)'"
14916,262263131,"b""I knew I shouldn't have done any perf work..."""
14916,262263263,b'Too hard to get anything signed-off. :trollface: '
14916,262688399,"b'Concat was significantly slower. Checking for empty was barely measurable, but doing it anyway, partly because there is then a further optimization which makes the iteration faster if we only need to return entries for one state--by not introducing another iterator state machine in this case.'"
14916,262688579,"b""Changed it's name; I like it; no one else commented; it's internal. :-)"""
14916,262688886,"b'Did something like this and added extension methods for creating the list of the correct capacity, populating, and returning.'"
14916,262713131,b'`numberOfStates`?'
14918,262691082,b'What does this actually throw and how?'
14918,262703627,b'It throws `NullReferenceException` because the `ConventionDispatcher` is null.'
14918,262704572,b'This is presumably a temporary thing?'
14918,262709847,"b'Yes, #8258 will add a proper message when implemented (post 3.0). This just avoids the future breaking change.'"
14895,263626702,b'nit: Accessibility modifiers required. We explicitly put `private`'
14948,263613726,"b'run ToList only once here and reuse the result to create photo1, 2, & 3'"
14948,263613824,"b'run ToList only once here and reuse the result to create photo1, 2, & 3'"
14948,263613860,"b'run ToList only once here and reuse the result to create photo1, 2, & 3'"
14948,263614255,"b""I could, but I'm not sure it's worth it."""
14948,263614495,b'remove this test? we will never support it'
14948,263614753,b'remove this test? we will never support it'
14948,263614850,b'remove this test? we will never support it'
14948,263614903,b'remove this test? we will never support it'
14948,263614926,b'remove this test? we will never support it'
14948,263614967,b'remove this test? we will never support it'
14948,263615045,"b""The plan is not to remove any tests. At some point, queries that we will never translate can be converted to do explicit client evaluation. However, that should happen as a separate check-in, and I don't think it's urgent."""
14948,263615805,"b""improvement is small but I don't see any downside, seems like a good practice"""
14948,263616829,b'remove'
14948,263619614,b'Done'
14948,263620019,b'Done'
14948,263811760,b'I am just a little bit curious why this was needed. '
14948,263813966,"b'I see where, I almost understand why... Just wondering if it would be worth tracking separately from #14935. '"
14948,263845410,"b""@divega These are just implementations of ToList for non-generic IQueryable. It's test code--are you suggesting we make these extensions available in product code? If so, it doesn't seem like EF is the right place for them. Also, there are assumptions in the async version of this code that work for all uses in our tests, but might need re-visiting if this was supposed to be general purpose."""
14948,263919970,"b""@divega `ToList` has never been available for non-generic `IQueryable`. So, in that sense, it's a product limitation."""
14948,263919328,"b'No, i was just wondering if the reason we had to write the specialized version is a product limitation that we should track. But I may have misunderstood.'"
14974,264392691,b':trollface:'
14958,263948662,"b'@ericsink, your strange taste in .NET API design is growing on me. \xf0\x9f\x98\x89'"
14972,264439468,b'Extra line'
14624,260916871,"b""Shouldn't this be conditional? Since EFCore.Sqlite will bring in SQLitePCLRaw with whatever version of that it was shipped with"""
14624,260917761,b'Is there a reason singleRun was removed from here? These tests take hours to run hence we only run once (by design)'
14624,260918911,"b""Adding them to EFCore.sln means it will be built during regular build. Do we want that behaviour? Would there be potential break somewhere given non-shipping lib/projects. Also preserver bechmarks.sln so when working with benchmarks you don't have to open the large solution\r\n\r\ncc: @ajcvickers"""
14624,260919414,b'We pick this from nuget.org. This should be with other nuget.org packages above.'
14624,260921559,"b'@smitpatel What does ""potential break somewhere given non-shipping lib/projects"" mean?'"
14624,260922749,"b""If we are building this during normal build and if certain properties are not set in csproj, it may cause error. I am not sure if that is going to happen since currently build check is not available. Also once we update the project metadata to whatever is required, it shouldn't have anymore breaks in future.\r\n"""
14624,260923589,"b""My preference would be:\r\n* Add to EFCore.sln\r\n* Don't add to EFCore.Runtime.sln\r\n* Keep Benchmarks.sln\r\n"""
14624,261123787,"b""Oops, thanks for catching it. Actually doesn't it make sense to just depend on EFCore.Sqlite instead of on EFCore.Sqlite.Core, as the former brings in the right version of SQLitePCLRaw?\r\n\r\nI actually realize I have no idea what the difference between the two is :) @bricelam"""
14624,261134109,"b'EFCore.{Runtime.,}sln are already this way (benchmarks are in EFCore.sln but not in EFCore.Runtime.sln). But do you see real value in having a separate Benchmarks.sln in addition to EFCore.sln?'"
14624,261134680,"b'On the more general question, I do think the benchmarks should be part of the regular build, a bit like tests - this ensures they are up to date, and in any case the plan is to run them continuously so they have to build etc...'"
14624,261147319,"b'Sorry, my bad - I brought it back.'"
14624,261147755,"b'Done, thanks.'"
14624,261323262,"b""If it works. MSBuild is bad at flowing dependencies from project to project. For example, it doesn't flow native assets defined in the project, and won't honor anything in a custom nuspec file."""
14624,261323758,"b""But yeah, if it's a package reference, just use Microsoft.EntityFrameworkCore.Sqlite"""
14624,261348484,"b""Oh I see, I'll test it more thoroughly tomorrow. Maybe a package reference for older versions and an explicit reference when using the latest version (since it's a project reference)."""
14895,264848932,"b'Oops, I see you already fixed it, thanks :)\r\n\r\nMaybe we can switch to not having needless `private` everywhere? Think of all the characters that would save!'"
14999,264851842,"b""@mmitche you mentioned `CoherentParentDependency` wasn't needed for dotnet/core-setup dependencies. Does it hurt?"""
14999,264852106,"b'@bricelam this is just a draft but wanted your input on adding this ""fake"" `<Dependency />`.'"
14999,264901676,"b'Looks good. The comment can probably be removed. Its purpose is pretty obvious from `CoherentParentDependency=""Microsoft.NETCore.App""`.'"
14999,264904890,"b""Ping @mmitche (I'm ready to merge this and don't want later to hear I shouldn't have added `CoherentParentDependency` here or for `Microsoft.Extensions.DependencyModel`.)"""
14895,264929135,"b'Against the coding guidelines set forth. https://github.com/aspnet/AspNetCore/wiki/Engineering-guidelines#coding-guidelines\r\n\r\nThat being said, you can always start discussion to modify coding guidelines. '"
15005,265292346,b'fix for compareTo == false'
15018,265294239,b'@divega to suggest message'
15018,265294314,b'@divega to suggest message'
15018,265294367,b'@divega to suggest message'
15018,265350141,b'Does this break use of the Obsolete methods? (Even though they are Obsolete we should keep them working unless it is a big burden to do so.)'
15018,265350389,b'What is `StringFromatMethod`?'
15018,265350623,b'I will add processing of old methods in Relinq parser to support it.'
15018,265350779,"b""For now, let's duplicate at leas some tests and still run them against the obsolete methods."""
15018,265351048,b'R# thingy. It tells `sql` is format string parameter and there should be as many parameters following as placeholders.'
15018,265351268,b'Nice.'
15018,265351554,"b""Not sure this one is needed because I don't think anyone will use this type without the methods, but here it goes:\r\n> For the execution of SQL queries using plain strings, use FromRawSql, ExecuteRawSql, or ExecuteRawSqlAsync instead. For the execution of SQL queries using interpolated string syntax to create parameters, use FromInterpolatedSql, ExecuteInterpolatedSql, or ExecuteInterpolatedSqlAsync instead."""
15018,265352088,"b'For the execution of SQL queries using plain strings, use ExecuteRawSql instead. For the execution of SQL queries using interpolated string syntax to create parameters, use ExecuteInterpolatedSql instead.'"
15018,265352574,"b'For the execution of SQL queries using plain strings, use ExecuteRawSql instead. For the execution of SQL queries using interpolated string syntax to create parameters, use ExecuteInterpolatedSql instead.'"
15018,265352828,"b'For the execution of SQL queries using plain strings, use ExecuteRawSql instead. For the execution of SQL queries using interpolated string syntax to create parameters, use ExecuteInterpolatedSql instead.'"
15018,265353005,"b'For the async execution of SQL queries using plain strings, use ExecuteRawSqlAsync instead. For the async execution of SQL queries using interpolated string syntax to create parameters, use ExecuteInterpolatedSqlAsync instead.'"
15018,265353075,"b'For the async execution of SQL queries using plain strings, use ExecuteRawSqlAsync instead. For the async execution of SQL queries using interpolated string syntax to create parameters, use ExecuteInterpolatedSqlAsync instead.'"
15018,265353137,"b'For the async execution of SQL queries using plain strings, use ExecuteRawSqlAsync instead. For the async execution of SQL queries using interpolated string syntax to create parameters, use ExecuteInterpolatedSqlAsync instead.'"
15018,265353200,"b'For the async execution of SQL queries using plain strings, use ExecuteRawSqlAsync instead. For the async execution of SQL queries using interpolated string syntax to create parameters, use ExecuteInterpolatedSqlAsync instead.'"
15018,265353800,"b'For returning objects from SQL queries using plain strings, use FromRawSql instead. For returning objects from SQL queries using interpolated string syntax to create parameters, use FromInterpolatedSql instead.'"
15018,265353944,"b'For returning objects from SQL queries using plain strings, use FromRawSql instead. For returning objects from SQL queries using interpolated string syntax to create parameters, use FromInterpolatedSql instead.'"
15018,265355980,b'Copied almost all tests for sync/async both.'
15018,265356083,b'I ended up redirecting old methods to new method so that translation works uniformly for all of them'
15018,265358561,b'NIT: rename parameter to interpolatedSql?'
15018,265358756,b'> The interpolated string representing a SQL query with parameters. '
15018,265359163,b'Switch example to FromRawSql'
15018,265359358,b'Switch example to FromInterpolatedSql.'
15018,265359467,b'Add \r\n> You can also consider using FromInterpolatedSql to use interpolated string syntax to create parameters.'
15018,265360775,b'The raw SQL methods in this class are missing the paragraph\r\n  ///     <para>\r\n        ///         As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection\r\n        ///         attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional\r\n        ///         arguments. Any parameter values you supply will automatically be converted to a DbParameter -\r\n        ///    ***** usage sample *****\r\n        /// You can also consider using ExecuteInterpolatedSql to use interpolated string syntax to create parameters.\r\n        /// </para>'
15018,265365944,b'I will create a new issue about using ValueTask<T> on our APIs. '
14998,264931019,b'Please revert this change. It has been removed in new pipeline.'
14998,265544778,"b""Done, sorry, I'll try to be more careful about touching query code."""
15005,265552577,"b""Isn't this a degradation in terms of the SQL being produced, assuming that in this context a simple `1` worked well?"""
14895,265555129,"b'Nah, am not going to go there...'"
15018,265669196,b'If we need more methods (for more return types) how are we going to name them?! :trollface: '
14984,264430784,b'@roji Is this the right thing to do or should I use the null-forgiving (`default(TNumber)!`) operator here?'
14984,264597122,"b""Yeah, this seems like it would be fixed by https://github.com/dotnet/roslyn/issues/30953, so it seems better to put a `#nullable disable` so we can find these cases once the fix is out and modify them. I'd recommend only using the bang operator where we don't expect the compiler to ever figure it out for us, i.e. because we have knowledge about the specific API we're using etc.\r\n\r\nHowever, this raises another more general question which has been confusing me a little: are specific value converters supposed to handle null, or is that supposed to be handled by the system? On the one hand I can see that most (all?) converters provide conversion functions which first check for null. On the other hand, I can see that that the ValueConverter base class (generic) composes sanitization on top of the specific conversion function, check for null and exiting early.\r\n\r\nIf we want value converters to be able to convert null into something other than null, then it seems to make sense to allow conversion functions to receive nullable values (but in this case the sanitization is problematic, isn't it?). If, on the other hand hand, null should map to null, then specific converters shouldn't have to deal with it at all. This would be ideal from a nullability perspective, as all converters will always be dealing with non-nullable inputs (and maybe also providing non-nullable outputs?).\r\n\r\n@ajcvickers am I confused here? If the above sounds reasonable I can open an issue and work on it."""
14984,265342907,"b""@roji So the current design allows a single value converter to be used for both a value type and it's nullable counterpart. This works because null is never passed to the converter; that is, null is not converted and a null value always maps to a null value.\r\n\r\nThere is nothing technically preventing a converter returning null for a non-null input, but it's hard to see how a functionally correct converter would do this, so it's reasonable to say it's not allowed.\r\n\r\nAlso, it's possible (and desirable) to create a converter for a nullable type even if it won't actually ever be given a null because your model may have nullable types and natural to want to write value converters over your actual model types, not the non-nullable equivalent. Also, the generics in the API lead you to doing this.\r\n\r\n"""
14984,265535803,"b""Thanks for the explanation @ajcvickers.\r\n\r\n> Also, it's possible (and desirable) to create a converter for a nullable type even if it won't actually ever be given a null because your model may have nullable types and natural to want to write value converters over your actual model types, not the non-nullable equivalent. Also, the generics in the API lead you to doing this.\r\n\r\nIf I understand you correctly, you're saying that because I have a `DateTimeOffset?` in my model, I should be able to write a converter for `DateTimeOffset?` rather than for `DateTimeOffset`? I'm not sure I see that, and there seems to be a potential for a nasty surprise as this indicates that it's possible to convert null to something else, while this isn't actually the case (since nulls are handled at the ValueConverter base class level and never make it into the conversion function). \r\n\r\nDoes it make sense to have a discussion on changing the value converter API to only work with non-nullable types? It would explicitly make all null checking in specific converters needless, reduce code and be better from a C# 8 nullability analysis perspective..."""
14984,265683443,"b""@roji If you have a design that works for that, then we can certainly discuss. Consider\r\n```C#\r\npublic class Blog\r\n{\r\n    public int Id { get; set; }\r\n    public int? Foo { get; set; }\r\n}\r\n```\r\nif I can't write a value converter for a nullable, then I can't currently write this:\r\n```C#\r\n        modelBuilder\r\n            .Entity<Blog>()\r\n            .Property(e => e.Foo)\r\n            .HasConversion(v => v + 1, v => v - 1);\r\n```\r\nBecause the generic type of `HasConversion` comes from the property type and so  `v` is `int?`.\r\n\r\nLikewise, I can't currently specify the type explicitly, because it needs to be compatible with the property type. So this won't work:\r\n```C#\r\nmodelBuilder\r\n    .Entity<Blog>()\r\n    .Property(e => e.Foo)\r\n    .HasConversion<int>(v => v + 1, v => v - 1);\r\n```\r\nSo, currently, you would have to do this:\r\n```C#\r\nmodelBuilder\r\n    .Entity<Blog>()\r\n    .Property(e => e.Foo)\r\n    .HasConversion(new ValueConverter<int, int>(v => v + 1, v => v - 1));\r\n```\r\nWhich I actually wish you couldn't do at all, since the types can be anything and it will still compile."""
14984,265691498,"b""Thanks for the patient explanation, I wasn't looking at this from the model definition side... I see now that it's not possible."""
14984,265692078,"b'@roji I was hoping you would say, ""Can\'t we just..."" and come up with some smart way of doing it!'"
14984,265703136,"b""Hang on, can't we just.... :)\r\n\r\nThere is one theoretical possibility, at least for value types... I (think!) we could have an overload of `EntityTypeBuilder.Property()` which accepts a Func expression tree returning `TProperty?` (instead of `TProperty`):\r\n\r\n```c#\r\npublic virtual PropertyBuilder<TProperty> Property<TProperty>([NotNull] Expression<Func<TEntity, TProperty>> propertyExpression) {...}\r\n\r\npublic virtual PropertyBuilder<TProperty> Property<TProperty>([NotNull] Expression<Func<TEntity, TProperty?>> propertyExpression)\r\n            where TProperty : struct {...}\r\n```\r\n\r\nUnless I'm mistaken, the compiler would prefer the second overload, allowing us to return a PropertyBuilder whose generic type param is the non-nullable type underlying the property's nullable type. And that would allow us to a non-nullable value conversion function.\r\n\r\nHowever, I can't think of any way this would work for the new non-nullable references, and in general the value isn't that great it seems..."""
14984,265719253,"b""Wouldn't that impact other APIs that chain from Property and need the nullability to be preserved?"""
14984,265774085,"b""It would, although that could be worked around by having that PropertyBuilder be generically aware of the nullable property type as well - it could be generic over both the nullable *and* non-nullable type. We'd expose the appropriate type for each API - the non-nullable for conversions, the nullable for others.\r\n\r\nBut this is more of a theoretical discussion, I'm really not suggesting this... If this worked well for reference types as well it may have been worth it, but..."""
15005,265795426,"b""It is degradation but regressions are facts of life. :trollface: \r\n\r\nOn serious note,\r\nThe issue is, SqlServer cannot read bool value out of non-bool column in results. So we always need to make sure that we don't end up with something non-bool.\r\nThe case where simple `1` worked, it did implicit type conversion to convert both sides to int and that worked. Now if you do this on top level projection then you are stuck again because you would be reading an int value. We had specific work-around in the place for `CAST(COALESCE(t.NullableBoolColumn, 1) AS BIT)` so that we read back bool values. Also we have `TypeTrueLiteral` so that we generate 1/0 in case block as bit in order to read back bool value which was another hack for SqlServer only.\r\n\r\nNow the challenges \r\n- In projection, you need to print out bool literal\r\n  - Typemapping needs to understand the context for literal generation which makes it worse for all providers & types just for SqlServer & bool.\r\n  - Query translation can have different types mapping in different parts so we can print out 1 as int but that can cause issue in type system + SqlTranslator does not know where the expression would be placed in SQL + TypeMapping does not provide info on how to combine 2 different TypeMappings.\r\n- We can do cast on top level like coalesce case but then you would have to traverse whole projection expression to identify if there is any literal & of bool type & result is bool type then put cast around it. Which is kind of do-able but complex.\r\n\r\nAll in all, while SQL worsened here, it feels like the literal we generated is of correct type rather than trying to simpler SQL and then working around bugs in other ways."""
15005,265893423,"b""Yuck... I understand (some of) the complexity. In any case it's great that at least now it's restricted to SQL Server and doesn't affect others. Thanks for the explanation!"""
15038,266047875,b'We normally use binary logs and stick them into the artifacts/logs.zip file to keep them around. Why the different approach here?'
15038,266065013,b'Just doing what the NuGet team asked me to do to help them debug.'
15038,266067100,b':ok: that makes sense'
15044,266148285,b'At least from Query funcletizer side it should preserve char constant.'
15044,266149472,"b""Feel free to remove it as part of the query changes. (Or not since there's no harm in leaving it.) I effectively just moved code that was already in the SQLite provider."""
15009,267060214,b'Need to copy `_region` onto the new object in the copy-constructor below.'
15009,267227751,b'This is done'
15068,267474122,b'Doh. I swear I searched for that...'
15035,267568488,b'Is this just for perf?'
15035,267569067,b'`?:`?'
15035,267573592,b'The primary reason is that we need to pass in the entity type. It also makes it clearer IMO'
15035,267576626,"b""I can see that, although it's unfortunate that the logic for determining whether DetectChanges should happen is duplicated."""
15035,267576955,b'Perhaps all logic should be moved to the internal types'
15035,267577640,"b'Yeah, that would make sense.'"
15035,267579210,b'Filed https://github.com/aspnet/EntityFrameworkCore/issues/15092'
15128,268356960,b'Missed this in PR #15044'
15130,268699939,"b'Does it make sense to have this `virtual`, and then throw `NotImplementedException()`, forcing Sqlite and other to override just to throw `NotSupportedException()`? It seems like this could either throw `NotSupportedException()` directly, or be abstract if we really want providers to deal with this and possibly implement?'"
15130,268719936,"b""I'll leave it as is in this commit since it's consistent with the existing code, but we should re-consider this as part of #9229. Adding a note there."""
15152,269342171,b'\xf0\x9f\x92\x90 '
15129,269359495,"b""> Add a compatible property, that can be in shadow state, to '{entityType}'.\r\n\r\nToo cryptic"""
15168,269316624,b'Might as well move this to `.Infrastructure`'
15168,269316843,b'Move this to `.Infrastructure` too'
15168,269317510,b'Will do on both.'
15168,269319046,b'`ProviderConventionSetBuilder` and `RelationalConventionSetBuilder` as well'
15168,269341881,b'Update doc comment'
15168,269348517,b'Dependency object name should be changed.'
15168,269606406,b'Good catch!'
15177,269757233,"b""At the time, this one wasn't the default. We needed the higher-capacity machines to avoid serious MSSQL-related flakiness."""
15129,269360943,"b"">Add a store-generated property mapped to the same column to '{entityType}'. It can be in shadow state.\r\n\r\nBetter?\r\n@divega For help with words"""
15186,270101228,b'Could have generated IsNullExpression directly here.'
15206,270537614,b'yay! Linux testing!'
15226,271006606,"b""Nice. I'd also assume the containers always start from their saved (clean) state. Pity the agents don't."""
15236,271426920,b'?'
15236,271429298,b'Unused. Was leftover from a previous cleanup'
15232,271381507,"b""Probably better to use the latest from NuGet.org (4.6.0-preview.18571.3) or (even better) contact someone on the CoreFx team and find out what happened to this package. I hasn't been published since 4.6.0-preview1-27018-01 (from external blob feed)."""
15232,271381986,"b""Why allocate a `Task` in all of these tests? Is this because you're using an older `ValueTask` definition?"""
15232,271399309,"b""Nope, it's mainly to keep test code simple. ConcurrencyDetectorTest receives a function that returns a Task, changing this to work with ValueTask is not entirely trivial since while Task\\<T> extends Task, ValueTask\\<T> doesn't extend Task (or anything else, it's a struct)..."""
15232,271399952,"b""Thanks for the feedback. I'm guessing that that package is no longer needed since ValueTask (and the other stuff) is now included in the box with .NET Core 3.0 - but we're targeting .NET Standard 2.0... I wonder if there are any plans at all to release a 4.6.0 of that package, we'll try to find out."""
15232,271400128,"b""Oops, I meant to comment on one of the instances where you're `await`ing the `ValueTask` and using `AsTask()`"""
15232,271403198,"b""Well there's also xunit's `Assert.ThrowsAsync()`, which wants a lambda returning a Task, not a ValueTask. And then there's that case of `Task.WhenAll()`, which also works only on Tasks..."""
15232,271505816,b'FYI opened https://github.com/xunit/xunit/issues/1919 for adding an `Assert.ThrowsAsync()` that accepts a ValueTask-returning function.'
15087,269312321,"b'Pinging @divega in case he wants to chime in on the message.\r\n\r\nMaybe something like:\r\n""\'{0}\' is designated as an Entity Framework Core internal API and should be used only with extreme caution. This API may be changed or removed without notice in any release. This could result in application failure on updating to a new Entity Framework Core release.""\r\n\r\nThe idea here is not to expressly forbid use--otherwise there is no value in pubternal--but to state in no uncertain terms what might happen if you choose to use it anyway.'"
15087,269315550,b'Maybe update this comment to be aligned with whatever we settle on for the message.'
15087,269316097,b'Seal it? (I _think_ we decided to seal attributes going forward unless there was a specific scenario where it makes sense to inherit from it. Sealing is useful because it improves the perf for finding the attribute.)'
15087,269317025,"b""Not super-familiar with analyzer code, but this looks good to me.\r\n\r\nOne suggestion: for the previous analyzer we were forced to patch when an exception escaped from the analyzer code it would crash VS. I'm not sure what best practice is, but can we double check that we don't think this code will throw with anything that VS (and all our creative developers) can throw at it?"""
15087,269338656,"b""FWIW I copy-pasted this from the comments we already have - which isn't to say the text can't be improved. I agree that your proposal expresses better what we want to say, let's wait for @divega."""
15087,269338791,b'Will do.'
15087,269339362,"b""Good point, syntax trees (and semantic models) tend to be very rich and it's hard to anticipate whether an exception can escape or not. I will confirm what the effect of an exception is on VS, @bricelam I think you worked on the analyzer, any experience/guidance here? We should possibly just swallow exceptions, the effect would only be a missed warning."""
15087,269341179,b'I was wondering if we should warn if an exception occurs but with a different message that says we hit an unexpected exception and providing a fwlnk to file a bug?'
15087,269342145,"b""I'm not sure what the expected behavior is from an analyzer, I'll do a bit of research on this question tomorrow."""
15087,270848105,"b""> One suggestion: for the previous analyzer we were forced to patch when an exception escaped from the analyzer code it would crash VS.\r\n\r\nA bit of research seems to indicate that exceptions thrown from analyzers is *not* supposed to crash VS, but rather cause the analyzer to be disabled: see https://github.com/dotnet/roslyn/issues/3005, https://github.com/dotnet/roslyn/issues/521#issuecomment-74449640 and https://github.com/dotnet/roslyn/issues/268.\r\n\r\nI did a quick test and when the analyzer throws an exception, the following appears in the build log:\r\n\r\n> 1>CSC : warning AD0001: Analyzer 'Microsoft.EntityFrameworkCore.InternalUsageDiagnosticAnalyzer' threw an exception of type 'System.Exception' with message 'WAT'.\r\n\r\nSo it seems like the right thing to do is not to swallow - VS catches these exceptions and reports them correctly.\r\n\r\nIs there any background on VS crashing with the previous analyzer? @bricelam may you can shed some light on it?\r\n\r\n"""
15087,270848416,b'@divega ping'
15087,270921183,b'Analyzer crashes VS when it runs out of memory. We ran into it in past with infinite recursion https://github.com/aspnet/EntityFrameworkCore/issues/12054\r\n\r\nError in analyzer came up like that only (without crashing VS). We did not make explicit decision on what to do with it so we did just try-catch. https://github.com/aspnet/EntityFrameworkCore/issues/13474'
15087,270992793,"b""I agree with @ajcvickers' proposal. Though maybe we want to create a mashup of both messages so that we can update the comments to align as well (perhaps in a different PR?). Here is my attempt:\r\n\r\n> {0} is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."""
15087,270995305,"b'I avoid using just ""Entity Framework"" to refer to things that are ""Entity Framework Core""-specific. I don\'t feel strongly about this at all. It just feels dissonant. '"
15087,270998217,"b""Thanks @smitpatel. The new analyzer doesn't do recursion so seems safer in that respect.\r\n\r\nRegarding exceptions in general, it seems correct to let them bubble up (rather than swallow as in #13731) - they are cleanly reported in user builds, and users would hopefully file issues for us to fix as in #13474."""
15087,271370431,"b""Message sounds good. \xf0\x9f\x91\x8d \r\nOn using EntityFrameworkCore in the code, I would prefer to just stay with EntityFramework. In  docs (and namespaces) we use core, but in type names we typically don't."""
15087,271370731,"b""Also, I would be in favor of updating the API docs as well--I'll file an issue for it."""
15087,271455983,"b'> On using EntityFrameworkCore in the code, I would prefer to just stay with EntityFramework. \r\n\r\nI am fine with this.'"
15087,271952661,"b""Rebased on latest, resolved conflicts and integrated @divega's comment. However, I'm thinking that [the message](https://github.com/aspnet/EntityFrameworkCore/pull/15087#discussion_r270992793) may be somewhat long for a compilation diagnostic - the standard seems to be a bit shorter... How about chopping off the last sentence, ending up with:\r\n\r\n> {0} is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release.\r\n\r\nWill hold off, as soon as you guys confirm I'll merge for preview4."""
15087,271953114,b'I am okay with this. @ajcvickers?'
15087,271955342,"b""Sure, I'm okay with it too, but is there any U.I. issue with a longer message?"""
15087,271957486,"b""I'm not sure of any UI issue specifically, just got the feeling that I'm not used to seeing such long messages. I'm also thinking of build logs where this would takes lots of lines for each case, etc."""
15087,271957608,"b'OK, will integrate the shorter message and merge, thanks!'"
15087,271960489,"b""Hmm. Less can be more, but sometimes more can be more. Anyway, I'm okay with the shorter message."""
15248,272278844,"b'Is this name change for an shipped public method? If so, is it worth breaking for to change Get to Find?'"
15248,272279096,b'Likewise on this change?'
15248,272295265,b'`PropertyIdentity` is `Internal`'
15248,272295534,"b""I'll obsolete the old one."""
15129,272377370,"b'@AndriySvyryd sorry missed this before. Can\'t think of a better way to put it. One option would be to start saying ""All entity types sharing the same table need to map any columns that are part of a store-generated concurrency token"", but  I am not sure it adds much. '"
15287,273193143,b'cc @roji'
15287,273269602,"b""This can and should probably be removed, it's a leftover from the codebase nullability work that got reverted..."""
15287,273269711,b'If you like I can submit a separate PR for that.'
15287,273295935,b'I\xe2\x80\x99ll remove it'
15268,272809031,"b""- R# allows linking of existing dot settings file. So you don't need to keep full copy and things in sync.\r\n- We explicitly decided not to have .DotSettings for anything other than EFCore.sln"""
15268,272819024,"b""> R# allows linking of existing dot settings file.\r\n\r\nDo you mean that R# somehow automatically picks up EFCore.sln.DotSettings when opening EFCore.Runtime.sln? At the very least this doesn't seem to be the case in Rider - it seems like EFCore.sln.DotSettings is ignored. Note that I opened https://youtrack.jetbrains.com/issue/RIDER-26503 for Jetbrains to consider this, but maybe I missed an existing feature?\r\n\r\n"""
15268,272880855,b'This file:\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/af13b52bfc390346551926ca56d5b0703c1eb0e7/EFCore.Cosmos.sln.DotSettings\r\n\r\nBut again we removed those files in 10780cd69185dea4b5b8a72a631a7010eab4f5f6\r\n'
15311,274167734,b'remarks section?'
15311,274449189,"b'Last guidance we had was basically not to use the remarks section, but to instead use multiple paragraphs in the summary.'"
15311,274497582,b'We should make a pass to covert them throughout the code.'
15367,275490122,b'Just curious. Why filter on Build.Reason? This will restrict this tests _only_ work on pull requests.'
15367,275493357,"b""I'll also filter out pull requests before checking in.\r\nInitially this should only run on manual and scheduled builds before we fix flakyness, improve perf and deal with concurrency."""
15369,275583201,"b""This may cause problems because Microsoft.Extensions.Dependency model comes from dotnet/core-setup i.e. it's not really an external package. Ane, we've had problems in the past with keeping this file up-to-date when a patch release includes (or doesn't include) a package."""
15369,275589028,b'Copied from the 2.2 branch. Should we change there too?'
15369,275590586,"b'I think this repo is only using M.Ext.DependencyModel for tests, right? In which case, I doubt this matters.'"
15369,275590656,"b""If we don't have to make further changes, great. IOW, let's see how things build tonight.\r\n\r\n/cc @aspnet/build """
15288,273280357,b'Why not expression body? :trollface: '
15288,273281626,b'\xf0\x9f\x91\x8d '
15288,273284882,b'`GetSeedData` as we might add other types of data in the future.'
15288,273285857,"b""It's not just for seed data, It's essentially a `StateManager` adapter for the update pipeline. Perhaps `IUpdateStateManager`?"""
15288,273625742,"b'The question of whether we should use the word ""seed"" is interesting. We still talk about this as data seeding, but the API is just ""HasData"". I\'m not against using ""seed"" in this API, but I would like to understand if we have a consistent story as to when we use it and when we don\'t.\r\n/cc @divega '"
15288,273626381,"b'Happy to rename to something else, but State Manager is a very internal concept to EF Core. Also see my previous comment about whether we should use the word seed or not.'"
15288,273730231,"b""The reason it's `HasData` in fluent API is because it would be used to configure other types of data as well in the future. But in the Core Metadata there's no need for a root API for all types of data."""
15288,273730719,"b""Isn't it equivalent to exposing `InternalEntityEntry` as `IUpdateEntry`?"""
15288,273732058,"b'No, because that name does not contain the words ""state"" or  ""manager"".'"
15288,273732166,b'That kind of makes sense...'
15288,274158140,b'@AndriySvyryd `IUpdateDataManager`?'
15288,274162839,b'`IUpdateStateTracker`?'
15288,275000741,b'@divega to look.'
15288,275126429,"b'Curious, was this class more general and now only applies to model data?'"
15288,275126667,"b""> The reason it's HasData in fluent API is because it would be used to configure other types of data as well in the future\r\n\r\nDoesn't that imply that we will have to introduce some way to differentiate among different calls to HasData, e.g. an overload that takes an enum specifying applicable behavior or semantics? If that is the case, why wouldn't we use the same pattern on this method? I think we can call it GetData."""
15288,275132703,"b'My guess is that the answer is no, and this is what @AndriySvyryd means when he says the new abstractions are not only about data seeding.'"
15288,275133372,"b""Just to throw another idea on top: IUpdate[State]Adapter. My heuristics:\r\n\r\n- @AndriySvyryd used the word adapter when he tried to explain what it really was\r\n- If we didn't need an adapter, maybe we would be extracting some methods from IStateManager into a a new public interface"""
15288,275133401,"b""Curious, mostly because I don't remember how this works: Why is it that in this scenario we need to explicitly detect changes but in other usages of the interface we don't need it?"""
15288,275134948,"b""I think the design we were proposing is that `HasData` would be followed by another fluent call to set the type of data.\r\n\r\nMetadata API has different shape from Fluent API and in general is more granular.\r\n\r\nSince we don't know what other types of data we will support naming it `GetData` now might prevent us from using this name for a more suitable purpose in the future without making a breaking change."""
15288,275135113,"b""In other places we set the state explicitly and the users doesn't have a chance to mutate the entities therefore `DetectChanges` would be noop"""
15288,275135663,b'I believe that is correct.'
15288,275135826,"b'Ok, but in this one they have a chance? How?'"
15288,275135883,"b'I suppose such design might work, as long as it does not have the usual issues of mutating vs. having to re-create that part of the model when you call that new method after HasData. \r\n\r\nI don\'t feel strongly about this, however if we ever add more granularity to what HasData is, I am not even sure we will talk about the default (the current behavior, without calling other modifiers) as ""seed data"" :smile: Maybe we are trying to guess too much?'"
15288,275136056,"b""I agree that we are guessing too much, that's why I think we should have something that's most compatible with whatever we decide later."""
15288,275136112,"b""Here we don't know the end state beforehand. We've just added/removed all entities from the data and rely on `DetectChanges` to sort out which ones are updates or noops"""
15288,275138449,"b'Thanks. That helped refresh my memory. Anyway, the reason I asked originally is that I was wondering if things would feel cleaner if we kept IChangeDetector as its own separate abstraction (which I guess could be made public). I believe then IModelDataTracker would become a strict subset of IStateManager (i.e. less mix up of responsibilities, and perhaps it would easier to come up with a good name for the public interface). But on the other hand, would it be ok if the input of IChangeDetector.DetectChanges() was an IModelDataTracker?'"
15314,276353843,b'This feels error-prone to me. Let me think about it some more...'
14721,261050276,"b""It's a shame we break this so much. It might be worth introducing a parameter object in 3.0."""
14721,261052243,b'Need to update SqlServerMigrationsAnnotationProvider to copy these from the model to the migrations operation.'
14721,261052295,"b'Also, I want to change ValueGenerationStrategy (see #13352). Maybe we can combine all these as part of that so you get something like this in the migration:\r\n\r\n``` csharp\r\n.Annotation(""SqlServer:Identity"", ""1, 1"")\r\n```\r\nWe have similar annotation serialization/deserialization code for the sequence annotation.'"
14721,261053953,b'Filed #14867'
14721,264441499,b'Added the copy to SqlServerMigrationsAnnotationProvider and commented on #13352 about doing this follow up optimization.'
15288,276517592,"b""It doesn't matter a lot, but I think the parameter name `modelData` should be `updateAdapter` or similar."""
14673,261045640,"b""I'm not sure we want to introduce this as a concept in the core metadata model. To me, this feels more like a relational concept (similar to sequence).\r\n\r\ncc @ajcvickers @AndriySvyryd @divega """
14673,261048645,"b'Would be cool to take a C# expression and use the query pipeline to generate the SQL. We have similar ideas for `ToView()`.\r\n\r\nIf we did that, these could also be implemented for the in-memory provider (it would just evaluate the expression)'"
14673,261048797,"b""If this becomes specific to relational (and we don't take C# expressions), we should call this *sql* instead of *expression*."""
14673,261166745,"b""I think this was also discussed at some point for expressing global filters, maybe we should track all places which could benefit from this in a new issue.\r\n\r\nIn any case, it will always be desirable to provide a raw SQL overload (for expressions which for any reason can't be expressed otherwise)"""
14673,261819736,"b""Makes sense, found SequenceBuilder and can see how that is implemented on the relational model instead of the core model. I'll refactor check constraints to match."""
14673,261819798,"b""I'm liking the idea for the C# expression overload. Any pointers on where I could find examples of using the query pipeline to generate SQL like that already?"""
14673,261822245,"b""I think finalizing the raw SQL version is a good first goal - an expression overload isn't going to be a simple task... In addition the query pipeline is being redone at the moment, so it may not be the best timing. Finally, expression make sense in other places, not just this one, so it may be better to tackle them together later. So I'd recommend concentrating only on SQL for now - we know we want it anyway - but as @bricelam wrote make sure everything is compatible with adding expressions later."""
14673,271125706,"b'This seems unused, remove'"
14673,271126015,"b""Instead of storing each constraint in a separate annotation it's more efficient to store them all in a dictionary in an annotation.\r\nThis is the pattern we recommend going forward and will convert Sequence to use it as well (see https://github.com/aspnet/EntityFrameworkCore/issues/14103)"""
14673,271126438,"b'The parameter order should be `name, table, schema` with `schema` being optional to be consistent with other methods.'"
14673,271498041,"b'Ah apologies, left over from trying a few different ways to implement.'"
14673,271499884,"b'Thanks, lost some of my consistency along the way.'"
14673,276007775,"b""I've switch the annotations to use a single dictionary, @AndriySvyryd Let me know what you think (1fbf901)"""
14673,276046652,"b'To improve encapsulation you could move `BuildCheckConstraintAnnotationKey` to `CheckConstraint` and instead add a static method `CheckConstraint.FindCheckConstraint(IModel model, string name, string table, string schema = null)`'"
14673,276848211,"b""Ha, I literally wrote that code then backed it out again after feeling it was inconsistent with how sequences worked in the same class. I'll go make that change."""
14673,276853022,"b'Yeah, the sequences implementation should be refactored.'"
15434,277181173,b'Why was this lazy?'
15434,277181203,b'I think to stop creating `EntityEntry` instances when they are not needed. But for an exception that seems like overkill.'
15434,277181315,"b'Agree, especially if we implement https://github.com/aspnet/EntityFrameworkCore/issues/11256'"
15435,277381628,b'Did you mean `\\t`?'
15435,277382007,b'Indeed. :-)'
15452,277475229,b'for -> containing?'
15508,279229756,b'nit: dc as alias rather than df.'
15508,279229831,b'another nit: align c before `=` makes it easier to transform to EF query in future if we do.'
15383,276040769,"b'disabled for now, too much work to put those in, and the codebase is in flux'"
15383,276041510,"b'this represents a root that is not a EntityQueryable, e.g. anonymous projection after Distinct. '"
15383,276041637,"b""Should we just produce IncludeMethod expression call instead? That's what this gets reduced to anyway"""
15383,276042273,"b'this might be useful in other places, not necessarily just for nav rewrite - move it to more common place?'"
15383,276043784,"b'this represents navigation property chains (or just ""naked"" parameter expression). As we expand the navigations, adding joins we keep updating source expression and the mapping. This way we don\'t need to re-create entire expression trees, but only mutate the mappings themselves. Once the given subexpression is processed, the binding gets rewritten to appropriate property access expressions which are immutable.'"
15383,276044051,"b""represents IQueryable/IEnumerable that has it's navigations expanded. Operand is the actual expression produces so far (with the extra joins/groupjoins that were added), NavigationExpansionExpressionState holds all metadata we gathered along the way."""
15383,276044144,b'TODO: move this out to a visitor instead'
15383,276044271,"b""includes are applied at the very end. This way we don't do unnecessary work if the entity is not accessible in the final projection"""
15383,276044678,b'current parameter (either original or transparent identifier) for the IQueryable/IEnumerable. This should always be the parameter for the pending selector'
15383,276044814,b'all the EntityQueryable sources found so far - there can be multiple sources due to join/groupjoin'
15383,276045007,b'pending selector is what we need to apply to the NavigationExpansionExpression at the end so that the final shape matches the expected shape - it collapses all TransparentIdentifiers into actual entities etc'
15383,276045376,"b'we need to apply orderings lazily because cases like: customers.OrderBy(c => c.Nav.Name).ThenBy(c => c.Id), if we apply  first order by right away, we will introduce Join for the Nav expansion and lose the IOrderedQueryable type, which will break ThenBy. We need to apply Joins but hold off with the orderings until we encounter node that is NOT a ThenBy'"
15383,276045618,b'this helps when processing ThenInclude - we want to know what we included before so we can build the full include chain easier'
15383,276045826,"b'FirstOrDefault, etc - this is applied lazily as well to help with member pushdown'"
15383,276046067,"b'mappings for elements that are not EntityQueryables and therefore not part of SourceMapping structure - those are custom roots (e.g. anonymous projections after Distinct) and nested queryables, e.g. GroupJoin groupings or nested collections projections'"
15383,276046165,"b'do we need to materialize a navigation of a given type - yes if ""naked"" collection navigation is projected, false otherwise'"
15383,276046608,b'adds joins for all the reference navigations that were found but not expanded yet. It also changes all the mappings to new values'
15383,276046698,"b'TODO: most of this code is copied from old nav rewrite, can probably be optimized'"
15383,276046879,"b""represents a nested navigation expansion that needs it's own mapping to the root - e.g. for groupjoin scenarios, where the grouping is the Outer element of the Transparent identifier created in the GJ result selector"""
15383,276047458,"b'represents the tree of navigations that were discovered so far as well as the mappings to and from. To mappings are way to locate the given navigation in the current transparent identifier (Outer/Inner props), From mappings are ways that the given navigation can be accessed originally. There can be multiple from mappings for a given navigation, because queries like these: customers.Select(c => new { one = c, two = c })'"
15383,276047606,"b'helper to give us all the children - this is mostly used to quickly check if some processing is needed in the tree, e.g. if there are any nodes with pending expansions'"
15383,276048682,"b'adds include methods to the final selector with the correct nesting of the include calls. e.g. \r\n\r\ncustomers.Include(c => Foo).Include(c => Bar) will be rewritten to Include(Include(c, Foo), Bar).\r\ncustomers.Include(c => Foo).ThenInclude(f => Bar) will be rewritten to Include(c, Include(f, Bar)), '"
15383,276048755,b'rewrites nav comparison to key comparison instead'
15383,276049043,"b'main navigation expansion processor - visits all the (currently supported) linq methods and converts them into NavigationExpansionExpressions, which can later be reduced into result expressions with their navigations expanded'"
15383,276049324,b'TODO: will combine this with the file above - just split them temporarily'
15383,276049367,b'thoughts?'
15383,276049739,"b'TODO: need to do something better here. we should always have NEE as a result of visiting SelectMany collection selector, unless query has some method that is not supported (maybe client method, or if we missed something)'"
15383,276049794,b'TODO'
15383,276050422,"b'for terminating operators, like Distinct we need to ""flush"" all the accumulated stare - bring the result to the shape that is expected (i.e. get rid of TransparentIdentifiers) and then recreate new sources from the entities projected before the operator. \r\n\r\ne.g. customers.Where(c => c.Nav.Name != ""Foo"").Select(c => new { foo = c, bar = c }.Distinct().Where(x => ...)\r\nat the time of processing Where we will have two separate query sources for customer entity. We will also lose the navigation expanded in the first where, so if the second where accesses it again, it needs to be expanded the second time.\r\n\r\n'"
15383,276050615,"b'converts methods like entities.Count(x => x.Name != ""Foo"") into entities.Where(x => x.Name != ""Foo"").Count()'"
15383,276050902,"b'takes a (single parameter) lambda from the queryable method that we are processing, finds all the new navigations and applies the joins for them'"
15383,276051069,"b'TODO - add tests for those, correct implementations is in the Include visitors, since logic is similar'"
15383,276051181,b'TODO: convert this into visit children on individual expressions'
15383,276051693,"b""parses the property access chains and tries to match it with a NavigationTreeNode, based on nodes' FromMappings. If can't find a match it creates a new node at the correct place in the tree."""
15383,276052083,"b'converts navigation bindings back into actual member access chains, also reduces navigation expansion expressions (in case of nested scenarios) - this is usually a final operation we do when processing lambda of a some query operator'"
15383,276052374,"b""finds all the pending includes that are actually accessible from the final projection - users could have included some navigations that are not accessible (e.g. behind scalar projection or not present at all) - we don't want to include those"""
15383,276052479,b'will remove'
15383,276052802,b'forgot to remove'
15383,276052961,b'improvement!'
15383,276053155,"b'we no longer do entity.Navigation.Pk -> entity.FK optimization, so there will be additional joins in some places'"
15383,276880689,b'fixed in the second commit'
15383,276880876,b'fixed in the second commit'
15383,278654917,b'This needs to be inside CompileQueryCore methods. You are expanding navigations for cached query too. That would be disastrous perf.'
15383,278664846,b'We need relational version. We need to make it extensible so that providers can add custom queryable method processing\r\n\r\n---\r\nIn reply to: [276049367](https://github.com/aspnet/EntityFrameworkCore/pull/15383#discussion_r276049367) [](ancestors = 276049367)'
15383,278665974,"b""We don't need actual method infos for queryable methods. We just need to know which method it is. A loose matching can easily tell that without much computation.\r\nFor Enumerable methods, we may need them for InMemory server side. But it should not be required in pre-compilation phase. If it is necessary then again loose match is pretty safe option.\r\n\r\n---\r\nIn reply to: [276042273](https://github.com/aspnet/EntityFrameworkCore/pull/15383#discussion_r276042273) [](ancestors = 276042273)"""
15383,278696495,b'will do that once we have the proper way to inject the visitors in the new pipeline'
15383,279576064,b'You can.'
15536,279914724,b'use nameof'
15536,279924495,b'Filed https://github.com/aspnet/EntityFrameworkCore/issues/15537'
14455,248904641,"b""Might be a good time to rename this to something like 'GetCommand'"""
14455,249137132,b'There will be huge API review later.'
14455,249140676,"b'We missed it in the last review, so changing it now will prevent that happening again\r\n\r\n---\r\nIn reply to: [249137132](https://github.com/aspnet/EntityFrameworkCore/pull/14455#discussion_r249137132) [](ancestors = 249137132)'"
14455,251177097,"b'>""instance"" [](start = 59, length = 10)\r\n\r\nIs this something that would ever change? Should it be just a static readonly field instead?'"
14455,251177510,"b'>""instance"" [](start = 28, length = 10)\r\n\r\nUse predefined name?'"
14455,251177565,"b""Typo in 'extensionExpresssion'"""
14455,254499372,b'Not from this call site. Other call site passes different name. Hence the method started taking string param.'
14455,254499709,b'Still playing around with materializer. This code will change. Will incorporate predefined names once it is finalized.'
14455,279894256,b'combine those two ifs'
14455,279907159,b'nav rewrite also uses this logic - DRY'
14455,279910067,b're-use LinqMethodHelpers for those'
14455,279923817,b'this wont work for Enumerable.Min/Max. There is a big discrepancy between Enumerable and Queryable overloads (22 vs 2)'
14455,279981119,b'NRE (schema can be null)'
14455,280210701,b'unify the names'
14455,280216594,b'unify with LinqMethodHelpers'
14455,280218388,"b'change file name, also general comment wrt visitors: drop ""Expression"" from the name, i.e. ""InMemoryExpressionTranslatingVisitor"" rather than ""InMemoryExpressionTranslatingExpressionVisitor ""'"
14455,280222954,b'this wont work for Contains on collection navigations - see #15554'
14455,280229965,b'we already have visitor validating that - remove this assert'
14455,280232073,"b'this wont for for case where both values are null - those would be optimized at some point, so I guess its fine to leave this as is'"
14455,280243361,b'creative re-use of existing assets ;)'
14455,280246732,b'this repeats a lot - DRY'
14455,280249072,"b'throw if no orderings, also rename to ""ReverseOrdering"", reverse it bit too vague'"
14455,280250072,b'COUNT_BIG for sql server'
14455,280267555,b'Will to DRY later'
14455,280267676,b'Will cover in API review'
14455,280267761,"b""Not all conditions are same. I intend to dry them once they are finalized. Don't want unintentional push down by mistake from DRY code."""
14455,280267903,b'https://github.com/aspnet/EntityFrameworkCore/issues/15559'
14455,280267947,b'Will add later when adding SqlServer specific Sql Gen.'
14455,280268169,b'https://github.com/aspnet/EntityFrameworkCore/issues/15560'
15590,280624674,b'rename file'
15590,280625725,b'added issue for this - #15591 add a comment here so that I can remove this when the issue is addressed'
15590,280625945,b'Saved for API review.'
15590,280626949,b'Added in next commit'
14455,280931617,b'Why the folder is `PipeLine` and not `Pipeline`? :sob: '
14455,280931836,b'Rename went bad. I will correct it to please unicorns.'
15610,280951438,b'Should we use typemapping here if available?'
15610,280951506,b'put under #region Expression-based methods/properties'
15610,280951608,b'Should also print out parameter name'
15610,280951863,"b""Let's change this to Constant of IPrintable design we discussed."""
15610,280959331,"b'regions seem like overkill for those small classes, maybe just keep region for Equality & HashCode?'"
14455,280966210,b'Yes this was a major issue hurting my eyes as well.'
15576,280535534,b'Can we run single command to get this data?\r\nLike doing Union on sys.views & sys.tables before performing join.'
15576,280536044,b'Can we combine this one too with other using Union? This one may be bit more tricky than columns one due to different filters but there is scope for DRY.'
15576,280543049,b'Will that make the code more readable and maintainable?'
15576,280543363,b'Will that improve readability and maintainability?'
15576,280544539,b'From my understanding there is only 1 line difference between both SQL. Also table/views both are same in EF model so it making them same on database end. 0 issue in readability and maintainability here.'
15576,280545612,b'Makes code DRY. For this case direct UNION on top level is good enough. Gives single command and only one code path to read data.'
15576,280545688,b'I will give it a shot'
15576,280989366,b'Does view has memory optimized?'
15576,280990309,"b'No, but the 2 queries must have the same shape'"
15499,279563790,b'Might be worth it to put a comment here for future readers as to why this is needed '
15499,279565220,"b""Perhaps @divega can come up with something more readable. I was thinking something like: `'{principalEntityType}.{principalNavigation}' may still be null at runtime despite being declared as non-nullable since only the navigation to principal '{dependentEntityType}.{dependentNavigation}' can be configured as required.`"""
15499,279565965,b'And you could extract this to a base type that `NonNullableNavigationConvention` would also use'
15499,279961522,"b':+1: on simplifying as proposed by @AndriySvyryd. I don\'t believe one thing is _because_ of the other. \r\n\r\nMoreover, navigations can be null at run time always, so perhaps I would tweak the language a bit: \r\n\r\n> ""Non-nullability specificed on navigation to dependent \'{principalEntityType}.{principalNavigation} has been ignored since only the navigation to principal \'{dependentEntityType}.{dependentNavigation}\' can be configured as required.""\r\n\r\nAnyway, I discussed with @AndriySvyryd and @smitpatel becasue I didn\'t know/remember very well how this worked, and I now I am not even sure performing these checks here is that useful or robust. I created https://github.com/aspnet/EntityFrameworkCore/issues/15539 to discuss doing something in model validation when we have more data to reason about.'"
15499,280189945,"b'```suggestion\r\n            if (Attribute.GetCustomAttributes(memberInfo, true)?.FirstOrDefault(a => a.GetType().FullName == NullableAttributeFullName) is Attribute attribute)\r\n```'"
15499,280190665,b'```suggestion\r\n                    && flags.FirstOrDefault() == 1)\r\n```'
15499,281038725,"b'Thanks, this went through several iterations and the opportunity for reuse somehow got lost.'"
15499,281039005,"b""Done, agreed that the proposed message is better. However, I admit I have some doubts about any users actually understanding what's going on here..."""
15499,281039291,"b""Thanks, I tend to forget that `FirstOrDefault()` and similar don't actually allocate for IList..."""
15499,281039297,b'Thanks'
15630,281366770,b'Wrong type reference'
15630,281367777,b'Fix grammar in parenthesis or remove them.'
15630,281369514,b'This parameter should be `bool fromDataAnnotation = false`'
15652,282575941,b'\xf0\x9f\x91\x8d Much easier than using a custom type with a formatting file'
15652,282588121,"b'Thanks, Brice, I am complete PowerShell noob'"
15652,282603597,"b""Hmm, looks like this doesn't work for scripting. The Format-Table cmdlet retuns `Microsoft.PowerShell.Commands.Internal.Format` objects instead of the json objects."""
15652,282604962,b'Filed #15673'
15667,282574861,b'Why do we need this?'
15667,282602009,"b""This folders pops up in Solution Explorer. You don't have it on your machine?"""
15667,282629486,b'fixes length'
15667,282631661,b'Should these and other explicit implementations have API docs?'
15667,282632191,"b'No, they cannot be accessed other than through the interface'"
15667,282632851,b'Needs internal API docs on members.'
15667,282633872,"b'Right, but what do the generated API docs look like?'"
15667,282633966,b'/cc @bricelam @divega Since they may know.'
15667,282634213,"b""I think these members just don't appear there"""
15667,282635590,b'constraintSql -> sql'
15667,282635784,b'those -> these?'
15667,282640512,b'?'
15667,282641778,b'My understanding from @bricelam is to not use `c` or `code` elements for this kind of thing.'
15667,282642347,b'A test to see whether you actually read the PR'
15667,282642504,b'Why not?'
15667,282674726,"b""But that's the point, these words are not in English, by making them standout the reader won't subconsciously treat them as part of the sentence."""
15667,282676756,b'Needs internal attribute.'
15667,282676917,b'Should we write an analyzer to analyze if doc comments and attributes match? :trollface: '
15667,282677172,"b""I don't feel strongly about it."""
15667,282678789,"b""I don't think it's important enough to fix in all existing comments"""
15667,282698085,"b'I suspect a lot of it would be taken care of by one search-replace, and I do agree with @AndriySvyryd that it helps readability (but no super strong feelings either).'"
15667,282962368,b'They appear: https://docs.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontext?view=efcore-2.1#explicit-interface-implementations'
15674,282684045,b'Future-proofing?'
15674,282711458,b'Yes!'
15667,282992754,"b""It looks like Roslyn doesn't catch missing docs here, but SA1600 might..."""
15659,282253871,"b""This shouldn't be defined on `IModel`, it only makes sense on `IMutableModel` or `IConventionModel`"""
15659,282254916,"b'Redundant, `FindPrimaryKey() == null`'"
15659,282255632,"b""This and `GetIgnoredMembers` shouldn't be defined on `IEntityType`, they make no sense for a readonly model."""
15659,282256032,b'Same for these'
15659,283120729,b'This is not needed. Calling `FindIgnoredConfigurationSource` would be enough'
15659,283120899,b'Not needed. Can just call `GetIsIgnoredConfigurationSource`.\r\n\r\nThough it should be renamed to `FindIgnoredConfigurationSource`'
15659,283163065,b'extra line'
15661,282257264,b'\xf0\x9f\x9b\x91 '
15661,282257333,b'\xf0\x9f\x9b\x91 '
15661,282514722,"b'Does VS do this automatically? If so, is there any point fighting it?'"
15661,282951545,"b""Don't fight it. We'll change them to `<SubType>Code</SubType>` to make the dev experience better as soon as the project system stops stomping over it."""
14990,271427849,"b'@smitpatel Looks like it contains the type mapping, which is great!'"
14990,271428036,"b""Assuming this is the store type name, it probably doesn't need to be here in addition to the type mapping."""
14990,272869029,b'Removed'
14990,278733372,b'Seems like unrelated change'
14990,278734732,b'We should first check if a typemapping is specified which can be mapped if not then only we should go and find mapping based on ClrType. That is applicable for both parameters and return value of actual function'
14990,278734784,b'Typo'
14990,278734980,b'Should just call this ClrType'
14990,278735284,b'I am not sure if we also need conventional derived classes @AndriySvyryd '
14990,278735671,b'Can parameter name be mutated? I would assume it would be same as parameter name you specify on your function.'
14990,278735850,b'Initialize closer to usage '
14990,278735981,b'nit:Prefer full name like dbFunction rather than Func'
14990,278736197,b'When would declaring type would be null?\r\n'
14990,278736511,b'It is still appearing for me in codeflow review.\r\n\r\n---\r\nIn reply to: [272869029](https://github.com/aspnet/EntityFrameworkCore/pull/14990#discussion_r272869029) [](ancestors = 272869029)'
14990,278736991,b'@AndriySvyryd - Parameters are already defined looking at methodInfo. Here we want to get particular parameter to configure it. What should be right fluent way to do it? Calling HasParameter with name which is not any parameter in function throws'
14990,278744558,"b""This was leftover from when I originally wrote this a few years ago before I was auto pulling the values from the metadata.  \r\n\r\nThat being said Oracle does support calling functions with named parameters.  If for some reason the db function parameter name didn't match up with the code name then you could reset it.  That assumes the backend Oracle provider would support this.  \r\n\r\nThat can be an enhancement down the road and I will remove this."""
14990,278745541,"b'That\'s what I thought as well, however Resharper was giving me a ""possible null assignment warning"".  I added the ? to shut it up.  '"
14990,278757267,"b""I'll add those later myself"""
14990,278759758,b'Add R# disable instead.'
14990,283612428,"b""@smitpatel - Based on what you have said across these comments there won't be anything inside of the Translation == null check.  Is this appropriate for the new query pipeline?  Every parameter should have a type mapping, even if the translation is done manually?  """
14990,283643174,b'That is interesting question. Likely.\r\n'
15706,283908601,b'schema?'
15706,283909542,b'Why this? Seems a little obscure.'
15706,283910816,b'Do we need to do this for derived types too? One check for root type should be enough.'
15706,283911121,b'This is being called twice now (other one is to throw exception). Can DRY.'
15706,283912414,"b""Isn't same thing is assigned at the start of block?"""
15706,283913373,b'Before we add more of these can we clarify what the guidance is. /cc @bricelam Do you know if this is documented somewhere?'
15706,283913439,b'Did we decide to prefix everything here with ForCosmos?'
15706,283913879,b'These will need API docs.'
15706,283920902,"b""Don't use it for keywords. Only use it for inline code examples."""
15706,283927364,b'Why not?'
15706,283927827,"b""Guidance came from the docs team ages ago. Can't find any public guidance."""
15706,283928097,"b'(Other than, ""it\'s for code examples"")'"
15706,283928598,"b""We did it for other providers and we haven't had an API review for Cosmos yet."""
15706,283928867,b'It might have been specific to the way docs were rendered at the time.'
15706,283931765,b'We could remove this part from the Fluent API'
15706,283932359,b'But why is it this way in the first place?'
15706,283932408,b'But I think it still could be useful for conventions.'
15706,283933808,"b""Because it seems like a logical way of making a property not persist. Suppling `null` resets the configuration to default for other API, so it wouldn't be consistent to use it for this."""
15706,283935459,"b""Yes, what's your point?"""
15706,283935523,"b""It doesn't seem intuitive to me. @divega?"""
15706,283937437,b'Why did we change? :trollface: '
15706,283947236,b'To avoid a R# warning'
15706,283969422,"b""We can discuss this in API review as we haven't done one for Cosmos and we already said we wanted to rename this."""
15703,283567802,"b""Does this repo define DefaultNetCoreTargetFramework and IsServicingBuild? I didn't see them in my GitHub code search. Those are custom properties we set in the aspnet/Extensions repo \r\n\r\nhttps://github.com/aspnet/Extensions/blob/714b1bea552187a3716c0be3e04bd3830c05e60f/Directory.Build.props#L35\r\nhttps://github.com/aspnet/Extensions/blob/42f0f5d278f4789fb26ccee5c5af5dbdaaea15b1/version.props#L13"""
15703,283568788,b'Thanks. The line between customizations and workarounds is a bit blurry. \xf0\x9f\x98\x89 Will fix.'
15703,283569494,b'Curios: Why is `TargetFramework` an item group here and not a property?'
15703,283570731,"b""Oh I get it. It's a filter on the metadata of the current item group."""
15721,284043894,"b'maybe add comment why we do this, it seems weird to special case Min/Max unless one knows the underlying problem'"
15721,284045416,b'add indent'
15721,284045894,b'What do you mean?'
15721,284046489,b'combine the throw with the one below'
15721,284046623,b'might want to add indent here also'
15721,284047048,"b""Don't see an easy way."""
15721,284068347,"b""I believe it is not too difficult to figure out why we have to special case here. (It's not just extra overloads but no of generic parameters everything also change). While it is not obvious but it has enough pointers. The connected issue can always tell if we forget. Comment would add minimal value."""
15688,283072817,"b'```suggestion\r\n        ///     Generates code for <see cref=""ICheckConstraint"" /> objects.\r\n```'"
15688,283072929,"b'```suggestion\r\n        /// <param name=""entityType""> The entity type. </param>\r\n```'"
15688,283073063,"b'```suggestion\r\n        ///     Finds all <see cref=""ICheckConstraint"" /> for the given table.\r\n```'"
15688,283163324,b'This method should only create a check constraint and throw if one already exists'
15688,283163625,b'This method should at least return a `bool`'
15688,283163986,b'Why were these methods removed?'
15688,283544511,"b'I may have removed these incorrectly. On my initial pass, it seemed like IConventionCheckConstraint was not required now that the data annotations were not stored on IModel and GetConfigurationSource was not being used anywhere. This might be me not understanding the Convention concept. Want me to put it back in? Are you able to explain its use?'"
15688,283546403,"b""Model configuration can be specified in 3 ways: Fluent API (Explicit), attributes on model classes (DataAnnotation) or conventions. The listed order shows precedence.\r\n\r\nThis is the API that will be used by conventions. It's currently unused because there are no conventions adding check constraints. Please put it back in."""
15688,283998327,"b""There's really no reason to Serialize and Deserialize, just store the CheckConstraint directly in the dictionary"""
15688,283999580,"b""Ah great. I did wonder about that. I was following the serialisation patterns from the other types as I thought there was some limitation on the types held. I'll just change the GetAnnotationsDictionary to be a Dictionary<string, CheckConstraint>. Simplifies the code massively."""
15688,284000402,"b""That's only needed when the annotation is stored in the snapshot as a string, but since we'll use Fluent API it doesn't apply."""
15688,284004949,b'Note that `UpdateConfigurationSource` called `configurationSource.Max(checkConstraintData.ConfigurationSource)`'
15688,284005541,"b'Good spot, thank you!'"
15688,284005821,b'This (and the methods delegating to it) should return `IEnumerable<CheckConstraint>` to avoid an allocation when there are no constraints'
15688,284010817,b'Just make this a private field'
15731,284480875,b'Pro-tip: MSBuild 16+ does this automagically now :) https://github.com/microsoft/msbuild/issues/1299'
15731,284488727,"b'Hmm, do we have a Web SDK issue to stop setting `$(MSBuildAllProjects)` and something similar for other MSBuild files we ship?'"
15731,284494202,b'Will this light up in VS?'
15731,284501136,"b""Haven't looked. I believe dotnet/sdk cleaned all these usages up, so we should probably do the same in the websdk."""
15731,284501190,b'Yes. This overrides the version of the compiler bundled with VS and dotnet.exe'
15740,284841110,b'cc @AndriySvyryd '
15740,284841557,b'cc @AndriySvyryd'
15740,284842192,b'I simplified under the assumption that this was correct. Was it wrong?'
15740,284842574,b'Do I need to PR from a branch instead of a fork to verify this is OK?'
15740,284843844,"b""Yes. We still need ambient transaction coverage. At the time these tests were created .NET Core didn't support ambient transactions."""
15740,284845817,"b""It wouldn't help. Cosmos functional tests are currently completely broken."""
15740,284848383,b'Are we not going to run benchmarks on net461 for older versions of EF?\r\ncc: @divega @roji '
15740,284853684,"b'Thanks, will revert'"
15740,284855389,"b'Are we running them today? If so, I can revert this and we can postpone a decision until we target netstandard2.1'"
15740,284855704,"b""If not, I'll leave it like this and we can decide which runs are important when we set our perf goals."""
15740,284856004,b'Okay. Good to mere like this?'
15740,284858226,"b""In theory we could leave net461 in `<TargetFrameworks>` only when running on older versions (i.e. when `Configuration == 'Release22'`). Although I'm really not sure there's much value in that."""
15740,285277948,"b""Yes, we'll figure it out later if any changes are needed."""
15745,285186369,b'\xf0\x9f\x8e\x89 '
15745,285282519,b'Specify type string.'
15745,285282816,"b""Inline result. We don't need to calculate it if string empty constant\r\n"""
15745,285282968,"b'Or rather, re-use the result in calculation after if block\r\n\r\n---\r\nIn reply to: [285282816](https://github.com/aspnet/EntityFrameworkCore/pull/15745#discussion_r285282816) [](ancestors = 285282816)'"
15745,285283350,b'Can you make it DRY'
15745,285283587,b'`innerConstant.Value is bool value`\r\navoids the cast below'
15745,285283706,b'Merge ifs'
15745,285284057,b'This seems to miss the check that unary is Not expression. Can you please restructure the method so appropriate checks are applied'
15745,285284923,b'that was the plan - i somehow missed it in non-negated case'
15745,285286894,b'Use `|=` operator for shorthand'
15745,285287011,b'ProcessSqlFunctionExpression'
15745,285287080,b'Use Switch'
15745,285288159,b'Test nullability has no effect. The result and else result has effect on nullability of result of a case expression'
15745,285288646,b'Certain expressions like ElseResult could be null too. Is value of `_isNullable` correct in such cases? Are we not ending up with stale value if we are not resetting the value before each visit.\r\n'
15745,285288958,"b'not worth it, there are minor differences in the generated expressions. I will short-circuit the constant """" case however.'"
15745,285325293,b'Nit: use ternary'
15745,285325309,b'ternary'
15745,285325398,"b""We are deleting this file in Brice's PR. Should revert this change"""
15745,285325408,b'What is the correct result here?'
15745,285325429,b'Protected'
15745,285325456,b'Value is bool pattern match'
15745,285325499,"b'If value is not null then you can always return false. Likewise for block below. Basically, you can reduce constant IS NULL check to true/false by looking at the value.'"
15745,285325546,b'nit: Visit only innerUnary.Operand and then create the expression'
15745,285325560,b'Same as above & other blocks below too'
15745,285325612,b'Remove if above and use else if'
15745,285325736,b'Better represented by nested ifs with 1 condition at time\r\n'
15745,285325972,b'Just invert the arguments in ExpandNullableEqualNonNullable'
15745,285376092,b'Maybe just call these Visit* as elsewhere?'
15745,285376188,"b""I saw elsewhere that we use unary expression with ExpressionType.Equal to represent `x IS NULL` - is this how it's represent in C# expression trees (I'd expect a binary expression)? If not, any specific reason we're doing it this way rather than keeping it closer to C#?\r\n\r\n(a lot of these questions are just for my own understanding :))"""
15745,285376468,b'Is the intention to eventually integrate knowledge of specific functions here with regards to their null propagation behavior?'
15745,285376676,b'Personally for me I think the current grouping is more readable'
15745,285376837,"b'C# 8 switch expression FTW (more terse, more efficient):\r\n\r\n```suggestion\r\nprivate static ExpressionType Negate(ExpressionType expressionType)\r\n    => expressionType switch {\r\n        ExpressionType.Equal => ExpressionType.NotEqual,\r\n        ExpressionType.NotEqual => ExpressionType.Equal,\r\n        ExpressionType.GreaterThan => ExpressionType.LessThanOrEqual,\r\n        ExpressionType.GreaterThanOrEqual => ExpressionType.LessThan,\r\n        ExpressionType.LessThan => ExpressionType.GreaterThanOrEqual,\r\n        ExpressionType.LessThanOrEqual => ExpressionType.GreaterThan\r\n    };\r\n```\r\n\r\nIf you need to check whether negation is possible, we can have TryNegate.'"
15745,285377253,"b'This method already deals with a lot of cases, maybe split to one method for (outer) unary and a separate one for (outer) binary?'"
15745,285377374,b'Nit: expression-bodied method'
15745,285377432,b'Super nit: just single line'
15745,285377498,"b'Same as above, C# 8 switch expression'"
15745,285377663,"b'Does it make sense to include `{Starts,Ends}With`-specific logic in relational outside of the SqlServer-specific translator?'"
15745,285386589,b'In C# `x == null` is binary.\r\nIn Relational there is also `x == null` as SqlBinary but that would give null result when x is null. A null semantic proof expression would be `x is null` which is for us SqlUnary with ET.Equal. We are doing it differently because there are 2 ways you can write it in relational so we have both ways.'
15745,285386625,b'For built-in functions may be. DbFunction will have nullability propagation flag (soon). We can propagate it to SqlFunction fully probably.'
15745,285386663,b'Which one would be more performant? Readonly dictionary should give O(1) access. Methodcall may need to check through all cases (rejected ones) before reaching correct one.'
15745,285386714,"b""Let's not worry about formatting like this for now. Especially I have found it cubersome when I have to add something more to method (because logic change or even debugging purposes) and then it adds extra step. A code cleanup once query pipeline is done would fix all this."""
15745,285386736,"b""Isn't the null semantics issue in every relational provider?"""
15745,285389001,b'The we need to be explicit about the flags in block 3 & 4. It implicitly assumes value of the other flag which is not straight forward to understand.'
15745,285535463,"b""A switch over an enum is a switch over its underlying type - so over an int here, which in most cases will do an efficient lookup table under the hood. This is in general much faster than any dictionary - see benchmark below. Also no allocations whatsoever for the dictionary and its internals.\r\n\r\nNote that the difference here specifically may be negligible in the grander scheme - especially since this is query compilation only - but a switch expression also seems more terse so why not.\r\n\r\nAnd because it's so easy to do, here's a benchmark comparison:\r\n\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.11.5, OS=ubuntu 19.04\r\nIntel Core i7-6700HQ CPU 2.60GHz (Skylake), 1 CPU, 8 logical and 4 physical cores\r\n.NET Core SDK=3.0.100-preview4-011223\r\n  [Host]     : .NET Core 3.0.0-preview5-27626-15 (CoreCLR 4.6.27622.75, CoreFX 4.700.19.22408), 64bit RyuJIT\r\n  DefaultJob : .NET Core 3.0.0-preview5-27626-15 (CoreCLR 4.6.27622.75, CoreFX 4.700.19.22408), 64bit RyuJIT\r\n\r\n\r\n|           Method |     Mean |     Error |    StdDev |   Median |\r\n|----------------- |---------:|----------:|----------:|---------:|\r\n| SwitchExpression | 2.553 ns | 0.0884 ns | 0.1150 ns | 2.533 ns |\r\n|       Dictionary | 7.055 ns | 0.1993 ns | 0.4775 ns | 6.813 ns |\r\n\r\n```c#\r\npublic class SwitchEnum\r\n{\r\n    [Benchmark]\r\n    public ExpressionType SwitchExpression()\r\n        => SwitchMethod(ExpressionType.GreaterThanOrEqual);\r\n\r\n    [Benchmark]\r\n    public ExpressionType Dictionary()\r\n        => _dictionary[ExpressionType.GreaterThanOrEqual];\r\n\r\n    static readonly Dictionary<ExpressionType, ExpressionType> _dictionary\r\n        = new Dictionary<ExpressionType, ExpressionType>\r\n    {\r\n        { ExpressionType.Equal, ExpressionType.NotEqual },\r\n        { ExpressionType.NotEqual, ExpressionType.Equal },\r\n        { ExpressionType.GreaterThan, ExpressionType.LessThanOrEqual },\r\n        { ExpressionType.GreaterThanOrEqual, ExpressionType.LessThan },\r\n        { ExpressionType.LessThan, ExpressionType.GreaterThanOrEqual },\r\n        { ExpressionType.LessThanOrEqual, ExpressionType.GreaterThan },\r\n    };\r\n\r\n    static ExpressionType SwitchMethod(ExpressionType expressionType)\r\n        => expressionType switch {\r\n            ExpressionType.Equal => ExpressionType.NotEqual,\r\n            ExpressionType.NotEqual => ExpressionType.Equal,\r\n            ExpressionType.GreaterThan => ExpressionType.LessThanOrEqual,\r\n            ExpressionType.GreaterThanOrEqual => ExpressionType.LessThan,\r\n            ExpressionType.LessThan => ExpressionType.GreaterThanOrEqual,\r\n            ExpressionType.LessThanOrEqual => ExpressionType.GreaterThan,\r\n            _ => throw new ArgumentException(nameof(expressionType))\r\n        };\r\n    }\r\n```"""
15745,285537137,"b""That's going to depend on a provider's specific translation, no? It's true that for SQL Server and PostgreSQL we have the optimized translation which requires this, but there's nothing universal about that (e.g. another provider may actually have a compatible `STARTS_WITH()` function)... \r\n\r\nIn general it seems a bit odd to contain method-specific general translation logic in relational without the actual translation?"""
15745,285663798,"b'Provider does have option to override and remove this logic.\r\nOn higher level, I think of this visitor like this. Certain C# methods throw exception at runtime. Since we cannot translate that, we would explicitly convert throw to false.\r\nRegardless of providers having a compatible `STARTS_WITH()`, it would still given correct results.\r\nThe only different behavior possible when provider has a compatible function which also throws exception like C# and provider wants to throw exception, for that there is way out.'"
15745,285664592,"b""If switch is faster let's use it. Is it specific for Enum case only of any type? I would guess not all pattern matching is as cheap as enums over int."""
15745,285714669,b'left it by accident'
15745,285717510,"b""debatable, it's for relational null semantics so we cant use L2O as baseline. 162 is assuming null == null doesn't match, 405 is where they match. Seems like 162 should be the expected result."""
15745,285722054,"b""was thinking about it, but didn't want to switch the order of terms in generated sql. I guess its not a big deal tho - will DRY"""
15745,285722502,b'we would potentially be missing some optimizations'
15745,285730159,"b""But what makes {Start,Ends}With special that we're not doing this with all functions?"""
15745,285730631,"b""Find another function which throws for certain arguments and we will add those too. During our discussion, we decided explicitly that we won't try to find all such functions in advance. We will add functions based on feedback."""
15745,285731574,b'the reason why I didnt split them is so I can easily fall back to base.VisitExtension call. But I guess I can just return null in the VisitUnary/VisitBinary for unoptimized cases and test for that in the VisitExtension'
15745,285732833,"b'Here are the results for string keys, switch wins as well:\r\n\r\n|           Method |     Mean |     Error |    StdDev |\r\n|----------------- |---------:|----------:|----------:|\r\n| SwitchExpression | 13.29 ns | 0.2945 ns | 0.4317 ns |\r\n|       Dictionary | 23.10 ns | 0.4976 ns | 1.0387 ns |\r\n\r\nIn general, for small datasets switch should (almost) always be faster than a dictionary - when in doubt we can always do a quick benchmark to find out.'"
15745,285733528,"b""OK, let's leave it for now."""
15745,285733696,"b'Just a proposal, no strong feelings about it... :)'"
15745,285748464,b'this seems a bit awkward. Any better way to replace ContainsKey() check? @roji '
15745,285759415,b'indent'
15745,285759777,b'return null and use null check'
15745,285759905,b'or move back to dictionary\r\n\r\n\r\n---\r\nIn reply to: [285759777](https://github.com/aspnet/EntityFrameworkCore/pull/15745#discussion_r285759777) [](ancestors = 285759777)'
15745,285760290,b'Why do we need this?'
15745,285771047,"b'i think its a good suggestion, especially when/if we add more optimizations, the single method will become unreadable'"
15745,285772582,"b'was added by VS when i used c# 8.0 ""switch"" - will remove'"
15745,285772869,b'but then I need to use .Value everywhere - seems even more awkward'
15745,285776136,b'thinking to revert it back to dictionary for now just to get the feature in - will refactor into switch in future checkin if we come up with a nice pattern for the ContainsKey thing'
15745,285779757,b'Did we improve this?'
15745,285780783,b'...'
15745,285781334,b'Can we just do visit here rather than calling base in initial method?'
15745,285842532,"b""If we're OK with switch expressions, that's new to C# 8, as opposed to plain old verbose switch statements. Although for now I don't see that change."""
15745,285843650,"b""I think your force-push made some commits disappear, can't see this exact code.\r\n\r\nIn any case, I'd have a `TryReverse()` which returns bool (like `Dictionary.TryGetValue()`), upon which you could implement `Reverse()` (which throws if not found, like `Dictionary.this[]`)."""
15745,285844335,"b""(sorry, had a weird unrefreshed browser version where this PR wasn't merged yet)"""
15745,285844421,"b""(sorry, had a weird unrefreshed browser version where this PR wasn't merged yet)"""
15770,286267242,b'There should be function to change each element given most of the state are the same'
15770,286267374,"b'good idea, but will do it later, when I clean up the code'"
15770,286267895,b'Add line break as it was in previous'
15774,286541100,b'Just asking provider to provide us the function name is much easier approach. And that could be applied to anything which translate to function. It also gives npgsql chance to generate lower case names if wanted.'
15774,286550012,"b""I wasn't aware that postgre needed such thing. Let me re-think."""
15774,286549061,"b""The reason I did this, is that in PostgreSQL `COUNT()` always returns BIGINT (kind of the opposite problem as with implementing LongCount on SqlServer). So I need to apply an additional cast down to INTEGER.\r\n\r\nIn the old pipeline this [is actually done at the SQL generation step](https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL/blob/31c48ff5e584fd486bb21ce15aa435223c36f30f/src/EFCore.PG/Query/Sql/Internal/NpgsqlQuerySqlGenerator.cs#L132) but that's pretty ugly/hacky. Allowing providers to return an expression  in the MethodTranslatingExpressionVisitor seems flexible enough to allow for various provider customizations, without placing too much burden on the provider writer...\r\n\r\nWe could also have two layers of extension points (one for just the function name, another for the entire expression) but that seems like too much... If you don't like the way I did it I can always reimplement the same SQL generation hack on the new pipeline."""
15774,286551422,"b'By the way, I suspect customizations may also be needed [for AVG](https://github.com/aspnet/EntityFrameworkCore/blob/4fc085af247ff035ea23ce8c282df53b52b6c20a/src/EFCore.Relational/Query/Pipeline/RelationalQueryableMethodTranslatingExpressionVisitor.cs#L105) - the current code seems to make some (SQL Server?) assumptions on what types AVG returns. [On PostgreSQL AVG returns](https://www.postgresql.org/docs/current/functions-aggregate.html):\r\n\r\n> numeric for any integer-type argument, double precision for a floating-point argument, otherwise the same as the argument data type\r\n\r\nSo it may be necessary again for Npgsql to override that entire expression, but not the rest of TranslateAverage().\r\n\r\n'"
15774,286557368,"b'SqlServer:\r\n- Double precision for floats\r\n- Matches argument type for others\r\n\r\nSQLite\r\n- Real (the only data type for floating point no) for any result.\r\n\r\nC#\r\n- Double for int/long\r\n- Matches argument type for others\r\n\r\nSo for int/long we need to cast them in advance for accurate result (I am not sure what exactly numeric type in postgre is and how it maps to a double in C# so this may or may not needed in postgre)\r\nFor float since both the providers are doing it (even postgre), we need to cast it to float on server side after calculating average.\r\n\r\n'"
15774,286571153,"b""PostgreSQL numeric is arbitrary-precision, another name is decimal ([just like SQL Server](https://docs.microsoft.com/en-us/sql/t-sql/data-types/decimal-and-numeric-transact-sql?view=sql-server-2017)). So the current logic seems OK for PG as well - for int/long PostgreSQL returns numeric, which we then must case to double for C#.\r\n\r\nHowever, the more general point is that the actual expression seems to be a good candidate for provider-specific nuances, whereas the rest of TranslateAverage() is totally provider-independent (i.e. push select down into subquery), that's why it may make sense to factor the expression out."""
15774,286661723,b'Not sure. If we there is specific processing needed because how C# works and if it is generalized across many providers then we integrate it in relational only. Providers which are having difference can override.'
15771,286281604,"b'nit: alias: """" for readability, same goes in other places '"
15771,286282086,b'repeated 3 times - DRY'
15771,286282174,b'newNewExpression ;P'
15771,286660324,b'is this the right place for this method?'
15771,286660829,"b""For now let's keep it here. It is used internally and not in core yet. We can DRY up code later if we see it is being used across providers."""
15774,286665895,"b""I agree with that, my only issue is that if a provider *does* need to override, they have to copy-paste code from relational that seems bad. TranslateCount(), for example, has two lines for generating the expression and 19 other lines doing various things (pushing the select down into a subquery if distinct/limit/offset, clear ordering, manage projection...). It also seems slightly dangerous because if we ever fix a bug in that code it won't be applied to providers who have overridden."""
15774,286698053,"b""I am not sure I understand how you want to split the code. Like all the type casting is provider specific but pushdown is not. Regardless, specifically for aggregate operators, we need to think in terms of GroupBy translation in future. Perhaps hanging it of SqlTranslator could also help but I don't have GroupBy translation fully figured out atm. So to fix this issue, either we can go back to the way it worked in past (even though hacky) or do this task at later stage."""
15774,286720020,"b""Isn't the current approach in this PR enough? It allows provider to return any expression (so including casts or other things) but still keeps pushdown and other details in relational. Just a way to split the provider-specific bits from the non-provider-specific ones.\r\n\r\nThis isn't necessary urgent and I don't have super strong feelings about it - let me know what you prefer and I can do that."""
15774,286720560,b'Current approach in PR does not look right.'
15782,286720896,b'YES! please only regions around hashcode'
15774,286721994,"b""OK, no problem - for now I will simply allow providers to define the function names, and I'll do the same hack for PostgreSQL. Will update the PR tomorrow."""
15774,286722239,b'Leave this issue for later unless you are fixing it the way it is done in old pipeline. (which may be throw away work so not necessary to fix right away)'
15774,286723136,"b'OK, will defer this for later then.'"
15789,287109498,"b'delete the comment, since ""temporary hack"" has been removed'"
15789,287109676,b'delete'
15789,287110876,b'IncludeExpression should prolly get moved to more general place. This can be done during cleanup tho'
15789,287114912,"b'entity expression can be another include for cases where we chain include on the same entity, e.g. \r\ncustomers.Include(""A"").Include(""B"");\r\n\r\nwe would generate the following:\r\n\r\ncustomers.Select(c => IncludeExpression(IncludeExpression(c, ""A""), ""B"")'"
15789,287126263,"b'```\r\nShapedQueryExpression: \r\n    QueryExpression: \r\n        Projection Mapping:\r\n        SELECT o.OrderID, o.ProductID, o.Discount, o.Quantity, o.UnitPrice, o0.OrderID, o0.CustomerID, o0.EmployeeID, o0.OrderDate, p.ProductID, p.Discontinued, p.ProductName, p.SupplierID, p.UnitPrice, p.UnitsInStock\r\n        FROM Order Details AS o\r\n        INNER JOIN Orders AS o0 ON o.OrderID == o0.OrderID\r\n        INNER JOIN Products AS p ON o.ProductID == p.ProductID\r\n    ShaperExpression: \r\n        {\r\n            namelessParameter{0} = EntityShaperExpression: \r\n                EntityType: OrderDetail\r\n                ValueBufferExpression: \r\n                    ProjectionBindingExpression: /0\r\n            Include(\r\n                namelessParameter{0}, \r\n                {\r\n                    namelessParameter{1} = EntityShaperExpression: \r\n                        EntityType: Order\r\n                        ValueBufferExpression: \r\n                            ProjectionBindingExpression: /5\r\n                    return namelessParameter{1}\r\n                }, Order)\r\n            Include(\r\n                namelessParameter{0}, \r\n                {\r\n                    namelessParameter{2} = EntityShaperExpression: \r\n                        EntityType: Product\r\n                        ValueBufferExpression: \r\n                            ProjectionBindingExpression: /9\r\n                    return namelessParameter{2}\r\n                }, Product)\r\n            return namelessParameter{0}\r\n        }\r\n```\r\nThis is how it works ;)'"
15789,287131618,b'cc: @roji \r\nThis is how we process the materializer and convert nested include to flat structure.'
15761,285788663,b'\xf0\x9f\x99\x84 SemVer much?'
15761,286214136,b'Agreed. Please file an issue on the SqlClient repo.'
15761,286238269,b'Remove from Version.Details.xml too'
15801,287570349,b'So much of deleted code. \xf0\x9f\x92\xaf '
15801,287570356,b'Why do we need AsEnumerable? YAGNI.'
15806,287576911,b'You can delete the old one and reuse the name'
15806,287576925,b'Drop whatever nodeType is unnecessary to get the tests passed. Some of them may not occur anymore due to funcletizer not using relinq'
15806,287577234,"b""Don't all of them make sense though? I'm also not sure I've seen tests for some of these scenarios... Maybe I'll add them."""
15806,287577316,"b'Yeah, right now all the tests are just using a parameter List - not exercising the other ways to specify a source. Will modify the tests to exercise the other options.'"
15806,287577346,"b""While evaluating parameters for fromSql I noticed the difference. Since we evaluate the largest subtree now.\r\n```C#\r\nvar a = 1;\r\nnew List<int>\r\n{\r\n     a,\r\n     2\r\n}\r\n```\r\nAbove will generate just 1 parameter of type List<int>. Earlier it used to generate parameter for just a hence we got weird nodes in expression tree. If list like that is somehow correlated with server, I don't think we can translate it."""
15806,287577371,"b""Few variations to try out (since I don't remember all tests),\r\nList Inlined/List from closure/Partial list from closure. Likewise for array.\r\nBy default wherever Parameter can appear, a constant can also appear when using compiled query version."""
15806,287577385,"b""please don't name it e. Hurts my eyes to figure out what is e. There are no fixed guidelines. I prefer to use short name only inside lambdas using linq since it does not go too far to lose the context how the variable is defined"""
15806,287577398,b'Probably this null check not needed'
15806,287577410,b'Nice'
15806,287577423,"b'Are we moving towards python like syntax?\r\nWhile I am not opposed to this, we should define a consistent guideline as a team.'"
15806,287577468,b'Identify non-parameter expression outside of block so that it can be used without checks?'
15806,287577469,"b""I've used this ever since the syntax was introduced, to me it makes a lot of sense precisely in cases like this where two separate lines just take up more space without readability value.\r\n\r\nNot sure of the process for introducing new style :)"""
15806,287577495,b'Just bring up in next meeting.'
15806,287577536,"b'Changed to full names - code is much more verbose but no problem. I tend to use `e` as the expression handled by the the specific function, which helps not to lose context - but not important.'"
15806,287577713,b'Check out d56bd0a '
15806,287577717,"b'OK, simplified the code - take a look.'"
15806,287577743,b'you can re-use definitions from LinqMethodHelpers'
15806,287577749,"b'So with new tests, do we need all of these?'"
15806,287577807,"b'nit: you could probably filter by method info first, to weed out the biggest number of cases before doing other calculation'"
15806,287577874,b'Done'
15806,287577923,"b""You are right - I dropped ListInit and NewArrayInit and it worked, I'm not sure I understand why. Removed these checks."""
15806,287577934,"b""Nice! I didn't know this existed."""
15806,287577936,b'I can explain on whiteboard ;)'
15811,287579090,"b""For my understanding: this means that if you project from a query that has distinct, that query gets pushed down into a subquery, right? If so, it's not clear to me why the distinct should play a role here... But feel free to ignore if you have no time to explain."""
15811,287579606,"b'Distinct plays a role because,\r\nWe put columns in the final projection which are needed to materialize the result. So essentially we replace the projection when in TranslateSelect.\r\nIf you do `cs.Distinct().Select(c => c.City)` then above logic could give rise to different results. If distinct is applied without a subquery then we would be doing distinct on City column only. But we want to apply it to all columns of Customer. Hence we have to cause a subquery so that Distinct is applied to appropriate columns even though projection later narrows down columns.'"
15811,287579630,b'Following test fails without above\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/b937ffa751486cbe286d726c93d4739e1f250845/test/EFCore.Specification.Tests/Query/GearsOfWarQueryTestBase.cs#L3947-L3959'
15752,285365008,b'This would be a big no. It would show up in intellisense to users.'
15752,285365100,b'This should be working since Lift subquery is implemented. '
15752,285365108,b'This should also be working'
15752,285365127,b'Need to comment this else it would log a lot of messages'
15752,285374952,"b'Slipped through, fixed.'"
15752,285375210,"b""Absolutely. Made internal for now, we can always revisit if we think it's necessary to expose something to providers."""
15752,285375623,b'Will try to reenable (severe MSBuild issues at the moment it seems).'
15752,285378015,b'Fails with `collection selector was not NavigationExpansionExpression`'
15752,285378017,"b'Yep, these pass.'"
15752,285386781,b'Any reason this method is internal rather than private?'
15752,285530519,b'Just so that we can do `nameof()` on it to identify it ([see here](https://github.com/aspnet/EntityFrameworkCore/pull/15752/files#diff-766ae5e613b973ec241beecc040a23c5R40)).'
15752,285664956,b'File a new issue for this. This seems to be error in nav expansion rather than translation.'
15752,285713790,b'Done: #15763 (changing skip message to reference).'
15752,285716309,b'FromSqlOnQueryable'
15752,285716629,b'There is no difference in obsolete and non-obsolete one. Why there are 2?'
15752,285716768,b'Exception message review from @divega'
15752,285717953,b'What about this?'
15752,285724942,"b""You're right, will change."""
15752,285791801,b'Why do you need this cast'
15752,285796829,"b""My first reaction was to simplify this to something like:\r\n\r\n> Calling `FromSql` in arbitrary locations in a query is no longer supported. Call FromSqlRaw() or FromSqlInteroplated() directly on the DbSet at the root of a query instead.\r\n\r\nHowever, this helped me realize that I now prefer just leaving the method stub with ObsoleteAttribute and IsError = true, because:\r\n\r\n- The compile time error seems an order of magnitude more helpful than a runtime error that may end up happening in production\r\n- It makes our guidance (in this case, the obsolete message) straightforward \r\n- The value of still allowing FromSql() to work on DbSet<T\\> seems super small to me right now\r\n- ~~This should make https://github.com/aspnet/EntityFrameworkCore/issues/15763 irrelevant~~ (turns out we still have a bug to fix)\r\n\r\nSorry if I didn't see it this way initially. \r\n\r\ncc @ajcvickers """
15752,285841219,"b""Because `Expression` and `Provider` are explicit interface implementation methods on `DbSet<>`. We didn't need this before since the method was accepting `IQueryable<>` instead of `DbSet<>`."""
15752,286982440,b'Move it inside expression-based method region. We need to do that for all other expression at some point but not critical.'
15752,287016818,b'Done.'
15752,287753607,"b""I some how missed this comment before... I agree that a compile-time error is better here than a runtime.\r\n\r\nNote that the obsoletion of `FromSql()` is now due to two reasons (raw/interpolated and placement), so for now I'm committing with the following message:\r\n\r\n> For returning objects from SQL queries using plain strings, use FromSqlRaw instead. For returning objects from SQL queries using interpolated string syntax to create parameters, use FromSqlInterpolated instead. Call either new method directly on the DbSet at the root of the query.\r\n\r\n(but can change this of course)."""
15806,287854882,"b""I've seen this a few places and like it, but agree we can discuss. At the same time we can talk about (_shuddering to say it_ ) REGIONS! """
15811,287893741,"b'Of course, makes total sense! Thanks for the explanation.'"
15806,287897569,"b""I think I've seen some unauthorized regions lurking abut in @smitpatel's new pipeline code..."""
15806,287898710,"b""Yes, that's what I was referring to. ;-)"""
15383,288091878,"b""Aren't we visiting `memberExpression.Expression` twice in this method?"""
15820,288200706,b'Can you point me to the test which is failing so I can understand the type of tree encountered?\r\n\r\nIf this is dependent on a service then we can move the method to SqlExpressionFactory rather than extension method. Everyone using this method now having to take service looks ugly when they have already one service available.'
15820,288204536,b'@smitpatel: All these Can_query... tests'
15820,288204957,"b""It's the type mapping tests--see my comment. Keep in mind that this is just to unblock tests. I fully expect it to change in the future when we have working type inference."""
15820,288209184,"b""Let's go ahead with this then. """
15811,288337766,"b'Just to annoy, [PostgreSQL supports the following](https://www.postgresql.org/docs/current/sql-select.html#SQL-DISTINCT):\r\n\r\n```sql\r\nSELECT DISTINCT ON (expression, ...) x, y FROM table;\r\n```\r\n\r\nThis means we can generate something like:\r\n\r\n```sql\r\nSELECT DISTINCT ON (table.id) x FROM table;\r\n```\r\n\r\nor even:\r\n\r\n```sql\r\nSELECT DISTINCT ON (table.*) x FROM table;\r\n```\r\n\r\nSo Npgsql could override and not pushdown into a subquery, opened https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL/issues/894 to track.\r\n\r\nBTW we should be able to avoid the pushdown if all columns are being selected (e.g. star projection), right?'"
15811,288348340,"b""Star projection is short circuited beforehand.\r\nIf each column is manually projected out then we would still end up with pushdown since we don't know in advance if you are selecting all columns & by the time we know, we cannot change the underlying SelectExpression. Value is not worth the cost in such corner case."""
15810,287578325,b'This is incorrect.'
15810,287578350,"b""None of the tests would pass actually because we don't translate DateTime subtraction to server since it returns TimeSpan. Recently I added check to fall back to client eval. So this test would start failing once you rebase."""
15810,287578387,"b'Ah, just did that and was wondering what happened there. Any suggests on a good way to test this? Add a column with a TimeSpan type to the model?'"
15810,287578395,b'Yes. We need a column with TimeSpan. @maumar  can suggest where to add.'
15810,287578452,"b""Yes, it felt it. I had some trouble with the startDate being a DateTime and endDate being a TimeSpan. The InferTypeMapping was producing a DateTime type for both and blowing up on a mismatched parameter type in the SqlClient. It was probably my unit tests being incorrect, I've rolled it back for now. Once we get a TimeSpan column in the model, I'll test it again and see if I get any trouble with it."""
15810,288736838,b'@Muppets BuiltInDataTypesTestBase has a time span column - you can put the tests there'
15809,288320503,b'nit: var predicate = ... ? ... : ...'
15809,288323034,b'alias:'
15809,288339641,b'And maybe even move into ApplyPredicate() below'
15809,288339737,b'nit: combine into condition above'
15809,288340072,b'nit: ternary operator'
15809,288340191,"b'nit: inverse the logic, first checking `derivedType == null`, would reduce nesting afterwards.'"
15809,288350870,b'split into Index (for scalar) and IndexMap (for entities)? its bit confusing as it is'
15809,288753667,b'Can use the new TryGetEFPropertyArguments (just merged to master)'
15809,288779679,b'After converting to ternary above there is no nesting.'
15820,288847568,b'Moving VS pragma to Resharper disable?'
15823,287924668,b'Use wrapping expression and avoid state. Look into nav expansion expression.'
15823,288098604,"b""I looked into nav expansion (a little bit). I can see where the wrapping expression is useful when you want to possibly revisit nodes (e.g. there's more than one visitor involved, like PendingSelectorSourceMappingGenerator), and therefore share the state calculated once with somebody who will look later.\r\n\r\nBut I'm not seeing the benefit in this specific case, where we just run the visitor once and simply flow relatively simple state forward... It seems like things would actually get more complex (e.g. with the need to reduce to get rid of the wrapping expression). Maybe I'm not getting it - we can have a chat later today.\r\n\r\n(my comment above was specifically about possibly replacing the dictionary data structure with something that could be more efficient - not about the general design)."""
15823,288195898,"b'Visitor with states have issues with recursive behavior. Need more states or need to initialize visitor again. Further, when you put private states inside, anyone deriving this class does not have access to it and making it hard to override only portion. This has caused us many issues in previous pipeline. Most notably in DefaultQuerySqlGenerator. Hence, as much as we can make visitors without state, we are going to opt for it.'"
15823,288232712,"b""We can certainly make the two state fields protected for subclasses, I don't think that's an issue.\r\n\r\nIn this specific case (not in general), I'm not seeing how wrapping every node with another one (and needing to unwrap afterwards) would help... The complexities of what needs to flow and where would still need to be addressed regardless: parameters need to flow when we go into a lambda, and removed when we go out - etc. etc. To me it feels like it would become more complex,  not less complex - do you have a specific example of why that wouldn't be the case?\r\n\r\nAlso, using a stack here also seems to make sense as it mirrors the stack frames of actual execution of the code.\r\n\r\nUnless you object, I can finish the work in the current design and we can see - let me know."""
15823,288341192,"b'actually, we dont need to compare all the key properties, just one is enough. - https://github.com/aspnet/EntityFrameworkCore/issues/15080'"
15823,288341427,b'only applies for comparisons to null'
15823,288342810,"b""Yeah, that's actually already the case: `CreateKeyAccessExpression()` above will always generate an EFProperty expression for the first key column if we're comparing against null."""
15823,288343148,"b'probably copied from other place that would do more generic property access - we were using EF Property ""just in case""   to support access to shadow props'"
15823,288343377,"b'yup, just saw that - so the code below will never as AnonymousObject - we can simplify'"
15823,288343666,"b'Makes sense, I always forget those. Thanks for explaining!'"
15823,288343829,"b""That's right... will do, thanks!"""
15823,288344819,"b'any reason why you are comparing roots rather than entity types directly? if entities are not same exact type, they cant be equal, no?'"
15823,288347099,"b'this is where the real ""fun"" starts, as we need to remember multiple entity types at the same time. probably you will need some sort of structure that associates entity type with it\'s member path (inner/outer for join & groupjoin, or whatever the anonymous type property names user specifies'"
15823,288347363,"b""also, take a look at mine CombineAndRemap or smit's ReplacingExpressionVisitor - those things are SUPER useful when dealing with anonymous projections"""
15823,288348106,"b""I think it should be ok to compare to entities as long as they're part of the same hierarchy, no?"""
15823,288348531,"b'its ok for sure, but I thought it was unnecessary'"
15823,288348895,"b""Thanks for the tips. Yeah, left the best for last... I intend to attack anonymous types and the various join methods tomorrow. I already have an arbitrary number of parameter bindings, the plan is to make those point to a dictionary representing the anonymous types (i.e. mapping properties to entity types). We'll see where it leads!"""
15823,288523460,"b""Actually thinking about this again, if we want to fully support owned/shared entities this is wrong... We need to support comparing two entity types which are not in the same type hierarchy, as long as their primary keys are structurally identical (same column list, same types, etc.).\r\n\r\n@smitpatel @maumar can you confirm I'm getting this right?"""
15823,288534466,"b""(just noticed that that's exactly what my code comment says :))"""
15823,288805619,b'add test for nested anonymous type'
15823,288813802,"b""Unfortunately it's not the only missing test :/"""
15823,288816919,"b""yup, some of the joins would also be interesting, and making sure composability of the approach works in general (join + join and then entity equality in the outer join's result selector) as well as entity equality with a parameter from some outer scope"""
15823,288822996,b'ShipAddress is ignored in the northwind context (see NorthwindContext.cs) - I wonder how you get this to work and produce sql for the AssertSql method.'
15823,288954321,"b""After asking @smitpatel we should actually not compare different owned/shared entity types - they will never be the same. So we only compare entity types if they're in the same hierarchy."""
15823,288954495,"b""Nicely spotted, the test was not actually passing, and you helped me figure out why :) After removing ShipAddress it's fine."""
15823,289033250,b'Have added some tests but can/should definitely add more.'
15823,289113870,"b""can groupjoin be handled by the same method as join? the type of second argument in the resultSelector is IEnumerable<inner>. its not a big deal because we dont translate queries like that at the moment (possibly never will), but might be worth making sure that we don't throw any nasty exceptions. query would be something like:\r\n\r\ncustomers.GroupJoin(orders, c => ..., o => ..., (c, g) => new { c, grouping = g.Where(gg => gg == c.Order) }"""
15823,289119279,"b""The only task of this visitor is to follow the entity type of things, so that when a comparison is encountered it knows how to generate the key access expression. So it actually doesn't really care of it's a collection or a scalar - I *think* it should be ok."""
15823,289265884,b'If you want to initialize new array only if any argument change then refer to VisitAndConvert from expressionvisitor.'
15823,289266512,b'use arguments even if it is verbose. Coding guidelines say that somewhere \r\n'
15823,289266704,b'For enumerable methods there is not quote around it'
15823,289266758,b'As mentioned above'
15823,289267455,b'You could just use coalesce rather than pattern matching'
15823,289267606,b'Why do we need ref parameters'
15823,289267849,b'Store only logger inside visitor rather than whole QCC'
15823,289268134,b'Unwrap last navigation does not get info for navigation before. It would specifically not work well for owned when the member chain is longer than 1 navigation which can be removed in case of owned navigations. Owned references can be same only if owner is the same'
15823,289268287,b'This seems like unnecessary more work when we could just return first argument without worrying about propertyName.'
15823,289268640,b'This is re-inventing wheel differently for limitation of expressionvisitor.'
15823,289378066,b'assuming you mean `arguments` as opposed to the full `methodCallExpression.Arguments` - will change.'
15823,289387487,"b""This made more sense in an earlier version - I've refactored to remove it."""
15823,289390549,"b""I might be misunderstanding, but the only point of this code is in case a collection is compared, in which case we want to rewrite the expression before the collection navigation (and give a warning). Doesn't that work? What is the connection with owned entities?"""
15823,289394022,"b""OK, changed.\r\n\r\nThe point of the `Try*()` pattern is also to help the compiler understand that there can't be nulls there (or array out of bounds) etc. Here I agree it's less relevant."""
15823,289395811,"b'You mean because of the statefulness, right?'"
15823,289400218,"b""Unless I'm missing something, I don't think it's possible here - because of the stateful design. We don't just want to visit the children, we want to also get their return type and populate the dictionary with them. It's true that this is one of the difficulties with the stateful design - without state we'd have simply visited all children and then enumerated them to get the type info out."""
15823,289400282,b'Same response as above.'
15823,289405574,b'Thanks! Fixed.'
15875,289513555,"b'add some comments on why you are not visiting Projection expression here, or perhaps add a dedicated property to figure out collection index'"
15875,289522481,b'nit: collectionId should start at 0'
15875,289523243,b'I was just checking if you actually reviewed my PRs :trollface: '
15875,289525770,"b'rename to AppendOrderby/AppendOrdering - the current name suggests theres already ordering to be expected, but in fact function works as OrderBy when no orderings are present'"
15875,289526046,"b'and maybe ""ApplyOrderBy"" should be ""SetOrdering"" to indicate that previous orderings are over-written'"
15875,289528815,b'worth adding a helper for this - we learned that this list of conditions is constantly expanding/evolving. We are bound to forget updating it in other places'
15875,289532381,b'add TODO for handling composite keys'
15875,289552243,"b'nit: missing (, alternatively remove ) at the end'"
15875,289552527,b'??'
15875,289553264,b'add TODO'
15875,289557228,b'nit: remove newline'
15875,289585792,b'Once we have many of joins working I will add it. There are slight differences in terms of when each of it is needed.'
15930,290097038,b'we need to fix this in case of subqueries eventually.'
15930,290097172,b'#15559 is still open for that. I will add notes from our discussion there.'
15945,290509178,b'Copy/paste'
15945,290509244,b'C/P'
15945,290513005,b'Was this a bug?'
15945,290513435,"b'Yes, perf bug'"
15942,290540990,b'Merge with the other for each with if on shadow property'
15951,290537734,b'this entire code will be removed once entity equality is in'
15965,290955989,b'what about nested convert?'
15965,290956246,"b""entityType can't be null at this point?"""
15965,290963312,"b'Not supported. Multiple cast is anyway redundant because all EntityTypes are in same hierarchy. If we see customer asking for it, we will look into it.'"
15965,290963381,b'It actually can be. Let me update.'
15965,290963459,b'EntityShaper would never give null entityType but the converted type could be unmapped and hence entityType could be null.'
15965,290964456,b'Updated. Changed it to client eval.'
15920,290098453,b'EE supposed to convert Queryable<TEntity>.Contains(TEntity) to Contains over PK when single PK column'
15920,290098587,"b'Is object cast related to the query? If not, remove'"
15920,290099914,b'drop 2'
15920,290100796,b'Nice!'
15920,290101043,b'use visitedExpression.'
15920,290101125,b'Visiting arguments twice'
15920,290101192,b'Visit inner and reconstruct'
15920,290101794,"b'DRY (very similar code is in NavigationExpansionHelpers). Can be done in future checkin but probably good idea to add TODO, so we dont forget ;)'"
15920,290102105,b'Is SingleOrDefault safe?\r\n'
15920,290102147,"b""Isn't LambdaParamCount == 0 equivalent to singleLambda being null"""
15920,290102651,"b'i would not make it reducible, but rather prune the nodes explicitly with a dedicated visitor (as you are already doing)'"
15920,290102909,b'Look for TryGetElementType'
15920,290103069,b'Break down into individual lines. readability is reduced when there are too many of assignments'
15920,290103413,"b'or better yet, TryGetSequenceType'"
15920,290103478,b'Should store navigation chain instead. For Aggregate we need to trim down navigation chain upto the root'
15920,290103551,b'Should store using Member rather than string perhaps'
15920,290103945,"b'It would be more beneficial if you visited inside the rewriting function.\r\nFunction would visit left & right & find wrappers. If they match (with or without removing matching navigations which can be removed using unwrapnav), you can rewrite key equality on original nodes directly.'"
15920,290104180,b'but we should convert everything Queryable in advance too.'
15920,290105635,b'#15931'
15920,290224786,"b'Does not compile otherwise, because ""Cannot implicitly convert type \'System.Linq.IQueryable<int>\' to \'System.Linq.IQueryable<object>\'."". Probably because `ObjectDetail.ProductID` is an int (where Customer has a string ID?).\r\n\r\nChanging to simply return OrderDetails itself instead of its ID, seems OK.\r\n\r\n'"
15920,290225868,"b'Changed, although elsewhere the visited are usually referred to as newLambda, newMethodCall, etc. Not a big deal.'"
15920,290226204,"b'Good catch, thanks!'"
15920,290226583,"b""Anything wrong specifically with the way it's being done? In both branches (EntityReference or not) we have to construct the same visited new MemberExpression, we'd have the same code twice..."""
15920,290228564,"b""I actually moved this code from ExpressionExtensions.cs since it wasn't being used by anyone. Should I revert, do you need this exactly?\r\n\r\nAdding a TODO now in any case."""
15920,290231475,"b'Oops, was somehow under the impression SingleOrDefault returns null for multiple... Correcting.'"
15920,290232725,"b'The idea was to detect either no lambdas, or a single lambda with a single parameter. But as you noted above SingleOrDefault throws on multiple lambda parameters, so I changed the logic'"
15920,290238511,"b'Thanks, cool that these exist! Although we should rename to GetSequenceType (and maybe add bool-returning TryGetSequenceType) to align with C# standards.\r\n'"
15920,290239425,b'Agree on second look...'
15920,290248604,"b""Are you referring to GroupBy specifically, and how to handle the resulting `IEnumerable<IGrouping<TKey,TSource>>`? I was thinking of handling this in a similar way as anonymous objects (but haven't thought it through yet).\r\n\r\nEither way, can we defer this until GroupBy is actually working? Could also be post 3.0."""
15920,290253339,"b""It's a nice idea but things get a little bit complicated, as strings still need to be provided from EF.Property accesses... We could have two `TraverseProperty` overloads - one with string and one with MemberInfo - but it seems it doesn't make the code better. If you feel strongly about it I can do it."""
15920,290254824,"b""This is actually how the older (stateful) version worked. But the rewriting can abort, e.g. because neither side has known entities (or one side is an anonymous object) - at that point we've already visited, and to avoid double visitation we have to pass the visited expressions back out, which is why there used to be two `ref` parameters. You didn't like it :)"""
15920,290315631,"b""We don't have to worry about how older version worked. It depends on the logic or requirement of any rewrite.\r\nIf you can look at visited expression and rewrite something from them only, then your helper method either returns rewritten expression or null at which you can create default expression.\r\nBut if your helper method requires access to old or requires visiting then helper method can deal with those expressions fully and always return a non-null result (optimized or default). At the end of the day, it's just a private (or protected) method so it is not black and white."""
15920,290316499,b'Anonymous types must have members and would be accessed via members only hence suggestion. But I see why we need strings (though they will not be used for anonymous type member access).\r\nYou can leave this as is.'
15920,290317017,b'Owned entities aggregate.\r\n`c1.OwnedNav1.OwnedNav2 == c2.OwnedNav1.OwnedNav2` should be equivalent to `c1.Id == c2.Id`'
15920,290319937,"b""we use expressionType ending with expression as parameter name (e.g. memberExpression)\r\nWhile visited one can be suffixed with either new or visited or updated (I have less preference for new) but it still captures the expressiontype name. Certain expression type names are fine without expression ending but not all. `newMethodCall` would not be confusing but newMember is confusing whether it is a memberInfo or memberExpression. In IDE name shouldn't matter much since auto-complete will give you suggestions but reading on github becomes harder. So I tend to more verbose if it makes easier. (Haven't you seen @maumar's 50 character long variable names?) For consistency in ExpressionVisitors, follow the guidelines in first 2 lines."""
15920,290320371,b'Do you need to use `AssertQueryScalar` instead?\r\nAssertQuery works for reference types only.'
15920,290320557,b'You can scope this out of this PR and file an issue and link it here.'
15920,290321415,b'I did not realize we are passing updatedExpression in first branch.'
15920,290371372,"b""It is interesting that EntityType can be null too since entity reference should be referencing an entityType.\r\nProbably, we are re-using same expression to store the shape & reference itself rather than composing.\r\nI have some idea in mind. But let's discuss it after this PR is merged.\r\n\r\n"""
15920,290395273,"b""I don't understand...\r\n\r\nYou're proposing that I visit the operands in VisitBinary instead of in RewriteEquality. If RewriteEquality cannot rewrite (e.g. because the operands aren't entity-referencing), we still need to construct a new BinaryExpression from them, right? Since this needs to happen in VisitBinary and not in RewriteEqualiy, that would mean we need to pass the visited operands out from RewriteEquality back to VisitBinary.\r\n\r\nThis can be done by having RewriteEquality use ref parameters, but I don't really see the advantage over the current factoring... """
15920,290395896,"b'Yeah, the name `EntityReferenceExpression` is imprecise here as it can refer to an anonymous object type. It was previously called `TypeInfoWrapperExpression` or similar. We can rename if this bothers you.'"
15920,290397187,"b""Ah, I see now - make sense. That's special handling for owned entities (i.e. doesn't occur in any other case), right?\r\n\r\nThis shouldn't be too hard to do, but maybe it's better to wait until owned entities are implemented (#15285)? Or should they already be working?"""
15920,290399891,"b'> Since this needs to happen in VisitBinary and not in RewriteEqualiy\r\n\r\nThat is not true.\r\nIf one finds `a == b` then just pass it off to RewriteEquality function. The function will visit children, rewrite if needed. If cannot rewrite then construct the updated binary expression and return.'"
15920,290401239,"b""But the point of RewriteEquality is to contain the common logic between VisitBinary and VisitMethodCall (for `object.Equals()`), but keep the non-common logic in the latter. You think it's preferable for RewriteEquality to know binary equality vs. the two types of `object.Equals()`? \r\n\r\nBTW the same would have to be true of unpacking the operands - there are 3 options. These seem like they really belong in VisitBinary/VisitMethodCall (otherwise they'd have to be duplicated there anyway, to recognize `object.Equals()`)."""
15920,290402288,"b""You can leave name as is. If we split it out in 2 then name won't be issue, else we can decide during API review."""
15920,290402397,b'We can defer.'
15920,290404678,b'OK.\r\n\r\nBTW are we treating this as a public surface API?? I was sure this would be pubternal...'
15920,290405131,b'API review is for that only. \xf0\x9f\x98\x89 '
15920,290407994,"b""That's why I asked... :) Seems a bit extreme to expose so much gritty internals as public!"""
15920,290408145,b'#15285'
15920,290433446,"b'its fine, when someone needs a similar code they can do the DRYing '"
15920,290442238,"b""This seems to be necessary for ReplacingExpressionVisitor - if we have nested lambdas, then parameter expressions wrapped by a previous replace for an outer lambda are encountered during the replace for an inner lambda.\r\n\r\nBy the way, I think ReplacingExpressionVisitor may need to have the following, to ensure that it doesn't make extension nodes disappear:\r\n\r\n```c#\r\nprotected override Expression VisitExtension(Expression expression)\r\n{\r\n    // Leave extension nodes in place unless a replace actually occurs within their reduced form.\r\n    if (!expression.CanReduce)\r\n    {\r\n        return base.VisitExtension(expression);  // This throws\r\n    }\r\n\r\n    var reduced = expression.Reduce();\r\n    var visited = Visit(reduced);\r\n\r\n    return reduced == visited ? expression : visited;\r\n}\r\n```\r\n\r\nHere's a test the demonstrates the issue:\r\n\r\n```c#\r\n[ConditionalTheory]\r\n[MemberData(nameof(IsAsyncData))]\r\npublic void Inner_parameter_in_nested_lambdas_gets_preserved(bool isAsync)\r\n{\r\n    AssertQuery<Customer>(\r\n        isAsync,\r\n        cs => cs.Where(c => c.Orders.Where(o => c == new Customer { CustomerID = o.CustomerID }).Count() > 0),\r\n        entryCount: 90);\r\n}\r\n```\r\n\r\nBasically, as explained above the `c` inside the nested where is first rewritten to an EntityReferenceExpression when we reach the outer lambda. But when we reach the inner lambda, the 2nd ReplacingExpressionVisitor sees the extension node wrapping `c` and reduces it - making it disappear.\r\n\r\nI tried to make this change but it seems to break lots of other tests for various unrelated reasons.\r\n\r\n@smitpatel does this make sense? Should I open an issue to track?"""
15920,290443405,b'#15939'
15920,290444033,b'Override VisitChildren method in your custom expression. ReplacingExpressionVisitor is working correctly.'
15920,290452770,"b'Oh, I somehow missed that entirely, thanks!'"
15920,290526597,"b""@divega this scenario - entity equality on entities with composite keys over a subquery - has never been translated as it would cause multiple evaluation of the subquery. As we no longer have client evaluation, I'm proposing to throw an informative NotSupportedException that would guide the user on avoiding the pattern, does this make sense?"""
15920,290529415,"b'what about: `ctx.Customers.OfType<VipCustomer>().FirstOrDefault<Customer>()`, i.e. when type argument of cardinality reducing operator is explicitly defined and different than one on source?'"
15920,290531260,"b""Hmm, interesting - I've never seen someone call FirstOrDefault with an explicit type parameter, any specific value in doing so?"""
15920,290532262,"b""can't think of anything reasonable where the result would be an entity but I'm working on a somewhat similar problem in different area (#15535), where the First method was typed as object. Might be worth adding test just in case. We have some inheritance in GearsOfWar model (Faction entity) that can be used for that purpose."""
15920,290598999,"b'Yes, sure. Though not sure I understand the scenario. Is this something that in the future we could translate with EXISTS?'"
15920,291094963,"b""Opened #15972 to track, including a full explanation - we should be able to translate this (not with EXISTS though). Note that this wasn't supported before (so it would be an enhancement rather than a regression fix).\r\n"""
15920,291095194,b'Am deferring this for now (made a note at the top post) so that I can merge this PR quickly. Will get around to it soon.'
15995,291727354,b'yikes!'
15995,291728466,"b'this test no longer tests what it says, since distinct on the client. either rewrite or remove the test'"
15995,291728522,"b'this test no longer tests what it says, since distinct on the client. either rewrite or remove the test'"
15995,291728974,b'should we be testing that this now throws instead?'
15995,291743734,"b""I will disable them with client eval issue. When we disabled tests with client eval we decided not to remove them at least for now. We can either remove them or verify throwing or run them with AsEnumerable. But we don't have decision on it yet."""
15963,290923629,b'Can we do something better here? Like how EntityEquality works.\r\nA method without any lambda (so no nav expansion needed) and source being same type as result type should be transparent. WIthTag can use the same processing.'
15963,290960350,b'i was thinking about it but wanted to do it in a future checkin. I guess I can incorporate it into this fix though.'
15963,291757822,"b'Use a different function to identify if it is a lambda. UnwrapQuote needs to return LambdaExpression only, never null;'"
16005,291815243,b'Worth making this one public? Useful for providers?'
16005,291816341,b'Good catch!'
16005,291816395,"b'I feel like I say this all the time, but ""when we discussed this years ago"" we decided on using the C# type, not the BCL type for this. I don\'t really care, but we should probably agree to be consistent.'"
16005,291816433,b'@smitpatel Will this be removed when query is ready? Or am I thinking of a different `ToListAsync`?'
16005,291816484,b'Yay!'
16005,291816531,b'Some of these may be needed by providers. @smitpatel?'
16005,291817477,"b""I don't think this should be here. EntityFrameworkQueryableExtensions should have it already."""
16005,291817523,"b'This is the one for IAsyncEnumerable<T/>. I saw this was in the spec test utility methods, so not sure it should be moving here, but if we really need it in product code, it should be internal. The public one we offer is for IQueryable<T/>, and should be on EntityFrameworkQueryableExtensions.'"
16005,291817573,b'Consider fixing https://github.com/aspnet/EntityFrameworkCore/issues/15998 while you are at this.'
16005,291817747,"b'This should probably use Cast<T\\> instead of OfType<T\\> to avoid filtering as a side effect. Also, are we intentionally converting test utility methods to internal product code?'"
16005,291817854,b':tada:'
16005,291819154,"b""Can anyone remind me why using Expression.Assign doesn't work?"""
16005,291819349,b'Compiler refuses to compile an assignment to a readonly field.'
16005,291820209,"b""I don't know why this changed \xf0\x9f\x98\x95 """
16005,292097936,"b""We haven't figured out what would be exposed to providers for query. Let's keep this internal for now."""
16005,292111171,b'Moved this back to test.'
16005,292111252,b'Moved this back to test.'
16005,292114259,"b""I'll let @smitpatel handle that one."""
16005,292122051,b'Moved this back to test.'
16005,292145262,b'\xf0\x9f\x98\xb1 '
16014,292150855,b'Folder/namespace seems odd'
16014,292196416,b'Will fix.'
16035,292600231,b'add helper for GetAllTypesInHierarchy and use that instead here - you need similar logic to get all properties in hierarchy anyway'
16027,292674373,"b""for Min/Max we don't need to do pushdown in case of distinct. but its a silly scenario so not sure if worth optimizing for"""
16027,292676161,b'rename'
16027,292676311,b'empty space'
16027,292676349,b'to what? Any suggestions?'
16039,292684392,b'@Pilchie does this new version need your approval?'
16039,292685333,"b'Is that an OSS dependency, or just an external package?'"
16039,292685891,"b""It's a first-party package shipped by Azure. I don't believe this has needed approval in the past."""
16029,292682143,b'Perf: make this a Dictionary'
16029,292682978,"b""A possible optimization would be to have a non-allocating fast mode that just compares the column names and if they are already in the expected order doesn't create an index array otherwise it falls back to the remapping logic.\r\nBut we should measure whether this would be worth it. The most affected scenario would be queries that only return a single row."""
16039,292695978,"b""I wouldn't expect so."""
16069,293473277,"b'Not sure if this is still the case, but using foreach on `IReadOnlyList` used to allocate.'"
16069,293480062,"b'Will check this, thanks!'"
16069,293481653,b'Forgot to add base.GetHashCode'
16069,293481703,b'foreach on `IList` allocates'
16069,293482265,"b'Right, makes sense that with interfaces there will be an allocation. I will undo the foreaches.'"
16053,293172405,b'you could use throw exception. Upto you.'
16053,293546342,"b""You mean like this?\r\n``` csharp\r\n    => _record?[ordinal] ?? throw new InvalidOperationException(Resources.NoData);\r\n```\r\nIt didn't feel ...mathematically correct since the field value could be NULL. It's not actually an issue since NULL in the database is handled very differently; it just felt like the semantics got a bit fuzzy."""
16075,293572396,"b""@dougbu I'm assuming we're bumping by 2 here to keep alignment? Is that our policy for 2.x?"""
16075,293572581,b'Yep. Swiss cheese.'
16080,293612056,b'print debug is now useless - remove it'
16082,293615042,b'I thought we removed use of nullable reference type in our code base\r\ncc:@roji'
16082,293705396,"b""This must have been accidentally left behind, although I'm surprised it didn't generate a warning/error. It's fine to remove."""
16082,293821699,b'Fine to remove what @roji? All of `NonNullableNavigationConventionTest`?'
16082,293838114,"b'No, only the question mark after PropertyInfo.'"
16082,293854234,b'That would cause the compilation errors I am avoiding by _adding_ this question mark.'
16082,293859986,b'Could remove the following from the test file however\r\n``` c#\r\n#nullable enable\r\n#pragma warning disable CS8618\r\n```'
16082,294050347,b'Should these test be skipped/removed instead of changed?'
16082,294057119,"b""Well, I picked an approach and won't feel hurt if the EF team chooses another \xf0\x9f\x98\x83"""
15767,289958750,"b""IMHO, these are specific to SQL Server. I don't think we should add them to every relational provider."""
15767,290001576,"b'Seems that they are supported on PostgreSQL, Oracle and MySQL'"
15767,290002835,b'Fix docs'
15767,290003038,b'Redundant check'
15767,290086257,"b""Neat. I though Oracle might. Didn't expect so many other to too."""
15767,294034209,b'These should use `StringComparison.Ordinal` for consistency and some minor perf gain.'
15767,294034246,"b'We can skip validation on `null` comments, just store the first non-null one and compare every other one against it.'"
15767,294034300,b'Extra line'
15767,294077564,b'Like this?'
16120,294118504,b'@maumar @divega - Does this need to be dependent on relational nulls settings?'
16118,294446047,b'`RelationalExtensionInfo`?'
16118,294452763,b'`IsStoreProvider`?'
16118,294479599,"b""I wish we were consistent about this...but we're not. Given that we have a type `IDatabaseProvider` that is implemented by all database/store providers, I think I prefer to use `IsDatabaseProvider` here."""
16118,294484121,b'Going to merge as is; we can discuss again in API review.'
16113,294069336,b'Forgot `abstract`?'
16113,294085290,b'Indeed. :-)'
16136,294888861,b'DRY with above block.'
16136,294889795,"b""Note the different between FETCH *FIRST* and FETCH *NEXT*... Doesn't seem worth DRYing..."""
16136,294900848,b'One line difference was reason for DRYing'
16112,294037137,b'seems that we are no longer removing whitespaces here - is that expected?'
16112,294045562,"b'use `_sqlExpressionFactory.Equal(_sqlExpressionFactory.Constant(true), _sqlExpressionFactory.Constant(inexpression.Negated))`'"
16112,294045595,"b'use `_sqlExpressionFactory.Constant(!value, sqlUnaryExpression.TypeMapping)`'"
16112,294045616,"b""Why the other side has to be binary? Can't it be unary or sql function or anything else?"""
16112,294530349,"b'it could unto work done by SearchConditionConvertingExpressionVisitor if we allow this for arbitrary expressions - for ""negatable"" binary expressions its fine because they are search conditions anyway'"
16112,294918110,b'Expose only useRelationalNulls?'
16151,295098864,b'cc: @divega @ajcvickers - Something getting translated to server now.'
16151,295322774,b'This test is failing on SQLite. Build is broken.'
16138,294978094,b'\xf0\x9f\x8e\x89 '
16138,295113145,b'Better exception message?'
16138,295113286,b'Extra line'
16138,295113819,b'Would it make sense to move this to Core?'
16138,295114068,b'Why is this commented?'
16138,295114194,b'Add entity type and property names to the message'
16138,295115080,b'It is very specific to SQL translation only. There are many parts of SQL translation which are same between Cosmos & Relational. I am unsure what is the best way to make it DRY.'
16138,295115217,b'In relational it is explicit type casting in SQL. I could not find similar in Cosmos Sql but we may need to do something to translate.'
16138,295115250,b'Exception message reviews \xf0\x9f\x98\xad '
16138,295115297,b'The current exception message is in RelationalStrings. I will move it to core to use here. But task for future PR.'
16138,295116704,b'Add some message to these exceptions.'
16138,295117034,b'Why do we need to clear orderings?'
16138,295118011,b'\xf0\x9f\x8e\x89 '
16138,295317188,b'Distinct contract does not specify if inner orderings will be preserved. (e.g. if you use HashSet to compute distinct values). Hence we clear orderings when applying Distinct. It has been in place since long time in relational so I just carried over.'
16138,295319806,b'I will add some message for now.\r\nFor proper exception message #16156 '
16138,295382066,b'#16164'
16148,295091481,b'Is it still NorthwindContext rather than entityType name?'
16148,295112569,"b""Yes, there was a bug in model building that didn't configure this correctly."""
16148,295445661,b'Wrong method'
16148,295445711,b'GetSimplerMemberName'
16148,295448235,b'Perhaps need a regression test for this\r\n\r\n---\r\nIn reply to: [295445661](https://github.com/aspnet/EntityFrameworkCore/pull/16148#discussion_r295445661) [](ancestors = 295445661)'
16148,295459755,b':trollface:'
16148,295460074,"b'DRY, make private function'"
16173,295811378,b'Why this test is failing? It should be working. Can you post error? '
16173,295893941,b'CurrentPrice is decimal. Decimal comparisons are block in SQLite. Change it to use some other property.'
16173,296045325,b'Thanks! Missed that...'
16162,295563992,"b""Perfwise it's unfortunate that we need to call `GetService` this many times for each command, we should look into caching some of these."""
16162,295564708,b'For instance `_context` is already stored in `DatabasaFacade`'
16162,296057620,"b""@AndriySvyryd Added a second commit (to make it easier to review; will squash) which adds a caching mechanism for database facade dependencies. It's a little different from the one on `DbContext` because it needs to handle providing relational services when available.\r\n\r\nI didn't include the `Migrations` dependencies since they often won't be needed and so we don't want to always load them."""
16181,296057489,b'?'
16181,296057786,"b'i have no idea how it got there, removing :)'"
16162,296059309,b'Do we still need to expose `IServiceProvider`?'
16162,296059928,"b""Yes, it's still used for the migrations dependencies. Also, this is still how providers should get dependencies since they can't use the internal services."""
16182,296059769,b'We usually call `AsModel()` for `IModel` extensions'
16182,296059877,b'\xf0\x9f\x98\x95 '
16182,296060640,"b'Typo in ""parametere""'"
16182,296061012,b'XML docs? \xf0\x9f\x98\x89 '
16182,296061062,b'\xf0\x9f\x98\xa2 '
16182,296061153,b'@ajcvickers - He suggested me to write this code in first place lol.'
16182,296061710,b'Well then I was wrong. AsModel is better.'
16182,296061726,b'XML docs'
16182,296061796,b'I can do the xml docs if you want.'
16182,296062172,b'Docs'
16182,296062701,b'Yay!'
16166,296243073,"b""Proposal: how about switching to static factory methods instead of having so many constructors? The main issue is that it's hard to understand from the constructor signature exactly what kind of function is being created: the fact that arguments aren't provided doesn't/shouldn't necessarily mean it's niladic. A CreateNiladic() factory method (or even CreateBuiltinNiladic()) would make this much clearer.\r\n\r\nSame for the builtin flag below: the overloads which accept a schema set builtin to false and vice versa. It would be much clearer if we had CreateBuiltin() and CreateUserDefined().\r\n\r\n(This would also allow you to have overloads which don't accept parameters but which don't produce niladic, cleaning up all the `Array.Empty<SqlExpression>()` below...)"""
16166,296289663,"b""SqlExpressionFactory is the factory to create expressions. It is not static because TypeMapping is essential for translation and it injects them. If having niladic in method call name there helps then we can do that. I tried it to align with Linq expressions. Linq expression also has many overloads for Expression.Call. If your first argument is method info then it assumes its a static function. You did not provide instance then it's not instance method. Same way if you don't provide arguments here, it is niladic function.\r\nFurther, these constructors are public because users need them in HasTranslation method. Users cannot use SqlExpressionFactory. BuiltIn comes into picture only when you provide schema. Parameters & doc comments should easily tell the difference.\r\nSo I don't think there is any issue in usability or additional value in having methods detect things. SqlExpressionFactory API will come up in API review meeting though it is used by providers not end users directly.\r\n\r\nFor no parameters vs empty parameters,\r\nGiven parsing, niladic functions are less of function and more of a member access. We have tried to combine both into one. Either way you have to pass argument to indicate it function is niladic or not. Making it empty array rather than a bool makes it clearer according to me.\r\n\r\nIf you have a good design which improves usability for end users in some way, bring it to design meeting?"""
16196,296380685,b'Did you add this for perf? Is there a difference?'
16196,296381054,"b""Not only for perf, it was part of other refactoring too. I didn't measure."""
16203,296385316,b'should propagate?'
16203,296385683,b'This one sets typemappings for DbFunction.'
16210,296462045,b'@bricelam should this be 2.1.11 now that 2.0.x is EOL?'
16196,296394020,"b'We can leave it for API review, but the name doesn\xe2\x80\x99t quite work for me for several reasons. Something that starts with _Set_ would probably be an improvement, but not sure about something like SetLogger because if the overlap between ILogger and this functionality (see my other comments).\r\n\r\nI also want to touch on having something that is multicast, just in case. I see that simplicity is the high order bit, and multicast can be built externally, but given this is already a method (as opposed to a property as in EF6) I don\xe2\x80\x99t think the delta in complexity would be too much.'"
16210,296795384,b'Decided to get this in as-is. @bricelam you can update the 2.x runtime if and when you wish.'
16210,296870925,"b'No, it should remain 2.0.'"
16145,296063454,b'Do we allow typos like nav1....nav2?\r\n'
16145,296063564,b'Is this random place or just after non entity shape? We decided to allow include after Set operation on entities'
16145,296064257,b'Why no reuse existing list of list? @roji can suggest how to make it less allocate-y ;)'
16145,296342137,b'anything that would contain multiple source mappings. this only happens when performing join/groupjoin/selectmany - set operations are fine as long as there was no join happening before'
16145,296342260,b'will change'
16145,296640132,"b""It looks like at the call site of this method, the `foundIncludeChains` parameter isn't used after the call (it is overwritten right afterwards with the results in fact). So this method could simply operate in place, removing elements which don't match rather than creating a new list and copies across elements which do."""
16145,296876305,"b'problem is that the logic can ""spawn"" additional entries so I\'d have to use for/while and manually manipulate the index of the element I\'m working on as I\'m spawning the additional entries. I decided it would be easier and cleaner to just create a new List but I can change that if you guys think it\'s worth the effort (I don\'t) or if you know some nice and clean way of doing it instead.'"
16145,296920397,"b'After offline discussion, we decided that we would allocate new list (list grows when more than one path found and we want list in order of navigations so that we generate more readable SQL). The list would be sent back as out var & method would return bool.'"
16145,296923398,"b""OK. Although I care a lot about performance, I still don't have a good idea of how much compilation perf is important (it does happens only once per query after all). At some point we should dive into this and find where the real hotspots are."""
16145,296943120,b'Why are you using regex?'
16145,296943700,b'will remove'
16145,296944005,b'navigation.GetIdentifyingMemberInfo().Name'
16145,296944747,b'Add continue;\r\nand drop else blocks to DRY'
16145,296944879,"b""FindDeclaredNavigation since you already checked derived type.\r\nAlso once you find the navigation, you don't have to go further down in hierarchy since derived type cannot have navigation with same name."""
16127,294619190,b'bad inclining. Make a function.'
16127,294619317,b'better variable names...'
16127,294619642,b'A conditional check is more readable than switch'
16127,294621003,b'Apply set operation.\r\nor ApplyUnion if you want to split in 4 methods'
16127,294621274,b'No check in making sure that both sides have same number of projection?\r\nWhat if you apply set operation on 2 different derived type of Customer?'
16127,294621691,b'No to this. Relational is creeping into core.\r\nEncapsulate pushdown logic inside SelectExpression.'
16127,294621956,b'?'
16127,294842192,"b""Do you mean that the set operation type generation (i.e. the switch statement) should be split out into another function? Seeing as how it's already easy to override GenerateSetOperation(), and SetOperationType is a closed enum, is there much value in that?"""
16127,294842649,b'Changed to setOperationExpression and operandExpression.'
16127,294847277,"b""How do you mean, lots of if's? Would that really be more readable?"""
16127,294847686,b'Changed to ApplySetOperation. As long as we have the same SelectExpression with 4 enum possibilities that seems fine (rather than split to 4 methods).'
16127,294847920,"b'Yes, all that is definitely needed - this is just a draft. I will be working on that.'"
16127,294855263,"b""At the non-relational level, the only change here is refactoring the big switch over Queryable methods to a different method (TranslateQueryableMethodCall) - I'd probably do this even regardless of set operations in order to make VisitMethodCall leaner (one small block for Queryable, another for NavigationExpansionReducingVisitor). So I don't think any relational is creeping into core (yet).\r\n\r\nRegarding encapsulating pushdown logic in SelectExpression, I can do that. Some reasons I didn't:\r\n* To allow providers to control this list, which doesn't seem possible if it's in SelectExpression. The main example I have is Take without OrderBy which doesn't require pushdown on PG/Sqlite/MySQL (`SELECT 1 UNION SELECT 2 LIMIT 1`), but does require it on SQL Server (`SELECT TOP(1) * FROM (SELECT 1 AS x UNION SELECT 2) AS t`).\r\n* Can do it in one place on RelationalQueryableMethodTranslatingExpressionVisitor, instead of on every Apply*() method in SelectExpression\r\n* Note that RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelect also does pushdown (so from outside SelectExpression).\r\n\r\nLet me know what you prefer, and how we'd take care of allowing provider control if we move the logic into SelectExpression."""
16127,294859519,b'Splitting out block for readability is fine but allowing it to be overridden is not. That is not the hook we want to provide. So method should be private. Relational needs to deal with how to do Pushdown itself.'
16127,294860253,b'Make a private function. It is not to override but for readability.'
16127,294860408,"b""In our default QuerySqlGenerator (which is quite SqlServer-inspired), [GenerateTop](https://github.com/aspnet/EntityFrameworkCore/blob/84d491e0330157f3b25853d13acb54779390355c/src/EFCore.Relational/Query/Pipeline/QuerySqlGenerator.cs#L576) only generates TOP(1) if Limit is defined but not Offset. In [GenerateLimitOffset](https://github.com/aspnet/EntityFrameworkCore/blob/84d491e0330157f3b25853d13acb54779390355c/src/EFCore.Relational/Query/Pipeline/QuerySqlGenerator.cs#L615) we only generate Limit if Offset is *not* defined.\r\n\r\nHowever, TOP(1) isn't supported on set operations at all, so Take without Limit never gets generated. This would be solved by pushing down to a subquery [as mentioned above](https://github.com/aspnet/EntityFrameworkCore/pull/16127#discussion_r294855263).\r\n\r\n"""
16127,294862417,"b'About how to make it work, let me discuss with others about it. '"
16127,294863879,"b""If `TOP(1)` isn't supported on set operations then is the test right?\r\nIf the test is right and we need pushdown then why it is not happening?"""
16127,294884384,"b'OK, moved the switch out to a private function.'"
16127,294885999,"b""Note also that this is about not visiting twice: currently non-relational visits the first argument (source), and passes the visited source (shapedQueryExpression). If relational simply overrides VisitMethodCall, it would need to visit the source to check if it's a set operation (for the pushdown check), but if not it can't just call base.VisitMethodCall because that would visit again.\r\n\r\nIn any case I'll wait to hear from you, we can also have a chat."""
16127,294886635,"b""The test is right - I simply haven't yet implemented pushdown because this is a draft, and wanted to discuss everything with you first."""
16127,294911914,b'A TODO: rather than exception would have been easier to understand. '
16127,294914903,b'Just wanted the test to fail in case I forget... :) Will try to make it clearer for reviews next time.'
16127,296044190,"b'This feels hacky/wrong, is it correct?'"
16127,296046285,b'nit: rename'
16127,296047101,b'another interesting case - compose OfType<> after set operator. e.g.\r\n\r\n`context.Set<Bird>().OfType<Kiwi>().Union(context.Set<Bird>()).OfType<Kiwi>()` - make sure that the processing you do to match the type discrepancy between siblings doesnt obfuscate their actual type for purpose of further composition'
16127,296047607,"b""Good suggestion. In principle, the way things are set up right now, the Union yields the closest common ancestor. I don't see any reason for this to fail, but I'll add a test."""
16127,296053583,"b'just one if with a bunch of && in this case, since all of the switch cases resolve to the same value'"
16127,296054937,b'can use IsSetOperation here'
16127,296055432,"b'nit: add ""deduplicate:"" for readability'"
16127,296055642,"b""TryGet is not good API. GetProperty should not be called with incorrect property. I think better way to deal with this issue would be to add all properties of common ancestor & then adding derived properties of each sibling type involved. That way you don't run into \r\n> \xe2\x80\xa2\tPerforming a set operation over siblings is complicated (especially when there are other unrelated siblings). Because the result shape needs to be identical on both sides, I generate null constant projections for properties of the other entity type.\r\n\r\nAlso,\r\n- You don't need to check, you would know if property is on one side vs other side.\r\n- You reuse type mapping from one side to print null on the other side.\r\n- You can bypass AddToProjection when aligning nulls.\r\n"""
16127,296055910,"b'If some operation inside Select requires changes outside of SelectExpression, flow it out of the method called.\r\nYou can also pass in the shaper inside Select expression and process it accordingly.'"
16127,296056045,"b""Just use _projection directly when trying to add null. You know that you don't want to dedupe it. You can also use alias from the other side while creating ProjectionExpression."""
16127,296056133,b'It would be cleaner in terms of understanding what is being happening. '
16127,296056521,"b""At this point, I would prefer to do it in individual methods which requires it. So providers can easily override method and call pushdown before calling into base. We don't want hook like this for sure since it is not visible enough for people to know that they have to call it."""
16127,296056791,b'~\xf0\x9f\x91\x8d ~'
16127,296246526,"b""OK for using _projection directly.\r\n\r\nBut for using the alias, I had that at some point, but there's an issue if two entity types in the hierarchy have the same field name - you get duplicate column aliases...\r\n\r\nThinking about this some more, this could actually happen with actual needed properties too: the two siblings may have the same property name but with a different type. That means we need to uniquify column aliases..."""
16127,296249789,"b'To confirm, you mean that `SelectExpression.ApplySetOperation()` would optionally return a new shaper if needed, like AddCollectionProjection or ApplyCollectionJoin? '"
16127,296251814,"b""OK, we can use set operations (haha) to handle do this, e.g. intersecting the common ancestor's properties with the siblings' etc. This would obviate TryGetProperty, but I don't see how this simplifies the result set generation: null projections still need to be created for all of the common ancestor's properties which aren't in both siblings, right?\r\n\r\n> You reuse type mapping from one side to print null on the other side.\r\n\r\nYou mean instead of using RelationalTypeMapping.NullMapping, right? Also, there are the properties which aren't on either sibling..."""
16127,296291574,"b'_projection for null columns since, deduping will make it unique. You need to generate unique alias for each column on both sides, so use the non-null to make unique alias and use it on other side.'"
16127,296292526,b'I guess we need to add null for unrelated properties for now. Though it would give rise to a lot of materialization code which would never be called. One possible solution would be EntityProjection/EntityShaper can represent multiple IEntityType and materializer will generate accordingly. Defer that for now.'
16127,296292598,b'yes'
16127,296551438,"b'This seems incorrect. While table alias can be null for SelectExpression, if it is null, you should not able to pull any column outside of it. So we should never encounter a stage when a columnExpression is created with null table alias. Need a check in ctor to verify that.'"
16127,296688215,b'OK.'
16127,296694011,b'Makes sense. I started looking into representing multiple entity types in materialization but that seems like a pretty big change for a relatively small edge case.'
16127,296764482,b'Refactored so no longer necessary.'
16127,296775320,b'Blocked on #16217'
16127,296864827,b'~This is no longer necessary.~'
16127,296934387,b'add (and skip for now) test for https://github.com/aspnet/EntityFrameworkCore/issues/16217'
16127,296946551,b'Reverse seems interesting. Do we have any contract about ordering? @AndriySvyryd'
16127,296947043,"b'Since we are not doing a lot of process in between, just use using syntax for Indent'"
16127,296947240,b'Same using pattern here too'
16127,296947352,"b'Your comment says it is not longer necessary, then why the code is still here?'"
16127,296952352,b'Remove'
16127,296952490,b'Missing verb in the comment?'
16127,296952616,b'Make this part of ctor of SelectExpression'
16127,296952695,b'Verify that projection mapping is not empty and projections are not populated. Client eval case'
16127,296953141,b'What happens to cast? It is client eval and we cannot do set operation after'
16127,296954068,b'Do we want to indent this?\r\n@divega'
16127,296955685,"b""I don't find the indenting particularly helpful in making the SQL more readable, but I don't feel strongly."""
16127,296956954,"b'Looking for few examples online in documentations and tutorials, no indentation for set operations.'"
16127,297024108,"b'Yes, it should return the highest type first. This is the same as the current implementation.'"
16127,297082359,"b""One point here was to go lowest first unless needed, since it's more efficient (just iterate to the top, no need to store anything). Also, the previous implementation allocated a list internally, which Reverse() probably also does but there are some optimizations."""
16127,297083607,b'We only want to indent for subqueries (when alias != null)...'
16127,297084364,"b""~Same as above, we indent conditionally. here specifically we don't want to indent when we have nested set operations of the same time, but rather render them flatly:~\r\n\r\n```\r\n    operand1\r\nUNION\r\n    operand2\r\nUNION\r\n    operand3\r\n```"""
16127,297087750,"b""OK, will remove it - seemed to help readability for large nested operands but it seems that examples on the Internet indeed don't have it."""
16127,297088547,"b'But for now will keep indentation when the set operation operand is in parentheses, like a subquery. This happens for precedence reasons.'"
16127,297090201,b'Simplified after decision to not indent operands (unless in parentheses).'
16127,297091540,"b""There's already a check for projections being populated right below, with a NotImplementedException - [as I wrote above](https://github.com/aspnet/EntityFrameworkCore/pull/16127#issuecomment-505081373) I couldn't repro the client eval case... Can you help provide the scenario where this would trigger (I'll add a fix in a separate PR)?\r\n\r\nFor empty projection mapping, when does this happen (union over nothing?) and what should be done (throw informative message?)."""
16127,297105079,"b""Actually, looking at this again I'm not sure I was doing the right thing... Regular pushdown to subquery doesn't populate the subquery's identifying projection - it doesn't seem to be needed. Also here in ApplySetOperation I was clearing the identifying projection for the new set operation, and never repopulating it.\r\n\r\nIt seems like we should just keep the previous identifying projection which were there before the set operation was applied, since I don't see how a set operation could change them. Is my thinking correct?\r\n\r\nI did this for now and all current tests seem to pass, so I will merge the PR and revisit as needed, let me know."""
16127,297116384,"b'Oops, sorry - some confusion on my side, it is indeed necessary.\r\n\r\nWhat you say is true for regular subqueries, which always have a table alias - but set operation operands are implemented as ""subqueries"" with no alias, i.e. we produce the following:\r\n\r\n```sql\r\nSELECT [c].[CustomerID], [c].[Address], [c].[City], [c].[CompanyName], [c].[ContactName], [c].[ContactTitle], [c].[Country], [c].[Fax], [c].[Phone], [c].[PostalCode], [c].[Region]\r\nFROM [Customers] AS [c]\r\nUNION\r\nSELECT [c0].[CustomerID], [c0].[Address], [c0].[City], [c0].[CompanyName], [c0].[ContactName], [c0].[ContactTitle], [c0].[Country], [c0].[Fax], [c0].[Phone], [c0].[PostalCode], [c0].[Region]\r\nFROM [Customers] AS [c0]\r\nORDER BY [ContactName]\r\n```\r\n\r\nNote `[ContactName]` in ORDER BY without a table.\r\n\r\nRather than create a new column expression without a table, I tried to simply take the table of the first operand (i.e. `[c].[ContactName]`) which should theoretically work too. But I ran into an odd SqlServer limitation; the following errors with ""The multi-part identifier ""c.Region"" could not be bound"":\r\n\r\n```sql\r\nSELECT [t].[CustomerID], [t].[Address], [t].[City], [t].[CompanyName], [t].[ContactName], [t].[ContactTitle], [t].[Country], [t].[Fax], [t].[Phone], [t].[PostalCode], [t].[Region]\r\nFROM (\r\n         SELECT [c].[CustomerID], [c].[Address], [c].[City], [c].[CompanyName], [c].[ContactName], [c].[ContactTitle], [c].[Country], [c].[Fax], [c].[Phone], [c].[PostalCode], [c].[Region]\r\n         FROM [Customers] AS [c]\r\n         UNION\r\n         SELECT [c0].[CustomerID], [c0].[Address], [c0].[City], [c0].[CompanyName], [c0].[ContactName], [c0].[ContactTitle], [c0].[Country], [c0].[Fax], [c0].[Phone], [c0].[PostalCode], [c0].[Region]\r\n         FROM [Customers] AS [c0]\r\n         ORDER BY [c].[Region]\r\n         OFFSET 0 ROWS\r\n     ) AS [t]\r\nWHERE CHARINDEX(N\'Thomas\', [t].[ContactName]) > 0\r\nORDER BY [t].[Region], [t].[City];\r\n```\r\n\r\nAlthough it looks like it should work. Pulling the subquery out weirdly makes it work:\r\n\r\n```c#\r\nSELECT [c].[CustomerID], [c].[Address], [c].[City], [c].[CompanyName], [c].[ContactName], [c].[ContactTitle], [c].[Country], [c].[Fax], [c].[Phone], [c].[PostalCode], [c].[Region]\r\nFROM [Customers] AS [c]\r\nUNION\r\nSELECT [c0].[CustomerID], [c0].[Address], [c0].[City], [c0].[CompanyName], [c0].[ContactName], [c0].[ContactTitle], [c0].[Country], [c0].[Fax], [c0].[Phone], [c0].[PostalCode], [c0].[Region]\r\nFROM [Customers] AS [c0]\r\nORDER BY [c].[Region]\r\nOFFSET 0 ROWS;\r\n```\r\n\r\nAnd removing the `[c]` also makes the query work (which is why we\'re in the current situation).\r\n\r\nFor now I\'ll go ahead and merge with the current behavior - if you have any insight into this we can change later.'"
16127,297117045,"b'Sorry, see https://github.com/aspnet/EntityFrameworkCore/pull/16127#discussion_r297116384'"
16127,297120347,"b""I think this is required for scenarios such as Union_siblings_with_duplicate_property_in_subquery (`cokes.Cast<Drink>().Union(teas)`). The union really does return drinks from the database, rather than cokes upcast to drinks, shouldn't the shaper be updated accordingly?\r\n\r\nCan you explain why this would hurt client eval or doing set operation after?"""
16127,297230530,b'empty projection happens when there is client eval in projection before union.\r\n'
16127,297231144,b'Because you are assuming that the casting type is in hierarchy and towards base type. Towards derived should probably work out since you are doing union after but if you cast to something outside of hierarchy then what? Like casting to interface.'
16240,297227692,b'Empty line'
16127,297233266,b'Identifying projection is key of starting entityType which created the select expression. It should be pushed down when pushing down a subquery.\r\nFor set operations that varies. concat does not have unique key defined. Others do have. Also both side should have same column as key.\r\nIt is essential to compute collection includes if we are supporting them after set operations.'
16127,297234984,b'This is as worse as SqlFunction quoting logic we had.'
16127,297260521,"b'Yep, am now doing this as part of the work on joining.'"
16127,297263361,"b""Are you talking about scenarios with a client-evaluated set operation? Otherwise casting to interface isn't supported anyway, right?"""
16127,297263962,"b""Yeah, it's pretty depressing, and really seems like weird SQL Server behavior (@divega)... But I don't really see a way around it right now."""
16127,297268802,b'I am referring to incorrect design rather than the SqlServer behavior.'
16127,297269614,"b'Casting to arbitrary type would add convert node in shaper. You remove that convert node and moved on with applying set operation, effectively ignoring the cast. Yes, it is not supported and it should fall to client eval/throw. But this code can potentially swallow it.'"
16127,297285489,"b""Incorrect design of what exactly, can you be more specific? I'd be happy to get rid of the table-less column expression, but I don't see how.\r\n\r\nHave you run into this SqlServer limitation before? Any idea what it's about?"""
16127,297315251,"b'I will look into this. FWIW, this works :trollface::\r\n\r\n``` sql\r\nSELECT [c].[CustomerID], [c].[Address], [c].[City], [c].[CompanyName], [c].[ContactName], [c].[ContactTitle], [c].[Country], [c].[Fax], [c].[Phone], [c].[PostalCode], [c].[Region]\r\nFROM [Customers] AS [c]\r\nUNION\r\nSELECT [c].[CustomerID], [c].[Address], [c].[City], [c].[CompanyName], [c].[ContactName], [c].[ContactTitle], [c].[Country], [c].[Fax], [c].[Phone], [c].[PostalCode], [c].[Region]\r\nFROM [Customers] AS [c]\r\nORDER BY [c].[ContactName]\r\n```'"
16127,297322435,"b""Thanks. If I'm understanding this correctly it seems a bit tricky, especially when multiple entity types are involved (e.g. cast up, null constant projections...). I propose we punt this post-3.0, especially as it's easy to work around... Opened #16243 to track."""
16127,297328001,"b'I cannot see a better approach than to wrap it into a subquery when there is any further composition. \r\n\r\nFor example, `customers.Concat(customers).OrderBy(c => c.Region)` would translate to:\r\n\r\n``` sql\r\nSELECT [u].[CustomerID], [u].[Address], [u].[City], [u].[CompanyName], [u].[ContactName], [u]. \r\n    [ContactTitle], [u].[Country], [u].[Fax], [u].[Phone], [u].[PostalCode], [u].[Region] \r\nFROM (\r\n    SELECT [c].[CustomerID], [c].[Address], [c].[City], [c].[CompanyName], [c].[ContactName], [c]. \r\n    [ContactTitle], [c].[Country], [c].[Fax], [c].[Phone], [c].[PostalCode], [c].[Region]\r\n    FROM [Customers] AS [c]\r\n    UNION\r\n    SELECT [c0].[CustomerID], [c0].[Address], [c0].[City], [c0].[CompanyName], [c0].[ContactName], \r\n    [c0].[ContactTitle], [c0].[Country], [c0].[Fax], [c0].[Phone], [c0].[PostalCode], [c0].[Region]\r\n    FROM [Customers] AS [c0]\r\n    ) AS [u]\r\nORDER BY [u].[Region]\r\n```\r\n\r\nBut maybe  `customers.Concat(customers)` can still be simpler:\r\n\r\n``` sql\r\nSELECT [c].[CustomerID], [c].[Address], [c].[City], [c].[CompanyName], [c].[ContactName], [c].[ContactTitle], [c].[Country], [c].[Fax], [c].[Phone], [c].[PostalCode], [c].[Region]\r\nFROM [Customers] AS [c]\r\nUNION\r\nSELECT [c0].[CustomerID], [c0].[Address], [c0].[City], [c0].[CompanyName], [c0].[ContactName], [c0].[ContactTitle], [c0].[Country], [c0].[Fax], [c0].[Phone], [c0].[PostalCode], [c0].[Region]\r\nFROM [Customers] AS [c0]\r\n```\r\n\r\nBTW, with the parenthesis, the original indentation proposed looks a bit more compelling.\r\n'"
16127,297329680,b'Save bytes :trollface: '
16127,297350757,"b'Discussed offline with @smitpatel, and for now we\'re simply always going to push down set operations into a subquery when OrderBy, Take and Skip are applied. Once we have a possibility for referencing a projection alias without a table alias, we can use that and everything will be much cleaner - resolving this for now.\r\n\r\nI\'m still very confused that SQL Server doesn\'t allow referring to `[c].[Region]` above (from ORDER BY, when in a subquery). I\'d even consider raising this with SQL Server, here\'s a minimal repro of the weird behavior:\r\n\r\n```sql\r\n/* The multi-part identifier ""c.Region"" could not be bound. */\r\nSELECT *\r\nFROM (\r\n    SELECT [c].[Region]\r\n    FROM [Customers] AS [c]\r\n    UNION\r\n    SELECT [c0].[Region]\r\n    FROM [Customers] AS [c0]\r\n    ORDER BY [c].[Region] OFFSET 0 ROWS\r\n) AS [t];\r\n\r\n/* Same query not within a subquery works */\r\nSELECT [c].[Region]\r\nFROM [Customers] AS [c]\r\nUNION\r\nSELECT [c0].[Region]\r\nFROM [Customers] AS [c0]\r\nORDER BY [c].[Region] OFFSET 0 ROWS\r\n\r\n/* Referencing the column from ORDER BY without a table works */\r\nSELECT *\r\nFROM (\r\n    SELECT [c].[Region]\r\n    FROM [Customers] AS [c]\r\n    UNION\r\n    SELECT [c0].[Region]\r\n    FROM [Customers] AS [c0]\r\n    ORDER BY [Region] OFFSET 0 ROWS\r\n) AS [t];\r\n\r\n/* Within a subquery with same table alias in the two UNION operands also works */\r\nSELECT *\r\nFROM (\r\n    SELECT [c].[Region]\r\n    FROM [Customers] AS [c]\r\n    UNION\r\n    SELECT [c].[Region]\r\n    FROM [Customers] AS [c]\r\n    ORDER BY [c].[Region] OFFSET 0 ROWS\r\n) AS [t];\r\n```'"
16189,296092141,b'GitHib just asked for my review due to this part of the change. Looks fine of course.'
16189,296892890,"b'@ericsink The string overload of sqlite2_prepare_v2 sets tail to `""\\0""` instead of `""""`. Our prepare-and-execute loop never ends.'"
16189,296893999,b'@ericsink Getting some different results here and from sqlite3_blob_write below. Investigating...'
16189,296896481,b'I think the offset and position might be switched around.'
16189,296927726,"b'lol, yep. \xf0\x9f\x98\x81 '"
14315,266669164,"b""I'd rather copy the code from EF Core...\r\n\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/94c06a21bae6aeaeb2734b6c01a0374e47c9a26f/src/EFCore.Sqlite.Core/Storage/Internal/SqliteTypeMappingSource.cs#L125-L137"""
14315,266669503,"b""I still want to do this since it's more reliable than the type affinity."""
14315,266669722,"b""I think there's already a method on SqliteDataReader that does this. (If there is, just call it.)"""
14315,266670374,"b""I'm going to send out a separate PR to change this. There are a few other places (including in EF) that we need to change as well."""
14315,266997353,b'But removing this code would solve #13839.'
14315,266998300,b'Done.'
14315,266998459,b'Done.'
14315,267062517,"b'The algorithm I want to use:\r\n\r\n1. Get the most used type for the column\r\n2. If none (or null), get the type affinity\r\n3. If none, use BLOB'"
14315,268862010,"b""I wonder if we should cache a previous non-null value and use it--it's probably more accurate than the type affinity."""
14315,268894302,b'Added caching.'
16212,297020497,"b'class contains ""IncludeReference"" - perhaps rename to something like NavigationMaterializingExpressionVisitor?'"
16212,297024206,b'what is ParentIdentifier used for? i can only see self identifier and outer identifier being used'
16212,297025290,"b'this is only correct for equality. `{a, b} != {c, d} <=> a != c || b != d`, rather than `&&`'"
16212,297026025,b'cleanup'
16212,297026742,b'are we camelCasing local functions?'
16212,297228107,b'How about CustomShaperCompilingExpressionVisitor?\r\n'
16212,297228292,b'It will be used for collections on same level. Future-proofing'
16212,297228693,b'I will limit this to `==` for now. I did not think much through all the cases of comparison. We can improve that later since it is edge case.'
16212,297229503,"b""local functions are as name suggest local. Local variables are camelCased so VS asked me to camelCase local function. I don't have strong preference but I prefer camelCase which can easily tell difference if you are calling local function or non-local function."""
16212,297404608,b'sounds good'
16212,297407407,"b""nit: maybe make the restriction more explicit, i.e rename the method to something like ConvertAnonymousObjectEqualityComparison and hard-code the operands used to create binary expressions between individual properties, rather than using the operand from the binaryExpression. This way we won't forget to fix this once other operations between anonymous objects are enabled"""
16212,297416291,b'Sure.'
16252,297873987,b'Not async'
16252,297874124,b'Async'
16252,297874329,"b""Yes. These don't exist yet, until they are merged into .NET Standard 2.1. So this is just setting up for that."""
16252,297874688,b'Async'
16252,297875123,b'Async'
16252,297875231,b'Async'
16276,297749053,b'Would it be different instance?'
16276,297749291,b'Are nested entities valid if you go to derived type? or base type?'
16276,297750192,"b""Did someone need to change nullability which cannot recreate it? We could make the method as MarkAsNullable instead. (Update is for expressions update only)\r\nAlso what would happen to cascading change? If you mark owner as nullable, don't we have to mark all owned entities nullable too?"""
16276,297750307,b'Can we merge with other Update method?'
16276,297750585,b'This was memberInfo by design. What does require it to be string?'
16276,297753713,b'Does this work when you have projected out multiple entities in projection'
16276,297755196,b'Can we keep injecting materializer and binding removal separate?\r\nWe can have another visitor which inject nested entityshapers'
16276,297756044,"b'Instead of generating such projection binding, we should use read value expression from outer and use it here. '"
16276,297799198,"b""How should that look? 'EntityShaperExpression.ValueBufferExpression' is of type 'ProjectionBindingExpression'"""
16276,297800730,"b""We can change that. For nested entities in Cosmos, ValueBuffer won't be bound to projection, so we can make it Expression where Expression can be either bound to projection or reading data indirectly from something which is bound to projection."""
16276,297801112,"b'That was my original design, but we need to add the jObject variable before each materializer is injected.'"
16276,297802003,b'It should. Is there a test for that?'
16276,297802696,b'If we wanted to make this expression immutable we would need to create a new instance'
16276,297804752,b'I was thinking more on the line of collection modifying while enumerating. It should be fine since you are using for rather than foreach.'
16276,297826363,b'The only thing currently used from the `MemberInfo` is the name. Would we need anything else?'
16276,297834123,"b""Probably not. I would expect them to be null at this point anyway, so i'll just null them out to be sure."""
16276,297834972,"b""I'll rename it. We don't need to worry about nested being `null` if the owner is `null`, no code should try to read them."""
16276,297875453,"b""Nothing else as used but identity is used implicitly. In past strings had clash, MemberInfo won't have clashes. If we move EntityShaper to work on non ProjectionBindingExpression, does this need to be changed?\r\n\r\n---\r\nIn reply to: [297826363](https://github.com/aspnet/EntityFrameworkCore/pull/16276#discussion_r297826363) [](ancestors = 297826363)"""
16289,298294812,"b'consider renaming to something like ""root""'"
16289,298352465,b'Decided to leave this as is after offline discussion.'
16205,298357859,"b""Is all these other processing necessary?\r\nShouldn't it be as easy as, if it is a method on Queryable/Enumerable class then we strip off MaterializeCollectionNavigation. All other case, we leave it as is. In case if it was not necessary at some point (suppose some externally added method on IQueryable by provider), then at the translation time it can be handled easily. \r\np.s. Collection include can probably remove MaterializeCollectionNavigation too."""
16307,298336853,b'if `disposable` is `null` it should just return immediatly'
16307,298349567,b'enumerator could be null'
16307,298350387,b'`DisposeAsyncIfAvailable` handles nulls. :trollface: '
16312,298422797,b'Typo in `Experssion`'
16312,298423040,b'Magic string'
16312,298423997,b'\xf0\x9f\x91\x8d '
16312,298425676,"b'Yes, till @maumar puts custom expression rather than methodcall.'"
16303,298262096,b'Mangled diff; this was DirectConstructorBinding'
16303,298262420,b'This was ConstructorBinding'
16269,297465726,"b""only did it over member access and not EFProperty because you can't compose EFProperty over client projection"""
16249,297368492,b'Just a refactor here to make the method smaller.'
16249,297369273,"b""@smitpatel I know remove the cast only if it was casting to our common parent type, for which we're setting the new shaper anyway. This code doesn't handle all cases - it's possible there will be two cast nodes, in which case this will not work (but I've seen this pattern in other places in the code). I'm still not exactly sure what we expect to happen, but this may be enough for now. Let me know if you want us to do something else here."""
16249,297369481,"b'PostgreSQL has `INTERSECT ALL` and `EXCEPT ALL`, this would allow me to implement that.'"
16249,297369667,"b""I actually ran into an error because NetTopologySuite's Union was wrongly recognized here :)"""
16249,297412860,"b'I was thinking to eventually use actual methodinfos for matching, but this should be good, at least for now. There are actually some places e.g. in ProcessJoin that prevented functions with the same name from being matched. You can clean it up if u want, or I can do it later'"
16249,297414908,"b""Using actual methodInfos for method from Queryable/Enumerable has low value. If they add more things to those classes, there are pretty drastic reactions outside of the scope of EF Core. So I think it is safe to assume that if method defined on those classes, name matching is sufficient. (Even overloads won't be added). I know it is not 100% fail-safe code but it is YAGNI."""
16249,297415125,"b'this way we only propagate include information applied on less derived type. e.g. \r\ncustomers.Include(c => c.Nav1).Concat(customers.OfType<VipCustomers>().Include(c => c.Nav2)), we would end up including only Nav1. We either need to merge include information (which is embedded in NavigationTreeNode on the NavigationExpansionState) or detect when the include paths on both sides are different and throw - can probably be done in a future PR as the scenario is somewhat contrived.'"
16249,297415900,"b""agreed, the longer I see @roji 's solution the more I like it"""
16249,297418908,b'you can use IncludeHelpers.CopyIncludeInformation'
16249,297420007,"b'add test where we do union on reference projections, e.g. order.Select(o => o.Customer).Except(order.Where(o => o.CustomerID == ""ALFKI).Select(o => o.Customer)'"
16249,297425140,"b'also case like weapons.Union(weapon.Select(w => w.SynergyWith)), in gears of war model - where the clr type is the same, but one has nav expansion, one doesnt'"
16249,297498132,"b""Which exception type to use? @ajcvickers \r\nWe had some recent discussion around this but I don't remember the outcome."""
16249,297498765,b'What is else result? Just ignore?'
16249,297498903,b'Inline variable'
16249,297499172,"b""Let's think about a different solution to represent set operation then. We are including multiple different patterns. Our common pattern so far has been custom expressions in tree rather than enum."""
16249,297553073,"b""This was one of the reasons that in the beginning I was thinking of a different type for set operations (instead of SelectExpression), but that's not compatible with our architecture.\r\n\r\nScoping this out to #16273 so we get this PR merged - will remove the Other enum member."""
16249,297554991,"b""I agree using MethodInfos has low value, as the probability of change there is limited. However, we just had the incident where adding overloads to DbDataReader made us break entirely - I'm sure we had the same logic when we wrote that reflection code :) We're trying to push for LINQ/expression trees to start making progress again, so it's not totally inconceivable for overloads to be added.\r\n\r\nThere also isn't much cost to just using MethodInfos, plus we already have one centralized place where these are available (LinqMethodHelpers). We could do a pass (post-3.0) on the entire codebase at some point and simply switch to MethodInfos to future-proof the product. \r\n\r\nUnless you guys object I can open an issue to track."""
16249,297585763,"b""Yeah, I thought about this a bit. I *think* that trying to do a set operation with differing includes should throw, since merging includes doesn't correspond to the presumed user expectation, which would be to only include each nav the set operand it's specified. This can't be done in SQL (i.e. unless we fetch the information and don't materialize it).\r\n\r\nIf users want merged includes, they can simply write the following themselves:\r\n\r\n```sql\r\ncustomers.Union(customers.OfType<...>())\r\n    .Include(c => c.Nav1)\r\n    .Include(c => c.Nav2)\r\n```\r\n\r\nWe may want to discuss this in design (@divega @ajcvickers). For now I've implemented a NotSupportedException for this (@maumar hope you can take a look to make sure I did it right)."""
16249,297662924,"b""OK on the first.\r\n\r\nFor the second, the SQL produced seems good:\r\n\r\n```c#\r\nSELECT [w].[Id], [w].[AmmunitionType], [w].[IsAutomatic], [w].[Name], [w].[OwnerFullName], [w].[SynergyWithId]\r\nFROM [Weapons] AS [w]\r\nUNION\r\nSELECT [w0].[Id], [w0].[AmmunitionType], [w0].[IsAutomatic], [w0].[Name], [w0].[OwnerFullName], [w0].[SynergyWithId]\r\nFROM [Weapons] AS [w1]\r\nLEFT JOIN [Weapons] AS [w0] ON [w1].[SynergyWithId] = [w0].[Id]\r\n```\r\n\r\nHowever, it's a left outer join and not an inner one (because SynergyWith is optional), so we get back rows with null IDs and materialization fails. I think that with a required relationship it would work fine, but SQL Server doesn't allow me to do that for testing (cycle).\r\n\r\nWe should maybe be handling this case, i.e. filter on non-null when doing projection via optional entity?"""
16249,297663606,"b'Sorry, debugging thing which slipped in.'"
16249,297683846,"b""OK, I went with a different approach - I now replace the EntityShaperExpression, and if it's wrapped by Convert nodes I recreate those exactly as they previously were. It's effectively as if the entity was originally queried as a less derived type as what it is.\r\n\r\nSorry this part is taking so many iterations, please let me know if it's still not the way you want - I still don't feel like I understand all the possibilities here 100%."""
16249,297759218,b'I still consider it YAGNI. '
16249,297781660,"b""I don't think we should filter, when you just project the optional, i.e. weapons.Select(w => w.SynergyWith) we would materialize nulls rather than filter them. I'd expect similar effect for set ops.\r\n\r\nSql we produce for simple optional projection is:\r\n\r\n```\r\nSELECT [w].[Id], [w].[AmmunitionType], [w].[IsAutomatic], [w].[Name], [w].[OwnerFullName], [w].[SynergyWithId]\r\nFROM [Weapons] AS [w0]\r\nLEFT JOIN [Weapons] AS [w] ON [w0].[SynergyWithId] = [w].[Id]\r\n```\r\n\r\nand we also have null keys, but materialization doesn't fail. Something seems wrong in the set case."""
16249,297782871,"b""So it's expected to be fine to materialize entities with null keys? Wasn't aware of that...\r\n\r\nHere's the test I was using:\r\n\r\n```c#\r\n[ConditionalFact]\r\npublic virtual void Union_with_self_projection()\r\n{\r\n    using (var ctx = CreateContext())\r\n    {\r\n        var query = ctx.Weapons.Union(ctx.Weapons.Select(w => w.SynergyWith));\r\n        var result = query.ToList();\r\n    }\r\n}\r\n```"""
16249,297783845,"b'When key values are expected to be null in projection (generally appears from doing a left join and right side can be null, but there can be other cases), translation pipeline is supposed to mark entity Shaper as nullable. If entityShaper is nullable then when reading null key values, it will give null back rather than materializing object. (If entity shaper is not marked nullable then it will throw exception)'"
16249,297783873,"b'yup, it should work'"
16249,297790139,"b""I see... that makes sense, was not aware - the exception was indeed an unexpected null in DbDataReader.\r\n\r\nSo this means we need to update the shaper for this when a set operation is performed? Any pointers to where/how I'd do that? """
16249,297790676,"b""I'll investigate some more - will try to find it."""
16249,297790922,b'@divega?'
16249,297793028,"b'rather than comparing from mappings you should compare navigations. You can re-use PendingIncludeFindingVisitor - run it on the pendingSelector of both preProcessResult.state. Those return PendingIncludes - mapping between navigationtreenode (from which you can extract the actual INavigation of the include) and the source mapping where it originated from. You can compare those structures for both sources and if they are the same, we are good, if they are different - throw. There could be multiple SourceMappings for each source (e.g. when we had a join before), so you need to figure out which SourceMapping from one source corresponds to which mapping from the other source, and then compare Navigations found by the visitor that are associated with them.\r\n\r\nAlso, the visitor currently short-circuits for collection includes, but you probably want to include them in the check, so you might want to add a flag to the visitor, and if the flag is set ignore this check:\r\n\r\n```\r\n            if (node.Navigation != null && node.Navigation.IsCollection())\r\n            {\r\n                return;\r\n            }\r\n```'"
16249,297805358,"b""I don't remember that discussion :smile: But I am leaning towards ~~NotImplementedException~~ InvalidOperationException and simplifying the message, but that is because I think #16243 is by design (of course I could be wrong and I may need someone to explain to me why it isn't)."""
16249,297811301,"b'FYI, I created https://go.microsoft.com/fwlink/?linkid=2097910 for exceptions we throw when something would require client evaluation. We tweak what it points to in the future. '"
16249,297816146,"b""I agree with @roji. This kind of break has actually happened more than once and we already decided to make sure when we obtain method infos we do so with a very targeted condition. AFAIR we already did a pass once (though on the old query pipeline) to improve what we had. Let's not overturn that unless there is a good reason."""
16249,298255598,b'Opened #16300 to track.'
16249,298256699,b'Scoping out to #16301'
16249,298257086,"b'Have done this as discussed, will push soon.'"
16249,298259333,"b""@divega I don't have the full picture, but @smitpatel seemed to indicate this should be possible by us moving the union before the client evaluation.\r\n\r\nI'm leaning towards NotSupportedException (in the sense of not supported in this version), or to a less extent NotImplementedException (although that's usually used as a very temporary marker for a dev to remember they still have to do something). InvalidOperationException seems used more because an object is in a wrong state, which doesn't seem to be the case here.\r\n\r\nHowever, I'm changing to InvalidOperationException for now we we really want this PR to get merged in time for preview7."""
16249,298276520,b'Please skip these and the new tests for Cosmos'
16249,298277451,"b'No problem, will skip all set operation tests for now.'"
16249,298290448,"b'nit - ""skipCollectionNavigations:""'"
16249,298290556,b'same here'
16249,298292088,"b'should we throw instead, because of #16298?'"
16249,298297658,"b'actually it should be enough to compare Navigation on each NavTreeNode, no need to flatten and compare all of them - we are doing the same work multiple times'"
16249,298298942,"b'FindPendingReferenceIncludes already goes thru all the child nodes recursively, so we get an entry in PendingIncludes list for each navigation that is marked for include'"
16249,298407852,"b""Ah, I see. That is a good idea. I guess it would only about lifting the client eval part and not the actual projection, because lifting the projection over Union() would not be correct in all cases. I personally would love to do something when we can, but I suspect it is going to take some time for this to get to the top of the list. \r\n\r\nRe the exception type, I actually don't feel strongly about which one would be the most correct to throw, but what I heard from @ajcvickers and @smitpatel is that keeping the set of exception types customers should catch beats being absolutely correct. """
16249,298540738,"b""We'd throw anyway from SelectExpression.ApplySetOperation(). I can really remove all trace of different siblings, but it doesn't seem really worth it (I hope we'll manage to fix it soon anyway) - let me know if you feel strongly."""
16249,298541220,"b""OK, made the change - still don't have a good mental model of everything there. Thanks!"""
16249,298649008,"b'It\xe2\x80\x99s fine as is, just a suggestion/observation '"
16322,298649389,b':trollface: '
16322,298651630,b'Remove first if block. Visiting EntityShaper can return EntityShaper back. so you can always use innerExpression.'
16322,298686358,b'We might need them...'
16266,297444598,b'Why no just reset nullability to false?\r\nIf instance is null then nullability remains false which is true.'
16266,297496584,b'CaseExpression may also need reset since Operand can be null.'
16338,298734469,b'temp => grouping'
16338,298734546,b'Assert SQL too'
16345,298747772,b'Fix name'
16345,298747981,b'\xf0\x9f\x98\xa2 '
16348,298761575,"b""Looks like\r\n1. This PR is undoing part of @ajcvickers fix earlier today\r\n2. This PR is changing code that just doesn't matter. For example, this method will return `null` when `interceptor` is `null` before and after the change."""
16348,298761833,b'This change and those later in the file look like they should fix the problems seen in aspnet/EntityFrameworkCore#16348 Doubt anything above this change matters one way or the other.'
16348,298762151,b'That is right. `?.` is only safe when the default result being returned is null/void. So I converted to that pattern wherever possible.'
16348,298762306,"b'I changed all the methods to do right thing (not return null when task is expected), regardless of they affected asp.net build or not.'"
16354,298809791,"b'Changes under eng/common are irrelevant. If you think this is important, make the changes in the dotnet/arcade repo.'"
16354,298809962,b'Will AspNetCore need to react to this breaking change?'
16354,298810770,"b""It doesn't look like it's referenced there https://github.com/aspnet/AspNetCore/search?q=CreateTablePrimaryKeyContstraint&unscoped_q=CreateTablePrimaryKeyContstraint\r\nAnd is a protected method"""
16354,298811374,"b""Glad AspNetCore won't need a reaction.\r\n\r\nThis remains a breaking change; renaming a `protected` method breaks the public API unless the containing class is `internal` or `sealed`. For example, this PR would have needed updates to `ref` assemblies if it used them.\r\n\r\nThat said, I'm not sure this is announcement-worthy. @ajcvickers your thoughts?"""
16110,294034367,b'Will address as part of #13767. Maintaining compatibility for now.'
16110,296431607,"b""@airbreather This is incompatible with SQL Server. Is there any way to go back to the previous format? Apparently we don't have a test covering it, but we use WKT for geometry literals/constants in the SQL and I suspect they're broken now."""
16110,296440576,"b'> This is incompatible with SQL Server\r\n\r\nConfirmed, added NetTopologySuite/NetTopologySuite#324'"
16110,296442413,"b'Should be fixed by NetTopologySuite/NetTopologySuite@0810335 in 2.0.0-pre.180690659 now: instead of `geom.AsText()` or whatever is producing the string literal, use `WKTWriter.ForMicrosoftSqlServer().Write(geom)`.\r\n\r\n`WKTWriter.ForMicrosoftSqlServer()` can be cached.'"
16110,296450461,"b'Wonderful, thank you!'"
16110,296818034,b'Works great; added test coverage.'
16357,298843785,b'Any other ideas here?'
16357,298847221,"b""I'll defer to @AndriySvyryd..."""
16362,298854708,b'Noticed that so far we are not asserting SQL for other FromSql tests against SQLite. I can revert changes to this file if this is by design.'
16362,298854831,"b""This is based on test immediately above which has no asserts. I am thinking I should add some assert for both, but want to make sure this wasn't intentional."""
16362,298859256,b'We can add result assertions. Generally it is oversight. Only a handful of cases which we intentionally leave it out when the test is verifying that query is compiling and executing.'
16362,298859349,b'We assert SQL in Sqlite provider when we expect it to differ from SQL server. Like different server side functions for date time operations.'
16362,298861396,"b'Sounds good. In this case there aren\xe2\x80\x99t any differences, so I will remove for consistency.'"
16363,298893064,b'Add a space after the coma'
16339,299163587,b'What about Concat'
16339,299164636,"b'Oops, tend to forget about that one...'"
16368,299206948,b'When called from `RelationalDatabase.SaveChanges` it should still use the same state manager as the context'
16368,299209794,b'That would be why so many tests are failing. \xf0\x9f\x9a\x8e '
16368,299227863,b'Also in general we should avoid any `GetService` calls in the `SaveChanges` callchain for perf.'
16385,299210400,b'You could just store all of this in an annotation on the model and remove it on finalize to avoid thread-safety issues.'
16385,299212202,"b'Finalizers are in general not guaranteed to run, and are usually not recommended for this kind of thing... Maybe we should consider to have a place on the model builder where conventions can have temporary storage. Another option would be to instantiate conventions per model - is this not done because of perf?\r\n\r\nRegardless, do you see any specific issue with the way things are currently implemented?\r\n\r\n'"
16385,299213872,b'@AndriySvyryd are you referring to FinalizeModel?'
16385,299221491,"b'Yes, confirmed with @AndriySvyryd.'"
16385,299230350,b'You need to add the conventions to `conventionSet.OnModelFinalized` for them to be called.'
16385,299234620,"b""Forgot about that. Just pushed a commit to fix, but the design tests are now failing because of:\r\n\r\n```\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\nStack Trace:\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.Model.OnAnnotationSet(String name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation) in /home/roji/projects/EFCore/src/EFCore/Metadata/Internal/Model.cs:line 835                                             \r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotatable.OnAnnotationSet(String name, Annotation annotation, Annotation oldAnnotation) in /home/roji/projects/EFCore/src/EFCore/Metadata/Internal/ConventionAnnotatable.cs:line 69                                    \r\n   at Microsoft.EntityFrameworkCore.Infrastructure.Annotatable.RemoveAnnotation(String name) in /home/roji/projects/EFCore/src/EFCore/Infrastructure/Annotatable.cs:line 160                                                                                                             \r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotatable.RemoveAnnotation(String name) in /home/roji/projects/EFCore/src/EFCore/Metadata/Internal/ConventionAnnotatable.cs:line 100                                                                                   \r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotatableExtensions.SetOrRemoveAnnotation(ConventionAnnotatable annotatable, String name, Object value, ConfigurationSource configurationSource) in /home/roji/projects/EFCore/src/EFCore/Metadata/Internal/ConventionAnnotatableExtensions.cs:line 30\r\n```\r\n\r\nAny idea what that's about?"""
16385,299235959,"b""That's likely caused by `FinalizeModel` being called twice"""
16385,299241999,"b""I added a check to prevent calling RemoveAnnotation more than once, but something unrelated is still triggering the NRE. The test seems to be going through one model successfully (where there are no entities), and when it finalizes the second model the ConventionDispatcher is already null.\r\n\r\nUnfortunately I have to go home now (it does happen sometimes :)), if you have a moment to look at this more in detail that would be great. Otherwise I'll pick it up tomorrow again."""
16385,299250108,b'That check is not necessary just add the conventions before `ValidatingConvention`. You can add a comment there to avoid this from happening again.'
16385,299389679,"b""Thank for the help, it was getting a bit late last night :) We can consider making this mistake throw in a more informative way (not NRE) although it's not very important."""
16393,299303465,b'Use method group'
16393,299304574,b'throw?'
16393,299313166,b'We can potentially use it on client side fully since it is a constant anyway. Hence not throwing.\r\nIt is being used for `GroupBy(e => new {})` currently.'
16393,299587153,"b""It's Action<SqlExpression> rather than Func so cannot pass method group."""
16380,299166339,"b""We don't need/want this.\r\nI assume you needed this since there could be complex expression like Case block or others which needs to be identified and condensed. It would be useful for general case. For now, you can put this as private nested class where you need it. We will clean it up later when we have proper optimization to reduce SQL tree."""
16380,299199563,b'Done'
16380,299210794,b'still not private nested class....'
16380,299383835,"b'Oops, sorry...'"
16381,299224711,b'Do these work in Cosmos? :trollface: '
16381,299642207,"b""I don't see any coverage asserting the SQL for LongCount outside of SQL Server (where the default behavior is overridden). Can we assert the SQL in a SQLite test for coverage?"""
16381,299656116,"b""This is all SqlServer logic isn't it? Should be in SqlServerSqlTranslatingExpressionVisitor at some point?"""
16381,299657138,b'Nobody likes switch expression in this project :('
16381,299657528,b'nit: conditional operator'
16381,299657587,b'nit: conditional operator'
16381,299683224,"b'We have discussed this earlier. This is C# logic. We have already discussed this\r\nhttps://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,1951'"
16381,299683483,"b""I converted to switch, no?\r\nIt wasn't switch earlier because it started with just 1 if and expanded later."""
16381,299683852,b'Sure'
16290,297896163,"b'Note: now we have hit 42 we can never change this again! Or life, the universe, and everything might end!'"
16290,297901204,b'We should reset this when returning to the pool.'
16290,297905091,"b""Interesting. I specifically didn't do this because it is the same context instance, so if people are hanging onto instances when they shouldn't, then they would still know it is the same instance.\r\n\r\nI guess if we reset, then it's more useful for log correlation, but less useful for thread-safety issues.\r\n\r\n@divega Thoughts?"""
16290,297909848,b'Should we have a pool id as well?'
16290,297910751,b'Like that.'
16290,297951638,"b'Not sure I got that. So, is the idea that the DbContext id gets reset but there is another id that doesn\xe2\x80\x99t change?\r\n\r\nFWIW, I was thinking we should leave the DbContext id unchanged and have a number that we increment every time the pool rents the DbContext to help with the correlation. '"
16290,299171288,b'I am trying to understand why we need both id and instanceid. It sounds like just one of them that remains the same for the life of the DbContext + the lease should be sufficient.'
16290,299171823,"b'Could we call the property something like CorrelationId? I am fine with leaving the naming discussion for later. Also, I may not be too familiar with any pre-existing naming conventions for this.'"
16290,299174064,b'Sufficient for what?'
16290,299174448,"b""Yes, but for `DbConnection` it's called `ConnectionId`, for `DbTransaction` it's called `TransactionId`, and for `DbCommand` it's called `CommandId`."""
16290,299193139,b'Using the same guid might be confusing'
16290,299193675,b'I figured it would make it more obvious that pooling was not being used.'
16290,299194157,"b'extra ""a""'"
16290,299200564,b'\xf0\x9f\x98\xa2 '
16290,299225321,b'An empty one would be more obvious IMO'
16290,299228087,"b""If one of them is empty, then you'll likely need to write different code to handle pooling and non-pooling. The idea here is that:\r\n* If you care about the same instance being used from multiple threads, then `InstanceId` is for you. It will always be associated with the instance, even with pooling.\r\n* If you care about the conceptual context instance being used, then `ContextId` is for you. It will always be the conceptual context instance being used regardless of pooling.\r\n* I'm not 100% sure why somebody needs to know the number of leases, and while `InstanceId` plus leases could give you the same information as `ContextId`, that would again require different code for pooling and non-pooling.\r\n* The `PoolId` is not very useful. It could be removed. But it also isn't harmful and could allow issues with service providers and pooling to be more easily debugged."""
16290,299231319,"b""Ok, this aspect isn't very important"""
16290,299545978,b'@divega Any more thoughts on this?'
16290,299685405,b':laughing:'
16290,299713912,"b'Nit: do we need the conditional, or will _lease be zero anyway?'"
16290,299715572,"b""Didn't think of that!"""
16380,299717412,"b""While this may not be cause of perf regression reported #16405 \r\nLet's improve it somewhat since this is runtime and not compile time.\r\n- Only visit orderingExpression if inner expression was actually changed.\r\n- Initialize the visitor only once in the ctor"""
16380,299719989,"b""@smitpatel should we track this in an issue so that we don't miss it? """
16380,299723268,b'I am reverting this commit. Hit an issue in group by translation. This logic is actually incorrect.\r\n`ORDER BY COUNT(*)` is valid and does not reference any column expression.'
16381,299860395,"b'I meant the new C# 8 expression, not switch statement - submitted #16421 which I hope we like.'"
16381,299863965,"b""Sorry, forgot about that - but C# Average doesn't convert float to double as we seem to be doing below?"""
16380,299887595,"b'Submitted #16422.\r\n\r\nThanks for the perf suggestions, have made the changes. Note that constant searching now only occurs when an expression was changed to constant (other changes do not trigger this).\r\n\r\nFor ORDER BY COUNT(*), have modified the visitor to also recognize ParameterExpression (and added a test). I also added SqlFragmentExpression which could contain a column - or not - but it seems better to assume it\'s non-constant (better to get a ""constant ordering"" error from the DB than wrong results).\r\n\r\nI think that should cover it - do you see any other case where this would wrongly identify something as constant?'"
16381,300044116,b'I think it reduces readability especially when doing function call rather than just returning some value.\r\n\r\n'
16381,300046931,"b""According to postgre documentation, Average over real column gives double precision back. but in C# it expects float.\r\nC# float doesn't convert to double but all database returns double after doing AVG. So after we generate SqlFunction, we convert it to float again for C#."""
16381,300058785,"b""lol, I'm seeing a lot of people in the community who don't like the new switch expression. It'll be interesting to see where it does and doesn't get used. It feels a lot like LINQ comprehension syntax where it improves readability for some things, but makes it worse for others."""
16437,300152764,b'`[MemberData(nameof(IsAsyncData))]`'
16437,300160412,"b""I don't like it. It confuses test discovery when going from skipped to not skipped. """
16437,300161316,b'Then we can change it to other way everywhere. I did not know it was the reason for test discovery issues.'
16422,300032855,"b""SqlServer does not allow ordering by parameter either. This may work in current tests but seems like a hacky solution.\r\n```\r\ndeclare @p1 int;\r\nset @p1 = 1;\r\n\r\nselect 1 \r\nfrom Cities\r\norder by \r\ncase \r\n    when 1 = 1 then @p1\r\n\telse 1\r\nend\r\n```\r\n```\r\nMsg 1008, Level 16, State 1, Line 8\r\nThe SELECT item identified by the ORDER BY number 1 contains a variable as part of the expression identifying a column position. Variables are only allowed when ordering by an expression referencing a column name.\r\n```\r\nLet's do it right way by simplifying expression. Or we can leave the PR unmerged for now and revisit it later closer to preview8 deadline."""
16422,300034925,"b'Few design things (no need to address right now)\r\n- Instead of storing state you can just check if `visited.Equals(extensionExpression)`. If it is changed, it will be different and reconstructed.'"
16422,300035711,"b'Instead of calling reset & visit, when visitor has state which needs to be reset at the start, add a method on visitor (like SqlTranslatingExpressionVisitor.Translate) to do pre/post-processing.'"
16422,300349406,"b'The idea here was to limit the check to only the case where when we rewrite the expression into a constant - not all changes inside the ordering mean that we need to perform this (relatively expensive) check. This might be a somewhat unneeded optimization, let me know what you think.'"
16422,300351205,"b""Thanks, good design tip.\r\n\r\nIt would have been nice for Visit() to be protected on ExpressionVisitor, this way it wouldn't be exposed."""
16422,300366940,"b""OK, so: `ORDER BY @p` doesn't work because it's interpreted as a column position (not supported), but `ORDER BY @p + 1` does work, presumably because it's interpreted as a constant instead?\r\n\r\n:confounded: \r\n\r\nIn any case, thinking about it some more, I think the previous logic in #16380 may have actually been more correct. Ordering by COUNT(*) is very similar to ordering by a constant - if an ordering doesn't reference the current row in any way, it is basically meaningless, isn't it? In fact, QuerySqlGenerator.GenerateOrderings already elides SqlParameterExpression just like SqlConstantExpression. So why not have the same logic here, and always simplify an ordering that contains a ParameterExpression (but no ColumnExpression) to `(SELECT 1)`?\r\n\r\n(We should try hard to avoid simplifying the expression unless absolutely necessary, as this will be both non-trivial to write and also have to run in runtime).\r\n\r\nNote that COUNT(*) over a related entity (e.g. `OrderBy(c => c.Orders.Count()`) does make sense - unlike COUNT(*) over the actual entity which is a constant. This should work properly because the join will introduce ColumnExpressions."""
16422,300479349,b'Possibly un-needed. We can also do reference equality due to immutability and reconstruction. It should give same result.'
16422,300480111,"b""> Ordering by COUNT(*) is very similar to ordering by a constant - if an ordering doesn't reference the current row in any way, it is basically meaningless, isn't it? \r\n\r\nNot when you have a Group by clause.\r\n\r\n> (We should try hard to avoid simplifying the expression unless absolutely necessary, as this will be both non-trivial to write and also have to run in runtime).\r\n\r\nLet's not do premature optimization here. I would prefer to be on the side of being correct than being fast."""
16404,300023954,"b'```suggestion\r\n            - powershell: ""Get-ChildItem env:""\r\n```\r\nGood practice to avoid aliases in scripts. They\'re not as stable as the actual cmdlet names.'"
16404,300187930,b'how come null?'
16404,300188335,b'Would it be more useful to use proper Async dispose pattern with await using?'
16404,300188522,b'Why async disabled?\r\nAlso @ajcvickers and you need to arrive at which direction IsAsyncData is going :trollface:'
16404,300188758,b'What is the difference between => vs get;'
16404,300188882,b'You removed base.Dispose call from cosmos though'
16404,300189127,b'Removed caching of _resolvedConditions?'
16404,300198968,"b""Didn't seem that helpful"""
16404,300199072,"b'Yes, is there an issue?'"
16404,300199177,b'Whether it gets evaluated once or on every call'
16404,300199321,b'Supposed to be the other way around.\r\nMemberData is useful here as we need to be able to disable one quickly.'
16404,300199400,"b""Indeed. For some reason I thought it wasn't supported yet"""
16404,300199570,b'If it throws while being created'
16404,300212312,"b""CreateInitialized is outside of try. If either of those throws, execution wouldn't reach here."""
16422,300659286,"b'I may be misunderstanding, but once again there are rewritings that this visitor performs which do not require our check. For example, if there\'s a null in the values list, the visitor adds null semantics - if we do a reference equality check it will show as modified, although there\'s no need to check whether it was converted to constant.\r\n\r\nIt may not be important to skip these cases perf-wise, but then again the stateful flag approach seems easy and safe enough, and allows us to check only when we know we\'ve performed a ""dangerous"" rewrite.'"
16422,300664495,"b""> Not when you have a Group by clause.\r\n\r\nGood point - but I don't think it's a fundamental thing here. An OrderBy() after GroupBy() still must refer to the columns of the table in some way - and that can be our trigger for not reducing it to constant. I just did a quick test, and this actually works well with the current state of this PR, since OrderBy() is generated with an SqlFragment for the star in COUNT(*):\r\n\r\n```c#\r\nvar list = new List<string>();\r\n\r\nreturn AssertQueryScalar<Order>(isAsync, os => os\r\n    .GroupBy(o => o.CustomerID)\r\n    .OrderBy(g => (list.Contains(g.Key) ? 1 : 0) + g.Count())\r\n    .Select(g => g.Count()));\r\n```\r\n\r\n```sql\r\nSELECT COUNT(*)\r\nFROM [Orders] AS [o]\r\nGROUP BY [o].[CustomerID]\r\nORDER BY CASE\r\n    WHEN CAST(1 AS bit) = CAST(0 AS bit) THEN 1\r\n    ELSE 0\r\nEND + COUNT(*)\r\n```\r\n\r\nSo unless I'm mistaken, the approach of looking for references to the row's columns should be OK - let me know if you see another problematic case."""
16484,301179392,b'`Code.Literal()` is preferred when they type is statically known.'
16484,301181576,b'\xf0\x9f\x8e\x89'
16422,301224761,b'States are dangerous. No need of premature optimization.'
16422,301226924,"b'There is no good logical reason why SqlFragmentExpression is allow-able like ColumnExpression. Yes it works for `COUNT(*)` but I fail to identify why it is any general case.\r\nUnless, we have very detailed understanding of what is supported and what is not then a generalized visitor based pattern matching cannot be concluded to be accurate. Otherwise it is just bunch of hacks put together to make tests (or scenarios we know) pass. What if someone creates SqlFragment with value 1 inside. This escapes it but still invalid SQL.'"
16422,301235907,"b'The point is that we don\'t know, and will never be able to know, what is inside an SqlFragment - no matter how complete an analysis we do. So either we:\r\n\r\n1. Assume that it is a constant, in which case we will sometimes elide the whole ordering. This silently produces a wrong ordering.\r\n2. Assume that it may not be a constant, in which case SqlServer will error if it *is* a constant.\r\n\r\nThe only theoretical alternative is if we start to somehow transfer additional information with the SqlFragment, which allows us to understand what\'s in it. That simply seems unjustified for just these edge cases.\r\n\r\nTo my mind that is good logical reasoning (I actually excepted SqlFragment before looking at `COUNT(*)`) - I don\'t agree this can be called a ""bunch of hacks"".'"
16422,301236303,"b""We have state in a lot of visitors around the pipeline, this is outside of the compilation phase (so perf-sensitive), and the statefulness is extremely limited.\r\n\r\nBut if you're deadset against it I can remove it."""
16097,293646925,b'\xf0\x9f\x8e\x89 @Wraith2 you rock! (no System.Data.SqlTypes)'
16473,301244716,b'Reference navigation #Resolved'
16473,301245534,b'All of them are returning extensionExpression back anyway so\r\neither merge all the ifs and return extensionExpression\r\nOr if you want to use switch then fall through all the blocks and return the same. #Resolved'
16473,301246809,b'Inline temp var #Resolved'
16473,301246992,b'Same as the other comment #Resolved'
16473,301247183,b'Same as other #Resolved'
16473,301247357,b'ditto!\r\n #Resolved'
16473,301248581,b'How did navigation binding expression ended up here. It should get removed before translation starts #Resolved'
16473,301250147,b'Is there specific reason we cannot do this when applying pending selector?'
16473,301251367,b'Copy paste error \xf0\x9f\x98\x84 '
16473,301252275,"b""Cleaner code?\r\nAlso I don't know why `PendingIncludeFindingVisitor` and `PendingSelectorIncludeRewriter` are separate."""
16473,301290275,b'neat: this could be default case'
16473,301292916,"b""I don't know either. Probably, we store includes when we see them but once in final projection we figure out which includes are not ignored and then generate appropriate join and apply them.\r\nThere are bugs around include not being in final projection. Probably because of using ExpressionVisitor rather than working on pending selector.\r\nI would prefer to call into this visitor only when applying pending selector but not sure if nav-rewrite code is streamlined enough to have it in one place. We will re-visit later. Looks fine for now."""
16473,301327357,b'make _rewriteIncludes outer if.'
16473,301627372,"b'Just call Update, it makes check already.'"
16469,300807018,"b""Note that entity equality specifically throws instead of evaluating a subquery twice, as null semantics does in this case. I know this is somewhat temporary (parameter nullability caching will make some needless cases go away) but it's still worth thinking about?"""
16469,300807081,"b'Note this change, which seems more correct - matches LINQ to objects behavior but is also a breaking change.'"
16469,300807157,"b""This now throws SqlException instead of the previous InvalidOperationException, which seems fine. But we can't assert for SqlException in the base class, hence this."""
16469,300807229,b'Seems like we have a bug here with Single in subquery. Let me know if I should open a new issue or point me to an existing.'
16469,300807362,"b""I'm actually not sure if this is a bug, or was previously a bug - there really seem to be 5 distinct orders in Northwind with this CustomerID?"""
16469,301234222,b'SQL?'
16469,301234705,b'It is rather runtime parameter since we compute value during execution phase'
16469,301236384,b'Move to core\r\nIt should be in optimization phase not in translation.\r\nIt is not task of SqlTranslatingExpressionVisitor to get this values out.\r\nYou can do the processing right inside EntityEquality since it generates this kind of expression'
16469,301236869,"b'This processing is unnecessary. the tree has parameterExpression, just insert simple ternary of @p0 == null ? null : @p0.Name'"
16469,301237251,b'Could be incorrect test\r\n\r\n---\r\nIn reply to: [300807362](https://github.com/aspnet/EntityFrameworkCore/pull/16469#discussion_r300807362) [](ancestors = 300807362)'
16469,301243545,b'We stopped throwing behavior for Single in subquery. See #15559 \r\nThough it should generate invalid SQL for now since single should generate Top (2) in subquery which is wrong.'
16469,301243704,b'What SQLException?'
16469,301243981,b'There is already tracking issue for it.'
16469,301286858,"b'All parameter values are always computed during execution phase, no? What makes these special is that they are added during compilation rather than during frontend parameter extraction...'"
16469,301287131,"b'Thanks for the guidance, will do.'"
16469,301289180,b'All parameter values are computed during executing query. But ParameterExtractor computes parameter values before executing compiled query whereas these are parameters which will be part of compiled code.\r\nFeel free to use different name but compile time is quite incorrect.'
16469,301617066,"b'No problem, have changed to ""runtime parameter"".'"
16469,301676918,"b""This is pretty much what you described in your comment below (https://github.com/aspnet/EntityFrameworkCore/pull/16469#discussion_r301243545). With the new information I'll mark this test skipped and reference #15559.\r\n\r\nException:\r\n\r\n```\r\nMicrosoft.Data.SqlClient.SqlException : Subquery returned more than 1 value. This is not permitted when the subquery follows =, !=, <, <= , >, >= or when the subquery is used as an expression.\r\n```\r\n\r\nSQL:\r\n\r\n```sql\r\nSELECT [e].[EmployeeID], [e].[City], [e].[Country], [e].[FirstName], [e].[ReportsTo], [e].[Title]\r\nFROM [Employees] AS [e]\r\nWHERE ((\r\n    SELECT TOP(2) [e0].[EmployeeID]\r\n    FROM [Employees] AS [e0]\r\n    WHERE ([e0].[EmployeeID] <> [e].[ReportsTo]) OR [e].[ReportsTo] IS NULL) = 0) AND (\r\n    SELECT TOP(2) [e0].[EmployeeID]\r\n    FROM [Employees] AS [e0]\r\n    WHERE ([e0].[EmployeeID] <> [e].[ReportsTo]) OR [e].[ReportsTo] IS NULL) IS NOT NULL\r\n```\r\n"""
16469,301680654,"b""Yes, this is very similar to Where_query_composition_entity_equality_multiple_elements_SingleOrDefault from the comment above, except that this test doesn't generate any rows at all and SqlServer is OK with that... I will also reference #15559 in the skip message."""
16469,301683775,"b'Yeah, there really are 5 orders in the database, I wonder how this was passing previously.\r\n\r\nCorrected the test.'"
16469,301702225,b'use `__`'
16469,301703827,b'Wrap is not correct word. You are just adding parameters right before query not putting something around query. Or something like https://github.com/aspnet/EntityFrameworkCore/blob/v3.0.0-preview5.19227.1/src/EFCore/Query/EntityQueryModelVisitor.cs#L721-L751'
16469,301704390,b'There is also convert to object when we generate the lambda to extract the value. Introduce convert nodes only when necessary.'
16469,301706823,"b""You don't want us to use a different prefix than CompiledQueryCache.CompiledQueryParameterPrefix? Special prefixes could help us debug where parameters are coming from etc., any reason not to do it?"""
16469,301707579,"b'Well technically the original query is not wrapped in a block that contains other stuff :)\r\n\r\nBut no problem. How about InsertRuntimeParameter(), and then I rename the current AddRuntimeParameter to RegisterRuntimeParameter?'"
16469,301708089,"b'Since you have IProperty available here, you can also use something like this\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/v3.0.0-preview5.19227.1/src/EFCore.Relational/Storage/Internal/TypeMappedPropertyRelationalParameter.cs#L48\r\nIt should be easier processing and would confer to metadata configuration.'"
16469,301709068,b'InsertRuntimeParameter *s*\r\nPerfect!'
16469,301710163,b'CompiledQueryParameterPrefix should be prefix to every parameter we generate.\r\nCurrent prefix for query filters is `@__ef_filter__Field_0`\r\n'
16469,301710397,b'Oh I see confusion.\r\nI meant use `__EE`'
16469,301712181,"b'Good catch, thanks.'"
16469,301715632,b'Thanks!'
16469,301741751,b'Changing prefix to `__entity_equality_` as discussed.'
16469,301743136,b'This comment should be indented. Check out other summary blocks.'
16469,301743457,b'Why are these protected? Make the private readonly unless we need to.'
16469,301743911,b'Can you do the same thing with IProperty here too? Can use client method if you want to. '
16469,301744012,b'indent'
16469,301744514,b'Comment'
16469,301745336,"b'This is to facilitate access to inheriting subclasses - at least in the old pipeline there were several cases like this. I will changed to private readonly, is the policy to not do protected and force inheritors to capture the same service again in their own private field?'"
16469,301746383,"b'On the side of being conservative, make everything private readonly. Deriving class can capture them anyway. And once people actually using it we can change it to protected to facilitate. Currently no one subclass this, (and you made a breaking change here already \xf0\x9f\x98\x9b )'"
16469,301759694,b'private static. We always add access modifiers even if implicit.'
16469,301760358,b'GetTypeInfo.GetDeclaredMethod (like how you did in QCC)'
16550,302171272,"b'Just a side note:\r\nWe have no consensus on if we want to use switch expression everywhere. In certain cases, it seems useful but in other cases it also hinders readability. It will show up in design meeting at some point.'"
16534,301842161,b'No BOM please'
16534,301843633,b'repeated'
16534,301844162,"b""We've decided at some point that this should use the underscore case"""
16534,301844612,b'Revert encoding'
16534,302176064,b'Adding rule to make private const fields to _camelCase'
16550,302201890,"b""OK, no problem. I also don't think using them everywhere is a good idea - it's a case-by-case thing. Feel free to reject changes if you feel they're detrimental.\r\n\r\n/cc @ajcvickers"""
16531,301816831,b'get*'
16562,302300460,b'We cannot move it here. This now allows you to initialize invalid SqlBinary using new Syntax.\r\nProper solution would be to derive from SqlBinary to add additional operators. Or if you have any other ideas.'
16562,302303397,"b""> This now allows you to initialize invalid SqlBinary using new Syntax.\r\n\r\nWell, it's invalid only in the sense that SQL Server doesn't support it (but PostgreSQL does)... Besides, only providers (or very advanced users) would be in a position to inject manually-initialized SqlBinaryExpressions into the query, and so isn't it their responsibility? Also, the way I understand the API, you're supposed to instantiate via the SqlExpressionFactory (where we have provider-specific checks) and not instantiate directly, so if you're violating that, all bets are off no?\r\n\r\n> Proper solution would be to derive from SqlBinary to add additional operators\r\n\r\nSome thoughts... It seems odd to have an SqlBinaryExpression that happens to correspond to what SQL Server supports, and require other providers to create another expression type... It's a good idea to keep the SQL expression hierarchy as similar as possible to the regular Expression hierarchy, and not to start diverging."""
16562,302304035,"b""> you're supposed to instantiate via the SqlExpressionFactory \r\n\r\nUser cannot do since it is a service. It can be used to provide translation for UDF during OnModelCreating. While it is true that it is supposed to be used via SqlExpressionFactory, no there is no hard and fast rule that factory must be used. The expressions where factory must be used have their ctors marked as internals.\r\n"""
16562,302304495,"b'SQLite also supports all of them. If there is something SqlServer specific in relational, we can move it to SqlServer level.'"
16562,302305241,"b""There's no urgency to resolve this right now, we can rediscuss next week.\r\n\r\n> User cannot do since it is a service.\r\n\r\nI meant in case a user replaces a service such as the SQL translating visitor (very advanced...).\r\n\r\nIn any case, I think it may not be a problem to simply allow this. Anyone advanced enough to be constructing expression trees assumes a lot of responsibility, and if they happen to inject an expression that isn't compatible with their providers, it seems reasonable for things to fail.. We can mark the constructor as internal as an additional warning sign too."""
16562,302305439,b'(if you want we can also bring this to design)'
16562,302306337,"b""Users are not supposed to replace the service. It is for providers. Users are supposed to use through new syntax. At least for cases right now where users have to use this, they cannot use a service. \r\nI don't think responsibility part is entirely true. Even in case of LINQ they throw exceptions for incorrect tree.\r\n"""
16562,302307151,"b'> SQLite also supports all of them. If there is something SqlServer specific in relational, we can move it to SqlServer level.\r\n\r\nInteresting... In that case, maybe we can allow all operators in relational, and have a check in SqlServerSqlTranslatingExpressionVisitor which throws on the unsupported ones?\r\n'"
16471,300809877,"b'FYI: Changes here, were only in alphabetic order.'"
16471,300821513,"b'Actually, the last two are not'"
16471,301285039,b'@divega - Should this return bool or int. SqlServer ISDATE returns int'
16471,301285388,"b""Don't use dictionary. Do direct comparison"""
16471,301285827,"b""Why first argument has to be property reference? \r\n`SELECT ISDATE(N'2009' + N'-1-1')` is valid SQL."""
16471,301285855,b'Inline'
16471,301286527,"b""There shouldn't be any inference needed here.\r\nstring would have type mapping set if coming from a column reference in any way. If it does not have type mapping set because it was undeterminable then `.Function` call will apply default type mapping anyway."""
16471,301303691,"b'**Note:** as I reported here: https://github.com/aspnet/EntityFrameworkCore/pull/16471#issue-294998086.\r\nIt would be much nicer and semantic to use Boolean, since ISDATE returns only 0/1, but if we should follow exactly what SQLServer tells us, we should return an integer, but I would be happy if it was boolean already that makes more sense.'"
16471,301328140,b'still do reflection to find out methodInfo but use methodInfo for comparison'
16471,301328203,b'use exact number and create array.'
16471,301328296,b'dead code'
16471,301328752,b'Make this exception message parameterized on function name and DRY it with FreeText & Contains.'
16471,301356538,"b'@smitpatel, I was not able to understand what you wanted to talk about here.'"
16471,301359799,b'Like this https://github.com/aspnet/EntityFrameworkCore/blob/16b75e4a15b31c0667c80a7f2b66fab283893b07/src/EFCore.SqlServer/Query/Pipeline/SqlServerNewGuidTranslator.cs#L24\r\n\r\nSo you use MethodInfo to match which is much more robust.'
16471,301375658,b'Is this auto-generated? This file is generated using t4 template. Should not be modified manually.'
16471,301386036,b'@smitpatel Done!'
16471,303481581,b'Can we also have a positive test which recognize and returns true. In projection & where both.'
16471,303481720,b'Validate if the given string is a valid date.'
16471,303482435,b'true for valid date and false otherwise.'
16627,304560971,b'```suggestion\r\n            if (!EntityType.IsAssignableFrom(navigation.DeclaringEntityType) \r\n                && !navigation.DeclaringEntityType.IsAssignableFrom(EntityType))\r\n```'
16627,304561018,b'```suggestion\r\n            if (!EntityType.IsAssignableFrom(navigation.DeclaringEntityType) \r\n                && !navigation.DeclaringEntityType.IsAssignableFrom(EntityType))\r\n```'
16627,304564345,"b""Don't ignore base navigations on derived types"""
16627,304636465,b'Does not work. It also need to check if the entityType is towards base.'
16627,304643325,b'Can you elaborate? The proposed code should behave exactly the same as the old.'
16627,304644221,b'I missed the second line of change :('
16379,299171062,b'It feels awkward to pass these in. Why not just add a JOIN to the query below?'
16379,303084252,b'\xf0\x9f\xa4\xa6\xe2\x80\x8d\xe2\x99\x82 My bad.'
16379,303099048,b'Incorrect method reference'
16655,305014465,b'Convert_to_nullable_on_nullable_value_is_ignored.'
16631,304658748,b'conditional return statement?'
16631,304659140,b'IPrintable'
16631,304662120,b'Not sure what to print other than the contained `EntityProjectionExpression`...'
16631,304669323,b'Is base necessary here?'
16631,304670802,"b""Why do we have to call Load to iterate the collection? Shouldn't materialization of each entity in collection add it to statemanager to fix it up?"""
16631,304670871,b'Also you need to set IsLoaded flags for navigations'
16631,304671125,b'It should not come here. Server translation of IncludeExpression should be null'
16631,304672360,"b""Well that also helps, when debugging. If you don't add it boss will do eventually :trollface: """
16631,304675135,b'They will only be materialized if the collection materializer is enumerated.\r\n\r\nConceptually `navigationExpression` is `jArray.Select(o => Materialize(o))`'
16631,305019778,b'hasNullKeyVariable? just to be consistent.'
16631,305020324,b'Any significance of different ordering now?'
16631,305020710,b'How are we using entry variable'
16631,305020881,b'Should remove commented code'
16631,305021578,"b""Should this call base or return null?\r\nif we are not in client eval phase, then shouldn't the translation of any component (direct expression or anonymous/nominal type's components) should go through SqlTranslator?"""
16631,305021733,b'innerExpression? visitedExpression?\r\n'
16631,305030647,b'Consistency. The other blocks end with the instance.'
16631,305031028,b'To set `IsLoaded` later'
16631,305034541,"b""But we'll need it for non-cross-partition joins"""
16659,305186802,b'I thought we were not using this anymore.'
16661,305454497,b'This can be a single-line expression-bodied property with a conditional expression.'
16677,305568796,b'`AggregateInterceptors`? Is plural intended?'
16677,305568843,b'parameter name'
16677,305587673,b'Yes. You give it a list of interceptors and it aggregates them.'
16682,305635058,b'@ErikEJ Can you add a test for scaffolding a composite key?'
16685,306034036,b'a or an?'
16706,306444407,b'Docs'
16706,306445221,b'MethodInfo extension on expression extensions? '
16706,306445568,b'Filename'
16706,306446128,b'Will move.'
16706,306446216,b'Will fix.'
16706,306446825,b'Make anything not used outside of this class private. '
16706,306447572,b'Will do.'
16726,306975115,"b'This is incorrect. You can do\r\n```\r\nCase value\r\n   When 1 then ""1""\r\n   Else ""NULL""\r\nEnd\r\n```'"
16726,306980468,"b""Of course you're right, thanks."""
16716,307080112,b'cref DbCommand or DbCommandMethod?'
16716,307080786,"b'Given we are passing parameterObject itself, do we need to pass ParameterValues separately ?'"
16716,307234238,"b""Ideally we'd only do this if we have interceptors configured (GUID generation unfortunately isn't free, e.g. https://github.com/dotnet/coreclr/pull/1738#issuecomment-146983369) but this is likely negligible."""
16716,307237338,"b""Am curious - IIRC usually start/end activities and durations are calculated by EventSource/DiagnosticSource (have no idea to what extent we support activities in those etc).\r\n\r\nNote that StopWatch is an additional allocation for every command creation that won't actually be needed for the general case."""
16716,307313943,"b""Last I was aware of, activities don't work for interleaved events. (That is, when, for example, multiple commands are created before any of them finish.)\r\n\r\nI added a note to #16197 about perf."""
16716,307405940,"b""I'm no expert but I seem to remember that interleaved activities are possible, at least with EventSource - an ActivityID is used to correlate between start and stop (we'd use the GUID here). [See this post](https://blogs.msdn.microsoft.com/vancem/2015/09/14/exploring-eventsource-activity-correlation-and-causation-features/)."""
16735,307774535,b'Nice solution.'
16776,307899972,b'With method?'
16776,307900926,b'@roji Follow the same pattern as for all existing dependency objects and add validation test--see https://github.com/aspnet/EntityFrameworkCore/blob/master/test/EFCore.Tests/ModelSourceDependenciesTest.cs'
16776,307915594,"b""Added With method for Model and tests for both the core and relational dependencies (sorry, it's the first time I'm doing this).\r\n\r\nNote that I added these because the API consistency tests told me too. I think there are various other cases of services without dependency objects (e.g. QueryContext accepts QueryContextDependencies, but RelationalQueryContext accepts additional parameters directly). We may want to do an extra pass for this."""
16776,307921892,"b'@roji Dependency objects are needed primarily when ""outsiders"" need to call constructors, possible from a derived class. This is expected anytime we have a public service _implementation_ since, as you know from API review, we typically make these public when we expect people to inherit. So that\'s why there is a API consistency rule for those.\r\n\r\nThere are other places where we have added similar objects, but sometimes with a lighter-weight pattern (although maybe all our dependency objects could be read-only structs?). If there are places where you can see there will be problems evolving the API without dependency objects, then we should review those.'"
16776,307923716,"b""OK, thanks for the explanation.\r\n\r\nIt seems a bit odd for a core base class (e.g. QueryContext) to have dependencies but not for its subclass in relational - if no outsider is expected to extend, then we don't need the deps in core, and if they do, then we do need them on relational, no?\r\n\r\nApart from that I don't yet have a good-enough feel for which services are expected to be extended (again, QueryContext?). It's probably not a big deal in any case."""
16776,307923994,b'@roji Agreed that feels wrong. File an issue?'
16776,307958538,b'Opened #16788'
16796,307984378,b'This is another interface that is used directly in the providers and we should consider making public.'
16779,307976276,b'Empty string?'
16779,307976558,"b""Yes, that's the way to mark a property as not persisted until https://github.com/aspnet/EntityFrameworkCore/issues/14121 is implemented."""
16532,308169303,"b'@smitpatel @ajcvickers do we have a convention where local functions are camel-cased? From what I can see [in samples](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/local-functions), pascal case is used just like any other function.'"
16532,308282039,"b'I think they should be pascal case, but we agreed to decide after 3.0.'"
16808,308297199,b'Should we even have this template method? It seems to bring with it a lot of SQL Server-specific assumptions.'
16808,308359590,"b""I'm honestly not convinced. I already started a wider refactor (and then stopped), where we had separate methods for column, table (and possibly also index). Anyway, take a look at the whole thing and let's see where we go from there."""
16828,308439477,"b'In SQLite, [we Debug.Fail() but let it slide](https://github.com/aspnet/EntityFrameworkCore/blob/d300fc2670ae19ee383bc604ab69e9ef647dae38/src/EFCore.Sqlite.Core/Migrations/SqliteMigrationsSqlGenerator.cs#L190) in Release.'"
16828,308441237,"b'But at least here we now for sure that the SQL will come out totally mangled, no? So better to throw an informative exception?'"
16828,308442750,b'I mean... they *could* compose WITH RECOMPILE onto the last [EXEC](https://docs.microsoft.com/sql/t-sql/language-elements/execute-transact-sql) call \xf0\x9f\x98\x9c'
16828,308448906,"b""Wow, OK :) Not sure what it would mean to do that to sp_addextendedproperty... In any case it would only work on the last statement, and only if comments were provided...\r\n\r\nBasically I can't see the non-terminating scenario being much use when multiple statements are being generated - especially when the really significant one is the first..."""
16824,308450887,b'I have a slight preference for *geometry* dimension (builder APIs too)'
16824,308451340,b'(or possibly *geometric* if it grammars better)'
16828,308451966,"b""I'm totally fine throwing \xf0\x9f\x98\x84 (just pointing out an existing pattern used elsewhere)"""
16824,308483692,b'How slight?'
16824,308493685,b'Significant. Neither NTS nor SpaiaLite use the word spatial in their APIs'
16832,308790944,b'Can we drop `Factory` from the name?'
16832,308792289,b'Check other arguments for null as well'
16832,308792741,b'Extra line'
16832,308793615,"b""Don't store the dependencies twice"""
16832,308795044,"b""Don't store the dependencies twice"""
16832,308797284,b'If `QuerySqlGeneratorDependencies` is going to be shared between multiple services it should be called `SqlExpressionVisitorDependencies`'
16832,308801392,b'Query needs a full pass on nullability...but will fix here'
16832,308827055,"b""This does not seem right. CommandBuilder or SqlGeneratorHelper are not dependencies for SqlExpressionVisitor. SqlExpressionVisitor is not a service either. They are dependencies for QuerySqlGen. QuerySqlGen happens to implement SqlExpressionVisitor. It is same as all other visitors we have which implements ExpressionVisitor. (and we don't have ExpressionVisitorDependency).\r\nSqlExpressionVisitor will remain as base class of double dispatcher which does not require any services given it is abstract class right now. It should be treated as ExpressionVisitor."""
16832,308828745,"b""Several sub-classes have dependencies. Having this here allows us to add new dependencies, even on the base class, if we need them. I don't think it causes any issues--if no new services are ever used, then we'l never add anything to this."""
16832,308835209,b'Resolved by https://github.com/aspnet/EntityFrameworkCore/pull/16847'
16849,308852653,b'Are you sure this issue is resolved? Looks like it was reopened a while ago.'
16779,308865657,b'Could DRY if using MemberIdentity'
16779,308869213,b'return or continue? It is inside a foreach loop'
16779,308869713,b'Why this uses coalesce but reference navigation is not using?'
16779,308870506,b'Nice catch'
16849,308855679,b'Tests passed'
16851,308911666,"b""Let's also check what happens in RevEng with these column types now."""
16791,308847672,b'No switch expression'
16791,308848633,b'Return null if it is not MemberAssignment.'
16791,308993784,b'Short circuit to null before VisitMemberBinding'
16791,308994083,b'?'
16791,309147039,"b""That's for ReadOnlyCollection, used by the new VisitMemberBindings local function. The function definitely made more sense with the MemberMemberBinding support (since the functionality needed to be recursive) but unless this bothers you we can keep the structure for the day when we really add it."""
16791,309219586,"b""Doesn't bother me. The using seemed confusing so just inquiring if it was leftover from something which is unused using statement now."""
16779,309384466,"b""We need to add all entities to the collection in order even if they weren't updated"""
16813,308851344,b'Where are we checking type?\r\nWhat if 2 columns are same on clrType but one is using conversion to different type in store? Invalid SQL.'
16813,308959942,"b""The problem with checking different store types, is that in certain cases it may be fine to do a set operation over different stored types - when the database can implicitly convert between them. For example, the following works fine:\r\n\r\n```sql\r\nSELECT CAST(1 AS bigint) UNION SELECT CAST(2 AS smallint);\r\n```\r\n\r\nSince the database implicitly up-casts smallint to bigint. Since we have no idea which implicit conversions are supported, it seems more correct to let the user's query through and allow the database to error if it doesn't support it.\r\n\r\nWhat do you think?"""
16813,308960802,b'https://github.com/aspnet/EntityFrameworkCore/issues/15586'
16813,308965457,"b""Thanks, great to see this is already tracked.\r\n\r\nAre you OK with leaving it open here for now, until we have the compatibility chart implemented? Since we don't have it at the moment, I'd rather not block valid queries, especially as the consequence for invalid queries is simply a database error (so just a different kind of error)."""
16813,308972884,"b""I discussed with @ajcvickers - It is better to throw exception from our code telling what is wrong rather than invalid SQL. So we would make is restrictive and compare store types.\r\nOn other note, why the SQL is valid, is it possible to write such linq?\r\nThe member's type on both side would be same so at least one of them would have convert to the common type and which would bubble up as cast in SQL anyway which would give same store type."""
16813,308979986,"b""> It is better to throw exception from our code telling what is wrong rather than invalid SQL. So we would make is restrictive and compare store types.\r\n\r\nIt seems strange for me to block valid queries, just so that for the invalid cases a more informative exception can be raised - but I'll do the change and confirm that the type mappings match.\r\n\r\n>  On other note, why the SQL is valid, is it possible to write such linq?\r\n> The member's type on both side would be same so at least one of them would have convert to the common type and which would bubble up as cast in SQL anyway which would give same store type.\r\n\r\nI don't think I understand the question...\r\n\r\n```sql\r\nSELECT x.TextColumn FROM x UNION SELECT x.CaseInsensitiveTextColumn FROM x\r\n```\r\n\r\n(PostgreSQL really has a case-insensitive text *type* called citext, so the above isn't really contrived).\r\n\r\nIn LINQ both sides are just strings, but in the database they're different types which are implicitly convertible. This kind of query will no longer work after I add the check that the projection mappings have an identical store type."""
16813,308980169,"b""Just to be clear, I also agree we should be throwing more informative exceptions rather than generating invalid SQL. The point here is that we're also blocking valid queries which would otherwise work."""
16813,308990270,"b'There is easy work-around to add a cast in LINQ query to work-around which does not seem to bad either. Since otherwise given those 2 columns, how are you going to determine which type to read from server.'"
16813,308992389,"b""> There is easy work-around to add a cast in LINQ query to work-around which does not seem to bad either.\r\n\r\nThat's true.\r\n\r\n> Since otherwise given those 2 columns, how are you going to determine which type to read from server.\r\n\r\nDo you mean in the shaper? Because from a CLR type perspective we're just reading back strings right? I don't see where the problem is (but am probably missing something).\r\n\r\nIn any case I'll the type mapping checks."""
16813,308993028,"b'Client side is string sure, but shaper also reads values from DataReader. Is it going to read case sensitive string or case insensitive string. It may not matter when there is only clr type but with value converters it becomes altogether a different game. The chart not only tells us about what 2 types are compatible but also need to inform what would be the result type.'"
16813,308994026,"b'Good point... ultimately it is best to know exactly which store type is coming out of the set operation, and for that we will need the chart.'"
16813,309316378,b'Did I go overboard? :)'
16813,309320173,b'Assert Sqls'
16813,309332889,b'Done'
16813,309358522,b'cc: @ajcvickers @maumar in terms of dynamic testing. All fine from my side.'
16813,309359310,"b'I felt a bit weird doing it :) But hey, it added 72 tests so the project is much more robust now, right?'"
16813,309401800,"b""I'm fine with it. """
16813,309416159,b'Thanks :) Can someone please press the approve button? :)'
16813,309419139,"b""I haven't reviewed the rest of it, so that probably should be @smitpatel """
16813,309430643,b'comment'
16813,309431282,"b'Sorry, fixed.'"
16813,309436619,b'Asserting Sqls dynamically like this is nightmare to maintain test.\r\nSo we are down to 2 choice. Either split out each into different tests (sync/async can be together like other tests)\r\nor run loops to generate queries to execute one by one. Essentially removing leftType/rightType from parameter of the test.\r\n\r\nLike Convert_ToDecimal test'
16813,309454989,"b""Would have been better to receive this previously as I was asking for feedback.\r\n\r\nTo be sure I understand, you're saying it's more maintainable for us to have 72 manually-written SQL assertions? For comparison, Convert_ToDecimal has 8.\r\n\r\nIf you're not happy with the way the test looks, let me propose something. All of these test cases/assertions don't actually correspond to different code paths inside - the actual set operation logic doesn't care one bit if one side is a constant, a column, or a function call - as long as they return the same thing. In other words, coverage isn't actually increased. Maybe a single test per expression type (on both sides), plus one extra for different expression types could be sufficient."""
16813,309458340,"b'I think we should go with the tests as @roji has written them for now. We can file an issue to discuss as a team whether we in general like this pattern or not, and then follow up appropriately.'"
16785,307986354,b':trollface: '
16785,308240536,b'Move out to EnumerableMethodProvider (like QueryableMethodProvider)?'
16785,308244320,"b""Isn't this a duplicate of TransparentIdentifier?"""
16785,308246008,"b'Could be slightly cleaner to call this TransparentIdentifier, i.e. non-generic version of TransparentIdentifier<,>.'"
16785,308246853,b'Any specific reason not to move this to the very top?'
16785,308247475,"b""I think part of the idea here was to also check the parameter types, not just their lengths, in case another overload is introduced with the same number of parameters (maybe you haven't gotten around to it yet)."""
16785,308252920,"b""Question for my understanding (am probably missing something): can't this be a ParameterExpression that refers to a EntityQueryable? Also why shouldn't be rewrite enumerable to queryable for this case?"""
16785,308260138,b'_cardinalityReducingMethods?'
16785,308260841,"b""FYI for such small sets it's better to just have a List<T> and use Contains just like a set. You get locality of reference, no hash code calculation, possible inlining (no virtual call via interface...) etc. Not super important."""
16785,308264856,b'This is a double visitation right (after the ones in VisitMember/VisitMethod)?'
16785,308272241,b'Could be MethodCallExpression no (from EF.Property)?'
16785,308275429,"b""There's already a condition above checking for the version with predicate and adding a Where - this lookup could go there."""
16785,308276942,b'Can omit var'
16785,308285175,"b'A super short comment could help understand what this is about (something like ""rewrites `customers.FirstOrDefault().A.B` as `customers.Select(c => c.A.B).FirstOrDefault()`"").'"
16785,308899200,b'Will convert to ToString \xf0\x9f\x98\x9b '
16785,308899893,"b'No. We are not going to provide such class. Queryable yes, because we extensively deal with translating queryable methods. Any other method calls (enumerable or not), is upto individual visitor to resolve and identify).\r\n(InMemory will have enumerable operators resolution in a class because it uses that as server side computation).'"
16785,308899943,b'Duplicate of what?'
16785,308900465,b'That would be misleading. There is no TransparentIdentifier which is non-generic. I am fine changing name to something else. It is a type which will contain static method to create transparentIdentifier. May be Helpers suffix.'
16785,308900761,b'Simply not wanting to deal impact right now. Can move it up later.'
16785,308901172,b'I will keep this as it is right now and leave the issue open to resolve. This is not core of the change here so not wanting to spend a lot of time in other things.'
16785,308901340,b'How can you create a parameter which references to EntityQueryable in EF Core pipeline?'
16785,308902531,"b""Doesn't see much difference. Visitor supports these methods."""
16785,308902702,b'@AndriySvyryd - What is better? I am not picky on structure. Whatever is fast or recommended way.'
16785,308903078,b'Elaborate?'
16785,308904433,b'By design. I will make it bit more directed.\r\nthis code path converts\r\n-> `cs.Select(e => something).FirstOrDefault().A`\r\nto `cs.Select(e => something.A).FirstOrDefault()`\r\nif something is also FirstOrDefault then we have to revisit it to move A further inside.'
16785,308905254,"b""Use List if it's 20 or fewer objects https://stackoverflow.com/a/10762995"""
16785,309420798,b'add IPrintable (for others also)'
16785,309429866,"b""Filed https://github.com/aspnet/EntityFrameworkCore/issues/16877\r\nNeither a priority nor much useful. No one outside of the class is supposed to see them. It is not an expression which is being used across components or providers. I am not against it, I personally don't feel cost vs value justify it.\r\n\r\ncc: @ajcvickers """
16785,309437360,"b'for me, the IPrintable is mostly for our convenience when debugging, e.g. in bug reports/investigations we often paste ""query plan"" at various stages of completion, its nice when the custom nodes don\'t make the plan opaque'"
16785,309480664,b'Remove comment'
16785,309482979,b'?'
16785,309483150,b'Updating Sql assertions atm. Will uncomment this. '
16785,309490306,"b'Similar to VisitMember, DRY?'"
16785,309490646,"b'Yup, it was literally copy paste to make code pass on code path which deals with EF.Property.'"
16785,309492628,"b""I looked into making it DRY, but there are memberExpression.Update showing up. EF.Property throws for those case because it cannot be client eval'ed anyway."""
16785,309493830,b'Moved to top. And it worked too. \xf0\x9f\x98\x84 '
16785,309779551,b'Renamed to TransparentIdentifierFactory.'
16785,309780490,b'I think @maumar commented something about this but I cannot seem to find the comment. Something along the line that we need to compare other way around too. Do you remember?\r\nThis function seems correct to me as of now.'
16785,309832295,"b'yeah, my comment was wrong so i deleted it after I realized it ;)'"
16901,309950190,b'Probably ConversionCloneTest\r\n'
16901,309950291,b'ConversionCloneTest?'
16901,309974641,b'Why is everything a ConditionalFact these days?'
16901,309978550,b'https://github.com/aspnet/EntityFrameworkCore/pull/16014'
16907,309956841,b'cc: @ajcvickers for exception message.\r\nOr we want to go through them all once @divega is back.'
16907,310156263,"b'You mean...so exception message review? \xf0\x9f\x98\xb1 \xf0\x9f\x98\xb1 \xf0\x9f\x98\xb1 \xf0\x9f\x98\xb1 \xf0\x9f\x98\xb1 \xf0\x9f\x98\xb1 \xf0\x9f\x98\xb1 \r\n\r\nYes, we should.\r\n\r\nFor now, how about, ""The Include path \'{includePath}\' results in a cycle. Cycles are not allowed in no-tracking queries. Either use a tracking query or remove the cycle.""'"
16907,310160697,"b""General guidance on exception messages (from me; can't remember how much came from official sources):\r\n* State what the error is, including appropriate information to allow the location in code to be found\r\n  * Make sure no potentially sensitive data (i.e any entity values; model metadata is okay) is included by default\r\n* State what the developer can do about it\r\n* Use short, clear sentences\r\n  * These are easier to read for everyone, but especially for non-native English speakers\r\n  * They are also easier to translate, which is important even though we don't localize because people will use online tools to automatically translate them.\r\n* Don't build up English sentences from fragments. This is less important now that we don't localize, but if we were to localize this makes things difficult because it doesn't allow the sentence structure to be changed for a different language."""
16901,310210167,"b'Ah, so just in the SQL Server and Cosmos functionals. Got it.'"
16841,308839117,b'Either split out 2 variable assignment into multiple statements or do assignment and call visit separately. #Resolved'
16841,308839370,b'It is not task for navigation expansion. Comment is incorrect.'
16841,308874295,"b""See my comment below - it's an alternate translation of the same specific construct that does not care need to care about keys. But of course I can change the comment."""
16841,308889271,b'Nav expansion bit is misleading.'
16841,309630071,b'Modified the comment.'
16841,310285303,b'IsQueryParameter'
16841,310285900,b'We take slightly different pattern.\r\n```\r\n        private static readonly MethodInfo _containsMethodInfo = typeof(Enumerable).GetTypeInfo()\r\n            .GetDeclaredMethods(nameof(Enumerable.Contains))\r\n            .Single(mi => mi.GetParameters().Length == 2);\r\n```'
16841,310286281,b'Check ContainsTranslator to recognize the methods. It may exclude somethings but if we cannot translate we can defer not doing EE on it fully for now'
16841,310292032,b'It is not longer done by nav expansion.\r\nRather throw'
16841,310292278,b'Did not notice before but make sure that PK exists and we are not doing entityEquality rewrite on keyless entities'
16841,310293649,b'No enumerable select. We cannot translate it. If the source is not queryable then just throw'
16841,310294053,b'If this is not used outside of this class then make it private method'
16841,310294455,b'Is `param.Select(e => property.GetGetter().GetClrValue(e)).ToList()` possible?'
16841,310294572,b'cache GetGetter() result '
16841,310300097,"b'Makes sense, will check other places too. Will throw an informative exception.'"
16841,310302795,"b'Seemed like a good functionality to extract out, will revert.'"
16841,310303120,"b""It's good that code is DRY but we don't need to put it outside till anyone actually need it."""
16841,310303251,"b""~Unfortunately not (at least that I'm aware of), because `keyList` is a non-generic IList... I also hate this.~"""
16841,310303963,b'Do we not know the type of keyList?'
16841,310305871,"b""You're right, will do."""
16841,310315246,"b'In the end I left the constant implementation as-is, since it seemed like overkill to generate an extractor and invoke it. For parameter it is now generic.'"
16841,310325057,b'nit: break long lines. :trollface: '
16841,310325363,"b'For keyless entities, FindPrimaryKey will return null so .Properties would NRE.\r\nAlso add a test to verify exception.'"
16841,310325381,b'InvalidOperationExceptions'
16841,310325437,b'nit: could cache getter here easily'
16841,310325550,b'nit:parameterKeyExtractMethod'
16841,310325713,b'Should RegisterRuntimeParameter return parameterExpression?\r\nIt knows the type of parameter and name of parameter to create it. And anyone registering a parameter needs to construct it'
16841,310325747,b'Wrap it in Expression.Quote'
16841,310325866,b'If possible specify the type of null constant.'
16841,310325924,b'All these checks need to check for FindPrimaryKey == null'
16841,310326300,b'How long are long lines :)\r\n\r\nWill do.'
16841,310328786,b'Changed here and everywhere else.'
16841,310329979,"b""It's a nice idea, but RegisterRuntimeParameter doesn't really know the type - the lambda it receives currently returns object. I could change the lambda to return the actual type but that creates some complications of its own (and values get boxed anyway so generics doesn't help). I'll pass in the type to RegisterRuntimeParameter, but let me know if I've missed something easier."""
16841,310330924,"b""Actually I'll go ahead and do this."""
16841,310331401,b'Did elsewhere as well.'
16841,310331506,"b""Just took the entity type's clrType, right?"""
16841,310334096,b'120 characters.\r\nGenerally for conditions we put them on new line when applying && or ||.\r\n@AndriySvyryd changes them when doing code cleanup.'
16957,310688839,"b'Generic on TProperty, you can pass nullable TProperty here rather than having 2 functions.'"
16957,310694898,"b'Of course, silly me.'"
16959,310693764,b'RTM goodness \xf0\x9f\x98\x83 '
16974,311150224,b'A better fix would be to make sure that when we translate to aggregate we are taking care of propagating nullability. So the projection would itself be nullable here and read null value from server side.\r\nThen passing in throwOnNullResult flag can be made conditional on nullability rather than always true.\r\n'
16974,311176421,b'Suggest you file a bug for that fix then.'
16974,311180239,b'#16988'
16995,311295658,"b""I couldn't figure out better way to do this for now. \r\nThe issue is, projectionBinding may revisit expression multiple times but ShapedQueryExpression is mutating so we have mutated on failed translation and we cannot reuse it. Hence we need to expand weak entities (introducing ShapedQueryExpression) from projection binding expression visitor."""
16995,311295786,b'\xf0\x9f\x98\xb0 '
16997,311329201,"b""The defining entity isn't always the owner. We shouldn't prevent weak entities to be tracked."""
16997,311329668,b'I guess it been a while we all had discussion about weak vs owned. \r\nFiled #16999 to discuss when you are back at work.'
16992,311362728,b'```suggestion\r\n        /// Configures the context to use the provided connection mode.\r\n```'
16992,311385289,b'I fixed the typo.'
17012,311641893,b'nit: when is put on new line.'
17012,311642749,b'nit: `when` is not indented. Probably need to change the settings in your IDE.'
17012,311644368,b'Prefer to append this with MethodInfo -> `IsSumMethodInfo`\r\n'
17012,311644512,b'No long lines.'
17012,311644716,b'Inline temporary variable.'
17012,311645780,b'GetLambdaExpressionFromArgument.'
17012,311645868,b'Move local function closure to the usage.'
17012,311906723,"b""I actually think it's more readable for it to be indented (easier to discern the cases when they're not mixed in with whens). But have done the changes."""
17012,311907499,"b""Have done the change.\r\n\r\nBut have also added a commit which removes the MethodInfo suffix from all properties/methods, as this type is only there to expose MethodInfos (and has Method in its name). IMHO it makes calling code considerably lighter, but if you don't like it I'll remove the commit."""
17012,311912740,"b""Re GetLambdaExpressionFromArgument, the whole point is to have a short, locally-scoped method name, to make the code terser/more readable - GetLambdaExpressionFromArgument isn't far from the length of the code it would abbreviate :)"""
17012,311934523,"b""`method` is needed here because it is passed to IsSum/IsAverage below (overloads without a selector aren't generic)."""
17012,312107218,b'Keep MethodInfo suffix and defer the naming to API review.'
17012,312108241,b'`LambdaArg` is not clearer name in terms of what function does. It may make code shorter but not more readable in terms of understanding. Function name should be something which clearly indicative of what function does. I gave just a suggestion. You can use something else too. But current one is certainly not good.'
17012,312109391,b'Replace all references to `methodCallExpression.Method` with variable. :trollface: '
17012,312109839,b'`argumentIndex`.'
17012,312120916,b'Removed.'
17012,312122219,b'Changed to GetLambdaExpressionFromArgument.'
17012,312132628,"b""I don't have preference over indent or not. VS does not allow it to be set as indented. Format document would move it back when done in VS. In past this has caused commits with a lot of whitespace changes because IDEs would keep indenting/un-indenting. Hence we made decision that, we will align all IDEs in formatting. And if something cannot be set in VS then, we will just follow VS's setting everywhere else."""
17012,312144598,"b""I'm sure this can be configured in VS/editorconfig, but it's not very important in any case."""
17012,312148607,"b'If you can find that setting then sure, bring it to team on which style is preferred. '"
17012,312152181,b'Formatting: The logical operator is put on new line'
17012,312156467,"b'Will submit an additional cleanup PR, no problem.'"
17012,312158456,b'#17035'
17012,312160651,"b'Thanks. In future, you can just put cleanup with other work. Or anyone else going into that area can do cleanup too.'"
17034,312149427,b'@maumar - Verify this test please. The client side query seemed to be different from server side hence I changed.'
17034,312172364,"b'this looks like a behavior change from what we do previously, look at the sql that we used to generate '"
17034,312176980,b'I will investigate'
17058,312559082,b'nit: Contains does not have translation in cosmos. It is less of not implemented and more of client eval.'
17058,312561350,"b'Yeah, I was just following the way previous Contains tests were skipped. Am going to merge as-is, and can submit a PR to return Task.Complete instead of skipping.\r\n\r\n/cc @AndriySvyryd '"
17058,312562703,"b""It's alright. We want skip only rather than Task.Completed. It's just skip message was somewhat misleading. But test code so no big deal.\r\n"""
16981,311176313,b'We should probably generate `SCHEMA_NAME()` in the SQL instead of relying on hard-coding `dbo`.'
16981,311513678,"b""Apparently can't pass function calls to SQL Server stored procedures, need to define a variable instead?\r\n\r\n:confounded: \r\n\r\nDeclared a variable, which forces us to think about variable scope etc. - take a look at the second commit.\r\n\r\nOn the way found another bug where we weren't generating column comments in migration C# code for CreateTable..."""
16981,312601983,b'Remove'
16981,312602070,b'(below too)'
16981,312603021,"b""I read once that .NET was optimized for upper-case comparisons (that's why it was ugly before). Totally fine with changing it."""
16981,312603424,b'Old comment is accurate again'
16981,312604016,"b""Do we need a variable at all? Can't we just inline `SCHEMA_NAME()`?"""
16981,312608631,"b""Oh that wasn't really intentional - although yeah it's a bit less ugly :) Leaving as-is then."""
16981,312608844,"b'Ouch, very unprofessional.'"
16981,312610253,"b""You mean inline `SCHEMA_NAME()` into the stored procedure EXEC call? Apparently that simply isn't supported, only literals and variables (e.g. https://www.sqlservercentral.com/forums/topic/using-functions-as-parameters-in-stored-procedure-calls).\r\n\r\nI definitely don't like that extra T-SQL variable, e.g. it forces us to distinguish first GenerateComment call (which declares and sets it) and the others (which don't, since it's *also* not possible to re-declare or un-declare a variable).\r\n\r\nWill hold off on merging this in case you have some better SQL Server trick or something - otherwise let me know and I'll merge."""
16981,312656645,"b'(Doh, just saw your comment above about this too)'"
16981,312656799,"b""I don't have any better ideas"""
17021,311821958,"b""there's duplication here - ideally I will switch to @roji infra but I think it requires some public surface change - will take a look at refactoring it w/o much disruption"""
17021,311853778,b'How is this different from parametersInScope?'
17021,311854202,b'This is disconnect. If the inner key is created without using innerParameter then innerParameter should not be present at all. If you are going to use innerParameter to construct lambda then the innerKey should be in the terms of innerParameter.'
17021,311854373,b'No `.` syntax unless for member expression. They are harder to read. Create simple mappings like dictionary instead.'
17021,311854502,b'Just print by visiting GetExpression.'
17021,311854600,b'What about nested includes?\r\nOptional?'
17021,311854654,"b""Don't use `()` structure unless a methodcall."""
17021,311854733,b'This should never appear in a tree. Remove IPrintable.'
17021,311854875,b'Remove AppliedQueryFilters. The check for cycle should be model validation time.'
17021,311855116,b'Inline temp variable'
17021,311855294,"b""Don't initialize this for every entityQueryable. Initialize only once in ctor.\r\nCache parameterized filter based on entity type."""
17021,311855403,b'Invalid method. Remove'
17021,311855567,b'Remove this. Use the framework created for adding runtime parameters.\r\nCreate ParameterValues in the scope of navigation expansion and add parameters once it is done visiting.'
17021,311855667,b'Remove'
17021,311855744,b'Move it to QueryOptimizerDependencies'
17021,311855863,b'Why? Where is the tracking issue?\r\n'
17021,311856001,b'Do not remove tracking issue comments. If you are closing issue with this PR then file a new issue to track disabled tests.\r\n'
17021,311856198,b'Why NRE is added here?\r\n'
17021,311967686,"b'Yes, IIRC this required a refactoring of ParameterExtractingEV which I originally intended to do - right now now it returns parameter extraction lambdas within IParameterValues, which QCC holds. But we can do this as a cleanup (not sure this involves public surface).'"
17021,312137609,b'Unrelated.\r\n@maumar is talking about duplication in terms of adding query filter parameters and runtime parameters infra added for EE. It has nothing to do with ParameterExtractingEV.'
17021,312144103,"b'I think maybe it does. The reason QCC.ParameterValues exists is because ParameterExtractingEV currently requires an IParameterValues where it populates parameter extraction delegates. Otherwise it would be possible to just use the new RegisterRuntimeParameter infra, like EE. This is the point I was trying to make in https://github.com/aspnet/EntityFrameworkCore/pull/16469#issue-294994644 (last bullet).\r\n\r\n'"
17021,312147957,"b""Both of them are orthogonal. Nav expansion can just use 1 single ParameterValues and whatever is inside after expanding navigations can be added using RegisterRuntimeParameter.\r\nThe amount of work to avoid that 1 parameter values and iteration to register parameters requires,\r\n- A new parameter extracting EV which works directly to register runtime parameter\r\n- Also the new EV is not just about generating lambdas, it also needs to convert to constants for the things which can never change.\r\n- Hence both parameter extracting EV needs to have access to evaluatableExpressionFindingEV.\r\n- Both of them would do almost same thing except when it comes to adding a parameter.\r\n- It's not a DRY code and requires us to create more public surface than what we need and functionally avoid just one minor step (which is also compile time)\r\n\r\nSo, my conclusion is the same it is not worth unless you find functional limitation in current implementation.\r\n\r\nAs, for this code goes, I wrote how Query filters are supposed to use RegisterRuntimeParameter infra in the first line. DRY-ing up that code has nothing to do with ParameterExtractingEV.\r\n"""
17021,312155685,"b""I have no idea exactly what a refactor would look like since I haven't attempted it yet - it doesn't necessarily mean two visitors, but could mean one that is factored a bit better. The current design, where the GetValue() method returns values or lambdas which extract values, based on the the `_generateContextAccessors` flag, via an untyped object, feels problematic from a design standpoint.\r\n\r\nRe public surface, at least ParameterExtractingEV is internal so we can do work there - but I may be missing other problematic places.\r\n\r\n> As, for this code goes, I wrote how Query filters are supposed to use RegisterRuntimeParameter infra in the first line. DRY-ing up that code has nothing to do with ParameterExtractingEV.\r\n\r\nGreat, I'll be happy to see what that looks like. """
17021,312156108,"b""> Nav expansion can just use 1 single ParameterValues and whatever is inside after expanding navigations can be added using RegisterRuntimeParameter.\r\n\r\nYeah, that's certainly possible - but it also feels like working around a problematic design."""
17021,312177485,"b'this is like ""make object ID"" for every parameter, whether it\'s in scope or not. E.g. allows you to see if the parameter in pending selector is the same as the parameter in nav expansion expression, etc'"
17021,312183398,"b'`GetValue` is return type is object. It could be any object including a LambdaExpression. \r\nGetValue returns object because our parameter values are stored in dictionary of string to object. (Runtime parameters can any type). It was object long before query filters came into picture. If we can use the existing code then why not use it?\r\nIf you believe that it should return LambdaExpression rather than object because it is problematic from a design standpoint then our code base many more examples of such pattern.\r\nShapedQueryExpression.QueryExpression is just an expression and every provider have different expression to represent it. And in each provider we cast it to appropriate expression. \r\nIAnnotation stores object value for given annotation name.\r\nYou could make everything typed if you want but untyped is not necessarily problematic from a design standpoint. If that is design issue then we probably need to fix a lot more in the codebase.\r\n\r\nWe know that when we pass in flag to generateContextAccessors, all the parameter values would be LambdaExpression, we cast to it and register them.'"
17021,312189192,"b""There's a very big difference between annotations that support arbitrary value types (hence we use object), and something that can sometimes contain a value, and sometimes a lambda to extract a value. Unlike with annotation values, these are two completely different modes - determined by a flag - and the results are used in completely different ways in different code paths. I understand the history - we already had ParameterExtractingEV, and when query filters came along we forced the lambdas into there because it happened to already be an object.\r\n\r\nI'm not saying it's super important or that we need to fix this now. I'm just saying that IMO it's a non-ideal design that I hope we clean up at some point. I haven't seen this kind of thing elsewhere in the codebase."""
17021,312192435,"b'ShapedQueryExpression.QueryExpression\r\nEntityProjectionExpression.AccessExpression in cosmos.\r\nWe have parameters of type Expression even though they could take only 2 or 3 different types rather than having them ""exact"" typed. Just because there are different values in object where you can extract out one type, it does not make it non-ideal. For annotations IDbFunction or ISequence can be made special case too the same way.\r\n'"
17021,312193062,b'Make it debug specific then. This is public visitor which will be used to print out exception messages. We cannot put such information there. It could confuse users.'
17021,312212936,"b""@roji, yup - ParameterExtractingExpressionVisitor using parametervalues is exactly the reason why I didn't re-use EE infra here. Will try the approach @smitpatel is suggesting and see if that works"""
17021,312225025,"b""Again, the point isn't non-specific types - it's shoving different things, handled by different code paths in completely different ways, into object. Specific types of Expression are still expressions, but the same can't be said about values and value-extracting lambdas. We may as well just start using object everywhere.\r\n\r\nRe other cases (QueryExpression) I'm not familiar enough with the design so I don't really have anything to say.\r\n\r\nIn any case, I completely agree that the thing to do now is as you suggest, have a temporary IParameterValues for ParameterExtractinEV and then read from that into RegisterRuntimeParameter. Down the road, when we have some time, I'd like to revisit the question."""
17021,312230428,b'TODO'
17021,312290999,b'#17047'
17021,312291050,b'#17047'
17021,312291095,b'will do'
17021,312291955,b'@ajcvickers '
17021,312292032,b'@roji does this look right to you?'
17021,312292147,b'@smitpatel EntityReferenceExpression?'
17021,312298122,b'avoid populating _encounteredParameters when this flag is false.'
17021,312298264,b'May be introduce variable for innerSource.Type.TryGetSequenceType().\r\nOptional...\r\n'
17021,312298359,"b""nameof is fine. It's purely debugging."""
17021,312298421,b'Also print IsOptional value.'
17021,312298506,"b""Don't pick it up from QCC. Introduce the service on QueryOptimizer"""
17021,312298580,b'Cache property access.'
17021,312298644,b'Only cast to object if value type'
17021,312298902,b'sequenceType'
17021,312299030,b'We can remove IParameterValues.Replace & Remove methods.'
17021,312299134,"b""Move check for IgnoreQueryFilter outside. If they are ignored we don't need to find queryFilterAnnotation."""
17021,312299178,b'Move these dependency to query optimizer.'
17021,312299250,b'Remove this property. No public static. Whichever class needs it can resolve it.'
17021,312380420,b'Yep! Looks much better without all the added stuff in QCC now...'
17021,312383015,b'Maybe we should consider just removing rather than obsoleting for 3.0...'
17021,312587405,b'I think the idea behind keeping it was to maintain compatibility with providers (mostly postgres) - if you are not using this then we can prolly axe it. What about obsoleted Print method?'
17021,312598653,"b'Yeah, am definitely not using anything obsolete in EF Core - we can probably just kill this. For any other providers porting to 3.0 (Pomelo?) this is probably the least of their worries :trollface: '"
17021,312637546,"b'NRE was wrapped around IOE before, i guess?'"
17021,312639539,"b'@ajcvickers given what @roji said, is it ok to remove this from your perspective?'"
17021,312642933,"b""Yes. If we're confident that Npgsql provider won't need changing, then we can remove it."""
17021,312657524,"b""Just print index of. You don't want to add it here. You only add unique object id when starting a new LambdaExpression"""
17021,312657963,b'Just access IsTracking/Model from QCC now that it contains QCC'
17021,312658619,b'cast is redundant '
17021,312658662,b'Can inline temp var\r\n\r\n---\r\nIn reply to: [312658619](https://github.com/aspnet/EntityFrameworkCore/pull/17021#discussion_r312658619) [](ancestors = 312658619)'
17021,312660527,b'Also print pending orderings'
17021,312661168,b'can be done in separate checkin'
17021,312661562,b'Just replace 16293 with 15081'
17021,312661722,"b""Why don't we generate like anymore?"""
17021,312662174,"b""like is still here, just condition is more complicated because currently we don't know if the parameter is nullable or not - always assume it is"""
17080,312714587,"b""This could break npgsql's preview7. cc: @roji """
17080,312714661,b'There is no RelationalQueryOptimizer. Should we add that class and dependency just for future-proofing?\r\n'
17080,312716014,"b""Updated so that this won't break Npgsql until it updates. (Based on usage in https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL/blob/dev/src/EFCore.PG/Query/Internal/NpgsqlEvaluatableExpressionFilter.cs)"""
17080,312716033,b'There is a `RelationalShapedQueryOptimizer`. Not sure what you mean by `RelationalQueryOptimizer`. How does that fit in?'
17080,312716573,b'Query Optimizer works pre translation\r\nShaped query optimizer works post translation. \r\nLook for shaped query optimizer '
17080,312717603,"b""Don't worry too much about breaking Npgsql, I can take care of those changes when I update. It's no big deal."""
17089,313016260,b'Tracking query will fix up reference navigation. So some duplicated work.\r\n'
17089,313017068,b'This would mean that we would send a ShapedQueryExpression to server. Of course during the compilation it would be converted to QueryingEnumerable. But in a way it would be equivalent to multiple server queries'
17089,313020667,b'Will take a look.'
17089,313034259,"b""Also when it's non-tracking the inverse navigation needs to be set as loaded."""
17089,313037931,"b""Also null-out `_threadId` as there is a race condition when a new thread enters critical section, then the old thread enters the critical section and the `_threadId` hasn't been updated yet so no exception would be thrown."""
17089,313042614,"b""This will not work for async invocations, perhaps it's better to use an `AsyncLocal`, see https://github.com/aspnet/EntityFrameworkCore/pull/8865/files#diff-8a7f164175e123a23041c293ffc492a6"""
17089,313068361,b'Good catch.'
17089,313070133,"b""It won't throw if the same thread happens to be used for both calls, or if we call back into this after switching threads. The first I think is okay for now--remember this is just intended to be helpful; it doesn't have to catch every case. The second might be a real issue, but I can't think how to get there using code that is correct in all other respects."""
17089,313140270,b'Fixed'
17089,313142389,b'Filed https://github.com/aspnet/EntityFrameworkCore/issues/17106'
17077,313118463,b'why extra join here?'
17077,313121556,b'we should optimize this at some point (later)'
17077,313136720,b'Orders was owned collection and it was ignored earlier.'
17077,313136919,b'You mean #15808 :trollface: '
17077,313145467,b'logic repeated 3 times - dry'
17077,313146025,b'There is no good way to do it. Update function does not exist on abstract class.'
17125,313385439,b'@smitpatel can you make sure this SQL makes sense? It became much bigger from the previous one.'
17125,313422104,b'Need to investigate why null semantics got applied on a left join predicate.\r\ncc: @maumar '
17125,313422803,"b'The way cross join happened changed so SQL is fine from that POV. One slight issue, I commented. @maumar  can look into it or you can investigate if you want.'"
17125,313423073,b'Possibly DRY. Seeing this repeated few times in this class.'
17125,313424242,"b'Agreed, in general the EE visitor has evolved and could be cleaned up at some point...'"
17125,313424564,b'Will let @maumar take a look :)'
17130,313520347,b'Breaking change. Use API on expression printer directly'
17130,313520574,b'Remove Increment/Decrement Indent. Using Indent and disposable pattern.'
17130,313524554,b'All visitors in optimizers are supposed to be internal and exposed via protected methods. This particular visitor moved to .Internal but being used by SqlServer so I have added method to facilitate this for now. We can go over and add methods to call other visitors too in future.'
17130,313524912,b'Factory should not be exposing anything from Dependency object.'
17130,313525435,b'These APIs were used in old pipeline. Not anymore. It should not affect any provider.'
17130,313525662,b'This was to support include in old pipeline. No longer needed.'
16909,310252806,"b'Here we should try using the store type name first, but then fall back to the CLR type anyway if that fails, since in some cases on some providers we may not be able to interpret the store type name.\r\n'"
17125,313570288,"b""filed a tracking item - #17132 - will take a look once I'm done with defining query (hopefully very soon)"""
17101,313084831,b'cc @ErikEJ'
17101,313085303,b'LGTM \xf0\x9f\x98\x8e'
17101,313101800,b'Add the extra line to Heading?'
17101,313124983,b'Needed it to not be there for one test \xe2\x98\xb9\xef\xb8\x8f'
17101,313125710,b'You could add a bool parameter to `GetHeading()`'
17101,313576183,"b'@maumar FYI, I had to switch some tests to this pattern and skip them until #16323 is implemented.'"
17101,313576742,"b""(We now include keyless entity types when validating that two unrelated entity types don't map to the same table.)"""
16956,310679211,"b'It may make sense to put this under ""Migrations"". @ajcvickers Thoughts?'"
16956,310679482,b'ActiveProvider may be null. Best to use the static string.Equals()'
16956,310682231,"b'`Microsoft.EntityFrameworkCore.Migrations` will generally already have a `using` (like here) whenever somebody has a `MigrationBuilder`, right? If so, then yes.'"
16956,310904496,b'Done :)'
16956,310904559,b'Done :)'
17125,313598083,"b'the null semantics happens because its composite key - for non-composite keys we perform relational null semantics for joins, but for composite keys we perform c# null semantics to match the actual linq join behavior'"
17136,313640923,"b""what doesn't represent an ownership?"""
17142,313702275,b'Would https://github.com/aspnet/EntityFrameworkCore/issues/16919 be more appropriate?'
17142,313778423,b'`string.StartsWith` fails to translate in where predicate.'
17142,313979223,b'So https://github.com/aspnet/EntityFrameworkCore/issues/16143 then'
17142,313979712,b'I will update in next PR.\r\nSeems like you are remembering issue numbers for cosmos more than me now :trollface: '
17072,314128147,b'Empty?'
17153,314139799,"b""Didn't we decide to expose method to get method info for particular type rather than whole dictionary?"""
17153,314140023,b'Yes--I missed this in my review. @roji?'
17153,314143140,"b'Oh, sorry, I thought we said changing to read-only is enough - there could conceivable be some value in allowing users to iterate over the keys/values. But I can of course change this if you guys prefer a get method (GetSumWithoutSelector?)'"
17153,314145818,"b""I don't feel strongly about it."""
17153,314147271,b'Convert to method which takes type. Current usages does not require iterating over values. We could add dictionary later if situation requires it. '
17153,314151880,b'#17168'
17168,314152697,"b""Formatting: Don't have empty spaces. Default coding conventions don't align `=>` but leaves single space around operator."""
17168,314153996,b'Reverted all whitespace prettification'
17166,314394482,"b""Shouldn't this be extension method over INavigation?"""
17166,314396762,b'SetIsLoaded querycontext is bit ambiguous. For entry it makes sense. It should be renamed to something more appropriate. May be SetNavigationIsLoaded.'
16960,310742090,"b""Should be 'FindProperty' to handle inherited properties"""
16960,310767850,b'I recently added this too. Should be there if you sync changes from release/3.0'
16960,310791654,"b""Sorry about that. I synced release/3.0 in my fork.\r\n\r\nShould I rebase/merge or leave it as is? I would rebase + force push, but I don't think GitHub likes that :)"""
16960,310819583,b'I too rebase and force-push; GitHub handles it just fine... \xf0\x9f\x98\x8e'
16960,310992179,b'Rebased on most recent version from release/3.0.'
17191,314581916,b'Also translatethenby'
17200,314846447,b'We had previously decided not to break this...'
17200,314847566,b'Obsolete?'
17200,314847782,"b'Sure, I could go for that.'"
17206,314907045,b'Why not call FinalizeModel on the snapshot and rename this to `IsReadOnly`?'
17206,314907965,"b'Because what does it mean to finalize the model when there are no conventions? It\'s still not ""ready to use"" with things like type mappings available. I tried some time back to add just the conventions that would make this work, but that got really messy.\r\n\r\nHence #17205'"
17206,314908185,"b""I could try doing this if you think it's cleaner--but it still needs revisiting either way, and it's internal API."""
17206,314915265,"b""Finalize means that it won't be modified anymore. I think it will align better with what we have planned"""
17206,314915724,"b'Okay, will do.'"
17206,314925626,b'@AndriySvyryd Updated.'
17206,314926947,b'Why this changed? Is `FinalizeModel` getting called twice on the same model?'
17206,314927005,b'```suggestion\r\n            return model.FinalizeModel();\r\n```'
17206,314928790,b'```suggestion\r\n            return finalModel?.MakeReadonly() ?? this;\r\n```'
17206,314948855,"b'Removed the other place that the model is sometimes finalized. However, see #17205 since this is wrong too.'"
17206,314955295,b'We should replace all Asserts with this'
17206,314955819,b'Filed #17204 yesterday.'
17250,315303097,b'could put constraint that T is nullable type if possible.'
17250,315312882,"b""I'd love to do it, but AFAIK there's no constraint which captures both reference types and Nullable<T>... There's a `notnull` constraint which does the opposite..."""
17247,315177185,"b'Not super valuable, but we could have a TranslationFailedException extending InvalidOperationException, which would do this repetitive stuff inside.'"
17247,315178437,"b'Maybe introduce newlines between different expressions, and possibly even parameter labels (e.g. `Outer key selector: ...`).'"
17247,315180388,b'We could introduce an extension on SqlExpression that checks and throws to make this terser'
17247,315180790,"b""Is this intentional? instance as a ref type and ref nullability isn't enabled..."""
17247,315184181,b'Intentional? Also elsewhere below in file'
17247,315185092,b'Intentional?'
17247,315186127,"b""Shouldn't we be able to translate this? Also below in file."""
17247,315187302,"b""Shouldn't we be able to translate this?"""
17247,315188805,"b""Could be translatable in PostgreSQL, but OK to leave as-is (I'd override as it's non-standard)."""
17247,315189226,"b""xunit's Assert.Equal has an overload for ignoring newlines: https://github.com/aspnet/EntityFrameworkCore/blob/765778c7c8b8f9d8ebcafd2424f89eaa931a6538/test/EFCore.Relational.Specification.Tests/MigrationSqlGeneratorTestBase.cs#L776"""
17247,315189975,b'Should be translatable?'
17247,315191515,b'Could be translated? Also other random-exercising tests below'
17247,315192777,b'Should be translatable (in the future)?'
17247,315193301,"b'Just to confirm, did we kill this functionality or something?'"
17247,315194361,"b'As above, use xunit overload instead'"
17247,315194730,b'Why not compare to the exact CoreStrings text as elsewhere?'
17247,315293052,b'Could remove this block. Translation pipeline does remapping. It is not required otherwise.'
17247,315293811,b'Is it useful to throw translation failed everywhere? This is more like Select/SelectMany came with different number of arguments (new overload) which is not handled in EF Core. It does not necessarily mean that user query is non-translatable.'
17247,315294285,"b'While this is non-translatable, this is also in projection, actions necessary may be different\r\n\r\n\r\n---\r\nIn reply to: [315177185](https://github.com/aspnet/EntityFrameworkCore/pull/17247#discussion_r315177185) [](ancestors = 315177185)'"
17247,315295817,"b'An interesting alternative would be, base class rather than returning this result directly, can store it in variable. and throw if it is null. And derived class would return null back. The base class has actual methodCallExpression, as it appeared in expression tree.\r\n\r\n---\r\nIn reply to: [315178437](https://github.com/aspnet/EntityFrameworkCore/pull/17247#discussion_r315178437) [](ancestors = 315178437)'"
17247,315296591,b'Instance can be null for static members.\r\n\r\n---\r\nIn reply to: [315180790](https://github.com/aspnet/EntityFrameworkCore/pull/17247#discussion_r315180790) [](ancestors = 315180790)'
17247,315298867,b'#16400 '
17247,315342834,b'Different'
17247,315342892,b'Different\r\n\r\n\r\n---\r\nIn reply to: [315293811](https://github.com/aspnet/EntityFrameworkCore/pull/17247#discussion_r315293811) [](ancestors = 315293811)'
17247,315343054,b'Remove this block and only process if correlatedCollectionSelector is false.\r\n\r\n---\r\nIn reply to: [315293052](https://github.com/aspnet/EntityFrameworkCore/pull/17247#discussion_r315293052) [](ancestors = 315293052)'
17247,315343130,b'different'
17247,315343150,b'different'
17247,315343179,b'different'
17247,315343254,"b'different\r\n\r\n---\r\nIn reply to: [315294285](https://github.com/aspnet/EntityFrameworkCore/pull/17247#discussion_r315294285) [](ancestors = 315294285,315177185)'"
17247,315344068,b'Invalid OperatorType encountered in SqlUnaryExpression. `SqlUnaryExpression`'
17247,315344396,b'InExpression with subquery generated without corresponding typeMapping for item.'
17247,315363534,b'@roji In general the impact on the public surface (having a new exception type) outweighs the small benefit of some de-duped code. Creating new exception types has almost always caused us pain. '
17247,315364399,b'@roji This is covered by #17236\r\n\r\n@smitpatel Will give that a try.'
17247,315364597,"b""@roji Please file an issue if you think it's worth it."""
17247,315364889,"b""@roji I'm not following..."""
17247,315365876,"b""Yes. It's not a .cs file. I don't think it's supposed to be dropped in the root of the project, but that was happening to me, and then my IDE was trying to parse it as a .cs file.\r\n\r\nBut..it was super-nice for updating baselines. \xf0\x9f\x91\x8f """
17247,315366240,b'@roji So then this is a bug. Do we have an issue tracking it? /cc @smitpatel '
17247,315366416,"b""@roji Likewise, we should have an issue tracking it if we think we should be able to translate it but can't."""
17247,315368172,b'@roji Feel free to send a PR to change the base if you find that this does work in Npgsql.'
17247,315368557,"b""I'll try it again--it didn't work for the cases I tried it for in the past, but that might also have involved whitespace differences, which it doesn't handle."""
17247,315368703,b'Then file an issue...'
17247,315368765,b'Likewise'
17247,315368846,b'Likewise'
17198,314793869,"b'Should we put a space between columns? What if they don\'t have a comment?\r\n\r\nOption A: (your implementation)\r\n``` sql\r\nCREATE TABLE ""People"" (\r\n    -- The ID\r\n    ""Id"" INTEGER NOT NULL,\r\n    ""UndocumentedColumn1"" TEXT,\r\n    ""UndocumentedColumn2"" TEXT,\r\n    -- The name\r\n    ""Name"" TEXT\r\n)\r\n```\r\n\r\nOption B: (always spaced)\r\n``` sql\r\nCREATE TABLE ""People"" (\r\n    -- The ID\r\n    ""Id"" INTEGER NOT NULL,\r\n\r\n    ""UndocumentedColumn1"" TEXT,\r\n\r\n    ""UndocumentedColumn2"" TEXT,\r\n\r\n    -- The name\r\n    ""Name"" TEXT\r\n)\r\n```\r\nOption C: (space before documented)\r\n``` sql\r\nCREATE TABLE ""People"" (\r\n    -- The ID\r\n    ""Id"" INTEGER NOT NULL,\r\n    ""UndocumentedColumn1"" TEXT,\r\n    ""UndocumentedColumn2"" TEXT,\r\n\r\n    -- The name\r\n    ""Name"" TEXT\r\n)\r\n```\r\nOption D: (space around documented)\r\n``` sql\r\nCREATE TABLE ""People"" (\r\n    -- The ID\r\n    ""Id"" INTEGER NOT NULL,\r\n\r\n    ""UndocumentedColumn1"" TEXT,\r\n    ""UndocumentedColumn2"" TEXT,\r\n\r\n    -- The name\r\n    ""Name"" TEXT\r\n)\r\n```'"
17198,314794913,"b'With B, we could also omit the spaces when there are no comments.'"
17198,314795222,"b""By hand, I'd probably write B or D."""
17198,314796364,"b'Or\r\n```SQL\r\nCREATE TABLE ""People"" (\r\n    ""Id"" INTEGER NOT NULL, -- The ID\r\n    ""UndocumentedColumn1"" TEXT,\r\n    ""UndocumentedColumn2"" TEXT,\r\n    ""Name"" TEXT -- The name\r\n)\r\n```'"
17198,314896721,"b""The [.dump command](https://sqlite.org/cli.html#dump) puts empty lines between columns, so I'm also OK with not special-casing this."""
17198,314929078,"b""I like that it lets me call the base.CreateTableColumns. Not that it ever would, but if anything changes in the MigrationsSqlGenerator.CreateTableColumns hopefully Sqlite would still work.\r\n\r\nI think it's good.\r\nThanks for taking a look!"""
17198,314930904,"b'Oh, we should handle multi-line comments too.'"
17198,314956845,"b'Good catch.\r\nSince I went back to support multi-line comments, I went ahead and added table level comments too.'"
17198,314958338,b'We\xe2\x80\x99ve taken a bug fix for code that did this somewhere else. I think it was about Unix line endings on Windows or something. I\xe2\x80\x99ll try to find that implementation so we can reuse it here.'
17198,315384861,"b""@ajcvickers @smitpatel I'm breaking this (moving it to the general SQL generator so it can be shared with Migrations)"""
17247,315393314,b'New issue. Low value. Only way to translate is to optimize\r\n(test ? a : null) == null => !test\r\n\r\n---\r\nIn reply to: [315366240](https://github.com/aspnet/EntityFrameworkCore/pull/17247#discussion_r315366240) [](ancestors = 315366240)'
17247,315394215,b'Low value.\r\n\r\n---\r\nIn reply to: [315180388](https://github.com/aspnet/EntityFrameworkCore/pull/17247#discussion_r315180388) [](ancestors = 315180388)'
17247,315369038,b'~~@roji Because in this case it is massively long...~~ Different case...'
17247,315394610,b'Default of a DateTime differs for server & C#\r\n\r\n---\r\nIn reply to: [315187302](https://github.com/aspnet/EntityFrameworkCore/pull/17247#discussion_r315187302) [](ancestors = 315187302)'
17247,315394992,b'non-translatable. Nothing to translate to server anyway.\r\n\r\n---\r\nIn reply to: [315189975](https://github.com/aspnet/EntityFrameworkCore/pull/17247#discussion_r315189975) [](ancestors = 315189975)'
17247,315395240,b'We need to improve this printing. cc: @maumar'
17247,315395682,"b'Not possible to translate for all providers. We should revisit in future, how do we provide tests which are totally conditionally in provider. No suitable relational available. (or throwing can be relational translation)\r\n\r\n---\r\nIn reply to: [315191515](https://github.com/aspnet/EntityFrameworkCore/pull/17247#discussion_r315191515) [](ancestors = 315191515)'"
17247,315395920,b'Translatable. I think @ajcvickers is already working on issue.\r\n\r\n---\r\nIn reply to: [315192777](https://github.com/aspnet/EntityFrameworkCore/pull/17247#discussion_r315192777) [](ancestors = 315192777)'
17247,315416429,"b'This issue is that it can ignore whitespace and line ending _differences_. But a line ending being present in one string and not there at all in another sting is not considered either a whitespace or a line ending difference. So it becomes a big pain, and I choose not to bother.'"
17247,315422939,"b'Sorry, ignore... Head got twisted around.'"
17247,315432526,"b'Fixed some, filed #17265 for others'"
17171,314205681,b'This does not seem like good change design wise.'
17171,314207096,b'I agree. Any alternatives?'
17171,314350771,b'We should generate joins to bind columns from additional entity types. Ideally join elimination would combine all of that up in single table. (That is how it is supposed to do for owned table sharing case also). If redundant joins are unwanted then either we need to implement join elimination or look into bigger change to accommodate multiple EntityType for entityprojection.'
17171,314926274,b'I thought you were going to DRY this?\r\n\r\nAlso make this method private.'
17171,314926318,b'Best change :trollface:'
17171,314926488,b'For some reason tests started failing after DRYing...'
17171,314927999,b'Can you file an issue in backlog. I would like to investigate in future to better understand.'
17171,314928164,"b""I don't think it's worth it. I probably messed up a Convert or something."""
17171,315402283,"b'I wish this change was in separate PR, it would have been easier to review. :('"
17171,315405574,b'If these joins are just for generating conditions then just pass transparentIdentifierType as null. It will add join but will not re-map the projection as if after the join you are still selecting outer.'
17171,315407685,"b'It was in a separate commit, but had to squash them'"
17171,315408556,b'Bit awkward that this returns predicate but other methods applies it directly.\r\n'
17171,315414550,b'It could apply it and return a bool instead'
17214,314920688,b'@AndriySvyryd '
17214,314920779,b'redundant cast?'
17214,314920985,"b'if FromSql is part of defining query or query filter, the parameters get inlined'"
17214,314921138,b'use switch '
17214,314921144,b'Add a small comment describing the purpose of this convention'
17214,314921173,b'cache common things outside of block'
17214,314921201,b'```suggestion\r\n        ///     Visitor used to remap DbSets encountered in query filters and defining queries to EntityQueryables.\r\n```'
17214,314921373,b':trollface: \r\n@ajcvickers @AndriySvyryd '
17214,314921467,b'Why are you not using GetDefiningQuery function?\r\n'
17214,314921731,"b'This is incorrect, you would need to reduce it properly, nested NavigationExpansionExpression will not have pending selector or includes applied on them.'"
17214,314921874,b'Try to reuse CreateNavigationExpansionExpression. You are missing out on eager loaded navigations.'
17214,314921987,b'Rebase on latest dev'
17214,314922171,b'Not always. If fromSql parameters is using something from DbContext then it would be a parameter.'
17214,314922231,b'Just call `GetDefiningQuery`'
17214,314922274,b'GetDefiningQuery'
17214,314922466,"b'No, this is the correct pattern'"
17214,314922583,b'You mean release/3.0 :trollface: '
17214,314923240,b'you actually need to type this as base so that replace convention knows what it should replace'
17214,315457643,b'ModelExpressionProcessingConvention? Name is highly ambiguous. \r\n\r\n---\r\nIn reply to: [314921144](https://github.com/aspnet/EntityFrameworkCore/pull/17214#discussion_r314921144) [](ancestors = 314921144)'
17214,315458199,b'DbSetAccessRewritingEV'
17214,315458372,b'DRY: private method which takes lambda and returns new lambda or null. If non-null then update.'
17214,315458863,b'Update VisitMember to match how VisitMethodCall is working. I missed when fixing this.\r\n\r\n---\r\nIn reply to: [314922583](https://github.com/aspnet/EntityFrameworkCore/pull/17214#discussion_r314922583) [](ancestors = 314922583)'
17214,315459023,b'Make method internal on actual class.'
17214,315460083,"b'If you apply include then there is no point of creating NavigationExpansionExpression afterwards, Include is client eval. It should only appear on outermost selector.'"
17278,315741208,"b'This is the part I mentioned above, feels problematic.'"
17269,315448954,"b'NB: Only trimming the list on connection.Close/Dispose() now, not command.Dispose()'"
17289,315868593,b'@bricelam \xf0\x9f\x8e\x89 '
17272,315474959,"b'We were discussing this in team room, and simple model is Required on either navigation makes the relationship required. @AndriySvyryd - Thoughts?\r\nThe referenced issue talks about stop configuring side based on the attribute but nothing about nullability of FK property.'"
17272,315475408,"b'I think the most intuitive behavior for Required on a property or navigation should be to make that property or navigation required. Since currently that is not possible, it should do nothing. But we can log a warning.'"
17272,315475554,b'@ajcvickers @divega '
17272,315717854,"b""Honestly, I don't know at this point. In order to make a call as to what makes sense here I would need to understand the rules around how data annotations influence model building, and I no longer have that understanding."""
17272,315858979,b'I created https://github.com/aspnet/EntityFramework.Docs/issues/1658 to document the current behavior with RequiredAttribute.'
17272,315861798,b'And I created https://github.com/aspnet/EntityFrameworkCore/issues/17286 to revisit this when we have required dependent support.'
17272,315914351,b'Why? \xf0\x9f\x98\xa2 '
17272,315914535,b'cc: @ajcvickers for breaking change.'
17272,315915095,"b""It's not a breaking change, RequiredAttributeOnDependent just changed meaning"""
17272,315915361,"b'This is the ""new"" one'"
17284,315961954,b'Does it work if is operator is applied towards base?\r\n`Set<SpecialCustomer>().Where(sc => sc is Customer)`?'
17323,315954476,"b'You are visiting tree already, just replace right there.'"
17323,315961453,b'Move to .ExpressionVisitors.cs file.'
17325,315963792,b'Only if `Partitions` is not empty'
17340,316154700,"b'As mentioned elsewhere, I think local functions should follow camel-case and not pascal-case. [The official c# docs](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/local-functions) use that convention, my editor produces a warning, etc.'"
17340,316155982,"b'Preserve the documentation I wrote to keep the reasoning clear\r\n\r\n```\r\n// INTERSECT has higher precedence over UNION and EXCEPT, but otherwise evaluation is left-to-right.\r\n// To preserve meaning, add parentheses whenever a set operation is nested within a different set operation. \r\n```'"
17340,316157777,b'Expression-bodied (also in the other expression types)'
17340,316157838,b'Expression-bodied (also in the other expression types)'
17340,316158899,"b""I'd consider implementing IEquatable<ExceptExpression>, especially since it's already implemented privately."""
17340,316160930,b'Consider DRYing these three methods by extracting out the identical code.'
17340,316162532,b'Maybe just call this IsNakedSetOperation (as comment below)?'
17340,316166098,b'Remove comment too'
17340,316177584,"b'What about support for OrderBy/Skip/Take directly on the (naked) set operation? Right now this ""pushes down"" all set operations with anything on them. We can at the very least make this overridable to allow providers to override (but should also ideally provide support in GenerateSetOperation)?'"
17340,316185434,b'DRY the 3 methods?'
17340,316189694,"b""IIRC this used to return a shaper in order to support set operations on different entity types, where the properties change and the shaper needs to be modified. Since this is public, it's probably a good idea to keep this - return the same given shaper and set it in RelationalQueryableMethodTranslatingExpressionVisitor, so that we don't need to break later."""
17340,316191873,b'Move this down after the check'
17340,316198744,b'Nickname is being projected twice'
17340,316206427,"b""We don't use that pattern in other custom expressions so I am going to leave this as is for now. If you think we should implement IEquatable then file an issue to change for every custom expression where we have overridden Equals/GetHashCode."""
17340,316206875,b'Not possible due to update call being on concrete type which is different in each case. Low value given there is not much complex logic either.'
17340,316207561,b'This is right set of conditions. I will explain at the end what happens to OrderBy/Skip/Take'
17340,316208115,b'I tried but set of overridable methods required different DRY-ing. I will add a private method to DRY which calls in to protected methods to print.'
17340,316213899,"b""I noticed that,\r\n-  We did not check for shape from QueryableMethodTranslator\r\n- We did not do anything with ShaperExpression here.\r\n\r\nFor applying set operation between 2 types - either T represents EntityType or T represents a nominal type which has a member which represents EntityType. We would need to combine the structure to generate new shaper. Since everything is in terms of projectionBindings and they match on both side, shaper processing can be done in QueryableMethodTranslator itself. (EntityShaper's also have EntityType). I don't see any particular dependency that we have to do it in SelectExpression only.\r\nIf you have a case where we cannot do processing outside, we can add it. Otherwise seems like YAGNI."""
17340,316214188,b'~?~\r\nUnderstood. Will update.'
17340,316215757,"b'Current name is better. While we use word naked in discussion, feels bit weird in code.'"
17340,316217371,b'VS default is to use camelCase and not PascalCase. Roslyn and other dotnet repos uses PascalCase.\r\nVS generates warning for me to convert them to camelCase.\r\nAnd we decided for 3.0 that we are not going to do anything with this naming scheme. Given it is local function and never publicly exposed we can change it later without any breaking change. And there is no reason to spend time on it in 3.0'
17340,316219865,"b""By-design.\r\nPrevious code actually generated incorrect results for this. It was never surfaced since the query is doing `Count(*)`.\r\n\r\nClient shaper binds to `Name` projectionMember to initialize that property in anonymous type. Unless you project it out corresponding column on both sides you cannot bind to it. If you used same earlier g.Nickname for Name then source2 will pick up incorrect property which aligns on same index in it's projection which is incorrect."""
17340,316226284,"b""When I originally did this work (which we ended up removing) it was complex to do outside of SelectExpression. I know we're not sure at the moment, this is about avoiding a breaking change later.\r\n\r\n(on the the other hand not currently clear if we have another release before breaking change anyway, so..)"""
17340,316230465,"b'It could be complex but does it _need to be_ inside SelectExpression? Everything works in terms of ProjectionMembers so those will be same in Shapers and combined outside too.\r\nAs of now, there is no need that shaper processing should be here. It could be very well done in core level and all provider can use it.\r\nUnless you have an example that we need to processing inside select expression only, it does not belong here and there is no breaking change we need to crystal ball.'"
17340,316257101,b'Not doing for visitChildren. Having Source1 & Souce2 separate variable helps while debugging.'
17356,316343689,b'CoreStrings'
17356,316345593,b'There are already a lot of messages like that. Not important to do it right now.'
17357,316350335,b':trollface: '
17356,316353108,b'Tracked by #16712'
17400,317210548,b'This are the set of tests which covers the scenario.'
17402,317289691,b'Assert the sql'
17405,317340134,b'Expression body'
17278,317365674,"b'This is somewhat overkill. You are just using type. You can pass nullable type directly. Also it is coming from EntityProjection so it would be readValueMethod. NullableReadValueEV is for complex expression which may have nested ReadValue calls which needs to be converted to null. Further, for DefaultIfEmpty. you just need to update current projection Mapping rather than change anything going inside so you can just create nullable calls.'"
17278,317365682,b'Returns null.'
17278,317365901,"b'This may not be right thing to do.\r\nThere is a lot of overlap in this area between work we all are doing, (mainly @maumar is tackling it).\r\n\r\nDue to null propagation needs to introduced by EF core on nav expansion and depending on translation,\r\nTranslation of certain expression can return null. (mainly for unmapped property. Also see #17050), That means every expression composition when visiting children needs to take care of encountering null and cascade null forward. I made some changes in the one of the PR I merged.\r\nTranslation of certain non-null expression can return nullable expression back. This is due to the fact that property may be non-nullable but it may end up being null due to optional navigation path. In such cases we should be rewriting the expression tree to make things nullable. Coalesce may be ok in some cases but may not represent exact match.\r\ne.g. `(a => a.OptionalNav.Counter == 0)`, if you use coalesce it gives true back. But is counter really 0?'"
17278,317692615,b'This is also incorrect.\r\nThis assumes that projection would be a CreateReadValue only. If it is CreateReadValue(0) + CreateReadValue(1) then you never added it to projection but then you decided to read 0 slot from inner.\r\nThe implementation should apply a Selector on ServerQuery before DefaultIfEmpty then based on selector applied pass an array of nulls containing ValueBuffer and reconstruct projection mapping like how it is happening here.'
17436,317839954,b'RemapSingleParameterLambdaBody?'
17436,317841954,b'Keeping it consistent with other providers.'
17447,318149080,b'Revert'
17447,318152762,b'@smitpatel :broken_heart: switch expressions :trollface: '
17447,318168045,"b""Will revert, but any specific reason you don't like it here?"""
17447,318184891,b'Involves processing more than mere a single line. Kills readability.'
17438,317863660,b'associate this method with bug number'
17438,317864130,b'same here'
17438,317864160,b'and here'
17446,318207322,"b'This only works when shapes are really identical. (what we support right now). For any EntityType differences, this would not work.'"
17446,318225186,"b'Yeah, the idea is to implement that at the same time for relational and InMemory when the time comes.'"
16242,297301233,b'We OrderBy these in a few places which started producing wrong results when I fixed the database.'
16242,297301366,"b""@smitpatel Why weren't these here before? Bug?"""
16242,297305719,"b'Ah, was ignored. Will fix.'"
17462,318325170,b'So bizarre... :trollface: \xf0\x9f\x98\xb8 '
17462,318325549,b'Proud user of SemVer.'
17465,318363226,"b'TODO: we can do this always, just special-case GetValueOrDefault'"
17465,318363543,b'use ref instead?'
17465,318369718,"b""this first condition is for coalesce - we don't want to upcast right in case like someNullableInt ?? someInt."""
17465,318385443,b'Check node type for coalesce.'
17465,318385558,b'Is there a case where this else is hit?'
17465,318385997,"b'The logic seems unnecessarily complicated to understand.\r\nWrite in simpler terms,\r\n- Check if either of IfTrue/IfFalse changed to nullable from non-nullable.\r\n- If above condition is yes then make them both nullable.\r\n\r\nSame for other Visit* methods.'"
17465,318386046,b'Is False ever encountered? '
17465,318386115,b'TypeNullabilityChanged'
17465,318386216,b'Incorporate.'
17465,318386391,b'Use newExpression.Update.'
17465,318386428,b'Update method.'
17465,318387049,b'Pass flag in Translate* method if it should match up the type nullability.'
17465,318732537,"b'i think its more complicated this way, but w/e'"
13779,318780656,b'@smitpatel It looks like this change was reverted by b69900cd1'
13779,318784616,b'The issue is still open to fix it https://github.com/aspnet/EntityFrameworkCore/issues/13487\r\nPrevious code had a lot of issues around ReLinq as discussed in PR above.'
17465,318793918,b'?'
17465,318794481,b'DRY- introduce a static method which takes the expression and make it nullable if not already.'
17465,318795155,b'Can you write a comment about conditions.'
17465,318795296,b'parameterTypes'
17465,318795501,b'What happened to Coalesce case thing?'
17465,318796001,b'Any specific reason this is not written as TypeNullabilityChanged and parameterTypes cannot take nullable type?'
17465,318800563,b'Only introduce this if TypeNullability of object has changed.'
17465,318801827,b'Use ref. MatchKeyNullability\r\n\r\n---\r\nIn reply to: [318363543](https://github.com/aspnet/EntityFrameworkCore/pull/17465#discussion_r318363543) [](ancestors = 318363543)'
17465,318801900,b'TypeNullabilityChanged'
17465,318802008,b'No adjustNullability?'
17465,318802131,b'preserveType'
17465,318802238,b'Pass the flag to TranslateExpression method ~so you can cleanup code in Contains~'
17465,318803055,b'Mark as DefaultIfEmpty. SelectMany works already.'
17465,318803353,b'This should be fixed by update the VisitMember to coalesce null'
17465,318832204,"b'non needed anymore, since we only adjust nullability if it changed from non-null to null - in case of coaleasce first argument is always nullable'"
17465,318832668,"b'we want to do it also for methods on nullable callers, like string.Substring(...)'"
17465,318836138,"b'no need, discriminator predicate is always bool'"
17485,318856213,b':trollface: '
17484,318855189,b'core code'
17484,318856869,"b""also, the soft cast should be in the lambda that calls into the TryReadValue. Maybe it's ok as a hack for now, since this code should only used by InMemory, @ajcvickers - thoughts?"""
17484,318858336,"b'```suggestion\r\n                throw new InvalidOperationException(""Cannot apply DefaultIfEmpty after a client-evaluated projection."");\r\n```'"
17480,318849816,b'&& type.GetGenericTypeDefinition() == typeof(Func<>)'
17480,318859876,b'Expression body'
17480,318859924,b'Already did in other PR. Coming soon.'
17515,319650473,b'consider ExpressionExtensions.RemoveConvert'
17515,319650587,b'same here'
17515,319664543,b'RemoveConvert is supposed to be deprecated. It is not marked as Obsolete or removed yet.\r\ncc: @ajcvickers'
17513,319325947,b'Also line 137'
17513,319681117,b'DRY'
17594,320467332,b'```suggestion\r\n                        if (changed)\r\n```'
17594,320467578,b'Also in the case below'
17594,320468293,b'Is calling `Add` the same for perf as asigning to a specific index?'
17594,320468340,"b'Careful, `changed` tracks if any component of the SelectExpression was changed, including previous unrelated components. This change seems like it would make us falsely go into the condition.'"
17594,320468730,"b""Assuming the `newProjections` List was initialized with the right capacity (which was done just above), yes - under the hood Add will never need to resize and so it's just an array assignment."""
17594,320469520,"b'But it should be fine for these two cases, since `changed` is not mutated before'"
17594,320473826,"b""Ah I see... I'd rather leave it like this - who knows if we'll shift the code fragments around and this would become invalid... There's no real gain in replacing a single reference comparison with a bool check..."""
17593,320478958,b'comment seems unnecessary '
17593,320479310,b'By design. \xf0\x9f\x98\x9b '
17627,321047334,b'should align variable name to type.'
17627,321047462,b'Should also verify if it is still flaky but can file a separate issue.'
17627,321052031,b'Any test that deletes the database is considered flaky now'
17621,321048833,"b'This breaks every visitor which is not going to use VisitChildren method from here since the SelectExpression would copy from previous visitor.\r\nAlso given it is private field, outside cannot control it all.'"
17621,321194002,b'Current code also breaks if more than one visitor is used (e.g. one visitor uses another visitor internally).'
17621,321302257,b'No public surface like this. This is just plain wrong.'
17621,321317976,"b'I considered this - but we need something that will work for completely external visitors, e.g. provider-added postprocessors (such as the one in the test).\r\n\r\nAny specific better ideas? Any feedback on the general approach and on the rest?'"
17621,321319049,b'~PS How was this solved in the old pipeline?~ Seems like in the old pipeline SelectExpression.VisitChildren could neither mutate the instance nor return a modified copy...'
17226,314984432,b'Number of week not year'
17226,314984445,"b""I'm not sure if it matters but in most places the first day of the week is Sunday"""
17226,314984488,b'Number of weeks instead of year'
17226,314992012,"b'Thanks, I really missed it.'"
17226,314993443,b'`year` -> `week`'
17226,315303969,"b""@ajcvickers @divega @bricelam - Are we adding client side implementation for DbFunctions which are specifically mapped to provider's function on server side? This had come up in one of the meetings."""
17226,315304389,b'Tests:\r\n- Use DateTime & DateTimeOffset both column types.\r\n- Non-zero result.'
17226,315313852,"b'I think we should. IMHO, working with AsEnumerable is still important'"
17226,320562360,b'@aspnet/efteam - Someone needs to verify if this client side implementation is correct for T-SQL. I tried to go down rabbit hole and fell into pit of failure.'
17636,321062937,b'Expression body :trollface: '
17634,321061418,"b'Verify result, also use a different context to verify that the correct instance is used.'"
17533,319689944,"b""Wanted to say more but didn't know how. Things like:\r\n- The team keeps an eye on questions here\r\n- The community is usually a lot quicker to respond\r\n- SO users can be a bit hostile, so review [what to ask](https://stackoverflow.com/help/on-topic) and [what **not** to ask](https://stackoverflow.com/help/dont-ask)\r\n- File an issue here if you're not getting an answer"""
17533,319690201,b'(will appear as \xe2\x9d\xa4)'
17533,319696129,b'Have we?'
17533,319696464,b'I like that this is short; will be interesting to see if we get fewer un-runnable snippets.'
17533,319696616,"b""~~I think we need to still call out what to do if it's a security issue.~~"""
17533,319696911,b'Would it be more accurate/easier to follow to just say that code should follow the style and patterns in the existing code? Maybe suggesting asking if unsure?'
17533,319696958,"b'Oh, I get it now! :-)'"
17533,319697137,b'Should we add something here asking people to check with the team on direction before making big PRs? Or would it already be too late here?'
17533,319697357,"b'Not sure we should call this ""support"". That\'s a very loaded term, and I think it makes more sense to reserve it for actual support contracts.  Maybe, ""Getting Help?""'"
17533,319697804,b'Are there any other possible answers here? :trollface: '
17533,319697922,"b'This is rarely relevant, we can just ask when needed'"
17533,319698278,b'Extra blank lines can be removed here and in the other files'
17533,319698462,b'Ideally the whole message should be visible without having to scroll down'
17533,319698642,b'```suggestion\r\n- [ ] Code follows our engineering guidelines.\r\n```'
17533,319698688,"b""Maybe:\r\n\r\nIf you have a specific question about using EF Core, some options are:\r\n* Check the [documentation](https://docs.microsoft.com/ef/core/)\r\n* Ask the question on [Stack Overflow](https://stackoverflow.com/questions/tagged/entity-framework-core*)\r\n  * The Stack Overflow community is usually quick to respond, but make sure to understand [what to ask](https://stackoverflow.com/help/on-topic) and [what **not** to ask](https://stackoverflow.com/help/dont-ask)\r\n  * Members of the EF team also answer questions on Stack Overflow as time allows\r\n* Ask on GitHub by filing an issue on this repository\r\n  * EF team members will do their best to answer reasonable, clear questions\r\n  * If you're not getting a response on Stack Overflow, then consider asking here, but please make sure you are asking a clear, specific question\r\n"""
17533,319698899,"b'```suggestion\r\nYou will receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your\r\n```'"
17533,319699021,"b""Yes, if their doing it wrong! ;-) But also, Xamarin isn't Core...yet, at least"""
17533,319699125,b'Last point should also say that the SO question should be linked'
17533,319699169,"b""```suggestion\r\nEntity Framework Core is covered by Microsoft's [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core). If you've tried all the options above and are still looking for help, you may wish to [contact a Microsoft Support professional](http://support.microsoft.com/supportforbusiness/productselection?sapId=bec2bc54-b200-6962-301f-f098532f27b2). Please note that personal help may incur a fee.\r\n```"""
17533,319699263,"b'I like to see it--hard to say why exactly. Probably because I make judgments about how to answer based on what kind of developer I think they are. (Put another way, I have biases. Maybe we should remove this. ;-))'"
17533,319700219,b'Copied from corefx repo'
17533,319700401,b'I guess it would be too late if they are submitting a PR.'
17533,319707809,"b'Yeah, this shows up as an option when you select new issue (bug, feature, security policy)'"
17533,319707915,"b'The blank spaces are for users to add text. Since they\xe2\x80\x99re comments now, you don\xe2\x80\x99t have to delete everything. But your point about scrolling is valid.'"
17533,319707941,b'Copied from AspNetCore'
17533,319708182,b'I think the link GitHub makes to it is called something like that too'
17533,319708207,b'I debated whether to put it on the EF one. It\xe2\x80\x99s more relevant to SQLite which targets netstandard2.0'
17533,319708285,"b'lol, I\xe2\x80\x99ll remove it in the name of brevity. I don\xe2\x80\x99t think it\xe2\x80\x99s ever helped us on EF Core'"
17533,319709856,"b'FYI, the Stack Overflow team asked us to include specific text about the kind of questions that aren\xe2\x80\x99t appropriate for Stack Overflow anytime we recommend asking questions about EF or EF Core In their site. An example of this was in the old [UserVoice site](http://web.archive.org/web/20180719063100/https://data.uservoice.com/forums/72025-entity-framework-core-feature-suggestions) (now defunct):\r\n\r\n> Note that roadmap questions, bug reports, feature requests or ideas are not appropriate for Stack Overflow. Visit [Stack Overflow\xe2\x80\x99s help center](https://stackoverflow.com/help) for guidance on appropriate usage.\r\n'"
17533,319710016,"b'Agreed. It (could have) only helped when the bug was something like \xe2\x80\x9cI can no longer build the source with the latest preview of VS\xe2\x80\x9d, but then they can say what version without it being in the template.'"
17533,319710182,b'I am torn by this. Actual guidelines is a fair ask for contributors to make. Maybe we should have a simplified list of the things that we care about the most? And maybe we can keep the link for now and point to the simplified list once we have it?'
17533,319710232,"b'I love it, but why is the list supported versions part of the security policy? Can we just get rid of it?'"
17533,319710262,b'```suggestion\r\nPlease do not open issues on GitHub for anything you think might have a security implication.\r\n```'
17533,319710311,b'Copy the wording from the security issue template?'
17533,319734686,b'@divega copied from AspNetCore. We can probably tweak it'
17533,320950739,"b'Also discussed offline: Point to clear guidance on the PR process (give us a heads up that your working on it, propose a design, etc.) in more places'"
17533,321505557,b'Will keep since the list of frameworks that implement netstandard2.1 will grow.'
17533,321519634,b'\xf0\x9f\x98\x8f'
17533,321523257,b'others or EF team? I told my neighbor that I am working on an issue on a super cool EF Core project. :trollface: '
17533,321528533,b'\xf0\x9f\x91\x8f'
17533,321547900,b'EF team and others who may also be interested in contributing it'
17719,322422058,b'Perf: only copy the list if anything needs updating'
17719,322446672,b'Made in place update when needs to.'
17729,322482682,"b""You don't need to create a new context and entity classes for every test"""
17729,322485047,b'I tried to use this in existing but it requires MARS to be on so it ended up being in QueryBugsTest.'
17729,322485303,b'Could reuse same context. I was hoping that a non-shared-model test infra would make this easier in future.'
17729,322486061,b'You can use an existing context in QueryBugsTest or add a `SqlServerCondition` that indicates that it requires MARS'
17729,322488717,"b'I added few points in #17588\r\nThere are pros & cons for using existing context. We can discuss design. For now, I will keep adding more context to keep it ""consistent"".'"
17729,322489505,"b""It's only consistent within the file, not within the solution. We should reopen https://github.com/aspnet/EntityFrameworkCore/issues/1015"""
17731,322499658,b'Move to `CustomConvertersTestBase`'
17753,322961777,b'```suggestion\r\n# This script drops all databases from azure cosmos emulator except Northwind\r\n```'
17669,321947150,b'Not right. It needs to identify whole pattern.\r\nIf you are generating `a.Prop != null && a.Prop == b.Prop` then that is what you have to match in Sql tree also.'
17669,321947206,b'Thy makeNullable added here?\r\n'
17669,321947305,b'Call base rather than Task.CompletedTask.\r\nTask.CompletedTask should only be called if the test is not skipped but is invalid for the provider and always should show as passed.\r\nFYI @aspnet/efteam'
17669,321948685,b'removed duplicated method. the method that was removed worked exactly like the extension that is used currently when makeNullable == true'
17669,321948727,"b'agreed, only used task to be consistent with the case above, will change both'"
17669,322496705,b'The idea is to flow null checks which are part of correlated predicate to join predicate and remove null checks from join predicate only when appropriate. Inverse of logic of first property.'
17669,322963708,b'```suggestion\r\n                        columnExpressions.Add(rightColumn);\r\n```'
17754,322976060,b':trollface: '
17766,323028209,b'skip test + call base'
17766,323028923,b'This is different. If a test does not work due to a bug then skip. If it is invalid test due to provider behavior then return completed task'
17658,324009307,"b""Surprised this wasn't `$(DefaultNetCoreTargetFramework)` but not a big deal given the need to update the previous line"""
17819,323990797,b'Make classes private'
17841,324399691,b'@mmitche should we consistently remove or ignore the block of added feeds?'
17841,324400675,"b'ignore.  Maestro updates it automatically (and removes if not necessary).  In this case, I published the same build to two different feeds, which is why both show up.'"
17842,324411446,"b""@AndriySvyryd To confirm: We're not reverting the `MemoryCache` use in 3.1?"""
17842,324411522,"b""@dougbu Correct, there's a different fix in 3.1"""
17862,324840951,"b""I'm not sure what black magic enables the previous code to work. It defies all my understanding of cmd's argument parsing."""
17838,324402689,b'blank line'
17838,324410619,b'Why do these need to be public now?'
17838,324847158,"b'inconsistent accessibility - now we are exposing those types in verification helpers on OwnedQueryFixtureBase, (e.g. AssertOwnedPerson). '"
17838,324849974,"b""And why do we need to expose them on OwnedQueryFixtureBase? Shouldn't it just be handled by entityAsserters?"""
17838,324854063,"b'for convenience when you are projecting something more complex involving the entity, e.g. Project_multiple_owned_navigations, or Navigation_rewrite_on_owned_reference_followed_by_regular_entity_filter. We could just repeat the assert logic for them instead if it feels better than exposing the types.'"
17838,324856369,"b""We shouldn't repeat logic, but there should be a generic way of calling the entityAsserters so instead of\r\n``` C#\r\nOwnedQueryFixtureBase.AssertOwnedPerson(e.op, a.op)\r\n```\r\n\r\nYou could write\r\n``` C#\r\nOwnedQueryFixtureBase.AssertEqual(e.op, a.op)\r\n```"""
17838,324861473,b'updated'
17838,324869165,"b""It's ok if you don't want to do this in this PR, but we should extract\r\n``` C#\r\npublic override void AssertEqual<T>(T expected, T actual, Action<object, object> asserter = null)\r\n{\r\n    if (asserter == null\r\n        && expected != null)\r\n    {\r\n        _entityAsserters.TryGetValue(expected.GetType(), out asserter);\r\n    }\r\n\r\n    if (asserter != null)\r\n    {\r\n        asserter(expected, actual);\r\n    }\r\n    else\r\n    {\r\n        Assert.Equal(expected, actual);\r\n    }\r\n}\r\n```\r\nin `QueryAsserter`"""
17838,324869804,"b'will do it in future PR, for other query test bases also'"
17876,325300337,b'\xf0\x9f\x8e\x89 '
17895,325429849,"b'This snippet is repeated in many of the Assert* methods below, should DRY'"
17895,325430595,b'Do you really need to specify the generic argument? If so perhaps the signature of AssertQuery should be adjusted to avoid this.'
17895,325436572,"b'elementAsserter is `Action<dynamic, dynamic>` will try to experiment with the typed version (in a different checkin)'"
17895,325439025,"b'If we have to repeat Equal for derived type like this, it is better to add Equals method on actual class.'"
17895,325441576,b'what is this?'
17895,325441683,b'Custom rather than complex.'
17895,325441757,b'Whyyyy'
17895,325441802,b'Like a Boss!'
17895,325442161,b'nit: string interpolation'
17895,325442177,b'accident'
17895,325442300,"b'Dry AssertCollection/AssertOrderedCollection with bool flag, defaulting to non-ordered.'"
17895,325442787,b'How collection asserter differs from complex collection asserter?'
17895,325444163,"b'unnecessary code, removed'"
17895,325444178,"b'unnecessary code, removed'"
17895,325451512,b'can do in a future checkin'
17798,323950404,b'Update the summary'
17798,323950629,b'Remove this call'
17798,323952259,b'Call `GetIdentifyingMemberInfo()` instead of `PropertyInfo`'
17798,323954487,"b'Also add another condition to make sure that the property is mapped to a string in the database:\r\n```C#\r\n(property.FindTypeMapping()?.Converter ?? property.GetValueConverter())?.ProviderClrType == typeof(string)\r\n```\r\n\r\nAnd add a test that uses a value converter to store the enum as an int: `.HasConversion(v => (int)v, v => (CustomerType)v);`'"
17798,323954569,b'Remove comments'
17798,323954893,b'Make these private'
17798,323955521,b'You need to call `modelBuilder.FinalizeModel()` to trigger the conventions first.'
17798,324188262,"b""I am calling `modelBuilder.FinalizeModel()` but still i can't get the constraint."""
17798,324188341,b'Done.'
17798,324192024,b'Do i need register my convention in some where in the test case?'
17798,324196005,"b'> And add a test that uses a value converter to store the enum as an int: \r\n`.HasConversion(v => (int)v, v => (CustomerType)v);`\r\n\r\nwhy we need this? Can you elaborate more?'"
17798,324339732,"b'>why we need this? Can you elaborate more?\r\n\r\n@SARAVANA1501 Because if the enum is stored as `int`, then the check would need to be `CHECK (CustomerType IN(0, 1))`'"
17798,324343021,b'Use `var` in declarations'
17798,324343095,b'Use StringBuilder'
17798,324349724,"b'The convention is running, you can put a breakpoint in it to debug the issue'"
17798,324349867,b'Use `GetMemberType()` instead of `GetType()`'
17798,324350916,b'Actually by default enum properties are mapped as `int` so you would need to add `Property(o => o.CustomerType).HasConversion<string>()` to test the string CHECK'
17798,324379999,"b'What should we do with flags enums? The value converter will output something like `A, B`'"
17798,324407347,b'Best to not add a CHECK for flags enums for now (but add a test)'
17798,324434780,"b'I made few changes, please check the latest code,'"
17798,324434843,b'You can store the ProviderClrType in a variable'
17798,324434854,b'Other integer types should be supported'
17798,324434890,b'Add a test for flags enum'
17798,324434956,b'Test methods should use snake_case'
17798,324466659,b'Add new line'
17798,324466679,b'private'
17798,324466735,b'remove empty line'
17798,324466752,b'the same here'
17798,324466758,b'the same here'
17798,324466773,b'the same here'
17798,324466777,b'the same here'
17798,324466793,b'the same here'
17798,324466812,b'the same here'
17798,324467067,b'readonly'
17798,324471830,"b""There's no need to delegate this to a different class since the code doesn't depend on the type."""
17798,324507759,"b'Reason why I have choose this method.\r\nConsider the following code: \r\n``` \r\n    enum OrderType : byte\r\n    {\r\n        Standard = 0x0,\r\n        Premium = 0x1,\r\n        Gold = 0x2\r\n    }\r\n\r\nforeach(byte i in Enum.GetValues(typeof(OrderType)))\r\n                Console.WriteLine(i);\r\n             \r\nforeach(var i in Enum.GetValues(typeof(OrderType))) \r\n                Console.WriteLine(i);\r\n```\r\nFirst loop displays ""0,1,3""\r\nWhere as second loop displays ""Standard, Premium, Gold""\r\nSince i am dealing with number i have to parse them using proper `type` in foreach rather than `var`\r\n\r\nTo achieve the same for many number types, I have to write a long method with `if-else` statement with many `foreach` loop. that leads to lot of code smell.\r\n'"
17798,324508890,b'You can cast it to `long` for any numeric type except `ulong`. So only two cases that need to be handled.'
17798,324509520,"b'Or even better you can store the value converter and use it. This will handle any type, including string and will apply any additional processing the converter might perform:\r\n```C#\r\nvar providerValue = converter.ConvertToProvider(item).ToString();\r\n```'"
17798,324509591,"b""That's so cool thanks..."""
17798,324511241,b'Actually to make sure that the generated string is in the correct format call this instead\r\n``` C#\r\nvar providerLiteral = ((RelationalTypeMapping)property.FindTypeMapping()).GenerateSqlLiteral(item)\r\n```\r\nThis applies the converter for you.'
17798,324580585,"b'Wow, Now code looks really simple. will push my code after fixing snapshot test.'"
17798,324770471,"b'We should __not__ create a CHECK constraint in this case as `3`, `5`, `6` and `7` are also valid values.'"
17798,324770973,b'Call GetIdentifyingMemberInfo() instead of PropertyInfo'
17798,324771995,b'Use the type mapping to generate the literal:\r\n`((RelationalTypeMapping)property.FindTypeMapping()).GenerateSqlLiteral(item)`'
17798,324772214,b'If `property.FindTypeMapping()` is `null` just skip the property'
17798,324785860,"b'> Call GetIdentifyingMemberInfo() instead of PropertyInfo\r\n\r\n@AndriySvyryd  i tried, I don\xe2\x80\x99t  know how to identify property is Enum.'"
17798,324787229,b'property?.GetIdentifyingMemberInfo()?.GetMemberType().IsEnum'
17798,324851109,b'Remove'
17798,324853870,b'This line can be moved below the length check'
17798,324940233,b'@AndriySvyryd \r\n\r\nI believe that System.FlagsAttribute can be simplified.'
17798,324944825,"b'Yes, also `IsDefined` can be used instead\r\n\r\n```C#\r\n!Attribute.IsDefined(propertyType, typeof(FlagsAttribute), inherit: true)\r\n```'"
17798,324962326,"b'@AndriySvyryd,\r\nI\'ve been wondering if a **string.Join** would be right here.\r\n```c#\r\nvar typeMapping = property.FindTypeMapping();\r\nvar propertyType = property.GetIdentifyingMemberInfo()?.GetMemberType();\r\nif ((propertyType?.IsEnum ?? false)\r\n    && typeMapping != null\r\n    && !Attribute.IsDefined(propertyType, typeof(FlagsAttribute), inherit: true))\r\n{\r\n    var enumValues = Enum.GetValues(propertyType);\r\n    if (enumValues.Length <= 0)\r\n    {\r\n        continue;\r\n    }\r\n\r\n    var values = string.Join(\r\n        separator: "", "",\r\n        values: enumValues\r\n            .Cast<object>()\r\n            .Select(p => ((RelationalTypeMapping)typeMapping).GenerateSqlLiteral(p)));\r\n\r\n    var sql = $""CHECK ({property.Name} IN({values}))""; \r\n    var constraintName = $""CK_{entityType.GetTableName()}_{property.GetColumnName()}_Enum_Constraint"";\r\n    entityType.AddCheckConstraint(constraintName, sql.ToString());\r\n}\r\n```'"
17798,324963065,"b""@ralmsdeveloper because I don't want to add LINQ as a dependency...\r\nPlease add your thoughts..."""
17798,324964358,"b'I see no negative impact of performance on this, nor do I see any problem using Linq.\r\n\r\nBut I prefer that @AndriySvyryd  give your comment.'"
17798,324967068,"b""The `Join` version is more concise (and it doesn't use Linq), but I don't have a strong preference over the current code."""
17798,325317957,"b'```suggestion\r\n                        && !propertyType.IsDefined(typeof(FlagsAttribute), true))\r\n```'"
17798,325318321,"b'```suggestion\r\n                        var sql = new StringBuilder($""[{property.GetColumnName()}] IN ("");\r\n```'"
17798,325472354,b'I believe @AndriySvyryd  had suggested using **property.GetColumnName()**'
17798,325475576,b'OMG...'
17798,325476056,b'Done'
17798,325476350,b'I also suggested to add square brackets `[ ]` around the column name'
17893,325407428,b'ownership is supposed to be non-null always?'
17893,325409304,"b'Yes, if the current entity type is not the document root it __has__ to be owned.'"
17920,325895301,b'nit: Should use SqlGeneratorHelper to delimit identifier'
17903,325785167,b'Move this inside the if block coming after which checks for null already'
17920,325899138,"b""I wouldn't want to add that dependency just for this"""
17928,325945703,b'Why do we have to do this here? Only for SQLite?'
17928,325947165,b'moved to base'
17943,326354829,"b""any better holder for the types than Tuple? I added the helper method so that we don't need to type `new Tuple<Foo, Bar>(null, null)` every time"""
17943,326355171,b'is there a way to do it inline (i.e. together with the dictionary extraction)'
17943,326355706,"b""might be able to use oftype(TResult) here, need to double check that we don't lose type information in some cases, but I dont think we ever do."""
17943,326356544,"b'need to AssertCollections now, but we can remove ""custom"" collection asserter (the one with element sorter and asserter)'"
17943,326364173,b'\r\n        public abstract class ISetSource\r\n        {\r\n            public abstract IQueryable<TEntity> Set<TEntity>()\r\n                where TEntity : class;\r\n        }'
17974,326838680,b'We should also look into combining all these result operators into one. Under the hood we also convert MinAsync to Min only and call ExecuteAsync.'
17974,326840420,b'filed #17975'
17974,326846638,b'Name'
16997,327593698,b'This PR breaks completely scenarios when an entity inherits an owned entity from its base class:\r\n\r\n```csharp\r\n[Owned]\r\npublic class OwnedEntity\r\n{\r\n\tpublic string Prop { get; set; }\r\n}\r\n\r\npublic class A \r\n{\r\n\tpublic string Foo { get; set; }\r\n}\r\n\r\npublic class B : A\r\n{\r\n\tpublic string Bar { get; set; }\r\n}\r\n\r\n// ...\r\n\r\nbuilder\r\n\t.OwnsOne(a => a.AuditLog); //<-- works only for base type\r\n\r\n// ...\r\n\r\nawait dbContext.Set<B>().SingleOrDefaultAsync(e => e.Bar == bar); //<-- throws InvalidOperationException\r\n```'
17945,326373807,b'@ajaybhargavb @JunTaoLuo @dougbu should this stay at 3.1? It was bumped from 2.1 -> 3.1 here: https://github.com/aspnet/EntityFrameworkCore/commit/3a7c46cdf1ffc2181e6590836157fdb5329bb68d#diff-b72d2224e1d904eb1907c36e050251e2L9'
17945,326377855,b'5.0 seems correct here. 3.1 might be wrong'
17945,326378671,b'yea 3.1 is probably wrong.'
17945,326380413,"b""Hmm I wonder how this ever worked. @wtgodbe the version you're linking to is the runtime version for `Microsoft.NETCore.App`. The error message is complaining that it cannot find the appropriate version of `Microsoft.AspNetCore.App`. I wonder if we need to apply this workaround to M.AspNetCore.App as well. Also, I'm curious how this ever worked without this workaround."""
17945,326391141,"b""Don't remove this logic; it'll help to have around the next time we deal w/ a new TFM before an SDK is ready. Instead, make this conditional on lack of '%(TargetFramework) == $(DefaultNetCoreTargetFramework)` items in each group."""
17945,326392540,"b""@JunTaoLuo why wouldn't this work given the `$(NETCoreAppMaximumVersion)` setting? EF doesn't reference Microsoft.AspNetCore.App anywhere.\r\n\r\nSuggest instead updating `@(KnownFrameworkReference)` items instead of `@(FrameworkReference)` but that's reasonably minor."""
17945,326395098,"b""I think when we had a 3.0 SDK, the `KnownFrameworkReference` for `Microsoft.AspNetCore.App` was a 3.0 version, which we were able to restore from nuget (`3.0.0-rc1-19456-20`). Now with the 5.0 SDK, that default reference is versioned `5.0.0-alpha1.19466.7` per the binlog, which we can't restore since it's not in nuget or the dotnet-core feed. What feed to we publish AspNetCore stuff to? We could just add that to nuget.config."""
17945,326397795,"b""Hmm, I think it's implicit since dotnet-ef targets 5.0 after my change (my bad) https://github.com/aspnet/EntityFrameworkCore/blob/master/src/dotnet-ef/dotnet-ef.csproj#L15. I think the recommendation is for dotnet CLI tools to target a lower fixed TFM and allow roll forward: https://github.com/dotnet/diagnostics/issues/227. \r\n\r\nSo theoretically, we should make a change in 3.1 to make this tool target netcoreapp3.0 and then add the roll forward option in the json file. That should also fix the error @wtgodbe saw."""
17945,326399644,"b'Again, exactly what in this repo references Microsoft.AspNetCore.App? That sounds like a bug.'"
17945,326400077,"b""I think it's the KnownFrameworkReference from the 5.0 SDK, which does try to pull in the package which the build complains it can't find (`5.0.0-alpha1.19466.7`). The old 3.0 SDK referenced a version that's present on nuget.org."""
17945,326400904,"b""I think we're getting our wires crossed, we can discuss this in person at the next standup."""
17945,326733591,"b""`dotnet-ef` project might have issues but that's a red herring for this problem. Instead, let's _remove_ all Microsoft.AspNetCore.App items from the `@(KnownFrameworkReference)` group."""
17945,327731385,b'nit: Avoid changing the final newlines. This results in files thrashing back and forth.'
18032,327897987,b'Did we ever fix the issue with the dotnet-ef package and servicing?'
18032,327906561,"b'Sorry, which issue?'"
18032,327907782,b'One of the directories or manifest files had \xe2\x80\x9c-servicing\xe2\x80\x9d in it and caused the tool to fail. I\xe2\x80\x99ll check if it\xe2\x80\x99s fixed using the internal build of this commit'
17951,327285264,b'Should mainEntry default to true here?'
17951,328074427,"b""If it's set to `true` then the second entry to be added will throw. There's really no good default here, but this method shouldn't be called by external code anyway."""
18027,327897541,"b""Suggest removing this line because we've moved to package license expressions (see https://github.com/aspnet/EntityFrameworkCore/pull/18027/files#diff-4b2f402501d23abbede6eac0f47783e4R12)"""
18032,328347812,b'Looks like it was being caused by an SDK issue that has since been resolved: https://github.com/dotnet/sdk/pull/2739'
18043,328698288,b'@mmitche do we still need the dotnet-core and roslyn feeds? (BTW great to see the new versioned feeds \xf0\x9f\xa5\x87)'
18043,328699132,"b""dotnet-core for sure until I can move some legacy packages off into the appropriate places.  We *should* be able to get rid of roslyn. I'd give it a go."""
18051,328328639,b'@aspnet/efteam - Exception message review \xf0\x9f\x97\xa1 '
18051,328361303,b'Can you also say in the message what that user can do to make it a parameter?'
18051,328361824,b'I was thinking to add it to fwlink. Putting it in local variable will always make it parameter but that may not be right thing to do for all cases.'
18051,328363647,"b""Most people don't follow the links. Just say to consider it."""
18051,328367432,"b""> Client projection contains reference to constant expression of '{constantType}'. This could potentially cause memory leak. Consider assigning this constant to local variable and using the variable in the query instead. See https://go.microsoft.com/fwlink/?linkid=2103067 for more information.\r\n\r\nSounds good?"""
18047,328294167,b'wow!'
18047,328295086,b'Verify all usings'
18047,328297726,b'Why do we need to do this?'
18047,328375628,"b'some tests are now strongly typed to scalar/nullable scalar - those methods are not converted yet. Other tests use CollectionSorter, which for now is dynamic based - will uncomment all those tests once their requirements are met'"
18047,328376025,b'`>.<`'
18082,328891078,b'Why did you remove the suppressions?'
18082,329237775,b'will bring it back. thought nobody is using it anymore'
18104,329244325,b'Match pattern in the file. Issue13517\r\nSuffix all entities & context with bug number rather than in the middle.'
18104,329329989,"b'> Match pattern in the file. Issue13517\r\n>  Suffix all entities & context with bug number rather than in the middle.\r\n\r\nThe file does not currently have a pattern, sometimes ""Issue"" is used, sometimes ""Bug"". Same for the bug number: sometimes it\'s in the middle (e.g. Bug6091Context), sometimes at the end.\r\n\r\nIn any case have made the changed you requested. We can do a pass to make it consistent, but I\'m not sure that\'s a good use of our time.'"
18104,329360492,b'Add AssertSql.'
17967,326821263,"b'@roji I don\'t know what constitutes ""generated code"", but it doesn\'t sound important to run our analyzer there, right?'"
17967,326826341,b'Please confirm all of these new versions are OSS-approved. @Pilchie will be back on Monday and @divega may have the info today if necessary.'
17967,326853309,"b""Wasn't aware of this... ~Any idea what constitutes generated code for roslyn?~\r\n\r\nIn any case, I agree it doesn't sound important, but shouldn't we leave whatever the default behavior is? In other words, are all analyzers now supposed to explicitly disable themselves for generated code, and if not, how are we special? Also are there any actual issues with leaving the default behavior?"""
17967,326862790,b'I could just suppress the warning. I think the idea behind the analyzer is to make more analyzers think about it and be explicit. They may be thinking about changing the default in a future release'
17967,326869021,"b""Oh, didn't realize this was an analyzer warning. I guess it makes sense to do what it says then..."""
18099,329740629,b'Why false rather than checking NoContent?'
18099,329740913,b'local function? :P\r\n'
18097,329801034,b'Comment!'
18097,329806228,b'Yes yes...'
18079,329810134,b'Is it skipped or not?'
18079,329810644,b'\xf0\x9f\x98\xa2 Supposed to be skipped. Unskipped when testing work-around. '
18151,329809392,b'I actually put on my tester hat \xf0\x9f\xa4\xa0 this time and thought of another scenario'
18112,329739542,b'Do we actually use asserters for scalar types?'
18112,329786232,"b'Rarely, I saw some custom asserted for double '"
18071,328921458,"b""@wtgodbe is this package created correctly? .nuspec looks like it's missing the `<icon />` element."""
18208,331212106,"b""@bricelam @Pilchie Haven't finished catching up yet so this has probably been discussed elsewhere, but I assume there is a good reason we're adding public surface in a patch release?"""
18208,331215243,b'It is blocking the mapping of certain functions (ones with tokens instead of literals) that were possible in 2.x'
18201,331246448,b'Why this is called Use rather than Has?'
18201,331247206,"b""MaxSize on it's own seems bit ambiguous"""
18201,331247627,b'DatabaseMaxSize?'
18201,331249884,b'Sounds good to me. We can also defer it upto API review.'
18201,331261721,b'HasMaxDatabaseSize?'
18201,331262575,b'*Use* seems fine to me too'
18201,331263421,b'(or MaxDatabaseSize)'
18201,331263743,b'I feel like the other annotations should have *database* in them too'
18201,331266940,"b""\xf0\x9f\x99\x82 Keepin' it simple"""
18201,331268079,b'Is there a difference between putting these in a subsequent ALTER DATABASE call instead of CREATE DATABASE? E.g. Will you get charged for a fraction of a second of compute or will it take longer while it transfers the empty database to a new VM?'
18201,331269494,"b""I don't like that the user has to quote these, but I get why."""
18201,331272476,"b'It can take up to 5 minutes to process the scaling depending on the options requested. If this is an issue the database can always be created manually beforehand.\r\nWhile I would prefer to add these to CREATE DATABASE it would be a bigger change, we can do it later if we get feedback.'"
18214,331277200,"b""It's hard to tell in GitHub. Are you deleting the `_._` files?"""
18214,331277532,b'Yes'
18201,331286024,b'Agree we can address it later. I was just wondering'
18219,331312052,b'better name?'
18219,331312221,b'make this public and the other one obsolete instead?'
18219,331312354,b'any others? I was looking at EnumerableExtensions but we have string.Join there which probably should stay as is. Thoughts?'
18219,331313096,b'should we do something about unhandled parameters we get when rendering some EF specific expressions? '
18207,331613899,b'@wtgodbe why is the bot going back in time here?'
18207,331617311,b'Great question - @mmitche is this related to https://github.com/dotnet/core-setup/pull/8425 or https://github.com/dotnet/core-setup/pull/8426?\r\n\r\nCC @dagood '
18207,331625702,"b'I think this is because of the CoherentParentDependency on extensions and https://github.com/aspnet/Extensions/commit/40cae905d5617de159c9d19b1f4f33da9d879f10\r\n\r\nWhat this means I think is that when it goes to look up which platform abstractions to update to, there are two. There;s one that is available via the pinned ref assembly, and one available via Microsoft.NETCore.App.Runtime.win-x64.\r\n\r\nWe really want the second one, not the first.'"
18207,331656058,"b'Should we redo merge conflict resolution (if any) and prefer 3.0.1-servicing-19502-01 over 3.0.0? Is 3.0.0 correct for Microsoft.NETCore.App.Ref? Is 2.1.0 correct for NETStandard.Library.Ref?\r\n\r\nNETStandard.Library.Ref is not pinned in Extensions. Should it be?\r\n\r\nAt a higher level, can the bot be improved to handle pinned dependencies better? Or, would we avoid these problems in the future if we pinned Microsoft.NETCore.App.Ref here too?'"
18207,331696738,b'Ping @mmitche '
18286,332804260,b'nit: move it after return statement'
18294,332844325,b'non-switch expression.'
18294,332844409,b'could possibly use ternary inside Replace method call.'
18294,333143232,b'@smitpatel @roji did we not agree that it was OK to use them? I see a bunch of switch expressions in our codebase'
18294,333150118,b'Based on read-ability. left is method call so ok but methodcall and ternary is becoming complex.'
18294,333181706,b'I personally find this within the acceptable usage range...'
18294,333189485,b'leftType'
18294,333189805,b'may be add error msg here also'
18294,333193531,"b""Looking at this switch block, it can be written using ternary directly. Only Column generates different. May be have switch block could help if it changes in future or it may be just YAGNI. I don't have any preference. Upto you."""
18294,333225161,"b'@roji I agree, this seems quite readable still. However, there is a lot of repetition so in this particular case old-school switch looks better. '"
18294,333225342,b'oops :)'
15314,333260964,"b""Identifiers can contain quotes. We're going to need to rely on stronger semantics than just counting quotes.\r\n\r\n```sql\r\nCREATE TABLE [Patient] (\r\n    [Id] int NOT NULL PRIMARY KEY,\r\n    [Can't eat] bit NOT NULL,\r\n    [Can't sleep] bit NOT NULL\r\n);\r\n```"""
18371,334709475,b'This one throws NRE because null is found when reading int.'
18371,334709544,b'This one throws ICE because double is found when reading int.'
18371,334720292,"b'```suggestion\r\n                            b.Property<double>(""Level2Id"");\r\n```'"
18390,335222767,b'This will delete the database?'
18390,335223249,"b'Yes, this will mark it as initialized. `CosmosTestStore` only deletes databases that have been initialized (as trying to delete a non-existing one will cause an exception in some cases)'"
18240,335625965,b'```suggestion\r\n                    if (typeof(IEnumerable).IsAssignableFrom(property.ClrType)\r\n                        && property.ClrType.IsGenericType\r\n                        && property.ClrType.IsAssignableFrom(valueType))\r\n```'
18240,335626342,b'Add an assert to check the default value was set'
18405,335655298,b'Should keep old API for provider compatibility. '
18405,335655412,b'Unless this goes to master.'
18405,335663237,"b'Wait, is ICSharpDbContextGenerator .Internal too? I feel like it should be'"
18405,335674561,b'Too late to make anything internal for a while now...'
18315,334464415,b'@bricelam please upgrade to [3.3.1](https://www.nuget.org/packages/Microsoft.Azure.Cosmos/3.3.1) which has the hotfix for the linux and Mac OS. It was released on Friday.\r\n```suggestion\r\n    <MicrosoftAzureCosmosPackageVersion>3.3.1</MicrosoftAzureCosmosPackageVersion>\r\n```'
18405,335727649,"b""It's Internal. This isn't breaking."""
18405,335728915,"b'I\'d use...\r\n```csharp\r\n_sb.Append(""using "").Append(modelNamespace).AppendLine("";"");\r\n```'"
18320,333780429,b'Do you really need this option? It should work without it.'
18320,333782590,"b'The default batch size in the Relational abstract class is 1. This fails if the batch size setting is not set. The test requires all 4 inserts included in the same batch, but when that option is removed, it becomes 4 operations.\r\n\r\n![image](https://user-images.githubusercontent.com/56271238/66614862-9f333380-eb98-11e9-944d-1a6f35ad029c.png)\r\n'"
18323,333773605,b'Exception message review.\r\n@aspnet/efteam '
18323,335246279,b'```suggestion\r\n    <value>FromSqlRaw or FromSqlInterpolated was called with non-composable SQL and with a query composing over it. Considering calling `AsEnumerable` after the FromSqlRaw or FromSqlInterpolated method to perform the composition on the client side.</value>\r\n```'
18323,335246455,b'Why not trim all whitespace?'
18323,335246870,b'A compiled regexp would be more robust'
18323,335715459,b'```suggestion\r\n    <value>FromSqlRaw or FromSqlInterpolated was called with non-composable SQL and with a query composing over it. Consider calling `AsEnumerable` after the FromSqlRaw or FromSqlInterpolated method to perform the composition on the client side.</value>\r\n```'
18323,335754554,b'I copied what you had suggested earlier. \xf0\x9f\x98\x86 '
18323,335762313,"b""I didn't spot it the first time around. I know it's hard to believe, but I am not perfect."""
18415,336142357,b'```suggestion\r\n```'
18419,336150011,b'Remove TODOs. File an issue if you feel strongly about doing this at some point.'
18419,336156992,b'Done'
18419,336157387,b'`IsNullableProjection`'
18419,336157676,b'100% agree but should I change the other local methods which are using this naming convention?'
18419,336158375,"b""We made decision in discussion about naming and location. I don't think there is any urgency to go and update all of them right now. Just update them as you touch that piece of code."""
18419,336159257,b'Hurts too much to have differing conventions within the same method :)'
18419,336161205,b'In the scope of same method it is fine like you did. I thought you talking about changing in scope of whole solution.'
18419,336171220,b'Make sense'
18228,335688222,"b'Just do it for all extension methods, see https://stackoverflow.com/a/299526/1171992'"
18228,335690101,b'Add a parameter to `NavigationExtensions.ToDebugString` instead'
18228,335690759,b'What is this for?'
18228,335690824,b'Should still add the parenthesis if there are no parameters'
18228,335693021,b'I think we can just assume it will always be `true` and remove it.'
18228,335708989,b'Inline the expressions'
18228,335748882,"b'its supposed to capture difference between Print and PrintDebug, i.e. what is customer curated output vs verbose debug output. For now its just about how we display methods (i.e. with type arguments or without), but all future optimizations would be switched on/off here as well '"
18228,335751720,b'YAGNI for now. We can add when we need it.'
18228,335756972,"b""Doesn't interpolated string calls ToString method already?"""
18228,335757633,b'Why did we not inline expressions here? :trollface: '
18228,335758414,"b'May be.\r\n`new ExpressionPrinter().Print(((Expression<Func<int, bool>>)(e => e > 42)).Body)`'"
18228,335770405,"b""I meant that it's ok to always use the short version of the navigation in expression printing. Elsewhere it should still add all the aspects to the string."""
18228,335770761,b'Call `Navigation.ToDebugString(detailed: false)`'
18228,336220005,b'Also mark this as Obsolete so we remember to remove it. And add XML docs to the method below'
18228,336220826,b'Invert condition and return early to avoid extra indentation and code repetition.'
18228,336229013,"b'This is the same as the code below, just move the check after `builder.Append(navigation.Name);` and avoid code duplication.'"
18228,336236351,b'Why did this change?'
18228,336238051,b'If this is an internal API. also put EntityFrameworkInternal attribute.'
18228,336238526,b'I thought checking for extension method was sufficient to remove this specific type checks.'
18228,336238923,b'Also this increments the indent but check below to decrement the indent check only for simplified method.'
18228,336239011,b'this special cases Enumerable/Queryable to be printed as:\r\n```\r\nsouce\r\n    .Method(arguments)\r\n```\r\n\r\nrather than single line\r\n'
18228,336239251,b'Remove `(` after the expression type. Use nameof syntax.'
18228,336239444,b'Add regression test too :trollface: '
18228,336239515,b'We only need to use that on classes not in the Internal namespace'
18426,336095695,b'No public method.'
18426,336097267,"b'The visitor is internal.\r\n\r\nThe point is that unlike the other visitors invoked by nav expander, here an additional IEntityType needs to be provided, so we need another entry point into the EE visitor. Any suggestions?'"
18426,336138358,b'use the predicate create `dbset.Where()` and pass into entity equality using `Rewrite` method how it is done from outside perspective already.'
18426,336170055,"b""Thanks for the suggestion. How's this new version?"""
18426,336175836,b'Search for `CreateEntityQueryableExpression`'
18426,336176206,b'Revert changes in this file.'
18426,336176576,b'Also make all the methods inside this class private unless overriding Visit* methods & public entry point. We should not be making anything protected till we decide to move this class outside of .Internal namespace.'
18426,336177232,"b'Great, thanks! Applied.'"
18426,336178860,b'Done'
18426,336179137,b'Was not aware of this rule - it makes it somewhat useless to make the class pubternal in the first place.\r\n\r\nDone.'
18426,336181957,b'unused variable.'
18484,337191521,"b'Do we allow ownership.PrincipalToDependent to be null? If yes, then there are potentially a lot more NullRefs than this.'"
18484,337211877,"b""We don't. But we don't want to fail with a NRE, instead it will fail on model validation."""
18484,337212276,b'So query will never have to worry about this?'
18484,337213448,b'Correct'
18419,337229561,b'async testing.'
18035,328878302,b'Why clone the key?'
18035,328906537,"b""I don't know, I copied earlier code lol. I will check."""
18035,328939480,b'Put nested types at the end'
18495,337278633,b'NotNull attribute is no longer true.'
18035,337280667,b'Use MemoryCache'
18035,337280777,b'I thought I was missing something. \xf0\x9f\x98\x84 '
18497,337291324,"b""This is similar to QueryCompiler. Can change it to match pattern in modelSource.\r\n\r\nI don't know why they are different in first place. :trollface: """
18497,337292503,"b'The pattern in `ModelSource` guarantees that the model is only built once. The pattern here and in `QueryCompiler` makes a reasonable effort, but in some cases the logic will still be executed twice, however it results in a lot less contention.'"
18498,337294906,b'This will printout really ugly thing.\r\n\r\nIt should just use flag and generate the method call again. (Since it will be always method call.\r\n\r\nLike `ThenInclude(c => c.Orders)` has been specified on non entity queryable.'
18498,337295939,"b'it currently prints this\r\n```\r\n * IsThenInclude: False\r\n * NavigationExpansionExpression:NavigationExpansionExpression\r\n    Source: Where<ProgramAccessControlList>(\r\n        source: DbSet<ProgramAccessControlList>, \r\n        predicate: (p) => p.ProgramId == (Unhandled parameter: __context_Source_Id_0))\r\n    PendingSelector: (p) => NavigationTreeExpression\r\n        Value: EntityReferenceProgramAccessControlList\r\n        Expression: p.AccessControlList\r\n * Expression: ""AccessControlEntries""\r\n```\r\n\r\nwhich i found more useful than `ThenInclude(c => c.Orders)`. If you would prefer a different approach. happy for you to submit a PR'"
18485,337277814,b'nit: We should probably special-case .NET Framework instead'
18485,337295250,b'Inverted ;)'
18485,337298009,"b'```suggestion\r\n                if (new FrameworkName(AppContext.TargetFrameworkName).Identifier == "".NETFramework"")\r\n```'"
18491,337268550,"b'temporary workaround, correct fix tracked here: https://github.com/aspnet/EntityFrameworkCore/issues/18492'"
18491,337299800,b'Move after public ctor \xf0\x9f\x93\xa6 '
18491,337299972,b'`ParameterNullabilityBasedSqlExpressionOptimizingExpressionVisitor`'
18491,337300027,b'reorder to have parameter values to be last.'
18491,337300436,b'Should use TryGetValue?\r\n\r\n@AndriySvyryd ?'
18491,337300565,b'Double visitation. You visited the operand already. You would visit again in base call.'
18491,337303195,"b""Is it possible to get this far for a query with a parameter that doesn't have a value?\r\nIf yes then use TryGetValue and throw a nice exception and add a test."""
18491,337303831,"b'will do it in a different PR, we have a few places where we directly access parameterValues elements, without TryGetValue - will update all of them'"
18491,337304059,b'filed https://github.com/aspnet/EntityFrameworkCore/issues/18502'
18497,337447011,"b""Am trying to understand this better... It seems like this logic is trying really hard to avoid performing the optimization (and command creation) twice, by tight-looping over a dictionary of locks (_syncLocks). The tight loop looks like it burns a core for an arbitrary amount of time while another thread is (hopefully) performing the optimization, which is generally not a good idea.\r\n\r\nWhy not just always perform the optimization if _memoryCache.TryGetValue returns false, without the additional _syncObjects layer? Sure, it means we optimize twice in some rare race conditions, but that's very unlikely to be significant, and apart from simplifying the code we'd remove the two ConcurrentDictionary updates.\r\n\r\nIn other words, should we not just simplify to the following (based on the latest code, not this PR):\r\n\r\n```c#\r\nvar cacheKey = new CommandCacheKey(_selectExpression, parameters);\r\n\r\nif (_memoryCache.TryGetValue(cacheKey, out IRelationalCommand relationalCommand))\r\n{\r\n    return relationalCommand;\r\n}\r\n\r\nvar optimizeResult = _parameterValueBasedSelectExpressionOptimizer.Optimize(_selectExpression, parameters);\r\nvar selectExpression =\r\n    relationalCommand = _querySqlGeneratorFactory.Create().GetCommand(optimizeResult.selectExpression);\r\n\r\nif (optimizeResult.canCache)\r\n{\r\n    _memoryCache.Set(cacheKey, relationalCommand, new MemoryCacheEntryOptions { Size = 10 });\r\n}\r\n\r\nreturn relationalCommand;\r\n```\r\n\r\nIf we really do want to absolutely avoid optimizing twice (again, am not for this), we can also simply put a null value in the cache as a signal that the actual value is in the process of being computed, and have the consumer [spinwait over it](https://docs.microsoft.com/en-us/dotnet/api/system.threading.spinwait?view=netframework-4.8)."""
18497,337447894,"b""Note that as @AndriySvyryd wrote above, the current code doesn't prevent optimization from happening twice if the proper race condition occurs.\r\n"""
18419,337547593,b'Submitted #18513'
18513,337561592,b'Fails in InMemory. '
18497,337571234,"b'Unless there is significant drawback of this pattern or we see an issue happening, I am in favor of shipping 3.1 with this code. It is tried and tested code in query compiler which we have been shipping for few years now. Any new pattern means there is a chance of deadlock somewhere. We ran into it with ModelSource right before 3.0 release. We can certainly try new pattern in vNext preview1 so that we have confidence before shipping vNext that it works.\r\n\r\n@ajcvickers thoughts?'"
18497,337580247,"b'To be clear, I don\'t think there\'s a huge risk shipping the code as-is, and indeed we can look at it for vNext. I\'m a bit worried about the tight loop, since tight loops in general (without Spinwait or some sort of backoff) are a risky thing - but aside from certain edge cases it\'s unlikely to be an actual problem.\r\n\r\n@smitpatel any concrete fear of a deadlock with what I proposed? Or just a general statement to avoid change in this ""risky"" code (am asking only to understand). FWIW, my suggestion is precisely to simplify this concurrency logic - added complexity in this area is where the risks come from.'"
18497,337626427,b'@smitpatel File an issue to revisit this and QueryCompiler'
18497,337632882,b'Filed #18516'
18521,337787479,"b'No functional impact, just consistency'"
18508,337835923,b'Also call `Close` in the `catch` block if an exception is thrown before this.\r\nOr move it to `finally`'
18508,337887500,"b'Thanks, my bad.'"
18511,337563560,b'CustomConvertersTestBase'
18511,337584056,b'Done'
18511,337630542,b'Names I would prefer\r\n`IsNullableType` - any type where I can assign null.\r\n`IsNullableValueType`/`IsNullableReferenceType` (in future)'
18511,338060314,"b'\r\n\r\nNo problem, done the change.\r\n'"
18461,336723471,"b""No, we don't want to expose this. \xf0\x9f\x98\xa2 """
18461,336749696,b'So are we ok with exposing `QueryableMethods`?'
18461,337196674,"b""QueryableMethods is what we translate in our pipeline. EnumerableMethods (apart from InMemory) is part of implementation detail for particular provider rather than required functionality. Let's discuss in person."""
18461,337653817,b'Internal code usage in providers? #Resolved'
18461,337723599,"b""Because EnumerableMethods is Internal now. I'll move it to shared and make it real `internal`. #Resolved"""
18461,337757325,b'Why return null? EF.Property cannot be used on non-ef-property. #Resolved'
18461,337758483,"b""We'll throw a better exception if null is returned here. #Resolved"""
18461,337762011,"b""Also for include on collections we call EF.Property in a lambda, where we don't have the actual type #Resolved"""
18461,337762882,b'Remove this perhaps? #Resolved'
18461,337764316,"b""But we'll need it when implementing non-owned include \xf0\x9f\x98\x84  #Resolved"""
18461,337768775,b'Do we need similar processing for Member case? #Resolved'
18461,337769184,b'UnwrapLambdaFromQuote #Resolved'
18461,337769323,b'What happens if shaper becomes null? #Resolved'
18461,337769572,b'Can you pass the array directly? #Resolved'
18461,337769994,b'Just visit body and reconstruct lambda. Visiting Lambda can have unintended side-effects. #Resolved'
18461,337775094,"b""You mean checking the unary type? I'll add it #Resolved"""
18461,337775258,b'Can hoist it outside to use in previous if too. #Resolved'
18461,337775408,"b'UnwrapLambda, Also if you are here then you should not have quote around lambda for enumerable methods. Probably you need to unwrap during translation. #Resolved'"
18461,337775492,"b""Nothing good. I'll add return null. #Resolved"""
18461,337776476,b'VisitMethodCall you are checking for collectionShaperMapping. Do we need to do similar to VisitMember? Probably it is here because we generated nested include. Perhaps it could allow us to support nested selects on owned collection. Low priority. Saw VisitMethodCall being different from VisitMember so commented. #WontFix'
18461,337781967,"b""I see, yes we would need it for nested selects on owned collection, but it wouldn't be enough to make them work. I guess it would fall under #17957\r\n\r\n---\r\nIn reply to: [337776476](https://github.com/aspnet/EntityFrameworkCore/pull/18461#discussion_r337776476) [](ancestors = 337776476)"""
18461,338243256,b'Merge Ifs.\r\nRemove EnumerableExtensions'
18544,338236905,"b'Documentation of both APIs does not clarify what is the difference, '"
18544,338250419,"b""Just re-use the type mapping's literal generation. (Or, copy the apostrophe escaping code)"""
18548,338272501,b'It was wrong assumption.'
18549,338316556,b'Would this be better handled inside SnapshotModelProcessor?'
18549,338318098,b'The exception is thrown before `SnapshotModelProcessor` starts processing.'
18549,338319615,b'Ouch. That reminds me... (filed #18557)'
18553,338309334,b'nit: remove empty lines'
18553,338310656,b'the only difference is MethodInfo - DRY'
18553,338315211,b'Done'
18556,338321622,"b""Use a direct cast, it's likely to be on the hot path."""
18560,338347591,b'use switch statement.'
18560,338347661,b'break line on `||`'
18560,338347872,b'Just use the TryNegate thingy.'
18560,338347898,"b""`IsNullOptimizingExpressionVisitor` doesn't have any state, so you can just create it once, in the constructor"""
18560,338348171,"b""Don't call update if predicate/having are not changing."""
18560,338387751,b'looks worse because out parameter on TryNegate'
18560,338399926,b'Nested class at the end of the class? @AndriySvyryd ?'
18560,338403981,b'sounds good'
18560,338695485,b'OptimizeLogicalSqlBinaryExpression or\r\nSimplifyLogicalSqlBinaryExpression'
18560,338696681,b'Empty line'
18560,338704061,b'\r\n\r\nShould this only be running on binary expression? What happens if the IsNull check is at the predicate root (or within a not)?\r\n'
18560,338707183,"b'Am not too sure, but what is the purpose of adding this equals true? Is this required for SqlServer search condition? If so, should it go into that visitor?'"
18560,338710989,b'ConvertedChecked and TypeAs?'
18560,338720252,"b'yes, its a search condition for sql server - and putting it here is a hack for now. Proper fix is tracked by https://github.com/aspnet/EntityFrameworkCore/issues/18492'"
18560,338720889,b'Thanks!'
18560,338723897,"b""SqlUnary can only be 'equal'(is null), not 'equal' (is not null), 'convert', 'not' and 'negate'"""
18560,338732138,"b'I think optimization is also fine for unary - not 100% sure about Convert. On SQL server AFAIK you can only get null back if the value itself is null (for invalid conversion exception will be thrown). Is it the same for postgres?\r\n\r\nAlso, in the future we are going to optimize function calls also but we need extra metadata to do it efficiently (tracked by: https://github.com/aspnet/EntityFrameworkCore/issues/18555)\r\n\r\nFor the case when is null is in the predicate, it should be fine also - if its one of the ""optimizable"" cases, we will rewrite, rest should be left as is. If the predicate gets simplified too much (i.e. to a constant), we will re-run search condition visitor to fix it '"
18560,338735319,"b'Thanks for explaining, it may be good to put this stuff in doc comments at some point.'"
18560,338737100,"b'NOT also seems ok - NOT(a) == null <=> a == null. Also, currently null semantics visitor completely weeds out nulls from the result, so all the 2-value logic operations are safe to do. Once we introduce the optimized rewrite (which doesnt distinguish between null and false), NOT will become problematic in some cases, e.g. \r\n\r\nnullableA == b can be rewritten to the same thing, \r\nbut NOT (nullableA == b) must be rewritten to nullableA != b OR nullableA IS NULL'"
18560,338738859,"b""> I think optimization is also fine for unary - not 100% sure about Convert.\r\n\r\nI'm probably missing something, but if I have something like `WHERE [SomeColumn] IS NULL` and SomeColumn is non-nullable, is that going to get optimized away? Because IsNullOptimizingExpressionVisitor only seems to be invoked under binary expressions...\r\n\r\n> On SQL server AFAIK you can only get null back if the value itself is null (for invalid conversion exception will be thrown). Is it the same for postgres?\r\n\r\nI'm pretty sure it's the same. Invalid conversions definitely error rather than return null"""
18560,338739011,"b'yeah, lots of tribal knowledge in the query pipeline T_T'"
18560,338740477,"b'it will get optimized here:\r\n\r\n```cs\r\n                        case ColumnExpression columnOperand\r\n                        when !columnOperand.IsNullable:\r\n                            return _sqlExpressionFactory.Constant(false, sqlUnaryExpression.TypeMapping);\r\n\r\n```\r\n\r\nand later (during parameter sniffing) we re-run the SqlExpressionOptimizingExpressionVisitor which removes all the true/false etc where possible'"
18560,338741904,"b'ahh i see what you mean - for non binary the non nullable columns get simplified in the SqlExpressionOptimizingExpressionVisitor:\r\n\r\n```cs\r\n            // non_nullable_column IS NULL -> false\r\n            // non_nullable_column IS NOT NULL -> true\r\n            if ((sqlUnaryExpression.OperatorType == ExpressionType.Equal\r\n                    || sqlUnaryExpression.OperatorType == ExpressionType.NotEqual)\r\n                && sqlUnaryExpression.Operand is ColumnExpression innerColumn\r\n                && !innerColumn.IsNullable)\r\n            {\r\n                return SqlExpressionFactory.Constant(sqlUnaryExpression.OperatorType == ExpressionType.NotEqual, sqlUnaryExpression.TypeMapping);\r\n            }\r\n```'"
18560,338743668,"b'null optimizing visitor only deals with IS NULLs that null semantics has introduced. You are right - we should run it in general, for cases when users write ""bad"" is nulls themselves, e.g.\r\n\r\n```\r\nselect * from customers as c where (c.FirstName + c.LastName) IS NULL\r\n```'"
18560,338781036,"b'ctrl + c, ctrl + v gone wrong. :trollface: '"
18560,338804323,b'switch'
18563,338827215,"b'line 1027, They can be only 0 or 1 otherownerships.'"
18601,339231759,b'Update comment'
18619,339679610,b'switch block.'
18619,339680350,b'InvalidOperationException\r\nAdd exception message.'
18619,339684172,"b'No problem - note we have quite a few switch/case throwing NotImplementedException around the code, should clean up at some point.'"
18619,339684458,"b""Any reason here? We agreed to use it except for complex situations, and this seems as simple as it gets. If we don't use it here we basically don't use it anywhere, no?"""
18619,339729465,b'3 line ternary as a return of one of the statement. That is complex enough.'
18619,339786089,"b""This is not how I understand the decision made by the team, and basically invalidates the use of this construct for the vast majority of cases. This isn't extremely important but maybe another opinion would help clarify."""
18619,339790080,b'@ajcvickers '
18619,339813171,b'Seems fine to me. Still readable.'
18615,339427152,b'Is this file deleted? Is this file needed?'
18615,339427795,b'why || did not go to new line?'
18615,339429009,b'Is this line break intended?'
18615,339429352,b'I think VS aligns them rather than tabbed.'
18615,339430270,b'Massive typo in actual code.'
18615,339430705,b'This and SqlExpressionFactory is somewhat conflicting style.\r\nDo we tab ternary from starting point of starting of ternary in ='
18615,339431107,b'At some point @maumar  put them on 1 line.'
18615,339685967,"b'Deleted, we only need one and it should be named the same as the solution.'"
18615,339686342,"b""The lines aren't long enough I guess."""
18615,339686521,"b'Yes, the line is too long'"
18615,339692977,b'Code cleanup __is__ useful \xf0\x9f\x98\x84 '
18615,339695533,"b""The difference in SqlExpressionFactory is that the expression is in parenthesis, so I don't think we should visually break out.\r\nBut generally it's better not to align to arbitrary points as renaming the variables would cause the rest to shift."""
18615,339696314,"b""Yes, it's unfortunate, but we need to try to limit the line length"""
18615,339699165,"b""I don't see an option in R# to align them or an option in VS to indent them \xf0\x9f\x98\x95 \r\n@ajcvickers Any preference?"""
18615,339725028,b'Why does it not align underneath mi.name like others?'
18615,339725623,b'The previous is more readable.'
18615,339726109,b'Why did we remove reference equality?'
18615,339727178,b'The other select.'
18615,339727503,b'Grass is greener on other side.'
18615,339729245,"b""There are a couple that don't, seems like a bug. Either way I'll send another PR to remove most of this class in favor of EnumerableMethods"""
18615,339729476,"b'Value type, no point'"
18615,339729931,b'Could you elaborate?'
18615,339730808,"b'A lot of new expressions are getting inline. For short one may be for something like above, RssUrl should be on new line.'"
18615,339858371,b'I changed some rules and reran cleanup'
18615,339870529,b'Splitting all initializations with two members looks terrible.'
18615,340252561,b'Code change rather than just cleanup?'
18615,340270262,b'Weird R# bug'
18634,340804756,b'Cosmos has ContainsTranslator too. Not sure if it works or why these all tests are disabled.'
18663,340828869,b'AspNet should create its own variable group as the SDL settings are subjective to the repo. This variable group has WinForms specific values and would not work for AspNet. '
18663,340837779,b'Where can I create this variable group/look at the winforms one for an example?'
18663,340845870,b'https://dev.azure.com/dnceng/internal/_library?itemType=VariableGroups&view=VariableGroupView&variableGroupId=66&path=DotNet-Winforms-SDLValidation-Params for an example'
18666,340868230,b'use unwrap lambda helper'
18666,340870949,b'I tried using it but test failed. Not all arguments are LambdaExpression.'
18686,341333528,b'@ajcvickers - Obsolete as warning or error?'
18686,341348142,b'@AndriySvyryd chose warning.'
18675,341107814,b'@maumar may have better idea on what should be element sorter here. May be combination of Key + SomeValue could be unique and gives us stable ordering.'
18675,341108290,"b'Is second one necessary? Given we are grouping them and applying aggregate operator, the ordering inside group should be irrelevant. '"
18675,341123739,"b""Not sure, but AFAICT this test is testing something that's redundant, since Skip is supposed to be order-preserving (both in LINQ and in SQL)?\r\n\r\nIn other words, the original 2nd OrderBy was redundant (because right before GroupBy), so I added ThenBy for consistency. But you're right that the first ThenBy is what fixes my failure."""
18675,341124252,"b""Sure, that could also work. I'm not sure I understand when we want to assert order and when we don't care - in this test AFAICT ordering doesn't seem to be important (but no problem to add)."""
18675,341157961,"b""If there is no element sorter we do contains match if expected result appear in actual results. It has slight case of incorrect result when there are duplication. So @maumar added element sorters. When element sorter is specified, both results (expected/actual) are sorted using that and then element by element match. So you want unique deterministic ordering in element sorter. We also have built-in element sorters for our entityTypes so you don't have to specify always."""
18675,341158231,b'Either way is fine.'
18675,341299028,"b""in case of anonymous types i usually order by tuple of the properties:\r\ne => (e.Key, e.SomeValue), if that's still not deterministic then removing elementSorter is fine"""
18675,341354168,"b'Looks good, the tuple makes the test pass on PG, thanks!'"
18670,340982502,b'Double visitation'
18670,340982833,b'Double visitation'
18670,341105297,"b'Do you mean because TryBindMember also calls Visit after unwrapping convert nodes? If that is the case then in positive case, it would be negligible, but in negative case it could be bad. I will refactor little different to avoid it.'"
18612,339723593,b'Use namespace qualified name.'
18612,339869050,b'ParameterType.Name will only return Nullable`1 without the generic parameter for nullable fields  so I switched to Fullname to prevent collisions there as well.'
18612,340293191,"b""Can we just use parameter's name rather than typeName? If user runs into clash they can always rename parameter name. It is pretty edge case anyway.\r\ncc: @aspnet/efteam """
18612,340337765,"b""We can go with the parameter name, but you do run the risk of collisions.  Any reason you don't want to use the fullName?"""
18612,340794872,b'@AndriySvyryd - Make a decision \xf0\x9f\x98\x89 '
18612,340797628,"b""@pmiddleton The main reason is readability (even though only someone debugging will see it). Collisions can be avoided by renaming the parameters. But I don't feel strongly about this.\r\n@ajcvickers Opinions?"""
18612,340837455,b'I vote for namespace-qualified parameter type names (as it is here)'
18612,340850495,b'Parameter types it is then.'
18612,340855564,b'Ok - I will switch it back to FullName tonight.  I had changed to Name last night :)\r\n'
18612,340931090,b'Ok fixed.'
18693,341721393,"b""Why `.Limit` and can we be sure it's not null?"""
18693,341723716,"b""Move the comments before the query if you can't get VS to format them correctly"""
18693,341724961,b'we already have helper method for this in core ExpressionExtensions'
18693,341740295,b'sentinelExpression?'
18693,341752693,b'This code path is hit only when it is inside subquery single result scenario so there is always going to be top(1). '
18693,341753218,b'Filed #18711'
18693,341753739,"b'RemoveConvert is obsolete and should be removed. We have it in few places. We can discuss how to DRY the code at the same time, avoid misuse of that API.'"
18712,341778158,"b""Shouldn't we still visit the source?"""
18712,341778281,b'Source is already visited before calling into this method.'
18694,341436915,"b'sql is worse due to #18547, we have issue tracking improvement for those here: #18555'"
18694,341758789,"b""Why don't we need to call this again?"""
18694,341759303,b'Just call visit base regenerate the SqlUnaryExpression and pass it to the method. You are passing components anyway.'
18694,341759435,b'when case is indented? @andriySvyryd'
18694,341759801,b'relevance of comment?'
18694,341759918,b'ParameterValueBasedSelectExpressionOptimizer is now a sql optimizer'
18694,341760082,b'3 levels of nested switches :trollface:\r\n'
18694,341760305,b'nit:indent'
18694,341760382,b'can use operatorType'
18694,341760490,b'Linebreak'
18694,341760766,"b'its still correct - we dont do optimized rewrite for expressions wrapped around NOT. This code only works for operands of NOT, so as long as null semantics rewrite runs at all (i.e. useRelationalNulls = false), the optimization can be applied'"
18694,341761128,b'Little comment'
18694,341761372,b'Use switch case to follow the pattern ?'
18694,341761687,"b'You already cast it to constant above, try to DRY'"
18694,341761824,b'is LikeExpression only one which cannot be nullable?'
18694,341762062,b'Use ternary'
18694,341762321,"b'That should be fine, no? SqlServer will revert optimization but other providers can still use'"
18694,341762431,"b'there are probably more, we can add them in the future'"
18694,341762571,b'SqlUnary with Not can never be null? What if Not(NullableBoolColumn)?'
18694,341762831,b'problem is that ParameterValueBasedSelectExpressionOptimizer runs after search condition so it will re-apply this - will add this optimization once ParameterValueBasedSelectExpressionOptimizer runs search condition visitor as well'
18694,341763185,b'You may also need to reset _isNullable before visiting as if Test is nullable & result is not-nullable'
18694,341763865,"b""Don't you need to reset CanOptimize here like CrossJoin?"""
18694,341765015,"b'ok, will also DRY equal and notequal'"
18694,341766449,"b'In several places this method is used to build unary expression from scratch (e.g. when pushing not into the arguments of binary expression. I could create the unary expression and pass it to the method instead, but the current way allows me tho streamline the code bit better - see SimplifyBoolConstantComparisonExpression, or SimplifyUnaryExpression method itself (handling of Not -> Binary)'"
18694,341768544,"b""Yes, but you don't need to always to it, code cleanup will be performed eventually. The important part is to not undo what code cleanup does."""
18694,341768786,b'No resetting to false?'
18694,341768846,"b'i was thinking about it, but opted not to - one is null constant (of any type), one is bool constant. We could just check if the expression is any constant, but we would be doing it for all operators - we only need the info for equal/notequal/orelse/andalso'"
18694,341768947,b'No nullable? SubSelect can be null since subquery can return 0 rows. Also file an issue to update the method name to match expression type'
18694,341769346,b'Saw it later. No need to change.'
18694,341769764,"b'good catch, on sql server its safe b/c they get converted to CASE, but other providers can result in null'"
18694,341769869,b'Do a soft cast and integrate check to null value or bool type in if conditions??'
18694,341769929,"b'If we plan to add more in future, can you put that in private method?'"
18694,341770510,b'added note in #18689'
18694,341774620,"b'selectExpression handles it, but we can add it, just in case'"
18694,341775086,b'select handles that '
18694,341783579,"b""Isn't this override redundant?"""
18694,341784207,b'method is abstract in base'
18694,341784525,"b""There's no need to keep setting it to false. There's no code that could set it to true"""
18694,341784962,b'Perhaps we should add a non-abstract base class.\r\n\r\n---\r\nIn reply to: [341784207](https://github.com/aspnet/EntityFrameworkCore/pull/18694#discussion_r341784207) [](ancestors = 341784207)'
18694,341785419,"b'Equals(TypeMapping, sqlExpression.TypeMapping)'"
18694,341785418,b'filed #18714'
18694,341785425,b'filed #18714'
18691,341774669,b'entry method into visitor with out parameter'
18691,341774960,"b""For non value type you wouldn't need casting to object, It should just work"""
18691,341780434,"b'I need it to compile to `Func<DbDatareader, int[], object>`'"
18730,341861449,b'For this to work reliably with nested owned types we need to process the types in topological order:\r\n\r\n1. Start with all non-owned types\r\n1. Go through all the types they own to set the principal key and the primary key (`entityType.GetDeclaredReferencingForeignKeys().Where(fk => fk.IsOwnership)`)\r\n1. Repeat 2. recursively\r\n '
18730,341906165,b'That sure cleaned up the implementation!'
18730,341922052,b'You should still check that the old key and properties were configured by convention'
18716,342325617,b'Should be 120'
18716,342326053,b'Oh interesting. Looks like GitHub is up to 130 these days...'
18716,342331750,"b""It's been [140](https://github.com/aspnet/EntityFrameworkCore/blob/0d76bbf45a42148924b413ef8f37bf49c1ce10d3/All.sln.DotSettings#L95) since 220c7fe5f15bf999193a0cafe7c27b93dba49af8"""
18763,342901009,b'Is there any specific reason these are private properties rather than fields?\r\n'
9782,343220530,"b'> Will it always be ""((0))"" or sometimes ""(0)"" or ""( ( 0 )) "", etc?\r\n\r\nI have just run into this today because I have an old DB, originally authored with SQL Server 2000, where many bit columns have a default of ""(0)"". Defaults created after it was upgraded to SQL Server 2008 (we skipped 2005) use ""((0))"". '"
18789,343359182,b'The file should be named `CosmosExpressionExtensions.cs`'
18789,343359506,b'Add braces to visually separate the body.'
18789,343360086,"b""I'd prefer to just put the when clause on the same line as the case... But I guess we don't do that?"""
18789,343366623,"b""R# doesn't allow that"""
18810,343934999,"b'extra condition can be pruned, when/if we fix #18492'"
18809,344233297,b'Merge #18810 first.'
18787,343354395,b'Also remove the corresponding enum values and provide explicit numeric values'
18787,343354970,b'Update test names or remove them'
18787,344395569,b'The intention was never to do this since it seems fragile--it would be easy to get the number wrong. Instead I prefixed them with `Obsolete_`.'
18787,344396277,b'Scrubbed for `DbQuery` and removed/renamed.'
18815,344410266,"b""This block shouldn't be needed in 'master' at all"""
18815,344410334,b'Still needed unless you add `dotnett5` and `dotnet5-transport`'
18815,344410377,"b""Should not be needed in 'master'"""
18803,344235629,b'Use AssertQuery syntax.'
18803,344237158,b'Can you also file an issue to simply arithmetic on constant expressions? '
18803,344237544,b'Is removing this test was by design?'
18803,344380702,"b'we don\'t have ""real"" assert infra for null semantics tests. Will add it at some point'"
18803,344381102,"b'yes, the scenario fails in translation and it will never work (client method in predicate)'"
18803,344382147,b'#18819'
18803,344887785,"b""Wouldn't MayBe pattern for client solve the purpose?"""
18803,344891813,"b'the AssertQuery we use in this suite is different than what we use everywhere else - it doesnt support custom projections (always assumes we return `IQueryable<NullSemanticsEntityBase>`) This was added because we need to pass useRelationalNulls flag to dbcontext, which the normal assert query doesnt provide. However, vast majority of tests uses the c# null semantics so we can just switch to the infra we already have, and places where we would pass useRelationalNulls: true, we can test using CreateContext directly. But I would prefer to do this in a different PR'"
18864,345468674,b'@aspnet/build Is this new package source in EntityFrameworkCore expected?'
18864,345468934,"b'@aspnet/build Did we expect his version downgrade for the ""Microsoft.CSharp"" dependency? If so, why?'"
18864,345471376,b'@mmitche do you know why this might be happening?'
18864,345496452,"b""No, this is strange. @mmitche aren't these special feeds specific to servicing?\r\n\r\n@halter73 the other possibility is the Extensions repo got some leaked feeds from a downlevel branch into 'master' and coherency here messed things up."""
18864,345497641,b'Is the same package strangely versioned in Extensions or no longer produced in CoreFx?'
18802,343828302,"b'I know we don\'t like to say O/RM because we\'re also non-relational, but that\'s the word everyone knows. Maybe we should consider ""modern object-relational mapper"", and then adding a small sentence at the end saying we also support non-relational databases?'"
18802,343829287,b'At minimum we should have the dotnet CLI version as well (not just VS). Unfortunately no tabs on github...\r\n\r\n```\r\ndotnet add package Microsoft.EntityFrameworkCore.PostgreSQL\r\n```'
18802,343829622,b'Maybe a where clause for extra fanciness?'
18802,343829928,"b""Let's add a link to our providers page so that people looking for other providers get there easily..."""
18802,343842131,"b""I have similar feelings. I tried to find if there was a more commonly used phrase to encompass both relational and NoSQL, but there just isn't one. I like to think of this as our opportunity to establish one."""
18802,343842585,"b'Good call. In fact, maybe we should just show those...'"
18802,343843399,b'I just copied some code from the Getting started docs. I think we should keep them in sync whatever we decide.'
18802,343843750,"b""It's in the paragraph above the Install-Package commands"""
18802,343847893,b'...and I just upvoted [this issue](https://github.com/NuGet/Home/issues/4699). \xe2\x98\xb9\xef\xb8\x8f'
18802,344239412,b'O/DM is the term used in non-relational O/RMs'
18802,344251938,b'The D in O/DM is for *document*. It doesn\xe2\x80\x99t apply to relations (tables) or key-value pairs.'
18802,344266492,"b'I heard tale that O/XM was used once, but I haven\xe2\x80\x99t found any evidence of it'"
18802,344294730,"b'I\'m not sure inventing a new acronym or using an obscure one is the way to go - we want people to understand what we\'re about in as many milliseconds as possible :) I\'d just go with O/RM which absolutely everyone already knows, and add whatever additional info is necessary.\r\n\r\nDon\'t forget that according to the latest usage statistics our non-relational use is, well, ""not very high"" (especially if we forget InMemory)...'"
18802,344300332,"b'I did not see it in content above, but do we need to come with acronym? object-database mapper seems perfectly fine.\r\n\r\nP.S. never knew D in O/DM was document. Thought it was data.'"
18802,344398978,"b'Should we also mention that this can be done in ""your favorite IDE""? Or at least Visual Studio?'"
18802,344400185,"b""I thought about this quite a lot and came to the conclusions:\r\n* It should not be ambiguous or confusing. O/DM for sure doesn't pass this test.\r\n* We should try not to assume others not familiar with the space will know acronyms from the space. O/RM is one such acronym--I have encountered many people who don't know it.\r\n\r\nSo then we're left deciding whether to use the word relational or not. If it's being spelled out anyway, then it seemed to me that `database` was a better term. And it's more correct. :-)\r\n"""
18802,344400661,"b""Do we have to use `db`? It's not the database! I always use `context` when writing examples."""
18802,344401341,"b'Should we be more explicit about what else is needed here? Maybe, ""The following code demonstrates basic usage of EF Core. See [getting started](https://docs.microsoft.com/ef/core/get-started/) to learn how to configure `DbContext` and either create a new or use an existing database.""'"
18802,344402206,"b'I still think it might be better to have this nearer the top. Especially if it is the place we document the current builds to use. But we could move that information here as well, and update it for each preview release.'"
18802,344402721,"b'I think we will want to have our own ""daily builds"" doc. I already don\'t do what is in the linked page because these feeds are slow, and when I\'m testing in a Console app I just need:\r\n```xml\r\n<?xml version=""1.0"" encoding=""utf-8""?>\r\n<configuration>\r\n    <packageSources>\r\n        <clear />\r\n        <add key=""dotnet-core"" value=""https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json"" />\r\n        <add key=""extensions"" value=""https://dotnetfeed.blob.core.windows.net/aspnet-extensions/index.json"" />\r\n        <add key=""entityframeworkcore"" value=""https://dotnetfeed.blob.core.windows.net/aspnet-entityframeworkcore/index.json"" />\r\n        <add key=""NuGet.org"" value=""https://api.nuget.org/v3/index.json"" />\r\n    </packageSources>\r\n</configuration>\r\n```\r\nDepending where the build goes we may not need dotnet-core or extensions either.\r\n\r\nWe don\'t have to do this now.'"
18802,344420753,b'MVC scaffolding has made `_db` the *de facto* name everyone uses'
18802,344450496,b'Then let the resistance begin! \xf0\x9f\xa6\x84 '
18864,345505865,"b""> No, this is strange. @mmitche aren't these special feeds specific to servicing?\r\n> \r\n> @halter73 the other possibility is the Extensions repo got some leaked feeds from a downlevel branch into 'master' and coherency here messed things up.\r\n\r\nThis is because of the Microsoft.CSharp dependency"""
18864,345506311,b'This is because of CPD.  It finds the Microsoft.CSharp via the CPD.  @riarenas is working on fixing this.'
18864,345508069,b'https://github.com/aspnet/Extensions/pull/2651 should fix it.  There was a duplicate in extensions'
18684,343044298,b'nit: use .Lenght to avoid creating garbage'
18684,343044436,b'ditto'
18684,343044492,b'ditto'
18684,343044847,b'nit: this can be simplified to` interceptor?.SavingChangesFailed(eventData);`'
18684,343044930,b'ditto'
18684,343044988,b'ditto'
18684,343045031,b'ditto'
18890,345998727,"b""@mmitche more weird downgrades here too. In this case, it's Microsoft.CSharp that was already at a lower version, perhaps due to the duplicate in Extensions?"""
18890,345999918,b'Most likely. Coherency updates happen always.'
18890,346004269,b'Note that doing just the update with extensions locally updates everything to the expected versions.'
18890,346042043,"b""This is weird. It didn't do that for the latest Extensions update in this PR. Microsoft.CSharp is no longer held back but these three packages still are."""
18890,346044186,"b""Suspect we need yet-another new Extensions build to complete. See slow-moving https://dev.azure.com/dnceng/internal/_build/results?buildId=426518 build (which hasn't done its publication quite yet)."""
18770,346479451,b'endregion should not specify the name for consistency.'
18770,346479602,b'private classes'
18896,346388739,b'Prefer not to put short forms like misc in the middle of names.'
18896,346389164,b'And please some better name. May be SimpleQuery :trollface: '
18896,346390067,b'I believe the convention is to end with `QueryTestBase` when tests are about query pipeline.'
18896,346390280,b'So `KeylessEntitiesQueryTestBase`'
18896,346608995,"b'And so, NorthwindMiscellaneousQueryCosmosTest is born'"
18896,346674959,b'Why are they prefixed with Northwind? Usually the test classes are named after the feature they are testing.'
18896,346676724,b'Adding Query in the name is also redundant in most cases\r\n\r\n---\r\nIn reply to: [346674959](https://github.com/aspnet/EntityFrameworkCore/pull/18896#discussion_r346674959) [](ancestors = 346674959)'
18896,346683028,b'GearsOfWarQueryTestbase \xf0\x9f\x97\xa1 We need to determine a consistent convention to name test classes.'
18886,346672214,b'use full variable name as `caseExpression` & `nestedCaseExpression`'
18886,346672435,"b'Formatting scheme we have is generally like\r\n```C#\r\nc.CustomerID == ""1""\r\n    ? ""01""\r\n    : c.CustomerID == ""2""\r\n        ? ""02""\r\n        : null\r\n```'"
18886,346858895,b'Done'
18886,346859498,b'Are you sure? :)  Done anyway.'
18952,347146083,b'It should verify that translation failed exception.'
18952,347146144,"b'To avoid a bug trail, we need to get a report on typeMapping characteristics on each of these operator on different databases. What are supported types. What are corresponding result types. etc'"
18952,347149011,"b""Was in a mindset of allowing the server to throw but you're right that not translating is better."""
18952,347151373,"b""*edit: added MySQL info as well*\r\n\r\n### XOR/AND/OR\r\n\r\nOn both SQL Server, PostgreSQL and MySQL, these always casts up to the wider integral operand (so TINYINT XOR BIGINT yields BIGINT). Regular arithmetic operators (e.g. Add) work the same way, all of the below return BIGINT:\r\n\r\nSQL Server:\r\n\r\n```sql\r\nSELECT SQL_VARIANT_PROPERTY(CAST(8 AS SMALLINT) + CAST(1 AS BIGINT), 'BaseType');\r\nSELECT SQL_VARIANT_PROPERTY(CAST(8 AS BIGINT) + CAST(1 AS SMALLINT), 'BaseType');\r\n```\r\n\r\nPostgreSQL:\r\n\r\n```sql\r\nSELECT pg_typeof(8::BIGINT + 1::SMALLINT);\r\nSELECT pg_typeof(8::SMALLINT + 1::BIGINT);\r\n```\r\n\r\nMySQL:\r\n\r\n```sql\r\nCREATE TABLE types (tiny TINYINT, small SMALLINT, normal INT, big BIGINT); \r\nINSERT INTO types (tiny, small, normal, big) VALUES (8, 8, 8, 8);\r\n\r\nCREATE TEMPORARY TABLE typeof AS SELECT tiny + big FROM types AS col;\r\nDESCRIBE typeof;\r\nDROP TABLE typeof;\r\n```\r\n\r\nBoth return BIGINT. Our type inference doesn't match this: we just call ExpressionExtensions.InferTypeMapping on both sides. Did you have this on your radar, should I open an issue? Not sure if there's anything to check on Sqlite with its lack of real types.\r\n\r\n### SHL/SHR\r\n\r\nNot supported on SQL Server.\r\n\r\nOn PostgreSQL the operation predictably returns the same type as the left operand. The right side can be SMALLINT or INT but not BIGINT. Modified the inference to simply apply the default mapping on the right-hand operand. Sqlite supports SHL/SHR but again no real typing so...\r\n\r\nOn MySQL the operation behaves like an arithmetic operator, taking the wider operand type:\r\n\r\n```c#\r\nCREATE TABLE types (tiny TINYINT, small SMALLINT, normal INT, big BIGINT); \r\nINSERT INTO types (tiny, small, normal, big) VALUES (8, 8, 8, 8);\r\n\r\nCREATE TEMPORARY TABLE typeof AS SELECT tiny >> big FROM types AS col;\r\nDESCRIBE typeof;\r\nDROP TABLE typeof;\r\n```"""
18952,347153557,"b""I'm guessing that the mismatch above (arithmetic widening) doesn't actually manifest as a bug, because integer literals are identical, and even when sent as parameters there's implicit widening logic (either in the ADO.NET driver or in the database). But we may still want to fix this for correctness etc."""
18952,347154343,"b""@smitpatel this testing for translation failure (because of the XOR operator), although the name and purpose logic don't seem to fit - removed the throws assertion and made it into a positive test."""
18894,346084701,b'Break this too. VisitScalarSubquery.'
18894,346589154,b'update this too.'
18941,347068390,b'there is some inconsistency here - sometimes we point to the factory and sometimes to the created types - which one should it be?'
18941,347069038,b'QueryTranslationPostprocessor?'
18941,347069305,b'tuple deconstruction.'
18941,347069369,b'@AndriySvyryd @ajcvickers '
18971,347705477,b'keep as lambda body'
18973,347710349,b'```suggestion\r\n        ///     The CLR type of DbContext.\r\n```'
18941,347719258,b'Move out of internal'
18952,348059666,b'This is incorrect change'
18952,348060146,b'redundant cast'
18952,348060508,b'redundant cast'
18952,348061156,b'Contains'
18952,348061188,b'Contains'
18952,348061270,b'Contains'
18986,348132874,b'This goes to internal'
18986,348138404,b'Why do we need this?'
18937,347024087,b'create local function to generate Equal expression.'
18701,348284201,"b'wrong link here, should be https://aka.ms/AA6h122'"
18972,347719778,b'```suggestion\r\n        ///     Returns the property name that the property is mapped to when targeting Cosmos.\r\n```\r\nIn other places as well'
18972,348236196,b'Also fix the doc for `name`  parameter in these 4 methods'
18762,344954880,b'Update to 3.4.1'
19034,349745228,b'Same comment as AspNetCore'
18701,349761985,b'@WeihanLi Thanks for pointing this out. See https://github.com/aspnet/EntityFrameworkCore/pull/19004'
18992,349750661,"b""This file isn't relevant anymore"""
18992,349754665,b'```suggestion\r\nstartvs.cmd EFCore.slnf\r\n```'
18992,349756850,b'```suggestion\r\n# Earlier versions (2.x or older)\r\n```'
18992,349757548,b'We should probably move this page to Docs and expand'
18992,349758947,b'Move relevant parts to README.md and CONTRIBUTING.md and remove this file'
18992,349759654,b'Remove this file'
18992,349760553,b'Remove EF 7 references'
18992,349763611,b'Should be moved to Docs and updated'
18992,350365116,b'Deleted'
18992,350365958,b'https://github.com/aspnet/EntityFramework.Docs/issues/1945'
18992,350366408,b'https://github.com/aspnet/EntityFramework.Docs/issues/1946'
18992,350376456,b'There is no wiki anymore'
18992,350378730,b'I thought about this and then forgot to update. :('
18936,347064144,"b'>minimal [](start = 45, length = 7)\r\n\r\nminimum\r\n[https://grammarist.com/usage/minimum-vs-minimal/](https://grammarist.com/usage/minimum-vs-minimal/)'"
18936,347064702,b'Make this an ICollection or something else that has .Contains'
18936,347066679,b'~Same here~'
18936,347067355,b'Move diagnosticSourceEnabled and simpleLogEnabled to the end and eventData to beginning to match NeedsEventData'
18936,347068017,"b'This means that we will evaluate the event arguments even if the logger is not enabled, this would be a measurable regression'"
18936,347068078,"b""We shouldn't pass through the exception to avoid logging the stack trace, see https://github.com/aspnet/EntityFrameworkCore/commit/031e73a902bce184135c755aad4fd94d20f2f6ec"""
18936,347068778,b'Use StringBuilder for this as well if there are any other format options'
18936,347069238,b'Consider making this non-virtual/private for perf'
18936,347069424,"b'>i n  [](start = 51, length = 4)\r\n\r\nTypo'"
18936,347069602,b'Make this nullable instead. Default values that are different from the CLR default can cause issues.'
18936,347069708,"b'>by [](start = 47, length = 2)\r\n\r\nTypo'"
18936,347069874,"b"">Includes a UTC timestamp [](start = 16, length = 24)\r\n\r\nNo, it doesn't"""
18936,347069941,"b'>category [](start = 67, length = 8)\r\n\r\nRedundant'"
18936,349885286,b'@AndriySvyryd It gets defensively copied anyway--do you think it should not be?'
18936,349885409,"b""@AndriySvyryd Agreed, however this was reverted in a couple of places because it broke the database error page. I'll file an issue to revisit this once the error page has been re-written."""
18936,349885534,b'https://github.com/aspnet/EntityFrameworkCore/issues/19045'
18936,349886286,"b""That's fine, just use `Contains` in the filter and store the event ids as a HashSet if more than 5"""
18936,349887414,b'Good catch. I knew I would miss something like this!'
18936,350388186,b'FindExtension<CoreOptionsExtension>() can return null. This is what happens in Cosmos tests'
18936,350394276,"b""I don't think we should make these sealed. Why do we need to?\r\n@smitpatel cc"""
18936,350396374,b'We cannot make this class sealed. It is required for extensiblility. '
18936,350396771,"b""What do you mean? It's already an override"""
18936,350397670,"b""DRY: just one comment saying it's sealed for perf would be enough"""
18936,350397972,"b""comment it's sealed for perf"""
18936,350405233,"b""@AndriySvyryd @smitpatel I made classes sealed when they only have internal or private constructors, because this means that it is impossible for anyone outside of our code to inherit from them anyway. We were skipping virtual methods in any class with a constructor like this, which seemed like a poor-mans way of just saying that they can't be inherited from.\r\n\r\nWe can certainly unseal them again if we add public/protected ways to construct them."""
18936,350405702,b'Will check...'
18936,350409676,b'I will unseal them when adding protected internal ctor for query things.'
18936,350419475,"b""@AndriySvyryd Any idea why this doesn't fail running the test locally? I have the Cosmos emulator running."""
18936,350420683,"b'Nop, fails for me when running from VS'"
18936,350427692,"b""@AndriySvyryd What's the best way to debug why Cosmos tests are not running even though the emulator is running?"""
18936,350429628,"b""@AndriySvyryd Figured out what is happening. The test runner is failing in  `CosmosDbConfiguredConditionAttribute`. With the command line runner this is just silently ignored and the tests don't run."""
18936,350430215,"b""You can put a breakpoint at https://github.com/aspnet/EntityFrameworkCore/blob/0d76bbf45a42148924b413ef8f37bf49c1ce10d3/test/EFCore.Cosmos.FunctionalTests/TestUtilities/CosmosDbConfiguredConditionAttribute.cs#L36\r\nBut this fails even without the emulator (that's why the PR check is failing)"""
18936,350431056,"b'The real issue here is that if this fails, then there is no indication at all from the command-line runner that anything went wrong, which is pretty sucky.'"
18936,350433299,"b'We could file an issue to make the command-line runner to fail on non-null return codes on Windows too, but I faintly remember that there were some issues with this.'"
18936,350433435,b'Filed #19064'
18936,350436438,b'Added note to #16708 and moved to 5.0'
18936,350449376,b'Should be eventsArray.Length < 6'
18936,350450211,b'Do we need to ignore case?'
18936,350452078,b'I think it makes sense. Otherwise people will file bugs when using categories typed out with all lower case.'
18936,350452245,b'Length == 1 is handled differently.'
18936,350453261,"b""Yes, I'm just saying that 2 to 5 should be handled by array. You could split out 0 as well."""
18936,350453904,b'Zero seemed not very valuable. Why call it if there is zero?'
18936,350454329,b'Then throw an exception'
18936,350456536,"b""No, I'm saying it's valid. It just doesn't need a special case for perf."""
18936,350457088,"b'It will always be false and not log anything, how is the valuable?'"
18936,350457663,"b""It's minimally valuable because you may be always passing a list of categories that comes from somewhere else, which sometimes may have zero."""
18936,350458600,b'Seems easily solvable at the call site. Having a check might prevent a bug'
18936,350459155,b'It would be annoying to have to check at the call site. Zero is valid.'
18936,350460322,"b""We can continue this discussion, but notice that I've already signed off"""
19067,350547729,b'a.Banner can be longer than e.Banner with this passing. Can use SequenceEqual to fix and make this a bit terser too.'
19067,350574739,b'Should have put in else block.'
19081,350949066,b'You need to change the template as well'
19081,350951114,"b""I remember that doing this on mono/xamarin without `GetTypeInfo()` didn't work for some types. Hopefully that's fixed now."""
19081,350952445,b'@smitpatel Do you remember what this comment means and whether it is still relevant?'
19071,350574075,"b""\r\n\r\nSqlite does have INSTR which works great for literal, but I couldn't find a way to cast/convert a non-literal byte into an Sqlite BLOB. Maybe @bricelam knows?\r\n"""
19071,350574867,"b""@maumar changed from null banner do different value to make test negative case (i.e. non-matching byte array shouldn't match). We can always add another null banner later if we feel we need it."""
19071,350575033,"b'Opportunity for null semantics optimization (right side includes left side), we have this tracked right @maumar?'"
19071,350575171,"b'The null check is necessary otherwise in-memory evaluation throws, does it make sense to do it this way?'"
19071,350940503,"b'I will add more squads in the future, will put null banner of one of them'"
19071,350942333,"b'if you mean the expected values (not In-Memory provider) than you can have a different expected query, like:\r\n\r\n```cs\r\nreturn AssertQuery(\r\n    async,\r\n    ss => ss.Set<Squad>().Where(s => s.Banner.Contains((byte)1)),\r\n    ss => ss.Set<Squad>().Where(s => s.Banner != null && s.Banner.Contains((byte)1)));\r\n```'"
19071,350954201,b'filed #19082'
19071,350971314,b'remove'
19071,351065883,"b'```sql\r\nSELECT *\r\nFROM Squads\r\nWHERE instr(Banner, char(@someByte)) > 0\r\n```'"
19071,351067871,"b'Technically, that converts Banner to TEXT, but the result is the same. `cast(char(@someByte) as blob)` would keep them both blob.\r\n\r\nNote, without char(), someByte is converted from integer to blob which results in an 8-byte blob.'"
18833,344531863,b'Convert all the tests to ConditionalTheory.'
18833,344531996,b'This removed subquery changing the scenario being tested. Revert.'
18833,344543453,"b'LiftEntityProjectionFromSubquery, which is called from PushdownIntoSubquery, also [lifts navigations](https://github.com/aspnet/EntityFrameworkCore/blob/master/src/EFCore.Relational/Query/SqlExpressions/SelectExpression.cs#L781). We probably need to do the same here.'"
18833,348068268,b'These are indented in documentation.'
18833,348068995,b'If you are using remove convert and not putting the type backs in then it will cause exception for async single element.\r\nRegression test for this would be casting entities to base type but closest parent is a derived type of that base type.'
18833,348069923,b'This should never be here. If Set operation was valid then it would be in same hierarchy.\r\nIf set operation was invalid by using wrong cast then it should be in client eval phase and should not execute this code at all.'
18833,348071228,b'You already computed all these above.'
18833,348071609,b'We need to do the same recursively else set operation over 2 different aggregates will fail.'
18833,348072563,"b""You shouldn't need this. You are already combining projections mapped to same column. If something calls in this with same column name, which could be the case if unrelated sibling type is also using same column name, you still need null for it rather than returning existing projection."""
18833,348076374,b'Can you do union on Tea & Coffee rather than Drink?'
18833,350937436,"b""Should we convert the entire test class to use QueryAsserter etc. before doing this (otherwise should I just duplicate the test code for sync/async)? Note that for now there's no ConditionalTheory in this class, so maybe we can do it in another pass afterwards?\r\n\r\n/cc @maumar"""
18833,350939799,"b""Makes sense, I'll leave a sanity check and remove the log message, """
18833,350943068,"b""You mean the properties of each side? Yeah, but those lists are later mutated to remove the handled properties...\r\n\r\nI'll make a copy of these lists to avoid calling GetAllPropertiesInHierarchy as part of Except etc."""
18833,351281084,"b""The problem is with multiple properties *on the same side* which map to the same column (e.g. Coke.SugarGrams and Lilt.SugarGrams) - unless we do this deduplication we fetch the same column twice in the projection.\r\n\r\nNote: this isn't just a perf issue - it can lead to wrong results in some cases. For example, in Except_parent_with_child, SugarGrams is loaded twice on the left side - once for Coke.SugarGrams as SugarGrams, once for Lilt.SugarGrams as SugarGrams0. This means that the row for the Coke has a value for SugarGrams0 on the left side, but NULL on the right side, and the EXCEPT operation doesn't identify them as identical."""
18833,351321837,"b""Made the change to reintroduce the Convert node if the common ancestor is different from the original convert type (although if there are multiple Convert nodes overlaid on each other they're discarded - hope that's OK).\r\n\r\nHowever, I couldn't get a test to fail before this change. Tried as you suggested but the following passed:\r\n\r\n```c#\r\n[ConditionalFact]\r\npublic virtual async Task Union_casting_to_base_with_lower_common_ancestor()\r\n{\r\n    using var context = CreateContext();\r\n    var birds = await context.Set<Kiwi>()\r\n        .Cast<Animal>()\r\n        .Union(context.Set<Eagle>()\r\n            .Cast<Animal>())\r\n        .FirstAsync();\r\n}\r\n```"""
18833,351377680,"b""Added this but you should definitely verify that it's correct (don't understand everything here).\r\n\r\nAlso, here's the test I added for this, it fails in NavigationExpandingExpressionVisitor ([on this line](https://github.com/aspnet/EntityFrameworkCore/blob/e4a0e41a492129e0a4083174170e4bd6596dce0c/src/EFCore/Query/Internal/NavigationExpandingExpressionVisitor.cs#L1078), so seems like that visitor would also need to be fixed. Makes sense?\r\n\r\n```c#\r\n[ConditionalTheory]\r\n[MemberData(nameof(IsAsyncData))]\r\npublic virtual Task Union_over_owned_types_with_different_owners(bool async)\r\n{\r\n    return AssertQuery(\r\n        async,\r\n        ss => ss\r\n            .Set<LeafA>().Select(l => l.LeafAAddress)\r\n            .Union(ss.Set<LeafB>().Select(l => l.LeafBAddress)),\r\n        entryCount: 5);\r\n}\r\n```\r\n"""
18833,351383029,"b""Coffee? Which store do you think we're in? :trollface: \r\n\r\nConcat_siblings_with_two_properties_mapped_to_same_column does Tea & Coke, the idea in this test was to go through the supertype."""
19098,351524932,"b""What's the point of memorizing if a new instance of `DebugView` is created each time?"""
19098,351533016,b'I think the original idea was that it would prevent repeated creation of the view when looking at it in the debugger. This may not be needed.'
19098,351533421,b'Remove it then'
18833,351747300,"b""I know this is going to be controversial :) It makes sense to me to group tests thematically this way, but if people object I'll remove."""
19081,351940287,"b""We can remove this class. It was to make sure we don't have enumerable methods where queryable should be there. But I believe exception from here won't be useful either way."""
18833,351940572,b'We can defer is nothing is there. File an issue.'
18833,351940657,b'navigation expansion also needs to be update to allow set operations over different entityTypes.'
18833,351940881,"b'> You are already combining projections mapped to same column. \r\n\r\nYou already de-duped them so why again. Unless the first logic is incorrect. Essentially, you are trying to find IProperty which maps to same column twice.'"
18833,352308093,b'Please no regions!'
18833,352336402,b'OK OK :) I had to try...'
19071,352509111,b'Will do this.'
19071,352937694,"b""Don't assign to instance. Using parameters of a function to store local variable causes confusion."""
19123,352818123,"b""Shouldn't these be updated to assert the SQL since it's overridden/customized in the SQLite provider and therefore not covered elsewhere?"""
19123,352901454,"b""Didn't have that in mind... will do."""
19123,352938428,b'alphabetical order'
19071,353235342,"b'It may be even more confusing to have a two instance variables, one ""bad"" and one ""good"".'"
19071,353310452,"b""Don't call it instance. Just call it firstArgument."""
19154,353470075,b'Should we have a fwlink for this?'
19100,353466839,b'Overload instead.'
19100,353468800,b'Is this a separate issue?'
19100,353478383,"b""Yes, hasn't been reported yet"""
19154,353481556,"b""If you create it I'll add it.\r\nWe don't have any documentation for this apart from 1.x to 2.x upgrade."""
19092,353486010,b'CoreStrings? @ajcvickers '
19153,353486422,b'Do we need all these feeds if dependencies are pinned?'
19092,353486557,"b'@smitpatel I already started a change for doing this throughout. For now, this is better than it was at least.'"
19154,353486732,b'We can add it later if we get sufficient feedback and have docs available then.'
18964,347715106,"b'do Substring(0, 19) if you use StartsWith.'"
18964,348058022,b'Contains'
19153,353820987,b'I kept everything mostly intact until we decide on a strategy. E.g. We could continue flowing Extensions but stay on the latest public preview of .NET 5'
19153,353822165,"b""We need this particular feed because one of the packages we depend on isn't published to NuGet.org"""
19198,354896789,b'nit: spaces'
19198,354897783,"b'Just curious, but why do we need the empty select with a left join, rather than just do the query itself as the main one?'"
19198,354908870,"b'DefaultIfEmpty generates LeftJoin so that we have a row even if the query does not have any rows. Empty Select because it is Any query. We just need to see if there is a row or not.\r\n(Looking at the test, it seems it should be always true result.)'"
19198,354910499,"b'Thanks for the explanation. Yeah, in general Any containing DefaultIfEmpty seems a bit silly since it will always return true...'"
19198,354913921,b'I wonder what OP was thinking when filing this issue https://github.com/aspnet/EntityFrameworkCore/issues/12437\r\n\r\n:trollface: '
19119,354597921,"b""This shouldn't be here. Visit* will never call with null."""
19119,354598521,b'Can never be null'
19119,354600169,b'Filed #19192'
19119,354605243,"b""I don't think that we need to check these"""
19119,354606410,b'Both can be null'
19119,354606899,b'partitionKey can be null here and on all methods below'
19119,355206968,"b""These are cases where the protected method is defined on a BCL class which, at least as far as I can tell, doesn't force non-null. However, agreed that checking for null is not useful here. Will fix as part of #19233."""
19119,355206977,b'#19233'
19190,355276926,b'I think we should update to 3.1.0 and pin.'
19190,355569322,"b""@mmitche this is for the 'master' branch where this repo is still using 'netcoreapp3.1'. What do you think?"""
19190,355572507,"b""Don't see anything with not being on netapp 5 yet."""
19190,355595353,b'cc: @bricelam '
19229,355213991,b'~add Check.NotNull in Update method.~'
19229,355214053,b'Move check to update method.'
19229,355221522,"b'Seems safer/more correct in the constructor (in case other code is added), and expresses the invariant better, but I can move it.'"
19229,355226666,"b'Seems more correct in update method since that is the only place invariant can be broken, so move it.'"
19263,355855790,"b'1. Can the emulator be `xcopy` installed? Making permanent changes to the AzDO agents is not recommended.\r\n    - If yes, probably best to ask .NET Core Eng add the ZIP to https://netcorenativeassets.blob.core.windows.net\r\n2. Why repeat the installation if the MSI has already been installed? I suggest checking for the `Azure Cosmos DB Emulator` folder before doing this.'"
19263,355899137,"b""Hey @dougbu, thanks for taking a look. I'm a total newcomer to our build system so there's likely to be some silliness here.\r\n\r\nSo do I understand correctly that an MSI installation would persist on the agent, i.e. that state is carried over from one build to the next? Because I was operating with the assumption that the build runs in a VM which is later reset, like the way things work on a normal non-hosted Azure Pipelines build.\r\n\r\nI don't think there's a simple xcopy install option for the Cosmos Emulator ([here are the docs](https://docs.microsoft.com/en-us/azure/cosmos-db/local-emulator#installation)). They do provide a docker image which I've tried to set up as a service container, but apparently our agents don't have the right version of Windows to support that. The current MSI-based installation also seems like it's much faster because we can cache.\r\n\r\nHowever, if agents don't reset between builds, then is it possible simply have this MSI installed in all our agents once (or included in our image), rather than do it in our script every single time? Aside from having to mess around with caches, it seems like it would be easier to manage upgrades as well (we'd ask for a manual upgrade every now and then, it should really happen pretty rarely).\r\n\r\nThanks for your help and insights on this!"""
19263,356145203,"b""@roji the BYOC queues work differently from the hosted AzDO queues.\r\n\r\n@MattGal what's the process to request the addition of the Cosmos Emulator to the BuildPool.Windows.10.Amd64.VS2017 and BuildPool.Windows.10.Amd64.VS2017.Open queues? Is this doable in a reasonable timeframe?"""
19263,356199111,"b'> @roji the BYOC queues work differently from the hosted AzDO queues.\r\n> \r\n> @MattGal what\'s the process to request the addition of the Cosmos Emulator to the BuildPool.Windows.10.Amd64.VS2017 and BuildPool.Windows.10.Amd64.VS2017.Open queues? Is this doable in a reasonable timeframe?\r\n\r\nCreate an issue in dotnet/core-eng and we\'ll discuss in triage.  At this point your timeframe is ""next year"" as at best we\'ll only have one more rollout before EOY.'"
19263,356202283,"b'@ajcvickers @roji is ""next year"" soon enough?'"
19263,356213424,"b""I'll start a thread about this offline."""
19239,356333510,b'@maumar - Introduce local function for this.'
19235,355577206,"b'I like the old name better, less redundant.'"
19238,355630452,b'Local functions go at the end of a method body.'
19238,355632678,b'Magic number'
19238,355634774,"b""Even though it's only for debug-time it's still too slow for my eyes. Order by `e.EntityType.Name`, then by `e.EntityType.FindPrimaryKey().Properties` using `PropertyListComparer`"""
19238,355635638,b'When did we decide that?'
19238,355636184,b'Will define as a const.'
19238,355636765,b'In a design meeting where @smitpatel discussed all the new C# features'
19238,355637631,"b""I remember the meeting. I don't remember the decision. @smitpatel @roji What do you remember?"""
19238,355653686,"b'I think I remember we said that, yeah - not sure if it was a hard rule or not. I think it generally helps to make things more readable.'"
19238,355667034,b'At the end of the block where it applies.\r\nPascalCase\r\nStatic if possible.'
19271,356924691,b'nit: var ;P'
19271,356926693,b'Cannot use var.'
19258,356187371,"b""The differ only uses a subset of what's possible with MigrationBuilder. Might need an overload that takes the operations directly."""
19258,356188136,"b""Looks just like the EF6 tests. \xf0\x9f\x99\x82 Hopefully they aren't as slow."""
19258,356189248,b'Just use context.Database.EnsureCreated()?'
19258,356189501,"b""Do we have a reference to Design here? One area of missing coverage that causes bugs is that we don't test the differ with model snapshots."""
19258,356191285,"b'Again, I think this will catch more bugs if targetModel comes from a model snapshot.'"
19258,356192372,"b""I wonder how useful this really is. But if it doesn't make the test take forever, I suppose there's no harm."""
19258,356193634,"b""If we do have access to Design, we could also round-trip the migrations operations through C#. But it's probably a lot less valuable than the snapshot."""
19258,356195241,b'I wonder if using async would mitigate the extra time these take.'
19258,356203133,b'Does that mean that we have migration scenarios which are only possible by hand-coding them into migration files manually? Can you give an example?'
19258,356210861,"b""To be sure I understand, do you mean that you'd like us to generate a model snapshot out of the provided source and target models (like we do in migrations), and then use those to build the models back and compare them with the original models? If so, it *seems* like that might be better in a separate test (like ModelSnapshotSqlServerTest) where there's no actual movement/migration, after all that would check only the round-tripping of the models themselves...\r\n\r\nOr maybe I'm not understanding (any example of a bug)?\r\n\r\nPS no, no access to Design here..."""
19258,356211113,"b""So you're looking for bugs in the model snapshot generation, and not necessarily in the migrations themselves, right?"""
19258,356211490,"b""Yeah, the point here would be to make sure that the down migrations are mathematically the opposite of the up scripts. Since these are purely in-memory comparisons I suspect perf-wise it will be negligible - but we'll see."""
19258,356212192,"b""I'll try it out. I suspect 99% of the time taken by these tests is in SQL Server, in which case I think it matters little if we're sync or async - although it's true we'd be liberating threads to run potentially other tests (am not sure how xunit manages this)."""
19258,356232064,b'In any we can definitely add another overload if we need it.'
19258,356240170,b'Specifying ON UPDATE'
19258,356240901,b'No access to Design? Then I agree we should do this elsewhere'
19258,356241522,"b'Bugs in the differ since the models are actually different (annotations change, types are erased, etc.)'"
19258,356242245,"b'Correct, this would let other tests run in the meantime'"
19314,357837473,b'We probably should delegate some of this to the type mapping to make this more robust. Perhaps part of https://github.com/aspnet/EntityFrameworkCore/issues/10434'
19314,357846613,"b'Delegating if it is max type? I would prefer to keep the logic of adding convert node in query only. A translation pipeline should know that when translating to a function, you may get back different types based on typeMapping of arguments.'"
19269,357890954,b'Include is not required here.'
19297,357887269,b'Could rename this to something else too. It is passing onto immediateconventionscope only'
19297,357892922,"b'Yeah. I am wondering whether it even makes sense for it to be separate from `ConventionVisitor`. Initially I thought there might be an optimizing visitor, but the patterns that we would use to optimize are relatively simple and probably can be done as part of building the ConventionScope tree to be more efficient. The full visitor pattern might be overkill here.'"
19297,357897949,b'Removed'
18237,352801177,"b""Do we need this? EF6 didn't have it. I think it just adds confusion here, but it might be useful in conventions."""
18237,352802009,"b""I'd rather generate the two-parameter overload of HasPrecision when precision is also specified."""
18237,352802952,b'We should probably add new parameters to the end to minimize breaking change.'
18237,352803871,b'These feel very Relational to me...'
18237,352810058,"b'...but so does MaxLength, so Core is probably correct.'"
19324,358010341,b'Extract and DRY as this is likely to change in the future.'
19324,358010853,"b""Did that, but then reverted since it was more lines of code. But will do it since you think it's worth it."""
19324,358010978,"b""Fewer LoC isn't always better \xf0\x9f\x98\x83 """
18630,340926730,b'Is convert node necessary? The returned value of function is already `datetime`. Afaik need to manually assign typeMapping to Function to match datetime typemapping rather than default datetime2 typemapping.'
18630,340926876,b'@aspnet/efteam - Can someone review documentation here?'
18630,340926904,b'This should be sorted alphabetically. '
18630,342883705,"b""I think it's not really necessary, I will fix that!"""
18630,355213798,b'`arguments.Skip(1)`'
18630,355213869,b'Reverse this to be greater than and assert count to be 0'
18630,355213933,b'This will need to Apply typemapping of datetime since default would be datetime2'
18630,355214447,"b'Inject TypeMappingSource in ctor and use it to find mapping for ""datetime"" and explicitly apply that typemapping to this result.'"
18630,355830293,"b""@smitpatel can the mapping be done from the Expression Factory? In case it's not possible or not a good practice, how can we inject this dependency over here -> SqlServerMethodCallTranslatorProvider (this class will create a new instance of SqlServerDateTimeFromPartsFunctionTranslator)"""
18630,356334489,b'Since it uses custom mapping it has to be done manually.\r\n\r\nSqlServerMethodCallTranslatorProvider will add new ctor dependency to IRelationalTypeMappingSource which will be flowed to this translator via ctor.'
18630,356375015,b'Thanks @smitpatel \r\nIRelationalTypeMappingSource injection fixed ;)'
18630,356937584,b'@smitpatel  Api consistency tests also fixed \xf0\x9f\x91\x8d '
18630,356986164,"b'pass ""datetime"" as 2nd arg here.'"
18630,357315833,b'We add additional services on dependencies object. Look at how SqlExpressionFactory is being injected here. We have to do same for IRelationalTypeMappingSource also.'
18630,357316175,b'Can you also add a test where DateTimeFromParts compares to a constant? So that we can verify it generates correct type mapping inference. '
18630,357432666,"b""Sorry @smitpatel I'm not sure if I understood how that test case would look like. I've tried to do something like this:\r\n\r\n```\r\nvar count = context.Orders\r\n                    .Count(c => new DateTime(2019, 12, 29, 23, 20, 40) < EF.Functions.DateTimeFromParts(2018, 12, 30, 10, 20, 15, 22));\r\n```\r\nAnd it generates the following SQL Query:\r\n\r\n```\r\n@__p_0='False'\r\n\r\nSELECT COUNT(*)\r\nFROM [Orders] AS [o]\r\nWHERE @__p_0 = CAST(1 AS bit)\r\n```\r\n\r\nIs that behavior which should be tested?\r\nTks"""
18630,357435284,b'Use the same argument as above test in CreateDateTimeFromParts (`DateTime.Now.Year` etc)'
18630,357439421,"b'Thanks, just double checking, I have two distinct scenarios, can you confirm that the outputs are OK?\r\n\r\n```\r\n        [ConditionalFact]\r\n        public virtual void DateTimeFromParts_constant_compare()\r\n        {\r\n            using (var context = CreateContext())\r\n            {\r\n                var count = context.Orders\r\n                    .Count(c => new DateTime(2018, 12, 29, 23, 20, 40) > EF.Functions.DateTimeFromParts(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 10, 20, 15, 22));\r\n\r\n                Assert.Equal(0, count);\r\n\r\n                AssertSql(\r\n                    @""SELECT COUNT(*)\r\nFROM [Orders] AS [o]\r\nWHERE \'2018-12-29T23:20:40.000\' > DATETIMEFROMPARTS(DATEPART(year, GETDATE()), DATEPART(month, GETDATE()), DATEPART(day, GETDATE()), 10, 20, 15, 22)"");\r\n            }\r\n        }\r\n\r\n        [ConditionalFact]\r\n        public virtual void DateTimeFromParts_constant_compare_to_column()\r\n        {\r\n            using (var context = CreateContext())\r\n            {\r\n                var count = context.Orders\r\n                    .Count(c => c.OrderDate < EF.Functions.DateTimeFromParts(1919, 12, 12, 10, 20, 15, 22));\r\n\r\n                Assert.Equal(0, count);\r\n\r\n                AssertSql(\r\n                    @""@__DateTimeFromParts_0=\'1919-12-12T10:20:15\' (Nullable = true) (DbType = DateTime)\r\n\r\nSELECT COUNT(*)\r\nFROM [Orders] AS [o]\r\nWHERE [o].[OrderDate] < @__DateTimeFromParts_0"");\r\n            }\r\n        }\r\n```'"
18630,357442879,b'Perfect!'
18630,357451851,b'Apparently in T-Sql year would start from 1753 so specifying 1 here brings incorrect result.\r\n\r\n@ajcvickers @AndriySvyryd - What should be our guidelines here?\r\n\r\nClient side function can take 1 as value and give results correctly. Server-side throws due to out of range. Do we write documentation based on client side or server side?'
18630,357452222,"b'Instead of System.DateTime, use `<see cref=""DateTime"" />` so it can link to the type in docs.'"
18630,357452665,b'You can use just one DateTime.Now specific term so that it is server evaluated. Rest can be just constants.'
18630,357452976,"b'This is not useful as it is evaluating the function on client side. Instead, take the test above but store the `new DateTime` part in local variable and use the local variable in that place, keeping arguments of DateTimeFromParts same.'"
18630,357833099,b'We decided to make documentation align with SqlServer. Hence it should read here from 1753 to 9999'
18630,357833241,b'No client side evaluation. Replace with\r\n`=> throw new InvalidOperationException(SqlServerStrings.FunctionOnClient(nameof(DateTimeFromParts)));`'
19334,358681234,"b""Shouldn't this throw an exception if it's not our IQueryingEnumerable, rather than return this string? Some tool may try to parse this as SQL etc."""
19334,358681735,b'nit: remove the null?'
19334,358925162,"b'No. This is like ToString--we want the debugger to show something, even if it is just a generic message.\r\n\r\nThe idea that people might start parsing the SQL here is really the reason this is controversial. I would consider this abuse of the API, in the same way that parsing ToString output is considered an abuse. '"
19334,358933749,"b""If parameterValues is not null then don't append parameters to the string"""
19334,358935411,"b'Hmm. Is that really an advantage? They are formatted as comments anyway, and the string may contain facet information that could be useful.'"
19189,354615078,"b'I think that now that we have a test in GearsOfWar, this one can be removed - they test exactly the same functionality.'"
19189,354615304,"b""Any specific reason for testing via a join? Do you have any problematic scenario in mind that we're testing here?"""
19189,354615646,"b'Nit: indent this 4 characters in compared to the if statement, see other EF code and follow its example.\r\n'"
19189,354615778,"b'SqlExpressionFactory should correctly infer the type mapping from the CLR type, so we can omit intMapping here. See TranslateLongCount as an example.'"
19189,354852354,"b""I don't think this is required - we should be able to translate this even on a byte[] parameter, no?"""
19189,354854353,"b'We should first attempt to call base.VisitUnary, and only if that fails to translate (i.e. returns null) should we proceed with our specific translations - see VisitBinary for an example.\r\n\r\nFor example, at some point in the future we may expose hooks to plugins for performing these translations. If we do that, we want the plugins to have a first go at translating before we do our own thing.'"
19189,354858983,"b""[According to the docs](https://docs.microsoft.com/en-us/sql/t-sql/functions/datalength-transact-sql?view=sql-server-ver15), DATALENGTH returns long only for varbinary(max), and int for for binary types. We could check the size facet on the operand and omit the cast if it's not max (but definitely default to having the cast otherwise)."""
19189,354875861,"b'Will resolve by removing the extra test.\r\n\r\nAt the time, just a lack of confidence and understanding of Expressions. I assume that, since a Unary Expression depends on nothing else, you can get away with limited tests?'"
19189,354877471,b'Did you mean we should be able to translate it on a non-byte[] parameter? Sorry - not understanding otherwise'
19189,354883467,"b""Nope - we should definitely restrict to byte[]. However, you're also restricting this translation to ColumnExpression, whereas it may also be a ParameterExpression, and we should also translate that.\r\n\r\nFor example:\r\n\r\n```c#\r\nvar arr = new byte[] { ... };\r\nvar x = ctx.Blogs.Where(b => b.SomeIntField == arr.Length).ToList();\r\n```"""
19189,354889884,"b""It's the difference between failing server-side vs client-side, yeah? Given that there is `Length` and `LongLength` for arrays, should we let the server-side failure happen (resulting in an Arithmetic SQL Exception), or do we let the conversion from long to int fail client-side? Though, I think in that case they _could_, God forbid, run it **unchecked**?"""
19189,354894033,"b""I'm not sure we're talking about the same thing... My point here is that for varbinary(x) where x isn't max, `DATELENGTH` always returns an int, so the Convert node is unnecessary (there's no failure involved).\r\n\r\nYou're probably thinking of the case of varbinary(max), where the actual array length is over int.MaxValue and the user calls Array.Length. Since in that case we need to have the Convert node (since `DATALENGTH` for varbinary(max) returns bigint but the client requires int), I'd expect the conversion to fail server-side, which seems like the right behavior."""
19189,354894206,b'(we should confirm that this is actually what happens when bigint is converted to int)'
19189,354909725,b'`parameter.Length` would be converted in ParameterExtractingExpressionVisitor. (also Length over constant) It does not need to account for parameters. Probably ColumnExpression is fine. Unless we can think of any other case.'
19189,354912796,"b""I believe this ordering is correct. Currently plugins are in relational layer and happens at the end of Visit* methods. So they all happen after the inline translations. If we call base first then the ordering would be relational then plugin then provider specific. Which is not very provider-priority thing. Given plugins wouldn't kick in for relational if there is translation directly in SqlTranslator the order we should have is\r\n-> Provider specific SqlTranslator\r\n-> Relational SqlTranslator\r\n-> Plugins\r\n-> Provider specific translators\r\n-> Relational translators\r\n\r\nThis is somewhat different from VisitBinary. If provider is about blocking certain translations, then they call base first. If it is about adding a translation then it should be before base.\r\n\r\nP.S. UnaryExpression does not have plug in support. I don't think we have a plan to add any."""
19189,354913473,b'Skip the test with ConditionalTheory and link to issue number in skip message for work in progress scenario.'
19189,354914933,"b""Thanks @smitpatel, was not aware of that... But to be sure I have the right mental model, how does this work with compiled queries? Shouldn't ParameterExtractingExpressionVisitor run only once (when the query is first compiled), but at that point it only has a specific value of the byte array?"""
19189,354918486,"b""Hmm... I think we should consider allowing plugins to override behavior in general; that opens up other use cases for them, i.e. to override bits of core logic. Is there any disadvantage in doing this?\r\n\r\nHowever, it's true that this conversation is irrelevant before we actually allow plugins to hook into translation directly."""
19189,354918716,b'@smitpatel I think the intent here is to finish this work before merging this PR.'
19189,354921497,"b'The bad compiled queries \xf0\x9f\x98\xa2 \r\n\r\nYes, we would need to check for parameter for explicitly compiled query because it has bad design as of now.'"
19189,354923887,"b'OK thanks. Would be good to have a chat about what you have in mind - I was assuming that because of compiled queries, ParameterExtractingExpressionVisitor should never do anything that depends on specific parameter values...\r\n\r\nDo we have any issue tracking this question, possible fixes/design changes?'"
19189,354924571,"b'There are no direct disadvantages.\r\nThough\r\n- Plugins are to extend functionality of a provider and not override.\r\n- The correct way to override is extend provider rather than add a plugin.\r\n- The order in which plugins are executed is not defined (it is deterministic though). Hence if multiple plugins are overriding translation, you may get inconsistent behavior.\r\n- In current design, plugins can only override IMember/Method translations registered by provider/relational but not built-in translations.\r\n\r\nHence I am leaning towards not allowing plugins to override (rather just extend).\r\nAnother issue with overriding behavior is, \r\n- It disallows provider to override relational code just so that plugins can override relational+provider behavior or\r\n- Provider needs to copy paste code to call into plug in before adding their translation so that order becomes plugins->provider->relational.\r\n'"
19189,354925142,b'All good if this tests are replaced with assert sql rather than skipped like this.'
19189,354926785,"b""No tracking issue. Feel free to file one. I don't have any specific ideas I wanted to add. Just a tech debt."""
19189,354928747,"b'> Plugins are to extend functionality of a provider and not override.\r\n\r\nI guess that\'s what this discussion is about... That\'s exactly what I\'m not sure about.\r\n\r\nAlso, unless I\'m mistaken, plugins can currently already allow override provider method/member translators, so why would we not allow them to override core SqlTranslator logic as well (if we supported that)?\r\n\r\n> The correct way to override is extend provider rather than add a plugin.\r\n\r\nBut the whole point of having plugins is to allow people not to extend providers (e.g. just because they want to add method translators). It\'s also impossible to extend the same service ""twice"", another problem which plugins solve.\r\n\r\n> The order in which plugins are executed is not defined (it is deterministic though). Hence if multiple plugins are overriding translation, you may get inconsistent behavior.\r\n\r\nThis is true even when not overriding (i.e. multiple plugins translating the same method), so it seems orthogonal.\r\n\r\n> In current design, plugins can only override IMember/Method translations registered by provider/relational but not built-in translations.\r\n\r\nThat\'s true - this discussion is completely academic at this point. We don\'t have to continue it.\r\n\r\n>  Another issue with overriding behavior is, [...]\r\n\r\nI didn\'t follow that... My assumption is simply that a provider should always call base.VisitWhatever in their SqlTranslator, which makes sure that plugins run first, relational after. But we don\'t have to spend more time on this.'"
19189,354930448,b'Feel free to file an issue if you want to discuss further. The purpose of plugins was never about overriding provider specific translation.'
19189,354933473,b'#19209'
19189,354934728,"b""No real need... We can discuss this if we ever do decide to expose SqlTranslator extension points for plugins. When we discussed recently I had the impression we're going more in the direction of allowing plugins to register additional preprocessing visitor(s), which would obviate this entire discussion..."""
19189,354950007,"b'Yes, absolutely going to finish these - just wanted to verify SqlServer implementation was acceptable before working on sqlite'"
19189,354958008,"b'FWIW I have verified that as a parameter (without modifying code) everything works as expected - \r\n\r\n```       \r\npublic override async Task Byte_array_filter_by_length_parameter(bool async)\r\n{\r\n    await base.Byte_array_filter_by_length_parameter(async);\r\n\r\n    AssertSql(\r\n        @""@__p_0=\'1\'\r\n\r\nSELECT [s].[Id], [s].[Banner], [s].[InternalNumber], [s].[Name]\r\nFROM [Squads] AS [s]\r\nWHERE CAST(DATALENGTH([s].[Banner]) AS int) = @__p_0"");\r\n}\r\n```\r\n\r\nI will need probably need a little guidance (or a reference to a pre-existing example) on how to check a compiled query for that param.\r\n\r\nThank you! Interesting discussions. \xe2\x9d\xa4\xef\xb8\x8f '"
19189,354966851,"b""Am I free to resolve this particular one w/ no changes needed? Seems like a much larger design space issue on extensibility (or lack thereof) of provider-specific translations. Li'l more than I can chew at the moment \xf0\x9f\x91\x80 """
19189,354992175,"b'Yep, am resolving'"
19189,355100135,"b""Is the cast necessary? Should the cast be missing, _and_ you're on a varbinary(max) column _and_ the length of the binary data is greater than `int.Max`, it'll throw a client-side arithmetic exception as opposed to a SqlServer arithmetic exception. Otherwise the returned BIGINT returns as an Int32.\r\n\r\nIn any case the code is written as requested - how should I make a test case for the varbinary(n)? I can use the BuiltInDataTypes to do this, or add a column to Gears -- there seemed to be a favor towards Gears but I didn't want to start adding columns willy nilly."""
19189,355118851,"b'SqlClient does not allow reading BIGINT as .NET int, regardless of the value - you need an explicit cast exactly like in C# (see the code sample below).\r\n\r\n```c#\r\nusing var conn = new SqlConnection(""..."");\r\nconn.Open();\r\nusing (var cmd1 = new SqlCommand(""CREATE TABLE data (id BIGINT); INSERT INTO data  (id) VALUES (1)"", conn))\r\n    cmd1.ExecuteNonQuery();\r\nusing var cmd = new SqlCommand(""SELECT id FROM data"", conn);\r\nusing var reader = cmd.ExecuteReader();\r\nreader.Read();\r\nConsole.WriteLine(reader.GetInt32(0));   // throws System.InvalidCastException: Unable to cast object of type \'System.Int64\' to type \'System.Int32\'.\r\n```\r\n\r\nSo to summarize:\r\n* When DATALENGTH returns a long (i.e. for varbinary(max)), the cast is always necessary.\r\n* When DATALENGTH returns an int (i.e. for any other varbinary other than max), we shouldn\'t have a cast (because it\'s unnecessary). If we don\'t know the size facet in the type mapping (i.e. we\'re dealing with ParameterExpression and not ColumnExpression), we should probably be safe and have the cast.\r\n* When the actual array length is bigger than int.MaxValue, the query should fail (rather than truncate silently truncation). I\'ve tested and CAST behaves this way, so we\'re fine:\r\n\r\n```sql\r\nCREATE TABLE data (id BIGINT);\r\nINSERT INTO data (id) VALUES (2147483648);\r\nSELECT CAST(id AS int) FROM data; -- Arithmetic overflow error converting expression to data type int.\r\n```\r\n\r\n'"
19189,355118992,"b""> In any case the code is written as requested - how should I make a test case for the varbinary(n)? I can use the BuiltInDataTypes to do this, or add a column to Gears -- there seemed to be a favor towards Gears but I didn't want to start adding columns willy nilly.\r\n\r\nSure, we could have a Banner5 column next to Banner, of type varbinary(5). Any objections @maumar?"""
19189,355119053,"b'I think our general practice is to have subclasses extract SqlExpressionFactory out of the constructor dependencies if they needed it. But it may make sense to just expose this as a readonly property (we should avoid fields in this case), @smitpatel?'"
19189,355119088,"b""Unless I'm mistaken there's no need to have `int?`, just use `int`. Same in other code you added."""
19189,355119109,"b""I'd just inline it, no real value in having this."""
19189,355119368,"b'This is still checking for ColumnExpression, although we should support any expression (e.g. ParameterExpression, as previously discussed).'"
19189,355119469,b'Rename to Byte_array_filter_by_length_literal'
19189,355132037,b'protected property with get only'
19189,355132908,"b'Good catch, thank you!'"
19189,355133498,"b""DATALENGTH can return null values on null rows. I didn't run this through any tests but I assumed that the correct return type for the function would be an int? \r\n\r\n```sql\r\ncreate table #nullbinary(bin varbinary(max) null)\r\ninsert into #nullbinary(bin) values (0x1), (null)\r\nselect datalength(bin) from #nullbinary\r\n```"""
19189,355134121,"b'Yeah, that\'s the standard SQL behavior for functions (and everything else) around nulls. But the ""null semantics"" around SQL expressions is handled elsewhere and in a special way - you don\'t have to account for it in your method translator. As an example, see [the translation for string.Length](https://github.com/aspnet/EntityFrameworkCore/blob/e337283acd5e709b31730fd9eb7ff9857dcb7366/src/EFCore.SqlServer/Query/Internal/SqlServerStringMemberTranslator.cs#L26), which also returns null if given a null string.'"
19189,355135382,"b""Gotcha, okay. I'm not used to things just _being taken care of later_ \xf0\x9f\x98\x84 \r\nThank you! Lots to learn."""
19189,355136561,"b""@roji I need a quick sanity check - what is the expected output of passing in a parameter? I have a test that runs `byteArrayParam.Length` as a parameter, and it works okay. In the previous discussion we'd determined that the ParameterExpression will be evaluated before this, but there seemed to be some dangling work on compiled queries..do I need to evaluate the SqlParameter as a byte[] and then extract the length from that?"""
19189,355136931,"b""That test currently passes because you're using a non-compiled query; as @smitpatel explained earlier, the ParameterExtractor evaluates the Length client-side, which is why you don't see the length function in the right-hand side in your SQL, on the parameter (only on the left-hand side on the column).\r\n\r\nHowever, if we tried to run the same thing as a compiled query (multiple times), a failure would occur."""
19189,355221510,"b""I'd written a comment detailing how the translation works on compiled queries, forgetting I'd made the changes necessary for it to work and (24 hours later..) couldn't get it to fail...ignore that one.\r\n\r\nI've removed the check from ColumnExpr and it seems like everything is working well."""
19189,355221670,"b""This isn't resolved yet."""
19189,355221725,"b""Am I missing something? You're still checking for ColumnExpression..."""
19189,355222810,"b'Sorry I jumped the gun and resolved before I committed these. I actually had an issue with this as well - this failed an ApiConsistency test that expected this (as a property) to be virtual, so it will succeed as `        protected virtual ISqlExpressionFactory SqlExpressionFactory { get; }\r\n`. Is that acceptable?'"
19189,355222846,b'Yep'
19189,355373055,"b'If visitedExpression is null, we need to return null immediately; as it is you construct a function call over it.'"
19189,355376653,"b""I think we need to apply the Convert to parameters as well, depending on the type they implicitly get. If SqlClient sends a byte[] as varbinary(max) by default (which I'd imagine it does), then DATALENGTH on that would again return bigint which needs to be cast. See https://github.com/aspnet/EntityFrameworkCore/pull/19189#discussion_r355118851.\r\n\r\nIdeally we'd add a test with a compiled query on GearsOfWar to exercise this."""
19189,355377805,b'Still checking for ColumnExpression here'
19189,355524185,"b""From what I'm observing it sends `varbinary(8000)`, but for byte arrays exceeding that, it sends `varbinary(max)`.\r\n\r\nDoes that seem too arbitrary to cast against? It might be worth just _always_ casting parameters.\r\nRelevant code:\r\n```cs\r\nvar query = EF.CompileQuery(\r\n    (GearsOfWarContext context, byte[] byteParam)\r\n        => context.Squads.Where(w => w.Banner.Length == byteParam.Length).Count());\r\n\r\nusing var context = CreateContext();\r\nvar byteQueryParam = Enumerable.Range(0, 9001).Select(s => (byte)(s % byte.MaxValue)).ToArray();\r\n```"""
19189,355569507,"b""Yeah, it doesn't seem like a good idea to embed arbitrary magic limits like this in our code, plus there's probably no actual drawback to having the extra cast except for heavier SQL. In addition, we currently lack the infrastructure to vary the SQL produced based on something like a parameter's byte array size. So yeah, for parameters let's just always have the cast."""
19189,355596702,"b'Add Cast if typeMapping says `varbinary(max)`. Based on value being sent to parameter, typeMapping reduces the size from max to limited size. It is fine if there is cast in such cases.'"
19189,355622184,b'@roji sounds good!'
19189,355668664,b'Align with Sqlite implementation by putting it on if block with pattern match on SqlExpression.'
19189,355668955,b'The return type of this would be long for varbinary(max).'
19189,355670146,b'indent'
19189,355670240,b'?'
19189,355670550,"b'Not sure how that came about - sorry, and thanks. Removing'"
19189,355670595,b'verify SQL for 3rd test too.'
19189,355696257,"b""I've got this implemented in my next set of commits. If I leave one of the rows null, and then do something like `Where(w => w.Banner5.Length == 0)`, it'll throw an NRE on an `AssertQuery` because it tries to replicate the query with in-mem data, and consequently does `null.Length` (QueryAsserter.cs#91)\r\nI can fix it with a null check, or leaving all columns populated with data (as I have it now). Any recommendations?"""
19189,355727638,"b'Should be resolved now - you were talking about the compiled query, yeah?'"
19189,355735211,"b'I think we should run this twice (with a different parameter). The point here is to guarantee that the length is ~evaluated~ not evaluated and cached from the first time, and ~reused~ not reused the second time.'"
19189,355736197,"b""Seems to me that if `base.Visit(unaryExpression.Operand)` returned null we really do want to just return null right away, no? There's no need to go ahead and call base.VisitUnary below, which will revisit. So I'd move the check inside the condition block.\r\n\r\nAlso, the variable name sqlExpression should something like operandExpression (or just operand, sqlExpression is too general). Same for Sqlite below."""
19189,357152858,"b'As above, if visiting the operand yields null we should return null immediately'"
19189,357171069,"b""According to @smitpatel's comment (https://github.com/aspnet/EntityFrameworkCore/pull/19189#discussion_r355596702), we should be checking `varbinary(max)` also in the parameter case. So there's basically no need for you to check that the operand is of any specific type (column, parameter): as long as it's not null, check with GetProviderType and produce with our without the cast accordingly."""
19189,357212804,"b""That was how I'd had it for SqlServerSqlTr.., but from a [comment](https://github.com/aspnet/EntityFrameworkCore/pull/19189#discussion_r355668664) from @smitpatel I was asked to make it match by dropping it in the `if` block with a pattern match. \r\n\r\nIs there any merit to letting it revisit the full expression as opposed to the `Operand` in the event that there will be further examination of the full Expression in `RelationalSqlSqlTranslating`? """
19189,357345654,b'If operand translates to null then we cannot translate further (neither here nor in base) so it would be better to short-circuit as @roji  mentioned. Merit of doing so is avoid visiting operand twice.'
19189,357352865,b'Does AssertSql cover the verification that we are caching it?'
19189,357494791,"b'I can\'t get the provider type of a compiled parameter (or, at least, at this point the `expr.TypeMapping`  is null for **compiled** SqlParameterExpressions), so I\'m going to have to at least cast it every time it **is** a parameter (like we discussed above, since byte[] SqlParameters can be either varbinary(8000) or varbinary(max). Something like - `                var isBinaryMaxDataType = GetProviderType(sqlExpression) == ""varbinary(max)"" || sqlExpression is SqlParameterExpression;\r\n`'"
19189,357520176,"b""That seems correct set of conditions. In case of parameter there won't be typeMapping. It's accurate to assume it would be `varbinary(max)` since default mapping would be assigned during construction of sql tree."""
19189,357601778,"b""Apologies, I mis-wrote. The idea is to execute the compiled query twice, with different array parameters, to make sure that this scenario doesn't fail (because of caching of the parameter length from the first time to the second). I don't think AssertSql matters much for that. Does that make sense?"""
19189,357737841,"b'If in AssertSql, we are passing the byte[] as parameter in SQL, then it is going to work with different value of parameter so scenario is already verified.\r\nI will leave up to you, whatever you decide is fine by me.'"
19189,357760370,"b'This is a fairly common scenario... We usually provide another version of the LINQ query for in-memory evaluation, where we have to have the extra null checks. See [Byte_array_contains_parameter](https://github.com/aspnet/EntityFrameworkCore/blob/29de3d606a703d97fb9f269ce4f5fff3e151957a/test/EFCore.Specification.Tests/Query/GearsOfWarQueryTestBase.cs#L7327) for an example.'"
19189,357761564,"b'I see what you mean now, yes - the AssertSql is sufficient. Thanks.'"
19189,358936520,b'@maumar - Do you prefer Maybe pattern here or this is fine?'
19189,358939546,"b'nit: can be combined with the conditional operator below:\r\n\r\n```suggestion\r\nreturn base.Visit(unaryExpression.Operand) is SqlExpression operandExpression\r\n    ? SqlExpressionFactory.Function(""length"", new[] { sqlExpression }, typeof(int))\r\n    : null;\r\n```'"
19189,358960592,"b""can't think of why I didn't combine them, good find, thanks! Committed from the suggestion so hopefully that works out okay \xf0\x9f\xa4\x94 """
19185,354505491,b'I would avoid this. Let the order bys be as is and apply reverse operator on top of it. Translation pipeline will take care of it.'
19185,354506115,b'Process reverse should apply `Reverse` operation on `NavigationExpansionExpression.Source` and leave rest of the structure as is.'
19185,359170422,"b'Check in TranslateReverse method if there are any ordering, if no ordering then just return null. It will print out client evaluation failure message automatically. That would be more useful for now, till we add customized exception through whole infra.'"
19185,359170623,"b'With update to TranslateReverse method, you should be able to use AssertTranslationFailed method here.'"
19185,359170795,"b'Skip inmemory with message ""Issue#17386"" https://github.com/aspnet/EntityFrameworkCore/issues/17386'"
19185,359451292,b'extract selectExpression in a variable.'
19185,359451843,b'We always use braces around statement for if/else even if it is one line.\r\ne.g.\r\n```C#\r\nif (condition)\r\n{\r\n    return null;\r\n}\r\n\r\nReverseOrderings();\r\nreturn source;\r\n```'
19185,359452221,b'Same update required as in cosmos.'
19185,359463369,b'Fixed. Should I rebase and maybe squash my commits?'
19357,359581466,"b'add more tests: orderby().thenby().reverse(), orderby().orderby().reverse()'"
19357,359582701,b'Added #19356 '
18833,359969214,"b""@smitpatel I've thought about this a bit, and I want to be sure I understand what we want to do here...\r\n\r\nIn the owned entity scenario above, LeafAAddress and LeafBAddress have the same CLR type (OwnedAddress) but are different entity types (as they're owned by different entity types), *not* within the same type hierarchy. Each could also define its own shadow properties, in which case things get especially complicated: we can still project nulls for missing properties on each side (just like with the inheritance scenario), but we don't have a common ancestor to be returned by the EntityProjectionExpression (and shaper). We could implement #16215 (and also find a solution for EntityProjectionExpression to project more than one type?), but that seems like a lot of complexity and work.\r\n\r\nWe could also support set operations over types only if they happen to have exactly the same properties - or even if one type's property list is a subset of the other's. That seems like it would be relatively easy - the the EntityProjectionExpression and shaper would return the entity type with the property superset.\r\n\r\nNote that if do any of the above, this has nothing really to do with owned entities: it would amount to supporting set operations over arbitrary/disconnected types which happen to have the same properties. For example, one could do a union over A and B although they're not in the same hierarchy and not owned or anything (the CLR types just need to implement the same interface). This is not necessarily a bad thing, just more than the original inheritance work I originally thought we'd do here.\r\n\r\nWhat do you think?"""
18833,359972800,"b""Actually, there's an additional difficulty... In the case of inheritance, the shaper knows which entity type to materialize because there's a discriminator; but in the non-inheritance scenario above it wouldn't have anything to go on.\r\n\r\nSo unless I'm mistaken, the only thing we can do, is to allow set operations over different types that are either in the same hierarchy, or which share the same CLR type and have the exact same list of properties. Does that make sense?"""
19366,360132858,b'When is navigation not a `Navigation` and is null the correct return value?'
19366,360134916,b'Is it valid to return null from a non-debug build? Should this entire check only happen for debug builds? Likewise elsewhere.'
19366,360137300,"b""It's valid and correct if the Builder is null (meaning the previous convention removed the navigation). The check is non-debug as a safeguard for bugs in the conventions that don't properly terminate the execution in some non-tested case. As we get more test coverage these will be converted to debug-only checks."""
19366,360140225,b'For `ClrCollectionAccessorFactoryTest` that uses a custom `IClrCollectionAccessor` implementation. As we move to default interface implementations this will be fixed.'
19366,360142256,"b'Sounds good, but will we remember to fix it?'"
19366,360142851,"b""It has to be rewritten as part of that process, so there's nothing extra to remember"""
19366,360185816,b'parameters with is prefix?'
19366,360185880,b'?'
19366,360186432,"b""There's no Fluent API yet"""
19376,360618512,"b'I think this is a bit too strict, consider using `_openedCount > 0` instead'"
19376,360618566,b'What would setting null connection or connectionstring at runtime imply?'
19376,360618623,b'This is public API. Consider obsoleting it instead'
19376,360618760,b'Do we really need to keep these comments around?'
19376,360619317,b'Also reset `_openedInternally` in `Dispose`'
19376,360657886,"b""So we're saying it's okay to replace the connection if it's open, but not if we opened it and haven't closed it yet. Which is essentially when the connection is in use? If so, I agree this makese sense."""
19376,360658061,"b""Two reasons I did this:\r\n* Symmetry. It's valid to create with a null connection and connection string, which makes this a valid state for the object. So allowing return to that state later makes sense.\r\n* Building on this, I imagined a system that doesn't know where it is going to connect until the last minute. It then sets the connection/connection string, does it's thing, and then can set the state back to how it was found rather than leaving what may now be a disposed connection or invalid connection string associated with the context."""
19376,360658094,"b""Don't you think that, for 5, a clean break here is preferable? How likely is it that non-provider code is accessing this?"""
19376,360661530,"b'In case obsoleting first turns out to be necessary, how about obsoleting this in an upcoming 3.1.x release and then removing it with 5.0.0. Up to 10 months of compiler warnings should be fair enough to customers to implement their own synchronization primitive if needed.'"
19376,360664152,"b'I just think we should minimize potential breaking changes whenever we can, even if the break is minimal as they tend to add up.'"
19376,360664465,"b""@AndriySvyryd Who replaced Andriy and replaced him with this new break-adverse version? \xf0\x9f\x98\x89 \r\n\r\nI'll obsolete. You are correct.\r\n\r\n@lauxjpn That's not a bad idea, but II'm not sure we will get permission to patch for this."""
19376,360666530,"b""@ajcvickers You are probably right. I have heard stories about the concerns of the .NET Core team regarding patches. This one is not going to make it because projects that have *warnings as errors* enabled would suddenly generate compiler errors in a patch release that shouldn't introduce breaking changes. (Though I did not find anything specific about this concrete case in the guidelines.)"""
19393,361021747,b'nit: Assert.Collection'
19395,361044452,b'Just a space here. No equals'
19395,361044765,b'No semicolon. These aren\xe2\x80\x99t actually SQL statements\xe2\x80\x94just special commands handled by the sqlite3.exe tool'
19395,361044856,b'Needs the parameter prefix character too'
19395,361045110,b'Should be `.param set @p0 \xe2\x80\x98London\xe2\x80\x99`'
19395,361200286,"b'In all the cases I tested the parameter name was already prefixed with ""@"". What are the cases where this is not true?'"
19321,357917743,"b""Changed nullability here - if outputDir is null it seems like ReverseEngineerScaffolder.CheckOutputFiles would throw (Path.Combine doesn't accept nulls)."""
19321,357917809,"b'As far as I can tell these are the three mandatory options. We could also make these non-nullable in ModelCodeGenerationOptions, although it may be better to keep that class as a simple bag of settings and keep verification here.'"
19321,357917842,"b""Changed nullability here, as modelNamespace is used if contextNamespace isn't specified."""
19321,357917913,b'This code actually handled cases of DatabaseColumn with no Table - does that actually make sense in a real scenario? For now this PR makes DatabaseColumn.Table completely non-nullable so the code here was simplified.'
19321,357917983,"b""I think this should be made non-nullable, no? It's not like we can do anything with a column whose type is unknown..."""
19321,357918025,b'Not sure about the nullability of this (also for other constraints/index).'
19321,357918140,"b""DisplayName below checks that Table isn't null - we can remove that right?"""
19321,357918183,"b""\r\n\r\nDisplayName below checks that Table isn't null - we can remove that right?\r\n"""
19321,357921415,"b""Thinking about this again, we may want to simply leave the names of constraints and index nullable, for databases which don't support them? Let me know what you think."""
19321,357959679,b'Better err on the nullable side'
19321,360981672,b'There was code somewhere in the tests to fix up back references. It can be removed now.'
19321,360981957,b'Check.NotNull?'
19321,360982694,"b""There was one weird case in the old SQL Server code that hit this. I can't remember the details. I'm fine changing this and seeing if anyone reports an issue."""
19321,360983307,"b'Make it non-nullable. SQLite can return an empty string, but never null.'"
19321,360983381,"b""(we'd map it to BLOB in that case)"""
19321,361206043,b'Removed this'
19321,361206245,b'Removed this'
19321,361209836,"b""I think you're talking about FakeScaffoldingModelFactory.Create - removed that method. We can maybe kill FakeScaffoldingModelFactory altogether (it doesn't do anything anymore), but leaving it in for now."""
19321,361210190,"b""To be super pedantic about it, if options.ContextName is null, it's problematic for GenerateModel to throw ArgumentNullException, since the argument itself isn't null but rather some property on it :)\r\n\r\nWill leave like this for now, but am fine changing if anyone cares enough about it."""
19321,361211042,"b'Looked at this again. Before my changes, name is ""nullable"" (has [CanBeNull]) on DatabaseForeignKey, DatabasePrimaryKey, but not on DatabaseIndex and DatabaseUniqueConstraint.\r\n\r\nAs @bricelam [suggested](https://github.com/aspnet/EntityFrameworkCore/pull/19321#discussion_r360983307), am going to leave all these non-nullable with the idea that providers can set these to empty string if they don\'t support a name. Otherwise we\'d have two options - both null and empty string - which doesn\'t seem to make much sense... We can change this if anyone has any strong feelings about it.'"
19321,361212504,"b'Actually ended up bringing the fixup back, since we in our tests we create ""incorrect"" models, which this code rectifies; for example, in Column_ordinal_annotation we create a new DatabaseTable, but the columns inserted into it refer back to the test suite\'s global Table instance (not the same). We could go over tests and fix this, but it would make test code more cumbersome as we wouldn\'t be able to use object initializers as now.\r\n\r\nIf we this is worth it I\'ll do it, for now will merge with the fixup code as before.'"
19395,361256213,b'All good then\xe2\x80\x94just got confused by the bad assert.'
19408,361553327,b'@ajcvickers thinks it would be a good use:\r\n```csharp\r\nforeach (var value in valuesList [1 ..])\r\n```\r\nOne less `if`'
19417,361820675,b'Fragile. Are we trying to convert `a.Property == b.Property` to use equals from comparer here?'
19417,361820731,"b'Essentially, yes. Made some updates. Probably still doing it wrong.'"
19417,361820886,"b'We should not be using visitor because if there are more than one property on one side then it may pick the first or last one. e.g. `a + b = c`. So ideally we should bubble it up.\r\nIf I understand correctly then how RelationalTypeMapping is essential in SQL tree for relational, Comparers are necessary for InMemory since the store type could be anything.\r\n\r\nHey, in-memory provider! Just a file a new issue. \xf0\x9f\x98\x80 Can live in backlog.'"
19417,361820908,b'You can also intercept `newLeft` or `newRight` and look for `TryReadValue` method to get `IProperty` out. Either way is fine.'
19417,361820965,b'\xf0\x9f\x8e\x89 '
19417,361821002,b'Could make this extension method for InMemory provider.'
19417,361821025,"b""I was thinking that we don't necessarily need to support this, since it doesn't work in LINQ to Objects. Anyway, I don't feel strongly. We can discuss."""
19417,361821352,b'I will play around with it once its merged.'
19445,362270899,b'We really only need the unique indexes'
19445,362276711,b'@AndriySvyryd Updated to only do this for unique indexes.'
19440,362284090,"b""Move the check to `GetIndexerPropertyInfo` and add `FindIndexerPropertyInfo` that doesn't throw."""
19440,362284339,b'```suggestion\r\n        ///     an indexer on the entity class.\r\n```'
19440,362284753,b'```suggestion\r\n                && propertyInfo == property.DeclaringType.GetIndexerPropertyInfo();\r\n```'
19440,362284821,"b""If I move check to GetIndexerPropertyInfo then I don't have information about property name. Is that fine?"""
19440,362285008,b'```suggestion\r\n                if (memberInfo != GetIndexerPropertyInfo())\r\n```'
19440,362285035,b'same as above'
19440,362285050,b'ditto'
19440,362285263,"b""Use a sentinel value or a bool field to indicate that `_indexerPropertyInfo` wasn't initialized as opposed to no indexer on the type."""
19440,362285382,"b""This method isn't even used anywhere, just remove it."""
19440,362285464,b'Expression body + formatting.'
19440,362286531,b'Discussed in person decided to keep it here only for better exception message.'
19440,362287836,b'```suggestion\r\n                var indexerPropertyInfo = GetRuntimeProperties().Values.FirstOrDefault(PropertyInfoExtensions.IsIndexerProperty);\r\n```'
19440,362295784,b'Updated in 3rd PR in this series.'
19377,362077021,b'Tests for #19059 #19060 \r\nFixing them in a separate PR.'
19377,362111136,b'extra indent'
19377,362111734,b'VS auto-format did it. I believe this is one point where these is conflict between settings in IDEs.'
19449,362297762,b'Could move into the block below to avoid one check'
19436,362128255,b'This is somewhat fuzzy match since many collection types define ToArray method on it which is not on any interface (like `ICollection<T>.Count`). It could match a `ToArray` method defined on a user defined collection type which may or may not be correct always. But doing this helps more scenarios than hurt one particular scenario.'
19436,362297703,b'consider DRYing along with core TypeExtensions.IsQueryableType'
19436,362297831,"b""I'm not a fan of ducktyping in here - we could just handle well knows types, like ICollection, and throws for anything else. Thoughts? @roji @AndriySvyryd @ajcvickers """
19436,362300256,b'If this gets used before will do otherwise very marginal value.'
19436,362300341,"b""Removed. I believe it provides enough value considering correct match would be much higher than incorrect match. And work-around if this does something which is not expected is easy enough.\r\n\r\nBut I don't care enough to fight it."""
19417,362903049,b'\xf0\x9f\x8e\x89 '
19270,358165734,"b'Ironically Cosmos appears to have a C#-like coalescing operator, which would be better represented as an SqlBinaryExpression. But if we implement translating to that we should probably do it in a separate PR anyway.\r\n\r\n/cc @AndriySvyryd '"
19270,358167858,"b'Already noted here https://github.com/aspnet/EntityFrameworkCore/issues/17722#issuecomment-564312146\r\n\r\nCosmos `??` operator is subtly different from C# `??` operator. In Cosmos, it is about existence of key in given dictionary. So `c[""missingKey""] ?? ""42""` returns `42` if c does not have missingKey. But if c has the key with null value, it will return null value. '"
19270,358203589,b'Good point.'
19450,362656298,"b""This won't work on VB. You need something like\r\n```C#\r\nvar declaringType = methodInfo.DeclaringType;\r\nif (declaringType is null)\r\n{\r\n    return false;\r\n}\r\n\r\nvar indexerProperty = declaringType.FindIndexerProperty();\r\nif (indexerProperty is null)\r\n{\r\n    return false;\r\n}\r\n\r\nreturn methodInfo == indexerProperty.GetMethod || methodInfo == indexerProperty.SetMethod;\r\n```\r\nWith\r\n```C#\r\nprivate static PropertyInfo FindIndexerProperty(this Type type)\r\n{\r\n    var defaultPropertyAttribute = type.GetCustomAttributes<DefaultMemberAttribute>().FirstOrDefault();\r\n    return defaultPropertyAttribute == null\r\n        ? null\r\n        : type.GetRuntimeProperties().FirstOrDefault(pi => pi.Name == defaultPropertyAttribute.MemberName && pi.IsIndexerProperty());\r\n}\r\n```\r\n\r\nAnd also fix `FindIndexerPropertyInfo` in a similar way."""
19450,362996739,"b""So what's the perf penalty for this?"""
19450,362997026,b'Do we need this?'
19450,362998193,b'The largest penalty was for GetParameters().\r\nSqlServer.FunctionalTests\r\nThis version 2.9286 mins\r\nget_item version 2.3472 mins\r\nget_item short-circuit with above 3.0012 mins\r\nWith GetParmeters & above version - 17.7040 mins'
19450,362998241,"b""(I need to update doc for it).\r\nMay be if you don't have model and has to check. Could be YAGNI though. Your call."""
19450,362998483,b'Does removing `methodInfo.DeclaringType is Type declaringType` make any difference?'
19450,362998522,b'YAGNI'
19450,362999087,"b""We should add a test that calls an anonymous function in the projection if we don't have one already"""
19450,362999325,b'how to call anonymous functions? (what are the anonymous functions? :trollface: '
19450,363000100,b'dbSet.Select(e => (x => x)(e))'
19450,363006695,b'> Does removing methodInfo.DeclaringType is Type declaringType make any difference?\r\n\r\nnegligible.'
19450,363006843,"b'![image](https://user-images.githubusercontent.com/1528107/71757777-68924f80-2e4d-11ea-9e6a-f8998094d082.png)\r\n\r\nGives error ""Method name expected""\r\n'"
19450,363006924,b'Filed https://github.com/aspnet/EntityFrameworkCore/issues/19480'
19450,363007003,"b'Ok, then we can remove the `methodInfo.DeclaringType is Type declaringType` line'"
19472,362999400,b'Add a paragraph to these docs briefly explaining indexed properties'
19472,362999675,b'Can you suggest a para? '
19472,362999804,b'You can call the same overload in both cases'
19472,363001243,b'Indexed properties are stored in the entity using [an indexer](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/) supplying the provided property name.'
19472,363009015,b'How to add hyper link in XML docs?'
19472,363010121,b'Dunno. @bricelam ?'
19478,363027354,b'Is it OK if we start being a bit more null-strict (thinking ahead about NRT)? Is there any downside from keeping this [NotNull] and simply passing an empty array/list here?'
19478,363044688,"b""I don't have preference. What are the guidelines around that overall? @AndriySvyryd @bricelam @ajcvickers \r\nThe sole reason of putting empty list in ctor when null is so that you can enumerate over the partitions inside any visitor without null check. Not sure if that is the norm, that whenever some property is a list, it has to be initialized to empty rather than null."""
19478,363048026,b'We should always use `Array.Empty<SqlExpression>()` to save the allocation.'
19478,363048101,"b""It's not super important, but IMHO accepting null kinda suggests (or at least opens the question of) a different behavior for null and for an empty list, which isn't the case - so it seems better to not allow null. A possible exception could be if we want to make the parameter optional, in which case we have to make it nullable (but that's not the case here)."""
19478,363056885,"b'not accepting null requires consumer of this API to pass, `Array.Empty<Expression>()`, It is subjective that accepting null suggests different behavior. I would argue on the side that API like this, accepting null is more beneficial to consumer end because it reduces one decision point for consumer. The knowledge of ""a required list argument"" could take ""empty list"" may not be widespread. It is super easy to get confused if I don\'t have partitions what should I pass here since it requires non-null list. While this being a provider API may have lesser of impact in that form since providers are supposed to know a lot more than customers. We should think carefully for customers and use same convention here too for consistency.'"
19478,363077864,"b""> not accepting null requires consumer of this API to pass, Array.Empty<Expression>()\r\n\r\nYeah, I see that as an advantage. The main point for me, is that an API that accepts nulls allows users to accidentally pass in an uninitialized value, unintentionally. Requiring non-null forces a value to be passed in, and so users have to think about it. If we really think that no partitions is a common scenario and don't want to bother users with it (not sure that's true), we can have another constructor that doesn't accept that parameter.\r\n\r\nAnother way to look at this: if we were discussing a value type (e.g. an int), would we expose a nullable int parameter and internally coalesce to 0? I don't think so - at least I'm not aware of this being done anywhere - so I think  we tend to do it with reference types simply because there hasn't really been a real non-nullable option up to now.\r\n\r\n> I would argue on the side that API like this, accepting null is more beneficial to consumer end because it reduces one decision point for consumer.\r\n\r\nOdd, I see it exactly the other way around: the API as it is in the PR offers two options (null or empty list), whereas I'm proposing to offer only one (empty list). That's one less decision point for users, who currently need to consult docs to understand whether null does something different from empty list.\r\n\r\nHaving said all that, I agree that this is a provider-facing API and so the decision here is much less important than elsewhere. It could be good to reach a consensus about it for general EF API design though."""
19478,363111660,"b""The sole purpose of putting empty list is to make it easy to enumerate over partition when visiting children so that not every visitor need to check for null before enumerating. So your whole argument with int is invalid.\r\n\r\nAs for decision point, from a user perspective, if I don't have partitions, I would just pass null since API accept null. Figuring out that I need to pass empty list since API does not accept null is something which requires reading docs. Not the other way around. So your point about that is also pointless."""
19478,363117269,"b'> The sole purpose of putting empty list is to make it easy to enumerate over partition when visiting children so that not every visitor need to check for null before enumerating. So your whole argument with int is invalid.\r\n\r\nI don\'t agree. We seem to be in agreement in any case that the Partitions *property* should be non-nullable - that\'s not what\'s being discussed; this is an API design question with regard to the constructor\'s parameter only. In that context, just as we don\'t usually expose nullable ints and coalesce internally to 0 (or some other default value), we should in general avoid accepting nulls for reference types and coalescing internally to empty strings (for strings), empty lists (for lists), etc.\r\n\r\n> if I don\'t have partitions, I would just pass null since API accept null. Figuring out that I need to pass empty list since API does not accept null is something which requires reading docs. Not the other way around.\r\n\r\nI don\'t know, if you want 0 partitions, it makes more sense to me to pass in a list with 0 elements. But I guess we won\'t convince each other.\r\n\r\nWhat\'s more important for me is that we avoid using words such as ""invalid"" or ""pointless"" when referring to the other person\'s arguments/views, it makes for a less agreeable conversation. Beyond that if you have strong feelings about this we can drop it.'"
19485,363049983,b'navigation -> skipNavigation?'
19485,363050264,b'null check for declaringEntityType?'
19485,363050426,b'_foreignKeyConfigurationSource could be null.'
19485,363133330,"b'Yes, `Max` is one of those extension methods that can be called on `null`'"
19346,359280669,b'nit: indentation'
19346,359281979,"b""This is weird, because Update* is usually for immutable expression types (returning a copy), whereas here it mutates. If we want InMemoryQueryExpression to continue being mutable, I think it's better to leave ServerQueryExpression directly mutatable (public setter): there's no added value of the Update* mutator over the setter, and it's a bit confusing."""
19346,359284118,"b""Just a question for my understanding: why aren't we handling this in the standard way of having VisitChildren on ShapedQueryExpression? I can see an expression being thrown there with an explicit message but am not sure why. The way things are currently, we have to remember to handle ShapedQueryExpression in all our visitors etc."""
19346,359284306,b'nit: split condition to multiple lines (or Andriy will do it for you :))'
19346,359285070,b'nit: remove blank line which was there before'
19346,359286037,b'This should stay a switch expression... all the expressions are completely simple.'
19346,359287316,"b'Not sure, but we could also just call this Update, i.e. have multiple Update overloads with the parameter list determining things. Just like multiple overloaded constructors.'"
19346,359289443,"b""Any reason not to expose a single public constructor accepting all three parameters? Right now it seems like the only way to get an instance with ResultCardinality != Enumerable is via UpdateResultCardinality, which is odd (expression don't usually seem to restrict these things in their constructors)."""
19346,359445462,b'Naming can be discussed in API review.'
19346,359445698,b'Refer to commit description.'
19346,359445981,b'First case is multi-line.'
19346,359446446,"b""UpdateShaper is just sugar so that we don't have to pass queryExpression from call site all the time."""
19346,359446721,b'Update method in expressions does not take non-expression kind parameters.'
19346,359448915,b'This is actually correct indentation.'
19346,359449549,b'I will leave up to code clean up to determine if there should be a blank line here or not.'
19346,359453656,"b'Ah, thanks - interesting.'"
19346,359455778,"b""Didn't we have this discussion already (or similar)? We have multi-line in conditional cases as well, which are also expressions (even nested multi-line)..."""
19346,359455983,"b'Yep, only question is about naming it Update or UpdateShaper. But no strong feelings here.'"
19346,359456571,b'Not to mention the ugliness of having to have a pragma around this...'
19346,359457043,"b""But it seems UpdateResultCardinality can :trollface:\r\n\r\nAnyway my point isn't about Update, but about allowing everything to be set in the constructor, like (I think) any other kind of expression. Not critical though, I guess."""
19346,359458983,"b""This isn't only about naming - if the expression type is mutable (which it is), then the property should be mutatable in the regular way - via a setter, and not a method. But naming-wise yeah, a method called Update on an expression type is expected to return a modified copy rather than mutating."""
19346,359463817,"b""The expression type is mutable at the moment, but it may not be in future. With this PR, we don't allow mutating any of our custom expression via properties."""
19346,359465671,"b""If the expression type becomes immutable in the future, the signature of UpdateServerQueryExpression would have to change (since it will have to return a new instance), which would be a breaking change anyway...\r\n\r\nI think that types which remain mutable should continue to be mutatable in the normal .NET way - via setters... If we change a type from mutable to immutable we can make the API change at that point (since it's again a breaking change in any case)."""
19346,359504053,b'It does not look simple to me. I am not changing it.'
19346,359539043,b'We can discuss this in API review. All query expressions right now do not have public setters. So keeping it this way.'
19346,359621819,b'How about if I compromise on the switch expression and you compromise on the setter for mutable expressions? :)'
19346,359622779,b'No.'
19346,359623830,"b""@smitpatel So other expressions are mutable through similar methods to this? (Similar both in naming and functionality.) If so, then I'm fine with being consistent for now, but I agree with Shay that mutable -> non-mutable needs more design changes than this. So we could file an issue for that and/or an issue to consider using setters if we keep the mutability."""
19346,359624382,"b'I agree with @roji on this one. From my understanding of what we discussed, this is simple enough for expressions.\r\n\r\nIf there is still string disagreement on the team, then we should revisit again with the team.'"
19346,359624684,"b'Only server side query expressions are mutable. They all use public methods and private setters. This name is only in InMemory where there is not specific server form. Methods in relational/Cosmos are more specific to facets. e.g. ApplyPredicate, AddToProjection, ApplyDistinct, ApplyOffset, ApplyOrdering, AppendOrdering.'"
19346,359625287,b'I do not consider this to be simple. The design meeting discussion we had specified guidelines to consider simple to be returning a specific value or calling into one method call. Nesting/Chaining is not something I consider simple.'
19346,359625507,b'Also design meeting decision was not to use newer feature if something is not agreeable.'
19346,359625720,b'I think we should discuss again _with the team_.'
19346,360269576,"b'Just extract the first case to a method, then it becomes simple enough'"
19346,362287931,b'UpdateShaperExpression for consistency'
19346,363400432,"b""I don't think we came to a consensus on this."""
19478,363508366,"b'My initial impression is that we use null to mean ""default"" in many cases and we will likely keep doing that since it would be a major experience change to do otherwise. It also seems reasonable to me that the default in this case is the same as none--i.e. an empty collection.\r\n\r\nThat being said, if we think it would be better to move away from this pattern, or if this is too much of a special case, then we should discuss with the team in a design meeting.'"
19472,363529576,"b'`...using <see href=""https://docs.microsoft.com/dotnet/csharp/programming-guide/indexers/"">an indexer</see> supplying...`'"
19472,363529769,b'https://dotnet.github.io/docfx/spec/triple_slash_comments_spec.html'
19472,363530962,b'Adding it in my next PR.'
19400,362314931,b'We should combine all these method call translators which works on from parts into single class.'
19400,362314969,b'return server type is date.'
19400,362314998,b'return server type is datetime2.'
19400,362315020,b'return server type is datetimeoffset.'
19400,362315029,b'smalldatetime'
19400,362315047,b'time'
19516,364058045,b'Call `IsValidEntityType`'
19516,364058253,b'Check `clrType` is not null'
19516,364058747,"b""`FindEntityType(Type type)` should throw if there's a shared type entity type for the given type"""
19516,364407740,b'Test `FindEntityType` throws'
19478,364420357,"b'Design decision: continue to using null here and elsewhere as a default value, coalescing internally to empty list.'"
19168,354098134,"b'shall we do those optimizations always (i.e. even when relational nulls == true)? We do that currently which is technically wrong, but perhaps for relational nulls all bets are off. Thoughts?'"
19168,354098843,"b'for sql server, should we optimize `CAST(1 AS bit) = CAST(1 AS bit)` to `1 = 1` and `CAST(0 AS bit) = CAST(1 AS bit)` to `0 = 1` everywhere?'"
19168,354099155,"b'disable caching when dealing with constant array, or just parameter?'"
19168,354100312,"b""if we do, we will prune some of the parameters, converting them to constants effectively. It shouldn't explode our cache since its only for bool values, so perhaps it's worth doing. Thoughts?"""
19168,354102839,b'TODO: will clean this up: move _parameterValues to the base visitor and remove this one.'
19168,354103428,"b'we need to run this second time again (before those optimizations were made by 2nd level cache optimizer, where SearchCondition was done earlier). '"
19168,354103808,b'TODO: will remove (or shall we keep the scaffolding? ;) )'
19168,354544103,"b'should we create those using DI, or should it be enough for providers to just override Optimize method? @roji '"
19168,354545013,"b'or perhaps we can add optimize method so that providers can inject their optimizations after our visitor runs, but before FromSqlParameterApplyingExpressionVisitor '"
19168,354560147,b'https://github.com/aspnet/EntityFrameworkCore/issues/10514 <- argument for making null semantics provider specific'
19168,354956286,b'We can move the visitation of Subquery into here no? And so maybe inverse the condition (`inExpression.Subquery != null`) to make it a bit clearer.'
19168,354956763,b'Can remove _isNullable and subqueryNullable from RHS'
19168,354957594,b'nit: extract var outside of parentheses'
19168,354959824,"b""I don't think we should disable caching for constants..."""
19168,355191891,b'`subquery` must be null so maybe just use a null constant.'
19168,355192318,"b'This code seems duplicated between parameter and constant, with only the source changing, maybe collapse them together?'"
19168,355192529,"b""What about the following:\r\n\r\n```c#\r\nvar bla = ctx.Customers.Where(c => new[] { 1, c.Id, 3 }.Contains(2)).ToList();\r\n```\r\n\r\nNot sure exactly how this gets represented in LINQ (constant list containing a non-constant value?), but I think it means we have to actually visit the values to determine nullability as with other expression types. It would also affect things more significantly as the nullable column doesn't get removed from the list."""
19168,355192679,"b'Not sure about this, probably to be seen wrt a column expression inside the values expression.'"
19168,355192865,"b'Maybe we should just use an empty list to indicate an empty list, instead of null? A bit clearer...'"
19168,355193149,"b""_isNullable is always false here, and subqueryNullable isn't relevant, no? Also, _isNullable isn't read and is immediately set to false just below, so this seems like dead code."""
19168,355193358,"b""Do we even need to call Update in this case? inValues hasn't changed (there was no null), subquery must be null..."""
19168,355193571,b'Maybe we should just have two overloads of Update - one for values and one for subquery - just like we have the constructors... That would clean this up a bit.'
19168,355193998,b'Is it OK to leave _isNullable equal to rightNullable when leaving this method?'
19168,355195090,b'Just _boolTypeMapping? A bit clearer.'
19168,355195447,"b'I think we can simplify with XOR, no?\r\n\r\n```c#\r\nreturn _sqlExpressionFactory.Constant(\r\n    sqlConstantOperand.Value == null ^ sqlUnaryExpression.OperatorType == ExpressionType.NotEqual,\r\n    sqlUnaryExpression.TypeMapping);\r\n```\r\n\r\nProbably also below/elsewhere'"
19168,355197642,"b""Is this parameter necessary? Isn't it always the same as sqlUnaryExpression.Operand?"""
19168,355197771,b'Should probably make this protected virtual just in case?'
19168,355198205,"b'To avoid the duplication with left/right, we could have a helper that accepts both, returns a bool saying if one of them null, and also returns the null and the nonNull ones as out variables. Same for IsTrueOrFalse below, etc.'"
19168,355198467,"b""I don't think we can look at SqlParameterExpression right now, since our current command cache looks only at parameter nullability. In other words, we can't currently vary SQL on anything but nullability.\r\n\r\nThis kind of thing was one of the motivations behind #17598, will add a comment there on this."""
19168,355199105,"b""Not sure, but... Here and below we seem to have optimizations that can only run in 2-value logic. Is it worth extracting them out and running them as part of RewriteNullSemantics after we've transitioned from 3- to 2-?"""
19168,355199656,"b'Interesting, that means that in some cases inner join becomes cross join, right? We should maybe do that in VisitInnerJoin.'"
19168,355199804,"b""Is there a reason to call VisitJoinPredicate and not simply VisitSqlBinary? In fact, isn't this required in order to do null semantics on it (which VisitJoinPredicate doesn't do)?"""
19168,355199972,b'Can simplify with XOR?'
19168,355200067,"b'I wonder... we treat null parameters as nullable, but if we treated them as a null *constant* instead, some other optimizations could open up. How about returning an SqlConstantExpression here?'"
19168,355200167,b'Should this also be called after rewriting null semantics?'
19168,355200467,"b'Since the whole method is only interested in binary, I always prefer to inverse the logic and exit early for non-binary, this way we reduce an indentation (easier to read).'"
19168,355200480,b'Probably better to put local functions at the very end.'
19168,355200564,"b""Out of curiosity, do we think it's too complicated for us to do, or that it would degrade the overall perf of the SQL query?"""
19168,355201545,b'We should consider renaming this as it now also does general null optimizations (maybe NullabilityHandlingExpressionVisitor or similar?)'
19168,355214967,"b""We don't translate above yet. It requires representation of array on server side."""
19168,355220552,"b""Am I missing something? Can't the above simply be translated as:\r\n\r\n```c#\r\nSELECT *\r\nFROM Customers\r\nWHERE 2 IN (1, Id, 3)\r\n```"""
19168,355226510,b'It can be. We did not have customer feedback to add it yet and it works only for Contains.'
19168,355657431,b'need to set _isNullable before returning from the function below - simplified and moved the logic inside the if block'
19168,355658829,"b'there could have been null in the values, example 2 and 4 in the comment'"
19168,355667794,"b""c# join follows relational null semantics - we do this to explicitly avoid null semantics rewrites. However, to further complicate things ,if you compare composite keys the comparison behaves like any other c# comparison.\r\nSo: `join null equals null` wouldn't match\r\nbut: `join { null } equals { null }` would"""
19168,355673922,"b""it doesn't matter - VisitJoinPredicate is always called from JOIN, which then again is part of SelectExpression which is always nullable"""
19168,355676733,"b'yeah, i realized that as well'"
19168,355734521,"b'I implemented it initially, but the more I look at it, the less I like it. Feels like opening a can of worms - we have other functions where not all arguments are always used (CaseExpression). Also, select expression has a ton of arguments and it could use ""targeted"" update methods. I\'d rather keep 1 method which always takes all the arguments and don\'t worry/think about which functions need what. Thoughts? @roji @smitpatel '"
19168,355739777,b'I thought we were supposed to put local functions at the end of relevant block. I was wrong ;) - fixed'
19168,355739913,b'fixed case where it was different and removed the argument'
19168,355743588,b'the latter - SQL becomes way too complicated'
19168,355749617,"b""don't have access to it"""
19168,356234899,"b""makes the check for empty more complicated - need to cast to SqlConstantExpression (or we can assume result is always SqlConstant, but providers could change that behavior), then cast result to `List<object>` and then test Count. I can do that but not sure if it's much better."""
19168,356235707,b'added a comment to fix this when/if we support mix of columns and constants'
19168,356245691,"b""I'd rather keep the logic as simple as possible, even when it means some duplication. """
19168,356256951,b'Sounds good'
19168,356262822,"b""i think it's not needed - null semantics rewrite never ends up with top level IsNull/IsNotNull expression, so this optimization would always be a noop. We run the optimizations on IsNull parts of the null semantics rewrite, so they should be in their minimal form already."""
19168,357367230,"b'actually, after giving it some more thought I agree that empty list looks better overall - will change'"
19168,357376218,"b""Current optimizations shouldn't make a difference - all cases where rewrite null semantics does something (i.e. weeds out nulls from the expression) end up with AndAlso or OrElse as a top level node, whereas all the optimizations here are for == and !=. Might be worthwhile in the future if/when we come up with more optimizations"""
19168,357390969,"b'Not sure what you mean. It should only end up as cross join if the join predicate collapses to tautology, which seems fine to me. And we run those optimizations for inner and outer joins both.'"
19168,357618085,"b'Sure, SQL would definitely be nicer!'"
19168,357686523,"b""At the very least, some stuff here looks like it's correct even for 3-value logic (e.g. `!(a == b) -> (a != b)`), no?\r\n\r\nIn any case, if something is incorrect for 3-value logic I guess we shouldn't do it, right?"""
19168,357690584,"b""Just for correctness, what happens if valuesExpression is neither constant nor parameter? I know non-PG database don't support array columns, and even on PG translation will have already transformed the whole thing to something else. But maybe an array with a value converter?\r\n\r\nMaybe it's better to just lift this check to VisitIn and just immediately return from there."""
19168,357691166,"b""OK. Seems pretty simple to me, but we can forget for now if people don't think it's important."""
19168,357694517,"b""As a general rule, if the invariant of the expression is for exactly one of subquery and values to be null, then ideally it shouldn't be possible to create a violating instance. #19229 was about doing that check in runtime, but doing that at compile-time (via the methods we expose is even better). This both creates a safer type, and documents the invariants very nicely.\r\n\r\nAlso, as discussed in design, we don't have to generalize every such decision - it seems OK to do this for InExpression, and if we feel that SelectExpression is a different case, have something different. But let's see what @smitpatel has to say :)"""
19168,357697462,"b""Yeah, that's pretty much what I meant. If OptimizeComparison reduces the expression to true, we have a cross join. The question is if in Visit{Inner,Left}Join we should check for this case and return a CrossJoinExpression, instead of having an inner/left join with a TRUE constant predicate."""
19168,357717743,"b'Oh, this is new to me...! Very strange that C# has relational null semantics in this one, unique place. So then the way you wrote it makes sense...'"
19168,357817971,b'sounds good!'
19168,357844822,"b'will be done in separate PR, if we decide to do it'"
19168,357856156,b'good idea - done'
19168,357870892,"b'we can only optimize INNER JOIN - if we try this with left join, we get incorrect results if the right side has no elements'"
19168,357888811,b'Use same tuple pattern for return type.'
19168,357889403,b'Add a check before calling into RemoveRange if there are additional columns'
19168,357889989,b'Single method.'
19168,357890067,"b'Why is this protected virtual, who is overriding it and where?'"
19168,362986648,b'Could DRY'
19168,362987124,b'Avoid named parameter in this case'
19168,362987235,b'Obsolete if not breaking\r\n@ajcvickers'
19168,362987413,b'bool at the end may be'
19168,362987573,b'Inline'
19168,362988167,b'Why operand need this restoration? It should be value type on top level so it would never add itself. If it is nested which contain condition then nested element will remove it.'
19168,362988263,b'Keep isnullable and CanOptimize together with their counterparts'
19168,362988419,b'Reset IsNullable before every visit. It may be redundant in some cases but can become error prone pretty quick'
19168,362988505,"b""This shouldn't be here"""
19168,362988572,b'reset'
19168,362988617,b'why'
19168,362988738,b'put IsNullable check first. Contains on a list is more expensive'
19168,362989077,b'DRY with other table expression except for update part.\r\nOptionally can also add abstract method Update on TableExpressionBase'
19168,362989253,b'reset canOptimize?'
19168,362989398,b'no remembering of previous IsNullable?'
19168,362989863,b'Casing'
19168,362989908,b'else if'
19168,362989948,b'switch block?\r\n\r\n---\r\nIn reply to: [362989908](https://github.com/aspnet/EntityFrameworkCore/pull/19168#discussion_r362989908) [](ancestors = 362989908)'
19168,362990016,"b'switch block would also give chance to throw for unknown type which are ignored here.\r\n\r\n---\r\nIn reply to: [362989948](https://github.com/aspnet/EntityFrameworkCore/pull/19168#discussion_r362989948) [](ancestors = 362989948,362989908)'"
19168,362990175,b'just project out inner list too rather than accessing casting like this'
19168,362991128,b'Remove comment. Mixing cannot be represented in current SQL tree anyway.'
19168,362991193,b'reset canoptimize'
19168,362991274,b'DRY all set operations'
19168,362991294,b'reset canOptimize'
19168,362991353,b'DRY partial'
19168,362994185,"b'i added the restore everywhere, just in case - will remove'"
19168,362996972,b'Extract a method out which take expression & canoptimize and returns visited expression and nullability'
19168,363001310,b'too many differences'
19168,363004843,b'switch block'
19168,363004980,b'avoid in both foreach'
19168,363005044,b'Avoid '
19168,363005148,"b'It is not our assumption, it is reality lol'"
19168,363005183,b'formatting'
19168,363005315,b'only compute for the columns which were added in this method rather than all previous ones\r\n'
19168,363006440,b'if both nullable only do it once'
19168,363006538,b'do reference equality of expecting it be same (no rewrite)'
19168,363006659,b'cache'
19168,363006672,b'this could give incorrect results'
19168,363007520,"b""there could be null columns set in the result - we don't want that information to propagate to another WhenClause"""
19168,363007575,b'why only constant and not parameter?'
19168,363007643,"b""if null column information is added when visiting else it shouldn't propagate outside the CaseExpression"""
19168,363007779,b'added helper method'
19168,363007897,b'DRY with constant case'
19168,363008012,"b'>sqlUnaryExpression [](start = 36, length = 18)\r\n\r\nCould do sqlUnaryExpression.Update(sqlUnaryOperand.Operand)'"
19168,363008285,b'?'
19168,363009379,b'use same set of if conditions. '
19168,363009384,b'as above block\r\n\r\n---\r\nIn reply to: [363009379](https://github.com/aspnet/EntityFrameworkCore/pull/19168#discussion_r363009379) [](ancestors = 363009379)'
19168,363009561,b'use niladic flag to avoid allocation'
19168,363009608,b'Where is this being used?'
19168,363009643,b'could avoid line breaks if not necessary'
19168,363009654,b'?'
19168,363009683,b'indent'
19168,363009722,b'IsLogicalNot'
19168,363009762,b'remove internal?\r\n@ajcvickers\r\n\r\n---\r\nIn reply to: [354103808](https://github.com/aspnet/EntityFrameworkCore/pull/19168#discussion_r354103808) [](ancestors = 354103808)'
19168,363009841,b'by design reverted optimization?'
19168,363009999,b'Null in subquery is never null if inner is non-nullable'
19168,363010135,b'Null in subquery is always null even if it matches is null in (NULL) which returns null.\r\n\r\n---\r\nIn reply to: [363009999](https://github.com/aspnet/EntityFrameworkCore/pull/19168#discussion_r363009999) [](ancestors = 363009999)'
19168,363010215,b'Optimize'
19168,363010226,b'Why Not leaves space after it!!! :volcano:'
19168,363011809,b'with helper method those got reduced to 2 lines - not worth DRYing'
19168,363011870,b'we need to reset after every visit - we dont want information to propagate from one element to another. Now done in a helper method so its easier on the eyes.'
19168,363025395,b'Elaborate more. They do exactly same processing. Add abstract Update method in SetOperationBase.'
19168,363445043,b'seems like it could be useful for some providers wanting to add optimizations that can be done before 2nd level cache'
19168,363447763,"b'no need anymore, collapsed to one line'"
19168,363452507,"b""we never do - IsNullable always resets at the start of the visit and we only look at it's value after visitation is complete"""
19168,363473278,"b'this is how they look right now:\r\n\r\n```cs\r\n            var source1 = (SelectExpression)VisitInternal(intersectExpression.Source1);\r\n            var source2 = (SelectExpression)VisitInternal(intersectExpression.Source2);\r\n\r\n            return intersectExpression.Update(source1, source2);\r\n```'"
19168,363484493,b'non needed due to helper method'
19168,363486664,"b""we need it so that nullable comuln information doesn't propagate between projections. However now we handle it in the helper method so the code looks cleaner"""
19168,363493200,b'need to do it on both sides at least in the case of column'
19168,363495494,b'moved from switch expression to elvis'
19168,363496013,b'nowhere - removed'
19168,363496558,"b'too many arguments, @AndriySvyryd would be unhappy ;)'"
19168,363496810,b'removed'
19168,363496938,b'removed'
19168,363500412,b'we dont want to lose parameterized queries here'
19168,363505562,"b'yes, the optimization is not valid in general for this case - it will go back to the optimized form once we know the function metadata and can determine that the charindex(firstName) is never nullable'"
19168,363505900,b'already tracked by #19295'
19168,363506466,b'you wrote that code :trollface: '
19168,363508910,b'not worth - abstracting out whether value of Constant/Parameter is null is too much work'
19168,363516045,b'largely obsoleted by using a helper method'
19168,363522931,b'filed: https://github.com/aspnet/EntityFrameworkCore/issues/19499'
19168,363909199,b'NullSemantics in name'
19168,363910790,b'VisitInternal will take care of resetting this'
19168,363912010,b'return Check.NotNUll'
19168,363912913,b'just use inValues'
19168,363912993,b'do you really need to visit this?'
19168,363913732,b'should rename to allowOptimizedExpansion. optimize seems misleading'
19168,363914515,b'Try making visit internal generic on T so you can avoid this casting'
19168,363914855,"b'>optimize [](start = 16, length = 8)\r\n\r\nVisitInternal will preserve optimize, no?'"
19168,363915419,"b'>rightNonNullableColumns [](start = 20, length = 23)\r\n\r\nInline variable and avoid ToList allocation'"
19168,363915838,b'never true'
19168,363925535,b'discussed encapsulation of nullabe/optimize & nonnullable columns'
19168,364002973,b'NullabilityBasedSqlProcessingExpressionVisitor'
19168,364004053,"b'nope, removing'"
19168,364007170,"b""i was debating it, doesn't change much IMO but I can add it, sure"""
19168,364315849,b'IsLogicalNot already checks for type. Remove.'
19168,364320771,b'@AndriySvyryd @bricelam - guidance on usage of langword? or c? or nothing for null?'
19168,364321362,b'short circuit for null expression before setting up all the states.'
19168,364322602,b'Do we have a test where operand is nullable?'
19168,364325372,b'VisitInternal on right resets this.'
19168,364426015,"b'yup, SpatialQuerySqlServerGeographyTest.OgcGeometryType'"
19168,364455432,"b""removed the langword as we don't seem to be using it anywhere else"""
19475,363006870,"b'I thought we had changed these to `Action<object, object>`, that should make the tests faster'"
19504,364478594,b'Can we remove this if not used?'
19504,364484123,"b'No, it must have the same number of parameters as `IncludeCollection` to make the code simpler'"
19521,364351420,b'Use Check.NotNull'
19521,364351602,b'Consider collapsing into a single line.'
19521,364351846,b'Add a test that this returns false when using the in-memory database.'
19521,364356916,"b""As the `IsRelational` is an extension method in `EFCore.Relational`\xef\xbc\x8cI'm not sure where should I add the test, any suggestion?"""
19521,364450631,b'Should be able to add it here. I believe the unit tests have access to the in-memory database as well.'
19521,364532571,"b""yes, I'd add the in-memory test"""
19507,363878526,"b'The behavior of GetValueOrDefault is still incorrect. As annotation says, it could return null. And in practice also the method is about returning null if nothing on server side but the nullability annotation does not agree with it.'"
19507,363879034,b'on delete action can be null. There is nothing in our code says it has be to present.'
19507,363891874,"b""> but the nullability annotation does not agree with it.\r\n\r\nI'm not following, which annotation doesn't agree with it? Are you referring to it being `T` instead of `T?`?\r\n\r\n`[return: MaybeNull]` is the only way to specify - for a generic return value - that it's nullable without adding a struct/class constraint ([see this post](https://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/)). Or maybe I'm misunderstanding what you're saying?"""
19507,363893598,"b""The question here is about whether SQL Server can return null or not, not about our model or code. [That doesn't seem to be the case according to the docs](https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-foreign-keys-transact-sql), but if we feel there's a risk SQL Server will return a NULL here I don't have anything against allowing for that - let me know what you prefer."""
19507,363905191,"b""Then consumer of this code can move away from handling value we cannot encounter. Currently it returns null. If we want to make our code future proof if SqlServer change any of this then we need to open that another value can come in. I don't have preference on either way how we read value. Value read and value processing should align on properly, which is not case right now."""
19507,363918154,"b""I'm not sure I follow (see some answers below). The question of how DatabaseModel looks like is separate from how SQL Server specifically scaffolds its information, no?"""
19437,362249979,b'Probably want to do value equality here as well / instead.'
19437,362250015,b'Ditto.'
19563,365469364,"b""The type mapping here refers to the return type, so pass `null` or call `ApplyDefaultTypeMapping`.\r\n\r\nThe type mapping infered from the arguments should be applied to the arguments so that they are all of the same type (this is not really necessary for Cosmos as it's not strict about types, but is still useful to ensure consistent behavior)"""
19563,365486675,b'You can remove the attributes as they will be inherited'
19563,365490752,"b""ApplyDefaultTypeMapping shouldn't be required. If it does not apply default at later stage automatically then there is bug somewhere."""
19563,365490790,b'inline these variables. See other tests to see how we assert SQL directly inline.'
19563,365504799,"b'I see. Can a different issue be opened for that? It may be a test validation issue - it is an error along the lines of ""SqlExpression without TypeMapping found in query"" and the test fails.'"
19563,365505196,b'Filed https://github.com/dotnet/efcore/issues/19567'
19498,366529301,"b'These URI changes seem wrong, & I guess this would happen in every repo - @mmitche do these need to be manually fixed?'"
19498,366529698,b'They are right.  That is where 3.1.1 was originally built.  They will update automatically over time as dependency flow happens.'
19498,366529740,"b""According to @mmitche this doesn't matter."""
19607,368154833,b'`char(NULL) IS NULL` returns false'
19607,368155984,"b""`rtrim('test', NULL) IS NULL` returns true"""
19607,368158262,"b""`substr('test', NULL, 1) IS NULL` returns true"""
19607,368162983,b'`IsEmpty(NULL) IS NULL` returns false.'
19607,368163423,b'Same for IsSimple and IsValid'
19607,368164517,"b""`Contains(NULL, GeomFromText('POINT(0 0)')) IS NULL` returns false\r\n`Contains(GeomFromText('POINT(0 0)'), NULL) IS NULL` returns false\r\n\r\nSame for Crosses, Disjoint, Equals, Intersects, Overlaps, Relate (inc. 3rd param), Touches, and Within. (basically anything that returns bool)"""
19607,368169920,"b""IsClosed and IsRing don't return null"""
19607,368170276,"b""IsClosed doesn't return null"""
19607,368173507,"b""> 'geometry::STGeometryN' failed because parameter 1 is not allowed to be null."""
19607,368174588,"b""STBuffer parameter can't be null\r\nSTRelate 2nd parameter can't be null"""
19607,368174823,"b""Seems to be true for any any argument that isn't geometry/geography"""
19607,369188124,b'optimization'
19607,369189197,b'optimization'
19607,369847996,b'\xe2\x9d\xa4 the beautiful SQL we had in 2.2 has returned'
19353,359393440,"b""This fails with `Column 'FullName' in table 'People' is of a type that is invalid for use as a key column in an index.`, is that expected?"""
19353,359394034,b'This test is somewhat useless since a database must support everything in order to run it (e.g. Sqlite disables it). Better to just remove and leave the feature-by-feature tests?'
19353,359394943,"b'This fails with: `To change the IDENTITY property of a column, the column needs to be dropped and recreated.`, is this expected?'"
19353,359395241,"b'Like AlterColumnOperation_make_identity, this fails with: To change the IDENTITY property of a column, the column needs to be dropped and recreated., is this expected?\r\n'"
19353,359395993,"b""I can only see comments generated for CreateTableOperation... I'm guessing this is intentional?"""
19353,360225459,"b""For higher fidelity the source builder shouldn't have conventions, that's how the snapshot is built and we have had several bugs that were hidden by conventions. However it will require more configuration to actually set up the tests."""
19353,363510388,"b""What doesn't SQLite support here?"""
19353,363516119,b'Expected.'
19353,363516292,b'Expected.'
19353,363516552,b'This test is important to make sure that old model snapshots are handled correctly. Do we still have coverage for this?'
19353,363519387,"b""Yes. It's not possible to add these with ALTER TABLE..ADD statements."""
19353,367986582,"b'Schema, check constraints... \r\n\r\nAm going to leave as-is (ignored for Sqlite) and we can re-discuss in cleanup if this test is valuable or not...'"
19353,367987738,"b'Removed, thanks.'"
19353,367988585,"b""I'll leave this test (and others like it) in MigrationSqlGeneratorTestBase and we can rediscuss later (will note in cleanup issue)."""
19353,367989043,"b'Removed, thanks.'"
19353,367990675,"b'Thanks, will leave these overrides to assert the actual behavior.'"
19353,369885017,b'Add `[SqlServerCondition(SqlServerCondition.SupportsMemoryOptimized)]` to these'
19353,369886088,"b""You'll need to create a test condition for online indexes."""
19353,370048977,"b'Thanks. Added an enum value to SqlServerCondition and configured config.json to false for LocalDB, but am not sure how to set up true in CI. Will merge now and we can fix as part of #19668.\r\n'"
19644,368761385,"b""When would one need to call `GetValueComparer` or `GetKeyValueComparer` that can't be replaced with `GetStructuralValueComparer` ?"""
19644,369818626,"b'Well...since you asked...\r\n\r\nConsumers (EF Code) should call:\r\n* GetStructuralValueComparer when is is required that values are compared structurally (i.e. deeply)\r\n* GetKeyValueComparer when comparing keys, which usually is done structurally, but may not be.\r\n* GetValueComparer when doing ""normal"" DetectChanges comparisons--often are not structural.\r\n\r\nThen the fallbacks work by not requiring a structural comparer to be set if the key one will work, and not requiring a key one if the normal one will work.\r\n\r\nFinally, if the application explicitly sets a value comparer, then we use that for all comparisons rather than using any comparer from the type mappings. This means for most cases people just need to write one, correct ValueComparer and set it. Users will only need to set the other kinds if they explicitly want to optimize DetectChanges or key comparions, which will be rare.\r\n\r\n'"
19644,369821182,"b'> - GetKeyValueComparer when comparing keys, which usually is done structurally, but may not be.\r\n> - GetValueComparer when doing ""normal"" DetectChanges comparisons--often are not structural.\r\n\r\nIt\'s still not clear to me why not using the StructuralValueComparer when one is available is ok for those cases. Is it just for perf and we assume that the values are immutable? Seems like there\'s potentially a bug there.'"
19644,370961170,"b""@AndriySvyryd I ran the code with all calls for structural comparers replaced with calls for key comparers. Tests failed in the in-memory database because the key comparer for byte arrays does not do a deep snapshot of the byte array. This is by-design because, as you say, the value is supposed to be immutable and we don't want the overhead of copying the array. (This is similar to the case for concurrency tokens that we discussed a while back.)\r\n\r\nHowever, we could change that. It would be unlikely to have a huge perf impact on binary keys because binary keys are usually very short. Also, binary keys in of themselves are rare. Also, there are other ways to handle performant, immutable binary keys by using type converters, setting your own comparer (except when testing with the in-memory store), or by overriding type mappings.\r\n\r\nIf you agree that we should do this, then I'll create a separate PR for it after merging, since this is already a decent sized change.\r\n\r\nThis is where structural comparers went in: https://github.com/dotnet/efcore/commit/c9284b7950f27c08e8f58d5ad3d071fb898e8cd1\r\n\r\n> This change introduces a new ValueComparer type that can be used when deep copies are needed. Neither the regular or the key comparer can be relied on to work this way, hence the need for a new one. There is no reliable way to know if such a comparer is needed, so it's up to the application/provider setting up the type mapping to provide one if needed.\r\n\r\n"""
19594,370355715,b'Please rename this to SequenceEqual (no s)'
19594,370606033,"b""nit: to align with other test names, let's rename to Byte_array_filter_by_SequenceEqual"""
19594,370972771,b'\xf0\x9f\x91\x8d '
19594,371016892,"b'Rename to ByteArraySequenceEqualTranslator, to align with the other single-purpose translators. Other than that looks great.'"
18237,372118234,b'Can make this `else if (scale.HasValue)` and remove the outer `if`'
18237,372119358,"b'What does this do? How is precision and scale handled on other types? (double, float, DateTime, etc.)'"
18237,372122116,"b""Hmm, I don't like that we special case `string` and `byte[]` above. I wonder if we can get rid of the special casing and just treat all facets (max length, fixed length, unicode, precision, scale, etc) the same."""
19681,370326974,b'Do we translate these overloads to SQL? Should `false` result in the overload without a StringComparison?'
19681,370327888,"b'Should we rewrite OrdinalIgnoreCase to string.Equals(a1, a2, OrdinalIgnoreCase)?'"
19681,370339244,"b""> Do we translate these overloads to SQL?\r\n\r\nNot at the moment, but we may at some point in the future... PG actually supports str1 > str2 :)\r\n\r\n> Should false result in the overload without a StringComparison?\r\n\r\nI'm not 100% sure... [string.Compare without StringComparison](https://docs.microsoft.com/en-us/dotnet/api/system.string.compare?view=netframework-4.8#System_String_Compare_System_String_System_String_) is culture-sensitive (as opposed to when passing StringComparison.Ordinal). [The docs for VB's CompareString](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualbasic.compilerservices.operators.comparestring?view=netframework-4.8#Microsoft_VisualBasic_CompilerServices_Operators_CompareString_System_String_System_String_System_Boolean_) say that the equality operator produces an expression with TextCompare=False, and if I'm reading everything correctly, the default value of [Option Compare](https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/option-compare-statement?view=netframework-4.8) is binary, which is culture-insensitive. But it would be good to have another set of eyes to be sure."""
19681,370339377,"b'Good idea, I was lazy - will do.'"
19681,370885238,"b""I think we've already put a stake in the ground stating that it's OK to ignore culture while querying. Just honoring the case-sensitivity of Option Compare seems sufficient. So, if using the non-StringComparison overload of StringCompare makes it translate to SQL, that sounds more ideal to me.\r\n\r\nBut I'm also happy to keep it as-is and wait for #1222."""
19681,370885552,"b'Should we handle `>`, `>=`, `<`, and `<=` too? Or does the compiler never generate those'"
19681,372071565,"b'Makes sense, making the change.'"
19681,372090980,"b""> Or does the compiler never generate those\r\n\r\nNot that I know of. In C#, string > string doesn't compile, and in VB.NET it compiles to `CompareString(s1, s2, false) > 0`; we do translate that above to `string.Compare(s1, s2)`, and it turns out EF Core [does translate that](https://github.com/dotnet/efcore/blob/9abd61d3fb4cdd1041f25fe2e10c70ee3dc4055e/src/EFCore.Relational/Query/Internal/ComparisonTranslator.cs#L13), so we get:\r\n\r\n```sql\r\nSELECT [b].[Id], [b].[Name]\r\nFROM [Blogs] AS [b]\r\nWHERE CASE\r\n    WHEN N'hello' = [b].[Name] THEN 0\r\n    WHEN N'hello' > [b].[Name] THEN 1\r\n    WHEN N'hello' < [b].[Name] THEN -1\r\nEND > 0\r\n```"""
19681,372094728,b'Note: opened #19733 to do better with that.'
19738,372632320,b'A design principle of Microsoft.Data.Sqlite is to have one deterministic format for values that need to be converted to another type. The ability to change formats at the connection level makes higher-level abstractions like EF more complex since they need to change the format of the literal/constant values they generate which in turn makes caching the SQL more complex.'
17273,371544327,"b""Won't this test pass without your change? If I remember correctly, we try asking for the context from the service provider long before resorting to Activator.CreateInstance()"""
17273,372097534,b'The test fails.'
19738,372873389,"b""Fair enough - my scenario has a single base schema with two derived versions - one for MySQL, one for SQLite, which would have made using an EF annotation to control the case of serialization tricky (which is why I tried to do it at the driver level)\r\n\r\nLet's close this one - I'll look into changing the raw SQL queries instead.\r\n\r\nThanks"""
19738,373127439,"b'Also, consider using NOCASE collation on the column:\r\n``` csharp\r\nif (Database.IsSqlite())\r\n{\r\n    // This is a bit of a hack, but everyone else is doing it, so...\r\n    modelBuilder.Entity<MyEntity>().Property(e => e.MyGuidProperty)\r\n        .HasColumnType(""TEXT COLLATE NOCASE"");\r\n}\r\n```'"
15729,285262956,"b'This can probably just be part of PropertyStructureEquals.\r\n\r\nI wonder if we should also look at covering primary keys, alternate keys, indexes, and check constraints to weed out even more false positives. The idea being that you usually don\xe2\x80\x99t rename a column *and* change these things in a single migration.'"
15729,291369512,"b'Just writing the unit tests to cover these extra scenarios and checking primary key feels wrong. Example scenario:\r\n\r\n```\r\n                source =>\r\n                {\r\n                    source.Entity(\r\n                        ""Mucor"",\r\n                        x =>\r\n                        {\r\n                            x.Property<int>(""Id1"");\r\n                            x.HasKey(""Id1"");\r\n                        });\r\n                },\r\n                target =>\r\n                {\r\n                    target.Entity(\r\n                        ""Mucor"",\r\n                        x =>\r\n                        {\r\n                            x.Property<int>(""Id2"");\r\n                            x.HasKey(""Id2"");\r\n                        });\r\n                },\r\n```\r\n\r\nTo me, this feels like a rename scenario. Is it just the a bad example for primary key or should we not check this?'"
15729,291386478,"b'That\'s a rename scenario--since they\'re both part of the entity type\'s primary key, the columns should be paired up. For example, consider this case:\r\n``` csharp\r\nsource =>\r\n{\r\n    source.Entity(\r\n        ""Mucor"",\r\n        x =>\r\n        {\r\n            x.Property<int>(""A"");\r\n            x.HasKey(""A"");\r\n        });\r\n},\r\ntarget =>\r\n{\r\n    target.Entity(\r\n        ""Mucor"",\r\n        x =>\r\n        {\r\n            x.Property<int>(""B"");\r\n            x.Property<int>(""C"");\r\n            x.HasKey(""C"");\r\n        });\r\n},\r\n```\r\n`A` and `C` should be paired up, but if we don\'t consider the primary key then `A` and `B` will get paired up instead. (because `B` is the first ""structurally equal"" match)'"
15729,291387383,"b'Another interesting case:\r\n``` csharp\r\nsource =>\r\n{\r\n    source.Entity(\r\n        ""Mucor"",\r\n        x =>\r\n        {\r\n            x.Property<int>(""A"");\r\n            x.Property<int>(""B"");\r\n            x.HasKey(""A"", ""B"");\r\n        });\r\n},\r\ntarget =>\r\n{\r\n    target.Entity(\r\n        ""Mucor"",\r\n        x =>\r\n        {\r\n            x.Property<int>(""A"");\r\n            x.HasKey(""A"");\r\n            x.Property<int>(""C"");\r\n        });\r\n},\r\n```\r\n`B` and `C` should **not** be paired up because only one is part of the primary key'"
15729,291691308,"b""@bricelam Can you have a review of my unit tests? I'm still unsure about where we sit on some of these scenarios. To me, it feels like renaming a primary key column should be a single rename so I don't check the property names of the primary key in the PropertyStructureEquals, just check its the same amount of keys. Feels like a happy medium."""
15729,313588677,"b""This doesn't seem right. I'd expect a column rename."""
15729,313736360,"b'My original thinking on this was if you remove a column pointing at one index then add another pointing at a different one its probably a drop / create wanted. However, thinking on it now, if you rename a column, you would probably rename the index at the same time.'"
15729,373809914,"b""@bricelam I was concerned removing this check would break other tests but didn't seem to. This short circuit causes issues when checking that a foreign key points at the same table. This check seems to suggest if both point to a single table then it's the same which feels wrong. The code after it ensure the path is the same etc but only if the count was different?"""
19581,366135827,b'Is there a more performant way to find a property with a given metadata?'
19581,366136166,"b""This probably isn't the best base class to use, but it has all the models I wanted for this test. This test also feels like it doesn't belong in the validation tests as it is verifying the side-effects of this method, not the result of the model.\r\n\r\nAny suggestions on what I should do here, if anything?"""
19581,367184398,b'Use `GetDeclaredProperties` to avoid checking some properties multiple times.'
19581,367185093,b'Move to a separate file'
19581,367185278,"b'Provide explicit value for `None`, but not for other values'"
19581,367187020,b'You can add a convention that runs just before model validation and stores the etag property in a new annotation or file a new issue to do this in a separate PR.\r\n\r\nEither way this should be extracted to an extension method `GetEtagProperty`'
19581,367187491,"b""Just copy over anything that the test needs. We aren't really concerned about keeping tests DRY"""
19581,368243150,"b'I am not sure if _all_ of these extensions are needed, but I saw they are present for partition key and not used either. So I assumed they are there for external consumption. Let me know if I should remove them.'"
19581,368243170,"b'@AndriySvyryd - is this what you meant by a convention to set an annotation on which property is the etag?\r\n\r\nThis does not appear to work. This is called after model is finalized, and the `IModel` has already been made ""read-only"", so the setting of the annotation null-refs due to the `ConventionDispatcher` being null (it is nulled out when the model is made readonly).\r\n\r\nIs there a different point I should do this, or do I set the annotation on something other than the EntityType at this point?'"
19581,368244452,b'Yes. This should be fast enough'
19581,368244588,"b'These are meant for potential conventions consumption. Not really necessary right now, but ok to have.'"
19581,369288498,"b'@AndriySvyryd - do you have a suggestion on how I can fix the null-ref I am getting with this? Is there a different API I should be using at this point, or a different `IConvention` point I should hook into?'"
19581,369291013,"b'```suggestion\r\n            ConventionSet.AddBefore(\r\n                conventionSet.ModelFinalizedConventions,\r\n                new ETagPropertyConvention(),\r\n                typeof(ValidatingConvention));\r\n```'"
19581,369291483,"b""Sorry, I meant to comment on this earlier, but forgot. It means that the model is read-only, you need to call this convention before the model is validated, I've commented below."""
19400,375124080,b'refactor to set function name and return server type using case block.'
19400,375216558,b'Agree. Should I create a new PR for this?'
19400,375280979,b'I will do it. I may have small clean up tasks in other unrelated PRs too.'
19689,375389226,b'Should wrap only result of TryBindMember. MemberTranslatorProvider should take care of itself.'
19689,375389731,b'Similar to above.'
19681,375475866,b'This should have converted to string.Compare in C# rather than trying to convert to equality.'
19665,375505051,b'Does this need to be in Specs if the tests are only for SqlServer?'
19665,375505148,b'For @AndriySvyryd '
19681,375546153,b'Any particular reason?'
19681,375560133,b'causes fragmentation in set of optimizations. '
19681,375566713,"b""I'm sure I'm just being slow or dumb, but could you take a minute and explain exactly what you mean? Fragmentation where, which set of optimizations..."""
19502,364450461,"b""we could just remove this as it doesn't bring any additional value now that its not indexer, will do it in some other PR tho, no need to clutter here"""
19502,364451220,"b'Nit: $""Indexer ...""'"
19502,364453273,b'A more correct check would be `property.IsShadowProperty() || (clrProperty != null && clrProperty.IsIndexerProperty())` as there could be field-only properties'
19502,364460334,"b""We should process indexers after other properties to avoid these issues:\r\n\r\n- Overriding a value from a non indexer property\r\n- Trying the get a value from the indexer that could be obtained from a normal property\r\n- Trying to get a value from the indexer that's not supplied for an optional property (we'll probably need to swallow an exception)\r\n\r\nWe probably should separate the case for anonymous types as it can't have an indexer and non-anonymous should only use the `PropertyInfo` defined in the model to obtain the value.\r\nAlso add tests for the above cases"""
19502,364462502,"b'```suggestion\r\n                        : entityTypeBuilder.Property(identifyingMemberInfo, configurationSource);\r\n```'"
19502,364463850,b'Why not just leave it as indexer and keep the tests?'
19502,364473085,b'Actually we should throw in model building if an indexer property name matches a member on the CLR type'
19502,364475456,"b'I would be happy with validation to avoid the clash scenario. We can add support later if customers requests for it.\r\n\r\nSo for initial points, how many remains valid?\r\n3rd one I will add try/catch.'"
19502,364476617,"b""So to handle everything you would need to\r\n\r\n- Only use PropertyInfo defined in the model for non-anonymous types\r\n- Add try/catch for optional indexer properties\r\n- Validate indexer property doesn't clash"""
19502,376031515,b'The earlier check was accurate as this is about sorting columns in table.'
19502,376039382,b'Redundant comment'
19502,376040191,"b'Should be ""anonymous type""'"
19502,376041403,b'added test for validation.'
19502,376048051,b'Add a test that adds an indexer property with the same name as a CLR property that is not used by any property on the entity type.'
19517,364464695,b'Move this to a separate PR as a stretch stretch goal'
19517,364465277,b'Comment not relevant anymore'
19517,376055476,"b""I don't think the attribute makes any difference since this is an explicit interface implementation"""
19517,376059656,b'Just compare to `null`'
19517,376059787,b'\xf0\x9f\x98\x86 '
19773,374460716,b'remove the override - only needed if some extra work is done in the provider-specific version of the test'
19773,374461762,"b""How about (since the exception affects both methods): \r\nQueries performing 'Last' and 'LastOrDefault' operations must contain an OrderBy clause."""
19773,375402455,b'Contain is too broad. This could fail in projection when doing on subquery and outer has an orderby. Should mention before in some way.'
19773,375402812,b'Also add a test for LastOrDefault.'
19773,375727027,"b'I\'ve changed it to ""Queries performing \'Last\' and \'LastOrDefault\' operations must contain an OrderBy clause."" for now. I couldn\'t come up with anything better that says include it before.'"
19773,375867899,"b'Make method name a paraemter.\r\n""Queries performing \'{method}\' operation must have a deterministic sort order. Rewrite the query to apply an OrderBy clause on the sequence before calling \'{method}\'.""'"
19773,376052773,b'```suggestion\r\n                throw new InvalidOperationException(CoreStrings.LastUsedWithoutOrderBy(returnDefault ? nameof(Queryable.LastOrDefault) : nameof(Queryable.Last));\r\n```'
19819,376113080,b'Why does this need to be static?'
19819,376116135,b'Being used by a nested visitor. Alternative is to pass this to nested visitor. It will be cleaned up later regardless.'
19607,376127342,b'canBeNull would be better name'
19607,376129664,b'Check if is niladic to avoid for loop.'
19607,376130363,b'Using aggregate could be cleaner.'
19607,376130607,b'default should be false.'
19607,376131237,b'Obsolete old .Function which does not take nullability propagation arguments.'
19607,376132656,b'Likewise obsolete ctors\r\nWe need to remove this static methods also. Causing unnecessary explosion at low value. We need a better mechanism to support user defined translations anyway.'
19607,376133490,b'If Count cannot be null then can Count_Big be null?'
19607,376143129,"b'will go with nullable/isnullable, just like column expression'"
19831,376575830,b'Consider adding a comment on the Npgsql case on this test for context?'
19831,376577988,b'Inconsistency!'
19836,376674489,b'valueComparers[i] could be null'
19836,376674577,"b""GetKeyValueComparer() returns null? Shouldn't get method throw?"""
19836,376675073,"b""```\r\n/// <returns> The comparer, or <c>null</c> if none has been set. </returns>\r\npublic static ValueComparer GetKeyValueComparer([NotNull] this IProperty property, bool fallback = true)\r\n```\r\n\r\nAccording to our naming convention if a Get* method doesn't have any parameters then it can return null."""
19836,376675161,b'What should be used when valueComparer is null? Object.Equals?'
19836,376675253,b'Sounds good'
19836,376682724,b'Updated.'
19593,370879688,"b'avoid double visitation - either visit left and right only for checked expression types, or use node.Update instead of calling the base.'"
19593,370879706,"b""Also fix formatting of switch expression (i.e. don't align `=>`)"""
19593,370879837,b'same here'
19593,370896960,b'no need for the using statement here - AssertQuery handles this'
19593,370896982,b'same here'
19593,371637278,b'@maumar - Wrong place. Move to SqlTranslator or eqv.'
19593,371637360,b'Process in VisitUnary while translating and avoid introducing new visitor.'
19593,371855107,"b'I was concerned that if I added it here - https://github.com/dotnet/efcore/blob/master/src/EFCore.Relational/Query/RelationalSqlTranslatingExpressionVisitor.cs#L716 - that there were other places further down the pipeline that relied on checking `ExpressionType.Convert`. I wanted to avoid having to explicitly adding `ConvertChecked` (and `Add/Subtract/MultiplyChecked`) everywhere in the translation pipeline, so I thought that rewriting the entire expression tree with a visitor was the approach. Is that a non-issue?'"
19593,371929937,"b'After translation, there would be server side expressions & client side expressions. Client side we want to preserve Checked nodes so we should preserve it and update processing further in pipeline if needed. For server side expression (or sql tree for relational), it should sanitize checked nodes to non-checked versions as they should be transparent.'"
19593,372012760,b'you can remove this'
19593,372040719,"b""Alright. So just to clarify - you'd like to see this checked->unchecked translation inside of `VisitUnary` and `VisitBinary` (to handle add/subtract/multiply) in `RelationalSqlTranslatingExpressionVisitor`?\r\n\r\nApologies if I'm a little slow on this. I'm still getting a feel for the appropriate places for various pieces of logic. Thanks for your help! \xf0\x9f\xa5\x82 """
19593,373154633,"b'@svengeance you are correct - logic should reside in RelationalSqlTranslatingExpressionVisitor, in visitUnary, Visitbinary methods.'"
19593,373910387,b'Certainly - how would I go about running a test in the GearsTestBase without calling it in a subclass? Or is there a different test project I should use?'
19593,373910707,"b""I've removed the added visitor and moved the relevant logic into VisitUnary/Binary as requested. VisitBinary was remapped to the unchecked variants, but I wasn't sure if that was necessary in VisitUnary given that simply adding it to the other casting node types works just as well. It's trivial to remap, so let me know how you feel about the implementation.\r\n\r\nThank you again for your continued feedback, and let me know if/how else I can improve this PR!"""
19593,374457749,b'nit: formatting'
19593,374458781,b'The test runner runs all methods annotated with ConditionalFact/Theory on the base. Every provider specific class will automatically pick up the test from the base. You only need to override it in the provider specific file if u want to change something (we do it almost exclusively to add SQL validation). You should be able to see this test in VS test explorer for every provider in the solution and you can run it from there.'
19593,374727807,"b""Hm, okay. I'll remove it and try to get it to run myself. I'm using R#'s Unit Test Runner and whenever I try to run that specific test it doesn't get picked up.\r\nThank you!"""
19593,375395186,b'No need to reconstruct whole node. Just normalize the nodeType before passing into `MakeBinary` method.'
19593,375642247,"b""I don't see anything immediately off looking at the file itself, what exactly did you have in mind?"""
19593,375655611,b'Thank you! Should be addressed in the latest push.'
19593,375657483,"b""I think I've got it - some very odd whitespace issue. I think I introduced this accidentally when resolving merge conflicts in tests with VS's built-in resolver, but the whitespacing differences aren't noticeable from VS itself."""
19674,369907448,b'This is not great (at least the name). Alternative I can think of is adding back RelationalExpressionPrinter and some custom classes to print various types of objects wrapped inside ConstantExpression. \r\n\r\nAdding interface to RelationalCommandCache seems like the lesser of 2 evils. Thoughts?'
19674,374936846,"b""Internal class, so doesn't matter that much"""
19858,377261894,b'Breaking change if patching.'
19858,377268023,b'Yep. We could leave the previous constructor and build arrays out of the keys/values.'
19858,377296068,b'Add a comment that briefly (no more than 2 lines!) explains why we are using arrays instead of dictionary'
19855,377323048,"b'elementSorter: e => (e.CustomerID, e.Sequence));'"
19855,377336226,"b'Was not sure if value tuples were properly comparable, will change.'"
19872,377818426,b'Why does this need to run again?'
19872,377842475,"b'Typo, thanks'"
19774,374244508,"b""Shouldn't we prefer to test with Where instead of Select? Otherwise unimplementing providers will falsely pass because of client evaluation in top-level projection..."""
19774,375428389,b'We should have tests for both Where & Select.\r\nWhere validates server eval.\r\nSelect validates that return typeMapping is set correctly to read back data. (also this should make sure that results are non-empty.'
19774,375428747,b'Remove variable declaration & direct return.'
19774,375429025,b'simpler `new [] { }`'
19774,375458552,"b'@smitpatel just for my understanding, given that the data being read back here is an int and not a TimeSpan (and the Where test would also test non-empty results), would Select tests actually add value?\r\n\r\n@bricelam made the point that writing Where tests could be tricky because of varying precision for TimeSpan across databases, at least for milliseconds etc...'"
19774,375462932,"b'In such case Select can be skipped. Just make sure to add when types are differing, like if above members return int/long depending on member in same translator, it can easily slip in a bug if not careful.\r\nBool/DateTime series/any weird type which would cause issue while reading.\r\n\r\nWe could write a fuzzy Where tests like we do for double subtraction. (range check rather than exact)'"
19774,375950486,b'This is ready.'
19774,375950648,b'This is ready.'
19774,375952516,b'I added the where tests for TimeSpan members and also fix old tests related to Mission entity which have been failing because of the added property Duration'
19774,375954891,b'Probably also need to skip some of these tests in Sqlite provider. InMemory should work.'
19774,376699353,b'This is ready. Tests for TimeSpan members are now skipped for Sqlite'
19774,377096576,b'nit: can use expression-bodied method for all these (even on same line if it fits)'
19774,377248086,b'This is done \xf0\x9f\x98\x89 '
19881,377791727,b'Suspicious change'
19881,377791795,b'Suspicious change'
19881,377792321,"b""The previous SQL baseline is weird: `(([c].[Region] = N'') AND [c].[Region] IS NOT NULL)` - there seems to be an optimization we're not doing?"""
19881,377806230,b'@maumar  - Null propagation is not necessary in this case?'
19881,377813791,b'You cannot run this before. Some of the steps in base visitor needs to happen first. That is the cause of test failures.'
19881,377846241,"b'yeah, the second null check should be optimized out - will take a look'"
19881,377856330,"b""Thanks @smitpatel, reverse the ordering and all tests pass locally.\r\n\r\n(Can you explain in a sentence or two why it's like that for my understanding? After all we could have implemented this equality->like rewriting in translation, which case it would also have happened before those other postprocessing visitors...)"""
19881,377858461,"b'Base class applies projection, collection join and unique table alias. I believe by doing it first, somewhere referential graph of column to table got disconnected hence correct alias was not assigned to the transformed expression causing error. Doing it in translation phase could get same error too.'"
19867,377811670,b'Should store this in a field.'
19867,377859938,"b'Thanks, done. Should do the same in https://github.com/dotnet/efcore/pull/19871/files#diff-baecacd4cd9354c21b22e390097a8d79R511?'"
19881,377860482,"b'OK thanks, so we have a referential issue somewhere...'"
19867,377860943,"b'low value since used at only one place \xf0\x9f\x98\x9b \r\nBut if @AndriySvyryd agrees, you can add commit on that PR.'"
19881,377861471,b'The referential issue arose because in 3.0 we decided to drop visiting table of a columnExpression. It was a trade-off.'
19881,377866173,b'filed #19883'
19881,377866745,"b""I just hope it's possible to fix this properly for 5.0.."""
19881,377867687,"b'<img src=""https://qph.fs.quoracdn.net/main-qimg-813ed39d426a836ce044e24be516033f"" />'"
19881,377875441,b'![image](https://user-images.githubusercontent.com/1862641/74275456-301b4680-4d14-11ea-8bdc-6ba743bed081.png)\r\n'
19867,377888688,"b""That path isn't hot enough to warrant this"""
19881,377919218,"b""yes, since the like expression is wrapped inside NOT, we should do full expansion on like (i.e. f.LastName LIKE N'' AND f.LastName IS NOT NULL)"""
19881,377964152,"b'we should only be doing this when necessary, i.e. UseRelationalNulls == false, _allowOptimizedExpansion == false\r\n\r\nAlso, we could do that in more generic fashion - do full propagation expansion and run the result thru existing optimizations. We will get the same result (null constants will be optimized out to ""false""), but we also take advantage of other (and future?) optimizations.'"
19881,377968112,"b""```sql\r\nSELECT [f].[Id], [f].[FirstName], [f].[LastName], [f].[NullableBool], [f0].[Id], [f0].[FirstName], [f0].[LastName], [f0].[NullableBool]\r\nFROM [FunkyCustomers] AS [f]\r\nCROSS JOIN [FunkyCustomers] AS [f0]\r\nWHERE CASE\r\n    WHEN (([f0].[LastName] LIKE N'') AND [f0].[LastName] IS NOT NULL) OR ([f].[FirstName] IS NOT NULL AND ([f0].[LastName] IS NOT NULL AND (RIGHT([f].[FirstName], LEN([f0].[LastName])) = [f0].[LastName]))) THEN CAST(1 AS bit)\r\n    ELSE CAST(0 AS bit)\r\nEND = [f].[NullableBool]\r\n````"""
19881,377971903,"b'basically the problem was that LIKE expression could yield null (from the nullable LastName column, g.NullableBool is also nullable, so we had to do the null semantics expansion here. By removing nulls from LIKE we can make the left side of comparison non-nullable and significantly simplify the translation'"
19881,377972606,"b""```sql\r\nSELECT [f].[Id], [f].[FirstName], [f].[LastName], [f].[NullableBool], [f0].[Id], [f0].[FirstName], [f0].[LastName], [f0].[NullableBool]\r\nFROM [FunkyCustomers] AS [f]\r\nCROSS JOIN [FunkyCustomers] AS [f0]\r\nWHERE (CASE\r\n    WHEN (([f0].[LastName] LIKE N'') AND [f0].[LastName] IS NOT NULL) OR ([f].[FirstName] IS NOT NULL AND ([f0].[LastName] IS NOT NULL AND (RIGHT([f].[FirstName], LEN([f0].[LastName])) = [f0].[LastName]))) THEN CAST(1 AS bit)\r\n    ELSE CAST(0 AS bit)\r\nEND <> [f].[NullableBool]) OR [f].[NullableBool] IS NULL\r\n```\r\n\r\nwith the update"""
19881,377964469,"b'something like that\r\n\r\n```cs\r\n            var result = (SqlExpression)likeExpression.Update(match, pattern, escapeChar);\r\n\r\n            if (!_allowOptimizedExpansion && _nullable && !UseRelationalNulls)\r\n            {\r\n                var nullableArguments = new List<SqlExpression>();\r\n                if (matchNullable)\r\n                {\r\n                    nullableArguments.Add(ProcessNullNotNull(SqlExpressionFactory.IsNotNull(match), operandNullable: true));\r\n                }\r\n\r\n                if (patternNullable)\r\n                {\r\n                    nullableArguments.Add(ProcessNullNotNull(SqlExpressionFactory.IsNotNull(pattern), operandNullable: true));\r\n                }\r\n\r\n                if (escapeCharNullable)\r\n                {\r\n                    nullableArguments.Add(ProcessNullNotNull(SqlExpressionFactory.IsNotNull(escapeChar), operandNullable: true));\r\n                }\r\n\r\n                var isNotNullExpression = nullableArguments.Aggregate((a, e) => SimplifyLogicalSqlBinaryExpression(SqlExpressionFactory.AndAlso(a, e)));\r\n                _nullable = false;\r\n\r\n                return SqlExpressionFactory.AndAlso(result, isNotNullExpression);\r\n            }\r\n```'"
19885,378486399,b'Why is this separated?'
19885,378486700,b'That method is being used from nav expansion.'
19885,378488058,"b""Ok, still doesn't explain the blank lines around it"""
19885,378488449,"b'Iteration 1. I will remove all blanks lines when full clean up of this visitor is done, promise!'"
19887,378490104,b'It would be better to pass this through as `SqlServerValueGenerationStrategy` and only convert it to `string` when logging'
19887,378490911,"b""```suggestion\r\n    <value>Both the SqlServerValueGenerationStrategy {generationStrategy} and {otherGenerationStrategy} have been set on property '{propertyName}' on entity type '{entityName}'. Usually this is a mistake. Only use these at the same time if you are sure you understand the consequences.</value>\r\n```"""
19887,378527694,b'Will do.'
19887,378527909,b'Looks good. Will do.'
19896,379132558,"b'In the future, we should refactor this to diff the columns and tables directly only occasionally using entity types and properties for additional context'"
19896,379133494,b'Probably worth adding extension methods like GetMigratableTables to filter these out earlier'
19896,379137678,"b'Also, this condition might be wrong. What if an entity type becomes (or stops being) migratable?'"
19896,379138423,"b'Yes, this would be necessary for all the new mapping strategies'"
19896,379138936,"b""Why would this needed? Shouldn't initial configuration set it to correct value? """
19896,379139134,"b""That's why they are not filtered out early. This way if it becomes (or stops being) migratable migrations won't try to create or delete the table."""
19896,379140495,"b""The first property to use the column might have been column-nullable (e.g. if it's on the optional dependent in table splitting)."""
19896,379141379,b'why is this different from bottom one?'
19896,379145293,b'Will fix in the next PR that properly ports Query to the new API'
19919,379191161,b'Will change this to IsKeyless in master (it required additional changes)'
19919,379192779,"b'C# needs a way to reference previously created objects in initializer syntax. Something like\r\n\r\n```cs\r\nnew Table\r\n{\r\n    Columns =\r\n    {\r\n        new Column { Name = ""Id"" } idColumn // \xf0\x9f\x98\x88\r\n    },\r\n    PrimaryKey = new PrimaryKey\r\n    {\r\n        Columns = { idColumn }\r\n    }\r\n};\r\n```'"
19919,379196802,b'(Commented on https://github.com/dotnet/csharplang/issues/400)'
19919,379854630,b'Updated in PR #19942'
19913,379107010,"b'I don\xe2\x80\x99t think this makes sense here. It needs to be associated with the return value of Create.\r\n\r\nFor example, what does the value mean before calling Create or after calling Create twice.\r\n\r\nInstead of capturing this as a side effect, make it part of the result via an annotation'"
19913,379131584,"b""@bricelam How is this value passed in? Given #19799 I thought you wanted it on `IDatabaseModelFactory`?\r\n\r\nCurrently `ReverseEngineerScaffolder` uses the ConnectionString from a `ModelCodeGenerationOptions` object to output the connection string in `OnConfiguring()`. The DatabaseModel produced by `IDatabaseModelFactory` is not used for that at all. Are you suggesting updating `DatabaseModelFactoryOptions` to have the `OverrideConnectionString` on it, using that in Create() to add an annotation, and updating `CSharpDbContextGenerator` to look for that annotation and use that value instead?\r\n\r\nOr are you suggesting adding an optional param to the Create() methods?\r\n\r\nNote: I'm trying to avoid breaking any existing methods. If I should feel free to break them let me know."""
19913,379658351,b'@bricelam Updated as discussed.'
19913,379658873,"b""Note: I don't actually use this - but it seemed common practice in this file to define both getter and setter. Let me know if you'd like it removed."""
19913,379671454,b'put model.GetConnectionString in a variable.'
19913,379671915,b'Setter is fine. It should be used from providers deriving from IScaffoldingModelFactory.'
19913,379678083,b'Sure.'
19913,379679598,"b'Sure, not a problem. But note: at the moment no provider does this. Instead the provider sets the annotation on the databaseModel and this annotation is automatically copied over (along with all the other annotations) onto the `IModel`, and we use the getter to look for that annotation in code gen. So the setter is not needed. But happy to leave it around in case a provider wants to use it.'"
19913,379681159,"b""This was left in from a previous commit. No longer needed - I'll remove."""
19913,379852444,"b""We should handle this in `ReverseEngineerScaffolder.ScaffoldModel()` so ModelCodeGenerator's don't have to be concerned with it--they'll just continue reading `ModelCodeGenerationOptions.ConnectionString`."""
19913,379852620,"b""We don't need this (or the one below) since we'll read it directly from the DatabaseModel. In fact, we should probably avoid copying it to the IModel so it doesn't accidentally get scaffolded. (i.e. remove it from the DatabaseModel before passing it to IScaffoldingModelFactory.Create)"""
19913,379870373,b'Updated as requested.'
19913,379870378,b'Updated as requested.'
19917,381084745,b'You will need to condition creator for public only builds as you already saw the internal queues reject jobs with creator specified'
19917,381085750,"b'Can you also add some of the meta data needed for flaky tests queries, see here: https://github.com/dotnet/aspnetcore/blob/master/eng/helix/helix.proj#L48'"
19917,381095914,b'I will look into it. I am not looking to add a condition here. Rather I am setting environment variables based on public/internal builds. It should be auto-populated to relevant value for Creator/HelixAccessToken'
19917,381096627,b'There are any hardly flaky tests in efcore. But I am happy to add more metadata. Though before that as a team we would like to understand where does these all data goes and how do we see it.'
19917,381097924,"b'Well, this meta data is needed for the flaky test process, not for flaky tests per se, unless you guys have 0 test failures ever, then I guess you might not need it :)'"
19917,381098397,"b""Yeah I'm just mentioning that you cannot set Creator on internal queues, the queues will reject the job if its set with an error saying as much"""
19917,381421509,"b""Why do this explicitly? It's the same as what `enablePublishTestResults` does for you."""
19917,381422069,"b""Instead, leave the default enabled where it was and add `enablePublishTestResults: false` to any job where you don't want test results published."""
19917,381422604,"b""Surprised by this change. Aren't binary logs useful? And why is this part of a change toward using Helix queues?"""
19917,381430001,b'Only `PullRequest` builds should have this `_HelixSource`.'
19917,381433493,b'Only `PullRequest` builds should have this `_HelixSource`.'
19917,381435272,"b""This is scary and shouldn't be in the YAML."""
19917,381438078,b'What is this about and how is it related to the move toward Helix queues?'
19917,381438821,b'Looks like some tests should be skipped on some platforms. Hiding such errors looks perilous.'
19917,381440243,b'Add this package and its version variable to Version.Details.xml and Versions.props.'
19917,381445377,"b'This is publishing logs to container and not test results.\r\nPlus, as mentioned in commit message, there are not logs for helix runs.'"
19917,381445544,b'Yaml fails. You cannot redefine it.'
19917,381446239,"b""- Not useful.\r\n- There is regular log file generated.\r\n- We are not generating binary log for windows/linux. I don't see point for osx.\r\n\r\nIf something fails then it is easy to enable binary log while debugging if needed."""
19917,381446848,b'I picked it up from Arcade documentation: https://github.com/dotnet/arcade-minimalci-sample#enabling-telemetry\r\n\r\nPerhaps those docs should be updated then. I will align with what is in arcade docs for now.'
19917,381446922,b'Same as above.'
19917,381447203,"b'As display name says, I am debugging it since even though it is not supposed to have the token for public build it is getting from somewhere.'"
19917,381447590,"b'For some reason, specs test did not fail but Relational.Specs tests did. (they are libraries and not actual test projects. So I just aligned both csproj.'"
19917,381448071,b'This condition setups environment for skipping tests. We need to try connect to server to see if we can run the test or skip.'
19917,381459284,"b'Sorry, I meant `enablePublishBuildArtifacts`. That parameter does exactly this.'"
19917,381461090,"b'What ""regular"" log are you talking about? The console logs from the build don\'t contain nearly as much information.\r\n\r\nOur repos generally emit binary logs so that when an issue occurs it can be immediately diagnosed without waiting for another build.'"
19917,381461448,"b'rather than outputting it would prefer something along the lines of `$(_HelixAccessToken) != """"`'"
19917,381462095,b'@MattGal is the example in that documentation correct?'
19917,381523468,"b'Since Helix job does not have build artifacts, it causes warning in those jobs. Hence I specifically copied it here to do same thing.'"
19917,381523724,b'*.log file are generated in artifacts for all machines.'
19917,381524402,"b'Thing I am trying to achieve,\r\nCreator/AccessToken both are specified here. The env variable will have empty value before invoking this. The Creator has worked fine for internal build. The value does not get set to anything.'"
19917,381544463,b'@dougbu the example is correct but the documentation is not complete; you can also choose to not specify Source at all and have it be inferred from the environment when running in an AzDo environment. '
19917,381575680,b'binary logs are already brought in by the script. No need to specify flag separately.'
19917,381576165,"b""Couldn't get output to work anyway. Tried few conditions to print out and it ended up being empty string. Not sure how it is getting passed to helix SDK."""
19917,381576508,"b'Nah, just do what you did with `enablePublishTestResults` and set the parameter at the job level for those jobs that _have_ log files.'"
19917,381576835,b'@smitpatel leaving the value out seems simpler \xf0\x9f\x98\xba '
19917,381577128,"b'That does not work since jobs.yml define parameter `enablePublishBuildArtifacts` hence it cannot be redefined.\r\nOn the other hand, `enablePublishTestResults` is not a parameter to jobs.yml so can be set just like any other variable.'"
19917,381577391,"b'This may become non-issue. Adding some logs to helix jobs also so it may end up publishing log, removing this code altogether. '"
19917,381581975,b'Please undo the reordering. It makes this PR nearly impossible to review'
19917,381583967,"b'That\'ll be good.\r\n\r\nIn the meantime, your comment made me look at the job.yml file that jobs.yml uses. It defines both of these parameters with default values: https://github.com/dotnet/efcore/blob/master/eng/common/templates/job/job.yml#L23-L25 Might be a ""one definition **per file**"" restriction.'"
19917,381585377,"b""I haven't re-ordered. I removed other jobs while I debug to avoid triggering 5 builds for a fail build. Hence PR is on-hold. I will update once it is ready for review again."""
19917,381586203,b'Can comment out jobs to keep the diff cleaner'
19917,381588485,"b""Or, add a `condition: false` (that's just one character indented) to the jobs you want to disable"""
19917,381632757,"b""At present I don't know how to look at helix telemetry to verify that it is auto-assigned and simple. For now I would like to keep this assigned explicitly. While I don't know what IndividualCI or BatchCI mean, as pointed out to be problematic case, I don't think we are going to run things we don't know. Once arcade completes documentation or we have idea about telemetry from helix, we can look into testing various things out here."""
19917,381632924,b'Added back stuff which was temporarily disabled for debugging.'
19917,381633236,b'This is working correctly now. It was running into error as it took literal string `$(_HelixAccessToken)` as the access token. Now correct variables are defined in yaml and passed here for both internal/public builds.'
19917,381633382,"b""We'll add when we hit the error."""
19917,381633470,b'Added it to Version.Details.xml. No references in Versions.props'
19917,381636205,"b""nit: My point was removing unecessary `_HelixSource` setting and letting the Helix SDK do the **Right Thing:tm:** would simplify this file. Helix would blow up if the SDK didn't get the values right. For example, the dotnet/aspnetcore repo doesn't set this variable.\r\n\r\nCould you file a follow-up issue to remove the excess baggage?"""
19917,381638092,"b'Ok. I removed. If it passes, I will merge. (Not testing on internal build separately again).'"
19989,381635572,b'space between tag & text.'
19989,381638721,"b""No need to add it here, the convention doesn't react to the backing field being changed"""
19989,381652839,b'Will fix'
19989,381652932,b'Will fix.'
19971,382205392,b'using System?'
19971,382206169,b'Does this change make any difference given properties are interface type anyway?'
19971,382208576,b'Could move foreach inside this if to avoid iteration when tables/views is empty.'
19971,382209652,b'Interesting if you specify a view definition we will create it for you in migrations hence managed by migrations. :trollface:'
19971,382210683,b'IViewMapping and IViewColumn has same structure. Same for tables.'
19971,382211628,b'always guaranteed to be single? or just for now?'
19971,382212658,b'What does it mean to have entityType not having either of the mapping? What is it mapped to? Future-proofing?'
19971,382213130,"b""This is basically an assertion that this implementation expects a specific implementation of the interface. Even if it doesn't make a difference now, it allows more flexibility in the future."""
19971,382213895,"b""Yes, that's the design..."""
19971,382215906,"b""Yes. What's your suggestion?"""
19971,382216209,b'This is to make sure it throws when we add tests when there are more than one'
19971,382216764,b'Chart helped.'
19971,382217793,"b""Technically we'll support types that aren't mapped to anything for query or for updates. So write-only or read-only.\r\nIn practice this is likely an error in configuration, so we'll put a nice exception here."""
19971,382257152,b'Why obsolete? '
19971,382261168,b'Renamed'
19948,379921066,b'I had to null off this test in SQLite as it fails the result verification. The query produces `<orderId>` but the expected results are `<orderid><customerid>`. The other frameworks seem to handle this fine. Is this expected?'
19948,381617483,"b""it's a bug in sqlite - whenever possible we should be returning results matching Ling to Objects"""
19948,381618171,b'we should be using `||` operator for string concat in this case'
19948,381628709,b'filed #19990'
19948,381632905,"b""@Muppets - we looked at the issue briefly with @smitpatel and it's potentially quite a complicated problem to fix properly. So for now, you can just skip the test on sqlite using 19990 as reason (rather than null it out)"""
20011,382363352,b'We should actually log a warning for this case.'
20011,382364960,b'Filed https://github.com/dotnet/efcore/issues/20014'
19937,381609938,b'It would be faster to make these static and initialize them in a static constructor using a `foreach`'
19937,381611287,b'Avoid compiling'
19937,381611900,"b""Why can't we handle the simpler overload?"""
19937,381744800,"b'we are using this overload when the argument to the terminating method needs to construct DbSets - normally the argument is just a Func<TResult>, without ISetSource available. '"
19937,382249513,"b""Can we make this parameter optional and just assume it's `ExpectedQueryRewritingVisitor` if a different one isn't specified?"""
19937,382251715,"b""Introduce a new type for this so it's easier to figure out what is expected to be passed in.\r\nNote you can still use the collection initialized syntax if you have a public `Add` method."""
19937,382351470,b'added a comment explaining the use instead'
20010,382278461,b'@ajcvickers Is it worth trying to pattern match this for wrapping providers?'
20010,382714563,"b""Thinking about this more:\r\n* If something is functionally required, we'll try pattern matching and warn if we can't.\r\n* If it's not required (like this example), we'll just silently skip it"""
20025,382835026,b'`IsNullable`'
20010,382856519,b'@bricelam Sounds reasonable. I wonder if there is any way we can figure out if wrapping providers are still important in the Core world?'
20024,382934152,"b'Oops, forgot to mark this as deterministic. Updating in PR #19617'"
19617,367784873,b'@smitpatel @maumar @roji Any thoughts on how we can get the options into here or the translators themselves?'
19617,367917987,"b'Afaik, `ISingletonOptions` @ajcvickers would know how!'"
19617,368020971,"b""Yeah, ISingletonOptions is for this. It means we have to build a new service provider if the options change from instance to instance, but it seems like that's unlikely here."""
19617,370309063,b'Mark these as deterministic so they can be used by indexes'
19623,370686163,"b'Feel free to disagree, but I mention the following because EF has been plagued by performance issues in the past.  The Dictionary type works here, but I think it may be unnecessarily heavy when an array of ints will do the job.  Consider changing this to:\r\n\r\nvar indexMap = new int[projectionCount];'"
19623,370686837,"b'With the first suggestion above, this line would change to:\r\n\r\nindexMap[mappedIndex] = AddToProjection(MakeNullable(addedSelectExperssion.GenerateOuterColumn(projection.Expression)));'"
19623,370688592,b'Completely agree!'
19623,370690331,b'Option B: Consider changing this to a select statement:\r\n\r\nvar indexMap = addedSelectExperssion.Projection\r\n.Take(projectionCount)\r\n.Select(AddToProjection(MakeNullable(addedSelectExperssion.GenerateOuterColumn(projection.Expression)))\r\n.ToArray(); // This last one may not be necessary'
19623,376169374,b'Remove all changes in this method. It is irrelevant and incorrect for the issue.'
19623,376169437,b'use int array'
19623,376169634,b'Add another ctor (this one would be called from AddSingleResult still) which takes indexMap rather than projectionOffset. The ctor must take either but not both at same time.'
19623,376169728,b'make it condition if it needs to use projectionoffset of _indexMap.'
19623,383510472,b'This is still unresolved.'
20049,383529817,b'We could also short-circuit if explicitly configured keyless. (Code after will anyway not replace in that case).'
19575,366203698,"b""I don't think we need a new attribute for this type of entity type. Instead it can be discovered by `RelationalDbFunctionAttributeConvention` as a keyless entity type mapped to a view named after the function. Then stored in `DbFunction` as `IQueryableEntityType` property. Model validation would then check that it's not null for an `IQueryable<>` IDbFunction."""
19575,366232073,b'```suggestion\r\n                    if (model.FindEntityType(dbFunction.MethodInfo.ReturnType.GetGenericArguments()[0]) == null)\r\n```'
19575,366232226,b'```suggestion\r\n            if (dbFunction == null\r\n```'
19575,366232524,"b'```suggestion\r\n        SelectExpression Select([NotNull] IEntityType entityType, [NotNull] SqlFunctionExpression expression);\r\n```'"
19575,366484022,b'I undetstand that QueryableFunctionResultType is a bit of a hack per a conversation I had with @bricelam.  #2725 is needed for the real fix. \r\n\r\nThe code does support keyed result types which are not full entities (no table wanted).  If there is a valid key we can use it to project the results into a collection.  Views only support keyless types so going that route will break that feature.\r\n\r\n\r\n\r\n'
19575,366528850,"b""We already have a hack in place, that's the view mapping. The entity type doesn't need to be keyless to be mapped to a view, so if keyed entities are supported the convention doesn't need to configure them as keyless. If it is indeed keyless the user will be able to configure it afterwards."""
19575,366580722,b'Ok so if I am following you - you are saying move the entity registration into ```RelationalDbFunctionAttributeConvention ``` and use ```.Toview``` instead.  \r\n\r\nI am not following the need for storing an ```IQueryableEntityType``` in ```DbFunction```  Model validation currently checks that the result type is mapped as an entity for QueryableFunctions.\r\n\r\n'
19575,366582450,"b""If you just use the CLR type to lookup the entity type you won't be able to use weak nor shared type entity types. However this would be useful if you have more than one function returning the same type or if you actually want to also map it to a table."""
19575,375007495,"b""I've been working on https://github.com/dotnet/efcore/issues/12846 and changed my mind on how this should be implemented. Instead the mapped functions should be stored in an annotation on the entity type. And yes, you would need to look through all entity types to find the corresponding one for a given function, but once https://github.com/dotnet/efcore/issues/12846 is committed it will make this fast. It will also add a non-hacky way of not creating a table in migrations.\r\n\r\nMoreover multiple functions can be mapped to the same entity type, so it would be better to configure the mapping from the function side. Also a function can be designated as the default mapping so you can query using the entity type as root (e.g. `context.TopSellingProducts.ToList()`).\r\n\r\nPerhaps we could also allow mapping an entity type to a function without having to add a method for it."""
19575,376799112,b'Ill keep my eye on #12846  Is there a time frame of when this work will be done?  I am holding off on making any code changes for now until I get feedback from @smitpatel on the PR.  '
19575,376824212,"b""#12846 Should be mostly done this week (unless something unexpected comes up). Note that the relational model is built after the base model is validated, so we'll still need all the annotations to store the configuration up to that point at least."""
19575,377278229,b'Is there any specific value on supporting this?'
19575,377972464,"b""If you want to pass a scalar function as a parameter to a queryable function then it needs to be passed as an expression.  Otherwise it will be evaluated locally.\r\n\r\nSee QF_Stand_Alone_Nested for an example.\r\n\r\nIs this going to be a big use case - probably not, but it didn't require any extra code in the backend.  It just works so I tossed in a unit test."""
19575,377973278,b'If we are looking to support lambdas then probably should take parameter lambda too rather than just parameter-less.\r\nBtw does using let in the query and passing that work?\r\n\r\nP.S. this lambda reminds me of Skip/Take with lambda we had to introduce in EF6 for parameterization. '
19575,377976917,"b""Are you talking about the specific method that takes the Expression\r\n```csharp\r\nGetCustomerOrderCountByYear(Expression<Func<int>> customerId2)\r\n```\r\nor the fact that the body has the lambda in it?\r\n```csharp\r\nreturn CreateQuery(() => GetCustomerOrderCountByYear(customerId));\r\n```\r\nAll Queryable Functions will be executed at runtime, there is no way to prevent that based on how linq works.  We need to convert that call into an IQueryable<T> which can then be built into the Expression Tree.  \r\n\r\nThe way I achieve that is by passing into CreateQuery a lambda with the function call to itself.  That in turn gets passed to ContextDependencies.QueryProvider.CreateQuery which returns an IQueryable<T> that can get passed back to linq.  \r\n\r\nThat seemed like the most user friendly way for the end users to build the Expression we need to pass to ContextDependencies.QueryProvider.CreateQuery.  I'm open to other ideas.\r\n"""
19575,379099452,b'the method taking Expression<Func<int>>\r\n\r\n'
19575,380362478,"b""I'm not sure if let works.  Ill have to think of a test case and then give it a try."""
20033,383555521,b'no model.'
20033,383838034,"b'Make sense, done.'"
20037,383156155,"b'Might as well just initialize the instance here and clear every time, no?'"
20037,383156648,"b""This can be done with the new null-coalescing assignment (i.e. `sql ??= new StringBuilder()`) although as I wrote above that doesn't seem necessary here, just initialize once for the function."""
20037,383173542,"b""The loop is not always entered as there is an `if` condition. I've done it this way to avoid newing up a `StringBuilder` and allocating the default capacity when the condition is not met for all iterations which in such case this method would be a regression compared to the original."""
20037,383178093,"b'Keeping the original declaration as null, this can definitely be done but will add a single un-necessary `StringBuilder.Clear()` call which most likely is very cheap.'"
20037,383840769,"b'This is a convention executed only once when the model is finalized, so definitely not perf-sensitive code - this is why I prefer keeping code simple rather than caring for the needless allocation of a single StringBuilder.'"
20037,383840916,"b'As above, an extra Clear is pretty meaningless in this context.'"
20037,384024511,b'`var`'
20053,383606877,b'Extra whitespace'
20053,383623851,b'Will do cleanup when I submit query changes PR.'
20053,383624929,"b""I don't think I have ability to make changes on this PR anymore since the source is now based from a branch in the main repo."""
20050,383629079,b'It is not model validation warning.'
20050,383629253,b'Error message should be more informative and connected to user. Like Entity is marked as KeyLess so ignoring KeyAttribute on property.'
20050,383629474,b'Think about what should be logged message if entity is explicitly marked as keyless rather than data annotation. Both could warn differently to make it easier for user to understand the error.'
20050,384030969,"b'OK. Your choices of category are Update, Query, Infrastructure, Model, ModelValidation, ChangeTracking or create a new category. I had missed that Model was different from ModelValidation but looks to me that Model would be best here. Let me know if not.'"
20050,384036815,"b""Had a chat with @ajcvickers about this morning. We discussed:\r\n\r\n1. marked as `HasNoKey` using fluent API, and (either later or earlier) marked as having a key using the `HasKey()` fluent API\r\n2. marked as `Keyless` using data annotation and marked as having a key using the `HasKey()` fluent API\r\n3. marked as `HasNoKey` using fluent API, and there's a `Key` data annotation\r\n4. marked as `Keyless` using data annotation, and there's a `Key` data annotation\r\n\r\nSituation 1: whichever fluent API is last wins and no warning (as for other fluent API).\r\nSituation 2: the fluent API overrides the annotation - no warning and entity ends up with a key.\r\nSituation 3: again the fluent API should win, no warning because fluent API always wins and the entity ends up with no key\r\nSituation 4: log the warning, the `Keyless` attribute wins so the entity ends up with no key.\r\n\r\nI need to update the PR to encode Situation 3. Let us know if you disagree."""
20050,384037124,"b""I'll update."""
20050,384068483,b'@AndriySvyryd knows best.'
20050,384070125,"b'It could be either, but we only use ModelValidation for warning that come directly from the ModelValidator'"
20050,384107100,"b'Note: it turns out that Situation 1 is not ""last wins"". We already throw an `InvalidOperationException` if either of these cases occurs. I\'m not planning to change that. '"
20050,384119241,b'Updated to use Model.'
20050,384119312,b'Done'
20050,384119620,b'Done with the 2nd commit.'
20050,384137478,b'If `GetIsKeylessConfigurationSource` is `Explicit` you can return without warning.'
20050,384138575,b'Should use Attribute in the name.'
20050,384178889,b'Updated'
20050,384178964,b'Updated'
20012,384097991,b'`_ambientTransactions.Count > 0`'
20015,382405736,b'Add a nav to `LazyNonVirtualOwnedNavEntity`'
20015,382627552,b'Added in new commit.'
20015,382844136,"b'This is wrong. Even if navigation is eager loaded but explicitly disabled eager loading, then user may want it to lazy load.'"
20015,382846566,"b""Not sure what you mean. How does the user explicitly disable eager loading? We only set this up if the foreign key has `IsOwnership == true` and in that case it will always be eager-loaded, right? Could you provide a scenario that wouldn't work?"""
20015,382847360,b'#2953 enables _NOT_ loading an eagerloaded navigation.\r\n#19355 is adding the API specifically for that.'
20015,382859681,"b'Sounds like we need some way to tell _within the context of any given query_ that a particular navigation has had it\'s ""normal"" eager-loading overridden to be lazy-loaded. Before you run the query could you go over your copy of the model and add another, new annotation, e.g. `LazyLoadingRequired`, to all navigation properties for which `IgnoreLoadWith()` is defined? I could then look for that annotation during this part of the code. (I would say just remove the `IsEagerLoaded` annotation but you\'d have to remember which ones you removed and put them all back on when you\'re done with the model, whereas if you add a new one, at the end of every query you can just go through and remove all such annotations.)'"
20015,382867873,"b'- When you are running query model is immutable.\r\n- Nothing should be required when running query. Lazy loading should work on its own. If lazy loading is configured then should it lazy load this navigation. We ignore properties same way we need to ignore navigations which are part of ownership.\r\n- LazyLoading configuration is orthogonal concept to IsEagerLoaded. IsEagerLoaded has nothing to do with owned entity. Owned entities set that right now but any navigation can be marked as EagerLoaded.\r\n\r\nEssentially this PR should not utilize `IsEagerLoaded` flag in any way. Either duplicate code about checking ownership (which was here before), in model validator and lazyloader both or add a separate annotation to navigation which determines if the navigation is allowed to lazy load. Implementing the latter will create infrastructure for https://github.com/dotnet/efcore/issues/10787'"
20015,382872039,"b""> If lazy loading is configured then should it lazy load this navigation\r\n\r\nCan we define what you mean here? Do you mean if either `UseLazyLoadingProxies()` has been called or if the entity has an explicit `LazyLoader` property/action?\r\n\r\nIf that's the case, but the model defines a navigation to an owned entity/ies, then the owned entity/ies will be loaded when the owner is loaded regardless of having set the above.\r\n\r\n> LazyLoading configuration is orthogonal concept to IsEagerLoaded \r\n\r\nThis seems a really weird statement to me. To me eager-loading is the opposite of lazy-loading. Seems like one of those things is misnamed.\r\n\r\nThat said I'm happy to use a different annotation, say `IsLoadedByOwner`.\r\n\r\nBut regardless of that [this comment](https://github.com/dotnet/efcore/issues/2953#issuecomment-572442482) mentions being able to define whether to ignore that setting _on a query-by-query basis_. Given that that is specific to the query and not to the model it feels like we'll have to pass something in when running the query."""
20015,382872623,"b'> This seems a really weird statement to me. To me eager-loading is the opposite of lazy-loading. Seems like one of those things is misnamed.\r\n\r\nIsEagerLoaded flag only says if it should be eager loaded in query. It does not say it _must_ be eager loaded. A navigation with IsEagerLoaded=true can still be not loaded in EF Core.\r\nAllowing lazy-loading configures if the navigation can lazy load the navigation is not already loaded.\r\n\r\nAn navigation can be marked as IsEagerLoaded=false and at the same time LazyLoadingAllowed=false. They are not opposite, they are orthogonal concept and it can take up all combinations.'"
20015,382872655,b'Please bring a proposal to design meeting.'
20015,382878739,"b""> A navigation with IsEagerLoaded=true can still be not loaded in EF Core\r\n\r\nThat sounds to me like we named the flag `IsEagerLoaded` badly.\r\n\r\nThat said, I understand you want these two concepts (whatever they're called) to be orthogonal - and I'm happy to support that with a separate annotation. (I've just submitted a commit for that). But I don't understand what you want me to do about the query-by-query override of this in [the comment](https://github.com/dotnet/efcore/issues/2953#issuecomment-572442482)  I referenced above."""
20015,382878847,"b""Note: I'm happy to move this to `INavigation` if we think it's worth it. Everything else in here is Obsoleted but I wasn't sure if we wanted to update the `INavigation` interface for this."""
20015,384723834,b'No longer doing this.'
20015,384725406,b'This should be discussed in the context of #10787. But no longer relevant here.'
20066,384696229,b'Assert this?'
18438,339307572,b'Can this allocation be avoided? I.e. when reading as Span?\r\nSame above in `GetBytes`.'
18438,339862862,"b""Hi @gfoidl \r\nI didn't find any practical example that fit into this scenario using Spans, maybe this change would imply in a deeper refactoring? Can you provide some samples on how we could use Span in this context? Thanks!"""
18438,339991566,"b'I\'m not familiar with this class, so I just focused on the allocation.\r\nI don\'t know if this approach with getting the stream, then reading with StreamReader / BinaryReader is better (i.e. more efficient as the title proposes) as getting a cached blob or a string directly.\r\nAlso why do you read as much as possible, then just copy the relevant parts?\r\n\r\nAs said, I\'m not familiar with this code, so maybe I\'m wrong with my statement.\r\n\r\n---\r\n\r\n`ToCharArray` allocates an array, thus increasing the pressure on the GC. This can be avoided. \r\nEspecially as `ReadToEnd` allocates already a string. So we have two allocations that can be avoided, if we spanify the code.\r\n\r\n<details>\r\n   <summary>Typical pattern for stackalloc / array-pool</summary>\r\n\r\nIf the ""size"" is small enough, create the `Span<char>` from stack-space, otherwise rent an array from the pool.\r\n```c#\r\npublic virtual long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length)\r\n{\r\n    Stream textStream = GetStream(ordinal);\r\n    int charsToRead = (int)Math.Min(textStream.Length - dataOffset, length);\r\n\r\n    char[] bufferToReturnToPool = null;\r\n    try\r\n    {\r\n        Span<char> tmpBuffer = charsToRead <= 256\r\n            ? stackalloc char[256]      // stack allocating with a const is cheaper than with arbitrary size\r\n            : ArrayPool<char>.Shared.Rent(charsToRead);\r\n\r\n        using var streamReader = new StreamReader(textStream, Encoding.UTF8);\r\n        int read = streamReader.Read(tmpBuffer.Slice(0, charsToRead));\r\n\r\n        tmpBuffer.Slice(0, read).CopyTo(buffer.AsSpan(bufferOffset));\r\n\r\n        return charsToRead;\r\n    }\r\n    finally\r\n    {\r\n        if (bufferToReturnToPool != null)\r\n        {\r\n            // If security is a concern, so clear the buffer before returning\r\n            // to the pool\r\n            bufferToReturnToPool.AsSpan(0, charsToRead).Clear();\r\n\r\n            ArrayPool<char>.Shared.Return(bufferToReturnToPool);\r\n        }\r\n    }\r\n}\r\n```\r\n</details>\r\n\r\nIf `buffer` (the one from the arguments) is safe to use, one can avoid the `tmpBuffer` and the copying, and use `buffer` as span directly. \r\nThe example above is the ""more safe"" version, though.'"
18438,342895498,"b""@bricelam \r\nCan you help us with some guidance here? I think that @gfoidl has a good argument about memory allocation in that case, but I really don't know what's the impact of these design changes and if it's feasible."""
18438,372694496,"b'``` csharp\r\nblob.Position = dataOffset;\r\nreturn blob.Read(buffer, bufferOffset, length);\r\n```'"
18438,372695998,"b""``` csharp\r\n// Seek to dataOffset. NB: Don't use Position or Seek since one char could be\r\n// anywhere between one to four bytes in UTF-8\r\nfor (var position = 0; position < dataOffset; position++)\r\n    if (streamReader.Read() == -1)\r\n        throw new ArgumentOutOfRangeException(nameof(dataOffset), dataOffset, null);\r\n\r\nreturn streamReader.Read(buffer, bufferOffset, length);"""
18438,382857214,"b""The rowid column ordinal won't change between rows. No need to ever reset it once it's found--a new SqliteDataRecord will be created in the cases where it will change."""
20012,385328095,b'could make count check.'
20083,384903129,b'Bugfix: Queryroots of share type entity types are identified as same causing incorrect query cache hit.'
20083,384903550,b'Update to provide string argument for shared type entity type.'
20091,385395566,b'Check.NotNull?'
20091,385403407,"b""Let's drop `Expression<Func<T>>`  for now and file issue to add support later."""
20091,385413152,b'Filed https://github.com/dotnet/efcore/issues/20093'
20035,385941783,b'Check for `== typeof(decimal)` instead of `_functionModuloTypes.Contains`. Also remove decimal from the corresponding `_restrictedBinaryExpressions` lists.'
20035,385943366,"b'Can have a single `ef_compare` function that returns -1, 0, or 1.\r\n\r\n```cs\r\nCreateFunction(\r\n    ""ef_compare"",\r\n    (decimal? left, decimal? right) => left.HasValue && right.HasValue\r\n        ? decimal.Compare(left.Value, right.Value)\r\n        : default(int?),\r\n    deterministic: true);\r\n```\r\n\r\n.NET | SQL\r\n--- | ---\r\nm1 > m2 | ef_compare($m1, $m2) > 0\r\nm1 >= m2 | ef_compare($m1, $m2) >= 0\r\nm1 < m2 | ef_compare($m1, $m2) < 0\r\nm1 <= m2 | ef_compare($m1, $m2) <= 0\r\n\r\nHere, the expression here for GreaterThan would be:\r\n\r\n```cs\r\nreturn SqlExpressionFactory.GreaterThan(\r\n    SqlExpressionFactory(""ef_compare, ...),\r\n    SqlExpressionFactory.Constant(0));'"
20035,386012095,"b'Did so, thanks.'"
20035,386012140,b'Changed it to a single `ef_compare` function.'
20035,386530544,"b'I think type and type mapping are throwing it off. Try using:\r\n```cs\r\ntypeof(int),\r\nnull);\r\n```'"
20035,386670328,"b'Well, that fixed one of the test failures.'"
20035,386672064,"b""Ah, you're not using `sqlBinary.OperatorType` as a condition here, so it's now translating every decimal operation. Limit this to GreaterThan, GreaterThanOrEqual, LessThan, and LessThanOrEqual to fix the other test failures"""
20035,387114556,"b'Thanks! Ironically, I had this check before but then refactored it out, thinking that this useless ""comparison"" is not necessary at this point, as it is anyways done later on (`DoDecimalCompare`). Obviously it is. Now all the tests pass again.'"
20132,387210995,"b'Hmm, this only takes the current migration into account. The snapshot will just break again on the next migration.'"
20126,387214404,"b'lol, should we add something like this? ""Might we suggest using \'InitialCreate\' for your first migration?""'"
20126,387215768,"b""That's fine by me (unless of course that's what they've called their context class \xf0\x9f\x98\x84)."""
20060,384093300,b'This controls what Arcade will install but not the `dotnet` version used during a build. This may be :ok: but only if all branches in this repo use the same SDK version.'
20060,384094873,b'My fear is that it will hinder contributors if they don\xe2\x80\x99t have the exact patch version of the SDK installed.'
20060,384108556,"b'Doing a build will install the SDK listed here. I was specifically suggesting restoring\r\n``` json\r\n""sdk"": {\r\n    ""version"": ""3.1.102""\r\n}\r\n```'"
20060,384191280,b'I mean: they open the sln directly and only have SDK 3.1.100 installed. That property will cause an error (for no legitimate reason)'
19744,382841444,"b""Let's discuss this in person."""
19744,382842682,b'is ConstantExpression would remove the explicit cast.'
19744,382843012,b'use Expression directly rather than ET type enum. It is mixed here.'
19744,382843194,b'Why does byte array has Queryable.Contains?'
19744,382850347,"b'from s in ctx.Squads\r\nfrom l in ctx.LocustLeaders\r\nwhere s.Banner.Contains(l.ThreatLevelByte)\r\nselect new { s, l }'"
19744,382850490,b'will change comment to indicate its Queryable.Contains(byte_array) rather than instance method'
19744,382851218,b'But how is byte array having Queryable.Contains? What is the type of `s.Banner`?'
19744,387299405,b'DRY'
19744,387299868,b'check `!itemNullable` first for optimization.'
19744,387301663,b'Can you file an issue (if not already present) to clean this up for byte array. Optimizations should run after nav expansion.'
19744,387405473,b'#20155'
20130,386718337,b'This should be done in the `EntityType` constructor to cover all scenarios.'
20130,386747771,b'@ajcvickers What do you think? The `EntityType` constructor as @AndriySvyryd says would cover more scenarios.'
20130,387313813,"b'@lajones Yes. The bug indicated a bad model. We should prevent building bad models, not just throw a better exception if the model is bad.'"
20130,387324764,"b""Ignore this. This was already checked in - see [20143](https://github.com/dotnet/efcore/pull/20143). It's some kind of merge issue."""
20130,387324861,"b""Ignore this. This was already checked in - see [20143](https://github.com/dotnet/efcore/pull/20143). It's some kind of merge issue."""
20130,387325593,b'Updated.'
20130,387404357,b'You should squash and rebase on latest master'
20130,387405867,"b""I've force-pushed this branch - this issue has gone away."""
20141,387249894,b'typo'
20141,387254335,b'Why adding only when initializing sorted set?\r\nAnd if this is true then SetOrRemoveAnnotation can also be put inside this block since nothing else is modifying foreignKeyConstraints.'
20141,387255531,b'Like above.'
20141,387268715,"b""It's a shame we can't move this type."""
20141,387272929,"b""Given the history of DeleteBehavior, I'd rather not have a default block here. Make it throw if (but hopefully not when) we introduce new values."""
20141,387273950,"b""Isn't this wrong? The store should restrict."""
20141,387275452,b'This will anger the docs team. (and the StyleCop)'
20141,387334665,"b'Ha, I switched those lines'"
20141,387341409,"b'Sure, I just copied what was there in ModelDiffer'"
20141,387342111,"b""It's not so bad, I think Migrations is the only thing that will consume this anyway"""
20141,387342812,b'\xf0\x9f\xa4\xb7\xe2\x80\x8d\r\n@ajcvickers Thoughts? '
20141,387343803,"b""I'll do it the other way around then"""
20141,387345266,"b""Did this PR change this? (I don't remember the mappings off the top of my head.)"""
20141,387346261,"b'@ajcvickers No, this is what we have right now'"
20141,387346695,"b'Then it\'s probably what we decided. Whether or not it is ""correct"" is a different question.'"
20141,387377052,"b""**TLDR: It doesn't matter**\r\n\r\nIt's a bit confusing (as expected): for EF `ReferentialAction.NoAction` means use the database default and in most databases `NoAction` is the default. In most databases `NoAction` doesn't mean that no error is thrown, it means that the error is delayed until the transaction is committed. Also in SQL Server there's no `Restrict`.\r\n\r\nEF currently doesn't support deleting and inserting the same (principal) row in a single transaction, so `NoAction` and `Restrict` are equivalent, but if we ever do then `NoAction` would be better."""
20141,387405803,"b'Fine to leave as is for now, but I want to do a deep review of these. I remember Diego and I really wanted to break something here.'"
20035,387420456,b'what is oracle!?'
20035,387439135,b'oracle: a person or thing regarded as an infallible authority or guide on something.'
20035,387471042,b'Kind of like a sentinel but non-arbitrary and with canonical semantics'
20035,387807541,"b""Exactly. The oracle predicts the expected result (which in this case is 0). But if desired, I'm happy to rename it to, e.g., `expectedResult` or sth similar."""
20081,384820847,b'Comment needs to update for constant/parameter'
20165,387917023,b'remove'
20165,387917156,b'same here'
20165,387917632,b'The linked issues will add exception message and these tests will verify exception only hence I have not removed them.'
19744,387937456,b'What are these conditions on parameter/constant doing here? I removed them an no test failed.'
20177,387991866,b'Can move this outside instead of repeating here and below.'
20177,387996115,b'visiting arguments will override _nullable value'
20177,387997199,"b""OK, thanks for explaining - stateful visitor pattern isn't easy :)"""
20177,387997602,"b'This makes me think again it may make sense to keep having VisitInternal *returning* the nullability of the visited node, and restoring _nullable to what it was when it was called. This would make it clearer to see what gets modified when.'"
20187,388550235,b'@Pilchie does this need another OSS review?'
20187,388556573,b'No - we just need to watch for CG results.'
20193,388591295,b'Good chance for a local function: `HasSiblings`'
20193,388593445,b'update'
20193,388593684,b'```suggestion\r\n        ///     Sets the value indicating whether the discriminator mapping is complete.\r\n```'
20193,388594323,b'`complete` should be nullable and this should be `SetOrRemoveAnnotation`'
20193,388594440,b'Same as above'
20193,388594820,b'Missing blank line'
20193,388595150,b'Typo'
20193,388595811,b'Also add code to generate Fluent API for this in migrations snapshot'
20193,388597589,b'Looks inverted'
20193,388598579,b'Also add tests to the ModelBuilding InheritanceTestBase including setting IsComplete from a derived type'
20193,388633062,b'```suggestion\r\n                return entityType.BaseType?.GetDirectlyDerivedTypes().Any(i => i != entityType) == true;\r\n```'
20193,388633303,b'And invert the call'
20193,388633946,"b""Don't need to specify value"""
20185,388668880,b'This is interesting change. Why does a private static function needs to be made non-static if implementation did not change to start using instance data?'
20185,388671485,"b'Started to refactor it, but decided against it'"
20140,388728122,"b""The place we know that there too many includes in relational, we don't have actual expression tree."""
20140,388970686,b'@smitpatel I can update it to take whatever you have available.'
20140,388983093,"b""Let's discuss in triage today."""
20140,389216074,"b'Don\'t forget to replace the `...`\r\n\r\nAnd add ""To identify the query that\'s triggering this warning call `.ConfigureWarnings(w => w.Throw(RelationalEventId.LogTooManyIncludesWarning))`""'"
20195,388660237,"b""I could create a base `PropertyBaseBuilder` class from which both `NavigationBuilder` and `PropertyBuilder` would then inherit. @AndriySvyryd let me know if you think it's worth it. """
20195,388660870,"b""Similarly here I could create a base `InternalPropertyBaseBuilder` class which both `InternalNavigationBuilder` and `InternalPropertyBuilder` would then inherit from. @AndriySvyryd again let me know if you think it's worth it. """
20195,388669853,"b'No, we prefer keeping the builders separate as that gives us more flexibility to change the API in the future'"
20195,388670290,b'Doing this for `InternalNavigationBuilder` does make sense'
20195,388670965,b'Use `ManyToOneTestBase` and extend the test wrappers'
20195,388671354,b'OK. Sounds good.'
20195,388671477,b'Will do.'
20195,388672383,"b""I could do that, but presumably (once I have them) I'd also need to update `OneToManyTestBase` and `OneToOneTestBase`. Isn't there something to be said for keeping all the tests I'm writing together?"""
20195,388672902,"b'No, current grouping based on relationship cardinality still makes sense for them'"
20195,388675011,b'This should first do normal construction using WithOneBuilder and then call navigation configuration.\r\nCan pick up navigation from FK returned by it.'
20195,388675225,b'Can pick navigation from relationship directly.'
20195,388699949,b'Will do.'
20195,388700016,b'Will do'
20195,388712826,b'OK. Will update that tomorrow.'
20195,389227954,b'Done'
20195,389228929,b'You can assume that `foreignKey` is not null here and in other cases.'
20195,389229900,b'Add `navigationConfiguration` parameter to `WithOneBuilder` to avoid repetition'
20195,389232439,"b""You can't assume that the navigation is on the dependent, since this might be a 1:1 relationship. Use this to get the navigation:\r\n```suggestion\r\n            if (navigationConfiguration != null\r\n                && navigationName != null)\r\n            {\r\n                var navigation = Builder.Metadata == relatedEntityType || foreignKey.PrincipalEntityType == relatedEntityType\r\n                        ? foreignKey.DependentToPrincipal\r\n                        : foreignKey.PrincipalToDependent;\r\n```"""
20195,389232556,b'OK. Will do.'
20195,389232814,"b'Extract `IConventionNavigationBuilder` and implement `IInfrastructure<IConventionNavigationBuilder>` instead of `IInfrastructure<InternalNavigationBuilder>`, see https://github.com/dotnet/efcore/issues/18561'"
20195,389233270,b'That works. But I have 1:1 test cases both ways round. What test case am I missing?'
20195,389233496,"b'I could do this, but in both this and `ReferenceNavigationBuilder` only 2 calls share the `WithOneBuilder` and I think the code looks more uniform this way- so is it worth it?'"
20195,389234255,b'Also `WithOneBuilder` is `protected virtual` and so could be overridden. It feels like it should just be responsible for returning the builder and not for that + the side-effect of calling `navigationConfiguration`. '
20195,389235953,"b'I think this test would fail with current code:\r\n\r\n```C#\r\nmodelBuilder.Entity<NavDependent>()\r\n    .HasOne()\r\n    .WithOne(\r\n        e => e.Dependent,\r\n        nb => nb.UsePropertyAccessMode(PropertyAccessMode.Field))\r\n    .HasForeignKey<NavDependent>();\r\n    \r\nmodelBuilder.Entity<OneToOneNavPrincipal>()\r\n    .HasOne(\r\n        e => e.Dependent,\r\n        nb => nb.UsePropertyAccessMode(PropertyAccessMode.Property))\r\n    .WithOne();\r\n    \r\nvar principal = (IEntityType)model.FindEntityType(typeof(OneToOneNavPrincipal));\r\n\r\nAssert.Equal(PropertyAccessMode.Property, principal.FindNavigation(""Dependent"").GetPropertyAccessMode());\r\n```\r\n\r\nAlso add some update and query tests  to make sure the field is used by having the entity types look like:\r\n\r\n```C#\r\n        private class OneToOneFieldNavPrincipal\r\n        {\r\n            public int Id { get; set; }\r\n            public string Name { get; set; }\r\n            \r\n            public NavDependent _dependent;\r\n\r\n            public NavDependent Dependent\r\n            {\r\n                get => throw new NotImplementedException();\r\n                set => throw new NotImplementedException();\r\n            }\r\n        }\r\n```'"
20195,389236307,"b""We already have a common method, so moving this logic there will net less lines of code.\r\nYou can rename `WithOneBuilder` to something that better represents the new responsibilities.\r\nIt's documented as internal and we don't expect anyone to actually override it, it's only virtual due to our policy of having all public and protected methods virtual."""
20195,389321235,b'OK. Done.'
20195,389321272,b'I added the first test. Working on the 2nd.'
20195,389321279,b'Done.'
20195,389324606,b'Added the 2nd test.'
20195,389324859,b'Removed too many of the ?s. I will add the `foreignKey?` back in here. If `skipNavigation` is not null above then `relationship` can be null. Similarly for any other such cases.'
20195,389329960,"b""I'd suggest extracting this to a common method as well"""
20195,389330047,b'Add the internal XML doc'
20195,389330151,b'Use `pointsToPrincipal` to determine which navigation to configure'
20195,389332266,b'I looked into it. They all do slightly different things - `navigationName` vs `navigationMember` etc.'
20195,389332902,b'Done.'
20195,389332905,b'Done'
20195,389332912,b'Done'
20195,389336246,"b""That's fine, you can abstract them as `MemberIdentity`, see `WithOneBuilder`"""
20195,389354280,b'Done'
20222,389410090,"b""Note: I'm open to renaming this and the one below.\r\n**Advantages**: it makes the Owner-to-Owned-Type relationship clear.\r\n**Disadvantages**: it's easy to get `OwnerToOwnedNavigation` and `OwnedToOwnerNavigation` mixed up."""
20222,389410710,b'This method is not needed. just add the parameter to `WithOwner()`'
20222,389411930,"b""Thinking about this name the alternative of having `OwnsOne` with two lambdas doesn't appear that bad.\r\n\r\nYou can rename this to `WithOwnedNavigation` for now and we can discuss in design meeting."""
20222,389419529,"b""There is a problem with putting 2 lambdas on `OwnsOne()`. We already have the two methods below. \r\n```C#\r\n        public virtual OwnedNavigationBuilder OwnsOne(\r\n            [NotNull] string ownedTypeName,\r\n            [NotNull] string navigationName)\r\n```\r\n\r\nand \r\n\r\n```C#\r\n        public virtual EntityTypeBuilder OwnsOne(\r\n            [NotNull] string ownedTypeName,\r\n            [NotNull] string navigationName,\r\n            [NotNull] Action<OwnedNavigationBuilder> buildAction)\r\n        {\r\n```\r\n\r\nBut if you add an extra _optional_ `Action<NavigationBuilder>` parameter to both and try to use them, the compiler complains saying it doesn't know whether you're calling the first one or the second one with the 4th parameter null. I.e. `nb => nb.UsePropertyAccessMode(...)` is valid on both of them."""
20222,389431093,b'We would only add it to the overload that has the `buildAction`'
20207,389815566,b'@ajcvickers '
20245,390681427,"b""Add that it's optional and describe what the default is if you don't provide one. Similarly in the other .psm1 below."""
20265,391821853,b'Extract to `GetDefaultIsDiscriminatorMappingComplete`'
20265,391880632,b'private method?'
20265,391935181,b'Yes'
20265,391935865,b'This will make more sense when we have https://github.com/dotnet/efcore/issues/9329'
20271,392347231,b'Should rename OneToOne -> OwnsOne'
20271,392347465,b'Should rename OneToMany -> OwnsMany'
20271,392446461,b'Why did you rename `NavigationBuilder`?'
20271,392446881,b'Why is this class needed?'
20271,392447462,b'Why is this class needed? This can be handled in the public builder'
20271,392452950,b'ManyToMany can result in there being `SkipNavigation`s instead of `Navigation`s.   '
20271,392454215,"b""`NavigationBuilder` is still there. `NavigationIdentityBuilder` is the class that works regardless of whether you're using `Navigation`s or `SkipNavigation`s. Works like `MemberIdentity`. """
20271,392465943,"b""`InternalEntityTypeBuilder` has references to `InternalNavigationIdentityBuilder` for its `Navigation()` methods (just as the `Property()` methods have `InternalPropertyBuilder`).\r\n\r\nIt has to be `InternalNavigationIdentityBuilder` and not `InternalNavigationBuilder` for the same reason as above - sometimes it's `SkipNavigation`s we're processing."""
20271,392467092,"b'Right, but the new `NavigationIdentityBuilder` handles those already'"
20271,392467593,"b""I just don't see why you would need to create a new class instead of making these changes to the existing `NavigationBuilder`"""
20271,392468099,"b""This can be handled in the new `NavigationIdentityBuilder`, we don't need an additional class"""
20271,392475915,b'Hmmm. Every other call in `InternalEntityTypeBuilder` looks like this. It seems very odd to be mixing the Internal and non-Internal parts. Can we discuss?'
20271,392476289,b'Hmm. It handles it by passing it to the `SkipNavigationBuilder`. '
20271,392477991,"b""But it doesn't need to, it can call to `InternalSkipNavigationBuilder` directly"""
20271,392509989,b'Do we need generic navigationBuilder?'
20271,392510156,b'NavigationBuilder.'
20271,392510287,b'Does it has to be concrete type Navigation?'
20271,392510412,b'Better to store than recompute?'
20271,392510699,b'pre-existing is really bad term here.'
20271,392510976,"b'Rename it, it is test only.'"
20271,392511382,"b'Please suggest alternatives. I don\'t want to get into ""that\'s no good either"" conversations.'"
20271,392511625,b'Please add the navigation to model before configuring it.'
20271,392516774,b'Sounds good.'
20271,392517997,b'Yes. `INavigation` and `ISkipNavigation` do not have `Builder` defined.'
20271,392519328,b'Would probably be better. @AndriySvyryd would you mind the extra class?'
20271,392519381,b'Not yet'
20271,392519895,"b""We'll could use it for `.HasField()`, but we don't *need* it"""
20271,392520341,b'NavigationBuilder clashes with class name.\r\nWe need the internal builder'
20271,392520457,b'Will do'
20271,392520782,b'This follows the pattern in other builders'
20271,392524313,"b""The `Metadata` property should be computed, it's rarely accessed.\r\nIf you are going to store it, then assign from `navigationOrSkipNavigation`"""
20271,392524508,"b""```suggestion\r\n    <value>There is no navigation property with name '{navigationName}' on entity type '{entityType}'. Please add the navigation to the entity type before configuring it.</value>\r\n```"""
20271,392524717,"b""I'll address in PR 20276 - I'm renaming them there anyway - as it will no longer be just the principal side being tested."""
20271,392524758,b'You should use names that are different from the CLR properties to get better coverage.'
20271,392525017,"b""@AndriySvyryd - any objection? I've already implemented storing it in this PR."""
20271,392525948,b'Will do.'
20271,392526849,b'You mean `(navigationOrSkipNavigation as Navigation)?.Builder.Metadata ?? (navigationOrSkipNavigation as SkipNavigation)?.Builder.Metadata`? That seems worse?'
20271,392527398,b'`Metadata = navigationOrSkipNavigation`'
20271,392528386,"b""I tried what I thought you meant and I get _The navigation property 'NonClrDependents' cannot be added to the entity type 'ManyToManyNavPrincipal' because there is no corresponding CLR property on the underlying type and navigations properties cannot be added to shadow state._\r\nCan you explain more?"""
20271,392528550,b'Doh!'
20271,392528651,"b'Oh, you also need to use shadow entity types'"
20271,392529403,"b""Just FMI why don't we do this on all of the builders?"""
20271,392529806,b'It uses more memory and is completely unnecessary'
20271,392532416,"b""Do you want to just go back to doing it your way then? It looked good to me but I'm happy to revert."""
20271,392532665,"b""I'd prefer that, but I don't feel strongly"""
20271,392532873,"b'Let\'s add that separately. It sounds likes that going to be tricky given the error above ""_cannot be added to shadow state_"". I\'ll add it to the issue to make sure I don\'t forget. I want to get feedback that the rest of the team likes this new approach before I flesh out the tests.'"
20282,392545203,"b""Don't call `GetSimpleMemberName()`"""
20282,392547159,b'And do what instead? `GetPropertyAccess().GetSimpleMemberName()` is used by lots of things - see e.g. the `Ignore()` method 2 methods below this one.'
20282,392547371,"b'Instead call\r\n```C#\r\nDependentEntityType.Builder.Navigation(\r\n                Check.NotNull(navigationExpression, nameof(navigationExpression))\r\n                        .GetPropertyAccess())\r\n```\r\nLosing the `PropertyInfo` can cause some minor perf degradation.'"
20282,392549338,b'Done'
20308,393612072,b'Also update Contains method in this class to do the same.'
20308,393731986,b'Done'
20323,394042296,b'Can we use NavigationBuilder/SkipNavigationBuilder. Intermediate terms in a variable names should not be shortened. '
20323,394042876,b'I think @AndriySvyryd answered this last time. NavigationBuilder clashes with the name of the class.'
20323,394043266,b'@AndriySvyryd - do we have another alternative?'
20323,394043409,b'We could call them InternalNavigationBuilder/InternalSkipNavigationBuilder?'
20323,394043635,b'Also add it to `IConventionNavigationBuilder`'
20323,394049264,b'Done'
20323,394049282,b'Done'
20325,394063163,"b'```suggestion\r\n        private LambdaExpression GenerateDiscriminatorCondition(IEntityType entityType, bool nullable)\r\n```'"
20326,394062831,b'Can remove the variable indent. It should work without putting the value in variable.'
20326,394062917,b'Remove'
20324,394047856,b'This should be based on `GetDiscriminatorProperty()` or Cosmos will fail'
20324,394048238,"b'Also TPT and TPC will fail, but in a different way'"
20324,394048486,b'Currently only handling TPH. I assumed this needs to be changed for TPC/TPT.'
20324,394049015,b'I think just checking `discriminatorProperty` would be enough in Core'
20324,394049077,"b""This passed on Cosmos too. We have server side filtering so even if there is discriminator property, we don't need to check it on client side while shaping if there is only 1 entityType."""
20324,394049459,"b'But that might change with https://github.com/dotnet/efcore/issues/20268, might as well have the better code now'"
20324,394051738,"b""`switch` won't work for #10140, but I guess we can leave it in for now and later revert this change"""
20324,394052215,"b'I can make else if too. Though based on #10140, we need to change this code path again so I wrote easy switch block.'"
20324,394054910,"b'Decision tree decided (online)\r\nSo decision tree\r\ncheck if there is discriminator property\r\n  - If Yes, then generate switch case with discriminator values. It could have only 1 label only if no hierarchy.\r\n  - If No, then return same entityType or concrete entityType is only 1 in the hierarchy.'"
20324,394057117,b'Remove comment'
20324,394057143,b'Extra blank line'
20324,394058135,"b""I don't think this branch is very useful, but you can leave it for now"""
20324,394058453,b'In what way? There are conditions coming in here for keyless entity with all null properties.'
20324,394058507,b'Cleaning up this file in next PR.'
20324,394059810,"b'I think it will be easier to handle the null conditions if we always generate a switch here, but as I said you can leave this in for now'"
20324,394062281,"b""If there are no discriminator property, then\r\neither there is only 1 concrete type which can be different from shaper.EntityType so we need to find that one. Switch would cover that automatically.\r\nIf there is more than one concrete type but still no discriminator property, something like TPT, then should we generate switch label for all concrete types, most of them won't be reachable ever or just for the shaper.EntityType?"""
20324,394062896,b'just shaper.EntityType'
20324,394064673,b'Covered in #20325 '
20321,394038561,b'I wish this class would have been named something like `InternalExpressionExtensions`'
20321,394041206,b'me too. Such a clash between our own code. \xf0\x9f\x98\xa2 '
20321,394417517,b'Technically we could rename all _internal_ extension method classes without it being a breaking change.'
20300,393103075,b'This method and associated code to handle this has to be cosmos specific and it should not live in EFCore project.'
20300,393104357,b'Makes sense. Will look into it.'
20300,393639955,"b""EF Core is now unchanged. I'm curious to hear your comment to the new approach. \r\n\r\nI've made the PartitionKey value part of the meta-data/query complilation context, as I don't its a natural part of the query. \r\n\r\nLooking forward to learn how this approach aligns."""
20300,393987585,b'nullability attribute and associated check'
20300,393988371,b'internal namespace.'
20300,393988717,b'dependency object?\r\n@ajcvickers - What is our approach here? Do we add dependency object for pub-internal provider specific types too?'
20300,393988811,b'.Internal'
20300,393989264,b'Override NormalizeQueryableMethodCall  instead.'
20300,393990263,b'the method WithPartitionKey also coalesce to null. Do it at only one place.'
20300,393990707,b'wrong rename'
20300,394022831,b'I was unsure about this approach too. Any suggestions for how to handle this instead? \r\n'
20300,394026784,b'Fixed'
20300,394026832,b'Fixed'
20300,394027242,b'Fixed in `CosmosQueryableExtensions` so left unchanged here.'
20300,394027372,b'Fixed'
20300,394028827,"b""I'm not entirely sure I understand what you exactly mean by this?"""
20300,394029634,b'Revert this'
20300,394031789,b'Since `CosmosQueryTranslationPreprocessor` is in .Internal this class is not necessary'
20300,394032341,"b""We don't need dependency objects for services in .Internal, so this approach is fine"""
20300,394033142,b'You can have a stronger condition here\r\n```suggestion\r\n            if (methodCallExpression.Method.GetGenericMethodDefinition() == CosmosQueryableExtensions.WithPartitionKeyMethodInfo)\r\n```'
20300,394033362,b'extra blank line'
20300,394034351,b'Type this as `CosmosQueryCompilationContext` and move the cast to `CosmosShapedQueryCompilingExpressionVisitorFactory`'
20300,394035357,"b'```suggestion\r\n            return new DocumentAsyncEnumerable(this, containerId, partitionKey, query);\r\n```'"
20300,394035606,b'Extra line'
20300,394036151,b'Later you are using `IsNullOrEmpty` so coalesce is not necessary here.'
20300,394039286,"b""I tested: `if (methodCallExpression.Method == CosmosQueryableExtensions.WithPartitionKeyMethodInfo)` \r\n\r\n... and it resolves to false when hitting the WithPartitionKey method. The original resolves to `true` under same circumstances.\r\n\r\nI'll take a closer look later. It's 1:00am in my time-zone at the moment."""
20300,394039725,b'Updated suggestion'
20300,394040854,b'\xf0\x9f\x91\x8d'
20300,394042536,b'```suggestion\r\n        public override Expression NormalizeQueryableMethodCall(Expression query)\r\n        {\r\n            query = base.NormalizeQueryableMethodCall(query);\r\n```'
20300,394043279,"b'Maybe I\'m just tired, but I get ""No suitable method for override"" with `public override Expression NormalizeQueryableMethodCall(Expression query)`\r\n\r\nWill look at it tomorrow.'"
20300,394043840,b'This PR is targeting release/3.1. It needs to target master branch.'
20300,394299340,"b""I've moved to the master branch. """
20300,394304367,b'retarget to master'
20300,394306559,b'```suggestion\r\nnamespace Microsoft.EntityFrameworkCore.Cosmos.Query.Internal\r\n```'
20300,394323085,"b'```suggestion\r\n            [NotNull] CosmosQueryCompilationContext cosmosQueryCompilationContext,\r\n```'"
20300,394324283,b'Is this still needed?'
20300,394422907,b'The Northwind test will fail unless also checking for `methodCallExpression.Method.IsGenericMethod`.\r\n\r\n'
20300,394453391,b'Can ignore this one as base would check.'
20300,394454444,b'Can skip these 2 also because base covers it.'
20321,394603969,b'but `.Infrastructure` is not `.Internal`'
20345,395371467,b'revert'
20345,395372681,"b""I don't like the code duplication between this and `ShapedQueryCompilingExpressionVisitor`, but don't have specific suggestions at this point"""
20345,395373791,b'Refer to commit message.'
20345,395373897,b'You mean EntityShaperExpression?'
20345,395375512,b'Whatever I reviewed previously looked very similar'
20345,395420745,b'Found a way to make it DRY. Will submit a PR.'
20360,395868433,b'facadeDependencies'
20360,395868496,b'IDatabaseFacadeDependenciesAccessor'
20360,395868586,b'IndexOf'
20360,395868647,b'ServiceCharacteristics'
20360,395868696,b'GetServiceCharacteristics'
20360,395868736,b'AddDependencySingleton'
20360,395868803,b'IsInOwnershipPath'
20360,395868862,b'GetAllBaseTypes'
20360,395868909,b'FindAnnotation'
20360,395868966,b'GetIdentifyingMemberInfo'
20360,395869006,b'CreateClrTypeDbSetMapping'
20360,395869052,b'Name'
20360,395869403,b'Distinct'
20360,395869457,b'Max'
20360,395869501,b'MetadataDebugStringOptions'
20360,395869549,b'AnnotationsToDebugString'
20360,395869691,b'ForeignKeyComparer'
20360,395869762,b'IsIntraHierarchical'
20360,395870207,b'Multigraph'
20360,395870362,b'IndentedStringBuilder'
20360,395870525,b'SemanticVersionComparer'
20360,395870604,b'ReferenceEqualityComparer'
20360,395870659,b'ExpressionEqualityComparer'
20360,395870730,b'GetIndex'
20360,395870764,b'GetAllBaseTypes'
20360,395870806,b'CreateKeyAccessExpression'
20360,395870938,b'GetTypesInHierarchy'
20360,395870977,b'IsQueryableType'
20360,395871189,b'Join'
20360,395871227,b'IndentedStringBuilder '
20360,395893400,b'Can we make all `EnumerableExtensions` shared internal?'
20360,395893692,"b'Can be public, needs better name'"
20360,395893731,"b'Can be public, needs better name'"
20360,395894020,b'Cast to `IConventionEntityType`'
20360,395894321,b'Can inline'
20360,395894858,b'We should probably move it to .Infrastructure'
20360,395895150,b'Can expose through a public extension'
20360,395895529,"b'Can be public, needs better name'"
20360,395895842,b'Can be public or inline'
18237,396685007,"b'@dotnet/efcore The purpose of this method is to determine whether, for scaffolding, we can infer the facets of the `TypeMapping` from a default type mapping, or whether we need to specify those facets explicitly, and if so what values we should specify. Currently this is used for `ColumnType` but it would also be needed for precision and scale.\r\n\r\nAs @bricelam said we have a choice here - to determine whether precision & scale need to be scaffolded we can either\r\n1. add in more special casing here for any type that might have precision and/or scale specified (`decimal`, `Datetime` etc), or\r\n2. we could move the code that determines this back into the type mapping itself and ask each type mapping to respond with this info i.e. something like `typeMapping.GetFacetsForScaffolding(..., out bool? scaffoldUnicode, out bool? scaffoldMaxLength, out int? precision, out int? scale)`. Or maybe the output is `IDictionary of facetName -> new value (null to indicate no change)`.\r\n\r\nThe former is quicker and easier; the latter would be more work but sets us up better for any future additional facets (though I know of no such facets planned). Can I get responses from the team on what we think would be best?\r\n'"
18237,396740953,"b""I don't think moving this logic to the type mapping would improve the robustness or maintainability. Instead we need to fix the code here and try to remove some assumptions (like special-casing certain types)"""
18237,396752339,"b""@AndriySvyryd please explain further. E.g. the checking for the unicode facet only happens for string types because it only applies to string types. So I'm not sure what you mean."""
18237,396770762,"b""That's exactly what I mean. We assume that unicode only applies to strings, but some providers might return a `byte[]` mapping even though on the server it stores text that can be unicode.\r\n\r\nBasically remove all type special casing and check all facets every time."""
18237,396771815,b'We should generalize this whole code to check for each facets. No need to special case clr type for that.'
20360,396790731,b'Filed https://github.com/dotnet/efcore/issues/20381'
20305,394622631,b'`GetDataOperations` will be refactored when I increase the integration of the relational model in the update pipeline.'
20305,396635309,b'Feels weird to include the PrimaryKey in UniqueConstraints. What are the disadvantages of separating them?'
20305,396642441,b'It might be useful to provide a template method that providers can override to handle both Views and Tables'
20305,396645688,b'Add Views?'
20305,396649265,b'(And everywhere else that references `.Tables`)'
20305,396652993,"b""Hmm, not having ForRemove will make the migrations uglier--most annotations aren't needed during remove."""
20305,396653827,b'(But I admit it makes the provider model simpler)'
20305,396659895,"b""There was some subtlety around GetConfiguredColumnType that I can't remember. But I probably wrote a test to cover it, so as long as no test fails... \xf0\x9f\x98\xac"""
20305,396669653,b'We should remove FindProperty and FindEntityTypes and replace them with FindColumn and FindTable.'
20305,396676567,"b""I'm having a hard time groking this. What changed?"""
20305,396679649,b'Ditto. Why are the posts no longer deleted?'
20305,396683008,b'\xf0\x9f\x99\x82 Now we have another opportunity to rename these'
20305,396684786,b'Where is IsIgnoredByMigrations honored by the differ?'
20305,396704934,b'A bit more code. Are you ok with them both sharing the same interface and sharing `IRelationalAnnotationProvider.For(IUniqueConstraint)`?'
20305,396706061,b'That would be handled when implementing https://github.com/dotnet/efcore/issues/14537'
20305,396707689,"b""Yes, I couldn't come up with a nice abstraction. Perhaps we can put a list of annotation names that should not be scaffolded in an annotation. What do you think?"""
20305,396708894,"b""FindColumn and FindTable are already part of the relational model and I didn't want to make any extra breaking changes. We could obsolete them"""
20305,396714844,b'I think that was from when we tried to avoid putting the store type in the snapshot'
20305,396715916,"b'It seems that I fixed a bug in these scenarios, so now the down migration does update properly (if needed at all) instead of delete and insert'"
20305,396722838,"b""I wanted to keep the name to make it more obvious that this is a 1-1 replacement, but i'm open to suggestions"""
20305,396724212,"b""It's replaced by `ITable.IsMigratable`. And I added code to handle it in previous PR."""
20305,396725768,b'I doubt there would be much in common and if there is it can be easily factored out.'
20305,396760789,b'I can live with it (unless every call to table.UniqueConstraints is chained with `.Where(c => !c.IsPrimaryKey)`)'
20305,396761184,b'Fair enough.'
20305,396765364,b'Maybe just a filter on the source annotations (that returns none by default).\r\n```c#\r\nvar dropAnnotations = SomeProviderServcie.DropTableFilter(sourceTableAnnotations);\r\n```'
20305,396768036,"b'But yeah, I think we need to do something. Especially for this case:\r\n``` c#\r\nDropIndex(""MyIndex"")\r\n    .Annotation(""SqlServer:Clustered"", true)\r\n    .Annotation(""SqlServer:Include"", new[] { ""All"" , ""The"", ""Included"", ""Columns"" })\r\n    .Annotation(""SqlServer:CreatedOnline"", true);\r\n```'"
20305,396768543,"b""(Happy to resolve this in a later PR since it isn't a functional issue)"""
20305,396769164,"b'Yes, obsolete them and update our providers to not use them'"
20305,396769804,b'That does ring a bell. \xf0\x9f\x98\x89'
20305,396770076,"b""We'll see if it comes up in API review. I'm fine with it staying"""
20305,396777449,"b""Ok, I'll reuse the existing `IMigrationsAnnotationProvider.ForRemove` for this"""
20305,396790523,b'Yes we have more code that would need to do `table.UniqueConstraints.Concat(table.PrimaryKey)` than `table.UniqueConstraints.Where(c => !c.IsPrimaryKey))`'
20079,384811075,"b'Since the function name is same, we can just use List here and hard code the function name in code.'"
20079,384817418,"b""Yeah, but wouldn't be `TryGetValue` faster? What about `HashSet`?"""
20079,385446334,b'will make it `static`'
20079,386080341,b'HashSet.Contains'
20079,387491246,b'Sort'
20079,387492326,b'@dotnet/efcore - These all functions returned int? in EF6. T-Sql returns int for most types and long nvarchar(max) kind of types. What should we put as return type on client.'
20079,389102265,b'`int?`'
20079,389188991,"b""ok, I'll change"""
20079,395928341,"b'Add to class \r\n```C#\r\nprivate static readonly List<string> _longReturningTypes = new List<string> { ""nvarchar(max)"", ""varchar(max)"", ""varbinary(max)"" };\r\n```\r\nand replace above if block with this\r\n```C#\r\n            if (_methodInfoDataLengthMapping.Contains(method))\r\n            {\r\n                var argument = arguments[1];\r\n                if (argument.TypeMapping == null)\r\n                {\r\n                    argument = _sqlExpressionFactory.ApplyDefaultTypeMapping(argument);\r\n                }\r\n\r\n                if (_longReturningTypes.Contains(argument.TypeMapping.StoreType))\r\n                {\r\n                    var result = _sqlExpressionFactory.Function(\r\n                        ""DATALENGTH"",\r\n                        arguments.Skip(1),\r\n                        nullable: true,\r\n                        argumentsPropagateNullability: new[] { true },\r\n                        typeof(long));\r\n\r\n                    return _sqlExpressionFactory.Convert(result, method.ReturnType);\r\n                }\r\n                else\r\n                {\r\n                    return _sqlExpressionFactory.Function(\r\n                        ""DATALENGTH"",\r\n                        arguments.Skip(1),\r\n                        nullable: true,\r\n                        argumentsPropagateNullability: new[] { true },\r\n                        method.ReturnType);\r\n                }\r\n            }\r\n```'"
20077,384747824,"b'Note, this is [the same code](https://github.com/aspnet/Microsoft.Data.Sqlite/blob/release/1.1/src/Microsoft.Data.Sqlite/Utilities/ApplicationDataHelper.cs) we had in 1.1'"
20077,384749768,"b""I'll add a quirk"""
20388,396811567,b'Docs for all of these'
20388,396814211,"b""I should have just filed new issue. Some of these methods even I don't understand hat they do. Like IsInOwnershipPath. \xf0\x9f\x98\x9b """
20388,396822077,"b'""Determines whether the given entity type is in the ownership path"" \xf0\x9f\x98\x86 '"
20388,397381594,b'Updated.'
20388,397389095,b'Technically it only returns all base and derived types (no siblings)'
20279,392534256,b'TODO: will do the proper infra for exceptions'
20279,392534279,"b""Don't"""
20279,392534388,b'TODO: will do the proper infra for exceptions'
20279,392534524,b'@ajcvickers any more scenarios around collection being loaded?'
20279,392535238,"b""don't name it. You can run into clashes"""
20279,392535528,"b'Instead of recreating this way, consider building up bottom to top'"
20279,394601125,"b'will leave as is. There are some problems with bottom up, i.e. AddNavigation method needs to know if the navigation has a query filter (and throw if multiple query filters are defined for the same navigation), so the filtered include information needs to propagate down to the root anyway'"
20279,394625618,b'If we are supporting more than just where then we need to create a new term rather than filtered include\r\n@dotnet/efcore '
20279,394626849,b'bad perf.\r\nAnd throwing can still be done in bottom to top. It is about how you are separating navigation from the filter expression. Once you have both information you can still throw if multiple includes used.'
20279,394630182,"b'""the spirit"" of the feature is still about filter. Ordering is only added for suppose of Skip/Take, so maybe keeping the name is not so bad. We will never have projections in there, that\'s for sure so its not like we are future-proofing with the less specific name. \r\n\r\nHowever I\'m fine if ppl think otherwise. Something like ""modified include"", ""altered include"", ""composable include""?'"
20279,394639170,b'Conditional include.'
20279,394639322,"b""You shouldn't need to use ReplacingExpressionVisitor here."""
20279,394643590,"b'""Extended include"", ""augmented include""\r\nBut taking a step back we don\'t support multiple normal includes on the same navigation either, so perhaps just make the message more generic\r\n'"
20279,394649529,b'works for me. lets see what others say'
20279,394735985,"b""we support it in a sense that it doesn't throw :)"""
20279,394736361,"b'added a decidated method, not as robust as the visitor but should be fine since we only support very limited set of operations'"
20279,394795339,b'Why do you need recursive function for this? The recursion of tree traversal is already covered by PopulateIncludeTree.'
20279,395185957,"b""rewrite only happens on the top level, so it needs to be recursive there. This way we don't need to re-create a lambda every time. Doing it at every level is more elegant but worse perf :trollface: """
20279,395348658,b'Move whole processing to `IncludeExpandingExpressionVisitor`\r\nIntercept MaterializeCollectionNavigation coming out from a nav expansion and attach the filter on that subquery.'
20279,395353386,"b'Remove parameter withFilter. MemberExpression would just get/create new IncludeTreeNode.\r\nWhen processing methodcall, see if source is MemberExpression, if filter is already present then throw exception on it.\r\n\r\nAlso remove case for parameter expression rather short in memberexpression if innerExpression is parameter.\r\nThat would avoid processing of include like `Include(e => e.Orders).ThenInclude(e => e.AsQueryable().Where())` which is invalid. Also add a regression test for it.'"
20279,395353984,b'Also take without orderby'
20279,395354264,"b""InvalidOperationException. We don't throw NotSupportedExceptions."""
20279,395354621,b'Also add a test with ThenInclude after this. The reason user may need to use same include without filter again is ThenInclude.'
20279,395355303,b'Add a test where navigation is registered as reference navigation in EF Core metadata but implements IEnumerable<> and will allow you to write filtered include syntax. (Essentially filterExpression when put on non collection navigation should throw.'
20279,395398234,"b'result of the nav expansion can be a nested MaterializeCollectionNavigation (e.g. two include collection based off of same root entity). So I would have to visit the entire expression, cant just match on a top level. Why do you think current approach is problematic?'"
20279,395418225,"b'Filters are part of include, Includes are expanded by IncludingExpandingEV which utilizes ExpandingEV. These to be inside ExpandingEV is wrong separation.\r\nHow is nesting done? inner level or outer level? From my understanding, TryExpandNavigation would expand only 1 navigation at time. So you can always intercept and process it. If there are multiple expansion then the existing MCE would be put inside EntityExpression of outer Include. May be nesting could be changed so that you can always unwrap first one. If all these does not make sense then let me know I can look into it too. \xf0\x9f\x98\x84 '"
20279,396803382,"b'new message:\r\n\r\n```\r\nDifferent filters: \'navigation\r\n    .Where(x => x.Name != ""Bar"")\r\n    .OrderByDescending(x => x.Name)\r\n    .Take(3)\' and \'navigation\r\n    .Where(x => x.Name != ""Foo"")\r\n    .OrderBy(x => x.Id)\r\n    .Take(3)\' have been applied on the same included navigation. Only one unique filter per navigation is allowed. For more information on including related data, see http://go.microsoft.com/fwlink/?LinkID=746393.\r\n```'"
20279,396804517,b'TMI?'
20279,396807023,b'Do people actually do that? Seems like very contrived scenario.'
20279,396821388,"b""It's negative case example. Rather than ignoring (which what we are doing currently when we see non-navigation in Include, we should change that), we can throw a better error message."""
20279,396821731,"b'On note of reference nav which implements IEnumerable, it is not impossible. '"
20279,397368366,b'Do we not support `t => ((Derived)t).DerivedNav`? \r\n@dotnet/efcore for exception message review.'
20279,397369972,"b'Make it else if. Previous if checks IsCollection, non collection would not generate MCNE. Short-circuit.'"
20279,397371502,b'Where is this used?'
20279,397372070,b'Use take. \xf0\x9f\xa4\xa6\xe2\x80\x8d\xe2\x99\x82 '
20279,397372195,b'verify result no?'
20279,397374581,b'Does some of this work? Especially Take? Do we not convert it to Left join using window function?'
20279,397388881,b'exception message when multiple filters are applied on same navigation. Avoiding unnamed parameters and AsQueryable'
20279,397390065,"b""can't really guarantee without orderby, just eyeballing the sql"""
20279,397394315,b'static?'
20279,397395251,"b'i re-checked, they all fail with APPLY errors'"
20279,397397576,"b'File an issue, I will debug.'"
20279,397406425,"b'yup, fixed'"
20279,397408853,b'i actually did that initially. Breaks for entity.Include(e => e.Reference.Collection.Where(...)) since the previous block handles first navigation (reference) and then calls ExpandIncludesHelper again on the following collection.\r\n'
20371,396112212,b'SQL Azure supports Memory-Optimized tables'
20371,396113429,"b' @AndriySvyryd Yes, but only the Premium edition, as far as I can see. Is that in scope for your test matrix, then I could add a check for that ?'"
20371,396120073,"b'Yes, please do'"
20371,396120847,b'This should set value of _isAzureSqlDb.'
20371,396121062,b'Set `_supportsHiddenColumns`'
20371,396121964,b'Should I not return also?'
20371,396122891,"b""Return too. But if you don't set values here then test will reach this part everytime when it is supported rather than short-circuit in last if block.\r\nLooks like _fullTextSearch also sets value but then instead of returning set it false. \xf0\x9f\xa4\xa6\xe2\x80\x8d\xe2\x99\x82 """
20371,396122931,b'Fixed'
20371,396122961,b'Fixed'
20371,396122977,b'```suggestion\r\n                    _supportsHiddenColumns = (_productMajorVersion >= 13 && _engineEdition != 6) || IsSqlAzure;\r\n                    return _supportsHiddenColumns.Value;\r\n```'
20371,396123055,b'could move this line to catch part.\r\n'
20371,396123075,b'And return _supportsHiddenColumns.Value;'
20371,396123413,"b'Yes, I could do that.'"
20371,396123884,b'Done'
20371,396125824,"b""@AndriySvyryd  I need to run this against the user database (not master) - how would I do that?\r\n\r\nSELECT slo.edition    \r\nFROM sys.databases d   \r\nJOIN sys.database_service_objectives slo    \r\nON d.database_id = slo.database_id\r\nwhere d.name = '{connection.Database}';\r\n\r\n\r\n"""
20371,396499768,b'Or rather - I need the name of the user database (I can run the query when connected to master)'
20371,396572362,"b'You could try Northwind, but otherwise I would also leave the option to specify this setting explicitly short-circuiting the detection'"
20371,396584521,b'I will allow short circuit'
20371,397529179,"b'Leave in `""SupportsMemoryOptimized"": null`'"
20398,397520910,b'Docs or `<inheritdoc />` for all public members'
20301,393140945,b'This would need to be conditionally included/excluded from helix testing when OS is not windows.'
20301,393941044,"b'Wow, neither Helix nor MSBuild made that easy to do.'"
20355,395417300,"b""I would like bool parameters to be at the end. Though I don't have strong preference. What do other people think?"""
20355,395417404,b'string.IsNullOrEmpty?'
20355,395781474,b'Fixed.'
20355,396749519,"b""I'd prefer *namespace* or *modelNamespace*"""
20355,396750097,"b""We don't typically put *db* in parameter names"""
20355,396750949,"b""Again, I'd prefer just *namespace*."""
20355,396755488,"b'Instead of adding the bool parameter (a breaking change), we can just allow rootNamespace to be an empty string.'"
20355,396773973,"b""I don't feel strongly I just thought it would be better to add new, nullable params at the end."""
20355,396774184,"b'OK, modelNamespace is fine by me.'"
20355,396774398,"b""OK. I'll change to just contextNamespace"""
20355,396774635,b'OK.'
20355,396781019,"b'@bricelam and then pass `migrationNamespace` in through the `subNamespace` param? We currently check that the `rootNamespace` is not null, but we already allow it to be empty at this level. How about changing this so passing in `null` in this line is the marker for the different mode to override the automatic addition of "".Migrations"" etc.?'"
20355,396823215,b'I updated it'
20355,396823261,b'Done'
20355,396823307,b'Done'
20355,396823360,b'Done'
20355,396823486,b'Done.'
20355,398791176,"b'\xf0\x9f\x98\xac There\'s a lot I don\'t like about this line. That expression is ...odd, and it will end up throwing ArgumentException with a ParamName of ""rootNamespace + subNamespace"".\r\n\r\nIt\'s probably not worth validating this. What happens if we allow it? We generate invalid C#? (like #2467)'"
20355,398822397,"b""I like to fail early :-) But that said, I'll take it out - `CSharpMigrationsGenerator` checks that the namespace is `NotEmpty` in all three of `GenerateMigration()`, `GenerateMetadata()` and `GenerateSnapshot()` - so it would just fail there instead."""
20429,399298185,b'What would null name imply?'
20429,399304891,b'Why is this method protected ?'
20429,399415973,b'That the default name should be used'
20429,399416928,"b""I'll make it private"""
20427,399548749,"b'How about: Translation of \'{expression}\' failed\r\n\r\ni.e. drop ""to server""'"
20427,399554664,"b""Sure. Don't care enough.\r\n@dotnet/efcore - Anyone got any other suggestion?"""
20427,399570017,b'Updated.'
20427,399579284,b'Why did you leave this here?'
20427,399580921,b'Extra line'
20427,399581236,b'Usually we leave Dependencies and remove the individual service properties for future-proofing'
20427,399583937,b'Mistakes were made.'
20427,399584116,b'I am fine to do that too. SqlExpressionFactory was already protected virtual. Should I remove it? '
20427,399585841,b'Yes'
20457,399832892,b'Put in different files? @AndriySvyryd'
20448,399681260,b'abrupt ending.'
20448,399681692,"b'Should we change any ""RelationalshipBuilder"" to ""ForeignKeyBuilder""?\r\nLike ""InvertibleForeignKeyBuilderBase""'"
20448,399682079,b'FindCurrentForeignKeyBuilder?'
20448,399702603,"b'Suppose the user passes in the same value, but with a lower `ConfigurationSource` than already exists. Do you need want to allow ""downgrades"" of `ConfigurationSource`?'"
20448,399956634,"b'No, these are still accurate as they represent both FKs and skip navigations'"
20448,399957592,b'Builders are a declarative API so when the same thing is configured with a lower and a higher `ConfigurationSource` in the end it will have the higher one independently of the order.'
20448,400306035,b'\xf0\x9f\x91\x8d '
20470,400543268,"b'We are not very consistent, but majority of const fields are pascal case. Pinging Chief Consistncy Officer @AndriySvyryd '"
20470,400550258,"b""I thought we had an .editorconfig rule for this. Make sure it's working."""
20470,400580328,b'Added rule in editor config.\r\nany non-private field -> PascalCase\r\nAny private field with const -> PascalCase\r\nAny private field other than covered above -> _camelCase.'
20468,400551583,b'Should be `null`'
20468,400575485,b'Why was this changed?'
20468,400576732,b'Would be more extensible if this returned a `bool` instead'
20468,400576933,b'Add a comment stating that the order is significant'
20468,400577480,b'We were only setting `DateTime` parameter values to the second. See the changes to e.g. `BuiltInDataTypesSqlServerTest` for examples. Without this it was impossible to see the fractions of seconds - which is what precision sets. Also note we already use this format for `DateTimeOffset` types.'
20468,400620698,b'Done'
20468,400620742,b'Done'
20468,400620786,b'Done'
20468,400622580,"b""Should be static. I'll fix."""
20468,400624276,b'Done'
20447,400575269,b'nit: remove empty line + pascal case on the private const'
20447,400588234,"b""if argument doesn't get translated, it can never be EntityReferenceExpression, so it will never be translated anyway. Why call try rewrite entity equality rather than short-circuit?"""
20447,400591769,"b'The magic lies in `left ?? methodCallExpression.Object` call.\r\nIf you are doing `c == new Customer { CustomerID = e.SomeProperty }` then right side cannot be translated. But if you apply entity equality then you would convert the whole thing to `c.CustomerID == e.SomeProperty` hence even if left or right fails to translate we still run this. If both of them does not translate then yes, we cannot translate. Though TryRewriteEntityEquality short-circuit that case at very start. Putting it inside function makes it somewhat DRY.'"
20447,400593219,"b'that looks like a useful helper method/extension - we already do this logic in ContainsTranslator, so DRY'"
20447,400614692,"b""we should be able to translate this to EXISTS, now that it's done in translation phase, no?"""
20447,400615724,b'declare outside the block maybe?'
20447,400618034,b'those two lines could be moved to TryRemoveNavigationComparison - DRY'
20447,400620018,b'what was the reason for doing this only for collections?'
20447,400621175,b'https://github.com/dotnet/efcore/issues/15260 is still open tracking it.'
20447,400621235,b'this is lesser code :trollface: '
20447,400621818,b'This PR gets parity with what we have currently in source wrt entity equality. To keep things simple I have not added any enhancement. \r\nThe particular thing you are asking is tracked by https://github.com/dotnet/efcore/issues/11495 & https://github.com/dotnet/efcore/issues/15936 '
20447,400720109,b'this case block should get optimized to [c0].[Id]'
20447,400727947,b'nit: remove'
20447,400728360,"b'Where should that happen?\r\nLooking at the second case block and alias-ing, it seems that whole client eval thing has changed underneath. Since it is using defining query, I did not look into trying to optimize this particular test (defining query should be dead for non-inmemory provider).\r\nIf you want we can have tracking issue to identifying this pattern in Sql to shorten it. It could also be dependency thing in null check removal.'"
20447,400746550,b'we already have https://github.com/dotnet/efcore/issues/19662 but I thought at least the simple property case has already been optimized. We had that for sure in the old pipeline and I know we stripped some of the functionality during pipeline redesign. I guess we stripped more than I thought ;)'
20447,400767411,"b'Fixed. Not sure what was happening before this PR, had to run null check removal after introducing defining query. Overall it should improve once I can move it after nav expansion as part of #18923'"
20447,400767702,"b""Also it is more accurate than before since we don't ignore empty string and also preserve the aliasing."""
20477,401209875,b'Does this throw without your fix?'
20477,401225340,b'No.'
20477,401231358,"b""Then the fix should be in https://github.com/dotnet/efcore/blob/c42afa1caac8cf26ddd91d6f0cdf74301ca4b4c0/src/EFCore/Metadata/Internal/InternalForeignKeyBuilder.cs#L1395\r\nWe shouldn't remove a explicitly-configured navigation silently"""
20477,401258504,b'Use `navigationPropertyClrType?.TryGetSequenceType()` instead'
20491,401938364,b'@AndriySvyryd is this how we should configure self many to many? (i.e. the OnDelete part)'
20491,401955196,"b'Yes, if needed'"
20491,401964339,"b""It's shared type, not shared entity"""
20506,402768948,b'You can use a non-generic `IConventionContext` here'
20506,402993528,b'Done'
20519,403301713,b'nit: formatting'
20519,403303780,b'why?'
20519,403316734,b'0x are root\r\n1x are branch\r\n2x are leaf\r\nMany of the M2Ms were between derived types but they still used root type even though that becomes invalid relationship.'
20519,403334054,"b""Ah, I didn't set the offset so the leaves array index would be rolled from 0-3 rather than 15-19"""
20530,403646311,b'Update XML docs?'
20530,403646481,b'Should we also update this API to take string? It is also public.'
20530,403715145,b'Done.'
20530,403715178,b'Done.'
20542,403832109,"b""Get-Project throws when provided with a shared project, e.g.\r\n```\r\nGet-Project : Project 'EntityFramework.Shared' is not found.\r\nAt line:1 char:1\r\n+ Get-Project EntityFramework.Shared\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (EntityFramework.Shared:String) [Get-Project], ItemNotFoundException\r\n    + FullyQualifiedErrorId : NuGetProjectNotFound,NuGet.PackageManagement.PowerShellCmdlets.GetProjectCommand\r\n```\r\nRather than throwing that, silently continue and check for the specific error..."""
20542,403832460,"b""Search for a shared project by the given name... Unfortunately the `Type` property comes back `Unknown` for these projects, so for lack of a better way of identifying them, I check the file extension - `UniqueName` is just the filename, hereas `FullName` has the full path.\r\n\r\nI'm no expert at PowerShell, but given that $project isn't defined anywhere else in this function or the global scope, I expect it will be $null when no match is found (I've been burnt in other scripts before when the variable already exists and generally assign $null first, before making another assignment that might fail, but I am pretty sure that is not required in this case)"""
20542,403832896,"b""If we still shouldn't find a shared project by this name, throw the original error that Get-Project threw that we suppressed earlier.  Else, fall through to return the shared project's `ProjectItem`"""
20542,403833640,"b""Down on line 970, this is used to calculate `$targetPath` which is then passed as the `--assembly` parameter on line 977.  A shared project has no output and this will come back as a blank string, later resulting in an error:\r\n```\r\nCould not load assembly ''. Ensure it is referenced by the startup project '<StartupProjectName>'.\r\n```\r\nHere I _assume_  that the shared project is referenced by the startup project, and hence provide the startup project's `OutputFileName` to use as the assembly instead.  Yes, I'm cringing as I type this now...  Maybe this isn't good enough... thoughts?"""
20542,403836384,"b""This code path is executed when calling Remove-Migration.  After making the call to `EF` which will _delete_ the files from the filesystem and return the full paths of those files - i.e. the migration, metadata, and snapshot files (see `Remove-Migration` around lines 250-252), this function is called to remove those files from the project, in our case, a shared project.\r\n\r\nIn my observations, the `FullPath` property that is obtained on line 1190 from a non-shared project, such as a C# class library, will include a trailing slash, whereas in a shared project, there is no trailing slash.\r\nThat leads to issues in this code, specifically lines 1194 and 1206.  1194 removes the project folder from the full path to create a relative path.  Line 1202 then splits on the slash (I'd really like to change that to `[System.IO.Path]::DirectorySeparatorChar` as this surely doesn't work on Linux?) - when the FullPath includes the trailing slash, that means the relative path will not begin with a slash.  But when FullPath omits the slash like a shared project seems to, the relative path begins with a slash and the Split call which is not passing `[System.StringSplitOptions]::RemoveEmptyEntries` so its first element is an empty string.  That causes a problem on line 1206 which of course cannot find the item, and hence assigns `$null` to `$projectItems` and then down on line 1211, we bail out returning $null instead of returning the file within the shared project.\r\n\r\nSo there are several ways to fix this, here is one... I just thought of passing `[System.StringSplitOptions]::RemoveEmptyEntries` to the Split call as I typed this, could change to that... or finally back in the if clause on line 1192 we could add the trailing slash if it is missing..."""
20535,404454706,b'Move this out'
20523,404438798,b'```suggestion\r\n    ///         A factory for key values based on the foreign key values taken\r\n```'
20523,404439288,b'Docs for all of these'
20523,404439691,b'Same as above'
20523,404439811,"b'```suggestion\r\n        ///     True if <paramref name=""foreignKey"" /> is defined in same hierarchy, otherwise false.\r\n```'"
20523,404440073,b'Similar to the above'
20523,404440151,b'As above'
20523,404441255,"b""```suggestion\r\n        ///     Gets the last value assigned to the property that's part of a foreign key or principal key.\r\n```"""
20531,404450316,b'```suggestion\r\n    ///     to generate and display them.\r\n```'
20533,404453011,"b'Move this to `ModelCleanupConvention`, it will be removed eventually'"
20555,404465342,"b'This is not enough, we should also check whether the value converter has a provider type different from `decimal`'"
20555,404468900,b'@AndriySvyryd You mean a decimal to decimal converter?'
20555,404470059,b'Yes'
20555,404489369,"b""OK. I guess it's possible. I'll update."""
20555,404940158,b'Done'
20538,404456232,"b'```suggestion\r\n    ///         It is advised that manually created collection navigations do likewise, or otherwise ensure that\r\n    ///         every entity instance compares different to another instance.\r\n```'"
20538,404457338,"b'```suggestion\r\n    ///         <see cref=""IEntityType"" /> instances by name including the defining entity type when present.\r\n```'"
20538,404457417,"b'```suggestion\r\n    public sealed class EntityTypeFullNameComparer : IComparer<IEntityType>, IEqualityComparer<IEntityType>\r\n```'"
20539,404458680,b'Separate paragraph'
20539,404458911,b'```suggestion\r\n    public sealed class NonRetryingExecutionStrategy : IExecutionStrategy\r\n```'
20560,404973472,"b'Maybe consider renaming this to `MultipleRegistrationsAllowed` at the same time. Just `MultipleRegistrations` is open to other interpretations such as ""multiple registrations have happened"". '"
20571,405898546,"b'```suggestion\r\n  <data name=""MissingInverseManyToManyNavigation"" xml:space=""preserve"">\r\n    <value>Unable to set up a many-to-many relationship between the entity types \'{principalEntityType}\' and \'{declaringEntityType}\' because one of the navigations was not specified. Please provide a navigation property in the HasMany() call.</value>\r\n```'"
20571,406311462,b'Done'
20572,406373933,"b'Is this a typo? `geography` for _geometry_ store type? If yes, how come no errors? If no, maybe add a comment saying why.'"
20572,406374680,"b""Don't you want to assert the message too?"""
20572,406378139,"b""Filename and class name don't match? """
20572,406389862,b'Add something saying what the user should do about it. How does this situation arise?'
20572,406390164,b'Same comment as above. What does the user do to fix this?'
20572,406390405,b'As above. What to do?'
20572,406390626,b'As above.'
20572,406392480,"b'I would replace:\r\n\r\n> ""but is part of the create \'{table}\' operation""\r\n\r\nwith ""but is part of the create operation for table \'{table}\'""'"
20572,406392642,b'As above - say what to do.'
20572,406392886,b'As above.'
20572,406393133,b'As above.'
20572,406393195,b'As above'
20572,406393298,b'As above'
20572,406394241,b'Can we give more context here? E.g. can we specify which entity/property is specifying this invalid store type?'
20572,406394647,b'Similarly for all the Delete error messages below.'
20572,406395175,b'As for above. What does the user do? Similarly for the next 2 messages.'
20572,406395328,"b'Similar to above, can we add context?'"
20572,406397430,"b'Suggest: ""Specify \\<c\\>true\\</c\\> for Unicode mapping, \\<c\\>false<\\/c\\> for Ansi mapping or \\<c\\>null\\</c\\> for the default.""'"
20572,406425489,"b""I don't know the details. @bricelam thoughts?"""
20572,406426166,b'This is all we have at the place where this is thrown'
20572,406435106,b'This is getting store type of `GeometryCollection` clr type from NTS.'
20572,406443828,b'If you pull the `throw` statement up into `UpdateSqlGenerator.AppendSqlLiteral()` then you could add details about which column you are modifying from the `ColumnModification` object? Alternatively you could pass the `ColumnModification` in to the `RelationalTypeMappingSourceExtensions.GetMapping()` method instead of just the storeType (that looks a little weird compared to the other methods there but it would work).'
20572,406508094,"b""Nit: extra space before '{table}'"""
20572,406508982,b'Typo: enity -> entity'
20572,406512479,"b""I'm sorry - that doesn't help me understand the apparent mismatch between the types. A `GeometryCollection` sounds as though it could consist of e.g. a collection of polygons, lines etc. Why would this have a storeType of `geography`? I'd like to have a comment here for future maintainers of this code to understand why we are mixing up geography and geometry."""
20572,406514149,"b'In NTS terms Geometry refers to both geometry and geography, but SqlServer treats them differently'"
20572,406517131,"b""OK. Just a comment saying the test data we're using is geographic but that NTS requires we call this a GeometryCollection would be enough. """
20572,406557611,b'Do you still need this method any more?'
20572,406557730,b'Do you need this?'
20572,406558199,"b""I don't, but it complements the existing ones."""
20572,406558517,b'OK.'
20585,406530148,b'do we care that quote is stripped here?'
20585,406530905,"b'yes, put quote back in.'"
20585,406532414,"b'Inline rather than function.\r\nInclude is always static method so no methodCallExpression.object. Visit arguments using `VisitAndConvert`\r\nCheck specifically if lambda.ReturnType is IOrderedEnumerble and visitedLambda.ReturnType is IOrderedQueryable, then only perform rewrite. '"
20585,406537461,"b""can't use VisitAndConvert since lambda visitation needs special casing. We could override VisitLambda and convert all cases of OrderedEnumerable to OrderedQueryable, but this opens can of worms, where now we need to rewrite a bunch of other methods, whos generic types have now changed."""
20585,406541149,b'In that case remove any special processing other than dissecting the lambda. (Like client source). And just have custom code for VisitAndConvert part I suggested.\r\n'
20585,406544684,b'Body.Type is same as ReturnType'
20585,406544722,b'Remove this.'
20585,406544920,"b'Since you are already doing this, just split the if above to use this variable. (So Visit(argument[0]) would move inside this if block.'"
20585,406545568,"b'array, use Length property.'"
20585,406545616,b'use `[^1]`'
20585,406545729,b'Why not mutate the original array?'
20585,406545878,"b'For consistency, use LambdaExpression.ReturnType.'"
20585,406552843,"b'did that initially, thought this to be cleaner. can change'"
20585,406553247,b'Avoid allocation. Just reuse especially when we are not going to use the original further.'
20585,406555912,"b'lambda is typed as Expression, so that I can add Quote back. will keep as is'"
20585,406573466,"b""You don't need to pattern match with Type, it is always a type and non-null too."""
20585,406573945,"b'its just to declare a variable that I reuse in the following conditions, but I guess now that the variable is simpler it prolly not justified. will change'"
20528,407239653,"b""What would be the value of including the assembly name, given that it's always expected to be constant (i.e. Microsoft.EntityFrameworkCore)?"""
20528,407239765,"b""nit: we use var (didn't flag other cases in this PR)\r\n"""
20528,407250725,"b""I like the memory reduction you did here.\r\n\r\nThere's a good chance this could be simplified a bit by just using Span&lt;byte&gt; and MemoryMarshal.Write to write what you want. For extra credit, [BinaryPrimitives](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.binary.binaryprimitives?view=netcore-3.1) also contains nice and efficient methods for endian conversion."""
20528,407251279,"b""I'm seeing totally different GUIDs which don't have EA11. Can you try on a completely different machine and confirm whether you're still seeing this sequence?"""
20528,407343442,"b""Hi @roji the executing Assembly name should be the same as the entry assembly, not the current assembly. If it is always the same, it's not as intended.\r\n\r\n"""
20528,407349775,b'Should be corrected in commit f9ef51e28 '
20528,407361604,"b""@roji is the value you observed completely different, or does it have at least parts of the group?\r\nI don't have access to another computer with SQL server here, so I did the next best thing, \r\nI found some examples from images online in adition to what I have locally \r\nI've now seen \r\nea11 locally,\r\n[e911](https://blog.sqlauthority.com/2019/10/30/sql-server-using-newid-vs-newsequentialid-for-performance/),\r\n[e711](https://blog.greglow.com/2017/10/26/newsequentialid-nice-try-but-missed-the-target/) \r\nand [e511](http://www.dbafire.com/2015/07/03/newid-vs-newsequentialid-performance-of-differences-between-and-examples/),\r\nnot sure what to make of this. But that confirms that, at least, one of the nibbles isn't constant."""
20528,407364127,"b""@roji Maybe I should change the test to check whether the generator conforms to [RFC4211](https://tools.ietf.org/html/rfc4122) in stead? I can't find a mention of the E in the version part of the specification though, maye it should be 1 for sequential in stead?"""
20528,407417449,"b""Thanks, but I didn't intend to compress memory footprint though. I just think it's more readable to manipulate small slices of a span value instead of copying to byte arrays and reversing in order to get the correct byte ordering compared to SQL server. The same result could have been gained by copying byte by byte to an array, but I prefer the brevity of doing it this way as I believed it would reduce clutter and thereby increase readability. Since a .NET GUID consists of a 32 bit integer, followed by two 16 bit integers and then a 64 bit binary sequence, I'm not sure `BinaryPrimitives` would be a good way of manipulating the values without splitting it in the class requiring more safeguards for the increment part."""
20528,407417993,"b""You were maybe thinking of [GetEntryAssembly](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.getentryassembly?view=netframework-4.8) as opposed to [GetExecutingAssembly](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.getexecutingassembly?view=netframework-4.8#System_Reflection_Assembly_GetExecutingAssembly)? The latter should return the assembly of the executing code, in this case the SequentialGuidValueGenerator (so it should also return Microsoft.EntityFrameworkCore).\r\n\r\nBut stepping back, [as you wrote below](https://github.com/dotnet/efcore/pull/20528#issuecomment-612801475) there isn't really any actual danger of collisions here, so I'm not sure what value there is in including the entry assembly (or even the hostname)."""
20528,407428732,"b'After reading RFC4122 chapter 4.1.4, I know where the value comes from. This isdue to the fact the timestamp is the number of 100 nanoseconds since 1582-10-15T00:00:00UTC, so The test is assuming the wrong thing here. I will correct the issue and fix the initial timestamp to be in accordance with this value.'"
20616,407712869,"b'Don\'t use ""principal"" and ""dependent"" here, they don\'t add clarity.\r\n[Also add navigation properties if available.](https://github.com/dotnet/efcore/blob/858dfe7eb1b37c2e680282d34d64dac92fcd8365/src/EFCore/Metadata/Conventions/ForeignKeyPropertyDiscoveryConvention.cs#L745)'"
20616,407713158,b'We make them non-specific if possible\r\n```suggestion\r\n        public ForeignKeyCandidateEventData(\r\n```'
20616,407745403,"b'I don\'t normally include them, but later in the error message we specifically refer to the ""principal key"" - so here I thought it would add clarity to say which end was the principal and which the dependent.'"
20616,407746055,b'OK. Will do.'
20616,407760944,"b'It should be clear from the context, just switch the order of entity types so they match the properties.'"
20616,407768687,"b'I\'m happy to switch the order, but I don\'t think that\'s enough. I hate to disagree, but what we think is obvious is often not obvious to the receiver of the message. I agree that asking the user to identify which end is the principal and which end is the dependent is not good practice. But that\'s not what we\'re doing here. What harm can it do to say ""this end is the principal"" when later we refer to the ""principal key""? I know I\'d prefer the message to just say which is which.'"
20616,407769796,b'ok'
20616,407793204,"b""I missed switching the order of the comments. I'll do that before check in."""
20616,407793748,"b""You haven't added the navigations."""
20616,407794080,b'Done.'
20616,407795251,"b'Sorry, what navigations?'"
20616,407796057,b'The navigations defined on the foreign key as used [here](https://github.com/dotnet/efcore/blob/858dfe7eb1b37c2e680282d34d64dac92fcd8365/src/EFCore/Metadata/Conventions/ForeignKeyPropertyDiscoveryConvention.cs#L745)'
20616,407797652,"b""Sorry. I'd missed that link. I'll look into it. """
20616,407822313,b'Done'
20602,407847618,"b'```suggestion\r\n                modelBuilder.Metadata.SetCollation(collation, fromDataAnnotation);\r\n```'"
20602,407848583,"b'```suggestion\r\n                propertyBuilder.Metadata.SetCollation(collation, fromDataAnnotation);\r\n```'"
20616,408278100,b'@AndriySvyryd - all done. Could you sign off please?'
20628,408419555,b'Should move to a shared internal class to avoid ad-hoc proliferation'
20628,408427212,b'Filed #20631 '
20640,408854480,"b'While you are here, you can also remove the properties from expected query which we are not asserting. '"
20652,409151521,b'Should this be a `Check()` instead? When is it not an `IConventionModel`?'
20652,409198677,"b""`Migration` exposes it as `IModel`, so enforcing that it has to be an `IConventionModel` goes against Liskov's principle. Even though in all practical scenarios in would be one."""
20652,409215590,"b""`Check.DebugAssert()` then? My point is that if the model is _not_ an `IConventionModel` and you expect this code to do something, it will fail to do so silently, and that could be hard to track down later.\r\n\r\nIf there are valid scenarios where this would not be an `IConventionModel` and this code _should_ do nothing, then you can ignore this comment. I just wasn't sure what those would be."""
20652,409224660,"b""If it's not an `IConventionModel` we can't do anything to it, so we'll just assume that it already has the expected annotations, if it doesn't it will be obvious from the exception messages thrown after this."""
20567,405855791,b'\xf0\x9f\x91\xbf '
20567,405856462,b'Inline this method'
20567,405856553,b'docs'
20567,405857054,b'We use keywords when possible'
20567,408479058,"b""Did you mean `'$(BuildingByReSharper)' != 'true'`? :trollface: """
20567,408479305,"b'(But yes, I think that would actually work)'"
20567,408481323,"b""We already have `DisableEFAnalyzer` for the Relational project and it's working well. (Note that I might be a Rider on the bus with R# people, but I'm not actually a R# person anymore.)"""
20567,408643758,b'Is there a property rider set in MSBuild which we can use?'
20567,408713654,"b'FYI [I filed an issue](https://youtrack.jetbrains.com/issue/RIDER-42256) for this at Jetbrains, and have just asked about an automatically-set property to identify Rider. Otherwise this will hopefully be fixed soon(TM), so at worse a temporary(TM) hack...'"
20567,408758030,b'According the issue `BuildingByReSharper` property should work!'
20567,408768175,"b'Yep, just tested locally and it does!'"
20567,408949094,b'I did my research '
20567,408955419,"b'Oops, missed that comment!'"
20567,409776762,b':shrug: '
20567,409779773,b'Switched to `BuildingByReSharper`'
20655,409576304,b'blank line :smiley:'
20655,409617716,b'Will fix \xf0\x9f\x98\x83 '
20655,409786437,"b""We don't need  to do this. Removing them won't introduce new ones (because they would be incompatible). So we just need to make sure all the ones found are removed and don't remove any twice. Use `foreignKey.Builder == null` to check whether it has already been removed. You can also drop the `Distinct()` call above"""
20655,409823418,b'Fixed.'
20655,409823486,b'Done'
20630,408455912,b'is this the right way to do custom warnings config in qbt? @AndriySvyryd '
20630,408456400,"b'""couldn\'t"" -> ""could not""?'"
20630,408464903,"b""No, but it's fine for now. Tracked by https://github.com/dotnet/efcore/issues/17588"""
20172,388607550,b'But empty is a valid connection string! (Same on SqlClient)'
20172,388607961,"b'FYI, it creates a temporary on-disk database. (SqlClient connects to master on localhost)'"
20172,389190424,"b'OK OK, modified to make it legal to not set the connection string...'"
20172,391757062,b'This seems dangerous since `SqliteConnectionStringBuilder` is mutable. I assume we never mutate it?'
20172,391758517,"b""Although i agree with the casing here, it doesn't conform to EF's overly strict coding standards. \xf0\x9f\x98\x8f"""
20172,391759968,"b""Dude, where's my data? :trollface:"""
20172,392629150,"b""Added a SELECT 1 after this, that's what you meant right? Just to note that there are various other Open tests which don't do this."""
20172,392629249,"b'Yep, I did a check and your codebase seems to be only reading from it (which seems like a good thing - mutable by the user, not by the driver). Are you good with this?'"
20172,393347931,"b'No, I just mean that most people will have no idea what this does and will be confused when their database is deleted when the connection is closed.\r\n\r\nThe test is fine'"
20172,393348558,"b""SqlClient splits it into a mutable and an immutable type (for perf mostly). But I was lazy.\r\n\r\nI'm good with it"""
20661,409878593,b'Also add a customer without setting `__jObject` prior to `SaveChanges()`'
20661,410237029,b'Good catch! Added.'
20634,410469604,b'I would make this a `List` so we control the order when enumerating them.'
20634,410474755,"b""Please use an `int` rather than `byte` even though we expect the values to only require a `byte`. See e.g. [this comment](https://github.com/dotnet/efcore/issues/11614#issuecomment-605376037). (Sorry - I know you'll have to change this everywhere.) """
20634,410476703,"b'Throw `ArgumentOutOfRangeException` here if the value is <= 0 or > 100. (My understanding from [here](https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-index-transact-sql?view=sql-server-ver15) is that values between 1 and 100 are valid, and specifically that a value of 100 is valid even if it means the same as not calling `SetFillFactor()`).\r\n\r\nSee [here](https://github.com/dotnet/efcore/blob/3bc1894a1dee251e084d7e9bf6728de6661ebec7/src/EFCore/Metadata/Internal/Property.cs#L335) for an example. Also please add tests for the invalid situations. '"
20634,410478347,b'Please put the same `ArgumentOutOfRangeException` here.'
20634,410480717,"b'Nit: I would use ""with_fillfactor"" rather than ""when_fillfactor"" in test name. '"
20634,410499609,"b""As I don't need to access anything by index or control the order, I used HashSet. I am moving up the change now. :smiley:"""
20634,410500352,b'I thought about letting the exception pop and not validating here.\r\nBut I will make the change.'
20634,410505254,"b'@lajones \r\nHelp me to identify the difference between these two methods, or are they really the same?\r\n\r\nhttps://github.com/dotnet/efcore/blob/master/test/EFCore.SqlServer.Tests/Metadata/SqlServerBuilderExtensionsTest.cs#L217-L229\r\n\r\nhttps://github.com/dotnet/efcore/blob/master/test/EFCore.SqlServer.Tests/Metadata/SqlServerBuilderExtensionsTest.cs#L232-L244\r\n\r\n'"
20634,410505375,b'Do you want me to send the adjustment?\r\n'
20634,410516572,"b'Re the `List`. You enumerate it in `string.Join()` below. The order of that is non-determinate for a `HashSet` - hence the preference for `List`.\r\n\r\nRe the 2 methods. You\'re right. The non-generic one should be:\r\n```C#\r\n            modelBuilder\r\n                .Entity(typeof(Customer))\r\n                .HasIndex(""Name"")\r\n```\r\n\r\nAn adjustment would be great. Thanks!'"
20634,410517666,b'Nit: I would change this to 0 - which should throw.'
20634,410518642,b'Also I think we could skip `Int.MinValue` and `MaxValue`'
20634,410518665,b'Can we add a test where both source and target models call `HasFillFactor()` but they have different values please?'
20634,410519991,"b""Ah - I see you already did that for your new method. In case I wasn't clear would you mind doing it for `Can_set_index_online_non_generic()` as well? Thanks!"""
20634,410524655,b'I was waiting for your answer. I sent the adjustments without him lol'
20634,410560370,b'Copy-and-paste error: Please remove the first of the 2 `<returns>` above.'
20634,410561296,"b'Since you\'re changing the code anyway please call this ""Throws_if_attempt_to_set_fillfactor_with_argument_out_of_range"".'"
20634,410561640,"b'Please call this ""Rebuild_index_when_adding_fillfactor_option""'"
20634,410561868,"b'And this ""Rebuild_index_with_different_fillfactor_value""'"
20634,410562723,b'Thanks \xf0\x9f\x91\x8d '
20597,406893388,b'Do we want to multi-target tests?'
20597,406893619,b'Do we want to start flowing dependencies again?'
20597,406893632,b'Does this sha correspond to anything now?'
20597,406893992,"b'This change is unrelated, but I always hated having *Package* in these names, so I deleted it.'"
20597,406894775,"b'If we end up targeting .NET 5 in the runtime, we can remove our version of this.'"
20597,406895154,b'@dougbu Will anything explode?'
20597,406929743,"b""Isn't it enough for us to sync up once per preview? I'd really prefer to avoid the churn, potential instability, and of course, the endless maestro-bot commits :fearful: """
20597,406957705,"b'No, this is good cleanup'"
20597,406963892,b'Changes like this will break **all** dependency updates. Please revert it for everything that may come through Maestro++ once we unpin things.'
20597,406964600,"b'Again, revert all name changes at least from here down.'"
20597,406965193,"b""At some point we'll want to flow dependencies in 5.0 preview and servicing branches but that time doesn't have to be now"""
20597,407207504,b'Darc matches this naming pattern too\xe2\x80\x94nothing will break'
20597,407207965,b'Or are you saying this will mess up the automatic merging somehow?'
20597,407250784,"b""I'm saying `darc` / Maestro++ didn't match this naming pattern last I tried to use it. Something may have changed but I don't remember hearing about it. Did you run `darc` to update these versions locally?"""
20597,407251274,"b""What's the core issue here? I thought most packages from dotnet/runtime targeted .NET Standard (exclusively or multi-targeting)."""
20597,407744821,b'I want us to have confidence EF Core works on both .NET 5 and .NET Core 3.1. How to we gain that confidence without testing on both?'
20597,407745608,"b""Fine to punt this for a while, but I think we'll ultimately need to do it to catch early places where .NET 5 regresses EF."""
20597,407746449,"b""@bricelam So you're saying there is (finally!) a ReferenceEqualityComparer in .NET 5. If so, then we probably revert the change we just made to make ours fully public in 5.0! /cc @AndriySvyryd """
20597,407750226,b'It\xe2\x80\x99s been supported from the beginning. I used this pattern on EF6.'
20597,407750763,b'Yep!'
20597,407751212,"b'lol, I think these and the repos are all wrong. We\xe2\x80\x99ll clean it up when we unpin.'"
20597,407761709,b'Do we want to add something in CI specifically? e.g. we can run net core 3.1 in helix on PRs or a daily run or during real package build.'
20597,408384468,"b'@smitpatel We could choose to run one TFM only once per day, or we could split across different types of run. But any of those things still mean we have to multi-target, right?\r\n\r\nThere are two 5.0-only things on the immediate radar:\r\n* Testing the JSON serializer stuff\r\n* Supporting savepoints, which @roji has suggested will require us to up our dependency of the product itself'"
20597,408394403,b'What exactly is multi-target?'
20597,408397294,b'Be able to build them against .NET Core 3.1 or .NET 5 and then run them against these frameworks.'
20597,408397917,"b""But if we can find a way to not multi-target, but still test .NET 5 specific things, and still run the tests against .NET Core 3.1 and .NET 5, then I'm fine with that. Just doesn't seem easy/possible to me."""
20597,408398558,b'So why do we have to multi-target if we do split across CI runs? It would be single-target at a time.'
20597,408471167,"b""> So why do we have to multi-target if we do split across CI runs? It would be single-target at a time.\r\n\r\nWouldn't we still build both the product and the tests for both TFMs? In any case, just building for multiple TFMs is cheap, as long as we don't run all tests for both TFMs all the time...\r\n"""
20597,408480078,"b""Discussed with Brice and Smit in 1:1s. We're going to cross-target the tests and run them twice for now. We can use the same workaround as we used to to avoid multiple runs on the dev machines. We can also look into reducing C.I. time if it becomes problematic."""
20597,410488020,"b""I cleaned up Version.Details.xml and Versions.props, so resuming the flow should be pretty trivial when we're ready."""
20597,410488344,"b'Verified that darc updates these up when I remove `Pinnned=""True""`'"
20597,410488505,b'Updated'
20597,410489054,b'https://github.com/dotnet/efcore/issues/20629'
20597,410541627,b'I see that you moved helix testing to netcore5.0 \xf0\x9f\x91\x8d '
20678,410743071,b'Add it to `UnmatchedMetadataMethods` instead'
20674,410971722,"b""What's the deal with concurrency tokens?"""
20461,399859509,"b""I'm a bit uncertain about this approach. Is it safe to assume that the first EntityType is the correct entity type?"""
20461,399859518,b'Is it safe to assume that all properties in the query are keys or is there a need to be more specific here?'
20461,399859847,b'Introduced a base class to minimize repeating code. Helpful as more functionality is added to deal with the ReadItem optimization'
20461,399859935,b'The resource `id` itself should be ignored here.'
20461,403463091,"b""I need to the `ValueGeneratorSelector` to generate a resource id from the keys when a Resource I'd is not provided directly. \r\n\r\nI reasoned that this is part of the QueryContext, so injected it here."""
20461,403463187,b'The right formating for logging Read Item?'
20461,403463258,b'Adding this as a context makes sense to me. Agree?'
20461,403463512,"b'Moved the `CosmosProjectionBindingRemovingExpressionVisitor` into a base class, as the shaper is almost identical in the` SelectExpression` and `ReadItemExpression` scenario.'"
20461,403463656,b'Would be nice to be able to extract the Partition key from the query too for `SelectExpression` scenario too.'
20461,403463734,b'Maybe throwing an exception in case the Expression is not known is better here?'
20461,403464149,"b""This doesn't feel like the right approach. Looking forward to your feedback and direction on how to accomplish the generation of the resource id, from the keys with the default/customer generator."""
20461,403464309,b'Example of benefit of defining the `ResourceIdIdentifier` constant globally. '
20461,404431328,b'This is fine for now'
20461,404432297,"b'We already have it in `StoreKeyConvention.IdPropertyName`, just leave it there for now.'"
20461,404433071,"b""That's tracked by https://github.com/dotnet/efcore/issues/20350"""
20461,404436696,"b'Instead of this you can set the entry state to `Added`, read the value, then change it back to `Detached`'"
20461,405227234,b'OK.'
20461,407594883,b'Revert changes in this file.'
20461,407596181,b'Remove private fields. Just use variable in appropriate part of code.'
20461,407596591,b'if Arguments[0] is not QueryRootExpression then it should short-circuit rather than processing Arguments[1]'
20461,407597743,"b'Call ProcessJoinCondition passing List<Expression> for left & right, so we can avoid the whole DecomposeArrayExpression. Remove all other irrelevant code.'"
20461,407598700,b'Put in same file as other code. No need to create partial class.'
20461,407601278,b'@AndriySvyryd - We need to improve this.'
20461,407601571,b'Remove XML comments.'
20461,407602185,b'ReadItemEnumerableBase'
20461,407603521,b'@AndriySvyryd - Is there any alternative here?'
20461,407604061,b'throw InvalidOperationException.'
20461,407604250,b'revert'
20461,407604384,b'Remove blank line.'
20461,407604638,b'Copy same this is internal API XML docs here.'
20461,407604874,b'Same as above.'
20461,407607122,b'untangle this. ReadItem does not return an enumerable. It should not use DocumentEnumerable.'
20461,407607465,b'Add using and simplify type usage.'
20461,407607622,b'No XML docs in tests.'
20461,407614086,b'Should we combine with new base class too? I.e. all three files in one file?'
20461,407616521,b'There is no new base class here. Only 2 files for this class.'
20461,407679992,"b'Not that I can think of, perhaps @ajcvickers has an idea'"
20461,407680893,b'This filter is redundant'
20461,407681159,b'Use `TryGet` instead'
20461,407682405,b'File an issue'
20461,407683152,b'@1iveowl When would `resourceId` be null or empty? Should we throw instead?'
20461,408270453,"b""If no `resourceId` is specified as `null/string.Empty` part of the `Find()`, then we try to generate it, from the other primary keys. Thus I don't think we should necessary throw here. \r\n\r\nIf we are unable to get or generate the `ResourceId`, then we already throw in the MoveNext section."""
20461,408445006,b'Move to local'
20461,408457395,"b'If ""id"" is part of the PK then a valid value needs to be supplied in `Find`. If it\'s not then it wouldn\'t be in `_propertyValueDictionary`'"
20461,409191912,b'```suggestion\r\n                    && queryRootMethodCallExpression.Method.GetGenericMethodDefinition() == QueryableMethods.Where)\r\n```\r\nSame for FirstOrDefault above.'
20461,409192272,b'use full expression for variable names rather than expr'
20461,409192584,b'leftExpressions'
20461,409192736,b'inline variable.'
20461,409192824,b'entityTypePrimaryKeyProperties'
20461,409193473,b'Remove this function and inline it.'
20461,409194482,b'Is there actually convert node around this? Find does not add them.'
20461,409194614,b'Is there actually convert node around here? ParameterExtractingExpressionVisitor would remove them.'
20461,409195155,"b'Add additional checks here, rather than unwrapping later because if unwrapping ends up with null, you would end up throwing.\r\nLeft is MethodCall with EF.Property, collect IProperty in left collection.\r\nRight is ParameterExpression, collect parameter name in right collection.'"
20461,409195325,b'inline index. Convert to expression body.'
20461,409195396,b': base goes on new line.'
20461,409195690,b'expression body'
20461,409196350,b'Remove this and throw NotImplementedException with https://github.com/dotnet/efcore/issues/20653 in exception message. '
20461,409196407,b'remove blank line.'
20461,409196548,b'use CosmosStrings'
20461,409196936,b'You need to remember if you already executed query. Repeated hasNext here is going to return true. You need to return true only first time. Second MoveNext should return false.'
20461,409198187,"b'You are already exposing EntityType, remove this, you can compute from the place where you need this.'"
20461,409198752,"b'InvalidOperationException, use CosmosStrings.'"
20461,409199088,b'@ajcvickers - ping.'
20461,409199473,b'This could cause many issues especially when it the key value is shadow property.'
20461,409200782,"b'Invert. It should be IProperty, string.'"
20461,409201240,"b'You should the dictionary from other way around, and construct dictionary of IProperty, object. Also iterate of PropertyParameters dictionary and use TryGetValue for CosmosQueryContext.ParameterValues.'"
20461,409202014,b'@AndriySvyryd - Would there always be member for StoreKeyConvention.IdPropertyName?'
20461,409202106,"b'Use IProperty direction on dictionary of IProperty,object'"
20461,409202633,b'~Revert all the changes related to this.~\r\nRemove base class. Add a static method equivalent to GetReadyToRead in enclosing class to do it from both enumerator without repetition. Rest of code really minor to try making it DRY.'
20461,409219471,b'```suggestion\r\n                                    var shapedQueryExpression = new ShapedQueryExpression(\r\n```'
20461,409220933,b'throw InvalidOperationException'
20461,409222529,b'cast to string instead'
20461,409222758,b'Use `as` and add to the exception message that id needs to have a string value'
20461,409225480,"b""Yes, we'll validate it in https://github.com/dotnet/efcore/issues/17751"""
20461,409227090,b'Add a message or throw a NotImplementedException'
20461,409227629,b'Can use `entry[StoreKeyConvention.IdPropertyName]`'
20461,409227688,b'call `responseMessage.EnsureSuccessStatusCode()`'
20461,409227858,b'```suggestion\r\n                var jObject = new JsonSerializer().Deserialize<JObject>(jsonReader);\r\n```'
20461,409228982,"b""Undo this. If `id` is part of the PK this generator can't be used"""
20461,409230434,b'This will null out _responseMessage also which is incorrect.'
20461,409230684,b'Remove method and inline in usage.'
20461,409230827,b'Inline.'
20461,409231365,b'Add `using EntityFrameworkCore.ValueGeneration;`'
20461,409283755,"b""No, I wasn't exact. There will always be a member with `id` as the store property name. So the condition should be on `member.Metadata.GetJsonPropertyName()`"""
20461,409346621,b'`FirstOrDefault` changed to `QueryableMethods.FirstOrDefaultWithoutPredicate`.'
20461,409374605,b'> use CosmosStrings\r\n\r\nPlease add more context?'
20461,409379242,b'Now made explicit/remembered with `_hasExecuted` boolean.'
20461,409416414,b'`member.Metadata.GetJsonPropertyName()` ? '
20461,409713514,b'> Please add more context?\r\n\r\nAdd the message as a resource to `CosmosStrings.resx` then run `CosmosStrings.Designer.tt`'
20461,409715376,b'We have two options: either we preserve the original type and use the appropriate constructor of `PartitionKey`  or we require it to be string or have a converter'
20461,409717533,b'We are looking for the property mapped to `id`:\r\n`.FirstOrDefault(member => member.Metadata.GetJsonPropertyName() == StoreKeyConvention.IdPropertyName)`'
20461,409734432,"b""Maybe I'm missing a `using`, `member.Metadata.GetJsonPropertyName` cannot be resolved."""
20461,409741206,"b""Oh, it's on `IProperty`, use `entry.Properties` instead"""
20461,409772226,b'Can only do that if we change the `namespace` too.'
20461,409783501,"b'> We have two options: either we preserve the original type and use the appropriate constructor of `PartitionKey` or we require it to be string or have a converter\r\n\r\nI think it makes sense to require a string, since Cosmos ultimately stores the partition key as a string anyhow.'"
20461,409795286,"b'Yes, this should be in `TestUtilities`'"
20461,409799453,"b""Also check that if there's a partition key it must be part of the PK.\r\n\r\nAdd a test with an entity type that has the partition key that's not part of the PK.\r\nAdd a test with an entity type that doesn't have a partition key."""
20461,410098322,"b""> Also check that if there's a partition key it must be part of the PK.\r\n\r\nThere has to be a partition key for `Find()` to work, right? I can't find anything official, but according to this SO post, non-partitioned containers are being deprecated (if it hasn't already): https://stackoverflow.com/a/55138587/4140832. """
20461,410135245,"b""> Add a test with an entity type that has the partition key that's not part of the PK.\r\n> Add a test with an entity type that doesn't have a partition key.\r\n\r\nAre the two not identical, since it is not possible to add the partition key to the PK, if the partition key is not defined for the entity?"""
20461,410477153,"b""The partition key is optional in EF, in that case we use the default one.\r\nIf there's no explicit partition key or if it's not part of the PK Find **should still work**, but without this optimization. https://github.com/dotnet/efcore/issues/20509 tracks logging a warning in these cases."""
20461,410501055,"b""```suggestion\r\n    <value>Invalid id value specified in 'Find' call. The id value must be a string and it cannot be null or empty.</value>\r\n```"""
20461,410502531,"b""If there's no partition key property use `PartitionKey.None` in the `ReadItemAsync` call"""
20461,410711432,b'Check for null instead if catching'
20461,410711618,b'The previous name was better'
20461,410712392,b'```suggestion\r\n                    var resourceIdProperty = _entityType.Properties.First(p => p.GetJsonPropertyName() == StoreKeyConvention.IdPropertyName);\r\n```'
20461,410712694,b'Separate into two messages and move them to CosmosStrings'
20461,410714528,b'You can just return jsonReader'
20461,410715025,"b'Change this to `Dictionary<IProperty, string>`'"
20461,410716082,b'Combine this method with `GetGeneratedResourceId` and use this instead:\r\n```\r\ninternalEntityEntry[property] = value;\r\n```\r\n'
20461,410716193,b'cast to string instead'
20461,410716417,b'cast to string'
20461,410716965,b'Spell out Expression in all variables'
20461,410717488,b'Already have a `binaryExpression` in scope. I can change the existing `binaryExpression` to `lambdaBodyBinaryExpression`: \r\n\r\n```csharp\r\nif (queryRootMethodCallExpression.Arguments[1] is UnaryExpression unaryExpression\r\n                            && unaryExpression.Operand is LambdaExpression lambdaExpression\r\n                            && lambdaExpression.Body is BinaryExpression lambdaBodyBinaryExpression)\r\n```\r\n\r\nIs that better?'
20461,410717681,"b""Don't forget to move this"""
20461,410719886,b'This now throws if `value` is an `int`. Should we require that the partition key is a `string`?'
20461,410720337,b'`cb.Property(c => c.PartitionKey).HasConversion<string>()` makes no difference. Seems we are missing a converter somewhere?'
20461,410720585,b'```C#\r\n            var converter = partitionKeyProperty.GetTypeMapping().Converter;\r\n            if (converter != null)\r\n            {\r\n                partitionKey = (string)converter.ConvertToProvider(value);\r\n            } else {\r\n                partitionKey = (string)value;\r\n            }\r\n```\r\n\r\nAnd do the same for `id`'
20461,410852411,b'Should we handle the [`PartitionKey.Null`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.cosmos.partitionkey.null?view=azure-dotnet) case also?'
20461,410930596,"b""No, EF Core doesn't allow nulls in keys, even though Cosmos might."""
20684,410971070,"b""Shouldn't this be in TestHelpers?"""
20674,411009392,"b""This was used to determine whether to use the original or the current value at some point, but we've moved away from that"""
20685,411022226,b'UnicornEqualityComparer?\r\n\r\nReferenceEqualityComparerEx2?'
20686,411156394,b'Remove en-us. It is by design.'
20686,411166473,b'OOPS! Missed that.'
20687,411235072,"b""This is a dirty hack I've done in order to move forward and check my idea. In order to pick up a value generator the property type is checked and the IProperty is immutable at this point, so if there's a value converter we can use the converter store type to pick up a value generator that is wrapped into a value generator that uses the defined converter.\r\n\r\nI can probably push this down instead of in the sql server provider, but I would like to ask the team if the approach make sense"""
20461,411565639,b'full Expression'
20461,411565958,b'Why is this here?'
20461,411570472,b'Good catch. I can create a new PR to fix this?'
20461,411570489,b'After rebasing to latest master it was no longer possible to compile without it.\r\n\r\n@AndriySvyryd want to comment?'
20461,411570617,"b""@AndriySvyryd - Shouldn't this be enumerated over key properties rather than all properties (or may be just over properties stored in ReadItem."""
20461,411571594,b'We should make this Enumerable of JObject from query consistency perspective. '
20461,411572407,b'Just include in #20690'
20461,411578444,"b""I'll fix this one by making the extension method public, but in general you also need to add a corresponding `#pragma warning restore EF1001`"""
20461,411581941,"b""I'll fix this one"""
20681,411075991,b'Rename this'
20681,411076564,b'```suggestion\r\n    ///     Debug string customization options for tracked entities.\r\n```'
20681,411442598,b'We already have a `RelationalModelExtensions` class that has relational extensions for `IModel`...'
20681,411492342,b'The other option is to rename RelationalModel to DatabaseModel and use it for scaffolding (https://github.com/dotnet/efcore/issues/20284)'
20681,411503608,b'(expressed my opinion on the above options)'
20681,411530651,b'20284 is on the backlog. It would be a break to rename in a later release. Does this mean we should rename it now? Or we could just put both types of extensions in the same class. :shrug: '
20540,408498318,b'Only do this if `stored` is not null'
20679,412337669,b'Are there any byte ordering considerations here?'
20679,412339568,"b""Probably want some `_defaultHints` here so we create the right-sized binary column by default. Take a look at GuidToBytesConverter--it's probably a good pattern to follow for his converter."""
20679,412341485,b'Not sure if there is value in this base class since only one converter will inherit from it.'
20679,412342385,b'providerClrType cannot be null here due to the check above.'
20679,412343385,b'Does IPAddress support IPv6?'
20679,412348494,"b'Yes, see [IPAddress.AddressFamily](https://docs.microsoft.com/en-us/dotnet/api/system.net.ipaddress.addressfamily?view=netframework-4.8#System_Net_IPAddress_AddressFamily), we should at least have some tests.'"
20679,412349497,"b'Am not too sure about mapping IPAddress.None to null... None is a actually a valid value, equal to Broadcast (0x00000000FFFFFFFF).'"
20679,412357803,b'@ralmsdeveloper We should make sure to handle and test this too.'
20679,412380465,"b""Okay, I'll do it, thanks for looking, I was waiting for a comment from you first, to do more tests, because if this wasn't a good way I wouldn't waste energy."""
20679,412404478,"b'@roji \r\nI agree with you, if you are not feeling well with `IPAddress.None` we can go from `IPAddress.Any` (_0.0.0.0_) this nullifies the possibility of having a Valid IP.\r\n\r\nLet me know how you feel about it?\r\n\r\n\r\nAll right for you @ajcvickers'"
20679,412426114,"b""@ralmsdeveloper I don't think IPAddress.Any is any more suitable than IPAddress.None - it's a valid IP value (in the sense that someone may need to store it). This would be the same as writing a value converter from int to string, where an int zero is converted to null: it would make it impossible to save a 0 to the database...\r\n\r\nIs there any reason you think we need to convert any value to null?"""
20679,412427565,"b""Note that IPAddress is a class (so nullable). I'd expect the value converter to convert a null IPAddress to a null byte[] and vice versa; I don't see a reason to convert any non-null value of IPAddress to null..."""
20679,412515973,"b""I'm working on it and I'll be back here in today!"""
20679,412557973,"b'@roji \r\nWith the adjustments I made, we can now read and write a null value.'"
20679,413079645,b'Removed'
20676,412356731,"b'```suggestion\r\n    ///     A convention that configures the table comment for an entity type based on the applied <see cref=""DescriptionAttribute"" />.\r\n```'"
20676,412359285,"b'It looks like you\'re referring to a table of comments.\r\n```suggestion\r\n        [Description(""Test table comment"")]\r\n```\r\n'"
20676,412366853,"b'```suggestion\r\n    ///     A convention that configures the column comment for a property or member based on the applied <see cref=""DescriptionAttribute"" />.\r\n```'"
20676,412378398,"b'My English is very bad, I am improving :)'"
20676,412430021,"b""Please don't worry about it at all. We really appreciate your input and these are only small changes - I'm happy to help."""
20676,412465449,b'I will remove extra line. \xf0\x9f\xa4\xa6\xf0\x9f\x8f\xbb\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f'
20676,412570930,"b'```suggestion\r\n    ///     Marks a class, property or field with a comment which will be included in the SQL sent to the database .\r\n```'"
20676,412574052,b'Is there a reason you need to create an empty `Comment`? Have a look at [BackingFieldAttribute](https://github.com/dotnet/efcore/blob/master/src/EFCore.Abstractions/BackingFieldAttribute.cs) - I think this class should probably look like that.'
20676,412574383,"b'Sorry - this should be ""property or field"".'"
20676,412577885,"b'Sorry. I should have caught this last time. This test is about the `TableAttribute`. You need to revert this one (although could you at the same time rename it to ""TableAttribute_sets_table_name_and_schema_with_conventional_builder"" since that\'s all it actually does?). Then create another test which is ""CommentAttribute_sets_table_comment_with_conventional_builder"" and test that the table comment is updated separately.\r\n\r\nThen you\'ll need 2 more tests - in the same file copy `TableAttribute_overrides_configuration_from_convention_source` and `TableAttribute_does_not_override_configuration_from_explicit_source` and create `CommentAttribute...` versions of them.'"
20676,412578242,b'Same comments as for `TableAttribute` above.'
20676,412578773,b'Thanks.'
20676,412629218,b'```suggestion\r\n        public CommentAttribute([NotNull] string comment)\r\n```'
20676,412629512,b'```suggestion\r\n        public void CommentAttribute_on_property_sets_column_comment_with_conventional_builder()\r\n```'
20676,413137332,b'How I missed it :)'
20676,413181675,b'No worries. Happens to the best of us.'
20699,413343629,"b'Can you file an issue to use verbatim strings where it makes sense? (I always wanted us to generate `@""...(localdb)\\MSSQLLocalDB...""` in OnConfiguring)'"
20699,413349064,b'Raised #20723 '
20724,413421965,b'I think you need the following as well:\r\n```XML\r\n    <comment>Error CoreEventId.InvalidIncludePathError object object</comment>\r\n```'
20603,407090371,b'Generic since non-string types may be collatable (plus arbitrary CLR types mapped to database text via value converters)'
20603,407090529,"b""AFAICT COLLATE never modifies the type mapping, it just bubbles it up from its operand. So I'm not so sure that constructing CollateExpression via the factory is actually needed, did it for now for consistency. Let me know @smitpatel."""
20603,407090613,b'Number of translators is slowly creeping up again :fearful: We can merge at some point if we care.'
20603,407612358,"b""We don't use expression body for ctors."""
20603,407614420,"b'How does type mapping and collation interact though?\r\nCan you specify collation on non-string columns?\r\nOn string columns, can you still specify from outside?\r\ne.g. `column == ""a"" Collate John Doe` ? Then assigning default type mapping would be wrong.'"
20603,407662228,b'I sense a fight :) (just kidding)\r\n\r\nAny reason to make an exception for constructors as opposed to other methods (or properties)? Seems quite inconsistent to me...'
20603,407669315,"b'> How does type mapping and collation interact though?\r\n>  Can you specify collation on non-string columns?\r\n\r\nCollation support is typically restricted to textual types. However, that list isn\'t necessarily well-known, and conceptually other text-like types may also support collation (json/xml/full text search, although I haven\'t done the research here yet). So I preferred to not restrict anything here - since the user is very explicitly using EF.Functions.Collate, my logic was to translate this and let the database error if not supported.\r\n\r\nWe could add a flag on RelationalTypeMapping to indicate whether it\'s collatable, but as it would only serve to throwing earlier it doesn\'t seem very valuable... What are your thoughts?\r\n\r\n> On string columns, can you still specify from outside?\r\n> e.g. column == ""a"" Collate John Doe ? Then assigning default type mapping would be wrong.\r\n\r\nWhat happens here is subject to database collation precedence rules. For example, in your expression ""a"" has an explicit collation, so that takes precedence over any collation configured on column. This seems to be pretty cross-database (but again, haven\'t researched exhaustively). Do you see a potential issue here? '"
20603,407767724,"b""I don't know. I just mentioned what is happening in rest of codebase. I don't have any preference. We can change the rule also. \r\n"""
20603,407769238,"b'For first one, I was thinking, if it is only on string type then we can check TypeMapping.StoreType to throw early. Since TypeMapping would be available. Was trying to think of more understandable exception rather than just invalid SQL which user need to parse to understand the error. But if it is too difficult then we can just let Invalid SQL like we do in other places.\r\n\r\nFor second one, My question is about TypeMapping rather than collation precedence rules. What typemapping should be used to print out ""a"", should it be unicode or non-unicode? Does collation affect that aspect?'"
20603,408012586,b'OK. We can see if anyone has any objections in the design meeting.'
20603,408020870,"b'> For second one, My question is about TypeMapping rather than collation precedence rules. What typemapping should be used to print out ""a"", should it be unicode or non-unicode? Does collation affect that aspect?\r\n\r\n~~For MySQL, explicitly using a collation *can* change the underlying char set for that expression, if the collation used is from a different char set (every collation depends on a single char set in MySQL).~~\r\n\r\nInternally in Pomelo, we do not do anything with the Unicode/non-Unicode `StringTypeMapping` flag and just ignore it. We only care about, whether a char set and/or collation was set or not.'"
20603,408029453,"b'> For first one, I was thinking, if it is only on string type then we can check TypeMapping.StoreType to throw early. Since TypeMapping would be available. Was trying to think of more understandable exception rather than just invalid SQL which user need to parse to understand the error. But if it is too difficult then we can just let Invalid SQL like we do in other places.\r\n\r\nOK. A check on the CLR type seems problematic, because value converters can be used to convert a non-string CLR type to a database text type, and users may want to apply collation to those. Another objection is text-like database types that don\'t map to CLR string (json/xml/full text), so we should be careful about restricting this to CLR string.\r\n\r\nA check on the store type could work better, but then the provider would have to tell us which type mappings are collatable, and which aren\'t (because the list is provider-specific). We can add IsCollatable to RelationalTypeMapping, but if we do it only in order to raise an exception it seems like low-value to me...\r\n\r\n(BTW I actually think database errors aren\'t necessarily a bad thing or something we should hide/improve on, but of course it\'s case by case)\r\n\r\n> For second one, My question is about TypeMapping rather than collation precedence rules. What typemapping should be used to print out ""a"", should it be unicode or non-unicode? Does collation affect that aspect?\r\n\r\ntl;dr ""a"" should have the same type mapping as it would have had if COLLATE wasn\'t there (which seems to be varchar on SQL Server).\r\n\r\nMore in-depth... unicode/non-unicode as a *type mapping* thing seems to be SQL Server-specific (this is why at some point I didn\'t like that RelationlTypeMapping has IsUnicode on it...).\r\n\r\n* SQL Server: varchar vs. nvarchar types as we know\r\n* [PostgreSQL](https://www.postgresql.org/docs/current/multibyte.html): set character set is determined at the database level only (e.g. `CREATE DATABASE korean WITH ENCODING \'EUC_KR\'`).\r\n* [MySQL](https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html) (see also [this on unicode](https://dev.mysql.com/doc/refman/8.0/en/charset-unicode.html)): character set can be set per-column.\r\n* Sqlite: seems to be always Unicode, though I\'m not 100% sure.\r\n\r\nI did a bit of testing to see what the COLLATE expression does to type mappings on SQL Server:\r\n\r\n```sql\r\nCREATE TABLE data (\r\n    c1 varchar(255),\r\n    c2 nvarchar(255)\r\n);\r\nINSERT INTO data (c1, c2) VALUES (\'foo\', \'foo\');\r\n\r\nSELECT SQL_VARIANT_PROPERTY(c1, \'BaseType\'), SQL_VARIANT_PROPERTY(c1 COLLATE Latin1_General_CS_AS, \'BaseType\') FROM data;\r\n-- returns varchar, varchar\r\nSELECT SQL_VARIANT_PROPERTY(c2 , \'BaseType\'), SQL_VARIANT_PROPERTY(c2 COLLATE Latin1_General_CS_AS, \'BaseType\') FROM data;\r\n-- returns nvarchar, nvarchar\r\n\r\nSELECT SQL_VARIANT_PROPERTY(c1, \'MaxLength\'), SQL_VARIANT_PROPERTY(c1 COLLATE Latin1_General_CS_AS, \'MaxLength\') FROM data;\r\n-- returns 255, 255\r\nSELECT SQL_VARIANT_PROPERTY(c2 , \'MaxLength\'), SQL_VARIANT_PROPERTY(c2 COLLATE Latin1_General_CS_AS, \'MaxLength\') FROM data;\r\n-- returns 510, 510\r\n```\r\n\r\nIn other words, the expression seems to be completely pass-through as far as type mapping is concerned - it doesn\'t change anything, just applies a collation to be used for sorting/equality. Does this seem exhaustive enough, do you think there are further open questions?\r\n\r\n(BTW there\'s a connection between character sets and collations - the set of collations you can use is determined by the character set - but that doesn\'t seem to be something we should care about).'"
20603,408032790,"b""@lauxjpn\r\n\r\n> For MySQL, explicitly using a collation can change the underlying char set for that expression, if the collation used is from a different char set (every collation depends on a single char set in MySQL).\r\n\r\nAm curious, can you give an example of how that works? In general, I'm not used to thinking of an *expression* having a char set (as opposed to a column or database).\r\n\r\n> Internally in Pomelo, we do not do anything with the Unicode/non-Unicode StringTypeMapping flag though and just ignore it\r\n\r\nSame in Npgsql."""
20603,408046705,"b""> ~~For MySQL, explicitly using a collation *can* change the underlying char set for that expression, if the collation used is from a different char set (every collation depends on a single char set in MySQL).~~\r\n\r\nScrap that. String literals *have* a char set in MySQL, but it is always the one specified for the connection (unless explicitly stated otherwise; see below) and an explicit collation must be compatible with it:\r\n\r\n(From [10.3.6 Character String Literal Character Set and Collation](https://dev.mysql.com/doc/refman/8.0/en/charset-literal.html))\r\n\r\n>`[_charset_name]'string' [COLLATE collation_name]`\r\n>\r\n>[...]\r\n> * If `_charset_name` is not specified but `COLLATE collation_name` is specified, the [connection default character set](https://dev.mysql.com/doc/refman/8.0/en/charset-connection.html) given by the `character_set_connection` system variable and collation `collation_name` are used. `collation_name` must be a permitted collation for the connection default character set.\r\n\r\n> Am curious, can you give an example of how that works? In general, I'm not used to thinking of an expression having a char set (as opposed to a column or database).\r\n\r\nIt is possible to explicitly set the char set of the string literal, but not just by the collation, but by also specifying a *char set introducer*:\r\n\r\n> * If both `_charset_name` and `COLLATE collation_name` are specified, character set `charset_name` and collation `collation_name` are used. `collation_name` must be a permitted collation for `charset_name`.\r\n\r\nFinally, you can change a char set and collation by using `CAST()`:\r\n\r\n```sql\r\nSELECT CAST('test' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin;\r\n```\r\n\r\nBut this all is not relevant here anymore, since explicitly supplying only a collation cannot change the underlying char set, but instead has to be compatible with it."""
20603,408072940,"b'Great info, thanks @lauxjpn.'"
20603,408190156,b'Then the code is incorrect here.'
20603,408205660,"b""@smitpatel you're right, thanks - corrected to just always bubble up the type mapping. Though is there any value in having this method on SqlExpressionFactory, rather than just constructing CollateExpression directly (https://github.com/dotnet/efcore/pull/20603#pullrequestreview-391786197)?"""
20603,408219381,b'Invert condition. Add Check.NotNull'
20603,408219697,b'If type mapping can never change and remove type mapping argument here. And always pass in from operand to base.'
20603,408220749,b'Use string.Equals with appropriate comparison option.'
20603,408220900,b'variable name.'
20603,408221528,b'If there cannot be anyway CollateExpression can have different type mapping than operand then you can remove this method and initialize using new syntax.'
20603,408222040,b'Bubbling up still does not work. You need to also add code how to apply typeMapping from outside to CollateExpression. '
20603,408228398,"b""I think this is the case, but the idea is to leave an escape hatch in case I've missed something, or some other unknown database has peculiar behavior. Any objections to just leaving it?"""
20603,408229497,"b'I think we may have discussed this, but equality operator for strings is the same as `string.Equals(s, StringComparison.Ordinals)`, but the latter is needlessly verbose... Will change but I think we should reconsider.'"
20603,408230759,"b'I agree, but assuming we leave the escape hatch as per https://github.com/dotnet/efcore/pull/20603#pullrequestreview-393031809, would you want to leave this?'"
20603,408233635,"b'Thanks, added support in ApplyTypeMapping.'"
20603,408239793,b'That is not how collate is supposed to apply type mapping. \xf0\x9f\xa4\xa6 '
20603,408244120,b'If you think we need escape hatch then we need more research on how collation affects type mapping since it changes a lot of things in type mapping inference.\r\nI would be on the side of not adding escape hatch. If your type mapping differs then this CollateExpression is not for you. Add your custom one which also deals with inferring/propagating typemapping.'
20603,408244221,b'Remove'
20603,408244745,b'Is empty string as collation valid? If not then Check.NotEmpty'
20603,408248387,"b'Sorry about that, am going a bit too fast today.'"
20603,408259618,b'@maumar to verify'
20603,408260740,b'We can remove the method.'
20603,408261269,b'#unresolved'
20603,408262002,b'Just make it abstract'
20603,408890414,"b'Makes sense, am removing the parameter.'"
20603,408892279,"b""> If you think we need escape hatch then we need more research on how collation affects type mapping since it changes a lot of things in type mapping inference.\r\n\r\nThe problem is that I'm not aware of a situation that requires this escape hatch, so difficult to research how collation would interact with type mapping in that case :)\r\n\r\nThis escape hatch could still make sense, since the provider could still provide their type mapping logic in their own SqlExpressionFactory. But better to not deal with theoretical situations, we can always revisit if/when a need comes up."""
20603,408896283,"b""My problem with escape hatch is, there is a lot more complicated code a provider has to write to deal with type mappings rather than just passing one for CollateExpression. At that point adding a custom CollateExpression to accommodate typeMapping is pretty minor point. On the other side, it is guaranteed that things won't work by just providing ability add a type mapping to CollateExpression. At the least provider needs to address, how operand sends typeMapping outside and how outside typeMapping would flow to operand."""
20603,408901863,"b'Makes sense @smitpatel, thanks.'"
20603,409768397,"b""I don't think we ever made an exception here as such. Expression-bodied constructors came in a later version that expression-bodied methods and we just didn't convert to them or start using them much, but I don't remember anyone having any objections to them."""
20603,409854861,b'Missing Check.NotNull.'
20603,409882478,b'@smitpatel elegant way to avoid the expression-bodied constructor :)'
20603,409883534,"b""But I'm do even better by eliminator it altogether (no need for SqlExpressionFactory...)"""
20603,409883986,b'@maumar @smitpatel are we waiting for anything in particular here? Would be good to merge this for preview4.'
20603,409884183,b'Waiting for this.'
20603,410354569,b'this is correct - signed off'
20603,413296436,b'Can you add internal docs.'
20603,413298173,b'Check.NotNull on visitor'
20603,413300184,b'What is the effect of using EF.Functions.Collate on a string column and projecting it out?'
20603,413884576,"b'These seem to be missing from all translators, will submit a separate PR for this.'"
20603,413898908,"b'Assuming I understand your question: the collation aspect bubbles up across projections - does this look good?\r\n\r\nSQL Server:\r\n\r\n```sql\r\nDROP TABLE data;\r\nCREATE TABLE data (\r\n    id INT IDENTITY,\r\n    cs VARCHAR(MAX) COLLATE Latin1_General_CS_AS\r\n);\r\nINSERT INTO data (cs) VALUES (\'foo\');\r\n\r\nSELECT * FROM data WHERE cs = \'FOO\'; -- no results because column is case-sensitive\r\n\r\nSELECT * FROM (\r\n    SELECT cs COLLATE Latin1_General_CI_AS AS cs\r\n    FROM data\r\n) AS t\r\nWHERE t.cs = \'FOO\'; -- returns row because cs projects out with the explicitly-applied collation\r\n```\r\n\r\nPostgreSQL:\r\n\r\n```sql\r\nCREATE COLLATION cs_collation (LC_COLLATE = \'en-u-ks-primary\',\r\n    LC_CTYPE = \'en-u-ks-primary\',\r\n    PROVIDER = icu,\r\n    DETERMINISTIC = False\r\n);\r\n\r\nDROP TABLE IF EXISTS data;\r\nCREATE TABLE data (\r\n    id INT GENERATED ALWAYS AS IDENTITY,\r\n    cs TEXT COLLATE ""POSIX""\r\n);\r\nINSERT INTO data (cs) VALUES (\'foo\');\r\n\r\nSELECT * FROM data WHERE cs = \'FOO\'; -- no results because column is case-sensitive\r\n\r\nSELECT * FROM (\r\n    SELECT cs COLLATE cs_collation AS no_longer_cs\r\n    FROM data\r\n) AS t\r\nWHERE t.no_longer_cs = \'FOO\'; -- returns row because cs projects out with the explicitly-applied collation\r\n```'"
20603,414053430,b'Ignore. I already did this as part of query docs work. I am trying to make sure we have docs for all new stuff.'
20603,414054535,b'Nooo. I wanted a test where you are using EF.Collate in projection and if it generates any difference in reading results. (which it should not.)'
20603,414078957,b'OK thanks!'
20603,414080578,"b""Ohh you mean top-most projection (i.e. on a column that will be read by the client)? If so I'll check that, no problem (did you mean you want actual test code for this?)"""
20736,414104382,"b""@jcagme does this have to match what it was before? We've since renamed this repo to `efcore`"""
20573,406976204,b'Why not just add the XML comment?'
20573,406978760,b'As above.  I think we have other Extensions classes with comments here. See e.g. [ExpressionExtensions](https://github.com/dotnet/efcore/blob/master/src/EFCore/Infrastructure/ExpressionExtensions.cs)'
20573,406979369,b'`DbSet` should be inside a `cref`'
20573,406979416,b'As above. And similarly below.'
20573,406980038,b'How about just one pragma warning disable and one pragma warning restore around everything inside the struct?  '
20573,406980327,b'Typo: exprssion -> expression'
20573,406981372,"b'Say what happens if you exceed this limit. Does it just cut the string off, or try to concatenate some chars from the start and some from the end with ""..."" in the middle?'"
20573,406982020,b'Typo: expresion -> expression '
20573,406983185,b'Consider renaming this class to `ProjectionMemberChain`'
20573,406983717,"b'Nit: ""A class that post-processes the translated query""'"
20573,406983838,b'Nit: Same change as above.'
20573,406983961,"b'Nit: ""translates""'"
20573,406984340,b'Should `Queryable.Average` be a `cref`?'
20573,406984429,b'As above. Also applies below.'
20573,406984964,b'Typo: repplaces -> replaces '
20573,406985165,b'Typo: repalcement -> replacement'
20573,406986289,b'If the comments are correct then change method name to `VisitShapedQueryExpressionEnumerable` or something like that. It would be good to give the user a clue to use this to produce an expression of enumerable.'
20573,406986487,b'Typo: reprensing -> representing '
20573,406986688,b'Typo: and -> an'
20573,406991289,b'Non query. I would defer to people who would be most appropriate to write. I am not sure that I can come up with the best documentation.'
20573,406991431,b'I just let VS do it. Does not matter much. This should get cleaned up when docs are added for this.'
20573,406991752,"b'Breaking change. Not worth it. Also there is one without any chain or single so not necessarily a chain. It is more like our way to recognize which projection refers to which Member in NewExpression.\r\n\r\ncc: @dotnet/efcore - If people think, we should break it then I am fine too.'"
20573,406991868,b'Postprocess is single word that is what we identified and decided to name the class Postprocessor (with small p for process). Are we saying something different now?'
20573,406992069,b'I thought about it but cannot. Some of these methods translate more than one Queryable methods. Especially Sum/Average has explosion of methods over value types (22 methods for each). It is not worth the value to add all of them in xml docs.\r\n\r\n@dotnet/efcore  - thoughts?'
20573,406992303,"b""Visit*Expression is ExpressionVisitor pattern.  I don't it is worth to change away from pattern of ExpressionVisitor for this.\r\n\r\ncc: @dotnet/efcore ?"""
20573,406993072,"b'You definitely need the ""es"" on the end and adding ""the"" sounds better to my ear. Whether you want the hyphen: auto-correct put it in for me, but I\'m not too fussy about it. And, no, I\'m not suggesting renaming the class.'"
20573,406993356,"b""I'm not fussy about this. If it would cause you to have to refer to lots of methods then I'm fine with it not being a `cref`."""
20573,406993795,b'Will do grammar correction. Can you tell how do I run spell checker in VS? (if there is a way)'
20573,406994562,"b'Based on the docs for `GetDerivedTypesInclusive()` (which it calls), how about:\r\n\r\n```C#\r\n        /// <summary>\r\n        ///     Returns all the derived types of the given <see cref=""IEntityType"" />, including the type itself, which are not <c>abstract</c>.\r\n        /// </summary>\r\n        /// <param name=""entityType""> The entity type. </param>\r\n        /// <returns> Non-abstract, derived types. </returns>\r\n```'"
20573,406996232,"b""The docs refer to it as a member chain - so just trying to be consistent. And e.g. a `List` can be empty or have only a single element in it. That said, I don't have a feel for whether this is worth the break."""
20573,406997841,"b'There are VS extensions that do spell checking - might take a while to train it to ignore lots things though. But I just saw red-underlining of ""postprocesses"" in the GitHub comment which went away when I changed it to ""post-processes"". Sorry - I know that doesn\'t help much.'"
20573,406998046,b'How about `VisitShapedQueryToEnumerableExpression`?'
20573,406998195,"b""I guess my point is if I was looking for a method to turn an expression into an enumerable expression and I was scanning through the methods this one would not leap out at me. I'd have to read the docs on all the methods and that could take some time."""
20573,407001715,b'> How about VisitShapedQueryToEnumerableExpression?\r\n\r\nThat required renaming ShapedQueryExpression to ShapedQueryToEnumerableExpression. '
20573,407018629,"b""Alright. I guess that's not the point of this PR. I maintain that neither the method name nor the return type explain what the method actually does - which is a bad sign. But this PR is more about the docs, so let's consider it another time.  API Review?"""
20573,407027090,"b'> I maintain that neither the method name nor the return type explain what the method actually does \r\n\r\nThat is not entirely true. VisitShapedQueryExpression method visits ShapedQueryExpression. For any method in every Visit* method in ExpressionVisitor does the same. It is totally up to the method what is transforms the expression inside. Infect there is no good way to name if we are trying to name methods like that.\r\nVisitMethodCall in RelationalSqlaTranslatingExpressionVisitor converts\r\n- EF.Property to column in SQL\r\n- p[""Indexer""] to column\r\n- instance.Equals/object.Equals to `a == b`\r\n- Equals above entity type to key equality comparison\r\n- A subquery like c.Orders.FirstOrDefault().OrderId to ScalarSubqueryExpression\r\n- A subquery like c.Orders.FirstOrDefault() to entity reference to either bind a member later or convert to entity equality rewrite\r\n- g => g.Method(), where g is IGrouping and method is any aggregate method to aggregate operation in Group by query\r\n- or calls MethodCallTranslatorProvider with translated components to translate something custom using provider/plugin/relational translators.\r\n\r\nThere is no way to capture all that on method name. It is a norm in ExpressionVisitor to use Visit* method to tell which kind of expression it is going to visit (plus notice the signature takes that kind of expression only. We try to give private method or other methods suitable name based on what it does. I think ExpressionVisitor.Visit method is just an exception and it is not gonna be fitting in whatever other rules.\r\nYou can file an issue for team to discuss.\r\n\r\np.s. The method name should be VisitShapedQuery (dropping expression, I will update that).'"
20573,407088705,"b""Yeah. I understand. I think I've said everything I can think of here."""
20573,407671830,"b""@smitpatel  As @ajcvickers said you need to write all documentation for API that has slipped through the cracks since the rule was disabled. We'll correct it in the PR if it's wrong."""
20573,407687045,b'Just add the docs'
20573,407688524,b'Remove'
20573,407691257,"b'```suggestion\r\n        ///     The expression representing a <see cref=""ValueBuffer"" /> to get values from that are used to create the entity instance.\r\n```'"
20573,407691469,b'```suggestion\r\n        ///     Changes the entity type being shaped by this entity shaper.\r\n```'
20573,407691610,"b'```suggestion\r\n        ///     Marks this shaper as nullable, indicating that it can shape null entity instances.\r\n```'"
20573,407692920,b'```suggestion\r\n        ///     The expression representing the key selector for this grouping element.\r\n```'
20573,407693020,b'```suggestion\r\n        ///     The expression representing the element selector for this grouping element.\r\n```'
20573,407722260,b'Not a class'
20573,407722580,"b'```suggestion\r\n        /// <param name=""async""> Specifies whether the query is async. </param>\r\n```'"
20573,407732163,b'```suggestion\r\n        ///     The expression that returns the values from query used to create the collection.\r\n```'
20573,407737866,b'```suggestion\r\n    ///         A class representing a chain of CLR members to bind. Usually generated from successive Select calls in the query.\r\n```'
20573,407743466,b'```suggestion\r\n        ///     A value indicating whether the underlying DataReaded needs to pre-buffer all data.\r\n```'
20573,407743580,b'```suggestion\r\n        ///     The CLR type of derived DbContext to use during query compilation.\r\n```'
20573,407743719,b'Remove'
20573,407744370,b'When is this used?'
20573,407744818,b'How are they normalized?'
20573,407745128,b'```suggestion\r\n        ///     Marks the entity shaper in the given shaper expression as nullable.\r\n```'
20573,407745281,b'```suggestion\r\n        ///      Translates the result selector for join operation.\r\n```'
20573,407745755,b'```suggestion\r\n        ///     Translates the given subquery.\r\n```'
20573,407745920,b'Add cref to the method above'
20573,407746077,"b'```suggestion\r\n        ///     Creates a <see cref=""ShapedQueryExpression""/> for the given type by finding its entity type in the model.\r\n```'"
20573,407746305,"b'```suggestion\r\n        ///     Creates a <see cref=""ShapedQueryExpression""/> for the given entity type.\r\n```\r\n\r\nAnd apply this to all similar docs'"
20573,407746479,b'cref'
20573,407746606,"b'```suggestion\r\n        /// <param name=""predicate""> The predicate supplied in the call. </param>\r\n```'"
20573,407746766,b'And apply this to similar docs'
20573,407746841,b'And apply this to similar docs'
20573,407750697,b'Agreed that its not worth breaking for this.'
20573,407763085,b'Cannot. It does not translate just one queryable method. Some methods like Sum/Average translates 20 different overloads. Adding them in XML docs will make them useless at that point.'
20573,407766004,"b'You can link one and add ""and other overloads""'"
20573,407768266,b'```suggestion\r\n        ///     Indicates that the query returns multiple results.\r\n```'
20573,407769233,"b'```suggestion\r\n        ///     Inject entity materializers in given shaper expression. <see cref=""EntityShaperExpression""/> is replaced with materializer expression for given entity.\r\n```'"
20573,407769584,"b'This seems like a good place to provide definintions for ""materializer"" and ""shaper""'"
20573,407770176,b'```suggestion\r\n        ///     An expression representing the query to be run against server to retrieve the data.\r\n```'
20573,407770420,"b'Define ""transparent identifier""'"
20573,407770565,"b'```suggestion\r\n        ///     Compiles the given query to generate a <see cref=""Func{QueryContext, TResult}""/>.\r\n```'"
20573,407770676,"b'```suggestion\r\n        /// <param name=""async""> A value indicating whether this is an async query. </param>\r\n```'"
20573,407770807,b'\xf0\x9f\x98\xa8 '
20573,408335633,b'To post process the translation. Used extensively in relational. Basically allows to change the SQL before hitting the command cache.'
20573,408340895,b'Required using for IParameterValues'
20573,408342033,"b'Extracts query metadata, converts enumerable methods to queryables, flattens GJ-SM into join/left join.'"
20573,408348026,b'Can you elaborate?'
20573,408349030,b'?'
20573,408453383,b'``` \r\n    ///     <para>\r\n    ///         Materializer is a ....\r\n    ///     </para>\r\n    ///     <para>\r\n    ///        Shaper is a ...\r\n    ///     </para>\r\n```'
20573,408453657,b'Now put that into the doc comment'
20573,408453944,b'Put that into the doc comment'
20710,412558780,b'default interface methods?'
20710,412762108,"b'Definitely possible, was following the same pattern used for existing methods. But it makes sense to me to add false/NotSupportedException implementations for the new savepoint APIs, would cut down on some needless code.'"
20710,412842068,b'Have done this. We can also do this for the rest of the methods on IDbContextTransactionManager and IDbContextTransaction (separate PR).'
20710,413292939,b'Should this be true?'
20710,414153417,"b'Yes, as the above methods log a warning instead of throwing'"
20603,414687658,"b'Do you mean the following (which passes on both providers):\r\n\r\n```c#\r\n[ConditionalTheory]\r\n[MemberData(nameof(IsAsyncData))]\r\npublic virtual Task Collate_column_projection(bool async)\r\n    => AssertQuery(\r\n        async,\r\n        ss => ss.Set<Customer>().Select(c => EF.Functions.Collate(c.ContactName, CaseInsensitiveCollation)),\r\n        ss => ss.Set<Customer>().Select(c => c.ContactName));\r\n```\r\n\r\nIf so do you want this in the test suite?'"
20726,414114742,"b'Technically this is a breaking change. Either rename it back or add the old ones with ""Obsolete"" as a comment'"
20726,414768136,b'Put back the old ones as Obsolete.'
20341,396739148,"b""Is that a thing? I don't think we should do this unless maybe Hosting does."""
20341,396740881,b'Maybe RemainingArguments should be passed into CreateExecutor instead of each operation.'
20341,396746459,"b""Yeah, don't add args to the service provider--this shouldn't work unless the app adds them to the service provider or they use IDesignTimeDbContextFactory to pass them into the DbContext"""
20341,396759958,b'This is what Hosting does. Does that change your mind? '
20341,396775932,"b""Yes, it changes my mind about Hosting. \xf0\x9f\x98\x89\r\n\r\nI'm worried that we'll do more harm than good with this. This means that if they're missing an IDbContextFactory (or we fail to discover their services) we'll just assume any string array parameter should be the command line args. But what if it's not? I can think of a hundred other things it might represent."""
20341,396781011,b'Agree with @bricelam '
20341,396790627,"b""OK. I'll update. If you're saying we should change what Hosting does as well would you mind creating a new issue for that? """
20341,398242698,b'Done'
20341,398242822,b'Done'
20341,398242925,b'Done'
20341,398254044,"b""@bricelam Let me know if you think it's better to just remove `throwOnUnexpectedArg` all together."""
20341,398911728,b'Remove unused code'
20341,398913519,b'My eyes reject this syntax. \xf0\x9f\x99\x82 Can you make it `ValueFromRemainingArguments = $true`?'
20341,398914821,b'Add a doc comments. (They appear with `Get-Help Add-Migration -Detailed`)'
20341,398915456,b'Does this play well with options? (arguments that begin with `-` or `--`)'
20341,398917522,"b'I try to avoid changing this code. We forked it from ASP.NET, and diverging from the original will make servicing harder.'"
20341,398924827,"b""Can't we just make `_args` on RootCommand protected?"""
20341,398927490,"b""I'm not sure what you're suggesting. I have to make it not throw on unexpected args - that's the point. Are you just saying keep the change to default of `false` but don't remove the `throwOnUnexpectedArg` all together?"""
20341,398931646,"b""I'm confused. See [my comment above](https://github.com/dotnet/efcore/pull/20341#issuecomment-604154023) - which you added \xf0\x9f\x8e\x89  to? The purpose of these is to have `_args` available and populated as we do for `DbContextOperations`."""
20341,398932254,"b""OK. Will do. But that's the common syntax on the web when I was looking this up."""
20341,398932535,"b""Yes. You just get everything that isn't used by one of the other parameters."""
20341,398938197,"b""Yes, this is unfortunate. I'd rather it just didn't appear in `Get-Help` at all, but there doesn't appear to be a way to get PowerShell to do that. There's `DontShow`, but it only applies to tab-completion, and anyway is not available til PowerShell 4.0.\r\n\r\nCan we agree on what to put? `-RemainingArguments` shows up as a parameter, but you actually do not need to (and probably shouldn't) specify `-RemainingArguments x,y,z`; instead any extraneous options, arguments etc are automatically picked up by this parameter and converted into a `string[]` by PowerShell.\r\n\r\nHow about:\r\n```\r\n.PARAMETER RemainingArguments\r\n    Do not specify directly. This parameter passes through any additional arguments to the command.\r\n```"""
20341,398939908,"b""Did you mean `RootCommand` or `CommandBase` - which is the ultimate base class of all `XyzCommand` objects? Either way the answer is no. That was what I wanted to do first, but all the `CommandLineApplication` objects representing the various `Command`s are created before `Configure()`, let alone `Execute()` runs, and so they don't know know at that time what the remaining args are. You only know once `CommandLineApplication.Execute()` has run (Note: btw the `command` variable here is for a `CommandLineApplication` - it's confusingly named)."""
20341,414161661,"b'Passed to `IDbContextFactory<>.Create()`, not the constructor.'"
20341,414162354,b'But this is private and only appears to be used for the assignment.'
20341,414162631,b'This also appears to be unused.'
20341,414163950,b'Does this concatenate the lists or add `$RemainingArguments` as a single item? Manually test it with two items to see if it works correctly.'
20341,414164220,b'(below too)'
20341,414171203,"b""It's fine to specify it explicitly (albeit unnecessary). I'd just keep it generic since the arguments can be passed to multiple locations:\r\n```ps1\r\n<#\r\n.PARAMETER RemainingArguments\r\n    Arguments passed to the application.\r\n#>\r\n```"""
20341,414172742,"b'I guess it can also be passed to Program.CreateHostBuilder, CreateWebHostBuilder, and BuildWebHost. Maybe just say ""passed to the application"".'"
20341,414780661,b'Have tested - it adds as a list.'
20341,414804087,b'Done'
20341,414804190,b'Done'
20341,414804238,b'Done'
20341,414804376,b'Made them used.'
20341,414832327,"b'You can skip commenting ""Done"" PR automatically updates to make it outdated diff and you can just hit resolve conversation.'"
20690,411571039,"b'This is really just testing the filter in query, so rename it to `Can_query_with_implicit_partition_key_filter`\r\n\r\nMove all tests that use the plain `PartitionKeyContext` to `PartitionKeyTest` and add a fixture, see `CosmosConcurrencyTest` and `NorthwindQueryCosmosFixture`\r\n\r\nAlso assert the generated SQL using\r\n```C#\r\n        private void AssertSql(params string[] expected)\r\n            => Fixture.TestSqlLoggerFactory.AssertBaseline(expected);\r\n```'"
20690,411574196,b'Should throw if it is set both ways and non-matching values.'
20690,411574492,b'@AndriySvyryd - Would tuple be better than KVP?'
20690,411575373,"b'Do not use `MemberInfo.Name`, instead use `MemberInfo.GetSimpleMemberName`\r\n'"
20690,411575815,"b'This would only do it when it is constant, we should also support when it is parameter. By the time we are requiring the value, we do have parameter values available.'"
20690,411576196,b'This could also be EF.Property/EF indexed property.\r\nLeft or Right could be switched also.'
20690,411725028,b'GetSimpleMemberName'
20690,411730408,b'> @AndriySvyryd - Would tuple be better than KVP?\r\n\r\nTuple actually makes more sense to me. '
20690,411742992,b'This should be two parameters'
20690,411749608,"b""```suggestion\r\n    <value>Partition key specified in the WithPartitionKey call '{paritionKey1}' and the partition key specified in the Where predicate '{paritionKey2}' must be identical. Remove one of them .</value>\r\n```"""
20690,412305098,"b""I've started moving the tests over. Please take a look at the first two and let me know if this is the right approach."""
20690,412385609,"b'Yes, you are on the right track. But use multiline strings for `AssertSql` as they are more readable'"
20690,412805770,"b'Thx. I can run the tests now, but only one-by-one. When I run them in batch only the first of the three with succeed, while the other two will fail. \r\n\r\nIt looks like a concurrency issue with the two trying to run at the same time rather than in sequence. '"
20690,412891813,b'Missed `ClearLog()` now it works.'
20690,413002680,b'Take a look at the latest commit and let me know what you think.'
20690,413002791,b'Take a look at the latest commit and let me know what you think.'
20690,413005532,b'The tests `Entity_type_has_no_primary_keys` and `Entity_type_with_partitionkey_not_part_of_primary_keys` both fails here because the PartitionKey has no `int`-->`string` converter defined. \r\n\r\nNot sure how we should deal with this? '
20690,413080414,"b'Also, how can constant vs parameter and left vs. right be tested?'"
20690,413287393,"b""Create a local function which takes left & right  and does the match so you can just call the same function with argument inverted.\r\nCreate another local function which takes, an expression and partitionkeypropertyname, and match the expression to be either MemberExpression with matching member or EF.Propery or Indexer.\r\nMake the value of partition key Expression which can be either ConstantExpression/ParameterExpression, so that we don't need to keep 2 different values.\r\nThere should also be check if one side matches partitionkey property access then other side is either Constant/Parameter."""
20690,413287863,b'Use FindProperty instead and return null if no matching property.'
20690,413289744,"b""We don't need TryGet here, we just get it (no need to use bool return. null partition key means it was not set."""
20690,413291057,"b""Don't expose these properties, rather create a function GetPartitionKey which takes parameterValues from QueryContext and returns either null if no partitionKey set or the value of partition key."""
20690,413291626,b'@AndriySvyryd - Should we do something about queries like\r\n`Where(c => c.PartitionKeyProperty == null)` or too much of edge case to worry about?'
20690,413402229,"b""Partition key is part of a key, so we don't allow null values"""
20690,413402938,b'They should configure a string converter'
20690,413403134,"b""Also rebase and squash. I've fixed this."""
20690,413407694,b'You could still query though right?\r\nMainly figuring out if we need to have TryGet method SelectExpression to figure out partition key value was provided via filter (which turned out to be null value) or we can just return the value.'
20690,413408625,"b""Technically you could use a non-tracking query, but I don't think we should worry about this case"""
20690,414031174,b'It would be more readable if this is converted to `if` statements'
20690,414031540,b'if `property` is `null` return `false`'
20690,414031871,b'undo'
20690,414034739,"b""The partition condition should be removed from query when it's detected"""
20690,414046594,b'A visitor that walks the `translation` expression tree in `TranslateWhere` and cut off the binary expression with an Equal node type that holds a PartitionKey property?'
20690,414048516,b'... or another expression out parameter of `TryGetPartitionKeyFromPredicate` with a modified `translation` expression tree?'
20690,414049052,"b'Yeah, same place where you detect it you can remove it'"
20690,414567956,b'Visitor is not required. Remove. Use a recursive function instead.'
20690,414568761,b'These parameters should be non-null else method should not be called.'
20690,414569027,b'pass only ParameterValues rather than whole queryContext.'
20690,414572671,"b""I thought expressions were immutable and that the way to modify an expression is by using a visitor - i.e. I'm cutting off the branch if it holds a Partition Key property/value?"""
20690,414576125,b'A recursive function can do the same. Let me show you an example.\r\nhttps://github.com/dotnet/efcore/blob/d1dee85e492ef19e0531b3d8943cdb29196c1d1a/src/EFCore.Relational/Query/SqlExpressions/SelectExpression.cs#L1113-L1145\r\n\r\nThe main purpose of ExpressionVisitor is dispatcher so it calls VisitBinary or other Visit* method with properly typed expression.'
20690,415038737,b'_partitionKeyProperty is guaranteed not-null.'
20690,415038814,b'This is unnecessarily complicated. I will update it when merging.'
20690,415073273,"b'Only if set by `SetPartitionKeyProperty(..)`. \r\n\r\nIf `SetPartitionKeyProperty` is never called it would be null, right?'"
20690,415073545,b'> This is unnecessarily complicated. I will update it when merging.\r\n\r\nAgree. Thanks for helping out.'
20690,415075165,b'... also cleaned it up a bit in new latest commit.'
20690,415139795,b'If `_partitionKeyProperty` is `null` you can return early'
20690,415140077,"b'```suggestion\r\n            static bool TryGetPartitionKeyPropertyAndValueExpression(Expression leftBinaryExpression, Expression rightBinaryExpression, IEntityType entityType,\r\n```'"
20762,416091657,b'You can return early if `entityType.GetPartitionKeyPropertyName()` is `null`'
20748,415410809,b'`TableSharingConcurrencyTokenConvention`'
20748,415411233,"b'Use a `(name, schema)` tuple instead for perf'"
20748,416008209,"b""There's no need to preserve the original dictionary, so rename this to `void RemoveDerivedEntityTypes` and take the actual dictionary as the parameter"""
20748,416009425,b'skip types that have no base type'
20748,416013101,"b""Unwrap the `Except` calls as checks in the `foreach` below as `Except` doesn't take advantage of the fact that `toRemove` is a `HashSet`"""
20748,416016660,b'Skip types that have an empty `GetDirectlyDerivedTypes()`'
20748,416031819,"b'By ""skip"" I think you mean ""remove""? But what if the base type is mapped to a different table? I only want the base-most entities that are mapped to this particular table. They don\'t have to be the base-most in the whole tree.'"
20748,416032873,b'Not following - why?'
20748,416039283,b'Move this test to its own file as otherwise this test class would include tests for all conventions'
20748,416046642,"b'Instead of a custom prefix use the existing uniquification pattern:\r\n```\r\nvar concurrencyShadowPropertyBuilder = ((InternalEntityTypeBuilder)entityType.Builder)\r\n                            .CreateUniqueProperty(exampleProperty.Name, exampleProperty.ClrType, !exampleProperty.IsNullable).Builder;\r\n```\r\n\r\nAnd use this builder to configure facets to make sure they are using the convention ConfigurationSource\r\n\r\nAnd use the convention property'"
20748,416048350,b'All the comments for this method are to improve perf'
20748,416051666,b'What I mean by skip is to call `continue`. We know that they will not be removed as they will always be the basest'
20748,416052682,"b""Happy to use `CreateUniqueProperty()` and convention property and the ConfigurationSource.\r\n\r\nBut I wanted to make it easy to spot the difference between a shadow property created by our convention and some other shadow property. Especially if we're not going to log a debug message saying we're creating it. If we use `exampleProperty.Name` above we'll end up with a Property called the same as the example property - which it may be hard to spot is something we created for you if you were just looking at the model. I'd prefer to stick with the prefix."""
20748,416053291,"b""I think that meant only 1 class in that (test) namespace though as the other conventions hadn't done that. OK with that?"""
20748,416054787,"b'Ok, then change the prefix it to ""_implicit_"" or ""_convention_"" to give a clue where it comes from'"
20748,416055494,"b""Yes. Soon we'll need to add a test for TPT there."""
20748,416067882,"b""OK. I see where you're coming from now."""
20748,416073344,b'Note: this adds an internal dependency - which I have to suppress. Is there a more public way of doing the same thing?'
20748,416079393,"b""Also just FYI - the API I was using before to create the property was on an `IConventionEntityType`. So I was already getting an `IConventionProperty` and all the `SetXyz()` calls already set the `ConfigurationSource`s correctly.\r\n\r\nI can be more explicit and call them with `setTypeConfigurationSource = true` and `fromDataAnnotation = false` if you'd prefer?"""
20748,416088549,"b""I'll make it public later. I just wanted to be explicit about the configuration source because `CreateUniqueProperty` returns the internal `Property`, no need to specify the optional parameters."""
20748,416123949,"b'Rename the tests to follow the pattern ""Passes_for_""'"
20748,416161348,b'@AndriySvyryd Do you still want this now that those 3 tests are in a class by themselves? In the new class we are no longer testing whether validation passes - just that the shadow property is created.'
20748,416186920,b'Also add the validation convention'
20748,416188150,b'Change to `CreateConventionlessModelBuilder` and keep the tests. In the future conventions will be removeable.'
20748,416189498,b'Chain the calls together with `?.`'
20748,416190153,"b'Use value tuples instead\r\n```suggestion\r\n            tableToEntityTypes = new Dictionary<(string Table, string Schema), IList<IConventionEntityType>>();\r\n```'"
20748,416191590,b'```suggestion\r\n            var entityTypesWithDerivedTypes = entityTypeDictionary.Where(e => e.Key.GetDirectlyDerivedTypes().Any()).ToList();\r\n```'
20748,416192214,"b""I'd rather combine this with your comment above. Adding in the `ValidationConvention` above will not be enough. We would also end up needing the `TypeMappingConvention` and potentially several others and at that stage it doesn't feel like a unit test any more. So I'd rather put back the original tests I deleted here and change them to expect to pass. """
20748,416194285,"b'Ok, but also keep the tests where the exception is thrown.'"
20748,416236522,b'Make this a generic argument'
20772,416580435,b'@roji dislikes TableValuedFunctionExpression. \xf0\x9f\x98\x89 He is going to bring alternate naming scheme to design meeting.'
20772,416582060,"b""Inaccurate - @smitpatel proactively asked me for my opinion :)\r\n\r\nThe only point is that it's pretty SQL Server-specific terminology, AFAIK. In PG functions can return tables, but nobody uses that term.\r\n\r\nAlternatives proposed by @smitpatel: TableReturningFunctionExpression (sounds almost like a visitor), TableFunctionExpression."""
20767,416317678,b'Obsolete?'
20767,416320845,b'These comments are not helpful'
20767,416321196,"b""Shouldn't this still be obsolete?"""
20767,416327421,b'These are provider facing APIs. I would prefer a clean break rather than obsolete here.'
20767,416328934,"b'This API is inconsistent with rest of SQL tree. We have https://github.com/dotnet/efcore/issues/17268 to improve whole API for users and providers should be using SqlExpressionFactory anyway. Could keep this, but I feel that it will cause more confusion to users. Can we provide the breaking change info through docs rather than obsolete API here?'"
20767,416366179,"b""I don't think there would be any confusion if they are obsolete."""
20767,416366562,"b""If possible we should avoid breaking changes. We'll remove them in 6.0"""
20767,416462598,b'Great'
20767,416465577,b'Add default null on elseResult to make it easier to call when there is no else?'
20767,416475066,"b""I think we had some discussions around factory vs. constructor before...\r\n\r\n* The proposed API seems to interpret a lack of arguments as niladic - that doesn't seem right. Non-niladic functions are capable of being called with no arguments (i.e. `FUNC()` vs. `FUNC`), and I'm not seeing how to express that.\r\n* We could expose a constructor overload that accepts niladic directly. But factory methods already do this in a simple  way that doesn't burden the user... why can't we keep them?\r\n\r\n(FWIW I feel the same about builtin, which is already set to true when there is no schema, although that may not always be accurate. The way things currently are, we may as well just eliminate the flag and look at the schema directly... But that's a different question)\r\n"""
20767,416477215,"b'This was actually a (theoretical) bug before, right? i.e. a non-niladic non-builtin function was converted to niladic if it happened to not have a schema?'"
20767,416490409,"b""Thought something else too. Can I also add EditorbrowsableAttribute to hide it from intellisense? Old API will error and show user to correct way and someone writing from scratch won't see these APIs."""
20767,416493429,"b'True.\r\nLet me change it further, SqlServer does not allow user defined niladic functions. '"
20767,416497038,"b'> The proposed API seems to interpret a lack of arguments as niladic\r\n\r\nThat is exactly true. If you have issues with, I am willing to fork this Expression into 2 different expressions. One is NiladicSqlFunctionExpression, ArgumentsSqlFunctionExpression.\r\n\r\n2nd point is unnecessary. To create niladic function, use the overload where there are not arguments passed.\r\n\r\nThe reason Schema on itself is not enough, is SqlServer. Built-In function does not have schema. But functions which are not built-in and without schema are considered in default schema.\r\n\r\nDo we have a case for cross here?\r\n- A non-builtin function which cannot be called with schema?\r\n- A built-in function which has a schema which must be specified?\r\n- A non-built-in function on instance?\r\n\r\n'"
20767,416497886,"b""Yeah, I'm not aware of concrete cases either. But better to be correct :)"""
20767,416502888,"b""> That is exactly true. If you have issues with, I am willing to fork this Expression into 2 different expressions. One is NiladicSqlFunctionExpression, ArgumentsSqlFunctionExpression.\r\n>\r\n> 2nd point is unnecessary. To create niladic function, use the overload where there are not arguments passed.\r\n\r\nWell, take a look at [this PG doc page](https://www.postgresql.org/docs/current/functions-datetime.html) on date/time functions. There are functions without arguments there which are niladic (e.g. current_time), and others which are not (e.g. now()). Unless I'm mistaken, with this proposed change I can no longer call the latter, since `SELECT NOW` is an error (as opposed to `SELECT NOW()`). The distinction is arbitrary (and a bit silly), but it's the reality.\r\n\r\nIf you think that to deal with this, it's better to split to two different expression types (as opposed to just two constructors on the same type), then I guess we can do that, sure... To me it seems like more code/complication for little gain.\r\n\r\nFor builtin, I admit I don't have a concrete example - so it's definitely OK to postpone that discussion. It comes from my belief that if the type has an internal flag which affects later SQL generation, it's better not to hide it (and encode our assumptions on functions and databases into the API), but to just expose it openly - it's not like this would complicate the code in a significant way. But again, no concrete case at the moment."""
20767,416511442,"b""Hence I asked for cross examples here. The type also has flag if instance propagates nullability but we don't expose it on all the ctor since if there is no instance then there is no need of such flag. If built-in functions are schema-less then we just infer from schema being present in API. No strong feeling but no use case for now. (adding built-in flag adds more overloads)\r\n\r\n> Unless I'm mistaken, with this proposed change I can no longer call the latter\r\n\r\nNo. That is not true. You call current_time with overload which does not take arguments and you call now() with overload which takes arguments array but this function has 0 arguments. In either case, you should not be calling these overloads anyway, provider should be using SqlExpressionFactory. If the distinction was so important then we would have changed API on SqlExpressionFactory."""
20767,416518175,"b""OK, missed the distinction between a no argument and empty array argument, thanks.\r\n\r\nThe rest is an API design discussion, I've said what I had to say..."""
20772,416585399,b'SqlFunctionTableExpression For this we should also rename SqlFunctionExpression to SqlFunctionScalarExpression\r\nFunctionTableExpression'
20772,416707172,"b'Going to merge this as is. It will show up in API review, we will discuss then.'"
20783,417489498,b'Nit: add newline above.'
20783,417493291,b'They are missing all over places. From what I understand code cleanup would fix it whenever we run it.'
20341,417942216,b'This should coalesce to empty array.'
20792,418048696,b'This may not be accurate if the tool is installed locally.'
20792,418092396,b'I see. Splitting it up (global / local) would make the error message quite long. Do you still think the benefit is big enough to have it in there?'
20792,418131238,b'Having wrong command is worse than having no command.'
20792,418144495,b'Well sure. My question is wether we should include both commands. '
20792,418165750,b'Seems like a link to conceptual documentation would be better here. Probably pointing to https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet'
20792,418426490,b'I agree a link seems better. But this one does not include the update command for tools.'
20792,418600457,"b'Yes, the documentation will need to be updated as well.'"
20801,418581746,b'```suggestion\r\n    ///         An expression that represents an SQL WHEN...THEN... construct.\r\n```'
20801,418582166,"b'```suggestion\r\n        ///     The value to compare with <see cref=""CaseExpression.Operand""/> or the condition to evaluate.\r\n```'"
20801,418582714,"b'```suggestion\r\n    ///         An expression that represents an SQL column.\r\n```\r\n\r\n(or ""represents a column in SQL"")'"
20801,418583135,b'```suggestion\r\n    ///         An expression that represents an SQL EXCEPT operation.\r\n```'
20801,418583536,b'```suggestion\r\n    ///         An expression that represents a subquery table source with user-provided custom SQL.\r\n```'
20801,418583720,b'Should we include this explanation?'
20801,418583881,b'```suggestion\r\n        ///     The user-provided parameters passed to the custom SQL.\r\n```'
20801,418583924,b'```suggestion\r\n        ///     The user-provided custom SQL for the table source.\r\n```'
20801,418584588,b'```suggestion\r\n    ///         An expression that represents an SQL INTERSECT operation.\r\n```'
20801,418585054,"b'```suggestion\r\n    ///         An expression that represents a projection in <see cref=""SelectExpression""/>.\r\n```'"
20801,418585452,b'```suggestion\r\n    ///         An expression that represents a SQL binary operation.\r\n```'
20801,418585868,b'```suggestion\r\n    ///         An expression that represents an SQL ordering.\r\n```'
20801,418586126,b'```suggestion\r\n    ///         An expression that represents a constant in an SQL tree.\r\n```'
20801,418586298,b'```suggestion\r\n    ///         An expression that represents a SQL token.\r\n```'
20801,418586428,"b'```suggestion\r\n        /// <param name=""sql""> A string token to print in an SQL tree. </param>\r\n```'"
20801,418586804,"b""```suggestion\r\n    ///         An expression that represents a function call in SQL.\r\n```\r\n\r\n(because this doesn't really get generated as FUNCTION?)"""
20801,418586983,"b'```suggestion\r\n        /// <param name=""argumentsPropagateNullability""> A list of bool values indicating whether individual arguments propagate null to result. </param>\r\n```'"
20801,418587081,"b'```suggestion\r\n        /// <param name=""argumentsPropagateNullability""> A list of bool values indicating whether individual arguments propagate null to result. </param>\r\n```'"
20801,418587296,"b'```suggestion\r\n        /// <param name=""argumentsPropagateNullability""> A list of bool values indicating whether individual arguments propagate null to result. </param>\r\n```'"
20801,418587450,b'```suggestion\r\n        ///     A bool value indicating if the function is niladic.\r\n```'
20801,418587518,b'```suggestion\r\n        ///     A bool value indicating if the function is built-in.\r\n```'
20801,418587610,b'```suggestion\r\n        ///     A bool value indicating if the function can return null result.\r\n```'
20801,418587653,b'```suggestion\r\n        ///     A bool value indicating if the instance propagates null to the result.\r\n```'
20801,418587819,b'```suggestion\r\n        ///     A list of bool values indicating whether individual argument propagate null to the result.\r\n```'
20801,418587982,b'```suggestion\r\n    ///         An expression that represents a SQL table value function as a table source.\r\n```'
20801,418588299,b'```suggestion\r\n    ///         An expression that represents a SQL UNION operation.\r\n```'
20801,418588439,b'```suggestion\r\n    ///         An expression that represents a SQL table source.\r\n```'
20801,418588615,b'```suggestion\r\n    ///         An expression that represents a SQL table or view.\r\n```'
20801,418588754,b'```suggestion\r\n    ///         An expression that represents a SQL unary operation.\r\n```'
20801,418588929,b'```suggestion\r\n    ///         An expression that represents a SQL parameter.\r\n```'
20801,418589200,b'```suggestion\r\n    ///         An expression that represents a SQL set operation between two table sources.\r\n```'
20801,418589375,b'```suggestion\r\n        ///     The list of expressions being projected out from the result set.\r\n```'
20801,418589597,b'```suggestion\r\n        ///     The limit applied to the number of rows in the result set.\r\n```'
20801,418589711,"b'```suggestion\r\n        ///     A bool value indicating if DISTINCT is applied to projection of this <see cref=""SelectExpression""/>.\r\n```'"
20801,418589803,b'```suggestion\r\n        ///     Applies a given set of tags.\r\n```'
20801,418608198,b'Copied over from other place. We can clean up all places later if we want to remove.'
20801,418612015,b'```suggestion\r\n    ///         An expression that represents an ordering in SQL tree.\r\n```'
20801,418614227,b'```suggestion\r\n    ///         An expression that represents a column in SQL.\r\n```'
20838,420276835,b'Why are these internal now?'
20838,420280089,b'I did not see usage from outside. @AndriySvyryd should decide if these needs to be public.'
20838,420283063,b'Breaking change...'
20838,420287304,b'New API in 5.0. Added 7 days ago.'
20838,420295866,"b""I added this one. I thought that others may want to know what we use so they can spot such properties. Hence I made it public. However there are no such usages right now. So if you'd rather it was private and we make it public only if people ask for it, then that's ok by me."""
20838,420298628,"b'If we want to go down the path to make it public, we should probably figure out a better place to expose them to user rather than a public static field on the convention. '"
20838,420299963,b'We can discuss this in API review'
20838,420300974,b'Just like the other this will also be part of API review discussion.'
20847,420365788,"b""Was this intentional, i.e. does it make sense to construct a binary expression without an operator type?\r\n\r\nIf so, shouldn't we do the same for MakeUnary below?"""
20847,420368768,"b""If the idea is also to allow providers to support operator types that aren't support by default, how is that supposed to work? SqlExpressionFactory.MakeBinary could be overridden by the provider, but it returns SqlBinaryExpression and the provider can't extend this because the constructor always throws...\r\n\r\nIn other words, should there be another protected constructor which doesn't check IsValidOperator?"""
20847,420372886,"b'In other words, we did not allow providers to override SqlBinaryExpression for custom operators. I looked at efcore.pg which uses a different binary expression to support other operators. Either way scenario is not totally blocked for providers.\r\nRestriction was already in place, this code just moves it in order to do client eval in some cases or throw better error. We can look into changing the restriction when we get actual usecase.'"
20847,420379200,"b'@smitpatel no problem  - I was just reacting to #20622 where it says ""at the same time giving provider ability to support such operator."" - this PR doesn\'t seem to do that (yet). If that\'s the intention that\'s fine - I don\'t have any particular needs at the moment, as you wrote I use a different binary expression so all is good.'"
20847,420379626,b'ExpressionType is enum. Can it be even null?'
20847,420380464,"b'My bad, ignore - so the check was bad.'"
20847,420381078,b'Therefore I like to avoid writing description in the issues. :trollface: '
20847,420382539,"b'Oh, I thought this was your intentional check to make sure the reviewer was paying attention...'"
20847,420383865,"b'If you don\'t tell problem statement to people, they cannot judge your solution. \r\n<img src=""https://media.tenor.com/images/1b9e5970eabe47cdbc9448d8b49e7e13/tenor.gif"" />'"
20799,420385086,"b""Could also just do this once in OperationExecutor's constructor"""
20799,420385333,"b""(And leave the assert's in these classes)"""
20799,420398316,b'@bricelam This is already checked in. Do you think these changes are important enough for a new PR?'
20834,419849478,"b""You only need to do this if name is longer than `maxLength` since there aren't any duplicates initially."""
20834,419903316,"b'No need to build extra dictionaries, just use `modelSequences`, see https://github.com/dotnet/efcore/blob/0d76bbf45a42148924b413ef8f37bf49c1ce10d3/src/EFCore.Relational/Metadata/Conventions/SharedTableConvention.cs#L91'"
20834,420426226,"b""Don't call `ToList`, put the sequences that need to be removed in a new list instead. In the vast majority of cases no sequences need to be removed."""
20834,420426677,"b""No need to exclude the original name. It's over the length limit so it would never be a candidate for the new name."""
20834,420429950,"b""OK. But I was trying to avoid that as I thought that was what you didn't like last time. Maybe I misread your comment. I'll update."""
20834,420434865,"b'However that does cause a new issue. Previously the new uniquified name would be in modelSequences for the next iteration, and hence would stop anything else from uniquifying to the same thing. If I collect a list of elements to remove and add (but don\'t actually add or remove them just yet) then, to prevent the problem above, I must add the added ones to the dictionary of ""already-used names"" every time I loop. I can do this with a `Union()` but not sure whether that has any better performance than just using `ToList()` in the first place. I would only be doing that for the iterations which require uniquifying - so I\'m going to assume that\'s probably better.'"
20834,420437463,"b'Not sure why you would need to use Union, add the new one after removing the old one'"
20834,420441726,"b'I have a test case which fails if you don\'t.\r\n\r\nI can\'t alter `modelSequences` while iterating over it (without using `ToList()`). So I have to collect the list of elements to remove and elements to add. If I create a new element which has uniquified name `nnnnn` and in a later iteration I come across another sequence whose name would also uniquify to `nnnnn` I need to stop that. Only way of stopping (AFAICS) is to pass in the list of ""new uniquified names"" in addition to the original names i.e. `Union()`.'"
20834,420442585,"b""You don't need to generate the new name when iterating over modelSequences. Do it while iterating over the sequences to remove"""
20834,420477058,b'Make `_name` mutable and have this method do the remove and add to the sequences dictionary'
20834,420484170,"b""`static` to match `AddSequence()` and `RemoveSequence()`, or non-`static` so we don't have to pass the `Sequence` we're updating in?"""
20834,420498820,b'static would be fine'
20834,420528087,b'`SetName`'
20854,420843275,"b""Any reason not to cache this instance and reuse it instead of reinstantiating? We'd just need to reset a bit of state etc."""
20854,420845462,"b""Let's instantiate this (and the below) only if an actual change occurred (like in SelectExpression.VisitChildren)"""
20854,420853155,b'Change `return subquery.Predicate` to `return false` below'
20854,420858444,"b""Shouldn't we handle non-nullable scalar subqueries too? i.e. make Process(SelectExpression) also return nullable?"""
20854,420886868,b'Ok.'
20854,420889430,b'`return false` for a method which returns SqlExpression?'
20854,420890047,b'SelectExpression are always nullable since there can be 0 or 1 rows.'
20854,420914429,b'Ignore'
20854,420915469,"b'There are sum some scalar subqueries which always return a row, e.g. `SELECT COUNT(*)`, we could have support for that no?'"
20854,420938943,b'File a new issue for @maumar '
20854,421008014,"b""Don't we know that the column is nullable because operandNullable is false here (because of the check above)? Also, everywhere in this switch where we're passing down operandNullable, we can just pass down `true`, no?"""
20854,421024087,b'@maumar  to verify.'
20854,421045079,"b""the check is needed. operandNullable can be null, for cases where we don't know the nullability of the operand (e.g. when we have a binary expression or a function with multiple args - we know that the result is nullable/non nullable, but we don't know nullability for individual arguments"""
20854,421045459,"b""might be worthwhile to add a comment here, since it's not obvious."""
20854,421049057,b'operand nullable is non-nullable now.'
20854,421051050,b'oh you removed the nullability option - let me look at it again on the new code base'
20854,421126781,"b""in the new code we also need the check, now if we don't know the nullability of the component we assume its the same as nullability of overall expression fragment. this might be somewhat problematic for coalesce, but will investigate further and file an issue if i find a test that shows the problem"""
20854,421175208,b'parameterValues come different every time. Let me refactor this in another PR with better consistency for whole postprocessor.'
20799,421782653,"b""Meh. We're not likely to add any new operations classes anytime soon."""
20893,422399576,"b'Not sure about the ""right"" way to do leading whitespace, but I do know that [the current docs look bad](https://docs.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.entityframeworkqueryableextensions.include?view=efcore-3.1#Microsoft_EntityFrameworkCore_EntityFrameworkQueryableExtensions_Include__2_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0___1___).\r\n\r\nMaybe @smitpatel knows if we can see a preview for this PR somehow?'"
20893,422402576,b'It is a very long way to generate a preview and probably not possible.'
20893,422404015,b'Also write context.Blogs on same line as code and new lines offset by 3 spaces from `//` \xf0\x9f\xa4\x94 '
20893,422406690,"b""The docs for [EntityFrameworkServiceCollectionExtensions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.entityframeworkservicecollectionextensions.adddbcontext?view=efcore-3.1#Microsoft_Extensions_DependencyInjection_EntityFrameworkServiceCollectionExtensions_AddDbContext__1_Microsoft_Extensions_DependencyInjection_IServiceCollection_System_Action_Microsoft_EntityFrameworkCore_DbContextOptionsBuilder__Microsoft_Extensions_DependencyInjection_ServiceLifetime_Microsoft_Extensions_DependencyInjection_ServiceLifetime_) seem to suggest it's possible to put it not on the same line code, but I got pretty confused by the indentation :/ Should we merge this and see what happens, possibly fix again later? Or are you sure that 3 spaces (!!) is the way to go?"""
20893,422413260,"b'I calculated white space count in the source file, generated docs file and parsed website content. If we really care, I can get new APIs published for preview version.'"
14988,281850622,"b""This base implementation should decompose this back into a drop and create operation and generate the SQL for those. Providers can then override this to use something like sp_rename if it's supported."""
14988,281850698,b'Ditto'
14988,281850768,b'Ditto'
14988,281852740,"b""Won't this be `null` if it's in the default schema? We don't want to generate C# that's just going to throw...\r\n\r\nWe should handle this case. We can get the user's default schema in Transact-SQL and use EXEC to call sp_rename using a variable."""
14988,281853334,"b""Is the `IsMemoryOptimized` check really needed? (It probably is; I just don't want to copy-and-paste it blindly)"""
14988,281853719,b'These should just fallback to the base Relational implementation (which will just call the Add/Drop overrides)'
14988,281856339,"b'For reference, the SQLite provider already does this for RenameIndexOperation:\r\n\r\nhttps://github.com/aspnet/EntityFrameworkCore/blob/99fb2d4e3d52f8a3be67fe6815a4fc288e63fe50/src/EFCore.Sqlite.Core/Migrations/SqliteMigrationsSqlGenerator.cs#L230-L264'"
14988,281934408,"b""I agree.\r\nThis makes sense and is pretty safe and easy to implement.\r\nI'll change it accordingly."""
14988,281938658,"b'I\'m not so sure in this case (and in the case of `RenameUniqueConstraintOperation`).\r\nWhile it could be implemented the same way as `RenameForeignKeyOperation` and `RenameIndexOperation` in contrast to them it is not guaranteed to succeed.\r\nIf there is a foreign key pointing to the primary key or unique constraint the operation will fail.\r\n\r\nNext to the current solution of simply not supporting this if renaming isn\'t supported by the db provider there are two possible alternatives:\r\n\r\n1. Just try to do it and fail if there are foreign keys pointing here. This would effectively mean ""implement it the same way as `RenameForeignKeyOperation`"".\r\n2. Try to avoid the failure by trying to look up all foreign keys that point to this primary key/unique constraint and drop/recreate all of them. This would go well beyond what I\'d consider ""pretty safe and easy to implement"".\r\n'"
14988,281938774,b'Same as above (`RenamePrimaryKeyOperation`).'
14988,281938982,"b""Yeah, this looks like a good idea.\r\nI'll go for it."""
14988,281939338,"b""This is indeed blind copy-paste. I'll try to find out what would be the correct solution here."""
14988,281939688,"b'Yes, for foreign key constraints, not sure for primary keys and unique constraints - see my comments above.'"
14988,282340645,"b'> We can get the user\'s default schema in Transact-SQL and use EXEC to call sp_rename using a variable.\r\n\r\nWhile drafting an implementation for this I just learned that the [documentation for `sp_rename`](https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-rename-transact-sql) is misleading by stating ""If the object to be renamed is a constraint, object_name must be in the form schema.constraint"".\r\nAt least on my local instance (SQL Server 2016 - Windows) omitting the schema part works perfectly.\r\nI assume that this is the case in all SQL Server versions that Entity Framework Core is supposed to support, but I probably can\'t confirm this.\r\nIf it was, it would greatly simplify the implementation and also make it more consistent with other internal APIs where the schema part is optional.\r\nAny chance I can get confirmation for this from inside MS?'"
14988,371519856,b'Revert this. We need to minimize breaking changes.'
14988,371520186,b'(Add this to MigrationsSqlGeneratorDependencies)'
14988,371521746,b'\xf0\x9f\x91\x8d We should probably have a better message here (and during RenameIndexOperation).'
14988,371523352,b'Bummer. But I guess this already happens today (you just have a chance to change it in the migration). Maybe we can warn.\r\n\r\nWe should also add a TODO comment referencing issue #4073.'
14988,371527389,b'I wonder if DI will let us obsolete this constructor.'
14988,371537716,"b""Confirmed, we need this. Funny, indexes aren't supported on memory-optimized tables. Guess we'll be ready if they ever are. \xf0\x9f\x98\x89"""
14988,371537790,b'OBJECT is the default. No need to specify it.'
14988,371537966,b'(same below)'
14988,371538302,b'(Same for SQLite)'
14988,371539270,b'Fine as is--the earlier we throw the better.'
14988,371541524,b'``` csharp\r\n: base(dependenies.With(migrationsAnnotations))\r\n```'
14988,371852489,b'This can be a switch expression'
14988,371852777,b'nit: could be a nice conditional expression'
14988,371855042,b'I think these should be redone in the new functional MigrationsTestBase (which actually run against the database).'
14988,372037573,b'\xe2\x9c\x94\xef\xb8\x8f'
14988,372037690,b'\xe2\x9c\x94\xef\xb8\x8f'
14988,372038282,b'Ok.\r\nThanks for the hint. It actually made me understand the API better.\r\n\xe2\x9c\x94\xef\xb8\x8f'
14988,372038477,b'\xe2\x9c\x94\xef\xb8\x8f'
14988,372044493,"b""I think a warning is a good idea. I don't know the API for warnings though. I've found some warning related strings in the comments of `src/EFCore.Relational/Properties/RelationalStrings.resx`. Can you confirm that this is the right direction for my investigation of how to implement this?\r\n\xf0\x9f\xa7\x90\r\n\r\n> We should also add a TODO comment referencing issue #4073.\r\n\r\n\xe2\x9c\x94\xef\xb8\x8f"""
14988,372044644,b'\xe2\x9c\x94\xef\xb8\x8f'
14988,372044766,b'\xe2\x9c\x94\xef\xb8\x8f'
14988,372045409,"b""This is a little more work.\r\nI have to understand what needs to be done and implement it.\r\nI'll have a look at this tomorrow."""
14988,372079028,"b""I'm not sure if we've generated warnings from here yet. I'll look into it."""
14988,372623180,"b""I think I've moved everything to it's proper place regarding the new test infrastructure.\r\nI've also moved the tests in `EFCore.Relational.Tests`, `EFCore.Sqlite.FunctionalTests` and `EFCore.SqlServer.FunctionalTests` although, as I understand it, they aren't necessary any more.\r\n\r\n@roji can you please have a look at the tests?"""
14988,382910878,"b""Ok, I've given my best to log a warning if we are going to loose the referential action.\r\nI must admit though, that the logging system is pretty complicated and that I'm uncertain if I did everything the way it should be done.\r\nAlso I don't like my naming of the event, but there seems to be quite a bit of convention around logging, to which I tried to adhere.\r\nI've left all related changes in a separate commit (453cfe00aed25e84645a03bd2ea64682b96b9357) to make reviewing them easier."""
20893,422466777,"b""I'm going to go ahead and merge, but keep this issue to make sure the output is reasonable - let's revisit if otherwise."""
20899,422502602,"b'Unrelated to this change but I find this XML docs not useful. Especially if someone derives from this class to override and use inheritdoc then those XML docs would be incorrect. We should just use inheritdocs here to get docs from the interface.\r\nOn a broader level, if we have API which is virtual then it should describe what method does in general rather than in that particular implementation. '"
20899,422503034,b'That sounds right to me. Open a separate issue?'
20899,422528695,"b""This is why inheritdocs cannot be used blindly. It is often useful to document what a particular implementation does. Also, if you then override this, you shouldn't use inheritdoc but instead write docs that indicate why it was overridden."""
20792,423127679,b'Please include the most common solution directly in the error message + link for more details. this is how angular cli etc does it and it seems to work well'
20821,423207450,b'AddRange using OPI'
20821,423207556,b'AddRange using OPI'
20821,423207707,b'RemoveRange using OPI'
20821,423207851,b'UpdateRange using OPI'
20821,423208419,b'???'
20821,423208576,b'???'
20840,423290673,"b'this should be {true, true, true} - we want the nullability of the argument to propagate to the entire function, so that we can do the following optimization:\r\n\r\nSUBSTRING(foo, 1, 1) IS NULL -> foo IS NULL'"
20840,423290747,"b""same here (actually this one doesn't matter functionally, because we already propagate nullability from the second argument, which is the same as the first, but we can do it for consistency)"""
20840,423951838,"b""I've fixed issue. Could you please clarify how SUBSTRING or RIGHT/LEFT impacts on query translation. I mean SUBSTRING does not accept NULL as the argument, but RIGHT/LEFT does. Would is there be any difference If we used RIGHT/LEFT instead of SUBSTRING?\r\n"""
20840,424135841,"b""Perf wise, there shouldn't be much difference. LEFT/RIGHT produces smaller sql, so I we could use them instead. SUBSTRING won't accept NULL directly, but column that contains nulls or a function that evaluates to null is fine, so we still need to take nullable scenarios into account."""
20936,424102211,"b""Don't change this. Rather from the caller of this method, (which is doing adhoc new ProjectionMember, verify that SelectExpression.Projection is empty."""
20936,424123682,b'updated'
20663,409885214,"b'No protected set. Provide a protected method to mutate this, which does not overwrite.'"
20663,409885553,b'Likewise QueryableMethodTranslatingEV.'
20663,409886283,"b""SqlTranslator has a state now, review it's usages to verify if we can reuse, we need to create new especially for subqueries."""
20663,409888698,"b'Better to make TranslationErrorDetails nullable (use null instead of empty string to indicate there was no error), and just checkif `TranslationErrorDetailns is null`.'"
20663,409888817,b'nit: expression-bodied (here and below)'
20663,409890188,b'nit: can put conditional operator for string inside ctor for InvalidOperationException'
20663,409890348,"b""entry point resets the state, will make sure we don't just visit"""
20663,409890892,"b'I think we want to include an fwlink here pointing to a future docs page (https://github.com/dotnet/EntityFramework.Docs/issues/2273), to explain the different options and potential impact on index usage, etc.\r\n\r\n@ajcvickers can we stick some fwlink here and direct to the actual page later?'"
20663,409891541,b'Use null to indicate lack of error details instead of string.Empty.'
20663,411529034,b'Makes sense. Creation of links is a PM task. ;-) @JeremyLikness '
20663,416099095,"b""```suggestion\r\n    <value>The LINQ expression '{expression}' could not be translated. Additional information: {details}. Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to either AsEnumerable(), AsAsyncEnumerable(), ToList(), or ToListAsync(). See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.</value>\r\n```"""
20663,416099865,b'Member does exist (EF.Property just throws outright) otherwise you cannot write LINQ. It is just unmapped. We should make that clear.'
20663,416100300,b'remove'
20663,416168922,"b'lack of dot is on purpose, since the details always contains its own dot'"
20663,416170009,"b'sure, the way I\'m thinking about it is that it doesn\'t exisit on the entity type (i.e. we from ef conceptual model don\'t know about it). but yeah thats not clear - will remove the does not exist and only leave the ""non mapped"" part'"
20663,416183740,"b""message:\r\n\r\n    System.InvalidOperationException : The LINQ expression 'DbSet<Gear>()\r\n        .Where(g => g.FullName.Equals(\r\n            value: g.Nickname, \r\n            comparisonType: InvariantCulture) || g.IsMarcus)' could not be translated. Additional information: Translation of 'string.Equals' method which takes 'StringComparison' argument is not supported. Translation of member 'IsMarcus' on entity type 'Gear' failed. Possibly the specified member is not mapped. Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to either AsEnumerable(), AsAsyncEnumerable(), ToList(), or ToListAsync(). See https://go.microsoft.com/fwlink/?linkid=2101038 for more information."""
20663,421756929,b'Ping?'
20663,421798463,b'Combine use new line.'
20663,421798853,b'Space from tags?'
20663,421799185,b'Same needed for InMemory'
20663,421799514,b'SqlTranslator inside weak entity expander is being reused.'
20663,421799785,b'Why this is not simple null check like others?'
20663,421800748,"b""This is incorrect. We don't know at this point that we cannot translate it."""
20663,421801429,b'Same applies to cosmos too. Also add a translate without string comparison for cosmos or file a new issue for that.'
20663,421802319,"b""@JeremyLikness can you create the fwlink when you get the chance? I think it's the last outstanding issue blocking the pr from merging"""
20663,422167267,"b'@maumar you can use https://aka.ms/AA8cmu6 this forwards to the docs landing page for now, but I can update it to whatever.'"
20663,422180549,b'we need fwlink no?'
20663,422189400,b'@smitpatel Why does it need to be a fwlink instead of an aka?'
20663,422191734,b'Consistency and fwlink guidelines.'
20663,423762824,b'Not introducing TranslateInternal for this?'
20663,423765969,b'Move this to TryBindMember in all the classes. That will capture indexer properties too. (Exception message may need to be modified little bit.'
20663,423766894,b'typo'
20663,423767524,b'```suggestion\r\n        ///     Provides additional information about errors encountered during translation.\r\n```\r\nThough I think the name of this API should be changed. But we will discuss in API review.'
20663,423956259,b'You can revert back to coalesce.'
20663,423956409,b'Revert to coalesce?'
20663,423956890,b'Remove this and integrate in the if block below.'
20663,423957228,b'Like InMemory'
20663,423958219,b'Can still use coalesce.'
20663,423959868,"b'We should only do this if result is null. The way I see it,\r\n- Anyone can add TranslationErrorDetails which could be erroneous.\r\n- We only print it out when translated is null in QueryableMethodTranslator.\r\nSo we should apply same logic everywhere and copy translationerrordetails only when the translation came out as null.'"
20663,423987794,b'sounds good'
20663,424032598,b'how? this looks clean to me as is'
20663,424038747,"b'```C#\r\nif (property != null)\r\n{\r\n    return BindProperty(entityReferenceExpression, property, type);\r\n}\r\n\r\nProvideTranslationErrorDetails();\r\n\r\nreturn null;\r\n```'"
20663,424111344,"b""this doesn't work when bind property returns null, we would miss the call to ProvideTranslationErrorDetails"""
20663,424121468,b'Why is BindProperty returning null?'
20663,424125766,"b""just looking at the method code it returns null if 2 conditions are not matched. If you are confident that this can never happen (or at least in cases where we want to provide extra context to the error message), I'm happy to make the suggested change"""
20663,424152450,b'If property is not null then it is not unmapped member so that extra error message is anyway incorrect. If property is matched then BindProperty should be returning a value always. I will update the BindProperty method later to reflect that.'
20840,424236923,"b'Got it, thanks. Please review again.'"
20957,425393078,b'combine ifs'
20957,425396847,b'Adding in next commit.'
20958,425400810,"b'Ignore the comment, anyway this would be found via the linked bug number.'"
20958,425401350,b'@maumar - Partial include solution.'
20970,425966776,b'Comment should go before the label'
20844,426856939,"b""@AndriySvyryd Do you think it's worth doing a default implementation of these methods in the interface?"""
20844,426859235,"b""No, I don't think this change breaks anything."""
20917,423029497,"b""@ajcvickers, the MAC, by default, uses 6 bytes, but based on some research, many device manufacturers already provide a larger identifier; therefore, I didn't set it to 6 bytes; I let the user define the size of his side."""
20917,426861181,"b""@ralmsdeveloper I think it should be set to something, otherwise the default is going to be varbinary(max) which isn't very appropriate. So I think there are two options:\r\n* Choose something big enough to handle all the varieties that we know of\r\n* Choose 6 bytes since it is the most common.\r\nIn either case it can be overridden by the application.\r\n\r\n@roji Any thoughts?"""
20917,426865699,"b'@ajcvickers \r\nInitially I had thought about using 6 bytes, but because there are other possibilities I came to the conclusion to let the user define the size.\r\n\r\nI would use the second option, keep 6 bytes!'"
20917,426866327,"b""I think the right default value here is 8 bytes, for EUI-64 (6 bytes is EUI-48). I'm not aware of a MAC address scheme with over 8 bytes, and for any exotic cases where that's needed the user can override as @ajcvickers wrote."""
20917,426868399,"b""@roji Thanks!\r\n\r\nI didn't have the information on EUI-64, so it makes perfect sense to me, if @ajcvickers feel good about it."""
20917,426868926,"b""Let's go with 8."""
20966,425617206,"b'could put it in a separate visitor that runs before null semantics. slower perf (so prolly bad idea), but makes the design cleaner. thoughts? maybe once we have more pre-null semantics optimizations'"
20966,426045035,b'rename the class to something like CaseSimplifyingExpressionVisitor? '
20966,426074315,b'Why this value has to be null? Is there anything wrong in comparing null with null?'
20966,426092462,"b""when case statement doesn't match anything null is also returned. We would miss this case if we matched here. Maybe it never/rarely happens but I added the condition just to be on the safe side"""
20966,426100524,"b""A long optimization if you are interested in doing,\r\nIf constant value is null then,\r\nMain condition is when all tests from when clauses are false (negate & join with AND)\r\nIf ElseResult is present then add ElseResult == null with AND\r\nIf a when clause returns null result then add that when clause test with OR with all of above.\r\n\r\nBit complex so don't know if worth having it. Your call.\r\n"""
20966,426131306,"b'i thought of that, not worth imo'"
20966,427517559,b'Possibly visit recursively. Also write a regression test for it.'
20966,427517941,b'`is int` pattern match will verify that it is non-null.'
20966,427518800,b'Just add additional check for compare to that ElseResult is also null.'
20966,427519383,b'```suggestion\r\n                    && (intValue > -2 && intValue < 2)\r\n```\r\ncould be faster. :trollface: '
20966,427520161,b'No ElseResult.'
20966,427521024,b'use case.'
21031,429617644,b'Link to the other overload with `<see cref />` (other places below too)'
21011,429480873,b'consider adding predicate to the queries with so many results \xf0\x9f\x9a\x80  anything with 1000+ maybe?'
21011,429481965,b'missed the Where'
21011,430519216,b'#21049 '
21018,430745670,b'Principal mentioned twice? Should one of them be declaring?'
21018,430746350,b'Nit: Entitiy -> Entity'
20811,421783353,b'Handle `null`'
20811,421784406,b'We should try to keep the names consistent between CLI and PMC. *NoOnConfiguring* seems good here.'
20811,421785205,"b""I think I like `--no-onconfiguring` better. (we don't do `ef db-context scaffold`)"""
20811,421786424,"b""Don't show this when they're using `Name=` (Might need to move this warning closer to where the flag is used.)"""
20811,421787772,"b""I feel like we're throwing the baby out with the bathwater here. OnConfiguring has a lot more value like `UseSqlServer()` and `UseNetTopologySuite()` (and even more on IBM if I remember correctly). We should guide people to using `Name=`, *not* `--no-onconfiguring`."""
20811,423143463,"b""Sorry, but uggghh. I really don't like that. I'll send out something and let the whole team decide."""
20811,423145603,"b""It's easy for people to put the method back in if they want to, and this seems inconsistent with the approach decided in the team meeting [see @ajcvickers comment here](https://github.com/dotnet/efcore/issues/20526#issuecomment-613062681)?"""
20811,423148259,"b'Is this for the ""new `Design` assembly but old tools"" scenario? Do you want me to choose default values for all `bool` variables? Not quite sure what scenario is concerning you?'"
20811,423360046,"b""At this point in the code I can look at the connection string and see if it starts with `Name=` and suppress the warning if so. But this is pretty close to the last place we can call `Reporter.WriteWarning()` in the `ef` code. We could call from `Execute()` instead of `Validate()` but in practice that's what happens immediately after this and `Validate()` seemed like a better fit for what I'm doing.\r\n\r\nDo you mean you want to create an event and log as a warning inside `EFCore.Design`? """
20811,423398137,"b""I'm outvoted :( so I'm updating it the way you asked. """
20811,424767032,"b""Old tools--they were designed to be forward-compatible. We can't add any new non-nullable arguments without also specifying a default. No need to update the existing ones (they've been there since version 1.0.0)"""
20811,424769406,b'You can also use `IOperationReporter.WriteWarning` (in EFCore.Design) and `ILogger.LogWarning` (in the runtime) to output warnings in the tools.\r\n\r\nI was thinking it might belong somewhere around here:\r\n\r\nhttps://github.com/dotnet/efcore/blob/9e0f05b554d327646b0cb515ad3cd5d739766094/src/EFCore.Design/Scaffolding/Internal/ReverseEngineerScaffolder.cs#L100-L104'
20811,424771679,"b""We decided to add the --no-onconfiguring option for users who know what they're doing, but we want to guide users to `Name=` by updating the `#warning` we generate in the C# and also by adding a warning when users run the tool without it."""
20811,424773203,b'We are generating a warning when users run the tool without --no-onconfiguring? Happy to update the C# warning to include specific mention of `Name=` syntax. '
20811,426019669,"b""@bricelam If you have a specific form of words you'd like added to the C# warning please add them here. Thanks."""
20811,426924062,b'@bricelam Done. Please see new commit.'
20811,430635581,b'@bricelam ping...'
20811,430758594,"b'```suggestion\r\n    <value>To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.</value>\r\n```'"
20811,430759945,b'```suggestion\r\n            else if (!codeOptions.SuppressOnConfiguring)\r\n            {\r\n                _reporter.WriteWarning(DesignStrings.SensitiveInformationWarning);\r\n```'
20811,430760736,"b""In other words, we shouldn't discourage OnConfiguring. Instead, we should just encourage `Name=`."""
20811,430850385,"b""@bricelam OK. Going ahead with this. What I think you're saying is we should have the `--no-onconfiguring` flag, but we should not point people towards it as a way of solving the problem - instead we should just mention `Name=` (and leave them to find `--no-onconfiguring` on their own if that's what they really want)."""
20811,431442167,b'Correct. This is the decision we made in triage.'
20938,424436045,b'Too much indent.'
20938,424436235,"b'```suggestion\r\n        /// <param name=""entityType""> The entity type to get the schema for. </param>\r\n```'"
20938,424441355,b'How to determine which GetFilter to use out of these 2 overloads?\r\n'
20938,424443473,b'Why would someone call this overload rather than the other if the other one redirects here.'
20938,424443876,b'Why this overload does not look into shared table scenario like the other?'
20938,424458604,b'name :trollface: '
20938,424568550,"b""Think it's easier to read this way:\r\n```suggestion\r\n        public static IEnumerable<IForeignKey> FindTableIntraRowForeignKeys(\r\n```"""
20938,424570578,"b'```suggestion\r\n        /// <returns> The foreign key if found, or <see langword=""null"" /> if none was found.</returns>\r\n```'"
20938,424571297,"b'Any special reason for 128? It feels like a ""magic number"" in the code. Also wouldn\'t keeping a `HashSet` of unique FKs you\'ve already seen be a better way?'"
20938,424604098,"b'The table overloads get the ""actual"" value that would be used in the database and should be usually preferred, But sometimes it\'s necessary to get the base value that could be used for any table.'"
20938,424605210,b'In the future it might be possible to override the name for a specific table.'
20938,424615208,"b""Suggest changing `bool table` to `bool isView` and reversing logic (I think that makes it clear that the other option is a table but don't really mind as long as starts with `is`)."""
20938,424626583,"b'This seems like a very ""Microsoft"" description - I still can\'t really tell what it does. Maybe change description and class name to something involving TablePerHierarchy?'"
20938,424642631,b'I guess we could match based on column names'
20938,424643240,b'This is just used to satisfy the interface. I hate that abstract classes need to implement all members.'
20938,424655282,b'Make it a named tuple?'
20938,424656792,b'`_isEntityTypeBased`?'
20938,424659477,"b'```suggestion\r\n    <value>The instance of entity type \'{firstEntityType}\' and the instance of entity type \'{secondEntityType}\' are mapped to the same row with the key value \'{keyValue}\', but have different property values \'{firstConflictingValues}\' and \'{secondConflictingValues}\' for the column(s) {columns}.</value>\r\n```\r\n\r\nAlso if ""instance"" is important then you should provide PK values so the user can track down which instances are clashing?'"
20938,424659786,b'As above'
20938,424663031,"b'I can imagine receiving this message and going ""how to do I specify a discriminator?"" or ""I thought I had specified a discriminator"". So I think it would be helpful to say a) how to specify a discriminator (fwlink if necessary), and b) if possible why you think both {entityType} and {otherEntityType} do not have discriminators (can it have to do with the hierarchy and not just what\'s configures for them individually?).'"
20938,424663876,"b'Don\'t understand what makes configuration ""specific"" or ""non-specific"". Maybe another fwlink?'"
20938,424745214,b'langword for `true`'
20938,424745550,b'Also say what `null` means.'
20938,424745874,b'As above'
20938,424749326,b'Nit: maybe put single quotes around the names of the indexes as well?'
20938,424750996,b'Think @ajcvickers should take a look at the ChangeTracking changes as well. Maybe there was a reason for using `ToList()`.'
20938,424751017,b'Having two comparisons handled subtleties when renaming (or adding and removing) properties in owned (or sub) types. But I guess if all the tests pass... \xf0\x9f\xa4\xb7\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f'
20938,424751382,"b'Nit:\r\n```suggestion\r\n        /// <param name=""entityType""> The type for which to find base types. </param>\r\n```'"
20938,424751882,"b'Similarly here and below:\r\n```suggestion\r\n        ///     Gets all types in the model from which a given entity type derives, starting with the root.\r\n```'"
20938,424752942,"b""Doesn't this break renaming entity types?"""
20938,424753790,b'No XML comment? Why does it do nothing?'
20938,424754829,b'\xf0\x9f\x91\x8d Good clarification'
20938,424755492,b'XML comment?'
20938,424755791,"b""XML comment? Not sure why the existing methods don't have XML comments either?"""
20938,424756580,b'Similarly here. XML comments throughout?'
20938,424756790,"b'IIRC, the scenario was adding a property and at the same time renaming a property that structurally matches it in a different owned (or sub) type. The wrong column was picked for the rename.'"
20938,424762479,b'Worth a comment saying why these are excluded?'
20938,424768355,b'Think this following bit would benefit from a comment saying within what set of things you are uniquifying the table name and that this has to do with TPT.'
20938,424770220,b'Why did this get deleted?'
20938,424780612,"b""We don't use is prefix in parameters."""
20938,424780684,"b'This method is only used for column diffing, so as long as the type is not renamed together with a column everything should work.'"
20938,424781311,b'internal classes.'
20938,424782716,"b""I can add it back in a different order. Previously the stricter check was after the looser one, so it didn't make sense."""
20938,424783227,"b""Ah. OK but still think it would benefit from some form of comment if you have the time. I was trying to understand what you were doing with this class in one of the other classes and without any comments it's not so easy."""
20938,424783308,"b""@ajcvickers  Didn't we discuss this in the previous API review?"""
20938,424784229,"b""It is just a magic number, I can assign it to a const if someone can suggest a good place for it.\r\nKeeping the HashSet would unnecessarily slow down 99.9999% of the cases where there's no cycle"""
20938,424785120,b'OK. But why 128 instead of say 10? Is this some estimate of the maximum depth of a hierarchy? Or...?'
20938,424785198,"b""The idea is that it would handle TPH, TPT and TPC. If you can provide the full description I'll change it."""
20938,424785987,"b'Don\'t really mind so long as it\'s readable. There\'s a lot of code in here that uses `table` (or similar) to mean table name. Here you have to stop and go ""wait that\'s a boolean, what does it mean?"". So I think it would be more readable if we spell out roughly what we mean in the name of the parameter.'"
20938,424786714,b'It already provides them as `keyValue`'
20938,424787603,b'@ajcvickers @JeremyLikness Could you create a fwlink to https://docs.microsoft.com/en-us/ef/core/modeling/inheritance ?'
20938,424788561,"b'It\'s the difference between calling `SetColumnName(""Id"")` and `SetColumnName(""Id"", ""Blog"", ""dbo"")`. I don\'t know how to describe them better.\r\nThis is limited to Metadata API so we won\'t have documentation for it initially.'"
20938,424789281,b'Filed https://github.com/dotnet/efcore/issues/20949'
20938,424789806,"b""The name is misleading, it's not the index name it's the properties on which it is defined and single quotes are added at the call site"""
20938,424793100,"b'For description how about:\r\n""Removes discriminators from TPT root entity types and updates the table and view column names for both TPH and TPT properties.""\r\n\r\nFor the name maybe: ""HierarchicalPropertiesMappingConvention""? The trouble with ""EntityTypeMapping"" is does it mean ""Entity(TypeMapping)"" or ""(EntityType)Mapping""? I originally thought this had to do with `TypeMapping`s.'"
20938,424793894,b'Doh! Sorry - missed that.'
20938,424795485,"b""```suggestion\r\n    <value>The property '{property}' has configuration specific to the table or view '{table}', however that's the main table or view to which '{entityType}' is mapped. Remove the specific configuration or use the configuration that does not specify a table or view.</value>\r\n```"""
20938,424796301,"b""OK. Is changing the name a breaking change? If so then don't worry. If not maybe change it to e.g. `index1PropertyList`. Also maybe change `includedProperties1`/`2` to `includedColumns1`/`2`."""
20938,424797236,"b""Private class. There's no stored state to remove."""
20938,424797317,b'internal class'
20938,424797665,"b""I'll add it if anyone else also thinks it's worth it"""
20938,424798122,"b""It's orthogonal. I just found during testing that the previous approach was unreliable"""
20938,424799297,"b""Now that I think about this more there's a simpler way of doing this, but it's probably not worth it to rewrite this again."""
20938,424799894,"b""Because I changed this behavior since it doesn't impact the way it's used in the product and doing it the other way is faster"""
20938,424800377,b'@bricelam ?'
20938,424801405,b'EntityTypeHierarchyMappingConvention?'
20938,424802213,"b""I'll add a comment if anyone else also thinks it's worth it."""
20938,424802626,b'This is the lowest number of entity types sharing the same table that sounds ridiculous to me'
20938,424805028,"b'We do the same in a lot of exceptions, filed https://github.com/dotnet/efcore/issues/20951'"
20938,424805558,"b""OK. I can't think of a better name right now. And we can always revisit in API review."""
20938,424808296,"b""Sounds good. So if it were me I'd create a constant `MaxEntityTypesSharingTable = 128`. Then someone looking through the code knows why you picked 128. (You know someone somewhere is eventually going to come up with a db schema that exceeds that, right? And then we'll have to look at this again.)"""
20938,424808636,"b""Sure, but where would I put it? It's used in many classes"""
20938,424812977,"b""If you don't want to expose it publicly then you could have a `private const` in every class you use it in - at least then we'd know what the number represents. If you don't mind it being `public` then since it's a statement about entity types, maybe `RelationalEntityTypeExtensions`. Bit odd since it's not used within that class, but it's central and nearby. Also perhaps include your comment above about not using the `HashSet` for perf purposes."""
20938,424819054,"b'At this point the 128 has become part of the history. Whenever we get confused about it, the git blame will bring us back to this PR and these comments. \xf0\x9f\x98\x84 \r\n\r\nQuery has a lot of weird invariants which are hard to describe and comment everywhere but query team has taken approach that putting such invariants in commit message. (gotta love walls of text as commit message)'"
20938,424825123,"b'No it was right\xe2\x80\x94first match all exactly then match remaining loosely.\r\n\r\nI\xe2\x80\x99d add it back just to be safe, but it\xe2\x80\x99s up to you. I know I wrote a regression test, so maybe a higher level ordering change fixed it'"
20938,424825712,b'But renaming the type and a column is a scenario we should cover since the PK column (and others) frequently includes the type name'
20938,424826858,b'You would also need to rename a different column to what the PK column was before to hit this'
20938,424833975,b'A functional breaking change?'
20938,424835615,b'optional dependents \xf0\x9f\x98\x84 '
20938,424835964,"b'because `can not` is not valid, my eyes are itching looking at `can depend not`'"
20938,424836349,b'Would implementation of this change in future?'
20938,424836952,b'Does the concurrency property has to be same name? what if property.Name are different but both mapped to same column.'
20938,424837441,b'indentation.'
20938,424837507,b'Any particular reason for unwinding select many in nested foreachs?'
20938,424839693,b'Why initialize it every time?'
20938,424841522,"b""```suggestion\r\n    <value>Both '{entityType}' and '{otherEntityType}' are mapped to the table '{table}'. All the entity types that don't have a discriminator must be mapped to different tables.</value>\r\n```\r\nmay be?"""
20938,424841803,b'... or remove the discriminator and map all of them to different tables too?'
20938,424843090,"b'We already searched for annotation above, no?'"
20938,424843547,"b""Any reason for removing this? Is it because now `property.GetHiLoSequenceName()` wouldn't throw exception?"""
20938,424843819,b'If this updated then why not GetIdentityIncrement? '
20938,424844165,b'Should this call into GetValueGenerationStrategy with table/schema?'
20938,424844579,b'breaking change?'
20938,424845096,b'breaking change?'
20938,424845920,b'Is this really needed?'
20938,424846526,"b'Did you create this for me?\r\n<img src=""https://gifimage.net/wp-content/uploads/2017/07/happy-cry-gif-16.gif"" />'"
20938,424848420,b'Would you like me to add parenthesis to help you parse it correctly?'
20938,424849108,"b'Yes, only affects corner cases'"
20938,424849333,"b'Yes, once we allow to configure table-specific facets https://github.com/dotnet/efcore/issues/19811'"
20938,424850105,b'This method is used to find the default column name and determines whether they would be mapped to the same column'
20938,424850504,"b'No, notice that it was `public static new`'"
20938,424850823,"b'Yes, did all the hard work for you'"
20938,424851228,"b'Yes, for providers'"
20938,424851505,b'Nice catch'
20938,424851955,"b""Started doing it because I planned to add extra logic. Left it like this because it's very slightly faster"""
20938,424853500,"b'This method is only ever called when this is already true, so it was redundant'"
20938,424853918,"b""No, in general the methods that don't take table/schema should act as if there's no table"""
20938,425505600,b'un-indent'
20938,425520701,b'This could still use the other overload like in the past.'
20938,425525323,"b'Looks like agreed term was ""RowInternal"" - see [this PR](https://github.com/dotnet/efcore/pull/20963).'"
20938,425526189,b'Why do we skip when property is PK/CT?'
20938,425543924,b'We want them to unify as we require them to be present on every type sharing the table'
20938,425544075,"b'We could, but that involves an additional allocation'"
20938,425547921,b'If we skip them then how do we unify them? \xf0\x9f\xa4\x94 '
20938,425548375,"b'We get here when the names are the same, so if we do nothing they remain the same and therefore will map to a single column'"
20938,425813174,b'Is this intentional?'
20938,425813597,b'...'
20938,426056440,b':trollface: '
20938,426059030,"b'It usually means that there was an ""collection modification"" error in some scenario. However, there should also have been a test for that scenario added at the same time, so if tests now pass, then it\'s probably save to remove.'"
20938,428988664,"b'```suggestion\r\n                        property.SetViewColumnName(null, viewName, viewSchema);\r\n```\r\n\r\nto match `property.SetColumnName()` above.'"
20938,428991007,b'Should we issue a warning? Or is this done elsewhere? '
20938,428991485,b'If it applies to fields as well maybe call it `RelationalMemberOverrides`?'
20938,428993286,b'This refers to C-space properties'
20938,428993652,"b""This runs after validation, all these checks should be done there. Currently it's not possible to create a model that would fail this, TPC support needs to be implemented first."""
20938,429002580,"b'```suggestion\r\n        ///     Returns <see langword=""true""/> if <see cref=""Freeze"" /> has been called. A frozen options object cannot be further\r\n```\r\n\r\nPlus add `.` to end of next line.'"
20938,429004481,b'Blank summary?'
20938,429005025,"b'Missed one langword:\r\n```suggestion\r\n        ///     <see langword=""true""/> to release managed and unmanaged resources; <see langword=""false""/> to release only unmanaged resources.\r\n```'"
20938,429005129,b'Missed langword here too.'
20938,429005163,b'Missed langword here too.'
20938,429005256,"b'```suggestion\r\n        /// <returns><see langword=""true""/> if it is used; otherwise, <see langword=""false""/>. </returns>\r\n```'"
20938,429005336,b'Missed langword here too.'
20938,429005472,b'Missed langword here too.'
20938,429008248,b'Not sure if these need langword - since just comment. But should treat `true` and `false` the same.'
20938,431450105,b'That `ToList()` will make `HasDifferences` (and thus the Diagnostics page and the Power Tools) a lot slower.'
20938,431467271,"b""I don't think this makes a noticeable difference, but I removed the `ToList` and made `GetDataOperations` lazy"""
21012,429015977,b'Conventions should log warning rather than throw exception. '
21012,429017851,b'Not sure why you are saying that? There are many conventions that throw.'
21012,429019793,"b""From what I remember, only `IModelFinalizingConvention`  (or the newer `IModelFinalizedConvention`) throws. If a convention arrives at something incorrect configuration, user can still correct it using fluent API. Hence conventions are not supposed to throw exceptions till OnModelCreating is run.\r\nFor conventions which applies attribute, we log a warning, ignore them. It is same logic as only ConfigurationSource.Explicit throws but other 2 configuration source don't throw exceptions.\r\n\r\nOf course, @AndriySvyryd knows what to do."""
21012,429026405,"b""OK. I'll defer to @AndriySvyryd, but here the user is mis-using the `IndexAttribute` (see the test cases) - I think it's clearer to tell them to go back and update how they use the attribute."""
21012,429130942,"b'We need to think about inheritability here (true by default, probably should be false). Specifically, for a TPH hierarchy, if [Index] is specified on a base class, it should definitely only lead to us creating only one index. '"
21012,429132532,"b'I think in general our attributes are sealed and therefore also non-virtual (and exception seems to be DbFunction, which seems to be this way mainly to not break). This think [Index] should be sealed as well.'"
21012,429139556,b'nit: else not needed'
21012,429139781,b'nit: rename member to property?'
21012,429140447,"b'Multiple enumeration of this LINQ, probably need to do ToArray'"
21012,429142259,"b""Rather than getting the table and schema name, it's probably better to use the relational model, i.e. do GetTableMappings and check that they point to the same ITable instance etc."""
21012,429143377,"b""The index name is missing here (and below). It may also be better to omit the entire property list when there's a specific offending property in it."""
21012,429143683,b'nit: missing quotes around indexMemberList (but consider removing altogether as the memberName is already there)'
21012,429323637,b'Agreed. Will look into this.'
21012,429323970,b'Darn. I meant to do that but forgot. Will do.'
21012,429324678,"b""I think `index.Properties` can refer to a field, but due to historic reasons is called `Properties`. I'll check but I think `member` is more accurate. """
21012,429325453,b'Curious. Why is that better?'
21012,429325816,"b""Specifically in this context, we're looking at the model and index.Properties is a list of IProperty no? If so, I think we should be talking about properties rather than members."""
21012,429327051,"b'No, this was deliberate. The name of an index is optional. The thing that makes an index unique (and defines it when there are multiple indexes) is the ordered list of properties. I thought about having a different message if there was also a name, but in the end I decided to keep it simple.'"
21012,429328137,"b""`indexMemberList` doesn't need quotes - it looks something like `{'member1', 'member2', ...}` (the same way other member/property-lists are defined for other messages). And I need the member list to specify which index it is (see previous comment) - a given member could appear in different indexes."""
21012,429333410,"b'Yes, but `IProperty` can represent a member - it was named `IProperty` historically and too late to change it now, but see the following from `IPropertyBase`:\r\n\r\n```C#\r\n        /// <summary>\r\n        ///     Gets the <see cref=""PropertyInfo"" /> for the underlying CLR property for this property-like object.\r\n        ///     This may be <see langword=""null"" /> for shadow properties or if mapped directly to a field.\r\n        /// </summary>\r\n        PropertyInfo PropertyInfo { get; }\r\n\r\n        /// <summary>\r\n        ///     Gets the <see cref=""FieldInfo"" /> for the underlying CLR field for this property-like object.\r\n        ///     This may be <see langword=""null"" /> for shadow properties or if the backing field is not known.\r\n        /// </summary>\r\n        FieldInfo FieldInfo { get; }\r\n```'"
21012,429333650,"b""I either do `Count()` followed by `Select()`, or I do `Count()` followed by `Single()`. I'm not altering the enumeration while I do any of that - so I thought that was safe?"""
21012,429342547,"b'It seems like if the user took the trouble to define a name for the index, that name should be logged... And indeed if it is, then the set of properties seem redundant as the name is sufficient.'"
21012,429343441,"b""It's the same functionally, but we now have a 1st-class relational model which represents the tables and columns mapped to by entities. Rather than getting the schema/name for entities - which itself goes through the relational model - and then doing distinct on those, it seems more appropriate to just look at the tables directly. Basically the same reason we prefer to compare two objects by reference rather than comparing their string names, even if those string names are guaranteed to be unique."""
21012,429344090,"b""Oh it's safe - it's just that since LINQ is lazy, your expression is evaluated twice - once for the Count, and once for the Select below. That means you're walking the type hierarchy, projecting the schema/table, doing distinct and filtering twice instead of once."""
21012,429344620,"b""Thought about this a bit more. I think the white-space check should stay here (and still throw) - as that's clearly immediate misuse of the attribute, but the ignored check and the non-existent property check could be changed if something in a later convention changed whether a property was ignored or e.g. changed a base-type. So how about I move those 2 checks to an implementation of `IModelFinalizingConvention` (in the same class) and then there's no problem with throwing."""
21012,429347131,"b'Well, there\'s the CLR classes (which have properties and fields, so members), and then there\'s our model, which has entities and properties - these are two separate worlds, and it seems that we usually use ""Property"" when talking about what entities have. EntityType does have GetMembers in addition to GetProperties, but that returns PropertyBase which is about subsuming navigation properties, service properties, etc. I\'m not expert but AFAIK our model only distinguishes CLR properties from fields via PropertyAccessMode.\r\n\r\nOtherwise, if you feel strongly that we should be talking about members rather than properties, we can discuss obsoleting IIndex.Properties and adding a new IIndex.Members...'"
21012,429351010,"b""We should still create the index if the attribute is specified on an unmapped base class. Calling `.HasIndex` with the same properties will return the existing one, so there's nothing to do here (except adding some tests)."""
21012,429352371,b'This should be `bool?`'
21012,429353076,b'We were are using a literal here on purpose. We want tests to fail if this method is renamed.'
21012,429356263,"b""Agreed (sort of).\r\n\r\nThere's nothing stopping you giving 2 indexes the same name. There are scenarios where e.g. an entity defines properties `A`, `B`, `C` and `D`, where there's an index on `{A, B}` and another on `{C, D}`. If `A` and `B` are mapped to `Table1` and `C` and `D` are mapped to `Table2`, then it's perfectly fine for them to have the same index name (note: I'm not saying I think that's a good idea, I'm just saying we should not forbid it - and specifically that if that was the case in an existing DB then we should allow an entity that does that).\r\n\r\nThat said, that scenario is not likely, and I agree that, if the index name exists, outputting it in the error message would help you identify the index, so I'll do that. I think the set of properties should not be omitted - as that is the one unique identifier in the scenario above - but where the index name exists I'll feature it at the start of the error message."""
21012,429362563,"b""Sounds good to me. But I'd like to check with @AndriySvyryd - I got the code at L771 from him and his TPT PR #20938 has a lot of code that depends on `(tableName, schema)` in this same way."""
21012,429362730,b'Extract this to avoid potential errors if we add another handled annotation.'
21012,429365329,b'Obsolete this too'
21012,429368084,b'And replace it with GetDatabaseName()'
21012,429370357,b'Relational model is not available before validation is finished'
21012,429371199,"b'This should be `property`. Entity type members are properties, service properties, navigations and skip navigations'"
21012,429375216,"b""More info in exception is good even if sometimes redundant. However this should be a warning instead, in principle there's nothing wrong with having an unmapped index."""
21012,429375878,"b'This is not an error, with TPC it will be unavoidable'"
21012,429376493,"b'This should be a warning. An index could have valid mapping in one table, but not another'"
21012,429378474,b'Drop the parenthesis'
21012,429379074,b'```suggestion\r\n        ///     The name of the index.\r\n```'
21012,429381788,"b""OK. I'll put it back and add a comment."""
21012,429389954,"b""Can you give me an example of what scenario would produce this? I was wondering in the tests how to produce this result and that will help me understand better what to do here. At the end of the day we want to produce SQL for an index that will specify a number of columns. If this property does not map to any column in any table then I'm not sure what SQL we would produce?"""
21012,429390495,b'Move the first exception to `IndexAttribute`. Move the other two to `ProcessModelFinalizing`.\r\nMake the second one log at `Information` level. And only if `HasIndex` returns `null`'
21012,429390876,"b""You'd need to call `.ToTable(null)` on the declaring entity type"""
21012,429392769,"b'Also, call `index.Properties.Format()` instead'"
21012,429394042,"b""@AndriySvyryd Are you saying that if an entity has a field you want me to refer to it as a property? I find that confusing because it doesn't agree with the C# definition. I agree `propertyOrField` would be more precise than `member`, but we've used `member` for this concept in the past (I'm thinking about the work I did on #11410)."""
21012,429395225,b'Use new API instead'
21012,429396368,"b'No, we are talking about entity type properties not CLR properties here (IProperty vs IPropertyInfo)'"
21012,429396761,"b""Agreed. And agree I should add some tests for this scenario. But we'd be wasting our time to define the index multiple times. Is there a reason to _not_ set `Inherit = false` in the `AttributeUsage` for `IndexAttribute` so that when I ask for the IndexAttributes on a given entity type I only get the ones on that entity type and not on its base-type(s)?"""
21012,429398312,"b""I didn't find I needed this. What scenario are you trying to cover? `[Index(property)]` means the same as  `[Index(property, IsUnique = false)]`."""
21012,429399330,"b""This was the scenario we discussed. Since we don't support TPC yet I thought we were going to throw here and I'd raise an issue to discuss what to do in the future when this scenario becomes available."""
21012,429401345,"b""Not understanding. At the end of the day we'll need to produce a SQL INDEX statement on one table - if the members map to different tables then that seems like an invalid scenario?"""
21012,429401486,"b'All the scenarios that would hit this are valid, the check to discuss is the next one where the index could be valid in one of the tables but not the others'"
21012,429402541,"b'OK. Will replace with ""which"".'"
21012,429402883,"b""Consider this model A { Id }, B : A { Name}, mapped as TPT. B has an Index on { Name, Id }.\r\nThis index can't be created in the table for A, because Name is not mapped there, but it's valid in table for B and there's no other way of specifying it."""
21012,429403564,"b""Without this a convention wouldn't be able to configure the index as unique"""
21012,429403882,"b""So I did this to test that the old (obsolete) methods still worked (which I remember you wanting on another PR). The new ways of getting/setting the name are tested elsewhere. If you don't need such tests then I think we're better off just removing them."""
21012,429404493,b'As I said the scenario we should support is `IndexAttribute` on an unmapped base type'
21012,429405069,"b'Ok, you can keep them'"
21012,429411931,"b'OK. It seems to me that what you\'re saying is:\r\n\r\n- On a CLR class a `member` is defined (by the CLR spec) to mean a field, or a property (which is _not_ a field), or an event or ...\r\n- On an Entity Type _we have defined_ `member` to mean a property, a service property, a navigation or a skip navigation. And _we have defined_ `property` such that it means ""a public field on the CLR type on which the entity is based"", or ""a CLR property on the CLR type..."", or a shadow property or a ""CLR property with a backing CLR field"" - which we call `IProperty`.\r\n\r\nIs that correct?'"
21012,429432303,b'yes'
21012,429432723,"b""That's pretty close to how I understand it. The key is that the (conceptual?) model is separate from CLR types and uses different terminology. That's why a model property may not correspond to any CLR member (shadow), for example."""
21012,429435045,"b'C-Space, O-Space & S-Space.'"
21012,429511357,"b""OK. My understanding previously was that Property was just called Property for historical reasons - because some time, way back, we didn't originally allow fields. But I will adopt this way of thinking. """
21012,429590261,b'`bool?` not allowed as attribute named parameter. Adding a method `GetIsUnique()` instead.'
21012,430631310,"b'I moved the check of no white-space into the attribute as requested - however please note I could throw a much more helpful error message if I did this in the convention.\r\n\r\nThe other two have been moved to `IndexAttributeConvention`. They are both errors - I\'d like to discuss the level of these as I believe that the most likely scenario for both ""mapped to ignored property"" and ""mapped to non-existent property"" is the user had a typo, or referenced an ignored property by mistake. Note: if they absolutely have to do either of those things then they can override the log message to be at a different level.'"
21012,430631639,b'We allow inheritance of the attribute and there is now a test for this.'
21012,430633263,"b'The ""index property mapped to multiple tables"" error has gone away. We now check for ""at least one table to which all properties can map"". If you\'d like an `info` or `verbose` message to say ""the index properties map to more than 1 table"" then that would be easy to add back in.'"
21012,430634614,"b'This scenario now has a test producing no error. Note, the similar TPT scenario where A { Id, Other }, B : A { Name} with index on { Other, Name } does still error as there is no single table containing both Other and Name. (Note: both of these tests are `Conditional` awaiting your TPT PR #20938).'"
21012,430711656,"b""I missed this - I'll remove it since no longer used."""
21012,430757450,"b'This should not be core level, Table/Schema is relational concept. Also make this public internal unless used outside relational.'"
21012,431503536,"b'We now log info message if all of the properties constituting the index do not map to anything and log an error if some of them map and some don\'t. Error for ""mapped to non-overlapping tables"" is still there too.'"
21012,431976519,b'Make this an `IReadOnlyList<string>`'
21012,431976818,b'Add an overload of `IgnoredIndexAnnotations` that takes an `IReadOnlyList<string>`'
21012,431980557,b'Did you mean an overload of `IgnoreAnnotations`?'
21012,431986273,b'Add the pubternal doc comment on every member'
21012,431990547,b'Yes \xf0\x9f\x98\x83 '
21012,431991512,b'Rename this to `GetDatabaseName`'
21012,431994254,b'```suggestion\r\n                        var tablesMappedToProperty = entityType.GetDerivedTypesInclusive()\r\n```\r\n\r\nWe should only look at the entity types where the index is present.'
21012,431994710,b'```suggestion\r\n                foreach (var index in entityType.GetDeclaredIndexes()\r\n```\r\n\r\nNo need to check inherited indexes again'
21012,431996051,"b""Let me do this as a separate PR. It isn't central to what I'm doing, and I found the last change to `GetDabaseName()` added a lot of files to the PR and made merging more difficult."""
21012,431997416,"b'`indexName` might be null, this will look ugly. Instead use `indexSpecification` that will be `indexName: {indexProperties}` if indexName is not null or just `{indexProperties}`'"
21012,432013050,"b""```suggestion\r\n    <value>The index named '{indexName}' on the entity type '{entityType}' specifies properties {indexPropertiesList}. Some properties are mapped to a column in a table, but the property '{propertyName}' is not. All of the properties should be mapped for the index to be created in the database.</value>\r\n```"""
21012,432013452,"b'@roji - please chime in - this was designed this way because of your previous comments about needing the name.\r\n\r\nI thought about this a lot. `indexSpecification` doesn\'t work. It is possible for 2 indexes with different property lists to have the same name - so we always need to include the propertyList - it is the unique identifier of the index. Also when you refer to `indexName` you really want to say ""the index named `indexName`"", when you use `indexProperties` you really want to say ""specifies properties `indexProperties`"" or ""specified by properties `indexProperties`"".\r\n\r\nI studied the output messages a lot. Normally I would agree with you but in this case and I was fine with the name being blank or null when the user had not set `index.Name` - I even thought it was better that way. However if we want to avoid that then one other approach is to have 2 log messages for each of the events. One which looks like the above and one which looks like:\r\n\r\n```\r\nThe unnamed index on the entity type \'{entityType}\' specifies properties {indexPropertiesList}... \r\n```\r\n\r\nI\'d be fine doing that too.\r\n'"
21012,432013791,"b'This is too broad, better to keep as private or real internal'"
21012,432014997,"b""Either this or the comment below about `GetDeclaredIndexes()` causes the test Detects_index_properties_mapped_to_different_tables_in_TPT_hierarchy to fail. I'll have to look into this."""
21012,432015337,"b""I'm fine with having two messages for each event"""
21012,432016934,"b'```suggestion\r\n                                indexBuilder = indexBuilder.HasName(indexAttribute.Name, fromDataAnnotation: true);\r\n```'"
21012,432017114,"b'```suggestion\r\n                                indexBuilder?.IsUnique(indexAttribute.GetIsUnique().Value, fromDataAnnotation: true);\r\n```'"
21012,432023681,b'`private` causes me to have to replicate this everywhere - which is what I was trying to avoid. Even real internal causes this method to not be reachable in Relational. How about a separate pubternal class?'
21012,432023938,b'Is this just a style thing? I.e. are you suggesting getting rid of the `if (indexBuilder != null)` and using `indexBuilder?` throughout instead?'
21012,432024488,"b""I agree with @AndriySvyryd.. Basically, if the indexName is provided, it should appear in the message - and if not, it shouldn't (otherwise there's a weird blank). If the indexName isn't provided, then the properties are necessary in order to identify it. If both are provided, I would lean towards omitting the properties, but I think it's fine to include both (it doesn't hurt)."""
21012,432025870,b'I see. You can leave it as is then.'
21012,432032850,b'This works - must be the comment above that causes the test Detects_index_properties_mapped_to_different_tables_in_TPT_hierarchy to fail.'
21012,432040944,"b""We'll need to do something different here for TPC, but we'll see when we get there."""
21012,432066493,"b""Looked at this a bit more. I'd like to not do that. If for any reason `HasName()` returns `null` (say because the name has been overridden by fluent API), that is not a good reason to not set `IsUnique()` next."""
21012,432066686,b'Would like to leave this as is - see previous comment.'
21012,432070094,b'real internal classes can be placed in Shared to make them accessible to all projects'
21012,432129063,b'Raised #21072 to track this.'
20827,419807628,"b'Is this intended or should it be\r\n```suggestion\r\n            Assert.Equal(trackedOrder.ShipVia, order.ShipVia);\r\n```\r\n?'"
20827,419813273,"b'That\'s probably because you are using `ReferenceLoopHandling.Ignore` instead of `PreserveReferencesHandling.All` on `ThroughNewtonsoftJson`. It is more likely to write smaller payloads when you have several duplicated objects if you preserve all the references, since large POCOs will be replaced with `{ ""$ref"": ""#"" }` instead of enumerating the rest of its properties.\r\n\r\nIt would be good to add another set of calls that test for `PreserveReferencesHandling` on Newtonsoft so you can avoid OOM errors and be able to test both serializers.'"
20827,420192938,"b""Thanks! I'll give that a try."""
20827,430844221,"b'```suggestion\r\n        private static T RoundtripThroughBclJson<T>(T collection, bool ignoreLoops, bool writeIndented, int maxDepth = 64)\r\n```'"
20827,430844257,"b'```suggestion\r\n        private static T RoundtripThroughNewtonsoftJson<T>(T collection, bool ignoreLoops, bool writeIndented)\r\n```'"
21095,433192683,b'talse!'
21095,433225269,"b""\xf0\x9f\x93\x9d This one is often set to `Hidden` or `None`. It's quite noisy and probably isn't necessary unless you are using Sandcastle Help File Builder. I'll leave it for you to decide."""
21095,433227964,"b'\xf0\x9f\x92\xad It seems the original `param` element was correct, and the missing item is the `<returns>` element around the final two lines.'"
21095,433250389,"b""You're probably right, I'll fix this - thanks."""
21095,433254660,"b'Makes sense to me, reverted these changes.'"
21095,434095387,b'This `para` is redundant'
21095,434095752,b'Missing `returns`'
21095,434096286,b'I think according to naming convention this should be `DotNetAnalyzersDocumentationAnalyzersVersion`'
21095,434096323,b'empty `para`'
21095,434096988,"b'What starts with ""t"" and is not false?'"
21095,434215603,"b""That must be the 3-value logic thing everyone's been talking about..."""
21095,434216418,"b""Weird that this wasn't flagged, /cc @sharwell """
21087,433587123,"b'Is this right?\r\nA quick check on int revealed that `a.CompareTo(b)` is same as `Comparer<int>.Default.Compare(a, b)`'"
21087,433613880,"b""What's your point? Would you prefer `Comparer<bool>.Default.Compare(y.IsMainTableMapping, x.IsMainTableMapping)`?"""
21087,433617652,b'`x` & `y` are inverted? '
21087,433646027,"b'Yes, true should be sorted first, this was a bug'"
21095,434250865,b'I would recommend filing bug reports over on the analyzer project for cases like this.'
21103,434109148,b'```suggestion\r\n        ///     Called immediately after EF rolls back to a transaction savepoint.\r\n```'
21127,434736427,b'Check.NotNull'
21127,434833588,"b'```suggestion\r\n        ///     Checks whether a given SQL string is composable, i.e. can be embedded as a subquery within a\r\n```'"
21127,434833683,b'```suggestion\r\n        ///     larger SQL query.\r\n```'
21097,433325855,"b'The lack of parentheses here smells bad, no?'"
21097,433334616,b'Why string.Contains pattern is non string value?'
21097,433336134,"b""It's just a null check"""
21097,435021610,"b'would be nicer with ()s, yeah. We already have a method in sql gen for that (RequiresBrackets) that we can use for Match operand in like'"
21097,435025482,"b'do we have a test like this but with constant, rather than parameter?'"
21097,435076349,b'Added this'
21115,434147570,b'We should remove `RelationalAnnotationNames.Name` if present.'
21115,434155448,b'```suggestion\r\n        ///     Configures an unnamed index on the specified properties. If there is an existing unnamed index on the given\r\n```'
21115,434155778,"b'```suggestion\r\n        ///     Configures an index on the specified properties and with the given name. If there is an existing index with the given\r\n        ///     name, then the existing index will be returned for configuration.\r\n```'"
21115,434157282,b'We should probably obsolete this and rename it to `FindUnnamedIndex` or `FindAnonymousIndex`'
21115,434157842,b'Since we have a different overload for unnamed indexes `properties` can be removed and `name` made required'
21115,434158758,b'We should store unnamed indexes in a separate collection. This way named ones can be indexed solely on the name'
21115,434161287,"b'```suggestion\r\n            [NotNull] string name,\r\n```'"
21115,434161604,b'This is an unnecessary detail'
21115,434198442,b'Calling `AsReadOnly` is not needed'
21115,434219398,"b""Would prefer to keep the original. What if there's an index with the given name but not on that set of properties?"""
21115,434221128,"b""Let's discuss that with the whole team. I agree it would be good to de-emphasize the unnamed `FindIndex` (along with all other APIs for unnamed indexes). But it seems like a pretty major public API so I'm not sure on whether to Obsolete."""
21115,434222836,"b""~~Don't understand the `properties` can be removed comment? There is no global uniqueness on `name` only on `propertyList`+`name`.~~ Now understand - see comment below.\r\n\r\nAs for making `name` required see comment above. If we are to de-emphasize the unnamed index APIs (especially if we were to Obsolete it), then we should allow passing null here."""
21115,434224631,"b""Hmmmm. Let me think about that. It's definitely not how I envisaged it. And at creation time you definitely need to provide the list of properties and not just the name. The propertyList is immutable, right? I presume we're _not_ imagining that named indexes would allow the propertyList to change?"""
21115,434224717,"b""We don't need global uniqueness on `propertyList`+`name`, just on `name`"""
21115,434224897,"b""See above. I think we could do this if we do _not_ de-emphasize unnamed indexes, but we shouldn't if we do."""
21115,434225103,b'Correct. Both `propertyList` and `name` should be immutable'
21115,434225312,b'If we envisage the set of unnamed indexes as completely separate from the named ones then I agree. As mentioned above I had not envisaged them that way.'
21115,434229862,"b""We will have an overload that doesn't take name either way, so accepting nulls here is not needed"""
21115,434231220,b'The proposed change is to actually **emphasize** that this API is for unnamed indexes and clarify that named indexes will not be returned.'
21115,434834198,b'Design meeting decision 6/3/2020 - we will keep `FindIndex` doing exactly what it does now. So we will not Obsolete it. But we should explain in the docs that it will bring back only unnamed indexes.'
21115,434835689,"b'Design meeting decision 6/3/2020 - decided _not_ to de-emphasize existing API, but rather add the new API intending that users only use it for cases where they cannot achieve what they want with unnnamed indexes. Also decided that we will uniquify on name only (for named indexes). So this will become `FindIndex([NotNull] string name)` - which will return only _named_ indexes matching the given name.'"
21115,434836232,b'Design meeting decision 6/3/2020 - agreed to store named indexes in a separate collection uniquified on name-only. '
21115,434836729,b'Design meeting decision 6/3/2020 - are not de-emphasizing - so will do this.'
21115,434837130,"b'Design meeting decision 6/3/2020 - we are having named indexes stored separately, so will remove this.'"
21115,434948117,"b""This needs to call the different versions of `HasIndex()` dependent on if `indexAttribute.Name == null`. I'll update. """
21115,434975965,"b'```suggestion\r\n        ///     Gets the unnamed index defined on the given property. Returns <see langword=""null"" /> if no such index is defined.\r\n```'"
21115,434976022,"b'```suggestion\r\n        ///     Gets the unnamed index defined on the given property. Returns <see langword=""null"" /> if no such index is defined.\r\n```'"
21115,434976328,"b'I believe this should work\r\n```suggestion\r\n        ///     properties. This will force the properties to be read-only. Use <see cref=""M:HasIndex"" /> to specify uniqueness\r\n```'"
21115,434999291,"b'Put into separate paragraphs and remove ""Note:""'"
21115,435000995,"b'```suggestion\r\n            [NotNull] IReadOnlyList<IMutableProperty> properties, [NotNull] string name);\r\n```'"
21115,435367808,"b'```suggestion\r\n                    CoreStrings.DuplicateNamedIndex(properties.Format(), this.DisplayName(), duplicateIndex.DeclaringEntityType.DisplayName()));\r\n```'"
21115,435367990,b'This is covered by the check below'
21115,435374543,"b""Filter the derived indexes to only the ones that are also declared on the same properties. If there are any with the same name on different properties we shouldn't reattach them."""
21115,435380297,b'Add tests verifying that calling `HasIndex` with the same name with different properties on the same/base/derived type throws. And when called with the same properties it returns the existing one or promotes it to the base type.'
21115,435448106,"b""The one for returning the existing index from the same type was already there. I've added the others."""
21115,435467827,b'This is faster:\r\n```suggestion\r\n            var existingIndex = Metadata.FindIndex(name);\r\n            existingIndex = existingIndex == null || !existingIndex.Properties.SequenceEqual(properties)\r\n                ? null\r\n                : existingIndex;\r\n```'
21115,435558024,b'in the database or on the database?'
21115,435559535,b'HasIndex everywhere else takes CanBeNull name.'
21115,435561752,b'This pass null value to a parameter which is marked as NotNull.'
21115,435562155,b'indentation.'
21128,435602655,b'`RelationalModelValidator` needs a corresponding change'
21128,435603264,b'See PR #21136.'
21128,435603520,"b'This is not enough. Any column mapped to two or more writable properties in table sharing could also be ""store-generated""'"
21128,435604695,"b'Could you raise another issue please, with a test case that would fail?'"
21128,435610155,b'https://github.com/dotnet/efcore/issues/21139'
21115,435607252,b'Here'
21115,435607272,b'Here'
21115,435608028,b'Here'
21115,435609279,b'null check'
21115,435609637,b'null check'
21115,435609828,b'nit: annotations on private methods are not necessary.'
21129,434858240,"b'was thinking to combine, but the message looks a bit convoluted. '"
21129,434885594,b'Is owned enough or we need ninja conditions here for weak entities?'
21129,435382076,"b""It's perfectly valid to declare a filter on a non-owned weak entity type."""
21129,435386209,"b""Now I am confused about difference between owned and weak entity types. \r\nSince I couldn't find in issue description, can you answer following for my better understanding.\r\n- Why is it invalid for owned entity to have query filter?\r\n- Why is it valid for non-owned weak entity type?"""
21129,435420106,"b""It's invalid for owned types because they are conceptually part of the owner and shouldn't be filtered out in most cases."""
21130,435071709,b'Possibly slightly safer/cleaner if we list the plain 2D types here as well?'
21130,435488346,"b'I fiddled with that, but couldn\xe2\x80\x99t decide what to do if it was an unexpected type. The team won\xe2\x80\x99t let me Debug.Fail.'"
21130,435526484,"b""Is it reasonable to just throw here? Don't we actually want that behavior in case the user misconfigures the column type name (e.g. typo)?"""
21130,435998194,"b""The database will throw if EF tries to create the column. So yeah, I guess always throwing isn't terrible. My only concern is that they add a new spatial type (seems extremely unlikely) and we start throwing for no real reason."""
21130,436001589,"b""Maybe that's not such a bad thing, considering that we have no idea about the ordinates of that type..."""
21130,436002027,"b'Unless you want to apply some logic that parses the last letters of the store type and infers the ordinates from there, that could work.'"
21130,436100897,"b""Updated to throw. The next version of SpatiaLite doesn't add any so I think we're safe"""
21161,436296462,b'Probably add a test in Converters test to verify the generated type mapping for IPAddress field.'
21161,436340311,b'Added tests in ValueConverterSelectorTest'
21160,436283450,b'Note that I removed explicit checks for `object` type since it should never be mapped anyway.'
21160,436290043,b'`object` maps on SqlServer. This is not right fix.'
21160,436340984,b'Added back the checks for SQL Server\r\n'
21160,436341165,"b'Though note that all tests passed when I removed, so we may be missing some tests here.'"
21163,436296419,b'Assert SQL for Convert_ToBoolean test?'
21163,436382845,b'What is this? :trollface: '
21163,436391989,b'VS glitched again and didnt save changes >.<'
21169,436832029,b'Also test  `Tracked` and `StateChanged`'
21153,436202145,"b""@davidebbo We target .NET Standard 2.1 and can't reference `RuntimeEnvironment.RuntimeIdentifier`. Should we revert to version 3.1.4 of this package?"""
21153,436202413,b'@Tratcher What is the status of this package? It appears to have stopped publishing. I noticed there is a copy of the code in both dotnet/runtime and dotnet/aspnetcore.'
21153,436202686,b'Looks like this got removed as a transitive dependency. (upstream breaking change)'
21153,436203194,b'aspnet/Announcements#415'
21153,436204526,b'@JunTaoLuo ?'
21153,436206111,"b""@bricelam the `HostFactoryResolver` class exists in dotnet/aspnetcore but we don't ship it anywhere. You should use a dotnet/runtime package though nothing with this name appears where I looked.\r\n\r\n@ericstj @JunTaoLuo is there a new name for Microsoft.Extensions.HostFactoryResolver.Sources? We never shipped it publicly but did use the transport feeds to share it around. Alternatively, is there another .Sources package containing the code?\r\n\r\nFailing that @bricelam, you may need to copy the code from one of the repos and do the same `<Compile />` hack we do in dotnet/aspnetcore for shared source files."""
21153,436206686,b'It vaguely rang a bell'
21153,436207987,b'Thinking you might have tagged the wrong person here. Maybe @davidfowl?'
21153,436216055,b'I swear you authored the PR that removed the package. \xf0\x9f\xa4\xb7\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f'
21153,436220757,b'@eerhardt to provide some guidance.'
21153,436222418,"b'lol, I blame quarantine. Sorry for the noise.'"
21153,436234199,"b'> Should we revert to version 3.1.4 of this package?\r\n\r\nYes, if you need to get the RID of the current machine, but can\'t target `net5.0`, you can still use the `3.1.4` version of the `Microsoft.DotNet.PlatformAbstractions` package.\r\n\r\nIf possible, I would recommend cross-targeting to `net5.0` to get the `RuntimeInformation.RuntimeIdentifier` API, but if that isn\'t possible you can check if `AppContext.GetData(""RUNTIME_IDENTIFIER"")` is set first, and let that win over calling `Microsoft.DotNet.PlatformAbstractions`. The reason being that new RIDs are being supported in `.NET 5` that the `3.1` version of `Microsoft.DotNet.PlatformAbstractions` doesn\'t support.'"
21153,436291143,b'Looks like builds stopped after https://github.com/dotnet/extensions/pull/3160. @ericstj How do we get them publishing again from dotnet/runtime?'
21153,436898062,"b'We (@anurse, @JunTaoLuo, and @maryamariyan) made and intentional decision to no longer publish source packages and instead just duplicate code (and remove dead-code) where necessary.'"
21153,436902789,"b""In this case it looks like this code doesn't even build in any shipping library in dotnet/runtime.  I'd suggest we just delete it from dotnet/runtime and let it live in efcore and avoid the dependency-flow entirely.  @Tratcher are we missing something here in why you chose to put this code in extensions and not EFCore to begin with? https://github.com/dotnet/extensions/pull/925"""
21153,436905399,"b'This was created by ASP.NET Core as a common mechanism for tooling to interact with the ASP.NET Core hosting/configuration system. If this is not going to be shipped by anyone anymore, then that implies we no longer support a common mechanism for this. Is that the decision that was made?'"
21153,436909381,"b""This code abstracts patterns used in Hosting and Program.cs/templates and was indented to be maintained by the owners of those patterns so that consumers like EF Tools didn't have to be aware of the implementation details. It ships as sources because the tools packages needed to limit their binary dependencies. Moving the code to EF would be a step backwards.\r\n\r\nThere was at least one other consumer of this package. Was it UserSecrets?"""
21153,436917013,"b""We have a copy of the code in https://github.com/dotnet/aspnetcore/blob/master/src/Shared/HostFactoryResolver/HostFactoryResolver.cs and it's used in Microsoft.AspNetCore.TestHost, the MVC testing infrastructure, as well as the tool shipped in the Microsoft.Extensions.ApiDescription.Server package. I don't think the user secrets tool uses it.\r\n\r\nIn any case, is it a major problem to keep aspnetcore and efcore copies of this file in sync? Would it be a major burden on the dotnet/runtime side to provide this as a package? If you could do that @ericstj, there'd be no sync needed.\r\n\r\nMore generally, how much code have we duplicated between aspnetcore, aspnetcore-tooling and efcore?\r\n\r\n/fyi @Pilchie """
21153,436927477,"b""@Pilchie might have more background on that.  We of course want to to whatever makes the most sense, but I don't have background into the past decisions.  I know that we had an agreed upon POR with ASP.NET to eliminate the source packages and only bring things back if we found cases for problematic sharing (like a data model that can't get out of sync) and this one didn't come up.  It's possible that this falls into that bucket but let's consider.  Its concerning to me that we'd have a package in dotnet/runtime that needs to know about some implementation details of the ASP.NET templates and do private reflection on customer code.  Why not proceed with the stale dependency for now and we can have a meeting to discuss and find the best way forward?"""
21153,436945716,"b""Sounds good @ericstj. @Pilchie let's discuss at our Thursday sync and decide if we have an ask of dotnet/runtime here.\r\n\r\n@JunTaoLuo sometime between now and then, please determine what code we're copying around, including duplications between dotnet/runtime and dotnet/aspnetcore. That list will be helpful on Thursday."""
21153,436981310,"b'Ah yes, I was sort of expecting this kind of issues when we decided to move to shared sources only. Can we take the same approach we are using in aspnetcore-tooling where we pin this dependency at a previously released version to unblock dependency flow: https://github.com/dotnet/aspnetcore-tooling/blob/master/eng/Versions.props#L90-L91? At least until we sort out exactly what we want to do for this particular dependency?'"
21186,437193472,b'update comment above.'
21178,437321187,b'nit: formatting looks off here'
21178,437324015,b'Thanks'
21188,437296545,"b'maybe also:\r\n""  --SELECT"" '"
21188,437336676,b'How about the other type of comment?  https://docs.microsoft.com/en-us/sql/t-sql/language-elements/slash-star-comment-transact-sql?view=sql-server-ver15 '
21188,437357547,"b'Was just about to push ""merge"" :)'"
21178,437526430,b'This was by design. We should verify exception message for query as much as we can with Equal so that we know exactly what we are printing as Expression tree to user.'
21178,437550648,"b'We were already checking only a substring via QueryTestBase.AssertTranslationFailed, and @maumar seemed to think this change was OK. Strong feelings about this?'"
21169,437606155,"b""We might also want to mention that it doesn't trigger the state changed event"""
21180,437056287,b'```suggestion\r\n        public virtual IReadOnlyList<ReaderColumn> ReaderColumns { get; }\r\n```'
21181,437637323,b'Can call `.Compile()` early.'
21181,437650843,b'Does it make difference for anything (perf?)? I kinda left it till the end so that we can look at the lambda generated while debugging. Or may be if we add another state afterwards to visit it again.'
21181,437651461,b'No difference'
21183,437618657,b'Move the loop outside to avoid creating a collection when only one entity type is supplied'
21183,437621511,"b""rename to something without 'or', like `shouldThrow`"""
21183,437625280,b'No need to call it on the derived types. Also can exit early if `oldBaseType` is `null`'
21183,437631285,"b""Thinking more about this case I realized that it would have a significant perf impact only to make a corner case work better. So I changed my mind: we shouldn't run this on PropertyAdded and instead add the missing indexes on ModelFinalizing. This should give us the best of both worlds: indexes will be created early in most cases and it won't have a big impact on perf."""
21183,437632822,"b'Call `entityType.Builder.IsIgnored(propertyName, true)` instead, it takes the configuration source into account'"
21183,437657715,"b'With the change to `ModelFinalizing` below such that it is now ensuring the index, that works.'"
21183,437659652,"b""What if you have classes: `C` inherits from `B` inherits from `A`. `C` has an index which references a property on `A`, when we call `B.HasBaseType(null)` don't we want to revisit the index on `C`?"""
21183,437661731,b'That index should be recreated by the `InternalEntityTypeBuilder`. Add a test to make sure'
21183,437663176,"b""You can try to create the property in case there's a matching CLR property that wasn't discovered by convention (e.g. it's private)"""
21183,437663434,"b'What about other way around?\r\nIndexAttribute on `C` uses a property which is not defined on `C` or `B` and `A` has that property but currently not set as base type of `B`. When we set `A` as a base type of `B`, now `C` can create the index because `A` provided that property.'"
21183,437664466,b'@smitpatel That is a corner case and will be handled on ModelFinalizing'
21183,437667320,"b""Not sure why an index on `B` would need this call, but one on `C` would not, but I'll add the test and see."""
21183,437736836,"b""> Not sure why an index on B would need this call, but one on C would not, but I'll add the test and see.\r\n\r\nAn index on B wouldn't need this call either. This call is for an index on A."""
21183,437814983,"b""This is causing test failures. Let's discuss."""
21183,437815315,"b""That doesn't feel like it should be `IndexAttibuteConvention`'s responsibility. Do you have any other examples of conventions creating properties like this?"""
21183,437816409,b'Any convention that works on property names specified in an attribute would do this. For now the only other one is `ForeignKeyAttributeConvention`'
21183,438423696,"b""Decision in design meeting - make it do whatever `HasIndex(string[] propertyNames)` does. \r\n\r\nNote: this will mean no longer warning if we can't find the property as `HasIndex(string[] propertyNames)` just creates shadow properties if it can't find them."""
21183,438579446,b'Typo in properyt'
21183,438949752,b'Invert condition for readability'
21183,438958076,b'This check is redundant now and can be removed'
21183,438973781,b'should use configuration source.'
21183,438976695,"b""That's what wasn't working. @AndriySvyryd and I discussed this yesterday and decided to do this for now."""
21183,438976787,b'Agreed.'
21183,438979086,b'? You mean `if (null != entityType.ClrType)`?'
21183,438982301,"b'No, I mean\r\n```C#\r\nif (entityType.ClrType == null)\r\n{\r\n    return;\r\n}\r\n```'"
21201,438997160,"b""these two need to be DRY'd at some point (can be in future commit)"""
21201,439001012,"b'Agreed. In the essence of time, I skipped it for now. Will do in preview7. All the methods duplicating are private so should be non-breaking to change.'"
21201,439002433,b'Optimistic'
21201,439019365,"b'add tests for these, we only have them for client eval on inner'"
21201,439021469,b'I thought about it. Not sure if it is possible right now to have it (other than the SelectMany case which causes it).\r\nThe selector on outer will always get pulled to very top so it is not possible to go through join pipeline for that during client eval since everything will be in projection which will either take CollectionProjection or SingleProjection path.\r\nRequires https://github.com/dotnet/efcore/issues/20291 to actually add something which hits this code path. I added it as future proofing since I was thinking holistically.\r\n'
21201,439031209,b'Added note on #20291'
21201,439031457,b'Tracking via #21226'
21230,439153333,b'```suggestion\r\n        ///     Enters a critical section.\r\n```'
21230,439153421,"b'```suggestion\r\n    ///     A <see cref=""IDisposable"" /> returned by an <see cref=""IConcurrencyDetector"" />, which will exit the ongoing\r\n    ///     critical section when disposed.\r\n```'"
21230,439154018,"b""This isn't a struct, so we will still be allocating. What's the purpose of this change?"""
21230,439155023,"b""Sorry, that was a typo (it's 3AM here). Changing to readonly struct."""
21230,439155327,"b""(maybe concurrency-related programming at 3AM isn't such a good idea?)"""
21230,439155378,b'I thought it was an intentional bug like what Arthur suggested to include in every PR'
21230,439155496,b'Does this not create a new struct every time? (rather than reusing like how previous did)'
21230,439155593,b'struct construction is cheap'
21230,439156389,"b""It does, but creating a struct (on the stack) is free - especially as here it's just wrapping a pointer. So it's the same as allocating a long, or a reference on the stack."""
21230,439157566,"b""Ah of course, that's what it was. Congrats for winning the prize @AndriySvyryd!"""
21189,439061180,b'cleanup'
21189,439061971,b'*hic sunt dracones*'
21189,439062944,"b'nit: we can join multiple attributes inside a single [], not sure if we do that.'"
21189,439069713,b'Corresponding logic for AsNoTracking/PerformIdentityResolution/TagWith/IgnoreQueryFilters is in QueryableMethodNormalizingExpressionVisitor. Maybe rename the latter to QueryMetadataExtractingEV for consistency etc.?'
21189,439071799,b'var'
21189,439072335,b'We should consider moving this kind of stuff to QueryableMethods'
21189,439075291,"b'Is it safe to rewrite First/Single to Take(1) here? Where is the exception going to come from later, in case there are no elements etc...'"
21189,439082881,b'May as well split this method into two no? Or are you planning to refactor this back into being less split (no pun intended)?'
21189,439084046,"b'```suggestion\r\n        /// <param name=""splitQuery""> A value indicating whether the collection query would be run with a different DbCommand. </param>\r\n```'"
21189,439090210,"b'Nice! But can be... switch expression, making this a standard expression-bodied dispatcher..'"
21189,439098271,"b""If I'm reading this right, this uniquifies aliases across split queries, which we don't have to do, right?"""
21189,439105437,b'Can be DRYed a bit if only two things here differ between sync/async?'
21189,439106000,"b'Feels like maybe two explicit factory methods for sync/async could make sense here, rather than pattern matching on the type of the 4th param'"
21189,439107344,b'Can remove else and unindent'
21189,439113043,b'The base class does more than extracting metadata. It converts enumerables to queryables and it flattens groupjoin-selectmany into joins. Hence the names. They all are pubternal so we can change names in future if the function changes.'
21189,439113300,b'Cannot use var without a cast.'
21189,439113380,b'What stuff?'
21189,439113575,b'This is rewriting for the query going to be used for collection query. The parent query remain as is and throws exception as expected.'
21189,439114019,b'No preference. But I have preference for avoiding unrelated changes. \xf0\x9f\x98\x9b '
21189,439114714,b'`UniquifyAliasInSelectExpression` starts a new scope to uniquify in particular scope. We have to uniquify aliases in each SelectExpression used for additional queries.'
21189,439114924,"b'Looking at the text in each case label, this does not look like a candidate for switch expression.'"
21189,439115207,"b""Just utility method to e.g. identify cardinal-reducing operators, assuming that's reusable."""
21189,439115388,b'Then I need to come up with a new variable name for `result` since there is a clash. :trollface: '
21189,439115463,b'Am referring only to the part where metadata is being extracted - would be nice for that to be consistent across core/relational (in same-named visitors). Can be done later.'
21189,439115548,b'This is already an unrelated change :trollface: '
21189,439115649,b'It causes more code than current.'
21189,439115865,b'Easier to understand this way. Also it is not causing a lot of duplication.'
21189,439116304,b'I prefer it to be one method only. Methods on SelectExpression are based on operation and takes parameter if the operation is the same but supposed to generate something different.'
21189,439117893,b'I have auto-format on save. '
21189,439118183,b'But both visitors do different tasks. There is no need to align names.'
21189,439118363,b'Too low value and case variety to have such method.'
21189,439121359,"b""Odd that the shaper is called twice with exactly the same parameters etc. Am sure there's a good reason (related loader populate results in the coordinator etc.) but maybe look at cleaning up later."""
21189,439123848,"b'It is by design. It is same in single query mode also.\r\nShaper calls itself repeatedly till it is ready to generate the final result.\r\nFor single query mode, it takes arbitrary amount of iteration and result coordinator signals when result is ready.\r\nFor split query mode it takes 2 iterations, hence manually called separately rather than going through trouble of result coordinator.'"
21189,439126705,b'Rename QueryingEnumerable to SingleQueryEnumerable like the other related types?'
21189,439128539,b'I thought I did. I will update.'
21189,439162364,"b""Maybe, but what's happening here is really non-obvious. Factory methods allow you to assign a meaningful name, whereas constructors don't have names."""
21189,439164254,"b""In current codebase, we don't use factory method for ctor initialization (except for services factory specifically to be replaced).\r\nFurther adding a factory method here will add additional method call at runtime which is not necessary at all.\r\ncollapsed both ctor in single to avoid ctor lookup and passing null parameter."""
21189,439165627,b'This will show up in API review. We can rediscuss then.'
21218,439054840,"b""nit: a bit redundant since customer1 != customer2 above, and we're checking customer2 below """
21218,439057808,"b""Intentional? Shouldn't everything here be split?"""
21218,439058053,b'Split and no tracking?'
21218,439060263,"b'It uses AssertLast infra which will add AsSplitQuery method call. I had to override this since exception message changed.\r\nFirst on parent translates to Take(1) on child query. Same way Last on parent translate to `Reverse().Take(1)` on child query, that fails before we reach parent query to translate Last.'"
21218,439060709,b'AssertLast will add both of that.'
21224,439221135,b'skip those rather than comment them out'
21197,437755542,"b""We don't actually need the `ignore` section. I just have it here so we can review it."""
21197,437756090,b'Using `allow` so it plays nicely with dotnet-maestro'
21197,437768946,"b""Good to have BDN in ignore since it won't fail the build here but can fail things in perf run."""
21197,439609639,"b""Surprised an `ignore` list is needed when there's no overlap w/ the `allow` list. Is this due to another Dependabot restriction or oddity\xe2\x9d\x94"""
21197,439609773,b'Why do the ignored dependencies need to have their versions inlined too\xe2\x9d\x94'
21243,439630647,b'What is the difference with FindProperty?'
21243,439630781,b'\xf0\x9f\x98\xae '
21243,439631072,b'```suggestion\r\n        ///     Discovers primary key candidates and configures the primary key if found.\r\n```'
21243,439631279,b'Either use variable or remove it.'
21243,439633250,b'What is different from previous test?'
21243,439633859,b'Where are these classes used?'
21243,439635447,b'I think in the other class you added Assert.Contains for this.'
21243,439636453,"b'One might have a ""MyEntityId"" mapped to ""id""'"
21125,439417589,b'?'
21125,439418267,b'combine ifs for easier understanding of what is happening.'
21125,439420947,b'Multiple nested convert nodes?'
21125,439448859,b'Does that actually happen?'
21125,439658758,"b""Guess it doesn't - removed."""
21125,439658871,"b'Combined, though it means an extra check.'"
21125,439659341,b'Store results in a bool var to avoid extra checks.'
21125,439659505,b'Any reason to move this to local function? This is not specific to BinaryExpression.'
21125,439660376,b'Looks worse to me but you da boss'
21125,439660502,"b""Wasn't used anywhere else so I did it... We can always move it out if it's needed no?"""
21125,439662535,b'Then we need to remember that we had method like this hiding here.\r\nLocal methods which are valid in a context of a particular method makes sense but not used elsewhere hence local could be bit non-productive.\r\n\r\ncc: @dotnet/efcore  ?'
21125,439662768,"b""No need to bother everyone, I'll just move it out if that's what you want."""
21125,439664794,"b'Found a usecase, there RemoveObjectConvert in VisitMethodCall too. You can DRY with TryUnwrapConvertToObject'"
21125,439666917,"b""In VisitBinary we need to know if we unwrapped or not (hence Try*), but in VisitMethodCall we don't (so it returns the unwrapped)... So DRYing would make VisitMethodCall clunkier (calling Try* and testing the result). Let's leave things the way they are, the code fragment is really small...\r\n\r\nHowever I did DRY out RemoveObjectConvert in Relational which is used by both VisitMethodCall and ConvertObjectArrayEqualityComparison."""
21254,439750182,b'`CreateContext`?'
21254,439750221,b'`IDbContextFactorySource`?'
21254,439750232,b'`ContextFactory`?'
21254,439750274,"b'```suggestion\r\n            return (p, _) => ActivatorUtilities.CreateInstance<TContext>(p);\r\n```'"
21088,434074847,b'Also update `GetServiceProviderHashCode` below'
21088,434076109,b'Move the parenthesis one line up.'
21088,434077551,b'Move `_client ??=` outside the conditional'
21088,439777662,"b'The last 3 lines are the same, so you can move them out of the block'"
21088,439777781,"b'No need to specify this here, the default in `TestEnvironment` is enough'"
21248,440476572,"b'worth moving from QueryableMethodTranslatingEV into some common place and use that one, rather can creating a new one here?'"
21248,440482649,b'It is going to be removed from Queryable one and let provider deal with it since provider specific query expression are supposed to use it if needed. We can move it to something shared when dealing with InMemory if worth. The method is also supposed to be obsoleted but not done yet for the same InMemory reason.'
21203,437885786,"b'I\'m on the fence here - we do provide Sum translation into SqlFunction ""SUM"" in relational, but if there is a provider that translates it to a different function it would have to rewrite the entire visit sql function method, so that SUM doesn\'t get coalesce wrapped around it incorrectly. thoughts? @roji @smitpatel '"
21203,437886383,"b""I might try a more sophisticated logic, so that we don't put COALESCE for every sum - i think we only need it for subquery scenarios, but will investigate. Thoughts?"""
21203,437889207,"b'For best solution it would be good to put at translation of sum but there is going to be some refactoring coming in when implementing more group by operation and #20633 may be needed for it.\r\n\r\nI think this is ok compromise for now, it may not be the best solution but avoids wrong results for customers.\r\n'"
21203,437951349,"b""Of a provider translates to different function, wouldn't they just be responsible for applying the same coalscing in their own nullability processor?"""
21203,438284659,"b'yeah, its just harder than it needs to be (do the translation + call base vs rewrite entire visit sql function method) but maybe its fine'"
21203,438286293,"b""Cannot do this. Breaks provider overriding this method.\r\nAlso Should apply to every sum, since once we fix #20633, for nullable Sum on top level won't read the default 0 value back, it will read null back."""
21203,438305982,b'ok will revert to previous version then'
21277,440533102,"b'SqlServerNorthwindMarsEnabledTestStoreFactory, or alternatively SqlServerMarsTestStoreFactory below (for consistency)'"
21264,440365499,b'@bricelam - darc is upgrading this but the package does not publish anymore and causing compilation failure. What should we do?'
21264,440369361,b'@ericstj?'
21264,440369669,"b'Oh wait, I bet we need to add the transport feed'"
21264,440373048,b'Yep.'
21264,440374188,"b""Actually, they started building this package, but there's a bit of clean up discussion at https://github.com/dotnet/runtime/pull/37793. And yes, transport feed needs to be added."""
21264,440390901,b'@JunTaoLuo the runtime PR has been merged. What exactly do we need other than the dotnet5-transport feed?'
21264,440393242,"b'That is, will the package be usable before it contains the .targets file you asked about\xe2\x9d\x94'"
21264,440407449,"b""It should, but I believe sourcelink will be broken until my comment is addressed. Just an FYI, it's not blocking."""
21264,440515070,"b""It's possible that the file is just embedded instead of linked.  Did you check this?"""
21282,441036691,"b'since we add a lot of artificial skip 0, we could recognize this pattern and remove the redundant `WHERE 0 < [t].[row]` from queries'"
21282,441041861,"b""looks like i'm late to the party - filed https://github.com/dotnet/efcore/issues/21290 to track this"""
21197,441057800,"b'We may want to automatically update them in the future. And, IMHO, the only value of Versions.props is so Maestro can update it.'"
21197,441058221,"b""Not needed. Just here to remind us they're not being updated. (and why)"""
20577,409775288,b'@dotnet/efcore We should discuss whether or not we want to take a direct dependency here.'
20577,409853225,b'may be privateassets all would solve our concerns.'
20577,410211348,"b'Maybe, tried that, but then the tests failed'"
20577,410339942,"b""Because the dependency wouldn't flow into test project either. To clear up confusion, if you use privateassets all and use the tool in user application, does it pluralize/singularize correctly? We can hack our way for tests if functionality for user works."""
20577,410350100,"b'I have no idea how to test that, but if someone can tell me how, I can give it a try.'"
20577,410350664,"b'And yes, because the Humanizer dependency was missing. Should I try to add it explicitly to the test project?'"
20577,410353097,b'use src/ef project as console app by running dotnet run. That is what dotnet-ef does through complex mechanism. '
20577,410677886,"b'@smitpatel Sorry, I cannot figure out how to do that - can you provide more detailed steps.\r\nI try to run from with VS with F5, and set the following debug parameters in project properties/Debug:\r\n`dbcontext scaffold ""Data Source=(localdb)\\mssqllocaldb;Intital Catalog=Northwind;Integrated Security=true"" Microsoft.EntityFrameworkCore.SqlServer -o C:\\temp\\test\\ef`\r\n\r\nBut get: Missing required option \'--assembly\'.\r\n\r\nI can run: `dbcontext scaffold --help` and get a useful help message'"
20577,410741967,"b'I have done such testing on command line only. No trust for VS. Alternatively, you should be able to build package with these changes and use the custom build package in a sample app to install EFCore.Tools and use PMC commands to test out in VS.\r\nI will investigate on Monday.'"
20577,410827032,"b'I wish there was a simple way to do this, that sounds exceedingly complicated @bricelam ??'"
20577,410827246,"b'It is not important for me to test in VS, but the command line throws same error!'"
20577,410850669,"b'FYI: I added ""privateAssets all"" and added an explicit reference from the Desing.Test project - that worked.'"
20577,411579408,b'@dotnet/efcore -Should we remove `NullPluralizer`?'
20577,414893968,"b'Remove `PrivateAssets=""All""` this will cause it to fail. The `<DevelopmentDependency>True</DevelopmentDependency>` above will keep this from flowing into user\'s apps.'"
20577,414894197,"b'Can remove once `PrivateAssets=""All""` is removed above.'"
20577,414894773,b'Yes. But we should also add an option (orthogonal to UseDatabaseNames) to skip pluralization.'
20577,415026973,b'Fixed'
20577,415027002,b'Fixed'
20577,425478252,b'Can we use noPluralize from a field here instead? I kind of liked the consistency of Visit methods which takes ModelBuilder and particular element of DatabaseModel.'
20577,425478612,"b'@AndriySvyryd - Why does some XML docs have tab in the summary line at the start and some does not (e.g. UseDatabaseNames above). What is the ""consistent"" way?'"
20577,425487674,b'All multiline tag content should be indented.'
20577,425487899,b'Single line content should be padded by single spaces on both sides'
20577,425488686,"b'Yeah, I think a single field for the model options (as an object, not individually) might make it a lot cleaner.'"
20577,425489047,b'Yuck. VS default disagrees. But I knew I\xe2\x80\x99d get called out on this. I\xe2\x80\x99ll update'
21144,435741476,"b'I needed a way to update SelectExpression, is there better way, or is it fine to open this up a bit? @AndriySvyryd '"
21144,435741735,b'no idea what to do with this @AndriySvyryd '
21144,435742811,"b'feels a bit hacky have that check here. I could have done the converter compensation after null semantics, but that would make things slower. Thoughts?'"
21144,436137211,"b""Can you check what the ctor above does w.r.t container. May be Container is not required to be changed. It wouldn't be update with update method anyway, you can also add private ctor to use in Update method. \r\nThe private set vs no setter -> if during normal translation this value needs to be changed then private set (like how predicate is). If the value change only when creating new SelectExpression rather than mutating current then private ctor rather than setter here."""
21144,436137286,b'internal docs.'
21144,436137503,"b'It does not have SelectExpression, it does not need any processing.'"
21144,436138071,b'The VisitChildren does the same so why do we need to override here?'
21144,436138275,b'Explain why there are private fields in this visitor. That too multiple of them.'
21144,436139210,"b""This check won't be here if you do conversion after this visitor like how SearchCondition one works."""
21144,436142000,"b'i like the private ctor idea, thx'"
21144,436142848,"b'yeah that was my point, would have to put the visitor after null semantics, i.e after we know the parameter values, which increases amount of processing done after cache lookup. Can do that, no problem if we think its worth it.'"
21144,436144471,"b""i only want to make the change if we are inside a predicate and if we are not inside binary comparison itself, so that `x.BoolWithConverter == true` doesn't get translated to `(x.BoolWithConverter == true) == true`. Basically followed the pattern from search condition visitor. Could drop the parentInsidePredicate and just always rewrite bool with converter into == true, but we don't need that in the simple projection case at least."""
21144,436145379,"b'I used SqlExpressionVisitor rather than ExpressionVisitor, so all those methods are abstract in the base'"
21144,436149395,b'Use ExpressionVisitor if only handful of methods needs to override.'
21144,436149610,b'Let me think about it.'
21144,436250923,b'nit: this can use [this](https://github.com/dotnet/runtime/blob/262948a945acd16a6e355e981158e005c66dc2ba/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/Dictionary.cs#L72) copy constructor to avoid dictionary resize'
21144,439121556,b'Add Relational Prefix'
21144,440373235,b'Remove the check.notnull which base performs.'
21144,440373297,b'private field'
21144,440374461,b'There are not dependencies objects for providers. Remove.'
21144,440374689,b'Also you added this but did not use it. :trollface: '
21144,440376951,"b""Let's do a targeted fix here since Cosmos does not have subqueries.\r\nHence there are only scenarios where either the condition itself is just a member access or it is member access on one side with AND/OR. So a private function could recursively traverse than and do necessary.\r\nThere are only few places where condition would appear, WHERE/Conditional."""
21144,440377886,"b""Let's move it after null processor. And align structure of the visitor to how Search condition works in SQL except it would only convert when value converter. At least that would avoid 2 flags."""
21144,440379327,b'I think same thing as what I suggested in Cosmos can be done here too.\r\nAny Sql expression of type bool could be candidate if it is in context of search condition. (Even subquery would be wrapped in ScalarSubqueryExpression)\r\nPlaces where they appear are predicate/Having/Case.Test'
21292,441094946,b'This should be in .Internal.NavigationExtensions'
21292,441097968,"b""@AndriySvyryd It's used by providers."""
21292,441098939,b'.Infrastructure.NavigationExtensions?'
21292,441099801,b'Are you worried about it being too visible? I could make it not an extension method.'
21292,441108163,"b""Yes, it shouldn't show up in `OnModelCreating`"""
21312,441755600,b'Indent the para tags like we do elsewhere.'
21292,441855001,b'`INavigationBase` :trollface: '
21295,441960665,"b'we should avoid expanding projection for cases when its not needed (entire entity projected, no skip/take etc). can be done in the future'"
21295,441977701,b'#21320 #21321'
21210,439222647,"b'```suggestion\r\n            // First, handle non-provider-specific annotations\r\n```'"
21305,441284691,"b""Compile is slow, let's just pass the flag for particular filtered include with assert order?"""
21305,441284940,"b'was thinking about that, not too much work?'"
21305,441285102,b'(for us in the future ;P )'
21305,441285547,"b'So when I added Expression<Func<>> in base, I discussed with @AndriySvyryd, runtime compile is not a cheap operation, if we can get away with it just by passing a bool flag, we should.'"
21305,442608170,b'```suggestion\r\n                var assertOrder = false;\r\n```'
21344,443066732,b'Why not `CoreStrings`?'
21344,443067244,b'Warning as error. I could not even find CoreString.Method in designer.cs'
21344,443068028,"b'It is not there.\r\nThere is LoggingDefinitions.LogInvalidIncludePath which returns EventDefinitionsBase\r\nCoreResources.LogInvalidIncludePath which takes IDiagnosticsLogger and returns EventDefinition<object, object>'"
21344,443068157,"b'`CoreResources.LogInvalidIncludePath(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(""Reports.Foo"", ""Foo"")`'"
21344,443068663,"b'<img src=""https://goodyfeed.com/wp-content/uploads/2019/03/just-mindblown.gif"" />'"
20568,405283071,b'add case for filtered include also. This could be a good way to test the include path merge - apply two different filters on collection reached in different ways - we should detect conflict and throw error'
20568,405321420,"b""Haven't added code to throw for conflict. Will add."""
20568,405778700,"b'filtered include does that already, but I guess we need that anyway for other scenarios'"
20568,405779326,b'Merge is different from what filtered include does.'
20568,405858106,b'```suggestion\r\n                        && embeddableNavigation.IsEmbedded()\r\n```'
20568,405859526,b'resx'
20568,405860105,b'message'
20568,442577857,b'#21332'
20568,443040624,b'Remove this exception message'
20568,443072762,b'Move to Infrastructure and make it a proper extension method'
20568,443073083,b'I followed based on the discussion and just moved due to type change.\r\nhttps://github.com/dotnet/efcore/pull/21292#discussion_r441094946\r\n\r\nWhat is the final decision here?'
20568,443073382,b'We are going to discuss this each time this method is changed \xf0\x9f\x98\x84 '
20568,443074355,"b'<img src=""https://media.tenor.co/images/596c4405dc1e0dc9616545551b239529/tenor.gif"" />'"
20568,443137202,"b""I'm fine with whatever it turns into, as long as it's not duplicating the code."""
21329,442979447,"b""I think we decided that it's ok to remove this here, but not in the snapshot"""
21329,442998371,b'It would be more performant to pass in the enumerable and have `RemoveIgnoredAnnotations` return a dictionary'
21329,443016390,"b""This one can be moved to `CoreAnnotationNames` now that it's pubternal"""
21329,443017760,"b""Isn't this a breaking change?"""
21329,443019437,b'Why is this public?'
21329,443019529,"b""The converter shouldn't be called for scaffolding, this isn't an issue for our providers, but might be for MySql"""
21329,443029647,"b'There are several in this PR, since the actual design is changing quite a bit. But this is in the design assembly, where we usually have lower standards. If we feel like we need to maintain backwards compat here somehow I can look into bringing it back.'"
21329,443029806,b'The idea is to allow providers to generate arbitrary data annotation attributes for annotations - this is the hook for that.'
21329,443033891,"b'Ah sorry, you mean why not protected. Yeah, this and all the previously public GenerateFluentApi should be protected - though that would be a small breaking change for the latter (which I think we should do).'"
21329,443043211,"b'Then it contradicts \r\n\r\n> The AnnotationCodeGenerator base class exposes the same one-by-one API as before, so this is totally backwards compatible (unless the interface is implemented directly).\r\n\r\nI am fine either if we want to break/be back-compat/obsolete but it should be consistent.'"
21329,443043820,b'I mean why are we adding API for individual annotation when we are moving towards framework of all annotations together. '
21329,443046268,"b""Most annotations still have a single fluent API (or data annotation), so this is a trivial way for providers to implement that. I'd only expect providers to override the multi-annotation API (GenerateFluentApiCalls) when multiple annotations need to go into the same fluent API call, as with identity increment/seed. This also preserves compatibility with the existing API to a large extent."""
21329,443046588,"b""I think breaking changes in Design aren't the same as in explicitly provider-facing types such as AnnotationCodeGenerator."""
21329,443120945,"b'Changing this to a FilterIgnoredAnnotations which just gets and returns an `IEnumerable<IAnnotation>`, the dictionary can be constructed outside when needed (this improves MigrationsCodeGenerator).'"
21329,443155600,"b""Is this just a null check? I'd prefer `is int`"""
21329,443155832,"b'I prefer `RemoveAnnotationsHandledByConventions`, we can discuss in the API review'"
21329,443156556,"b""Will change. Resharper/Rider complains about `is int` because it's ambiguous if you're only checking for nulls or for an actual type. In any case C# 9 will be introducing the `is not null` pattern, we can revisit then."""
21329,443156984,"b'Changed, no strong feelings (I kind of like ""conventional"" as a simpler adjective for ""by convention"").'"
21329,443157104,"b""The difference is timing: `RemoveConventionalAnnotations` implies that the annotations were added by conventions, which isn't true, at this point no conventions have been run."""
21329,443688982,b'Missing `With`?'
21388,444533758,b'Remove blank line'
21388,444534547,b'\xf0\x9f\x98\xa2 '
21388,444535532,b'How do you determine that they are built-in?'
21388,444535969,b'That is coming in https://github.com/dotnet/efcore/issues/17268 (submitting PR for that once this is approved).\r\n\r\nJust future-proof documentation. \xf0\x9f\x98\x84 '
21388,444537504,b'I can improve this in next PR by referring the IsBuiltIn property too.'
21391,444546624,b'langword'
21391,444548627,b'You also need to run this convention when `IsBuiltIn` value is changed (from Fluent API) and add a test'
21391,444551279,b'Value can change during IModelFinalizingConvention?'
21391,444555604,"b""Technically, yes, by a different convention. But we can live with this since we don't have user conventions yet."""
21391,444558894,"b'- `IModelAnnotationChangedConvention` would be the one which needs to run?, or\r\n- Should I file a separate issue?\r\n- Leave it as is? (and it will be cleaned up automatically when #20182 is fixed with other way)'"
21391,444559271,b'Leave it as is'
21394,444599549,b'```suggestion\r\n    public abstract class TPTRelationalInheritanceQueryFixture : InheritanceQueryFixtureBase\r\n```'
21394,444600247,b'But we also have https://github.com/dotnet/efcore/blob/master/test/EFCore.Relational.Specification.Tests/Query/InheritanceRelationalFixture.cs right now (which is getting renamed in this PR).\r\nSo do Inheritance comes first or Relational?'
21394,444600321,b'Also https://github.com/dotnet/efcore/tree/master/test/EFCore.Relational.Specification.Tests/Query'
21394,444602757,b'TPTInheritanceQueryFixture.\r\nRelational is implied'
21389,444673554,"b""use RequiresBrackets helper, so that we don't add parentheses for simple expressions like negate(column) or negate(constant)"""
21389,444674242,"b'also add tests for negate on a column, as well as negate on like expression'"
21389,445082248,"b""Thank you for the valuable feedback; I have implemented your suggestions in my latest commits. Please let me know if there's anything I missed or can improve upon."""
21405,445144469,b'Rename `Customer_WithResourceId` too?'
21412,445506521,"b'Talking about ""returning a new query"" may be a bit confusing to users... How about something like:\r\n\r\n```suggestion\r\n        ///         Configures the query so that collections in the query results will be loaded in single database query.\r\n```\r\n\r\n(same remark for other queryable extensions, e.g. AsTracking)'"
21412,445508231,"b'It may be better to use stronger language. Unless the user specifically disabled SQL Server Read Committed Snapshot Isolation (RCSI) (or started a read uncommitted transaction), this should always ensure consistency. How about:\r\n\r\n```suggestion\r\n        ///         This behavior generally guarantees result consistency in the face of concurrent updates (but details may very based on the database and transaction isolation level in use).\r\n```'"
21412,445509085,"b'```suggestion\r\n        ///         However, this can cause performance issues when the query loads multiple related collections.\r\n```'"
21412,445509886,"b'```suggestion\r\n        ///         This behavior can significantly improve performance when the query loads multiple collections. However, since separate queries are used, this can result in inconsistent results when concurrent updates occur.\r\n```'"
21412,445510406,b'Same comment as above for AsSingleQuery etc.'
21412,445511660,b'We use terminology returns because it returns a new Expression tree.'
21412,445511939,"b""I don't understand it, so I will just update to whatever you say. \xf0\x9f\x98\x89 """
21412,445519715,"b""I think what matters here in the docs is what users need to know... From a user perspective there aren't two queries here, just one being marked/configured for query splitting..."""
21412,445521355,"b'The actual details are unfortunately database-dependent... However, tl;dr:\r\n* When EF Core creates a SQL Server database, it sets the RCSI mode which makes single queries consistent. So everything is good unless you explicitly do stuff to opt out of it (disable RCSI, or start an uncommitted read transaction which is pure chaos)\r\n* For PG and other MVCC-only databases (I think Oracle is in this bag) a single query is always consistent (because always operates on a point-in-time snapshot)\r\n\r\nNot sure about Sqlite/MySQL. But the general advice is that single query should be safe by default.'"
21412,445535717,"b'To be consistent with rest of Queryable terminology,\r\nHow about this?\r\n```suggestion\r\n        ///         Returns a new query which is configured to load the collections in the query results in single database query.\r\n```'"
21412,445542301,"b""I'm fine with it either way - including with the original, I just think we should document based on what users need to know, that's all. But OK to merge as you want."""
21412,445883032,b'```suggestion\r\n        ///         Returns a new query which is configured to load the collections in the query results in a single database query.\r\n```'
21412,445883140,b'```suggestion\r\n        ///         (but details may vary based on the database and transaction isolation level in use).\r\n```'
21329,446262097,"b""Am surprised the API consistency tests didn't catch this. Will fix and look into the tests too."""
21255,439779164,"b'This would register a pool with `standalone` set to `true`, which can cause a context to be returned to the pool twice when normal pooling is used.\r\n\r\nInstead add `standalone` to `Rent()` and flow it through to the `DbContext` instead of `returnToPool` and inline the lambda code.'"
21255,439779217,b'After `standalone` is removed this can be registered without a lambda'
21255,439909862,b'Why do we need to store it here as opposed to the DbContext?'
21255,440440994,b'@AndriySvyryd Bad smell; too much coupling. New version up that moves more of this into the pool and avoids a flag by adding a different pool implementation to D.I.'
21255,440443706,"b""This should be registered as `StandaloneDbContextPool<TContext>` as that's what `PooledDbContextFactory` specifically depends on."""
21255,440452358,b'As an alternative to having 2 disjoint pools in DI you can add the normal pool as `IDbContextPool` and add `IDbContextPool IDbContextPool.StandAlonePool { get; }` for the factory. This one could be implemented as a shim in a private class in `DbContextPool`'
21255,440463413,"b""I haven't done this, but I did change the registration as suggested. The services used for pooling seem to be a somewhat tangled dependency as it is. I can give what you're suggesting a try, but I'm not sure it will be better."""
21255,440466037,b'I think it would be better for two reasons:\r\n\r\n1. A single pool for both types of access is more efficient\r\n2. A single service registered as an interface is easier to replace for a user'
21255,440467934,"b""Not sure why a single pool is more efficient. Unless you're suggesting that they would both be in use at the same time.\r\n\r\nAgreed, but 2 isn't currently possible for the non-standalone case. It has so far always been registered as a concrete type. I tried earlier to change this to an interface registration and it started getting gnarly. """
21255,440474572,"b""Yes, I'm suggesting that both pool access types can be used at the same time and having a single pool for both would be more efficient for heterogeneous workloads.\r\n\r\nOk, we can punt on 2. for now."""
21255,440475686,b'@AndriySvyryd Is that a realistic scenario? For the same context type? (Since the pool is generic by context type.)'
21255,440483178,"b""I can think of two scenarios:\r\n\r\n1. An app contains a service that always needs a context and another service that only needs a context occasionally (e.g. for initialization) and therefore uses a factory to create it on demand.\r\n2. An app contains a service that always needs a context, but occasionally needs to create additional instances (e.g. for custom retries or to deal with concurrency conflicts)\r\n\r\nBoth of these can be implemented with just a factory if using a single pool is important, but I don't think we should dismiss the more idiomatic way of resolving a context from DI just because the user needs to use a factory.\r\n\r\n@JeremyLikness @roji Thoughts?"""
21255,440484387,"b'@AndriySvyryd I should at least add tests for calling AddDbContext and AddDbContextPool for the same context type. I was considering this a negative case, but we should test it anyway.'"
21255,440485443,"b'>  I should at least add tests for calling AddDbContext and AddDbContextPool for the same context type. I was considering this a negative case, but we should test it anyway.\r\n\r\nYes, but that would still be a negative case.\r\n\r\nI am talking about `AddDbContextPool` and `AddPooledDbContextFactory` for the same context type.'"
21255,440511630,"b'I meant AddPooledDbContextFactory. :-)\r\n\r\nAnyway, I agree. Might as well make it work.'"
21431,446586217,b'Move this one line up'
21431,446673696,b'@AndriySvyryd Scoped lease is registered in D.I. here and is IDisposable. How would we handle that if it as a struct?'
21431,446674274,"b'It should still work, but it will cause boxing. Ok then an alternative approach is to create a pool for the leases :smile: '"
21431,446675808,"b""I think it's fine for the scoped lease to be an object, since the whole point is for it to live for the length of the D.I. scope. I'll look into seeing if using the standalone lease can be made not to allocate. It would be good to reduce allocations when getting a context from a factory pool."""
21431,446686972,b'Move to the end to match the Async method'
21431,446687142,"b""The async is only different to avoid an await. Does it matter that the sync isn't the same?"""
21431,446691608,"b""Mostly to make it easier to keep in-sync (pun intended)\r\nThere might be a potential race condition, but just reordering this won't avoid it."""
21454,447149574,b'Any reason the sync and async versions differ? Would be better to align them...'
21454,447151773,b'how are they differing?'
21454,447163249,"b'\r\n\r\nIn various ways... the sync version disposes the main reader right away, the async copies it to a local and disposes at the end, the variable names differ...\r\n'"
21454,447164154,b'You made it sound like there is functional difference.'
21454,447182176,b'Updated.'
21460,447203161,"b""You shouldn't need to remove the existing one"""
21460,447203878,b'This should be done in a convention'
21460,447227306,b'You should only filter out the FKs involved in skip navs'
21460,447234210,"b""It would be best to not have to modify existing tests, but negative cases like this one are ok to change, since they didn't work anyway."""
21456,447140444,b'```suggestion\r\n                    return (_relationalCompiledQueryCacheKey.GetHashCode() * 3) ^ _multipleActiveResultSetsEnabled.GetHashCode();\r\n```\r\n\r\n3 is enough for a bool'
21456,447143739,b'Why not just use HashCode.Combine?'
21456,447144263,b'Any reason to copy to the local variable? This could just be a one-line expression-bodied method'
21456,447145883,"b""So this means we parse the connection string for each SqlServerConnection, which is scoped - that's not very good for perf...\r\n\r\nIt may be worth having a dictionary mapping connection strings to whether they have MARS or not - a quick benchmark should show it's worth it."""
21456,447152681,b'Existing code did it. I did not question the intention. \xf0\x9f\x98\x89 \r\n\r\nI am fine to change it if we think it is safe to do.\r\n\r\n@AndriySvyryd @ajcvickers - Thoughts?'
21456,447154973,"b""This means we parse it only first time and any subsequent time when you change connection string or connection manually. Also it is lazily initialized so if query is not used it won't be parsed. Overall reducing the time when this code path is hit.\r\n\r\nIn general we are not catching anything when connection string is changed so I suspect that there can be various pieces which can be optimized if we want to catch older connection string. This is just adding 1 more to umbrella.\r\n\r\nFeel free to run benchmarks, if it significant perf difference then I am also ok adding a dictionary mapping.\r\n\r\nWhat does @AndriySvyryd think?"""
21456,447155499,b'Picked code from 2.2 It did not have HashCode.Combine back then. I will update.'
21456,447157231,b'It was presumably so we could check for null without evaluating the property twice.'
21456,447161810,"b""> This means we parse it only first time and any subsequent time when you change connection string or connection manually. Also it is lazily initialized so if query is not used it won't be parsed. Overall reducing the time when this code path is hit.\r\n\r\nBut this is done for any (non-pooled) DbContext which executes a query, right? If so, I think that's not so good (DbConnectionStringBuilder is surprisingly heavy). @AndriySvyryd?"""
21456,447184405,"b""I wasn't sure if compiler would evaluate it twice if used in coalesce operation so reverted the change. It was unrelated to this PR anyway."""
21456,447200308,b'Memoizing in a CuncurrentDictionary sounds reasonable here as it will be needed on almost every context instance. But context pooling would mitigate this.'
21456,447203743,b'Updated.'
21456,447214445,b'Can use [GetOrAdd](https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.getoradd?view=netcore-3.1#System_Collections_Concurrent_ConcurrentDictionary_2_GetOrAdd__0_System_Func__0__1__) for terser code'
21457,448066462,"b'```suggestion\r\n        ///     Creates a new instance of the <see cref=""InExpression"" /> class which represents a \'<paramref name=""item"" /> IN subquery\' expression.\r\n```\r\n\r\nSame for other overloads'"
21476,448104653,b'this is the part that was added'
21473,448017304,b'No function column type?'
21473,448018087,b'If function does not have parameter then do we need custom translation?'
21473,448018805,b'do we need to set the function name also?'
21473,448020957,"b""```suggestion\r\n    <value>The entity type '{entityType}' is mapped to the DbFunction named '{functionName}' with parameters '{parameters}'. Ensure that mapped function doesn't have any parameters.</value>\r\n```\r\n?"""
21473,448028156,b'Will be done in https://github.com/dotnet/efcore/issues/21415'
21473,448028664,b'We will when navigations are mapped to them https://github.com/dotnet/efcore/issues/4319. This avoids an API breaking change later'
21473,448029043,"b'You mean with `ToFunction`? No, this convention handles functions mapped to entity types, not the other way around'"
21473,448029419,"b""No, `parameters` is in form of `{'id', 'range'}`"""
21473,448031455,b'There might be multiple TVFs returning the same entity type.'
21473,449321337,"b'Are we still having HasTranslation?\r\nAt this point it could be future break either way, we may not actually allow it.'"
21473,449322645,"b""Ok, I'll move it back to `DbFunctionBuilder`"""
21473,449333068,b'Would IsBuiltIn flag be valuable here?'
21473,449333163,b'Since TVF will map to user defined functions (always)'
21473,449333970,"b'Not always, @bricelam was talking about some built-in SqLite TVFs that he wanted to map. But we could make this a metadata API only thing'"
21473,449337360,"b""I wasn't sure hence I put in bracket. If we know that there is some cases where this is useful, it is ok to keep it. If not, me conservatively think about adding API later as needed. This would also show up in API review we can discuss with team then, so you can do whichever way you like to merge this PR."""
21501,449323675,b'Put storeName on the fixture so that TPT one can change it.'
21474,448056900,b'Perhaps this would look better in a single separate line'
21474,448061005,"b'Should return the same result, but less code\r\n```suggestion\r\n            table ??= entityType.GetViewOrTableMappings().FirstOrDefault()?.Table;\r\n```'"
21474,448061437,b'Can you put in suggestion how would you like the SQL to be printed? I will file a new issue as it will affect a lot of baselines and should be done in separate PR.'
21474,448061753,b'This is a provider exposed public API break. I can put the ctor back with obsolete but I cannot make it work so it would be throwing exception in method body.'
21474,448061911,b'TODO: Add exception message.'
21474,448062530,"b'```suggestion\r\n                @""SELECT [a].[Species], [a].[CountryId], [a].[Name], [b].[EagleId], [b].[IsFlightless], [e].[Group], [k].[FoundOn],\r\nCASE WHEN [e].[Species] IS NOT NULL THEN CAST(1 AS bit) ELSE CAST(0 AS bit) END AS [IsEagle],\r\nCASE WHEN [k].[Species] IS NOT NULL THEN CAST(1 AS bit) ELSE CAST(0 AS bit) END AS [IsKiwi]\r\n```'"
21474,448063790,b'```suggestion\r\n            if ((entityType.BaseType == null && !entityType.GetDirectlyDerivedTypes().Any())\r\n```'
21474,448064290,b'Technically you need to take schema into account as well'
21474,448066533,b'I moved to comparison over ITableBase directly. Seems to be working.'
21474,448066648,b'Filed #21475 '
21474,449227168,b'I added API back with NotSupportedException and obsolete error attribute.'
21474,449361071,"b""Also use Schema and don't ignore case"""
21474,449361147,b'```suggestion\r\n                    // Fetch the table for the type which is defining the navigation since dependent would be in that table\r\n```'
21474,449682747,b'If you are going to keep `GetColumnName()` you might need to add code for views'
21474,449684097,"b'```suggestion\r\n                return new ColumnExpression(property, column, tableExpression, nullable);\r\n```'"
21474,449685859,b'What should be used here?\r\nThere should always be column passed if there is mapping. GetColumnName is only used in scenario when there is no mapping.\r\nRelated: What should be the mappings used for `FromSql` & TVF methods (not the query root mapped to the function)?'
21474,449689160,"b""FromSql should use the same mapping as a normal query. Method TVF mappings are also returned by `GetFunctionMappings`, but with `IsDefaultFunctionMapping` set to false.\r\nWould there be any other situations where column is null?\r\nBtw, you don't need to fix this in this PR"""
21474,449691738,b'Filed https://github.com/dotnet/efcore/issues/21511'
21474,449691755,b'You you **should** do it in https://github.com/dotnet/efcore/pull/21507 \xf0\x9f\x98\x84 '
21474,449692036,b'I would but I would like to understand more about which column mappings to use when no table(base)mappings are used from entity type. It also has overlap with #21508'
21507,449692873,"b'It might have mappings to TVF methods, but no default mapping and also be backed by a table'"
21507,449694066,"b'I first checked GetFunctionName, I can find IDbFunction from there but to use IStoreFunction, I went mapping route.\r\nThe scenario you describe is basically, entity type is being used as result of a method based TVF but also backed by a table/view, in which case we need to use table/view for query root.\r\nShould I use GetFunctionName to check if the entity type is mapped to function or check for FunctionMapping with IsDefaultMapping if there is any, use it?'"
21507,449694468,b'The latter'
21507,449703382,b'Updated.\r\nAlso added a regression test where entity type is return type of a TVF and mapped to a view in the model.'
21517,449813445,"b'Had to change this test since, it was bringing entity two from 2 different query parts where state manager was fixing it up in tracked query and that would make result of filtered include ""incorrect""'"
21473,450471494,"b'Not useful in SQLite--There is no distinction between UDFs and built-in functions. (In fact, users can override built-in functions)'"
21473,450472971,"b'But also, TVFs aren\'t functions in SQLite. \xf0\x9f\x98\x8f It\'s just syntactic sugar for a WHERE clause over a ""virtual"" (i.e. code-backed) table.'"
21473,450480219,b'For us `IsBuiltIn` just indicates that the function is not contained in any schema. Is this useful in any provider other than SqlServer?'
19355,359625405,b'HasDefiningNavigation has nothing to do with this'
19355,359625645,"b'Only the ownership navigations should be excluded, other ones can still be ignored'"
19355,359625818,b'Does weak type have eager loaded navigations? And do we ignore it or not?\r\n\r\nI copied these conditions based on what we expand in nav expansion.'
19355,359626206,"b""Non-owned weak entity types don't get eager loaded navigations by convention"""
21532,450597330,"b""Usually we don't use PRs to skip tests, especially if they are closed"""
21532,450598570,b'Copy over from somewhere else. Let me correct it.'
21532,450600602,b'PR : https://github.com/dotnet/efcore/pull/19617\r\n\r\nIssue #18844\r\n\r\nErroneous skip came in https://github.com/dotnet/efcore/pull/19774'
21534,450596725,b'Can this be more specific?'
21534,450598670,"b'I copied over from non-TPT M2M thing. I believe underlying sqlite3 had some issue, let me see if I can track it down.'"
21534,450604520,b'Filed https://github.com/dotnet/efcore/issues/21541'
21484,448595821,b'```suggestion\r\n            if (existingAssociationEntityType != null\r\n                && existingAssociationEntityType.ClrType != joinEntity)\r\n```'
21484,448596272,b'Same below'
21484,448596600,b'```suggestion\r\n                || propertyBase.IsShadowProperty())\r\n```'
21484,448597142,b'Why was this removed?'
21484,448597520,b'```suggestion\r\n    public class ManyToManyAssociationEntityTypeConvention : ISkipNavigationAddedConvention\r\n```'
21484,448601528,b'Why not doing it for self-ref?'
21484,448602120,b'```suggestion\r\n            var matchingSkipNavigation = skipNavigation.Inverse;\r\n```'
21484,448604842,"b""I'm not sure why it was in there. If you look at all the other `OnXyzRemoved()` methods they all have the same `if` but without the `DebugAssert`. In practice this happens when you add a `SkipNavigation` in a delayed batch of conventions, and then remove that `SkipNavigation` before the batch has had a chance to run. This happens now because if you are attempting to create an association entity but some portion of the set up is not yet complete and the attempt fails then we roll back the `SkipNavigation`s as well (in the cases where we created them)."""
21484,448607232,"b'```suggestion\r\n            Check.NotNull(skipNavigationBuilder, nameof(skipNavigationBuilder));\r\n```'"
21484,448607420,b'Wrap in `if(existingNavigation == null)`'
21484,448608412,b'Also remove the skip navigations'
21484,448609367,"b""Couple of questions:\r\n1. Is this to catch if you're calling `UsingEntity()` twice? I.e. reconfiguring the same join entity type?\r\n2. I think you're assuming that CLR type uniquely identifies the join entity type? An automatic association entity type will have CLR type `Dictionary<string, object>` and is a shared-type entity type. If you pass in a different shared-type Entity Type it would have the same CLR type but would be a different join entity type. In that case you _would_ want to remove the previous automatic one. ~(If you pass in a non-shared-type one, then the only time this would not remove would be if you are reconfiguring the same Join Entity - hence Q1.)~ (If you pass in a non-shared-type one then it will not remove anyway because of the very first test in `RemoveAssociationEntityIfAutomaticallyCreated`)."""
21484,448610012,b'Consider extracting the body of this foreach as a method to remove duplication from above'
21484,448612466,"b'If I have 2 collection navigations pointing to an Entity Type from that same Entity Type, my expectation would be two 1:N navigations to self rather than one N:N. I guess I thought that it was ambiguous, and in ambiguous cases we do nothing and let the user decide.'"
21484,448612849,"b""I don't think the Inverse is set yet - we set it as part of matching them up."""
21484,448613598,"b""That's what passing `true` does. I could make it `removeSkipNavigations: true` to make it more clear."""
21484,448614410,"b""1. It's to allow to configure the entity type created automatically.\r\n2. This method takes a `Type`, not `IEntityType`, so there shouldn't be confusion."""
21484,448614725,b'We should discuss with the team'
21484,448617102,"b'Ok, then move the `HasInverse` call from `Using` to `WithMany`. The user specified how the navigations are matched and we should preserve that.'"
21484,448619665,"b'Yes, that would help'"
21484,448623090,b'Any m2m navigation pair is potentially 2 different 1:N relationships.'
21484,448627713,b'In what case would this actually remove the skip navigations?'
21484,448631806,b'Filed https://github.com/dotnet/efcore/issues/21486 to move this to the builder'
21484,448645507,"b""The only time `existingAssociationEntityType.ClrType != joinEntity` would be `false` would be if you passed `Dictionary<string, object>` as `joinEntity` i.e. the entity is a shared-type entity type (STET). You're saying that means that you want to configure the existing automatic entity type.\r\n\r\nBut:\r\n1. I don't think you want to configure the left and right FKs for an automatic join entity - the automatic join entity was created solely to have those FKs on it - so there's nothing to configure them to except what they're already configured to be. And I certainly don't want to be forced to construct those configurations just so that I can use the override with `configureAssociation`. I am planning to look into a version of `UsingEntity` which only provides `configureAssociation` to e.g. allow you to rename the join table, but that was going to be another PR.\r\n2. Knowing that the CLR type is `Dictionary<string, object>` is not the same as knowing that the join entity is the same. Many STETs will have CLR type `Dictionary<string, object>`. What if I want to replace the automatic join entity with a different STET? In that case I _would_ need to configure the left and right FKs but I also want to remove the old automatically-created entity type and use my new one instead. To do that I would need new API to pass in enough information (either as `IEntityType` or entity type name) to uniquely identify the join entity type.\r\n\r\nSo my suggestion would be that if the `Type` passed in is one of the model's shared-types then we throw an exception here and say you need to use different API."""
21484,448646580,"b""That should work. I'll give it a try,"""
21484,448662869,"b""1. I also want to configure the FK names\r\n2. Property bag entity types only differ based on their configuration, so there's no benefit in removing the automatically created one to replace it with a structurally identical one.\r\n\r\nI don't mind having another overload with less parameters, but this one shouldn't do unnecessary work."""
21484,448667503,"b""Try debugging e.g. the test `Many_to_many_join_table_stored_in_snapshot`. In that case, this situation occurs when a 2nd entity type has been pulled in to the model because the 1st entity type references it, but `KeyDiscoveryConvention` has not yet run on the 2nd entity type - so it doesn't yet have a PK. Then the FK that uses that PK cannot be set up, `AssociationEntity()` returns `null` and we need to remove the skip navs.\r\n\r\nOf course `KeyDiscoveryConvention` does run on the 2nd entity type later, and this all gets resolved after that."""
21484,448668434,"b'Ok, so we can remove this from here and let the association convention create it when it becomes possible'"
21484,448677300,b'```suggestion\r\n                var skipNavigation = fk.GetReferencingSkipNavigations().FirstOrDefault();\r\n```'
21484,448680752,b'We should discuss both of these with the team'
21484,448681906,b'We should throw for any configuration source. Usually we noop only when the configuration cannot be applied at the given configuration source but would work with explicit.'
21484,448686534,b'Sure.'
21484,448686979,b'I thought you said no throwing outside of ModelFinalizing because we want users to be able to go back and fix it using fluent API?'
21484,448689403,b'Agree we should discuss with the team.'
21484,448695468,"b""I'd like to throw for now. I agree you might want to configure the FKs, but `configureRight` and `configureLeft` don't give you an existing FK and allow you to configure it, instead they give you the `EntityTypeBuilder` and expect you to _create_ the FK (which will then be assigned to the SkipNav). I think we need new API for configuring an automatically-created association entity type and its FKs, and as I say I intended that to be a different PR."""
21484,448696075,"b""Yes, and we shouldn't call this from a convention if this is going to throw, you can add `CanHaveAssociationEntity` here or `IsCompatible` on `SkipNavigation` if necessary."""
21484,448696635,"b'Sure, we can throw for now'"
21484,448698190,"b'@AndriySvyryd For that purpose it will be cleaner to expose `_sharedEntityClrTypes` as e.g. `Model.SharedEntityClrTypes`. Any objection? I can do it without that, but the code is ugly:\r\n```C#\r\n            if (model.GetEntityTypes().FirstOrDefault(e => e.HasSharedClrType && joinEntity == e.ClrType) != null)\r\n            {\r\n                throw new InvalidOperationException(""..."");\r\n            }\r\n```\r\n\r\nI\'d prefer:\r\n```C#\r\n            if (model.SharedEntityClrTypes.Contains(joinEntity))\r\n            {\r\n                throw new InvalidOperationException(""..."");\r\n            }\r\n```'"
21484,448701754,"b'Yes, you can add `IConventionModel.IsShared([NotNull] Type clrType)`'"
21484,448702754,"b""I don't think that works. This call knows that it specifically created the skip navigations and so it is safe and correct to remove them if the attempt to create the association entity fails. But `ManyToManyAssociationEntityTypeConvention` does not know that. It just knows that some skipNavs were created before it was called - it doesn't know how. I think the convention that creates the skipNavs should be responsible for removing them if necessary."""
21484,448702778,b'This should be done in the ManyToMany or KeyDiscovery convention to also cover entity types added by `UsingEntity`'
21484,448703900,"b'Let the builder figure out the details:\r\n```suggestion\r\n                .HasRelationship(principalEntityType, configurationSource)\r\n```'"
21484,448704046,b'Also configure the resulting FK as non-unique'
21484,448704378,b'The ManyToMany convention calls this code. But that convention is only for automatic association entity types. If you are configuring your own join entity using `UsingEntity()` then you need to make sure that the join entity has a PK (as you do currently).\r\n\r\nNot sure what you mean about KeyDiscovery?'
21484,448704662,b'Can be simplified due to short-circuiting\r\n```suggestion\r\n                                || Metadata.Inverse.AssociationEntityType.IsAutomaticallyCreatedAssociationEntityType\r\n```'
21484,448705755,"b""This should be done in `InternalSkipNavigationBuilder`, metadata API shouldn't have side effects (apart from conventions)"""
21484,448706362,b'We should check `Inverse` instead. It should be set before calling this.'
21484,448706778,"b""What I am saying is that we shouldn't try to remove the skip navigations. Just create the association entity type if possible and let it fail in model validation if not."""
21484,448707074,"b""`KeyDiscoveryConvention` can detect this case and configure the PK, so the user doesn't have to"""
21484,448720111,b'We never call this with `ConfigurationSource.Explicit` (except in the tests for that purpose). This was just in case someone called this explicitly themselves.'
21484,448721693,"b""If I do that ApiConsistency requires me to pass a `bool fromDataAnnotation` parameter as well, that I neither want nor need. And if I did try to do that I think I'd need to set up a `ConfigurationSource` for each shared type and all the code to manage that. So for now just doing it on `Model` and not `IConventionModel`."""
21484,448735454,b'You can override ApiConsistency by adding this method to `ApiConsistencyFixture.MetadataMethodExceptions`'
21484,449112252,"b""In this code I know what the PK is - it comes out naturally from creating the two FKs. So I'd prefer to set it right there. If we want to change `KeyDiscoveryConvention` to set PKs for non-automatic join entities let's do that in a separate PR."""
21484,449124403,"b""I'd rather call the specific one - I know what properties I want to use, I know what I want the principal key to be - I'd rather call that and if it errors I know what the problem is rather than having the other API take it's best guess and possibly fail, or even worse succeed but set the wrong properties/key.\r\n\r\nIs the purpose of setting FK to non-unique to update its `ConfigurationSource`? Otherwise I think it's would be non-unique by default."""
21484,449125955,"b""But I don't need it on `IConventionModel`, only on `Model`. Is there a different reason to expose it publicly?"""
21484,449159597,b'It seems like a generally useful method'
21484,449163874,"b'You are just creating the properties to use and we already have a pattern for how they are created, we don\'t need to duplicate the code. There are no ""wrong"" properties/key here\r\nThe other overload will use the primary key if it exists and create a temporary one if it doesn\'t, it will only return `null` if the principal entity type is configured as keyless.\r\n\r\n> Is the purpose of setting FK to non-unique to update its ConfigurationSource? Otherwise I think it\'s would be non-unique by default.\r\n\r\nYes'"
21484,449164523,b'You can file a new issue to remove this code and handle it in `KeyDiscoveryConvention`'
21484,449180491,"b'As I say - I do not want to remove this code. I have the properties, I know that I want to set the PK. I do not need or want `KeyDiscoveryConvention` to do it for me - it is part of the job of _this_ code to do that. The user need do nothing.\r\n\r\nIf we want to do the above for **non**-automatically created association entities that would be a separate PR.'"
21484,449187015,"b""P.S. If naming this method `AutomaticallyCreatedAssociationEntity()` or `CreateAutomaticAssociationEntity()` would make it clearer then I'm happy to do that. It is used _only_ for automatic creation and not for manual creation. """
21484,449188507,"b'If `KeyDiscoveryConvention` handles it for the explicit association entity type then it can handle it for this, therefore this code would become redundant.\r\n\r\nThe only job of this method should be creating the association entity type. We can even move the creation of the foreign keys for skip navigations to a convention'"
21484,449218145,"b""Wouldn't exposing the list of shared types be more useful? Then not only could you do `Contains()` but also iterate over the known list."""
21484,449220717,"b""One would need to know whether a type is used in a STET before creating an entity type. I can't think of a useful scenario for a list of all types used in STETs"""
21484,449235699,"b'I\'m afraid I disagree. I don\'t think `KeyDiscoveryConvention` should do what you\'re suggesting. It doesn\'t currently and there\'s been no call for it AFAIK. We just let the user decide whether or not they want to add a PK to their manually-created association entity. If they do, they add it. If they don\'t we don\'t create one. That seems perfectly fine to me. If you\'d like to do that then please raise a bug and we can discuss, but at the moment my vote would be against.\r\n\r\nThe purpose of this code was just to be a central place to do what both `ManyToManyAssociationEntityTypeConvention` and `RelationshipDiscoveryConvention` need doing. That includes setting up a PK. It was not intended to supercede the manual (fluent API) way of creating association entity types, because that code needs to ask the user ""what entity type shall I use?"" and ""what foreign keys do I set up?"" whereas I already know all of that because I\'m creating them. I _know_ I want to create a PK in both those cases and I know the properties I want to use. I don\'t see any need to wait for a different convention to do it for me.\r\n\r\nBy calling this method `AssociationEntity` have I confused you into thinking that this API is for all association entities, manual or automatic? I was just trying to find a short name that fit in with the rest of the `InternalModelBuilder` methods. But I never intended that it would apply for manual association entities and I\'m happy to call it something else or move it somewhere else if that makes it clearer.'"
21484,449239932,"b""I'll do the non-unique thing.\r\n\r\nThe primary key comment is moot - I check that the PK exists (I thought it would error if it didn't exist but it doesn't matter). The real difference is in the naming of the FK properties - which I'm happy to change if the team decides they don't like the naming approach I suggested."""
21484,449241280,"b""Filed #21500\r\n\r\n> If they do, they add it. If they don't we don't create one. \r\n\r\nYou can say the same for most of our conventions. We have them to avoid forcing users to write repetitive code.\r\n\r\n> That includes setting up a PK.\r\n\r\nWe try to respect the single responsibility principle whenever practical. If a piece of functionality can be handled by a class dedicated to it then it's better to move it there.\r\n\r\n> By calling this method AssociationEntity have I confused you into thinking that this API is for all association entities, manual or automatic?\r\n\r\nThe name and location are irrelevant for this discussion, it's about the factoring."""
21484,449244783,"b'I understand factoring. The single responsibility is ""create an association entity configured to work"". Here we directly have the properties we need, we know we want them to be a PK in both of the cases that call this code. We don\'t have any usage of this where we do _not_ want a PK. It seems to me that the best factoring and best single responsibility is to have 1 place that does it i.e. here.'"
21484,449298164,"b'I could see it being used in e.g. an error message. ""Sorry, don\'t use that type. Here are the list of types to avoid ..."". But not a big deal. I\'ll do it the way you want.'"
21484,449316192,b'Did you create an issue to allow using a STET as the association entity type explicitly?'
21484,449317676,b'```suggestion\r\n        private void RemoveNavigation(\r\n```'
21484,449318525,"b""This can be removed, it'll be handled by the `ManyToManyAssociationEntityTypeConvention`"""
21484,449318797,"b'```suggestion\r\n        public virtual InternalEntityTypeBuilder HasAssociationEntity(\r\n```\r\nThe ""Automatic"" part is implied'"
21484,449319862,b'You can avoid these checks if you change the method to take a single skip navigation'
21484,449321158,"b""Did you intend to run this only if `foreignKey` is `null` or `foreignKey.DeclaringEntityType` isn't `Metadata.AssociationEntityType`?"""
21484,449322546,"b""I don't think so. If you're resetting the FK of one of the skip nav's to a different FK then the association entity's FK pointing  towards that skip nav and the skip nav's `ForeignKey` property would no longer be the same thing. At that point your association entity is broken."""
21484,449323227,"b'The association entity type is not restricted to only have one FK per skip navigation. You can add an FK, configure the skip navigation to use it, then remove the old FK. At this point the association entity type will be valid.'"
21484,449323725,"b'```suggestion\r\n        public virtual InternalModelBuilder RemoveAssociationEntityIfCreatedImplicitly(\r\n```\r\n""Automatically"" is too generic, same goes for `IsAutomaticallyCreatedAssociationEntityType`'"
21484,449327939,"b""I don't think you can. Say we just pass in `leftNavigation`. `leftNavigation.Inverse` can still be `null`. It's possible to set up `leftNavigation.Inverse` to point to a `rightNavigation` whose Inverse is `null`. Likewise that `rightNavigation`s Inverse does not have to be `leftNavigation`. So I still need all the checks."""
21484,449328308,b'Really! \xf0\x9f\xa4\xa8 Obvious to anyone calling that code independent of our conventions?'
21484,449328367,"b""This shouldn't be necessary, explicit `HasMany().WithOne()` call should remove the many-to-many discovered by convention"""
21484,449328821,b'What else could this method do?'
21484,449329537,b'That is already handled in  `ModelValidator.ValidateRelationships`.'
21484,449333265,"b""Ugh! This is why I didn't want `ManyToManyAssociationEntityTypeConvention` to be a convention in the first place. I wanted it to effectively be the `HasAutomaticAssociationEntity` method. This is the consequence of me giving in on that. Let me revisit on that. In two places (`RelationshipDiscoveryConvention` and at the end of `WithMany()`) we end up knowing that there are a pair of matched SkipNavigations. We want, for that pair, to create an implicit association entity type which is configured and ready to go, and to do so once.\r\n\r\nMy original approach was a method that took the two SkipNav's and just did that. Tell me again why I instead want a convention that looks at _all_ skip navigations - and even in the correct scenario tries to set this entity type up twice (once for each SkipNav)? As far as I can see it doesn't do anything that the method wouldn't do, and it does so much less performantly."""
21484,449334671,b'https://github.com/dotnet/efcore/issues/9914#issuecomment-644986633 would add an overload here which takes string name of the entity type which can be STET or non-shared either.'
21484,449336493,"b'Why automatic, why not conventionally? \xf0\x9f\x99\x83 '"
21484,449336588,b'use using?'
21484,449336899,"b'I don\'t think this should be needed. There would be a central place where we would throw if code tried to call ""Entity()"" with clrType matching STET. This exception throwing is not unique to UsingEntity API.'"
21484,449346626,"b""### Why should we use conventions instead of hardcoding the configuration in builders\r\n#### Pros\r\n\r\n- Composability. The logic contained in a convention doesn't directly depend on logic in other conventions. This makes them easier to test and resilient to code churn.\r\n- Extensibility. Conventions can be added, removed, replaced and reordered by providers and (soon) by users\r\n- Efficiency. By separating the configuration change event from the code that processes it we can avoid unnecessary calls. (E,g, if a property is removed before the added event is processed then neither event needs to be processed).\r\n- Maintainability. Having the code separated into files by functionality makes it easier to find and understand than having it spread out through builders that are separated hierarchically.\r\n\r\n#### Cons\r\n\r\n- They add overhead and will be slower in many cases.\r\n- Authoring them requires better understanding of how model building works"""
21484,449361400,"b'Yes. I understand that. But not everything requires a new convention. Responding to your points:\r\n1. You are directly asking for `RelationshipDiscoveryConvention` to rely on `ManyToMany...Convention` - so the logic in one is directly depending on the logic in the other. It is not making it easier to test as I can testify because I\'m writing the tests. All other kinds of relationships are created by this convention, why not this one?\r\n2. Agreed. But we are already in a convention - this is just adding another one. And we\'re going to make it so `RelationshipDiscoveryConvention` doesn\'t actually discover this relationship. Instead it discovers two skip navigations and leaves it up to another convention to ""discover"" the relationship. And that convention doesn\'t know that the two skip navigations are related so it processes each of them, instead of just the pair together.\r\n3. I pointed out how the current way results in more calls in this case.\r\n4. My way would be maintainable - the method that does the work is 1 encapsulated method and there is no additional convention to maintain.\r\n\r\nBoth of the cons however do apply here.\r\n\r\nI suggest we use the method approach and only switch to a convention way of doing this if and when we find a scenario that requires it.'"
21484,449361809,"b""Create an explicit association entity. Indeed that's what I would assume it would do. You need to know that 2 skip navigations => implicit. Why not just say so?"""
21484,449362280,b'But I need to know it that these things are true at this point in time - which is before `ModelValidator` runs?'
21484,449362845,"b""Alright. I'm not sure why you'd ever create association entity type such that you could set up 2 FKs to the same skip nav independent of the other skip nav but OK. """
21484,449363011,"b'""Conventionally"" would be fine too. ""Implicitly"" sounds slightly better to me so that\'s what I\'ve changed it to.'"
21484,449364938,"b""This is how I agreed with @AndriySvyryd to deal with STETs. You shouldn't use this API to try to configure the existing STET, and using only CLR type we have no way of distinguishing that from any other STET.\r\n\r\nThis is not a general principal, it is specific to this particular API. We're saying we don't want you to run this overload of `UsingEntity()` using a STET. At some stage I do plan on adding other overloads of `UsingEntity()` that you could run using a STET and at that point in time I'll update this message to suggest those - see #21505 . """
21484,449365180,"b""> You are directly asking for RelationshipDiscoveryConvention to rely on ManyToMany...Convention - so the logic in one is directly depending on the logic in the other. \r\n\r\nNo, I'm asking for RelationshipDiscoveryConvention to just discover the relationship (i.e. the pair of navigations that should be connected) and let other conventions figure out the details, like we already do for foreign key properties for example.\r\n\r\nIf a provider needs to define PKs in a different way (for example they need to add a partition key property) then they wouldn't have a place to change this behavior.\r\n\r\n> I pointed out how the current way results in more calls in this case.\r\n\r\nIf one of the navigations becomes ambiguous after it was discovered and has to be removed, then we could save some time by not creating the association entity type. But yes, in most cases it will be somewhat slower.\r\n\r\n > My way would be maintainable - the method that does the work is 1 encapsulated method and there is no additional convention to maintain.\r\n\r\nDecomposing methods directly increases maintainability, I don't see how your argument supports your conclusion.\r\n\r\nAre you disagreeing with the general approach of using conventions? If not then the more functionality we can move into discreet conventions the better they will work together."""
21484,449365707,"b""If you were to name a method that sums two numbers which one you'd prefer?\r\n```C#\r\nint Sum(int x, int y)\r\n```\r\nor\r\n```C#\r\nint SumTwoIntegers(int x, int y)\r\n```"""
21484,449366368,"b""No, you don't. The rest of the method will run fine in the scenario you described."""
21484,449370912,b'This is nowhere near that clear.'
21484,449373807,"b""At the end of the day I want two skip nav's which are inverses of one another with an association entity type with 2 foreign keys which are also the foreign keys on the skip nav's. We no longer set the two skip nav's to be inverses of one another in this method - instead it is a pre-condition. I'm just checking that the pre-condition is true.\r\n\r\nIn an earlier comment you wanted to make sure that the two skipNav's were inverses of each other before I called this method. Now you're saying it's unimportant whether they are inverses of one another? I don't understand."""
21484,449377277,"b""> At the end of the day I want two skip nav's which are inverses of one another with an association entity type with 2 foreign keys which are also the foreign keys on the skip nav's. We no longer set the two skip nav's to be inverses of one another in this method - instead it is a pre-condition. I'm just checking that the pre-condition is true.\r\n\r\nYou can assume this is the case and check this using `Check.DebugAssert`\r\n\r\n> In an earlier comment you wanted to make sure that the two skipNav's were inverses of each other before I called this method. Now you're saying it's unimportant whether they are inverses of one another? I don't understand.\r\n\r\nYes, we need to know the matching pair of navigations, one `Inverse` already contains enough information"""
21484,449385281,"b'Now you\'re defining ""discovering the relationship"" as ""discovering the skip navigations"", but throughout the rest of this convention discovering a relationship means calling some version of HasRelationship() i.e. setting up the foreign key. You can\'t set up the foreign keys in this case without creating the association type - so that is what it should do.\r\n\r\nI\'m not disagreeing with conventions in general. I just don\'t think this raises to the level that makes it worth it. I disagree that every little bit of functionality that could possibly be composed elsewhere automatically needs a convention. The convention system is big and complicated in part because of that. And yes, figuring out what convention is expecting what of which other convention is hard to understand and not really documented. Expectations in one part of it are not necessarily explained when you\'re looking at another part of it. The more a convention depends on other conventions, the more entangled it all gets, the more easily it gets broken and the harder it gets to change any one convention because you\'re not sure of its effects on all the others.\r\n\r\nAll the `ManyToMany..` convention does at the moment is check the skip navigations are inverses of one another and don\'t have foreign keys (all of which I already know at the end of `RelationshipDiscoveryConvention`) and then call the same method I would have called anyway. (And then it uselessly does it again for the 2nd skip nav).\r\n\r\nBut I\'m done. I\'ll just live with the convention. I\'m clearly not convincing you.'"
21484,449389992,b'> Did you create an issue to allow using a STET as the association entity type explicitly?\r\n\r\nSee #21505 '
21484,449406853,"b'> using only CLR type we have no way of distinguishing that from any other STET.\r\n\r\nThat is true for any API which takes clr type only to configure any kind of entityType, so I am not sure why this API is special here.'"
21484,449553532,b'See [discussion here](https://github.com/dotnet/efcore/pull/21484/files#r448609367)'
21484,449650843,"b'@AndriySvyryd - The call to `ModelBuilder.Entity(joinEntity, ConfigurationSource.Explicit)` throw error for STET already. Do we need to throw specific exception above?'"
21484,449657734,"b'@smitpatel No, we are only throwing until #21505 is implemented.'"
21484,449659241,"b'Ok, that wasn\'t the best example. But to someone who knows what ""Automatic"" refers to it is clear that\'s the only thing it can do with the inputs. And to someone who doesn\'t know it doesn\'t add any useful information.'"
21484,449670129,"b'To someone who doesn\'t know what ""Automatic"" refers to it makes you stop and think and go ""What does automatic mean? Do I want that?"" Maybe that stops you from calling that method and makes you look for other ways of doing what you want to do. If you do know what ""Automatic"" means then maybe it confirms that this is exactly what you wanted to do and not something else which you don\'t want (e.g. create an explicit association). And all for the small, small price of one word in a method name on an internal class.\r\n\r\nBut all of that said, the only reason I had it here was so it could be called from both conventions. Since we now only call it in `M2MConvention` shall we just move the whole method there?'"
21484,449671289,"b""Sure, though I'd prefer that the method that calls `AddEntityType` is on `InternalModelBuilder` and exposed through `IConventionModelBuilder.Entity(string, Type, bool)`"""
21484,449677963,"b""At this stage I don't need to make it public, but if you think it would be useful to others, sure. \r\n\r\nAll it would do is take 2 entity types, construct a name from their names and call `AddEntityType`. I was thinking:\r\n\r\n```C#\r\npublic IConventionEntityTypeBuilder Entity(IConventionEntityType leftEntity, IConventionEntityType rightEntity)\r\n```\r\n\r\nor\r\n\r\n```C#\r\npublic IConventionEntityTypeBuilder Entity(string leftEntityName, string rightEntityName)\r\n```\r\n\r\nWhat were you thinking of passing in?"""
21484,449680912,"b""Oh. I see. The `bool` is `fromDataAnnotation`, and the `Type` is for `Dictionary<string, object>` and the `string` is the already constructed name. I'm fine with that, but I think that's really something @smitpatel should decide in #9914 . So if it's OK I'll just pull it all into `M2MConvention`  for now and when @smitpatel does that work we can change it to call that method."""
21484,449686709,"b'#9914 will add \r\n```\r\n        IConventionEntityTypeBuilder Entity([NotNull] string name, [NotNull] Type clrType, bool? shouldBeOwned = false, bool fromDataAnnotation = false);\r\n```\r\n'"
21484,449686776,b'Ok'
21484,449687091,"b'If you add something which would be changed when #9914 is finished, just add TODO note with 9914 issue number. I will take care of it.'"
21484,450447286,"b'We should preemptively add `Dictionary<string, object>` to `_sharedEntityClrTypes` to avoid a potential breaking change in case someone manages to use it as a non-shared type'"
21484,450502008,"b""I've been hard-coding `Dictionary<string, object>` and I'd prefer to keep it somewhere as a `public static readonly` variable, called e.g. `DefaultAssociationEntityTypeClrType`. Given that you'd like it in `_sharedEntityClrTypes` how about if that variable lives on `Model`?"""
21484,450538525,"b'Sounds good, but call it `DefaultPropertyBagType`'"
21484,450540091,b'Does this test fail without calling `UsingEntity`?'
21484,450542923,b'This should also run on `ISkipNavigationInverseChangedConvention` as the inverse might not always be set immediately.'
21484,450543850,"b""Yes. I.e. if you don't do this the code at L1852 does not throw - which looked correct to me given the earlier comment that calling `WithMany().HasOne()` should override an implicit N:N. But in this test we want to check that overriding N:N with N:1 throws, so I set up an explicit association entity in order to cause that."""
21484,450544650,"b""But this was already an explicit N:N even without `UsingEntity`, so it should've thrown"""
21484,450551757,"b'I originally had that producing an AET this way made it explicit. But we had a discussion and you said that an entity produced by `HasMany().WithMany()` with no further calls should be by convention, not explicit?'"
21484,450552655,"b'Right. The AET would be implicit, but the relationship (i.e. the skip navigations) is explicit'"
21484,450554988,"b""There are other private methods in this class called `RemoveSingleSidedBaseNavigations`, `RemoveInheritedInverseNavigations`. The way I have it seemed more consistent. Note: I'm happy to add an `s` if you like although 1 call to this method will only ever remove 1 navigation."""
21484,450555704,b'What happens if 1 of them is explicit and 1 of them is by convention?'
21484,450555886,"b""They don't need to be consistent as they are used differently. The name I suggested describes what it does accurately."""
21484,450556490,"b""Disagree. The removal is conditional. But again I'll just update it. I'm done arguing. """
21484,450556498,"b""Overriding the explicit one will throw an exception, but the implicit one wouldn't"""
21484,450557974,"b'Right, it only removes navigations of equal or lower configuration source. You can move out `toRemoveFrom.Remove(navigationProperty)` to make it clearer'"
21484,450568748,"b""You appear to be saying please take out the only place that actually removes a navigation from the code that you insist be called `RemoveNavigation` and somehow that will make it clearer? I'm really sorry but I honestly no longer have any idea what that means or what you want. Please just tell me what you want it to look like and I'll copy it in verbatim."""
21484,450584734,b'I will need to discuss this with you tomorrow. This causes contradictions with the code that was put in to make the test below this one work.'
21484,450591914,"b""The main responsibility of this method is to remove the navigation from the model (i.e. `existingNavigation.ForeignKey.DeclaringEntityType.Builder.HasNoRelationship(existingNavigation.ForeignKey)`), only if that fails (due to the navigation being of a higher configuration source) then it would mark it as non-ambiguous (i.e. `toRemoveFrom.Remove(navigationProperty)`).\r\n\r\nIf you just rename it to `RemoveNavigation` it'd be good enough as this is a private method."""
21484,450592906,b'The definition of `ISkipNavigationInverseChangedConvention.ProcessSkipNavigationInverseChanged` is wrong. Both `inverse` and `oldInverse` can be null. Same goes for `ConventionDispatcher.OnSkipNavigationInverseChanged`'
21484,450594266,b'ordering'
21484,450594518,b'```suggestion\r\n                if (((IConventionSkipNavigation)SkipNavigation).GetConfigurationSource() == ConfigurationSource.Explicit)\r\n```\r\n\r\nThis should fix https://github.com/dotnet/efcore/pull/21484/files/31d8567bbefb6a012cfaff7aa6adb2145422748c..e8021a3182af25122449f0133eb14ddd6d8adbea#r450544650'
21484,450598258,b'```suggestion\r\n        ///     The CLR type that is used for property bag entity types when no other type is specified.\r\n```'
21484,450930309,"b'Will do that. You see I thought `HasNoRelationship` was mainly about removing a FK (removing a navigation is a side-effect), and that the main responsibility was to remove higher configuration source NavProps from the `RelationshipCandidate` so that they would no longer be considered by the rest of the code. So we were talking about different removals, both of navigations.'"
21484,450932415,"b""I did wonder why it was defined that way. I'll update the existing code to have `[CanBeNull]` annotations and update my code to match."""
21484,450932889,b'Sorry. Had to put model back in because we moved where this method lived and missed that.'
21484,450934998,"b""Yep. That's what I tried and it doesn't work. It'll be easier to show you."""
21531,450441231,b'helix.proj file too.'
21531,450496870,b'Thanks. Always forget that one...'
21560,451358830,"b""Isn't Model in the name redundant given they are in TestModels namespace already?"""
21560,451360042,"b'```suggestion\r\n                elementAsserter: (e, a) => AssertInclude(e, a, new ExpectedInclude<BaseCollectionOnBase>(x => x.BaseParent)));\r\n```'"
21560,451360664,"b'```suggestion\r\n                elementAsserter: (e, a) => AssertInclude(e, a,\r\n                    new ExpectedInclude<ReferencedEntity>(x => x.Principals),\r\n                    new ExpectedInclude<PrincipalEntity>(x => x.Reference)));\r\n```'"
21560,451717057,"b'did it for consistency, we could switch them all to non-Model, but thats not the only redundancy in out test naming ;)'"
21477,448107393,b'this is the part that was added'
21477,448107928,b'I have doubts regarding this being an array (rather than enumerable)\r\nAnd usage of method.Invoke.'
21477,448216721,b'updated'
21477,448223341,"b'should be ok to do this, but could always create new instance, just to be safe - thoughts?'"
21477,449321806,"b'You already update the inExpression before passing in here, remove duplicated update.'"
21477,449321984,b'No further optimization?'
21477,449322756,b'Where are you checking that operator between both InExpression?'
21477,449322923,b'return the object value back from GetInExpressionCandidateInfo thing rather than using *candidateInfo.ConstantExpression.Value'
21477,449323088,b'And separate out type mapping.'
21477,449323172,b'tuple members are uppercase. '
21477,451136573,"b""its parameter collection - we don't have access to the contents at the time we perform the optimization. """
21477,451141934,"b'we know operators on both candidates are the same (line 232), `IN || IN` and `NOT IN && NOT IN` are handled in the if block (242, 243), so this must be the other 2 possibilites (`NOT IN || NOT IN` or `IN && IN`)'"
21397,444671737,b'```suggestion\r\n                      from w in g.Weapons.Where(ww => ww.Id > prm).DefaultIfEmpty()\r\n```'
21397,447186425,b'Move to top and make it static.'
21397,447188126,b'Should this be converted?'
21397,448708457,b'outer reference to c in the inner selector'
20212,392528226,b'We should file an issue to do the `ulong` ones too.'
20212,392529594,"b'Can this just be...\r\n``` cs\r\n(decimal? left, decimal? right) => left / right,\r\n```'"
20212,392529993,"b""Won't Divide just throw this?\r\nCan all of this just be...\r\n``` cs\r\n(decimal? dividend, decimal? divisor) => dividend / divisor,\r\n```"""
20212,392530090,b'Ditto. `left * right`'
20212,392530193,b'Ditto. `-m`'
20212,392559602,"b'You mean left + right? Yes, it can - and is now.'"
20212,392559731,b'Fixed.'
20212,392559736,b'Fixed.'
20212,392560176,"b""I guess it would make sense, yes. I'd be happy to work on this, when decimals are finished, if OK."""
20212,392560187,"b""Hm, at least the tests passed this way. But it's anyway not needed here, as error checking happens down the path inside `Decimal.Dec.Calc.cs` which I (see below comment) unfortunately did not realize earlier. \r\n\r\nFixed it."""
20212,411582260,b'static'
20212,419080952,b'fixed'
21516,449808223,b'nit: sorted order'
21516,449808430,b'This should not be needed as AssertQuery does all rewrites.\r\nAnd if it is necessary then either test not using AssertQuery should add it or override CreateContext method to set on context directly after creation.'
21516,449957832,"b'Is this property necessary? And this type in general? If yes, consider making it an interface.'"
21516,449958341,b'Why are these removed?'
21516,449959046,b'I thought we agreed to limit this to entity types that only have the foreign keys'
21516,450291554,"b""I didn't want to break the existing event data because not breaking across versions was discussed a lot in the original design. However, I wanted people to be able to write common code for processing any navigation event. But I don't feel strongly about it."""
21516,450292455,"b'Because they are wrong. At some point the code was changed, but the contracts were not updated. Are we doing these kind of annotations in the code in general? If so, we should figure out how to ensure they stay up-to-date.'"
21516,450293258,"b""I'm not sure I 100% agreed. ;-) Anyway, I'm going to look into this more, so the code here is not final."""
21516,450416403,"b""```suggestion\r\n                            if (skipNavigation.Inverse?.IsCollection)\r\n```\r\n\r\nAlthough it's weird, I had some tests at one point that managed to set up skipNav's with strange inverses including `null`. So suggest the `?` form. Similarly in a few places below. That said, in this particular case you may be able to ignore the inverse and carry on rather than throwing in the `else`?"""
21516,450420911,b'See discussion from last week in team chat. @AndriySvyryd asserted that the Inverse will not be null. It may be that the cases you were hitting were while the model was being built.'
21516,450439871,b'Inverse will always be non-null after model validation'
21516,450504211,b'Consider DRYing\r\n- Either private static method in this class to get CollectionAccessor for INavigationBase\r\n- or if used at other places too then extension method.'
21516,450505108,b'Is this right?'
21516,450505336,b'\xf0\x9f\x91\x80 '
21516,450508185,b'Is this just to verify delete fixup code or needed by customers also?'
21516,450528366,b'Using an explicitly-implemented interface would be better if you want to enable common processing'
21516,450528634,"b""Well, you can make R# warnings to be errors, but it'll take a while to fix them. I'm fine with removing the ones that are wrong"""
21516,451853851,"b""It's because there are dependents in the database and if they are not loaded then EF will not null the FK values and hence there will be a database constraint violation when saving. This just avoids that happening in this test--it's purely a test artifact."""
21516,452311514,b'These are still not working?'
21516,452322120,"b""Didn't realize you had merged the fix. Will check."""
21516,452393273,b'All passing. \xf0\x9f\x91\x8d '
21516,452432415,"b'The description says:\r\n> Covers only the simple case of collection skips with non-composite, non-alternate keys and simple concrete join table containing only two FK properties'"
21516,452443983,"b""I talked to your manager, and he said it's okay to merge this now and revisit later."""
21516,452444708,b'Perhaps I should speak to your manager then \xf0\x9f\x99\x83'
21579,452640570,b'Too much stock market for today? :trollface: '
21484,452932155,b'What was the team decision WRT to FK property naming?'
21484,452941542,b'See #21565 and #21567 '
21484,452955126,b'@AndriySvyryd Is there any reason we need special rules for FKs? We decided in the design meeting to just use the current rules.'
21484,452964831,b'No. That would be my preference as well.'
21591,453124691,b'Just call visit directly. It will traverse both part of ShapedQueryExpression'
21591,453124725,b'Also when the top level is not shaped query expression'
21591,453124765,b'No need to store any field. You can throw right away when you see it.'
21591,453165187,"b""Calling 'ShapedQueryExpression' is not allowed. Visit expression manually for relevant part."""
21591,453165268,b'could do that in the visitor itself tho'
21591,453857491,b'@smitpatel ??? oversight or specific reason test was added like this?'
21591,453934842,b'This is tracking test base. There should not be AsNoTracking operator here.'
21591,453935372,b'If it only works in AsNoTracking scenario then you can move it to Notracking test base.'
21622,454611076,"b'Related, should we allow lambda of anonymous type (like how HasData is) so that users can write defining query where there are also shadow properties projected out.'"
21622,454612676,b'You mean https://github.com/dotnet/efcore/issues/20023?'
21622,454612821,b'If this is in InMemoryFixture then is there a way to write without obsoletes?'
21622,454613906,b'yes'
21622,454634239,b'ToQuery directly on entity type builder does not work?'
21622,454634732,"b""It's ambiguous until the obsoleted method is removed"""
21622,454637316,"b""Let's discuss in design meeting."""
21620,454617789,b'This comment is still correct'
21620,454618108,b'Please rename this key to match the actual feed e.g. `myget-legacy internal`.'
21620,454682165,b'Restored in commit 5c566c625.'
21620,454682274,b'Renamed in commit 5c566c625.'
21623,454743888,b'oops :)'
21618,454885045,b'I recommend you take a look at InternalUsageDiagnosticAnalyzerTest and try to do something similar.'
21618,454888056,"b""The code as is only looking at syntax nodes, which isn't sufficient for identifying inheritance AFAIK - you need to look at the semantic model (GetSymbolInfo). However, GetSymbolInfo apparently has some perf issues, so #18637 is about modifying our current analyzer to use IOperation instead; am not sure exactly how that looks like for a suppressor but it should be possible.\r\n\r\nAt least for now, our analyzers package does cannot reference EF Core types directly (I'll try to see about improving this in the future), so you can only identify/recognize EF types by name."""
21618,454939777,"b""@roji I tried to do that. But seems like the current BaseTest won't fit well with testing suppressor."""
21618,454941250,"b""@roji, I'll try to play around with SemanticModel."""
21618,455034058,"b""In that case I'd look at some other well-known suppressor and try to see what it does.."""
21634,455124204,b'This could be breaking change.'
21634,455153758,"b""Not sure how this could be breaking, but it's true that this is ambiguous with the obsoleted overload. We can close and revisit after that's removed (or never)."""
21246,455568700,"b""@ajcvickers for better performance you should stash and ObjectFactory in a field by calling `ActivatorUtilities.CreateFactory<TContext>()`. Then you can use that factory to create instances of  TContext. It's *much* more optimized and avoids the constructor selection per call."""
21588,453085779,"b""Is there value in allowing HasComputedColumnSql to be called with an empty string, which will fail for sure? HasDefaultValueSql doesn't allow this, for example.. Is it that valuable to scaffold that columns are computed without scaffolding their SQL?\r\n\r\nIf we do this, should we maybe have model validation for this?"""
21588,453090048,"b'@roji This annotation says that null is fine, but empty string is blocked. So empty strings are not allowed here, but null is.'"
21588,453120545,b'We did something similar on HasDefaultValueSql() didn\xe2\x80\x99t we? So you didn\xe2\x80\x99t have to specify the SQL but it worked with the update pipeline?'
21588,453121057,"b'It won\xe2\x80\x99t fail with an existing database, it will only \xe2\x80\x9cfail\xe2\x80\x9d (require editing) in Migrations'"
21588,453168422,"b""@ajcvickers this PR relaxes the check to allow empty-string, I think HasDefaultValueSql [does check against this](https://github.com/dotnet/efcore/blob/7c572c5f570aff771586bf08c57aa73c424d4730/src/EFCore.Relational/Extensions/RelationalPropertyBuilderExtensions.cs#L280).\r\n\r\nI guess the question is whether we want to scaffold models which we know will fail to be migrated without manual editing (maybe a bit like the discussion on including the connection string), and whether there's enough value in this kind of partial scaffolding, where we indicate that the column is computed but can't provide the SQL. Another alternative would simply be to warn for computed columns and scaffold them as totally regular columns, this way the user is made aware that if the computed SQL is important, they must take care of it themselves."""
21588,453216521,b'I want to do something similar to this:\r\n\r\nhttps://github.com/dotnet/efcore/blob/58abc390e0e3eb849b5773da3f5ed2982ade521d/src/EFCore.Relational/Extensions/RelationalPropertyBuilderExtensions.cs#L487-L496\r\n\r\nWe just don\xe2\x80\x99t have a good sentinal value like DBNull. Maybe `\xe2\x80\x9dNULL\xe2\x80\x9d`?'
21588,453217027,"b'Again, there are no issues with existing databases which is 99% of people using `dotnet ef dbcontext scaffold`. Round-tripping a model through migrations is not a goal. Scaffolding a regular column for them *would* cause issues.'"
21588,453348836,"b'lol, what about `HasComputedColumnSql(""\'Cannot reverse engineer computed column SQL\'"")`? It doesn\xe2\x80\x99t error and is pretty clear what happened.'"
21588,453561523,"b""> We just don\xe2\x80\x99t have a good sentinal value like DBNull\r\n\r\nThis would be used to indicate that a column has a default or computed value, but that we haven't yet set it (or don't know what it is)? That sounds interesting - we could throw an informative message if someone does attempt to add a migration (or do EnsureCreated) with that.\r\n\r\nHowever, HasComputedColumnSql accepts a string so DBNull isn't an option... But I think I get where you're going. Maybe using empty string as the sentinel does make sense, especially if we do a special warning in migration generation (because otherwise the SQL will likely come out mangled and produce a weird error). A design-time scaffolding warning for these could also be good..."""
21588,453913316,b'Design meeting...'
21588,455927106,b'can use `defaultValue` in the line below.'
21246,455955624,b'https://github.com/dotnet/efcore/issues/21651'
21575,452548286,b'\xf0\x9f\x98\x8d\xf0\x9f\x98\x8d\xf0\x9f\x98\x8d'
21575,452563862,b'```suggestion\r\n\r\n```'
21657,456121993,"b'Leave this here, no? \xf0\x9f\x98\xa2 '"
21657,456122151,b'formatting'
21657,456122302,"b'""SelfSkipPayloadLeft"" doesn\'t have ""Shared"" in it\'s name...'"
21657,456122523,"b'Also the comment on the next line says ""Join: Concrete"".'"
21611,456640048,b'Why is this returning a new builder for RightEntityType instead of the `associationEntityTypeBuilder` created above?'
21611,456640904,b'Different underlying entity type'
21611,456642146,"b'So, the builder should be for the the T in the `.Entity<T>` call?'"
21611,456665818,b'Yes'
21618,456666322,"b""@Youssef1313 please hold off on this, @davidroth's suggestion in #21608 will likely obviate this."""
21618,456672371,"b""We don't have a good way to test suppressors currently. We're still looking into options."""
21552,451184330,b'Typo:\r\n```suggestion\r\n                // This is to populate Type for convention when removing shared type entity type\r\n```'
21552,451187945,"b'I would add something saying what happens if an entity type with the given name is in the model, but its CLR Type does not equal the CLR Type passed in.'"
21552,451189240,"b""Not sure why this is. If no entity type has that name shouldn't you create a new entity type with CLR Type = clrType? Or is this a typo?\r\n\r\n```suggestion\r\n        ///     a new entity type with the given CLR type will be added to the model.\r\n```"""
21552,451189862,"b'Very small suggestion. I\'ve always seen ""inline"" as one word.\r\n```suggestion\r\n        ///         This overload allows configuration of the entity type to be done inline in the method call rather\r\n```\r\n\r\nSame below.'"
21552,451192512,"b""From the description I wasn't sure what would happen if the given name was not in the model or represented something other than an entity type. I suggest the below, but feel free to rephrase if my assumptions are not correct.\r\n\r\n```suggestion\r\n        ///     Excludes an entity type with the given name from the model if it exists. This method is typically used to remove types from\r\n```"""
21552,451193083,"b'```suggestion\r\n        ///     The same <see cref=""ModelBuilder"" /> instance so that additional configuration calls can be chained, or <see langword=""null"" /> if the entity type does not exist.\r\n```\r\n(I\'m not sure here - is that what we should be doing? That sounds right compared to the other APIs but maybe we don\'t for `Ignore`)'"
21552,451195355,"b""Should be a resource? Also I'd say what type is clashing with what other type."""
21552,451195391,b'As above.'
21552,451267432,"b""```suggestion\r\n                    ? targetClrType == null\r\n```\r\nIt doesn't have to be a STET for the new methods other than `Entity`"""
21552,451272885,b'You could make the `MemberIdentity` overload public'
21552,451273439,"b'```suggestion\r\n            buildAction(OwnsManyBuilder<TRelatedEntity>(targetTypeName: null, new MemberIdentity(navigationName)));\r\n```\r\nDo this everywhere'"
21552,451273998,"b""I expect that you'll revise all the docs for new methods later"""
21552,451274963,b'```suggestion\r\n                || entityType.HasSharedClrType\r\n                || entityType.HasDefiningNavigation()\r\n                || entityType.FindDeclaredOwnership() != null\r\n                || entityType.Model.FindIsOwnedConfigurationSource(clrType) != null)\r\n```\r\n\r\nShould make this marginally faster on average'
21552,451275785,b'Also this and `AddEntityType` should have a paragraph on what a STET is'
21552,451276125,"b'No, Fluent API never return `null`'"
21552,451284485,b'are you suggesting just variable name change (as the clr type does not necessarily have to be STET) or something bigger?'
21552,451284837,"b'Yes, I will revise them. Anything specific text to include other than correcting the incorrect ones?'"
21552,451284894,b'Just name change for now'
21552,451288317,"b'yes it is one of the TODOs, I will add all of them together once we also see code paths of mis-configuration.'"
21552,451288438,b'Had plan to do ctrl + shift + h :trollface: '
21552,451292621,"b""No, we don't need to explain to mention STETs everywhere, just where it really matters"""
21552,451868864,b'Typo:\r\n```suggestion\r\n                        // Upgrade configurationSource for existing entity type\r\n```'
21552,451871102,"b""OK. Then I would just say somewhere that there is no problem if you `Ignore` something that doesn't exist. Or, more precisely, that it will return the `ModelBuilder` regardless of whether the target entity type is in the model."""
21552,451872159,"b""P.S. Let me know if you don't want comments on typos yet (given this is Draft)."""
21552,456620244,b'Throw if `joinEntityType` is not shared'
21552,456621939,b'Here as well'
21552,456624311,b'Use `HasNoEntityType`'
21552,456624473,b'Needs `ToList`'
21552,456636328,b'So users need to market the Type as shared type in advance using `SharedEntity<T>()` API?'
21552,456643024,b'Yes'
21668,456714366,b'thats a weird exception to throw here'
21668,456714970,b'I will convert weird exceptions to Check.DebugAssert.'
21668,456720563,b'clean up here and above'
21668,456724622,b'add helper method into QTB? (just like we have for assert translation failed)'
21668,456726267,"b'Very few and messages also differ. \r\nA better DRY I think would be to have a method like AssertQuery or something which wraps AssertQuery, where it takes the () => AssertQuery and verifies InvalidOperationException (or may be generic on type), and returns message so each individual method can verify the message.'"
21681,457709874,b'non-abstract used anywhere?'
21681,457711538,b'Do you think it would differ?'
21681,457714912,"b'Yes, for default mapping'"
21681,457715240,"b'Yes, when https://github.com/dotnet/efcore/issues/19811 is implemented'"
21701,457714651,b'public API removed?'
21701,457721011,"b""I'll obsolete it"""
21704,457744016,"b""@AndriySvyryd how are you?\r\n\r\nJust out of curiosity, any specific reason for reaching number 42?\r\n\r\nit's just curiosity."""
21704,457744723,"b'Sorry, now I looked at issue #9270'"
21704,457744905,"b""> Just out of curiosity, any specific reason for reaching number 42?\r\n\r\nOnly because it's [the answer to the Ultimate Question of Life, the Universe, and Everything](https://en.wikipedia.org/wiki/42_(number)#The_Hitchhiker's_Guide_to_the_Galaxy) and it has better perf in common scenarios than the implicit default of ~2100"""
21704,457747874,"b'Thank u, living and learning!'"
21705,457774369,b'@AndriySvyryd - Should we add a method FindNavigationBase?'
21705,457775073,b'We could add an Internal one'
21683,457567246,"b'Use the overload that takes `common, source, target` and move all the code to `common`'"
21708,457808909,b'Indent this a little.'
21708,457814856,"b""Too late. We'll do a global reformatting closer to RTM."""
21705,458203280,"b""Decided not to do this. An internal one in Core can't be used here in the proxies package."""
21722,458413471,b'Rename the other one to tableExpressionBase'
21722,458414811,b'`FromSql` should use `GetDefaultMappings`. `SqlQueryMapping` with `IsDefaultSqlQueryMapping` set to `true` should only be used when the root is an entity type mapped using `ToQuerySql`'
21722,458426211,b'Would be cleaner if `TableExpressionBase` had an `ITableBase` property'
21722,458429781,"b""Select/Joins etc also are TableExpressionBase. They don't correspond to any ITableBase.\r\nTableExpressionBase is anything from which you can project out columns. ITableBase correspond to actual database object only so we would need some middle type to hold it."""
21722,458431616,"b""The `ITableBase` property could be `null` if there's no database object"""
21722,458463202,b'I added TableExpressiob.Table & TVFExpression.StoreFunction.\r\nI will revisit if FromSqlExpression should take ITableBase when I work in ToQuerySql API.'
21725,458477348,"b""I'm not sure that we support TPH, do we have any tests?"""
21725,458491170,b'Probably not tests but it just works due to design.'
21726,458527945,b'We moved a duplicated column here. - `[o].[Id]`'
21723,458433450,b'correlated with?'
21723,458453063,b'InvalidOperation or NotSupported? @dotnet/efcore '
21723,458453333,b'Incorrect number.'
21723,458453553,b'AssertQuery syntax'
21723,458459574,b'InvalidOperation.\r\n\r\nNotSupported would be thrown when implementing an external interface'
21733,458964188,b'When does this need to be called with null entityType?'
21733,458966023,b'VS will add these back next time this is saved'
21733,458985836,"b'It doesn\'t ""need"" to be called with null, but without this I would be checking for null at the call site and calling the other method when the IEntityType is not available. Happy to do that instead.'"
21733,458986162,b'The interesting thing is that Rider removed them automatically...'
21733,459083714,b'Check.NotNull'
21733,459085348,b'This is not indexed navigation.\r\nThis is a navigation to shared type entity type. If it is configured properly it will work in 5.0'
21739,459101158,b'Also remove SharedEntityTypeBuilder?'
21739,459101303,b'This one too.'
21739,459102116,"b""We'll likely need to add it back, but removing it makes sense"""
21739,459134759,"b""I don't think that we decided to remove the Metadata API as well"""
21743,459133365,"b'Don\'t shorten ""auto"" in docs'"
21743,459136159,b'Updated'
21739,459140050,b'I added them back in https://github.com/dotnet/efcore/pull/21741'
21744,459140476,b'`_sharedTypes `'
21739,459501519,"b""I removed them because they weren't being called by anything but the fluent API, but fine to add them back."""
21747,459180143,b'This extends the fix for #19407 for more scenarios.'
21724,459754473,b'.Internal. Can remove it.'
21724,459755916,b'NotNull attribute and default value null?'
21724,459758730,b'What happened to these assertions?'
21724,459758915,"b'Now query does not use this part, may be we should clean it up in some future release.'"
21724,459776312,"b""It's being used by `RelationalCommandBuilderExtensions.AddPropertyParameter`"""
21724,459776665,b'If only there was some feature in C# that would show an error when a null is assigned to a non-nullable reference type...'
21724,459777228,"b""Yes, that's why I put Obsolete on all of these"""
21724,459777002,"b""The error is thrown before the query is executed now, so we don't need to assert SQL"""
21706,459750324,b'Do we also need to check that principalStoreObject is of type table.'
21706,459752307,b'can pass storeobject here.'
21706,459779031,"b""We only create FKs for tables, so whatever happens for non-tables doesn't matter"""
21706,459783942,b'I wanted to keep `ValidateSharedViewCompatibility` and `ValidateSharedTableCompatibility` as separate methods as the overlap is small. When separate storeobject would contain redundant information.'
21764,460180014,b'Is this different from entityType.GetProperties()?'
21764,460192187,b'No'
21747,460260576,b'convert it into local function?'
21747,460263272,"b'I thought about it. Initially I intended to write it as a local function and I thought I did. But then VS said, I need to add accessibility modifier and added private in front of it. So I realized it is not local function.\r\nBut then\r\nInside an .Internal class\r\nin a nested clas\r\nin a private method\r\nDoes it really matter ? :trollface: '"
21778,460324082,b'TODO: The code above that gets `table` should also handle Function and SqlQuery mappings'
21778,460324854,b'Is it possible to get it from `_selectExpression` instead of duplicating logic?'
21778,460326107,"b""```suggestion\r\n    <value>Using 'FromSqlRaw' or 'FromSqlInterpolated' on an entity type which has owned reference navigations sharing same table is not supported.</value>\r\n```"""
21778,460331375,b'Exactly get what from _selectExpression?'
21778,460331746,"b""The `ITableBase` if there's a `TableExpression`"""
21778,460333233,"b'It is chicken-egg issue. Once we know the table and see that table is being shared, we can traverse down n level to find the TableExpression which would ultimately correspond to ITableBase.\r\nThe main difficulty comes 2 fold that\r\n- The Tables for the `_selectExpression` may not be TableExpression but rather a subquery and actual table is hiding deep.\r\n- The tables for the `_selectExpression` are TableExpression but in TPT there would be multiple and we need to find the one which matches ITableBase of what we are looking at. Identifying projection would not help in this.\r\n\r\nIs there something functionally wrong here right now? or is it about future proofing? If later then I would happy to look over it when we get actual case so we can better understand what information we have and how we can get it optimally, rather than trying to guess a bit right now.'"
21778,460335164,b'This is future proofing. We might need a bigger refactoring to make the mappings flow where needed'
21778,460338190,b'Added TODO note for now. Future is bleak. :trollface: '
21784,460412364,b'Why is this `c`? Shouldn\xe2\x80\x99t it be called something like `Discriminator`?'
21784,460412573,b'No alias?'
21784,460425573,b'I can give it a name. I just left it with default. Will change.'
21784,460426068,b'Extract as pubturnal IEntityType.GetTptDiscriminatorValue to avoid duplicate logic'
21784,460426384,b'Just to getting discriminator value part or something larger?'
21788,460434827,b'extra empty line.'
21788,460435425,"b""Good catch. Submitted #21789 to fix this in release/5.0-preview8 first (please approve), after that's merged I'll redo this PR."""
21788,460437697,b'Not a functional impact. Just make it part of merge commit and it is fine.'
21788,460451314,b'Done'
21784,460461739,b'Just discriminator value. So if we want to change it we can do it in one place.'
21787,460461833,b'Extract constant'
21777,460320249,b'missing return in docs'
21777,460320529,"b""This won't be here. It should only be defined for DbFunctionBuilder.\r\nTableValuedFunctionBuilder does not have this attribute."""
21777,460321063,b'IDbFunction has IsNullable flag. Why soft cast?'
21777,460326093,b'forgot to remove after I added IsNullable on the interface.'
21777,460328021,"b'To distinguish explicit from default make this `bool?`, remove it from the constructor and add ""GetIsNullable"", see `IndexAttribute`'"
21777,460330270,"b""Shouldn't we preserve which argument propagates nullability and which doesn't?"""
21777,460330573,"b""I don't think this is needed"""
21777,460330713,"b""This should throw if the function isn't scalar"""
21777,460330741,"b""This should throw if the function isn't scalar"""
21777,460351656,"b'we store the list with the assumptions the order of elements is the same as their order in the function definition, we then match it based on position in the list. Is that wrong assumption?'"
21777,460372579,"b'nvm, I misread the `Select` as `Where`'"
21777,460372645,"b""You don't need to call `ToList` though"""
21777,460372956,b'Use `GetIsNullable()` to only set it if not `null`'
21777,460377964,b'Also should not need cast to concrete type. It should be interface.'
21777,461014522,"b'```suggestion\r\n                if (dbFunctionAttribute.GetIsNullable() is bool value)\r\n                {\r\n                    dbFunctionBuilder.IsNullable(value, fromDataAnnotation: true);\r\n```'"
21777,461015022,b'Only if it is scalar'
21777,461015681,b'You can inline this.'
21777,461016799,b'Is this used anywhere?'
21777,461017427,b'remove'
21777,461044471,"b'added it everywhere just in case, will remove'"
21829,461893877,b'```suggestion\r\n                return property.FindRelationalTypeMapping(storeObject)?.StoreType ?? (string)annotation.Value;\r\n```'
21829,461895006,"b'The last two parameter names are redundant, same below'"
21829,461895519,b'When would this be called with a different `StoreTypePostfix`?'
21829,461901304,b'Note sure what you mean by this...\r\n\r\nDo you want values specified for all parameters?'
21829,461902731,b'Removed'
21829,461906091,"b'```suggestion\r\n            = new SqlServerStringTypeMapping(""ntext"", unicode: true, SqlDbType.NText, StoreTypePostfix.None);\r\n```'"
21829,461906612,b'Same for other mappings'
21829,461910897,"b""Doesn't compile. """
21829,461911197,b'size and fixedLength would need to be specified too.'
21831,461923794,b'```suggestion\r\n                when queryRootExpression.EntityType.GetSqlQueryMappings().FirstOrDefault(m => m.IsDefaultSqlQueryMapping)?.SqlQuery is string querySql:\r\n```\r\n\r\nSo much simpler \xf0\x9f\x98\x84 '
21796,460643446,b'```suggestion\r\n                configurationSource)\r\n```'
21796,461074902,b'This is incorrect. If the discriminator value is not updated the seed entities end up with a null there.'
21847,462622563,b'I thought we had some mechanism to print method calls too.'
21847,462622888,b'Any specific reason this runs before setting tableName/schema?'
21847,462626706,"b""What's wrong with a simple string?"""
21847,462627106,"b""Futureproofing. When the builder is used for entity splitting it won't set name and schema, instead it will define a new table fragment"""
21847,462629794,b'Nothing wrong.'
21850,462685345,b'Can collection behavior of both skip navigation be different?'
21850,462685682,b'also collections vs collection in other methods'
21850,462685706,"b'No. I think that would be less likely, so it would be ok to make two calls in that case.'"
21850,462687198,b'> also collections vs collection in other methods\r\n\r\nWhat do you mean? Other methods only have one navigation'
21850,462689355,"b'Bit odd, that method name is singular, takes 2 member identity and plural parameter. It will show up in API review!'"
21850,462689686,"b""> Bit odd, that method name is singular, takes 2 member identity and plural parameter. It will show up in API review!\r\n\r\nIt only create one navigation on this entity type and that's what it returns"""
21851,462695908,b'Should we assert that `derivedType` is a derived type?'
21851,462706656,b'We can.'
21860,463189789,"b""```suggestion\r\n    <value>The navigation '{navigation}' on '{entityType}' must be configured using Fluent API with an explicit name for the target shared type entity type or excluded by calling 'EntityTypeBuilder.Ignore'.</value>\r\n```"""
21864,463275376,"b""I added this condition and put BackingFieldAttributeConvention before this convention so we don't run this if backing field is already set by annotation."""
21864,463277040,b'You could DRY this up'
21864,463282262,b'how?\r\n'
21864,463317190,b'By extracting `IConventionPropertyBaseBuilder`'
21864,463321279,b'HasField API is defined on IConventionProperty/Navigation/SkipNavigationBuilder. Do you want to move those too?'
21864,463321714,"b""Yes, that's what I am suggesting"""
21864,463336284,b'```suggestion\r\n        ///     Gets the property-like object being configured.\r\n```'
21864,463347169,b'Might as well run this on service properties too'
21864,463347642,b'Also run this on normal navigations. And run `BackingFieldAttributeConvention` on service properties'
21864,463348146,b'Navigation one already does in NavigationBackingFieldAttributeConvention.'
21864,463348841,b'Combine them then'
21864,463354658,b'Filed https://github.com/dotnet/efcore/issues/21869 for service properties. Bit unsure if we should add those conventions making model building even bigger.'
21867,463312071,"b""This isn't needed, just call `CanHaveNavigation`"""
21867,463314841,"b'The method body of CanHaveNavigation excludes existing SkipNavigations, should that be changed then?'"
21867,463315294,b'```suggestion\r\n                if (entityType.FindSkipNavigation(navigationMemberInfo) == null)\r\n```'
21867,463316409,"b'We can also have `CanHaveSkipNavigation`, but for the convention being changed it would be more useful something like `CanHaveNavigationBase`'"
21867,463365043,"b""Yes, if there's an existing skip navigation we should set up its inverse"""
21867,463365373,"b""We don't need to be as strict here. As long as the types are assignable we can use them"""
21867,463379333,b'What does ambiguousInverse being not null imply here?'
21867,463384208,b'That it can be used as long as both are collections'
21884,463861148,b'use from in the docs?'
21895,463993993,b'You should also be able to remove MayBeScalar on t.'
21885,463869422,b'This should be removed'
21885,463869731,b'This method should be overriden in respective places where the exception would be expected. \r\ne.g. in NorthwindSelectQueryCosmosTest\r\nand relational version of this class or SqlServer & Sqlite both.'
21885,463994181,b'This reference should be removed. Instead the PR removed reference to relational project in Relational.Specification.Tests project'
21885,463994258,b'remove'
21885,463994459,b'You can use AssertTranslationFailedWithDetails here too'
21898,464671618,b'if (async) { await query.ToListAsync(); }else query.ToList();}'
21922,464680326,"b'I reckon there is only one matching row in the table, but perhaps we should add orderby instead? '"
21922,464680527,b'same here'
21907,464569318,b'remove'
21907,464583950,b'Will remove in next PR.'
21907,464624428,"b'there is a predicate pattern and select pattern - could DRY those, but maybe not worth'"
21907,464626440,b'Not worth or easy.\r\nApply selector never returns null but apply predicate can.'
21922,464693945,"b""Isn't the operator irrelevant here?\r\nWhat we are testing is translate of FreeText function. So I just added a mix rather than using LastOrDefault everywhere."""
21873,463431014,b'Should name be changed to reflect that it does not configure but throw?'
21873,463432793,b'Should this account for unique? It can say you can set but if unique-ness mismatch then it will throw exception from lower source.'
21873,463916901,b'Was there a reason this needed to move?'
21873,463917603,"b""At that point the principal end hasn't been configured yet, so it's ambiguous which end should be required"""
21873,464004916,"b""What happens when for one-to-one relationship, by convention the configuration source is not set and this won't run and later user configures the same relationship using fluent api and with same dependent end as found by convention.\r\nDoes this code path will run again via either INavigationAdded or FKDependentEndChanged?"""
21873,464005624,b'What should be configured on underlying FKs? Collection navigation cannot be made required even with configuring FKs right?'
21873,464005744,b'This feels a subtle breaking change. We should discuss with the team if we should make an attempt to preserve old way of writing the code.'
21873,464113899,"b'Yes, it runs for both'"
21873,464114008,"b'You are right, this message would be only appropriate for 1-1 skip navs'"
21873,464717452,"b""I'll submit a separate PR to make this less breaking"""
21921,464756323,"b'in the future, we can optimize out DISTINCT inside MIN/MAX'"
21924,464748597,b'nit - dot at the end'
21924,464749258,"b'add a comma before ""which""'"
21924,464749435,b'same here'
21924,464750838,b'we should just display navigation name'
21924,464763561,b'Done. Also kept the declaring entity type name. In case there are multiple navigations on different entity types with same name.'
21932,465144127,b'@airbreather Will there be an update to the I/O modules? Or should we start referencing this main package from the SQL Server and SQLite packages to lift it to the latest version?'
21932,465159225,"b'Right now, my intent is for the I/O modules to reference the lowest package version that they can, which is going to be 2.0.0 for a while.'"
21932,465193961,"b""Thanks! I used to be a big proponent of that strategy too, so I applaud your efforts. \xf0\x9f\x99\x82 (I had a change of heart when the language started coupling itself to the runtime.)\r\n\r\nI'll update our references so EF Core users will get the latest versions of everything to match our strategy for dependencies."""
21933,465294769,b'\xf0\x9f\xa4\xae'
21933,465296171,b'(This way because of #15256 and #9998)'
21933,465419069,"b""It doesn't matter for 3 values, but to avoid a bug when another value is added it's best to specify explicit values for Flags enum"""
21933,465419530,b'```suggestion\r\n                var subBuilder = new MigrationCommandListBuilder(Dependencies);\r\n```'
21933,465827991,b'Planning to add one in the next PR \xf0\x9f\x98\x89'
21940,465847068,b'Fixing the loader for skip navigations is next on my list.'
21940,465846309,"b'This is a breaking change, but I think it will have minimal impact.'"
21846,463925857,b'Move this to `EFCore.Specification.Tests\\WithConstructorsTestBase` and remove the new project'
21846,463995990,"b'@AndriySvyryd The ""record"" tag used in this test is new to c# 9 preview which only compiles under a TargetFramework of ""net5.0"".  The EFCore.Specification.Tests is built under ""netcoreapp3.1"".   If I move my test, as you request, I would have to change the target framework of that project.  \r\n\r\nAlternatively, I could try and write a test under netcoreapp3.1 that mimics the c# 9 compiler by creating a constructor with a nameless parameter.  \r\n\r\nIs there a separate place where ""net5.0"" specific tests will eventually go that I could use? or will the test code-base move to net5.0 at some time in the future? \r\n\r\nWhat is your recommendation?  '"
21846,463998366,b'Test projects are cross compiled on netcoreapp5.0 & netcoreapp3.1 tfms. You should be able to use ifdef to write a test which skips on netcoreapp3.1 if the feature is not available there.'
21846,464132450,"b""@smitpatel.  Thanks!!  Doing a conditional compile on #if NET5_0 gets me half way there.  I also need the language version to be 9.0 (or preview) for the c# 9 record syntax to be recognized.  It does not look like the language version sets any symbols that I can conditionally compile on.  Even if it did, I don't think that EFCore is running a multi-target compile under the c# 9 (or preview) language version so my test wouldn't get run anyway."""
21846,464562133,b'@mikewodarczyk You can add `<LangVersion>9</LangVersion>` to EFCore.Specification.Tests.csproj'
21846,465144526,b'Revert these changes.'
21846,465144762,b'Remove Record.Tests'
21846,465146153,b'avoid new test class. Add test to `WithConstructorsTestBase` with appropriate class/test added to that context with ifdef\r\n'
21846,465352270,b'```suggestion\r\n```'
21846,465352693,"b'```suggestion\r\n            var blogTitle = ""xyzzy"";\r\n```'"
21846,465352808,b'Where does `_blogId` defined?'
21940,465903108,b'Move this to `CollectionEntry`'
21940,465905717,"b""Shouldn't we also check the state of the join entities for skip navs?"""
21940,465906200,"b""Shouldn't we mark both FKs as modified?"""
21940,465906442,b'Move this to CollectionEntry'
21940,465932621,"b""Yes, good catch. I'm mad at myself because I realized that last night, but apparently by this morning I forgot..."""
21940,465962136,"b""Don't send out PRs just before community standup \xf0\x9f\x98\x84 """
21946,466039337,b'Use separate calls instead of interpolation for simple patterns like this.'
21941,465914615,b'```suggestion\r\n                var unmappedProperty = entityType.GetDeclaredProperties().FirstOrDefault(\r\n```'
21941,465914933,b'Add a note that this condition is only needed until https://github.com/dotnet/efcore/issues/14121 is implemented'
21941,465919313,b'Add type to `TypeIdentity` and a property like `IsNamed` that returns `true` if a non-default name was specified'
21941,465920655,"b""You really want to make sure it's not null \xf0\x9f\x98\x86 """
21941,465928699,b'Use `TypeIdentity` instead'
21941,465935097,b'`SharedTypeEntity` should throw if `model.HasEntityTypeWithDefiningNavigation(targetClrType)` returns `true`. All types with the same CLR type must be either shared or weak.'
21941,465940702,"b'There are places where we make certain decision based on typeIdentity.Type which would go wrong in those cases so needs to be updated. Which can make this much larger change.\r\nIs it necessary? If yes, then can I submit it in a separate PR?'"
21941,465942075,"b'I think the places that need changing are fewer with `TypeIdentity` than without it (compared to current main), but you can do it in a separate PR.'"
21941,465953944,b'I will give it a try.'
21941,466063128,"b'```suggestion\r\n            buildAction(OwnsManyBuilder(new TypeIdentity(ownedTypeName, ownedType), navigationName));\r\n```'"
21950,466095684,"b'The start of this method should verify if _identifier is empty and throw exception.\r\n\r\nAny other place where we are modifying values in _identifier, it should update _identifier correctly and if it is not possible because of IsDistinct or groupBy aggregate then make it empty.'"
21950,466096010,b'GroupBy should also check if it is part of grouping key in which case we can add it to projection even though not projected already.'
21948,466113532,b'@ajcvickers  - Why was this necessary to update the entity on database?'
21952,466151345,b'This hurts my eyes that you call IForeignKey variable navigation. \xf0\x9f\x98\xa2 '
21952,466151786,b'refactoring gone wrong'
21952,466152298,b'Should we avoid empty navigation calls?'
21952,466152971,"b""It's hard to do with the way the code is structured. Usually we don't mind unnecessary calls in the snapshot because no one should look at it. But I'll let @bricelam make a call here."""
21948,466520762,"b""Did this fail for the changing tracking proxy test only? If so, it looks like it's because changing an indexer property is not sending a notification to the state manager. This is a bug. (Even if it turns out to be impossible, it should at least be a warning when using change tracking prioxies.)"""
21912,465143725,"b'QueryExecution also happens in FromSql, InMemory & Cosmos providers.'"
21912,465779256,"b'Thanks @smitpatel, did not even know FromSql had its own QueryingEnumerable.\r\n\r\nFor Cosmos, added to both the ""regular"" QueryingEnumerable and to ReadItemQueryingEnumerable, hope that\'s the right thing (/cc @AndriySvyryd)'"
21948,466571755,"b'Yes, only failed for changetracking proxies '"
21952,466663668,b'File an issue. Fine for 5.0'
21959,466663591,b'Can this pair be configured by convention? (I can update that as it can cause SQL assertion updates)'
21959,466724350,"b'Yes, I changed the convention for the FK properties and added TODOs here so you can remove the usings.'"
21960,466731523,b'Rename the other unused members'
21952,466739888,b'https://github.com/dotnet/efcore/issues/21964'
21960,466776175,b'At least in query there are no unused members. Did you have something specific in mind?'
21960,466776948,b'Search for `// Unused`'
21911,464646831,b'Does this need to be re-implemented in subclass overrides? It looks like maybe the implementation can be common and in the base class?'
21911,464698455,"b""I haven't found a base, only abstract classes. I have implemented the method on concrete classes that implement the `PropertyValues` abstract class. This is my first PR on this project, maybe I missed something. Can you give me some clue ? Thanks."""
21911,464933427,"b'@ajcvickers I understand you prev message, sorry I implement the code in the `PropertyValues` class.'"
21911,465184165,b'```suggestion\r\n                value = GetValue<TValue>(propertyName);\r\n```'
21992,468226901,b'You could make `_tptLeftJoinTables` a `List<bool>` and lookup by index for a marginal perf improvement.'
21992,468227753,b'I thought about it. But there is a trade-off. Only Left Join can be eliminated. So if you have 10 level hierarchy and querying for 9th level then there will be 10 sized bool list with only 10th element being true vs 1 sized int list.\r\nOr querying for leaf type keep the list empty vs bool list will still allocate for size of hierarchy. '
21212,439674415,"b'```suggestion\r\n        /// <param name=""deferred""><see langword=""true""/> to defer the creation of the transaction. This also causes transactions to upgrade from read transactions to write transactions as needed by their commands.</param>\r\n```'"
21212,439674438,"b'```cs\r\n/// <remarks>\r\n///     Warning, commands inside a deferred transaction can fail if they cause the\r\n///     transaction to be upgraded from a read transaction to a write transaction\r\n///     but the database is locked. The application will need to retry the entire\r\n///     transaction when this happens.\r\n/// </remarks>\r\n```\r\n\r\n(Below too)'"
21212,439675767,"b'It feels like specifying `BeginTransaction(IsolationLevel.ReadUncommitted, deferred: false)` should upgrade to `Serialized`. Or maybe throw...'"
21212,439712016,"b'Updated code now upgrades this case to Serialized. `BeginTransaction(IsolationLevel.ReadUncommitted)` now calls `BeginTransaction(IsolationLevel.ReadUncommitted, deferred: true)`.'"
21992,468386396,"b""Just a small perf comment - a list of size 1 or 10 is likely identical perf-wise, because of locality of reference: List's memory is contiguous (unlike LinkedList), and memory is loaded into CPU caches in pages and not as individual bytes. So all 10 cells are loaded in one go (or batch). Of course, if you have hundreds of cells things look different, so it's case-by-case. Memory size is still different, though again not sure that's meaningful here.\r\n\r\nNot saying any optimization is important here though, just some observations."""
14122,369224032,"b""This isn't ever set. Let's remove it; I don't think it belongs here anyway."""
14122,369224234,b'Use `bool` instead of string'
14122,369224404,b'Use `bool`'
14122,369224853,"b""If there is no model snapshot, PendingChanges should be false--they're not using Migrations"""
14122,369225165,"b""Handle non-relational providers (the won't have an IMigrationsAssembly or IMigrationsModelDiffer)"""
14122,369226043,"b""We shouldn't connect to the database when getting a list for tab expansion. We should also fail gracefully when we can't connect to the database (e.g. show a warning and set Applied to null)"""
14122,369226797,"b""GetMigrations skips building the project when getting a list for tab-expansion. It shouldn't skip building the project during `Get-Migration`"""
14122,369227750,b'We may want to use a [formatting file](https://docs.microsoft.com/en-us/powershell/developer/format/writing-a-powershell-formatting-file) instead.'
14122,369227960,b'Remove PendingMigrations (below too)'
14122,369228410,b'I think a warning when this is true would be better. Something like...\r\n\r\n> There are pending model changes. Add a new migration.'
14122,369228847,b'Having the warning on `list migrations` would be nice too'
14122,369229385,b'Use a JSON boolean'
14122,369229590,b'Remove'
14122,369230233,b'(for applied in `list migrations` too)'
14122,369886719,b'Will do'
14122,369886865,"b""I'll read up on that for sure"""
14122,369887241,"b""Okay, sounds good. I had an inner conflict about this one because I thought you guys were preferring to use strings for reporting, I'll be sure to change these"""
14122,370863329,"b""lol, I need to read up on it too. I'd be fine switching to it in a later PR"""
14122,372706108,"b""I feel like I'm getting some competing comments. This is set inside of the [DbContextOperations.cs](https://github.com/Psypher9/EntityFrameworkCore/blob/b62c28f1cf822f5b235b9aad58b37b9e46db910e/src/EFCore.Design/Design/Internal/DbContextOperations.cs#L251) and you asked me to set it to be of type `bool` in the comment below. How should I handle this particular comment?"""
14122,373125189,b'Pending**Changes**: change to bool; Pending**Migrations**: remove'
14122,373320796,b'Ah I see. I misread'
14122,376689684,"b""This actually was set before and I have it being set on my local repo. A few weeks ago I saw that there was a merge conflict and tried to resolve here on GitHub. I'll push that up so you can take a look at it. This is what happens when I try to handle conflicts when I'm tired lol \xf0\x9f\x98\x84 """
14122,376690822,b'What will they be using? Is there an example I can look at?'
14122,377849571,"b'I think just wrapping the code below inside `if (migrationsAssembly != null)` should be enough. You can test using an in-memory DbContext:\r\n```cs\r\nclass NonRelationalContext : DbContext\r\n{\r\n    protected override void OnConfiguring(DbContextOptionsBuilder options)\r\n        => options.UseInMemoryDatabase(""NonRelational"");\r\n}\r\n```\r\n```ps1\r\nGet-DbContext -Context NonRelationalContext\r\n```'"
14122,468699417,b'```suggestion\r\n        /// <summary>\r\n        ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to\r\n        ///     the same compatibility standards as public APIs. It may be changed or removed without notice in\r\n        ///     any release. You should only use it directly in your code with extreme caution and knowing that\r\n        ///     doing so can result in application failures when updating to a new Entity Framework Core release.\r\n        /// </summary>\r\n```'
14122,468699620,b'```suggestion\r\n            info.ProviderName = provider.Name;\r\n```'
14122,468699765,b'Wrong indentation. '
14122,468700429,b'Indent'
21989,468240527,"b'```suggestion\r\n                    foreach (var joinEntry in stateManager.GetEntriesForState(added: true, modified: true, deleted: true, unchanged: false))\r\n```\r\n\r\nAnd remove the redundant checks below'"
21989,468252761,b'For Modified you need to check whether the FK properties are modified'
21989,468259885,"b'For skip navs `foreignKey` is not defined on `relatedEntry`, but on `joinEntry`'"
21989,468260831,"b""Detached entries aren't returned here"""
21989,468261569,"b'```suggestion\r\n                    foreach (var joinEntry in stateManager.GetEntriesForState(added: !value, modified: !value, deleted: !value, unchanged: value).Where(\r\n```'"
21989,468269946,"b""I don't think it's even necessary to check related entities for skip navigations"""
21989,468760719,"b'This detects the case where a related entity is deleted, but the join table entry is not yet marked as deleted because the change has not yet been cascaded there. Would it be better to look through each join entity that references this and check explicitly if the entity on the other side is marked as deleted? Or do you have some other suggestion?'"
21989,468775909,b'All states are now needed.'
21989,468776687,b'I went with checking for Deleted in skip-specific code above since it aligned with other changes here.'
22017,468784225,b'Why remove this test?'
22017,468784823,b'Never mind; I see.'
22017,468785224,b'So when we create a new builder we need to remember to add it to this list?'
22017,468785669,"b""It's covered by the expression-based test being run on the non-generic implementation"""
22017,468786258,b'Yes'
22017,468789089,b'typeparam in XML docs?'
22019,468842454,b'Should only visit ETs mapped to this table'
22019,468846618,"b'Use the mapping for the current `entityType`, as other types sharing the table might be using different strategies'"
22019,468847883,b'IncludesDerivedTypes was making sure that hierarchy is mapped to same table. Are both conditions needed?'
22019,468849310,"b""IncludesDerivedTypes means that there are rows corresponding to the derived types in this table, it doesn't mean that all the columns are mapped as well"""
22019,468851442,b'Then do we need condition of IncludesDerivedTypes?'
22019,468852787,"b""We don't *need* it, but if it's false then short-circuiting is faster"""
22019,468854795,b'Updated both.'
22021,468870091,"b'Something is going haywire here. 3.1.6 versions of these packages exist on NuGet.org. So, why was 3.1.7 built against 3.1.3 packages\xe2\x9d\x94 \r\n\r\n/cc @wtgodbe @mmitche @rbhanda  @silvioguiso '"
22021,468906601,"b""Figured out offline. Problem relates to coherent parent dependencies and lack of strict coherency in Arcade's 3.x releases."""
22037,469490952,b'This also fixes the breaking change we discussed today.'
22037,469491307,b'Similar for DbFunctionAttribute.GetIsNullable?'
22037,469492818,b'Will do.'
22040,469598429,b'Should we call this parameter still clrType? If we had an ambiguity causing the Property to be named ClrType then it should exist for parameter too in some way.'
22040,469598985,b'SetClrType takes parameter named type?'
22040,469599570,b'This is actually decreasing readability of code. the entity type create for join table is joinType but clr Type is joinEntityType is confusing.'
22040,469625593,b'Or rename the property too'
22040,469625741,"b""Yes, it's already clear what it is"""
22040,469626529,b'but it is inconsistent in different dimension. :trollface: '
22030,469484444,b'nit: 4 space indentation'
22030,469489062,b'Also Relational/SqlServer and other provider specific cache keys'
22030,469724483,b'Space indentation fixed and the Equals(object) method simplified'
22030,469724589,"b'OK, I will do it now'"
22030,469744341,b'Ready. I added what I found.'
22040,470032760,"b""Reasons I didn't rename properties:\r\n* When using a parameter its hard to find a case where the type (Type) isn't explicitly visible in the method definition. This is not true for properties where the code may reference the property without any specific indication of type, meaning that the distinction from, for example, IEntityType, is not immediately obvious.\r\n* It's much more breaking. We would need to obsolete all the existing properties."""
22040,470033252,"b""Same reason as above for why I didn't rename methods."""
22040,470033437,b'Agreed.'
22033,469578752,"b'we could also optimize the other way around, i.e. `(a != null ? null : new { Member = b, ... }).Member` ->  `a != null ? null : b`, or even generalize member access over conditional: pushdown member access to iftrue and iffalse, and if member access is over null constant, just resolve to the null constant. but prolly less risky to do targeted optimization'"
22033,469579838,"b""why not use complex navs or gears of war? you didn't want to create the dto? model seems trivial"""
22033,469597715,"b'The main goal of this is to make sure null removal can run and shorten it. Anything else while likely be work but not sure if it works in all cases. Like member access over null can resolve to null constant but what if the type is non-nullable then it is going to null ref. Which raises the question (about the query you gave example of), why write query so badly that it is causing null ref. The specific case being fixed is only targets scenarios which are kind of generated by AM or OData - ""the null checks"".'"
22033,469597929,"b'Will move. While looking at issue, I thought the DTOs were essential to repro.'"
22038,469497832,b'Conflict with #22037'
22069,470875019,b'```suggestion\r\n        private ConfigurationSource? _typeConfigurationSource;\r\n```'
21996,467515533,"b'I think you already know about these internal usages @AndriySvyryd, but just in case.'"
21996,467515570,b'/cc @bricelam'
21996,468588167,b'@bricelam same'
21996,468793721,b'Remove blank lines'
21996,468794538,b'Add an issue # for TODOs or remove them'
21996,469885005,"b'Removed, these are quite minor and we can wait for someone to complain first.'"
21996,469895244,"b""Feels like this can be an assertion instead of a runtime switch statement check. I don't believe any callers to `AnalyzeMember` can pass in a different symbol kind then these four."""
21996,469895616,b'This feels like unreachable code.'
21996,469896677,b'Why did we leave out `SymbolKind.Method` here?'
21996,469897747,"b'It seems it would be better if you have different language specific analyzer assemblies for language specific code. Otherwise, your analyzer will cause a C# only solution to load all VB Roslyn assemblies and vice versa, which has an unnecessary assembly load overhead.'"
21996,469899138,"b'Why report duplicate diagnostic for each partial declaration? Normally, analyzers just report diagnostic on first symbol declaration. Otherwise, users can get flooded with duplicate diagnostics for types with multiple partial declarations.'"
21996,469899533,b'Do we do similar analysis for generic type arguments of named types?'
21996,469913519,"b""You're right, this is a remnant from pre-refactored code. Will remove."""
21996,469931916,"b""Thanks, left that out by mistake. I've implemented this."""
21996,469933064,"b'This is meant to handle the case when a member is accessed on a type that is marked as internal - commenting this out makes test Invocation_on_type_in_internal_namespace fail (as well as some others), am I missing something?'"
21996,469972709,"b'Ah my bad, please ignore.'"
21996,470646574,"b""That's a good point - even if the assembly load overhead would only apply at build time...\r\n\r\nThe problem is that our analyzers package - Microsoft.EntityFrameworkCore.Analyzers - isn't typically referenced directly by user, but is brought in transitively as a dependency of Microsoft.EntityFrameworkCore. I know that ASP.NET also have a similar pattern, do you have any guidance on this, or any particular reason why the additional VB assembly load should be avoided?\r\n\r\nIf this is a big issue, we can drop the VB dependency altogether - it's only used to produce better/narrower diagnostic locations - the warnings themselves would still appear as we're using language-independent APIs here."""
21996,470648716,"b""My logic was that the first syntax declaration might not be the one actually referencing the base class. I could technically go through all syntax declarations, and find the one (or ones?) with a base list that references the problematic base symbol - but that seems a bit overkill. It's probably fine to also flag the first declaration and report the location of the subclass.\r\n\r\nBasically I'm fine with aligning to whatever best practices exist or what other analyzers do - let me know what you think."""
21996,470654599,b'Not at the moment. Do you have guidance on how to get the generic type arguments of an ITypeSymbol?'
21996,470654843,"b'Normally the way this would be done is that your analyzer package will have 3 assemblies - Core, C# specific and VB specific. Then the MSBuild/SDK machinery will ensure that C# projects have analyzer references to first two and VB projects to the first and third. This way if someone has a C# only solution or a VB only solution, they do not get penalized by loading non-required language Roslyn assemblies (which can be quite a few as most of Roslyn layers are divided the same way). @jmarolf can probably help with setting up/guiding on the SDK pieces. '"
21996,470656284,"b'Oh nice, was not aware of this... Any pointer to an analyzer package which does this would be sufficient!'"
21996,470660824,b'@jmarolf did this work for the `Microsoft.CodeAnalysis.NetAnalyzers` nuget package that we now insert into the .NET SDK. He can give pointers on how you can match his apporoach.'
21996,470662895,"b'Seems reasonable given you are actually flagging the type in base list. You can also consider switching from a symbol action to a SyntaxNode action registered for all different named type declaration kinds (ClassDeclaration, StructDeclaration, etc.), though that would need to go into language specific parts. I think what you have now is probably okay.'"
21996,470670193,"b""The previous version of this analyzer was purely syntax-based, but that meant constantly looking up symbols for the syntax nodes, which let to the perf issues this PR is meant to address. Granted, we were doing that for every single invocation and member access, and doing that only for class declarations may be OK - but I'd rather just avoid it."""
21996,470739838,"b""I'll defer to @AndriySvyryd on these since they're here for seed data"""
21996,470787812,"b""Filed https://github.com/dotnet/efcore/issues/22063\r\nLet's just say that the current approach is not as robust as it should be"""
21996,471011965,"b""@ajcvickers newly-discovered violation (shouldn't Dependencies be public?)\r\n\r\nShould I open an issue to track outstanding internals problems?"""
22082,471055153,b':ok: just one wrong SHA'
21996,471092977,b'Scoping this out to #22085'
21996,471093318,"b'Scoping out to #22086, any guidance on this would be appreciated.'"
21996,471101103,"b'Opened  #22087 for RelationalAnnotationProviderDependencies, the rest are already known.'"
22088,471134959,"b""Instance type is not related. Instead the associated TypeMapping's provider CLR type should be used."""
22088,471162062,b'Replaced instance.Type.UnwrapNullableType() with instance.TypeMapping.ClrType.'
22079,471702489,b'```suggestion\r\n        public void Can_reparent_optional_without_DetectChanges(CascadeTiming cascadeTiming)\r\n```'
22079,471702734,b'```suggestion\r\n        public void Can_reparent_required_without_DetectChanges(CascadeTiming cascadeTiming)\r\n```'
22104,471827656,b'also update helix.proj file'
22091,471690501,"b""```suggestion\r\n    <value>There is no string-based representation of this query as it's executed using 'ReadItemQueryAsync({resourceId}, {partitionKey})'.</value>\r\n```"""
22091,471693629,"b'```suggestion\r\n               {\r\n                    TryGetResourceId(out var resourceId);\r\n                    TryGetPartitionId(out var partitionKey);\r\n                    return CosmosStrings.NoReadItemQueryString(resourceId, partitionKey);\r\n               }\r\n```'"
22091,471695685,b'And move the implementation to the nested class'
22091,471758936,"b""Please put this in it's own separate test."""
22091,471759097,b'Like above.'
22109,471942265,b'May be a HashSet?'
22109,472322431,b'Updated. It should be using OrdianlIgnoreCase too'
22091,472351391,b'Why this code still existing in different test? \xf0\x9f\x98\x9b '
22091,472352349,b'This should call base.'
22091,472354118,"b'I moved it to a separate test, as requested.'"
22091,472355466,b'But you did not remove the code from existing test. I will clean it up in one of the PRs.'
22129,472541315,b'noncached/sharedcache rather than old/new?'
22129,472543413,"b""Temporary. Just keeping the old one around to see when it fails but the new one doesn't."""
22129,472543582,"b""I'm abusing the CI since I can't repro locally"""
22123,472619130,b'Can use Any'
22123,472650823,b'```suggestion\r\n                        && allNonSharedProperties.All(p => p.IsNullable))\r\n```'
22123,472658830,b'```suggestion\r\n                    && propertyMappings.Any(pm => principalEntityTypes.Contains(pm.TableMapping.EntityType)))\r\n```'
22123,472662276,b'It should be\r\n```C#\r\n&& !allNonSharedProperties.Any(p => !p.IsNullable))\r\n```'
22136,473384793,b'May be DRY this?'
22136,473388296,"b""This ordering is somewhat confusing.\r\nIf we are removing Kiwi then why the ordering is not Kiwi->Birds->Animals?\r\nIf Birds is removing row first then wouldn't cascade delete cause row from Kiwi to be missing?"""
22136,473388759,b'I assume this is right change :trollface: '
22136,473389926,b'Seems that some extra joins were eliminated'
22136,473435364,b'Kiwi was missing an FK to Birds'
22136,473458289,b'@dotnet/efteam - For new API review.\r\n\r\n(looks fine to me)'
22145,474134485,"b'Added this to strip trailing `_`, `-`, and whitespace. Matches what the C# namer would do.'"
22109,474210086,b'Delete trailing whitespaces'
22109,474215766,b'VS adds them'
22144,474110864,"b""```suggestion\r\n    <value>The query has been configured to use '{splitQueryEnumValue}' and contains a collection in the 'Select' call, which could not be split into separate query. Please remove '{splitQueryMethodName}' if applied or add '{singleQueryMethodName}' to the query.</value>\r\n```"""
22144,474112272,b'Exception message review iteration 1. \xf0\x9f\x98\x86 '
22109,474312062,"b""It's actually `ResXResourceWriter.Generate()` that puts them in"""
22109,474315900,"b""And it's random comments like this that lead to random ideas like #22156 \xf0\x9f\x98\x81"""
22109,474315962,b'@bricelam: Could you paste URL for this method? (or repository URL)\r\nMaybe someone could fix this'
22109,474317027,"b""Looks like it's fixed in .NET Core. lol, good luck getting it patched in .NET Framework.\r\nhttps://github.com/dotnet/winforms/blob/master/src/System.Windows.Forms/src/System/Resources/ResXResourceWriter.cs"""
22109,474317595,"b'And yes, it really is in System.Windows.Forms.dll \xf0\x9f\xa4\xa6\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f (I tried to get it moved in https://github.com/dotnet/winforms/issues/1342)'"
22164,474793017,"b""I prefer to put each parameter on its own line if they don't all fit on the same line as the method name."""
22164,474793364,b'I also like the `=>` on the next line.'
22164,474794349,"b""I'd split this like this:\r\n``` cs\r\nvar discriminatorMappingCompleteAnnotation = annotationList.FirstOrDefault(\r\n    a => a.Name == CoreAnnotationNames.DiscriminatorMappingComplete);\r\n```\r\nor\r\n``` cs\r\nvar discriminatorMappingCompleteAnnotation = annotationList\r\n    .FirstOrDefault(a => a.Name == CoreAnnotationNames.DiscriminatorMappingComplete);\r\n```\r\nI find the dangling `=` unesttling.\r\n\r\nI've often wondered about doing it like this, since it matches my preferences of `=>`:\r\n\r\n``` cs\r\nvar discriminatorMappingCompleteAnnotation\r\n    = annotationList.FirstOrDefault(a => a.Name == CoreAnnotationNames.DiscriminatorMappingComplete);\r\n```"""
22164,474796715,"b""I tend to only split when there are three or more (or they're too long)."""
22164,474798176,"b'`+` at the beginning always felt strange to me, but I can also see how it makes more sense.'"
22164,474799221,"b""I feel like there's no pretty way to make a multi-line `for`, `foreach`, `switch`, etc. statement."""
22164,474799926,b'\xf0\x9f\xa4\xae Those attributes need to be closer (or better grouped with) to their parameter.'
22164,474803547,"b""A thousand times yes, I find it really annoying that we robotically split lines on every condition... Hopefully there's a way to get editorconfig/jetbrains to do this right.\r\n\r\nIf we're really opening things, I also dislike putting logical operator on the new line. For alignment purposes putting it on the previous line is usually much better."""
22164,474804164,b'I do like the space save of having the on the same line if they fit.'
22164,474804515,b'FWIW I prefer it how it is - the entire expression is on its own line rather than split across multiple.'
22164,474804697,"b""As in https://github.com/dotnet/efcore/pull/22164/files#r474796715, I'd prefer this to be on the same line if it fits."""
22164,474805851,"b'Uh, why not just a single interpolated string? Many similar below...'"
22164,474806565,b'If this were just a single interpolated string that would go away'
22164,474806919,"b'Feels like this should either go above with the select, or below with the expression (possibly moving ToList down to its own line)'"
22164,474807114,b'Interpolated?'
22164,474807718,"b'We should have a namespace alias JB (i.e. `[JB.NotNull]`). Also I agree it would be better to group: `[InvokerParameterName, JB.NotNull] string parameterName`'"
22164,474826885,"b""We've discussed the dangling = and while it's not consistent with => the first line just looks too jarring without it."""
22164,474827946,b'We could manually move it to a variable.'
22164,474841264,"b""I prefer Brice's version 1"""
22164,474841948,b'Unrelated to code clean up but if this is going to same line then it can be added to same interpolated string.'
22164,474846112,b'Either same line or new line is fine.'
22164,474846832,b'Try to get => on the next line.'
22164,474849946,"b""Look at what GitHub's default margin is.\r\nTry to not break on the assignment operator\r\n"""
22164,474851317,b'Try to not change newlines that are already there.'
22164,474859368,b'Try not to put the attributes on the next line\r\nUse an alias where needed.'
22164,474919423,"b""Do we want to _force_ => onto a new line, or just make it the default? (In this case, it won't change unless we force.)"""
22164,474921265,b'I assume that forcing it will result in it being on a separate line by itself since the existing line break after it would be preserved'
22164,474922539,"b'No. With force we get:\r\n\r\n```C#\r\n        private void UpdateDatabaseImpl(\r\n            [CanBeNull] string targetMigration, [CanBeNull] string connectionString, [CanBeNull] string contextType)\r\n            => MigrationsOperations.UpdateDatabase(targetMigration, connectionString, contextType);\r\n```'"
22164,474923458,"b""GitHub seems to display 128. This can now be set in the editor config, which it wasn't before.\r\n\r\n"""
22164,474923659,"b""Then let's do it"""
22164,474971424,b'I have not been able to figure out how to change the alias thing yet. It might require some manual changes.'
22164,474972501,b'This would need to be fixed manually to go before the arrow'
22164,474973592,b'Is it possible to avoid jagged arguments? The formatter should make them either single-line or 1-per-line'
22164,474973628,"b""I tried not to make any manual changes so we can see what the cleanup is doing. When we get to an agreement on that, I'll also do manual changes as need."""
22164,474973931,"b""I'll look..."""
22143,474217817,b'Remove this'
22143,474221060,"b'Is the JObject value actually getting reloaded? If not then changes to it would still get persisted on SaveChanges after Reload.\r\n\r\nAdd this:\r\n```C#\r\nvar blogJson = entry.Property<JObject>(""__jObject"").CurrentValue;\r\nblogJson[""unmapped""] = 2;\r\n```\r\n\r\nAfter Reload\r\n```C#\r\nblogJson = entry.Property<JObject>(""__jObject"").CurrentValue;\r\nAssert.Null(blogJson[""unmapped""]);\r\n```'"
22143,474224953,b'```suggestion\r\n        [ConditionalTheory]\r\n```'
22143,474355193,"b'Should I just copy the classes? Also, I need the `Xunit` namespace. Did you mean just to remove line 10?'"
22143,474359857,"b'`entry.Property<JObject>(""__jObject"").CurrentValue` is `null` before save.'"
22143,474364761,"b'Going to assume you meant after save. The problem is after reload, it is also `null`. Did you mean `Assert.Null(entry.Property<JObject>(""__jObject"").CurrentValue)`?'"
22143,474366683,"b'Or is `entry.Property<JObject>(""__jObject"").CurrentValue` supposed to be non-`null` after reload?'"
22143,474383248,"b'As it would turn out, `__jObject` is unchanged after any query that returns the entity if it is actively tracked by the context, and completely removed after reload, with any subsequent queries which return the entity also not updating the value. The only way to get the real value back again is to detach the entity and re-query it. Is this a separate issue?\r\n\r\nFor example, this fails:\r\n```csharp\r\nvar entry = context.Add(new Item { Id = 1337 });\r\n\r\nawait context.SaveChangesAsync();\r\n\r\nvar blogJson = entry.Property<JObject>(""__jObject"").CurrentValue;\r\nblogJson[""unmapped""] = 2;\r\n\r\nvar firstItem = await context.Set<Item>().FirstOrDefaultAsync();\r\n\r\nblogJson = context.Entry(firstItem).Property<JObject>(""__jObject"").CurrentValue; // context.Entry returns State: Unchanged entry even though __jObject is dirty, and this is supposed to be a fresh query.\r\nAssert.Null(blogJson[""unmapped""]); // Fails\r\n```'"
22143,474391345,"b""Yes, I'm only talking about the last line. Copying the classes would be preferable and make them private."""
22143,474391523,b'Ok.'
22143,474391702,b'Will do.'
22143,474409781,"b'> Assert.Null(blogJson[""unmapped""]); // Fails\r\n\r\nYes, querying normally doesn\'t reload the values, but `Reload` should overwrite them.'"
22143,474432743,b'Understood.'
22143,474462015,"b'This doesn\'t work because the reload methods will generate a query that selects only children with submitted properties.\r\n\r\n```SQL\r\nSELECT VALUE {""Id"" : c[""Id""], ""Discriminator"" : c[""Discriminator""], ""id0"" : c[""id""], """" : c[""""]}\r\nFROM root c\r\nWHERE ((c[""Discriminator""] = ""Item"") AND (c[""Id""] = @__p_0))\r\nOFFSET 0 LIMIT 1\r\n```\r\nThe only way I can see to make this work is to have the property translate to `c` instead of `c[""""]`, then hope the conversion to `JObject` does the rest. Either that or replace the logic of the reload methods with just detaching the entity and querying via it\'s key.'"
22143,474482762,"b'Did that. `KeyAccessExpression` now converts to `$""{AccessExpression}[{Name}]""` if `Name.Length > 0`, but to `$""{AccessExpression}""` otherwise. Is this a reasonable temporary solution? This will need to be changed once querying non-persisted values is implemented unless said implementation avoids translating said values altogether.'"
22143,474489906,"b'The other option is to just do `SELECT c` and have some logic to interpret which key property is mapped to what value. A derivative of that would be `SELECT VALUE {""Id0"" : c[""id""], ""document"" : c}`, in other words, selecting all the non-member-bound keys, then the document. I don\'t know what the best alternative is, but for now I will stick with the simplest (`"""" : c`).'"
22143,474821089,b'This is a reasonable solution for now'
22143,474822179,"b'```suggestion\r\n            // TODO: Remove once Reload supports non-persisted properties - issue #14121\r\n            : $""{AccessExpression}"";\r\n```'"
22143,474822354,b'```suggestion\r\n                // TODO: Remove once Reload supports non-persisted properties - issue #14121\r\n                && property.Name != EntityFrameworkCore.Metadata.Conventions.StoreKeyConvention.JObjectPropertyName\r\n```'
22143,474822610,"b'```suggestion\r\n            await using var testDatabase = CosmosTestStore.CreateInitialized(""ReloadTest"");\r\n```'"
22143,474998116,"b""This doesn't necessarily need to be removed once reloading non-persisted properties is supported, more that it wouldn't need to be used."""
22143,475001470,"b""I don't see how #14121 would remove the need for this. If anything, a fix for #17670 would."""
22143,475002415,"b'The former is related to removing non-persisted properties from queries and this is the opposite scenario; `__jObject` needs to be translated but is not actually persisted as a value, which is why a fix to the latter issue would be useful, as it could include mapping these properties to expressions as opposed to columns.'"
22143,475003179,b'See [here](https://github.com/dotnet/efcore/pull/22143/files#r475001470) and [here](https://github.com/dotnet/efcore/pull/22143/files#r475002415).'
22143,475004721,b'Perhaps the comment should be reworded. Only `__jObject` should be mapped to `c` instead of all non-persisted properties'
22143,475005128,"b'`KeyAccessExpression` must have a `Name` otherwise it is not accessing any key in the JSON.\r\nIn case of selecting the ""c"" from iterator directly it should reference to the root reference expression.\r\nA proper fix for #17670 & #14121 will follow the above design principal. But fixing that issue is a lot more complicated.\r\nThis code which is being put is just a work-around till both (or either) of them are fixed.\r\n\r\nIn any case I want to clean up this work-around in future.'"
22143,475005534,b'You can change this as well to point to #17670 and make the condition more general'
22172,474998098,b'Will manually fix this.'
22172,474999103,"b""Looks like I made this always put a new parameter on a new line. This wasn't my intention, but maybe it's okay?"""
22172,475001751,"b'Is formatting of ""?"" supposed to be 1 indent from statement above or 1 indent from parent block?'"
22172,475001829,"b""I can't find a way to not make this jagged and not always use a new line."""
22172,475002597,"b'Do we need to change this to ""Never"". I think if it is not long it should be ok?'"
22172,475002682,b'![image](https://user-images.githubusercontent.com/1430078/90941354-bcdf4500-e3c6-11ea-8d1d-e6cd03c77bb4.png)\r\n![image](https://user-images.githubusercontent.com/1430078/90941379-c9639d80-e3c6-11ea-8edf-911ed79c37ec.png)\r\n![image](https://user-images.githubusercontent.com/1430078/90941401-e0a28b00-e3c6-11ea-81ad-f18d993ee03b.png)\r\n'
22172,475002788,b'You tell me?'
22172,475002945,b'I prefer expression bodies to be consistently on a new line.'
22172,475003235,b'Dislike for forced line breaks \xf0\x9f\x98\xa2 '
22172,475003514,"b""This isn't a forced line break, it's just indentation."""
22172,475003994,b'@AndriySvyryd can decide.\r\n\r\nIt is not exact ternary.\r\nIt is the condition ternary went to multiline and wrapped from return. I was not expecting ternary to wrap again as it is already doing from the line it started.'
22172,475004674,"b""I'm not following. It looks correct to me."""
22172,475005513,b'```C#\r\nreturn a\r\n    ? t\r\n    : f\r\n\r\nreturn a\r\n    && b\r\n        ? t\r\n        : f\r\n```\r\n\r\nThe multi-line condition is causing another indentation in IfTrue/IfFalse.\r\n'
22172,475006024,b'Still looks right to me. :shrug: '
22172,475006970,b'Then I have nothing else to say.'
22172,475019528,b'This is fine'
22172,475019648,b'This will mess up a lot of XML comments'
22172,475020376,b'Either is fine with me'
22172,475020705,"b'How about guidelines to 128 so we see what fits in GitHub, but keep the hard wrap at 140?'"
22172,475020960,"b""I think it's good to make the distinction between these clearer:\r\n```C#\r\npublic virtual int Version = 0;\r\n```\r\n```C#\r\npublic virtual int Version => 0;\r\n```\r\n```C#\r\npublic virtual int Version { get; } = 0;\r\n```"""
22172,475021117,"b""That's fine"""
22172,475033938,"b""I'm seeing 164 on GitHub these days"""
22172,475102204,"b'@bricelam Looks like I miscounted with 128 (It wrapped in Sublime without be realizing it.) However, I am now seeing 150 on Linux:\r\n![image](https://user-images.githubusercontent.com/1430078/90959887-83541b80-e452-11ea-8d11-843bd913e4bc.png)\r\n'"
22172,475102259,b'And 164 on Windows:\r\n![image](https://user-images.githubusercontent.com/1430078/90959923-c44c3000-e452-11ea-9c06-1bf9867fcdb2.png)\r\n'
22172,475102379,b'Both in Chrome. I think for now we should leave both things set to 140.'
22185,475252905,b'More verbose than needed'
22187,475258455,b'again'
22187,475258909,"b""Yeah, don't know why it is doing this. Will investigate after getting stuff merged.\r\n\r\n(Note that Code Cleanup processes the shared code for each project, which is why this keeps popping up.)"""
22149,475259447,b'Can remove'
22149,475259479,b'Can remove'
22188,475270566,b'\xf0\x9f\x98\xac'
22188,475271100,b'Where would you have expected this to split the line?'
22188,475271603,b'It\xe2\x80\x99s the dangling `=` issue we discussed previously.'
22188,475271893,"b""Ah, right. I'll check if this is configured differently for `??=`."""
22184,475272141,b'\xf0\x9f\x91\x80 '
22195,475739036,b'\xf0\x9f\x93\x9d This line eliminates the need for the **\\_.\\_** files.'
22192,475774132,b'should we also remove dotnet5 sources?'
22192,475780209,"b""Yeah, we can probably do that now in efcore. I was keeping it around in other repos in case they still had some dangling dotnet5 dependencies, but looks like we're all squared away here."""
22153,475732418,b'Should we have better name for this? A property may not necessarily be implicitly created even if it is shadow property. Or does IConventionProperty captures it some way that it is not defined by user explicitly?'
22153,475740941,b'Any reason for not using IsImplicitlyCreated here?'
22153,475744633,b'```suggestion\r\n                    if (existingProperty.GetTypeConfigurationSource() is ConfigurationSource existingTypeConfigurationSource\r\n                        && !typeConfigurationSource.Overrides(existingTypeConfigurationSource))\r\n```'
22153,475748669,b'And few other places.'
22153,475766243,b'Because it should work for indexer properties on non-property bags as well'
22153,475778212,"b""I'll add `&& GetConfigurationSource() == ConfigurationSource.Convention` here"""
22195,475787715,b'```suggestion\r\n### New Rules\r\n\r\n```'
22195,475787806,b'```suggestion\r\n### New Rules\r\n\r\n```'
22195,475787869,b'```suggestion\r\n### Removed Rules\r\n\r\n```'
22195,475792537,b'```suggestion\r\n### New Rules\r\n\r\n```'
22195,475792619,b'```suggestion\r\n### New Rules\r\n\r\n```'
22195,475792726,b'```suggestion\r\n### Removed Rules\r\n\r\n```'
22195,475792952,b'Why not return syntax directly?'
22195,475795538,b'\xe2\x9e\xa1\xef\xb8\x8f These are direct copied from the existing files in the repository.'
22195,475795865,b'\xe2\x9e\xa1\xef\xb8\x8f See https://github.com/dotnet/efcore/pull/22195#discussion_r475795538'
22195,475795945,b'\xe2\x9e\xa1\xef\xb8\x8f See https://github.com/dotnet/efcore/pull/22195#discussion_r475795538'
22195,475795963,b'\xe2\x9e\xa1\xef\xb8\x8f See https://github.com/dotnet/efcore/pull/22195#discussion_r475795538'
22195,475796004,b'\xe2\x9e\xa1\xef\xb8\x8f See https://github.com/dotnet/efcore/pull/22195#discussion_r475795538'
22195,475796073,b'\xe2\x9e\xa1\xef\xb8\x8f See https://github.com/dotnet/efcore/pull/22195#discussion_r475795538'
22195,475796487,b'It seems likely that someone would want to alter this in the future to provide more specific results for VB.'
22197,475823068,b'Can you also run this against cosmos instance? Just to make sure. '
22168,476260205,"b""I see it's merged now, but\r\n```suggestion\r\n            (x, y) => x.Equals(y),\r\n```\r\nwill yield the same result."""
22168,476289615,"b'Thanks, did not know that... Do you want to submit a cleanup PR for this (and the same for FloatValueComparer)?'"
22168,476313887,"b'Yep, will send one.'"
22168,476323297,b'--> https://github.com/dotnet/efcore/pull/22212'
22168,476544494,b'If the value comparer are just doing Equals then do we need a custom value comparer?'
22168,476589134,"b""Agree with @smitpatel. What's the actual issue we're trying to fix here?"""
22168,476641833,"b'Here\'s what\'s happening.\r\n\r\n* The result of `double.NaN == double.NaN` is false, but the result of `double.NaN.Equals(double.NaN)` is true.\r\n* Prevoious to this PR, floating point properties would get a [default ValueComparer](https://github.com/dotnet/efcore/blob/release/5.0/src/EFCore/ChangeTracking/ValueComparer.cs#L196), whose implementation of Equals is Expression.Equal. That calls the ""operator"" version which returns false.\r\n* This PR (and #22212) fixes that by having a specialized value comparer which calls double.Equals instead of ==, which works correctly.\r\n\r\nIt may be better to fix this by having a DefaultDoubleValueComparer which is the same as DefaultValueComparer, but calls Equals instead of ==: it\'s cleaner and would work universally (e.g. Cosmos). @ajcvickers if that makes sense I\'ll submit that. If we don\'t do that, we probably want to clean up and remove double/float from DefaultValueComparer as it doesn\'t work correctly for NaN.\r\n'"
22168,476644797,"b'@roji Yes, do that.'"
22168,476649685,b'@roji maybe it makes sense to close https://github.com/dotnet/efcore/pull/22212 and incorporate that change into your coming PR.'
22168,477248230,"b'Thanks @gfoidl, submitted #22242 to clean this up.'"
22227,476904267,b'Filed #22231 '
22227,476904370,b'Filed #22230 '
22227,476905106,"b'I tried using ""recommended approach"" as per release notes and JSON serializer. It did not work since we are create ad-hoc exception (rather than actual one being thrown which would have stack trace and other data). \r\nIf we should have these then I can file an issue to add them again.'"
22227,476905969,b'Does it compile from commandline without this?'
22227,476907279,b'No \xf0\x9f\x98\x9e '
22227,476907981,b'File an issue to discuss'
22227,476908814,b'Seems fine to remove them. It will also stop us being noise when people search for code using BinaryFormatter. \xf0\x9f\x99\x83'
22227,476909994,b'https://github.com/dotnet/efcore/issues/22232'
22227,476957865,b'Upgrade to 3.1.7 and remove aspnetcore'
22227,477391099,b'Design/SqlServer.Tests/CrossStore failed without aspnetcore on netcoreapp3.1'
22227,477393294,b'\xe2\x98\xb9 One of these days...'
22227,477429695,"b'Just curious, what was the error here? Why do we still need aspnetcore?'"
22227,477435046,"b'```\r\nIt was not possible to find any compatible framework version\r\nThe framework \'Microsoft.AspNetCore.App\', version \'3.1.0\' was not found.\r\n  - The following frameworks were found:\r\n      5.0.0-preview.8.20414.8 at [F:\\workspace\\_work\\1\\s\\.dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\n\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.AspNetCore.App&framework_version=3.1.0&arch=x64&rid=win10-x64\r\n=== COMMAND LINE ===\r\n""F:\\workspace\\_work\\1\\s\\.dotnet\\dotnet.exe"" exec --depsfile ""F:\\workspace\\_work\\1\\s\\artifacts\\bin\\EFCore.SqlServer.Tests\\Release\\netcoreapp3.1\\Microsoft.EntityFrameworkCore.SqlServer.Tests.deps.json"" --runtimeconfig ""F:\\workspace\\_work\\1\\s\\artifacts\\bin\\EFCore.SqlServer.Tests\\Release\\netcoreapp3.1\\Microsoft.EntityFrameworkCore.SqlServer.Tests.runtimeconfig.json""  ""F:\\workspace\\_work\\1\\s\\.packages\\xunit.runner.console/2.4.1/tools/netcoreapp2.0/xunit.console.dll"" ""F:\\workspace\\_work\\1\\s\\artifacts\\bin\\EFCore.SqlServer.Tests\\Release\\netcoreapp3.1\\Microsoft.EntityFrameworkCore.SqlServer.Tests.dll"" -noautoreporters -xml ""F:\\workspace\\_work\\1\\s\\artifacts\\TestResults\\Release\\EFCore.SqlServer.Tests_netcoreapp3.1_x64.xml"" -html ""F:\\workspace\\_work\\1\\s\\artifacts\\TestResults\\Release\\EFCore.SqlServer.Tests_netcoreapp3.1_x64.html""  > ""F:\\workspace\\_work\\1\\s\\artifacts\\log\\Release\\EFCore.SqlServer.Tests_netcoreapp3.1_x64.log"" 2>&1\r\n```\r\n\r\nI tried to do cursory analysis, what are we using but log did not indicate anything specific.'"
22227,477545429,b'The SDK eagerly requires Microsoft.AspNetCore.App. There are workarounds to avoid it in other repos. I think a fix went in for it recently...'
22227,477553169,b'https://github.com/dotnet/installer/issues/1958 & https://github.com/NuGet/Home/issues/9937'
22257,477611119,"b'```suggestion\r\n        [ConditionalFact(Skip = ""Issue #22256"")]\r\n```'"
22257,477611199,b'```suggestion\r\n        public virtual void Projecting_column_with_value_converter_of_ulong_byte_array()\r\n```'
22273,478489620,b'rc1 is not public yet.'
22273,478490893,"b""Yeah, but this could be a good justification to take a dependency on a daily build SDK. The new API didn't make it into preview8."""
22273,478523165,b'\xf0\x9f\x98\xa2'
22273,478524302,b'I think we should expose the same API on all targets'
22273,478533224,"b'Delimit and escape the identifier. Terminate statements.\r\n\r\n``` sql\r\nSAVEPOINT ""The """"SaveChanges"""" Savepoint"";\r\n```'"
22273,478536067,b'`ROLLBACK TO SAVEPOINT` (the SQL standard syntax)'
22273,478536887,"b""This is the Npgsql one (before net5.0): `net461;netstandard2.0;netstandard2.1;netcoreapp3.0`, you're fine :rofl: """
22273,478537213,b'Whitespace is allowed'
22273,478539723,"b""This means contributors can't just open the sln. They'd need to either install the SDK daily build or use the startvs script."""
22277,478610200,b'Should put this break inside the block. '
22277,478609063,b'\xf0\x9f\x91\x8e'
22277,478609475,b'\xf0\x9f\x91\x8e'
22277,478609923,"b""I'd prefer another newline between these now."""
22277,478610441,b'\xf0\x9f\x91\x8e'
22277,478610741,b'\xf0\x9f\x91\x8e'
22277,478611015,b'\xf0\x9f\x91\x8e'
22277,478640344,"b""I'd prefer them to remain on the same line for the simple cases"""
22251,477530937,"b'For now I added it here, we need to have 2 kinds of optimizations, before nav expansion and after nav expansion. I will revisit that in next release. (Possibly combining subquery member pushdown/nullremoval in one visitor)'"
22251,478622731,b'what if b happens to be null as well?'
22251,478624633,b'seems like the optimization should be `a && b != null` for the first and `!a || b == null` for the second'
22251,478636105,b'            // Simplify (a ? b : null) == null => !a || b == null\r\n            // Simplify (a ? null : b) == null => a || b == null\r\n\r\ntruth table way'
22226,476818088,"b'All of this basically answers the question, ""Will this be the default when we use the provider CLR type?""'"
22226,476820304,b'Inverse code is here:\r\n\r\nhttps://github.com/dotnet/efcore/blob/dc0cdccac7102582f027fd63c153fc5fce4e395d/src/EFCore.SqlServer/Extensions/SqlServerPropertyExtensions.cs#L346-L355\r\n\r\nhttps://github.com/dotnet/efcore/blob/dc0cdccac7102582f027fd63c153fc5fce4e395d/src/EFCore.SqlServer/Extensions/SqlServerPropertyExtensions.cs#L358-L372\r\n\r\nhttps://github.com/dotnet/efcore/blob/dc0cdccac7102582f027fd63c153fc5fce4e395d/src/EFCore.SqlServer/Extensions/SqlServerPropertyExtensions.cs#L445-L454'
22226,476867379,b'It would be DRYer to modify `SqlServerValueGenerationStrategyConvention` instead'
22226,476953633,"b""Thanks! I knew you'd find a cleaner way. \xf0\x9f\x98\x89"""
22226,478194809,b'Make `strategy` `null` by default and only call `ShouldCopyStrategyNone` if `GetValueGenerationStrategy` returns `None`'
22226,478634797,"b'`copyStrategyNone` can be removed, just set `strategy` to `null` if `ShouldCopyStrategyNone` returns `false`'"
22277,478686786,"b""K. I'll see what's possible. This is the one I'm constantly reverting after my auto format on save."""
22183,478706189,b'Why dot in next line?'
22183,478706437,b'Why dot in next line?'
22275,478622119,b'Use `candidateProperties`'
22275,478623069,"b""Don't use interfaces unless you need to"""
22275,478629396,"b'Return `List<IProperty>`, it can be enumerated without allocations'"
22275,478629726,b'I thought IEnumerable would be faster to enumerate. \xf0\x9f\xa4\xa6 '
22275,478630508,b'Interfaces are always slower'
22275,478631950,b'Should I move this condition to the caller too?\r\n\r\nThat way it would be one cache entry only.'
22275,478632392,b'@AndriySvyryd '
22275,478633571,b'Let the benchmarks guide you'
22275,478639189,b'such a hard task. \xf0\x9f\x98\x93 '
22275,478642707,b'A third option to evaluate is storing them in separate dictionaries'
22275,478672106,"b'Evaluated all 3 options,\r\n- Dictionary with tuple performed slowest. Perhaps mechanism for hash/equals on that is causing additional overhead.\r\n- Separate dictionary was faster than above.\r\n- Single dictionary with caller doing filter was slightly faster than above.\r\n\r\nI went with 3rd option in my list.'"
22275,478700551,"b""(optional) Since this won't be called as often now you can remove the cast to `EntityType`"""
22188,478707409,b'Line should be delete?'
22258,478724149,b'Probably 1 extra indent.'
22258,478724214,b'What is passing null here now?'
22258,478724824,"b""We use this to create DbSet property setters. That's where."""
22258,478729980,b'Ah so annotation was incorrect before this PR itself. I was looking for change in this PR which was passing null.'
22258,478730948,"b""No, it wasn't being called in that path before. Tests failed."""
22281,478750003,b'No need to store the configuration source as nothing actually uses it'
22278,478704997,b'The annotation should be renamed'
22278,478718225,b'Mention that this can be set using `ModelBuilder.HasChangeTrackingStrategy`'
22278,478720250,"b""If `interfacesToProxy` is empty we shouldn't create a proxy for change tracking"""
22278,478723691,b'Will do this in another PR'
22322,479709653,b'Consider https://github.com/dotnet/efcore/issues/19135'
22322,479816261,"b""Added a note there. I don't think it's something we want to pull into 5.0."""
22321,479722248,b'The other parameters should use camelCase'
22314,479796842,b'Consider using pragma around the line containing obsolete class.'
22314,479797424,b'Just curious: baseType can be null?'
22314,479797565,b'This processing seems same for all derived types and probably can be done outside of foreach loop?'
22314,479798642,b'Is using `entityType.GetRuntimeProperties()` better here?'
22314,479798690,b'Can this block me made DRY with other methods in this class?'
22314,479798705,b'Entity type could be object'
22314,479799471,b'I would still need a foreach loop to remove all the derived types at each level'
22314,479823743,b'GetNavigationsWithAttribute(entityType); ?'
22279,478674176,"b'@dougbu Is the following code in aspnetcore dead? AFAICT, it has no material impact.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/332f1504128a63431cb67830703922cdeefee525/Directory.Build.targets#L138-L145'"
22279,478677202,b'Also https://github.com/dotnet/efcore/blob/release/5.0/eng/helix.proj#L36 I think.\r\nProbably we can just use the variable there.'
22279,478677503,b'same key repeated in json?'
22279,478683403,b'I expected a few rounds to get all the helix stuff right \xf0\x9f\x98\x89'
22279,478683880,"b'""Broh, can you even JSON?""'"
22279,478709927,"b'The SDK should figure out `@(FrameworkReference)` item metadata from `@(KnownFrameworkReference)` items. If that isn\'t happening either the `ProcessFrameworkReferences` target isn\'t running when it should or it has a bug. But, I\'m just guessing.\r\n\r\nI think there\'s also a bug in Microsoft.NETCoreSdk.BundledVersions.props we\'re currently using because it doesn\'t handle `net5.0` e.g.\r\n``` msbuild\r\n<KnownFrameworkReference Include=""Microsoft.AspNetCore.App"" TargetFramework=""netcoreapp5.0"" ... />\r\n```\r\n@wli3 @dsplaisted this issue exists in the released preview 8 SDK. Has it been fixed since\xe2\x9d\x94 '"
22279,478859033,"b""@dougbu What is the issue?  It's OK if the `KnownFrameworkReference` says `netcoreapp5.0`, the code that matches it up to the `TargetFramework` knows that's the same as `net5.0`."""
22279,479457063,"b'Ah, then the bug is in https://github.com/dotnet/aspnetcore/blob/332f1504128a63431cb67830703922cdeefee525/Directory.Build.targets#L138-L145 because that expects an exact match.'"
22279,479593290,"b'@dougbu You were right, it was only dead because I switched to `net5.0`. Using `netcoreapp5.0` makes it work and allows me to remove the line above.'"
22279,479593710,"b""Double-check the created packages after validation completes. We had trouble w/ the older TFM when switching dotnet/aspnetcore but I don't remember the details."""
22279,479595847,b'\xf0\x9f\x8e\x89 '
21990,467327998,"b'Why count restricted to 1? If grouping by 4 different properties, we can project out the subset we need. '"
21990,467328190,b'Should you be cleaning `_childIdentifiers` here?'
21990,467328576,b'Same way check for outer also. If outer does not have _identifier then we should not add from inner either.'
21990,467328989,b'Inner may not contain identifier even without distinct/groupby if the inner is keyless entity.\r\n```C#\r\ncustomers.Select(c =>\r\nnew {\r\ncollection = context.Set<KeylessEntity>().Where(...).ToList()\r\n});\r\n```'
21990,467342782,"b""it should be fine no? this code only checks that all the identifiers are already in the projection since we can't add anymore. Keyless entities are fine, and they query will only throw if u have another collection afterwards (since there will be no identifiers to add to outer when doing join)"""
21990,467342905,"b'yup, copy paste >.<'"
21990,468704430,b'How will you detect that earlier collection projection did not add identifier when adding the next collection projection?'
21990,468849992,"b""if `_identifier.Count == 0` then you don't need to clear it. Rewrite conditions that if `_identifier.Count >0` then only you will add from inner."""
21990,468855065,"b'you are right, will block this scenario also'"
21990,468945818,b'This would be dead code now.'
21990,479796697,b'assert the outer apply error'
22338,480425255,"b'Cannot be shared, no name was provided'"
22338,480427292,"b'Without this any navigations to the shared type cause it to be discovered as non-shared and hence the many-to-many tests for this will fail. Whatever it is that makes Dictionary work in this case but prevents any other types from working, even if they match the IsPropertyBagType call, needs to be fixed.'"
22338,480430754,"b""Then it's a bug in relationship discovery. Shared types shouldn't be discovered in general."""
22338,480434121,"b""But there is no way to know it's a shared type in relationship discovery, so currently relationship discovery only ignores Dictionary, and there isn't any way to make it ignore any other type."""
22338,480472554,b'`IConventionModel.IsShared` can be used for this'
22338,481243732,b'@AndriySvyryd Pushed a change so that `IConventionModel.IsShared` and related internals treat anything that meets the property bag definition the same as the default property bag type.'
22338,481261952,"b'This would mean that these types can only be used as STETs. So if a user type currently happens to implement `IDictionary<string, object>` it would be a breaking change.'"
22338,481263169,b'Better idea?'
22338,481264655,b'Add the specific types used in the tests as shared types in the tests.'
22338,481266488,"b""How? The first line of OnModelCreating maps the type as a shared type. That's too late, since relationship discovery has already marked it as not-shared and so this throws."""
22338,481269068,"b'Another way of saying this is that this ""Add the specific types used in the tests as shared types in the tests."" is what I am trying to make work. If this worked, then I wouldn\'t be making any product changes in this area.'"
22338,481273640,"b""> That's too late, since relationship discovery has already marked it as not-shared and so this throws.\r\n\r\nThat should not happen. Relationship discover discovers by convention configuration source. Fluent API should override that."""
22338,481275837,"b'`modelBuilder.SharedTypeEntity<MyDict>(""SharedDict"")`'"
22338,481275795,"b""Okay, then what can be done to fix this? It doesn't currently seem like there is any way to mark an entity type as shared once it has already been marked as non-shared, regardless of configuration source."""
22338,481277502,b'@AndriySvyryd This throws.'
22338,481278004,"b""Then that's a bug"""
22338,481278952,"b""Exactly! That's what I'm trying to fix."""
22338,481280358,"b'Ok, the fix for this should be made in `InternalModelBuilder.Entity`'"
22338,481283149,b'Too late for RC1 now. Will get back to it another time.'
22338,481287994,b'It throws because you are using the same name as another explicitly-configured STET'
22338,481289053,b'Where?'
22338,481289839,"b'Note if you mean, in `UsingEntity`, then doing that without this also throws saying that the type is not configured as a shared-type, which must be explicitly done before calling UsingEntity.'"
22338,481290908,b'Dismiss my previous comment. What is the exception that you get without the IsShared change? (Including stacktrace)'
22338,481298532,"b""> The shared type entity type 'JoinOneToThreePayloadFullShared' with clr type 'Microsoft.EntityFrameworkCore.TestModels.ManyToManyModel.ProxyablePropertyBag' cannot be added to the model because a non shared entity type with the same clr type already exists.\r\n\r\n```\r\nSystem.AggregateException : One or more errors occurred. (The shared type entity type 'JoinOneToThreePayloadFullShared' with clr type 'Microsoft.EntityFrameworkCore.TestModels.ManyToManyModel.ProxyablePropertyBag' cannot be added to the model because a non shared entity type with the same clr type already exists.) (The following constructor parameters did not have matching fixture data: ManyToManyTrackingProxySqlServerFixture fixture)\r\n---- System.InvalidOperationException : The shared type entity type 'JoinOneToThreePayloadFullShared' with clr type 'Microsoft.EntityFrameworkCore.TestModels.ManyToManyModel.ProxyablePropertyBag' cannot be added to the model because a non shared entity type with the same clr type already exists.\r\n---- The following constructor parameters did not have matching fixture data: ManyToManyTrackingProxySqlServerFixture fixture\r\n\r\n----- Inner Stack Trace #1 (System.InvalidOperationException) -----\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddEntityType(EntityType entityType) in /home/ajcvickers/efcore/src/EFCore/Metadata/Internal/Model.cs:line 247\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.Model.AddEntityType(String name, Type type, ConfigurationSource configurationSource) in /home/ajcvickers/efcore/src/EFCore/Metadata/Internal/Model.cs:line 193\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.Entity(TypeIdentity& type, ConfigurationSource configurationSource, Nullable`1 shouldBeOwned) in /home/ajcvickers/efcore/src/EFCore/Metadata/Internal/InternalModelBuilder.cs:line 185\r\n   at Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder.SharedTypeEntity(String name, Type type, ConfigurationSource configurationSource, Nullable`1 shouldBeOwned) in /home/ajcvickers/efcore/src/EFCore/Metadata/Internal/InternalModelBuilder.cs:line 67\r\n   at Microsoft.EntityFrameworkCore.ModelBuilder.SharedTypeEntity[TEntity](String name) in /home/ajcvickers/efcore/src/EFCore/ModelBuilder.cs:line 158\r\n   at Microsoft.EntityFrameworkCore.Query.ManyToManyQueryFixtureBase.OnModelCreating(ModelBuilder modelBuilder, DbContext context) in /home/ajcvickers/efcore/test/EFCore.Specification.Tests/Query/ManyToManyQueryFixtureBase.cs:line 155\r\n   at Microsoft.EntityFrameworkCore.ManyToManyTrackingSqlServerTestBase`1.ManyToManyTrackingSqlServerFixtureBase.OnModelCreating(ModelBuilder modelBuilder, DbContext context) in /home/ajcvickers/efcore/test/EFCore.SqlServer.FunctionalTests/ManyToManyTrackingSqlServerTestBase.cs:line 30\r\n   at Microsoft.EntityFrameworkCore.TestUtilities.TestModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, ModelDependencies modelDependencies) in /home/ajcvickers/efcore/test/EFCore.Specification.Tests/TestUtilities/TestModelSource.cs:line 31\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, ModelDependencies modelDependencies) in /home/ajcvickers/efcore/src/EFCore/Infrastructure/ModelSource.cs:line 100\r\n   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel() in /home/ajcvickers/efcore/src/EFCore/Internal/DbContextServices.cs:line 84\r\n   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model() in /home/ajcvickers/efcore/src/EFCore/Internal/DbContextServices.cs:line 111\r\n   at Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder.<>c.<TryAddCoreServices>b__7_3(IServiceProvider p) in /home/ajcvickers/efcore/src/EFCore/Infrastructure/EntityFrameworkServicesBuilder.cs:line 255\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSiteMain(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScopeCache(ServiceCallSite singletonCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSiteMain(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScopeCache(ServiceCallSite singletonCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine.<>c__DisplayClass1_0.<RealizeService>b__0(ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies() in /home/ajcvickers/efcore/src/EFCore/DbContext.cs:line 394\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_InternalServiceProvider() in /home/ajcvickers/efcore/src/EFCore/DbContext.cs:line 376\r\n   at Microsoft.EntityFrameworkCore.DbContext.get_ChangeTracker() in /home/ajcvickers/efcore/src/EFCore/DbContext.cs:line 134\r\n   at Microsoft.EntityFrameworkCore.ManyToManyTrackingTestBase`1.ManyToManyTrackingFixtureBase.CreateContext() in /home/ajcvickers/efcore/test/EFCore.Specification.Tests/ManyToManyTrackingTestBase.cs:line 3121\r\n   at Microsoft.EntityFrameworkCore.TestUtilities.SqlServerTestStore.Initialize(Func`1 createContext, Action`1 seed, Action`1 clean) in /home/ajcvickers/efcore/test/EFCore.SqlServer.FunctionalTests/TestUtilities/SqlServerTestStore.cs:line 93\r\n   at Microsoft.EntityFrameworkCore.TestUtilities.TestStore.<>c__DisplayClass13_0.<Initialize>b__0() in /home/ajcvickers/efcore/test/EFCore.Specification.Tests/TestUtilities/TestStore.cs:line 41\r\n   at Microsoft.EntityFrameworkCore.TestUtilities.TestStoreIndex.CreateShared(String name, Action initializeDatabase) in /home/ajcvickers/efcore/test/EFCore.Specification.Tests/TestUtilities/TestStoreIndex.cs:line 30\r\n   at Microsoft.EntityFrameworkCore.TestUtilities.TestStore.Initialize(IServiceProvider serviceProvider, Func`1 createContext, Action`1 seed, Action`1 clean) in /home/ajcvickers/efcore/test/EFCore.Specification.Tests/TestUtilities/TestStore.cs:line 41\r\n   at Microsoft.EntityFrameworkCore.TestUtilities.RelationalTestStore.Initialize(IServiceProvider serviceProvider, Func`1 createContext, Action`1 seed, Action`1 clean) in /home/ajcvickers/efcore/test/EFCore.Relational.Specification.Tests/TestUtilities/RelationalTestStore.cs:line 43\r\n   at Microsoft.EntityFrameworkCore.SharedStoreFixtureBase`1..ctor() in /home/ajcvickers/efcore/test/EFCore.Specification.Tests/SharedStoreFixtureBase.cs:line 58\r\n   at Microsoft.EntityFrameworkCore.Query.ManyToManyQueryFixtureBase..ctor() in /home/ajcvickers/efcore/test/EFCore.Specification.Tests/Query/ManyToManyQueryFixtureBase.cs:line 15\r\n   at Microsoft.EntityFrameworkCore.ManyToManyTrackingTestBase`1.ManyToManyTrackingFixtureBase..ctor() in /home/ajcvickers/efcore/test/EFCore.Specification.Tests/ManyToManyTrackingTestBase.cs:line 3126\r\n   at Microsoft.EntityFrameworkCore.ManyToManyTrackingSqlServerTestBase`1.ManyToManyTrackingSqlServerFixtureBase..ctor()\r\n   at Microsoft.EntityFrameworkCore.ManyToManyTrackingProxySqlServerTest.ManyToManyTrackingProxySqlServerFixture..ctor() in /home/ajcvickers/efcore/test/EFCore.SqlServer.FunctionalTests/ManyToManyTrackingProxySqlServerTest.cs:line 21\r\n----- Inner Stack Trace #2 (Xunit.Sdk.TestClassException) -----\r\n```"""
22338,481303151,"b""I see. It probably needs a convention scope around most of the InternalModelBuilder.Entity body to avoid the type being readded as non shared before it's added as shared """
22343,481205820,"b""```suggestion\r\n    <value>The annotation '{annotation}' was not found. Ensure that the annotation has been added to the object '{annotatable}'</value>\r\n```"""
22343,481208858,"b""```suggestion\r\n    <value>To show additional information call 'EnableSensitiveDataLogging()' when overriding 'DbContext.OnConfiguring'.</value>\r\n```"""
22343,481209840,b'We are somewhat inconsistent with Include in many places. Other places when referring to API uses `HasConversion()` with parenthesis. '
22343,481267953,b'`annotatable` could be a multi-line string'
22343,481270895,b'Added to the list'
22338,482247311,b'Move to ProxiesStrings.resx '
22373,482539716,"b""```suggestion\r\n    <value>The client projection contains a reference to a constant expression of '{constantType}' through the instance method '{methodName}'. This could potentially cause a memory leak. Consider making the method static so that it does not capture constant in the instance. See https://go.microsoft.com/fwlink/?linkid=2103067 for more information.</value>\r\n```"""
22373,482540298,"b""```suggestion\r\n    <value>The client projection contains a reference to a constant expression of '{constantType}'. This could potentially cause a memory leak. Consider assigning this constant to a local variable and using the variable in the query instead. See https://go.microsoft.com/fwlink/?linkid=2103067 for more information.</value>\r\n```"""
22373,482542272,"b""```suggestion\r\n    <value>Cannot set discriminator value '{value}' for discriminator property '{discriminator}' because it is not assignable to '{discriminatorType}'.</value>\r\n```"""
22373,482543793,"b""```suggestion\r\n    <value>The entity type '{entityType}' cannot be removed because '{derivedEntityType}' is derived from it. Before the entity type can be removed, all derived entity types must be removed or configured to use a different base entity type.</value>\r\n```"""
22373,482544405,b'```suggestion\r\n    <value>An error occurred while reading a database value. See the inner exception for more information.</value>\r\n```'
22373,482544555,"b""```suggestion\r\n    <value>An error occurred while reading a database value for property '{entityType}.{property}'. See the inner exception for more information.</value>\r\n```"""
22373,482588325,b'Save some things for @roji to fix \xf0\x9f\x98\x89 '
22392,483167233,"b'We are actually changing everything to ""Entity Framework"", see https://github.com/dotnet/efcore/issues/7201'"
22392,483170698,b'So @roji will update this when submitting a PR? \xf0\x9f\xa4\x94 '
22392,483177198,"b""Yes, but don't make it harder \xf0\x9f\x98\x84 """
22392,483190452,b'Added another commit which fixed it for whole solution.'
22412,483891428,b'What order is this? Alphabetical could help.'
22412,483891497,"b""I really wonder what this issue refers to. But I don't know if I want to find out."""
22412,483891572,b'Just make this public and conditional theory?'
22412,483891982,"b""It's relatedness order"""
22408,483869348,"b""```suggestion\r\n    <value>The type '{dictionaryType}' used for shared entity type '{entityType}' is not suitable for use as a change-tracking proxy because its indexer property is not virtual. Consider using an implementation of '{interfaceType}' that allows overriding of the indexer.</value>\r\n```"""
22408,483869744,"b""```suggestion\r\n    <value>The mapped indexer property on entity type '{entityType}' is not virtual. 'UseChangeTrackingProxies' requires all entity types to be public, unsealed, have virtual properties, and have a public or protected constructor. 'UseLazyLoadingProxies' requires only the navigation properties be virtual.</value>\r\n```"""
22408,483870166,b'blank line'
22425,484251222,b'This and cosmos changes should not be needed. SqlExpressionFactory assigns the type mapping to constant. Are you seeing otherwise?'
22425,484543398,b'Removed the expression factory changes.'
22468,485881679,b'Should put this file under docs'
22468,485882939,"b'```suggestion\r\nThe daily builds are not published to NuGet.org because there are way too many of them! Instead they can be pulled from a custom NuGet feed. To access this feed, create a `NuGet.config` file in the same directory as your .NET solution or projects. The file should contain the following content:\r\n```'"
22468,485885570,"b""6.0.0* doesn't work, so changing to 6.0.0-*."""
22468,485955072,"b""Meh. I'm don't think we iterate on this one fast enough to justify doing this."""
22468,485956067,"b'Should we list the disadvantages? For one, I think the API churns a lot more on in-development features.'"
22468,485956760,"b'Several open source projects publish daily builds to NuGet.org. I think asserting that ""there are too many of them"" is more of an opinion than a reason.'"
22468,485957063,b'You only need this line and the nuget.org one to use the daily builds. The other ones are just there to support our build infrastructure.'
22468,485962853,b'Happy to remove it.'
22468,485963150,"b""That's a good disadvantage. Any others? (I though about support, but that applies to previews as well.)"""
22468,485963197,b'I can remove this.'
22468,485963440,"b""I was copying what @smitpatel posted in Teams. :-) Smit, do you agree it's okay to remove these?"""
22468,485964254,b'Fine to leave.'
22468,485964332,"b""lol, that's the only one I could think of..."""
22469,485964236,b'```suggestion\r\n    The namespace to use. Matches the directory by default.\r\n```'
22468,485964605,"b'I\'m fine with leaving it; I just anticipate some users responding, ""So what?""'"
22469,485964619,b'Ditto for all of these'
22469,485965279,"b""```suggestion\r\n    <value>Don't build the project. Intended to be used when the build is up-to-date.</value>\r\n```"""
22468,485966623,b'Yes. Additional ones are fine to remove.'
22479,486544854,b'Curious why new string rather than just inline-ing the string with spaces?'
22479,486545098,"b'```suggestion\r\n                builder.Append(table.PrimaryKey.ToDebugString(options, indent + 2));\r\n```'"
22479,486557910,b'hard to count spaces in a literal'
22480,486547772,b'@JeremyLikness Can I get a fwlink?'
22480,486549733,b'https://go.microsoft.com/fwlink/?linkid=2142181'
22480,486550832,"b""@bricelam did @smitpatel give you what's needed or is there still action to take?"""
22480,486561206,"b""That depends, who's the owner of that fwlink? \xf0\x9f\x98\x8f Don't we have a team SG we can use?"""
22480,486562017,b'Or are we saying we can create our own so long as we add Arthur and Jeremy as owners?'
22481,486578105,"b""I've often wondered if we should also do this:\r\n```xml\r\n<disabledPackageSources>\r\n  <clear />\r\n</disabledPackageSources>\r\n```"""
22481,486578455,"b""That way, if they've unchecked a source in Visual Studio, it would still work on this repo."""
22481,486578926,b'Hmm. It would have helped people who have got stuck in the past. Is there a chance it will break people?'
22480,486591116,b'I add both of them as owners and have created 5 so far.'
22480,486599189,"b'Sounds reasonable. I will do the same, thanks!'"
22481,486600865,"b""This probably makes more sense for our repo. I can't see it breaking anyone. (when paired with the `clear` here.)\r\n\r\nMaybe we shouldn't reccomend adding `<clear />` under `packageSources` since they may be using other github/myget/azdo feeds defined in their global/user config."""
22481,486602536,"b""I think at one point we wanted to make sure that NuGet.org was the last feed. I suspect that this shouldn't matter for us either, right?"""
22481,486676677,"b""Oh yeah, there was some weird behavior around it in earlier versions of NuGet. I think it was while they were transitioning to the v3 protocol, but I can't remember the details. Probably not an issue anymore."""
22481,486677043,"b'Oh, and it probably was slowing down our builds a bit hitting nuget.org for the hundreds of packages in 1.x'"
22488,486685522,"b""```suggestion\r\n    <value>The provider '{provider}' is not a Relational provider and therefore cannot be used with Migrations.</value>\r\n```"""
22488,486685633,"b""```suggestion\r\n    <value>No files were generated in directory '{outputDirectoryName}'. The following file(s) already exist(s) and must be made writeable to continue: {readOnlyFiles}.</value>\r\n```"""
22485,486678848,"b""Wouldn't InputOutput parameters be the ones that actually need this? (from a technical perspective)"""
22485,486679674,"b""I get that the cloned values would just be thrown away, but hopefully all the results would be the same regardless of which query they're set by."""
22485,486683660,b'Can you add another collection include?'
22485,486705730,"b""I added condition since I got error for Output type so I added both. If the parameter can be output type then we cannot clone it since updated value would be in cloned parameter which we don't have access to.\r\nResult should be same if clone is implemented correctly."""
22485,486706142,b'Out parameter test still failed in this iteration. Let me debug it. If the out parameter does not work then we cannot fix this scenario. It is just database enforced limitation at that point.'
22485,486732005,"b""> I added condition since I got error for Output type\r\n\r\nWhat was the error? Can they not be cloned?\r\n\r\n> ...we cannot clone it since updated value would be in cloned parameter...\r\n\r\nBut I'm saying we *can* clone it assuming it is set by the first query and it would just have the same output value (and thus can be thrown away) in subsequent queries anyway."""
22485,486732885,"b'BTW, feel free to just file a bug for this and investigate later. Getting input parameters to work is much higher priority than output parameters.'"
22485,486755670,"b'The issue with output parameter is, that user supplied us a DbParameter and we sent a cloned parameter to server so updated value would be in cloned parameter. So user cannot see the value in their DbParameter anymore.'"
22485,487140667,"b'@bricelam - Understood your point, will file an issue.\r\nThe test failure was due to bad conditions. Updated to clone only for input parameters.'"
22485,487143506,b'#22498'
22511,487383193,"b""```suggestion\r\n    <value>The specified table '{table}' is not in a valid format. Specify tables using the format '[schema].[table]'.</value>\r\n```"""
22532,488175324,b'Why do we need ordering here?'
22532,488182471,"b""Without this, you get the following SQL:\r\n\r\n```sql\r\nSELECT (\r\n           SELECT TOP(1) [t].[Level3_Name]\r\n           FROM (\r\n               SELECT DISTINCT TOP(1) [l].[Id], [l].[Level2_Optional_Id], [l].[Level2_Required_Id], [l].[Level3_Name], [l].[OneToMany_Optional_Inverse3Id], [l].[OneToMany_Required_Inverse3Id], [l].[OneToOne_Optional_PK_Inverse3Id]\r\n               FROM [Level1] AS [l]\r\n               WHERE (([l].[OneToOne_Required_PK_Date] IS NOT NULL AND [l].[Level1_Required_Id] IS NOT NULL) AND [l].[OneToMany_Required_Inverse2Id] IS NOT NULL) AND ([l].[Level2_Required_Id] IS NOT NULL AND [l].[OneToMany_Required_Inverse3Id] IS NOT NULL)\r\n                ) AS [t]\r\n           ORDER BY [t].[Id])\r\nFROM [Level1] AS [l0]\r\nWHERE [l0].[Id] < 3;\r\n```\r\n\r\nThe rows coming out of the subquery aren't ordered, so it's non-deterministic."""
22532,488197515,b'Row coming out of subquery has ordering `ORDER BY [t].[Id]`'
22532,488209614,"b""But order isn't preserved for rows coming out of the subquery... We need ORDER BY on the outer query?"""
22532,488212738,"b""We shouldn't. We are not doing any row limiting operation on outer. We are not assuming any ordering on it. As long as the set of outer element is fixed (which is by where clause), the inner elements should also be fixed.\r\n\r\nTest is also not assuming any ordering."""
22532,488223980,"b""Missed the fact that the test doesn't assert ordering, will look deeper."""
22532,488255144,"b'Moreover, the subquery is not correlated with the outer, so all the values should be the same for every row. This should never give mismatch ordering. '"
22532,488257484,b'same here'
22532,488264696,"b""I'll take a deeper look tomorrow. Both these tests are failing on PG because of wrong data, and almost 100% up to now  it has been because of ordering issues."""
22585,490451251,b'Can shortcircuit if `!property.IsKey()`'
22585,490453436,b'We do that check externally to calling this. Should I try to move it here instead? Or debug assert that it is a key?'
22585,490456545,"b""As long as it's called before `IsForeignKeyToSelf` it can be external"""
22535,488267200,"b'```suggestion\r\n        <add key=""dotnet5"" value=""https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5/nuget/v3/index.json"" />\r\n```'"
22535,488269264,"b""Not sure floating versions are a good guidance to give, because stuff breaks as new packages are released - that can give a pretty negative experience to daily builds and may make people avoid them (because they don't know they can do differently). I'd recommend doing things as usual without floating.\r\n\r\nBut that definitely seems out of scope for this PR, plus the 5.0 daily builds are now as stable as anything else."""
22535,488915333,"b'I believe for our daily builds this is probably the best guidance we can give. If we lose confidence in the quality of the dailys, then maybe we should consider not recommending this.'"
22535,490452471,"b'The comment was less about quality, and more about APIs/behavior intentionally changing and breaking people. '"
22602,491248172,b'Consider using a FSM :trollface: '
22602,491248713,"b'Extract method to base class, @roji will appreciate it'"
22602,491261032,"b'I thought about it, but it was too nuanced with Unicode vs ASCII and the potential for alternate escape sequences.'"
22612,491242886,"b""```suggestion\r\n    <value>Cycle detected while auto-including navigations for entity type '{entityType}'. Navigations in the cycles are {cycleNavigations}. To fix this issue, either don't configure at least one navigation in the cycle as auto included in `OnModelCreating` or call 'IgnoreAutoInclude' method on the query.</value>\r\n```\r\n\r\nAnd `cycleNavigations` should look like `{'entity.nav' -> 'entity2.nav2'}`"""
22612,491243847,"b""We don't have actual cycle, since we only look at entity types involved. """
22612,491244368,"b'```suggestion\r\n            if (!visitedEntityTypes.Add(entityType, previousNavigation));\r\n```\r\n\r\nChange `visitedEntityTypes` to dictionary and now you can reconstruct the cycle'"
22612,491247542,"b""```suggestion\r\n    <value>Cycle detected while auto-including navigations: {cycleNavigations}. To fix this issue, either don't configure at least one navigation in the cycle as auto included in `OnModelCreating` or call 'IgnoreAutoInclude' method on the query.</value>\r\n```"""
22607,491483352,b'Can use case when'
22607,491572006,b'Will do in main'
22625,491717827,"b'Note that this method returns and user code continues potentially before _enumerator actually gets disposed. Depending on whether CosmosClientWrapper cares if we call ExecuteSqlQuery before the previous enumerator completed, this could be a potentially serious concurrency bug.\r\n'"
22625,491717834,b'/cc @AndriySvyryd'
22625,491717891,"b""This technically doesn't solve a problem, but the string equality operator is defined to be the same as string.Equals, and the code analysis flags this."""
22625,491717968,"b'This was dead code. Note also that ContinueWith performs significantly worse than just doing the simple thing, async/await (but the situation may have been different in the past).'"
22625,491718046,b'Potentially important missing cancellation token'
22625,491718093,b'Potentially important missing cancellation token'
22625,492299869,b'What is the severity of this rule?'
22625,492301475,b'Not actually important since ExecuteAsync which returns enumerable just compiles the expression and never execute it. The real execution uses the cancellation token from GetAsyncEnumerator. No functional impact.'
22625,492304531,"b""This is only used when the operation failed and it wasn't in a transaction, so it would be a very corner case for cancellation"""
22625,492336682,b'OK.\r\n\r\nIn that case is it right for ExecuteAsync to be async and even accept a cancellation token?'
22625,492484565,"b""This comes from [CA1309](https://docs.microsoft.com/en-ca/visualstudio/code-quality/ca1309?view=vs-2019) (Use ordinal StringComparison), and is currently configured as error (we can of course change this).\r\n\r\nInterestingly, configuring the rule as warning in .editorconfig doesn't make the build fail although WarningsAsErrors is on (I think the new rules are exempted via WarningsNotAsErrors...)."""
22625,492552012,b'If ExecuteAsync is called with non enumerable kind of return value then it is going to hit the database and that is where cancellation token will be used. '
22648,492399127,b'We have this message in CoreStrings also.'
22648,492400528,b'Interesting using'
22648,492400546,b'Interesting using'
22648,492406205,"b'VS ""feature""'"
22649,492983992,b'Why this condition?'
22649,492984810,"b'Well, I suppose we do have `helix.proj`...'"
22649,492985337,"b""I didn't check whether this repo contains anything else but C# projects and copied the condition from dotnet/aspnetcore. Let me know if it's useless."""
22626,491741218,"b'```suggestion\r\n        ///         This connection should not be disposed if it was created by Entity Framework. Connections are created by\r\n        ///         Entity Framework when a connection string rather than a <see cref=""DbConnection"" /> object is passed to the the \'UseMyProvider\'\r\n        ///         method for the database provider in use. Conversely, the application is responsible for disposing a <see cref=""DbConnection"" />\r\n        ///         passed to Entity Framework in \'UseMyProvider\'.\r\n```'"
22626,491741448,"b'I just added some docs on RelationalDbContextOptionsBuilder in #18748, we should probably align the two.'"
22626,491741649,"b'```suggestion\r\n        ///         This method uses a double-dispatch mechanism to call the <see cref=""M:MigrationsSqlGenerator.Generate"" /> method\r\n        ///         that is specific to a certain subtype of <see cref=""MigrationOperation"" />. Typically database providers\r\n```'"
22626,491741843,"b'```suggestion\r\n        ///         Use <see cref=""AutoDetectChangesEnabled"" /> to prevent <see cref=""DetectChanges"" /> from being called automatically.\r\n```'"
22626,491741958,b'Link to the [conceptual docs](https://docs.microsoft.com/en-us/ef/core/saving/disconnected-entities#trackgraph) as well? '
22626,491742052,"b'```suggestion\r\n        ///         methods. <see cref=""...AddDbContext..."" /> will ensure that the <see cref=""ILoggerFactory"" /> used by EF is obtained from the\r\n```'"
22626,491742420,"b'```suggestion\r\n        ///         References a given property on an entity instance. This is useful for shadow state properties, for which no CLR property exists. Currently this method can only be used in LINQ queries and can not be used to access the value assigned to a\r\n        ///         property in other scenarios.\r\n```'"
22626,491742570,"b""Populate sounds like it's about data (also below)\r\n\r\n```suggestion\r\n        ///                 create the database schema.\r\n```"""
22626,491742778,"b'```suggestion\r\n        ///         This property is null unless one of the <see cref=""M:BeginTransaction"" />, <see cref=""M:UseTransaction"" />,\r\n        ///         <see cref=""M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction"" />, or\r\n        ///         <see cref=""M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransaction"" />\r\n        ///         methods has been called.\r\n```'"
22626,491742802,"b'```suggestion\r\n        ///         For relational databases, the underlying <see cref=""DbTransaction"" /> can be obtained using\r\n```'"
22626,492191762,"b""I reference DbConnection in the first paragraph. Isn't it overkill to turn every mention into a link? I though we decided not to do that."""
22626,492194912,b'Text seems fine to me.'
22626,492195125,b'See above.'
22626,492195342,"b""File an issue for it--I'm not doing linking in this PR."""
22626,492195511,b'See above.'
22626,492195982,b'File an issue please.'
22626,492198679,b'Not directly referencable here; added full form.'
22626,492199098,"b""I don't remember a decision on this (but maybe I forgot).\r\n\r\nLook at the [Dictionary docs](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2?view=netcore-3.1), for example, it seems that every single appearance of a referenceable type/method is indeed a reference. I don't think it makes the test any heavier - it's just a link.\r\n\r\nAnother advantage, is that it provides typo protection (since the reference is compiler-verified), and if we ever rename a type, it gets renamed in docs as well."""
22626,492199752,b'You have #17508 for MQ :trollface: '
22626,492200282,"b""It's just word-smithing, if you don't agree no problem."""
22626,492201539,"b'Indeed. If you think this needs a link, then please add a note to that issue.'"
22626,492202244,"b""I don't know--I didn't write the original text, I don't think."""
22626,492203177,"b'That doc frequently uses lower-case ""dictionary"" to refer to the dictionary. This implies it is okay for me to say ""connection"" here, just not ""DbConnection"". But ""DbConnection"" is more specific, which is why I didn\'t just say ""connection"".'"
22626,492203226,b'Done (this is just a suggestion).'
22626,492367218,b'@dotnet/efteam Thoughts on this?'
22626,492447915,"b""I am fine either way as long as the amount of links doesn't become obnoxious."""
22626,493968712,b'It can also reference navigation skip navigation.'
22626,494474922,b'Will do in another PR.'
22690,494632826,b'Tiny\r\n```suggestion\r\nTarget framework: (e.g. .NET Core 5.0)\r\n```'
22690,494632985,"b'```suggestion\r\nTo fix any bug we must first reproduce it. To make this possible, please attach a small, runnable project or post a small, runnable code listing that reproduces what you are seeing.\r\n```'"
22690,494633065,b'same in sqlite bug report'
22690,494633866,b'Should we also add link to our docs here?\r\nCheck out documentation which may cover the answer of what you are looking for'
22690,494635740,b'Good idea!'
22690,494641733,b'@smitpatel Added some more text to the question and bug templates.'
22765,495411507,b'Why private members have docs?'
22765,495432999,"b'We did agree to add docs to private members where it makes sense (i.e. a complicated method that needs clarification on its API), but I agree that these docs are useless... will remove.\r\n'"
22765,495478067,b'Same in AddToObservableCollection'
22765,495485243,b'\xe2\x9a\xa0\xef\xb8\x8f There is nothing here to inherit. [SA1648](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1648.md) may be usable for validation of the PR.'
22765,495485437,"b'\xf0\x9f\x93\x9d  The IDE will automatically treat lack of documentation on `override` members as having an implicit `<inheritdoc />`. Some projects leverage this to remove extraneous lines, while other projects prefer to be explicit.\r\n\r\nThis comment is only intended to present alternatives. The approach preference is left to your team.'"
22765,495485618,b'\xf0\x9f\x93\x9d Possibly unintentional unrelated change'
22765,495485849,"b'\xe2\x9e\xa1\xef\xb8\x8f This is my mistake. The documentation is inherited from implemented interface member `IResettableService.ResetState()`.\r\n\r\nNote that the documentation does change in this case, but that may be desired.'"
22765,495486329,"b'\xf0\x9f\x93\x9d This is going to inherit from interface documentation, which means it no longer reports the ""internal API"" warning. For any case where this is not desirable (i.e. you want to include the ""internal API"" warning but you don\'t want to write the whole thing every time, you can take the following approach:\r\n\r\n1. Create a helper type:\r\n\r\n    ```csharp\r\n    /// <summary>\r\n    ///     ... text of the message goes here ...\r\n    /// </summary>\r\n    internal static class InternalApiSummary\r\n    {\r\n    }\r\n    ```\r\n\r\n2. For any case where you want to include this message, use this (works for both types and members):\r\n\r\n    ```csharp\r\n    /// <inheritdoc cref=""InternalApiSummary"" />\r\n    ```'"
22765,495486578,"b'\xf0\x9f\x93\x9d For a case like this where you want both the inherited documentation and the documentation from `InternalApiSummary`, you do have the option of doing something like this:\r\n\r\n```csharp\r\n/// <summary>\r\n/// <inheritdoc />\r\n/// <inheritdoc cref=""InternalApiSummary"" />\r\n/// </summary>\r\n```\r\n\r\nOr if you want to put the ""internal API"" warning in the remarks section instead of the summary section, you could do this:\r\n\r\n```csharp\r\n/// <inheritdoc />\r\n/// <remarks>\r\n/// <inheritdoc cref=""InternalApiSummary"" path=""/summary"" />\r\n/// </remarks>\r\n```'"
22765,495486851,"b'\xf0\x9f\x92\xad I suppose if it was common to use the second of these approaches, you could define an `InternalApiRemarks` class to help:\r\n\r\n```\r\n/// <remarks>\r\n/// <inheritdoc cref=""InternalApiSummary"" path=""/summary"" />\r\n/// </remarks>\r\ninternal static class InternalApiRemarks\r\n{\r\n}\r\n```\r\n\r\nThen you could do this to inherit from base plus include the internal API remarks:\r\n\r\n```csharp\r\n/// <inheritdoc />\r\n/// <inheritdoc cref=""InternalApiRemarks"" />\r\n```'"
22765,495490785,b'I think not having to say this explicitly would be great... But I was under the impression that docfx needs them... Does anyone have any info on this /cc @smitpatel @bricelam'
22765,495490858,b'Unrelated but intentional :)'
22765,496097271,"b""So long as IntelliSense and our API docs show it, I'm good with whatever. Not sure whether they require it or not."""
22654,496108326,b'Should we remove the transactions check here and always exit on error? https://github.com/dotnet/efcore/issues/22616#issuecomment-700165715'
22765,496158174,"b'Right, the question here is whether our API docs (generated with docfx) require the explicit `<inheritdoc />` or not... Does anyone have an answer to that question? Does @smitpatel have some contacts in the doc team we could ask about this?'"
22765,496163558,b'Query sent. It is async query so I will await for a response.'
22793,495634823,"b""```suggestion\r\n    <value>Compiling a query which loads related collections for more than one collection navigation either via 'Include' or through projection but no 'QuerySplittingBehavior' has been configured. By default Entity Framework will use 'QuerySplittingBehavior.SingleQuery' which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w =&gt; w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'.</value>\r\n```"""
22793,495635061,b'mathes'
22793,495635104,b'foreigKeyProperties'
22793,495635110,b'> All referencing skip navigation\r\nplural?'
22793,495635290,b'defininf'
22793,495635453,b'Would this properties require quotes around?'
22793,495635518,"b""'ICollection&lt;&gt;' ?"""
22793,495642709,"b'Yes, this one just contains the string specified in [ForeignKey]'"
22793,496158639,b'There are few more like this in this file. e.g. NavigationCannotCreateType'
22849,497726540,b'@dotnet/efteam Any thoughts on naming these template methods before merging? (We will review in API review later anyway.)'
22861,498497614,"b""After a quick chat with @chcosta. It sounds like basically what happens is that this repo is handling its own symbol nupkg generation. In two projects, it doesn't want symbol nupkgs generated and specifies this on a per-project basis. But because arcade is set up to generate a symbol nupkg by default, it does so anyway. This means that we publish symbol packages for two projects that we wouldn't have otherwise.\r\n\r\n@chcosta Can you add a comment here as to why this property is being set? The semantics of this are not that obvious."""
22765,499137208,"b'Thanks @smitpatel, hopefully there is an SLA in place on the receiving side...'"
22765,499137393,"b'Wow, that\'s next-level doc wizardry, good to know this is possible... For the last part, is the inherited summary automatically appended to the non-inherited one, and the same for each other top-level doc section?\r\n\r\nIn any case, I\'m a bit reluctant to start combining the ""internal API"" blurb with actual docs, since we may be dropping pubternal for 6.0 and then that work would be lost.'"
22765,499137421,"b""I'll definitely do that."""
22765,499169318,b'The person who knows this is on vacation. Expect delays.'
22765,499177184,"b""An idea: do we know if the API docs just use the same docfx that's available publicly (https://github.com/dotnet/docfx)? If so, I use that for the Npgsql API docs and can possibly test there."""
22765,499177667,"b""To answer you question, I don't know. The job which produces the docs may be using that tool but there could be .NET specific customizations on top of that. (there are json files in the API docs repo).\r\n\r\nRather than trying to do additional work and figure out a lot of unknowns, is there harm in just waiting for doc team to respond? What is rush to get this merged?"""
22765,499194494,"b""No harm or rush. It would just be useful to know whether the publicly-available docfx is the same one being used for our docs, this way we easily test and see what it supports and what it doesn't."""
22897,500456832,b'```suggestion\r\n\r\n```'
22897,500457071,b'Can you verify exception instead?'
22897,500460408,b'Can you rename this test? It does not project intermittent column in final projection but uses a subquery for distinct. '
22897,500460834,b'verify SQL for other 2 test which are not overriden here.'
22897,500462484,b'Is there a linking issue for this?'
22897,500464717,b'```suggestion\r\n\r\n```'
22897,500467165,b'Distinct should be applying alias from the projection before Distinct. The aliases here should be ID1-3 Name1-2'
22897,500475495,b'part of regression tests for #22692'
22897,500481235,b'a bug then?'
22897,500510158,b'Not the original bug but a different bug. Just file a new issue with link to this test. I will look into it.'
22897,500510440,b'No sql generated here?'
22932,502057226,b'This was to work around quirks in SQL Server. We should review the behavior of empty string on SQLite.'
22925,501801273,"b'nit: [string.Join](https://referencesource.microsoft.com/#mscorlib/system/string.cs,171) does this without the if and the variable'"
22925,501925006,"b""The problem is that we have a non-generic Enumerable, so it's not possible to (easily) project to Print."""
22925,501945690,"b""Flip needs command to first then you don't have to assign every time."""
22925,502039283,b'Note also that Print returns void rather than a string'
22925,502039326,b'Done'
22925,502091948,b'```suggestion\r\n                var first = true;\r\n                foreach (var item in enumerable)\r\n                {\r\n                    if (first)\r\n                    {\r\n                        first = false;\r\n                    }\r\n```'
22918,501365431,"b""@wli3 and @dsplaisted I picked this SDK version to match what we're currently using in dotnet/aspnetcore. Is there another version you prefer we use i.e. something newer w/ important fixes\xe2\x9d\x94 """
22918,501366053,b'Note the _specific_ dotnet/runtime sharedFx included in this is much less important than its general 6.0.0-alpha1 branding.'
22918,502838708,"b'More specifically @geoffkizer @ericstj, is this extra `HttpRequestException` \xe2\x9e\xa1\xef\xb8\x8f `IOException` \xe2\x9e\xa1\xef\xb8\x8f `SocketException` check worth doing\xe2\x9d\x94'"
22918,502839033,"b""@bricelam the good news here is this is a test-only change and doesn't imply a breaking change that will impact earlier EF packages when running against recent a shared framework from dotnet/runtime."""
22869,499043302,b'\xf0\x9f\x98\xa2'
22869,499043322,b'I think we should expose the same API on all targets'
22869,499043343,"b'Delimit and escape the identifier. Terminate statements.\r\n\r\n``` sql\r\nSAVEPOINT ""The """"SaveChanges"""" Savepoint"";\r\n```'"
22869,499043359,b'Whitespace is allowed'
22869,499043375,b'`ROLLBACK TO SAVEPOINT` (the SQL standard syntax)'
22869,502874906,"b""The Npgsql one :rofl: :\r\n\r\n```xml\r\n<TargetFrameworks>net461;netstandard2.0;netstandard2.1;netcoreapp3.1;net5.0</TargetFrameworks>\r\n```\r\n\r\nIt's honestly not that bad..."""
22869,502875520,"b""There's less value, since to invoke these APIs on older TFMs you'd be coding directly against SqliteTransaction (as opposed to DbTransaction), and so you can just use the Sqlite-specific SQL to do it.\r\n\r\nBut why not, I've done it."""
22869,502876150,b'Done (though curious why terminate with semilcolon)'
22869,502929762,"b'IDK, statements just feel incomplete without a semicolon. \xf0\x9f\xa4\xb7\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f But yeah, probably a waste of memory and CPU...'"
22918,503413659,"b'Oh funny, I thought we had to do a bunch of extra work to make this work. Awesome that it just works...'"
22977,503581589,"b""What's in 'master' may be correct still because the check you're removing looks for `HttpRequestException` -> `IOException` -> `SocketException` and the way I read the removal of `NetworkException` in dotnet/runtime, the extra indirection still exists. @ericstj @geoffkizer am I correct\xe2\x9d\x94\r\n\r\n@halter73 see https://github.com/dotnet/runtime/pull/41648/files#diff-eea2b2057ce5d8969b341b63d0ce4233436d020406edffb678d621956a2289edR801-R804 for example"""
22977,503586452,"b""Looks like you're right. I'll change it so it matches master."""
22977,504207664,"b'Deferring to @geoffkizer @karelz here, not sure what you are asking.'"
22977,504208598,b'We figured it out. @dougbu was right and I was wrong \xf0\x9f\x98\x84 '
22519,506978650,"b""```suggestion\r\n    <value>Unable to generate a valid 'id' value to execute a 'ReadItem' query. This usually happens when the value provided for one of the properties is 'null' or an empty string. Please supply a value that's not 'null' or an empty string.</value>\r\n```"""
22519,506978694,"b""```suggestion\r\n    <value>Unable to execute a 'ReadItem' query since the partition key value is missing. Consider using the 'WithPartitionKey' method on the query to specify partition key to use.</value>\r\n```"""
22519,506978715,"b""```suggestion\r\n    <value>Unable to execute a 'ReadItem' query since the 'id' value is missing and cannot be generated.</value>\r\n```"""
22519,506979203,b'Why did you remove quotes?'
22519,506979285,"b""```suggestion\r\n    <value>The entity type '{entityType}' is mapped to the DbFunction named '{functionName}' with return type '{returnType}'. Ensure that the mapped function returns 'IQueryable&lt;{clrType}&gt;'.</value>\r\n```"""
22519,506979353,b'Missing quotes'
22519,506979374,b'Quotes'
22519,507062749,"b""We don't currently quote null in any messages (and there are many) - if we want to start doing that we should do it everywhere, no? (though I don't think we should)"""
22519,507063227,"b'Sorry, mistake - will revert.'"
22519,507063878,"b""FWIW we also don't quote e.g. numeric literals"""
22519,507064753,"b'We seem to be inconsistent with quoting type names (as opposed to method names, which is what was discussed in #7201) - there are many unquoted instances. Should we always quote type names?'"
22519,507064863,b'As above.'
22519,507198030,"b'We should quote it if it\'s used as a literal, if you were to use it as an adjective quotes wouldn\'t be necessary - ""a null or empty string"" '"
22519,507198189,"b'Yes, we should'"
22519,508110352,b'Added note to discuss null quoting in #7201'
22519,508110850,"b'Done here, also added TODO note in #7201'"
22964,504395548,b'I doubt LocalDB is needed when only building'
22964,504395683,b'Why enable rich code navigation in the main pipeline too\xe2\x9d\x94'
22964,504395830,"b""If there's a bug here, it should be fixed in dotnet/arcade"""
22964,504396446,"b""Put another way, we don't want to increase the length of our CI builds and don't need to index PRs"""
22964,504951440,"b""Absolutely! Sorry, I should have linked to this in the PR. I've already got a [PR](https://github.com/dotnet/arcade/pull/6345) opened to fix this - I just changed it locally to verify that everything runs as expected. All looks well though in the [build](https://dev.azure.com/dnceng/public/_build/results?buildId=851253&view=logs&j=0bc77094-9fcd-5c38-f6e4-27d2ae131589&t=33a05e2b-74e7-5741-ccc1-a0526385f425) so I'll remove this change and wait to merge the PR until changes from arcade have merged and propagated."""
22964,504952611,"b""It's a great question! Yeah, we generally recommend people create a separate CI (i.e. this would add 20 minutes to your CI, which is a fairly hefty tax which we're working to decrease). I added it for now just to test how long it would take (e.g. 5 minute addition might be worth avoiding the added cost of another pipeline), but my recommendation for this repo is a separate pipeline. I'll remove this addition since it sounds like you agree :)"""
22964,504953214,"b""Great point! Thanks, I'll remove and save us some time"""
22964,508755731,b'Would this build run on PRs?'
22964,508766450,"b""@smitpatel I haven't added that trigger, but if folks would benefit from a richer PR experience then I can add that as well!"""
22994,504383563,"b'could make it generic on context type, but not sure if its worth it, thoughts?'"
22994,504383773,"b'not my proudest hack, any idea how to improve this? northwind is bit different than all the other suites b/c the customizer'"
22994,504385357,"b""ideally I'd like to enfore caching somehow (in case someone forgets, like I did initially) but the cache key is different for suites that define properties on context which are used in query filters, so not sure if there is a good way"""
22994,506733665,b'This does not cover GetDatabaseValues API'
22994,506737247,"b'<img src=""https://media.giphy.com/media/z9AUvhAEiXOqA/giphy.gif"" />'"
22994,506738326,"b""How about we leave ExpectedData as is and add a method GetFilteredExpectedData?\r\nWe are using bool value anyway in actual AssertQuery method to get applicable data.\r\nThat way we don't have to implement same stub where there are not query filters."""
22994,506738682,b'IFilteredQueryFixtureBase.GetFilteredExpectedData(DbContext context)'
22994,506739063,b'make it sync/async by optionally calling Find/FindAsync.'
22994,506739162,b'Same sync/async as suggested above.'
22994,506739538,b'Does this mean our filters cause inconsistent graph?'
22994,506740092,b'May be a FilteredQueryTestBase which derived from this class and test bases which has query filter based fixture would derive from FilteredQueryTestBase '
22994,506740268,b'At some point these methods would also explode in count.\r\nAlso it avoids calling into wrong expected data when filters are present.'
22994,506740666,b'Lovely'
22994,506782318,b'fixed'
22994,506782714,b'`>.<`'
22994,506800439,b'\xf0\x9f\x98\xa8 '
22994,506800991,b'Add `GetExpectedData` to `IModelCustomizer`'
22994,506814127,b'\xf0\x9f\x91\x80 '
22994,506966670,b'Also async variation.\r\nWe have SingleAsync and GetDatabaseValuesAsync.'
22994,506966790,b'Does OrderDetail exists without Order? I thought FK was OrderID and hence the relationship is required.'
22994,507006485,b'oops'
22994,507382312,"b""this is the way we enforce consistent graph for filtered entities (same for customer-order pair) - only leave out order details whose order (after it's filter has been applied) is still present. We (maybe) should do that with product also but filter for product is client eval so all the order detail queries would client eval as well"""
22994,507450228,b'its a product interface'
22994,507519345,b'I guess the dependent need to have same filter as principal on principal to make it consistent. Null check would hack it in. I am fine with this.'
22994,507960068,b'> its a product interface\r\n\r\nYes. You can create a new test interface that derives from it'
22994,508111909,b'Clean up commented line.'
22994,508176218,b'This is pending @maumar'
22994,508801057,"b'followed @smitpatel suggestion to have 2 methods for GetExpectedData, to minimize the impact on test suites that dont use filtered model'"
23080,510561668,b'properties?'
23080,510562028,"b""Just one extra space\r\n```suggestion\r\n    <value>The entity type '{entityType}' is mapped to a SQL query, but is derived from '{baseEntityType}'. Derived entity types cannot be mapped to a different SQL query than the base entity type.</value>\r\n```"""
23080,510562330,"b""```suggestion\r\n    <value>Cannot save changes for an entity of type '{entityType}' in state '{entityState}'. This may indicate a bug in Entity Framework, please report it. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the key values of the entity.</value>\r\n```\r\nI think we have a fwlink for please report it some other exception messages. We should copy that."""
23080,510562556,b'Parsing error. \xf0\x9f\x98\x84 '
23080,510562769,b'entity state is last argument in both of the exceptions.'
23080,510563074,"b""Usually we don't use usually multiple times in same sentence?"""
23080,510563623,b'-1?'
23080,510563693,b'remove?'
23080,510567546,b'copy-paste fail \xf0\x9f\xa4\xa6 '
23080,510571898,"b'I though we did, but I cannot find it.'"
23080,510629898,b'https://github.com/dotnet/efcore/blob/5ff9243697e7ff74cec6ac8b0b132a55015cb534/src/EFCore/Properties/CoreStrings.resx#L190-L192'
23091,511491709,"b'I think that if the user sets SqliteConnection.DefaultTimeout, it should take precedence. Only fallback to the connection string value when it\xe2\x80\x99s unset.'"
23091,511491908,"b'Also, do we ever use this value when the connection is closed? If so, we may need to read the value in the ConnectionString property setter.'"
23091,511497305,"b""Hi @bricelam \r\nBy unset you mean different from the default value (30)? Or should we implement a private property and explicitly check wheter the DefaultTimeout has changed in it's setter?\r\nI'm not sure, but I think that it doesn't make sense to use this property value when the connection is closed.\r\nThanks!"""
23091,511499952,"b'In fact, if we move this code snippet to the ConnectionString property setter we will have the desired precedence in most cases:  connection string/default timeout set via constructor and then eventually programatically changed, if the user changes again the connection string it would affect again the Default Timeout, it kinda makes sense.'"
22514,506743296,b'Add { } around the code in else block.'
22514,506743482,b'Can refactor code to create the attribute and _sb.AppendLine outside of the if/else\r\nand only add parameter for the if part (eliminating whole else block)'
22514,506743705,b'Also add a property which has no IsUnicode specified.'
22514,506744352,"b'```suggestion\r\n    ///     Configures the property as capable of persisting unicode characters. Can only be set on <see cref=""string"" /> properties.\r\n```'"
22514,509484507,b'```suggestion\r\n    ///     Configures the property as capable of persisting unicode characters.\r\n```\r\nIt can be set on property which maps to string like type in database using a converter. '
22514,509484716,"b'```suggestion\r\n    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]\r\n```'"
22514,509485851,"b""It should print even for non-string if the property contains value converter. Better thing to check is property's type mapping."""
22514,509486694,b'`[Unicode(true)]` should not get printed if default.'
22514,509487445,b'This should not be generated when default is going to take that only.'
22514,509488120,"b'Can you also add fields and map them explicitly (since fields are not mapped by default), and verify that Unicode is applied to them.'"
22514,511080946,b'```suggestion\r\n    ///     Configures the property as capable of persisting unicode characters.\r\n```'
22514,511202345,"b""Thanks @smitpatel  I've just updated my PR."""
22514,511216609,b'Collapse both if into 1'
22514,511217228,"b'```suggestion\r\n                            x.Property<System.DateTimeOffset>(""D"").HasConversion<string>();\r\n```\r\nshould also work'"
22514,511217290,"b'```suggestion\r\n                            x.Property<System.DateTimeOffset>(""E"").HasConversion<string>().IsUnicode(false);\r\n```'"
22514,511217528,"b'```suggestion\r\n                    Assert.True(entitType.GetProperty(""C"").IsUnicode());\r\n                    Assert.True(entitType.GetProperty(""D"").IsUnicode());\r\n```'"
22514,511217708,b'```suggestion\r\n            modelBuilder.Entity<UnicodeAnnotationClass>().Property(n => n.PersonMiddleName);\r\n            modelBuilder.Entity<UnicodeAnnotationClass>().Property(n => n.PersonAddress);\r\n```'
22514,511217869,b'```suggestion\r\n            [Unicode(false)]\r\n            public string PersonAddress;\r\n```'
22514,511218173,b'```suggestion\r\n            [Unicode]\r\n            public string UnicodeField;\r\n\r\n            [Unicode(false)]\r\n            public string NonUnicodeField;\r\n\r\n```'
22514,511411896,"b""@smitpatel  If we don't include `IsUnicode(true)` then when we call `IsUnicode()` in assertion, it will return `null`. Do you think we need to change the signature of this method https://github.com/dotnet/efcore/blob/main/src/EFCore/Extensions/PropertyExtensions.cs#L240 to return `boolean` instead of `boolean?` and all the string property will have default unicode is true instead of null ?"""
22514,511515603,"b'Method signature is right. Regardless of `IsUnicode(true)` called here, generated column will have same store type. And when reverse engineering same database, it should return this with or without this.\r\n\r\nLooking more at the test, it seems like the conversion is not actually applied. With converter, the database column would be generated of `nvarchar(max)`. When scaffolding column for it, it will generate string column not DateTimeOffset. Model with value converter cannot be same in round-trip.\r\n'"
22514,511530107,"b'@smitpatel  I am arranging property C as following:\r\n`x.Property<string>(""C"").HasMaxLength(34);`\r\nI see your suggestion: `Assert.True(entitType.GetProperty(""C"").IsUnicode());` it will result to fail testcase because the result is `null`. Any wrong in here ? '"
22514,511669996,"b'Something is wrong in same way as I commented earlier too.\r\nSince `IsUnicode(true)` has same effect as not specifying it by default, in scaffolded model A & C both property must have same unicode. Value being null or true either is fine as long as they are same. '"
22514,511670074,b'I will investigate to see what is going wrong here and in value converter case.'
22514,511981338,"b""Thanks @smitpatel  I've just updated my PR."""
22514,512371016,"b""property with value converter won't be encountered here till we start scaffolding from database with value converter which requires bigger change anyway to print value converter in fluent API."""
22514,512371181,"b""We force print attribute, because if the facet is inferred then it won't be set on the property."""
22514,512371383,b'Verifies generation of each possible value for the facet IsUnicode.'
22367,481783539,b'```suggestion\r\n```\r\nThis are excluded since they are not part of EF Core runtime.'
22367,481784679,"b'```suggestion\r\n  <PropertyGroup>\r\n    <TargetFrameworks>$(StandardTestTfms)</TargetFrameworks>\r\n    <AssemblyName>Microsoft.EntityFrameworkCore.OData.FunctionalTests</AssemblyName>\r\n    <RootNamespace>Microsoft.EntityFrameworkCore</RootNamespace>\r\n    <SkipTests Condition=""\'$(OS)\' != \'Windows_NT\' AND \'$(Test__SqlServer__DefaultConnection)\' == \'\'"">True</SkipTests>\r\n  </PropertyGroup>\r\n```'"
22367,481784864,"b'```suggestion\r\n      ""test\\\\EFCore.OData.FunctionalTests\\\\EFCore.OData.FunctionalTests.csproj"",\r\n```'"
22367,481785120,b'```suggestion\r\n            var json = await content.ReadAsStringAsync();\r\n```'
22367,481786296,b'```suggestion\r\n        [ConditionalFact]\r\n```'
22367,481786388,b'and likewise in other places.'
22367,481788539,b'Should we have OData specific AssertODataQuery method?\r\nwhich takes the requestUri and linq query and execute them and compare results (how we do when we specify efquery and l2oquery separately)'
22367,481919514,b'Was planning to add it in a later checkin.'
22367,482116221,b'inline temporary variable'
22367,482117201,b'`||` at the beginning of lines.'
22367,482118301,b'either use hard cast to IRoutingFeature in line above or make this line null safe.'
22367,482118985,b'Wait could do a lot of damage in xunit. consider switching to actual await'
22367,482121113,"b'Is there any OData specific configuration here?\r\nIf not, can we just reuse our context definitions from specs?'"
22367,482121810,b'put a constraint on T.'
22367,482122909,"b""Consider storing the name in a property.\r\nUse same name if these tests don't initialize the database else a different name."""
22367,482123674,b'are they customers?'
22367,482123889,b'add for level 2 & 4 also so we can verify those are also working.'
22367,482126029,"b'There was also another inheritance other than this in gears, right?\r\nIf yes then which other controller has ability to query for derived type?'"
22367,482127604,b'this could use refactoring to move stuff to base class common to all tests.'
22367,482129557,b'Why do fixture classes deriving from SqlServer fixture? I am not seeing anything used from base class.'
22367,482202888,b'Is this necessary?'
22367,482205531,b'inline variable'
22367,482211647,b'await'
22367,482241863,b'await everywhere'
22367,482244269,b'Why are so many properties ignored?'
22367,482249301,"b""That's what we do in northwind, no?"""
22367,482250408,b'Can we reuse existing code?'
22367,482274354,b'copy paste ;)'
22367,482275322,"b'factions and locustleaders I added the infra for them, just not the tests'"
22367,482276458,b'I did for the database creation infra'
22367,482277913,"b'name clash, Using the type only in one place so I could fully qualify. Thoughts?'"
22367,482292296,b'copied from the original northwind '
22367,482546228,b'removed that entire code - not needed'
22367,482548584,"b'I hit some issues with efcore specific stuff, e.g. keyless entities (but that was early on in the development process, could check again). Also the proper context needs to be injected into controllers. Did the easy thing for now just to get tests going. Was planning to tweak this in future checkins'"
22367,482700544,b'Also update the folder name to match project and csproj file name in this file. '
22367,485397195,b'Also add in EFCore.slnf\r\nand EFCore.Relational.slnf'
22367,485739203,b'Can we not reuse the same context generated in functional tests?'
22367,485741996,b'Which class has hierarchy in all these apart from Gear? Add a method to query the derived type too.'
22367,485742558,b'Where is this used?'
22367,485784329,"b'locusthorde : faction and locustcommander : locustleader I swear I added it before, must have been in a different branch'"
22367,485788835,b'will try'
22367,486499802,"b'This concerns me, but then again it might be totally fine.'"
22367,486500189,b'No need to publish this one'
22367,486502191,b'Just inline this. The bool overload is only useful if you allocate native resources.'
22367,486503945,"b'Careful, smitbot will reject your double linebreaks.'"
22367,486504349,b'(ditto)'
22367,486505028,b'(ditto)'
22367,486592999,"b'Added it because CI was complaining, will check again without as I changed some stuff there'"
22367,487348852,"b""any ideas how to make this less hacky? @smitpatel @AndriySvyryd @bricelam @roji? WaitForShutdown is blocked from completing until dispose is called, but then again can't call WaitForShutDown on potentially disposed object.  /cc @halter73 @Tratcher """
22367,487351428,b'For starters you should override DisposeAsync instead and use await.\r\n\r\nThen you can try this:\r\n```C#\r\nvar shutdownTask = _selfHostServer.WaitForShutdownAsync();\r\n_selfHostServer.Dispose();\r\nawait shutdownTask;\r\n```'
22367,487351716,"b""Registering a no-op IHostLifetime that replaces the default ConsoleLifetime might be the way to go for testing. The Host unit tests demonstrate how this can be done:\r\n\r\nhttps://github.com/dotnet/runtime/blob/ef4bc4d503b71f9de1a8988da6db38bcfcfb0cc4/src/libraries/Microsoft.Extensions.Hosting/tests/UnitTests/Internal/HostTests.cs#L495\r\n\r\nSomething similar can likely be done ODataQueryTestFixtureInitializer's ConfigureServices callback."""
22367,488107435,"b""This should bind to port 0 and then fetch the result from the server after it's started."""
22367,488107969,"b'Since you\'re not binding to IPv6 then you should directly address IPv4 to avoid connection delays. (Or change the binding to IPv6Loopback)\r\n```suggestion\r\n            var baseAddress = string.Format(""http://127.0.0.1:{0}"", port.ToString());\r\n```'"
22367,488110399,"b""Why do you even call [WaitForShutdownAsync](https://github.com/dotnet/runtime/blob/7f34be5319af78de3cb5fe12438f2756a864bddd/src/libraries/Microsoft.Extensions.Hosting.Abstractions/src/HostingAbstractionsHostExtensions.cs#L87)? It's redundant with [StopAsync](https://github.com/dotnet/runtime/blob/7f34be5319af78de3cb5fe12438f2756a864bddd/src/libraries/Microsoft.Extensions.Hosting/src/Internal/Host.cs#L95). WaitForShutdownAsync is for code that's waiting for someone else to call StopAsync."""
22367,488113420,b'https://github.com/microsoft/reverse-proxy/blob/ab34da2c3f91cff0cb0b61172d0c9d510c21692e/test/ReverseProxy.FunctionalTests/Common/Helpers.cs#L13'
22367,488393894,b'#22520'
22367,506746566,b'What if we moved _selfHostServer to the interface too and implemented this as DIM? \xf0\x9f\x92\xa1 '
22367,506746701,b'Skip with a tracking issue number or unskip.'
22367,508794004,b'This is a bit odd. Even in AspNetCore we only use Microsoft.NET.Sdk for tests. Why do you need .Web here? Because of the shared framework dependencies it brings in?'
22367,508794686,b'Delete this file.'
22367,508796831,b'This seems overkill. @javiercn ?'
22367,508798774,b'```suggestion\r\n```'
22367,508799433,"b""```suggestion\r\n            var baseAddress = selfHostServer.Services.GetService<IServer>().Features.Get<IServerAddressesFeature>().Addresses.First();\r\n            var clientFactory = selfHostServer.Services.GetRequiredService<IHttpClientFactory>();\r\n```\r\n\r\nOr just let the caller resolve it from the host, they don't need you to do it for them."""
22367,508799567,b'```suggestion\r\n```'
22367,512848367,"b""Agree,\r\n\r\nI'm not sure what you are trying to achieve here, but there's definitely a better way to do it than this."""
22367,512854398,"b'This is overkill, I would recommend you replace all/most of the infrastructure with the library we ship to do this type of testing. See [here](https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-3.1) for details'"
22367,512855204,"b""I just saw that you are spinning up kestrel, I would avoid that if you can, because it'll make tests faster and much more stable."""
23133,514262480,b'/cc @AndriySvyryd '
23133,514262661,b'/cc @AndriySvyryd '
23133,514262743,b'/cc @AndriySvyryd '
23133,514455277,"b'yup, add `&& newKey != null` to the condition here'"
23133,514460662,"b""No, `DeclaredReferencingForeignKeys` will never be `null` here unless there's a bug in `AddForeignKey`.\r\n\r\nThis and the next method don't have the best names."""
23133,514462464,b'No'
23133,514469127,"b""Shouldn't this and the next one be `NotNull`?"""
23133,514500987,"b'Yep, I messed it up, thanks.'"
23126,514284315,"b'We have an ""emerging standard"" of doing:\r\n\r\n```c#\r\nusing CA = System.Diagnostics.CodeAnalysis;\r\n```\r\n\r\n... which allows you to just do `[return: CA.NotNullIfNull(""expression"")]`\r\n\r\n(here and elsewhere)'"
23126,514288820,"b""_materializers can just be be nullable.\r\n\r\nBTW I've just annotated NonCapturingLazyInitializer as part of #23133, you can annotate LazyInitializer in the exact same way (do we really need two?)"""
23126,514290168,b'That is already expressed by that character you added below :)'
23126,514291701,"b""I think these specifically aren't necessary - other comments provide more context so are useful - here not so much"""
23126,514294246,"b'The new MemberNotNullWhen exists exactly for this - but requires targeting net5.0.\r\n\r\nI suggest leaving a // TODO-NULLABLE with a comment as a way to track minor nullability improvements (this is how things were done in the runtime repo, am doing the same in #23133'"
23126,514298628,"b""If we change LangVersion to 9, SingleOrDefaultAsync can return `Task<TSource?>`.\r\n\r\nSuggest leaving a `TODO-NULLABLE` (there's a good chance we'll do this)"""
23126,514300131,"b'I also annotated this in #23133 :)\r\n\r\ntarget should be non-nullable but have AllowNull - this means it can receive null as input, but when the method completes the variable can no longer be null (this is basically the entire function of EnsureInitialized). You can take a look at #23133.'"
23126,514300677,"b""Isn't it OK for this to be CanBeNull (for Jetbrains)? On the Roslyn side, no need for any change, since TParam can be string? (just like it can be int?)."""
23126,514314255,b'LazyInitializer comes from above. Make it just nullable infers the generic type as nullable even though the method definition in the source uses ref T?'
23126,514314659,"b'I wanted to have them in query in case if something changes in future, we can remove `!`'"
23126,514316022,b'We never passed it the null. The param is used with func/action which does not take null argument either in any use case.'
23126,514316129,"b'I think that if in LazyInitializer you annotate TValue without question mark (https://github.com/dotnet/efcore/pull/23126#discussion_r514300131), and you annotate _materializers as nullable here, it should be fine.'"
23126,514318032,"b""Then target type wouldn't match for our use cases."""
23126,514363763,"b""I don't see why... Isn't the point of EnsureInitialized to take something nullable and initialize it with non-nullable? Are my changes in #23133 wrong in some way?"""
23126,514418899,b'Can we do some solution level aliasing?'
23126,514419582,b'But LazyInitializer is not mine. \r\nhttps://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/Threading/LazyInitializer.cs'
23126,514420389,b'I followed LazyInitializer. I did not change [CanBeNull] annotation.'
23126,514514403,"b""I don't know of such a thing, unfortunately... But still better on a file-by-file basis then all those long namespace in code, no?"""
23126,514521889,b'It is is just one usage then neither matters. I was hoping for a global solution.'
23126,514522135,b'Will prefix comments which are due to limitations of NRT.'
23126,514517043,"b""Ah sorry, missed that. In any case, the following does seem to work (with _materializers being nullable):\r\n\r\n```c#\r\nprivate ConcurrentDictionary<IEntityType, Func<MaterializationContext, object>> Materializers\r\n    => LazyInitializer.EnsureInitialized(\r\n        ref _materializers,\r\n        () => new ConcurrentDictionary<IEntityType, Func<MaterializationContext, object>>())!;\r\n```\r\n\r\nSo there's a bang at the end of the expression (because the compiler doesn't know EnsureInitialized sets to non-null), but the annotation of _materializers is more correct, i.e. in case someone accesses it directly."""
23126,514913346,b'@roji volunteered to follow-up with runtime team why there is mismatch here.\r\nSpecifying generic type arg to be non-null does not fix issue either.\r\nBut putting bang as in code or in above example make it work.'
23126,515034142,"b""The actual reason is simply that we're currently targeting netstandard2.1, where LazyInitializer isn't yet null-annotated. In net5.0 it is and the bang is no longer necessary.\r\n\r\nWill add a TODO-NULLABLE as a reminder for this."""
22497,487287014,b'I think we should just always do this--no need for a flag. Thoughts?'
22497,487287795,"b'These arguments are backwards. (Note well, SQLite and .NET disagree on this.)'"
22497,487288329,"b'Again, reverse the arguments.'"
22497,487288981,b'@smitpatel Should we be really cool \xf0\x9f\xa4\x93 and generate a REGEXP operator instead of a function call? (only half joking)'
22497,487310232,b'```suggestion\r\n        ///     Configures enabling Regex.IsMatch method translation.\r\n```'
22497,487310371,b'```suggestion\r\n        => WithOption(e => e.WithEnableRegex());\r\n```'
22497,487310563,b'Sort alphabetically.'
22497,487310648,b'Save this in private static field.'
22497,487310839,b'Can if it has different structure than SqlFunction.'
22497,487311714,b'Remove additional test class. Instead use existing - NorthwindFunctionsQueryTestBase\r\nAlso Assert the SQL generated using AssertSql in the derived type in Sqlite.'
22497,487311770,"b'```suggestion\r\n            optionsBuilder.UseSqlite(""Database=Crunchie"", b => b.EnableRegex());\r\n```'"
22497,487342769,"b'`X REGEXP Y` is equivalent to `regexp(Y, X)`'"
22497,487343749,"b""Operator vs function syntax. I don't have preference. If you fancy, we can add it \xf0\x9f\x98\x89 \r\n"""
22497,487377862,"b'Yeah, no reason to just always have this...'"
22497,487441446,"b""Personally, I like the operator ...lol, but only because it feels more pretentious. \xf0\x9f\x98\x8f\r\n\r\nI'll let @scomert decide."""
22497,487441522,b'One non-subjective benefit is that it keeps the arguments in the same order as .NET'
22497,487564864,b'add `isDeterministic: true` (looks like I missed it on `ef_mod` too)'
22497,487565893,"b""We have to use the `Equals` method. I can't remember the exact bug, but I think one of the platforms (Mono?) can return different instances. Or maybe it was something to do with `ReflectedType` being different depending on how the expression gets traversed..."""
22497,487566413,"b""I have a vague memory about this no longer being relevant, but I don't remember the actual story. FWIW I compare MethodInfos in EFCore.PG with the operator all the time and haven't received complaints..."""
22497,487567033,"b""Oh I hope that's the case. @smitpatel?"""
22497,487737060,"b'Use `Equals`. I remember that we had bug and we changed specific `==` to `Equals` method. Unless we have someone from One.NET verifying that it will always be same and `==` is safe to use, I see very low value in changing this. Using `==` over `Equals` is just aesthetic. '"
22497,502930711,b'Note to self: review these'
22497,503402433,b'Nit: static field declaration should be before private fields.'
22497,503402523,b'```suggestion\r\n```'
22497,503402593,b'```suggestion\r\n\r\n        /// <summary>\r\n```'
22497,503402898,"b'```suggestion\r\n            Check.NotNull(sqlExpressionFactory, nameof(sqlExpressionFactory));\r\n\r\n            _sqlExpressionFactory = sqlExpressionFactory;\r\n```'"
22497,503404243,b'@bricelam - Regex usage without timeouts makes me nervous!'
22497,503404734,"b""false are right.\r\nAlso given function is non-nullable, we will simplified function is null directly rather than decomposing into arguments. So values here wouldn't matter much."""
22497,503405206,b'```suggestion\r\n\r\n        public override Task Regex_IsMatch_MethodCall(bool async)\r\n```'
22497,503423226,b'(wanted to make sure the null handling was consistent with [the reference implementation](https://github.com/sqlite/sqlite/blob/master/ext/misc/regexp.c))'
22497,514824095,"b""It's a shame we don't have access to DbCommand.CommandTimeout here."""
22497,514845002,b'Updated the SQL function to propagate NULL like the official extensions.'
22497,514847074,b'We can always add an overload that takes a timeout later.'
22497,514884178,b'This would be incorrect.\r\nWe need to infer type mapping from both args and apply to each other if one of them ends up being without type mapping.\r\nAnd returning type mapping is bool type mapping (rather than string). Passing null should populate it automatically. Or you can explicitly from type mapping source.'
22497,514884386,b'Random-ness but should also try version of the query where first arg is constant to verify proper type mapping assignment. '
22497,515378637,"b'lol, I like how SQLite didn\'t even care. ""You want to map bool to TEXT? Ok, whatever--it\'s all the same to me.""'"
22497,515386489,"b""Shouldn't ALFKI be printed like `'ALFKI'` ?"""
22497,515389703,b'Doh.'
19473,362935862,"b""Can't do `ulong` on the server since very large values overflow."""
19473,362936099,b'This will cause the bytes to be interpreted as UTF-8. Is that acceptable behavior?'
19473,363012484,"b'The tests I performed, I was successful!'"
19473,363013025,"b'I will remove, there is no support for that yet.'"
19473,363551701,"b'Can we add test for all these types in BuiltInDataTypesTestBase?\r\n\r\nIt can follow similar structure to `QueryBuiltInDataTypesTest`,\r\nA client side value converted to ToString compared to ToString on the column.'"
19473,387329800,b'See https://github.com/dotnet/efcore/issues/19651'
23159,515454195,b'\xf0\x9f\x98\xa8 '
23036,507029933,"b""This is potentially a provider-facing breaking change.\r\n\r\nIf we want to mitigate this (e.g. for backporting to 5.0), we could leave the old constructor, and have _sqlGenerationHelper set to null (SupportsSavepoints could return false when that's the case to avoid EF itself creating savepoints)."""
23036,515396897,"b'```suggestion\r\n            => ""SAVEPOINT "" + DelimitIdentifier(name) + StatementTerminator;\r\n```'"
23036,515396968,b'(below and in SqlServer too)'
23036,515397669,b'Pending TODO?'
23036,515509265,"b""Will add, but is there a reason we need the semicolon? AFAIK it's always OK to drop it in a single-SQL statement, and if ever want to batch it we can say it's the batcher's responsibility (I think of the semicolon more as a batching statement delimiter than as a statement terminator)."""
23036,515509368,"b'I think the chances of SQL Server adding support for this are, well, somewhat low :rofl: This is more an explanation than an actual future item of work IMHO.'"
23147,515070110,b'/cc @AndriySvyryd '
23147,515070492,b'/cc @AndriySvyryd '
23147,515071319,b'/cc @AndriySvyryd '
23147,515071405,b'/cc @AndriySvyryd '
23147,515071488,b'/cc @AndriySvyryd '
23147,515071539,b'/cc @AndriySvyryd '
23147,515071630,b'/cc @AndriySvyryd '
23147,515071696,b'/cc @AndriySvyryd '
23147,515071760,b'/cc @AndriySvyryd '
23147,515071822,b'/cc @AndriySvyryd '
23147,515197833,"b""this is non-nullable. Navigation.ClrType won't be null at runtime."""
23147,515198442,b'Just get null check out like skip part.'
23147,515198730,b'This is non-nullable as mentioned above.'
23147,515325978,"b""OK. FWIW filtering out nulls this is a specific case they're looking into for C# 10 (https://github.com/dotnet/csharplang/issues/3951)"""
23147,515326208,b'Fixing on IPropertyBase side as discussed with @AndriySvyryd'
23147,515346132,b'Non-nullable'
23147,515346177,b'Non-nullable'
23147,515346490,b'Non-nullable here and for the resto of the Add* methods in this file'
23147,515347173,b'Non-nullable'
23147,515347357,b'Non-nullable'
23147,515351064,b'Non-nullable'
23147,515353171,"b""This **is** about model-building vs runtime. I'll fix this and other methods that depend on type mapping in https://github.com/dotnet/efcore/issues/22031"""
23147,515354524,"b'Left those out, sorry - will correct.'"
23147,515356357,b'Have done this like the Add models (by leaving FinalizeModel nullable on Model and putting a bang in the extension over IMutableModel)'
23147,515358091,"b""It might be out-of-scope for this PR, but `Model.FinalizeModel` shouldn't return `null`, that's just silly"""
23147,515359213,"b""If that's so, I can just make that change. I was assuming that anything that comes out of ConventionDispatcher may be nullable, but this indeed doesn't make much sense here."""
23147,515359657,b'Is this related? needed? not needed?\r\nI thought they are used by R# to specify that this method is called via reflection and not dead.'
23147,515359774,"b""It does seem like OnModelFinalizing can return null (we check), so although I can put a bang before returning I'm not sure what would happen in that case."""
23147,515360327,"b'Just removed it because it is called (very explicitly) three lines above :) Otherwise yeah, these help R# not identify things as unused.'"
23147,515366319,b'Add a null check until we remove shadow entity types'
23147,515371734,"b""It can be `null` and we have a test where it's `null`, but in practice there's no reasonable scenario where it should be `null`"""
23147,515375659,b'These should be nullable'
23147,515376133,"b""This won't be hit in practice, but we can add the check until we remove shadow entity types to make the compiler happy"""
23147,515376591,b'Should use `GetIdentifyingMemberInfo()` instead'
23147,515376981,b'Or just `Name`'
23147,515391911,"b'Yes, add a check. I remember that there once was one, I guess it was refactored out.'"
23147,515395072,"b'OK, but ForeignKeyExtensions.CreateDependentsMapFactory assumes DependentsMapFactory is never null. Bang it or check and throw?'"
23147,515395293,"b'OK. Should I leave a TODO-NULLABLE with a reference to #22031, or do you prefer just leaving bangs with no comments?'"
23147,515395936,"b'OK, will bang'"
23147,515396792,"b'We check it at the call sites, but we can move it here for clarity'"
23147,515397708,b'either way is fine'
23147,515397983,b'Is this method missing <returns> in XML docs?'
23147,515398182,b'Bang and reference #22031'
23147,515399049,b'Would this be non-null? The returns does not say that null would be returned.'
23147,515399211,b'Same for other Remove* methods in this class.'
23147,515401322,"b'The annotation is correct, the check should be removed'"
23147,515401909,b'`HasTypeMapping` should also have `[NotNull]` and callers should add a check.'
23147,515402310,b'I feel odd that Get method is returning null.'
23147,515408091,b'Will return null if not found. We can fix the docs '
23147,515408939,"b'This is Internal, so we can rename to `FindGenerationProperty`'"
23147,515413172,b'Move this up to `_fieldInfoConfigurationSource`'
23147,515414743,b'We can either add a check or change to a single `MemberInfo` parameter.'
23147,515415039,"b'No, ReferencingSkipNavigations will never be `null` here.'"
23147,515415474,"b'No, `ProcessForeignKey(foreignKey);` sets it.'"
23147,515510881,b'Fixed up the docs.'
23147,515511244,b'Changed bang to runtime check'
23147,515511339,b'Removed TODO-NULLABLE'
23147,515511371,b'Removed TODO-NULLABLE'
23147,515512053,"b""Changing to a single MemberInfo sounds good, but it's a larger change... Let's leave for later (if we care enough). Removing the TODO-NULLABLE."""
23147,515512644,"b""So no way to unset a type mapping, right? Making sure because the docs on HasTypeMapping explicitly document accepting null to remove type mapping.\r\n\r\nThe only usage in our codebase seems to be in TypeMappingConvention.ProcessModelFinalizing, which we'll annotate a bit later - should that throw if FindMapping returns null?\r\n\r\nIn the meantime, changed HasTypeMapping (and CanHasTypeMapping) to have [NotNull]."""
23147,515515226,b'Added a check.'
23147,515515306,b'Left TODO-NULLABLE'
23147,515515762,"b'You mean in the published docs? I think this is a new method in 5.0 so not yet published, no?'"
23147,515517160,b'I will likely obsolete these methods when #22031 is done'
23159,515518763,b'We should make sure external PRs have negative tests'
23147,515534266,b'In XML docs in source code. The method is not void but still does not specify <returns> tag.'
23147,515584361,"b'Right, will fix this in the next nullability PR, thanks.'"
23147,515586436,"b""@AndriySvyryd as pointed by @smitpatel in https://github.com/dotnet/efcore/pull/23147#discussion_r515397983, SetTypeMapping returns CoreTypeMapping but that isn't documented. Since the parameter is now [NotNull], it seems they only ever return the supplied parameter. So these can probably be changed to return void, but if you're planning to obsolete them anyway for 6.0..."""
23147,515586586,"b'Actually, this now always returns the provided parameter (https://github.com/dotnet/efcore/pull/23147#discussion_r515586436), I\'m embarrassed to document the return type as ""always identical to the parameter"" :) '"
23147,515699738,b'We can say that it returns the type mapping that was set'
23147,515699993,b'Here too we can say that it returns the type mapping that was set'
23036,516134499,b'Mostly just for consistency at this point...'
23036,516135423,"b'AFAICT, it didn\'t actually ""Override to do nothing."" It just sent the invalid statement.'"
23036,516179317,"b""Are you saying there's a bug in the current codebase? AFAICT SqlServerTransaction overrides to do nothing, and the SQL generation helper throws NotSupported... I'm probably misunderstanding what you mean."""
23036,516276310,"b'Ah, I see the override below now.'"
23176,516351641,"b'Since TypeMapping will never be null on this class, you can do:\r\n\r\n```c#\r\npublic new CoreTypeMapping TypeMapping => base.TypeMapping!;\r\n```\r\n\r\nThis removes the bangs from everywhere else and more clearly documents things.'"
23176,516362374,b'Will do it in translation NRT PR.'
20792,516615629,b'Stumbled upon this today again. Any chance we can make progress on this (small) issue? Many people need to google on how to update tools. See this popular SO post: https://stackoverflow.com/questions/52108659/need-to-update-ef-core-tools'
23185,517011979,b':+1:'
23185,517013361,"b'Remind me, in the end null here means niladic, as opposed to no arguments, right?'"
23185,517013467,b'Do we want this to be nullable? For niladic?'
23185,517013767,b'Add TODO-NULLABLE for C# 9 (MemberNotNullIf on IsNiladic)'
23185,517014291,b'Niladic TVF :trollface:\r\n\r\n(jk)'
23185,517014966,b'Add TODO-NULLABLE for C# 9'
23185,517015478,b'?\r\n'
23185,517157553,"b'We should probably make TryGetSequenceType a standard Try* method, i.e. return bool with an out param.'"
23185,517158235,"b""Idea: these comments can go into Check.DebugAsserts (as the assertion failure text). This keeps the explanation texts, but also adds a debug-time check that we're not violating our invariants."""
23185,517158558,b':tada: '
23185,517159528,b'Can use `[return: CA.MaybeNull]` (but add TODO-NULLABLE for C# 9 where we can just do T?). Place bang on the null below (again only until C# 9)\r\n'
23185,517160294,b'Add TODO-NULLABLE for C# 9'
23185,517161654,b'Translation failures not possible here?'
23185,517163039,b':cry: '
23185,517163167,b'Should this actually be nullable?'
23185,517164794,b'Put `[return: MaybeNull]` on the function? Or is this some degenerate case?'
23185,517168567,"b""This is caused by Check.DebugAssert above - it sees we're checking property for null, so it infers that it is nullable. If you split it into two separate assertions, you can remove the bang (it sees a check, but the assertion checks two things with ||).\r\n\r\n"""
23185,517171156,"b""Just make _bufferedDataRecords non-nullable - it's set to null only when closing and then presumably never accessed again."""
23185,517172515,b'Never any translation failures?'
23185,517172972,b'Never any translation failures?'
23185,517208317,b'A bit weird that MakeUnary returns null for invalid operator types (rather than throwing)'
23185,517214439,"b'For ParameterValueExtractor, can annotate with `[return: CA.MaybeNull]` and put bang on the null below.\r\n\r\nFor ParameterListValueExtractor, put TODO-NULLABLE for C# 9\r\n'"
23185,517477158,b'Yup'
23185,517477575,b'Yes. For Niladic.'
23185,517478302,b'So that we can use contains with null value without having to explicitly check for null.'
23185,517478592,b'Not worth the breaking change.'
23185,517479382,b'No. This code path is only hit for client eval phase.'
23185,517479885,b'Obsolete method which is not used by query anyway.'
23185,517480704,b'As InMemory conditional'
23185,517481467,"b'We made that intentionally to make it fluid enough translate using MakeUnary. And if it does not work, it will cascade nulls.'"
23185,517481796,b'Can you add whatever is required in your next PR?'
23185,517483364,b'Unconstrained TResult which can be null/non-null.'
23185,517483861,b'Will remove the comment.\r\nThe assertions cannot be split.'
23185,517485573,b'bad search and replace.'
23185,517495903,"b""Not sure if it makes sense here. Since if the check fails then we wouldn't even reach here due to ModelValidator."""
23185,517496396,b'I think this would be easily found via nullable disable too. Feel free to update it whichever way you see fit.'
23185,517498025,b'Actually this would be appropriate this way only. In case the default is non-nullable it should throw exception in result to the user.'
23185,517512517,b'A bit smelly but ok..'
23185,517512931,"b""Wouldn't it just be another overload (because of the parameter difference)"""
23185,517595505,"b'Yeah - the point of debug assertions are that they are never supposed to be reached, unless some bug is introduced (e.g. someone accidentally removes the check from ModelValidator). This is mainly about making these explanatory comments into something slightly more useful.'"
23185,517595892,"b""Fair enough - we'll look for all of these once we target .NET 5.0."""
23185,517640738,"b""I guess it could be but this becomes change for the sake of it. The reason we have to put bang here because the type is known to be sequence type in query (since inner expression is either IQueryable or IEnumerable).\r\nThe amount of code needs to be changed to add ifs and use new API puts costs which may not justify value of doing it.\r\nIf you feel strongly, file an issue and let's discuss in team meeting."""
23185,517641480,"b""Someone removing check from ModelValidator will cause tests to fail before this path is hit. This is same scenario as EntityType.ClrType. At runtime it won't be null and model validator will block it to be used from runtime. We don't add debug assert for those either.\r\nExpression every invariant through nullable annotation and debug assert may not be best value. File an issue?"""
23185,517672310,b'It is always better to use DebugAssert instead of a pure comment as if the assumption needs to be changed it will be easier to find.'
23185,517675899,"b""No strong feelings, if you feel it's unnecessary let's drop it."""
23185,517676472,"b""> We don't add debug assert for those either.\r\n\r\nMy point was mainly that you already added comments to explain the bangs - might as well make the assertions instead. For places where we feel comments aren't needed (e.g. shadow entity types in query), we don't necessarily need assertions either (it's basically the same logic)."""
23193,517704438,b'\xf0\x9f\xa5\x82'
23185,517707914,"b'The key point is assumption which needs to be changed which is not the case here. This discussion is basically pointing me that if I add a comment then I should use DebugAssert which makes sense in some cases but not all, specifically this case or else I should not add any comment here.\r\nI wrote a comment here as a reminder that hierarchy mappings in InMemory works differently than other providers. There is nothing to assert here.'"
23192,517678225,b'And what do we do for Skip/Take with column argument :trollface: '
23192,517678522,"b'Breaking change, including in obsolete method above?'"
23192,517678853,"b'nit: collapse all these conditions into a single if, reducing indentation?'"
23192,517679682,"b'Not sure, but as this is a SQL Server problem, should these tests live exclusively in the SQL Server test suite?'"
23192,517705559,b'If it works in other providers then what is the issue verifying that?'
23192,517705698,b'It is not breaking change if you follow the bases.'
23192,517730349,"b'@AndriySvyryd - Is this breaking change? Not sure how this missed API review.\r\nFor the obsolete one, it added additional NotNulls but the overload is already obsolete, not sure what would be the way to unbreak it.'"
23192,517847228,"b""The type change is indeed only a provider-facing binary breaking change only, which should be fine. But if this method used to work for null parameters and doesn't any more, that is more problematic."""
23192,517848053,"b""Just the fact of adding unnecessary tests to all providers for something that is only a problem for one. I have a lot of PG-only tests which aren't added to the base classes only because EFCore.PG isn't in the EF Core repo, and SQL Server is.\r\n\r\nIt's also a form of documentation for someone reviewing the tests, to note which provider is actually affected by it etc. Just putting it in the right place.\r\n\r\nBut no strong feelings here."""
23185,517850119,"b""I do believe that any comment that explains an assumed state of affairs should instead be an assertion of that state - there's no downside to it, only upsides.\r\n\r\n> I wrote a comment here as a reminder that hierarchy mappings in InMemory works differently than other providers. \r\n\r\nYep, assertions are a codified form of reminder."""
23193,517853336,"b'If we have SqliteSqlExpressionFactory, the type inference logic can move to there as for other standard operators. Would be nicer and allow easier reuse in case any of these operators are generated somewhere else.'"
23193,517853460,b'Should all these factories move to a SqliteSqlExpressionFactory to follow the relational pattern? [I do this in EFCore.PG](https://github.com/npgsql/efcore.pg/blob/main/src/EFCore.PG/Query/NpgsqlSqlExpressionFactory.cs).'
23193,517853807,b'nit: switch expression'
23193,518123564,"b'Yes, I\xe2\x80\x99m not sure why it\xe2\x80\x99s this way, I wanted to check with Smit before refactoring.'"
23193,518125335,"b'lol, I knew someone would say something. I just copied the style of the base class. We should convert them all in bulk.'"
23185,518203610,b'I disagree with that. This repository has code comments added by various people.'
23192,518204905,b'Not this method. This method was always marked with NotNull and has Check.NotNull for all the non-nullable arguments.'
23193,518208998,b'They were this way since strftime actually does more than constructing SqlExpression based on just arguments. That method was added before we had SqlExpressionFactory. So it just remained that way.\r\n\r\nI am fine whichever way you want to put it. Derived factory is generally required when we have to assign type mappings.'
23193,518209151,b'What is the return type of the statement? '
23193,518210050,"b""For bool expressions, we don't pass type mappings. SqlExpressionFactory should assign that by default."""
23193,518324315,b'bool/INTEGER'
23193,518324900,b'See https://github.com/dotnet/efcore/pull/23193#discussion_r518210050 '
23193,518337926,b'Does Glob function would always take type mapping for bool? or Can it take any other type mapping too?'
23193,518325220,"b'SqlExpressionFactory only assigns for expressions it knows about. Unknown SqlExpressions aren\'t assigned and eventually throw ""can\'t translate""'"
23193,518399105,"b""It will always return 0, 1, or NULL. Type mappings aren't really important in SQLite. For example there is only one TEXT type and fixed-length, max length, and Unicode don't mean anything outside of the EF metadata. The only thing that matters is what CLR type EF asks for from the DbDataReader."""
23193,518401510,"b""BUT I still think it's important to maintain and propagate the EF type mappings in query for the sake of setting a good example for other provider writers."""
23193,518415147,"b'Being totally provider agnostic, general rule for SqlExpressionFactory is to only ask for type mapping when it cannot be determined by itself. e.g. `a == b` is a condition and will give back boolean value hence type mapping of it should be of bool type mapping.\r\nFor this case of GlobExpression,\r\n- If it is created by using a derived class of ISqlExpressionFactory by replacing service, then guidance is not require type mapping and assign it internally since SqlExpressionFactory has type mapping source and call GetMapping itself.\r\n- If it is created any other way, then type mapping should be passed since at the end of the day, actual GlobExpression will need it.\r\nAbove are guidelines, providers are free to do whatever as long as the expression has type mapping and type assigned. Though if TypeMapping and Type are mismatching in some way then there could be other issues in shaping the result.'"
23193,518457620,b'Correct. This code can change if we implement our own expression factory that knows how to infer the mapping (and fallback to a default) for the glob and regexp expressions.'
23193,518466874,b'Do you want me to update the base factory to handle unknown expressions? (it leaves them null)'
23193,518470425,b'Base is fine (may be we can refactor a little).\r\nSomething like this should be done in sqlite provider https://github.com/npgsql/efcore.pg/blob/1ed5cfb5b2b16cd0624f79e28b1d780fcebf1419/src/EFCore.PG/Query/NpgsqlSqlExpressionFactory.cs#L202-L220\r\n\r\ni.e. if we decide to add `SqliteSqlExpressionFactory`. The way it is done currently is also fine. '
23193,518541557,"b""Especially if we want the Sqlite to set a good example, I'd go with SqliteSqlExpressionFactory. There's also DRY value in case Glob/Regex expression types ever get created in multiple places - the type inference wouldn't have to be duplicated since it would be inside the factory."""
23215,518782826,b':nauseated_face: '
23094,518430731,"b""may be?\r\n```suggestion\r\n    <value>Required properties '{requiredProperties}' are missing for the instance of entity type '{entityType}' with the key value '{keyValue}'</value>\r\n```"""
23094,518430884,b'Should there be non-sensitive version for this? We are exposing key values.'
23094,518430982,b'```suggestion\r\n```'
23094,518432255,b'Can combine this for loop with computation of row above.'
23094,518433393,b'Good catch! This is why managers should not do code reviews! :-)'
23094,519223196,"b'Makes sense, done.'"
23094,519223286,b'Done. How can I catch this more easily?'
23094,519223403,b'Done @smitpatel. Now to see the entity key values in the required error message you need to enable sensitive logging.'
23094,519224132,b'Consider renaming variables for less confusion\r\nrow -> property/column\r\nrows -> row.'
23094,519225914,"b'A good IDE should show these as grayed-out or similar so you can see the ones not needed. Also, various code cleanup tools can do this, which we typically run periodically on the codebase anyway.'"
23094,519245630,"b'Sure, done.'"
23112,513828611,b'Reusing this computed value of GetNullableColumns in CreateIndexFilter could be useful.'
23112,513830566,b'Refreshing my understanding here\r\nConvention would not override DataAnnotation/Explicit\r\nConvention would not override strictly Convention/DataAnnotation/Explicit \r\nThe later implies that propertiesConfigurationSource should be null?'
23112,513833918,"b""Yes, but I didn't want to use `propertiesConfigurationSource != null` here in case we introduce [`Default` configuration source ](https://github.com/dotnet/efcore/issues/9329)"""
23112,513835333,"b""Next question since this condition would check that propertiesConfigurationSource is not Convention then next condition checks it again? Wouldn't that be always true?"""
23112,513878020,"b'The next condition is still necessary as the first condition is `true` when `propertiesConfigurationSource` is `Convention`, `DataAnnotation` or `Explicit`.'"
23178,517004620,b'```suggestion\r\n```'
23160,519051283,b'nullable'
23232,520196203,"b'```suggestion\r\n                        nullable: false,\r\n                        argumentsPropagateNullability: new[] { false },\r\n```'"
23232,520196687,"b'`ISNUMERIC(NULL)` returns 0, not NULL'"
23232,520197266,"b""Why `Convert`? AFAICT, it's not needed."""
23232,523119671,"b""Thanks @bricelam  I've just updated my PR."""
23322,523343597,b'You can make the method non-static and use `_enableContentResponseOnWrite` directly.\r\n\r\nYou can use the coalescing operator `??` to make this shorter.\r\n\r\nAnd inline `jObjectProperty` to avoid looking it up if `_enableContentResponseOnWrite` is set'
23322,523412241,b'Done.'
23322,523577058,"b'No need to create another class, you can move the tests to `CosmosConcurrencyTest`, just add another constructor to `ConcurrencyContext`'"
23322,523810382,b'extra blank line'
23322,523810401,b'extra blank line'
23322,523810409,b'extra blank line'
23322,523816134,b'removed'
23322,523816156,b'removed'
23322,523816159,b'removed'
23346,524371381,b'Did you mean != null ?'
23320,523225533,b'old behavior was just to return?'
23320,523233810,"b'No, but skipping validation would allow more scenarios if there are any issues with the fix'"
23346,524962204,"b""No. I mean == null. If we check != null then the collection can't delete null values and this will cause memory leaks. Please look at my screenshot in linked Issues."""
23143,515328674,b'RemoveConvert?'
23143,515329094,"b""We don't have RemoveConvert anymore. That was a sword which cut wrong things at wrong times."""
23143,515330454,"b'we actually have it sprinkled around the code base in form of private methods, im fine with leaving it as is. '"
23305,522864697,"b""This message is tricky, because it is logged from SqlServerTransaction.SavepointsSupported, which is public and can be used by API consumers other than SaveChanges. The other option is to log from BatchExecutor if savepoints aren't supported, but then the message cannot be SQL Server-specific, so no mention of MARS (also doesn't seem relevant for any relational provider which e.g. doesn't support savepoints at all). We can also do both but that seems rather heavy.\r\n\r\nSo I opted for this SQL Server-only message that is general, but at the same time mentions SaveChanges."""
23305,522866840,b'Can we get an fwlink for the doc link? See https://github.com/dotnet/EntityFramework.Docs/pull/2869\xd7\xa5\r\n\r\n/cc @JeremyLikness '
23305,523263877,"b""I don't think that the transaction is left in an unknown state, it will be rolled back if EF starts the transaction and not rolled back otherwise"""
23305,523435523,"b""The comment is indeed missing the point about the transaction being explicit/external (will fix) - but in that case, if it isn't rolled back there is no way of knowing which updates were already sent and which weren't, so an unknown state, no?"""
23305,523558392,b'When possible change to `TestStore.AddProviderOptions(new DbContextOptionsBuilder())`'
23305,524518775,"b'Without savepoints, if SaveChanges fails when the application owns the transaction, then it is required that the application roll back the transaction before re-trying SaveChanges. I don\'t know if I would express this as ""unknown state"" any more than any failed transaction is in an unknown state.\r\n'"
23305,525080209,"b""Regardless of EF/SaveChanges, if I have a transaction, attempt to execute a single operation and that operation fails, I know exactly what state my transaction is in (identical to what it was before I attempted the operation). The unknown part comes from the fact that EF performs multiple operations, which in addition have been reordered, so there's no way of knowing what got in and what didn't.\r\n\r\nHowever, I'm open for proposals :)"""
23305,525239659,"b'""Savepoints are disabled because Multiple Active Result Sets (MARS) is enabled. If \'SaveChanges\' fails, then the transaction cannot be automatically rolled back to a known clean state. Instead, the transaction should be rolled back by the application before retrying \'SaveChanges\'.""\r\n\r\n'"
23305,525250476,"b'Done, just waiting for an fwlink now.'"
23305,525342281,b'I assume this? https://go.microsoft.com/fwlink/?linkid=2149338 @roji '
23305,525383865,"b'Great, thanks @JeremyLikness!'"
23305,525385330,"b'One more thing @JeremyLikness, can you please make it point specifically to the savepoints section of that page (https://docs.microsoft.com/en-us/ef/core/saving/transactions#savepoints)?'"
23296,522472819,"b""Hmm, this works in VS and with `dotnet build`, but for some reason they're still errors in `build.cmd`"""
23296,522473903,b'We probably want to bump this to 9.0 too.'
23296,522475703,b'arcade doing something? '
23296,522479155,b'Digging into it. The flags to `csc` look the same... Checking environment variables next.'
23296,522480551,b'Oops. Guess we can remove it.'
23296,522489197,b'Should we extract this to the common Directory.Build.props or something?'
23296,522489517,b'Remove?'
23296,522490145,b'Intentional change to remove SocketException?'
23296,522490993,b'Sure. I can also do this in a separate PR where I clean up the TODO-NULLABLE reminders we left behind with new C# 9 stuff.'
23296,522506934,b'Renamed the variable to match the type (it was updated during 5.0)'
23296,523195613,"b'Wow, Arcade is very aggressive about turning on warnings as errors...'"
23296,523204307,"b'Personally I like to keep the csproj files relativly ""vanilla"" even if it\'s not as DRY. I hate hunting through msbuild files to find basic properties.'"
23296,523220198,"b'<img src=""https://media0.giphy.com/media/l2SpZkQ0XT1XtKus0/giphy.gif"" />'"
23296,524902680,b'This seems like it should not be necessary - this should be implicitly inherited from ExpressionVisitor. Opened https://github.com/dotnet/roslyn/issues/49428.'
23296,524904030,"b""Shouldn't NewExpression.Members be non-nullable (empty if no members), just like MethodCallExpression.Arguments?\r\n\r\nIf you agree, I can open an issue"""
23296,524905799,"b'Seems like Translate methods still return null for non-translatability, whereas Visit has been changed to return NotTranslatedExpression - should we change for consistency?'"
23296,524907133,b'We can override ToString in IEntityType to not be nullable'
23296,524907281,b'Required?'
23296,524908097,b'nit: unintentional space?'
23296,524908229,b'We should open a bug in ~dotnet/roslyn~ dotnet/runtime (want me to do this?)'
23296,524908554,b'Required?'
23296,524910069,"b'Refactor idea... This node could carry up the translation error detail message, i.e. replace AddTranslationErrorDetails. This would allow providing a nice translation error even from method translators etc.\r\n\r\n/cc @maumar'"
23296,525208716,"b""Not sure what the annotation for this method should actually be... Usage in our codebase doesn't seem to need nullable `propertyName`, and we do have checks on the return value being nullable."""
23296,525209144,b'For reference: https://twitter.com/smitpatel/status/1328545513549905920'
23296,525311456,b'Members can be null.'
23296,525311761,b'No'
23296,525314166,"b'You can. Regardfless when printing out entity name in query trees, using the name is most appropriate as it will uniquely identify the entity type and query does not need to know other information about entity type in detail.'"
23296,525314435,b'design-meeting'
23296,525314809,b'auto-format'
23296,525314897,b'Yes.'
23296,525315162,b'Also NewExpression.ctor'
23296,525328351,"b""- Breaking change to error details message.\r\n- Requires making an expression public to carry data\r\n- Each type may need to reconstruct the expression\r\n- Loss of perf from reusing the same static instance.\r\n\r\nI don't think it is worth. You can bring into design meeting if you wish.\r\n"""
23296,525339035,"b""I've actually wanted to be able to do this from provider method translators... \r\n\r\nRe perf, it's still possible to reuse static instances - we can have the same global one without any data and use that everywhere (if we think it's important we can even have static instances for specific messages, but that's probably not worth it).\r\n\r\nThe (provider-only) breaking change seems pretty minor, compared to what we usually do in every major release. \r\n\r\nIt's pretty weird to now have a node type dedicated to conveying non-translatability, and then a completely separate API bypassing that to provide the reason for that same non-translatability."""
23296,525339602,"b""What's the difference between null and empty Members?"""
23296,525340323,"b""I know you're a busy guy and all, but it's customary to provide at least minimal reasoning when rejecting something."""
23296,525344377,b'Translate can and will return null. There is no need to extend artificial constructs on our API because it is present in ExpressionVisitor we need to use in runtime.'
23296,525344978,b'bring it to team meeting. I am not stopping you.'
23296,525345123,b'Ask runtime \xf0\x9f\x98\x89 '
23296,525385856,b'declaringType can be null'
23296,525391722,"b'OK, will leave to you to handle unless you say otherwise.'"
23296,525397503,"b""It's model. :trollface: """
23296,525605168,b'Updated this again!'
23296,525668470,b'Can we add some annotations to avoid using `!` here?'
23296,525669576,b'We cannot \xf0\x9f\x98\x9e \r\nTypeMapping is nullable when we are translating expression. It is non-null after translation phase.'
23296,525671588,b'Can we add a check in the constructor instead?'
23296,525672918,b'How in ctor we can add check? This thing is non-null because parameter can have null name but parameters inside query are generated by query compiler and they always have a null.'
23296,525674498,"b""Why is `!` needed here? Isn't the cast enough?"""
23296,525675532,b'Casting something which returns nullable to non-null with hard cast is still null error. \xf0\x9f\x98\x86 '
23296,525677915,b'Remove the `!`'
23296,525678352,b'\xf0\x9f\xa4\xa3 '
23296,525683091,b'\xf0\x9f\x98\xae '
23296,525683607,b'\xe2\x9d\x93 '
23296,525689600,b'What about `constant.Value`?'
23296,525690456,b'@roji  Is this by-design or a nullable bug?'
23296,525691821,"b'Then you should be able to check it in the `SqlParameterExpression` ctor, no?'"
23296,525692844,b'InExpression.Values when constant expression is always non-null.'
23296,525693348,b'*bug'
23296,525712872,"b""But the check wouldn't help nullability here, unless I store name in field?"""
23296,525726621,b'_annotations is nullable. Cannot remove. cc: @roji'
23296,525727440,b'I fixed this in runtime. Will update once we get new dependency with fix.'
23296,525728027,b'Fixed this.'
23296,525777845,"b'Hmm, must be a limitation of the compiler then'"
23296,525778473,"b'Right, but can you put MemberNotNull on FindAnnotation?'"
23296,525838853,"b""Yeah, it's by design.\r\n\r\nThe language decision was indeed to require an explicit bang in *any* conversion from nullable to non-nullable - a cast is not enough. One good argument for that is that if casts were enough, then in legacy (unannotated) code they would automatically become nullable->non-nullable conversions, introducing many bugs.\r\n\r\nRe ExecuteScalar, that is particularly painful. The problem is that ExecuteScalar does return null (as opposed to DBNull.Value) when there is no resultset, i.e. if you execute DELETE/UPDATE/INSERT. It's an awful API, and I hope to have enough time to make a better one in https://github.com/dotnet/runtime/issues/26511, which would be both generic (non-boxing) and better around nullability."""
23296,525840502,"b'I looked into that - the problem is that if FindAnnotation return null (not found), _annotations may still be nullable afterwards. And [MemberNotNullWhen] requires a constant to be specified as the return value - I don\'t think it\'s possible to say ""when the return type isn\'t null"".\r\n\r\nThis would be possible if we use TryFindAnnotation instead.'"
23296,525841141,"b""GetType might not find the type in the assembly, and the compiler doesn't know that the method throws if the second parameter is true (no annotation for that exists).\r\n\r\nWe should just have GetRequiredType like for methods no?"""
23296,525841317,"b""I could argue that a cast to non-nullable value type would still retain its meaning, but I see why they wouldn't want complex rules like this"""
23296,525848620,b'There was just one usage so I did not add method. Compiler should add annotations for first party usages \xf0\x9f\x98\x89 '
23296,525849153,b'I stored name in the field and added Debug.Assert in the ctor. So incorrect parameter expression passed should error out early.'
23376,525935928,"b""@AndriySvyryd assuming you're OK with this removal, we can also remove Fixture.TryGetProviderOptionsDelegate which isn't being used anywhere else."""
23376,526388639,"b'Yes, but add a condition in the next test to check that the dependency object is a record'"
23376,526424498,"b'Oh sorry, I hit merge before noticing this. Will do a fixup PR.'"
23376,526425835,b'Still finding ways to boost your commit count even with squash being enforced.'
23376,526426764,"b""One must always find a way... :rofl: \r\n\r\nIt's actually not entirely clear how to detect records in reflection. Will look into this."""
23296,526432304,"b'OK, am gonna drop this.'"
23376,526443626,b'Long way to go on commit count @roji  \xf0\x9f\x98\x89 '
23376,526477572,b'Indeed. I should be doing a better job than these mammoth nullability commits.'
23381,526242274,"b'The one place where SqlQuery is constructed, its Sql is set right afterwards in an initializer. Should we move this to the constructor?'"
23381,526244822,b'Should this method be nullable?'
23381,526245579,"b""What's up with the primary key here"""
23381,526246925,b'@smitpatel sqlConstantExpression.Value is nullable'
23381,526247178,b'@AndriySvyryd'
23381,526247860,"b""@AndriySvyryd what's the right annotation here?"""
23381,526248018,"b""@AndriySvyryd what's the right annotation here?"""
23381,526257232,b'@AndriySvyryd '
23381,526259680,b'may be just use Compare = 0 like a file above?'
23381,526260925,"b'we should construct this as if declaring type is can be null, just like schema.'"
23381,526261824,b'inheritdoc may be?'
23381,526262627,b'inheritdoc?\r\nAlso put them together towards the end of file where explicit implementation of interfaces generally are.'
23381,526266547,b'string?'
23381,526267478,b'Compare == 0?\r\nAlso Compare checks a lot more components than Equals. Is this Equals by design? @AndriySvyryd '
23381,526268572,b'?'
23381,526269603,b'MemberInfo/Name - one of them is always present. The null check is unnecessary. '
23381,526269930,b'same as above.'
23381,526271106,b'return null constant of property nullable type if value is null.'
23381,526271429,b'Where is GetMappedEntityType?'
23381,526275060,"b'we are on net5.0, no? :trollface: '"
23381,526280073,b'Is this safe?'
23381,526282258,b'GetRequiredMethod?'
23381,526283491,b'Almost there'
23381,526285945,b'may be back-compat when we added materialization context. break it. :trollface: '
23381,526287080,"b'One of them is always non-null, remove null check.'"
23381,526298229,"b""There's the (theoretical) possibility of an empty/default, do you prefer we bang this?"""
23381,526300655,"b""I prefer consistency. If we are checking for null on both everywhere, I am fine we doing same here. But if we are banging everywhere else then should do here the same.\r\nIf we don't have consistent rule defined then I would prefer to bang. It is a invariant which cannot be represented right now. It may be represented by NRT annotation at some point so it changes meaning somewhat."""
23381,526306571,b'https://github.com/dotnet/efcore/pull/23381#discussion_r526244822'
23381,526314756,"b""Yes but how this code is using it? That's what I am missing."""
23381,526401855,"b""I wonder if it's possible to annotate `property.IsPrimaryKey()` to indicate `property.DeclaringEntityType.FindPrimaryKey()` will be non-null. Otherwise you can call `property.FindContainingPrimaryKey()` instead"""
23381,526403588,"b""We've annotated Core Add* methods as returning nullable types, we should be consistent here."""
23381,526405957,b'This is the S-space counterpart of the function parameter. We could make this non-nullable as once the model is built this will be non-null'
23381,526407672,b'We could make these two non-nullable and throw as we do in `IsOptional`'
23381,526409396,b'Wrong annotation. Should be `NotNull`'
23381,526410209,b'`NotNull`'
23381,526411496,b'`AddDbFunction` should have a nullable return'
23381,526416550,"b'Bug alert: this and below should use `storeObject.StoreObjectType` instead of `StoreObjectType.Table`. Also if `principalTable` or `duplicatePrincipalTable` is `null` this should throw (or return `false`), basically the same as when `principalColumns` is `null`'"
23381,526422916,"b'`entityType` could be keyless, so we should add a check'"
23381,526440726,"b""We could, be seems like there's a lot of needless comparisons happening in Compare that we don't need here... Not sure if this could be perf-sensitive..."""
23381,526444380,b'oops'
23381,526445204,b'Changing to bang'
23381,526445479,b'#inconsistencies!\r\n\r\nI am fine having a special method body for equal though we should make sure they use the same components in both so results are same. There is at least one place I commented where the implementation of both differed.'
23381,526450619,"b'I think so... This private AddNavigation gets called from two sites, where a non-None MemberIdentity is constructed... Do you see a problem?\r\n\r\nWe may want to think about the design of MemberIdentity to make it friendlier...'"
23381,526450792,b'So... are we removing GetRequiredMethod in the end?'
23381,526455202,b'Return should be nullable'
23381,526455217,b'Depends on caller. But if we are using just name (rather than memberInfo from MemberIdentity then string parameter could have just worked too.'
23381,526455584,"b""> I wonder if it's possible to annotate property.IsPrimaryKey() to indicate property.DeclaringEntityType.FindPrimaryKey() will be non-null.\r\n\r\nUnfortunately not... [MemberNotNullWhen] can only reference fields or properties, not methods. However, if instead of FindPrimaryKey we just had a PrimaryKey property :wink: \r\n\r\n"""
23381,526455710,b'Sounds good'
23381,526455860,b'I can neither confirm nor deny.'
23381,526456696,"b""No, I added the exception later, but didn't change the callers"""
23381,526457058,b'In Core we did this because conventions are called which may override and return null - do you want to annotate as nullable because we may add such conventions for sequences in the future?'
23381,526457644,b'(doing the change in any case)'
23381,526458128,"b'Yes, this only compares identifying information'"
23381,526460118,"b'I can do that, but currently these only seem to return null if GetMappedEntityType returns null, and that only seems to happen if we pass it null as the entityType and EntityMappings has a mapping with a null EntityType (can this happen?).\r\n\r\nIn other words, GetMappedEntityType looks a bit odd...'"
23381,526460370,b'\xf0\x9f\x98\xa2 '
23381,526465707,b'I agree...'
23381,526465905,"b""The code here is calling GetRowInternalForeignKeys in TableBase, and that method is nullable although it doesn't seem like it should be (it calls GetMappedEntityType). See https://github.com/dotnet/efcore/pull/23381#discussion_r526407672."""
23381,526466020,b'Discussed in https://github.com/dotnet/efcore/pull/23381#discussion_r526407672'
23381,526466627,b'https://github.com/dotnet/efcore/pull/23381#discussion_r526407672'
23381,526466965,b'MemberIdentity.Name should be non-nullable'
23381,526467679,b'You can remove this line now'
23381,526468611,b'Of course...'
23381,526469620,"b""Should mark IConventionModel.Builder as non-nullable, there aren't any practical situations when in would be `null`"""
23381,526473909,"b""We don't need 2 different calls. 2nd Function allows nullable schema as parameter. Please revert this change."""
23381,526478863,"b'Yeah, the discrepancy is definitely weird, /cc @AndriySvyryd '"
23381,526479007,"b""I'm guessing the same as https://github.com/dotnet/efcore/pull/23381#discussion_r526458128?"""
23381,526479739,"b""At least theoretically there's the None value of MemberIdentity. Should Name be non-nullable and just assert for that case?"""
23381,526479865,b'So many words to just write NCND'
23381,526480448,b'It is not annotated in this way :trollface: The implementation also has a Check.NotNull on the schema... Should this be changed?'
23381,526486672,"b'No, this is a bug, should be non-nullable'"
23381,526488215,b'We could replace it with `IsNone()` method'
23381,526489113,"b""`GetMappedEntityType` shouldn't take nor return `null`"""
23381,526495487,"b'Refactored this to have CheckMappedEntityType which only throws - I think the code does the same as before, but can you please take a look?'"
23381,526723677,b'Resolved'
23381,526724041,b'Leaving as-is as per https://github.com/dotnet/efcore/pull/23381#discussion_r526458128'
23381,526724215,b'Resolved'
23381,526748200,"b""FWIW the two current call sites for this seem to always pass Table, so this shouldn't cause any trouble currently.\r\n\r\nFixed the above, hopefully as you wanted - if not let me know and I'll correct in a future PR."""
23381,526748460,"b'@smitpatel am merging as-is for now, we can revisit this afterwards and improve.'"
23381,527085619,b'whyyyy?'
23381,527100658,b'@roji This one is still pending'
23381,527101372,b'It would be better to move the\r\n```C#\r\nprincipalTable is null\r\n|| duplicatePrincipalTable is null\r\n```\r\n\r\ncondition to the next `if`'
23391,527471925,b'also ConvertChecked'
23391,527483334,"b'When we are here we are basically matching `instance.Equals(param)` method.\r\nBy default there would be method coming from object, `Equals(object)`, the Type can also add overload of `Equals(Type)`.\r\nNow, we always flow null forward except for parameter values of the a method call since the method may not be take nullable parameters so we convert all the parameter to match their types if they are non-nullable type. Which can happen for the latter overload if any. Since we do this conversion (by calling ConvertToNonNullable function), it would always be a Convert node from nullable to non-nullable value, which we want to remove here since `((bool?)(bool)nullableBoolColumn) == null` would throw exception even before comparing to null. Hence I put Convert node. Do you still think we need ConvertChecked here? (This is speculative future proofing), the tests work fine without this if block too.'"
23381,527711255,"b'Not to worry, I will revert this in the next PR.'"
23381,527711536,"b'No problem, I will do that in the next PR.'"
23381,527716630,b'Yep - but so do you want me to make MemberIdentity.Name non-nullable by doing an IsNone check inside and throwing?'
23381,527935981,"b""- Add `IsNone` to replace `MemberIdentity.Name == null` checks\r\n\r\nAnd either:\r\n1. Make `MemberIdentity.Name` non-nullable and throw if it's called on `None`\r\n\r\nOr:\r\n\r\n2.  Annotate `IsNone` and call it before calling `MemberIdentity.Name`\r\n\r\nI think the first option requires less code changes"""
23381,528153858,"b'OK, am doing the first option.'"
23376,528175176,b'https://github.com/dotnet/efcore/pull/23423#discussion_r528174774'
23381,528175211,b'#23423'
23381,528175220,b'#23423'
23381,528175237,b'#23423'
23391,528483287,"b""In that case let's keep Convert only. Perhaps add a comment in case we decide to sweep thru entire codebase and unify convert+convertchecked checks. But I don't feel strongly."""
23455,529732111,b'Why is EntityRequiresKey thrown in these cases?'
23455,529746903,"b""If the join entity is same as one side of skip navigation entities then we don't configure the PK to be composite key of FK properties in join entity."""
23455,529759027,"b""If we use the normal rule the PK will include the FKs to the both of the types in many-to-many, and since one of them is the same entity type we are configuring then after setting the PK we will change the FK to target all PK properties and if the FK is changed we'll change the PK to include all of the FK properties and so on."""
23466,530051747,b'This is pointEntity collection. It should not require custom asseter'
23212,518484591,b'\xf0\x9f\x98\xa2 '
23210,518996385,"b'actually returns byte[], not byte. See https://github.com/dotnet/efcore/issues/16428#issuecomment-723214820'"
23210,519021450,b'This would cause issue in translation. Basically the `a[i]` is byte so our translation needs to get the byte some way.'
23423,528173265,b'/cc @smitpatel'
23423,528173308,b'/cc @smitpatel '
23423,528173336,b'\r\n\r\n/cc @smitpatel\r\n'
23423,528173464,b'\r\n/cc @AndriySvyryd @smitpatel\r\n'
23423,528173543,b'/cc @AndriySvyryd \r\n'
23423,528173646,b'/cc @AndriySvyryd '
23423,528173680,b'@AndriySvyryd obsolete and fix typo? Spelling errors are worse than data corruption'
23423,528173703,b'\r\n\r\n/cc @AndriySvyryd \r\n'
23423,528173756,b'/cc @ajcvickers '
23423,528173909,b'/cc @smitpatel '
23423,528174003,b'/cc @smitpatel '
23423,528174188,b'/cc @smitpatel'
23423,528174231,b'Fixup for https://github.com/dotnet/efcore/pull/23381#discussion_r526280073'
23423,528174282,b'Fixup for #23381'
23423,528174310,b'/cc @AndriySvyryd '
23423,528174427,b'/cc @smitpatel '
23423,528174496,"b'@ajcvickers discussed this situation offline, am leaving the code as is and adding bangs, until we revisit as part of #13850'"
23423,528174774,b'Fixup to #23376'
23423,528174948,"b""/cc @bricelam on the one hand, we annotated SpatialConverter as [CanBeNull] in the ctor, but on the other we required it here (Npgsql, which doesn't require a converter, passes NullValueConverter currently). This PR changes to really not require a converter, or we could annotate SpatialConverter as required if we want."""
23423,528175070,b'/cc @AndriySvyryd '
23423,528223659,b'What do you mean? We create ReaderColumns!'
23423,528223758,"b'Yes, parameter names in the query always have names'"
23423,528223869,b'Just bang these instead.'
23423,528224020,"b""Some mappings are required. :trollface: Though it does not have to map to a bool on server, can be mapped using a value converter too, we don't care.\r\nWe should bang this and perhaps add a validation code somewhere in type mapper\r\n@ajcvickers ?"""
23423,528224240,b'This will always be a DbParameter.'
23423,528224616,"b'yes, we expected to throw. This is InMemory version of trying to call GetX method on a null column value. :trollface: '"
23423,528224883,"b'File a new issue, I will investigate.'"
23423,528236967,"b""Sorry, somehow missed that creation happens via the Create factory method.\r\n\r\nSo there's an assumption here that if the first column has a name (checked above), then all columns have a name, right?"""
23423,528237579,"b'Thanks, the code currently seems written to allow otherwise, will change to an assertion'"
23423,528237718,"b""When it's the contract of a method about its parameters (like Check.NotNull), I prefer listing it explicitly as such in this way. But if you're strongly against it for some reason I'll change to bang."""
23423,528239122,b':+1:'
23423,528239314,b'#23428'
23423,528272863,b'Query does not use this code path at all. But TypeMapping should be required.'
23423,528273056,"b'Can you explain how it is contract of a method? The reason I prefer to bang this is that it is only used in one place and inside this method body only. If putting the DebugAssert would have helped in multiple places or in multiple code path then there is some value to it, otherwise I am leaning towards of just putting bang here.'"
23423,528273158,b'TypeMapping is required component in materializationInfo.'
23423,528283634,"b'> Can you explain how it is contract of a method?\r\n\r\nWell, just like VisitTableValuedFunction requires that tableValuedFunctionExpression be non-null (hence Check.NotNull), it also requires tableValuedFunctionExpression.Alias to be non-null - the two are API contracts of the method (if you violate either, the method will not work). Putting this up-front like this is a form of documentation, code contract etc.\r\n\r\nHaving said that, there is no runtime difference between either... if you still prefer a bang I will do that.'"
23423,528284353,"b""Ah I see now - the mapping is optional because of the obsoleted constructors which don't accept a type mapping (or try to infer it) - these ctors are never used in our codebase. If type mapping is actually null, TypedRelationalValueBufferFactoryFactory would fail.\r\n\r\nAm removing these obsoleted constructors for now - @AndriySvyryd can you please confirm?"""
23423,528284361,b'Continued in https://github.com/dotnet/efcore/pull/23423#discussion_r528173909'
23423,528285973,"b'@AndriySvyryd @smitpatel making Name throw for null/empty fails test Non_nullable_property_through_optional_navigation, for example: [this line](https://github.com/dotnet/efcore/blob/main/src/EFCore/Metadata/Internal/InternalForeignKeyBuilder.cs#L408) causes a navigation to be created with a null MemberIdentity, and its name is accessed.\r\n\r\nShould we make MemberIdentity.Name nullable again and introduce IsNone checks where relevant ([option 2](https://github.com/dotnet/efcore/pull/23381#discussion_r527935981)), or do you think we need a deeper change here?'"
23423,528290639,"b'If you want to specify the contract to be ""tableValuedFunctionExpression.Alias"" is not-null then that contract should live on the ctor of TableValueFunctionExpression itself. This API has contractual agreement towards only not passing a null tableValuedFunctionExpression here. For any component of the any expression, this is just consumer API not binder.'"
23423,528292444,"b'> If you want to specify the contract to be ""tableValuedFunctionExpression.Alias"" is not-null then that contract should live on the ctor of TableValueFunctionExpression itself.\r\n\r\nIf TableValueFunctionExpression.Alias should never ever have null, than you would be right (and we\'d make Alias non-nullable) - but that\'s not the case, right? It seems legal for Alias to be null in some situations (i.e. before the alias is calculated).\r\n\r\nSo the contract isn\'t on the TableValueFunctionExpression type - it\'s on VisitTableValuedFunction, specifying the contents of TableValueFunctionExpression which are legal for its specific invocation.'"
23423,528298990,"b""> If TableValueFunctionExpression.Alias should never ever have null, than you would be right (and we'd make Alias non-nullable) - but that's not the case, right?\r\n\r\nIncorrect. TableValuedFunctionExpression.Alias is **always** non-null. We always calculate alias for the locations required. We only uniquify them at later stage. We _never_ assign alias which was null before."""
23423,528315338,"b""That's great... In that case, we can just override TableValueFunctionExpression.Alias specifically to make it non-nullable. I just pushed a commit that does that (for TableValueFunctionExpression, FromSqlExpression, SetOperationBase)."""
23423,528385269,b'Also TableExpression'
23423,528413676,b'Remove these 2 too.\r\nTypeMapping is never null after translation.\r\nColumnExpression always originates from a table which has alias.'
23423,529171993,"b""So what's the issue?"""
23423,529172377,"b'Just fix it, this is new in 6.0'"
23423,529173475,"b'Yes, doc should be fixed'"
23423,529174596,"b'No, it should pass `MemberIdentity.None` when name is `null`'"
23423,529175319,"b""You mean that we should have an exclusion list for exceptions that we'll never retry?"""
23423,529176692,b'Probably a leftover from a refactoring'
23423,529176980,"b""Shouldn't `IDbContextOptions` be non-nullable too?"""
23423,529213842,b'Probably not'
23423,529232449,b'If only there had been a way to indicate that it is never `null` :trollface: '
23423,529232950,"b'Put that `for` back please, allocations matter'"
23423,529854473,"b'Sorry, missed that this was an IReadOnlyList'"
23423,529855715,b'Removing comment.'
23423,529856042,b'Just mentioning the annotation change from `[NotNull]` to `[CanBeNull]`.'
23423,529856245,"b'OK, perfect, thought it would be a breaking change.'"
23423,529860051,"b'Documented null return, and also corrected IDbTransaction->IDbContextTransaction.\r\n\r\nAlso annotated the method with [NotNullIfNotNull], since null only gets returned for a null parameter.'"
23423,529860653,b'So... OK to remove this check?'
23423,529862437,b'Have made this change.'
23423,529867127,"b'Looking at this again, I think the current situation is fine, with the handler annotated to accept a nullable exception.'"
23423,529870642,"b"">  TypeMapping is never null after translation.\r\n\r\nThat's the point behind this assertion: unlike with TableExpression.Alias which really is never null (so it can be annotated as such and no assertion needed), SqlParameterExpression.TypeMapping is null in some cases.\r\n\r\nBut as you seem to really hate assertions I'll remove and bang instead.\r\n\r\nBTW if we want to, we can consider making SqlExpression.TypeMapping non-nullable, and provide a separate nullable property for the type mapping to be used only during translation. This would allow us to remove the bangs when accessing TypeMapping from everywhere.\r\n"""
23423,529874902,"b""Am not sure I understand... If we make MemberIdentity.Name to throw when the MemberIdentity is None, there are many call sites where we'd need to add an IsNone check before accessing Name to avoid it being thrown (e.g. all the places where Name is accessed and then compared to null in metadata). Can you confirm this is what you want?"""
23423,529886023,b'NCND truly.'
23423,529888395,"b""My issue is not with assertions in general. My issue is assertion in the wrong places just because it suits NRT. If the TypeMapping is null after translation in error then there are plenty of visitors which go through it and assuming it is going to be there. SqlGenerator is very much last phase of query pipeline. If you want to assert that TypeMapping is non-null after translation then this is certainly not the place to assert it.\r\nSo please don't put assert in wrong places in query."""
23423,529888671,b'cc: @AndriySvyryd '
23423,529889647,"b'At least update the comment. :trollface: \r\nPut bangs if necessary. If you feel we should investigate, file an issue and assign to me. I will look into it.'"
23423,529889982,b'Remove this assert.'
23423,530593540,b'Can remove now'
23423,530602073,"b""I don't have super strong feelings here... But given that TypeMapping is nullable (because used during translation), any visitor after translation accessing it is *assuming* it will be non-null, which is fine. And I tend to codify/document coding assumptions via assertions - it's logically the exact same thing as a bang, just more explicit. Assertions also seem particularly well-suited to me when they codify assumptions on method parameters (exactly like Check.NotNull), and they concentrate the assumptions at the beginning rather than having bangs interspersed later in the method code."""
23423,530602907,b'Not really feeling we should investigate - was mainly curious about this assumption. You can investigate if you want to.'
23423,530604788,b'Any reason this does not return nullable?'
23423,530605571,b'You also need to verify the bool value to be true to keep the code doing the thing it was doing before.'
23423,530606740,"b""The implementation in RelationalConnection creates a new connection and returns that if there isn't one, so I'm assuming the contract is for IRelationalConnection.Connection to always return non-null. @AndriySvyryd?"""
23423,530607641,"b'Oops, thanks..'"
23423,530608482,b'break line. :trollface: '
23423,530609230,b'Also see https://github.com/dotnet/efcore/issues/21558'
23423,530610013,b'new()?'
23423,530610293,b'Just curious. ClrType could be null?'
23423,530612448,b'Codify assumptions but not in wrong place.'
23423,530613228,b'I stopped doing these systematically - the plan would be to just let Rider do it at the solution level afterwards...'
23423,530613319,b'Scaffolding no?'
23423,530620252,b'? ? ? '
23423,530621080,"b""Wouldn't `null!` throw runtime error?"""
23423,530622101,b'And if that code path is not being triggered then is the null check here necessary?'
23423,530623154,"b'Yes, this is necessary to make `DatabaseFacade.GetDbConnection()` never return `null`'"
23423,530626896,b'\xe2\x98\x9d\xef\xb8\x8f '
23423,530628658,"b""Discussed with Arthur about this. This mapping is crucial for query to work even for simple predicate kind of scenario (since they are of bool type). By default providers don't really need bool in database. They just need some support for bool even through value conversion. Also built-in we provide bool to string & bool to int conversion in the box. So it should just work in 99.99% cases. It may cause a failure for an ORM written by amoeba targeting some database but if neither of that possible than it would be probably write only database."""
23423,530670870,"b'Yep, another one I did by mistake, reverting.'"
23423,530671162,b'Actually I put these in to test if you guys were paying attention.'
23437,528850923,b'No love for fields.\r\nAdd a protected method ExtractParameters (overload of current one) which takes a bool flag with default value of not clearing the dict. And the existing method would call into that with flag being true.'
23437,528852367,"b'These are not really ""same"" in the tree sense so we need to do additional thing so that this test does not change.'"
23437,529511519,"b""Could certainly be done with bool. But I still don't fully understand why dict needs to be cleared at all since no tests fail if I just never clear it. Is there some subtle edge case that do not have tests currently?"""
23437,529516038,"b""Spent some time digging deeper into this. It's interesting; constants within a `SelectMany` lambda will never be parameterized which means that if I change the test to use `Skip(3)` instead of `Skip(2)` it will become `OFFSET 3` (constant) instead of `OFFSET @__p_1` and `@__p_1=3`.  There's a comment in the code about this [here](https://github.com/dotnet/efcore/blob/a49074d816daeff6813931915df84c4e53f17d85/src/EFCore/Query/Internal/ParameterExtractingExpressionVisitor.cs#L555) where `_inLambda` will be true and then the code [here](https://github.com/dotnet/efcore/blob/a49074d816daeff6813931915df84c4e53f17d85/src/EFCore/Query/Internal/ParameterExtractingExpressionVisitor.cs#L540) will set `generateParameter` to false which is tested for [here](https://github.com/dotnet/efcore/blob/a49074d816daeff6813931915df84c4e53f17d85/src/EFCore/Query/Internal/ParameterExtractingExpressionVisitor.cs#L319) and the value 3 becomes constant. Should resolving this be part of this issue or open a new issue?"""
23437,529569387,"b'Thinking about this one step further, there are two different concerns here regardless of this PR.\r\n\r\n1) since the constant 2 in first `Take` is automatically parameterized in this particular test, I believe constants in the `Skip` and second `Take` should also be parameterized for consistency\r\n\r\nbut I could also consider, and perhaps even endorse,\r\n\r\n2) no constants get ever parameterized - stay as constants in generated SQL. If you want a constant to be parameterized, declare a local variable `int takeCount = 2` and `Take(takeCount)`\r\n\r\nhow have you been discussing this internally ?'"
23437,529623213,"b'Memory footprint. This code is executed for every query (even ones used from the cache). It would be reclaimed at some point by GC but since we already know that we can erase it after the visitor ends, why not'"
23437,529625912,"b'Regardless of coming from variable or inline constant, when used outside of lambda, compiler evaluates value and puts it there. So even if you use `Take(takeCount)` in top level query, in expression it will be constant of 2 only and there will be no reference to takeCount variable. Hence Skip/Take try to generate parameter even if it is constant but that is only for top level. When it is inside lambda (like SelectMany), Skip/Take preserves whatever it was written with. So if it is coming from variable, we will see closure.takeCount member expression. But if the constant is inlined then we will see constant. Since we get actual information here, we need to generate constant if constant passed here.'"
23437,530281308,"b""Ah, thanks for clearing this up for me. Didn't occur to me that it was memory footprint, thought there were some edge case where the dict had to be cleared to force generating different parameter sets."""
23437,530287056,"b""Wow. Thanks for pointing this out, never knew the compiler acted like this. Makes me wonder - shouldn't all queries then go through lambda? A simple `context.Offers.Take(takeCount).SelectMany(t => t.Actions.Take(takeCount))` will produce two parameters `__p_0` for top-level and `__takeCount_1` for the lambda case. Tried `context.FromExpression(() => context.Offers.Take(takeCount).SelectMany(o => o.Actions.Take(takeCount)))` but it would still generate two parameters. How could a query run entirely in a lambda to get only `__takeCount_0` parameter?"""
23437,530290152,"b""Back to this PR, I have resolved this issue after our discussion above and reverted all the test changes in the Northwind tests. All these tests will now succeed for constant values.\r\n\r\nBut now I get a different test failure. This time in `Constant_enum_with_same_underlying_value_as_previously_parameterized_int` \r\n\r\nwhere the following query\r\n\r\n```c#\r\nss.Set<Gear>()\r\n                    .OrderBy(g => g.Nickname)\r\n                    .Take(1)\r\n                    .Select(g => g.Rank & MilitaryRank.Private)\r\n```\r\n\r\nfails the following assertion\r\n\r\n```c#\r\n@__p_0='1'\r\n\r\nSELECT TOP(@__p_0) [g].[Rank] & @__p_0\r\nFROM [Gears] AS [g]\r\nORDER BY [g].[Nickname]\r\n```\r\n\r\nsince the fix I'm evaluating right now will render\r\n\r\n```c#\r\n@__p_0='1'\r\n\r\nSELECT TOP(@__p_0) [g].[Rank] & 1\r\nFROM [Gears] AS [g]\r\nORDER BY [g].[Nickname]\r\n```\r\n\r\nsince the `MilitaryRank.Private` is a constant within a lambda. According to our discussion above, I think this test is wrong and should not reuse the parameter for a supplied constant like that. OK to proceed and change the test assertion? I think I might have seen an issue about this somewhere in the backlog, perhaps this is resolving that issue as well?"""
23437,530654694,b'Seems like correct change.'
23424,529208014,"b""No need to check the ClrType as precision shouldn't be set in the model for types that don't support it in the first place"""
23424,529208296,b'Also add a check in `CSharpDbContextGenerator.GenerateProperty` to avoid adding fluent API calls for precision if data annotations are used'
23424,529209742,b'Fix reference'
23424,529210399,b'Check that both values are non-negative and add tests that throw'
23424,529283520,b'Hi @AndriySvyryd  I also notice that my previous PR for Unicode Attribute is missing your check suggestion. That PR is already merged so I wonder I could include this small fix in this PR or I will create a new PR for it ? I also notice that there are no test case for checking `IsUnicode` fluent api to be generated inside https://github.com/dotnet/efcore/blob/main/test/EFCore.Design.Tests/Scaffolding/Internal/CSharpDbContextGeneratorTest.cs'
23424,529305230,"b'Yes, include it in this PR'"
23424,531166420,"b""Thanks @AndriySvyryd  I've updated my PR."""
23481,530662095,b'Inline'
23481,530694420,b'Inline `existingEntry`'
22346,531198115,b'Unused'
23145,520167220,"b'Not technically correct, but probably avoids an unnesseary CAST in the SQL...'"
23145,520169871,b'Inline this--`Like` is only this way because it used to have an actual implementation.'
23145,520170124,b'(Feel free to inline LikeCore at the same time if you want)'
23145,520174283,"b""I think this should be `double`.\r\n\r\nReason 1:\r\n`decimal` is an elaborate lie on SQLite, and it's causing very strange SQL to be generated below.\r\n\r\nReason 2:\r\nThat's what EF6 did:\r\n\r\nhttps://github.com/dotnet/ef6/blob/7728ca7317e18bc439524ae9943c8a6a0e5705f4/src/EntityFramework.SqlServer/SqlFunctions.cs#L617-L623\r\n\r\nThoughts, @roji?"""
23145,520178273,"b'Hmm, this value is lossy. I wonder if we should use `9223372036854780000.0` here instead to avoid strange bugs in the future.'"
23145,520185957,"b'```suggestion\r\n                @""SELECT COUNT(*)\r\nFROM """"Orders"""" AS """"o""""\r\nWHERE abs(random() / 9.22337203685478E+18) < 1.0"");\r\n```'"
23145,520186093,"b""There's actually a 0.000000000000006% chance that this will be 1.0 on SQLite."""
23145,520187642,b'We should add these to NorthwindDbFunctionsQueryTestBase (and override in provider-specific tests to assert the SQL)'
23145,520188112,"b'Note, this will be the SQL if we change it to `double`.'"
23145,520190132,"b'When we move the tests (see comment below), we should **not** call `base` and instead just use `<=` in the test to avoid that one random CI failure over the next decade.'"
23145,520192723,"b'I wonder if this should just be the base Relational implementation. Thoughts, @maumar, @roji & @smitpatel?'"
23145,520192957,b'Provider | SQL\r\n--- | ---\r\nSQL Server | RAND()\r\nSQLite | abs(random() / 9223372036854775807.0)\r\nPostgreSQL | random()\r\nMySQL | RAND()\r\nOracle | DBMS_RANDOM.VALUE\r\nDB2 | RAND()\r\nFirebird | RAND()'
23145,520194966,"b""Being \xf0\x9f\x98\x88 \r\n\r\nWe can put in relational, if provider implements it differently then provider behavior will win. Though side-effects are, if providers don't implement it then they will get invalid SQL error rather than our nice client eval failure. Looking at the table above, there are 3 database which needs to override relational behavior and 2 of them are known to be in sync and will override it. So we may be increasing values for some providers' customers and decreasing for some others."""
23145,520327471,"b""I say let's just leave it for providers to implement... There's just not that much value in putting this in relational..."""
23145,520738688,"b""Hi @bricelam I see in `NorthwindDbFunctionsQueryTestBase `class contains some testcases that can't be translated in Cosmos. I've already added them to `NorthwindDbFunctionsQueryTestBase `but I only let the `NorthwindDbFunctionsQuerySqliteTest `and `NorthwindDbFunctionsQuerySqlServerTest `override them, for `NorthwindDbFunctionsQueryCosmosTest `I keep it separate, it it ok ?"""
23145,520768157,b'Alphabetical order'
23145,520769312,b'Can we add comment here with link to https://github.com/dotnet/efcore/issues/15586\r\nLittle abuse for now is fine.'
23145,520840342,"b'Typically, we add `[ConditionalTheory(Skip = ""Issue ######"")]` if we think the test should eventually pass or just override with something like this if we don\'t ever expect it to pass:\r\n\r\n```\r\nAssertTranslationFailed(() => base.The_base_test(async));\r\n```'"
23145,521435371,"b""Thanks for your comments @bricelam  @smitpatel , I've just updated my PR."""
23145,521555514,"b""Discussed as a team; we'd like to change this to `double`."""
23145,521556092,"b""Discussed as a team; we'd like to provide a default Relational implementation that translates to RAND()"""
23145,522118863,"b""Thanks @bricelam  @smitpatel  I've just added the default Relational implementation."""

pull_id,pull_no,title,body
751073241,8982,b'Only run 2019 daily on a machine with VS2019',"b""## Overview\r\n\r\nLike the 2019 PR validation pipeline, our daily 2019 build also depends on VS 2019 existing on the VM it's running on. Not all of our VMs have 2019 installed, so this ensures it'll only run on a supported machine."""
750238766,8981,b'Lock tests to run on StandaloneWindows to try to improve daily CI',"b""## Overview\r\n\r\nOur daily 2019 build has been failing tests for a long time. @CDiaz-MS recently added a Unity 2019 PR validation pipeline, which...doesn't fail tests \xf0\x9f\x98\xb2 PR validation runs tests after a Standalone build, while the daily 2019 pipeline builds UWP ARM64 first, which means the tests then attempt to run in the context of UWP, which attempts to start-up VR and seems to be the cause of many of the failures.\r\n\r\nThis PR\r\n\r\n1. Adds `-buildTarget StandaloneWindows` to our test running command, which should reset the editor out of UWP\r\n1. Updates our existing standalone build from x86 to x64, the more common architecture target for standalone"""
748162603,8977,b'Add articulated hand teleport gesture to all platforms',"b'## Overview\r\nWork to enable using a gesture to teleport with articulated hands on all platforms.\r\n\r\n## Changes\r\n- Fixes: #8973, #8509\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
748157137,8976,b'Hotfix reverting change breaking oculus quest camera',b'## Overview\r\nMistaken profile change broke the camera on oculus quest. reverting\r\n'
747880204,8974,b'Comment out scoped validation until VM issue is sorted',b'## Overview\r\n\r\nComment out scoped validation until VM issue is sorted'
747740237,8970,b'Prevent exception when using Oculus Quest with hand tracking and the TeleportCursor',b'## Overview\r\nAdded a null check to prevent an exception that occurs when using Oculus Quest and moving the hands in and out of view.  This can be especially problematic when testing in the editor and being forced to remove the headset and unpause to allow execution to continue.\r\n\r\n\r\n\r\n\r\n\r\n'
747514795,8969,b'Branch synchronization: mrtk_development --> feature/interactive_element',b'This is a pull request initiated by an automated process to keep mrtk_development and feature/interactive_element in sync'
747171206,8967,b'Fix a DeleteArrayElementAtIndex related issue',"b'## Overview\r\nCurrently there is a bug associated with the constraint manager. To reproduce:\r\n1. Add a cube to a scene with MRTK properly set up\r\n2. Add `BoundsControl` to the cube\r\n3. Go to the constraint manager component, switch to manual mode, add a constraint and then remove it\r\n4. Click play and try to scale the cube. Note `NullReferenceException`s appear in the console\r\n\r\nThe bug is related to a call to `SerializedProperty.DeleteArrayElementAtIndex`, which supposedly should ""delete the element at the specified index in the array"", but instead it actually sets the element to null if it is not already null at the time of the call (otherwise it removes the element). Some on the Internet said this behavior ensured such removal did not break the indexing of the array and should ""just work"" when being applied back to the object behind the SerializedObject. However that differs from the behavior I am currently seeing on Unity 2018.4.26f1 and Unity 2019.4.12f1.\r\n\r\n\r\n## Changes\r\n- Call `DeleteArrayElementAtIndex` a second time if the size of the array does not change after the first call.\r\n\r\n\r\n## Verification\r\nRepeat the steps above and observe no such error.'"
746930302,8965,b'Rigged Hands graduation part 2',"b'## Overview\r\nGraduates rigged hands from experimental to mainline by moving them out of the directories. Tests enabled\r\n\r\nFollowup to #8714\r\n\r\nChanges\r\nFixes: #8669 modulo file refactor\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
746873192,8964,b'Add state sorting menu and the FocusNear/FocusFar states to Interactive Element',"b'## Overview\r\n\r\n#### State Selection Menu\r\nAdds a state sorting menu to Interactive Element.  When a user selects ""Add Core State"", the states are now sorted based on the Interaction Type. \r\n\r\n![SortingStatesMenuPR](https://user-images.githubusercontent.com/53493796/99713338-06d4d700-2a59-11eb-947a-c230a395fb52.gif)\r\n\r\n#### Active state inspector highlight\r\n\r\nDuring play mode, when a state is active, it is highlighted with cyan in the inspector.  This makes a state change more obvious to the user. \r\n\r\n#### Added new FocusNear and FocusFar states\r\n\r\nThe Focus state encompasses both near and far interaction but the addition of FocusNear and FocusFar allows users to track whether an object is in near focus or far focus.  For example, if an object comes into focus with the controller ray pointer, that is considered far interaction.  If an object comes into Focus with the poke pointer, that is considered near interaction.   Added a test for these states. \r\n\r\nThe gif below demonstrates the state value highlight in the inspector and how the object responds to Focus.\r\n\r\n![FocusNearFocusFarPR](https://user-images.githubusercontent.com/53493796/99715296-81065b00-2a5b-11eb-9bca-ee771171e2a5.gif)\r\n\r\n#### Added the InteractionType property \r\n\r\nAdded a property to the InteractionState class that defines the `InteractionType` of a state as Near, Far, Both, None.  This property is used to label states with the goal of reducing confusion on the type of interaction each state supports. \r\n\r\n\r\n## Changes\r\n- Checks off 2 item in this to do list: #8883 \r\n\r\n\r\n## Verification\r\n1. Checkout the branch\r\n1. Open new unity scene\r\n1. Add MRTK to the scene\r\n1. Add a cube to the scene\r\n1. Attach the Interactive Element component\r\n1. Select Add Core State button in the Interactive Element inspector\r\n1. Add the FocusNear and FocusFar state\r\n1. Press play and observe the state value changes in the inspector\r\n'"
746611884,8963,b'Branch synchronization: mrtk_development --> feature/interactive_element',b'This is a pull request initiated by an automated process to keep mrtk_development and feature/interactive_element in sync'
744324072,8956,b'mrtk_development -> feature/interactive_element',b'merge dev into feature/interactive_element'
744274631,8954,b'Add Active property and Touch state to Interactive Element ',"b""## Overview\r\n\r\nAdded the `Active` property and support for the Touch state to Interactive Element.  \r\n\r\nAlso added 2 new tests.\r\n\r\n#### Touch State\r\nWhen the Touch state is added via inspector, a Near Interaction Touchable Volume is also added as a Near Interaction Touchable is required for touch input.  If a user adds the Touch state during runtime, a Near Interaction Touchable is added as well. \r\n\r\nOnce a button class is added, a Near Interaction Touchable will be attached instead of a Near Interaction Touchable Volume.\r\n\r\n![AddTouchState](https://user-images.githubusercontent.com/53493796/99316499-54fb9780-2819-11eb-995f-1e5ac87397e5.gif)\r\n\r\n#### Active Property\r\nThe `Active` property controls whether or not the Interactive Element updates state changes internally.  The `Active` property maps to Interactable's `Enabled` property.  The naming was changed from `Enabled` to `Active` to limit the confusion between a Monobehaviour's `Enabled` property and Interactable's internal `Enabled` property.\r\n\r\n### Interactive Element State Values Runtime Inspector View\r\n\r\nWatch the state values change in the inspector for the Focus and Touch state as the input simulation hand moves.\r\n![Focus+TouchState](https://user-images.githubusercontent.com/53493796/99317953-b58bd400-281b-11eb-99d4-01f711da9338.gif)\r\n\r\n## Changes\r\n- Completes the add Active property item on this checklist #8883 \r\n\r\n## Verification\r\nHow to test:\r\n1. Checkout the branch\r\n2. Open new unity scene\r\n3. Add MRTK to the scene\r\n4. Add a cube to the scene\r\n5. Attach the `Interactive Element` component\r\n6. Select Add Core State button in the Interactive Element inspector\r\n7. Select Touch \r\n8. Press play and observe the state value changes in the inspector\r\n"""
744075170,8953,b'Delete failing oculus integration test',"b""## Overview\r\n\r\nLooking at this test, I first realized that the checking of the asmdefs was iterating empty lists, since the asmdefs had all been renamed in #8668 but this test was referring to them by their old name.\r\n\r\nAfter migrating this test to load by GUID, the test started failing the asmdef check, since the config checker no longer adds/removes the assembly references checked against (https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8670). Removing the asmdef check section leaves a much smaller test, which only:\r\n\r\n1. Creates a dummy asset with a specific name\r\n1. Adds the global `#define` based on the dummy asset\r\n1. Checks that the asset exists\r\n1. Removes the global `#define` and dummy asset\r\n1. Checks that the asset no longer exists.\r\n\r\nThis didn't seem like a super useful test after much of the existing functionality was removed (and the original failure is still happening, since code that counts on other scripts existing when the `#define` is present fail because the scripts don't exist in this case), so I instead chose to remove the test.\r\n\r\n## Changes\r\n\r\n- Fixes the 2019 validation pipeline\r\n"""
743150303,8949,b'Fix button names so that they match their labels in NearMenu prefabs',"b'## Overview\r\nSome NearMenu prefabs have the buttons prefabs out of order and instances of labels not matching the names of the buttons (or vice-versa). We can see an example of this in the image below. \r\n\r\nThis does **not** affect functionality in any way. Is just misleading that when we try to click a button with a given name in the hierarchy, it may not select the button with the same label in the scene viewport.\r\n\r\n![Unity_s9iVZLuAi1](https://user-images.githubusercontent.com/2981116/99159817-32159a00-26d8-11eb-80fd-7215094ac4e0.png)\r\n\r\nThis pull request only reviews those occurrences and makes button names, labels and, order coherent across all NearMenu prefabs.\r\n\r\n## Changes\r\n- Fixes: Organize and match the labels with buttons names in NearMenu prefabs.\r\n'"
743148032,8948,b'Skip rendering build entries when their folder was deleted',"b'## Overview\r\nWhen looking at the ""Deploy Options"" tab, if we delete a build from the AppPackages folder, the entry for that build will keep being rendered until the build list is refreshed. The only noticeable change is that the build date will change to a default value.\r\n\r\nWe can see this behavior here:\r\n![Unity_LIU9JHcxaV](https://user-images.githubusercontent.com/2981116/99159584-6dfb3000-26d5-11eb-804e-3a8e83d83880.png)\r\n\r\nThis pull request just adds a check to skip rendering entries whose folder were deleted. It doesn\'t actually remove them from the build list. However, if you feel that we should remove those folders from the list I can make that change.\r\n\r\n## Changes\r\n- Fixes: Test whether the package build folder exists and skip rendering a build entry when it doesn\'t.\r\n'"
742884719,8946,b'update code owners based on team changes',"b'Remove exited team members, add new owners'"
742866190,8945,b'Add global dependency validation pipeline task',b'This change adds the validateassets.ps1 script and relevant pipeline task to enable automated  validation of asset dependencies. This was identified as important due to the discovery of incorrect file dependencies in packages with the release of 2.5.0\r\n\r\n#8944 tracks expanding the script to support scoped validation of only changed asset files.'
742818677,8942,b'Add MixedRealityInteractionMapping tool',"b""## Overview\r\n\r\nFollowing in the footsteps of https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5902 and https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8103, which examined controller input from the Unity side, this new scene examines the MRTK's mapped and reported interactions for detected controllers. It writes out all detected input sources at the top, and dives into a left- and right-handed controller's mappings in the corresponding panes.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/99125549-254e5480-25b9-11eb-90de-c3c160e32c47.png)\r\n"""
742693250,8941,b'Improve scroll bar in input actions profile when not rendered as a sub profile',"b""## Overview\r\n\r\nThis height is good when rendered as a sub profile, so it doesn't take up the entire inspector.\r\nHowever, when viewing as a standalone profile, it led to views like\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/99106686-79494100-2599-11eb-89b9-ebe693560860.png)\r\n\r\nNow it looks like\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/99108033-9aab2c80-259b-11eb-8a87-db55e569b74f.png)\r\n"""
742471468,8939,b'Branch synchronization: mrtk_development --> feature/interactive_element',b'This is a pull request initiated by an automated process to keep mrtk_development and feature/interactive_element in sync'
742099202,8938,b'Various improvements to Scene Understanding',"b'## Overview\r\nThis PR mainly focuses on the following aspects of SU:\r\n\r\n- Make Guids we receive from the SU binary internal to the SU observer, and for external classes the relevant events are fired with the regular int id as spatial mesh observer currently do.\r\n- If the SU observer is instantiating quad/mesh GameObjects, the `OnObservationAdded` event waits until the instantiation finishes before firing. Also a GameObject field is added to both MeshData and Quad class within the `SpatialAwarenessSceneObject` class so that when the handler receives the fired event, it can gain access to the instantiated GameObjects.\r\n- Remove legacy XR calls and replace some with call to utility function when applicable.\r\n- Renamed the SU interface to make it less verbose\r\n- General cleanup\r\n- Add SU asmdef to exception list\r\n\r\n## To do\r\n\r\n- [x] ~~Investigate whether (and if not, how) we can load a serialized scene from file on HL2~~ This feature is currently not available for spatial mapping so it will not be available for SU as either.\r\n- [x] ~~Determine the behavior when `SpatialAwarenessSceneObjects` are updated (i.e. do we instantiate new GameObjects and remove the already instantiated ones?)~~ Events are now sent when a SASO is first observed, continue to be observed and removed. The instantiated GameObjects managed by the SU observer are updated accordingly.'"
741626402,8936,b'Branch synchronization: mrtk_development --> feature/interactive_element',b'This is a pull request initiated by an automated process to keep mrtk_development and feature/interactive_element in sync'
741213282,8934,b'Read CacheServerIPAddress from env instead of local variable',"b'## Overview\r\n\r\nCurrently, the IP address for the Unity cache server is stored in a pipeline-local variable. Since this value is part of our machine demands anyway\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blob/497b78606ffa58393ea70976215c20bb48af92f2/pipelines/pr.yaml#L11-L14\r\n\r\nwe can read it directly from the env variable.'"
741145158,8933,b'Add Unity 2019 pipeline template',b'## Overview\r\n\r\nAdd a pipeline template specifically for Unity 2019 and VS 2019. \r\n\r\n\r\n'
741011155,8932,b'Clean up some inheritdoc tags',"b""## Overview\r\n\r\nLooks like when running the latest docfx (our pipeline was recently updated) with VS 2019 (our pipeline was recently updated), some in-box overridden methods aren't able to have their docs inherited. This cleans those tags up."""
740789321,8931,b'Branch synchronization: mrtk_development --> feature/interactive_element',b'This is a pull request initiated by an automated process to keep mrtk_development and feature/interactive_element in sync'
740705621,8929,b'Remove unnecessary PlayspaceAdapter',"b""\r\n## Overview\r\n\r\nThe Generic XRSDK Spatial Mesh Observer had carried over an adapter. In the Legacy WMR Spatial Mesh Observer, a WorldAnchor was a part of the API for getting the spatial meshes from the platform. The WorldAnchor ignored the transform on the MRTKPlayspace. So an adapter was necessary to fold in the transform from the camera hierarchy.\r\n\r\nIn the new XRSDK, there is no such anchor. Therefore, the adapter is no longer necessary. Furthermore, since the adapter was trying to compensate for a WorldAnchor which wasn't actually there, it was overcompensating and putting the spatial meshes in the wrong position.\r\n\r\nFix is simply to delete the adapter. \r\n\r\n## Changes\r\n- Fixes: #8920 .\r\n\r\n\r\n## Verification\r\n@davidkline-ms , it looked like there was some cut&paste error with the profiling tags. The +PlayspaceAdapter tag carried on beyond the PlayspaceAdapter class definition. So I fixed this in both the GenericXRSDKSpatialMeshObserver and the source WindowsMixedRealitySpatialMeshObserver. Great if you could double-check that I actually read that right. :)\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
740046345,8925,b'Small fixes for Unity 2020.1',b'## Overview\r\nOpening MRTK in Unity 2020.1 highlights some issues regarding the new Unity 2020.1 API changes.\r\n\r\n## Changes\r\n- use Unity 2020.1 C# directive \r\n\r\n\r\n## Verification\r\nOpen MRTK in a Unity 2020.1 and you should not see any errors.\r\n'
740032131,8924,b'Minor spacing fix for an image. Text polish.',b'## Overview\r\nMinor spacing fix for an image. Text polish.\r\n\r\nFixing this layout issue:\r\n![MRTK_InstallGuideFix111120](https://user-images.githubusercontent.com/13754172/98697906-c7531e80-23b8-11eb-940a-7d6f9570b750.png)\r\n\r\n'
739560670,8923,b'Various BoundsControl fixes',"b""## Overview\r\nThis PR addresses the following problems:\r\n\r\n1. Currently setting flatten axis to anything other than nothing or auto creates exceptions at scene start if bounds control is set to active on start.\r\n2. After setting the flattened axis a user can still scale the bounded gameObject along that axis. This PR changes the behavior to the following: if uniform scaling is used, the user can choose whether the flattened axis is also uniformly scaled with the other axes through `UniformScaleOnFlattenedAxis`; if non-uniform scaling is used, the user cannot scale along the flattened axis.\r\n3. If the target's transform is modified externally, the bounds does not update to correctly reflect the change. This PR renames `OnTargetBoundsChanged` to `UpdateBounds` and makes it public so that developers can invoke the function after external transform modifications.\r\n\r\n## Changes\r\n- Fixes: #8904, #8921"""
739054226,8922,b'Branch synchronization: mrtk_development --> feature/interactive_element',b'This is a pull request initiated by an automated process to keep mrtk_development and feature/interactive_element in sync'
738005362,8919,"b'Object collection list accessibility, adding a read only list'","b'## Overview\r\nI\'ve found myself making data driven lists with the built-in object collection implementations (specifically, the grid collection). What\'s nice about this approach is I can keep the list component completely separate from the app code driving the data binding. The only issue is the `ObjectCollectionNode` list isn\'t accessible to any other component. I completely understand why it shouldn\'t be _modified_, but the accessibility level prevents some simple tasks like ""is this object a part of this collection?"" My fix is to add a public, read only version of the  `ObjectCollectionNode` list. Additionally I\'ve changed the Contains check method to public as well, for the same reasons above.\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
738001195,8918,b'Docs cherrypick to 2.5.1 branch',"b'## Overview\r\n\r\nTo keep our default docs pages up to date, this cherry-picks some recent doc improvements into the branch we publish our default docs from.'"
737317503,8909,b'Fix Shader import error seen on Mac editor',"b'OnLoadUtilities.cs fails to copy shaders when running on MacOS due to a filename sensitivity issue.\r\n\r\nThe constant `ShaderSentinelFile = ""MRTK.Shaders.Sentinel"";` refers to a file that is actually named `MRTK.Shaders.sentinel` with a lowercase `s` on sentinel.\r\n\r\nOn MacOS DirectoryInfo.GetFiles appears to be case-sensitive even if the underlying filesystem is not. This causes the script to not find MRTK.Shaders.sentinel and thus not be able to copy the shaders.\r\n\r\nFix the issue by using a lowercase `s` in the constant.\r\n\r\nFixes #8826\r\n'"
736597176,8906,b'Introduce IMixedRealityServiceState to allow components and apps to better understand services',"b'This change adds the IMixedRealityServiceState interface and implements it as part of BaseService. Derived classes have been updated to ensure base.<method> is called. This allows the service / data provider to not have to manage the IMixedRealityServiceState properties directly.\r\n\r\nTo access the service state, use the following code\r\n\r\n``` c#\r\nIMixedRealityService service = ...\r\n\r\nIMixedRealityServiceState serviceState = service as IMixedRealityServiceState;\r\nif (serviceState != null)\r\n{\r\n    // Check if the service is currently enabled\r\n    if (serviceState.IsEnabled) ....\r\n}\r\n```'"
736552389,8905,b'Improved Input Recording Service With Eye Gaze and Optimized Recording',"b'Added Eye Gaze to InputRecordingService and InputPlaybackService. Optimized input recording. Added functions for asynchronous loading and saving:\r\n\r\n- InputRecordingService and InputPlaybackService now record and simulate eye gaze input.\r\n- Recording has been heavily optimized and should be able to keep a consistent framerate even while clearing the recording buffer.\r\n- Optimized saving to reduce recording file size and, by extension, save time, by about 50%.\r\n- Added functions for saving and loading files asynchronously. Framerate drops do still occur while saving, though it only lasts a few seconds.\r\n\r\nFixes: #8827 #8828 '"
736155223,8900,b'[Docs] Installation Guide updates - image update / flow polish / resources link updates',"b'## Overview\r\nInstallation Guide updates \r\n- Updated Unity editor screenshots \r\n- Flow polish \r\n- Resources link updates (broken tutorials link, added MR Dev Days video links)\r\n'"
735344730,8895,b'Branch synchronization: mrtk_development --> feature/interactive_element',b'This is a pull request initiated by an automated process to keep mrtk_development and feature/interactive_element in sync'
734948032,8894,b'Keep the ui camera during active profile switch',"b'## Overview\r\nAs @keveleigh pointed out in #8787, it might be preferable to keep the UI camera during active profile switch process. The advantage includes reasigning ui camera to Unity UI(UGUI) canvas will no longer be necessary. However the existing approach makes sure the ui camera life cycle is in sync with the services of a profile.\r\n\r\nAlso modified `LoadProfilesOnStartup.cs` to make sure it no longer generates error messages.\r\n\r\n## Changes\r\n- Continuation of #8787\r\n\r\n## Note\r\nTested in editor play mode, editor remoting and HL2 device.'"
734531825,8892,b'Branch synchronization: mrtk_development --> feature/interactive_element',b'This is a pull request initiated by an automated process to keep mrtk_development and feature/interactive_element in sync'
733846648,8890,b'Fix typo in OculusQuestMRTK.md',b''
733655385,8887,b'Fix typo in README_BoundsControl.md',b''
733560639,8885,b'Add Microsoft copyright header to scripts contributed by Microsoft',"b""## Overview\r\n\r\nTo make sure we're in compliance with the [copyright header rules](https://docs.opensource.microsoft.com/content/releasing/copyright-headers.html), this adds the header to any Powershell or Python script that was contributed by a Microsoft employee. Most of these are custom to do with our CI.\r\n\r\nWe normally keep on top of this for C# scripts well, but seems we've overlooked some non-C# scripts.\r\n\r\nFollow-up to https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8102."""
733532749,8884,b'ButtonConfigHelperInspector typo fix',b'## Overview\r\nFix some typos in ButtonConfigHelperInspector that are causing exceptions in the inspector.\r\n\r\n## Changes\r\n- Continuation of #8848'
733434317,8882,b'Add an enable flag step to remoting with NuGet instructions',b'## Overview\r\nMake the enable flag step clearer in the docs.'
733209055,8880,b'Branch synchronization: mrtk_development --> feature/interactive_element',b'This is a pull request initiated by an automated process to keep mrtk_development and feature/interactive_element in sync'
732644394,8875,b'Added check for hand data count in EndAllTouches before calling RaisePanEnded',b'## Overview\r\nHandInteractionPanZoom.EndAllTouches no longer calls RaisePanEnded when there is no hand data in the map.\r\n\r\n## Changes\r\n- Fixes: #8874 '
732611741,8873,b'Fix GLTF related deserialization issues',"b""## Overview\r\nDue to the restrictions of Unity's built-in JsonUtility.FromJson, Enum fields in GLTF files cannot be correctly converted during import. This PR fixes the issue by calling Enum.Parse after deserialization to make sure Enums are correctly imported.\r\n\r\n## Changes\r\n- Fixes #8748"""
732562281,8872,b'mrtk_release -> mrtk_dev',b'## Overview\r\n\r\nmrtk_release -> mrtk_dev'
732549017,8871,"b""Merge remote-tracking branch 'upstream/mrtk_development' into SU""",b'## Overview\r\nMerge the latest commits in dev branch to the scene understanding branch.'
732544253,8870,b'Added check to see if Pointer is a IMixedRealityNearPointer to HandInteractionPanZoom.OnPointerDown',"b'## Overview\r\nHandInteractionPanZoom should now properly work with NearInteractionGrabbable, and the texture should not jump after the initial pointer down event.\r\n\r\n## Changes\r\n- Fixes: #8869 '"
732525235,8868,b'Releases/2.5.1 -> mrtk_release',b'Releases/2.5.1 -> mrtk_release'
732520573,8867,b'Merge mrtk_development -> feature/interactive_element',b'## Overview\r\n\r\nUpdate the feature/interactive_element branch \r\n'
732503832,8866,b'Cherry pick some recent docs changes to 2.5.1',"b'## Overview\r\n\r\n#8825 fixed an error in the sample we give for people to copy and paste into their manifest.json, which feels important to have on our default docs version.\r\n#8862 retooled our roadmap, which also feels important to have on our default docs version.'"
732463440,8865,b'Fix broken link',"b""## Overview\r\n\r\nThe header was updated, but this link wasn't.\r\n\r\n## Changes\r\n- Fixes broken docs build"""
731932912,8863,b'Oculus Integration tool no longer modifies all Device Manager Profiles',b'## Overview\r\nFollowup of the work done here #8861 to streamline using Oculus with MRTK\r\n\r\nrelated to #8849'
731876669,8862,b'MRTK Roadmap update for 2.6',"b'## Overview\r\nUpdated roadmap to reflect MRTK 2.6 plans.\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
731817702,8861,b'Oculus Device Manager initialized with Oculus Prefabs',"b'## Overview\r\nWhen using UPM, changes made to the default profiles are not saved due to using existing inside the Packages directory. Thus, we have to ensure that the DeviceManager is initialized with the relevant prefabs at startup, even if those prefabs contain missing references that require the Oculus Integration package.\r\n\r\nPrevious iterations of this solution broke CI, but the latest Unity versions seem to not raise those CI errors, so trying this fix once again.\r\n\r\n## Changes\r\n- Partially Fixes: #8849\r\n\r\n'"
731635821,8859,b'Refactor out WMR controller definition',"b'## Overview\r\n\r\nContinues defining specific ""definitions"" for controllers, separating that from the input APIs.\r\n\r\n## Changes\r\n\r\n- Part of the controller mapping profile rework\r\n- Follow-up to PRs like https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7146'"
730934562,8853,b'Various GGV pointer related fixes',"b'## Overview\r\nCurrently there are some issues with HoloLens 1 style interaction on HoloLens 2 and other devices:\r\n\r\n- Using the DefaultHoloLens1ConfigurationProfile on HL2 does not bring HL1 style interaction as the DefaultMixedRealityInputPointerProfile is used for both HL1 and HL2 configuration profiles.\r\n- Without profile switching, one should be able to switch between those two interaction styles by specifying articulated hand for both default controller pointer and the GGV pointer and then toggle the hand ray on or off at runtime. However the existing pointer mediator does not include logic for prioritizing non-GGV far pointer of an input source over a GGV pointer causing unexpected behavior. \r\n\r\n## Changes\r\n- Add a new pointer profile and associate it with the HL1 configuration profile\r\n- Add logic to handle both GGV and default controller pointer to the default pointer mediator\r\n\r\n## Screenshot\r\nThe behavior when articulated hand is enabled for both default controller pointer and GGV pointer. Note after turning off hand rays the interaction becomes HL1 style.\r\n\r\n![gif](https://user-images.githubusercontent.com/68253937/97511606-b3cd9f80-1944-11eb-8f7c-056b410d9910.gif)\r\n\r\nPreviously with the same pointer settings when hand ray is on both GGV and default controller pointers are enabled for a hand causing unexpected behavior (e.g. if the center of FoV is on a button even if the hand ray is pointing somewhere else the button will still be highlighted and even triggered if the user performs an air tap).'"
730737917,8851,b'Updated Oculus Project Config debug message',b'## Overview\r\nfollowup on final comment on #8847'
730537536,8850,b'Exposing line renderer positions',b'## Overview\r\nThe calculated line renderer points are not able to access from out side. \r\n\r\n## Changes\r\n- Fixes: # .\r\n  -calculated points now can be accessed from outside (private setter)\r\n\r\n\r\n'
729876859,8848,b'Fix up some Unity behavioral warnings',"b""## Overview\r\n\r\nUsing https://github.com/microsoft/Microsoft.Unity.Analyzers (which I think is included in VS by default? or maybe the [extension](https://docs.microsoft.com/en-us/visualstudio/cross-platform/using-visual-studio-tools-for-unity?view=vs-2019)?), a few common cases were flagged.\r\n\r\nFixes:\r\n\r\n1. [UNT0003 Usage of non generic GetComponent](https://github.com/microsoft/Microsoft.Unity.Analyzers/blob/main/doc/UNT0003.md)\r\n1. [UNT0008 Null propagation on Unity objects](https://github.com/microsoft/Microsoft.Unity.Analyzers/blob/main/doc/UNT0008.md)\r\n1. [UNT0014 GetComponent called with non-Component or non-Interface Type](https://github.com/microsoft/Microsoft.Unity.Analyzers/blob/main/doc/UNT0014.md)\r\n\r\nI wouldn't be surprised if I missed some (especially UNT0008), but it'd be good to clean these up when they pop up!"""
729850397,8847,b'Add tool to auto-configure OculusProjectConfig',"b'## Overview\r\nUpdated documentation and code to automatically configure the OculusProjectConfig for hand + keyboard support on quest\r\n\r\nPreviously we asked users to manually change the Oculus Project Config to enable hand support. It turned out we needed to also manually enable on-screen keyboard support. This PR streamlines the process and configures both using an in-editor tool. The documentation and associated images have also been updated accordingly.\r\n\r\n## Changes\r\n- Fixes: ##8792\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
729746596,8845,"b'Update release notes, fix authors formatting'",b'This change removes the note that 2.5.1 is a UPM only release. It also fixes an authors list formatting issue.'
728458292,8843,"b""Rename RimOutline so there's only one 'Mixed Reality Toolkit' item in the Shader list.""","b'## Overview\r\nRenamed the path for the shader so it fell under the same folder.\r\n\r\n## Changes\r\n\r\nPreviously:\r\n![image](https://user-images.githubusercontent.com/12958442/97043770-d23c3100-1527-11eb-970a-38fe476d0b1a.png)\r\n\r\nNow:\r\n![image](https://user-images.githubusercontent.com/12958442/97043730-c3557e80-1527-11eb-9c1b-510a8bb8f80f.png)\r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
728430948,8842,"b'Clipping Enhancements: GPU Instancing, Ellipsoids, and other changes.'","b'## Overview\r\nThis PR includes:\r\n\r\n* GPU instancing of `Renderers` that are clipped by `ClippingPrimitives`\r\n* Ellipsoid support for `ClippingSphere`\r\n* Optimizations.\r\n\r\n\r\n## Changes\r\nFeatures:\r\n\r\n* `ClippingPrimitive` now exposes a property to control how materials are affected. Enabling `Apply To Shared Materials` will result in the clipping feature being toggled on the `Renderer.sharedMaterials` rather than the default of creating new material instances.\r\n* `MixedRealityStandard` and `Text3DShader` shaders were updated to support instancing of the clipping properties.\r\n* `ClippingSphere` functionality updated to operate on an inverse matrix, supporting ellipsoids. `Radius` is deprecated, replaced by `Radii`.\r\n* Created an example scene, `ClippingInstancedExamples` that shows the above features in action.\r\n  * To support this, the clipping materials used by `MaterialGallery` were leveraged and modified to `Enable GPU Instancing`.\r\n\r\nOptimizations:\r\n\r\n* Clipping information is now computed once before updating `Renderers` to avoid needless re-computation.\r\n* `Renderers` are always removed from the end of the list to reduce array copies.\r\n* `IsDirty` flag now prevents all updating rather than being checked for every renderer.\r\n* Reduced shader properties required for `ClippingBox`.\r\n* Replaced `Update` with `EditorUpdate` bound to `EditorApplication.update` so the call is avoided entirely outside the editor.\r\n\r\n\r\nDocumentation:\r\n\r\n* Updated ClippingPrimitive.md with new features and details.\r\n\r\nResolves #8751 \r\n\r\n## Verification\r\nPlease open the new example scene, `ClippingInstancedExamples` to verify the functionality described above. Testing the `MaterialGallery` and `ClippingExamples` scenes are good for determining if any regressions were introduced.\r\n\r\nCC: @Cameron-Micka \r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
728365532,8841,"b""Separate out if checks so we don't skip the continue and cause IndexOutOfRangeException""","b""## Overview\r\n\r\nThere was an edge case where no input devices were detected _and_ the textMesh was already empty that caused this `if` and `continue` to be skipped, which led to an IndexOutOfRangeException a few lines lower. We want to always `continue` if no input devices are detected and clear the text if it's not already empty."""
728355973,8840,b'Update mapping profile serialization for Oculus types',"b""## Overview\r\n\r\nThe Oculus controller types had their types changed but the profile serialization wasn't committed. This _should_ be a non-issue for users, as these profiles can be pretty aggressive at reserializing locally, but we may as well check them in correctly.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blob/fecccf9e3bdadd67cd21409667a65f3843c83afd/Assets/MRTK/Providers/Oculus/XRSDK/Controllers/OculusXRSDKTouchController.cs#L15-L21\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blob/fecccf9e3bdadd67cd21409667a65f3843c83afd/Assets/MRTK/Providers/Oculus/XRSDK/MRTK-Quest/Scripts/Input/Controllers/OculusHand.cs#L42-L50"""
727753810,8837,b'Mark MixedRealityInputModule as always supported',b'## Overview\r\nThe input module is required by MRTK but in Windows Mixed Reality headset builds the module sometimes cannot be correctly activated due to the `IsModuleSupported` function not being properly overridden.\r\n\r\n## Changes\r\n- Fixes #4821'
726959022,8833,b'Make oculus hand rendering controled by the hand visualization profile',"b'## Overview\r\nMakes the Oculus hand mesh rendering controlled by the Hand Visualization Profile\r\n\r\n## Changes\r\n- Fixes: #8793\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
726624859,8825,b'Added a missing quote',b'## Overview\r\nDocumentation was missing a quote. Added a quote.\r\n'
725989581,8823,b'mrtk_release -> mrtk_development',b'Updates mrtk_development to the latest release'
725983058,8822,b'Releases/2.5.1',b'Update mrtk_release to 2.5.1'
725860854,8821,b'Add additional references to the ARM64 workaround to ReleaseNotes and UsingUpm articles',"b'This change adds the following note to ReleaseNotes.md and usingupm.md\r\n\r\n> [!IMPORTANT]\r\n> There is a known compiler issue that impacts applications built for Microsoft HoloLens 2 using\r\n> ARM64. This issue is addressed in the forthcoming 16.8 update for Visual Studio 2019. Until the \r\n> update is available, please import the `com.microsoft.mixedreality.toolkit.tools` package to apply \r\n> a workaround.'"
725104514,8818,b'update the docs list and default to 2.5.1',b'This change adds 2.5.1 to the available docs list and sets the default version displayed to 2.5.1'
724858497,8815,b'Merge stabilization -> mrtk_dev',b'## Overview\r\n\r\nMerge stabilization -> mrtk_dev'
723750496,8812,b'Update all Lightweight Render Pipeline strings to Universal Render Pipeline',"b'## Overview\r\n\r\nUpdated any occurrences of ""Lightweight Render Pipeline"" to ""Universal Render Pipeline"", which is the up to date name for the render pipeline formerly known as Lightweight Render Pipeline.\r\n\r\n## Changes\r\n- Fixes: #8782 \r\n'"
723708669,8811,b'removed duplicate line.',"b'## Overview\r\nI removed a duplicate line of RiggedHandVisualizer.cs\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
723597771,8810,b'WMR reading mode proposal for #8808',"b""## Overview\r\n\r\nThis PR is pointing at the branch represented by #8808, not mrtk_development.\r\n\r\n1. Moved all Windows API calls and WMR-terminology (like reading mode) references into WMR-specific classes\r\n    1. This means I reverted back to `IsProjectionOverrideEnabled` for the interface property, since it's meant to be platform-agnostic and other platforms could use projection override for other purposes. I know the original PR went back and forth on this, so happy to have a discussion!\r\n1. Added `CoreServices.GetCameraSystemDataProvider` for ease of accessing IMixedRealityCameraProjectionOverrideProvider\r\n    1. All names are open for discussion \xf0\x9f\x99\x83\r\n1. Removed a duplicate ReadingModeSceneBehavior.cs from the demo scene\r\n1. Implemented `IMixedRealityCameraProjectionOverrideProvider` in `BaseWindowsMixedRealityCameraSettings`, so it's valid both for legacy XR and XR SDK.\r\n1. Updated `ProjectionOverride` to call into the MRTK-defined WindowsMixedRealityUtilities for the HolographicFrame instead of doing its own `HolographicFrameNativeData` conversion.\r\n    1. HolographicFrameNativeData is only valid on legacy XR, while the MRTK helper has abstracted away support for both legacy and XR SDK.\r\n1. Added a Reading Mode setting to the WMR camera settings provider\r\n    1. ![image](https://user-images.githubusercontent.com/3580640/96323770-84797300-0fd3-11eb-9cda-028794c87c46.png)\r\n    1. @KevinKennedy Your original PR didn't have this. I'm wondering if you think this would be a useful setting and scenario (the ability to start reading mode automatically at app launch), or if we should remove this and leave the data provider as the only entry point.\r\n\r\nNOTE: I haven't yet tested these changes. Opening first for discussion!"""
723500279,8809,b'Update Oculus device manager to load default profile automatically',"b""## Overview\r\n\r\n#8800 pointed out that the Oculus device manager wasn't automatically loading its default profile. This PR adds that, while also renaming the profile asset to match the rest of our default profile naming."""
723491117,8808,b'Projection Override/Reading mode',"b'This is actually a re-open of https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8651, which I merged in too early (@keveleigh  was still reviewing it)\r\n\r\nOpening this on behalf of @KevinKennedy who actually wrote this change!\r\n\r\n## Overview\r\nThis code adds a ""projection override"" mode to the main camera.  It reduces the system\'s FOV but eliminates a scaling of Unity\'s output.  So a pixel rendered by Unity will correspond to a projected pixel on HoloLens 2.  Application authors should do tests with multiple individuals to be sure this is a tradeoff they want in their app.\r\n\t\t\r\nThis mode is not something you want enabled for the lifetime of the app.  It should be enabled when necessary - only when smaller details need to be sharper.  This mode should otherwise stay disabled to maintain the larger FOV\r\n\t\t\r\nThere is currently a bug (as of Unity 2019.4.5) where Unity doesn\'t fully use the adjusted projection when the ""Stereo Rendering Mode"" is ""Single Pass Instanced.""  Until that is fixed, you can work around it by changing to ""Multi Pass.""  This mode will have some performance impact for the entire app experience, not just when Projection Override is enabled.\r\n\r\nProjectionOptionsDemo scene:\r\n![ProjectionOverride2](https://user-images.githubusercontent.com/6423774/94062391-7604b680-fd9b-11ea-9510-17f739329146.gif)\r\nThis allows you to see how ProjectionOverride changes the appearance of content\r\n\r\n\r\n## Changes\r\n- Fixes: #8344 \r\n* Add ProjectionOverrideEnabled to IMixedRealityCameraSystem and implement it in MixedRealityCameraSystem\r\n* Add ProjectionOverride MonoBehavior that does the actual Projection Override\r\n* Add ProjectionOptionsDemo scene to demonstrate the change\r\n\r\n'"
723489926,8807,"b'Revert ""User/kevin kennedy/projection override""'","b""Reverts microsoft/MixedRealityToolkit-Unity#8651\r\n\r\nI merged it in too aggressively - @keveleigh was still reviewing this. I'll open a revert of a revert to re-do the review"""
722577065,8805,b'Release notes for v2.5.1',b'This change updates the release notes for the 2.5.1 UPM release.'
722510003,8804,b'Fix immutable shader issue when switching to URP (#8783)',"b'This change fixes the issue described in #8783 (shaders updated for URP do not persist) by:\r\n\r\n- Add MRTK.Shaders.Sentinel file\r\n- Creating an editor-only assembly in standard assets\r\n- Update packaging to rename StandardAssets/Shaders to StandardAssets/Shaders~ (hides it from the Unity Editor)\r\n- On load, checking to see if the Assets folder tree contains the MRTK shaders (checking for new sentinel file)\r\n- If sentinel is in Assets, do nothing\r\n- If sentinel is NOT in assets, copy the Shaders~ folder to Assets/MRTK./Shaders\r\n\r\nFixes: #8783'"
722291686,8803,b'Sanitize data provider array access',"b'## Changes\r\n\r\nPartially fixes #8802 \r\n\r\nSome of the error messages there seem to be ""by design but misleading"", e.g. a new data provider is created without a concrete type (type is ""(None)"") and then an error is logged that the type (obviously) is not a concrete type, so I\'m not quite sure what the best approach would be \xe2\x80\x93 maybe this should be a warning in the editor and an error in a build?\r\n'"
722268208,8801,b'fix ReflectionTypeLoadException when opening the Receivers dropdown',"b'## Overview\r\nFixes an exception that prevents the use of the Receivers dropdown in an Interactable when some assembly types can\'t be loaded (e.g. some Cecil assemblies etc. that have weird types).\r\n\r\n## Changes\r\nThere was already AssemblyExtensions.GetLoadableTypes so this is now properly used in TypeExtensions.GetAllSubClassesOf. No new code added besides renaming ""GetTypes"" to ""GetLoadableTypes"".\r\n\r\n## Notes\r\nIn recent Unity versions any of these ""walk assembly, get types"" constructs could be vastly sped up by using the [TypeCache API](https://docs.unity3d.com/2019.2/Documentation/ScriptReference/TypeCache.GetTypesDerivedFrom.html) available from 2019.2. This would reduce domain reload times considerably.'"
721911961,8800,b'Update OculusQuestMRTK.md',"b""Without setting Device Manager Profile, app doesn't work properly on Device.\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
721760828,8799,b'Cherry-pick fix for #8654 for 2.5.1 release',b'This change cherry-picks the fix for issue #8654 so that the sample in 2.5.1 is implemented correctly and does not display the multiple event systems warning.'
721750888,8798,b'Cherry-pick fix for #8719 into 2.5.1 release',"b'This change cherry-picks the fix for #8719 so that the updated UPM packages no longer display the error,.'"
721719932,8797,b'Merge stabilization -> mrtk_dev',"b""## Overview\r\n\r\nManual merge, to revert the version number change to 2.5.1 so we don't overwrite the existing 2.6.0 version in the dev branch."""
721010656,8794,b'Support for the HP controller in MRTK',b'## Overview\r\nAdding support for the HP controller for MRTK.'
719803018,8790,b'Reenable skipped UGUI tests',b'## Overview\r\nIt seems that the two previously skipped UGUI tests no longer need to be skipped as the tests pass without problem when running in local batch mode.'
719751999,8789,b'Add a scroll view to the list of included scenes on the Build Window',"b'## Overview\r\nWhen we had a big list of scenes to be included in the build, the layout of the ""Unity Build Options"" tab in the Build Window would keep growing. Thus, the buttons to open Visual Studio and build the Unity Project can easily become clipped and out of reach. This pull request adds a scroll view to surround the list of scenes in order to avoid this issue.\r\n\r\n### Before\r\n![Unity_zpKM31U6or](https://user-images.githubusercontent.com/2981116/95800539-80a5d200-0cef-11eb-852d-facf3651cf9f.png)\r\n\r\n### After\r\n![Unity_ra2IS2pw1d](https://user-images.githubusercontent.com/2981116/95800523-7aaff100-0cef-11eb-9389-866e399aef9f.png)\r\n\r\n## Changes\r\n- Fixes: Add a scroll view around the list of scenes to be included in the ""Unity Build Options"" tab of the Build and Deploy Window.\r\n'"
719720142,8788,b'Reset release notes for 2.6',b'## Overview\r\nResets the release notes but keeps the contents in the known issues section.'
719707939,8787,b'Fix profile switching related issues',"b'## Overview\r\nThis PR builds on #8260 and addresses a number of profile switching related issues:\r\n- Currently the [prior MRTK initialization profile swapping](https://microsoft.github.io/MixedRealityToolkit-Unity/version/releases/2.5.0/Documentation/MixedRealityConfigurationGuide.html#swapping-profiles-prior-to-mrtk-initialization) does not work as intend. This PR adds a new static method to achieve that goal.\r\n- The runtime profile switching feature has some issues related to Unity UI (UGUI not responding after profile switch) due to the lifecycle of input module being not completely dependent on the input system in certain cases. This PR makes sure the input module behaves correctly after profile switching.\r\n\r\n## Changes\r\n- Fixes #4289, fixes #5185, fixes #6061, fixes #8737 \r\n\r\n## Verification\r\nThe PR should be tested using both Legacy XR and XRSDK pipelines as during development pipeline specific issues were identified. I have tested both pipelines in editor play mode, HL2 remoting and running on HL2.\r\n\r\nAfter switching to this branch, please download [this package](https://github.com/microsoft/MixedRealityToolkit-Unity/files/5382357/ProfileSwitchTestPackage.zip) to test the PR. After opening ProfileSwitchTestScene, use the three buttons above the piano to switch profiles (left: default, middle: HL1, right: HL2). I included test profiles for both legacy XR and XRSDK pipelines, and by default legacy XR profiles are in use. To switch pipelines, click on each of the three buttons, scroll to the bottom in inspector and change the destinationProfile field in the ProfileSwitchTestScript compoent. The scene also by default tests prior initialization profile switching, as before playing the MRTK instance has the default profile but the changeProfileBeforeMRTKInit bool is checked for the ProfileSwitchTestScript attached to the rightmost button of the three so that when the scene is played HL2 profile is used. You are more than welcome to play around with the profiles, but the most significant difference between the three profiles is the locations of the profiler (left, middle and right corresponding to the location of buttons). Besides playing with the normal GameObjects in front of you, please make sure to test the Unity UI 2D/3D buttons on the right as they were causing problems in the past.\r\n\r\n## Todo\r\n\r\n- [x] Update release note\r\n- [x] Update the profile switch section of the doc site\r\n\r\n## Known issue\r\nWhen using XRSDK, an attempt to switch profile at runtime via near interaction (press a pressable button) may cause the button to be triggered multiple times. In general, the use of near interaction to trigger profile switch should be disallowed unless a mechanism of temporarily disabling near interaction after the interaction is used. Otherwise, the state of the near interaction GameObject may lead to unexpected behavior.'"
719550942,8786,b'Add license and changelog files to the UPM packages',"b'Per #8734, our packages were missing license and changelog files.\r\n\r\nThis change adds these files and updates the packaging process to ensure they are included.\r\n\r\nThis change also adds the Documentation~ folder to each package containing a readme with links to the docs.microsoft.com MRTK getting started as well as the MRTK docs on GitHub.\r\n\r\nFixes: #8734'"
718811172,8784,b'Remove unnecessary sentence in README_ScrollingObjectCollection.md',b'I assume this text was copied from README_TapToPlace.md and this line was forgotten to be deleted.'
718488571,8781,b'Fixed teleport animations/scripts to not reset animator state',"b""#Overview\r\nPreviously the SetVisibility function would set the hand visual object as active/inactive for the teleport cursor. This interfered with the cursor since it's animation state was tied to the hand visual object. This PR changes the SetVisiblity script and the animation so that they no longer conflict with each other.\r\n\r\n\r\n![handteleportfix](https://user-images.githubusercontent.com/39840334/95641032-cd21b100-0a54-11eb-8356-9e03c11b9319.gif)\r\n## Changes\r\n- Fixes: #8755\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
718485097,8780,b'Tidy up some small mistakes in recent asset changes in the 2.5.1 branch',b'#8777 feedback pointed out a handful of small errors and missed updates related to moving asset files to avoid incorrect dependencies between packages.\r\n\r\nThis change addresses each of the issues pointed out in #8777 and updates the relevant documentation to match.\r\n\r\nIt also fixes #8778 which identified some missed asset dependency fixes caused by the consolidation of some resources (remove duplication)\r\n\r\n![image](https://user-images.githubusercontent.com/13281406/95640614-68655700-0a52-11eb-8265-50f7aed03ec5.png)\r\n'
718477649,8779,b'Update stabilization branch version to 2.5.1',b'## Overview\r\n\r\nUpdate stabilization branch version to 2.5.1'
718382562,8777,b'Prerelease/2.5.1 upm stabilization -> mrtk_development',b'This change brings the collection of UPM related fixes into the development branch'
717746456,8773,b'Resolve incorrect package dependencies',"b""#8763 pointed out that MRTK had some incorrect file dependencies between packages (ex: standard assets required foundation, extensions required examples, etc).\r\n\r\nThis change moves the involved files to more appropriate locations (generally into StandardAssets or the Foundation's SDK folder)\r\n\r\nFixes: #8763"""
717742631,8772,b'Update some private property casing',b'## Overview\r\n\r\nFound a branch from April where I had updated some private property casing to match our code style conventions. Rebased it to clean up some of my old branches (along the lines of https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8442)\r\n\r\n## Changes\r\n- Fixes: https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/CodingGuidelines.html#naming-conventions'
716918429,8769,b'Fixed issue where the oculus profile would not save between integrations',"b'## Overview\r\nFix issue where profile changes would not be saved between closing and reopening unity instances. Also made the integration tool affect all profiles of the relevant type\r\n\r\n## Changes\r\n- Fixes: #8767, #8768'"
716720673,8766,b'Added common issue for OculusXRSDKDeviceManagerProfile Prefab ',b'#8359  Overview\r\n\r\nUpdated docs to more clearly indicate that the prefab references for the OculusXRSDKDeviceManager should get populated.'
716081777,8765,b'Use variable expansion for CI/PR demands',"b""## Overview\r\n\r\nI think this didn't used to work or something? But I found while working on a different repo's pipeline that I could do this now. Helps reduce the number of places we need to update version numbers to one for the pipelines."""
715916840,8764,"b'Replacement PR for #8761, 8760, 8759 and 8758'",b'This change builds upon the work done by @brandf and addresses the missing TextMesh Pro dependency.\r\n\r\nIt also moves the IrridescentSpectrum*.* files from the foundation to the standard assets package.\r\n\r\nNote: This change does not cover the complete list of missing dependencies as outlined in #8763. Those will be covered in a future PR.'
715822525,8761,b'Missing foundation and TMP dep in standard assets',"b""Sorry for the PR's on individual files...I'm just using the github web-based file editor to make patches.\r\n\r\nStandardassets contains asset FontsSDFTextures\\seguisb SDF.asset, that depends on Packages/com.unity.textmeshpro/Scripts/Runtime/TMP_FontAsset.cs, but package dependency is missing.\r\n\r\nStandardassets contains asset Materials\\MRTK_Standard_GlowingCyan.mat, that depends on Foundation/SDK/StandardAssets/Textures/IridescentSpectrum.png, but package dependency is missing.\r\n"""
715822372,8760,b'Missing text mesh pro dependency in Extensions.',"b""Sorry for the PR's on individual files...I'm just using the github web-based file editor to make patches.\r\n\r\nExtensions contains asset LostTrackingService\\Assets\\LostTrackingVisualPrefab.prefab, that depends on Packages/com.unity.textmeshpro/Scripts/Runtime/TextMeshPro.cs, but package dependency is missing.\r\n"""
715822234,8759,b'Missing text mesh pro dependency in Foundation',"b""Sorry for the PR's on individual files...I'm just using the github web-based file editor to make patches.\r\n\r\nFoundation contains asset SDK\\Features\\UX\\Interactable\\Prefabs\\PressableButtonHoloLens2_NoLabel.prefab, that depends on Packages/com.unity.textmeshpro/Scripts/Runtime/TextMeshPro.cs, but package dependency is missing."""
715802620,8758,b'Missing text mesh pro dependency in examples.',"b""Sorry for the PR's on individual files...I'm just using the github web-based file editor to make patches.\r\n\r\nMy dependency walker found several issues such as:\r\n\r\nExamples contains asset Common\\Prefabs\\HandMenu_Large_AutoWorldLock_On_HandDrop.prefab, that depends on Packages/com.unity.textmeshpro/Scripts/Runtime/TextMeshPro.cs, but package dependency is missing.\r\n\r\nThe asmdef does contain the reference, but that doesn't guarantee they have the package reference.\r\n"""
715738718,8756,b'usingupm.md \xe3\x81\xae\xe7\xbf\xbb\xe8\xa8\xb3',b''
715230016,8753,b'Fix inaccessible scene system resources',"b'The 2.5.0 UPM release packaged the DefaultManagerScene.unity and DefaultLightingScene.unity files in the SDK/StandardAssets/Scenes folder. When imported, these files are immutable and cannot be loaded by Unity. This breaks the scene system\'s default configuration.\r\n\r\nThis change moves these files into a top level folder beneath MRTK (MRTK/SceneSystemResources) and packages them as a sample. \r\n\r\n<img width=""696"" alt=""UpmImportSceneSystemResources"" src=""https://user-images.githubusercontent.com/13281406/95142309-36898300-0728-11eb-86bb-aa826ee41474.png"">\r\n\r\nThis allows customers who wish to use the scene system\'s default configuration to import these files into the Assets folder, thus making them accessible to Unity.\r\n\r\nIt also adds an informational message to the scene system profile inspector when the files cannot be found.\r\n\r\n<img width=""208"" alt=""DefaultResourcesMessage"" src=""https://user-images.githubusercontent.com/13281406/95142336-4608cc00-0728-11eb-91d9-a2579390f4c9.png"">\r\n\r\nDocumentation has been updated with instructions on how to import the needed files.\r\n\r\n\r\n\r\nFixes: #8741'"
715211596,8752,b'Remove the broken touchable plane from HandInteractionTouchableExamples',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8719\r\n\r\nThis has been around for a bit - I'm doing a cleanup pass of example scenes and this was on my radar for the day.\r\n\r\nPer the information in the issue, this has been around for some time when the script attached to this plane was deleted. I've opted to just delete the broken functionality here so that we don't have missing script warnings in the scene itself. I've also updated the text for the scene description panel to remove the mention of that plane."""
715193158,8750,b'Remove duplicate EventSystem in LeapMotion Hand Tracking Example',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8654\r\n\r\nBasic example scene cleanup - opening example scenes shouldn't show warnings in the Unity editor. I was already looking at https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8720, this was in the same neighborhood so I opted to fix this one as well.\r\n\r\nBasically, the main camera had two EventSystems on it (so we deleted the duplicate one)"""
715189510,8749,b'Remove duplicate EventSystems in ColorPickerExample',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8720\r\n\r\nWas looking at this issue earlier and thought maybe there was some deeper regression, but after some quick digging found that it was just an error in the scene itself (i.e. it had duplicate EventSystem objects on the main camera).\r\n\r\nSince I was already looking at this, I decided it would be good just to get this patched up.'"
714470978,8744,b'Fix table in MRTK_Packages document',b'## Before the change:\r\n\r\n![image](https://user-images.githubusercontent.com/4415085/95035487-3aa1aa80-0700-11eb-86bd-55a42e8dd4d0.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4415085/95035469-2f4e7f00-0700-11eb-839a-ddd52d3596b6.png)\r\n\r\n\r\n## After the change:\r\n\r\n![image](https://user-images.githubusercontent.com/4415085/95035523-5016d480-0700-11eb-8605-2abde61d5157.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4415085/95035689-d3d0c100-0700-11eb-8f28-80b0d51165e4.png)\r\n'
713947349,8743,b'Merge 2.5.1_upm_stabilization into dev',b'Bring in changes added to the potential 2.5.1 UPM release (ex: migration tool attempting to load scenes from an immutable location)'
713940118,8742,b'Releases/2.5.0 -> mrtk_dev',b'## Overview\r\n\r\nSome docs updates went in after https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8725'
713929751,8740,b'Fix for #8733: Limit migration tool to Assets folder tree',"b'#8733 identified a bug in the migration tool in which it is searching for assets in immutable folders. With the MRTK being provided as UPM packages, this causes a failure to load scene error when the scene system scenes (ex: DefaultLightingScene) are encountered.\r\n\r\nThis change limits the migration tool to only work on files in the Assets folder tree.\r\n\r\nIt does _not_ fix the inability to load the scenes (that change is forthcoming in a new PR_)\r\n\r\n**_This change should be considered for a 2.5.1 UPM release as it prevents customers from using the Migration Tool._**\r\n\r\nFixes: #8733'"
713883921,8739,b'Add super sampling option for mrtk standard shader',b'## Overview\r\nIcon rendering is noticeably blurry on VR devices Hololens 2 (slightly less so for the latter). By adding super sampling (https://medium.com/@bgolus/sharper-mipmapping-using-shader-based-supersampling-ed7aadb47bec) we can improve the icon rendering quality without too much performance impact.\r\n\r\n## Changes\r\n- Fixes: #8713\r\n'
713228682,8731,b'Clean up CI exceptions list',"b'## Overview\r\n\r\nAs part of #8574, several `[InitializeOnLoad]` tags and asmdefs were removed. We can go ahead and trim down the exceptions lists!'"
713172057,8729,b'Update WelcomeToMRTK.md',b'The Unity development journey on docs.microsoft.com currently supports MRTK 2.4 (this will change soon).\r\n'
713166631,8728,b'Fix for MRTK version in external Getting started tutorial',b'The Getting Started experience on docs.microsoft.com currently supports MRTK 2.4 (this will change soon).'
713037908,8727,"b""remove 'draft' from title""",b'quick cleanup... the release notes are not a draft'
713022192,8726,b'mrtk_release -> mrtk_development',b'Merge latest release into the development branch'
712993860,8725,b'Merge 2.5.0 -> mrtk_release',b'This updates the mrtk_release branch to match releases/2.5.0'
712873928,8724,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
712346754,8722,b'Cherrypick #8711 to 2.5',"b""## Overview\r\n\r\nCherrypick #8711 to 2.5. @RogPodge @polar-kev let me know if this was only intended to go into mrtk_dev, but since it was an edit to the 2.5 release notes I wanted to open this to make sure it doesn't get lost for the upcoming release."""
712321864,8721,b'Additional improvement to remoting doc',b'Co-Authored-By: Kurtis <3580640+keveleigh@users.noreply.github.com>\r\n\r\n## Overview\r\n\r\nAdditional improvement to the remoting page based on feedback from @keveleigh in #8717'
712034549,8718,b'enabled diagnostics / disabled spatial awareness for default xrsdk config',"b""## Overview\r\nfixes missing profiler in hand interaction scene if you're starting the examples with xr sdk default profile (unity 2019.4)\r\ndisabled spatial awareness setting\r\n\r\nboth flags now match the hl2 profile"""
711584574,8717,b'Add instructions for remoting when using XR SDK',b'## Overview\r\nThis PR improves the remoting documentation by including separate paths for people to enable remoting based on whether legacy XR or XR SDK is used.\r\n\r\n## Changes\r\n- Fixes: #8716 '
711539054,8714,b'Rigged Hands graduation part 1',b'Overview\r\nGraduates rigged hands from experimental to mainline (still need to move around the actual files in a followup PR). Includes hand mesh material improvements given from MRTK-Quest. See those improvements here:\r\n\r\nduplicating #8705 but retargetting mainline\r\n\r\nhttps://streamable.com/wb5kz4\r\n\r\nChanges\r\nFixes: #8669 modulo file refactor'
711460583,8712,b'Update github.io documentation version list and default',b'This change adds 2.5.0 to the collection of documentation versions and sets the default to the latest (2.5.0).\r\n\r\nDo NOT merge this until the final release process is complete.'
711381141,8711,b'removed mention of quest specific improvements',"b""## Overview\r\nRemove mentions of Oculus Quest specific improvements in the release notes to not send mixed messages. We'll shoutout those improvements when they are available on all platforms."""
711249659,8709,b'Replaced mentions of bounding box with bounds control',b'## Overview\r\nremoved all references to old bounding box in other articles and replaced by bounds control\r\nreplaced one old reference to manipulation handler with object manipulator\r\n'
711143712,8708,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
710566199,8706,b'Delete file that was replaced in 8640',b'This change removes a file that was replaced in #8640 by one with the correct name.'
710559954,8705,"b'Rigged Hands graduation (old, targetted mrtk 2.5)'",b'## Overview\r\nGraduates rigged hands from experimental to mainline (still need to move around the actual files in a followup PR). Includes hand mesh material improvements given from MRTK-Quest. See those improvements here:\r\n\r\nhttps://streamable.com/wb5kz4\r\n\r\n## Changes\r\n- Fixes: #8669 modulo file refactor'
710548325,8704,b'Remove the verbose hoverlight debug log messages',"b""The messages that were added for the hover light increase/decrease tends to clutter the console output - they're valuable for us as things increase/decrease, though probably less so for normal use cases like with leap hands.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/8700\r\n\r\nI'm removing the more routine logs and keeping the limit one (i.e. when you hit the max value)"""
710513245,8703,"b""Update the CI process to log a warning/error when there's an unknown project failure""","b""With some of the Generate SDK Project failures that we've encountered, there's an error in CI but no error actually logged there.\r\n\r\nThe exception doesn't appear to be captured and logged (i.e. it just kills the process). This updates the code to actually log before killing off the process, so hopefully future errors that we encounter, we can have more immediately actionable build logs."""
710507936,8702,b'Fix the broken CI',b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8701\r\n\r\nApplies the same workaround we did for Oculus Quest here: https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8583'
710462301,8699,b'Updating scroll documentation',b'## Overview\r\n\r\nUpdates documentation for the upgraded Scrolling Object Collection.'
710453788,8698,b'Add release note re: no spatializer warning',"b'This change adds a release not describing how to resolve a ""No spatializer was specified"" warning from Unity.'"
710432458,8697,b'Update Leap Configuration Checker for 2020 Support',b'## Overview\r\n- Removes the editing of the formerly named `Microsoft.MixedReality.Toolkit.Providers.LeapMotion` asmdef in the configuration checker because Unity 2020 does not support editing asmdefs for UPM \r\n- Adds placeholders to the root leap asmdef now named `MRTK.Leap`\r\n\r\n\r\n## Verification\r\n\r\n- [x] Unity 2019.4 with the 4.5.1 assets\r\n- [x] Unity 2019.4 with the 4.5.0 assets\r\n\r\n- [x] Unity 2018.4 with the 4.5.0 assets\r\n- [x] Unity 2018.4 with the 4.5.1 assets\r\n'
710408107,8696,b'Update the ARM64 workaround to be best effort',"b""This change wraps the ARM64 workaround in a try/catch to make sure the workaround itself is best effort. There are a few operations in there that do file I/O which could throw if: the csproj file isn't found (i.e. some other step does post processing to rename files), the csproj file is locked for editing (some other build step opens the file and locks it for editing).\r\n\r\nThis should make it so that even in those cases, there won't be a stray exception on build."""
710292483,8695,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
709553473,8689,b'2.5.0 stabilization release note - UX items & type ramp polish',b'## Overview\r\n2.5.0 stabilization release note - UX items & type ramp polish\r\n'
709301494,8683,b'Oculus XRSDK editor no longer modifies player definitions.',"b""## Overview\r\nThe existing Oculus asmdef already has a Version define which prevents certain code from running when the Unity.XR package is not imported. The additional management by the Editor script would cause projects to think the Unity.XR package was imported and available when it actually wasn't. This PR removes this additional layer of management of player definitions.\r\n\r\n## Changes\r\n- Fixes: #8681\r\n\r\n## Verification\r\n>Tested on Unity 2018.4.24 and 2019.4.10"""
709300005,8682,b'Make sure NearInteraction triggers CanInteract check',b'## Overview\r\nInteractable should always check for `CanInteract` no matter it is responding to far interaction or near interaction.\r\n\r\nThanks @rfurmaniak for proposing the change!\r\n\r\n## Changes\r\n- Fixes #8479 '
709289536,8680,b'Fix some piano related bugs in the hand interaction examples scene',"b'## Overview\r\nThis PR replaces the generic debug message above the piano in the hand interaction examples scene to ""Interaction with the piano"". Missing references to the debug text mesh are added to the EFlat, FSharp, GSharp and BFlat keys so that pressing those keys now correctly shows a message.\r\n\r\n## Changes\r\n- Fixes #8567 '"
709229602,8679,b'Update asmdef names to fix CI',b'## Overview\r\n\r\nLast two asmdef name updates to match the inclusion list and our new naming format.\r\n\r\n## Fixes\r\n\r\nhttps://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=14477&view=logs&j=ae5f814d-d003-5afd-2125-fa0189ea8658&t=12d627c1-3bb6-55bf-f915-b77e58828cea'
709202178,8678,b'Fix CI break caused by asmdef file renames',b'The CI process validates the build against a collection of approved .asmdef files. Change #8668 broke this validation by forgetting to update the list to reflect the new names.\r\n\r\nThis change addresses the above as well as clean up a small set of files that were incorrectly renamedf.'
709133028,8677,b'Add support for reducing the UPM preview version length',b'This change reduces the length of the UPM preview version by trimming the year from the build number.\r\n\r\nBefore:  4.3.2-preview.20200925.1\r\nAfter: 4.3.2-preview.0925.1\r\n'
709120183,8676,b'Merge stabilization -> mrtk_dev',b'## Overview\r\n\r\nReplacement PR for https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8674 to manually fix merge conflicts.'
709024559,8675,b'Added documentation for elastic system + release notes entry',b'## Overview\r\n\r\n- added release notes entry for elastics\r\n- added updated elastics entries in bounds control and object manipulator\r\n- added doc link for elastics in toc\r\n- added doc link for elastic inspector\r\n- added component menu entries for elastic manager and bounds control\r\n'
708966742,8674,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
708583212,8672,b'Fix tooltip in the Examples Hub Tooltip scene',b'## Overview\r\nThis PR fixes two issues in the Examples Hub Tooltip scene:\r\n1. The blue platonic now shows a tooltip when pressed as expected\r\n2. The scale of tooltip generated after looking at the green platonic is now correct\r\n\r\n## Changes\r\n- Fixes: #8578 '
708574952,8671,b'(Fix CI) Make a missing asmdef a warning instead of an exception in MSBuild scripts',"b""## Overview\r\n\r\nSince we're only using this script to build packages for Unity 2018, where certain projects might not exist, we can safely skip it. Since we're also migrating off support for the NuGet packages (no longer publishing publicly), this is an okay scenario.\r\nStill logs, in case we need to debug any issues. This will resolve any asmdef references that only exist in Unity 2019 for https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8574."""
708548312,8670,b'Changed oculus xrsdk configuration checker to not modify asmdefs',b'## Overview\r\nAdditional changes made to clean up our config checkers to not modify asmdefs'
708497900,8668,b'Shorten names of asmdef files',b'This change shortens the file name of most of the .asmdef files in the MRTK. It does **_NOT_** change the names of the produced assemblies.\r\n\r\nThis is to help with max_path issues such as referenced in #8660 \r\n\r\nFixes: #8660 '
708407811,8667,b'Update UnityAR asmdef',"b""## Overview\r\n\r\nUpdates the UnityAR asmdef for Unity 2019, so the configuration checker doesn't have to edit an immutable file.\r\n\r\n## Changes\r\n- Part of #8574, follow-up to #8591 and #8655\r\n"""
708379040,8666,b'Add release note for 8459',b'This change adds a release note for the issue described in #8459.'
708358795,8665,b'added release notes entry for bounds control and constraint manager',b'## Overview\r\nadded release notes entry for bounds control and constraint manager + links to new docs articles\r\n\r\n## Changes\r\n- Fixes: #7358 \r\n'
708314659,8663,b'Added conceptual docs for bounds control + polishing example scene',b'## Overview\r\n- added conceptual docs for bounds control\r\n- added entry for elastics to object manipulator\r\n- replaced dummy link in BoundsControl.cs with new doc\r\n- added toc entry to show BoundsControl in menu\r\n- marked Bounding Box as obsolete / deprecated \r\n- added chapter for migration in both bounds control and bounding box\r\n- updated example scene: added missing highlight wireframe for moving via object manipulator and removed experimental badge\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7443\r\n- ticks one box here #7358\r\n\r\n\r\n'
708200145,8661,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
707781125,8659,b'Update input module in the DictationExample scene',b'## Overview\r\n\r\nThis PR replaces the standalone input module with MixedRealityInputModule in the DictationExample scene.\r\n\r\n## Changes\r\n- Fixes: #8656.'
707760171,8658,b'Update release notes and profile required warning',b'Adds release notes for sssues #8511 and #8623.\r\n\r\nThis change also updates the profile required warning in the Extensions inspector.\r\n\r\nFixes: #8511'
707746359,8657,b'Fix the titlebar in the HandInteractionExamples scene',"b'## Overview\r\nThis PR removes a non-working close button from the ""Grab to manipulate the entire scene"" TitleBar. Further more the world anchor is removed from SceneContent to enable grab titlebar manipulation in remoting mode and on HL2 device.\r\n\r\n## Changes\r\n- Fixes: #8553.'"
707734821,8655,b'Update Oculus Asmdef for Unity 2020 UPM',"b""## Overview\r\nThe Oculus asmdefs used to get populated by the integration tool. This does not work for Unity 2020 UPM, as they don't expect asmdefs to be modified in the Packages folder. This PR fixes this by having those asmdefs populated with placeholder references, which are only activated and used when the appropriate packages are included.\r\n\r\n## Changes\r\n- Fixes: #8637"""
707714657,8653,"b'Fix #8647, shared file needed to be moved to Common folder'","b'This change moves the LoadProfilesOnStartup script from Demos/EyeTracking to Common as it is shared between more than one demo. When importing via UPM, samples are individually imported and this file must be available.\r\n\r\nFixes: #8647 '"
707647914,8652,b'Remove collider from MRTK logo on example hub button',b'## Overview\r\nThis PR removes the non-convex mesh collider from the logo so that when a hand touches the button the ClosestPoint warnings will no longer appear.\r\n\r\n## Changes\r\n- Fixes: #8649.'
707639353,8651,b'User/kevin kennedy/projection override',"b'## Overview\r\nThis code adds a ""projection override"" mode to the main camera.  It reduces the system\'s FOV but eliminates a scaling of Unity\'s output.  So a pixel rendered by Unity will correspond to a projected pixel on HoloLens 2.  Application authors should do tests with multiple individuals to be sure this is a tradeoff they want in their app.\r\n\t\t\r\nThis mode is not something you want enabled for the lifetime of the app.  It should be enabled when necessary - only when smaller details need to be sharper.  This mode should otherwise stay disabled to maintain the larger FOV\r\n\t\t\r\nThere is currently a bug (as of Unity 2019.4.5) where Unity doesn\'t fully use the adjusted projection when the ""Stereo Rendering Mode"" is ""Single Pass Instanced.""  Until that is fixed, you can work around it by changing to ""Multi Pass.""  This mode will have some performance impact for the entire app experience, not just when Projection Override is enabled.\r\n\r\nProjectionOptionsDemo scene:\r\n![ProjectionOverride2](https://user-images.githubusercontent.com/6423774/94062391-7604b680-fd9b-11ea-9510-17f739329146.gif)\r\nThis allows you to see how ProjectionOverride changes the appearance of content\r\n\r\n\r\n## Changes\r\n- Fixes: #8344 \r\n* Add ProjectionOverrideEnabled to IMixedRealityCameraSystem and implement it in MixedRealityCameraSystem\r\n* Add ProjectionOverride MonoBehavior that does the actual Projection Override\r\n* Add ProjectionOptionsDemo scene to demonstrate the change\r\n\r\n'"
707568818,8645,b'Fix implied install of legacy Windows Mixed Reality package with config dlg',"b'During testing, it was discovered that a duplication of AudioSpatializerMSHRTF.dll occurs in the following scenario:\r\n\r\n* Unity 2019.4\r\n* XR SDK\r\n* Click ""Apply"" on MRTK Configuration dialog.\r\n\r\nThis was caused by the configuration dialog attempting to check the legacy XR option, which was triggering the installation of the legacy Windows Mixed Reality UPM package.\r\n\r\nUnfortunately, this install is not reflected in Packages/manifest.json which makes it difficult for customers to identify a means of resolving the duplication.\r\n\r\nThis change suppresses attempts to enable legacy XR on Unity 2019 and newer and was verified by creating and importing a local version of the foundation package.'"
707561664,8644,b'Fix README markdown',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
707559925,8643,b'Docs update 2.4.0: Fix markdown',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
707550979,8641,b'Cherry-pick pull request #8622 to 2.5',b'## Overview\r\n\r\nCherry-pick pull request #8622 to 2.5\r\n\r\n## Changes\r\n\r\n- Related to https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8482\r\n'
707548614,8640,b'Docs update 2.5.0 stabilization: Fix filename typo',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
707394871,8639,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
707299026,8636,b'Fix/menu update icons',b'## Overview\r\nFixes regression issue with menu option **Mixed Reality Toolkit > Utilities > Update > Icons > Tests**\r\nand updates test assets missing icon.\r\n\r\n## Changes\r\n- Fixes: #8635 \r\n'
706608211,8632,b'Cursor Animation Fix',"b'## Overview\r\nCurrently the animations for changing the cursor to a cross icon/scale icon/rotate icon don\'t explicitly disable or enable the other visuals, which can cause the ""default state"" of the cursor to become altered during runtime as the visuals gets toggled on and off. This PR addresses that issue. \r\n\r\nNo unit tests added since it\'s a purely animation related bug and not related to our core underlying code for going between different cursor contexts.\r\n\r\nold behavior:\r\nhttps://user-images.githubusercontent.com/39840334/93144069-0e18e680-f69e-11ea-8c2a-e318d27b74b1.gif\r\n\r\ncurrent behavior:\r\n![goodcheese](https://user-images.githubusercontent.com/39840334/93923597-741df300-fcc8-11ea-9e0d-469a24cc435d.gif)\r\n\r\n\r\n## Changes\r\n- Fixes: #8549\r\n\r\n\r\n## Verification\r\nHover over an object with bounds controls with the hands free mode and then simulate an articulated hand, move it around, and then go back to the hands free mode. Prior to this PR, you would get weidness with the cursor icon if you moved to one of the bounds controls handles, but with this PR, it should be fixed'"
706506608,8629,b' Fix getting started 404 redirect for 2.4.0 ',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
706506168,8628,b' Fix getting started 404 redirect for 2.5.0 ',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
706504972,8627,b'Fix getting started 404 redirect for 2.5.0',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
706503802,8626,b'Fix getting started 404 redirect for 2.4.0',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
706413074,8625,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
705978434,8622,b'Readme link update',"b'Updated the ""Getting Started"" link associated with the ""Getting started with MRTK"" image\r\nUpdated the Release Assets link to point to MRTK 2.4 release assets instead of 2.0 release assets.\r\n\r\n## Overview\r\nAs part of the MRTK Github.io docs changes, there\'s a new getting started page for MRTK. The URL was updated to reflect this.\r\n\r\n## Changes\r\nChanged Getting started link to point to https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/WelcomeToMRTK.html\r\n\r\nRelease Assets now points to: https://github.com/microsoft/MixedRealityToolkit-Unity/releases/tag/v2.4.0\r\n'"
705969691,8621,b'Fix links that were broken in 8496',b'#8496 introduced some broken links. this change fixes them'
705969142,8620,b'Add motion controller simulation to input simulation documentation',b'## Overview\r\nThis PR updates the input simulation documentation to reflect the change of introducing motion controller simulation.'
705962892,8619,b'Update gitignore file',b'This change adds .DS_Store to the .gitignore file.'
705959920,8618,b'Add file that was missing from 8496',"b'When #8496 was merged, it was missing an image file. This change adds it.'"
705943739,8617,b'Re-add haptics to InteractionSourceExtensions',"b'## Overview\r\n\r\nFollow-up to #8592. Re-adds the haptics extensions that were removed in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6364, and additional adds in-editor support via DotNetWinRT.'"
705905375,8616,b'Oculus Separation Tool',b'## Overview\r\nAdded explicit functionality to separate out oculus integration components since users were having trouble decoupling oculus from their project. Also matches the experience we provide for Leap Motion.\r\n'
705859425,8614,b'Oculus Integration Documentation Image update',"b""## Overview\r\nUpdating some documentation images to match changes we made to the tool's UI\r\n"""
705808908,8613,b'Check if instancing is supported before attempting it in visual profiler',"b""## Overview\r\n\r\nInstancing isn't supported on all platforms, so the visual profiler should only attempt it if supported. See the fixed bug below for more info.\r\n\r\n## Changes\r\n\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8600\r\n"""
705783756,8612,"b'Revert ""Merge pull request #8190 from MaxWang-MS/AxisFlags_fix""'","b""This reverts commit 121c4573f2ffb4dc5853f2571f5f74905e572273, reversing\r\nchanges made to 5730fa18cbe5f300a5145ebd1013d35e203ef9b9.\r\n\r\n## Overview\r\nreverted the changes to axis flag as it's breaking user asset files (and mrtk example scenes)\r\nthere needs to be more investigation on android side to tackle the original issue. \r\n\r\n- Reopens: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7463\r\n- Fixes parts of: #8555 \r\n\r\n\r\n"""
705780916,8610,b'Remove breaking change from IMixedRealityNearPointer',"b'## Overview\r\n\r\nI was doing a diff between our core interfaces between 2.4 and 2.5 to see if we had any breaking changes in that layer. I found three:\r\n\r\n1. https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8258 adds a new required method to IMixedRealityPointerMediator, which seems unavoidable because it\'s a required contract for the mediator respecting pointer preferences.\r\n1. https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8227, which could be split out into an IMixedRealityDictationAudio interface.\r\n1. https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7712, which added a grasp axis method to IMixedRealityNearPointer that seems to be only internally used by the sphere pointer at this time.\r\n\r\nThis PR updates the change made in IMixedRealityNearPointer to instead define that method as a `private` sphere pointer implementation detail. This way, PokePointer doesn\'t need to define a ""grasp"" axis. (Note that the existing interface defines a ""grasp point"" which also doesn\'t quite make sense for PokePointer, but that method has already shipped)'"
705744240,8609,b'Update CI and publishing',"b'## Overview\r\n\r\n1. Remove automatic UPM publishing steps in favor of manual release pipeline\r\n1. Remove preview pack pipeline, since we can use the stabilization CI instead\r\n1. Update artifacts publish path to point to parameter'"
705734250,8608,b'Cherry-pick #8596 (Adding scalable hover light support) to 2.5',"b'## Overview\r\n\r\nCherry-pick #8596 to the 2.5 branch, as the issue it fixed was marked as a release blocker.\r\n\r\nAccidentally merged https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8602 into mrtk_dev...\r\n\r\n## Changes\r\n- Fixes: #8543\r\n'"
705633073,8606,b'Fixing scroll MaskEnabled property serialization issue',b'## Overview\r\nFixing issue related to one of the scroll properties changes not being saved.\r\n\r\n## Changes\r\n- Fixes: #8605 \r\n'
705029733,8602,b'Cherry-pick #8596 (Adding scalable hover light support) to 2.5',"b'## Overview\r\n\r\nCherry-pick #8596 to the 2.5 branch, as the issue it fixed was marked as a release blocker.\r\n\r\n## Changes\r\n- Fixes: #8543\r\n'"
704676334,8596,b'Adding Scalable HoverLight Support',"b""## Overview\r\n\r\nThis pull request primarily addresses a recent warning about 3 hover lights present (#8543), but it also addresses a portion of a request for more lights (#5888).\r\n\r\nTo keep existing performance characteristics the same I've added two new multi compile shader keywords that get enabled/disabled as more lights are added and removed. This means by default the MRTK/Standard shader only calculates up to two HoverLights but will begin to calculate more in tiers (4 and 10) as more are added. Users should profiler their applications to see if their scenario can handle up to 4 or 10 dynamic lights.\r\n\r\nI've also create a new HoverLight example scene showing off this functionality and updated the docs.\r\n\r\n![Screenshot_2020-09-18_02-31-32-PM_e96cabf254658da4d8fbbacf8fc51566](https://user-images.githubusercontent.com/13305729/93647424-416cb580-f9bd-11ea-97a6-b64360935230.png)\r\n\r\n![Lights](https://user-images.githubusercontent.com/13305729/93647442-47fb2d00-f9bd-11ea-910a-75462300a4ea.gif)\r\n\r\nNote, this change does introduce more shader permutations in the final build. But, the delta is modest.\r\n\r\n## Changes\r\n- Fixes: #8543, #5888 \r\n\r\n## Verification\r\nPlease take not of performance delta in existing scenes or longer than expected build times.\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
704405349,8594,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
704321177,8593,b'Added support for multiple constraint managers',"b'## Overview\r\nThis change allows to attach multiple constraint managers to one game object.\r\nComponents supporting constraint manager (currently bounds control and object manipulator) can now choose which constraint manager they want to use in case there are more than one attached as well as  the option to disable the functionality entirely.\r\nThe default behavior for those components is to have constraint manager support enabled per default and they will link the default constraint manager (with auto mode) automatically.\r\n\r\nThe inspector of both bounds control and object manipulator will now refer to the constraint manager instead of showing the constraint list. Available constraint managers on the object will be exposed in a dropdown where the user can choose the one they want to use. \r\nThere\'s also an option to scroll to and highlight the selected constraint manager to make it easier to find it (can be tricky as they all have the same name). To further distinguish between them there\'s a hint about which mode the attached constraint managers are currently in (auto or manual)\r\n\r\n![image](https://user-images.githubusercontent.com/36998103/93625777-6ae80a00-f9da-11ea-8022-a746770e0d85.png)\r\n\r\n\r\n### Constraint manager inspector \r\nConstraint manager has now two modes for the user to switch between. \r\n\r\n<img width=""456"" alt=""AutoSelection"" src=""https://user-images.githubusercontent.com/36998103/93625512-fad98400-f9d9-11ea-98da-006b5957c788.png"">\r\nOne of them is the automatic mode which will list all available constraint components that are attached to the gameobject as well as go to buttons and an option to add new components to the game object (this is pretty much the same ui we used to have integrated into the components).\r\n\r\n<img width=""457"" alt=""ManualSelection"" src=""https://user-images.githubusercontent.com/36998103/93625498-f8772a00-f9d9-11ea-9976-51876ca168ad.png"">\r\n\r\n\r\n\r\nThe second mode the user can pick is the manual mode where they can select constraints to process themselves. \r\nFor this there\'s two options available - one of them adds (and lists) existing components via dropdown\r\n\r\n![image](https://user-images.githubusercontent.com/36998103/93625609-265c6e80-f9da-11ea-92da-4f371e81a404.png)\r\n\r\n\r\nThe other one (like auto mode) will offer to attach a new component and add it to the manual list.\r\n\r\n![image](https://user-images.githubusercontent.com/36998103/93625632-2fe5d680-f9da-11ea-88a3-4ba8f1909635.png)\r\n\r\nComponents in the manual list can be removed from the list via remove entry buttons or highlighted with the goto button.\r\n\r\n\r\n\r\nThis change also includes conceptual documentation for constraint manager as well as an update to object manipulator docs.\r\nTo avoid broken links there\'s also a dummy doc for bounds control that will be filled in the next week in a separate PR.\r\n\r\nTwo playmode tests for verifying the manual constraint list filter as well as using two constraint managers on the same component were added to the constraint tests.\r\n\r\nFinally all scenes where bounds control was picking up the wrong rotation constraint from object manpulator were patched and bounds control is now using it\'s own filtered constraint manager.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8555 \r\n\r\n\r\n## Verification\r\n- added tests to verify manual constraint list in constraint manager and having two constraint managers with different setup attached to the same game object\r\n\r\n- Please have a look at the changed scenes, if bounds control behavior is as expected, especially hand interaction scene. (see linked issue  https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8555 )\r\n\r\n- Try to play around with the added inspectors for constraint manager and the integrations into bounds control / object manipulator\r\n'"
703982082,8592,b'Refactor SpatialInteractionManager access and conversions from Unity to native SpatialInteractionSource',"b""## Overview\r\n\r\n1. Getting the SpatialInteractionManager, which involves jumping over to the UI thread, is something we do in a couple places, so it makes sense to provide that alongside the other native resources we provide in WindowsMixedRealityUtilities.\r\n1. Typically when the manager is needed, it's to iterate through all `SpatialInteractionSource`s and find the one that represents the current Unity `InteractionSource`. This logic has also been refactored out, provided as an `InteractionSource` extension method."""
703978902,8591,b'Update some asmdefs to Unity 2019 version for UPM packaging',"b'## Overview\r\nCurrently amdefs are checked in at Unity 2018 version. This creates problems for UPM packaging because those packages are consumed in Unity 2019, which will lead to some automated asmdef configurator to try to modify certain content (i.e. ver. 2018 asmefs) of the supposedly immutable the package. To solve the problem, we are now checking in ver. 2019 asmdefs. Those files are backward compatible until Unity 2018.4.13f1, beyond which the user must manually perform a few straight forward steps to make them compatible. Documentations will be added in this PR to show the change. Some automatic configurator are therefore removed.\r\n\r\nNote: Users on Unity versions earlier than 2018.4.13f1 must revert the changes made to asmdefs when upgrading to Unity 2019, which will also be mentioned in the docs.\r\n\r\n## Changes\r\n- Fixes: #8574.'"
703975071,8590,b'Oculus Integration tool fix',"b'## Overview\r\nMade improvements to streamline the integration tool process (only need to click 1 menu option instead of 2). Also added helpful error messages to help steer users to the right path when going through the process, and fixed several bugs introduced due to the latest set of refactors\r\n\r\n## Changes\r\n- Fixes: #8587 \r\n'"
703944080,8588,b'Add a workaround for the ARM64 issue for IL2CPP + WSA builds',"b""With some of our recent testing, we found that the ARM64 compiler bug described here https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7624 is actually affecting some new code that was introduced in the 2.5 timeframe. This time around, it's actually a lot worse because it's leading to crashes.\r\n\r\nWhile there's been a fix to the VS compiler that should be coming in a future VS update, there's still going to be some time between the latest MRTK 2.5 release and the VS compiler update, during which things will be a lot worse.\r\n\r\nThere's a workaround that was identified in the linked issue, and I figured it would be best to add some auto-magic to the build process that will automatically update your IL2CPP project to add this compiler flag ONLY to the ARM64 build option.\r\n\r\nThis code will only run:\r\n1. Unity 2019 and above (i.e. ARM64 supporting and above)\r\n2. When building UWP/WSA (i.e. HL2, HL1 should no-op when it doesn't find the ARM64 option)\r\n3. If the workaround hasn't run before\r\n\r\nThis code will also NOT run if someone has already customized their compiler options (I didn't want to blow existing customizations away) or if someone had their own ARM64 NMakeBuildCommandLine customization. Basically this will only do work in the default IL2CPP build, and if you've done work to heavily customize it this should no-op."""
703907015,8586,b'Update the known issues to mention the UnityUI/TMP issue',b'Updates our known issue with the latest issue we found in https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8556.'
703785675,8585,b'Fix doc site analytics cherry pick',b'## Overview\r\nCherry pick changes made in the stabilization branch that fixes the analytics on the github.io documentation site.'
703180660,8584,b'Fix doc site analytics',b'## Overview\r\nThis PR changes the way Google Analytics is added to our doc site so it actually works.\r\n\r\n## Changes\r\n- Replaces #8532.'
703174167,8583,b'Remove 2019 test dependencies when building on 2018',"b""## Overview\r\nUnit tests for the Oculus Integration tool have dependencies on asmdefs that are for Unity 2019.3+ \r\n\r\nThis caused breaks in the CI pipeline. We're removing those dependencies when building the nuget packages as those tests are disabled for Unity 2018 versions anyways."""
703096149,8581,b'Pull in the analytics update into the latest release (i.e. default github.io page)',"b""This change cherry-picks the analytics change in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8532 into the latest release.\r\n\r\nSo the reason we have to do this is interesting:\r\n\r\nPrior to last month-ish, the default branch that showed up on our github.io was mrtk_development, which meant that the previous change would have worked about a month ago. We recently made a change to switch our default github.io branch (https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/GettingStartedWithTheMRTK.html) to point to the latest release (i.e. right now, 2.4), which means that the previous change didn't actually show up in the default/root folder.\r\n\r\nIn order to make this change show up, we need to cherry pick the change and then rebuild the docs (which will happen automatically once this gets submitted)"""
703022200,8579,b'Check the presence of XR device before dependent subsequent steps',b'## Overview\r\nThis PR fixes warnings created by MixedRealityBoundarySystem by checking whether there is any XR device before performing subsequent steps that require such device (e.g. SetTrackingSpace()). Thanks @keveleigh for coming up with the idea of adding the virtual IsXRDevicePresent property in base class that defaults to true to prevent a breaking change.\r\n\r\n## Changes\r\n- Fixes: #8568.'
702793576,8576,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
702415087,8575,b'Put pan limits when scaling',b'## Overview\r\n\r\nCorrect uv positions to prevent textures from being displayed beyond the limits.\r\n\r\n![Unity-2018 4 20f1-_PREVIEW-PACKAGES-IN-USE_-New-Scene (1)](https://user-images.githubusercontent.com/4415085/93288082-11cf7900-f816-11ea-9ff3-62c22d7eb3b3.gif)\r\n\r\n\r\n## Changes\r\n- Fixes: #8573'
702384943,8572,"b""Fix controller popup window when MRTK isn't initialized""","b""## Overview\r\n\r\nAdds a check before creating the `ControllerPopupWindow` that the MRTK object is initialized. If it's not initialized, we can't get the input action profile, and thus can't get the input actions to display in the window.\r\nAlso removed some unused variables.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8368\r\n"""
702264133,8570,b'Update the upgrade instruction docs to be clearer about how to actually do the upgrade',"b""Going through the upgrade instructions, I found that there are a few locations that are out of date and also not clear enough:\r\n\r\n1. The folder got renamed last release, so we can update the instructions to the 2.4 naming\r\n2. I wanted to be clearer about what the instructions are for (2.4.0 to 2.5.0), and point folks at the previous if they were on 2.3\r\n3. Updated the migration tool instructions to be clearer about how to run it (since it's not actually immediately obvious how to migrate).\r\n4. There's a line where we tell people to watch out when deleting the Library/ folder, but we do that after telling them a few steps after telling them to delete the Library folder... which isn't very helpful.\r\n\r\nFixes https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8551"""
702070193,8566,b'Slate PanZoom example is panning vertically with horizontal hand movement',"b'Fixes https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8563\r\n\r\nSee comments on that issue for what\'s going on. Usually once the .4 LTS release shows up we focus our support on that (instead of trying to ""backport"" fixes to earlier Unity tech releases) but in this case it\'s a pretty trivial change.'"
702041484,8565,b'Input Simulation key help text overlay polish.',"b'## Overview\r\nInput simulation helper text overly was occupying too much space in regular DPI monitors and small window sizes.\r\n- Updated helper prefab: Polished the text size, anchor and the placement.\r\n\r\n## Changes\r\n- Fixes: #8564 \r\n\r\n## Before & After\r\n![2020-09-15 09_07_12-MRTK-Public - HandInteractionExamples - Universal Windows Platform - Unity 2019](https://user-images.githubusercontent.com/13754172/93232321-bc16b480-f7b4-11ea-9fac-74eadfe9f616.png)\r\n\r\n![2020-09-16 00_21_13-Unity 2018 4 26f1 Personal - HandInteractionExamples unity - MRTK-Public - Unive](https://user-images.githubusercontent.com/13754172/93232357-c6d14980-f7b4-11ea-982c-7d2070e73e23.png)\r\n\r\n![2020-09-16 00_17_07-Unity 2018 4 26f1 Personal - HandInteractionExamples unity - MRTK-Public - Unive](https://user-images.githubusercontent.com/13754172/93232392-d355a200-f7b4-11ea-81df-6b3b66fb7e64.png)\r\n\r\n![2020-09-16 00_23_47-Unity 2018 4 26f1 Personal - HandInteractionExamples unity - MRTK-Public - Unive](https://user-images.githubusercontent.com/13754172/93232433-dea8cd80-f7b4-11ea-8500-eaee202f606f.png)\r\n\r\n'"
701970971,8561,b'Fixed occasional warning on null size collider when instantiating bounds control with activation on start',"b""## Overview\r\n- disabled collider on visuals before removing them in case they get updated before they're removed at the end of the frame (could cause a warning)\r\n- readded unconditional collider removal on rotation handles as colliders for handles are directly attached to the handle object itself and not the visuals\r\n- added test to verify that handles will always attach the handle collider on the handle gameobject and not the visual\r\n\r\n\r\n\r\n\r\n## Changes\r\n- Fixes:  #8550 \r\n\r\n\r\n## Verification\r\nadded test"""
701958272,8559,b'Adding Migration Window entry to toc',b'## Overview\r\nAdding entry on table of contents for Tools / Migration Window\r\n\r\n## Changes\r\n- Fixes: #8540\r\n\r\n'
701957505,8558,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
701696077,8557,b'Fix issue with Oculus based prefabs not loading correctly',"b'## Overview\r\nThe two necessary MRTK-Quest prefabs have dependencies on Oculus Integration components, causing the device manager to need to get reinitialized based on whether the oculus integration package is present or not. \r\n\r\nThis PR makes the device manager initially set the 2 prefab fields as ""None"" and then initializes them with the ""Integrate Oculus Integration Unity Modules"" menu item\r\n\r\n## Changes\r\n- Fixes: #8548 \r\n\r\n'"
701426484,8546,b'Upgrading documentation fixes/updates',"b'This PR contains a couple of tweaks to the updating guide to make things a little clearer:\r\n\r\nRemoves specific references to 2.4.0 as being the latest (we generally just recommend using the migration tool from here on out, so there\'s no reason to call out 2.4.0 in the 2.5.0 release)\r\nChanges the phrase ""most of"" to ""the following"" because the instructions actually say which folders to delete, and ""most of"" is terribly, terribly imprecise when it comes to telling people to delete things (""delete most of it, it\'s fine!"")'"
701425333,8545,b'Upgrading documentation fixes/updates',"b'This PR contains a couple of tweaks to the updating guide to make things a little clearer:\r\n\r\n1. Removes specific references to 2.4.0 as being the latest (we generally just recommend using the migration tool from here on out, so there\'s no reason to call out 2.4.0 in the 2.5.0 release)\r\n2. Changes the phrase ""most of"" to ""the following"" because the instructions actually say which folders to delete, and ""most of"" is terribly, terribly imprecise when it comes to telling people to delete things (""delete most of it, it\'s fine!"")'"
701132751,8542,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
700675490,8537,b'Update method name in Pointers.md document',b'\r\n'
700630025,8536,b'updated release notes with disclaimer about support for standalone pl\xe2\x80\xa6',"b""## Overview\r\nAdds disclaimer in release notes about standalone support due to unity/oculus side bug. We're currently tracking the issue interally as well here #8460. \r\n\r\n"""
699874937,8535,b'Fix XRSubsystemHelpers on 2019.2',"b""## Overview\r\n\r\n2019.2 appears to have moved one subsystem definition while leaving the others in the experimental namespace. We don't want the actually functionality here, since most of it isn't stable or fully usable until 2019.3, but I'm adding this so it still builds.\r\n\r\n## Changes\r\n- Fixes: #8501 \r\n"""
699750173,8533,b'Fix unresponsive radial button',b'## Overview\r\nThis PR fixes the problem of radial buttons in the radial set prefab are sometimes unresponsive. Investigation of the matter showed that in the pressable button script (Press distance - release distance delta) must be larger than start push distance or the button will not work properly.\r\n\r\n## Changes\r\n- Fixes: #8517.\r\n\r\n## Verification\r\n1. Add the RadialSet prefab to your scene\r\n2. Press each toggle once via near interaction\r\n3. Try to press the toggles again and notice they still respond properly\r\n\r\nAlso validated on a HoloLens 2 device.'
699635763,8532,b'Add analytics to doc site',b'## Overview\r\nThis PR adds Google Analytics to our documentation site hosted on GitHub.'
699467296,8530,b'Moving Scroll folders out of experimental',"b'## Overview\r\n\r\nThis PR is part of Scroll graduation:\r\n\r\n- Moving scripts, folders and example assets linked to ScrollingObjectCollection out of experimental folders.\r\n- Changing namespaces accordingly.\r\n'"
699357621,8529,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
697626377,8525,b'Changed near smoothing default to true to keep existing behavior.',b'## Overview\r\nChanged the new Near Smoothing property in Object Manipulator to true so the default behavior stays the same. This used to be one flag for smoothing for both near and far. After splitting it up near smoothing got a different default which will change the defaults and therefor introduce a breaking change.\r\n\r\n## Changes\r\n- Fixes: #8523 \r\n\r\n\r\n'
697316819,8522,b'Added release notes for teleport pointer improvements added teleport completed sound',b'## Overview\r\nAdded release notes for the teleport pointer improvements associated with #8259 and #8386'
697287712,8520,b'Provide a workaround in doc for an issue preventing XRSDK remoting to work',b'## Overview\r\nCurrently XR remoting does not work when using the XR SDK. A workaround has been found but the current documentation does not include that.\r\n\r\n## Changes\r\n- Provide a workaround to #8044 in the documentation.'
697279765,8519,b'Added tests for the oculus integration tool',b'## Overview\r\nAdded tests and cleaned up files associated with #8259 and #8386\r\n\r\n'
697178400,8514,b'Update GUID which changed in #8386',"b""## Overview\r\n\r\nThere's a GUID workaround for AssetRetargeting for Unity 2019-specific code, but that GUID changed in #8386."""
697140621,8513,b'Fixed missing gameobject references on xrsdk device manager profile',"b'## Overview\r\n\r\nMissing gameobject references on the xrsdk device manager profile caused CI breaks, fixing it here\r\n'"
697120729,8512,b'Docs update 2.5.0 stabilization',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
697038495,8510,b'Teleport cleanup',"b""## Overview\r\nFixed lingering concern from #8386 where we don't always update the previous stickinput state"""
696940375,8508,b'BoundsControl final migration step',"b""## Overview\r\n- upgraded all prefabs and scenes (except boundingbox example) to use bounds control\r\n- added prefab support for migrationhandler as prefabs can't store inline scriptables and need to be added to an existing or stored as separate asset.\r\n- adjusted how we're displaying scriptables in our ui util -> there's 5 different modes now on how we're displaying scriptables to the user - precise description of the modes can be found in the comments in the code.\r\n- added warning to migration window to inform users that they might loose data for objects that have prefab property overrides.\r\n- fixed wrong rotation calculation in rotation handles\r\n- fixed wrong usage of transform passed into proximity effect update\r\n- fixed wrong usage of transform for rotation calculations\r\n- fixed wrong return value of scale min / max in bounding box\r\n- adjusted some of the prefab values of cheese and slate -> cheese proximity effect and handle sizes values were set to crazy numbers / slate had 35 cm flatten axis display scale which wasn't noticeable in boundingbox because it was broken, but now works properly, so reset the number to 0 for now.\r\n- moved deprecated warning + button helper function into migrationtool / changed to generic and added to bounding box inspector\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7358 \r\n\r\n## Screenshots\r\n\r\n### Scriptables in Inspector Visualization Cases\r\n\r\n**GameObject is part of a Prefab and no scriptable has been linked**\r\n![image](https://user-images.githubusercontent.com/36998103/92626329-ab9ca080-f2c1-11ea-8c2b-7e149311d99d.png)\r\n\r\n**GameObject is part of a Prefab and scriptable is nested as a serialized object inside the prefab asset file**\r\n![image](https://user-images.githubusercontent.com/36998103/92626428-cd962300-f2c1-11ea-8023-06b430e0ca88.png)\r\n\r\n**GameObject is an instance of a prefab and scriptable is part of the prefab file**\r\n![image](https://user-images.githubusercontent.com/36998103/92626196-80b24c80-f2c1-11ea-806f-a17231305b0b.png)\r\n\r\n**GameObject is an instance in a scene and scriptable is a local nested instance which is part of the scene file**\r\n![image](https://user-images.githubusercontent.com/36998103/92626665-206fda80-f2c2-11ea-817b-dd061e42279e.png)\r\n\r\n**Scriptable property is referring to an external scriptable asset file.**\r\n![image](https://user-images.githubusercontent.com/36998103/92626833-62991c00-f2c2-11ea-8838-780504e4b8d6.png)\r\n\r\n### Deprecated Warning in Bounding Box\r\n![image](https://user-images.githubusercontent.com/36998103/92630051-1dc3b400-f2c7-11ea-8ab6-2bb1b1b3a87e.png)\r\n\r\n### Migration Window Warning\r\n![image](https://user-images.githubusercontent.com/36998103/92626041-4f398100-f2c1-11ea-9e06-30e3412b0a95.png)\r\n\r\n## Verification\r\n\r\nThis change updates all prefabs and scenes using BoundingBox to BoundsControl. To verify have a look at the updated prefabs and scenes in the following lists.\r\n\r\n**Scene list** (scenes that are either using those prefabs or having their own bounding boxes in gameobject instances)\r\n\r\n- HandInteractionExamples\r\n- DisablePointersExample\r\n- PrimaryPointerExample\r\n- SolverExamples\r\n- HandCoachExamples\r\n- SlateExample (only uses slate / no overrides from prefab)\r\n- RiggedHandVisualizer\r\n- EyeTrackingDemo-03-Navigation\r\n\r\n**Prefabs**:\r\n\r\n- Cheese\r\n- Slate (BoundingBox inherited in SlateUGUI and SlateUGUIHololens2Buttons but doesn't have overrides there)\r\n\r\n"""
696842904,8504,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
696795421,8503,b'Updated description panel to support proper text wrapping in the title',"b""## Overview\r\nUpdated description panel to fix title text overlapping issue. #8502 \r\n- Removed the title text element in the SceneDescriptionPanelRev.prefab\r\n- Instead of using a separate title text element, now it uses TMP's `<size> and <b> tag` to create the title text. This makes the content text properly pushed down when there is a multi-line title.\r\n- Updated all example scene's description text to include this new title text markup. (No content changes in the scenes)\r\n\r\n## Changes\r\n- Fixes: #8502 \r\n\r\n## Screenshots\r\n![2020-09-09 20_22_53-Unity 2018 4 26f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/92601561-f3ceb980-f2e7-11ea-99e8-c22c35eb67c1.png)\r\n\r\nNow uses markup to create bold and large title text instead of using a separate TMP object.\r\n![2020-09-09 20_33_18-Unity 2018 4 26f1 Personal -  PREVIEW PACKAGES IN USE  - ClippingExamples unity ](https://user-images.githubusercontent.com/13754172/92601571-f7624080-f2e7-11ea-9fba-8969a3292b11.png)\r\n![2020-09-09 20_24_28-Unity 2018 4 26f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionGestureE](https://user-images.githubusercontent.com/13754172/92601583-faf5c780-f2e7-11ea-9889-b664967330bd.png)\r\n\r\n"""
696279041,8500,b'Add Input Playback Service to RecordArticulatedHandPoseInputSystemProfile',b'## Overview\r\nThis PR addresses the issue of Input Playback Service missing from RecordArticulatedHandPoseInputSystemProfile causing record and playback errors in the HandInteractionRecordArticulatedHandPose scene.\r\n\r\n## Changes\r\n- Fixes: #8499.'
696259897,8498,b'Move UWPCapabilityUtility to editor assembly',"b""## Overview\r\n\r\nPart of https://github.com/microsoft/MixedRealityToolkit-Unity/issues/3952\r\n\r\nThis script is only usable in the editor, so it's being moved into an editor-only assembly.\r\nAlso allows us to remove the `#if UNITY_EDITOR` wrapping the entire file."""
696256926,8497,b'Docs update 2.4.1',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
696255617,8496,b'Docs update 2.4.0',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
696254212,8495,b'Docs update 2.3.0',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
696251517,8494,b'Docs update 2.2.1',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
696250737,8493,b'Docs update 2.2.0',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
696248668,8492,b'Docs update 2.1.0',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
696246889,8491,b'Docs update 2.0.1',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
696243281,8490,b'Docs update 2.0.0',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
696161728,8488,b'Packaging changes to address 8176 and glTF example file copy / material import errors',"b'This change updates the file layout in the foundation, extensions and examples packages to resolve:\r\n\r\n- #8176 \r\n- Observed failure to copy files to StreamingAssets folder (glTF demo)\r\n- Error when attempting to import material in the included avocado model'"
696109315,8487,b'Scroll graduation branch rebased onto stabilization',b'## Overview\r\n\r\nThis PR rebases the work from [graduation/scroll_view](https://github.com/microsoft/MixedRealityToolkit-Unity/tree/graduation/scroll_view) onto 2.5 stabilization using a clean branch not based on [event_propagation](https://github.com/microsoft/MixedRealityToolkit-Unity/tree/feature/event_propagation) branch.\r\n\r\nAll commits were previously approved with one exception:\r\n\r\n 1. Test class was adjusted to adapt to latest stabilization changes found on BasePlaymodeTests.Setup()\r\n\r\n\r\n\r\n_**Added comments on the bottom of the files with reference to respective PR approval**_ \r\n\r\nExample scenes and prefabs changes approved on #8380  but they will be substituted by new example scene from #8453. \r\n'
696038099,8486,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
696014302,8485,b'Cherry-pick #8451',b'This change cherry-picks the camera height change in #8451 into the 2.5.0_stabilization branch.'
695939320,8484,b'Add recent authors to the documentation page',b'This change updates the list of mrtk contributors'
693806851,8478,b'Change the input simulation mode in InputActions.MixedRealityInputSimulationProfile',b'## Overview\r\n\r\nThis PR changes the input simulation mode of InputActions.MixedRealityInputSimulationProfile.asset from articulated hand to gesture hand to match the description shown in the InputActionsExample scene.\r\n\r\n## Changes\r\n- Fixes: #8476.'
692541111,8473,b'Fix additional example folder cross-talk',"b'This change moves more assets (textures, materials, models, etc) to allow individual sample projects to be individually imported when using UPM.\r\n\r\nThis change is on the large side as the prudent approach seemed to be to move in bulk since many of the moved files feel very re-usable in customer projects.'"
692508029,8471,b'Branch synchronization: prerelease/2.5.0_stabilization --> mrtk_development',b'This is a pull request initiated by an automated process to keep prerelease/2.5.0_stabilization and mrtk_development in sync'
692334716,8470,b'Properly switch input simulation mode in tests',"b'## Overview\r\nThis PR removes the use of PushControllerSimulationProfile() and PopControllerSimulationProfile() when trying to switch input simulation mode in tests (e.g. from articulated hand to gesture hand). Those two functions manipulate the profile of input simulation service, which does not have any impact on simulation mode after the initialization of the service. In this PR the current simulation mode is cached before switching and will be restored after the test is finished. This technique has been used in some other existing tests.\r\n\r\n## Changes\r\n- Fixes: #8468.'"
692302163,8469,b'Remove link.xml from build targets since it is now generated',"b'## Overview\r\nWhen the checked-in link.xml was removed, this build target that copies link.xml from the nuget package into the Unity project was not removed. It is no longer necessary, as the link.xml file is generated inside the Unity project. This unblocks Remote Assist from ingesting new nuget packages.'"
692144561,8467,b'Fixed Typo in README_Solver.md',"b'## Overview\r\nFixed typo in first sentence of README_Solver.md\r\n\r\n## Changes\r\n- Fixes: ""predefine"" -> ""predefined""'"
691615895,8464,b'Fix scaling issue of bounding box',"b'## Overview\r\nThis PR addresses two related issues:\r\n1. The bounding box script does not allow proper scaling when the its target is set to a child of the GameObject the script is attached to. This issue is resolved by making sure target.transform instead of transform is used when initializing scale constraint. A test is added to help verify the fix.\r\n2. The existing test utility seems to work (tests pass), but the way it is working is unintended. The change of bounding box\'s scale in InstantiateSceneAndDefaultBbox() happens after the instantiation of bounding box and the assignment of its target, which causes scale constraint never getting the correct ""initial scale"" information. The location of scale change is now moved so that scale constraint now gets the correct value. Also, the ""initial scale"" information is now updated after switching the target of bounding box.\r\n\r\n## Changes\r\n- Fixes: #8458.'"
691563004,8461,b'Update layout of Examples package to facilitate importing individual samples via UPM',"b'During early testing of UPM packages, it was discovered that many demo and experimental samples access files from others. This is ""ok"" when all samples are imported as a unit, but not when customers wish to import only a few.\r\n\r\nThe solution was to create a Common folder containing scripts, etc. that are shared between samples, but do not rise to the level of a ""standard asset"".\r\n\r\nFixes: #8444'"
691434810,8456,b'Feature/dmc update',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
691306530,8455,b'Add VR Offset Modification Settings to Leap Configuration Profile',"b'## Overview\r\n\r\nAdds Leap Controller VR offset modes to the Leap Profile.\r\n\r\n| LeapXRServiceProvider| LeapMotionDeviceManagerProfile |\r\n|---|---|\r\n|  ![LeapXRServiceProviderSettings](https://user-images.githubusercontent.com/53493796/92019031-d3609700-ed0a-11ea-807e-d35a60787dc3.gif) |   ![LeapVROffsetSettings](https://user-images.githubusercontent.com/53493796/92019100-ebd0b180-ed0a-11ea-84ff-7601b1757572.gif)| \r\n\r\nAlso increased the default depth value of the hands while the Leap Controller is in the desk orientation. \r\n\r\n## Changes\r\n- Fixes: #8415, #8284, #8355  \r\n\r\n## To Do\r\n\r\n- [x]  Update Leap Documentation '"
691151112,8454,b'Prerelease/2.5.0 stabilization -> mrtk_dev',b'## Overview\r\n\r\nBrings over the internal mrtk_ci machine pool change.\r\n\r\nPrerelease/2.5.0 stabilization -> mrtk_dev'
691138671,8453,b'Scrolling Object Collection - Adding new example scene',b'## Overview\r\nAdding a draft example scene for Scrolling Object Collection.\r\n\r\nAdding @cre8ivepark to the branch for further polish\r\n\r\n**App :** [HL2 Build](https://microsoft-my.sharepoint.com/:u:/p/vaolivaa/EfzcMNq-7OBDvzKO4vTSqKYBE1cFvCrdEB3CoCdqQ0zsqw?e=WzR9q5)\r\n\r\n![MRTK_ScrollingObjectCollection2](https://user-images.githubusercontent.com/13754172/99600285-77bbc500-2a40-11eb-9e39-ce78232eb49c.gif)\r\n\r\n\r\n![scrolling_graduation](https://user-images.githubusercontent.com/16922045/92004766-85638780-ed3a-11ea-9162-1f37df73a03f.gif)\r\n'
690949652,8451,b'Support for camera offset to the input simulation',"b'Allows the camera to be at eye-position above the floor, like VR\r\n\r\n## Overview\r\n\r\nAdds a new setting `cameraOriginOffset` to `MixedRealityInputSimulationProfile`, which specifies the amount to offset the camera when first turning on simulated input.\r\n\r\nUltimately this allows the camera to start 1.7m up, giving a similar feel to VR tracking the distance from the floor.\r\n\r\nSee the sample scene at `Assets/MRTK/Examples/Experimental/CameraOffset/CameraOffsetTest.unity`\r\n\r\n## Changes\r\n- Addresses some of #7913\r\n\r\n## Verification\r\n\r\nSome sharp edges\r\n* This only affects simulated inputs - MR and VR will still have different interpretations of the camera origin\r\n* This is applied at _play_ time - the camera reset code in `MixedRealityToolkit.EnsureMixedRealityRequirements` will still be applied at edit time, which may be confusing with editor previews. I was too scared to change this, but I feel the code in `MixedRealityToolkit.EnsureMixedRealityRequirements` should be applied on initialising of WMR configurations, not here.\r\n\r\nThis is my first PR on MRTK, so be gentle...'"
690669021,8448,b'Fix test utilities access in 2019.4 when imported via UPM',"b'During UPM pre-release testing, it was found that there was an issue with accessing the MRTK test utilities assembly when it was imported as a UPM package. When the files were copied into the Assets folder, or imported via a .unitypackage file, it succeeded.\r\n\r\nAfter quite a bit of investigation, it appears that there is behavior where an assembly marked as a test assembly, is not auto-added and does not appear able to be used if it is in the Library/PackageCache.\r\n\r\nThis change removes the dependency on NUnit and marks the assembly as NOT being a test asm. As part of this change, existing NUnit assertions have been replaced with UnityEngine assertions.\r\n\r\nThis was validated by spot-running some play mode tests as well as verifying that the assembly was referenceable via a custom script.\r\n\r\nSpecial thanks to @keveleigh for helping to figure this one out.\r\n\r\nFixes #8436 '"
690653465,8447,b'Fix input axis mappings in 2.5',"b""## Overview\r\n\r\nThe change in #8315 inadvertantly moved it to an area that only runs when the input tab in the configuration profile is visible. Reverted this code to run when the MRTK initializes instead.\r\n\r\nA larger PR to add this to the configurator and fix the core -> editor references will be opened on the dev branch, but that's a bit too much for the stabilization branch.\r\n\r\nAlso updated some code style capitalization of a private field and added an optional bool to the input axis setter method for future use."""
690516502,8445,b'Allow manipulation with the GazePointer for both ManipulationHandler and ObjectManipulator',"b""## Overview\r\n\r\nRemote Assist has a voice-based manipulation system for moving slates using a voice command and gaze pointer updates. This was blocked from working due to exceptions thrown by the ManipulationHandler (which didn't check the Controller of the pointer it was manipulated with to see in TryGetGripRotation). For the GazePointer, the controller is null.\r\n\r\nThis change updates both ManipulationHandler and ObjectManipulator to check these values for null. I've also added two playmode tests that emulate the logic that exists in Remote Assist today to prevent future regressions."""
690510026,8443,b'Interactive Element Skeleton ',"b""## Overview\r\n\r\nInteractive Element is the next generation of MRTK's Interactable. This component serves as an easy customizable entry point to MRTK's Input System events. Interactive Element supports the addition of already defined MRTK input states and user defined states.   \r\n\r\nThe work in this PR has only added support for the Focus state and the creation of custom states.\r\n\r\nConcepts included in the Interactive Element structure:\r\n- Base Interactive Element\r\n- Interactive Element (a placeholder class)\r\n- State Manager\r\n- Event Receiver Manager\r\n- Custom inspectors for Base Interactive Element \r\n\r\n![AddCoreState](https://user-images.githubusercontent.com/53493796/97749683-b6e39f80-1aac-11eb-90a4-e7a501521724.gif)\r\n\r\n## Interactable and Interactive Element + State Visualizer\r\nThe following figure illustrates how concepts in Interactable are represented in the Interactive Element + State Visualizer structure:\r\n\r\n![image](https://user-images.githubusercontent.com/53493796/97749452-55233580-1aac-11eb-8335-ea4e1df14a2f.png)\r\n\r\n\r\n## How to Use\r\nSee the documentation for examples on how to add an Interaction State and create a new state both in-editor and via script.\r\n\r\n[Interactive Element Documentation](https://github.com/microsoft/MixedRealityToolkit-Unity/blob/9c662d4b97598a8e1bd1916e78453b41021cee99/Documentation/README_InteractiveElement.md)\r\n\r\n## To do \r\n\r\n- [x] Add how to use section to PR description \r\n- [x] Add diagrams of the structure\r\n\r\n\r\n## To do list beyond the scope of this PR\r\n#8883\r\n"""
690480553,8442,b'Update private static readonly capitalization and add some readonly modifiers where reasonable',"b""## Overview\r\n\r\nIt's that time in the release cycle where I try to catch up on all my stray branches and random changes I've made to make sure everything gets into the release.\r\n\r\n**This one's going into mrtk_dev, not stabilization.**\r\n\r\nUpdates some `static readonly` and `const` capitalization to match [our coding guidelines](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/CodingGuidelines.html#naming-conventions). Also converts some `static readonly` private fields to `const` where possible and adds some `readonly` modifiers to private fields that are treated that way.\r\n\r\n**All changes are to private fields, so there isn't a worry of a breaking change.**"""
690469690,8441,b'Update the prefab spawner to have an option that actually honors vanishDelay',"b""Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7467\r\n\r\nAs I was looking at issues that were set to the 2.5 milestone, I noticed this one which seemed like a fun break from other work. There's a few things to note here:\r\n\r\n1. vanishDelay is not used in the code prior to this, because the default case never ran.\r\n2. I couldn't just update the VanishOnFocusExit to use vanishDelay, because other consumers may already be dependent on the immediate vanish behavior.\r\n3. So I ended up adding another option (that actually honors vanishDelay), so that people can opt into this correct behavior while not breaking existing users.\r\n4. Opted not to write a test for this specific case because it involves timers, and I don't want to add sleeps to our tests without having some system of parallel-zing them first"""
690342727,8439,b'Remove more WaitingForSceneObserverAccess',b'## Overview\r\nRemove the WaitingForSceneObserverAccess bool from TestSpatialAwarenessDataProvider.cs and restore SpatialObjectMeshObserver to the mrtk_dev version.'
690339040,8438,b'Update internal pool from Analog On-Prem to N-1',"b""## Overview\r\n\r\nThis should be temporary, as we're figuring out why the latest images don't work for us.\r\n\r\nDON'T MERGE until the pool is up and running."""
690318625,8437,b'Remove WaitingForSceneObserverAccess from BaseSpatialObserver',b'## Overview\r\nRemove the WaitingForSceneObserverAccess bool from BaseSpatialObserver and related files. References are replaced with the IsRunning flag.'
690281026,8434,"b'Revert ""Initial workflow for syncing stabilization and development""'","b""Reverts microsoft/MixedRealityToolkit-Unity#8432\r\n\r\nI was hoping that since this change got checked in, we'd be able to manually trigger the workflow, but doing so actually isn't possible unless you change some of the configuration:\r\n\r\nhttps://docs.github.com/en/actions/reference/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token\r\n\r\n(And then also use a different workflow triggering mechanism).\r\n\r\nI'm finding these github actions to be a little harder to develop for compared to Azure DevOps (i.e. ability to iterate w/o YAML/on other branches). Reverting this to bring the functionality into some other azure devops pipeline instead."""
690257511,8432,b'Initial workflow for syncing stabilization and development',"b""During the stabilization process, we have to periodically (usually daily) create PRs to merge the latest prerelease/*stabilization branch into mrtk_development, to ensure that our mainline doesn't get out of sync with the 'true latest' (i.e. more people are working out of stabilization than mrtk_development during the earlier phases of stabilization).\r\n\r\nThis is somewhat onerous, so this change sets up a github actions workflow to automate this process every day (i.e. every morning we'll have a PR if there are changes between stabilization and development)"""
690254238,8430,b'Scroll View Graduation - Part 6 - Reverting propagation',"b'## Overview\r\nThis PR is part of the Scroll graduation and addresses the following issues:\r\n\r\n**Revert input event subscription to global.** In order to get the graduation into MRTK 2.5 without the latest changes on the Event Propagation branch, we are reverting the scroll event handlers to globally subscribe to pointer and touch events. \r\n\r\n**Enabling mask disabled.** While upgrading the demo scene it became important to have this feature to make the process of editing and layouting of scroll content easier. \r\n\r\n**Inspector and Tests adjusted to the changes.**\r\n\r\n**Example Scripts.** Added a pagination example of how to use the scroll pagination methods from unity events in the inspector. Used for demo scene pagination buttons.\r\n\r\n**Further reformats.** Some fields / methods were renamed or moved moved in the class.\r\n\r\n## Changes\r\n- Fixes: #8431  \r\n- Fixes: #8433 \r\n\r\n\r\n## Verification\r\nDemo scene coming in next PR'"
689823586,8428,b'Feature/step slider',"b""## Overview\r\nFixes: #4140 \r\n\r\nA slider that can have number of snap points specified in the inspector.\r\nOriginal: https://gfycat.com/impolitefabulousauk\r\n\r\nStepSlider: https://gfycat.com/happythatcow\r\nI'm using 7 snap points on the left most slider, 10 on the middle and only 1 on the right most.\r\n\r\n\r\n## Changes\r\n- I added a StepSlider.cs that extends on PinchSlider.cs. To create the requested functionality I needed to change the private members to protected.\r\n- All other changes were made on separately created prefabs and scenes.\r\n\r\n\r\n## Verification\r\nI tested this on the device as well as the emulator. Also tested two separate builds on Unity 2019.3.9f1 and 2019.4.7f1.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
689800372,8427,b'Prerelease/2.5.0 stabilization -> mrtk_dev',b'## Overview\r\n\r\nPrerelease/2.5.0 stabilization -> mrtk_dev'
689798950,8426,b'Add header to SimulatedMotionControllerButtonState.cs',b'## Overview\r\nAdd the copyright header to SimulatedMotionControllerButtonState.cs'
689619112,8425,b'Update author name to align with other UPM packages',"b""## Overview\r\n\r\nWe're using Microsoft Corporation, while other packages are using Microsoft. To align these (since Unity uses them to group packages by source), we're updating our packages to just be Microsoft."""
689391074,8424,b'Improving clipping primitive performance and deleting instanced mater\xe2\x80\xa6',b'## Overview\r\nDuring ScrollObjectCollection graduation the following issues were identified when adding and removing objects to the scroll clipping primitive:\r\n\r\nMaterialInstance not destroying instanced materials if renderer object is not active.\r\nClippingPrimitive is slow when the number of scrolling object increases. The profiler points to spikes  when applying property drawers.\r\n\r\n## Changes\r\nMaking sure the renderer material is reverted to the default material on MaterialInstance.cs if the object is inactive without waiting for OnDestroy to be called. \r\nUpdating property drawers only if clipping primitive object transform has changed.\r\n\r\n- Fixes: #8423 \r\n- Fixes #6270'
689353912,8422,b'Add the prerelease branch to the mrtk docs dropdown',"b""As part of getting ready for 2.5 release, we're updating the dropdown menu for docs so that we can see the generated docs (and also to allow others to see a preview of what we're going to be releasing)."""
689349824,8421,b'Remove a stale script for updating versions',"b'This script existed prior to this PR: https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7986, which automated much of the process of updating version numbers across the various files in our codebase.\r\n\r\nThis script used to exist to do a grep/replace, but now the vast majority of that version metadata is filled it an CI time, which now avoids having to have a script like this to do work.'"
689341348,8420,b'Update dev branch mrtk version to the next release version.',"b""Now that we've created a 2.5 stabilization branch, we're updating the version associated with the mainline dev branch to the next version (2.6). Note that this change will affect the following release (i.e. not the upcoming, but the one after that).\r\n\r\nDoing this early on so that it's one less thing for us to think about in the future."""
688635830,8416,b'Added multiplication operator for MixedRealityPose',"b'## Overview\r\n- Added multiplication operator for MixedRealityPose, for convenient pose operations.\r\n\r\n'"
688415608,8414,b'Add a missing SU flag check',b'## Overview\r\nThis PR adds a missing SCENE_UNDERSTANDING_PRESENT flag check to ensure successful compilation when scene understanding is not present.'
688380399,8413,b'Hack to stop guid from breaking CI',b'## Overview\r\nGuid issue due to having Unity 2019+ code compile on Unity 2018 versions\r\n'
688299187,8412,"b'Revert ""Update UnityProjectInfo to avoid the build break""'",b'Reverts microsoft/MixedRealityToolkit-Unity#8384\r\n\r\nThis was the wrong way of fixing things (see the right way here: \r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/8403)'
688289740,8411,b'Add bounds control controller simulation tests',b'## Overview\r\nAdd controller simulation tests to bounds control tests as the feature is no longer experimental. Also add some tests to InteractableEvent.\r\n\r\n## Changes\r\n- Follows #8401.'
688226075,8410,b'Remove stale meta file',"b""CI is currently broken on the code validation step because there's a stale meta file (i.e. the folder got removed).\r\n\r\n"""
687710998,8407,b'Fixes to the Oculus Quest prefabs for CI',"b'## Overview\r\nFields on the prefabs were hidden due to OCULUSINTEGRATION_PRESENT flags, which probably broke CI'"
687619766,8406,b'Fix object mesh observer not auto finding the profile',"b'With the move of SpatialObjectMeshObserver from the Providers to the Core/Providers folder, it failed to auto populate the default profile on selection.\r\n\r\nThis change fixes the data provider attribute values.'"
687599780,8404,b'Build Call CI (updated version of 8376)',"b'## Overview\r\nThis is the same code as the PR #8376 but it is using the buildcall feature branch instead of my fork. This makes it possible to test against the pipeline. \r\n\r\n## Changes\r\n\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
687594380,8403,b'Fixes to the Oculus Quest asmdefs for CI',"b'## Overview\r\n\r\nRemoves Oculus.VR references from the asmdefs so that the CI build would work. When the Oculus Integration package is used, the user can use \r\n\r\nMixed Reality Toolkit > Utilities > Oculus > Integrate Oculus Integration Unity Modules\r\n\r\nin editor to add the references back in.\r\n'"
687548012,8402,b'Scene understanding: re-create default profile and some minor code changes in the inspector and attrib usage',"b'This change continues the feature branch work for scene understanding.\r\n\r\nThis one re-creates the default profile and specifies materials that are contained within the standard assets package, instead of examples assets.\r\n\r\nOther included changes:\r\n\r\n* Minor rearranging of some variables in the inspector\r\n* Remove unneeded comments\r\n* Mark the data provider as _requiring_ a profile'"
687319679,8401,b'Moved bounds control out of experimental',b'## Overview\r\n- moved files out of experimental\r\n- removed experimental part of namespaces\r\n\r\n_Note: example scene migration in separate PR_\r\n\r\n## Changes\r\n- part of #7358 \r\n\r\n'
686876681,8399,b'Add some comments to WindowsSceneUnderstandingObserver',b'## Overview\r\nAdd comments to WindowsSceneUnderstandingObserver as part of SU feature work. Also cleaned up a little.'
686843546,8398,b'Improve spatial mesh material handling - fix 8394 and 8396',"b'This change improves how materials are handled in the spatial mesh observers.\r\n\r\nThe first change (fixes #8394) determines the material and always applies it to the renderer, even if the display option in use is None.\r\n\r\nThe second change (fixes #8396), determines (earlier than in previous releases) whether or not the mesh event will be an add or an update. If update, the material for the mesh being replaced is applied to the new mesh.\r\n\r\nCombining the two fixes enables developers who customize their spatial mesh materials to have the changes persist through mesh updates and toggles between Visible and None display options without requiring the application to continually reset the material.\r\n\r\nThis change does _not_ address #8397.'"
686511228,8393,b'Add UPM to release notes',b'This change adds a release note re: UPM package availability. This was missed in the earlier UPM series of PRs.'
686273552,8391,b'Adding Follow Solver Example scene',b'## Overview\r\nFollow Solver was added back in January but only scripts were added. \r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/6981\r\nAdding an example scene with a near menu example that demonstrates the behavior. Updated default values in the Follow.cs to match the shell behavior.\r\n\r\n## Changes\r\n- Added FollowSolverExample.unity scene (still under Experimental folder)\r\n- Updated default values in Follow.cs\r\n- Tested on HoloLens 2 device\r\n\r\n![2020-08-26 20_51_24-MRTK-Public - FollowSolverExample - Universal Windows Platform - Unity 2019 3 13](https://user-images.githubusercontent.com/13754172/91302387-610b2680-e7e1-11ea-80f9-6cb97bee9279.png)\r\n![MRTK_FollowSolver](https://user-images.githubusercontent.com/13754172/91302612-b6473800-e7e1-11ea-9a06-e66bc7b91c2c.gif)\r\n\r\n\r\n'
686008719,8389,b'fix appbar custom button visibility',"b'## Overview\r\nIf a custom button is added to Appbar prefab, in hidden or manipulation state the button is shown\r\n\r\n## Changes\r\nRemove check for custom button in UpdateButton, so the logic in the GetButtonVisible method can be executed\r\n\r\n\r\n## How to test\r\nCopy and paste a button in AppBar prefab and change type to custom, the button is always visible also when hide or manipulate button is checked\r\n'"
685904371,8388,b'Scene understanding: feature branch cleanup pass 2',"b'This change moves some files into more appropriate locations, simplifies namespaces and sets the SCENEUNDERSTANDING_PRESENT flag if the dll has been imported.\r\n'"
685902820,8387,b'Replace InitOnLoad with MRTK > Utils > WMR > Check Config',b'This change continues the work started by @wiwei to replace InitOnLoad classes with discrete menu options.\r\n\r\nThe new Mixed Reality Toolkit > Utilities > Windows Mixed Reality > Check Configuration menu item checks to see if the Dot Net WinRT NuGet package has been imported and appropriately sets the DOTNETWINRT_PRESENT flag.\r\n\r\nPart of #8188'
685902511,8386,b'Added quest articulated hand teleport pointer functionality and associated audio',b'## Overview\r\nAdded remaining MRTK-Quest articulated hand teleporter pointer functionality. Video attached.\r\n\r\nhttps://streamable.com/dmygxj\r\n\r\nNew Teleport:\r\nhttps://streamable.com/8h33rq\r\n\r\nNow with moooreeee polish:\r\nhttps://streamable.com/ta4bhv'
685738979,8385,b'Allow the use of the eyetracking component on nested gameobjects',"b'## Overview\r\nAllow the user to define a box collider on the parent object of the object referencing the eyetracking target script and still have it recognized as a valid ""lookateyetarget""\r\n\r\n## Additional Notes\r\nI noticed the updatetesticons utility method is currently broken so I fixed that as well.\r\n\r\n\r\n\r\n'"
685690602,8384,b'Update UnityProjectInfo to avoid the build break',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8259/files led to a CI pipeline break in the msbuildforunity project generation step - in particular it looks like the system has some indigestion when dealing with new Oculus.VR.* packages that we've added dependencies on in a few cases.\r\n\r\nSince we've turned down the public NuGet updates in favor of upcoming UPM work for 2.5, I've made a tweak to the project generation step to ignore any asmdefs that we have that reference Oculus.VR packages (which should unblock the build)"""
685661028,8383,b'Remove an unneeded object from DockExample prefab',"b""The DocExample's Model_Bucky had a random CINEMA_4D_Editor object which wasn't necesary.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/8076"""
685654332,8382,b'Update the DockPosition objects to have a BoxCollider',"b""The DockExample has a few DockPosition objects that don't have a BoxCollider.\r\n\r\nThis is weird, because DockPosition.cs requires some type of collider in order to work - i.e. the example is currently set up in an impossible way given the current code. I'm guessing this happened due to how the work was staged (i.e. I'm guessing the example scene was worked on to prove things out, and the RequireComponent was added after)\r\n\r\nBasically this makes our example scene align to how our current code actually works\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/8061"""
685633175,8381,b'Added support for elastics in bounds control',"b""## Overview\r\n\r\n- added elastics manager to bounds control \r\n- removed duplicated code for manipulation end in bounds control\r\n- extended elastics manager to have the option to filter for one specific transform type when applying to target transform\r\n- moved bounds control inspector so it can access utility method from elastics system\r\n\r\n_Note that elastics are still an experimental feature - they are flagged as experimental in the inspector and don't have integration tests for bounds control or object manipulator yet._\r\n\r\n**Move**\r\n![elastics_bc_move](https://user-images.githubusercontent.com/36998103/91202665-0e0a7400-e6fa-11ea-98a7-7d7f10cdce4a.gif)\r\n\r\n\r\n**Rotate**\r\n![elastics_bc_rotate](https://user-images.githubusercontent.com/36998103/91202681-12cf2800-e6fa-11ea-9e3a-f30f70aa0909.gif)\r\n\r\n\r\n**Scale**\r\n![elastics_bc_scale](https://user-images.githubusercontent.com/36998103/91202704-1793dc00-e6fa-11ea-9669-90cb741f0554.gif)\r\n\r\n"""
685632383,8380,b'Scroll Graduation - Part 5 - Removing layouting features ',"b'## Overview\r\nThis PR is part of scroll graduation and makes the following changes:\r\n\r\n**1. Removed layouting features (object collection) from scroll view**\r\n- BaseObjectCollection layouting features were removed from the scroll. The aim is to separate concerns (scroll and layouting) and let the user  add scrolling content more freely, following some of the behavior of the Unity built in 2D scroll view, where any content can be added to the scroll container object and masking box boundaries can be adjusted.\r\n\r\n- For pagination purposes, it is still possible to define and configure a virtual grid of cells and tiers of cells in order to snap the movement when scrolling content through side buttons.\r\n\r\n- Scroll view can be used in combination with a BaseObjectCollection in order to layout its content. A number of examples are provided on both demo scene and the ScrollViewTests on how to configure the scroll in combination with a collection or by manual layouting of content.\r\n\r\n**2. Scroll tests**\r\n- Added test for renderers and colliders clipping / disabling logic\r\n- Added test for scroll scroll content made of objects of different sizes and objects manually layouted without a collection\r\n- All tests were adapted to use the GridObjectCollection in combination with Scroll view when layouting is needed.\r\n\r\n**3. Adapted Demo Scene**\r\n- Added GridObjectCollection to layout the scroll buttons. New button prefabs were added  to make sure all materials in scroll demo scene were using the MRTK standard shader and work properly with the scroll clipping box.\r\n\r\n**4. Adapted Scroll inspector**\r\n- Revamped to adapt to scroll changes.\r\n\r\n## Changes\r\n- Fixes: #8229\r\n- Fixes #7451\r\n- Fixes #7453\r\n- Fixes #7454\r\n\r\n'"
685619871,8379,b'Remove the MRTK files InitializeOnLoad handler',"b""The MixedRealityToolkitFiles InitializeOnLoad handler runs on every play mode entry/script recompile, even if the MRTK object/features aren't being used in the current scene. This overhead is painful for folks who want to have MRTK in their project but not have to use it on every single scene.\r\n\r\nThis removes the InitializeOnLoad handler and makes things become lazy-inited (i.e. the first usage of any of the public APIs of this file will end up causing the initialization to happen only when the MRTK files functionality is needed. This will have the effect, however, of causing a micro-delay in any Unity editor UI that ends up invoking this, but that should be better than having the same delay happen on every single compile of non-MRTK code (which is what happens today)"""
685463475,8378,b'Example scenes polish - description panel & consistency',"b""## Overview\r\n**Example scenes polish pass for 2.5.0 release**\r\n- Updated description panel. (SceneDescriptionPanelRev.prefab) The new design provides a grabbable top bar which allows the user to adjust/move the entire scene. (based on customer feedback). It includes an 'Experimental' label. This updated description panel was used for Store version of MRTK Examples Hub.\r\n- Layout consistency \r\n- Some text improvement in the description and UI labels. (Hand menu prefabs)\r\n- Material/geometry update for consistency (JoystickPrefab.prefab)\r\n- Some scenes renamed for consistency. (e.g. DwellScene.unity -> DwellExamples.unity)\r\n- Added updated MRTK Examples Hub related menu prefabs (used for Store submission)\r\n- No functional changes\r\n\r\n## Screenshots\r\n**Description panel Before & After**\r\n![2020-08-22 16_04_27-Unity 2018 4 26f1 Personal - HandInteractionExamples unity - MRTK-Public - PC, M](https://user-images.githubusercontent.com/13754172/91176143-cf39e580-e71c-11ea-9f1a-b3a2ffcefb51.png)\r\n\r\n**Example scenes**\r\n![2020-08-22 17_02_24-Unity 2018 4 26f1 Personal - MRTKExamplesHub unity - MRTK-Public - Universal Win](https://user-images.githubusercontent.com/13754172/91176364-2770e780-e71d-11ea-8d9c-e70739d991c7.png)\r\n![2020-08-22 16_12_57-Unity 2018 4 26f1 Personal - HandInteractionExamples unity - MRTK-Public - Unive](https://user-images.githubusercontent.com/13754172/91176375-2a6bd800-e71d-11ea-8b41-49744d0d547d.png)\r\n![2020-08-22 16_32_53-Unity 2018 4 26f1 Personal - NearMenuExamples unity - MRTK-Public - Universal Wi](https://user-images.githubusercontent.com/13754172/91176376-2b046e80-e71d-11ea-9abb-6617b08145e0.png)\r\n![2020-08-22 16_58_41-Unity 2018 4 26f1 Personal - HandMenuExamples unity - MRTK-Public - Universal Wi](https://user-images.githubusercontent.com/13754172/91176378-2b9d0500-e71d-11ea-92ce-4702c8d6a28f.png)\r\n![2020-08-22 17_00_49-Unity 2018 4 26f1 Personal - MRTKExamplesHub unity - MRTK-Public - Universal Win](https://user-images.githubusercontent.com/13754172/91176380-2b9d0500-e71d-11ea-9047-2c3e699d6db8.png)\r\n![2020-08-22 17_01_24-Unity 2018 4 26f1 Personal - MRTKExamplesHub unity - MRTK-Public - Universal Win](https://user-images.githubusercontent.com/13754172/91176382-2c359b80-e71d-11ea-81e3-5600cbd6efb4.png)\r\n![2020-08-22 17_01_34-Unity 2018 4 26f1 Personal - MRTKExamplesHub unity - MRTK-Public - Universal Win](https://user-images.githubusercontent.com/13754172/91176383-2cce3200-e71d-11ea-90da-a54bf800fb62.png)\r\n![2020-08-22 17_01_44-Unity 2018 4 26f1 Personal - MRTKExamplesHub unity - MRTK-Public - Universal Win](https://user-images.githubusercontent.com/13754172/91176385-2d66c880-e71d-11ea-8233-12ce8c001de9.png)\r\n![2020-08-26 00_23_47-Unity 2018 4 26f1 Personal -  PREVIEW PACKAGES IN USE  - SpeechInputExamples uni](https://user-images.githubusercontent.com/13754172/91193873-986eca00-e732-11ea-8ae2-996b6165ac64.png)\r\n\r\n\r\n**Experimental scenes**\r\n![2020-08-24 11_48_47-Unity 2018 4 26f1 Personal -  PREVIEW PACKAGES IN USE  - BoundsControlExamples u](https://user-images.githubusercontent.com/13754172/91176366-28a21480-e71d-11ea-9e80-7e219595de9c.png)\r\n![2020-08-24 11_49_57-Unity 2018 4 26f1 Personal -  PREVIEW PACKAGES IN USE  - ColorPickerExample unit](https://user-images.githubusercontent.com/13754172/91176367-293aab00-e71d-11ea-9e29-50b1e8a1676c.png)\r\n![2020-08-24 12_21_45-Unity 2018 4 26f1 Personal -  PREVIEW PACKAGES IN USE  - DockExample unity - MRT](https://user-images.githubusercontent.com/13754172/91176369-293aab00-e71d-11ea-9b05-c615914675cd.png)\r\n![2020-08-24 12_23_23-Unity 2018 4 26f1 Personal -  PREVIEW PACKAGES IN USE  - HandCoachExample unity ](https://user-images.githubusercontent.com/13754172/91176370-29d34180-e71d-11ea-9df5-a76f8a93ffde.png)\r\n![2020-08-24 20_34_16-Unity 2018 4 26f1 Personal -  PREVIEW PACKAGES IN USE  - HandPhysicsServiceExamp](https://user-images.githubusercontent.com/13754172/91176372-2a6bd800-e71d-11ea-82b8-0d4f4048596e.png)\r\n"""
685221460,8376,b'Initial Build Call CI',"b""## Overview\r\nThis is the Initial Build Call CI for building binaries and Unity projects for manual build call validation. The binaries and projects are built with both Unity 2018 LTS and Unity 2019 LTS.\r\n\r\n## Changes\r\nAdds the '.yml' for pipeline, template, task, and supporting the PowerShell script to the appropriate folders in the repo.\r\n\r\n\r\n## Verification\r\nI am concerned that 'pipelines\\templates\\buildcallsetup.yml' will not build correctly because of the mixed parameters in the ***- ${{ if contains(parameters.Binaries, 'all,common') }}:*** conditions for the scenes that are in the 'common' and 'all' parameters.\r\n\r\nI think that there might be another issue in 'pipelines\\templates\\tasks\\bcunitybuild.yml' with publishing the project files in the ***- task: PublishBuildArtifacts@1*** task."""
685055645,8374,b'Add more motion controller tests',"b'## Overview\r\nThis is the final PR of a series of four that adds motion controller simulation and test support to MRTK. This PR specifically focuses on adding more motion controller related tests based on the test infrastructure introduced earlier. Some bugs discovered when creating the tests are also fixed.\r\n\r\n## Changes\r\n- Continuation of #8313, #8296 and #8348.'"
685017816,8372,b'Make the ARFoundation InitializeOnLoad work be manually triggered',"b'This is a revert of a revert - basically the original PR hit an issue in CI related to build machine versions, and we recently updated some of dependencies on our build machines, so now this should be good to go.\r\n\r\nReverts #8292\r\n\r\nThis also accounts for the fact that LeapMotion was recently fixed up by @CDiaz-MS \r\n\r\nAlso yes I realize I made a spelling mistake on my branch name ardoundation.'"
684995362,8371,b'Cherry pick #8202 into releases/2.4.0 to rebuild the default docs location',"b""With #8202 we now have the ability to make the current release be the default documentation that's shown to readers. However in order to do this, we actually need to regenerate it running from release/2.4.0 (i.e. the branch that this is run on has to also have these changes).\r\n\r\nI could do some funkiness on the backend to work around this, but getting this into the right state and letting CI do its thing feels safer."""
684951605,8370,b'Scene understanding - cleaned up version (no bonus commits) of 8369',b'This is a fresh version of #8369 that removes the already merged commits that were confusing GitHub.'
684847577,8369,"b'Scene understanding- remove changes to existing observers, add initial guards and asmdef'","b""This change removes modifications that were made to the existing providers (weren't needed). \r\n\r\nIt also adds an initial set of guards (#if SCENE_UNDERSTANDING_PRESENT) to allow successful compilation when the required DLL is not present in the project.\r\n\r\nThe last change was to rework the folder structure for the observer and to create the asmdef.\r\n\r\nThis is the first of what is likely many small PRs into this feature branch before merging into mrtk_development"""
684020363,8359,b'Fixed a small typo in #8356',b'## Overview\r\nPR #8356 introduced a small typo. Project did not compile anymore. Mentioned in bug #8358\r\n\r\n## Changes\r\n- Fixes: \r\nFixed typo. Code now compiles again\r\n\r\n\r\n'
683908378,8357,b'Correct Oculus Touch mappings on OpenVR',"b'## Overview\r\n\r\nAccording to https://docs.unity3d.com/2019.4/Documentation/Manual/xr_input.html, our OpenVR mappings have been based on the Oculus runtime, not the OpenVR runtime, where confusingly X/A and Y/B are swapped which ones are primary vs secondary, and thus which axes they come across.\r\n\r\nButton One/Two to A/B mappings from the Oculus docs:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/90946623-5ddbf900-e3e3-11ea-8179-c2b478eecad7.png)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7506\r\n'"
683846704,8356,b'Minor tweaks to 8264 (physics material in spatial mesh)',"b'This change addresses some of the minor feedback that was mentioned in #8264. None of them impact functionality, more they are in the ""nit"" category.'"
683712989,8354,b'Add the Leap Motion hand controller to RaiseSourceLost ',"b'## Overview\r\n\r\nAdded the leap controller to RaiseSourceLost in the LeapMotionDeviceManager.\r\n\r\nBefore this change RaiseSourceLost only took the input source into account but not the specific leap controller.  Because the specific controller was not taken into account, a source lost on the leap hand was not registered.\r\n\r\nThis change fixes an issue where the hand menu did not get displayed in the correct location after a leap hand was taken out of tracking space and put back in. \r\n\r\n| Before the fix | After the fix|\r\n|---|---|\r\n| ![LeapOnSourceLostBefore](https://user-images.githubusercontent.com/53493796/90915656-c2bc3280-e394-11ea-94a1-f497a4e030bb.gif) | ![LeapOnSourceLostAfter](https://user-images.githubusercontent.com/53493796/90915700-d071b800-e394-11ea-9b15-17b12de60e07.gif)|  \r\n\r\n## Changes\r\n- Fixes: #8333 \r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
683693890,8353,"b""Moved elastics system into it's own component""","b""## Overview\r\n- Factored out elastics into it's own component ElasticsManager. \r\n- ElasticsManagerInspector provides static util function to integrate Elastics into existing inspectors - shows elastics as experimental.\r\n- Updated elastics demo scene to support new component\r\n\r\n### Inspector Elastics link for supporting components:\r\nNo elastics linked:\r\n![image](https://user-images.githubusercontent.com/36998103/91060832-53a83d80-e623-11ea-909a-3ac2949d9bc6.png)\r\n\r\nElastics created via Button\r\n![image](https://user-images.githubusercontent.com/36998103/91060881-6589e080-e623-11ea-93d7-1b5548d986be.png)\r\n\r\nElasticsManager highlighted via follow button\r\n![image](https://user-images.githubusercontent.com/36998103/91060942-7b97a100-e623-11ea-8aa0-5af7234efeb8.png)\r\n\r\n"""
683131555,8351,b'Made CI pipleine warning visible',"b'## Overview\r\nCI warning about new InitializeOnLoad markers were hidden, resulting in silent build failures. Fixing that here.'"
683127236,8350,b'Fix MRTKFiles tests',"b'## Overview\r\n\r\nSome of our existing MixedRealityToolkitFilesTests used `Asset.Equals` instead of an assert `Assert.AreEqual` when comparing, so no test comparison was run.\r\n\r\nAfter fixing this, one of the existing edge cases (`inputPath = @""c:\\projects\\AssetsViewer\\Assets\\materials\\test.mat"";`) started failing the test due to Assets existing in the path twice.\r\n\r\nInitially to fix this, I changed the MRTKFiles from checking `IndexOf` to `LastIndexOf`, but then I realized this would start failing if we were looking for something in the StandardAssets folder in an Assets folder (I added this as a test case).\r\n\r\nTo solve that, MRTKFiles now uses a lookup including the slashes on either side, so we can be sure we\'re indexing on a folder with the exact same name.'"
683124488,8349,b'Fix standard assets loading and fix controller mapping profile image loading',"b""## Overview\r\n\r\nWith the addition of the standalone Standard Assets package in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8232, the controller mapping images began failing to load. This is because they're currently still loaded via a file path, and the new StandardAssets folder didn't have a sentinel file.\r\n\r\nThis PR adds the sentinel file, updates MRTKFiles to allow loading from the new module, and updates the paths for the controller mapping images.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/90830471-93ef7f00-e2f6-11ea-9cad-6cb04c2529fa.png)\r\n\r\n## Changes\r\n- Fixes:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/90830197-1a579100-e2f6-11ea-9a73-8054e33c60e5.png)\r\n"""
683049399,8348,b'Add the support for motion controller in the test infrastructure',b'## Overview\r\nThis is the third PR of a series that will eventually add motion controller simulation and test support to MRTK. This PR specifically focuses on supporting motion controller in the test infrastructure. User can now create simulated motion controller in test cases just like hands. One test case is added to PressableButtonTests to demonstrate how to create test cases with motion controller. More test cases will be included in a subsequent PR to reduce the size of this one.\r\n\r\n## Changes\r\n- Continuation of #8313 and #8296.'
683015054,8347,"b""it's -> its in possessive usages""","b""## Overview\r\n\r\nIt was called out in holodevelopers that we have two typos in the message that prints out when a system is disabled (`it's` and the singular `feature`):\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/90811686-e2425500-e2d9-11ea-9d7a-05d0fb0bb5c7.png)\r\n\r\nI fixed that, and went through to fix any other [incorrect usages of it's instead of its](https://www.dictionary.com/e/its-vs-its/).\r\n\r\n## Changes\r\n- Fixes: https://holodevelopers.slack.com/archives/C2H4HT858/p1597917059000900\r\n"""
682895096,8346,b'Update new code checker to escape .',"b""## Overview\r\n\r\nThis new code checker didn't escape the `.`, so it was matching any character that preceded `GetTypes()`. We have a test called `TestTargetTypes`, which was triggering this code issue.\r\n\r\n## Changes\r\n- Fixes: https://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=13459&view=logs&j=ae5f814d-d003-5afd-2125-fa0189ea8658&t=12d627c1-3bb6-55bf-f915-b77e58828cea\r\n"""
682251770,8343,b'GetLoadableTypes strikes again',"b""Usage of Assembly.LoadTypes() has bitten us at least four times in the past:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pulls?q=is%3Apr+gettypes+is%3Aclosed+\r\n\r\nThis change removes the latest case that is problematic and also adds some code checkers so that we don't do this again, because this is the legit 5th time I've had to solve this problem.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/8331\r\n\r\n"""
682249486,8342,b'Enable publishing of upm packages in release pipelines',b'This change reads the registry path from the pipeline run and publishes the artifacts. This completes the UPM publishing work!'
682240414,8341,b'Update additional cases in StabilizationPlaneModifier for XR SDK',b'## Overview\r\n\r\nI missed two cases in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8294 that called into legacy APIs. This should be the final PR for 2020 compilation support.\r\n\r\n## Changes\r\n- Fixes: #8269 '
682224970,8340,b'Fix gaze when using an override',"b'## Overview\r\n\r\nCurrently, the gaze provider overwrites any override data by passing the default gaze transform into the stabilizer.\r\nThis change fulfills the original bug fix (https://github.com/microsoft/MixedRealityToolkit-Unity/pull/3627) by keeping the stabilizer working in local space based on the playspace.\r\n\r\n## Changes\r\n\r\n- Fixes: #8163 '"
682204582,8339,b'Add support for the Leap Motion Unity Modules version 4.5.1',b'## Overview\r\n\r\n- Adds support for [Leap Motion Unity Modules version 4.5.1](https://github.com/leapmotion/UnityModules/releases/tag/UM-4.5.1)\r\n- Removes support for the leap motion 4.4.0 core assets as they are over two years old\r\n- Updated the documentation to reflect the changes\r\n- Updated the example scene\r\n- Added helper method to the AssemblyDefinition class \r\n\r\n**Updated the Leap Integration Process:**\r\n\r\n- Added three menu items \r\n![image](https://user-images.githubusercontent.com/53493796/90692384-d72fec00-e229-11ea-9e8e-7babfbdca0b4.png)\r\n- Initialize on Load has been removed and the steps are now:\r\n  - Import Leap Modules into the project\r\n  - Select the **Connect Leap Motion Unity Modules** menu\r\n\r\n\r\n## Changes\r\n- Fixes: #8337\r\n\r\n\r\n'
682201882,8338,b'Fix typo',"b'## Overview\r\n\r\nFound this while looking into a canvas inspector bug. Tiny PR, but \xc2\xaf\\_(\xe3\x83\x84)_/\xc2\xaf'"
682154913,8336,b'Add note about tools that save to Library',"b'## Overview\r\n\r\nAdds a note to double check your Library folder for unrecoverable data (for example, Unity Collab saves data there) before deleting the folder.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7991\r\n'"
682062375,8335,b'Turn down the service facade feature',"b'## Overview\r\nThe service facade feature was originally added to make configuration of MRTK profiles easier (by separating each service\'s configuration onto its own game object). It was also designed to make things look more Unity-like (i.e. having game objects that represent actual \'things\').\r\n\r\nThere have been a number of bugs here where we have duplicate game objects, along with the performance overhead (in-editor only) associated with keeping these ""fake"" objects in sync with the real MRTK virtual hierarchy. In the long run we should avoid creating duplicate objects and try to maintain multiple sources of truth, and should be pushing for the standalone services work that @davidkline-ms did.\r\n\r\nThis change turns off the feature by default, but leaves in code that will do cleanup of any existing facades in opened scenes. We can then delete the rest of the code in a future release.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6907 https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8247'"
682002088,8334,b'Update authors with recent 2.5.0 contributors',b'This change adds the github names for recent contibutors.'
681804061,8332,b'Unity 2018 LTS version updates',b'## Overview\r\nI have updated the Unity 2018 LTS version to the latest 2018.4.26f1 in examples in the documents and the two test scripts in Scripts/test/run_*.ps1. I also updated the current release in the roadmap.md to v2.4.0 from v2.3.0.\r\n\r\n## Changes\r\n- Fixes: Updated version numbers in documents and two CI test scripts.\r\n\r\n\r\n'
681489731,8330,b'HoloLens 2 Button material update',"b""## Overview\r\nUpdated HoloLens 2 Button's front cage material to transparent to remove black color in MRC. \r\n(we already did this update for Bounding Box while ago)\r\n\r\nRemoves black color on the button's front box in Mixed Reality Capture:\r\n![2020-08-19 10_49_34-Photos](https://user-images.githubusercontent.com/13754172/90583270-b4daa600-e20a-11ea-9bd1-91690548e59b.png)\r\n\r\n## Before & After\r\n![HoloLens2ButtonUX_Material1](https://user-images.githubusercontent.com/13754172/94341147-2d225b80-0042-11eb-8c6c-79d052cd3a67.png)\r\n![HoloLens2ButtonUX_Material2](https://user-images.githubusercontent.com/13754172/94341148-301d4c00-0042-11eb-8eb5-abc7a0222f60.png)\r\n![HoloLens2ButtonUX_Material_Update](https://user-images.githubusercontent.com/13754172/94341269-dcf7c900-0042-11eb-9028-e55abd2ead67.png)\r\n\r\n\r\n\r\n## Changes\r\n**MRTK_PressableInteractablesButtonBox.mat**  Adjusted alpha from 255 to 0:\r\n![2020-08-19 10_46_45-Color](https://user-images.githubusercontent.com/13754172/90583194-8e1c6f80-e20a-11ea-9e65-abbd29c5812d.png)\r\n![2020-08-19 10_46_53-Color](https://user-images.githubusercontent.com/13754172/90583192-8d83d900-e20a-11ea-9a9b-f8abbda8323e.png)\r\n"""
681469322,8328,b'Add HandJointService to XR SDK profile',"b'## Overview\r\n\r\n[On Slack](https://holodevelopers.slack.com/archives/C2H4HT858/p1597784419352700), it was pointed out that our hand menu samples depend on the hand joint service being registered in the input providers. This PR adds the service to the XR SDK profile so hand menus work again!'"
681404756,8327,"b'Update the MRTK configurator to turn off ""Graphics Jobs"" by default in Unity 2019'","b""See linked issue https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8326 for more details - this is a pretty bad issue for folks using Unity 2019 and trying to deploy to HL2.\r\n\r\nThis updates the configurator to turn off this setting by default for 2019 (and when under UWP). This is obviously not specific to HL2 (since HL1 also uses UWP and WMR as well) but is the level of detail that we can distinguish to make sure we don't affect standalone or other platforms."""
681387253,8324,b'Create simple UPM packaging only pipelines for release publishing',"b'The purpose of these pipelines is to package MRTK for public release (preview or official) once CI and testing has been completed.\r\n\r\nThey will form the artifact creation portion of the release pipelines.\r\n\r\nTo keep things simple (and to mirror existing pipelines), there is one for official releases and one for preview releases.\r\n\r\nOnce this change is merged, these pipelines will be enabled as part of the release process.'"
681342439,8323,b'Update internal CI Unity versions',"b""## Overview\r\n\r\nThe internal machines have a newer version of Unity 2018.4 installed, so let's use that!"""
681332799,8322,b'Compile out non-2020-compliant code in MixedRealityOptimizeUtils',"b'## Overview\r\n\r\nFirst pass to get things compiling in Unity 2020.\r\nSecond pass will be to complete #7514/#7513, which will enable 2019, 2020, etc.\r\n\r\n## Changes\r\n- Part of #8269 \r\n\r\n'"
681175664,8321,b'Improve CoreServices.GetService by removing a double Dictionary lookup',b'## Overview\r\nAccessing CoreServices properties shows up as a performance hot path for Remote Assist. This fix makes performance better for CoreServices.GetService by avoiding looking up the service twice in the dictionary (once from ContainsKey and another time from the indexer).'
681119805,8320,"b'Revert ""Revert ""Updates the LeapMotion and UnityAR configuration checkers to be manually triggered""""'","b'Yes, this is a revert of a revert - basically the original PR hit an issue in CI related to build machine versions, and we recently updated some of dependencies on our build machines, so now this should be good to go.\r\n\r\nReverts microsoft/MixedRealityToolkit-Unity#8292'"
680781048,8319,b'Mouse cursor size update',"b""## Overview\r\nAdjusted mouse pointer's cursor size. Updated MouseCursor.prefab properties.\r\n'Resize cursor with distance' checked.\r\n'Cursor angular size' updated to 7.\r\n\r\n![2020-08-18 16_45_03-Sourcetree](https://user-images.githubusercontent.com/13754172/90486127-7940cd00-e173-11ea-83b8-5beef0ed5ff8.png)\r\n\r\n## Before & After:\r\n![2020-08-18 15_53_38-Unity 2018 4 21f1 -  PREVIEW PACKAGES IN USE  - HandInteractionExamples unity - ](https://user-images.githubusercontent.com/13754172/90486070-6201df80-e173-11ea-870c-3c324dd08eef.png)\r\n![2020-08-18 15_59_01-Unity 2018 4 21f1 -  PREVIEW PACKAGES IN USE  - HandInteractionExamples unity - ](https://user-images.githubusercontent.com/13754172/90486079-64fcd000-e173-11ea-82d2-b3c369028821.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #8318\r\n\r\n"""
680622639,8317,b'Update CI demand to Unity 2018.4.26f1',b'## Overview\r\n\r\nI missed updating one of the pipeline demands in #8116.\r\n\r\n## Changes\r\n- Fixes: https://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=13295&jobId=ae5f814d-d003-5afd-2125-fa0189ea8658&view=results\r\n'
680558805,8316,b'Add missing change that enables publishing of upm packages',b'This change adds in a fix that was made in feature branch that failed to make it back into the previous PR.\r\n\r\n'
680558407,8315,b'Move Editor reference from MRTK.cs to config profile inspector',"b""## Overview\r\n\r\nA partial change to start moving editor references in the core assembly into more logical editor-only assemblies.\r\nThis change moves the code where the input actions are set from MRTK.cs in an `if` that checks for the input system being enabled into the profile's inspector in an `if` that checks the same data.\r\n\r\nAlso some minor cleanup of related files.\r\n\r\n## Changes\r\n\r\n- Part of https://github.com/microsoft/MixedRealityToolkit-Unity/issues/3952"""
680496572,8314,b'Convert from legacy XR check to display subsystem running check',"b'## Overview\r\n\r\nThe legacy XR check happens in an editor-only assembly. This updates it to instead check for a display subsystem running, which implies XR SDK vs legacy.\r\n\r\n## Changes\r\n\r\n- Fixes: https://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=13266&view=results'"
680467336,8313,b'Add motion controller simulation support to editor play mode',"b'## Overview\r\nThis is the second PR of a series that will eventually add motion controller simulation and test support to MRTK. This PR specifically focuses on adding motion controller simulation support to editor play mode. Developers will be able to simulate motion controllers in editor play mode just like simulating hands. Note in this PR only limited features of a motion controller are supported: the trigger button, the grab button and the menu button. The support is done via detecting keyboard presses and then translating them into binary state (pressing/not pressing a button).\r\n\r\n## Changes\r\n- Continuation of #8296.\r\n\r\n## Verification\r\n- Open the HandInteractionExamples scene\r\n- In the input simulation service inspector window (MRTK GameObject -> Input -> Input Data Providers) change the controller simulation mode to motion controller\r\n- Play the scene in editor and use controls similar to those of hand simulation to manipulate a gizmo (a representation of motion controller). Note motion controller specific keyboard assignments are in the same inspector window under ""Motion Controller Settings"".'"
679583159,8309,b'Update MRTK_Packages.md to handle spelling error',"b'## Overview\r\nUpdates MRTK_Packages.md to replace ""handing"" with ""handling""\r\n\r\n## Changes\r\n- Fixes: # Replaced ""handing"" with ""handling""\r\n'"
679543058,8308,b'Update ControllersPointersAndFocus.md adding a missing word',"b'## Overview\r\nUpdate ControllersPointersAndFocus.md adding a missing word\r\n\r\n## Changes\r\n- Fixes: # Adds ""device manager"" where it looks like it was originally meant to be'"
679538900,8307,b'Updating pulse shader example to match shell behavior',"b'## Overview\r\nUpdated pulse shader example to match shell behavior. (PulseShaderExamples.unity scene)\r\n- Generate pulse effect on air-tap. Pulse starts from the endpoint.\r\n- Can cancel and restart pulse before the previous pulse finishes.\r\n- Added profile for the example scene. Without proper configuration, the examples are meaningless. \r\n- Material names cleanup.\r\n- Still keeping all files in the Experimental folder. \r\n\r\n## Screenshots\r\n![PulseShader_SurfaceEditor2](https://user-images.githubusercontent.com/13754172/90310153-d0536180-df29-11ea-939a-e9572d4f5670.gif)\r\n'"
679368519,8306,b'Enable UPM publishing in CI',"b'This change hooks up the upm publishing script to the CI pipeline. The script is controlled by pipeline variables (PublishUpmPackages and UpmRegistry).\r\n\r\nIn the public CI, PublishUpmPackages is set to false and UpmRegistry is set to an invalid value (to help detect accidental change to PublishUpmPackages).\r\n\r\nThis allows for configuring continuous publishing using the above variables, '"
679343241,8305,b'Remove UNITY_EDITOR define from MigrationTool.cs in editor-only assembly',"b'## Overview\r\n\r\nFollow-up to https://github.com/microsoft/MixedRealityToolkit-Unity/pull/8004. This class was moved to an editor-only assembly, but the `#define` was left in, which prevents it from showing up in our docs.'"
679242998,8303,b'Constraint Manager now available for Bounds Control',b'## Overview\r\nPR integrates Constraint Manager into Bounds Control. \r\n\r\n- removed hardcoded min max scale constraint\r\n- bounds control now supports scale and rotation constraints (translation constraints to be added once translation handles are in)\r\n- adjusted min max scale constraint test and added test to verify rotation constraint\r\n- adjusted constraint manager to check for added constraints during runtime (old design only allowed to have constraints registered that were added before the component that includes the constraint manager)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8304\r\npart of #5340 \r\n\r\n\r\n'
679134505,8300,b'changed bounds control migration to not create config files anymore',"b""- changed bounds control migration to not create config files anymore but instead populate configurations inline\r\n- removed test migration handler which isn't necessary anymore after this changed\r\n- removed configurations from previous migration / updated example scene\r\n\r\npart of bounds control graduation\r\n\r\n#8301 8301"""
678727490,8296,b'Renaming hand to controller in input simulation related files',"b'## Overview\r\nThis is the first of a set of PRs that will eventually add motion controller simulation and test support to MRTK. This PR specifically focuses on making name changes so that simulation is no longer confined to just hands but applies to controllers in general.\r\n\r\n## Changes\r\n- Change reference to ""hand"" to a more generic term ""controller"" to get ready for the upcoming support of simulated controller in editor play mode and tests.'"
678696150,8294,b'Update WorldAnchorManager and StabilizationPlaneModifier for Unity 2020',"b""## Overview\r\n\r\n1. Compiles out calls to legacy `XR.WSA` APIs on 2020.1+, where the APIs no longer exist.\r\n1. Adds support for XR SDK's `SetFocusPlane` API in StabilizationPlaneModifier, to add back the functionality when running on non-legacy XR.\r\n1. Removed an unused assembly reference in the SDK .asmdef.\r\n1. Some formatting and code style updates.\r\n\r\nWorldAnchorManager could be converted to the XR{ReferencePoint|Anchor}Subsystem, but there's still some active work on the WMR implementation of that subsystem underway that prevents testing. Once that work is done, we can revisit this component.\r\n\r\n## Changes\r\n\r\n- Part of #8269 \r\n"""
678657107,8293,b'Added non uniform scaling support for bounds control',"b""## Overview\r\n- Added precise scaling mode to bounds control scale handles. \r\n- Added test to verify behavior for near interaction with control.\r\n\r\nNote: there's another branch where I integrated the constraint manager into BC which will allow to combine non uniform scaling with scale axis locking. \r\n\r\n## Changes\r\n- Fixes: #6734 \r\n\r\n![nonuniformscale](https://user-images.githubusercontent.com/36998103/90173861-f697c680-dd9c-11ea-91fd-56280cf82638.gif)\r\n\r\n\r\n## Verification\r\n- added new test to verify proper scaling behavior as well as position / center modification when scaling is performed \r\n- manual tests on example scenes"""
678627892,8292,"b'Revert ""Updates the LeapMotion and UnityAR configuration checkers to be manually triggered""'",b'Reverts microsoft/MixedRealityToolkit-Unity#8287\r\n\r\nThis is causing a build break because our build machines are still using an older version of Unity 2018 (where missing assemblies leads to an error rather than a warning).\r\n\r\nTemporarily reverting this while I get the Unity version updated on the build machines.'
678003159,8290,b'Updated hand joint image in HandTracking.md',"b'## Overview\r\n\r\nAn image on our hand tracking documentation was missing the metacarpal joints, the image has been updated to accurately reflect the joints that are tracked.\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/53493796/90071837-2d8daf80-dcab-11ea-8be6-76979f1c0e36.png)\r\n\r\nHere is the new image:\r\n\r\n![ArticulatedHandJoints](https://user-images.githubusercontent.com/53493796/90071869-37afae00-dcab-11ea-8098-b79a402a0300.png)\r\n\r\n'"
677989608,8289,b'Fixed typo in WindowsMixedRealityCameraSettings.md',"b'Fixed typo in third sentence under ""HoloLens 2 reprojection method"": ""...all objects are properly submitted their..."" -> ""...all objects have properly submitted their..."".'"
677988764,8288,b'Fixed Typo in Overview.md',"b'Fixed typo in first sentence under ""Input Actions"": ""isolating"" -> ""isolate"".'"
677937586,8287,b'Updates the LeapMotion and UnityAR configuration checkers to be manually triggered',"b""A subset of our InitializeOnLoad handlers run all the time, but actually add extremely low value because the times where they could actually affect change are extremely rare. These two specifically only need to run once after a new platform is being lit up for the first time (i.e. it's generally a one-time per-project setup step). However, their InitializeOnLoad handlers end up running on each compile, prior to entering play mode, etc, etc.\r\n\r\nThe benefit-to-cost ratio here is really not great (in that the number of times where this actually does work vs the number of times it is run is a super low ratio), so these are being moved to instead trigger manually (and be listed explicitly in project setup steps). I could have converted these to on-editor-startup, but actually that isn't very valuable (i.e. unless the user is manually doing asset ingestion while Unity is closed and somehow magically creating meta files that match Unity's expectations, it's unlikely to actually be right)\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/8188."""
677835807,8286,b'Update the last project-load InitializeOnLoad handler to only run on project startup',"b""Per, https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8188, we're working on making it so that InitializeOnLoad isn't as costly for ongoing compile time/play mode entry times.\r\n\r\nThis particular handler is fairly pricey but only needs to be run on Editor launch."""
677827607,8285,b'Update PressableButton to support multiple pokepointers on the same input source',"b""In some of our experimentation, we've found a limitation to PressableButton where when multiple poke pointers exist for the same input source, the code down below considers the 'wrong' one (i.e. it chooses the first poke pointer, which might not actually be mid-poke, whereas the second one is actually doing the poking).\r\n\r\nI was looking at adding tests for this, but we don't actually have any built in input config that has multiple poke pointers per input source (and wasn't sure if doing so would be widely valuable/not confusing)"""
677243480,8282,b'Update LostTrackingService for Unity 2020 and XRSDK/WMR',"b""## Overview\r\n\r\nUpdates the LostTrackingService to no longer call into removed legacy XR APIs (`WorldManager`) on Unity 2020.\r\nAlso adds support for the replacement APIs in ARSubsystems' XRSessionSubsystem. This required a new reference to that assembly, and I reused the existing `ARFOUNDATION_PRESENT` define, since have ARFoundation implies ARSubsystems.\r\n\r\n## Changes\r\n\r\n- Part of #8269 """
677196682,8281,b'Fix examples upm package',"b'The upm version of the examples package was incorrectly marking the StandardAssets folder as hidden in the editor (appended with a ~).\r\n\r\nThis change fixes this issue and the package contents are shown below. (In the editor, right click on the package and select ""Show in Explorer""\r\n\r\n![image](https://user-images.githubusercontent.com/13281406/89948813-9c9bd300-dbdb-11ea-8fb9-5440572d1038.png)\r\n'"
677122553,8280,b'fixed reset of handles when all rotation axis flags are disabled',b'- changed reset condition (early out) to allow hiding rotation handles when all axis are disabled \r\n- made visibility check more readable in rotation handles\r\n- added test condition for rotation handle visibility test to cover bug scenario\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: #8239 \r\n\r\n\r\n## Verification\r\nadded test scenario to existing handle visibility test\r\nverified behavior in bounds control example scene'
677097173,8279,b'Update a subset of the XRSDK configuration checkers to only run on editor startup',"b""Per https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8188, we're working on cleaning up a lot of our InitializeOnLoad handlers.\r\n\r\nSome of them only need to be run at Unity editor startup time (because they need to do diverging behavior based on whether or not it's being launched in Unity 2019 vs Unity 2018). These ones don't need to run after each compile and prior to entering play mode (which they do right now) - i.e. prior to this change these three things would run their asmdef checkers (which would do file I/O, which can be expensive and is unnecessary). Obviously the Unity editor version is not going to change as the Unity editor is running.\r\n\r\nThis change uses the volatile SessionState storage space to store whether or not these particular handlers have run in this editor lifetime. I opted not to make some base class because I didn't want to add some other dependency chain for this particular thing (i.e. these will likely get split out and the value of sharing this isn't tooooooo high)."""
677071226,8278,b'No more InitializeOnLoad please',"b""This change updates CI to barf when it sees a new instance of InitializeOnLoad.\r\n\r\nAs is called out in https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8188, InitializeOnLoad is really powerful but also really painful, because it leads to the overall slowdown of the inner loop as new InitializeOnLoad handlers get added.\r\n\r\nWe should not be adding any new InitializeOnLoad handlers (i.e. ones that run on startup/compiletime/play mode entry) - this is blanket statement where we may have some exceptions going forward (i.e. in some cases maybe having it at startup could be useful where the ongoing pain it causes is zero). However, we're adding this CI step to fail explicitly to force us to evaluate future additions when/if they appear. This is an intentional speed bump (actually maybe more of a guard rail on a cliff edge than a speed bump).\r\n\r\nThere's a multi-step process of getting this down, below is a copy pasta of some of the analysis:\r\n\r\nInitializeOnLoad is a feature that allows you to write code that will run each time:\r\n1.\tUnity starts up\r\n2.\tAny file gets compiled\r\n3.\tWhen transitioning into play mode\r\n\r\nWhile some of the InitializeOnLoad load usage is relative cheap, we have a number of cases where functions take 50ms seconds here, 100ms, which adds up to ~500-750ms delay on average, per compile, before the editor becomes responsive again. These numbers have been reported to be much higher (i.e. 1-2 seconds) on less powerful dev machines (i.e. laptops, engineers/designers who don\xe2\x80\x99t have the latest desktop boxes)\r\n\r\nFor example, look at a sample compile (i.e. this log shows InitializOnLoad and InitializeOnLoadMethod code running after saving a whitespace change in the MixedRealityToolkit.dll assembly)\r\n(How to read: Each line represents a specific InitializeOnLoad function. The first time in milliseconds is the time spent within that function. The second is the running total of all of the MRTK\xe2\x80\x99s InitializeOnLoad handlers thus far)\r\n\r\nActivity MixedRealityToolkitFiles ended. Activity time (milliseconds): 7. Total time (milliseconds) 7\r\nActivity EditorProjectUtilities ended. Activity time (milliseconds): 130. Total time (milliseconds) 1374)\r\nActivity USBDeviceListener ended. Activity time (milliseconds): 0. Total time (milliseconds) 137\r\nActivity MixedRealityToolkitFacadeHandler ended. Activity time (milliseconds): 0. Total time (milliseconds) 138\r\nActivity WindowsMixedRealityXRSDKConfigurationChecker ended. Activity time (milliseconds): 29. Total time (milliseconds) 167\r\nActivity LeapMotionConfigurationChecker ended. Activity time (milliseconds): 17. Total time (milliseconds) 184\r\nActivity WindowsMixedRealityConfigurationChecker ended. Activity time (milliseconds): 7. Total time (milliseconds) 192\r\nActivity MixedRealityToolkit::EditorEventListener ended. Activity time (milliseconds): 1. Total time (milliseconds) 193\r\nActivity XRSDKConfigurationChecker ended. Activity time (milliseconds): 9. Total time (milliseconds) 202\r\nActivity UnityARConfigurationChecker ended. Activity time (milliseconds): 179. Total time (milliseconds) 382\r\nActivity OculusXRSDKConfigurationChecker ended. Activity time (milliseconds): 9. Total time (milliseconds) 391\r\nActivity ServiceFacadeEditor ended. Activity time (milliseconds): 1. Total time (milliseconds) 392\r\nActivity MixedRealityProfileUtility ended. Activity time (milliseconds): 0. Total time (milliseconds) 392\r\nActivity SceneInfoUtils ended. Activity time (milliseconds): 98. Total time (milliseconds) 491\r\nActivity MixedRealityPlayspace::InitializeOnLoad ended. Activity time (milliseconds): 1. Total time (milliseconds) 492\r\nActivity SyncContextUtility ended. Activity time (milliseconds): 0. Total time (milliseconds) 492\r\n\r\nThis is a fairly typical compile, taken on a machine with a Intel(R) Core(TM) i9-7920X CPU, SSD, 64gb. Here it takes ~500 milliseconds of time to run through all of the InitializeOnLoad handlers (and this doesn\xe2\x80\x99t take into account any of the other events that also run due to Unity editor event registrations that occur in InitializeOnLoad). This is significant \xe2\x80\x93 every single time you save a file, it now takes almost a second longer to give you a functioning Unity UI.\r\n\r\n\r\n\r\n"""
676500963,8276,b'Update XRSDKWindowsMixedRealityUtilitiesProvider.cs to provide HolographicFrame access',"b'## Overview\r\n\r\nNow that Windows XR Plugin 2.2.0 is the Unity 2019.4 verified / recommended / installed by default version, we can include this feature that was added in that package (`WindowsMREnvironment.CurrentHolographicRenderFrame`).\r\n\r\nThis allows the `WindowsMixedRealityReprojectionUpdater` to work and allows apps to switch between depth reprojection and autoplanar on XR SDK.'"
676487766,8275,b'Update and move XRSubsystem helpers into core',"b""## Overview\r\n\r\nRewrote the helpers to no longer have a dependency on the Unity XR Management package. Now that it only has a dependency on the engine, I've moved it to the MRTK core, to allow other components to use it without needing to take a dependency on the XRSDK provider package.\r\n\r\nThis was done for a similar reason as #8270, to allow components to call methods on these subsystems without taking a dependency on the XRSDK package."""
676449571,8274,b'Add documentation for using UPM with MRTK',b'This change contains new articles and updates to describe the MRTK UPM implementation. Also included are some new images to illustrate specific aspects of using MRTK via UPM.'
676396229,8273,"b""Don't try loading Unity-deprecated assemblies in 2020+""","b'## Overview\r\n\r\nAdds a constraint to the two XR2018 assemblies we have, preventing them from loading on Unity 2020.1 or newer, where the legacy XR pipeline has been removed from Unity.\r\n\r\n## Changes\r\n- Part of #8269 \r\n'"
675380866,8271,b'Update some deprecated APIs in Unity 2020',"b""## Overview\r\n\r\nOpening some PRs as I go. This PR:\r\n\r\n1. Updates the namespace for Unity's `ScriptedImporter` in Unity 2020.2\r\n1. Uses the new `VersionControlSettings` properties in Unity 2020.2 for setting meta file visibility.\r\n1. Compiles out `ApplyXRSettings`, which references `PlayerSettings.SetVirtualRealitySupported`. I haven't yet found a corresponding API in XR SDK.\r\n1. Compiles out a path in the camera system which talked to WSA APIs for device opaqueness. This was already a deprecated flow in MRTK in favor of our platform-specific camera settings providers.\r\n\r\n## Changes\r\n- Part of #8269 \r\n"""
675375882,8270,b'Refactor out DeviceUtility.IsPresent to wrap legacy + XR SDK code',"b""## Overview\r\n\r\n`XRDevice.isPresent` doesn't work with XR SDK (see #7904 for another example of this). Following Unity's [recommendation to check the running status of the XRDisplaySubsystems instead](https://docs.unity3d.com/2019.4/Documentation/ScriptReference/XR.XRDevice-isPresent.html), I added a helper function to wrap both the legacy and XR SDK APIs for getting this data.\r\n\r\n## Changes\r\n- Part of #8269 """
675363165,8268,b'Improve XRSettingsUtilities.IsLegacyXRActive check',"b'## Overview\r\n\r\nCurrently, this property iterates through all subsystem descriptors and checks which ones are `XRDisplaySubsystemDescriptor`s. I missed the fact that I could ask for specific descriptor types in the original implementation...this PR fixes that, to save some iterations and casts.'"
675045194,8267,b'Further information about AR platform support installation and update of packages versions',b'## Overview\r\nThe ARFoundation CrossPlatform documentation is a bit confusing about the setting up of the scene. \r\nI added a side note about the fact that you can manually install the ARFoundation components to take advantage of this framework strengths.\r\n\r\n## Changes\r\n- Related to an issue I did #8261 '
674411832,8264,b'Added option to set the physical material of the Spatial Mesh',b'## Overview\r\nAdded option to set the physical material of the Spatial Mesh at both the WindowsMixedRealitySpatialMeshObserver and the SpatialObjectMeshObserver. This allows to change the physical properties of the Spatial Mesh and make things bounce off it - or not. \r\n\r\nSee [here ](https://twitter.com/LocalJoost/status/1291043181509988352)for a demo video\r\n\r\n'
674351319,8263,b'Documentation - adding eye gaze behavior changes',b'## Overview\r\nMRTK documentation about hand and gaze setup is missing information on how to have eye gaze always on even when hand are detected.\r\n\r\n## Changes\r\n- Fixes: #8262 .\r\n- Fixes: #8140.\r\n\r\n\r\n\r\n'
673934064,8260,b'Enabling runtime profile switching',"b'## Overview\r\nThis PR is based on efforts made in #8050, which attempted to address multiple issues at once. Instead, this PR focuses on the specific issues related to allowing developers to change the active profile of MRTK during runtime.\r\n\r\n## Changes\r\n- In this PR, the behavior of runtime profile change is modified to first take the request, then destroy current profile services after all LateUpdate()s of current profile services have been called, and finally initialize the new services associated with the new profile in the next frame before any Update() for a service is called. This solves the problem of potentially performing the profile change in the middle of an Update or LateUpdate of a service which causes a variety of problems. Delaying the initialization of new services to the next frame also helps to resolve the problems related to Destroy().\r\n\r\nTests are also added to this PR to help validate the changes achieving the goal mentioned above.'"
673907434,8259,b'MRTK-Quest integration/documentation',"b'## Overview\r\nPR incorporating MRTK-Quest into MRTK. This PR is focused on getting in the MRTK-Quest handtracking components into MRTK in order to greenlight that feature for developers. MRTK-Quest as a whole as some other features (some hand gesture utilities, hand teleport pointer) which need additional evaluation and work before pulling them in. \r\n\r\nOne thing to note is that this PR has a commented out section in OculusQuestHand with teleport pointer code. That has been left in for now to make it easier to add back in a future PR.\r\n\r\n## Changes\r\n- Fixes: #4549 \r\n'"
673751976,8258,"b""PointerUtils doesn't work with custom PointerMediator""","b""## Overview\r\nWas surprised to see this but then took a look at the code and was not surprised to see this!\r\n\r\nHere's what happens:\r\nWhen you set the pointer preferences (stored on the FocusProvider), the preferences themselves get stored. However, when the FocusProvider is creating the pointer mediator, it only passes the pointer preferences along to the object IF the object has as constructor that takes an IPointerPreferences.\r\n\r\nThere are a couple of things wrong with this:\r\n1. The DefaultPointerMediator has pointerPreferences marked as private, so even if someone wanted to save the pointer preferences, they couldn't do so in an way that would make the base class (DefaultPointerMediator) be able to functionally retrieve its pointer preferences. (Yes, you could do a bunch of repeat work but that's not helpful).\r\n2. This is an extremely indirect dependency/contract on custom mediators - you don't know you have to handle this (i.e. that writing a constructor that takes a pointer preferences is basically required in order to field the entire set of input). It's literally impossible for you to know that you have to do this.\r\n\r\nThis change does a few things:\r\n1. Fixes the issue.\r\n2. Updates the test utilities to allow initing the MRTK with a different profile (so avoid copy pasta in the future).\r\n3. Makes the default profile getting of the test utilities public (to reduce copy pasta)\r\n4. Updates the breaking changes section to mention the addition of the function on that interface.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8243"""
673402288,8256,b'Update tests to be more sensitive to camera transform',"b""## Overview\r\n\r\nThis PR attempts to make the MRTK tests more sensitive to non-identity transforms in the camera hierarchy, in order to give more warning for assumptions introduced that the camera hierarchy is all identity.\r\n\r\nThere are four efforts here:\r\n1. Make it easier to write tests that don't assume an identity camera transform.\r\n2. Convert some core tests to cover the non-identity scenario.\r\n3. Introduce a non-identity element to the camera hierarchy, even when composite transform is identity.\r\n4. Update documentation to make it clear that non-identity camera hierarchy is expected and supported.\r\n\r\n## Changes\r\n- Fixes: #7695  .\r\n\r\n\r\n## Verification\r\n\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
673141851,8255,b'Split boundary system fixes from #8050',b'This change separates the boundary system fixes from the change profile PR (#8050). The issue that is being fixed is unrelated and was originally included there to allow a profile change test case to run correctly.\r\n\r\nThe changes made are:\r\n\r\n* Add a ReadProfile method to BaseBoundarySystem.cs\r\n  * Check for a null profile in ReadProfile\r\n  * Call ReadProfile at the top of Initialize to ensure that the profile is always read before any decisions are made (THIS was the bug that broke the profile change test)\r\n* Ensure that the base.Initialize() method is always called in MixedRealityBoundarySystem.cs (this was a contributing factor the the bug)'
673115935,8253,b'Add an asmdef checker roadblock to PR/CI validation',"b""I've been doing a little bit of digging into some of the non-runtime perf aspects of our setup, and one thing that I've looked into is the overhead associated with the split up of the asmdefs that we have today. Here's a rough wall of text of some thoughts/findings:\r\n\r\nAmsdefs can be a useful tool in grouping code to reduce overall compilation times in the context of very large projects. About a year ago we went through the process of putting all our code into smaller asmdefs, in the goals of optimizing compile time. \r\n\r\nThere are tradeoffs, however, beyond just the project window bloat that occurs in Visual Studio when you have a large amount of asmdefs (this document doesn\xe2\x80\x99t go into this, but note that this specific issue will be addressed with some of the UPM work that we're doing now).\r\n\r\nEvery single asmdef, even one that contains only a single, empty MonoBehaviour (i.e. one that has zero dependencies and has a MonoBehaviour with an empty Start() and Update() function that isn\xe2\x80\x99t being used in any scene), adds build overhead. With this single empty asmdef example, it takes on average ~.5 seconds to compile this assembly. \r\n\r\nAs of the time of writing this document, MRTK currently has ~58 assembly definitions. In a \xe2\x80\x9ctypical\xe2\x80\x9d MRTK compile (in this case, a change in a file in the Microsoft.MixedReality.Toolkit.dll assembly), each assembly tends to take an average of 0.56477 seconds.\r\nAverage\t0.564774\r\nStdDev\t0.114018\r\nMax\t0.807838\r\nMin\t0.370333\r\n\r\n(Note that these numbers are in seconds, taken from a [Z4](https://store.hp.com/us/en/mdp/desktops/hp-z4-workstation-3074457345617221670-1) with 64gb ram and a i9-7920X).\r\n\r\nIn this case, even the essentially empty asmdef takes 0.530214 seconds \xe2\x80\x93 there\xe2\x80\x99s clear overhead with just processing an asmdef. Note that the larger ones (such as Microsoft.MixedReality.Toolkit.SDK.dll  0.807838), the overhead of processing a new asmdef largely outweighs the additional code that needs to be compiled within that. This seems to suggest that we could possibly save compile time by consolidating a lot our asmdefs into a smaller set. (i.e. much of the compile time that we\xe2\x80\x99re using now is actually just in the asmdef overhead).\r\n\r\nNote that assemblies are compiled in parallel, so adding a new asmdef doesn\xe2\x80\x99t linearly increase the build time (however, adding more asmdefs by a scale factor of the average number of cores does appear to a linearly increase build times).\r\n\r\nOne of the advantages of asmdefs is that it reduces the number of things that have to get recompiled when a single source file changes \xe2\x80\x93 for example, when changing a file that is at the leaf of the dependency tree, only that assembly will get recompiled. However, for files closer to the root (for example, Microsoft.MixedReality.Toolkit.dll), it along with all of its dependencies will get recompiled. This means that changes to things like Microsoft.MixedReality.Toolkit.dll will tend to have worse compile performance compared to a single massive asmdef (i.e. Assembly-CSharp) because roughly the same amount of code ends up having to get compiled but there\xe2\x80\x99s a ton of asmdef container overhead.\r\n\r\nThe main purpose for adding this PR validation/CI check is to have an explicit roadblock to force discussion in the future for when it happens. It's fairly easy to add a new asmdef and have that slip under the radar - many new additions will probably make sense (i.e. new platforms, new providers), but having the explicit conversation and then updating the allow list will force the conversation to happen on PR.\r\n"""
672996214,8251,b'Fix spatial awareness mesh w.r.t. camera scale',"b'## Overview\r\n\r\nModify the parenting of SpatialAwareness nodes hanging off the MixedRealityPlayspace to not absorb any scale from the MRPlayspace, and then correct the (de-scaled) mesh positions.\r\n\r\n## Changes\r\n- Fixes: #8250.\r\n\r\n\r\n## Verification\r\nThere might be a better way to address this.\r\n\r\nNote that this PR only addresses uniform scale in the camera hierarchy. Non-uniform scale is unlikely to be robustly handled, and is specifically [recommended against by Unity](https://docs.unity3d.com/Manual/configuring-project-for-xr.html).\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
672891075,8249,b'Fixing broken TMPro material references when using Material Instance on same object',"b""## Overview \r\nThis PR is part of Scroll View graduation.\r\n\r\n **1. Scrolling Object Collection causes TextMeshPro MissingReferenceExceptions .**\r\n- Using material instance component on game objects that are using TMPro renderers throws error messages when transitioning from editor mode to playmode.\r\n\r\nTMPro also does material life management and caches the renderer shared material during editor mode. When transitioning from editor mode to playmode the MaterialInstance class defers the destruction of the material instanced during editor mode. This destruction only happens after Awake in playmode, breaking TMPro reference. \r\n\r\nThis PR suggests letting Unity handle the unloading of unused assets only when transitioning from editor mode to playmode. Profiling this approach shows no extra memory leaking. The error messages do not appear on test mode.\r\n\r\n```\r\nMissingReferenceException: The object of type 'Material' has been destroyed but you are still trying to access it.\r\nYour script should either check if it is null or you should not destroy the object.\r\nTMPro.TextMeshPro.GenerateTextMesh () (at Library/PackageCache/com.unity.textmeshpro@2.0.1/Scripts/Runtime/TMPro_Private.cs:1969)\r\nTMPro.TextMeshPro.OnPreRenderObject () (at Library/PackageCache/com.unity.textmeshpro@2.0.1/Scripts/Runtime/TMPro_Private.cs:1549)\r\nTMPro.TextMeshPro.Rebuild (UnityEngine.UI.CanvasUpdate update) (at Library/PackageCache/com.unity.textmeshpro@2.0.1/Scripts/Runtime/TextMeshPro.cs:241)\r\n```\r\n## Changes\r\n- Fixes: #7963 \r\n- Fixes: #6665\r\n"""
672436711,8246,b'Update LaunchUri.cs to use Unity-defined URI launcher',"b'## Overview\r\n\r\nThis API is a wrapper around the Windows API we were previously calling. Updating to use the Unity API allows this to be called in more contexts, like remoting.'"
672312419,8245,b'WindowsDictationInputProvider fix to compile for Mac',b'## Overview\r\nAdds #ifdef guard around code that should not run when compiles for non-windows platforms.\r\n\r\n## Changes\r\n- Fixes: #8226\r\n'
672211815,8244,b'Remove incorrect prefab from ET pointer profile',"b'# Overview\r\nThe pointer profile list had a cursor prefab in one of the slots, instead of the correct pointer prefab:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/89204884-ae420280-d56b-11ea-89ce-a09041c98397.png)\r\n\r\nThis was leading to an error on start-up.\r\n\r\n>DefaultCursor (UnityEngine.GameObject) does not have IMixedRealityPointer component. Cannot create and utilize pointer\r\n\r\nSince this input type is covered by a different (correctly assigned) pointer rule, I removed the entry.\r\n\r\n## Changes\r\n- Part of fixing: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8125\r\n'"
670339534,8240,b'Input Simulation Cheat sheet polish',b'## Overview\r\n- Updated cheat sheet to screen space UI\r\n- Tip text now shows in the upper left corner\r\n- Visual polish \r\n\r\n## Changes\r\n- Part of fixing: #8228\r\n![MRTKInputSimHelper](https://user-images.githubusercontent.com/13754172/89088118-8b390800-d34b-11ea-9a33-a1733ad190a8.gif)\r\n'
670147156,8238,b'Cleaning up lingering comments from #8211',b'Cleaning up some comments I missed and the end of the last PR'
669411103,8236,b'Translation Handles!',"b'## Overview\r\n\r\nAdds Translation Handles to BoundsControl. https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6927\r\n\r\nNEW CHANGES:\r\n- introduced new PerAxisHandle Base for handles that can have different behavior per axis\r\n- translation and rotation handles are both PerAxisHandles as well as their configuration\r\n- added translation constraint support for bounds control\r\n- detangled bounds control links from rotation handles (yay!)\r\n- parametrized tests for handles / peraxishandles wherever possible and added support for translation handle runtime configuration tests\r\n- added translation handle tests for far / near / ggv movement and constraints\r\n- added enums for faces and links to make them easier to access\r\n- flattened faces and edges are now dynamically generated\r\n- bugfixes for visibility and flatten in translationhandles and some misc feedback from PR\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/5544935/89000997-46f32c80-d2a5-11ea-9115-da4adb1c492b.png)\r\n\r\n## Notes\r\nThe TranslationHandles.cs and TranslationHandlesConfiguration.cs scripts are functionally identical to their Rotation... and Scale... counterparts. Code suggestions/reviews for non-unique parts of this PR should also be applied to the existing components too!\r\n\r\nHandles are now generated by a _factory pattern:_ Configuration objects implement a `CreateInstance()` function which returns the specific type of handle that is appropriate for that configuration. This is also in preparation for extensible handles.\r\n\r\n## Changes\r\n- Adds the translation handle models to the StandardAssets\r\n- Adds the translation handle prefab.\r\n- Adds the TranslationHandles.cs script which manages the visuals of the translation handles\r\n- Adds the TranslationHandlesConfiguration.cs scriptable object to store the configuration of the translation handles\r\n- Adds an algorithm to `VisualUtils` to compute the face centers of the bounding box, to obtain the proper locations and orientations of the translation handles\r\n\r\n## Verification\r\nAll existing BoundsControl unit tests pass. Tests for the translation handles must still be written. (Separate PR.)\r\n'"
669265106,8234,b'Update feature branch being used to test ci changes',b''
669039982,8232,b'Enable upm packaging as part of the ci process',"b'This change enables the creation of upm artifacts (.tgz files) they will not yet be published to the npm feed.\r\n\r\nAs a part of this change, some small comment / formatting changes were made in the createupmpackages.ps1 file.\r\n\r\nPlease note: This change also moves files from Core and SDK into a top level StandardAssets folder. This constitutes the majority of the files that were changed.'"
668315835,8230,b'Scroll graduation - Part 4',"b'## Overview \r\nThis PR is part of Scroll View graduation and handles the following issues:\r\n\r\n **1. Scroll should work as expected using GGV and HL1 .**\r\n- TryGetPointerPositionOnPlane() method was using pointer.result.point for all far pointers. On GGVPointer this is the point of focus from gaze.\r\n- Changed method to use pointer.position projection instead. Tests added.\r\n\r\n**2. Content click should happen on Touch up (Web Browser).** \r\n\r\n- In order to avoid false clicks when user engage on a scroll drag and match HL web browser behavior, child button should be configured to trigger clicks only on touch up. Adding tests to check if configuring buttons with correct settings ensures click on touch up.\r\n\r\n_Scroll child button clicking on touch up:_\r\n![scroll_touchup_after](https://user-images.githubusercontent.com/16922045/88874396-e7e6d680-d216-11ea-83ed-bfe5e612669c.gif)\r\n\r\n\r\n## Changes\r\n- Fixes: #7151\r\n- Fixes: #7455\r\n\r\n( _This PR merges into graduation/scroll_view branch_ )\r\n'"
668139169,8227,b'MixedRealityDictationSystem: Add ability to get audio clip for current dictation session',"b'## Overview\r\nAdds a property **AudioClip** to IMixedRealityDictationSystem to allow devs to obtain an audio clip recording of the current dictation session. Also adds a few properties to dictation handler (IsListening, AudioClip)\r\n\r\n## Changes\r\n- Fixes: #8226\r\n- **Breaking change:** Addition of property AudioClip in IMixedRealityDictationSystem\r\n- Documents the breaking change in draft release note'"
668123958,8225,b'Eye tracking example: OnLoadStartScene improvements',"b'## Overview\r\nAdd a ""load option"" in one of the eye tracking example scripts to allow additive scene loading only on device.\r\n![image](https://user-images.githubusercontent.com/168492/88848751-bf6ec600-d19d-11ea-9c57-f70b7777604b.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #8224\r\n'"
668061052,8223,b'Remove XR SDK in-repo assets',"b""## Overview\r\n\r\nAfter some reports of difficulty ensuring the XR SDK settings are correctly set when deploying from the repo, I've ~reserialized our assets.~ removed these assets from the repo.\r\n~Sometimes, Unity updates the serialization between XR Management or Windows XR Plugin versions, which can lead to our assets getting stale and certain checkboxes or settings refusing to work.~\r\n\r\n~These assets _only_ affect building and deploying from our repo. We do not distribute these, and those who use the packages will get these assets freshly created in their projects.~\r\n\r\nUpdate: After some testing, I think the best way to go about this is for developers to follow https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/GettingStartedWithMRTKAndXRSDK.html#required-in-unity and have this folder auto generated as part of those steps. """
668015974,8222,b'Updated link to IMixedRealityTouchHandler',"b""\r\n## Overview\r\nThe link to Microsoft.MixedReality.Toolkit.Input.IMixedRealityTouchHandler was leading to a 404 page. \r\n\r\n## Changes\r\nI updated the link to use xref like IMixedRealityEventSystem.\r\n\r\n\r\n## Verification\r\nI couldn't test it because github won't generate that link for me to click. Can someone test that it's leading to the right page ? \r\nThe correct link should lead to https://microsoft.github.io/MixedRealityToolkit-Unity/api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityTouchHandler.html\\\r\n"""
666892206,8218,b'Variable Precision Manipulation System',b'## Overview\r\nPrecision manipulation widgets.\r\n\r\n![image](https://user-images.githubusercontent.com/5544935/88862378-a3beec00-d1ac-11ea-9ff8-20e5d340706b.png)\r\n\r\nDRAFT PR\r\n'
666637216,8217,b'Elastic Systems unit testing suite',"b'## Overview\r\nAdds a series of unit tests to cover most of the core functionality of all three existing elastic implementations, `LinearElasticSystem`, `VolumeElasticSystem`, and `QuaternionElasticSystem`.\r\n\r\n## Changes\r\n- Adds unit tests for the existing elastic implementations.\r\n- Covers snap point snapping, interval snapping, bounds stretching, and endcap snapping/stretching.'"
666540972,8216,b'modify script to only pack. publishing will be done separately',"b'This change removes the automatic publishing support from the upm packaging script. We will publish using a separate task,\r\n\r\nThis will enable creation of upm artifacts during each mrtk_ci build. '"
666375225,8215,b'Update Feature/hackathon2020 to latest mrtk_development',b''
665478055,8212,b'Feature/hackathon2020',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
665469470,8211,b'surfaced which controllers are affected when tweaking a controller mapping',"b""## Overview\r\n\r\nCurrently, the profile inspector doesn't make it very clear to the user which controllers are loaded for the current profile. For example, when a user imports a package for support for a new type of controller, it is not immediately obvious whether the new controller definition they imported is being used, as it may share fit under a different controller definition (ie, Oculus XRSDK controller and Oculus OpenVR controller). This PR adds UI elements to the controller mapping window to make this more transparent (and save headaches when determining if a controller is actually currently being used by the profile)\r\n\r\n![image](https://user-images.githubusercontent.com/39840334/88443060-af389e80-cdcb-11ea-8f61-df9bf3cc5751.png)\r\n![image](https://user-images.githubusercontent.com/39840334/88443071-bbbcf700-cdcb-11ea-972c-0969e00536db.png)\r\n\r\nAll names WIP"""
665467733,8210,b'Dispose the dictationRecognizer in Disable()',"b'## Overview\r\nCurrently in WindowsDictationInputProvider the dictationRecognizer is not disposed when Disable() is called (unlike the behavior of the same function of WindowsSpeechInputProvider). This can cause the Garbage Collector to try to clean up the object, which can lead to Destroy() being called on a non-main thread generating exceptions.\r\n\r\n\r\n## Changes\r\n- Fixes: Dispose the dictationRecognizer when Disable() is called.'"
665301191,8209,b'Scroll View Graduation - Part 3',"b'## Overview\r\nThis PR is part of Scroll View graduation and handles the following issues:\r\n\r\n\r\n **1. Allow Scroll view to be manipulated / scaled / rotated.**\r\n- Updating the scroll collection when scroll object has scale different than Vector.one gives wrong bounds dimension to the clipping box.\r\n- Adjusted clipping box local scale calculation to account for parents scale. Tests added.\r\n\r\n_Clipping box after parent scale is doubled:_\r\n![Screenshot (48)](https://user-images.githubusercontent.com/16922045/88415726-e1033280-cdd6-11ea-8e23-f41281b3838e.png)\r\n\r\n**2. Make sure pagination works as expected.** \r\n\r\n- Moving scroll by Tiers or by page gives weird results, causing the scroll container to get stuck or move only a limited amount of tiers when using left-right scroll view. \r\n\r\n\r\n_Before change:_\r\n![scroll_pagination_before](https://user-images.githubusercontent.com/16922045/88411843-8cf54f80-cdd0-11ea-82d8-f70a6116f93b.gif)\r\n\r\n_After change:_\r\n![scroll_pagination_after](https://user-images.githubusercontent.com/16922045/88414971-a056e980-cdd5-11ea-8f83-972301259593.gif)\r\n\r\n**3. Scroll Object Collection inspector should draw the interaction planes.**\r\n\r\n_After change:_\r\n![Screenshot (45)](https://user-images.githubusercontent.com/16922045/88410935-f96f4f00-cdce-11ea-8cca-dde2880d29d5.png)\r\n\r\n## Changes\r\n- Fixes: #7451\r\n- Fixes: #7450\r\n- Fixes: #8208\r\n'"
664702137,8206,b'Unity 2019 tests: Slate/Pan/Zoom test fix',"b'So this one was... really interesting.\r\n\r\nThe last stragglers in our 2019 play mode tests was actually a real issue that\'s only present in 2019 and not in 2018. If you try using the HandInteractionExample scene and use a ray (or GGV) on the slate and try to scroll, you\'ll notice that today, when you try to scroll from side to side, it actually moves things vertically.\r\n\r\nThis is because on 2019, the default quad mesh vertices appear to be different:\r\n\r\nIf you call mesh.vertices on 2019, here\'s the order you get:\r\n```\r\n+        [0]    ""(-0.5, -0.5, 0.0)""    UnityEngine.Vector3\r\n+        [1]    ""(0.5, -0.5, 0.0)""    UnityEngine.Vector3\r\n+        [2]    ""(-0.5, 0.5, 0.0)""    UnityEngine.Vector3\r\n+        [3]    ""(0.5, 0.5, 0.0)""    UnityEngine.Vector3\r\n```\r\nThe same call on 2018 gets this:\r\n```\r\n+        [0]    ""(-0.5, -0.5, 0.0)""    UnityEngine.Vector3\r\n+        [1]    ""(0.5, 0.5, 0.0)""    UnityEngine.Vector3\r\n+        [2]    ""(0.5, -0.5, 0.0)""    UnityEngine.Vector3\r\n+        [3]    ""(-0.5, 0.5, 0.0)""    UnityEngine.Vector3\r\n```\r\nI\'ve been looking through Unity docs/announce and I didn\'t see anything specific about this, though I did see one note on Unity\'s 2019 release notes around various mesh optimizations (saying not to assume specific mesh vertex ordering). This change still does... rely on ordering, though it does so in a way that appears to be aligned with Unity\'s quad docs.\r\n\r\nWhat actually happens here is because the wrong vertices are chosen, the up/right vectors which are used to ""project onto the slate"" are wrong - so you end up getting garbage data used for scrolling. This shows up when you try to scroll left and right (it ends up scrolling up and down instead).\r\n\r\nI thought about doing a version agnostic approach (i.e. look for the various quadrants using number compares) but this wouldn\'t handle cases where quads aren\'t perfectly axis aligned... (though also I don\'t know if this is a legit use case).\r\n\r\n'"
664638162,8205,b'Unity 2019 tests: Update SolverTests to use some tolerance in the LessThanOrEqual case',"b""With ~5 remaining failing tests in Unity 2019, one of the remaining ones has to do with floating point comparison issues in tests.\r\n\r\nBasically there's one test that ends up failing due to a comparison like:\r\n\r\nLessThanOrEqual(2.00000024, 2.0)\r\n\r\nThis change actually ends up modifying a lot more of the file to use this new test utility (to handle floating point approximate comparison) just to keep things consistent within the file, even though the only one actually needed is in one of the follow distance tests."""
664041364,8204,b'Physics forces optional for near interactions. Smoothing can now be e\xe2\x80\xa6',"b'## Overview\r\n\r\nThis PR replaces PR #8052. I accidentally detached my previous feature branch so I couldn\'t continue the original PR. Sorry about that. We can close #8052 and focus on this one.\r\n\r\nHere are the new additions since my original submission of #8052:\r\n\r\n- Renamed **SmoothingActive** to **SmoothingFar** and added [FormerlySerializedAs](https://docs.unity3d.com/ScriptReference/Serialization.FormerlySerializedAsAttribute.html) attribute to migrate previous values.\r\n- Added property **SmoothingNear** to allow smoothing to be turned on and off independently for Near vs Far\r\n- Updated code to use smoothing only when enabled for the current interaction type.\r\n- Updated the editor to show both checkboxes\r\n- Updated the unit tests to set both **SmoothingNear** and **SmoothingFar** any time a test had previously set **SmoothingActive**.\r\n\r\n## Changes\r\n- Fixes: #8051 \r\n\r\n## Verification\r\nPlease help verify that existing samples continue to work. Especially the hands interaction sample. \r\n\r\nAlso, please note that in Unity 2018 you may see physics jittering when objects collide and ""Use Forces for Near Manipulation"" is turned off.\r\n\r\n![2018 Oscillate](https://user-images.githubusercontent.com/5230670/88227055-a19be100-cc32-11ea-91f3-eb3133a71d97.gif)\r\n\r\nThis appears to be a Unity 2018 issue that appears to have been fixed by 2019.2.21f1.\r\n\r\n![2019 No Oscillate](https://user-images.githubusercontent.com/5230670/88227152-c728ea80-cc32-11ea-95b0-c1208c00f974.gif)\r\n'"
663944271,8203,b'changed initial worldpose data type and removed ununsed target transform in constraints',"b""## Overview\r\n\r\n- removed transform target from transform constraint - wasn't used by constraints as the transforms we're operating on are passed into initialize and apply functions.\r\n- changed initial world pose storage to be full transform (including scale) instead of just translation / rotation, so scaling based constraints don't have to manually store the initial scaling value.\r\n- added breaking changes entry for both changes and directions for users that might have used transform target for their own constraints\r\n\r\nMisc:\r\n- added ctor for MixedRealityTransform to allow create from Unity Transform\r\n\r\n## Changes\r\n- Fixes: #8040 & #7841 \r\n"""
663855702,8202,b'Moved files associated with docs generation into scripts folder and added support for no root version',"b""## Overview\r\n- moved all files associated to docs generation into the script folder so we won't have the repo cluttered with them\r\n- added script changes done in UXT to support a default version outside of the root folder. \r\n\r\n## Changes\r\n- Fixes: #8131 \r\n\r\n\r\n## Verification\r\npublished results on private repo: \r\nhttps://thalbern.github.io/mrtk_docs/\r\n\r\n## CI requirements\r\n- every branch now publishes into a folder named after their branch name inside the version folder (this will only affect mrtk_development branch which used to be published directly in root and now will be under versions/mrtk_development)\r\n- we still require to copy a small set of files into root to make sure every version gets the correct data for redirecting and showing the available versions:\r\n-- webroot/index.html -> {gh_pages_root}/index.html\r\n-- web/ -> {gh_pages_root}/web\r\n\r\nwhen updating the default version index.html and the version.json inside web will have to be changed\r\nwhen adding another version only version.json needs another entry\r\n\r\nnote: this setup still supports the root folder to have it's own version if we want to - in that case we don't need to deploy the web and index into root"""
663568795,8200,b'Elastic Systems Upstream Merge',"b'<div align=""center""><img src=https://user-images.githubusercontent.com/5544935/88156802-6360dc00-cbb6-11ea-8ef4-c9f39797354a.png width=500px></div>\r\n\r\n## Overview\r\nThis PR represents the majority of the effort towards creating a comprehensive, mainlined elastic simulation system for MRTK. The Elastic simulation system includes a wide variety of extensible and flexible subclasses, offering bindings for 4-dimensional quaternion springs, 3-dimensional ""volume springs"", and simple linear spring systems.\r\n\r\n\r\n<div align=""center"">\r\n<img src=https://user-images.githubusercontent.com/5544935/88151572-568cba00-cbaf-11ea-91c2-d6b51829b638.gif height=350px><img src=https://user-images.githubusercontent.com/5544935/88151578-58567d80-cbaf-11ea-8f96-d24f2cf0d6e9.gif height=350px>\r\n</div>\r\n\r\n\r\n</div>\r\n\r\n<br>\r\n\r\nAs a baseline implementation, `ObjectManipulator` has been improved to leverage `VolumeElasticSystem` and `QuaternionElasticSystem` to provide translation, rotation, and scale elastic feedback + snapping functionality. The elastic feedback can be enabled and disabled individually for each type of manipulation (translation, rotation, scale) and the configuration options for the relevant elastic systems are only exposed in the editor when that particular elastic system has been enabled.\r\n\r\n\r\n\r\nThe following diagram highlights how the different pieces of the Elastic ecosystem work together to enable elastic feedback for `ObjectManipulator`. A reusable ScriptableObject-based elastic configuration system is used to optionally share spring configuration data between elements which use similar spring setups. This allows elasticity parameters to be globally tweaked, enabling users to refine the look and feel of their elastic feedback systems without editing individual objects. This leverages the custom inspector work that @thalbern and I have been doing, where ScriptableObjects can be optionally serialized inline a component: this avoids the UX pitfall of requiring users to create a new ScriptableObject for every customized spring instance. Users can optionally share spring configs between objects, but the system defaults to creating inline non-asset-backed ScriptableObjects.\r\n\r\n![Frame 1 (2)](https://user-images.githubusercontent.com/5544935/88340776-dff3d780-cce8-11ea-80e8-a1fca6a5a1c5.png)\r\n\r\nExtensive work has been done to the custom inspector to allow for user-friendly editing of the elastic properties, extents, and configurations. \r\n\r\n![Frame 2 (7)](https://user-images.githubusercontent.com/5544935/88341700-8c828900-ccea-11ea-95e0-04a900dd0263.png)\r\n\r\nAs a result of this integration with `ObjectManipulator`, several interactions are easily possible now that were not possible before! Customizable extents allow for spring-like behavior to be modeled within a 1D or 3D extent, but with the elastic system constrained within the bounds of the extent (and stretching/snapping back into place!) Customizable extents are useful for when you are modeling an interaction that has a particular length/size that must be respected; examples could be a slider, scrollbar,  or scrolling page./panel. The characteristics of the extent bounds can be customized as well; for instance, the spring constant can be adjusted individually for the hand spring, bounds/extent spring, and the snapping spring. Another option allows the edges of the elastic extent to be treated as snapping points.\r\n\r\nThe snapping interval options are also very powerful; with the `repeatSnapPoints` option, a finite list of snapping points are repeated infinitely into whatever space the elastic system currently inhabits; this allows for precision snapping to pre-determined intervals. This snapping behavior is available for all three currently implemented elastic systems (`Linear`, `Volume`, and `Quaternion`) allowing for precision snapping across a wide variety of interaction types.\r\n\r\nThe exact characteristics of the snapping ""feel"" can be tweaked, allowing developers to customize the feel of the springs they use. The ""radius"" of the ""force field"" that the snapping points impart on the spring can be adjusted to give a more gradual feel to the snapping, as well as the spring constant for the snapping.\r\n\r\nThe volume extent and snapping behaviors can be observed in this gifs.\r\n\r\n<div align=""center"">\r\n<img src=https://user-images.githubusercontent.com/5544935/88243891-5687cb00-cc3e-11ea-86b6-ff9108877eea.gif height=230px><img src=https://user-images.githubusercontent.com/5544935/88244018-d01fb900-cc3e-11ea-89da-8f7bde9c7110.gif height=230px><img src=https://user-images.githubusercontent.com/5544935/88244211-a024e580-cc3f-11ea-87e8-6a992190fc38.gif height=230px></div>\r\n\r\n\r\n## Changes\r\n- Replaces the existing generic-typed extent system with bespoke extent structs for each type of elastic\r\n- Adds a ScriptableObject container for the ElasticProperties to aid in sharing of spring configs\r\n- Adds `ElasticSystem`s to `ObjectManipulator`, one for each manipulation type (Translation, Rotation, Scale), as well as accompanying `Extent` data for each one\r\n- Alters `ObjectManipulator`\'s `ApplyTransform` method to use the elastic systems (depending on which have been selected)\r\n- Adds an `Update()` implementation to `ObjectManipulator` which will continue simulating the elastic system over time, as long as the systems\' velocity is greater than a certain magnitude specified by the constant `elasticVelocityThreshold`\r\n- Adds `InitializeElastics()` to `ObjectManipulator` which resets the built-in elastic systems to the current values based on which elastics have been enabled\r\n- Adds the `ElasticDemo` example scene\r\n- Adds the `WidgetElasticDemo` script, showing an example of how to use the raw elastic systems to drive cool UI effects.\r\n\r\n## What\'s missing?\r\n- Tests are being written! But they will be in a different PR so that this PR isn\'t any enormous-er than it already is\r\n- Docstrings/doccomments are in, but an actual documentation page/wiki page will be PR\'d separately too (using the diagrams/assets in this PR writeup!)\r\n'"
663276099,8198,b'Added inspector for bounds control',"b""## Overview\r\nAdds custom inspector for bounds control that will render the scriptable object configurations as foldouts.\r\nFollowing @Zee2 s advise scriptables that aren't linked will now be created inside the control and can be configured as an inlined local version of the visual configuration. Configurations that are local can be edited in place.\r\nConfigurations that are linked to a scriptable asset (shared scriptables) are rendered greyed out in the foldout and can't be edited directly in the control to make sure users won't accidentally modify shared configurations.\r\n\r\nThe foldout code has been moved into InspectorUIUtility so it can be shared across other UX elements using scriptables. \r\n\r\n## Changes\r\n- Fixes: #7316 \r\n\r\n![image](https://user-images.githubusercontent.com/36998103/88101661-3997bd00-cb96-11ea-8127-3fb3b908be39.png)\r\n\r\n"""
663238828,8197,b'Fix the switching of AutoFollowAtDistance',"b""## Overview\r\nCurrently the the setter of AutoFollowAtDistance doesn't check whether the script is enabled or the GameObject it is attached to is active before calling StartCoroutine(), which causes an error under certain circumstances. Besides, the auto follow behavior cannot be disabled by changing the AutoFollowAtDistance property as SetFollowMeBehavior(false) is never called.\r\n\r\n## Changes\r\n- Fixes: #8028 and call SetFollowMeBehavior(false) when AutoFollowAtDistance is set to false."""
663224987,8196,b'Update play mode tests to work in Unity 2019',"b""Play mode tests in Unity 2019 has been broken for a bit, and it looks like the reason for the vast majority of them are changes in the mechanics behind setup and teardown.\r\n\r\nIn particular, it looks like in Unity 2018 there seems to have been a frame that passed after setup and after teardown, which allowed for things to properly get setup (and property torn down) between tests.\r\n\r\nHowever in 2019, it looks like there isn't a frame that passes - so what ends up happening is both:\r\n\r\n1. Setup occurs and some tests will try to use state that isn't exactly set up yet.\r\n2. Tear down and setup happens within the same frame (which leads to some issues where things that get torn down and set up in the same frame... well, they don't exactly work out right). In particular there are some things that will destroy Unity objects, and these things require a frame to pass in order for destruction to actually work. Some things in setup then look to see if things already exist and still see them around (i.e. there's still stale state at the time of setup because things haven't been torn down).\r\n\r\nThis change brings the number of failures from ~98 to around 4 or 5. \r\n\r\nThis also updates the contribution guidelines to describe how to write tests that work both in 2019 and 2018 (i.e. using the yield return null in setup/teardown to wait a frame.)"""
662427503,8195,b'Clean-up duplicate constructor bodies in MixedRealityInteractionMapping',"b'## Overview\r\n\r\nThe largely overlapping constructors in MixedRealityInteractionMapping all had the same default initialization regardless of parameters for many of the internally serialized fields. This PR de-duplicates much of that code to ensure all are initialized consistently, and reduce the number of places changes would need to be made.\r\n\r\nAlso switched some field references to property references for consistency (and for an upcoming change to this class).'"
662367097,8194,b'Add flexibility to hand menu positioning',"b'## Overview\r\nAdd two parameters to allow for more fine tuning of hand menu position. Thank you to @tonyambrus for the contribution of algorithms / core code.\r\n\r\nAlso removes the minimum window size for input simulation, which does not work well with smaller screens.\r\n\r\n### ForwardOffset\r\nMoves menu toward or away from user.\r\n\r\n![forwardoffset](https://user-images.githubusercontent.com/168492/87995532-9a46cd00-caa4-11ea-9337-934a1a996a23.gif)\r\n\r\n\r\n### SafeZoneAngleOffset\r\nOffset angle offset at which hand menu is placed. Ignored when the placement position to use is ""AtopPalm""\r\n\r\n![angleoffset2](https://user-images.githubusercontent.com/168492/88018514-b6fef700-cadc-11ea-90dd-3fa26102c3d8.gif)\r\n\r\n\r\nFixes: #8193 \r\n\r\n\r\n'"
662321130,8192,b'Fix + test coverage for broken near interactions with ObjectManipulator and legacy ManipulationHandler',"b'## Overview\r\nAs detailed in #8187, two-handed near interaction has a serious issue where the grab centroid is incorrectly calculated, resulting in erratic, incorrect grab behavior.\r\n\r\n<img src=""https://user-images.githubusercontent.com/5544935/87841699-c0c1f980-c853-11ea-9fa2-1e84e7a5d195.gif"" width=340px>   <img src=""https://user-images.githubusercontent.com/5544935/87841702-c3bcea00-c853-11ea-83b5-fa8a9dc997f3.gif"" width=340px>\r\n\r\nThe root cause of this issue was that the code that is typically used for calculating hand-ray poses was also being used to compute the near-interaction grab point. This resulted in very wiggly and erratic grab poses being generated (because near interactions use fundamentally different principles than hand rays.) The main fix is to simply use the grab-centroid instead of the rotation-aware pose for two-handed interactions when `IsNearManipulation()` returns true.\r\n\r\nThis root cause is present in both the new `ObjectManipulator` and the legacy `ManipulationHandler`. **This PR fixes both of these components.**\r\n\r\nHowever, another concerning point was that we had no test coverage for verifying the behavior of two-handed near grab interactions. Thus, a comprehensive unit test has been added to verify the grab position behavior when using two-handed near interaction. **This unit test has been added and verified for both `ObjectManipulator` and the legacy `ManipulationHandler`**.\r\n\r\nThe unit tests have been backwards-verified (i.e. they have been run with the _old, unfixed_ versions of both `ObjectManipulator` and `ManipulationHandler`, and they have been confirmed to fail with the old behavior, and succeed with the fixed behavior.)\r\n\r\n## Changes\r\n- Fixes: #8187 for **both** `ObjectManipulator` and `ManipulationHandler` by adding checks for `IsNearManipulation()` and calculating two-hand poses differently depending on manipulation type\r\n- Adds _explicit comments_ and _function signatures_ around the previously misused functions; their purpose and behavior are now explicitly documented for future code adventurers (i.e. the difference between the calculation of two-hand interaction when far and near)\r\n- Adds extensive testing for `ObjectManipulator` and `ManipulationHandler` which fuzzes hand position and rotation and continually verifies the correctness of the object/grab centroid calculation.\r\n'"
662279353,8191,b'Documentation and compatability cleanup for eye gaze simulation',b'## Overview\r\nCleans up comments from #8180\r\n'
662278571,8190,b'Add None to AxisFlags',"b'## Overview\r\nPreviously the AxisFlags Enum does not have a ""None"" member, but 0 is used as a ""None"" member in some part of the MRTK. While this does not seem to create problems when running relevant code in the Editor, @fast-slow-still reported that this may be a problem on Android builds.\r\n\r\n## Changes\r\n- Fixes: #7463.'"
662045064,8189,b'Update the Unity AR configuration checker to not run during play mode changes',"b'This is a slight mitigation for: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8188\r\n\r\nThe issue here is that anything that we have that is InitializeOnLoad, it ends up running on editor launch, on recompile, and on play mode entrance. \r\n\r\nThis is a workaround to make it not happen on play mode entrance.\r\n\r\nThe bigger fix here is going to require more work to do correctly.'"
658485985,8183,b're-added Joystick files that were removed by previous commit',b'## Overview\r\nRe-added the same files that were removed\r\n\r\n## Changes\r\nNo changes to the files\r\n\r\n## Verification\r\n![image](https://user-images.githubusercontent.com/43013191/87712853-2633be80-c75e-11ea-9e7a-2f2bc6a80e7d.png)\r\n'
658471597,8182,b'Feature/colorpicker',b'## Overview\r\nRe-added Joystick that was removed from previous commit.\r\n\r\n## Changes\r\nNo change to the files\r\n\r\n## Verification\r\nTested:\r\n![image](https://user-images.githubusercontent.com/43013191/87711091-a99fe080-c75b-11ea-83fe-49f4c897a1bb.png)\r\n'
658429013,8181,b'Perform null check on glTF material parsing',b'The parser sometimes fails when one of the texture channels is null. This simply add a null check so things can continue on without failing.'
657746657,8180,b'Allow Eye gaze to be controlled with the mouse',"b""## Overview\r\nPulled in Julia's PR to allow eye gaze to be tracked using the mouse rather than just the forward axis of the camera.\r\n\r\n\r\n![eyegaze](https://user-images.githubusercontent.com/39840334/87720928-892b5280-c76a-11ea-9411-73ab69fc756c.gif)\r\n\r\n## Changes\r\n- Fixes: #7677"""
657736388,8179,b'Fix a TapToPlace issue caused by Start() execution order',"b'## Overview\r\nDue to the unpredictable execution order of Start() in Unity, StartPlacement() could be called by the Start() of another script before its own Start() is called, where expected behavior will not happen and user receives no warning.\r\n\r\n## Changes\r\n- Fixes: #8080 .'"
657689577,8178,b'Remove duplicate ObjectManipulator script in HandInteractionExamples',"b'## Overview\r\nThe Cube2 object had two ObjectManipulator scripts, which were identical except for the manipulation events section.\r\n\r\nThe duplicate one ended up having the wrong ordered configuration:\r\n![image](https://user-images.githubusercontent.com/5840182/87602707-528f0280-c6ac-11ea-8960-8ac8c8cbeb90.png)\r\n\r\ni.e. on start, it would play the ""end"" audio clip, and on end it would play the start one.\r\n\r\nNote that the other object manip script actually had the right configuration (i.e. start -> start, end ->end)\r\n\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8126'"
657515903,8177,b'Oculus doc update',b'## Overview\r\nSmall fixes to oculus documentation'
657029932,8175,b'Landing page update',"b""## Overview\r\nLanding page improvements.\r\n- Updated with new logo banner\r\n- Added 'Surfaces' app to the sample app list\r\n- Added MRDevDays session video links\r\n\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/tree/mrtk_development_landingpageUpdate071420\r\n\r\n![2020-07-14 20_16_42-cre8ivepark_MixedRealityToolkit-Unity at mrtk_development_landingpageUpdate07142](https://user-images.githubusercontent.com/13754172/87499615-9253dc80-c60f-11ea-97b8-763c7d066f9f.png)\r\n"""
656954799,8174,b'Update the MRTK object inspector tabs to properly render selection in Unity 2019',"b'It turns out that with the styling changes in Unity 2019, the ""selection"" state doesn\'t actually show up when we use boldLabel. We could probably do some custom styling so that it has the right highlight/select thing, but in this case using the default selection style works:\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/5840182/87485271-44c67800-c5ed-11ea-8d63-f6739b3a6902.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/5840182/87485279-4859ff00-c5ed-11ea-97eb-38932bb31579.png)\r\n\r\nUnity 2018:\r\n![image](https://user-images.githubusercontent.com/5840182/87485542-e0f07f00-c5ed-11ea-8639-a80601c385df.png)\r\n'"
656948883,8173,b'Fix dockable object assertion failure',b'## Overview\r\nCurrently dockable objects create assertion failures when being reenabled after being disabled in the docked state. The fix resets the docking state back to undocked when the object gets disabled.\r\n\r\n## Changes\r\n- Fixes: #8065 .'
656906287,8172,b'Add note about UWP in editor support for Leap',b'## Overview\r\nAdds a note at the top of the leap documentation that says the leap provider can be used in editor while on UWP but not in a build.\r\n\r\nAlso clarifies that the provider only supports standalone builds at the top instead of only in step 5.\r\n\r\n## Changes\r\n- Fixes: #7945 \r\n'
656904509,8171,b'Made hands free input simulation more responsive',"b""## Overview\r\nAdd on to PR #8156 \r\n\r\nThe previous PR makes it so the pinch gesture isn't raised immediately when using hands free input simulation. This PR improves the responsiveness by making the pinch gesture get raised as soon as the pinch button is pressed.\r\n"""
656745906,8170,b'Fix parameter expansion in CI versioning',"b""## Overview\r\n\r\nThe CI yaml format uses `${{ ... }}` for parameter expansion, which is apparently different from how you can specify things like `$(Build.SourcesDirectory)` on the line above.\r\n\r\nThis was causing\r\n\r\n>Formatted command: . 'f:\\aipmragent_work\\9\\s\\scripts\\packaging\\versionmetadata.ps1' -Directory: 'f:\\aipmragent_work\\9\\s' -Version: '$(parameters.MRTKVersion)'\r\n\r\nwhen CI runs."""
656362429,8168,b'Implementing requested improvements to HandBounds',"b'## Overview\r\nThere were several outstanding improvements requested on the last PR regarding the local AABB system. The requested improvements have been implemented and are ready to be merged.\r\n\r\n## Changes\r\n- Previously, the associated local bounds data was not removed `OnSourceLost`. This has been resolved.\r\n- An option for rendering the local bounds as a gizmo has been added. This involved adding an extra dictionary to cache the transformation matrices under which the local bounds are calculated. The `OnDrawGizmos` uses this cached `Matrix4x4` to correctly render the local bounds.\r\n- Comments have been clarified to make the distinction between proxy-space and hand-space clearer.\r\n\r\n## Verification\r\nUnit tests relying on `HandBounds` for correct hand data have been re-run and verified.\r\n'"
656247114,8167,b'Remove unneeded AssemblyInfo.cs',"b'## Overview\r\n\r\nAn AssemblyInfo.cs made it in between #8133 being opened and being merged. This removes it, to fix CI.'"
656214075,8166,b'Fix path to script for CI',"b'## Overview\r\n\r\n#8133 had an incorrect path to a `.ps1` script for the CI to run, causing CI failures. This updates it to correctly point to [scripts/packaging/versionmetadata.ps1](https://github.com/microsoft/MixedRealityToolkit-Unity/blob/mrtk_development/scripts/packaging/versionmetadata.ps1)'"
655052253,8165,b'Add support for packages that contain their own examples (ex: hand physics) and some script cleanup',"b'This change provides a generic implementation to support packages that contain their own example projects (ex: hand physics service).\r\n\r\nThe hand physics package.json was updated to create the samples entry and to not include the Examples folder (it would conflict if the example is imported into the project)\r\n\r\nWhile making this change, some script cleanup was performed (we do not need examplefolderpostupm.ps1).'"
655038163,8164,b'Updated Hololens2 conical grab pointers to default in MRTK 2.5',b'## Overview\r\nOfficially make the cone pointer standard for the hololens 2 profile in MRTK 2.5 and added documentation\r\n\r\n## Changes\r\n#7712\r\n#7934'
654517534,8162,b'The Dependency Window Now Searches for Meta Files Within Packages',"b'## Overview\r\n\r\nFiles that exist within the unity `Packages` folder do not get tracked by the Dependency Window. This could be especially bad if the MRTK is a package within a project.\r\n\r\nWhen a user clicks on a file within a package they are greeted with this cryptic warning:\r\n![image](https://user-images.githubusercontent.com/13305729/87118749-04ec4300-c231-11ea-8c43-1df7411dc9f7.png)\r\n\r\nWith this change files within packages are correctly added to the dependency graph.\r\n \r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8161\r\n\r\n## Verification\r\n> Please open the Dependency Window and note that more files are now searched.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
654477100,8160,"b'Re-implement hand bounds in local space, and added palm-based hand constraint safe zone targeting'","b'![handsolver](https://user-images.githubusercontent.com/5544935/87112332-00676080-c218-11ea-960e-a5955d72dfe3.gif)\r\n\r\n<img src=""https://user-images.githubusercontent.com/5544935/87213937-269f0600-c2d5-11ea-8e7a-26d4fcbcaa4a.gif"" width=400px> <img src=""https://user-images.githubusercontent.com/5544935/87213938-2999f680-c2d5-11ea-8554-ac3a3a508aa1.gif"" width=400px>\r\n\r\n\r\n## Overview\r\nThe HandConstraint system is quite robust, including the HandConstraintPalmUp extension; however, there is currently no way to constrain to the palm joint. Different safe zones targeting modes are available, but the palm is not one of them!\r\n\r\nThis small PR adds the ability to target an `AtopPalm` safe zone, which is either generated with the same raycast method that is already used for the other safe zones (not recommended) or is directly bound to the palm joint (recommended).\r\n\r\nMost notably, this palm-based target is compatible with all existing palm-up hand constraint systems (gaze targeting, proximity checks, etc).\r\n\r\nNote: above-palm targeting is _NOT_ recommended for menu placement, as noted in the official hand menu documentation! This feature is intended to constrain/target _other_ kinds of objects, like widgets and props.\r\n\r\nIn addition, **this re-implements/converts the existing hand bounds calculation system to also produce bounds that are represented in local palm-aligned coordinates**; this results in **significantly improved accuracy** when raycasting against hand bounds to find attachment safe-zones.\r\n\r\n## Changes\r\n- Adds the `AtopPalm` solver safe zone.\r\n- Adds palm raycasting to the raycast zone calculation system\r\n- Adds a special case for non-raycasting-based safe zone targeting\r\n- Adds a gaze target point for the palm-centered safe zone to the `HandConstraintPalmUp` component.\r\n- Adds a `LocalBounds` dictionary to the `HandBounds` component, and switches `HandConstraint` to use the `LocalBounds` when computing ray intersections.\r\n\r\n## Verification\r\nUnit test has been added to verify the `AtopHand` attachment safe-zone.\r\n'"
654404075,8159,b'Added smoothing factor for near object interaction',"b'## Overview\r\nCurrently the IsNearObject detection is very sensitive, meaning the user can be subject to hand rays suddenly flickering in and out of view. This PR adds a smoothing factor in order to reduce the sensitivity of the IsNearObject detection. \r\n\r\nBasically, when an object is inside the query radius, it then has to be outside queryRadius * (1+smoothingFactor) to no longer be detected\r\n\r\n![nearobjectflicker](https://user-images.githubusercontent.com/39840334/87099818-980c8500-c1ff-11ea-9ef0-8ba9a3aa8c31.gif)\r\n\r\n## Changes\r\n- Fixes: #7938\r\n\r\n'"
654368239,8158,b'More helpful error message when interactable has incorrect dimension index.',b'## Overview\r\nI found the extra log information helpful when debugging some incorrectly configured assets.\r\n\r\n## Changes\r\n- Related to: #8137 \r\n'
653635152,8156,b'Fixed issue of object shifting when doing a near grab interaction',b'## Overview\r\nObject no longer shifts when performing a near grab interaction\r\n\r\n## Changes\r\n- Fixes: #7936\r\n\r\nOld behavior\r\n\r\n![grabold](https://user-images.githubusercontent.com/39840334/86976604-b1460080-c12f-11ea-880c-0fb33eff8fc0.gif)\r\n\r\n\r\nNew behavior\r\n\r\n![grabfix](https://user-images.githubusercontent.com/39840334/86976611-b4d98780-c12f-11ea-907d-fbe1447751d7.gif)\r\n'
653619141,8155,b'prep for ump pipeline testing',b'initial pr to test upm pipeline work'
653439762,8154,b'scroll view graduation part 2',"b""## Overview\r\nThis PR is part of Scroll View graduation and addresses the following issues / fixes:\r\n\r\n #8148 \r\n- **Issue:** Scroll Object collection should only engage if touch comes from front of scroll slate but currently the user is able to trigger scroll even when hand comes from behind, top, bottom or sides of the scroll slate\r\n- **Fix:** Checking for previous position of poke pointer when touch started is handled\r\n![scroll_touch_from_back](https://user-images.githubusercontent.com/16922045/86943373-49e37d00-c13e-11ea-9fce-d3cddd22daa1.gif)\r\n\r\n\r\n #8064 \r\n- **Issue:** Currently there is no safe way of deleting child items from scroll collection. Destroying an object throw errors on console.\r\n- **Fix:** Added methods for safely for adding and deleting items.\r\n![image](https://user-images.githubusercontent.com/16922045/86942859-97abb580-c13d-11ea-9a96-61ae99775fb3.png)\r\n\r\nMissingReferenceException: The object of type 'BoxCollider' has been destroyed but you are still trying to access it.\r\nYour script should either check if it is null or you should not destroy the object.\r\nMicrosoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollection.HideItems () (at Assets/MRTK/SDK/Experimental/ScrollingObjectCollection/ScrollingObjectCollection.cs:1664)\r\nMicrosoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollection.LateUpdate () (at Assets/MRTK/SDK/Experimental/ScrollingObjectCollection/ScrollingObjectCollection.cs:1038\r\n\r\n#7449 . \r\n- **Issue:** scroll view should allow for near interaction area buffer in front, back, top, bottom and sides of scroll slate boundary o match shell behaviour. Currently only front buffer exists. \r\n- **Fix:** Exposing near interaction releaseThreshoulds for different axis / sides\r\n![scroll_buffer](https://user-images.githubusercontent.com/16922045/86945066-7bf5de80-c140-11ea-905e-6514723693d8.gif)\r\n\r\n\r\nThis PR is based on the Event Propagation feature branch.\r\n\r\n- Fixes #8148\r\n- Fixes #7449  \r\n- Fixes #8064 \r\n"""
651866758,8151,"b'UPM packaging, part 2'",b'This change is part 2 (of 3) that enables MRTK packaging and distribution via the Unity Package Manager. The changes included are:\r\n\r\n* createupmpackages.ps1 - main script that creates / publishes the MRTK packages\r\n* examplesfolderpreupm.ps1 - script that performs setup tasks to prepare the examples folder for packaging\r\n* examplesfolderpostupm.ps1 - script that performs cleanup tasks in the examples folder after packaging\r\n* .npmrc-test - .npmrc file used for publishing to the test server\r\n* .npmrc-official - .npmrc file used for publishing to the official distribution server (note: this file is not fully configured in this PR)\r\n* add package.json* files for examples and oculus provider\r\n* changes to the package.json files to enable setting the version as appropriate during CI\r\n* moved the Examples\\Inspectors folder to Examples\\Editor\\Inspectors for better categorization\r\n\r\nThe following image illustrates the Examples package in the UPM UI\r\n![image](https://user-images.githubusercontent.com/13281406/86807727-f9c9c500-c02e-11ea-9b12-9ea24684abc2.png)\r\n\r\n'
651815466,8149,b'Update settings.yml',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
650274511,8145,b'Split out WMR hand definition and WMR hand mesh provider',"b""## Overview\r\n\r\nTo reduce the amount of platform-specific code stored in a strict inheritance chain, I've split out the mesh code from the controller definition concept. Now, WMR articulated hands can use the base definition, while still defining their own way of providing the hand mesh (in this case, directly from the Windows APIs. In the future, other hand definitions may grab this from XR plug-in extensions)."""
650270007,8144,b'Add input simulation to XRSDK profile',"b""## Overview\r\n\r\nAdds the input simulation service to the XR SDK profile, so people can use it in-editor like they're used to."""
650120878,8142,b'Port #8100 to 2.4.1',b'## Overview\r\n\r\nPorts the change to turn `SpatialPointerPose.Head` off by default in 2.4.1 (#8100)'
649489439,8139,b'Several fixes and improvements to EyeTrackingTarget',"b'## Changes\r\n- Fixes: #8138\r\n- Expose static variables to easily see which object eyes are currently gazing at, which item was last selected.\r\n- Ensure mulitple click events are not raised from the same hand.\r\n- Add methods for manually invoking OnTapDown and OnTapUp events\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
649341609,8135,b'Update mappings for generic XR SDK controller',"b""## Overview\r\n\r\n1. Flips the generic handling of thumbstick / touchpad as primary / secondary axes to a more common case.\r\n    1. Overrides this flip in the WMR motion controller class correspondingly\r\n1. Re-serializes a scene profile to match the repo's build state\r\n1. Refactors out a WindowsMRUsage into an MRTK-defined `CustomUsage`, as the `pointerPosition` and `pointerRotation` features are shared across several packages."""
649150196,8133,"b'Revert #8005 (restore #7986 ""Automates the process of updating MRTK version metadata"")'","b'## Overview\r\n\r\nThis change reverts #8005, which itself reverted #7986 due to a resulting CI failure. As far as I can tell, the CI failure happened due to misaligned indentation in a yml file, which this PR additionally fixes up. Please see the above linked PRs for more information about this change.'"
648529739,8128,"b'UPM packaging, part 1'","b'This change adds the initial package.json files used to create UPM packages for MRTK. The packages created will be:\r\n* Foundation (includes SDK, Core Systems, Input Simulation, Input Animation and Object Mesh Observer)\r\n* Tools\r\n* Test Utilities\r\n* Providers\r\n  * Leap Motion\r\n  * OpenVR\r\n  * UnityAR\r\n  * Windows Mixed Reality\r\n  * Windows Voice\r\n  * XR Plugin (XR SDK)\r\n* Extension\r\n  * Hand Physics\r\n  * Tracking Loss\r\n  * Scene Transition\r\n\r\nAs part of this change, a small part of the tree was reorganized to better match their packaging:\r\n* Providers/ObjectMeshObserver -> Core/Providers/ObjectMeshObserver\r\n* Services/InputAnimation ->  Core/Providers/InputAnimation\r\n* Services/InputSimulation -> Core/Providers/InputSimulation\r\n\r\nExamples have not yet been packaged, while the overall strategy for samples distribution is determined,\r\n'"
648496150,8127,b'Add off-by-default verbose logging support to the MRTK',"b""This change introduces a LogVerbose and LogVerboseFormat helper along with some initial logging to critical systems (in particular, the input system and input simulation).\r\n\r\nCurrently the act of debugging issues in MRTK is fairly difficult because you have to be able to locally repro and issue (which usually means getting the exact setup of a consumer). It's otherwise fairly impossible to debug without having a local setup.\r\n\r\nLogging is a super common way of adding more information to the code so that instead of having to set up a local repro, we can ask consumers to take a log (i.e. just send us their unity player log/editor log between specific timestamps). The idea here is that we can use the log to either figure out what's wrong (oh look, you used ARM64 and there's this ARM64 bug that's affecting everyone right now), or use the log to narrow down on a specific issue (hey, we think it's probably because of the way this system is misbehaving, we still need to get a local repro but it'll be easier to immediately look into things because we know where to look).\r\n\r\nOverall this change adds:\r\n\r\n1. Verbose logging ability off by default (configured via the diagnostics tab).\r\n2. Some initial logging in the input system/MRTK core object.\r\n3. Docs guidance (both for the diagnostics system tab and for coding guidelines to add logs for interesting events)\r\n\r\nUsually you invest in logs from the beginning, so that they're useful from the get go - until we have more logs here it'll likely be that these won't be fully useful, however we have to start somewhere."""
647732278,8121,"b'Fix CI: remove link.xml* from the foundation nuspec, it is auto generated'",b'This change fixes CI by removing link.xml and link.xml.meta from MixedReality.Toolkit.Foundation.nuspec'
647715411,8119,b'Feature/touchslider',"b""## Overview\r\nA touchable slider that doesn't have to be pinched\r\n![image](https://user-images.githubusercontent.com/43013191/86062645-0d1cd500-ba1e-11ea-93fa-ab84f419eb6f.png)\r\n\r\nVideo: [https://gfycat.com/verifiablehastyaxolotl](https://gfycat.com/verifiablehastyaxolotl)\r\nThis is an experimental feature that was requested by the Guides team and might need some engineering assistance to bring it to maturity.\r\n\r\n## Verification\r\nIt only works with one finger in near field, so far field interaction has not been implemented yet.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
647707095,8118,b'Removes the memory alloc of FocusProvider::GetPointers',"b""## Overview\r\nGetPointers currently returns an IEnumerable backed by a List, which allocs memory for each call to it. While we could have 'saved' on this by caching a result for a particular type T on a per-Update loop basis, this would also end up making things more complex than necessary (i.e. saving cached state, clearing it, making it possible for us to hit bugs there).\r\n\r\nSince the function is already an IEnumerable, we can just use yield return typePointer to avoid allocing a return structure (thanks @Alexees for the solution here)\r\n\r\nWe use this in a bunch of non-test and test locations, so this is verified just with existing tests that pass.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8109\r\n\r\n"""
647681882,8117,b'Fixed XRSDK not adding controller devices',"b""Fixed bug where we wouldn't add devices with either handtracking or controller inputdevicecharacterisitcs, but not both.\r\n"""
647581978,8116,b'Update Unity versions for public CI / PR validation',"b""## Overview\r\n\r\nA CI machine was updated with these latest Unity versions, so this PR intends to test out the installs / new machine.\r\nWe may want to hold off merging until additional machines are updated, or else we'll be stuck with a single machine for both CI and PR validation."""
647529745,8115,b'Feature/joystick',"b""## Overview\r\nMinor UX improvements\r\nVideo: [https://gfycat.com/obedientpracticalbobwhite](https://gfycat.com/obedientpracticalbobwhite)\r\n![image](https://user-images.githubusercontent.com/43013191/86156887-769ef100-babb-11ea-85be-ed6a6aed89d2.png)\r\n\r\n\r\n## Changes\r\n- Added 'Experimental' tag\r\n- Created a floor grid material that fills the floor plane and renders well on device\r\n- Changed name from 'ObjectToManipulate' to 'TargetObject' for better consistency\r\n\r\n## Verification\r\nCheckout the PR locally and validate the floor material looks OK and the joysticks control position / scale / rotation\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n """
645922423,8108,b'added android pipeline build template',b'Plumbing work to get android build pipeline working'
645916317,8107,b'Modify how spatial mesh updates are handled',"b'This change modifies how spatial mesh updates are handled. Instead of removing then re-adding to the collection, this change updates the mesh data in place and then reclaims the previous object.\r\n\r\nFixes: #8097'"
645860606,8106,b'Update references to Rest to specify more fully qualified names.',"b""## Overview\r\nThis updates some of our usage of Rest.cs (i.e. our internal rest helper) to provide more fully qualified paths so that we can avoid conflicts with other code (i.e. Microsoft.Rest) when integrating with other Azure services.\r\n\r\nIdeally we would just rename Rest.cs to RestHelper.cs, but unfortunately that would end up being a breaking change (of which the value here hasn't quite gotten there yet to ingest that breaking change pain).\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/8104"""
645757354,8105,b'Replace Assets/link.xml with dynamically created one in MRTK.Generated',"b'This change removes the link.xml file from the Assets folder and replaces it with one that is auto-created in the MixedRealityToolkit.Generated folder. Per Unity documentation, multiple link.xml files are allowed and can be placed anywhere in the Assets tree.\r\n\r\nThis change enables the current code preservation level (and adds recently introduced assemblies) to work when MRTK is installed via the Unity Package Manager.'"
645067407,8103,b'Add InputFeatureUsage scene',"b'## Overview\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/85641222-c5273800-b642-11ea-8f25-2acd825568d9.png)\r\n\r\nAdds a new runtime tool test scene, in the same vein as the existing controller mapping tool.\r\nWhile the existing tool works with Unity input axes and keycodes, the recommended way of getting data going forward in Unity is `InputFeatureUsage`s. This tool queries detected sources for their reported features, then displays them and their current data in the panels.\r\n\r\nHelps especially with adding new XR SDK controllers and platforms.'"
645060906,8102,b'Normalize copyright and license header formats',b'This change makes sure all Microsoft copyright and license assertions are in the same format. The new format follows current guidance.\r\n\r\nChanges are:\r\n\r\nFrom: // Copyright (c) Microsoft Corporation. All rights reserved.\r\nTo: // Copyright (c) Microsoft Corporation.\r\n\r\nFrom: // Licensed under the MIT License. See LICENSE in the project root for license information.\r\nTo: // Licensed under the MIT License.\r\n'
644959882,8101,b'Make the RemoveController API public so that applications can work around stale sources when the app is paused',"b'## Overview\r\nWhen Unity is paused and then resumed, the InteractionManager gets in a bad state, and some InteractionSources never have their SourceLost event raised even if the sources are no longer relevant. This change is making the RemoveController API public so that applications like Remote Assist can work around this problem while waiting for a proper fix from Unity.\r\n\r\nHere\'s the additional code we plan to add to our application as part of this workaround:\r\n\r\n```\r\npublic class StaleInteractionSourceMonitor : MonoBehaviour\r\n{\r\n    private static readonly TimeSpan staleSourceWaitTime = TimeSpan.FromMilliseconds(500);\r\n    private CancellationTokenSource cancelInteractionSourceCleanup;\r\n\r\n    private void OnApplicationPause(bool pause)\r\n    {\r\n        this.cancelInteractionSourceCleanup?.Cancel();\r\n\r\n        if (!pause)\r\n        {\r\n            this.cancelInteractionSourceCleanup = new CancellationTokenSource();\r\n            CheckForStaleSourcesAsync(this.cancelInteractionSourceCleanup.Token);\r\n        }\r\n    }\r\n\r\n    private static HashSet<InteractionSource> GetCurrentSources()\r\n    {\r\n        var interactionSources = new HashSet<InteractionSource>();\r\n        foreach (var interactionSourceState in InteractionManager.GetCurrentReading())\r\n        {\r\n            interactionSources.Add(interactionSourceState.source);\r\n        }\r\n\r\n        return interactionSources;\r\n    }\r\n\r\n    private async void CheckForStaleSourcesAsync(CancellationToken cancellationToken)\r\n    {\r\n        HashSet<InteractionSource> potentiallyStaleSources = GetCurrentSources();\r\n        Action<InteractionSourceLostEventArgs> sourceLost = e =>\r\n        {\r\n            potentiallyStaleSources.Remove(e.state.source);\r\n        };\r\n\r\n        InteractionManager.InteractionSourceLost += sourceLost;\r\n        await Task.Delay(staleSourceWaitTime, cancellationToken);\r\n        InteractionManager.InteractionSourceLost -= sourceLost;\r\n\r\n        if (cancellationToken.IsCancellationRequested)\r\n        {\r\n            return;\r\n        }\r\n\r\n        HashSet<InteractionSource> stillRelevantSources = GetCurrentSources();\r\n\r\n        var deviceManager = CoreServices.GetInputSystemDataProvider<WindowsMixedRealityDeviceManager>();\r\n        if (deviceManager != null)\r\n        {\r\n            foreach (InteractionSource staleSource in potentiallyStaleSources)\r\n            {\r\n                if (!stillRelevantSources.Contains(staleSource))\r\n                {\r\n                    Debug.Log($""Removing a stale source {staleSource.id}"");\r\n                    deviceManager.RemoveController(staleSource);\r\n                }\r\n                else\r\n                {\r\n                    Debug.Log(""$Potentially stale source was still relevant, keeping it"");\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Debug.LogError(""Failed to get the WindowsMixedRealityDeviceManager"");\r\n        }\r\n    }\r\n}\r\n```'"
644739574,8100,b'Turn off head gaze override by default',"b""## Overview\r\n\r\nAs the platform feature begins roll-out, it'd be best to allow this feature to be opt-in until broad deployment of the feature is achieved.\r\n\r\nRequest from the platform team."""
644318120,8099,b'NonNativeKeyboard add events for when char and function keys pressed',b'## Overview\r\nAdds two new events to the Experimental NonNativeKeyboard\r\n\r\n1. OnKeyboardValueKeyPressed\r\n2. OnKeyboardKeyFuncPressed\r\n\r\nFixes:#8098'
644173931,8096,b'BoundsExtensions compute bounds relative to another transform',"b'## Overview\r\nAdd optional parameter to BoundsExtensions.ComputeBoundsPoints to compute bounds relative to another transform.\r\n\r\nAlso create a new test file for BoundsExtensions, and add two small tests to BoundsExtensions, including one to verify this change.\r\n\r\n## Changes\r\n- Fixes: #8089 \r\n'"
644172433,8095,b'Color Picker',"b'## Overview\r\nThis is an experimental control that makes it easy to change material colors on any object at runtime. The goal is to define the best interaction method that feels natural and intuitive for both near and far field. There are tabs that toggle between different modes that traditional 2D designers will feel comfortable with including Gradient, Wheel, RGB and HSV. This can also be extended to make adjustments to many shader properties as well.\r\nhttps://thumbs.gfycat.com/BigPleasantAffenpinscher-mobile.mp4\r\n\r\n![ColorPicker](https://user-images.githubusercontent.com/43013191/85468370-3b536e00-b561-11ea-812c-b3f7d43dd999.png)\r\n\r\n## Verification\r\nTested frequently in editor and on Hololens2 with both Sprites and Meshes in near and far field.\r\n\r\n![ColorPickerStates](https://user-images.githubusercontent.com/43013191/85468994-fa0f8e00-b561-11ea-89f2-0810d1998518.png)\r\n\r\n\r\nPlease check out the ColorPicker example scene to verify example use of the picker.\r\n'"
643936648,8091,b'Scroll Graduation ',"b'## Overview\r\nThis PR is part of Scroll View graduation and addresses the following issues / fixes:\r\n\r\n #7444, #7445, #7447 .\r\n- **Issue:** When user engage in a scroll drag, pointer, touch, and input event data have eventData.used set to true on Scroll Object Collection. MixedRealityInputSystem halts event dispatch if event data is used by global listener, so children buttons cannot proper receive OnTouchCompleted events. \r\n- **Fix:** using propagation event routing, events dispatch is not stopped when eventdata.used == true. Tests added.\r\n![scroll_reset_before](https://user-images.githubusercontent.com/16922045/85422373-6fcd2700-b56d-11ea-9bb4-9d19e5ce62fd.gif)\r\n\r\n #7446 .\r\n- **Issue:** Scroll engage should trigger children interaction reset\r\n- **Fix:** Instead of directly accessing children code, focus on children is unlocked and moved to a scroll background collider setup on runtime. Tests added.\r\n\r\n #8068 .\r\n- **Issue:** Scroll View should allow for engage with empty background areas\r\n- **Fix:** the scroll view now has a near touchable setup during runtime to receive focus and enable catch of events from empty areas without the need for global event subscription. Tests added.\r\n ![scroll_empty_before](https://user-images.githubusercontent.com/16922045/85419058-81143480-b569-11ea-98da-9bd60d0a4582.gif) \r\n\r\n#7448 .\r\n- **Issue:** Sometimes Scroll position jumps when interacting with children.\r\n- **Fix:** Removed timed check for detection of drag and zeroed hand delta when drag scroll starts. Tests added.\r\n![scroll_jump_before](https://user-images.githubusercontent.com/16922045/85420673-6cd13700-b56b-11ea-8aac-6fb795391e95.gif)\r\n\r\n## Other changes\r\n\r\n- **Pointer event handler workaround** - \r\nScrollObjectCollection was subscribing as a global listener for pointer events. During pointer event handling a check for event target in the list of scroll children was also required. To improve performance a proposed workaround makes global registration only temporary in between a pointer down and a pointer up. Other solution ideas are welcome.\r\n\r\n- Deleted input handler implementation as no need to talk directly with interactable.cs children\r\n- pointer handler interface only receives propagation events, but register for global when drag starts\r\n- Changed velocityMultiplier and handDeltaMagThreshould to incorporate magic numbers\r\n- Changed velocityMultiplier and handDeltaMagThreshould default values on demo scenes and prefabs\r\n- Exposed ScrollObjectCollection isEngaged for tests\r\n\r\nThis PR is based on the Event Propagation feature branch.\r\n\r\n- Fixes #7444\r\n- Fixes #7445 \r\n- Fixes #7446 \r\n- Fixes #8068 \r\n- Fixes #7447\r\n- Fixes #7448 \r\n  \r\n'"
643253890,8088,b'Oculus XRSDK support',b'## Overview\r\nAdds support for Oculus Touch Controllers using the new XRSDK.\r\n\r\n## Addresses\r\nFeature Request: #7272\r\n\r\n## Verification\r\nTested in Unity 2019.4'
642207274,8085,b'Update MixedReality.Toolkit.Foundation.nuspec',b'## Overview\r\n\r\nMy previous PR (#8084) was incomplete. This _should_ now fix the NuGet build.'
642149456,8084,b'Add new layer to nuspec files to fix build',"b'## Overview\r\n\r\nFrom the MRTK folder rename, a new layer of folders was added. Not all of the .nuspec files were updated for the lines that were uncommented in #8074.'"
641595914,8075,"b""Add a .unitypackage for MRTK's TestUtilities""","b""The TestUtility refactor that @CDiaz-MS did a while back added some cool NuGet package for the MRTK test infrastructure. This has been used internally by a few teams to build out their test infra, and up until now we haven't had a .unitypackage equivalent.\r\n\r\nThis PR publishes the core set of test infrastructure that the MRTK itself uses to write integration tests, things like:\r\n\r\n1. Show hand there.\r\n2. Pinch\r\n3. Move hand over there.\r\n4. Release\r\n\r\nThis lets you write automated tests that interact with things in your scene, so that instead of having to do manual test passes, you can have automated (i.e. CI-time) coverage of core/common things. The tests that we've written have helped us avoid regressions in components and to prove functionality, and it's like that consumers will also be able to benefit from this.\r\n\r\nNote that there is an initial investment to writing any set of tests, but the payoff is usually worth it (it has been worth it for us)"""
641585574,8074,b'Re-enable source debugging for the nuget packages',"b""This change reverts https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6618 to enable source debugging of NuGet packages.\r\n\r\nNote that this makes any generated nuget packages not work with Nuget4Unity (which we haven't supported from 2.4 and on). This primarily affects anyone who has stood up their own internal build/nuget pipeline to build their own packages. For those folks you'd have to strip out the sources (i.e. revert this revert)\r\n\r\nIdeally we would actually use a different mechanism for source debugging (i.e. maybe something like https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/), but this is a cheap way of unblocking other work."""
641578025,8073,b'Update InputSimulationWindow to show pause button',"b'## Overview\r\n\r\nCurrently, the button stays with the ""play"" icon even while playing:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/85076634-5dba4580-b175-11ea-8392-437034f4c255.png)\r\n\r\nthe repo\'s icon set contains a pause button, so I updated the script to load it and display it when relevant:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/85076672-70cd1580-b175-11ea-94d7-d2e5346d5656.png)\r\n\r\nAlso, formatting.'"
641514314,8072,b'Fix platform-specific profile deserialization issues',"b'This change addresses a class of issues like:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/8067\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/7669\r\n\r\nThe root cause and solution is interesting to discuss here:\r\n\r\nWhen the MRTK object gets initialized, its profile/asset is deserialized first (so that it can then use that deserialized asset in order to do things with that data). Some of the types that are currently serialized (i.e. camera settings, spatial object mesh, leap) are marked as only being compiled into specific platforms. So if you take the common project you have and then deploy it to another platform, even though the MRTK is separately properly handling not creating those entities on the unsupported platforms, before MRTK even has a chance to have any say in the matter, Unity will try to deserialize those types (this is expected + by design).\r\n\r\nThe issue is that if you\'re on a platform that isn\'t marked as as supported (let\'s take leap as an example), the profile code is completely compiled away (i.e. assembly is totally missing). So when unity deserialization happens, it tries to load the type (it\'s not there) and then it fails and ends up spewing errors like this:\r\n\r\n```\r\nA scripted object (probably Microsoft.MixedReality.Toolkit.WindowsMixedReality.WindowsMixedRealityCameraSettingsProfile?) has a different serialization layout when loading. (Read 80 bytes but expected 92 bytes)\r\nDid you #ifdef UNITY_EDITOR a section of your serialized properties in any of your scripts? \r\n(Filename: C:\\buildslave\\unity\\build\\Runtime/Serialize/SerializedFile.cpp Line: 2269)\r\n```\r\n\r\nThe error itself is a bit misleading - while an #idfef UNITY_EDITOR is one example, the actual cause here is that the entire file/class is missing.\r\n\r\nThere were a few solutions, and I ultimately went with this approach.\r\n\r\nOther alternatives:\r\n\r\n1. Custom deserialization/serialization. This would work but adds considerable complexity to a system that is already fairly complex. I think that this would make debugging/maintenance of this profile system more complicated/difficult going foward.\r\n2. Build-time profile modification to drop unsupported platforms. This would work by, on pre-process build, doing some work to extract the current profiles on the system, shuffle them somewhere else, and then modify the ones that get built so that they strip away references to types that aren\'t supported on the current build platform. This would add to overall build times to do this processing and also seemed too complicated to maintain going forward.\r\n\r\nI ultimately went with a simpler thing here which was making it so that the profiles themselves (along with any types that needed serialization) would go into their own asmdef (named ""serialized""). This assembly would be marked as supporting all platforms, making deserialization of those types no longer problematic. This has some overhead in that it adds ~3 more asmdefs for these, but with the current plans to move to UPM distribution this should hopefully not end up being a huge burden when folks are moved over to UPM (i.e. you won\'t see these additional asmdef projects when consuming via UPM)\r\n\r\nA few other notes on what had to be changed:\r\n\r\nI ended up making it so that the MixedRealityServiceProfileAttribute supported having services declare their supported profiles, allowing for the reverse linkage. This was to solve a circular reference, where profiles (all platforms) had a dependency on the service (not all platforms, also had a dependency on profile). This was used to solve the UnityAR, WMR, and LeapMotion cases.\r\n\r\nI added CI support to detect this issue going forward so that we don\'t regress again. i.e. this will catch future cases where people check in non-fully-deserializable profiles.\r\n\r\nI modified the hand physics to be all-platform based (I believe that these are actually really all-platform supporting things i.e. leap bringing hands to standalone, quest having hands support via MRTK-Quest).'"
641496663,8071,b'Update some textures to load by GUID',"b""## Overview\r\n\r\nIn support of #8058, this PR updates a few cases where textures attempt to load by path, and it's assumed the path is in `Assets`. Though, when consuming MRTK via UPM, those paths don't resolve correctly.\r\n\r\nUsing Unity's APIs and consistent GUID references allows these textures to be loaded regardless of where the file is located."""
641494068,8070,b'Update test icons',b'## Overview\r\n\r\nA few tests were missing the test icons.'
639310081,8060,b'Updated BoundsControl rotation calculations + lerp/smoothing',"b""## Overview\r\n\r\nUpdates the rotation calculation method in `BoundsControl` to use an init-rotation method, instead of the per-frame method that was being used before.\r\n\r\n- Before: a single-frame delta would be obtained from the controller/pointer position, and this single-frame delta would be applied to the object each frame, many times.\r\n- Now: In the same way that the scale handles are calculated, an initial rotation is first calculated, and then a **_full_** delta is calculated, from the init rotation all the way to the current intended rotation. The object's rotation is then set according to this delta.\r\n\r\n**Motivation for this change: ** the per-frame method actually induces a significant amount of error during rotations. Due to inherent jitter and imprecision in how the hand/pointer positions are reported, it is actually possible to move your hand very slowly while rotating a `BoundsControl` and end up with _zero rotation actually effected upon the object._ By calculating the rotation by comparing the current rotation/pointer position to the initial rotation, and performing an absolute rotation assignment, this error is not present.\r\n\r\nYou might also notice that the rotation vectors are now calculated in relation to `transform.position` instead of `rigRoot.transform.position`. This is to resolve erroneous and undesirable behavior when rotating `BoundsControls` with large off-axis displacements; as the `BoundsControl` is actually rotated _around_ `transform.position`, and not the `rigRoot`'s position, this could cause strange behaviors. \r\n\r\nIn addition, `BoundsControl` is upgraded to use the same input smoothing system that `ObjectManipulator` currently uses. The code included for this is taken directly from `ObjectManipulator`. The `smoothingActive` property is set to false by default for compatibility with existing unit tests.\r\n\r\n## Changes\r\n- Rotation is now calculated per-manipulation, not per-frame, resulting in enhanced accuracy and precision (and resolving drift issues)\r\n- Rotation is now calculated in relation to `transform.position` instead of `rigRoot.position`, resulting in more coherent hand/ray interactions\r\n- Configurable lerp/smoothing is now available in `BoundsControl`, implemented identically to `ObjectManipulator`\r\n\r\n## Verification\r\n- All existing `BoundsControl` manipulation-based tests pass.\r\n- `ObjectManipulator` does not test smoothing; if we add unit tests to verify smoothing for `BoundsControl`, the same tests should also be devised for `ObjectManipulator`\r\n"""
639265613,8059,b'Fix SurfaceNormalOffset configurability + custom inspector for Tap to Place',"b'## Overview\r\n\r\nAdded `UseDefaultSurfaceNormalOffset` property to Tap to Place to enable developers to either set a new `SurfaceNormalOffset` value or use the default value. \r\n\r\nCreated a custom inspector that only displays the `SurfaceNormalOffset` property if `UseDefaultSurfaceNormalOffset` is false, and grouped other advanced properties under a foldout.\r\n\r\nAdded TestTapToPlaceSurfaceNormalOffset test for the change.\r\n\r\n## To Do\r\n\r\n- [x] Update documentation with new property\r\n\r\n- [x] Update test\r\n\r\n## New Tap to Place Inspector \r\n**SurfaceNormalOffset Visibility depending on UseDefaultSurfaceNormalOffset**\r\n\r\n| `UseDefaultSurfaceNormalOffset` false| `UseDefaultSurfaceNormalOffset` true|\r\n|--------|-------|\r\n| ![image](https://user-images.githubusercontent.com/53493796/84715453-5ac91600-af25-11ea-81c9-08ffd392e583.png) | ![image](https://user-images.githubusercontent.com/53493796/84715482-6f0d1300-af25-11ea-9fe5-cb7a798b8556.png) |\r\n\r\n**Advanced Properties Foldout:**\r\n![image](https://user-images.githubusercontent.com/53493796/84715661-f9557700-af25-11ea-9207-c98b121dd003.png)\r\n \r\n\r\n## Changes\r\n- Fixes: #8053 \r\n'"
639240109,8058,b'Lay the foundation for supporting UPM packaging of MRTK',b'This change updates the MixedRealityToolkitFiles class to support MRTK residing either the Assets (direct import) or Packages (UPM import) folders. Tests have been added for the new file path processing functionality.\r\n\r\nOne additional change is to shorten the length of the Wndows Mixed Reality Configuration Checker assembly name as it causes issues due to an increased path length when imported via UPM.\r\n\r\nNOTE: This change does not create UPM packages. That change will follow at a later time.'
638464545,8054,b'Fixed cursor persisting on screen when app is suspended',"b'## Overview\r\nCurrently, when an app is suspended and the run in background flag is not turned off, hands will linger on the screen after resuming the app in certain circumstances (specifically, when a tracked hand is moved out of view and then moved back into view). The behavior now makes it so that no hands are loaded upon resuming the app, which matches the behavior we experience when the app starts.\r\n\r\n## Changes\r\n- Fixes: #8016\r\n\r\n## Verification\r\nTested on HoloLens 2 device with the run in background flag turned off.\r\n'"
638293804,8052,b'Optional Forces for ObjectManipulator',"b'## Overview\r\n\r\nWhen ObjectManipulator is used on an object with a RigidBody, using forces for near manipulation is now optional and defaults to off. This makes near manipulation of these kinds of objects feel much more responsive.\r\n\r\nSee issue #8051 for more background.\r\n\r\n\r\n## Changes\r\n- Fixes: #8051 \r\n\r\n\r\n## Verification\r\nPlease help verify that existing samples continue to work. Especially the hands interaction sample. '"
638009069,8050,b'First set of active profile change fixes',"b'This change is the first in a series of changes that will addresses the issues encountered when changing the active mixed reality toolkit configuration profile while the application is running.\r\n\r\nThe actual number of future PRs has not yet been determined. Test collateral and documentation will be included in the series as fixes enable them.\r\n\r\n- Failure to recreate the UIRaycastCamera\r\n\r\n~~Change from Destroy to DestroyImmediate as the service locator expects the UIRaycastCamera to me immediately removed in order to correctly re-create it.~~\r\n\r\n- Handle data provider collection change during {Late]Update\r\n\r\n~~This change handles the InvalidOperationException that is thrown when a collection is changed during enumeration, This prevents the code from incorrectly aborting.~~\r\n\r\n- Handle service collection change during ExecuteOnAllServices<In|Reverse>Order\r\n\r\n~~This change replaces for with foreach and handles the InvalidOperationException that is thrown the services collection is changed during enumeration. This prevents the code from incorrectly aborting.~~\r\n\r\nIn this PR, the behavior of runtime profile change is modified to first take the request, then destroy current profile services after all LateUpdate()s of current profile services have been called, and finally initialize the new services associated with the new profile in the next frame before any Update() for a service is called. This solves the problem of potentially performing the profile change in the middle of an Update or LateUpdate of a service which causes a variety of problems. Delaying the initialization of new services to the next frame also helps to resolve the problems related to Destroy().\r\n\r\nTesting\r\n\r\n- In editor using simulated hands\r\n- Toggle between two profiles on a click event\r\n- Confirm that interactable objects continue to function after re-acquiring the hand.\r\n- Attempt to use UnityUI\r\n  - Fails with far interaction\r\n  - Works with near interaction\r\n\r\n\r\n'"
637330871,8045,b'Update the release notes to point to where to download the MRTK bits.',"b""Adding a direct download link from the release notes, so that you don't have to navigate some other structure in order to find the MRTK download bits.\r\n\r\nI opted to only link to the .unitypackages because those are the core bits needed to start building."""
636599174,8042,b'Fix some AddComponentMenu paths',"b'## Overview\r\n\r\nThree components used identical `MixedRealityKeyboard` paths, and one was missing the `Scripts` entry in the path.'"
636569930,8041,b'Simulation profile speed normalization',b'## Overview\r\nNormalizes the movement speed on our input simulation profiles\r\n\r\n## Changes\r\n- Fixes: #8038\r\n'
636125642,8037,b'Update README_HandCoach.md',b'This field should be  RotateAroundPoint rather than  MoveToTarget .there is a mistake\r\n'
635890799,8035,b'Bounds override fix',"b'## Overview\r\nIn `BoundingBox`, you can set a `boundsOverride` collider which essentially provides a ""proxy object"" to provide the bounds to the `BoundingBox`. There is an optional `boxPadding` that can be applied to this collider, to space out the `BoundingBox` around the object.\r\n\r\nUnfortunately, this padding is achieved by destructively resizing the provided `boundsOverride` `BoxCollider`.\r\n\r\nIn the existing code, there is a line that is intended to compensate for this destructive resizing operation; in `DestroyRig` the code resizes the `boundsOverride` in the _negative_ direction of the padding, effectively cancelling out the previous padding operation.\r\n\r\nHowever, `DestroyRig` is actually called first when we are creating the rig (it\'s actually included inside `CreateRig`, ironically!), in addition to being called when we destroy the rig; it seems as though the original author of the code believed that `DestroyRig` was only called when the rig was being torn down (honest assumption, and shouldn\'t cause issues most of the time!)\r\n\r\nThis has the ill effect, however, of resizing the `boundsOverride` one too many times when you repeatedly set the `BoundingBox` to be Active/Inactive. If you continue activating/deactivating the `BoundingBox` gameobject, the bounds will continue to grow/shrink to a very large (and incorrect) size!\r\n\r\nThis PR fixes this behavior in the following way: instead of applying negative padding to ""cancel out"" the resizing operation, it simply resets the `boundsOverride` to whatever size it had when the `BoundingBox` was enabled, and when `CreateRig()` was called.\r\n\r\nThis resolves #7997 :)\r\n\r\n## Changes\r\n- Resolves #7997 by preventing unwanted `boundsOverride` resizing behavior when toggling the status of the root `BoundingBox` object.\r\n- Adds a `Vector3? initialBoundsOverrideSize` which is used to record the size of the `boundsOverride` when the rig is constructed.\r\n- Adds code in `DestroyRig` to reset the `boundsOverride` size to the recorded `initialBoundsOverrideSize` when destroying/tearing down the rig.\r\n- Adds unit test that covers the issue reported in #7997.\r\n\r\n## Verification\r\n- An additional test has been added to verify that changing `boundsOverride` size and toggling the active status of the `BoundingBox` does not destructively modify the `boundsOverride` size.\r\n'"
635838577,8033,"b'Move ""Enable MSBuild for Unity"" from config dialog to MRTK menu'","b'Based on community feedback, this change moves the Enable MSBuild for Unity option from the MRTK Configuration dialog to the Mixed Reality > Utilities menu.\r\n\r\n![image](https://user-images.githubusercontent.com/13281406/84213229-f9143200-aa74-11ea-85d1-d7f2381ced4f.png)\r\n\r\nIn addition, it adds an option to _disable_ MSBuild for Unity if the user determines they prefer to no longer use it.\r\n\r\nAs part of this change, any refererence to Configurations.EnableMSBuildForUnity will encounter an obsolete message (forced to be an error) instructing to no longer use that enum value. Subsequent enum values have had their values explicitly set to avoid breaking changes.\r\n\r\nCurrently this is a draft PR to collect initial feedback while testing occurs on Unity 2019.3/4.\r\n\r\nThe following dialog will display when running Unity 2019.\r\n\r\n![image](https://user-images.githubusercontent.com/13281406/84297173-f4e22600-ab01-11ea-8467-bfb19c81f740.png)\r\n\r\nFixes #8031, #8027'"
635674137,8032,b'Update WMR Plugin version to 1.0.21',"b'## Overview\r\n\r\n1.0.21 updated the remoting plugins to 2.1.3, which [fixes some stability bugs that some devs were hitting](https://docs.microsoft.com/en-us/windows/mixed-reality/holographic-remoting-version-history). A selection of changes between the previous version and this one:\r\n\r\n> 1. Starting with version 2.1.3 HolographicSpace.CameraAdded is synchronized with pose data coming from the Holographic Remoting Player and users can expect that when a camera is added there is also a valid HolographicCameraPose available for that camera on the the next frame.\r\n> 1. Added support for HolographicCameraRenderingParameters.CommitDirect3D11DepthBuffer.'"
634983781,8029,b'Graduate UnityAR camera settings provider',"b'Based on customer feedback seen / received since the Unity AR camera settings provider was originally released as an experimental component (MRTK 2.2), it is ready to graduate.\r\n\r\nThis change updates the namespace to remove ""Experimental"".\r\n'"
631794166,8022,b'Make sure to check that the AssemblyDefinition for LeapMotion exists before trying to use it',"b'When consuming MRTK through NuGet, the LeapMotionConfigurationChecker throw an IndexOutOfRangeException because the asmdef file does not exist. However, this is expected when using compiled NuGet binaries.\r\n\r\nThe fix here adds a length check, and does not continue configuration if the asmdef is not found in the assets directory.\r\n\r\n## Changes\r\n- Fixes: #8021 '"
631335400,8020,b'fixed flicker issue',b'## Overview\r\nFixed issue with bounds control where the box would flicker continuously if only the handles were in the near interaction radius. This was addressed by adding a script that identified handles as such and having the near interaction field ignore them\r\n\r\n## Changes\r\n- Fixes: #6220 #7935 \r\n'
631175312,8019,b'Damped harmonic oscillator/elastic sim system',"b'## Overview\r\nThis PR presents a small subset of the elastic interaction system I\'ve been working on.\r\n\r\n![elastic_pr](https://user-images.githubusercontent.com/5544935/83814923-b107a080-a66b-11ea-8b80-02529257d22a.gif)\r\n\r\nI sought to make this system as generalized as possible; a two-handle-manipulator system is included as an example of how to use the `ElasticSystem`.\r\n\r\nThe elastic system is generalized to an n-dimensional damped harmonic oscillator; by implementing subclasses of `ElasticSystem` and using the generic-typed `ElasticProperties<T>` structure, any dimensionality of oscillator can be constructed. This includes 4-dimensional quaternion harmonic oscillators.\r\n\r\nThe hope is that this system could be utilized in the near future to add more satisfying interactions to Sliders, ObjectManipulators, and other MRTK elements.\r\n\r\nMost importantly, the elastic system can be deeply configured with physically-accurate properties, such as: \r\n\r\n- Spring mass\r\n- Spring limiters (end-caps)\r\n- Snapping points\r\n- Hand, end-cap, and snapping point spring constants (k)\r\n- Drag coefficient\r\n- Snapping point radii\r\n- End-cap snapping\r\n\r\nYou can also adjust the one-handed stretch behavior.\r\n\r\nMore drawstring functionality will be added in a separate PR; this is intended as an ""MVP"" elastic system PR so this elastic functionality can be added in isolation.\r\n\r\n\r\n## Changes\r\n- Adds `ElasticSystem`, an abstract elastic system class.\r\n- Adds `LinearElasticSystem`, a subclass which implements a one-dimensional damped harmonic oscillator.\r\n- Adds `ElasticHandleLogic`, a component patterned after `ScaleLogic` and `MoveLogic` that allows manipulator-like components to utilize the springy behavior of the `ElasticSystem`\r\n\r\n**NOTE: ** `TwoHandleManipulator` is removed from this PR, as it was out of scope and presented several more design questions that we need to answer.\r\n\r\n## Verification\r\nUnit tests have been added for the `ElasticSystem`, but not the `ElasticHandleLogic`. More tests will come as these features are graduated to non-experimental status.'"
631094178,8018,"b'Pave the release notes to create a space to track updates, breaking changes, and known issues for the next release.'","b""We're starting to get some changes that will go toward the next release, and it's best to be adding known issues/changes as we go (rather than doing it all at the end!)\r\n\r\nSince we reset the release notes per-release (i.e. in order to get past release notes, you go to the specific release: https://microsoft.github.io/MixedRealityToolkit-Unity/version/releases/2.3.0/Documentation/ReleaseNotes.html), we basically re-pave this markdown file each time."""
630904101,8017,b'Add option to omit SSL Certificate Verification for Device Portal',"b'## Overview\r\n\r\nOn certain devices, i.e. HoloLens 2, the device portal seems to be forcing SSL and even redirecting HTTP to HTTPS. To omit SSL errors rejecting the self-signed device portal certificates when using the MRTK Build Window Deploy Options tab, an option is added to turn off the SSL Certificate Verification.\r\n\r\n![image](https://user-images.githubusercontent.com/44086818/83771449-97258800-a682-11ea-95a7-edabec40a490.png)\r\n\r\nThis option is per default turned on, so to not alter the default behavior, as disabling SSL Verification may pose a security risk in some instances.\r\n\r\nThis change also displays the ""Use SSL"" checkbox for local USB connection, as HoloLens 2 uses a HTTPS connection at `https://127.0.0.1:10443/`.\r\n\r\n## Changes\r\n- Fixes: #6877\r\n\r\n'"
630319055,8015,b'Ensure that the MixedRealityInputModule.OnPointerUp does not throw a KeyNotFoundException',"b'## Overview\r\nFrom https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7989, if OnPointerUp happens during an OnSourceLost, and if the BaseControllerPointer handles the OnSourceLost after MixedRealityInputModule, then OnPointerUp here can throw a KeyNotFoundException.  MixedRealityInputModule should be resilient to the effects other handlers of OnSourceLost, and not throw an exception if the pointer has already been removed.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7989.\r\n'"
630085985,8013,b'Fixing slate zoom when slate is rotated around up vector',b'## Overview\r\nSlate in HandInteractionExample is jumping in zoom levels when starting interaction with two hands. The issue is more visible when Slate is rotated in a way where hand click and drag only through z axis should trigger a slate zoom.\r\n\r\n## Changes\r\nChanged GetContactDistance() method from HandInteractionPanZoom.cs to account for global z component of hand / controler position.\r\n\r\n- Fixes: #7788.\r\n\r\n## Screenshots\r\n\r\nBefore:\r\n![slate_zoom_before](https://user-images.githubusercontent.com/16922045/83654940-b2769180-a5b5-11ea-9ee7-ae75cbd12823.gif)\r\n\r\nAfter:\r\n![slate_zoom_after](https://user-images.githubusercontent.com/16922045/83654316-d7b6d000-a5b4-11ea-80a5-ff74238839bf.gif)\r\n\r\n## Setup\r\n\r\n- MRTK 2.4\r\n- Unity 2018.4\r\n- Hololens 2\r\n'
629543352,8010,b'Fix controller mapping profile rendering in Unity 2019.3',"b'## Overview\r\n\r\nButton rendering in the controller mapping profile is currently broken in Unity 2019:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/83574232-e84a4600-a4e1-11ea-908c-417290379d78.png)\r\n\r\nThis PR adds an explicit height value to the `GUIStyle`, which matches the hardcoded height of the button already:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blob/6df48e126d779da4d82662b1bb16fb963f2986d0/Assets/MRTK/Core/Inspectors/Profiles/MixedRealityControllerMappingProfileInspector.cs#L299\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/83574058-783bc000-a4e1-11ea-9219-9da2a39d0fd7.png)\r\n'"
628764012,8006,b'Move assemblyinfo files to fix the build',b'## Overview\r\n\r\nA combination of re-adding AssemblyInfo.cs files in #7986 and moving the assemblies they refer to in #8004 led to left-behind files and a broken build.'
628716973,8005,b'Rollback #7986',"b""Some of the changes in that PR had some busted YAML, proceeding with a rollback first (and then I'll fix it up for real later this week)"""
628673113,8004,b'Move some editor-only MigrationHandler code into editor-only assemblies',"b'## Overview\r\n\r\nWe currently have some MigrationHandler code that\'s in runtime assemblies but with basically all of the code `#if`ed out as `if UNITY_EDITOR`. This PR moves that code into existing editor-only assemblies and generalizes those assemblies from ""inspector"" assemblies to ""editor"" assemblies.\r\n\r\nThis change is part of making sure code is in the correct assemblies for potential larger reconciliation down the road, as described in the related issue below.\r\n\r\n## Changes\r\n- Related to https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7388'"
628120084,8002,b'Added a note about NuGet package support.',b'## Overview\r\nNuGet packages are no longer supported as of MRTK 2.4.0. This should be clear to users.\r\n\r\n## Changes\r\n- Fixes: Added a note to the NuGet Package comments of the Getting Started page to make it clear that NuGet packages are no longer supported as of MRTK 2.4.0.\r\n\r\n'
628040092,8000,b'Allow the user to modify the playspace transform in cases with custom camera hierarchies',"b'## Overview\r\nCurrently there is no mechanism in place for users to define playspace hierarchies that do not have the Playspace gameobject as a direct parent.\r\n\r\n\r\n## Changes\r\n- Allow the end user to modiy the playspace transform to set it as they see fit.\r\n- This feature is particularly useful with MRTK-Quest, as that system requires a custom camera hierarchy where the camera is not a direct child of the playspace transform.\r\n'"
627055556,7996,b'Respecting user set value of SurfaceNormalOffset if there is no colli\xe2\x80\xa6',"b'\xe2\x80\xa6der attached\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
627036536,7995,b'Updated MRTK path as introduced in 2.4',"b'Also using ...DotNetAdapter.csproj* so that DotNetAdapter.csproj.meta is included.\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
626907978,7994,b'Ultraleap Documentation Update Part 4',b'## Overview\r\n\r\nUpdate 4.5.0 download link in the Ultraleap documentation at the request of Ultraleap.\r\n\r\n'
626869871,7993,b'Rigged hand visualizer',"b'## Overview\r\n\r\nImplemented a RiggedHandVisualizer that can be used to visualize a skinned mesh for hands.\r\n\r\n![image](https://user-images.githubusercontent.com/480316/83201369-a3bb5500-a145-11ea-867d-31d56196d5df.png)\r\n\r\nImplementation is based on and has visual parity with the LeapMotion RiggedHand/RiggedFinger combi. Fixed an issue in the LeapMotionArticulatedHand where the wrong thumb metacarpal index was copied from the leapmotion data. The handmodels are a customization of the LeapMotion handmodels with a bit rounder shapes and a different material.\r\nCleaner handmodels may be needed, but my rigging skills are lacking.\r\nTested in editor with Leapmotion and on HoloLens 2.\r\n\r\n## Gifs\r\n| WMR Headset + Leap | Input Simulation |  \r\n|--------|-------|\r\n|    ![RiggedHandsLeapVR](https://user-images.githubusercontent.com/53493796/86183350-a6172300-bae6-11ea-917e-b2a001dc110a.gif)| ![RiggedHandsInputSimulation](https://user-images.githubusercontent.com/53493796/86183368-aca59a80-bae6-11ea-8e60-c35567b31e38.gif)|  \r\n\r\n## Changes\r\n\r\nRelated to #4257\r\n'"
626124048,7987,b'Added light+dark hand tracking joint naming diagrams',b'## Overview\r\nAdded two versions of the hand joint name diagram requested by @julenka. Resolves #7942 \r\n\r\n## Changes\r\n- Added two diagrams\r\n- Made the new image `display:inline` to appear inline with the existing diagram.\r\n'
626123833,7986,b'Automates the process of updating MRTK version metadata',"b""The way that we update versions is somewhat onerous (despite having a script that automates the process). The version number is still stored across a variety of files, and we have to ensure that all of those are up to date.\r\n\r\nThere are two main types of files that we have:\r\n- Version.txt. This is primarily for consumers of .unitypackage to know what version they're on.\r\n- AssemblyInfo.cs. This is primarily for consumers of precompiled binaries (so that the published binaries actually have a version).\r\n\r\nThey don't really serve a purpose in regular MRTK development (i.e. they don't directly add value being checked in aside from the duplication of version information across the codebase).\r\n\r\nThis change adds a CI step that will add this information in prior to building .unitypackages and the precompiled binaries for the msbuild step. Functionally there should be zero change from this.\r\n\r\nNote that this deletes all of the Version.txt and AssemblyInfo.cs files except for one - there's a line on the GLTF AssemblyInfo.cs that makes some internals visible to another assembly. For this case (and for supporting general cases where you can do this in the future), this change makes it so that we can actually still have those (and in cases where AssemblyInfo.cs already exists, the version data just gets appended to the file)\r\n\r\nNote look at the gist which contains the diff of the generated files vs. what's checked in:\r\n\r\nhttps://gist.github.com/wiwei/c1e8f47beb79484686a20b4726429388"""
625999789,7985,b'Merging final 2.4 doc change',b'The previous PR went into dev instead of release. This one goes where it was originally intended.'
625996807,7984,"b""Update the build tools to support VS2019's .vcxproj extension""","b""We currently have a 2019 CI daily build which is busted for a few reasons (one of which being that we don't have VS2019 on that hosted agent, which is something I'm following up on separately).\r\n\r\nAnother issue in the code itself is that we look for only a single extension (.vcsproj) instead of both .vcsproj and .vcxproj (vcxproj being the VS2019 extension).\r\n\r\nThis is one of the (probably many) fixes needed to prep for the 2019 PR pipeline"""
625988157,7983,b'Update release branch with final 2.4 documentation change',b'Ensures the final documentation change is reflected in the release branch'
625979752,7982,b'Amending incorrect feature descriptions in main README',"b'## Overview\r\nFront page README.md had incorrect feature descriptions.\r\n\r\n## Changes\r\nPulled in feature descriptions/summaries from individual READMEs to update the index README.\r\n\r\n## Notes\r\nMerging to `releases/2.4.0` on request by Catherine, instead of `mrtk_development` or `prerelease`.'"
625895772,7981,b'Mrtk release -> development',b'This change brings v2.4.0 from mrtk_release to mrtk_development'
625867029,7980,b'Merge 2.4.0 into mrtk_release',b'This change brings the MRTK v2.4.0 code into the release branch.'
625839142,7979,b'Merge stabilization -> mrtk_development',"b'This is basically this PR:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/7977\r\n\r\nBut with the merge conflicts resolved. The merge conflicts arose because there was a PR in mrtk_dev that fixed both spelling and trailing whitespace issues, and there was a PR in stabilization that only fixed trailing whitespace issues. They conflicted only on lines where there were both spelling and trailing whitespace issues.'"
625221830,7978,b'Added basic joystick control',"b'## Overview\r\nCreated a basic joystick control to be used as an experimental feature.\r\nThis is my first MRTK pull request, so please check it thoroughly :)\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
625179046,7977,b'Merge stabilization -> dev',b''
625151229,7976,b'Spell check pass on code comments and docs for 2.4',"b'## Overview\r\n\r\nFollow up to https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7973, spell checking our code comments and summaries.\r\nUsed [this VS spell checker extension](https://marketplace.visualstudio.com/items?itemName=EWoodruff.VisualStudioSpellCheckerVS2017andLater).'"
625121023,7974,b'Swap GUIDs in MixedRealityKeyboard files',b'## Overview\r\nSwap the GUIDs in the MixedRealityKeyboard.cs.meta and MixedRealityKeyboardBase.cs.meta files to resolve the invalid script for the MixedRealityKeyboard component after an upgrade from 2.3 to 2.4.\r\n\r\n## Changes\r\n- Fixes: #7972 \r\n\r\n## Verification\r\nConfirmed fix by:\r\n1. Importing 2.3 foundation package\r\n2. Created new scene and added MRTK\r\n3. Created empty game object with the MixedRealityKeyboard component attached\r\n4. Closed Unity and followed upgrade steps\r\n5. Imported foundation Unity package that was generated based on this branch\r\n6. Confirmed the script was valid on the game object with the MixedRealityKeyboard component attached \r\n'
625114829,7973,b'Spell check and markdown formatting pass on .md files for 2.4',b'## Overview\r\n\r\nRan a pass on our .md files for spelling and markdown formatting.\r\nI use a combination of the VS Code extensions in [the Microsoft Docs Authoring Pack](https://marketplace.visualstudio.com/items?itemName=docsmsft.docs-authoring-pack) for these checks.\r\n\r\nRecommend reviewing [without whitespace changes](https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7973/files?diff=split&w=1).'
625062807,7971,b'Update the version dropdowns in preparation for 2.4.0 release.',"b'Updating the dropdown to where it will end up being, rather than just where it is now.'"
625043092,7969,b'Add known issues to release notes',"b'In preparation for the 2.4.0 release, this change adds to the known issues section of the release notes.\r\n\r\nFixes: #7845'"
625042209,7968,b'Update the upgrade instructions to heavily encourage use of the migration window.',"b""With some of the latest changes to 2.4.0 (i.e. button config helper, BoundsControl/ObjectManipulator), running the migration tool is extremely helpful in ensuring that upgraded projects can get into a good state.\r\n\r\nIn general, we want to push consumers to use this tooling to help auto-fix as much of their projects as is possible - as we make version to version changes, there's always some inevitable probability around breaking changes (even if the changes are relatively small), but having these changes be auto-fixed is way nicer than having to stumble through weird behaviors (or worse, deploying to device and realizing that something is off, and then trying to walk back from that).\r\n\r\nAs we add more handlers to this migration tooling, getting consumers in this habit will help ensure that good state of their projects as they do upgrade to upgrade."""
625008030,7967,"b'Use discard in MRTK access, add missing readonly modifier, add ""hand tracking"" devices to XR SDK'","b""## Overview\r\n\r\nThis PR:\r\n\r\n1. Updates one of the profiler markers to be `static readonly`, which matches the rest of the markers.\r\n1. Updates the MRTK instance access to be discarded, which matches the way we do this for the playspace:\r\n    https://github.com/microsoft/MixedRealityToolkit-Unity/blob/375f306d0af44e26335297b2fc988f4d612bf787/Assets/MRTK/Core/Services/MixedRealityToolkit.cs#L485-L486\r\n1. Adds `HandTracking` devices to the list of devices we care about from XR SDK. This is because the WMR-plugin currently marks hands as both `HandTracking` and `Controller`, but other don't and it may not in the future if they standardize."""
624645575,7962,b'Changes Controller Axis to valid axis',"b'## Overview\r\nThe GrabPointer was not grabbing, because its TryGetNearGraspAxis returned bool was false, even though its forward Vector3 is to be considered valid.\r\n\r\n## Changes\r\n- Fixes: #7961 .'"
623584339,7960,b'Prerelease/2.4.0 stabilization -> dev',b'## Overview\r\n\r\nPrerelease/2.4.0 stabilization -> dev'
623518629,7958,b'Update Build and Deploy documentation with steps for Unity 2019.3',"b'## Overview\r\n\r\nUnity 2019.3 by default does not have the Windows Mixed Reality SDK added in the Player settings. If you switch to UWP and build, you will end up with your HL2 app as a 2D panel on device without these extra steps.\r\n\r\nAdded a Unity 2019.3 and HoloLens section with steps for legacy XR and the XR-plugin. Also moved the warning about ARM64 to this new section.\r\n\r\n## Changes\r\n- Fixes: #7957 \r\n'"
623506620,7955,b'Remove extra IMixedRealityInputSystem casts',"b""## Overview\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/6779 introduced the ability to specify a data provider's service type explicitly, but not all data providers were updated with this feature. This PR updates the rest to no longer cast their `Service` to the `IMixedRealityInputSystem` they already are."""
623468818,7954,b'Update in param to ref param in BaseInputDeviceManager',"b""## Overview\r\n\r\nIn doing some research around the perf implications of structs and how MRTK uses them, I came across the fact that passing a struct as an `in` parameter doesn't always reduce the number of copies, but potentially increases them. Instead of copying at the time the struct is passed in, the method ends up copying ANY time a non-readonly property or method is called on the struct.\r\n\r\nFrom https://devblogs.microsoft.com/premier-developer/the-in-modifier-and-the-readonly-structs-in-c/ (emphasis mine):\r\n\r\n>To make sure that the parameter\xe2\x80\x99s value stays the same the compiler **make a defensive copy of the parameter every time a method/property is used**.\r\n>\r\n>It means that you should never pass a non-readonly struct as in parameter. It almost always will make the performance worse. Yes, **the argument passing is cheaper, but once the parameter is used, the defensive copy will nullify the benefits or will make the performance worse**. It could make sense if the struct is a C-like struct with a bunch of public fields and everyone in the team is aware that changing fields to properties would have a drastic performance impact on the application. But in this case, I would **suggest passing the struct by reference instead**.\r\n\r\n[An example using SharpLab.io](https://sharplab.io/#v2:D4AQzABAzgLgTgVwMYwgNQKYoPZwEwCwAUAN7EQUTgQBmANtgIaoAeA3OZdfU6gJ4cilCJwrcGzCABkMAOwDmMABYBlAI4JGcDABMIAXgB8EABQsIAKggsAlBADUpvpYh8bggL7Fi1EHggAwhBkQlyQPJIAsgCMJto06FgwuP4Abox0CBh2IcLCIADsEOmZGAB0MgrK6praeo4lWRVyiqoaWrqCwl6hFKJU4RKokXgmAJayiTj4xRlZOf35RY3lla01HfWzpc1VbbWd/T3C/eK8ECMmmNNpc9nBi1zLd7vr7XUO201r1e+HvRAeh4gA=) to show how the compiler sees these parameter modifiers. Specifically notice the additional copies in the `in` version that aren't present in either the `ref` or non-modified version.\r\n\r\nNote that in our case, we were only calling one property on the struct in the most common case anyway (except for the case where `IMixedRealityPointer` was missing, which shouldn't be a common one), so the `in` param was behaving essentially identically to the original, unmodified version. Updating this to `ref` should see any perf benefits that were expected in the original change."""
623447575,7953,b'Add assembly version errors to known issues to release notes 2.4',"b'## Overview\r\nAdded the ""Duplicate Assembly Version and Multiple Precompiled Assemblies Unity 2018.4"" issue to known issues in the release notes and how to work around it.\r\n\r\n## Changes\r\n- Fixes: #7948 \r\n'"
623443482,7952,"b'Clean up some ""unused"" warnings'","b'## Overview\r\n\r\nCleans up a couple examples of fields or methods not being properly scoped by `#if` blocks and appearing as ""unused"" in certain build configurations.\r\n\r\nAlso improved some docs in the files I was updating.'"
623439304,7951,b'Added alerts and documentation to for button migration',"b""## Overview\r\nAddresses errors and lack of clarity when trying to use the button upgrade migration tool without the tools package\r\n\r\n## Changes\r\n- Fixes: #7950\r\n\r\n\r\n## Verification\r\n> Change the material on a button's icon to an invalid one, prompting the upgrade tool, and then verified that the alert showed up properly when the menu item wasn't present"""
623319795,7947,b'Move initialization to later (when solvers have been initialized)',"b'Per the conversation in #7926, moving the initialization in the mixed reality keyboard preview code to Start(), where the solver handler / solver system would have been initialized by.\r\n\r\nFixes #7926 '"
622844325,7946,b'Update the getting started docs to mention that the examples package depends on the extensions package',"b'Updates the docs by moving the extension package installation instructions ABOVE examples (i.e. since examples depends on extension now, you should install the extension one first)\r\n\r\nAlso updates the line for the examples package to mention the dependency on extensions.'"
622827945,7943,b'Add a link to the known issues section for 2.4',b''
622185741,7940,b'Migrating PressableButton and PressableButtonHololens2 to use local positioning for movingButtonVisuals and iconText objects.',"b'## Overview\r\nAn issue was reported (#7874) that when a PressableButton was scaled to zero, NaN values were propagated to a transform.position assign attempt. I analyzed this issue, and saw that the particular way that PressableButton calculates the visible button content offset uses a local-to-world scaling that is susceptible to NaN propagation when object scale is zero.\r\n\r\nUpon further examination, it seems as though the current way that PressableButtons calculate the positioning of the `movingButtonVisuals` and `movingButtonIconText` children is slightly flawed; instead of using `localPosition` and relying on Unity to perform the appropriate transformations, the code performs the local-to-world scaling itself. While this behavior was correct for the majority of use cases, there was one weakness; when the button was initially scaled to zero, the local-to-world scaling suffered from NaN issues, as the world scaling would explode to infinity when the parent scale dropped to zero. Unity\'s internal implementation is apparently immune to these effects; assigning to localPosition, even when parent scale is zero, does not suffer from NaN explosions.\r\n\r\nSeveral helpers were added to accomplish this migration from global position to local positioning; several ""local"" counterparts to the existing global initial position and push direction definitions were added, and naming was updated accordingly.\r\n\r\nUnit test was added to verify that no NaN exceptions are thrown when a button is created with a parent with zero scale.\r\n\r\nTherefore, this PR resolves #7874.\r\n\r\n## Changes\r\n- Adds private field `LocalSpacePressDirection`\r\n- Adds private field `InitialLocalPosition`\r\n- Renames `InitialPosition` to `InitialWorldPosition`\r\n- Adds method `GetLocalPositionAlongPushDirection`, to complement the existing `GetWorldPositionAlongPushDirection`\r\n- Changes the visual effect to use `localPosition` instead of `position`, using the new `GetLocalPositionAlongPushDirection` method.\r\n- Changes `PressableButtonHololens2` to use localPosition for its unique effects, as well.\r\n- Changes `PressableButtonHololens2` to properly check for divide-by-zero errors when setting the scale of the `compressableButtonVisuals`.\r\n- Changes `PressableButton.GetDistanceAlongPushDirection` to _multiply_ by `WorldToLocalScale` instead of _dividing_ by `LocalToWorldScale`, which is more idiomatic and more closely aligns the code with the documented intent of the scaling factors.\r\n\r\n\r\n## Verification\r\nUnit test has been added, and run locally. I\'ve also personally verified the behavior with the HoloLens 2 with both near and far interactions, with both the basic-style buttons and the HoloLens 2 Shell-style buttons.\r\n'"
622174977,7939,b'Prerelease/2.4.0 stabilization -> dev',b'## Overview\r\n\r\nPrerelease/2.4.0 stabilization -> dev'
622121978,7937,b'Create a baseline for using dotnet-format on MRTK C# code',"b""There are a ton of small nits and formatting issues that have been introduced over the ages in our code (and still sneak in) which can be difficult to catch via manual code review.\r\n\r\nI'm going to update some of our tooling/docs to point to https://github.com/dotnet/format, which can be used to format c# code to a reasonable set of defaults, such that we can spend time less on manually watching nits (i.e. space between if( -> if ( ), and more on the actual content.\r\n\r\nThis is after a baseline run on the MRTK codebase - a lot of dead whitespace is removed, formatting is fixed in some cases where the indentation is way off, and extra whitespace has been removed between some locations.\r\n\r\nNote that the intention is not to make this formatting required - there is always value in being able to structure things manually in a certain way when there is value there. However, I would love to get to a state where we can use git hooks to autoformat for engineers who don't want to worry about this stuff."""
622086367,7930,b'Update XR assets for XR Management 3.0',"b""## Overview\r\n\r\nUnity's XR Plugin Management package had a pretty large update for version 3.0, and all previous versions were unpublished. As a result, ARCore and ARKit are now managed via XR Management, so I'm adding those assets. I also recreated the WMR assets from scratch.\r\n\r\nFor these assets, since they don't exist in 2018.4, they simply state that fact and don't cause issues:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/82497636-73b7e600-9aa3-11ea-9aa8-c22ca73cec43.png)\r\n\r\nThese files are only included in the repo to facilitate XR SDK work on MRTK. They are not distributed in any MRTK package or intended to be used by others, but exist as repo scaffolding."""
621977111,7927,b'Update Ultraleap Documentation Part 3',"b'## Overview\r\n\r\nUpdated Ultraleap wording in the documentation, requested by Ultraleap.\r\n'"
621873975,7925,b'Migration Window: Adding missing built in icons',"b'## Overview\r\nSome of the unity built in icons used in the Migration window are missing on Unity 2019.3.0f6.\r\nWhen trying to open Migration Window in Unity 2019.3.0f6. the following error message is displayed: ""Unable to load the icon: \'d_TimelineEditModeRippleOFF\'""\r\n\r\n## Changes\r\nAdding custom icons for the tool for both light and dark unity skin modes.\r\n\r\n![Screenshot (33)_LI](https://user-images.githubusercontent.com/16922045/82468113-5a6e6400-9aba-11ea-9553-c3f83f8ef9d2.jpg)\r\n \r\n- Fixes: #7876 .\r\n\r\n'"
621834355,7923,b'fixed missing prefab link in volumetric buttons panel',"b""moved pressablebuttonstestcanvas into sdk because it's used by SlateUGUIHololens2Buttons.prefab which is an sdk prefab.\r\nAlso resaved the slate prefab to make sure all links are properly updated.\r\n\r\n## Changes\r\n- Fixes: #7783 \r\n\r\nNote that this can only be reproduced by working with our packages - syncing the repo will pull all the files and result in the prefab showing correctly. Packages will split the used prefabs up, some of them being part of foundation and test canvas residing in the example package."""
621448779,7920,b'Resolved issue with NaN propagation from zero-scale PressableButtons',"b'## Overview\r\nAn issue was reported (#7874) that when a PressableButton was scaled to zero, NaN values were propagated to a `transform.position` assign attempt. I analyzed this issue, and saw that the particular way that `PressableButton` calculates the visible button content offset uses a local-to-world scaling that is susceptible to NaN propagation when object scale is zero.\r\n\r\nTesting this bug is difficult. The original issue (#7874) reported that these NaN issues occurred whenever the object was scaled near zero; I attempted to reproduce this error, but the error only occurred on my machine when _exiting play mode_; when setting the scale to zero, it did not occur until I exited play mode. Therefore, the included test may not fully cover all reproduceable cases (but it should cover the case that was originally reported in #7874.) That is to say, the unit test covers the _runtime_ case, but I was only personally able to observe this bug when leaving play and returning to edit mode.\r\n\r\nTherefore, this PR resolves #7874.\r\n\r\n## Changes\r\n\r\nAdds a clamping to `GetWorldPositionAlongPushDirection`. This prevents a NaN `LocalToWorldScale` value from breaking the `UpdateMovingVisualsPosition` method, which uses `GetWorldPositionAlongPushDirection` to adjust the `movingButtonVisuals`.\r\n\r\n\r\n## Verification\r\nUnit test was added to verify that zero-scaling the parent of a `PressableButton` does not throw exceptions.\r\n'"
621375872,7919,b'Prerelease/2.4.0 stabilization -> dev',b'## Overview\r\n\r\nPrerelease/2.4.0 stabilization -> dev'
621302509,7918,b'Ultraleap Documentation Update Part 2',b'## Overview\r\nUpdated wording on the Ultraleap documentation based on recommendations from Ultraleap.\r\n'
621254540,7917,b'Adjusted defines so leapmotion now works in Unity editor when platfor\xe2\x80\xa6',b'## Overview\r\nLEAPMOTIONCORE_PRESENT is now also added to BuildTargetGroup.WSA.\r\n\r\nWrapped all usage of this define with an extra check\r\n#if !WINDOWS_UWP || UNITY_EDITOR \r\n\r\n## Changes\r\n- Fixes: #7916 '
621236072,7915,b'Added unit tests for custom button migration tool',b'## Overview\r\nAdds unit tests for #7906\r\n\r\n## Changes\r\n- Fixes: #7810\r\n\r\n'
620586927,7908,b'Prerelease/2.4.0 stabilization -> dev',b'## Overview\r\n\r\nPrerelease/2.4.0 stabilization -> dev'
620582880,7907,b'Update WMR XR SDK assemblies to include Windows standalone',"b""## Overview\r\n\r\n Although the WMR XR SDK data provider is already marked to work on Windows Standalone, the assemblies aren't actually included in the build. This fixes that, to unblock controller input on a WMR Windows Standalone build.\r\n\r\n## Changes\r\n- Part of #7905 """
620557906,7906,b'Custom Button Icon Migration Tools',"b""## Overview\r\n\r\n(New branch based on #7886 to ensure a clean merge.)\r\n\r\nProvides tools to migrate from old material-based custom icons to icon sets. (This PR does not upgrade any buttons in example scenes.)\r\n\r\nPreviously custom button icons required assigning a new material to the button's quad renderer. This is no longer necessary and we recommend moving custom icon textures into an IconSet. The inspector lets developers know this option exists:\r\n\r\n![ButtonConfigInspector](https://user-images.githubusercontent.com/9789716/82091775-d3318280-96ac-11ea-803b-7518f73cb3c1.PNG)\r\n\r\nExisting custom materials and icons are preserved. However they will be less optimal until upgraded. An additional warning is shown in the icon selection foldout:\r\n\r\n![ButtonConfigIconWarning](https://user-images.githubusercontent.com/9789716/82091888-0d9b1f80-96ad-11ea-896e-0400e11e74ee.PNG)\r\n\r\n### Migration Window\r\nThe ButtonConfigHelperMigrationHandler type can migrate all button assets in the project.\r\n\r\n![MigrationWindow](https://user-images.githubusercontent.com/9789716/81989712-9c973180-95f2-11ea-8387-6c80451d2157.PNG)\r\n\r\n### Custom icon sets\r\n\r\nIf an icon is not found in the default icon set during migration, a custom icon set will be created in _MixedRealityToolkit.Generated/CustomIconSets._ A dialog lets people know this has taken place.\r\n\r\n![ConfigHelperDialog](https://user-images.githubusercontent.com/9789716/82093856-c57dfc00-96b0-11ea-83ab-4df57446d661.PNG)\r\n\r\n## Changes\r\n- Fixes: #7810\r\n\r\n## Verification\r\nLooking for feedback on clarity and workflow. The example scenes provide good samples for migration.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
620498424,7904,b'Fix XR SDK boundary on-device',"b""## Overview\r\n\r\nFixes the lack of floor and boundary when running an XR SDK app on-device.\r\n\r\nThe root issue was that the `XRDevice.isPresent` API is [not expected to work in XR SDK](https://forum.unity.com/threads/xrdevice-ispresent-with-xrmanagement-on-quest.817722/). This PR removes that call from the base class and replaces it with the corresponding XR SDK API call. The existing non-XR SDK service implementation already called this API, so it's left unchanged.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blob/9359fd71bac5bbcfe8db0803f0083e6f012f31a6/Assets/MRTK/Services/BoundarySystem/XR2018/MixedRealityBoundarySystem.cs#L35\r\n\r\nI also removed the `UnityBoundary.visible = true;` call, which was causing issues on Oculus and is not configurable in MRTK. There is no corresponding API in XR SDK, so it's being removed without replacement, to allow platforms to control their boundary visibility instead of forcing them on.\r\n\r\nAlso removed a profile cast in the base class' `Initialize`, which wasn't needed since the correctly-typed profile is passed in the constructor.\r\n\r\nAlso removed some extra `Get*Visualzation();` calls, which are already called as-needed in the existing property setters.\r\n\r\n## Changes\r\n- Fixes: #7519, fixes: #7878 """
620437884,7903,b'Update Ultraleap Documentation',"b""## Overview\r\nUpdated documentation based on Ultraleap's feedback.\r\n\r\n- Added Ultraleap hand tracking to the home page as a supported platform and a feature area\r\n- Updated naming in the How to Configure Leap hand tracking doc\r\n- Updated naming in the release notes"""
620377482,7902,"b'Toggle Features Panel updates - using toggle button, examples hub button update, Examples Hub config update'","b""## Overview\r\nBugfix for #7872 Toggle Features Panel is missing toggle state.\r\nToggleFeaturesPanel.prefab has been updated\r\n\r\nBugfix for #7890 Input Recording button not working in MRTK Examples Hub\r\nToggleFeaturesPanelExamplesHub.prefab has been updated. Now ToggleFeaturesPanelExamplesHub.prefab only has 'Home' button to avoid duplicated overlapping with existing ToggleFeaturesPanel.prefab in each scene. When the user enters a scene from the Examples Hub menu, existing ToggleFeaturesPanel will be displayed along with Examples Hub's home button. Verified that Input Recording works properly using the ToggleFeaturesPanel's button in each scene.\r\n\r\n- Added a red color material for the Input Recording toggle state.\r\n- No GUID changes. \r\n- Build Settings for the MRTKExamplesHub scene has been updated since it was missing MRTKExamplesHub.unity scene in the list\r\n- Turned on Diagnostics since it is needed for the 'Profile' toggle button.\r\n- Turned on Spatial Awareness with occlusion only, added to MRTKExamplesHub config.\r\n\r\n## Changes\r\n- Fixes: #7872, fixes #7890, and fixes #7884 \r\n\r\n## Screenshots\r\n### Updated ToggleFeaturesPanel.prefab\r\n![2020-05-18 10_09_19-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - MRTKExamplesHub unity -](https://user-images.githubusercontent.com/13754172/82240734-c650a100-98ef-11ea-840e-74a3a6f64b7c.png)\r\n\r\n### Displaying proper toggle state visual\r\n![2020-05-18 10_19_50-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - PressableButtonExample](https://user-images.githubusercontent.com/13754172/82241513-2431b880-98f1-11ea-81d1-67d7c0708ae5.png)\r\n\r\n\r\n### Updated ToggleFeaturesPanelExamplesHub.prefab\r\n![2020-05-18 10_09_37-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - MRTKExamplesHub unity -](https://user-images.githubusercontent.com/13754172/82240743-c94b9180-98ef-11ea-9a22-9fa805857123.png)\r\n\r\n### When a scene loaded in MRTK Examples Hub\r\n![2020-05-18 10_21_29-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - MRTKExamplesHub unity -](https://user-images.githubusercontent.com/13754172/82241664-678c2700-98f1-11ea-964f-7dde9799c2b4.png)\r\n![2020-05-18 10_21_46-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - MRTKExamplesHub unity -](https://user-images.githubusercontent.com/13754172/82241668-68bd5400-98f1-11ea-9237-31d51cf2b18e.png)\r\n\r\n"""
619343966,7900,b'Prerelease/2.4.0 stabilization -> dev',b'## Overview\r\n\r\nPrerelease/2.4.0 stabilization -> dev'
619256263,7899,b'Initial draft of button upgrading docs',b'## Overview\r\nAdding documentation for #7886\r\n![image](https://user-images.githubusercontent.com/39840334/82096923-bd28bf80-96b6-11ea-93a9-ceafcb822242.png)\r\n\r\n## Changes\r\n- Part of the fix for: ##7810\r\n'
619123660,7895,b'Upgrade example scene & prefab button icons',"b'## Overview\r\nUpdates button icons in example scenes and prefabs.\r\n\r\n## Changes\r\n- Fixes: #7810\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
618881100,7893,b'Update README_BoundingBox.md',b'there is a mistake between  the presentation of Scale Started and Scale Ended\r\n\r\n\r\n'
618816304,7892,b'Filter abstract classes (eg. TransformConstraint) to be added to the \xe2\x80\xa6',"b'Filter abstract classes so they are not added to the ObjectManipulator inspector ""Add Constraint"" dropdown menu\r\n\r\n## Changes\r\n- Fixes: #7891 \r\n'"
618678559,7889,b'Prerelease/2.4.0 stabilization toggle features panel',b'## Overview\r\nBugfix for #7872 Toggle Features Panel is missing toggle state.\r\n\r\nUpdated the buttons to Toggle Buttons in these two prefabs:\r\n- ToggleFeaturesPanel.prefab\r\n- ToggleFeaturesPanelExamplesHub.prefab\r\n\r\nAdded a red color material for the Input Recording toggle state.\r\n\r\n## Changes\r\n- Fixes: #7872 \r\n\r\n![2020-05-14 12_09_09-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/82009782-16481300-9625-11ea-847b-f9f513675ada.png)\r\n\r\n'
618619701,7888,b'Update Build and Deploy HoloLens Guidance Doc',b'## Overview\r\nSelecting ARM as the build architecture in Unity 2019.3.x results in a fails to deploy to a HoloLens device.  A note has been added to the Build and Deploy doc for HL and HL2 devices to use ARM64 instead of ARM for Unity 2019.\r\n\r\n## Changes\r\n- Fixes: #7858 \r\n'
618607949,7887,b'Update table of contents to add the new configuration dialog page',b'The push of the commit that added the new configuration dialog page to the table of contents failed due to a command line typeo.\r\n\r\nThis change adds in the missing contents link'
618568896,7886,b'Custom Button Icon Migration Tools',"b""## Overview\r\nProvides tools to migrate from old material-based custom icons to icon sets. (This PR does not upgrade any buttons in example scenes.)\r\n\r\nPreviously custom button icons required assigning a new material to the button's quad renderer. This is no longer necessary and we recommend moving custom icon textures into an IconSet. The inspector lets developers know this option exists:\r\n\r\n![ButtonConfigInspector](https://user-images.githubusercontent.com/9789716/82091775-d3318280-96ac-11ea-803b-7518f73cb3c1.PNG)\r\n\r\nExisting custom materials and icons are preserved. However they will be less optimal until upgraded. An additional warning is shown in the icon selection foldout:\r\n\r\n![ButtonConfigIconWarning](https://user-images.githubusercontent.com/9789716/82091888-0d9b1f80-96ad-11ea-896e-0400e11e74ee.PNG)\r\n\r\n### Migration Window\r\nThe ButtonConfigHelperMigrationHandler type can migrate all button assets in the project.\r\n\r\n![MigrationWindow](https://user-images.githubusercontent.com/9789716/81989712-9c973180-95f2-11ea-8387-6c80451d2157.PNG)\r\n\r\n### Custom icon sets\r\n\r\nIf an icon is not found in the default icon set during migration, a custom icon set will be created in _MixedRealityToolkit.Generated/CustomIconSets._ A dialog lets people know this has taken place.\r\n\r\n![ConfigHelperDialog](https://user-images.githubusercontent.com/9789716/82093856-c57dfc00-96b0-11ea-83ab-4df57446d661.PNG)\r\n\r\n## Changes\r\n- Fixes: #7810\r\n\r\n## Verification\r\nLooking for feedback on clarity and workflow. The example scenes provide good samples for migration.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
618422109,7885,b'Add documentation for the MRTK configuration dialog',"b'This change fixes #7879 by documenting the MRTK configuration dialog, including common audio spatializers and some of their differences.'"
618042104,7883,b'Improved NonNativeKeyboard',"b'## Overview\r\nThe NonNativeKeyboard is using Text compoents instead of TextMeshPro, uses icons without mipmaps instead of with mipmaps and does not create an atlas for the used icons.\r\n\r\nThis PR fixes all of that, letting users decide if they want to build the atlas or not (since its an editor setting)\r\n\r\n## Changes\r\n- Fixes: #7882 .'"
617861502,7881,b'Prerelease/2.4.0 stabilization -> mrtk_dev',b'## Overview\r\n\r\nPrerelease/2.4.0 stabilization -> mrtk_dev'
617802761,7880,b'reverted hand mesh change so it reappears on toggle',b'## Overview\r\nReverted a change that prevented the hand mesh from updating and reappearing after being toggled\r\n\r\n## Changes\r\n- Fixes: #7871\r\n\r\nVerified by manually deploying to HoloLens 2 and testing that the hand mesh would reappear'
617759851,7877,b'Remove priority from Leap Motion menu',"b'## Overview\r\nThe Leap Motion menu always appeared a the top under the Mixed Reality Toolkit > Utilities menu.  It was always at the top because the priority was 0, this pr removes the priority from the MenuItem.\r\n\r\nBEFORE:\r\n\r\n![image](https://user-images.githubusercontent.com/53493796/81866448-12809780-9524-11ea-8e9a-74e22309f4a0.png)\r\n\r\nAFTER:\r\n![image](https://user-images.githubusercontent.com/53493796/81866225-bfa6e000-9523-11ea-9e19-9e43a5c0a80f.png)\r\n\r\n'"
617698766,7873,b'Adding Known Unity 2019 MSBuild Issue',b'## Overview\r\nStarting a known issues section and documenting MSBuild2019 issue'
617660620,7870,b'Add Leap and Tap to Place to Release Notes',b'## Overview\r\nAdded Leap Motion support to the top of the release notes with a new gif and added Tap to Place.\r\n\r\n## Changes\r\n- Fixes: #7798 \r\n'
617593381,7869,b'removed debug menu entries',"b'removed debug menu entries from GameObject top menu (MRTK > Renderer Size , MRTK > Collider Size)\r\nfixes https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7864'"
617566621,7868,b'Fixing MixedRealityToolkit null error on Register',"b'## Overview\r\n\r\nMixedRealityToolkit is throwing error message when using Migration Window from a scene without MixedRealityToolkit instance.\r\n\r\nThe Migration tool opens and closes scenes in the project. during this process, OnValidate is called from MixedRealityToolkit.cs on every scene containing an instance. The function DelayOnValidate() is only called when scene is changed, sending null value with RegisterInstance(this).\r\n \r\n![Screenshot (30)](https://user-images.githubusercontent.com/16922045/81834911-89745b00-9539-11ea-8e89-f44666b5d8dd.png)\r\n\r\n## To reproduce\r\n\r\n1. Open a new empty scene\r\n2. Open Migration Window\r\n3. Select ""ObjectManipulatorMigrationHandler""  from dropdown list\r\n4. Navigate to full project section\r\n5. Click on ""Add full project for migration""\r\n6. An error message is displayed on the console\r\n\r\n## Your setup (please complete the following information)\r\n\r\n- Unity Version 2018.4.12f1\r\n- MRTK Version 2.4\r\n\r\n## Changes\r\n- Fixes: #7867.\r\n'"
617548126,7865,b'Migration Window: Adding inactive objects to migration list',b'## Overview\r\nMigration Tool does not migrate inactive objects from selected scenes or prefabs.\r\n\r\n## To reproduce\r\n\r\n1. Open Migration Window\r\n2. Select ObjectManipulator migration from the dropdown\r\n3. Drag the HandInteractionExample.unity into the scene section\r\n4. Press migrate\r\n\r\nObserve that the gameobject node_id30 has not been upgraded\r\n\r\n## Changes\r\n objects to list of objects to be migrated\r\n\r\n- Fixes: #7863 .\r\n'
617533380,7862,b'Fixed two strings that were still pointing to ManipulationHandler in HandInteractionExample',b'they now refer to object manipulator'
617122038,7860,b'Updated MRTK branding',b'## Overview\r\nApplying updated MRTK branding to the landing page. Also added the link to MRTK-Unreal on the bottom of the landing page.\r\n\r\n![Artboard 172](https://user-images.githubusercontent.com/13754172/81769861-7a3ad200-9493-11ea-9fb9-e361cd237a48.png)\r\n![Artboard 168](https://user-images.githubusercontent.com/13754172/81769862-7b6bff00-9493-11ea-9fbf-9c92aacc0ca6.png)\r\n\r\n## Landing page update\r\n![2020-05-12 21_00_10-cre8ivepark_MixedRealityToolkit-Unity at prerelease_2 4 0_stabilization_logo2020](https://user-images.githubusercontent.com/13754172/81769916-9dfe1800-9493-11ea-8673-61d03bcf173e.png)\r\n'
617061489,7859,b'Fix joint rotations not working with XR SDK',"b""## Overview\r\n\r\nCurrently, there's a bug in the hand tracking implementation that's preventing hand joints from having a correct rotation. The `if (x || y)` statement short circuits the `y` call, and so rotation is never actually read. \xf0\x9f\x98\xb3"""
616993324,7857,b'Fix for controller and pointer errors in VR (#7796)',"b'This change fixes the controller and pointer errors reported in #7796 by partially reverting #6939.\r\n\r\nIt also prevents duplicate source detected/lost events from attempting to modify the controllers collection, which would result in errors / exceptions from the runtime.\r\n\r\nDetails on what was happening before this change.\r\nThe timing changes caused by awaiting the controller model was resulting in the following failure path:\r\n1. The platform raises a source detected event\r\n2. Pointer and cursor MonoBehaviours are instantiated\r\n3. Input source is created\r\n4. Controller object is created\r\n5. Controller waits for the model to load\r\n6. Update is called on the MonoBehaviours\r\n7. Teleport cursor checks for the teleport pointer and fails to find it,\r\n8. Teleport cursor deletes itself\r\n9. The focus provider receives the source detected event from MRTK and registers the pointer.\r\n10. The pointer cannot locate the cursor, since it deleted itself.\r\n\r\nIssue #7856 covers restoring the behavior removed by this change and improving the flow described above.'"
616905995,7855,b'Allow Spatializer to be set to None for the MRTK Project Configurator',"b""## Overview\r\nAllowed spatializer to be unset when checking settings, preventing the configurator from opening every time\r\n\r\n## Changes\r\n- Fixes: #7332\r\n\r\nTested by creating new c# scripts and ensuring that the dialog didn't come up again and that the particular code path was hit."""
616798837,7853,b'Fix broken links that use incorrect absolute paths and prevent regressions going forward',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7849\r\n\r\nOur docs contain a few broken links, which are broken for a few reasons:\r\n\r\n1. They are actually wrong (i.e. they are absolute relative to the root, rather than relative to the current folder).\r\n1. There are some links that reference the Asset root (i.e. /Assets) which won\'t resolve correct on github.io - for the safety of ensuring that links will actually work on github.io we essentially have to ensure that we use relative paths for docs, forcing a check that you aren\'t using an absolute path.\r\n\r\nNote that this allows the usage of ""/Assets"" because some of our docs (experimental ones) don\'t actually get published to github.io (and thus, these are valid from those locations)\r\n\r\nThis is kinda a workaround (i.e. ideally docfx would just catch this issue because it\'s non existent w/ an absolute path) but this works for our purposes'"
616270006,7848,b'Updated release notes and holographic remoting docs',"b'Added back previously deleted section in release notes regarding the workaround for the MsBuild with unity 2019.3+. Also updated holographic remoting document\r\n\r\n## Changes\r\n- Mainly comes as a way to mitigate this issue #7830, will leave it open so long as the other related issues are open\r\n\r\n'"
616262114,7847,b'Prerelease/2.4.0 stabilization -> dev',b'## Overview\r\n\r\nPrerelease/2.4.0 stabilization -> dev'
616219732,7846,b'Feature/custom accessor',"b""## Overview\r\nThis pull request builds on the work done in #6953 to support custom vertex data as supported in the glTF spec. In the previous work we were able to get accessor index, but didn't implement a method to access the underlying buffer or  to parse it.\r\n\r\nThis pull request adds the `GetAccessor` method which allows us to get an accessor by index, and also DRYs up the `ConstructMeshPrimitiveAsync` code. Additionally, the various `GltfConversions` methods have been made public to make parsing the buffer easy.\r\n\r\n## Verification\r\n\r\nWe've added a new GLB with both the accessor and underlying buffer data along with a Unit test that covers the getting and parsing of the buffer data.\r\n"""
616112553,7844,b'Reconcile some unneeded #if UNITY_EDITOR defines',"b'## Overview\r\n\r\nWhile looking into the number of `#if` defines we have (which has a direct effect on the number of different assemblies we need to build and support), I realized we have some extraneous `#if UNITY_EDITOR` defines. I resolved least impact defines here. The three cases this PR fixes:\r\n\r\n1. Remove editor defines in editor-only assemblies\r\n1. Refactor out custom inspectors into editor-only assemblies\r\n1. Remove an unused UnityEditor namespace\r\n\r\nThere will likely be a few follow up PRs in the coming weeks.'"
616051822,7842,b'Update 2.4 -> 2.5 in mrtk_development',"b""## Overview\r\n\r\nSince we've already branched for stabilization, the mrtk_development branch now represents the 2.5 product."""
615909072,7840,b'Adding eye gaze changes to release and updating notes',b'## Overview\r\nBoth the Release Notes and Updating guidance are missing info about how to upgrade old eye tracking api calls to new ones. There is also no updating guidance on changes of setup eye tracking.\r\n\r\nThis PR updates documentation about Eye gaze/ tracking setup and api for 2.4.\r\n\r\n## Changes\r\n- Fixes: #7808 .\r\n\r\n'
615906066,7839,"b'added release notes for object manipulator, bounds control, migration window'",b'and fixed typo in object manipulator doc\r\n\r\n\r\n## Changes\r\n- Fixes:  https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7799 \r\ncompletes graduation task: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7357\r\n\r\n'
614902689,7834,b'Prerelease/2.4.0 stabilization -> dev',b'## Overview\r\n\r\nPrerelease/2.4.0 stabilization -> dev'
614830189,7833,b'Unity freezing when changing to UWP',"b'\r\n## Overview\r\nUnity 2019.3.8f1 does not respond after attempting to switch to UWP from Standalone.\r\n\r\n![80549722-d7eafc80-8972-11ea-9c0a-fa4d8785b1c5](https://user-images.githubusercontent.com/16922045/81423437-56525600-914c-11ea-93a2-70c85fa9c9dc.png)\r\n\r\n## Log Files:\r\nDestroying GameObjects immediately is not permitted during physics trigger/contact, animation event callbacks or OnValidate. You must use Destroy instead.\r\nUnityEditor.SceneManagement.EditorSceneManager:ClosePreviewScene_Injected(Scene&)\r\nUnityEditor.SceneManagement.EditorSceneManager:ClosePreviewScene(Scene)\r\nUnityEditor.PreviewScene:Dispose()\r\nUnityEditor.PreviewRenderUtility:Cleanup()\r\nUnityEditor.MaterialEditor:OnDisable()\r\nUnityEngine.Object:DestroyImmediate(Object, Boolean)\r\nUnityEngine.Object:DestroyImmediate(Object)\r\nUnityEditor.AssetPreviewUpdater:CreatePreviewForAsset(Object, Object[], String)\r\nUnityEditor.AssetDatabase:Refresh(ImportAssetOptions)\r\nUnityEditor.AssetDatabase:Refresh()\r\nMicrosoft.MixedReality.Toolkit.Utilities.Editor.ProjectPreferences:get_Instance() (at Assets\\MRTK\\Core\\Utilities\\Editor\\Preferences\\ProjectPreferences.cs:69)\r\nMicrosoft.MixedReality.Toolkit.Utilities.Editor.ProjectPreferences:Get(String, Boolean) (at Assets\\MRTK\\Core\\Utilities\\Editor\\Preferences\\ProjectPreferences.cs:119)\r\nMicrosoft.MixedReality.Toolkit.Editor.MixedRealityProjectPreferences:get_AutoEnableUWPCapabilities() (at Assets\\MRTK\\Core\\Utilities\\Editor\\Preferences\\MixedRealityProjectPreferences.cs:87)\r\nMicrosoft.MixedReality.Toolkit.Utilities.Editor.UWPCapabilityUtility:RequireCapability(WSACapability, Type) (at Assets\\MRTK\\Core\\Utilities\\UWPCapabilityUtility.cs:27)\r\nMicrosoft.MixedReality.Toolkit.Windows.Input.WindowsSpeechInputProvider:Initialize() (at Assets\\MRTK\\Providers\\WindowsVoiceInput\\WindowsSpeechInputProvider.cs:123)\r\nMicrosoft.MixedReality.Toolkit.BaseDataProviderAccessCoreSystem:RegisterDataProvider(IMixedRealityInputDeviceManager) (at Assets\\MRTK\\Core\\Services\\BaseDataProviderAccessCoreSystem.cs:254)\r\nMicrosoft.MixedReality.Toolkit.BaseDataProviderAccessCoreSystem:RegisterDataProviderInternal(Boolean, Type, SupportedPlatforms, Object[]) (at Assets\\MRTK\\Core\\Services\\BaseDataProviderAccessCoreSystem.cs:237)\r\nMicrosoft.MixedReality.Toolkit.BaseDataProviderAccessCoreSystem:RegisterDataProvider(Type, SupportedPlatforms, Object[]) (at Assets\\MRTK\\Core\\Services\\BaseDataProviderAccessCoreSystem.cs:162)\r\nMicrosoft.MixedReality.Toolkit.Input.MixedRealityInputSystem:CreateDataProviders() (at Assets\\MRTK\\Services\\InputSystem\\MixedRealityInputSystem.cs:268)\r\nMicrosoft.MixedReality.Toolkit.Input.MixedRealityInputSystem:Initialize() (at Assets\\MRTK\\Services\\InputSystem\\MixedRealityInputSystem.cs:235)\r\nMicrosoft.MixedReality.Toolkit.<>c:b__60_0(IMixedRealityService) (at Assets\\MRTK\\Core\\Services\\MixedRealityToolkit.cs:924)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:ExecuteOnAllServicesInOrder(Action`1) (at Assets\\MRTK\\Core\\Services\\MixedRealityToolkit.cs:1034)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:InitializeAllServices() (at Assets\\MRTK\\Core\\Services\\MixedRealityToolkit.cs:924)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:InitializeServiceLocator() (at Assets\\MRTK\\Core\\Services\\MixedRealityToolkit.cs:469)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:InitializeInstance() (at Assets\\MRTK\\Core\\Services\\MixedRealityToolkit.cs:583)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:RegisterInstance(MixedRealityToolkit, Boolean) (at Assets\\MRTK\\Core\\Services\\MixedRealityToolkit.cs:721)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:OnValidate() (at Assets\\MRTK\\Core\\Services\\MixedRealityToolkit.cs:1477)\r\n\r\n\r\n## Changes\r\nProposed solution: Substituting OnValidate method inside MixedRealityToolkit to a callback method marked with DidReloadScrip atribute.\r\n\r\n- Fixes: #7737 .\r\n'"
614439157,7832,b'Update Optimize Window UI to respect editor theme',"b""## Overview\r\n\r\nCurrently, the optimize window isn't respecting the editor theme with its titles:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/81359648-918e4f80-908e-11ea-8131-a19e7822d837.png)\r\n\r\nthis updates it to use a built-in theme as its base, so the color is inherited and managed by the editor:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/81359773-ee8a0580-908e-11ea-8cb3-ac9f2a4971c2.png)\r\n"""
614425921,7831,b'Fix canvas inspector exception with screen space canvases',"b'## Overview\r\n\r\nRemoved some duplicated canvas inspector code which was causing exceptions in some cases due to reflection. The vast majority of the code removed is now handled by asking Unity to create an editor instance for the canvas, which makes this code more robust to future Unity changes as well. Some MRTK-specific code was previously inserted in-line (mostly around disabling / not displaying certain fields in certain cases), which is no longer possible, but additional inspector warnings and context-specific configuration buttons were added for those cases (world space only for MRTK canvases and no camera should be set).\r\n\r\n## Changes\r\n\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7522\r\n'"
614380989,7829,"b'Update the updating link so that it provides actual ""how to upgrade your project"" guidance'","b'## Overview\r\nPoints the updating link so that the reader first sees how to upgrade, and then sees the next section (i.e. what to upgrade)\r\n\r\n## Changes\r\n- Fixes: #7977'"
614367807,7827,b'Add release note docs for the button config helper.',"b'## Overview\r\nAdds release notes for the button config helper, which simplifies the process of customizing certain parts of the pressable button.\r\n\r\n## Changes\r\n- Fixes: #https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7809\r\n'"
614367546,7826,"b'Add missing profiler marker image, configuration support for spatializers'",b'This change fixes #7824 by adding in the missing image. It also describes the recent addition of the audio spatializer selection in the MRTK configuration dialog.'
614352712,7825,b'Clean up the known issues part of the 2.4 release notes',"b'Just so that we don\'t forget to clean it up if we ultimately don\'t add any known issues,, deleting this for now. \r\n\r\nI\'m generally non-favorable of ""coming soon"" messages which are equivalently evil like untracked TODOs.'"
614168469,7823,b'Fixing Build Window access of Response Data ',"b'## Overview\r\nThis [PR](https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7527) has moved the access to DownloadHandler text and data to the Response object, adding an action that can be executed only when text from response is really needed (saving performance cost of unecessary DownloadHandler data conversion).\r\n\r\nMost of methods inside DevicePortal.cs (used bu Build Window buttons ) use the text property from rest calls Response Data but most UnityWebRequests objects are initialized inside a using scope from Rest.cs. DevicePortal.cs methods cannot access delegated methods from download handler destroyed when out of the initialization using scope.\r\n\r\nThis regression Issue can be seen when trying to communicate with Hololens device through Build Window or when playing the Glb Loading Demo. \r\n\r\n![80339267-d77a3500-8890-11ea-83b6-404f3c72c402](https://user-images.githubusercontent.com/16922045/81316513-94377780-9083-11ea-825f-6dc94fc253a5.png)\r\n\r\n## Changes\r\n\r\nThe proposed solution, keeps Response constructor option with delegate methods, but adds a flag in case ResponseData will have its download handler text property used by the caller method.\r\n\r\n- Fixes: #7734 .\r\n'"
614156880,7822,b'Update asset name to match filename',"b""## Overview\r\n\r\nUnity keeps updating this asset's serialized name to match the file name whenever I open the project."""
613803308,7819,b'Fix bug #7805',"b'## Overview\r\nFix the lag when I add many BoundingBox (over 100) by coding and set all properties.\r\n\r\nI add a bool variable to prevent ""CreateRig"", and also a function to set this bool. \r\n\r\nHow to use: After you create BoundingBox by code, you can set this bool to true, then set all the properties. After that, you will set this bool to false, and call ""CreateRig"" manually at the end.\r\n\r\n## Changes\r\n- Fixes: #7805  .\r\n\r\n\r\n\r\n'"
613707990,7817,b'Prerelease/2.4.0 stabilization -> dev',b'## Overview\r\n\r\nPrerelease/2.4.0 stabilization -> dev'
613648207,7814,b'Added an option to disable hands free input',b'## Overview\r\nAdded an option to disable hands free input to maintain experience for mrtk 2.3\r\n\r\n## Changes\r\n- Fixes: #7811\r\n'
613571694,7812,b'Clarified Toggle button functionality for input simulation',"b""The input simulation documentation wasn't clear that toggling the hands on was not the same as being able to manipulate them, so the updated documentation tries to be more clear on that language."""
613027910,7802,b'Adding UX building blocks updates to the 2.4.0 Release Note',b'Adding UX building blocks updates to the 2.4.0 Release Note\r\n\r\nFixes #7803 \r\n\r\n## Added items\r\n**Button Config Helper added to Pressable Buttons**\r\n**Toggle Checkbox/Switch/Radio Buttons**\r\n**Hand Menu Improvements**\r\n**Hand Menu Examples update**\r\n**Dialog (Experimental)**\r\n**Dock (Experimental)**\r\n\r\n## Page\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blob/cre8ivepark-patch-1/Documentation/ReleaseNotes.md\r\n\r\n![2020-05-05 20_27_12-Editing MixedRealityToolkit-Unity_ReleaseNotes md at prerelease_2 4 0_stabilizat](https://user-images.githubusercontent.com/13754172/81136220-d0e26200-8f0f-11ea-94a1-13ca44d2f2df.png)\r\n![2020-05-05 20_32_35-Editing MixedRealityToolkit-Unity_ReleaseNotes md at prerelease_2 4 0_stabilizat](https://user-images.githubusercontent.com/13754172/81136223-d3dd5280-8f0f-11ea-9130-d7a4b5a573ad.png)\r\n'
612954681,7800,"b""Updated pose data so pinch gesture doesn't shift the pinched object""",b'## Overview\r\nChanged the simulated articulated pose data to address the drifting for the far cursor. Also added tests\r\n\r\nOld:\r\n![baddrift](https://user-images.githubusercontent.com/39840334/81125439-fdd14d80-8eec-11ea-9da5-a76c759d51c4.gif)\r\n\r\nNew:\r\n![nodrift](https://user-images.githubusercontent.com/39840334/81125442-0164d480-8eed-11ea-8781-e11209ecedc1.gif)\r\n\r\n\r\n## Changes\r\n- Fixes: #7773\r\n'
612868923,7795,b'Update some deprecated methods in Unity 2020',"b""## Overview\r\n\r\nAlthough we don't yet fully support Unity 2020, there are a couple deprecated methods we can fix up to ease use:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/81111911-a8884280-8ed2-11ea-9a55-35b5e811e1ee.png)"""
612747779,7793,b'Properly handle user selecting None for the spatializer',"b'This change fixes #7782 and now correctly configures the project to not use an audio spatializer.\r\n\r\nWhen selecting None in the configurator, the following message is now logged to the console and the appropriate value of null is configured as the audio spatializer.\r\n\r\n""No spatializer was specified. The application will not support Spatial Sound.""'"
612739446,7792,"b""Properly handle users selecting 'None' as the audio spatializer""","b'This change fixes #7782 and now correctly configures the project to _not_ use an audio spatializer.\r\n\r\nWhen selecting None in the configurator, the following message is now logged to the console and the appropriate value of null is configured as the audio spatializer.\r\n\r\n""No spatializer was specified. The application will not support Spatial Sound.""'"
612737900,7791,"b'Update the PR validation pipeline to be faster (parallel, yey)'","b'A while back I made a few modifications to the PR pipeline to speed it up from maybe 70ish minutes to about 20 minutes now. There have been a few issues that have passed through (i.e. one build error AFAIK that affected UWP builds) but it\'s mostly been a net positive.\r\n\r\nI wanted to continue that work by lowering that number again (i.e. to 10 minutes per run) by making the build and test phases parallel.\r\n\r\nNote that in this case I used parallel jobs, instead of parallel stages (of which, my understanding is that stages are usually used for things like build -> deploy QA -> deploy canary -> deploy prod, so I believe that jobs are more appropriate for this).\r\n\r\nNote that there one thing that this change ""depends on"" - which is, if someone submits something that doesn\'t build, the test part will hang (Unity behavior when running tests on a non-building project). In this case it will time out (to ~20 minutes), but it might be the case that the failure of the other job might also cut this short (though maybe not). Either way, the worst case will still be the same as the average case now.'"
612726041,7790,b'Merge stabilization into dev',b''
612488409,7787,b'CreateKinematicBodies called after the prefab setters set to new value',"b'Added HandPhysicsServiceRoot null check\r\n\r\n## Overview\r\nFixes the code issues descibed in #7786\r\n\r\n## Changes\r\n- Fixes: #7786 \r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
612177156,7780,b'Update min version of DotNetWinRT to latest (0.5.1049)',"b'This change instructs MSBuild for Unity to the latest version, as of 2020-05-04. This version adds new functionality.'"
612172942,7779,b'Merge in stabilization to dev again',b''
612163384,7778,b'Fix the remaining broken image links in the documentation',"b""There are a couple last broken images in the docs, and I want to fix these up so that I can then enable broken image detection on the Assets/ folder as well.\r\n\r\nFor a little background, I added some build infra a while back to detect broken images which would check all markdown files under the Documentation/ folder - this was because we would keep getting messages (not OFTEN but still enough that it's not great) that we had broken image links. Unlike doc links, docfx doesn't actually check for validity of linked images.\r\n\r\nHowever, this was only enabled on Documentation/ because we really only put docs there - since that work went in, folks have been taking the process of putting docs for experimental features next to the code in the Assets/ folder.\r\n\r\nAfter this I can enable the Assets/ folder to also be checked."""
612160037,7777,b'Update authors with recent 2.4.0 changes',b'This change adds recent contributors to the authors file.'
612141295,7776,b'Merge stabilization into development',b''
612104644,7775,b'Update HL2 holographic reprojection docs',"b'## Overview\r\n\r\nAdds sample code and more information on the HL2 holographic reprojection method setting and how to change it at runtime.\r\n\r\nAlso removed a reference to ""depth reprojection"" in the setting, where the setting could be planar reprojection or autoplanar reprojection as well.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7718'"
612075054,7774,b'Update XR SDK docs with new XR Management version and updated images',"b'## Overview\r\n\r\nUpdates our XR SDK docs with the new in-Unity flow due to an updated XR Management version. The older XR Management version appears to have been unpublished, so this is the only flow going forward.\r\n\r\nAlso added images to try to add clarity to where and how each legacy MRTK service should be updated to use the XR SDK versions.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7538'"
611116814,7771,b'Add gaze capability to PrefabSpawner/ToolTipSpawner',"b'## Overview\r\nNow that the cool stuff from ToolTipSpawner works for any gameobject with PrefabSpawner it would be nice to also have the ability to use gazing.\r\nThis PR adds an additional enum entry to pick for gaze activation. You can now choose between 3 ways ob activating either a prefab in the case of the PrefabSpawner, or a ToolTip in case of the TooltipSpawner:\r\n\r\n- OnTab\r\n- OnFocus\r\n- OnGaze\r\n\r\n## Changes\r\n- **Relies on**: #7770\r\n'"
611114335,7770,b'Extract ToolTipSpawner timed/type visualization capabilities',"b""## Overview\r\nToolTipSpawner has a lot of logic that's generally interesting for GameObjects in total. But it currently only allows to spawn ToolTips specifically.\r\nThis PR extracts the basics into its own class to make them reusable for anything.\r\n\r\n## Changes\r\n- Fixes: #7769"""
611065358,7768,b'Fixed regression with the ggv pointer persisting when hands are up',b'## Overview\r\nFixes regression where the gaze cursor could still show up with articulated hands present. Also fixed edge case where gaze cursor would remain on the screen if hands were spawned while near an interactable \r\n\r\nOld broken behavior\r\n![GazeCursorOld](https://user-images.githubusercontent.com/39840334/81014021-ff2d4800-8e10-11ea-87c2-682c28c86628.gif)\r\n\r\nNew behavior\r\n![GazeCursorFix](https://user-images.githubusercontent.com/39840334/81014016-fdfc1b00-8e10-11ea-8d76-8841dafcf1cd.gif)\r\n\r\n\r\n## Changes\r\n- Fixes: #7742\r\n'
611037945,7767,b'Prerelease/2.4.0 stabilization -> mrtk_dev',b'## Overview\r\n\r\nPeriodic merge of stabilization to dev.'
610996411,7766,b'Leap Motion Documentation Update',b'## Overview\r\n\r\nUpdated the Leap Motion documentation: \r\n\r\n- Added instructions on integrating the new 4.5.0 Leap Core Assets.\r\n- Added intro gif at the top of the page\r\n- Updated images\r\n- Updated the Getting the Hand joints example script for both hands instead of one\r\n- Added the copying assembly error to Common Errors\r\n- Added Editor Workflow section \r\n\r\n## Changes\r\n- Fixes: #7689 \r\n'
610973849,7765,b'Add support for Leap Motion Core Assets version 4.5.0',"b'## Overview\r\n\r\nUltraLeap released a new version of the [Leap Motion Unity Core Assets](https://github.com/leapmotion/UnityModules/releases/tag/UM-4.5.0) recently.\r\n\r\nThe current MRTK Leap Motion Data Provider only supported the Leap Core Assets version 4.4.0, this PR adds support for 4.5.0 as well.\r\n\r\nThe largest difference between 4.4.0 and 4.5.0 is the location of the tests directory.  If the 4.5.0 core assets are imported into MRTK, a new test assembly definition is added.\r\n\r\nBoth 4.4.0 and 4.5.0 will be supported.\r\n\r\n## Changes\r\n- Fixes: #7764 \r\n\r\n## Verification\r\n1. Download the [Leap Motion Unity Core Assets 4.5.0](https://github.com/leapmotion/UnityModules/releases/tag/UM-4.5.0)\r\n2. Import the package into either Unity 2019.3 or 2018.4\r\n'"
610924703,7763,b'Add missing namespace',b'## Overview\r\n\r\n#7750 has revealed that one of our test files was missing a namespace. This adds one.'
610905147,7762,b'Getting started gizmos notice',b'## Overview\r\nAdds helpful notice in the tutorial to lower the gizmos size for the HandInteractionExamples.unity scene\r\n![Gizmos](https://user-images.githubusercontent.com/13754172/80819866-a8aed800-8b8a-11ea-8d7b-a3822fdfc907.png)\r\n\r\nDuplicate of this misconfigured PR: https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7755\r\n'
610784065,7759,b'UGUI dropdown zfight visual glitch',"b""### Describe the bug\r\nUnity UGUI Dropdown from Hand Interaction Example scene displays a visual zfight glitch. This is regression from release branch.\r\n\r\n## To reproduce\r\n\r\n1. Make a fresh clone of  mrtk's prerelease/2.4.0_stabilization branch\r\n2. Change build platform settings to Universal Windows Platform\r\n3. Import TMPro essencial resources\r\n4. Issue can be seen in the editor , WMH or after building and deploying to a HL1 device\r\n\r\n## Expected behavior\r\n\r\nOptions on UGUI dropdown should appear clearly without visual glitches\r\n\r\n## Screenshots\r\n\r\n2.4 Stabilization before fix:\r\n![2.4.0_stabilization](https://user-images.githubusercontent.com/16922045/80732638-85d9e080-8b04-11ea-9a75-35bc7e10f15f.gif)\r\n\r\n2.4 Stabilization after fix:\r\n![2_4_fix](https://user-images.githubusercontent.com/16922045/80818821-c05a8080-8bcb-11ea-8348-af632a3ae988.gif)\r\n\r\n\r\n- Unity Version  2018.4.12f1 and 2019.3.0f6\r\n- MRTK prerelease/2.4.0_stabilization\r\n\r\n## Target platform (please complete the following information)\r\n\r\n- HoloLens1\r\n- Unity editor 2018.4.12f1\r\n- Unity editor 2019.3.0f6\r\n- WMR headset\r\n\r\n## Changed\r\nChanged zwrite on Font material from seguisb SDF.asset used on text right above dropdown element.\r\n\r\nFixes #7745 """
610521522,7756,b'[Docs] 2.4.0 stabilization docs polish pass 2',"b""## Overview\r\nAdditional docs updates for the stabilization branch. \r\n- Fixed several broken image paths\r\n- Improved Button docs: Added guide for plated button \r\n- Improved Button docs: Added steps for customizing dimension\r\n- Fixed sentence case titles on some pages. \r\n- Added missing 'Near menu' page to TOC.\r\n- Added information on the Holographic Remoting with a USB cable connection\r\n\r\n![2020-04-30 19_40_45-README_Button md - MRTK-Public-Yoon - Visual Studio Code](https://user-images.githubusercontent.com/13754172/80777562-87160800-8b1a-11ea-9330-854d27199457.png)\r\n\r\n![2020-04-30 19_26_58-Preview README_Button md - MRTK-Public-Yoon - Visual Studio Code](https://user-images.githubusercontent.com/13754172/80777406-ffc89480-8b19-11ea-93c4-4875cfa933b6.png)\r\n\r\n"""
610478433,7755,b'Update GettingStartedWithTheMRTK.md',b'## Overview\r\nAdds helpful notice in the tutorial to lower the gizmos size for the HandInteractionExamples.unity scene\r\n![Gizmos](https://user-images.githubusercontent.com/39840334/80771381-2978c000-8b08-11ea-8fd0-149b0c06fc6a.png)\r\n'
610461878,7754,b'Prerelease/2.4.0 stabilization -> dev (to get the meta file in)',"b'## Overview\r\n\r\nPrerelease/2.4.0 stabilization -> dev, to get the missing meta file in dev asap'"
610460820,7753,b'Added missing README_Dialog.md.meta file',"b'## Overview\r\nMeta file was missing, adding it now to prevent future merge conflict heartache'"
610435847,7752,b'Add missing meta for new docs page',"b'## Overview\r\n\r\n#7740 added some new docs, but looks like one was missing a meta file.'"
610414140,7751,b'Merge stabilization back into dev',b''
610381897,7750,b'Add a namespace validation check to our CI scripts',"b""## Overview\r\nOur AssetRetargetting phase in our CI build depends on all of our code to have a namespace. This isn't checked anywhere during PR validation, which means it's really easy to check in an error like this and then have it fail in a very un-understandable way once things have already been checked in for a while. On particularly crazy days this means that the build will probably get hosed for a while as you don't find out the error until your change has gotten through the queue and has finally run the ongoing CI.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7699"""
610368102,7749,b'Extension service creator tool defaults to a null path if Generated/Extensions does not previously exist',"b""## Overview\r\nThe extension service creator has an issue where the destination folder is null if the generated folder doesn't exist at the time of the wizard invocation. It turns out that the wizard is actually creating the folder, but it never re-sets its internal state after generating the default folder, which leads to this bug.\r\n\r\nThe fix here is to actually force a reconciliation of default folder state after creating the default extension folder.\r\n\r\nThis also adds a test to verify that it happens. Note that the test doesn't run in all cases - if you already have some local extension generated folder, it will no-op (to avoid blowing away local state). Still, this test should run on CI which will at least ensure that we have coverage of weird stuff happening.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7530"""
610333962,7748,b'Merged and Moved IsSupportedPlatform into PlatfomUtility',b'## Overview\r\nMoves the 3 preprocessor directives into one method so it can easily be called\r\n\r\n## Changes\r\n- Fixes: ##7747'
609452538,7743,b'Prerelease/2.4.0 stabilization -> mrtk_dev',b'## Overview\r\n\r\nPeriodic merge of stabilization back to dev'
609297817,7741,b'Fix Crash in MixedRealityKeyboard.cs by unregistering for event handlers',"b'## Overview\r\nMixedRealityKeyboard was not unregistering event handlers for InputPane::Showing and InputPane::Hiding events, which could cause the application to crash when exiting, or if some other object tried to unsubscribe to InputPane::Hiding. Fix this by unsubscribing from the InputPane::Hiding event.\r\n\r\n## Changes\r\n- Fixes: #7739 \r\n'"
609246392,7740,b'2.4.0 stabilization docs',b'## Overview\r\nUpdated docs for stabilization branch\r\n- Updates on outdated content\r\n- Added missing hero images\r\n- Updated old screenshots\r\n- Fixed broken links\r\n- Added new features to the landing page\r\n- Updated TOC for the documentation portal\r\n\r\n![2020-04-29 10_33_47-README md - MRTK-Public-Yoon - Visual Studio Code](https://user-images.githubusercontent.com/13754172/80629408-aa03c780-8a07-11ea-88b2-22155d0a78c3.png)\r\n![2020-04-29 10_34_01-Preview README md - MRTK-Public-Yoon - Visual Studio Code](https://user-images.githubusercontent.com/13754172/80629416-ac662180-8a07-11ea-8e67-8e7843aba03e.png)\r\n![2020-04-29 10_53_55-README_Button md - MRTK-Public-Yoon - Visual Studio Code](https://user-images.githubusercontent.com/13754172/80629467-c142b500-8a07-11ea-8c82-cbd047959a41.png)\r\n![2020-04-29 10_33_18-README_Dock md - MRTK-Public-Yoon - Visual Studio Code](https://user-images.githubusercontent.com/13754172/80629488-c6076900-8a07-11ea-8f8a-81f84db7659d.png)\r\n![2020-04-29 10_33_22-README md - MRTK-Public-Yoon - Visual Studio Code](https://user-images.githubusercontent.com/13754172/80629495-c7d12c80-8a07-11ea-9f62-0583f26dbb3c.png)\r\n![2020-04-29 10_55_47-README_HandMenu md - MRTK-Public-Yoon - Visual Studio Code](https://user-images.githubusercontent.com/13754172/80629670-0830aa80-8a08-11ea-9183-cfb2ff4ed31d.png)\r\n'
608806287,7738,b'IsNull check for interfaces',"b'## Overview\r\nUnity overrides a couple of operators to deal with the managed and native situation of objects. This is problematic when checking an interface for null as it does not take the implementer operators into account.\r\nThis PR adds a convenient way to check interfaces for null that have potentially been implemented by MonoBehaviours\r\n\r\nI addition, it removes unnecessarily complicated null checks in locations where MonoBehaviours are used anyways\r\n\r\n## Changes\r\n- Fixes: #5981\r\n\r\n\r\n## Verification\r\n ```\r\nIEnumerator Start()\r\n    {\r\n        GameObject test = new GameObject(""tester"", typeof(Test));\r\n        ICollection @interface = test.GetComponent<ICollection>();\r\n        Destroy(test);\r\n        yield return null;\r\n        Debug.Log(@interface == null);\r\n        Debug.Log(@interface.Equals(null));\r\n        Debug.Log(IsNull(@interface));\r\n    }\r\n```'"
608617103,7736,b'Gaze cursor now disabled when simulated articualted hands are in view',b'##  Overview\r\nMade it so the simulated gaze cursor will no longer appear if articulated hands are in view. Fix is specifically to address regression with holographic emulation in 2018.4\r\n\r\n## Changes\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/7715\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/7742\r\n'
607662811,7735,b'Migration Tool UX improve',"b""## Overview\r\nRight now after performing any kind of upgrade the progress bar just disappears and the user won't have any information if the upgrade succeeded and which files got upgraded. (there is some message in the log, but not all users will have that open all the time)\r\n\r\nDescribe the solution you'd like\r\nProposed changes:\r\n\r\nLet user know that upgrade process is finished by showing a message (popup or notification) after the progress bar is finished.\r\n\r\nKeep the list of items that were added for upgrading in the UI and show a green tick or a red X to indicate if the asset has been upgraded. Green tick ones can have a tooltip like: Asset has been upgraded successfully - where red ones can show a truncated version of the error and on double click lead the user to the actual log message that gives the full information.\r\n\r\n(Should we warn the user before starting upgrading process that this is a non - revertible process? -> once migration is performed the files can't be changed back (except by their own version control, but that's out of our hands)\r\n\r\n![Screenshot (21)](https://user-images.githubusercontent.com/16922045/80507187-788aed80-896e-11ea-96d5-d70c5a9cb875.png)\r\n\r\n## Changes\r\n- Fixes: #7717\r\n"""
607096144,7732,b'Scroll View Graduation - Reseting Child Interaction when dragging',"b'## Overview\r\nThis PR is part of Scroll View graduation and addresses issues related to interaction with children elements after scroll view is engaged into drag:\r\n\r\n1. Pressable Buttons never trigger OnPressCompleted. \r\nWhen a collection of pressable buttons is added to ScrollingObjectCollection, OnPressCompleted event fire is insconsistent.\r\n\r\n2. Pressable buttons do not reset their state after input is cancelled.\r\nWhen a pressable button inside a ScrollingObjectCollection is pressed, button reset (retract) is not happening. This happens if user presses the button slowly, if user engages in a scroll right after button press, or if input is cancelled.\r\n\r\n3. Scroll engage should stop any content interaction \r\n\r\n## Solution proposed\r\n\r\n Using the event propagation feature branch, scroll view can register for touch events on trickle down phase allowing it to catch touch events before its children. If scroll view is engaged in drag, it calls eventData.Use() allowing children to handle cancellation if event is used. On Propagation branch event propagation is only stopped by calling eventData.StopPropagation(), so we are using eventData.used as a flag for cancellation. \r\n\r\n * More performant and clear option could be to create and use an interface for interactable cancellation and raise something like an ICancellable.CancelInteraction  and StopPropagation after cancellation sent. \r\n\r\n## Changes\r\nThe PR is based on Event Propagation feature branch.\r\n\r\nFixes #7444\r\nFixes #7445\r\nFixes #7446\r\n'"
606641497,7731,b'Add 2.4.0 stabilization to our docs list',b'## Overview\r\n\r\nAdds 2.4.0 docs to our version dropdown in the docs list.'
606632278,7730,b'Update the configurator to detect an appropriate audio spatializer and respond to changes',"b'This change enables easy configuration of newly installed audio spatializers, for example https://www.nuget.org/packages/Microsoft.SpatialAudio.Spatializer.Unity, by doing the following\r\n\r\n1. Check to see if a spatializer is configured\r\n2. Check to see if the configured spatializer is currently installed\r\n3. Check to see if the count of installed spatializers has changed since the last time the project loaded\r\n\r\nIn the case of 3, it is possible, in some cases, for the collection to have the same count, yet contain different values. Other than scenario 2 failing, this is outside of the current change scope.\r\n\r\nFixes #6897\r\n\r\nOpening to the  branch as this is a frequent request from audio focused customers and makes it easy for non-audio focused customers to select the best spatializer for their scenario.\r\n\r\n![image](https://user-images.githubusercontent.com/13281406/80264143-f639bb00-8647-11ea-9d4c-bee035cc3bd1.png)\r\n'"
606631482,7729,b'Prerelease/2.4.0 stabilization -> dev',b'## Overview\r\n\r\nPeriodic merge of stabilization to dev'
605891244,7725,b'Add guidance on consuming MRTK in larger projects',"b""As we've worked with various folks that have consumed MRTK in larger projects, there have been some gotchas and other guidelines that others have found helpful.\r\n\r\nThe two main ones are around:\r\n\r\n1. The gitignore (because there's some autogenerated stuff that MRTK will create if you're using some of its NuGet based functionality)\r\n2. Checking in the ProjectPreferences.asset file (to share the same configurator settings). This one is especially important for folks who are using non-default values for the MRTK configurator - if this doesn't get checked in, other collaborators have a high likelihood of applying those wrong default values and making things really messy.\r\n\r\nFixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7298"""
605766957,7723,b'Added WMR Standalone section to Build and Deploy doc',b'## Overview\r\n\r\nAdded a new section to the Build and Deploy doc that outlines the steps required to use the Windows Mixed Reality Headset for Standalone builds.  Also added Leap Motion to the table of contents.\r\n\r\n## Changes\r\n- Fixes: #7685 \r\n'
605283204,7716,b'Fix Hand Menu moves in Z when rotating head side to side',"b'## Overview\r\nFix significant movement of hand menu when moving head side to side. This was caused by using the camera forward vector to compute the offset, which can change drastically as you move your head. Computing instead vector from the hand to the head is much more stable, and produces very similar positioning results.\r\n\r\nBefore:\r\n![hand menu move camera move](https://user-images.githubusercontent.com/168492/80067742-4e12dd80-84f3-11ea-8317-015edbf2d392.gif)\r\n\r\n\r\nAfter:\r\n![headmove2](https://user-images.githubusercontent.com/168492/80067736-4a7f5680-84f3-11ea-9eca-c0ab7e586e56.gif)\r\n\r\n\r\n## Changes\r\n- Fixes: #7706 \r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
605175624,7714,b'Configurable pinch/air tap thresholds for Leap Motion',"b'## Overview\r\n\r\nAdded configurable pinch thresholds for a Leap Motion hand. \r\n\r\n| New Inspector | Current Value Appearance |  \r\n|--------|-------|\r\n|    ![PinchConfigure](https://user-images.githubusercontent.com/53493796/80049001-a41d5c00-84c6-11ea-9f43-c1508b374aab.png) | ![LeapPinchAfter](https://user-images.githubusercontent.com/53493796/80048917-720bfa00-84c6-11ea-98a9-8ead7271dd28.gif) |  \r\n\r\n## Changes\r\n- Fixes: #7689 \r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
605146455,7712,b'Modifying grab pointer behavior to use a cone instead of a sphere for grab interactions',"b'## Overview\r\nModifies the behavior of the grab pointer to effectively use a Conecast instead of a sphere cast\r\n\r\n## Changes\r\n- Fixes: #7686\r\n\r\n\r\n## Screenshots\r\nGizmos rendering of new cone pointer parameters used to determine when hand is near an object, which can be enabled by using the HoloLens2ShellGrabPointer prefab instead of the GrabPointer prefab:\r\n\r\n![image](https://user-images.githubusercontent.com/168492/82388775-4578ce80-99ef-11ea-8e3c-bdbe01009008.png)\r\n\r\n![image](https://user-images.githubusercontent.com/39840334/82500569-72d58300-9aa8-11ea-8102-ec9a62832d4e.png)\r\n'"
605136935,7711,b'Prerelease/2.4.0 stabilization -> dev',b'## Overview\r\n Periodic merge of stabilization back to dev'
605110321,7710,b'Add WindowsMixedRealityUtilities.SpatialCoordinateSystem null checks',"b""## Overview\r\n\r\nAdds a `WindowsMixedRealityUtilities.SpatialCoordinateSystem != null` check before passing it into `SpatialPointerPose.TryGetAtTimestamp`. In certain scenarios, like running in the editor without a headset attached, the app won't launch into the full holographic view and we won't have a valid spatial coordinate system.\r\n\r\n## Changes\r\n- Fixes: #7698"""
604724077,7708,b'Fold in Playspace transform into hand mesh display',"b""Fold in Playspace transform into hand mesh display to accommodate teleport.\r\n\r\n## Overview\r\n\r\nThe transforms for the hand meshes are missing the Playspace transform. Therefore, after teleport the hand meshes will appear in the wrong place. This fixes that.\r\n\r\n## Changes\r\nFolds in a missing transform in WindowsMixedRealityArticulatedHandDefinition, following the pattern elsewhere in the code (e.g. WindowsMixedRealityArticulatedHand).\r\n\r\n- Fixes: #7697.\r\n\r\n\r\n## Verification\r\nNote that the performance cost is negligible, resulting in only a transform concatenation per mesh. This addition appears to just correct an easy to miss oversight. No architectural or otherwise significant changes are needed.\r\n\r\nNote that I don't have context to know if this fix relates to new XR SDK surface, or whether it should. I've only tested and validated on the legacy API. Would be great if someone knowledgeable there could confirm or deny.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
604663660,7707,b'Migration Tool: Only list files in migration tool project option that actually can be migrated',"b'## Overview\r\nOn Migration Window, when trying to migrate entire project using the ""Add Full Project for Migration"" button, Migration tool lists all files of the project which is not a great user experience, as it\'s uncertain to the user if all their files will be affected by the upgrade.\r\nIt would be better to just list the files that actually contain the components we\'re planning to upgrade. That would also make the list shorter, make it easier to filter files and give a better overview before pressing the migration button.\r\n\r\nThis is part of Migration Tool graduation.\r\n\r\n## Changes\r\nTool goes through object hierarchy checking if migration is supported on any of the hierarchy objects. Only show upgradeable files in that list.\r\n\r\nBefore:\r\n![Screenshot (15)](https://user-images.githubusercontent.com/16922045/79974050-8503d780-8490-11ea-9df4-bffbde8dce27.png)\r\n\r\nAfter:\r\n![Screenshot (14)](https://user-images.githubusercontent.com/16922045/79974057-892ff500-8490-11ea-98ce-d41c6d914ce1.png)\r\n\r\n\r\n- Fixes: #7690 .\r\n\r\n'"
604270573,7705,b'Prototyping Keyboard shortcut to bring up Input Simulation Cheat Sheet',"b'## Overview\r\nRough draft for implementing an input shortcut to bring up a cheat sheet for input simulation controls/features. When first getting started with MRTK, its hard to figure out the input simulation controls. Adding a cheat sheet which is quickly accessible should ease the experience for first time users.\r\n\r\n## Changes\r\n- Fixes: #7675 \r\n\r\n![cheatsheet](https://user-images.githubusercontent.com/39840334/86066480-13637f00-ba27-11ea-8814-d222d548f684.gif)\r\n\r\n'"
604267724,7704,b'Cherry pick https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7694 into stabilization',"b""This change didn't quite make it over, so let's gooooo"""
604176341,7703,b'[2.4.0 stabilization] Several bug fix for the HandInteractionExample scene',"b""## Overview\r\nSeveral bug fix for the HandInteractionExample scene\r\n- Reverted change in ShowSliderValue.cs which was modified for temporary testing\r\n- Updated broken Toggle Features Panel Layout to incorporate new 'Gaze Source' Button\r\n- Assigned Debug Text message for the far interaction as well\r\n\r\n### ToggleFeaturesPanel - Before & After\r\n![2020-04-21 09_59_05-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/79897255-4bfb3280-83be-11ea-905a-7dcdb47fe4da.png)\r\n![2020-04-21 10_07_53-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/79897253-4b629c00-83be-11ea-8f88-fd1f29cb7da7.png)\r\n\r\n### Piano debug message \r\n![2020-04-21 10_18_57-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/79897046-ffaff280-83bd-11ea-9c6e-4774ed7a4efe.png)\r\n\r\n### Slider value text fix - Before & After\r\n![2020-04-21 09_59_13-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/79897327-6b925b00-83be-11ea-8dcd-c453cc3a8d09.png)\r\n![2020-04-21 10_36_49-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/79897328-6c2af180-83be-11ea-8a24-50ab077f5f9b.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #7701 \r\n"""
604172908,7702,b'Several bug fix for the HandInteractionExample scene',"b""## Overview\r\nSeveral bug fix for the HandInteractionExample scene\r\n- Reverted change in ShowSliderValue.cs which was modified for temporary testing\r\n- Updated broken Toggle Features Panel Layout to incorporate new 'Gaze Source' Button\r\n- Assigned Debug Text message for the far interaction as well\r\n\r\n### ToggleFeaturesPanel - Before & After\r\n![2020-04-21 09_59_05-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/79897255-4bfb3280-83be-11ea-905a-7dcdb47fe4da.png)\r\n![2020-04-21 10_07_53-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/79897253-4b629c00-83be-11ea-8f88-fd1f29cb7da7.png)\r\n\r\n### Piano debug message \r\n![2020-04-21 10_18_57-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/79897046-ffaff280-83bd-11ea-9c6e-4774ed7a4efe.png)\r\n\r\n### Slider value text fix - Before & After\r\n![2020-04-21 09_59_13-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/79897327-6b925b00-83be-11ea-8dcd-c453cc3a8d09.png)\r\n![2020-04-21 10_36_49-Unity 2018 4 21f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/79897328-6c2af180-83be-11ea-8a24-50ab077f5f9b.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #7701 \r\n"""
604166257,7700,b'BoundsControl is no longer recreating the rig on any of the configuration changes',"b""## Overview\r\nOld BoundingBox is recreating it's rig / handles / boxdisplay / links on every configuration change.\r\nThis PR is addressing this problem in BoundsControl.\r\nEvery configuration change will now only reload what is absolutely necessary (there's only a few cases where we actually have to recreate gameobjects eg. when we change the prefab of a handle during runtime)\r\n\r\nChanges in detail:\r\n- ProximityEffect\r\n  - added event to IProximityEffectObjectProvider to inform ProximityEffect whenever objects that the effect is applied to change.\r\n- Visuals\r\n  - every configuration change has an event that the corresponding visual logic class subscribes to, handling every configuration change individually and only reloading necessary parts\r\n  - DrawTetherWhenManipulating and HandlesIgnoreCollider settings are now part of the HandlesBaseConfiguration as they apply to the handle visuals only (used to be part of BoundsControl main class). They can be set per handle type now.\r\n- BoundsControl main class\r\n  - moved flattenedhandles array into internal util class as it's a shared resource between main bounds control and the visual classes\r\n  - renamed configuration properties, so there's no name clash with the type name\r\n  - fixed wireframe flag not being set correctly (needed for handle activation through pointer proximity)\r\n  - removed subscriptions to configuration changes, as those are handled independently now by the visuals logic classes\r\n  - ported over bounds calculation fix from bounding box - https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7301/files\r\n - MigrationHandler\r\n   - fixed too early destruction of boundingbox when app bar still needs to be migrated \r\n\r\n\r\nAnd created tests for all of the configuration changes, to not only verify that they're still doing the right thing but also to verify that any of the visuals won't be recreated if not necessary.\r\nTests added:\r\n\r\n- ActivationTypeTest\r\n- HandleVisibilityTest\r\n- ManipulationTetherTest\r\n- BoundsControlPaddingTest\r\n- LinksVisibilityTest\r\n- LinksFlattenTest\r\n- LinksRadiusTest\r\n- LinksShapeTest\r\n- LinksMaterialTest\r\n- BoxDisplayMaterialTest\r\n- BoxDisplayFlattenAxisScaleTest\r\n- RotationHandleFlattenTest\r\n- RotationHandlePrefabTest\r\n- ScaleHandlePrefabTest\r\n- ScaleHandleMaterialTest\r\n- RotationHandleMaterialTest\r\n- ScaleHandleSizeTest\r\n- RotationHandleSizeTest\r\n- ScaleHandleColliderPaddingTest\r\n- RotationHandleColliderPaddingTest\r\n\r\n\r\n## Changes\r\n- Fixes: #6260 \r\n\r\n\r\n## Verification\r\n- added tests \r\n- tested existing scenes\r\n- tested migration scenarios and run existing unit tests"""
603628476,7694,b'Add missing namespace to LeapCoreAssetsDetector',b'## Overview\r\nAdd missing MixedReality namespace to LeapCoreAssetsDetector\r\n\r\n'
603598347,7693,b'Fixed bounding box handlers not growing and added unit tests',b'## Overview\r\nIncorporates suggestion from #7395 to fix bounding box handlers not growing to when the cursor was near them. Also includes refactoring out of date code comments and makes the corners and balls transforms correspond to the actual transforms of the in-editor objects\r\n\r\n## Changes\r\n- Fixes: #7395\r\n'
603439877,7691,b'Input Simulation camera movespeed and profile adjustment',"b""Untied the camera movespeed from the frame rate.\r\nAdjusted the camera's movespeed accordingly\r\nChanged the fast control key from Right Ctrl to Right Shift so the user can't accidentally call Ctrl + S\r\n\r\n## Changes\r\n- Fixes: #7692"""
603285524,7688,b'Graduated ObjectManipulator and MigrationWindow ',"b""## Overview\r\nThis PR graduates ObjectManipulator and the MigrationWindow to allow users to smoothly migrate from ManipulationHandler to ObjectManipulator.\r\n\r\nDetailed changes:\r\n- Moved ObjectManipulator and MigrationWindow and all associated classes out of experimental namespace\r\n- Removed experimental ref from ManipulationHandler\r\n- Replaced all occurences of ManipulationHandler in all MRTK scenes and prefabs except ManipulationHandler specific ones with the new ObjectManipulator (done with migration tool migrate project option)\r\n- while using migration window / tool to migrate I fixed the following bugs:\r\n-- fixed query listing all files in current project (thanks @vaoliva )\r\n-- fixed scrollbar being stuck in migrationwindow which will hide the migrate button in long file lists\r\n-- fixed tool hanging when trying to migrate .fbx or other files that aren't a unity prefab file\r\n-- made sure we're not upgrading any files that don't need migration\r\n- replaced manipulationhandler with object manipulator in tests or comments that are not directly related to the old manipulationhandler\r\n- Note: MigrationWindow test class is still in experimental folder as it will still be used for testing migration on experimental features (currently BoundsControl)\r\n\r\n## Changes\r\n- Fixes: #7357 \r\n\r\n\r\n## Verification\r\nrun all tests and verified that hand interaction scene / slate / object manipulator scene works properly in editor - will need some more people testing this during stabilization"""
602173451,7684,b'Update coding guidelines to match current state of the repo',"b""## Overview\r\n\r\nI noticed, when reviewing our naming conventions during some PR reviews, that we have some older guidance that doesn't really match the current state of the repo.\r\n\r\nFrom my best attempt at regexing as many syntaxes as I could think of:\r\n\r\nExamples of PascalCase `private static readonly` fields: 611\r\nExamples of camelCase `private static readonly` fields: 104\r\nExamples of UPPER_SNAKE_CASE `private static readonly` fields: 7\r\n\r\nExamples of PascalCase `private` properties: 95\r\nExamples of camelCase `private` properties: 11\r\n\r\nRecommended while reviewing:\r\n![image](https://user-images.githubusercontent.com/3580640/79604622-468ea700-80a3-11ea-8c13-663dbdefac96.png)\r\n\r\nOr press this link:\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/7684/files?diff=unified&w=1"""
602134282,7683,b'Add manual DotNetAdapter install instructions',b'This change adds instructions to work around #7239 to the HolographicRemoting article.\r\n\r\nThe instructions presume use of https://github.com/GlitchEnzo/NuGetForUnity/releases'
601633080,7681,b'BugFix PR for the TestDefaultProfiles Test',b'Fixes a regression with TestDefaultProfiles'
601546254,7680,b'Add instrumentation recommendation to performance getting started page.',"b'This change adds recommendations to instrument application code using a similar pattern to MRTK, especially in event handlers.'"
601495454,7679,"b'Hand menu improvements - added gaze activation option, new examples'","b""## Overview\r\nHand menu has been adapted in many applications. One of the biggest issue we found is the accidental false activation while manipulating objects or interacting with other content, etc. This PR adds '**Gaze Activation**' option to HandConstraintPalmUp.cs to prevent false activations. With this option, the menu does not accidentally show up, until the user look at the hand (which clearly shows the user's intention)\r\n\r\n![2020-04-16 14_30_14-Bondi_DevExperience pptx - PowerPoint](https://user-images.githubusercontent.com/13754172/79508685-d888a800-7fee-11ea-8474-8aaba094a975.png)\r\n\r\nThis PR also introduces large/complex menu interaction examples. For the complex menu that requires longer, extended interaction time, **we recommend to world-lock the menu** instead of keeping it hand leashed so that user can interact with UI in stable position. Two examples show how to world-lock the menu - A. Grab & Pull and B. Automatic world-lock on hand drop. \r\n\r\n### Updated documentation\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_HandMenu2020Mar/Documentation/README_HandMenu.md\r\n\r\n### Example of accidental hand menu activation:\r\n![20200416_HandMenu_FalseActivation_1](https://user-images.githubusercontent.com/13754172/79506678-4206b780-7feb-11ea-8eee-162a7522ed29.jpg)\r\n![20200416_HandMenu_FalseActivation_2](https://user-images.githubusercontent.com/13754172/79506685-4632d500-7feb-11ea-990e-b12f392812f5.jpg)\r\n![20200416_HandMenu_FalseActivation_3](https://user-images.githubusercontent.com/13754172/79506694-4b901f80-7feb-11ea-8acb-1cf09e78a898.jpg)\r\n\r\n### With Gaze Activation option:\r\nSmall menu\r\n![0416_HandMenu_01a](https://user-images.githubusercontent.com/13754172/79507112-fa346000-7feb-11ea-8aa5-86a92f78a8ec.gif)\r\n\r\nLarge menu\r\n![0416_HandMenu_02](https://user-images.githubusercontent.com/13754172/79507261-4aabbd80-7fec-11ea-95c4-6e3f4bd18c11.gif)\r\n\r\n## Example scene update\r\n### [New] Large menu interaction example 1: Grab & Pull menu to world-lock\r\n![0416_HandMenu_03](https://user-images.githubusercontent.com/13754172/79507983-90b55100-7fed-11ea-9062-630c892950cb.gif)\r\n\r\n### [New] Large menu interaction example 2 - Auto world-lock on hand drop\r\n![0416_HandMenu_04](https://user-images.githubusercontent.com/13754172/79508227-f9043280-7fed-11ea-995f-ac3cfe42fe65.gif)\r\n\r\n### Updated HandMenuExamples scene\r\n![2020-04-16 13_54_22-Unity 2018 4 21f1 -  PREVIEW PACKAGES IN USE  - HandMenuExamples unity - MRTK-Pu](https://user-images.githubusercontent.com/13754172/79508333-39fc4700-7fee-11ea-94b3-6c2c8f061e4e.png)\r\n\r\n\r\n### Updated/added Hand menu prefab files\r\n![2020-04-16 13_56_18-Unity 2018 4 21f1 -  PREVIEW PACKAGES IN USE  - HandMenuExamples unity - MRTK-Pu](https://user-images.githubusercontent.com/13754172/79508323-31a40c00-7fee-11ea-9605-df5c4cdeecbf.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #7365 \r\n\r\n"""
601325676,7676,"b""Adjusted anchor behavior to match unity's layout group behavior""","b""## Overview\r\nChanged the grid object collection's behavior so that the collection is anchored at the center of the cell in the upper left/upper right/lower left/lower right when in the appropriate mode\r\n\r\nPreviously: \r\n![image](https://user-images.githubusercontent.com/39840334/79493707-b84cef00-7fd6-11ea-8716-ef7cf989c41d.png)\r\n\r\nNow:\r\n![image](https://user-images.githubusercontent.com/39840334/79493725-c1d65700-7fd6-11ea-9a83-316171b103eb.png)\r\n\r\nYou can also toggle between the old and new behaviors\r\n\r\n![LegacyGridAnchor](https://user-images.githubusercontent.com/39840334/79516745-17bff480-8001-11ea-8492-cfa953c451da.gif)\r\n\r\n## Changes\r\n- Fixes: #7666\r\n\r\n"""
601236031,7674,b'Re-add accidentally removed profiler marker',b'This change restores a profiler marker that was accidentally removed during the merge of the development branch into the event_propagation branch.'
600624641,7672,b'Address merge conflict and add profiler instrumentation for new functionality',b'merge the latest mrtk_development branch and resolve merge conflict in mixedrealitytoolkitinputsystem.cs.\r\n\r\nalso adds two new profiler markers for the new event propagation functionality'
600599617,7671,b'Add profiler instrumentation to data provider and performance documentation',b'This change adds information re: adding profiler instrumentation to custom components and adds a discussion of the Unity Profiler to the performance guidance page.'
600559070,7670,b'Move WMR camera warning into correct scope',"b""## Overview\r\n\r\nThis `Debug.LogWarning` is currently running anytime `IsOpaque` is called on a UWP build. This should instead only be called on a UWP build if the app hasn't properly converted over to the WMR camera settings provider.\r\n\r\nTo fix this, it's been moved inside the `else` scope, with the matching deprecated Unity API call adjusted as well."""
600487552,7668,b'Update HandConstraintPalmUp logs to be more accurate',"b""## Overview\r\n\r\nThis was previously logging a warning that a controller of type `IMixedRealityHand` was needed, but actually the failing case is the palm joint being unobtainable from `jointedHand.TryGetJoint(TrackedHandJoint.Palm, out MixedRealityPose palmPose)`.\r\n\r\nThis class is intended to fall back gracefully when the controller isn't an `IMixedRealityHand`, so no additional logging is needed in that case.\r\n\r\n## Changes\r\n- Helps with https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7245"""
600454188,7667,b'Update near interaction touchable default forward',"b""## Overview\r\n\r\nCurrently, the default forward direction for near interaction touchable is `Vector3.forward`. This direction is into the scene, away from the camera. Since we use this direction as the assumed direction a user will be pressing the button from, this doesn't make sense in most cases, since they'll be pressing from the camera. This changes the default value to `-Vector3.forward`. This matches a case we have later in the code as well:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blob/6340cf0d67071533fb6cb47fed7bdf899be6ef6b/Assets/MRTK/Services/InputSystem/NearInteractionTouchable.cs#L190\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/3580640/79366094-705b9880-7f00-11ea-8311-8879e5cb8839.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/3580640/79365411-78670880-7eff-11ea-9bcc-9d6599850a5b.png)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6319"""
599975552,7665,b'Improve MRTK project settings text',"b'## Overview\r\n\r\nAfter https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6315, all our MRTK settings are now on a per-project basis (some were previously global), serialized into a .asset file. Some of our settings descriptions still mentioned the previously global nature of things.\r\nI also:\r\n\r\n* updated some of the settings text, for example to explicitly call out the one that handles the project configurator\r\n* updated some summary tags that were incorrect (copied and pasted from the first setting and not changed)\r\n* added a note to the settings page about where these settings are serialized and how they can be shared\r\n* Fixed some instances of incorrect Unity null propagation\r\n    * `Instance?.` in `ProjectPreferences`, where `Instance` is a `UnityEngine.ScriptableObject`.\r\n* Removed an unused key\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/79293064-8da05080-7e87-11ea-9dbc-687df0dd5266.png)\r\n'"
599955345,7664,b'Allow user to customize alignment of objects in grid layout',"b'## Overview\r\nAllow the user to customize the behavior of the grid layout so that they can choose how the elements in the grid are aligned, whether they are aligned in the center or along the left/right axis (top/bottom axis when doing row then column layout)\r\n\r\n## Changes\r\n- Fixes: #6813 \r\n\r\n![GridAlignment](https://user-images.githubusercontent.com/39840334/79289136-5c228780-7e7d-11ea-82b4-07959e42c3ed.gif)\r\n'"
599912888,7661,b'Add profiler instrumentation to extension services',b'This change adds the profiler instrumentation described in (#7565) for the following extension services\r\n\r\n- HandPhysics\r\n- LostTracking\r\n- SceneTransition'
599771939,7658,b'Add profiler instrumentation to scene system',b'This change adds instrumentation to the scene system as part of #7565 '
599752527,7657,b'Remove a section that has dead text/links',"b""## Overview\r\nIt looks like the eye tracking docs had an outline for a tutorial that was never written - it's possible that it exists somewhere but since it isn't in the rest of our docs, it would be better for us not to have broken links/getting folks' hopes up, so until that tutorial gets written, I'm removing that reference to a non-existent page.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7542"""
599729119,7656,b'Update docs to explain a bit more about what GGV is.',"b""## Overview\r\nThere are a few locations that will use GGV (being the first location that people will often read) which don't expand the acronym. I ended up adding notes on what GGV stands for so that it's then at least searchable afterward (i.e. oh I should look for 'gaze gesture voice').\r\n\r\nNote that I also could have introduced an acronym page for the docs but opted to not go that route because I don't think that the page would be super large and I don't think that people would necessarily read it (i.e. explaining what something is inline feels easier to the reader, at least within the scope of these changes)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7623\r\n"""
599291332,7655,b'Update config checker to be aware of XR SDK',"b""## Overview\r\n\r\nFirst pass on making the configurator XR SDK aware. In this, a `bool` is added to `XRSettingsUtilities` which checks if an XR SDK plug-in is installed which disables legacy VR. In this PR, this stops the check for VR enabled from running, since the legacy API was always being checked against and returns false when an XR SDK package is installed. This was causing the configurator to pop-up on every asset reload when XR SDK is enabled.\r\n\r\nNext pass would be to see if there's a way to configure the XR SDK loaders from code.\r\n\r\n## Changes\r\n- Part of https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7513\r\n"""
599191199,7654,b'Add profiler markers to camera system and the generic xr sdk mesh observer',b'This change is part of #7565 and adds markers to the fallback path in the camera system as well as to the XRSDK generic spatial mesh observer.'
599160487,7653,b'Add profiler markers to the teleport system',b'This change is the portion of #7565 addressing the teleport system.'
599147111,7652,b'Add profiler markers to diags system and visual profiler',b'This is the part of #7565 that adds unity profiler instrumentation to the diagnostics system and the visual profiler.'
599082342,7650,b'Remove leftover Profiler.EndSample() code in GenericXRSDKController',"b'## Overview\r\n\r\nSome profiler code was left in GenericXRSDKController, which causes a compilation error in Unity 2019.3 due to the removed `using`.'"
599077764,7649,b'Add profiler instrumentation to spatial awareness paths',b'This change adds unity profiler markers to the spatial awareness system and its data providers.\r\n\r\nThis is a part of #7565'
598121742,7646,b'Add additional profiler markers and update from begin/endsample to using(marker)',"b""This change refines the input system profiler markers by replacing begin/endsample calls to the preferred scoped using(marker.auto) syntax.\r\n\r\nAt the same time, additional markers were added that rounds out the suite of input markers.\r\n\r\nAs a part of this change, one HashSet was replaced with a Dictionary to eliminate some collection iterations. It has not been formally measured, though, anecdotally, it has been reported to have improved a partner application's performance."""
598075824,7645,b'Code cleanup removing extrneous totalNumColliders variable',"b""Addressing Will's comment on this PR\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/7625/files/209ae88a6bcfba8cf42b027672e4628dbcd7df3b#diff-8a90c91db20ded15531d97d45cd9a163R1240\r\n\r\n"""
598055587,7644,b'Update ManualCameraControl.cs summary doc',"b""## Overview\r\n\r\nThis summary tag still refers to adding this script to the camera. This is a holdover from the original script, ported from HTK. The MRTK version of the script isn't a MonoBehaviour and is used directly by the simulation service."""
598037777,7643,b'Revert SceneQueryType rewrite',b'## Overview\r\n\r\nRewriting this overwritten auto-property with another auto-property seems to have introduced a serialization issue. This reverts that change.\r\n\r\n## Changes\r\n- Fixes: #7642 '
597994897,7641,b'Fix comments flagged by comment style checker',"b""## Overview\r\n\r\nAfter #7635 was merged, it looks like a few comments hadn't been updated to the newly enforced style. This PR should fix the last of them.\r\n\r\nhttps://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=10576&view=logs&j=ae5f814d-d003-5afd-2125-fa0189ea8658&t=12d627c1-3bb6-55bf-f915-b77e58828cea\r\n\r\n## Changes\r\n- Fixes: CI failure found by #7635 """
597949439,7639,b'Leap Motion Data Provider ',"b'## Overview\r\nA [Leap Motion Controller](https://www.ultraleap.com/product/leap-motion-controller/) is required to use this data provider.\r\n\r\nThe Leap Motion Data Provider enables articulated hand tracking for VR and could be useful for rapid prototyping in the editor.  The data provider can be configured to use the leap motion controller mounted on a headset or placed on a desk face up.\r\n\r\n `LeapControllerOrientation`: Headset (Default) |  `LeapControllerOrientation`: Desk \r\n   | :-------------------------:|:-------------------------: |\r\n ![LeapHeadsetOrientationExampleMetacarpals](https://user-images.githubusercontent.com/53493796/78999194-fb065700-7afe-11ea-856f-f082e3caa0f4.gif) | ![LeapDeskOrientationExampleMetacarpals](https://user-images.githubusercontent.com/53493796/78999219-09547300-7aff-11ea-8154-c18bbfbd17de.gif)\r\n![LeapDevManagerHeadset](https://user-images.githubusercontent.com/53493796/78999285-27ba6e80-7aff-11ea-97d6-476bbdf61b05.png) |    ![LeapDevManagerDesk](https://user-images.githubusercontent.com/53493796/78999304-30ab4000-7aff-11ea-8ed9-5cca9d064c87.png)\r\n\r\n### Testing\r\n- Read Verification section below\r\n\r\n## Changes\r\n- Fixes: #6076 \r\n- Added initial provider, MRTK/Providers/LeapMotion\r\n- Added new example scene,  MRTK/Examples/Demos/HandTracking/LeapMotionHandTrackingExample\r\n- Added initial documentation \r\n\r\n## TODO\r\n~~- Add menu item to force Leap and MRTK integration for Unity 2018~~\r\n  ~~- Unity 2018 and 2019 behave differently on Leap Motion Core Asset import~~ \r\n- Add configuration tests\r\n\r\n## Verification\r\nRead the documentation on how to test this branch.  There are different steps required to test the data provider if the MRTK source is from the repo instead of a unity package.  The MRTK repo treats warnings as errors but the unity packages do not.  The Leap Motion Core Assets were last released in June 2018 and they contains obsolete warnings.  Our repo then converts the obsolete warnings to errors and halts configuration, this will not be the case once the unity packages are generated.\r\n\r\nBEFORE importing the Leap Core assets into the project, **Mixed Reality Toolkit > Utilities > Leap Motion > Configure CSC File for Leap Motion**. Updating the csc file filters out the obsolete warnings produced by the Leap Motion Core Assets.  Unity 2019.3 is recommended for testing.\r\n\r\n\r\n'"
597634649,7637,b'Fix grasp point on hands without joints in SpherePointer',"b""## Overview\r\n\r\nWhen testing remoting without the DotNetWinRT adapter, I noticed that grab interactions weren't working, since I didn't have joints. Looking through the code, I realized we fall back to the pointer's position in all cases except if the controller is a hand.\r\n\r\nWith this change, we now try to get the hand joints if a controller is a hand, but, if that fails plus in all other cases, if the controller provides a position, we use that instead. Grab interactions now work even without hand joints, as long as a position is reported.\r\n\r\nI also made updates to the profiler markers to fit the new `Auto()` style we've been using. Due to this, I recommend [hiding whitespace changes when reviewing](https://github.blog/2018-05-01-ignore-white-space-in-code-review/).\r\n\r\nI also updated some formatting and spacing.\r\n\r\n## Validation\r\n\r\nThe main scenario this affects is holographic remoting from the Unity editor to a HoloLens 2 without the DotNetWinRT adapter imported or enabled.\r\nBefore this change, grab interactions will fail. The grab pointer is never activated because hand joints aren't found.\r\nAfter this change, the grab pointer uses the hand's grip pose when joints aren't found."""
597616210,7635,b'Update the CI pipeline to enforce comment code style',"b""Some of our comments don't have a space between // and the comment (i.e. //thisisthecomment instead of // this is the comment).\r\n\r\nIt's somewhat tedious to call this out on each review manually, but the inconsistency was triggering some OCD (i.e. seeing some places in the same file that were good about this, and some that weren't). This should add an automatic way of catching it so that folks can just fix their nit level changes by seeing them explicitly in the CI logs.\r\n\r\nSee a sane coding style for why there should be some consistency and professionalism in how we do this:\r\n\r\nhttps://google.github.io/styleguide/cppguide.html#Comments"""
597537900,7634,b'Update the doccomments about how to handle eye tracking loss.',"b""A follow up from https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7515, modifying the doccomments to reflect what to expect when using this interface.\r\n\r\nBased on comments on that PR it looks like using the IsEyeTrackingAvailable property is the way to know when eye tracking is gone.\r\n\r\nNote that this is still not exactly complete because there's no event that a developer can use to listen to changes on this property (you have to poll)."""
597484782,7633,b'Only try to get textureCoord2 is the shared mesh is readable',"b'## Overview\r\n\r\nAdds a guard to not try to get `textureCoord2` if the shared mesh isn\'t readable.\r\n\r\nI\'m also fine with leaving this code as-is, if we think this is something we should recommend instead (""Make sure to check `Read/Write Enabled` on your asset bundle meshes"" or something?).\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7632'"
596920319,7631,b'Allow the user to simulate selecting objects with left click without bringing up hands',b'Users can now left click when in the gestures simulation mode to raise the select input action on objects\r\n\r\n## Changes\r\n- Implements: #5635\r\n\r\n![handsfreeggv](https://user-images.githubusercontent.com/39840334/79164615-40908180-7d96-11ea-8195-6be34d4df8d6.gif)\r\n'
596680466,7628,b'Fix service facade inspector headers',"b'## Changes\r\n- Fixes: #7583, #7587\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
596280658,7625,b'Fixes issue where sphere pointer can grab overlapping non-target layer objects',"b""## Overview\r\nCurrently there is an issue where the sphere pointer that targets a specific layer can mistakenly grab an object that's not on that layer. This occurs when the non-target layer object is encapsulated/overlapped inside a target layer object. The error occurred because the pointers of type SceneQueryType.SphereOverlap where not processed properly by the focus provider\r\n\r\n## Changes\r\n- Fixes: #7620\r\n- Fixes: #4719\r\n"""
595536511,7622,b'Added more comprehensive voice command tests',"b""## Overview\r\nAdded more comprehensive voice command tests, also changed the Teardown script order so bugs involving a prematurely destroyed MixedRealityToolkit and MixedRealityPlayspace game objects don't hide the actual test errors\r\n\r\n## Changes\r\n- Fixes: #5216 """
595509790,7621,b'additional eye tracking setup docs',"b'## Overview\r\n\r\nFollow on to #7615 based on feedback from @sostel.\r\n\r\n## Changes\r\n\r\n* add back the note about checking MRTK prerequisites if you don\'t see a GazeInput capability\r\n* doc that capability was added in Unity 2019\r\n* clarify ""should stay untouched""\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
595343062,7619,b'Cleanup input instrumentation',"b'This change continues the migration from Begin/EndSample to the prefered using(...) syntax for improved accuracy and reliabilty.\r\n\r\nAdditonally, profiler markers have been added to the input module and in all input system Raise* methods.\r\n\r\nFor ease of reviewing, since indentation has changed, consider ignoring whitespace.'"
595273888,7618,b'Remove unused reference from XR SDK Config Checker',"b'## Overview\r\n\r\nLooks like I previously left a reference to the Unity.XR.ARSubsystems package in the XR SDK configuration checker, but nothing in the assembly actually references this. Removing.'"
594620951,7615,b'clarify some things I noticed in the eye tracking setup docs',"b""* Two different sections discussed workarounds for the GazeInput capability that is not yet available in Unity. I consolidated them into the first section (A note on the GazeInput capability) and stripped the second section (Testing your Unity app on a HoloLens 2) down to a simple reminder. I don't think the information about hand-editing the XML is necessary--people who are interested in that could make the edit in MRTK or Visual Studio and then look into the resulting changes for themselves.\r\n* Added step to expand _'Input Data Providers' -- it isn't expanded by default and someone wouldn't see _'+ Add Data Provider'_ if that isn't expanded.\r\n* Added step to clone DefaultMixedRealityInputSimpulationProfile.\r\n* EyeGazeCursor now seems to be in Foundation, so MRTK Examples aren't needed.\r\n\r\n[EDIT: Removed doc changes related to IsEyeTrackingEnabled based on @keveleigh feedback.]\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
593689355,7613,b'MRTK Sharing Extensions: ISharingService',"b""## Overview\r\n\r\n`ISharingService` is a sharing interface that will serve as a backbone for future sharing services. This is the first of the services discussed in #7599\r\n\r\n## Goals of the ISharingService interface\r\n\r\n- Find and connect to other devices using a lobby / room system.\r\n- Send / receive raw binary data to / from other devices.\r\n- Offer tools to accommodate slower or bandwidth-limited devices.\r\n\r\n## General goals\r\n\r\n- Kick off discussion about what features belong in `ISharingService` vs. in future services that consume it. (Eg spatial alignment probably doesn't belong in this service even though it's one of our most-requested sharing features.)\r\n- Settle on some conventions and data structures that are implementation-agnostic. This first implementation is based on Photon and adopts a lot of that system's vocabulary, but it should remain compatible with other systems. I would like to see implementations based on:\r\n  - [Unity's transport layer](https://github.com/Unity-Technologies/multiplayer)\r\n  - [MixedReality-Sharing](https://github.com/microsoft/MixedReality-Sharing).\r\n  - Suggestions?\r\n- Establish some groundwork for handling _user composition_ in MR apps - ie users composed of multiple connected devices, often with a wide range of speeds and capabilities. There is no concept of a _player_ or _user_ at this level, only a _device_.\r\n\r\nLooking forward to discussion here or in the [issue.](https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7599)\r\n\r\n## Example usage\r\n\r\nSome services that consume `ISharingService`:\r\n- [`ITimeSyncService`](https://github.com/Railboy/MixedRealityToolkit-Unity/tree/mrtk_sharing_extensions_timesync/Assets/MRTK/Extensions/TimeSyncService)\r\n- [`IStateSyncService`](https://github.com/Railboy/MixedRealityToolkit-Unity/tree/mrtk_sharing_extensions_statesync/Assets/MRTK/Extensions/StateSyncService)\r\n\r\nThese will be opened as separate PRs in time. I'll post links to more services as they're published.\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
593639641,7612,b'Add profiler instrumentation to input handlers and input manager',"b'This change adds instrumentation to input handlers to help identify the portions of the MRTK update loop that is application code (event handlers). When analyzing, if significant time is spent in these scopes, it is likely the issue is external to the MRTK.\r\n\r\nAlso instrumented the MixedRealityInputManager as well as migrating from the previous Begin/EndSample syntax to the prefered using (marker.Auto()) { .. }.'"
593555563,7611,b'Made NonNativeKeyboard touchable',b'## Overview\r\n\r\nThis makes the nonnative keyboard prefab respond to touch events\r\n\r\n## Changes\r\nAdded a new behaviour NonNativeKeyboardTouchAssistant to the NonNativeKeyboard that enables touch when articulated hand support is detected. By request of @provencher after reading http://dotnetbyexample.blogspot.com/2020/04/migrating-to-mrtk2-using-non-native.html\r\n\r\n'
592863822,7610,b'Follow-up pass on Dialog PR',b'## Overview\r\n\r\n* Mostly formatting and slight comment updates for clarity.\r\n* Also added a missing MSFT license header to a file which was ported from a licensed script in HTK: https://github.com/microsoft/MixedRealityToolkit-Unity/blob/htk_release/Assets/HoloToolkit/UX/Scripts/Dialog/DialogButton.cs\r\n* Slightly updated existing headers to match our current style\r\n* Updated to [auto properties where possible](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/CodingGuidelines.html#access-modifiers).\r\n* Updated a flags enum [to match our guidance](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/CodingGuidelines.html#review-enum-use-for-bitfields).\r\n\r\n## Changes\r\n- Follow-up to #6925 '
592858276,7609,b'Cleaned up test documentation',b'Small change making it clear that unit tests need to be run in Unity 2018.4.1f1'
592833770,7608,b'Update authors list to add recent contributors',b'Added several new contributors to the authors page!'
592265829,7606,b'Add option to lock gaze cursor [Issue #6350]',b'## Overview\r\nAdded a togglable option (Lock Cursor When Focus Locked) to the GazeCursor to allow it to not stick to objects when selecting them. \r\n\r\n## Changes\r\n- Fixes: #6350 \r\n\r\npre-existing Behavior\r\n![GazeTargetLocked](https://user-images.githubusercontent.com/39840334/78196241-a1cf6100-7436-11ea-9560-def3deadf219.gif)\r\n\r\nNew Behavior\r\n![GazeCentered](https://user-images.githubusercontent.com/39840334/78196246-a431bb00-7436-11ea-896b-879111089895.gif)\r\n\r\n'
592114893,7605,"b'Reduce raycast allocations, update performance markers'",b'This change is a continuation of the work begun in #7600 and add/updates profiler markers related to raycasting.\r\n\r\nIt also replaces calls to Physics.RaycastAll and Physics.SphereCastAll with RaycastNonAlloc and SphereCastNonAlloc to reduce potential GC pressure.\r\n\r\nNOTE: The max hit count has been set to 32 in this change. We can discuss refining this number based on customer feedback.'
592060168,7604,b'Add some profiling to hands (and formatting / cleanup)',b'## Overview\r\n\r\nMostly this PR adds some profiling markers to a couple hands classes.\r\nI also threw in some small changes to other scripts that I found while investigating this profiling. Mostly formatting and removing a duplicated case in a switch statement.\r\n\r\n## Changes\r\n- Follow-on from #7600 and other profiling PRs from @davidkline-ms \r\n'
590677103,7602,b'Improve FocusProvider perf (slightly)',"b""## Overview\r\n\r\nSince `IsInteractionEnabled` calls into the cursor to set its visibility, which might involve setting a GameObject active or not, there's a slight perf cost to going down this property / method stack every frame.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blob/e30acbd2705111e600b6f220863cce6b4fe42e62/Assets/MRTK/Core/Providers/GenericPointer.cs#L69-L81\r\n\r\nI instead added change checks to both `IsInteractionEnabled` and the point where the state machine is queried for the gaze pointer's current state.\r\n\r\nI also updated some docs and formatting."""
590652154,7601,b'Update Unity and WMR package versions',"b'## Overview\r\n\r\nUpdating our Unity version to the latest 2018.4.20, which includes a fix for https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6807. Also upgrades our WMR package to 1.0.19, which includes updated remoting binaries https://docs.unity3d.com/Packages/com.unity.xr.windowsmr.metro@1.0/changelog/CHANGELOG.html.'"
590598420,7600,"b""Add profiler instrumentation to MRTK's raycast logic""",b'This change extends the input system profiler markers (#7590) to the raycast implementation.'
589645468,7595,b'Fix Unity 2019.3 build',"b'## Overview\r\n\r\n#7590 introduced some breaks when opened in Unity 2019.3. This fixes them, by adding a missing namespace and removing unreachable code.'"
589457834,7594,b'Update GazeProvider to use SpatialPointerPose.Head',"b'## Overview\r\n\r\nThis PR adds a new gaze provider interface, `IMixedRealityGazeProviderWithOverride`, to prevent a breaking change to the existing gaze provider interface. This new interface allows a data provider to override the gaze data with platform-specific values. In this case, the data comes from `SpatialPointerPose.Head`.\r\n\r\nI also reorganized `GazeProvider` a bit to group implementations by interface.\r\n\r\nTODO BEFORE MERGING (but wanted to get review going):\r\n\r\n* [x] Docs\r\n\r\n## Changes\r\n\r\n- Fixes: #6436\r\n'"
588664356,7592,b'Fix save when creating a new file',b'@CDiaz-MS found an issue where saving a newly created AssemblyDefinition object would fail.\r\n\r\nThis change\r\n- checks for file existence before inquring about the readonly attribute\r\n- switches from File.WriteAllText to StreamWriter.Write'
587914763,7590,b'Instrument (Unity Profiler) input system code paths',"b'This change is part of #7565 and adds unity profiler markers (BeginSample/EndSample) in strategic locations within the input system, data providers and portions of the core (service locator and registry).\r\n\r\nThese markers will appear in the Unity Profiler using the following format: [MRTK] ClassWithoutNamespace.Method.\r\n\r\nPer Unity documentation (https://docs.unity3d.com/ScriptReference/Profiling.Profiler.BeginSample.html), when creating a development build, these markers will be active otherwise they are inert. \r\n\r\nCustomers and the MRTK dev team will benefit from this change by being more easily able to identify where time is being spent and identifying / validating potential optimizations. '"
587900807,7589,b'Update meta for openvr_api',"b""## Overview\r\n\r\nThe meta for this script wasn't updated when it was added in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6374. This can cause other packages, like SteamVR, to overwrite the file and cause compilation errors in MRTK.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7588"""
587349533,7585,b'User/kjakubzak/gaze activation',"b'## Overview\r\n![EyegazeTrigger](https://user-images.githubusercontent.com/1617757/77487190-0bc08880-6def-11ea-93d0-9e73d4cba247.gif)\r\nImplemented a gaze-based secondary activator for the hand menu, enabling the following flows:\r\n\r\n- ""Palm Up + Eye Gaze to trigger"" -> ""Palm up for continued use"" -> ""Palm down to dismiss""\r\n- ""Palm Up + Eye Gaze to trigger"" -> ""Palm up for continued use"" -> ""Grab and move menu to world-lock"" ->""Palm Up + Eye Gaze to trigger""\r\n\r\n## Changes\r\n- Abstracted the palm up logical check and the ""is being gazed at"" logical checks into two separate functions that are called during the IsValidController function and WorldLockedReattachCheck function.\r\n- Exposed a variable (TargetWorldLocked) that\'s used by other classes to denote whether the object being manipulated is now world-locked or not. This is used by the coroutine to determine if it should run.\r\n- Changed the behavior of the ManipulationHandlers on the objects to set SolverHandler.UpdateSolver to false rather than disable the HandConstraintPalmUp classes on the object, enabling the reattach logic. \r\n\r\n\r\n## Verification\r\n- Tested locally on editor and on device. Would like a verification round from others if possible.\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout user/kjakubzak/gaze_activation\r\n'"
587330395,7584,b'Add size utility calculator for editor',"b'## Overview\r\nIt can be quite annoying to know what the world-space size of an object is in Unity, especially with multiple hierarchy transforms applied. \r\n\r\nThis PR adds a editor utility that allows one to get the Renderer or Collider world space bounds sizes for a selected GameObject. \r\n\r\nRight click gameobject > MRTK > Render/Collider Size => See output results in debug log console\r\n\r\n![size-utility](https://user-images.githubusercontent.com/25975362/77484629-3fe47b00-6de8-11ea-8af9-ab5e155ab574.gif)\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
586602614,7579,b'Updated example scene to display contextual cursor on manipulation',b'## Overview\r\nManipulatable objects do not display the contextual cursor properly. I found that the script **CursorContextManipulationHandler**.cs is missing from the objects in the HandInteractionExamples scene. \r\n\r\n## Changes\r\nFixes: #7578 \r\nAssigned **CursorContextManipulationHandler**.cs to these objects:\r\n\r\n![2020-03-23 17_11_44-Unity 2018 4 13f1 -  PREVIEW PACKAGES IN USE  - HandInteractionExamples unity - ](https://user-images.githubusercontent.com/13754172/77375600-3943fe00-6d2b-11ea-82d6-990f22caa0ef.png)\r\n![ManipulationCursor](https://user-images.githubusercontent.com/13754172/77384262-2d176b00-6d42-11ea-995b-342f6e0d081a.jpg)\r\n\r\n\r\n![2020-03-23 17_03_31-Unity 2018 4 13f1 -  PREVIEW PACKAGES IN USE  - HandInteractionExamples unity - ](https://user-images.githubusercontent.com/13754172/77375564-1ade0280-6d2b-11ea-94dc-16c2816431a4.png)\r\n![2020-03-23 17_03_10-Unity 2018 4 13f1 -  PREVIEW PACKAGES IN USE  - HandInteractionExamples unity - ](https://user-images.githubusercontent.com/13754172/77375566-1b769900-6d2b-11ea-8d03-4312252c0411.png)\r\n![2020-03-23 17_04_08-Unity 2018 4 13f1 -  PREVIEW PACKAGES IN USE  - HandInteractionExamples unity - ](https://user-images.githubusercontent.com/13754172/77375562-1a456c00-6d2b-11ea-8ee2-ff320ad703a8.png)\r\n![2020-03-23 17_03_55-Unity 2018 4 13f1 -  PREVIEW PACKAGES IN USE  - HandInteractionExamples unity - ](https://user-images.githubusercontent.com/13754172/77375563-1ade0280-6d2b-11ea-87ca-8ea12584e8fb.png)\r\n'
586500417,7577,b'Experimental TextmeshPro and UnityUI input field helpers that work with HoloLens keyboard',"b'**This PR is a continuation of the PR from @Alexees #6036, thank you to alexees for the original fix.**\r\n\r\nAdditional changes on top of @Alexees original PR: \r\n- Moves files related to the MixedRealityKeyboard to SDK/Experimental/MixedRealityKeyboard/\r\n- Move MixedRealityKeyboardPreview classes into Experimental/MixedRealityKeyboardPreview folder\r\n- Add text input field to the hand interaction examples scene\r\n\r\n<img src=""https://user-images.githubusercontent.com/168492/77583595-990ee600-6e9e-11ea-9a45-137c6c337524.png"" width=""300""/>\r\nOriginal PR from @Alexees:\r\n\r\n## Overview\r\nThe class MixedRealityKeyboard is a MonoBehaviour that shows how to Open, Close and use the system native keyboards on UWP platforms.\r\n\r\nThe programmer still has the responsibility to link it with whatever she/he needs the input for. This means she/he needs to write additional MonoBehaviour scripts to link the with for example InputFields, which activate on click.\r\n\r\nI wanted to make this easier in that InputFields and TMP_InputFields are handled directly by just one additional script attached to them.\r\n\r\nFixes: #3970 by providing a workaround -- to get the keyboard to show up, attach the input field helper component to the gameobject containing the input field.\r\n\r\n\r\n\r\n## Changes\r\nThis set of scripts provides the following:\r\n- A script, once attached to Unity InputFields, automatically manages the native keyboard and updates the InputFields text\r\n- Same for the TMP_InputField\r\n- Base classes to derive from if you want to use the keyboard for something other than InputFields\r\n\r\nI first went for overriding the InputFields, but first, they are far too complicated to just do that and second, The existing implementation of MixedRealityKeyboard.cs already completely ignores InputField interactions and second there might be more uses for the keyboard than just InputFields.'"
586482120,7576,b'fixed broken link referring to eye tracking docs',b'## Overview\r\nfixed typo in eye tracking link\r\n\r\n'
586440377,7575,b'Update deprecated MRTK configurator enum value for 2019.3',"b""## Overview\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/7525 deprecated an enum value but didn't update the Unity 2019.3 path with the new one. This was leading to an obsolete warning when opening."""
585256429,7571,b'Add SurfaceMeshesToPlanes Spatial Awareness Observer',"b'## Overview\r\nThis PR follows up on #7555 and adds a new `SpatialAwarenessSurfacePlaneObserver` which wraps the `SurfaceMeshesToPlanes` script.\r\n\r\n**Note:** #7555 must be merged before this\r\n\r\n## Changes\r\n- Fixes: #.\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
585229091,7570,b'Eye Tracking docs quick fix',"b""## Overview\r\nFollow up on @sostel 's comments in #7568 \r\n\r\n## Changes\r\n- Fixes: #6341\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
584809980,7568,b'Update eye tracking documentation',"b'## Overview\r\nThis change cleans up and organizes some of the existing documentation around eye tracking for MRTK. Many of the doc pages were not visible in the table of contents. Also grouped relevant links to a ""See also"" section in each article. Cleaned up some of the wording, formatting, adding xref links, removing informal uses, etc.\r\n\r\n## Changes\r\n- Fixes: #6341 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
584664785,7564,b'Genericize gazeProvider ref in GGVPointer',"b""## Overview\r\n\r\nThis private reference is currently pointing to the MRTK-implemented `GazeProvider` type. Since we allow devs to create their own, it'd be good to only reference the interface. It doesn't look like we had a specific dependency on our implementation.\r\n\r\nFixes https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7566"""
584637050,7563,b'Enable/Disable Input System (part of series)',"b'## Overview\r\nConvert the default MixedRealityInputSystem class to utilize IsEnable property via IsInputEnabled. If input system disabled, then will not respond to raised events and other public interfaces. Updated test to cover scenario.\r\n\r\n**NOTE:** This is being committed to side branch, not MRTK_Dev.\r\n\r\n## Changes\r\nFixes: #5901\r\nRelated: #7100\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
584595758,7562,b'Mrtk development',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
584586479,7561,"b'Progress Indicator Demos, Docs & Fixes'","b'## Overview\r\nAdds documentation for progress indicators, adds a demo scene, fixes some bugs.\r\n\r\n![ProgressIndicators](https://user-images.githubusercontent.com/9789716/77097614-49c44380-69ce-11ea-967b-9d6b4b7a8530.gif)\r\n\r\n## Changes\r\n- Fixes: #7560, #7559\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
584487355,7558,b'Adding the Dock Control to the TOC',"b'## Overview\r\n\r\nAdding a reference to the Dock Control to the table of contents.\r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
584450704,7557,b'Documentation Warning Fix',"b'## Overview\r\n\r\nAttempting to fix a documentation warning by providing full namespace to the cref.\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
584436823,7556,b'Add additional orientation option',b'Adds the option of having the object face the origin of the raycast.'
584205346,7555,b'[Experimental] Add HTK SurfaceMeshesToPlane Script',"b""## Overview\r\nThis PR adds a new version of the `SurfaceMeshesToPlane` from HTK as a Utility. This is primaritly useful for users on Hololens 1 as Scene Understanding is not supported on that platform. In a follow up PR, I'll add a `SurfacePlaneObserver` to use this script with the Spatial Awareness system.\r\n\r\nThis PR also requires the Planefinding DLL to work. We are still setting up CI on the http://github.com/microsoft/mixedrealitytoolkit repo to generate Nuget packages so we can automatically download the DLL with MRTK here.\r\n\r\n## Changes\r\n- Fixes: #6246 \r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
584049181,7552,b'Fix case where a specific controller handedness is set but only non-handed interactions exist',"b""## Overview\r\n\r\nIn many cases, handed interactions are overridden to point to the default interactions in classes that don't need different one:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blob/ec3ae303cf832bc532edb57083b7edd96eaeb075/Assets/MRTK/Providers/WindowsMixedReality/XR2018/Controllers/BaseWindowsMixedRealitySource.cs#L27-L31\r\n\r\nHowever, this isn't a requirement that we've previously enforced. So, this PR updates the code to double check that the handed interactions aren't null before using them. If they're null, the non-handed default interactions are used.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7528\r\n"""
583881639,7551,b'Add compliance build configuration',b'Add an internal pipeline running compliance and security checks once a week. This is a basic set of tasks and we might need to revise the config and expand to other checks later on.'
583824602,7550,b'Input events propagation phases (Bubble up + Trickle down)',"b""## Overview\r\nThe MRTK Input system event dispatcher does not allow event propagation through focused object hierarchy.  Currently the event is dispatched to the focused object using Unity's ExecuteHierarchy method, where the first handler found up in the focused object hierarchy handles the event, stopping the propagation. Propagation is needed on more advanced UX techniques, like those involving manipulating / scrolling object collections organized on a variety of ways.\r\n\r\n## Changes\r\nWe are trying to follow Unity's UIElement [dispatching](https://docs.unity3d.com/Manual/UIE-Events-Dispatching.html) mechanism and nomenclature:\r\n\r\n![UIElementsEvents](https://user-images.githubusercontent.com/16922045/76978510-b38d1080-692e-11ea-8455-d8196e77fb78.png)\r\n\r\n- Fixes: #5975\r\n\r\n## Todo\r\n- [ ] Documentation\r\n- [ ]  Test\r\n\r\n\r\n"""
583784821,7549,b'Prevent test freeze during gltf test',"b'## Overview\r\nThe gltf tests were sporadically ""freezing"" with the test runner pausing indefinitely. I\'ve added setup and teardown methods that the other UI methods use. This on it own didn\'t stop the freezing. It seemed it would freeze every other time. \r\n\r\nWhat seemed to really fix it was the manual addition of the `AsyncCoroutineRunner`. I think this relates to https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6362.\r\n\r\n\r\n## Changes\r\nThis resolves an issue introduced in this pull request: https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7535\r\n\r\n## Verification\r\nTo verify you should be able to re-run all playmode tests locally and see it not blocking. Additionally, kick off a CI build.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
582613064,7545,b'Icon asset cleanup',"b""## Overview\r\n- Renamed icon names for consistency. \r\n- Added unregistered icons to DefaultIconSet.asset\r\n- Relocated some icons from Interactable to **StandardAssets** folder\r\n- Re-assigned icons in HandInteractionExamples scene, using the new Button Config Helper.\r\n- Removed duplicated icon asset (ButtonHome.png)\r\n\r\nButtonConfiHelper's **DefaultIconSet.asset** with additional icons (added from existing asset folder)\r\n![2020-03-16 14_39_06-Unity 2018 4 13f1 -  PREVIEW PACKAGES IN USE  - HandInteractionExamples unity - ](https://user-images.githubusercontent.com/13754172/76801979-ecdd4900-6793-11ea-9240-5e2fc341d71a.png)\r\n\r\nMoved icon texture assets to StandardAssets folder from Interactable folder.\r\n![2020-03-16 12_27_10-Unity 2018 4 13f1 -  PREVIEW PACKAGES IN USE  - HandInteractionExamples unity - ](https://user-images.githubusercontent.com/13754172/76801552-21043a00-6793-11ea-91f9-0ab88f544bbc.png)\r\n\r\n**Slate prefab** icon re-assigned\r\n![2020-03-16 14_34_35-Photos](https://user-images.githubusercontent.com/13754172/76801630-485b0700-6793-11ea-8bd7-55b1379aa75c.png)\r\n\r\n**AppBar prefab** icon re-assigned\r\n![2020-03-16 14_48_05-Photos](https://user-images.githubusercontent.com/13754172/76802581-39755400-6795-11ea-814e-11ac7ff30e85.png)\r\n\r\n**HandInteractionExamples** scene icon re-assigned\r\n![2020-03-16 14_35_52-Photos](https://user-images.githubusercontent.com/13754172/76801751-7b9d9600-6793-11ea-8500-a4533c3876cd.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #7544 \r\n\r\n"""
582338769,7543,b'Bugfix/gltf flat shading',"b""## Overview\r\nCurrently, when glTF's are loaded on device they do not receive directional lighting. This pull request may not fix the underlying issue, but I figured I'd offer it anyways, as we haven't had any luck finding the root cause of the problem.\r\n\r\nCurrently, when constructing a glTF material `new Material` is used. This pull request replaces it with `Resource.Load`. This refers to a `StandardglTFMaterial`. If we were to support another material type, such as an unlit extension, we would add a new material template to the resource directory.\r\n\r\n## Changes\r\n- Fixes: #6685\r\n\r\n\r\n## Verification\r\n* Build and run `Gltf-Loading-Demo` on device\r\n* Note that the avocado now receives directional lighting"""
580934742,7540,b'Add links to optimization page',"b'## Overview\r\nAdd useful links found by @Cameron-Micka to optimization page\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
580932026,7539,b'Dock control (Experimental)',"b'![dock_mrtk](https://user-images.githubusercontent.com/621574/76669327-65e86080-6548-11ea-85a3-f84f6b367f97.gif)\r\n\r\n## Overview\r\nThis control enables moving objects in and out of predetermined positions, to create palettes, shelves and navigation bars.\r\n\r\n## Features\r\n- Supports any number of dock positions and layouts (works great with `GridObjectCollection`- Docked objects automatically move away to make space for new objects\r\n- Objects scale to fit the docked space, then resize to their original position when dragged out.\r\n\r\n## Getting started with scrolling object collection\r\n- Create a GameObject with the Dock component and add some children GameObjects to it.\r\n- Add the DockPosition component to each of the children.\r\n- Add the Dockable component to any number of objects in the scene to allow them to be docked. They must have the [`ObjectManipulator`](xref:Microsoft.MixedReality.Toolkit.UI.ObjectManipulator) component and a Collider as well.\r\n- *Optional:* use a `GridObjectCollection` to the Dock to automatically lay out the DockPositions.'"
580850210,7537,b'Smooth z-movement of simulated hand',b'## Overview\r\nThis change makes it easier to hit pressable buttons using the mouse scroll wheel by smoothly moving the hand to a destination depth on every tick using interpolation. This solution contributed by @ADP-JoNeff\r\n\r\n![smoothhandsim](https://user-images.githubusercontent.com/168492/76659577-0b450980-6534-11ea-9671-e48944b10d0c.gif)\r\n\r\n\r\n## Changes\r\n- Fixes: #7536\r\n\r\n\r\n## Verification\r\n- Tested in editor\r\n- Tests pass locally\r\n'
580700134,7535,b'Feature/gltf custom attrs',"b'## Overview\r\nThis change allows custom attributes to be parsed and stored in a dictionary object.\r\n\r\nThis pull request changes the glTF `Attributes` from an custom object, `GltfMeshPrimitiveAttributes`  to a dictionary to support arbitrary attributes. `GltfMeshPrimitiveAttributes` is now used as a look up for standard attribute keys.\r\n\r\n## Changes\r\n- Fixes: #6953 \r\n\r\n## Verification\r\n\r\nTwo playmode tests have been added. `TestGltfLoads` and `TestGltfCustomAttributes` to provide some basic coverage for the existing glTF loading process and the new addition with custom attributes.'"
580412914,7533,b'MixedRealityProjectConfigurator Lambdas instead of anonymous methods',"b'## Overview\r\nMixedRealityProjectConfigurator inhabits a lot of anonymous methods that add a little overhead to the overall readability and lambdas are just shorter and nicer and... you know, lambdas.\r\nThis PR converts them all.'"
580363026,7532,b'Improve Hand Mesh Performance',"b""## Overview\r\nThis PR is part of an upcoming set to address some of the hand mesh tracking performance issues. This particular PR fixes the problem of constant re-allocation and re-assignment of mesh data every frame. With this change, the MRTK hand interaction example scene renders at 60 FPS with one hand mesh shown. Unfortunately, two hand meshes will easily kick it below 60 still.  \r\n\r\nTo achieve this improvement, there were two primary changes in this PR:\r\n1) Create re-usable vertex/normal buffers in WindowsMixedRealityArticulatedHandDefinition both for the Windows API buffer (i.e HandMeshVertex) and the UnityEngine.Vector3 vertex/normal buffers. These buffer pointers are passed through HandMeshInfo in the OnHandMeshUpdated events. \r\n**BEFORE** this change, MRTK was allocating 4 arrays of Vector3's every frame. One handmesh is ~453 vertices => 4 * sizeof(vector3) [12 bytes] * 453 => **21.744 MB per frame**\r\n\r\n2) Update BaseHandVisualizer to only update the vertices & normals property of the mesh every frame. The triangles/indices and UV properties are only updated if the mesh changes size or if it's the first time the mesh is being set. \r\n\r\n3. More minor but also added conversion extension functions that allow conversion of a System.Numerics.Vector3 to UnityEngine.Vector3 effectively in-place by using pass-by-reference. This was the construction, copy and assignment are avoided since this operation is executed every frame for ~500 vertices & ~500 normals.\r\n\r\nUse of Parralel.For concurrency instead of for-iteration loop is about 2.5-2.7x faster. Setting only the vertices/normals property every update (since triangles/uvs remain same) is about 2.8x-3x faster. There is also significant speed improvements for not re-allocating the 21MB of data every frame but this was not measured directly. \r\n\r\nFuture Potential PR work:\r\n1) Look at updating MRTK to utilize new Mesh.SetVertexBufferData() and related functions in 2019.3+ to maximize performance\r\n2) Save HandMesh data into file like HandJoints to leverage in editor with InputSimulationService?\r\n3) [MINOR] EnableHandMeshVisualization and HandJoint are both pulled from Profile instead of service?\r\n\r\n## Changes\r\n- Fixes: #7170 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
580241215,7531,b'Shader Variant Removal',"b""## Overview\r\n\r\nThis change attempts to improve developer iteration times (and runtime memory size) by reducing the shader variants generated by the MRTK/Standard shader. The following are build stats before and after the changes when building the HandInteractionsExamples scene:\r\n\r\n### Before:\r\n\r\n> Compiled shader 'Mixed Reality Toolkit/Standard' **in 7.90s**\r\n    d3d11 (**total internal programs: 18816, unique: 6272**)\r\nCompressed shader 'Mixed Reality Toolkit/Standard' on d3d11 from 18.10MB to 1.95MB\r\n============================================================\r\nBuild Report\r\nUncompressed usage by category (Percentages based on user generated assets only):\r\nTextures               25.1 mb\t 62.9% \r\nMeshes                 1.1 mb\t 2.6% \r\nAnimations             42.7 kb\t 0.1% \r\nSounds                 605.2 kb\t 1.5% \r\nShaders                7.8 mb\t 19.6% \r\nOther Assets           1.0 mb\t 2.6% \r\nLevels                 749.7 kb\t 1.8% \r\nScripts                3.5 mb\t 8.7% \r\nIncluded DLLs          0.0 kb\t 0.0% \r\nFile headers           50.3 kb\t 0.1% \r\nTotal User Assets      39.9 mb\t 100.0% \r\nComplete build size    41.9 mb\r\nUsed Assets and files from the Resources folder, sorted by uncompressed size:\r\n **7.0 mb\t 16.6% Assets/MRTK/Core/StandardAssets/Shaders/MixedRealityStandard.shader**\r\n 4.0 mb\t 9.5% Assets/MRTK/Examples/Demos/StandardShader/Textures/Checker_albedo.png\r\n 3.0 mb\t 7.2% Assets/MRTK/SDK/Features/UX/Interactable/Sprites/DefaultIconsSpriteSheet.psd\r\n 2.7 mb\t 6.4% Assets/MRTK/Examples/StandardAssets/Models/Tree.fbm/5.png\r\n 2.7 mb\t 6.4% Assets/MRTK/Examples/StandardAssets/Models/EarthCore.fbm/5.png\r\n 1.7 mb\t 4.1% Assets/MRTK/Core/StandardAssets/Textures/MRTK_Logo_White.png\r\n 1.3 mb\t 3.2% Assets/MRTK/Examples/StandardAssets/Textures/PianoKeys_NM.png\r\n 1.0 mb\t 2.4% Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF.asset\r\n\r\n![Before](https://user-images.githubusercontent.com/13305729/76568327-da9a9c80-646d-11ea-9b43-74fc0f0b9107.png)\r\n\r\n### After:\r\n\r\n> Compiled shader 'Mixed Reality Toolkit/Standard' **in 2.37s**\r\n    d3d11 (**total internal programs: 4704, unique: 1568**)\r\nCompressed shader 'Mixed Reality Toolkit/Standard' on d3d11 from 4.26MB to 0.46MB\r\n============================================================\r\nBuild Report\r\nUncompressed usage by category (Percentages based on user generated assets only):\r\nTextures               25.1 mb\t 72.5% \r\nMeshes                 1.1 mb\t 3.1% \r\nAnimations             42.7 kb\t 0.1% \r\nSounds                 605.2 kb\t 1.7% \r\nShaders                2.5 mb\t 7.3% \r\nOther Assets           1.0 mb\t 3.0% \r\nLevels                 753.3 kb\t 2.1% \r\nScripts                3.5 mb\t 10.0% \r\nIncluded DLLs          0.0 kb\t 0.0% \r\nFile headers           50.3 kb\t 0.1% \r\nTotal User Assets      34.6 mb\t 100.0% \r\nComplete build size    36.6 mb\r\nUsed Assets and files from the Resources folder, sorted by uncompressed size:\r\n 4.0 mb\t 10.9% Assets/MRTK/Examples/Demos/StandardShader/Textures/Checker_albedo.png\r\n 3.0 mb\t 8.2% Assets/MRTK/SDK/Features/UX/Interactable/Sprites/DefaultIconsSpriteSheet.psd\r\n 2.7 mb\t 7.3% Assets/MRTK/Examples/StandardAssets/Models/Tree.fbm/5.png\r\n 2.7 mb\t 7.3% Assets/MRTK/Examples/StandardAssets/Models/EarthCore.fbm/5.png\r\n 1.7 mb\t 4.7% Assets/MRTK/Core/StandardAssets/Textures/MRTK_Logo_White.png\r\n **1.7 mb\t 4.5% Assets/MRTK/Core/StandardAssets/Shaders/MixedRealityStandard.shader**\r\n 1.3 mb\t 3.6% Assets/MRTK/Examples/StandardAssets/Textures/PianoKeys_NM.png\r\n 1.0 mb\t 2.8% Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF.asset\r\n\r\n![After](https://user-images.githubusercontent.com/13305729/76568337-dff7e700-646d-11ea-84a3-51401c4a72ee.png)\r\n\r\nThe way this reduction is achieved is by removing a few [multi_compile ](https://docs.unity3d.com/Manual/SL-MultipleProgramVariants.html) keywords. One of those keywords was a small optimization for hover lights. And, the second was removal of the ability to have multiple clipping primitives effect one renderer. This was debated in an internal proposal and deemed appropriate since it isn't a common feature and would pave the way for more clipping primitive types without exploding shader variants. As a mitigation documentation has been improved to demonstrate how developers can add these features on their own (please see the ClippingPrimitive readme). The ClippingExample scene has also been updated to reflect this.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6629 (partially)\r\n\r\n## Verification\r\nPlease try building a few scenes for yourself and read though the documentation.\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
580134136,7529,b'Update documentation to reflect the new MRTK folder hierarchy',"b""This change updates the relevant portions of the documentation to reflect the new MRTK folder hierarchy. The majority of the changes were to replace links to files in specific GitHub paths with either relative path references or xrefs into the API documentation.\r\n\r\nSome other changes include some minor updates to the content and a swap from '\\' to '/' in paths."""
579883768,7527,b'Data gets converted only when accessed',"b""## Overview\r\nThe DownloadHandler performs data conversion in the case of accessing its text property.\r\nFor requests not using it, that's unnecessary CPU and garbage.\r\nThe PR moves the access into the Response, where executed only when needed.\r\n\r\n## Changes\r\n- Fixes: #7526"""
579811400,7525,b'Support Android Single Pass instead of unavailable Single Pass Instanced',"b'## Overview\r\nThe Android Platform does not support Single Pass Instanced as its rendering mode, but the the optimization window tries to test it.\r\nThis PR adds a secondary preprocessored code path for Android specificially, only for test Single Pass on that platform.\r\n\r\n## Changes\r\n- Fixes: #7518 .'"
579417886,7524,b'Fix accidental addition of extra scenes by default',b'The moving of folders accidentally added extra scenes by default to the build window.\r\n\r\nThis change restores the default scenes collection to just the hand examples scene.\r\n\r\nIt also ensures that the examples hub scene service profile has the correct paths.'
578878125,7516,b'Checking the Optimize Mesh Data setting at build time.',"b'## Overview\r\n\r\nWarning against the ""Optimize Mesh Data"" setting at build time during development.\r\n\r\n![image](https://user-images.githubusercontent.com/13305729/76361706-cbd0b000-62dc-11ea-8323-9bea282b6c21.png)\r\n\r\n\r\nI\'ve heard this brought up by a few community members, but was never able to reproduce this within the MRTK Unity project. Build times in current _mrtk_development_:\r\n\r\n```\r\nCompiled shader \'Mixed Reality Toolkit/Standard\' in 6.47s\r\n    d3d11 (total internal programs: 21504, unique: 7168)\r\n```\r\n\r\n\r\nBut, I opened a project  the other day and did encounter an issue with shader compilation taking upward of 5 minutes. After doing some poking around I narrowed the issue down to the ""Optimize Mesh Data"" in the player settings.\r\n\r\nIf you need this setting, I would recommend disabling it while iterating on your application and only enabling it when you go to make final builds. The ""Optimize Mesh Data"" settings tries to remove unused vertex attributes within your application. **It does this by running over every shader pass in every material that is on every mesh in the build. (You can see why this would take awhile in mid to large size projects.)**\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6629 (partially)\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
578862754,7515,b'Reset IsEyeCalibrationValid to null if no data for determining is available',"b'## Overview\r\nRight now if a device loses the users eyes, the calibration status remains unchanged until eyes are again found. By resetting the `bool?` back to null if no eyes can be found developers can respond to eye lost status changes.\r\n\r\n## Changes\r\nResets EyeCalibrationIsValid to null if there is no eye data available to indicate validity.'"
578763222,7512,b'Rename MixedRealityToolkit folder to Core and move to the new MRTK hierarchy',"b'This change takes #5483 into account and adds the MixedRealityToolkit folder (renamed to Core) to the MRTK folder hierarchy.\r\n\r\nAs with the previous change (#7479), the MixedRealityToolkit.Generated folder is not being changed.\r\n\r\nPackaging has been updated to with the new folder location.\r\n\r\nAll tests were run prior to opening this PR. NuGet packaging scripts have been run and confirmed successful package building.\r\n\r\nThis change is part of #6985 and #5483\r\n\r\nThis completes the folder renames and moves. Documentation and NuGet packaging have some updates pending.'"
578762065,7511,b'Optimize Mesh Data Project Configurator',"b'## Overview\r\n\r\nThe project configurator now warns against optimizing mesh data during development.\r\n\r\n![image](https://user-images.githubusercontent.com/13305729/76343574-8b156e80-62bd-11ea-84cc-95b8f2c719ba.png)\r\n\r\nI\'ve heard this brought up by a few community members, but was never able to reproduce this within the MRTK Unity project. Build times in current _mrtk_development_:\r\n\r\n```\r\nCompiled shader \'Mixed Reality Toolkit/Standard\' in 6.47s\r\n    d3d11 (total internal programs: 21504, unique: 7168)\r\n```\r\n\r\n\r\nBut, I opened a project  the other day and did encounter an issue with shader compilation taking upward of 5 minutes. After doing some poking around I narrowed the issue down to the ""Optimize Mesh Data"" in the player settings.\r\n\r\nIf you need this setting, I would recommend disabling it while iterating on your application and only enabling it when you go to make final builds. The ""Optimize Mesh Data"" settings tries to remove unused vertex attributes within your application. It does this by **running over every shader pass in every material that is on every mesh in the build. (You can see why this would take awhile in mid to large size projects.)**\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6629 (partially)\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
578725198,7510,b'Update ExamplesHub scene paths',b'This change addresses a CI failure where the examples hub scenes were failing path validation due to moving the examples folder (#7509).'
578184332,7509,b'Rename examples folder and move into the new MRTK folder hierarchy',"b'This change takes #5483 into account and adds the Examples folder to the MRTK folder hierarchy.\r\n\r\nAs with the previous change (#7479), the MixedRealityToolkit.Generated folder is not being changed.\r\n\r\nPackaging has been updated to with the new folder location.\r\n\r\nAll tests were run prior to opening this PR. NuGet packaging scripts have been run and confirmed successful package building.\r\n\r\nThis change is part of #6985 and #5483'"
578077664,7508,b'Rename tests folder and add to the new MRTK folder hierarchy',"b'This change takes #5483 into account and adds the Tests folder to the MRTK folder hierarchy.\r\n\r\nAs with the previous change (#7479), the MixedRealityToolkit.Generated folder is not being changed.\r\n\r\nPackaging has been updated to with the new folder location.\r\n\r\nAll tests were run prior to opening this PR. NuGet packaging scripts have been run and confirmed successful package building.\r\n\r\nThis change is part of #6985 and #5483\r\n\r\nThis change also fixes a missing unitypackage script update for the Tools folder'"
578074353,7507,b'Added cursor context component for object manipulator',"b'## Overview\r\nto show cursor context while manipulating an object.\r\nwe used to support this for manipulationhandler, so added the missing component and test for object manipulator which is going to replace manipulationhandler soon\r\n\r\n## Changes\r\n- Fixes: #7485 \r\n\r\n'"
577627771,7505,b'Add check EyesPose.IsSupported to only call APIs when supported',b'Cherry pick #7489 to 2.2.1'
577568868,7504,b'Rename tools folder and move into new MRTK folder hierarchy',"b'This change takes #5483 into account and adds the Tools folder to the MRTK folder hierarchy.\r\n\r\nAs with the previous change (#7479), the MixedRealityToolkit.Generated folder is not being changed.\r\n\r\nPackaging has been updated to with the new folder location.\r\n\r\nAll tests were run prior to opening this PR. NuGet packaging scripts have been run and confirmed successful package building.\r\n\r\nThis change is part of #6985 and #5483'"
577244076,7502,b'Extensions NuGet packaging fix',b'Was missing an extra level of redirection. This should now be fixed'
577192086,7500,b'Remove incorrect obsolete from WindowsSpeechInputProvider',"b'## Overview\r\n\r\nWhen the registrar was removed from the constructor in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6457, it looks like the new constructor was accidentally also marked with `Obsolete`. This PR removes that. The old constructor is still obsolete.'"
577093791,7497,b'Rename extensions folder and move into the MRTK heirarchy',"b'This change takes #5483 into account and adds the Extensions folder to the MRTK folder hierarchy.\r\n\r\nAs with the previous change (#7479), the MixedRealityToolkit.Generated folder is not being changed.\r\n\r\nPackaging has been updated to with the new folder location.\r\n\r\nAll tests were run prior to opening this PR.\r\n\r\nThis change is part of #6985 and #5483'"
576648664,7495,b'Update UnityAR nuspec based on the new path depth',b'This change fixes the CI NuGet packaging step that was broken by moving the Providers packages down a level in the folder heirarchy (#7491)'
576578458,7494,b'Reduce path length: SDK folder',"b'This change takes #5483 into account and adds the SDK folder to the MRTK folder hierarchy.\r\n\r\nAs with the previous change (#7479), the MixedRealityToolkit.Generated folder is not being changed.\r\n\r\nPackaging has been updated to with the new folder location.\r\n\r\nAll tests were run prior to opening this PR.\r\n\r\nThis change is part of #6985 and #5483'"
575921365,7492,b'Path length reduction / creating folder hierarchy: services folder',"b'This change takes #5483 into account and starts the process of creating an MRTK folder hierarchy rather than having each MRTK folder as root folders under Assets.\r\n\r\nAs with the previous change (#7479), the MixedRealityToolkit.Generated folder is not being changed.\r\n\r\nPackaging has been updated to with the new services folder location.\r\n\r\nAll tests were run prior to opening this PR.\r\n\r\nThis change is part of #6985 and #5483\r\n'"
575845103,7491,b'Rename providers folder',b'This change is part one of a series of changes that will result in shorter paths (by 15 characters) for most of the MRTK (MixedRealityToolkit.Generated is not currently planned for a rename).\r\n\r\nAll test automation was run prior to opening this PR.\r\n\r\nDocumentation references and links will be updated when all folders have been renamed.\r\n\r\nRelated to #6985 '
575740023,7490,b'Feature/custom mesh primitive attrs',"b'## Overview\r\nThis change allows custom attributes to be parsed and stored in a dictionary object.\r\n\r\nThis pull request changes the glTF `Attributes` from an custom object, `GltfMeshPrimitiveAttributes`  to a dictionary to support arbitrary attributes. `GltfMeshPrimitiveAttributes` is now used as a look up for standard attribute keys.\r\n\r\n## Changes\r\n- Fixes: #6953 \r\n\r\n## Verification\r\n\r\nTwo playmode tests have been added. `TestGltfLoads` and `TestGltfCustomAttributes` to provide some basic coverage for the existing glTF loading process and the new addition with custom attributes.'"
575696169,7489,b'Add check EyesPose.IsSupported to only call APIs when supported',"b""## Overview\r\n\r\nEven if the API is present, it's possible eye tracking isn't actually supported on the current device. This ensures we don't actually call the APIs unless they're both present and supported.\r\n\r\n@jwittner it'd be good if you can test this in your scenario! I wasn't able to repro your stack exactly, but did see other exceptions in your same scenario that this fixes.\r\n\r\n## Changes\r\n- Fixes: #7482 \r\n"""
575367315,7486,b'Checking if scene has been loaded before we try to search it for extra playspaces',"b'## Overview\r\n\r\nFixes an issue with an exception being thrown from within MRTK when opening the project:\r\n```\r\nArgumentException: The scene is not loaded.\r\nUnityEngine.SceneManagement.Scene.GetRootGameObjects (System.Collections.Generic.List`1[T] rootGameObjects) (at C:/buildslave/unity/build/Runtime/Export/SceneManager/Scene.cs:91)\r\nUnityEngine.SceneManagement.Scene.GetRootGameObjects () (at C:/buildslave/unity/build/Runtime/Export/SceneManager/Scene.cs:75)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityPlayspace.EditorSceneManagerSceneOpened (UnityEngine.SceneManagement.Scene scene, UnityEditor.SceneManagement.OpenSceneMode mode) (at Assets/MixedRealityToolkit/Utilities/MixedRealityPlayspace.cs:205)\r\nUnityEditor.SceneManagement.EditorSceneManager.Internal_SceneOpened (UnityEngine.SceneManagement.Scene scene, UnityEditor.SceneManagement.OpenSceneMode mode) (at C:/buildslave/unity/build/Editor/Mono/SceneManagement/EditorSceneManager.cs:47)\r\nUnityEditor.SceneManagement.EditorSceneManager:OpenScene(String, OpenSceneMode)\r\nMicrosoft.MixedReality.Toolkit.Utilities.EditorSceneUtils:LoadScene(SceneInfo, Boolean, Scene&) (at Assets/MixedRealityToolkit/Utilities/Scenes/EditorSceneUtils.cs:188)\r\nMicrosoft.MixedReality.Toolkit.SceneSystem.MixedRealitySceneSystem:EditorUpdateManagerScene() (at Assets/MixedRealityToolkit.Services/SceneSystem/MixedRealitySceneSystemEditorOperations.cs:471)\r\nMicrosoft.MixedReality.Toolkit.SceneSystem.<EditorCheckForChanges>d__166:MoveNext() (at Assets/MixedRealityToolkit.Services/SceneSystem/MixedRealitySceneSystemEditorOperations.cs:307)\r\nSystem.Runtime.CompilerServices.AsyncVoidMethodBuilder:Start(<EditorCheckForChanges>d__166&)\r\nMicrosoft.MixedReality.Toolkit.SceneSystem.MixedRealitySceneSystem:EditorCheckForChanges()\r\nMicrosoft.MixedReality.Toolkit.SceneSystem.MixedRealitySceneSystem:EditorOnInitialize() (at Assets/MixedRealityToolkit.Services/SceneSystem/MixedRealitySceneSystemEditorOperations.cs:151)\r\nMicrosoft.MixedReality.Toolkit.SceneSystem.MixedRealitySceneSystem:Initialize() (at Assets/MixedRealityToolkit.Services/SceneSystem/MixedRealitySceneSystem.cs:162)\r\nMicrosoft.MixedReality.Toolkit.<>c:<InitializeAllServices>b__60_0(IMixedRealityService) (at Assets/MixedRealityToolkit/Services/MixedRealityToolkit.cs:923)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:ExecuteOnAllServicesInOrder(Action`1) (at Assets/MixedRealityToolkit/Services/MixedRealityToolkit.cs:1019)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:InitializeAllServices() (at Assets/MixedRealityToolkit/Services/MixedRealityToolkit.cs:923)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:InitializeServiceLocator() (at Assets/MixedRealityToolkit/Services/MixedRealityToolkit.cs:468)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:InitializeInstance() (at Assets/MixedRealityToolkit/Services/MixedRealityToolkit.cs:582)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:RegisterInstance(MixedRealityToolkit, Boolean) (at Assets/MixedRealityToolkit/Services/MixedRealityToolkit.cs:720)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:OnValidate() (at Assets/MixedRealityToolkit/Services/MixedRealityToolkit.cs:1456)\r\n```'"
575134967,7484,b'Fixing Solver Tests Which Fail Locally',"b""## Overview\r\n\r\nA handful of tests fail locally for me, and not within our Azure pipeline. These two solver tests appear to fail due to the assumption that the test runner runs at 60fps. I'm not actually sure if the test runner runs at a certain vsync or as fast as it can? Anyway, changing two waits to be frame rate independent.\r\n\r\nBefore:\r\n![before](https://user-images.githubusercontent.com/13305729/75846119-23789400-5d90-11ea-8e41-8c42b3b674ae.PNG)\r\n\r\nAfter:\r\n![after](https://user-images.githubusercontent.com/13305729/75846122-24a9c100-5d90-11ea-9d39-22453e67452d.PNG)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7483 (partially)\r\n\r\n## Verification\r\nPlease run the test runner locally.\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
575020915,7480,b'Add RequireComponent to CursorContextManipulationHandler',"b'## Overview\r\n\r\nThis will prevent the migration step from running, as of https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7244.\r\n\r\nThis fixes the case where this script assumed the presence of ManipulationHandler. I chose this fix over `EnsureComponent`, because we have existing code that prevents migration based on `RequireComponent`.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7465\r\n'"
574972723,7479,b'Rename MixedRealityToolkit.Services folder to MRTK.Services',b'This change is part one of a series of changes that will result in shorter paths (by 15 characters) for most of the MRTK (MixedRealityToolkit.Generated is not currently planned for a rename).\r\n\r\nThis change updates the Services code folder and related documentation references.\r\n\r\nAll test automation was run prior to opening this PR.\r\n\r\nRelated to #6985 '
574959772,7477,b'Add null checks for gazeProviderPointingData',"b""## Overview\r\n\r\nThis change is needed since the gaze provider isn't a required pointer. Some scenarios need to support the lack of a gaze pointer.\r\n\r\nIn those cases, this pointing data is never initialized and can null ref in a few spots.\r\n\r\n## Changes\r\n- Fixes: #7427 """
574954735,7476,"b'shorten release notes, consolidate upgrade/update information'","b'This change fixes #7473 by reducing the release notes to a single version (in this case, 2.4.0) and moving the upgrade instructions from release notes to updating.md.'"
574923574,7475,b'Cherry-pick #7205 to 2.2.1',"b'## Overview\r\n\r\nInstead of assuming only one SpatialCoordinateSystem will ever exist, this change checks the `IntPtr`s to detect when the underlying root coordinate system has changed.\r\n\r\nThis helps scenarios like recentering, when a dev / user wants to realign the experience in a specific alignment. Can also help in scenarios when tracking is list and the original coordinate system is never regained. Also helps in the scenario when a new scene is loaded.\r\n\r\nNote: This PR is going into an upcoming hotfix release of 2.2. It is already fixed in the current release of 2.3.\r\n\r\n## Changes\r\n- Fixes: #6974 '"
574347137,7471,b'Clean up warnings in PointerClickHandler',"b""## Overview\r\n\r\nAlthough this script is deprecated, it's currently throwing some build warnings:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/75732312-03b97100-5ca7-11ea-957b-064ea31c3038.png)\r\n\r\nThis PR fixes them up."""
574274820,7470,b'Update adapter version in WSA.Player.Template.props.template',"b""## Overview\r\n\r\nThis was previously updated in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7267 but this template wasn't changed. It doesn't cause problems, since MRTK didn't need to be built against a newer version, but we should keep it up to date."""
574196844,7469,b'Cleanup some missed usages of SetupConfiguration',"b'## Overview\r\n\r\n#7375 deprecated `SetupConfiguration` from the BaseController class, but not all instances were properly cleaned up. This PR removes those remaining instances.\r\n\r\nIt also updates the previously deprecated `SetupConfiguration` method signature (https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6653) to point to `Enabled` instead of the other deprecated method.'"
574183200,7468,b'Use HasFlag for Handedness comparison',"b'## Overview\r\nBelieve this is last case of verbose handedness comparison\r\n\r\n## Changes\r\n- Fixes: #5821\r\n\r\n## Verification\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
573021368,7461,b'Fix validate themes persistence to serialized object',"b""## Overview\r\nIf state objects change and themes are validated to match this new state model, the inspector needs to update it's serializedobject tracking the property.\r\n\r\n## Changes\r\n- Fixes: #6800\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
573013477,7460,b'Allow visual themes to reset',"b""## Overview\r\nThis change adds a Reset method to the InteractableThemeBase class. This way themes are responsible for tracking the original values on their host gameobjects before they were initialized to manipulate those properties based on state changes. \r\n\r\nThis is put in practice via Interactable which will reset all themes when the component is destroyed thus reverting the GameObject back into it's original state (at least as thus far as the themes modified it). \r\n\r\n- Updated documentation\r\n- Updated tests\r\n- Added property *RevertOnDestroy* for Interactable\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/75703250-f29f3e80-5c6b-11ea-9110-5e72d6d8471c.png)\r\n\r\n## Changes\r\n- Fixes: #5497 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
573009404,7459,b'Remove unreachable code from WMRDeviceManager',"b""## Overview\r\n\r\nThese `break`s are added after `returns`, so they're unreachable and throw warnings.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/75585328-a911e200-5a26-11ea-8243-e20414ca5821.png)\r\n"""
572979409,7458,b'Add support for Windows scene understanding as a spatial observer',"b'## Overview\r\n![MRTK_SU7](https://user-images.githubusercontent.com/13754172/75598388-2a319f00-5a50-11ea-9ebf-b56700d10849.gif)\r\n\r\n\r\nScene Understanding supplies a semantic representation of observed scene entities as well as their geometric forms on HoloLens 2. This pull request implements Scene Understanding as a Spatial Awareness observer.\r\n\r\n__Demo video here! : https://youtu.be/mMzeWG7zlao__\r\n\r\nScene Understanding SDK documentation on Dev Center:\r\nhttps://docs.microsoft.com/en-us/windows/mixed-reality/scene-understanding\r\n\r\n## Goals and features of the demo\r\nDemo scene with visualization of Scene Objects with options for configuring the observer\r\nExample script that excersises the event system demonstrating common tasks\r\nSave device room data for offline development\r\nIn-editor workflow for developing with previously saved room data (.bytes files)\r\nFor the first time, access to the highest possible resolution of the world mesh!\r\n\r\n## Important - README\r\nYou must complete the prerequisites section in README for this to work.\r\nhttps://github.com/pinkwerks/MixedRealityToolkit-Unity/blob/user/pinkb/sceneunderstanding/Documentation/Experimental/SceneUnderstanding/README_SceneUnderstanding.md\r\n\r\n## Demo scene:\r\nAssets/MixedRealityToolkit.Examples/Experimental/SceneUnderstanding/Scenes/**SceneUnderstandingExample.unity**\r\n\r\n## Changes\r\n- Fixes: #6928 #6018 '"
572974090,7457,b'Add support for Windows scene understanding as a spatial observer #6928',b'## Overview\r\n\r\nImplements Scene Understanding as a Spatial Awareness observer.\r\n\r\nDocumentation and demo scene in:\r\nAssets/MixedRealityToolkit.Examples/Experimental/SpatialAwareness/README.md\r\nAssets/MixedRealityToolkit.Examples/Experimental/SpatialAwareness/DemoSpatialAwareness.unity\r\n'
572674704,7442,b'update releasenotes and updating pages with recent changes',"b'This change adds details of the recent WindowsApiChecker changes (#7402, #7429). It also adds the template information for upgrading MRTK as well as moving obsolete method information recently added into the updating.md article.'"
572471666,7441,b'Update test files to load assets via GUID instead of path',"b""## Overview\r\n\r\nIn preparation for #7409, this updates all tests to load assets via GUID instead of hardcoded path. This will make our tests more robust to folder / path changes in the future, while also potentially alerting us to GUID changes that we'll need to mitigate.\r\n\r\n## Changes\r\n- Fixes: #7438 \r\n"""
572425794,7440,b'MRTK Shaders should support SRP Batcher',"b'## Overview\r\nDraft of work to update MRTK shaders to support SRP batcher in new scriptable rendering pipeline in Unity. \r\n\r\n## Changes\r\n- Fixes: #7434 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
572345592,7439,b'Fix some Unity object null comparisons and test infrastructure',"b""## Overview\r\n\r\n1. Fixes two places where we were incorrectly using null propagation and coalescing on Unity objects.\r\n    1. https://blogs.unity3d.com/2014/05/16/custom-operator-should-we-keep-it/\r\n1. Fixes an instance in the tests where we were `new`ing a scriptable object\r\n    1. `Microsoft.MixedReality.Toolkit.Input.MixedRealityHandTrackingProfile must be instantiated using the ScriptableObject.CreateInstance method instead of new MixedRealityHandTrackingProfile.`\r\n1. Fixes an instance where one of our test classes was incorrectly marked as a `MonoBehaviour`\r\n    1. This was causing `You are trying to create a MonoBehaviour using the 'new' keyword.  This is not allowed.  MonoBehaviours can only be added using AddComponent(). Alternatively, your script can inherit from ScriptableObject or no base class at all` on test runs"""
572303246,7437,b'Remove unused bool from WMRDeviceManager',"b""## Overview\r\n\r\nThis bool was added in #7402, but is unused. This is causing a warning in Unity.\r\n\r\n```\r\nAssets\\MixedRealityToolkit.Providers\\WindowsMixedReality\\XRSDK\\WindowsMixedRealityDeviceManager.cs(61,18): warning CS0219: The variable 'hasCapability' is assigned but its value is never used\r\n```"""
572298010,7435,b'Minor updates to build window',"b'## Overview\r\nMake UseSSL default to false. Issues with using device portal on HTTPS vs HTTP atm. @keveleigh do you remember/know anything about this?\r\n\r\nAlso, update last connection time to null when a new test connection has been initiated but not validated yet. This way the UI updates to help indicate a change has occurred.\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
572183959,7429,b'Add IsPropertyAvailable and IsTypeAvailable to WindowsApiChecker',b'This change adds IsPropertyAvailale and IsTypeAvailable methods to the WindowsApiChecker class and updates MRTK code to use them instead of directly calling ApiInformation.Is*Present().\r\n\r\nFixes https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7426'
572154378,7428,b'improvements to version dropdown',"b""## Overview\r\n- added currently active version of docs to version selector\r\n- removed currently active version from drop down list \r\n- removed some unnecessary code / cleanup in the version script\r\n\r\n![image](https://user-images.githubusercontent.com/36998103/75458027-1bc28500-5975-11ea-9406-00a6aad9ed04.png)\r\n\r\n## Fixes\r\nAt least a temporary fix for users who get thrown out of the version specific documentation by clicking the direct links on the front page - that way they can see which version they're currently in on any page of the docs"""
571912735,7425,b'Removing specific formatting for GLTF mesh-primitive attributes',"b'## Overview\r\n\r\nThe GLTF parser expected attributes of mesh primitives to have a specific formatting, like this:\r\n\r\n```json\r\n{\r\n    ""attributes"": {\r\n         ""POSITION"" : 0,\r\n         ""NORMAL"" : 1,\r\n         ""TEXCOORD_0"" : 2\r\n    },\r\n    ""indices"" : 3\r\n}\r\n````\r\n\r\n(Note the lack of spaces between ""attributes"" and the following colon). Generally \r\n\r\n## Changes\r\n\r\n- Removing requirement for specific formatting in attributes.\r\n- Fixes: #7223 \r\n\r\n\r\n\r\n## Verification\r\n\r\nTry loading the following GLTF-Model without this change and with this change:\r\n[cube.zip](https://github.com/microsoft/MixedRealityToolkit-Unity/files/4260435/cube.zip)\r\n'"
571766063,7424,b'Use discard instead of saving unused variable for playspace',"b""## Overview\r\n\r\nClearing out old branches and found this commit leftover from some old PRs.\r\nSmall change, but there's no point in creating this variable since we don't use it and only need the property call to happen."""
571745605,7423,b'Rename property in BoundingBox',b'## Overview\r\n\r\nThis PR updates the misleading property name `RotationHandleSlatePrefab` to `RotationHandlePrefab`.\r\n\r\n## Changes\r\n\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6657'
571737845,7422,b'Fix install appx on local via MRTK deploy window',"b'## Overview\r\nThere were a few issues found when testing the deploy window against local machine/hololens usb testing. \r\n\r\nFor local machine, InstallAppOnDeviceAsync() would check for the Install.ps1 script but would only select if it is was the only script. This fix looks for the script directly.\r\n\r\nIf trying to deploy an x64 app to HoloLens, the install appx would fail but not report anything to the user. Added debug.log\r\n\r\nDevicePortal.InstallAppAsync() would try to embed revelant dependencies with the install request. However, this was hardcoded to look for the x86 folder. The fix is to look at the appx path to determine what architecture is being targeted. \r\n\r\nSome general GUI fixes. Added UI to indicate if last test connection to target was successful or not. Also, sharing code with new datetime string conversion which is now in DateTimeExtensions class\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/75400105-14d33e00-58b3-11ea-88e7-20f98ec258d5.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #6877 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
571689142,7421,b'Add controller mapping migration tests',"b""## Overview\r\n\r\nAdds some tests to catch the bug reported in #7405.\r\n\r\nAlso:\r\n\r\n1. Updates a test script with the test icon\r\n1. Fixes a quirk I found while testing this fix, where the mapping profiles aren't automatically saved when the update menu item is clicked\r\n1. Removes an extra line from the controller mapping profile definition\r\n\r\n## Changes\r\n- Follow-up to #7406 """
571594542,7419,b'mrtk_release -> mrtk_dev',b'## Overview\r\n\r\nDocs update in #7411\r\n\r\nmrtk_release -> mrtk_dev'
571592503,7418,b'mrtk_release -> mrtk_dev',b'## Overview\r\n\r\nDocs update in #7411 \r\n\r\nmrtk_release -> mrtk_dev'
571559619,7415,b'Releases/2.3.0 -> mrtk_release',b'## Overview\r\n\r\nDocs update in #7411 \r\n\r\nReleases/2.3.0 -> mrtk_release'
571530094,7413,b'MixedRealityKeyboardPreview Follow Solver',"b""## Overview\r\n\r\nThis change updates the MixedRealityKeyboardPreview prefab to behave closer to the shell. \r\n\r\n- The MixedRealityKeyboardPreview prefab now uses the new Follow solver (rather than orbital). Note, while the behavior is closer to the shell it is still easy to fall out of sync (especially when the keyboard is grabbed). This is just an interim update until the shell keyboard's location can be controlled via the application.\r\n![followKeyboard](https://user-images.githubusercontent.com/13305729/75368391-83de7180-5876-11ea-851e-5ccff7d759e6.gif)\r\n- Functionality has been added to the Follow solver to closer match the shell behavior.\r\n- The MixedRealityKeyboardPreview caret now blinks.\r\n![blink](https://user-images.githubusercontent.com/13305729/75368398-8771f880-5876-11ea-83d4-2bb1f152c888.gif)\r\n- Fixed an issue where the MixedRealityKeyboardPreview caret would occasionally disappear.\r\n- Added some bounds extensions. \r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6167\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
571524820,7412,b'Tap to Place Documentation',b'## Overview\r\n\r\n- Added Tap to Place documentation\r\n- Updated the toc\r\n\r\n## Changes\r\n- Fixes: #7362 \r\n'
571516551,7411,b'fixed some links and added a note about nuget and unity 2019',"b""some of our links in the 2.3.0 release notes were leading to wrong articles\r\nalso added a note about Unity 2019.3 with nuget on top of the article, so users won't find out about it too late\r\n\r\nfixes: #7410 """
571463299,7409,b' Reduce MRTK path lengths by 15 characters (#6985)',"b'This change renames MixedRealityToolkit[.*] folders to MRTK[.*] to reduce path lengths by 15 characters. MixedRealityTookit.Generated is _not_ renamed as customers may have custom profiles located there and the desire is to not cause unneeded source management churn.\r\n\r\nAs part of this change, the paths contained within the test collateral has been updated,\r\n\r\nPLEASE NOTE: This change touches nearly every file in the MRTK. The _vast_ majority of which are renames only.\r\n\r\nFixes: #6985 '"
571400003,7407,b'removed controller query about spatial position in scrolling object collection',"b""there's a check that queries if the input controller currently used is setting a (spatial) position.\r\nThis prevents all platforms that won't have this information to interact / scroll the scroll view.\r\n\r\nI haven't found a reason for this check to be there as none of the interactions in scrolling object collection is relying on that position but instead using the pointer result which is available for those platforms as well. \r\n\r\nAlso we shouldn't use any controller specific code in any of the UX controls but instead work with the data the pointer provides us. \r\n\r\nI've removed this check now to allow users to use the control on android / touch platforms \r\n\r\n## Changes\r\n- Fixes: #7404 \r\n\r\n"""
571346967,7406,b'Mrtk controller mapping update fix',b'## Overview\r\nBasically inverts an Equal test that should have been that way from the beginning.\r\nWrite new values if they are different and not ignore them.\r\n\r\n## Changes\r\n- Fixes: #7405'
571281418,7403,b'Pass correct Unity version for each of the agent pools',"b'This change addresses problems introduced in PR #7390 - i.e. it allows to use a different version of Unity when building on internal agents.\r\nUnfortunately, it turns out that variable expansion still doesn\'t work when specifying agent capabilities, so I wasn\'t able to remove all duplication (although I made sure that the version numbers in ""demands"" sections are filled in consistently)\r\n'"
571264982,7402,b'Switch from API contract version to IsMethodPresent (#6886)',b'This change adds IsMethodAvailble() to WindowsApiChecker and marks the UniversalApiContractV#_IsAvailble properties as obsolete.\r\n\r\nReferences tot he contract version check in MRTK have been updated to use the new method.\r\n\r\nFixes: #6886'
571209516,7401,b'Added possibility to pass a DownloadHandler',b'## Overview\r\nSee #7400\r\n\r\n## Changes\r\n- Fixes: #7400'
570952491,7396,b'HoloLens 2 style Check box / Radio / Toggle Switch buttons',"b'## Overview\r\nCurrently, MRTK provides traditional style Checkbox / Radio / Toggle Switch buttons. For cohesive user experience, adding HoloLens 2 style controls for Checkbox, Radio, and Toggle Switch that align with HoloLens 2 buttons.\r\nThese buttons are prefab variants of existing PressableButtonHoloLens2Toggle.prefab, just having different visual representations. Added Radio button group example with \r\n\r\n## Changes\r\n- Added PressableButtonHoloLens2ToggleSwitchPlated_32x96\r\n- Added PressableButtonHoloLens2CheckBoxPlated_32x96\r\n- Added PressableButtonHoloLens2RadioPlated_32x96\r\n- Added PressableButtonHoloLens2Toggle_32x96 \r\n- Added PressableButtonHoloLens2Toggle_40x40\r\n- Added PressableButtonHoloLens2Toggle_48x48\r\n- Adjusted toggle backplate visual to fix the issue of hiding icon/text on press\r\n  (existing PressableButtonHoloLens2Toggle prefabs)\r\n- Updated PressableButtonExamples scene\r\n\r\nNew HoloLens 2 style controls vs existing controls:\r\n![HL2_ButtonCheckRadio](https://user-images.githubusercontent.com/13754172/75299797-df631d80-57ea-11ea-8857-8ef647df0aca.gif)\r\n![HL2_ButtonCheckRadio3](https://user-images.githubusercontent.com/13754172/75299783-d6724c00-57ea-11ea-88b1-85e4a585212f.gif)\r\n\r\nToggle button fix Before & After:\r\n<img src=""https://user-images.githubusercontent.com/13754172/75299833-f99cfb80-57ea-11ea-8d8a-e867a03a6b37.gif"" width=""350px"">\r\n<img src=""https://user-images.githubusercontent.com/13754172/75299837-fb66bf00-57ea-11ea-9503-ce1ae3b1577f.gif"" width=""350px"">\r\n\r\nUpdated PressableButtonExamples scene\r\n<img width=""563"" alt=""2020-02-25 16_15_49-Unity 2018 4 13f1 Personal -  PREVIEW PACKAGES IN USE  - PressableButtonExample"" src=""https://user-images.githubusercontent.com/13754172/75299914-29e49a00-57eb-11ea-8599-4c82be546b31.png"">\r\n\r\n\r\n## Changes\r\n- Fixes: #7393\r\n'"
570621372,7391,b'Fix 7091 - Boundary system enabling ceiling based on wall flag',"b'## Overview\r\nThis change addresses the issue where the boundary system was incorrectly enabling the ceiling objects based on the ShowBoundaryWalls flag.\r\n\r\nAdditionally, it moves BaseBoundarySystem.cs from MRTK.Providers to MRTK\\Services (a more appropriate location)\r\n\r\n## Changes\r\n- Fixes: #7091\r\n'"
570614639,7390,b'Move common pipeline variables into a template',b'Attempt to extract pipeline variables into a shared template file.'
570227699,7384,b'Update ScriptingUtilities.cs summary tags',"b'## Overview\r\n\r\nThis class had a typo in its obsolete message, a duplicate ending `</summary>` tag, and a stray `<returns>` tag.'"
570227379,7383,b'Fix ButtonIconSet for Unity 2019.3',"b""## Overview\r\n\r\n`spriteIconTexture` doesn't exist. It's actually `spriteIconTextures`.\r\n"""
569909716,7379,b'Testing compliance tasks - do not merge',"b""Please ignore for now. I'll open a separate PR when ready.\r\n\r\n"""
569385493,7377,b'Fix visual rotation theme for toggling local vs world space rotation',"b""## Overview\r\nThe InteractableRotationTheme was originally designed to modify the local rotation values of the host target object. Although the original rotation and property setter components of the class correctly controlled the localEulerAngles property, the property getter component returned the host objects euler angles in world space.\r\n\r\nThis change fixes this bug as well as introduces a new theme property to the class that allows consumers to control whether values should be applied in local space or world space.\r\n\r\nAdded test to verify this functionality.\r\n\r\nThis PR is an extension from @Bertrand75014 's original PR #7081 \r\n\r\n![local-rotation](https://user-images.githubusercontent.com/25975362/75098402-a3218a00-556a-11ea-9e24-3bb0322afe2e.gif)\r\n\r\n## Changes\r\n- Fixes: #7080 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
569259900,7375,b'Deprecate SetupConfiguration in BaseController',"b""## Overview\r\n\r\n`SetupConfiguration` was only ever called directly after creating the class. It wasn't abstract or virtual, so it couldn't be overridden. It takes in the class' its own type in order to perform some action, which all the information for is present at the time the constructor is called.\r\n\r\nThis PR moves all work done by `SetupConfiguration` into the constructor. Any custom class' constructor can do additional setup work as needed.\r\n\r\n## Changes\r\n- Part of #5847 \r\n"""
569255493,7374,b'Refactor down SetupDefaultInteractions into BaseController',"b""## Overview\r\n\r\n`SetupDefaultInteractions` was originally abstract. As pointed out in #5847, it's possible not all controllers would need to implement this, even though they'll be required to.\r\nAdditionally, this method took in a specific handedness, even though the controller class itself has a handedness that's passed in with its constructor.\r\nI refactored down a combination of the actual implementations of this class (which were largely identical) and made it virtual, for classes that still need to override the behavior.\r\n\r\n## Changes\r\n- Part of #5847 \r\n"""
569250235,7373,b'Refactor ArticulatedHandDefinition out from WindowsMixedRealityArticulatedHandDefinition',"b""## Overview\r\n\r\nAs part of the cross-platform XR SDK work, WindowsMixedRealityArticulatedHandDefinition was created to share a single definition of what a HoloLens 2 articulated hand is and can be.\r\n\r\nThis PR refactors out a shared definition for all articulated hands, working towards separating the definition of what an input source is from the APIs that provide the data and platforms the input source can run on.\r\n\r\nFor this iteration, there's nothing new in ArticulatedHandDefinition that wasn't already in WindowsMixedRealityArticulatedHandDefinition.\r\n\r\n## Changes\r\n- Part of working to make hands and controllers more extensible.\r\n- Related to #6076 #4549"""
569242507,7372,b'Use a less interesting version of the exception to work around the nuget/build step',"b""## Overview\r\nThe mrtk_CI build is currently broken due to the usage of UnassignedReferenceException. This is really weird and totally not clear from the get go, but something that we've dealt with in the past (see https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5215/files#diff-5a24b3ab8cfc7d46cbb7d009ef8b0424) because the build step when we run msbuild and generate player binaries.\r\n\r\nThis purely to unblock the build, despite it being less correct (i.e. it would be great to actually use UnassignedReferenceException and not just Exception)\r\n\r\nSeparately we have some workstreams going that should make it so that we can reasonably use things like that but we're not quite there yet."""
569203906,7371,b'Tap to Place Tests',"b'## Overview\r\nAdded 4 tests for Tap to Place:\r\n1. Tests default behavior with the head as the TrackedTargetType\r\n2. Tests default behavior with Controller Ray as the TrackedTargetType\r\n3. Tests code configurability with the head as the TrackedTargetType\r\n4. Tests object placement with colliders in the scene, uses Start/StopPlacement calls instead of clicking  \r\n\r\nWhile writing the collider test I found that if an object is created via script, the bounds of the collider do not get updated before SurfaceNormalOffset is stored.   `UnityPhysics.SyncTransforms()` was added to TapToPlace before SurfaceNormalOffset is stored. Thanks @julenka \r\n\r\nThere was also a namespace update for HideTapToPlaceLabel and TapToPlace, thanks to @keveleigh for pointing that out.\r\n\r\n## Changes\r\n- Fixes: #7362 \r\n'"
569098684,7370,b'Hide visual profiler while MRC is running',b'## Overview\r\n\r\nAdds some `AppCapture` API calls to detect when MRC is running and auto-hide the profiler.\r\n\r\n## Changes\r\n\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7369'
568674677,7368,b'Fix extension service wizard generation on optional profile',"b'## Overview\r\nWhen using the extension service wizard creator, if the profile/inspector files (which are marked optional) are not selected and thus not created, then the new service class will throw an error. This is because the service template attempts to always create a private field of the profile instance.\r\n\r\nHowever if no special profile object is created, then the service class does not need the field or the constructor.\r\n\r\nAlso updated the service template to call base.initialize() and base.update by default. \r\n\r\n## Changes\r\n- Fixes: #5654 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
568664884,7367,b'Ensure camera is looking at cube and input system ticks.',"b'## Overview\r\nMakes TestGrab more reliable by ensuring camera is looking at cube on start and waiting for input system to update before checking pointers.\r\n\r\n## Changes\r\n- Fixes: #7359\r\n\r\n\r\n## Verification\r\nVerified by running tests 100 times in a row.\r\n\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
568522059,7364,b'Spell check PackageManifestUpdater',"b""## Overview\r\n\r\nCleaning up some branches and found this change. Figured I'd get it merged in!\r\nShould do a full spell check pass again soon."""
568467847,7363,"b""Add validators to ensure that we don't have mismatched image cases""","b'## Overview\r\n@CDiaz-MS noticed that our github.io docs had some broken links which were super interesting. There are actually a few different issues that are worth discussing here.\r\n\r\n1. The reason the image was broken was because of a case-insensitive issue on the docs update pipeline that we have. At some point in the past, someone changed the name of one of the images from image.png to image.PNG. The markdown image name and the actual image name matched fine, but the problem is the docs pipeline never ""noticed"" the image filename change from image.png to image.PNG. As a result, it never pushed the change to the gh-pages branch. The reason this happened is because git uses the default case-sensitive setting of the environment it\'s running in, and at least for our docs pipeline (which use powershell on windows) the default was case-insensitive. The fix there (not captured in this PR) was just to make sure we had the `git config core.ignorecase false` setting. Thanks to @keveleigh  for figuring this part out.\r\n2. We still have other images that are broken when viewed directly within github itself (i.e. looking at the markdown on github.com rather than generated html on github.io). This is because of case-sensitive mismatches between what\'s in markdown and what is actually on the filesystem. This PR means to avoid that in the future by adding validation to check that the images actually match their real (case-sensitive names) on disk.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7361'"
567805459,7360,b'Update hand physics example scene to load correct profile at startup',"b""## Overview\r\n\r\nWe had some reports of this scene being set up in a way that caused errors at startup when switching profiles.\r\n\r\nWe may need to investigate this LoadProfilesAtStartup script, alongside @davidkline-ms' work around active profile switching (#4289, etc). Setting the profile to null at startup causes a null profile all the way through the first `Update`, until a `LateUpdate`, which isn't desirable and is causing exceptions. \r\n\r\n![MicrosoftTeams-image (10)](https://user-images.githubusercontent.com/3580640/74869858-981dee00-530d-11ea-9612-8b6dcff59741.png)\r\n\r\nFor now, I've updated this scene to just load the correct profile initially instead of swapping at runtime.\r\n"""
567474461,7354,b'Changed the logic of MsBuild prerelease parsing so that it is not affected by current culture.',b'## Overview\r\n\r\nPrevious parsing logic was failing when current culture was set to one that uses decimal comma instead of decimal point.\r\n\r\nSee also the list of countries that use decimal commas: https://en.wikipedia.org/wiki/Decimal_separator#Countries_using_decimal_comma\r\n'
567250792,7350,"b""Fix the DirectionalIndicator's handling of destroyed target game objects""","b""## Overview\r\nA couple of issues here:\r\n\r\n1. As mentioned in the issue, the naming of IsVisible is somewhat confusing because it refers to whether or not the target itself is visible, but then is used to control the visibility of ourselves (in the negated form, obviously) further down the line. I opted to change it to reflect how we're going to be changing our own visibility, rather, than whether or not the target itself was actually visible.\r\n2. Even with that fix, there's still an exception because SolverUpdate() is called in LateUpdate, after the target object could have been destroyed. This makes it so that we only do SolverUpdate() stuff in the target object is still around.\r\n\r\nAlso added a test to verify that it's been fixed!\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7334"""
567237386,7349,b'MRTK Configurator keeps showing up 2019.3',"b""## Overview\r\nThe MRTK Configurator window keeps showing up on 2019.3 because there's a certain configurator setting (enabling MSBuildForUnity) that is configured to not show up in the UI (i.e. there's no checkbox for MSBuildForUnity in 2019), but the code in the backend still checks to see if it's enabled (and will keep popping up the window if it's not enable).\r\n\r\nThe other root/underlying confusion here is how there are multiple dictionaries and sources of data, where maintaining multiple is tricky.\r\n\r\nAnother issue that we should probably solve (in a future case) is having a test that validates that IsProjectConfigured returns true after applying the defaults on a given project.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7332"""
567217601,7348,b'Update NearInteractionGrabbable to not warn when there is actually a valid collider on the game object',"b""## Overview\r\nUpdates the validation in NearInteractionGrabbable to not log an error when there is actually a valid collider on the object. If the first collider on a game object isn't valid (i.e. it's not one of the supported colliders) we currently log an error (by newing up an exception, which we don't even throw).\r\n\r\nThis changes it so that if there is at least a single supported collider type, we don't log an error.\r\n\r\nAlso this changes it to just by an error log instead of newing an exception (and then logging the exception). Not much of a need to new up an exception only to not throw it.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7342"""
567194112,7347,b'Add initial stale configuration',"b""This change adds an initial stale configuration for stale bot.\r\n\r\nGoing through our past issues, we have a lot of issues that were open for older version of the MRTK (i.e. release candidate and even pre-RC). While many of these have been addressed during our fixes/churn in the past, there's a non-trivial amount of time it takes to comb through a lot of stale issues.\r\n\r\nThere's likely to be some portion of the issues that actually are still relevant - these will still be marked stale, but can become un-stale as folks comment (or reopen issues that get closed). The hope really is here that the only old issues that we carry forward are ones that people are actively looking for fixes for (i.e. it gives us more data to know which issues to target).\r\n\r\nSome rationale of the time:\r\n\r\nStale time of 150 - originally going to be chosen as 120 (i.e. average release cycle time times 2, so that we can have line of sight on issues that have been affecting folks for the past couple of releases). Historically we've seen a decent amount of things get resolved between two releases. Chosen to be 150 just to give a little more time before we consider things to be stale.\r\n\r\nClose time of 180 (i.e. 150 + 30) - Arbitrarily chosen to be a month to give folks time to react + keep the issue open."""
567161748,7346,b'Prerelease/2.3.0 stabilization -> dev',"b'## Overview\r\n\r\nThere was one PR (#7313) that went into stabilization for packaging testing, but not yet back into dev.\r\n@wiwei for confirmation that this did fix the issue and should be merged in.'"
567018611,7345,b'Add documentation for ObjectManipulator',b'## Overview\r\nAdded docs for ObjectManipulator and constraints. This is part of graduating ObjectManipulator out of experimental.\r\n'
565798909,7333,b'Refactoring of hand ray',b'## Overview\r\n- Created IHandRay interface.\r\n- Extracted StabilizedRay to utilities class.\r\n- Cleaned up HandRay code.'
565544186,7330,b'Fixing Unity Editor Wireframe Shading Mode Error',"b""## Overview\r\n\r\nWhen selecting the wireframe shading mode within the Unity Editor's scene viewport objects using the MRTK/Standard shader would occasionally render their wireframe representation in the wrong location (the model's identity location). Note, the coffee cup appears as a large version of itself at the origin:\r\n\r\n![image](https://user-images.githubusercontent.com/13305729/74565340-e5711880-4f25-11ea-809d-f355bd147791.png)\r\n\r\nI was able to narrow the issue down to the meta pass within the shader, it appears UnityMetaVertexPosition is not respecting the EDITOR_VISUALIZATION keyword. Moving the meta pass as the second pass (or anything but the first pass) seems to fix the issue. Unity now specifies the meta pass as the last pass in the Unity/Standard shader (IIRC this was not the case originally?) so this may be an undocumented requirement. \r\n\r\nMoving the meta pass to be the second pass declared within the MRTK/Standard shader fixes the issue with editor wireframe visualization.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6726\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n\r\nI tested these changes within editor and on a HoloLens 2. I also created a scene with lightmaps to verify data from the meta pass was still being piped though. \r\n"""
565529706,7329,b'Restoring links to documentation portal for the high level entries',b'## Overview\r\nThere is no way to access documentation portal and API reference page from GitHub landing page.\r\nRestored links for these four high level entries\r\n![2020-02-11 15_07_38-microsoft_MixedRealityToolkit-Unity_ Mixed Reality Toolkit (MRTK) provides a set](https://user-images.githubusercontent.com/13754172/74563509-d38d7680-4f21-11ea-8e3d-660b2736539b.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #7296 \r\n\r\n'
565277168,7327,b'Fixed minor spelling error',b'## Overview\r\nFixed a minor spelling error\r\n'
565166538,7326,b'Now offsetting from surface',"b'## Overview\r\nBaseCursor now offsets from surfaces, not along the player view direction\r\n\r\n## Screenshots\r\n\r\nI used .5f as the offset for clarification\r\n\r\nThe orange line is the view direction\r\n\r\nold: Here, the cursor offsets along the view direction\r\n![image](https://user-images.githubusercontent.com/32508825/74583663-97adec00-4fc9-11ea-9b44-2ed662afd6b2.png)\r\n\r\nnew: Here, it offsets along the surface normal\r\n![image](https://user-images.githubusercontent.com/32508825/74583522-13a73480-4fc8-11ea-8d60-55bb2d914801.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #7325'"
565165404,7324,b'HoverLight Color and Radius are now accessible from code',b'## Overview\r\nExpands the properties Color and Radius so they can be set via code\r\n\r\n## Changes\r\n- Fixes: #7323'
565023549,7321,b'Move the unityar camera settings provider out of experimental',b'This change moves the UnityAR camera settings provider out of an experimental namespace. It has shipped for two releases and the reported issues have been addressed.'
565009852,7319,"b'Add scaffolding for 2.4.0 release notes, etc'","b'This change updates roadmap.md, releasenotes.md and updating.md to contain the sections that are to be filled in during the development of v2.4.0'"
564376692,7314,b'Merge release into development',b'Brings mrtk_development up to the released 2.3.0 code'
564365430,7313,b'Update the ci-release pipeline to ensure that nuget.exe is actually in the path',"b""I'm seeing an issue in the signing portion of the build where there's a failure to start the validation process (i.e. using nuget verify). It line that's triggering it is the one that's running the nuget command, so my best hypothesis now is that there's some build agent change that removed the nuget.exe tool from the path.\r\n\r\nTrying this out to see if it resolves the issue."""
564336338,7312,b'Update release branch to v2.3.0',b'Title says it all :smile:'
564329653,7311,b'Clarify Unity version and add XR SDK docs reference',b'## Overview\r\n\r\nClarify Unity version and add XR SDK docs reference'
564327696,7310,b'Releases/2.3.0 -> mrtk_dev',b'## Overview\r\n\r\nReleases/2.3.0 -> mrtk_dev'
564323539,7309,b'Update ci-release.yml',b'our signing job takes longer than originally expected. increase the timeout from 60 to 90 min'
564302784,7308,b'Update known issues in release notes',b'Add recently discovered issues to the release notes.'
564190399,7307,b'Unity hangs after switching to UWP in 2019.3',"b""It looks like on latest Unity, there's some changes in Unity that make it susceptible to a hang when swapping platforms (when there is code in OnValidate that's doing the wrong stuff - i.e. destroying things).\r\n\r\nThis surfaces because the MixedRealityToolkit.cs code has OnValidate which is running on platform switch (which under the covers does way more work than is necessary on validate). This is a patch fix to make it so that during asset import, we don't do this work, which resolves this particular version of this issue)\r\n\r\nFixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7299"""
564155719,7306,b'Unity UI (UGUI) Examples Polish',"b""## Overview\r\nUnity UI (UGUI) Pressable Button prefabs and examples polish.\r\n- Fixed UGUI Pressable Button's highlight plate proximity behavior (Added separate material for UGUI)\r\n- Added Slate + UGUI ScrollView example (Added as a Prefab variant)\r\n- ScrollView example includes grid layout example with mixed 2D contents: image, text, GUIs...\r\n- Updated HandInteractionExamples scene\r\n\r\n![MRTK_UGUIExample](https://user-images.githubusercontent.com/13754172/74360762-7f945d80-4d7a-11ea-9731-7c46e662c070.gif)\r\n\r\n## Changes\r\n- Fixes: #7305\r\n\r\n## Before & After Screens\r\nUGUI Pressable Button Before: Wrong proximity highlight behavior\r\n![MRTK_UGUIButton1](https://user-images.githubusercontent.com/13754172/74360700-64c1e900-4d7a-11ea-9e0c-c6612419a616.gif)\r\n\r\nUGUI Pressable Button After:\r\n![MRTK_UGUIButton3](https://user-images.githubusercontent.com/13754172/74360749-773c2280-4d7a-11ea-9315-e9bfb7139af6.gif)\r\n\r\nHandInteractionExamples scene: Before:\r\n![2020-02-12 09_43_12-Unity 2018 4 13f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/74361642-275e5b00-4d7c-11ea-94b6-6f4e5689388f.png)\r\n\r\nHandInteractionExamples scene: After:\r\n![2020-02-12 09_33_16-Unity 2018 4 13f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/74360913-c5e9bc80-4d7a-11ea-8845-6483ca69125b.png)\r\n\r\n\r\n"""
564098426,7304,b'Match access modifier',b'Update the access modifier of the new method `UpdateNonAABoundsCornerPositions` to match the Obsolete method `UpdateNonAABoundingBoxCornerPositions`\r\n'
563923224,7301,b'Mrtk bb bounds calculation fix',"b'## Overview\r\n- The BoundingBox now properly ignores a collider when a renderer is found in case of RendererOverCollider and does the same vice versa\r\n- In case the BoundingBox has itself as the target, it ignores itself so its own BoxCollider is not taken into account when calculating bounds\r\n\r\n## Changes\r\n- Fixes: ##7300'"
563589532,7297,b'Update pipeline to include MixedReality.Toolkit.Test.Utilities ',"b'## Overview\r\nA step in our mrtk_ci_release pipeline is to delete the MixedReality.Toolkit.Tests package for the release, but the pipeline also removed the MixedReality.Toolkit.Test.Utilities in this process.  \r\n\r\nThis update excludes the MixedReality.Toolkit.Tests.Utilities from the MixedReality.Toolkit.Tests removal step.\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
563545580,7295,b'More XR SDK docs',"b'## Overview\r\n\r\nAdds a new doc describing getting started with MRTK and XR SDK.\r\nAlso, renames the XR SDK WMR device manager to properly match its file name and our naming conventions for data providers of its type.\r\n\r\n## Changes\r\n- Part of #7003\r\n'"
563441087,7293,b'Merge stabilization -> dev',b'## Overview\r\n\r\nMerge stabilization -> dev'
563433417,7292,b'Add additional debugging steps for MSB4U and HL2 remoting',b'## Overview\r\n\r\nCherry-pick over #7269 and add note on a potentially missing DotNetAdapter.csproj (thanks @julenka!)'
563380376,7291,b'Fix path to signCheck script',b'I forgot to replace this path in previous PR (see latest MRTK-Release-CI failure). Sorry about that.'
563375154,7290,b'Remove alternate implementation of FindFilesInAssets',"b'Per in person discussion related to #7288, this change removes the off-by-default alternate implementation of FileUtilities.FindFilesInAssets as there did not exist a test for that implementation and the MRTK code base only used the default path.'"
563284348,7289,b'Use alternate sync method for build tools repository',"b""Change Release pipeline to reference built-tools repository instead of handling git clone in a separate task. This relies on a Service Connection and we won't have to maintain an access token in pipeline variables.\r\n\r\nI issues this PR against 2.3.0-stabilization branch as it seems that's the branch release builds are running against. Let me know if this change needs to be cherry-picked anywhere else (or will it be merged with other changes after the release)."""
562935929,7288,b'Update FindFilesInAssets to only search AssetDatabase',"b""## Overview\r\n\r\nThe configuration checker for DotNetWinRT searched the filesystem instead of just Unity's visible assets. This was leading to a case where, because MSBuildForUnity 0.9.1 resolves nuget dependencies to a non-Unity-visible local cache before resolving the root dependencies folder, this checker was seeing DLLs that weren't actually visible to Unity.\r\nThis helps improve the steps for uninstalling MSBuildForUnity.\r\n\r\nAlso, added a test, updated some formatting, and added a line to the docs describing removing those local cache folders."""
562926768,7287,b'Update test icons for new 2.3 test files',b'## Overview\r\n\r\nUpdates the Unity icons for our test files to match the current standard. Nice spread of new coverage tests this release!'
562925383,7286,b'Remove UnityAR package references in Release Notes and GettingStartedWithMRTK',"b'## Overview\r\nThe UnityAR package contents have been moved to the Foundation package for 2.3.  The references to the package have been removed from the Release Notes and GettingStartedWithMRTK docs.\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
562910846,7285,b'Update ARFoundation Doc for 2.3',"b'## Overview\r\nThe ARFoundation capabilities are now in the Foundation package and not the separate UnityAR package, this change is now reflected in the Android/iOS doc.  Also changed 2019.x to 2019.3.\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
562875819,7283,b'Fixes edge cases when checking if collider is in field of view',"b'## Overview\r\nFixes a few edge cases in `CameraFovChecker.IsInFOVCached` when dealing with large colliders and add tests to verify the fixes. Specifically, fix the following cases:\r\n\r\n1. Large collider where one corner of collider is in FOV but outside the fov cone. Fix by checking for entire FOV instead of just an FOV cone.\r\n![image](https://user-images.githubusercontent.com/168492/74197273-03800580-4c14-11ea-9fd8-a974af8f1e6f.png)\r\n\r\n2. Large collider where all corners are outside of the FOV but in front. Variations of cases like below\r\n![image](https://user-images.githubusercontent.com/168492/74197374-3d510c00-4c14-11ea-8eee-87b4bb8a8876.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #7258 \r\n- Change method CameraFovChecker.IsInFOV*Cone*Cached to CameraFovChecker.IsInFOVCached because using cone does not cover case 1, above.\r\n- Add test to ensure this does not regress.\r\n\r\n## Verification\r\n* Verify that new test does not pass without this fix\r\n* Test HandInteractionExample scene in editor\r\n* Validate that performance doesn\'t significantly regress (see below)\r\n\r\n### Performance\r\nRan the following check similar to #6870 \r\n\r\nCode instrumented in SpherePointer.cs only, around the following call:\r\n\r\n```\r\nif (ignoreCollidersNotInFOV)\r\n{\r\n    Profiler.BeginSample(""IsInFOV"");\r\n    if (!mainCam.IsInFOVCached(collider))\r\n    {\r\n        // Additional check: is grabbable in the camera frustrum\r\n        // We do this so that if grabbable is not visible it is not accidentally grabbed\r\n        // Also to not turn off the hand ray if hand is near a grabbable that\'s not actually visible\r\n        grabbable = null;\r\n    }\r\n    Profiler.EndSample();\r\n}\r\n```\r\n\r\nWORST CASE 64 grabbables, none visible, 2 hands up and near the grabbables\r\n* total time: ~0.4ms\r\n* calls: 27\r\n\r\nGOOD CASE 64 grabbables, all visible, 2 hands up\r\n* total  time: ~0.2ms\r\n* calls: 4\r\n'"
562867213,7282,b'Merge stabilization -> dev',"b'## Overview\r\n\r\nThis was a manual merge, to update the changes in #7278 and #7280 to be correct for the development branch.'"
562848399,7281,b'Fix nested prefabs with custom MRTK inspectors',"b""## Overview\r\nWhen creating custom controls via EditorGUILayout.blah that isn't a property field, unity is not able to correctly track changes between the original component in the prefab and modifications at the scene layer (or higher level prefab layers). Usually Unity out-of-box highlights/bolds the modified field and allow right click options to control the property. \r\n\r\nThis change is to go through the custom inspector and identify where MRTK code needs to use EditorGUILayout.PropertyField or use the EditorGUI.PropertyScope to enable this functionality back in Unity.\r\n\r\n## Changes\r\n- Fixes: #4369\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
562847870,7280,b'Add missing AssemblyInfo.cs files and update PR validation to catch this case',b'## Overview\r\n\r\nAdds missing assembly version files.\r\nAlso adds a new step to PR validation to catch this case.\r\n~Temporarily contains a broken asmdef to test validation.~\r\nSuccess: \r\n![image](https://user-images.githubusercontent.com/3580640/74193457-3f16d180-4c0c-11ea-8dd4-6201872d359c.png)\r\n'
562846163,7279,b'Update the documentation version list to add 2.3.0',"b'This change replaces ""prerelease/2.3.0_stabilization"" with ""releases/2.3.0"" in the documentation version list.\r\n\r\nPlease _do not_ merge until the 2.3.0 release has been completed.'"
562844054,7278,b'Update nuget package license links',b'Nuget licenses should point to the documentation for the specific release. This change updates to .../releases/2.3.0/...\r\n\r\nNOTE: The link will _not_ resolve until the release branch is created.'
562829300,7276,b'Add CanEditMultipleObjects tag',"b'## Overview\r\nAdding CanEditMultipleObjects tag to some components\r\n\r\nhttps://docs.unity3d.com/ScriptReference/CanEditMultipleObjects.html\r\n\r\n## Changes\r\n- Related: #4165\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
562825359,7275,b'Fix issues related to changing the active profile at runtime',"b'This change addresses a number of issues that have blocked the ability to successfully change the active profile (MixedRealityToolkitConfigurationProfile) at runtime.\r\n\r\nMost notably, the UIRaycastCamera and DefaultCursor objects are now immediately deleted to avoid a race condition where some Unity methods report that they exist in the scene when, in fact, they are marked for deletion. This occurs due to the fact that, because of how MRTK currently changes profiles, teardown and restart occur before Unity completes the destroy process.\r\n\r\nTo help ensure we do not regress when we make further changes in this area, three play mode tests have also been added.\r\n\r\nFixes: #4289, #6041\r\n'"
562809141,7273,b'Fix number two for broken CI',"b""So previous change: https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7264 didn't work because that other API also didn't exist on UWP. \r\n\r\nThis goes with the other approach mentioned in the last PR, which is just to make it editor-only functionality."""
562769021,7269,b'Add another troubleshooting step for msb4u integration',"b'One person who recently tried out the remoting work was hitting an error ""file not found"" when going through the dotnet/msbuild restore steps.\r\n\r\nThe actual cause was because Unity Hub was installed and launched first, which took a snapshot of the system PATH variable, which at the time lacked the reference to the location of dotnet.exe. Then, even though they were closing/restarting Unity itself, because Unity Hub was never closed, future instances of Unity would inherit the stale, old path of Unity Hub, leading it to see like it was permanently busted.\r\n\r\nThe simple solution here is just to reboot the machine (the other solution is to manually kill Unity Hub.exe using task manager).\r\n\r\nEither way the error is super cryptic, and just adding a note here to reboot (simplest solution) in case someone else out there encounters this.'"
562765294,7268,b'Prerelease/2.3.0 stabilization -> dev',b'## Overview\r\n\r\nPrerelease/2.3.0 stabilization -> dev'
562764855,7267,b'Update DotNetWinRT dependency version',"b'## Overview\r\n\r\nPer https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7191#issuecomment-583081841, a new version has been shipped that should fix the issue when ASA and DotNetWinRT are both imported.'"
562750961,7266,b'Update docs for MSB4U resolution troubleshooting and add additional notes',"b""## Overview\r\n\r\n1. Adds a note on using MSB4U for your own project dependencies as well as MRTK's\r\n1. Adds a note on the .bin and .obj folders that can be safely added to your gitignore\r\n    1. These folders are in this repo's .gitignore, but I don't believe that's distributed via our unity packages since it begins with a `.` and is thus ignored by Unity\r\n1. Fixes the .csproj reference for step 2 of troubleshooting the DotNetWinRT dependency"""
562722070,7265,b'Remove non-relative link to docs',b'## Overview\r\n\r\nFixes \r\n![image](https://user-images.githubusercontent.com/3580640/74175041-e8000500-4be9-11ea-843c-d54a8bb8fa35.png)\r\n'
562718774,7264,b'Fix the broken UWP app build',"b""Our CI build got broken due to a change that used the API:\r\n\r\nAttributes.GetCustomAttributes\r\n\r\nThis function doesn't exist in UWP .NET, but Type.GetCustomAttributes does.\r\n\r\nThe other possibility here was to make this function an editor-only extension (should really only be used in editor-land only). """
562548741,7263,b'Fixed some documentation links and typos',b'## Overview\r\n- Fixed broken hand tracking link in readme\r\n- replaced all links to .html with relative .md links\r\n- replaced api doc link with xref\r\n- fixed typo in code doc\r\n- replaced the word nuke with clear in code comment\r\n\r\n'
561928529,7260,b'Fix missing assembly error on 2019.3',"b'An errant, unused using statement was causing a missing assembly error on Unity 2019.3.\r\n\r\nThis change also adds in a missing #if !UNITY_2019_3_OR_NEWER in the configuration dialog as it was attempting to access a dictionary key that will not exist.'"
561862489,7257,b'Add notes about Dependencies folder and *.msb4u.csproj file',"b'As pointed out in #7255, the 2.3.0 release notes do not mention the new Dependencies folder or the <project>.Dependencies.msb4u.csproj file.\r\n\r\nThis change adds entries into the ""What\'s new section""'"
561353078,7254,"b'Example scene polish - Clipping Examples - delete unnecessary texts, \xe2\x80\xa6'",b'## Overview\r\nExample scene polish - Clipping Examples\r\n- Deleted unused 3D Text mesh and reticle objects\r\n- Updated text visiblity on grab/release.\r\n\r\n## Changes\r\nFixes: #7252\r\n\r\nBefore & After\r\n![2020-02-06 16_37_01-Unity 2018 4 13f1 Personal -  PREVIEW PACKAGES IN USE  - ClippingExamples unity ](https://user-images.githubusercontent.com/13754172/73990792-125a7580-48ff-11ea-932c-b702136cf6ab.png)\r\n![2020-02-06 16_33_28-Unity 2018 4 13f1 Personal -  PREVIEW PACKAGES IN USE  - ClippingExamples unity ](https://user-images.githubusercontent.com/13754172/73990794-14243900-48ff-11ea-9a16-e827d095dfbc.png)\r\n'
561346703,7253,b'Slate example scene polish - deleted unnecessary objects.',b'## Overview\r\nExample scene polish - Slate Examples\r\n- Deleted unused 3D Text mesh and reticle objects\r\n\r\n## Changes\r\n- Fixes: #7252 \r\n\r\n![2020-02-06 16_10_55-Unity 2018 4 13f1 Personal -  PREVIEW PACKAGES IN USE  - SlateExample unity - MR](https://user-images.githubusercontent.com/13754172/73989844-0e792400-48fc-11ea-93cc-ee15124f5e23.png)\r\n\r\n'
561341862,7251,b'Configurator better honors filter when setting configuratons',"b'The configurator was honoring the supported build type when getting configuration state / displaying in the dialog. It was, however, not properly honoring during set. This was resulting in Enable MSBuild for Unity to not display but get force enabled.\r\n\r\nThis change also temporarily disables the Enable MSBuild for Unity on 2019.3 and newer, while the team investigates #7239. As a workaround, customers wishing to acquire the DotNetWinRT package can do so via NuGet for Unity.\r\n\r\nThe final change is to update the minimum required version of DotNetWinRT from 0.5.1043 to 0.5.1044'"
561319086,7250,b'restore missing line in release notes',"b'The release notes were missing a line of text separating the 2.3.0 hyperlinks and describing the next list.\r\n\r\nThis change adds back ""This release of the Microsoft Mixed Reality Toolkit supports the following devices and platforms.""'"
561265028,7249,b'Update packages doc for 2.3',b'## Overview\r\n\r\nUpdates our package contents doc with the new state of things for 2.3.'
561260705,7248,b'Document known issue / workaround for msbuildforunity #133',b'This change documents an issue with MSBuild for Unity 0.9.1 that impacts MRTK and the workaround.'
561145696,7247,b'Spellcheck and formatting in 2.3 docs',b'## Overview\r\n\r\nQuick pass on formatting and spell check in our docs for 2.3.'
561109905,7246,b'Decoupling eye tracking data query from eye based gaze selection',"b'## Overview\r\n\r\nThe HandInteractionExamples scene aims to have behavior that matches the hololens 2 shell when used with the hololens 2 profile. However, when eye tracking is enabled (either in editor or on device), two issues occur:\r\n\r\nThe cursor in HandInteractionExamples follows the eyes instead of the head\r\nWhen a hand is present, the eye cursor will apppear whenever a hand is near a grabbable or touchable object\r\n\r\n## To reproduce\r\n\r\nEnable ""simulate eye position"" in MRTK input simulation profile\r\nRun HandInteractionExample scene\r\nBring hand near grabbable\r\nNotice that the cursor dot appears\r\n\r\n\r\n## Expected behavior\r\n\r\nCursor remains invisible and the cursor follows the head, not the eyes.\r\nEye tracking ray can be accessed via InputRayUtils.TryGetEyeRay\r\nIf the user wishes to have the cursor follow the gaze direction, he/she can enable this by having the gazeprovider use the eye gaze data, but by default it will use the head data.\r\n\r\nRelated to #6496\r\n\r\n## Changes\r\n\r\n- Enables eye ray query if eye tracking data available even if gaze not eye-based \r\n- Matches eye based and head gaze cursor state behavior\r\n\r\n- Fixes: #6541 \r\n- Fixes: #7220\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
560951359,7244,b'RequireComponent checker',"b""## Overview\r\nAdded a generic method that collects all MonoBehaviours on a GameObject that require a certain component and returns their names.\r\nchanged of ObjectManipulatorMigrationHandler shows its info box on the ManipulationHandlerComponent. It now shows an error and what component needs their RequireComponentAttribute removed, as well as disables the migrate button until that's done\r\n\r\n## Changes\r\n- Fixes: #7243"""
560851264,7242,"b""What's new add experimental features""","b'## Overview\r\nAdds several missing new experimental features to the ""what\'s new in 2.3"" page.\r\n\r\n## Changes\r\n- Fixes: #7241 \r\n\r\n'"
560703631,7240,b'Merge stabilization -> dev',b'## Overview\r\n\r\nMerge stabilization -> dev'
560696718,7238,b'Align our documentation guidelines to our own guidelines',"b'Our documentation contribution guideslines say to avoid using ""you"" yet the doc itself uses a ton of yous.\r\n\r\nI couldn\'t unsee it once I saw it, and had to at least make ourselves be consistent within the same file.'"
560685943,7237,b'Update the valid size of the glb buffers according to the spec',b'## Overview\r\n\r\nThe `GltfUtility` had an assert that the the bin chunk should be the same length as the JSON-defined buffer. The spec actually states that this can be up to 3 bytes different due to .glb padding.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5417'
560571539,7235,b'Update to the latest DotNetWinRT and MSBuild for Unity packages',"b'This change updates the minimum versions of DotNetWinRT and MSBuild for Unity to 0.5.1043 and 0.9.1-20200131.14, respectively.\r\n\r\nFixes build issue when using the .NET backend'"
560528905,7234,b'Add some docs around various HL2 remoting troubleshooting scenarios and getting help',"b'## Overview\r\n\r\nAdds some docs around\r\n\r\n1. Where to get help with MRTK\r\n1. How to troubleshoot HL2 remoting not working\r\n1. How to disable MSB4U / DotNetWinRT / HL2 remoting if needed\r\n\r\n## Changes\r\n- Helps with working around DotNetWinRT conflicts, like #7191 and #7094 \r\n'"
560028536,7231,b'Merge stabilization -> dev',b'## Overview\r\n\r\nMerge stabilization -> dev'
559997089,7230,"b'Improve package manifest update logic, add test cases'","b'This change improves the package manifest logic by making it better contained, more reusable and adds testability.\r\n\r\nFixes #7218'"
559950511,7229,b'Move DotNetAdapter into WMR.Shared',b'## Overview\r\n\r\nMoves the DotNetWinRT folder and csproj into the WMR.Shared folder\r\n\r\n## Changes\r\n- Part of #7003 '
559930368,7227,b'Add offset for correct palm rotation on XR SDK',"b""## Overview\r\n\r\nXR SDK doesn't provide a palm pose for HL2 articulated hands, so we synthesize one in MRTK.\r\nInstead of passing the grip pose in directly though, it needs a rotation offset to align with the expected coordinate system of other hand joints.\r\n\r\nAlso adds the new MSB4U-generated NuGet.config to the .gitignore.\r\n\r\nBefore this change: \r\n![image](https://user-images.githubusercontent.com/3580640/73778671-6b2fdf80-4740-11ea-903d-f6e13e8dbb54.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/3580640/73778684-6ff49380-4740-11ea-804f-b65126f6b1ea.png)\r\n\r\n\r\n## Changes\r\n- Part of #7003\r\n\r\n"""
559907146,7225,b'Device capability manifest support for uwp builds',b'## Overview\r\nAdjusted MRTK build scripts to allow callers of UWP build tools to specify arbitrary device capabilities\r\n'
559411043,7221,b'Check for null focusedWindow before showing notification',"b""Unity's documentation states that EditorApplication.focusedWindow is allowed to be null. Before referencing that value to call ShowNotification, MRTK should confirm that the value is valid."""
559379605,7217,"b'Update release notes, upgrade guide, roadmap and authors list for 2.3.0 release'","b'This change updates the release notes and upgrade guide with information on the changes and known issues in the upcoming MRTK 2.3.0 release.\r\n\r\nAdditionally, the roadmap has been updated to remove 2.3.0, add details on 2.4.0 and early looks at releases that are further out.\r\n\r\nThe list of authors has also been refreshed to add our newest contributors!\r\n\r\nFixes: #6922 and #7149'"
559359646,7216,b'Configure dialog will prompt if the version of MSBuild for Unity should be upgraded',"b'MRTK 2.2.0 shipped with a dependency on MSBuild for Unity 0.8.3. With MRTK 2.3.0, MSB4U needs to be upgraded to 0.9.1.\r\n\r\nThis change compares the current version and will prompt the customer to enable msbuild if it needs to be updated,'"
559354397,7215,b'Fix MixedRealityToolkit.Generated folder creation location',"b'## Overview\r\nThe MixedRealityToolkit.Generated folder was created twice. Once in the Foundation package, and again at the root of the Assets folder when a profile was cloned.\r\n\r\n![image](https://user-images.githubusercontent.com/53493796/73693494-301fa480-468b-11ea-85af-cfc783a609b1.png)\r\n\r\nThis fix removes the additional call to generate the MixedRealityToolkit.Generated within MixedRealityToolkitFiles to isolate a call to generate the folder in the MixedRealityProfileCloneWindow.\r\n\r\nThe MixedRealityToolkit.Generated folder now appears only at the root of the Assets folder.\r\n\r\n\r\n## Changes\r\n- Fixes: #7184\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
559323198,7214,b'Update the PokePointer to avoid unnecessary work in OnValidate.',"b""## Overview\r\nThere are still a few places that have unnecessary OnValidate calls, which per https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4899 and https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4202#issuecomment-495765433 isn't being used correctly in all cases.\r\n\r\nIn this case, the adjustment to some of the properties (i.e. touchableDistance/sceneQueryBufferSize) actually is fine, it's just the asserts that actually don't make sense.\r\n\r\nNevertheless this just moves things to Awake to be consistent with the way we've fixed some of other other OnValidate calls.\r\n\r\n## Changes\r\n- Fixes: #https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7213"""
559049758,7212,b'Fix possible follow object stuck behind player',"b'## Overview\r\nDiscovered a possible issue with the follow solver. Although it was hard to repro, it was possible to get the follow object stuck in the inverted leashing frustum. This fix uses the angle from `toTarget` to the reference yz plane for horizontal leashing, but uses the angle from `currentRefForward` and `toTarget` projected onto the reference yz plane for vertical leashing. This ensures that positions in the inverted leashing frustum are not valid leasing positions.'"
558420026,7211,b'Fix MRTK experience scale',"b'## Overview\r\n\r\nThis change fixes the setting and use of experience scale from the MRTK profile.\r\n\r\nThe XRDevice.disableInputPositioning is added to correctly enable use of the `Orientation-Only` experience scale value. \r\n\r\n## Changes\r\n- Fixes: #7105 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
558417864,7210,b'Update csproj and MSB4U dependency components',"b'## Overview\r\n\r\nUpdates the csproj to the new MSB4U format, as well as shuffling some gitignore entries around to prepare for the new root-level dependencies folder.'"
558417305,7209,b'Update to latest msbuild for unity',b'This change updates MSBuild for Unity from 0.8.3 to 0.9.1'
558369000,7208,b'Merge stabilization -> dev',b'## Overview\r\n\r\nMerge stabilization -> dev'
558351654,7207,b'Fix destroyimmediate for OnValidate() code path',"b'## Overview\r\nWhen in edit mode in editor, DestroyImmediate needs to be used except it cannot be called\r\n""during physics trigger/contact, animation event callbacks or OnValidate. ""\r\n\r\nThe MRTK system may be ""reset"" in the MRTK.OnValidate() if switching scenes or selecting a new profile in which case the old services and components will be destroyed. This triggers an error message in the editor console.\r\n\r\nThis change delays the DestroyImmediate call to avoid the scenario described above.\r\n\r\n## Changes\r\n- Fixes: #6584 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
558350469,7206,b'Cherry-pick pull request #7186 from wiwei/ignoremsb4ugenerated',b'## Overview\r\n\r\nUpdate the .gitignore to ignore the MSBuildForUnity generated csproj and sln files.'
558341693,7205,b'Update cached coordinate system whenever the underlying IntPtr changes',"b'## Overview\r\n\r\nInstead of assuming only one SpatialCoordinateSystem will ever exist, this change checks the `IntPtr`s to detect when the underlying root coordinate system has changed.\r\n\r\nThis helps scenarios like recentering, when a dev / user wants to realign the experience in a specific alignment. Can also help in scenarios when tracking is list and the original coordinate system is never regained. Also helps in the scenario when a new scene is loaded.\r\n\r\n## Changes\r\n- Part of #7003, fixes: #6974'"
558339866,7204,"b""Update foldouts that didn't have toggleOnLabelClick set to true""","b""## Overview\r\n\r\nThese were the only two `EditorGUILayout.Foldout`s that didn't have `toggleOnLabelClick` set to true. For user convenience, I've updated them."""
558312549,7203,b'Cherrypick #7199 and mark MSBuildForUnity as WSA-only',b'## Overview\r\n\r\nCherry-picks #7199 and additionally gates the MSBuildForUnity option behind the UWP build target.\r\nAlso added a scrollbar.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/73568824-044bb700-441e-11ea-9be1-f7f77eb23e52.png)\r\n\r\n## Changes\r\n- Helps with #6947 by disabling MSBuild for Unity import unless the UWP build target is selected. '
557858867,7200,b'Fix-up more usages of legacy XR APIs',"b""## Overview\r\n\r\nFound two more usages of legacy XR APIs. Since these are experimental features, I've opted to `#pragma` them.\r\n\r\nContinuation of #7193 """
557833558,7199,b'Harden MRTK Project Configurator',"b'## Overview\r\nThe project configurator unfortunately did not take into account the current build target platform. Thus, some setting checks were not valid/necessary. Example: If targeting Standalone, we would still check if the recommended UWP capabilities were set. \r\n\r\nThis change adds a buildtarget filter to the configuration getters.\r\n\r\nFurthermore, if the project has been appropriately configured as recommended, the Configuration window now just displays a confirmation message instead of the ""Hey we want to change stuff...but there is nothing to change""\r\n\r\n**Users should no longer be able to see this**\r\n![MRTK_Configurator](https://user-images.githubusercontent.com/25975362/73501598-4374fc00-437b-11ea-8f43-bca3802cd2c3.PNG)\r\n\r\n## Changes\r\n- Fixes: #7197 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
557828036,7198,b'Fix foundation unitypackage packaging: do not presume ar or xr plugins',"b'This change updates the MRTK CI unitypackage creation step to remove ar foundation and xr management related packages from the checked in manifest prior to package creation.\r\n\r\nThis was leading to #7192 due to the fact that, when creating unitypackage files, the project is opened into Unity and any methods decorated to run on project load (specifically the unityar configuration checker) are executed. Since MRTK has a checked in manifest containing arfoundation, this caused the unityar asmdf to incorrectly be modified during packaging.\r\n\r\nFixes: #7192\r\n\r\nSpecial thanks to @keveleigh for his assistance (read: donation) with the powershell commands'"
557823927,7196,b'Adds a python script that will figure out the percent/stats of experimental features.',"b""I was doing some digging into the relative stats and types of growth of code that we're introducing. In particular, we've done some work to introduce new experimental work under the experimental namespace.\r\n\r\nThe portion of the codebase with experimental stuff has naturally grown over time as we've added newer experimental features, and this is an interesting way to track that progression.\r\n"""
557822647,7195,b'Fix mappings for motion controllers on XR SDK',b'## Overview\r\n\r\nSome of the motion controller mappings were updated as part of shipping XR SDK.\r\n\r\n## Changes\r\n- Part of #7003 '
557800206,7194,b'Update GenericBaseEventData to not throw when selectedObject is invoked.',"b""## Overview\r\nAccessing the selectedObject on any field within any of the MRTK's event data (for example, DiagnosticSystemEventData or MixedRealityPointerEventData) will throw a NullReferenceException, because the majority (I think all) of these eventData objects get instantiated with a null EventSystem in their constructor (i.e. this is due to another startup mismatch where EventSystem.current is null when the input system is starting up).\r\n\r\nAs it turns out, passing a valid EventSystem doesn't seem to matter for the usage of ExecuteEvents in the rest of our stuff, so the simplest/safest option here is just to make sure that we don't end up NullRef-ing on the access of a specific field within our code. \r\n\r\nIt would have also been possible to change up our startup mechanics to wait for the camera's event system to initialize first, though this would be a scarier change.\r\n\r\nI think the main principle behind this fix is that a simple field access shouldn't throw a NullRef.\r\n\r\nNote that I considered exposing the selected pointer target here as well (see the issue linked) but I still have some qualms about attempting to squash more complex event data into base Unity concepts (i.e. we're really using BaseEventData only to work with ExecuteEvents).\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7187"""
557665014,7193,b'First stage of configurator updates for 2019.3 and handle legacy XR apis becoming obsolete',"b""## Overview\r\nWith the release of Unity 2019.3, some XR methods and properties MRTK uses for support of the legacy XR API have been marked obsolete.\r\n\r\nThis change updates the MRTK configurator dialog to label VR Support as Legacy XR as well as adding an early XRSettingsUtilities class to reduce the instances of pragmas to suppress warning 0618 (obsolete api).\r\n\r\nIn preparation for more of MRTK needing access to 2019.3's XR Management, the configuration checker from the XRSDK provider has been moved into the foundation's editor utilities folder and namespace.\r\n\r\nFinal change is to pre-expand the changes that will be made by the configurator in the UI, per customer feedback.\r\n\r\n## Changes\r\n- Fixes: #6918\r\n"""
557227832,7188,b'Tap to Place MRTK',"b""## Overview\r\nThe MRTK version of HoloToolkit's Tap to Place.  \r\n\r\nTracked Target Type: Head   |  Tracked Target Type: Controller Ray\r\n:-------------------------:|:-------------------------:\r\n![TapToPlaceHeadRaySmall2](https://user-images.githubusercontent.com/53493796/74188858-2aced680-4c04-11ea-9cfc-4e475a8d1129.gif)  |  ![TapToPlaceControllerRaySmall3](https://user-images.githubusercontent.com/53493796/74187813-27d2e680-4c02-11ea-8d37-eda801322988.gif)\r\n\r\nTap to Place enables easy placement of an object on a surface.  The default behavior for Tap to Place MRTK mirrors HoloToolkit's Tap to Place, but has some new additions. Tap to Place is a derivation of the Solver class.\r\n\r\nTo test, open the example scene **TapToPlaceExample** located in MixedRealityToolkit.Examples/Demos/Solvers/Scenes/.\r\n\r\n**How to use:**\r\n1. Create a new unity scene and add MRTK by selecting the **Mixed Reality Toolkit** menu -> **Add to Scene and Configure**\r\n2. Attach TapToPlace to a game object with a Collider\r\n   - A Solver Handler component will also get added with Tap to Place\r\n3. Press play, with the game object in focus, air tap/click the object.  \r\n   - The object will begin to follow the TrackedTargetType, which is the Head by default.  The object placement is based on whether or not the raycast hits a surface, this could be the spatial mesh or any object with a collider.  If there is a surface hit, place the object on the surface, if not, place at an adjustable default distance.\r\n4. To place the object, air tap/click again.  The placement click does not require the object to be in focus.\r\n\r\n**Changes from HoloToolkit to MRTK's Tap to Place:**\r\n- Added OnPlacingStarted and OnPlacingStopped events\r\n- Removed spatial awareness dependency\r\n- Added RotateAccordingToSurface and KeepOrientationVertical\r\n  - Enables object orientation adaption based on the normal of the surface hit\r\n\r\nThis work is based on @Troy-Ferrell's tap to place branch found [here](https://github.com/Troy-Ferrell/MixedRealityToolkit-Unity/tree/users/trferrel/tap-to-place).\r\n\r\n## Images/Gifs\r\n**Tap to Place Inspector**\r\n![image](https://user-images.githubusercontent.com/53493796/74887610-3622b000-5330-11ea-8dc7-20182f202f34.png)\r\n\r\n\r\nTap to Place Example Scene without walls (Default)   |  Tap to Place Example Scene with walls\r\n:-------------------------:|:-------------------------:\r\n![image](https://user-images.githubusercontent.com/53493796/74178823-12a18c00-4bf1-11ea-8b1c-760db9d60e5f.png)  |  ![image](https://user-images.githubusercontent.com/53493796/74178101-d7528d80-4bef-11ea-9c5d-e6e4ace87dc4.png)\r\n\r\n**VR Behavior:**\r\n![TapToPlaceVRSmall](https://user-images.githubusercontent.com/53493796/74178145-efc2a800-4bef-11ea-8276-c5102ee18131.gif)\r\n\r\n## Changes\r\n- Fixes: #4515 , #7190 \r\n\r\n## TO DO\r\n- ~~Update PR Description, add gifs~~\r\n- Add Documentation (Different PR)\r\n- Add Tests (Different PR)\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n\r\n\r\n"""
557191079,7186,b'Update the .gitignore to ignore the MSBuildForUnity generated csproj and sln files.',"b""If you clone the MRTK repo and follow the default steps (i.e. configurator -> accept default changes) you'll start getting msb4u csproj and meta files being built and showing up in your status/workspace. This heavily clutters things and makes command line git tricky to use (and other forms of git as well)."""
557102836,7185,b'Fix solverhandler for hand joint rotation',"b'## Overview\r\nCleans up solver code and adds documentation and example code for fixing hand joint targeting.\r\n\r\nThe hand joint has the forward vector go through the fingers which is generally not the desired vector when used with the solvers. To overcome this, the `AdditionalRotation` property can be used to fix the hand joint forward vector to actually point through the palm\r\n\r\n## Changes\r\n- Fixes: #7011 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
557050338,7183,b'Prerelease/2.3.0 stabilization -> dev',b'## Overview\r\n\r\nPrerelease/2.3.0 stabilization -> dev'
557026802,7181,b'Update the touch interactivity docs to be clearer about the type of NearInteractionTouch script needed',"b'## Overview\r\nThe docs today mention how to add touch interaction to 3D objects, but the \'3d objects\' one has a primary focus on objects that have a BoxCollider (or generally are only supposed to be touchable on one plane). While there are docs about how to do objects with arbitrary colliders, it\'s not super clear until you hit an issue (see the related issue) and read on to the ""NOTE""\r\n\r\ni.e. Someone who is adding this to an object with a SphereCollider, for example, will wonder why those buttons don\'t exist.\r\n\r\n## Changes\r\n- Fixes: #7177\r\n\r\n'"
557026779,7180,b'Gate TrackedPoseDriver behind package existing',"b""## Overview\r\n\r\nThis `#define` was added in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7083 but wasn't properly scoped.\r\n\r\n## Changes\r\n- Fixes: #7174\r\n"""
556593569,7176,b'MRTK Toolbox',"b""## Overview\r\nThe Mixed Reality Toolkit could use a toolbox! Inspired to make this after realizing that we had progress indicator prefabs available in MRTK....and I didn't even know they existed.\r\n\r\nThe purpose of this toolbox is similar to other frameworks such as WPF etc, one could easily drag and drop pre-built components from a toolbox. Drag'n'drop proved to be harder than I imagined so I opted to just use a grid of buttons for the short term.\r\n\r\n**Updated UI:**\r\n![image](https://user-images.githubusercontent.com/25975362/75413690-1ca6d880-58db-11ea-9b1f-f8237063d747.png)\r\n\r\n![Toolbox-Demo](https://user-images.githubusercontent.com/25975362/73321582-c9683a00-41f7-11ea-8bac-bf8efdb2fbe3.gif)\r\n\r\n![Toolbox-Demo-open](https://user-images.githubusercontent.com/25975362/73321589-ccfbc100-41f7-11ea-8f1a-89c4f68e12f7.gif)\r\n\r\n## Changes\r\n- Fixes: # TBD\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
556570466,7175,b'Fix prioritized layer mask usage in FocusProvider.GetPrioritizedHitResult',"b""## Overview\r\nThis change fixes use of the `FocusProvider.GetPrioritizedHitResult` method. The layer extension FindLayerListIndex can return -1 which in `GetPrioritizedHitResult` will be selected as it's always the MIN value.\r\n\r\nThis change rewrites the comparison method to handle the -1 cases and adds a new test: TestPrioritizedLayerMask\r\n\r\nAlso add a const int for the default spatial awareness layer to track across project\r\n\r\n## Changes\r\n- Fixes: #6481 \r\n\r\n## Verification\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
556403333,7173,b'Fixes an issue on the InscribedRectangle algorithm to have a proper initial search space for candidates.',"b""## Overview\r\nThere's been a latent bug in the InscribedRectangle algorithm since it was checked in a few years ago (https://github.com/microsoft/MixedRealityToolkit-Unity/commit/e40334655740a7adfd6fae0389cef9b3e854ca44) - in particular, the code that figures out the candidate search space (i.e. the (minx, miny), (maxx, maxy) bounds). With the current code, generally things will work out because the set of edges passed to the algorithm will generally be okay and won't degenerate.\r\n\r\nHowever, there are cases (where each pairwise point has at least one y coordinate that is super small) where the degenerancy ends up being really bad. In that case the incorrect usage of Math.min instead of Math.max causes us to flatten the search space substantially, in some cases dropping to the wrong location entirely.\r\n\r\nThe best case example (or worst case example) is in the included test case (i.e the degenerate sailboat) where the current code will trigger us to find a rectangle within the lower sliver, but the working algorithm will correctly find something within the sail.\r\n\r\n## Changes\r\n- Fixes: #7171\r\n"""
556311497,7172,b'fixed labels in object manipulator scene',b'They were still referring to primitive manipulator instead of object manipulator\r\n\r\n![image](https://user-images.githubusercontent.com/36998103/73281716-47244980-41e8-11ea-9467-ad36ff6d6b40.png)\r\n'
555942655,7169,b'Merge stabilization -> dev',b'## Overview\r\n\r\nMerge stabilization -> dev'
555907681,7168,b'Fix toggle colleciton inspector',"b'## Overview\r\nInteractableToggleCollectionInspector does not render public property OnSelectionEvents in a InteractableToggleCollection. Just adds serializedproperty field to inspector class\r\n\r\n**BEFORE**\r\n![image](https://user-images.githubusercontent.com/25975362/73224643-fc8aca80-411e-11ea-82c1-f85cbe120bb1.png)\r\n\r\n**AFTER**\r\n![image](https://user-images.githubusercontent.com/25975362/73224586-d36a3a00-411e-11ea-9480-f133dd8c1698.png)\r\n\r\n## Changes\r\n- Fixes: #7167 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
555900302,7166,b'Update input device management for XR SDK',"b'## Overview\r\n\r\nImproves input device management on HoloLens 1, where the names of each input device for each hand are the same.\r\n\r\nOverall, makes XR SDK device management more generic, instead of depending on a left / right hand.\r\n\r\n## Changes\r\n- Part of #7003 '"
555785638,7164,b'Update the base event system to handle per-event system cleanup properly',"b""## Overview\r\nThis change addresses a couple of issues, so let's talk about both of them:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/7126\r\nThis one actually is 99.999% addressed by this change: https://github.com/microsoft/MixedRealityToolkit-Unity/commit/9314eea6516450f86c20543460de80026786f62f. There still remains the slim possibility of bugs from ExecuteEvents.Execute slipping through (i.e. not catching an exceptions), but in reality the change here to add a try/catch around that shouldn't really be doing much. Nevertheless it's still a safeguard in case there's an issue there (so that our internal state doesn't get out of sync)\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/6975\r\nThis one is more interesting, and happens because of the mismatch between the global-ness of eventExecutionDepth and the local-ness of the postponed actions. The interesting part here was creating a min test that would validate it (I ended up not using the one linked in the issue if only because I wanted to make it very explicit how the input events were getting stacked).\r\n\r\nThe actual reason why this was an issue is explained in the test case that was added.\r\n\r\nThe reason why this happened was historical - I *believe* that this used to actually be a single global registration point (at which point the global/local distinction wasn't an issue, because you would only ever register with a single thing at a time). There was a change a little while ago that sharded event registration out - i.e. now you can register against individual systems without having to chokepoint on a single global point. Now the global vs local distinction actually leads to issues.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7126.\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6975."""
555706211,7162,b'Fixing DotNet api compatibility for Migration Tool',"b'## Overview\r\nMigration Tool is using the dynamic feature from DotNet 4.x making Projects based on DotNet Standard 2.0 api to throw CSharp assembly reference errors.\r\n\r\n## Changes\r\nChanged logic to use compatible api\r\n\r\n- Fixes: #7143 .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
555705124,7161,b'Merge prerelease/2.3.0_stabilization into mrtk_development',b''
555679347,7159,b'fixed captions / descriptions for object manipulator playground scene',b'## Overview\r\nchanged caption and description labels from PrimitiveManipulator to ObjectManipulator\r\n\r\n![image](https://user-images.githubusercontent.com/36998103/73191763-efbaa680-411f-11ea-88be-086e34cc004b.png)\r\n\r\n## Changes\r\n- Fixes wrong name displayed in ObjectManipulator playground scene\r\n\r\n'
555606537,7156,b'Merging Prerelease/2.3.0 stabilization into mrtk_development',b''
555017000,7153,b'Add HoloLens 1 hand definition to XR SDK support',b'## Overview\r\n\r\nAdds the GGVHand definition for XR SDK. This enables support for input on HoloLens 1.\r\n\r\n## Changes\r\n- Part of #7003\r\n'
554924991,7148,b'Add null check if no (or incorrect type) camera settings profile is set',"b""## Overview\r\n\r\nAdds a null check before trying to access the profile. It's not required to add a profile (for example, these features don't exist on HL1).\r\n\r\n## Changes\r\n- Fixes: #7095 """
554922776,7147,b'Add .EditMode to all edit mode test namespaces',"b'## Overview\r\n\r\nAdds .EditMode to all edit mode test namespaces, in order to differentiate between the `BoundsControlTests` classes in both the EditModeTests assembly and the PlayModeTests assembly.\r\n\r\n## Changes\r\n- Fixes: the current asset retargeting break:\r\n![image](https://user-images.githubusercontent.com/3580640/73099149-b4aa4000-3e9f-11ea-97f7-73e760148bac.png)'"
554900539,7146,b'Refactor out shared WMR articulated hand definition',"b'## Overview\r\n\r\nInitial hand / controller rework, by separating out some of the WMR articulated hand definitions from any specific Unity API set.\r\nThis is a first step toward separating hand / controller definitions from the APIs that supply their data, which will also help unblock bringing new features like https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6973 to HL2 and beyond.\r\n\r\n## Changes\r\n- Part of #7003, '"
554896706,7145,b'Ensure MRTK core systems support enable/disable correctly',"b'## Overview\r\n\r\nThis change adds an isEnabled property at the BaseCoreSystem layer to allow the MRTK core systems to check if they have been enabled or disabled and respond appropriately.\r\n\r\nMost of the larger code chunk changes are just moving Obsolete methods to the bottom of the class.\r\n\r\n**NOTE** This PR targets a separate branch than MRTK_Development. This is to break up the ""feature"" into multiple PRs and not impact MRTK_dev\r\n\r\n![toggle-diagnostics](https://user-images.githubusercontent.com/25975362/73100423-5e8acc00-3ea2-11ea-93fd-a2a951887da6.gif)\r\n\r\n```C#\r\n        if (isEnabled)\r\n            CoreServices.DiagnosticsSystem.Disable();\r\n        else\r\n            CoreServices.DiagnosticsSystem.Enable();\r\n```\r\n\r\n## Changes\r\n- Fixes: #5901 \r\nRelated: #7100\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n\r\n'"
554876506,7144,b'Fix platform directory separator char use to be platform agnostic',"b'## Overview\r\nRelated to PRs #7138 and #7131 \r\n\r\nThis is a systematic sweep across MRTK to find use of ""\\\\"" and replace with Path usage APIs such that the editor runtime of the current platform is used to determine how to format the directory separator chars.\r\n\r\n## Changes\r\n- Fixes: #7132\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
554788148,7142,b'Fix holographic remoting doc',"b'## Overview\r\nDocumentation for holographic remoting has a duplicated image.\r\n\r\n## Changes\r\nCorrecting one of the image links\r\n\r\n## Verification\r\n[Holographic remoting documentation](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Tools/HolographicRemoting.html?q=remote)\r\n\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
554758290,7141,"b'[GLTF-Import] Files get ignored, when File ending is not lower case'","b'## Overview\r\nWhen trying to import GLTF or GLB files with upper case File ending f.e. ""Video camera.GLB"" the GlbAssetImporter Script get\'s triggerd but inside GltfEditorImporter.OnImportGltfAsset the file get\'s ignored because the file ending is not lower case.'"
554529029,7139,b'TeleportSystem comment updates and minor updates',"b'## Overview\r\n\r\nWhile investigating #7100 and #6527, I cleaned up some documentation and some redundant variable assignments.\r\nThe larger investigation will take a bit longer, but I wanted to get these in now.'"
554503946,7138,"b""Mac fix: remove another hardcoded '\\' when creating mrtk auth-generated""","b'## Overview\r\nRemoves another hardcoded ""\\\\"" in file path when creating the MRTK autogenerated ""Generated"" folder used in MRTK\'s project preferences.\r\n\r\n## Changes\r\n- Fixes: #7109\r\n\r\nNeeds to be tested on Windows, fix verified only on Mac.\r\n\r\n## Notes\r\nI found a list of other potential hard coded strings we may want to fix in a follow-up:\r\n\r\n```\r\n$ find . -name *.cs -exec grep --with-filename -F \'""\\\\""\' {} \\;\r\n./MixedRealityToolkit.Examples/Demos/EyeTracking/General/Scripts/Utils/Utils.cs:                    goName = g.parent.name + ""\\\\"" + goName;\r\n./MixedRealityToolkit.Examples/Demos/EyeTracking/DemoVisualizer/Scripts/BasicInputLogger.cs:                    string fullPath = logRootFolder.Path + ""\\\\"" + LogDirectory;\r\n./MixedRealityToolkit.Examples/Demos/EyeTracking/DemoVisualizer/Scripts/BasicInputLogger.cs:                    string fullPath = logRootFolder.Path + ""\\\\"" + LogDirectory;\r\n./MixedRealityToolkit.Examples/Demos/Gltf/Scripts/TestGltfLoading.cs:            path = path.Replace(""/"", ""\\\\"");\r\n./MixedRealityToolkit.Examples/Demos/Gltf/Scripts/Editor/TestGltfLoadingEditor.cs:            path = path.Replace(""/"", ""\\\\"");\r\n./MixedRealityToolkit/Utilities/Gltf/Serialization/GltfUtility.cs:            int nameStart = uri.Replace(""\\\\"", ""/"").LastIndexOf(""/"", StringComparison.Ordinal) + 1;\r\n./MixedRealityToolkit/Utilities/Gltf/Serialization/Importers/GltfEditorImporter.cs:                        path = path.Replace(""\\\\"", ""/"").Replace(Application.dataPath, ""Assets"");\r\n./MixedRealityToolkit/Utilities/Gltf/Serialization/ConstructGltf.cs:                    var projectPath = path.Replace(""\\\\"", ""/"");\r\n./MixedRealityToolkit/Inspectors/PropertyDrawers/ScenePickPropertyDrawer.cs:                    Options[i + 1] = new GUIContent(scenes[i].path.Replace(""/"", ""\\\\""));\r\n./MixedRealityToolkit.Tools/MSBuild/Scripts/CSProjectInfo.cs:                    { ""<!--UNITY_EDITOR_INSTALL_FOLDER-->"", Path.GetDirectoryName(EditorApplication.applicationPath) + ""\\\\""},\r\n./MixedRealityToolkit.Tools/MSBuild/Scripts/Utilities.cs:            if (!thisAbsolute.EndsWith(""\\\\""))\r\n./MixedRealityToolkit.Tools/MSBuild/Scripts/Utilities.cs:                thisAbsolute = thisAbsolute + ""\\\\"";\r\n./MixedRealityToolkit.Tools/BuildWindow/BuildDeployWindow.cs:                            int lastBackslashIndex = fullBuildLocation.LastIndexOf(""\\\\"", StringComparison.Ordinal);\r\n```\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
554481027,7137,b'Add protections on Interactable called before being initialized',"b'## Overview\r\nWe have run into a few issues at times where consumers try to consume Interactable when it has not been initialized yet (i.e Awake has been called). Thus, their values get overriden or other issues arise. \r\n\r\nThis in particular happens when scene buttons are disabled by default and thus, they exist in the scene but have not been initialized. Awake is generally our earliest chance to initialize.\r\n\r\nThis change adds an ensure initialized layer on impacted public interface paths. If a consumer calls one of these methods on a GameObject that has not been activated via Awake(), the EnsureInitialized() will allow proper setting and configuration of the object without values being overwritten when activated.\r\n\r\nAdded new test `TestForceInitialize` and updated documentation for this PR\r\n\r\n## Changes\r\n- Fixes: #7125 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
554458921,7136,b'Prerelease/2.3.0 stabilization -> dev',b'## Overview\r\n\r\nPrerelease/2.3.0 stabilization -> dev'
554442022,7135,b'Add dataprovider helpers to CoreServices',"b'## Overview\r\n\r\nThis change makes it easier to access data providers registered to core services. In particular it adds explicit helpers for the input system and spatial awareness system.\r\n\r\nThis is done by adding helper methods to the CoreServices.cs class\r\n`GetInputSystemDataProvider<T>()`\r\n`GetSpatialAwarenessSystemDataProvider<T>()`\r\n`GetDataProvider<T>(service)`\r\n\r\nThis change also updates use of this pattern across the MRTK code base as well as updates the documentation to reflect this new, easier to use code path.\r\n\r\n## Changes\r\n- Fixes: #7134 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
554424638,7133,b'Fix WSA player build break',b'Fix CI build break (WSA player) by explicitly defining the tuple.'
554350744,7131,"b""Mac fix: Remove hardcoded '\\' in GetPackageCache""",b'This change fixes a \\ vs / path separator issue that was reported by @julenka when using MRTK on a Mac as part of #7109 \r\n\r\nThis is a companion change to #7122 \r\n'
554339500,7130,b'Add nuget docs to TOC and polish',"b'## Overview\r\nThe documentation page for nuget packaging with MRTK is not in the TOC and thus makes it more difficult to find.\r\n\r\n[MRTK Nuget packages](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/MRTKNuGetPackage.html)\r\n\r\nThis change also cleans up some polish for the MRTK nuget doc page. Furthermore, add some see also links to related articles in the ""Getting started with MRTK"" section.\r\n\r\n## Changes\r\n- Fixes: #7129 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
554253647,7128,b'Overlapping pressable buttons fix',"b'## Overview\r\nPressableButton does not trigger the ButtonPressed event when OnTouchCompleted is triggered by pointer getting closer to another NearInteractionTouchable\r\n\r\n## Expected Behavior\r\nWhen a second pressable button is slightly overlapping with the back of a pressable button, ButtonPressed event trigger should be guaranteed if the following happens:\r\n\r\n- Poke Pointer moves from the front of Button 1\r\n- Poke Pointer touches Button 1 triggering OnTouchStarted\r\n- Second button becomes the closest touchable to pointer in the same frame as pointer passes first button pressed plane or after\r\n- ButtonPressed event is triggered\r\n\r\n![pb_overlap_fix](https://user-images.githubusercontent.com/16922045/73000232-7443b700-3df8-11ea-8e4b-a7638ff596f9.png)\r\n\r\n## Changes\r\nChecking button state whenever OnTouchComplete is called to avoid missing a press when a second NearInteractionTouchable is closer to the pointer than the button\r\n- Fixes: #6968\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
554150479,7127,b'Fixed bounds control runtime example',"b""## Overview\r\nRuntime example demonstrates various runtime configurations / features of bounds control. This was carried over from BoundingBox but wasn't fully functional.\r\n\r\nChange includes:\r\n- Patching up scene to use the BoundsControl scripts\r\n- Replacing all occurrences of BoundingBox with BoundsControl\r\n- Fixed a bug when switching from a flattened state into a non flattened one\r\n- Removed unnecessary caching of renderer components in BoundsControl links which introduces another possible source of error rather than bringing us a performance win (the renderers are just used for changing the visibility flag or when changing the flatten mode)\r\n\r\n\r\nThis change has to go in after #7096 has been merged\r\n\r\n## Changes\r\n- Fixes: #6926 \r\n\r\n"""
553808137,7124,b'Add support for Windows Mixed Reality motion controllers and articulated hands for XR SDK',"b""## Overview\r\n\r\nThis adds controller definitions for XR SDK for WMR motion controllers and HL2 articulated hands.\r\nThere are still some incoming features on the Unity implementation side for HL2 articulated hands and pointing pose support. I'll keep things updated as that comes online.\r\n\r\n## Changes\r\n- Part of #7003 """
553720788,7122,b'Delay initialization of project configurator window',"b""## Overview\r\nThis change delays initialization of the MREditorSettings class till after the editor has been fully initialized. Before this change, the MREditorSettings class would start up once compiled (and thus it's static constructor executes. With this change, we wait till `EditorApplication.update` starts firing but only subscribe to this event for one event execution because we only need to init. \r\n\r\nNeed to do further testing concerning #7109 with this PR\r\n\r\n## Changes\r\n- Fixes: #7109 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
553380098,7118,b'Fix link in GettingStartedWithTheMRTK.md',b''
553238271,7115,b'Merge stabilization -> dev',b'## Overview\r\n\r\nMerge stabilization -> dev'
553223269,7113,b'Added conditions to MixedReality.Toolkit.targets for NuGet packages',"b'## Overview\r\nAdds conditions to MixedReality.Toolkit.targets to enable MSBuildForUnity support.\r\nWorked with @andreiborodin.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/7121\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
553158257,7111,b'Fix some Unity object null propagation and other warnings',b'## Overview\r\n\r\nFixes some warnings:\r\n\r\n1. Updates the capitalization convention of a private property to be PascalCase.\r\n1. Fixes several incorrect cases of Unity object null propagation.\r\n1. Fixes an unused field warning by updating the code to actually use it.'
553115238,7110,b'Allow Windows extensions to properly use DotNetWinRT (and some compiler warning fixes)',"b'## Overview\r\n\r\n1. Adds the DotNetWinRT namespace when valid\r\n2. Removes an unused field that was throwing a warning\r\n3. Fixes an incorrect null propagation on a Unity object\r\n\r\n## Changes\r\n- Fixes: #7108, part of #7003 '"
552871235,7103,b'NullCheck before accessing shader',"b""## Overview\r\nThe material accessed might not be assigned in the inspector. Furthermore, if the shader of the assignee is null, internally it will just be set to the MRKT Standard Shader so it's save to just check and not assign any if no material is found.\r\n\r\n## Changes\r\n- Fixes: #7102"""
552454650,7099,b'Added bounds control migration handler',b'## Overview\r\n-Allows upgrading from BoundingBox to BoundsControl including migration of AppBar that links to BoundingBox\r\n-Integrated BoundsControlMigrationHandler into MigrationToolTests to ensure gameobjects / prefabs/ scenes can be properly upgraded\r\n\r\n## Changes\r\n- Part of #5340 \r\n\r\nmerge only after PR #7096 is merged into mrtk_development\r\n\r\n'
552453470,7098,b'Adjusted bounds control example scene',b'example scene will now behave like the old bounding box example scene\r\n\r\n## Changes\r\nPart of: #5340 \r\n\r\n\r\nmerge only after PR #7096 is merged'
552452187,7097,b'Adjusted bounds control example scene',b'## Overview\r\nexample scene will now behave like the old bounding box example scene\r\n\r\n## Changes\r\n- Part of: #5340 \r\n\r\n'
552451298,7096,b'Added AppBar support for BoundsControl and fixed configuration bugs',b'## Overview\r\n- BoundsControl can now be used with AppBar:\r\n-- changed BoundingBox utility to be more generic -> now works on collider bounds instead of bounding box\r\n-- deprecated old bounding box specific methods in BoundingBoxUtility\r\n-- changed target of AppBar to work on any component implementing the new IBoundsTargetProvider interface (and made BoundingBox and BoundsControl implement it)\r\n\r\n- fixed nullptr access when modifying certain Bounds Control configuration properties in code\r\n- fixed handling of show wireframe flag\r\n- added property get / set to allow for code configured bounding box / bounds control \r\n\r\n- Added tests:\r\n-- Playmode test for manipulating a bounds control via AppBar\r\n-- Editmode test that makes sure all bounds control configuration values can be set without anything blowing up\r\n\r\n## Changes\r\n- Part of: #5340 - Make AppBar / Example scripts work with new BoundsControl\r\n\r\n'
551706523,7093,b'XR SDK input helpers',"b""## Overview\r\n\r\nBrings over a few helper classes for XR SDK input on Windows Mixed Reality, preparing for the full device manager.\r\n\r\n1. Add an extension for the Windows `SpatialInteractionSourceHandedness` enum to allow for easy conversion the the MRTK's enum.\r\n1. Add the XR SDK implementation from https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6989\r\n1. Rename the XR SDK configuration profile to better fit our name scheme\r\n\r\n## Changes\r\n- Part of #7003\r\n"""
551673635,7089,"b""Update input simulation so that it's not affected by TimeScale""","b""## Overview\r\nInput simulation today uses deltaTime, which means when the user specifies a [timeScale](https://docs.unity3d.com/ScriptReference/Time-timeScale.html), input simulation lags at the same rate. Ideally input should still be responsive, but the interactions (i.e. animations) triggered by input should be affected by time scale.\r\n\r\nNote that this doesn't affect the input simulation playback stack, which still uses deltaTime (so that if someone wants to play back things slower it's still an option)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7047"""
551600792,7088,b'Add initial XR SDK docs and reserialize some XR SDK assets',"b'## Overview\r\n\r\nAdd some initial ""getting started"" docs for XR SDK.\r\nAlso, reserializes some XR SDK assets that were updated while testing my steps.\r\nAlso, updates some minor formatting in other docs.\r\n\r\n## Changes\r\n- Part of #7003'"
551554024,7087,"b""Update the extension service creator to work when the extension package isn't installed""","b""## Overview\r\nThe extension service creator wizard today looks for the MixedRealityToolkit.Extensions folder in order to place its newly generated content. This fails when the default extensions package isn't installed, because the folder doesn't exist. Note that it's more than just the folder that needs to exist - each of the MRTK folders also require a 'sentinel' file to be placed in them, so that the MixedRealityToolkitFiles.cs code can find them even when they are placed in arbitrary folders/locations within the project (to support placing the MRTK at arbitrary locations). As a result, the code that tries to re-create the extensions folder doesn't work (i.e. it doesn't do the sentinel file creation).\r\n\r\nIn reality, because these are generated files, they should really go into the MixedRealityToolkit.Generated folder, so I've changed it to avoid the default/inbox Extensions folder. Now it shares the same general destination as other wizard generated assets.\r\n\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/7086"""
551115335,7084,b'Add some documentation on how to do pre-MRTK initialization runtime swapping to allow for platform-specific configuration to be loaded.',"b""## Overview\r\nIt's been a somewhat common ask about how to swap the MRTK profile at runtime BEFORE the MRTK has initialized. The most common usage of this is to say, build a single scene/app that can be deployed to a few different targets, and load a different profile based on the device (i.e. maybe I want to have certain extension systems on VR active, but not have them loaded on HoloLens).\r\n\r\nPeople have worked around this by having multiple scenes (and dynamically loading scenes based on the platform) or by building different binaries for each device (but this kinda sucks to have to do).\r\n\r\nThis provides guidance (or actually, just the code you have to copy paste into Unity and instructions on how to do so) to unblock this scenario.\r\n\r\n## Changes\r\n- Fixes: #7024"""
551097605,7083,b'Add TrackedPoseDriver for XR SDK at runtime',"b""## Overview\r\n\r\n1. Add `TrackedPoseDriver` for XR SDK at runtime\r\n1. Fix camera settings that didn't have a profile set\r\n1. Update `UnityARCameraSettings` to read from its cached data instead of the profile again\r\n\r\n## Changes\r\n- Part of #7003 """
550961208,7082,b'Unbork the CI build',"b'One of the CI builds (that builds both NuGet and Standalone/UWP/etc) is currently on the floor due to in invalid version that\'s being piped back from Unity\'s wsaUWPSDK:\r\n\r\nError MSB4086: A numeric comparison was attempted on ""$(TargetPlatformVersion)"" that evaluates to ""winv6.3"" instead of a number, in condition ""\'$(TargetPlatformVersion)\' >= \'10.0.11000.0\'"".\r\n\r\nwinv6.3 isn\'t actually an interesting (or valid) version number.\r\n\r\nHere\'s where things get a bit weird -\r\nThis issue actually started happening quite a while back (i.e. mid november). It\'s not actually an issue in the pipeline/code itself, because when we re-queue a really old commit, the same issue occurs\r\nIt\'s also not an issue with some specific build machines or different pool configurations (i.e. there successful CIs run on the same machines as the non-successful ones).\r\n\r\nI ended up narrowing it down to the UWP build step before the generation of SDK packages - i.e. if the UWP build step runs first, it looks like it (or something) is mutating the  wsaUWPSDK to \'winv6.3\', which then borks the Generate SDK Packages step (i.e. it causes the generation to have that invalid string).\r\n\r\nWhen I delete the UWP build step from the pipeline (as seen in the build/infrastructure branch), things work just fine.\r\n\r\nThe other thing here is I haven\'t been able to repro this locally (i.e. doing a UWP build followed by generation of SDK packages creates csproj files with correct target platform versions - I assume at this point that there is some specific configuration/SDK setup on the build machine that\'s leading to this situation (i.e. I\'ve matched Unity version, VS version, etc).\r\n\r\nI think that I\'d like to keep the build order (i.e. we should be building the standalone + running tests before generating packages, as in general we should only package something if we know it\'s actually good).\r\n\r\nTo this end I\'m updating this code to just be more resilient to this (i.e. not just an empty version, but also an invalid one in case someone set it to something incorrect).'"
550908363,7081,"b""Use local rotation as start value of InteractableRotationTheme's interpolation""","b'## Overview\r\nThis PR is following the issue I posted about the the InteractableRotationTheme behaviour. It replaces the usage of world rotation for the start value of the interpolation by local rotation, which seems to be more adapted.  \r\n\r\n## Changes\r\n- Fixes: #7080 \r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
550498313,7079,b'Update License.txt files to currently recommended verbiage',"b""## Overview\r\n\r\nOne benefit is that this removes the current year, so we don't go out of date!\r\n\r\nCopied from https://docs.opensource.microsoft.com/content/releasing/license.html (this may be locked down to Microsoft employees)."""
550491840,7078,b'Merge in build fix attempt to build/investigation',b'Nothing to see here...'
550488608,7077,b'Fix profile path location for UnityAR',b'## Overview\r\n\r\nThe path was changed in #7017.'
550434907,7075,b'Move existing WMR XR into XR2018 folder',"b'## Overview\r\n\r\nThis moves the existing code into its own specific folder, cleaning up the tree a bit within the WMR providers folder:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/72472456-71fab080-3799-11ea-8c78-95a6b6848262.png)\r\n\r\nThese APIs are deprecated in Unity 2019.3 and are removed in Unity 2020.\r\n\r\n## Changes\r\n- Part of #7003 \r\n'"
550421792,7074,b'Merge stabilization -> dev',b'## Overview\r\n\r\nMerge stabilization -> dev'
550406289,7073,b'Change MRTK version from 2.4 back to 2.3',b'## Overview\r\nChange the version for the prerelease branch back to 2.3 after it was changed to 2.4.'
550393619,7072,b'Update some asset menu paths',"b'## Overview\r\n\r\nStarted by noticing one was in its own path of `MixedRealityToolkit` vs `Mixed Reality Toolkit`, then started partitioning out some paths like our folder structure, to help structure the menus a bit more:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/72465948-e1b66e80-378c-11ea-9c9e-03faaca9ec19.png)\r\n'"
550384533,7071,b'Move AppBar summaries to be inline with the properties instead of the fields',"b'## Overview\r\n\r\nThe summaries were inline with the fields instead of the properties, causing them to be missed by docs generation and intellisense.'"
550327249,7070,b'Fixed prefabs in interactable scene',"b""## Overview\r\nMost elements in the interactable scene were not properly working (or triggering twice) on near interaction due to the use of TouchHandler.\r\nI've cleaned all the prefabs up now - removed duplicate components and touchhandler and added / configured PressableButton and PhysicalPressEventRouter\r\n\r\nButtons should now all animate, play sound and trigger correctly as well as radial set / checkbox / toggle and their unity ui equivalents\r\n\r\n## Changes\r\n- Fixes: #7048 \r\n\r\n![interactable_scene2](https://user-images.githubusercontent.com/36998103/72457296-30303100-37be-11ea-827f-d144a65348ff.gif)\r\n"""
550151190,7069,b'Prerelease/2.3.0 stabilization to dev',b'merge latest stabilization to dev'
550148590,7068,b'Guidance for adding documentation to experimental features',b'carried over changes from @julenka s PR #7056 \r\nchanged experimental features folder name\r\nalso added more information / highlighted menu entry for experimental features in guideline\r\n'
549962522,7067,b'One more test to see if it was the arm build or the x86 build being weird',"b""FWIW I think I'm doing this is a fairly inefficient way (I should have just updated the pipelines to have variables that let you turn off certain parts) but I'm almost done with this part (I think)."""
549915724,7066,b'Reenable some of the UWP builds to see if they were the reason for issues.',b''
549899368,7065,"b""Placeholder to test if it's the standalone build that's messing things up.""",b''
549891776,7064,b'Fix Unity version check and message',"b'If 2018.3 is allowed (as the message implies), conditional should be UNITY_2018_3_OR_NEWER, not UNITY_2018_4_OR_NEWER'"
549853992,7063,b'Investigation into some failing CI steps',"b""So in one of the CI builds, we're seeing a failure on a nuget restore step due to some corrupted version that is being passed in the .csprojs.\r\n\r\nLooking at the various machines/failures, I'm currently pretty stumped because:\r\n1) This started failing a long time ago, and even when I re-queue a commit from way before then, the build is still failing at the same step. However, all of our pipelines are configured in YAML (which means running an older build *should* take the corresponding older pipeline configuration as well)\r\n2) There is a similar pipeline that is succeeding, that is running on the same agent pool and same build machine (and same Unity version and other parameters) but is not failing. What the effffff.\r\n\r\nI'm trying this change (not actually submitting) to try to tease apart to find out if there's a specific step within here that is triggering some weirdness.\r\n\r\nDon't merge this or look at this - setting up a PR so that my trials and tribulations are public and so that I have a commit I can try to build against."""
549762506,7062,b'Remove outdated remark',"b""No longer limited to search depth of 3, since it's using `SearchOption.AllDirectories`, modified in a45ece4f8a19d88411a095d286668d34b3c2b71b"""
549743600,7061,"b'Add spatial awareness and camera system providers, as well as WMR-specific support for each'","b""## Overview\r\n\r\nAdds generic camera and spatial mesh providers for XR SDK, as well as WMR-specific providers that add additional platform functionality, such as custom spatial observation bounds types and the ability to render MRC from the PV camera.\r\n\r\n## Changes\r\n\r\n- Part of #7003\r\n\r\n## Followups\r\n\r\n* A followup PR will add support for configuring the `TrackedPoseDriver` (required by XR SDK for head tracking) the same way our Unity AR provider currently does it.\r\n* I'm also in the progress of refactoring the various `ConfigurationChecker` classes we now have, as they share a decent amount of code."""
549731007,7060,b'Small capitalization update in PS script',b'unity -> Unity'
549599467,7059,b'Added support for Unity UI when setting a gaze target in FocusProvider',"b""## Overview\r\nFixed gazetarget not properly set in focusprovider:\r\nPreviously the gaze target only took physics raycast into account which will only cover 3d meshes.\r\nAfter this change we will also take graphics raycast into account which includes Unity UI.\r\n\r\nThere's a test to verify that FocusProvider sets the gaze target correctly to a Unity UI element if it is in focus..\r\n\r\n## Changes\r\n- Fixes: #6343 \r\n\r\n\r\n## Verification\r\nFocusProvider test that checked that 3d objects as well as unity ui gameobjects can be focused / set as gazetargets."""
549268073,7057,b'Expose [SerializeField] private fields as properties',b'Expose `[SerializeField] private` fields as properties and update class to use property references instead of fields.\r\n\r\n## Overview\r\nThis change allows for the runtime creation and modification of the AppBar script.'
549201568,7056,b'Guidance for adding documentation to experimental features',"b""Don't complete this PR until #6943 is merged\r\n\r\n## Overview\r\nFollow up from #6943 to add guidelines for how to add docs for experimental features:\r\n\r\n\r\n## Changes\r\n- Fixes: #6156\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
549156244,7055,b'Merge stabilization -> dev',b'## Overview\r\n\r\nMerge stabilization -> dev'
549122836,7053,b'Cherrypick PR #7039 from wiwei/fastervalidation to stabilization',b'## Overview\r\n\r\nCherry-picks https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7039 to stabilization.'
549095119,7052,b'Remove UnityAR from foundation NuGet package',b'Removes UnityAR from the foundation package and does some packaging cleanup (ex: removing source) for the 2.3 release'
549093926,7051,"b""Filter out the ProjectSettings .asset files, which don't have a meta file""","b""## Overview\r\n\r\nRemoves a false positive when a ProjectSettings .asset file is updated. These files don't need meta files, so the meta file checker doesn't need to run.\r\n\r\n## Fixes\r\nhttps://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=8449&view=logs&j=c1841906-0df4-5516-e3c5-68840a78c082&t=b0b212c9-e072-56eb-4467-a1e6a0002cf3"""
549087396,7050,b'Use variable instead of explicit Unity version in pipelines',"b'## Overview\r\n\r\n#7038 introduced an issue with the unitypackage phase of CI. The unitypackage step used an explicit Unity version, so this updates it to use the defined variable instead.\r\n\r\n## Changes\r\n- Fixes: https://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=8445&view=logs&j=ae5f814d-d003-5afd-2125-fa0189ea8658&t=4f395fa6-3ac2-5732-7a27-84aace4a750b'"
549081021,7049,b'Change version number from 2.4 to 2.3 - NuGet Test Utilities package',"b'## Overview\r\nChanges version number from 2.4 to 2.3 for the NuGet Test Utilities PR: #7032 \r\n\r\n## Changes\r\n- Updates version number\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
548363313,7045,b'Added voice command information text to Visual Profiler',"b'## Overview\r\nMRTK Visual Profiler is enabled by default. A lot of the MRC(Mixed Reality Capture) videos show the profiler, even for the showcase situations. Adding information text \'Say ""Toggle Profiler\' to help people understand that it can be hidden with the voice command.\r\n\r\n## Changes\r\n- Fixes: #7044\r\n- Added voice command information label\r\n- Added ""MRTK Visual Profiler"" text. (for the viewers of videos who are not familiar with MRTK)\r\n- Small padding adjustments.\r\n\r\n<img width=""537"" alt=""2020-01-10 17_38_11-Unity 2018 4 12f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples"" src=""https://user-images.githubusercontent.com/13754172/72196925-c0423500-33d0-11ea-8818-cde22e30bbeb.png"">\r\n\r\n\r\n\r\n'"
548360629,7043,b'Cherry-pick #7027 to stabilization',b'## Overview\r\n\r\nCherry-picks https://github.com/microsoft/MixedRealityToolkit-Unity/pull/7027 to stabilization.'
548337732,7042,b'Patch both the existing WMR DLL and the shared DLL when packaging NuGet',b'## Overview\r\n\r\nFixes a MissingMethodException when running precompiled in the editor for WMR by patching in a correctly compiled WSA assembly instead of one compiled only for the editor.\r\n\r\n```\r\nMissingMethodException: Microsoft.MixedReality.Toolkit.WindowsMixedReality.IWindowsMixedRealityUtilitiesProvider Microsoft.MixedReality.Toolkit.WindowsMixedReality.WindowsMixedRealityUtilities.get_UtilitiesProvider()\r\nMicrosoft.MixedReality.Toolkit.BaseDataProviderAccessCoreSystem.Enable () (at <15332009bc6d452484cf8864bce900e4>:0)\r\nMicrosoft.MixedReality.Toolkit.Input.MixedRealityInputSystem.Enable () (at <0a9cec65677742e088c48dc0b5b98b15>:0)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit+<>c.<EnableAllServices>b__62_0 (Microsoft.MixedReality.Toolkit.IMixedRealityService service) (at <15332009bc6d452484cf8864bce900e4>:0)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit.ExecuteOnAllServicesInOrder (System.Action`1[T] execute) (at <15332009bc6d452484cf8864bce900e4>:0)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit.EnableAllServices () (at <15332009bc6d452484cf8864bce900e4>:0)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit.OnEnable () (at <15332009bc6d452484cf8864bce900e4>:0)\r\n```'
548333831,7041,b'Fix potential nullref in WindowsMixedRealityUtilities',"b""## Overview\r\n\r\nFixes a potential null ref, in cases where the utilities are being asked for platform data but we don't have a valid pointer. Specifically, this was being hit in the case where the root spatial coordinate system was being asked for, but we didn't have a headset attached and weren't running in the context of mixed reality, so none existed.\r\n\r\n@julenka this should fix the in-editor issue you were seeing."""
548327727,7040,b'Add XR SDK settings files to repo',"b""## Overview\r\n\r\nAdds several new scriptable assets from Unity for XR SDK.\r\nThese files are settings files specific to our repo's project, and won't need to be distributed as part of our packages. I'm including them to help with testing and validating the project on XR SDK.\r\n\r\nI've verified that these files don't prevent building or running on previous Unity versions, even when their scripts don't exist: \r\n\r\n![image](https://user-images.githubusercontent.com/3580640/72191723-ffb05780-33b7-11ea-850f-e88dc8c05cf5.png)\r\n\r\nand there's nothing in the console. PR validation and CI can double check :)\r\n\r\n## Changes\r\n- Part of #7003 """
548240122,7039,b'Speed up the PR validation pipeline',"b""If something is slow, how do you make it faster? You remove the parts that are slow!\r\n\r\nIn the case of PR validation, we currently build 3 different flavors:\r\nStandalone\r\nUWP arm\r\nUWP .NET\r\n\r\nUWP arm and UWP .NET take a long time (i.e. UWP arm is especially time consuming because it does the Unity build and the UWP build).\r\n\r\nThis change makes it so that PR validation will only build the Standalone build. The reasoning here:\r\n \r\n1. Standalone and .NET take about half the time of UWP ARM. https://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_pipeline/analytics/duration?definitionId=16&contextType=build. Just getting rid of one wouldn't actually make a huge dent on time.\r\n2. Looking at historical failures, I don't see a lot of cases where failures actually happened in the UWP section of the world: https://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_pipeline/analytics/stageawareoutcome?definitionId=16&contextType=build. Otherwise, we would have seen actual failures in the UWP arm part of the pipeline (i.e. standalone would have succeeded, and then you'd see a failure in the build UWP part)\r\n\r\nThe impact of this change would be reduce mrtk_pr runtimes by ~33 minutes on average\r\n\r\nNote that the rolling CI build will still build all three (there still needs to be a full validation that happens once per checkin).\r\n\r\nNote (also as mentioned in the YAML file) that if we see this leading to problems down the line (i.e. we're changing a bunch of UWP/WMR APIs and need coverage then for PR validation) then obviously at that time we can re-enable it. It's just right now, the data suggests that Standalone is representative/exhaustive enough to catch the common issues.\r\n"""
548239904,7038,b'Update pipelines to run Unity 2018.4 instead of Unity 2018.3',b'## Overview\r\n\r\nThis updates our pipelines to run on the installed Unity 2018.4 versions instead of 2018.3.\r\n\r\nInternal machines have Unity 2018.4.12 and external machines have Unity 2018.4.6.\r\n\r\nI also added a README to remind myself which pipelines were used where.'
548230105,7037,b'Add clipping primitives to 3DTextShader',"b'## Overview\r\nThe MRTK Standard and TextMeshPro shaders both supported clipping but the 3DTextShader did not. This change enables that capability and refactors common code to a new MRTKShaderUtils.cginc file to be shared across MRTK shaders. \r\n\r\nThis feature will be useful for the scrolling list with TextMesh components and other clipping scenarios on labels.\r\n\r\n![clippingprimitives](https://user-images.githubusercontent.com/25975362/72177267-2c06ac80-3395-11ea-83cb-66c99be2b826.gif)\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/72176486-4cce0280-3393-11ea-995e-2e84157664ae.png)\r\n\r\n## Changes\r\n- Fixes: #7025 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
548220034,7036,b'Remove Unity 2019 setup step for daily pipeline',b'## Overview\r\n\r\nThis step should no longer be needed as of https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6803.\r\n\r\n## Changes\r\n- Fixes: https://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=8370&view=logs&j=395b8dd1-5a42-590e-1659-561ec70a9c4f&t=168ebb0b-5f88-5487-98a7-f2d4ecd635b4'
548124964,7035,b'added tests to bounds control',b'## Overview\r\nadded 4 tests:\r\n- far interaction scale\r\n- near interaction rotate\r\n- far interaction rotate\r\n- GGV rotate\r\n\r\n## Changes\r\n- Fixes: #6284 \r\n\r\n'
547814620,7033,b'Merge stabilization -> dev',"b'## Overview\r\n\r\nPeriodic merge of stabilization to dev.\r\n\r\nThis one was a manual merge, due to incrementing the UnityAR version number in dev in #7002 but removing it in stabilization in #7017.'"
547798541,7032,b'Moving testing utilities to separate directory for NuGet package',"b'## Overview\r\nThis change moves the utilities used for tests into a separate directory.\r\n\r\nThe reason for this change is to create a separate nuget package for customers that just want the testing utilities without the MRTK specific tests.\r\n\r\n## Changes\r\nOld structure for the tests directory:\r\n![image](https://user-images.githubusercontent.com/53493796/72115709-d8488480-32fc-11ea-962b-0d29c6a8a5e1.png)\r\n\r\nNew structure for the tests directory:\r\n![image](https://user-images.githubusercontent.com/53493796/72115586-712ad000-32fc-11ea-9264-e81268017605.png)\r\n\r\n\r\nThe following files have been moved to a new directory TestUtilities: \r\n- TestUtilities.cs \r\n- PlayModeTestUtilities.cs \r\n- TestHand.cs\r\n\r\nNotes:\r\n- An asmdef and a nuspec have also been added to TestUtilities.  The PlayModeTests and EditModeTests asmdefs have been modified to depend on TestUtilities.\r\n- Changed methods in PlayModeTestUtilities from internal to public. \r\n- Made TestHand a public class instead of internal\r\n- Removed the base Microsoft.MixedReality.Toolkit.Tests asmdef, kept the nuspec\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
547796097,7031,b'Fix nuget build of unityar (had old folder name)',b'#7017 forgot to update the folder path in the unityar nuspec file. this change fixes and unblocks the ci build.'
547779303,7028,b'Remove UnityAr nuspec',b'#7017 missed removing the nuspec and nuspec.meta files that are no longer required now that UnityAr is in the foundation package.\r\n\r\nThis change cleans up the files.\r\n\r\nRan packaging script locally to confirm no separate package was created.'
547751259,7027,b'Update our PR validation pipeline to support running only on changed files',"b'The code and docs validation that we have today will check every single file in the repo, even though on a PR by PR basis, the vast majority of things have never changed. Generally speaking it takes 2-3 minutes to run code validation (i.e. loading every line, running our validators, etc).\r\n\r\nThis isn\'t super optimal because we\'re doing work that isn\'t necessary for PRs, where we ideally want to have a decently quick turnaround.\r\n\r\nWhat this change does it update the code and docs validation scripts to only inspect the files that were actually changed as part of the given PR. This makes times go like:\r\n\r\nFrom ~2-3 minutes (before this change):\r\nhttps://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_pipeline/analytics/duration?definitionId=16&contextType=build\r\n\r\nTo 3 seconds (with this change):\r\nhttps://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=8343&view=logs&j=c1841906-0df4-5516-e3c5-68840a78c082&t=b0b212c9-e072-56eb-4467-a1e6a0002cf3\r\n\r\nI think the hope is that going forward, this information can also be useful for scoping other things (i.e. as tests take a larger and larger portion of the pipeline, we could only run an affected set of tests based on the changed file)\r\n\r\nAlso, I ended up going through a few different iterations of how to do this, before landing on this. I\'m pasting my trials and tribulations here:\r\n\r\n## Learnings around the Git Changes files. \r\n\r\nThe overall motivation for this change is around making sure that only validate the code/docs changes for the things that actually changed, rather than the entire repo each time. Code validation is roughly 3 minutes (can be anywhere from 1-5 from what I remember), so it\xe2\x80\x99s not a LONG time, but also not a short time. \r\n\r\nGiven that most changes involve maybe 10 files, this should really take order of seconds or milliseconds, rather than minutes. \r\n\r\nOur ongoing CI pipeline should still check everything (as a quality check against the entire repo as-is). \r\n\r\nFirst attempt ended being trying to use the Github API \xe2\x80\x93 this hit a number of hurdles which were interesting to talk about: \r\n\r\nThe default github API is kinda weird to use with REST directly, given that you have to do some basic authentication string munging (i.e. doing a Base64String encoding of the user/token combination, and doing a few magic incantations (even if they are somewhat well know what you have to do). I ended up trying to use some other libraries for github APIs, but decided against it because they would end up loading arbitrary code from other modules.\r\n\r\nI then ended up doing that stuff with REST directly (sidestepping those pip install/PSModule install questions), but hit some trickiness with getting the github token piped as a secret.\r\n\r\nDo not pass a token as a command line parameter in you pipelines. https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/github?view=azure-devops&tabs=yaml#important-security-considerations I was wondering why it didn\xe2\x80\x99t work, and found out that any variable that is a secret will simply never actually be evaluated UNLESS it\xe2\x80\x99s used to set an environment variable. \r\n\r\nEven as an environment variable, it still didn\xe2\x80\x99t work \xe2\x80\x93 because the idea here is that we\xe2\x80\x99d want to run this validation on PRs (basically, forks of this repo), this is explicitly disallowed by default security settings and for good reason (see the link above for that good reason). I didn\xe2\x80\x99t want to check this because it would set a dangerous precedent for us going forward, and would open us up for any arbitrary PR to start dumping our secret values (bad!) \r\n\r\nI ended up finding another way of doing this via git command line directly \xe2\x80\x93 that is, using git diff \xe2\x80\x93names-only, you can look at the names of files that were changed between two different commits \xe2\x80\x93 in the case of PR runs, it\xe2\x80\x99s actually awesome that there are some things already there for you: \r\n \r\nSystem.PullRequest.TargetBranch \r\nSystem.PullRequest.PullRequestNumber \r\n \r\nThis, plus the fact that git checkout on azure pipelines will create a branch that is called pull/PULL_REQUEST_NUMBER/merge, lets you do something like git diff \xe2\x80\x93name-only pull/1234/merge origin/mrtk_development \r\n \r\nUnfortunately it wasn\xe2\x80\x99t quite this simple \xe2\x80\x93 note that by default the git checkout ONLY checks out that branch, so the build machine doesn\xe2\x80\x99t know about the \xe2\x80\x98mrtk_development\xe2\x80\x99 branch \xe2\x80\x93 I had to augment the script to also fetch that specific branch. \r\n\r\nLastly, once all that was done, I ran into interesting issues with Boolean functions in powershell \xe2\x80\x93 i.e. something super obvious in hindsight, but odd at the time. In particular, I assumed that this (correct): \r\n\r\n```powershell\r\n(IsCSharp -Filename $changedFile) -and (CheckScript $changedFile) \r\n```\r\n\r\nWas the same as this (incorrect): \r\n\r\n```powershell\r\nIsCSharp -Filename $changedFile -and CheckScript $changedFile \r\n```\r\n\r\nIt turns out that -and was being passed as a parameter to IsCSharp, instead of using -and as an actual delimiter. \r\n\r\nAlso, this could have been prevented with some better standards around powershell functions structure. Consider the following code: \r\n\r\n```powershell\r\nfunction\xe2\x80\xafTest-Advanced \r\n{ \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf[CmdletBinding()] \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xafParam( \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf[Parameter(Mandatory=$true)] \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf[string]\xe2\x80\xaf$Name \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf) \r\n\r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xafProcess \r\n \xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf{ \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xafWrite-Host\xe2\x80\xaf(""Hello\xe2\x80\xaf""\xe2\x80\xaf+\xe2\x80\xaf$Name\xe2\x80\xaf+\xe2\x80\xaf""!"") \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf} \r\n} \r\n\r\nfunction\xe2\x80\xafTest-Basic \r\n{ \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xafParam( \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf[Parameter(Mandatory=$true)] \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf[string]\xe2\x80\xaf$Name \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf) \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xafWrite-Host\xe2\x80\xaf(""Hello\xe2\x80\xaf""\xe2\x80\xaf+\xe2\x80\xaf$Name\xe2\x80\xaf+\xe2\x80\xaf""!"") \r\n} \r\n\r\nfunction\xe2\x80\xafTest-Other( \r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf[string]$Name \r\n)\xe2\x80\xaf{ \r\n\r\n\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xaf\xe2\x80\xafWrite-Host\xe2\x80\xaf(""Hello\xe2\x80\xaf""\xe2\x80\xaf+\xe2\x80\xaf$Name\xe2\x80\xaf+\xe2\x80\xaf""!"") \r\n} \r\n\r\nif\xe2\x80\xaf(Test-Other\xe2\x80\xaf-Name\xe2\x80\xaf""World""\xe2\x80\xaf-and\xe2\x80\xaf""something"")\xe2\x80\xaf{ \r\n} \r\n\r\nif\xe2\x80\xaf(Test-Basic\xe2\x80\xaf-Name\xe2\x80\xaf""World""\xe2\x80\xaf-and\xe2\x80\xaf""something"")\xe2\x80\xaf{ \r\n} \r\n\r\nif\xe2\x80\xaf(Test-Advanced\xe2\x80\xaf-Name\xe2\x80\xaf""World""\xe2\x80\xaf-and\xe2\x80\xaf""something"")\xe2\x80\xaf{ \r\n} \r\n```\r\n\r\nTest-Other is what we have today, and that one doesn\xe2\x80\x99t actually complain about the extra \xe2\x80\x98-and\xe2\x80\x99 \xe2\x80\x93 it just eats in. However, the other function definition forms (i.e. the ones that actually specify params) will actually error out (like you would actually expect) when seeing the -and. \r\n\r\nBecause of this, I ended up looking for some other powershell coding guidelines/styles that could have helped, and ended up finding PoshCode. If I had used that type of function structure/definition, I could have avoided that terrible issue I hit all together.  \r\n\r\n## Other notes\r\n\r\nThe inner loop for these changes were fairly difficult, because in order to validate that they would run correctly on Azure DevOps, I had to spin up a placeholder PR (https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6916) and had to run /azp run mrtk_pr on each attempt. Note that it\'s not possible AFAIK to schedule adhoc runs on Azure DevOps to test these changes BECAUSE these changes make use of these parameters:\r\n\r\n```\r\n$(System.PullRequest.PullRequestNumber)\r\n$(System.PullRequest.TargetBranch)\r\n```\r\n\r\nWhich are only populated when the build is done as a result of a Github <-> Azure DevOps request'"
547747816,7026,"b""Remove staging package from CI's packaging steps""","b'#7017 moved the UnityAR provider into Providers and removed the staging folder. It neglected, however, to update the packaging portion of the CI pipeline.\r\n\r\nThis change addresses that issue.'"
547682840,7023,b'Line pointer line fix',"b'## Overview\r\n#6863 and #6822 when merged together left an issue open with the managed MixedRealityLineRenderer component.\r\n\r\nThe pointer cache change made it such that pointers are re-used.\r\nThe line refactor change eliminated the redundant MRLineRenderer classes.\r\n\r\nThe LinePointer class had a bug in it whereby it disabled MRLineRenderers OnDisable() but did not re-enable on OnEnable(). Before these PRs, this was not evident to the user because there were redundant MRLineRenderers and not all were registered with the LinePointer class.\r\n\r\n**Changes:**\r\nThis fix ensures correct lifecycle management by the LinePointer class\r\n\r\n**BEFORE**\r\n![linepointer-before](https://user-images.githubusercontent.com/25975362/72099278-2b0e4600-32d5-11ea-9d2b-8ba66d37d53f.gif)\r\n\r\n**AFTER**\r\n![linepointer-after](https://user-images.githubusercontent.com/25975362/72099288-2e093680-32d5-11ea-9ead-9fff9531aa10.gif)\r\n\r\n## Changes\r\n- Fixes: #7005 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
547182983,7018,b'Allow input simulation service to work outside of editor',"b'## Overview\r\nThis change allow for the input simulation service to be used outside of editor play mode such as in standalone builds. \r\n\r\nTo enable this, the following was done\r\n- Moved JSON articulated hand pose data into SImulatedArticulatedHandPoses.cs file as const string to avoid MRTKFiles loading and resouces loading dependencies\r\n- Moved InputSimulationService and InputPlaybackService from editor asdmef to InputSimulation asmdef\r\n- Created migration code path in SystemType.cs to handle InputSimulationService reference values stored in MRTK profiles (such as MRTKInputSystemProfile) to new destination (i.e non-editor asmdef)\r\n- Reserialized all profile assets in MRTK repo\r\n- ""prettied"" JSON files with articulated hand poses\r\n- Added menu item for Reserialize Selection with other similar entries\r\n- Made InputSimulation.asmdef target all platforms\r\n\r\n**NOTE**\r\nThis new feature capability is not enabled by default. The default profiles in MRTK still have the runtime platform setting for input simulation service to not include windows standalone. This is to ensure people aren\'t broken for those that don\'t want this as keys and mouse input will route to the simulation service.\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/72045028-0e88f400-326a-11ea-8693-44e47266b9b8.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #3692 #6966 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
547165542,7017,b'moves UnityAr folder from Staging to Providers',"b'With the merging of #6891 and #6998, there is no longer a need for the Staging folder. This change moves the UnityAr folder from MixedRealityToolkit.Staging to its proper MixedRealityToolkit.Providers parent.'"
547165180,7016,b'PokePointer ignore colliders that are not visible',"b""## Overview\r\nFollowing up from #6870 this change additionally allows the **poke pointer** to ignore colliders that are not in the visual FOV.\r\n\r\nSince this is a follow up to #6870 which is going into 2.3, I decided to request this go into stabilization. However, this is a risk that this could regress some touch behavior so I would be open to us moving this back to 2.4. Curious to hear other's opinions. I have verified in HandInteractionExample scene and have added tests.\r\n\r\n## Changes\r\n- Partial fix #6634. There is one more edge case for line pointers.\r\n- Adds `Camera.IsInFovConeCached` as camera extension to ensure efficient checking of whether colliders are in FOV (as these computations run each frame).\r\n- Adds field to PokePointer specifying whether to ignore colliders that are not in visual FOV. True by default.\r\n- Add tests to verify that poke pointers correctly ignore colliders that aren't in FOV.\r\n\r\n## Verification\r\n- Verified that tests pass\r\n- Tested in HandInteractionExample scene\r\n\r\n\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
547126203,7015,b'Updating the coding guidelines to recommend PoshStyle as the PowerShell coding guidelines',"b""Our PowerShell code is currently using some random style (which is somewhat consistent within the files themselves, but are not necessarily consistent across files). This change updates our coding guidelines to recommend/reference the PoshCode style.\r\n\r\nI've looked at some other resources both internal to Microsoft and externally visible as well (i.e. https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/strongly-encouraged-development-guidelines?view=powershell-6, and https://docs.microsoft.com/en-us/contribute/powershell/powershell-style-code) however none were as extensive as PoshCode."""
547125533,7014,b'Add step on building NuGet package',"b'## Overview\r\nAbout this last issue : #6993 \r\n\r\nWith the aim to make the documentation more intuitive i propose a small addition :\r\nAdd a last step to explicitly ask to the user to press the save button when they add a new NugGet source on properties.\r\n\r\n## Changes\r\n- Add a ""Save"" step\r\n- Add an indicative image\r\n'"
547116733,7013,"b'Add XR SDK folder, asmdef, and boundary implementation'","b""## Overview\r\n\r\nAdds the provider folder for XR SDK. Also adds a static subsystem helper script and the boundary implementation.\r\nAs part of the boundary implementation, the shared code between the existing implementation and the XR SDK implementation was refactored out into a base class.\r\n\r\n## Changes\r\n\r\n- Part of #7003\r\n\r\n## Verification\r\n\r\nTest in Unity 2019.3.\r\nYou'll need to add a few packages via the package manager:\r\n1. XR Management\r\n2. Windows Mixed Reality XR"""
547086282,7012,b'Fix Solvers tracking pointers as target transforms',"b'## Overview\r\nDue to pointer cache PR #6822 , pointers no longer necessarily destroy themselves after source lost. SolverHandler though would detach itself from a controller/hand once the transform was destroyed. This is actually incorrect since custom pointers could have had `DestroyOnSourceLost` false. \r\n\r\nThis change tracks, for the controller ray tracked target type, the associated line pointer being used for the transform and whether it is still being tracked or not. If it is not null, but not being tracked, then we detach and refresh for a new transform.\r\n\r\nAlso clean up some of the code and comments around solvers/pointers related files. In particular, ControllerPointerSynchronizer did two incorrect things\r\n1) It would allow setting of Handedness although really this was always the read value from the assigned controller\r\n2) It would pre-append the handedness onto the gameobject name. However, since we re-use gameobjects of pointers now (they are just deactivated), the name will always pre-append onto itself making strings such as ""Left_Right_Left_Left_DefaultControllerPointer""\r\n\r\nUpdated SolverTests to validate values on SolverHandler for switching hands and tracked target types.\r\n\r\n## Changes\r\n- Fixes: #7029\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
547044070,7010,b'Fix Line Renderer editor error',"b'## Overview\r\nThe `MixedRealityLineRenderer` class executes always and thus in edit mode. The control has the capability to fade in the line via a coroutine executed in OnEnable. The problem is the control directly modifies the gradient value and executes in edit mode. So the fade overwrites any defaults or changing of the gradient in edit mode\r\n\r\nAlso some clean up on related classes with comments etc\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
547041889,7009,b'Prerelease/2.3.0 stabilization -> dev',b'## Overview\r\n\r\nPeriodic merge of prerelease/2.3.0 stabilization -> dev'
547002954,7008,b'Migrate #6987 to 2.3',b'## Overview\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/6987\r\n\r\n## Changes\r\n- Fixes: #6986'
546978427,7007,b'Fixed errors when highlighting constraints',b'Highlighting constraints in the ObjectManipulatorInspector was causing errors to be logged and the highlighter could end up highlighting random windows. I found this fix online.'
546972204,7006,b'Added MigrationWindow Tool',"b'## Overview\r\n When SDK components get obsolete and need upgrade, large projects might require an upgrade tool to allow user controlled migration.\r\n\r\nThis is an experimental tool that allows user to select Scene Objects, entire scenes of Full Project for Migration of specific Components.\r\n\r\n![Screenshot (8)](https://user-images.githubusercontent.com/16922045/71988245-6f430d00-3227-11ea-94b4-a5bc0ca2d772.png)\r\n\r\nAfter selecting Migration Handler implementation, user can navigate through three mode tabs:\r\n\r\n- Object Mode:  Allows user to Drag and Drop Game Objects or Prefabs where hierarchy have components to be Migrated.\r\n\r\n- Scene Mode: Allows user to Drag and Drop Scene Assets containing objects to be Migrated.\r\n\r\n- Project Mode: Pressing ""Migrate"" button will update migration specific component for all Prefabs and Scenes in the Project.\r\n\r\n\r\n## Changes\r\n- Fixes: #6911\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
546570925,7004,b'fully apply extension service attribute to hand physics service',"b'Fixes #6999\r\n\r\nThe hand physics extension service was not fully utilizing the extension service attribute. Notably, it was missing:\r\n- Friendly name\r\n- Default profile\r\n- Profile folder root\r\n\r\nAdditionally, #6988 / #6133 introduced a new property to the attribute that informs the inspector as to whether or not the service requires a profile to properly function. This has been set to true for hand physics.\r\n\r\nVerified:\r\n- When selecting the service type, the profile and friendly name values are properly set\r\n- When manually setting the profile to null, the appropriate warning message appears in the inspector'"
546547708,7002,b'update development branch to 2.4.0',"b'Now that 2.3.0 has branched for stabilization, the development branch becomes 2.4.0'"
546544467,7001,b'GLTF scene fixes',"b'## Overview\r\nThis change addresses some of the issues with GLTF loading utility in MRTK. Note this is more of a stop gap then holistic fixes.\r\n\r\nThe GLTF utility is a weird feature because documentation and testing are mostly non-existent. There are also reliable alternatives such as [UnityGLTF](https://github.com/KhronosGroup/UnityGLTF).\r\n\r\n**Change:**\r\nAdded AsyncCoroutineRunner to both gltf/glb scenes to work on device\r\nAdded index array access guards to the GltfConversions.cs file\r\n\r\n## Changes\r\n- Fixes: #6955\r\nRelated:  #6983 #6362\r\n\r\n## Verification\r\nVerified on HL2 device \r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
546544242,7000,b'Add prerelease/2.3.0 to the docs version dropdown',b'## Overview\r\n\r\nAdd prerelease/2.3.0 to the docs version dropdown'
546542283,6998,b'Fix UnityAR namespaces in Unity 2019.3',"b'## Overview\r\n\r\nIn Unity 2019, some existing types no longer exist in-engine and are instead distributed via the package manager. The `UnityEngine.SpatialTracking` namespace is one of them.\r\n\r\nAlso, this simplifies `#if (UNITY_IOS || UNITY_ANDROID) && ARFOUNDATION_PRESENT` checks down to just `#if ARFOUNDATION_PRESENT`, since we only set that define for specific platforms to begin with.'"
546375686,6995,b'added missing experimental entry for box display of bounds control',"b""## Overview\r\nmoved menu entry for box display of bounds control into experimental section - Must've forgotten to save that file when pushing my changes yesterday\r\n\r\n"""
546198505,6992,b'Added code to handle different mapping sizes',"b""## Overview\r\nThe current implementation for updating the controller mappings expects the currently active and newly aquired maps to be of the exact same size.\r\nThis PR handles size differences and tries to keep mapped actions active. Besides all the info a mapping can have, it ignores the ID because it's pretty much the index in the array, in order, which means inserting mappings breaks action transfer.\r\n\r\n## Changes\r\n- Fixes: #6991"""
546017057,6990,b'BaseSpatialMeshObserver and MixedRealityOptimizeUtils updates for XR SDK',"b""## Overview\r\n\r\n1. Moves `BaseSpatialMeshObserver`'s `ReadProfile()` from constructor to `Initialize` to better support profile resetting.\r\n1. Update `MixedRealityOptimizeUtils` typo and `#ifdef` to support versions past 2019.\r\n1. Update `InputMappingAxisUtility` to use a static method in `MixedRealityOptimizeUtils` for loading the input settings asset."""
546016054,6989,b'Refactor WMRUtilities to support Unity legacy XR and XR SDK',"b'## Overview\r\nRefactors the static `WindowsMixedRealityUtilities` to take in a provider, which can be set in platform-specific data providers. This allows the utilities class to be called generically regardless of the Unity XR backend.\r\n\r\n## Changes\r\n- Fixes: the current build break when using DotNetWinRT.'"
545995730,6988,b'Complete PR #6133',"b""This change resolves the merge conflicts present in #6133. These conflicts were a result of recent changes to the profile inspectors of systems utilizing data providers.\r\n\r\nAs part of this change, the message that was present in each impacted profile inspector has been moved to the base class' RenderDataProviderEntry method.\r\n\r\nReplaces #6133 \r\n"""
545986904,6987,b'Fix no OnPointerDragged events from poke pointers',"b'## Overview\r\nPoke pointers were not generating OnPointerDragged events when dragging on a NearInteractionTouchable. This change ensures that poke pointers raise OnPointerDragged events, and adds a test to verify that OnPointerDragged events get raised on NearInteractionTouchables.\r\n\r\n## Changes\r\n- Fixes: #6986\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
545874138,6984,b'Update dependency graph',"b'## Overview\r\nAdds .playable extension to assets to consider also fixed issue where folder-like assets were retrieved as dependencies, resulting in ""empty"" results being showed (actual values were like Resources/unity_builtin) etc.\r\n\r\n![EmptyDependencies](https://user-images.githubusercontent.com/25975362/71839575-57755880-3070-11ea-9502-93e6d771fb8a.PNG)\r\n\r\n## Changes\r\n- Fixes: #6980 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
545855102,6983,b'MixedRealityStandard shader - Manage round corners independently',"b""## Overview\r\nThe code attached to this pull request enhance the MixedRealityStandard shader and its custom GUI. \r\nIt is simply adding to the 'Round Corners' feature the ability to manage each corner separately.\r\n\r\n![Annotation 2020-01-06 164845](https://user-images.githubusercontent.com/49749106/71836044-66312f00-30b3-11ea-9498-573c95a08d43.png)\r\n\r\n![Annotation 2020-01-06 164846](https://user-images.githubusercontent.com/49749106/71836049-6a5d4c80-30b3-11ea-8838-61974e4ed1ad.png)\r\n\r\n![Annotation 2020-01-06 164716](https://user-images.githubusercontent.com/49749106/71829306-9cb37d80-30a4-11ea-9b42-d4ae833b664c.png)\r\n\r\n## Know issues:\r\n-  The editor tooltip over Corners Radius is not showing\r\n- I would rather constrain anyhow the user to use values between 0 and 0.5 directly in the editor (One slider by corner? Custom editor?) instead of clamping the vectors values within the shader code. \r\n\r\n## Verification\r\n\r\nYou can easily review the feature by tweaking the material values in the MaterialGallery scene.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
545805611,6982,b'Fixed proximity calculations in proximityeffect and added tests',b'## Overview\r\n- fixed problem when proximity ranges are bigger than interaction radius of near pointers\r\n- fixed wrong calculation of proximity range around the box to determine which pointers are in range\r\n- changed comparisons for proximity to less-equal\r\n- wrote tests that confirm \r\n-- default behavior proximity effect switched off\r\n-- default configuration on proximity effect is working when switched on\r\n-- user configured confirmation during runtime is applied and working\r\n\r\n- minor: moved all bounds control scriptable configs into experimental menu entries\r\n\r\n## Changes\r\n- Fixes: #5340 - task: add tests for proximity effect\r\n'
545796060,6981,b'Add experimental follow solver',"b'## Overview\r\nFollows the specification outlined in #5713. Uses behaviours from #5611 and #5159 to create a new solver that makes an object follow a tracked target like near menus in HoloLens 2. This required some minor bug fixes. This is only an experimental feature as of yet, so we can iron out bugs for a few weeks and then graduate the fully featured solver with docs.\r\n\r\n![follow_solver](https://user-images.githubusercontent.com/47415945/71829132-d338ca80-309b-11ea-97eb-9afc341a21ed.gif)\r\n\r\n## Changes\r\n- Fixes: #5713.\r\n- Adds the `Follow` solver.\r\n  - `Follow` solver keeps the reference object within certain user defined bounds. \r\n  - Angular bounds can be specified which keep the object within a rectangular pyramid originating at the camera.\r\n    - Users can disable these angular bounds and the object will be maintained at a fixed angle from the camera.\r\n  - Distance bounds can be specified which keep the object within a min and max distance from the camera.\r\n  - Provides a number of options to specify when and how to orient the reference object.\r\n  - Added capability to face an additional user defined transform.\r\n- Adds inspector for the follow solver to make it easier to configure and understand.\r\n- Adds some tests for the follow solver for the basic behaviours of orientation, distance clamping and angular clamping.\r\n'"
545196578,6979,b'Reclaim outstandingMeshObject on suspend',"b'## Overview\r\nAs was pointed out by @darax in #6809, the Windows Mixed Reality spatial observer was not properly handling cases where there was an outstandingMeshObject at the time Suspend is called.\r\n\r\nThis change reclaims and nulls the outstandingMeshObject in Suspend().\r\n\r\nTested on a HoloLens using the SpatialAwareness demo scene and was successfully able to resume from over 20 suspends.\r\n\r\n## Changes\r\n- Fixes: #6809, fixes #6425,\r\n'"
545173313,6978,b'SpatialMeshObserver refactor',"b""## Overview\r\n\r\nPart of XR SDK implementation, to reduce duplicated code. Also a bit of an extension of #6919 \r\n\r\n Moves some duplicated code down into `BaseSpatialObserver`, and also creates a new `BaseSpatialMeshObserver` to contain some duplicated mesh observer code.\r\n\r\nObserver lifecycle can now be automatically handled by overriding `BaseSpatialObserver`'s `CreateObserver` and `CleanupObserver` methods.\r\n\r\nFilled in a few missing docs along the way as well.\r\n\r\nIn-app behavior should be unchanged, other than `SpatialObjectMeshObserver`, where `CleanupObserver` no longer calls `ClearObservations`, to match the WMR implementation and separate the two cleanup methods.\r\n\r\nThe one outstanding thing I'll need to better address for the XR SDK implementation is `TrianglesPerCubicMeter`. Our native WMR implementation uses this value, but XR SDK takes in a 0.0 to 1.0 value instead. That will come in a follow-up PR, possibly at the same time as the XR SDK implementation."""
545172240,6977,b'Update fov tests and code',"b'## Overview\r\nUpdates IsInFOV camera extension to more performant code path. Also ingests IsInFOVCone code from Julia\'s PR into the MathUtilities for re-use.\r\n\r\nThe use of WorldToViewportPoint from Unity shows better performance than the MathUtilities.IsInFOV\r\n\r\n![Perf-Comparison](https://user-images.githubusercontent.com/25975362/71750409-20fbcb80-2e2d-11ea-8932-bf3a8fa5cb9f.PNG)\r\n\r\nFurthermore, isInFOVCone is more performant than that which is expected\r\n![Perf-Comparison2](https://user-images.githubusercontent.com/25975362/71750429-3244d800-2e2d-11ea-896f-dbb5613651c3.PNG)\r\n\r\n\r\n## Changes\r\n- Fixes: #6950 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n\r\n```csharp\r\nusing Microsoft.MixedReality.Toolkit;\r\nusing Microsoft.MixedReality.Toolkit.Utilities;\r\nusing Unity.Profiling;\r\nusing UnityEngine;\r\n\r\npublic class TestFOV : MonoBehaviour\r\n{\r\n    public int NumOfObjects = 1000;\r\n\r\n    private Renderer[] myObjects;\r\n    private Collider[] myColliders;\r\n\r\n    private static ProfilerMarker isInFOV_PerfMarker = new ProfilerMarker(""TestFOV.IsInFOV"");\r\n    private static ProfilerMarker isInFOVCone_PerfMarker = new ProfilerMarker(""TestFOV.IsInFOVCone"");\r\n    private static ProfilerMarker IsVisibleFrom_PerfMarker = new ProfilerMarker(""TestFOV.IsVisibleRegular"");\r\n    private static ProfilerMarker IsVisibleCone_PerfMarker = new ProfilerMarker(""TestFOV.IsVisibleCone"");\r\n\r\n    private void Start()\r\n    {\r\n        CameraCache.Main.transform.position = -Vector3.forward * 15.0f;\r\n\r\n        myObjects = new Renderer[NumOfObjects];\r\n        myColliders = new Collider[NumOfObjects];\r\n\r\n        for (int i = 0; i < NumOfObjects; i++)\r\n        {\r\n            var cube = GameObject.CreatePrimitive(PrimitiveType.Cube);\r\n            cube.transform.localScale = Vector3.one * 0.1f;\r\n            cube.transform.position = Random.insideUnitSphere * Random.Range(0.1f, 3.0f);\r\n\r\n            myObjects[i] = cube.GetComponent<Renderer>();\r\n            myColliders[i] = cube.GetComponent<Collider>();\r\n        }\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        var cam = CameraCache.Main;\r\n\r\n        using (isInFOV_PerfMarker.Auto())\r\n        {\r\n            for (int i = 0; i < NumOfObjects; i++)\r\n            {\r\n                bool isInFOV = cam.IsInFOV(myObjects[i].transform.position);\r\n                //myObjects[i].material.color = isInFOV ? Color.green : Color.red;\r\n            }\r\n        }\r\n\r\n        using (isInFOVCone_PerfMarker.Auto())\r\n        {\r\n            for (int i = 0; i < NumOfObjects; i++)\r\n            {\r\n                bool isInFOV = cam.IsInFOVCone(myObjects[i].transform.position, 0);\r\n                myObjects[i].material.color = isInFOV ? Color.green : Color.red;\r\n            }\r\n        }\r\n\r\n        using (IsVisibleFrom_PerfMarker.Auto())\r\n        {\r\n            for (int i = 0; i < NumOfObjects; i++)\r\n            {\r\n                cam.IsVisible(myColliders[i]);\r\n            }\r\n        }\r\n\r\n        using (IsVisibleCone_PerfMarker.Auto())\r\n        {\r\n            for (int i = 0; i < NumOfObjects; i++)\r\n            {\r\n                cam.IsVisibleCone(myColliders[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n'"
545141901,6976,b'Fix poke pointer layer mask',"b'## Overview\r\nAdds missing check to validate unity ui touchables are in valid layer mask\r\n\r\n## Changes\r\n- Fixes: #6967 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
544697863,6970,b'Migrate changes from #6961',"b'## Overview\r\n\r\nMigrates some changes from https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6961, since that PR has merge conflicts after #6964.'"
544694282,6969,b'Remove if UNITY_EDITOR check',b'## Overview\r\nGridObjectCollection was throwing errors on device because assets were being loaded without the asset version in runtime but saved with the asset version. See comment from @gilbdev  in #6938. Thank you for the help!\r\n\r\n## Changes\r\n- Fixes: #6938\r\n'
544241654,6965,b'Update GettingStartedWithTheMRTK.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
544234903,6964,b'Update README_BoundingBox.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
544201525,6963,b'Slider thumb visual orientation',"b'## Overview\r\n\r\nThis is a PR that include changes on PinchSlider discussed on [this](https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6858#pullrequestreview-334735135)\r\n\r\nOn the PinchSlider component while user updates the axis, the track visuals and the tick marks change orientation accordingly but not the thumb visual though. \r\n\r\nThese changes help solve this problem.\r\nThe PinchSlider has a new property ThumbVisuals that reference the thumb visual.\r\nWhen user updates the SliderAxis value then the ThumbVisuals  will rotate accordingly to much the orientation of the axis. It will reset its local position as well in order to not keep any unwanted local position set for previous SliderAxis value.\r\n\r\nFor example:\r\n\r\nIf the axis is set to Y axis then this is the visual\r\n\r\n![y](https://user-images.githubusercontent.com/42405657/71687606-37a31380-2d96-11ea-84b5-ffe2368f8b57.JPG)\r\n\r\nWith the above changes, if user sets the axis to x axis, then this is the result\r\n\r\n![x](https://user-images.githubusercontent.com/42405657/71687640-4984b680-2d96-11ea-9f59-7732a91edd1b.JPG)\r\n\r\nAs you can see the Thumb Visuals are rotated to match the orientation of the SliderAxis\r\n\r\nBefore this change, if axis was set to x axis and then updated to be on Y axis, that would be the result\r\n\r\n![ywrong](https://user-images.githubusercontent.com/42405657/71687729-6f11c000-2d96-11ea-8bc6-fbd41eb4bb5a.JPG)\r\n\r\nAs you notice the Thumb is rotated wrong.\r\n\r\nChanges\r\n- Fixes: # .\r\n\r\nAdded a new property on PinchSlider.cs that is called ThumbVisuals. Added functionality to reset the thumbVisuals position and set its localrotation when the axis is updated.\r\nUpdated the prefab to have the property assigned\r\nUpdated the scene SliderExample that include sliders\r\nUpdated the scene HandInteractionExamples that include sliders\r\nThe change in the two scenes above is on the orientation and position of gameobjects under the Slider parent gameobjects.\r\nUpdated the documentation\r\nUpdated the slider tests\r\n\r\nConcerns\r\n-HandMenuLayoutExample has a HandMenuSlider prefab with a PinchSlider.cs. \r\nThe refs of track visuals, tick marks and thumb visuals arent set in this prefab\r\nWhich means that when user updates the axis then the visuals dont change.\r\nShould I updated this prefab as well?\r\n-Not sure if there are any other scenes with pinch sliders that I didnt find and update. but if there are, its possible to be broken after this change. If you know of any, please let me know\r\n\r\n\r\n'"
544046068,6961,b'Update README_BoundingBox.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
544045250,6960,b'Improvements to Hand Constraint juicyness',"b""# Overview\r\n\r\nAddition of useHybridHandRotation for HandConstraintPalmUp.\r\n- This adds an additional check in HandConstraintPalmUp's hand validation function, which changes the Rotation behavior if useHybridHandRotation is enabled.\r\n\r\nAdded better behavior for LookAtTrackedObject.\r\n- This introduces a branch in CalculateProjectedSafeZoneRay of the HandConstraint base class, which computes the SafeZone Direction ray according to the rotation of the SolverHandler.TargetTransform, rather than exclusively from the head gaze.\r\n\r\nThe end result can be seen [here](https://twitter.com/prvncher/status/1211795961510584327)\r\n\r\nWith useHybridHandRotation enabled:\r\nThe menu matches your hand rotation until your palm and head gaze reach a threshold angle, which activates a different rotation behavior that makes the menu look at the camera instead.\r\n\r\nIn other words, it flips open and closed \r\n![gUBsKIae9V](https://user-images.githubusercontent.com/7420990/71605193-198aa880-2b35-11ea-92be-3d208075ffca.gif)\r\n"""
544035785,6959,b'Update OptimizeWindow.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
544023135,6958,b'Update DependencyWindow.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
541945152,6952,b'Fix Z-fighting issue on TMProDropdown example',"b'## Overview\r\nWhen TMPro Dropdown generates the dropdown list, it gets created on a new Canvas, and is placed on top of the existing Canvas by the default. Placing the canvas on top of an existing one (with the same z value can cause z-fighting which is what we are seeing here. \r\n\r\n## Changes\r\n- Fixes: #6592 \r\n- Remove redundant example scenes\r\n- Move the TMProDropdown gameobject to a different z depth to avoid  z fighting. \r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
541153151,6949,b'Add missing namespace to IMixedRealityMouseDeviceManager',b'## Overview\r\nThis file is missing its namespace. Adds `namespace Microsoft.MixedReality.Toolkit.Input`.'
541133200,6948,b'Update README_MRTKStandardShader.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
540666305,6945,b'Move some WMR components into a shared assembly',"b""## Overview\r\nI moved any existing WMR components that didn't have direct dependencies on a `UnityEngine.*.WSA` namespace into their own assemblies. This will allow us to reduce duplication in some of these non-Unity, WMR platform features as additional pipelines come online."""
540614298,6944,b'Update README_Interactable.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
540608447,6943,b'Hand Coach UX',"b'## Overview\r\n![MRTK_UX_HandCoach_Main](https://user-images.githubusercontent.com/13754172/71214553-80bd7880-226a-11ea-908f-b3b21b7ce271.jpg)\r\nHand Coach is 3D modeled hand which is triggered when the system does not detect the user\xe2\x80\x99s hands. This is implemented as a \xe2\x80\x9cteaching\xe2\x80\x9d component that helps guide the user when the gesture has not been taught. If users have not done the specified gesture for a period, the hands will loop with a delay. Hand Coach could be used to represent pressing a button or picking up a hologram.   \r\n\r\n## Documentation\r\nhttps://github.com/grayclee/MixedRealityToolkit-Unity/blob/\'HandCoachUX\'/Assets/MixedRealityToolkit.SDK/Experimental/HandCoach/README_HandCoach.md\r\n\r\n## Screenshots\r\n![MRTK_HandCoach2](https://user-images.githubusercontent.com/13754172/71214534-6edbd580-226a-11ea-8aab-28e169ff14fa.gif)\r\n<img width=""1114"" alt=""2019-12-18 15_26_50-Unity 2018 4 12f1 Personal -  PREVIEW PACKAGES IN USE  - HandCoachExample unity "" src=""https://user-images.githubusercontent.com/13754172/71214743-c2e6ba00-226a-11ea-9b7a-0a462f2f044b.png"">\r\n<img width=""972"" alt=""2019-12-18 15_23_27-Unity 2018 4 12f1 Personal -  PREVIEW PACKAGES IN USE  - HandCoachExample unity "" src=""https://user-images.githubusercontent.com/13754172/71214733-ba8e7f00-226a-11ea-8fdc-62b0d8773931.png"">\r\n\r\n\r\n## Changes\r\n- Fixes: #4569\r\n\r\n\r\n'"
540523670,6942,b'Update UsingARFoundation.md',"b'According to the newer instructions for ARCore setup for Unity 2019, it now requires addition of HLAPI package as well as the XR Legacy Input Helper in Package Manager. This resolved : CS0234 Spatial Tracking not exist in UnityEngine .\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
540380519,6940,b'added possibility to set target of bounds control / bounding box in code',b'## Overview\r\n- added possibility to set target of bounding box / bounds control in code\r\n- added tests to verify target setting works - test will create cube without bounding box / bounds control and create another empty gameobject unrelated to the cube that has bounding box / bounds control attached - target of bounding box / bounds control is set to cube gameobject and correct behavior is verified through near interaction scaling\r\n- fixed bug where rigroot was attached to bounds control gameobject instead of target gameobject \r\n\r\n\r\n\r\n## Changes\r\n- Fixes: #5992 \r\n'
540197724,6939,"b'Ensure controller during controller creation, before source detected'","b'## Overview\r\nThe only class currently using a visualizer is the WindowsMixedRealityController, which creates the visual on first UpdateController call, which is too late for the source detected call.\r\nThis change makes the call to EnsureControllerModel public and calls it during controller creation.\r\nFurthermore, that call only used an InteractionSource only, so I refined the parameter, which was also required to do the call on creation.\r\n\r\n## Changes\r\n- Fixes: #6937.'"
539999656,6935,b'Minor doc clarifications about upgrading to a new version of MRTK',"b""## Overview\r\n1. Minor wording changes in the description of how to upgrade from one version of MRTK to another.  These are spread across the various MRTK versions.\r\n2. Add a note in the Upgrading documentation, hinting to the reader that these instructions are in the release notes.\r\nWe may actually want to refactor even more, but this quick change is probably easier to get into the next MRTK release.\r\n\r\n## Changes\r\n- Fixes: #6883 \r\n\r\n## Verification\r\nIt's not necessary to execute/test anything, since this is a documentation change.  Just look through the diffs."""
539818431,6932,b'Update README_Button.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
539632987,6931,b'Fix slate zooming for GGV Pointer',"b'## Overview\r\nSlate Zooming in/out not working properly on Hololens 1. Issue can be replicated on the Editor. \r\n\r\nBefore:\r\n![slate_zoom_before](https://user-images.githubusercontent.com/16922045/71083774-b63f6480-218b-11ea-9d4a-5682a6329a30.gif)\r\n\r\nAfter:\r\n![slate_zoom_after](https://user-images.githubusercontent.com/16922045/71083805-cbb48e80-218b-11ea-957d-f42c1c74b0a9.gif)\r\n\r\n\r\n\r\n## Changes\r\n- Touching point logic was modified on HandInteractionPanZoom.cs to account for both Right Hand and Left Hand controllers having same pointer/slate touch position on GGV.\r\n\r\n- Fixes: #6371  .\r\n\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
539195736,6925,b'Added Basic Dialog for compatibility with old MixedRealityToolkit',"b'## Overview\r\nThis pull request adds a Dialog component to simplify the porting of existing applications that use old version of Mixed Reality Toolkit.\r\n\r\nThis Dialog use the same logic of previous one, but it is updated with the new interfaces and the new graphical style. The Dialog includes two different templates: single button and two buttons. \r\n\r\nThe texts of the Dialog and of the buttons are customizable by code when the Dialog is instantiated. \r\n\r\n![dialog-example](https://user-images.githubusercontent.com/9990522/71910554-65130700-3172-11ea-8c63-3cccadca0b4a.gif)\r\n'"
539134817,6924,b'Merging Feature/ux refactor into mrtk_development',b'## Overview\r\nincludes the new experimental BoundsControl and ObjectManipulator\r\n\r\nCode was already reviewed when going into ux_refactor'
539042974,6923,b'Remove migration warning and button',"b""## Overview\r\nRemoving migration warning and button for `ManipulationHandler` as we don't yet want to advise people to make the switch.\r\n"""
538786238,6919,b'Fix spatial observer and validate with tests',"b'## Overview\r\nWMRObserver had a bug where it would auto-start itself in enable() even when set to manual start.\r\n\r\nThis change move the functionality to BaseObjectObserver and creates some tests for basic observer functionality.\r\n\r\n## Changes\r\n- Fixes: #6908 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
538735123,6917,b'Scrolling Object Collection - Example scene polish',"b'## Overview\r\nUpdated the example scene\r\n- Replaced individual button\'s backplate with a shared backplate\r\n- Updated 3D object list example with various 3D objects\r\n- Scene layout polish.\r\n\r\n## Changes\r\n- Part of #6637 \r\n\r\n## Screenshots\r\n![MRTK_ScrollingObjectCollection2](https://user-images.githubusercontent.com/13754172/70951054-32646b80-2017-11ea-9c01-cbc1b609972d.gif)\r\n<img width=""801"" alt=""2019-12-16 15_17_18-Unity 2018 4 12f1 Personal -  PREVIEW PACKAGES IN USE  - ScrollingObjectCollecti"" src=""https://user-images.githubusercontent.com/13754172/70951059-38f2e300-2017-11ea-8347-d376aa6280f4.png"">\r\n\r\n'"
538701370,6916,b'Placeholder PR to test some code validation speed improvements',"b""I'm issuing this PR that shouldn't be merged, so that I can test out some pipeline changes to speed up the code validation part.\r\n\r\nIn particular, this uses the Github API to get the list of change files in a PR, so that we can scope our code validation and docs validation to only modified files. This should hopefully speed up the code/docs validation from ~5 minutes to a few seconds.\r\n\r\nDo not merge or look at this change please!"""
538605530,6915,b'Consolidate the definition of the test hand numSteps.',"b'There are a number of numSteps declarations across the test codebase - this particular field controls how many frames/yields occur in order to move a hand from one location from another. In most cases, this can be a much smaller number (to achieve faster test execution), and ideally we shouldn\'t be duply-defining this value across the various tests that we own.\r\n\r\nThis change is based pretty much entirely on: https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5358. That change has been open for a long time and I wanted to close out stale PRs, but I saw that it had some good value (so I didn\'t want to just get rid of it entirely without bringing it in).\r\n\r\nI ended up adopting parts of that, with a few changes:\r\n\r\n1. The editor and batch mode default frames in the same - I think a goal here is to ensure that the running mechanics of in-editor and batch mode should be as close as possible, so I actually wasn\'t a super big fan of having them diverge by default.\r\n1. Recognizing that there should still be some affordance to slow down tests to view them more easily or debug what\'s going on, added a ""UseSlowHand"" global static that tests could set to temporarily engage slow test hand mode.\r\n1. Some tests required more frames to be successful, so a small portion of tests (i.e. one slate zoom test, one manip handler test) were left at their current frame counter.'"
538584477,6914,b'fixed broken docs and missing meta file',b'fixed broken cref\r\nreplaced transformscalehandler in docs by new constraint\r\nadded missing meta\r\n'
538562481,6913,b'Update Pointers.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
538531430,6912,b'Merging Feature/ux refactor into mrtk_development',b'## Overview\r\nthis merges all work done on ObjectManipulator and BoundsControl into mrtk_development experimental section.\r\n\r\nReviews for individual PRs into ux_refactor were already done'
538494074,6909,b'fixed tests in ux_refactor / adjusted namespaces and file locations',b'## Overview\r\n- fixed position less controller test in object manipulator\r\n- adjusted namespaces for bounds control \r\n- adjusted file location / namespace for object manipulator / tests\r\n\r\n'
538363736,6906,b'merge dev branch to ux refactor',b'## Overview\r\nupdate ux refactor with latest mrtk_development changes\r\n\r\n'
537854601,6903,b'Add ARM64 support to build window for Unity 2019 and support multiple VS versions side-by-side',"b'## Overview\r\n\r\n1. Adds `ARM64` as a valid build architecture when building in Unity 2019.\r\n1. Fixes an issue with multiple VS versions installed side-by-side.\r\n    1. Now, it keys `vswhere` off the setting in the Unity build window, which is already the setting the VS solution in the previous step would have been built with.\r\n\r\n## Changes\r\n- Fixes: #4349, #6532 '"
537799738,6902,b'Dedicate documentation info for observers',"b'## Overview\r\nAdd dedicated section in SA getting started to directly point people to more detailed setup and information\r\n\r\n## Changes\r\n- Fixes: #6881\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
537785231,6901,b'Header capitalization phase 4',"b""## Overview\r\n\r\nOur documentation guidelines recommend [using sentence case for headlines](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/DocumentationGuide.html#capitalization), something our docs currently do inconsistently. This is phase 4 of #6893, #6898, and #6899 (I broke them up so it isn't 100+ files all at once) to fix up our headers.\r\n\r\nNOTE: These PRs are only intended to update headers. Some non-header casing changes may have made their way in, but I'm trying to split these changes into more reviewable chunks."""
537784452,6899,b'Header capitalization phase 3',"b""## Overview\r\n\r\nOur documentation guidelines recommend [using sentence case for headlines](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/DocumentationGuide.html#capitalization), something our docs currently do inconsistently. This is phase 3 of #6893 and #6898 (I broke them up so it isn't 100+ files all at once) to fix up our headers.\r\n\r\nNOTE: These PRs are only intended to update headers. Some non-header casing changes may have made their way in, but I'm trying to split these changes into more reviewable chunks."""
537783989,6898,b'Header capitalization phase 2',"b""## Overview\r\n\r\nOur documentation guidelines recommend [using sentence case for headlines](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/DocumentationGuide.html#capitalization), something our docs currently do inconsistently. This is phase 2 of #6893 (I broke them up so it isn't 100+ files all at once) to fix up our headers.\r\n\r\nNOTE: These PRs are only intended to update headers. Some non-header casing changes may have made their way in, but I'm trying to split these changes into more reviewable chunks."""
537340155,6895,b'Update coding guidelines to use =>',"b'## Overview\r\nMinor change to add =>\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
537300703,6893,b'Update casing in docs headers (phase 1)',"b""## Overview\r\n\r\nOur documentation guidelines recommend [using sentence case for headlines](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/DocumentationGuide.html#capitalization), something our docs currently do inconsistently. This is phase 1 of a few (I broke them up so it isn't 100+ files all at once) to fix up our headers.\r\n\r\nNOTE: These PRs are only intended to update headers. Some non-header casing changes may have made their way in, but I'm trying to split these changes into more reviewable chunks."""
537291305,6892,b'Standardize docs headers syntax',"b'## Overview\r\n\r\n1. Converts some third level lines that were bolded into headers\r\n2. Removes the trailing `#` from any closed headers, as most of our docs use the unclosed style'"
537290657,6891,b'Add symbolic constant to control UnityAR provider compilation',"b'This change adds a new symbolic constant (ARFOUNDATION_PRESENT) that will get added to iOS and Android builds if the Unity AR Foundation package is installed via the package manager.\r\n\r\nIt also adds code to automatically remove the constant if the package is removed. \r\n\r\n```\r\nCAVEAT: Unity currently halts all execution if any of the assemblies in a project fail to compile. This causes our define removal code to not run if the build target relies upon a removed dependency. To work around the issue, switch to a different build target (ex: Standalone).\r\n```\r\n\r\nAs part of this change, the ScriptingUtilities class has been moved into the editor utilities assembly and the Windows Mixed Reality check for DotNetWinRT.dll has been moved to project load time, from provider init.\r\n\r\nFixes #6856'"
537203546,6889,b'Remove some inline HTML from MD docs',"b'## Overview\r\n\r\nI removed [some inline HTML](https://github.com/DavidAnson/markdownlint/blob/master/doc/Rules.md#md033---inline-html) that had corresponding MD equivalents.\r\nIn most cases, replacing `<br/>` with double spaces at the end of a line.'"
537201924,6888,b'Spell check docs',b'## Overview\r\n\r\nMostly spelling updates and apostrophes.\r\nAlso updated some formatting of a scene system doc.'
537184090,6887,b'Add examples hub to TOC documentation',"b'## Overview\r\nCreates new sub-section ""Example Scenes"" and adds ExampleHub page there with handsinteraction and eyetracking\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
537159637,6885,b'Include the MRTK.Generated meta file in .gitignore',"b""## Overview\r\n#6315 added a new project preferences object in the `.Generated` folder, but didn't also ignore its meta.\r\nThis adds that."""
537154288,6884,b'Correct the api contract version for the spatial issupported check',"b'The capability checker uses api contract checks to ensure that functions are not called on platforms for which they are not supported.\r\n\r\nThe Windows Mixed Realtiy spatial mesh observer check was incorrectly using version 8 of the contract, which was preventing the code from correctly running on the first generation HoloLens.\r\n\r\nThis change updates the check to use version 4, which correctly maps to the introduction of SpatialSurfaceObserver.IsSupported\r\n\r\nFixes #6613'"
537135065,6882,b'UnityAR asmdef check: update #elif to include 2019_1',b'This change includes Unity 2019.1 in the asmdef file check.\r\n\r\nFixes #6854'
537122043,6880,b'Clean-up warnings during NuGet build',b'## Overview\r\n\r\nA few warnings popped up recently in the NuGet build:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/70735628-7546dc00-1cc3-11ea-84da-12dce2c890a2.png)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6517'
537120999,6879,b'add scene query buffer size to sphere pointer inspector',"b'## Overview\r\nThere was no way to edit the scene query buffer size for grab pointer in editor. This adds that field to the inspector.\r\n\r\n![image](https://user-images.githubusercontent.com/168492/70735529-4892c480-1cc3-11ea-8d22-bd0a038150aa.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #6878\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
536948535,6876,b'Documentation on how to get the HandJointService is out of date.',"b""## Overview\r\nThe code to obtain IMixedRealityHandJointService has changed since the 2.0 release, but the documentation hasn't kept up to date."""
536905443,6875,b'Move RotateInOneHand options to constraint components',"b'## Overview\r\nIn #6321 the way that manipulation constraint options work was changed, so that they are individual components that the user can add to a manipulation object, tidying the `ObjectManipulator` inspector options and decoupling the manipulation logic from the constraint logic. \r\n \r\nHowever, the options in the `RotateInOneHandType` enum, also constrain rotation in some way. It feels strange to me that we have a unique set of constraints only for one handed rotation, when these constraints could easily be applied to two hand rotation as well. \r\n\r\nI believe that this will reduce confusion and clutter with the `ObjectManipulator` inspector options. I also think that it will bring potentially useful functionality to two hand manipulation that before only existed for one handed. It will also further reduce coupling between manipulation logic and optional constraint logic.\r\n\r\n## Changes\r\n- Add `FixedRotationToUserConstraint` which replaces `MaintainRotationToUser` and `GravityAlignedMaintainRotationToUser` (gravity aligned can be achieved by also adding a `RotationAxisConstraint`).\r\n- Add `FaceUserConstraint` which replaces `FaceUser` and `FaceAwayFromUser` (face away can be achieved by flipping a bool in the `FaceUserConstraint` component).\r\n- Add `FixedRotationToWorldConstraint` which replaces `MaintainOriginalRotation`.\r\n- Add options for all constraints so you can configure which manipulation types (one handed/two handed, near/far) they constrain for.\r\n- Improved constraint discoverability. Constraints now show in the `ObjectManipulator` inspector with an option to create them from here.\r\n- Added tests for new constraints.'"
536760205,6874,"b'Disable ""use eye gaze"" on gazeprovider by default, and disable ""use eye gaze"" on scenes that do not use eye input'","b'THIS IS A DRAFT\r\nThe aim of this PR is to get us discussing a solution for #6541, as it\'s becoming more obvious with holographic remoting on that we are not providing the hololens 2 shell input model by default when eye tracking is available. Please read the overview for more.\r\n\r\n## Overview\r\n#4427 changed the Gaze Provider to always enable eye gaze. This had a few side effects which are likely not visible in many MRTK apps because most do not enable the eye tracking capability. However, when eye tracking is enabled in an MRTK app, several problems occur, outlined in #6541.\r\n\r\nThe biggest issue is when no hands are up, the white dot aka the ""head cursor"" that\'s supposed to follow the head actually follows the eyes. You can get rid of this by disabling ""use eye tracking""\r\n![image](https://user-images.githubusercontent.com/168492/70683859-c4a3f280-1c58-11ea-8ccb-ba1cc8a2f3c9.png)\r\n\r\n\r\nHowever, if you disable ""use eye tracking"", then it is not possible to get the eye gaze ray.\r\n\r\nI believe the desired behavior as described in this bug is:\r\n\r\n1) When no hands are up, the white dot still follows the head by default in all MRTK apps. If somebody wishes to instead have the cursor and thus input be driven from the eyes, they can choose to do that. One way to do this would be to have ""use eye tracking"" checkbox dictate that, and to be off by default. BUT still there should be a way to access the eye tracking via PointerUtils.GetEyeRay.\r\n\r\n2) Even if ""use eye tracking"" on the gaze provider is disabled, it should still be possible to get the eye gaze ray.\r\n\r\nThe impact of this is currently with unity remoting on, the head cursor follows the eyes and leads to various unexpected behaviors such as the cursor turning on if no hands are near grabbables. My current workaround is just to turn off ""use eye gaze"" in the gaze provider for whichever scene I\'m working on. HOWEVER it would be great if the default behavior was to have ""use eye tracking"" disabled, but to still be able to access eye trackign data. Special demos that want to use the eyes to direct far interaction via gaze provider could enable this by checking ""use eye gaze"".\r\n\r\nThis change fixes 1) above, but not 2) -- with this change it is not possible to get the eye ray.\r\n\r\nI can think of two ways to try to solve 2)\r\n\r\n1. Add a method in GazeProvider concrete class to get the eye ray (as separate from the gaze provider position and direction), and then to make IsEyeDataAvailable a public method.\r\n2. Create a separate `EyeGazeProvider` for the `MixedRealityInputSystem` ([change this line of code](https://github.com/microsoft/MixedRealityToolkit-Unity/blob/022064a9add91519b14d9566242ff42535fe5989/Assets/MixedRealityToolkit.Services/InputSystem/MixedRealityInputSystem.cs#L279)), for example ""MixedRealityEyeGazeProvider"" class. The [GazeProvider](https://github.com/microsoft/MixedRealityToolkit-Unity/blob/mrtk_release/Assets/MixedRealityToolkit.Services/InputSystem/GazeProvider.cs) would then query this new `EyeGazeProvider` class if the gazeprovider\'s ""use eye gaze"" is enabled. [InputRayUtils](https://github.com/microsoft/MixedRealityToolkit-Unity/blob/mrtk_release/Assets/MixedRealityToolkit.SDK/Features/Utilities/InputRayUtils.cs) would then query EyeGazeProvider for the eye ray.\r\n\r\nThe issue I see in the current code is we assume that ""using eye data"" means ""use eye data to dispatch input and draw the cursor"". However ""use eye data"" can often just mean ""I want to see where the eyes are looking, but still use the default input model used by the shell"".\r\n\r\n\r\n## Changes\r\n- Fixes: #6541\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
536710107,6873,b'Update controller docs to more correctly represent the current state of features',"b'## Overview\r\n\r\nI found some docs that reference features that have since been implemented, like platform controller model loading.\r\n\r\nWMR: https://github.com/microsoft/MixedRealityToolkit-Unity/pull/3673\r\nOpenVR: #6374 '"
536701948,6872,b'Update spacing / formatting in some docs',b'## Overview\r\n\r\n1. Ensures spaces between [headers & text](https://github.com/DavidAnson/markdownlint/blob/master/doc/Rules.md#md022---headings-should-be-surrounded-by-blank-lines) and [lists & text](https://github.com/DavidAnson/markdownlint/blob/master/doc/Rules.md#md032---lists-should-be-surrounded-by-blank-lines)\r\n2. [Removes any trailing whitespace](https://github.com/DavidAnson/markdownlint/blob/master/doc/Rules.md#md009---trailing-spaces)\r\n3. [Removes any duplicate empty lines](https://github.com/DavidAnson/markdownlint/blob/master/doc/Rules.md#md012---multiple-consecutive-blank-lines)\r\n4. Some typo fixes snuck in here\r\n5. Also in a few places I changed list styles between `-` and `*` to match the surrounding lists in the doc'
536695916,6871,b'Fix broken link (Experimental features on the MRTK home page)',"b""The Experimental Features link was broken. I've redirected it to the contributing page for experimental features, which has some information about what they are.\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
536694742,6870,"b""Fix hand rays turning off when near a grabbable that's not visible""","b""## Overview\r\nFixes behavior where rays do not turn on when you are targeting a far object but your hand is near some grabbable that's out of the visual FOV. \r\n\r\nBefore, notice that hand rays stay off as I move the camera up. The hand is still near a grabbable that's not visible.\r\n![ray_before](https://user-images.githubusercontent.com/168492/70673089-33238900-1c36-11ea-8303-6b410fb390db.gif)\r\n\r\n\r\nAfter, notice hand rays are turning on when the camera moves up, even though hand is still near a grabbable object. Since the grabbable object is not visible, the object is ignored.\r\n![ray_after](https://user-images.githubusercontent.com/168492/70673092-3585e300-1c36-11ea-8da1-b1f7f0f09a3c.gif)\r\n\r\n## Changes\r\n- Addresses #6634 but does not fully fix it\r\n- When determining if a sphere pointer is near an object, require that the object be both near the sphere pointer AND visible to the camera.\r\n- Added a test to verify behavior\r\n\r\n## Additional edge cases to follow up on\r\nWhen testing I discovered another case where I expected to see the hand ray, but did not. This was because the line pointer was active but actually hitting a non-visible cube. Updated #6634 with this issue.\r\n![image](https://user-images.githubusercontent.com/168492/70841131-aa8b2100-1dcc-11ea-99c6-19e46c3ffbd4.png)\r\n\r\n## Performance Impact\r\nBecause this new logic runs on every sphere pointer every frame, it is important to understand the performance impact on this. Using the Unity profiler on the HoloLens 2 (using dev build), I measured the number of time spent additionally checking if grabbable objects are in the FOV. All measurements are done with two hands up.\r\n\r\n\r\n\r\n**WORST CASE**\r\n![image](https://user-images.githubusercontent.com/168492/71216670-f4ae4f80-226f-11ea-85b3-6c9fb73e800e.png)\r\n- 64 grabbable colliders, none visible (this will lead to each grabbable being queried)\r\nTotal FOV Time: ~ 1 ms\r\nnum calls : 173\r\n\r\n\r\n**AVERAGE / EXPECTED CASE**\r\n![image](https://user-images.githubusercontent.com/168492/71216685-0132a800-2270-11ea-8a16-870f6b32ccbf.png)\r\n\r\n- 3 grabbable colliders, all visible (stop when we hit the first grabbable collider)\r\nTotal FOV Time: ~0.1 ms\r\nnum calls: 4\r\n\r\n- 3 grabbable colliders, none visible\r\nTotal FOV Time: ~0.1 ms\r\nnum calls: 12\r\n\r\n## Verification\r\nTested on HoloLens 2 and got sign off from @cre8ivepark \r\n\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
536684357,6869,"b'Add missing links, convert some crefs into xrefs, add alt text to images'","b""## Overview\r\n\r\nSome links were empty, possibly awaiting the existence of their corresponding docs. Now that those docs exist, I've updated the empty links I found.\r\nI also converted a few crefs into xrefs, since it didn't appear that crefs work in our markdown.\r\nI also added alt text to all our images that were missing them. This is important for the accessibility of our docs to ensure images have alt text for screen readers."""
536671582,6868,b'Update README_HandInteractionExamples.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
536617087,6866,b'Delete README_Pointers.md',"b""## Overview\r\n\r\nThis page isn't referenced anymore and only exists as a pointer to the new pointers docs."""
536595725,6865,b'Remove specific locales from links',"b""## Overview\r\nRemoves the `en-us` locale from links. This will allow a user's chosen locale to take over when a link is clicked, instead of defaulting to `en-us`."""
536590887,6863,b'Line pointer refactor for performance',"b""## Overview\r\n**Change notes**\r\nThis change refactors the default hand ray pointer prefabs and classes for more optimal performance. Key impacts\r\n\r\n- `LinePointer` class has been simplified to only support raycast along a 2-point line (one raystep). Support for multi-raystep has been pushed down to a new inherited class, `CurvePointer`. Teleport pointers now inherit from this class. Simplifying LinePointer reduces some overhead in calculating points along the curve and number of raysteps involved. \r\n\r\n- The `ShellHandRayPointer` has been re-worked to alternate the line renderers material instead of doing weird things using two `MixedRealityLineRenderer` components. The dual render components were weirdly setup and doing duplicated work to the unity LineRender. If the old line renderer properties are used, a warning is logged during start alerting user to switch to new property \r\n\r\n- DefaultControllerPointer prefab has removed the dual MRLineRenderers in favor of one. Also LineStepCount on the MRLineRenderer left is lowered from 16 to 10. \r\n\r\n- Fixed line renderer issues (did not respond to FadeLineOnEnable toggle, gradient value setting and material tiling)\r\n\r\n**Breaking changes**\r\n- `ShellHandRayPointer` has been removed of it's MRLineRenderer properties (`lineRendererSelected` and `lineRendererNoTarget`)\r\n- `IMixedRealityPointer` now requires a `Reset()` method in it's interface\r\n\r\nUpdated #6922 for migration in properties change on ShellHandRayPointer\r\n\r\nAdded test under PointerTest.cs to confirm line pointer raycasts straight and curve pointer works with teleport pointer collisions\r\n\r\n\r\n**BEFORE**\r\n![image](https://user-images.githubusercontent.com/25975362/70744055-d4ade780-1cd5-11ea-9028-c4d15e1f209d.png)\r\n\r\n**AFTER**\r\n![image](https://user-images.githubusercontent.com/25975362/70744158-00c96880-1cd6-11ea-9e82-25f5617be967.png)\r\n\r\n## Changes\r\n- Fixes: #5620 #6862 \r\n\r\n## Verification\r\n**Tested**\r\nHandsInteractionExampleScene in editor\r\nHandsInteractionExampleScene VR on Device\r\nTeleport system VR on Device\r\nExamplesHub app on HL2 device (IN PROGRESS)\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
536568622,6861,b'Standardize C# codeblock syntax in docs',"b'## Overview\r\n\r\nUpdates all examples of the MarkDown ` ```c#`, ` ```csharp`, and ` ```cs` syntax to ` ```c#`, for consistency.'"
536557078,6860,b'Update Terminology.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
536537599,6859,b'Fix links to handtracking page',"b'## Overview\r\nUpdates links to HandTracking docs, which changed folder names.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6857'"
536481765,6858,b'Pinch slider orientation',"b""## Overview\r\n\r\nFix bug #6756 PinchSlider orientation doesn't change when setting Slider Axis to Y or Z\r\n\r\nUpdated PinchSlider.cs to update the orientation of TrackVisuals, TickMarks and ThumbRoot depending on the sliderAxis orientation\r\n\r\n## Changes\r\n- Fixes: #6756\r\n\r\nOnValidate the property of CurrentSliderAxis is being set and when that happens, the orientation of the visual components is being updated if the axis has been changed.\r\nThis is for editor changes\r\nIf user change the property of CurrentSliderAxis at runtime, the update function will be called on setter so the visual's orientation will be updated\r\n\r\nThe UpdateVisualsOrientation() function update the local rotation of the gameobjects\r\nIt doesn't change the local position\r\nSo if user wants to update the position, then user needs to do this manually in editor or by code at runtime.\r\n\r\nI could reset the local position of the gameobjects, so they don't preserve any wrong translation from previous slideraxis orientation. The problem with this approach is that maybe the user changes the axis by mistake and then when user rolls back to previous axis setup then the local translation will be lost and user will need to set it up again.\r\nSo, I decided for this reason, to leave the position untouched.\r\n\r\nThe private variable that the property about PreviousSliderAxis refers to, is nullable for initialization purposes. if the variable hasn't any value then it needs to become equal to the CurrentSliderAxis\r\n\r\nI also added 2 more tests in PinchSliderTests\r\nOne test is setting the visual components to null and tests that the slider move still works\r\nThe other test, checks the orientation of the components while the slideraxis changes.\r\n\r\nI haven't updated the documentation, will do that after this behaviour/PR is accepted. \r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n\r\nThe thumb root isn't being rotated while the axis changes\r\nShouldn't the thumbroot rotate as well?\r\nIf we want to update the thumb root rotation, then the HandInteractionExample breaks, as the PinchSlider there has an additional child under the ThumbRoot so that child has wrong orientation if its parent ThumbRoot is rotated to match the SliderAxis\r\nSo, do we leave the ThumbRoot as it is, and if the user wants, then user can make changes manually?\r\nIt looks visually wrong though for the ThumbRoot to remain in the same orientation.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
536305696,6855,b'double check interface for null',"b'## Overview\r\nThis is a band-aid because the bug is annoying.\r\nAs mentioned in the the issue this fixes, checking interfaces for null is not sufficient in the case they were implemented by a UnityEngine.Object. This needs a more profound solution (maybe #5981) though.\r\n\r\n## Changes\r\n- Fixes: #6587.'"
536088235,6853,b'Revert license path back to mrtk_dev',b'## Overview\r\nReverts #6845 in the dev branch'
536085270,6852,b'merge release into development',b'Update development to the latest release'
536084555,6851,b'Releases/2.2.0',b'Update the release branch to the latest (2.2.0)'
536075943,6850,b'Add note to Holographic Remoting page',b'Added note to Holographic Remoting page about making sure your HoloLens is not plugged in while remoting.\r\n'
536056887,6849,b'Update WSA.Player.Template.props.template to reference the DotNetWinRT adapter',"b'## Overview\r\n\r\nFollow-up to https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6827, fixing the known issue referenced there.\r\n\r\nAdds the `#define` and adapter reference to the WSA player DLL to support https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6731\r\n\r\nPart of https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6244'"
536045727,6848,b'Update iconUrl to point to renamed icon',b'## Overview\r\n\r\nUpdate iconUrl to point to renamed icon. See #6847 '
536044085,6847,b'Rename MRTKLogo_64x64.png',b'## Overview\r\n\r\nRename MRTKLogo_64x64.png -> MRTK_Logo_NuGet.png'
536038245,6846,b'Migrate to EditorGUI.DisabledGroupScope',"b""## Overview\r\nOriginally GUIEnabledWrapper was created to disable a group of controls if and then reset the GUI.enabled state after going out of scope. This functionality is actually performed out-of-box by Unity's [EditorGUI.DisabledGroupScope](https://docs.unity3d.com/ScriptReference/EditorGUI.DisabledGroupScope.html)\r\n\r\nThis change migrates use of GUIEnabledWrapper to the Unity default API. \r\n\r\nGUIEnabledWrapper is re-purposed as a means to force enable a scope of elements and then reset to whatever the original GUI.enabled state was before scope.\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
536034229,6845,b'Update license URL to point to releases/2.2.0 branch',b'## Overview\r\n\r\nUpdate NuGet license URL to point to releases/2.2.0 branch'
536031193,6844,b'Removes a stale portion of the CodingGuidelines that talks about unrolled foreach vs. for loops.',"b'This section of the coding guidelines survived some refactoring, but should have been deleted at some point in the past - it was part of a section that talks about using foreach vs for (mentioning to use for instead of foreach). This information is somewhat dated now (i.e. see https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4538#discussion_r295852607 - on newer version of Unity it\'s not really a thing based on those discussions)\r\n\r\nSee that this chunk of ""do"" code used to be in the foreach vs for section:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blame/22742fe3165cd062b4477cfbdaeaddd2d3734448/Documentation/Contributing/CodingGuidelines.md#L512\r\n'"
536025488,6843,b'Add 2.2.0 to the documentation version list',b'This change removes prerelease/2.2.0_stabilization from the list of available documentation versions and replaces it with releases/2.2.0\r\n'
536022821,6842,b'How to add menu items for experimental features',"b'## Overview\r\nFollowing #6492 this pr provides guidance that menu items for experimental features should go under ""experimental"" sub-menu.\r\n\r\n- Fixes: #6466\r\n'"
536015424,6841,b'NuGet packaging update',"b'## Overview\r\n\r\n1. Changes our `projectUrl` from the exact github URL to our managed aka.ms/mrtk URL. This could help us retarget that URL in the future, if needed.\r\n2. Adds a reference to our logo in the package, so we get an icon on NuGet.org and in NuGetForUnity.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/70572228-42caa100-1b54-11ea-98cc-c25565997286.png)\r\n'"
536004980,6840,b'Add MRTKLogo_64x64.png to our Images folder',"b""## Overview\r\n\r\nThis is the first step towards adding an image to our NuGet packages. We'll also be able to use this in our docs, if needed."""
535983865,6839,b'Add special WSA InEditor NuGet restore to CI',"b'## Overview\r\nThe new WSA InEditor build step needs its own NuGet restore, like the existing WSA Player build step. This is mostly copied and pasted from the existing one.'"
535982333,6838,b'Optimize Window Update',"b'## Overview\r\nJust general updates to optimize window. Main outstanding change is adding scene analysis for Unity UI elements that have RaycastTarget enabled. Items like labels can generally be disabled which reduces the number of raycastable objects to check in Graphics raycast operations per pointer\r\n\r\nCleaned up content when project setting is correct\r\nCleaned up code to use scope layout styles\r\nCleaned up scene analysis for polygon count \r\nUpdated documentation\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/70571837-6c36fd00-1b53-11ea-8edd-008604aff2f4.png)\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/70571877-807afa00-1b53-11ea-81ea-147e4a4fc22e.png)\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
535980688,6837,b'add #6807 to known issues',b'This change adds an entry to the known issues section of the release notes to describe #6807'
535941188,6836,b'Minor updates to release notes',"b'## Overview\r\nMinor links and stuff\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
535886500,6835,b'Update NuGet import steps',"b'## Overview\r\nUpdates the NuGet import steps to add the requirement of NuGetForUnity 2.0.0 or newer, which has some critical fixes for importing MRTK 2.2.'"
535848091,6834,b'Fix Pressable Button State Reset',"b'## Overview\r\n\r\nPressable Button get stuck in Gesture State if hand moves to out of focus position in between a pinch and open gestures.\r\n\r\nBefore:\r\n![pb_reset_before](https://user-images.githubusercontent.com/16922045/70546606-7b27aa80-1b67-11ea-891f-c79bec288992.gif)\r\n\r\nAfter:\r\n![pb_reset_after](https://user-images.githubusercontent.com/16922045/70546617-81b62200-1b67-11ea-9429-9f9c0d0c952d.gif)\r\n\r\n\r\n## Changes\r\nInteractable.cs handles button states and timeout for reseting HasPress when Input Position goes out of threshold. HasGesture timeout is not being handled.\r\n\r\nWe assume the following desirable behaviour:\r\n\r\n1. Hand focus on Button with far pointer\r\n2. Hand performs Pinch gesture\r\n3. Button enters visual Pressed state\r\n4. Hand Moves pointer to outside of Button focus\r\n5. Button goes back to Default state\r\n6. Interactable does NOT triggers OnClick.\r\n\r\n- Fixes: #6641.\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
535495020,6832,b'Update code in InputEvents doc',"b'## Overview\r\n\r\nFixes two issues in this doc:\r\n\r\n1. Two lines ended in `)` instead of `;`.\r\n2. Debug logs were identical between the source detected event and the source lost event, instead of logging the correct state.\r\n\r\n## Changes\r\n- Fixes: #6830'"
535452514,6829,b'Prerelease/2.2.0 stabilization -> dev',b'## Overview\r\nPrerelease/2.2.0 stabilization -> dev'
535443137,6828,b'Reserialize some assets for 2.2 release',"b""## Overview\r\nAs part of https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4914, I'm aiming to keep serialization up to date each time we release."""
535431583,6827,b'Fix building NuGet locally and add support for DotNetWinRT in NuGet packages',"b'## Overview\r\n\r\n1. Filters out the DotNetAdapter folder from being packaged in the NuGet package.\r\n    1. This prevents the csproj from being packaged, which would cause MSBuildForUnity (if present) to resolve its dependency and a duplicate DotNetWinRT DLL.\r\n1. Adds a custom WSA.InEditor.Template.props, to add the `DOTNETWINRT_PRESENT` define and add a package reference to DotNetWinRT.\r\n1. Adds `https://api.nuget.org/v3/index.json` to the package restore csproj, used during local NuGet packaging, due to the new DotNetWinRT dependency.\r\n\r\n## Changes\r\n- Fixes: #6244 \r\n\r\n## Known Issues\r\n\r\n1. The WSA Player DLL still needs to be updated with the define and reference. @andreiborodin is helping with the investigation.'"
535405896,6825,"b""Added setting of default configuration profile in case there's none set for adding the mrtk gameobject to the scene""","b""## Overview\r\nthe default profile is now automatically set in the mrtk gameobject on configuring the scene.\r\nthe documentation reflects the new change\r\n\r\n## Changes\r\n- default profile is selected in case there's nothing selected when adding the mrtk gameobject to the scene\r\ndocumentation explains to the user that they can chance the profile but we preselect the default profile for them\r\ndidn't add any pictures/screenshots on purpose as the text description should be enough and we shouldn't screenshot inspector properties \r\n\r\n## Verification\r\ntested adding the MRTK gameobject to a new scene and checked if default config profile is set\r\n"""
535335329,6824,b'Add holographic remoting documentation article',"b'This change adds a new holographic remoting article to the github.io documentation. It now contains the setup and connection instructions that previously were added to the release notes, with the added benefit of screenshots illustrating the steps.\r\n\r\nThe release notes were updated to replace the detailed steps with a link to this page as well as adding information about how to avoid a known issue with some versions of Unity.\r\n\r\nWhile adding the new page to the table of contents, i took the opportunity to alphbetize the Tools section.'"
535281767,6823,b'Update version of MSBuild for Unity',b'MSBuild for Unity is taking some changes that address issues discovered while using it with MRTK. This PR increases the version number that will be written to the manifest.\r\n\r\nPlease note this should NOT be merged until the new MSBuild update has been published.'
535209379,6822,b'Utilize pointer cache in default input system',"b""## Overview\r\nThis change introduces the concept of a pointer cache so that pointers, and in particular their prefabs, can be re-used throughout the life cycle of an app. The benefit of a cache is greatly improved performance by utilizing resource re-use. Instantiating prefabs/gameobjects in Unity is very expensive and must occur on the main thread. Particularly for HL2, where hands are lost/found every time a users raises or lowers them, the performance is critically impacted. \r\n\r\nThis new cache is primarily implemented by extending the functionality of BaseInputDeviceManager. Currently the class supports requesting pointers based on some arguments for internal use. This adds the ability for the class to also recycle or clean up pointers as well. Furthermore, this cycle is extended to work with an object pool paradigm. If a pointer has not been destroyed (either by itself or some other system in the app), then the BaseInputDeviceManager will attempt to cache the pointer for later re-use. \r\n\r\nThe base pointer implementation class, ControllerPoseSynchronizer.cs, has the property DestroyOnSourceLost which will allow the pointer to destroy itself if it's input source has been lost. In order for the caching to work, any pointer prefabs/instances need to disable this toggle.\r\n\r\nAlso adds `UnityObjectExtensions.IsNull()` utility helper to combat issue seen in #5981\r\n\r\n## Changes\r\n- Fixes: #5846 , #4223 , #5981 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
535175075,6821,"b'Change default GridObjectCollection layout order to ""RowThenColumn"" to avoid asset upgrade when new assets created'","b""Fixes #6814 by ensuring that newly created assets do not have ColumnThenRow layout, which is what triggers the asset upgrade in (asset version must be 0 and layout must be ColumnThenRow).\r\n\r\nAdditional changes:\r\n- Update tooltip and logging\r\n\r\nThe bug is caused because newly created assets will have asset version 0, and also assets that actually are old and need to be upgraded will have asset version 0. This problem would happen in all cases when we are adding asset versions to assets that already exist.  It would be great to find another way to solve this problem, but for now this approach fixes #6814 and will prevent log messages from showing up whenever a grid object collection gets added in MRTK 2.2. See keveleigh's comments in #6814 for some more details. Until we find a better solution\r\n\r\n## Verification\r\nCreated new assets and verified that error message did not get printed.\r\n"""
535063168,6820,"b'Adding WholeValue, Min/max value, dynamic TicksMarks on the PinchSlider'","b'  ## Overview\r\nI modified the PinchSlider script :\r\n\r\n- Possibility to choose a minimum and maximum value.\r\n- Possibility to choose to slide with whole or float value.\r\n- Possibility to dynamically setup the Ticks marks (UpdateTickMarks()).\r\n- SliderSounds\'s ""TickEvery"" variable is dynamically change too (Only if you able the Ticks Marks automatic setup).\r\n- Adding a SetTickEvery function because of the private access.\r\n\r\n## Changes\r\n- Fixes: #6756 (additional context part)\r\n\r\n\r\n## Verification\r\nEverything works well on the PinchSlider\'s example scene.\r\n\r\nThis is my first pull request, let me know if i did something wrong.\r\n'"
534983529,6819,b'Merge pull request #2 from microsoft/mrtk_development',"b'Mrtk development\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
534257174,6817,b'Update release notes: add remoting steps and a note re: projects with spaces.',b'This change adds details on the one-time setup steps for HoloLens 2 remoting as well as instructions for connecting to the device.\r\n\r\nAlso adds a note re: an observed issue with projects that have spaces in the path.'
534218970,6816,b'Update csproj to better match updated MSBuildForUnity template',b'## Overview\r\nUpdates the csproj layout to better match updated MSBuildForUnity template. The content versions and packages themselves are unchanged.\r\n\r\nPart of #6244 '
534050485,6815,b'Execute borderlight width calculation only on scale changes',"b""## Overview\r\nMaintainBorderLightWidth.cs component scales the correct border light width value based on scale changes of the gameobject at runtime. Originally though, this calculation would be performed every lateupdate(). Although not incredibly noteworthy and expensive, this component is on ever button which in for example the HandInteractionExampleScene adds up. \r\n\r\nThis change caches the previous lossyscale value for the GameObject and only performs the border width light update if the GameObject's scale has changed. \r\n\r\nFurthermore, the shader property id has been switched to static since it'll be a constant value for every component. \r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
533699335,6812,b'Prerelease/2.2.0 stabilization -> dev',b'Prerelease/2.2.0 stabilization -> dev'
533613225,6808,b'Merge pull request #1 from microsoft/mrtk_release',"b'updating\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
533536277,6804,b'On asset upgrade change columnthenrow to rowthencolumn layout',"b'## Overview\r\nThis is part 2 of 2 to fix issue #6773. Previously, asset upgrade would detect if layout was `ColumnThenRow` and fix up columns field. However, in 2.1 and below layout would always run by `RowThenColumn`, even if layout was specified as `ColumnThenRow`. To ensure behavior for 2.1 assets is the same, change layout to be `RowThenColumn` for all assets that had layout `RowThenColumn`\r\n\r\n## Changes\r\n- Fixes: #6773\r\n\r\n\r\n## Verification\r\nStill need to test that assets are changed properly when updating from 2.1 to 2.2.'"
533509343,6803,b'Manage UnityAR provider asmdef file based on Unity version',"b'Unity 2018 and 2019 have different factorings of components in the ARFoundation packages. By default, the MRTK packages are configured for Unity 2018 as it is the current LTS version.\r\n\r\nIf the Microsoft.MixedReality.Toolkit.Providers.UnityAR package is imported (or the repository is being used), on project load, the asmdef file will be inspected and updated to match the version of Unity that is in use.\r\n\r\nThis change does not enforce the installation of the ARFoundation packages (customers may see compile error(s) re: missing Unity.XR.ARFoundation). To resolve this error, customers may:\r\n- Remove the UnityAR provider from the project\r\n- Install ARFoundation via the Unity Package Manager\r\n\r\nThis change resolves #6555 '"
533471109,6802,b'Prerelease/2.2.0 stabilization -> dev',b'Prerelease/2.2.0 stabilization -> dev'
533083515,6798,b'Revert ifdef changes',"b'## Overview\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/6702 changed this `#if` from `ENABLE_DOTNET` to `NETFX_CORE`. For now, changing this back to the previously known-good `#if` while NuGet investigations are ongoing.'"
533074993,6797,"b'Clarify row then column, column then row layout'","b'## Overview\r\nPart 1 of 2 to address #6773. Adds documentation, release notes, and a help dialog to clarify the meaning of ""row then column"" and ""column then row"" layout. Release notes clarify that all assets that had `ColumnThenRow` layout will be updated to use `RowThenColumn` layout.\r\n\r\nThis is part 1 of 2. The second part will add code that updates assets to `RowThenColumn` if their layout in 2.1 is `ColumnThenRow`. \r\n\r\nNew help dialog:\r\n\r\n![image](https://user-images.githubusercontent.com/168492/70196919-0cf26c00-16bf-11ea-92b0-5beb0cbe17ce.png)\r\n\r\n'"
532988585,6796,b'Update version 2.2 -> 2.3 in mrtk_dev',"b'## Overview\r\nA new version.txt and all the new AssemblyInfo.cs files were added in the stabilization branch, which is currently targeting the 2.2 release. mrtk_development has moved on to 2.3, so these files need to be updated.\r\n\r\nRelated: https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6518'"
532918340,6795,b'Fix FacadeHandler throwing exception',"b'## Overview\r\n\r\nMinor fix for Facade handler and MRTK initialize.\r\n\r\n- Facade Handler was destroying objects as it enumerated through the list but destruction cause an invalid enumerator. Change uses for loop instead of foreach and deletes in reverse\r\n\r\n- When there is no active profile, MRTK initializes and logs error. In Unity Editor, it is more appropriate as a warning while it will be an error on device/runtime. This is because MRTK runs in edit mode.\r\n\r\n![profile-error](https://user-images.githubusercontent.com/25975362/70178623-9a779100-16aa-11ea-8912-5a18434a59a7.gif)\r\n\r\n## Changes\r\n- Fixes: #6794 6794\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n\r\n'"
532880857,6793,b'Add [HideInInspector] to isCustomProfile',"b""## Overview\r\nAdds `[HideInInspector]` to BaseMixedRealityProfile, to clean up any profiles that inherit from this class but don't provide their own custom inspector.\r\n\r\n## Changes\r\n- Fixes:\r\n![image](https://user-images.githubusercontent.com/3580640/70173234-4b6c3480-1687-11ea-8e99-1fd0dd876dab.png)\r\nto this\r\n![image](https://user-images.githubusercontent.com/3580640/70173244-4f985200-1687-11ea-82c2-9a2f0dffba89.png)"""
532878466,6792,b'update DotNetWinRT min version',b'This change updates the nuspec file to specify an updated minimum version of the Microsoft.Windows.MixedReality.DotNetWinRT package.'
532843433,6791,b'Fix obsolete message for SolverHandler enum',"b'## Overview\r\nMissed comment during change. Fixing now\r\n\r\n## Changes\r\n- Fixes: #6788 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
532830908,6790,b'Extension service wizard fixes',"b'## Overview\r\nThis change cleans up the extension service wizard. In particular,\r\n\r\nAllow one folder quick selection for all files to be created\r\nFix registrar constructor from obsolete to valid in template\r\nFix supported platforms to be -1 when everything\r\nAdded MRTK logo to window and tab icon\r\nAdded progress bar instead of ellipsis for async\r\nGeneral polish and code clean up (use scopes, better disables, rich text logging, use string building and string formatting instead of concatenation and more)\r\n\r\n## Changes\r\n- Fixes: #6776 , #6775 , #6774 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
532284039,6785,b'Release notes and updating articles updated to 2.2.0',b'This change updates the release notes and the updating article to match version 2.2.0 changes.\r\n\r\nFixes #6349'
532153061,6784,b'Create optimize materials for hand joint mesh visualization',"b'## Overview\r\n\r\nThis change creates two new materials to be used directly with the default hand joint mesh visualization. \r\n\r\nOne material for the hand joint cubes. This new material is opaque instead of transparent allowing for true dynamic batching of all joints into a combined draw call. \r\n\r\nOne material for the hand joint index tip spheres. This material turns off hover light and other unnecessary items and turns on GPU instancing so both index tips are drawn in one call.\r\n\r\n**Before**\r\n![image](https://user-images.githubusercontent.com/25975362/70075093-0f26ce80-15ca-11ea-8e12-1636d38301c9.png)\r\n\r\n**After** \r\n![image](https://user-images.githubusercontent.com/25975362/70074897-a9d2dd80-15c9-11ea-85c7-d76b314446f0.png)\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
532127691,6783,b'Clean up unnecessary GC allocation every frame',"b'## Overview\r\nThis change cleans up some of the unnecessary GC allocation every frame. Although these are minor in size, they do add up over time and more importantly can be easily avoided without changing functionality. \r\n\r\nMRTK.ExecuteOnAllServicesInOrder - 40B\r\nDue to foreach loop on IEnumerable\r\n\r\nDefaultPointerMediator.ApplyCustomPointerBehaviours - 366B\r\nDue to action allocation that can be a standalone function\r\n\r\nInputSimulationService.UpdateMouseDelta - 92B\r\nRe-used MouseDelta class instead of allocating every update\r\n\r\n## Changes\r\n- Fixes: #6772 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
532054872,6782,b'updating ux refactor with latest Mrtk development',b''
531982381,6781,b'Mrtk fixed source detected order',b'## Overview\r\nUnifies the controller detection call for already existing and later called into existence controllers.\r\nBased on #6779 \r\n\r\n## Changes\r\n- Fixes: #6780'
531970710,6779,b'Generic Service in DataProvider',"b""## Overview\r\n\r\nDerivates of the BaseDataProvider, mostly all DeviceManagers, rely on their respective service.\r\n\r\nThe following changes are applied:\r\n- The BaseDataProvider Service field is now generic, no casting needed anymore. The class is abstract anyways, which made the change easy.\r\n- Removed the BaseInputDeviceManager's redundant InputSystem attribute as now it just can and always should have accessed the Service attribute\r\n\r\n## Changes\r\n- Fixes: #6778"""
531574390,6771,b'Fix missing error icon in TypeReferencePropertyDrawer',"b'## Overview\r\nThis removes the error icon from SystemType fields with missing types and replaces it with an error color. The icon was rendering inconsistently between different versions of Unity.\r\n\r\n![MissingType](https://user-images.githubusercontent.com/9789716/69999603-e214e600-150d-11ea-94ec-ec084b44a162.PNG)\r\n\r\n## Changes\r\nThis fixes issues where service types were missing but not noticed due to a lack of visual feedback.\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
531545936,6770,b'fix mouse provider not auto selecting profile',"b'While investigating #6765, it was found that the mouse device manager does not automatically set its default profile when selected.\r\n\r\nAdded ""MixedRealityToolkit.SDK"" to the data provider attribute to inform the system the location of the file.'"
531523681,6768,b'Mrtk profile requirements',"b'## Overview\r\nUpdates the `MixedRealityServiceProfileAttribute` to support multiple required types and multiple excluded types.\r\n\r\nThe default constructor still accepts one required type and no excluded types, so this is a non-breaking change.\r\n\r\nAlso updates the eye tracking profile to require both `IMixedRealityEyeGazeDataProvider` and `IMixedRealityEyeSaccadeProvider.` This requirement excludes eye tracking profiles from the input simulation profiles list:\r\n\r\n![FilteredList](https://user-images.githubusercontent.com/9789716/69993019-cdc9ec80-14ff-11ea-922b-fde42a34ec31.png)\r\n\r\n## Changes\r\n- Fixes: #6765\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
531462404,6767,b'Compilation Validator for 2019.2+',"b'## Overview\r\n\r\nAdds a script that loads on startup and checks for asmdef configuration in Unity 2019.2 & later. If asmdef files are not configured correctly a dialog is launched:\r\n\r\n![Dialog](https://user-images.githubusercontent.com/9789716/69987063-8473a000-14f3-11ea-9585-16c651d57b0e.PNG)\r\n\r\nClicking OK executes our `setup_for_2019.ps1` powershell script.\r\n\r\n## Changes\r\n- Fixes: #6555\r\n\r\n## Verification\r\nThis should be tested with fresh installs from github on a variety of systems.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
531213311,6764,b'Fix hand interaction gesture events example',"b""## Overview\r\nThis is a fix on the bug #6569\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/6569\r\nwhere the HandInteractionGestureEventsExample scene does not do anything in the Unity Editor \r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\nModify the GestureEventsInputSimulationProfile.asset defaultHandSimulationMode to Gesture instead of Articulate that it currently is set to\r\n\r\nArticulate Hand Simulation doesn't raise any gesture events\r\nThe GestureTester.cs script is this scene is listening for gesture callbacks in order to update the scene.\r\nSo, if it hand simulation is set to articulate then the GestureTester.cs doesn't receive any of the required callbacks.\r\nGesture hand simulation raise the gesture events that GestureTester.cs is expecting.\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
530892653,6761,b'Prerelease/2.2.0 stabilization -> dev',b'Prerelease/2.2.0 stabilization -> dev'
529630048,6755,b'Mrtk development materialgallary holo moto',"b""## Overview\r\nBased on the MaterialGallary scene of MRTK Examples, I created a feature for developers to better understand the mechanism of MRTK StandardShader under..\r\n\r\n## Changes\r\n- Fixes: # .\r\nA new feature folder was created in Assets / MixedRealityToolkt.Examples / Demos / StandardShader and new features and tests were created.\r\n\r\n## Verification\r\nI'm a beginner so there may be problems. \r\n\r\n![ezgif com-crop](https://user-images.githubusercontent.com/36409613/69769788-aa363780-11c9-11ea-8248-d85b80495b6b.gif)\r\n![20191128_094508_HoloLens_TrimB](https://user-images.githubusercontent.com/36409613/69769811-c3d77f00-11c9-11ea-89fe-c5535284961a.gif)\r\n\r\n![20191128_094508_HoloLens_TrimC](https://user-images.githubusercontent.com/36409613/69769820-d18d0480-11c9-11ea-9ad7-7d2286c74b80.gif)\r\n"""
529599116,6754,b'update MSBuild for Unity reference to v0.8.2',b'This change picks up the latest version of MSBuild for Unity. 0.8.2 fixes a key issue with switch8ing API compat level in Unity.\r\n\r\nAlso included is a small change to the DotNetAdapter.csproj file that adds wildcards to the NuGet package and MSBuild version numbers.'
529571417,6753,b'Fix gridobjectcollection layout when using ColumnThenRow',"b'## Overview\r\nFixes #6751 which was incorrectly laying out content when layout was `ColumnThenRow`. The root issue was that the component was always actually laying out using rows, then columns.\r\n\r\nBefore when number of items 10, 3 columns, layout ColumThenRow:\r\n\r\n![image](https://user-images.githubusercontent.com/168492/69758985-faac8700-112e-11ea-98a3-d42c56c91822.png)\r\n\r\nAfter using same setup (10 items, 3 columns):\r\n![image](https://user-images.githubusercontent.com/168492/69759006-07c97600-112f-11ea-8f7d-c56d0da27849.png)\r\n\r\nFiled a follow-up issue #6752'"
529504293,6749,b'Update recommended version for new MRC and header update',"b'## Overview\r\nUpdates the recommended version from 2018.4.12 to 2018.4.13.\r\nAlso, updates the Microsoft contribution header to the currently recommended internal guidelines on https://docs.opensource.microsoft.com/content/releasing/copyright-headers.html'"
529131176,6744,b'Add Slider on MRTK/Examples MaterialGallery based scene',"b""## Overview\r\nBased on the MaterialGallary scene of MRTK Examples, I created a feature for developers to better understand the mechanism of MRTK StandardShader.\r\n\r\n## Changes\r\nFixes: #6724 \r\n\r\nA new feature folder was created in Assets / MixedRealityToolkt.Examples / Demos / StandardShader and new features and tests were created.\r\n\r\n![ezgif com-crop](https://user-images.githubusercontent.com/36409613/69769788-aa363780-11c9-11ea-8248-d85b80495b6b.gif)\r\n![20191128_094508_HoloLens_TrimB](https://user-images.githubusercontent.com/36409613/69769811-c3d77f00-11c9-11ea-89fe-c5535284961a.gif)\r\n\r\n![20191128_094508_HoloLens_TrimC](https://user-images.githubusercontent.com/36409613/69769820-d18d0480-11c9-11ea-9ad7-7d2286c74b80.gif)\r\n\r\n## Video\r\nhttps://youtu.be/tvoDa4lt2s0\r\n\r\n## Verification\r\nI'm a beginner so there may be problems.\r\n\r\n"""
529019901,6743,b'Update to ARFoundation documentation',"b'## Overview\r\nAdded a guide on how to add support for Android and iOS with screenshots and updated the table of contents.\r\n\r\nAddresses issue #6646 at the end of UsingARFoundation.md\r\n\r\n## Changes\r\n- Added CrossPlatform folder to docs, updated in toc.yml\r\n- Added UsingARFoundation.md\r\n- Updated UnityARCameraSettings.md\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
529001489,6742,"b'Mark MRC capture settings as experimental, disabled by default'",b'This change addresses #6732 by adding a message qualifying which versions of Unity support the MRC capture settings provided by the Windows Mixed Reality camera settings provider.\r\n\r\nIt also marks this feature as experimental as there have been some issues with hologram stability in MRC recordings.\r\n\r\nThe default profile ships with the setting disabled. Customers can enable by cloning and modifying the profile.'
528898405,6740,b'update manifest to not auto-pull msbuild for unity',b'#6787 identified an issue that was causing the DotNetWinRT plugin to be packaged into the foundation unitypackage as part of CI.\r\n\r\nThis change updates the manifest.json file to address the packaging issue.'
528452100,6738,"b'Fix ""hide cursor"" in eye tracking example scene does not work'","b'## Overview\r\n- Workaround for issue #6086 \r\n- Exception handling and removed confusing error messages showing up when switching scenes when using ""LoadProfilesOnStartup"" (addressing issue #6735).'"
528396190,6733,b'update roadmap to include 2.3 plan and 2.4 early ideas',b'This change updates the 2.2.0 documentation with version 2.3.0 plans and some early thinking for 2.4.0'
528377533,6731,b'Add option in Windows Mixed Reality camera settings for reprojection mode',"b'This change adds support for selecting between Depth and Auto-Planar reprojection modes when running on Microsoft HoloLens 2.\r\n\r\nPrerequisites:\r\nTo use this feature, MSBuild for Unity must be installed into the project (#6729) adds the option to the MRTK Configuration dialog as well as the DotNetWinRT package must be imported (automatically performed with MSBuild for Unity is installed).\r\n\r\nIf the prerequisites exist, the value of HoloLens 2 Reprojection Method, in the Windows Mixed Reality Camera Settings profile will be honored.\r\n\r\n![image](https://user-images.githubusercontent.com/13281406/69583882-b4212600-0f90-11ea-95f8-081aba9c1d06.png)\r\n\r\nIf the prerequisites cannot be found, the default value (Depth Reprojection) will be used.\r\n\r\nThis change fixes #6531'"
528350764,6730,b'fix logic error in asset retargeting',"b'There was an incorrect check in asset retargeting that was failing on valid namespaces. This change addresses that error,.'"
528274029,6729,b'Move MSBuild for Unity enabling to MRTK Configurator',"b'#6718 added automatic modification of the package manifest to add MSBuild for Unity on project load.\r\n\r\nThis change moves this to the MRTK Configuration dialog to allow customers to choose when / if they wish it to be installed.\r\n\r\nFixes #6723\r\n\r\nA Getting Started documentation update describing MSBuild for Unity and its benefits will follow this PR shortly.\r\n\r\nAlso included in this change is an update to how the configurator writes out the required iOS version (was writing ""11"" needs to be writing ""11.0"").'"
528242332,6728,b'add support for dotnetwinrt adapter in asset retargeter',b'This change resolves a CI issue introduced by #6720 where the DotNetWinRT.dll was being scanned for asset retargeting and its namespace was not expected.\r\n'
528203247,6727,b'Only scale manipulation for xz distance',"b'## Overview\r\nPreviously, moving your hand down while you were manipulating an object moved the object further away. This was because the distance from the head was used to scale the manipulation distance. Now, we ignore y in this distance calculation, meaning you have to move your hand further from your body in order to scale the manipulation distance.\r\n\r\nSee .gifs below for comparison. The .gifs in #6589 demonstrate the problem very well.\r\n\r\n### Before\r\n![pre_depth_fix](https://user-images.githubusercontent.com/47415945/69559354-b63fb080-0fa1-11ea-9c9e-08c005335819.gif)\r\n\r\n### After\r\n![depth_fix](https://user-images.githubusercontent.com/47415945/69559004-16822280-0fa1-11ea-8538-c2c039539e83.gif)\r\n\r\n## Changes\r\n- Fixes: #6589.'"
527510251,6722,b'Prerelease/2.2.0 stabilization -> dev',b'## Overview\r\nPrerelease/2.2.0 stabilization -> dev'
527509409,6721,b'Fix namespaces for type checks',b'## Overview\r\nUpdates some `ApiInformation` checks with proper namespaces.'
527499156,6720,b'Add csproj and nuget for DotNetWinRT',"b""## Overview\r\nAlong with @davidkline-ms's #6718, this will pull down the DotNetWinRT dependency.\r\nAlong with #6702, this will support full holographic remoting for HoloLens 2!\r\n\r\nAlso a slight update to the eye gaze data provider.\r\n\r\nDocs will be incoming, but I want to unblock testing.\r\n\r\n## Changes\r\n- Part of #6244 """
527484290,6719,b'Add new foundation package dependency',b'Portions of the MRTK foundation now require the Microsoft.Windows.MixedReality.DotNetWinRT package to make accessing some platform functionality significantly easier.\r\n\r\nThis change adds the dependency to the nuspec file and fixes #6631'
527479502,6718,b'Automatically modify the package manifest to include msbuild for unity',b'MRTK is taking a dependency on the MSBuild for Unity UPM package to help acquire and manage dependencies.\r\n\r\nThis change is part of the work to complete #6244 and #6531. It will also enable the unitypackage distribution to acquire the dependency described in #6631 \r\n\r\nTesting performed included:\r\n* Updating a manifest with no scoped registries\r\n* Updating a manifest to append to an existing collection of scoped registries.'
527437312,6713,b'[Docs] Pulse shader documentation improvement',b'## Overview\r\nAdding GIF image links from the PR #6486 . Additional information on the materials and shader.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blob/a7b26e51a8e2b571a7aaa1622459724819d49a07/Assets/MixedRealityToolkit.SDK/Experimental/PulseShader/README.md\r\n'
527427226,6712,b'Material theme should not active/deactivate host gameobject',"b'## Overview\r\nMaterial Theme had invalid line of code controlling whether gameobject host was active or not...but the property for the theme engine was of type material, not bool\r\n\r\n## Changes\r\n- Fixes: #6707 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
527422708,6711,b'Rename MRTKMSBuildTemplates -> MSBuildMRTKTemplates',"b'## Overview\r\nRename MRTKMSBuildTemplates -> MSBuildMRTKTemplates, to prevent collisions with the UPM version of MSBuildForUnity\r\n\r\n## Changes\r\n- https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6674\r\nPart of #6244 '"
527366304,6710,b'Update MRTK_Packages.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
527012031,6704,"b'Second phase of stabilization docs formatting, spelling, and updates'",b'## Overview\r\nUpdates formatting and spelling in various documentation. Continuation of https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6661'
526999363,6703,b'Merge stabilization -> dev',b'## Overview\r\nMerge stabilization -> dev'
526991669,6702,b'Update WMR scripts with DotNetWinRT support for Holographic Remoting',"b'## Overview\r\nAdds the namespaces from the DotNetWinRT adapter, currently blocked behind `#if DOTNETWINRT_PRESENT`.\r\n\r\nThis is part 1 of bringing in remoting support. With this change, HL2 remoting can be used by manually setting the define in the Unity player settings and manually importing https://www.nuget.org/packages/Microsoft.Windows.MixedReality.DotNetWinRT.\r\n\r\nThis flow will be improved in upcoming PRs.\r\n\r\n## Changes\r\n- Part 1 of #6244'"
526924332,6700,"b""Remove the 'alpha' tag from Release CI""","b""NuGetForUnity doesn't support SemVer2.0, so we can't make use of prerelease packages that have alpha prepended.\r\n"""
526910728,6699,"b""Don't crash on global listeners""","b""## Overview\r\nWhen firing regular events, Unity's event system is utilized. If the calling object throws an exception, Unity handles that and it does not crash the input system for the current frame. For global listeners, we are invoking the event handler's directly. Thus, any exceptions thrown in client code by consumers could crash our system. This change wraps the call in a try-catch to ensure the input system resumes running\r\n\r\nExample class that can crash the input system from continuing execution\r\n```c#\r\nusing Microsoft.MixedReality.Toolkit;\r\nusing Microsoft.MixedReality.Toolkit.Input;\r\nusing UnityEngine;\r\n\r\npublic class TestGlobal : MonoBehaviour, IMixedRealityFocusHandler\r\n{\r\n    public void OnFocusEnter(FocusEventData eventData)\r\n    {\r\n        GameObject c = null;\r\n        c.transform.position = Vector3.zero;\r\n    }\r\n\r\n    public void OnFocusExit(FocusEventData eventData) { }\r\n    void Start()\r\n    {\r\n        CoreServices.InputSystem?.RegisterHandler<IMixedRealityFocusHandler>(this);\r\n    }\r\n}\r\n```\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
526906003,6698,b'Fix deploy issue after Unity assembly reload',"b""## Overview\r\nAfter Unity reloads assemblies (which it does after a script changes), the authorization token was being lost, since it doesn't get serialized when state is reloaded.\r\nUnity's web request API caches the previous authorization cookie. This causes two things:\r\n\r\n1. Our next attempt to authorize succeeds but doesn't return a response, since we're contacting the device with the previous cookie\r\n2. Code that assumed we'd get a response throws a nullref\r\n\r\nNow, if the request succeeds but nothing is returned, we ignore the result and move on like normal, since we know we've been properly authenticated via the cached cookie.\r\n\r\nAlso cleans up some unused fields and adds some documentation.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5697"""
526857736,6696,b'Add component menu to obsolete',"b'## Overview\r\nUpdate AddComponentMenus to move obsolete monobehaviours to dedicated ""folder"" path so users know not to use them\r\n\r\n## Changes\r\n- Fixes: #6567\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
526837460,6695,b'Update SR_Triangles_Lost_Tracking.mat name',"b'## Overview\r\nThis was renamed in #6664, but was reserialized again in a merge.'"
526824116,6693,b'Update InputSimulationService.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
526823966,6692,b'Add support for MRC recording from the PV camera',"b'## Overview\r\nAdds support for MRC recording from the PV camera for HoloLens 2. When recording MRC on a HoloLens, by default, the holograms render from the head while recording is taking place from the PV camera, which is slightly offset from the center of the head. With this new HoloLens 2 feature, a second HolographicCamera is spun up to render the holograms from the perspective of the PV camera to align better with the recorded video.\r\n\r\nhttps://docs.microsoft.com/en-us/windows/mixed-reality/mixed-reality-capture-for-developers#render-from-the-pv-camera-opt-in\r\n\r\n### WithoutPVCameraRender\r\n\r\n![WithoutPVCameraRender](https://user-images.githubusercontent.com/3580640/69373416-9a15d980-0c58-11ea-8edb-81542bdf27dc.png)\r\n\r\n### WithPVCameraRender\r\n\r\n![WithPVCameraRender](https://user-images.githubusercontent.com/3580640/69373418-9a15d980-0c58-11ea-8cf8-4dafc92ac099.png)\r\n\r\nAs part of that change, this adds a profile for the WindowsMRCameraSettings. This will also be used for https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6531.\r\n\r\n## Changes\r\n* Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6694'"
526803985,6691,b'Add meta validation to PR validation',"b""## Overview\r\nThis PR adds two validation steps to our code validation.\r\n\r\n1. Checks all assets and folders for the existence of their own meta file\r\n2. Checks all meta files for the existence of the file they reference\r\n\r\nThis should prevent both stray metas from being checked in and forgotten metas from being left out.\r\n\r\nIt also moves the code validation step to be the first thing that runs, so we fail fast.\r\n\r\n## Changes\r\n- Fixes: #6678 \r\n\r\n## Verification\r\n~I believe mrtk_dev is currently missing a meta file (see #6684), so the first mrtk_pr should fail.\r\nThen, I'll cherry pick that PR and re-run.~\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/69372166-080cd180-0c56-11ea-8cec-97d86f56712a.png)"""
526788128,6686,b'Fix SR_Triangles and SR_Triangles_Object_Space shader warnings',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6609\r\n\r\nThe original change that added these shaders had a few warnings:\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/5988\r\n\r\nIn particular, there was some code that added while loop that would always end up running once (i.e. it would be equivalent to just not having the loop). This gives a warning in Unity, and the MRTK should be warning-free. This work just unrolls the loop manually (i.e. recognizing that it is only ever run once, just getting rid of the loop)'"
526760202,6684,b'Rename meta that had its folder renamed',"b""## Overview\r\nThis folder was renamed in #6674, but its meta wasn't also checked in.\r\n\r\nRelated #6678 """
526717837,6680,b'Ux/update refactor branch',b'## Overview\r\nux/refactor <- mrtk_development\r\n'
526415174,6677,b'Merge stabilization -> dev',b'## Overview\r\nMerge stabilization -> dev'
526413073,6676,b'Cherry pick docs to stabilization',"b""## Overview\r\nCherry picks some docs that were merged recently to stabilization, where they're also relevant."""
526319196,6675,b'Fix for FileNotFoundException on Mac - Issue 6643',"b'## Overview\r\nFix for FileNotFoundException that appeared on import of the Examples package on a Mac.\r\n\r\n## Changes\r\n- Fixes: #6643 \r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
526306548,6674,b'Fix MSBuildForUnity Collision with MRTK Tools',"b'## Overview\r\nIf you add the MSBuildForUnity v0.8.0 or later, there is a collision with the packaged templates. The way we look for templates is based on the foldername they are contained in, this changes the name for the version checked into MRTK.\r\n\r\nIn the future, we will be removing this version, and relying on MSBuildForUnity.'"
526258659,6673,b'Fix invalid scene transition service profile',"b'## Overview\r\nThe scene transition service profile had some invalid types, fix this by clicking ""repair"" button and updating assets. \r\n\r\nInvalid assets, I clicked ""repair"" to the right to fix these\r\n\r\n![image](https://user-images.githubusercontent.com/168492/69284806-5497d480-0ba4-11ea-831b-b8eef2828378.png)\r\n\r\nCurrently trying to see if I can write a CI script to detect all references to invalid types in assets.\r\n\r\n## Changes\r\n- Fixes: #6669\r\n- Add script to ensure that CI catches any invalid references to assemblies in the profile assets\r\n\r\n'"
526234151,6671,b'Fix path in examples hub documentation',b'## Overview\r\nFix path to ExamplesHub scene'
526220653,6668,b'Fix broken link to the System Keyboard Example',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6581\r\n\r\nThe old link was pointing to the wrong thing (or rather, it was right at one point but files have been moved) - this points it at the right/current thing.'"
526200038,6667,b'README_Button.md Unity UI tweak',"b""## Overview\r\nSimplified Unity UI instructions based on Adam's one-click inspector setup scripts (no need to manually add the Canvas Utility component or set Render Mode to World Space anymore). Also fixed a nearby typo\r\n\r\n## Verification\r\nWent through these new steps several times using the MRTK 2.1 release\r\n"""
526167216,6666,b'Update HowToAddNearInteractivity.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
526082088,6664,b'Rename material to fix capitalization',"b'## Overview\r\nThis material keeps renaming its reference name to its file name, which has a typo wrt capitalization.\r\nThe reference name was updated in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6578'"
526019570,6663,b'Update ControllersPointersAndFocus.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
525972546,6661,"b'First pass on docs formatting, spelling, and updates'","b""## Overview\r\nCherry-picked some formatting changes I've made in working branches for stabilization.\r\nAlso went through some of our docs (would like to get to the rest, on my next bus ride \xf0\x9f\x98\x9c) and fixed up some minor nit formatting and spelling.\r\n\r\n~There will be some merge conflicts with https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6659/, which I can resolve after both are merged.~\r\n\r\nThere were some merge conflicts with https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6659/, which I've cherry-picked into this branch to get them in for stabilization."""
525954060,6659,b'Fix spelling errors and dead links in the coding guidelines.',"b""I was reading this as part of reviewing another change, and noticed some immediate spelling errors really early on in the doc, which can reduce confidence on the quality of the rest of it (i.e. if the first thing you see is a spelling mistake in a long document, it can make you go like... huh...)\r\n\r\nThere was also a broken link (to CI) that was referencing a specific build from ages ago - that build information has long been cleared, so it was a dead link. I've updated that link to point the mrtk_pr build (which I believe is the most relevant given the other context in that area)"""
525382260,6655,b'Add some missing metas',b'## Overview\r\nSome metas for AssemblyInfo.cs files were missing.'
525373063,6654,b'[Docs] Landing page update: Added Galaxy Explorer. Example scene screenshots update',b'## Overview\r\nLanding page update: Added Galaxy Explorer. Added contribution flow diagram to help creators who are not familiar with the GitHub.\r\n\r\n![2019-11-19 17_53_49-README md - MRTK-Public-Microsoft - Visual Studio Code](https://user-images.githubusercontent.com/13754172/69202287-09bf8380-0af6-11ea-8ad6-32b98049d4cf.png)\r\n\r\n![2019-11-19 17_52_43-CONTRIBUTING md - MRTK-Public-Microsoft - Visual Studio Code](https://user-images.githubusercontent.com/13754172/69202289-0cba7400-0af6-11ea-9e31-c594a6ac2f43.png)\r\n\r\n## Preview page\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/tree/prerelease/2.2.0_stabilization_DocsLandingpage1119\r\n\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/prerelease/2.2.0_stabilization_DocsLandingpage1119/Documentation/Contributing/CONTRIBUTING.md'
525372364,6653,b'Update BaseController.SetupConfiguration parameters to no longer take in a source type',"b""## Overview\r\nThis method was taking in an `InputSourceType`, though one is already saved for this controller as part of its `InputSource`.\r\n\r\nInstead of having this second parameter, it's been marked as `Obsolete` and the type is now read from the `InputSource`"""
525370550,6652,b'Moves some methods from WindowsMixedRealityExtensions to SystemNumericsExtensions',"b""## Overview\r\nMoves some methods from WindowsMixedRealityExtensions into a new extensions class in the core.\r\nThese methods aren't specific to the WMR provider."""
525369079,6651,b'Prerelease/2.2.0 stabilization -> dev',b'## Overview\r\nPrerelease/2.2.0 stabilization -> dev'
525365882,6650,b'GridObjectCollection asset migration attempt 2',"b'## Overview\r\nThis is a second attempt to automatically upgrade the GridObjectCollection asset after semantic changes introduced in #6550  (previously, with layout ColumnsThenRows the ""rows"" field was incorrectly used to denote ""columns"").\r\n\r\nThe previous version detected whether an asset should be updated in the `OnValidate` call, however this approach prevented any asset changes from being properly serialized. Assets would not be serialized / saved even after the fields were changed.\r\n\r\n1. Execute script always (in edit mode, also when editing prefabs)\r\n2. On Awake, check if asset upgrade needed\r\n3. If upgrade needed, upgrade asset and log\r\n\r\n# Alternatives attempted but not used\r\n\r\nMethod A:\r\n\r\n1. Detect when editor updates or scenes load\r\n1. Go through all assets of my type in scene\r\n1. For each asset, check if it needs updated\r\n1. Undo.Record, then make the change\r\n\r\nDid not use this from feedback from @Troy-Ferrell that this would cause asset check every scene sace\r\n\r\nMethod B:\r\n\r\n1. In OnValidate...\r\n1. Check if my asset needs updated\r\n1. Undo.Record, then make my change\r\n  a. I also tried making change, then forcing all assets to reserialized but that generated many errors\r\n   b. I also tried making change, then force saving the scene, but the change did not take.\r\n\r\nThis approach modified the assets in memory, but I was not able to actually save the assets / persist the changes.\r\n\r\n## Changes\r\n- Fixes: #6640 \r\n- @cre8ivepark I also made several updates to prefabs in HandMenuLayoutExamples which had incorrectly configured GridObjectCollections. Many of those assets had layout ColumnThenRow but the children were actually laid out RowThenColumn. Additionally, I removed several grid collections that had incorrect padding values.\r\n- Update all scenes & prefabs in mrtk that have gridobjectcollection to have version 1\r\n\r\n'"
525358719,6649,b'Fix Editor Hands with VR',"b'## Overview\r\nThis change swaps out the Editor DLL that is packaged as part of MRTK Foundation. Instead of using the Editor DLL build for standalone platform, it uses the Editor DLL built for WSA platform.\r\n\r\n## Changes\r\n- Fixes: #6391 '"
525344717,6648,"b'Refresh getting started images, add package content details'",b'This change updates the getting started article to include images matching 2.2.0 ux as well as tables describing the package contents (with links to relevant overview articles as available).\r\n\r\nFixes #6453'
525344383,6647,b'Fix Interactable default input action',"b'## Overview\r\n\r\nWhen creating a new Interactable, the inputactionid was set to -1. This is actually kind of silly because on awake, the id is clamped to available values of the input actions profile list. This defaults it back to 0 so at least in the editor it appears correct\r\n\r\n**Before:**\r\n![image](https://user-images.githubusercontent.com/25975362/69198112-7f245780-0ae8-11ea-84e0-d3138bd22105.png)\r\n\r\n**After:**\r\n![image](https://user-images.githubusercontent.com/25975362/69198046-42f0f700-0ae8-11ea-948f-bf1ba3c7a935.png)\r\n\r\n## Changes\r\n- Fixes: #\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
525326121,6645,b'System namespace fix in WindowsSpeechInputProvider.cs',"b'## Overview\r\nRemoved System out of `#if UNITY_STANDALONE_WIN || UNITY_WSA || UNITY_EDITOR_WIN` in WindowsSpeechInputProvider.cs because of missing ref issues while using a Mac #6638\r\n\r\n## Changes\r\n- Fixes: #6638\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
525316025,6644,b'Fix Solver Doc Images',"b'## Overview\r\nImage references had weird path that was redundant and not necessary\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/25975362/69193849-952c1b00-0adc-11ea-9a5d-891091fed8d3.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #5929 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
525304176,6642,b'Add audio and colliders',"b'## Overview\r\nPolishing InteractableExamples scene\r\n\r\n## Changes\r\n- Fixes: #6632 .\r\n- Added AudioReceiver to all Interactable Buttons\r\n- Added BoxCollider to Quads that serve as backing for buttons \r\n- Updated the speech profile asset for the interactable scene to enable Toggle Profiler and Toggle Diagnostics commands\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
525285242,6636,b'Add component menu for all components',"b'## Overview\r\nUpdates all monobehaviours to use AddComponentMenu to get cleaner editor experience\r\n\r\nPrimarily used this Regex to do patch, though some classes did not extend monobehaviour directly\r\n(^\\s*)public class (\\w+) : (MonoBehaviour.*)\\r\r\n$1[AddComponentMenu(""Scripts/MRTK/SDK/$2"")]\\n$1public class $2 : $3\r\n\r\n![AddComponent](https://user-images.githubusercontent.com/25975362/69190190-b852cc80-0ad4-11ea-9b74-c6cad9d70c1a.gif)\r\n\r\n## Changes\r\n- Fixes: #6567 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n\r\n'"
525284175,6635,b'Staging files',"b'This change adds the following files to the MixedRealityToolkit.Staging folder, per #6624.\r\n\r\n- License.txt\r\n- License.txt.meta\r\n- Version.txt\r\n- Version.txt.meta\r\n- README.md\r\n- README.md.meta\r\n\r\nIt also modifies the packaging of Microsoft.MixedReality.Toolkit.Providers.UnityAR.unitypackage to ensure these files are included.'"
525215439,6633,b'add new authors for 2.2.0',b'update the collection of authors to highlight contributions'
524825314,6627,b'Add null check when unregistering global handler',b'## Changes\r\n- Fixes: #6626\r\n'
524739143,6623,b'Merge stabilization -> dev',"b'## Overview\r\nMerge stabilization -> dev\r\nMerging in a private branch, so I could revert #6618 before merging back into dev.'"
524671868,6622,b'Add assembly version information #6276',"b'This change addresses #6276 by introducing AssemblyInfo.cs files for each asmdef in the Assets folder tree. As part of adding the version information, product name and copyright fields have been populated.\r\n\r\nAs part of this change, the updateMRTKversion script has been modified to process these files as well.'"
524667246,6621,b'Minor comment and doc updates for 2.2',"b""## Overview\r\nUpdates some comments and docs that I've been updating as I see them.\r\nAlso updates a test icon."""
524650761,6620,b'package android and ios players in foundation (#6441)',"b'This change completes the work specified in #6441 by updating the build tooling to package prebuilt players in the foundation package.\r\n\r\nVerified this change by running the packaging commands locally and inspecting the contents of the nupkg file,'"
524577790,6618,b'disable packaging of source code in nupkg files',b'This change instructs the build pipeline to not include script source files in the nuget packages.\r\n\r\nThis is done because of an issue with NuGet for Unity and very long file names.'
524566950,6617,b'Build Window improvements 2',"b'## Overview\r\n\r\nAdd activity indicator bar for AppX running task\r\nExtracted build directory to outside all tabs\r\nShow scenes being included in build for Unity build stage\r\nAdd helpbox for no builds found message\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/69082822-bfef7400-09f5-11ea-95e7-22965da92435.png)\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/69082852-cc73cc80-09f5-11ea-99eb-9dfe10b57bcc.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #6520 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
524515499,6616,b'Progress Indicator State Field Fix',"b""## Overview\r\n\r\nTwo of our progress indicators serialized their state field. This gave the impression that the progress indicator's state could be set manually. The fields are now private to prevent unintended usage.\r\n\r\n## Changes\r\n\r\nFixes: #6593"""
524196144,6615,b'Bugfix boundingbox rotationhandle #2',"b""## Overview\r\nFollowing #6528, which introduces bug #6582\r\n\r\n- Now rotating depending on the handle edge orientation (and no the visual mesh itself)\r\n\r\n- Also fixes for scale handles : this seems to work fines with the example scene, but it's hard to know if it will work in every situation.\r\nthis fix will use the center of the mesh as the center of the box collider and will rotate accordingly ot the corner, another option would be to center iton the exact corner position (that's the commit jsut before that sets the center at Vector3.zero\r\n\r\nA unittest checking if the mesh isinside the handleboxcollider won't guarantee it either (box collider size does not depends sololy on the mesh, but mosty on 'size' and 'padding' properties)\r\n\r\n## Changes\r\n- Fixes: #6582 and #6507.\r\n\r\n\r\n## Verification\r\n\r\n- Double check my math :)\r\n- Feel free to cherrypick what you want or do another PR if this can speed up the process for 2.2.0\r\n\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
523767032,6612,b'Prerelease/2.2.0 stabilization -> dev',b'## Overview\r\nPrerelease/2.2.0 stabilization -> dev'
523762642,6611,b'Fix typo in hologram-stabilization documentation',b'The pixels representing the sphere will have a different transform than the far away pixels representing the pillar if the user has **titled** their head slightly.\r\n\r\n->\r\n\r\nThe pixels representing the sphere will have a different transform than the far away pixels representing the pillar if the user has **tilted** their head slightly.'
523750266,6610,b'fix nuget packaging error',b'There were some relative pathing errors in the unityar nuspec file.\r\n\r\nverified fix by running scripts locally'
523731221,6608,b'Document prerequisites for using the Unity Ar settings provider',"b""The Unity AR camera settings provider has some prerequisites that will not be automatically configured when importing packages from unity or nuget.\r\n\r\nThis change adds the steps to the unity ar provider's documentation article.\r\n\r\nIt also updates some helper scripting that allows easy switching from 2018 to 2019 requirements within the repository."""
523724150,6607,b'Update MixedRealityInputAction constructor',"b'## Overview\r\nUpdates a constructor `MixedRealityInputAction` to match the documented optional nature of this parameter.\r\nThis enables us to clean up some overly verbose additions of `MixedRealityInputAction.None` to many interaction mappings, something this constructor already takes care of.'"
523711326,6605,b'fix auto-population of default profile',b'A recent change to the extension services moved the location of the default profiles. This rendered automatic population of the default profile non-functional.\r\n\r\nThis change fixes the pathing issue.'
523702179,6603,b'Refresh profile inspector documentation images',b'This change updates the documentation images to match the new UI for the profile inspectors. It also makes some minor changes to the configuration guide article.'
523689722,6602,b'Fix CanInteract in Interactable',"b'## Overview\r\nCanInteract() in Interactable was used in some of the wrong input handler and other input handlers did not have any guard at all. This change remedies those missing guards.\r\n\r\nEnsure Touch input is not responsive when !IsEnabled\r\nRemove CanInteract guard on focus\r\nAdd IsEnabled guard on TriggerOnClick\r\n\r\nTests\r\n-> Merge TestSelectGlobalInput and TestSelectGlobalInputOnDisabled\r\n-> Merge TestSelectMenuInput and TestInputActionMenuInput\r\n-> Add test for touch states (both enabled & disabled)\r\n-> Add test for TriggerOnClick public API\r\n-> Add HasFocus asserts on InteractableToggleCollection test (aka RadialSet)\r\n-> Clean up helper methods and variables for re-use in InteractableTests class\r\n\r\n![interactable-caninteract](https://user-images.githubusercontent.com/25975362/68975370-f041d300-07a7-11ea-975e-ab883fa467a2.gif)\r\n\r\n## Changes\r\n- Fixes: #6100 , #6489 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
523651666,6601,b'Always enable View Asset and Documentation buttons in profile inspectors',b'#6597 identified an issue where non-destructive / informational controls were disabled in the profile inspector when showing sub-profile views.\r\n\r\nThis change renders View Asset and Documentation buttons enabled _always_.'
523648032,6600,b'Progress Indicator State Field Fix',"b""## Overview\r\nTwo of our progress indicators serialized their `state` field. This gave the impression that the progress indicator's state could be set manually. The fields are now private to prevent unintended usage.\r\n\r\n## Changes\r\n- Fixes: #6593"""
523635152,6599,b'Polish near interaction docs',"b'## Overview\r\nAs part of the documentation review work, PR to polish near interaction page. \r\n- Re-organized content slightly\r\n- Added media of profiles/inspectors/etc\r\n- Added some additional code examples\r\n- Added see also section\r\n- Fixed markdown syntax errors\r\n- Bolded/italicized/added URLs to some of existing content\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
523631408,6598,b'Update HTKToMRTKPortingGuide.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
523569747,6596,b'Prerelease/2.2.0 stabilization -> dev',b'Prerelease/2.2.0 stabilization -> dev'
523184521,6594,b'Fix incorrectly set up gridobjectcollection assets',"b'## Overview\r\nAfter #6550, many of our scenes and prefabs had gridobjectcollection assets which had row/column configurations that caused the gridobjectcollection upgrade detection to print a warning. This change updates the prefabs / scenes so that no other scenes raise the gridobjectcollection upgrade warnings.\r\n\r\n## Changes\r\n- Fixes: #6580 \r\n- Change the warning to a log message when gridobjectcollection detection possible upgrade from 2.1 to 2.2\r\n- Add one more edge case for detecting grid object collection asset upgrade.\r\n- Change default distance for plane layout from 1m to 0m, since most assets actually wanted to be laid out 0m from parent\r\n\r\n## Verification\r\nI opened all MRTK scenes in editor and verified no warnings were printed.\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
523120716,6591,b'Update boundary system to use MRTK type instead of Unity type',"b""## Overview\r\nIn preparation for Unity's future boundary types, this PR looks to remove dependencies on Unity types."""
523113695,6590,b'Create separate package for UnityAR provider',"b'## Overview\r\nPer customer feedback, having the UnityAR provider contained within one of the core MRTK packages (it was previously in Extensions) has the effect of forcing developers to opt in to using the AR Foundation set of packages from the package manager, even if not building a mobile AR application.\r\n\r\nThis change addresses the code layout and build process steps to fix #6574. The documentation changes will follow in a separate PR.'"
523073162,6588,b'Remove duplicate build step',b'## Overview\r\nRemoves a duplicate `Build InEditor WSA` step\r\n\r\n## Changes\r\n- Fixes:\r\n![image](https://user-images.githubusercontent.com/3580640/68891641-1ac35b80-06d6-11ea-92b2-0335e9d587b1.png)'
522585717,6583,b'Interactable inspector polish',"b'## Overview\r\nThis change is a polish pass on Interactable inspector. Primarily event receivers and themes details of an interactable would render everything by default. Especially for complex Interactable prefabs, this could be a bit overwhelming and annoying to scroll/navigate. \r\n\r\n\r\n- Made theme details and event receiver foldouts hidden by default. \r\n- Removed unused size parameter in inspectoruiutility draw foldouts\r\n- Added helpbox style around events section\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/25975362/68821518-6c6ed600-0643-11ea-8aad-3a69a74bf889.png)\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/25975362/68821623-b1930800-0643-11ea-872b-9bf68dcdd8aa.png)\r\n![image](https://user-images.githubusercontent.com/25975362/68821641-bb1c7000-0643-11ea-83ea-d51da5d1ac86.png)\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
522521048,6579,b'Resolve MSBuildForUnity conflicts with published package',"b'## Overview\r\nThe MSBuild folder, which itself came from the MSBuildForUnity project, contains some of the same GUIDs, which led to conflicts when both MRTK and the published MSBuildForUnity project were imported.\r\nThere were also some menu item conflicts. Both have been resolved in this PR.'"
522520070,6578,b'Remove unused matrixVP to prevent shader error',"b""## Overview\r\nAfter fixing an issue in #6476, it appears to have caused a second shader error.\r\nThis math / variable doesn't even appear to be used, so I've removed it from both shaders.\r\n\r\n## Changes\r\n- Fixes: #6577 \r\n\r\n## Verification\r\nEnsure the features that use these shaders (Lost Tracking Service) still render correctly."""
522470990,6575,b'add wsa editor build support - unblock #6391',b'Issue #6391 needs build support for in-editor wsa nuget packages.\r\n\r\nThis is an independent subset of the changes that are in review as part of #6544.'
522418354,6573,b'Extension service: Hand physics service',"b""## Overview\r\nThis is a fun little extension service I've been using to enable physics interactions and fully articulated hands on HoloLens 2. This is **not** intended to replace or circumvent the MRTK input system.\r\n\r\nThis service simply updates kinematic rigid bodies on fingertip (optionally palm) joints.\r\n\r\nThis allows for:\r\n- Reacting to touch via OnTrigger eventing\r\n- using built in Physics with all fingers\r\n\r\n![image](https://user-images.githubusercontent.com/1186832/68795683-49720100-0606-11ea-992a-e65c279d11e5.png)\r\n\r\n![billboard](https://user-images.githubusercontent.com/1186832/68795768-77efdc00-0606-11ea-8fb9-b0e4191bdb05.gif)\r\n\r\n## Examples\r\n\r\n![pianoChord](https://user-images.githubusercontent.com/1186832/68794899-bb494b00-0604-11ea-89d1-ef11d552f58a.gif)\r\n*MR Playground* physics piano\r\n\r\n![lightning](https://user-images.githubusercontent.com/1186832/68794956-d61bbf80-0604-11ea-8305-7cedac8e0aa2.gif)\r\n@Railboy used a similar method for *Surfaces*, but no Extension service existed at the time, so he had to manage the joints manually.\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
522412313,6572,b'Merge pull request #6528 from gilbdev/bugfix/boundingbox_rotationhandle',b'Bugfix boundingbox rotationhandle\r\n'
522394084,6571,b'Merge pull request #6563 from radicalad/extensionServiceAsmedf',"b'Add #6563 to the 2.2.0 release,\r\n\r\nGenerating extension service assembly definitions & folder clean up\r\n'"
522384493,6570,b'Add camera system documentation',"b'This change adds documentation for the camera system, including how to create a settings provider and documentation for the currently existing providers.\r\n\r\nAlso included is a set of fixes to the table of contents and one code change (mark the base camera provider class as abstract)'"
521899907,6565,b'Prerelease/2.2.0 stabilization -> dev',b'## Overview\r\nPrerelease/2.2.0 stabilization -> dev'
521898694,6564,"b'Make abstract constructors protected, update some data structures to readonly, and some formatting and comment updates'","b""## Overview\r\n1. Updates constructors of abstract classes to protected, since you can't create an instance of an abstract type.\r\n   1. https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1012?view=vs-2019\r\n1. Update some data structures that don't get reallocated at runtime to readonly\r\n1. Fixed some cases of incorrect null propagation on Unity objects\r\n    1. https://blogs.unity3d.com/2014/05/16/custom-operator-should-we-keep-it/\r\n1. Added `static` to EditorProjectUtilities\r\n    1. https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1052?view=vs-2019\r\n1. Formatting and some comment updates"""
521843486,6563,b'Generating extension service assembly definitions & folder clean up',"b'## Overview\r\nThis PR adds the proper assembly definitions for the existing MRTK extension services.\r\n- New assembly definitions for the Extensions `SceneTransitionService` and `LostTrackingService`, including `editor` where appropriate.\r\n- Added folder structure to match `UnityAR` data provider extension service.\r\n\r\n## Changes\r\n- Fixes: #6562 \r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
521806134,6561,b'Merge pull request #6556 from ms738/patch-13',b'Add #6556 to the 2.2.0 release'
521799570,6560,b'Merge pull request #6558 from Railboy/mrtk_double_menu_fix',b'Add #6558 to the 2.2.0 release\r\n'
521743850,6559,b'alphabetization and minor refactoring of the Features section',b'This change re-orders the Features section of the documentation nav-bar to help with discovery of articles.\r\n\r\nThis will not effect the 2.0.0 or 2.1.0 documentation sub-sites.'
521714754,6558,b'Fixes double entry in Create Menu',b'## Overview\r\n\r\n- Fixes: #6557'
521711019,6556,b'Update MRTK_Modularization.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
521257623,6551,b'Merge stabilization -> dev',"b'## Overview\r\nDue to some cherry-picks with changes, this had to be manually merged.'"
521226970,6550,b'GridObjectCollection layout: anchor parent to left/center/right and top/middle/bottom',"b'## Overview\r\nThe current GridObjectCollection will tile the objects with the parent object in the center of the collection - this great if you have a collection that you want to appear in the middle of something, but if you have a UI where you have a grid of buttons, which you want to appear going from the top left of a place and then growing toward the bottom right, this makes things difficult (you need to duplicate the layout logic to figure out where the buttons will be, and then move the parent object to JUST the right location).\r\n\r\nThis change adds the ability to lay out the buttons so that the parent is in the left/center/right x top/middle/bottom of the collection.\r\n\r\n![layout](https://user-images.githubusercontent.com/168492/68625783-d4c88680-048e-11ea-84c8-8ef06b73feea.gif)\r\n\r\n\r\n\r\n## Changes\r\n- Fixes: #4777 \r\n- Add a new field named ""anchor"" to specify how objects should be tiled. Works with all types of surfaces.\r\n![image](https://user-images.githubusercontent.com/168492/68626891-3c7fd100-0491-11ea-8177-7a55ca53cbca.png)\r\n\r\n- Adds tests to verify that all anchor layouts tile content correctly\r\n- When layout type is ""Columns then rows"", ask user to specify number of columns instead of number of rows. \r\n![image](https://user-images.githubusercontent.com/168492/68626418-2f161700-0490-11ea-823f-9e2b928ec08b.png)\r\n![image](https://user-images.githubusercontent.com/168492/68626454-40f7ba00-0490-11ea-95d1-dd8ce5ed3388.png)\r\n\r\n- Modify Rows and Columns property so that users cannot change rows if layout type is `ColumnsThenRows`, and vice versa\r\n\r\n\r\n## Breaking changes\r\n- If any assets have layout type ""ColumnThenRow"", update your asset to specify number of columns that should exist in your grid.\r\n\r\n## To Do\r\n * [x] Remove breaking change by fixing up asset or offering button on validate to fix incorrect row / columns\r\n * [x] Add documentation for this change describing anchor. Also add explanations around layout fields\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
521210508,6549,b'Add base class for camera settings providers',b'This change adds a base class to handle the required properties and methods defined in the IMixedRealityCameraSettingsProvider interface.\r\n\r\nThe experimental UnityAR provider has been updated (with some other small changes) to use the base class.'
521201093,6548,b'Cherry pick docs to stabilization',b'## Overview\r\nBrings over #6545 and #6530 to stabilization.'
521197244,6547,b'Add test for Interactable disabled on start',"b'## Overview\r\nFix for #6508 went into stabilization branch but did not add a test to cover this case for the future. This change does that.\r\n\r\n## Changes\r\n- Fixes: #6508 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
521193186,6546,b'Add WMR camera settings provider',b'## Overview\r\nAdd WMR-specific camera settings provider.\r\n\r\nA custom profile will be added to enable #6531 and https://docs.microsoft.com/en-us/windows/mixed-reality/mixed-reality-capture-for-developers#handle-the-additional-holographiccamera-render-in-unity'
521188503,6545,b'Update EyeTracking_ExamplesOverview.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
521179494,6544,b'add build rule for android and ios players',"b'With the addition of the experimental Unity AR camera settings provider, MRTK has a need for precompiled Android and iOS players, when distributing via NuGet.\r\n\r\nThis change enables the build rules for these players. Once approved and merged, the nuspec files will be updated to include these player builds.\r\n\r\nThis is part 1 of the change that will resolve #6441'"
521151943,6543,b'Reverting default hand mesh material ',"b""## Overview\r\nWith #6486, the default hand mesh material has been updated to use pulse shader. The hand mesh won't be visible unless the developer checks 'Auto Pulse' in the material or event-driven pulse script. Since this is an experimental feature, to avoid confusion, updated these:\r\n- Renamed new pulse shader as **MRTK_ArticulatedHandMeshPulse**.mat\r\n- Checked 'Auto Pulse' in the material \r\n- Restored the original white/gray, always visible **MRTK_ArticulatedHandMesh**.mat\r\n- Reverted ArticulatedHandMesh.prefab to use the original **MRTK_ArticulatedHandMesh**.mat \r\n- Updated the description panel in the **PulseShaderExamples** scene and the readme file.\r\n- We will replace the default in the next release when we have shell-parity pulse behavior.\r\n"""
521116913,6542,b'cherry-pick teleport pointer fixes from Alexees',"b""This change brings @Alexees' teleport pointer fixes into the 2.2.0 release and reduces the number of calls to Mathf.Pow()"""
521101105,6540,b'fix helper method to honor new code validation rule',b'Updates the InitializeCamera method to honor the code validation rule re: calling Camera.main'
521100793,6539,b'Add test for Interactable disabled on start',"b'## Overview\r\nFix for #6508 went into stabilization branch but did not add a test to cover this case for the future. This change does that.\r\n\r\n**NOTE:** Requires merge of stabilization to mrtk_development before check-in\r\n\r\n## Changes\r\n- Fixes: #6508 \r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
520353539,6536,b'Couple of fixes for the TeleportPointer',"b'## Overview\r\nThe TeleportPointer has a few minor issues this fixes.\r\n\r\n1. the input threshold check is a square shaped version. I made it round\r\n\r\n2. The rotateActivationAngle is checked only for the pre-90-degree portion of the provided value, past 90, the threshold is not checked. the comments state that ""Half the rotation activation angle"" is calculated, but the value is actually used twice, as it\'s ""mirrored"" around the sides and not just used towards the front.\r\n\r\n3. the backStrafeActivationAngle check misses out on 180 backwards exactly.\r\n\r\n## Verification\r\n1. use common sense\r\n\r\n2. try turning when pressing the analog stick to the slight but slightly to the back\r\n\r\n3. try backstepping exactly backwards'"
520309251,6535,b'Prerelease/2.2.0 stabilization -> dev',b'## Overview\r\nPrerelease/2.2.0 stabilization -> dev'
520294754,6534,b'Update Camera.main references -> CameraCache',b'## Overview\r\nUpdates all existing references to `CameraCache.Main` and adds PR code validation to prevent additional references from entering the repo.\r\n\r\n## Changes\r\n- Related to https://github.com/microsoft/MixedRealityToolkit-Unity/issues/848'
520274064,6533,b'Ensure test prep creates a main camera in the scene',"b'Previously, the play mode tests relied upon behavior in MRTK where it creates a main camera if one cannot be found in the scene.\r\n\r\nIn preparation of MRTK enforcing correct scene setup by the developer (in 2.3.0), test preparation now ensures a main camera is present in the scene before adding the MRTK object.'"
520171343,6530,b'Update InputEvents.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
520162528,6529,b'Add prerelease/2.2.0 to the docs version dropdown',b'## Overview\r\nAdd prerelease/2.2.0 to the docs version dropdown'
520115205,6528,b'Bugfix boundingbox rotationhandle',"b'## Overview\r\n\r\napply rotation on bounds which is created based on `midpointVisual` to be applied to the box collider taht is created on `midpoint`.\r\n\r\n![image](https://user-images.githubusercontent.com/49415246/68494294-77de8d80-024e-11ea-9e6c-b0acbbd39fb4.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #6507  .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
519785255,6526,b'Fix interactable to change states after setup of statemanager',"b'## Overview\r\nWe tried to set the enabled state before we had set up a statemanager yet and thus nothing was actually applied\r\n\r\n## Changes\r\n- Fixes: #6508 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
519779754,6525,b'Fix Interactable Enabled on start',"b'## Overview\r\nWe tried to set the enabled state before we had set up a statemanager yet and thus nothing was actually applied\r\n\r\n## Changes\r\n- Fixes: #6508 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
519633948,6524,b'Prerelease/2.2.0 stabilization -> dev',b'## Overview\r\nMerge Prerelease/2.2.0 stabilization -> dev'
519596044,6523,b'Updates to InteractableToggleCollection - Part 2 ',"b'## Overview\r\nThe PR with the original fixes for issue #6274 was accidentally merged early #6473.\r\n\r\nThis PR is the remaining updates to InteractableToggleCollection based on feedback.\r\n\r\n## Changes\r\n- Updates to ToggleList set behavior in InteractableToggleCollection\r\n- Updates to InteractableToggleCollectionInspector - check for out of range index\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
519587006,6522,b'Create InteractableToggleCollectionInspector.cs.meta',b'## Overview\r\nAdds a missing meta from a new file.'
519586628,6521,b'Fix CI NuGet warnings',b'## Overview\r\nFixes some warnings that have been popping up recently.\r\n\r\n## Changes\r\n- Fixes: #6517'
519569533,6518,b'update mrtk_development version number from 2.2.0 -> 2.3.0',"b'Now that we have branched for 2.2.0 stabilization, the development branch becomes v2.3.0'"
519558299,6516,"b'Revert ""add hololens2 inputsimulationprofile""'","b""Reverts microsoft/MixedRealityToolkit-Unity#6393\r\n\r\nPR #6393  aimed to change the default behavior of the Hand Interaction example scene to turn use eye simulation. It's very good to know that it's possible to have the desired behavior in #6393 by modifying the input profile. However, one of the goals of MRTK is to have defaults that match the interaction model of HoloLens and Windows Mixed Reality. \r\n\r\nPR #6393 had the effect of turning on the head cursor when no hands are present, which does not match shell parity. There is also a second bug: the gaze cursor turns on if a hand is near a grabbable or touchable object, issue #6496.\r\n\r\nFixes: #6496 \r\n\r\n\r\n"""
519531137,6515,b'Update Overview.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
519520425,6514,b'Update hologram-stabilization.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
519489341,6513,"b""Reserialize scene system profiles based on the state of the repo's scenes""","b""## Overview\r\nThese profiles keep reserializing themselves every time the repo is opened, since the referenced scenes don't exist in the repo project's build list.\r\n\r\nThese profiles should serialize themselves back in an end user's app when the necessary scenes are added."""
519250561,6510,b'Fix RotateAboutGrabPoint and RotateAboutObjectCenter far interaction',"b'## Overview\r\nRotateAboutGrabPoint was not applying hand rotations for far interaction, so that you can rotate objects from a distance. This fix enables that.\r\n\r\nRotateAboutObjectCenter far interaction was working like RotateAboutGrabPoint was supposed to; objects could be rotated from a distance, but they were rotated about the grab point rather than the object centre.\r\n\r\n## Changes\r\n- RotateAboutObjectCenter far interaction now rotates about the object centre as described in #6494.\r\n- RotateAboutGrabPoint far interaction now rotates about the grab point using the hand rotation as described in #6495.\r\n- RotateAboutObjectCenter manipulation is now relative to the hand grab point (between the index finger and thumb) rather than the palm. This makes far rotation feel more natural.\r\n- Fixes: #6494, #6495.'"
518984856,6506,"b'Re-add generate C# projects to build window, when relevant'","b'## Overview\r\nRe-adds this option to the build window, only displayed when the .NET backend is selected.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/68352220-99a70b80-00ba-11ea-85ab-f437bc2412e5.png)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6505'"
518972960,6504,b'Update MaterialInstance warning',"b""## Overview\r\nUpdates the warning in MaterialInstance according to #6271, to downgrade it from an assert error to a warning. It also updates the message slightly.\r\n\r\nI wasn't able to add the `Renderer` name, since this is a static method and the renderer reference requires an instance.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6271"""
518948102,6503,b'[Experimental] Additional Hand Menu Layout Examples',"b'## Overview\r\nA new Hand Menu Example Layouts scene, with 4 layout options and tuning unique Hand Constraint Palm Up component.\r\n\r\n![191107_HandMenuLayoutExamples_Screenshot](https://user-images.githubusercontent.com/38055323/68433039-7a67b700-016a-11ea-9a49-e837e30f2266.png)\r\n\r\n\r\n## Changes\r\n- additional hand menu layout prefabs with unique hand constraint tunings\r\n- added toggle menu to switch between layouts\r\n- customized slider prefab and script to one of the hand menu layouts\r\n- edited scene description text\r\n- polished toggle panel in original Hand Menu Example scene\r\n'"
518859929,6502,b'Clean up build window',"b'## Overview\r\nBuild window inspector changes. This is a first phase of review for Build window and bring up of the feature area. This change is primarily eliminating key error areas and simplifying the code to be more manageable, readable, and easier to navigate. Additional issues are tracked in #6520 \r\n\r\nGeneral refactoring to break up monolithic functions into sub-components\r\nGeneral refactoring to simplify redundant code into re-usable functions\r\nCleaned up UI\r\n\r\nKey areas:\r\n- Build directory selection is now selected via FolderPanel utility instead of just a string (still broken to only point relative to project)\r\n- Deploy tab had some weird code handling for if a target was 127.0.0.1 and how it updated machine name. Many of the assumptions in the code have been removed\r\n- Simplified access of CurrentConnection and CurrentConnectionIndex, moving guards to these properties instead of scattered throughout code\r\n- Added additional GUIContent constant labels\r\n- Parallelized tasks for installing/uninstalling appx instead of waiting for each one \r\n\r\n**BEFORE**\r\n![original-build-window](https://user-images.githubusercontent.com/25975362/68451170-82dbe400-01a2-11ea-8678-95fd42e4a300.gif)\r\n\r\n**AFTER**\r\n![new-build-window](https://user-images.githubusercontent.com/25975362/68451221-be76ae00-01a2-11ea-8a98-39208ebd5475.gif)\r\n\r\n**New Deploy view**\r\n![UpdatedDeploy](https://user-images.githubusercontent.com/25975362/70950475-8ec68b80-2015-11ea-8db8-2fb73d97eed9.gif)\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
518807150,6501,b'Update build tools deploy name when HoloLens is attached',"b'## Overview\r\nWhen a HoloLens is detected attached, the build window will now display ""HoloLens over USB"" instead of ""Local Machine"". The IP Address was currently left alone to prevent downstream effects that are currently hardcoded for those words but behave correctly.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/68339695-efb78700-0099-11ea-96c8-3a153d24a342.png)\r\n\r\nThere is still more work to be done here to improve the build window, currently planned for 2.3.\r\n\r\n## Changes\r\n- Helps with #5698 '"
518804066,6500,b'remove release branches from build status',"b'Before re-enabling listing the build status display of our previous releases, we should consider whether or not this is valuable information if the builds get run only once (at release time).\r\n\r\nThis change removes the release branch status display.\r\n'"
518688810,6499,"b'ManipulationHandler: add Pointer field for manipulation started, ended, hover events'","b'## Overview\r\nI ran into a case when prototyping where it would be helpful to know which pointer initiated a manipulation start / end or a hover enter / exit. this change adds that field to the manipulation events, and creates a test to verify that field is not null.\r\n\r\n## Changes\r\n- Fixes: #6498 \r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
518681543,6497,"b'Classify AR Foundation provider as experimental, fix for 6461'","b'This change addresses #6461 by checking to see if the xr settings device name is null or empty when running on android. it also removes the async check for device support.\r\n\r\nAt the same time, the ar foundation camera settings provider is being moved into the extensions package under a new providers folder. Additionally, it is being placed in an experimental folder while the provider gains community exposure and feedback.'"
518636225,6493,b'Fix error when interactable asset has invalid even receivers',"b""## Overview\r\nIt's possible for Interactable to be working fine but to have some event receivers with empty `iEvent.ClassName` fields. When this happens, the Interactable works, but logs an error which can be disruptive to users (shows up in error console on HoloLens, for example). Since this is not actually breaking functionality and it is not clear how to fix this asset issue without rebuilding an asset. Since this is not actually an error customers can do anything about, log this as a warning instead.\r\n\r\nThe net result is after this change users no longer see error messages in their console window when using interactable, but will see warnings in the logs. Interactable functionality is not impacted.\r\n\r\n## Tests\r\nI did not add tests for this bug fix because it's unclear how to actually get assets into this error state, and this change does not actually change behavior -- it just turns an error into a warning. Reason to turn this into a warning is when it is an error the logs end up being visible to the user and there's not much customers can do about the error without modifying the interactable code (since it's not clear how to fix the asset).\r\n\r\n## Changes\r\n- Fixes: #6464 \r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
518338452,6492,b'HTK keyboard port',"b""## Overview\r\nWhile (hopefully) more and more platforms coming into play, not every platform provides a native keyboard.\r\nThe old Microsoft HTK introduced a keyboard even for their own product family, but native keyboards were added and so that keyboard was not ported over to the MRTK.\r\nBottom line, there is no keyboard solution available for at least the following two devices:\r\n- Oculus Go\r\n- Oculus Quest\r\n\r\nThis PR is a port of the Keyboard into MRTK with the least amount of effort to just get it to work the way it did back then.\r\nIt is not perfect (Caps Lock is missing, caret missing, text on keyboard startup overridden etc.) but for now it gets the job done.\r\n\r\nThe idea is, once #6036 is approved, to add the keyboard as a fallback. Once that's done the platform does not matter anymore, there is always a keyboard available.\r\n\r\n## Changes\r\n- Fixes: #6466"""
518194540,6488,b'Update unsafe code build tool to only run when contextually relevant',"b""## Overview\r\nThe build configuration added in #5891 sometimes ran in contexts where it shouldn't, like IL2CPP builds where additional C# projects aren't generated.\r\n\r\nI wrapped all calls, including making the checkbox visible, in a check for both .NET as the scripting backend and Unity C# Projects enabled.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6308"""
518191381,6486,b'[Experimental] Pulse shader for hand mesh and spatial mesh visualization',b'## Overview\r\nAdding shader & example scene of the shell-style animated visualization for the hand mesh and spatial mapping mesh. \r\n\r\n![MRTK_SpatialMesh_Pulse](https://user-images.githubusercontent.com/13754172/68261851-3489e200-fff6-11e9-9f6c-5574a7dd8db7.gif)\r\n\r\n![MRTK_HandMesh_Pulse2](https://user-images.githubusercontent.com/13754172/68262035-e4f7e600-fff6-11e9-9858-796afd1cabc5.gif)\r\n\r\n## Changes\r\n- Fixes: #6485\r\n\r\n## Example scene\r\n**PulseShaderExamples.unity**\r\n![2019-11-05 17_54_58-Unity 2018 4 12f1 Personal -  PREVIEW PACKAGES IN USE  - ExamplePulseShader unit](https://user-images.githubusercontent.com/13754172/68262526-5edc9f00-fff8-11e9-88f4-423b9303123e.png)\r\n\r\n'
518177884,6483,b'Move material from examples to SDK package',"b'## Overview\r\nFix material that should be in the SDK package but is currently in the examples package\r\n\r\n## Changes\r\n- Fixes: #6438 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
518175510,6482,b'Improve profile inspector code',"b'## Overview\r\nThis PR does two primary changes\r\n1) Redundant inspector code for rendering data provider profile configurations under some core services has been simplified to one base class and thus re-usable by the core system profile inspector classes\r\n2) This change modifies rendering of core system profile under the MRTK config if they are not enabled. If disabled, an info message is rendered to make it clear to the user the system is OFF.\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/68259456-c261cf00-ffee-11e9-9699-ec29ef3a5a11.png)\r\n\r\nNew clone message:\r\n![image](https://user-images.githubusercontent.com/25975362/68259479-d1488180-ffee-11e9-9232-be34a260a1d1.png)\r\n\r\n## Changes\r\n- Fixes: #6372 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
518143844,6480,b'Remove extraneous Debug.Log messages',"b'## Overview\r\nRemoves some `Debug.Log` messages when nothing actually changed. All of these have logs for when things change or fail to change, but not when the ""regular"" path is taken.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6468'"
518141871,6479,b'Fingertip cursor translation/alignment',"b""## Overview\r\n\r\nCurrently, the fingertip cursor rotates to a target surface orientation while approaching touchable UI. It does not translate and is stationary at a location slightly above the fingertip. This only partially matches shell behavior. In the shell, the cursor rotates and translates to the pad of the fingertip while approaching UI. The amount it translates is relative to the perpendicularity of the fingertip's direction and the normal of the surface. \r\n\r\nContained in this PR is functionality that translates the fingertip cursor in relation to touchable UI. See below for behavior comparison:\r\n\r\n| Current behavior | Suggested behavior |\r\n| ------------- | ------------- |\r\n| ![FingertipCursorPre_Trim](https://user-images.githubusercontent.com/16657884/68256793-e5d44c00-ffe5-11e9-9b66-572f675e8edd.gif)  | ![FingertipCursorPost_Trim](https://user-images.githubusercontent.com/16657884/68256795-e836a600-ffe5-11e9-9aab-ea5ae5687417.gif)  |\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6478\r\n"""
518096942,6477,b'Fix VS ordering in UwpAppxBuildTools',"b'## Overview\r\nBools resolve as false first, then true, in default ordering. This updates by using the `Descending` APIs instead.\r\n\r\n## Changes\r\n- Fixes: #6297'"
518094747,6476,b'Update SR_Triangles_Object_Space.shader to use UnityObjectToClipPos',"b'## Overview\r\nThis shader has some Unity warnings, including use of an old API. This change removes the old API and updates to `UnityObjectToClipPos`.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/68252097-6b9dca80-ffd9-11e9-85c4-869f31dc9380.png)\r\n\r\n## Changes\r\n- Fixes part of #6475 (the `UNITY_MATRIX_MVP` part)'"
518059497,6474,b'Update text materials to write to depth by default',"b'## Overview\r\nUpdate font materials to write to depth by default. This primarily fixes the HandInteractionExamples scene from having wavy font with depth LSR on\r\n\r\nAdded invisible quad behind unity UI canvas example to write depth\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/25975362/68248020-ddbde180-ffd0-11e9-8157-ee3694742e7c.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/25975362/68247888-99324600-ffd0-11e9-9f70-2423dcb2cb0e.png)\r\n\r\n## Changes\r\n- Fixes: #6449 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
517972182,6473,b'Update to InteractableToggleCollection - Fix for 6274',"b'## Overview\r\n\r\nFix for issue #6274 \r\n\r\nChanging the CurrentIndex property in InteractableToggleCollection via script or the inspector did not update toggle states within the group.  \r\n\r\nThe changes added get/set methods to the CurrentIndex property and updated SetSelection to trigger an OnClick event. \r\n\r\n## InteractableToggleCollection Behavior BEFORE \r\n![BeforeITCRefactor](https://user-images.githubusercontent.com/53493796/68235292-d8a06880-ffb7-11e9-9444-07e8c3fcab8a.gif)\r\n\r\n## InteractableToggleCollection Behavior AFTER \r\n![AfterITCRefactor](https://user-images.githubusercontent.com/53493796/68235326-eb1aa200-ffb7-11e9-9d34-f5c4d37ef4fb.gif)\r\n\r\n## Changes\r\n- Added custom inspector for InteractableToggleCollection\r\n- Updated InteractableToggleCollection.cs\r\n- Added Test for the changes in InteractableTests\r\n\r\n## Verification\r\n- pull the changes\r\n- open unity project\r\n- add MRTK to the unity project\r\n- add the RadialSet prefab\r\n- press play and change the index in the InteractableToggleCollection, the toggle should be updated to match the index input\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
517625073,6467,b'Mrtk CoreServices expression bodies',b'## Overview\r\nAccording to the coding guidelines we should\r\n\r\n> Use expression-bodied members and auto properties where possible\r\n\r\nso I did a little cleanup work in the CoreServices class'
517504758,6465,b'Example scene updates: audio clip & material option update',b'## Overview\r\n- Added new shell audio files from Denise\r\n- Assigned new shell audio files for Bounding Box and Manipulation for HoloLens 2 examples\r\n- Checked hover light & proximity light for some of the default materials that are used in the example scenes to provide proper affordance.\r\n\r\n*New shell audio has shared audio clips for Manipulation and Bounding Box events.\r\n![2019-11-04 17_23_51-Unity 2018 4 12f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/68172496-a1d14080-ff2c-11e9-9167-222b71bccb0b.png)\r\n\r\n![2019-11-04 17_23_44-Unity 2018 4 12f1 Personal -  PREVIEW PACKAGES IN USE  - HandInteractionExamples](https://user-images.githubusercontent.com/13754172/68172499-a4339a80-ff2c-11e9-80a0-be801fdd4697.png)\r\n'
517042504,6460,b'interactable scale theme now relative to gameobject initial scale',"b'## Overview\r\nMake scale theme consistent with other themes by having a scale relative to initial object scale and not absolute.\r\n\r\n## Changes\r\n- Fixes: #6459\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
516392317,6457,b'Deprecate constructors taking a registrar parameter',"b'Between RC2 and 2.0.0, the registrar parameter being passed to services (with the exception of the input system) and data providers was rendered obsolete. Unfortunately, the were not removed.\r\n\r\nThis change marks these constructors as obsolete and adds replacement constructors (without the registrar parameter). To support any existing custom service and data provider implementations, the code that performs registration tasks now handles the MissingMethodException and will retry the registration after prepending the registrar to the argument list.\r\n\r\nAdditionally, the focus and raycast providers are now represented in the coreservices class (the reason why the input system needed the registrar)'"
516371088,6456,b'Improve 2019 daily build',b'## Overview\r\nThe Unity 2019 daily build has been failing to build due to missing references. This PR attempts to fix that by copying over an applicable asmdef and manifest.json before attempting the build.\r\n\r\nhttps://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=6464'
516340526,6455,b'Extends SceneInfo refresh to arrays and lists',"b'## Overview\r\n\r\nThis updates SceneInfoUtils to drill deeper into component and scriptable object fields to ensure SceneInfo data are up-to-date in editor and when building.\r\n\r\nSceneInfoUtils will also not try to cache component types while the player is building.\r\n\r\n## Changes\r\n- Fixes: #6429, #6448\r\n\r\n## Verification\r\nTry moving the entire MRTK into a new folder.\r\n- If you open the examples hub scene and enter play mode, the examples hub should still work.\r\n- If you build the project _without first opening any scenes_, the examples hub should also work.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
516284649,6454,"b""Add build tooling to ensure that we don't check in more hardcoded paths""","b""We've fixed a number of hardcoded path related issues in the past, and we're still seeing them get checked in. This adds a verifier to ensure that we don't add new ones, while still having a way to have exceptions in cases where they are actually legitimate.\r\n\r\nThis has exceptions for the existing custom profile generator and test code, along with the scene system .unity files that are breaking arbitrary folder moves."""
516269754,6452,b'Getting started documentation updates based on research study',b'A recent research study pointed out issues with the getting started page. This study focused on navigation and content flow.\r\n\r\nThis change re-orders some sections and clarifies which steps are required and which are optional.'
516266461,6451,b'Adds fade out / fade in duration control in Transition Service',"b'## Overview\r\n\r\nAdds new methods to Transition Service that let you specify fade out / fade in duration.\r\n\r\nFadeInTime and FadeOutTime are now treated as defaults.\r\n\r\n## Changes\r\n- Fixes: #6450\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
515763189,6446,b'Depth Buffer Viewer',"b'## Overview\r\nAdds depth buffer viewer post processing monobehavior and shader. When added to a camera, a second pass is done after rendering to effectively blit the depth buffer as color. \r\n\r\nThis is useful to know what components in a scene are or are not rendering depth. The item can be toggled by the editor settings in the MRTK gameobject.\r\n\r\n![depth-buffer-example](https://user-images.githubusercontent.com/25975362/67987843-aa074400-fbeb-11e9-9b40-f9158f1dc40f.gif)\r\n*In this example, the blue cylinder is transparent with ZWrite off*\r\n\r\n## Changes\r\n- Fixes: #6444 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
515762967,6445,b'[Experimental] PinchSliderBox + PinchSpring',"b'## Overview\r\n\r\nThis pull request introduces two new experimental UX components that have been requested by our partners and designers.\r\n\r\n**PinchSliderBox**: A control that automatically spawns PinchSliders to non-uniformly scale the target of a [TransformScaleHandler](https://microsoft.github.io/MixedRealityToolkit-Unity/api/Microsoft.MixedReality.Toolkit.UI.TransformScaleHandler.html).\r\n\r\n![PinchSliderBox](https://user-images.githubusercontent.com/13305729/67987376-78da4400-fbea-11e9-8f93-db6404e84e3f.PNG)\r\n\r\n**PinchSpring**: Simulates a point mass on a spring to provide spring like interactions.\r\n\r\n![PinchSpring](https://user-images.githubusercontent.com/13305729/67987393-8263ac00-fbea-11e9-99ce-adc9617c2e47.PNG)\r\n\r\nAll of these components have been combined together to simulate a ""fixed axis clipping box"" using the [ClippingBox ](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/README_MRTKStandardShader.html#primitive-clipping)primitive. Use the fixed axis clipping box to peer inside a human heart in the PinchSliderBoxExamples scene. _(Happy Halloween!)_\r\n\r\n![brain](https://user-images.githubusercontent.com/13305729/67987465-afb05a00-fbea-11e9-81fe-c323f2366b52.gif)\r\n\r\nNote, these controls are currently [experimental ](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Contributing/ExperimentalFeatures.html)and still being reviewed by our design team.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5803\r\n\r\nThis pull request also provides a opt-in fix for https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5975 by providing a **EventSystemExtensions.ExecuteHierarchyUpward(\xe2\x80\xa6)** method to bubble input events up.\r\n\r\n## Verification\r\nPlease try the ClippingExamples scene.\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
515679747,6442,b'add pipeline status for our releases',"b'This change updates the readme/git landing page to display the build and docs status for each of our releases. This provides customers information related to the state of the release branches.\r\n\r\nGenerally, the release branches will run through CI once, right after release. However, if a hotfix is ever taken, this status may change.'"
515588852,6440,b'Fix for hand drift and head tilt',"b'## Overview\r\nUnder certain conditions, the simulated hand would drift and the head would rotate. There are .gifs of this behaviour in the description of #6437.\r\n\r\nPreviously while converting vectors into different spaces in the InputSimulationService, we were performing superfluous transformations that were potentially introducing error. These changes update these functions to use the projection matrix directly to convert between these spaces.\r\n\r\n## Changes\r\n- Fixes: #6437.\r\n'"
514966208,6434,b'Fix extension services not updating the friendly name and default profile.',"b'The current extension services were missing some fields in the MixedRealityExtensionService attribute, specifically:\r\n\r\n- Name\r\n- Default profile path \r\n- Package folder\r\n\r\nIn addition, the extension services profile inspector was not updating the name from the attribute.\r\n\r\nBoth are resolved by this change.'"
514956697,6433,b'DefaultControllerPointer ray brightness',"b'## Overview\r\n\r\nThis PR consists of changes to the DefaultControllerPointer prefab and MixedRealityLineRenderer.cs. \r\n\r\nIncreased parity with shell appearance was made by tweaking public variables in the MixedRealityLineRenderercomponents. All states of the DefaultControllerPointer ray now appear very similar to the shell rays.\r\n\r\nIn addition to editor changes, I wrote a coroutine that occurs on enable of any DefaultControllerPointer. It dims the ray from 100% to 55% by default (these values are customizable). This animation accomplishes two things:\r\n\r\n1. It answers feedback the design team received about the hand ray being too bright.\r\n2. The initial brightness draws attention to the ray and the fade animation to a lower brightness is pleasant, in my opinion :) \r\n\r\nThe video below is not a perfect demonstration of the effect, as the mp4 to gif conversion took away a good bit of fidelity/brightness. In headset, the line does not get as dim as it appears in this gif.\r\n\r\n![2019-10-3012-35-16_Trim (1)](https://user-images.githubusercontent.com/16657884/67895430-b91cc200-fb17-11e9-8599-d9bf36d62df5.gif)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6432\r\n'"
514895965,6431,b'Fix and simplify HandConstraint solver tracking',"b""## Overview\r\nHandConstraint is simplified to follow properties set in SolverHandler instead of overriding and tracking hands itself. Further, the UnityEvents have been updated to fire properly.\r\n\r\n\r\n- HandConstraint now leverages SolverHandler's ability to track/switch between particular hands. \r\n- HandConstraint can choose to ignore the tracked hand if it considers it not valid or request SolverHandler to switch hands (if possible) via PreferredTrackedHandedness\r\n- Added PreferredTrackedHandedness property which indicates which hand to default to when both are available\r\n- UnityEvents now allocated by default so easier extension via code\r\n- OnHandActivate/Deactivate fire whenever a hand is supported or not\r\n- Created HandednessExtensions to simplify code interaction\r\n- HandMenu prefab updated to hide onFirstHandFound and onLastHandLost\r\n\r\nRelated PR: #6311 \r\n\r\n## Changes\r\n- Fixes: #6430\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
514880877,6428,"b'Revert ""Revert ""Add support for mobile AR via Unity\'s AR Foundation""""'",b'Reverts microsoft/MixedRealityToolkit-Unity#6427.'
514846570,6427,"b'Revert ""Add support for mobile AR via Unity\'s AR Foundation""'",b'Reverts microsoft/MixedRealityToolkit-Unity#6344 to unblock our CI while we figure out the build issue.'
514835062,6426,b'Fix extension service registration logging',"b""## Overview\r\nRemoves the general logging if an extension service failed to register.\r\nAs far as I saw from my digging, every actual failure case prints its own specific log, except for the benign cases like this one, where the platform just isn't supported.\r\n\r\nAlso formatting.\r\n\r\n## Changes\r\n- Fixes: #6421 """
514810109,6424,b'Proper collisions while manipulating',"b'## Overview\r\nPreviously while manipulating a rigidbody object there was no collisions with static colliders, and the collisions with rigidbody objects were jittery and incorrect. Also, making a bounding box object into a rigidbody would in some cases cause the bounding box to collide with its own rotate/scale handles.\r\n\r\nThese changes ensure that rigidbody manipulation gives the manipulated object proper velocities and angular velocities, so that unity can do proper collision response. The velocities are assigned to emulate existing smoothing.\r\n\r\n## Changes\r\n- `ObjectManipulator` uses lerp/slerp when no rigidbody attached, else uses velocity/angular velocity.\r\n- Ensure that `BoundingBox` rigRoot is has the target object as its parent.\r\n- Add new tests for new collision behaviour.\r\n- Add sample scene.\r\n- Fixes: #6268.\r\n\r\n### Before\r\n![no_collisions](https://user-images.githubusercontent.com/47415945/67878939-060e9180-fb34-11e9-801d-72c5497c5420.gif)\r\n\r\n### After\r\n![yes_collisions](https://user-images.githubusercontent.com/47415945/67878975-158dda80-fb34-11e9-9041-4259950d3089.gif)\r\n'"
514727581,6423,b'Port RotateAboutObjectCenter fix',"b""## Overview\r\nRotateAboutGrabPoint now allows you to rotate an object at a distance using one handed far interaction as described in #5957.\r\n\r\nThis has been fixed on `feature/ux_refactor` for a few weeks, but we feel like it's worth getting this fix in for 2.2.\r\n\r\n## Changes\r\n- `RotateAboutObjectCenter` now uses grip pose rotation, rather than pointer rotation.\r\n- Fixes: #5957.\r\n"""
514319623,6422,b'Fix mouse rotation documentation',"b'## Overview\r\nHand rotation was inaccurate\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
514304115,6420,"b'Coding guidelines: copyright, [experimental] tag'","b""## Overview\r\nMake a few improvements to coding, experimental guidelines:\r\n\r\n1) Remove requirement about copyright block, it's no longer required: https://docs.opensource.microsoft.com/content/releasing/copyright-headers.html#copyright-headers-in-microsoft-oss-project\r\n\r\n2) Add section about adding [Experimental] tag to experimental features.\r\n\r\n## Changes\r\n- Fixes: #6198 \r\n\r\n\r\n## Verification\r\n"""
514302390,6419,b'Update PerfGettingStarted.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
514299412,6418,b'Fix Command line build / ar foundation uwp workaround',"b'The reason the command line build was failing for the .net backed was that when Unity generates c# projects for the uwp solution, it includes all projects. When a project does not support a specific platform, it is expected that the necessary #if / #endif fences are in place. Unfortunately, ar foundation projects do not have the fencing.\r\n\r\nThis change instructs the command line build to _not_ generate c# projects and re-enables the .net backend build in pr validation.\r\n\r\nFixes #6416'"
514267110,6415,b'Update README.md',b'## Overview\r\nUpdate README.md'
514261346,6414,b'Add Android and iOS support to the configuration dialog',"b'This change adds support for configuring the Android and iOS player settings required for building AR Foundation applications.\r\n\r\nThe new settings being configured are:\r\n\r\n- Android\r\n    - Disable Multi-Threaded Rendering\r\n    - Min SDK version == 7.0\r\n- iOS\r\n    - Min OS version == 11.0\r\n    - Architecture == ARM64\r\n    - Set Camera Usage Description\r\n\r\nThis change completes the work required for #6256\r\n\r\nValidated by opening switching between Android, iOS and UWP platforms to ensure the correct settings are displayed in the dialog and modified on completion.'"
514217735,6412,b'Add support for viewing detected controller names in the ControllerMappingTool',"b""## Overview\r\nAs requested at https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5902#issuecomment-533016398, this PR adds the ability to view the detected controller names within the test scene.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/67808219-7f828300-fa53-11e9-8617-a5f1e076d7fa.png)\r\n\r\n(Not sure why it's reading 4 controllers, when only 1 of them is named.)\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/67808284-a345c900-fa53-11e9-9e95-0834b0a9474d.png)\r\n\r\n## Changes\r\n- Fixes: #5832 """
514197305,6411,b'Fix Example Hub scene error / SceneInfoUtils',"b'## Overview\r\nFixes incorrect scene asset reference in the examples hub scene system profile. Also updates SceneInfoUtils to prevent mis-identifying profile assets as scene assets.\r\n\r\n## Changes\r\n- Fixes: #6384\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
514187046,6410,b'Button Configuration Helper',"b""## Overview\r\n- Adds a script to our standard button assets which gathers all commonly modified elements into one place:\r\n\r\n![ButtonRecording1](https://user-images.githubusercontent.com/9789716/70167111-e3175600-167a-11ea-9c52-444509c06105.gif)\r\n\r\n- Buttons can be modified at runtime:\r\n\r\n![ButtonRecording2](https://user-images.githubusercontent.com/9789716/70167525-c92a4300-167b-11ea-8558-067243257617.gif)\r\n\r\n- Adds new methods for icon rendering to standard buttons (sprite and character, in addition to our current quad technique). Icons can be configured in the ButtonConfigHelper script:\r\n\r\n![ButtonConfigHelper](https://user-images.githubusercontent.com/9789716/67803606-a4262d00-fa4a-11e9-85cd-07752035c349.PNG)\r\n- Introduces ButtonIconSet asset, which can store assets for rendering all three icon styles:\r\n\r\n![ButtonConfigHelper2](https://user-images.githubusercontent.com/9789716/67803619-aa1c0e00-fa4a-11e9-86ad-439588cb53db.PNG)\r\n\r\n- Makes it easier to change icons at runtime with helper methods.\r\n\r\n## Font Asset\r\nFont icons were tested using the MDL2 font asset. Because we can't publicly distribute this asset, you will have to [download it here.](https://aka.ms/SegoeFonts?ocid=cxfluent-v1Oct-fluent-segoe)\r\nMicrosoft Design:\r\nhttps://www.microsoft.com/design/fluent/#/windows\r\nHoloLens Icon Font:\r\nhttps://aka.ms/hololensiconfont\r\n\r\n## Changes\r\n- Fixes: #6207\r\n\r\n## Verification\r\n- Verify that there are no unintended interactions with Intractable scripts.\r\n- Verify that this is a non-breaking change, and that projects with modified icon assets will not be affected.\r\n- Write tests.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
514159226,6409,b'Provide an option to defer Keyword/Dictation Recognizer construction',"b'## Overview\r\nThere is an issue with the Hololens devices, that in loud environments the Windows Speech System can end up taking upwards of 20 seconds for initialization. This can result in Quiesce Hangs for the app because of stalled startup or delays. This issue is being tracked here - https://github.com/microsoft/MixedRealityToolkit-Unity/issues/3497\r\n\r\nWe are hoping for a longer term fix from the HL Platform, but in the meanwhile this PR is being introduced to give consuming apps more control on the Recognizer creations. \r\n\r\nFor reference - we are seeing the following callstack appear in our crash dumps - \r\n\r\nntdll!KiFastSystemCallRet\r\nntdll!NtWaitForMultipleObjects+0xa\r\nKERNELBASE!WaitForMultipleObjectsEx+0x133\r\nKERNELBASE!WaitForMultipleObjects+0x18\r\nsapi_onecore!CRecognizer::PerformTask+0xe0\r\nsapi_onecore!CRIT_GETPROPERTYGUID::GetPropertyGuid+0x74\r\nsapi_onecore!<lambda_0dab862286bbdc74be80111d98404563>::operator()+0xa0\r\nsapi_onecore!CSharedRecognizer::FinalConstruct+0x65\r\nsapi_onecore!ATL::CComCreator<ATL::CComObject<CSharedRecognizer> >::CreateInstance+0x74\r\nsapi_onecore!ATL::CComCreator2<ATL::CComCreator<ATL::CComObject<CSharedRecognizer> >,ATL::CComCreator<ATL::CComAggObject<CSharedRecognizer> > >::CreateInstance+0x17\r\nsapi_onecore!ATL::CComClassFactory::CreateInstance+0x66\r\ncombase!ICoCreateInstanceEx+0x665\r\ncombase!CComActivator::DoCreateInstance+0x175\r\ncombase!CoCreateInstance+0xad\r\nWindows_Media_Speech!Windows::Media::SpeechRecognition::CSpeechRecognizer::CreateLocalFacility+0x50\r\nWindows_Media_Speech!<lambda_17a7a82cfd4b41f7cc8d42bd33648d46>::operator()+0x2e7\r\nWindows_Media_Speech!Windows::Media::SpeechRecognition::CSpeechRecognizer::RuntimeClassInitialize+0x2b\r\nWindows_Media_Speech!Windows::Media::SpeechRecognition::CSpeechRecognizer::RuntimeClassInitialize+0xa3\r\nWindows_Media_Speech!Windows::Media::SpeechRecognition::CSpeechRecognizerFactory::ActivateInstance+0x57\r\ncombase!WinRTActivateInstanceInternal+0x1de\r\ncombase!RoActivateInstance+0x9f\r\nUnityPlayer!Unity::PhraseRecognitionSystem::Restart+0xa4\r\nUnityPlayer!Unity::PhraseRecognitionSystem::IncrementEnabledRecognizerCount+0x10\r\nUnityPlayer!Unity::PhraseRecognizer::Start+0xc5\r\nUnityEngineDelegates!PhraseRecognizer_CUSTOM_Start_Internal+0x5d\r\n**[AppName]!$160_UnityEngineProxy::InternalCalls.PhraseRecognizer_CUSTOM_Start_Internal+0x55\r\n[AppName]!$14_Microsoft::MixedReality::Toolkit::Windows::Input::WindowsSpeechInputProvider.StartRecognition+0x2c\r\n[AppName]!$14_Microsoft::MixedReality::Toolkit::Windows::Input::WindowsSpeechInputProvider.Enable+0x1cc\r\n[AppName]!$12_Microsoft::MixedReality::Toolkit::BaseDataProviderAccessCoreSystem.Enable+0x5c\r\n[AppName]!$21_Microsoft::MixedReality::Toolkit::Input::MixedRealityInputSystem.Enable+0x13a\r\n[AppName]!$12_Microsoft::MixedReality::Toolkit::MixedRealityToolkit::<>c.<EnableAllServices>b__59_0+0xf\r\n[AppName]!$12_Microsoft::MixedReality::Toolkit::MixedRealityToolkit.ExecuteOnAllServices+0xa6\r\n[AppName]!$12_Microsoft::MixedReality::Toolkit::MixedRealityToolkit.EnableAllServices+0x61\r\n[AppName]!$12_Microsoft::MixedReality::Toolkit::MixedRealityToolkit.$Invoke42+0x43** \r\n\r\n\r\n## Changes\r\n- Workaround for: #3497\r\n-  Leverage the ""Manual Start"" option of the speech system profile to include the KeywordRecognizer and DictationRecognizer construction. This deferral given the apps more control on when they would like these to get initialized. \r\n- Updated documentation to elaborate on the speech profile properties. \r\n- Nit pick MD-Lint fixes in the documentation.\r\n\r\n## Verification\r\nVerified that the SpeechInputExample and DictationExample do not have regressions on tweaking  the ""Start Behavior"" option. \r\n\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
514154861,6408,b'Improve docs for Lost Tracking Service',b'## Overview\r\nAdded some missing documentation and `<inheritdoc />` tags from https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5988.\r\n\r\nAlso fixes some incorrect null propagation. '
514132709,6407,b'[Shell Parity] Added icon lift on focus to PressableButtonHoloLens2 button',"b""![MRTK_ButtonOffset2](https://user-images.githubusercontent.com/13754172/67797289-bdc17780-fa3e-11e9-8f59-c8b8714dd6b8.gif)\r\n\r\n## Overview\r\nAdded icon lift feedback on focus/hover to PressableButtonHoloLens2 button series by adding a new profile with Interactable's offset theme.\r\n\r\n## Changes\r\n- Fixes: part of shell parity items #4200 \r\n\r\n"""
513631778,6404,b'Bounding Box material update to match the shell. Transparent body on grab/manipulation.',"b""## Overview\r\nBounding Box becomes opaque black on grab/manipulation. It is prominent on MRC captures.\r\nAdjusted Bounding Box's material color.\r\n\r\n## Changes\r\n- Fixes: #6403 \r\n\r\n## Before\r\n![MRTK_BB_Handle1](https://user-images.githubusercontent.com/13754172/59543664-2a3d3f00-8ec1-11e9-9b3d-f9dac38f1334.gif)\r\n\r\n## After\r\n![MRTK_BBMaterialUpdate](https://user-images.githubusercontent.com/13754172/67728551-d41df380-f9aa-11e9-99de-64414a968826.gif)\r\n"""
513621456,6401,b'Doc changes to make it easier to navigate ',"b'We have received feedback that some of our documentation is a challenge to navigate. at the suggestion of @grbury, made some small changes.'"
513614165,6399,b'Daily build was pointing to the wrong MRTK version',"b""## Overview\r\nThe daily build had been failing due to not finding the build artifacts. As far as I can tell, it's because it was looking for the wrong version number."""
513612916,6398,b'Update GettingStartedWithTheMRTK.md',b'## Overview\r\nFixing the 1st circular install reference'
513611848,6397,b'Turn off the .NET build',"b'## Overview\r\nIn order to light up more Unity scenarios in our repo, we need to (temporarily?) turn off the .NET build. \r\n\r\nThis will unblock #6344.\r\nThis will also help #6381.'"
513468731,6395,b'Upgrade to Unity 2018.4.12 and enable depth buffer sharing',"b'## Overview\r\nUnity 2018.4.12 contains some high impact bug fixes, specifically around depth buffer sharing.\r\n\r\nhttps://unity3d.com/unity/whats-new/2018.4.12\r\n\r\nSome notable fixes:\r\n>XR: Added device name for HoloLens 2. (1161756, 1188263)\r\n>XR: Fixed an issue that was causing the depth buffer to lag the color buffer in Windows MR. (1191487, 1191494)\r\n>XR: Fixed SPI shader issue that was causing the right depth buffer to have the left depth buffer data. (1190927)'"
512835401,6393,b'add hololens2 inputsimulationprofile',"b'## Overview\r\ncurrent Default Hololens2 Input System profile  uses the default inputsimulation profile which does not have eye tracking enabled.\r\n\r\nthis leads to strange behavior in unity as described in https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6320\r\n\r\nso, adding a DefaultHoloLens2InputSimulationProfile\r\nwith both eye tracking and articulated hands enabled\r\n'"
512774242,6390,b'Spell check!',b'## Overview\r\nRan a quick spell check through our code.\r\nAlso fixed an instance of tabs -> spaces.'
512765864,6389,b'Convert new array[0] to Array.Empty',"b""## Overview\r\nInstead of allocating 0 length arrays, it's recommended to use the statically allocated empty array instance from `Array.Empty`.\r\n\r\nhttps://docs.microsoft.com/en-us/visualstudio/code-quality/ca1825?view=vs-2019\r\n\r\nNot the biggest deal; I'm not sure if this is worth enforcing a coding guideline over, but something I felt like cleaning up."""
512765039,6388,"b'Add ""toggle ray"" button to toggle features panel'","b""## Overview\r\nAdds a button to turn the hand ray behavior on and off. The hand ray will toggle between default (on if not near a grabbable), and AlwaysOff.\r\n\r\n![image](https://user-images.githubusercontent.com/168492/67610793-fc5ae780-f749-11e9-911e-da32fbfe277c.png)\r\n\r\n## Changes\r\n- Fixes: #6087 \r\n- Add new script for calling SDK functions for enabling / disabling rays. Not adding any new SDK functionality, so don't think this needs tests.\r\n- Added a button visual for toggling rays (added by Yoon)\r\n\r\n\r\n## Verification\r\nVerified by testing in editor.\r\n\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
512755670,6386,b'Directional Indicator from HTK',"b'## Overview\r\nThis change re-introduces the concept of a directional indicator into MRTK v2 from HTK. The component has been refactored to leverage the Solver system which simplifies the code greatly and extends it\'s capabilities to not only the camera as frame of reference.\r\n\r\nThis solver is placed in the experimental category and has an example scene and test to back it up. \r\n\r\n**NOTE:** This current version assumes the ""pointing"" end of the indicator starts as pointing up (i.e Vector3.up)\r\n\r\n![indicator-example](https://user-images.githubusercontent.com/25975362/67609639-9a4ab400-f742-11e9-9d50-6511aede13dc.gif)\r\n\r\n\r\n## Changes\r\n- Fixes: #5115\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
512748527,6385,b'Use controller visualizer inspector for child classes',"b""## Overview\r\nAny classes that derive from our base `MixedRealityControllerVisualizer` class didn't use its special inspector. This lead to some unclear inspectors, even for the WMR-specific visualizer we ship.\r\n\r\nThis change allows child classes to use the inspector we've specially defined.\r\n\r\nCurrent:\r\n![image](https://user-images.githubusercontent.com/3580640/67608651-0676e900-f73e-11e9-8674-4f5e39a8ca0e.png)\r\n\r\nWith this PR:\r\n![image](https://user-images.githubusercontent.com/3580640/67608662-1abae600-f73e-11e9-8a68-47ea18ac984d.png)\r\n\r\n\r\n## Changes\r\n- Related to #5820"""
512727653,6382,b'Increase CI timeout from 90 to 120',b'## Overview\r\nIncrease CI timeout from 90 to 120. We should have a follow-up task to determine if we can parallelize some of these tasks across machines and we if we can cut down on the runtime.\r\n\r\n## Changes\r\n- Fixes: #6381'
512726706,6380,b'Fix for issue #6242',"b""## Overview\r\nWhen I put in a fix for UnityUI based buttons moving visuals getting moved incorrectly, I broke the case where the visual is itself (which it default to if it's null).\r\n\r\n## Changes\r\n- Fixes: #6242.\r\n"""
512659744,6379,b'Add clipping plane to example',"b'## Overview\r\nAdds clipping plane to example scene to demonstrate fixed axis\r\n\r\n\r\n![clipping-heart](https://user-images.githubusercontent.com/25975362/67601556-821a6b00-f729-11e9-90ff-e5f8142448f8.gif)\r\n\r\n## Changes\r\n- Fixes: #5803 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
512234520,6374,b'Add OpenVR controller model loading',b'## Overview\r\nAdds controller model loading for OpenVR controllers. These will load both in-editor and at runtime in compiled apps.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/67533454-d3215500-f67e-11e9-921c-04ddd6981d12.png)\r\n\r\n## Changes\r\n- Fixes: #3332 \r\n\r\n## Verification\r\nEither run for OpenVR in the editor or by building a Windows Standalone app.'
512087888,6373,b'Reserialize CircleIcon.png.meta',b'## Overview\r\nThis file keeps reserializing itself with its sprite ID.'
511636526,6368,b'ControllerPointer hand ray appearance and bug fix',"b""## Overview\r\n\r\nThis PR creates parity between the appearance of MRTK's ControllerPointer prefab's hand ray and the shell's hand ray. Doesn't look like much in the screen grabs, but is noticeable in headset.\r\n\r\nIn the process of these changes, found and corrected a small bug where the line renderer does not display all the way to the cursor. \r\n\r\n| Current Appearance  | Suggested Appearance |\r\n| ------------- | ------------- |\r\n| ![hand-ray-ramping-pre](https://user-images.githubusercontent.com/16657884/67443207-bf132000-f5b8-11e9-932b-6ddca126a27c.PNG) | ![hand-ray-ramping-post](https://user-images.githubusercontent.com/16657884/67443209-c1757a00-f5b8-11e9-8211-5e5142d219ab.PNG) |\r\n\r\n| Current Bug  | Fixed |\r\n| ------------- | ------------- |\r\n| ![hand-ray-ramping-bug-pre](https://user-images.githubusercontent.com/16657884/67443286-0a2d3300-f5b9-11e9-8616-9bf0b317d2f5.PNG) | ![hand-ray-ramping-bug-post](https://user-images.githubusercontent.com/16657884/67443289-0d282380-f5b9-11e9-8b29-601ea0f01ddb.PNG) |\r\n\r\n## Changes\r\n- Fixes: # https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6367\r\n"""
511621855,6366,b'Cursor scaling relativity fix',"b'## Overview\r\n\r\nThe current implementation of cursor scaling based on distance is achieved by an angular scale calculation. The calculation (2 * distance * Tan(angle * 0.5f)) assumes the object has a diameter of 1 unit. In order to make this calculation relevant to the child meshes under the DefaultCursor prefab, I initially (in Commit 7ea09f90c718208e832bd9c41cd79f3c0d739dc6) calculate the bounds of the active child mesh on Start() and divide the results by 2 * magnitude of the bounding box of the mesh. In other words, the approximate diagonal diameter of the mesh. This works as expected and gives a relativity to the original angular scale calculation. At first, this seemed like the right way to go. \r\n\r\nHowever, due to an error I made in calculating the bounding box diagonal magnitude, adding additional cursors to the scene after scene initialization when the user has moved from the world origin, the scaling of the new cursors is not correct. The fix for this was to calculate the bounding box diagonal on the mesh itself via mesh.bounds (local space) rather than the current method of renderer.bounds (world space). The issue becomes more pronounced the further they are from the origin. \r\n\r\nInstead of pushing that fix, I believe this issue and future issues can be avoided by using the angular scale function without a denominator. This would make things easier for a third party developer to grasp as well. Any child meshes underneath the DefaultCursor prefab, added dynamically or by default, will be assumed to have a bounds of (1,1,1). The calculation of an initial bounding box was unnecessary to begin with for the amount of difficulty it might cause in the future.\r\n\r\nThis PR is a pretty straight forward. It removes the denominator and no longer calculates any bounding boxes. Any child meshes under the DefaultCursor prefab will be scaled according to their localScale in the hierarchy, as opposed to their model-space bounding box scale. The only effective difference is a default value of 50.0 instead of 0.65 in the public CursorAngularScale variable. All appearances are the same as 7ea09f90c718208e832bd9c41cd79f3c0d739dc6, hence no screenshots.\r\n\r\n## Changes\r\n- Fixes: # https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6365\r\n'"
511598642,6364,b'Cache controller model instead of reallocating each detection',"b""## Overview\r\n* Adds a controller model cache for platform models, so we aren't reallocating and reloading the glTF model every time the same controller is detected.\r\n* Removes the haptics extensions, as they referenced a DLL we don't currently distribute, so they don't currently work.\r\n* Fixes some null propagation issues\r\n* Removes some duplicate methods\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5437\r\n\r\n## Verification\r\nDeploy an MRTK example scene app to your WMR machine. Open the app, and open a slate while inside the immersive experience. Move your controller's pointer between the slate and the immersive experience. You should see the controller flip back and forth between the shell's model and the app model without much delay."""
511573501,6363,b'Re-add #if !UNITY_EDITOR to AsyncCoroutineRunner',"b'## Overview\r\nThis check was removed in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5951, but is still needed.\r\n\r\n>InvalidOperationException: The following game object is invoking the DontDestroyOnLoad method: AsyncCoroutineRunner. Notice that DontDestroyOnLoad can only be used in play mode and, as such, cannot be part of an editor script.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6353'"
511565464,6361,b'Export spatial mesh data as OBJ',"b""## Overview\r\nThis changes enables ability to write a GameObject and it's mesh data to an OBJ file at runtime. Furthermore, it adds a utility to easily export all spatial mesh data to an OBJ file(s). \r\n\r\nIMPORTANT:\r\nFeature requires an AsyncCoroutineRunner instance in scene. Currently, bug #6362 requires manual workaround by manually adding an instance to the scene.\r\n\r\n## Changes\r\n- Fixes: #6360 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
511535093,6358,b'Update README_MRTKStandardShader.md',b'Fixing a formatting issue with clipping primitives.'
511422279,6356,b'Fix intermittent test failures for ScaleViaHoloLens1Interaction and TestGazeProviderTargetNotNull',"b'## Overview\r\nFixes intermittent test failures  #6121: \r\n- ScaleViaHoloLens1Interaction in BoundingBoxTests.cs\r\n- TestGazeProviderTargetNotNull in FocusProviderTests.cs\r\n\r\nScaleViaHoloLens1Interaction and TestGazeProviderTargetNotNull were tested 200 times with 100% passing with an extra yield return null.\r\n\r\n## Changes\r\n- Added extra yield return null for two tests\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
511328497,6355,b'Making BoundsControl visuals scriptable',"b'## Overview\r\n- all visual components of bounding box are now scriptable objects and can be created in asset menu \r\n![image](https://user-images.githubusercontent.com/36998103/67397371-05f51b80-f5a1-11e9-893a-65fe105c332c.png)\r\n- detangled visuals some more so they won\'t depend on each other anymore\r\n- fixed some bugs in box display: auto flatten mode wasn\'t taken into consideration, creating a rect instead of a cube in flatten mode resulted in a wrong aligned display and the minimum flatten axis scale that can be defined via a property wasn\'t taken into consideration.\r\n- removed some obsolete events\r\n\r\nInspector has fewer options now in default setup:\r\n![image](https://user-images.githubusercontent.com/36998103/67397976-e90d1800-f5a1-11e9-97ef-86eea3545665.png)\r\nIn case there\'s no scriptable object linked, the default scriptable objects are added.\r\n\r\n## Changes\r\n- Part of Bounding Box Refactor: #5340  ""Look into making Bounds Control serialized objects -> scriptable objects""\r\n\r\n## Verification\r\n- ran all existing tests \r\n'"
510982879,6352,b'Edited shader variables to more closely resemble shell appearance',b'## Overview\r\n\r\nQuick fix to exposed shader variables on MRTK_FingertipCursor.mat to more closely match the appearance of the shell fingertip cursor.\r\n\r\n| Expected appearance  | Current appearance  | Suggested appearance |\r\n| ------------- | ------------- | ------------- |\r\n| ![MicrosoftTeams-image](https://user-images.githubusercontent.com/16657884/67342667-9ff88d80-f4e7-11e9-8f81-6279c7b34c91.png) | ![FingerTipPre](https://user-images.githubusercontent.com/16657884/67342697-c1597980-f4e7-11e9-8ef9-23f2bc7a95e2.PNG) | ![FingerTipPost](https://user-images.githubusercontent.com/16657884/67342714-ce766880-f4e7-11e9-9d5a-2dbd77a22a96.PNG) |\r\n\r\n## Changes\r\n- Fixes: #6351 \r\n'
510917256,6348,b'Mrtk development',b''
510884551,6344,"b""Add support for mobile AR via Unity's AR Foundation""","b""## Overview\r\n\r\nThis change introduces support for the mobile AR via Unity's AR Foundation. The support provided by this change is for the camera system (spatial awareness to come in a future PR).\r\n\r\nSupport was added by:\r\n- Adding camera settings provider(s) to the default camera system implementation (via IMixedRealityDataProviderAccess)\r\n- Creating a UnityARCameraSettings provider, profile and inspector.\r\n- Adding 'fallback' support to the camera system's previous behavior when there is no specified camera provider or one cannot be loaded (due to platform settings).\r\n\r\nThis change does not break support for custom camera system implementations.\r\n\r\n**Special thanks to Takahiro Miyaura for the initial PR**\r\n\r\n## Changes\r\n- Fixes: #6256 (still need to apply settings for ios and android on load), #6257, #6292\r\n\r\n\r\n## Verification\r\nI tested on an Android based phone using the HandInteractionExamples demo scene and confirmed the scene tracked and object interaction worked via the touch screen.\r\n\r\nI also tested on a HoloLens 1 to verify the fallback behavior.\r\n\r\n**This PR could use testing on an iOS device**"""
510735536,6342,b'getting started with the mrtk\xe3\x81\xaeV2.1.0\xe5\xaf\xbe\xe5\xbf\x9c #48',b''
510341314,6340,b'Clean up profiles page',"b'## Overview\r\nClean up profiles page\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
510322450,6338,b'Clean up MRTK packages page',"b'## Overview\r\n\r\nClean up the layout of page and add helpful links to service documentation etc.\r\nRedundancy of packages within packages was a bit confusing so keeping to just the four packages\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
510300254,6336,b'Stabilization plane fix',"b""## Overview\r\nStabilizationPlaneModifier did not check if gaze raycast was valid and actually hit an item in it's plane setting. This change fixes that\r\n\r\n## Changes\r\n- Fixes: #6263 \r\n\r\n\r\n## Verification\r\nFollow steps in bug #6263 and notice gizmo plane now at correct distances in gazemode\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
510222252,6334,b'Scene System editor features no longer interfere with prefab editing',"b""## Overview\r\nAdds a check to EditorSceneUtils to ensure we don't execute editor scene features while editing a prefab.\r\n\r\n## Changes\r\n- Fixes: #6312\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n\r\nTry editing a prefab while the scene system is active and all editor features are enabled."""
510210224,6333,b'Adds more verbose error messages to SceneSystem',"b""## Overview\r\nError messages now offer better feedback when a scene isn't found.\r\n\r\n## Changes\r\n- Fixes: #6314"""
510186163,6332,b'Fix link in old pointers page',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: #6323 \r\n\r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
509327345,6329,b'Update UsingVisualProfiler.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
509314386,6328,b'Update DetectingPlatformCapabilities.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
509290481,6327,b'Update SceneSystemGettingStarted.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
509288203,6326,b'Update Profiles.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
509269607,6325,b'Update Overview.md',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
509253755,6322,b'fix preprocessor intellisense error',b'Incorrectly formatted xml comments were creating an intellisense issue that was impacting the ability to debug while running in the Unity editor.\r\n\r\nThis change fixes the comments and resolves the preprocessor errors \r\n\r\nThanks @andreiborodin for indentifying the issue!'
509207109,6321,b'Ux/manipulation handler rework constraints',"b""## Overview\r\nThese changes componentize manipulation constraints in order to achieve the following goals:\r\n- Reduce inspector clutter in `ObjectManipulator` and reduce the worry of cluttering it in future.\r\n- Have one authoritative home for an individual constraints logic, which before was shared between `ObjectManipulator`, `ManipulationMoveLogic` and `TwoHandRotateLogic`\r\n- Add to and separate existing constraints.\r\n- Allow for easy extension of constraints; users should be able to create their own constraints by inheriting from `TransformConstraint`.\r\n\r\n## Changes\r\n- Move constraints into individual classes that inherit from `TransformConstraint`\r\n- Add `ConstraintManager` that knows about a certain object's constraints and ensures that constraints that Scale/Rotation/Translation constraints can be executed separately.\r\n- Constraints methods are invoked by the `ObjectManipulator`, after it has calculated target transform.\r\n- Use the above concept to rework `TransformScaleHandler` as a scale constraint.\r\n- Ensure that inspector and migration button work for these changes.\r\n- Add tests for new constraint components."""
508767184,6318,b'Update MRTK code to use CoreServices',"b'## Overview\r\n\r\nNOTE: No functional changes done. Only re-routing to use CoreServices cache instead of lots of local caches\r\n\r\nThis updates the MRTK code to use the CoreServices helper class\r\n\r\nI know lots of file changes but all the same consistent change and again not a functional change\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
508758906,6317,b'Fix #6316 - service type changes not detected',"b'This change adds Begin/EndChangeCheck calls in each of the anonymous delegates in the MixedRealityToolkitConfigurationProfileInspector.\r\n\r\nThe previous implementation noticed changes to the profiles, but not to the concrete service types.\r\n\r\nfixes #6316'"
508711778,6315,b'Create serializable Project Preferences',"b'## Overview\r\nBefore this change any Mixed Reality preferences were saved per user for their entire development environment. This change introduces a class to handle Project Preferences for individual projects/teams that can be committed and shared via source control.\r\n\r\n- Updated gitignore to not commit MRTK.Generated folder\r\n- Fixed bug where there was no MRTK.Generated.Sentinel file so requesting the folder location of the generated folder always failed\r\n- MRTKFiles now attempts to create Generated folder and track it (places where-ever the Core MRTK folder is found)\r\n- Expanded tests to better cover MRTKFiles utility\r\n- Updated MRPreferences (i.e lock profiles etc) to utilize ProjectPreferences instead of user editor preferences\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/67896350-6cd28180-fb19-11e9-8248-d2b1a3b47709.png)\r\n\r\n## Changes\r\n- Fixes: #6174 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
508472992,6311,b'HandConstraint wrongly set tracked handedness instead of changing current runtime value + trigger missing events',"b'## Overview\r\nfix1:Currently, the handconstraint solver is modifying the SolverHandler ""Tracked Handness"" property during runtime.\r\n\r\nThis is wrong in case the user wants to track ""Both"" hands. the ""TrackedHandness"" property will switch from left and right, and if any outside code is testing this setting, it oculd lead to some bug.\r\n\r\nPlus, there is a ""CurrentTrackedHandedness"" property that is supposed to give the runtime value.\r\n\r\n\r\nfix 2:  onHandActivate is currently not triggered when Both hands are tracked and the constraint is switching from one hand to the other : \r\nexample in the hand menu: \r\n- bring hand one to pop the menu (onhandactivate is triggered)\r\n- bring hand two\r\n- hide hand one\r\n=> menu switches to hand two, but no event is triggered (expecting onhanddeactivate and onhandactivate both triggered)\r\n-hide hand two (onhanddeactivate is triggered)\r\n\r\n## Changes\r\n(fix1)HandConstraint now trigger a refresh on the solver handler side that will update the CurrentTrackedHandedness property without changing the ""TrackedHandness"" setting.\r\nplus when no hand is tracked anymore, we call the refresh again to untrack the hand (see verification below for some possible alternative here)\r\n\r\n(fix2) correctly trigger onHandActivate and onHandDeactivate events\r\n\r\n## Verification\r\n\r\ncurrently have to call the public RefreshTrackedObject() when we only want to \r\nDetachFromCurrentTrackedObject() (but this function is protected).\r\nproblem is the handjointservice updates its tracking hand pointers during LateUpdate, so we have to wait 2 frames before its actually correctly up to date to have the solver correctly detaching tracked hand without attaching it again.\r\nthis seems a bit hacky, so any alternative code (make DetachFromCurrentTrackedObject public ??) is welcome.\r\n\r\n\r\n\r\n\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
508160060,6310,b'Cursor resizing based on distance and angular scale',"b'## Overview\r\n\r\nThis change adds functionality to dynamically resize DefaultCursor prefab based on distance to hit point (or maximum cursor distance if no object is hit) and a user-defined \'percentage of viewport\' property. \r\n\r\nInitially we planned on using the existing Solver ConstantViewSize.cs or writing new functionality ported from the native hkeAngularScalingComponent.cpp class. However, the CursorBase.cs class already had functionality for lerping the scale of the cursor which was stubbed to always pursue a scale of one. Furthermore, it has methods responsible for lerping the position and orientation of the cursor, so I deemed it necessary to add the dynamic scaling directly to CursorBase.cs.\r\n\r\n~~The functionality is controlled via two exposed variables on the CursorBase.cs class. One bool, ""ResizeCursorWithDistance"" and one float ""CursorSizeAsPercentageOfViewport."" The former toggles the functionality and the latter is a value between 0f-1f that will scale the reticle to 0-100% of the viewport. Default value is 0.0125 which is visually identical to native appearance. I elected to use percent of viewport as opposed to angular size because it is more easily understood. I would be open to critiques on this if anyone feels strongly about angular scale being a more effective method.~~\r\n\r\n[EDIT]\r\nI now use angular scale instead, to account for multiple platform differences in VFOV. \r\n\r\nWe also explored having different CursorSizeAsPercentageOfViewport values dictated by separate PointerProfiles (i.e. DefaultHololensInputPointerProfile vs. DefaultMixedRealityInputPointerProfile) to make each platform more native-accurate, but decided the added complexity was not worth a slight difference in scale between different hardware. \r\n\r\n\r\n![ResizeCursor](https://user-images.githubusercontent.com/16657884/66967645-82827a00-f036-11e9-8705-7b2a4728f586.gif)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4980\r\n\r\n'"
508149162,6309,b'Add 3D icon launcher setting to the build window',"b""## Overview\r\n\r\nAdds 3D Launcher Model to solution.\r\n\r\n## Changes\r\n- It looks like this will add functionality asked for in issue: 3D Icon launcher implementation on Unity #1231\r\n- I added an entry to the build window to point to any .glb in the project\r\n- I also added a scriptable object to save the location of the .glb and the output directory since we needed this for our automated builds, otherwise the location of the .glb won't be transferrable in different environments\r\n- Changes copies .glb into the output Assets location, and updates the proj file to add the .glb to the project and the filter.  Updates the package manifest to point to the .glb asseet\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
508099829,6306,b'Added check for multiple MixedRealityPlayspace objects to validatecode.ps1 ',"b'## Overview\r\nThis PR automates checking the number of MixedRealityPlayspaces in a Unity scene. This is a solution to issue #6202 where multiple MixedRealityPlayspace objects were found in example scenes during testing for the 2.1 release that caused issues at runtime.  PR #6197 deleted the extra playspaces found in the example scenes for the release.  \r\n\r\nA check for multiple playspaces in each unity scene has been added to validatecode.ps1 to avoid issues in the future.  \r\n\r\n## Changes\r\n- Added CheckUnityScenes function to validatecode.ps1\r\n- Deleted extra MixedRealityPlayspace in MaterialGallery scene, which was identified by the update to validatecode.ps1\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
508071628,6305,b'Profile Type filtering inspector fix',"b'## Overview\r\nTwo primary bugs here with profile inspectors\r\n\r\n1) In RenderProfileInternal, the call to `MixedRealityProfileUtility.GetProfileTypesForService()` was incorrectly utitlized by selecting FirstOrDefault from the available list even if that profile was not a match for the given service type. Further, this call was made even if the profileType argument was already not null\r\n\r\n2) Some inspectors were not properly providing a service type to RenderProfile(). They made erroneous checks before setting the serviceType argument.\r\n\r\nWith this change, now profile drop downs are actually filtered (where applicable like Spatial Mesh Observers) and correct value can now be set unblocking bug referenced below\r\n\r\n## Changes\r\n- Fixes: #6294 \r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
508044018,6304,b'Fix controller pointers with Solvers',"b""## Overview\r\nThis change fixes issue with ability to select hand rays for solver tracking. There was the option to select a hand joint but the forward vector would point through the hand. Thus with a hand raised, it pointed up with gravity (relatively upwards to the sky) instead of straight out through the palm. \r\n\r\nThis change modifies the `MotionController` enum type to be more extensible and accurate as the `ControllerRay` type. Instead of looking for some odd (easily breaking code) of a visual's transform on the motion controller, the code now looks for a particular line pointer available which will work for both motion controller and hand controllers.\r\n\r\nAlso, updated scene to use styling seen in other scenes as well as cleaner radial set prefab instead of just box buttons list.\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/66950091-9913db80-f00c-11e9-82d1-51a8793a25a1.png)\r\n\r\n![SM_Fix](https://user-images.githubusercontent.com/25975362/66880772-30c7ea00-ef79-11e9-82d9-482db7068378.gif)\r\n\r\nAlso updates documentation and fixes some doc errors\r\n![image](https://user-images.githubusercontent.com/25975362/66950121-a5983400-f00c-11e9-8259-e651805ed098.png)\r\n\r\n## Changes\r\n- Fixes: #6279 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
508005101,6303,b'Forcing the visual profiler to write depth for improved dLSR support.',"b'## Overview\r\n\r\nThe visual profiler does not write to the depth buffer which can cause rendering artifacts when using depth buffer sharing on HoloLens 2 (dLSR). To fix this the visual profiler now writes depth. The components in the profiler should still render correctly due to their custom render queues settings.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6302\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
507997329,6301,b'Authors update',b'This change includes 2.1.0 and recent development branch contributors.'
507940456,6300,b'Updating 404 links in porting guide',"b'Removed the starting ""/"" in three links that caused them to point to non-existent readme locations\r\n'"
507869086,6299,b'ported over bounding box fixes and tests from sept / october',b'made sure that all recent changes applied to bounding box are also integrated in boundscontrol\r\n\r\npart of #5340 '
507548051,6296,"b'Simulator->Emulator and link change, nit typo'","b'Suggesting renaming the ""Simulator"" square to ""Emulator"", and pointing it to the documentation for HL1 and HL2 emulators instead of a direct download link to the HL2 HoloLensEmulatorSetup.exe (so people can learn how to use it, it aligns better with the other ""required software"" links, and it gives the option to find the HL1 emulator if desired).\r\n\r\n(also made a tiny grammar change to the main description, and fixed a typo)'"
507539221,6293,b'Update and fix service UWP capability configuration',"b""## Overview\r\nThis change adds UWPCapabilityUtility to automatically enable necessary UWP capabilities for Unity Project. This is done at the service/data provider level that requires particular UWP capabilities at runtime in order to function. The following services have been coded:\r\n\r\n- WindowsMixedRealityEyeGazeDataProvider\r\n- WindowsMixedRealitySpatialMeshObserver\r\n- WindowsDictationInputProvider\r\n- WindowsSpeechInputProvider\r\n\r\nSome services/dataproviders did have original logic to set UWP capabilities automatically but there were some issues:\r\n1) There was no communication to the developer that this was occurring or a mechanism to disable the automation\r\n2) The capability would only be enabled in playmode....where by any changes were lost when exiting playmode since editor changes aren't saved\r\n3) The destroy/disable functions oddly reverted any capability changes done in Init()...but this code was also only Unity_editor code \r\n4) The EyeGazeDataProvider did not attempt to set GazeInput capability. Although note, this only works in Unity 2019.3+\r\n\r\nThis change also fixes some minor issues with service architecture/runtime in MRTK\r\n1) DataProviders were not initialize during Init() but only via Enable() by their service registrars. And thus were never created like their Service counterparts in edit-mode\r\n2) Some minor code cleanup and missing code paths\r\n\r\nAlso updated/simplified code in MixedRealityPreferences inspector\r\n\r\n## Changes\r\n- Fixes: #4194\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
507372187,6291,b'updated nuget docs for version 2.1.0 on github io',b'docfx update for minor doc changes of nuget docs in version 2.1.0'
507358170,6290,b'Merge pull request #6281 from thalbern/user/bethalha/fix_nuget_doc',b'fixed missing word in nuget advantages and some style guide violations\r\n\r\n'
507281426,6289,b'[Docs] Fix nested list in InputSimulationService',b'Nested list requires 4 spaces instead of 2.'
506903768,6287,b'Configure prosebot',"b""## Overview\r\nTesting out adding a PR-based spellchecker extension, prosebot. Looks like it enables more features than just spellchecking, so I'm turning those off.\r\n\r\nhttps://github.com/apps/prosebot"""
506894911,6286,b'Updated project configuration checker window',"b'## Overview\r\nIt has been a difficult balance for MRTK to control setting up Unity projects to help with configuration, performance, and expected functionality without annoying or frustrating users. We want this configuration to mostly be automated but also inform developers and give them control to select themselves. \r\n\r\nThis change revamps the configuration check dialog generally seen when adding MRTK to a new project. It creates it into a popup utility window that allows for a better user experience. Developers can now see and control more clearly what will be automated to their project. They can also ignore the popup for later (which will hide it for the rest of the current Unity session) or Ignore it entirely (which will set a user preference to never show the window).\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/66785582-8a091e00-ee92-11e9-89ae-6407d8baaaaa.png)\r\n\r\nPopup primarily shows on re-compiles, opened Unity projects, or changing build targets.\r\n\r\nDevelopers can also access this popup via the MRTK > Utilities tab directly.\r\n\r\nNote: This is not placed in the Tools package because it is more essential to the MRTK experience. Some users do not download the Tools package. \r\n\r\nCreated MRProjectConfigurator and MRProjectConfiguratorWindow\r\nMoved MixedRealityEditorSettings file to new folder\r\nSimplified MREditorSettings fucntionality to just track responsive to editor states (i.e play mode, etc)\r\nMoved directory utilities out of MREditorSettings and into EditorProjectUtilities\r\nIntroduced capability checking in list\r\n\r\n## Changes\r\n- Fixes: #6175 \r\nRelated: #4194\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
506578040,6283,b'split up if statement where sphere pointer looks for nearest nearInteractionGrabbable ',b'## Overview\r\nuser request to make code more readable '
506555885,6281,b'fixed missing word in nuget advantages and some style guide violations',b'## Overview\r\nfixed a missing word in nuget advantages section and corrected some style guide violations\r\n'
506402751,6280,b'Adding Surface Magnetism Solver + Hand Ray Example scene',"b""**NOTE:** Dependent on #6304 PR\r\n\r\n![MRTK_SurfaceMagExample](https://user-images.githubusercontent.com/13754172/66724623-1c4eea80-eddd-11e9-986b-91b92bcdd4cd.gif)\r\n## Overview\r\nCurrently, there is no easy way to make an object attached to the endpoint of the Hand Ray and make it placed on a surface with the surface normal aligned. Adding a new example scene for the Spatial Awareness + Surface Magnetism\r\n\r\n## Changes\r\nIn SurfaceMagnetism.cs, I added Hand Ray option. However, **I am not sure if this is the right place to add since the section name is 'Raycasting Direction Mode'. I feel this could go into SolverHandler's Tracked Target Object. Need help here.** \r\n\r\n                    case RaycastDirectionMode.HandRay:\r\n                        PointerUtils.TryGetPointerEndpoint<IMixedRealityPointer>(Handedness.Both, InputSourceType.Hand, out endPoint);\r\n                        break;\r\n\r\n![2019-10-13 12_51_48-Window](https://user-images.githubusercontent.com/13754172/66724628-2bce3380-eddd-11e9-8370-a1f8a3e15b4d.png)\r\n![2019-10-13 13_04_49-Window](https://user-images.githubusercontent.com/13754172/66724634-44d6e480-eddd-11e9-9f18-85f61756e813.png)\r\n\r\n## Example Scene\r\nAdded a new example scene **SurfaceMagnetismSpatialAwarenessExample** to demonstrate a slate following the Spatial Mapping surface. \r\n![2019-10-13 17_36_30-Unity 2018 4 7f1 Personal - SurfaceMagnetismSpatialAwarenessExample unity - MRTK](https://user-images.githubusercontent.com/13754172/66724886-127ab680-ede0-11e9-9bdd-31d1d7f8f838.png)\r\n\r\n\r\n- Fixes: #6279\r\n"""
506095916,6278,b'Removing  Loop Guidance',"b'Removing the section warning about usage of foreach vs for. In Unity ~5.3+ the allocation issues have been resolved: https://forum.unity.com/threads/upgraded-c-compiler-on-5-3-5p8.417363/ And, here is a nice breakdown of memory usage: https://jacksondunstan.com/articles/3805 My general guidance is use foreach when you can to prevent bugs and improve readability, then profile often to find if foreach is an issue in ""hot"" loops.'"
506090560,6277,b'Android Shader Support',"b'## Overview\r\nA handful of users have been using the MRTK on Android platforms which use OpenGL ES renderers. This pull request attempts to address a few issues which have been found by the community.\r\n\r\nChanges include: \r\n\r\n- Removing the Shader Model 5 requirement which was only the ""earlydepthstencil"" feature. Documentation hints that early depth stencil automatically gets enabled when the shader compiler detects it is feasible. \r\n- Fixing a handful of shader compilation warnings in OpenGL ES. (Note, some warnings only appear the first time a shader is compiled.)\r\n- Fallback shaders now default to MRTK ones. \r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/2517, https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6003, and (partially) https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5875\r\n\r\n## Verification\r\nI\'ve tested on HoloLens, HoloLens 2, Oculus Quest, and Windows PC. If you have any other platforms to test on that would be much appreciated. Especially unusual OpenGL ES variants found on mobile phones.\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
506068821,6273,b'SceneSystem / SceneInfo Improvements',"b'## Overview\r\nEnsures that SceneInfo fields found in ScriptableObjects and Components are kept up-to-date when assets are modified, when editor scene settings change, or when building. Previously these fields were only updated when they were drawn by an editor, which was leading to stale settings.\r\n\r\nSceneInfo-related operations have been moved out of SceneInfoDrawer and into SceneInfoUtility.\r\n\r\nThis also adds better error handling / reporting to SceneSystem operations to make troubleshooting scene-related errors easier in general.\r\n\r\n## Changes\r\n- Fixes: #6060\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
506052705,6272,b'Add first draft set of code owners for the non-ci code',b'This change assigns as set of code owners to the non-CI / build system portions of the tree. These owners have past experience in these areas and are a good starting point for suggested reviewers.\r\n\r\nThe collection of individuals is likely to change over time.\r\n\r\nFixes: #6124'
505804195,6269,b'updating ux refactor branch with latest mrtk_development',b'updating ux refactor branch with latest mrtk_development'
505644140,6265,b'Fix broken layout in SceneTransitionServiceOverview.md',"b'In this documentation, the layout is broken.\r\n\r\nhttps://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/Extensions/SceneTransitionService/SceneTransitionServiceOverview.html#fade-targets\r\n\r\n \r\n![image](https://user-images.githubusercontent.com/4415085/66626149-24b6f200-ec32-11e9-9ef5-5c3a3eab452f.png)\r\n\r\nThis PR fixes the problem.\r\n\r\n![image](https://user-images.githubusercontent.com/4415085/66626269-8ecf9700-ec32-11e9-8d2b-c82669a76790.png)\r\n\r\n\r\n'"
505579192,6264,b'Fixed SetChildrenActive function',"b'## Overview\r\n\r\nFixed SetChildrenActive function which explicitly set children to inactive\r\n\r\n## Changes\r\nSetChildrenActive in GameObjectExtensions.cs\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
504949403,6258,b'update development branch with 2.1.0 release',b'This change brings the changes made in 2.1.0 into the development branch'
504934202,6255,b'Update mrtk_development with 2.1.0 release',b'merge the 2.1.0 release into the development branch'
504927647,6254,b'Update version.js for 2.1.0 docs',b'## Overview\r\nUpdate version.js for 2.1.0 docs'
504920601,6253,b'merge 2.1.0 into release branch',b'This change brings the mrtk_release branch up to version 2.1.0'
504910417,6252,b'roadmap updates',b'update the roadmap to include 2.2.0 plan and early 2.3.0 thoughts'
504896055,6251,b'Remove source packaged in NuGet for 2.1 Release',"b'There is an issue with NugetForUnity with long paths, and the source is deeply nested in the NuGet package. This change excludes the source from being packaged, to avoid that issue for the time being. In 2.2 this will return, as well as a supported scenario for using this source to debug the binaries in the package.'"
504892599,6250,b'Minor tweaks to Pointers doc for readability',"b'## Overview\r\nMinor tweaks to Pointers doc for readability\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
504873690,6248,b'2.1.0 - Add nuget package information to release notes',b'This change adds install and update instructions as well as a recommendation / pointer to NuGet for Unity.'
504859153,6247,b'[NuGet] Examples package: add dependency on Extensions',b'This change adds the extensions package as a dependency of the examples. This is needed to ensure the experimental ExamplesHub has all of the required script files available.'
504825734,6245,b'Update Examples Hub README to provide information on Extension package',"b""## Overview\r\nIf you don't import MRTK Extensions package, the Examples Hub will show the missing script. Added 'prerequisites' section to clarify this for the users who are using the release packages."""
504285536,6240,b'Remove duplicate metas from being packaged',b'This change fixes duplicate metas packaged as part of the Foundation package by ignoring them from SDK folder.'
504216165,6238,b'Fix 6234 (no input after toggling hand mesh)',b'#5750 added support for the hand mesh changing had a small bug. Added a null check and a potential perf optimization (only recalculate the bounds if the mesh changed)'
504083735,6236,b'Add SignCheck step to mrtk_CI-release pipeline',b'SignCheck step is currently run as part of the Release Pipeline but we should be running it as part of mrtk_CI-release pipeline that does the signing.'
503733875,6235,b'System Keyboard Improvements',"b""## Overview\r\nA handful of partners have had difficulty using the system keyboard in immersive applications. This pull request attempts to address a few issues:\r\n\r\n- Adds a preview area MRTK prefab (_Note, the preview area cannot tag along with the system keyboard because there is no API to query the system keyboard's location_). The prefab does contain a manipulation handler and tag along solver.\r\n- Adds the ability to delete text using the delete key.\r\n- Adds the ability to move a caret though preview text with the keyboard arrow keys.\r\n- The return key will commit and close the keyboard when used in single line mode.\r\n- Adds code comments and improves the example scene.\r\n\r\n_Note, the keyboard is still and experimental feature and subject to change._\r\n\r\n![keyboard](https://user-images.githubusercontent.com/13305729/66354538-f8d9fa80-e919-11e9-8553-3737e4d9154b.gif)\r\n\r\n![Screenshot_2019-10-07_03-39-46-PM_258e664cef95dc347863271a790b1025](https://user-images.githubusercontent.com/13305729/66354821-ddbbba80-e91a-11e9-8fd7-000c568826c8.png)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6149, https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6155, and https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6167\r\n\r\n\r\n## Verification\r\nPlease open the HandInteractionExamples scene and try the keyboard example.\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
503725007,6233,b'Update docs to use core services',"b'## Overview\r\nUpdates to docs where CoreServices was not being used in code snippets. Also did some clean up of the diagnostics doc, updated images, etc.\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
503718019,6232,b'Stencil buffer issue with 16-bit depth format',"b'## Overview\r\nUpdate documentation and optimize window to give notice to users about 16-bit depth format not creating a stencil buffer in Unity.\r\n\r\n## Changes\r\n- Fixes: #5970 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
503708171,6231,b'Remove Alpha Tag',b'This change removes the alpha tag from the release pipeline.'
503680186,6230,b'Change when Tests Package is Deleted',"b""We don't want to publish the tests package for the release pipeline. We use common pipeline paths, so as part of the release processes we need to delete it.\r\n\r\nThis updates the delete to happen after the signing of the NuGet packages so we don't run into an error."""
503657929,6229,b'Merge 2.0.1 -> 2.1.0',b'## Overview\r\nMerge some nuget pipeline changes from 2.0.1 to 2.1.0'
503605821,6228,b'Update EyeTracking_IsUserCalibrated.md',b'Minor corrections from @sostel '
503236263,6223,b'Refresh Boundary docs',"b'## Overview\r\nUpdate images to new profile style\r\nClean up from headers to bolded titles for properties to reduce space (headers are a bit overkill)\r\nAdd code snippet example\r\nClean up some wording\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
503128862,6222,b'Clean up platform capabilities page',"b'## Overview\r\nSwitched to CoreServices and cleaned up some wording\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
502894537,6219,"b'Add more whats new to 2.1 release notes, also add breaking changes.'","b'## Overview\r\nThe 2.1 release notes were missing breaking changes and several ""what\'s new"" items. Add these.\r\n\r\n## Changes\r\n- Fixes: #5912 \r\n\r\n## Verification\r\nVerified that docs generation succeeded\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
502867037,6218,"b'move example hub to the experimental folder, update release notes'","b'Per #6209, the examples hub is encountering issues when building for some build targets. To enable customers to experiment with the hub project (learn about the scene system, etc) we will release the code as experimental while we investigate the root cause of the issues we are encountering.\r\n\r\nThe release notes have been updated to reflect the experimental status and to link to the example hub readme.\r\n\r\n'"
502775315,6217,b'Prerelease/2.1.0 stabilization -> dev',b'Prerelease/2.1.0 stabilization -> dev'
502765651,6216,b'Fixing an issue where CreateInstances could be called before Awake',b'# Overview\r\nFixing an issue where CreateInstances could be called before Awake. Which would in turn try and set the shared materials to null.\r\n\r\nThis would only occur in scenes with very specific hierarchy setups where a clipping primitive was placed in the hierarchy after a renderer it reference which is also initially disabled.\r\n\r\nIssue found by @radicalad.\r\n\r\n## Verification\r\nPlease test scenes and scripts which heavily use ClippingPrimitives.\r\n'
502749906,6215,b'Fix link to tools info in getting started article',b'Fixes a broken link (the header name should have been lower case)\r\n\r\nVerified fix via a local doc build.'
502745777,6214,b'Combine multiple TearDown attributes',b'## Overview\r\nThere were a few test scripts with multiple TearDown attributes.\r\nThere were also at least two that were calling `EditorCreateScenes` in `CleanupMixedRealityToolkitTests`.'
502743268,6213,b'Added features to the LineFollower',"b'# Overview\r\nAdded some features to the LineFollower script that include Rotation, and Scale over the normalized length.\r\n\r\n## Changes\r\n- Updated: LineFollower.cs\r\n'"
502729808,6212,b'LineFollowerFeatures',"b'## Overview\r\nAdded some features to the LineFollower script that include Rotation, and Scale over the normalized length.\r\n\r\n## Changes\r\n- Updates to the LineFollower.cs'"
502536189,6211,b'Auto generate signing configs in release pipeline',"b""The signing configs will go out of sync any time add, remove or rename assemblies. We previously created a script to generate these configs, as writing them manually was a pain. It makes sense that we use this script in the pipelines as it's one less thing to think about.\r\n"""
502349750,6206,b'Merge stabilization -> dev',b'Merge stabilization -> dev'
502313083,6205,b'Add prerelease/2.1.0 to docs version dropdown',b'## Overview\r\nAdds prerelease/2.1.0_stabilization to our docs for prerelease docs testing'
502308443,6204,b'Merge stabilization -> dev',b'Periodic merge of stabilization to dev'
502302156,6203,b'Create Assets.meta',b'## Overview\r\nCreate Assets.meta'
502256461,6200,"b'[Docs] Getting Started page - Fix broken links, updated and polished content'","b""## Overview\r\n- Fix broken links\r\n- Input simulation keys update\r\n- Deleted duplicated/outdated copy of the UI building blocks and Tools table. Added link to the landing page's section instead for easier future maintenance. \r\n- Updated and polished content for 2.1.0\r\n\r\n## Changes\r\n- Fixes #6201\r\n"""
502213114,6199,b'Update release notes and updating guide with 2.1.0 content',b'Added release note and updating guide content for the upcoming 2.1.0 release.\r\n\r\nPart of this change involved removing section headings and replacing them with bold face. This was done to avoid potential heading duplication (and subsequent confusion with future links) as well as to reduce proliferation of table of contents entries re: updating between versions. The end result is that updating.md is now formatted the same as releasenotes.md.\r\n\r\nVerified doc build locally.'
502206218,6198,b'Fixes to experimental feature guidelines',"b'Fix small typo in experimental guidelines, one line change.\r\n\r\n## Changes\r\n- Fixes: #6156 \r\n\r\n'"
502183002,6197,b'Deleted extra MixedRealityPlaypace objects from example scenes',"b'## Overview\r\nThis PR is a fix for issue #6168 where multiple MixedRealityPlayspace objects in certain example scenes caused issues while running the scene.\r\n\r\nScenes edited:\r\n- Scenes with extra MixedRealityPlayspace objects\r\n  - BoundingBoxExample\r\n  - PressableButtonExample\r\n  - SlateExample\r\n  - SliderExample\r\n\r\n- Scenes with no config profile assigned\r\n  - ObjectCollectionExamples\r\n  - TooltipExamples\r\n\r\n## Changes\r\n- BoundingBoxExample Scene\r\n\r\nBefore:\r\n<img width=""308"" alt=""BoundingBoxExamples_Before"" src=""https://user-images.githubusercontent.com/53493796/66146042-d0bc6580-e5c0-11e9-9dfa-17454d976ff5.png"">\r\nAfter:\r\n<img width=""409"" alt=""BoundingBoxExamples_After"" src=""https://user-images.githubusercontent.com/53493796/66146084-e92c8000-e5c0-11e9-9206-5766defc64b6.png"">\r\n\r\n- ObjectCollectionExamples Scene\r\n\r\nBefore:\r\n<img width=""937"" alt=""ObjectCollectionExamples_Before"" src=""https://user-images.githubusercontent.com/53493796/66146142-07927b80-e5c1-11e9-89e8-5ddaf553e5e0.png"">\r\nAfter:\r\n<img width=""939"" alt=""ObjectCollectionExamples_After"" src=""https://user-images.githubusercontent.com/53493796/66146185-21cc5980-e5c1-11e9-95bc-bd0d9e02369a.png"">\r\n\r\n- PressableButtonExample Scene\r\n\r\nBefore: \r\n<img width=""215"" alt=""PressableButtonExample_Before"" src=""https://user-images.githubusercontent.com/53493796/66146237-3d376480-e5c1-11e9-8f41-ef098607477b.png"">\r\nAfter:\r\n<img width=""224"" alt=""PressableButtonExample_After"" src=""https://user-images.githubusercontent.com/53493796/66146255-432d4580-e5c1-11e9-8970-5a149ad1991a.png"">\r\n\r\n\r\n- SlateExample Scene\r\n\r\nBefore: \r\n<img width=""220"" alt=""SlateExample_Before"" src=""https://user-images.githubusercontent.com/53493796/66146302-5a6c3300-e5c1-11e9-86b9-c0617be84e4d.png"">\r\nAfter:\r\n<img width=""219"" alt=""SlateExample_After"" src=""https://user-images.githubusercontent.com/53493796/66146314-5fc97d80-e5c1-11e9-8766-cd74ea89dff1.png"">\r\n\r\n- SliderExample Scene\r\n\r\nBefore: \r\n<img width=""222"" alt=""SliderExample_Before"" src=""https://user-images.githubusercontent.com/53493796/66146387-85ef1d80-e5c1-11e9-8fbf-7b5b786fa625.png"">\r\nAfter:\r\n<img width=""222"" alt=""SliderExample_After"" src=""https://user-images.githubusercontent.com/53493796/66146393-8a1b3b00-e5c1-11e9-9f43-32bb8d23ee6b.png"">\r\n\r\n- TooltipExamples Scene\r\nBefore:\r\n<img width=""880"" alt=""TooltipExamples_Before"" src=""https://user-images.githubusercontent.com/53493796/66146440-a3bc8280-e5c1-11e9-80c9-6753f84d03e3.png"">\r\nAfter:\r\n<img width=""878"" alt=""TooltipExamples_After"" src=""https://user-images.githubusercontent.com/53493796/66146446-a6b77300-e5c1-11e9-93d7-679bfe84d961.png"">\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n\r\nAfter checking out the branch, all the scenes are located in Assets/MixedRealityToolkit.Examples/Demos/UX/\r\n'"
502180331,6196,b'MaterialInstance Documentation Leak Example',"b'# Overview\r\n\r\nMinor change, adding sample code to demonstrate why developers should use MaterialInstance.'"
502170124,6195,b'Fix toggle buttons and other multi-dimension interactable themes ',"b""## Overview\r\nPrior to #6104 Interactable would create all themes for all dimensions at startup, and then just select the appropriate list for the current dimension.\r\n\r\n#6104  accidentally re-wrote that to recreate the list of current themes every time the dimension changed. When a theme is created and inits, it looks at the current offset/position/rotation etc as the starting position from which to base offset. In case of #6178 and #6187 the buttons had not reset to their original position before the new theme is created, causing new themes to be based not on the original 'resting' transform, but on some transform in middle of animation. This caused things like toggle buttons to move forward steadily as toggle was triggered.\r\n\r\nBig thank you to @ritijain and @gilbdev for finding these issues!\r\n\r\n\r\n## Changes\r\n- Fixes: #6178\r\n- Fix this by reverting to old behavior -- creating list of all themes per dimension whenever interactable is created, or when profiles change. \r\n- Add test to catch this regression in future, thank you @cdiaz-ms for helping write the test.\r\n\r\n## Verification\r\nManually verified toggles behave correctly\r\nVerified that test did not pass before changes, and that the test passes after changes.\r\n\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
501981663,6193,b'Fix objects jumping when manipulating with VR controllers in editor.',"b'## Overview\r\nThis is a very simple change that disables camera controls when an XR device is present. Without this change, the camera position, returned by the camera cache, would jump upwards when the VR controller trigger was pulled. You can see this in the gifs below, as the profiling panel jumps up and down with the head position as the trigger is pulled.\r\n\r\nWhen the head position jumped upwards, it was suddenly closer or further from the controller. This distance is used in `TwoHandMoveLogic` to scale the distance between the controller and the object. This was then causing the object to jump.\r\n\r\n### In editor before change:\r\n![HMD_inEditor](https://user-images.githubusercontent.com/47415945/66119109-eb4a0b00-e5cf-11e9-9d99-6d73ecf00adb.gif)\r\n\r\n### Built for x64 running on local machine:\r\n![HMD_built](https://user-images.githubusercontent.com/47415945/66119130-f43adc80-e5cf-11e9-914d-2fcf7636405d.gif)\r\n\r\n### In editor after change:\r\n![HMD_possibleFix](https://user-images.githubusercontent.com/47415945/66119623-e76ab880-e5d0-11e9-8122-4d3d251f5a2f.gif)\r\n\r\n## Changes\r\n- Disabled camera controls when an XR device is present (equivalent to disabling `IsCameraControlEnabled` in the input simulation profile)\r\n\r\n- Fixes: #6108\r\n'"
501800142,6192,b'Change IsTracked to not have to be set manually',"b'## Overview\r\n[Not targeting stabilization]\r\nUpdates ControllerPoseSynchronizer to not have to set `IsTracked` manually everywhere. It was often simply setting it to the result of `TrackingState == Tracked`, so this simplifies any potential mistaken state management.'"
501792954,6191,b'Remove duplicate overrides in controllers',b'## Overview\r\nNoticed while investigating #6164.'
501791841,6190,b'Update test icons for stabilization polish',"b""## Overview\r\nAdds test icons to tests that didn't have them"""
501790476,6189,b'Add controller mapping tests',b'## Overview\r\nAdd some tests to check that axes and buttons are properly set based on what the device manager / controller update loop expects. Also formats some things.\r\nBefore #6184:\r\n![image](https://user-images.githubusercontent.com/3580640/66089620-f13ede00-e534-11e9-8661-b51f1bb2b85a.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/3580640/66090844-f5b9c580-e539-11e9-9dbc-798a2709edf2.png)\r\n\r\n## Changes\r\n- Fixes: #6164 (and makes it harder for it to happen again)'
501782024,6188,b'Add more Unity UI based examples to Interactables Scene',"b'## Overview\r\nExpanded the Unity UI Interactables canavs in the InteractablesExample scene to also include a toggle button, radial buttons and checkbox buttons leveraging Unity UI images and interactables, and existing intractable themes to drive visual effects.\r\n\r\n## Changes\r\n- Fixes: # .https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5998\r\n\r\n- Added a Unity UI based 3D toggle button to the scene\r\n- Added  Radial button group and checkbox button prefabs to the scene. \r\n- Updated the description of the panel in the scene.\r\n- The example also demonstrates how to setup layouts on Unity UI canvases.\r\n\r\n![image](https://user-images.githubusercontent.com/17660747/66088801-5f81a180-e531-11e9-8537-7e0fb8cf9890.png)\r\n\r\n## Verification\r\n- Verified that the new added buttons work well with near field interaction as well as far field interaction.\r\n'"
501762331,6186,b'Fix broken toggle button by renaming Interactable.dimensions to Interactable.Dimensions',"b'## Overview\r\n#6104 had changed Interactable.Dimensions to Interactable.dimensions and correctly marked the field as ""FormerlySerializedAs"", but Unity did not consistently deserialize the old assets correctly. Go back to the old naming to make sure Unity deserializes properly.\r\n\r\nAlso update near menu prefabs so the toggle state is correct.\r\n\r\n## Changes\r\n- Fixes: #6169\r\n\r\n'"
501748191,6185,b'Re-assigned Toggle button themes and states',"b'## Overview\r\nFixed broken PressableButtonHoloLens2Toggle.prefab which was configured as normal Button, missing toggle states and themes. (serialization issue?)\r\n- In the Interactable, selected \'Toggle\' \r\n- Re-assigned proper themes for the toggle states\r\n- This update reverted the override in the ToggleFeaturesPanel and NearMenu\'s Pin button. Unchecked \'Is Toggled\' state. \r\n\r\n<img width=""434"" alt=""2019-10-02 14_44_21-Unity 2018 4 7f1 Personal - Untitled - MixedRealityToolkit-Unity - PC, Mac   Lin"" src=""https://user-images.githubusercontent.com/13754172/66085015-eaa86a80-e524-11e9-867e-64852b771cae.png"">\r\n<img width=""433"" alt=""2019-10-02 14_47_05-Unity 2018 4 7f1 Personal - Untitled - MixedRealityToolkit-Unity - PC, Mac   Lin"" src=""https://user-images.githubusercontent.com/13754172/66085021-ed0ac480-e524-11e9-953d-4655ed594dd6.png"">\r\n\r\nFor the ToggleFeaturesPanel and NearMenu, Pin button\'s \'Is Toggled\' is checked since these UI panels are locked by default and should show toggle state visual. (Fixing broken PressableButtonHoloLens2Toggle removed these overrides)\r\n<img width=""543"" alt=""2019-10-02 14_51_08-Unity 2018 4 7f1 Personal - NearMenuExamples unity - MixedRealityToolkit-Unity -"" src=""https://user-images.githubusercontent.com/13754172/66085144-470b8a00-e525-11e9-8953-8a8ffd042a1c.png"">\r\n<img width=""277"" alt=""2019-10-02 15_00_25-Unity 2018 4 7f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof"" src=""https://user-images.githubusercontent.com/13754172/66085242-89cd6200-e525-11e9-9a8a-986f8c761fd0.png"">\r\n<img width=""274"" alt=""2019-10-02 14_50_53-Unity 2018 4 7f1 Personal - NearMenuExamples unity - MixedRealityToolkit-Unity -"" src=""https://user-images.githubusercontent.com/13754172/66085317-b8e3d380-e525-11e9-877f-4ff9f8a12529.png"">\r\n\r\n\r\n## Changes\r\n- Fixes: #6169\r\n'"
501747690,6184,b'Fix controller mappings for OpenVR (and friends)',"b'## Overview\r\nThis PR:\r\n\r\n* Fixes the controller mapping type / axis mismatch introduced by #5874 for WMR, Vive, and the generic OpenVR mappings\r\n* Introduces a controller mapping profile updater to make serializing these changes into the profiles (and any custom profiles) easier without losing action mappings\r\n* Renames `mixedRealityControllerMappingProfiles` to `mixedRealityControllerMappings`, which is what it actually is\r\n* Reserializes the two input actions profiles to\r\n  * Remove several instances of stale controller types (all were namespace changes of simulated hands)\r\n  * Add some missing mappings for the generic OpenVR controller for one of the checked-in profiles\r\n  * Update all instances of axis type, name, or keycode changing\r\n  * Account for the `mixedRealityControllerMappingProfiles` rename\r\n\r\n## Changes\r\n- Fixes: #6164\r\n\r\n## Verification\r\nTest WMR on OpenVR\r\nTest Vive on OpenVR'"
501743532,6183,b'Adds Ability to Search Active Config Profile in MRTK Inspector',"b""## Overview (Revised)\r\nProfiles can now be searched for sub-profiles and fields by keyword.\r\n\r\n![SearchFieldSimple](https://user-images.githubusercontent.com/9789716/66428131-5168d080-e9ca-11e9-8ed8-5860f26fb97a.PNG)\r\n\r\nIf keywords are entered, individual fields are displayed. By default a field's name, tooltip and (if an object reference) value name are searched.\r\n\r\n![SearchResultsSimple](https://user-images.githubusercontent.com/9789716/66428108-4a41c280-e9ca-11e9-9356-04c82bd1d1a4.PNG)\r\n\r\nSearch can be configured via the Options foldout.\r\n\r\n![OptionsSimple](https://user-images.githubusercontent.com/9789716/66428097-4615a500-e9ca-11e9-96fe-339a681e17ad.PNG)\r\n\r\nSearches are performed by the `MixedRealitySearchUtility`. This utility can be used to search individual profiles, not just the active configuration profile.\r\n\r\n## Changes\r\n- Fixes: #4243, #6225\r\n\r\n## Verification\r\nTry searching for typically oft-needed-but-difficult-to-find fields in an active profile and see if the search returns useful results.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
501736105,6182,b'Merge 2.1.0 Stabilization branch (2019/10/02) into dev branch',b'Ensure the mrtk_development branch has the latest v2.1.0 changes'
501624048,6173,b'NuGet Documentation Migration Emphasis',b'## Overview\r\nThis is a documentation change to emphasize that migration of a project to use MRTK NuGet is not yet supported.'
501471454,6171,b'fix hololens2 style toggle button',"b""## Overview\r\ndue to some changes in serialization, interactables and themes, the Hololens2 style toggle button was broken.\r\n\r\n## Changes\r\n- Fixes: #6169\r\n\r\nin bold :\r\n![image](https://user-images.githubusercontent.com/49415246/66045394-f182ad80-e523-11e9-9e4a-b94335099c37.png)\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n\r\n- didn't manage to add a them for the FrontPlate due to theme switch between selected/deselected state, it's hard to manage to push the frontplate when pressing the button (like a normal button, which has only one hteme with an offset)\r\n\r\n- i branched from mrtk-development, so changes may be slightly different if applied to stabilization branch (even with cherrypick), i can redo the PR from there if this is safer 'dunno about all your merge branching policy ^^)\r\n"""
501197091,6165,b'Generic Material Management - MaterialInstance',"b""## Overview\r\n\r\nThis pull request introduces a generic material instancing system to support other components which require instancing and managing materials (such as ClippingPrimitives). \r\n\r\nThe [`MaterialInstance.cs`](xref:Microsoft.MixedReality.Toolkit.Rendering.MaterialInstance) behavior aides in tracking instance material lifetime and automatically destroys instanced materials for the user. This utility component can be used as a replacement to [Renderer.material](https://docs.unity3d.com/ScriptReference/Renderer-material.html) or [Renderer.materials](https://docs.unity3d.com/ScriptReference/Renderer-materials.html). Note, [MaterialPropertyBlocks](https://docs.unity3d.com/ScriptReference/MaterialPropertyBlock.html) are preferred over material instancing but are not always available  in all scenarios.\r\n\r\nAt the moment this system is a only being used by ClippingPrimitives, but should be migrated to other MRTK components which access a renderer's material.\r\n\r\nThis PR includes:\r\n- [x] Editor & Platform Testing\r\n- [x] Unit Tests\r\n- [x] Documentation\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5993 (This PR also fixes some editor time issues around duplicating material instances and re-assigning material instances.)\r\n\r\n## Verification\r\nIt would be great to test this PR with existing clipping examples (in editor and at runtime) as well as with @radicalad's https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6001 pull request.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
501179116,6162,b'Fix serialized property name in the inspector that was broken due to property rename',"b'## Overview\r\nProperty rename introduced in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6104\r\nresulted in a regressions in Interactable Editor experience. This prevents users from setting an intractable as Toggle/MultiDimensional selection mode.\r\n\r\n## Changes\r\n- Fixes: # .https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6161\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
501174021,6160,b'PressableButton inspector warnings',"b""## Overview\r\nShow warnings in the Inspector for several cases which will cause PressableButton to fail to function properly.\r\n\r\n- A NearInteractionTouchable or NearInteractionTouchableUnityUI must be present.  Decide which to add based on presence of RectTransform.\r\n- The Touchable's EventsToReceive must be Touch.\r\n- In the UnityUI case, there must be a MovingButtonVisuals present with a Graphic (aka, Image, RawImage, etc.) present.\r\n\r\nFixes #6159.\r\n\r\n![PressableButtonWarnings](https://user-images.githubusercontent.com/41760870/66004561-f8df8380-e45d-11e9-8c9b-434af793b939.gif)\r\n"""
501166335,6158,b'Update Spatial Awareness documentation',"b'## Overview\r\n\r\nParsed through the Spatial Awareness documentation to make things clearer and fill any gaps.\r\n- Renamed TOC under Spatial Awareness to better communicate intention of each article\r\n- Cleaned up profile property explanation/outlining\r\n- Cleaned up code examples\r\n- Responded to various bug filed by community\r\n\r\n## Changes\r\n**Fixes:**\r\n#4638 - Name is set by the Observer but provided name example\r\n#5919 - Created table outlining each profile to be explicit in getting started guide\r\n#6013 - Added additional information on the usage guide page\r\n\r\n**Related:**\r\n#6018 - Called out lack of support in docs atm, worth still tracking bug item for actual feature work\r\n\r\n## Verification\r\nAll test pass\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
501157284,6157,"b'Improve Contributing, Coding, and Pull Request Guidelines'","b'## Overview\r\nAs our contributors get more diverse, having clear expectations for contributions (code, tests, documentation, pull requests) will help ensure we maintain quality and reliability of MRTK.\r\n\r\nThis change expands our coding guidelines to discuss coding philosophy/approach. It also clarify expectations for pull requests, and experimental features. Finally, the contributing page has been updated to include latest contact info and process.\r\n\r\nI have also removed all references to the Feature_Contribution_Process.md page, which contains guidance for contributing large features to MRTK before the 2.0 release. The guidance there is no longer accurate, however keeping the page there so we can reference it as we revise guidance for large features.\r\n\r\n## Changes\r\n- Fixes: #6156 \r\n\r\n\r\n## Verification\r\ndocfx generation passes\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
500977255,6154,b'Prerelease/2.1.0 stabilization -> mrtk_dev',b'Prerelease/2.1.0 stabilization -> mrtk_dev'
500889717,6152,b'Fix typo: Apart form -> Apart from',b'Fix typo in FrameworkAndRuntime documentation.'
500586813,6150,b'Fix 2.1.0 docs',"b""## Overview\r\n#6146 broke the stabilization docs build, since the mrtk_docs pipeline isn't running on stabilization PR validation.\r\n\r\n## Verification\r\nBuilt docs locally (since the mrtk_docs pipeline doesn't appear configured for stabilization PR validation.)"""
500555733,6148,b'fix null reference exception when re-enabling input system',"b'When the input system initializes, it instantiates the registered gaze provider. When it is disabled, the gaze provider is destroyed. Unfortunately, enable was not re-creating the gaze provider, resulting in null reference exceptions.\r\n\r\nThis change creates the InstantiateGazeProvider method and calls it from Initialize and, if null, from Enable.\r\n\r\n\r\nFixes: #5085\r\n\r\n\r\n## Verification\r\nCreate simple scene in editor. \r\nApply the script shown below to any object.\r\nDisable and then re-enable the input system.\r\nUse the input simulation provider to display a hand (ex: spacebar)\r\n\r\n```c#\r\nusing Microsoft.MixedReality.Toolkit;\r\nusing Microsoft.MixedReality.Toolkit.Input;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\n\r\npublic class EnableDisableSystemTest : MonoBehaviour\r\n{\r\n    private IMixedRealityInputSystem inputSystem = null;\r\n    private IMixedRealityInputSystem InputSystem\r\n    {\r\n        get\r\n        {\r\n            if (inputSystem == null)\r\n            {\r\n                MixedRealityServiceRegistry.TryGetService<IMixedRealityInputSystem>(out inputSystem);\r\n            }\r\n            return inputSystem;\r\n        }\r\n    }\r\n\r\n    public void DisableInputSystem()\r\n    {\r\n        InputSystem.Disable();\r\n    }\r\n\r\n    public void EnableInputSystem()\r\n    {\r\n        InputSystem.Enable();\r\n    }\r\n\r\n    public void Update()\r\n    {\r\n        if (Input.GetKeyDown(KeyCode.Alpha1))\r\n        {\r\n            Debug.Log(""Enabling input system"");\r\n            EnableInputSystem();\r\n        }\r\n        if (Input.GetKeyDown(KeyCode.Alpha2))\r\n        {\r\n            Debug.Log(""Disabling input system"");\r\n            DisableInputSystem();\r\n        }\r\n    }\r\n}\r\n```'"
500535325,6147,b'Explicitly use Windows.Storage',"b'## Overview\r\nAs part of adding remoting support for HL2, there will be a new `.Windows` namespace. This change helps disambiguate these namespaces ahead of time.\r\n\r\n## Changes\r\n- Part of adding remoting support for HL2 hands (breaking some initials small changes out)'"
500527613,6146,b'Fix ms build docs and editor checks',"b""## Overview\r\nThere are quite a few classes in the Microsoft.MixedReality.Toolkit.MSBuild namespace that aren't being picked up by our docs generation.\r\n![image](https://user-images.githubusercontent.com/3580640/65917344-00365c80-e38c-11e9-9f30-e29e90d0ed6e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/65917357-075d6a80-e38c-11e9-8b3f-5752cac4c104.png)\r\n\r\nSince these classes are already in an editor-only assembly, we shouldn't need to `#if UNITY_EDITOR` them as well."""
500443834,6143,b'Merge stabilization -> dev',b'## Overview\r\nPeriodic merge of stabilization to dev.'
500441432,6142,b'[Shell-Parity] Speech command confirmation label (#5868)',b'## Overview\r\nRe-opening the PR: See #5868 \r\n'
500436623,6141,b'fix ?. usages for obvious UnityEngine.Component derived objects',b'This change is a first-pass update to remove usages of ?. from objects that obviously derive from UnityEngine.Component (ex: GameObject)\r\n\r\nFixes: #6044 \r\n\r\n## Validation\r\n- Use HandInteractionExample (in editor) and the InputSimulationService to verify no input related regressions.'
500408955,6140,b'Added test to InteractableTests that checks focus state when enabling/disabling Interactable',"b'## Overview\r\nA test has been added to InteractableTests that checks focus state and button depth when Interactable is enabled and disabled via SetDisable(true).  The test is for the fix to #4967 where the button was in the focus state when Interactable was disabled and then re-enabled. The fix has already been merged in #6068, but a test had not been added yet.\r\n\r\n\r\n## Changes\r\n- Added a test to InteractableTests.cs\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
500397363,6139,b'Mark ColliderNearInteractionTouchable as obsolete',"b'## Overview\r\nAdds back ColliderNearInteractionTouchable but marks it as obsolete, use BaseNearInteractionTouchable instead. Also updated #5912 2.1 release notes.\r\n\r\n## Changes\r\n- Fixes: #5922\r\n- Also remove lingering meta file.\r\n\r\n## Verification\r\nI verified that referencing `ColliderNearInteractionTouchable ` causes compile error with proper migration message. \r\n\r\nAlso verified that docfx generation works with no warnings or errors.\r\n\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
500383308,6137,b'Fixes SceneTransitionService glitches when using single pass instanced rendering in 2019.2.6+',"b'## Overview\r\nUpdates CameraFaderQuad to use an unlit particle shader instead of the default sprite shader.\r\n\r\nAlso adds an optional camera fader material field to the scene transition profile to get around the issue of required shader variants not being included in the build.\r\n\r\n## Changes\r\n- Fixes: #6136\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n\r\nThis has been tested in editor and on HL2 devices.\r\n'"
499828546,6133,b'Services can now require a profile',"b""## Overview\r\nStarting with the MouseDeviceManager not automatically having a profile assigned (which is another PR), I thought it would be if services like that one would show if they needed a profile but did not have one.\r\nSo I went through the code and implemented that.\r\nFolded out or not, services that require a profile but don't have one assigned show a warnings box.\r\n\r\n![image](https://user-images.githubusercontent.com/32508825/65823153-463ad580-e251-11e9-862d-daa65311f991.png)\r\n\r\nThe following services were candidates for this:\r\n- Input System\r\n- Spatial Awareness\r\n- Registered Services"""
499820097,6132,b'added default profile',b'## Overview\r\nAssigns the default profile on creation like all other profiles that have one do\r\n\r\n## Changes\r\n- Fixes: #4306\r\n'
499775555,6131,b'Tooltip examples missing profile',b'## Overview\r\nThe MRKT in this scene does not have a profile by default'
499713505,6129,b'Added Interactable enabled check to PhysicalPressEventRouter - fix for 5833',"b'## Overview\r\nFix for issue #5833 where near interaction events were triggered when Interactable was disabled.\r\n\r\nAdded the fix by Julia to PhysicalPressEventRouter which only sets states and triggers near interaction events if Interactable is enabled.\r\n\r\nVideo of HandInteractionExample scene after the fix:\r\n[Issue 5833 Fix](https://youtu.be/AhKWyaPgiH0)\r\n\r\n## Changes\r\n- Added CanRouteInput() to PhysicalPressEventRouter\r\n- Added doc comments to public methods\r\n- Added a test to PressableButtonTests\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
499696833,6128,b'IsInFov Camera Extension Fix',"b'## Overview\r\nIsInFov did not check against depth and more importantly against the near/farclip planes. Also added tests to confirm various points return expected results.\r\n\r\n## Changes\r\n- Fixes: #5979\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
499684405,6127,b'Filter out HL2 for the remoting select bug',"b""## Overview\r\nThis remoting bug, where the state of select pressed isn't properly remoted, is only valid for HL1. This adds a check for the source supporting grasp, which, since we already filter for hands, is only valid for HL2 in WMR devices.\r\n\r\n## Changes\r\n- Part of adding remoting support for HL2 hands (breaking some initials small changes out)"""
499679747,6126,b'Update MRTK_Development to Version 2.2.0',"b""Since we branched for stabilization of 2.1, we should update our mrtk_development to 2.2 as it's no longer a 2.1 feature set."""
499671714,6125,b'Enable Local Space Constraints',"b'## Overview\r\nThis change enables objects to be constrained along an axis in local space. This is done simply by switching the order in which the rotation is applied. If we want world space, we apply the constrained different rotation, and then the original rotation; but if we want local space we apply the original rotation, and then augment that rotation by the constrained difference.\r\n\r\n## Changes\r\n- Fixes: #5147 \r\n\r\n\r\n## Verification\r\nAdded tests to verify this functionality.'"
499643396,6123,b'Update buffer size debug output for help mitigating issue',b'## Overview\r\nThis debug output was incorrectly pointing to the Pointer Profile.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6052'
499629006,6122,b'MRTK Profile Inspector Performance Improvements',"b""## Overview\r\nMajor changes\r\n- Adds the `MixedRealityProfileUtility` class. This class is responsible for listening for asset changes and caching available profiles by type and service type. Prior to this change inspectors were searching for ScriptableObject instances every redraw.\r\n- Changes profiles from object fields to dropdown lists and moves profile drawing from `BaseMixedRealityProfileInspector` to `MixedRealityInspectorUtilities`. The GUIContent for these lists are cached.\r\n- Adds a 'View Asset' button to profile fields - clicking this reveals the ScriptableObject asset in the project view.\r\n- Removes object picker window functionality from MixedRealityToolkitInspector, since dropdowns are effectively the same.\r\n\r\n![MRTKInspector](https://user-images.githubusercontent.com/9789716/65798513-ab45dc80-e126-11e9-9668-83274f114a4e.png)\r\n\r\n## Changes\r\n- Addresses: #6120\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
499583592,6119,"b""removed patch for scaling issue while animating because it's breaking bounding box scaling""","b""fix for #6088  \r\n\r\nI removed a fix I did to compensate for a messed up scaling caused by animating the localscale of the bounding box target object. ( https://github.com/microsoft/MixedRealityToolkit-Unity/pull/6017 )\r\nThis fix broke scaling behavior for bounding box children. \r\nSeems like scale changes to children are not propagated anymore once I set the localScale manually. This didn't show in the objects I tested with because the scaled objects were the target object itself. The broken cheese however has the scaled mesh as a child (same goes for slate, coffee, etc). \r\n\r\nI tried to add a different workaround for the messed up scaling (eg https://answers.unity.com/questions/770240/changing-the-scale-of-the-parent-messes-up-the-chi.html) but that didn't work with the test file I'm using from one of the partners. \r\nWhile testing with my own animation files this behavior won't show. \r\n\r\nI don't think the original issue #5006 is something we can fix in MRTK code (the exploding part, not the updating part -> that's already fixed).\r\n\r\n\r\nnit: added missing parentheses to if"""
499182368,6115,b'Instructions + scripts for running tests repeatedly',"b""## Overview\r\nWe recently fixed several intermittent test failures #6058, which were difficult to fix because there isn't an easy way to run tests repeatedly in Unity PlayMode. This PR adds a script + instructions (in UnitTests.md) for how to modify tests to run test multiple times.\r\n\r\nI used this script to run each intermittently failing test 100 times and verify my fixes.\r\n\r\n## Changes\r\n- Fixes: #6114\r\n\r\n## Verification\r\nPlease check out the PR, see if you can follow instructions to run a test of your choice 100 times in a row.\r\n\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
499179515,6113,b'Delete MRTKExamplesHub.meta',b'## Overview\r\nThis meta appears unused and kept being deleted by Unity.'
499178855,6112,b'Remove IconEditor',"b'## Overview\r\nSince we no longer have much icon usage in MRTK, this removes the custom editor for `DefaultAsset` which was showing up on all asset types without defined editors (so, folders like intended, but also nuspec, etc, which can be confusing).'"
499178606,6111,b'[Docs] Button documentation improvement',b'## Overview\r\nButton documentation improvement - Adding detailed steps for updating text and icon.\r\n\r\n## Changes\r\n- Fixes: #5463 \r\n\r\n## Preview\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/prerelease/2.1.0_stabilization_Docs_Button/Documentation/README_Button.md#how-to-change-the-icon-and-text'
499168333,6110,b'Update asset retargeter to account for anim files with script references',"b'## Overview\r\nAfter #5868 was merged, the asset retargeter failed due to .anim files potentially have script references as `script` instead of `m_Script`. This change accounts for that and improves logging this case to determine the actual file it was hit in.\r\n\r\n## Changes\r\n- Fixes: https://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=5553\r\n\r\n## Verification\r\nI ran this locally and saw that retargeting succeeded.'"
499160482,6109,b'[Docs] Documentation fix for the Examples Hub',"b'## Overview\r\n- Updated outdated information, added correct info.\r\n- Included ToggleFeaturesPanelExamplesHub.prefab in the MRTKExamplesHub scene.\r\n'"
499156224,6107,b'Cherry-pick pull request #6097 from Railboy/tooltip_inspector_fixes',b'Stops ToolTip inspectors from continuously refreshing\r\n'
499136410,6104,b'Interactable interface fixes',"b""## Overview\r\nThis change involves fixing up the Interactable class to be more robust and fix some broken interface design. The goal of this change is to ensure things won't break when a user configures Interactable. This PR does not add new functionality or change design with the exception of some inspector changes. Furthermore, there are multiple functions designated as deprecated.\r\n\r\n- Update to use CoreServices.InputSystem\r\n- Slimmed state tracking to just properties wrappers instead of StateManager and variables that can get out of sync, and made properties virtual for overriding\r\n- Simplified Dimension logic and slimmed down guards to appropriate areas\r\n- Slimmed down IsGlobal into guarded get/set property \r\n- Slimmed down VoiceRequiresFocus into guarded get/set property\r\n- SetupStates now reset all states appropriately so not out of sync\r\n- Added SelectionMode property for easily querying current button mode\r\n- Interactable inspector disabled entirely while in play mode (short term fix for bug XXXX)\r\n- IsEnabled updated to reset base input tracking states when disabled\r\n- Update documentation and better comments\r\n- Added tests to get better coverage on Interactable\r\n\r\n## Changes\r\n- Fixes: #5958 , #6039 , #6078 \r\n\r\n- Future Issues to address: \r\n#6100, #6101, #6103, #6105 \r\n\r\n## Verification\r\nAll tests pass\r\nHandInteractionExamples and InteractablesExample scene run as expected\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
499134978,6102,b'[Docs] Bounding Box documentation improvement',b'## Overview\r\nBounding box documentation improvement by adding a golden path for inspector & code.\r\n\r\n## Changes\r\n- Fixes: #5743 \r\n'
499052564,6099,b'Merge pull request #6040',b'This is a re-request of an already approved pr. This is being opened to restore the change after a previously merged change was reverted.'
499020518,6097,b'Stops ToolTip inspectors from continuously refreshing',"b'## Overview\r\nReplaces SetDirty calls in ToolTip inspectors with RequireConstantRepaint.\r\n\r\n## Changes\r\n- Fixes: #6096\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
498575821,6084,b'Fix intermittent failure ManipulationHandlerOneHandMoveFar',"b""## Overview\r\nUpdate the ray to be closer to the center of the box when targeting. Also discovered a few more rotation behaviors that don't work well with the test, so disable them (they caused the cube to move when you grab, which is expected).\r\n\r\n## Changes\r\n- Fixes: #6058 \r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
498552583,6083,b'Improve robustness of 2 hand interaction tests',"b'## Overview\r\nTwo PressableButton tests would occasionally fail.  This change tweaks the values of hand position to get them passing consistently.  I\'ve tested both tests 10 times in a row with these changes and have not seen a failure.\r\n\r\n## Changes\r\n- Partially addresses: #6058 .\r\n- ReleaseButton(""PressableButtonHoloLens2UnityUI.prefab"")\r\n   - The pointer finger would spawn at exactly the starting ""press"" location.  In the case of the Unity UI button, sometimes this would cause the GraphicsRaycast never to hit it.  So the fix is to push it outward by 1mm.\r\n- TriggerButtonFarInteraction(""PressableButtonHoloLens2.prefab"")\r\n   - When a simulated hand spawns, the far interaction ray seems to wobble for a frame or two.  My theory is that this caused this test to occasionally fail.  To fix it, I\'ve adjusted the hand position so that the far field endpoint is closer to the centerpoint of the button, so that any wobbling will still be pointed at the button.\r\n'"
498550096,6082,b'Fix intermittent voice command failure',"b'## Overview\r\nInstead of waiting for a frame, use `PlayModeTestUtilities.WaitForInputSystemUpdate` when using voice to press button.\r\n\r\n## Changes\r\n- Fixes: another case in #6058\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
498547107,6081,b'Fix pressable button test failures related to missing Text Mesh Pro Essentials',"b'This change ensures that TMP Essentials are imported prior to the pressable button tests being run.\r\n\r\nRoot cause\r\nThese tests have been failing with no data in the logs due to a dependence on TMP. The test attempted to import TMP Essentials as part of the startup method. Packages cannot be imported while Unity is in play mode, so the tests would quietly fail.'"
498534428,6079,b'Fix black piano key not responding to hand tracking input.',"b'# Overview\r\nIn HandInteractionExamples scene, black piano keys are not responding to finger press, very difficult to press.\r\n\r\n- Updated overlapping key colliders, updated NearInteactionTouchable\r\n- Adjusted the press distance values\r\n- Created separate prefab variant for the black keys\r\n\r\n## Changes\r\n- Fixes: #5943\r\n\r\n## MRC (Fixed)\r\n![MRTK_Piano](https://user-images.githubusercontent.com/13754172/65641251-29787680-dfa1-11e9-9e1e-a7227288ca30.gif)\r\n\r\n## Screenshots\r\n**Before: Colliders were overlapping for the black & white keys**\r\n<img width=""649"" alt=""2019-09-25 14_01_23-Unity 2018 4 7f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof"" src=""https://user-images.githubusercontent.com/13754172/65641104-c5ee4900-dfa0-11e9-8023-710a3551007c.png"">\r\n\r\n**After**\r\n<img width=""745"" alt=""2019-09-25 14_27_50-Unity 2018 4 7f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof"" src=""https://user-images.githubusercontent.com/13754172/65641112-c981d000-dfa0-11e9-9779-d7982953d615.png"">\r\n\r\n<img width=""396"" alt=""2019-09-25 14_03_23-Unity 2018 4 7f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof"" src=""https://user-images.githubusercontent.com/13754172/65641110-c850a300-dfa0-11e9-8ed9-5386445cc3b7.png"">\r\n\r\n\r\n'"
498482978,6075,b'Fix intermittent test failure',"b""Two fixes:\r\n\r\n1. Fixing failure `Microsoft.MixedReality.Toolkit.Tests.BaseCursorTests.CursorContextMove`, happened about 2/100 times. Issue seems similar -- Unity sometimes doesn't raycast when there's just one collider in scene. With a second collider, tests pass 100/100\r\n\r\n2. Fix failure `Microsoft.MixedReality.Toolkit.Tests.InteractableTests.TestInputActionMenuInput` by adding function that ensures input system updates (all input events raised can get received). Also make the test easier to diagnose by also checking if input has gone down, and up.\r\n\r\n## Changes\r\n- Fixes: another failure in #6058\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
498456287,6074,b'Fix intermittent test failure: bounding box scale near',"b'## Overview\r\nUse new methods for hand movement which waits for fixed update, increase handle size, make the test run faster.\r\n\r\nPrevious test failed about 10/100 runs. With these changes, had 0/100 failures\r\n\r\n## Changes\r\n- Part for for #6058\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
498453417,6073,b'Cherry pick #6040 into 2.1.0_stabilization',b'This change picks up #6040 from the mrtk_development branch'
498428301,6072,b'Input tool docs dev branch',b'This is a draft pr that should not be merged. it is open to allow the mrtk_docs validation to run on the change while i investigate getting docs to be checked in stabilization.'
498423998,6071,b'Merge 2.1.0 stabilization into development branch',b'Periodic merge of 2.1.0 fixes into the development branch'
497992704,6069,b'Cherrypick/6048',"b'## Overview\r\nCherry picks #6048 into stabilization.\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
497988241,6068,b'Fix for focus state when enabling/disabling Interactable',"b'## Overview\r\nAddresses fixes for:\r\n- #4967 \r\n- #4481 \r\n\r\nFixes incorrect focus state when enabling/disabling interactable and fixes a button depth issue.\r\n\r\nBoth issues above explain that when interactable (within the script) is disabled and then enabled, the button remains in the focus state. This is shown in the video below under the label ""Enable/Disable Interactable"".   This issue was addressed by adding `SetFocus(false)` in `SetDisable`.\r\n\r\nWhile working on this issue another issue was discovered when enabling/disabling the game object and the script, the button depth issue.  The button depth issue is also shown in the video below where the depth of the button does not reset after the game object or script is disabled.  This issue was addressed by removing `RefreshSetup` in `OnEnable`.\r\n\r\nThe video tests 3 different enable/disable scenarios: \r\n- Enable/Disable the gameObject - which is the round button\r\n- Enable/Disable interactable internally through SetDisable(false)\r\n- Enable/Disable the interactable script\r\n\r\n<img width=""516"" alt=""4967_4481_test"" src=""https://user-images.githubusercontent.com/53493796/65559296-fe354f00-deee-11e9-967b-a01d278e26e1.png"">\r\n\r\nDisabling the game object and the script are both unity events that raise `OnDisable` in interactable, this is different than `SetDisable` when disables interactable internally.  \r\n\r\nThe on focus color for the button was changed to green.  \r\n[Video of button depth issue and the focus state issue.  ](https://youtu.be/ZP8bXNiDIOc)\r\n\r\n## Changes\r\n- Added `SetFocus(false)` to fix the uncleared focus state when enabling and disabling interactable\r\n- Removed `RefreshSetup` in `OnEnable` to fix button depth issue\r\n- Updated `OnDisable` to disable interactable internally\r\n- Added a null check to TypeExtensions - added by Troy \r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
497988233,6067,b'Fix intermittently failing ManipulationHandlerOriginOffset test',"b""## Overview\r\nManipulationHandlerOriginOffset test was failing intermittently. There were several issues:\r\n\r\n1) The tolerance on rotation was too tight, 0.01 degrees! Increase to 1.\r\n2) Doing movement in one frame can cause some movements to not show up correctly. Increase to 10.\r\n3) The cube to move was invisible! Fix this by calling mesh.RecalculateBounds()\r\n4) About 1/20 times, the hand would fail to grab the cube, near or far. It turns out that Unity's Physics.Raycast and Physics.CheckSphere queries sometimes return no results even when there is physics geometry that should intersect, and the physics geometry has been updated. Oddly enough, adding a second collider (the background collider) fixes this.\r\n\r\nWith these changes, tests passed 100 times in a row.\r\n\r\n## Changes\r\n- Fixes: #5552 \r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
497953437,6066,b'Button size cleanup',"b'## Overview\r\nFixes the in-editor hit target size.  Also clean up the size of a few other things.\r\n\r\n## Changes\r\n- Fixes: #6065.\r\n   - Previously, RectTransformCubeScaler was on the same gameobject as the cube.  In response to the RectTransforms size changes, it applied a scale to itself to cause the cube to get resized.  This also caused the RectTransform object itself to get scaled, resulting in the hit target in editor being very large.\r\n   - Now, the cube has a transform (not a RectTransform).  RectTransformCubeScaler is on the parent object.  It listens to the size of that parent object and applies a scale to the child transform where the cube lives.\r\n- Resize the other UnityUI PressableButtons to be 32x32.\r\n- Change the hierarchy of the SceneDescriptionPanel to avoid similar issues of clicks outside of it causing it to be selected.'"
497939780,6064,b'Fix 5993 - Remove Usage of Shared Materials with Clipping Primitives',"b'## Overview\r\nThis change fixes an issue where clipping primitives were modifying a renderers shared material in the editor. Materials are now cloned (much like how renderer.material works at run time). This was done to support edit time manipulation without leaking materials into the scene.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/6001 relies on this change.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5993\r\n\r\n## Verification\r\nPlease try using a scene that uses primitive clipping such as the ClippingExamples or MaterialGallery scenes.\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
497937823,6063,b'Add documentation (and description panel) for controller mapping tool',b'## Overview\r\nThis change adds a description panel to the controller mapping tool (#5902) scene. It also renames the scene from InputAxisChecker to ControllerMappingTool as the new name is more in line with the intended usage.\r\n\r\nAdded a documentation article for the tool and updated the input data provider article to reference the tool as well as adding a previously overlooked section on interaction mappings.\r\n'
497900772,6062,b'Turn off input simulation indicators',"b""## Overview\r\nUPDATE: This PR originally moved input simulation indicators to the sides and updates the reset button to look like a 'refresh' button. However, after moving indicators to the side, raycasts related to Unity UI began failing. Since the indicators as they are are too visually distracting from interaction, check them in as off by default. Filed #6106 to track turning them back on. The indicators as they are checked in will be on the sides, with correct refresh buttons.\r\n\r\n![image](https://user-images.githubusercontent.com/168492/65546816-198f6280-decd-11e9-8b7f-39b123f19dc4.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #6023 \r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
497797556,6059,b'[2.1.0 stabilization] Hand Menu Examples scene fix',"b'## Overview\r\nHand Menu Example scene\'s toggle buttons were broken, missing proper theme profiles.\r\n- Reassigned theme profile for the toggle buttons.\r\n- Renamed the scene file name for consistency.\r\n- Reassigned the new scene file in the ExampleHubMainMenu (SceneSystem profile updated)\r\n- Tested on HoloLens 2 device\r\n\r\n***No code changes.\r\n\r\n## Changes\r\n- Fixes: #6057 #6056 \r\n\r\n<img width=""332"" alt=""2019-09-23 18_29_30-Unity 2018 4 7f1 Personal - HandMenuExample unity - MixedRealityToolkit-Unity - "" src=""https://user-images.githubusercontent.com/13754172/65531045-e9849700-dead-11e9-8bf7-938fe923f126.png"">\r\n\r\n'"
497436613,6051,b'Add ability for manipulationhandler to specify rotation constraints in space of pivot transform',"b'This is the minimum potential fix for the issue of having rotation constraints respect a ""local"" mode. The fix actually uses a pivot transform for specifying constraints against, which can be the transform itself.'"
497381799,6050,b'Merge 2.1.0 stabilization into development branch',b'Take latest stabilization fixes and merge them into the development branch to avoid excessive drift.'
497345970,6049,b'Add an example to demo Interactable with  UnityUI support',"b""## Overview\r\nDue to certain documentation and example gaps, folks leveraging MRTK were under the impression that Interactable can only be leveraged by Collider based objects, which is not true. This PR attempts to bridge that gap in understanding by creating a  simple Unity UI based interactable. \r\n\r\n## Changes\r\n- Adds a ButtonHololens1UnityUI prefab, which leverages Interactable system to drive state and visual changes. This button mimics the ButtonHololens1 prefab in visuals.\r\n- Added the prefab to the InteractablesExample scene to demonstrate the usage\r\n-  Updated the Button documentation to showcase  this new prefab.\r\n- Added/updated existing Visual Themes to drive Unity UI elements' property changes.\r\n\r\n![ugui](https://user-images.githubusercontent.com/17660747/65465460-35353300-de11-11e9-99ac-1f2eb7d278ac.gif)\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
497344841,6048,b'Fix a few issues with PressableButton - attempt 2',"b""## Overview\r\nThis fixes several small issues that affected a consuming app.\r\n\r\n## Changes\r\n- Fixes #6024.  The instantiation sequence in the app called OnEnabled(), OnDisabled(), OnEnabled(), Start().  This sequence resulted in OnDisabled flattening the buttons to depth 0, then Start() read in that position as the 'start' position.\r\n   - Now OnDisabled() won't call UpdateVisualsPosition() if Start() has not executed.\r\n- Fixes #6025.  The initial offset was stored as world location.  If you moved/rotated the buttons or their containers after Start(), it would result in the front plates being pushed in the original direction instead of the current direction.\r\n   - This affected the UnityUI-based buttons in the example scene.\r\n   - It did not affect the collider based buttons because:\r\n      - The collider based buttons don't have any visible objects in the MovingButtonVisuals.\r\n      - Also, collider based buttons are centered about the box's centroid.  The UnityUI buttons are centered about the center of the back plate.  And the MovingButtonVisuals in the collider button had a local position of 0.\r\n   - Now the value is stored in local space, then projected in the getter into world space based on the current position/rotation of the parent.\r\n- The PressableButtonUnityUI.prefab's front plate had a very small scale for some reason.  This causes some visual rendering issues.\r\n   - Set it back to 1.\r\n"""
497299870,6046,b'feedback: move experimental service managers to separate folder',"b""## Overview\r\n#5953 pointed out some confusion over the SDK's experimental folder structure. This change moves the service manager scripts and prefabs from the Features folder to ServiceManagers\r\n\r\n## Changes\r\n- Fixes: #5953\r\n"""
497233214,6043,b'Partial fix for #4289 (change active profile at runtime)',b'## Overview\r\nThis change is a **partial** fix for #4289. Applications can now switch the MixedRealityToolkit.ActiveProfile value at runtime (with some side-effects):\r\n\r\n- There is a collection changed error from LateUpdate when changing profiles (#6042)\r\n- The DefaultCursor gets duplicated during some profile transitions (#6041)\r\n\r\n## Verification\r\n- Created a simple scene with a single button that switches between two profiles (default and HoloLens2)\r\n- Use input simulation to toggle profiles in the editor\r\n- Confirmed expected services are enabled'
497226128,6040,b'Uses/anborod/nuget documentation',b'This change contains the documentation for consuming MRTK as a NuGet package.'
497174307,6037,"b'Revert ""Fix a few issues with PressableButton.""'",b'Reverts microsoft/MixedRealityToolkit-Unity#6010\r\n\r\nbreaks MRTK CI \r\nScaling tests in pressablebutton are failing'
497087092,6036,b'Experimental input field keyboard helper',"b'## Overview\r\nThe class MixedRealityKeyboard is a MonoBehaviour that shows how to Open, Close and use the system native keyboards on UWP platforms.\r\nThe programmer still has the responsibility to link it with whatever he needs the input for. This means he needs to write additional MonoBehaviour scripts to link the with for example InputFields, which activate on click.\r\n\r\nI wanted to make this easier in that InputFields and TMP_InputFields are handled directly by just one additional script attached to them.\r\n\r\n## Changes\r\nThis set of scripts provides the following:\r\n- A script, once attached to Unity InputFields, automatically manages the native keyboard and updates the InputFields text\r\n- Same for the TMP_InputField\r\n- Base classes to derive from if you want to use the keyboard for something other than InputFields\r\n\r\nI first went for overriding the InputFields, but first, they are far too complicated to just do that and second, The existing implementation of MixedRealityKeyboard.cs already completely ignores InputField interactions and second there might be more uses for the keyboard than just InputFields.'"
497082818,6035,b'apply same workaround as in EditorSceneUtils',"b""## Overview\r\nfixes a rare bug where it's possible to have 0 scene loaded when managing scenes from code.\r\n\r\n## Changes\r\n- Fixes: # . https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5895\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n\r\nthe `GetRootGameObjectsInLoadedScenes` function is duplicated in both EditorSceneUtils and RuntimeSceneUtils, both code are identical (EditorSceneManager calls could just be SceneManager), so  we could only keep and call one function here (the RuntimeSceneUtils one).\r\nLet me know if i should add  this change, or if we just do the minimal fix proposed here.\r\n"""
497074495,6034,b'serialization fix',"b""## Overview\r\nInputSimulationIndicators is part of a Prefab referenced in the MRTK profile for simulation purposes. The whole class is wrapped in #if UNITY_EDITOR and as we all know, that's bad if it contains serialized fields.\r\n\r\n## Changes\r\n- Fixes: #6033"""
496618340,6031,b'Adding the namespace to the ExamplesHubHomeButtonActivation script',b'## Overview\r\n- Adding the namespace Microsoft.MixedReality.Toolkit.UI to the example script \r\n- Moved the script ExamplesHubHomeButtonActivation to SDK folder since it is used by ToggleFeaturesPanel prefab. \r\n\r\nThis script is used to show or hide the home button in the ToggleFeaturesPanel.\r\n![2019-09-20 23_10_07-Unity 2018 4 6f1 Personal - MRTKExamplesHub unity - MRTK-Public-Yoon - Universal](https://user-images.githubusercontent.com/13754172/65368944-eb273400-dbfb-11e9-9da6-d31e35ecd231.png)\r\n'
496598022,6030,b'[Docs] Adding a link to the README page for the MRTK Examples Hub.',b'## Overview\r\nLanding page update: adding a link to the README page for the MRTK Examples Hub.\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/tree/mrtk_development_HubReadmeLink\r\n\r\nAdded link to this page:\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_HubReadmeLink/Documentation/README_ExampleHub.md\r\n\r\n![2019-09-20 18_25_37-cre8ivepark_MixedRealityToolkit-Unity at mrtk_development_HubReadmeLink](https://user-images.githubusercontent.com/13754172/65366072-185fec00-dbd4-11e9-8601-583a5f039a84.png)\r\n'
496558319,6029,b'Updated default simulation mouse rotation speed for improved usability',b'## Overview\r\nUpdated default simulation mouse rotation speed for improved usability.\r\nPrevious value: 6\r\nUpdate: 30\r\n\r\n*Updated mouseHandRotationSpeed: 30. Other lines are automatically updated.\r\n\r\n## Changes\r\n- Fixes: #6022\r\n\r\n![MRTK_InputSimulationHandRotation](https://user-images.githubusercontent.com/13754172/65360492-0589ef00-dbb5-11e9-87c5-714597be04a4.gif)\r\n'
496552308,6027,b'Added SetTouchableCollider() method in NearInteractionTouchable',"b'## Overview\r\nThis PR addresses a fix for #5825 by adding a method `SetTouchableCollider(BoxCollider collider)`. `SetTouchableCollider` allows you to set the bounds of NearInteractionTouchable at runtime to match the box collider given.\r\n\r\n## Changes\r\n- Added `SetTouchableCollider(BoxCollider collider)` method to NearInteractionTouchable.cs\r\n- Added a test `NearInteractionTouchableSetTouchableCollider()` in NearInteractionTouchableTests.cs to test the method\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
496547535,6026,b'PokePointer TouchableVolume fix touch up when in middle of volume',"b""## Overview\r\nPokePointers would actually raise up events when in the middle of a touchable volume, for two reasons:\r\n\r\n1) The ray that pokepointer was building was too short. When inside a volume, the ray would never actually hit any bounds of the volume, and therefore FocusProvider would thing that the pointer was no longer colliding with something, causing touch up.\r\n2) The distance checks in OnPostSceneQuery were looking at the length of the poke to hit point, which can make sense for touchable planes (you maybe want to raise touch up after you've gone far enough behind a plane), but not for volumes (you only really want to exit when you exit the volume). \r\n\r\nIn both cases I fixed this by  special-casing touchable volume in poke pointer, and making the ray longer as well as changing the distance check.\r\n\r\n## Changes\r\n- Fixes: #5873 \r\n- Added test to verify we get no touch ups when moving through a touchable volume.\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
496445875,6021,b'Hand Menu example polish',b'## Overview\r\n- Menu button layout polish.\r\n- Updated options layout in the scene for easier selection.\r\n- No code changes.\r\n\r\n![2019-09-19 17_47_49-Unity 2018 4 6f1 Personal - HandMenuExample unity - MRTK-Public-Microsoft - Univ](https://user-images.githubusercontent.com/13754172/65343531-0b1e0f80-db8a-11e9-8271-23d8dc76e425.png)\r\n![2019-09-19 15_23_36-Unity 2018 4 6f1 Personal - HandBasedMenuExample unity - MRTK-Public-Microsoft -](https://user-images.githubusercontent.com/13754172/65343533-0bb6a600-db8a-11e9-8c7c-5b4199c5d96f.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #5164 \r\n'
496441852,6019,b'Ux interaction destroy/disable fix and tests',"b'## Overview\r\nFocus provider had no conception of disabled/destroyed objects. Now, if an object is disabled or destroyed, The focus provider will respond and end focus lock. This then ensures that focus exit is called. \r\n\r\nBecause disabled objects do not receive events, I made some changes to UX classes to ensure that they respond correctly for `OnDisable`. There are potentially more cases where components are currently not handling `OnDisable` properly. If we find more, we can fix these cases and add more tests.\r\n\r\n## Changes\r\n- Fixes: #5243\r\n\r\n## Verification\r\n- 6 new tests\r\n'"
496310734,6017,b'fixed exploding handles when bounding box gets scaled to zero',"b""## Overview\r\nadded restoring of original local scaling value of rigroot which potentially gets messed up whenever rigroots parents scale is set to zero. \r\n\r\nThe linked bug has two issues, this one and also that the collider transform changes weren't propagated properly and handles weren't updated during the animation of the bounding box gameobject. The update part was already fixed in this PR #5982 \r\n\r\n## Changes\r\n- Fixes: #5006 \r\n\r\n\r\n## Verification\r\n- tested in hand interaction example scene \r\n- run tests"""
496188317,6016,b'MRTK 2019.1 deprecation fix',b'## Changes\r\n- Fixes: #6015'
496085487,6012,b'Get InputData example scene to 60 fps',"b'## Overview\r\n- Fixes: #5996 by using TextMesh instead of UnityUI text, which re-lays out every time text changes.\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
496074530,6010,b'Fix a few issues with PressableButton.',"b""## Overview\r\nThis fixes several small issues that affected a consuming app.\r\n\r\n## Changes\r\n- Fixes #6024.  The instantiation sequence in the app called OnEnabled(), OnDisabled(), OnEnabled(), Start().  This sequence resulted in OnDisabled flattening the buttons to depth 0, then Start() read in that position as the 'start' position.\r\n   - Now OnDisabled() won't call UpdateVisualsPosition() if Start() has not executed.\r\n- Fixes #6025.  The initial offset was stored as world location.  If you moved/rotated the buttons or their containers after Start(), it would result in the front plates being pushed in the original direction instead of the current direction.\r\n   - This affected the UnityUI-based buttons in the example scene.\r\n   - It did not affect the collider based buttons because:\r\n      - The collider based buttons don't have any visible objects in the MovingButtonVisuals.\r\n      - Also, collider based buttons are centered about the box's centroid.  The UnityUI buttons are centered about the center of the back plate.  And the MovingButtonVisuals in the collider button had a local position of 0.\r\n   - Now the value is stored in local space, then projected in the getter into world space based on the current position/rotation of the parent.\r\n- The PressableButtonUnityUI.prefab's front plate had a very small scale for some reason.  This causes some visual rendering issues.\r\n   - Set it back to 1.\r\n"""
495827461,6006,b'added missing doc comments for bounding box',b'added missing class description and doc comments for public / inspector properties\r\n\r\nfixes #5742 '
495740394,6004,b'Changed MixedRealityRaycastHit to use collider transform instead of RaycastHit.transform',"b'changed MixedRealityRaycastHit to use collider transform instead of Unity.RaycastHit.transform because this one potentially returns the transform of the gameobject that has a rigidbody attached instead of the actually collision transform.\r\n\r\nThis was the cause for not being able to interact with any handles of bounding box whenever a rigidbody component was attached. \r\n\r\nUnitys documentation on RaycastHit.transform is not clear on what\'s happening. It only states that: ""The Transform of the rigidbody or collider that was hit.""\r\n\r\nWhile digging around I found other ppl running into this as well:\r\nhttps://answers.unity.com/questions/190482/raycasthittranslatecollider.html\r\n\r\nMy observation while debugging confirms what\'s mentioned in that thread. Whenever we\'ve no rigidbody component attached the transform will be set to the hit colliders transform. Whenever there\'s a rigidbody component somewhere in hierarchy the transform will be populated with the rigidbody gameobject transform even though the hit result collider will point to a gameobject lower in the hierarchy.\r\n\r\n## Changes\r\n- Fixes: #4901 \r\n- Removed obsolete comment I found in BoundingBoxHelper\r\n\r\n## Verification\r\ntested modifying bounding box with and without rigid body component attached\r\nrun tests'"
495722223,6002,b'SpatialMesh Editor cleanup fix',"b""## Overview\r\n\r\nThe problem is that WindowsMixedRealitySpatialMeshObserver's CleanupObservedObjects detaches all children from observedObjectParent, if it exists and then destroys all the gameobjects using regular Destroy. This mix causes the errors and since the Editor should use DestroyImmediate anyways, this fixes it for the case of holographic remoting the Hololens and destroying generated meshes.\r\n\r\n## Changes\r\n- Fixes: #4208"""
495559374,6001,b'Experimental UX Feature: Scrolling object collection',"b'![MRTK_ScrollingList3](https://user-images.githubusercontent.com/13754172/65283862-f3dd1480-daec-11e9-8868-671106c6732b.gif)\r\n\r\n## Overview\r\nReviving the PR for #4724, this builds on the basic concept of ObjectCollection to allow developers to build scrollable lists of native, 3d content! This control was originally built for the HoloLens 2 Out of Box Experience (OOBE).\r\n\r\n## Features\r\n- Works like any other object collection, add children, press ""update.""\r\n- Works with MRTK input system including buttons and interactable. Includes UnityEvents as well. \r\n- Scrolls both up/down, and left/right.\r\n- Works with touch, as well as controllers / far / pointers.\r\n- Can by dynamically instantiated.\r\n- N items in list, any configuration of viewable and nonviewable content.\r\n- Uses MRTK Standard shader and clipping primitive for scroll clipping effect.\r\n- Multiple velocity options - None, None snap to item, standard falloff per frame, falloff per item (always magically lands on a full viewable set)\r\n\r\n## Changes\r\n - New Scrolling Object Collection control\r\n - Added an example scene\r\n\r\nAdditive - should be no breaking changes here:\r\n - `ObjectCollectionNode` now has a few more fields to reduce redundancy calls.\r\n - `ObjectCollectionNode` is no longer a `struct` its been changed to a `class` for mutability.\r\n - `BaseObjectCollection` has been broken out into a few more `protected` methods to cut down on redundancy.\r\n\r\n## Caveats\r\n - Due to #5993, you\'ll find a button with a missing back plate in the example scene.\r\n'"
495437385,5995,b'Add back a parameterless constructor to DefaultPointerMediator',"b'## Overview\r\nA constructor was recently added to DefaultPointerMediator.  This removed the implicit parameterless constructor, which was a breaking change that affected one of my projects.\r\n\r\n## Changes\r\n- Fixes: #5989 .\r\n- Adds an explicit parameterless constructor which passes null.  Also then added null checks where appropriate.'"
495353888,5990,b'Near Menu Examples',"b""## Overview\r\n![MRTK_UX_NearMenu](https://user-images.githubusercontent.com/13754172/65170238-14c63c80-d9fd-11e9-9fed-fcab6f3e7576.png)\r\n\r\nNear Menu is a UX control which provides a collection of buttons or other UI components. It is floating around the user's body and easily accessible anytime. Since it is loosely coupled with the user, it does not disturb the user's interaction with the target content. The user can use the 'Pin' button to world-lock/unlock the menu. The menu can be grabbed and placed at a specific position.\r\n\r\nPlease see this documentation for the details.\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_MenuExamples/Documentation/README_NearMenu.md\r\n\r\n### Created with existing MRTK components:\r\n- PressableButtonHoloLens2 prefab\r\n- Grid Object Collection: Multiple button layout in grid\r\n- Manipulation Handler: Grab and move the menu\r\n- RadialView Solver: Follow Me(tag-along) behavior\r\n\r\n### Prefabs:\r\n- NearMenuExample3x1.prefab\r\n- NearMenuExample3x2.prefab\r\n- NearMenuExample3x3.prefab\r\n- NearMenuExample4x1.prefab\r\n- NearMenuExample4x2.prefab\r\n\r\n### Example Scene:\r\n- NearMenuExamples.unity\r\n\r\n### MRC:\r\nhttps://gfycat.com/forkedwelloffinexpectatumpleco"""
495338774,5988,b'Lost Tracking Extension Service',"b""## Overview\r\nConverts @JonathanPalmerGD's lost tracking utility to an extension service and adds some additional functionality.\r\n\r\nWhen tracking is lost a visual is displayed. Optionally, time and audio are suspended. These options are configured in the service profile.\r\n\r\nFixes #6008\r\n\r\n## Verification\r\nWould be helpful to deploy this on HL1 and HL2 devices and ensure it works as expected. Service can be tested in-editor via the service inspector as well:\r\n![LostTrackingServiceInspector](https://user-images.githubusercontent.com/9789716/65167984-6cae7480-d9f8-11e9-9d75-03ee48560726.PNG)\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch"""
495326930,5987,b'Fix proximity effect ',"b'## Overview\r\nIn #5920 I modified PokePointer to disable the finger cursor when poke pointer was not enabled (IsInteractionEnabled == false). Turns out, the finger cursor drives the proximity effect, so disabling it causes not only the finger cursor to not show up, but for all proximity effects to stop working. \r\n\r\nA longer term fix would be to ensure that the proximity effect is running even when poke interactions are off, or when the poke pointer is not present. A short term fix is just to always have the finger cursor on, and to just turn off the visual if interaction is not enabled.\r\n\r\n## Changes\r\n- Fixes: #5962\r\n\r\n\r\n## Verification\r\nNote: when hand is near a grabbable, the cursor is still off. In the shell the cursor is on even when you are near a grabbable but not a touchable. I think this is a bug in the shell, since the finger cursor is meant to communicate ""you\'re near a touchable thing""\r\n\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
495296627,5986,b'Add script to update MRTK version across all files',"b""Add a script that should make it easier to update MRTK version number across all files known to contain a version string (unfortunately it seems that we can't just store that version in one place at the moment). \r\nThis won't replace a manual check and it's still necessary to verify that no location was omitted. \r\n"""
495200989,5983,b'StandardShaderGUIFix',"b'## Overview\r\n\r\nThe way the ""Albedo Alpha Mode"" was drawn in the inspector was not correct.\r\n\r\n- Fixes: #5978'"
495178459,5982,b'added check for bounds override changed to active part of bounding box update',b'## Overview\r\nBounds override transform changes were not taken into account in update of bounding box when bounding box was active.\r\n\r\nnot checking the bounds override changed while bounding box is active will result in the box not adjusting on bounds override transform changes.\r\n\r\n\r\n## Changes\r\n- Fixes: #5414 \r\n\r\n\r\n## Verification\r\ntested in bounding box runtime example scene\r\nrun bounding box tests'
494887829,5977,b'Duplicated service displayed under MixedRealityToolkit hierarchy (Service Inspector)',b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5968\r\n\r\nThe issue here is that the facades themselves are persisted to disk when saving (because they are just game objects that exist in the scene)\r\n\r\nThis change makes it so that the act of saving will cause us to delete those facades (and then also not generate new facades until the save has completed).'
494873625,5976,b'Add translation constraints to the Manipulation Handler',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4154\r\n\r\nThis change introduces movement constraints on the manipulation handler, so that objects can be configured to only move in a specific axis or plane.\r\n\r\nThis is implemented with a ""permissive"" model (i.e. an object can be configured to have free movement on certain axis). The set of free axes are configured via a flag-based parameter (Translation Axes).\r\n\r\nAdds some test coverage (not fully exhaustive, just checking the main cases i.e. each axis and a single plane)\r\n\r\nOther thoughts:\r\nIt\'s kinda weird that you can select X, Y, and Z at the same time (basically no-oping the constraints). I wanted to add a more specific warning here but without this PR in (https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5955/files) it would involve adding a custom inspector as well. First it\'s not that big a deal, but also if we want to deal with it once the other PR is in that would be fairly easy (just add a warning block to the inspector code + conditional showing of the parameter)\r\n\r\nI opted to not bake this into ConstraintOnMovement because I didn\'t want to explode a bunch of different options (i.e. X only, Y only, Z only, XY only, YZ only, XZ only), and I think that this general type of ""Axis Constraint"" exists elsewhere (it does if we look at rotation). I opted to name this somewhat generically so that it can be used in other scenarios that have axis-flag type behaviors.'"
494852584,5974,"b'Cache spatialInteractionManager on first use, not in constructor'","b'## Overview\r\n(This is future proofing for when these methods are callable in the Editor)\r\n\r\nDue to the possibility of construction of this type at edit time (which is itself potentially a different issue):\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blob/89fb1f941856963b0012c6755ddaf61a94d4b999/Assets/MixedRealityToolkit/Definitions/Devices/MixedRealityControllerMapping.cs#L131\r\n\r\nThis code is not valid at edit-time, only runtime. This moves caching the interaction manager from the constructor to first-use.\r\n'"
494848203,5973,b'Update formatting and method casing in ToggleHandVisualization',"b'## Overview\r\nWhile I was looking through this class, I updated some documentation, explicit method visibility, and method name casing.'"
494845976,5972,b'BoundingBox proximity pointer null check',"b""## Overview\r\nAdd a null check while observing a proximity pointer's result, which I was seeing occasionally be queried while null.\r\nSome of these times were due to bugs in other parts of my code, but we do null check the `Result` in other places, so it feels reasonable to do here too."""
494727233,5967,b'Interactable configuration/documentation/test changes',"b""## Overview\r\nThis is a culmination of multiple PRs and merging the feature branch into MRTK_Dev:\r\n- Related PRs: #5857 , #5889 , #5898 , #5925 , #5960 \r\n\r\nThere are a lot of fixes in here and I would reference each PR for details but the important notes for this PR is the review of breaking changes and validation steps.\r\n\r\n## Upgraded Interactable and Visual Themes\r\nInteractable has been refactored significantly. We took great care to not break anything, but it's a good idea before upgrading to 2.1 to back up your existing project. \r\n\r\n### Change Highlights:\r\n* The Themes functionality with Interactable has been extracted into it's own feature called Visual Themes. \r\n* The Visual Themes code has been refactored to be more robust and simplified. This involves some class name changes and some property changes. \r\n* Themes can now target specific shader properties explicitly using the new `ThemeStateProperty.TargetShader` and `ThemeStateProperty.ShaderPropertyName` variables.\r\n* Better documentation on how to create Interactables and Themes dynamically via code\r\n\r\n**1) If you used default Theme scriptableobjects or created Theme assets using the default Theme types (like InteractableColorTheme):**\r\n\r\nEverything should work as-is. To force your assets to update though, you can select your assets or scene/prefab items and view them in the inspector. Note: Unity only writes inspector changes to disk once the scene is saved. After doing this, you should be able to see the serialized diffs in your source control tracking.\r\n\r\n**2) If you defined Events Receivers for your Interactables in scenes/prefabs:**\r\n\r\nEverything should work as-is. To force your assets to update properly though, you can select and view the Events (foldout must be opened) to force the asset update. Note: Unity only writes inspector changes to disk once the scene is saved. \r\n\r\n**3) If you built a custom theme class extending InteractableThemeBase:**\r\n\r\nThe names of many classes have changed. See list below for full information. Three new properties should be implemented by your class extending `InteractableThemeBase`. \r\n\r\n`public override bool IsEasingSupported => true;`\r\nSet to true if your theme supports easing between values when state changes\r\n\r\n`public override bool AreShadersSupported => false;`\r\nSet to true if your theme supports shader property targeting\r\n\r\n`public override ThemeDefinition GetDefaultThemeDefinition()`\r\nThis method returns a default configuration object for your theme. Include properties, names, and types that your Theme is expecting to run when configured via `Init(GameObject host, ThemeDefinition definition)`\r\n\r\nLook at \\MixedRealityToolkit.SDK\\Features\\UX\\Scripts\\VisualThemes\\ThemeEngines\\ for examples of how to implement this method\r\n\r\nAlso function definitions may need to be updated for new class name which are arguments into the function such as\r\n`InteractableThemeBase.Init(GameObject, ThemeDefinition)` \r\n`ThemePropertyValue GetProperty(ThemeStateProperty property)`\r\n`SetValue(ThemeStateProperty property, int index, float percentage)`\r\n\r\n**4) If you built a custom Event receiver class extending ReceiverBase:**\r\n\r\nEverything should work as-is. Only step to be taken is to update any extended constructors to pass a name string into the base. Note: Fields must have the InspectorField attribute to show up on Interactable objects in the Unity inspector\r\n\r\n**Change Details:**\r\n\r\n- `InteractableThemeBase` now has abstract method `GetDefaultTheme()`, `IsEasingSupported`, `AreShadersSupported`\r\n- Shader property metadata in Theme SO moved to `ThemeStateProperty.TargetShader` and `ThemeStateProperty.ShaderPropertyName` variables\r\n- Event Receivers in scene/prefab files need to update to include AssemblyClassName. Bug where data was not originally saved.\r\n- Multiple classes have been renamed see list below\r\n- `InteractableTextureTheme` not extends `InteractableShaderTheme` and supports shader property targeting\r\n- Elimination of `InteractableTypeFinder`/`InteractableTypesContainer` classes\r\n- Creating Scriptable objects shortcut now under *Create* > *MRTK* > *Theme/State*\r\n\r\n**Major API Renames:**\r\nInteractable.Events => Interactable.InteractableEvents\r\nInteractable.ForceUpdateThemes() => Interactable.RefreshSetup()\r\nInteractableStateModel => BaseStateModel\r\nInteractableThemePropertySettings => ThemeDefinition\r\nInteractableThemeProperty => ThemeStateProperty\r\nInteractableCustomSetting => ThemeProperty\r\nInteractableThemePropertyValue => ThemePropertyValue\r\nInteractableThemePropertyTypes => ThemePropertyType\r\nStates.CompareStates => States.Equals\r\n\r\n## Changes\r\n- Fixes: #5866 , #5652 , #5462 , #5058 , #5459 , #5050 , #5788 \r\n\r\n## Verification\r\n**Build following in GA and then update GA to feature branch**\r\n1) Theme assets (SUCCESS)\r\n2) CustomThemeClass (SUCCESS)\r\n3) Interactable Events Receivers in a scene (SUCCESS)\r\n4) Interactable Events Receivers a in prefab (SUCCESS)\r\n5) Create custom EventReceiver class(SUCCESS)\r\n\r\n**After MRTK code update, test the following**\r\nFunctionality works out-of-box after just hitting playing\r\nTheme inspector works as expected\r\nInteractable inspector works as expected\r\n\r\n**Other validation**\r\nAll automated tests pass (SUCCESS)\r\nTest InteractableExamples scene works (SUCCESS)\r\nTest HandInteractionExample scene works (SUCCESS)\r\nTested import of Themes from RC2.1 (SUCCESS)\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
494583691,5965,b'First iteration on refactoring BoundingBox to BoundsControl',"b""## Overview\r\nThis refactor separates visuals and logic from BoundingBox and separates each logical visual element in a separate class:\r\n- BoxDisplay\r\n- Links\r\n- Handles (Rotation / Scale)\r\n- Proximity Effect\r\n\r\nNew BoundsControl class has a its own version of all tests and example scenes that Bounding Box has. \r\n\r\nThere's no refactor of scale / rotation logic yet in this PR - this is purely refactoring the visuals and make it more readable / maintainable / reusable. \r\n\r\n-------------\r\n\r\nProximityEffect works on an interface now and doesn't have any connection to bounding box or handles anymore. I might move this into it's own component to make it available to more UX elements as it just scales objects on proximity and switches out materials. There's a \r\n ProximityEffectObjectProvider that needs to be implemented to be able to use ProximityEffect with any type of GameObject.\r\n\r\nHandles now have a Base class to unify common behavior of any handle type of BoundsControl.\r\n\r\n--------------\r\n\r\nExisting tests are still working for BoundsControl. \r\n\r\n--------------\r\nThis PR is part of BoundingBox refactor https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5340. BoundingBox is one of the most commonly used components in MRTK but has over time grown into a huge monolithic class that is hard to maintain and understand for developers and users.  \r\nBoundingBox refactor should \r\n- make it's code easier to understand and reuse for MRTK developers\r\n- make BoundingBox easier to understand and use for consumers of MRTK\r\n- make it easier to merge common / shared functionality with ManipulationHandler (ObjectManipulator) or other components that have overlapping functionality\r\n- increase test coverage\r\n- provide clear documentation on how to set up bounds control and use it \r\n\r\nRefactor breakdown:\r\n- Separate Logic from Visuals in Bounding Box **<- mostly done in this PR**\r\n- Add tests for BoundsControl and ProximityEffect\r\n- (Potentially move ProximityEffect into own component to be reusable for other UX elements)\r\n- Unify events and constraints / share logic between BoundsControl and ObjectManipulator\r\n- Make AppBar / Example scripts work with new BoundsControl\r\n- Improve Inspector for setting up BoundsControl <- **parts of this in this PR**\r\n- Provide migration tool for upgrading from BoundingBox to BoundsControl\r\n\r\n-------------\r\n\r\nInspector after this will have all visuals grouped in sections and those are collapsed per default. This is not the final version of the inspector- there will be some follow up PRs tackling the user side of things in BoundsControl\r\n\r\ndefault:\r\n![image](https://user-images.githubusercontent.com/36998103/65063578-742d3980-d976-11e9-91ab-2844a36750b0.png)\r\n\r\nexpanded:\r\n![image](https://user-images.githubusercontent.com/36998103/65063476-3cbe8d00-d976-11e9-9469-3394086043e2.png)\r\n """
494470440,5964,b'Fix build tools generating malformed scripting symbols',"b""## Overview\r\n\r\nDue to the changes in #5897, the code to inject the configuration scripting symbols is now properly invoked. Previously it wasn't invoked at all, because the `BuildInfo.Configuration` was never set. However there are some type conversion errors in the code, resulting in scripting symbols along the lines of `debug;System.Linq.Enumerable+<ExceptIterator>d__57'1[System.String]`. Those type errors are fixed in this commit (a good example of `var` hiding a compile time error).\r\n\r\nRelated to this issue, what is the purpose of the `debug', 'release' and 'master' symbols injected in the first place? Those were never properly injected before and as far as i can tell everything ran fine. So are they obsolete? Maybe this question can be discussed in a separate issue, if there is no definite answer.\r\n\r\n## Verification\r\n\r\nCheckout this branch, open a project with custom scripting symbols set in the Unity player settings. Build the Unity player using the MRTK build window. Check the scripting symbols in the Unity player settings. \r\n"""
494325232,5961,b'Fix the HandConstraint solver to only consider controllers with handedness != None to be valid targets.',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5749\r\n\r\nThe Xbox controller is an IMixedRealityController, that, when plugged in, will trigger the hand menu because it's considered a valid target for the hand constraint solver.\r\n\r\nThis change makes it so that the solver will filter out any controllers that don't have a handedness specified (i.e. they should be left/right/any/both)"""
494287037,5960,b'Interactable fixes part 5/5',"b'## Overview\r\n\r\nFinal one of series for feature branch on Interactable work\r\n\r\n- Created dedicated documentation for visual themes\r\n- Updated docs for Interactable and added lots of code snippets\r\n- Created DrawSectionFoldout utility to save open state to SessionState\r\n- Moved path of creating new ScriptableObjects outside of Interactable\r\n- Renamed InteractableStateModel to BaseStateModel\r\n- Null check fixes if ScriptableObject types were corrupted (like theme type was removed from Project)\r\n- Update rendering styles of Themes/Interactable\r\n- Fixed minor inspector bugs\r\n\r\n## Changes\r\n- Fixes: #5462 \r\n\r\n## Verification\r\nDocFX ran locally\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
494262146,5959,b'Fix the broken docfx build',b'A change to mrtk_release was made that had a broken markdown link - this fixes it so that the link is correct'
494189789,5956,b'Merge docs updates back into mrtk_dev',"b""## Overview\r\nSince our docs are generated from mrtk_dev, it'd be good to get these updates back into the github.io page."""
494075643,5955,b'Start of ManipulationHandler rework',"b'## Overview\r\n- Adds `PrimitiveManipulator` component to experimental, which is ultimately intended to replace `ManipulationHandler`.\r\n  - Changes some of the enums to use flags. This allowed me to simplify things within `ManipulationHandler`, but also exposes some more functionality to the user.\r\n  - Removed the `ManipulationHandler` internal state machine, as it was too simple to be necessary and simply obfuscated pointer events.\r\n  - Removed `RotateAboutObjectCenter` option, as it only behaved differently for one handed near interaction, and this different behaviour felt unnatural. \r\n  - Some minor cleanup of `ManipulationHandler` and the move/rotate/scale logic classes.\r\n  - `PrimitiveManipulator` does not differ hugely from `ManipulationHandler` from the perspective of the user yet, but separating these classes now allows us to make bigger changes that will affect the user later.\r\n- Improved the `ManipulationHandler` inspector and added the `PrimitiveManipulator` inspector.\r\n  - Different sections are now contained in foldout sections.\r\n  - Some sections are only displayed when certain conditions are met. These conditions are made clear in help boxes.\r\n  - Added a warning for `ManipulationHandler` inspector, informing the user that `ManipulationHandler` will soon be removed. Also provided a button that will automatically upgrade the current object to use `PrimitiveInspector`.\r\n- Added a new test for `ManipulationHandler` and new tests for `PrimitiveInspector`.\r\n\r\n## Changes\r\n- Fixes: #5464, #4396, #5776.\r\n\r\n#### New Inspector\r\n![image](https://user-images.githubusercontent.com/47415945/64962643-ae6fdb80-d88f-11e9-9426-e59ecd0acdf7.png)\r\n\r\n#### Upgrade Button\r\n![image](https://user-images.githubusercontent.com/47415945/64964702-79658800-d893-11e9-9f3d-6bb7c8420a2f.png)\r\n\r\n'"
494066724,5954,b'Fix typo on README_MRTKStandardShader.html',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
493536980,5951,b'Update the AsyncCoroutineRunner to be properly rooted for DontDestroyOnLoad',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5900\r\n\r\nDontDestroyOnLoad is only valid to be called on an object that is at the root (i.e. it has a null parent). It's possible for the AsyncCoroutineRunner to have been attached to the mixed reality playspace (i.e. if the user manually created one under the playspace or under any other object).\r\n\r\nThis updates the code to do a one-time at runtime fixup of its location to make sure that it can properly be DontDestroyOnLoad-ed."""
493453112,5949,b'Fix spam of ReflectionTypeLoadExceptions in some scenarios in Unity Editor.  Fixes #5419.',"b""## Overview\r\nIn one consuming app, I observed a constant stream of ReflectionTypeLoadExceptions in the Editor.  To resolve this issue, I've implemented fix suggested in [a stackoverflow post](https://stackoverflow.com/questions/7889228/how-to-prevent-reflectiontypeloadexception-when-calling-assembly-gettypes).  Namely, to use an extension to catch the exception and return the types which loaded successfully.\r\n\r\nUnknown to me: what causes this exception to get thrown in the first place?  Does it indicate some further issue that should be resolved?  In the mean time, this unblocks me.\r\n\r\n## Changes\r\n- Fixes: #5419."""
493072658,5948,b'Update the MRTK runtime to not allocate a new list on each Update loop.',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5942\r\n\r\nThe core MRTK update loop was allocating a new List<> (actually, two, if you look at both Update and LateUpdate). This is because each call to MixedRealityServiceRegistry wasn\'t being cached. In addition, LINQ adds its own GC overhead (i.e. after re-creating the same identical list, the same list was then sorted again... and again... and again...)\r\n\r\nThis change avoids that by updating the GetAllServices call to return a cached list of services, which are sorted in priority order. That way the MRTK instead of having to re-copy and resort, can just use the same list on every single frame.\r\n\r\nI had also considered keeping the original ""sort order"" (i.e. random, or actually, insertion order into the registry) but we never formally defined what the ordering of elements was here, and the prime and most important scenario here depends on it being priority order sorted, so we may as well optimize for that use case.\r\n\r\nI didn\'t fully get rid of LINQ (note that the Reverse operation still uses LINQ) - this is okay because it\'s only in the shutdown path. Alternatively I could have changed the function signature of GetAllServices to be IReadOnlyList, but this would have been a breaking change for not a lot of value.'"
493025993,5947,b'Updated template for play mode tests in UnitTests.md',"b'## Overview\r\nThis PR updates the UnitTests.md doc play mode tests template section.   The new play mode test template inherits from BasePlayModeTests and the template includes a starter example that shows a test hand, moves it and gets the line pointer.\r\n\r\n## Changes\r\n- Added BasePlayModeTests script in UnitTests.md\r\n- Added example starter test to UnitTests.md\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
493008527,5946,b'Reserialize materials with new shader properties',b'## Overview\r\nReserializes with some changes from #5562 (and other shader PRs)'
493005314,5944,"b'add simple methods to acquire ray for a pointer (eyes, head, hand, etc)'","b'## Overview\r\nMany people ask ""how do I find out where the hand is pointing, or how do I find out where the eye gaze is looking?"". This change adds methods to make it easy for application code to acquire the position and rotation of head, hands, eyes, and motion controllers.\r\n\r\nIt also adds an example scene to demonstrate how to access position, rotation of head, eyes, hands. As a bonus, the scene also shows how to directly query all controller input mappings. As an extra bonus, the scene visualizes a miniature version of the user aka ""mini me"" in a miniature world. \r\n\r\n![image](https://user-images.githubusercontent.com/168492/65113989-0e52a900-d99a-11e9-8ba0-fd2f02cd18ef.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #5280\r\n- Added InputState docs page that gives examples for how to access position, rotation of inputs.\r\n- Added InputDataExample scene that shows how to get the position, rotation of inputs, as well as access raw input data from controllers.\r\n- Added tests to verify InputUtils classes\r\n\r\nAdded the following methods:\r\n- TryGetHeadGazeRay(out Ray)\r\n- TryGetEyeGazeRay(out Ray)\r\n- TryGetGazeRay(out Ray, out InputSourceType) - Allows applications to not require knowledge of which gaze source is being used\r\n- TryGetHandRay(Handedness, out Ray)\r\n- TryGetMotionControllerRay(Handedness, out Ray)\r\n- TryGetHandOrControllerRay(Handedness, out Ray, out InputSourceType)  - Allows applications to not require knowledge of whether a hand or a motion controller is being used\r\n- TryGetRay(InputSource, Handedness, out Ray)\r\n\r\n## Verification\r\n- Tested example scene on HL2, in editor\r\n- Tests pass'"
492962928,5941,b'[Docs] Landing page updates & improvements',"b'## Overview\r\n- Some content update to introduce the latest features\r\n- Improved shortcuts for MRTK docs\r\n- Some updates on broken image links\r\n\r\n### Added entry for the Hand Menu, Spatial Awareness, and Voice command\r\n![2019-09-12 11_29_07-cre8ivepark_MixedRealityToolkit-Unity at mrtk_release_Docs0911](https://user-images.githubusercontent.com/13754172/64810770-da6a2480-d550-11e9-933a-ee94f71a8e6f.png)\r\n\r\n### Updated MRTK Docs entry points\r\n![2019-09-12 11_28_59-cre8ivepark_MixedRealityToolkit-Unity at mrtk_release_Docs0911](https://user-images.githubusercontent.com/13754172/64810776-dd651500-d550-11e9-9f0a-4f1593170fd5.png)\r\n\r\n## Branch\r\nmrtk_release\r\n'"
492944745,5940,b'Update targets to match nuspec names',"b""## Overview\r\nA few nuspecs had `Examples` copied in from the examples nuspec, but the others matched their actual assembly/nuspec name.\r\n\r\nNot sure if this affects actual nuget generation.\r\n\r\n## Validation\r\nMake sure this doesn't break nuget generation."""
492936524,5938,b'Support for enabling and disabling the input system.',"b'Currently support for enabling and disabling the input system is fairly spotty - it\'s possible to call CoreServices.InputSystem.Disable and then in a separate frame call CoreServices.InputSystem.Enable, but this also doesn\'t fully work because you actually need to call Initialize prior to calling enable. Furthermore, calling CoreServices.InputSystem.Reset breaks things in a worse way (despite the fact that Reset actually calls Initialize).\r\n\r\n## Background\r\n\r\nThe underlying issue here is tricky, and there are a number of issues, which we\'ll first describe here, and then go onto what all was changed here.\r\n\r\nThe input system is actually composed of multiple parts - there\'s the input system itself, the focus provider (which is the part that has an update loop that updates the focused objects), the raycast provider, and the gaze provider (there are OTHER subsystems as well, but for the purposes of this, we only talk about the ""top level"" services and not the underlying dataproviders/device managers.) Disabling the input system only disables the ""input system"" part, and not the focus provider, gaze provider, raycast provider, etc. In addition, re-enabling the input system also doesn\'t correctly re-enable everything because the GazeProvider is currently its own independent MonoBehaviour, which \r\nhas workarounds in its own Start() function for properly hooking into the input system. When the input system is re-enabled these typical pathways (which work because the GazeProvider was already present on the camera at startup time) don\'t work correctly, so you end up seeing a ton of null exceptions or other weird state.\r\n\r\nThe other parts of the input system work fine in this regard (i.e. the device managers), so this is primarily an issue with the gaze provider\'s MonoBehaviour status and it\'s non-coordinated startup and shutdown with the rest of the input system.\r\n\r\n## What is changed\r\n\r\nThe main change here is moving the GazeProvider to be a service, instead of a monobehaviour. This is similar to the work that we did around moving the FocusProvider to a service as well. This allows us to standardize on the startup/enable/disable/shutdown flow for these various objects that have dependencies on each other (i.e. input/focus/gaze).\r\n\r\nThe secondary change here is adding new helper APIs to the service registry (EnableService/DisableService) which can be used to enable/disable services (and properly call Initialize->Enable for Enable). As part of this, we also now document the IMixedRealityService functions as only being supported from the MRTK runtime itself (or whoever is managing the service) - these functions aren\'t expected to be invoked arbitrarily.\r\n\r\nThis change has a somewhat cascading set of changes which include:\r\n- Now that the GazeProvider is no longer a MonoBehaviour, its configuration must exist somewhere (in a profile). This change adds a new profile type (MixedRealityGazeProfile) which contains the same set of information that the GazeProvider MonoBehaviour had.\r\n- This new profile was added to a ""Gaze"" section in the MRTK inspector. Note that in order to avoid having multiple locations for gaze settings, this moved the existing gaze settings OUT from the pointer section, into the gaze section. This is actually a breaking change for profiles, which will require a migration script to help with.\r\n- Updates the mixed reality base service with knowledge on its own enable/disable state, so that when other services have been disabled/enabled, they can know not to bother doing handling anything in Update()/LateUpdate(). Note that this could have been done in a different way (i.e. by having IMixedRealityService expose a GetState()) and then having the runtime only call Update() and LateUpdate() on enabled services, but this would have been a breaking change and I think it would be worth discussing the value of such a change more before doing that.\r\n- The input system now manages the enable/disable state of the focus provider and gaze provider when its gets enabled/disabled itself. Note that this leads to some issues which are called out in the issues section, which are worked around in the code (see comments in the code)\r\n\r\n## Issues with this approach, and alternatives.\r\n\r\nIt would have also been possible to fix this up by implementing Enable/Disable functions on the MonoBehaviour for the gaze provider (and also changing up the way that the input system itself hooked into the gaze provider - i.e. we could have exposed a function on GazeProvider called ""Reinitialize"" which would have given the GazeProvider the chance to fix its state up). It felt like this would have been a bandaid, and having multiple core input components that have non-deterministic and different runtimes is a bad thing (i.e. it should ALL be monobehaviours or all services, instead of some mix between the two). Consistency is important.\r\n\r\nThis change didn\'t go all the way of having the input system itself manage/register the focus provider/gaze provider (i.e. these aren\'t really ""top level"" components - they currently are labelled as such in the MixedRealityToolkit.cs runtime, but are really subcomponents of the input system (i.e. they are more akin to a dataprovider than another top level service like the boundary service). This is a larger change that\'s probably worth having outside of this discussion.\r\n\r\nAnother issue here is that because the input system will disable the focus provider and gaze provider in its own disable function, MRTK shutdown is a little bit more complicated - it would lead to a double-disable (i.e. focus provider is disabled twice, and then gaze provider is disabled twice) - this is somewhat unavoidable as long as those two providers are ""top level"" services, but this issue is worked around in the input system\'s disable() function.\r\n\r\nFixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5777 https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5085'"
492513104,5934,b'Reserialize segoe assets',"b""## Overview\r\nThese files keep reserializing themselves (I've heard from a few others as well)."""
492492284,5933,b'PressableButton plane visualization improvements',b'Make pressable button planes semi-transparent when component disabled.  Correctly cause scene view window to repaint when use checks or unchecks ShowButtonEventPlanes.  Similar to how BoxCollider and others do.\r\n\r\nFixes #5939'
492135860,5932,b'Add optional parameter to test script for passing through a test filter.',b'This allows running only a subset of tests instead of the full suite.\r\n'
491972221,5931,b'Cherry-Picking Simple Bug Fix',b'This is a very simple bug fix.'
491971326,5930,b'Fixing a bug in Re-Import',b'This is a small mistake that I made.'
491921715,5928,"b""Cherry-Picking David's Fix""","b""This brings in David's spatial mesh observer fix."""
491905895,5927,b'Scale Should Not Influence Smooth Normals',"b'## Overview\r\nA recent change broke mesh outling, this fix addresses the issue by making sure scale does nt influence smooth normal.\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/13305729/64651141-a4ecfc00-d3d5-11e9-8336-af987fc4e451.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/13305729/64651175-b7673580-d3d5-11e9-918e-7b49c73d6008.png)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5926\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
491874654,5925,b'Interactable Fixes 4/N',"b'## Overview\r\n\r\n- Expanded test coverage for VisualThemes and simplified related test infrastructure\r\n- Fixed Default interactable states\r\n- Fixed Hololens1Prefabs for missing interactable event type\r\n- Updated serialized objects for new property casing on all theme assets\r\n- Updated all uses of MRTK standard shader to use StandardShaderUtils\r\n\r\n## Changes\r\n- Fixes: #5866, #5788 , #5459 \r\n\r\n## Verification\r\nAll tests passed\r\nInteractablesExamples and HandInteractionExample scenes run\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
491858662,5923,b'Added test to verify that pointer is valid for first frame after hand appears - issue 5053',"b'## Overview\r\nThis PR addresses issue #5053.\r\nThis test checks whether the pointer is valid for the first frame.  It also checks if the pointer direction is facing the same general direction as camera forward.\r\n\r\n[Video of Pointer Test](https://youtu.be/FRWSFsgt6PI)\r\n\r\n## Changes\r\n- Added PointerTests.cs to Assets/MixedRealityToolkit.Tests/PlayModeTests/\r\n\r\n## Verification\r\n- In Unity: Window -> General -> TestRunner\r\n- Select PlayMode at the top of the window\r\n- Select PointerTests and then Run Selected\r\n\r\n<img width=""354"" alt=""issue_5053_RunTests"" src=""https://user-images.githubusercontent.com/53493796/64643783-04dba680-d3c6-11e9-8a3d-9748ebba4836.png"">\r\n\r\n'"
491805217,5921,"b'5856 - improve resiliency, use as instead of c-style cast'","b'This change is a fix for #5856, where we have a report of an invalid cast exception occurring if the focus target is not an Interactable.\r\n\r\nThe change replaces a c-style cast (which can cause invalid cast exceptions) with the c# as keyword (which results in null instead of an invalid cast).\r\n\r\nI was unable to reproduce the reported issue, however @asugaya-apx has offered to help verify the fix.\r\n\r\n- Fixes: #5856 \r\n'"
491746297,5920,b'Disable pointers from code',"b""## Overview\r\nWe have had many requests for how to disable the far interaction (line pointer, hand rays, etc) at runtime. For example, this [stackoverflow question](https://stackoverflow.com/questions/56248329/how-to-turn-off-motion-controller-line-pointer/56435895#56435895).\r\n\r\nThe default way to do this is not obvious, and requires creating a custom mediator. This change provides a way for people using the default `FocusProvider` and `DefaultPointerMediator` to dynamically enable and disable pointers at runtime. Pointers can be enabled / disabled per handedness as well, allowing you to, for example, turn off hand rays for the right hand only. \r\n\r\nDevelopers turn pointers on and off by specifying the `PointerBehavior` for a pointer type. PointerBehavior is defined as follows:\r\n\r\n```\r\n    /// <summary>\r\n    /// Specifies how a pointer in MRTK's default input system behaves.\r\n    /// By default, pointer behaviors are set to Default.\r\n    /// </summary>\r\n    public enum PointerBehavior\r\n    {\r\n        /// <summary>\r\n        /// Pointer active state is managed by MRTK input system. If it is a near pointer (grab, poke), it\r\n        /// will be always enabled. If it is not a near pointer, it will get disabled if any near pointer on the \r\n        /// same hand is active. This is what allows rays to turn off when a hand is near a grabbable.\r\n        /// </summary>\r\n        Default,\r\n        /// <summary>\r\n        /// Pointer is always on, regardless of what other pointers are active.\r\n        /// </summary>\r\n        AlwaysOn,\r\n        /// <summary>\r\n        /// Pointer is always off, regardless of what other pointers are active.\r\n        /// </summary>\r\n        AlwaysOff\r\n    };\r\n```\r\n\r\nHere is an example of dynamically turning different pointers on / off:\r\n\r\n![pointerOnOff](https://user-images.githubusercontent.com/168492/64627539-ae11a500-d3a4-11e9-8513-d8cfed727c5f.gif)\r\n\r\n\r\n## Changes\r\n- Fixes: #4954\r\n- Introduce `PointerBehavior` to describe how pointer should behave: On, Off, Default (use MRTK Rules: gaze is off if hand rays on, hand rays off if they are near grabbable)\r\n- Provide API in `FocusProvider` to set the pointer behavior for a pointer type and handedness\r\n- Provide convenience methods in `PointerUtils` to set common pointer behaviors\r\n- Add tests\r\n- Add example scene\r\n- Add documentation\r\n\r\n## Old way to turn pointers on off\r\nSee this [stackoverflow question](https://stackoverflow.com/questions/56248329/how-to-turn-off-motion-controller-line-pointer/56435895#56435895), it requires creating custom pointer mediator.\r\n\r\n## New way to turn pointers on / off\r\n\r\n```csharp\r\n// Turn off all hand rays\r\nPointerUtils.SetHandRayPointerBehavior(PointerBehavior.AlwaysOff);\r\n\r\n// Restore default behavior for rays (on if not near something grabbable)\r\nPointerUtils.SetHandRayPointerBehavior(PointerBehavior.Default);\r\n\r\n// Turn off hand rays for the right hand only\r\nPointerUtils.SetHandRayPointerBehavior(PointerBehavior.AlwaysOff, Handedness.Right);\r\n\r\n// Turn off the gaze pointer\r\nPointerUtils.SetGazePointerBehavior(PointerBehavior.AlwaysOff);\r\n```\r\n\r\n## Verification\r\n- Works on VR, able to disable hand rays / controller rays separately\r\n- Works on HL1\r\n- Works on HL2\r\n"""
491381020,5918,b'Merge MRTK_Dev latest to Interactable feature branch',"b'## Overview\r\nMerging latest mrtk_development into feature branch:\r\nfeature/interactable-configure-fixes\r\n\r\n## Changes\r\nN/A\r\n\r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
491376561,5917,b'Fix failure to populate default profile when using NuGet packages',"b'## Overview\r\nThe root cause of this issue was relying on specific folder names instead of using the MixedRealityToolkitFiles lookup.\r\n\r\nThe solution was to add a reverse lookup (from folder name to module type) that is called by the extension service attribute to find the correct module. This lookup will return a module type of None if the provided folder name does not begin with ""MixedRealityToolkit"" as the MRTK does not have mappings for third party folders.\r\n\r\n## Verification\r\nIn editor...\r\n- using c# files (the source tree / .unitypackage file)\r\n    - Add new spatial awareness observer\r\n    - Select object mesh observer\r\n    - Note the profile is populated with the configured default\r\n- using NuGet packages\r\n    - Add new spatial awareness observer\r\n    - Select object mesh observer\r\n    - Note the profile is populated with the configured default'"
491371561,5916,b'Add a CODEOWNERS to the MRTK.',"b'CODEOWNERS is a handy way to both:\r\n1. Provide insight into who knows most about an area of the code.\r\n2. Automatically assign PRs to individuals based on previously determined ownership (i.e. the CODEOWNERS file)\r\n\r\nThis reduces the guesswork (i.e. ""who should I include on this review?"") and is especially interesting for external contributors (i.e. those who don\'t have rights to assign reviewers)\r\n\r\nThis change adds the beginnings of a CODEOWNERS file covering the relatively critical Build / CI area. This is an area that must be reviewed by someone who has been working on the Build / CI tooling.'"
491319725,5915,b'Cherry Pick the NuGet Fixes',b'I am bringing the NuGet fixes I made in mrtk_development.'
491288816,5914,b'Standardize OpenVR WMR grip press as DeviceInputType.TriggerPress',"b'## Overview\r\nIt was `TriggerPress` for one hand and `ButtonPress` for the other\r\n#5874 assumes `TriggerPress`, so I standardized on that.\r\n\r\nThis PR also adds code to allow profiles to double check their default interaction mappings to update when axes / buttons / etc change.'"
491256389,5913,b'Fix NuGet Related Bugs',"b'This change fixes the DLL Guid issue for the Plugins being imported, as well as an issue with scripted\r\nimporters.'"
491227457,5910,b'Fix service inspector creation & HandJointServiceInspector',"b'## Overview\r\nThis PR replaces #5906 and #5907, rebased on mrtk_development\r\n\r\n## Changes\r\n- HandJointServiceInspector: create inspector on IMixedRealityHandJointService in stead of MixedRealityHandJointService\r\n- ExtensionInspectorTemplate.txt now references #INTERFACE_NAME# in stead of #SERVICE_NAME# \r\n\r\n'"
491000691,5908,b'Mrtk wireframe shader fix for Android',"b""## Overview\r\nOn Android, opening the shader shows this warning;\r\n`Shader error in 'Mixed Reality Toolkit/Wireframe': variable 'o' used without having been completely initialized at line 121 (on gles3)`\r\n\r\nThe similarity in names of UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO with UNITY_TRANSFER_VERTEX_OUTPUT_STEREO near that error and the corresponding struct definition led me to this page:\r\n\r\nhttps://forum.unity.com/threads/unity-stereo-output-function.470331/\r\n\r\nand I just tried adding UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO before the UNITY_TRANSFER_VERTEX_OUTPUT_STEREO cmd and the error was gone.\r\n\r\nNo idea if that is correct though\r\n\r\nFixes part of: #5844"""
490798570,5907,b'Fix hand joint service inspector',"b""## Overview\r\nHandJointService inspector is never displayed. This is because the inspector for it is created on the concrete class. It's never picked up by the editor \r\n\r\nReleated to #5906 \r\n\r\n## Changes\r\nHandJointServiceInspector: create inspector on **I**MixedRealityHandJointService in stead of MixedRealityHandJointService """
490798240,5906,"b'Inspector should be created on interface, not concrete class'",b'## Overview\r\nInspectors were created on the concrete class in stead of the interface. In stead of creating it on\r\n[MixedRealityServiceInspector(typeof(MyNewService))]\r\nIt should be created on \r\n[MixedRealityServiceInspector(typeof(**I**MyNewService))]\r\n\r\n## Changes\r\n- Fixes: \r\nExtensionInspectorTemplate.txt now references #INTERFACE_NAME# in stead of #SERVICE_NAME#\r\n'
490734210,5905,b'FIX: Input Recording Service',"b""## Overview\r\nInput Recorgin Service doesn't work with Null Reference Exception when push a recording button from a recording window.\r\n\r\n## Changes\r\nThe reason is forgetting check if Action is null before invoking.\r\n\r\n- OnRecordingStarted.Invoke(); ->OnRecordingStarted?.Invoke();\r\n- OnRecordingStopped.Invoke(); ->OnRecordingStopped?.Invoke();\r\n"""
490550486,5903,"b'Fix touch screen input: enable interactable, manipulation and unity ui'","b""## Overview\r\nThis change fixes touch screen input and enables it to work with the manipulation handler, interactable and unity ui.\r\n\r\nThe primary fixes were to:\r\n- Do not perform multiple updates in a single frame\r\n- Delay sending pointer down and hold started events until the first update\r\n- Send input up and input down events as well as pointer up and pointer down\r\n- Send pointer dragged event on move\r\n\r\nMany thanks to @julenka and @keveleigh  for their contributions and help in investigating these changes.\r\n\r\n## Changes\r\n- Fixes: #5390 .\r\n\r\n## Verification\r\nUsing Surface Laptop 2's touch screen:\r\n- Confirmed HandInteractionUnityUIExample scene behaves as expected (buttons press, scroll bars scroll, etc)\r\n- Confirmed that HandInteractionExamples scene components work at parity with other input (ex: articulated hands)\r\n    - Press Interactions change the indicator color\r\n    - Draggable objects drag around the scene\r\n    - Sliders can be moved"""
490539818,5902,b'Add input scene to test new controller input axes',"b""## Overview\r\nAdds display text for all 28 axes and 20 buttons, as well as the ability to see all active inputs.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/64551932-0a17f300-d2eb-11e9-87d6-7a5445eb6c69.png)\r\n\r\nNote: This scene currently only supports Unity's input via `UnityEngine.Input.GetAxis` and `UnityEngine.Input.GetButton`. https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5832 additionally requested:\r\n>Not all input comes from the Unity.Input class, so it should probably be generic enough that you maybe just plug a different script on it and reading comes from whatever new API there is.\r\n\r\n## Changes\r\n- Fixes: #5832 \r\n\r\n## Verification\r\nTest with a device and make sure axes and buttons update in the scene"""
490443129,5898,b'Interactable Refactor Part 3/N ',"b'## Overview\r\n\r\n- Simplified InteractableShaderTheme \r\n- InteractableTextureTheme now supports shader targeting\r\n     - extends InteractableShaderTheme which simplifies class\r\n     - Added migration path code to update TextureTheme-based definitions for default shader properties\r\n- Fix interactableStringTheme ingesting work from PR #5663 \r\n     - Support TextMeshPro & TextMeshProUGUI\r\n     - Get and set never actually worked for type Text\r\n- Removed InteractableTypeFinder and related classes. Only specific to Interactable. Users can now use TypeExtensions and the TypeCacheUtility if desired\r\n- Differentiated States.GetDefaultInteractableStates() from InteractableInspector.GetDefaultInteractableStatesFile()\r\n- Added initial foundation for VisualThemesTests.cs\r\n\r\nFYI breaking changes and migration notes will be added to #5912 for this entire freature branch\r\n\r\n## Changes\r\n- Fixes: #5663 \r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
490367213,5897,b'Fix Appx building from Unity player completion dialog not using correct settings.',"b'## Overview\r\n\r\nThe `Build Appx` button in the Unity build completion dialog did not trigger the same build as the `Build Appx` button in the Appx build window tab. Specifically most build preferences were not taken into account. \r\n\r\nI compared both `UwpBuildInfo` from `BuildPlayer` and `BuildAppx` and added the missing settings to the former one. Though I am not sure if there are still hidden preferences that must be matched as well. \r\n\r\n## Verification\r\n\r\nStart a Unity player build, then in the completion dialog use the `Build Appx` button to build the Appx right away. The Appx should be build using the correct settings from the Appx build tab.'"
490327511,5896,b'Ux/sluggish ggv yaxis',"b""## Overview\r\nAs part of [this PR](https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5645), I changed how GGV rotation worked. As part of my change, I zeroed the y value of the look rotation vector. Before I did this, moving your hand up and down would impart pitch rotation on manipulated objects in much the same way that moving you hand left and right would impart yaw rotation. I wasn't sure at the time if this was something we wanted. \r\n\r\nThese changes remove this line where the y value is zeroed. As a result, vertical manipulation no longer feels sluggish in GGV, but you will also impart some pitch rotations on the manipulated object. It is possible to counteract this by setting a y-axis only rotation constraint on manipulation handler.\r\n\r\n### Before\r\n![zeroY](https://user-images.githubusercontent.com/47415945/64431237-f46bb900-d0b1-11e9-9e97-c39c349dfe7e.gif)\r\n\r\n### After\r\n![noZeroY](https://user-images.githubusercontent.com/47415945/64431258-ffbee480-d0b1-11e9-806f-2e240d084666.gif)\r\n\r\n## Changes\r\n- Fixes: #5775.\r\n"""
490083310,5894,b'Cosmetic change to MixedRealityPreferences.cs',"b'## Overview\r\nSmall cosmetic changes to the Project Settings menu item. The full name felt a little long for the default size of the panel, and capitalization of the menu item was inconsistent:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/64394363-b5cef380-d00a-11e9-95e6-17cf3bd5154b.png)\r\nto\r\n![image](https://user-images.githubusercontent.com/3580640/64394342-9afc7f00-d00a-11e9-8e5a-ed841e985184.png)\r\n'"
490080545,5893,b'Fill in empty returns',b'## Overview\r\nFills in some empty returns that were caught by #5864. Also standardized some capitalization and punctuation while I was editing this script anyway.\r\n\r\n## Changes\r\n- Fixes: https://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=4984'
490050707,5892,"b""Updating the MRTK/Standard shader render modes to match Unity's new terminology.""","b""## Overview\r\n\r\nOne of our partners encountered confusion over the the rendering modes found on the MRTK/Standard shader. Since adding the rendering mode's to match Unity's terminology Unity has changed their terminology. So, this change simply brings us back to naming convention parity (this is not a breaking change, just a user facing naming swap).\r\n\r\nI've also improved our documentation around rendering modes and tweaked the specular reflection formula to match the Unity/Standard shader.\r\n\r\n![MRTK_RenderingModes](https://user-images.githubusercontent.com/13305729/64389034-e2c4db80-cff5-11e9-9f23-7410bbdab6bd.jpg)\r\n\r\n## Verification\r\nTry creating new materials and seeing if the selected rendering mode matches your expectations.\r\n\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
490013238,5891,b'Add Research Mode and Unsafe Code to Unity Build options',"b""## Overview\r\nContinuation from #5879\r\n\r\n## Changes\r\nAs stated in the issue, this PR adds two checkboxes to the build windows which make it possible to enable Research Mode and/or Unsafe Code for builds that target UWP/WSA and HoloLens 1 as device. If other platforms or devices are targeted the checkboxes won't be visible.\r\n\r\n## Questions\r\n1. The current changes only enable this options for builds from Unity Editor. Should i also add these two as command line arguments?\r\n2. Does this need some kind of UnitTests?\r\n\r\n\r\n"""
489991829,5890,b'Expose cursor speed and scroll wheel speed to mouse profile. Fix y axis inversion.',"b'```\r\nNOTE: This is a breaking change that will impact any custom mouse data provider implementations. It was deemed a safe change to make at this time as most known client applications utilize motion controllers and hands, rather than mouse devices. Application code is not impacted unless it references the mouse profile from the IMixedRealityMouseDeviceManager interface.\r\n```\r\n\r\nThis change updates the mouse device profile to expose the CursorSpeed property (formerly MouseSpeed) and adds a WheelSpeed property to allow for easy configuration at runtime.\r\n\r\nTo preserve existing profile compatibility, the CursorSpeed property is marked as having been formally serialized as mouseSpeed. The WheelSpeed uses a default value if not present in a profile.\r\n\r\nThe default value for the cursor speed has been increased from 0.25 to 1.0 as it was feeling very sluggish (lagged behind expected motion - as reported in #5566 and as seen in personal experience).\r\n\r\nThis change also modified the cursor rotation space from World to Self as it was causing the inversion of the mouse behavior (as reported in #5793).\r\n\r\nThere was also some related base class and inspector cleanup.\r\n\r\nFixes #5793, #5838.\r\n\r\nVerified by enabling the mouse device in the input system and\r\n- Visually verifying the default cursor speed behavior change\r\n- Verifying scroll scaling in via debug.log messages (the current mouse cursor does not respond to scroll wheel behavior)\r\n- Moving the mouse with the camera rotated at 0,0,0 and 0, 180, 0 to confirm the mouse moves as expected.'"
489928932,5889,b'Interactable Refactor Part 2/N',"b""## Overview\r\nContinuation from #5857 \r\n\r\n**Note:** This is merging into a feature branch, not MRTK_Dev\r\n\r\n- Moved Theme-related files from Interactable to new VisualThemes feature folder\r\n- Elimnated dependency on InteractableTypeFinder, in favor of TypeExtensions\r\n- Update properties and helper methods of InteractableEvent\r\n- Extrapolated inspector code for InteractableEvent to it's own utility class, simplified change/remove structure too\r\n- Fixed InteractableThemeInspector to update if fields change in the targeted class\r\n- Delete InteractableTypeFinder because utilization was phased out in favor of simpler approaches (created new TypeCacheUtility instead)\r\n- Cleaned up States scriptableobject class and StateInspector to simplified and more robust model\r\n\r\n## Changes\r\n- Fixes: #5652 \r\n\r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
489829566,5886,b'Fix possible division by zero in TwoHandMoveLogic',"b'## Overview\r\nFor positionless controllers like xbox controller, the pointer position and the head position were coincident at the head position. This change ensures that if this is the case, we do not perform a division by zero in `TwoHandMoveLogic`, as this was causing objects to disappear into infinity.\r\n\r\n## Changes\r\n- Fixes: #5829.\r\n'"
489673165,5885,b'Mrtk wireframe and standard shader fix',"b'## Overview\r\nBoth shaders had errors, at least on Android.\r\nTurned out both were missing one line of code mandatory for proper SinglePassInstancing usage:\r\n\r\nhttps://docs.unity3d.com/Manual/SinglePassInstancing.html\r\n\r\n```\r\nv2f vert (appdata v)\r\n{\r\n    v2f o;\r\n\r\n    UNITY_SETUP_INSTANCE_ID(v); //Insert\r\n    UNITY_INITIALIZE_OUTPUT(v2f, o); //Insert\r\n    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o); //Insert\r\n\r\n    o.vertex = UnityObjectToClipPos(v.vertex);\r\n\r\n    o.uv = v.uv;\r\n\r\n    return o;\r\n}\r\n```\r\n\r\n## Changes\r\n- Fixes: #5844\r\n'"
489542766,5884,b'Fix ray sticking to slate when panning HandInteractionPanZoom or UnityUI',"b'## Overview\r\nThe hand ray cursor should not get stuck on flat UI like UnityUI and the slate (backed by `HandIteractionPanZoom`). This change updates fixes this by setting `IsTargetPositionLockedOnFocusLocked = false` when using hand rays or motion controllers. Old value gets restored on pointer up.\r\n\r\nAlso added tests to prevent regression, and some utilities for accessing common pointer info.\r\n\r\n### Old Behavior\r\n![PanStic](https://user-images.githubusercontent.com/168492/60872020-e5fa5000-a26e-11e9-9fa9-006e925e82a1.gif)\r\n\r\n### New Behavior\r\n![PanStic_actual](https://user-images.githubusercontent.com/168492/60872008-e397f600-a26e-11e9-9735-a2836439f080.gif)\r\n\r\n\r\n## Changes\r\n- Fixes: #5236\r\n- Add test to verify fix does not regress\r\n- Add a few pointer utility functions (related to #5280)\r\n\r\n## Verification\r\n- Tested in editor, articulated hands\r\n- Need to test that HoloLens1 behavior remains as before\r\n'"
489406466,5882,b'UGUI Scale Support for the MRTK/Standard Shader',"b""## Overview\r\nOn Unity UI components the unity_ObjectToWorld matrix is not the transformation matrix of the local transform the Graphic component lives on, but that of it's parent Canvas. Many MRTK/Standard shader effects require object scale to be known. To solve this issue the ScaleMeshEffect has been created to pass scale information to the shader while preserving batching.\r\n\r\nThis PR also introduces a StandardShaderUtility class which will be fleshed out over time to include more utilities for common operations.\r\n\r\nExample of the UI that instructs a user on how to fix the issue (note the same material is being used on the default Unity Quad and UGUI Image):\r\n\r\n![Fix](https://user-images.githubusercontent.com/13305729/64292351-17b22f00-cf1f-11e9-9613-ff0c25f76f28.gif)\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/13305729/64280105-44f1e380-cf05-11e9-9e9c-cb0fdbe86c31.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/13305729/64280129-576c1d00-cf05-11e9-9c8b-174da98f086b.png)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5878\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
489402064,5881,b'BuildNumber to be SemVer 1.0.0 Compatible',b''
489400933,5880,b'Update ci-release.yml for Azure Pipelines',b''
489281236,5877,b'Update the build tooling to correctly set the Minimum Platform Version and Target SDK Version separately and correctly.',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5818\r\n\r\nIt looks like our build tooling has been setting the ""Minimum Platform Version"" to 18362, something that we actually recommend people don\'t do when building apps (regardless of their target device). We recommend people set the version to 10240 (per the getting started page/build page). Nevertheless, we still get occasional bug reports about why the app isn\'t deployable to hololens 1.\r\n\r\nIt turns out our tooling was doing the wrong thing. This makes it update the right things (i.e. the Target SDK version) while providing a good default (and warning if deviation of the default occurs) for the Minimum Platform Version.'"
489271339,5876,b'Update for running Android and iOS using AR Foundation.',"b'## Overview\r\n  I\'m tring to develop Android and iPhone applications using MRTK V2.0.0,\r\n  Using ARFoundation and MixedRealityInputSystem, I\'ve been able to run the demo ""Hand Interaction Exmples"" on Android and iPhone.\r\n  \r\n \r\n## Changes\r\n- #5875 .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
489263671,5874,b'Fix to update Oculus mapping and resolve Axis button resolution',"b'## Overview\r\nFix to update Oculus mapping and resolve Axis button resolution\r\n\r\n* Mappings updated, including default asset (example controller assets unaffected)\r\n* GenericJoystickController updated to move Axis button validation to the Digital Button check, removed from Axis check\r\n\r\n## Changes\r\n- Fixes: #5869 & #5871\r\n'"
489120341,5872,b'Digital axis for joysticks',"b'## Overview\r\nThe current implementation for the default select InputAction forces Unity InputSystem bases controllers to use digital input like buttons.\r\nNow with the Oculus Quest, there is no such input for the front trigger other than the KeyCode mouse0, which fires for both controllers.\r\nTo distinguish between them we need to read an axis as a button.\r\n\r\nThis PR makes it possible to provice an axis when using Keycode.None for a digital input to read an axis.\r\n\r\n## Changes\r\n- Fixes: #5869'"
489017089,5870,b'removed version 2.0.1 from dropdown ',b'fixes broken link in version dropdown \r\n\r\nreadd this entry once the 2.0.1 docs are live '
488884385,5868,b'[Shell-Parity] Speech command confirmation label',"b'## Overview\r\nAdding speech confirmation label UX. \r\n- Created **SpeechConfirmationTooltip.prefab**. This uses **LabelOnlyTooltip.prefab** which is a prefab variant of the **Simple Line ToolTip.prefab**\r\n- On animation trigger, the label is displayed for 1.5 sec with alpha transition and vertical movement.\r\n- It contains RadialView solver for positioning behavior.\r\n- Updated **SpeechInputHandler** to include optional SpeechConfirmationTooltip prefab field. If the prefab is assigned, on keyword recognition, recognized keyword text is assigned to the tooltip label text and trigger animation.\r\n<img width=""450"" alt=""2019-09-03 16_55_32-Unity 2018 4 7f1 Personal - Speech unity - MRTK-GA - Universal Windows Platform "" src=""https://user-images.githubusercontent.com/13754172/64217295-aec0ad80-ce71-11e9-88a3-a3102e3ab19c.png"">\r\n\r\n- [Updated Speech README file.](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_SpeechConfLabel/Documentation/Input/Speech.md)\r\n- Renamed the scene **Speech.unity** to **SpeechInputExamples.unity** for consistency and clarity.\r\n- Updated example scene content.\r\n\r\n### Mixed Reality Capture\r\n![MRTK_SpeechConfLabel](https://user-images.githubusercontent.com/13754172/64217164-2d691b00-ce71-11e9-8e54-954cb8e515e4.gif)\r\n\r\n### SpeechConfirmationTooltip.prefab\r\n![MRTK_SpeechConfLabel2](https://user-images.githubusercontent.com/13754172/64217675-2cd18400-ce73-11e9-9d7e-e43af68aac4b.gif)\r\n\r\n<img width=""914"" alt=""2019-09-03 16_44_36-Unity 2018 4 7f1 Personal - Speech unity - MRTK-GA - Universal Windows Platform "" src=""https://user-images.githubusercontent.com/13754172/64217180-38bc4680-ce71-11e9-8733-fbe7516b74a4.png"">\r\n\r\nThe animation is triggered by the key **\'Confirmed\'**\r\n<img width=""934"" alt=""2019-09-03 17_57_00-Unity 2018 4 7f1 Personal - SpeechInputExamples unity - MRTK-GA - Universal Wind"" src=""https://user-images.githubusercontent.com/13754172/64217935-48895a00-ce74-11e9-9d86-47cdd823c5c7.png"">\r\n\r\n\r\n### Updated SpeechInputExamples Scene\r\n<img width=""1220"" alt=""2019-09-03 17_14_33-Unity 2018 4 7f1 Personal - SpeechInputExamples unity - MRTK-GA - Universal Wind"" src=""https://user-images.githubusercontent.com/13754172/64217170-33f79280-ce71-11e9-8297-52f1f518effb.png"">\r\n\r\n\r\n\r\n\r\n## Changes\r\n- Fixes: #4327 and #4200 (Post GA items)\r\n\r\n'"
488877424,5867,b'Update the docs to address a term inconsistency in the MixedRealityConfigurationGuide',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5842\r\n\r\nThe usage of the word ""pane"" was confusing as highlighted in the issue - pane is technically correct here as well (it is, well, a pane) but looking through the rest of our docs, there isn\'t any other usage of the term pane so it is inconsistent. Switched to panel to be consistent with the rest of our docs.'"
488836454,5865,b'Cherry-Pick Build fix into 2.0.1 Release',b'This brings over the build fix into the 2.0.1 release.'
488833078,5864,"b""Add a code checker to validate that we don't have empty doccomments.""","b""These doccomments get added automatically by IDEs and end up being checked in empty - they tend to increase line count/verbiage without adding value, because they get checked in empty. The generated docs aren't any different because they're there, so it's better to either add some comment there or delete the lines entirely."""
488750918,5857,b'Decouple InteractableThemes Part 1/N',"b""## Overview\r\nThis change is the first major step in refactoring Interactable Themes to fix a multitude of issues including the following:\r\n- Decouple Themes from Interactable so they are separate features (i.e Themes should be self-managed)\r\n- Decouple inspector hard-coded management from theme/interactable execution and management\r\n- Simplify code complexity to improve robustness and maintainability\r\n- Other Bug Fix\r\n=> Shader types and properties can now be deterministically defined\r\n=> Changing states on a theme will populate ThemeProperties with correct number of default values\r\n=> Theme scriptableobject assets weren't actually saved correctly because the code would fill in the holes but not update the scriptableobject\r\n\r\nThere are still some loose ends in this feature as well as bugs filed on github to be addressed, hence part 1/N. Furthermore, tests and documentation need to be updated at a future part. Majority of changes here are automatic updates in the theme asset files\r\n\r\nThere are also some material asset changes due to some MRTK property changes in a different PR\r\n\r\nBreaking Changes:\r\n\r\nGreat care was taken to ensure MRTK consumers would not break with absorption of this new theme model. The vast, vast majority of changes were applied to internal classes and constructs used by the system that should largely be unknown to the community(i.e see #1). Individuals who have created their own theme engines (i.e extending InteractableThemeBase) will have to register one new function.\r\nFinally, there is an important property for shaders that must be migrated. I added code as a temp workaround to handle this at the inspector and run-time levels. However, users should use the editor migrate button to auto-handle all Assets (MRTK > Migration > Update Themes)\r\n\r\n1) Rename of classes below\r\n=> Anyone using these classes directly will be broken. These classes though are 90% internal framework constructs and thus impact on community will be minimal. Furthermore, functionality is not dramatically changed and few consumers will largely just need to fix by copy/pasting new names\r\n\r\n2) Inherited classes of InteractableThemeBase now requires GetDefaultThemeDefinition() method which must be properly filled out by custom implementation.\r\n-> Furthermore, new properties AreShadersSupported (false default) and IsEasingSupported (true default) need to be overridden by custom implementations if they want different default behavior\r\n\r\n3) Simplified shader properties in Theme Property (i.e ThemeStateProperty)\r\n=> Old variables are no serialized protected to disuade consumers from leveraging them but not break existing customers during migration.\r\n=> Migration is auto-handled in the inspector for users. At runtime, values will temporarily be copied over correctly\r\n=> Users should utilize the menu item MRTK > Migration > Update Themes to correctly update all scriptableobjects in their Assets\r\n\r\nThe Details:\r\n\r\nTheme renamed to ThemeContainer\r\n-> Removed Name property, redundant with scriptableobject.name\r\n-> Removed CustomSettings property\r\n-> Added dictionary History \r\n-> Renamed Settings to Definitions\r\n\r\nInteractableThemePropertySettings renamed to ThemeDefinition\r\n-> Removed History parameters\r\n-> Removed NoEasing (migrated to actual Theme class)\r\n-> Removed ThemeBase instance\r\n-> Removed IsValid field (not used)\r\n-> Added static GetDefaultThemeDefinition\r\n\r\nInteractableThemeProperty renamed to ThemeStateProperty\r\n-> Added TargetShader and ShaderPropertyName fields\r\n-> Made old Type and Shader properties private to maintain compatibility but allow fade them out of the interface\r\n\r\nInteractableCustomSetting renamed to ThemeProperty\r\nInteractableThemePropertyValue renamed to ThemePropertyValue\r\nInteractableThemePropertyTypes renamed to ThemePropertyType\r\n\r\nInteractableThemeBase\r\n-> Added IsEasingSupported\r\n-> Added AreShadersSupported\r\n-> Added GetDefaultThemeDefinition()\r\n\r\nInteractableProfileItem\r\n-> Removed HadDefaultTheme (inspector variable)\r\n-> Removed create Theme instances logic\r\n\r\nInteractable\r\n-> Renamed ForceRefreshThemes to RefreshSetup\r\n-> Cleaned up unnecessary ProfileSettings/ThemeSettings classes\r\n-> Simplified running themes list and creation\r\n\r\nInteractableInspector\r\n-> Simplified code for just rendering the ThemeInspector editor window\r\n-> Simplified error reporting and removed DefaultTheme code\r\n-> Added button to create new theme scriptableobject asset\r\n-> Migrated creation/deletion of themes to the ThemeInspector\r\n\r\nThemeInspector\r\n-> Simpflied history access, creation, deletion of theme management\r\n-> Removed odd shader checking enforcement and setting configuration\r\n\r\nRemoved ThemeSettings and Profile Settings (only internally used by InteractableClass)\r\n\r\nInteractablesExamples\r\n-> Added TextureTheme sample and related scriptableobject theme\r\n\r\nAdded TypeExtensions class to simplify and filter out use of InteractableTypesContainer\r\n\r\n## Changes\r\n- Fixes: #5050 , #5058 \r\n\r\n## Verification\r\nVerified InteractableExamples scene\r\nVerified Hand Interaction Example Scene\r\nAll tests passed\r\nRun example scene on HL2 (TODO)\r\nCreate custom theme asset and upgrade\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
488688131,5855,b'CI Build Fix',"b'This change is to fix the CI Build which is failing because the System.Core.dll is being overwritten by MSBuild. The reason for why this started happening recently, is unclear, however, the fix is to set AddAdditionalExplicitAssemblyReferences to false.\r\n\r\nWill test a CI build on this change before commiting.'"
488658227,5854,b'Add Interactable event listeners via script',"b'## Overview\r\nMost UI frameworks allow for event listeners to be added not only from a GUI editor, but also from code. MRTK currently makes it easy for event listeners on Interactable (except OnClick) to be configured in the editor, but configuring at run-time from script is not possible.\r\n\r\nThis PR does the following:\r\n1. Fixes bugs preventing adding events at run-time\r\n1. Adds utility scripts to Interactable  to simplify adding Interactable event listeners \r\n1. Adds tests to verify all event listeners available in interactable by default\r\n1. Adds examples to documentation\r\n\r\n### Demo: Old vs. new way to add event listeners\r\nHere\'s the old way to listen to focus enter/exit events:\r\n\r\n```csharp\r\npublic static void AddFocusEvents(Interactable interactable)\r\n{\r\n    var ie = new InteractableEvent();\r\n    var fr = new InteractableOnFocusReceiver(ie.Event);\r\n    ie.Receiver = fr;\r\n    interactable.Events.Add(ie);\r\n    ie.Event.AddListener(() => Debug.Log(""Focus on""));\r\n    ie.OnFocusOff.AddListener(() => Debug.Log(""Focus off""));\r\n}\r\n```\r\n\r\nAnd the new way to add focus enter/exit events:\r\n\r\n```csharp\r\npublic static void AddFocusEvents(Interactable interactable)\r\n{\r\n    var onFocusReceiver = interactable.AddReceiver<InteractableOnFocusReceiver>();\r\n    onFocusReceiver.OnFocusOn.AddListener(() => Debug.Log(""Focus on""));\r\n    onFocusReceiver.OnFocusOff.AddListener(() => Debug.Log(""Focus off""));\r\n}\r\n```\r\n\r\n- Fixes: #5013\r\n\r\n## Verification\r\nVerify that new tests pass, and that they did not pass before.'"
488563200,5853,b'Unified input methods and new features for input simulation',"b'## Overview\r\n\r\nInput simulation camera control and hand control originated from two separate features and have inconsistent support for rotation as well as slightly different approaches to key binding.\r\n\r\nThis PR aims to unify the support for keyboard/mouse/game controller input and complement existing features.\r\n\r\n## Changes\r\n- Fixes: #5489 \r\n- New  editor tools window to expose input simulation state of head and hands at runtime. This also provides useful features such as ""Reset"" buttons to bring head/hands back to default state. This window also incorporates the previous ""Input Recording"" window.\r\n- Optional viewport icons for controlling hands, similar to icons in HTK.\r\n- Introduces a generic `KeyBinding` struct that encodes both KeyCode and mouse button. This comes with editor support for quickly assigning buttons with a key press. (_Note: Unity editor does not support shift key presses on their own, so these have to be assigned using the legacy enum popup).\r\n- Unifies handling of mouse rotations for camera and hands, including cursor locking and visibility. The previous 6 keys for rotating hands have been removed in favor of intuitive mouse rotation and/or changing angles in the editor window.\r\n- Support for roll angle of head and hands, using the scroll wheel during rotation (pitch and yaw are controlled by mouse x/y movement as before).\r\n- New input axis ""UpDown"" to control camera movement along the Up vector. Defaults to Q/E keys and the 3rd game controller axis (triggers)\r\n\r\n**Breaking Changes:** InputSimulationProfile has changed, with some existing KeyCode fields replaced by the new KeyBinding struct (this might reset user profiles to default settings). Some fields have been renamed, but should be handled by FormerlySerializedAs attributes.\r\n\r\n## Verification\r\n- Read through input simulation and input animation recording documentation and check for correctness and clarity.\r\n- Run the hand tracking test scene in the editor and try out input simulation features:\r\n  * Camera movement using WASD and game controller\r\n  * Camera rotation by holding RMB\r\n  * Hand movement using LShift/Space + mouse movement\r\n  * Hand rotation using LShift/Space + RMB + mouse movement (it becomes less complicated when toggling hands on using T/Y first)\r\n  * Try camera/hand roll by using the mouse wheel while rotating\r\n  * Move camera up/down using Q/E keys or game controller triggers\r\n- Open the Input Simulation window and try buttons\r\n- Also try assigning new key bindings using the little buttons on the right.\r\n- Try toggling hands via the icons in the viewport in play mode.'"
488121497,5849,b'Use correct center point for computing touchable normal inside a coll\xe2\x80\xa6',b'## Overview\r\n\r\nFix incorrect normal calculation for NearInteractionTouchableVolume in the case of casting from within a collider.\r\n\r\n## Changes\r\n- Fixes: #5836\r\n'
487749244,5841,b'Fixes for the NuGet Packages',"b""## Overview\r\nThe last change to the NuGet packages had a few errors in it and was causing only the main Foundation package to be generated correctly. This change fixes those issues and also adds logic for acquiring NuGet.exe if the machine does not have it installed globally.\r\n\r\n## Changes\r\n- I missed checking in a csproj that's used for NuGet restores (it was being gitignored).\r\n- The source paths in nuspecs were not taking into account the depth of the nuspec files\r\n- The script now acquires NuGet if you didn't already have it. In order to support that I did remove the functionality of packing all NuGets in parallel. The Start-Job command causes the inner command to lose the environment variables and context. In this case it means the background jobs couldn't find the local downloaded NuGet.exe. The overall NuGet pack time with this change is still under 45sec."""
487656446,5840,b'Documentation for How to Add Near Interaction to a scene',"b'## Overview\r\nAdd instructions for how to add near interaction (grab, touch) to a scene, as well as how to add near interaction for UnityUI. Also fix a misnamed file.\r\n\r\n- Fixes: #5712\r\n- Fixes: #4949\r\n\r\n## Changes\r\n- Add page ""How to add near interaction"" to our docs, and link in the toc.\r\n- Rename improperly named file IMixedRealityHandTrackHandler.\r\n- Fix other small docfx warnings'"
487601113,5837,b'Fix for spatial awareness allowing only mesh observers to be registered (#5835)',"b'## Overview\r\nThe spatial awareness system was incorrectly configured to only allow registration of mesh observers. This blocks support for non-mesh observers (ex: future platform growth).\r\n\r\nThe fix was to filter based on IMixedRealitySpatialAwarenessObserver instead of the more restrictive IMixedRealitySpatialAwarenessMeshObserver.\r\n\r\nThis change also pointed out that BaseSpatialObserver was mistakenly NOT marked as abstract. It does not provide any observation functionality and is suitable only as a base class (the original intent).\r\n\r\nAs a part of this change, the class doc comments for BaseInputDeviceManager and BaseSpatialObserver were improved or added.\r\n\r\n## Changes\r\n- Fixes: #5835.\r\n\r\n## Verification\r\n- Confirmed non-mesh observer is discovered and can be added.\r\n- Confirmed that the base class does not appear in available observers'"
487568630,5834,b'Remove Test package from release artifacts',b'Delete the Test package from artifacts published by the release build as we do not intend to publish them at release time.'
487535877,5831,b'missing meta file',b'just a missing meta file from the Experimental folder missing'
487531325,5830,b'Both hand controller model support',b'- Fixes: #5828'
487336344,5827,b'Embed source code in NuGet packages',"b""## Overview\r\nThis change updates the MRTK NuGet packages to include source files as well. Doing so servers two main purposes. One, when consuming the package in a Visual Studio project you can review the scripts that the DLL's were built against. Two, you can remap the paths in the PDB to point at the source location in the NuGet package so that you can debug the package as if it were built on your own machine.\r\n\r\n## Changes\r\n- The NuSpec files now grab the matching source code and put it into the contentFiles/any/any/.PkgSrc location in the NuGet package. \r\n![PkgSrcBrowsing](https://user-images.githubusercontent.com/40213616/64002229-6c3c5100-cabe-11e9-914c-6b51888b0f58.gif)\r\n\r\n  - The source items are given the BuildAction of None so that they do not participate in the consuming projects build.\r\n  - [See here](https://docs.microsoft.com/en-us/nuget/reference/nuspec#including-content-files) for more info about the nuspec ContentFiles section.\r\n- @andreiborodin helped me fix some issues with the .sln generation code.\r\n- The CreateNuGetPackages.ps1 script will now locally deploy a package with version number 0.0.0 after creating a package.\r\n  - This is a very handy way to be able to debug the NuGet packages locally. After using the script a consuming project can consume the same packageId but version 0.0.0 to get their local changes."""
487207898,5826,"b""Removing the 'prerelease' from the NuGet versioning.""","b'For this release I am removing the ""prerelease"" text string from NuGet package version as that currently isn\'t supported by NuGetForUnity. This is not necessary for this release.'"
487148389,5823,b'Turn off hand rays only when hand is near a grabbable object',"b""## Overview\r\nIf the hand is near the spatial mesh (SR), hand rays should not turn off. In fact, rays should only turn off if the hand is near a grabbable or touchable thing. This PR updates SpherePointer to return `IsNearObject` and `IsInteractionEnabled` only when the hand is near a collider that has a NearInteractionGrabbable on it. It also adds Grab Layer Masks, which allows developers to further prioritize and filter which objects a pointer can interact with. \r\n\r\nAfter this change, an object must both be on a Grabbable Layer as well as have a NearInteractionGrabbable component in order for hand rays to turn off. The Grabbable Layer is by default set to everything **except** Ignore Raycast and Spatial Awareness.\r\n\r\nFixes: #5748, #4203, #5621 \r\n\r\n## Changes\r\n- Add a Grabbable Layer Mask to Sphere Pointer to allow devs to easily disable all grabbable objects, and to improve performance\r\n- The default Grabbale Layer Mask for the grab pointer is everything but Ignore Raycast and Spatial Awareness so that sphere casts don't check the spatial mesh (for perf).\r\n- I also am caching the sphere query results to ensure we only do 3 sphere casts per frame (down from 11 without caching).\r\n-  I snuck in a fix to pointer locking -- previously a pointer would lock when you clicked on any collidable, even if the collidable did not actually have any pointer handlers on it, or above it. now, the pointer will only lock if the pointer is actually grabbing an object that would handle pointer events. I may actually end up pulling that change into a separate PR.\r\n- Add tests to verify my fix, and documentation reflecting the new grabbable behavior\r\n- I also fixed the sphere pointer inspector -- it was actually not displaying several sphere pointer fields that it should have\r\n- I removed the DebugSphere because it was not very useful, added a bit of extra code, and had bugs (did not turn off when debugsphere == false).\r\n\r\n## Verification\r\n- All playmode tests pass, new tests pass\r\n- Verified that my new tests would have failed in old code\r\n- Verified that my change actually fixes the bug (ray no longer hides when near SR)\r\n- Runs on HoloLens 2 with no adverse perf impact."""
487038949,5822,b'Remove the SimulatedHandData timestamps since they prevent changes in\xe2\x80\xa6',"b'## Overview\r\n\r\nRemove the timestamps from SimulatedHandData because they are breaking tests.\r\n\r\nThese timestamps are supposed to prevent frequent changes, but they do this in tests as well, where multiple changes per frame are possible. Due to the timestamps being based on UtcNow (which is also quite inaccurate) they can prevent updates randomly.\r\n\r\n## Changes\r\n- Fixes: Test failures observed in #5264\r\n'"
486845561,5819,b'Fix Platform Toolset selection not applied for msbuild',"b""## Overview\r\n\r\nThis is a follow up fix for #5360. The `PlatformToolset` property of the `UwpBuildInfo` wasn't set when starting an appx build. Leaving it to the default empty string value, `/p:PlatformToolset` was ommited during msbuild invokation.\r\n\r\nIn addition, this PR also contains an fix for the copy-pasted `PlatformToolset` preferences API in-code documentation.\r\n\r\n## Changes\r\n- Follow up fix for #5360"""
486663359,5816,b'Cherry pick PR #5813 to mrtk_release',b'Cherry pick this into the mrtk_release branch so that people who are looking at the default code branch will have the right instructions\r\n'
486661739,5815,b'Cherry pick PR #5813 into the 2.0.1 stabilization branch',"b'The upgrade instructions need to be correct in the release branches, so cherry picking to the various current branches.'"
486649291,5814,b'Cherry pick PR #5813 to releases/2.0.0',"b'Cherry pick this into the release/2.0.0 branch, because docs are generated out of this and the upgrade instructions should be correct.'"
486643181,5813,b'Update the migration/upgrade notes with correct instructions on how to upgrade between MRTK versions.',"b""#5770\r\n\r\nThe existing instructions weren't quite complete, because when you approached step #6 (re-adding MRTK objects to the scene) there is a strong likelihood that the profiles (and other assets outside of the MRTK) haven't been refreshed in the asset database. As a result, doing things like adding the MRTK to the scene and picking a profile wouldn't pick up existing profiles (because the asset database wouldn't have the correct information.)\r\n\r\nThis requires forcing Unity to regenerate its asset database - the easiest way to do this is just to close it and delete the Library/ folder (which causes an asset database refresh)\r\n\r\nSee https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5770#issuecomment-525947248 for alternatives considered"""
486632451,5812,b'Remove line renderer from the touch pointer',"b""Per customer feedback in #5420, there is minimal value for having the touch pointer render the pointing ray, it will always be under the user's fingertip.\r\n\r\nThis change removes line rendering related scripts from the touch pointer prefab and brings it in line with similar pointers (ex: mouse,)\r\n\r\nFixes: #5810 \r\n\r\nVerfication:\r\n* Load spatial awareness demo scene in the editor \r\n* Confirm touching the sphere hides/shows the mesh\r\n* Confirm no change in the debug pointer line representations in the scene window"""
486618462,5811,"b'Add documentation for systems, extensions and data providers'","b'## Overview\r\nThis change adds documentation describing\r\n\r\n- The differences between systems, extensions services and data providers.\r\n- How to create an input device manager\r\n- How to create a spatial awareness observer\r\n'"
486526789,5808,b'Cleaned up NuGet Package Duplicates',"b'Removed copies of License/Version from folders packages together, and also updates the nuspec to exclude the yoc and the StandardAssets.meta.'"
486313252,5805,b'Renaming deselection fix',"b'This fixes an issue where setting the names of GameObjects triggers EditorApplication.hierarchyChanged, which effectively exits edit mode for the rename. This led to recursively renaming affected gameobjects during the whole time the editor ran.\r\n\r\n## Changes\r\n- Fixes: #5062\r\n'"
486097231,5804,b'Update the .gitignore to ignore the obj.meta file generated due to Unity/docfx interactions',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4237\r\n\r\nRunning docfx locally will generate an obj/xdoc folder in the same location as the first alphabetically occuring .cs file. This is how docfx's cache system works:\r\n\r\nhttps://github.com/dotnet/docfx/blob/master/Documentation/spec/docfx_incremental.md\r\n\r\nUnfortunately there isn't currently a way to pipe this cache to another location (I've tried the application level cache, without much success), so I've added this .gitignore rule.\r\n\r\nThere are no existing examples of Obj.meta/obj.meta, so this is safe for the time being. I've added a comment as well to the gitignore to highlight why it's there and when/how it can be removed."""
486083064,5802,b'Update the docs to provide guidance on how to increase the maximum pointer extent',b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5269'
486077825,5801,b'Remove a stray duplicate sentence from the configuration guide',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5790\r\n\r\nThere's a duplicated sentence where one shouldn't be! Oh my"""
486068164,5800,b'HTKToMRTKPortingGuide\xe3\x81\xae\xe7\xbf\xbb\xe8\xa8\xb3\xe8\xbf\xbd\xe5\x8a\xa0',"b'## Overview\r\nMixedRealityToolkit-Unity\\Documentation.ja\\HTKToMRTKPortingGuide.md\xe3\x82\x92\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e\xe5\x8c\x96\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
486043601,5799,b'Provide a way to override the gaze cursor visibility',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5395\r\n\r\nThis updates IMixedRealityGazeProvider to provide an override for the gaze cursor visibility.\r\n\r\nNote that this doesn\'t fix the issue by making GazeCursor.SetVisibility ""just work"", because the thing that controls the gaze cursor visibility is a state machine controlled by higher level concepts than the cursor itself. I thought about adding some sort of mediation/more complicated set of flags (i.e. IMixedRealityCursor.SetVisibilityOverride) but found that doing such a thing would end up making things more complicated on that level (i.e. it introduces complexity in an area that SHOULD be simple, rather than building complexity at the more appropriate layers)\r\n\r\nThis change adds tests to show that it works, and then also adds docs to explain how to use this.'"
486024224,5798,b'Fix touch screen controller - part 1',"b""The touch screen controller was previously generating pointing rays in unexpected places (#5420), orphaning some of the rays and not actually generating pointer click events.\r\n\r\nTo address these, the following changes were made:\r\n\r\n* Remove ContactEpsilon as it was overlong (30 sec) since touch screen drivers implement appropriate filtering.\r\n    * The long length of ConactEpsilon was preventing click events from firing (the check was if < 30 sec, else if < .5 sec)\r\n* When setting pose position and rotaion, use the pointer's values and not the base cursor's as thus was causing the pointing rays to be incorrectly positioned.\r\n* Update pointer management as pointers to address rogue rays.\r\n\r\nIncorrect behavior:\r\n![image](https://user-images.githubusercontent.com/13281406/63879678-0e561f00-c981-11e9-935c-23b89e7cd1e3.png)\r\n\r\nCorrected behavior:\r\n![5420fix](https://user-images.githubusercontent.com/13281406/63882248-7bb87e80-c986-11e9-84a5-c8f8df7236b2.gif)\r\n\r\nThere are more changes needed to the touch controller and pointer (ex: manipulation does not currently work). These changes will follow in a future PR.\r\n\r\nFixes: #5420 \r\n\r\nValidation:\r\nAll tests performed on Surface Laptop's touch screen in editor.\r\n\r\n[Pre-fix]\r\n* New scene with MRTK object\r\n    * Enter play mode\r\n    * Touch game window with single finger and multiple fingers\r\n    * Confirmed #5420's reported behavior: debug rays (via FocusProvider) were correct, on screen rays (via line renderer) were not\r\n* Load spatial awareness demo\r\n    * Add spatial object mesh observer\r\n    * Enter play mode\r\n    * Attempt to click on the sphere (toggle mesh display) - This did not work\r\n    * Confirm that input simulator properly generates click events\r\n\r\n[Post-fix]\r\n* Repeat new scene test\r\n    * Confirmed that rays now point inward from touch point (expected behavior)\r\n    * Confirmed rays (and touch points) are properly cleaned up\r\n* Repeat spatial awareness demo test\r\n    * Confirmed touch click on the sphere functions as expected (properly toggles the mesh display)"""
485958665,5797,b'Make the mesh/joint visualization have independent editor/playersettings',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4213\r\n\r\nThis makes it so that the hand mesh/joint visualization is has a separate editor and player setting - this allows people have to hand joint and mesh in-editor (for in-editor simulation) without also having the same setting in the actual player. Having these settings on in-player has a perf cost, so we typically recommend that people have these features turned off when actually deployed to device.\r\n\r\nThis change updates the profile by having a flag based config for this (i.e. none, editor, player, or both). Note that this is obviously not backwards compatible, and thus this is a breaking change, to which I'm going to add a migration script (working with @MenelvagorMilsom and @thalbern on this one) once some of the migration infrastructure is a little clearer. The goal here is to make it so that people can just run a script and get the right changes to their existing profiles.\r\n\r\nSee https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5772 for tracking of breaking changes and how we deal with migrating them\r\n\r\nThis also changes the mechanics of EnableHandMeshVisualization and EnableHandJointVisualization to only affect the currently active application mode (so that doing things like using the in-editor simuilation and the hand visualization toggling script won't affect player settings).\r\n\r\n![image](https://user-images.githubusercontent.com/5840182/63796744-75110500-c8bb-11e9-80d0-85375b73463a.png)\r\n"""
485952074,5796,b'Updating version to 2.1.0',"b'This updates dev branch to next version, currently marked as 2.1.0, and also temporarily downgrades ""current"" version to 2.0.0.'"
485948998,5795,b'Improve some more tests in 2019',"b""## Overview\r\nThis PR doesn't make more tests pass, but does clean up unnecessary output when running tests:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/63794907-c15a4600-c8b7-11e9-92f7-10e56a968a4d.png)\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/63794961-dafb8d80-c8b7-11e9-9a1d-f7143fd0b51f.png)\r\n"""
485946343,5794,b'Merge Stabilization Update',b'Merging in the Versions update from stabilization before updating versions on mrtk_development.'
485891699,5792,b'Updated Version to 2.0.1',"b'This change updates version references to 2.0.1 for the release, and also updates Release.md.'"
485757643,5791,b'Improve profile inspector performance by removing a type search bottleneck',"b'**Note: Solution here doesn\'t work because Interfaces in the registry may be assignable from the given service, but map to an incompatible profile type.\r\nE.g. InputSimulationService implements both IInputSimulationService and IMixedRealityEyeGazeDataProvider, but IMixedRealityEyeGazeDataProvider maps to MixedRealityEyeTrackingProfile instead of MixedRealityInputSimulationProfile.\r\nDon\'t have a good way to disambiguate here if the service does not match one of the registered interface types exactly**\r\n\r\n## Overview\r\n\r\nProfile inspectors can be really slow, due to a lookup function `GetProfileTypesForService` that loops over assets (!) to find profile types matching a given service type. This is becoming a severe bottleneck (as indicated by the internal comment), especially for profiles with a lot of nested ""child"" profiles for data providers, themes, etc., for example the Interactable profiles.\r\n\r\n## Changes\r\n\r\nThe profile types can be examined based on reflection instead, which is also more reliable in case there is no default profile instance for the service type. This can be done statically once, so the inspector doesn\'t have to loop over assets or types in every single draw call.\r\n\r\n## Verification\r\n\r\nCreate a new service or data provider or Interactable theme. If the service has a dedicated profile type, as indicated by the `MixedRealityServiceProfile` attribute, then the profile selector should only show this type of profile.\r\n\r\nFor example:\r\n- Select the MixedRealityToolkit object\r\n- Select the Input subprofile in the inspector\r\n- Add a new Data Provider\r\n- Set the data provider type to Microsoft.MixedReality.Toolkit.Input.InputSimulationService\r\n- Open the profile selector, it should only show input simulation profiles'"
485719553,5789,b' Add Method to encapsule the functionality from StartCommandLineBuild\xe2\x80\xa6',"b'\xe2\x80\xa6 from Exiting the editor\r\n\r\n## Overview\r\n\r\nThis gives access to the simple unity build function without closing the editor automatically which we needed for our own (simple) CI build.\r\n\r\n> When using the approach described in the old pull request, beware of the fact that the \'-quit\' flag of the unity batchmode will result in the build closing when ever another process ends e.g. the vswhere process or the msbuild process.\r\n\r\n\r\n### Updated BuildTool apporach\r\n```[c#]\r\npublic static async void BuildAndBundle()\r\n{\r\n          SetUpHololensBuildSettings(); // setup your build preferences in case they differ from developer machine to CI runners intention\r\n\r\n            // First build SLN\r\n            var success = await UnityPlayerBuildTools.BuildUnityPlayerSimplified();\r\n            if (!success)\r\n            {\r\n                return;\r\n            }\r\n\r\n            var buildInfo = new UwpBuildInfo(true);\r\n            buildInfo.Configuration = ""Master"";\r\n            buildInfo.BuildPlatform = EditorUserBuildSettings.wsaArchitecture;\r\n\r\n            //// Next build the APPX from Solution\r\n            //EditorAssemblyReloadManager.LockReloadAssemblies = true; //was already set in StartCommandLineBuild\r\n            success = await UwpAppxBuildTools.BuildAppxAsync(buildInfo);\r\n            EditorAssemblyReloadManager.LockReloadAssemblies = false;\r\n            Debug.Log($""Appx bundled successful? success: {success}"");\r\n}\r\n```\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4889\r\nIn the old pull request it was expected that only a synced approach would solve the CI issues. Further research provided that it was the \'-quit\' flag on the unity batchmode start (see above)\r\n\r\n'"
485541248,5787,b'Updated path to eye calibration',"b'## Overview\r\nIn case the auto triggering of the eye calibration fails, there is an option to start in manually via Settings. The path to get there had to be updated in a screenshot and prefab:\r\n""Settings->System->Calibration->Run eye calibration"".\r\n'"
485532900,5786,b'Updating path to manually start eye calibration',b'## Overview\r\nThe path to manually start the eye tracking calibration was outdated. The new path is:\r\nSettings->System->Calibration->Run eye calibration. \r\n'
485502585,5785,b'Add a script that will check docs for validation errors.',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5716\r\n\r\nPer the linked issue, there are currently a number of places in our docs that have hardcoded, full URLs to the github.io docs, instead of using relative paths. docfx is unable to validate full paths, but are able to validate relative paths, so in order to avoid inadvertently breaking things going forward (and to also ensure that things like doc versions properly point to their matching version), we want to make sure that no one checks in any more full paths.'"
485498333,5783,b'Fix pointer profile inspector',"b""## Overview\r\nThis PR has two changes:\r\n\r\n1) The Pointers profile used `ReordableList` to easily draw the inspector which is awesome...but when drawn as a subprofile, the entire inspector is reallocated every draw. Thus there is no way to save state between renders resulting in the bug #5004 . This PR draws the list manually with our own add/delete buttons similar to speech profile and other similar list inspectors in MRTK\r\n\r\n2) A lot of old code still uses BeginHorizontal/Vertical which is both problematic and harder to read. Switching to EditorGUILayout.VerticalScope() {} clearly defines what is being draw in this horizontal/vertical and allows valid clean up if the logic returns early\r\n\r\nThe PR looks more deadly than it is. It's largely because of all the tab formating with the new using() { }\r\n\r\n## Changes\r\n- Fixes: #5004 \r\n\r\n## Verification\r\nNavigated all pages and browed basic usage\r\nAll tests pass\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
485479798,5782,b'Update run_playmode_tests.ps1',b'## Overview\r\nBlank `Write-Host` was causing PowerShell to query the user:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/63727137-42f89800-c814-11e9-9801-6aa91f921317.png)\r\n\r\n'
485477659,5781,b'Get PressableButton working well with UnityUI',"b""## Overview\r\nPressableButton and its inspector previously only worked with NearInteractionTouchable.  With this change, it now also works well with NearInteractionTouchable**UnityUI**.  This makes it possible for users to create UnityUI Buttons which resemble MRTK buttons in appearance and functionality.\r\n\r\n## Breaking Changes\r\n- NearInteractionTouchableCollider is removed.\r\n- NearInteractionTouchable's LocalBounds and LocalCenter properties are now getter-only.  To set them, you now must call SetLocalBounds() and SetLocalCenter().\r\n\r\n## Changes\r\n- NearInteractionTouchable and NearInteractionTouchableUnityUI now derive from NearInterationTouchableSurface.\r\n- PressableButton and its inspector now use NearInterationTouchableSurface rather than either concrete class.\r\n- Created Prefabs for buttons based on UnityUI but which are styled to look like MRTK buttons.\r\n   - Had to create new or extend existing utility classes to support this.\r\n- Added a section to the HandInteractionExamples scene to showcase the new style of buttons.\r\n\r\nHere's how they look and behave in the sample scene.\r\n\r\n![Pressable Button UnityUI 1](https://user-images.githubusercontent.com/41760870/63726788-21e37780-c813-11e9-897b-09b3de3ece7d.PNG)\r\n\r\n![Pressable Button UnityUI 2](https://user-images.githubusercontent.com/41760870/63726797-26a82b80-c813-11e9-967c-0e278b854402.gif)\r\n\r\n![Pressable Button UnityUI 3](https://user-images.githubusercontent.com/41760870/63726801-2a3bb280-c813-11e9-8e46-4c7967404e24.gif)\r\n"""
485377110,5778,b'Improve playmode test failures in Unity 2019',"b""## Overview\r\nFrom this:\r\n![image](https://user-images.githubusercontent.com/3580640/63713217-103ea780-c7f4-11e9-8a10-3796eb805c81.png)\r\n\r\nto this:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/63713340-5562d980-c7f4-11e9-972c-1f4f921c3dfb.png)\r\n\r\nFound via the failing daily 2019 build: https://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=4684&view=ms.vss-test-web.build-test-results-tab\r\n\r\nThe problem with this WMRObserver is #4066, where 2019 started failing this assert if a headset wasn't attached.\r\n\r\nThe problem with BoundarySystem was #3263\r\n\r\nFixes #4066, #3263"""
484754210,5774,b'Chery-Pick of PR 5589 into 2.0.1',b'This brings in the PR 5589 change into 2.0.1 branch.'
484752718,5773,b'Cherry pick pull/5603 into 2.0.1',b'Cherry-picking https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5603\r\n\r\nThis is one of the changes needed to get NuGet packages to work well end-to-end.'
484725667,5771,b'Fix SupportedPlatforms checking',"b""## Overview\r\nThe SupportedPlatforms enum has Editor listings but it's not exactly accurrate and it's a bit weird. I could be running in WindowsEditor but targeting different platforms such as WindowsStandalone, UWP, etc.\r\n\r\nIf running in Editor, platform comparison checks are handled by looking at the current BuildTarget while if running in Player, platform comparison checks are handled by looking at the actual app endpoint.\r\n\r\nThe problem is there is currently no way to indicate that a service/dataprovider should target a certain platform BUT also only on device or only in editor. \r\n\r\n@wiwei, added the SupportedApplicationModes enum flags which this PR leverages to allow services and data providers to target running in Editor, Player, or Both. \r\n\r\nPlatformUtility now supports functions to query against SupportedApplicationModes.\r\nExtensionServiceWizard now allows for targeting against SupportedApplicationModes\r\n\r\n**Breaking changes:**\r\nIMixedRealityServiceConfiguration => Added SupportedApplicationModes RuntimeModes and does not support None results\r\nIMixedRealityServiceRegistrar => RegisterService interface has SupportedApplicationModes default param now\r\n\r\nThis should be mostly internal folks or rare occurrences.\r\n\r\n## Changes\r\n- Fixes: #5205 \r\n\r\n## Verification\r\nAll tests pass\r\nTODO:\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
484671575,5769,b'Optimize window doc cleanup',"b'## Overview\r\nFixes image quality on optimize window\r\nFixes optimize window documentation url\r\nFixes note section on page\r\nFixes code to not line break on doc page\r\nFix input events xref missing because of space\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
484643019,5766,b'Fix how gameobjects get destroyed in play vs edit modes',"b'## Overview\r\nSome of the pointer components have [ExecuteAlways] in order to perform validation OnEnable in the editor. This is excessive as these validation will be thrown at runtime still. \r\n\r\nAlso, many areas destroy gameobjects both in play mode and in edit mode. However, one must use DestroyImmediate in edit mode. Added function to GameObjectExtensions to simplify calling for all parties\r\n\r\n## Changes\r\n- Fixes: #5763 \r\n\r\n## Verification\r\nAll tests pass\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
484307986,5761,b'Fill nullptr in poke pointer',"b""## Overview\r\n- Fixes: #5760 \r\n\r\nIt seems its possible for the following to happen:\r\n\r\n- pointer added on thread 1\r\n- start gets called, but gets delayed because input system is not ready\r\n- focus provider updates on thread 2\r\n- focus provider touches queryBuffer\r\n- queryBuffer gets initialized\r\n\r\nMoving the queryBuffer initilization into Awake should ensure it gets initialized before focusprovider touches the pointer, since I assume Awake gets called before FocusProvider touches the pointer.\r\n\r\nUnfortunately, this does not repro in editor (at least, I couldn't figure out how to repro in editor), so for this one I will not be writing a test :-( \r\n\r\n# Verification\r\n@Kjakubzak would it be possible for you to try this fix instead of your nullptr check to verify this fixes the bug? Reason I'd prefer to do this is because in GetNearestTouchables queryBuffer really should not be null, so it's good (in a way) we are throwing an error (it represents invalid state). I'd rather fix the root cause (variable being initialized in the wrong place)."""
484156490,5757,b'Documentation and Code cleanup work',"b'## Overview\r\n\r\nThis changes performs some clean up work\r\n\r\n1) There are some cases where we are using EditorPrefs that save preferences to the registry and this is not necessary. Particularly for saving if a inspector foldout should be visible or not. Saving this kind of information for just the current session is perfectly sufficient. This change modifies some use of EditorPrefs to SessionState\r\n\r\n2) Many overrides are not marked as /// <inheritdoc /> so docfx lists no information for them on our documentation pages. \r\n\r\n3) Core Systems do not set or override the IMixedRealityService.Name property. Thus, when one receives an IMixedRealityService reference, it is just a blank name. Thanks to @julenka for finding this\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\nAll tests pass\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
484138787,5756,b'Update to check for `isCustomProfile: 1` during PR validation (and fix existing incorrect profiles)',"b""## Overview\r\nThis PR extends the script added in #5632 to add a check for `isCustomProfile: 1` in all of our non-Examples assets.\r\n\r\n## Changes\r\n- Fixes: #5717, #5679\r\n\r\n## Verification\r\nI'll run the mrtk_PR pipeline to validate that this fails, then check in the fixed profiles and validate that this passes."""
484126832,5755,b'Update test runner script',"b'## Overview\r\nI was unable to run the test runner script locally as-is, seeing this:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/63536967-90e66680-c4c9-11e9-9765-ff90832ceb5a.png)\r\n\r\nI updated `\xe2\x80\x98Container\xe2\x80\x99` to `Container` to fix it.\r\n\r\nI also updated the version of Unity it looks for the the current version we have checked in to the repo: #5657 '"
483950870,5752,b'adjusted version dropdown (prerelease to release)',b'files already moved on github pages branch'
483899293,5751,b'provide multicore appx build capabillity',"b'## Overview\r\n\r\nIntroduces the usage of the msbuild multicore related flags for appx build.\r\nUsage is available via UwpBuildInfo and through the BuildWindow.\r\nPreference gets saved via EditorPrefs.\r\n\r\n> Evolution of pull request: https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4889\r\n> Isolation of changes to the multicore feature\r\n> related to feature request: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4890\r\n\r\n## Changes\r\n\r\nIf multicore build option gets enabled, the build process will add the necessary flags to the msbuild.exe call for creating the appx.\r\n\r\n'"
483703011,5750,b'Fix error when the number of hand mesh vertices decreases',"b""On certain platforms it's possible for hand mesh vertex array sizes to decrease between events, and the current infrastructure doesn't support that.\r\n\r\nThis addresses it (using the fix provided in https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4607) and adds a test that shows it working."""
483664874,5747,"b'Document extension services; how to create, register and use'","b'This document briefly describes creating extension services, getting them registered with the MRTK and how application code can access and use the services.'"
483610483,5746,b'Allow developers to rename GameObjects with MRTK',"b'## Overview\r\nWith MRTK in the scene and possibly with SceneSystem enable for service facades, developers were not able to F2 or right click and rename any gameobject in a scene. \r\n\r\nThis was caused by two operations happening repeatedly while in editor.\r\n1) MRTK static class would call hierarchyChanged callback and auto-update the name of every MRTK instance. This name update would cause hierarchyChanged to be called again resulting in a never ending sort of recursive operation.\r\n\r\n2) ServiceFacadeHandler would update all gameobjects every editorapplication.update. Not only was this excessive but it would cause the heirachy to change when trying to rename another GameObject. \r\n\r\nBoth of these operations have been refactored to only execute when an actual change has occurred. \r\n\r\n## Changes\r\n- Fixes: #5062 \r\n\r\n\r\n## Verification\r\nTested service facade in editor and MRTK gameobject in editor to rename another GameObject\r\nAll tests passed\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
483609991,5745,b'Merge mrtk_release (2.0.0) to mrtk_development',b'This change brings the 2.0.0 release changes into mrtk_development'
483525017,5741,b'Update the play mode test template to have the correct [SetUp] attribute',"b""I tried using the template, and one thing that didn't work was that Setup was incorrectly capitalized - it should be SetUp."""
483522210,5740,b'Merge 2.0.0_stabilization into mrtk_release',b'This change brings mrtk_release to version 2.0.0'
483396310,5738,b'Full canvas inspector support',"b""## Overview\r\nThe current Canvas inspector merely draws the base inspector, which doesn't reflect the Unity default inspector in the least. Additionally, it does not respect Canvases that might only be used for visualization.\r\n\r\n## Changes\r\n- Fixes: #5737\r\n\r\nThe inspector now fully reflects the current state of the configuration:\r\n\r\n- A Canvas without a GraphicRaycaster only reminds of the absence, which might be what you want\r\n- Switching to other camera modes switches to the Unity default inspector completely, which means you're not annoyed by the warning about the CanvasUtility \r\n- The WorldSpace mode now reflects the use of the required CanvasUtility in that the Camera field doesn't show when properly configured. And it also shows up like the Unity inspector would\r\n"""
483356440,5736,b'Add daily build with ARM64 build flavour',"b""## Overview\r\nAdds a daily build intended to be scheduled once a day. This build allows us to verify additional build flavours without clogging the main CI and PR pipelines. To begin with, I've added an ARM64 build that only runs on the daily build.\r\nAlongside these changes I needed to modify the build scripts to allow us to build ARM64 on CI. This included adding `ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch` to the VS project. I believe this issue has been seen elsewhere for ARM64 builds.\r\n"""
483353299,5735,b'merging Prerelease/2.0.0 stabilization to mrtk_development',b'includes PRs for enabling doc version dropdown'
483317452,5734,b'Testing PR pipeline triggers - do not merge',"b'Webhooks on the mrtk_pr pipeline got stale. This is a ""fake PR"" that will allow me to check the build trigger.'"
483126735,5732,b'Release note updates for 2.0.0',b'This change adds additional guidance for upgrading from RC2.x to 2.0.0.'
483125127,5731,b'Update InputEvent documentation',"b'## Overview\r\n\r\nUsage of input events was not well explained and examples had to be searched for in the examples package. This change gives greater detail to how input events are handle by the input system, how to register for global event handling, and how to mark an event as used. Further, there are some minor tweaks to other input docs.\r\n\r\n## Changes\r\n- Fixes: #5445 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
483108101,5730,b'Move gitignore back to root',b'Move gitignore back to root'
483105835,5729,b'Merge stabilization into dev',b'Merge stabilization into dev'
483098172,5728,b'Link fix in GettingStartedWithTheMRTK.md',b'## Overview\r\nFixed link by deleting blank space in GettingStartedWithTheMRTK.md'
483073348,5727,b'Cherry pick docs #5720',b'Cherry pick docs #5720'
483012845,5726,b'fixed bounds calculation (#5711)',b'Cherry-pick #5711 into stabilization'
482992334,5725,b'Migrate some 2.0-relevant docs from dev to stabilization ',b'## Overview\r\n#5705 and #5633'
482953931,5724,b'Merge stabilization into development',b''
482859326,5723,b'Remove erroneous version folder',b''
482783937,5722,b'added release 2.0.0 / ga to version dropdown in docs',b'-adjusted contribute link to always point to mrtk_development\r\n-added version 2.0.0 ga drop down\r\n\r\n'
482590885,5720,b'Build and Deploy instructions',"b'Adds ""Build and Deploy MRTK"" page which provides basic instructions for how to build and deploy MRTK. Link from getting started and contributing pages. \r\n\r\nInstructions basically say that building the MRTK is just building a UWP app (it\'s nothing MRTK specific) and link to good resources like: https://docs.microsoft.com/en-us/windows/mixed-reality/mrlearning-base-ch1\r\n\r\nFixes: #5712 \r\n'"
482589656,5719,b'[Docs] Object Collection documentation update',b'## Overview\r\nObject Collection documentation update\r\n- Replaced outdated screenshots\r\n- Added images to explain various types of Object Collection surfaces\r\n- Removed old information\r\n\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/prerelease/2.0.0_stabilization_DocsObjectCollection/Documentation/README_ObjectCollection.md\r\n\r\n![2019-08-19 17_38_59-MixedRealityToolkit-Unity_README_ObjectCollection md at prerelease_2 0 0_stabili](https://user-images.githubusercontent.com/13754172/63308602-4639d400-c2a8-11e9-915a-0da1ae8d863d.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #5714 \r\n'
482565391,5715,b'Minor Editor/Config level fixes',"b'## Overview\r\nThis changes fixes some minor configurations and editor behavior issues.\r\n\r\n- Fix isCustomProfile to false for DefaultSpatialAwarenessSystemProfile\r\n- Fix check for SpatialAwareness layer 31\r\n- Fix HelpURL and documentation inspector button for pointers\r\n\r\n## Changes\r\n- Fixes: #5679 , #5680 , #4648 \r\n\r\n## Verification\r\nAll tests passed\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
482293185,5711,b'Fixed BoundingBox Bounds calculation',"b'## Overview\r\nThe current, newly implemented algorithm for calculating BoundingBox bounds has a bug this fix addresses.\r\nThe code was written in a way that if a gameobject considered for bounds calculation did not have a collider, it skipped the MeshRenderer completely, even though the default configuration is ""RendererOverCollider"".\r\nThis means, meshes without colliders resulted in a zero bounds calculation.\r\n\r\nThis fixes that problem.\r\n\r\nP.S.: the fact that every combination of Renderers and Colliders is possible, one or both must be fetched and then applied in according order. Continuing anything here was a mistake.'"
482262571,5709,b'Fix html tags in SimulatedHandData docs.',b'## Overview\r\n\r\nFix broken html tags in docomments.\r\n'
481819094,5705,b'Added section to GettingStartedWithTheMRTK.md about using hand input simulation ',"b'## Overview\r\nAdded section about how to use the hand input simulation in GettingStartedWithTheMRTK.md. The section describes the basics in scene navigation and using the hand input simulation.\r\n\r\n## Changes\r\n- Added section to GettingStartedWithTheMRTK.md\r\n\r\n<img width=""599"" alt=""GettingStartedWithTheMRTKUpdate"" src=""https://user-images.githubusercontent.com/53493796/63203155-8ef05380-c042-11e9-9e15-7f43da28f521.png"">\r\n\r\n\r\n'"
481797228,5704,"b""Update the README's docs and API reference links""","b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4968\r\n\r\nAs the linked issue suggestions, the current ""documentation"" link is really confusing because it basically is a circular reference - it brings you right back to the curent page.\r\n\r\nThe tricky part here is that the Getting started guide is probably the best landing page for the documentation we have - it is still helpful to have a reference to the API, so the second link should probably be ""API Reference""\r\n\r\nIf you want to see what this is addressing, go to the readme (on github) and just click the documentation image - it will keep bringing you right to the same place (as the README.md that it took you from)'"
481792427,5703,b'Update the eye tracking sample docs to reference the Gaze Input capability',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4960\r\n\r\nJust like building an eye tracking app from scratch, using the samples also requires the Gaze Input capability, but it isn't mentioned in the docs. As a result, people using the samples on device will wonder why it doesn't work (because we didn't tell them to use that special capability)"""
481789568,5702,b'Update supported interactions of the input simulation docs',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5071\r\n\r\nThe input simulation code supports eye tracking simulation, adding it here!'"
481784108,5701,b'Add documentation for the teleport system.',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5282\r\n\r\nThe teleport system is primarily interesting for VR cases, and I added some docs here mostly so that I could have a section to put the blurb on ""how to register for teleport events""\r\n\r\nWe\'d gotten some questions on how to use it (see the issue lined above) and it\'s clearly not-obvious how you get events, so this is necessary.'"
481776895,5700,b'Merge stabilization into mrtk_dev',b''
481773048,5699,b'Add documentation for gaze',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5335\r\n\r\nIn looking at https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5335, I noticed that there wasn't even a place to put these usage docs because there was no greater blurb about gaze.\r\n\r\nThis adds a small section on what gaze is and how it generally fits into the input system, and then adds the interesting part which is the actual usage (i.e. how do I get the thing the user is looking at?)"""
481733042,5696,b'Update the DocumentationGuide to recommend against TODOs',b'This is to avoid the creation of stale content and TODOs which never get addressed because they get forgotten.'
481730901,5695,b'Remove SceneManager and LightingManager in default build',"b""## Overview\r\nMRTK devs need to regularly remove these two scenes when building and deploying: \r\n![image](https://user-images.githubusercontent.com/168492/63189477-ebd71400-c018-11e9-9695-c925136f7cd2.png)\r\n\r\nRemove those from the defaults, they don't seem to be needed for day to day development.\r\n\r\n- Fixes: #5685\r\n"""
481729105,5694,b'Remove TODO.md from the documentation.',"b'A couple of things this changes:\r\n1) Removes TODO.md, which is a catch-all and is a crutch for folks who are writing docs. Inevitablty people forget to update their TODOs and this leads to stale and not-confidence-inspring experiences reading a TODO.\r\n2) Removes existing usages of TODO, either by deleting them outright or updating them to point to the most relevant things that exist on our docs.'"
481725342,5692,b'Move the platform capability documentation to the features section.',"b'This page wasn\'t really about the architecture of the MRTK at all, and interrupted the flow of reading through the architecture section (which is written in a way where each section builds off of the learnings from the previous page)\r\n\r\nThis also moves it into the root, because there isn\'t really a great place to stick this (i.e. it would be good to get a ""features"" folder to match the TOC, but I wanted to keep this particular change scoped) - cross platform was interesting but it doesn\'t really fulfill the cross-platform notion to consumers (i.e. I would think there would be more about cross-platform information here, but it\'s just a system capability checker, which exists even if things weren\'t cross platform)\r\n'"
481723956,5691,b'Update the Dictation documentation to specify the internet connection and microphone requirements',b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5683\r\n\r\nThe dictation system requires an internet connection because the underlying windows APIs (and Unity APIs which consume the windows APIs) requires those two capabilities to be enabled.'
481723046,5690,"b'Clean up ""coming soon"" docs'","b'Some of these docs haven\'t been updated in a while, despite saying coming soon - as a principle, we should not check in things that are ""coming soon"" unless the work to do that has already been done and on your box locally and you\'re about to hit the button to create a PR. Otherwise, we risk creating a ""graveyard"" of documents that were dead before they even had the chance to live.\r\n\r\nSome of these things being removed will be valuable to have docs on, and they can be re-added once they exist, but until then having empty pages has less value than nothing at all.'"
481718506,5689,b'Add MRTK Profile tests: Default and HL1 profile',"b""## Overview\r\nAdd test to ensure we don't hit issue #5671 again. The test just loads up MRTK with the default & HoloLens 1 profiles, and ensures that when hands show up that the rays do / do not show up as well.\r\n\r\n## Changes\r\n- Fixes: #5671\r\n\r\n\r\n## Verification\r\nVerified that playmode and editmode tests pass locally.\r\n"""
481713316,5688,b'Move the platform capability documentation to the features section.',"b'This page wasn\'t really about the architecture of the MRTK at all, and interrupted the flow of reading through the architecture section (which is written in a way where each section builds off of the learnings from the previous page)\r\n\r\nThis also moves it into the root, because there isn\'t really a great place to stick this (i.e. it would be good to get a ""features"" folder to match the TOC, but I wanted to keep this particular change scoped) - cross platform was interesting but it doesn\'t really fulfill the cross-platform notion to consumers (i.e. I would think there would be more about cross-platform information here, but it\'s just a system capability checker, which exists even if things weren\'t cross platform)\r\n\r\nAlso removes references to TODO.md in the TOC'"
481709264,5687,"b""Clean up 'coming soon' documentation.""","b'Some of these docs haven\'t been updated in a while, despite saying coming soon - as a principle, we should not check in things that are ""coming soon"" unless the work to do that has already been done and on your box locally and you\'re about to hit the button to create a PR. Otherwise, we risk creating a ""graveyard"" of documents that were dead before they even had the chance to live.\r\n\r\nSome of these things being removed will be valuable to have docs on, and they can be re-added once they exist, but until then having empty pages has less value than nothing at all.'"
481698280,5686,b'Update the Dictation documentation to specify the internet connection and microphone requirements',b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5683\r\n\r\nThe dictation system requires an internet connection because the underlying windows APIs (and Unity APIs which consume the windows APIs) requires those two capabilities to be enabled.'
481588383,5682,b'Fix Custom Tracked Target in Solver Example Scene',"b""## Overview\r\n\r\nThe Manipulator Handler and Bounding Box of the Custom Target object didn't move the objects root transform, instead just the visual asset. The Solver Object tracks the root transform though, so the Custom Target example wasn't working properly. Further the axes gizmo and visual asset become dislodged.\r\n\r\nChanges cherry picked from #5662.\r\n\r\n## Verification\r\n\r\nOpen the Solver Example Scene and run it in Play Mode. Select Custom Target. Move the Tracked Object using hand manipulator and/or its Bounding Box. Verify that its axes gizmo and the Solver Object moves accordingly."""
481378191,5678,b'Merge stabilization into dev',b'## Overview\r\nPeriodic merge of stabilization into dev'
481354203,5677,b'PressableButton MovingButtonVisuals inspector fix',"b""## Overview\r\nFixes an issue where you could not modify the Moving Button Visuals on a PressableButton.\r\n\r\n## Changes\r\nThe call to serializedObject.Update() seems to revert the value, so to fix the issue I've called serializedObject.ApplyModifiedProperties() just after the EditorGUILayout.PropertyField() call which draws and modifies the Moving Button Visuals.  It's a bit unconventional to call ApplyModifiedProperties twice in a single call to OnInspectorGUI, but I don't think it will cause any issues.\r\n\r\n@Troy-Ferrell, you introduced the call to serializedObject.Update() about a week ago.  I'm open to alternative suggestions for how to fix it if you have any concerns.\r\n\r\nAlso switch to PropertyScope instead of Begin/EndProperty"""
481340834,5676,b'Merge stabilization into development',b''
481285407,5673,b'Spell check docs!',b'## Overview\r\nSpell check pass on the Documentation folder.'
481276205,5672,"b'Make HL1 config point to HL1 input, camera profiles'",b'## Changes\r\n- Fixes: #5671\r\n\r\n'
481264188,5670,b'Merge stabilization -> mrtk_dev',b'Periodic merge of stabilization into dev'
481249580,5669,b'Update stabilization docs from mrtk_dev',b'## Overview\r\nBrings over six PRs worth of docs changes from mrtk_dev.'
481247243,5668,b'Pick5554',b'This change cherry-picks the commits from #5554 into stabilization. These changes were intended to be integrated last week and got missed.\r\n\r\nFixes: #5667'
481238171,5665,b'Update the docs to remove the mrtk_development specific warnings.',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5155\r\n\r\nIn preparation for release, these features are going to go live in the latest release, so these warnings are no longer relevant.\r\n\r\nGoing forward we should have separate versions for our docs to make this exercise not necessary'"
481168560,5664,b'Updated mouse pointer doc',"b""## Overview\r\nIt wasn't clear what needs to be done to enable the mouse pointer in mrtk. Updated docs to the up-to-date steps.\r\n\r\n## Changes\r\n- Fixes: #5639\r\n\r\n"""
481145487,5663,b'Made InteractableStringTheme compatible with current button prefabs',"b""## Overview\r\nCurrent button prefabs are making use of TMPro.TextMeshPro and a common principle is to bundle the label text and the label plate game objects in another container game object which is than used as the interactable's host component, e.g. the SeeItSayItLabel in PressableButtonHoloLens2.prefab.\r\nThe current version of InteractableStringTheme does not work with these prefabs.\r\n\r\n## Changes\r\n- Fixes: null check of optional components.\r\n- Adds: support for text in TMPro.TextMeshPro components\r\n- Adds: support for text components stored in container hierarchies"""
481045898,5662,b'Fix additional Solver added during runtime not being updated',"b""## Overview\r\n\r\nThough #5416 fixed dynamically adding Solver during runtime, it just fixed the case where the GameObject has no Solver attached at all. When having a GameObject with an already attached Solver, adding another Solver (replacing the other one, or chaining them up) didn't work as intended. This is because the SolverHandler queries the list of its Solver just once.\r\n\r\nThis PR fixes those cases, by having the Solvers check and make sure they're in the list of solvers of their respective SolverHanlder.\r\n\r\nMoreover this removes the necessary to use DestroyImmediate when replacing a Solver with another. This PR changes the Solver Example to reflect this as well.\r\n\r\nWhile trying the Solver Example Scene, I noticed the Custom Target tracking wasn't working, because the manipulation handlers were not referencing the correct root GameObject. I fixed the references and included those changes in the Solver Example commit. Though I can commit that fix in a separate PR, if desired.\r\n\r\n## Verification\r\n\r\nRun the Solver Example Scene and all other scenes where Solvers are part of.\r\n"""
480966127,5661,b'MRTK Examples Hub',"b'### New PR of #5443 based on the latest stabilization branch updates.\r\n\r\n## Overview\r\nBased on our customer feedback, created MRTK Example Hub scene to make it easier to try out multiple example scenes without building & deploying each of them. It uses [MRTK\'s Scene System](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/SceneSystem/SceneSystemGettingStarted.html).\r\n\r\n[Please check out new documentation in this PR for more details.](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/prerelease/2.0.0_stabilization_ExampleHub/Documentation/README_ExampleHub.md)\r\n\r\n## Changes\r\n- Added a new scene **MRTKExamplesHub**\r\n- Added materials/prefabs for the Hub scene\'s buttons\r\n- Updated some example scenes to normalize the size, distance, and position. (No code/content changes)\r\n- Added **MRTKExamplesHubSceneSystemProfile** for easier configuration. (includes the list of the example scenes)\r\n\r\n## Screenshots\r\n<img width=""814"" alt=""2019-08-14 19_44_36-Unity 2018 4 5f1 Personal - MRTKExamplesHub unity - MRTK-GA - Universal Windows "" src=""https://user-images.githubusercontent.com/13754172/63069519-0780d400-becc-11e9-9c72-dfb5176a6ff4.png"">\r\n\r\n\r\n## Video\r\nhttps://twitter.com/cre8ivepark/status/1154856489661554688?s=20\r\n![MRTK_Hub0726](https://user-images.githubusercontent.com/13754172/61973345-afc00e80-af98-11e9-95be-639e0708e4c4.gif)\r\n\r\n\r\n\r\n'"
480934666,5660,b'Add service extension wizard known issue',"b'## Overview\r\n\r\nExtension Service Wizard is broken for optional inspector and profile. This change adds information to the known issues list for GA\r\n\r\n## Changes\r\nRelated #5654 \r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
480928346,5659,b'Add DataProvider Tests for InputSystem and SpatialAwarenessSystem',"b'## Overview\r\n\r\nData provider registration has changed dramatically in the stabilization branch. As per desires for original design, ownership of dataprovider registeration has moved entirely to the particular MixedRealityService utilizing that DataProvider. These tests are added to get coverage on this paradigm.\r\n\r\n## Changes\r\n- Fixes: #5563 \r\n\r\n## Verification\r\nAll tests pass\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
480925835,5658,b'Fix extension services registration and documentation link',"b'## Overview\r\nExtension services would all register under the interface type key IMixedRealityExtensionService. The MixedRealityServiceRegistry would only check under the interface key provided. This is problematic as a service may inherit and extend multiple interface types. Usage of GetService<MyInterfaceExtensionService>() and similar usage of TryGetService<MyInterfaceExtensionService> were broken.\r\n\r\nThis change extends the internal Registry TryGet* path to search all bins and return the first service found that matches the interface type and name query given. \r\n\r\nFurthermore, the tests were modified to check for more variety of GetService requests as well as the extension service documentation link fixed.\r\n\r\n## Changes\r\n- Fixes: #5644 , #5653 \r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
480902890,5657,b'Updating Unity version to the latest LTS 2018.4.6f1',b'## Overview\r\nUpdating Unity version to the latest LTS 2018.4.6f1\r\n\r\n\r\n![2019-08-14 14_37_15-Unity Hub 1 4 0](https://user-images.githubusercontent.com/13754172/63058640-13f03700-bea2-11e9-8b41-95ec3990fd34.png)\r\n'
480824502,5651,b'Fix keyboard show/hide for HL1 and WMR ',"b'# Overview\r\nWe want our windows system keyboard to work not just for HoloLens 2, but also for HoloLens (HL1) and Windows Mixed Reality (WHR). In HL1 and WMR there are OS bugs where the keyboard showing and hiding events do not fire. Our keyboard example was assuming those events fired correctly, and therefore not showing a keyboard in OnShow if the keyboard was visible. Remove this check.\r\n\r\n## Changes\r\n- Fixes: #5363\r\n\r\n\r\n## Verification\r\nTested on HL1, HL2 and WMR'"
480794770,5649,b'Merge stabilization to dev',b'## Overview\r\nPeriodic merge of stabilization to dev'
480792909,5648,b'Fix 5641 - SceneSystem defined as a data provider',b'IMixedRealitySceneSystem was defines as both a CoreSytem (inherits BaseCoreSystem) and an IMixedRealityDataProvider.\r\n\r\nThis is incorrect and was preventing the scene service from being loadable.'
480767748,5646,b'Script icon updates',b'## Overview\r\nI decided to remove all script icons except for test scripts and the profile scripts.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5323'
480749812,5645,b'Change GGVPointer rotation to closer match shell',"b""## Overview\r\n- With articulated hands and 6dof controllers the pointer rotation is the hand/controller's rotation. This is used in `TwoHandMoveLogic` (which is also used for one hand) so that the object rotates around the pointer as it rotates:\r\n![image](https://user-images.githubusercontent.com/47415945/63032849-8535e700-beae-11e9-8a84-6a3d5fbd3914.png)\r\n- For GGV hands, the pointer rotation was the `InternalGazePointer` rotation, which meant that as you rotated your head, using the logic above, the object would rotate around your hand:\r\n![image](https://user-images.githubusercontent.com/47415945/63033479-959a9180-beaf-11e9-9f0b-ab9d3b42fb27.png)\r\n- These changes instead create a rotation out of the vector from the head to the hand, which rotates as you rotate your hand around your body but stable is if you only turn your head.\r\n![image](https://user-images.githubusercontent.com/47415945/63034585-7f8dd080-beb1-11e9-9731-fdee1d92e760.png)\r\n\r\n## Changes\r\n- Fixes: #5640."""
480396588,5638,b'Fix 5625 - fix observer volume',"b'- Document that the observer origin is in world space.\r\n- Update the observer volume update to properly transform the coordinate space.\r\n\r\n@fast-slow-still, can you please validate this change (review the code and test your scenario)?\r\n\r\nFixes: #5625 '"
480377961,5636,b'Fix inspector event removal bug',"b'## Overview\r\nWhen removing an interactable event receiver item, the for loop rendering will still proceed thinking the number of items in the list has not changed. Thus resulting in out of bounds index access. \r\n\r\nFix now breaks out of rendering list till next redraw which happens immediately with changed object.\r\n\r\n## Changes\r\n- Fixes: #5634 \r\n\r\n## Verification\r\nOne can now add and remove interactable event receivers \r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
480353670,5633,b'Clean up and simplify pointer documentation',"b'## Overview\r\nThis change cleans and updates much of the Pointer documentation. Originally there were three different pages for pointers and each had overlapping but slightly different content. This organizes the content into Pointer Architecture and Pointers in Practice. \r\n\r\n- Added links to pointer classes on docs via xref\r\n- Add code snippets for how to do key things\r\n- Fixed some image resizing\r\n- Fixed some formating, line spacing, etc.\r\n- Added additional information on how to configure pointers via profiles\r\n- Added summary tag and tooltips to some code\r\n- Deprecates README_Pointer.md, removal from TOC and updates on getting started/readme pages\r\n\r\n## Changes\r\n- Fixes: #4953 \r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
480350384,5632,b'Add a code validation step to the PR pipeline.',"b""We've seen a couple of instances of Boo.Lang getting checked in, where we really should be using System.Collections. More generally, there can be other patterns that we may check in inadvertently that we should avoid going forward, and having this be checked by a linter/during the checkin pipeline is better than assuming that all PR will catch it."""
480332497,5631,b'Fix #5626: Discover and set virtual reality SDK(s) for the target platform',"b'This change asks Unity for the set of supported virtual reality SDKs for the currently selected target platform and then explicitly sets those that are supported by MRTK v2.\r\n\r\nUnity 2018 set default SDKs, 2019 appers to no longer do so.\r\n\r\nFixes: #5626 \r\n\r\nVerification:\r\n* Clean Unity 2018 and 2019 projects\r\n* Import private test foundation package\r\n* Apply settings via dialog\r\n* Confirm correct settings\r\n* Switch platform (to uwp or to sdk based on original setting)\r\n* Reload project\r\n* Apply settings via dialog\r\n* Confirm correct settings'"
480301394,5630,b'Fix build warnings',"b'## Overview\r\n![image](https://user-images.githubusercontent.com/3580640/62966664-55a6b200-bdbc-11e9-9307-82ae99f09ca3.png)\r\n\r\nSome of our build steps were generating warnings. This fixes them! And some formatting.\r\n\r\nFor some reason, these didn\'t show up in our ""normal"" build steps, just in some of the later steps.'"
480296862,5628,b'added filter for interactable press receiver and updated hololens 2 b\xe2\x80\xa6',"b""## Overview\r\nInteractable press receiver can now filter for far, near, or both event types. This allows us to properly configure buttons so they play sounds only from the front.\r\n\r\nAlso includes a fix for our InspectorField serialization whenever we're serializing newly added fields that aren't part of existing data/assets.\r\n\r\n## Changes\r\n- Fixes: #5616, #5647 \r\n\r\n"""
480289386,5627,b'Hide eye cursor in near touch mode',"b'## Overview\r\nThis addresses issue #5580: ""Gaze cursor shows up when hands are in near touch mode"". An additional check was added to only show the eye gaze cursor when no other near or far pointers are active. '"
480028857,5624,b'TryUnregisterModuleFolder now returns on path deletion',"b'## Overview\r\nThe MixedRealityToolkitFiles.cs TryUnregisterModuleFolder iterates a foreach loop and deletes entries within it, but instead of exiting it sets a bool to true which it returns at the end continuing to iterate the loop resulting in an Exception.\r\n\r\n## Changes\r\nNow returns on entry find.\r\n\r\n\r\n## Verification\r\nI recognized that when I moved the MRTK generated folders over to another one and then removed the old folder.'"
479904485,5623,b'Merge stabilization into dev',b''
479894609,5622,b'Overlap does not check for SolverHandler.TransformTarget null',"b'## Overview\r\nOverlap solver was not updated to check if TransformTarget could be null (i.e no hand is shown). This fix adds that check and adds SolverTest for this type of Solver\r\n\r\n## Changes\r\n- Fixes: #5604 \r\n\r\n## Verification\r\nAll tests pass\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
479881348,5619,b'Update TextMesh Pro version to 1.4.1 in the Package manifest file',"b'## Overview\r\nOur Packages/manifest.json file has old TextMesh Pro version (1.3.0) which causes alignment issues on certain cases. Manually updating through Unity Package Manager resolves the issue.\r\nSince there is no specific reason for keeping 1.3.0, updating it to the latest version 1.4.1.\r\n\r\n## Changes\r\n- Fixes: #5600 \r\n\r\n![2019-08-12 15_24_38-](https://user-images.githubusercontent.com/13754172/62903336-25590800-bd17-11e9-8af4-268d67b935f7.png)\r\n'"
479880436,5618,"b'Input, Hand joints, and BoundingBox perf improvements'","b'## Overview\r\nThere are three areas of bugs found for perf improvements into the stabilization branch.\r\n\r\n1)\r\nThe most dramatic perf impact was identified by @wiwei . Only on device, the showing and hiding of hands would cause input to handle events and a list of ""postponed"" action events were never cleared over time. This caused the list to balloon through app usage and testing with Julia at one point reached 3000+ action list! Being looped through every frame. This caused framerate to collapse into below 30 territory. \r\n\r\n2)\r\nBoundingBox called update scale handle for every BoundingBox in the scene for every rotation/scale handle on a given BB, regardless of visibility or state. This caused quite a significant overhead on the CPU.\r\n-> If handles are not visible (mostly wireframeOnly = true), then proximity scaling does not execute at all\r\n-> BoundingBox now more efficiently acquires all possible pointers\r\n-> BoundingBox only test pointer types that are visible (i.e ShowScaleHandles = true, etc.)\r\n-> BoundingBox only tests pointer results that are within a sphere of influence of the BB. Thus, if the user is far away etc. then no need to calculate proximity for every handle\r\n-> Fixed some summary tags and empty tooltips in BoundingBox properties\r\n\r\n3)\r\nHandJointUtils did not efficiently acquire a given hand joint. Every call will cause the class to try to find the latest input system and try to find the given hand by looping through detected controllers. Furthermore, in most cases (particularly SpherePointer), the calling class already had the controller reference and thus only needed to cast to IMixedRealityHand and call TryGetJoint() itself which is way more efficient.\r\n\r\n## Changes\r\n- Fixes: #5572 \r\n\r\n## Verification\r\n@julenka  tested HandInteractionExample scene on HL2 device\r\nAll tests passed\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
479878996,5617,b'Expose configuration in FocusProvider to target colliders instead of rigid bodies',"b'## Overview\r\n\r\nThis PR addresses issue #5391. \r\n\r\n## Changes\r\nThis change introduces a configuration property in the Input System Settings in MRTK profiles - ""FocusIndividualCompoundCollider"". This configurable property is passed as a argument to the Raycast provider implementation and ultimately propagates to the TryGetPrioritizedPhysicsHit logic to determines, if the raycast hit result should pick individual colliders or the root rigidbody transform.\r\n\r\nWhen the hit is determined, the profile property is again used to determine which gameobject to set as the rayast hit object .\r\n\r\n![image](https://user-images.githubusercontent.com/17660747/62901989-0c4e5800-bd13-11e9-977f-625f4209b55d.png)\r\n\r\n## Verification\r\nValidation requested from @anuraag016  via product integration.\r\n\r\nCreated a local scene with a rigidbody and compound colliders and verified that the correct item is focused.\r\n\r\nFocusIndividualCompoundCollider = false;\r\n![colliderfalse](https://user-images.githubusercontent.com/17660747/62902926-f2fadb00-bd15-11e9-9d0f-7ab1e9e8fcb6.gif)\r\n\r\nFocusIndividualCompoundCollider = true\r\n![collider](https://user-images.githubusercontent.com/17660747/62902874-cb0b7780-bd15-11e9-9b46-d11d78163d89.gif)\r\n;\r\n'"
479878177,5615,b'Fix up performance degradation associated with postponed actions.',"b""The work to add postponed actions/registrations in https://github.com/microsoft/MixedRealityToolkit-Unity/commit/c712eb128deea8cdc4633d11b76a6207f440fe7c was missing a clearing of the postponedActions and postponedObjectActions.\r\n\r\nThis leads to the array growing really really large over time, where on each input event, it would proceed to try to register/unregister the same thing (that had already been registered/unregistered). As time goes on, it grows so large that each update tick's eventing work would get overwhelmed by the busy work trapped in postponedActions and postponedObjectActions.\r\n"""
479859901,5614,b'Merge stabilization into dev',"b'## Overview\r\nPeriodic merge of stabilization into dev\r\n\r\nThere were a few merge conflicts this time, hence the custom branch'"
479843028,5613,"b'Add release notes, update authors and updating'","b'In preparation for the release of v2.0.0, adding a release notes page and updating the list of authors / updating from RCs.\r\n'"
479815081,5611,b'Added follow behavior used in OOBE (based on follow behavior from shell)',b'## Overview\r\nAdded the follow behavior used in OOBE to the list of sample solvers.\r\n\r\n## Changes\r\nAdded Follow.cs (a solver used in OOBE) and changed the SolverExample Scene to contain this solver option. This behavior can now be applied to the mug. \r\n\r\n\r\n## Verification\r\nReviewers please checkout the PR locally to validate that I modified SolverExamples.unity to your coding standards. \r\n\r\ngit fetch origin pull/{PR_ID}/head:user/ervazque/Add_follow_from_shell\r\n\r\ngit checkout user/ervazque/Add_follow_from_shell\r\n'
479788652,5610,b'Remove concrete GazeProvider reference to allow custom providers',"b""## Overview\r\nThis PR moves UpdateGazeInfoFromHit into the interface definition to remove a cast in FocusProvider to the concrete type.\r\n\r\nIt also performs some formatting / comment updates to match current MRTK-style more.\r\n\r\n## Changes\r\n- Fixes: #5545 (at least, as far as GazeProvider is concerned. There's also the note about potentially defining custom GazePointers, like other pointers are handled)"""
479776040,5609,b'[Docs] Bounding Box - Documentation improvement + default value updates',"b""## Overview\r\n- Added/updated screenshots for the 'Proximity-based Handle Animation' feature.\r\n- Updated comment in the code for the consistency\r\n- Updated default handle scaling value in the code for the consistency (Example scenes are already using proper values by overriding)\r\n- Updated proximityEffectActive as false by default to make handles always visible and avoid confusion. \r\n\r\n![MRTK_BoundingBox_Proximity](https://user-images.githubusercontent.com/13754172/62886662-6a1d7880-bcf0-11e9-98a7-6c5b858fc722.png)\r\n\r\nPreview: https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/prerelease/2.0.0_stabilization_Docs_BB/Documentation/README_BoundingBox.md\r\n\r\n"""
479765596,5608,b'Cherry-pick #5601 to stabilization',"b""## Overview\r\nThis cherry-picks @alexees' change from mrtk_dev to stabilization, to ensure this gets into GA.\r\n\r\n## Changes\r\n- Fixes: #5099 """
479764687,5607,b'Turn off material import on certain models',"b""## Overview\r\nThis PR changes some models to use their embedded materials instead of trying to re-import them every time.\r\n\r\nSpecifically, Material_37 and Material_38 kept reimporting themselves from Cheese.fbx. We remapped the cheese's materials in the prefab, so the built-in materials were unused."""
479749644,5606,b'update version files to indicate release status',b'Update the version.txt files (and add missing license.txt) to indicate the release status (no longer a prerelease)'
479716973,5603,b'Update the MRTK to support being placed in arbitrary folder names up to three directories deep.',"b'In looking into #5568, I found that the existing MRTK files code would look for specific folder names that MRTK gets put into (as in, containing folder names). It had very specific behaviors with respect to NuGetForUnity or consumption as .unitypackage - if you had consumed the code some other way (for example, used a manual nuget restore step separately from NuGetForUnity) this wouldn\'t work out, because the naming of the folders would be different (i.e. MRTK/*) instead of (Microsoft.MixedReality.Toolkit*/*).\r\n\r\nThis change works around all that by introducing the concept of ""sentinel"" files, which are empty files that are named in a specific way and uniquely identify the root of an MRTK module/subfolder. Thus, when the MRTK files code finds a file called MRTK.SDK.sentinel, it knows that that folder is the root of the SDK MRTK subfolder, and it doesn\'t matter what name the root folder (or folders going up the root) are.'"
479703005,5601,"b'Fixing position of the ""Try Repair"" button'","b""## Overview\r\nThe button's position calculation simply did not start with position.x\r\n\r\n## Changes\r\n- Fixes: #5099."""
479586279,5598,b'Move Component Governance task to the job responsible for signing',b'Nial Milsom and I suspect that the task is currently in the incorrect job - this PR updates it to match the requirements.'
479247950,5596,b'Update incorrect descriptions in the HandInteractionExample scene',"b'## Overview\r\nSome of the descriptions are not relevant on some platform/devices. Updated text to avoid any customer confusion.\r\n\r\n- **Touch Interaction**: Only works on Hololens 2 with articulated hands\r\n- **Launch External apps**: HoloLens 2/WMR can display apps in Unity apps. Hololens 1 exits the current app then launches the external app\r\n- Other description updates to clearly communicate the examples\r\n- Some Layout updates related to these text updates\r\n- Removed the Bounding Box from the Lunar Module example. Bounding Box + Manipulation Handler examples already exist on the left side of the scene (coffee cup, cheese...)\r\n\r\n## Changes\r\n- Fixes: #5595\r\n\r\n## Screenshots\r\n![2019-08-10 01_33_37-Unity 2018 4 5f1 Personal - HandInteractionExamples unity - MRTK - Universal Win](https://user-images.githubusercontent.com/13754172/62820183-6f729b80-bb15-11e9-9a01-7a2201b7557a.png)\r\n![2019-08-10 01_21_20-Unity 2018 4 5f1 Personal - HandInteractionExamples unity - MRTK - Universal Win](https://user-images.githubusercontent.com/13754172/62820184-6f729b80-bb15-11e9-8b8f-8b84498e7e99.png)\r\n![2019-08-10 01_48_00-Unity 2018 4 5f1 Personal - HandInteractionExamples unity - MRTK - Universal Win](https://user-images.githubusercontent.com/13754172/62820218-e7d95c80-bb15-11e9-806e-5a4e424b6c12.png)\r\n\r\n![2019-08-10 02_25_34-Unity 2018 4 5f1 Personal - HandInteractionExamples unity - MRTK - Universal Win](https://user-images.githubusercontent.com/13754172/62820237-31c24280-bb16-11e9-81ae-39cfd1e102dc.png)\r\n\r\n\r\n'"
479213783,5594,b'Introduce Experimental  Feature: Dwell Interaction',"b'## Overview\r\nThis PR introduces the Dwell interaction as an Experimental component in MRTK.\r\n\r\n## Changes\r\n- This PR adds 2 scripts : DwellProfile and Dwellhandler as core components that a developer can leverage to setup a interactable target as a dwellable object. \r\n\r\n- The DwellHandler script exposes UnityEvents which the targets can register to to configure their visual states based on the dwell progress.\r\n\r\n- Developers can also override the CalculateDwellProgress method to get creative with how they would like to leverage the dwell timer in conjunction with visuals.\r\n\r\n![image](https://user-images.githubusercontent.com/17660747/62886684-7a355800-bcf0-11e9-8d88-60022a070cb8.png)\r\n\r\n## Out of Scope for this PR\r\n- Dwell behavior when Near Field Interaction or other input modality is active\r\n- Dwell behavior for very large targets\r\n- Using Dwell as a for input types other than click/select/tap events\r\n\r\n## Verification\r\nAdded a sample scene and scrips to demonstrate various use cases.\r\n\r\n![dwell1](https://user-images.githubusercontent.com/17660747/62886690-7f92a280-bcf0-11e9-9cc2-d83942dddbf1.gif)\r\n\r\n![dwell2](https://user-images.githubusercontent.com/17660747/62890319-22025400-bcf8-11e9-8cc2-db4b96b1f016.gif)\r\n\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands:\r\n>\r\n> git fetch origin pull/5594/head:gazedwellv1\r\n>\r\n> git checkout gazedwellv1\r\n\r\n\r\nThe current implementation exposes the dwell profile in the editor by loading the .asset file. This  allows for runtime/playmode changes in the profile, however ends up messing up the default asset file.  Is that something that is a concern ? '"
479209311,5593,b'Reserialize scenes (first pass)',"b'## Overview\r\nContinuation of my work on #5352 ,#5430, #5588, and #5581 preparing for release.\r\n\r\nThis is a first pass of the scenes, committing the ones that only had things moved around or changes external to MRTK (mostly Text Mesh Pro). I wanted to take a closer look at some changes in the other scenes but get this out first.\r\n\r\nReserialized using Unity 2018.4.2f1.\r\n\r\n## Changes\r\n- Continuation of #4914 '"
479206894,5592,"b'Adding press, release sounds to the buttons for the far interaction'","b'## Overview\r\nOriginally, the press/release audio feedback was assigned to PressableButton script which was only used for near interactions. Moved audio clips to **Interactable**\'s Press/Release event to cover both near and far interactions.\r\n\r\n- PressableRoundButton\r\n- PressableButtonHoloLens2.prefab (covers other button prefab variations)\r\n- PressableButtonHoloLens2Unplated.prefab (covers other button prefab variations)\r\n\r\n## **REQUIRES MERGE #5577(Button distance fix) BEFORE THIS**\r\n\r\n## Changes\r\n- Removed the audio clips from the PressableButton script events.\r\n- Added the audio clips to Interactable script\'s Press/Release events.\r\n- Fixes: #5583 \r\n\r\n## Branch\r\nprerelease/2.0.0_stabilization\r\n\r\n## Screenshots\r\n\r\n### PressableButtonHoloLens2.cs\r\n<img width=""460"" alt=""2019-08-09 17_09_17-Unity 2018 4 5f1 Personal - PressableButtonExample unity - MRTK-Public-Microsoft"" src=""https://user-images.githubusercontent.com/13754172/62815021-bcc91b80-bac9-11e9-96b2-93682aaecf74.png"">\r\n\r\n### Interactable.cs\r\n<img width=""457"" alt=""2019-08-09 17_09_26-Unity 2018 4 5f1 Personal - PressableButtonExample unity - MRTK-Public-Microsoft"" src=""https://user-images.githubusercontent.com/13754172/62814974-37456b80-bac9-11e9-91ba-ae0604a0765d.png"">\r\n\r\n## **REQUIRES MERGE #5577(Button distance fix) BEFORE THIS**\r\n\r\n'"
479188345,5591,b'Update the mrtk_pr pipeline to not build the UWP x86 build.',"b'We currently build four different flavors on each mrtk_pr run, each of which can take between 12-17 minutes. This particular build being disabled in mrtk_pr has high correlation with the other x86 .NET build and IL2CPP ARM build.\r\n\r\nNote that this is still enabled on the ongoing rolling build, which still needs to validate that everything is good.'"
479170220,5590,b'Making the Unity UI example canvas background not semi-transparent and adding a proximity cursor shadow.',"b'## Overview\r\n\r\nMinor changes to improve shell parity. Making the Unity UI example canvas background not semi-transparent and adding a proximity cursor shadow.\r\n\r\n![image](https://user-images.githubusercontent.com/13305729/62809549-191f4180-bab0-11e9-936c-ae3f07e52e58.png)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5586, and the shadow ask in this bug https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5587\r\n\r\n## Verification\r\nPlease try the UnityUI example in the HandInteractionExamples scene.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
479168294,5589,b'Fix missing default types in profile configs when consumed via NuGet',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4491\r\n\r\nThe current type enumeration code uses Unity's assembly CompilationPipeline.GetAssemblies, which only captures things that are going through Unity's compilation pipeline. This doesn't work well when consuming MRTK as compiled binaries - these types are obviously not part of source files at that point."""
479165461,5588,b'Reserialize prefabs',"b'## Overview\r\nContinuation of my work on #5352 and #5430, preparing for release.\r\n\r\nReserialized using Unity 2018.4.2f1.\r\n\r\nGood test of our `[FormerlySerializedAs]` tags :)\r\n\r\n## Changes\r\n- Continuation of #4914 '"
479154217,5585,b'Fix5569 Green Gem in HandInteractionExample will immediately scale the mesh down on interactio',"b'## Overview\r\nGreen Gem and MRTK Logo Slate in HandInteractionExample will immediately scale the mesh down on two-handed manipulation with hand ray.\r\nFixing the issue by properly assign the target object to the ManipulationHandler.\r\n- Gem had wrong target object assigned to ManipulationHandler\r\n- MRTL Logo Slate had missing target object in the ManipulationHandler\r\n\r\n## Changes\r\n- Fixes: #5569 \r\n\r\n## Branch\r\nprelease\r\n\r\n## Screenshots\r\n<img width=""445"" alt=""2019-08-09 13_26_11-Unity 2018 4 5f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof"" src=""https://user-images.githubusercontent.com/13754172/62807159-84b1e080-baa9-11e9-85aa-91def7e9fe64.png"">\r\n\r\n<img width=""444"" alt=""2019-08-09 13_26_20-Unity 2018 4 5f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof"" src=""https://user-images.githubusercontent.com/13754172/62807145-7ebbff80-baa9-11e9-8753-7f69e14f5fc9.png"">\r\n<img width=""443"" alt=""2019-08-09 13_26_26-Unity 2018 4 5f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof"" src=""https://user-images.githubusercontent.com/13754172/62807146-7ebbff80-baa9-11e9-898a-1189929914f1.png"">\r\n\r\n'"
479151878,5584,b'Assign material to Reticle.prefab',"b""## Overview\r\nThe Reticle's material was deleted, but its reference wasn't updated. This updates it to the MRTK_Standard_Gray shader.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/62806722-7dd69e00-baa8-11e9-9d97-e26823b55afd.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/62806675-5f70a280-baa8-11e9-92e2-f615f58f2c89.png)\r\n"""
479142496,5582,b'Reserialize materials',"b'## Overview\r\nContinuation of my work on #5352 and #5430, preparing for release.\r\n\r\nReserialized using Unity 2018.4.2f1.\r\n\r\n## Changes\r\n- Continuation of #4914 '"
479141469,5581,b'Reserialize material and texture metas',"b'## Overview\r\nContinuation of my work on #5352 and #5430, preparing for release.\r\n\r\nReserialized using Unity 2018.4.2f1.\r\n\r\n## Changes\r\n- Continuation of #4914 '"
479109584,5579,b'Add tests for data provider registeration',"b'## Overview\r\n\r\nData provider registration has changed dramatically in the stabilization branch. As per desires for original design, ownership of dataprovider registeration has moved entirely to the particular MixedRealityService utilizing that DataProvider. These tests are added to get coverage on this paradigm.\r\n\r\n## Changes\r\n- Fixes: #5563 \r\n\r\n## Verification\r\nAll tests pass\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
479109134,5578,b'Fix button mappings for WMR controllers in OpenVR - 5549',"b'#5549 pointed out that the menu button mappings for the Windows Mixed Reality Motion Controllers were incorrect when running on OpenVR.\r\n\r\nThis was a result of the button identifiers being entered backwards (left as right, right as left) in the .cs and .asset files.\r\n\r\nVerified using customer provided script, running both UWP and OpenVR targets in the editor and examining the debug console output.'"
479109041,5577,"b'Button prefab fix - press distance(#5576), audio for far interaction(#5583)'","b'## Overview\r\nFix #5576: Adjusted press start/max/release distance in the button prefabs. \r\nFix #5583: Moved audio feedback from PressableButton to Interactable to support near and far interactions.\r\n\r\n## Screenshots\r\nThis base prefab PressableButtonHoloLens2Unplated update will update other button prefab variants.\r\n*Small offset from the backplate (Max Push Distance) is intentional per shell design spec. \r\n\r\n<img width=""422"" alt=""2019-08-09 11_08_24-Unity 2018 4 5f1 Personal - PressableButtonExample unity - MRTK0809 - Universal "" src=""https://user-images.githubusercontent.com/13754172/62800003-1d8b3080-ba97-11e9-8f17-497c3e81a373.png"">\r\n<img width=""407"" alt=""2019-08-09 11_08_31-Unity 2018 4 5f1 Personal - PressableButtonExample unity - MRTK0809 - Universal "" src=""https://user-images.githubusercontent.com/13754172/62800004-1d8b3080-ba97-11e9-9fb1-b5baac3255b5.png"">\r\n<img width=""574"" alt=""2019-08-09 11_08_48-Unity 2018 4 5f1 Personal - PressableButtonExample unity - MRTK0809 - Universal "" src=""https://user-images.githubusercontent.com/13754172/62800005-1d8b3080-ba97-11e9-9b53-549f8daa1acb.png"">\r\n\r\n\r\n![2019-08-09 22_04_51-Unity 2018 4 5f1 Personal - PressableButtonExample unity - MRTK - Universal Wind](https://user-images.githubusercontent.com/13754172/62818032-bb154d00-baf5-11e9-904f-fc8c7f978d4f.png)\r\n\r\n![2019-08-09 22_11_01-Unity 2018 4 5f1 Personal - PressableButtonExample unity - MRTK - Universal Wind](https://user-images.githubusercontent.com/13754172/62818033-be103d80-baf5-11e9-95f6-28e9912c25e8.png)\r\n\r\n### PressableButtonHoloLens2.cs - Audio clips removed.\r\n<img width=""460"" alt=""2019-08-09 17_09_17-Unity 2018 4 5f1 Personal - PressableButtonExample unity - MRTK-Public-Microsoft"" src=""https://user-images.githubusercontent.com/13754172/62815021-bcc91b80-bac9-11e9-96b2-93682aaecf74.png"">\r\n\r\n### Interactable.cs - Audio clips added to Press/Release events.\r\n<img width=""457"" alt=""2019-08-09 17_09_26-Unity 2018 4 5f1 Personal - PressableButtonExample unity - MRTK-Public-Microsoft"" src=""https://user-images.githubusercontent.com/13754172/62814974-37456b80-bac9-11e9-91ba-ae0604a0765d.png"">\r\n'"
479098783,5575,b'Fixing MRTK/Standard Shader Normal Maps + Proximity Light Compilation Error',"b'## Overview\r\n\r\nWhen enabling Normal Maps and Proximity Light on a MRTK/Standard material the MRTK/Standard shader fails to compile. This PR moves normal calculation above proximity light calculation so that world normals are accessible.\r\n\r\nThank you @railboy for finding this!\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5573\r\n\r\n## Verification\r\nPlease review the MaterialGallery and other example scenes.\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
479093829,5570,b'Update the inconsistent tests to be consistent with the rest of our test naming.',"b'This change makes it so that we no longer have any more arbitrary Test_##_## naming our tests - these things add marginal (or possibly no) real value, and only serve to increase the size of the test name strings. Worse, if you want to add a test in between existing tests:\r\n\r\nTest_01_TestTristateUndefined\r\nTest_02_TestTristateSet\r\nTest_03_TestSomething else\r\n\r\nYou have to do something like\r\n\r\nTest_01_TestTristateUndefined\r\nTest_01_01_TestTristateFalse\r\nTest_02_TestTristateSet\r\nTest_03_TestSomething else\r\n\r\nThis has already happened in the test code.\r\n\r\nIt would be best for us to follow generally accepted naming conventions like:\r\nhttps://testing.googleblog.com/2007/02/tott-naming-unit-tests-responsibly.html\r\nhttps://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices\r\nhttps://github.com/google/googletest/blob/master/googletest/docs/primer.md\r\n\r\nThis change also updates our testing contribution guide to provide clearer recommendations on naming and placement.'"
479086612,5567,b'Update DefaultSceneTransitionServiceProfile.asset',b'## Overview\r\n#5484 left a stray reference behind. This fixes that.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/62796670-a05bbd80-ba8e-11e9-97f2-58977ec0e6fa.png)\r\n\r\n## Changes\r\n- Fixes: #5122\r\n'
478768652,5564,b'Fix 5557 - Hand / controller input broken (cherry-pick 5561)',b'This change cherry-picks the fix for #5557 from the stabilization branch'
478744783,5562,b'Mesh Outlining',"b'## Overview\r\nThis pull request introduces a technique to outline meshes without utilizing post processing effects, which can be costly on mobile mixed reality devices. Many mixed reality applications require a mesh, or portions of a mesh, to be highlighted. The MeshOutline and MeshOutlineHierarchy components can be used to easy achieve this.\r\n\r\n![Outline](https://user-images.githubusercontent.com/13305729/62745669-f550f280-ba00-11e9-9367-e1a209ac7946.png)\r\n\r\nTo outline a mesh the object is drawn a second time slightly extruded. This results in extra draw calls but reduced overdraw. Arbitrary meshes are supported. Meshes which do not extrude cleanly can be mitigated by utilizing the MeshSmoother component which asynchronously generates smoothing groups for meshes. Outline visuals are specified via a second material which gives developers freedom to pick a wide array effects.\r\n\r\n![Outline](https://user-images.githubusercontent.com/13305729/62746004-7492f600-ba02-11e9-9395-b6a640c568db.gif)\r\n\r\nBecause this effect happens in world space rather than screen space a few limitations apply around sorting and non-uniform scales.\r\n\r\nThe PR includes:\r\n\r\n- [x] Example Scene\r\n- [x] Unit Tests\r\n- [x] Documentation\r\n\r\nLunar model curtesy of [Beau Folsom](https://www.linkedin.com/in/beaufolsom/). \r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5063\r\n\r\n## Verification\r\nPlease try using the OutlineExamples scene.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
478743418,5561,b'Fix 5557 - Hand / controller input broken',"b'Recently, a regression was introduced that caused data providers to not be enabled. Windows Mixed Reality controllers (including hands) rely on Enable to register for platform events.\r\n\r\nThis PR fixes this and a related error in the new core service base class.\r\n\r\nAdded calls to base class methods in input and spatial awareness systems.\r\n\r\nFixes: #5557\r\n\r\nVerified running on Windows Mixed Reality immersive device.'"
478740426,5560,b'Moving the HandConstraint Solver from Experimental to Release (#5500)',"b'This is a cherry pick of pr #5500 into the prerelease branch so that we can bring hand menu out of Experimental for GA.\r\n\r\n##  Overview\r\nThis pull request moves the HandConstraint  (and HandConstraintPalmUp) solver from Experimental to Release by adding tests, documentation, and a handful of bug fixes and improvements. Functionality remains pretty much the same from the previous pull request (https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4532) and utilizes solver fixes from @Troy-Ferrell\'s (https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5416)\r\n\r\nThe solver has also be genericized to work with motion controllers.\r\n\r\nThank you @julenka for guidance on how to write unit tests that utilize hands!\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5312, https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5304, https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5257, https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5413\r\n\r\n\r\n## Commits\r\n* Removing global input handler warning.\r\n\r\n* Wip check-in, new rotation behavior.\r\n\r\n* Disable hand tracking on hands which are currently focus locked.\r\n\r\n* Adding additional hand menu features and documentation improvements.\r\n\r\n* Hand constraint example improvements.\r\n\r\n* Hacks to get solver to not throw null pointers when instantiated. Should be reverted\r\n\r\n* Skeleton test for ensuring hand menu follows hand\r\n\r\n* Comment and example improvements.\r\n\r\n* autoTransitionBetweenHands is now set via the tracked handness of the solver handler\r\n\r\n* Adding support for motion controllers.\r\n\r\n* Updating example to support new solver changes.\r\n\r\n* Moving hand based menus out of the experimental namespace.\r\n\r\n* Adding hand constraint documentation.\r\n\r\n* Addressing pr feedback.\r\n\r\n* Updating example scene to use ""new"" toggle buttons.\r\n\r\n* Improving documentation, especially around IMixedRealityControllers usage.\r\n\r\n* Fixing broken documentation.\r\n\r\n* Update Documentation/README_Solver.md\r\n'"
478737106,5559,b'Update the holographic remoting workaround is only limited to editor scenarios.',"b""Running this code in the context of the deployed device will trigger an error (in the console) about failing to load a perception remoting binary. It turns out that calling https://docs.unity3d.com/ScriptReference/XR.WSA.HolographicRemoting.ConnectionState.html (which we do) will trigger this load attempt. Wrapping this in a UNITY_EDITOR ifdef to prevent us from trying to do this on device (where this workaround isn't necessary)"""
478724499,5558,b'Fix Debug.Assert when hovering over radial set buttons',"b'## Overview\r\nYou should be able to hover over radial buttons without getting debug asserts. I fixed this bug, added a test to verify the fix, fixed another issue highlighted by the test, and fixed a third logic issue I discovered just by reading the code.\r\n\r\n## Changes\r\n- Fixes: #5553\r\n- Add test to validate fix (verified that test does not pass without fix, and passes with fix)\r\n- Test uncovered issue: IsToggled returns incorrect value when radial button instantiated. Fixed.\r\n- Fixed another logic issue: bitwise AND was being used instead of boolean AND.\r\n\r\n## Verification\r\n* Tested in editor\r\n* Playmode tests pass.'"
478702673,5556,b'Checking in Missing BuildSource.proj file',b'This change fixes the missing BuildSource.proj file.'
478683851,5554,b'[BugFix] Modified TwoHandMoveLogic to have parity with TwoHandRotateLogic in that the MovementConstraintType can change during runtime',"b""\r\n## Overview\r\nModified the TwoHandMoveLogic class to more closely match the TwoHandRotateLogic class in terms of passing in constraints to the Update function (allowing for a more flexible ManipulationHandler). \r\n\r\nThis is needed so that the movement constraint type can be dynamically changed on the ManipulationHelper during runtime, so consumers of the SDK don't need to have several ManipulationHandler components on the same object for different movement constraint types. \r\n\r\n## Changes\r\n- Removed the constructor for TwoHandMoveLogic that passed in and defined the MovementConstraintType for the lifespan of the TwoHandMoveLogic component\r\n- Modified the Update function to require a MovementConstraintType object to be passed in whenever called so it allows developers to use the same component for multiple types of movement constraints (though there are only two right now).\r\n- Fixes #5546 """
478561578,5551,b'Merge stabilization into dev',b'## Overview\r\nPeriodic merge to keep dev up to date.'
478528815,5550,"b""Don't WaitForFixedUpdate for cursor release""","b'## Overview\r\nI think while waiting for fixed update after setting the hand gesture in this test, the cursor state would transition to `Release` and then proceed to change to `InteractHover` before the test got a chance to verify the `Release` state.\r\nThis change gives us tighter control of the simulation so the test can verify the `Release` state before it changes again.\r\n\r\n## Changes\r\n- Change the TestHand interface so that waiting for fixed update is optional. \r\n- Change ArticulatedCursorState so that we do not WaitForFixedUpdate when testing for cursor release.\r\n\r\n## Verification\r\n- Ran test locally 160 times without changes and got a 6.25% failure rate, which approximately matches what we see on CI.\r\n- Ran test locally 160 times with changes and got a 0% failure rate.\r\n- Need to run PR validation.\r\n'"
478374887,5548,b'SolverHandlerInspector Fix',"b""## Overview\r\nThe current implementation does work on a scene object, but it fails when editing a prefab. I am not sure if that's a bug, at least one of my Unity bug reports considered something similar as not being a bug, but this way the value stays.\r\n\r\n\r\n## Verification\r\nWithout the fix, creating a prefab with the SolverHandler script on it will loose the chosen TrackedTargetType every time you reselect it (deselect -> select).\r\nWith this fix, the value is remembered."""
478173053,5544,b'BoundingBox now correctly calculates bounds (#5307)',"b""* Fixed bounds calculation for null colliders\r\n\r\n* no collider means 0 size\r\n\r\n* reduced code\r\n\r\n* Fixing BoundingBox\r\n\r\n* Removed irrelevant enum\r\n\r\n* rename and comments\r\n\r\n* Changed order\r\n\r\n* cleanup\r\n\r\n* removal\r\n\r\n* transformation fix\r\n\r\n* avoiding BoxPadding calculation if any axis has a scale of 0\r\n\r\n* style question\r\n\r\n* Updated test: current child implementation childs one under the other and added scewing children as second test\r\n\r\n* comments and cleanup\r\n\r\n* Fixed second Collideroverride test\r\n\r\n* reverted manually calling CreateRig as it's considered a bug\r\n\r\n* Added enum explanation\r\n\r\n* fixes and changes proposed by @julenka\r\n\r\n* Changes suggested by @Troy-Ferrell\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
478146056,5543,b'BoundingBox now correctly calculates bounds (#5307)',b'pick up approved change from @Alexees. Thanks!'
478137924,5542,b'Fix the broken CI build.',"b""Previous PR https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5516 updated the way that the solution got named, but missed the pipelines YAML file that also referenced the same thing.\r\n\r\nThis should fix the build where it's failing at this step:\r\n\r\nhttps://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=3969\r\n\r\nMSBUILD : error MSB1009: Project file does not exist.\r\nSwitch: f:\\aipmragent_work\\9\\s\\MSBuild\\Projects\\MRTK.sln"""
478129909,5541,"b'Remove unused events, interfaces, and patterns from GGVPointer'","b'## Overview\r\nThis is largely a formatting / cleanup pass on GGVPointer, found as a result of my work on #5528.\r\nMostly, there was an interface that had entirely empty events. It also had a `Start` method that only called the base.\r\n\r\n## Verification\r\n1. Make sure GGVPointer still works.'"
478126213,5540,b'add platform capability check doc',b'Add architecture / conceptual document for checking platform capabilities.'
478122990,5539,b'Pressable Button breaks when scaled in world space mode',"b'## Overview\r\nCurrently, the PressableButton functions by calculating distances in world space. If a consumer scales the button, then these world distances break. The button can still function if the ratio of push plane distances are maintained which can be done if set to Local space.\r\n\r\nAt the moment, this change just adjusts the behavior for newly instantiated buttons. Previously created buttons/prefabs/scenes etc will remain to be in the world space. \r\n\r\nOf course, all prefabs should be in local space...but that may be disruptive to people who have already extended from these prefabs. \r\n\r\n- Default coordinate space mode is Local as this allows pressable buttons to scale and still function\r\n- Updated documentation that PressableButton default is Local and this is recommended setting\r\n- Added space mode enum popup in PressableButton inspector that on change will auto-update plane distance values\r\n- Removed space mode button conversion in PressableButton inspector\r\n- PressableButton UnityEvents are null, which is annoying for developers to have to instantiate themselves when trying to subscribe programmatically\r\n- Fixed summary tags from private fields to the public properties\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/62655476-e7bf3e00-b916-11e9-98cf-9b1b75e88522.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #4971 \r\nPossibly related: #5428 \r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
478109242,5537,b'Merge mrtk_release docs into stabilization',"b'## Overview\r\nCurrently, stabilization won\'t merge cleanly into mrtk_release due to docs changes that happened in master that differed slightly from the changes made to mrtk_dev.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/62652985-74ff9400-b911-11e9-9a73-10d2d0b9e316.png)\r\n\r\nThis merges those docs in and adds some markdown formatting updates as well.\r\n\r\nI also migrated apllied the changes in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4096 to the documentation generation status as well, which is currently reporting ""never built""\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/62653068-a1b3ab80-b911-11e9-94eb-0be448474d30.png)'"
478000200,5536,b'fixed button highlights for buttons that use themes on leaving button sideways and disabling button',"b""-added forcethemeupdate in interactable OnEnable to ensure the right theme is used on reenabling an interactable\r\n\r\n-added missing physicaltouch set in handPressCompleted of physicalPressEventRouter\r\n- rearranged if in untouched event in event router so it's behaving like the other events in that class\r\n\r\n\r\n## Changes\r\n- Fixes: #4528\r\n\r\n\r\n## Verification\r\n- run tests\r\n- todo: device tests"""
477947305,5535,b'Mrtk development',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
477607352,5533,b'Avoid blocking developer when ActiveProfile null in Editor',"b'## Overview\r\nCurrently, if the ActiveProfile field is null for the active MRTK instance, then the MRTK system will frustratingly do two things at the editor level:\r\n\r\n1) Block the user from entering play mode ever \r\n2) Spam user to select a profile whenever the MRTK object is selected in the inspector\r\n\r\nThis change addresses the issue by warning the user but allowing them to continue unimpeded. \r\n\r\n- The entering playmode is only aborted if the developer selects ""OK"" with the new dialog warning\r\n---> If user selects Ignore, then warning dialog will never be shown again for this Unity session\r\n- The profile object picker is only shown if the user clicks the ""Assign MRTK profile"" button or they click ""Add mrtk to scene & configure"". \r\n- If ActiveProfile is null, then an error message is rendered in the inspector\r\n\r\n## Changes\r\n- Fixes: #5476 \r\n\r\n\r\n## Verification\r\nTest MRTK object without Active Profile & enter play mode\r\nTest adding MRTK gameobject to scene repeatedly\r\nTest ""Assign MRTK profile"" button\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
477578814,5532,b'Updates to fix SurfaceMagnetism orientation',"b""## Overview\r\nThis change fixes a faulty orientation setting in SurfaceMagnetism as well as provides clearer naming & documentation.\r\n\r\nFixes: \r\n\r\n- The Blended mode for OrientationMode in SurfaceMagnetism is supposed to blend rotation input calculated via the Tracked Transform and the normal at the surface hit point. The code was actually only blending between the current model rotation and the tracked transform rotation. And thus, the OrientationBlend property had no impact what so ever.\r\n\r\n- Furthermore, the original OrientationMode *Vertical* in documentation is supposed to face the tracked transform (i.e user etc) but actually faced along the surface normal. \r\n\r\n- To simplify implementation, the property *KeepOrientationVertical* was added to give user's more control for their chosen OrientationMode (see related bug #4800 )\r\n\r\n- OrientationMode keeps original values but renamed to be more accurate. \r\n- Updated SurfaceMagnetismInspector to hide OrientationBlend if not in Blended Mode and to hide both that and KeepOrientationVertical if OrientionMode is None\r\n- All related tooltip/summaries are updated to be both clearer & accurate\r\n- Solver documentation page has been updated accordingly\r\n- Added public properties to Solver for LerpTime etc\r\n- Updated SolverTests to set *LerpTime to 0.0 so we can make test run much faster\r\n\r\n## Changes\r\n- Fixes: #4800 \r\n\r\n## Verification\r\nAll tests pass\r\nSolverExample scene works as expected\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
477522706,5531,b'[Cherry-pick from stabilization] add namespace to solverinspector',b'This change takes the solver inspector namespace fix from the stabilization branch to resolve the asset retargeting error in ci'
477510486,5530,b'Update the build system to have a hook to check for validation errors in the MRTK build',"b""Recently we hit an issue in the MRTK where we had duplicate GUIDs checked in for a few different assets:\r\n\r\n#5431\r\n\r\nThe root issue here was that the meta files were copy pasted, instead of being regenerated at the new location. There was a warning in the console but it was ignored, and since Unity will non-deterministically choose one of them (i.e. either of the duplicate GUIDs could be right) - you end up with cases where you will get one or the other of the assets (and hopefully Unity choose correctly for you!)\r\n\r\nI looked into doing a custom logger (i.e. catching LogWarning) but found that it doesn't run soon enough (i.e. warnings will show up, this code will get compiled) so this had to resort to editor-log parsing.\r\n\r\nIn theory this could be extended in the future to other issues that we hit that show up in the console as well."""
477292717,5528,b'Fix for issue #5423',"b'Fix for issue #5423 [Controllers shown at original place after teleporting in VR.](https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5423)\r\n\r\n## Overview\r\nThis fix addresses the issue #5423 [Controllers shown at original place after teleporting in VR.](https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5423)\r\n\r\n## Changes\r\nThe fix is in the BaseController.cs file.\r\nIn the function:\r\nprotected virtual bool TryRenderControllerModel(Type controllerType, InputSourceType inputSourceType)\r\n\r\nwe add MixedRealityPlayspace.AddChild(controllerObject.transform);\r\n\r\nThis line should actually be moved inside TryAddControllerModelToSceneHierarchy function\r\n\r\nso that even if we use the platform controller visualization, they will be correctly added to under MixedRealityPlaySpace game object.\r\n'"
477107761,5526,b'Minor cleanup passthrough',"b'## Overview\r\nThis change contains a variety of minor clean up steps. Mostly documentation links or removing unnecessary namespaces etc.\r\n\r\nVast majority of ""file changes"" are just meta files for the icon\r\n\r\nRemove unnecessary namespace BasePlayModeTests\r\nBad wording in MixedRealityToolkitConfigurationProfileInspector ""Scene System System""\r\nRemove SetDirty on BaseLineDataProviderInspector & related. PropertyFields already handle marking as dirty & history\r\nSimplified access to RenderDocLink via InspectorUIUtility\r\nAdded DocLink for PinchSliderInspector, GridObjectCollectionInspector, ToolTipInspector, DependencyWindow\r\nAdded inspector & doclink for ManipulationHandler & BoundingBox\r\nUpdated all script meta files to use correct MRTK inspector file icon\r\n\r\n## Changes\r\n- Fixes: #4516 \r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
477103317,5525,b'Update the MRTK .json files to be pretty-formatted.',"b""The current JSON files are really hard to review for deltas, because they are on such a massive long line that's it's impossible to verify any one specific change. This is especially difficult for reviewing in Github PR review tooling (or other ones that we're using)\r\n\r\nThis change does a few things:\r\n1) Updates existing .json files to be pretty formatted.\r\n2) Uploads the script that will pretty-print things.\r\n3) Changes the locations in the code that generate these files to also pretty print.\r\n\r\nNumber 2 isn't actually necessary, but is still useful for future possible json stuff, and to have an easy way to correct things if the situation arises."""
477089989,5524,b'Add conceptual docs on service registry and registrar',b'This document strives to answer the questions:\r\n\r\n- What are the MixedRealityServiceRegistry and IMixedRealityServiceRegistrar?\r\n- Why two?\r\n- How are they related?'
477086485,5523,b'Remove DataProviders from Registrar and into services',"b'## Overview\r\nThis change adjust the service registration infrastructure to adhere to the original desired design. The original design involves two key concepts: \r\n1) The difference between the Registry & Registrar\r\n2) The difference between IMixedRealityService & IMixedRealityDataProvider\r\n\r\nThis PR makes sure that DataProviders are not accessible by Registrars (primarily the MRTK object) and instead should be registered/accessed via the Service requiring that IMixedRealityDataProvider. In order to accomplish this:\r\n\r\n- Deprecated all IMixedRealityDataProvider related methods in IMixedRealityServiceRegistrar\r\n- Updated MixedRealityToolkit to not register data providers at all via RegisterService code path as well as Unregister\r\n- Updated MixedRealityToolkit to not allow getservice on IMixedRealityDataProvider \r\n- Updated MixedRealityToolkit to perform service updates/coordination by requesting all services from the MixedRealityServiceRegistry\r\n- Added BaseDataProviderAccessCoreSystem class for core systems that want to register and manage data providers.\r\n- Updated MixedRealityInputSystem & MixedRealitySpatialAwarenessSystem to use BaseDataProviderAccessCoreSystem\r\n- Updated MixedRealityToolkitTests to not include checks for IMixedRealityDataProvider\r\n- Updated InputSystemTests with IMixedRealityDataProvider check\r\n- Updated MixedRealityToolkitFacadeHandler to not use RegisteredServices property\r\n- Discovered timing bug in ManipulationHandlerOriginOffset test\r\n- Updated MixedRealtyServiceRegistry to handle TryGetSystems more flexibily \r\n\r\n## Changes\r\n- Fixes: #5509 \r\n\r\n## Verification\r\nRan all tests\r\nRan HandInteractionExampleScene\r\nRan BoundarySystem prefab in VR\r\nRan InputSystem prefab in Editor\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
477075202,5522,"b""Fix Icon Materials that Don't Respect Depth""","b'## Overview\r\n\r\nA handful of materials are using the GUI/Text Shader which does not respect the depth buffer. This results in icons drawing though other objects. This icons should use the MRTK/Standard shader and be marked as TransparentCutout or Transparent.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5521\r\n\r\n\r\n## Verification\r\n1. Open the HandInteractionExamples scene.\r\n2. Look at the ToggleFeaturesPanel from the backside.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
477073014,5520,b'Pre-RTW cleanup: remove unactionable debug log messages',b'This change prepares for the RTW (release to world) for MRTK v2.0 by removing debug log warnings that are not actionable by the developer (system or app developer).\r\n\r\nThis addresses #4277'
477055424,5519,b'Merge stabilization -> dev',"b'This change merges the stabilization branch into the mrtk_development branch.\r\n\r\nPLEASE NOTE: There was a merge conflict in HandInteractionExamples.unity that was resolved by taking the version from prerelease/2.0.0_stabilization,'"
477035131,5518,b'Prerelease/2.0.0 stabilization',b'Integrate the stabilization branch changes into the development branch.'
477018840,5517,b'Add deprecation stubs to md files',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
477002626,5516,b'Handle Built-In Packages for MSBuild Project Generation (NuGet Work)',"b'## Overview\r\nThis change updates the handling of packages for MSBuild project generation to support built-in packages, which is part of the work for #5384. This is done by updating how projects are parsed and dependencies are specified, as well as content items for packages.\r\n\r\n## Changes\r\n- Fixes: #5384 \r\n'"
476990640,5515,b'fix typo in ci template',b'Cherry-pick ci template fix from the mrtk_development branch'
476974910,5514,b'Solver Examples & Documentation Updates',"b'## Overview\r\n\r\nThis change address additional issues with the Solver example scenes & updates the solver documentation. There are additional minor fixes discovered for Solvers in here as well. See list below for all change details\r\n\r\n- Redesigned Solver example scene to be functional & easier to understand\r\n- Provided example usage of InBetween in scene\r\n- Remove SwapVolume script\r\n- Delete outdated Solver example prefabs (most were nonfunctional)\r\n- Updated solver text panel in example scene\r\n- Updated SolverHandler DestroyImmediate to Destroy\r\n- Fix SolverHandler issue in editor when destroying tracked transform unnecessarily\r\n- Fixed inspector isssue with enum popups not working with prefabs well\r\n- Fixed InBetween SecondTrackedTargetType to not show obsolete enum possibilites\r\n- Added warning to SurfaceMagnetism component for the MagneticSurfaces property. One common mistake is not marking a SurfaceMagnetism gameObject as ""Ignore Raycast"" so it doesn\'t ""Magnetize"" against itself\r\n- Added (Obsolete) term to TrackedObjectType summaries\r\n- SurfaceMagnetism did not check SolverHandler.TransformTarget was not null on raycast calculation\r\n- Add new InBetween documentation with images & gif\r\n- Added sections on Orbital & RadialView & SurfaceMagnetism to cover key propertise & common mistakes\r\n- Also added doc link button to SolverHandler\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/62486109-39c75e80-b773-11e9-9c60-eff6f0ff9681.png)\r\n\r\n![SolverExampleScene](https://user-images.githubusercontent.com/25975362/62487757-80b75300-b777-11e9-8f9c-1c87b116fb22.gif)\r\n\r\n## Changes\r\n- Fixes: #4444 , #5091 \r\n\r\n\r\n## Verification\r\nRan all playmode & editmode tests\r\nUtilize Solvers in new example scene\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
476961652,5513,b'Fix the backwards-incompatible enum change',"b'A previous change to this updated an existing enum by adding a value in the middle of the enum - this is backwards incompatible because the same value is persisted in various profiles, where enums are stored as integer values, rather than string values.\r\n\r\nThis means that something that used to refer to ""pinch"" now referred to this new thing, and the same off-by-one problem would affect all of the other options below the new enum\r\n\r\nSee change:\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/5495\r\n\r\nOriginal issue:\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/5450\r\n\r\nCurrent issue:\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/5506'"
476960536,5512,b'Fix typo in ci template',b'There was an errant $ character in the ci template file that was merged from the stabilization branch.\r\n\r\nStabilization did not hit this as it does not publish packages as part of CI. Will cherry-pick this change there as well.'
476928536,5511,b'Updated the reference to HL2 tutorials',"b""Sending on behalf of @rwinj in PR https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5444.\r\n\r\nIt looks like there were merge conflicts in that PR and I'm trying to close out older PRs"""
476369167,5508,b'Add a known issues page to the MRTK.',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5469\r\n\r\nWhile we track all of our issues on github, there are some that folks may hit more often - for the ones that are both common and have workarounds (where the real solution may be somewhat in the future) having this known issues page can be helpful.'"
476369107,5507,b'Simplify MRTK service registration & access',"b'**IMPORTANT**\r\nThis PR is now dependent on #5523 before merging\r\n\r\nThis change focuses on completing two goals with regards to service registration & access in MRTK. \r\n1) Simplify system access for consumers without need of redundant local properties calling MixedRealityServiceRegistry.TryGetService()\r\n2) Decrease monolithic infrastructure for service registration in MRTK\r\n\r\nHow this is accomplished\r\n1) Introduction of CoreServices utility class. System wide reference cache for selective core MRTK systems\r\n2) Initial ingestion of MixedRealityServiceRegistry & CoreServices classes into MixedRealityToolkit class as well as initial deprecation of related interfaces\r\n\r\nMRTK Services\r\n-> Added functions to MixedRealityServiceRegistry for GetAllServices() & ClearAllServices()\r\n-> Deprecated Core System References in MixedRealityToolkit.cs\r\n-> Deprecated ActiveSystems & RegisteredMixedRealityServices\r\n-> Part of the internal MRTK object would actually de-register all services so that they could be re-registered in order. The collection was never marked as ordered or commented anywhere. If a function wants to execute on the services list in order, then it must order them itself. This has been updated with an ExecuteAllServicesInOrder() function.\r\n-> MRTK object now uses CoreServices instead of it\'s internal ""cache"" references\r\n-> MRTK object now utilize both the Registry & it\'s internal dictionary for Register, Get, and Unregister interfaces\r\n-> Updated MRTK.IsSystemRegistered<T> to force only IMixedRealityService templates\r\n-> Redundant functionalty of IsServiceRegistered & IsSystemRegistered. Deprecated IsServiceRegistered in favor of IsSystemRegistered\r\n-> Updated tests to account for deprecation\r\n-> OnValidate in MRTK would try to re-initialize services when a new active instance was assigned....but the old instance never destroyed or cleaned up\r\n\r\n## Changes\r\nFixes: #5021 \r\n\r\n## Verification\r\n-> All tests passed\r\n-> Test experimental prefab stuff*\r\n-> Built HandInteractionExample in editor & on device\r\n-> Opening & running various scene for editor MRTK use\r\n-> Tested Boundary Visualization example scene with VR device\r\n-> Tested BoundarySystem standalone-prefab from experimental with VR device\r\n-> Testing ""Make active instance"" dynamically already broken via #5503\r\n-> Updated documentation for deprecated fields\r\n\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
476336159,5505,b'Bounding Box Handle asset cleanup for RC1/RC2 to GA upgrade',"b'## Overview\r\nBased on some internal feedback, unified Bounding Box handle assets. Customers upgrading from RC1, RC2 to GA will see invisible handles(HoloLens 2 style) since the asset scaling logic has been changed which requires new assets. To avoid confusion and to achieve the naming consistency between the inspector and actual handle asset prefabs, updated asset names from \'widget\' to \'handle\' and deleted old handle assets that won\'t work with new BB scale values.\r\n\r\n## Changes\r\n- Renamed asset names \r\n- Updated handle assets to new 1m based assets\r\n- Updated handle prefabs\r\n- Updated HandInteractionExample scene, BoundingBoxExamples scene, Slate prefab.\r\n\r\n<img width=""500"" alt=""2019-08-02 12_53_28-Unity 2018 4 1f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof"" src=""https://user-images.githubusercontent.com/13754172/62395807-2ffceb80-b526-11e9-8938-59591c55c916.png"">\r\n\r\n\r\n- Fixes: #5504\r\n'"
476323758,5502,b'Fixing Null Reference Exception in SystemKeyboardExample ',"b'## Overview\r\n\r\nWhen running the HandInteractionExamples the Unity log is spammed with null reference exceptions from the SystemKeyboardExample due to the debug text not being set up in the inspector. This pull request address this by assigning the reference and performing runtime checks.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5501\r\n\r\n\r\n## Verification\r\n\r\n1. Run the HandInteractionExamples on a HoloLens 2.\r\n2. Download the UnityPlayer.log\r\n3. Verify no exceptions from Microsoft.MixedReality.Toolkit.Examples.Demos.SystemKeyboardExample.Update\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
476316752,5500,b'Moving the HandConstraint Solver from Experimental to Release',"b""## Overview\r\nThis pull request moves the HandConstraint  (and HandConstraintPalmUp) solver from Experimental to Release by adding tests, documentation, and a handful of bug fixes and improvements. Functionality remains pretty much the same from the previous pull request (https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4532) and utilizes solver fixes from @Troy-Ferrell's (https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5416)\r\n\r\nThe solver has also be genericized to work with motion controllers.\r\n\r\nThank you @julenka for guidance on how to write unit tests that utilize hands!\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5312, https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5304, https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5257, https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5413\r\n\r\n\r\n## Verification\r\nPlease try HandBasedMenuExample scene.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
476288536,5498,b'Add namespace to SolverInspector',"b'Updates to build automation identified SolverInspector as not being in the correct namespace. In fact, it was not in _any_ namespace.\r\n\r\nThis change adds the class to the Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers namespace with other, related, inspectors.'"
476141126,5496,b'Move HandInteractionPanZoom to UI namespace',b'## Overview\r\nAlso move associated event data.\r\n\r\n## Changes\r\n- Fixes: #5387.'
476105611,5495,b'Fix grab ray pos',b'## Overview\r\nMoves the grab ray position to the average of the thumb tip and the index tip and fix tests affected by this change.\r\n\r\n## Changes\r\n- Fixes: #5450.\r\n- Grab ray position change.\r\n- Change the pinch hand gesture JSON to centre on the new grab point.\r\n- Add a new open hand gesture that is centred on the grab point (mostly for testing)\r\n- Some minor gesture changes to a couple of tests\r\n- Removed NearInteractionTouchableStack test as it was broken (see comments in file)\r\n'
475999023,5493,b'Add on focus interactable feature and clean up inspectors',"b'## Overview\r\nInteractableHighlight.cs was deprecated because it was limited in functionality and broke instancing/batching capabilities. This change adds InteractableOnFocus which uses focus change events to control interactable theme. \r\n\r\nIn an effort to make Interactable Themes more extensible, there is also considerable work in the Theme & Interactable inspector code. 90% of the changes keep the same functionality but in a simpler and more componentized manner. There are some slight differences though.\r\n\r\n- Fixed issue where remove button in ThemeInspector would remove the wrong theme property\r\n- Populating shader options & names is a bit problematic especially since it is done at the inspector level but is dependent not at the Theme level but the Profile level. A theme asset can be assigned to multiple renderers which is a bit confusing. When creating a new theme asset, it does not auto-populate possibly shader properties. This has been fixed to use MRTK standard shader by default when empty\r\n- Removed weird layout option filtering on ThemeInspector\r\n- Moved Inspector classes to ....UI.Editor namespace\r\n- Fixed InspectorUIUtility to not force callback functions which overcomplicated usage\r\n- Added notes to breaking changes doc\r\n\r\n## Changes\r\n- Fixes: #5478 \r\n- Related: #5050 \r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
475978524,5492,b'Add warnings for invalid system configurations',"b'## Overview\r\nIf a core system is enabled but the service type is null or a profile object is not assigned, then the service will not be initialized by the MRTK gameobject. This happens silently without any warning or notice to users.\r\n\r\nThis change is in the MRTK configuration profile inspector that checks whether a system is enabled but not valid to be initialized. If so, then a warning message is displayed in the MRTK inspector.\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/62342168-bd92f980-b49a-11e9-80d4-f64b2332bb30.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #3094 \r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
475860272,5490,b'fix template name error',b'Fixes the name of a pipeline template'
475769085,5488,b'Merge stabilization into development',b''
475576625,5487,"b""Unity button updates don't work reliably outside the viewport.""","b'## Overview\r\n\r\nLooks like this is a Unity bug (or call it undocumented behavior if you like): The [GetMouseButton](https://docs.unity3d.com/ScriptReference/Input.GetMouseButton.html) function does not work reliably outside the viewport window when called in the [Update](https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html) function. Doing this in the [FixedUpdate](https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html) function instead seems to work, although i could only find vague hints in forum posts and all official documentation seems to indicate that Update() should be working.\r\n\r\n## Changes\r\n- Fixes: #5485 .\r\n'"
475407402,5484,b'Regenerate some GUIDs to prevent HTK -> MRTK collisions',"b'## Overview\r\nA few files from the HoloToolkit were migrated to MRTK v2 post RC2.1 without their GUIDs being regenerated. This PR regenerates them and replaces their references.\r\n\r\nAlso regenerates the profile GUIDs added in #5431, which matched their HL2 profile counterparts.\r\n\r\nThis would be a breaking change for anybody actively consuming the dev branch, but does not break anybody using RC2.1\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5122#issuecomment-514980114'"
475401648,5483,b'Update the MRTK to support being placed in the non-root Asset folder',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4864\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/4067\r\n\r\nUp until now, the MRTK has only worked if you had its code in the root Assets folder - there were specific parts of the code that would use Application.dataPath and do things relative to that, instead of using the MixedRealityToolkitFiles helper class to do correct folder resolution.\r\n\r\nThis fixes it so that the MRTK now SHOULD support other paths (i.e. if consumers want to place things in Assets/lib/mrtk/*), by updating the parts of the MRTK that currently use Asset absolute paths to instead use the MixedRealityToolkitFiles.\r\n'"
475394917,5482,b'[Docs] Bounding Box documentation update for GA',b'## Overview\r\nBounding Box documentation update for GA\r\n- Screenshots updated\r\n- Added details about the handle asset configuration\r\n\r\n## Page\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/prerelease/2.0.0_stabilization_BBDocsGA/Documentation/README_BoundingBox.md'
475389980,5481,b'Add spatial object observer documentation',"b'This change adds a page describing the spatial object mesh observer and how it can be used in the editor to simulate spatial awareness using an imported 3D model.\r\n\r\nPLEASE NOTE: this change is being targeted at the development branch to take advantage of the docs verification automation. Once approved and passing, it will be retargeted to the stabilization branch for merging.'"
475386627,5480,b'Create ci pipeline that packages but does not publish them',b'This change adds yml files to create a CI pipeline that creates but does not publish packages.\r\n\r\nThis will enable creation of package artifacts without creating noise for partner teams.'
475378701,5479,b'add nuspec for extensions folder',b'Adds a nuspec file allowing the extensions folder to be packaged separately from the foundation.'
475042235,5475,b'Fixes two omissions in the ExtensionServiceCreator',"b'## Overview\r\n1. ExtensionServiceCreator ignores namespace supplied by user, always takes default instead\r\n2. ExtensionServiceCreator creates inspector even when ""Generate Inspector"" is unselected\r\n\r\n## Changes\r\n1. ExtensionServiceCreator now uses NameSpace in stead of DefaultExtensionNamespace while creating the files. This also required adaption of the template files as those now have a missing ""using"" on top now they are no long in Microsoft.MixedReality.Toolkit.Extensions;\r\n2. Added simple ""if(UsesInspector)"" around creation of inspector. This was read from the UI and clearly intended to use for this, but was not checked'"
475009797,5474,b'Make the vertical order of the touch pad events controller equal ',"b'## Overview\r\nThe order of the touch pad events (position, touch press) differs in the right and left Windows Mixed Reality controller popup\r\n![Left](https://user-images.githubusercontent.com/4129183/62196644-b4ad0580-b37e-11e9-90a9-4786b49b1413.png)\r\n![Right](https://user-images.githubusercontent.com/4129183/62196654-b676c900-b37e-11e9-9b14-728eacedaedb.png)\r\nThis is confusing\r\n\r\n## Changes\r\n- Updated EditorWindowOptions.json to make the order indentical. Opted to change the right controller as the left order (Position, Touch, Press) felt more logical\r\n\r\n'"
474827349,5473,b'Move extension templates to tool folder',b'## Overview\r\nThe template files used by the ExtensionServiceCreator tool were previously located in the root of the project (peer to the Assets folder). This location is not valid as they cannot be navigated to by the user (from within Unity) and prevents them from being packaged for distribution.\r\n\r\nThis change moves them into a Templates folder beneath MixedRealityToolkit.Tools/ExtensionServiceCreator and updates the paths within the tool.\r\n\r\n## Validation\r\nConfirmed that the tool successfully finds and loads the tempates.'
474780208,5472,b'Merge stabilization into development',b''
474578373,5470,b'Make sure the isSimulating flag for hands is reset when losing window\xe2\x80\xa6',"b'## Overview\r\n\r\nReset the ""isSimulating"" flags for simulated hands when the application loses focus, so that hands are not moving with the mouse when focusing back on the window.\r\n\r\n## Changes\r\n- Fixes: #5375\r\n\r\n\r\n## Verification\r\n1. Go into play mode\r\n1. Hold shift and/or space to bring up simulated hands\r\n1. _While holding shift/space_, alt+tab out of the window.\r\n1. Simulated hands are released and disappear (or stop moving with the mouse if in persistent mode).'"
474348133,5468,b'Typo in the title',b'## Overview\r\nTutortial -> Tutorial'
474304164,5458,b'Add workaround for hands/eyes on .NET Native',"b'## Overview\r\nThere is currently a known issue with Master builds using the .NET backend. In .NET Native, `IInspectable` pointers cannot be marshaled from native to managed code using `Marshal.GetObjectForIUnknown`. The MRTK uses this to obtain the `SpatialCoordinateSystem` in order to receive hand and eye data from the platform.\r\n\r\nNative source PR: https://github.com/microsoft/MixedRealityToolkit/pull/228\r\n\r\nWe are not shipping the binaries precompiled in this case, but users who need them can compile them themselves from the native source repo.\r\n\r\n## Changes\r\n- Fixes: #4340 \r\n\r\n## Verification\r\n1. Build the binary from the native repo\r\n2. Include it in your plugins folder\r\n3. Build the .NET backend as Master and deploy to your HL2.\r\n4. Verify that hand joints properly render (the HandInteractions example scene is good for this).'"
474296301,5457,b'[Shell Parity] Adding HoloLens 2 shell-parity Toggle button',"b""## Overview\r\nCurrently, MRTK only has HoloLens 1 style toggle button. Adding HoloLens 2 shell-parity Toggle button.\r\n\r\n- Created a new prefab variant **PressableButtonHoloLens2Toggle.prefab**\r\n- Added related theme files and material\r\n\r\n## Changes\r\n- Fixes: #5254 \r\n\r\n## Video\r\n![MRTK_ToggleButtonHoloLens2](https://user-images.githubusercontent.com/13754172/62088685-0b013380-b21b-11e9-8e71-5d79dc7dd171.gif)\r\n\r\n## What's added to this prefab variant?\r\nAdded additional quad for visualizing the toggle state(sky blue). The visibility is controlled by PressableButtonToggleStateOff and On theme files.\r\n![2019-07-29 16_00_17-Unity 2018 4 2f1 Personal - PressableButtonExample unity - MRTK-Public-Microsoft](https://user-images.githubusercontent.com/13754172/62088734-2ec47980-b21b-11e9-8976-7cbd1d87dccc.png)\r\n\r\n![2019-07-29 15_59_42-Unity 2018 4 2f1 Personal - PressableButtonExample unity - MRTK-Public-Microsoft](https://user-images.githubusercontent.com/13754172/62088732-2ec47980-b21b-11e9-9e5f-d21b34eda0b9.png)\r\n\r\n![2019-07-29 16_13_04-Unity 2018 4 2f1 Personal - PressableButtonExample unity - MRTK-Public-Microsoft](https://user-images.githubusercontent.com/13754172/62088909-c88c2680-b21b-11e9-8af7-c3207608c1fc.png)\r\n\r\n"""
474242903,5456,b'Add planning process document',b'This change adds a document describing the MRTK planning process.'
474224851,5455,b'[Draft] HTK Parity: Port mic stream selector',"b""This change ports the HoloToolkit's mic stream selector script and provides a new demo that boosts the voice amplitude value and alters the spatial awareness wireframe display.\r\n\r\nThis is currently a draft PR as the final location of the component is TBD and we do not yet have a version of the ARM64 micstreamselector.dll to ship.\r\n\r\nNOTE: This is being released as an experimental component and is subject to change in future releases."""
474215456,5454,b'Update EyeTracking_IsUserCalibrated.md',"b'Minor corrections\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
474179407,5453,b'Fixes build error when a scene with MRTK instance is open in editor',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5131\r\n\r\nThis code shouldn't be running during player builds - it's intended to only run during edit mode when using the unity editor. This change makes it so that during player builds (OnValidate is called during player builds probably to ensure that configurations are within their expected bounds), this isn't going to be invoked.\r\n\r\nThis does come down as a side effect of us using OnValidate (used to validate configs) for a purpose that it might not have originally been intended for (i.e. doing actual configuration work)."""
474161946,5452,b'Resolve the ArgumentException error in MRTK+Unity startup',"b'When ingesting MRTK for the first time (especially via git) you\'ll see an ArgumentException warning, which happens as MRTK is figuring out where its files are being placed. This shows as an error but is actualy benign (i.e. it happens in some processing of UPM packages that have no effect on the MRTK).\r\n\r\nThe cause here was an overly aggressive .Replace call - it replaced ALL instances of ""Asset"" with the application asset path (even when Asset was showing up much later in the path). It was really only intending to replace the prefix ""Asset"" string, so this fixes it to only do that.'"
473896394,5448,b'Mrtk spatial mouse cursor amendment',"b'## Overview\r\n\r\nWhile #5242 was approved, a slight mistake slipped in this corrects.\r\nThe deleted code lines went into the original MousePointer directly as they are not needed for the new SpatialMousePointer.\r\n\r\nWithout these gone, the spatial mouse suffers from being disabled and overlayed by the notification'"
473539416,5444,b'Updated the reference to HL2 tutorials',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
473482962,5443,b'MRTK Examples Hub',"b""## Overview\r\nBased on our customer feedback, created MRTK Example Hub scene to make it easier to try out multiple example scenes without building & deploying each of them. It uses [MRTK's Scene System](https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/SceneSystem/SceneSystemGettingStarted.html).\r\n\r\n[Please check out new documentation in this PR for more details.](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_ExamplesHub/Documentation/README_ExampleHub.md)\r\n\r\n## Changes\r\n- Added a new scene **MRTKExamplesHub**\r\n- Added materials/prefabs for the Hub scene's buttons\r\n- Updated some example scenes to normalize the size, distance, and position. (No code/content changes)\r\n- Added **MRTKExamplesHubSceneSystemProfile** for easier configuration. (includes the list of the example scenes)\r\n\r\n## Screenshots\r\n![MRTK_ExamplesHub](https://user-images.githubusercontent.com/13754172/61971249-776a0180-af93-11e9-9861-3d5bfa6dc658.png)\r\n\r\n## Video\r\nhttps://twitter.com/cre8ivepark/status/1154856489661554688?s=20\r\n![MRTK_Hub0726](https://user-images.githubusercontent.com/13754172/61973345-afc00e80-af98-11e9-95be-639e0708e4c4.gif)\r\n\r\n\r\n\r\n"""
473440915,5442,b'Prevents build failure',b'## Overview\r\nPrevents build failure when buildInfo.Configuration or buildInfo.BuildPlatform are empty or whitespace. Addresses #5434\r\nSimply adds a couple of null/whitespace checks on the above variables and sets them to safe defaults so that the build can proceed. Warning is displayed in console so dev can debug if necessary.\r\n\r\n## Changes\r\n- Fixes: #5434 '
473412486,5440,b'added fix for roll on far manipulation on hololens 2',"b""current code will just make sure that the object won't drift off in a strange way by zeroing out the roll value we're getting from the api.\r\nthe commented code should be the combination of the actual wrist roll from the grip pose with the previously queried pointer pose. \r\nI couldn't figure out how the hand is oriented , so with the code the manipulated objects will jump at the start.\r\nwe can't fix this in manipulation handler. all other platforms are working fine because they give us reasonable rotation values. unfortunately pointer pose on hl2 doesn't :-/\r\n\r\n\r\n## Changes\r\n- Fixes: #5219 \r\n\r\n"""
473130436,5432,b'0725 Updated Eye Tracking doc',"b'## Overview\r\nUpdated ""EyeTracking_TargetSelection.md"" based on user feedback.\r\n'"
473109259,5431,b'Config Profile for HoloLens 1',"b'## Overview\r\nBy default the MRTK config profile assumes articulated hand input using HoloLens 2 style hand rays + direct interaction, however many people using MRTK are still deploying to HoloLens 1. People often ask how they can [simulate HoloLens 1 style interactions in the Unity Editor](https://stackoverflow.com/questions/56821449/hl1-input-for-mrtk-v2-1).\r\n\r\nPeople building and deploying HoloLens 1 apps can use this configuration in their MRTK.\r\n\r\nThis change adds an MRTK profile that people can use to simulate HoloLens 1 style GGV interactions.\r\n\r\nFixes: #5046 \r\n\r\n## Changes\r\n* New profile to simulate HoloLens 1 interations.\r\n* Profile uses ""gesture hand"" for input simulation, not the articulated hand\r\n* Set Camera Clipping plane for HoloLens 1 to 0.3 per comfort guidelines at https://docs.microsoft.com/en-us/windows/mixed-reality/comfort\r\n\r\n\r\n'"
473074021,5430,b'Reserialize profiles and assets',"b'## Overview\r\nThis PR reserializes our profiles and various asset files. Mostly, these changes add / remove serialized fields that have changed in the underlying definitions.\r\n\r\n## Changes\r\n- Related to https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4914'"
473073452,5429,b'Add ReserializeAssetsUtility',"b'## Overview\r\nThis PR adds a version of the tool provided in https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4914 to the repo, under our new Tools directory.\r\n\r\n## Changes\r\n- Related to https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4914'"
473021113,5427,b'Fix coffee cup drop and update profile assets',"b""## Overview\r\nWhen resetting the transform of the coffee cup in the HandInteraction example scene, the rigidbody was not being reset and thus whatever velocity/momentum was attained by falling is kept. If the physics breaks and the coffee cup goes so fast it falls through the counter, it will keep never-ending increasing in velocity. \r\n\r\nThis change also fixes some asset renames for MRTK profiles from another previous change (See .asset files)\r\n\r\n## Changes\r\n- Fixes: #5382 \r\n\r\n\r\n## Verification\r\nDrop cup and now doesn't retain velocity\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
472625634,5422,b'Added audio feedback to Unity UI examples',"b""## Overview\r\nAdded audio feedback to Unity UI examples. Used Unity's Event Trigger's PointerDown/Up events.\r\n\r\n## Changes\r\n- Fixes: #4950\r\n\r\n![2019-07-24 18_47_35-Sourcetree](https://user-images.githubusercontent.com/13754172/61839828-e89a9f00-ae43-11e9-9d57-e3f70fea95c6.png)\r\n![2019-07-24 18_47_25-Unity 2018 4 2f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof](https://user-images.githubusercontent.com/13754172/61839832-ecc6bc80-ae43-11e9-842e-77d9fd5fcde2.png)\r\n\r\n\r\n"""
472619936,5421,b'Reassigned and updated font/font material on some interactable prefabs.',b'## Overview\r\nSome of the Interactable (button) prefabs had missing font or default font material. Updated/Re-assigned font and material.\r\n\r\n## Changes\r\n- Fixes: #5122 \r\n\r\n'
472548307,5418,b'Update the MixedRealityKeyboard doccomments to reflect the platforms it was intended for.',"b'It was only designed to handle the HL2 workaround, so we should at least write this down.\r\n\r\nNote that there is more work here to make the general system keyboard example script work in immersive/HL1 cases.'"
472525334,5416,b'Refactor SolverHandler to fix multiple issues',"b'## Overview\r\n\r\nThe solver system has many issues (most of which are posted on GitHub). One of the key limitations for the feature is involved in the SolverHandler class. This change addresses multiple issues:\r\n\r\n- Cleaner understanding of what kind of target type is active\r\n=> Simpler types => Head, MotionController, HandJoint, & CustomOverride\r\n=> Inspector now shows valid sub-properties based on the target type\r\n\r\n- Developers can define order of solvers in code (via SetSolvers)\r\n- Solvers can now be correctly tracked/instantiated at runtime dynamically\r\n- Solvers can now follow any hand or motion controller (defaults to Left first if set to Both/Any)\r\n- Removed OnValidate from Solver.cs as this is generally poor practice and give inconsistent results\r\n- Removed nonexisting property for InBetween.cs\r\n- Added solvertests to tests package (See verification section below for details)\r\n\r\n- Fixed SurfaceMagnetism \r\n=> Renamed properties to not assume always head tracked transform\r\n=> Created new inspector to make properties easier to understand & group\r\n=> Updated MaxDistance for raycast default from 3m to 50m\r\n=> Updated default Raycast Direction Mode to Tracked Target Forward (ray along head gaze or hand pointer, etc)\r\n- Fixed InBetween\r\n=> Updated names to be clearer\r\n=> Updated refresh of second solver to be accurate\r\n=> Updated tooltips to be accurate\r\n=> Modified inspector to extend from SolverInspector\r\n\r\n**NOTE:** This changes property names and will break any existing code that tried to extend Solvers themselves\r\n\r\nNew Solver Handler Targeting\r\n![tracked-target-type](https://user-images.githubusercontent.com/25975362/61976500-c8ccbd80-afa0-11e9-8059-fff8c6ac06cd.gif)\r\n\r\nHand Switching Feature:\r\n![hand-switching](https://user-images.githubusercontent.com/25975362/61976509-cec29e80-afa0-11e9-917d-88051475d6bf.gif)\r\n\r\nNew Editor Inspectors:\r\n![surface-mag-inspector](https://user-images.githubusercontent.com/25975362/61976726-645e2e00-afa1-11e9-99d2-ed9d27ca813f.gif)\r\n\r\n![InBetween](https://user-images.githubusercontent.com/25975362/61976522-d7b37000-afa0-11e9-8622-f6afb893fa9a.PNG)\r\n\r\nNew Solver Tests:\r\n![image](https://user-images.githubusercontent.com/25975362/61976536-e6018c00-afa0-11e9-8baa-287a8cc6e0f5.png)\r\n\r\n## Changes\r\n- Fixes: #5141 , #5110 , #4642 , #4788 , #5143 \r\n\r\n## Verification\r\nAdded Solver Tests! \r\n\r\nFurthermore, I will follow up this PR with another one to fix the Solver Example scene which is mostly broken.\r\n- Test dynamic instantiation of solver (Orbital)\r\n- Test switch hands (Orbital)\r\n- Test switch target types at runtime (Orbital)\r\n- Test SurfaceMagnetism (simple raycast against ""wall"" tracked against head*)\r\n- Test InBetween (between two cubes & modifies PartwayOffset)\r\n\r\nTested basic functionality manually\r\n- VR Motion Controllers\r\n- Editor Hands Simulation\r\n- HL2 Hands on Device\r\n- Custom override with transform in scene\r\n- Dynamically add component to gameobject (both in scene editor & via c# code)\r\n- Modify SolverHandler values in Inspector at runtime\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
472432948,5415,b'Update the build tools to use the new vswhere flag to find msbuild',"b'The build tooling currently has some issues finding instances of msbuild (especially on certain VS2019 installs)\r\n\r\nThis change adopts the change @julianloehr-kg from:\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/5356\r\n\r\nWith a modification to still fall back to the old one if the new one fails (this can happen if building in VS2017, like what happens on our build machines).\r\n\r\nThanks to @julianloehr-kg for this!'"
472019867,5412,"b""[Shell-Parity] Radial Solver update for the 'Follow Me' behavior""","b""## Overview\r\nTo achieve shell-parity 'Follow Me' behavior, added vertical position lock option to the Radial view Solver. Radial view already had min/max distance/degree allowance which allowed shell-style 'lazy following' behavior. We just needed to a way to lock vertical position. With original Radial view, object also moved vertically following the headset movement.\r\n\r\n- Applied updated Radial view Solver to Slate.prefab and ToggleFeaturesPanel.prefab\r\n- Optimized the min/max distance/degree allowance of the Radial view Solver to match shell behavior\r\n\r\n![2019-07-23 17_09_12-Shell-Parity](https://user-images.githubusercontent.com/13754172/61755517-cd109500-ad6c-11e9-94d6-5f98b49e8e42.png)\r\n\r\nPart of #4200 [MRTK Shell Parity] UX Controls Parity with HoloLens 2 Shell\r\n\r\n## Fixes\r\n- #5380 Toggle features panel solver moves menu directly in front of face\r\n- #4983 [MRTK Shell Parity] Follow Me behavior does not match the shell\r\n- #5393 [Solver] Add degree/distance range to Orbital or Add Y-pos lock to Radial view\r\n\r\n## MRCs\r\nLazy following with left/right degree values & min max distance values.\r\n![MRTK_FollowMeUpdate1](https://user-images.githubusercontent.com/13754172/61755279-adc53800-ad6b-11e9-952b-701f622b6c82.gif)\r\n![MRTK_FollowMeUpdate2](https://user-images.githubusercontent.com/13754172/61755282-b0279200-ad6b-11e9-9fa2-ee3175fe859e.gif)\r\n\r\n"""
471949363,5411,b'Update VS2019 version and emulator link',"b""Feedback from the most recent hackathon was questions around:\r\n\r\n1) Do we support VS2019? (Yes, we've been changing this in a few locations but haven't fixed up all locations.\r\n2) The emulator link goes to an older version (swapped to the HL2 emulator instead)"""
471843232,5410,b'Clean up documentation across the board',"b'## Overview\r\nThis change is just a pass through the documentation markdown looking for easy errors such as the list below.\r\n\r\nFix additional spaces and tabs\r\nFix spelling\r\nFix note call-out sections by using [!NOTE]\r\nFix new lines in markdown after sections etc. (see visual studio code)\r\nFix random line breaks in paragraph sections (likely from copy/paste from MSFT word)\r\n\r\n## Changes\r\n- Fixes: #5409 \r\n\r\n## Verification\r\nThis is just a touch-up so there should be no breaking changes etc.\r\n\r\nVerified by looking at rich diff\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
471834185,5408,"b'Update spatial mesh level of detail values, translate in observer'",b'This is a minor breaking change (values in the SpatialMeshLevelOfDetail enum) to eliminate direct triangles per cubic meter encoding in the enum.\r\n\r\nThis change adds a Medium LOD as well as a lookup method in the windows mesh observer.\r\n\r\nVerified by changing the LOD in the observer profile and deploying / running on HoloLens.'
471383372,5406,b'Rename files with paths that exceed MAX_PATH when MRTK is included as a submodule in other projects',b'This PR reduces the lengths of the names of some files that exceed MAX_PATH when the MRTK is included inside the MixedReality-SpectatorView repository as a Git submodule.'
471365438,5405,b'Reduce the length of the names of certain files that exceed the MAX_PATH',"b""The MAX_PATH being exceeded by these files is problematic when the MixedRealityToolkit is included as a submodule in other repositories. I'm certainly open to feedback on revisions to these names that still keep the total path short enough.\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
471347631,5404,b'Fix MRTK asset menu layout / remove duplicate menu',b'This change consolidates duplicate asset menus and places all profile options into the profile menu.\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/13281406/61667055-d545d300-ac8d-11e9-80f7-affd0f40775b.png)\r\n\r\nAfter\r\n![image](https://user-images.githubusercontent.com/13281406/61667068-da0a8700-ac8d-11e9-8f2a-8baaf75f9c36.png)\r\n'
471341987,5403,b'[Shell-Parity] Hand Ray visual updates',b'## Overview\r\nHand Ray updates for Shell-parity.\r\n- Line become solid only on Press\r\n- Line color is always white\r\n- Updated gradient and dotted line pattern\r\n*Part of the shell-parity UX items #4200 \r\n\r\n## Changes\r\n- Updated color values in the DefaultControllerPointer prefab\r\n- Updated ShellHandRayPointer.cs to show solid line only on Pressed\r\n- Fixes: #4200 and #5355\r\n\r\n![MRTK_HandRay](https://user-images.githubusercontent.com/13754172/61666099-839c4900-ac8b-11e9-9cc2-c7261e9ecd82.gif)\r\n'
471315224,5402,b'Add better support for HoloLens clicker',"b""## Overview\r\nThis PR redefines the clicker from an unhanded `WMRController` to an unhanded `GGVHand`, to better define and update the clicker (it's much closer to a HL1 hand to a motion controller). This both prevents irrelevant code (attempting to load the controller model) from running and better scopes the actions a clicker can actually perform.\r\n\r\nAs part of this, it adds a profile updating step that will run automatically the first time a controller mapping profile is opened.\r\n\r\n## Changes\r\n- Fixes: #5397, #5287\r\n\r\n## Verification\r\n1. Run on HoloLens 1.\r\n2. Try using a clicker to select objects\r\n3. Try using voice to select objects.\r\n"""
471256135,5401,b'Round Shell Parity Button + Additional Button prefabs in different dimension',"b'## Overview\r\nMany developers use circular buttons within their UI and would like an HoloLens 2 Shell-like an example button to use within their applications. This pull request introduces a circular button prefab for developers to ""drag and drop"" into their application:\r\n\r\n![CircularButtons](https://user-images.githubusercontent.com/13305729/61656781-5beeb600-ac76-11e9-9a7d-614d63ddba6b.gif)\r\n\r\nThis pull request also introduces a new shader feature which aides in developing ""2D"" content such as button plates and slates. The ""Ignore Z Scale"" option allows developers to specify any depth (Z) scale without effecting border width or other scale reliant shader features.\r\n\r\nThis PR also includes additional button prefabs in different sizes. You can find these updates in the PressableButtonExamples scene.\r\n![2019-07-23 12_35_10-Unity 2018 4 2f1 Personal - PressableButtonExample unity - MRTK-GitHub - Univers](https://user-images.githubusercontent.com/13754172/61680986-7baacc00-acc0-11e9-9ec8-4bb4b614df26.png)\r\n\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5400\r\n\r\n\r\n## Verification\r\nPlease review the examples found in the PressableButtonExample scene.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
470680361,5396,b'Update GettingStartedWithTheMRTK.md',"b'updated tp VS 2019, to be consistent with link and docs\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
470613970,5392,b'Add a somewhat helpful message on CreateInstance failure.',"b""It turns out that the existing logging isn't very helpful, because the inner message isn't logged. Thus, if the client here is creating something and has an exception in their code, all they will see right now is a TargetInvocationException, instead of a real callstack associated with their code.\r\n\r\nThis is SUPER hard to debug (you have to know to turn on all managed exceptions) so hopefully this increased logging will help clients figure out what happened when we try to new their objects up."""
470551290,5389,b'Update MRTK Standard shader doc for performance section',"b'## Overview\r\nCopied over performance content related to MRTK Standard shader from the performance doc to the MRTK standard shader doc\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
470546535,5388,b'Fixes gesture pinch release mechanics involving two mouse button interactions.',"b'Prior to this fix, when using gestures (GGV) style interactions, you would run into this bug:\r\n\r\n1) Press space bar to engage the hand simulation.\r\n2) Hold down left mouse to engage pinch.\r\n3) Hold down the right mouse to rotate the camera.\r\n4) Lift the left mouse to disengage pinch.\r\n\r\nStep #4 wouldn\'t work (it would stay engaged in the pinch until you lifted the right mouse button) because the existing code would see that the right mouse button was down, and even though it was not configured to do anything (i.e. a configuration of ""none"" means ""don\'t affect the state of the gesture simulation""). However because the function returned ""none"", this told the rest of the code to keep doing what it was doing before (which was, simulating the pinch gesture associated with the left mouse click.)\r\n\r\nYou have to return the default (or open) pose explicitly to get the hand to open, and by making the code change to actually honor the lack of configuration, this all works out.'"
470488750,5385,b'Bounding Box Rig GameObject Management',"b'#Overview\r\n\r\nThe bounding box component now manages the rig it creates and destroys the rig on destruction and disablement. This bug is especially apparent when adding/removing bounding boxes dynamically. \r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5383\r\n\r\n## Verification\r\nTested in the BoundingBoxExamples, BoundingBoxRuntimeExample, and HandInteractionExamples scenes.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
470440733,5379,b'Fix manipulation offsets for when origin not mesh centre',"b""## Overview\r\nThese changes will make it that most manipulation options will rotate around the grab point for all types of interaction. This means that in most cases, it will not matter that the origin is not at the mesh centre. With smoothing this can still look weird if scaling or rotating quickly, however the object ends up where you expect it to go. \r\n\r\nAs I've mentioned [here](https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4910#issuecomment-513267204) I wasn't convinced that we should take these changes. There are better ways to do this, but they would require an overhaul of the `ManipulationHandler`, which is not a change we can make right now.\r\n\r\n## Changes\r\n- Fixes: #4910 \r\n- Overhaul of `TwoHandMoveLogic` so that it works for rotate around grab point.\r\n- New `TwoHandMoveLogic` now works for one handed near interaction. \r\n- Changes in `ManipulationHandler` to use this new `TwoHandMoveLogic`.\r\n- Some test changes to respond to the changed logic."""
470360697,5378,b'[Asset] Adding MRTK Logo GLTF file',"b'## Overview\r\nAdding MRTK Logo GLTF file which can be used for the app launcher icon(aka Live cube).\r\n\r\n## Screenshots\r\n![2019-07-19 23_31_20-Unity 2018 4 2f1 Personal - Glb-Loading-Demo unity - MRTK-GitHub - PC, Mac   Lin](https://user-images.githubusercontent.com/13754172/61543132-d6081a80-aa7d-11e9-9531-b947813e2944.png)\r\n\r\n![MRTK_GLTF1](https://user-images.githubusercontent.com/13754172/61543214-fcc65100-aa7d-11e9-9338-62eb8062f9de.jpg)\r\n\r\n## How to create 3D launcher\r\nhttps://docs.microsoft.com/en-us/windows/mixed-reality/implementing-3d-app-launchers\r\n\r\n### Summary\r\n1. Add .glb file to the Asset folder in VS, set the \'Content\' as \'True\'\r\n2. Edit appx manifest file, replace two areas with below:\r\n\r\n```\r\nXML Namespace area:\r\n<Package xmlns:mp=""http://schemas.microsoft.com/appx/2014/phone/manifest"" xmlns:uap=""http://schemas.microsoft.com/appx/manifest/uap/windows10"" xmlns:uap2=""http://schemas.microsoft.com/appx/manifest/uap/windows10/2"" xmlns:uap5=""http://schemas.microsoft.com/appx/manifest/uap/windows10/5"" xmlns:uap6=""http://schemas.microsoft.com/appx/manifest/uap/windows10/6"" xmlns=""http://schemas.microsoft.com/appx/manifest/foundation/windows10"" IgnorableNamespaces=""uap uap2 uap5 uap6 mp"">\r\n\r\nDefault Tile area:\r\n        <uap:DefaultTile ShortName=""MixedRealityToolkit"" Wide310x150Logo=""Assets\\Wide310x150Logo.png"" Square310x310Logo=""Assets\\LargeTile.png"" Square71x71Logo=""Assets\\SmallTile.png"">\r\n          <uap5:MixedRealityModel Path=""Assets\\MRTK_Logo.glb"">\r\n          <uap6:SpatialBoundingBox  Center=""0.5,0.5,0.5"" Extents=""0.5,0.5,0.5"" />\r\n          </uap5:MixedRealityModel>\r\n        </uap:DefaultTile>\r\n```\r\n'"
470358383,5377,"b'Homepage README edits, move getting started higher'",b'Our README intro was a bit wordy so I tried tightening it up a bit. Also moved the getting started table above the fold so people can see it without scrolling\r\n'
470187090,5374,b'modify BaseCursor to better handle swapping between pointers',"b""## Overview\r\n\r\nWe mostly handle cursor management on our own, and use a single cursor instance which gets passed around to whatever pointer is active at a given time. This was causing some problems as some of the cursor code assumes a pretty strong pairing between cursor and pointer, so I've made some changes to hopefully make it a little more flexible without any detrimental effects on the normal usage.\r\n\r\n## Changes\r\n1. Various pointer/cursor null-checks so things don't break when they are detached from one another.\r\n2. Make visibleSourcesCount and SourceDownIds refresh at certain points so that they don't get out-of-sync if the cursor missed some source state events."""
470177271,5373,"b""break out BaseCursor's target lerp functionality to make it accesible to derived classes""","b""## Overview\r\n\r\nWe override UpdateCursorTransform in some of our custom cursor classes, and I wanted to be able to use the lerp functionality of the BaseCursor class without having to duplicate it. It's a pretty small change, and we can workaround it easily enough if it's not generally useful (but I thought it might be at least).\r\n\r\n"""
470119601,5372,b'Turn off hand ray visuals if hands not facing you / interaction is not enabled',"b""## Overview\r\nThe hand ray / line pointer should not be visible when IsInteractionEnabled == false, otherwise it looks to the user like he/she can manipulation content with rays when she cannot. For example, when hands are facing the user, we set IsInteractionEnabled to false to avoid users grabbing things unintentionally.\r\n\r\nThis change fixes the LinePointer and ShellPointer code to not render lines when IsInteractionEnabled == false.\r\n\r\n## Changes\r\n* Fixes: #4377 \r\n* Don't render line if !InteractionEnabled\r\n* Refactor ShellRayPointer to take advantage of inheritance. Previous code was just a copy/paste of base classes.\r\n* Improve readability by reducing extra lines / logic and moving variable declaration closer to variable use\r\n\r\n## Verification\r\n* Tested in editor\r\n* Not yet tested on device (need to test on HL2)"""
470110085,5371,b'Update spatial awareness documentation',"b'## Overview\r\nThis change updates documentation for the spatial awareness system and mesh observer. \r\n\r\n- Updates profile images to match latest inspector UI\r\n- Cleans up sentences and markdown\r\n- Fixes ""notes"" into correctly marked Note section that look much nicer\r\n- Updates link for MeshObserverProfile doclink to correct page\r\n- Update to ""Supported Platform(s)"" text to try to be more explicit\r\n\r\n## Changes\r\n- Fixes: #4985 \r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
470084882,5370,b'Adds the MixedRealityToolkit.Tools folder and package.',"b'There are a number of features currently in the the MixedRealityToolkit folder that are useful at editor and build time, but are otherwise never going to be shipping with the final application. For example, the screenshot utility is incredibly useful for people who want to take screenshots of their features (useful for MRTK devs especially!) but otherwise is a bit odd to have directly in the MRTK ""core"" folder, because it\'s not really a core part of a consumer\'s development process.\r\n\r\nThis change spawns a new folder to put these things in (MixedRealityToolkit.Tools) where we can place features (especially ones that are editor-only) that accrue value during the development cycle (or could just generally be useful tools even outside of the MRTK, but due to repo/CI resourcing we\'re currently putting them in here), but otherwise don\'t ship with the app itself.\r\n\r\nNote that this change doesn\'t move EVERYTHING over (for example, the BuildWindow tool is still left inside the core part because there is some history there and it would be some degree of a ""package"" breaking change to move that over.)\r\n\r\nThis change also adds the new MixedRealityToolkit.Tools.nuget package, along with the corresponding MixedRealityToolkit.Tools.unitypackage\r\n\r\n## Notes for reviewers:\r\n\r\nI would love to get feedback on the naming and the general principles behind this move. This is somewhat of a reaction to how some helpful but perhaps not ""core"" utilities have made their way into the core folders of the MRTK (especially ones that seem like they could be generally useful for Unity development).\r\n\r\nI would also appreciate feedback on whether or not this SHOULD be a different package, or if people think we should continue to bundle things up in the .Foundation package to:\r\n\r\n1) Reduce the mental overhead of having another package.\r\n2) Reduce the cost of also having to update the existing tutorials and such.\r\n\r\nI think the answer is ""no"" because consumers should be able to take just the code needed to build what they want, and then use our tooling and import that if they want (obviously the existing foundation package is already fairly large, so the idea here is we want to not grow it in ways that diverge from our philosophies)'"
470042215,5369,b'Fix GazeProvider.GazeTarget being null when hands are active',"b""## Overview\r\nSeveral components like StabilizationPlaneModifier and apps that want to know where user is looking rely on GazeProvider.GazeTarget (and other raycast info) to be filled in even when gaze is not the primary input. The Input System had special-cased gaze provider for this reason, but wasn't actually filling in the hit data if gaze wasn't active.\r\n\r\nThis change actually fills in the hit data so that the gaze result is not null when hands / other controllers are up.\r\n\r\n## Breaking Change\r\nIf you were relying on GazeProvider.GazeTarget == null to determine if gaze input is active, you should now instead use GazeProvider.Pointer.IsInteractionEnabled.\r\n\r\n## Changes\r\n- Fixes: #5252 \r\n- Added test to validate fix\r\n"""
470011885,5368,b'Adding pointerclickhandler to docs',"b'## Overview\r\nFinal fix for updating docs to deprecated component\r\n\r\n## Changes\r\n- Fixes: #5251 \r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
469929197,5367,b'Fix GettingStarted page',"b'Remove slashes to get images & url working correctly\r\n\r\nRemoves front slash on all urls (both images & hyperlinks)\r\n\r\nNeeds to be merged soon...currently looks like crap here:\r\nhttps://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/GettingStartedWithTheMRTK.html\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
469923516,5366,b'Deprecate unused scripts',"b""## Overview\r\n\r\nThis change is deprecating unused scripts in MRTK, particularly Examples scene helper monobehaviors that are no longer in use (rotate cube, etc).\r\n\r\nTwo other minor adjustments include in this change:\r\n- Updated meta files for MRTK editor icons\r\n- Moved StandardShader utilities under (Assets/MRTK/Utilities) to their own folder\r\n\r\nList of scripts targeted for deprecation:\r\nDemoTouchButton.cs\r\nGrabTouchExample.cs\r\nToggleBoundingBox.cs\r\nGazeHandHelper.cs\r\nInteractableHighlight.cs\r\nButtonBackgroundSize.cs\r\nButtonBackgroundSizeGizmo.cs\r\nButtonBackgroundSizeOffset.cs\r\nGrabReleaseDetector.cs\r\nOnSelectVisualizerInputController.cs\r\nKeepFacingCamera.cs\r\nKeepThisAlive.cs\r\nStatusText.cs\r\n\r\n## Changes\r\n- Fixes: #5365 \r\n\r\n## Verification\r\n\r\nAssets identified as unused via 3 methods:\r\n1) Dependency window see's no dependency via YAML analysis\r\n2) Find all References in Visual Studio yields no results\r\n3) Search all text for the class name yields no results\r\n\r\nTODO: Run EyeTracking example scenes on device\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
469904321,5364,b'Compute correct hostTransform position when rotating with one hand.',"b'## Overview\r\n\r\nThe host object position with one-handed near interaction was computed incorrectly, leading to the object drifting off the grab point when rotating.\r\n\r\nThe host position `P_h` should be computed such that the GrabPoint `P_g` of the controller stays fixed in space. For that purpose the _initial_ grab point (at the start of the manipulation) is computed in local host space:\r\n\r\n```\r\nL_g = R_h^T * (P_g - P_h)\r\n```\r\n\r\nwhere `R_h^T` is the inverse host rotation. The local grab point `L_g` is constant during manipulation, since we want the object to remain grabbed in the same place.\r\n\r\nDuring manipulation the host rotation `R_h` is computed first. To then get the world space position `P_h` of the host can use the given world space grab point:\r\n\r\n```\r\n    P_g = R_h * L_g + P_h\r\n<=> P_h = P_g - R_h * L_g\r\n```\r\n\r\n## Changes\r\n- Fixes: #4126 .\r\n\r\n\r\n## Verification\r\nMake sure that existing manipulation tests still work or are update where needed.'"
469784516,5362,b'[Docs] Updated infographic for the MRTK Architecture',b'## Overview\r\nUpdated architecture infographic image.\r\n\r\n## Preview\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_ArchitectureDiagram/Documentation/Architecture/Overview.md\r\n\r\nUpdated image file:\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_ArchitectureDiagram/Documentation/Images/Architecture/MRTK_Architecture.png\r\n\r\n## Before & After\r\n![2019-07-18 22_47_13-Architecture overview _ Mixed Reality Toolkit Documentation](https://user-images.githubusercontent.com/13754172/61463053-9f170380-a9ae-11e9-9d66-d3e0e0e1fe46.png)\r\n\r\n![2019-07-18 22_54_22-2019-07-18 22_47_13-Architecture overview _ Mixed Reality Toolkit Documentation](https://user-images.githubusercontent.com/13754172/61463279-059c2180-a9af-11e9-81b7-0cfad4efa6ee.png)\r\n\r\n\r\n\r\n'
469729757,5361,b'Fix build failure due to empty scene paths',"b'## Overview\r\n\r\nThere are occasions where the EditorBuildSettings enumerates all scenes, regardless whether they are missing or not. In that case the scene is reported as enabled, though has an empty path. The build process later fails, as is cant\' find the scene at `""""`. Therefore better be safe than sorry and filter out scenes that have an empty path.'"
469720225,5360,b'Add Platform Toolset switch to Build Window',"b'## Overview\r\n\r\nThe project solution produced by the Unity build step always targets Platform Toolset v141 (Visual Studio 2017), regardless of Visual Studio Version Build Settings or whether Visual Studio 2017 or 2019 is installed. Build failures arise, when there is no Platform Toolset v141 installed, i.e. only Visual Studio 2019 has been installed. \r\n\r\nThis issue has been reported already to Unity : https://issuetracker.unity3d.com/issues/uwp-building-project-for-visual-studio-2019-generates-solution-that-targets-build-tools-for-vs-2017-tool-set-v141\r\n\r\nAttempts to figure out whether Platform Toolset v141 is installed seem to be non-trivial. For the time being, a convenience workaround is to override the Platform Toolset when invoking MSBuild. For the user this override is exposed as Appx Build Option in the Build Window. It defaults to Platform Toolset v141, but lets the user choose to override it to v142 in case v141 is not installed.'"
469717512,5359,b'Fixes on constraints of one hand rotation + tests',"b""## Overview\r\n- moved constraint calculation so it can be applied to all rotation modes\r\n- fixed constraint calculation so original rotation is maintained (and not set to 0 like it was before)\r\n- added caching of original rotation for constraints so objects wouldn't slowly drift of hand\r\n- added tests for checking one hand rotation with and without constraints\r\n- added rotate method for test hand / test utilities\r\n\r\n## Changes\r\n- Fixes: #5305 \r\n\r\n\r\n## Verification\r\n- editor hand simulation\r\n- WMR (far and near)\r\n- HL2\r\n- unit test"""
469715036,5358,b'Replace explicit hand animation step numbers with a central definition.',"b'## Overview\r\n\r\nHand movement in tests is currently done with explicit frame step numbers in every test. Each test has its own definition for the number of tests, some running with lower numbers to decrease overall test run time.\r\n\r\nThis change adds a few central hand move step numbers in the PlayModeTestUtilities for fast/slow/default movement. The default is lower when run in batch mode to speed up test runs.\r\n\r\n## Verification\r\nMake sure tests pass both locally and on CI (use the -batchmode argument to run CI-like tests locally).'"
469714827,5357,b'Add support for .msix package files',"b""## Overview\r\n\r\nThe build pipeline sometimes produces `.msix` or `.msixbundle` package files instead of `.appx`. When trying to deploy those packages they're obviously not found by the MRTK deploy pipeline."""
469699643,5356,b'Let vswhere find the path for msbuild',"b'## Overview\r\n \r\nUse the `vswhere` to find the MSBuild path (as recommended by themselves: https://github.com/microsoft/vswhere/wiki/Find-MSBuild), instead of trying to build the path ourselves.\r\n\r\n\r\n## Changes\r\n- Fixes: #5114.\r\n'"
469544587,5354,b'Add script to run playmode tests from powershell',"b'## Overview\r\nSometimes tests that pass in the Unity editor fail when run from console (in headless, batch mode). Finding the command to run this is possible, but not necessarily easy. Provide a script that runs the playmode tests locally, parses results, and provides a simple output (number passed, failed tests, and list failed tests).\r\n\r\n## Changes\r\n- Fixes: #5353\r\n- Fixes: #5317 \r\n- Add docs for how to run the test\r\n- Change title of tests page to hopefully make the page easier to find from search engine.\r\n'"
469496094,5352,b'Reserialize metas',"b'## Overview\r\nThis change reserializes our metas via 2018.4. Updating our serialization will help reduce errant, seemingly unrelated changes in both PRs into this project and other projects that consume the MRTK via source / unitypackage.\r\n\r\nFor the most part, these changes are just the removal of stale `timeCreated` and `licenseType` info, which are no longer included in meta files.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/61418502-94297980-a8af-11e9-9609-ff562ea33ced.png)\r\n\r\n## Changes\r\n- Part of #4914'"
469433048,5351,"b'Update the assert text to be more helpful, and update the doccomments of the focus handler interfaces.'","b""I was spending time updating the Periodic Table app from RC2 -> GA, and while mostly things were working, I noticed that this assert was firing (it was added after RC2.1) pretty much every time you had a near pointer around the molecule object. It turns out, there's an issue in the heirarchy of the app itself that leads to this issue, but I was initially super confused about this, since this assert seems bad, but there's really not that much guidance on how to fix it and what's wrong.\r\n\r\nTo that end, I've updated the assert to suggest where to look (i.e. the common case) and also updated the doccomments associated with the corresponding interfaces to provide more information about both state transition mechanics, and also the general warning to be careful about having different nesting mechanics and pitfalls"""
469430023,5350,b'Fix a broken link/non-formatted section',"b""Looking at this page, it seems like the link wasn't actually being formatted because it was too close to the sun (the image preceding it).\r\n\r\nAdding another line in there makes it actually render the link and be all good."""
469421364,5349,b'Remove an unused meta file',b'The folder was deleted but the .meta file was not cleaned up.'
469383758,5347,b'[Docs] Update tool documentation',"b'## Overview\r\n\r\nThis change organizes the tools for greater discover-ability on the main MRTK docs page.\r\n\r\n- Adds new icon assets for tools (Thanks @cre8ivepark for the awesome stuff!)\r\n- Adds Tools table to MRTK readme as well as GettingStarted page\r\n- Move input recording docs to Utilities grouping in TOC\r\n- Updates dependency window to be a ""SceneView"" window for quick docking as well as adds a tooltip to the unreferenced list tab as a disclaimer that some asset types are auto-excluded. FYI @Cameron-Micka \r\n- Fixes sizing difference of shade stats screenshot used in PerfGettingStarted\r\n\r\nThanks to @cre8ivepark for the awesome assets! Thanks to @Cameron-Micka  and @lukastoenneMS  for the related tools & documentation!\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/61402647-6a109100-a888-11e9-9ce9-d9a109f1f6e5.png)\r\n\r\nHovering over the added line includes a tooltip:\r\n![image](https://user-images.githubusercontent.com/25975362/61402843-cc699180-a888-11e9-9289-253cc7bf16c7.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #5346 \r\n\r\nRelated #5136 - The release readme does not need to be updated at this time. The related PR should not be blocked by this one if desired.\r\n\r\n## Verification\r\n\r\n'"
469349000,5345,b'Update the unitypackage.ps1 to actually build the examples package.',"b'I was looking at the output from the latest CI runs, and while there was the presence of the Foundation unity package, the examples package was missing:\r\n\r\nIt turns out, this exit statement was too aggressive, and was leading to us only building the Foundation package. Now we will only early exit in the case of failure.\r\n\r\n'"
469348624,5344,b'Update the configuration guide to remove references to things coming soon.',"b""The doc contains a lot of references to things that are coming soon, and while we have items in the backlog to improve these, not all of these are going to be coming in the immediate future. It's misleading and confidence-draining to see things always listed as coming soon, so it's better to have our docs just say what the current state of things are."""
469334837,5343,b'Added ability for Pointers to raise IMixedRealityInputActionHandler events',"b'# Overview\r\n\r\nThis PR addresses #5342.\r\n\r\n## Changes\r\n- Created OnPointerDownWithActionEventHandler and OnPointerUpWithActionEventHandler\r\n- Modified RaisePointerDown and RaisePointerUp to call the methods above if an input action is present\r\n\r\n\r\n## Verification\r\nI am unclear on the need for HandlePointerEvent vs just HandleEvent. HandlePointerEvent was specifically requiring IMixedRealityPointerHandler but did not do anything with that specific interface. The implementation of HandlePointerEvent looks nearly identical to HandleEvent. I did leave HandlePointerEvent in there but just changed it to accept IEventSystemHandler as this was required in order to be able to accept an IMixedRealityInputActionHandler. Everything seems to be functioning, but please validate this approach. It would be good to validate if we even need a separate HandlePointerEvent, and if not just collapse it into HandleEvent.\r\n'"
469181925,5341,b'Example scene polish cleanup',b'## Overview\r\nUpdated HandInteractionExamples scene.\r\n- Fixed Round Button movement for the far interaction\r\n- Fixed Piano key movement for the far interaction\r\n- Updated outdated text labels\r\n- Added WorldAnchor to the SceneContent object for stability (@Troy-Ferrell )\r\n- Added audio feedback to the Unity UI examples\r\n- Renamed HolographicButton.prefab as RecordButton.prefab. It is ET demo specific button. HolographicButton was HoloLens 1 button from HTK. \r\n\r\n## Changes\r\n- Fixes: #5164 and #4950 and #4280\r\n\r\n![2019-07-17 22_00_35-Unity 2018 4 2f1 Personal - HandInteractionExamples unity - MRTK-GitHub - Univer](https://user-images.githubusercontent.com/13754172/61377549-63146d80-a8de-11e9-989e-9ab9e2ea3cf9.png)\r\n\r\n'
469132803,5339,b'Add a secondary radius to the SpherePointer to disable far interaction earlier',"b'## Overview\r\n\r\nThere is supposed to be a ""dead zone"" between disabling the far interaction and enabling (grabbable) near interaction with the SpherePointer. Previously there was a hardcoded margin in the IsNearObject function which has been removed, as well as a significantly larger base SphereCastRadius.\r\n\r\nIntroducing a configurable NearObjectMargin property adds back the dead zone, while keeping the SphereCastRadius at the desired smaller value (0.05m).\r\n\r\nAlso added a test to make sure the distance values work as expected.\r\n\r\n## Changes\r\n- Fixes: #5240 .\r\n'"
469112651,5338,b'Make BaseInputHandler.Update virtual',b'Fixes: #5331 '
469040436,5336,"b'Slate Tests and HandInteractionPanZoom API, functionality fixes'","b'## Overview\r\nAdd tests for HandInteractionPanZoom (HIPZ) class, and move some files / make fixes to HandInteractionPanZoom that were uncovered while writing the tests.\r\n\r\n## Changes\r\n- Fixes: #4727\r\n\r\nI also made several additional changes / fixes for issues I found while writing these tests:\r\n* Remove class `HandInteractionPan`. As far as I could tell this was just a copy/paste of HandInteractionPanZoom with the zooming feature removed. The class was not used anywhere.\r\n* Remove IMRHandPanHandler interface and have HIPZ use UnityEvents for pan started, updated, ended. I did this because needing to implement IMRHandPanHandler to listen for events was tedious when writing tests / wanting to instantiate and configure in code, and because the HIPZ implementation required manually filling in an array of ""listener"" objects. The UnityEvent is a pattern we are already using in other classes like ManipulationHandler.\r\n* Rename PanEventData.PanPosition to _PanDelta_, since the value is actually a delta, not an absolute (was quite confusing while I was writing the tests).\r\n* Move RotateWithPan into SDK folder and update to use new events. It is not being used in any examples but actually is quite useful for quickly looking up pan interactions object transforms. \r\n* Found a few null pointer bugs when instantiating HIPZ from code.\r\n* Updated namespaces as I moved files\r\n* Remove extra InteractionReceiver meta file I found lingering.\r\n\r\n## Breaking Changes\r\n* `HandInteractionPan` class removed, see above. Replace with HandInteractionPanZoom, with zooming disabled. All examples already do this, as does the slate prefab.\r\n![image](https://user-images.githubusercontent.com/168492/61408066-0a1fe780-a894-11e9-8d69-5844a4e7a3fd.png)\r\n\r\n* `IMixedRealityHandPanHandler` class is removed. To listen for pan started, updated, ended events, listen for the Unity events PanStarted, PanStopped, and PanUpdated.\r\n![image](https://user-images.githubusercontent.com/168492/61408114-29b71000-a894-11e9-87a2-b4d3194e59c4.png)\r\n\r\n* PanEventData.PanPosition renamed to PanEventData.PanDelta\r\n\r\n## Verification\r\n* All playmode tests pass\r\n* Ensure slate example and hand scene work correctly in Editor\r\n'"
469028600,5334,b'Meta Removal',b'I guess Will forgot to remove the meta along with the InteractionReceiver.cs'
468998977,5333,b'Clean example scenes for Depth LSR support',"b'## Overview\r\n\r\nHigh-Level changes:\r\n- Make all example scenes & any related assets Depth LSR supported\r\n- Convert text to TextMeshPro where appropriate\r\n- Convert all uses of Unity Standard Shader to MRTK Standard Shader\r\n\r\nIt is a lot of files in this change and looks like a lot. But the changes themselves are simple (i.e switching material shader from Unity to MRTK, turning off realtime global illumination, etc)\r\n\r\nDetails:\r\n- updated scenes to use textmeshpro & updated related scripts for TMP when outputting text\r\n- Updated some textmesh components to have opaque panels so info can be stable with depth LSR\r\n- Update Text3DShader for TextMeshs to use ZWrite On & CullMode default Off (textmeshes are usually flat planes and if behind text, generally still want to see it - i.e on a 3D transparent slate)\r\n- Updated Text3DSelawik* materials to use cullmode off\r\n- Updated asmdef for MRTK Examples to utilize TextMeshPro so as to access library in scripts\r\n- Changed Gesture scene material from Unity Standard Shader to MRTK standard\r\n- Updated piano.prefab to use TextMeshPro\r\n- Updated PanelBorder* transparent materials used in Material example scenes to ZWrite to depth @Cameron-Micka \r\n- Updated Placard Prefab textmesh to write to depth\r\n- Updated SceneDescriptionPanel.prefab & EyeTrackingDemos_SceneDescriptionPanel.prefab to have parent canvas width/height equal to 1 (this makes it less annoying to select objects in scene) as well as add canvasutility\r\n- Updated Mars Rover Materials from Unity Standard shader to MRTK standard shader\r\n- Disabled Realtime Global Illumination for all examples scenes (even with low quality settings we have seen computation impact)\r\n- Fixed PrimaryPointerExample to have material on CursorHighlight object (was rendering pink)\r\n- Fixed scene description panel in InspectorFieldsExample scene due to odd rich text issues\r\n- Deleted standard shader materials in ManipulationHandlerExample scene and used standard asset MRTK materials\r\n- Fixed ObjectCollectionExample scene to not use default material Unity Standard shader but standard asset MRTK material\r\n- Updated LinesExample scene to use latest particle unlit shader instead of legacy shader\r\n\r\n## Changes\r\n- Fixes: #5332 \r\n\r\n## Verification\r\nVerified in editor for key, changed scenes\r\nTODO: Need to run HandInteractionExamples scene on device\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
468926313,5330,b'Update the IMixedRealityRaycastProvider to support custom graphics raycast functionality',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4917\r\n\r\nThis change adds an extension point to the IMixedRealityRaycastProvider to allow for customizing how the GraphicsRaycast works. This allows for clients to customize the priority order of raycast results.\r\n\r\nThe goal here was to make it possible for clients to change the order of RaycastResultComparer::Comparers, so the changes involved:\r\n\r\n1) Adding the GraphicsRaycast function to IMixedRealityRaycastProvider.\r\n2) Updating RaycastResultComparer's Comparers comparison functions so that they can be referenced in subclasses.\r\n3) Updating the default implementation to do exactly what it does today.\r\n\r\nNote that in theory it would be possible to accomplish this by just doing #1 (this would require callers to do a bunch of duplicated work, so I opted to do #2 as well)"""
468867660,5328,b'adding link to the dependency window doc',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
468794131,5327,b'Remove unused InteractionReceiver.cs',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5139\r\n\r\nSee the issue for more background - this file was added a long time ago with the hopes that it would evolve into a more useful example for how to handle input. In its current state it doesn't work, and it doesn't have docs or any other references."""
468535441,5325,b'Remover pointerclickhandler',"b'## Overview\r\n\r\nRemove the PointerClickHandler class, PointerHandler should be used instead.\r\n\r\n## Changes\r\n- Fixes: #5251 .\r\n'"
468510833,5324,b'Move scripts ToggleFeaturePanel depends on into SDK folder',b'## Overview\r\n- Fixes: #5253\r\n\r\n\r\n## Verification\r\n* Playmode tests pass\r\n* Default scene works'
468433065,5322,b'Deprecate pointer click handler',"b'## Overview\r\nPointerClickHandler has been superseded by PointerHandler. This change deprecates PointerClickHandler by marking it obsolete, removing the inspector class, and fixing any MRTK references. Also logs an error on awake to make it easy for developers to recognize deprecation.\r\n\r\n## Changes\r\n- Fixes: #5251 \r\n\r\n## Verification\r\nUsed dependency window and find all references and cntrl+F find'"
468426168,5321,b'Interactable scene & inspector updates',"b'## Overview\r\n\r\nThis change does two primary things:\r\n1) Modifies interactable inspector to be visually more in line with other components in Unity (see details below)\r\n2) Fix interactables example scene\r\n\r\n**Inspector changes:**\r\n-> Added documentation link and goes to interactable readme\r\n-> Converted existing ""box"" style to helpbox style which matches Unity and MRTK profiles\r\n-> Removed redundant title of profile target (i.e gameobject being targeted) and just left target property field\r\n-> Reduced amount of indentation, also cleaned up indent usage in code\r\n-> Updated Events title to be a section foldout so we can hide long lists of receivers\r\n-> Changed ""Interactable"" title to ""General"" since ""Interactable"" label is already listed right above for the component and thus reduces redundancy\r\n-> Removed dividers from interactable sections...dividers suggest different component\r\n-> Removed States foldout to simplify code & design\r\n\r\n**Scene changes:**\r\n-> Square toggle button had input action set to ""menu"" which didn\'t work. It would never toggle. Reverting back to prefab default of ""select"" made it function again \r\n-> Bucky ball didn\'t perform anything in it\'s rotation theme profile. Added easing & rotation values on focus/press\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/61487072-ce4f5580-a959-11e9-89a7-8309f468649c.png)\r\n\r\n## Changes\r\n- Fixes: #5320 \r\nRelated: #4943 \r\n\r\n## Verification\r\nTested InteractablesExamples scene'"
468394739,5319,b'Improve configuration checking by MRTK',"b'## Overview\r\nThis change improves notifying the user of non-recommended settings currently configured in the developer\'s unity project. In particular the focus is on Single Pass Instanced rendering which has been shown to have tremendous performance increases for XR projects and should be pushed as the default configuration.\r\nhttps://blogs.unity3d.com/2017/11/21/how-to-maximize-ar-and-vr-performance-with-advanced-stereo-rendering/\r\n\r\n- Added listener to MixedRealityEditorSettings to check for when play mode is entered. When this happens, the system will check if certain configurations have not been set and alert user via warnings (see screenshot). This warning & check logic is only in editor\r\n\r\n- Added preference for user to decide whether to run configuration check or not (see screenshot)\r\n\r\n- Updated the settings prompt to also check for single pass instanced to be default rendering path if user accepts. I did not add enable depth buffer sharing because this should be default for new unity projects. Furthermore, enabling depth buffer sharing can have problematic outcomes on Hololens if data is not written to depth compared to single pass instancing (which only affects custom shaders potentially). \r\n\r\n- Fixed MixedRealityEditorSettings to use correct ignore prompt preferences key. Item was duplicated and broken between the preferences window and if the user clicked ""ignore"" button the prompt. The keys were not matching. I have updated the preference window (MixedRealityPreferences.cs) to use ""_MixedRealityToolkit_Editor_IgnoreSettingsPrompts"" with the underscore since it is more likely users have hit the ignore button via the prompt then gone into preferences project settings window. \r\n\r\n- Also moved MixedRealityPreferences to utilities/editor package so it can be utilized across project and thus had to make class public\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/61257777-58fc3e80-a727-11e9-8552-2c812b785613.png)\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/61257790-631e3d00-a727-11e9-9cb6-4d256fbfc37f.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #4941 , #2860\r\nRelated: #1939 \r\n\r\n## Verification\r\nEnter play mode with various settings off and notice warnings logged\r\nTurn off preference in project settings, note warnings are not filed on re-run of above'"
468393987,5318,b'Adding interactable diagrams.',"b'## Overview\r\nI was asked to review these two diagrams and verify that they are up-to-date.\r\nhttps://user-images.githubusercontent.com/22085553/37225790-9e23938e-238c-11e8-81a0-2b48661a3938.jpg\r\n\r\nhttps://user-images.githubusercontent.com/22085553/37225808-afa6a7cc-238c-11e8-9cc2-fbd5dd7e3656.jpg\r\n\r\nThey do not reflect the latest, so I updated them and added them to the Documentation/Images/Interactable directory.\r\n'"
468290021,5313,b'Fixes MRTK inspector setting active instance when selected instance is disabled',"b'## Overview\r\n- Fixes: #5277\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
468222150,5311,b'Reintroduce .unitypackage building into our build system',"b'Build.ps1 has been out of commission for a while now, and building .unitypackages has been a manual step for us prior to release.\r\n\r\nThis change removes build.ps1 and moves some of its functionality into a script that is just designed to do .unitypackages, and in a way that is also compatible with the way the rest of our pipelines work now.\r\n\r\nThis also updates our CI pipeline (not PR pipeline) to generate .unitypackage artifacts in the build (the Foundation and Examples package)'"
468164932,5309,b'Add min/max scaling values to ManipulationHandler',"b'## Overview\r\nRepurpose min/max scaling in `BoundingBox` to use in the `ManipulationHandler`. Objects with a manipulation handler now have minimum and maximum scale values.\r\n\r\n## Changes\r\n- Fixes: #4436.\r\n- Adds `TransformHelper`, intended to allow for sharing of utilities and transform functionality between `BoundingBox` and `ManipulationHandler`.\r\n  - Implemented as a MonoBehaviour, ensured by both `BoundingBox` and `ManipulationHandler`.\r\n  - Currently only implements shared scaling functionality.\r\n- Change `BoundingBox` to use `TransformHelper`.\r\n- Use min/max scaling and `TransformHelper` in `ManipulationHandler`\r\n- Add tests for min/max scaling'"
468090570,5308,b'Mrtk Interactable Update before first frame',"b'## Overview\r\nSpawning the PressableButtonHoloLens2 into the scene at runtime led to a short flicker caused by the SeeItSayItLabel being visible during the first frame. This is caused by the button updating its internal state the first time during Update, missing out Start.\r\n\r\nThis fix updates the internal State on Start, letting the Button appear smoothly.'"
468018832,5307,b'BoundingBox now correctly calculates bounds',"b""## Overview\r\nThe BoundingBox had a couple of issues with calculating its bounds that this pull request adresses:\r\n\r\n1. It only considered its own, or the first descendant's bounds for the calculation\r\n\r\nThis led to the box never really spanning across all objects.\r\nNow, the BoundingBox wraps the whole hierarchy.\r\n\r\n2. Calculations were based on Renderer bounds\r\n\r\nThose bounds are in world space and therefore not ideal for the calculation of the bounds of a rotated object. The pull request assumes the box stays aligned with the Gameobject the script is attached to and only calculates bounds from MeshRenderer.sharedMesh or Colliders, for which local space variants exist in the BoundsExtensions class.\r\n\r\n3. Bounds were calculated by some predefined order of component appearance\r\n\r\nThe user now can choose between 4 options of how he wants to get the box calculated:\r\n\r\n- RendererOverCollider\r\n- ColliderOverRenderer\r\n- ColliderOnly\r\n- RendererOnly\r\n\r\nMotivation for this change came from the old MRDL BoundingBox, which transferred objects corner points into the space of the boundingbox parent, resulting in a perfect box wrapping everything\r\n\r\nNote, the previous implementation was broken, meaning, all other Renderer calculations were broken anyway, so if necessary, other Renderer bounds calculation need to be added if necessary\r\n\r\n## Fixes\r\n#5111 #5307"""
467700679,5306,b'Fix documentation link for service extension wizard',"b'## Overview\r\nChange link to documentation page dedicated to service extension wizard\r\n\r\n## Changes\r\n- Fixes: #4740 \r\n\r\n## Verification\r\nClicked the button, new url\r\n'"
467615828,5303,b'Clipping Examples Scene',"b""## Overview\r\n\r\nMany developers have expressed interest in clipping their meshes but are unaware of what is already possible with the MRTK/Standard shader in conjunction with clipping primitives. The scene in this pull request, called **ClippingExamples**, shows how the MRTK/Standard shader in conjunction with clipping primitives (ClippingPlane, ClippingSphere, & ClippingBox) can be used to dynamically clip pixels on a mesh.\r\n\r\n![Screenshot_2019-07-12_02-37-28-PM](https://user-images.githubusercontent.com/13305729/61160450-6231a500-a4b4-11e9-86aa-af5abec737f8.png)\r\n\r\nTry grabbing the sphere or box which a near or far interaction. Then move the sphere or box until it intersects with the heart. You will notice that any portions of the heart that intersect with the sphere or box will not be rendered.\r\n\r\n![ClipExample2](https://user-images.githubusercontent.com/13305729/61160634-09164100-a4b5-11e9-8e9a-3e2aaefeaa43.gif)\r\n\r\nThe heart model comes from [Microsoft's gallery on Remix3D](https://www.remix3d.com/details/G009SVN05LMF?section=other-models).\r\n\r\n@designnomad came up with the original idea to build a clipping example scene for developers. Thank you Hae Jin!\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5301\r\n\r\n## Verification\r\nOpen the ClippingExamples scene and try moving the clipping primitives. \r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
467614336,5302,b'Update the build scripts to produce Foundation and Examples .unitypackages.',"b""build.ps1 used to be used to do both nuget packing and unity package generation. It hasn't been used since we moved NuGet pack to the YAML pipelines themselves, the way it worked before anyways was by looking at the directory that nuspec files were in, which is not valid for packages like the Foundation one (which contains a number of other folders).\r\n\r\nThis change removes the old build.ps1 script in favor of having a script that is explicitly about building MRTK .unitypackage files. Inside you will find the configuration itself (i.e. the set of packages along with their corresponding folders)"""
467499214,5300,b'Add error logs on destroying event system with dangling listeners',"b""## Overview\r\n\r\nThis change has originally been triggered by #5116 to first of all ease test debugging, when test runtime environment is not clean after running another test.\r\nSo, the change should only have been messages in `BaseEventSystem`. However, adding these messages highlighted few fundamental issues:\r\n* Mrtk had incorrect order of deinitialization for core systems. They should be disabled and destroyed in a reverse order to how they are initialized. This PR fixes that.\r\n* Unregistering event handlers in unity `OnDestroy` is semantically incorrect: Mrtk tear down happens in the middle of `Update` loop, which Deinitializes and Destroys all global services. When components are then destroyed _in the end_ of the `Update` loop, they can't rely on valid state of services (e.g. Input System). Ideally we would like global listeners to go away in `OnDisable`. However, this would require to move their initialization to `OnEnable`, which is much trickier to do. Solved this by modifying `IMixedRealityCursor` interface. I don't like it, but it solves an issue."""
467418405,5298,b'added test for checking far interaction click on button',b'## Overview\r\nadded test for verifying triggering a button with far interaction\r\n\r\n## Changes\r\n- part of  #4728 \r\n\r\n\r\n'
467342784,5297,b'fixed build - new import will cause conflight in Object usage',b'## Overview\r\nchange that got in between opening my last PR and completing caused compile error with new imports in test class\r\n\r\n## Changes\r\n- Fixes: build error'
467149833,5294,b'Add the link.xml in the Foundation NuGet package.',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4265\r\n\r\nSee the linked issue for more details about what we\'re doing here - this is being included as a convenience to NuGet consumers so that things just ""work out of the box"" and they don\'t have to define their own link.xml in order to avoid IL2CPP bytecode stripping\r\n'"
467142226,5292,b'Service locator service iterator stability',"b'It was pointed out in #4289 that the iterators used in the service locator are impacted by service collection changes during profile change at runtime.\r\n\r\nWhile reviewing #5268, this issue was encountered when loading a new scene when the scene service is enabled in the main configuration profile.\r\n\r\nThis change iterates over a copy of the collection instead of the live collection which protects from such changes.\r\n\r\nIt also updates the LateUpdateAllServices to match the other methods (ex: UpdateAllServices) by calling ExecuteOnAllServices instead of using a near identical implementation.'"
467122684,5291,b'Clipping Primitive Fixes',"b'## Overview\r\n\r\nThe pull request address a few issues around clipping primitives.\r\n\r\n1) Clipping primitives can now be toggled on/off at runtime without requiring shader permutations to be know at (player) build time. This adds some extra shader permutation memory overhead, but is still quite small when considered against traditional 3D applications (games).\r\n\r\n2) Materials which are additive and lit are not clipped properly, before the lit portions of the material were not clipped. There is also a new property for non-opaque or cutout materials called **Blended Clipping Width** which allows developers to set the width of the clip blend region (before it was hardcoded to always be 1 meter in length).\r\n\r\n![Capture](https://user-images.githubusercontent.com/13305729/61087741-5fb74880-a3eb-11e9-839c-4e569057ba33.PNG)\r\n\r\n\r\n3) Clipping primitives can now be easily visualized in the editor which was a regression from https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4899\r\n\r\n4) Also removed some (lower) range constraints to aide with materials used on objects with tiny scales.\r\n\r\n![Clip](https://user-images.githubusercontent.com/13305729/61087424-7610d480-a3ea-11e9-9d34-152325790c44.gif)\r\n\r\n> From left to right opaque, additive, and transparent materials.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5239 https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5289 https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5290\r\n\r\n## Verification\r\nCheck out the MaterialGallery scene to determine if primitive clipping is still working.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
467076825,5288,"b'Add interface type to the ""null concrete type"" message in the service locator'","b'Recently, enhanced log messages were added to the service locator object to help developers better understand which service(s) were failing to register. This change adds the interface type name to the message regarding attempting to register a null instance.\r\n\r\nThis was hit by one of our customers who reached out to me with the issue,'"
467057752,5286,b'Move stand alone service managers to experimental namespace',b'This change updates the namespaces for the stand alone service implementations to help clarify that they are currently experimental and may experience significant change before they are finalized.'
467014118,5285,b'Add in the missing link.xml.meta',b'https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5274\r\n\r\nPrevious change forgot to include the .meta which gets generated by unity automagically'
467011195,5284,b'Update the MRTK NuGet packages to have only a Foundation and Examples package',"b""The current NuGet package count is somewhat of a reflection of the folder structure of the MRTK, and ultimately in order to build interesting things you need to have all four MRTK packages (i.e. Core, Providers, SDK, Services) in order to build anything interesting (for example, things in Examples). Rather than ship four packages that all must be included, we'll avoid the overhead of having to juggle four different things and just ship those as a single package.\r\n\r\nThis is basically a followup to:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/4387\r\n\r\nWhich the same thing (except there have been some asmdef changes since that was made, so the exact lines in the combined nuspec are a little different)\r\n\r\n**Also** includes a fixup to the licenseUrl section (master isn't a branch that's present, but mrkt_release is)"""
467011172,5283,b'Improve event [un]registration in spatial awareness demo',"b'The previous version of the spatial awareness demo event handler only modified registration in Start and OnDestroy, This change adds OnEnable and OnDestroy registration changes.'"
466730477,5281,b'Deletion of unused assets',"b""## Overview\r\nRemoving mostly materials and assets found with #5096 that aren't used in the eye-tracking scenes or related\r\n\r\nThanks again @Cameron-Micka \r\n\r\n## Changes\r\n- Fixes: #5279 \r\n\r\n## Verification\r\nRan eye-tracking scenes on device\r\n"""
466581625,5275,b'Fix the broken NuGet packages.',"b""Our NuGet packages have been broken due to this PR:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/4858\r\n\r\nWhich updated assembly names, but didn't also update the corresponding nuspec files to ensure that they would continue to get copied over.\r\n\r\nThankfully, there was also this pretty sweet migration guide which makes it super clear where things moved: https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/UpdatingToGA.html"""
466575049,5274,b'Add a link.xml to Assets to prevent critical MRTK components from getting optimized away in IL2CPP builds',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4265\r\n\r\nSee this comment in that issue for some more details on what happened here:\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/4265#issuecomment-510246866\r\n\r\nAlso, in case you were wondering how this was generated, these are the assemblies that are referenced in the default MRTK profiles (i.e. look for things of type ""SystemType"" and look at their corresponding references). In the long run this has to be more automated, as this was obviously a highly manual process. See this issue (https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5273) for more details on that.'"
466558546,5272,b'Make camera system initiate playspace parenting',"b""The camera system was previously not initiating the parenting of the camera to the playspace. This was being performed by most other services when they added a child object to the playspace transform.\r\n\r\nSince MRTK expects the camera to be parented to support features such as teleportation, the camera system should ensure proper hierarchy at runtime.\r\n\r\nSince the XR SDKs underlying our mixed reality support assume control over the camera's local position and not all platforms enforce the initial camera position be the origin (ex: Windows Mixed Reality uses the origin while OpenVR looks to be honoring the value set in the inspector).\r\n\r\nThis change adds a log warning that informs developers when the camera is not set to the origin at initialization of the camera system."""
466546828,5271,b'[Shell Parity] Proximity Light Shell Parity',"b'Tweaking proximity light behavior and parameters to closer match the shell.\r\n\r\nBelow this change is the proximity light in the Shell (left) and the MRTK (right).\r\n![CaptureBefore](https://user-images.githubusercontent.com/13305729/61008188-bd805d80-a323-11e9-895d-dab7c138c93f.PNG)\r\n\r\nAfter this change is the proximity light in the Shell (left) and the MRTK (right).\r\n\r\n![Capture](https://user-images.githubusercontent.com/13305729/61008226-d8eb6880-a323-11e9-9c9d-e1927dcd8539.PNG)\r\n\r\nNote, the colors were tuned as close as possible but the shell using a texture whereas the MRTK uses a 3 way color blend to allow for easy customization. The button border width was also adjusted to match the shell.  \r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5218\r\n\r\n## Verification\r\nTry pressing buttons in the Hand Interaction Examples scene.\r\n\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
466545967,5270,b'camera service manager: fix missing service type reference',b'The camera service manager prefab lost the reference to the concrete service type. this change repairs the issue.'
466513039,5268,b'Removes dependencies on individual service binaries from service inspectors',"b'## Overview\r\nService inspectors now work with service interfaces instead of concrete implementations.\r\n\r\nFor most inspectors this change was trivial. For `IMixedRealitySceneService` an optional `IMixedRealitySceneServiceEditor` interface was created for editor-only functionality used by the inspector.\r\n\r\n## Changes\r\n- Fixes: #4825\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
466443260,5267,b'Remove mesh specific event raising methods from spatial awareness system',"b""The spatial awareness system previously was exposing mesh specific methods to raise events to registered listeners. This is not a sustainable implementation in that future spatial observers will wish to raise events for other types of data (ex: planes, points).\r\n\r\nTo reduce the likelihood of future breaking changes / observer incompatibilities, this breaking change is being made,\r\n\r\n- Observers now no longer call a Raise<data>Added, etc methods on the spatial awareness system interface\r\n- Observers wishing to inform client code (should be all of them) will now call the spatial awareness system's HandleEvent method and provide the data and the delegate to call.\r\n- NO changes are required of existing client code.\r\n\r\nWhile working on this change, a race condition was discovered in the spatial awareness demo scene where, when using the model observer, events were not received. This has been resolved.\r\n\r\nTested using the spatial awareness demo scene running in editor and deployed to a HoloLens (viewing the event messages in the Visual Studio debugger)"""
466427307,5266,b'MRTK Demo Scene Loading Tests',"b""## Overview\r\nAdds a test to load and play HandInteractionExamples scene. Checks to ensure MRTK input system has been initialized.\r\n\r\nExperimented with adding scenes to build settings prior to build via IPreprocessBuild but was unsuccessful. Instead I've added the test scene to the default build settings.\r\n\r\n## Changes\r\n- Fixes: #5200\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
466414252,5265,b'Porting Oculus OpenVR fixes from XRTK to MRTK',"b'## Overview\r\nPorting over OpenVR fixes for the OculusTouch controllers, resolving controller mapping issues\r\n\r\n## Changes\r\n- Fixes: #5263\r\n\r\n\r\n'"
466412785,5264,b'New test for NearInteractionTouchables to make sure the poke distance\xe2\x80\xa6',"b""## Overview\r\n\r\nNew test for ensuring that touchable distance values behave as expected.\r\n\r\nThere is a lot of confusing behavior surrounding the touchables, see the <remarks> section above the test function. This behavior may be partly intentional or not, but i cannot tell because nothing is documented. I'm assuming here that the current state of the code is correct and made all the tests pass.\r\n\r\n## Changes\r\n- Fixes: #5238\r\n"""
466365842,5261,b'Fixed far interaction movement in ManipulationHandler',"b'## Overview\r\nManipulationhandler movement for both one and two hand far interaction would only take pointer position into account instead of the point where the pointer ray hits the object for grabbing.\r\n\r\n## Changes\r\n- Fixes: #4399 \r\n\r\n\r\n## Verification\r\n- added test for far interaction movement: moves cube 360 degree around player and makes sure the pointer ray stays on the same position on the cube\r\n- tested in editor hand simulation, far and near interaction\r\n- tested with WMR controllers far and near interaction\r\n- tested on Hololens 2 far and near interaction'"
466347147,5259,b'Add better velocity calculation for MR controllers and simulated hand',"b""## Overview\r\n\r\nFix is triggered by #4210 , which was, as it turned out, unrelated to `ManipulationHandler`.\r\nMR controllers were completely missing calculation of controller velocity and angular velocity on a per-frame basis.\r\nThis change adds velocity calculation to both MR articulated hands and MR controller. Velocity is calculated using several of last registered controller positions -- this doesn't increase CPU cost, but protects from jitter.  Old approach to velocity calculation was missing actual velocity change in most cases."""
466127206,5258,b'Clean glTF examples',b'## Overview\r\n\r\nThis change removes the boombox & lantern gltf files which account for almost a majority of the file size of the examples unitypackage. The boombox is not used at all as the glb example scene downloads the gltf via the web url. The lantern gltf has been replaced with a simpler duck one. \r\n\r\nThe gltf loading example scene also copies all the models into the streaming assets project folder with an onvalidate() call. The user has no knowledge of this. The editor inspector for this example scene now performs this actions with a button and debug information has been added to alert users that they need to put gltf files in streaming assets. \r\n\r\n## Changes\r\n- Fixes: #5256 \r\n\r\n## Verification\r\nThanks to @Cameron-Micka for his dependency window work. It helped me find these unused assets.\r\n'
465997418,5250,b'Fix motion controller not moving with teleportation on-device',"b'## Overview\r\nWhen using the platform motion controller models, they showed up in the wrong place on-device after teleportation.\r\n\r\nThis was because we transformed the poses for the explicit pointer and grip poses, but not for the source pose.'"
465985128,5249,b'Fix VisualProfilerControl.ToggleProfiler implementation',"b""The VisualProfilerControl script's ToggleProfiler method was toggling all diagnostics, rather than just the profiler. While today there is only a single diagnostic that is controlled by ToggleDiagnostics, in the future, it is anticipated that additional displays (ex: debug panel, individual control of the profiler's settings, etc) will be added."""
465865170,5248,b'Input recording gltf',"b'## Overview\r\n\r\nAdd export and import of input animation data to and from glTF files.\r\nThis supplements (and should ultimately replace) the custom binary format, and provides a standardized way to exchange recorded input data with other tools.\r\n\r\nA new set of utility classes has been added to serialize `InputAnimation` curves into a binary buffer suitable for glTF accessors. The existing GltfObject in MRTK is constructed with simple nodes that represent the camera and hand controllers. A matching importer finds matching nodes in any glTF file to try and interpret the animation data as MRTK input again.\r\n\r\nThe Unity JsonUtility class is not flexible enough to handle details of the glTF schema, such as minimum array length, or whether enums should be exported by name or by int value. For this reason an alternative JSON builder and parser pair has been added. These can handle JsonAttributes, which specify schema details as part of the C# reflection, so that the GltfObject can still be exported as ""structured JSON"".\r\n'"
465856969,5247,b'GGV cursor should track manipulation',"b""## Overview\r\nFor GGV input in HoloLens 1, currently, MRTK's pointer/cursor does not follow on tap-and-drag gesture movement (grab point for manipulation/navigation and BB handle) which is confusing (see [gifs here](https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5183#issue-463548348) as demonstration)\r\n\r\nIt appears as if the reason this behaviour is no longer working for GGV is because `InternalGazePointer.RaisePointerDown` and `InternalGazePointer.RaisePointerUp` never appear to be called. The reason for this can be seen in `GazeProvider.OnInputDown`:\r\n```csharp\r\npublic void OnInputDown(InputEventData eventData)\r\n{\r\n    for (int i = 0; i < eventData.InputSource.Pointers.Length; i++)\r\n    {\r\n        if (eventData.InputSource.Pointers[i].PointerId == GazePointer.PointerId)\r\n        {\r\n            gazePointer.RaisePointerDown(eventData.MixedRealityInputAction, eventData.Handedness, eventData.InputSource);\r\n            return;\r\n        }\r\n    }\r\n}\r\n```\r\nBecause the hand input sources do not have the `InternalGazePointer` in their pointer list, this condition does not pass when pinching.\r\n\r\nBecause `InternalGazePointer.RaisePointerDown` is never called, `MixedRealityInputSystem.RaisePointerDown` isn't called for `InternalGazePointer` and `IsFocusLocked` is never being set to true (see [`InternalGazePointer.RaisePointerDown`](https://github.com/microsoft/MixedRealityToolkit-Unity/blob/ab6bfc0b97a59d2ba76b2f1695c43115aba3bb63/Assets/MixedRealityToolkit.Services/InputSystem/GazeProvider.cs#L312) and [`MixedRealityInputSystem.RaisePointerDown`](https://github.com/microsoft/MixedRealityToolkit-Unity/blob/ab6bfc0b97a59d2ba76b2f1695c43115aba3bb63/Assets/MixedRealityToolkit.Services/InputSystem/MixedRealityInputSystem.cs#L933)). \r\n\r\nAs a result, the cursor's position is never being updated as the focus object moves (see [`FocusProvider.UpdatePointer`](https://github.com/microsoft/MixedRealityToolkit-Unity/blob/ab6bfc0b97a59d2ba76b2f1695c43115aba3bb63/Assets/MixedRealityToolkit.Services/InputSystem/FocusProvider.cs#L785) and [`PointerData.UpdateFocusLockedHit`](https://github.com/microsoft/MixedRealityToolkit-Unity/blob/ab6bfc0b97a59d2ba76b2f1695c43115aba3bb63/Assets/MixedRealityToolkit.Services/InputSystem/FocusProvider.cs#L357)).\r\n\r\nI'm not certain these changes haven't broken something, I'm still testing and investigating. I just wanted to open this PR and gather some feedback.\r\n\r\n## Changes\r\n- Allows the addition of the internal gaze pointer into the pointer list of some input sources\r\n- Sets the default for `setCursorInvisibleWhenFocusLocked` to false\r\n- Sets `setCursorInvisibleWhenFocusLocked` to false for all example scenes\r\n- Fixes: #5183."""
465806086,5245,"b'removed roll from ""maintain rotation to user"" one hand manipulation mode'",b'manipulation handler one hand manipulation set to maintain rotation to user will now not take roll into account anymore.\r\n\r\n\r\n## Changes\r\n- Fixes: #4295 \r\n\r\n\r\n## Verification\r\ntested with WMR headset'
465788499,5244,b'Change finger cursor position to match shell',b'## Overview\r\nUpdate finger cursor position calculations to match shell.\r\n\r\n## Changes\r\n- Fixes: #4559.\r\n'
465687515,5242,b'2D Mouse Pointer',"b'#Overview\r\n\r\nI implemented the logic for a regular 2D mouse cursor that behaves like the already existing 3D mouse cursor. I felt this was needed as this makes testing a little faster and smoother than with the 3D mouse cursor.\r\nThe code structure needs some review though, cause I think the inheritance structure is not ideal and the names could be better (like MousePointer2D and MousePointer3D or something like that).\r\n\r\n#Verification\r\nSimply choose the DefaultMousePointer prefab over the MousePointer prefab in the InputSystem pointer profile, add the ""Unity Mouse Device Manager"" as an InputDataProvider and you\'re done. DefaultMousePointer ignores the profile though, because all it included was a mouse speed, which now comes from the OS.\r\n\r\n## Changes\r\n- Fixes: #5206\r\n\r\n\r\n'"
465683239,5241,b'Fixing 3D Mouse Cursor BoundingBox manipulation stuttering',"b'## Changes\r\n- Fixes: #5027 \r\n\r\nI can not completely say why this fixes the issue, but I think it has something to do with the mouse pointer Transform being positioned and rotated more than once during different steps and then used for calculations that are off at that time.'"
465643270,5237,b'Move slate prefab out of examples',b'## Overview\r\nMove Slate prefab out of Examples and into SDK/Features/UX/Slate. Update the HandInteractionPanZoomExample scene to be SlateExample scene.\r\n\r\n## Changes\r\n- Fixes: #4345 \r\n- Remove unused DragEnabler Script\r\n- Removed unused SlateEnabler script\r\n- Update documentation to point to new paths\r\n- Rename HandInteractionPanZoomExample to SlateExample scene\r\n\r\n## Verification\r\nVerified that the slate example works as expected.'
465513292,5234,b'Fix the docs build',b'## Overview\r\n#4993 introduced documentation that broke docs generation.'
465505582,5233,b'Add experimental standalone service managers',"b""This change adds the experimental standalone service managers from the 2.x/serviceContainers feature branch into the development branch's SDK/Experimental folder.\r\n\r\nThese service managers may change in the coming releases and should not be presumed to be resistant to breaking changes. In fact, the expectation should be that these will change based in customer feedback.\r\n\r\nPlease note that these managers use the same profile system as the MixedRealityToolkit object. Inspector UI to display profiles has not yet been implemented. You can view the profile contents by double clicking the name of the profile file in the service manager inspector."""
465428903,5231,b'Fix crefs that were breaking the docs build',b'## Overview\r\n#4722 introduced some documentation that broke the docs build.'
465405512,5230,b'add playmode test that toggles the profiler by raising speech events',"b""This change adds a test to toggle the diagnostics system's profiler off using the speech provider.\r\n\r\nResolves #5216"""
465390923,5229,b'[Shell Parity] [Slate] Slate Flattened Border Fix',"b'## Overview\r\n\r\nFixing an issue where flattened bounding boxes would be completely flattened on an axis results in a very thin bounding box border. Bounding boxes now have a display scale (tweakable) for the flattened axis.\r\n\r\n![Capture](https://user-images.githubusercontent.com/13305729/60848332-0ce75200-a19b-11e9-94f3-087c034b6657.PNG)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4976\r\n\r\n\r\n## Verification\r\nPlease see the slates contained in the HandInteractionExamples scene.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
465381466,5228,b'Add namespace to ReadOnlyAttribute',"b'## Overview\r\nA handful of attributes were left outside the MRTK namespace, leading to conflicts with external packages.\r\n\r\n## Changes\r\n- Fixes: #5214 '"
465364733,5227,b'Support focus requested property change in runtime',b'## Overview\r\n\r\nAllow `BaseInputHandler.IsFocusRequested` to be changed during play mode (and propagate a change to handler registration).'
465258700,5224,b'Adjust documentation for event system after recent API changes',b'## Overview\r\n\r\nAdjust docs for changes in `IMixedRealityEventSystem` API. Add section about migrating to new API to UpdatingToGA documentation.\r\n\r\nFixes #5197'
465191009,5221,b'Fixed hand drifting out of objects while camera / pointer rotates (ManipulationHandler - One hand movement)',"b""## Overview\r\nthe offset we were applying to the grab point to determine the manipulated objects position didn't take the camera / pointer rotation into account. Whenever a user rotates / moves in space the object will start drifting off their hands. \r\n\r\n## Changes\r\nfixed offset by applying pointer rotation\r\nadded tests for all one handed move modes of manipulationhandler\r\n- Fixes: #4681 , #4729 \r\n\r\n\r\n## Verification\r\ntested one handed interaction with editor simulation and on hololens 2\r\nunit test"""
465132592,5220,"b'Fix Unity UI touchable ""greedy"" activation.'","b""Physics-based touchables now have a broadphase that limits the number of\r\ntouchables that need to be examined for finding the closest one.\r\n\r\nUnity UI touchables don't have such a broadphase test, so distances needs\r\nto be checked against the touch distance as well, otherwise any UnityUI\r\ntouchable will activate if no other touchable is closer.\r\n\r\n- Fixes: #5217\r\n"""
464792938,5215,b'MSBuild Project Generation',"b'This change contains the necessary tooling to automatically generate an SDK style MSBuild C# projects and solution for the Unity project. This, after it\'s checked in, will be used in to build appropriate DLLs for NuGet packages being built.\r\n\r\nThe process goes as follows:\r\n- Starting with MSBuildTools.GenerateSDKProjects\r\n- First copy the Packages folder and clean up the output directories.\r\n- After that , parse all the available platforms of the current editor and filter to the ones we currently focus on supporting.\r\n- Next create a platforms props file for each of those platforms using the templates embedded next to the code. First try to find the concrete template for the platform/configuration combination (ie. UWP.Player.Template.Props), then a more general just platform, and then fall back to the common one.\r\n- Now, parse the Unity project by instantiating ""new UnityProjectInfo(platforms)"". This fetches all assemblies embedded, as well as all the Dll files found in the project and parses all that data into CSProjectInfo and PluginAssemblyInfo. This includes the Packages folder.\r\n- Then, begin the Export process with the solution adding a reference to each CSProj to be generated\r\n- The above process calls into generate all the CSProject files as well adding all source, plugins, reference and configuring when each gets build.\r\n- Finally, a CSMap is added for each assembly (that will be used in the future).\r\n- All the output goes to a single root directory next to Assets: MSBuild.'"
464625178,5211,b'Validate collider type in NearInteractionGrabbable',"b'## Overview\r\nGrab behavior implementation in `FocusProvider` relies on Unity `Collider.GetClosestPoint` to select a closest object, when there are several within a grab distance. From docs, https://docs.unity3d.com/ScriptReference/Physics.ClosestPoint.html , this call requires collider to be of one of 4 types. If collider is not, `GetClosestPoint` would emit a warning and return `0`, which will break grab logic. As this behavior is outside of Mrtk scope, adding explicit exception on initialization of Grabbable component should at least make this error visible\r\n\r\n## Changes\r\n- Related to #4217.'"
464541744,5209,"b'Revert ""Some test changes""'",b'This reverts commit 1d057749b4680cc0bad0657c23401b8697bcc084.\r\n\r\nReverting tests to a state that passed on CI'
463987539,5199,b'Updated MRTK Optimize tool and performance/stability/optimization docs',"b'## Overview\r\nThere has been consistent confusion & ignorance around the necessity & significance of performance for mixed reality as well as how to properly stabilize holograms. There has also been feedback that developers like the idea of this being automated for them but they want control to select what gets changed or at least be better notified of what may change. Thus, modifying everything when MRTK is added or on some ""Apply scene settings"" would be problematic for many. \r\n\r\nThis change improves functionality and UI for the MRTK optimize window tool to help developers set up their environment for success as well the related documentation.\r\n- Simplify UI to provide all configuration changes up front instead of different tabs\r\n- Made other tabs dedicated tools\r\n- Added success/warning indicators and code checks to instruct user when their project is correctly configured\r\n- Added 16-bit depth format setter\r\n- Added updated documentation links\r\n- Fixed issue where lights could be null\r\n- Fixed issue where mesh filter could be null\r\n- Added filter for MRTK shipped shaders in material discovery tool\r\n\r\nFurthermore, for documentation changes,\r\n- Added page for optimize window and new utilities section in table of contents\r\n- added significant amount of content for perfgettingstarted.md to instruct users instead of resourcing out to various links. Emphasizing key configuration settings to get quick perf wins\r\n- a new hologram-stabilization.md page for details on depth buffer sharing, stabilization plane, and world anchor references as well as how to update content to render depth\r\n\r\n## Changes\r\n- Fixes: #4884 , #4005 , #3158, #1939, #4962 \r\n\r\n![OptimizeWindow_Settings](https://user-images.githubusercontent.com/25975362/60629713-a4b7fb00-9dab-11e9-8cc9-b03c402a7922.png)\r\n\r\n'"
463975431,5198,b'Add customer feedback described in #5196',b'This change adds support for:\r\n\r\n- Automatic mesh material updates when OcclusionMaterial || VisibleMaterial properties are modified at runtime. NOTE: The updates _only_ occur when the appropriate DisplayOption is set.\r\n- Updating mesh physics layer at runtime.\r\n\r\nEach of the above applies the meshes that have previously been observed. All new meshes will continue to be created using the latest settings (previous behavior)\r\n\r\nFixes #5196'
463953774,5195,b'Logging of EyeGaze data to csv file is culture-specific',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5184\r\n\r\nOn certain locales, the CSV delimiter isn't the comma, but the semicolon instead.\r\n\r\nPreviously, we assumed that the delimiter would always be the comma, but this would cause problems in cases like de-DE where numbers are written with commas (instead of decimals) to represent the decimal digits.\r\n\r\nSo for example, en_US:\r\n\r\n123.123, ABCABC, XYZXYZ\r\n\r\nWithout this change, it would look like this on de_DE\r\n123,123, ABCABC, XYZXYZ\r\n\r\nThis is obviously totally wrong - now we have four cells, it doesn't make sense!\r\n\r\nThe solution is to use the real delimiter for the current locale:\r\n123,123; ABCABC; XYZXYZ\r\n"""
463939740,5194,b'Fix regression caused by #5167',b'#5167 introduced a regression in accessing the registered speech commands.\r\n\r\nThis change fixes it by referencing the correct profile in the property.\r\n\r\nFixes #5192\r\n\r\nConfirmed issue and verified fix using keyboard shortcuts in editor and stepping through the speech provider startup code in the debugger.'
463931733,5193,b'cleanup feature branch',b'removed folder with test / debugging only contents\r\n'
463886040,5191,b'Update the spatial awareness architecture doc.',"b""The old spatial awareness architecture doc got fairly specific into the specific interfaces and classes and events, which is really helpful if you already have an understanding of the system (i.e. it provides a reference to things you already know).\r\n\r\nHowever, if you don't know about how everything works, what you really want is a high level introduction to what it is, how it's roughly structured, and what each rough piece is responsible for.\r\n\r\nI also called out the specific platforms that we have inbox support for.\r\n\r\n#4852"""
463856061,5189,b'Updates Copy & Customize to use Clone Profile Window',"b""## Overview\r\nThe _Copy & Customize_ button in a default profile now opens a clone window, letting you specify the name / path for the newly cloned profile.\r\n\r\nTo address #4961, a _Put in original folder_ button has been added next to the _Target Folder_ field. Clicking this sets the path to the original profile's path. This option is also available for cloned sub-profiles.\r\n\r\nTo keep this process fast / simple by default an _Advanced_ foldout has been added to hide the sometimes visually overwhelming sub-profile options.\r\n\r\n![NewCloneProfileWindow](https://user-images.githubusercontent.com/9789716/60609646-0611a700-9d77-11e9-9967-c0a1b7e92830.PNG)\r\n\r\n## Changes\r\n- Fixes: #4961, #4959\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
463676307,5187,b'Create a copy of CI definition using internal agent pool',b'## Overview\r\nWe need a duplicate of the pipeline definition for now because it is not possible to re-assign the Agent Pool using the UI. This is temporary until we can shut down the feed in AIPMR.\r\n'
463487325,5182,b'Add guidance on how to find valid xrefs to reference.',"b'It turns out that the syntax for xrefs is super hard and not actually easy to find. However, running docfx locally will generate a convenient map, which takes away the memorization process (you can just Ctrl+F for thing you want to link to)\r\n\r\nAdding this nugget of guidance to our dev docs.'"
463484522,5181,b'Move WMR extensions into provider package',"b""## Overview\r\nMoves WMR-specific extensions into the WMR provider package, since they're platform-specific."""
463483540,5180,b'Tooltip example scene updates',"b""## Overview\r\nPart of #5164 [GA] Example scene polish\r\n- Updated label's backplate material to HolographicBackPlate.mat which is also used in the Slate's title bar and Button.\r\n- Added Billboard script(existing in MRTK) to the Tooltip prefab's label.\r\n- Added Mars Rover model to demonstrate a practical example of using multiple tooltips for the annotations.\r\n- Updated screenshots, content in the README file.\r\n- No code changes.\r\n\r\n## Changes\r\n- Fixes: #5164 \r\n\r\n![2019-07-01 14_11_51-Unity 2018 4 2f1 Personal - TooltipExamples unity - MRTK-Public-Microsoft - Univ](https://user-images.githubusercontent.com/13754172/60553869-09128600-9cea-11e9-8153-fa67e8bad8e2.png)\r\n\r\n![2019-06-25 18_49_47-Unity 2018 4 2f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof](https://user-images.githubusercontent.com/13754172/60553879-10d22a80-9cea-11e9-8148-dc3287146c59.png)\r\n\r\n![MRTK_Tooltip3](https://user-images.githubusercontent.com/13754172/60468793-a0ef7180-9c0f-11e9-9683-4eb6ff36c3e3.gif)\r\n"""
463475627,5179,b'Added ability for MRTK to appear as a virtual Package Manager Package',"b""## Overview\r\nAdded the ability for MRTK, when pulled from GitHub to a local folder, to appear as a virtual package in Package Manager. Please see updates made to [DownloadingTheMRTK.md](https://github.com/microsoft/MixedRealityToolkit-Unity/blob/def4d6e77ae83dcde237805fed684f0a1df06303/Documentation/DownloadingTheMRTK.md) for how this can be used and why it's valuable.\r\n\r\n## Changes\r\n- Added **Assets\\package.json** which is the virtual package descriptor.\r\n- Updated **DownloadingTheMRTK.md** with information about the 3 approaches and why developers may wish to use each.\r\n\r\n## Verification\r\nOther that documentation, the only real change is adding a **package.json** file to the **Assets** folder. I have tested that this file doesn't break opening the MRTK in Unity, and I have tested that this file does in fact allow the MRTK to appear as a virtual package in other projects. Please just verify this to be the case on your machine as well."""
463475281,5178,"b'Revert ""Fixes build error when a scene with MRTK instance is open in editor""'",b'Reverts microsoft/MixedRealityToolkit-Unity#5132'
463470709,5177,b' Expand the architecture documentation to include more input related docs.',"b'Whereas we these docs previously provided some basic definitions for input system entities, this expands the docs to include more information on controllers, pointers, and focus.\r\n\r\n#4852'"
463439737,5175,b'Screenshot Utility',"b""## Overview\r\n\r\nOften taking screenshots in Unity for MRTK documentation and promotional imagery can be burdensome and the output often looks less than desirable. This is where the ScreenshotUtility class comes into play. \r\n\r\nThis class aides in taking screenshots via menu items and public APIs. Screenshots can be capture at various resolutions and with the current camera's clear color or a transparent clear color for use in easy post compositing of images.\r\n\r\nMenu Item:\r\n![ScreenshotMenuItem](https://user-images.githubusercontent.com/13305729/60547145-d78ec000-9cd3-11e9-91d6-a383b78e2f67.png)\r\n\r\nOutput Image:\r\n![Screenshot_2019-07-02_01-47-14-PM](https://user-images.githubusercontent.com/13305729/60547165-e2495500-9cd3-11e9-99e5-99d810efa462.png)\r\n\r\nPromotional Example:\r\n![CLO17_casualOffice_012](https://user-images.githubusercontent.com/13305729/60547186-effeda80-9cd3-11e9-9e3e-70ad4d9f62dd.jpg)\r\n\r\n![CLO17_casualOffice_012_mrtk](https://user-images.githubusercontent.com/13305729/60547202-f3926180-9cd3-11e9-8946-97ab7d83bdf1.jpg)\r\n\r\nThis tool can be used not only for documentation but helping developers showcase their application for the store or other media outlets.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5174\r\n\r\n\r\n## Verification\r\nPlease try the tool within the Unity editor for functionality and usability.\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
463359188,5173,b'Input playback hand devices',"b'## Overview\r\n\r\nThis gives the InputPlaybackService its own set of hand controllers, independently from the InputSimulationService.\r\n\r\nThe reason is that playing back input animation will conflict with user input in the editor, and typically input simulation with mouse and keyboard overrides animation. User input currently has to be disabled (see [UserInputEnabled](https://github.com/microsoft/MixedRealityToolkit-Unity/blob/53d6ac190089a4856811df49cdf91c59f8951120/Assets/MixedRealityToolkit.Services/InputSimulation/IInputSimulationService.cs#L25) to allow the animation to modify hand data. With separate hand controllers for simulation and for animation this is no longer necessary.\r\n\r\n## Changes\r\n- InputPlaybackService moved into the InputSimulation assembly, since it shares more features with InputSimulationService.\r\n- BaseInputSimulationService shared by simulation and playback services: Common functionality for creating simulated hand devices, extracted from InputSimulationService.\r\n- BaseHandVisualizer fix to make it act only on joint events of the actual controller, otherwise any hand controller would change all the visualizers in the scene.\r\n'"
462955369,5168,b'[Shell Parity] [Button] Compressible Button',"b""## Overview\r\nThe HoloLens 2 pressable button's front plate now compresses like it does in the shell and the front plate splash visual now triggers when the button is pressed.\r\n\r\n![Compress](https://user-images.githubusercontent.com/13305729/60472611-54f7f900-9c1e-11e9-8ad0-279fa2f98484.gif)\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4978 https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4564\r\n\r\n\r\n## Verification\r\nPlease open a scene with the PressableButtonHoloLens2 prefab in it and try pressing a few buttons. The HandInteractionExamples scene is a good place to try out the buttons.\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
462947427,5167,b'Enable standalone usage of the input system plus a few base service manager fixes',"b'With this change, all of the core services have successfully run in standalone (no MixedRealityToolkit object) mode.\r\n\r\nThis is still a work in progress and as such should be considered experimental.\r\n\r\nNext steps:\r\n- Enable profile display in standalone prefabs\r\n- Unit tests\r\n- End to end testing\r\n- Example scenes\r\n- Documentation'"
462946715,5166,b'Merge mrtk_development',b''
462942179,5165,b'Add documentation on the current breaking changes policy.',"b""As a team we've had a policy around breaking changes, though we haven't really written this down until now. This is a summarization of the current state of our stance on breaking changes (tl;dr it's impossible to avoid in all cases, in many cases it's possible to avoid, in the cases where it's not possible to avoid we have to see if the value the change bring is greater than the pain of adoption)"""
462929456,5163,"b'Update the build pipeline to first build standalone, in order to avoid infinitely hanging play mode tests.'","b'It turns out that if there\'s a build error, running play mode tests will hang indefinitely in batch mode (this is because it shows a dialog saying ""hey, make sure your stuff builds""). Previously this wasn\'t an issue because the test step happened after everything else, but now that we moved the test step up to be the first thing, this is now problematic.\r\n\r\nBuilding standalone is the fastest of all of the flavors (because it doesn\'t have to build an AppX), so we\'re moving this to the top.'"
462915504,5162,"b""Fix boundingbox doesn't work if maniphandler appears above it""","b""## Overview\r\nThird attempt to fix issue #4546 which is caused by #4393. This bug fixes the root issue #4393.\r\n\r\nThe root cause of #4393 is that when maniphandler is above boundingbox, maniphandler will swallow all pointer events originating from scale, rotate affordances before bounding box has a chance to handle it. This causes the scale, rotate affordances to be impossible to grab. The fix is to put bounding box before manip handler. This change instead will make boundingbox work regardless of if it is before or after maniphandler.\r\n\r\nThe fix (suggested by @luis-valverde-ms, thanks!) is to put all the pointer event handlers on rigRoot instead of on BoundingBox. This means that all pointer events coming from scale, rotate handles will get handled by rigroot, before manip handler has a chance to swallow the events. A simple solution that doesn't require any changes to the toolkit.\r\n\r\n## Changes\r\n- Fixes: #4546 #4393\r\n- Fix bug where PointerHandler was not configurable in code\r\n- BoundingBox no longer needs to implement IMixedRealityPointerHandler, so remove that.\r\n\r\n## Verification\r\n- Verified RuntimeBoundingBoxExample scene\r\n- Verified HandInteractionExample scene works\r\n- Verified #4393 is fixed in my own test scene\r\n- Verified playmode tests pass"""
462906753,5161,b'Fixes ToolTip background plane size issues',"b""## Overview\r\nFixes ToolTip background plane size issues.\r\n\r\n## Changes\r\n- Fixes: #4447, #5126\r\n\r\n## Verification\r\nLeaving this as a draft until it's been tested on multiple devices.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
462867949,5159,b'Orbital2',"b'## Overview\r\nBased on my findings in #5142, I started the work on another Orbital so I could have a Menu that would circle a target, faces the user while showing it\'s contents. In doing so, I tried to create Orbital as flexible as possible so it could be used in all sorts of szenarios.\r\n\r\nI did not like the fact that there were enums that declared concrete configurations like ""look at camera only on the y axis. What if I wanted to have the same constraint but look at something else?\r\n\r\nThat\'s why I came up with this.\r\n\r\nThe current feature set is the following:\r\n\r\n- It can follow the same Transform the SolverHandler follows, follow all the TrackedObjectTypes or any other gameobjct\r\n- It uses the local Position and Rotation offset of the SolverHandler\r\n- It can look at the same targets defined in SolverHandler\r\n- The look rotation can be constraint on any axis (like billboard could)\r\n- It can snap angles on any constraint axis\r\n\r\n - Special cases like solver and orbital use the same target handle this behaviour correctly\r\n- The inspector reflects the decisions that can be made by hiding and showing fields\r\n\r\nExample usage (described rotating menu above):\r\n- One GameObject (billboardParent) would target the GameObject it wants to circle\r\n- It looks at the head and constraints its look rotation on the y axis\r\n- a second GameObject targets and looks at billboardParent\r\n- it does not use smoothing, has a positional offset and a 180\xc2\xb0 rotation offset\r\n\r\nThe whole construct can be offset from the object itself and will always show its content to the user while maintaining an upright position.\r\n\r\nFeel free to check it out.\r\nIn my opinion, SolverHandler could benefit from the choice of local or world offset too.\r\n'"
462862595,5158,b'Offset calculation',b'## Changes\r\n- Fixes: #5157 .\r\n'
462848363,5156,b'Performance optimization with emphasis on HandInteractionExamples',"b""## Overview\r\n\r\nThis reduces allocations from ~15k per frame to ~100 bytes per frame, depending on what's going on in the scene.\r\n- Fixes: #5107\r\n\r\n## Changes\r\n\r\n- Debug.Assert has been replaced with if / Debug.LogError in cases where string formatting was used. String.Format was being invoked even when the asserts passed.\r\n- BoundingBoxHelper no longer allocates new arrays for every operation.\r\n- FocusProvider now uses SphereOverlapNonAlloc. A new FocusQueryBufferSize field has been added to the input profile. This follows the pattern established in PokePointer.\r\n- NearInteractionTouchableUnityUI.Instances no longer returns a read-only collection. We simply iterate over the list.\r\n- Removed Linq from BaseEventSystem.\r\n- ~~We now omit lightmapCoords in MixedRealityRaycastHit by default via a preprocessor directive. Including them requires a null check against a Unity object at a minumum. Devs can enable them by defining MRTK_ENABLE_LIGHTMAPCOORD_IN_RAYCASTHIT.~~ Reverted in favor of @wiwei's fix.\r\n- HandInteractionPanZoom now uses SetUvs and passes results from GetUvs to other methods.\r\n- In ManipulationHandler moved Linq extension methods to a wrapper method to be dealt with later.\r\n- Changed some materials to use instancing.\r\n\r\n## Issues I didn't address\r\n- Edit: Removing warning about UnityEvents until we investigate further.\r\n- We should further optimize handler-related code in BaseEventSystem. Looking up event handler by type ends up being expensive in aggregate. Maybe a custom equality comparer?\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
462827850,5154,b'added ReleaseOnTouchEnd to PressableButton & Unittests for release behavior',"b""## Overview\r\n- added ReleaseOnTouchEnd to allow sending release event if button touch ended without passing release plane\r\n- on retracting of the button the release event will now fire as soon as we're passing the release distance\r\n- default behavior of this flag is set to true as this was reported as a bug several times already and i think this should be the default behavior.\r\n\r\n## Changes\r\n- Fixes: #4565 && #4266 \r\n\r\n\r\n## Verification\r\n- added play mode test that checks release behavior:\r\n-- normal release\r\n-- release while moving out of the button\r\n-- disabling flag and moving out of the button to check if release isn't triggered in that case\r\nall tests are executed once in normal and once in low frame rate scenario"""
462715744,5152,"b'Revert ""Revert ""Input recording and playback feature (#4775)""""'","b'## Overview\r\n\r\n_Note: The input recording feature was merged and reverted because of CI breakage. See #4775 for the initial review._\r\n\r\nAdds serialization, services, and tooling for recording hand and camera motion and animating simulated input.\r\n\r\nThe immediate goal is to allow automated testing of interactions and input systems. Another possible use case is animating objects for educational purposes (see #4569)\r\nChanges\r\n\r\n- InputRecordingService to record input in the background. The recording buffer is time-limited by default and can be exported at any time, creating a ""rolling buffer"" that can be used for capturing input during interactions.\r\n- InputPlaybackService can load input animation and re-apply it at runtime using the InputSimulationService.\r\n- Serialization utilities for exporting recorded animation into a custom binary format.\r\n'"
462711243,5151,"b'Revert ""Input recording and playback feature (#4775)""'","b'## Overview\r\n\r\nRevert the input recording commit until CI problems are fixed.\r\n\r\nThere is a dependency of the input playback service on the input simulation service, which is editor only.\r\n'"
462680844,5150,b'Input recording editor window',"b'## Overview\r\n\r\nStage 2 of the input recording feature: Editor tools for recording and playing back input animation.\r\n\r\nThis provides editor-level GUI for the recording and playback services.\r\n\r\n## Changes\r\nInputRecordingWindow is a standalone window that can be opened from the Mixed Reality Toolkit menu.\r\nIt has two modes:\r\n- _Record_ shows a recording button that toggles the recording service. When recording is stopped, a popup is shown to select a file destination for the recorded data.\r\n![image](https://user-images.githubusercontent.com/47210016/60435648-fa50a400-9c01-11e9-9151-3de151aa9450.png)\r\n- _Playback_ allows loading recorded input from a file. The data is then applied back through the input playback service.\r\n![image](https://user-images.githubusercontent.com/47210016/60582737-4aa24000-9d81-11e9-9039-0b7c705d6385.png)\r\n\r\nThe Input Recording Window is an alternative to the toggle button in the HandTracking examples. Both of these will work independently by toggling the input recording service.\r\n![image](https://user-images.githubusercontent.com/47210016/60435586-e016c600-9c01-11e9-9f42-d7ef922bb16e.png)\r\n'"
462413776,5145,b'ControllerFinder now registers its interface with the InputSystem',"b""## Changes\r\n- Fixes: #5144\r\n\r\nControllerFinder is capable of searching controllers on it's own but should also be capable of receiving controller detection events in the case a handedness is requested where there is no controller for yet.\r\nRegistering the corresponding events completes the amount of necessary calls.\r\n\r\nIn other words, the interface implementation was already there, it was just not listening at all"""
462289226,5140,b'GridObjectCollection Distance field for Surface Type Plane',"b'## Overview\r\nGridObjectCollection has 4 Surface Types, of which 3 are radial and have inspector fields to define the radius from the origin and the radial range.\r\nThe Plane type neither makes any use of them in the code nor hides them when selected\r\n\r\nThis PR adds a Distance field for the PlaneType.\r\nIt creates custom inspectors that hide and show fields according to the drop down configurations.\r\nIt alters the BaseCollectionInspector and seals the OnInspectorGUI in favor of OnInspectorGUIInsertion, which when overridden will draw additional inspector fields before its own.'"
462274541,5138,b'Tests for Sliders',"b""## Overview\r\nAdds playmode tests for sliders and a few extra test utilities / cleanups.\r\n\r\n## Changes\r\n- Fixes: #4759 \r\n- Fix bugs causing slider to not be configurable from code\r\n- Add Push/Pop InputSimulationProfile and SetInputSimulationMode to test utilities to allow easier switching between articulated and GGV hands for tests\r\n- Add TestHand.Move()\r\n\r\nNote: This change also has a couple of changes to test setup and teardown from Railboy's PR #4723. Hopefully that will go in before this one.\r\n\r\n## Verification\r\nVerified all playmode tests pass."""
462249121,5137,b'[Docs] Adding disclaimer message on development branch features',"b'## Overview\r\nSince the documentation portal pages are generated from mrtk_development branch, it has the pages about the features only available in the development branch. \r\nAdding a disclaimer block to the feature pages that are not available in the release branch yet.\r\n\r\n## Changes\r\n- Fixes: #4792\r\n'"
462247779,5136,b'[Docs] Bringing the landing page updates from dev branch to the release branch.',"b""## Overview\r\nBringing the landing page updates from dev branch to the release branch.\r\nUpdated README.md\r\nDev branch PR: #4923\r\n\r\n- Updated landing page's **Feature Areas** section. Now each feature links to the corresponding page in the documentation portal.\r\n- Added entry to important features such as **Profiles**, **In-Editor Simulation**, **Multi-Scene Manager(Scene System), and Experimental features**.\r\n- Added clear entry to the **Getting Started** and **Documentation** portal.\r\n\r\n![2019-06-17 15_53_35-cre8ivepark_MixedRealityToolkit-Unity at mrtk_development_DocsUpdates](https://user-images.githubusercontent.com/13754172/59642286-391e2e80-9119-11e9-9f99-4cc36bb5bd20.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #4916 #4814 #4779 Part of #4792\r\n"""
462246850,5135,b'Changes to enable future stand alone support for the input system',b'This PR contains changes being needed to enable future use of the input system as a standalone service.\r\n\r\nChanges:\r\n- IMixedRealityRaycastProvider implements IMixedRealityService instead of IMixedRealityDataProvider\r\n- DefaultRaycastProvider class inherits from BaseCoreSystem instead of BaseDataProvider\r\n- Raycast provider is now registered as a service instead of as a data provider\r\n- Input system checks for and adds MixedRealityInputModule in Initialize regardless of mode (edit / play)\r\n- Input system sets camera transform to Vector3.zero and Quaternion.identity in Initialize regardless of mode (edit / run)\r\n\r\nMore likely to come.'
462215999,5134,"b'Update the CI pipeline to run tests first, and then do all of the build tasks.'","b""The build tasks take largest percentage of time (i.e. 80%) but are also the least likely to be the ones that fail repeatedly (generally people are able to make sure that things build before submitting things for PR). However, tests themselves can be trickier because they have slightly different behaviors in batch mode vs in editor. Right now people have to wait ~30 minutes for the builds to complete (successfully each time) before being able to see tests run again. Instead, what should happen is tests should run first (because this will let people iterate more quickly) and then do the long-running build work after.\r\n\r\nNote that we're also going to be updating the docs to show how to run the tests in batch mode (so people can iterate on their own machines instead of spinning up CI tasks), but regardless, this is still a more optimal order based on our current dev flow."""
462176595,5133,b'Update the build player step to fail the build if the player fails to build.',"b'It turns out right now, if the player build fails, the build can silently succeed. This has happened with the Standalone build, and we haven\'t caught this because we have depended on the BuildAppX stage in order to catch that the player never succeeded. Of course, with Standalone builds, there is no AppX stage, so failures there just don\'t get caught.\r\n\r\nThis change does a couple of things.\r\n1) Makes it so that a failure code returned by the unity build step (i.e. build failure or exception) will actually fail the build, instead of silently succeeding.\r\n2) Changes it so that we will display the unity log in the same step in the case of failure (if we didn\'t change the ""print whatever logs"" stages, the failure would have prevented the next steps from going, and we wouldn\'t see the logs.)\r\n\r\nNote that this works with this PR:\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/5103\r\n\r\nTo make sure that we\'ll fail the build and still get useful logging information.'"
462171763,5132,b'Fixes build error when a scene with MRTK instance is open in editor',"b""## Overview\r\nRemoves OnValidate from MixedRealityToolkit and replaces with ExecuteAlways.\r\n\r\nExecuteAlways was always preferred over OnValidate, but wasn't viable at the time because ExecuteAlways causes the instance to be torn down prior to entering playmode. Now that our teardown issues are resolved we can use it again.\r\n\r\n## Changes\r\n- Fixes: #5131\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
462147977,5129,b'Fix the broken Standalone build.',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/pull/5018 broke the standalone build, but we didn\'t know until roughly today.\r\n\r\nHere\'s what happened.\r\n\r\nTouchScreenKeyboard is only documented to be useable on the WSA/iOS/Android build options. It turns out that the ""visible"" property just doesn\'t exist on the object when build against Standalone targets. The code will build fine in editor but when you actually try to build the player, it doesn\'t work.\r\n\r\nSo to that end, I\'ve wrapped the rest of the code in platform specific wrappers (to target only the places where TouchScreenKeyboard is documented to work)\r\n\r\nI only caught this because I was making asset retargeting actually fail the build if it failed:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/5103\r\n\r\nI\'m going to make a change after this to ensure that player builds will actually fail the build if they fail, instead of just silently succeeding.\r\n'"
462133134,5128,b'[Customer request][HTK parity] Add 3D model spatial mesh observer for use in editor',"b'This PR introduces the SpatialObjectMeshObserver for the Spatial Awareness System. It supports sending meshes from 3D models to the spatial awareness system while running in the editor, allowing for rapid iteration of features such as programmatic object placement.\r\n\r\nAlso added is an asset importer for the HoloToolkit .room file format to enable re-use of scans created with the remote / file observer.\r\n\r\nModel formats used while testing the observer.\r\n- .room\r\n- .obj\r\n- .gltf\r\n- .glb\r\n\r\nOther related changes:\r\n- Add optional object parent parameter to SpatialAwarenessMeshObject.Create\r\n- Fix issue in WindowsMixedRealitySpatialMeshObserver where meshes were not properly parented (takes advantage of the new parameter)\r\n\r\nChanges tested in editor (confirm new observer behavior) and on HoloLens (confirm existing observer behavior).\r\n\r\nFixes #3535, #4636'"
462124995,5127,b'Homogenize Script Asset Icons Round 2',"b""## Overview\r\nUpdates meta files to use consistent script icons.\r\nAlso adds a 'Test' script icon to mark our testing scripts.\r\n\r\nFollow-up to #4059"""
462106603,5125,b'Fixes scene system profile inspector to better reflect state of build settings',"b'## Changes\r\n- Fixes: #5124\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
462077957,5123,b'fixed fast moving hands passing the start press planes on low frame rate',"b""happens when enforce front push is enabled\r\n\r\n## Overview\r\nadded caching of previous pointer position to ptr \r\nchecking on touch started if we've passed the start plane in the previous frame\r\nadded test to verify\r\n\r\n## Changes\r\n- Fixes: #4566 \r\n\r\n\r\n## Verification\r\nWrote new test PressButtonFast that simulates fast presses with low framerate"""
462015196,5120,b'Route all Focus Events through regular EventSystem',"b'This implementation routes all 4 Focus events through the regular InputSystem logic, which means they can all be listened to from global listeners.\r\n\r\nThese event calls have been the only calls that had their own direct calls to ExecuteEvents.ExecuteHierarchy. Calls to ExecuteEvents.ExecuteHierarchy are now reduced to where they belong:\r\n\r\n- DispatchEventToFallbackHandlers\r\n- DispatchEventToObjectFocusedByPointer\r\n\r\nThis implementation adds one more field to the FocusEventData and distinguishes in the MixedRealityInputSystem between FocusEventData and BaseInputEventData, because they do not have a common way of telling who receives the Input.\r\n\r\nThis change is not breaking any interfaces besides\r\n\r\n- Fixes: #5119\r\n\r\nCons: if eventdata gets used on the way, focusing breaks which was formerly not possible to do. Maybe in the case of FocusEventData, used should be ignored.'"
461982256,5118,b'Add MRTK inspector preferences ',"b'## Overview\r\nThis change adds MRTK editor preferences to save the view state of certain foldouts. This way when user enters play mode or inspector refreshes, it doesn\'t repaint to default state. \r\n\r\nAlso fixed missing issue for input system that causes MRTK to reset when showing/hiding input foldouts which become considered as ""changes""\r\n\r\n## Changes\r\n- Fixes: #4997 \r\n\r\n## Verification\r\nEnter/exit playmode\r\nDrill down into input profile\r\n'"
461799149,5106,b'Fix the broken play mode tests (PointerEventsTests)',"b""These pointer tests aren't working in CI, despite working in the editor itself.\r\n\r\nThis was driving me crazy for a while, and from what I can see, this is due to the frame rate tick of the game itself vs as the test code is running - it looks like in batch mode especially, frames might not actually be passing between test lines, so things that assume that an update has occurred, or that a certain amount of drag events have occurred.\r\n\r\nI was able to see this just by doing things like increasing the numSteps to 26 (or some larger than 1 thing) to increase the chances that frames were actually passing.\r\n\r\nI wanted to keep that number relatively low, so I did a few other things instead:\r\n\r\n1) Wait for a fixed update after each manipulation (i.e. gesture, end of move), and set the target framerate to match the physics tick, so as to increase the chance that we're actually going to get the frame to pass.\r\n2) Remove the exact checking for drag events, because depending on the system, more or less events can pass between each test line.\r\n\r\nI also removed the prefab in favor of just dynamically newing up a Cube at the same location and size."""
461754664,5103,b'Ensure that asset retargeting fails on non-zero Unity exit codes.',"b'We\'ve already seen a number of cases where we have failed to push NuGet packages, because of classes that were introduced with no namespaces. These show up as an error in the asset retargeting step, but because we don\'t return the error code that Unity gives us, the rest of the build moves on (and then later shows a warning saying that ""no nuget packages were pushed out"")\r\n\r\nThis updates the build powershell script so that any break that would cause us to stop producing a nuget package would actually cause a build failure, rather than just a warning and slap on the wrist.'"
461738984,5102,b'Fix the broken NuGet build.',"b""It's been a few days of us not building NuGet packages - here's what happened.\r\n\r\nWe hit a CI outage earlier in the week caused by an upstream Azure DevOps issue (a bad nuget push package was pushed out). Our build was broken for a couple of days, during which we still had changes going in (mostly we were judging by green-ness of mrtk_pr, which is identical to CI except it doesn't produce and publish NuGet packages).\r\n\r\nThe problem is, without coverage on the NuGet building, we didn't know that we broke the nuget packages until the upstream nuget push package got fixed.\r\n\r\nThe asset retargeter assumes that every single class/object in the MRTK is prefixed by the MRTK namespace. This is a fairly reasonable assumption to make, and it throws when it finds something that violates it (so that we can then fix it). The fix is thus to make sure that the class in question is put into an MRTK namespace (the example demos one)\r\n\r\nI will follow up here and do work to make sure that the build breaks when this happens, instead of just showing warnings."""
461732695,5101,b'Fix the broken .NET-C# projects build.',"b'This is an oldie but goldie. There\'s an issue that arises only when building on the .NET backend with C# projects enabled (this is a deprecated scenario but still one that is really useful for fast iteration).\r\n\r\nThe problem is that even if an assembly is marked as a ""test assembly"" (as the play mode tests are), they will still be included in player builds for .NET-C# project builds. This is what the old comment was alluding to (but wasn\'t very specific about)\r\n\r\nWe also explored doing things like marking the play mode tests as editor only (i.e. matching what the edit mode test asmdef looks like) but this had the side effect of removing all tests from the test runner (bad, tests are gone). Also tried making things editor + Win32 (standalone) + Win64 (standalone) only as well, though this still had the same problem even when building UWP .NET\r\n\r\nI updated the comment to be a little clearer about what\'s going on here and also updated the test guidance as well.\r\n\r\nLastly, got rid of some unused using statements while I was in there.'"
461680295,5100,b'Fix CameraSystem and SceneSystem assembly name references in profiles',"b""## Overview\r\n#4858 changed the assembly names for two systems, but didn't update all the profiles."""
461667527,5098,b'Update WMR Unity package to support HL2 remoting',"b'## Overview\r\nUpdates the WMR Unity package to 1.0.12 to include HL2 remoting.\r\nAlso updates the editor version to 2018.4.2 to support the HL2 remoting window update.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/60288781-cad02d80-98c9-11e9-9294-c9f1789cea9f.png)\r\n\r\nNOTE: Currently, hand joints, hand mesh, and eye tracking are not supported by MRTK over remoting.'"
461610538,5096,b'Dependency Window',"b'## Overview\r\nOften in Unity it is difficult to gleam which assets are being used, and what is referencing them. The ""Find References in Scene"" option works great when you are only concered with the current scene, but what about your entire Unity project? This is where the Dependency Window can be useful.\r\n\r\nThe  Dependency Window displays how assets reference and depend on each other. Dependencies are calculated by parsing guids within project YAML files (note, script to script dependencies are not considered).\r\n\r\n<img width=""1077"" alt=""DependencyWindow"" src=""https://user-images.githubusercontent.com/13305729/60376778-fdf7e700-99c5-11e9-9049-a741bf7f5b79.PNG"">\r\n\r\nThe window displays a list of assets the currently select asset depends on, and a hierarchical list of assets that depend on it. If nothing depends on the currently selected asset you can consider deleting it from your project (note some assets are loaded programmatically via APIs like Shader.Find() and may not be caught by the dependency tracker).\r\n\r\nThe window can also display just a list of all assets which are not referenced by any other assets and could be considered for deletion:\r\n<img width=""684"" alt=""List"" src=""https://user-images.githubusercontent.com/13305729/60376937-f553e080-99c6-11e9-9233-30225f27c0cf.PNG"">\r\n\r\nExample Use:\r\n![DependencyWindow](https://user-images.githubusercontent.com/13305729/60376914-b9208000-99c6-11e9-9424-0b9c436cf981.gif)\r\n\r\nThe need for this tool was brought up when the Shell team mentioned they have many UI assets they wish to bring into the MRTK, but would like a non-manual way to determine which assets are being used.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5095\r\n\r\n\r\n## Verification\r\nPlease give this tool a try with your Unity project. I would be curious to know which dependencies it misses and how long it takes to build the dependency graph on your PC.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
461534600,5094,b'Fixed pointer events tests to adapt to changes to PlayModeTestUtilities.ShowHand.',"b'`PlayModeTestUtilities.ShowHand` now steps an extra frame after showing hands, which changes the events the pointer handler receives so we need to adjust the expected values accordingly. Also, simplified interpolation math in `PlayModeTestUtilities.MoveHandFromTo`'"
461505696,5093,b'Fix documentation links in inspectors',b'## Overview\r\nThis change tries to simplify and fix some of the documentation link features in inspectors.\r\n\r\n1) Update to optimize window to use documentation link button style & API\r\n2) Fixed documentation link to be on profiles and not active systems in MRTK (which is problematic in editor mode)\r\n3) Fixed create asset menu for MRTK profiles to be their own folder category\r\n4) Remove duplicate utility inspector class and merged functionality to consolidate files\r\n\r\n![mrtk-profiles-create-menu](https://user-images.githubusercontent.com/25975362/60266887-44c3df00-98e9-11e9-9811-d2beb5dcea93.png)\r\n\r\n## Changes\r\n- Fixes: #4801 \r\n\r\n## Verification\r\nTested in MRTK inspector\r\nTest in drill down profiles\r\ntested in service facade inspector view\r\ntested in optimize window view\r\n'
461349485,5089,b'Removed deleted meta files',"b'## Overview\r\nImporting the current state of the mrtk_development branch, two meta files get deleted because their corresponding folders do not exist anymore.\r\n\r\n## Changes\r\nremoves the 2 meta filesw'"
461346034,5088,b'BoundingBox Nullcheck removal',b'- Fixes: #5028 .'
461297312,5086,b'Add ability for some ManipulationHandler to ignore pointer events from gameobjects using InteractiveColliderContext',"b'This is an alternative approach for PR #5072 to fix #4393 (follow-up bugfix is #4546)\r\n\r\n## Looking for feedback\r\nI\'m looking for feedback regarding the approach in this PR compares to PR #5072. Would love to hear if folks see issues with this approach. Also suggestions about naming the component.\r\n\r\n## Overview\r\nThe root cause of #4393 is that when maniphandler is above boundingbox, maniphandler will swallow all pointer events originating from scale, rotate affordances before bounding box has a chance to handle it. This causes the scale, rotate affordances to be impossible to grab. The fix is to put bounding box before manip handler. This allows bounding box to handle the affordances first.\r\n\r\nPR #5072 solves this by throwing error if bounding box is ever coming after manip handler.\r\n\r\nAn alternate approach is to somehow tell ManipulationHandler to ignore events from certain gameobjects. I considered using tags or layers but decided against it because those approaches did not feel extensible (layers only have 31 values so potentially customers could run out if we took one for layer ""Ignore Manipulationhandler"", and only one tag allowed per gameobject).\r\n\r\nAn alternative to tags or layers is to add a component I called `ManipulationHandlerContext` component that can provide configurable info to a manipulationhandler whenever that gameobject is grabbed.  On PointerDOwn, ManipulationHandler then checks if the object the pointer event came from has a ManipHandlerContext and ignores the event source if IgnoredByManipulationHandler == true. This allows us to have descendents that raise pointer events, but which can be ignored by manipulation handler (because they could be used by some other components).\r\n\r\nBoundingBox then adds these context components to its affordances, and sets IgnoredByManipulationHandler = true. This then prevents manipulationhandler from stealing the events that come from the bounding box affordances.\r\n\r\n## Verification\r\n- Verified that this allows bounding box handles to be grabbed regardless of whether bounding box is above / below manipulationhandler\r\n'"
461201265,5072,b'BoundingBox check that it is before maniphandler in components list',b'## Changes\r\n- Fixes: #4546 by adding a check in OnValidate\r\n\r\n\r\n## Verification\r\n- Checked that bug is fixed\r\n- Verify that HandInteractionExampleScene works'
461172750,5070,b'updated InteractableInspector to fix mismatch repaint issue',"b""## Overview\r\nFix for Issue #4011 \r\n\r\nWhen initializing the Interactable the inspector does a check to see if the States property is not null. If it's null, then we try to fill it with the DefaultInteractableStates asset.\r\n\r\nThe issue came up when the States property was filled in the layout phase, but never rendered. During the repaint phase, now that the property is not null, we attempt to render the field in the inspector.\r\n\r\n## Changes\r\nWe are now rendering the field in both phases, in the layout phase after the property is filled.\r\n\r\n## Verification\r\nI was able to consistently repro this by adding the Interactable component to a GameObject using the Add Component button in the inspector.\r\n\r\n1 Create a new Scene\r\n2 Add MRTK by selecting MRTK/Add to Scene and Configure... in the menu\r\n3 Drag a pressable button into the scene\r\n4 press play\r\n5 observe no errors\r\n\r\nor \r\n\r\n1 Create a game object in the scene\r\n2 Select it and press Add Component in the inspector\r\n3 Select Interactable as the component to add\r\n4 observe no errors."""
461109401,5069,b'Fix/toggle updates',"b'## Overview\r\nAddressing issues #3603 and #4123 \r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/3603#event-2382237668\r\n\r\nMost of this PR is outlined in issue #4123 \r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/4123#event-2412120239\r\n\r\nBasically the Dimensions feature enables so advanced functionality, but there was not a way to set the startDimensionIndex. This is an easy fix as outlined in #3603.\r\n\r\nBut, the fact that many developers just want to use the toggle feature part of Dimensions, which seems more complicated than it should. So this PR attempts to also address this issue and a tiered approach to the complexity.\r\n\r\n## Changes\r\nMost of this is purely Inspector work, so the main functionality will still be the same and there should not be any breaking changes. The only potential issue is when Dimensions is set to 2 and someone calls Interactable.SetToggle(bool toggle). When Dimensions is set to 2 (toggle mode), then calling SetToggle will also call SetDimensionIndex(0/1). Calling SetDimensionIndex(0/1) to change the toggled state still works as it did before and developers can ignore the IsToggled state in the Interactable (they were never connected). The issue may be in the case where someone is calls both SetDiemsionIndex(0/1) and SetToggle(bool toggle), now SetDimensionIndex(0/1) will get called twice, but the outcome will be the same. When the Interactable is clicked, when in Toggle mode, IsToggled will be set now as well.\r\n\r\nNow for the Inspector updates. We now have a drop down for Selection Mode. **These images are old and the new term is Selection Mode instead of Selection Type - but open to better suggestions**\r\n![image](https://user-images.githubusercontent.com/22085553/60138502-7872fd80-975f-11e9-927b-d7aeb3d9b6ff.png)\r\n\r\nThe default value is Button which sets Dimensions to 1 behind the scenes.\r\nSetting the drop down to Toggle will set Dimensions to 2.\r\n\r\n![image](https://user-images.githubusercontent.com/22085553/60138566-b1ab6d80-975f-11e9-9967-5dde80319c12.png)\r\n\r\nThere\'s also a number added to each themes with a ""(Toggled)"" appended to the second theme label.\r\nThe IsToggled checkbox will set the initial state at runtime. When the app is running, the IsToggled checkbox becomes read-only, but still reflects the toggled state. We don\'t want anyone overriding the toggle in the inspector when running, but it can be done through code at run-time by calling SetDiemensionIndex(0/1) or SetToggle(bool toggle).\r\n\r\nLastly, the Multi Dimensions option\r\n\r\n![image](https://user-images.githubusercontent.com/22085553/60138741-52019200-9760-11e9-9bce-09842575e3aa.png)\r\n\r\nIn this mode we refer to Dimensions for everything, setting the start dimensions to at least 3 with the option to set the start Dimension index value. In this mode SetToggle(bool toggle) will not effect the Dimension index.\r\n\r\n## Verification\r\n- No breaking changes\r\n- When in Multi Dimension mode, switching Dimensions to 1 or 2 will change the drop down to Button or Toggle respectively.\r\n- Documentation should be clearer\r\n- Should be easier to use and understand for basic functionality.\r\n- Now validating Dimensions and StartDimensionIndex will not go out of range and break stuff when updated through the Inspector. Maybe we should check on start as well?\r\n'"
461083988,5068,b'Enforce compiler warnings as errors in the MRTK.',"b'It is critically important to ensure that the MRTK builds without warnings and errors. We have consumers that have strict ""warnings as errors.""\r\n\r\nOver the past month, we\'ve seen a number of changes go in with compiler warnings - these never should have been checked in in the first place.\r\n\r\nThis change adds a C# compiler flag to will treat all compiler warnings as errors.\r\n\r\nNote that this DOES have a ramification on a subset of consumers that currently pull directly from mrtk_development (and mrtk_release, once this change goes out as part of GA). There\'s significant benefit to ensuring that our code compiles without warnings or errors.'"
461036104,5067,b'added unit test documentation and updated docfx docs',b'## Overview\r\nnew documentation page about unit testing of mrtk\r\nupdated the coming soon part of docfx doc and added a little chapter about CI runs of docfx in github\r\n\r\n## Changes\r\n- Fixes: #5066 \r\n\r\n'
461010420,5065,b'Unity ui test',"b'## Overview\r\n\r\nBasic tests for Unity UI elements and poke pointer interaction.\r\n\r\n## Changes\r\n\r\nAdds tests for NearInteractionTouchableUnityUI in combination with different UI components.\r\n\r\nOnly the Button and Toggle UI components are tested right now, other elements should be added later.\r\n'"
461005032,5064,b'Pointer events tests',b'Tests to verify that pointer events are being raised correctly. This is part of the resolution for #4753 . \r\n\r\nIt also includes a minor fix to `PlayModeTestUtilities` so they now also update the left simulated hand when required.'
460985749,5060,"b'removed obsolte doc paths, fixed paths to home button and favicon'",b'cleaned up docfx yml config file\r\n\r\n Changes\r\n- Fixes: #5059 \r\n\r\n'
460782754,5055,b'BoundingBox Fix Corners incorrect size when rigroot is under targetTransform',b'## Overview\r\nSee issue description for explanation of bug. Fixed by recomputing scale of corners when targetTransform changes.\r\n\r\n## Changes\r\n- Fixes: #4434\r\n\r\n\r\n## Verification\r\n- Verified fixes issue\r\n- verified that boundingboxruntime tests pass \r\n- Also verified that HandInteractionExamples scene works.'
460707297,5054,"b'Add MRTK architecture documentation, part 1 of N.'","b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4852\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/4779\r\n\r\nOne of the sore spots of our documentation is explaining what all is in the MRTK, how things connect, why WHY things were written in the way they were written. I wrote up an internal doc a couple weeks back that inventoried all of the code and features in the MRTK. Some folks found this to be helpful in providing a high level grounding as they dove deeper into the toolkit, so I'm publishing this in hopes that it will help everyone else.\r\n\r\nLong term, this documentation should be kept up to date and provide not just how things work, but why things work.\r\n\r\nIn terms of order of review, read:\r\n\r\n1) Overview\r\n2) Framework and Runtime\r\n3) Configuration and Profiles\r\n4) Input System.\r\n\r\nInput System is going to be fleshed out dramatically in the next change (or maybe this change, depending on PR review speed)"""
460666318,5052,b'Port the WorldAnchorManager from the HTK to MRTKv2.',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4509\r\n\r\nThe WorldAnchorManager provided a convenience wrapper on top of Unity's WorldAnchor/AnchorStore abstractions. This change ports the file mostly as-is into the Experimental namespace, because we haven't yet figured out how best to have end to end tests for this, and because we don't have any documentation yet.\r\n\r\nNote that there have been several changes here from the HTK version:\r\n\r\n1) Some functions that were protected/virtual have been made private, for the sake of going out with the minimal API surface needed to use the World Anchor Manager. This doesn't mean that we they will be private forever, just that we don't want to create a massive surface and want to extend it as-needed.\r\n2) Removed usage of the Singleton<> template - it's up to the consumer how they choose to use this (they can do their own singleton if they want)\r\n\r\n## Changes\r\n- Fixes: #4509"""
460659604,5051,b'Added tap gesture handling for WMR and input sim',"b""## Overview\r\nThe tap gesture was previously used (in HTK) to distinguish an input up from a quick click vs a hold or manipulate gesture. Although it is possible to get more or less the same event by handling the other gestures on the receiver side (e.g. check for hold/manipulate/navigate between input down and input up, and if none of the other gestures fired, raise a tap/click event) but it seems much simpler to handle it using the gesture recognizer.\r\nI'm re-adding that functionality for WMR and input simulation, and have added the tap action to the default gesture profiles.\r\n\r\n## Changes\r\n- Added tap handling to WMRDeviceManager\r\n- Added tap handling to SimulatedGestureHand (this is also undoing a recent change to how input sim fired the manipulation gesture - see: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4274)\r\n- Added tap action/gesture to default configuration profiles\r\n- Added test of tap action to GestureTester/HandInteractionGestureEventsExample\r\n- Fixed a bug in settings rails vs non-rails navigation gesture settings (I think...)\r\n\r\n## Other notes\r\nAs a follow-up, I'd like to use the tap gesture for the pointer click event, rather than pointer click effectively being identical to pointer up. Any feedback on that idea would be appreciated: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4998"""
460638566,5049,b'[Shell Parity] [Button] Highlight Plate Shell Behavior',"b""## Overview\r\nThis change animates in/out the HoloLens 2 pressable button's highlight plate based in button focus to closer match the shell design. This change also reduces overdraw performance issues on the button.\r\n\r\n\r\n![Hightlight](https://user-images.githubusercontent.com/13305729/60132655-cf250b00-9750-11e9-86cc-bda0d0fa47bb.gif)\r\n(Note, gif compression doesn't represent on device visuals.)\r\n\r\nThis change also introduces an new iridescent backplate texture to closer match the shell.\r\n\r\nPart of #4200 [MRTK Shell Parity] UX Controls Parity with HoloLens 2 Shell\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4977\r\n\r\n\r\n## Verification\r\nThe best scene to test these changes in would be the HandInteractionExamples scene.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
460620361,5048,b'fix doc comments in new ClearObservations methods',b'#5035 had some todo comments where the documentation comments should have been. this change adds the proper text.'
460619659,5047,b'launch browser example',"b""## Overview\r\n\r\nAdd a button that launches the Edge browser. This demonstrates that the browser slate can be launched while your application continues running. ~~The web page that is launched contains controls modeled after the Unity GUI controls in the examples, showing a button, checkbox, slider, dropdown, and edit box. This demonstrates the option of integrating with existing web tools or of creating simple form UI using HTML and shows what this kind of interaction would feel like.~~\r\n\r\n~~Note that I originally implemented this by calling the UWP LaunchUriAsync API, but later found out that is unnecessary because Unity's Application.OpenURL seems to work just as well.~~\r\n\r\n## Changes\r\n- Fixes: #2934.\r\n\r\n## Verification\r\n\r\n~~Note that this references a web page in order to demonstrate using web controls from within a browser. Because I didn't want to host a web site for this purpose, I am linking to a page on github. That page won't exist unless this PR is first merged to mrtk_development.~~\r\n\r\n~~If you would like to try this change locally, you can change the URL to point to the HTML file in my fork as follows:~~\r\n* ~~In HandInteractionExamples.unity, select the SceneContent/LaunchBrowserButton object.~~\r\n* ~~In the inspector, scroll down to the Interactable OnClick event. Change the URL to the following: ```http://htmlpreview.github.io/?https://raw.githubusercontent.com/ForrestTrepte/MixedRealityToolkit-Unity/feature/launchBrowser/Assets/MixedRealityToolkit.Examples/Demos/HandTracking/WebForm/SampleWebForm.htm```.~~\r\n"""
460573745,5045,b'Add api change section to UpdateRC2toGA doc',b'Adds an api changes section and describes the new changes for clearing spatial observations.\r\n\r\nAlso fixes some spelling / typing errors in the assembly name section'
460570446,5044,b'Fix simulated hand ray not correct until hand moves',"b'## Overview\r\nUpdate InputSystemGlobalHandlerListener to try register as a global listener in OnEnable. Previously it was trying to register in Start, causing it to miss some events.\r\n\r\n## Changes\r\n- Fixes: #5029\r\n\r\n## Background\r\nThe `lateInitialize` variable was introduced in the following commit:\r\n\r\n```\r\n1c17f7847e1d3a3a8e125b876a9c57ad1fb42a6f\r\nAuthor: Stephen Hodgson <hodgson.designs@gmail.com>\r\nDate:   Sun Sep 9 14:13:25 2018 -0700\r\n\r\nFixed input handler race condition if input system and teleport system not found before gameobjects wake up\r\n```\r\n\r\nSo it sounds like there were cases when a component was enabled before input system was valid. However, we do want to register some components in OnEnable to ensure they get all input events. Therefore, modify the code s.t. we try to register both in OnEnable and in Start.\r\n\r\n## Verification\r\nVerified that simulated hand ray is valid when hand appears. '"
460561908,5043,b'Update the eye tracking documentation to provide information on the new Gaze Input capability helper of the MRTK build tools.',"b""It's now possible to have the MRTK build tools add the capability for you automatically, so calling this out on the documentation is helpful."""
460255883,5036,b'Bounding Box Tests',"b'## Overview\r\nAdd bounding box tests, a couple more small test utilities, and simulated hand ray not showing up until you move hand a bit.\r\n\r\n## Changes\r\n- Fixes: #4730 by implementing all tests outlined in the bug. The tests actually highlighted bug #5029 which I then fixed thanks to @luis-valverde-ms excellent but description\r\n- Fixes: #5029 \r\n- Add couple utility methods to tests\r\n- Make a couple members in input simulation service set-table to make them easier to test.\r\n\r\nThanks to Lukas for making the input simulation system easy to modify at run time so I can do near and far HoloLens 1 style tests :-)\r\n\r\n## Verification\r\n- PlayMode tests pass individually\r\n- When I run all the tests, I get a stale scene left over, need to fix still.\r\n- Getting the following error currently when I run any test (whether it is the tests I added, or not). Possibly existing bug:\r\n\r\n```\r\nNullReferenceException: Object reference not set to an instance of an object\r\nUnityEditor.TestTools.TestRunner.PlaymodeLauncher+BackgroundWatcher.OnPlayModeStateChanged\r\n```'"
460142764,5035,b'Customer request: Add support for clearing the spatial observations',"b'This feature was requested by a customer in our online forums.\r\n\r\nThis change adds the ability to request the spatial observations be cleared (removed from the scene and freed). \r\n\r\nIt also renames SpatialAwarenessObjParent to SpatialAwarenessObserverParent for clarity.\r\n\r\nThe Spatial Awareness demo scene has been updated to add a sphere that allows for toggling the observers (first click suspends and clears, second click resumes, etc).\r\n\r\n\r\nTesting performed\r\n- Build and deploy to HoloLens (il2cpp and .net backends). Confirm that the meshes clear and resume.\r\n- Build and run in editor using an early file observer prototype.'"
460098099,5034,b'[HTK Parity] Progress Indicator UX Controls',"b'## Overview\r\nAdds progress indicator controls to SDK. Broken out of [Scene Transition Service PR.](https://github.com/microsoft/MixedRealityToolkit-Unity/pull/3961)\r\n\r\n## Changes\r\n- Fixes: #3899\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
460087980,5033,b'Adds PlayMode Tests for Interactables + Some Test Cleanup',"b""## Overview\r\nPlayMode tests for interactables.\r\n\r\n## Changes\r\n- Fixes: #4723\r\n- I've updated `BaseNearInteractionTouchable` so that `EventsToReceive` is modifiable at runtime.\r\n\r\n## Verification\r\n\r\nWe should make sure the simulated input events being raised correctly.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
460027019,5031,b'fixed initial offset for buttons that are created in root of prefab',"b""## Overview\r\nFixed access of parent transform - if there's no parent the initial offset is vector3.zero\r\n\r\n## Changes\r\n- Fixes: #5023 \r\n\r\n"""
459927382,5030,b'Updating porting guide to point to billboard class',"b'## Overview\r\nBillboard class is still needed as RadialView does not satisfy necessary functionality. \r\n\r\n## Changes\r\n- Fixes: #4843 \r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
459821134,5026,b'Make solver properties public & minor tweaks',"b'## Overview\r\nThis change primarily addresses the need to modify solver properties at runtime. Furthermore, this fixes some minor other elements all listed below\r\n\r\nSurface Magnetism\r\n-> Updated tooltip for magnetic Surfaces to understand layermasks more easily (some work to make #4938 more understandable)\r\n-> Make properties public like other solvers\r\n-> Re-use raystep instead of copying to functions\r\n-> remove start()/Onvalidate()\r\n-> Cleaned up comments\r\n\r\nMomentum\r\n-> Made properties public & runtime editable\r\n\r\nConstantViewSize\r\n-> Made properties public & runtime editable\r\n-> Ability to recalculate bounds if size changes\r\n\r\n## Changes\r\n- Fixes: #4650 , #4310 \r\nRelated: #4202 \r\n\r\n## Verification\r\n\r\nSolverExample scene is quite broken. In particular, SurfaceMagnetism will not work as the right or left hand gameobject is used as tracked object. But in editor this object parent remains at <0,0,0> and all of the children set their world position. There are other components that do not work already when clicked on in the example scene. \r\n\r\nI just tested with my own version\r\n'"
459648090,5024,"b'[Shell Parity] Button updates - feedback for the far interaction, audio clip updates'","b""## Overview\r\n- Added button movement for the far interaction \r\n  - Updated interactable's states to use FocusPressTouchGrabStates\r\n  - Added offset value 0.016 for the Press state (far interaction press moves the front plate) \r\n- Updated audio clips for press/release (added new audio clips MRTK_ButtonPress, MRTK_ButtonUnpress\r\n\r\n## Changes\r\n- Fixes: #4979 \r\n\r\n## Screenshots\r\n![MRTK_PressableButtonFarFeedback](https://user-images.githubusercontent.com/13754172/59985286-856be180-95e5-11e9-808a-b35089a76ed6.gif)\r\n![2019-06-23 18_16_27-Unity 2018 4 2f1 Personal - PressableButtonExample unity - MRTK-GitHub - PC, Mac](https://user-images.githubusercontent.com/13754172/59985304-9ddbfc00-95e5-11e9-89ea-dc64e1536572.png)\r\n![2019-06-23 18_15_40-Unity 2018 4 2f1 Personal - PressableButtonExample unity - MRTK-GitHub - PC, Mac](https://user-images.githubusercontent.com/13754172/59985305-9ddbfc00-95e5-11e9-982f-86041037c0a9.png)\r\n\r\n"""
459442986,5022,b'Adding mrtk utility for services',"b'## Overview\r\n\r\nCreates utility for developers to easily access MRTK services in simpler code fashion by calling the static utility class **MRTKServicesUtils** (happy to change name to something better too)\r\n\r\n@davidkline-ms since you are driving the work around **MixedRealityServiceRegistry**, I would really love your input on this.\r\n\r\n## Changes\r\n- Fixes: #5021 \r\n\r\n## Verification\r\nThis is not a breaking change and I have modified no internal code to leverage this component. It is only an addition of a code path used continuously across the project both externally and internally. \r\n\r\nIf approved, then we can consider another PR to change internal usage to this.'"
459380587,5018,b'Workaround Windows System Keyboard caused by Unity bug',"b""## Overview\r\nOn HoloLens devices, the touchscreen keyboard cannot be re-opened after it has been closed once. This is caused by a bug in Unity's UWP implementation of their TouchScreenKeyboard. The Unity bug tracking the issue is [tracked here](https://fogbugz.unity3d.com/default.asp?1137074_rttdnt8t1lccmtd3).\r\n\r\nThis change implements a workaround by providing a MixedRealityKeyboard class that will directly call Windows `InputPane.Show()` and `InputPane.Hide()` methods. Thank you to Adam Mollis for the code :-)\r\n\r\nMixedRealityKeyboard is marked as experimental, because this is a temporary workaround meant to go away once the [Unity bug is fixed]( https://fogbugz.unity3d.com/default.asp?1137074_rttdnt8t1lccmtd3). After that bug is fixed we will just use `TouchScreenKeyboard.Open()` directly.\r\n\r\n\r\n## Changes\r\n- Fixes: #4373 \r\n- Add MixedRealityKeyboard under Experimental as a workaround\r\n- Update OpenSystemKeyboard to call TouchScreenKeyboard.Open if not running on UWP, otherwise use MixedRealityKeyboard.\r\n- Also fix a bug where 'toggle profile' button was not working by adding a new class that was deleted. See #4738 for details. Fixes: #4738 \r\n\r\n## Verification\r\n- Tested in Editor (nothing happens)\r\n- Tested on HoloLens 2"""
459379088,5017,b'Fix the broken build.',"b""There were two changes that went in, that each built successfully on their own, but combined led to a break. Basically, there were these new tests which assumed there were no default listeners of the new RegisterHandler input system event system. However, a checkin also went in that started consuming that by default (this is the primary pointer work). Both changes individually were correct, but together there was a new combination that hadn't existed.\r\n"""
459353384,5016,b'Add API on FocusProvider to set focus point',b'## Overview\r\nAdds an API on FocusProvider to override the focus point for a given pointer.\r\n\r\n## Changes\r\n- Fixes: #5015 \r\n\r\n'
459310275,5014,b'Experimental UX Feature: Scrolling object collection',"b'## Overview\r\nThe long wait is over for #4724, this builds on the basic concept of `ObjectCollection` to allow developers to build scrollable lists of content! This control was originally built for the HoloLens 2 Out of Box Experience (OOBE).\r\n\r\n## Features\r\n- Works like any other object collection, add children, press ""update.""\r\n- Scrolls both up/down, and left/right.\r\n- Works with touch, as well as controllers / far / pointers.\r\n- Can by dynamically instantiated.\r\n- N items in list, any configuration of viewable and nonviewable content.\r\n- Uses MRTK Standard shader and clipping primitive for scroll clipping effect.\r\n- Multiple velocity options - None, None snap to item,  standard falloff per frame, falloff per item (always magically lands on a full viewable set)\r\n\r\n## What still needs work (why its experimental)\r\nThe way the Input system works, there isn\'t way for children that handle input (i.e. buttons) to pass the event up to the parent (in this case the scrolling collection). I\'ve stubbed (and commented out) a way I\'d like to see input handled where an interactive object has a `PassThroughMode` that when toggled passes the event along up the hierarchy. That way a control like `ScrollingObjectCollection` can determine when events can/can\'t sent to that child object.\r\n_This type of change is obviously huge for the input system and would require a separate PR(s), which is why I just commented it in for visibility._\r\n\r\nThe way this was handled in HL2 OOBE was by using an interface `IScrollingChild` which was identical to `IMixedRealityTouchHandler`. Buttons were duplicated (\'ForcePressable\') which allowed the `ScrollingObjectCollection` to handle all eventing and pass it down to its children as appropriate. Unfortunately this pattern is hacky and would require a duplicate UX control.\r\n\r\nThe short term solution is by using UnityEvents - this will eventually cause perf issues compared to the two options/solutions above.\r\n_Example: 300+ objects (which SCO handles no problem with no perf) will be subscribed to events, broadcasting those will be the perf issue..._\r\n\r\n\r\n## Changes\r\n- New Scrolling Object Collection control\r\n- Fixed a few namespace mismatches\r\n- Added an example scene\r\n\r\nAdditive - should be no breaking changes here:\r\n- Formatted / strongly typed a few things that I saw when I was in a few files\r\n- Stubbed out (then commented out) proposed input solution\r\n- Added ""sender"" to base input (part of the proposed input solution)\r\n- Some material upgrades got in here somehow - I\'m assuming it was from various merges with `mrtk_development` - I didn\'t touch anything directly nor did I intentionally add them to my commits.\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
459217152,5011,b'fix packagingEnabled pipeline parameter',"b""## Overview\r\nQuick fix for the templates - it turns out the variable expansion didn't work for the packagingEnabled parameter.\r\n"""
459164194,5007,b'Remove update repaint method in build window',"b'## Overview\r\nWith build window visible and project running, developers notice massive performance drop. Even without play mode, this window is repainting itself more than necessary due to update() method.\r\n\r\nThis change just removes the excessive repaint\r\n\r\n## Changes\r\n- Fixes: #5003 \r\n\r\n\r\n## Verification\r\nOpened window with game mode and noticed perf drop in half. Now fixed\r\nClose & open window fine\r\nSelect buttons to switch tabs \r\nBuild worked\r\n'"
459131430,5002,b'Change gesture events from simulated hands to start manipulation when tapping',"b'## Overview\r\n\r\nTweak the order of gesture events being raised, as described in #4274.\r\n\r\n## Changes\r\n- Fixes: #4274 .\r\n'"
459095454,5001,b'Print the expected service type when registering fails.',"b'## Overview\r\n\r\nProfiles break all the time because there is no versioning system to fix them. The result is that profiles have to be fixed manually based on lots of pointless error messages: ""Unable to register a service with a null concrete type."".\r\n\r\nPrint the name of the expected service type to make finding the broken profile refs a bit easier.\r\n'"
458956175,5000,"b'[Docs] Update pass 2 - Input, Profiles, screenshot/diagram updates'","b'## Overview\r\nScreenshots, diagrams, layout fix, and improvements in Input and Profiles related pages.\r\nAdded MRTK Input System overview infographics to:\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_DocsPolish2/Documentation/Input/Overview.md\r\n\r\nUpdated screenshots to the new MRTK profile inspector:\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_DocsPolish2/Documentation/MixedRealityConfigurationGuide.md\r\n\r\n## Fixes\r\n#4999 \r\n\r\n'"
458763031,4996,b'Pipeline changes for NuGet release process',"b'## Overview\r\nImplement changes from the NuGet versioning / release planning thread.\r\n- Split mrtk_CI into two templates - CI in AIPMR project will no longer produce NuGet packages. We will set up an internal build that will push CI packages to internal feed in microsoft ADO org. (We can continue publishing packages as before until we communicate the switch internally).\r\n- Release CI in microsoft org (manually triggered) will produce both prerelease and release packages. Pre-release packages will be uploaded to the artifact feed while the release packages will flow through the Release Pipeline after we test the pre-release package and it\'s ready to be published.\r\n- Signing configuration moved to an internal ""build"" repo.\r\n\r\n## Verification\r\nPR validation is not necessary as only CI build will be affected. It will need to be manually switched to use ci-packaging.yml template (if we want to continue publishing NuGet packages to the same feed as before).\r\nI already tested all builds (CI, CI-packaging, CI-release) manually.'"
458751785,4995,b'[Shell Parity] Contextual cursors',"b""Animate cursor based on context.\r\n    \r\nAs far as I can see, the only cases where we need to show cursor context is when we're doing two hand manipulation and when we're using a bounding box. These changes update the cursor context state depending on ManipulationHandler and BoundingBox.\r\n\r\nIf anyone has any additional cases where we need to display a different cursor context, let me know.\r\n"""
458713889,4994,b'Fix links on text prefab documentation',"b'## Overview\r\nFix links to point to github.com instead of github.io\r\n\r\n\r\n## Changes\r\n- Fixes: #4939 \r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
458697366,4993,b'Update Wireframe Shader & Inspector for transparency support',"b""## Overview\r\nThis change updates the MRTK wireframe shader to support multiple rendering modes identical to the functionality in the MRTK standard shader. This is primarily to support transparency & other similar settings. \r\n\r\nThe change creates a new base shaderGUI inspector class to be shared by both wireframe & standard shader. The related functionality is removed from StandardShaderGUI and WireframeShaderGUI is given the necessary code to render it's base properties plus the shared rendering mode-type properties. \r\n\r\nThe shader is also updated to take the output alpha from both the base & wire color values instead of just wire intensity which will always be transparent on the faces. This gives developers more flexibility and control\r\n\r\n## Changes\r\n- Fixes: #4992 \r\n\r\n## Verification\r\n![image](https://user-images.githubusercontent.com/25975362/59857025-5ac92100-9378-11e9-8fc8-c49afed02a35.png)\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/59857035-63215c00-9378-11e9-87a0-fd9647925d31.png)\r\n\r\n![image](https://user-images.githubusercontent.com/25975362/59857062-6ddbf100-9378-11e9-8557-6603f176846f.png)\r\n\r\n"""
458633827,4991,b'Stop MRTK resets with inspector tab selection & disable MRTK profile inspectors in play mode',"b'## Overview\r\n\r\nMRTK services are not harden to be reliable enough to be destroyed & recreated at runtime atm. There is work to make this better. This change though does two things\r\n\r\n1) Ensure changing tabs in the MRTK inspector is not considered as a profile ""change"" which will call MRTK to reset configuration. \r\n\r\n2) If in play mode, all profile inspector GUI\'s are disabled from editing\r\n\r\nNumber 2 was added because\r\na) Some MRTK profile changes will cause a reset which will spew errors & problems as in #4944 and #3945\r\nb) Some MRTK profiles changes will not be consumed when changed at runtime. For example, modifying the MRTK near clip plane value in the camera profile will not modify the actual camera near clip plane at runtime. \r\n\r\nDrawback: if a developer wants to make a profile change even though they are aware it will not take effect to next build/play, they will have to exit play mode to make any edits. \r\n\r\nWhen MRTK services are more stable, it might be worth re-considering number 2. But then it would still have to be communicated per profile and possibly even per property, that some settings will not take effect immediately. \r\n\r\n## Changes\r\n- Fixes: #4944 \r\nRelated: #3945\r\n\r\n## Verification\r\nEnter play mode and cannot edit both MRTK inspector when selecting game object and cannot edit profiles when drilldown on their own inspectors\r\n'"
458278593,4984,"b""Update the HL2 profile description's SA section""",b'This provides a little history for why the SA system was disabled by default on the HL2 profiles.\r\n\r\n#4945'
458265077,4982,b'CI Debuggability improvements',"b'## Overview\r\nCurrently whenever the AppX build fails (or nuget restore fails), the build will fail ""silently"" in that an error will be reported, but you have no idea what the error actually is. We currently have to remote into the build machines to find the source of the error, or otherwise do a local repro (i.e. build .NET locally using C# projects).\r\n\r\nIdeally, what should actually happen is, our CI pipeline should actually output the logs from msbuild.exe so that we don\'t need to do either of those things - all of the logs should just be visible from the CI output itself.\r\n\r\nWhat this change does is a few things:\r\n1) Adds support for a ""logs directory"" argument for our build tools, which will be the base location for any logs that are generated from sub-processes of our build tools. So while this doesn\'t affect the Unity log location, any processes we spin up from our build code should log there as a base.\r\n2) Adds a NuGet restore and AppX build log (outputted to the logs directory)\r\n3) Updates the YAML to provide the logs directory (and then also print out the results of the build) BEFORE the APPX publish step (which is typically the failing step).\r\n\r\n## Changes\r\n- Fixes: #4644 '"
458248199,4981,b'Update the Toggle Features Panel prefab to have a working profiler button',"b'A previous change to the visualization toggle scripts had updated instances of it, but missed updating the prefab itself - this was initially revealing itself as references to dead scripts, which was fixed by the input recording PR. \r\n\r\nThis change makes it so that the profiler button works again on the prefab.'"
458236944,4975,"b""Make it so that MixedRealityRaycastHit doesn't throw an exception every frame.""","b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4966\r\n\r\nWhen the default raycaster goes through a physics hit and doesn't hit anything, the generated RaycastHit isn't usable. The raycaster returns true when a hit is successful (the only time when the out parameter should be accessed) but otherwise the out parameter shouldn't be used (and it should be null instead)\r\n\r\n lightmapCoord itself is kinda funky when the physics hit doesn't hit anything (if you see the stuff here https://github.com/Unity-Technologies/UnityCsReference/blob/master/Modules/Physics/ScriptBindings/Dynamics.bindings.cs you'll find that it actually tries to do stuff, but the object basically isn't valid to do stuff.) Since RaycastHit is a struct it's not a nullable type, but those objects really aren't safe to use in the case where the physics hit failed.\r\n\r\nAlso adds a test to show how this all works end to end (that it doesn't throw, and that it's null in that case)."""
458171619,4974,"b""Don't fire pointer events if IsInteractionEnabled == false""","b""## Overview\r\nThe bug listed in #4857 was caused by a missed check `BaseControllerPointer`:\r\n- Pointer Up/down events were fired without checking `IsInteractionEnabled`\r\n- This caused Pointer Up event to be fired by the GrabPointer, even when it was disabled. The repro in #4857 had a modal dialog that would show when a button B was clicked. The modal would then disappear whenever it saw a click form any pointer. The bug was that after user pressed select on controller, Bwould receive click from line pointer, which would show modal M. Then the grab pointer (from that same select gesture) would fire a second click, which would hide the modal M.\r\n\r\n## Changes\r\n- Fixes: #4857 \r\n- Also remove extra 0.05 m buffer when doing test for is sphere collider near grabbable. This was causing confusing UX feedback where the line pointer would disappear (therefore communicating that object is close enough to grab), but object was not actually grabbable.\r\n\r\n## Note\r\nThis has been successfully tested both on device and in editor, doesn't break existing components such as `ManipulationHandler`.\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
458111159,4973,b'Update SceneSystemContentLoading.md',"b'Added alternative text to picture brackets to detect more easily when picture references are broken and updated to the correct uppercase ""PNG"".'"
458108042,4972,b'Update SceneSystemGettingStarted',b'Updating the picture link to make it display correctly when clicking on the page.\r\n'
458059620,4970,b'Cleanup usages of old input system API (Register/Unregister)',"b'## Overview\r\nFollow-up to change of `IMixedRealityEventSystem` API in PR #4716.  Corresponds to task #4847.\r\n\r\n## Changes\r\n* Removes usage of `Register(gameObject)` and `Unregister(gameObject)` from mrtk code base. Marks both as Obsolete.\r\n* Removes inheritance on `InputSystemGlobalListener` and marks it as obsolete.\r\n* Adds alternative helper component `InputSystemGlobalHandlerListener`, which behaves same way as the old one, but through the new API. Use this new class as a base class, where applicable.\r\n* Moves check for using old and new API in a conflicting way to moment of registration. Emit error, if components on the same object use old and new API at the same time. This is a follow-up to comments on #4716 .\r\n* Adds new tests for input system and new input handler base component.'"
457981289,4965,b'Porting modified StablizationPlaneModifier from HoloToolkit',"b'## Overview\r\nHoloLens 1 and HoloLens 2 support SetFocusPoint which uses a plane to do late stage reprojection. For HoloLens 1 this is the best solution to get hologram stabilization, for HoloLens 2 this is a good solution if you:\r\n- Are using Unity UI (which does not write depth)\r\n- Do not want to use depth buffer sharing (potentially due to performance concerns)\r\n- An interim solution while working to make your application properly write to the depth buffer\r\n\r\nThere are five modes that are supported in this solution:\r\n1) Fixed- Sets a fixed plane at a user specified distance along the users gaze vector. 2m is the actual focus of the holograms which is why it is chosen as a default value.\r\n2) Gaze Hit- Focus plane is set based on the hit position of the gaze ray and is oriented along the users gaze vector. \r\n3) Plane Override- Focus plane is based on where an override plane specifies it should be. This can be programmatically updated everyone frame. This can be especially useful for planar UI elements, and will make them appear more stable\r\n4) Target Override- Focus plane position is based on a transform and oriented towards the user. This is useful for if the user is looking at an object, or an object that is moving. \r\n5) Off- This should be set if you want to use the default system behavior, or you want to switch at runtime to depth LSR \r\n\r\nThere is one more mode that could be added on HoloLens 2, which is an eye gaze based approach. Fundamentally, Planar LSR is about trying to determine user dwell to stabilize at that location. By implementing a eye gaze hit it will increase the likelihood that the plane is at the correct location. \r\n\r\n## Changes\r\n- From v1 implementation the plane override and target override modes have been added\r\n- Instead of a series of Booleans, the logic has been made clearer with an enum\r\n- Gizmos logic has been adjusted to render plane correctly\r\n- Added better lerp in order to decrease jitter\r\n- Removed Singleton\r\n\r\n## Verification\r\nReviewers should ensure that I am following the proper coding style for MRTK, verify behavior, and ensure that file is in the correct location'"
457898709,4964,b'Allow setting the Billboard TargetTransform from code',"b'## Overview\r\nThe current implementation does not allow for spawning a billboard in, because the target cannot be set. Most of the solver allow for doing that. This fixes it.'"
457648744,4948,b'Update SceneSystemGettingStarted.md',"b'Several typo fixes. \r\nBy the way, there is no "" ! [ ] (../Images/SceneSystem/MRTK_SceneSystemProfileEditorSettings.png)""\r\n'"
457590650,4947,b'Fixing Normal Direction on Back Face Triangles',"b'## Overview\r\nWhen rendering the back faces of triangles, the normals are flipped the opposite way which can lead to artifacts in lighting calculations and other techniques which utilize normals. This change flips the normals based on which side of the triangle face is being rendered.\r\n\r\n![Compare](https://user-images.githubusercontent.com/13305729/59703195-37eb1100-91ae-11e9-807b-7e42baf5e5f4.png)\r\n\r\n## Changes\r\n\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4946\r\n\r\n\r\n## Verification\r\nTo verify the fix look at lit surfaces with back face culling disabled in the Material Gallery.\r\n\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
457508169,4942,b'Poke pointer overlap test to replace static touchables list',"b'## Overview\r\nReplace the touchable search in a static instance list with a physics overlap test.\r\n\r\nThe `distBack` property has been renamed to `pokeThreshold`. This is the counterpart to the `debounceThreshold` value.\r\n\r\nThe `distFront` property has been moved to the PokePointer and renamed to `touchableDistance`. This is the distance at which interaction with the pointer will start.\r\n\r\n## Changes\r\n- Fixes: #4218 .\r\n\r\n_Note: Contains touchables tests from #4893, this should be merged soon._\r\n'"
457465998,4937,b'Build window performance fix',b'## Overview\r\nFixing issue where the whole editor is locked by periodically checking for new appx directories.\r\n#3264\r\n#5003\r\n\r\n## Changes\r\n- Removed periodic build checking\r\n- Added a refresh button to check for builds\r\n- Added checking when switching to the deploy tab.'
457240568,4930,b'MRTK Example quick fixes',"b""## Overview\r\nThis fixes two minor things in MRTK example components. \r\n1) BoundingBox does not auto allocate it's UnityEvents. This makes it annoying when using BoundingBox component dynamically and subscribing via code/AddListener() because the developer needs to check if the property is null and if so, do the allocation him/herself. \r\n\r\n2) Pinch slider has multiple tick mark sphere balls that each have their own draw call for rendering. This change creates a material for them and turns on GPU instancing to reduce 13 draw calls to 1. \r\n\r\n## Changes\r\n- Fixes: #4929 \r\n\r\n\r\n## Verification\r\n1) Tested out that is no longer null\r\n2) View change in Frame debugger"""
457237016,4928,b'Update UI Building Blocks on GettingStarted for parity',b'## Overview\r\nUpdating UI Building Blocks links & table section on GettingStarted doc to match the home readme page for consistency & parity:\r\nhttps://microsoft.github.io/MixedRealityToolkit-Unity/README.html\r\n\r\n## Changes\r\n- Fixes: #4916 \r\n\r\n## Verification\r\nView preview page and click links'
457231982,4927,b'Updating Interactable.md for shader theme content',b'## Overview\r\nAdding information on best practices to extend InteractableTheme for setting shader properties. Focusing on\r\n1) MaterialPropertyBlock\r\n2) Using shader integer keys over string keys\r\n\r\nAlso fixed some inlining errors and added bullet points\r\n\r\n## Changes\r\n- Fixes: #4228 \r\n\r\nRelated: #4819 \r\n\r\n## Verification\r\nLooked at preview content'
457195102,4926,b'Fix interpolation meta file serialization',"b'## Overview\r\nThe two interpolation meta files added in #4677 had some trailing tabs for some reason.\r\nThis was causing Unity 2019.3 to regenerate these metas from scratch, including changing their GUIDs.\r\nThis PR puts the meta serialization in-line with other metas.'"
457191802,4925,b'Remove warnings in Unity 2019',"b""## Overview\r\nMixedRealityToolkitFacadeHandler and ServiceFacadeInspector:\r\n![image](https://user-images.githubusercontent.com/3580640/59643072-38d36280-911c-11e9-9279-0daed85e3372.png)\r\n\r\nPlatform Utility:\r\n![image](https://user-images.githubusercontent.com/3580640/59643081-412b9d80-911c-11e9-9e65-4fb7d09b0c6a.png)\r\n![image](https://user-images.githubusercontent.com/3580640/59643085-44268e00-911c-11e9-9b27-cd1095c1322d.png)\r\n\r\nMixedRealityEditorSettings:\r\n![image](https://user-images.githubusercontent.com/3580640/59643189-86e86600-911c-11e9-9236-6396905faec5.png)\r\n\r\nNote: This doesn't remove all issues with 2019.3, as that version adds a requirement for the `Unity.ugui` package to be added to all our asmdefs (#4545). Unfortunately, that fix is backwards compatible with previous versions of Unity 2019 but causes errors in Unity 2018.\r\n\r\n## Fixes\r\nFixes: #4831"""
457187404,4924,b'fix definition of camera system interface',b'The camera system interface defines it as a data provider (incorrect) while the concrete class derives from BaseCoreSystem (correct).\r\n\r\nThis inconsistency was preventing the camera system to be correctly registered with the service registry and blocks the future ability to run it as a stand alone service.\r\n\r\nThis change resolves the consistency issue.'
457186515,4923,b'[Docs] Landing page & docs left navigation improvements',"b""## Overview\r\n### Landing page\r\n- Updated landing page's **Feature Areas** section. Now each feature links to the corresponding page in the documentation portal.\r\n- Added entry to important features such as **Profiles**, **In-Editor Simulation**, **Multi-Scene Manager(Scene System), and Experimental features**.\r\n- Added clear entry to the **Getting Started** and **Documentation** portal.\r\n### Docs portal left navigation menu\r\n- Reduced unnecessary hierarchy in the Documentation page's left nav pane which makes a lot of important pages hidden in default. Since we have enough vertical space, it would be better to reduce the hierarchy, click count and expose the pages. \r\n- Removed **About MRTK** menu which only contained **Authors** page. Moved **Authors** menu down to the bottom of the left nav. \r\n- Added missing nav menus for these pages: **Scene System**, **Profile configuration**, **MRTK Standard Shader**\r\n\r\n## Preview link\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/tree/mrtk_development_DocsUpdates\r\n\r\n![2019-06-17 15_53_35-cre8ivepark_MixedRealityToolkit-Unity at mrtk_development_DocsUpdates](https://user-images.githubusercontent.com/13754172/59642286-391e2e80-9119-11e9-9f99-4cc36bb5bd20.png)\r\n\r\n## Changes\r\n- Fixes: #4916 #4814 #4779 Part of #4792\r\n\r\n## Branch\r\nThis change is based on the **mrtk_development** branch\r\n\r\n"""
457177545,4922,b'Fix build warnings',"b""## Overview\r\nThe current state of mrtk_development had a few build warnings.\r\n\r\nEyeCalibrationChecker: Changed from `#if UNITY_EDITOR` to `if (Application.isEditor)`, since the code itself is outside the `UnityEditor` namespace and will build for device.\r\n\r\nMixedRealityCapabilityDemo: The `Start` method was incorrectly marked as asynchronous.\r\n\r\nMixedRealitySceneSystemProfile: Some public properties were marked as `#if UNITY_EDITOR`. I removed these, so the corresponding serialized fields were referenced elsewhere. I wasn't sure the original intent in keeping these `#if`ed out, @railboy?"""
457167690,4921,b'fix bad xml doc tag',b'## Overview\r\nFixes doc generation error due to a badly formed xml doc tag.\r\n'
457138471,4919,b'Updates Eye Tracking Demo to use Scene System',"b'## Overview\r\n\r\nThe Eye Tracking Demo uses a manager scene and additive loading, which is an ideal case for a Scene System demonstration. This PR updates the demo to use the scene system for loading and unloading of content.\r\n\r\n- SceneSystem is now enabled in eye tracking configuration profile\r\n- SceneSystem profile includes manager scene and all content scenes. (Lighting scene is disabled.)\r\n- `LoadAdditiveScene.cs` and `OnLoadStartScene.cs` now use `MixedRealityToolkit.SceneSystem` to load content instead of `SceneManager`.\r\n\r\n## Changes\r\n- Related to #3767\r\n\r\n## Verification\r\n@sostel Can you verify that everything still works as intended?\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
456517338,4909,b'Added some folder meta',b'Just an annoying missing folder meta file'
456517018,4908,b'Rearranging order of Instance and Platform check in MixedRealityToolkit',"b""## Overview\r\nthe MRTK first checks the existence of concrete type instances and then whether they support the current platform. This is the wrong order because they're allowed to be non existent when they do not support the current platform. Rearranging the checks fixes this.\r\n\r\n## Changes\r\n- Fixes: #3567 ."""
456507082,4906,b'Updated DefaultMixedRealityCameraProfile from 0.85m to 0.1m',"b""## Describe the bug\r\nDefaultMixedRealityCameraProfile's near clipping distance is 0.85m\r\nThis clipping plane creates some confusion for the HoloLens (1st gen) developers since objects are abruptly disappearing from 0.85m distance. There are many apps that require content observation closer than 0.85m (e.g. viewing architectural model). \r\nInstead of forcing hard/abrupt clipping by the camera, we recommend using MRTK Standard Shader's Near Fade property to gradually fade out the objects in the near distance range. (~0.45m) \r\n\r\n## Changes\r\n- Fixes: #4905 \r\n\r\n"""
456420369,4899,b' Removes OnValidate in cases where it was being used inappropriately',"b""## Overview\r\n\r\nThere were several cases where OnValidate was being used inappropriately. This PR either moves those checks into Awake / OnEnable or removes them entirely.\r\n\r\nOnValidate should be used to validate settings when standard field and RequireComponent attributes aren't up to the task, and where the same validation in an inspector would be unreasonably complex.\r\n\r\nSome cases use OnValidate correctly. They have been marked with a comment.\r\n\r\nExecuteInEditMode has been replaced with [ExecuteAlways](https://docs.unity3d.com/ScriptReference/ExecuteAlways.html) for consistency. Behavior is the same.\r\n\r\n## Changes\r\n- Fixes: #4202 """
456409683,4898,b'Default GrabPointer grab radius',"b'## Overview\r\nAddresses good defaults for the `GrabPointer`.\r\n\r\nAs issue mentions - default radius was set to 15cm. Feedback has been that its much too large. The propose default is 5cm.\r\n\r\n## Changes\r\n- Fixes: #4371 \r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
456352780,4897,b'Fix docs for IMixedRealityEventSystem',"b'## Overview\r\nRemove examples with templates from /// comments, because they seem to be unsupported by the docs parser.'"
456333533,4895,b'[Shell parity] Bounding Box Proximity Scaling handles',b'## Overview\r\nUpdated PR replacing #4646\r\nMerged with the latest mrtk_development branch.\r\n\r\nFixes #4415 \r\n\r\n'
456320198,4894,b'Update the UWP build tools to support adding the Gaze Input capability automatically',"b""This change is intended to help make the eye tracking work a little easier to consume. Eye tracking requires the gazeInput capability setup on the Visual Studio project, but Unity currently doesn't support having this functionality in Unity itself. As a result, when you build the Unity project, you have to modify your AppX manifest and add the gazeInput capability. This is a huge pain for people who want to use eye tracking.\r\n\r\nThis change gets around this by adding an optional build flag that, when set, will add the capability to the manifest, and this will happen either at:\r\n\r\n1) After the Unity build.\r\n2) Before running the appx build.\r\n\r\nThe function itself is idempotent anyway so it's safe to invoke in both cases. This will also handle cases where the appx solution was built a while back (or was done with the unity tooling instead of our tooling).\r\n\r\n![image](https://user-images.githubusercontent.com/5840182/59870273-132ba080-934a-11e9-8746-268083cf25f9.png)\r\n\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4245"""
456280913,4893,b'Playmode tests for NearInteractionTouchable classes',"b'## Overview\r\n\r\nAdd playmode tests for basic NearInteractionTouchable functionality.\r\n\r\nThe tests count touchable events to make sure the 3 touchable types behave as expected.\r\n\r\n## Verification\r\nOpen the Unity test runner, switch to PlayMode tests and run the NearInteractionTouchableTests section.'"
456200014,4892,"b'Revert ""Make EyeTrackingTarget\'s Start() function match the definition of its base class""'",b'Reverts microsoft/MixedRealityToolkit-Unity#4850'
456186187,4891,b'Pull down the RC2.1 hotfixes into mrtk_development',b''
456139396,4889,b'Jganser ci runner patch multicore appx build',"b'## Overview\r\n\r\ncommandline appx build with the functionality of the mrtk utillities\r\nmulticore option for appx build\r\n\r\n## Changes\r\n- Fixes: \r\n     issues with appx build in batchmode\r\n- Adds Feature:\r\n     Multi core appx build through msbuild flags /m /nr:false\r\n\r\n## BuildTool apporach\r\n```[c#]\r\npublic static async void BuildAndBundle()\r\n{\r\n           SetUpHololensBuildSettings(); // setup your build preferences in case they differ from developer machine to CI runners intention\r\n           \r\n            // First build SLN            \r\n            UnityPlayerBuildTools.StartCommandLineBuild(true);\r\n            var buildInfo = new UwpBuildInfo(true);\r\n            buildInfo.Configuration = ""Master""; // or what ever you desire\r\n            buildInfo.BuildPlatform = EditorUserBuildSettings.wsaArchitecture; // still targeting Hololens 1\r\n            buildInfo.Multicore = true;\r\n            \r\n\r\n            // Next build the APPX from Solution\r\n            //EditorAssemblyReloadManager.LockReloadAssemblies = true; //was already set in StartCommandLineBuild\r\n            UwpAppxBuildTools.BuildAppx(buildInfo);\r\n            EditorAssemblyReloadManager.LockReloadAssemblies = false;\r\n}\r\n```'"
456125710,4887,b'Change font size of ToolTip',b'## Overview\r\nFont size of ToolTip changes ToolTip now without editing the text first. FontSize is available in scripts now. \r\n\r\n## Changes\r\n- Fixes: #4886\r\n\r\n![tooltip_font_does_change](https://user-images.githubusercontent.com/17428923/59495430-85563e00-8e8f-11e9-92d2-47e104ac2cda.gif)\r\n\r\n'
456012892,4882,"b'Add checkcapability api, add demo scene'","b'This change introduces a new API to check if the platform on which an app is running supports specific capabilities:\r\n\r\n- Articulated hands\r\n- GGV hands\r\n- Motion controllers\r\n- Eye tracking\r\n- Voice command (app defined keywords)\r\n- Voice dictation (speech to text)\r\n- Spatial awareness meshes\r\n- Spatial awareness planes (future proofing, no provider currently exists)\r\n- Spatial awareness points (future proofing, no provider currently exists)\r\n\r\nThe change adds the MixedRealityCapability enum and IMixedRealityCapabilityCheck interface, which defines the CheckCapability() method. \r\n\r\nThe input system, spatial awareness system and relevant data providers now implement the IMixedRealityCapabilityCheck interface and report the status of the capabilities using a calling pattern similar to the following:\r\n\r\n``` \r\n            IMixedRealityCapabilityCheck capabilityChecker = InputSystem as IMixedRealityCapabilityCheck;\r\n            if (capabilityChecker != null)\r\n            {\r\n                bool isSupported = capabilityChecker.CheckCapability(MixedRealityCapability.ArticulatedHand);\r\n            }            \r\n```\r\n\r\nIf an application wishes to know WHICH manager is providing the support, it can request the data providers from the system and call CheckCapability on each until finding the match.\r\n\r\nAlso added is a demo scene illustrating how to use the new interface and display the status of each capability on the running platform. The following image was captured running in the editor with the build type set to UWP and all default systems enabled.\r\n\r\n![image](https://user-images.githubusercontent.com/13281406/59537709-323eb400-8eac-11e9-855a-4f8dcde26e5d.png)\r\n\r\n\r\nTesting performed:\r\n- Editor play mode\r\n- Compile x64 and run on Windows Mixed Reality Immersive headset\r\n- Compile x86 and run on HoloLens\r\n- Build using IL2CPP and .net backends\r\n- Run edit mode tests\r\n\r\nFixes https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4250'"
455832544,4879,b'Update the version to RC2.1',"b""We're patching the latest release with some pressable button fixes to make buttons work."""
455742155,4876,b'enabled pressable button inspector for derived types ',"b""and adjusted undo messages\r\n\r\n## Overview\r\nPressableButtonHololens2 wasn't exposing any properties in the editor because inspector was only defined for PressableButton class.  Enabled the fallback flag so it's available for all derived types and adjusted the undo msgs that would refer to PressableButton base type.\r\n\r\n## Changes\r\n- Fixes: #4869 \r\n\r\n\r\n## Verification\r\nPressableButtonHololens2  is used in PressableButton Example Scene. Now the buttons will show the properties in the editor and also have the planes to adjust distances"""
455726353,4875,b'Fix deinitialization of static fields',"b'## Overview\r\n`WindowsMixedRealityDeviceManager` keeps gesture recognizers as static fields. When running tests, the manager itself is recreated, but static fields maintain their values. Need to manually reset them to null, when disabling the manager. '"
455698266,4872,b'fixed initial offset for pushable button part',"b""fixes planes going crazy during runtime when there's a transform on the button and a local transform on the moveable button part\r\n\r\n## Overview\r\nwhen storing the initaloffset the world transform wasn't applied (so basically the local offset was missing the world scale that made the planes shift whenever the moving visuals had an offset applied)\r\n\r\n## Changes\r\n- Fixes: #4870 \r\n\r\n\r\n## Verification\r\nused Julias example scene to verify , tested existing buttons in examples\r\n"""
455495869,4865,b'190612 Eye tracking docs update - part 1. ',"b'## Overview\r\nStarted updating the MRTK eye tracking docs. Mostly focused on the following docs today:\r\n- EyeTracking_Main.md\r\n- EyeTracking_ExamplesOverview.md\r\n- EyeTracking_TargetSelection.md\r\n- EyeTracking_EyeGazeProvider.md\r\n\r\n## Changes\r\n- Numerous changes ranging from fixing typos, reformatting, updating screenshots, etc.'"
455454032,4858,b'Consistency in assembly and asmdef names',"b'The change updates all assembly names and asmdef file names to match the following format:\r\n\r\nMicrosoft.MixedReality.Toolkit.<name[.subname]>\r\n\r\nDue to file name and path lengths, the examples\\demos assemblies were renamed to drop ""Examples"" from their names.\r\n\r\nTesting performed\r\n- Run solver demo scene in the editor, ensure\r\n    - Object selection\r\n    - Teleport\r\n    - Boundary\r\n    - Diagnostics\r\n- Build with .net backend and compile in Visual Studio 2017\r\n- Editor tests pass'"
455399824,4856,b'Bounding Box proximity scaling of handles (Shell parity) and rigid body fix.',b'## Overview\r\nthis update allows the handles to have a scaling behavior like the Boundingbox in Shell.\r\nAlso a collider such as a Floor can be set in the inspector to not collide with handle colliders.\r\nThis PR incorporates the changes from PR #4646\r\n\r\nThe files checked in include the HandInteractionExamples scene file with the property values changed to create the desired proximity effects.\r\n'
455266361,4854,b'added ForceEndManipulation to ManipulationHandler',b' ## Overview\r\nManipulationHandler now has a ForceEndManipulation that will end the currently active manipulation state and release the object\r\n- change includes sample scene and playmode unit test\r\n\r\n## Changes\r\n- Fixes: #4584 \r\n\r\n\r\n## Verification\r\nAdded sample scene that shows functionality\r\n![mainpulationhandlerplayground](https://user-images.githubusercontent.com/36998103/59362379-4018fb80-8d2b-11e9-9c66-67e3d72bfd79.png)\r\n\r\nMoving sphere into the wall will call ForceEndManipulation\r\n\r\n![manipulation_handler_force_release](https://user-images.githubusercontent.com/36998103/59362439-58891600-8d2b-11e9-8dd1-4e87ce7a2f46.gif)\r\n\r\n'
455247319,4853,"b'Temporarily remove the ""Architecture"" tab from the github.io docs'","b""The Architecture side of the MRTK docs has been pretty sparse for a long time, and there's currently an issue where clicking on the 'Architecture' tab will go to a seemingly random page (spatial awareness). After reading through all of these pages, there's SOME interesting content, but probably 95% of it isn't actually useful for the reader (i.e. many things list random names without giving any relationship between them)\r\n\r\nWhile I work on getting new architecture docs up, we're removing this tab to prevent us from leading people down the wrong path. I'm not deleting the existing MD files themselves, just making them WAY harder to access. I will do the actual cleanup as part of my next docs pass.\r\n\r\n## Changes\r\n- Fixes: #4789 """
455226710,4851,b'Update the getting started docs to include UWP build setting recommendations.',"b'This is such a common question that I wanted to add some comments in the getting started doc about it. People are trying to configure their target/platform in some cases to the highest number, but in reality the defaults are actually pretty good. The only key part is the requirement to check that 18362 exists in the list, and if not, provides the solution for how to fix it.\r\n\r\nAlso changes the requirements section up a little to list the requirement link up front, and THEN providing clarification. The reality is that if you\'re targetting cross-platform with MRTK (which you should be) we shouldn\'t tell people that ""oh actually it\'s not REALLY needed"" and have them run into weird stuff down the line - let\'s get people to have the same prereqs that we have (which is just the latest set of SDKs) and lead them down the path of success.\r\n\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4406\r\n'"
455216701,4850,"b""Make EyeTrackingTarget's Start() function match the definition of its base class""",b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4849\r\n\r\nI had missed this in https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4845'
455157471,4848,b'Pull in the remaining RC2 stabilization changes into mrtk_development',b''
455149228,4846,b'Fix the docs build caused by previous eye tracking change',"b""Caused by this change:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/4697\r\n\r\nThis fix only resolves the docs build issue, but doesn't actually fix the docs themselves which are technically out of date with that change."""
455144945,4845,b'Fix warnings in EyeTrackingTarget',"b'These warnings were introduced in a previous eye tracking PR, tidying them up.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/4697'"
455133532,4844,b'Fix MixedRealityToolkitFiles utility to handle the nuget resource path format',"b'## Overview\r\n\r\nThe files utility was using a simple ""endsWith"" string comparison to find resource folders for MRTK. This does not work for the path format used by nuget packages, e.g.:\r\n\r\n""MixedRealityToolkit.Services"" (Unity package)\r\nvs.\r\n""Microsoft.MixedReality.Toolkit.Services.2.0.0-20190611.2/MRTK"" (nuget package)\r\n\r\nThe fix changes the MixedRealityToolkitFiles utility class to search for both patterns and find the matching module name.\r\n\r\n## Changes\r\n- Fixes: #4827 \r\n\r\n## Verification\r\n* Create a new Unity project\r\n* Install latest NuGet for Unity from here: [https://github.com/GlitchEnzo/NuGetForUnity/releases](https://github.com/GlitchEnzo/NuGetForUnity/releases)\r\n* Add the source URL https://pkgs.dev.azure.com/aipmr/_packaging/MixedRealityToolkit/nuget/v2/ through _Edit > Preferences > NuGet_ for Unity. Uncheck ""Read-Only Packaging Files""\r\n* Open the _NuGet > Manage NuGet Packages_ menu\r\n* Check _Show Prerelease_\r\n* Search for Microsoft.MixedReality.Toolkit and install\r\n* Setup the scene with _Mixed Reality Toolkit > Add to Scene and Configure_\r\n* Enter playmode and hold space: Hand joint visualizers are in the same spot (bug)\r\n\r\n* Open `Assets/packages.config` and change MRTK package versions to **2.0.0-20190613.4** (a nuget package with the fix applied)\r\n* Delete all ""Microsoft.MixedReality.Toolkit***"" folders under _Assets/Packages_\r\n* Unity will automatically download the new package versions\r\n* Enter playmode again and hold space: Hand visualizers should be working\r\n'"
454969447,4842,b'Bounding Box update when boundsOverride changes',b'## Overview\r\n- Fixes: #4557 \r\n- Add test case in BoundingBoxRuntimeExample\r\n'
454941806,4841,b'Reduce count and improve assembly naming consistency',"b'This change combines core and some editor assemblies to reduce the number of dlls generated and visual studio projects in the solution.\r\n\r\nIt also moves most editor related code into a single Editor folder.\r\n\r\nLastly, it updates all assembly names to follow the pattern of Micosoft.MixedReality.Toolkit.<name> and renames the asmdef files to match.\r\n\r\nGets as close as is currently possible (without significant code changes) to #4453.\r\n\r\n\r\nTesting performed:\r\n- Solvers scene\r\n    - Verify input, teleport, diagnostics and boundary systems function as expected\r\n- Edit mode tests pass'"
454888059,4840,b'Create a SpatialLocalizer registration system to support multiple types of localization from the same compiled app',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
454887192,4839,b'Create a SpatialLocalizer registration system to support multiple types of localization from the same compiled app',b''
454861426,4838,b'MRTK Instance Application Event Handling / Deterministic Instance Selection',"b""## Overview\r\nMoves all editor / application event listening to static handlers. Previously MixedRealityToolkit instances were responsible for monitoring application state changes individually. In practice this led to dead instances stopping play mode when they couldn't find a config profile.\r\n\r\nRegistered instances are now sorted by instance ID so that automatic active instance selection is deterministic.\r\n\r\n## Changes\r\n- Fixes: #4121\r\n\r\n## Verification\r\n- All EditMode tests pass.\r\n- ~~All PlayMode tests pass if executed one at a time. When executed all at once, PressableButtonTests fail due to a GestureRecognizer error. @julenka is this a regression?~~\r\n- All PlayMode tests pass after merging latest changes from dev branch."""
454787142,4836,b'Finger Tip Cursor Pairity',"b'## Overview\r\nPart of #4200 UX Controls Parity with HoloLens 2 Shell\r\nThis pull request introduces a finger tip ""shadow"" using the ProximityLight system. Proximity lights can now have per material color overrides and a ""subtractive light"" option. The finger tip cursor has also been updated to mimic the behavior found in the shell (size, shape, color, movement, etc.).\r\n\r\n![ShellCursor](https://user-images.githubusercontent.com/13305729/59232859-f8fc0080-8b9a-11e9-8385-688e552da419.gif)\r\n[Better quality video link.](https://microsoft-my.sharepoint.com/:v:/p/thmicka/EVsRccmGTuJHt4I_EL_y42YBDXbbEJ-gbVGKWx3Xfsb20Q?e=iT9srx)\r\n\r\n![OverrideColor](https://user-images.githubusercontent.com/13305729/59232752-91de4c00-8b9a-11e9-89ff-4fd46eabf6b4.png)\r\n\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4411 & https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4413\r\n\r\n## Verification\r\nTo test these changes the slate found in the HandInteractionExamples scene best demonstrates the new changes.\r\n>\r\n> git fetch origin pull/4836/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
454767509,4835,b'changed ManipulationHandler state switch to ignore one hand interactions in twoHandOnly mode',"b'## Overview\r\nManipulationHandler used to default one hand interactions to move without taking into account the ""TwoHandOnly"" mode. \r\nAdded an early out for no hand and (one hand in TwoHandsOnly mode) in the ManipulationHandlers state switch\r\n\r\n\r\n## Changes\r\n- Fixes: #4629 \r\n\r\n\r\n## Verification\r\n- tried all three types of manipulating (OneHandOnly, TwoHandOnly, OneAndTwoHand)\r\n- TwoHandOnly won\'t perform any manipulation on one hand interaction anymore\r\nother two modes stayed as they used to be:\r\n- OneHand will move objects\r\n- TwoAndOneHand will move objects if one hand is used and perform rotate / scale when both hands are used'"
454759514,4834,b'RC2 Release',b'Pull request to take the RC2 payload up to mrtk_release'
454747346,4833,b'Update the version to RC2',b''
454683096,4830,"b""Don't create a rendered object for the None hand joint.""","b'## Overview\r\n\r\nDon\'t create a mesh object in the hand visualizer for the ""None"" joint. The position of that joint is quite arbitrary and creates a distracting floating cube.\r\n\r\n## Changes\r\n- Fixes: #4534 .\r\n'"
454524754,4829,b'Add experimental features guidance to documentation',b'## Overview\r\n- Fixes: #4828\r\n- Also remove empty items QR code and Spatial audio from the Experimental toc.\r\n'
454419664,4826,b'Merge mrtk_release -> mrtk_dev',b'Merge mrtk_release -> mrtk_dev'
454396678,4824,b'Make types needed for Guides to add custom component broadcasters outside the SpectatorView assembly',b'These types need to be public for Guides (or any 3rd party) to provide custom component broadcasters.  ComponentBroadcasterDefinition and StateSynchronizationSceneManager are necessary to register the custom broadcaster service.  GameObjectHierarchyBroadcaster is necessary to attach this MonoBehaviour to the hierarchies that Guides wants to sync.'
454379215,4822,b'Update README.md - Added sample app link (Periodic Table)',b'## Overview\r\nAdded link to the Periodic Table sample app porting story.\r\n'
454360869,4819,b'Update Interactable property code to utilize shader int keys instead of strings',"b""## Overview\r\n\r\nInteractableTheme classes are able to update shader properties such as color or glow, etc in response to scene interactions such as focus or click. These theme handler classes updates shaders in Unity via string properties. Whenever a property is updated via a string key such as GetFloat(), Unity will automatically call Shader.PropertyToId() to get it's int key and then perform the get or the set. \r\n\r\nThis change caches the integer property keys for all property strings in a given theme class so as to help with performance when calling the get/set functions at runtime\r\n\r\n## Changes\r\n- Fixes: #4228 \r\nOptimize Shader property and Material access on Interactable*Theme class\r\n\r\n## Verification\r\nConfirmed HandInteraction scene worked with Interactable classes on changes such as focus or clicks, etc. \r\n"""
454287108,4810,b'U/mattjo/refactor spatial localization',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
454270412,4805,b'Add get services by registrar to the registry',b'This change adds the ability to query the service registry to retrieve all services registered by a specific registrar. This change reduces the amount of code custom registrars are required to write to find their services.'
454269679,4804,b'Fix controller enum values in EditorWindowOptions.json',"b'## Overview\r\nThe SupportedControllerType enum was changed to flags in #3755, but I missed the fact that this enum is used in the json filed used to position the mapping positions. The only thing changed is the `""Controller"":` values.\r\n\r\nBroken:\r\n![MicrosoftTeams-image (3)](https://user-images.githubusercontent.com/3580640/59212364-0c8d7400-8b67-11e9-9bb0-a98d9cb41362.png)\r\n\r\nFixed:\r\n![MicrosoftTeams-image (4)](https://user-images.githubusercontent.com/3580640/59212367-0dbea100-8b67-11e9-8133-1ea5c92de8e8.png)\r\n'"
454255693,4803,b'Fix Scene System Overview link in Mixed Reality Configuration Guide',b'## Overview\r\nRemoved leading slash from scene system overview link.\r\n\r\n## Changes\r\n- Fixes: #4802\r\n\r\n## Verification\r\n@keveleigh Can you verify that this fixes the issue?'
454217268,4799,"b""added handling of lost interaction sources that didn't raise an interactionSourceLost event""","b""## Overview\r\n- added handling for cached ghost controllers that unity's interactionManager sends our way on consecutive editor sessions with different controller setup\r\n- removed existing workaround that breaks controller representations for connected controllers until start button is pressed\r\n\r\n\r\n## Changes\r\n- Fixes: #4748 , #3638 \r\n\r\n\r\n## Verification\r\n- start editor session with controllers connected\r\n- observe visible controller representations\r\n- stop editor simulation\r\n- disconnect WMR controllers by pressing the start button for a long time\r\n- start editor simulation again\r\n- observe no controller representation\r\n- stop simulation\r\n- turn on controllers\r\n- start simulation\r\n- observe visible representation\r\n- try to switch on/off controllers several times during simulation """
453709959,4786,b'Documentation - Getting Started page update',"b""## Overview\r\nDocumentation - Getting Started page update\r\nAdded clear instruction on 'how to reopen the scene'.  (feedback from the community)\r\nAdded a link to '[Text in Unity' guideline page.](https://docs.microsoft.com/en-us/windows/mixed-reality/text-in-unity)\r\n"""
453698501,4785,b'Fix teleport pointer to support mrtk object or standalone service',"b'While working on an experimental standalone teleport service, it was discovered that there were hard coded references to the MixedRealityToolkit object that was blocking the standalone service.\r\n\r\nThis change updates how the teleport pointer behaves and has been tested in the following configurations:\r\n\r\n* MRTK input and teleport enabled\r\n* MRTK input enabled and teleport disabled\r\n* MRTK input enebled, teleport enabled with standalone teleport service prototype\r\n\r\nEach of the above configurations behaved as expected (teleport supported, not supported and supported, respectively).\r\n\r\nThis change is needed to ensure support for a standalone teleportation service is possible without requiring a new version of the mrtk core assembly.'"
453677761,4784,b'Initial addition of far plane property',"b'## Overview\r\nThis changes adds the far clip plane property for both the opaque and transparent system in the camera profile. This is important for MRTK developers to set different far clip plane values for opaque vs transparent. Default in Unity is 1000m which for Hololens is well outside the typical rendering/user volume. However, this large value (1000m) for the far clip plane reduces depth fidelity, especially for 16-bit. \r\n\r\nThis change also updates the default camera profiles to set Transparent far to 50m and Opaque far to 1000m. \r\n\r\n## Changes\r\n- Fixes: #4783 \r\nFar clip plane not settable in MRTK profiles \r\n\r\n## Verification\r\n\r\nTested profiles actually setting correct values on Camera in Unity editor\r\n\r\nTested camera profiles without serialized far field in text file. MRTK takes default set in the script. \r\n\r\nTested far clip plane (transparent) actually set on HL device with objects not rendered\r\n'"
453560098,4780,b'Add initial profile documentation and details on the HL2 profile',"b""Our documentation around profiles is sorely lacking. This is the first step toward getting more stuff:\r\n\r\n- Have a basic description of what profiles are for.\r\n- Have a basic description of the default profile.\r\n- Have a description of the HoloLens2 profile and how it's different.\r\n\r\nThis also deserves having some of the rationale/reasoning behind why there's a profile system, but for that we need to get some more chats going to make sure we're on the same page.\r\n\r\nThis also updates the main getting started page to recommend using the HoloLens2 profile if that's the system they're targetting.\r\n\r\nI also deleted the existing NOTE on the getting started page because it's no longer true (with the addition of the HL2 profile, it will show a picker even if you don't have the examples package)."""
453515584,4775,b'Input recording and playback feature',"b'## Overview\r\n\r\nAdds serialization, services, and tooling for recording hand and camera motion and animating simulated input.\r\n\r\nThe immediate goal is to allow automated testing of interactions and input systems. Another possible use case is animating objects for educational purposes (see #4569)\r\n\r\n## Changes\r\n\r\n* InputRecordingService to record input in the background. The recording buffer is time-limited by default and can be exported at any time, creating a ""rolling buffer"" that can be used for capturing input during interactions.\r\n* InputPlaybackService can load input animation and re-apply it at runtime using the InputSimulationService.\r\n* Serialization utilities for exporting recorded animation into a custom binary format.\r\n\r\n**Note:** These are additional editor features that have been separated out to make code review easier:\r\n* https://github.com/lukastoenneMS/MixedRealityToolkit-Unity/pull/2\r\n* https://github.com/lukastoenneMS/MixedRealityToolkit-Unity/pull/1'"
453438209,4767,b'Add missing namespace to resolve asset retargeting failures',b'See #4700 for more details'
453319416,4765,"b'[RC2] Add ability to scroll, drag UnityUI canvas on HoloLens 1'","b'## Overview\r\nAdd support for drag interactions in Unity UI for HoloLens 1 GGV interactions. This is done by using the pointer position instead of the pointer ray origin in cases when the pointer ray is decoupled from the actual pointer, like with hands (pointer ray is the head, but pointer position is hands).\r\n\r\n## Changes\r\n- Fixes: #4750 \r\n\r\n\r\n## Verification\r\nAll tests done in editor, not on device.\r\n- Tested articulated hands\r\n- Tested gesture hands'"
453282503,4764,b'Consistency: make FocusProvider a core service and not a data provider',"b'Focus provider is considered a core system by the MixedRealityToolkit object. As such, it should implement IMixedRealitySystem, derive from BaseCoreSystem and be registered in the MixedRealityServiceRegistry.\r\n\r\nThis change correctly classifies and registers IMixedRealityFocusProvider instances.\r\n\r\nTested via the solvers scene on OpenVR and Windows Mixed Reality Immersive devices. Teleportation and object selection were the primary focus of interaction testing.'"
453281112,4763,b'prerelease/2.0.0.rc2 stabilization -> mrtk_dev',b'prerelease/2.0.0.rc2 stabilization -> mrtk_dev'
453277535,4762,b'Remove unused scripts from the diagnostics demo scene',"b'#4708 removed a script from the project and removed the need for the diagnostics demo to contain a SpeechInputHandler.\r\n\r\nHowever, I forgot to remove the references to these scripts from the demo scene. This change fixes the issue.'"
453245647,4760,b'Add two hand manip for flattened bounding box',b'## Overview\r\nChange manip type for flattened bounding box from one handed to one and two handed:\r\n\r\n![image](https://user-images.githubusercontent.com/168492/59067703-20835e00-8867-11e9-9a76-af22f064d633.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #4749 \r\n\r\n'
453233892,4758,b'Merge stabilization -> mrtk_dev',b'Merge stabilization -> mrtk_dev'
453148366,4756,b'Update projectversion.txt to 2018.4.1',"b'This change updates the project version for MRTK v2 to Unity 2018.4.1f1 to reduce the number of times customers see the ""you may need to update scripts"" message upon loading the project when cloning from GitHub.\r\n\r\nIt is a smaller version of #4468 that does not yet update the import time check that is part of MRTK (it still checks for 2018.3 in this change). Once the build automation machines are upated  to 2018.4, we will add the import time check back.'"
453141149,4754,b'Feature/spectator view',"b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
453121021,4752,b'Clean up the the MRTK architecture and packaging documents',"b'I\'m in the process of putting up some new MRTK overview docs (i.e. overall architecture, philosophy, that kinda stuff) and when I started that process, I was looking to see what already existed. A lot of this stuff was either not true, aspirational, or no longer accurate. I wanted to ensure that our documents actually reflect the current truth, not the past, not the future, only the current truth.\r\n\r\nI bent this rule a little bit with the MRTK_Modularization file (which still contains references to future), though for those, they should be easy enough just to remove the ""Upcoming Changes"" section once those are done (and they will be done very soon)\r\n\r\nOther things to mention:\r\n\r\n1) We currently only have two packages (foundation, example). Our docs shouldn\'t refer to things that don\'t currently exist, as that only confuses people. And also to be clear, me writing this doesn\'t imply that this is how it will be forever, just that this is currently how things are.\r\n2) The vNext doc actually did have some interesting stuff that probably would be worth carrying forward in the contribution guide (i.e. features must have examples, tests, be programmatically changable and not just at design time). I can carry this forward in a future change.\r\n'"
452977997,4746,b'Update the eye tracking scene sample to have the correct verbal keyword.',"b'The text says ""here"" but the actual keyword is ""over here"" - this is super confusing for folks using it, and it\'s not clear without some unnecessarily deep debugging.\r\n\r\nBasically if you say ""here"" nothing happens - you have to say ""over here"" so we may as well document that you have to say ""over here""'"
452972937,4745,"b""Update the input simulation docs to mention issues with Unity's built in editor simulation""","b'Another point of feedback from partners who hit this (i.e. if you set the holographic emulation setting to ""Simulate in Editor"", the MRTK\'s input simulation won\'t work because Unity will take over the camera and input)\r\n\r\nWe\'re following up with Unity to see if we can get an API to know what the current emulation setting is (such that if unity\'s Simulate in Editor is set, we could show a dialog showing a warning saying that MRTK\'s simulation will be turned off)'"
452968182,4744,b'Update the input simulation docs to explain a little more about camera control',"b""This question came up from some partners, and I noticed that these settings weren't documented."""
452953822,4743,b'Update the diagnostics system documentation to show how to programmatically access it',"b""The docs are already somewhat comprehensive about editor-time visualization but don't provide instructions on how to access things via code."""
452945357,4742,b'Merge in latest changes from stabilization',b''
452763496,4737,b'add missing interface declaration to spatial awareness',"b'When #4593 was merged, the spatial awareness system was updated to implement the IMixedRealityDataProviderAccess interface. With one notable exception....\r\n\r\nIt was never tagged as implementing the interface. \r\n\r\nAll code paths that were added were validated by being used by the now deprecated GetIObserver and GetObservers methods. The only thing missing was the interface in the class definition.\r\n\r\nThis change adds IMixedRealityDataProviderAccess to MixedRealitySpatialAwarenssSystem.'"
452754341,4735,b'Fix: Slate scroll with hand not working with GGV on Hololens 1 and Motion Controllers in VR #4702',b'## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: #4702\r\n\r\n\r\n## Verification\r\nhand held MR Controllers and GGV now scrolls slate control\r\n\r\n'
452750559,4734,b'Depth Buffer Sharing Material Warning',"b'## Overview\r\nWhen enabling depth buffer sharing the stabilization of renderables greatly diminishes when a user looks at a renderable that has a material which does not write to the depth buffer. This has been a common pain point for HoloLens 2 users which don\'t understand why their holograms look distorted or unstable.\r\n\r\nThis pull request introduces a warning and ""Fix Now"" button on materials which are in a project that has depth buffer sharing enabled and do not write depth.\r\n\r\nOn the MRTK/Standard shader:\r\n![DepthWarning](https://user-images.githubusercontent.com/13305729/58995160-f159e780-87a7-11e9-8b4c-f88c60f7c425.png)\r\n\r\nOn the MRTK/Text Mesh Pro shader:\r\n![DepthWarningTMP](https://user-images.githubusercontent.com/13305729/58995166-f454d800-87a7-11e9-9c74-3da05e501960.png)\r\n\r\nIf the ""Fix Now"" button will spawn a dialog confirming the user wants to change the material to write to the depth buffer.\r\n\r\nOther changes include:\r\n\r\n-  Moving the ""Albedo Assigned At Runtime"" option up the inspector for better visibility.\r\n-  Bug fix, allowing the alpha cutoff slider to be adjusted in the  ""Custom"" render mode.\r\n\r\n## Changes\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4733\r\n\r\n\r\n## Verification\r\nTo verify select a material that does not write depth (often transparent or additive materials) and select the ""Fix Now"" button and check if zWrite is now enabled.\r\n'"
452701765,4725,b'Remove need for repeated calls to DisplayOption in WindowsMixedRealitySpatialMeshObserver',"b'The current implementation of the DisplayOption setter in WindowsMixedRealitySpatialMeshObserver checks to see if the value being set is _not_ the same as the current value. Only then will it perform any operations (including updating the material on existing meshes).\r\n\r\nBecause of this, code that changes a material (ec: VisibleMaterial) must set DisplayOption twice.\r\n\r\n```\r\nobserver.VisibleMaterial = newMaterial;\r\nobserver.DisplayOption = SpatialAwarenessMeshDisplayOptions.None;\r\nobserver.DisplayOption = SpatialAwarenessMeshDisplayOptions.Visible;\r\n```\r\n\r\nThis change removes the previous value check and _always_ performs processing when DisplayOption is set. This allows for a more natural calling pattern without the need for knowing the quirks of this observer.\r\n\r\n```\r\nobserver.VisibleMaterial = newMaterial;\r\nobserver.DisplayOption = SpatialAwarenessMeshDisplayOptions.Visible;\r\n```'"
452639264,4722,b'fix for truncating pointer ray length before doing ui raycast',"b""## Overview\r\nCalling UpdatePointerRayOnHit immediately after the Physics Raycast was truncating the ray length before the UI raycast. This can result in selecting a physics hit from a lower-priority layer over a UI hit that is further away but in a higher-priority layer.\r\n\r\n## Changes\r\n- don't truncate pointer ray until after both physics and ui raycasts\r\n- removed UpdatePointerRayOnHit as it's only being done in a single place now\r\n\r\n## Verification\r\nOne side-effect of this change is that it now does the RayStep truncation for SceneQueryType.SphereOverlap where it previously didn't - I don't really have any experience with that pointer type, so I'm not sure how that should be handled. It would be easy enough to check for that case and not do the truncation if that difference in behavior is intentional/significant.\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
452623195,4721,b'Update the Spatial Awareness docs to provide a guide on how to access meshes',"b""We had some repeated questions about how to do this, so I figured it would be nice just to have this in docs.\r\n\r\nUn-obsoletes the GetObserver* functions, because the spatial awareness system doesn't actually have the data provider interface that it references (i.e. it tell you to check to see if it has it, and then you do, and you realize it doesn't have it)"""
452594723,4720,b'Update the spatial awareness docs',"b""- Add an explicit guide on how to disable/hide (feedback from some folks around looking for keywords like 'hide' don't give any hits)\r\n- Make it clearer that the steps on the page aren't necessary for users of the default profile, and also provide a note about the default HL2 profile"""
452544664,4717,b'replaced unity ui textmeshpro example materials with mrtk segoeui SDF material',"b'and resized caption to fit the scrollable box\r\n\r\n## Changes\r\nFixes unity ui example in HandInteractionExample scene that would render the tmp section only in one eye on WMR , Hl1, Hl2\r\n(also fixes overlapping text with dropdown)'"
452509832,4716,b'Make global input events registration per-handler instead of per-object',"b""## Overview\r\nGlobal input events are now registered on a per-component (handler) basis instead of per-object.\r\nThis PR changes the underlying mechanism of how event system handles event registration. Change preserves behavior of old API and doesn't change registration in most places where it's used. This will be subject of subsequent changes.\r\nRemoved async part of registration, as it was hiding at what moment event registration / unregistration would happen.\r\n\r\nProblems of old implementation, fixed with the new one:\r\n- If a component registers for global events, it would receive global input events of all types.\r\n- If one of components on an object registers for global input events, all components on this object will receive global events.\r\n- If two components on the same object listen to global events, and one is disabled, second stops receiving global events."""
452448127,4715,b'Fix cursor so it represents the proper input state',"b'## Overview\r\nAs far as I can see, the state animations were correct, but BaseCursor.CheckCursorState was returning incorrect state for Interact and InteractHover. This was because GGVPointer and ShellHandRayPointer were not correctly updating BaseCursor\'s sources count.\r\n\r\nAs for the ""big dot"" for Select, I don\'t see any evidence of this existing before in MRTK. Is this something that should be added in the scope of this PR?\r\n\r\n## Changes\r\n- Fixes: #4511.\r\n'"
452262813,4710,b'Update other inputsystemprofiles and mark simulation service as cross-editor-platform',"b'## Overview\r\nFollowing up on #4691, a few input system profiles needed to be updated. Additionally, I marked the service itself as cross-editor-platform via the system attribute.\r\n\r\n## Changes\r\n- Additional support for #4601\r\n'"
452259774,4709,b'Update States.cs to use CreateInstance instead of new',"b""## Overview\r\nStates.cs was using `new` to create an instance of a `ScriptableObject` instead of `CreateInstance`.\r\nI'm not fully sure how I got into this state, since the `GetDefaultInteractableStates` method appears to only be called if you don't have a state specified in the Inspector, but the Inspector seems to try to make sure the default asset is always loaded in. Deleting the default asset is a good way to repro this issue.\r\n\r\nNote: this is currently targeting mrtk_development. Feel free to retarget to stabilization if we want to take this there (my branch is based on stabilization, so it won't be bringing over anything extra from dev), but I don't see this as blocking RC2.\r\n\r\n## Changes\r\n- Fixes: #4705 \r\n\r\n## Verification\r\n1. Ensure that this call still creates `States` and uses it correctly"""
452247578,4708,b'Move diagnostic voice command handling out of the demo scene (fix #3637)',b'Many customers noted that the diagnostic visualization toggle keywords only worked in the demo scene (#3637). This change addresses that feedback by doing the following:\r\n\r\n* Adding DiagnosticsSystemVoiceCommands.cs to MixedRealityToolkit.Services.DiagnosticsSystem\r\n* Adding the DiagnosticsSystemVoiceCommands component to the visualization game object created by the diagnostics system\r\n* _Removing_ DiagnosticsDemoControls.cs from MixedRealityToolkit.Examples\\Demos\\Diagnostics\r\n* Updating the demo script to remove DiagnosticsDemoControls and SpeechInputHandler components\r\n* Re-add Toggle Diagnostics and Toggle Profiler actions to the InputActions profile\r\n* Re-add Toggle Diagnostics and Toggle Profiler keywords to the SpeechCommands profile\r\n\r\nThis change also updates how the ShowDiagnostics setter works to avoid disabling the visualization parent game object (which would make it stop responding to keywords)\r\n\r\nFixes #3637'
452225090,4707,b'Fix runtime controller model loading and fix WMRController inheritance',"b'## Overview\r\nThis PR adds a base class for WMR sources, allowing us to remove the confusing and constraining inheritance on WMR controller. This also allows us to do controller-specific things, like loading the controller model, without affecting work done by other sources, like loading the hand mesh.\r\n\r\nThe controller model loading regression happened in #3761, which was done to re-enable hand meshes on HL2. As a result, I felt that fixing both of these issues at the same time made the most sense.\r\n\r\n## Changes\r\n- Fixes: #3771, fixes #4342\r\n\r\n## Verification\r\n1. Verify that input continues to work on all WMR platforms (HL1, HL2, immersive).\r\n2. Verify that motion controller models load at runtime when deployed to a PC\r\n3. Verify that hand meshes continue to display on HL2'"
452012446,4701,b'Add check to assure that closestProximityTouchable is at least distFront away',"b'## Overview\r\ndistFront is now per BaseNearInteractionTouchable. As such, we need to check distFront for each BaseNearInteractionTouchable.\r\n\r\n## Changes\r\n- Fixes: #4699.\r\n\r\n'"
451919932,4700,b'Add missing namespaces to resolve the lack of NuGet packages building.',"b'The addition of this test caused an issue building NuGet packages, because this test was added without a namespace. The asset retargetting step (which is a precursor to building nuget packages) assumes that every single class belongs to the non-global namespace (actually, the MRTK main namespace).\r\n\r\nOther followups associated with this issue:\r\n\r\n1) Probably some linter that checks that all .cs files actually have a namespace declared.\r\n2) Probably treating warnings from the nuget step/asset retargetting step as error (so that it fails the CI build)'"
451747672,4698,b'Pointer Mediators accessible from code and extensible',b'## Overview\r\nFixes: #4696 by making pointer mediators accessible from code. Also allows `DefaultPointerMediator` to be extended by making methods virtual and fields protected.\r\n\r\nThis enables users to crate solutions like turn off the far hand beams at runtime as described in [this stackoverflow post](https://stackoverflow.com/questions/56248329/how-to-turn-off-motion-controller-pointer-mediator)\r\n\r\n'
451747485,4697,b'Add sample for determining if a user is ET calibrated and show a notification',b'## Overview\r\nAddresses issue #4647. Several devs have mentioned that it would be nice to get a sample of how to determine whether as user is eye calibrated and to show a notification in case the apps requires eye tracking to work properly. \r\n\r\n## Changes\r\n+ Several changes to allow for communicating through whether the current eye calibration is valid\r\n+ Sample for how to use it in EyeCalibrationChecker.cs\r\n+ A few minor clean ups in other files \r\n\r\n![image](https://user-images.githubusercontent.com/32180789/58843415-225ede80-8627-11e9-81e5-fab4b684dd89.png)\r\n\r\n'
451745732,4695,b'Fix/interactable voice commands',"b'## Overview\r\nResolves issue #4598 \r\n\r\n- Added a drop-down menu pulling speech commands from the MRTK Speed Commands Profile. There is a notice to direct users to the Speed Commands profile if no speech commands are selected to help with visibility.\r\n\r\n- Made sure Requires Focus works. When selected, we get normal behavior where an Interactable must have focus to receive a speech command event, when unchecked the Interactable registers at a global listener, this was not hooked up before. The filtering for IsGlobal (referring to pointer events) and Requires Focus (referring to speech commands) should not cause extra clicks to occur even though both toggles essentially register or unregister the Interactable as a global listener.\r\n-- These values only work if they are set before runtime or OnEnable is called. The Interactable does not currently support runtime registering and unregistering.\r\n\r\n- Updated terms to use Speech Command, except for the Voice Command state that was setup previously.\r\n\r\n- Updated documentation and supporting images to reflect these and other recent changes.\r\n'"
451722119,4694,b'prerelease/2.0.0.rc2 stabilization -> mrtk_dev',b'prerelease/2.0.0.rc2 stabilization -> mrtk_dev'
451715293,4691,b'add additional supportedplatform enum values for future / expansion use',"b'## Overview\r\nAdd iOS, Web and Lumin to the SupportedPlatform enums. This will allow future platform extensions to be created for these without needing to recompile the core assemblies.\r\n\r\nThis is related to the work by @Alexees (#4358) that has been moved to being under consideration for the next major MRTK release.\r\n\r\nAlso added Mac and Linux editor platforms to address #4601.\r\n\r\n![image](https://user-images.githubusercontent.com/13281406/58839663-7bbf1180-8617-11e9-9785-fa6d572ad2d0.png)\r\n'"
451637588,4690,b'Re-targeting Experimental Property for Stabilization',"b'## Overview\r\n\r\nLooks like I committed, but failed to push my last change to: https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4532 The final change was the addition of an ""Experimental"" attribute to tag experimental features with.\r\n\r\n![58729802-35f81400-839f-11e9-9a67-ae58fea2f25a](https://user-images.githubusercontent.com/13305729/58820563-c6c13080-85e7-11e9-998b-29d17a54f78b.png)\r\n\r\n'"
451594300,4688,b'Experimental Attribute',"b'## Overview\r\n\r\nLooks like I committed, but failed to push my last change to: https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4532 The final change was the addition of an ""Experimental"" attribute to tag experimental features with. Please see: \r\n\r\nAssets/MixedRealityToolkit/Attributes/ExperimentalAttribute.cs\r\nAssets/MixedRealityToolkit/Inspectors/PropertyDrawers/ExperimentalDrawer.cs\r\n\r\n\r\n![58729802-35f81400-839f-11e9-9a67-ae58fea2f25a](https://user-images.githubusercontent.com/13305729/58820563-c6c13080-85e7-11e9-998b-29d17a54f78b.png)\r\n\r\nNote, the previous PR changed the base branch from mrtk_development to prerelease/2.0.0.rc2_stabilization so please feel free to do the same here.\r\n\r\n'"
451406472,4686,b'Merge latest stabilization changes into _development',b'The new hand-based solver/menu was put into the stabilization branch - we want this to go into the _development branch as well (without waiting for things to hit release first)'
451254395,4685,b'Add PlayMode test that presses button with simulated hand',"b'## Overview\r\nAdds a playmode test that would have prevented issues #4683 from occurring. The test uses a simulated hand to press a button and verifies that the button gets pressed.\r\n\r\nFixes: #4683\r\n\r\n## Changes\r\n- Add couple basic utility methods for moving the simulated hand around in a playmode test\r\n- Also remove SimplePlayModeTests, since they are not really testing anything and take 10 seconds to run. These were valuable at the beginning to prove play mode tests can run and as an example to follow.\r\n\r\n## Verification\r\n- Verified that the test fails without the fix for 4683 and then passes with the fix.'"
451144180,4684,b'Fix nullptr in PokePointer when you press any button',b'Fixes: #4683\r\n\r\nAlso a couple additional fixes:\r\n- Fixes a failing PlayMode button test by passing in updated prefab file name\r\n- Remove some extra print statements from Interactable.\r\n'
451029623,4682,b'[HTK Parity] Adding Text prefabs from HoloToolkit.',"b'## Overview\r\nAdded [Text prefabs](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/tree/mrtk_development_TextPrefabs/Assets/MixedRealityToolkit.SDK/StandardAssets/Prefabs/Text) from HoloToolkit. Tested occlusion with re-assigned materials.\r\nAdded [TextPrefab README file.](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_TextPrefabs/Documentation/README_TextPrefab.md)\r\nAdded TextPrefabExample scene.\r\n\r\nPart of the documentation update effort on Dev Center (work-in-progress)\r\n[Text in Unity](https://docs.microsoft.com/en-us/windows/mixed-reality/text-in-unity)\r\n[Typography](https://docs.microsoft.com/en-us/windows/mixed-reality/typography)\r\n\r\n---\r\n\r\nWe had Text prefabs for Unity UI Text and 3D Text with optimized scaling and occlusion support. Customers are looking for the equivalent ones in MRTK. MR documentation also describes them.\r\nhttps://docs.microsoft.com/en-us/windows/mixed-reality/text-in-unity\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/blob/htk_release/Assets/HoloToolkit/UX/README_TextPrefab.md\r\nEven though Unity supports new Text Mesh Pro, still 3D Text and Unity UI Text are needed for HTK migration.\r\n\r\n## Changes\r\n- Fixes: #4680\r\n\r\n## TextPrefabExamples Scene\r\nYou can compare the quality and occlusion support between Unity default text and optimized Text prefab.\r\n![2019-05-31 19_30_49-Unity 2018 3 8f1 Personal - TextPrefabExamples unity - MRTK-Public-Microsoft - U](https://user-images.githubusercontent.com/13754172/58742805-e6373e00-83da-11e9-860c-ad1ef4767bee.png)\r\n\r\n'"
450997174,4679,b'Prerelease/2.0.0.rc2 stabilization back into mrtk_dev',b'Prerelease/2.0.0.rc2 stabilization back into mrtk_dev'
450988237,4678,b'Configurable raycaster',"b""## Overview\r\n\r\nIntroduces a system type for a Raycast Provider. Allows for a IMixedRealityRaycastProvider to be specified as part of the InputSystem configuration.\r\n\r\n![NewConfig](https://user-images.githubusercontent.com/20366429/58736223-ea9b3100-83b1-11e9-9b01-a95fa80a683c.png)\r\n_Picture is slightly outdated: Interface name has been changed from Raycast**er** to Raycast._\r\n\r\nFor objects that are not part of the Unity UI or physics collider systems, this can allow for handling raycasting of those objects. \r\n\r\nAs an example, I've been able to use this new configuration to implement pointer handling on the map object provided by [Maps SDK, a Microsoft Garage project](https://github.com/Microsoft/MapsSDK-Unity). The map does not use Unity's physics collider system, but it does provide an API to raycast it.\r\n\r\n![PointAndDrag](https://user-images.githubusercontent.com/20366429/58735565-a444d280-83af-11e9-9794-96ca2647c12e.gif)\r\n\r\n## Changes\r\n- Fixes: #4325.\r\n\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n\r\n"""
450987853,4677,b'Reintroduce the Interpolator utilities back to the MRTK',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4191\r\n\r\nThe previous linked change got rid of some code that wasn't referenced anywhere in the MRTK and had no documentation - along with the private->public payload that came back in March, there was a significant portion of dead code that was introduced and this got cleaned up with it. Based on some feedback from customers, they were in fact using these utilities, so we're adding them back with tests to show how things should expect to work.\r\n\r\nI'd love to have more coverage on Interpolator.cs, but this would require some minor refactoring (non breaking changes) in order to actually unit test those things (in particular, we'd need to abstract away the usage of time in order to properly test the script)"""
450965072,4674,b'Typo fix in PressableButtonHoloLens2.cs (issue #4615)',b'## Overview\r\nBrings over the fix from #4624 to stabilization\r\n\r\n## Changes\r\n- Fixes: #4615'
450934979,4673,"b'Interactable not responding to menu, grip take 2. Also add TouchHandler'","b'## Overview\r\nFixes: #4492 by changing Interactable to listen to OnInputDown instead of OnPointerDown. I did this because pointer events are designed to only be sent for certain buttons, in most cases the \'select\' button. So pointers do not send events when menu button, grip button, any other button is pressed. Interactables however want to listen to all possible buttons, so they need to listen to OnInputDown.\r\n\r\nI needed to do some potentially confusing logic to ensure that the poke pointer does not cause ""select"" action to trigger interactable when you are near a button and air tap. This happens because when an input does an input down like air tap, that input gets dispatched to every object focused by every pointer attached to that input, even if the PokePointer shouldn\'t really be dispatching air taps.\r\n\r\nI also made a few other improvements:\r\n- Add a basic TouchHandler class to expose touch events as unity events\r\n- Update interactable button prefabs to use TouchHandler to call SetInputDown and up on Interactable, which will allow the button to trigger clicks.\r\n- Expose SetInputDown() and SetInputUp() events for Interactable to let more complex logic set the states of the Interactable.\r\n- Add more details to the TouchEvent data structure\r\n- Fixes: #4611 by listening for touch events from children\r\n- Update Interactable prefabs and examples examples to work with touch events out of the box (fix up the NearInteractionTouchables).\r\n\r\n## Verification\r\n- Tested that Interactables respond to grip, menu buttons in Windows MR with motion controllers.\r\n- Test in editor that handinteractionexamples scene works\r\n- PlayMode tests pass.\r\n- Testing on HoloLens currently\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/4673/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
450928394,4672,b'Update solver logic to update more consistently and respect scale',"b'## Overview\r\nChanging the solverUpdate methodology to always apply the update from working to goal, regardless of solver. This allows for those creating new solvers to ignore the update process in favor of simply updating the goal position/rotation/scale. Also, by guaranteeing that these are called, maintainScale becomes a functional variable again\r\nAlso some minor documentation updates.'"
450921188,4671,b'Adds Documentation link to profile inspectors',"b'## Overview\r\n\r\nProfile inspectors now check whether an active service has a DocLink attribute. If one is found, a documentation link is drawn on the profile.\r\n\r\n![DocLink](https://user-images.githubusercontent.com/9789716/58725586-59699180-8394-11e9-89fd-bbe787ef1dd2.PNG)\r\n\r\nFixes #4670'"
450909017,4669,b'Slate prefab box collider performance issue',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4167\r\n\r\nSlates use the bounding box\'s rotate colliders in order to handle rotation - note that even though the slate provides its own box-like prefab, the bounding box still creates a sphere collider (which has wayyyyy more vertices than the simple box), even though a basic box would suffice. This change addresses the issue by adding an option to either use a box or sphere collider when a custom prefab is provided for bounding box rotate handles.\r\n\r\nThis is done in this way to avoid being a breaking behavior change - other folks can choose to use a more performant collider, and the slate is the only thing updated to use this behavior for now.\r\n\r\nFor the prefab, all I did was update the dropdown select button to choose ""box""\r\n\r\nThis is my undoing the revert that did for the merge - this time around I opted to just update the prefab manually (which still works fine).'"
450898681,4667,b'Build step hotfix',b'## Overview\r\nBringing over build step changes to the stabilization branch from #4389 and #4588.'
450895926,4665,b'Mobile recording for spectator view',"b'This review adds mobile recording to the android asa spectator view scene.\r\n\r\n1) We now can specify to have mobile recording/mobile recording ui via SpectatorView.cs\r\n2) If mobile recording is enabled, SpectatorView will dynamically create a recording ui prefab and a IRecordingService.'"
450880246,4664,b'Move package signing into separate template',"b""mrtk_CI pipeline is failing due to missing signing task - it appears that it is not enough to disable a task that doesn't exist (in the context of AIPMR project) as perhaps some validation happens before the template is fully evaluated. This change attempts to remove the signing task from the ci.yml template (only left in ci-release.yml).\r\n"""
450866578,4662,b'Add sdk demand for release pipeline',b''
450843978,4661,b'Handle additional edge cases for MRTK inspectors',"b'## Overview\r\n\r\nThere are two key dependencies between profiles/inputhandlers: input actions and speech keywords (i.e speechinputhandler). The inspector logic for these impacted components has been updated to be simpler, more consistent, and accurate with useful error messages to the user informing them of the issue (i.e no MRTK in scene, etc etc.). \r\n\r\nRendering of speech commands when rendered as sub-profile view (i.e within input profile) would not work properly for layout. Switched model to be vertical components to preserve useful formatting\r\n\r\nAdded forced height on scrollview for input actions inspector when rendered as sub-profile\r\n\r\nFixed edge case where inspector logic does not account for an active profile assigned to the scene MRTK instance (an unlikely edge case)\r\n\r\nFixed DefaultMouseProfile to correctly set IsCustomProfile to false\r\n\r\nFixed DefaultHololens2..profiles to correctly set IsCustomProfile to false\r\n\r\nFixed ""Back to.."" buttons for profile up the hierarchy to actually render\r\n\r\n## Changes\r\n- Fixes: #4520 SpeechInputHandlerInspector broken\r\n#4467 \r\nHarden MRTK inspectors & increase re-usability of code \r\n#4654 \r\nCan\'t bind the keyboard input for voice input\r\n\r\n## Verification\r\n\r\nRemoved input actions profile\r\nRemoved active profile\r\nRemoved MRTK instance\r\nSwitched hierarchy with multiple gesture profiles (but only one active in instance)\r\nDeleted MRTK instance & re-added with SpeechInputHandler button when error message shows'"
450789133,4659,b'Merge documentation back into feature branch',b''
450711854,4656,b'Code review followup',b'Add scenes and prefabs into release'
450549982,4646,b'BoundingBox Script- Proximity Scaling of Handles- Shell Parity',"b""## Overview\r\nchanges to Boundingbox.cs script and HandInteractionExamples scene. Added Proximity scaling behaviors to boundingbox handle affordances to match the Shell Boundingbox behavior.\r\n\r\nNear interaction\r\n![MRTK_BB_HandleScaling3](https://user-images.githubusercontent.com/13754172/58672678-faa50900-82fc-11e9-9987-1d39073c1adb.gif)\r\n\r\nFar interaction\r\n![MRTK_BB_HandleScaling5](https://user-images.githubusercontent.com/13754172/58672813-9171c580-82fd-11e9-8481-5af964a690f3.gif)\r\n\r\n\r\n## Changes\r\n- Fixes: #4415\r\n\r\n\r\n## Verification\r\nWhen either handRay or hand is 'far' away(as defined by an added Property) each handle scales to a 'far' scale- zero by default. When hand is at a medium distance, an initial scale animation plays. Then when close, a final close animation plays. during each animation, the property-specified material is applied. The behavior is intended to mimic the Shell boundingbox behavior - an initial handle increase in scale, followed by a final scale with a 'blue' material applied.\r\n>\r\nDefault values in the script are based on the use cases illustrated in the HandInteractionExamples scene.\r\n\r\n"""
450542506,4645,"b""Don't allow a hand to dispatch touches if it is already grabbing something""","b""## Overview\r\nFixes: #4279 \r\n\r\nThe pointer mediator was correctly disabling a grab / touch pointer if some other pointer on a given hand had the lock, however PokePointer was not respecting this disable, it would always call SetActive = IsNearObject, overwriting the mediator's decision. Fix this by not calling SetActive = IsNearObject. This is handled by the mediator.\r\n\r\n\r\n\r\n\r\n## Verification\r\nVerified by creating a test scene with a grabbable cube and a touchable cube, and verifying that touchable cube doesn't get activated when the grab is active. Also verified that you can still touch cubes from the other hand.\r\n\r\n![grabtouch](https://user-images.githubusercontent.com/168492/58670274-4ce12c80-82f3-11e9-859c-a48e59ba9f06.gif)\r\n\r\n\r\nI would LOVE to create a PlayMode test for this. @lukastoenneMS do you already have code that will allow me to do something like this:\r\n\r\n```\r\nSimulatedHand h = new SimulatedHand();\r\nh.MoveTo(0, 0, 1.5);\r\nh.Press();\r\nh.MoveTo(0, 0, 3);\r\nh.Unpress();\r\n```\r\n\r\nI'd like to do this in a playmode test so I can add this test case (don't allow for a hand to dispatch touches if it is already grabbing something)\r\n"""
450536031,4643,b'Add clarification to eye tracking example scenes',"b'## Overview\r\nAdded some info text to the ET sample scenes that are loaded additively. Some developers were confused by the missing camera and MRTK components.\r\n\r\n## Changes\r\n- Addresses issue #4496 - MRTK currently relies on additive scene loading, so setting up each scene as a standalone scene is currently not possible if we want to enable the user to switch between them.\r\n\r\n![image](https://user-images.githubusercontent.com/32180789/58671784-b57ed800-82f8-11e9-9f37-60809400f65b.png)\r\n'"
450515260,4637,b'Update PressableButtonTests.cs',b'## Overview\r\nA method name changed'
450510550,4635,b'Make the ICommandRegistry have separate Connected and Disconnected events',"b""When starting on the refactor to use SpatialCoordinateSystemManager, I realized that there's sometimes the need to handle Connected or Disconnected events even without a command handler. I've separated those events out and made ICommandHandler into a delegate CommandHandler, so now Connected, Disconnected, and HandleCommand are all separate events (where HandleCommand is essentially a dictionary of events keyed on command name)."""
450509883,4634,"b'Revert ""Slate prefab box collider performance issue""'","b""We're currently trying to merge some changes that went into the stabilization branch back into the mrtk_development branch.\r\n\r\nUnfortunately, there's a conflict that was caused by the meeting of two changes:\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/4514\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/4461\r\n\r\nI'm reverting my change that I made, and will be re-applying it after the stabilization->development branch merge. My change was just caused by re-serialization of the prefab after I changed a single property on the prefab (i.e. changing the handle setting to 'box'). This is easy enough to do in Unity through the UI, and really hard to do manually merging on Github."""
450345311,4630,b'Spectator view architecture and debugging documentation',b''
450091192,4628,b'ET demo texture size is too big',"b""## Overview\r\n- Addresses issue #4582\r\n- Decreased file size of textures and replaced Photoshop (*.psd) files with *.png for the Eye Tracking navigation demo. \r\n- The texture for zoom is still relatively big, but if that is reduced further the zoom doesn't make much sense anymore. \r\n"""
450090659,4627,b'CLOSED (Patch 4582)',"b""## Overview\r\n- Addresses issue #4582\r\n- Decreased file size of textures and replaced Photoshop (*.psd) files with *.png for the Eye Tracking navigation demo. \r\n- The texture for zoom is still relatively big, but if that is reduced further the zoom doesn't make much sense anymore. \r\n"""
450081435,4626,b'Patch #4519: Enabling to use far hands and eye input simultaneously',"b'## Overview\r\nAllow users to use eye-based input while interacting with far hand rays. For example, a user is holding some holographic tools in her hands and wants to scroll through task descriptions using her eyes.\r\n\r\nFor more details on the issue, please see  #4519.\r\n\r\n## Changes\r\n- Addressed #4519. \r\n- To allow for using eye-based input while interacting with far hand rays, developers can use the EyeTrackingTarget script that already has several eye-gaze-related events ready for simply consumption, such as:\r\n   - OnLookAtStart()\r\n   - WhileLookingAtTarget()\r\n   - OnLookAway()\r\n   - OnDwell()\r\n   - OnSelected()\r\n\r\nEyeTrackingTarget.cs is polling and managing ET data independently from BaseEyeFocusHandler to allow for supplemental interactions (not relying on being the primary pointer). In addition, if required additional voice commands can be assigned. For example, the user is holding/manipulating a hologram with both her hands and then looks over to another hologram and says ""put that one on this one"" or ""match the color of this one"".\r\n\r\nThe documentation for this will be updated in combination with a bigger overhaul of the eye tracking documentation for #4596 .'"
450074303,4625,"b""Can't build UWP APPX from MRTK Build Window in Unity""","b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4485\r\n\r\nIf you're building the UWP AppX from the build window for the very first time (without having built the Unity project before) this error shows up because the current platform isn't being properly propagated to the second step (i.e. the actual building of the AppX). If it's already been built (which is the case once you've started using your project for a while) you won't hit this codepath.\r\n\r\nIt's a pretty annoying thing to see as a first time user (i.e. I would expect it to work) so making sure that the right data (platform) is getting piped through is the right thing to do!"""
450062417,4624,b'Type-o in PressableButtonHoloLens2.cs',b'## Overview\r\nFixed typo in PressableButtonHoloLens2.cs \r\n\r\n## Changes\r\n- Fixes: #4615 \r\n\r\n## Branch\r\n**Prerelease/2.0.0.rc2 stabilization**'
450056783,4623,b'Make pointers dispatch events for all button types',"b'## Overview\r\nFixes: #4492 \r\n\r\nAny pointer that extends BaseControllerPointer will by default only dispatch pointer events for input actions that match ""pointerAction"". This behavior is actually not consistent between other pointer types.\r\nFor example, SpherePointer overrides OnInputDown and dispatches pointer events for all actions. GazePointer also dispatches pointer events for all actions.\r\n\r\nConsolidate pointer behavior by dispatching pointer events even when the input action doesn\'t match pointerAction. \r\n\r\nChanges:\r\n- Rename ""pointerAction"" to ""selectAction"".\r\n- Track all action down events that have been sent by pointer to make sure to send pointer up events correctly when source disappears or is lost.\r\n\r\n\r\n## Verification\r\n- I verified that this fixed #4492\r\n- Tested that nothing unusual was happening in HandInteractionExample, using editor.\r\n- Tested in VR in the editor\r\n- Tested on HoloLens\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
450026917,4621,b'RC2 spell check pass',b'## Overview\r\nCorrecting some typos in preparation for RC2.'
450005677,4620,b'Merge prerelease/2.0.0.rc2 stabilization back into mrtk_dev',b''
450000006,4619,b'MixedRealityToolkit object now properly unregisters services on shutdown',"b'## Overview\r\nPreviously, the MixedRealityToolkit object was failing to call UnregisterService in its shutdown path (#4339). Unregistering a service was also not causing the static accessor to be reset to null (#4579)\r\n\r\nThis change fixes both issues as well as updating the static registry class to remove the dictionary entries when the number of registered services goes to 0.\r\n\r\n## Changes\r\n- Fixes #4339, #4579 .\r\n\r\n\r\n## Testing performed\r\n\r\n- Stepped through removal of core services to confirm proper cleanup\r\n- Registered temporary extension services and debugged removal code path\r\n- Repeat start and stop cycles in the Unity editor (using solver scene) to confirm that services are properly loaded and reloaded\r\n    - OpenVR project\r\n    - Windows Mixed Reality UWP project'"
449965612,4618,"b'Fix ""MRTK not found"" errors even when MRTK is present in scene'","b""## Overview\r\nInteractable inspector accesses the MRTK.Instance.ActiveProfile to find available input actions. Currently, MRTK.Instance will return null until the MRTK gameobject has actually been selected by the user.\r\n\r\nTherefore, you will get an error when trying to edit an inspector until you click MRTK gameObject.\r\n\r\n![image](https://user-images.githubusercontent.com/168492/58583055-ff3bc580-8207-11e9-8fba-abd21492af0e.png)\r\n\r\nFix this by changing the .Instance accessor to actually search for an instance if one is not found.\r\n\r\nFixes: #4610 \r\n\r\n## Verification\r\n- Verified that I don't get errors when inspecting interactable\r\n- PlayMode Tests\r\n- EditMode Tests"""
449937312,4616,b'UPM compliant packages for MRTK (new PR)',b'## Overview\r\nCreates UPM compliant packages for Unity 2018.3 / 2018.4 (LTS)\r\nSimplified PR from #4404 which was abandoned.\r\n\r\n## Changes\r\n- Fixes: #4403 .\r\n\r\n\r\n## Verification\r\nPlease specifically check out the changes in MixedRealityToolkitFiles.cs since it looks like there is a fair amount of code there that does string manipulation to find the MRTK folders and assets. I am pretty sure I fixed most of code paths but would like to get some extra coverage here.\r\n'
449924881,4614,b'Bug fix: warning message on FollowMeToggle.cs',"b""## Overview\r\nWarning message 'FollowMeToggle.visualizationObject' is never assigned to, and will always have its default value null\r\n\r\nExplicitly assigned null\r\n\r\n## Changes\r\n- Fixes: #4613 \r\n\r\n![2019-05-29 10_00_53-Unity 2018 3 8f1 Personal - Untitled - MRTK-Public-Microsoft - Universal Windows](https://user-images.githubusercontent.com/13754172/58576923-3905cf80-81fa-11e9-9fd0-081dabcf07bd.png)\r\n\r\n"""
449884594,4609,b'[RC2 Stabilization] Wrong scale handle size - HandInteractionExamples scene',"b'## Overview\r\nIn the HandInteractionExamples scene, slates had the wrong size for the bounding box scaling handles.\r\nUpdated the scene with proper scale values in the inspector. \r\n\r\n## Changes\r\n- Fixes: #4608 \r\n\r\n## Before & After\r\n![2019-05-28 20_53_22-Unity 2018 3 13f1 Personal - HandInteractionExamples unity - MRTK-GitHub - Unive](https://user-images.githubusercontent.com/13754172/58571016-d6a6d200-81ed-11e9-9250-11f027b70246.png)\r\n![2019-05-28 20_54_44-Unity 2018 3 13f1 Personal - HandInteractionExamples unity - MRTK-GitHub - Unive](https://user-images.githubusercontent.com/13754172/58571020-d9092c00-81ed-11e9-9a82-b3a19ab516af.png)\r\n![2019-05-28 20_49_45-Unity 2018 3 13f1 Personal - HandInteractionExamples unity - MRTK-GitHub - Unive](https://user-images.githubusercontent.com/13754172/58571028-dc9cb300-81ed-11e9-9e6f-b3bd59594556.png)\r\n![2019-05-28 20_55_48-Unity 2018 3 13f1 Personal - HandInteractionExamples unity - MRTK-GitHub - Unive](https://user-images.githubusercontent.com/13754172/58571037-deff0d00-81ed-11e9-98dd-46ddf850c4d0.png)\r\n![2019-05-28 20_53_50-Unity 2018 3 13f1 Personal - HandInteractionExamples unity - MRTK-GitHub - Unive](https://user-images.githubusercontent.com/13754172/58571114-ffc76280-81ed-11e9-81fc-ce6f655ab0a3.png)\r\n\r\n'"
449856234,4606,b'Added link to MR base module to GettingStartedWithTheMRTK.md',b'https://docs.microsoft.com/en-us/windows/mixed-reality/mrlearning-base'
449747408,4605,b'Pointer handler subscription',"b""## Overview\r\n\r\nAdded a way to subscribe pointer handlers directly as global listeners instead of subscribing the game object the belong (or not) to. \r\n\r\nI think it should be possible generalize this pattern for other event handler types but I don't have the time to do it.\r\n\r\n## Changes\r\n- Fixes: #4535  .\r\n\r\n## Verification\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
449739898,4604,b'fixed moveable button visuals position update while button is moving',"b""## Overview\r\n- we're storing an offset to the parent now instead of the world space position, so we can apply that offset to an up-to-date world space position of the button\r\n- also added proper reset of the moveable button part on disabling of the button\r\n\r\n## Changes\r\n- Fixes: #4600  .\r\n\r\n"""
449603469,4603,b'[RC2 Stabilization] Bug Fix: Piano sharp keys are not working',b'## Overview\r\nPiano sharp keys were not pressable. Fixed the issue by adjusting Start Push Distance/Max Push Distance/Press Distance/Release Distance values.\r\nUpdated **Piano.prefab**\r\n\r\n## Changes\r\n- Fixes: #4602 \r\n\r\n## Before & After\r\n![2019-05-28 21_29_34-Unity 2018 3 13f1 Personal - PressableButtonExample unity - MRTK-GitHub - Univer](https://user-images.githubusercontent.com/13754172/58531351-d29b9580-8196-11e9-8f57-2b0573c0c7fe.png)\r\n![2019-05-28 22_20_23-Unity 2018 3 13f1 Personal - HandInteractionExamples unity - MRTK-GitHub - Unive](https://user-images.githubusercontent.com/13754172/58531354-d7f8e000-8196-11e9-9d2f-701711e3355f.png)\r\n![2019-05-28 22_21_58-Unity 2018 3 13f1 Personal - HandInteractionExamples unity - MRTK-GitHub - Unive](https://user-images.githubusercontent.com/13754172/58531407-0b3b6f00-8197-11e9-9e54-c05a03b934c3.png)\r\n\r\n\r\n'
449527464,4595,"b'Add the ""App"" network connection box and refactor the CommandService'","b'The primary purpose of this change is to add the ""App"" connection box in the Compositor scene to provide the network connection to the app providing the content to the compositor.\r\n\r\nPart of making this change cleanly involved refactoring the CommandService into a CommandRegistry base class that both SynchronizedStateObserver and HolographicCameraNetworkManager could inherit from. Each one of these connections needs to handle the same command, but in the context of that particular connection. I also fixed what I consider a bug in the implementation of AddCommandHandler where adding the same object as the handler for two different commands did not work (because the object was already in the allHandlers list).\r\n\r\nI have not tested out the Android scenario with this change, but I am happy to if given instructions for how to do so.\r\n\r\n![image](https://user-images.githubusercontent.com/10050922/58519744-b46b7080-8169-11e9-8e7a-8a7e4dcb006c.png)\r\n'"
449524452,4594,b'Pull input actions change into the RC2 stabilization branch',"b'We want this to go into the RC2 release, pulling this into the stabilization branch.'"
449480946,4593,b'Add IMixedRealityDataProviderAccess and update how data providers are retrieved',"b""## Overview\r\nThis is an RC 2 targetted version of #4466. The previous PR got updated to newer dev branch code prematurely, hence it being recreated.\r\n\r\nBelow is the original PR description:\r\n\r\nThis change introduces IMixedRealityDataProviderAccess, which allows system implementations a standard contract through which they can allow components access to data provider instances.\r\n\r\nAs an example, the solver handler now accesses the hand joint service using the following pattern\r\n\r\nhandJointService = (InputSystem as IMixedRealityDataProviderAccess)?.GetDataProvider<IMixedRealityHandJointService>()\r\n\r\nThis change also adds IMixedRealityMouseDeviceManager to allow for easy recognition of mouse data providers.\r\n\r\nTo ensure consistency across services with data providers, the spatial awareness system's GetObserver* methods have been marked as obsolete, with a message to check for implementation of IMixedRealityDataProviderAccess and to call GetDataProvider*.\r\n\r\nNote: The existing GetObserver* implementations now call the GetDataProvider* equivalents.\r\n\r\nThis change is part of the #3545 series and gets non-editor code (with a handful of small exceptions) entirely on to the new, flexible pattern.\r\n"""
449474574,4592,b'BoundingBox Fix rig when parent of has non uniform scale',"b'## Changes\r\n- Fixes: #4151\r\n- Add test to BoundingBox test scene to repro the issue and verify the fix\r\n- Expose method BoundingBox.UpdateRig() developers can use to force the bounding box rig to update.\r\n\r\n## Verification\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands\r\n>\r\n> git fetch origin pull/4592/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
449451329,4591,b'Merge latest changes from development into the stabilization branch',"b""Pulls in the latest changes so that we can have the generic Input Action handler in RC2 (and also so that @davidkline-ms's service locator refactor changes can have the same common base to reduce changes of regressions doing fancy merges.)"""
449300766,4589,b'Improved documentation on how to use pointer results',b'## Overview\r\n\r\nCreated an example scene to show how to use the pointer result property:\r\n\r\n![PointerResultExample](https://user-images.githubusercontent.com/47451126/58485517-1fae4600-815c-11e9-85a9-94563b23caf9.png)\r\n\r\nAdded a script for handling pointer events as Unity Events:\r\n\r\n![PointerHandler](https://user-images.githubusercontent.com/47451126/58485553-318fe900-815c-11e9-9575-8c160c986496.PNG)\r\n\r\nAnd updated pointer documentation.\r\n\r\n## Changes\r\n- Fixes: #4220  .\r\n'
449295920,4588,b'Removing build.ps1 step from our pipelines',"b'This step is only creating .unitypackages now. This is no longer necessary for all of our builds. We may need this again for our internal packaging/signing pipeline, but until then we are removing this step.\r\n\r\nThis will fix an error we are currently seeing on CI.'"
449240356,4587,"b'Misc fixes to button, add smoothing to simulatedhand'",b'Couple of fixes on MRTK:\r\n* Pressable buttons was not working any more if the button was disabled in the pressed Event\r\n* Add Lerp in SimulatedHand not to miss any frame in the editor\r\n* Added OpenSky pose'
449181774,4585,b'Addressing some code review comments from pull/4480 and updating localizers',"b'This review addresses some comments in:\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/4480\r\n\r\n1) We update our commandservice locks to encompass all accessors to our registered command handlers\r\n2) ""foreach("" loop definitions have been fixed to contain spaces ""foreach (""\r\n3) SpatialCoordinateSystemMember has been renamed SpatialCoordinateSystemParticipant\r\n\r\nIn addition to addressing this code review, this review contains a few other changes:\r\n\r\n1) Participants and localizers are told whether they are acting as the spatial coordinate system host compared to assuming this information given the spectator view role. This adds more flexibility when configuring dslr experiences.\r\n2) SpatialCoordinateSystemManager now updates non-host camera transforms to align to the hosted coordinate space.'"
448947885,4581,"b""ASA work based on Andrei's previous code review""","b""The bulk of the content in this review was first submitted by Andrei here:\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/pull/4544\r\n\r\nI've added a few additional changes:\r\n1) Some of the legacy code in MarkerDetectorSpatialCoordinates was still commented out in Andrei's changed. I've uncommented this code and insured that it builds apks/uwp visual studio solutions.\r\n2) I renamed the preprocessor directives from AR_FOUNDATION and ASA_LOCALIZATION to SPATIALALIGNMENT_LEGACY and SPATIALALIGNMENT_ASA for more consistent naming.\r\n3) I added some namespaces that were missing declarations based on build flavors.\r\n"""
448931245,4580,b'Package signing',b''
448856308,4578,b'Updated Input Actions documentation',b'Added more information on how to create actions and map them to inputs. Also added a section on handling input actions via the new handler interface and included a reference to the new example scene.\r\n\r\nFixes #4221 '
448669425,4574,b'Added to doc: Input event handlers need to be registered to receive events. ',"b'Feedback from Berlin \r\n\r\nThis is a common issue with new devs, so may be a good idea to say it more prominently'"
448373323,4567,b'Disable cache server for CI',b'Test builds without cache server.'
448350120,4560,b'Merge RC2 Stabilization into mrtk_dev',b'Merge RC2 Stabilization into mrtk_dev'
448331888,4558,b'Add clarification on the SDK version vs desktop Windows version',b'## Overview\r\nClarified the SDK version number vs the min required OS.\r\n\r\n## Changes\r\n- Fixes: #4522 '
447927575,4553,b'Update Roadmap.md',b'## Overview\r\nThe roadmap page was a bit out of date (from around the Beta2 timeframe).'
447925816,4552,b'Added TextMeshPro support to the InteractableColorTheme',"b'## Overview\r\nThe InteractableColorTheme will color meshRenderers, as well as Text objects. Previously it only set the color fields of UI Text and TextMesh objects.\r\n\r\n## Changes\r\n- Fixes: #4551 .\r\n\r\n\r\n## Verification\r\n- Different Text objects will be effected by color changes from the InteractableColorTheme and ScaleOffsetColorTheme.\r\n- Renderers are the fall back option.\r\n- Theme does not show shader property drop down when the target is a text base object.\r\n- Only does the check for each text object once, then will use a delegate to apply colors is a text object exists.\r\n'"
447920170,4550,b'Fix potential infinite loop caused by InscribedRectangle',"b""## Overview\r\nIn some cases, `UnityBoundary.TryGetGeometry` returns true but returns an empty list of boundary points.\r\nIn this case, we shouldn't try to create an inscribed rectangle.\r\n\r\n## Changes\r\n- Fixes: #4541"""
447901486,4548,b'Fixed nested prefabs not showing pending changes for Interactable.',"b'## Overview\r\nUpdated inspector EditorGUILayout fields to use PropertyFields so that pending changes will be shown in prefabs.\r\n\r\n## Changes\r\n- Fixes: #4369 .\r\nNested Prefabs work poorly with MRTK custom inspectors\r\n\r\n## Verification\r\nWhen Interactable is part of a prefab, the inspector should show a blue vertical line to the left of any property and bold text when it has been edited and pending an override. This would mainly cover the main portion above Profiles and the Events section.\r\n\r\n- Inspectors should work and look as they did before.\r\n- No data should be lost.\r\n- properties inside of themes would not show a blue mark or bold text when edited, they are ScriptableObjects and their properties are not stored in the prefab.\r\n'"
447895425,4547,b'Enable Lifetime setting in Solvers',"b'## Overview\r\nUpdateSolverEntry already contains logic for handling the lifetime attribute in Solver, but SolverHandler only ever calls UpdateSolver.  \r\n\r\n## Changes\r\n- SolverHandler now calls UpdateSolverEntry and setting a lifetime will now be respected in Solvers.\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
447857941,4544,"b'Azure Spatial Anchors Spatial Coordinate Implementation (UWP, Android)'","b""This change implements the ISpatialCoordinateService for the Azure Spatial Anchors. This change has a few caveats:\r\n\r\n- Due to structure of MRTK project, ASA must be imported to make it work\r\n- Furthermore, ASA is imported into the root of the project, meaning this code can't be in any of the ASMDEFs as ASMDEFs compile first, and the reference is not available\r\n\r\nThere are a few additional things that will need to be done before change goes in."""
447855355,4543,b'Prepare networking logic to support multiple headers.',b'1) We start handing around the command associated with a binary reader so that different commands can be interpretted.\r\n2) We add richer documentation on how ISpatialCoordinate transforms should be used.'
447732560,4540,b'You may not get prompted',"b""I wasn't prompted when opening the HandInteractionExamples. I think this was because I followed the steps in the previous section and was prompted then.\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
447661283,4538,b'Introduced the primary pointer selector',"b'## Overview\r\n\r\nCreated a new interface, `IMixedRealityPrimaryPointerSelector`, that is used by the focus provider to select the primary pointer every frame. The specific selector implementation to use is configurable via the pointer profile:\r\n\r\n![PointerProfile](https://user-images.githubusercontent.com/47451126/58255656-661f3180-7d65-11e9-88e6-9fd091e0548b.PNG)\r\n\r\nThe default selector chooses the primary pointer among all interaction enabled ones using the following rules in order:\r\n1. Currently pressed pointer that has been pressed for the longest\r\n2. Pointer that was released most recently\r\n3. Pointer that became interaction enabled most recently\r\n\r\nThe focus provider exposes the current primary pointer via a read-only property and a C# event to notify of changes.\r\n\r\nAll this can be seen in action in the PrimaryPointerExample scene.\r\n\r\n## Changes\r\n- Fixes: #3957  .'"
447579792,4536,b'Added a C# event for handling pointer events to the input system',b'This is so we can have global pointer event listeners that are not scripts. This is required for the upcoming PR addressing #3957 .\r\n\r\nFixes #4535 .'
447387957,4533,b'Centralize coordinate creation callback logic',"b""There are some limitations/difficulties in using the current coordinate creation callback logic in the SpatialCoordinateSystemMember and SpatialLocalizer classes:\r\n\r\n1) SpatialLocalizers were previously configured with an assumption that users will always create host spatial coordinates while spectators will always consume host spatial coordinates. This will not always be the case. For DSLR/editor based experiences, the editor/spectator may specify the id the of a coordinate, requiring the user to act as a consumer of said coordinate compared to the creator. Its also likely that mobile devices/spectators will declare coordinates when they show marker visuals while the user acts as the consumer of said declared coordinate in detecting the marker visual.\r\n\r\n2) It feels less intuitive to persist state information through anonymous functions compared to class callbacks. There is interest in having the SpatialCoordinateSystemManager have a global picture of all user device locations/coordinates for debugging purposes. This seems easier to facilitate through callbacks to the SpatialCoordinateSystemManager on coordinate localization/network events compared to in the anonymous functions that were handed around previously.\r\n\r\n3) The previous anonymous functions declared in SpatialLocalizerBase for network communication didn't easily allow for having the SpatialCoordinateSystemManager kick off coordinate creation/consumption. The current dslr spectator view experience will likely have buttons in the editor that tell both the user and spectator devices what coordinates to consume, which requires having the SpatialCoordinateSystemManager assign coordinate ids for consumer SpatialLocalizers. This wasn't previously possible and was directly linked to reading a network message.\r\n\r\nChanges in this review based on above:\r\n\r\n1) We now have SpatialLocalizers based on a LocalizerRole enum. For now, Role.Spectator/Role.User map 1:1 with LocalizerRole.Consumer/LocalizerRole.Creator. But this will change soon with the dslr work.\r\n\r\n2) SpatialCoordinateSystemMembers are handed callback frunctions from the SpatialCoordinateSystemManager to inform the spatial coordinate system manager of coordinate localization.\r\n\r\n3) Networking logic that had previously been facilitated through the SpatialCoordinateSystemMember is now rerouted to the SpatialCoordinateSystemManager. This will allow us to change how we do coordinate reporting. It is likely that we will want different spatial coordinate system participants to declare local coordinate transforms in network payloads to share with all other participants for debugging.\r\n\r\nTODO:\r\n1) WIth this change the SpatialCoordinateSystemManager will be informed of all ISpatialCoordinates and different device locations. Its likely that we should move the application of transforms to unity cameras to this class. In doing so, we will be able to have the shared scene origin conform to one of the spatial coordinate systems pariticipant's origins. This will make for more intuitive scene setup with marker detection.\r\n\r\n2) We need to define a richer network message to send between devices. I believe that at the bare minimum each participant in the coordinate system needs to report their camera location in their local scene as well as all known coordinates with locations in their local scene"""
447356652,4532,b'Hand Constrained Solver (useful for Hand UI)',"b'## Overview\r\nThese changes introduce a new type of solver called ""HandConstraint."" The HandConstraint provides a solver that constrains the tracked object to a region safe for hand constrained content. (Such as hand UI/menus.) Safe regions are considered areas that don\'t intersect with the hand.\r\n\r\nHandUIExample Scene:\r\n\r\n![handmenu](https://user-images.githubusercontent.com/13305729/58210725-0c543400-7c9f-11e9-9a5d-049cadbf27d4.gif)\r\n\r\nA derived class of HandConstraint called ""HandConstraintPalmUp"" is also included to demonstrate a common behavior of activating the solver tracked object when the palm is facing the user. For example use of this behavior please see the HandUIExample scene.\r\n\r\n![image](https://user-images.githubusercontent.com/13305729/58210668-ecbd0b80-7c9e-11e9-8918-36b27cf7797b.png)\r\n\r\nFinally, a new utility class called ""HandBounds"" has been added to help classes access the AABB bounds of the articulated hands. \r\n\r\n## Changes\r\n- Fixes:  https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4531\r\n\r\n\r\n## Verification\r\nPlease check out the HandUIExample scene to verify example use of the solver.\r\n'"
447320221,4529,b'Fix cursor not displaying on HoloLens 1',b'## Overview\r\nFixes: #4510 while maintaining ability to show cursor when articulated hands are used in GGV mode.\r\n\r\nAlso add unit tests to cover HoloLens 1 and articulated hands in GGV.\r\n'
447294746,4527,b'PressableButton fixes and PlayModeTests',"b""## Overview\r\nChanges are based on PR #4144\r\n\r\n-Pressable Buttons now have a local and world space distance mode. Local space distance mode will take scaling into account.\r\n-Start plane is now configurable and not automatically bound to the pivot of the moving visual.\r\n-Unified how we calculate world space positions from plane distances so PressableButton and Inspector are using the same method.\r\n-Removed superfluous gameobject that was created to calculate the world space positions of the distance planes\r\n-Added button for converting local to world distances and vice versa in inspector\r\n-Added PlayModeTests for button scaling in the 2 different modes and a test for converting plane distances\r\n\r\n\r\n## Changes\r\n- Fixes: #4219 , #4216 \r\n\r\n\r\n## Verification\r\nIf you can sync and check if the button still behaves/triggers like you're expecting. Also try switching the modes in the edit mode and scale the button in both modes in z direction\r\nTests need to be run individually - running a batch of tests will fail due to a bug we have in tearing down the mrtk scene \r\n\r\ngit fetch origin pull/4527/head:user/bethalha/button_fixes\r\ngit checkout user/bethalha/button_fixes\r\n"""
447285876,4526,b'[MRTK Shell Parity] [Pointer] Tether line visual fit & finish',"b'## Overview\r\nAdds a grab pointer to tether line, updates default materials & width for tether line and default pointer line, updates default pointer line to be less wobbly.\r\nPart of #4200 UX Controls Parity with HoloLens 2 Shell\r\n\r\n## Changes\r\n- Fixes: #4407\r\n\r\n![2019-05-22 12_20_57-Unity 2018 3 8f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof](https://user-images.githubusercontent.com/13754172/58202363-23d5f180-7c8c-11e9-95c9-5d88bada164c.png)\r\n'"
447282926,4525,b'Wrap non-2019-compatible code',b'Fixes: \r\n![image](https://user-images.githubusercontent.com/3580640/58199417-47e20480-7c85-11e9-84fb-3f932ab903fc.png)\r\n'
447267847,4524,b'fix uwp build',b'Fix uwp build breaks.'
447267742,4523,b'Removing redundant PressableButtonExamples scene.',b'## Overview\r\nRemoving PressableButtonExamples scene since we have the same content in the HandInteractionExample scene.\r\n\r\n## Changes\r\n- Fixes: #4269 '
447241681,4521,"b'Enable .NET scripting backend support in CI, part 2/2'","b""#3656\r\n\r\nThe folder destination of the appx package and its naming are also different when building C# projects, so instead of being in the build/AppPackages/MixedRealityToolkit folder, it's actually in the build/MixedRealityToolkit/AppPackages. And instead of the name MixedRealityToolkit_2.0.0.0_Win32_Master_Test, it's MixedRealityToolkit_2.0.0.0_x86_Master_Test. This will need to be a followup YAML pipeline switch on scripting backend.\r\n\r\nNote that this change makes it run in CI and PR, which will increase times. Depending on duration we might look to split this step out into its own check (so that we can parallelize across machines). Note that simply replacing one of the other ones I'm not certain will work, because we depend on those existing pipelines to generate assemblies which get bundled into the final NuGet package."""
447086699,4517,b'Enable unity cache server for all builds',b'\r\n'
446960106,4514,b'[MRTK Shell Parity] [Slate] Audio feedback + touch point affordance',"b'## Overview\r\nAdding audio feedback and touch point visualization.\r\nPart of #4200 UX Controls Parity with HoloLens 2 Shell\r\n\r\n- Added the latest audio clips from the shell (touch and release)\r\n- Added PanStarted, PanStopped events to HandInteractionPanZoom.cs (following ManipulationHandler and BoundingBox pattern)\r\n- Assigned audio clips (MRTK_Slate_Touch, MRTK_Slate_Release)\r\n- Refined reticle prefab material and size\r\n- Assigned left/right touch point reticle prefab (Slate prefab updated)\r\n- Removed directional light from the slate sample content material\r\n- Increased the margin for the bounding box to match shell design\r\n\r\n_Center point is for the two-handed zoom. Default is none to match shell design but developers can assign it for debugging purpose._\r\n![2019-05-21 23_49_49-Unity 2018 3 13f1 Personal - HandInteractionExamples unity - MRTK-GitHub - Unive](https://user-images.githubusercontent.com/13754172/58153179-497ae080-7c23-11e9-88ef-3668ed239944.png)\r\n\r\n\r\n## Changes\r\n- Fixes: #4412 #4513\r\n\r\n## Capture\r\nSinge touch point visual\r\n![MRTK_ShellParity_Slate_Touchpoint2](https://user-images.githubusercontent.com/13754172/58152847-724ea600-7c22-11e9-8724-a89f1d70982d.gif)\r\n\r\nTwo touch points\r\n![MRTK_ShellParity_Slate_Touchpoint3](https://user-images.githubusercontent.com/13754172/58153377-b8583980-7c23-11e9-82fd-fcaf31b1953f.gif)\r\n\r\nUpdated margin for the bounding box\r\n![SlateMargin](https://user-images.githubusercontent.com/13754172/58154881-7cbf6e80-7c27-11e9-9e51-9563214d6e10.png)\r\n'"
446866616,4507,b'Relax the thresholds on the ArUco marker detection',"b'This change reduces the threshold for accepting/rejecting markers, which allows detection to succeed in more cases without significantly affecting the quality of the successfully-detected markers.'"
446865091,4506,b'Ensure that the HoloLensCamera pool of frames is thread-safe',"b'This change ensures that accessing the frame pool in HoloLensCamera is thread-safe. Acquiring and releasing frames could happen from different threads, and simultaneous Acquire and Release would otherwise potentially corrupt the LinkedList being used to store frames.'"
446832228,4505,"b'Enable .NET scripting backend support in CI, part 2/2'","b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/3656\r\n\r\nThe folder destination of the appx package and its naming are also different when building C# projects, so instead of being in the build/AppPackages/MixedRealityToolkit folder, it's actually in the build/MixedRealityToolkit/AppPackages. And instead of the name MixedRealityToolkit_2.0.0.0_Win32_Master_Test, it's MixedRealityToolkit_2.0.0.0_x86_Master_Test. This will need to be a followup YAML pipeline switch on scripting backend.\r\n\r\nNote that this change makes it run in CI and PR, which will increase times. Depending on duration we might look to split this step out into its own check (so that we can parallelize across machines). Note that simply replacing one of the other ones I'm not certain will work, because we depend on those existing pipelines to generate assemblies which get bundled into the final NuGet package."""
446813799,4504,b'Harden MRTK inspectors / Move MRTK addition to scene to utility class',b'## Overview\r\n\r\nThis PR combines #4467 & #4435 and addresses comments from both.'
446800304,4503,b'[MRTK Shell Parity] [Bounding Box] Visual fit & finish',"b'## Overview\r\nVisual fit & finish: material updates for the wire color, glow, and thickness.\r\nPart of #4200 [MRTK Shell Parity] UX Controls Parity with HoloLens 2 Shell\r\n\r\n## Changes\r\n- Fixes: #4416 \r\n\r\n![2019-05-21 13_02_10-Unity 2018 4 0f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof](https://user-images.githubusercontent.com/13754172/58126855-d80e4400-7bc8-11e9-8a1e-a8e2da93d00f.png)\r\n\r\n![2019-05-21 13_02_20-Unity 2018 4 0f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof](https://user-images.githubusercontent.com/13754172/58126856-d8a6da80-7bc8-11e9-936a-62a5c48b66fa.png)\r\n\r\n\r\n'"
446789582,4502,b'Add a compositor preview window that can be maximized to take up most of a monitor',"b'This change adds a ""Fullscreen"" button to the Compositor window that shows a second window with just the composition preview (and none of the other UI).  This is useful for live demonstrations, where you want to show a large preview of the composition on a second monitor without hooking up the capture card output to that monitor. The button lives in the Composite second of the UI, next to the display texture choice, and honors the choice of display texture you choose.\r\n\r\n![image](https://user-images.githubusercontent.com/10050922/58125283-173a9600-7bc5-11e9-8cb5-6c4753835d74.png)\r\n'"
446787439,4501,"b'[MRTK Shell Parity] [Button] Fit & finish: proximity light intensity, distance, pulse effect polish'","b""## Overview\r\nFit & finish: proximity light intensity, distance, pulse effect polish\r\nPart of #4200 [MRTK Shell Parity] UX Controls Parity with HoloLens 2 Shell  \r\n\r\n## Changes\r\n- Fixes: #4410 \r\n\r\n## Updates to match shell's design spec\r\n- Updated front cage's borderline thickness, glow intensity (PressableButton prefab)\r\n- Icon and Text moves the 1/2 distance of the front cage (PressableButton.cs)\r\n- Updated example button sizes (HandInteractionExample scene)\r\n- Updated Toggle Features panel and added it as a prefab\r\n\r\n![MRTK_Button_Polish_IconText2](https://user-images.githubusercontent.com/13754172/58124689-a5ae1800-7bc3-11e9-865b-9e9142a40168.gif)\r\n\r\n![MRTK_Button_Polish_Lighting](https://user-images.githubusercontent.com/13754172/58124802-ec9c0d80-7bc3-11e9-8c9c-f9669c07f16a.gif)\r\n\r\n![2019-05-21 12_04_05-Unity 2018 4 0f1 Personal - HandInteractionExamples unity - MRTK-Public-Microsof](https://user-images.githubusercontent.com/13754172/58124850-063d5500-7bc4-11e9-8832-0eb7ffe97675.png)\r\n\r\n\r\n\r\n\r\n"""
446755214,4500,"b'Enable .NET scripting backend support in CI, part 1/2'","b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/3656\r\n\r\nThis change updates the code and build scripts to the point where .NET backend builds will work in CI. There were a number of issues in getting to this point, and note that this change alone isn\'t enough to get things working in CI (we need to also update the pipelines YAML files to build the .NET backend)\r\n\r\nThis PR still lists all of the things needed to be changed, and **bolds** the ones that this one takes care of:\r\n\r\n- **The play mode tests** have a dependency on the input simulation asmdef, but the input simulation asmdef isn\'t built on all of the the platforms that the playmodetests are run on (in particular, the one the that\'s interesting is WSA). This solution isn\'t super optimal but it\'s workable for getting this CI working.\r\n- **UnityBuildPlayerTools** - this wasn\'t strictly necessary, but is something that users do in order to debug/build - typically we will enable C# projects when building .NET to be able to iterate faster within VS itself, instead of having to rebuild from within Unity each time. This makes it so that building the .NET flavor also flips this switch to on, to simulate what we use this scripting backend for.\r\n- **NuGet restore** - when you build via visual studio, VS will actually restore nuget packages for you - without it random stuff will fail (i.e. you\'ll get things like ""System"" namespace wasn\'t found). Since we\'re not using VS to build (we\'re using msbuild directly) we need to do this step ourselves.\r\n\r\nThings that will come in the next PR (to keep our pipeline and code changes separate)\r\n\r\n- The folder destination of the appx package and its naming are also different when building C# projects, so instead of being in the build/AppPackages/MixedRealityToolkit folder, it\'s actually in the build/MixedRealityToolkit/AppPackages. And instead of the name MixedRealityToolkit_2.0.0.0_Win32_Master_Test, it\'s MixedRealityToolkit_2.0.0.0_x86_Master_Test. This will need to be a followup YAML pipeline switch on scripting backend.'"
446628967,4498,b'Add play mode tests to CI pipelines',"b'Modifications to CI profile, taken from PR #4185 by wiwei.\r\nChange Error on initialization of dictation and speech services to warning.'"
446504503,4495,b'Make sure sim hands are initialized when starting in persistent mode.',"b'## Overview\r\nSimulated hands would not show when toggling persistent hands as the first action (T/Y keys) before first moving them (shift/space). They are now initialized in both cases where tracking starts, either when simulating hands or when just toggling them on.\r\n\r\n## Changes\r\n- Fixes: #4365 .\r\n'"
446351794,4490,b'Remove extra configuration profile references',"b'## Overview\r\n![image](https://user-images.githubusercontent.com/3580640/58057910-b1de9a80-7b1b-11e9-8e99-0858c13d4df5.png)\r\n\r\nA `ConfigurationProfile` is [already defined in `BaseService`](https://github.com/microsoft/MixedRealityToolkit-Unity/blob/mrtk_development/Assets/MixedRealityToolkit/Services/BaseService.cs#L24), leading to the above warning.'"
446331445,4484,b'Vive Pro Defaults OpenVr Generic Device causing one hand operation errors due to missing Spatial Grip Input Action',b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4470\r\n\r\nAdds the Input Action assignment to support Vive Pro controllers'
446326258,4482,b'Eye targeting is not working with near hand pointers',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4431\r\n\r\nIn a previous change (https://github.com/microsoft/MixedRealityToolkit-Unity/pull/4270) a gaze provider state machine was added to bring the head gaze pointer behavior in-line with how the shell works. This had the side effect of also impacting eye-gaze state. This change brings the old eye-gaze behavior back by updating the state machine to be aware of the type of gaze being provided.\r\n\r\nAlso added a bunch of tests for this new thing, along with tests that show that transitions between the two (for example, when the eye tracking system gains tracking or loses tracking) works well.'"
446286892,4480,b'Refactor localization logic for clearer class naming/less component coupling',"b""The first wave of alignment changes came in kind of hot/weren't thoroughly reviewed based on some time constraints. This review changes some items in preparation for the final spectator view experience.\r\n\r\n1) SpatialCoordinate related classes have been moved out of the state synchronization code base. SpatialCoordinateSystemManager now registers itself with the StateSynchronizationObserver and StateSynchronizationBroadcaster to obtain network events. But now spatial coordinate related classes no longer misuse the broadcaster/observer naming. In the future the spatial coordinate manager will need to have bidirectional communication across devices.\r\n\r\n2) *LocalizationMechanism class names were reduced to *SpatialLocalizer for legibility. It also appeared that a great deal of marker detection specific logic was living in a base class. This logic has been moved to ArUcoMarkerDetectorSpatialLocalizer so that work can also begin on ArUcoMarkerVisualizerSpatialLocalizer.\r\n\r\n3) ConnectedObserver has been renamed to SpatialCoordinateSystemMember. This class was used by both broadcasters and observers in the state synchronization world to identify members of the coordinate system/shared experience. The name ConnectedObserver seemed inappropriate.\r\n\r\n4) A new scene was created for the state synchronized spectator view experience (SpectatorViewStateSynchronization.cs). Requiring alignment logic in order to test state synchronization code is unnecessary coupling. Although most state synchronization will want a shared coordinate system, that may not always be the case in the future for remote experiences/VR.\r\n\r\n5) ArUcoMarker*Localizer logic has been refactored to take any marker detector.\r\n\r\nNote: This breaks changes the original SpectatorView.cs script to become SpectatorViewOld.cs"""
446223504,4478,b'Fixed numbers in enumeration',b''
446155446,4476,b'Extend the Files utility to support non-core modules and loading.',"b'## Overview\r\n\r\nArticulated hand pose data loading from json files depends on finding paths in the InputSimulation folder. This was using a hardcoded relative path that can easily be broken by installing MRTK into a non-conventional directory.\r\n\r\nThe fix involves using the MixedRealityToolkitFiles utility class that registers the MRTK directory and provides convenient path construction. However, the utility was only registering the core MixedRealityToolkit path, so it has to be extended to track all the major modules in MRTK.\r\n\r\n## Changes\r\n- Fixes: #4448 '"
446133451,4475,b'Added input action handler interface to receive action events regardless of the input source',b'## Overview\r\n\r\nAdded a new input action handler interface to listen for input action events regardless of input source: \r\n\r\n```\r\npublic interface IMixedRealityInputActionHandler : IMixedRealityBaseInputHandler\r\n{\r\n\tvoid OnActionStarted(BaseInputEventData eventData);\r\n\tvoid OnActionEnded(BaseInputEventData eventData);\r\n}\r\n```\r\nAlso added an input action handler script for convenience:\r\n\r\n![InputActionHandler](https://user-images.githubusercontent.com/47451126/58026822-4098ea80-7b0f-11e9-81c6-938ad91c1c15.PNG)\r\n\r\nAnd an input actions example:\r\n\r\n![InputActionsExample](https://user-images.githubusercontent.com/47451126/58026917-7b9b1e00-7b0f-11e9-9735-708e206e7f47.PNG)\r\n\r\n## Changes\r\n- Fixes: #4006  .'
446071110,4474,b'Fix spatial mapping to work with teleport and camera control.',"b""## Overview\r\nModification to allow spatial mapping to work with teleport and camera control via the MixedRealityPlayspace.\r\n\r\nRather than having a WorldAnchor directly control the spatial mesh's transform, read the WorldAnchor's transform and concatenate with the playspace transform to get the mesh's transform.\r\n\r\n## Changes\r\n- Fixes: #4276  .\r\n\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
446001107,4473,b'Add component governance task',"b""Adds 'component governance' task for signing."""
445651011,4468,b'update minimum unity version from 2018.3 to 2018.4',b'Updates the project version and the minimum Unity version check to 2018.4.\r\n'
445647606,4467,b'Harden MRTK inspectors & increase re-usability of code',"b""## Overview\r\n\r\nThis change is another pass on the recent MRTK inspector changes for profiles. Although profile inspectors would render their fields when there was no MRTK instance in scene, they would not populate correctly and any edits wouldn't be driven into the serialized object. This change ensures that the user is notified when certain fields are not editable because of some dependency (whether a MRTK instance is needed, or enabled input system, etc).\r\n\r\nFurther, turns out the back button for profile inspectors was broken. The button would only go back up the profile tree for the ACTIVE instance in scene, not necessarily the parent of the current profile which actually could be multiple parent profiles referencing that child. The new approach checks that the current profile being viewed is active and assigned in the current scene/MRTK instance and thus it can be known what parent to select & view in inspector. If it is not assigned in scene, then the back button is hidden.\r\n\r\nFixed object fields not having correct filter types based on the type of profile expected or based on a service type/interface. \r\n\r\nAlso fixed issue where private local fields would be re-initialized every refresh because the inspector was being drawn as a sub-profile and not it's own window. Thus, it would be impossible to write any values as they were cleared every refresh\r\n\r\nReorganized utility functions for re-use. Deleted unnecessary code. \r\n\r\nSimplified utils\r\n-> Render MRTK logo\r\n-> Render Indented button\r\n-> Wrapper class to simplify enable/disabling sections of GUI rendering\r\n\r\nFixed spatial awareness mesh observer with correct return profile target\r\n\r\n## Changes\r\n- Fixes: \r\n#4452 \r\nConfiguration profile inspector doesn't constrain profile types for camera and diagnostics systems.\r\n#4449 \r\nClean up MRTK inspector dependencies\r\n\r\n## Verification\r\nTried adding new MRTK instance\r\nTried selecting mrtk profile that is not instanced\r\nSelected sub-profiles assigned and not assigned in instance\r\ndelete objectfield in config profile and ensure correct type is specified\r\nduplicated MRTK gameobject in scene\r\nBuilt unity example scenes into VS solution"""
445643704,4466,b'Add IMixedRealityDataProviderAccess and update how data providers are retrieved',"b""## Overview\r\nThis change introduces IMixedRealityDataProviderAccess, which allows system implementations a standard contract through which they can allow components access to data provider instances.\r\n\r\nAs an example, the solver handler now accesses the hand joint service using the following pattern\r\n\r\n``\r\nhandJointService = (InputSystem as IMixedRealityDataProviderAccess)?.GetDataProvider<IMixedRealityHandJointService>()\r\n``\r\n\r\nThis change also adds IMixedRealityMouseDeviceManager to allow for easy recognition of mouse data providers.\r\n\r\nTo ensure consistency across services with data providers, the spatial awareness system's GetObserver* methods have been marked as obsolete, with a message to check for implementation of IMixedRealityDataProviderAccess and to call GetDataProvider*.\r\n\r\nNote: The existing GetObserver* implementations now call the GetDataProvider* equivalents.\r\n\r\nThis change is part of the #3545 series and gets non-editor code (with a handful of small exceptions) entirely on to the new, flexible pattern.\r\n\r\n## Testing performed\r\n- Run edit mode test automation\r\n- UWP build target, Play mode, temporarilly add mouse data provider and move it in 3D space.\r\n- Added temporary code to request spatial observer, verified the obsolete attribute is displayed in Visual Studio"""
445642607,4465,b'Experimental commit to see how to enable .NET CI',"b""I'm trying to run the .NET backend on CI, and last we tried this there were still some errors when run on CI vs local. \r\n\r\nDon't actually review this - I would want to make this a draft PR but our CI currently isn't set up to watch/react to draft PRs, so yeah, don't look at this."""
445640907,4464,b'Fix spatial coordinate scene and remove some exceptions',"b'1) The state synchronization demo scene was missing some serialized fields.\r\n2) After completing detection, you can could get into a state where the marker spatial coordinate service states its no longer tracking. This throws an exception if a spatial coordinate is reported at the same time.'"
445639365,4463,b'Update the docs to mention that set of supported Unity 2018 backend/install options',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/3878\r\n\r\nWe had a question a little while ago about which components should be installed with Unity - this just updates our docs to explicitly state that we support both of the scripting backends on Unity 2018, so people install Unity 2018 can install either (or both!)\r\n\r\nAlso updates the MRTK_UnitySetupPrompt.png image, because we got rid of the ""forcing people to IL2CPP"" text on the dialog.\r\n'"
445630236,4462,b'Add a Calibration Test window for recording and testing Spectator View calibration files',"b'This PR adds a new window called Calibration Test for testing out a calibration file.  There are two steps to testing:\r\n\r\n1. Recording a test video.  This process connects to the holographic camera rig and captures video frames with the pose that the HMD was at for that frame. The video should include the ArUco marker used to establish an origin for the camera tracking.  The camera rig does not need to be calibrated yet during this process, as only the video input and HMD pose are recorded\r\n2. Playing back a test video.  This process loads a calibration file and the recording from step 1 and renders a cube placed on top of the ArUco marker.  This can be used to judge the quality of the calibration file. If the quality is great, the cube should appear to sit on top of the ArUco marker.\r\n\r\n![CalibrationTestWindow](https://user-images.githubusercontent.com/10050922/57957879-b9e7d180-78b2-11e9-9d90-a7311bd87db2.png)\r\n'"
445619127,4461,b'Slate prefab box collider performance issue',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4167\r\n\r\nSlates use the bounding box\'s rotate colliders in order to handle rotation - note that even though the slate provides its own box-like prefab, the bounding box still creates a sphere collider (which has wayyyyy more vertices than the simple box), even though a basic box would suffice. This change addresses the issue by adding an option to either use a box or sphere collider when a custom prefab is provided for bounding box rotate handles.\r\n\r\nThis is done in this way to avoid being a breaking behavior change - other folks can choose to use a more performant collider, and the slate is the only thing updated to use this behavior for now.\r\n\r\nFor the prefab, all I did was update the dropdown select button to choose ""box"" - everything else is auto-generated I think from new types/fields that have been introduced since the last serialization.'"
445604171,4460,b'Adding Localization for Broadcaster/Observer Synchronization',b'This change builds on top of the synchronization example to add localization behavior.'
445595115,4459,b'Fix the docs build',b'Fixes the docs build (and some formatting and a typo).'
445588806,4458,"b'Turning off ""Enable Hand Joint Visualization"" turns off hand input in Editor'","b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4268\r\n\r\nIt turns out that the hand pan interaction script was directly calling into the hand visualization code in order to get joint locations, instead of just calling the hand APIs themselves (which have the exact same data). As I understand, historically the only way of getting this information was through the visualization class. It's been a while that this hasn't been the case, so now it's good to just go straight to the joint data."""
445584878,4457,b'Adding Localization for Broadcaster/Observer Synchronization',"b'This change builds on top of the synchronization example to add localization behavior.\r\n\r\nFirst release of the PR is for personal review, will update shortly.'"
445580354,4455,b'Updates MixedRealityPlayspace and CameraCache to handle multiple scenes',"b""## Overview\r\nUpdates MixedRealityPlayspace to handle multiple scenes in editor and at runtime.\r\n\r\nThe MixedRealityPlayspace script has been converted to a MonoBehaviour. Static methods have not been altered so this is not a breaking change.\r\n\r\nWhen multiple playspaces are detected, the first loaded is given priority and the rest are disabled. If the Camera service or CameraCache detects that a main camera has been disabled, that camera is discarded and a new camera is found or created.\r\n\r\nThe Camera service is now responsible for supplying a main camera to CameraCache. This service is given the highest service priority to ensure that other services don't pre-empt camera creation. (If the Camera service is disabled, CameraCache returns a default camera.)\r\n\r\n## MixedRealityPlayspace Inspector\r\n\r\nThe playspace inspector now offers the choice to activate a playspace, much like the ability to set the active MixedRealityToolkit instance:\r\n\r\n![InactivePlayspace](https://user-images.githubusercontent.com/9789716/59380722-96c40c80-8d0e-11e9-8229-30b5c7797e8d.PNG)\r\n\r\nWhen active, the inspector offers some brief documentation about its purpose and capabilities:\r\n\r\n![ActivePlayspace](https://user-images.githubusercontent.com/9789716/59380748-a3e0fb80-8d0e-11e9-8446-164b4efc55a0.PNG)\r\n\r\n## Changes\r\n- Fixes: #4450\r\n\r\n## Known Issues\r\n\r\nThe creation of a camera and playspace may occasionally throw [this warning.](https://issuetracker.unity3d.com/issues/unity-throws-sendmessage-cannot-be-called-during-awake-checkconsistency-or-onvalidate-warning-when-manipulating-the-ui) The warning is harmless.\r\n\r\n## Questions (Asked during Draft phase)\r\nThis only searches root game objects for playspace transforms. Can playspace transforms be parented? Do we need to enforce keeping them in the root of the scene?\r\n\r\nDo we need to extend our search to main cameras as well?\r\n\r\nShould we worry about users enabling / disabling playspace transforms manually?\r\n\r\n## Verification\r\n- MixedRealityPlayspace now searches root game objects in loaded scenes. This is potentially expensive - we need to create tests for performance impact."""
445299704,4446,b'[MRTK Shell Parity] [Cursor] Asset: Cursor and Contextual icons',"b""## Overview\r\nAdding new shell cursor and contextual icon assets & prefabs.\r\n\r\n## Changes\r\n- Fixes: #4417 #4418 \r\n\r\n## Note\r\nWe need a code update to properly display contextual icons and new cursor assets. #4332 \r\ne.g.) Object with ManipulationHandler should display **CursorMoveArrowsMove.prefab** icon around the cursor\r\ne.g.) Bounding Box's upper right corner's scale handle should display **CursorMoveArrowsNortheastSouthwest** icon around the cursor\r\n\r\n![2019-05-17 00_07_00-Unity 2018 3 13f1 Personal - Untitled - MRTK-GitHub - Universal Windows Platform](https://user-images.githubusercontent.com/13754172/57910012-14444c00-7839-11e9-82a8-24a8b856c90f.png)\r\n\r\n![2019-05-17 00_10_48-Unity 2018 3 13f1 Personal - Untitled - MRTK-GitHub - Universal Windows Platform](https://user-images.githubusercontent.com/13754172/57910047-258d5880-7839-11e9-82c2-5080a9dbcfa6.png)\r\n\r\n### Example of contextual icons displayed around the cursor\r\n![2019-05-17 00_09_49-Unity 2018 3 13f1 Personal - Untitled - MRTK-GitHub - Universal Windows Platform](https://user-images.githubusercontent.com/13754172/57910018-173f3c80-7839-11e9-8698-13d83842b92c.png)\r\n\r\n### Cursor and icon prefabs\r\n![2019-05-17 00_10_33-Unity 2018 3 13f1 Personal - Untitled - MRTK-GitHub - Universal Windows Platform](https://user-images.githubusercontent.com/13754172/57910028-1a3a2d00-7839-11e9-8269-c5d2bdb0ff0a.png)\r\n\r\n### Cursor and icon assets - Mesh, materials\r\n![2019-05-17 00_11_58-Unity 2018 3 13f1 Personal - Untitled - MRTK-GitHub - Universal Windows Platform](https://user-images.githubusercontent.com/13754172/57910036-1efee100-7839-11e9-8a82-a7bae2113af0.png)\r\n\r\n"""
445222131,4443,b'Add ability to instantiate and configure BoundingBox from code',"b'## Overview\r\nFixes some bugs in BoundingBox that prevented it from being instantiated at runtime, and expose properties so that all bounding box fields can be changed in code.\r\n\r\nAlso create a test scene under Examples/UX/BoundingBox that tests instantiating a bounding box and setting various properties, as well as a test \r\n\r\nAdditional fixes:\r\n- Don\'t require collidable on bounding box by no longer extending BaseFocusHandler (it is not needed, we don\'t use any functionality in BaseFocusHandler).\r\n- Expose property ""show debug fields"" in editor so people can debug the bounding box.\r\n- Correctly compute bounds of a bounding box when encapsulating many children.\r\n\r\n## Changes\r\n- Fixes: #3950 #4394 #4397\r\n\r\n## Verification\r\n\r\n> git fetch origin pull/4443/head:julenka/bbox\r\n> git checkout julenka/bbox\r\n\r\n- Tested HandInteractionExamples scene\r\n- Tested BoundingBoxExamples scene\r\n- Verified manually that UWP builds.'"
445210645,4442,b'Add a default set of profiles that are optimized for getting started with HoloLens2',"b""The default MRTK profile is good at showing off a lot of the features in VR and AR, but has some extra settings that either aren't necessary in AR (teleportation, boundary) or aren't performant (hand mesh visualization). Furthermore, there are also some settings that must be enabled specially in order to use HL2 features (such as Eye Tracking), which should really be set by default.\r\n\r\nThis copies a subset of the configuration profiles with deltas as follows:\r\n\r\n1. Boundary system is disabled.\r\n2. Teleport system is disabled.\r\n3. Spatial awareness system is disabled.\r\n4. Eye tracking provider is added (https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/EyeTracking/EyeTracking_BasicSetup.html#create-an-eye-gaze-data-provider)\r\n5. Eye simulation is enabled by default (for input simulation).\r\n6. Hand mesh visualization is disabled.\r\n7. Camera profile settings are set to match, so that visual quality in the editor and device will look similar.\r\n\r\n#4351 \r\n\r\nFor reviewers, please comment on where you think this should actually go - I opted not to put it in examples because I felt like for folks who just grab the foundation package, this should also be available to them.\r\n\r\nAlso if there are other defaults that should be set/updated, let me know."""
445208120,4441,b'Add calibration status message to the Compositor window',b'This change adds one more line of status information to the Compositor window so that you can easily tell whether or not calibration data was received and loaded from the connected camera rig.'
445190267,4439,b'Move the disposal of the dictation and speech providers off the main Unity thread.',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4261\r\n\r\nStarting and stopping play mode can be excruciatingly slow because of the time spent waiting for the dictation and speech providers to shut down. These are ultimately due to slowdowns in the Unity wrapped APIs themselves (and ultimately the UWP APIs)\r\n\r\nNote that the ""dispose"" function on these services isn\'t a standard monobehavior function - it\'s specially invoked by the finalizer of the BaseService - this happens off of the main Unity thread.\r\n\r\n## Verification\r\nPlease fetch this change locally by running:\r\n\r\n> git fetch origin pull/4439/head:verifyslowdownpr\r\n> git checkout verifyslowdownpr\r\n'"
445185082,4438,b'Calibration touchup - use new compositor.',"b""The original calibration work used some old code behind preprocessor directives. This change moves the calibration scripts to use the new dslr compositor logic.\r\n\r\nIn this change:\r\n1) The CompositorWrapper script is updated to use CompositionManager and TextureManager for obtaining dslr frames\r\n2) Calibration scenes are updated to use the CompositionWrapper. Note, the VR headset calibration scene has been removed for now. Once we have qr code dlls, work will be done to add this scene back.\r\n3) Plugin dlls were updated based on the UNITY_WSA preprocessor directive. It seems that this can still be true in the editor, which makes for a weird experience. I've updated api scripts to use WINDOWS_UWP instead so that if the editor is building for UNITY_WSA, things still work correctly."""
445176107,4437,b'Update runtime components to access system profiles from the system instance',"b'## Overview\r\nAs part of #3545, systems are passed their profile via the constructor. With the PR series that started with #4099, client code can access system instances from the service registry.\r\n\r\nThis change updates runtime and client code (with a small set of exceptions) to access system profiles directly from the system instance. For example:\r\n\r\n```\r\n MixedRealityInputAction[] actions = InputSystem.InputSystemProfile.InputActionsProfile.InputActions;\r\n```\r\n\r\nNOTE:\r\nWhile this _is_ a breaking change, it is purely additive for code that _consumes_ services. Services themselves will require updating to support IMixedRealityService.ConfigurationProfile and <serviceinterface>.<service>Profile properties.\r\n\r\nChanges to handle editor code (and the set of remaining runtime files) are forthcoming.\r\n\r\nFixes: #4335\r\n\r\n## Testing performed\r\n- Play mode, solver demo scene (select objects, teleport)\r\n    - OpenVR\r\n    - Windows Mixed Reality Immersive\r\n- Edit mode test automation'"
445155156,4435,b'Move MRTK addition to scene to utility class',b'## Overview\r\nFixes debug assert with multiple MRTK instances and simplifies code to one utility function for adding MRTK to the current scene\r\n\r\n## Changes\r\n- Fixes: #4426\r\nAssert failing in MixedRealityToolkitInspector.CreateMixedRealityToolkitGameObject() \r\n\r\n## Verification\r\nAdd to scene & configure\r\nbuilt project\r\nDuplicate MRTK with multiple instances\r\n'
445154453,4433,b'Take 2: Fix NullRef when Interactable created at runtime ',"b'## Overview\r\nSecond attempt after reverting PR #4391 which broke UWP builds.\r\n\r\nFixes: #4183 \r\n\r\nChanges:\r\n- Add new method States.GetDefaultInteractableStates(), use those states if States field is null.\r\n\r\n## Verification\r\n- Verified by running repro steps at #4183 and seeing that Interactable is correctly instantiated.\r\n- Tested HandInteractionExample in editor\r\n- Added playmode test to verify.\r\n'"
445152003,4432,b'Best-effort handle ReflectionTypeLoadExceptions in controller type assembly enumeration',"b'https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4319\r\n\r\nThe controller type enumeration happens to look through every single assembly that is visible to the editor - it\'s possible that this certain classes of a module may not be loadable, so in that case we will end up using those best effort.\r\n\r\nNote that I wasn\'t ultimately able to repro the reported issue, but doing some online searches I can see it is a not-uncommon issue, especially when you\'re enumerating every single visible asssembly like we are. Maybe it would be more appropriate to not handle the exception if we could scope our assemblies to just ""MRTK"" and ""MRTK extending"" ones, but there\'s no clean way of doing that.'"
445141105,4430,"b'Revert ""Fix NullRef when Interactable created at runtime""'","b'Reverts microsoft/MixedRealityToolkit-Unity#4391. #4391 does not build in UWP, need to fix that.'"
445136054,4429,b'Use more-strict heuristics for determining if the set of detected ArUco markers should be used to estimate the final marker position',"b""When detecting ArUco markers with HoloLens, sometimes an incorrect detection will throw off the average marker detected.  There are two new strategies used to help mitigate this:\r\n\r\n1. Filtering out outliers and not including them in the final average marker compuation. Outliers are markers whose average position is more than 1.5 standard deviations from the mean position, or whose rotation is more than 1.5 standard deviations away in angular offset from the average rotation.\r\n2. Ensuring low variance in the detected markers. When blurry photos or photos at the edge of the FOV are taken, I've observed much higher variance in results.  This heuristic ensures the standard deviation of the position and rotation are within a threshold before accepting the results."""
445122603,4428,b'Fix the position of the ArUco marker when detected by OpenCV',"b""When I'm detecting an ArUco marker from HoloLens, I noticed that the Y position seemed inverted. When the marker was centered in the vertical FOV of the camera, its position and rotation were right, but as it got closer to the bottom and top of the FOV of the camera, its Y offset was inverted and the world position of the marker ended up incorrect.  This change seems to reliably correct that issue for me."""
445101247,4427,"b'Simplify enabling/disabling eye tracking feature support with MRTK, Part 1'","b""There are three steps that you need to take to enable eye tracking, and one of them is flipping a checkbox on the GazeProvider. The interesting thing is that even if this is set to true, the gaze provider will end up defaulting back to HL1 behavior anyway if eye tracking capabilities aren't set up, so there's no harm in having the setting default to true - for folks who have HL1, they will still get HL1 behavior. For folks building on HL2, they will have one less step to take.\r\n\r\nNote that this does increase the work for folks who have HL2 and actively want HL1 behavior, however.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/4245"""
445084700,4424,b'Adds multi-scene editor tests / tests for multiple MRTK instances',b'## Overview\r\n- Updates TestUtilities to support tests with multiple scenes.\r\n- Adds editor tests for multiple MRTK instances.\r\n- Updates Playmode tests for multiple MRTK instances.'
445079132,4423,b'Add ArUco marker detection for establishing the origin for the holographic camera',"b""This change adds a button to locate an ArUco marker to establish the origin for the holographic camera. The ArUco marker is currently a 10x10cm marker 0 from the 6x6 marker set.  Once the marker is located, a WorldAnchor stores the position on the camera rig to keep the anchor established between sessions.\r\n\r\nThere's also a bug fix in here to raise the MarkersUpdated event from Unity's main thread. This will now match the behavior of the QR code marker detector."""
445055722,4421,"b""Updated outdated description and axis constraint for 'Select' input action in default speech commands profile""","b""This was causing 'Select' speech comands being ignored when filtering using the 'Select' input action.\r\n\r\nFixes: #4419  ."""
445014664,4404,b'UPM compliant packages for MRTK',b'## Overview\r\nCreates UPM compliant packages for Unity 2018.3\r\n\r\n## Changes\r\n- Fixes: #4403 .\r\n\r\n\r\n## Verification\r\n- Please specifically check out the changes in `MixedRealityToolkitFiles.cs` since it looks like there is a fair amount of code there that does string manipulation to find the MRTK folders and assets. I am pretty sure I fixed most of code paths but would like to get some extra coverage here.\r\n- I already have an Azure Pipeline build that zips up and creates the UPM compliant packages in my fork. See release here: https://github.com/ei2kpi-ptc/MixedRealityToolkit-Unity/releases/tag/v2.0.0-RC1-Refresh-UPM. It would be great if we could add this to the MRTK releases as well since it is just a simple archive of the folders.'
445008152,4402,b'Move pipeline steps into templates and add internal Release build',"b'Extract common parts of build definitions into templates.\r\nAdd ci-release template (for the build that creates official packages).\r\n\r\nSome things to note or to improve further:\r\n- The standard extension for YAML is .yml, not .yaml. Unfortunately I used the latter for the original pipeline definitions and I did not rename those files in this PR (mrtk_CI and mrtk_PR pipelines point to them, so we would need to switch on the Azure DevOps side). I used .yml extension for any new files.\r\nWe could actually change to a different convention - use .yml for top level configs (Azure DevOps UI will automatically locate them and display in a drop down when creating a new build) and .yaml for internal templates (won\'t be picked up by the UI). Perhaps something to consider later on?\r\n- I tried to move UnityVersion and MRTKVersion variables into a separate template. This works but unfortunately pool:demands does not perform variable expansion, so we would still end up with multiple places where the Unity version needs to be updated. I reverted that change for now - we can revisit that later.\r\n- PR validation now also gained a step to compile with .NET backend. It was convenient to do that instead of splitting the ""common.yml"" template but I can change that based on feedback.\r\n'"
444846927,4398,b'Enable UI interactions using an Xbox controller',b'## Overview\r\n\r\nChanges in this PR:\r\n\r\n- Gave the Xbox controller a pose in the form of a new spatial pointer interaction mapping\r\n- Modified Unity Joystick Manager to create pointers for controllers if they have any assigned in the pointer profile.\r\n- Added an entry in the default pointer profile to create GGV pointers for Xbox controllers.\r\n\r\n## Changes\r\n- Fixes: #4201  .'
444712202,4391,b'Fix NullRef when Interactable created at runtime',b'## Overview\r\nFixes: #4183 by loading the default interactable states if Interactable.States is null on Awake(). This can happen when Interactable is instantiated at runtime.\r\n\r\n## Verification\r\nVerified by running repro steps at #4183 and seeing that Interactable is correctly instantiated.\r\n'
444697781,4390,b'Reworked Alignment Abstraction',"b'This change brings in some of the changes from Build Demo, and reworks a bit the alignment abstraction. Next I will work with Chris to get this hooked up and tested with markers and spectator view. After that is add the ASA implementation.'"
444694660,4389,b'Update the Unity Package build step to accurately named.',"b'I think that this step used to build nuget packages as well, until we did the later NuGet work (of packing it up at the end of CI). However, this text appears to have stuck around.\r\n\r\nNote that the command it runs actually says ""NoNuget""\r\n\r\nI noticed this as I was doing some nuget/packaging work, figured I should clean it up while I\'m in there.'"
444694620,4388,b'Diagnostics Visual Profiler Improvements',"b'## Overview\r\n- The Visual Profiler now supports user defined colors for performance thresholds on the frame info panel. Defaults to green when at 95%+ of the target framerate, yellow when at 75%+ of the target framerate, and red otherwise. (A request from multiple users.)\r\n\r\n- Portions of the profiler can be dynamically toggled on/off, such as the frame info panel and memory stats.\r\n\r\n![VisualProfilerChange](https://user-images.githubusercontent.com/13305729/57816864-c98bdc80-7731-11e9-984f-6963183ac92e.gif)\r\n\r\n- Fixed an issue where required shader permutations for rendering the frame info items using instancing were not included in player builds. This will result in improved rendering performance for the Visual Profiler.\r\n\r\n## Verification\r\nVerify the Visual Profiler displays in editor and player .\r\n\r\nFixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4414\r\n'"
444692719,4387,b'Update the MRTK NuGet packages to have only a Foundation and Examples package.',"b""The current NuGet package count is somewhat of a reflection of the folder structure of the MRTK, and ultimately in order to build interesting things you need to have all four MRTK packages (i.e. Core, Providers, SDK, Services) in order to build anything interesting (for example, things in Examples). Rather than ship four packages that all must be included, we'll avoid the overhead of having to juggle four different things and just ship those as a single package.\r\n\r\nNote that this also:\r\n\r\n1) Still ships Examples as its own package (now with a dependency on Foundation)\r\n2) Removes the test NuGet package (it's not interesting to ship to other customers our tests, which we run internally)."""
444687220,4386,b'Broadcaster/Observer state synchronization for spectator devices',"b'The code within this review enables synchronizing unity scene content across devices. It specifically enables a main user (broadcaster) to relay their scene content to spectator devices (observers). It DOES NOT enable state synchronization for multiple users interacting/supplying input to a shared scene.\r\n\r\nWithin this review you can find the following:\r\n\r\n1) IComponentBroadcaster and IComponentObserver interfaces. For each synchronized type, an implementation of said interfaces is required. Many standard unity types (transforms, meshes, etc) already have these classes implemented. These interfaces are managed by IComponentBroadcasterServices that register with the StateSynchronizationSceneManager\r\n\r\n2) Editor functionality for updating AssetCaches. AssetCaches need to be configured at compile time so that different scene/resource content have shared ids across devices.\r\n\r\n3) A StateSynchronization demo scene. This scene shows what MonoBehaviours and function calls are required for setting up a synchronize experience.'"
444679530,4385,b'Exception raised in call to InteractionManager.GetCurrentReading()',"b""There's an underlying Unity bug where calling InteractionManager:GetCurrentReading when there are no sources trips this asssertion. This change addresses a couple of things:\r\n\r\n1) Works around this underlying bug by checking to see if numSourceStates == 0 (if so, don't bother calling that API)\r\n2) As a related but not totally related change, making it so that we now support cases where the number of states is > the value of 20. Note that I didn't change the naming of it because the value is public (and thus, it would be a value-less breaking change).  When we detect that our array size is not large enough, we will re-allocate (and in a way that should reduce the number of repeat allocations if the numbers are fluctuating a lot).\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/4287"""
444676165,4384,b'Removes ExecuteAlways from MixedRealityToolkit',b'## Overview\r\n\r\nRemoves the [ExecuteAlways] attribute from MixedRealityToolkit instance to prevent it from being destroyed on entering play mode in editor. This was causing some services like camera and input simulation to not function.\r\n\r\nFixes #4392\r\nFollow-up fix for #4381'
444662866,4383,b'Clean up a dead meta file.',"b'It looks like with this change, https://github.com/microsoft/MixedRealityToolkit-Unity/commit/3f99837d23465857ecd533bc46903a443f3b4dce#diff-0839b16787c3c63d682e567be8e56a92 this file was added unintentionally (probably some leftover file during profile testing)'"
444642543,4382,b'Prevents multiple MRTK instance initializations on enter playmode',b'## Overview\r\n- Fixes: #4381'
444591857,4380,b'Fix for the air-tap gesture on HL1 holographic remoting.',"b""https://github.com/microsoft/MixedRealityToolkit-Unity/issues/3909\r\n\r\nThis issue has been around for a while, and has some interesting history. The underlying cause is a bug in a Unity API (see the code for details), which was fixed at some point in the past, but regressed at some unknown time. With no ETA on when the underlying Unity bug, we're checking in a workaround to our code so that customers can get unblocked.\r\n\r\nNote that this scopes the fix to only situations where remoting is active. Otherwise this is the same as the workaround that was posted in the linked issue."""
444561342,4375,"b'Mark the speech event data as ""used"" to prevent double invocation of the handler.'","b'## Overview\r\n\r\nIt seems that event data is supposed to be marked as ""used"" by handlers, so it doesn\'t bubble up further. The SpeechInputHandler is not doing this and so gets invoked twice for the same speech event, when it is both a global and focused listener.\r\n\r\n## Changes\r\n- Fixes: #4368 \r\n'"
444560121,4374,b'Merging latest from MRTK_Development',b'This merges latest from mrtk_development into features/spectatorView'
444543023,4367,b'Changed dead zone in MRTK-created input axes to the Unity default (0.19)',b'This fixes #4366.'
444515592,4364,b'Delete the non-functional AttachToController',"b""Per issue: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4033\r\n\r\nIt looks like this solver was added but never fully completed (all of the interesting code was commented out). Rather than ship code that doesn't work, we'll delete it. If we're doing a controller or solvers pass, we can add this back at that time."""
444511683,4363,b'Fix broken .NET build',"b""The default keyword isn't available in the .NET language version that the .NET backend supports."""
444464503,4362,b'Use pointer rotation too for scaling and rotation manipulations in bounding box',b'This fixes #4361 '
444363325,4360,b'Report active inputs (non-zero/true) as changed',"b""This aims to fix #3253 . It is a breaking change because it changes the current behavior but I don't think in practice would cause much trouble.\r\n\r\nFor clarity, I think we should also update naming throughout to talk in terms input Updated or Active instead of input Changed. This will be quite disruptive as it will affect all implementations IMixedRealityInputHandler so we probably want to defer that to v3."""
444285909,4358,b'Replaced PlatformSupport with a type based approach',"b'BETA:\r\n\r\nThis Pull Request is a first draft of how a type based platform support approach could look like. It\'s definitely a breaking change affecting several files listed below.\r\n\r\nThe main goal was to be able to more granularity define criteria for certain platforms. This goes as far as e.g.:\r\n\r\n""I want to have this service under UWP, but only on Desktop and only when I have a controller connected""\r\n\r\nMixedRealityDataProvider now uses classes that return a boolean based on the criteria defined in them. The first reason to do this was that Android supports mobile, Oculus Go and who knows what other platforms.\r\nThe current classes, deriving from IPlatformSupport, mimic the current implementations of platform checks, so there is no degradation there (at least ;) )\r\n\r\n### Affected files:\r\n\r\n- **IMixedRealityServiceConfiguration** and everything that derives from it:\r\n\r\nPros:\r\n- Every configuration that can be checked now can be checked\r\n- Is configurable the same as an enum, except for that you can just add classes and it still works\r\n\r\nCons:\r\n- IMixedRealityServiceConfiguration implementors need to rewrite and reserialize a lot\r\n- The new system doesn\'t make it obvious, that IPlatformSupport has a preprocessor directived method to be implemented, which in turn needs to be wrapped as well (was formerly distinguished in the MixedRealityToolkit check)\r\n- You must not create more than 32 derived classes\r\n\r\nI\'m not sure if it\'s a pro or con, but the MaskFields Nothing and Everything fields act the same, because no platform is not permitted and therefore null is also every platform.\r\n\r\nAdresses #4235'"
444218486,4357,b'Interactable: Implement near interaction grab states with examples.',"b'## Overview\r\nThe latest focus of this work is added the grab state from a near interaction. There was a PhysicalTouch State previously, so I wanted to add examples for that as well.\r\n\r\nWorking on issue #3897 \r\n\r\n1. Added the Grab state to the InteractableStates enum and state list.\r\n2. Fixed a bug where the state list was not getting updated properly to import all the states at runtime, so the grab state was not triggering. At least one state that was added previously was not added to the states list, so I added that - Voice Command.\r\n3. Created a theme for grab, InteractableGrabScaleTheme which will provide a squeeze effect when an item is grabbed using a near interaction.\r\n4. To enable the theme functionality properly, I implemented a custom settings feature in themes, something that was stubbed in, but was not functional. A theme will assign one or more properties, like a color or Vector3 to each state, but custom settings allows for exposing properties that control how the overall theme applies those state values. For the grab scale theme, there is a magnifier value that controls how the scale is applied to give the squeeze effect.\r\n5. Created an OnTouch and OnGrab receiver, for the event system to expose those events and provided an example for them.\r\n6. Created a new states object containing states for Default, Focus, Press, Touch, Grab and Gesture. There is an example of this theme and state system. \r\n7. As I worked on the themes, when a new theme property was added, the theme settings was closed by default. This was annoying, so I added a line in the inspector code to open the settings by default.\r\n8. While updating the examples scene, I added some audio receivers to show examples of playing audio on click, this was existing functionality, but was not shown anywhere.\r\n9. I also noticed the words on the see-it-say-it label for the holographic buttons were not hooked up. The voice command functionality has been changed recently, so this caused some confusion with what I thought I was doing, which seemed simple enough, but is a much bigger deal. I opened an issue on this. #4598 Updated the Example scene to use the Speech Command listed on the See-it-say-it-label.\r\n10. Updated documentation on states, themes and events.\r\n\r\nThe listed work started with adding the grab state, but what does this mean for Grip Press from a controller?\r\n\r\nIn this case, we listening for the specified Input Action (Select) but also looking for physical touch and grab from near interaction. To easily have near and far interactions, with potentially extra feedback for near interaction, this is a nice interaction. Even if we are not using the Grab or Physical Touch states, these interactions now enable feedback, which would have been ignored previously. A NearInteractionGrabbable uses the GripPress action, but Interactable would have ignored it if Select was the chosen Input Action.\r\n\r\nThe preferred process is to use the Input Action drop down to target the action Interactable will listen to, like grip from a controller or menu button.\r\n'"
444178101,4356,b'Fixed issue where SetSelection was not triggering an update to the ra\xe2\x80\xa6',"b""\xe2\x80\xa6dial colleciton.\r\n\r\n## Overview\r\nThere were changed in Interactable that effects how this script changes which radial button is selected. InteractableToggleColleciton.SetSelection(index) used to call into Interactable's pointer click event, but some of the checks do not allow this call to pass, execute a click and call back to the InteractableToggleCollection to set the new selected index.\r\n\r\nThis fix just brute forces the visual state change without triggering any onClick events in the interactable, which is I think is preferred.\r\n\r\n## Changes\r\n- Fixes: #4331  .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n"""
444165217,4355,b'Indeterminate loader',"b'## Overview\r\nAddition of a simple Indeterminate Loader based on HoloLens 2 system design. Easily tunable for personal needs, the default settings match what the current design is.\r\n\r\nSimply enable / disable the indeterminate loader prefab to visualize a loading state in your app.\r\n\r\nThis addresses feature request: #4408 \r\n\r\nNew files:\r\nIndeterminate loader prefab\r\nLoader controller script\r\nMRTK standard shader material - Unlit white\r\n\r\n![image](https://user-images.githubusercontent.com/1186832/57738048-c37afa80-7662-11e9-9892-b56dab692862.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1186832/57738067-d8578e00-7662-11e9-9670-784b6492df28.png)\r\n\r\n'"
444155791,4354,"b'Fixed broken link ""loaded additively""'",b'Fixed a broken link.\r\n\r\n## Changes\r\n- Fixes: broken link.'
444152474,4353,b'IMixedRealitySceneSystem interface and definitions',"b'## Overview\r\n\r\nInterface for the IMixedRealitySceneSystem service described in #3987\r\n\r\nAn complete implementation is in progress in draft PR #4107\r\n\r\nWhile we wait for that PR to exit the draft stage @davidkline-ms suggested we discuss the interface, which is ready to be evaluated.\r\n\r\nLooking forward to your comments and suggestions!'"
444148059,4352,b'Expose ability to get and set scaling limits on bounding box at runtime',"b""We're making use of bounding boxes to manipulate dynamic content. Part of this involves dynamically querying the size characteristics of the content and deciding at runtime what the minimum and maximum scale factors should be. Another part of this scenario is detecting when the minimum/maximum are reached to display information to the user.\r\n\r\nExposing these values and the means to update them at runtime (and recalculate the cached parameters based on them) allows completion of this scenario. This also exposes the ability to have more precise control of scaling by setting it in either absolute or relative (default) terms.\r\n\r\npartially Fixes:#3950"""
444120424,4348,b'Create a universal calibration file format',"b'This change takes the existing JSON format used for camera intrinsics and extrinsics and combines them into a single file format, which can be serialized and deserialized using CalculatedCameraCalibration. I tested converting a locally-produced calibration file to this format and verified that it loads and works as expected. With this change there are no longer ICalibrationParsers. Instead CalibrationData is always used when receiving calibration files from the HMD.'"
444106888,4343,b'MRTK Optimize Window tool to automate perf settings',"b'## Overview\r\nThis change introduces an editor window that will help developers analyze lacking performance settings in their application development. \r\n\r\nTool can be launched via:\r\nMixed Reality Toolkit > Utilities > Optimize Window\r\n\r\nFeatures:\r\n- Project Optimizations:\r\n    - SIngle Pass Instanced Rendering\r\n    - Depth Buffer Sharing\r\n- Scene Optimizations:\r\n    - Disable Global Illumination\r\n    - Analyze scene for num of lights and lights casting shadows\r\n    - Analyze scene for 5 largest geometry (by polygon count)\r\n- Shader Optimizations:\r\n    - Analyze assetdatabase for all materials with Unity Standard shader\r\n    - Convert materials to MRTK Standard Shader\r\n\r\nPerformance recommendations updated based on performance target developer desires (AR headsets, VR standalone, VR Tethered). Lots of area of improvement in this vein. \r\n\r\nNote: Editor changes only. No breaking change to MRTK infrastructure\r\n\r\n![MRTK_Optimize1](https://user-images.githubusercontent.com/25975362/57729372-dbdf1b00-764a-11e9-8625-d36c598aab36.PNG)\r\n\r\n![MRTK_Optimize2](https://user-images.githubusercontent.com/25975362/57729374-deda0b80-764a-11e9-9b92-612d229bfaae.PNG)\r\n\r\n![MRTK_Optimize3](https://user-images.githubusercontent.com/25975362/57729385-e4375600-764a-11e9-94c0-c54d2848ae09.PNG)\r\n\r\n## Changes\r\n- Fixes: #4298 , #3927, #4137 \r\n\r\n## Verification\r\nTested ""Optimize Project"" to change project settings\r\nTested ""Optimize Lighting"" to change global illumination\r\nTested ""Analyze scene""\r\nTested for null replacement shader\r\nTested for null material or missing material\r\nTested undo for material conversions\r\nTested MRTK build to VS app folder\r\nTested closing & re-opening window\r\nTested docking window in other areas\r\n'"
444049676,4338,b'Ensures playspace transform is created in editor',b'## Overview\r\nCreates a playspace transform and parents main camera under playspace transform in editor.\r\n\r\n## Changes\r\n- Fixes: #4334'
444024575,4336,b'Fixing a bug where NullReferenceException occurs every frame if grabbed object is destroyed',"b'In a scenario where we had an object with a BoundingBox that triggers its own destruction once its scale gets sufficiently large, the SpherePointerVisual doesn\'t properly identify that the object it is grabbing has been destroyed and spams this error every frame in Release (and shows as a warning about referencing a destroyed object in the Editor):\r\n\r\nNullReferenceException: Object reference not set to an instance of an object.\r\n  at UnityEngine.GameObject.GetComponentFastPath (System.Type type, System.IntPtr oneFurtherThanResultValue) [0x00000] in <00000000000000000000000000000000>:0 \r\n  at UnityEngine.GameObject.GetComponent[T] () [0x00000] in <00000000000000000000000000000000>:0 \r\n  at Microsoft.MixedReality.Toolkit.Input.SpherePointerVisual.Update () [0x00000] in <00000000000000000000000000000000>:0 \r\n\r\nThis appears to be a quirk of the C# ""?."" operator where it doesn\'t properly use Unity\'s ""!= null"" overload that checks the internal reference for null. Switching to use ""!= null"" explicitly fixes the issue.'"
443625730,4318,b'SpectatorView camera status monitoring and world anchor persistence',"b""There are two main changes here:\r\n1. Status UI in the Compositor window to tell the user the state of world tracking and world anchor locatability on the camera HoloLens, as well as the name and IP address of the device.\r\n2. Code in the HoloLens camera app to persist and restore WorldAnchors from the device's local anchor store. In the next PR the WorldAnchor will be able to be located from an ArUco marker."""
443613930,4317,b'Adding undo support to ObjectCollection.UpdateCollection',"b'## Overview\r\nFixing object collection to record changes to transform of children. Also making default orient type None since Face Origin is generally awkward for Plane grid default\r\n\r\n## Changes\r\n- Fixes: #4272 Update collection on a Grid object in a prefab does not save changes.\r\n- Fixes: #4231 GridObjectCollection should support undo\r\n\r\n## Verification\r\nTested GridObjectCollection with capsules children, update collection, then cntrl+z\r\nTested modifying update collection inside prefab, and seeing results updated when exiting prefab\r\n\r\nUnity 2018.3.14f1'"
443557579,4316,b'Removing duplicate line',"b'We introduced this dupe in this commit. Fixing. https://github.com/microsoft/MixedRealityToolkit-Unity/commit/55557c2e25b30e16cc845837cdbc5551a7b8c012#diff-04c6e90faac2675aa89e2176d2eec7d8\r\n\r\n## Overview\r\n\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
443555687,4315,b'Update systems and demos to reference the input system via the service registry',"b'This change completes the migration of MRTK code from directly calling into the MixedRealityToolkit object to obtain instances of core services. While this is still a viable pattern for client code, the prefered method is to use MixedRealityServiceRegistry.TryGetService<T>().\r\n\r\nThis completes the work started with #4099 and is related to the ongoing effort to fully implement #3545.'"
443531181,4314,b'Revamped UI for MRTK Configuration Inspector ',"b'<img width=""306"" alt=""MRTK_Inspector1"" src=""https://user-images.githubusercontent.com/25975362/57643797-723e0e80-756f-11e9-9670-3685ad15b536.PNG"">\r\n<img width=""385"" alt=""MRTK_Inspector2"" src=""https://user-images.githubusercontent.com/25975362/57643859-9863ae80-756f-11e9-99fd-b332f2f78deb.PNG"">\r\n\r\n## Overview\r\nThis change overhauls the UI inspector of the MRTK Configuration profiles. Primarily it tries to adhere to a similar style of the built-in ""Project Settings"" UI in Unity. The idea being is that users can still easily explore all settings without the necessity to drill down, balanced by not showing every setting possible in a long scrolling list. \r\n\r\n- Split top level profiles into their own vertical tabs for quick navigation\r\n- Simplified profile rendering to be sleeker and easier to differentiate\r\n- Cloning profile no longer dives inspector into that selection, instead user stays in their current view and properties are not read-only. \r\n- Fixed some default assets to have correct ""IsCustomProfile"" setting\r\n- Removed static context menu items from Baseinspector (static properties caused issues with reading/writing)\r\n- Reduced indenting through controls to allow for more pixel real-estate\r\n- New RenderProfileHeader to simplify code changes across all profileinspector classes\r\n\r\nNOTE: this is a usability change only. There has been no breaking change to the profile fields. I did not add or remove any properties. It is just their rendering and configuration in view. Further, this is not a solution that ""fixes"" all issues with the MRTK inspector. \r\n\r\nOnly change close to a ""breaking change"" involves CreateAsset() which now does not autoselect the new asset created.\r\n\r\n## Changes\r\n- Fixes:\r\n #4313 \r\nSimplify UI of MRTK Configuration profile inspector \r\n#4307 \r\nSub-Profile navigation instead of fold out \r\n\r\n## Verification\r\nNew scene with default MRTK works\r\nCopy& Customize works\r\nCreate new profiles works (+ profile button also works)\r\nChanged setting in profile, MRTK updated with new configuration\r\nSwitching object field back to Defaultprofile updates inspector\r\nDrilling down into profile, render correctly\r\nDisabling input system causes sub-profiles (i.e pointer, etc) to warn user of disabled input\r\n\r\nEnvironment: Unity 2018.3.14f1\r\n\r\nNOTES:\r\nUser cannot clone a subprofile without cloning it\'s parent\r\nIf inputsystem is disabled, subprofiles under input will not render properties, but render a warning label\r\n\r\n'"
443498517,4312,"b""Both and Any support in HandJointUtils' FindHand""",b'## Overview\r\nSupport for `Both` and `Any` bit flags in `HandJointUtils`.\r\n\r\n## Changes\r\n- Updates `FindHand` in `HandJointUtils` to properly return a hand if `Both` or `Any` flags are past in.\r\n'
443487954,4311,b'MRTK/Standard Shader Updates + Lightweight Scriptable Render Pipeline Support',"b'## Overview\r\nThis pull request adds a few improvements to the MRTK/Standard shader (listed below) and also introduces support for Unity\'s Lightweight Scriptable Render Pipeline.\r\n\r\n## Changes\r\n\r\n- Added a upgrade path to allow developers to utilize Unity\'s Lightweight Scriptable Render Pipeline (LWRP) with MRTK shaders. Tested in Unity 2019.1.1f1 and the ""com.unity.render-pipelines.lightweight"": ""5.7.2"" package on Windows PC, HoloLens, and HoloLens 2. For instructions on getting started with the LWRP please see [this page.](https://docs.unity3d.com/Packages/com.unity.render-pipelines.lightweight@6.5/manual/installing-lwrp-into-an-existing-project.html) To perform the MRTK upgade select: Mixed Reality Toolkit -> Utilities -> Upgrade MRTK Standard Shader for Lightweight Render Pipeline\r\n![Upgrade](https://user-images.githubusercontent.com/13305729/57636309-bf18e980-755d-11e9-8a9c-190096f741f9.png)\r\n\r\n- Adding custom depth offset support to avoid z-fighting and allow for hand tuned depth LSR values.\r\n- Added minimum near fade clamp to control the minimum allowable fade.\r\n- New feature that supports vertex extrusion in world space. Useful for visualizing extruded bounding volumes or transitions in/out meshes. (With new example in the MaterialGallery scene.)\r\n![VeretxExtrusion](https://user-images.githubusercontent.com/13305729/57636715-83caea80-755e-11e9-900e-1c2098fd1d9b.gif)\r\n\r\n- Optimization, moved spherical harmonics calculations for ambient lighting to vertex shader. Can be used to mimic vertex lighting given a suitable skybox.\r\n- Bug fix, enabled instancing to disable batching for local space triplanar mapping which requires object scale.\r\n- Improvements to the channel packer tool (now called the Texture Combiner) based on feedback from  Chidi Mbadugha. Thank you Chidi! The tool can now export to multiple texture formats.\r\n\r\n- Fixes: https://github.com/microsoft/MixedRealityToolkit-Unity/issues/2463 https://github.com/microsoft/MixedRealityToolkit-Unity/issues/3953\r\n\r\n\r\n## Verification\r\nI would like reviewers who currently use the LRWP in their Unity project to verify these changes work based on their render pipeline configuration, and for developers who are new to the Unity\'s scriptable renderer pipeline to report back any issues they encounter.\r\n'"
443327177,4309,b'From Dot comparison to binary float comparison',"b'## Overview\r\nAccording to https://answers.unity.com/questions/288338/how-do-i-compare-quaternions.html\r\n\r\n== compares two Quaternions via Dot product, suffering from floating point precision, while\r\nEquals compares binary wise (floats)\r\n\r\n## Changes\r\n- Fixes: #4304'"
443326059,4308,b'Disambiguate NuGetCommand task',b'Need to disambiguate for setting up pipeline in internal project.\r\n'
442919113,4291,b'Improving alignment of rotation handles on bounding box',"b""The current way that rotation handles are aligned calculates an axis-to-axis alignment from the Y axis to the axis the edge runs along. For models that are symmetric across the Y axis, this looks fine, but for asymmetric gizmos (like the example corrected in the image below), the X and Z axis aren't oriented consistently relative to the box.\r\n\r\nThis change orients the Y axis in the same way, and the X and Z axis pointing away from the bounding box. The image shows the result of this change when used with a sample arrowed arc model common in rotation widgets, with the arc going from +X to +Z in the prefab's space.\r\n\r\n![gizmofix](https://user-images.githubusercontent.com/27969160/57560114-a7f9b200-7339-11e9-826c-3de508565e27.PNG)\r\n"""
442916897,4288,b'Merge pull request #4 from microsoft/mrtk_development',b''
442880631,4275,b'Add a new scene and connection code to receive HoloLens poses from the camera',"b""This change has a few main parts:\r\n1. A new scene (SpectatorViewCamera) that represents the application that runs on the holographic camera rig. In this PR, the app provides time-adjusted poses from the HoloLens to the compositor and transfers a JSON blob of calibration data. This data is not understood by the SpectatorViewCamera scene, it's up to the compositor to parse and understand that data blob.\r\n2. UI has been added to the Compositor window to connect to the SpectatorViewCamera app using TCPConnectionManager.\r\n3. There's a registry of calibration parsers (currently there are zero checked in) that can receive calibration data and attempt to parse it into an ICalibrationData.\r\n\r\nWith an internal calibration I've tested the end-to-end workflow of connecting the camera rig to the compositor and filming a cube floating in space using the rig."""
442815075,4270,b'Gaze cursor activation behavior that matches the shell',"b'## Overview\r\nImplement gaze cursor activation behavior that matches the HoloLens 2 and Windows Mixed Reality (WMR) shell:\r\n\r\n- Head cursor appears when app start\r\n- Cursor disappears when articulated hands or motion controllers show up (but NOT GGV hands as for hololens 1, or for mouse / gamepad).\r\n- Gaze cursor only appears again when voice wake word has been used (for WMR this is the word \'select\').\r\n\r\n## Changes\r\n- Fixes: #4176\r\n- Add speech command ""select"" to the speech commands profile, activatable by Alpha1\r\n- Remove ""toggle diagnostics"" and ""toggle profiler"" speech commands because they are never used.\r\n- **Small Breaking Change** IFocusProvider implements IMixedRealitySpeechHandler. I don\'t expect that anybody has built a custom focusprovider yet, and if they have the compile error provides obvious solution (implement the interface). I couldn\'t think of any other way to listen for a speech command that wouldn\'t result in adding extra game objects that I could listen to events for. \r\n\r\n\r\n## Verification\r\nTested in editor the following cases:\r\n- Articulated hands\r\n- GGV Hands\r\n- Gamepad\r\n- Mouse\r\n\r\nNeed to still test:\r\n- HL1 device\r\n- HL2 Device\r\n- Using WMR controllers (after voice mode, clicking controller should move back to controller input)\r\n\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
442794339,4264,b'Config Profile Homogenization',"b""## Overview\r\n Makes the look of headers in profiles more consistent and adds some functions to encourage more consistency in the future.\r\n\r\n![ProfileConsistency](https://user-images.githubusercontent.com/9789716/57541305-87166a00-7303-11e9-9e68-17f4cb19f413.PNG)\r\n\r\n## Changes\r\n- Adds a `RenderTitleDescriptionAndLogo` function to MixedRealityInspectorUtility. This handles the business of drawing a title and helpbox with consistent spacing etc.\r\n- When an instance of the MRTK isn't found, profile inspectors now provide a button that will add one to your scene.\r\n- Most profiles will now render their contents even if a MixedRealityToolkit instance isn't found. The only exceptions are profiles that require calls to MixedRealityToolkit.Instance to function. In a future PR it would be nice if these could be made to at least render partial contents. Will open an issue for this later.\r\n\r\n- Fixes: #3876"""
442794323,4263,b'Touch NearInteractionTouchable volumes from the side',"b'Changes NearInteractionTouchable.TouchableSurface to allow for quads or boxes. Quads use the old logic for DistanceToSurface. Boxes use shortest distance to a cuboid in space for DistanceToSurface.\r\n\r\nThis change may be breaking, as the TouchableSurface enum has changed, meaning that the value that was previously UnityUI is now Box. The UI will still function, but the distance to surface may be strange at the edges. There is a helper in the inspector that will amend this.\r\n'"
442788662,4262,b'Sets CameraSystemType on non-default config profiles',"b""## Overview\r\n\r\nThe following profiles didn't have their CameraSystemType set:\r\n- EyeTrackingDemoConfigurationProfile\r\n- HandInteractionAllExampleMixedRealityToolkitConfigurationProfile\r\n- Dictation.MixedRealityToolkitConfigurationProfile.asset\r\n- Speech.MixedRealityToolkitConfigurationProfile.asset"""
442460940,4256,b'Add some missing exception declarations',b''
442361655,4254,b'update teleport sdk components to use the service registry',b'Updates the teleport hotspot (input) and pointer (teleport) sdk components to obtain the teleport system instance from the static registry class.\r\n\r\nBuilds upon #4099 and is related to #3545.\r\n'
442349640,4253,b'Add class for reading new calibration data',b'This review contains the following logic:\r\n1) calculated camera intrinsics/extrinsics serialization is moved within their class\r\n2) An argument name that was a bit unclear has been renamed in ICalibrationData\r\n3) A new class implementing ICalibrationData is added for applying camera intrinsics/extrinsics obtained through the new spectator view calibration process.'
442134462,4248,b'Reset touchPoints on Enable on PressableButtons',"b'\r\nIf a pressable button is disabled before the OnTouchCompleted event, the button remains in an unusable state as the touchPoints controller is never resetted\r\n\r\nto be sure, the button is always in a usable state, the touchpoint list is always resetted on OnEnable'"
441983278,4246,b'Add the Compositor window for viewing the composited video in Unity and for starting and stopping recordings',"b'This change adds the CompositorWindow, which shows the composted video, provides UI for starting and stopping recordings, provides UI for controlling how holograms are rendered, and shows some statistics about framerate and queued output. The SpectatorViewWindowBase will be coming into play in a future change.\r\n\r\n![image](https://user-images.githubusercontent.com/10050922/57414333-80c1aa00-71ac-11e9-8aca-4a35fcb9a52c.png)\r\n'"
441920229,4244,b'Update the TryGetJointPose docs to accurately describe the set of inputs',b'These functions only work if you pass in the specific Handedness.Left or Handedness.Right. They should be documented as such.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/4175'
441795933,4240,b'Removed SupportedControllerType enum',b'## Overview\r\nRemoves the SupportedControllerType enum altogether and uses the actual classes everywhere. A system for serializing System.Type has already been established and most uses are statically typed into the controllers corresponding attributes.\r\n\r\n## Changes\r\n- Fixes: #4239 .\r\n'
441669805,4236,b'Added Android as supportable platform',"b""## Overview\r\nSimply adds Android as a supportable platform. Otherwise it's not possible to support any Android platforms at the moment."""
441515180,4234,"b'Add explicit help text around the ""Eye Tracking Enabled"" property.'","b""It's somewhat of a common thing that folks are hitting that enabling the 'Gaze Input' capability isn't clear (i.e. it's something you have to do as a separate step in VS, and while it's documented in our docs, you don't know it's necessary without reading that or debugging through a number of things). Adding this help text will hopefully get some additional eyes while we wait for Unity to expose this property in its own UI.\r\n\r\nI considered doing this automatically in our build process, but not everyone uses the UWP build window, and doing automagic stuff can also be really frustrating (because the user never learns that this is required and one day when the magic stops you have to deal with the pain anyway). We already have significant auto-running code complexity in the editor and I don't think that adding addiitional auto running things makes sense.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/4194\r\n\r\nNote that a larger part of this change is updating the help drawer code to handle word wrapping\r\n"""
441499371,4233,"b""Bold the fact that the 'Gaze Input' capability is only settable in Visual Studio.""","b""This issue comes up repeatedly, but unfortunately isn't something that we have too much control over - there needs to be Unity support added to check this from within Unity, and until that happens, we should try to do all we can to call out in our docs that this is a VS specific step.\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/4193\r\n"""
441497221,4232,"b'Update the ""Use Eye Tracking"" properties to be consistent with each other'","b'As https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4195 calls out, the inspector has a term called ""Prefer Eye Tracking"" but elsewhere it\'s referred to as ""UseEyeTracking."" Renaming everything to PreferEyeTracking would actually be more proper (because it\'s a more accurate description of how things work)\r\n\r\nHowever, renaming things to PreferEyeTracking would be a breaking change (where the main value here is consistency/term correctness). It\'s safer for us to keep things consistent by renaming the serialized property (which supports backwards compat and is not a breaking change)\r\n\r\nhttps://github.com/microsoft/MixedRealityToolkit-Unity/issues/4195'"
441477926,4230,"b'Activate PressableButton on press by default, not on release'","b'## Overview\r\nOur default button prefabs currently invoke Interactable.OnClick events when the button gets unpressed (""On Click Completion""), instead of when a button gets pressed.\r\n\r\nThis is currently causing many buttons to appear difficult to press by partner teams, for a few reason:\r\n1. People do not realize that they need to \'unpress\' the button to activate (evidence: user research in OOBE).\r\n2. We have some bugs in pressable button. For example, if the finger exits the collider on the same frame as an unpress happens, Interactable.OnClick does not get invoked.\r\n\r\nActivating buttons on release is only necessary in some cases, such as for buttons on scrollable panels, or for buttons that support press and hold. To unblock customers and allow for most reliable click experience, allow for the easiest possible button click experience which activates buttons on press, not on release.\r\n\r\nThis PR is based on feedback from partner teams, Kevin Collins, and Eric Havir.\r\n\r\n# Changes\r\nPrefabs\r\n- Modify PressableButton and PressableButtonPlated event router to activate on press, not release.\r\n- Modify HandInteractionExample scene to have buttons activate on press.\r\n\r\nMisc\r\n- Add function in ColorChanger to change object to random color. This allows for testing of multiple \'click\' type behavior since it is user visible change that will be different every time.\r\n\r\n# Validation\r\n- Manually tested in editor, and via example scene.'"
441465681,4229,b'Add a scene for the DSLR-based compositor',b'This change adds a scene for compositing DSLR-based scenes. This change includes only the scripts necessary to set up the native compositor with the correct textures and audio input and run the composition loop.  None of the user interface to view the composition in the editor or to control the compositor have been added yet.'
441398683,4227,"b'Code cleanup, 2 of N'","b""Was going through the code to learn more, found some other small things for cleanup, so cleaning them up here.\r\n\r\nGeneral changes:\r\nm_* -> not m_* (this is a C++ like coding convention which doesn't follow our C# guidelines)\r\nInteractableStateModel.cs -> comments removed because they looked like there were notes-to-self and didn't help a reader understand what was going on (I'm more confused reading it).\r\nBaseCursor -> It powers non-gaze cursors as well.\r\nEverything else - general comment cleanup"""
441396588,4226,b'update diagnostic demo to get the service from the registry',b'## Overview\r\nUpdates the demo script to use the registry to acquire the diagnostic system instance.\r\n\r\nThis change builds upon #4099 and is related to #3545 '
441356181,4225,b'update spatial observers and demo to use registry',"b'## Overview\r\n- Update the base spatial observer to honor the spatial awareness system instance passed in the constructor.\r\n- Remove the duplicate SpatialAwarenessSystem property from the WindowsMixedRealitySpatialMeshObserver.\r\n- Update the spatial awareness demo to retrieve the service instance from the registry,\r\n\r\n## Changes\r\nThis change builds upon #4099 and is related to #3545.'"
441225827,4211,b'Improved hand sim poses',"b'## Overview\r\n* SimulatedHandPose renamed to ArticulatedHandPose (since it is not specific to simulation), and moved to MixedRealityToolkit/Definitions/Utilities/ to be accessible by WindowsMixedRealityHandRecorder\r\n* Store full poses instead of just positions for joints.\r\n* Use joint data as reported by the WMR device. Hand recorder tool modified for this purpose. All hand poses re-recorded.\r\n* Serialization of hand poses to and from JSON files instead of using in-code initializer lists.\r\n\r\n## Changes\r\n- Fixes: #4125  .\r\n'"
440940495,4197,"b""Update the build window's min Windows SDK version.""",b'This reflects the actual requirements set out on:\r\nhttps://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/GettingStartedWithTheMRTK.html'
440912464,4192,b'Improvements to Eye Tracking Basic Setup',b'Added additional information and clarity around the steps required for a successful eye tracking application.\r\n'
440878745,4191,"b'Code cleanup, part 1 of N.'","b""I'm going through the code to better understand things. As part of reading the code, I'm seeing some occasional typos/issues/areas for cleanup (i.e. stale comments, dead code).\r\n\r\nChanges below include:\r\n\r\n- Adding some comments to things like Distorters (some of them aren't used and *could* be deleted, but they seem to be useful to have as a package)\r\n- Something are deleted that are not used (i.e. some Interlator* things, some utilites and CalibrationSpace things)\r\n- Some code cleanup standardizing on Mathf.Clamp (instead of doing manual if/else checks)."""
440874817,4190,b'Update documentation (ToC and ET images / links)',"b'## Overview\r\nThis PR removes TODO links that were added in #4074, per https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/4074#discussion_r279567577.\r\n\r\nThis also removes the link under Service Provider, as it led to a more generic guide. This link will be re-added when the Service Provider guide is published.\r\n\r\nThis also corrects some paths in the ET documentation that were leading to broken links on the GitHub.io page.\r\n\r\n## Changes\r\n- Fixes: #4163, fixes #4186 '"
440872639,4189,b'Add calibration process based on qr codes/aruco markers',"b'## Overview\r\nThis review add some logic that will allow dslr cameras to be calibrated using a chessboard and qrcodes + aruco markers.\r\n\r\n1) A new scene is added for calculating camera intrinsics based on detecting a chessboard calibration board.\r\n2) A new scene is added for calculating camera extrinsics based on detecting qr codes and aruco markers on the same calibration board\r\n\r\nNote: This functionality requires opencv logic built out of the mixed reality toolkit repo. It also requires qr code detection dlls that are not yet available to the public. It also requires the spectator view pro compositor which is not immediately intuitive to use/is still under active refactoring.\r\n\r\n## Changes\r\n- Fixes: # .\r\n\r\n## Verification\r\n> This optional section is a place where you can detail the specific type of verification \r\n> you want from reviewers. For example, if you want reviewers to checkout the PR locally\r\n> and validate the functionality of specific scenarios, provide instructions\r\n> on the specific scenarios and what you want verified.\r\n>\r\n> If there are specific areas of concern or question feel free to highlight them here so\r\n> that reviewers can watch out for those issues.\r\n>\r\n> As a reviewer, it is possible to check out this change locally by using the following\r\n> commands (substituting {PR_ID} with the ID of this pull request):\r\n>\r\n> git fetch origin pull/{PR_ID}/head:name_of_local_branch\r\n>\r\n> git checkout name_of_local_branch\r\n'"
440820838,4185,b'Add PlayMode tests to the PR and CI pipelines.',"b""As we add more playmode tests we want to make sure that other folks aren't breaking them inadvertently. Easiest way of doing this is to enable these tests as part of PR validation (and CI as well)"""
440452139,4182,b'Landing page README update',"b'## Overview\r\nAdding the entries to three additional README files - **Sliders**, **MRTK Standard Shader**, **Hand Joint Chaser** example. Updated the hero image of the Slider page for the consistency. \r\n\r\n![2019-05-05 23_36_16-cre8ivepark_MixedRealityToolkit-Unity at mrtk_development_README_Updates](https://user-images.githubusercontent.com/13754172/57195561-2992be00-6f8f-11e9-8c9c-ed66b6045b54.png)\r\n\r\n### Landing page\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/tree/mrtk_development_README_Updates\r\n\r\n### Slider\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_README_Updates/Documentation/README_Sliders.md\r\n\r\n### MRTK Standard Shader\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_README_Updates/Documentation/README_MRTKStandardShader.md\r\n\r\n### Hand Joint Chaser example\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/mrtk_development_README_Updates/Documentation/README_HandJointChaser.md'"
440394135,4181,"b'ManipHandler fixes when using programmatically, and two playmode manipulation tests!'","b'## Overview\r\nA few maniphandler fixes, and adding a few simple tests for ManipHandler!\r\n- Expose all serialized fields as properties so they can be set programmatically (we had missed a few)\r\n- ManipHandler check for null before invoking events.\r\n- Initialize events handlers so that events like hover, manipstart can be accessed programmatically. \r\n\r\nAlso, adding a couple playmode test changes to actually test manip handler!\r\n- Add ManipHandler test for instantiating programmatically, and seeing basic hover events.\r\n- Fix bug that was preventing multiple playmode tests from running sequentially. CleanupScene() would create a new scene every run, however in PlayMode this would cause MRTK to not be initialized. Instead, let the PlayMode tests instantiate the scenes (they do this by default, it seems).\r\n\r\n## Fixes\r\n- Fixes: #4179\r\n- Fixes: #4173 \r\n\r\n\r\n## Verification\r\n- I verified this by running all EditMode and PlayMode tests. Also verified by testing the repro case in #4173.\r\n- Also tested the HandInteractionExample scene in editor. \r\n- Verified that code compiles for UWP\r\n'"
440373839,4180,b'Another iteration on having the proper NuGet package generation',"b'The issue is that NuGet is being pacakged with UWP DLLs incorrectly targetting System.Numerics instead of System.Numerics.Vectors.\r\n\r\nI previously chased a red herring, and the fault actually lies with us not building a .NET flavor of UWP for packaging purposes.'"
440273283,4178,b'Fixing UWP Compat (last one was standalone)',"b'This is similar as previous change, but for UWP. Again, this has no impact on consuming code, but does for Unity.'"
440255958,4177,b'Update UWP .NET compat to .NET Standard 2.0',"b'Updating UWP compat to .NET Standard 2.0, as this affects the DLLs produced that are then packaged into NuGet. But has no impact on .unitypackage nor when this repo is consumed as a Submodule.'"
439849263,4171,b'Fix grab pointer is disabled when poke pointer near touchable.',"b'## Overview\r\n- Fixes: #4170\r\n\r\nThe root cause of this bug is that the grab pointer was getting disabled whenever the poke pointer was near a surface, this was a bug in the input mediator.\r\n\r\nIn addition, I made a few other changes:\r\n- Only render debug pointer rays if the rays are active (makes them easier to view)\r\n- Update default pointer profile to include several colors of pointer rays so we can tell apart poke pointer from grab pointer. The new colors are as follows:\r\n\r\n![image](https://user-images.githubusercontent.com/168492/57115926-b4ad5300-6d06-11e9-9324-c57a80cc7f1c.png)\r\n'"
439801117,4166,b'Update GettingStartedWithTheMRTK.md',"b""SDKs isn't possessive\r\n\r\n## Overview\r\nSDK's should be SDKs\r\n\r\n## Changes\r\n- Fixes: # .\r\n"""
439664047,4162,b'mrtk_release -> mrtk_dev sync',b'Syncing with the RC1-Refresh release.'
439584303,4159,b'Raise pre focus changed event before focus exit when unregistering pointer',"b'Also, raise pointer changed event.\r\nFixes: #4158 '"
439382577,4152,b'Fix NearInteractionTouchable interference.',"b""NearInteractionTouchable.DistanceToSurface was getting the distance to a rectangle in 3D space. This was causing issues where nearby touchable surfaces were interfering with eachother. This fix disregards points that don't project into the rectangle bounds.\r\n\r\nI'm sure there's a better way to do this too, but this was a quick fix to existing code that fixed our repro case."""
439367129,4150,b'added clearing of touchpoints when disabling pushable button ',"b'## Overview\r\nIf we disable the pushable button before receiving the touch end event (eg disabling the button itself on click) we end up with ""dead"" touchpoints.\r\nAs soon as you enable the button again the button will behave wrong because it\'s still under the impression someone\'s pressing it\r\n\r\n## Changes\r\n- Fixes: stuck button on enabling a button that was previously disabled by itself on click\r\n\r\n\r\n'"
439342053,4148,b'Stops FacadeHandler from accessing MRTK instance in DestroyAllChildren',b'## Overview\r\n- Fixes: #4147'
439321426,4145,b'Update Interactable docs with toggle and dimensions clarification',b'## Overview\r\nA question about how the check box example in the InteractiveExamples scene. #4009 \r\nHow to trigger the toggled state.\r\n\r\nAdded some details to the Toggles section.\r\n'
439278985,4144,b'PressableButton fixes',"b'* Use local space push distances, so that pressable buttons can be scaled\r\n  - Add experimental versioning to PressableButton to not make this a breaking change\r\n  - Adapt plane gizmos for local space unit distances\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'"
439270006,4143,"b'Increased indent in Interactable profiles, the Theme label under Targ\xe2\x80\xa6'","b'Increased indent in Interactable profiles, the Theme label under Target was not consistent when Dimensions were increased, like check boxes.\r\n\r\nIssue #3997 \r\n\r\n# Overview\r\nhttps://user-images.githubusercontent.com/22085553/56380628-8ccad500-61c7-11e9-9c84-caef2582874a.png\r\n\r\nShows the first Theme label under target is not indented, but the second one is. They should be consistent and sense they are tied to Target, they should all be indented.\r\n\r\n# Changes\r\nIncrease intent and added an indent reset at the top of the loop.\r\n\r\n'"
439253233,4141,b'Remove stale meta',b'Overview\r\n---\r\nLooks like this was accidentally added.\r\n'
439218543,4139,b'Update documentation from mrtk_dev',"b'Overview\r\n---\r\nBrings over some main readme docs updates to the stabilization branch, since the release branch is our main landing page.\r\n'"
439101150,4136,b'Raise focus exit event for last pointer leaving when two or more leave in the same frame',"b'Modified FocusProvider.UnregisterPointer() to keep track of the number of pointers leaving a target in a given frame and raise the pointer left event for the last one, instead of the first.\r\n\r\nFixes #4160 \r\n'"
439024099,4134,b'Update links to SDK',b'Overview\r\n---\r\nThe 18362 SDK has now been released and is out of preview.\r\n'
439012196,4133,b'Update the version numbers to RC1 Refresh',b''
439004583,4132,b'Updates in the getting started',b'Overview\r\n---\r\nAdding an explicit step to ask people to switch to the correct platform so the changes applied by adding the package are made to the correct one\r\n'
438987221,4131,b'Updates Create Extension Service Wizard to generate service inspectors',b'Overview\r\n---\r\nUpdates the wizard to generate an optional service inspector (#3773) for the new service.\r\n\r\n![ServiceInspectors](https://user-images.githubusercontent.com/9789716/56994430-ed58fb00-6b53-11e9-9f10-8311fa5e327e.PNG)\r\n\r\n'
438984277,4130,b'Bring the RC1 Refresh payload into mrtk_release',b''
438956699,4127,b'Updating with latest version of Windows SDK',b'\r\n\r\nOverview\r\n---\r\nLink was pointing to preview\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
438899472,4124,b'Merge stabilization commits back into development',"b""These changes that got cherry-picked from dev into prerelease are being merged back down in order to deal with the commit hash snafu now, rather than when merging from release back into dev.\r\n\r\nThe complications associated with cherry picking are called out in this blog:\r\n\r\nhttps://devblogs.microsoft.com/oldnewthing/20180323-01/?p=98325\r\n\r\nBecause we have this structure where we have dev -> stabilization -> release (and ideally anything that goes into the current release also comes back down into dev so that there's consistency between dev/release) we have an issue where cherry-picking individual changes leads to creation of different commit hashes (which can lead to really weird merges down the line).\r\n\r\nThis is something that we'd rather deal with outside of the dev<-->release branches so doing it now."""
438880542,4122,b'Fix Tooltip font materials for single pass instanced rendering.',b'Overview\r\n---\r\nTwo of our four Tooltip prefabs used the default TMP font shader so labels only rendered in one eye when using single pass instanced rendering. This fixes the issue.'
438584528,4120,b'Update PerfGettingStarted.md',b'Overview\r\n---\r\nUpdating outdated perf links\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
438540066,4119,b'Merge pull request #3890 from Railboy/mrtk_camera_cache_fix',b'Makes sure that we get this PR into the RC1 refresh.\r\n\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3890'
438377538,4118,b'Correctly handle pointers with no controller attached (i.e. gaze pointer) in manipulation handler',b'Fixes: #4117  .\r\n'
438369499,4116,b'Fix check for value change when setting Vector2 values in interaction mappings',b'Fixes: #4114 .\r\n'
438215274,4112,b'Enable the input simulation assembly for all platforms.',b'The service itself is still editor-only. Enabling the main assembly for\r\nall platforms removes a warning when the input system tries to\r\ndeserialize the input sim profile on a non-editor platform.\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
438098868,4110,b'Fix/clone settings should dirty scene',b'Call Undo.RecordObject so that editor will dirty the scene when ActiveProfile setting is changed.\r\nFixes #4109.\r\n'
437904890,4107,b'Feature: SceneSystem service',b'Overview\r\n---\r\nImplements #4089 \r\n\r\nCheck out the documentation in the PR for more info.\r\n\r\n![SceneService](https://user-images.githubusercontent.com/9789716/57484894-19186700-725f-11e9-90ad-10abdc7a8c32.PNG)\r\n'
437878650,4106,b'Merge in Button plate texture location update to RC1 refresh',b'To make sure https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/4078 gets into RC1 refresh'
437861284,4105,b'Move remarks tags outside of summary tags',"b'Overview\r\n---\r\nSome of our summary tags were misformatted. This moves all tags into their own scope, to improve the layouting of our docs (remarks tags get their own section):\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/56838764-2af81400-6834-11e9-806c-7cefb63e506c.png)\r\n\r\n'"
437836664,4103,b'Update metas to fix HTK -> MRTK clashes',"b'Overview\r\n---\r\nThere have been reports that some of the recent UX components retained the same GUIDs from the HoloToolkit. This PR updates the GUIDs to be unique, to allow for side-by-side import and porting.\r\n\r\n| Old HTK GUID  | New MRTK v2 GUID | File name |\r\n| ------------- | ------------- | ------------- |\r\n| `2c11bf713819a084d8cb4c35db20d042` | `9b8d622e06b5ddc47bfd77b86d50527c` | TheModule.fbx |\r\n| `284d5c2c421022e4f9056fb0a21ff91c` | `bb88669a3463b36438d9225a3ecd3a35` | Model_Icosa.fbx |\r\n| `5942fa356be284c4a8d1d231519a7581` | `f9b1acc0404b53f45bffb480fefa205a` | Model_Platonic.fbx |\r\n| `3f8a3164171bcba42b1e2b051b994a3c` | `1d3a8429b0db5df4ab258018baf2466b` | MouseandCheese.fbx |\r\n| `5308c0eb5c6ed4647b3797671dc2e5f3` | `728972833a3739d4fa5d234f7c91b4b2` | Model_PushButton.fbx |\r\n| `1e23ec24c22068b4cbf47737c35e277b` | `40bb9772594a93140a43a9a4f5cf9356` | Model_Octa.fbx |\r\n| `5838ea95659d32943afec95550ac1ce1` | `24d47aad909b7114f99ea8657d2883d8` | Model_Bucky.fbx |\r\n| `aa39033344b08ce4bab10cc11dc6d6b8` | `e963263242b6cbb4bbbf279f0c0e7789` | CoffeeCup.fbx |\r\n| `54f72652009c7574a96c8d088d1c78ef` | `23d0d428664728f48bc426a2842ced95` | balloon.fbx |\r\n| `f3e468440f9093b4ab46ddfaeaab7405` | `de90a43947eced441b4c426e11f35f28` | TooltipExamples.unity |\r\n| `aa610ada334bff640a535f0d23a9a15c` | `83c02591e2867124181bcd3bcb65e288` | AppBar.prefab |\r\n| `ce4801a284bc5c3488c631dcdba665df` | `a0dc4a34875700c4aba845405dc43a89` | Toggle.prefab |\r\n| `7a09758e059eb59468ca9b69ac560cd9` | `0f83fa6afa56ead46bbd762156f1137e` | Radial.prefab |\r\n| `abb2df850d68f894d830c95c299cf10f` | `6f89876ff9050224f949c0490969219d` | CheckBox.prefab |\r\n| `02183eecee283e647b4e8660f71bb271` | `6801601dde9962843aa1336de93505f0` | ToggleIcon.mat |\r\n| `471cd2931ade3d147b640131e71d9ad9` | `09c36cbdc8249664dacdf98f70d27be7` | ToggleButton.mat |\r\n| `3c8f5655de1232549bc616142c6119d7` | `424283b2185ed5045bf2b621e2ca6950` | TooltipLines.mat |\r\n| `151c96065fff785478dd7e3d33953d55` | `bf8139ce01f74164bb3003ed8a498e41` | TooltipWithBorder.mat |\r\n| `970c8a6564852574f9ba8959ffcd47f8` | `a07d81f563d59544fb6ae5588f5bd0be` | ToggleBackground.mat |\r\n| `fb66df91526e2034e94cac3868625598` | `aca87582bbf9b0d4cba5ddbd5c31055d` | AppBarButton.cs |\r\n| `80c870726057bb743b9c4f8faa604b98` | `d69b1d008a22b774b89e04ac11b7d79b` | AppBar.cs |\r\n| `c83ed6c999201214ea3faae09b7325a8` | `a86b28bfea793ef4ea0e3956e5ba03a9` | ToolTipBackgroundMesh.cs |\r\n| `95fc46e61b058e54ab022d6f28b0ec6c` | `60e108b635a73db40a8d3c02d87c249f` | ToolTipConnector.cs |\r\n| `50b310129c4a25b49bf30647ad50314d` | `38222fd319389e7459c0b2b0d1ac753c` | ToolTipUtility.cs |\r\n| `7dd43529b59a96142876f56ee473360f` | `5903af227b66a6f47ad2ab65d11c1520` | InBetweenInspector.cs |\r\n| `c6f08a4a536b0e941acc54d44b1082f6` | `7d6ee51630dccd84680ffd8626c634ac` | ObjectOrientationSurfaceType.cs |\r\n| `9611259d7233bcb46aed6b8e01e85292` | `81fef38b97123a741be3f6b499285366` | TooltipBackgroundCorners.cs |\r\n| `23a70f6672029144c8d4c44a6fb6b213` | `85b0e186e2c82324b83f3696c29cf697` | Tooltip.cs |\r\n| `a81cab8e62ed88140bcaef521530bb6b` | `83ddd8a40db85e747bd2f39403410c8c` | ToolTipBackgroundBlob.cs |\r\n| `ac7a93bf91c29a64a8ca19a8fd23ce0a` | `191497538646da24faf639335962f64c` | ConnectorFollowType.cs |'"
437793619,4102,b'Fix spelling mistakes in our documentation.',"b'Using some cool vscode extensions to help spell check, yay.\r\n\r\nIn response to:\r\n\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/issues/4093'"
437792601,4101,b'Fixed MousePointer',"b""Overview\r\nreadded changes from https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3982 and addressed issues raised:\r\n\r\n\r\nNew Changes\r\n--- readded scroll and original input mappings\r\n--- implemented spatial ptr \r\n--- simplyfied position calculation\r\n--- added gameobject position setting to conform with posesynchronizer\r\n--- removed spatial grip input mapping -> will be fixed in the manipulation handler by @luis-valverde-ms \r\n\r\n\r\n------------------------------------------------\r\nOriginal Changes\r\n--- mouse cursor not stuck anymore in center of screen\r\n--- only one mouse cursor gameobject is created / controller won't be enabled more than once\r\n--- screenspace cursor will be hidden when spatial cursor is used\r\n--- fixed other controllers interferring with mouse cursor visibility (hands / camera)\r\n--- removed spatial mouse cursor (retrieved the mouse cursor position and sent it back to the mouse cursor to set the position of the cursor to that same position again)\r\n--- removed mouse wheel scrolling that modified mouse cursor position (not needed as spatial cursor is snapping to interactable objects)\r\n--- added ray to world space position calc to enable object manipulation (bounding box)\r\n--- added spatial grab to controller mapping to support dragging of objects\r\n--- added mouse cursor speed adjustment setting\r\n\r\n"""
437781729,4100,"b'Revert ""Revert ""Fixed Mouse pointer / controller""""'",b'Reverts Microsoft/MixedRealityToolkit-Unity#4000'
437767172,4099,"b'Introduce service registry, static playspace and update boundary demo to use the registry'","b""This is part 4 of the changes for #3545.\r\n\r\nThis change does the following:\r\n- Implements an adapted version of @Alexees' static playspace PR (#3624) and removes the need for passing the playspace transform to services\r\n- Adds a static MixedRealityServicesRegistry class and registers each core or extension service (data providers are not part of the registry)\r\n- Update the boundary demo to use the registry to acquire the instance of the boundary system\r\n\r\nNOTE: This change does _NOT_ break the ability for application code to call MixedRealityToolkit.<service> to acquire the service instance (presuming the MRTK object is in the scene).\r\n\r\nOther services and demos will be updated to use the new registry pattern over the next few PRs.\r\n"""
437718550,4098,b'Fixed Mouse pointer / controller',"b""Overview\r\n- fixes for broken mouse pointer / controller - fixes issues pointed out in https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3982\r\n\r\n\r\nChanges\r\n---mouse cursor not stuck anymore in center of screen\r\n---only one mouse cursor gameobject is created / controller won't be enabled more than once\r\n---screenspace cursor will be hidden when spatial cursor is used\r\n---fixed other controllers interferring with mouse cursor visibility (hands / camera)\r\n---implemented spatial mouse cursor\r\n---added ray to world space position calc to enable object manipulation (bounding box)\r\n---added mouse cursor speed adjustment setting\r\n\r\n"""
437675528,4096,b' Update status badge for yaml pipeline',b''
437488860,4091,b'Landing page Feature List update with icons',b'Overview\r\n---\r\nUpdated the Feature Area section with multi-column table and icons for an easier overview + shorter page scroll.\r\n\r\nChanges\r\n---\r\nUpdated README.md \r\nCreated and added new icon sets\r\n\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/tree/mrtk_development\r\n\r\nBefore & After\r\n![2019-04-26 12_56_12-Microsoft_MixedRealityToolkit-Unity_ MixedRealityToolkit-Unity uses code from th](https://user-images.githubusercontent.com/13754172/56782652-f92a8180-6822-11e9-9bcb-63b5a04847c1.png)\r\n![2019-04-26 12_54_57-MixedRealityToolkit-Unity_README md at mrtk_development \xc2\xb7 cre8ivepark_MixedReali](https://user-images.githubusercontent.com/13754172/56782653-f92a8180-6822-11e9-9d46-50bb7a322030.png)\r\n\r\n'
437427544,4090,b'Clean up a dead piece of documentation.',"b""There's already been an HTK->MRTK writeup which is already hooked up in the TOC, there's no need to keep this particular thing around."""
437352045,4088,b'Fix using MRTK in Unity editors on non-Windows platforms (part 1)',"b""Overview\r\n---\r\nReported on Slack: opening the MRTK caused issues on non-Windows platforms (in this case, Mac).\r\nThis PR fixes most of them, but I'll need to get my hands on a Mac to repro the glTF-specific ones.\r\n\r\nThe fix: I moved the methods required by the interfaces outside of the Windows-platform `#if`s, where possible, or created a second version for non-Windows platforms where not possible.\r\n\r\nReport: https://holodevelopers.slack.com/archives/C2H4HT858/p1556141818234600\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/56761536-6cb08e00-6752-11e9-8762-38fc7f17cab6.png)\r\n![image](https://user-images.githubusercontent.com/3580640/56761540-70441500-6752-11e9-9f18-749f9011cde4.png)\r\n"""
437335405,4087,b'Delete ControllerElement.cs.meta',"b'Overview\r\n---\r\nThe script was deleted in #4076, but the meta lived on.'"
437278613,4086,b'Workaround for mis-ordered initialization of some input providers.',"b""We've seen a couple of instances now where the MixedRealityInputModule and various providers (i.e. GazeProvider) are getting initialized in non-deterministic fashion. If the GazeProvider starts first, it will raise its source detected, and then when MixedRealityInputModule::ActivateModule is invoked, it re-invokes OnSourceDetected, which tries to add the same pointer to the pointer dictionary.\r\n\r\nThis throws an exception (bad). We want to update the OnSourceDetected function to only try to add it to the dictionary if it doesn't exist to work around this and unblock a few consumers.\r\n\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/issues/4084"""
437275250,4085,b'Add definitions of AzurePipelines builds',"b'We should switch to YAML build definitions to leverage the benefits of having ""configuration-as-code"" (as previously discussed in an internal email thread and offline). \r\n\r\nThis change adds YAML configuration files that correspond to the existing MRTK_CI and MRTK_PR jobs.\r\nSwitching from visual designer to YAML will require setting up new builds (it should be straightforward although we will lose build history and we need to pay close attention to setting up triggers, etc.) and I can take care of it afterwards.\r\nThe CI config references a new variable ""NuGetFeedId"" (which is a GUID of the feed that we use to publish the packages internally).\r\n\r\nI verified the set up by creating personal test builds on my fork of the repo:\r\nhttps://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=1292\r\nhttps://dev.azure.com/aipmr/MixedRealityToolkit-Unity-CI/_build/results?buildId=1290\r\n'"
437219700,4082,b'More clarity in docs on how to implement a global event listener.',b''
437172544,4081,b'Mrtk Raystep Fix',b'- Fixes: #4080 .\r\n'
437017557,4078,b'Button plate texture location update',"b""Overview\r\n---\r\nMoved the location of the Iridescent_spectrum.png texture from Example folder to SDK folder since it is used by Pressable Button and Slate's App Bar. When you don't import Examples package, Button and Slate won't show correct texture.\r\n\r\nMissing texture without Example pacakge:\r\n![2019-04-25 14_38_10-Unity 2018 3 13f1 Personal - Main unity - MRDL-PeriodicTable - PC, Mac   Linux S](https://user-images.githubusercontent.com/13754172/56712045-06366a80-6768-11e9-93bc-90522f93b30d.png)\r\n\r\nWith proper texture:\r\n![2019-04-25 14_38_15-Unity 2018 3 7f1 Personal - SliderExample unity - MRTK-GitHub - Universal Window](https://user-images.githubusercontent.com/13754172/56712046-06cf0100-6768-11e9-9d2e-7c1ba438cbbe.png)\r\n\r\n"""
437001404,4077,"b'Fix ""Buttons can be pressed by pinching when hand is near button, even when hand rays are not present""'","b'# Overview\r\nThis PR fixes a bug where it is possible to click on an Interactable by air tapping when your finger is right next to a button, even though no hand ray or other far pointer is active. The expected behavior is that pinching near a button when no far pointer is active should not press the button, because no pointer that should respond to Select should be sending OnPointerDown.\r\n\r\nThe root cause is that the PokePointer is senting OnPointerDown/Up events when a user pinches/unpinches. Additionally, Interactable is listening for OnInputUp and firing click events whenever it detects an input up, including when from a PokePointer.\r\n\r\nIt is not expected for a PokePointer to send OnPointerDown/Up events in response to a pinch. Instead it should send OnPointerDown/Up when it penetrates a surface.\r\n\r\nAdditional fixes:\r\n- Update InteractableExample scene to work for near interaction (hand pressing the buttons).\r\n- Update PokePointer so that devs can use Interactable to press buttons without needing PressableButton\r\n- Fix bug where dialog ""you must pick MRTK configuration"" would pop up every time build completes.\r\n\r\n# Review Requests\r\nI would love feedback on this approach, specifically:\r\n- I\'m curious why Interactable was handling OnInputDown / OnInputUp as well as OnPointerDown and OnPointerUp. This seems like it would cause duplicate events. Additionally, I couldn\'t think of a way to not respond to OnInputUp from a PokePointer in Interactable::OnInputUp short of specifically ignoring that type. \r\n- I\'d like to know if people think it\'s reasonable for the PokePointer to not listen to OnInputDown/Up, or if there is another way.\r\n\r\n\r\n# Fixes\r\nThis fixes an issue that is being tracked here: https://microsoft.visualstudio.com/DefaultCollection/OS/_workitems/edit/21333770'"
436950107,4076,"b'Removal of dead code, part N+1'","b'Explanation of the things being removed:\r\n\r\nSolverHandlerInspector.cs and ControllerElement.cs:\r\n\r\nControllerElement is dead and no longer used, though it looks like it was used at some point and made it into the solver handler inspector. It could still be useful if someone wanted to make it useful in the future.\r\n\r\nQuarternionSmoothed.cs:\r\n\r\nDead and not used.\r\n\r\nIMixedRealityPlacementHandler:\r\n\r\nDead and not used.'"
436934299,4075,b'Removing a stale meta',"b'Overview\r\n---\r\nThis folder was moved outside the Assets folder in #3748, but the meta was left behind.'"
436901310,4074,b'[documentation] re-structure table of contents ',b'This is in response to some of the feedback we have gotten.\r\nThe documents today are more like feature description and overview vs how-to.\r\nHow-to should be scenario/task focused to teach people how to complete a tast/scenario.\r\nI am moving the doc ToC reflect more of this.'
436899321,4073,b'Initialize geometry fields to null',"b'These produce compiler warnings, which for projects that treat warnings as errors, become errors.\r\n@wiwei @davidkline-ms @andreiborodin '"
436888572,4071,b'User/provencher/exposed box activation setting',"b'Overview\r\n---\r\nPreviously, the box activation mode was set to Manual, which meant that changing handle visibility settings would not be persisted as the pointer focus change listener would prevent handle activation depending on the box activation mode.\r\n\r\nChanges\r\n---\r\n- Fixes: # https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/4052\r\n-> The above issue is resolved when setting the activation type to ActivateByProximityAndPointer'"
436805260,4070,b'FocusProvider not properly handling pointer removal and double exit',"b'Overview\r\nThe FocusProvider had a couple of issues with handling focus properly:\r\n\r\n- Removing two pointers from a focuser during the same frame fired the exit event once for the first, which resulted in an Interactable to not getting deactivated due to the pointer counting it does itself.\r\n- Disabling a Pointer while gazing on a Gameobject did not execute the right events in the right order.'"
436450956,4063,b'Standardize on the way we wait for InputSystem validity.',"b'There are multiple ways we wait for InputSystem validity, some of which\r\ncheck for the current state of the object and some of which use the await directly.\r\n\r\nAFAICT it looks like we should have moved to a common helper (i.e. in this PR: https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3462/files), so this common-izes this action into the base class'"
436445551,4062,b'Fix up a few of the doccomments for the EnumFlags and Edge types',"b""I'm going through the process of looking through our codebase to learn more about everything, and as I'm seeing random issues like this I'm fixing them.\r\n\r\nIn the case of EnumFlagsAttribute.cs we shouldn't have to go to a link to understand the context.\r\n\r\nIn the case of Edge.cs it was referencing what appeared to be an older naming of the type."""
436420678,4061,b'Added a switch to not build nuget packages from build.ps1',b'Added a switch to not build nuget packages from build.ps1'
436398853,4060,"b""Fix the reference to the 'Configuring the Spatial Awareness Mesh Observer' page.""","b""This particular entry in the TOC wasn't hooked up even though the underlying page was already created."""
436323780,4059,b'Homogenize Script Asset Icons',b'Overview\r\n---\r\nUpdates ~200 meta files to use consistent script icons. Mostly demo assets and stuff we pulled in for RC1.\r\n\r\nBefore:\r\n![Icons1](https://user-images.githubusercontent.com/9789716/56605391-eca2f080-65b8-11e9-924b-186d0017c4bc.PNG)\r\n\r\nAfter:\r\n![Icons2](https://user-images.githubusercontent.com/9789716/56605397-ee6cb400-65b8-11e9-8973-6d3154e34737.PNG)\r\n'
436294856,4058,"b'Fix the formatting of the configuration guide\'s ""Back to Configuration Profile"" messages.'","b'Without a newline after the > line, it was rendering the line as a header, which was super super super super super weird.'"
436265052,4057,b'Auto camera creation',"b""Overview\r\nAt least I had the problem with existing scenes that had no camera I wanted to test the toolkit in. I found no real reason why not creating a default main camera if there is none instead of throwing errors and screwing up the setup.\r\nAny other setup might just be unique enough that you need to lay hands on anyways.\r\n\r\n\r\nChanges\r\nAuto creates a default main camera if there's none when adding the toolkit to a scene that has none\r\n"""
436191214,4056,b'Use pointer pose for one handed manipulation in manipulation handler',b'Fixes #3863. See issue for background details on the change.\r\n'
436099569,4055,b'Documentation update against guidelines',"b'Overview\r\nDocumentation updates according to discussions with @thalbern .\r\n\r\nChanges\r\n- Changes according to writing style guideline 2: ""Never write \'I\'""\r\n- Changes according to writing style guideline 3: ""Avoid \'we\'""\r\n- Changing capitalization in headlines\r\n- Rewrite of all UI component documentation to have unified structure. Also added more content.'"
436079379,4054,b'Catch Unity exception in speech input provider.',b'This is necessary so other providers can still be enabled after the speech input provider fails.\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #4026 .\r\n'
435939176,4053,b'Update mrtk_dev with mrtk_release',b'\r\n'
435920313,4051,b'MRTK NuGet with Compiled Binaries',"b'This change brings in the work that was done to enable generation of compiled binary NuGet packages. In step with this change, we will update the build pipeline that will also publish packages to a temporary internal feed (for testing).\r\n\r\nShortly thereafter we will be setting up the complete publishing pipeline.'"
435915395,4050,b'Clean up delivery mechanism documentation.',"b'We currently do not support several of the other mechanisms listed in the DownloadingTheMRTK page, and there\'s nothing more frustrating when coming upon docs than seeing text that says ""coming soon"" that isn\'t helpful.\r\n\r\nOur docs should reflect the current state of how to use the product, and when additional support is added for other delivery mechanisms, we should then update the docs to describe those mechanisms.'"
435903466,4049,b'Interactable Optimization',b'Overview\r\n---\r\nChanging the Interactable system to use the shared material to avoid creating new material instances and breaking batching. Because MaterialPropertyBlocks are used for setting material properties the shared material is used to set the initial state of the MaterialPropertyBlock(s) before mutating state.\r\n\r\n'
435893353,4048,b'Disable MRTK scene checker window while build is active',b'Overview\r\n---\r\nThis stops the scene checker window from opening during / immediately after a build as described in #4043\r\n\r\nRequests for validation\r\n---\r\nVerify that this fixes the repro case described in #4043'
435872136,4047,b'Moves camera management into core CameraService',"b""Overview\r\n---\r\nRe-creates existing MRTK camera management as a core service.\r\n\r\nThis makes it easy for devs to replace the camera system with something that doesn't interfere with ARCore / ARKit camera setups.\r\n\r\nThe new service uses the existing camera profile and should be minimally disruptive.\r\n\r\nChanges\r\n---\r\n- Created CameraSystem service which is now registered alongside other core services on startup.\r\n- Removed camera management from MRTK singleton.\r\n- Added cameraSystemType field to MRTK config profile.\r\n- Removed isCameraPersistent option from profile - this is at odds with our [additive loading \r\nrecommendations.](https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3987) This is something devs should be doing in their own service implementations.\r\n- Set default config profile to use MixedRealityCameraSystem.\r\n\r\nTesting Requests\r\n---\r\nVerify that camera behavior is identical to previous setup (with the exception of persistent camera).\r\n\r\n---\r\n- Implements #4031\r\n"""
435648818,4044,b'Fingertip ring surface alignment bug fix',"b""Overview\r\n---\r\nThe fingertip visual should align with the slate normal, but it didn't.\r\n\r\nUpdated\r\n---\r\nNow fingertip ring visualization aligns with the surface within the threshold distance.\r\n![2019-04-22 17_26_08-Unity 2018 3 13f1 Personal - HandInteractionExamples unity - MRTK-Public - Unive](https://user-images.githubusercontent.com/13754172/56491949-2b876680-6525-11e9-85be-fd81f8100c93.png)\r\n\r\n\r\nChanges\r\n---\r\nUpdated Slate prefab's Local Forward Z to -1. (We already updated other buttons in the scene before)\r\n![2019-04-22 17_29_09-Unity 2018 3 13f1 Personal - HandInteractionExamples unity - MRTK-Public - Unive](https://user-images.githubusercontent.com/13754172/56491911-0f83c500-6525-11e9-9550-184924ead614.png)\r\n"""
435480365,4042,b'Slider control application examples update',"b""Overview\r\n---\r\nAdded examples of using Slider control's value.  \r\n\r\n### Change color\r\n![MRTK_Slider_ColorsExample](https://user-images.githubusercontent.com/13754172/56466246-0245d800-644a-11e9-9a5c-e1582dc7f687.gif)\r\n\r\nChanges\r\n---\r\n- Updated SliderExample scene\r\n- Added example scripts that use Slider control's value (SliderRotateObject.cs, SliderChangeColor.cs, SliderScaleObject.cs)\r\n- Fix bug where slider endpoints would update as mouse moves.\r\n- Expose .Pointer field in SliderEventData so people can know which pointer is manipulating the slider.\r\n\r\nRequires\r\n---\r\nThis PR requires @julenka 's PR #4022. It should be merged first. Separated PR for easier review.\r\n\r\n"""
435385702,4041,b'Update README_Interactable.md',b'Overview\r\n---\r\nAdding overview description to Interactable README file. (mrtk_release)\r\n'
435322692,4039,b'Manipulation event data and clipping primitive fix',"b""Overview\r\n---\r\nA few minor updates I'd like to add in before too much time passes.\r\n\r\nChanges\r\nExposed a few extra properties on the `ManipulationEventData` class and updated `ManipulationHandler` accordingly. Currently there is no way to know what `ManipulationHandler` sent the ManipulationEvent. While I was in there I exposed a few other things that looked useful such as Pointer _position_, _velocity_, and _angular velocity_. \r\n\r\nFixes\r\n---\r\nAdded missing `OnEnable` preRender check on `ClippingPrimitive.cs`. #3886\r\n"""
435288149,4035,b'Feature: multiple MRTK instances',"b""Overview\r\n---\r\nAdds support for multiple MRTK instances as well as hot-swapping of instances.\r\n\r\nFirst step of the scene-related plan laid out in #3987. This is an alternative to the approach in #3941. The final result may be a blend of the two. We should discuss.\r\n\r\nChanges\r\n---\r\n- `DontDestroyOnLoad` is no longer used to protect instances.\r\n\r\n- `MixedRealityToolkit.IsInitialized` simply checks if `activeInstance` is null. It no longer generates an instance.\r\n\r\n- `MixedRealityToolkit.Instance` will generate an instance if none is found. If the active instance is null and multiple instances exist in the loaded scene(s), one is arbitrarily chosen as the active instance. All other instances are disabled and renamed. These inactive instances can be deleted / duplicated / whatever to no effect.\r\n\r\n![MultipleInstances](https://user-images.githubusercontent.com/9789716/56440488-5f9d2600-629e-11e9-8b64-74369bbc14a5.PNG)\r\n\r\n- An inactive instance displays an inspector letting you know you're looking in the wrong place.\r\n\r\n![InactiveMessage](https://user-images.githubusercontent.com/9789716/56440484-5ca23580-629e-11e9-8561-42415c208fbf.PNG)\r\n\r\n- Destroying the active instance results in the next available inactive instance being set active. If all instances are destroyed, all services are disabled. (Note that this doesn't necessarily mean the services handle this well or clean up after themselves.)\r\n\r\n- Newly detected instances (eg from an additive load) will be disabled in favor of the active instance.\r\n\r\nIssues\r\n---\r\n- We're assuming each instance will be using the same configuration profile. I suppose it's possible to detect newly loaded instances with a different profile, shut down existing services, then re-initialize with the new profile. But I doubt we want to go there.\r\n\r\n- This setup suffers from the CameraCache and MixedRealityPlayspace issues we're working out in #3890\r\n\r\nTesting Requirements\r\n---\r\nWe want to try destroying / creating MRTK instances in every possible combination. Multiple instances loaded via multiple additive scenes, multiple instances in one scene, unloading, deleting manually, duplicating manually - every permutation we can think of.\r\n\r\nIn all cases there should be uninterrupted continuity of services provided at least one instance exists and has a configuration profile.\r\n\r\nWe also need to be testing for race conditions during instance initialization.\r\n\r\n---\r\n- First step in fixing: #3987"""
435248018,4032,b'Homogenize Eye Tracking Demo Assets',"b""Overview\r\n---\r\nThe eye tracking demo had script, scene and prefab names that were incongruent with the rest of the toolkit.\r\n\r\nChanges\r\n---\r\n- Changed **3DSlider - Vertical** and **3DSlider - Horizontal** prefabs to **EyeTrackingDemoSliderVertical** and **EyeTrackingDemoSliderHorizontal** to avoid the impression that these were our 'official' slider prefabs.\r\n- Changed name of demo scenes from **mrtk_eyes_00_RootScene** to **EyeTrackingDemo-00-RootScene** (and updated scene content relating to names so loading still works).\r\n- Removed underscores from script names - eg **OnLookAt_Rotate** to **OnLookAtRotate**  - these were the only scripts in the toolkit that used this pattern. No GUIDs were changed and all script references were preserved.\r\n- Renamed demo folders to match pattern established by other demos.\r\n\r\nRequests for Testing\r\n---\r\nSo far I have tested the demo on a VR headset and in editor. I will be testing on device shortly. Until this is tested on device with eye tracking by at least one other person this will remain a draft PR."""
435161760,4028,b'Fix bug in calculation of normal in local space',b'- Fixes: #4027  .\r\n'
435117832,4024,b'Fix broken gesture event actions raised by SimulatedGestureHand.',"b""Changes\r\n---\r\n\r\nThe Awake function was never called (controllers are not MonoBehaviours).\r\nThere doesn't seem to be a good non-ctor init function, so use lazy init.\r\n\r\nThe currentPosition update was also redundant and broke the manipulation/\r\nnavigation events.\r\n\r\nAdded logging in the GestureTester example component for completeness.\r\n\r\n- Fixes: # .\r\n"""
435099669,4022,b'Add Slider Control to MRTK',"b""# Overview\r\nAdd a slider control that can be pinched and moved. The slider control responds to pointer events, so can be manipulated both up close and at a distance. \r\n\r\n![image](https://user-images.githubusercontent.com/168492/56415864-e244c780-6243-11e9-8709-7aaee16d7f11.png)\r\n\r\nThis PR includes the following changes:\r\n\r\n- New PinchSlider.cs control that you can manipulate by pinching and moving, both near and far\r\n- PinchSlider Inspector to adjust start and end points of slider\r\n- Example Scene showing how sliders can be used under _MRTK.Examples/Demos/UX/Sliders_\r\n\r\nAdditionally, the PR includes the following extra changes\r\n- Adds a 'Toggle Features' panel prefab that you can drag into your scene to quickly toggle profiler features and the hand visualization.\r\n\r\n# Requests for Validation / Feedback\r\nI have tested the features myself in editor and on HL2, so don't need buddy test verification, but would love reviewers feedback on the following:\r\n- I would love feedback on the code\r\n- I would love feedback regarding where I am placing assets -- is the SDK folder the correct folder, or should I put the slider assets into _Examples/StandardAssets?_\r\n- I would also love feedback on usability of configuring the slider control. To test this, please over the Sliders example scene and look at how I set up the slider, then see if you can make a similar slider, but in a different location. \r\n\r\n"""
435049295,4021,b'Update README_Interactable.md',b'Overview\r\n---\r\nAdded overview description to Interactable page.\r\n\r\n'
434999939,4019,b'Correcting some Namespaces',b'This work is two fold:\r\n- Correct some non-updated namespaces\r\n- Put some classes into a namespace (this otherwise would be errors in our NuGet retargeting step)'
434979638,4018,b'Add Zoom to Slate',b'Overview\r\n---HandInteractionPanZoom.cs fixes problems in HandInteractionPan script as well as add:\r\n*Two hand Zoom\r\n*smoothed panning and zooming \r\n*public Reset() function to set the pan and zoom back to the starting appearance.\r\n\r\n\r\nChanges\r\n--- added two hand zooming (and two handed pan)\r\n- Fixes: # 20286869\r\n\r\n'
434975309,4017,"b'Update the Pull Request template to include a ""Verification"" section'","b""One idea point of feedback around pull requests is that it's often not clear the level of verification expected from reviewers - should reviewers be patching all changes to be validating them, only specific ones. For new features, it's also sometimes unclear how a reviewer can functionally test things (i.e. exactly what should be tested, how to engage the scenarios, etc). One idea is to provide an optional section on the PR template where people can call out specifics they want reviewed (i.e. please patch my change and test ABC out, or please pay attention to this specific thing)"""
434869453,4016,b'App State Sharing Extension',"b""Overview\r\n---\r\nA stripped-down, MRTK-service-ified version of the AppState system proposed in #3210\r\n\r\nThe AppState service provides a means to synchronize a set of structs among connected users. That's it - it doesn't know or care about scene objects, and it's up to the dev to decide what info to synchronize and when.\r\n\r\nIf you want examples of other systems that can build on AppState to generate / manipulate scene objects, there are several in #3210.\r\n\r\nFeedback Goals\r\n---\r\nThis is an exploratory PR that won't be ready for general consumption until our networking interface is complete. Until then we hope to incorporate feedback on:\r\n- General clarity. Does the service make its purpose and requirements clear with its inspector and profile?\r\n- Workflow for setting up state structs for syncing - looking for friction / confusion.\r\n- Going through the process of connecting two editor instances and/or devices - looking for friction / confusion.\r\n\r\nAppStateData / AppStateDataSubscriptions\r\n---\r\nThis is a Photon-specific implementation of the IAppStateData interface. IAppStateData is the conduit through which the AppState synchronizes data, and IAppStateDataSubscriptions is used to configure which users receive which data. I would like to remove the Photon dependency and use an MRTK networking service in place of these components.\r\n\r\nProfile Setup\r\n---\r\nThe profile inspector helps you search for and configure app state structs and (in the case of IL2CPP builds) state array types.\r\n\r\n![AppState](https://user-images.githubusercontent.com/9789716/54854317-c33c2f80-4caf-11e9-9a74-237569c2745f.PNG)\r\n\r\nOther Issues\r\n---\r\n- The connection process handled by PhotonServiceConnector is opaque and flakey. This is an issue that will hopefully be solved by using an MRTK networking service."""
434669986,4013,b'Pointer dragged event',b'Added a pointer updated event to be raised every frame a pointer is down. The intent is to provide the means to implement drag behaviors based on events instead of forcing client code to poll the pointer every frame.'
434621884,4012,b'Update GettingStartedWithTheMRTK.md',"b'- Update Getting Started title to make the page show higher on Google search results when searching for \'getting started mrtk\'\r\n- Remove some \'note\' annotations (ones that start with ""> "") because they ended up being too large on the github.io webpage.\r\n'"
434535400,4010,b'Update HandInteractionExample piano prefab assets',"b""Overview\r\n---\r\nAdds @beaufolsom's new piano artwork to HandInteractionExamples assets.\r\n\r\n![PianoArtwork](https://user-images.githubusercontent.com/9789716/56328228-b8e84680-6132-11e9-8695-35e3bdddebbf.PNG)\r\n"""
434480702,4007,b'Remove the duplicated bug template',"b""With the RC1 label deleted, there's no longer any difference between the 'Bug report' and 'RC1 bug' template, so we're removing it to reduce confusion on which to use."""
434419799,4004,b'Update issue templates',b''
434282171,4003,b'update preferences ui to use full name of MRTK',"b'This change replaces ""MRTK"" with ""Mixed Reality Toolkit"", ""Microsoft Mixed Reality Toolkit"" or ""Mixed Reality Toolkit - Unity"" as appropriate.\r\n\r\n![image](https://user-images.githubusercontent.com/13281406/56291114-7ba39a80-60d9-11e9-80d4-db79416b8a07.png)\r\n\r\n- Fixes: #3979  .\r\n'"
434267438,4002,b'Eliminate serialization warning message from the input simulation profile',"b'The input simulation service is only valid when running in the editor. However, since it uses a custom profile, it gets deserialized on the target runtime platform as part of loading the mixed reality toolkit profile.\r\n\r\nThe root cause of the issue was that the profile class was not known by the serializer because the assembly containing it was not in the runtime image. This is likely to be true for other, platform specific extensions and providers (guidance on how to resolve this warning needs documentation).\r\n\r\nThe solution was to create a types assembly for the input simulation service that is marked as all platforms. This assembly contains the profile and the required data types and is referenced by the other input simulation assemblies.\r\n\r\nTo avoid a circular asm reference, an interface was created (and located in the new assembly) from which the input simulation service now inherits.\r\n\r\nTested in editor (confirm simulation remains functional) and on device (confirm no serialization warning messages in the debugger)\r\n\r\n- Fixes: #3971 .\r\n'"
434242743,4001,b'Fix name for cloned profiles.',"b'CloneProfile function has an optional argument for the profile name, which\r\nwas used for child profile actions, but not for the main profile.\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'"
434235233,4000,"b'Revert ""Fixed Mouse pointer / controller""'",b'Reverts Microsoft/MixedRealityToolkit-Unity#3982\r\n\r\nreverting due to new comments that were made after completing the PR'
434183595,3998,b'Removed reference to missing script in speech sample.',b'\r\n'
434031221,3996,b'Remove references to dead field showCursorWithEyeGaze.',"b""This was introduced as part of our large payload but was actually never hooked up to anything - it shows up as an option in the inspector but is misleading (i.e. you think it should show a cursor with eye gaze, but it doesn't)"""
434021104,3995,b'Fix a couple of inspector related bugs and exceptions',"b'Fixes two things, which kinda are fixed together because one of them blocks the other. The main thing this addresses is the cloning of profile\'s failure to clone subprofiles correctly (i.e. if you do:\r\n\r\nClick \'Copy & Customize\' in Mixed Reality Toolkit component\r\nClick \'Clone\' by Input System Profile\r\nSelect \'Clone Existing\' in Pointer Profile and click \'Clone\'\r\nNavigate to newly created pointer profile and observe how the Pointer Options array is empty)\r\n\r\n1) Removed line in ScriptableObjectExtensions was causing exceptions in the case where you cloned a profile. This actually was causing the sub-profile cloning code to hit an exception and then never actually copy things over. This also manifests itself when you just hit ""copy and customize"" for the root profile. AFAICT I can see that this has existed for ~5 months now since the report here: #3225.\r\n2) For MixedRealityProfileCloneWindow, it was just passing the wrong variable (i.e. it was passing the empty thing instead of the non-empty thing).'"
433983101,3992,b'Update the profile clone window to honor the name given to it.',"b'Prior to this change, when given a new name for the profile that will be cloned, the cloning code just throws away the name (see how it is taken but not used).\r\n\r\nNow we honor the name, horray.'"
433969248,3991,b'Updated with a new way of loading resources from project folders',b'This work is needed when MRTK is split into separate NuGet packages and may contain assets split across those package folders.'
433967022,3990,b'Stops AppBar from changing custom button visibility',b'Overview\r\n---\r\nAppBar no longer sets custom buttons to invisible on startup or during update. Custom button visibility can be managed by a separate script.\r\n\r\n- Fixes: #3966\r\n'
433947409,3989,b'Merge mrtk_development payload into feature branch',b'Overview\r\n---\r\nMerge mrtk_development payload into feature branch\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
433946576,3988,b'Mrtk development into feature branch',b'Overview\r\n---\r\nMerge mrtk_development into feature branch\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
433933641,3986,b'Sostel patch 3918',b'Overview\r\n---\r\n- Fixing some TextMeshPro items that were only rendered in one eye.\r\n- Addressing issue #3918: Fixing loading additive scene.\r\n\r\nChanges\r\n---\r\n- Fixes: #3918 .\r\n'
433884153,3985,b'Improve TCPConnectionManager monobehaviour',"b""Overview\r\n---\r\n1) Removed structs that weren't used\r\n2) Ensured socket endpoints disconnected correctly\r\n3) Removed the constructor for TCPConnectionManager now that its a monobehaviour\r\n4) Updated the example scene to conduct a disconnect after sending/receiving messages.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
433871263,3984,b'removed external folder and moved root level .md files',b'moved images from all readMeImages to Documentation/Images\r\nmoved all docs from external and root (except main readme) to documentation or subfolders of documentation\r\npatched up links\r\n\r\n'
433852472,3983,b'Modified input system to keep track of last pointer down',b'Keep track of the last pointer to raise a pointer down event to help on choosing the primary pointer in two handed setups.\r\n\r\n- Fixes: #3957 .\r\n'
433829846,3982,b'Fixed Mouse pointer / controller',"b""- mouse cursor not stuck anymore in center of screen\r\n- only one mouse cursor gameobject is created / controller won't be enabled more than once\r\n- screenspace cursor will be hidden when spatial cursor is used\r\n- fixed other controllers interferring with mouse cursor visibility (hands / camera)\r\n- removed spatial mouse cursor (retrieved the mouse cursor position and sent it back to the mouse cursor to set the position of the cursor to that same position again)\r\n- removed mouse wheel scrolling that modified mouse cursor position (not needed as spatial cursor is snapping to interactable objects)\r\n- added ray to world space position calc to enable object manipulation (bounding box)\r\n- added spatial grab to controller mapping to support dragging of objects\r\n- added mouse cursor speed adjustment setting\r\n\r\n"""
433768676,3981,b'Prevent MRTK instance from being created OnAppQuitting',"b'Overview\r\n---\r\nGenerating a new instance during app shutdown in the editor allows instances to persist into edit mode, which cause unwanted behavior.\r\n\r\nThis fix returns a null Instance of the MRTK if none are found in the scene and the app is quitting while running in the editor.\r\n\r\nPreviously, the editor could attempt to ping the MRTK instance while the app was shutting down, which caused it to generate an instance during shutdown, which it held onto during the transition back to edit mode.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'"
433762886,3980,b'Exposed manipulation handler parameters to be publicly set',"b'Overview\r\n---\r\nPreviously the only way to modify settings like rotation constraints was by modifying the serialized property fields. This made it difficult to configure handlers when adding them via another script, as in a factory pattern.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'"
433530299,3977,b'Update the default location that profiles are cloned to.',"b""Currently there place where we clone profiles is somewhat inconsistent - if you clone default root MRTK profile it will go into the CustomProfiles by default. If you use the clone button for the other profiles, they will get dumped in the root Assets folder, which isn't optimal. This makes it so that we at least default to a reasonable thing (the CustomProfiles) while providing a way to override that if so desired."""
433520446,3976,b'Clean up some data provider profile selection confusion.',"b""In the Input Data Provider section, each data provider has an optional (or required) profile that configures that particular profile. There are a couple of issues:\r\n\r\n1) The Add button doesn't actually work on these, because these data providers have abstract (BasedMixedRealityProfile) for their targets. This means pressing the + button ends up just throwing an exception. Unfortunately fixing this up requires some more invasive changes to the way services/data providers are configured, so I'm opting here to just kill off the + button in these cases (and then add documentation for each data provider about what configuration profile it needs).\r\n2) If there already exist profiles that support that particular service (for example, input simulation), this change restricts the set of options in the picker to only assets/profiles that support the service. This prevents the user from seeing every possible profile and having to know which one to pick. Now for things like the input simulation service, we would only show one thing (i.e. the default one) or two (including the custom one if you've cloned it).\r\n\r\nWhat this means is you see:\r\n![image](https://user-images.githubusercontent.com/5840182/56171836-940d9b00-5f9b-11e9-8234-790d3b22e0b9.png)\r\n\r\nInstead of:\r\n![image](https://user-images.githubusercontent.com/5840182/56171847-a556a780-5f9b-11e9-825b-58973e2dc42d.png)\r\n\r\nIn the case that there is only one type of profile that already exists that handle that particular service.\r\n\r\nThis is really designed to help with the initial use case (i.e. I'm configuring stuff, I'm new to MRTK, why do these things show all of the profiles and what do I choose)\r\n"""
433469562,3975,b'Update the Getting Started doc to clarify what the other MRTK profiles are in the initial picker.',"b""We've gotten some feedback that the fact that the user sees 5 different profiles when they load in for the first time is really confusing - no where do we talk about what they do or why they're there. We're hoping to improve the flow here a little bit improving the documentation (i.e. explaining what to pick - the default one - and what the other ones are for - the example scenes) and by choosing a reasonable default (i.e. highlighting the default one when opening the picker)"""
433468832,3974,b'Fix socketer wsa build by moving using declaration',b'Overview\r\n---\r\nFix socketer wsa build by moving using declaration\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
433467256,3973,b'Updating Unity version',"b""There's confusion with 2018.3+ means it supports 2019 as well. clarifying\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
433462752,3972,b'Update the MRTK root profile picker to select a reasonable default.',"b""One of the points of customer feedback we've seen internally is that as a new person configuring a scene for the first time, they see a list of ~5 profiles of which they don't know what to pick. We should at least point to a reasonable default (i.e. the default profile), even if we don't want to filter down this list further to avoid breaking advanced user scenarios."""
432784563,3965,b'Build and deploy window fixes',"b'While looking into other build related issues (i.e. IL2CPP vs .NET) I noticed that there were some issues with the build window (with respect to SDK versioning and chosing the right SDK).\r\n\r\nThere were a couple of issues:\r\n1) There was a concept of a ""min"" SDK, but the code was actually doing an equality comparison to look for it. That is, if you had GREATER than the min SDK it would fall over.\r\n2) It looks like even if you set a different target SDK than you current (i.e. if you had a higher target SDK than the current min one specified by the MRTK), it would lower your target.\r\n\r\nThis does change things a bit in that this will now prefer the latest SDK (over always the min SDK). It\'s a marginal improvement over the old in that now future progress (where new SDK version drops occur) don\'t cause you to fall over because you didn\'t detect the ""minimum"" (because you actually have higher than the minimum).\r\n\r\nAlso switches to using the Version type instead of doing string comparisons (as this allows us to properly sort and reason over versions instead of strings)'"
432774993,3964,b'Update some of the MRTK-specific .NET scripting backend callouts.',"b'A couple of things here:\r\n\r\nBuildDeployWindow.cs - The user already gets .NET backend deprecation warnings in the regular Unity build window. The language of this warning is a bit strong telling people to switch to IL2CPP that may have good reason to stick to .NET (i.e. they actually want a debuggable experience and a faster inner loop). This changes the message to be closer to what Unity says - i.e. it\'s deprecated, try to use the new thing, but you don\'t have to. Originally I was going to remove this but then opted to keep it around in case people are only using this build window (in which case they still have some notification that this isn\'t going to be supported going forward.)\r\n\r\nMixedRealityEditorSettings.cs - This was actually a fairly problematic suggestion, because really going to IL2CPP is not actually required in Unity 2018.3.x (whose LTS version we are going to support.) What\'s worse is pressing ""ignore"" actually set a UNITY APPLICATION WIDE setting which would disable this prompt in other projects as well, and would also stop you from seeing suggestions to enable XR settings (i.e. if you switched from Standalone -> UWP, you would never see suggestion to enable XR settings). People who are enabling the .NET backend are doing so explicitly (and likely because they want a more debuggable experience) and we shouldn\'t force them away from that.'"
432767849,3963,b'Add GetActiveControllers implementation to InputSimulationService',"b""Currently the list of simulated hands can't be queried from the editor. This implements the method used to query controllers by caching the list each time it is changed and exposing it through the existing interface.\r\n"""
432761487,3962,b'Update the MixedRealityPreferences to explicitly provide a SettingScope',"b""Interestingly enough this appears to be the only compile-time incompatibility\r\nwith Unity 2019.1. 2019.1 support in the MRTK is still highly experiemental\r\nbut with this change the UWP should build (and be deployable to HL2)\r\n\r\nAlso note that this change doesn't affect 2018.3 behavior, see:\r\nhttps://github.com/Unity-Technologies/UnityCsReference/blob/2018.3/Editor/Mono/Settings/SettingsProvider.cs\r\n\r\nvs\r\n\r\nhttps://github.com/Unity-Technologies/UnityCsReference/blob/2019.1/Editor/Mono/Settings/SettingsProvider.cs\r\n\r\nThe constructor for this object used to default to SettingsScope.Project\r\n2019.1 removed the default (for the second parameter only).\r\n\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3951"""
432749419,3961,b'Feature: Scene Transition Service',"b'Overview\r\n---\r\nAdds a SceneTransitionService extension to MRTK to address #3899.\r\n\r\nThis extension simplifies the business of fading out a scene, displaying a progress indicator, loading a scene, then fading back in.\r\n\r\nScene operations are driven by the SceneSystem service. But in theory any Task-based operation could be used to drive a transition.\r\n\r\nTesting Goals\r\n---\r\n- Use each of the progress indicator prefabs on device to check for rendering / material / animation bugs.\r\n- Try different fade colors and fade lengths - are there bad combinations?\r\n- Use fades on multiple camera targets - main cameras, UX cameras, custom combinations of both.\r\n- Observe transitions between scenes with large amounts of content for progress indicator smoothness and other problems.\r\n- Report any problems with MRTK services during transitions.\r\n\r\nDetails\r\n---\r\nFor fading out / in, the service uses a class implementing ICameraFader. By default the CameraFaderQuad class is used, which instantiates a quad in front of the camera. Other methods (post FX, OnGUI, etc) could be substituted.\r\n\r\nA few progress indicator options are included by default. Any prefab with a script implementing IProgressIndicator can be substituted.\r\n- Progress Bar\r\n- Rotating Object\r\n- Rotating Orbs\r\n\r\n![LoadingBar](https://user-images.githubusercontent.com/9789716/56066278-260f6c80-5d2c-11e9-84f0-a682636ae7ab.PNG)\r\n![RotatingObject](https://user-images.githubusercontent.com/9789716/56066282-2871c680-5d2c-11e9-8eb6-4c042d96636e.PNG)\r\n![LoadingOrbs](https://user-images.githubusercontent.com/9789716/56066284-29a2f380-5d2c-11e9-8863-0636989509e0.PNG)\r\n\r\nIndependent Transitions\r\n---\r\nYou can also make FadeOut / FadeIn / ShowProgressIndicator calls independently of scene transitions. However these calls will not do anything if a scene transition is in progress.\r\n\r\nExtension Service Discussion\r\n---\r\nScripts and assets have been placed in MixedRealityToolkit/Extensions/SceneTransitionService/\r\nThis would be a good time to discuss:\r\n- Is this the pattern we want to follow?\r\n- Do extensions require their own assembly definition?\r\n- Where to extension inspectors live?\r\n\r\nSide note: this service was created using the extension creation wizard #3748'"
432592330,3956,b'Add default LookHorizontal/LookVertical axes to control camera rotation with gamepad.',b'Overview\r\n---\r\nAdd default axes in the project input configuration to control head rotation with gamepads.\r\n\r\nChanges\r\n---\r\n- Fixes: #3892 .\r\n'
432579983,3955,b'Remove all pointer data on input module deactivation',b'Overview\r\n---\r\nMixedRealityInputModule was only correctly releasing pointer data for input sources currently in the input system. Changed it to release all pointer data instead.\r\n\r\nChanges\r\n---\r\n- Fixes: #3944 .\r\n'
432377843,3947,b'Test PR to validate permissions',"b""Don't actually merge this one - I do not want this to be a draft PR because I need to see what happens with some permission setup."""
432249457,3946,b'Removes GC Alloc from various services',b'Overview\r\n---\r\nMixedRealityToolkit.Update with default services used to allocate 476 B every frame. This reduces allocations to 0 B per frame.\r\n\r\n'
432143489,3943,b'fixed wrapping issue with Spatial Anchors',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
432053961,3942,b'Add option to enable / disable pressableButton back press detection',b'Overview\r\n---\r\nAdd option to enable / disable back-press detection.\r\n\r\nHandle back-press detection differently by only using a check in OnTouchStarted: Test whether the controller was pushing from the front by taking into account its velocity. '
432021814,3941,b'MixedRealityToolkit script support for scene switching',"b""# IMPORTANT\r\n\r\nThis is just a draft,  these changes require @davidkline-ms changes to profiles and we may want to include these in those.\r\n\r\nI'm currently hitting an issue in AsyncCoroutineRunner when switching scenes. Investigating it. This is the callstack:\r\n\r\n```\r\nAssertion failed on expression: 'go.IsActive()'\r\nUnityEngine.GameObject:Find()\r\nMicrosoft.MixedReality.Toolkit.Utilities.AsyncCoroutineRunner:get_Instance() (at Assets\\MixedRealityToolkit\\Utilities\\Async\\Internal\\AsyncCoroutineRunner.cs:50)\r\nMicrosoft.MixedReality.Toolkit.Utilities.<>c__DisplayClass13_0:<GetAwaiterReturnVoid>b__0() (at Assets\\MixedRealityToolkit\\Utilities\\Async\\AwaiterExtensions.cs:127)\r\nMicrosoft.MixedReality.Toolkit.Utilities.AwaiterExtensions:RunOnUnityScheduler(Action) (at Assets\\MixedRealityToolkit\\Utilities\\Async\\AwaiterExtensions.cs:144)\r\nMicrosoft.MixedReality.Toolkit.Utilities.AwaiterExtensions:GetAwaiterReturnVoid(Object) (at Assets\\MixedRealityToolkit\\Utilities\\Async\\AwaiterExtensions.cs:127)\r\nMicrosoft.MixedReality.Toolkit.Utilities.AwaiterExtensions:GetAwaiter(WaitUntil) (at Assets\\MixedRealityToolkit\\Utilities\\Async\\AwaiterExtensions.cs:71)\r\nMicrosoft.MixedReality.Toolkit.<Unregister>d__7:MoveNext() (at Assets\\MixedRealityToolkit\\Services\\BaseEventSystem.cs:58)\r\nSystem.Runtime.CompilerServices.AsyncVoidMethodBuilder:Start(<Unregister>d__7&)\r\nMicrosoft.MixedReality.Toolkit.BaseEventSystem:Unregister(GameObject)\r\nMicrosoft.MixedReality.Toolkit.Input.MixedRealityInputSystem:Unregister(GameObject) (at Assets\\MixedRealityToolkit.Services\\InputSystem\\MixedRealityInputSystem.cs:435)\r\nMicrosoft.MixedReality.Toolkit.Input.InputSystemGlobalListener:OnDisable() (at Assets\\MixedRealityToolkit.Services\\InputSystem\\InputSystemGlobalListener.cs:48)\r\nMicrosoft.MixedReality.Toolkit.Input.BaseControllerPointer:OnDisable() (at Assets\\MixedRealityToolkit.SDK\\Features\\UX\\Scripts\\Pointers\\BaseControllerPointer.cs:160)\r\nUnityEngine.Object:DestroyImmediate()\r\nUnityEngine.Object:DestroyImmediate(Object) (at C:\\buildslave\\unity\\build\\Runtime\\Export\\UnityEngineObject.bindings.cs:322)\r\nMicrosoft.MixedReality.Toolkit.Input.ControllerPoseSynchronizer:OnSourceLost(SourceStateEventData) (at Assets\\MixedRealityToolkit.SDK\\Features\\Input\\Handlers\\ControllerPoseSynchronizer.cs:109)\r\nMicrosoft.MixedReality.Toolkit.Input.BaseControllerPointer:OnSourceLost(SourceStateEventData) (at Assets\\MixedRealityToolkit.SDK\\Features\\UX\\Scripts\\Pointers\\BaseControllerPointer.cs:408)\r\nMicrosoft.MixedReality.Toolkit.Input.<>c:<.cctor>b__172_1(IMixedRealitySourceStateHandler, BaseEventData) (at Assets\\MixedRealityToolkit.Services\\InputSystem\\MixedRealityInputSystem.cs:649)\r\nUnityEngine.EventSystems.ExecuteEvents:Execute(GameObject, BaseEventData, EventFunction`1) (at C:\\buildslave\\unity\\build\\Extensions\\guisystem\\UnityEngine.UI\\EventSystem\\ExecuteEvents.cs:261)\r\nMicrosoft.MixedReality.Toolkit.BaseEventSystem:HandleEvent(BaseEventData, EventFunction`1) (at Assets\\MixedRealityToolkit\\Services\\BaseEventSystem.cs:32)\r\nMicrosoft.MixedReality.Toolkit.Input.MixedRealityInputSystem:DispatchEventToGlobalListeners(BaseInputEventData, EventFunction`1) (at Assets\\MixedRealityToolkit.Services\\InputSystem\\MixedRealityInputSystem.cs:357)\r\nMicrosoft.MixedReality.Toolkit.Input.MixedRealityInputSystem:HandleEvent(BaseEventData, EventFunction`1) (at Assets\\MixedRealityToolkit.Services\\InputSystem\\MixedRealityInputSystem.cs:287)\r\nMicrosoft.MixedReality.Toolkit.Input.MixedRealityInputSystem:RaiseSourceLost(IMixedRealityInputSource, IMixedRealityController) (at Assets\\MixedRealityToolkit.Services\\InputSystem\\MixedRealityInputSystem.cs:640)\r\nMicrosoft.MixedReality.Toolkit.Input.InputSimulationService:RemoveAllHandDevices() (at Assets\\MixedRealityToolkit.Services\\InputSimulation\\InputSimulationService.cs:295)\r\nMicrosoft.MixedReality.Toolkit.Input.InputSimulationService:DisableHandSimulation() (at Assets\\MixedRealityToolkit.Services\\InputSimulation\\InputSimulationService.cs:180)\r\nMicrosoft.MixedReality.Toolkit.Input.InputSimulationService:Disable() (at Assets\\MixedRealityToolkit.Services\\InputSimulation\\InputSimulationService.cs:67)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:UnregisterService(IMixedRealityInputDeviceManager) (at Assets\\MixedRealityToolkit\\Services\\MixedRealityToolkit.cs:221)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:UnregisterDataProvider(IMixedRealityInputDeviceManager) (at Assets\\MixedRealityToolkit\\Services\\MixedRealityToolkit.cs:294)\r\nMicrosoft.MixedReality.Toolkit.Input.MixedRealityInputSystem:Disable() (at Assets\\MixedRealityToolkit.Services\\InputSystem\\MixedRealityInputSystem.cs:262)\r\nMicrosoft.MixedReality.Toolkit.<>c:<DisableAllServices>b__68_0(IMixedRealityService) (at Assets\\MixedRealityToolkit\\Services\\MixedRealityToolkit.cs:894)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:ExecuteOnAllServices(Action`1) (at Assets\\MixedRealityToolkit\\Services\\MixedRealityToolkit.cs:912)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:DisableAllServices() (at Assets\\MixedRealityToolkit\\Services\\MixedRealityToolkit.cs:894)\r\nMicrosoft.MixedReality.Toolkit.MixedRealityToolkit:OnDisable() (at Assets\\MixedRealityToolkit\\Services\\MixedRealityToolkit.cs:708)\r\n\r\n```\r\n# Description\r\n\r\nModified MixedRealityToolkit script to support reloading of the current scene or loading a new one while in play mode. We now replace the existing MixedRealityToolkit instance when loading a new scene instead of keeping the existing one. \r\n\r\nKeeping the existing one was creating issues with services that keep references to scene objects, like focus provider and, in general, forces services to be aware of scene loads. E.g. device managers would need to detect the scene change and recreate all pointers in the new scene.\r\n\r\n Changes include:\r\n\r\n- Don't create MRTK script instance in accessor\r\n- Don't mark as DontDestroyOnLoad\r\n- Unsubscribe from callbacks subscribed to in initialization\r\n- Replace existing instance on Awake()\r\n- Clean up recognizers on WMR device manager disable\r\n\r\nFixes: #3895  .\r\n"""
431913293,3940,b'Fix documentation crefs.',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
431766851,3938,b'Add qr code visual and detector to mrtk project',"b""Overview\r\n---\r\nThis change adds a qr code detector to the mrtk project. QR code detection will be preferred over aruco markers with HoloLens 2. This logic isn't currently usable by external developers based on missing plugin dlls. Once a distribution story for these dlls is defined, the detector can be enabled.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
431762715,3937,b'Add a qr code extension to the MRTK to enable public facing development around spectator view calibration',"b""Overview\r\n---\r\nThis review introduces a new MRTK dll for qr code tracking. This dll is not available to the public and this component can't be used by external developers. However, stubbing out this functionality will enable public facing development around camera calibration/spectator view improvements. Long term this logic should be updated to reflect the appropriate distribution story.\r\n\r\nNote: This change also introduces qr code based IMarkerDetector and IMarkerVisuals for use in spectator view.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
431745620,3936,b'Add socketer component as an extension to enable TCP networking for shared experiences',b'Overview\r\n---\r\nAdd socketer component as an extension to enable TCP networking for shared experiences\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
431723318,3935,b'Release frame after its been used for aruco marker detection',b'Overview\r\n---\r\nIts better to not expect users to release a frame. They should have to opt in to incrementing the reference count for said frame.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
431719788,3934,b'Make camera frame helper classes serializable for future networking synchronization',b'Overview\r\n---\r\nUpdate camera related items to be Serializable\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
431668608,3933,b'PressableButton Inspector Improvement (Part 2)',"b'Overview\r\n---\r\n- Fixes inspector for buttons with offset content transforms\r\n- Enables accurate preview of button settings during touch / press events\r\n- No longer generates initial transform at edit time\r\n- Show Handles is disabled by default and preference is stored\r\n\r\nThis removes the ability to drag the button content transform in the inspector as it was causing problems with undo. You can still move the transform manually.\r\n\r\nThis also removes the InitialTransform objects from pressable button and piano key prefabs, since they will be generated at runtime.\r\n\r\n![ButtonPreview](https://user-images.githubusercontent.com/9789716/55906452-26bbcd80-5b89-11e9-8833-17d02b99f491.png)\r\n\r\n- Fixes: #3931 '"
431630419,3930,b'updated MR dev center content and icons',b'/azp run mrtk_docs\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
431621782,3929,b'added new icons for mr dev center readme update',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
431616593,3928,b'Updated MR Dev Center links',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
431586770,3926,b'fixed missing argument',b'not all items in the Mixed Reality Toolkit menue have been there as shown in the How-To: https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/GettingStartedWithTheMRTK.html#4-configure-your-first-mixed-reality-toolkit-scene'
431548859,3925,b'Fixed mrtk missing instance bug creating new instances without consent',"b'Overview\r\n---\r\n- Previously the MRTK would load instances into open scenes without consent, even if  the user responded no to the popup asking for one to be created. This caused large scale scene modifications in scenes without any previous MRTK presence.\r\n\r\n- This fix prevents new instances from being created if the application is not playing and no existing instances are found.\r\n\r\nResolves issue https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3921\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'"
431548026,3924,b'Fixed missing argument in SettingsProvider',b'not all items in the Mixed Reality Toolkit menue have been there as shown in the How-To: https://microsoft.github.io/MixedRealityToolkit-Unity/Documentation/GettingStartedWithTheMRTK.html#4-configure-your-first-mixed-reality-toolkit-scene'
431528283,3923,b'fix .net focusprovider build',b'#3903'
431524661,3922,b'Move MRTK scene check out of the profile inspector and into a utility class.',"b'Overview\r\n\r\nThis check should not be performed when loading profiles, since it only happens when a profile is actually visible in the inspector, which can happen at arbitrary times in the workflow or not at all. Profiles as separate assets should not be responsible for modifying scene state.\r\n\r\n---\r\n\r\nChanges\r\n\r\nThe new utility class will be created on project load (`[InitializeOnLoad]` attribute) and check for a MRTK instance when a new scene is created (with default objects) or when a scene is loaded.\r\n\r\nThis also solves the problem that the popup would come up when running tests, since these first start from an empty scene before a test scene is loaded. The check will now be ignored in that case, using the `NewSceneSetup.EmptyScene` parameter.\r\n\r\n---\r\n- Fixes: #3884 .\r\n'"
431508514,3920,b'Prevent MRTK From repeatedly creating profile-less instance automatically',"b""Overview\r\n---\r\n- Previously, if you clicked on any MRTK profile with an open scene lacking an MRTK instance, the MRTK Active profile getter would attempt to request an editor ping to an instance that did not exist, thus creating one in your scene without prompt. \r\n\r\n- This behavior led to the MRTK modifying scenes that shouldn't have been modified.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
431494064,3919,b'Fix GridObjectCollection',"b'Overview\r\nGridObjectCollection was not properly working:\r\n\r\n- Horizontal and Vertical layouts were not even implemented\r\n- Rows and Columns were not swapped when switching between which comes first, offsetting the whole layout from the center.\r\n'"
431427279,3916,b'Alternative Pinch gesture with a steady wrist.',"b'Overview\r\n---\r\nAlternative Pinch gesture that keeps the wrist stead and moves the index finger and thumb instead. This was requested by users, but rather than having one or the other i would rather provide both options. The fixed index tip variant is still the default, since it is considered better for testing interactions. The alternative with moving index finger is more anatomically correct though.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'"
431248665,3913,b'Silly test commit to validate the code owners flow',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
431247686,3912,b'Silly test commit to validate the code owners flow',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
431247139,3911,b'Silly test commit to validate the code owners flow',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
431246006,3910,b'Silly test commit to validate the code owners flow',b'Trying to see if the code review check will properly work with the organization being setup vs. individuals in the code owners.'
431219826,3907,"b'Test PR, please ignore.'",b''
431219245,3906,"b'Test pull request, please ignore'",b''
431177375,3905,b'Fix the broken doc build.',b''
431160946,3904,b'[Documentation] Improve Getting Started Page',"b'Overview\r\n---\r\nUpdate the getting started page to better guide new users by fixing incorrect steps, adding section about how to actually run a sample scene, and updating links.\r\n\r\n- New section ""Run HandInteractionExamples in editor"" that guides people on how to import a package, open the sample scene, and use the example via in-editor simulation.\r\n- Update section ""Add MRTK to new scene or project"" to actually match MRTK v2 RC1 steps.\r\n- Remove planned guides / ""coming soon"" pages with actual pages that we have.\r\n\r\nChanges\r\n---\r\n- Fixes: #3893 \r\n'"
431077428,3901,"b'Revert ""Update pressable button, adds inspector""'",b'This reverts commit 2538ff87bd1c431d8fd38456c5f129ed3c605e9c.\r\n\r\nShould not have gotten into RC1'
431009843,3900,b'Add docs ci badge to readme',"b'Since I split the pipelines in two, the status badge has only been reporting CI status and not docs status. '"
430726373,3896,b'Update issue templates',b''
430637771,3890,b'Updates CameraCache to handle Main Camera / Playspace destruction',"b'Overview\r\n---\r\nUpdates CameraCache to generate a main camera if no cameras are found in the scene. Previously, this would cause multiple null reference exceptions.\r\n\r\nDestroying the playspace (accidentally or intentionally), adding the Toolkit to a completely empty scene or destroying the main camera are all common scenarios that the toolkit should be able to handle.\r\n\r\nAfter creating the camera everything proceeds normally including the creation of a MixedRealityPlayspace transform and camera event system. DontDestroyOnLoad settings are also observed.\r\n\r\nTesting Goals\r\n---\r\n- In editor, you should be able to delete the camera and/or the playspace at any time without causing issues. The goal is to find a scenario where deleting one or both causes an error.\r\n- On device we should test scenarios where we load a scene with an MRTK instance but no camera or playspace, or else create a new MRTK instance in an empty scene.\r\n\r\nFixes #4046 '"
430621088,3889,b'Updates CameraCache to handle Main Camera / Playspace destruction',"b'Overview\r\n---\r\nUpdates CameraCache to generate a main camera if no cameras are found in the scene. Previously, this would cause multiple null reference exceptions.\r\n\r\nDestroying the playspace (accidentally or intentionally), adding the Toolkit to a completely empty scene or destroying the main camera are all common scenarios that the toolkit should be able to handle.\r\n\r\nAfter creating the camera everything proceeds normally including the creation of a MixedRealityPlayspace transform and camera event system. DontDestroyOnLoad settings are also observed.'"
430564642,3888,"b""Adds 'Utilities' to Mixed Reality Toolkit menu""","b""Overview\r\n---\r\nMoves _Channel Packer_ and _Build Window_ to a _Utilities_ sub-menu.\r\n\r\nA nitpicky change but I feel it's important that _Add to Scene and Configure..._ remain as obvious as possible.\r\n\r\nCurrent:\r\n![OldMenu](https://user-images.githubusercontent.com/9789716/55743214-95145a80-59e6-11e9-8e90-d44fbcbbbfac.png)\r\n\r\nNew:\r\n![NewMenu](https://user-images.githubusercontent.com/9789716/55743219-980f4b00-59e6-11e9-8e60-77053c50286e.png)\r\n"""
430554376,3887,b'Global Input Event System',"b'Overview\r\n---\r\nFollowing up on PR https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3821\r\nAlong with Proposal https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3788\r\n\r\nThis change serves to make it easier for users to implement bindings to all inputs supported by the MRTK, without using the focus system, while also preserving all the input parameters passed through the platform data implementations.\r\n\r\n- Global event system profile is a new optional profile which allows users of the MRTK to define a mapping through which all inputs route.\r\n\r\n- Setting the global input event system profile field in the input profile to none means no global input routing is done, and a simple null check is performed, to minimal performance impact.\r\n\r\n- A default profile is created for educational purposes\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'"
430536513,3886,"b'Adding EventRouting for Camera events, added option to ClippingPrimitive'",b'**Overview**\r\nAdding a helper script to Utilities that enables components to subscribe to `OnPreRender()` without living on a Camera component. We can add more as needed.\r\n\r\n**Context**\r\nI ran into an issue with TextMeshPro objects dynamically creating a sub TMP object at `OnWillRenderObject()`. This means any check for new objects that may exist in `Update()` or `LateUpdate()` will have to wait a minimum of a frame to catch the newly created TMP object.\r\n\r\n**Changes**\r\n--- Updated `ClippingPrimitive`. Now has an option to subscribe to  `OnPreRender()`.\r\n'
430498603,3885,b'Regenerated input system profile for speech sample so we have the default data providers',b'Data providers in custom input system profiles were lost when the profile was refactored.\r\n'
430405508,3882,b'Dictation documentation',b''
430338175,3881,b'Hand simulation cleanup to better define the purpose of SimulatedHand Data vs. SimulatedHandState.',"b'Overview\r\n---\r\nSimulatedHandData contains all information necessary for SimulatedHand. It can be used to reproduce hand movement (this will become important for tests!)\r\n\r\nSimulatedHandState is used only for keeping track of changes through keyboard and mouse input. It gets baked into SimulatedHandData when hand simulation is used, but other methods of creating hand movement are possible (test animation).\r\n\r\nThe InputSimulationService now owns the actual SimulatedHandData instances (for both hands) and exposes them publicly. This will later allow tests to modify the hand data without using the SimulatedHandDataProvider, thus separating it from keyboard and mouse input.\r\n\r\nTesting for update hand device data happens in the service now instead of the SimulatedHandDataProvider. This avoids the indirection through OnHandDataChanged callbacks and makes the service less dependent on the SimulatedHandDataProvider.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'"
429947439,3875,b'Update MRTK-vNext.md',b'Overview\r\n---\r\nUpdating outdated content/references.\r\n'
429941877,3874,b'add componentization document',b'\r\n'
429928700,3873,b'Merge pull request #3872 from Microsoft/cre8ivepark-patch-1',b'Pull in latest bounding box readme fixes.'
429922618,3872,b'Update README_BoundingBox.md',"b""Overview\r\n---\r\nCurrently, Bounding Box does not calculate the box collider boundary if the user didn't explicitly assign a collider. (feedback from Yoyo #3871 ). Updating documentation.\r\n\r\n\r\n"""
429920142,3870,b'ET doc add + Re-enabling ET demo',b'Overview\r\n---\r\n- Added description and screenshots for how to use the additive load setup for the ET scenes.\r\n- Re-enabled the OnLoad_StartScene script in the root scene.\r\n- Replacing one of the screenshots due to copywrite concerns.'
429911954,3868,b'Merge rc1 doc and version changes back into mrtk_development',b'So that we can get new docfx image fixes that came from rc1'
429849756,3867,b'Re-introducing the Shell hand mesh shader that works with single pass instanced rendering.',"b'Overview\r\n---\r\nRe-introducing the shell hand mesh shader that works with single pass instanced rendering. See the below image for what it looks like on device (it looks better in person and does not contain the offset). Note, you will not see the hand within the editor simulator.\r\n\r\n\r\n![Hand](https://user-images.githubusercontent.com/13305729/55643944-4ddd5e00-5789-11e9-9ba0-b5bd182b3cd3.png)\r\n'"
429849694,3866,b'Properly set up example scenes with input module',"b'Overview\r\n---\r\nA few example scenes were missing the new input module, and some had stale cameras.'"
429809378,3865,b'Eye tracking and style guide docs mrtk_dev -> rc1_stabilization',b''
429791685,3864,b'extended documentation guide with style guide / general information',b''
429714092,3862,b'Add TargetPositionLockedOnFocusLock for pointers',"b'Add `TargetPositionLockedOnFocusLock ` for pointers to to allow the cursor to not be position-locked on HandInteractionPan surfaces\r\n\r\nOverview\r\n---\r\nIn order for the pannable texture to be fixed to the pointer target position, the pointer target position needs to be movable when focus is locked. This change ensures that the focused object is maintained, even if the pointer ray cast may not be hitting the focused object anymore. This only happens when `IMixedRealityPointer.IsTargetPositionLockedOnFocusLock` is set to false (usually in an event handler). The default setting is to keep the position locked on focus lock.\r\n\r\nSince focus lock is handled per pointer, target position lock needs to be handled on the same level.\r\n\r\nThe initial idea was to only allow a `FocusSessionConfiguration` object to be modified in the FocusEnter event. But since the FocusEnter event is not pointer specific, as it is only raised for the first pointer entering the focus, this is currently not possible.'"
429687896,3861,b'Docs link fixes',"b'Overview\r\n---\r\nFixes a bunch of links that incorrectly started with `/` (looks fine in GitHub, but causes problems in DocFX). Also fixed some other assorted image paths and links.'"
429668424,3860,b'Visual Profiler docs from mrtk_development -> stabilization',b'Overview\r\n---\r\nMigrates the Visual Profiler docs over for RC1.\r\n'
429601147,3858,b'Pointer documentation improvement',b'- Flesh out pokepointer and mousepointer sections since they were very sparse.\r\n- Fix broken link.\r\n'
429584581,3857,b'Pull the RC1 payload into mrtk_release',b''
429536472,3856,b'Fix the image paths so that the github.io page also works correctly',"b""A number of our image paths work fine on github but don't play well\r\nwhen ingested in docfx.\r\n"""
429536165,3855,b'Eye Tracking documentation kick off',b'Overview\r\n---\r\nKick off of Eye Tracking docs.\r\n\r\nChanges\r\n---\r\nAdded several documentation files:\r\n- Basic landing page for Eye Tracking in MRTK\r\n- Getting started with Eye Tracking in MRTK: Setting up profiles and basics on accessing Eye Tracking data.\r\n- Overview of Eye Tracking sample scenes\r\n- Individual pages for the different ET samples\r\n  -- Target selection\r\n  -- Navigation\r\n\r\n- Empty placeholders for the two remaining ones: Positioning and Visualization.\r\n\r\n'
429533130,3854,b'Add a note that prefabs/assets require TMP.',"b""Some of the prefabs and assets require text mesh pro, which isn't apparent as you start using things. We aren't able to automatically import TMP assets, so we should provide guidance that these are required."""
429529926,3853,b'[Slate] Fixed pan/scroll interaction with hand-ray. Added zooming support',b'Overview\r\n---\r\n- Fixed pan/scroll interaction with hand-ray. \r\n- Added zooming support\r\n- Updated the location of the Slate related scripts to SDK folder\r\n- Slate prefab updated: Fixed collider size issue to make it respond to hand-ray.\r\n- Added HandInteractionPanZoomExamples scene to demonstrate various types of panning/scrolling options.\r\n\r\n![MRTK_Slate_Scroll](https://user-images.githubusercontent.com/13754172/55595772-2b503400-56fa-11e9-9011-9bf6bae88219.gif)\r\n\r\n\r\n![MRTK_Slate_Zoom1](https://user-images.githubusercontent.com/13754172/55595726-20959f00-56fa-11e9-840b-b94055db0e16.gif)\r\n\r\n![2019-04-04 16_44_08-Unity 2018 3 8f1 Personal - HandInteractionPanZoomExample unity - MRTK-Public-Mi](https://user-images.githubusercontent.com/13754172/55595857-9ac62380-56fa-11e9-8c4a-26d1c5fa119e.png)\r\n\r\n'
429512199,3852,b'Update the version numbers to RC1',b''
429500456,3851,b'add using the visual profiler documentation',"b""heavily borrowed content from the Visual Profiler repository's readme file (thanks @Cameron-Micka !) \r\n"""
429493282,3850,b'Merge in latest toc changes',b''
429487318,3849,b'Update the toc to reference the newly added docs.',b''
429477359,3848,b'Pull in the last set of code changes from mrtk_development',b''
429473792,3847,b'Revert previous change to MixedRealityInputSystem',"b'This PR reverts a previous change, which we want to have a little more discussion on.\r\n\r\nThere are some things we need to chat around performance and ensuring that specific base class functionality is always invoked.\r\n\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3821'"
429468531,3845,b'Update the readme to point to the required SDK.',b''
429451515,3843,"b'Fix See-it, Say-it label delay timing regression: Easing was unchecked. Interactable theme updated.'","b'Overview\r\n---\r\nFix See-it, Say-it label delay timing regression: Easing was unchecked. \r\nInteractable theme updated to have easing timing for 1 sec.\r\n\r\nChanges\r\n---\r\nSee-it, Say-it label profile updated. No code change.\r\n\r\n![2019-04-04 11_23_12-Unity 2018 3 8f1 Personal - HandInteractionExamples unity - MRTK-Public-RC1 - PC](https://user-images.githubusercontent.com/13754172/55583750-81f84680-56d7-11e9-8848-6e57d365fb6a.png)\r\n'"
429431868,3841,b'Merge in pressable button improvements',b''
429428870,3840,b'Merge in the latest documentation changes',b''
429428241,3839,b'add mrtk packages documentation',"b'Documents the packaging categories, including details on the contents of foundation packages'"
429424410,3838,b'Merge README.md - removing duplicated sections',"b""Overview\r\n---\r\nMerge README.md - removing duplicated sections. Merged Julia's updates. Adjusted section positions.\r\n"""
429422771,3837,b'add authors doc',b'Thanks to ALL who contributed to make MRTK v2 a reality!'
429420861,3836,b'Update GettingStartedWithTheMRTK.md',"b""Updating the HTK to MRTK section \r\n\r\nNeed link to Kurtis's migration doc"""
429419812,3835,b'Update README.md',b'Overview\r\nUpdated readme file to point to the right windows sdk \r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
429419329,3834,b'Merges the README.md changes from mrtk_release into mrtk_development',"b""It turns out that we've been checking in conflicting changes to README.md in multiple locations.\r\n\r\nThis takes most of the changes from mrtk_release (it's been the most active area of change)"""
429413588,3833,b'Remove example scenes list in the Build Settings',"b'Overview\r\n---\r\nRemove example scenes list in the Build Settings for the users without Examples package.\r\n\r\n![2019-04-03 14_42_55-Unity 2018 3 8f1 Personal - Untitled - MRTK-Public-Microsoft - PC, Mac   Linux S](https://user-images.githubusercontent.com/13754172/55578131-093ebd80-56ca-11e9-9a5e-2a5623d0b41b.png)\r\n\r\n'"
429411615,3832,b'Update AppBar to make touch events work in all cases',"b""Overview\r\n---\r\nUpdates AppBar to make touch events work in all cases. Buttons no longer fade out when disabled but the visual loss is minimal.\r\n\r\nChanges\r\n---\r\nAppBarButton gameobjects are now set active / inactive based on visibility. Also fixed an edge case in NearInteractionTouchable where a disabled collider on an inactive gameobject could still be considered 'enabled.'\r\n\r\nFixes #3809 but doesn't address the underlying issue of touchables not receiving touch events when intersecting with touchables with disabled colliders.\r\n\r\n- Fixes: #3809 \r\n"""
429404147,3831,b'Remove the unused variable warning.',"b""This actually shows up in the unity editor console.\r\n\r\nWhy this one shows up in the unity editor console and not other ones is a mystery to me but let's clean this up."""
429400765,3830,b'Merge the hand joint visualization on-by-default fix',b''
429400210,3829,b'changed default behavior of hand visibility to be enabled',b'fixes invisible hand in simulation mode\r\n'
429396042,3828,b'Add HTK -> MRTK API porting guide',b'Overview\r\n---\r\nAdds an API / feature-level porting guide from HTK -> MRTK.\r\n\r\nFixes: #3437'
429383151,3827,b'Merging in all of the latest changes from mrtk_development into the stabilization branch.',b''
429370981,3826,b'Merge in latest readme changes from mrtk_release',b''
429370959,3825,b'Spell check: documentation pass',b'Overview\r\n---\r\nQuick pass on spelling in the documentation.'
429340598,3824,b'Remove unused enum',"b""Overview\r\n---\r\nRemoves an old enum that's no longer used."""
429310173,3823,b'Removed leading slash from URLs in README',b'Overview\r\n---\r\nLeading slashes were causing image paths and links to resolve incorrectly.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/55563455-e7573200-56ed-11e9-970b-0fb83375206b.png)\r\n'
429286493,3822,"b""replaced error with comment for platforms that don't have a controller visualization""","b""- removed the error for no controller model available as there's platforms that don't have a controller visualization like xbox controller and touch input\r\n\r\nfixes: \r\n#3685 \r\n#3710 """
429278554,3821,b'Allow extension of MixedRealityInputSystem',"b'Overview\r\n---\r\n- MixedRealityInputSystem was not extensible, as methods were not virtual.\r\n- Simply converted all public void methods to be virtual, to make it easier to extend the class without duplicating it.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'"
429234307,3820,"b'When activating MixedRealityInputModule, handle input sources already present'","b'Overview\r\nFor instance, the mouse input source is available before activating the input module'"
429233015,3819,b'Removed variants of methods to raise input events that receive no handedness.',"b'Implemented the changes described in proposal #3791 . As a side effect, this PR changes the handedness of some input events raised by mouse and unity touch controllers from `Handedness.None` to the actual handedness of each controller as defined by `IMixedRealityController.ControllerHandedness`.\r\n'"
429196083,3818,b'Ignore DocFX generated doc/ folder',"b""Added to .gitignore the 'doc' folder generated when running DocFX"""
429194643,3817,b'Update minimum supported Unity version in docs',"b""Due to prefab changes in Unity 2018.3, that's our minimum supported Unity version.\r\n"""
429189920,3816,b'Migrate meta and fix build warnings',b'Overview\r\n---\r\nMoves a meta that was left behind in #3737 and fixes some build warnings.'
429038696,3815,b'Update SpatialAwarenessGettingStarted.md',b'Overview\r\n---\r\nAdded a page hero image.'
429031728,3814,b'Fix the docs build (again)',b''
429017965,3813,b'Update the Getting Started page to mention the required windows SDK.',"b""Due to the new HL2 payload, in order to build against new MRTK you need\r\nto have the latest windows SDK (as of right now it's still in the\r\ninsider state).\r\n\r\nWhile we have an issue open to see if we can disentangle this (https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3801) in the interim we should at least document the actual requirements"""
429014566,3812,b'Add a documentation section on performance',b''
429012220,3811,b'Getting started and configuring documentation for the diagnostics system',b'Getting started and configuration docs.'
429008410,3810,b'profiler sample rate was unbounded in the inspector',b'Added a range of 0 (show FPS every frame) to 5 seconds\r\n'
429004420,3808,b'Add a null input parent check in DefaultPointerMediator',"b""The parent->child enumeration currently throws an exception for input\r\nsources that don't have a parent set. Add a null check around those\r\nreferences so that we don't throw an exception in those cases.\r\n\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3802"""
428980570,3807,b'Cleanup and update of ET navigation demo and scripts',"b'Overview\r\n---\r\n- Removed some deprecated parameters in the scroll scripts that were still shown in the Editor.\r\n- Updated hand zoom parameter that was specific to zoom, but was shown for scroll.'"
428973875,3805,b'Boundary system documentation (and a minor fix to the spatial docs)',b'Documentation for the boundary system as of RC1\r\n'
428966213,3804,b'Change the namespace of BoundingBox to the UI one (from Utilities)',"b'In previous PRs we\'ve gotten feedback that BoundingBox feels like a more\r\nUI concept than a ""utilities"" concept, so moving this to that namespace.'"
428944415,3800,b'Fix typos and improve clarity on README.md',"b'Overview\r\n---\r\nFix typos and improve clarity on README.md, also deleted some redundant content'"
428941865,3799,b'Obsolete scrub',b'Remove obsolete classes and methods prior to declaring RC1\r\n'
428938790,3798,b'Fixing typo on the landing page (mrtk_development) ',b'Overview\r\n---\r\nUpdate README.md - Fixing typo (mrtk_development)\r\n\r\n\r\n'
428936886,3797,b'Fixing typo on the landing page (mrtk_release)',b'Overview\r\n---\r\nFixing typo on the landing page (mrtk_release)\r\n\r\n'
428932277,3796,b'Fix hanging sentence on MRTK home page.',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
428863354,3794,b'PressableButton Inspector Improvement',"b'Overview\r\n---\r\nThis was created in response to feedback that the PressableButton settings were difficult to understand.\r\n\r\n- Draggable handles for changing button press distance, release threshold and max push distance.\r\n- Visible guides show you where these values exist in space.\r\n- Labels attempt to explain what each plane represents. (These could be improved).\r\n- PressableButton no longer creates / destroys transforms every time push events begin / end. Initial transform is created automatically by inspector. It will create transform if not found at runtime as a last resort.\r\n- Button reports touch / pressed states in inspector.\r\n- Button prefabs have been updated.\r\n\r\nWould appreciate feedback on clarity.\r\n\r\n![ButtonInspector](https://user-images.githubusercontent.com/9789716/55495904-c65de680-55f2-11e9-9091-439c9c291665.PNG)\r\n\r\n![SideView](https://user-images.githubusercontent.com/9789716/55495900-c4942300-55f2-11e9-997f-b078eaad0408.PNG)\r\n'"
428853804,3793,b'Use texture for dotted line in DefaultPointerController',b'Overview\r\n---\r\nReplaces the MeshLineRenderer in DefaultPointerController with a MixedRealityLineRenderer.\r\n\r\n![DottedLine](https://user-images.githubusercontent.com/9789716/55494576-e5a74480-55ef-11e9-92ce-d9b30bab6a88.PNG)\r\n\r\nChanges\r\n---\r\n- Fixes: #3776 '
428846067,3792,b'Fix docs build',"b""Overview\r\n---\r\nThe spatial awareness PR broke the docs build.\r\nI also integrated @thalbern's comments from after I merged the original PR."""
428825668,3790,b'Fixed joystick name check to correctly recognize Xbox controllers',b'- Fixes: #3657  .\r\n'
428789937,3787,"b""Renamed 'input pressed' to 'float input changed' and raise only on changes to inputs""",b'This implements the changes suggested in issue #3722 \r\n'
428753508,3785,b'No longer build appx with WSAPlayer by default',b'No longer build appx with WSAPlayer by default. Also removed build platform defaulting to x86 for uwp builds.\r\n'
428721436,3784,b'resized doc website logo (fixes logo spanning over content of website\xe2\x80\xa6',"b'\xe2\x80\xa6) , renamed big version of logo\r\n\r\n\r\nsee logo spanning over entire website here: https://microsoft.github.io/MixedRealityToolkit-Unity/README.html\r\n'"
428677674,3783,b'Core input hands doc',b'Overview\r\n---\r\nDocumentation for Hand Tracking features.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
428560417,3782,b'Fix the doc build',"b""Previous PR https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3731/files didn't update the toc.yml, but the build didn't catch the issue because it was broken due to SDK versioning issues (and then scene rename issues).\r\n\r\nBasically there were a chain of things that were broken and we only now got to the point where we can see it working."""
428510945,3781,b'Fix the broken OpenVR build.',b'Some of the new code that was introduced added dependencies on UWP APIs\r\neven when calling from a non-UWP context. (i.e. UserInput_Playback.cs)\r\n\r\nAlso added a UNITY_WSA check around OpenKeyboard because the touch keyboard\r\nAPIs are only documented to work on UWP/IOS/Android/etc locations.'
428500434,3780,b'Diagnostics Visual Profiler Improvements',"b""Porting over latest changes from https://github.com/Microsoft/VisualProfiler-Unity including:\r\n\r\n- Adding support for Unity's FrameTimingManager to get more accurate frame times on supported platforms (this also unlocks GPU frame timing for supported platforms).\r\n- Optimizations around how strings are formatted and missed frame indicators are rendered (instanced when available).\r\n- UX improvements around how the window can be anchored.\r\n- Minor tooltip/documentation improvements.\r\n"""
428495950,3778,b'Temporary Fix for Graphics.DrawMesh/DrawMeshInstanced  + Single Pass Instanced Rendering',b'Temporarily making the default pointer use a solid line when not focused on anything. Will fix Graphics.DrawMesh/DrawMeshInstanced  + Single Pass Instanced rendering at a later date.\r\n\r\nChanges\r\n---\r\n- Fixes: #3776\r\n'
428481610,3775,b'Adding links to the Interaction and UI control',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
428466699,3774,b'Getting started documentation for spatial awareness',b'High level configuring spatial awareness with links to the API docs and (to be written) pages on using in an app and configuring the mesh observer\r\n'
428437316,3773,b'Service Facades / Service Custom Inspectors',"b""Overview\r\n---\r\nAdds editor-only 'service facade' objects to MRTK singleton. Facades are lightweight scene objects representing active services. They resemble classic MonoBehaviour singletons.\r\n\r\nThey give developers a better sense of what services are active and offer a quick way to check up on the state of the service.\r\n\r\n![Facades](https://user-images.githubusercontent.com/9789716/55431157-ac65ca80-5544-11e9-95df-334e1e684d51.PNG)\r\n\r\nTesting Goals\r\n---\r\nOn the whole we're looking for feedback on ease of use and inspector clarity. In addition:\r\n- Deleting / unparenting / duplicating facade objects should have no effect. Look for situations where these actions cause errors or where facade objects persist in an odd state.\r\n- Look for cases where inspector errors are caused by the state of a service.\r\n- Look for app or service states where toggling 'Use Service Inspectors' in the mixed reality toolkit config profile causes errors.\r\n\r\nDocumentation Links\r\n---\r\nTo help new devs get their bearings, facades link to online docs by way of the DocLink attribute. This functions similarly to the HelpUrl attribute in Unity.\r\n\r\n![Documentation](https://user-images.githubusercontent.com/9789716/56316928-68f88800-6110-11e9-90d7-c61e76b3c01f.PNG)\r\n\r\nService Custom Inspectors\r\n---\r\nFacades may implement custom inspector / scene GUI / gizmo functions. This is handled similarly to Unity inspectors. A class implementing the IMixedRealityServiceInspector interface is given the MixedRealityServiceInspector attribute, and the facade uses that class to draw the contents of its inspector.\r\n\r\nIf no inspector is defined, the facade will draw the contents of the service's configuration profile. If the service uses no profile, the facade simply says no inspector is defined for the service.\r\n\r\nI've created the following custom inspectors:\r\n- FocusProvider\r\n\r\n![PointerInspector](https://user-images.githubusercontent.com/9789716/55435363-88a78200-554e-11e9-9900-f68f8a0564a4.PNG)\r\n\r\n- HandJointService\r\n\r\n![HandJointInspector](https://user-images.githubusercontent.com/9789716/55435365-8ba27280-554e-11e9-935e-f9bcbf45ff85.PNG)\r\n\r\n- SpatialAwarenessSystem\r\n\r\n![SpatialObservers](https://user-images.githubusercontent.com/9789716/55435367-8d6c3600-554e-11e9-8645-9e8309f2fd1b.PNG)\r\n\r\n\r\nPerformance\r\n---\r\nFacades are only used in editor so they won't affect runtime performance. Impact should be minimal but needs to be formally tested. Devs can opt out of using them by un-checking a 'Use Service Inspectors' field in the MRTK configuration profile.\r\n\r\nIssues\r\n---\r\n- After starting / stopping a scene, facades vanish until the scene is started again or until recompilation occurs. (This may be an issue with services rather than facades.)\r\n\r\n#3545 """
428432704,3772,b'Gate the articulated hand update loop behind a platform check.',"b""The new hand pose information is only present on universal contract version 8 and up.\r\n\r\nThis was found by looking at ildasm against the previous SDK (i.e. version 7) and the latest drops of the new one (version 8). Note that other things in this file still exist in previous versions (i.e. version 2 actually has the SpatialInteractionManager defined).\r\n\r\nThis is primarily to ensure that we don't try to exercise an unsupported API if we end up getting this far (we also shouldn't because this object should only get instantiated in cases where hands are detected).\r\n\r\nIt probably makes sense to restructure this in the future, however, to make it so that we never try to call UpdateControllerData in the case that the underlying APIs this file requires aren't supported (so maybe each controller can optionally expose a overloadable method which configures whether or not they will even work against the current platform).\r\n\r\nThe idea above is a slightly larger change than I think we want to do for RC1."""
428423359,3769,b'Bring back support for the .NET backend',"b""A couple of changes in the HL2 payload regressed the .NET backend support. Primarily this came from:\r\n\r\n1) Usage of some new C# 7.1 features that don't seem to be supported in the 7.0 version that the .NET backend has.\r\n2) Some weird ways in which the generated C# projects are created with respect to test assemblies - TestFixture_01_SimplePlayModeTest.cs gets generated as a c# project (when doing .NET backend + build c# projects) even though it's actually a test only assembly. With Unity deprecated the .NET backend it's probably easier for us to workaround this (until it's fully dead)."""
428399150,3768,b'Spatial Awareness architecture documentation revision',b'Brings the spatial awareness architecture documentation up to the RC1 code base.\r\n\r\nOld images removed / refreshed. Old interface/class/type pages replaced with cross-references to official API docs.\r\n'
428325678,3766,b'Fix error when auto-configuring input data provider',"b'There was a missing ""break;"" statement that was causing the input provider to fall through and execute code at the wrong time, resulting in an ArgumentException related to ""control 4\'2 position"".\r\n\r\nAs part of the validation, the input profile was updated to add back the dictation provider.\r\n'"
428274015,3765,b'Added possibility to disable hand mesh and joint visualization',b'including buttons in sample scene to toggle hand joint and hand mesh'
428272826,3764,b'Create DictationHandler script for easy access to dictation service',"b'Created a script to provide basic access to the dictation service without having to resort to scripting, like SpeechInputHandler does for the speech service.'"
428266966,3763,b'Small fixes for PressableButton',b'Overview\r\n---\r\nMark eventData as being used in PressableButton and remove creation of stale finalMarker object\r\n'
428178155,3761,b'fixed hand mesh loading on hl2',b'changed flag for gltf model load fail - default case is now that we load the model by calling the base class TryRenderControllerModel. \r\nfixes model loading for devices that use the articulated hands controller'
428168360,3760,b'First pass at input documentation',"b""General concepts and articles on the most important features.\r\n\r\nThings I'm aware are missing, to be included in following PRs:\r\n\r\n- Dictation: flesh out article and add example scene\r\n- Gaze\r\n- Articulated Hands\r\n- Eye Tracking\t\t\t\r\n- Controllers\t\t\r\n  - Visualization\r\n  - How to attach something to a controller without writing code\r\n- Gestures: example scene?\r\n- Pointers: How to handle pointer events without writing code/implementing a handler? Should we add a pointer handler script similar to the speech handler one that raises UnityEvents for our pointer events?\r\n- Input Actions: action rules\r\n\r\n\r\n"""
427959918,3756,b'Fix test failure (core 04_09) related to requesting the wrong interface type',b'This was a side effect of separating IMixedRealityDataProvider from IMixedRealityExtensionService.'
427903309,3755,b'Merge the HL2 payload into mrtk_development',"b""Brings the latest HL2 payload up into mrtk_development.\r\n\r\nNote that there is still an open issue where the articulated hands visualization (NOT the simulator, the actual hands) doesn't work, which is being looked into."""
427899125,3754,b'UI Ray-cast distances should take into account the near clip plane - MRTKv2',"b'This is an equivalent change to pull request [#3666](https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3666) which was for HTK, but this is for MRTKv2.\r\n\r\nRay-cast distance calculations should take into account that ray-casts from the UI camera originate from the near clipping plane of the camera since Unity 2017.4.3 and newer versions.\r\n\r\nOverview\r\n---\r\n\r\nMRTK/HTK does not currently calculate the distance to a UI canvas correctly ([#3359](https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3359)) or correctly work out the depth of UI objects when trying to determine if a UI or physics object should get focus ([#3322](https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3322)). This is only an issue in Unity 2017.4.3 and later versions due to the introduction of the Unity fix [934908](https://issuetracker.unity3d.com/issues/using-canvas-on-world-space-or-camera-buttons-are-not-clickable-if-pos-z-is-set-less-than-zero)\r\n\r\nChanges\r\n---\r\n\r\nMRTKv2 claims to support Unity 2018+ so I have assumed that there is no need to variant the code to support versions prior to Unity 2017.4.3.\r\n\r\nLines 783 resolves issue [#3359](https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3359)\r\nLines 847 and 855 are also needed to resolve issue [#3322](https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3322)\r\n'"
427895733,3753,b'Merge mrtk_development into mrtk_development_hl2',b''
427893538,3752,b'Merge latest mrtk_development into mrtk_development_hl2.',b''
427863764,3751,b'Update MRTK profile screenshots in documentation',b'Overview\r\n---\r\nUpdates two screenshots in readme docs to match current inspector.'
427840069,3750,"b""Adds 'Try Repair' to SystemType property drawer with missing class reference""","b""Overview\r\n---\r\n![TypeToReference](https://user-images.githubusercontent.com/9789716/55349056-90dbc080-546d-11e9-9d4f-669553f41fc8.PNG)\r\n\r\nWhen a type reference is lost in a SystemType field - common when refactoring namespaces - a 'Try Repair' button is displayed. Clicking it searches filtered types by name. If a matching name is found, that type reference is used.\r\n\r\nIf no types are found you're altered with a dialog. If multiple types are found, a utility window is launched so you can select which type to use.\r\n\r\n- Fixes: #3672 #3693 """
427830596,3749,b'Fix MRTK Pointer Unity UI interaction ',b'Overview\r\n---\r\n- Add MixedRealityInputModule inheriting from StandaloneInputModule to add MRTK pointer events for Unity UI.\r\n\r\n- Introduce reliable mechanism for a pointer to detect when its current pointer target is about to change.\r\n    - Remove raycast code-duplication (and thus knowledge about FocusProvider implementation) in PokePointer. We need to make sure to also take into account Unity UI graphics raycasts.\r\n\r\n- Make all objects of a NearInteractionTouchable subtree touchable (needed for Unity UI).\r\n    \r\n'
427811331,3748,b'Extension Service Creation Wizard',"b""Overview\r\n---\r\nThis PR adds a wizard to help newcomers create a basic extension service.\r\n\r\nMaking the transition from singletons to services can be difficult. This wizard can supplement our other documentation and sample code by enabling devs to create new services with (roughly) the same ease as creating a new Monobehaviour script.\r\n\r\nTesting Goals\r\n---\r\nLooking for general feedback on the creation process. Does the tool make clear what you're doing and why?\r\n\r\nAlso looking for people to break the process any way they can think of - closing the window at odd moments, launching new windows, deleting created components halfway through the process - anything you can do to trip it up and cause errors. The wizard doesn't necessarily need to recover from odd behavior but it should be able to fail gracefully.\r\n\r\n\r\nProcess\r\n---\r\nThe wizard is launched from the MixedRealityToolkit menu:\r\n\r\n![CreateExtensionServiceMenu](https://user-images.githubusercontent.com/9789716/55343514-1b1d2800-5460-11e9-9888-6bd255747ca7.png)\r\n\r\nWizard introduces the concept of services and links to documentation. Then it asks devs to choose a name. Class name collisions are automatically detected:\r\n\r\n![CreateExtensionServiceStart](https://user-images.githubusercontent.com/9789716/55343267-96320e80-545f-11e9-9e2f-8db0c04b45a2.png)\r\n\r\nThe purpose of each asset is briefly introduced and output locations are chosen:\r\n\r\n![CreateExtensionServiceOutput](https://user-images.githubusercontent.com/9789716/55343614-51f33e00-5460-11e9-9a44-7fdf9be29035.PNG)\r\n\r\nAt this point assets are generated and the wizard waits for recompilation.\r\n\r\n![CreateExtensionServiceAssets](https://user-images.githubusercontent.com/9789716/55343608-4ef84d80-5460-11e9-9b8a-cad7118fb6ac.PNG)\r\n\r\nGenerated service scripts include some prompts similar to new Monbehavior scripts:\r\n```\r\nnamespace Microsoft.MixedReality.Toolkit.Extensions\r\n{\r\n    [MixedRealityExtensionService(SupportedPlatforms.WindowsStandalone|SupportedPlatforms.MacStandalone|SupportedPlatforms.LinuxStandalone|SupportedPlatforms.WindowsUniversal)]\r\n    public class NewService : BaseExtensionService, INewService, IMixedRealityExtensionService\r\n    {\r\n        private NewServiceProfile newServiceProfile;\r\n\r\n        public NewService(IMixedRealityServiceRegistrar registrar,  string name,  uint priority,  BaseMixedRealityProfile profile) : base(registrar, name, priority, profile) \r\n        {\r\n            newServiceProfile = (NewServiceProfile)profile;\r\n        }\r\n\r\n        public override void Initialize()\r\n        {\r\n            // Do service initialization here.\r\n        }\r\n\r\n        public override void Update()\r\n        {\r\n            // Do service updates here.\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nFinally, devs can optionally choose to register their service in the current profile:\r\n\r\n![CreateExtensionServiceRegister1](https://user-images.githubusercontent.com/9789716/55343851-d34ad080-5460-11e9-8a9e-1a0f97b01a3f.PNG)\r\n\r\nIf they choose to do so, the service is registered and they are given sample code showing how to access their service:\r\n\r\n![CreateExtensionServiceRegister3](https://user-images.githubusercontent.com/9789716/55343884-e8276400-5460-11e9-9bb2-5c1bb2234b7d.PNG)\r\n\r\n![CreateExtensionServiceRegister2](https://user-images.githubusercontent.com/9789716/55343881-e5c50a00-5460-11e9-8542-15ad58ca0452.PNG)\r\n\r\nIssues\r\n---\r\n- You can't return to the wizard to register the service later. Since registration is the most potentially confusing step I feel the wizard should be able to handle this somehow.\r\n- I'm sure there are ways to generate a service that fails to compile. In the event that it doesn't compile the wizard will display an error but it won't be able to recover.\r\n- Doesn't support automatically common extension service interfaces like IDataProvider. This should be a goal.\r\n- Doesn't support implementing base service interfaces like IInputService. I'm not sure this should be a goal, though."""
427789077,3747,b'Added some useful attributes from Longbow.',"b'Overview\r\n---\r\nAdded some useful attributes from Longbow.\r\n\r\nChanges\r\n---\r\nAdded Help, TagProperty, and ScenePick.\r\n\r\n- Fixes: # .\r\n'"
427786053,3746,b'Added some useful attributes from Longbow.',"b'Overview\r\n---\r\nAdded some useful attributes from Longbow.\r\n\r\nChanges\r\n---\r\nAdded Help, TagProperty, and ScenePick\r\n\r\n- Fixes: # .\r\n'"
427775124,3745,b'Added the Game Object Pool classes from Longbow into MRTK.',"b'Overview\r\n---\r\nAdded the Game Object Pool classes from Longbow into MRTK.\r\n\r\nChanges\r\n---\r\nAdded GameObjectPool, GameObjectCreator, IGameObjectCreatorHandler, GenericPrefabInstanceCreator\r\n- Fixes: # .\r\n'"
427754014,3744,b'Moved some extensions from Longbow into MRTK. Merged those that alrea\xe2\x80\xa6',"b'Overview\r\n---\r\nMoved some extensions from Longbow into MRTK. Merged those that already exist in MRTK.\r\n\r\n\r\nChanges\r\n---\r\nAdded CanvasExtensions and Texture2DExtensions.\r\nAdded new functionality to ArrayExtensions, CameraExtensions, and Color32Extensions.\r\n\r\n- Fixes: # .\r\n'"
427737614,3743,b'Input simulation docs',b'Overview\r\n---\r\nUser documentation for Input Simulation features.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
427732554,3742,b'Update services to manage their WSA capabilities',b'Overview\r\n---\r\nServices that depend on specific WSA capabilities now properly set and unset them when turned on and off in the configuration profile.\r\n\r\n- MixedRealitySpatialAwarenessSystem\r\n  - SpatialPerception\r\n- WindowsSpeechInputProvider\r\n  - Microphone\r\n- WindowsDictationInputProvider\r\n  - Microphone\r\n  - InternetClient\r\n\r\nChanges\r\n---\r\n- Fixes: #3695\r\n'
427729994,3741,b'Update #if wrappings around speech providers',"b'Overview\r\n---\r\nThe speech and dictation providers had their constructors wrapped inside `#if` statements, which seemed to be preventing their docs from being properly generated. I moved the statements around to reduce the scope they were wrapping.'"
427211664,3739,b'The finger cursor should align the inverse surface normal',b'Overview\r\n---\r\nThe finger cursor was aligning with the surface normal rather than the inverse surface normal. Normally not an issue because the cursor looks the same front & back but when the cursor moves from finger alignment to surface alignment it does some extra rotation.\r\n'
427208827,3738,b'Service registration (#3545) part 3 - systems load data providers',"b'This PR is a continuation of the work on #3545.\r\n\r\nChanges include:\r\n- Add IMixedRealityServiceConfiguration\r\n- Add MixedRealityInputDataProviderConfiguration and MixedRealitySpatialObserverConfiguration\r\n- Rename BaseDeviceManager to BaseInputDeviceManager and update constructor args\r\n- Update the input system profile to contain the list of input device managers\r\n- Update the input system implementation to initiate load/unload of data providers\r\n- Add a spatial awareness profile to contain the collection of observers\r\n- Update the spatial awareness system to initiate load/unload of observers\r\n- Fix bugs in Enable for Speech (not checking for existing recognizer) and Dictation (possible re-registering of event handlers)\r\n- Add hand joint service and input simulator to input data providers\r\n- IMixedRealityDataProvider no longer inherits from IMixedRealityExtension service as they require a service (and are now registered by their parent service)\r\n- Limit registered services profile to only listing extension services\r\n- Rename ""Additional Service Provider"" to ""Extension Services"" in the Toolkit config inspector\r\n- Remove all data providers from the registered services profile'"
427204879,3737,b'Bugfix: Pan and scroll interactions in the Hands Demo are not working with hand rays ',b'Overview\r\n---\r\nBugfix: Pan and scroll interactions are not working with hand rays.\r\n'
427177918,3736,b'Example scene update to use fixed App Bar',b'Overview\r\n---\r\nUpdating the example scene to use App Bar which is now fixed (in #3730)\r\n\r\nChanges\r\n---\r\nUpdated the example scene. (no code change)\r\n\r\n![2019-03-29 14_03_29-Window](https://user-images.githubusercontent.com/13754172/55262681-c729fd80-522b-11e9-9eb7-ca1ba0345f6f.png)\r\n'
427165042,3735,b'Merge the latest mrtk_development changes down into the _hl2 branch',"b""There have been a few changes that have gone into mrtk_development (i.e. .NET fixes and some build script fixes). I'm bringing this down into mrtk_development_hl2 to reduce the deltas between the two."""
427160722,3734,b'Remove usage of the non-overloaded null operator on the camera cache.',"b'The Camera object is a unity object, which actually must be checked using the == null or != null operator explicitly (because Unity) overloads that operator. It\'s possible for a camera to be destroyed but not yet null (i.e. the unity concept of the the camera is dead but the object is still non-null). The ?? operator skips Unity\'s overloading, and will sometimes return ""it\'s not null"" which is technically true but still not safe to use from a Unity perspective.'"
427103626,3733,b'Tighten up the intro',b'- Remove redundant bullets\r\n- Pull up supported platforms section\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
427097806,3732,b'Spectator View Spatial Localization Abstraction',"b' Added Spatial Localization abstraction, and created two classes against it showcasing the abstraction and that will be used as part of later refactor of SpecatorView.'"
427048296,3731,b'Adding new README files',b'Overview\r\n---\r\nAdding new README files\r\n\r\nChanges\r\n---\r\nNew README files added to /Documentation\r\n'
427047468,3730,b'Fixing Un-Linked events in AppBar Buttons',b'Overview\r\n---\r\nFixing Un-Linked events in AppBar Buttons\r\n\r\nChanges\r\n---\r\nButton events got un-linked after namespace change.\r\n'
426693930,3726,b'Spectator view cleanup2',b'Overview\r\n---\r\nAddress comments remaining for https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3698\r\n'
426693568,3725,b'Pointer focus dispatch rework',"b""Overview\r\n---\r\nFrom @julenka:\r\n\r\nThis PR fixes a bug in the input system where pointers are dispatching pointer events to all other pointers attached to an input source, which causes a large number of null pointer exceptions and also duplicate events to be sent to the system.\r\n\r\n## Explanation of the Bug\r\nCurrently MixedRealityInputSystem dispatches any event `E` to all pointers attached to `E`.InputSource. Therefore, when a Pointer wants to send a PointerDown event to the object it is focusing, instead the following happens when trying to dispatch pointer event `E` from pointer `P`:\r\n\r\n1. Initialize `E` with information about pointer `P` so that `eventData.Pointer` returns `P`\r\n1. Get the InputSource `S` attached to pointer `P`\r\n2. For all pointers `P2` on `S`...\r\n  a. If `P2` is focused on some object `O`\r\n  b. Dispatch pointer event `E` to `O`, **even if P2 ~= P.**\r\n\r\nThis causes two problems when you have multiple pointers on an input source, for example the multiple pointers we have on fully articulated hands:\r\n\r\n1. Each PointerDown event will get sent N times, where N = # pointers attached to a source.\r\n2. If one pointer is focused on something, but another is not, then in step 1, `E.Pointer` is set to something that doesn't actually have object focus (`E.Pointer.Result.Object == null`). Then, if something tried to access `E.Pointer.Result.Object` it will get null pointer. This violates an assumption that for any PointerEvent `E2` being dispatched, `E2` is focusing some object.\r\n\r\n## Explanation of the Fix\r\nWhen dispatching a pointer event, this event should only be sent to global event listeners and the object being focused by the pointer, NOT all other pointers attached pointer.InputSource.\r\n\r\nCreate a new method `HandlePointerEvent` that should be used to dispatch all events for pointers (which are the only things that can provide object focus). This method only dispatched events to global handlers and the object being focused, not to other pointers on the input source.\r\n\r\nAlso refactor the code a bit to avoid duplicate code."""
426689247,3724,b'Tooltips Fixes / Text Mesh Pro Assets',b'Overview\r\n---\r\nUpdates Tooltip prefabs to use more performant settings by default and replaces their TextMesh components with TextMeshPro components.\r\n\r\nAlso brings in some related Text Mesh Pro assets and fixes:\r\n- Single Pass Instanced compatible TMP shader from @Cameron-Micka \r\n- Standard Text Mesh Pro font assets from @cre8ivepark \r\n\r\nOther improvements / fixes:\r\n- Tooltips now validate their hierarchy and auto-generate any missing transforms\r\n- Removed circular dependency that caused ToolTipConnector to add a second ToolTip component\r\n- Added handles for manipulating pivot and anchor\r\n- Added Bezier ToolTip prefab\r\n\r\n![ToolTips](https://user-images.githubusercontent.com/9789716/55189893-fbce8400-515b-11e9-83c5-52124388632f.PNG)'
426685397,3723,"b'Update SpectatorViewSetup.md to include info on ARFoundation, ARCore and ARKit'","b'Update readmes to call out unity package dependencies.\r\n\r\nOverview\r\n---\r\nUpdate SpectatorViewSetup.md to include info on ARFoundation, ARCore and ARKit'"
426280380,3721,b'Sync mrtk_release -> mrtk_dev',b'Overview\r\n---\r\n@Yoyozilla has been doing README updates in mrtk_release. This PR syncs them into mrtk_dev.'
426257152,3720,b'Remove OverrideFocusedObject',"b""Overview\r\n---\r\n`OverrideFocusedObject` was a holdover from one of the original HoloToolkits' input dispatch.\r\nWith the (long ago) additions of global listeners, the modal listener stack, etc, this isn't really needed anymore (open to disagreements though!)."""
426254584,3719,b'Fix focus bug in MixedRealityInputSystem.cs',"b'Overview\r\n---\r\nOn source lost, we were unregistering from the FocusProvider before sending the event. This led to focused objects not properly receiving source lost events.'"
426253905,3718,b'Assorted formatting and comment updates',"b""First pass of cleanup that wasn't entangled in feature updates."""
426197583,3717,b'Add useful properties to MixedRealityPose',"b'Overview\r\n---\r\nAdds `Forward`, `Up`, and `Right` to MixedRealityPose.'"
426158664,3716,"b'Change menu option ""Configure..."" to ""Add to Scene and Configure...""'",b'Overview\r\n---\r\nChanges the **Configure...** menu option to **Add to Scene and Configure...** to make its function clear for first-time users. Also updates documentation & images.\r\n\r\n![MenuUpdate](https://user-images.githubusercontent.com/9789716/55107793-68c81800-508f-11e9-8e85-180695cfdbfe.png)\r\n\r\n'
426096009,3714,b'Event system fix where the event listeners array was being modified while an event was getting dispatched',"b'Fix a bug in input system where the event listeners array was being modified while an event was getting dispatched, because of nested dispatch.'"
426087711,3713,b'Add DrawPoint to DebugUtilities',b'Overview\r\n---\r\nAdds a debug utility to draw a point in the Scene view using Unity Debug.DrawLine'
426087585,3712,b'Update',b'Added link to design guidances on MS Dev pages. \r\nRenamed Conceptual to How-to to align with the actual naming on the page\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
426022661,3711,b'added new doc structure',b'-added new doc structure\r\n-removed obsolte toc entries and files / simplified\r\n-restructured and documented docfx.json build file \r\n-added placeholder for coming soon content\r\n'
425906847,3708,b'Mrtk base controller changes',"b'I changed a couple of the already existing properties to forward either their backing instance or null. This makes way for using Null coalescing and conditional operators, in this particular example the BaseController class.\r\n\r\n- Starts fixing: #3707  .\r\n'"
425743248,3706,b'Add md files for spectator view components',b'Overview\r\n---\r\nAdd readme files to the spectator view feature branch\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
425726484,3705,b'Mrtk development - merge into feature/spectatorView',b'Overview\r\n---\r\nMerge mrtk_development payload into feature/spectatorView\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
425723916,3704,b'Mrtk development',b'Overview\r\n---\r\nMerge mrtk_development into feature/spectatorView to prepare for review\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
425715967,3703,b'Add new UWP API contracts to WindowsApiChecker',b'Overview\r\n---\r\nAdd runtime validators for additional UWP API contract versions.\r\n\r\nV7 is the October 2018 Update.'
425712022,3702,"b""Fix BaseFocusHandler's events / interfaces""","b""Overview\r\n---\r\nIn #3113, `IMixedRealityFocusHandler` was changed to no longer be a `IMixedRealityFocusChangedHandler`, but BaseFocusHandler, which consumes events from both interfaces, didn't have `IMixedRealityFocusChangedHandler` added. Since then, this script has silently not been receiving events it depends on."""
425710677,3701,b'Add public accessors for BaseCursor fields',b'Overview\r\n---\r\nAdd public accessors for BaseCursor fields. This will be used for future cursor types.'
425709545,3700,b'Prefer DateTime.UtcNow over DateTime.Now',"b""Overview\r\n---\r\nIn previous performance investigations we've found that using DateTime.Now adds significant overhead especially when used in the Update() loop. [Others have hit the same issue](https://stackoverflow.com/questions/1561791/optimizing-alternatives-to-datetime-now).\r\n\r\nPrefer using DateTime.UtcNow unless you actually need the localized times (a reason may be wanting to show the current time in the user's time zone). If you are dealing with relative times (i.e. the delta between some last update and now), it's best to use DateTime.UtcNow to avoid the overhead of doing timezone conversions."""
425639656,3698,b'Add *.md files and summary comments to Spectator View codebase and clean up warnings',b'Overview\r\n---\r\nThis review is in preparation for adding spectator view code to the main mrtk_development branch. It includes the following:\r\n1) All public or serialized fields now have summary comments and tooltips\r\n2) Some classes associated with HoloLensCamera were split into separate files for easier legibility\r\n3) Warnings were disabled for some unused events based on interface definitions. \r\n4) Added *.md files for all new components and moved items off the wiki.\r\n5) Components subject to change (All extensions other than PhotoCapture) have had their namespaces updated to contain Experimental\r\n6) Added an MRTK configured example scene\r\n\r\nValidated docfx build locally\r\n'
425582224,3696,b'Minor changes to ensure MRTK compiles with .NET',b'Overview\r\n---\r\nMinor changes to ensure MRTK compiles with .NET in Unity 2018.3.3+. Logic is identical.\r\n\r\nChanges\r\n---\r\n- Fixes: #3689\r\n- Reinforces: #3656'
425383252,3691,"b""Component extensions use == null instead unity's Object.bool""","b'Overview\r\n--- After switching to unity 2018.3.9f1 I experienced missing canvas utility scripts on our prefabs. Trying to set them manually didn\'t work as it seems that EnsureComponent in ComponentExtensions.cs finds already a component but does not check if it is already destroyed.\r\n\r\nTo be honest, the unity docs about ""exists"" checks are confusing me.\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'"
425254518,3690,b'fix wrong assignment',b'Overview\r\nfixes simple code mistake\r\n'
425087133,3686,b'Reorganize code and add asmdef files in preparation for release',b'Overview\r\n---\r\nThis review refactors code into new namespaces/dlls with the intention of allowing for more code reusability.\r\n\r\n1) ScreenRecording services were broken into their own extension component\r\n2) MarkerDetection interfaces were broken into their own extension component\r\n3) Sharing related interfaces were broken into their own extension component\r\n4) HoloLensCamera was broken into it own extension component (PhotoCapture)\r\n4) Spectator view classes were updated/relocated to reflect the new namespace choices\r\n5) .asmdef files were created for each of the components\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
425042650,3684,b'Add items to .gitignore file to avoid checking in nuget packages',b'Overview\r\n---\r\nSpectator View will likely begin to start consuming NuGet packages. This change is intended to avoid checking in any nuget related helpers or nuget package obtained dlls.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
425037003,3683,"b""Remove dependencies that shouldn't have been checked in""",b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
425034095,3682,"b""Adds 'Don't show this again' to toolkit startup warning""",b'Overview\r\n---\r\n![NoActiveToolkit](https://user-images.githubusercontent.com/9789716/54941743-d1c25b00-4eea-11e9-8676-0571081a307c.PNG)\r\n\r\nChanges\r\n---\r\n- Fixes: #3681 '
425016627,3680,b'Fix documentation changes to work with docfx generation',"b""Overview\r\n---\r\nFix documentation changes to work with docfx generation:\r\n1) Update crefs for classes outside of immediate namespace\r\n2) Move images declared in readme.md's to appropriate directory and fix references.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
424950033,3679,b'removed accidental /////',"b""must've typed in the wrong window , sry!\r\n"""
424935150,3678,b'fixed more doc link errors and added common errors section to dev doc guide',b'Overview\r\nfixed more doc link errors and added common errors section to dev doc guide\r\nremoved obj.meta files from last pr'
424860635,3677,b'fixed docfx errors',"b'fixed malformed tags, typos, missing namespace identifiers, wrong unity crefs / hrefs, obsolete toc entries'"
424655237,3676,b'Update again',b'Looks like I somehow overwrote one of my earlier updates.. updating again..\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
424415887,3674,b'App State Sharing Extension',"b""Overview\r\n---\r\nA stripped-down, MRTK-service-ified version of the AppState system proposed in #3210\r\n\r\nAppState\r\n---\r\nThe AppState service provides a means to synchronize a set of structs among connected users. That's it - it doesn't know or care about scene objects, and it's up to the dev to decide what info to synchronize and when.\r\n\r\nIf you want examples of other systems that can build on AppState to generate / manipulate scene objects, there are several in #3210.\r\n\r\nAppStateData / AppStateDataSubscriptions\r\n---\r\nThis is a Photon-specific implementation of the IAppStateData interface. IAppStateData is the conduit through which the AppState synchronizes data, and IAppStateDataSubscriptions is used to configure which users receive which data. I would like to remove the Photon dependency and use an MRTK networking service in place of these components.\r\n\r\nProfile Setup\r\n---\r\nThe profile inspector helps you search for and configure app state structs and (in the case of IL2CPP builds) state array types.\r\n\r\n![AppState](https://user-images.githubusercontent.com/9789716/54854317-c33c2f80-4caf-11e9-9a74-237569c2745f.PNG)\r\n\r\nOther Issues\r\n---\r\n- This PR has a dependency on Newtonsoft. That's a byproduct of the Photon dependency. I would like to eliminate both.\r\n- The connection process handled by PhotonServiceConnector is opaque and flakey. This is another issue that could potentially be solved by using an MRTK networking service."""
424397640,3673,b'Namespace fixes for - glTF Utilities based off of built in Unity Serialization',b'Overview\r\n---\r\nThis is a new pull request to address some namespace breaks related to https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3548\r\n\r\nChanges\r\n---\r\n- Fixes: #3595 .\r\n'
423887701,3671,"b""Fix exceptions deleting SpeechInputHandler's last keyword""","b""Overview\r\n---\r\nThe SpeechInputHandlerInspector doesn't properly delete the last keyword, since it tries to continue through displaying the keyword and ends up throwing exceptions:\r\n![image](https://user-images.githubusercontent.com/3580640/54777237-1ee2bc00-4bcf-11e9-836c-da016a4780cf.png)\r\n"""
423815624,3670,b'Modified Interactable to keep track of pointers using focus changed events',b'Use the `OnBeforeFocusChange` handler to keep track of all the pointers entering and leaving the interactable instead of using `OnFocusEnter/Exit` as those are only triggered for the first pointer entering/last exiting.\r\n\r\n- Fixes: #3577 .\r\n'
423697188,3668,b'Add scenes list to command line build',b'Adding scene list parsing for command line build'
423488456,3667,b'Service Registration (#3545) - Part 2 [Breaking Change for Service Implementors]',b'This part of the service registration (#3545) work includes:\r\n\r\n- Removing the need for BaseServiceWithConstructor by updating the BaseExtensionService and BaseDataProvider classes\r\n- Add BaseCoreSystem class and inherit from it for all core system services\r\n- Update core system services to use the data provided (profile and service specific data) to initialize\r\n- Focus provider now inherits from BaseDataProvider\r\n- Gaze provider gets data that previously came from the MixedRealityToolkit.Instance directly from the input system when instantiated\r\n\r\nThis change removes most of the hard-coded references to MixedRealityToolkit.Instance.\r\n\r\nNote: Platform providers and the InputSystemGlobalListener were _not_ updated as part of this change. They will be handled in part 3.'
423470603,3666,b'UI Ray-cast distances should take into account the near clip plane',b'Ray-cast distance calculations should take into account that ray-casts from the UI camera originate from the near clipping plane of the camera since Unity 2017.4.3 and newer versions.\r\n\r\nOverview\r\n---\r\n\r\nMRTK/HTK does not currently calculate the distance to a UI canvas correctly (#3359) or correctly work out the depth of UI objects when trying to determine if a UI or physics object should get focus (#3322). This is only an issue in Unity 2017.4.3 and later versions due to the introduction of the Unity fix [934908](https://issuetracker.unity3d.com/issues/using-canvas-on-world-space-or-camera-buttons-are-not-clickable-if-pos-z-is-set-less-than-zero)\r\n\r\nChanges\r\n---\r\nCurrently the original MRTK claims to support Unity 2017.2+ so I have assumed we need to variant the code based on the version of Unity to only fix affected versions.\r\n\r\nI added the definition of UNITY_2017_4_3_OR_NEWER so that the existing behavior can be preserved for unaffected Unity versions. Unity only includes _OR_NEWER macros for year.x versions but this change appeared in Unity 2017.4.3 so I have added a definition for UNITY_2017_4_3_OR_NEWER combining existing definitions.\r\n\r\nLines 646 - 650 resolves issue #3359 \r\nLines 697 - 701 and 709 - 713 are also needed to resolve issue #3322\r\n\r\n- Fixes: #3359 & #3322\r\n'
423442475,3665,b'fixed paths in dropdown generation',b'fixes broken links in dropdown\r\n'
423411356,3664,b'Add a basic webrtc extension (#1)',"b""* Add a basic webrtc extension \xe2\x98\x8e\xef\xb8\x8f \r\n* Source for this extension is derived from https://github.com/bengreenier/webrtc-unity-plugin\r\n  - Which is, in turn, dependent on the https://github.com/webrtc-uwp/webrtc-uwp-sdk project, specifically the https://github.com/webrtc-uwp/webrtc/tree/releases/m71/examples/unityplugin example codebase. We have also made some modifications to that example to support uwp.\r\n\r\nOverview\r\n---\r\n\r\nThis addresses #3590 by providing a basic extension to encapsulate webrtc a/v/d capabilities on `winuwp` and `win32` platforms. It includes a basic signaling example based on https://github.com/bengreenier/node-dss, an example scene (and prefab containing the actual example object logical layout).\r\n\r\nWe had some concerns about making sure we do the right thing on the licensing side as well (see original proposal) so we'll need to ensure we've done that work before we take this.\r\n\r\n@vladkol this includes the signaling interface as discussed - please let me know if that meets your needs or needs further adjustment.\r\n\r\nChanges\r\n---\r\n+ Rebased from https://github.com/bengreenier/MixedRealityToolkit-Unity/commits/feature/WebRTC - that individual commit context may be useful for reviewers, unsure.\r\n"""
423410318,3663,b'fixed version dropdown for github.io doc page',b'Overview\r\n--- moved inclusion of shared javascript and css into partial file to be able to resolve project root with docfx vars\r\n--- deleted obsolete files\r\n--- changed paths in script that generates dropdown from absolute to relative\r\n\r\n'
423406097,3662,b'MeshLineRenderer improvement',b'Overview\r\n---\r\nUses a different method to render instanced meshes in MeshLineRenderer. Less finicky both at runtime and in editor.\r\n\r\n- Removed command buffers\r\n- Removed hidden mesh / OnWillRenderObject call\r\n- Adds point distribution mode to base line renderer class'
423404573,3661,b'Fix default port values for udp broadcast ui',"b""Overview\r\n---\r\nsmall fix\r\n\r\nRight now if you type in invalid numbers for this ui dialogue, the default port values get set to a number that isn't the udp broadcasting components default value. This should make the process less confusing.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
423317553,3660,b' added section for versioning to mrtk dev doc guide',b'Overview\r\n--- added section for describing the steps to perform when we release a new mrtk version\r\n--- added guide for CI \r\n\r\n'
423269758,3659,b'Add switch for scripting backend',b'Add command line switch to change the scripting backend in command line builds. This is needed in order to build using .NET backend on CI. \r\n'
422973440,3658,b'Refactor/mrtk namespaces update',"b'Overview\r\n---\r\nThis change contains a holistic refactor of namespace names with the following approach:\r\n- Prefix all with Microsoft.MixedReality.Toolkit\r\n- Simplify namespace names by grouping them under feature areas (Input, SpatialAwareness, Boundary, UI, <root>)\r\n- Group all editor code into Microsoft.MixedReality.Toolkit.Editor.<FeatureArea>\r\n- Separate some platform specific namespaces in format Microsoft.MixedReality.Tooklit.<Editor?>.<Platform>.<FeatureArea>\r\n\r\nBuilt iOS, UWP, Editor, Standalone to confirm compile errors. Opened all scenes, and ran all unit tests.\r\n\r\nExcel with mappings:\r\n[MRTK-Classes-NS-Update.xlsx](https://github.com/Microsoft/MixedRealityToolkit-Unity/files/2985732/MRTK-Classes-NS-Update.xlsx)\r\n\r\nRelated issue: #3546 '"
422945581,3654,b'added support for multiple doc versions',b'Overview\r\n--- developer docs now have a dropdown in the main navigation that allows to switch between several versions'
422461216,3651,b'cleanup',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
422459970,3650,b'Mrtk development',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
422441814,3649,b'update recommended unity version',b'Update to Unity 2018.3.9f1'
422441477,3648,b'Fix up the README.md layout issues',"b'The previous change added some new information into the middle table, which broke the table formatting (table content must be contiguous otherwise it ends up just rendering the | and ---- values as-is)'"
422407876,3647,b'Enable using networking component for multiple components + support multiple scenes',b'Overview\r\n---\r\nSpectator view has had some limitations exposed by community members:\r\n1) Its not easy to use the current networking component for sending state updates other than for the marker spatial coordinate system payloads\r\n2) Its not clear how to get spectator view working with multiple scenes\r\n\r\nThis review adds some functionality to begin improving this experience:\r\n1) The networking interface now has a priority flag for sending payloads. Non spatial coordinate system payloads can be marked as critical so that they are forced to send.\r\n2) A SceneRoot spectator view object was created so that when switching scenes. This makes it possible for the SceneRoot to be dynamically set when switching between scenes.\r\n3) SpectatorView now calls DontDestroyOnLoad for its game object so that SpectatorView components remain across scenes.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
422211496,3646,b'MRTK Fix Raycast sorting',"b'Overview\r\nThe Ray that actually hits an object was not adjusted in length. Therefore the check wether a hit UI element should override the physics result always turned out to be true if distances were below the Rays Length, which in case of the gaze is 10 units by default.\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #3645\r\n'"
421943338,3643,b'Reduces redundant code in MixedRealityToolkit',b'Overview\r\nA lot of code is copy and pasted. This reduces the code paths to one\r\n'
421725330,3642,b'Update README.md',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
421608696,3640,b'Service registrar interface (#3545 part 1)',b'Overview\r\n---\r\n* Add IMixedRealiyServiceRegistrar interface\r\n* Update MixedRealityToolkit component to implement the new interface\r\n* Improve consistency with regards to static vs instance methods/properties (ex: now need .Instance for both Register and Unregister calls)\r\n* Clean up some unused method args \r\n\r\nVerified using Solver demo scene and unit tests\r\n\r\nNOTE: You may need to delete the Library folder after taking this change.\r\n\r\n[Added for clarity]\r\nThis is the first in a series of changes related to providing flexibility for customers to implement their own service locator object / service containers.'
421583111,3638,b'Mrtk avoid unity editor bug',"b""Overview\r\nThe Unity Editor still detects a motion controller during the first frame when it was active during the last run regardless of it being now turned off or not. You'd need a second run to start with no controllers detected at all. Actual detection always happens a couple of frames later.\r\nIt's save to ignore the detection during the first frame altogether\r\n\r\nUnity case 1137312\r\n"""
421443900,3635,b'Introduced a Pre Services Update step for the registered services',b'Overview\r\nInputDevices need to move prior to the FocusProvider performing all the Raycasts. This introduces this necessary step.\r\n\r\nChanges\r\n---\r\n- Fixes part of #3614\r\n'
421425572,3634,b'MRTK Reverts LateUpdates',"b""Overview\r\nUnder the assumption Updates were under a race condition with the MRTK these were changed. Apparently they're not, because the MRTK has its script execution order set to -100 (prior to regular Updates).\r\nThis means this is save\r\n\r\n\r\nChanges\r\n---\r\n- Reverts: #3620, #3625 .\r\n"""
421304795,3633,b'Rename examples assemblies to match naming guidelines',"b""Overview\r\n---\r\nSome assemblies weren't conforming to the style implemented in #3354 (`.` vs `-`).\r\n"""
421295223,3632,b'Updates the default MRTK project settings to use Single Pass Instance Rendering',"b""As part of working with a number of customers, we've found that many people are using the default Multi Pass rendering mechanism, which is a slow way of rendering.  We've seen in more complex scenarios that this can lead to slowdowns of 5ms per frame.\r\n\r\nWe should also author a perf doc to recommend setting this value in customers' projects (along with other things like disabling the included visual profiler when doing perf measurements)"""
421278337,3631,"b'Extracted the TeleportSystem enabled check into a property. Also, mad\xe2\x80\xa6'","b""Overview\r\n---\r\nThis is a follow up to the previous PR with one more change based on Will's comment:\r\n\r\nExtracted the TeleportSystem enabled check into a property. Also, made use of newInstanceBeingInitiali\r\nzed in MRTK in Debug.Assert to both get rid of build warning and also have an appropriate assert."""
421267432,3630,b'Enable .NET backend scripting support',"b'Given that we have customers who are migrating and need to continue to work on the .NET backend, we need to keep supporting this until Unity itself gets rid of .NET backend support.\r\n\r\nThis change is broken up into some less complex things (which we will describe first) and some more complex things (serializing actual assembly types instead of doing runtime based reflection).\r\n\r\nNote that this is actually a breaking change for people who have defined their own assets that use the interactable based theme/event/state systems. The way to migrate is to do the similar .asset/.unity filechanges included in this PR (i.e. adding a proto field that is the AssemblyQualifiedName). My hope is that I might be able to just write a migrator script to make this easier.\r\n\r\nLess complex things:\r\n[Certain Types APIs](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.memberinfo.getcustomattributes?view=netframework-4.7.2#System_Reflection_MemberInfo_GetCustomAttributes_System_Type_System_Boolean_) aren\'t supported in UWP .NET, but thankfully have a workaround (i.e. getting the type info and going from there).\r\n\r\nMore complex things:\r\nThe rest of the changes have to deal with the fundamental issues around using APIs that don\'t exist in UWP .NET (i.e. AppDomain). Unfortunately, there isn\'t even a replacement for these (yes, it\'s possible to enumerate through the installed app\'s DLLs, but on master unity releases i.e. when the customer actually pushes the app for real, those assemblies are all removed). Fundamentally, we shouldn\'t be using reflection at runtime to power dependency hookup behavior (there are other patterns we can follow i.e. DI, Service locators, lotsa other stuff).\r\n\r\nI ultimately chose to implement things this way as a workaround, not because I believe this is fundamentally the right long term approach (i.e. I want us to be able to figure out the best way of authoring easy to use UI helpers which properly hookup dependencies), but because we have an immediate need to have .NET backend support working, and doing this this way would be the least ""destructive"" of the common MRTK use case.\r\n\r\nI could have, for example, done this using SciprtableObjects (as singletons) but would need to attach these objects to SOME object in the scene (which would have messied the scene graph).\r\n\r\nI could have added some other profile based system to the MRTK, but I want to get wide buy-in first that such a thing makes sense.\r\n\r\nThe drawback of this approach comes from the fact that now future refactors of the namespace of these objects will require additional asset changes (see the asset things that I\'ve done).'"
421259200,3629,b'Fixing Teleportation to be visually disabled when the system is disab\xe2\x80\xa6',"b'Overview\r\n---\r\nThe bug is that when you disable the Teleport System, the visuals still activate when you try to teleport. The fix here is to check that teleport system is in fact enabled.\r\n\r\nThis change also contains 2 minor fixes in Profile Editors that hit an ArgumentException when either compiling or the window is behind another window.'"
421165955,3628,"b'When we are rendering the profile property, just use the parent targe\xe2\x80\xa6'","b'Overview\r\n---\r\nThere is a bug that when you first select a custom profile, and then click to choose a sub profile for each of the systems, the clone button disappeares.\r\n\r\nThe bug fix here is to update the profile being targeted in RenderProfileInternal to the parent serializedObject of the serializedProperty which will always be the object being viewed in the inspector, rather than the target object selected in the editor.'"
421116101,3627,b'Mrtk gaze stabilizer local space',b'Overview\r\nThe gaze stabilizer stabilized the gaze position in word space while the parent (Playspace) can be transformed due to teleportations. Calculating in its localspace fixes the lerping behind\r\n\r\n\r\nChanges\r\n---\r\n- Fixes part of #3614 .\r\n'
421091307,3626,b'Mrtk data provider matrix update',"b""Overview\r\nThe BaseMixedRealityLineDataProvider was updating its matrices in Update, which did not match the timing of the LinePointer needing the matrix in its PreRaycast phase. Since it's the only class activating this component in OnPostRaycast and is raycasting all the time, I replaced its internal Update with a MatrixUpdate in the LinePointer's PreRaycast phase.\r\n\r\nChanges\r\n---\r\n- Fixes: part of #3614.\r\n"""
421062503,3625,b'BaseCursor LateUpdate instead of Update',b'Overview\r\nThe Base Cursor was in a race condition with the MixedRealityToolkit updating Raycast data\r\n\r\nChanges\r\n---\r\n- Fixes: part of #3614 .\r\n'
421060379,3624,b'Mrtk play space update',"b'Overview\r\nThis fix encapsulates the MixedRealityPlayspace Transform so the only way to alter it is by its PerformTransformation method. This method queues the transformations and executes them at the beginning of the next frame to before the services are updated in MixedRealityToolkit. This ensures, that the playspace trransform is modified before raycasting logic happens.\r\n\r\nFixes part of #3614'"
420992261,3623,b'fixed NullReference',"b'Overview\r\nIn case meshObject.GameObject was null or was destroyed, meshObject.Filter and meshObject.Collider were still accessed without null checks. all 3 references were actually referencing the same gameobject with its components'"
420935162,3622,b'Fix: detaching children before DestroyImmediate causes Errors in the Editor',"b""Overview\r\nSometimes the Editor throws a lot of errors about destroying transforms and other components that are not allowed to be Destroyed, even though there's no code doing this.\r\nThat's because altering a gameobjects hierarchy (detaching children) before calling DestroyImmediate on it is not supported.\r\n\r\nOnly detach children if the call is Destroy\r\n\r\nUnity Case 1136869"""
420898331,3621,b'MRTK Raystep fix and cleanup',"b""Overview\r\nThe code in GetPointByDistance compared and subtracted the remainingDistance with the raystep's array length, not with the individual length of the current raystep.\r\nI fixed that and also reduced the code, making GetPointByDistance use GetStepByDistance introducing a returning tuple.\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #3571 .\r\n"""
420863696,3620,b'Changed relevant Updates to LateUpdate',"b'Those classes accessed data in an undeterministic order (Update loops race condition), this fixes it for them.\r\n\r\n- Fixes: #3581 and part of #3614 .\r\n'"
420684472,3619,b'Merge mrtk_release -> mrtk_development',b'Overview\r\n---\r\nKeeps the branches in-sync.'
420655763,3618,b'Updated build tools',"b""Overview\r\n---\r\nThis pull request modernizes the built tools\r\n\r\nChanges\r\n---\r\n- Supports CI building via `Microsoft.MixedReality.Toolkit.Core.Utilities.Build.StartCommandLineBuild`\r\n- Supports async building of appx in the editor\r\n    - Supports cancelling appx builds in editor\r\n- Fixed broken button to player settings in build window\r\n- Updated MRTK Build preferences with latest Unity workflow\r\n- Added the ability to extend the build window platforms\r\n- Added the ability to build the player from unsupported platforms without having to leave the build window.\r\n\r\nNotes\r\n---\r\n- The build window no longer supports the .NET build for three simple reasons:\r\n    - It's depreciated.\r\n    - It's simpler to support with less logical branches.\r\n    - If you're using the .NET scripting backend, then it's likely you're going to be opening this in a Visual Studio instance anyway to debug. Using the built in build window provided by unity should have everything that developer needs to facilitate this."""
420636993,3617,b'Editor Null Reference Fixes',"b'Overview\r\n---\r\nThis change fixes a few null reference bugs in the editor when MRTK is unavailable, and a prefab is opened. The simplest repro is:\r\n\r\n1. Create a new scene\r\n2. Open any prefab\r\n3. Observe null reference being thrown.'"
420576194,3615,b'Fix command line build to work with azure pipelines',"b""Overview\r\n---\r\nFor some reason, calls to StartProcessAsync were hanging on Azure Pipelines CI, even though the processes were running properly and there were task state transitions to `RanToCompletion`. In order to unblock CI, I've tentatively replaced them with synchronous Process.WaitForExit.\r\n"""
420434599,3611,b'Removed Linux 32 bit',b'Overview\r\nthis is the only ASMDEF that has Linux 32 bit tagged\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #3521\r\n'
420241741,3610,b'Mrtk Inspector Upgrade (Part 4)',"b""Overview\r\n---\r\nThis PR adds tools to automate the process of cloning profiles with sub-profiles. This issue was raised in #3605 and has been discussed internally.\r\n\r\nClicking the clone button in a profile field now launches a window where you can specify how you want each sub-profile handled:\r\n\r\n![CloneProfileWindow2](https://user-images.githubusercontent.com/9789716/54240643-e3b00100-44db-11e9-9c81-662fd963baff.PNG)\r\n\r\nFor consistency, cloning a simple profile launches a small window with fewer options:\r\n\r\n![CloneProfileWindow1](https://user-images.githubusercontent.com/9789716/54240782-486b5b80-44dc-11e9-823c-ba3de05033ae.PNG)\r\n\r\nI've left the 'Copy & Customize' button on the toolkit configuration profile alone. I felt a one-click approach was better since it's one of the first things devs will do and we don't want to overwhelm them. However the 'Create New Profiles' button might benefit from auto-generating sub-profiles."""
420224216,3609,b'Add missing meta files',b'Overview\r\n---\r\nSome of the docfx files had meta files generated for them when opening in Unity.'
420212299,3608,b'IMixedRealityFocusHandler cleanup',b'Overview\r\nThere were still traces of the two obsolete methods in IMixedRealityFocusHandler. I removed them along with the methods.'
420068878,3607,b'Mrtk focus handling',"b""Overview\r\nThis all started with the 3D button in the Interactables gallery not getting reset when more than one cursor was involved and the one entering first was not the one exiting first.\r\n\r\nProblem1:\r\nthe interactable class was collecting pointers that entered and exited. Unfortunately, the MixedRealityInputSystem was tracking focused objects on its own by just putting them in a HashMap for single enter and exit calls.\r\n\r\nSolution:\r\nI changed MixedRealityInputSystem to using a Dictionary to collect all pointers that entered a gameobject. I also introduced the Interface IMixedRealityFocusAmountHandler based on which a receiver can choose if it wants to receive every single Focus event or just the first enter or exit (which is the default).\r\n\r\nProblem2:\r\nAfter this I wanted to test how focussing went by listening to it from an InteractionReceiver. Unfortunately, all the Focus events just bypassed the regular call stack (HandleEvent<T>) and just called it on the focused object\r\n\r\nSolution:\r\nUniformly routing all calls through the baseinputsystem\r\n\r\nProblem3:\r\nThe MixedRealityInputSystem makes a fairly long attempt to get the focusedObject, which in case of the FocusExit event, is null.\r\n\r\nSolution:\r\nI split calls to IMixedRealityFocusHandler off so I could pass the focusedObject directly from the FocusProvider for these calls. In all other situations it's still the old way.\r\nI actually did not know how to do this better, but I think the FocusedObject could very well be part of the inputeventdata since it's needed for all calls and the back and forth between MixedRealityInputSystem and FocusProvider is a little too much\r\n\r\nChanges\r\n---\r\n- Fixes: #3577"""
419652252,3606,b'update namespace rules to match #3546',"b'Coding guidelines document was requiring the old namespace pattern. With #3546, this pattern has been simplified. The guidelines have been updated to reflect the pending change.'"
419570174,3602,b'remove checks for spectator view plugin dlls that are prone to failure',"b'Overview\r\n---\r\nThe spectator view extension contains a helper class for assessing whether or not some needed dlls are within the project. These checks looked for one specific path compared to anywhere in the Unity assets folder, which feels too aggressive/prone to errors. To better align with our long term packaging story/dlls being in a variety of directories, this review removes said checks and the helper class associated with said checks.\r\n\r\nChanges\r\n---\r\n- Fixes: #3587 .\r\n'"
419536249,3600,b'added documentation for docfx generated developer documentation',b'Overview\r\n--- added documentation for docfx generated developer documentation\r\n--- added entry in TOC file\r\n'
419441213,3598,"b'replaced unity crefs with links to api docs, fixed remaining crefs'",b'Overview\r\n--- replaced all unity crefs with hrefs to web api docs\r\n--- fixed new cref erros from latest mrtk development changes\r\n'
419409656,3597,b'Change order of checks',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #3579\r\n'
419230509,3594,b'Fix NRE when custom controller has no visualizer',b'Overview\r\n---\r\nWhen implementing a custom controller without a visualizer (Keyboard controller) a NRE occurred in check when accessing GameObjectProxy\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
419148265,3592,b'Update to latest Unity (2018.3.8)',b'\r\n'
418827866,3588,b'fixed cref errors and removed broken anchor from md file',b'Overview\r\n--- fixed MRTK internal cref errors\r\n--- added namespace identifier to unity crefs\r\n--- removed broken anchor from configuration guide\r\n\r\n'
418567188,3586,b'Mrtk Inspector Upgrade (Part 3)',"b""Overview\r\n---\r\nThis PR adds the MixedRealityServiceProfileAttribute class and adds inspector warnings for incorrectly configured registered services.\r\n\r\nThe attribute should be used on any profile class that is consumed by an IMixedRealityService.\r\n\r\n```\r\n[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = true)]\r\npublic class MixedRealityServiceProfileAttribute : Attribute\r\n{\r\n    public MixedRealityServiceProfileAttribute(Type serviceType) { ServiceType = serviceType; }\r\n    public Type ServiceType { get; private set; }\r\n}\r\n```\r\n```\r\n[MixedRealityServiceProfile(typeof(IMixedRealitySpatialAwarenessMeshObserver))]\r\npublic class MixedRealitySpatialAwarenessMeshObserverProfile : BaseMixedRealityProfile \r\n{\r\n   ...\r\n}\r\n```\r\nThis is intended mostly for registered service providers. But core services profiles have been given the attribute for consistency.\r\n\r\nIn registered service configurations, if you attempt to set a profile that doesn't match the service type, an error _may_ be thrown by the service. But this is not guaranteed and is easily missed. Now a warning is displayed and remains in place until the problem is fixed:\r\n\r\n![profilevalidation](https://user-images.githubusercontent.com/9789716/53996004-c5b55b80-40eb-11e9-87be-0ac4e7d2aef2.PNG)\r\n\r\nIssues\r\n---\r\nThis is just an inspector warning. The attribute should really be used to enforce correct profile usage.\r\n\r\nNext steps\r\n---\r\nProfile attributes are a first step towards automating some tedious profile-related tasks."""
418313323,3584,b'MRTK TeleportPointer',"b'Overview\r\nThe issue was that the TeleportPointer was set visible during the teleport request. If we actually hit something is evaluated during the raycast phase, which happened next frame and set the visibility itself, so there is no need to pre-visualize the pointer, which gets hidden in case of not hitting anything anyways.\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #3582'"
418291227,3581,b'MRTK line renderer fix',b'Fixes: #3580\r\n'
418187623,3579,b'Changed the order of checks',"b'Changed the order of checks since the platform can filter classes that might be null\r\n\r\nOverview\r\nWhile implementing the Oculus Go I received 5 errors every time I started the app. Since Service Providers specific to certain platforms are stripped by their containing ASMDEFs, checking for null first and the supported platform second does not seem very idea.\r\n\r\nChanges\r\nChanged the check order'"
417826329,3573,b'MRTK Oculus GO support',"b""Overview\r\nSince the Oculus Go is another device capable of using the MRTK and one that we will need in our upcoming switch from the very old MRTK to the new one, I integrate the Oculus Go into the kit.\r\nIt follows the same rules for controller and device manager creation as any other. Due to the fact it's the first Android platform though, a few adjustments to other scripts had to be made.\r\n\r\nChanges\r\nMRTK now supported Oculus Go\r\n"""
417770560,3570,b'Feature/docfx gen',b'Overview\r\n--- Added docfx support for documentation\r\n\r\nChanges\r\n--- added build config json file for docfx generation\r\n--- added toc.yml files for creating navigation entries for docfx generated html website\r\n--- moved all images used in documentation into External/ReadMeImages folders\r\n--- fixed all broken/dead links in documentation \r\n--- changed all paths / links in documentation to relative paths so docfx can properly generate html links and do a link verification\r\n\r\n'
417038014,3563,b'Interactable startup performance fix',b'Overview\r\n---\r\nInteractableEvent and InteractableProfileItem now store the results of the static GetEventTypes() and GetThemeTypes() functions in static vars. (These results are cleared on recompile.)\r\n\r\nChanges\r\n---\r\n- Fixes: #3562\r\n'
416979259,3561,b'fix incorrect boundary system property updating',b'Fixes #3558 .\r\n'
416954918,3560,b'Update to Unity 2018.3.7f1',"b'Overview\r\n---\r\nUpdating to Unity 2018.3.7f1, as part of the [March 2019 Security Update Advisory](https://unity3d.com/security?utm_campaign=engine_global_service_190301-gbl-security-rce#CVE-2019-9197).'"
416324176,3557,"b'add package specific nuspec files, update contents of existing files'","b'Overview\r\n---\r\nthis change adds nuspec files for individual service and provider packages as well as updating the core package nuspec.\r\n\r\nthis change does NOT yet modify the nuspec files for the SDK, examples or tests folders. those will come in a future PR.\r\n'"
416251858,3556,b'Remove extra space from BaseMixedRealityProfileInspector',b'Overview\r\n---\r\nFrom this:\r\n![image](https://user-images.githubusercontent.com/3580640/53662225-428d9480-3c17-11e9-8fff-938e63691628.png)\r\n\r\nto this:\r\n![image](https://user-images.githubusercontent.com/3580640/53662208-36093c00-3c17-11e9-8f7a-aaca8b3e628b.png)\r\n\r\n(extra space is between Profile and contents)\r\n'
415898316,3553,b'Fixed an issue with creating multiple async runners.',b'Overview\r\n---\r\nAsync GameObject runner sometimes created multiple instances.\r\nBetter destruction calls on empty object.'
415896788,3552,b'Misc doc fixes and Unity Object lifetime check bypass fixes',b'Overview\r\n---\r\nFixed documentation errors.\r\nFixed [Unity.Object lifetime check bypass errors](https://github.com/JetBrains/resharper-unity/wiki/Possible-unintended-bypass-of-lifetime-check-of-underlying-Unity-engine-object)'
415881695,3550,b'Fix bounding box creation issues',b'Overview\r\n---\r\nBrings over some changes made by @danielhofmann-ms to fix bounding box calculations.\r\n\r\nBefore change:\r\n![image](https://user-images.githubusercontent.com/3580640/53607356-35b76500-3b73-11e9-8287-11692dc0fc78.png)\r\n\r\nAfter change:\r\n![image](https://user-images.githubusercontent.com/3580640/53607369-4ec01600-3b73-11e9-9f4a-d739221f3809.png)\r\n'
415873937,3549,b'Diagnostics settings updates',b'Enable diagnostic visualization by default.\r\nAdd ability to configure frameRateDuration (time span to collect frames for calculation)\r\nUpdate visual profiler to allow setting sample duration via code\r\nAdd diagnostics recommendation in toolkit config inspector\r\n\r\nFixes #3536\r\n'
415838655,3548,b'glTF Utilities based off of built in Unity Serialization',"b""Overview\r\n---\r\nAdds support for glTF model importing as standard model prefabs/objects.\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/53601523-16afd780-3b61-11e9-8668-7c923b857e0a.png)\r\n\r\n# glTF\r\nUnity [glTF 2.0](https://github.com/KhronosGroup/glTF) serialization using `UnityEditor.JsonUtility`.\r\n\r\n- [x] Import Asset\r\n    - [x] Import asset at runtime\r\n    - [x] Custom asset importer for editor\r\n    - [x] .gltf file extension\r\n    - [x] .glb file extension\r\n    - [x] Json string\r\n    - [x] Construct GameObject from GltfObject Data\r\n    - [x] Apply texture to GameObject\r\n    - [x] Apply PBR Settings to material\r\n    - [x] Use the MRTK Standard Shader\r\n    - [ ] Asynchronous texture loading\r\n    - [ ] Import skins\r\n    - [ ] Import Animations\r\n    - [ ] Import Cameras\r\n    - [ ] Apply extension properties to imported asset\r\n- [ ] Export Asset\r\n    - [ ] Export asset at runtime\r\n    - [ ] Export asset from editor\r\n    - [ ] .gltf file extension\r\n    - [ ] .glb file extension\r\n\r\n# FAQ\r\nTo load gltf or glb files at runtime without a custom shader, you'll need to make sure that the standard shader is included in your final build with each of the required variants compiled and located either in your resources folder, or used in your scene. For more information check out the [Unity Docs explaining how to access shader properties at runtime](https://docs.unity3d.com/Manual/MaterialsAccessingViaScript.html).\r\n\r\n## To build a glTF-Object from json:\r\n```\r\nGltfObject gltfObject = GltfUtility.GetGltfObjectFromJson(json);\r\n```\r\n\r\n## To build a glTF-Object from uri:\r\n```\r\nGltfObject gltfObject = gltfObject = await GltfUtility.ImportGltfObjectFromPathAsync(uri);\r\n```\r\n\r\n## To Construct a unity GameObject from glTF-Object:\r\n```\r\nawait gltfObject.ConstructAsync();\r\n```\r\n\r\n## To access built Gltf GameObject scene reference\r\n```\r\ngltfObject.GameObjectReference\r\n```"""
415838527,3547,b'update recommended unity version',b'update recommendation to 2018.3.6f1\r\n'
415752181,3544,b'Update Roadmap.md',b'Overview\r\n---\r\nFix incorrect year'
415342394,3537,b'Bezier Line Data Provider',"b""Overview\r\n---\r\nWe've often found ourselves in need of a simpler / more lightweight alternative to the Spline data provider. This PR adds a Bezier line data provider and inspector.\r\n\r\n![bezier](https://user-images.githubusercontent.com/9789716/53525268-33330d80-3a96-11e9-9c5f-41908b24c7ed.PNG)"""
415277785,3533,b'Mrtk Inspector Upgrade (Part 2)',"b""Overview\r\n---\r\nAdds sub-profile inspector rendering. Whenever a profile field is drawn in a default MRTK configuration profile a dropdown is created which lets the user display the contents of the field's profile. This allows users to quickly access and modify all active profiles in a project when they select the MixedRealityToolkit object in the scene.\r\n\r\nConfiguration profiles are made aware of when they are being drawn as sub-profiles and omit logos and 'Back' buttons in this state.\r\n\r\nDropdown states are stored in editor prefs and will persist across sessions.\r\n\r\nProblems\r\n----\r\n- If every nested sub-profile from the main configuration profile is open at once the inspector can become a bit sluggish.\r\n- There's no check for recursive profile inspectors being drawn. I can't imagine what scenario would result in this occurring but in theory it's a problem.\r\n\r\n![subprofile](https://user-images.githubusercontent.com/9789716/53515025-e6dbd380-3a7d-11e9-94aa-40e8334d0d83.PNG)"""
415274643,3532,b'Delete spectatorViewXCodeSigning.png',b'Remove signing image\r\n\r\nOverview\r\n---\r\nRemove signing image\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
415267477,3531,b'new files for ios instructions',b'Overview\r\n---\r\nAdd iOS images for wiki page\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
413898801,3520,b'mrtk release -> development',"b'pick up roadmap,md changes'"
413874372,3519,b'Update Roadmap.md',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
413854174,3517,b'Fix spatial demo scene',b'removed bad script reference that got introduced during some experimentation.\r\n\r\nfixes #3516 '
413636038,3515,b'Fix example scenes setup around FocusProvider',b'Overview\r\n---\r\nSome of the example scenes had a stale setup pre-#3113\r\n\r\nChanges\r\n---\r\n- Fixes: #3514\r\n'
413625070,3513,b'Enable iOS spectator view experience',"b""Overview\r\n---\r\nI have validated that the spectator view mobile experience works on iOS. This involved testing the initial setup, resetting the shared spatial coordinate and running through recording scenarios.\r\n\r\nChanges\r\n---\r\nIt was discovered that the Unity AR Kit package is only supported for arm64. So I have added a step to change to the arm64 architecture for ios to the platform switcher.\r\n\r\nSome of the UI looked a little strange on an iPhone Xs given the bevels. I have repositioned buttons and text so that is no longer an issue.\r\n\r\nI've also changed AR Foundation related mobile logic to only observe point cloud changes to initially insure that they have located their camera in the physical world. After locating the camera, devices will now no longer observe point cloud changes, which had been the original intention."""
413624498,3512,b'Fix marker assignment by checking local cache of spectator information',"b""Overview\r\n---\r\nWe could get into a weird state where the assigned marker to a spectator was rapidly increased based on the delay in sending the assigned marker over the network. \r\n\r\nChanges\r\n---\r\nWe now check our local cache of the spectator marker value on the main user device. If its assigned, we don't reassign a new number in instances where the spectator has not yet registered that its had a marker assigned.\r\n"""
413602172,3511,b'mrtk release -> mrtk development',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
413601968,3510,b'Official MRTK v2 beta 2 merge',b''
413555128,3508,b'Pre-beta2 spell check pass',b''
413511736,3506,b'Read the default profile and default platforms from the ExtensionServiceAttribute',"b""Overview\r\n---\r\nThis PR adds the ability to have the registered service providers profile to auto-set its values based on the already set values in the MixedRealityExtensionServiceAttribute.\r\n\r\nTo start, it tries to load the default profile from an asset path, and it sets the supported platforms automatically.\r\n\r\n(video didn't pick up the service type dropdown)\r\n\r\n![service_provider](https://user-images.githubusercontent.com/3580640/53261316-86692280-3688-11e9-98af-6e6b4eb83505.gif)\r\n"""
413169728,3504,b'Beta2 stabilization -> mrtk development',b'brings dev branch up to beta 2 rc.'
413145664,3503,b'Small Performance Tweaks Round 2',"b""Overview\r\n---\r\nSmall performance tweaks - we stuck to changes that didn't require much refactoring. Primary test case was a scene with 50 HoloButtons and 50 Unity UI Canvas buttons. Tested using HoloLens and VR devices.\r\n\r\nChanges\r\n---\r\n- Removed allocations from Interactable components (~5k per frame in test case)\r\n- Shaved a few milliseconds off hot Interactable profile code\r\n- Cached Interactable host components using Init wherever possible\r\n- Small improvement in VectorRollingStatistics (but they add up)\r\n- ToolTips only update content borders when content is changed"""
413111900,3502,b'MixedRealityToolkit Profile Inspector',"b""Overview\r\n---\r\nDraws a sub-inspector for the active MRTK configuration profile in the MixedRealityToolkit singleton inspector.\r\n\r\nI've clicked the MixedRealityToolkit object in the scene hundreds of times and every time I'm still surprised when I don't immediately see the configuration profile. Having to click that first field and exit the scene heirarchy to view the profile is an uncomfortable mental switch.\r\n\r\nThis will give first-time devs a better first impression of the MRTK and help make the profile system more discoverable.\r\n\r\n![inspectorprofile](https://user-images.githubusercontent.com/9789716/53198193-a0dfc500-35d0-11e9-96e7-1cbf51197cd0.PNG)"""
413083630,3501,b'Beta2 stabilization -> mrtk development',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
413055293,3500,b'Update landing page read me',"b""Overview\r\n---\r\nThe landing page currently contains some nuget package generation steps that could benefit from more details and may lead to users feeling like they haven't correctly setup the MRTK. With the packaging story for the MRTK still under development, I think we should be more cautious on asking that all MRTK users go through these nuget generation step. For example I have hit some issues with my local setup where nuget doesn't resolve in my powershell environment, but i am still able to use the MRTK. \r\n\r\nTo keep this packaging goodness, I've created a new wiki page in our documentation:\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/wiki/Generating-Nuget-Packages \r\nIt seems like there can be greater velocity in editing/fixing wiki pages compared to readmes. So it may be a better practice to start moving all instruction content to the wiki from readme files.\r\n\r\nIn addition, i've added content to the landing page that will direct users to our how to contribute wiki page (Being new to github, i didn't know that wiki pages existed for each repo :)). In the how to contribute, i will also link to the packaging page in a new validation section."""
413049890,3499,b'Fix GettingStarted.md List indices',b'Overview\r\n---\r\nHad a few repeated list levels: 2 and 5 appeared more than once\r\n\r\nChanges\r\n---\r\n- Documentation only\r\n'
412999189,3498,b'Fixed script errors related to upgrade to Unity 2019.1',"b'Overview\r\nWith Unity 2019.1 the option to generate project references for UWP was removed. The related API calls were therefore removed as well and caused the compilation errors. Since .NET scripting runtime was removed for UWP too, code was futher excluded when combinations of the two appeared. \r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #3104\r\n'"
412821718,3496,b'Fix air-tap in Holographic Remoting (workaround for Unity issue #1033526)',b'Workaround for a blocker bug in our development workflow\r\n'
412820991,3495,b'Minor fixes for nuget pack',b'Self-explanatory...'
412820447,3494,b'Fix warnings and spelling',b'Unity warns about private fields that are never initialized.\r\n'
412817402,3493,b'Fix air-tap in Holographic Remoting (workaround for Unity issue #1033526)',b'See detailed comment in code'
412732226,3492,b'Beta2 stabilization -> mrtk development',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
412701717,3491,b'Beta2 minor clean-up',"b'Overview\r\n---\r\nInitial pass on comment updates and stale serialization.\r\n\r\nAlso, includes a fix that prevents lost sources from being recreated if lost at the ""wrong"" time and an Update is still processing its data.'"
412701177,3490,b'Change WMR.RemoveController to take in an InteractionSource',"b""Overview\r\n---\r\nThe method didn't need anything out of `InteractionSourceState`, so this removes the need to call `.Source` multiple times."""
412700731,3489,b'Add additional null checking in the Orbital solver',"b'Overview\r\n---\r\nIncrease the stability of the Orbital solver in case the transform target is destroyed or otherwise null.\r\n\r\nAlso, the `targetYRotation` should be 0 instead of 1 when the transform target is null.'"
412695979,3488,"b'update dispose pattern implementation, spatial mesh observer now uses dispose'","b""Overview\r\n---\r\nThis change updates the dispose pattern implementation in BaseService.cs to better match the documented sample ( https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose ).\r\n\r\nAs part of this change, the WindowsMixedRealitySpatialMeshObserver's cleanup code was modified to use Dispose internally and some UNITY_WSA #ifs were consolidated for readability."""
412658096,3487,b'Merge mrtk_release into beta2_stabilization',"b'Overview\r\n---\r\nFixes some ""merge conflicts"" from #3483'"
412655593,3486,b'Update controller pointer line to support color again',"b'Overview\r\n---\r\nThanks to #3382, we can re-add color to the controller lines!\r\n\r\nFrom \r\n![image](https://user-images.githubusercontent.com/3580640/53128720-5ac82a00-351a-11e9-9af9-1809d8f72756.png)\r\n\r\nto\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/53128730-5f8cde00-351a-11e9-8a61-a945d0ddb140.png)\r\n\r\nChanges\r\n---\r\n- Fixes: #3268\r\n'"
412591112,3485,b'remove duplicate branch guide',b'Updates readme to no longer point to the in-tree branch guide. Deletes the branchguide.md file in favor of the wiki.'
412587929,3484,b'Beta2 stabilization -> mrtk_development',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
412581747,3483,b'Cherry-pick readme changes from mrtk_release',b'Takes changes from 4d320ed and 5e39dc4'
412231463,3482,b'Beta2 stabilization -> mrtk development',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
412185161,3481,b'Wiki files',b'Overview\r\n---\r\nAdd some images for adding to the SpectatorView wiki page\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
412181375,3480,b'update camera profile description',b'Overview\r\n---\r\nFit and finish update to camera profile description message.\r\n\r\n'
412163897,3479,b'Small Performance Tweaks Round 1',"b'Overview\r\n---\r\nFirst round of small performance tweaks. These were all problems we spotted in the profiler while testing. Tried to avoid breaking changes or heavy refactoring.\r\n\r\nChanges\r\n---\r\n- Set new default for line steps in pointer prefabs and updated pointer inspector to give a perf warning.\r\n- Disabled auto-sync transforms in physics settings. This helped with physics spikes while using manipulation scripts. [See docs.](https://docs.unity3d.com/ScriptReference/Physics-autoSyncTransforms.html)\r\n- Added a new performance-oriented setting in line data providers.\r\n- Replaced a lot of Vector3 math in very hot code, especially RayStep.\r\n- Removed some unnecessary allocations.\r\n'"
412150158,3478,"b'rename Resources to StandardAssets, update code references'",b'Overview\r\n---\r\nRenames the Resources folder to StandardAssets to avoid unused resources from being compiled into the customer application (see https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity6.html).\r\n\r\nFixes: #3447\r\n'
412082912,3477,b'Remove broken hyper link - current development branch',"b'Overview\r\n---\r\n\r\nThe main hyperlink calling out the a MRTK-vnext development branch is broken. This review redirects developers to our branch guide wiki page, which should remain regardless of branching name changes\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #3335 .\r\n'"
412058341,3476,b'Remove unneeded/dated artifact build instructions',"b""I've never needed to build artifacts for the MRTK. We should remove these steps to remove any confusion\r\n\r\nOverview\r\n---\r\n\r\nRemove artifact build steps that aren't needed\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
412046317,3475,b'Beta2 stabilization -> mrtk development',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
411681975,3473,b'new documentation images',b''
411401836,3471,b'Add pipeline status widget to .md',b'Overview\r\n---\r\n- Adding status widget for Azure Pipelines CI\r\n'
411253749,3470,b'resize boundary profile image',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
411139533,3469,b'update mesh observer profile image',b''
411120029,3468,b'add images for spatial awareness overview page',b''
411117705,3467,b'add images for boundary system overview page',b''
411115594,3466,b'UNET package for HoloLens Collaboration compatible with Holotoolkit 2\xe2\x80\xa6',b'2017.4.3.0\r\n\r\nOverview\r\n---\r\nThis PR is a follow up of the PR #3465 .\r\n@davidkline-ms '
411077262,3465,b'UNET package for HoloLens collboration compatible with HoloToolkit 20\xe2\x80\xa6',"b""2017.4.3.0\r\n\r\nOverview\r\n---\r\nSharing with HoloLens through UNET which has been shown in the tutorial [MR Sharing 250](https://docs.microsoft.com/en-us/windows/mixed-reality/mixed-reality-250) works fine if you simply follow the tutorial by downloading the files but if you try to use that same files in your new project with HoloToolkit of version 2017.4.3.0 it will not work and will throw lots of warnings and errors.  So I made changes in the scripts as per the new methods in the latest version to make it compatible with the latest version.\r\n\r\nSo this package contains the HoloToolkit 2017.4.3.0 and UNET sharing package for sharing coordinates of Hologram to get an idea of sharing in HoloLens.\r\n\r\n\r\nChanges\r\n---\r\n- Fixes:  #2365 (Maybe solving other issues also I'm not sure!)\r\n\r\n\r\n**Unity Version -**  2017.4.17f1 (LTS)\r\n**Visual Studio Community 2017**"""
410981784,3464,b'Controller mapping profile and controller attribute fixes',"b'Overview\r\n---\r\n- Wrap editor specific code in the controller mapping profile in #if / #endif.\r\n- Add ""using Microsoft.MixedReality.Toolkit.Core.Extensions"" when building UWP on .net backend\r\n\r\nThis does not 100% resolve .net backend build breaks. There are some changes needed in interactables to work around AppDomain usage'"
410963706,3462,b'input stability and performance fixes',b'Overview\r\n---\r\nAdd performance and stability (reduce null reference exceptions) in input.\r\n\r\n'
410897442,3461,b'Beta2 stabilization -> mrtk development',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
410820190,3460,"b""Declare mouse controller as 'any' handedness""","b""That's what the mouse manager expects, otherwise input action mappings are not applied to mouse events.\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
410548536,3459,"b""Expose RadialView's settings as public properties""",b'Overview\r\n---\r\nUpdates the RadialView solver to have public properties for all its settings.'
410539308,3458,b'Replace beta 1 diagnostics visualization with a modified VisualProfiler-Unity fork',"b'Overview\r\n---\r\nNOTE: This is a breaking change from Beta 1 as the diagnostic visualization has been completely replaced.\r\n\r\nThis change removes much of the beta 1 diagnostics system implementation and replaces it with a modified fork of the Visual Profiler from https://github.com/Microsoft/VisualProfiler-Unity.\r\n\r\nThe diagnostics profile currently contains only ""Is Profiler Visible"".\r\n\r\nChanges to the forked VisualProfiler script include:\r\n\r\n- Renaming the class to MixedRealityToolkitVisualProfiler (to avoid collisions if a customer already has the original in the project)\r\n- Renaming the namespace to Microsoft.MixedReality.Toolkit.Services.DiagnosticsSystem (consistency and collision avoidance)\r\n- Rename initiallyVisible to isVisible and add a read/write property to enable toggling\r\n- Remove keyword support (now handled by demo scripts in conjunction with the Speech Commands Profile)\r\n- Add public property to set the profiler window\'s parent (hierarchy organization)\r\n- Modify LateUpdate() to show/hide the profiler window as appropriate\r\n\r\nFixes: #3245, #3056 \r\n'"
410507887,3457,b'Replace beta 1 diagnostics visualization with a modified VisualProfiler-Unity fork',"b'Overview\r\n---\r\nNOTE: This is a breaking change from Beta 1 as the diagnostic visualization has been completely replaced.\r\n\r\nThis change removes much of the beta 1 diagnostics system implementation and replaces it with a modified fork of the Visual Profiler from https://github.com/Microsoft/VisualProfiler-Unity.\r\n\r\nThe diagnostics profile currently contains only ""Is Profiler Visible"".\r\n\r\nChanges to the forked VisualProfiler script include:\r\n\r\n- Renaming the class to MixedRealityToolkitVisualProfiler (to avoid collisions if a customer already has the original in the project)\r\n- Renaming the namespace to Microsoft.MixedReality.Toolkit.Services.DiagnosticsSystem (consistency and collision avoidance)\r\n- Rename initiallyVisible to isVisible and add a read/write property to enable toggling\r\n- Remove keyword support (now handled by demo scripts in conjunction with the Speech Commands Profile)\r\n- Add public property to set the profiler window\'s parent (hierarchy organization)\r\n- Modify LateUpdate() to show/hide the profiler window as appropriate\r\n\r\nFixes: #3245, #3056 \r\n'"
410386029,3455,b'Search all controller mappings before trying to assign a default interaction',b'Search all controller mappings before trying to assign a default interaction mapping.'
410257186,3454,b'Updated Services documentation',b'- Substituted MixedRealityOrchestrator with MixedRealityToolkit\r\n- Removed references to runtime services\r\n- Fixed minor typos\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
410237146,3453,b'Fixed broken link to documentation guidelines',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
410052017,3452,b'Spectator view - second wave of refactor logic',"b""This review improves the spectator view experience:\r\n1) ArUco marker detection is updated to use the SpectatorViewPlugin dll built out of the Microsoft/MixedRealityToolkit:feature/spectatorView branch (https://github.com/Microsoft/MixedRealityToolkit/tree/feature/spectatorView/SpectatorViewPlugin )\r\n2) Transforms between HoloLens and mobile device origins are fixed in the MarkerSpatialCoordinateService, previously some transforms were applied in the wrong order\r\n3) MarkerSpatialCoordinateService debug visuals have been updated to place markers at the shared application origin location. Debug visuals are now shown on mobile devices to demonstrate the expected location of the user/HoloLens camera.\r\n4) A concept of visual states has been added to the MarkerSpatialCoordinateService. This eases the experience for creating ui that shows different stages in the MarkerSpatialCoordinateService initialization process (Waiting on user, locating local origin, showing marker, etc)\r\n5) New Unity ui components have been added for the UDPBroadcastNetworkingService to allow users to set specific udp port values. This should allow multiple demos on the same network.\r\n6) New ui interfaces have been defined (IMarkerSpatialCoordinateServiceOverlayVisual and IUDPBroadcastNetworkingServiceVisual) so that SpectatorView users aren't required to use unity ui.\r\n7) iOS and android recording services have been created out and paired with recording ui.\r\n8) A new ui button has been defined for resetting the marker detection logic for the MarkerSpatialCoordinateService (IMarkerSpatialCoordinateServiceResetVisual)\r\n\r\nTodos:\r\n1) Launching video playback defaults to the standard photos directory on android compared to the last recorded file.\r\n2) iOS recording has not yet been tested.\r\n3) Documentation has been started for this work on the repo wiki, but improvements could still be made"""
410029814,3451,b'Add documentation and images folders plus images for packaging page',b'\r\n'
409949689,3446,b'Beta2 stabilization -> mrtk development',b'merge recent beta2 fixes'
409453144,3445,b'Update MixedRealityToolkit-Generated to .Generated to match style',b'Overview\r\n---\r\nUpdate MixedRealityToolkit-Generated to .Generated to match style. This was changed in a few places already.'
409229828,3443,b'Introduce MovementConstraintType.FixDistanceFromHead in ManipulationHandler',"b'A new parameter ""Constraint On Movement"" in analogy to the existing ""Constraint On Rotation"":\r\n- Default remains ""None"" without changes in behavior\r\n- So far only one alternative setting ""FixDistanceFromHead"" with self-explanatory behavior.\r\n- Other settings to be added based on future use-cases.'"
409055414,3432,b'removed check for dimension index change which should not be needed.',"b""Overview\r\nRemoved a check comparing the Interactable's DimensionIndex to a cached index value that was meant to keep the receiver and interactable in sync. The check is not needed and actually caused errors if the interactable's toggled state is set through code using SetDimensioniIndex(1).\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
408884620,3431,b'Update Readme.md - SpectatorView Preview',b'Fix opencv version in readme\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
408589543,3426,b'Fix pointer profile serialization',b'Overview\r\n---\r\nFixes pointer profile serialization.\r\n\r\nChanges\r\n---\r\n- Fixes #3425\r\n'
408376135,3424,"b'fix GetObserver[s]<T> return type, cleanup unneeded / commented code '","b""Overview\r\n---\r\nThis is a minor breaking change in that the return value of the spatial awareness system's GetObservers<T>() and GetObserver<T>(name) methods are now defined to return a IReadOnluList<T> and T, respectively. These are more accurate definitions and eliminates the need for client code to cast the return values to T.\r\n\r\nAlso cleans up unused and commented code from the previous spatial awareness refactor PR.\r\n\r\nFixes #3420 \r\nFixes #3400 \r\n"""
408009795,3421,b'Beta2 stabilization -> mrtk development',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
407939170,3419,b'Update Spatial Awareness system cleanup',"b""Call observedObjectParent instead of ObservedObjectParent, so we don't create GameObjects on cleanup."""
407836381,3417,b'comment updates',b'Cherry pick comment updates from htk_development\r\n'
407834535,3416,b'comment updates',b'non-code impacting comment changes'
407394699,3414,b'Beta2 stabilization -> mrtk_development',b'Merge beta changes back in to dev branch\r\n'
407002770,3413,b'Update solvers example',b'Overview\r\n---\r\nUpdate solvers example scene with an action filter and a fallback to `Head` if no handedness is detected.'
406970400,3412,b'Remove IMixedRealityInputHandler from DragAndDropHandler',b'Overview\r\n---\r\n#3389 removes the need for this interface in this script (they were all empty stubs).'
406945789,3411,b'Sync interactable guids',b'Overview\r\n---\r\nUpdates GUIDs related to Interactables to the versions that have been in-use by our partners.'
406939273,3410,b'[vNext][UX] Tooltip Examples Scene',b'Overview\r\n---\r\nOur basic ToolTip example scene updated with latest prefabs and manipulation scripts. Also fixes some spawning logic in ToolTipSpawner class.\r\n\r\n![tooltips](https://user-images.githubusercontent.com/9789716/52297717-37a45480-2936-11e9-8168-b931be7894a5.PNG)'
406916412,3408,b'Feature/mrtk_interactable into mrtk_dev',"b""Overview\r\n---\r\nMove's Yoon's TextMeshPro -> TextMesh change into the dev branch."""
406558625,3407,b'[vNext][UX] Interactable: Replaced TextMeshPro with TextMesh',"b'Overview\r\n---\r\nIn HolographicButton and HolographicButtonToggle prefab, replaced TextMesh Pro with 3D Text Mesh to avoid broken/forced TextMesh Pro import warning messages.\r\n\r\nChanges\r\n---\r\n- Prefab file changes from: #3380. No code changes.\r\n'"
406478430,3406,b'Update controller mapping utilities',"b""Overview\r\n---\r\nRemove a mismapped action in the Generic OpenVR mapping\r\nPropagate an action rename into the profile inspector's filter"""
406477122,3405,b'Synchronize ManipulationHandler GUID',b'Overview\r\n---\r\nSynchronizes the new GUID with the version partners have been using.\r\n'
405928005,3401,b'update version number and license file year in preparation for beta2 release',b'changes version to 2.0.0-Beta2\r\nchanges copyright year to 2019 in license files\r\n\r\nalso updates to latest unity release'
405898532,3399,"b'Refactor Spatial Awareness System interfaces, replace system profile with observer profile(s)'","b'Overview\r\n---\r\nThis change refactors the spatial awareness system to remove observer configuration settings from the system and the system profile. In fact, the spatial awareness system no longer needs / has a profile, instead each registered observer is individually configured.\r\n\r\nAs there were no supported planar surface observers, these settings have been removed from the spatial awareness system and will return in the future as part of an interface specifically to support spatial observers that return planar surface data natively.\r\n\r\nSignificant breaking changes include:\r\n* IMixedRealitySpatialAwarenessSystem no longer contains configuration data for observers and now contains functions to Get/Suspend/Resume one or more observers\r\n* IMixedRealitySpatialAwarenessSystemObserver and IMixedRealitySpatialAwarenessMeshObserver interfaces were added\r\n* The DefaultMixedRealityToolkitConfigurationProfile has had the Spatial Awareness Profile removed\r\n* The Windows Mixed Reality Spatial Awareness Mesh Observer (in the registered services profile) now has an associated profile.\r\n* The class name for the Windows Mixed Reality observer has changed - If you have custom profiles referencing the observer, they will need to be updated.\r\n* The MixedRealitySpatialAwarenessMeshHandler has been replaced with MixedRealitySpatialAwarenessObservationHandler - Please update any client code handing mesh events.\r\n\r\nFixes #3326 \r\nFixes #3171 \r\nFixes #3226 '"
405871646,3398,b'Update controller mappings',"b""Overview\r\n---\r\nUpdates some comments and OpenVR axes for WMR.\r\nMakes the Thumbstick Press and Touchpad Press axes different so we aren't firing two different events for the same input, though thumbstick press is often consumed by the SteamVR menu.\r\nRemoved some stale mappings after the recent controller mapping rework."""
405852713,3397,b'New static helper methods to BoundsExtensions',b'Overview\r\nAdding a few helper methods to the BoundsExtensions class.\r\n\r\n- GetColliderBoundsPoints\r\n- GetRenderBoundsPoints\r\n- GetMeshFilterBoundsPoints'
405797203,3396,"b""Update FocusProvider's UIRaycastCamera logic""","b""Overview\r\n---\r\nAs currently written, the FocusProvider assumes that the camera will only ever have more than 0 children if the UIRaycastCamera is already present. This isn't a robust assumption, as devs can place additional children under the Camera, which leads to null refs."""
405465745,3394,b'[vNext][UX] ToolTip fixes and custom inspectors',"b""Overview\r\n---\r\nAfter further reviewing ToolTips we found some features had been disabled. Others were confusing or difficult to use. This PR addresses these issues by:\r\n- Re-enabling automatic content scaling for ToolTips.\r\n- Updating ToolTip prefabs to reflect best construction practices.\r\n- Adding ToolTip and ToolTipConnector inspectors. These inspectors provide guidance and hide non-relevant fields to make relationship between user's settings and ToolTip behavior clearer. Both follow standards established in our Line inspectors.\r\n- Adding IToolTipBackground and IToolTipHighlight interfaces and updating existing ToolTipBackground classes to implement these interface.\r\n\r\nIssues\r\n---\r\n- ToolTipLineHighlight depends on incoming changes from #3372 to behave as expected.\r\n\r\n![tooltipupdate](https://user-images.githubusercontent.com/9789716/52088885-f7be2580-2561-11e9-9ca4-9a24283dcdb8.PNG)"""
405419813,3393,b'Add null check for the SpatialAwarenessSystem being turned off',b'Overview\r\n---\r\nFix potential null ref in `BaseSpatialObserver` if the spatial awareness system is turned off.\r\n'
405410577,3392,b'Fix variable naming',b'Overview\r\n---\r\nA variable name changed (`pointer` -> `pointerData`).\r\n\r\nThis also removes an unused meta file.'
405401154,3391,b'Update BoundingBox GUIDs',b'Overview\r\n---\r\nAligns the bounding box guids with the versions partners have been using.'
405020637,3390,b'Create extension service and data provider attributes',b'Overview\r\n---\r\nCreated MixedRealityExtensionServiceAttribute and MixedRealityDataProviderAttribute to enable easy migration between v2 (registered services profile) and v3 (service specific profile data provider collections) as well as to enable automatic population of supported runtime platforms as well as the default profile file and path.\r\n\r\nThe appropriate attributes have been applied to all current extension services.\r\n\r\nThe runtime platform and default profile registration is a future feature that is not implemented in this PR.\r\n\r\nFixes #3387 \r\n'
404992565,3389,b'remove IMixedRealityInputHandler from IMixedRealityInputHandler<T>',b'Overview\r\n---\r\nNot every class that implements `IMixedRealityInputHandler < T >` needs the methods from `IMixedRealityInputHandler`. This change removes the dependency and allows code that so desires to implement one or both without need for empty method implementations.\r\n\r\nChanges\r\n---\r\nFixes: #3295 \r\n'
404983983,3388,b'Update SpectatorView (Preview) README.md',b'add more details to the spectator view plugin step. add some additional context to the building text\r\n\r\nOverview\r\n---\r\nThese changes add more detail to existing documentation\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
404909908,3386,b'Move files from stale - folders to new . folders',"b""Overview\r\n---\r\nA PR was merged that didn't move to the renamed folders."""
404560334,3384,b'Move Windows Mixed Reality and OpenVR providers to separate assemblies',"b'Overview\r\n---\r\nThis change updates how the controller mapping profile and support code works to remove hard coded references to concrete class implementations (thanks Daniel Hofmann for the slick implementation!). The hard coded references was blocking being able to move platform specific implementations out of the core assembly and into redistributable packages.\r\n\r\nThis formally moves Windows Mixed Reality and OpenVR platform support components into separate assemblies.\r\n\r\nAs the Unity input provider is not platform specific, it was left in the Core assembly.\r\n\r\nOther related changes:\r\n* The Devices folder was renamed to Providers\r\n* ...Core.Devices namespace was changed to ...Core.Providers\r\n\r\nNOTE: You MUST delete your Library folder and update any custom profiles upon pulling this change,\r\n\r\nFixes #3074 \r\nFixes #3357 \r\nFixes #3358 \r\n'"
404543738,3383,b'Refactor of Spectator View (Preview)',"b""Overview\r\n---\r\nThis review refactors some previously existing code, spectator view (preview), and adds it to the newer version of the MRTK.\r\n\r\nChanges\r\n---\r\n1) A new MixedRealityToolkit.Extensions directory is added for components that exist outside the main MRTK functionality\r\n2) A few basic interfaces are defined to abstract out shared experience components. These will likely change long term but there are hopes that having cleaner definitions than the previous spectator view (preview) will make for a better refactoring experience\r\n    3.1) IMatchMakingService\r\n    3.2) IPlayerService\r\n    3.3) INetworkingService\r\n    3.4) ISpatialCoordinateService\r\n3) Interface definitions are defined for needed spectator view functionality\r\n    4.1) IMarkerDetector\r\n    4.2) IMarkerVisual\r\n    4.3) IPlaybackService\r\n    4.4) IRecordingService\r\n4) An aruco marker detector and aruco marker visual have been defined. Marker detection is conducted using a plugin built out of HoloLensForCV. TBD whether or not the licensing for this repo will suffice. (https://github.com/Microsoft/HoloLensForCV/pull/78 )\r\n5) A platform switcher is added to the editor for toggling between HoloLens, android and iOS builds.\r\n6) A new component, UDPBroadcastNetworkingService, acts as a simple implementation of IMatchMakingService, IPlayerService and INetworkingService. It enables devices to discover one another and send byte payloads back in forth containing information around shared spatial coordinate states\r\n7) A new component, MarkerSpatialCoordinateService, allows devices to coordinate a shared application origin based on showing and detecting ArUco markers\r\n\r\nNOTE: This change adds dependencies on Unity's AR Foundation, AR Core and AR Kit.\r\n"""
404124019,3382,b'Channel Packer Editor + Other Shader Features',b'Overview\r\n---\r\nAdding a few improvements to the MRTK/Standard shading system:\r\n\r\n- A GPU accelerated channel packer editor for easy channel map generation\r\n- Spherical harmonics support for better lighting\r\n- Vertex color support (can now be used with the Unity LineRenderer)\r\n- Improved lightmapping support with a meta pass\r\n- HDR emission support\r\n- Minor bug fixes\r\n\r\nScreenshot of the channel packer:\r\n![channelpacker](https://user-images.githubusercontent.com/13305729/51885324-d7168580-233f-11e9-9eea-0a65bb4d1dd9.png)\r\n'
403944112,3381,b'update to unity 2018.3.3',b'update project version to latest unity release'
403937116,3380,b'[vNext][UX] Feature/mrtk interactable dev merge',b'Overview\r\nAll the interactable work is ready to move into development.\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
403432261,3377,b'Mrtk development controller fix #3376',"b'Overview\r\n---\r\nResolves #3376\r\n\r\nEditor code relied on the _Core folder following move.\r\n\r\nNew Core folder configuration added, which can be removed when the project leaves beta and is stable.\r\n\r\nChanges\r\n---\r\n- Fixes: #3376\r\n'"
403334823,3372,b'[vNext][UX] Line Usability Tweaks',"b""Overview\r\n---\r\nVarious updates to make line tools more usable for artists and designers. These changes are based on feedback gathered while using these tools over the past few weeks.\r\n\r\nChanges\r\n---\r\n- ~~Lines.DataProviders and Lines.Renderers namespaces have been consolidated into Lines. This was a big discoverability problem. Even after working with these tools for weeks it was frequently necessary to hunt and peck for class names.~~\r\n- ~~BaseMixedRealityLineDataProvider has been renamed to BaseLineDataProvider. Again, class is now more discoverable via intellisense.~~\r\n- Line renderers now update in-editor when base data provider is being manipulated.\r\n-  Line data providers now draw a simple gizmos approximation. Working with more than one line at a time could be confusing as they would disappear when not selected.\r\n- Line renderers no longer use RequireComponent for their line data provider. There were many situations where we wanted renderer components to exist on a separate object from its data provider.\r\n- When RotationMode is set to None, lines now return transform's rotation. This leads to more predictable results.\r\n- When a MixedRealityLineRenderer is disabled it now automatically disables its accompanying LineRenderer, which is the expected behavior.\r\n- StripMeshRenderer now uses GetVelocity instead of GetRotation to avoid 'nocks' in mesh.\r\n- StripMeshLineRenderer serializes its mesh renderer so the renderer doesn't get created again at runtime."""
403302481,3371,b'Profile foldout part2',"b'Overview\r\n---\r\nThis change completes the MRTK v2 profile inspector UI changes related to foldouts. Modified inspectors are:\r\n\r\n- Input System\r\n- Controller Visualization\r\n- Pointer\r\n\r\nAlso fixed were the relative paths to inspector images (MRTK logo, controller images) that were broken by the folder rename.\r\n\r\nFixes #3376\r\n'"
402951302,3370,"b""Make the Billboard's pivot axis configurable""","b'Overview\r\n---\r\nFeature request from a partner, who were using the configurability in the HoloToolkit.'"
402907920,3368,b'Add WindowsEditor as a supported platform',b'Overview\r\n---\r\nThis will help enable systems / services that are only meant for editor simulation or otherwise not intended to run on an actual device.'
402903990,3367,b'replace ScriptableObject with BaseMixedRealityProfile',"b'Overview\r\n---\r\n#3318 was a fantastic change that had one minor flaw. Rather than pass a ScriptableObject as the profile, BaseMixedRealityProfile should have been used.\r\n\r\nThis change also updates the summary tags for the relevant constructors\r\n\r\nClient code / profiles should not encounter any breaking changes with this PR.'"
402902865,3366,b'Add check to prevent trying to instantiate null gaze cursor',"b'Overview\r\n---\r\nMakes the gaze cursor optional. Otherwise, if no gaze cursor is set in the profile (a valid state), the system setup will fail out when trying to `Instantiate` null.'"
402870435,3365,b'update unity version to 2018.3.2',b'Updates the project version file to the latest Unity 2018.3 release.'
402499569,3363,b'Update feature/mrtk_interactable with mrtk_development',b'Update feature/mrtk_interactable with mrtk_development'
402490140,3362,b'Update SolverHandlerInspector.cs.meta',"b""Overview\r\n---\r\nRegenerate the guid for `SolverHandlerInspector` so it doesn't [conflict with HoloToolkit](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/master/Assets/HoloToolkit/Utilities/Scripts/Editor/SolverHandlerEditor.cs.meta)."""
402463303,3361,b'Change GetPrefabInstanceStatus -> GetPrefabAssetType',"b""Overview\r\n---\r\nIn the 2018.3 update, I think the wrong API was used for these lines. As written, the profiles didn't accept any prefabs."""
400933459,3355,b'changing accessability on ClippingPrimitive.ClippingSide',b'Overview\r\nChanging ClippingPrimitive.ClippingSide to an explicit property. For some reason the lambda prevents other classes from accessing it.\r\n\r\nChanges\r\n---\r\nAdded an explicit get/set.'
400930945,3354,"b'complete top level folder rename, remove _Core folder'","b""Overview\r\n---\r\nThis change is the second part of the tree alignment update, started with #3348. The top level folders that previously contained a '-' separator have been updated to use a '.' and the contents of the MixedRealityTookit/_Core folder have been moved to MixedRealityToolkit.\r\n\r\nThere are _zero_ code changes in this PR.\r\n\r\nThis change was discussed and approved in shiproom on 2019-01-16."""
400846825,3350,b'[vNext][UX]Lines closest point / length',"b'Overview\r\n---\r\nAdds two functions to BaseMixedRealityLineDataProvider:\r\n\r\n```\r\n/// Iterates along line until it finds the point closest to worldPosition\r\npublic Vector3 GetClosestPoint(Vector3 worldPosition, int resolution = 5, int maxIterations = 5)\r\n\r\n /// Iterates along line until it finds the length closest to worldposition.\r\npublic float GetNormalizedLengthFromWorldPos(Vector3 worldPosition, int resolution = 5, int maxIterations = 5)\r\n```\r\n\r\nThese make it easier to create line-based effects that react to objects in the world (eg controllers).\r\n\r\n![lines](https://user-images.githubusercontent.com/9789716/51406851-26261480-1b0f-11e9-999a-e861f075f6a0.jpg)'"
400498637,3349,b'add notes from 2019-01-16 meeting',b'\r\n'
400464754,3348,b'Tree changes to align with packaging and component separation',"b'Overview\r\n---\r\nThis change updates the layout of the source tree to better align with the separation of components and makes it easier to identify which code files are part of a given component.\r\n\r\nAs part of this change, namespaces have been modified to reflect the componentization.\r\n\r\nPlease note that this change has the potential to break client code in the following ways:\r\n- Custom profiles will require modification to point to the new assembly/namespace/class names\r\n- Code that directly calls concrete classes will need to be modified.\r\n\r\nAlso, please note that the following device/providers have not been moved, due to changes required as outlined in #3074 : \r\n- UnityInput\r\n- WindowsMixedReality\r\n- OpenVR\r\n\r\nThese will be addressed in a future change.\r\n\r\n**Please delete your library folder after pulling this change**\r\n\r\nChanges\r\n---\r\n- Fixes #3341\r\n'"
400413938,3347,"b""Removed enum 'Type' suffix""","b""Overview\r\n---\r\nRemoved enum 'Type' suffix on a case-by-case basis.\r\n\r\nChanges\r\n---\r\n- Fixes #3045 \r\n"""
399995270,3344,"b'GpuTiming -> GpuStats, now with VRAM usage added and no build warnings'","b'This corresponds to the MixedRealityToolkit changes for this plugin https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3319\r\n\r\nThe GpuTimingCamera.NewGpuFrameTime event was added because the best time to read the previous full frame timing is in OnPreCull(), which is not available to MonoBehaviours in general but only ones attached to a camera, which this script is'"
399584812,3343,b'[vNext][UX] Bounding Box control',"b""Overview\r\n---\r\n- Simplified version. Now, you can simply assign BoundingBox.cs on any object and you get the BoundingBox. 'Activate on Start' option is provided.\r\n- BoundingBox handle materials\r\n- Example scene (using existing standard assets in mrtk_development)\r\n- This PR does not include App Bar. It will be submitted as a seprate PR, once Interactable PR is merged.\r\n- Replaced deprecated OnInputPoseChanged()\r\n\r\n![2018-10-30 17_41_37-window](https://user-images.githubusercontent.com/13754172/47807735-13632700-dcfa-11e8-81e8-e1fa718f063e.png)\r\n\r\n### Script\r\nAssets/MixedRealityToolkit-SDK/Features/UX/Scripts/BoundingBox/BoundingBox.cs\r\n\r\n### Materials\r\nAssets/MixedRealityToolkit-SDK/Features/UX/Materials/BoundingBoxLines.mat\r\nAssets/MixedRealityToolkit-SDK/Features/UX/Materials/BoundingBoxHandleGrabbed.mat\r\nAssets/MixedRealityToolkit-SDK/Features/UX/Materials/BoundingBoxHandle.mat\r\n\r\n### Example scene\r\nAssets/MixedRealityToolkit-Examples/Demos/UX/BoundingBox/BoundingBoxExample.unity"""
399564811,3342,b'Move input system from SDK to the Core',"b'Overview\r\n---\r\nThis change moves the input system from the SDK layer to the core. As a part of this, the MixedRealityToolkit.InputSystem assembly has been folded into the MixedRealityToolkit assembly (the contents of the assembly was some base class implementations).\r\n\r\nDefault profiles and all code referencing the input system components have been updated to reflect the new namespaces.\r\n\r\nAny customer profiles and code will need to be updated to match this change.\r\n\r\nIt is highly recommended to _delete_ your Library folder after pulling this change.\r\n\r\nChanges\r\n---\r\n- Fixes #3328 \r\n'"
398081518,3334,b'move spatial awareness system from sdk to core',"b'Overview\r\n---\r\nMoved source files for spatial awareness system from sdk to core tree structure. Updated profile to reflect new namespace for the system.\r\n\r\nPlease note, if your code previously accessed the spatial awareness system concrete class directly, or implements a custom system implementation, it will need to be updated to reflect the new namespace.\r\n\r\nAlso note, if you have a custom configuration profile, you will need to update the spatial awareness system class reference.\r\n\r\nChanges\r\n---\r\n- Fixes #3327 \r\n'"
398035297,3333,b'Update unity requirement to 2018.3',b'Overview\r\n---\r\nThis change brings the required Unity version to 2018.3.x.\r\n\r\nPLEASE NOTE: It is recommended that you delete your Library folder after pulling this change.\r\n\r\nChanges\r\n---\r\n- Fixes #3306\r\n- Fixes #3192 '
397639887,3323,b'[vNext][UX] Manipulation handler for one or two handed manipulation',"b""![2018-12-19 16_43_03-unity 2018 2 14f1 personal 64bit - manipulationexample unity - mrtk-public-joh](https://user-images.githubusercontent.com/13754172/50258234-9841f700-03b3-11e9-9482-b672d7a5cbc4.png)\r\n\r\n\r\nOverview\r\n---\r\nScript and example scene that allows One or Two-handed manipulation. Ported from HoloToolkit.\r\nRenamed 'TwoHandManipulatable' as 'ManipulationHandler' to follow other MRTK vNext script naming convention.\r\n\r\nScript name\r\n---\r\nManipulationHandler.cs\r\n\r\nExample scene \r\n---\r\nManipulationExample.unity\r\n\r\nChanges\r\n---\r\n- Part of MRTK vNext UX controls: #3092\r\n\r\n"""
397565641,3321,b'Updated feature/mrtk_interactable branch ',b'Overview\r\n---\r\nMerged the latest **mrtk_development** branch into **feature/mrtk_interactable** branch.\r\nTested with HoloLens and IHMD.\r\n\r\nChanges\r\n---\r\nNo code changes added.'
397558275,3320,b'add shiproom notes for 2019-01-09',b''
397556598,3319,b'Add GpuTiming plugin source from https://github.com/danandersson/Holo\xe2\x80\xa6',"b'\xe2\x80\xa6Toolkit/tree/AdaptiveQuality/GpuTiming\r\n\r\nOverview\r\n---\r\nGpuTiming DLLs are already tracked in MRTK-Unity, but the source was missing.\r\n\r\nChanges\r\n---\r\nAdd the source for the DLLs so they can be rebuilt/modified.\r\n'"
397442160,3318,b'Add ConfigurationProfil connection for Extension Service',b'Overview\r\n---\r\nAdd ScriptableObject member as configurationProfil in the BaseExtensionService class to store the profil.\r\nAdd the configuration.ConfigurationProfil as additionnal parameter when registering the IMixedRealityExtensionService.\r\n\r\nChange all IMixedRealityExtensionService implementation constructor to add ScriptableObject has third parameter to accept the configuration profil.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
397118035,3317,b'Move eventsource functionality from SpatialAwarenessSystem to observer(s)',b'Overview\r\n---\r\nThis change moves the implementation of IMixedRealityEventSource from the spatial awareness system and adds it to the spatial awareness observer. This enables client code to determine / access the source of the events.\r\n\r\nThis is a breaking change for any concrete implementations of IMixedRealitySpatialAwarenessSystem and/or IMixedRealitySpatialAwarenessObserver.\r\n\r\nChanges\r\n---\r\n- Fixes: #3190\r\n'
395730988,3310,b'Feature: Light Estimation',"b""## What is it?\r\n\r\nLight Estimation is a tool that will use the camera to collect light information from the user's environment, and uses it for rendering more realistic looking holograms!\r\n\r\n## Implementation\r\n\r\nLight Estimation is primarily driven by the LightCapture.cs Unity component, so start there for details! It also uses the CameraCapture code (MixedRealityToolkit-Preview/CameraCapture) for cross-platform high-performance image capturing. None of this code currently has a dependency on MRTK.\r\n\r\nCheck out the readme in MixedRealityToolkit-Preview/LightEstimation/README.md for additional details, excerpt follows: \r\n\r\n## Basic Usage\r\n\r\nFrom the dropdown menu:\r\n>Mixed Reality Toolkit / Lighting Estimation / Create Estimation Object\r\n\r\nThat's it! This will create a `GameObject` in your scene with the `LightCapture` component on it, this should work on the HoloLens automatically. If you want this example to work in-editor on a laptop that has a camera and a gyrosocope, add the `FollowGyroscope` component to your scene's `Main Camera`.\r\n\r\nYou can check out the 'Minimum' scene for an example of the bare minimum require for light estimation to work.\r\n\r\n## How does it work?\r\n\r\nAs the user interacts with the environment, this tool creates a Cubemap using the device's camera. This cubemap is then assigned to one of Unity's Reflection Probes for use by shaders for ambient light and reflection calculations!\r\n\r\nWhen the component loads, it takes a single picture from the camera, and wraps it around the entire cubemap! This provides an initial, immediate estimate of the lighting in the room that can be improved upon over time.\r\n\r\nAs the user rotates, the component will 'stamp' the current camera image onto the cubemap, and save that rotation to a cache. As the user continues to rotate, the component will check the cache to see if there's already a stamp there, before adding another stamp. Settings can be configured to make stamps expire as the user moves from room to room."""
395324077,3305,b'Fix unity ui button click and focus with pointer',"b'Overview\r\n---\r\nI was not able to focus and click a unity ui button without colliders.\r\nThis was discussed in https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3262\r\nNow I found a solution which works for windows mixed reality controller pointer inputs and not GazeProvider only.\r\n\r\nAfter digging into the code, I found out the difference between gaze and pointer in the focusprovider.\r\nFor the gazeprovider, the unity ui needs no collider to get hovered, but for the pointer it seemed necessary.\r\nBasically it turns out, that for the gazeinput the (FocusProvider:707)\r\n`if (pointer.Details.LastRaycastHit.distance > uiRaycastResult.distance)\r\n                        {\r\n                            overridePhysicsRaycast = true;\r\n                        }`\r\nis true, but for the pointer input, the LastRaycastHit.distance is always smaller than the uiRaycastResult.distance. Hence it does not override the physics raycast and the pointer cursor does not stop at the ui.\r\nFor me it is suspicious that the ray starting point (for linepointer) is the starting point of the RayStep and not the controller position. But the distances compared should be from head->hitTarget vs. controller->hitTarget.\r\n\r\nThanks to @andriworld for the fix with the focusedObject!\r\n\r\nChanges\r\n---\r\n- Fixes: # https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3262\r\n'"
394751498,3303,b'MRTK/Standard Shader Clipping Primitives Improvements & Additions',"b'Overview\r\n---\r\nImproved per-pixel primitive clipping feature by adding:\r\n\r\n![primitiveclipping](https://user-images.githubusercontent.com/13305729/50532255-a1c21200-0acb-11e9-91c5-1da70ffe95b9.gif)\r\n\r\n-\tPerformant sphere, and box shape clipping (plane clipping already existed)\r\n-\tAbility to specify which side of the primitive to clip against (inside or outside)\r\n-\tUser friendly shader GUI and gizmo support\r\n-\tExamples in the material gallery\r\n\r\n![primitiveclippinggizmos](https://user-images.githubusercontent.com/13305729/50532289-54927000-0acc-11e9-8c1d-a83e49d7bd2f.gif)\r\n\r\nOther changes:\r\n-\tImproved refractive glass material\r\n-\tMoved the HoverLight component to the core for nameof support in the shader GUI'"
393717629,3302,"b'Revert ""Fix DragAndDropHandler to properly support hands over the gaze pointer""'",b'Reverts Microsoft/MixedRealityToolkit-Unity#3294'
393616976,3301,b'Add ability to update the PointerData for a pointer with locked focus',"b""Overview\r\n---\r\nPreviously, a pointer with locked focus wasn't being updated. Its data was stale from the moment focus became locked. This leads to strange visualizations when the locked object or the pointer is moved, leaving the cursor behind or rendering the pointer line to the wrong point.\r\n\r\nThese commits were pulled out of #3294.\r\n\r\nChanges\r\n---\r\n- Related to #2960, #3294 \r\n"""
393597117,3300,b'added TryGetController method',b'Overview\r\n---\r\nAdded `TryGetController` utility method to Input System\r\n\r\nChanges\r\n---\r\n- Fixes: #3299 \r\n'
393586902,3297,b'Updated pointer events',"b'Overview\r\n---\r\nRemoves handedness from pointer events, as pointers do not have handedness properties.\r\n\r\nHandedness can only be determined from `IMixedRealityController.ControllerHandedness`\r\n\r\nFixes #3298\r\nFixes #3299\r\n\r\nBreaking Changes\r\n---\r\n- `PointerEventData` now inherits from `BaseInputEventData`'"
393533424,3296,b'Sharing photon preview sync with mrtk development',b'Overview\r\n---\r\nsyncs feature branch with development branch.'
393198813,3294,b'Fix DragAndDropHandler to properly support hands over the gaze pointer',"b""Overview\r\n---\r\nThe original issue with DragAndDropHandler was that the gaze pointer was sending its own input source across the Pointer events, instead of the input source that originally sent the event.\r\n\r\nThis updates the pointer event methods to allow for an input source that's different from the pointer's input source. This allows matching position events to pointer events, and vice versa.\r\n\r\nThis change also adds support for moving objects with the tip of a controller's pointer ray, instead of with the source's position. Over the gaze pointer, the position is used.\r\n\r\nChanges\r\n---\r\n- Fixes: #2960\r\n\r\nBlocked By\r\n---\r\n- [x] #3301 """
393187569,3293,b'Fix issue where HoloLens hands were using the same MixedRealityInteractionMapping array',"b""I wasn't able to reopen #3291, so here's a new PR.\r\n\r\nOverview\r\n---\r\nSince the controller mapping profile only contains one array for HoloLens hands (since there's no differentiation between handedness), both hands are reusing the same array. This causes their values to overwrite each other, and causes events to fire endlessly when one hand is selecting and the other isn't. This would also be seen in any other source that reuses one array in the profile, like touch.\r\n\r\nThis bug fix instead creates a copy of the profile's array, so we aren't reusing the same structure. This will also fix cases where a source might be lost while selecting, which would cause the state to change when a second, unselecting source is detected.\r\n\r\nChanges\r\n---\r\n- Fixes: #3195 \r\n- Fixes: https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3253#issuecomment-446037832\r\n"""
392849366,3292,b'[vNext][UX] Two handed manipulation',b'\r\n![2018-12-19 16_43_03-unity 2018 2 14f1 personal 64bit - manipulationexample unity - mrtk-public-joh](https://user-images.githubusercontent.com/13754172/50258234-9841f700-03b3-11e9-9482-b672d7a5cbc4.png)\r\n\r\n\r\nOverview\r\n---\r\nScript and example scene that allows One or Two-handed manipulation.\r\n\r\nScript name\r\n---\r\nManipulationHandler.cs\r\n\r\nExample scene \r\n---\r\nManipulationExample.unity\r\n\r\nChanges\r\n---\r\n- Part of MRTK vNext UX controls: #3092\r\n\r\n'
392840685,3291,b'Fix issue where HoloLens hands were using the same MixedRealityInteractionMapping array',"b""Overview\r\n---\r\nSince the controller mapping profile only contains one array for HoloLens hands (since there's no differentiation between handedness), both hands are reusing the same array. This causes their values to overwrite each other, and causes events to fire endlessly when one hand is selecting and the other isn't.\r\n\r\nThis bug fix instead creates a copy of the profile's array, so we aren't reusing the same structure. This will also fix cases where a source might be lost while selecting, which would cause the state to change when a second, unselecting source is detected.\r\n\r\nChanges\r\n---\r\n- Fixes: #3195 \r\n- Fixes: https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3253#issuecomment-446037832\r\n"""
392754276,3290,b'added Disposable pattern to service interface.',b'Overview\r\n---\r\nImplements IDisposable pattern for services.\r\n\r\nChanges\r\n---\r\n- Fixes: #3289 \r\n'
392325392,3285,b'Pointer line length bugs',"b'Overview\r\n---\r\nLine 176 in LinePointer was adding 0 (the distance between a point and itself) for the raystep that hit the object. This now properly adds the distance between the start of the raystep and the hit point.\r\n\r\nAdditionally, `GetNormalizedLengthFromWorldLength` was consistently overshooting and providing a slightly larger value than the true normalized length. This code now subtracts the amount that was overshot.\r\n\r\nChanges\r\n---\r\n- Related to #2960 \r\n'"
392320649,3284,b'Properly set pointerName at pointer creation',"b""Overview\r\n---\r\nFix bug introduced by #2944, where a backing field was created but it was never populated.\r\n\r\nNow, the pointer sets its backing field anywhere its gameObject name is updated (here, it's set in the `base.Controller` setter)."""
392316004,3283,b'Fix bug where GazeCursor was never being set',"b""Overview\r\n---\r\nAfter #3113, the new `GazeCursor` property (and its underlying field) were never being set, thus causing all references to them to be null.\r\n\r\nNow, the `GazeCursor` property will return the `GazePointer`'s cursor.\r\n\r\nChanges\r\n---\r\n- Related to #2960 \r\n"""
392313649,3282,"b""Fix issue where some event data wasn't having its handedness properly reset""","b'Overview\r\n---\r\nSince we reuse a single event data object for each type of event data, it sometimes contained stale handedness data when the non-handed `Initialize` was used.\r\n\r\nChanges\r\n---\r\n- Related to #2960 \r\n'"
391840845,3279,b'Updated radial and checkBox themes',"b'Overview\r\nA bug on the radials and checkbox controls was pointed out last week. The dots and checks should only appear during the selected states. Updated the new theme to turn the dots and checks off.\r\n\r\nLooked at why the animation does not happen on the first click of a toggle button, but each future click themes animated correctly. \r\n\r\nFixed an issue with the InteractableActivatorTheme. It should not have easing controls sense it does not animate from activated to non activated. Finished a feature I started implimenting a while ago to remove the easing controls when a theme property does not require animation, like strings and audio clips. We could add themes later to fade audio or animate strings.\r\n\r\n- Fixes:\r\nRadial and check box toggles did not visually update correctly for each selected state (show and hide dot or check) .\r\nWhen a button moved to the selected state, like the toggle, the dot jumped to the other side instead of animated.\r\nTheme that do not support easing still showed easing controls.\r\n'"
391325535,3276,b'Cleanup build warnings',b'Overview\r\n---\r\n![image](https://user-images.githubusercontent.com/3580640/50036779-7d8d0e00-ffc0-11e8-935c-0fa2dc2257c4.png)\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/50036784-8251c200-ffc0-11e8-9d1f-7d5229840b2a.png)\r\n'
391237441,3275,b'Fix FocusProvider bug where the pointer was comparing to itself',"b'Overview\r\n---\r\nSince the pointer being unregistered is still in the list of pointers at this point in the code, it was comparing against itself, making this statement always true. This was causing focus lost events to not be fired in cases where they should be.'"
391211571,3274,b'fix cs0019 when building against the .net backend',b'Changes\r\n---\r\n\r\nAdd preprocessor directives and alternate implementation for the .net backend.\r\n\r\n- Fixes: #3273  .\r\n\r\nBuilt successfully with 2018.2.19 using .net and il2cpp'
390926971,3272,b'Simple state sharing',"b""Simple state sharing service\r\n---\r\nBaseline for a simple, flexible state sharing service.\r\n\r\nOn a continuum between POC apps and robust, enterprise-ready apps this service should fall somewhere in the middle. It doesn't try to guide you down an 'optimal' path like [advanced state sharing](https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3210), but it's not an automatic drag-and-drop solution either.\r\n\r\n```\r\npublic interface ISimpleState : IMixedRealityService\r\n{\r\n    Task<bool> HasKey(string key);\r\n    Task SetState<T>(string key, T state);\r\n    Task<T> GetState<T>(string key);\r\n}\r\n```\r\n\r\nThis service could be implemented using:\r\n- a remote database\r\n- a local database\r\n- a local file\r\n- an MRTK network connection service\r\n- Photon\r\n- etc. \r\n\r\nTasks make it easy to deal with varying amounts of latency in these approaches.\r\n\r\nSimpleStatePlayerPrefs\r\n----\r\nWraps PlayerPrefs in the SimpleState interface. Used for testing."""
390849401,3270,b'Merge from latest mrtk_development into mrtk_interactable + fixes',"b'Straightforward merge, then a few hopefully self-explanatory fixes.'"
390808283,3269,b'Editor update 2018.3.0f2',"b""Overview\r\n---\r\nUpdates the [project's editor to 2018.3.02f](https://unity3d.com/unity/whats-new/unity-2018.3.0)\r\n\r\nKey changes:\r\n---\r\n- .net 4.x equivalent is the default editor scripting runtime, and we no longer need to have the embedded dll for updating it.\r\n- Updated prefabs will not be backwards compatible with prev versions of the editor.\r\n\r\nChanges\r\n---\r\n- Fixes: #3192 \r\n- Fixes: #3183\r\n"""
390636101,3268,b'MRTK_DefaultPointerLine material is behind ui.',b'Overview\r\nIs there a reason why the pointer line has different material than the cursor?\r\n\r\n![shader](https://user-images.githubusercontent.com/3955210/49935607-c7e39180-fed1-11e8-82cb-ca60fa25bba9.PNG)\r\n![shader2](https://user-images.githubusercontent.com/3955210/49935621-d2059000-fed1-11e8-8da5-61ab9dae7a2f.PNG)\r\n\r\n\r\nChanges\r\nChanged to same shader as used by the default cursor material (with unity 2018.2.17f1)\r\n'
390635166,3267,b'MRTK_DefaultPointerLine material is hidden by ui',b'Overview\r\nIs there a reason why the pointer line has different material than the cursor?\r\n\r\n![shader](https://user-images.githubusercontent.com/3955210/49935607-c7e39180-fed1-11e8-82cb-ca60fa25bba9.PNG)\r\n![shader2](https://user-images.githubusercontent.com/3955210/49935621-d2059000-fed1-11e8-8da5-61ab9dae7a2f.PNG)\r\n\r\n\r\nChanges\r\nChanged to same shader as used by the default cursor material (with unity 2018.2.17f1)\r\n'
389562397,3255,b'SceneDescriptionPanel.prefab update',b'Overview\r\n---\r\nEditor keeps trying to update this prefab.\r\n'
389545639,3254,b'Fixed input events',"b""Overview\r\n---\r\nInput events weren't being continuously raised for some event types.\r\n\r\nChanges\r\n---\r\n- Fixes: #3253 \r\n"""
389464116,3252,b'Just a test to see how far ahead my branches are from development.',b'Overview\r\n---\r\nJust a branch to see the list of the changes against mrtk development.'
389397538,3251,b'Boundary system physics layer configuration settings',b'Overview\r\n---\r\nUpdate the boundary system to have a configurable physics layer setting for the generated content.\r\n![image](https://user-images.githubusercontent.com/13334553/49749057-256ea880-fc5c-11e8-8ac9-965cad143124.png)\r\n\r\nChanges\r\n---\r\n- Fixes: #3235\r\n'
389070026,3249,b'Updated Unity Editor verison to 2018.2.19f1',"b'Updated Unity editor to [2018.2.19f1](https://unity3d.com/unity/whatsnew/unity-2018.2.19)\r\n\r\nFixes\r\n---\r\n- Animation: Fixed Animation Window selection of nested Animation component hierarchies children of Animator component hierarchies. (1089015)\r\n- Animation: Fixed Animation Window selection of nested Animation component hierarchies children of Animator component hierarchies. (1089015, 1096352)\r\n- Build Pipeline: Fixed ""Couldn\'t call method ShowProfilerWindow"" error during Build & Run with the Autoconnect Profiler option set. (1059763)\r\n- Build Pipeline: Fixed Build & Run with Autoconnect Profiler. (1059763)\r\n- Editor: Fixed this issue by restricting the insertion of menu items into a given submenu to a prescribed limit of 1000 items and displays a warning about the same. (1039181)\r\n- GI: Fixed an ordering issue with textures when baking in auto mode. (1064388)\r\n- Graphics: Fixed crash if a shader attempts to access a ComputeBuffer that is not set. (1083323)\r\n- IL2CPP: Fixed IL2CPP build failing if Visual Studio 2019 is installed on the machine.\r\n- IL2CPP: Fixed non-zero based arrays via Array.CreateInstance not being correctly created. (1099608)\r\n- IL2CPP: Fixed string fields of types marked with CharSet.Auto as Unicode not being properly marshalled. (1087594)\r\n- Networking: Fixed syncvar variables sequential refreshing issue. (1085466, 1102859)\r\n- Physics: Fixed RaycastHit.textureCoord performance issue, was internally copying whole mesh index buffer for no good reason. (1065218)\r\n- Scripting: Fixed an issue where SynchronizationContext.Current.CreateCopy would return a default SynchronizationContext and not a UnitySynchronizationContext. (1096869)\r\n- Scripting: Fixed scripting runtime version not changing when modifing it on ProjectSettings.asset from any external tool like version control / overwriting the file / etc. (1010811)\r\n- Universal Windows Platform: Fixed an assert that is triggered when Xbox gamepads are disconnected in some situations. (1080114)\r\n- Universal Windows Platform: Fixed crash on app start when using LWRP. (1064175)'"
389067210,3248,b'Updated editor setup scripts',b'Overview\r\n---\r\n- Removed some unused methods and cleaned up the class a bit.\r\n- Enables shared depth buffer for Windows Mixed Reality in the project by default.\r\n\r\nChanges\r\n---\r\n- Fixes: #3158\r\n- Fixes: #1939\r\n- [x] Fixes: #3259\r\n\r\nBlocked by\r\n- [ ] #3269 '
389048176,3247,b'Diagnostics Fixes',b'Overview\r\n---\r\nFixes exception on UWP platform when trying to get cpu use\r\n\r\nChanges\r\n---\r\n- Fixes: #3245 \r\n'
388874864,3244,b'Change form to from',"b'Controls form how the user moves and interacts in the scene, ranging from:\r\nto this\r\nControls from how the user moves and interacts in the scene, ranging from:\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'"
388863578,3243,b'vNEXT Base Networking System Drop',"b'Overview\r\n---\r\nThe base networking system architecture, documentation, and implementation.\r\n\r\nBlocked by\r\n---\r\n- [x] #3242 \r\n- [ ] #3234 '"
388734472,3242,b'Updated base Profile Inspectors.',b'Overview\r\n---\r\nUpdated the base profile inspectors a bit so that third party users can copy/paste custom made `MixedRealityProfile`s with ease without having to know about MRTK specific inspector functionality.\r\n\r\nBreaking Changes\r\n---\r\n- Renamed `MixedRealityBaseConfigurationProfileInspector` to `BaseMixedRealityToolkitConfigurationProfileInspector`\r\n- Moved `CheckMixedRealityConfigured` to `MixedRealityInspectorUtility.CheckMixedRealityConfigured`'
388704834,3241,b'Sync feature/mrtk package manager <- mrtk development',b'Overview\r\n---\r\nSyncs the feature branch with development'
388704025,3240,b'Sync feature/ audio manager <- Mrtk development',b'Overview\r\n---\r\nSyncs the feature branch with development'
388703329,3239,b'Sync bounding box <- Mrtk development',b'Overview\r\n---\r\nSyncs the feature branch with development'
388700219,3238,b'Sync feature/ mrtk sharing <- mrtk development',b'Overview\r\n---\r\nSyncs branch with development'
388699555,3237,b'feature/Lumin <- Mrtk development',b'Overview\r\n---\r\nSyncs branch with development\r\n'
388403857,3234,b'Implementation of injecting profile into system constructors',"b""Overview\r\n---\r\nImplements the proposed change of adding the profile to the system constructors.\r\n\r\nChanges\r\n---\r\n- Fixes: #3233 \r\n\r\nBreaking Changes\r\n---\r\n- Added surface properties to `IMixedRealityBoundarySystem` to facilitate conformity and initialization of properties in the constructor.\r\n- Systems shouldn't read from the profile after initializing their properties in their constructor."""
388362097,3232,b'Remove a couple unnecessary lines from UI camera config',"b""Overview\r\n---\r\nRemove configuration of near/far clip planes on the UI raycast camera after testing and finding that their values don't seem to affect raycasting at all. This is mainly just to avoid confusing any future readers who may assume it is important. \r\n"""
387995369,3230,b'Fix UI raycasting on Hololens',"b'Overview\r\n---\r\nThis change addresses the issue described in #3218. Unity UI is raycasted into using a special disabled camera whose projection matrix informs the raycast. The camera was being created with a target display index of 1, or the second display, which does not exist on Hololens. This seems to be ignored in editor when there is no other display, but on Hololens it causes all UI raycasts to return no results, likely due to an invalid projection matrix for a non-existent display.  \r\n\r\nThere were a bunch of other properties on the camera being set unnecessarily, which I also removed in the interest of cleanliness. \r\n\r\nChanges\r\n---\r\n- Fixes: #3218 \r\n'"
387933683,3229,"b'Update capitalization of ""keyword"" in SpeechInputHandler Inspector'",b'Overview\r\n---\r\nFrom this:\r\n![image](https://user-images.githubusercontent.com/3580640/49542270-efab7780-f889-11e8-8672-ddf3963c6b3c.png)\r\n\r\nTo this:\r\n![image](https://user-images.githubusercontent.com/3580640/49542105-76138980-f889-11e8-9277-d3e5930a126d.png)\r\n'
387927341,3228,b'Set CurrentPointerTarget properly when updating PointerData',b'Overview\r\nThis change addresses the bug described in #3216. The method used for updating `PointerData` with canvas raycast information was missing a line to assign the current pointer target. I fixed this with a slight refactor that should make errors like this harder to make by reducing duplicate code and properties on the object. \r\n\r\nChanges\r\n- Fixes: #3216\r\n'
387891381,3227,b'Fixing incorrect alpha channel values for channel maps and alpha tested (cutout) materials.',"b'Materials using channel maps or alpha tested (cutout) materials could report incorrect alpha values. This is not something apparent in usual usage, but could present problems during Mixed Reality or BEV capture. \r\n'"
387566755,3224,b'Updated base config profile inspector ',"b""Overview\r\n---\r\n- Updated the `MixedRealityBaseConfigurationProfileInspector.RenderProfile()` to have an optional GUIContent and show add profile button parameters.\r\n- Added a parameter to the check lock profile method to optionally override the profile lock if a derived profile has the need for it. (Useful if you have buttons that don't change the serialized data of the profile, but you want users to navigate different parts of the profile)\r\n- Fixed #3225"""
387532690,3223,b'Customer feedback: add profile inspector foldouts',"b'Overview\r\n---\r\nPer customer feedback, adds foldouts to the following profile inspectors:\r\n\r\n* Mixed Reality Toolkit Configuration\r\n* Boundary Visualization\r\n* Camera\r\n* Diagnostics\r\n* Spatial Awareness\r\n* Speech\r\n\r\nChanges\r\n---\r\n- Fixes: #3215 .\r\nPlus a few minor cleanup changes (ex: replace GUILayoyt.Space(12f) with EditorGUILayout.Space() [ Same visuals, easier to read ] and add a comment.'"
387512362,3221,b'Test PR: Test of duplicate branch of PUN Classic',b'Overview\r\n---\r\nJust a test to see if the same file changes are in #3111 \r\n'
387510363,3220,b'webrtc preview <- mrtk development sync',b'Overview\r\n---\r\nsyncs up the webrtc preview branch with mrtk development'
387508386,3219,b'mrtk sharing <- mrtk development sync',b'Overview\r\n---\r\nUpdated mrtk sharing branch with mrtk development\r\n'
387437803,3214,b'Update sharing photon preview with latest Mrtk development changes',b''
387057913,3210,b'Advanced State Sharing System (and related sub-systems)',"b""Advanced state Sharing System (and related sub-systems)\r\n---\r\n\r\nDescriptions of SessionManager, UserManager / DevicePool and AnchorSynchronizer / UserAlignment will be expanded as discussion continues.\r\n\r\nYou can find demos for most major components and systems in MixedRealityToolkit-Examples/Demos/Sharing/ along with a readme explaining what they do.\r\n\r\nThese components are currently implemented using Photon's PUN2 package . That package is included in this branch along with an app ID for testing.\r\n\r\nStateArray\r\n---\r\nThe backbone of app state sharing. Essentially a dictionary of structs. Changes made to this dictionary on the server are stored locally until `Flush` is called, at which point the new states propagate to all clients. Changes made on the client are stored locally until they are replaced by a value from the server. \r\n```\r\npublic interface IStateArray<T> : IStateArrayBase, IEnumerable<T> where T : struct, IItemState<T>\r\n{\r\n    T this[sbyte key] { get; set; }\r\n    void Flush();\r\n}\r\n```\r\n\r\nState structs must implement the IItemState interface:\r\n```\r\npublic interface IItemState<T>\r\n{\r\n    short Key { get; }\r\n    bool IsDifferent(T from);\r\n    T Merge(T clientValue, T serverValue);\r\n}\r\n```\r\n\r\n`Key` is used to assign and retrieve the state. (We found that keeping the key attached to states vastly simplifies state sharing in general.)\r\n\r\n`IsDifferent `is used to determine when a state has changed. This is preferable to a straight value equality comparison for a couple of reasons:\r\n- Value-type comparisons can generate garbage.\r\n- States often have fields or properties which would result in redundant comparisons (eg a Vector3 property which draws from a set of shorts for its value).\r\n- States often have fields or properties that require interpretive comparison (eg time-related values).\r\n\r\n`Merge `is used to resolve conflicts between client and server states. If an incoming state from the server is found to be different than a locally stored state on the client, the two states are merged before the client value is over-written.\r\n\r\n**Issues**\r\n- **Server** concept should be changed to **Authority** to make system more peer-to-peer friendly.\r\n- We need a better system for crunching / serializing item states, especially position / rotation states.\r\n\r\nAppState\r\n---\r\nManager class for user-defined StateArrays. Makes the business of getting / setting / adding states to StateArrays straightforward.\r\n\r\nMain interfaces / methods:\r\n```\r\npublic interface IAppStateReadOnly\r\n{\r\n    T GetState<T>(short stateKey) where T : struct, IItemState<T>;\r\n    void Flush<T>() where T : struct, IItemState<T>;\r\n    void Flush();\r\n    ...\r\n}\r\n\r\npublic interface IAppStateReadWrite : IAppStateReadOnly\r\n{\r\n    void AddState<T>(T state) where T : struct, IItemState<T>;\r\n    void SetState<T>(T state) where T : struct, IItemState<T>;\r\n    ...\r\n}\r\n```\r\n\r\n`Flush` serves a different purpose on client / server. On client, flush sends all locally stored values to the server via the state pipe. On server, Flush just calls Flush on the targeted StateArray(s).\r\n\r\n\r\n\r\n**Initialization**\r\nBy default AppState has no StateArrays. On startup AppState automatically seeks out IAppStateSource components, which provide a list of IItemState types for which StateArrays are needed. (Eg `AppStateUsersSource` which requests StateArrays for UserState and UserSlot.)\r\n```\r\npublic interface IAppStateSource : INetworkBehaviour\r\n{\r\n    IEnumerable<Type> StateTypes { get; }\r\n\r\n    void GenerateRequiredStates(IAppStateReadWrite appState);\r\n}\r\n```\r\n\r\n**Issues**\r\n- In IL2CPP builds state array types must be defined ahead of time. (In .NET builds types can be created dynamically.) I'm working on an inspector that detects whether a state array type has been defined to accompany required state types.\r\n\r\nStateObjects\r\n---\r\nThis system handles a ton of boilerplate for spawning / updating objects associated with a particular item state. Typical use case would be generating and updating Holograms.\r\n\r\nDevelopers create a set of prefabs for each state type requiring an associated in-game object. Each prefab must have a component that inherits from the StateObject base class, which implements the IStateObject interface:\r\n```\r\npublic interface IStateObject<T> : IGameObject where t : struct, IItemState<T>\r\n{\r\n    short ItemNum { get; }\r\n    bool IsUserType { get; }\r\n    bool IsLocalUser { get; }\r\n\r\n    IAppStateReadOnly AppState { get; }\r\n    IStateView StateView { get; }\r\n\r\n    T PreviousState { get; }\r\n    T CurrentState { get; }\r\n}\r\n```\r\nAdditional components on this prefab (including the class inheriting from StateObject) can implement the IStateListener interface to receive updates about state changes:\r\n```\r\npublic interface IStateListener<T> where T : struct, IItemState<T>\r\n{\r\n    void OnStateInitialize(IStateObject<T> stateObj, T initState);\r\n    void OnStateChange(IStateObject<T> stateObj, T oldState, T newState);\r\n}\r\n```\r\nLastly, the state object can be used as a conduit for state changes via the ChangeState method:\r\n```\r\npublic class HologramStateObject : StateObject<HologramState>, IStateListener<HologramState>\r\n\r\n    void OnStateChange(IStateObject<HologramState> stateObj, HologramState oldState, HologramState newState) \r\n    {\r\n        if (timeToChangePosition)\r\n        {\r\n            newState.Position = transform.position;\r\n            // automatically writes to app state\r\n            ChangeState(newState);\r\n        }\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nSessionManager\r\n---\r\nProvides a skeletal framework for a structured mixed-reality sharing experience using AppState and StateObjects. Runs set of developer-defined 'stages' in a sequence. Example of a session stage progression might be:\r\n1. JoinGame\r\n2. ChooseRole\r\n3. PlayGame\r\n4. ShowHighScores\r\n(Repeat)\r\n\r\nSession stages are stored as prefabs and instantiated at runtime. These prefabs must have a component that implements the abstract class SessionStageBase, which has the following methods:\r\n```\r\npublic abstract void OnStageEnter (ITimeSource timeSource, IAppStateReadWrite appState,  IUserView users, IStateView stateView);\r\npublic abstract void OnStageExit (ITimeSource timeSource, IAppStateReadWrite appState,  IUserView users, IStateView stateView);      \r\npublic abstract IEnumerator TransitionIn (ITimeSource timeSource, IAppStateReadWrite appState,  IUserView users, IStateView stateView);\r\npublic abstract IEnumerator RunStage (ITimeSource timeSource, IAppStateReadWrite appState,  IUserView users, IStateView stateView);\r\npublic abstract IEnumerator TransitionOut (ITimeSource timeSource, IAppStateReadWrite appState,  IUserView users, IStateView stateView);\r\n```\r\nTransitionIn, RunStage and TransitionOut are enumerators to make starting / stopping / pausing trivial.\r\n\r\nThe main purpose of a session stage is to monitor / modify the app state in response to user actions. This keeps flow of control for the app as a whole out of the hands of individual StateObjects making it easier to track / control.\r\n\r\nSince stages are instantiated as prefabs they can be accompanied by objects which are controlled by the stage script (eg a scoreboard). This provides an alternative to the one-state, one-object approach of StateObjects.\r\n\r\n**Issues**\r\n- Should probably be renamed to differentiate from network session.\r\n- No support for scene loading / unloading, which is a must IMO.\r\n- No support for branching experiences.\r\n\r\nUserManager / DeviceSource\r\n---\r\nSystem for managing users and devices associated with a user. Uses AppState to manage user slots and user states.\r\n\r\n**Issues**\r\n- Lobby system is bare-bones.\r\n- Requires manual redefinition of enum values for UserTypeEnum / UserTeamEnum - would be better if this were templatized.\r\n- Assumes the existence of an AnchorSynchronizer.\r\n\r\nAnchorSynchronizer / UserAlignment\r\n---\r\nSystem for synchronizing locally acquired anchor positions, then using that shared information to align users to the same shared physical space."""
387030101,3209,b'update htk_development with doc changes in master',b''
387014597,3208,b'Add standard Microsoft Code of Conduct',b'Add standard Microsoft Code of Conduct.'
386988405,3207,b'Feature/mrtk sharing update',b'Overview\r\n---\r\nUpdates the mrtk sharing branch with the latest changes from mrtk deveopment\r\n'
386988008,3206,b'sync feature branch with development branch changes.',b'Overview\r\n---\r\nJust updates the branch to the latest\r\n'
386911901,3204,b'Updated unity editor to 2018.2.18f1',"b'# [2018.2.17f1 Release Notes](https://unity3d.com/unity/whatsnew/unity-2018.2.17)\r\n## Improvements\r\n- XR: Update Vuforia to version 7.5.26.\r\n\r\n## Fixes\r\n\r\n- Asset Bundles: Fixed Changing addressableNames doesn\'t trigger bundle rebuild. (996380)\r\n- Editor: Fixed an issue where the camera frustum gizmo would always draw the near clipping plane at world origin. (1084269)\r\n- iOS: Fixed a crash when using using static const std::string in Xcode 9. (1050875, 1096815)\r\n- Licenses: Fixed an issue where licence activation didn\'t work when using the -nographics command line flag. (1043511, 1090055)\r\n- Package Manager: Added a warning message if you disable a package and that causes dependencies to also be disabled.\r\n- Package Manager: Added information to compiler errors explaining if a package has been disabled as a dependency of another package.\r\n- Package Manager: Added information to info messages for disabled components in the inspector explaining if a package has been disabled as a dependency of another package.\r\n- Package Manager: Fixed compiler errors having information about missing types from disabled built-in packages when using implicit namespaces and the new scripting runtime. (1084240)\r\n- Physics: Improved performance when baking meshes offline. (1075709, 1091429)\r\n- Scripting: Fixed an issue where DLL references in mcs.rsp were not processed correctly in Visual Studio. (1085634, 1089141)\r\n- Unity Test Runner: Fixed an issue where TearDown and UnityTearDown are skipped for tests that fail due to errors logged with UnityEngine.Log.Error. (1077871)\r\n- Universal Windows Platform: Fixed ENABLE_MANAGED_JOBS not being defined when building scripts on IL2CPP scripting backend. (1085045)\r\n- Universal Windows Platform: Fixed memory corruption when using burst jobs. (1094198)\r\n- Windows: Fixed standalone player crashing on startup on machines where Citrix Workstation is installed. (1082241)\r\n\r\n# [Unity 2018.2.18f1 Release Notes](https://unity3d.com/unity/whatsnew/unity-2018.2.18)\r\n## Fixes\r\n\r\n- Android: Fixed crash on Android 9. (1102065)\r\n- Editor: Fixed function keys incorrectly producing characters within input fields. (1057122)\r\n- Editor: Fixed issue with precompiled managed assemblies (.dlls) in the Assets folder getting loaded twice on startup, causing two InitializeOnLoad calls where Unity API calls such as AssetDatabase.LoadAssetAtPath would fail in the first InitializeOnLoad. Now there is only one first InitializeOnLoad call and Unity APIs work as expected. (1060352)\r\n- GI: Fixed Reflection Probe cubemaps being reimported if the user selects the same Lightmap Encoding quality setting. (1067156)\r\n- GI: Fixed rendering artifacts when GPU instancing and real-time GI are used together. (1053521)\r\n- Graphics: Fixed crash when loading asset bundle built from an older unity version. (1078602)\r\n- Graphics: Fixed RGBA4444 texture support when using OpenGL ES. (1077689, 1079024)\r\n- IL2CPP: Fixed the marshalling of char arrays to be two byte characters when CharSet.Unicode is used. This corrects the behavior of some Windows Registry assemblies. (1086670)\r\n- IMGUI: Fixed script recompilation not happening on OSX.\r\n- IMGUI: Fixed Unity Editor no longer automatically unlocking assembly reload. (960397)\r\n- iOS: Fixed VideoPlayer.isPlaying returning true when the video is paused. (1086705)\r\n- Package Manager: Fixed a ""Failed to fetch versions information"" error being displayed in Package Manager window for all unknown packages.\r\n- Shuriken: Fixed Trails using the old position when a Move and Clear is performed. (1061683)\r\n- Shuriken: Fixed Renderer.bounds returning the wrong bounds when multiple renderers were on the same GameObject. (1088716, 1090058)\r\n- Timeline: Fixed issue when instantiating PlayableDirectors loaded from AssetBundles losing ExposedReference names. (1082467)\r\n- VR: Fixed tracking issues with PSVR HMD.\r\n- Vulkan: Fixed editor crash when entering playmode from paused mode with profiler window open. (1082921)'"
386580498,3203,b'Some fixes',"b'## Changes\r\n\r\n- Updated two profile inspector icons\r\n\r\n- The `MixedRealityInputActionRulesInspector` had an error where you could see the ""Back to Configuration Profile"" message even if there was no MixedRealityToolkit in your scene.\r\n\r\n'"
386357518,3201,"b""Remove input mappings if toolkit's input system is disabled.""",b'Overview\r\n---\r\n- Removes the input mappings if the input system is disabled\r\n'
386265656,3200,b'Adds event time to all event datum',"b""Overview\r\n---\r\n- Moved the spatial awareness `EventTime` to the base generic event data class. Shouldn't be a breaking change.\r\n- Added `EventTime` to the base input event data class"""
385975806,3199,b'Add base.OnEnable to Spatial Awareness inspector',"b""Overview\r\n---\r\nThis inspector was missing the base call, so some expected values weren't being set properly. In particular, this broke copy + paste."""
385695779,3196,b'TouchScreenInputSource virtual  functions ',b'Overview\r\n---\r\nMake TouchScreenInputSource .cs functions virtual so its possible to override them when inderiting from TouchScreenInputSource \r\n\r\nChanges\r\n---\r\n- Fixes: https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3197'
384549346,3189,b'Updated graphic on readme page to match MRDL page',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
384471595,3188,b'Audio Manager 2.0',b'Overview\r\n---\r\nAdded node-based editor for audio events and runtime audio manager.\r\n'
384458452,3187,b'Move editor controller model fix from htk_dev to master for release',b'Overview\r\n---\r\nPR for #3181 htk_dev -> release.\r\n'
384160578,3186,b'Updated service locator and unit tests',"b'Overview\r\n---\r\n- Updated the service locator with better names, cleaner more compact code, and unit tests.\r\n- Organized unit tests a bit more.\r\n- Renamed `EnableService` to `EnableAllServicesByType`\r\n- Renamed `DisableService` to `DisableAllServicesByType`\r\n- When un-registering a service it will also call disable and destroy on that service, much how like the service registration will call initialize and enable on the service if the service locator has already went through its initialization.\r\n\r\nChanges\r\n---\r\n- Fixes: #3185 \r\n\r\nBlocked by\r\n---\r\n- [x] #3173'"
383274100,3181,b'Delay trying to load controller models to enable Editor loading',"b""Overview\r\n---\r\nWhen launching in the editor, there's a race condition between sources being present in the `DetectedSources` list and the editor's holographic window being available, which is needed to get the platform sources to load the model.\r\n\r\nTo resolve this, I moved the initial attempt to load out of both `Awake` and `onBeforeRender`, so it now only tries to load in `Update` or `SourceDetected`. I've found this to fix controller model loading in the editor in all my tests.\r\n\r\nI also fixed unwanted alternate models from being cached during source lost and properly cleaned up the model during destroy.\r\n\r\nChanges\r\n---\r\n- Fixes: #1645\r\n- Fixes: #2682\r\n- Fixes: #2805\r\n- Fixes: #2861 """
383212725,3179,b'merge dev -> plane finding feature branch',b'\r\n'
382903290,3178,b'Fix overwriting bool in RequestPointers',"b'Overview\r\n---\r\nLine 49 was overwriting a method parameter inside a `for` loop.\r\n\r\nThe result of this was that subsequent pointers in the pointer profile were using the overwritten value instead of their own bool checks.\r\n\r\nFor example:\r\nPutting a specifically typed pointer above a `None` typed pointer in the pointer profile.\r\nThe specifically typed pointer will overwrite `useSpecificType` to true, which will cause all following pointers to keep using `useSpecificType` as true, since line 49 will be skipped.'"
382837052,3176,b'merge master -> htk_development',b'picks up the branch changeover notice'
382835340,3175,b'add branch changeover notice',b'Adds a notice of the intent to change the default branch to focus on vNext. This is intentionally going into master (with an immediate merge back in to htk_development).'
382809882,3174,b'Fixed diagnostics null ref when disabling at edit time',b'Overview\r\n---\r\n- Fixed a null ref when disabling diagnostics system at edit time.\r\n- Only enable diagnostics system if a valid profile is assigned.'
382785418,3173,b'Base PR for IMixedRealityDataProviders',b'Overview\r\n---\r\n- Added `IMixedRealityDataProvider` interface and base abstract type.\r\n- Updated `SystemType` to filter out abstract types from being assigned in the dropdown inspector.\r\n- Added assert to the base profile inspector to ensure that the `Base.OnEnable()` is being called correctly from derived types.\r\n- Updated public `MixedRealityComponents` to be a readonly list and renamed it to `RegisteredMixedRealityServices`\r\n\r\nChanges\r\n---\r\n- Fixes: #3170 '
381998817,3167,"b'Revert ""Add support for specifying debug logging levels - Part 1 (MixedRealityToolkit component support)""'","b""Re-opened this PR cause we didn't get it fixed in time.\r\n\r\nReverts Microsoft/MixedRealityToolkit-Unity#3143\r\n\r\nFixes #3162 \r\nFixes #3161 \r\nFixes #3160"""
381997211,3166,b'Utility to swap source code with binary assembly compiled by editor',"b""Overview\r\n---\r\nThis utility adds the ability to swap out the source code for the compiled assembly found in the project's `Library/ScriptAssemblies` folder. The source code is then hidden from the editor by pre-pending the name with a period.\r\n\r\nUsing this utility reduces the number of projects found in the solution when the assembly is used in place of the source code and enables platform specific code to run in the editor (For example, future usage with WMR controllers).\r\n![image](https://user-images.githubusercontent.com/13334553/48677735-26655c00-eb2e-11e8-8387-4f4ddf760552.png)\r\n\r\nTo replace source code with assembly:\r\n---\r\n- Select any Assembly Definition\r\n- Click on the settings (gear) icon in the upper right of the inspector window\r\n- Click replace source with assembly\r\n\r\nTo replace assembly with source code:\r\n---\r\n- Select either the plugin, or the Assembly Definition\r\n- Click on the settings (gear) icon in the upper right of the inspector window\r\n- Click Replace assembly with source\r\n\r\nKnown issues:\r\n---\r\n- Can **_ONLY_** be used on assembly definitions that do not contain objects that derive from `UnityEngine.Object`\r\n- Sometimes when replacing the source with the assembly there is a reflection invocation exception about a missing `UnityEngine.CoreModule`. Seems to finish importing correctly and works as expected. Might be a unity bug? More research is needed. This error can be safely dismissed.\r\n    - I thought about just catching the exception, but I'm waiting to follow up from Unity QA about possible causes and even solutions.\r\n- Sometimes when replacing the source with the assembly and the user tabs out or the editor loses focus and then regains focus, it may raise warnings about missing meta files. This warning can be safely dismissed."""
381819879,3165,b'Created a base extension service profile for future use.',b'Overview\r\n---\r\n- Created a base extension service profile for future use.\r\n- Helps with object picker to pick only extension service profile types.\r\n\r\nBlocked by\r\n---\r\n- [ ] #3242'
381804874,3164,"b'Address 3160, 3161 and 3162'","b'- Fixes: #3160\r\n- Fixes: #3161 \r\n- Fixes: #3162 (also investigating a better, longer term fix)'"
381786095,3163,"b'Revert ""Add support for specifying debug logging levels - Part 1 (MixedRealityToolkit component support)""'","b""Let's get a better game plan for logging.\r\n\r\nReverts Microsoft/MixedRealityToolkit-Unity#3143\r\n\r\nFixes #3162 \r\nFixes #3161 \r\nFixes #3160 """
381768228,3159,b'add exception handling around Activator.CreateInstance calls',b'Overview\r\n---\r\nAdds exception handling around usage of Activator.CreateInstance to prevent the premature termination of MixedRealityToolkit.Initialize().\r\n\r\nChanges\r\n---\r\n- Fixes: #3037 .\r\n'
381685768,3155,b'Updated editor to 2018.2.16',"b'Overview\r\n---\r\n[Release Notes](https://unity3d.com/unity/whatsnew/unity-2018.2.16):\r\n\r\n- IL2CPP: Add support for CultureInfo in WebGL when exceptions are disabled. (1083520)\r\n- IL2CPP: COM Callable Wrappers for managed arrays now implement IReferenceArray interface. This fixes cases where Windows Runtime APIs expected objects to implement this interface, and if they don\'t, they report errors such as ""Data of this type is not supported."" and ""Error trying to serialize the value to be written to the application data store"". (1054327)\r\n- IL2CPP: Fixed a call to GetGenericArguments on a MethodInfo not working for an inflated generic type. (1087317)\r\n- IL2CPP: Fixed COM Objects representing Windows.Foundation.IAsyncAction and Windows.Foundation.IAsyncOperation getting destroyed after converting them to System.Threading.Tasks.Task via ""AsTask"" extension method. (1086209)\r\n- IL2CPP: Fixed Debug.WriteLine() not implemented. (1088770)\r\n- IL2CPP: Fixed Marshal.SizeOf not supported for types with a generic base class when the base class does not use the generic type in any field. (1083239)'"
381412069,3152,b'Moved teleportation system from sdk -> core.',b'Overview\r\n---\r\nMoved default teleportation system from sdk -> core\r\n\r\nChanges\r\n---\r\n- addresses #3053 & #3115 for Teleportation System and components.\r\n'
381409774,3151,b'fixed build warnings',b'Overview\r\n---\r\nfixed build warnings\r\n\r\nChanges\r\n---\r\n- Fixes: #3133\r\n'
381407359,3150,b'Moved Diagnostics system from sdk -> core and updated',"b""Overview\r\n---\r\n- Moved diagnostics system from SDK to core.\r\n- Removed demo configuration profiles\r\n    - Updated speech commands with diagnostic keywords\r\n- Updated demo scene to turn on diagnostics on start so we didn't have to have a custom profile for the demo.\r\n- Diagnostics system is now patterned after the other systems and the internal data types have been turned into public structs for ease of use and better perf.\r\n\r\nChanges\r\n---\r\n- Fixes: #2965\r\n- Fixes: #3131\r\n- addresses #3053 and #3115 for Diagnostics System and components.\r\n\r\nBreaking Changes\r\n---\r\n- Users who have created their own configuration profile will need to reassign the Diagnostics type, and re-configure their diagnostics profile.\r\n"""
381368296,3149,b'Moved default boundary system implementation from sdk -> core',"b'Overview\r\n---\r\nMoved the default boundary system implementation from SDK to Core\r\n\r\nChanges\r\n---\r\n- Fixes: Improper cleanup of GameObjects when entering playmode.\r\n- addresses #3053 & #3115 for Spatial Awareness System and components.\r\n\r\nBreaking Changes\r\n---\r\n- If users have a custom configuration profile, they will need to re-assign the boundary type.'"
381346614,3148,b'Spatial Awareness system refactor & move',"b""Overview\r\n---\r\nUpdated the spatial observer location to be in the SDK, with the spatial awareness default implementation.\r\n\r\nChanges\r\n---\r\n- Fixes: #3147 \r\n- Fixes: #3226\r\n- addresses #2905 for Spatial Awareness System and components by adding assembly definitions for platform specific code. Future updates when package manager arrives will install/uninstall platform specific stuff as needed.\r\n- addresses #3053 & #3115 for Spatial Awareness System and components.\r\n\r\nTODO\r\n---\r\n- [x] #3170\r\n- [x]  #3173\r\n- [x] #3190\r\n\r\nBreaking Changes\r\n---\r\n1. If users have a custom configuration profile, they will need to re-assign the spatial awareness system type.\r\n2. If have a custom Extension Services provider profile, and using the default spatial observer implementation, they'll need to update their service entry with the updated type.\r\n\r\n- All of the configuration settings from the spatial awareness system have moved into the spatial observer data providers. The spatial awareness system now only routes the event data from the spatial observers to the handlers per arch guidelines."""
380864445,3143,b'Add support for specifying debug logging levels - Part 1 (MixedRealityToolkit component support)',"b'Overview\r\n---\r\nThis change addresses the core aspects of #3082, by implementing the infrastructure for enabling developer customers to configure the types of debug log messages they wish to see. This setting is set in the MixedRealityToolkitConfigurationProfile.\r\n\r\nAs part of this, the DebugUtilities methods were updated / added to enable code to participate by honoring the toolkit\'s configured level. For example:\r\n\r\n    DebugUtilities.LogWarning(""My warning message"");\r\n\r\nIf an application developer wishes to maintain a separate level (i.e. one for the toolkit and one for the application) they can use the following pattern:\r\n\r\n    DebugUtilities.LogWarning(appSpecificLoggingLevel, ""My warning message"");\r\n\r\nTo keep this change small (and to address the first part of #3077), this PR focuses only on the LoggingLevels enum, the DebugUtilities class, config profile support and the MixedRealityToolkit object. Core and extension system updates will follow.\r\n\r\nFixes: #3144 '"
380384495,3139,b'Feature/mrtk documentation <- mrtk_development sync',b'Overview\r\n---\r\nupdates mrtk_documentation with changes from mrtk_development'
380381412,3138,b'mrtk_sharing <- mrtk_development update',b'Overview\r\n---\r\nupdate the mrtk_sharing branch with changes fro mrtk_development'
380379379,3137,b'Feature/mrtk sharing <- mrtk_development sync',b'updating the mrtk_sharing branch with latest changes from mrtk_development'
380334408,3136,b'Updated README for QRTracker',"b""I needed to reboot my PC for the `EnableQRTrackerDefault` toggle to work, seems restarting the MR portal wasn't sufficient.\r\n\r\nSo I'm adding it as a potential troubleshooting step.\r\n"""
380162816,3135,b'Added Branch Guide (HTK) - resolves #3088 ',"b'Overview\r\n---\r\nAdded a new Branch guide, needs replicating straight to the master and updated the homepage with a link\r\n\r\nReplaces PR #3090 due to GitHub meh\r\n\r\nChanges\r\n---\r\n- Fixes: #3088\r\n'"
380159309,3134,b'Added Branch Guide (mrtk) - resolves #3088',"b'Overview\r\n---\r\nAdded a new Branch guide, needs replicating straight to the mrtk_release and updated the homepage with a link\r\n\r\nReplaces #3089 as GitHub got messed up\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #3088 \r\n'"
380011761,3132,b'Merge HTK release 2017.4.3 into master',b'Overview\r\n---\r\nMerge the current htk_development branch into master in preparation of marking the 2017.4.3 release.'
379992331,3129,b'Merge latest changes from mrtk_development branch to feature/LuminPlatform',b'Overview\r\n---\r\nMerges the latest changes from mrtk_development\r\n'
379899112,3126,b'Fixed diagnostics system setup warnings',b'Overview\r\n---\r\nFixes warnings when loading scene.\r\n\r\nChanges\r\n---\r\n- Fixes: #3124 \r\n'
379891459,3123,b'fixed core system cache',b'Overview\r\n---\r\nUpdated MixedRealityToolkit to clear core system cache\r\n\r\nChanges\r\n---\r\n- Fixes: #3122 \r\n'
379849319,3121,b'Updated core editor setup classes.',"b'Overview\r\n---\r\n- Added ignore to settings dialog popup.\r\n![image](https://user-images.githubusercontent.com/13334553/48376150-e52d0200-e67e-11e8-99e3-c6158788f3e0.png)\r\n- Customized message for each setting that will be changed.\r\n    - Only settings that need to be updated will be shown.\r\n- Added preference item to disable ignore if needed.\r\n![image](https://user-images.githubusercontent.com/13334553/48364249-c61d7880-e65c-11e8-9b91-be87881aef9e.png)\r\n- Changed icons to blue and disabled icon updater.\r\n![image](https://user-images.githubusercontent.com/13334553/48368447-95434080-e668-11e8-8f75-31f3438e742e.png)\r\n\r\n\r\nChanges\r\n---\r\n- Related to, but does not address #3118\r\n'"
379506596,3117,b'Fixed issues with double click events and see-it/say-it functionality',"b'Overview\r\nFixed issues with double click events, especially when isGlobal is set. Fixed SeeIt-SayIt functionality, General bug fixes and filled in missing themes and receivers. Expanded custom receiver example in demo scene\r\n\r\nFeature Details\r\n - IsGlobal : When set to true the Interactable registers as a global listener meaning it will get all events from Input manager even if it\'s not in focus. Use for things like Menu button on the controller or when the Interactable should be triggered by a speech command action. (will trigger with or without focus) MR headsets do not seem to trigger speech commands that are setup in the speech commands profile.\r\n\r\n - VoiceCommand: a way to assign a voice command to an Interactable directly. This feature was not hooked up previously, sorry for the confusion. Add a string to the Voice Command field. Check Requires Gaze if the event should only trigger when the interactable has focus, otherwise it will trigger globally. This feature has nothing to do with the Speech Commands profile. Examples in the demo scene include the Radial One, Radial Two, Radial Three global commands for the radial buttons and Button and Toggle button voice commands for Toggle Button (""Toggle Button"") and Holographic Toggle Button (""Button"" as the tool tip says). An advanced feature of the VoiceCommands is the ability to add multiple voice commands for toggle buttons or multi-state controls by adding a comma, with no spaces around commas.\r\n\r\n - Receivers: The demo scene has an example of a Component that looks at an Interactable and can contain a list of receivers that extend ReceiverBase. The example shows how to extend receiver base and turn off UnityEvents for custom receivers. The component (InteractableReceiverList) is an example of building a component that can receive updates from an Interactable for custom events. There are two main ways to handle Interactable events with code. 1. Extend ReceiverBase, follow the example in the demo. Now click New Event on the Interactable and choose your custom receiver from the drop-down list. This is the same Pattern for InteractableReceiverList and InteractableReceiver components. 2. Extend RecieveBaserMonoBehavior, This is a component that can listen to an interactable state changes and register as a handler. All receiver types will get OnClick and OnVoiceCommand event calls. OnVoiceCommand events fire using the VoiceCommands field on the Interactable or setting IsGlobal to true and selecting an Input Action that has a keyword setup in the Speech Commands Profile.\r\n\r\nUpdates\r\n - Fixed double event firing when an Interactive has IsGlobal set to true.\r\n - verified consistent functionality on MR Headset and HoloLens.\r\n - Added texture, material, audio, string (labels) and rotation themes\r\n - Added an audio OnClick receiver to make it easy to add audio to click events.\r\n - Removed Layout3D example scene and most of the code. Moved some of the code back into Interactables and the grid list into Collections. A member of our team is working on something that does the same thing better.\r\n'"
379502230,3116,b'Refactored Controller Mapping Profile & Moved Input system from core -> sdk',"b'Overview\r\n---\r\n- Added Controller Data Providers Profile to register input data sources.\r\n- Controller mapping profiles have been overhauled to be simpler and easier to extend and add new controllers for.\r\n![image](https://user-images.githubusercontent.com/13334553/48520390-42fb4e80-e825-11e8-946d-e1f193e44a19.png)\r\n- Example of Windows Device Controller Mapping Profile\r\n![image](https://user-images.githubusercontent.com/13334553/48375105-b95c4d00-e67b-11e8-8183-d5e57cff643a.png)\r\n- Updated configuration guide\r\n- addresses #2905 for Input System and components by adding assembly definitions for platform specific code. Future updates when package manager arrives will install/uninstall platform specific stuff as needed.\r\n- addresses #3053 and #3115 for Input System and components.\r\n\r\nBreaking Changes\r\n---\r\n- Users will need to reassign the input system service type if using a custom configuration profile.\r\n- Users will need to delete any custom controller mapping profiles, and recreate them.\r\n- Renamed `MixedRealityInputSystemProfile.ControllerMappingProfile` to `MixedRealityInputSystemProfile.ControllerMappingProfiles`\r\n- Renamed `MixedRealityControllerMappingProfile` to `MixedRealityControllerMappingProfiles`\r\n\r\nChanges\r\n---\r\n- Fixes: #3074\r\n\r\nTODO\r\n---\r\n- [x] #3170\r\n\r\nBlocked by\r\n--- \r\n- [x] #3173\r\n- [x] #3113\r\n- [x] #3242\n- [ ] #3148\r\n- [ ] #3254\r\n- [ ] #3234\r\n'"
379485894,3114,b'SDK Feature re-org',b'Overview\r\n---\r\n- removed unnecessary folders in spatial awareness and diagnostics feature folders\r\n- updated system file icons'
379463172,3113,b'Refactored focus provider to service',"b""Overview\r\n---\r\n- Refactored the Focus Provider into a registered service.\r\n- Added Focus provider selector to Input System Profile.\r\n![image](https://user-images.githubusercontent.com/13334553/48911832-e3fb9200-ee41-11e8-856b-e600b66e5bca.png)\r\n- Moved Focus/Gaze provider settings to Pointer Profile settings (as these settings directly affect pointers specifically)\r\n![image](https://user-images.githubusercontent.com/13334553/48911878-12796d00-ee42-11e8-911c-e3f1782d87ef.png)\r\n- Updated all scenes to ensure they work properly with the new focus provider service.\r\n\r\nChanges\r\n---\r\n- Fixes: #2702\r\n- Fixes: #3125\r\n- Fixes: #3168\r\n\r\nBreaking Changes\r\n---\r\n- `IMixedRealityFocusHandler` no longer depends on the `IMixedRealityFocusChangedHandler`\r\n- The old `FocusProvider` component in the scene will now be missing from the main camera game object. This will need to be manually removed in the scene.\r\n- `FocusProvider` service will need to be added to any custom extension service profiles.\r\n- `EventSystem` check was moved from Input System to the MixedRealityToolkit, because we use a generic base event system for all our messaging from most of our services. This just makes sure to put it a standardized location. The component was moved from the ui raycast camera to the main camera.\r\n- `StandaloneInputModule` was also moved to the main camera from the ui raycast camera.\r\n- Users who have custom pointer profiles will need to update them with new settings for gaze provider.\r\n\r\nSteps to address braking changes\r\n---\r\n1. Open the scene with old Focus Provider\r\n2. Select the main camera game object\r\n3. Remove the `FocusProvider` (empty component, with a warning on it)\r\n4. Delete the `UiRaycastCamera` GameObject if one exists under the main camera's GameObject.\r\n5. Select the `MixedRealityToolkit` GameObject, then the configuration profile.\r\n\r\n### If using a custom profile do the additional steps:\r\n\r\n1. Navigate to the Registered Extension Services profile\r\n2. Register a new service.\r\n3. Name it `Focus Provider`\r\n4. Select the dropdown and set the `Microsoft.MixedReality.Toolkit.SDK.Input.FocusProvider`\r\n5. Save changes\r\n\r\nA few lingering questions\r\n---\r\n- Should the Focus Provider be a core system? (As we require that there only be one)\r\n    - Even though this would be a core system, it's requires the input system, so the type set should be in the input system profile with the focus profile.\r\n   - Added [Proposal](https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/3127) for a way to specify extension services that cannot be registered more than once.\r\n\r\nBlocked by\r\n---\r\n- [x] #3112\r\n- [x] #3123\r\n- [x] #3126 \r\n\r\nTODO\r\n---\r\n- [x] Update profile configuration docs with reflected changes.\r\n- [x] #3216\n- [x] #3218 \r\n"""
379462700,3112,b'Config profile inspector fixes',"b""Overview\r\n---\r\n- Fixed an issue in the Config Profile Inspector and Input System Profile Inspector, where end change check doesn't get called correctly on each gui update.\r\n- Fixed an issue in the Registered Extension Service profile inspector where the config profile wasn't reset correctly when a service was removed."""
379344936,3111,"b'Photon ""Classic"" Sharing Preview'",b'Overview\r\n---\r\nPulling the vNEXT sharing with updated photon / Unity 2018.2 compatibility into new photon sharing branch\r\n\r\nUses PUN Classic'
379282112,3110,b'Updated Sharing branch with beta updates',b'Latest changes from dev branch.'
379278688,3109,b'Updated state sharing branch with latest beta changes',b'Overview\r\n---\r\nUpdates the state sharing branch with latest mrtk_development changes\r\n'
379199551,3108,b'Updated BaseObjectCollections with fix from #1869',b'Overview\r\n---\r\nUpdated BaseObjectCollections with fix from #1869\r\n\r\nChanges\r\n---\r\n- Fixes: #1871\r\n'
378963766,3106,b'Update audioManager feature branch to latest mrtk_development',b''
378938603,3105,b'add 11-08 shiproom notes',b''
378570876,3102,b'Easier Extension Service Implementations and a bit of cleanup',b'Overview\r\n---\r\nAdded `BaseExtensionService` class for easy creation of extension service implementations.\r\nCleaned up the existing extension services with new BaseExtensionService class.\r\n\r\nAlways feels good to get rid of duplicated code :)'
378558038,3101,b'Updated Service Locator Instancing and Veifications',b'Overview\r\n---\r\nFixed Service Locator instancing and added parent/child verification.\r\nUpdated test suite with new names.\r\n\r\nChanges\r\n---\r\n- Fixes: #3097\r\n- Fixes: #3091'
378557342,3100,b'Updated null checking in base cursor cleanup',b'Overview\r\n---\r\nUpdated Base to check if InputSystem is null before attempting to unregistering managers.\r\n'
378533609,3099,b'Removed inappropriate destroy call from spatial awareness system',b'Overview\r\n---\r\nRemoved inappropriate destroy call from spatial awareness system\r\n\r\nChanges\r\n---\r\n- Fixes: #3098 \r\n'
378296131,3090,b'Added Branch Guide (HTK) - resolves #3088 ',"b'Overview\r\nAdded a new Branch guide, needs replicating straight to the master and updated the homepage with a link\r\n\r\nChanges\r\nFixes: #3088\r\n'"
378292156,3089,b'Added Branch Guide (mrtk) - resolves #3088 ',"b'Overview\r\n---\r\nAdded a new Branch guide, needs replicating straight to the mrtk_release and updated the homepage with a link\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #3088 \r\n'"
377923453,3086,b'Updated Service Locator logging',b'Overview\r\n---\r\n- Reduced service searching logs.\r\n- Misc formatting.\r\n- Added better handling for searching for services when shutting down.\r\n\r\nChanges\r\n---\r\n- Fixes: #3077\r\n'
377887240,3085,b'Fixed custom configuration message box',b'Overview\r\n---\r\nAdded `IsCustomProfile` check around message box section.\r\n\r\nChanges\r\n---\r\n- Fixes: #3084\r\n'
377796576,3083,b'Updated homepage (Readme) for access to the new getting started guides',b'Overview\r\n---\r\nUpdated homepage (Readme) for access to the new getting started guides\r\n\r\nChanges\r\n---\r\n- Fixes: base Readme\r\n'
377624508,3081,b'Merge beta getting started documentation to development branch',b'Update development to contain documentation from release branch'
377624224,3080,b'Merge beta getting started documentation',b'This brings the beta getting started documentation to the release branch (and retires the beta branch :) )\r\n'
377598554,3079,"b'update diagnostics system interface to add setters, add diagnostics demo scene'","b'Overview\r\n---\r\nThis change adds the ability to customize the diagnostics window display at runtime by adding setters to the interface properties (the concrete implementation already had setters implemented),\r\n\r\nAdded diagnostics demo scene to illustrate how to toggle the display components. This scene uses custom profiles for diagnostics visualization, input actions and speech commands.\r\n\r\nInterface change is being marked as a breaking change since it was possible to have implemented a concrete class without the property setters.\r\n\r\nChanges\r\n---\r\n- Fixes: #3055 \r\n- Fixes: #3067  .\r\n'"
377445598,3076,b'Input handler refactor',b'Overview\r\n---\r\nCleans up unnecessary Spatial Input Handler with a single interface with generic implementations.\r\n\r\nChanges\r\n---\r\n- Fixes: #3075\r\n'
377158683,3070,"b'Fix for Editor bug when hitting ""Esc"" to release mouse'","b'Overview\r\n---\r\nFix for Editor bug when hitting ""Esc"" to release mouse\r\n\r\nChanges\r\n---\r\n- Fixes: #3069\r\n'"
377016440,3068,b'[vNext][UX] Feature/mrtk interactable layout3D and InspectorFields',b'Overview\r\nMoved  layout code out of Interactables and created a demo scene\r\nMoved InspectorFields out of Interactables and created a demo scene\r\nMoved some inspector helper code to InspectorUIUntility\r\nCreated receiver components to allow handling interactable state changes without Unity Events'
376980576,3066,b'Mixed Reality Toolkit Standard Shader New Features',"b'Overview\r\n---\r\nThis is an update to the MRTK/Standard shader and systems. The primary change is the addition triplanar mapping. Triplanar mapping is a technique to programmatically texture a mesh. Often used in terrain, meshes without UVs, or difficult to unwrap shapes. This implementation supports world or local space projection, the specification of blending smoothness, and normal map support. Note, each texture used requires 3 texture samples, so please use sparingly in performance critical situations.\r\n\r\n![triplanar](https://user-images.githubusercontent.com/13305729/47942385-f9b71080-deae-11e8-8b4f-29a3594d8e96.gif)\r\n\r\nA checkbox has also been added to control albedo optimizations. As an optimization albedo operations are disabled when no albedo texture is specified. To control this (as requested by this blog post: http://dotnetbyexample.blogspot.com/2018/10/workaround-remote-texture-loading-does.html) Simply check this box:\r\n\r\n![albedoassignment](https://user-images.githubusercontent.com/13305729/47942430-28cd8200-deaf-11e8-8df7-d80a51485047.png)\r\n\r\nThe lighting model has been tweaked to match the Unity standard shader a little closer. And, the example comparison scene has been updated to reflect this:\r\n\r\n![matrixcompare](https://user-images.githubusercontent.com/13305729/47942465-4ef32200-deaf-11e8-8a8b-f850d7eaf015.gif)\r\n\r\nFresnel lighting on back facing polygons should now look more correct. (Thank you Gerrit Lochmann for the fix).\r\n\r\nFinally, normal map scale is now supported and a few extra material gallery examples have been added.\r\n\r\n![newmaterials](https://user-images.githubusercontent.com/13305729/48226180-ec3cd300-e353-11e8-87f7-42b952a2c742.gif)\r\n'"
376642127,3054,b'Adds unity+UWP installation instructions',"b'Overview\r\n---\r\n- Improves ""getting started"" documentation by 1) fixing existing section numbering, 2) adding ""install unity\'s uwp integration"" step, and 3) some other small edits\r\n\r\nChanges\r\n---\r\n- Fixes: small documentation change. Probably not worth opening an issue\r\n\r\nAdditional Comments\r\n---\r\n- I don\'t know if htk_development is the best home for this. I couldn\'t find other protected development branches that had ""GettingStarted.md"". FWIW master also has GettingStarted.md\r\n- The diff ""rich view"" preview may show the new image as 404\'ing, but that\'s because I use relative pathing. It appears properly in [my fork](https://github.com/sdolenc/MixedRealityToolkit-Unity/blob/htk_development/GettingStarted.md) and will appear properly in the upstream Microsoft repo if the PR is merged'"
376377816,3051,b'Updates to focus handler interface',b'Overview\r\n---\r\n- Added `HasFocus` back to interface as the need to convey if the object has focus is an important part of the implementation.'
376183606,3050,"b""Fixed ParabolaConstrainedLineDataProvider's SetPointInternal""","b""Overview\r\n---Fixed the unclear behavior of the ParabolaConstrainedLineDataProvider's SetPointInternal\r\nIf a function called it with a 0 value (for the origin point of the parabola), it would report with a vague error.\r\nAdded a comment explaining why nothing was done.\r\nNeeded for Tooltip refactor.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
376173853,3049,b'Merge Beta (2018.9.0) from release -> dev',b'Refresh development branch with beta fixes\r\n'
376155672,3047,b'MRTK 2018 vNext Beta (2018.9.0) -> mrtk_release',b'Overview\r\n---\r\nThis PR merges the Beta release code for MRTK 2018 vNext into the mrtk_release branch.\r\n\r\n'
376098490,3046,b'update version to 2018.9',b'Overview\r\n---\r\nUpdates the project and text files to the beta release version\r\n\r\n'
376087211,3044,b'[vNext][UX] Bounding Box control',"b""Overview\r\n---\r\n- Simplified version. Now, you can simply assign BoundingBox.cs on any object and you get the BoundingBox. 'Activate on Start' option is provided.\r\n- BoundingBox handle materials\r\n- Example scene (using existing standard assets in mrtk_development)\r\n- This PR does not include App Bar. It will be submitted as a seprate PR, once Interactable PR is merged.\r\n\r\n![2018-10-30 17_41_37-window](https://user-images.githubusercontent.com/13754172/47807735-13632700-dcfa-11e8-81e8-e1fa718f063e.png)\r\n\r\n### Script\r\nAssets/MixedRealityToolkit-SDK/Features/UX/Scripts/BoundingBox/BoundingBox.cs\r\n\r\n### Materials\r\nAssets/MixedRealityToolkit-SDK/Features/UX/Materials/BoundingBoxLines.mat\r\nAssets/MixedRealityToolkit-SDK/Features/UX/Materials/BoundingBoxHandleGrabbed.mat\r\nAssets/MixedRealityToolkit-SDK/Features/UX/Materials/BoundingBoxHandle.mat\r\n\r\n### Example scene\r\nAssets/MixedRealityToolkit-Examples/Demos/UX/BoundingBox/BoundingBoxExample.unity"""
375940866,3041,b'Mrtk 2018beta stabilization getting started guide',"b'Overview\r\n---\r\nGetting started documentation, first pass for feedback.\r\n\r\nComments please (WIP), include any additional sections that everyone feels is necessary for a ""Getting Started"".\r\n\r\nCurrently in progress:\r\n\r\n* Getting Started\r\n* Download Instructions\r\n* Configuring the toolkit (Started...)\r\n* Links to non-existent guides listed, for future tbc\r\n\r\n> * [Mixed Reality Configuration Guide](/Documentation/MixedRealityConfigurationGuide.md)\r\n> * [Getting to know the Mixed Reality Toolkit Input System]( #3057) (Coming Soon)\r\n> * [Customizing your controllers in the MRTK](#3058) (Coming Soon)\r\n> * [A walkthrough the UX components of the MRTK SDK](#3059) (Coming Soon)\r\n> * [Using Solvers to bind your objects together](#3060) (Coming Soon)\r\n> * [Creating interactions between the player and your project](#3061) (Coming Soon)\r\n> * [Guide to Mixed Reality Profiles](#3062) (Coming Soon)\r\n> * [Guide to Building Registered Services](#3063) (Coming Soon)\r\n> * [Guide to Creating / managing pointers](#3064) (Coming Soon)\r\n\r\nThese are placeholders until the relevant people responsible for those systems can document guides for them.\r\n\r\nChanges\r\n---\r\n- Resolves #2974 '"
375764872,3038,b'Set minimum distance of stabilization plane to nearclip distance of camera',"b'When camera collides with an object, the stabilization plane comes to camera. \r\nThis makes Holograms unstable.\r\n\r\n![image](https://user-images.githubusercontent.com/4415085/47761222-ec592500-dcfa-11e8-9136-50e4d19c6ffc.png)\r\n\r\nThe distance of stabilization plane should be greater than that of near clip.\r\n\r\nMaybe this behaviour should be optional so that user can disable it.\r\n'"
375734499,3036,b'Fixed some null refs with mouse pointer',b'Overview\r\n---\r\nThe Base Cursor could be null during these checks. Using the `isDisabled` allows us to better check the internal state of the active pointer.\r\n\r\nAlso moved the timer reset out of the threshold check to prevent resetting when doing fine movements but still working with the mouse.'
375671932,3035,b'Lumin Update',b'Overview\r\n---\r\nUpdated MixedRealityManager->MixedRealityToolkit\r\n'
375636287,3034,b'Updated async utilities to prevent possible deadlocks',b'Overview\r\n---\r\n- Fixed a possible deadlocking situation with the async utilities.\r\n    - (See https://github.com/svermeulen/Unity3dAsyncAwaitUtil/issues/10)\r\n- Added async utilities to their own assembly and made critical classes internal.'
375627178,3033,"b'remove default spatial handlers, add demo mesh handler'","b'Overview\r\n---\r\nPer request, removed the default (empty) implementations of the Spatial Awareness system handlers and created a demo one in the spatial mesh example scene.\r\n\r\nThe demo handler displays debug log data when a mesh is added, updated (with an update count) and removed.\r\n\r\nChanges\r\n---\r\n- Fixes: #3017 .\r\n'"
375625841,3032,b'Sealed MixedRealityToolkit',b'\r\n'
375617117,3031,b'updated project version to 2018.2.14f1',b'\r\n'
375609473,3030,b'Helped speed up play mode transition.',b'Overview\r\n---\r\nWe were saving the assets before entering play mode which added a few extra cycles\r\n'
375506701,3029,b'Fix for tile generator quitting if used on a non 2018 build of Unity',b'Overview\r\n---\r\nCarry on processing other images after an unsupported image type is encountered.\r\n\r\nChanges\r\n---\r\n- Fixes: #3028 .\r\n'
375263681,3025,b'Merge spatial awareness mesh feature into the 2018 beta',"b'Overview\r\n---\r\nThis brings the core spatial awareness mesh feature into the beta stabilization branch. This does not address #3017 (that will be a separate, smaller change)\r\n\r\nChanges\r\n---\r\n- Fixes: #3018 .\r\n'"
375253160,3024,b'Fixed CameraCache fail if no camera tagged as main camera.',b'Overview\r\n---\r\n- added camera lookup if no main camera tag is found.\r\n\r\nChanges\r\n---\r\n- Fixes: #3021 \r\n'
375237930,3023,b'updated UX icons default state.',b'Overview\r\n---\r\n- Reduced the size of the default icons.\r\n- Set Icon default state to reduce chern.'
375234630,3022,b'Build Utilities update',b'# Overview\r\n\r\n- Opened up some of the build window methods so they can be called from third party libraries.'
375215461,3020,b'Merge development branch changes into spatial awareness feature branch',b'updates to latest naming conventions'
375210386,3019,b'Meta file cleanup / tidy from stabilization merges',b'Overview\r\n---\r\nMeta file cleanup / tidy from stabilization merges\r\n\r\nChanges\r\n---\r\n- Clears out redundant /metas\r\n- Adds new .meta added by unity\r\n'
375198099,3016,b'Updated Solver prefabs to be cyan instead of magenta',b'Overview\r\n---\r\n![image](https://user-images.githubusercontent.com/3580640/47677643-e806fd80-db7c-11e8-936a-3cb836b0c6fd.png)\r\n\r\nChanges\r\n---\r\n- Fixes: #2998 \r\n'
375174688,3015,b'Fix bug in ResetFocusedObjects where the previous target stayed the same',"b'Overview\r\n---\r\nWhen a pointer is set to [no longer be enabled for interaction](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/mrtk_development/Assets/MixedRealityToolkit-SDK/Features/Input/FocusProvider.cs#L509), the focused object is reset without the previous object being cleared. Since this line is hit every time the pointer is updated, multiple `FocusLost` events are sent to the previous object, since it never changes.\r\n\r\nWith this change, on the first call to this method, the previous object will be properly set to the old current focused object. Since the `CurrentPointerTarget` is then set to null, every subsequent call to this method will set the previous target to null and not send another `FocusLost` event.'"
375169990,3014,b'Make IMixedRealityControllerVisualizer less implementation-specific',b'Overview\r\n---\r\nNot all visualizers will be driven by a pose synchronizer. Implementations that want to be (like `MixedRealityControllerVisualizer`) are still able to implement both interfaces.'
375161778,3013,b'[vNext] Merged mrtk_development into Feature/mrtk interactable. Polished example scene.',"b""Overview\r\n---\r\n- Merged the latest mrtk_development into mrtk_interactable. Applied changes including name change 'MixedRealityManager' to 'MixedRealityToolkit'. Updated related name changes. (Instance.GetManager to Instance.GetService)\r\n\r\n- Polished example scenes. Added HolographicButtonToggle example.\r\n\r\n- Tested with HoloLens and Immersive headset.\r\n\r\n![2018-10-29 11_30_41-window](https://user-images.githubusercontent.com/13754172/47672551-8e4c0680-db6f-11e8-9686-c211db9a8098.png)\r\n\r\n"""
375145162,3012,b'Remove stale handedness data from Solver prefabs',"b'Overview\r\n---\r\nThe solver prefabs had some stale handedness data which was causing them to inappropriately attach to the wrong sources in some cases. This was then overriding the SolverHandlers attachment behavior, causing invalid scenarios as seen in the two below reports.\r\n\r\nChanges\r\n---\r\n- Fixes #2996 and fixes #2997 \r\n'"
375138048,3011,b'Helper methods to determine if speech is active',b'Overview\r\n---\r\nAdds a method to IMixedRealitySpeechSystem to allow components to determine if speech recognition is actually active; speech recognition may not be active if the user has denied microphone access or does not have a microphone connected.\r\n'
375113417,3010,b'updated Solver Demo scene materials',"b""Overview\r\n---\r\nUpdated materials from Magenta to Cyan to ensure people don't mistake the objects as missing material references.\r\n\r\nChanges\r\n---\r\n- Fixes: #2998\r\n"""
375099014,3008,b'added null checks for controllers in input source events',b'Changes\r\n---\r\n- Fixes: #3007 \r\n'
374830022,3005,b'Add missing public properties to BoundingBoxRig',b'### Overview\n\nCurrently BoundingBoxRig missing several public properties for private SerializedField fields.\nThis cause user could not modify component when dynamically add component from Script. This commit open these parameters modifiable.'
374798980,3003,b'Mouse Input Fixes',"b""Overview\r\n---\r\n- Fixed issues with Mouse in OpenVR\r\n- Cleaned up a few input related classes with simpler logic.\r\n- Added configurable mouse pointer properties\r\n![image](https://user-images.githubusercontent.com/13334553/47622654-aadf3480-dac4-11e8-803b-30634f5fa557.png)\r\n    - Hide mouse cursor on start.\r\n    - Hide mouse after a few seconds if no input is detected from it.\r\n    - Show mouse if any button is pressed / or above a set threshold.\r\n        - When mouse is shown it's position is at gaze position\r\n        - Mouse click to un-hide doesn't raise pointer click.\r\n\r\nChanges\r\n---\r\n- Fixes: #2754\r\n- Fixes: #2757\r\n- Fixes: #2330"""
374756178,3002,b'Spelling and Punctuation changes are done',b'checkins changed to check-ins and after Instead there should be a comma\r\n'
374738651,3001,b'Tidying up the Input System profile ',"b'# Overview\r\n\r\nTidying up the Input System profile to reorder properties to make more sense, reordering inspector and properties to:\r\n\r\n* Input Actions Profile\r\n* Input Actions Rules\r\n* Pointer Profile\r\n* Gestures Profile\r\n* Speech\r\n* Controller Mapping Profile\r\n* Controller Visualization Profile\r\n\r\n\r\n# Changes\r\n\r\n- MixedRealityInputSystemProfile\r\n- MixedRealityInputSystemProfileinspector\r\n'"
374698522,3000,b'Fixed a few things  with SpatialAwarenessSystem implementation',b'Overview\r\n---\r\n- Fixed game object life cycle bypass checks.\r\n- Fixed typos & misc formatting \r\n\r\nChanges\r\n---\r\n- Fixes: #2999 \r\n'
374693627,2995,b'Some misc input bug fixes',b'Overview\r\n---\r\n- Fixed some registration issues WMR controllers.\r\n- Destroy cursor if pointer is invalid. (Pointers will re-create cursors if needed)\r\n\r\nChanges\r\n---\r\n- Fixes: #2994 \r\n'
374685120,2993,b'Mixed Reality Editor Settings binary drop',"b'Overview\r\n---\r\n- Removed any higher level programming feature languages from `MixedRealityEditorSettings` so it would compile for .NET 3.5. \r\n- Kept source file in the project, simply hidden it in the inspector using `.` prefix.\r\n\r\nChanges\r\n---\r\n- Fixes: #2956 \r\n- Fixes: #1923\r\n\r\nBlocked by #2983 '"
374657679,2992,b'initial pass at project clean-up and missing documentation.',b'Overview\r\n---\r\nThis PR is to address Task #2991 and to cleanup the MRTK structure for the beta release\r\n\r\nChanges\r\n---\r\n- Removed empty folders\r\n- Adds missing Readme files from new folders (required for browsing the project on Github)\r\n'
374571601,2990,b'Add platform-dependent compilation section to CodingGuidelines',"b'Overview\r\n---\r\nAdd platform-dependent compilation section to CodingGuidelines, migrating over #2461 from master.\r\n\r\nChanges\r\n---\r\n- Fixes: #2142\r\n'"
374562192,2989,"b""Make FloorScale's type match floorScale's type""",b'Overview\r\n---\r\nChanges the return type from Vector3 -> Vector2. We were only using `x` and `y` in the manager anyway.\r\n\r\nChanges\r\n---\r\n- Fixes: #2706\r\n'
374561359,2988,b'Fixed editor texture asset loading',"b'Overview\r\n---\r\nIf the MRTK is moved into a different folder, some editor texture assets would not work properly.\r\n\r\nRenamed `EnforceEditorSettings` to `MixedRealityEditorSettings`\r\n\r\nChanges\r\n---\r\n- Fixes: #2987\r\n\r\nBlocked by: #2983 \r\n'"
374537462,2986,b'Updating release version references in HTK for 2017.4.3 release',b'Overview\r\n---\r\nUpdating release version references in HTK for 2017.4.3 release.'
374525327,2985,b'Added #if blocks to QR code preview feature',"b'Overview\r\n---\r\nThe QR code plugin is only provided for UWP and the editor, so all references to it (and other Unity WSA specific APIs) needed to be wrapped with `#if UNITY_EDITOR || UNITY_WSA`. This also led to some minor clean-up to better wrap the contents.\r\n\r\nChanges\r\n---\r\n- Fixes: https://github.com/Microsoft/MixedRealityToolkit/issues/183\r\n'"
374493148,2984,b'Updated MixedRealityToolkit Unit Tests',"b""Overview\r\n---\r\n- Fixed all unit tests and made sure we're registering the correct interfaces by adding a debug error check in MixedRealityToolkit registration \r\n- Removed redundant control statements and updated error to raise correct type.\r\n\r\nChanges\r\n---\r\n- Fixes: #2972"""
374489326,2983,"b'Consolidated setup prompts into one, and added VR setup'",b'Overview\r\n---\r\nTurns on VR support and consolidated optional first install prompts into one.\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/47584405-34e59c80-d90f-11e8-859c-567d79aa08b5.png)\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #2975\r\n- Fixes: #2860'
374363547,2981,b'Mrtk development serialization fix',"b""# Overview\r\n---\r\n@davidkline-ms noted an exception that was being raised in a UWP build on both Windows10 and HoloLens in #2979.  \r\n\r\nOn investigation, this was actually caused by poorly serialised data in the DefaultMixedRealityConfigurationProfile asset.  When the Core Services get reordered for Initialization, these serialised versions were also being detected and as they were being serialized by their concrete types and not their interface, the system failed to identify them as core systems.\r\n\r\nThis had two effects:\r\n\r\n* The core system were duplicated in the service registry, one as a concrete type and another as a system interface\r\n* The concrete type, being not seen as a core system, was attempted to be registered as a Registered service, causing a type cast failure.\r\n\r\nIt was also noted by others that there was some duplicated core system type checking, which needs cleaning up\r\n\r\n# Resolution\r\n---\r\nSeveral changes have been made to resolve and reduce the risk of this happening in the future\r\n\r\n* Serialisation of the Active Managers has been removed (we weren't using it anyway, the use case will need to be revalidated in the future)\r\n* The Default config asset has been cleaned up\r\n* The duplicate CoreSystemType check has been cleaned up\r\n* The RegisterService function now also returns whether the system was indeed added or if an error was caused through a Boolean\r\n* Use of the RegisterService call on initialisation now also listens for the Boolean result for extra protection\r\n* Waves have been parted and many life cycles of my dev PC have been used up trying to figure out why Unity is so bad at building dev builds (and C++ is a huge drain on my life, I missed two meetings fixing this)\r\n\r\n# Changes\r\n---\r\n- Fixes: #2979\r\n- Reduces: sanity\r\n\r\n# Tested on\r\n---\r\n* Via Unity debug\r\n* UWP Dev .NET build \r\n* AppX generated from UWP .NET build\r\n* IL2CPP build in VS\r\n* Appx generated from IL2CPP build"""
374220425,2980,b'[vNext] Feature/mrtk interactable demo2938 and inspector updates',"b'Overview\r\n- Updated Demo scene with introduction banner and updated head and body objects to reflect current standards.\r\n- Moved creating new states and themes to Mixed Reality Toolkit/Interactable/State\r\n- Fixed an inspector layout error\r\n- Renamed a bunch of files to include the ""Interactable"" prefix\r\n- Fixed issue caused by renamed files.\r\n- Cleaned up inspector base files and moved some features to a static class instead of a base class.\r\n\r\nChanges\r\n- Feedback: # 2938'"
374073609,2978,b'[vNext][UX] Tooltip functionality & SDK default tooltips',"b""Overview\r\n---Improved error reporting behavior in the LineDataProviders as well as some needed inspector tooltips.\r\n---Added tooltip & tooltip spawner functionality\r\n---Added three Tooltips (Simple Line, Spline, Constrained Parabola) for developers. Similar to the default SDK cursors.\r\n\r\nChanges\r\n---Minor adjustments to the MixedRealityLineRenderer error messages & variable attribute tags.\r\n\r\n- Fixes:\r\n--Added a default material to the MixedRealityLineRenderer script. Should allow most users to avoid a common & annoying 'GameObject disabling itself unexpectedly' behavior. Select the .cs script file and look at the Inspector if this ever needs to be changed.\r\n\r\n\r\n(My one concern is that there are rogue tab formatting instead of purely space. I did a sweep through but might've missed some)"""
374058100,2977,b'Add Tooltip Materials',b'Overview\r\n---Added default materials & tooltip backgrounds.\r\n---These assets cannot live inside of the Examples folder due to being needed by the three Default Tooltips prefabs (similar to how default cursor & pointer prefabs live inside of the SDK folder)\r\n\r\nChanges\r\n---Added 2 background materials and 1 solid color line renderer material\r\n- Fixes: # .\r\n'
374032205,2976,b'Fixed Mixed Reality Toolkit service registration & unit tests',"b""Overview\r\n---\r\nFixed all unit tests and made sure we're registering the correct interfaces by adding a debug error check in MixedRealityToolkit registration \r\n\r\nChanges\r\n---\r\n- Fixes: #2972\r\n- Fixes: #2979 """
373697683,2968,b'Updated Inspectors to apply the playspace at design time',"b'Overview\r\n---\r\n> Take 2 :D \r\n\r\nThe MixedRealityPlayspace should be instantiated at Design time, to ensure the developer / adopter understands the default layout of an MRTK scene.\r\n\r\nThey can change this afterwards, but should be there to begin with to ensure the scene is not tampered with at runtime and introduce unexpected results.\r\nThis was how it was in the HTK and how the framework was designed initially to run (Body -> head, until Body was renamed)\r\n\r\nChanges\r\n---\r\n- Fixes: #2899\r\n'"
373687707,2967,b'Mrtk vNext Sample Scene Models',"b""Overview\r\n---Various sample scenes require the use of HTK's assets but they have not been brought over to vNext yet.\r\n\r\nChanges\r\n---Added most of the old Holo Toolkit models into MRTK-Example/StandardAssets\r\n---Did not include the old button model that was used (Yoon's suggestion)\r\n---Did not include Model_Tetra as it was just a Unity cube with un-intuitive parent hierarchy.\r\n"""
373680859,2966,b'fix nullreferenceexception in diagnostics handler',b'Overview\r\n---\r\nMove initialization of the style object into Awake to eliminate NullReferenceException.\r\n\r\nChanges\r\n---\r\n- Fixes: #2964 .\r\n'
373663583,2963,b'Updated Inspectors to apply the playspace at design time',"b'Overview\r\n---\r\nThe MixedRealityPlayspace should be instantiated at Design time, to ensure the developer / adopter understands the default layout of an MRTK scene.\r\n\r\nThey can change this afterwards, but should be there to begin with to ensure the scene is not tampered with at runtime and introduce unexpected results.\r\nThis was how it was in the HTK and how the framework was designed initially to run (Body -> head, until Body was renamed)\r\n\r\nChanges\r\n---\r\n- Fixes: #2899\r\n'"
373227627,2961,b'Add update to serializedObject in diagnostic inspector ',"b""Inspector changes weren't ever being saved from the diagnostic profile UI, which would cause it to never be enabled. \r\n"""
373178273,2959,b'Minor SolverHandler refactor',"b'Overview\r\n---\r\nMoved the initial transform finding logic into `Start`, to prevent the handler from trying to find a transform immediately in case a dev wants to change the `TrackedObjectToReference` on instantiation.\r\n\r\nRefactored out a `DetachFromCurrentTrackedObject` method, since the same logic was used in multiple places.'"
372778258,2955,b'Fixed grammatical errors',b'Changed grammatical errors to improve clarity and flow.\r\n'
372777161,2954,b'[vNext] Addressed feedback from Simon on naming of some files and demo scene. #2938',"b'Overview\r\n\r\n- Updated Demo scene with introduction banner and updated head and body objects to reflect current standards.\r\n\r\n- Moved creating new states and themes to Mixed Reality Toolkit/Interactable/State\r\n\r\n- Fixed an inspector layout error\r\n\r\n- Renamed a bunch of files to include the ""Interactable"" prefix \r\n\r\nChanges\r\n---\r\n- Feedback: # 2938\r\n'"
372657251,2953,b'replace manager exceptions with debug.logerror and return',"b""The manager should not throw exceptions. They are expensive and handled automatically, so they aren't much more useful than a simple (and quicker) debug message\r\n\r\n\r\nChanges\r\n---\r\n* The manager no longer throws\r\n* Error debug log messages are displayed\r\n* Safe (null, empty collections, etc) values are returned where an exception would have been thrown\r\n"""
372552382,2952,b'Fix typos in Common readme file',b'Overview\r\n---\r\nFixes some small typos and grammatical errors.\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: Typos in the README file in Assets/HoloToolkit/Common.\r\n'
372298911,2951,b'Added Copy/Paste functionality to configuration profiles.',"b""Overview\r\n---\r\n- Added two buttons on the master configuration profile for options on how users would like to make their profiles. They can choose to copy from the default ones and customize, or create new profiles.\r\n![image](https://user-images.githubusercontent.com/13334553/47299744-c7b0cf00-d5cf-11e8-8e1d-8cd17fefcddc.png)\r\n- Configuration profiles now have copy/paste functionality.\r\n![image](https://user-images.githubusercontent.com/13334553/47265600-28acaa00-d4df-11e8-8ea5-be6a5bca5efe.png)\r\n- Default Configuration Profiles will now show warnings with helpful hints about how to proceed.\r\n![image](https://user-images.githubusercontent.com/13334553/47265629-c7390b00-d4df-11e8-8042-bd0667cf453a.png)\r\n- All Configuration Profiles can be copied into a completely new asset.\r\n- Once a master configuration profile has been swapped out with a custom once, an option to replace default profiles appears.\r\n![image](https://user-images.githubusercontent.com/13334553/47265605-42e68800-d4df-11e8-813b-ae8d1e67a5cc.png)\r\n\r\nChanges\r\n---\r\n- Fixes: #2856\r\n- Fixed an issue where BoundarySystemIsEnabled wasn't checking if a profile was set.\r\n"""
372261568,2950,b'updated some missing MRTK icons on some scripts',b'Overview\r\n---\r\nUpdated missing icons\r\n'
372247614,2948,b'fixed Build Window layout in 2018.2+',b'Overview\r\n---\r\nUpdated Build Window layouts for 2018.2+\r\n\r\nChanges\r\n---\r\n- Fixes: #2946 \r\n'
372240636,2947,b'updated WinGestSettings summary',b'Overview\r\n---\r\nupdated summary'
372237552,2945,b'Updated SystemType deserialization method',"b""Overview\r\n---\r\nWhen using different platforms it's guaranteed that certain platform specific types will be missing (As they're not included in the build). So this warning doesn't really need to be raised. Classes utilizing this should be checking if the returned type is null before use."""
372236915,2944,b'Updated Base Pointer Controller Pointer Name Property  \xe2\x80\xa6',"b'Overview\r\n---\r\n- Added a backing field, in case the gameObject reference is destroyed when attempting to get the pointer name'"
372129625,2943,b'Initialized rules to remove build warnings',b'Overview\r\n---\r\nInput Action Rule fields were not initialized properly and produced build warnings.\r\n'
372127078,2942,b'2018.2.13f1 missing quality settings changes',b'Overview\r\n---\r\nAdded some missing changes from editor update\r\n'
371757877,2940,b'Remove stray ChaseSource from SwappingVolume prefab',b'Overview\r\n---\r\nSome stray settings and a `ChaseSource` object were added to the prefab during #2885 that caused a red circle to appear in each swapping volume when the actual solver became active. This removes those from the prefab.'
371754056,2939,b'Updated editor version to 2018.2.13f1',b'Overview\r\n---\r\nUpdated editor version to 2018.2.13f1\r\n'
371228246,2937,b'Prevent solver targets from rotating when the target is the head',"b""Overview\r\n---\r\nThe fix in #2898 didn't properly account for when the solver was targeting the head. In that case, we don't want to add the 180 degree rotation, as that's only needed for the platform controller models.\r\n\r\nChanges\r\n---\r\n- Fixes: #2933\r\n"""
371218041,2936,b'Add link to the Slack inviter to the HTK docs',b'Overview\r\n---\r\nMigrates #2929 to HTK.'
371217097,2935,b'Seperate editor features into their own binary',"b""Assemblies included in standalone apps cannot target the UnityEditor.dll binary. This means that when we ship binaries, the ones we intend to be included as part of the deployed app have to be independent of editor features. \r\n\r\nThis change moves all non-editor code out of the Assets folder into a Src folder at the root. The Assets\\Bin folder will contain the compiled dlls that can then be referenced. \r\n\r\nThis changes the workflow of **contributors of MRTK** to be divided into two steps: \r\n\r\n1. Code that isn't asset/editor related needs to be changed in Src location and built using the sln/csproj files\r\n2. Assets and editor scripts need to be changed in the Asset folder directly \r\n\r\nRight now this also adds a separate NuGet package for editor resources. We should consider including them in the right NuGet packages directly and broken up by feature as we break up packages more and more. \r\n"""
370893988,2932,b'fix bug : Null Exception occur in WorldAnchorManager ',"b'Overview\r\n---\r\nif WorldAnchor component dont have parent, null exception occur.\r\nchange to check to be anchor.gameobject.transform.parent null\r\n\r\n---\r\n- Fixes: #1781\r\n\r\n\r\n'"
370757307,2931,b'Fixed a typo that was causing some confusion on the Editor.',b'Overview\r\n---\r\nThe text in the Editor property field was wrong.\r\n\r\nChanges\r\n---\r\n- Fixes: Fixed the typo error.\r\n'
370606088,2929,b' Add link to Azure hosted Slack invitation sender',"b'The current documentation mention to join HoloLens dedicated forum, or Slack. If you are not member of HoloDevelopers on Slack, you need someone to send you an invitation.\r\n\r\nAn automatic invitation sender has been hosted on Azure for a while now, and can provide a quick and easy access to anybody without manual intervention.\r\n\r\nSince the Contribution guide was providing the Slack address, I suggest we also provide a link to the automatic invitation sender.'"
370398954,2926,b'Gesture Profile Fixes',"b""Overview\r\n---\r\nAdded gesture type filter so it's impossible to register the same gesture twice.\r\n\r\nChanges\r\n---\r\n- Fixes: #2912"""
369860628,2922,b'Refactored Manager concept into Services',"b""Overview\r\n---\r\nThere was a bit of confusion and misconception of the `MixedRealityManager`. Its sole responsibility is to keep all the other feature systems, and components synchronized and in step. This is the only entry point for the Mixed Reality Toolkit into the user's project and into the scene. This component's sole responsibility is to be a resource locator and facilitator of each feature's communication in a decoupled and emergent way.\r\n\r\n[More info in my blog post about the design decisions](https://medium.com/@stephen_hodgson/the-mixed-reality-framework-6fdb5c11feb2)\r\n\r\nThis Pull Request tries to re-define the concepts of this core system and break misconceptions.\r\n\r\nNo logical changes, only renames."""
369823185,2921,b'Windows Dictation Input Device Update',"b""Overview\r\n---\r\n- Cleaned up the dictation input device manager, and removed allocations when starting/stopping recording.\r\n- Also added some safely checks to ensure we're in play mode when recording.\r\n"""
369821517,2920,b'Fixed issue getting focused GameObject(s) when handling input event',"b""Overview\r\n---\r\nRemoved eventData methods for getting focus data. Users should instead iterate over the event data's pointers and call on the focus provider's pointer specific methods for getting focus data. This ensures there are not extra allocations while getting focus data and keeps performance in mind.\r\n\r\nChanges\r\n---\r\n- Fixes: #2918 """
369747965,2917,b'Spatial awareness implementation',b'Overview\r\n---\r\nThis PR introduces a functioning spatial awareness system (minus the ability to move the observer origin #2916).\r\n\r\nThis change provides an implementation for spatial meshes ONLY. Planar surface finding will come in a future PR.\r\n\r\nChanges\r\n---\r\n- Fixes: #1998.\r\n- Fixes: #2386.\r\n- Fixes: #2508.\r\n'
369511583,2915,"b'Added ""Hover light radius"" to StandardShaderGUI.cs'","b""This is for the editor to reflect the addition of the _HoverLightRadius-propertyI added to the Standard.shader.\r\n\r\n[edit] Sorry for screwing up and doing two file commits for something that belongs together. This version control thing isn't as straight forward and forgiving as I had hoped...\r\n\r\nOverview\r\n---\r\nThis is a slider field from 0.01 to 10 based on float for the radius of the hover light here: #2914 \r\n\r\nChanges\r\n---\r\n- Added slider field to fluent-part of the menu."""
369510535,2914,b'Added _HoverLightRadius for hover light radius',"b'Greetings,\r\nI have added _HoverLightRadius to the shader to allow for finer radius control of the hover light. I have also made the gradient exponential instead of linear, so it now more closely matches the hover light effect elsewhere in the HoloLens OS. \r\n\r\nIMPORTANT:\r\n\r\nThis also needs the edits I have done in StandardShaderGUI.cs to show in the editor: #2915\r\n\r\nOverview\r\n---\r\nIt is a float in the shader that gives the user the possibility to change the radius of the hover light.\r\n\r\nChanges\r\n---\r\n- Needs: #2915 \r\n'"
369382295,2913,b'Fixed a few issues with speech input handler',"b""Overview\r\n---\r\n- Made sure Windows Speech Input's event data was raised by the gaze's input source, as Focused Object is determined by the event's input source.\r\n- Updated `SpeechInputHandler` to only check if speech commands profile was null instead of if the speech commands were enabled.\r\n- Added an error helpbox to the speech input handler if a previously registered keyword is no longer in the speech command profile\r\n\r\nChanges\r\n---\r\n- Fixes: #2834"""
369208244,2910,b'Fixed broken link to Holographic button',b'\r\n\r\nOverview\r\n---\r\nFound a broken link to the Holographic Button prefab in the readme. Fixed it\r\n\r\nChanges\r\n---\r\n- Fixes: Changed readme file link to correct prefab.\r\n'
368856285,2908,b'Update roadmap for new version scheme',b'As discussed in #2888\r\n'
368797046,2907,b'State sharing system',"b""New PR has been opened here: https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/3210\r\n\r\nState Sharing System (and related sub-systems)\r\n---\r\n\r\nOpening this PR so we can evaluate and discuss these systems as a whole. Once we've settled on which systems to incorporate I will close this PR and open a smaller PR for each system.\r\n\r\nDescriptions of SessionManager, UserManager / DevicePool and AnchorSynchronizer / UserAlignment will be expanded as discussion continues. Example scenes will be created once MRTK-related refactoring is finished.\r\n\r\nStateArray\r\n---\r\nThe backbone of app state sharing. Essentially a dictionary of structs. Changes made to this dictionary on the server are stored locally until `Flush` is called, at which point the new states propagate to all clients. Changes made on the client are stored locally until they are replaced by a value from the server. \r\n```\r\npublic interface IStateArray<T> : IStateArrayBase, IEnumerable<T> where T : struct, IItemState<T>\r\n{\r\n    T this[sbyte key] { get; set; }\r\n    void Flush();\r\n}\r\n```\r\n\r\nState structs must implement the IItemState interface:\r\n```\r\npublic interface IItemState<T>\r\n{\r\n    sbyte Key { get; }\r\n    sbyte Filter { get; }\r\n    bool IsDifferent(T from);\r\n    T Merge(T clientValue, T serverValue);\r\n}\r\n```\r\n\r\n`Key` is used to assign and retrieve the state. (We found that keeping the key attached to states vastly simplifies state sharing in general.)\r\n\r\n`Filter `is used to identify which session a state belongs to in multi-session sharing apps.\r\n\r\n`IsDifferent `is used to determine when a state has changed. This is preferable to a straight value equality comparison for a couple of reasons:\r\n- Value-type comparisons can generate garbage.\r\n- States often have fields or properties which would result in redundant comparisons (eg a Vector3 property which draws from a set of shorts for its value).\r\n- States often have fields or properties that require interpretive comparison (eg time-related values).\r\n\r\n`Merge `is used to resolve conflicts between client and server states. If an incoming state from the server is found to be different than a locally stored state on the client, the two states are merged before the client value is over-written.\r\n\r\n**Issues**\r\n- Currently hard-coded to use sbytes as keys and filters. This was intended to suggest a maximum number of shared states. This should probably be changed to an unsigned short.\r\n- Currently implemented using SyncListStruct from UNet's HLAPI - this will obviously have to change.\r\n- **Server** concept should be changed to **Authority** to make system more peer-to-peer friendly.\r\n- We need a better system for crunching / serializing item states, especially position / rotation states.\r\n\r\nAppState\r\n---\r\nManager class for user-defined StateArrays. Makes the business of getting / setting / adding states to StateArrays straightforward.\r\n\r\nMain interfaces / methods:\r\n```\r\npublic interface IAppStateReadOnly\r\n{\r\n    T GetState<T>(sbyte stateKey) where T : struct, IItemState<T>;\r\n    void Flush<T>() where T : struct, IItemState<T>;\r\n    void Flush();\r\n    ...\r\n}\r\n\r\npublic interface IAppStateReadWrite : IAppStateReadOnly\r\n{\r\n    void AddState<T>(T state) where T : struct, IItemState<T>;\r\n    void SetState<T>(T state) where T : struct, IItemState<T>;\r\n    ...\r\n}\r\n```\r\n\r\n`Flush` serves a different purpose on client / server. On client, flush sends all locally stored values to the server via the state pipe. On server, Flush just calls Flush on the targeted StateArray(s).\r\n\r\n**State Pipes**\r\nAppState also allows devs to assign input / output pipes to provide synchronization from client to server, or (potentially) between peer-to-peer clients.\r\n\r\n```\r\npublic interface IStatePipeOutput\r\n{\r\n    Queue<object> StatesReceived { get; }\r\n}\r\n\r\npublic interface IStatePipeInput\r\n{\r\n    bool Sending { get; }\r\n    void SendStates(IEnumerable<object> states);\r\n}\r\n```\r\nIn the current implementation (`AppStatePipe`) the state pipe is a component on the Player object, which UNet automatically spawns with authority.\r\n\r\n**Initialization**\r\nBy default AppState has no StateArrays. On startup AppState automatically seeks out IAppStateSource components, which provide a list of IItemState types for which StateArrays are needed. (Eg `AppStateUsersSource` which requests StateArrays for UserState and UserSlot.)\r\n```\r\npublic interface IAppStateSource : INetworkBehaviour\r\n{\r\n    bool Synchronized { get; set; }\r\n    IEnumerable<Type> StateTypes { get; }\r\n\r\n    void GenerateRequiredStates(IAppStateReadWrite appState);\r\n}\r\n```\r\n\r\n**Issues**\r\n- Currently implemented using UNet HLAPI. AppStateSource components are required to define public fields with a SyncListStruct, which is gathered using reflection. This will have to change.\r\n- Due to the HLAPI's requirement that SyncListStruct classes be defined within the NetworkBehavior that uses them, the sync lists being used by AppState's StateArrays are defined in IAppStateSource components. Another reason to move away from UNet.\r\n- StatePipe system needs to be reworked to be more peer-to-peer friendly.\r\n\r\n\r\nStateObjects\r\n---\r\nThis system handles a ton of boilerplate for spawning / updating objects associated with a particular item state. Typical use case would be generating and updating Holograms.\r\n\r\nDevelopers create a set of prefabs for each state type requiring an associated in-game object. Each prefab must have a component that inherits from the StateObject base class, which implements the IStateObject interface:\r\n```\r\npublic interface IStateObject<T> : IGameObject where t : struct, IItemState<T>\r\n{\r\n    sbyte ItemNum { get; }\r\n    bool IsUserType { get; }\r\n    bool IsLocalUser { get; }\r\n\r\n    IAppStateReadOnly AppState { get; }\r\n    IUserView Users { get; }\r\n    IStateView StateView { get; }\r\n\r\n    T PreviousState { get; }\r\n    T CurrentState { get; }\r\n}\r\n```\r\nAdditional components on this prefab (including the class inheriting from StateObject) can implement the IStateListener interface to receive updates about state changes:\r\n```\r\npublic interface IStateListener<T> where T : struct, IItemState<T>\r\n{\r\n    void OnStateInitialize(IStateObject<T> stateObj, T initState);\r\n    void OnStateChange(IStateObject<T> stateObj, T oldState, T newState);\r\n}\r\n```\r\nLastly, the state object can be used as a conduit for state changes via the ChangeState method:\r\n```\r\npublic class HologramStateObject : StateObject<HologramState>, IStateListener<HologramState>\r\n\r\n    void OnStateChange(IStateObject<HologramState> stateObj, HologramState oldState, HologramState newState) \r\n    {\r\n        if (timeToChangePosition)\r\n        {\r\n            newState.Position = transform.position;\r\n            // automatically writes to app state\r\n            ChangeState(newState);\r\n        }\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n**Issues**\r\n- Currently intertwined with SessionManager system. Responsibility for updating session state should be moved to the SessionManager, or to another manager entirely.\r\n- Currently intertwined with User system. This is useful for updating user-related objects, but this could probably be separated as well.\r\n\r\nSessionManager\r\n---\r\nProvides a skeletal framework for a structured mixed-reality sharing experience using AppState and StateObjects. Runs set of developer-defined 'stages' in a sequence. Example of a session stage progression might be:\r\n1. JoinGame\r\n2. ChooseRole\r\n3. PlayGame\r\n4. ShowHighScores\r\n(Repeat)\r\n\r\nSession stages are stored as prefabs and instantiated at runtime. These prefabs must have a component that implements the abstract class SessionStageBase, which has the following methods:\r\n```\r\npublic abstract void OnStageEnter (ITimeSource timeSource, IAppStateReadWrite appState,  IUserView users, IStateView stateView);\r\npublic abstract void OnStageExit (ITimeSource timeSource, IAppStateReadWrite appState,  IUserView users, IStateView stateView);      \r\npublic abstract IEnumerator TransitionIn (ITimeSource timeSource, IAppStateReadWrite appState,  IUserView users, IStateView stateView);\r\npublic abstract IEnumerator RunStage (ITimeSource timeSource, IAppStateReadWrite appState,  IUserView users, IStateView stateView);\r\npublic abstract IEnumerator TransitionOut (ITimeSource timeSource, IAppStateReadWrite appState,  IUserView users, IStateView stateView);\r\n```\r\nTransitionIn, RunStage and TransitionOut are enumerators to make starting / stopping / pausing trivial.\r\n\r\nThe main purpose of a session stage is to monitor / modify the app state in response to user actions. This keeps flow of control for the app as a whole out of the hands of individual StateObjects making it easier to track / control.\r\n\r\nSince stages are instantiated as prefabs they can be accompanied by objects which are controlled by the stage script (eg a scoreboard). This provides an alternative to the one-state, one-object approach of StateObjects.\r\n\r\n**Issues**\r\n- Should probably be renamed to differentiate from network session.\r\n- No support for scene loading / unloading, which is a must IMO.\r\n- No support for branching experiences.\r\n\r\nUserManager / DevicePool\r\n---\r\nSystem for managing users and devices associated with a user. Uses AppState to manage user slots and user states.\r\n\r\n**Issues**\r\n- Lobby system is bare-bones.\r\n- Requires manual redefinition of enum values for UserTypeEnum / UserTeamEnum - would be better if this were templatized.\r\n- Assumes the existence of an AnchorSynchronizer.\r\n\r\nAnchorSynchronizer / UserAlignment\r\n---\r\nSystem for synchronizing locally acquired anchor positions, then using that shared information to align users to the same shared physical space."""
368793650,2906,b'Fix dotnet runtime for UWP',"b""Overview\r\n---\r\nAdd pragma restrictions on use of System.Diagnostics.Process for cases where UWP and dotnet backend are used, since they don't use netstandard 2.0\r\n\r\nChanges\r\n---\r\n- Fixes: #2874\r\n"""
368438606,2903,b'Overlap Solver',"b'I keep finding myself recreating this solver in all my projects, so I figured maybe someone else would like it in the toolkit. You can get the same behavior from the right settings in other solvers, but this simplest form takes potential mistakes out of debugging, so I end up using it a lot.'"
368432905,2902,b'Lumin Platform Support',b'Overview\r\n---\r\n**ML Unity package & MLTP-8 Editor required & not included.**\r\n\r\n- Adds Lumin Platform Support\r\n    - Updates camera settings\r\n    - Adds controller Support\r\n'
368004574,2900,b'Merge 2017.4.2 release from htk_development to master',"b""Overview\r\n---\r\nThis release contains:\r\n\r\n* SpectatorView fix that was preventing the host from connecting. (#2612)\r\n* Updated UnityGLTF drop properly conforming to the glTF spec's coordinate system. This introduced a 180 degree rotation to the controller models when rendered. (#2638)\r\n* A new Orbital solver, replacing the BodyLock solver. (#2480)\r\n* Some pointer ray updates, where the debug rays were drawing from the grip and the visual lines weren't properly disabling themselves on incompatible controller models. (#2666, #2670)\r\n* New, experimental QR code reading preview feature. (#2872)\r\n* Fix for a two handed manipulation rotation issue. (#2487)"""
367983848,2898,b'Add rotated transform to Solvers after glTF coordinate system update',"b'Overview\r\n---\r\nAfter the glTF coordinate system update (#2638), the controller model\'s forward, up, etc vectors are reversed.\r\n\r\nIn order to account for this in solvers that assume the forward direction is out from the controller, we now expose a transform rotated 180 degrees around the Y axis, so ""forward"" is ""forward"" again.\r\n\r\nThis PR also updates the sample scene a little bit to account for this addition.'"
367979951,2897,b'fixed a case where the MixedRealityPlayspace could return null',b''
367977967,2896,b'Add binary nuget package compilation',"b'Overview\r\n---\r\n\r\nThis adds csproj files that compile to binary files and get packed into nupkgs. \r\n\r\nCurrent progress is not complete, but should be reduced to minor issues. The goal of this change: \r\n\r\n* Understand folder structure of new solution. \r\n* Commit to technology investment \r\n* Move forward on packaging\r\n\r\nInstructions to build and package: run `dotnet pack` in /Build folder. Tested with version `2.1.402` of dotnet core.\r\n\r\nVersion number still needs to be resolved, so the current one is a placeholder. #2888  has a discussion on this topic. \r\n\r\n\r\nTesting done: \r\n\r\n* Use NuGetForUnity to consume local nupkg\r\n* Make sure the ""Configure..."" menu item exists and can be clicked\r\n\r\nCurrently default profiles still don\'t seem to resolve correctly. Since this is a feature branch, I consider that acceptable to address in another PR as I continue to test and move forward.  I have not tested that the solution deploys and behaves correctly, only compilation problems have been resolved. '"
367890216,2895,b'Decreased profile selector button width',b'## Before \r\n![profilebefore](https://user-images.githubusercontent.com/9560490/46624896-b1970f00-caf7-11e8-9723-e36de890b179.png)\r\n\r\n## After\r\n![profileafter](https://user-images.githubusercontent.com/9560490/46624899-b491ff80-caf7-11e8-82c6-a63421f670d8.png)\r\n'
367859406,2894,b'Updated git ignore definitions',b'Overview\r\n---\r\n- Added cert area.\r\n- Added .out folder\r\n- Added *.package (a unity generated file)'
367621993,2891,b'Interactable development - do not approve!',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
367553524,2890,"b'Fixed UWP Lag issue, changed from Event Based updates to polling.'","b'Overview\r\n---\r\nIssue seems related to the way Unity is exposing the InteractionManager and access to the data within which seems UI / polling bound (only works correctly when attached to a GameObject/MonoBehaviour).\r\n\r\nThe resolution was to change from using the InteractionManager events for update / pressed / released, to polling during the Unity Update event.  This ensures the data is synchronised accurately.\r\n\r\nChanges\r\n---\r\n- Fixes: #2889\r\n\r\nResults\r\n---\r\nFrom (Top - Raw, Bottom - MRTK)\r\n![uwpcontrollerlag](https://user-images.githubusercontent.com/1793042/46581459-1fc4ce80-ca31-11e8-85ee-2bcff13364d1.gif)\r\n\r\nTo (Top - Raw, Middle - MRTK, Bottom - InteractionDef)\r\n![uwpcontrollerfixed](https://user-images.githubusercontent.com/1793042/46583318-03cf2600-ca4d-11e8-893a-1cbcf8895c37.gif)\r\n'"
367387957,2887,b'Remove non-events from IMixedRealityFocusHandler',"b""Overview\r\n---\r\nThis is the only handler interface that contains more than the event handlers. `IMixedRealityFocusHandler` contains three additional properties which added unnecessary overhead for implementing the focus events and are implementation-specific.\r\n\r\nIf a developer needs access to this information, they can inherit from `BaseFocusHandler`. Either way, we don't pass `I[*]Handler` references around, so there's no need to define them there, and not all interface implementations will need them."""
367387657,2886,b'Properly initialize pointerEventData in the input manager',"b""Overview\r\n---\r\n`RaisePointerDown` and `RaisePointerUp` were using `InputEventData`'s `Initialize` instead of `MixedRealityPointerEventData`'s, so the pointer stored inside the event data wasn't being updated. This caused the pointer to always be the pointer that last fired a click event (or `null`, initially), as that was the only method properly updating the pointer."""
367382967,2885,b'[Solver PR 5] Add Solver example scene',"b'Overview\r\n---\r\nAdds the Solver example scene.\r\n\r\nTo test, point and click on any of the spheres in the scene with a motion controller. The solver should attach to your controller and behave appropriately.\r\n\r\nChanges\r\n---\r\nRelated to #2465\r\n'"
367306940,2884,b'Body/Head renamed to MixedRealityPlayspace/Main Camera',b'The content PR that renames Body to MixedRealityPlayspace and Head to Main Camera'
367017331,2881,b'Updated vNEXT Editor to 2018.1.9f2',b''
366878578,2879,b'Add missing plugin files',b'Overview\r\n---\r\nAdds missing plugin files from #2872 \r\n\r\n- Fixes: #2878'
366573504,2877,b'Properly set editor preference.',b'Overview\r\n---\r\nEditor preferences were not being set properly in MRTK Preferences window.\r\n'
366103225,2873,b'merge mrtk_development -> feature/mrtk_spatialAwareness',b'\r\n'
366088349,2872,b'Add QRTracking assets and samples in Holotoolkit-preview',"b'Overview\r\n---Introducing QR tracking, platform driver implements the QR tracking and this sample shows how to use QR tracking.\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'"
366038184,2871,b'Mrtk development',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
365725959,2870,b'Asset code for Interactables - 1.5 of 4',b'Overview\r\n---\r\nMoved code to a new branch and PR. Incorporated feedback from previous branch and PR.\r\n\r\nChanges\r\n---\r\nAdded summary tags\r\nChanged some foreach loops\r\nSimplified propertySettings to remove the switch statement\r\n- Fixes: # .\r\n'
365677465,2869,b'a few more diagnostics changes',"b""Overview\r\n---\r\nFound a missing namespace reference (Current dev branch doesn't compile)\r\nFixed profile locking.\r\n\r\n- Fixes: #2864\r\n"""
365655633,2868,b'merge of mrtk_development',b'\r\n'
365632345,2867,b'Fix copy+paste errors in diagnostic code',"b'Overview\r\n---\r\n\r\nThere were remaining boundary comments, namespaces, and text in the diagnostic code. Scrub that out\r\n\r\nChanges\r\n---\r\n- Fixes: #2863 \r\n'"
365629032,2866,b'Updated diagnostics',b'Overview\r\n---\r\nRenamed interface to conform to feature naming pattern.\r\nLocked default profile.\r\n\r\nChanges\r\n---\r\n- Fixes: #2865\r\n- Fixes: #2864\r\n'
365050291,2859,b'Add interface guidelines',"b""The coding guidelines don't currently specify interface design recommendations. This adds the recommendation that interface types should avoid concrete types where possible."""
365024428,2858,"b'Update BaseFocusHandler, as being the old focused object does not always mean overall focus was lost'","b""Overview\r\n---\r\nBaseFocusHandler was assuming that being the `OldFocusedObject` meant that overall focus was lost. Since we're keeping track of the focusers (and there might be multiple), I've updated the locally tracked bool to instead check if any focusers are currently focusing the object."""
365015670,2857,b'Removed obsolete assert in FocusProvider',"b""Migrated https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2456 from master (with #2450 being the Issue).\r\n\r\nIt also doesn't look like the assert was doing what it thought it did, since it's checking against the focused point, not the start point."""
364809561,2855,b'Interactables complete 4 of 4',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
364809338,2854,b'Themes for Interactables 3 of 4',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
364809094,2853,b'States for Interactables 2 of 4',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
364808529,2852,b'Assets and some layout code for Interactables - 1 of 4',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
364686300,2849,b'Updating Diagnostics inspector namespace',"b""Overview\r\n---\r\nThe namespace for the diagnostics inspector didn't match the other inspectors (missing `Core`).\r\n"""
364679470,2848,b'Update spatial architecture to include observer interface',b'Overview\r\n---\r\nAdds the IMixedRealitySpatialObserver interface and updates the existing architecture files / documentation to support this model.\r\n\r\nThis change facilitates support for platform specific implementations without having platform specific code in the spatial awareness system.\r\n'
364646908,2847,b'Update MRTK-WorkRoadmap.md',b'Changes Addison requested in the other PR.\r\n'
364614748,2846,b'Feature/mrtk diagnostics',"b'Overview\r\n---\r\nThis adds the full diagnostics feature for use in MRTK. Diagnostics shows:\r\n* Frames per second\r\n* Frame time\r\n* Cpu usage\r\n* Memory Usage\r\n\r\n\r\nDiagnostics are disabled by default, and each component of diagnostics is configurable to be enabled/disabled.\r\n'"
364589148,2845,b'removed the task list',"b""It's in the  Work Roadmap now.\r\n\r\nFriend of:\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2844\r\n"""
364588489,2844,b'Moved some of the non-guidance info out of the architecture docs',"b""Overview\r\n---\r\nI'll follow up with a PR removing this from the other doc. (https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2845)\r\n\r\nI am not opposed to deleting this list, if it's not longer relevant. I just wanted to get it out of the architecture guidance.\r\n"""
364582728,2843,"b""clarified some wording with things I've learned over the last week""",b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
364175717,2840,b'Merge diagnostics into development',"b'Overview\r\n---\r\n\r\nThis adds the full diagnostics feature for use in MRTK. Diagnostics shows:\r\n\r\n* Frames per second \r\n* Frame time\r\n* Cpu usage\r\n* Memory Usage\r\n\r\nDiagnostics are disabled by default, and each component of diagnostics is configurable to be enabled/disabled. \r\n'"
364159294,2839,b'Feature/mrtk sharing2',b'Overview\r\n---\r\nDraft architecture documents added for PR review. \r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
363817411,2838,b'dev -> spatial awareness feature merge',b''
363810982,2837,b'Controller proxy visualization profile',"b""Overview\r\n---\r\nMoved from #2807\r\n\r\nI've broken out the visualization of the controllers into their own profile, to give more fine grained control over the controller models. Part of the reason for this change was the fact that the input mapping profile didn't allow us to expose override models and other settings because of the pop out windows. \r\n\r\n![image](https://user-images.githubusercontent.com/13334553/45731363-0b0cbd80-bb8c-11e8-8e85-b919dbfa170f.png)\r\n\r\nI've added a `IMixedRealityControllerVisualizer` that supports getting the controller's `GameObejct` reference without breaking the architecture design patterns we've established. (You'll notice that I updated the [`BaseController`](https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2807/files#diff-cfedb4662811658603ef2dfdf35c85a6R210) class to properly reference this interface, and not the transform or game object reference).\r\n\r\nI've enhanced the controller visualization profile's model object fields to [ensure we're assigning valid prefabs only](https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2807/files#diff-226a65267f295f1911d642c8ac1aa0d6R209) (and not just mesh assets) as well as adding the user defined concrete type that implements `IMixedRealityControllerVisualizer`.\r\n\r\nHere's a little snippet example of how to get the controller visuals from the input system:\r\n(You'll notice that we can get any number of detected controllers)\r\n\r\n```C#\r\npublic class MyClass : BaseInputHandler, IMixedRealitySourceStateHandler\r\n{\r\n    private List<Transform> leftHandControllerTransforms = new List<Transform>();\r\n    private List<Transform> rightHandControllerTransforms = new List<Transform>();\r\n\r\n    protected override void Start()\r\n    {\r\n        base.Start();\r\n\r\n        foreach (var controller in InputSystem.DetectedControllers)\r\n        {\r\n            // Skip the controllers that don't have visuals\r\n            if (controller?.Visualizer == null) { continue; }\r\n\r\n            if (controller is WindowsMixedRealityController)\r\n            {\r\n                // Do something for a specific controller type\r\n            }\r\n\r\n            switch (controller.ControllerHandedness)\r\n            {\r\n                case Handedness.Left:\r\n                    leftHandControllerTransforms.Add(controller.Visualizer.GameObjectProxy.transform);\r\n                    break;\r\n                case Handedness.Right:\r\n                    rightHandControllerTransforms.Add(controller.Visualizer.GameObjectProxy.transform);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void OnSourceDetected(SourceStateEventData eventData)\r\n    {\r\n        if (eventData.Controller?.Visualizer != null)\r\n        {\r\n            switch (eventData.Controller.ControllerHandedness)\r\n            {\r\n                case Handedness.Left:\r\n                    leftHandControllerTransforms.Add(eventData.Controller.Visualizer.GameObjectProxy.transform);\r\n                    break;\r\n                case Handedness.Right:\r\n                    rightHandControllerTransforms.Add(eventData.Controller.Visualizer.GameObjectProxy.transform);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void OnSourceLost(SourceStateEventData eventData)\r\n    {\r\n        if (eventData.Controller?.Visualizer != null)\r\n        {\r\n            switch (eventData.Controller.ControllerHandedness)\r\n            {\r\n                case Handedness.Left:\r\n                    leftHandControllerTransforms.Remove(eventData.Controller.Visualizer.GameObjectProxy.transform);\r\n                    break;\r\n                case Handedness.Right:\r\n                    rightHandControllerTransforms.Remove(eventData.Controller.Visualizer.GameObjectProxy.transform);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nChanges\r\n---\r\n- Fixes: #2799 \r\n- Fixes: #2785 By giving the ability to get a controller's visualization and in extension it's transform.\r\n\r\nBreaking Changes\r\n---\r\n- Removed unused id's from interaction mapping (we usually use the array item's position in the array as the id)\r\n- Broke out controller visualization options in Controller Mapping profile into its own profile"""
363772252,2836,"b'add additional components header, code organization cleanup'","b'While using the configuration inspector, I found it hard to locate the registered components profile since it did not have a header, so I added one.\r\n\r\nWhile in the code, I noticed that there were some boundary system variables located with the teleport system, so I relocated to be with ""friends"".\r\n\r\nAlso made some minor layout (spacing) changes and moved the boundary requiring room scale notification to a more prominent location for easier notice.\r\n'"
363766031,2835,b'Input Handler Inspector Fix',b'Overview\r\n---\r\nPulled out Mixed Reality Manager Check and added it to base handler inspector to ensure proper setup if component is added before system is configured in the scene.\r\n'
363413885,2833,b'Mouse Pointer Updates',b'Overview\r\n---\r\n- Added notification when mouse device manager is started about how to regain mouse control.\r\n- Cached the ray in `BasePointer`\r\n![image](https://user-images.githubusercontent.com/13334553/45994454-98e31f80-c048-11e8-9033-3fafc1a5655c.png)\r\n\r\nChanges\r\n---\r\n- Fixes: #2832 \r\n- FIxes: #2756 \r\n'
363404081,2831,b'Implement SDK Profile Lock',b'Overview\r\n---\r\nLocked the SDK profiles so consumers cannot edit the default assets in the SDK.\r\nMaintainers can still unlock and edit the profiles in Edit/Preferences/MRTK\r\n![image](https://user-images.githubusercontent.com/13334553/45992833-a09ec600-c040-11e8-861f-f8dc16ab2daa.png)\r\n\r\nChanges\r\n---\r\n- Implements part of: #2825 '
363334799,2830,"b""Update MRTKStandard shader's reference to its custom inspector""","b""Overview\r\n---\r\nThe namespace of the shader's inspector was changed in #2783, but the reference in the shader itself wasn't updated, causing:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/45981353-8f869280-c009-11e8-96fc-117bea4e5f20.png)"""
363326577,2829,b'Mrtk development tooltip',"b'Overview\r\n--- Updated Tooltips to vNext\r\n--- Tooltips now use LineDataProvider concepts (SimpleLine, Spline, ConstraintedParabola)\r\n--- Added README for Tooltips\r\n--- Reorganized and renamed Enums to match vNext conventions.\r\n\r\n\r\nChanges\r\n'"
363146859,2827,b'Updated isOpaque check to be part of the camera profile #2826',b'Overview\r\n---\r\nResolution for Task #2826\r\n\r\nChanges\r\n---\r\n- Changes IsOpaque property to be non-static\r\n- MRManager check updated to match.\r\n\r\nIsOpaque option now accessible through the profile with\r\n```\r\nMixedRealityManager.ActiveProfile.CameraProfile.IsOpaque\r\n```\r\n'
362800860,2824,b'Centralized all the core manager accessors to MixedRealiyManager',b'Overview\r\n---\r\nMade getting core managers a bit easier.\r\n\r\nChanges\r\n---\r\n- Fixes: https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2822\r\n'
362793060,2823,b'vNEXT: SDK UX BoundingBoxRig & TwoHandManipulation',b'## Overview\r\nPorted [BoundingBoxRig ](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/master/Assets/HoloToolkit-Examples/UX/Readme/README_BoundingBoxGizmoExample.md)and [TwoHandManipulation ](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/master/Assets/HoloToolkit/Input/Scripts/Utilities/Interactions/TwoHandManipulatable.cs)from HoloToolkit.\r\nno major logic changes - mainly namespace changes.\r\n\r\nNew location of the ported sample scenes:\r\nMixedRealityToolkit-**Examples**/Demos/UX/BoundingBox/Scenes/BoundingBoxExample.unity\r\nMixedRealityToolkit-**Examples**/Demos/Input/TwoHandManipulation/Scenes/TwoHandManipulationExample.unity\r\n\r\n## Changes\r\n### InputSystem\r\nAssets/MixedRealityToolkit/InputSystem/Utilities/AffineConstraintEnums.cs\r\n\r\n### SDK/Boundnig Box \r\n**Assets/MixedRealityToolkit-SDK/Features/UX/Scripts/BoundingBoxes/**\r\nBoundingBox.cs\r\nBoundingBoxGizmo.cs\r\nBoundingBoxGizmoHandle.cs\r\nBoundingBoxGizmoHandleAxisToAffectEnum.cs\r\nBoundingBoxGizmoHandleHandMotionTypeEnum.cs\r\nBoundingBoxGizmoHandleRotationTypeEnum.cs\r\nBoundingBoxGizmoHandleTransformTypeEnum.cs\r\nBoundingBoxes/BoundingBoxGizmoShell.cs\r\nBoundingBoxHelper.cs\r\nBoundingBoxRig.cs\r\n\r\n**Assets/MixedRealityToolkit-SDK/Features/UX/Materials/**\r\nBoundingBoxHandle.mat\r\nBoundingBoxHandleGrabbed.mat\r\nBoundingBoxHandleMaterial.mat\r\nBoundingBoxLines.mat\r\n\r\n\r\n### SDK/TwoHandManipulation\r\n**Assets/MixedRealityToolkit-SDK/Features/UX/Scripts/TwoHandManipulation/**\r\nManipulationMode.cs\r\nTwoHandManipulatable.cs\r\nTwoHandMoveLogic.cs\r\nTwoHandRotateLogic.cs\r\nTwoHandScaleLogic.cs\r\n\r\n### Examples/Demos\r\nDemos/Input/TwoHandManipulation/Scenes/TwoHandManipulationExample.unity\r\nDemos/UX/BoundingBox/Scenes/BoundingBoxExample.unity\r\nDemos/UX/Materials/Coffee.mat\r\nDemos/UX/Materials/CoffeeCup.mat\r\nDemos/UX/Models/Buttons.FBX\r\nDemos/UX/Models/CoffeeCup.fbx\r\nDemos/UX/Models/Model_Bucky.fbx\r\nDemos/UX/Models/Model_Icosa.fbx\r\nDemos/UX/Models/Model_Octa.fbx\r\nDemos/UX/Models/Model_Platonic.fbx\r\nDemos/UX/Models/Model_PushButton.fbx\r\nDemos/UX/Models/MouseandCheese.fbx\r\nDemos/UX/Models/TheModule.fbx\r\nDemos/UX/Models/balloon.fbx\r\nDemos/UX/Textures/BoxGrid.png\r\nDemos/UX/Textures/CoffeeFoam.png\r\n\r\n\r\n\r\n\r\n'
362777822,2821,b'Ensured Input System is valid before setting cursor on Gaze Provider.',b'Overview\r\n---\r\nAdded await to start to make sure the input system is initialized before setting cursor.\r\n'
362767789,2820,b'Fixed line data provider gizmos when MRTK is not configured.',b'Overview\r\n---\r\nNo transforming required!\r\n\r\nBest part is that it works without a camera in the scene.\r\n\r\nChanges\r\n---\r\n- Fixes: https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2816\r\n'
362765514,2819,b'MRTK relative folder matching fix.',"b""Made sure to get the folder name only and make sure it exactly equals the folder name we're searching for."""
362754848,2818,b'Distortion fix',b'Overview\r\n---\r\nDistorterSimplex now creates more predictable noise in all 3 axis.\r\n\r\nChanges\r\n---\r\n- Fixes reported problems with noise distortion behaving strangely or tapering off in line UX controls using DistorterSimplex.\r\n'
362744474,2817,b'Fix typo in mouse cursor material name',b'Overview\r\n---\r\nThe mouse cursor material had a typo in the name. `Defaut` -> `Default`.'
362708492,2815,b'Fixed jump in SolverBodyLock rotation tether',"b'Overview\r\n---\r\nFixed jump in SolverBodyLock rotation tether by keeping the value of ""desiredRot"" between updates. Before, desiredRot was reset to Quaternion.identity in every updated which caused a bigger lock area around the zero rotation, and irregular jumps when the initial angle limit was exceeded.'"
362350676,2814,b'Add initial documentation around package manager',"b'Overview\r\n---\r\n\r\nStart documentation for Package Management. This should be used as a basis for conversation in determining policy more than implementation details. I want to make sure the community has the right discussion before I start adding any interfaces, classes, or in depth implementation on how to hook in with Unity. \r\n'"
362329912,2813,b'Updated the namespace of BaseCollectionInspector',"b""Overview\r\n---\r\n`BaseCollectionInspector`'s namespace wasn't in the normal inspector namespace for SDK inspectors.\r\n"""
362013424,2812,b'Feature process documentation and contribution update',b'Overview\r\n---\r\nUpdated contribution guidelines and added feature area process documentation.\r\n'
361868651,2810,b'Feature/mrtk sharing',b'Overview\r\n---\r\nImplemented rough architecture for INetworkHandler and NetworkEventData\r\n\r\nUpdated Ong Sharing code to work with vNEXT - resolved all console errors\r\n'
361853112,2809,b'Add UI for diagnostics',"b""Overview\r\n---\r\n\r\nAdd the UI for diagnostics. This is a simple UI to start. We should evaluate https://github.com/Microsoft/VisualProfiler-Unity as a UI option since there's been a lot of good work there, but this current iteration will do well for a baseline. \r\n"""
361573584,2807,b'Implementation of Controller Model Visualization Task',"b""Overview\r\n---\r\nI've broken out the visualization of the controllers into their own profile, to give more fine grained control over the controller models. Part of the reason for this change was the fact that the input mapping profile didn't allow us to expose override models and other settings because of the pop out windows. \r\n\r\n![image](https://user-images.githubusercontent.com/13334553/45731363-0b0cbd80-bb8c-11e8-8e85-b919dbfa170f.png)\r\n\r\nI've added a `IMixedRealityControllerVisualizer` that supports getting the controller's `GameObejct` reference without breaking the architecture design patterns we've established. (You'll notice that I updated the [`BaseController`](https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2807/files#diff-cfedb4662811658603ef2dfdf35c85a6R210) class to properly reference this interface, and not the transform or game object reference).\r\n\r\nI've enhanced the controller visualization profile's model object fields to [ensure we're assigning valid prefabs only](https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2807/files#diff-226a65267f295f1911d642c8ac1aa0d6R209) (and not just mesh assets) as well as adding the user defined concrete type that implements `IMixedRealityControllerVisualizer`.\r\n\r\nHere's a little snippet example of how to get the controller visuals from the input system:\r\n(You'll notice that we can get any number of detected controllers)\r\n\r\n```C#\r\n\r\npublic class MyClass : MonoBehaviour, IMixedRealitySourceStateHandler\r\n{\r\n    private List<Transform> leftHandControllerTransforms = new List<Transform>();\r\n    private List<Transform> rightHandControllerTransforms = new List<Transform>();\r\n\r\n    private void Start()\r\n    {\r\n        foreach (var visualizer in MixedRealityManager.VisualizationSystem.DetectedVisualizers)\r\n        {\r\n            // Skip the controllers that don't have visuals\r\n            if (visualizer == null) { continue; }\r\n\r\n            if (visualizer.Controller is WindowsMixedRealityController)\r\n            {\r\n                // Do something for a specific controller type\r\n            }\r\n\r\n            switch (visualizer.Handedness)\r\n            {\r\n                case Handedness.Left:\r\n                    leftHandControllerTransforms.Add(visualizer.VisualizerGameObjectReference.transform);\r\n                    break;\r\n                case Handedness.Right:\r\n                    rightHandControllerTransforms.Add(visualizer.VisualizerGameObjectReference.transform);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void OnSourceDetected(SourceStateEventData eventData)\r\n    {\r\n        if (eventData.Controller?.Visualization != null)\r\n        {\r\n            switch (eventData.Controller.ControllerHandedness)\r\n            {\r\n                case Handedness.Left:\r\n                    leftHandControllerTransforms.Add(eventData.Controller.Visualization.VisualizerGameObjectReference.transform);\r\n                    break;\r\n                case Handedness.Right:\r\n                    rightHandControllerTransforms.Add(eventData.Controller.Visualization.VisualizerGameObjectReference.transform);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void OnSourceLost(SourceStateEventData eventData)\r\n    {\r\n        if (eventData.Controller?.Visualization != null)\r\n        {\r\n            switch (eventData.Controller.ControllerHandedness)\r\n            {\r\n                case Handedness.Left:\r\n                    leftHandControllerTransforms.Remove(eventData.Controller.Visualization.VisualizerGameObjectReference.transform);\r\n                    break;\r\n                case Handedness.Right:\r\n                    rightHandControllerTransforms.Remove(eventData.Controller.Visualization.VisualizerGameObjectReference.transform);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nChanges\r\n---\r\n- Fixes: #2799 \r\n- Fixes: #2785 By giving the ability to get a controller's visualization and in extension it's transform.\r\n\r\nTODO\r\n---\r\n- [ ] [Test type passed correctly](https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2807/files#diff-0dfbf575be4a6bde52ea31ae7718e31cR37)\r\n\r\nBreaking Changes\r\n---\r\n- Removed unused id's from interaction mapping (we usually use the array item's position in the array as the id)\r\n- Broke out controller visualization options in Controller Mapping profile into its own profile"""
361486996,2806,b'Updating release version references in HTK for 2017.4.2 release',"b'Overview\r\n---\r\nUpdating release version references in HTK for pending 2017.4.2 release, for which a PR into master will be opened after this PR is merged.'"
361360925,2804,b'vNext: InteractionReceiver base class',"b'### Overview\r\nPorting the original InteractionReceiver from HTK. This script registers itself with the `InputSystem` and listens for all events available for GameObjects in the Interactables list. To extend, simply override the virtual methods. This is a core component used by many others (namely App bar). Unfortunately, since InteractionReceiver is not necessarily a ""UX"" component, I can\'t make a demo scene - this is more foundational and unblocks other components.\r\n\r\n### Changes\r\n-- **InteractionReceiver** now implements `IMixedRealityGestureHandler<T>`\r\n\r\n### Note\r\nI put the InteractionReceiver in the `SDK.UX.Receivers` namespace, but it might make more sense in `SDK.Input.Receivers`\r\n\r\n### Interaction Receiver in HoloToolkit\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/blob/master/Assets/HoloToolkit-Examples/UX/Readme/README_InteractableObjectExample.md\r\n![receiver](https://user-images.githubusercontent.com/13754172/45731074-7bb2da80-bb8a-11e8-9f43-b55c6bea587e.png)\r\nhttps://medium.com/@dongyoonpark/open-source-building-blocks-for-windows-mixed-reality-experiences-hololens-mixedrealitytoolkit-28a0a16ebb61\r\n\r\n'"
361091921,2803,b'Updated config profiles',"b""Overview\r\n---\r\nWe want to make sure that all feature specific settings are encapsulated in the feature's profile. Boundary height should have been part of the boundary viz profile.\r\n\r\n- moved boundary height into boundary visualization profile.\r\n- made sure boundary profile wasn't hidden when experience setting wasn't set to room.\r\n- removed teleport duration from main config profile, as it's currently unimplemented anyway.\r\n"""
361024272,2801,b'Fixed hard coded MRTK path in editor settings class',"b""Overview\r\n---\r\nAdded ability to get the Mixed Reality Toolkit's folder directory path.\r\n\r\nFixes: #2802"""
361010870,2800,b'vNEXT: Adding Interaction and button components to UX features',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
360768563,2796,b'Gazeprovider input system issue due to scene loads',b'Overview\r\n---\r\nWaitUntil() InputSystem is active did not work for multiple scene setup. It did not continue despite the InputSystem was !=null from the beginning.\r\nWorkaround for: https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2744\r\n'
360662274,2795,b'Alternate implementation for Solver Handler Scene Object attachment',"b'Overview\r\n---\r\nThis implementation enables the Mixed Reality manager to keep a track of any Scene Objects created in the scene by devices and makes them available for Scene components.\r\n\r\nThis is a preliminary check-in for review\r\n\r\nIt\'s critical that devices are not polled or ""part"" of a scene.  The Current MixedRealityControllerVisualizer is a representation of a controller in a scene, the GameObject of the controller.\r\nTo this the device layer appends the SourcePoseController to enable input events from the controller to manipulate the Controller Game object.\r\n\r\nThis implementation has enabled the Visualizer to register it\'s existence with the MixedRealityManager, so that other scripts can easily query for the gameobjects for the controllers in the scene.  Scene objects interacting with scene objects.\r\n\r\n*Note* **No parts of the device layer have been modified for this implementation**.\r\n\r\nPlease review and comment where further changes are needed, \r\n\r\n> Additionally, this solves issue #2790 \r\n\r\nChanges\r\n---\r\n- Adds new Scene Object Registration system to the Mixed Reality manager (currently ""limited to"" MotionControllerVisualizers)\r\n - Adds functionality to the SolverHandler to grab the correct handed controller from the Scene Object Registration\r\n- Added the ISourceStatehandler implementation to the SolverHandler, so it can refresh the solver when a controller is attached / detached.\r\n\r\nTODO\r\n---\r\nThis is a preliminary implementation, Ideally the Scene Object Registry should be able to handle any game object, but this requires a fair amount of additional design.\r\n\r\n# Registry notes\r\n\r\nThis brings the registry count up to 3, the distinct registries and their purpose are as follows:\r\n\r\n* Core manager Registry - Unique registry for managers where there can only ever ne a single instance in operation (e.g. InputSystem, BoundarySystem). Each manager receives all Unity events coordinated through the MR Manager.\r\n* Component Registry - Emulates the managers registry, except allows multiple components to be added.  Each manager receives all Unity events coordinated through the MR Manager.\r\n* Scene Object Registry - List of referencable Scene objects, to avoid use of ""FindObjectOfType"" lookups.  Used for regularly queries scene objects critical to a project (e.g. VR Controllers represented in a scene)'"
360661129,2794,b'Fixed pointer registration.',"b'Overview\r\n---\r\n- Also waited until the input system is valid before setting the cursor.\r\n- We should only be setting the cursor once in Start, not on each Enable.\r\n- Added documentation to cursor interface and moved the property into the cursor implementation region of the class.\r\n\r\nChanges\r\n---\r\n- Fixes: https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2752\r\n'"
360492312,2792,b'Update WMR source naming to include Voice',"b'Overview\r\n---\r\nCurrently, the manager assumes that any source without a handedness is a hand. However, it can also be voice, which comes across the `InteractionManager` events as a select press and release when ""Select"" is spoken.'"
360490376,2791,b'[Solver PR 3.5] SolverHandler bug fixes',"b""Overview\r\n---\r\nRemoved `[DisallowMultipleComponent]` as it shouldn't have been added in the first place and the InBetween solver depends on multiple handlers.\r\nRefactored out `RefreshTrackedObject()` as a public method to facilitate runtime refreshes.\r\nFixed a bug where a solver's parent's scale wasn't being accounted for in the desired solver offset, so offsets could be larger or smaller in world space than expected."""
360422529,2789,b'Solver Handler Transform Synchonization',b'Overview\r\n---\r\nExample of solver handler implementation using `IMixedRealityControllerPoseSynchronizer`\r\n\r\nFixes: https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2785\r\n\r\n(I only added a solver handler to the parabolic pointer as trying 2018.3 may have temporarily broke prefab editing for me)'
360369666,2788,b'Cherry picked Solver changes from Part 4 PR',b'Overview\r\n---\r\nThese are the changes I do agree with from #2784'
360101936,2787,b'Hide the base InputSystemGlobalListener Start call if isFocusRequired is checked',"b'Overview\r\n---\r\n`InputSystemGlobalListener` registers as a global listener in `Start`, `OnEnable`, and `OnDisable`. `BaseInputHandler` properly hides the registration in `OnEnable` and `OnDisable`, but did not in `Start`.\r\n\r\nChanges\r\n---\r\n- Fixes: #2786\r\n'"
360082212,2784,b'[Solver PR 4] Add controller-tracking support to solvers',"b'Overview\r\n---\r\nAdds controller finder to the solvers. Now, left and right motion controllers join the head as valid Solver targets. In order to facilitate this, I had to add the controller transform to the base MRController definition in order to expose it.\r\n\r\nThis also ports over the custom inspectors for SolverHandler and ControllerFinder.\r\n\r\nChanges\r\n---\r\nRelated to #2465\r\n\r\nRelated to #2608 (adding passive controller transforms)\r\n'"
360007387,2783,b'Updated old or incorrect namespaces',b'Overview\r\n---\r\nSome files had incorrect or old namespaces\r\n'
359983717,2782,"b""Pointers shouldn't raise input events""",b'Overview\r\n---\r\nUpdated pointer events to only raised from the controller/device classes as originally intended.\r\n'
359979088,2781,b'Pulled out gesture changes from WMR Gestures PR',b'Overview\r\n---\r\n- Removed old gesture events\r\n- Fixed new gesture events to raise proper event data.'
359718454,2779,b'vNEXT: Updated Coding Guidelines',b'Overview\r\n---\r\n- Added expression-bodied member and auto property guidelines.\r\n- Fixed a few spelling errors.\r\n- Added tooltip guidelines\r\n- Added color to the code with c# syntax'
359718129,2778,b'Updated coding guidelines',b'Overview\r\n---\r\nAdded expression-bodied member and auto property guidelines'
359706923,2777,b'Fixed mrtk_development compiler & build errors',"b'Overview\r\n---\r\nFixed some compiler errors, and cleaned up collection classes a bit to conform to established coding guidelines and patterns.\r\n\r\nChanges\r\n---\r\n- Fixes: #2776 \r\n'"
359691890,2775,b'port audio influencers and effects from HTK',"b'Overview\r\n---\r\nThis brings in the audio influencer scripts, lo fi and occlusion effects from the HoloToolkit. Also adds example scenes for each effect.\r\n\r\nChanges\r\n---\r\n- Add audio effect scripts to SDK\\Features\\Audio\r\n- Update scripts to meet the coding guidelines\r\n- Add example scenes\r\n- Set MSHRTF as the default audio spatializer (supports Windows 10 platforms).\r\n- Fixes: #2503\r\n'"
359670259,2774,"b'Renaming the ""Body"" objects to MixedRealityPlayspace in example maps'","b'This is a follow-up to my code PR that initializes a MixedRealityPlayspace instead of using a ""Body"":\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2719\n\nThis should probably wait for the code PR to go through before it\'s merged, but I wanted to do it separately in case there were any merge conflicts, we can throw this PR away and redo it easily.'"
359669104,2773,"b'replacing ""Body"" with MixedRealityPlayspace'","b""Proposal here:\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2719\n\nI touched several systems I'm not at all familiar with, so if you want to give this one a little extra attention, I'd appreciate it.\n\nThis has a bit of a weird quirk that if an existing scene has a Body that contains a Camera, it's basically ignored. I figured this was acceptable behavior in order for existing content wouldn't break. It's just strange because now there's a Body object hanging around doing nothing.\n\nI haven't updated the example scenes that use a Body in the scene; I'm going to do that in a follow up PR. \n\nTeleporting is intermittently broken due to the ParabolicTeleportPointer has not been registered bug. This is unrelated to my code, and some combination of restarting makes it go away. There's an issue/PR tracking that problem somewhere else."""
359596823,2771,b'vNEXT: Input Action Rules',"b'Overview\r\n---\r\nInput Action Rules for transforming actions.\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/46684730-8c160e00-cba8-11e8-9bea-a6e0e31ccd7f.png)\r\n\r\nIt\'s important to note, that rules do not ""re raise"" or ""re throw"" events, and that they simply replace the action raised with the new action defined in the rule, and do not modify the event data in any other way.\r\n\r\nFor example, events raised for `Player Movement` will only replace `Player Movement` action with the new action defined (such as Up, Down, Left, or Right), and do not re raise the event. As such rules for Up/Down/Left/Right need to raise the event for the rule to come into effect.\r\n\r\nChanges\r\n---\r\n- Fixes: https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2610\r\n\r\nTODO\r\n---\r\n- [x] Update Inspector to be more friendly\r\n- [x] Filter input action rules by Base Rule Axis Constraint'"
359589839,2770,b'[Solver PR 3] Update solvers from master',"b""Overview\r\n---\r\nThe InBetween solver was missing, and a few were missing features. This also ports over the custom inspectors from master.\r\n\r\nThis PR does not yet re-add the ControllerFinder script and the ability to use controllers as the tracked object for a solver. That's coming in the next PR.\r\n\r\nThis fixes some issues where lines were moved into `OnValidate` calls, but the fields being set weren't serialized and thus were getting lost on play.\r\n\r\nRelated to #2465\r\n\r\nPorts over #2222 and #2245"""
359431817,2768,b'Name IsValid check for vector/position more generic',b'Overview\r\n---\r\nThere is a` rotation.IsValidRotation` and `position.IsValidPosition`. Second would be same for scale. Hence named it `IsValidVector` for a more generic naming.'
359299218,2765,b'Just a few obsolete things we can take care of before 2018.3 beta',"b""WWW class has been depreciated for a while, and can most likely be safely removed as we're not using it anywhere in vNEXT"""
359228940,2764,b'Proposing requiring all enums to end with the Type suffix',"b'Added a rule indicating that enums should end with Type, in response to the discussion here:\r\n#2606 (comment)\r\n\r\nUpdated the other examples to follow this rule.'"
359228842,2763,b'Remove warning from BaseCursor',b'value assigned was never used'
359227468,2762,b'merge mrtk_development',b'\r\n'
359223117,2760,b'Proposing requiring all enums to end with the Type suffix',"b'Added a rule indicating that enums should end with Type, in response to the discussion here:\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2606#issuecomment-420322751\r\n\r\nUpdated the other examples to follow this rule.\r\n'"
359222366,2759,b'merge mrtk_development',b'\r\n'
359195519,2758,b'Proposing requiring all enums to end with the Type suffix',"b'Added a rule indicating that enums should end with Type, in response to the discussion here:\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2606#issuecomment-420322751\r\n\r\nUpdated the other examples to follow this rule.\r\n'"
359176860,2755,b'removed spatial mouse for now',b'Overview\r\n---\r\nspatial mouse still needs some work. Opt-in for now.'
359155208,2751,b'Mrtk development spatialawareness',b''
359154850,2750,b'Teleport Cursor Fix',b'Overview\r\n---\r\nCherry picked changes from Gesture PR\r\n\r\nFixes #2749 \r\nFixes #2752 '
359139697,2747,b'Fixed MixedRealityManager bugs',"b'- The ternary operator was a bit difficult to read, so I simplified it and removed the redundant else.\r\n- Also added the teleport system to core managers.\r\n- Fixed #2748\r\n- Improved Speech Handler to be more resilient when missing Mixed Reality Manager or Speech System.'"
359125607,2746,b'Merge latest changes from mrtk_developement',b''
359082566,2745,b'Merge master changes back into htk_development',b'Master is 4 commits ahead.'
358826132,2743,b'Removed UWP from OpenVR supported platforms',b'Overview\r\n---\r\nUnity does not include OpenVR as a valid VR SDK on UWP.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/45328883-9e9e1880-b512-11e8-87cc-c95af4b19707.png)\r\n'
358824587,2742,b'Fix GetManager(s) calls in MixedRealityManager',"b'Overview\r\n---\r\nAfter #2718, only one GetManager call was updated to actually check all interfaces. The others simply kept checking against the registered type, which is now IMixedRealityComponent for all components (causing them to return empty).\r\n\r\nBasically, this is an expansion of the code added in e710233caeadf9238fb180a061e589fa61dfeadb to all component/manager getters.'"
358824145,2741,"b'simplify the platform check logic, make it easier to extend'","b""Overview\r\n---\r\nThe existing platform check had an early out that didn't quite feel right to me after going back and looking at it again.\r\n\r\nThere was also multiple very specific checks for individual flags values.\r\n\r\nModified the code to be easier to manage in the future\r\n\r\n- add to the SupportedPlatforms enum\r\n- update the conversion methods\r\n"""
358818473,2740,b'Add scaffolding for diagnostic profile and display',"b'Overview\r\n---\r\n\r\nThe intent is to provide the layout for what configuration of diagnostic display will be. This does not include any UI elements yet, but still has the layout there.\r\n\r\nCurrently supported diagnostic information:\r\n\r\n* FPS\r\n* Memory\r\n* CPU\r\n\r\nEach diagnostic is only allowed to be turned on or off. Granularity of information will be determined as implementation for the display is added. \r\n\r\nChanges\r\n---\r\n- #2716 \r\n'"
358766540,2739,b'Better Cross Platform Voice Support',"b""Overview\r\n---\r\nCleaned up cross platform voice support\r\n\r\n@wassx I'd like to see your PR look like this one.\r\n"""
358634227,2737,b'Fix conditionals and zero parameter constructor to fix linux standalo\xe2\x80\xa6',b'Overview\r\n---\r\nLinux standalone build had errors due to missing conditionals and missing empty constructor\r\n'
358426827,2736,b'Added better platform checking',"b""Overview\r\n---\r\nNew registered component profile wasn't saving the platforms correctly bc unity's build targets and runtime platform enums were not bit flags.  \r\n\r\nI added an enum with our supported platforms and added a little utility to check if the runtime time platform or build target matches our own supported mask.\r\n\r\nI also fixed an issue where we were not saving our new values before resetting the profile."""
358419424,2735,b'Dictation Device Manager Update',b'Overview\r\n---\r\nFixed some issues with dictation manager lagging the editor when exiting play mode.'
358413399,2734,b'Fixed a race condition with BaseInputHandler',"b""Overview\r\n---\r\nThere was a race condition we needed to check against in the BaseInputHandler.  If the Input System isn't valid by the time we get OnEnable called we could drop registration of listeners. \r\n\r\nBaseControllerPointer also had the same issue for the Teleport System, and was updated to accommodate that as well.\r\n\r\nThese changes make the handlers more robust and is lazy initialized, waiting until the systems are valid before doing any action."""
358406478,2733,b'Base Input Handler: Wait for Input System before registering listeners',"b""TODO\r\n---\r\n- [ ] We need to do this to keep from having a null ref for mono scripts that wake up before the `MixedRealityManager`, but seems to break pointers. Need to test a bit more before it's ready."""
358401358,2732,b'Cleaned up build warnings from new component config profile',b''
358251615,2731,b'made gaze provider start virtual for proper overriding',b'Overview\r\n---\r\nSee https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2701#issuecomment-419513705\r\n'
358251431,2730,b'Moved auto start behavior to proper location',b'- Moved enum back into definitions to definitions where it belongs.\r\n- Added icon to `RecognitionConfidenceLevel`'
358242099,2729,b'Moved BuildAndDeploy folder into Utilities',b'Overview\r\n---\r\nMoved into utilities as it is such.'
358241102,2728,b'[Solver PR 2] Move solvers from Core into SDK',"b""Overview\r\n---\r\nMoves the solvers from Core into the SDK layer. This seems like a more natural fit for them, as they're MonoBehaviours and are components that build off of the Core layer."""
358237959,2727,b'[Solver PR 1] Add some prototyping models from HTK',"b""Overview\r\n---\r\nI'm breaking down my solver port into several smaller PRs. This is PR 1.\r\n\r\nThis brings over a subset of the prototyping models we shipped in the HTK examples folder, to be used in the Solvers example scene."""
358235545,2726,b'Added initial docs for architecture',b'Overview\r\n---\r\nAdded some stub files for upcoming documentation\r\n'
358192361,2725,b'Implement spatial awareness scaffolding',"b'Overview\r\n---\r\nAdd a skeletal implementation for the spatial awareness abstraction layer - underlying functionality to come in a future PR (to keep this one as manageable as possible).\r\n\r\nImpemented the spatial awareness profile and inspector (hooked into the core configuration profile)\r\n\r\nUpdate architecture documentation to match changes identified while creating the scaffolding.\r\n\r\nFix a minor bug or two in the configuration profile.\r\n\r\nFixes: #2508, #2386 \r\n\r\nCreated: #2724 to track Windows Mixed Reality implementation'"
358191644,2723,b'Fixes controller mapping profile serialization for HoloLens gestures',"b""Overview\r\n---\r\n#2639 checked in the default controller mapping profile with stale axes for the HoloLens gestures mappings. The Grip interaction was updated to be a single axis trigger, but those values weren't updated in the profile. When running on HoloLens, the controller was getting a mapping error, which then [shuts down the entire controller](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/mrtk_development/Assets/MixedRealityToolkit/_Core/Devices/MixedReality/WindowsMixedRealityController.cs#L136), causing input on HoloLens to be broken.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/45240216-ace2ff00-b29c-11e8-9165-d7f9265acebd.png)\r\n"""
357872382,2718,b'Added Mixed Reality Component Configuration Profile',b'Overview\r\n---\r\nRefactored our hard coded add-on manager registrations into a nice component profile.\r\n\r\nThis also gives developers the ability to register their own custom managers and systems without hard coding them into the MixedRealityManager.\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/45237466-a2703780-b293-11e8-9058-23067dad016c.png)\r\n\r\nChanges\r\n---\r\n- Fixes: #2714 \r\n'
357841435,2715,b'Shader demo texture file size reduction',"b""Reduced file sizes of textures in the StandardShader examples from **76.5mb down to 4.5mb** with little perceptual difference. All assets should be visible from the MaterialGallery scene.\r\n\r\nSwitched a couple of .tga files to .png, reduced dimensions from 2048 down to smaller sizes where appropriate, and used web image compression tools to get better filesizes from the pngs. There is loss of detail, but there's still plenty enough for this context, and I'll be surprised if you can spot it! Materials are all hooked up to new textures appropriately.\r\n\r\nThis significantly reduces the project's overall filesize, and should make development experience nicer in certain contexts!"""
357718817,2713,b'Generic Gesture Profile and Handlers',b'Overview\r\n---\r\nGesture Mapping Profiles for defining gestures and their actions to raise in the input system.\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/45169390-631dea00-b1b2-11e8-95c3-a0144c110a40.png)\r\n\r\nChanges\r\n---\r\n- Fixes: #2708 '
357434226,2710,b'Fixed Cursors',"b'Overview\r\n---\r\n- Updated Teleport Cursor to properly be on ignore raycast layer.\r\n- Fixed DefaultCursor being ""Pointy"" by making sure the prefab is setup exactly like HTK\r\n    - Reset import scale\r\n    - Fixed state setting in animation controller'"
357412328,2709,b'Merge development -> spatial awareness',b'Bring latest changes from mrtk_development to mrtk_development_spatialawareness\r\n'
357383319,2707,b'New AutoStartBehavior enum for features',"b'Overview\r\n---\r\nNew AutoStartBehavior enum for features\r\n\r\nChanges\r\n---\r\n- Adds new ""AutoStartBehavior"" enum to the Core Utilities for adoption by features.\r\n'"
357044344,2705,b'Windows Mixed Reality Gesture Support',b'Overview\r\n---\r\n- Added Windows Mixed Reality Gesture Support.\r\n- Added windows gesture settings to gesture profile.\r\n![image](https://user-images.githubusercontent.com/13334553/45326853-ef5d4380-b509-11e8-9774-7e433a79501d.png)\r\n\r\nChanges\r\n---\r\n- Fixes: #2630 '
357043856,2704,b'Added Mixed Reality Pose to string override',b'Overview\r\n---\r\nSo you can pretty print it in the console\r\n'
356823553,2701,b'GazeProvider Start() visibility to protected for derived providers',b'Overview\r\n---\r\nBroadened visibility for Start() to allow derived providers to add e.g. a GazeFuse to the DefaultCursor after init.\r\n'
356639748,2698,b'vNEXT: Spatial Mouse Input',b'Overview\r\n---\r\n- Adds Spatial Mouse Input\r\n- Added Setter to `ControllerPoseSynchronizer.Handedness`'
356604432,2695,b'Focus Provider Registration Fix',b'Overview\r\n---\r\nFixed an issue where Focus Provider was not registering pointers for input sources that were already detected by the time our Focus Provider is started.\r\n'
356578996,2694,b'Standards updates for Boundary manager',"b""Overview\r\n---\r\nMoved the Boundary Manager to it's root folder to match other features\r\nRenamed the MixedRealityBoundarySystem to MixedRealityBoundaryManager as per standards\r\n\r\n"""
356319655,2693,b'Added button to get back to main config profile',b'Overview\r\n---\r\nAdded a button to get back to the main config profile\r\n\r\nChanges\r\n---\r\n- Fixes: #2692 \r\n'
356294171,2691,b'vNEXT: Speech and Dictation Input Source Refactor to Device Manager',"b'Overview\r\n---\r\nRefactored Speech and Dictation implementation as per #2680 \r\n\r\nPut up for initial review.\r\n\r\nChanges\r\n---\r\n- Removed old Generic Input sources for Speech and Dictation\r\n- Adds new Speech handling device manager\r\n- Adds extensible profile support for multiple Speech recognition systems\r\n- Adds extensible profile support for multiple Dictation recognition systems\r\n- Win Standalone, Win Editor, & UWP platform support for now in default controller implementations.\r\n- Adds the capability for external speech / dictation providers via Azure later through extensions. (drop down select based on `IMixedRealitySpeechController` and `IMixedRealityDictationController` interfaces'"
356286820,2690,b'Renamed Unity Device Manager',"b""Overview\r\n---\r\nRenamed the Unity Input Device classes because they were not explicit enough.  The UnityDeviceManager didn't actually manage _all_ unity input manager devices, only joysticks and the name should reflect that.\r\n\r\n- renamed UnityDeviceManager to UnityJoystickManager\r\n- renamed GenericUnityController to GenericJoystickController"""
356239014,2689,b'Themed Icons',b'Overview\r\n---\r\n- Updates icons to match the current editor theme\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/44950624-1bd5d900-ae01-11e8-9aa2-8468e26dbaf4.png)\r\n![image](https://user-images.githubusercontent.com/13334553/44950626-24c6aa80-ae01-11e8-81f9-5c63ab5f27da.png)\r\n'
356231382,2688,b'Introduced Input System Profile',b'Overview\r\n---\r\n\r\n- Refactored Config Profile and moved all Input System options into a new Input System Profile to cleanup the main config profile\r\n- Unhide fields even when features are turned off.'
356217322,2687,b'Refactored Touch Screen Input Source to Device Manager',b'Overview\r\n---\r\n- Refactors the Touch Screen input source to a device manager.\r\n- Added Touch Screen Input Device Manager to Mixed Reality Manager.\r\n- Added generic vector2 events for OnGesutureUpdated.\r\n- Fixed an issue with OnGestureCompleted not being raised properly.\r\n- Added Input Source Position Updated with current touch position.\r\n- Added ability to add missing controller types in the Controller Config Profile.\r\n- Improved cursor visibility logic.\r\n\r\nChanges\r\n---\r\n- Related to #2680 '
355739823,2679,b'Updated Touch Screen Input Source',b'Overview\r\n---\r\nAdded check for touch support before running.'
355732336,2678,b'Removed unneeded platform specific compiler definitions.',b'Overview\r\n---\r\nThe compiler definitions for speech are no longer needed.'
355728077,2677,b'Updated Source State Events to be more generic',b'Overview\r\n---\r\nUpdated the Source State Events to be more generic like the Input Source Events'
355697114,2676,b'draft spatial awareness system architecture',"b'Overview\r\n---\r\nDescribe the architecture for a cross platform spatial awareness system. Detail interface property and method data types and parameters (to be mirrored in source doc comment tags), include class diagram and basic data flow images.\r\n\r\nNOTE: Sorry for previous churn on this one...\r\n\r\nChanges\r\n---\r\n- Fixes: #2508  .\r\n'"
355683910,2675,b'draft spatial awareness system architecture',b'Overview\r\n---\r\nAdd architectural documentation for the spatial awareness system. Includes basic data flow and class / interface diagrams.\r\n\r\nInterfaces are documented with the data type and purpose of each property and method. This information will also be included in the source files.\r\n\r\nChanges\r\n---\r\n- Fixes #2508  .\r\n\r\n'
355682394,2674,b'draft spatial awareness system architecture',b'Overview\r\n---\r\nAdd architectural documentation for the spatial awareness system. Includes basic data flow and class / interface diagrams.\r\n\r\nInterfaces are documented with the data type and purpose of each property and method. This information will also be included in the source files.\r\n\r\nChanges\r\n---\r\n- Fixes #2508  .\r\n'
355657986,2673,b'Fixed oculus remote texture settings',b'Updated image to be a sprite and updated settings.'
355379565,2670,b'Fix pointer line visibility when switching the active controller',"b""Overview\r\n---\r\nWhen one controller is using the glTF controller model and the other isn't, the pointing ray doesn't properly disable itself when it doesn't find anything to attach to. This is because we update the handedness, then in the refresh code check to make sure the handedness is the same as the currently tracked controller before sending the controller lost event.\r\n\r\nThis change forces the previous controller to be lost, regardless of the current handedness.\r\n\r\nChanges\r\n---\r\n- Fixes: #2669\r\n"""
355365281,2667,b'Controller Profile Inspector: Warning when model is missing pose synchonizer',"b""Updated controller model inspector to display a dialog when the model is missing a pose synchronizer component.\r\n\r\nWe can't add the component automatically bc it's an SDK layer component, and users may have their own implementation they'd like to use.\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/44820386-8e4a7d00-aba5-11e8-997b-77cb99c00c13.png)\r\n\r\nIf the user accepts the dialog the model prefab is selected, so the user can add the component immediately."""
355360937,2666,b'Fix HTK pointer debug rays',"b'Overview\r\n---\r\nPointers were getting their start position from the grip position instead of the pointer position. This was causing the debug ray to not match the pointer visualization, which was correctly aligning itself with the pointer position.\r\n\r\nChanges\r\n---\r\n- Fixes: #2523.\r\n'"
355296776,2664,b'Update htk_development with master ',b'from documentation PRs that have gone into master.'
355293294,2663,b'replace Internal in namepaces with Core',"b'Overview\r\n---\r\nUpdates namespaces to match the MRTK layer name (*.Internal.* -> *.Core.*)\r\n\r\nNOTE: If you receive an error stating that the Mixed Reality Manager cannot find profiles, please delete your library folder and retry.\r\n\r\nChanges\r\n---\r\nUpdated namespaces and explicit class references\r\n\r\n- Fixes: #2539 .\r\n'"
355284412,2662,b'Update master Roadmap',"b'Overview\r\n---\r\nUpdates the roadmap in the master branch, updating the release list and the MRTK vNext plan and branch/release strategy.\r\n\r\nAlso increments the version file, which was slightly lagging behind the actual release.\r\n\r\nChanges\r\n---\r\n- Related to #2659.\r\n'"
355283992,2661,b'Added optional camera persistence to camera profile',b'Overview\r\n---\r\nAdded the option to mark the camera as persistent to help with mutli-scene projects.\r\n\r\nRelated to #2653'
355056631,2660,b'Update ---mrtk-task.md',b'Overview\r\n---\r\nUpdated the New Task template to include some more required elements and refined the language used\r\n\r\nChanges\r\n---\r\n- Updates - vNext Task github template\r\n'
354982653,2658,b'Fixed parenting of cursor',b'Overview\r\n---\r\nCursor was spawned in root node and not in body\r\n\r\nChanges\r\n---\r\nChanged parenting on instantiate as @StephenHodgson showed me.\r\n'
354943965,2657,b'Adding missing meta file from #2654',b'Overview\r\n---\r\n#2654 was missing a meta file.'
354939945,2656,"b'Add multiple GitHub issue templates, to better facilitate MRTK task filing'","b'Overview\r\n---\r\n![image](https://user-images.githubusercontent.com/3580640/44756250-a60afe00-aade-11e8-93d3-d1ac99791e5b.png)\r\n\r\nAdds multiple issue templates for bug reports, feature requests, and MRTK tasks, with specialized templates for each.\r\n\r\nSee https://github.com/keveleigh/HoloToolkit-Unity/issues/new/choose to see how this looks when filing an issue.\r\n\r\nThe default, existing issue template is now the fallback and has been left untouched.\r\n'"
354936021,2655,b'Fixed collection modification in touch screen input source',b''
354934304,2654,b'Added Oculus Controller Icons',b'Overview\r\n---\r\nAdded Oculus Controller Icons with attribution text.\r\n'
354829801,2652,b'Updating HTK gitignore to match MRTK',"b'Overview\r\n---\r\nOtherwise, when switching between the projects, the TextMesh Pro folders show up in the changelist.\r\nThis also brings over support for the VSCode generated folder.'"
354798993,2651,b'Fixed an issue with speech event data on non windows platforms',b''
354794707,2650,b'Added some missing icons to two classes.',b''
354431702,2646,b'Mrtk development -> mr dev summit',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
354425306,2643,b'merge mrtk_development -> mrdevsummit_2018_08',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
354121111,2640,b'Added .vscode to ignore file',b'Overview\r\n---\r\nAdded support for .vscode editors in MRTK vNEXT\r\ncleaned up ignore file a bit.'
354053413,2639,b'Controller Input Action Mapping Popout Menus',b'Overview\r\n---\r\n![image](https://user-images.githubusercontent.com/13334553/44637067-0b86af80-a964-11e8-9d41-1fa88f3f8122.png)\r\n![image](https://user-images.githubusercontent.com/13334553/44623717-fc7ffe80-a88a-11e8-9caa-bd7656f9354c.png)\r\n![image](https://user-images.githubusercontent.com/13334553/44637144-60c2c100-a964-11e8-80f6-9db835c83d89.png)\r\n\r\nNotes:\r\n---\r\n- Had to completely replace the default controller profile to make sure all the values were initialized and synchronized correctly across all device types.\r\n- Had to update interaction mappings to make sure devices of the same type had the same exact interaction layout sans the axis and button mappings.\r\n    - As a consequence I had to change the WMR Controller a bit to support it.\r\n\r\nChanges\r\n---\r\n- Fixes: #2617\r\n- Fixed the axis constraints for Oculus Remote buttons.\r\n- Fixed an issue with constructors not being updated after the X Axis Inversion addition.'
353975560,2638,"b""Updating the HTK's drop of UnityGLTF with the correct coordinate space""",b'Overview\r\n---\r\nThe drop of [UnityGLTF](https://github.com/KhronosGroup/UnityGLTF) we currently have is outdated with regards to the Z forward direction. More information can be found at https://github.com/KhronosGroup/glTF/issues/1043.\r\n\r\nThis PR does a minor update (not to the latest) of UnityGLTF in order to resolve this coordinate space discrepancy.'
353955747,2637,b'Add support for controllers/sources without pointers to use the GazePointer',"b'Overview\r\n---\r\nAdds a new mapping for unhanded WMR controllers, as HoloLens hands come through with an unknown handedness.\r\n\r\nAlso adds `IMixedRealityInputHandler` to the `GazeProvider` in order to properly route input events into pointer events. This enables both HoloLens hands and immersive apps that choose not to use controller-based pointers.\r\n\r\nChanges\r\n---\r\n- Related to #2626 \r\n\r\nFixes:\r\n>Does not trigger input events.\r\n\r\nfor PointerDown/Click/Up.\r\n'"
353414507,2636,b'Corrected assignment of the initial rotation in BoundingBoxGizmoHandle',b'Variable initialRotation is used only in calculations where the rotation coordinate system is local.\r\nSo it needs to be initialized with the local instead of the global rotation.\r\n(The previous code version works only as long as none of the parents of transformToAffect were rotated.)'
353171856,2633,b'Update BaseCursor to properly respond to source events',"b'Overview\r\n---\r\nThe source detected and lost logic assumed that pointers and cursors will only care about events from the same input source that they\'re registered on. That might be the case for most of the controller pointers, but that\'s not the case for the gaze pointer. The hand is a separate input source from the gaze input source.\r\n\r\nThis assumption is made in other places in the MRTK as well and will likely need updating as we investigate HoloLens support. In most cases, it\'s probably more correct to check ""am I registered in this input source\'s list of pointers"" instead of checking ""is my input source the same input source that the event is coming from"".\r\n\r\nAdditionally, `IsHandDetected` was not intended to specifically filter out hands only in the HTK. Its name was from the time before immersive headsets and controller input sources. I\'ve renamed it to reflect this.\r\n\r\nChanges\r\n---\r\n- Related to: #2626\r\n\r\nFixes (mostly):\r\n>Does not show interaction state changes (dot <-> donut)\r\n\r\nThis does not yet address hand taps not coming through to the cursor properly. That logic is currently located in the controller pointer class, while we want the gaze pointer to also handle them.\r\nThis does address the cursor responding to source detected/lost with a hand.\r\n'"
353170645,2632,b'Fix gaze pointer being lost on hand lost',"b'Overview\r\n---\r\nPreviously, the source lost handling checked to see if the lost source was the gaze input source, and special-cased some logic to clear the pointing data.\r\n\r\nWe also need to special case if the gaze pointer was being used by a lost non-gaze input source (in the discovered case, this would be a hand source on HoloLens). In this case, we should not remove the gaze pointer, since the gaze input source still exists and other sources might be using it.\r\n\r\nChanges\r\n---\r\n- Related to: #2626 \r\n\r\nFixes:\r\n>Head tracking stops working when a hand is raised and lost. Cursor does not follow head movement anymore. It follows head movement only when a hand is raised.\r\n'"
352880607,2629,"b""BaseDeviceManager.cs(91,72): error CS0019: Operator '==' cannot be applied to operands of type 'SystemType' and 'Type'""",b'Overview\r\n--- \r\nUWP build was broken due to comparison of different types.\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #2628 Fixed by accessing correct property\r\n'
352757915,2627,b'Update cursor guid in BoundaryVisualization to the new guid',b'Overview\r\n---\r\nThe guid reference to the DefaultCursor prefab in the BoundaryVisualization scene was stale.'
352719208,2625,b'merge roadmap documentation path fix from master into htk_development',b'pick up fix for #2614 '
352717511,2624,b'fix boundary visualization inspector #2616',b'Overview\r\n---\r\nNo longer hiding boundary visualization configuration settings when disabling the default showing of a component (ex: walls).\r\n\r\nAdded profile tooltips to help with user education.\r\n\r\nChanges\r\n---\r\n- Fixes: #2616 .\r\n'
352703533,2623,b'add spatial awareness system architecture documentation',"b'Overview\r\n---\r\nDocument the planned architecture for spatial awareness, including interfaces, concrete classes, types, enums, profile settings, etc.\r\n\r\n'"
352356840,2620,b'Add InvertXAxis ',b'## Overview\r\n- Added `InvertXAxis` property\r\n\r\n\r\nHelps with #2610 \r\n'
352318599,2619,b'Fixed teleporting when no hit is found.',b'Overview\r\n---\r\nUpdated valid calculation up direction\r\nUpdated distance calculation used when rendering line.\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #2591\r\n'
352305460,2618,b'Fixed the folder name for the Invisible Shader',"b'Overview\r\n---\r\nCurrently, the Standard shader and the Invisible shader appear in different folders in the shader query tree.\r\nThis fixes this so that both MRTK shaders now appear in the same folder, matching what the Standard shader was using\r\n\r\nChanges\r\n---\r\n- Fixes: Folder names for shaders\r\n'"
352230541,2614,b'Update Roadmap.md',"b'Overview\r\n---\r\nChanged the path to the vNext docs, since the branch was renamed :D\r\n\r\nChanges\r\n---\r\n- Fixes: All the things\r\n'"
352052996,2612,b'Fix for #2438 . Force components to initialize in the right order',"b""Overview\r\n---\r\nAs a fix to #2438 we have now forced SpectatorView's `isHost` field to initialize on the `Awake`. That will allow `SpectatorViewNetworkManager` to make use of that field without risking getting into script execution order issues. \r\n\r\n\r\n\r\n@davidkline-ms I have created this PR against `Master` because I wasn't sure which branch should I create it of. Could you please redirect the PR or let me know what you would like me to do? \r\n\r\nChanges\r\n---\r\n- Fixes: #2438\r\n\r\n- Some exception handling has been added on `OnPhotoModeStarted`. There were some instances when if the iPhone stopped broadcasting while the HoloLens was still taking pictures, it would throw an exception.\r\n- We're now manually disposing of the pictures taken to avoid the GC kicking in more often\r\n- `NewDeviceDiscovery` initialization moved to the `Start` to make sure that `SpectatorView` has been initialized by then \r\n"""
351927995,2611,b'Updated Input Action Header.',b'Overview\r\n---\r\nRemoved some unused code that was causing the header to be out of place\r\n\r\nWas:\r\n![image](https://user-images.githubusercontent.com/13334553/44312374-b3700c00-a3ab-11e8-96eb-469a201eb937.png)\r\n\r\nNow:\r\n![image](https://user-images.githubusercontent.com/13334553/44312359-95a2a700-a3ab-11e8-8d00-dabee0c77ecc.png)\r\n'
351736388,2609,b'Fixed some null refs when no input action profile exists',b'Overview\r\n---\r\n\r\n- Speech input source would throw a null ref if created out of order and no input system nor input action profile existed. Added error dialog and safe returns.\r\n- Fixed an issue making a new profile via add button in main config.\r\n'
351685119,2606,b'MRTK SDK UX - ObjectCollection',"b'Overview:\r\nPorting ObjectCollection to the vNext branch. Allow users to easily arrange items in a grid in various volumes (planes, spheres, cylinders).\r\n\r\n\r\nChanges:\r\nAbstracted original ObjectCollection to a BaseCollection class. This makes for a good pattern to extend from in the future. Additionally, the custom editor script is now inherited by all children.\r\n\r\n\r\nTo use BaseCollection:\r\nInherit BaseCollection and override the abstract method LayoutChildren(). Easy as that.\r\n'"
351676424,2605,b'added oculus remote',b'Overview\r\n---\r\nAdded Oculus Remote\r\n'
351663918,2604,b'Input Action Property Drawer Fix',b'Overview\r\n---\r\nFixed an issue where the property drawer actions would get out of sync when input action profile is changed.\r\n'
351635047,2603,b'updated missing icon',b'## Before\r\n![iconbefore](https://user-images.githubusercontent.com/9560490/44273990-a665e800-a206-11e8-8544-4e86dd070219.png)\r\n\r\n## After\r\n![iconafter](https://user-images.githubusercontent.com/9560490/44273996-ab2a9c00-a206-11e8-9421-5b7f3b2bcf42.png)\r\n'
351613334,2602,b'Initialized some vars to remove build warnings',b'\r\n'
351372406,2601,b'Improve how menu item order is specified',"b'Overview\r\n---\r\nIt is hard to know what value you should use when adding a new menu item and reordering a menu requires modifying multiple files.\r\n\r\nTo add a new menu item:\r\n- Add an entry in the ProfileMenuItemIndices enum\r\n- Cast the enum value to an in in the CreateAssetMenu attribute (order property)\r\n\r\nTo reorder the menu:\r\n- Change the value(s) in the ProfileMenuItemIndices enum\r\n\r\nChanges\r\n---\r\n- [x] Add an enum to the Internal.Definitions.Utilities namespace that specifies the menu item index for our Assets > Create > Mixed Reality Toolkit menu.\r\n- [x] Update the MixedReality*Profile classes to use the appropriate enum value vs a hard-coded ""magic"" number.\r\n'"
351279286,2600,b'Profile inspector namespace cleanup.',b'Overview\r\n---\r\nUpdated profile inspectors to live in the proper namespace that corresponds to their folder location.'
351181339,2599,b'Update BoundingBox.cs',"b'There is a bug in the calculation of the size for the BoundingBox/BoundingBoxRig to be shown around a GameObject target.\r\nTo fix it, I removed a code line in method RefreshTargetBounds() that performed a scale transformation which may be correct in some special, simple cases. But in general, if the target object, its parent and the bounding box had different scales, the transformation would be incorrect.\r\nThe replacement for the removed line, a scale transformation that works in any case, is implemented in method UpdateScaleTransform(), where it is needed and so that the variable name targetBoundsLocalScale does not have to be changed to remain appropriate.\r\n'"
351028723,2597,b'Updated SystemType',b'Overview\r\n---\r\n- Allowed setting `Type` to null as it should be a valid operation.\r\n- Added string is null or empty check to `AssemblyQualifiedName`.'
351005904,2596,b'Spatial Awareness System Scaffolding',b'Overview\r\n---\r\nDefines the properties and profile for the spatial awareness system in vNext. This PR covers JUST the scaffolding of the spatial awareness system. It does not provide a full implementation. That will come in a future PR (to keep them smaller and more manageable)\r\n\r\nChanges\r\n---\r\n- [x] Define the IMixedRealitySpatialAwarenessSystem interface\r\n- [ ] Define the spatial awareness system events\r\n- [ ] Implement default spatial awareness system\r\n- [x] Implement the spatial awareness system profile\r\n- [x] Implement the profile inspector\r\n- [x] Update the MixedRealityManager to add spatial awareness support\r\n\r\nTasks\r\n---\r\n- #2508 \r\n- #2386 '
351005580,2595,b'Config Profile SystemType null check.',"b""Overview\r\n---\r\nMade sure we're checking if the `SystemType` is not null before attempting to check if that `SystemType`'s resolved Type was not null.\r\n\r\nThis was causing our unit tests to fail.\r\n\r\nUnit Tests now pass with flying colors.\r\n"""
350999625,2594,b'Ensured Generic Input Sources were implemented',"b""Overview\r\n---\r\nMade sure input that doesn't come from controllers are implemented.\r\n\r\n- Updated generic input sources to be disposable, and updated the MRTK's input manager to create them and dispose of them when needed.\r\n- Added a Input Source Option Profile for setting input actions for generic input sources.\r\n- Updated the profile inspectors namespace to match the folder they live in.\r\n- Added Gesture Input Source.\r\n\r\nChanges\r\n---\r\n- Fixes: #2593 \r\n"""
350553327,2590,b'adding example scene 3 -- for VR',"b'Overview\r\n---\r\nI\'ve added a scene called **""Playground""**\r\n \r\n![mr_playground-scene_01](https://user-images.githubusercontent.com/35704839/44110447-8f7b5930-9fb4-11e8-91b5-8c7662c8bf95.png)\r\n![mr_playground-scene_02](https://user-images.githubusercontent.com/35704839/44110461-9ce959fa-9fb4-11e8-8ed1-e594a54e11a8.png)\r\n\r\n**Features**\r\n- Multiple customize-able surfaces to use for testing interactions -- with collisions for physics objects.\r\n- Cloth simulation banners -- Needs 2 sided shader\r\n- Light, fast, and human scale -- it runs under 10ms on Ultra quality settings. \r\n- Everything in the scene is named to be human readable and very clear to new users.\r\n- Minimal textures. \r\n\r\n![mr_playground-hierachy_01](https://user-images.githubusercontent.com/35704839/44110704-446a8622-9fb5-11e8-8b2c-2d02e428a1b7.png)\r\n\r\n**Experiments**\r\n- I added in a ""ghost"" shadow, to help anchor the VR user in the world. --needs improvement--\r\n- The **Target** models are built to allow each ring to disappear when struck. -- needs some programmer help.\r\n- The sun can be moved and the lighting in the space will update in real-time if needed.\r\n- There are physics balls in the scene (disables) that I used to test collisions. They can be turned on to view physics in action in the scene.\r\n\r\nChanges\r\n---\r\n\r\n1. Since we are using the **Standard Shader**, I switched the lighting in **Player Settings** from **Gamma** --> **Linear** -- (Linear lighting is required by the Standard Shader for PBR to work.)\r\n![mr_playground-playersettings_01](https://user-images.githubusercontent.com/35704839/44111211-af966244-9fb6-11e8-8ca0-a4abcdcd836c.png)\r\n\r\n2. I changed the Quality settings from **Very Low** --> **Ultra**, for better lighting, and MSAA support in VR.\r\n![mr_playground-qualitysettings_01](https://user-images.githubusercontent.com/35704839/44111220-b72c1404-9fb6-11e8-84d2-e273f59c86a8.png)'"
350497554,2589,b'Moved base manager from definitions to managers namespace and folder.',b'Overview\r\n---\r\nOnly structs and enums should be in the definitions folder.'
349834312,2586,b'Updated Line Gallery Scene',b'Overview\r\n---\r\n- Updated position of objects in the scene to be like the other scenes.'
349827432,2584,b'Focus Provider Update w/Pointer Fixes',"b""Overview\r\n---\r\n- Removed duplicate faulty logic when getting focused object via event data.\r\n- Removed duplicate calls to register pointers. (they were already being registered by the input source's on detected event)\r\n- Refactored a bit to make the pattern of getting pointer data the same, by passing a pointer, and getting data out.  This makes getting the focused object safer, by first attempting to get the pointer data, if any exists.\r\n- Removed virtual member call in gaze pointer constructor."""
349690037,2583,b'Boundary system updates and fixes',"b'Overview\r\n---\r\nBoundary system updates and fixes\r\n\r\nChanges\r\n---\r\n- [x] Replace quad with a cube for floor\r\n- [x] Specify floor dimensions using a Vector2 instead of a Vector3\r\n- [x] Add default render options for boundary components (ex: floor, play area) to the profile\r\n- [x] Implement display of tracked area\r\n- [x] Implement display of boundary walls\r\n- [x] Implement display of boundary ceiling (at BoundaryHeight above floor)\r\n- [x] Make boundary visualizations (*except the floor*) follow user when teleporting\r\n    - [x] Play Area\r\n    - [x] Tracked Area\r\n    - [x] Walls\r\n    - [x] Ceiling\r\n- [x] Update Boundary Visualization Demo\r\n   - [x] Teleport markers with user\r\n   - [x] Add toggles for tracked area, walls and ceiling\r\n\r\n\r\nTasks\r\n---\r\n- Fixes: #2544 \r\n- Fixes: #2552 \r\n- Fixes: #2554 \r\n- Fixes: #2565 \r\n \r\n \r\n'"
349667657,2582,"b'Re-add OverrideFocusObject, which can be valid even if pointer is null (onto Stephen PR)'",b''
349666514,2581,"b""Fix bug in focus (PR onto Stephen's PR)""",b''
349635724,2580,b'Focus Provider Update',"b""Overview\r\n---\r\n- Removed duplicate faulty logic when getting focused object via event data.\r\n- Removed duplicate calls to register pointers. (they were already being registered by the input source's on detected event)\r\n- Refactored a bit to make the pattern of getting pointer data the same, by passing a pointer, and getting data out.  This makes getting the focused object safer, by first attempting to get the pointer data, if any exists."""
349582228,2579,b'Teleport Pointer Updates',"b'Overview\r\n---\r\nAdded rotate and strafe actions to teleport pointer.\r\n\r\nChanges\r\n---\r\n- Fixes: #2561 \r\n\r\nTODO\r\n---\r\n- [x] Strafe backwards in the direction the camera is facing.\r\n\r\nKnown Issue\r\n---\r\n- [x] ~~After teleporting, if you strafe back then the Y position gets corrupted.~~'"
348930831,2576,b'Fix mismapped OpenVR trigger axis',b'Left and right triggers were defined as the same axis.'
348855740,2575,b'MRTK vNext v2018.7 release branch refresh',"b'Overview\r\n---\r\nThis checkin merges the work performed in mrtk_development into mrtk_release as the 2018.7.0.0 refresh.\r\n\r\nKnown Issues\r\n---\r\n- When teleporting, the play area visualization does not move with the user\r\n- Some controller options do not work correctly on OpenVR\r\n- Actual controller models/GLTF support is not currently provided'"
348558713,2574,b'Quick (probably incomplete) spellcheck pass pre-alpha',b'Overview\r\n---\r\nQuick (probably incomplete) spellcheck pass pre-alpha'
348558123,2573,b'Fix pointer line material not being included in the build',"b""Overview\r\n---\r\nUnity doesn't include shaders that aren't used in materials either referenced in a scene or in a Resources folder. This PR creates a material for the pointer lines with the same settings as the code was doing, instead of trying to create one at runtime and failing when not in the Editor.\r\n"""
348557617,2572,b'Fixed bug in BaseFocusHandler where wrong comparison was made',"b'Overview\r\n---\r\nThe script was checking the new/old focused gameobject against itself instead of against its gameobject. Therefore, this comparison was always false.'"
348538879,2571,b'Cleaned up event system if teleport system creates one.',"b""Overview\r\n---\r\nFixes an issue where the teleport system doesn't properly clean up after itself.\r\n"""
348517962,2570,b'Regenerated all project GUIDs',b'Overview\r\n---\r\nRegenerated all project guids while keeping all references. \r\n\r\nChanges\r\n---\r\n- Fixes: #2546 \r\n'
348515430,2569,b'added transparent materials for all existing colors',b'Overview\r\n---\r\nAdded transparent versions of all existing material colors. \r\nUpdated example scene to include transparent colors.\r\n\r\nChanges\r\n---\r\n- Fixes: https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2558\r\n'
348491874,2568,b'Added Generic Unity Input Devices & Refactored OVR Support',"b""Overview\r\n---\r\n- Refactored OVR Device Manager to inherit from a Generic Unity Device Manager\r\n- Refactored Generic OVR Controller to inherit from new Generic Unity Controller\r\n- Updated axis utility to properly check if axes are set when MR Manager is initialized in editor if input system is enabled.\r\n- Updated Controller Mapping Profile Inspector\r\n    - Added ability to reset the controller's mappings if generic controller is used.\r\n    - Added invert toggle for dual axis mappings.\r\n    - Added null check for valid action profile.\r\n- Added Windows Mixed Reality Open VR Controller Type\r\n- Added Xbox Controller Type\r\n- Added Oculus Remote mappings\r\n\r\nChanges\r\n---\r\n- Fixes: #2563\r\n- Fixes: #2562\r\n- Fixes: #2549\r\n- Fixes: #2548\r\n- Fixes: #2474\r\n- Fixes: #2577\r\n- Fixes: #2335\r\n\r\nTodo\r\n---\r\n- [x] Fixed: #2489 Controllers initialize with Controller profiles disabled\r\n- [x] Filter input actions by axis constraints\r\n- [x] Test dual axis vertical inputs are all normalized\r\n    - Up is positive, down is negative"""
348481309,2567,b'regenerate meta files',b'Overview\r\n---\r\nDelete and re-create all .meta files in the mrtk_development branch\r\n\r\nChanges\r\n---\r\n- Fixes: #2546 .\r\n'
348451030,2566,b'Re-add default cursor to BoundaryVisualization scene',b'Overview\r\n---\r\nThis was done in a previous PR but has since been overwritten.'
348116195,2560,b'Input System Body Check.',b'Overview\r\n---\r\nadds a body to the camera if none exists.\r\n\r\nfixes issue with pointer null refs '
348111163,2559,b'Refactored Controller Viz',"b""Overview\r\n---\r\nController viz wasn't working in all scenes by default, without any additional setup.  This fixes that issue.\r\n\r\n- Added new interface `IMixedRealityControllerPoseSynchronizer` and did a bit of refactoring for the controller pointers, as they will inherit from a class that specifically specializes in syncing controller pose data.\r\n- Refactored `MixedRealityControllerVisualizer ` to inherit from `ControllerPoseSynchronizer`.\r\n    - Base Controller class is now responsible for creating any needed controller models when it starts up based on the config profile, similar to how pointers initialize."""
348079161,2556,b'Renamed InteractibleHighlight to match the class name',"b'Overview\r\n---\r\nAs it was, this script was unusable and Unity got confused when trying to add it to the scene.\r\n'"
348067451,2555,b'fix the default floor plane being too small',"b'Overview\r\n---\r\nBased on verbal feedback and additional testing, it was apparent that the default floor size in the boundary profile was too small, as were the default values in the class.\r\n\r\nChanges\r\n---\r\nChanged default floor plane to be 10x10m\r\n'"
348041701,2553,b'Create Body prefab and add to all demo scenes',b'Overview\r\n---\r\nAll of the scenes had the same hierarchy of Body/Head for the camera. This now refactors that out into a prefab and adds the controller visualizer script to the prefab (and thus all scenes).\r\n'
347736778,2550,b'Simplified type creation',b'- Create `GenericOpenVRController` based on type'
347452018,2545,b'vNEXT Teleportation Feature Port',"b'Overview\r\n---\r\nFeature port of teleportation in the MRTK.\r\n\r\nTeleportation builds off of Controller Pointers and is configured and utilized in the exact same way.\r\n\r\nCurrently only supports instantaneous teleportation, but support for teleportation over time will come in beta.\r\n\r\nTODO\r\n---\r\n- [x] Test on WMR Platform\r\n- [x] All the events for teleportation are setup but the handlers need to be completed.\r\n\r\nOther Changes\r\n---\r\n- Fixed an issue with incorrectly transforming the controller position\r\n- Fixed an issue with pointer profile not rendering correctly when no MR Manager instance is found.'"
347146238,2542,"b'add boundary sdk, move system from core, update example'","b'Overview\r\n---\r\n- Create the boundary sdk feature\r\n    - Adds the play area visualization script from #2538.\r\n- Move the boundary system implementation from Core -> SDK\\Features\\Boundary\\System (per #2540)\r\n- Update the Boundary demo scene\r\n    - Use the play area visualization script\r\n    - Cleanup the sphere based boundary visualization script (remove rendering the quad)\r\n    - Update the info panel to\r\n        - list WMR immersive and OpenVR under ""works on""\r\n        - add scripts used and a description of the purpose of each'"
347103998,2538,b'Example scene 1 updates',"b'Overview\r\n---\r\n- Added floor plane and play area rendering.\r\n- Added background (non-spatialized) audio.\r\n- Deleted audio files (bell and chime) that are not being used and, honestly, needed improvement.\r\n- Added Boundary SDK feature folder with play area visualization script.\r\n    - Updated the Boundary demo to use this script as well as the ""show spheres that are in specific areas"" script\r\n\r\nThis addresses some issues documented in #2514, which will also be updated with current todo items.\r\n'"
346722563,2535,b'Update htk_development with the latest master code',b'Update htk_development with the latest master code\r\n'
346722238,2534,b'Update htk_development with the latest master code',b'Update htk_development with the latest master code'
346701450,2533,b'vNEXT Basic Controller Pointers.',"b""## Feature port of Controller Pointers\r\n\r\nAdded the ability to easily setup pointers via Pointer Profile:\r\n![image](https://user-images.githubusercontent.com/13334553/43538572-4715df0e-9577-11e8-9532-1c693a104dad.png)\r\n\r\n## Pointer profile:\r\n- Assigning a pointer to a specific controller using the controller type.\r\n    - If no controller type is assigned, then the pointer is assigned to every controller that supports spatial pointers.\r\n- Assigning a pointer to specific hands\r\n    - Left & Right for assigning unique pointers per hand\r\n    - Both for assigning a pointer to both hands\r\n        - **Doesn't support** controllers that have no specific handedness\r\n    - Any for assigning a pointer to both hands\r\n        - **Supports** controllers that support spatial pointers but don't have a specific handedness (i.e. HoloLens hands & clicker)\r\n\r\n## How to create a new pointer:\r\n1. create an empty game object in the scene view and name it\r\n2. add a `SimpleLineDataProvider` to the new game object\r\n3. add a` MixedRealityLineRenderer` to the game object\r\n4. add a `LinePointer` to the game object.\r\n5. customize all the components to your hearts desire\r\n6. drag the game object into the project window to make it a prefab\r\n7. delete the pointer from your scene\r\n8. select or create a pointer profile\r\n9. add a new pointer item in the pointer profile\r\n10. drag your new pointer prefab into the game object field\r\n11. select the controller type you want to use the prefab for\r\n    - Keeping the type `None` will assign it to every controller type\r\n12. choose the handedness of the pointer\r\n13. save and play in editor\r\n\r\nTODO\r\n---\r\n- [x] Add option for selecting controller pointer vs grip attachment.\r\n- [x] Write up steps for pointer prefab creation\r\n\r\nAdditional Changes\r\n---\r\n- updated default cursor and cursor scripts\r\n- updated input action property drawer to properly assign the axis constraint and description\r\n- FIxed #2541\r\n- Updated Mixed Reality Manager to disable and destroy all managers when application wants to quit."""
346408582,2530,b'2017.4.1 Stabilization and Merge PR',b'Created to bring eyes on our stabilization efforts to release 2017.4.1.'
346215943,2525,b'OnButtonClicked event is called twice on every tap',"b""OnButtonClicked is called twice since DoButtonPressed is called OnInputDown and OnInputClicked. Splitting out Clicked into it's own DoButtonClicked function prevents this from happening.\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #2524  .\r\n"""
345924380,2522,b'Minor keyboard fixes',"b'Overview\r\n---\r\nInstead of trying to case a negative int and failing on XAML, now we cast a large, still invalid, number.\r\n\r\nAlso, disables the Toolkit keyboard on platforms that support a system keyboard.\r\n\r\nChanges\r\n---\r\n- Fixes: #2384 \r\n'"
345865475,2521,b'vNext Asset Clean-up',"b'Overview\r\n---\r\nReverted some GUIDs to their value in master to ease porting.\r\n\r\nRefactored out a SceneDescriptionPanel prefab for ease of updating theme across all example scenes.\r\n\r\nTurned off the standalone resolution dialog.\r\n\r\nUpdated an incorrectly copied comment in MixedRealityConfigurationProfile.\r\n\r\nUpdated the MRTK Logo and added an additional light variant, to add support for both the Unity Pro theme and the Unity Personal theme.'"
345811373,2519,b'A bit of cleanup to Managers',"b""Overview\r\n---\r\n- Fixed an issue with assembly reloading not disabling/destroying managers properly.\r\n- Fixed issues starting/stopping playing in the editor and the MR Manager state would get corrupted.\r\n- Updated the Mixed Reality Manager's `Enable<Feature>` to be `Is<Feature>Enabed`\r\n    - Double checked to also make sure these bools check if the profile is not null.\r\n- Updated Handedness flags because `Both` and `Any` were the same flag value of 3.  `Any` now properly includes `Other`.\r\n- Sorted the order of the configuration profiles in the creation context menu.\r\n- Removed unnecessary ping object in input system initialization.\r\n- Fixed an issue with the Input Action property drawer.\r\n- Updated Boundary Manager to properly initialize values in it's initialization method instead of the constructor.\r\n- Updated Boundary Viz Demo scene \r\n    - Added default cursor\r\n    - Fixed a null ref when no HMD detected"""
345769204,2518,b'Ensure base Awake function is called in Cursor.cs',"b'Update Cursor.cs so that awake function is public virtual\r\nUpdate InteractiveMeshCursor.cs to call base.Awake otherwise base Cursor.cs awake function gets hidden and never gets called.\r\n\r\nBase awake function has originalDefaultCursorDistance = DefaultCursorDistance; and since that never gets called, originalDefaultCursorDistance stays 0 and eventually DefaultCursorDistance becomes 0 as well causing an Error and the cursor to always be at position 0,0,0 when not gazing at anything.'"
345697118,2516,b'Initial check-in of example scene 2',"b'Overview\r\n---\r\nSecond example scene, aiming to provide a more real world implementation\r\nAims to demonstrate more advanced interactions through vNext operation such as:\r\n\r\n* Grabbing\r\n* Resizing\r\n* Chained interactions\r\n* tbc\r\n\r\n![image](https://user-images.githubusercontent.com/1793042/43391749-6cc0e8be-93e9-11e8-98d2-c0422cee122b.png)\r\n\r\n\r\nAim is to ensure it is a professional looking scene that is engaging as well as educational\r\n\r\nChanges\r\n---\r\n- Added room scene\r\n- Added content from the Build Insiders event\r\n- Resized down textures to minimize the physical size of the scene\r\n- Updated all content to use the Standard shader\r\n\r\nTODO\r\n---\r\n- [ ] Styling on Scene - help please\r\n- [ ] Lighting / shader effects in scene, including audio effects\r\n- Tutorial script / audio (pushed to Beta)\r\n- [ ] Tutorial / example documentation, walking through creation and use of the scene\r\n- [ ] Input config\r\n\r\nReplaces PR #2511 with a branch against main development'"
345540505,2514,b'Creation of the first example scene',"b'Overview\r\n---\r\nBasic first example scene, aiming to mimic the WMR startup experience and Start-up view\r\nAims to demonstrate the primitive basics of vNext operation such as:\r\n\r\n* Look\r\n* Pointers\r\n* Basic interaction (still missing interaction scripts)\r\n* Teleporting\r\n\r\n> This scene should use **NO additional scripts** where possible. It\'s aim is to demonstrate the ""out of the box"" experience the SDK provides.  New profiles (input actions / controller config) are ok, to show the full extent of what is needed to build a project.\r\n\r\n![image](https://user-images.githubusercontent.com/1793042/43360598-14ac8e9c-92b0-11e8-8c4e-e2d1e2878af6.png)\r\n\r\nAim is to ensure it is a professional looking scene that is engaging as well as educational\r\n\r\nChanges\r\n---\r\n- Added scene start\r\n- Added some additional scene assets from HTK\r\n- Also ported the Bounding Box assets as they will be needed later\r\n\r\nTODO\r\n---\r\n- [ ] Styling on Scene - help please\r\n- [ ] Lighting / shader effects in interactables - glow on focus\r\n- [ ] Interact sound on click, effect on click\r\n- [x]  Background audio from scene and scene objects required, similar to WMR experience\r\n- Tutorial script / audio (pushed to Beta)\r\n- [ ] Tutorial / example documentation, walking through creation and use of the scene (example panel?)\r\n- [ ] Input config / profiles\r\n- [ ] Input interactions to Activate / Grab and Drop objects in the scene.\r\n- [x] Visualize floor and play area (inscribed within boundary)\r\n\r\nReplaces PR #2511 with a branch against main development'"
345498683,2513,b'vNEXT - UX Lines feature port',"b""Overview\r\n---\r\nUX Lines feature port (required for pointer ray visualization)\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/43362838-00209c72-92a9-11e8-8fab-73408b4adf04.png)\r\n\r\n\r\nThe Mixed Reality Toolkit's built in lines are split into two components: Data and Renderers.\r\n\r\n## Line Data Providers\r\nLine components that define all the characteristics of that line and all the data associated with it. This does not handle any aspect of rendering a line in the scene, and can be used for paths, interpolation, and more.\r\n\r\n- Simple Line \xe2\x80\x93 a line with two points\r\n- Parabola \xe2\x80\x93  parabolic arc between two points\r\n- Rectangle \xe2\x80\x93 a line that loops back on itself with 4 corners\r\n- Ellipse \xe2\x80\x93 a line that loops back on itself with no corners\r\n- Spline \xe2\x80\x93 a multi-point line with Bezier interpolation\r\n\r\n## Line Renderers\r\nThe components take the line data and render it in the scene.\r\n\r\n- MixedRealityLineRenderer \xe2\x80\x93 implements Unity's built in line renderer component, and applies the line data to it\r\n- ParticleSystemLineRenderer \xe2\x80\x93 attaches a set of particles to the line\r\n- MeshLineRenderer \xe2\x80\x93 creates insances of a mesh along the line\r\n- StripMeshLineRenderer \xe2\x80\x93 draws a strip of polygons along the line\r\n\r\n## Other changes outside of line additions\r\n- updated BodyLock.cs with Orbital changes from #2480 \r\n\r\n# Some things to discuss\r\n- I'm using Text Mesh Pro assets in the example scene, and think they look better way better.  I'd like to see us use the SDF text for all the example scenes.\r\n- Do we want to have the lines in the core?\r\n    - I initially put them there, so when people get the core, they don't have to get the SDK if they want teleportation and pointer lines out of the box.\r\n- Is there anything else that we want to add to the demo scene?\r\n\r\n# Known Issues\r\n- [ ] There's a known issue for the Lines that they don't listen to color/width offsets (#2498)\r\n    - Should we just remove this feature for the Unity Line Renderer components?\r\n- [ ] Strip Mesh, Instanced Mesh, and Particle System Line Renderers do not properly apply colors (#2528)\r\n    - Should we just remove these renderer components?"""
345497945,2512,b'vNEXT - Misc Bug Fixes',b'- Updated some issues with setting world space on canvas and no MR Manager in scene.\r\n- Updated Input System initialization to be a bit smarter.\r\n- Updated usages of `ActiveProfile` null checks  to `HasActiveProfile`\r\n- Updated usages of individual feature profile checks to `Enable<FeatureName>`'
345478215,2511,b'Creation of the first example scene',"b'* Added first example scene\r\n* Ported some standard assets and Materials\r\n* Ported Bounding box assets too as they will be needed later.\r\n\r\nOverview\r\n---\r\nBasic first example scene, aiming to mimic the WMR startup experience and Start-up view\r\nAims to demonstrate the primitive basics of vNext operation such as:\r\n\r\n* Look\r\n* Pointers\r\n* Basic interaction (still missing interaction scripts)\r\n* Teleporting\r\n\r\n![image](https://user-images.githubusercontent.com/1793042/43360598-14ac8e9c-92b0-11e8-8c4e-e2d1e2878af6.png)\r\n\r\nAim is to ensure it is a professional looking scene that is engaging as well as educational\r\n\r\nChanges\r\n---\r\n- Added scene start\r\n- Added some additional scene assets from HTK\r\n- Also ported the Bounding Box assets as they will be needed later\r\n\r\nTODO\r\n---\r\n* Styling on Scene - help please\r\n* Lighting / shader effects in interactables - glow on focus, interact sound on click, effect on click\r\n* Background audio from scene and scene objects required, similar to WMR experience\r\n* Tutorial script / audio\r\n* Tutorial / example documentation, walking through creation and use of the scene\r\n* Input config\r\n'"
345477915,2510,b'Contributing.md updates',"b'Overview\r\n---\r\nUpdate contributing.md to reflect the mrtk_development branch, supported platforms and documentation requirements (including a link to the mixed reality MicrosoftDocs repository.\r\n\r\n- Fixes: #2016 .\r\n'"
345417156,2507,b'Controller visualizer cleanup',b'Changes\r\n---\r\n- Fixes: #2506 \r\n'
345369538,2502,b'Mixed Reality Toolkit Standard Shader New Features',"b'Overview\r\n---\r\nThis is an update to the MRTK/Standard shader and systems. The primary change is the addition of per pixel metallic, smoothness, emissive, and occlusion control via channel maps. For example:\r\n\r\n![channelmap](https://user-images.githubusercontent.com/13305729/43346530-43e88a18-91a6-11e8-8a52-e1c1a60fd8c3.gif)\r\n\r\nBuilt in configurable stencil test support to achieve a wide array of effects. Such as portals:\r\n\r\n![stenciltest](https://user-images.githubusercontent.com/13305729/43346556-621f9bc0-91a6-11e8-90fa-0d4015003248.gif)\r\n\r\nInstanced color support to give thousands of GPU instanced meshes unique material properties (example scene not in this PR):\r\n\r\n![instances](https://user-images.githubusercontent.com/13305729/43346720-243d838e-91a7-11e8-82a3-cbb082052039.gif)\r\n\r\n\r\nFinally, a scene to compare and test the MRTK/Standard shader against the Unity/Standard shader:\r\n\r\n![comparison](https://user-images.githubusercontent.com/13305729/43346748-4640f754-91a7-11e8-927e-60ed4f98e010.gif)\r\n\r\nSingle pass instanced stereo rendering has also been enabled by default and a few minor MRTK/Standard shader bugs have been fixed.\r\n\r\nChanges\r\n---\r\n- Fixes: #2298 \r\n- Fixes: #1769 \r\n'"
345358954,2501,b'fix controller lag on openvr',"b'Overview\r\n---\r\nWhen running on OpenVR (either a Vive or Windows Mixed Reality via the Steam driver), controllers had hitches and lag. Overall performance was fine (frame rate 90fps).\r\n\r\nWhen the controller data was being updated, the new reading was being transformed based on the camera position and then stored as the previous reading. The current reading was being stored untransformed. It appears that when the glitch/lag was occurring, previous and current *may* have been evaluating as equivalent (floating point error).\r\n\r\nChanges\r\n---\r\nChange the OpenVR UpdateControllerData and UpdatePointerData to more closely match the Windows Mixed Reality implementation.\r\n\r\n- Fixes: #2478 .\r\n'"
345311462,2499,b'Rename MathUtils which previously had its class renamed',"b'Overview\r\n---\r\nMathUtils was renamed to MathUtilities, but the file was not renamed.'"
345092383,2497,b'Adding custom cursor modifier support',"b""Overview\r\n---\r\n**Issue in existing cusor system:**\r\nCursor class uses CursorModifier in the following two methods:\r\n- OnActiveModifier(CursorModifier modifier)\r\n- OnPointerSpecificFocusChanged(IPointingSource pointer, GameObject oldFocusedObject, GameObject newFocusedObject)\r\n\r\nbecause of which, if anyone writes their own cursor modifier(implementing ICursorModifier), their cursor modifier code will not be called/executed as OnPointerSpecificFocusChanged will not be able to get the custom cursor modifier component as it is not of the same type as expected by the Cursor class.\r\n\r\nSolution:\r\n- Changed OnActiveModifier(ICursorModifier modifier) signature to use ICursorModifier as the input parameter instead of CursorModifier\r\n- Changed OnPointerSpecificFocusChanged default implementation to use ICursorModifier instead of CursorModifier\r\n\r\nImplication:\r\nAll classes that derive from Cursor abstract class will need to change OnActiveModifier method parameter type\r\n\r\nDiagram images of the existing system and proposed changes to the system are attached.\r\n\r\n**Current Cursor System:**\r\n![cursorsystemdiagram_current](https://user-images.githubusercontent.com/14876006/43302582-0bcb3076-9189-11e8-8866-7b01d27be59f.PNG)\r\n\r\n**Proposed changes to cursor system:**\r\n![cursorsystemdiagram_proposed](https://user-images.githubusercontent.com/14876006/43302585-1196fd3c-9189-11e8-8304-dc6dcb7a3e62.PNG)\r\n\r\nP.S.: Edited the images with MS Paint. Please don't judge. :D\r\nWe were not able to generate the class diagram using VS 2017 Professional. Any help on this will be appreciated.\r\n\r\nChanges\r\n---\r\n- Modified Cursor.cs to use ICursorModifier instead of CursorModifier\r\n- Modified AnimatedCursor.cs\r\n- Added CustomCursorModifierExample scene\r\n- Added CubeCursor prefab\r\n- Added TestCursor.cs\r\n- Added TestCursorModifier.cs"""
345063313,2496,b'Misc Input System cleanup tasks',"b""- removed asserts in global listener registration and just opted for a return if it's already registered.\r\n    - prevents spam in console, since we moved to a new pattern for the global listener assignment.\r\n- cleaned up attach to controller a bit and renamed it to `ControllerPoseSynchronizer`\r\n- updated some old terminology in focus provider.\r\n- moved input handler inspectors into their own folders and namespaces.\r\n- `SourcePoseEventData` pose event also sets the position and rotation, just in case someone wants it."""
345048100,2495,b'Resolves an issue where source detected events were not raised',b'Overview\r\n---\r\nResolves an issue where source detected events were not raised\r\n\r\nChanges\r\n---\r\n- Fixes: SourceDetected event was not being raised when it should have'
344885068,2492,b'Initial Check in for the Controller Visualization functionality',b'Overview\r\n---\r\nAdded basic controller visualization for the Mixed Reality Toolkit Alpha\r\nMore improvements needed in beta for:\r\n* Debug overlay\r\n* Animation support\r\n* Controller model node support\r\n\r\nImplements\r\n---\r\n* Basic controller visualization\r\n* Support for both Global and Specific controller Models\r\n* Offset support for controller rendering\r\n* Documentation'
344863442,2491,b'Initial Check in for the Controller Visualization functionality',b'Overview\r\n---\r\nAdded basic controller visualization for the Mixed Reality Toolkit Alpha\r\nMore improvements needed in beta for:\r\n* Debug overlay\r\n* Animation support\r\n* Controller model node support\r\n\r\nImplements\r\n---\r\n* Basic controller visualization\r\n* Support for both Global and Specific controller Models\r\n* Offset support for controller rendering\r\n* Documentation\r\n\r\n'
344647755,2490,b'pose property drawer',b'![image](https://user-images.githubusercontent.com/13334553/43233715-37301794-902c-11e8-81ce-93976b27689f.png)\r\n'
344471673,2488,b'Documentation Updates',b'Minor grammar changes in some text documents and some comments added to some of the script.\r\n'
344424189,2487,b'Resolved rotation issue in TwoHandManipulatable script',"b'Overview\r\n---\r\nIssue:\r\nIf we change the rotation axis constraint at run time, it does not make any difference in the behaviour.\r\n\r\nFix: Reinitialize the rotate logic with the new rotation axis constraint every time the rotation constraint property is set.\r\n\r\nSample:\r\nI have duplicated the TwoHandManipulationTest scene as TwoHandManipulationTest_Fix scene and have added the following game object into the scene content:\r\n- Model_Bucky_Rotation_Constraints_Test: This has a test script(TestRotationConstraints) attached to it and is intended to depict the solution to the issue.\r\n\r\nChanges\r\n---\r\nChanged TwoHandManipultable.cs\r\nAdded TestRotationConstraints.cs\r\nAdded TwoHandManipulationTest_Fix.unity\r\n\r\n'"
344248598,2484,b'vNext documentation updates',b'Add roadmap for vNext releases through the end of 2018.\r\n'
344201164,2483,b'a bit of build cleanup.',b''
344197808,2482,b'Saving the default ConfigurationProfile axes',"b""Overview\r\n---\r\nLooks like the axes weren't updated/saved properly, resulting in:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/43165160-1abc7bdc-8f48-11e8-93dd-c83f12a8a463.png)\r\n"""
344143296,2481,b'Fix in TryGetBoundaryRectanglePoints after teleport',"b'Overview\r\n---\r\nAfter a teleport, the boundary APIs still return positions around the origin, as though the camera has not moved.\r\n\r\nI previously updated the RectangleParams method, but did not transform the RectanglePoints method. This fixes that.\r\n\r\nChanges\r\n---\r\n- Related to #2403\r\n'"
343785369,2480,b'created an orbital solver as an improved replacement to body lock solver',"b'This pull request creates an orbital solver to replace the body locked solver. The Orbital Solver fixes numerous issues with using the Body Locked solver, rotation issues, bad messaging, non-working features, and more.\n\nDetails are available at this proposal:\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2250'"
343417313,2479,b'Updated the device layer ft. Stephen',b'Overview\r\n---\r\nCompeting PR with #2475\r\n\r\nToo troublesome to try and unravel the conflicts between the two branches.  Just wanted more eyes on this path.\r\n\r\nInput Mappings taken directly from https://docs.unity3d.com/Manual/OpenVRControllers.html\r\n\r\nChanges\r\n---\r\n- Fixes: #2477\r\n'
343343277,2476,b'added missing meta files from last PR',b''
343334657,2475,b'Updated the device layer with a few improvements',"b'Overview\r\n---\r\nUpdated the device layer with a few improvements\r\n\r\nChanges\r\n---\r\n* Added Oculus touch support (tested)\r\n* Added basic controller detection Support (still needs work)\r\n* Added faux touch support to the MR Trigger\r\n* Renamed the Vive controllers to be more aligned with that SDK\r\n* Added better error reporting to the Interactionmapping, when a mapping type is not supported by the controller\r\n'"
343215727,2472,b'Add version files (semver) and propogate license to package roots',b'Overview\r\n---\r\nAdded Version.txt file containing the following: Mixed Reality Toolkit <package subname> <version> to each root level package folder (ex: Assets\\MixedRealityToolkit).\r\n\r\nAdd license.txt from the repository root to the packages roots.\r\n\r\n- Fixes: #1858  .\r\n'
343177280,2471,b'merge changes from june18_dev into htk_development',b'htk_development is the new dev branch for the master branch (soon to be renamed htk_release).\r\n\r\nbring over fixes from june18_dev'
342937587,2469,b'Add boundary inscribed rectangle and visualization demo scene',b'Overview\r\n---\r\nPorted june18_dev inscribed rectangle feature.\r\nAdded demo scene that illustrates the boundary geometry (tracked area) and inscribed rectangle (play area).\r\n\r\nChanges\r\n---\r\n- Replaced OutscribedVolume with GeometryBounds\r\n- Replaced InscribedVolume with InscribedRectanglarBounds\r\n- Added InscribedRectangle class\r\n- Added EdgeUtils class\r\n- Implemented Contains method to determine if a point is within the specified area\r\n- Fixes: #2401  .\r\n'
342861355,2467,"b'Add ""Add the Spatial Mapping Prefab"" to the scene configuration window'",b'Overview\r\n---\r\nAdds an optional setting to the scene configuration window to quickly add the SpatialMapping prefab to the scene.\r\n\r\nChanges\r\n---\r\n- Fixes #2203'
342833883,2466,"b'Add gizmo models/prefabs, rename SDK\\Resources -> SDK\\StandardAssets'","b'Overview\r\n---\r\nAdd fbx model of a coordinate gizmo with; X increasing to the left, Y increasing upward, Z increasing away from the origin.\r\n\r\nAdd prefab for gizmo that scales and replaces the built-in materials with MRTK_Standard materials.\r\n\r\nRename Resources folder to StandardAssets as that is the true purpose and since Unity treats Resources as a special folder (all contents built into projects so that they can be runtime loaded) it is advisable to not use that name and allow developers to control the *true* Resources folder.\r\n\r\n'"
342538934,2462,b'Turn off tangent import for TheModule',"b'Overview\r\n---\r\nThe meshes in the model do not have tangents build in, so there was a warning printout on fresh load. This turns off the attempted load.\r\n\r\nChanges\r\n---\r\n- Fixes: #2070 \r\n'"
342535524,2461,b'CodingGuidelines formatting and adding platform dependent compilation',b'Overview\r\n---\r\nAdds C# code highlighting when viewed on GitHub.\r\nAdds a section on platform dependent compilation.\r\nFormats and cleans up the markdown.\r\n\r\nChanges\r\n---\r\n- Fixes: #2143\r\n'
342525958,2460,b'Removed extra Billboards from SliderSamples scene',b'Overview\r\n---\r\nTwo of the sliders had multiple Billboard scripts.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/42913018-628b0a46-8aa7-11e8-87a6-f7b1e4604d75.png)\r\n'
342522883,2459,b'Fix bug with enableOneHandMovement in TwoHandManipulatable',"b""Overview\r\n---\r\nPreviously, a lost hand would revert to one-handed move even if one-handed move wasn't enabled. Now, it falls back to `None` in that case.\r\n\r\nChanges\r\n---\r\n- Fixes #2021"""
342511769,2458,b'add standard materials and demo scene',b'Overview\r\n---\r\nAdds the MRTK_Standard* materials to the SDK (Resources\\Materials).\r\nAdds a second StandardShader demo scene (StandardMaterials.unity).\r\nAdds PanelBorderRounded material without a hoverlight color override.\r\n\r\n'
342509806,2457,b'Billboard camera tolerance',"b'Overview\r\n---\r\nTwo small changes to help Billboard cope with the lack of, or late setup of, a cached camera instance. \r\n\r\nChanges\r\n---\r\n1. null check in OnEnable\r\n2. per-frame attempt to obtain the main camera transfer within the existing null-transform test'"
342500891,2456,"b""Removed one assert as it fails when it shouldn't and also is no longe\xe2\x80\xa6""","b""This assert was failing in a very specific but a valid case.\r\n\r\nI don't see a reason of it still being here.\r\n\r\nSolves: #2450 """
342483219,2455,b'SDK Asset Organization.',b'- Moved a good amount of things to the SDK and organized cursor assets.\r\n- Fixed BaseFocusHandler to require focus by default.\r\n- Updated documentation.\r\n- Updated basic focus handling.\r\n- Rolled back Editor to 2018.1.8f1\r\n- Refactored usage of getting Input System references into base classes.'
342416445,2454,b'fixed pointer input handler serialization',b'Last PR got merged too fast.'
341665920,2449,b'Some Input System Feature SDK components.',b'Overview\r\n---\r\n- Added input system global listener helper component to SDK.\r\n- Added Pointer Click Handler component to SDK.\r\n- Updated Speech Input Handler SDK component.\r\n- Updated FocusDetails to use properties.\r\n- Updated MixedRealityInputActions to use equality and == operator for easier comparison.\r\n- Updated Quality Settings from Unity Editor update'
341311309,2446,b'First pass at porting the UX interactive controls',b'Overview\r\n---\r\nFirst pass at porting the UX interactive controls and associated features.\r\n\r\nTODO\r\n---\r\n- [ ] Resolve Click Handler\r\n- [ ] Resolve Gesture Input\r\n- [ ] Resolve Speech Input\r\n\r\nChanges\r\n---\r\n- Adds new InteractiveTheme Scriptable configuration (not implemented in interactables yet)\r\n- Adds Core interactive Controls\r\n- Adds related Interactive Widgets\r\n- Adds some new base utilities for Move / Scale / Fade and ColorFade\r\n'
341303002,2445,b'Ported a collection of MRTK SDK assets ',b'Overview\r\n---\r\nPulled over a collection of useful scene assets from HoloToolkit in to the MRTK SDK.  In preparation for creating example scenes\r\n'
341174486,2444,b'Merge input system fix from mrtk_development',b''
341164616,2443,b'Ported Solvers to vNEXT',b'Overview\r\n---\r\n- Brings over solvers from master branch.\r\n\r\nTODO:\r\n---\r\n- [ ] Examples and Tests'
341143999,2442,b'Fixed a couple of input system bugs',"b""- Pose was executing the wrong event data handler.\r\n- Pointer event data needed to call Initialize overload instead of base initialize.\r\n\r\n_It's the little things that matter._"""
341134904,2441,b'Merge input fixes from mrtk_development',b''
340704613,2437,b'Mrtk version next unity input manager update',"b'Overview\r\n---\r\nUpdated the Unity InputManager implementation requires to support Axis Data for OpenVR.\r\n\r\nSolution now builds a project.\r\n\r\nI\'ve tried to unify this and affect as little other code as possible, although these are the notable points.\r\n\r\nNotes\r\n---\r\n\r\n* New ControllerInputAxisMappingLibrary to centralise the controller Axis data.  No way to get it from each controller type separately.\r\n* Updated the MixedRealityControllerMappingProfileInspector to check for and load the appropriate Axis data for the controllers as the user edits them.  It also refreshes the mappings on selecting the controller profile (just in case).\r\n**Note** As Unity does not have a SerializedProperty.Changed or SerializedProperty.Value, certain ""hacks"" are required to unpack the properties so we can validate the array of controller data.  It works, and doesn\'t slow down the editor.  As it\'s the only place we can fully interrogate the data, it seemed prudent.\r\n* Split up the Nested types in to their own classes, InputManagerAxis & InputManagerAxisType\r\n\r\nChanges\r\n---\r\n- Fixes: Standalone and UWP builds now... Build\r\n\r\nResolves\r\n---\r\n#2432 \r\n\r\n'"
340384206,2436,b'Fixes for pre-2017.2 in June',"b'Overview\r\n---\r\nA few `#endif`s were in the wrong place, and there was a reference to `XRDevice`.\r\n'"
340379859,2435,b'TwoHandManipulatable updates from Dev',"b'Overview\r\n---\r\nUpdated TwoHandManipulatable to use `HostTransform` for `BoundingBoxRig`.\r\n\r\nMany of the other changes were already present. Also, minor clean-up.\r\n\r\nChanges\r\n---\r\n- Migrates over #1820 and #2144 \r\n- Related to #2423 \r\n'"
340311593,2433,b'Mrtk version next 2018 2 upgradeplusfixes',"b'Overview\r\n---\r\nUpgraded project to 2018.2 and removed some unwanted warning messaged.\r\n\r\nAlso resolved an issue where the editor ONLY runs in standalone mode, so added another function for selecting SDK based on build type\r\n\r\nChanges\r\n---\r\n- Updated project to 2018_2\r\n- Fixed some warning errors\r\n- Resolved a Post OpenVR editor runtime issue (Editor only runs as standalone :D)\r\n\r\n'"
340013137,2428,b'Port shader updates from Dev_Working_Branch and June',b'Overview\r\n---\r\nBrings over the partial branching removal from June and general improvements from Dev/June.\r\n\r\nChanges\r\n---\r\n- Migrates #2363\r\n- Migrates #2424\r\n'
339994206,2427,b'Update ProjectSettingsWindow to not lose settings on BuildTarget update',"b'Overview\r\n---\r\n`UpdateSettings` is used as a callback when the build target is updated asynchronously. Previously, none of the settings were saved before the window was closed, so, when the callback tried to query them, it received the defaults. This change saves the settings before trying to update the build target.\r\n\r\nChanges\r\n---\r\n- Fixes #2214\r\n'"
339939138,2425,b'PlayerController.cs updates from Dev',b'Overview\r\n---\r\nFrom original PR:\r\n>Updates the debug log from a SharingWithUNET component to be correct.\r\n\r\nChanges\r\n---\r\n- Fixes #1679 \r\n- Migrates over #1748\r\n- Related to #2423 \r\n'
339937605,2424,b'Shader updates from Dev',b'Overview\r\n---\r\nFrom original PR:\r\n>Integrating the latest work to improve the MRTK/Standard shader. Improvements include:\r\n>\r\n>- Support for non-D3D11 APIs (tested on iOS and Android devices using OpenGL ES and Metal)\r\n>- Support for three hover lights (useful with IHMDs with multi-pointers)\r\n>- Improved rounded corner algorithm\r\n>- Closer match to the Unity/Standard shader\r\n>- Improved shader based anti-aliasing support\r\n>- Minor optimizations\r\n>\r\n>\r\n>![aa](https://user-images.githubusercontent.com/13305729/40255071-b4227e3a-5a9a-11e8-9d01-5ff0b0a807c6.png)\r\n>(Shader based anti-aliasing example.)\r\n\r\nChanges\r\n---\r\n- Migrates over #2129.\r\n- Part of #2423.\r\n'
339215443,2417,b'Demo scene for the Standard Shader in vNext Examples',"b'Overview\r\n---\r\nFollowing the addition of the standard shader in #2407\r\nAdding the demo scene for the Standard Shader in vNext Examples\r\n\r\nChanges\r\n---\r\n- New Demo folder in examples (demonstrations, not ""examples"")\r\n- Added Standard Shader Demo\r\n- Added new ""Core"" assets from example, ensuring they are core\r\n- Updated Demo scene to work for vNext\r\n'"
339026898,2414,b'Ported default cursor into SDK to test cursor visibility & functionality ',"b""Fixed a few issues with Focus Provider.\r\n\r\n- Wasn't updating the default gaze transform on start before pointer was created which broke stuff.\r\n- Added a few more assertions for easier debugging.\r\n\r\nblocked by #2412 \r\n"""
339024831,2413,b'Addressing previous inscribed rectangle PR comments',"b""Overview\r\n---\r\nThere was an optimization mentioned in #2403 that I'm addressing here.\r\nI also refactored out a method to convert Vector3s into Edges, which needed to happen in (at least) two places. This simplifies the InscribedRectangle constructors slightly as well.\r\n\r\nChanges\r\n---\r\n- Addresses https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2403#discussion_r200541457\r\n"""
338977855,2412,b'Updated some docs focused around focus provider and pointers.',b'Reorganized focus provider a bit and moved documentation to the interface.'
338792907,2407,b'Ported Standard Shader and GUI from master.',b'Overview\r\n---\r\nPorted Standard Shader and GUI from master.'
338771043,2406,b'Fix extension method not in namespace',b'Overview\r\n---\r\nThe GrabMechanics example had some extension methods that were generically named and included in the global namespace.\r\n\r\nChanges\r\n---\r\n- Fixes: #2394\r\n'
338769432,2405,b'Slight update to the teleport height logic',"b""Overview\r\n---\r\nThis should prevent unnecessary height changes in RoomScale.\r\nIn Stationary, we'll still need the downward raycast for height estimation most of the time.\r\n\r\nIf your floor is not at y=0 in either case, you can select the existing Stay on the floor setting, which will prevent height changes.\r\n\r\nChanges\r\n---\r\n- Fixes: #1181, fixes #2362.\r\n"""
338758805,2403,b'Add inscribed rectangle to BoundaryManager',"b""Overview\r\n---\r\nThis is a port of @KevinKennedy's inscribed rectangle code from his PR #1759.\r\n\r\nI also removed the old Bounds creation for checking if an object was inside the boundary, since that wasn't doing what we expected (Bounds are rectangular, not the shape of the boundary's polygon). Instead, I refactored out some code that was included here to properly check against the edges of the boundary.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/42352488-a50b413e-806f-11e8-9fea-2b4a1a3e6152.png)\r\n\r\nPurple is inside the boundary. Cyan is inside the inscribed rectangle, also pictured as a quad.\r\n\r\nChanges\r\n---\r\n- Fixes: #1709, fixes #2138.\r\n"""
338739160,2402,b'vNext: Implement MixedRealityBoundaryManager and Profile',"b'Overview\r\n---\r\nDefined the IMixedRealityBoundarySystem interface contents and implemented MixedRealityBoundaryManager.\r\n\r\nAdded MixedRealityBoundaryProfile/Inspector and DefaultMixedRealityBoundaryProfile.\r\n\r\nUpdated MixedRealityConfigurationProfile/Inspector and MixedRealityManager to support the boundary profile settings.\r\n\r\n- Fixes: #2389, #2420 \r\n'"
338705815,2400,b'[June18] Added missing SpeechInputSource to the scene to enable CompoundButtonSpeech',"b'Overview\r\n---\r\nIn the [InteractableObjectExample](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/master/Assets/HoloToolkit-Examples/UX/Readme/README_InteractableObjectExample.md) scene, HolographicButton prefab examples had CompoundButtonSpeech component but speech input was not properly activated since **SpeechInputSource** was missing in the scene.\r\n\r\nAdded **SpeechInputSource** to the scene with keyword definitions. \r\n\r\nChanges\r\n---\r\n- Fixes: #2343 \r\n\r\n![2018-07-05 12_21_27-unity 2017 2 1p2 64bit - interactableobjectexample unity - mrtk-master - unive](https://user-images.githubusercontent.com/13754172/42344902-94e5bf5e-8052-11e8-8520-4e17707a8f12.png)\r\n\r\n![2018-07-05 12_22_03-unity 2017 2 1p2 64bit - interactableobjectexample unity - mrtk-master - unive](https://user-images.githubusercontent.com/13754172/42344907-9859e304-8052-11e8-83f9-f4ec983fe4da.png)\r\n'"
338623183,2399,b'Fixed typo',b'Fixes #2372 MixedRealityPosePose  -> MixedRealityPose '
338619763,2398,"b""Refactored Pointers & Broke out raycasting into it's own static class.""","b""Overview\r\n---\r\nPart of my PR series for getting pointer visualization working.\r\n\r\n- Refactored pointers and focus provider to have a standard physics raycasting method. \r\n    - This will be important later on in the Solver port, as the master branch currently has many different ways of raycasting in different classes. This seeks to unify those efforts to produce the same results.\r\n    - Removed `CameraMotionInfo` in favor of `GazeProvider`.  Added required properties for `GazeProvider` to take over the `CameraMotionInfo`'s references. \r\n    - Added raycast mode enum from solvers to give users more options about how they want their pointers to raycast, (currently only supports simple & sphere, Box raycasting may need more work.\r\n- Raycasting is now done via `MixedRealityRaycaster` for any script to use.\r\n- Refactored attach to controller.  It now only inherits from Monobehaviour, so that when we do controller visualization later on, it doesn't break other platforms. (`ControllerFinder` and `ControllerVisualizer` were geared only for WMR and should be either removed or refactored to work in a nicer cross platform way.)\r\n- Removed some of the input sources we will not be using.\r\n- Updated a few of the primitive extension methods."""
338335156,2396,b'MRTK vNext - Open vr device initial implementation',"b""Overview\r\n---\r\nFirst pass for the OpenVR device implementation\r\n\r\nGeneric Headset and controllers, tested using Windows MR on a standalone platform using SteamVR\r\n\r\nChanges\r\n---\r\n- [X] Added OpenVR Device manager\r\n- [X] Added GenericOpenVRController\r\n- [X] Controller Positional tracking (no grip available)\r\n- [X] Controller Button actions (except Grip, as OpenVR reports it as a SingleAxis, not button)\r\n- [X] Controller Axis input\r\n- [X] Other controller types (Although, no mechanism to detect type yet. Will review in another PR)\r\n- [ ] Test with more devices (on the delivery van)\r\n- [X] walk on water\r\n- [x] Curse Unity (because you cannot tell the difference between left hands, if you have more than one)\r\n- [X] Added new utility to manage Unity Input Mapping management\r\n\r\nNotes\r\n---\r\nJust in initial phase, I'm sharing as I have my controller visualizer showing cubes moving :D \r\nController fully tested and working using SteamVR with WMR.  Need more SDK testing to finish.\r\n**Remaining outstanding work will be done in new Tasks.**\r\n\r\nBase implementation ready for review."""
338045661,2390,b'MRTK menu ordering fix',"b'Overview\r\n---\r\nMultiple menu items had the same priority, so the ordering became inconsistent on launch. This pushes the lower items down in priority, but retains a smaller difference between priorities than the 10 that generates a section separator.\r\n\r\nChanges\r\n---\r\n- Fixes: #2071\r\n'"
337995984,2388,b'Add support for non-0 min values in SliderGestureControl',"b'Overview\r\n---\r\nCurrently, a non-centered SliderGestureControl assumes it will always have a min value of 0. If the min value is not zero, it will slide the range down until it starts at 0, decreasing the max value by the same amount.\r\n\r\nThis change also re-exposes a starting SliderValue in the editor, which was (inadvertently?) removed in #816, when the public float was turned into a property without serializing its backing field.\r\n\r\nChanges\r\n---\r\n- Fixes: #1712\r\n'"
337991759,2387,b'Fixed errors when stopping editor playmode.',"b""- Disabled focus provider and added a check in the `UIRaycastCamera` creation to return if it's disabled.\r\n- Added a flag to `GetOrAddController` to skip updating the controller when we remove it."""
337915969,2385,b'Added device position updates for WMR controller.',b'cleaned up comments and field names a bit as well.'
337692384,2380,b'Billboard.cs up vector bug fix',"b""Overview\r\n---\r\nLookRotation wants the two vectors to be orthogonal. Giving it the\r\nobject's current up vector caused some drift in the z angle in some\r\ncases (since the resulting up vector sometimes cannot be what we pass in). Now, we\r\ndon't pass any up vector in and let Unity handle it in cases where we\r\ndon't want z touched."""
337657607,2379,b'vNext: fix corner cases in determining windows mixed reality controller tracking',"b'Overview\r\n---\r\nThis change fixes two scenarios that may arise in Windows Mixed Reality controllers.\r\n1. A non-trackable source may be encountered (ex: Voice or a Controller that cannot point)\r\n2. It is possible to have a source that loses positional tracking without losing rotational tracking.\r\n\r\nChanges\r\n---\r\nThis PR fixes the issues as follows:\r\n1. Determines if a controller can be tracked, and only determines the state if true. Otherwise, returns TrackingState.NotApplicable\r\n2. Checks if we have position data OR rotational data to determine the tracking state between NotTracked and Tracked\r\n\r\n- Fixes: #2378.\r\n'"
337603151,2377,b'properly cleanup ui raycast camera when we disable input system.',b'properly cleanup ui raycast camera when we disable input system.'
337601129,2376,b'Added asserts for things',b'- Added null check assert for main camera tag in `CameraCache.Main`.\r\n    - (This should probably be backported into master as well.)\r\n- Added asserts in Gaze and Focus Providers for MR Manager and Input System.'
337586277,2375,"b""Config Profile Inspector doesn't update values after change.""","b""- Fixes #2371's issues with cleaning up profiles after user changes them in the inspector.\r\n- fixed null ref when selecting camera profile when no mixed reality manager is in the scene."""
337196306,2373,"b'Fixed Issue where the ""No controller mappings found"" error is logged even if there ARE mappings'","b'Overview\r\n---\r\nCurrently the ""No Mappings Found"" error is reported all the time, simply because there is no IF statement around the error to test if there are no interactions mapped\r\n\r\nChanges\r\n---\r\nSurrounds the error with a ```if (Interactions == null || Interactions.Length < 1)``` to validate there are interactions.\r\n'"
337193427,2371,b'Resolves null references if the input system is disabled with components relying on Input System',"b'Overview\r\n---\r\nCurrently, if a scene starts that previously was using the InputSystem and the Input System was then disabled.  This caused a bucketload of Null reference checks / errors.\r\n\r\nI expect review to consider an alternate way of Null testing or EnableInputSystem testing to ensure this should not generate errors in any manager use.\r\n\r\nChanges\r\n---\r\n- Fixes: Null Reference Errors in Getmanager due to the manager not existing when called from GazeProvider\r\n- Fixes: Null Reference Errors in Getmanager due to the manager not existing when called from FocusProvider\r\n- Fixes: Null Reference Errors in Getmanager due to the manager not existing when called from GenericPointer\r\n- Fixes: Input System Null Reference Errors in GenericPointer due to the manager not existing or inputsystem disabled\r\n'"
337171245,2370,b'Initialization Fixes for MixedRealityManager',"b""I noticed that a profile will serialize it's current profiles, but when we go to set that profile, we'll get issues because it thinks the manager's have been set (when they haven't yet).  So in the `ResetConfiguration` method we're clearing any manager's that profile thinks is active before initialization.\r\n\r\nI also added a setter for the focus override object (Which was missing for some reason. We def want to be able to set that).\r\n\r\nI also added better object cleanup while in the editor for the Mixed Reality Input Manager."""
337161687,2369,b'add IsPosition/RotationAvailable and IsPositionApproximate',"b'Overview\r\n---\r\nAs discussed at shiproom (6/27), tracking states do not fall into a neat hierarchy; you can be tracked positionally, or rotationally, or both. \r\n\r\nWindows Mixed Reality, and potentially other platforms, provides a concept of position accuracy for tracked controllers. To allow developers to customize application behavior based on the accuracy of tracking, a IsPositionApproximate bool has been added to IMixedRealityController.\r\n\r\nChanges\r\n---\r\nThe TrackingState enum has been updated to have NotApplicable (device does not support tracking), NotTracked and Tracked. Tracked here means either position or rotation (platforms can decide if position and rotation are independent or hierarchical).\r\n\r\nTo let the developer know if a device has data for position and rotation, properties for IsPositionAvailable and IsRotationAvailable have been added to the Headset struct and the IMixedRealityController interface.\r\n\r\nThe WindowsMixedRealityController has been updated to report these new properties.\r\n\r\n- Fixes: #2347 .\r\n'"
337119801,2368,b'BoundingBox namespace and AppBar field serialization',"b'Overview\r\n---\r\nBoundingBoxHelpers was not in a namespace (and was in a different feature area than the actual BoundingBox scripts). \r\n\r\nAlso, a field in AppBar was not properly serialized and documented (along with some formatting and code style).\r\n\r\nChanges\r\n---\r\n- Addresses https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2212#discussion_r199049030 and https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2212#discussion_r199048871\r\n'"
337111382,2367,b'Button.cs event firing fixes',"b'Overview\r\n---\r\nPart 2 of #2359. This is a rework of the way the Button.cs events are fired. Previously, duplicate events were fired in both `OnInputDown` and `OnInputClicked` (and `OnHoldStarted`). This cleans those up and makes the state logic a little clearer.\r\n\r\nChanges\r\n---\r\n- Fixes: #1879\r\n'"
336968799,2363,b'Partially removed if-branching from _BORDER_LIGHT',"b'Overview\r\n---\r\nI have followed the documentation on here:\r\n\r\nhttps://shadowmint.gitbooks.io/unity-material-shaders/support/syntax/step.html\r\n\r\nBranching in shaders are usually undesirable because of the GPU-architecture (as far as I have read), but sometimes they can be useful in edge-cases. For this case I could have eliminated the if-else ifs in the block above the one I worked on, but on second thought I decided to leave it as to be honest I have not yet spent that much time looking into this shader.\r\n\r\nChanges\r\n---\r\n- I have removed the 2nd branching in the _BORDER__LIGHT-definition that wrote to o.uv.z and o.uv.w and replaced with a custom #define IF at line 122 . \r\n'"
336843390,2361,b'Fixing building glTF libraries for other build types',"b""Overview\r\n---\r\nThis issue was reported again (see the issue below).\r\nThis was previously addressed in #1742, but reverted just before release due to a bug in Unity 5.6. Due to our new recommended minimum Editor version of 2017.1, I'm reintroducing this change.\r\n\r\nChanges\r\n---\r\n- Fixes: #2336\r\n"""
336797864,2360,b'Fix some build warnings',"b'Overview\r\n---\r\nThe `planePrefab` is only used in this script and is only used `#if UNITY_IOS || UNITY_EDITOR`. Without this check when building for Standalone:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/40802062-68e3b432-64c9-11e8-9b30-2fe9d6528ecf.png)\r\n\r\nSpectatorViewNetworkManager also shows:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/42063084-f8e044fc-7ae4-11e8-8547-c15eef0e0d80.png)\r\n\r\nand AppBar shows:\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/42063092-010acd50-7ae5-11e8-9608-24958b675dde.png)\r\n\r\nChanges\r\n---\r\n- Fixes: #2068, specifically https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2068#issuecomment-393639957\r\n'"
336782152,2359,b'Button.cs documentation and formatting updates',"b'Overview\r\n---\r\nCleans up Button.cs a bit, in preparation for a fix for #1879 incoming after merge.\r\n\r\nChanges\r\n---\r\n- First PR towards a fix for #1879 (splitting up into smaller PRs for review ease).\r\n'"
336768866,2358,b'PopupMenu options fix',"b'Overview\r\n---\r\nThe PopupMenu was consuming `OnInputDown` and `OnInputUp` events, while it seemed like it should consume (and other similar components were using) `OnInputClicked`. I reworded the example scene to be clearer, and also decreased the number of places states were being handled. The PopupMenu routes its ""close"" input handling through a button, but was also receiving its own input. Now, everything goes through the button.\r\n\r\nChanges\r\n---\r\n- Fixes: #2040, fixes #1535\r\n'"
336706860,2357,b'Spectator View recursive fix',"b'Overview\r\n---\r\n`Controls` was calling itself instead of the backing field, thus becoming recursive.\r\n\r\nI also updated some of the documentation and `Debug.Log`s.\r\n\r\nChanges\r\n---\r\n- Fixes: #2165\r\n'"
336660722,2356,b'Fixes an InteractionInputSource bug where data was removed too soon',"b'Overview\r\n---\r\n\r\nPreviously, the data was removed before the event was fired. This caused any queries back about the data while handling the event to fail.\r\n\r\nThis was found during Button.cs investigation, and subsequent PRs will be opened following this change.'"
336496698,2354,b'Button.cs eventData fixes',b'Overview\r\n---\r\n\r\nFixed #2295. Marked eventData objects as used inside Button to ensure events do not propagate to downstream handlers.\r\n\r\nChanges\r\n---\r\n- Fixes: # 2295.\r\n'
335689004,2351,b'More Device changes.',"b""Overview\r\n---\r\n- Added a really good reason to keep controller types public.\r\n- Added Tracking Events to Input System.\r\n- Renamed ControllerState to TrackingState (Cause it can be for headsets too).\r\n- Added changed check to all WMR Controller device updates so we don't spam the Input System unless something actually changes.\r\n- Misc cleanup.\r\n- Addresses some concerns with #2347"""
335603754,2350,b'Mrtk v next input action rollback2',b'Rolling back the interface implementation to fix issues with profiles.'
335547947,2349,b'[June retarget] Fix for dragging of rotation handles of BoundBoxRig',"b""Overview\r\n---\r\nThis PR is a rebase and retarget of the commit from @paulmriordan's PR #2160. That PR had been inactive for a month.\r\n\r\nTo quote @paulmriordan in #2160:\r\n\r\n>Current method of rotation is not consistent; the object is rotated different directions\r\n>depending on orientation of object.\r\n\r\n>This commit adds an option (rotateAroundPivot) which allows the user to rotate an object in a more >natural way.\r\n\r\n>To avoid breaking existing usage, this new rotation is enabled via a bool in BoundingBoxRig.\r\n\r\n> Existing behaviour:\r\n> ![boundingboxgizmoold](https://user-images.githubusercontent.com/4314853/40498945-6573e890-5f78-11e8-9268-0dd08701ffd2.gif)\r\n> \r\n> New behaviour:\r\n> ![boundingboxgizmonew](https://user-images.githubusercontent.com/4314853/40498949-68375396-5f78-11e8-82d1-36e322d07808.gif)\r\n"""
335541443,2348,b'[June retarget] Fix for choosing closest grabbable object to grab',"b""Sort method was comparing distance of first object to itself, rather than second object\r\n\r\nOverview\r\n---\r\nThis PR is a rebase and retarget of the commit from @paulmriordan's PR #2159. That PR had been inactive for a month.\r\n"""
335489404,2345,b'second attempt at devices refactor.',b'Fixes compiler issues and cleans up devices implementation'
335480184,2344,b'Typo on paragraph #57',b'Overview\r\n---\r\nFixes a typo on paragraph 57\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
335220070,2338,b'Devices Refactor',b'Part 2 of the PRs\r\n\r\nFixed some issues with serialization of profile data. (We switched some things to use interfaces which broke some things)\r\n\r\nAll tests pass and no crashes when running in the editor.'
335216429,2337,b'Refactored InterationMapping to be MixedRealityInputMapping',b'First of several PRs addressing changes.'
335173291,2334,b'Rebased check-in of InteractionMapping<T> Update',"b""Overview\r\n---\r\nRebased check-in of InteractionMapping<T> Update and added Base DeviceManager/Controller implementation from @StephenHodgson \r\n\r\nChanges\r\n---\r\n* Renamed and updated InteractionMapping to MixedRealityInteractionMapping<T>\r\n* New IMixedRealityInteractionmapping Interface for collections of MixedRealityInteractionMapping<T>\r\n* Updated and enhanced tests for MixedRealityInteractionMapping<T>\r\n* Took PR from @stephenhodgson to create base classes for DeviceManagers and Controllers (All scaffolds are now empty)\r\n* Implemented the SixDof class (also in another PR)\r\n* Tested with visualizer - working\r\n\r\nKnown Issues\r\n---\r\nInput System breaks again on launching with a controller, @StephenHodgson to investigate and fix after merge\r\n\r\nComments\r\n---\r\nI've left in tests for the old Dictionary method for InteractionMappings to show the speed comparison between the Dictionary Method and the new InteractionMapping array (I think Stephen may have finally beaten me down), as well as adding comparative speed comparisons between dictionary and array.  There's not much of a difference, but enough to warrant the change.\r\n\r\nThese will be removed once approved prior to merge."""
335166610,2333,b'Made sure that the input system cleans itself up properly.',b'Input system now properly cleans itself from the scene when Destroyed.\r\n\r\nMoved a few interfaces into their own classes.'
335163313,2332,b'Mixed Reality Manager Tests fix',b'we also needed to check if the input system type was null as well'
335151826,2331,b'IMixedRealityInputAction changes & SixDof Type',"b'- Updated InputAction to IMixedRealityInputAction where appropriate\r\n- Added `SixDof` type for Position and Rotational data\r\n- Replaced all instances of `Tuple<Vector3, Quaternion>` with `SixDof`\r\n- Added Input Source Position Changed events'"
334849502,2329,b'2018.2 code compatability',"b'Overview\r\n---\r\nAdded compiler directives to let the code compile successfully with 2018.2 (#if UNITY_2018_2_OR_NEWER)\r\n\r\n- Remaining Problem: Previously BuildPlayer returned an error string. BuildReport does not have that so I don\'t know what the equivalent could be. For now in the case of an error, the string ""Error"" will be used.\r\n'"
334781731,2327,b'June18 dev spectator view multilens support',"b""### Overview \r\nSpectatorView is now able to work with an existing multilens session **if such session uses UNET**. A new script has been created `SpectatorView.cs` that has a reference to a NetworkManager. From now on SpectatorView will only work if there's a NetworkManager in the scene, it's been referenced and the session started.\r\n\r\n### Changes \r\n- SpectatorView can now use an external NetworkManager\r\n- Changes in the error handling for the dependencies\r\n- SpectatorView is now a single prefab\r\n- Example scene changed to have an external NetworkManager \r\n"""
334683134,2325,b'Load meshes from ObjectSurfaceObserver while respecting their transforms',"b""Overview\r\n---\r\nObjectSurfaceObserver currently loads in the mesh filters while ignoring the transforms of the GameObjects they're attached to. This change allows meshes to be placed at specific spots and have them load as expected.\r\n\r\nChanges\r\n---\r\n- Fixes: #2324\r\n"""
334428079,2322,b'Fixed some Profile Serialization Issues and added Quickstart Menu',"b""- We were having issues with active profiles being registered to the Mixed Reality Manager whenever we crated a new scene and selected a config profile.\r\n- I also added a Quickstart menu under Mixed Reality Toolkit menu to generate the Mixed Reality Manager in the scene if none exists.\r\n- Updated how we create profiles.\r\n- Updated Camera Profile Inspector to match the rest of the profiles.\r\n- Fixed Profile Activation crashing if it's null or unset."""
334422186,2321,b'updated custom assembly definitions.',"b""Ensured that EnforceEditorSettings is 3.5 compliant so it will successfully compile and reload.\r\n\r\nStill waiting on a fix from Unity for the correct assembly reloading.\r\nSee my [forum post here](https://forum.unity.com/threads/custom-assemblies-are-not-reloaded-if-there-is-a-compile-error.537145/).\r\nSee my [bug report here](https://fogbugz.unity3d.com/default.asp?1032070_2h7qac6ck84v34ee).\r\n\r\nI chose to make the default scripting backend target 4.6 so it's easier for people to use the project switching to write in the native windows namespace."""
333886451,2319,b'Re-enable Sharing with UNET',"b'Overview\r\n---\r\nUpdates some `#if`s from #2127 to run on all build configurations except the intended IL2CPP && .NET Standard 2.0. This was blocking Sharing with UNET from working.\r\n\r\nThis also contains some minor changes to the scene to bring it up-to-date with the latest components.\r\n\r\nChanges\r\n---\r\n- Fixes #2276, fixes #2303\r\n'"
333875212,2318,b'update class visibility',"b""The controller classes (deriving from IMixedRealityController) were marked as public. Since apps should not have access to them and should be getting their data via the interface, therefore I have marked them as internal.\r\n\r\nThe device classes (deriving from IMixedRealityDevice) had inconsistent visibility. Some were private and others public. Similar to the controllers, there is no need for these classes to be available to applications. Since WindowsMixedRealityDevice had the most restrictive visibility and is what we have successfully used, I have made them all private.\r\n\r\n~~While not strictly related, the intent of adjusting the visibility of classes is to enable use of asserts during development and free the release/master builds from needing to check for situations that should not be possible. Since Unity's Debug.Assert does not provide runtime assertions (when an app has been built in VS and not running in the editor) I added an editor check and switched which assert (and logging method) is called.~~"""
333790738,2317,b'Fix image links',b'github image links are case-sensitive.\r\n'
333374654,2316,b'Automation script for build process.',b'Overview\r\n---\r\n\r\nAdds metadata and a build script to package up the repo into NuGet and Unity packages.\r\n'
333083605,2315,b'vNEXT Input System Refactoring and Cleanup',b'- Refactored InputSystem to accept custom InputAction types.\r\n    - Now all raised events require an InputAction as a parameter.\r\n- Cleaned up IMixedRealityInputSystem.\r\n- Removed the default pointer from the input action configuration profile.'
333078485,2314,b'Better example for custom Icons for AppBar',"b'Overview\r\n---\r\nSome icons for the AppBar instead of the generic ObjectCollectionScatter, to look a bit more like the version from the Holograms app\r\n\r\nChanges\r\n---\r\n- Fixes: #2310 .\r\n'"
332963108,2308,b'Updated Mixed Reality Camera Manager to be a configurable profile',b'Updated Mixed Reality Camera Manager to be a configurable profile'
332863276,2306,b'Properly expose MonoBehaviour methods in Cursor.cs',"b""InteractiveMeshCursor was unknowingly hiding Cursor's Awake. This wasn't an issue previously, since the only thing in Awake actually didn't really do anything due to a different bug (also fixed here). \r\n\r\nUpdate Cursor to make its Awake (and others) overridable.\r\n\r\nThis commit also exposes `isVisible` in the Editor, as the comment in\r\nAwake() indicates that it should be settable before startup.\r\n\r\nAlso, removes an extra SetVisibility call that already happens in the\r\npublic setter.\r\n\r\nFixes #2294.\r\n"""
332184706,2301,b'fix MoveToPosition.TargetObject',"b""Overview\r\n---\r\nMoveToPosition was setting its own transform instead of the TargetObject's transform.\r\n\r\nChanges\r\n---\r\n- Fixes: #2300.\r\n"""
332176962,2299,b'Mrtk version next interaction mapping<T>',"b""Overview\r\n---\r\nReview implementation (NOT FOR MERGE YET) of an alternate implementation for InteractionMapping<T>\r\n\r\nHave a look through the updated implementation and use in \r\n* WMRDeviceManager\r\n* WMR Controller\r\n* Collections Extension\r\n\r\n\r\nIn testing, this is on par with the base InteractionMapping tests, so is much faster than the old generics method.\r\n\r\nNote\r\n---\r\nIgnore the changes in the other device files, as these are just scaffolds.  \r\nImplementation is test only, once agreed I'll refactor all the stuff in to the correct places :D \r\n\r\nChanges\r\n---\r\n- Several new definitions in the InteractionMapping.cs class file.  New InteractionMapping<T> and interface added.\r\n - Updated implementation in the WMR Device manager and WMR Controller defs\r\n"""
332014748,2293,b'Added tests for InteractionMappings dictionary',"b'Overview\r\n---\r\n\r\nAdded tests for how the InteractionMappings are used in the device space.  Highlighting the issues now created by removing the generics functions.  These tests all fail with the following error (simply because SETVALUE cannot distinguish a type like Get can)\r\n\r\nSetValue(object) is only valid for AxisType.Raw InteractionMappings\r\n\r\nAlso added another extension for the InteractionMapping Dictionary as I missed that changed was updated between gets.\r\n\r\nKnown Issues\r\n---\r\n\r\nTests now fail as Dictionary updates ONLY update the raw data type without the generic SET method.\r\n\r\nChanges\r\n---\r\n- Added Dictionary Tests for InteractionMappings\r\n- Added new InteractionMapping Dictionary extension to allow changed to be updated for a mapping\r\n- Updated used of ""Changed"" in the devices to use the new GetChanged extension'"
331756130,2290,b'added an explanation of SolverInBetween',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
331755048,2289,"b'updated the docs with a reference to the 5th surface type, radial'",b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
331754292,2288,b'updated documentation to include a reference to radial surfaces',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
331750860,2287,b'fix assorted errors in the CodingGuidelines doc',b'There were some errors in CodingGuidelines.md including:\r\n* Incorrect namespace\r\n* Shifting 0\r\n* Spaces in enum values\r\n* Spelling errors\r\n\r\n'
331377825,2283,"b'add #if around extensions namespace as appropriate, add IsOpaque'",b'Overview\r\n---\r\nFound some references to the Microsoft.MixedReality.Toolkit.Internal.Extensions that should be in closed in #if WINDOWS_UWP && !ENABLE_IL2CPP.\r\n\r\nAdded IsOpaque to the headset definition to allow differentiation between opaque (vr) and see through (ex: HoloLens).\r\n\r\nAlso tweaked controller state comments and added OrientationOnly state.'
331320186,2282,b'Remove InteractionMaping Get|SetValue<T> and update relevant tests',"b'Overview\r\n---\r\nThe generic Get|SetValue methods , as asserted in the test cases, were slower (and produced garbage) than their specific counterparts.\r\n\r\nChanges\r\n---\r\nThis change:\r\n* removes the generic GetValue<T> and SetValue<T> methods\r\n* renames the Get<type> methods (ex: GetRaw -> GetRawValue)\r\n* updates calling code\r\n* removes test cases that utilized the generic methods\r\n* renumbered the test cases to eliminate the gaps that were introduced\r\n'"
330843438,2275,b'Fixed FinishStopRecording() error on non-Windows platform',"b""Overview\r\n---\r\nFinishStopRecording() uses variables that are only declared in Unity Windows platforms without checking if it's in a Unity Windows platform itself. This fix simply adds this check, so that Unity will not throw errors on non-Windows computers for variables not existing in the scope.\r\n\r\nChanges\r\n---\r\n- Adds checks for Unity Windows platform in FinishStopRecording() and simply returns null if not in a Unity Windows Platform.\r\n"""
330651006,2274,b'vNEXT Editor Update',b'Bumped version to 2018.1.3f1 and changed the scripting runtime to 4.x so we get player projects generated.\r\n\r\n'
330649132,2273,b'MRTK Icon Manager filtering',"b""Overview\r\n---\r\nadded ability to either skip or target specific partial name's for assets when assigning icons."""
330119826,2265,b'Fixed issue with Icon Manager',"b""Icon manager wasn't writing to the meta file correctly.\r\n\r\nIt now does so, and I added a check to make sure we don't overwrite the set icon, and a flag for when we do want to overwrite it."""
329271135,2246,b'Fixing a bug the causes FaceOrigin collections to face the wrong direction when collections are rotated (and some bonuses) TAKE 2',"b""I dug myself into a githole in that other branch. I gave up trying to revert my reverts of merges of merges and just put my changes in a new branch. Sorry for making you check it twice. It should have all the changes I made in response to previous review feedback. The only bit we should be waiting for is @paseb to weigh in on the RadialMapping() question. I'll poke him in person tomorrow.\r\n\r\n![image](https://user-images.githubusercontent.com/231247/40949979-84e7d906-6825-11e8-9c52-ef890f138603.png)\r\n\r\n---------------------------------------------\r\nThis is a pull request for the completion of my proposal:\r\n#2227"""
329227955,2245,b'Solver example updates',"b'Overview\r\n---\r\nI created a solver that keeps a game object between two tracked objects.\r\n\r\nProposal here:\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2228\r\n\r\nChanges\r\n---\r\n\r\nMy implementation creates a second solverhandler (public class AdditionalSolverHandler : SolverHandler) and adds it to the gameobject at runtime. This second solverhandler updates its TransformTarget, which is used by SolverInBetween as one of the two end points. It could be used by other solver types in the future; any number of AdditionalSolverHandlers is supported.\r\n\r\nIn the process, I fixed a few bugs, particularly with the custom inspectors. Solvers can now be switched to other tracked objects while playing in editor or at runtime via script. It also adds an offset and rotation to solver handlers so you can track a virtual point near by/rotated around an actual tracked object.\r\n\r\nCleaned up several issues involving the way ControllerFinders attach to controllers when they first start.\r\n\r\nAlso improves the Solver example map dramatically.'"
329176565,2243,b'cleanup .net build changes',"b'Changes\r\n---\r\n- Move IsClass, IsInterface, IsAbstract and GetInterfaces(Type) from NetNativeReflectionExtensions.cs to ReflectionExtensions.cs\r\n- Delete NetNativeReflectionExtensions.cs as it is no longer needed and had duplicate definitions of methods found in ReflectionExtensions.cs\r\n- Wrap contents of ReflectionExtensions.cs in #if WINDOWS_UWP &amp;&amp; !ENABLE_IL2CPP\r\n- Add missing using statements to files using ReflectionExtensions\r\n- Replace implementation of SystemType.GetReference() with a backend agnostic version\r\n\r\nTested by compiling a project in the following configurations\r\n- .NET backend\r\n    - .NET 4.x API compat level\r\n    - .NET Standard 2.0 API compat level\r\n- IL2CPP backend\r\n    - .NET 4.x API compat level\r\n    - .NET Standard 2.0 API compat level\r\n'"
329149319,2242,b'Keyboard Fix for Missing Keys Bug',"b'\r\nOverview\r\n\r\nThere was a bug with the keyboard (#1744) which causes the first button in each row to not appear or at least be positioned correctly.\r\n\r\nPlease note, the bug fixed by this Pull Request was deemed to be a Unity bug that has now been reported as fixed so perhaps this pull request can be ignored.\r\n\r\nHowever, I am still leaving this code in my local respository for the slight performance improvement since the layouts never need to be updated at runtime.   Each keyboard layout is saved as a child gameObject so if you switch between layouts this code never needs to be called.  The only reason I can think of is if you try to customize the keyboard at runtime, but in that case you should just call update layout manually.  \r\n\r\nPerhaps I am missing something? @keveleigh\r\n \r\n\r\nChanges\r\nEach of the layouts now only updates in the Editor.\r\n \r\n\r\n- Fixes: # \r\n#1744 \r\n\r\n\r\n'"
329096285,2240,b'Fixed Async to include the proper stack traces when throwing exceptions',b''
329081986,2239,b'Updated MRTK asset Icons',b'- Fixed an issue with Speech Keyword Handler.\r\n- Added IconEditor to quickly assign icons to scripts in parent folder.\r\n![image](https://user-images.githubusercontent.com/13334553/40923447-bbd3cdf0-67c9-11e8-8015-92835351e6bf.png)\r\n![image](https://user-images.githubusercontent.com/13334553/40923663-3e27c13a-67ca-11e8-824b-b8f0943088db.png)\r\n![image](https://user-images.githubusercontent.com/13334553/40923704-5b1c1da4-67ca-11e8-8491-72a24dfc7d44.png)\r\n'
328800841,2236,b'Updated Mixed Reality Manager and Test Cases.',b''
328785542,2235,b'Input Action Drawer for Handlers',"b""- Added input action drawer so handler's have easy way to implement and set Input Actions.\r\n![image](https://user-images.githubusercontent.com/13334553/40881695-2769b12c-6682-11e8-8f10-df353608bb3d.png)\r\n![image](https://user-images.githubusercontent.com/13334553/40881697-2cc2071e-6682-11e8-8ab0-16eca3624f00.png)\r\n\r\n- Updated Input Action Config profile to include an axis constraint."""
328778521,2234,b'Better handling of null managers',"b""We now correctly throw exceptions so we don't crash the editor\r\n"""
328776666,2233,b'Fixed recursive issues with Source/Pointer creation in gaze provider',b''
328767903,2232,b'added missing meta file for models folder',b'\r\n'
328767491,2231,b'vNEXT .NET Native build support.',b'Overview\r\n---\r\n- (Begrudgingly) Ported support for .NET Native building.\r\n- Cleaned up build warnings.\r\n- Fixed an issue where the IL2CPP/.NET switch in the build windows did not properly switch after folder delete prompt.'
328696291,2230,b'Added the missing meta file and removing MonoBehaviour from BoundingBoxHelper',"b""Overview\r\n---\r\nBoundingBoxHelper is [only used with the `new` keyword](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/june18_dev/Assets/HoloToolkit/UX/Scripts/AppBar/AppBar.cs#L249), which throws a Unity warning when called on MonoBehaviours.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/40868278-31c99b90-65c0-11e8-8272-60972465ccdf.png)\r\n\r\nAlso, the meta file wasn't included. \r\n"""
328647160,2229,b'Fixing a bug the causes FaceOrigin collections to face the wrong direction when collections are rotated (and some bonuses)',b'This is a pull request for the completion of my proposal:\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/issues/2227\r\n\r\n'
328244921,2226,b'Fixing building for Standalone',"b""Overview\r\n---\r\nThe UnityEngine.Handheld class doesn't exist when building for Standalone (it probably doesn't exist in some number of other non-handheld platforms as well).\r\n\r\nSince SV only supports iOS at the moment, I wrapped the call in `#if UNITY_IOS`.\r\n\r\nChanges\r\n---\r\n- Fixes: #2225.\r\n"""
328241461,2224,b'Fix build warnings',"b'Overview\r\n---\r\nMostly, they were ""[x] is never assigned to"", with some ""[x] is assigned to, but never used"" thrown in.\r\n\r\nFrom this: \r\n![image](https://user-images.githubusercontent.com/3580640/40797942-9f660ccc-64be-11e8-9190-dc675ebddb18.png)\r\nto this:\r\n![image](https://user-images.githubusercontent.com/3580640/40798065-ff082d40-64be-11e8-8018-8587d37f716e.png)\r\n\r\nFixes: #2068'"
328233257,2223,b'update july18 with june18 changes',b'\r\n'
328220444,2222,b'Eliminated unnecessary check that resulted in bad behavior at short distances',b'Overview\r\n---\r\nRemoved the flip check which caused a temporary gimble lock when the solver was used in small numbers < .01.\r\n\r\nWorks as expected now.\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: 1\r\nSolverRadialView.cs\r\n'
327973769,2219,b'update july18_dev with latest master (2017.4.0.0)',b'\r\n'
327973673,2218,b'update june18_dev with latest master (2017.4.0.0)',b'\r\n'
327955088,2217,b'Fixed a bug where solvers would try to attach to the right hand before it was ready',"b""Overview\r\n---\r\nJust switches a != null to a == null so it yields whenever the element transform doesn't exist, rather than yielding when it does.\r\n\r\n"""
327934353,2216,b'Merge 2017.4.0.0 release into master',b'\r\n'
327933743,2215,b'[Cursor] Properly track sources that were detected before registering as a global listener',"b""Overview\r\n---\r\nThis bug wouldn't repro in the Editor or when launching from VS. It was only present when the app was built and launched by a user with controllers already connected.\r\n\r\nIf a controller is already connected, the Cursor would never get a `SourceDetected`, as it didn't register as a global listener on the InputManager until `Start()`, and the `SourceDetected` events had already fired at that point. Now, right before registering as a global listener, the `visibleHandsCount` and `IsHandVisible` values are properly set with any sources we already missed.\r\n\r\nThe bug manifested itself in that the AnimationCursor would never enter the circular Interact state, as it never knew that any hands were visible."""
327896884,2213,b'Change requests from #2204',b'Missing Change Requests from #2204'
327834146,2212,b'[June18] App bar positioning bug fix #2042 ',"b'Overview\r\nThis PR addresses Issue #2042 \r\n""Bounding Box and App Bar not working as expected for Rectangular Holograms""\r\nThe fix causes the appbar to move to a cleaner location on objects that are very long in one dimension.\r\n\r\nChanges\r\nThe non-axis-aligned bounding box (NAABB)  helper functions are now broken out into a separate file: BoundingBoxHelper.cs.\r\n\r\nThis script contains a function to update the location of the appbar in its Update() loop: \r\nGetNonAABoundingBoxCornerPositions()\r\nThis function finds the face of the non-axis aligned bounding cube of an object that is facing a target point. (this point is the headPosition in the example scene.)\r\n\r\nThis script also contains a static function which finds the same info if it is only needed once. \r\nIncluded are additional helper functions for getting the edges of a face of the NAABB, the centroid of a face, the midpoint of the edges, the bottom of a face etc.\r\n\r\nthe Serialized Field AppBarHoverOffsetZ is now exposed at design time to allow the user to set a distance along the face normal that the appbar sits offset from the actual face.\r\n\r\n\r\n- Fixes: # 2042 \r\n\r\n'"
327654594,2211,b'Fix: gaze cursor appears 0.1m BEFORE a UI element ',"b'Issue: gaze cursor appears 0.1m BEFORE a UI element (for instance, the keyboard) in stead of on it\r\n\r\nFix: add 0.1m to z in FocusManager.RaycastUnityUI\r\n'"
327650022,2210,b'Keyboard dication input fixes',"b'Fixes two issues with the dictation of the keyboard.\r\n\r\n1. The DictationInputManager never really stops recognizing. The DictiationRecognizer.Stop() fails with a ""Assertion failed on expression: \'SUCCEEDED(hr)\'"" and internal state is not reset properly after that\r\n2. If the user gazes at the keyboard while doing a dictation, the event speech event arrives twice. \r\n\r\nFixes:\r\n1. Everything _after_ the DictiationRecognizer.Stop is put into a separate coroutine. As a lot of stuff in the DictationInputManager is static, and there was some internal replumbing necessary to make it a) work and b) not break the interface.\r\n2. In Keyboard.OnDictationResult now the eventData.used is checked. If true, input is ignored. If not, it is set to true after processing the input.'"
327601030,2209,b'Build Window fix for IL2CPP Targets',b'Changes\r\n---\r\n- Fixes: #2208 \r\n'
327588254,2207,b'Just a bit of housekeeping.',b'- Added some documentation.\r\n- Fixed a null ref in profile inspectors when calling CheckManager outside of onGUI render loop.\r\n- Fixed missing references.\r\n- Fixes #2208'
327577079,2205,b'Fixed missing references',b''
327523273,2204,b'Mrtk version next controller mapping',"b""Overview\r\n---\r\nAdds the capability to create custom controller mappings as another configuration window.  Lends heavily (almost identical) to @StephenHodgson 's work.  \r\n\r\nAlso adds the empty definitions for several well known controller types to aid configuration profile testing (but do not take this as read that full support for each is forthcoming for Alpha)\r\n\r\n\r\nThe interfaces for Devices and Controllers has also been added to support this work (taken from #2184\r\n\r\nChanges\r\n---\r\n- Adds Device / Controller Interfaces\r\n- Re-implemented the Controller Mapping profile, including the option to configure a model per controller\r\n- Added the Controller Mapping Inspector\r\n- Updated the Main configuration inspector to add support for controller mapping and default controller rendering\r\n- General tidyup\r\n- Added Empty device definitions for common style controllers\r\n"""
327503544,2202,b'update SDK folder structure to reflect 4/4/2018 notes',"b'Overview\r\n---\r\nThe current MixedRealityToolkit-SDK folder implies a monolithic SDK package.\r\n\r\nDuring the 4/4/2018 shiproom, it was agreed that the SDK folder needs to be easy to componentize, allowing consumers of the MRTK to opt-in to features. \r\n\r\nChanges\r\n---\r\n- Create Features folder and with Input sub-tree\r\n- Move Audio, Fonts, etc to Resources folder\r\n- Update assembly definition to create Microsoft.MixedReality.Toolkit.SDK.Input'"
327484728,2201,b'[May18] Updating pointing rays to extend out to the pointing extent off holograms',"b""Overview\r\n---\r\nThis PR updates the pointing ray visualization to extend out the full length of the pointer's pointing extent (or the FocusManager's default, if no override is specified), instead of the previous cursor default.\r\n\r\nThis is implemented in a way to preserve the default behavior of the Gaze cursor being placed at 2m, which is closer than the default pointing extent.\r\n\r\nChanges\r\n---\r\n- Fixes: #2166."""
327439566,2200,b'Unpicked the remaining fixes for @StephenHodgson from PR #2189',b'Overview\r\n---\r\nUnpicked the remaining fixes for @StephenHodgson from PR #2189\r\n\r\nChanges\r\n---\r\nStuff @StephenHodgson wanted to fix :D \r\n'
327228792,2198,b'Moving definitions following review',"b'Overview\r\n---\r\nMoving specific definitions to the Utilities following review\r\nAlso removing the Controller definition as it was replaced with an interface and updating the Handedness enum.\r\n\r\nChanges\r\n---\r\nMoves:\r\n* AxisType\r\n* Handedness\r\n* RotationConstraintType\r\n\r\n\r\nHandedness enum updated following review\r\n*Note, error will occur in Controller struct which is being removed in #2197 \r\n'"
327224377,2197,b'Renaming InteractionDefinition to InteractionMapping',b'Overview\r\n---\r\nRenaming InteractionDefinition to InteractionMapping\r\nAlso removes the now redundant Controller definition which was replaced by an interface\r\n\r\nChanges\r\n---\r\nUpdates file and all current references to the struct\r\nRemoved Controller struct'
327220564,2196,b'Updated InputAction definition to include an AxisConstraint',b'Overview\r\n---\r\nUpdated InputAction definition to include an AxisConstraint\r\n#Depends on PR #2194 (using added ready)\r\n\r\nChanges\r\n---\r\n- InputAction now includes an AxisConstraint and optional parameter in constructor'
327217840,2195,b'Renaming InteractionDefinition to InteractionMapping',b'Overview\r\n---\r\nRenaming InteractionDefinition to InteractionMapping\r\n\r\nChanges\r\n---\r\nUpdates file and all current references to the struct'
327215690,2194,b'Moving specific definitions following review',b'Overview\r\n---\r\nMoving specific definitions to the Utilities following review\r\nAlso removing the Controller definition as it was replaced with an interface and updating the Handedness enum.\r\n\r\nChanges\r\n---\r\nMoves:\r\n* AxisType\r\n* Handedness\r\n* RotationConstraintType\r\n\r\n\r\nHandedness enum updated following review\r\n'
327151332,2189,b'Device Configuration Profiles',b'Overview\r\n---\r\n- Somewhat overlaps and competes with #2184.\r\n\r\nJust wanted to give my take on an implementation.'
327132750,2188,b'Fixed some issues with handedness declarations.',"b'Overview\r\n---\r\nValues were wrong, and added Both enum.'"
327130052,2187,b'New APIs that enable access to MS Graph',"b'**Overview**\r\n1. Adds APIs that enable access to MS Graph for Read operations. Other C(R)UD operations will come later.\r\n2. Adds default authentication provider that uses MSAL to allow user authentication. Developers have the option to override with their own implementation though.\r\n\r\n**Disclaimer**\r\nThis is an early review as I am looking for guidance to ensure compliance with MRTK-Version-Next best practices, including:\r\n1. Folder and file structure.\r\n2. Namespaces and code organization.\r\n3. Guideline to incorporate plugins such as MSAL and JSon. Are plugins permitted at all?\r\n\r\n**Known issue**\r\nMSAL is currently not working when using IL2CPP, which seems to be a bug in Unity. I will be tracking this issue with Unity team and to start I created a new thread in their [forums](https://forum.unity.com/threads/uwp-assemblies-not-working-when-using-il2cpp-but-work-on-net-scripting-backend.533401/).'"
327097037,2186,b'Added Input Action Axis Constraints',b''
327078340,2185,b'Mixed Reality Manager Update',b'Made a few improvements to the way we handle how to query if an active profile is set and how to deal with it.'
326962997,2184,b'MRTK - vNext - Windows Mixed Reality Device Support - rebase',"b""Overview\r\n---\r\nAdding the initial Windows MR Device and Controller definitions, including some refactoring of core / input to accommodate.\r\n\r\nChanges\r\n---\r\n - Adds new WMRDevice (temp name, will rename for merge)\r\n-  Adds new Windows Mixed Reality Controller input source\r\n - Adds new InteractionDefinition structure for managing input data from device and controller mappings.\r\n - Changed Controller struct to an Interface for better management - Post Alpha clean up required\r\n- Add events for buttons / controllers / pointers / grip\r\n- Consolidate input events raised\r\n- Documentation pass on new classes (and a few standards corrections on others)\r\n- Wired up default pointers \r\n- Scaffolds - definitions added for other SDK's frameworks and controllers added but are ***NOT IMPLEMENTED*** (don't get excited, a ways off that yet) - *Future PR*\r\n- Parted the red sea \xf0\x9f\x8c\x8a \r\n\r\nKnown Issues\r\n---\r\n None\r\n\r\nNotes\r\n---\r\nReady for Merge"""
326925025,2183,b'updated a few project settings',b'- Project version is only temporary until we agree upon a final release candidate.'
326920152,2182,b'Updated controller struct.',b''
326918991,2181,b'Added ability to request a new input source from the MRTK Input Manager',b''
326843701,2180,"b'Updated Test cases, and even fixed a few bugs! yay!'",b'Also renamed assembly definition files to reflect their namespaces.'
326814318,2178,b'Updates to InteractionDefinition',"b'Overview\r\n---\r\n\r\nAdding missing generic ""GetType"" to def and removing redundant ""Tuple parameter\r\n'"
326808376,2177,"b'Refactoring InputSources, Pointers, HandDraggable, and misc cleanup.'",b''
326801623,2176,"b'Renaming the profiles, missed in review'","b'Overview\r\n---\r\nRenaming the profiles, missed in review\r\n\r\n'"
326779859,2175,b'Updated MixedRealityManager Initialization and Config Profile setup',"b""Now if there's not a MixedRealityManager in the scene and a script reference calls for an instance, it'll create a new manager object in the scene, then ping it.  If more than one config profile exists in the project a object window picker shows up to pick the config profile of your choice. If only the default profile exists, then it sets it automatically."""
326758813,2174,b'Improved Mixed Reality Manager Initialization',"b'Added a custom inspector for the MR Manager and updated the way we initialize the scene.\r\nWhen changing active profile, now the manager now calls reset and initialize.'"
326751562,2173,b'Mrtk version next input action extensions / updates',b'Overview\r\n---\r\nUpdates from the device branch to improve the extensibility of the InputActions system\r\n\r\nChanges\r\n---\r\n- Resolved namespaces for files in the Internal.Definitions folders\r\n- Added AxisType to InputAction for easier filtering on valid axis\r\n- Added InputHoldAction property to InteractionDefinition (still needs updating in custom editor)\r\n- Changes InputSource.Interactions to use a Dictionary instead of an Array for easier lookup by devices\r\n- Added default loading routines to InputActionsProfile for use by devices with no pre-setup config\r\n'
326725715,2172,b'Mrtk v next system type drawer fixes',b'Overview\r\n---\r\n\r\n'
326722857,2171,b'Fixed some issues with profile configs',b'- Fixed SystemType drawer to also show structs as well as classes.\r\n- Updated inspector to shorten the namespace of the currently selected type.\r\n'
326675593,2169,"b""[May18] Disable keyboard for the MRTK keyboard's inputfield""","b""Overview\r\n---\r\nThis sets the slider input field in the MRTK keyboard to have a keyboardType that isn't defined, which prevents a keyboard from popping up.\r\n\r\nThis PR does not address the situation where both the MRTK and the system keyboard pop up on other input fields. This only addresses the situation where the MRTK keyboard triggers the system keyboard itself.\r\n\r\nChanges\r\n---\r\n- Fixes: #1940\r\n"""
326664709,2168,"b'create HoloToolkit-Preview, moved SpectatorView there until OpenCV passes WACK'","b""Overview\r\n---\r\nWithout the SpectatorViewPlugin and associated OpenCV DLLs, WACK fails the PInvoke calls in the new SpectatorView feature. With these DLLs present, WACK fails due to APIs provided by zlib1.dll not being supported. zlib is being called by OpenCV_core341.dll\r\n\r\nThe recent change to set ExactSpelling in the SpectatorView DllImport attributes was causing the stated EntryPoint values to seemingly be ignored.\r\n\r\nChanges\r\n---\r\nCreate a new project folder called HoloToolkit-Preview -- An asset package called HoloToolkit-Unity-Preview-<version> will be released alongside the main package.\r\n\r\nChange the SpectatorView namespace to HoloToolkit.Unity.Preview.SpectatorView and move it into a new folder. Once it's dependencies are able to pass WACK, the Preview portion of the namespace will be removed and SpectatorView will be moved into the HoloToolkit project folder.\r\n\r\nAddresses: #2163 \r\nFixes: #2167 \r\n"""
326206776,2160,b'Fix for dragging of rotation handles of BoundBoxRig',"b'Current method of rotation is not consistent; the object is rotated different directions\r\ndepending on orientation of object.\r\n\r\nThis commit adds an option (rotateAroundPivot) which allows the user to rotate an object in a more natural way.\r\n\r\nTo avoid breaking existing usage, this new rotation is enabled via a bool in BoundingBoxRig.\r\n\r\nExisting behaviour:\r\n![boundingboxgizmoold](https://user-images.githubusercontent.com/4314853/40498945-6573e890-5f78-11e8-9268-0dd08701ffd2.gif)\r\n\r\nNew behaviour:\r\n![boundingboxgizmonew](https://user-images.githubusercontent.com/4314853/40498949-68375396-5f78-11e8-82d1-36e322d07808.gif)\r\n'"
326075047,2159,b'Fix for choosing closest grabbable object to grab',"b'Sort method was comparing distance of first object to itself, rather than second object.\r\n\r\nLet me know if I need to sign a contribution licence agreement.'"
325922822,2158,b'[May18] Updating tooltip label position.',b'Overview\r\n---\r\nUpdated the position of the labels in ToolTip example scene.\r\n![2018-05-23 17_01_04-unity 2017 2 1p2 64bit - tooltipexamples unity - mrtk-rc - universal windows p](https://user-images.githubusercontent.com/13754172/40458229-b9ccfb80-5eaf-11e8-975a-d0f66e1c1782.png)\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #2157 \r\n'
325903065,2156,b'new upgrade guide (#2062)',b'Updates to UpgradeGuide.md.\r\n\r\nFixes: #2062 .\r\n'
325858656,2155,b'[May18] Slightly adjusts the order Teleport unsupported checks happen',"b""Overview\r\n---\r\nPreviously, the fade manager was potentially (script execution order, etc) being checked in cases where it isn't supported anyway.\r\n\r\nChanges\r\n---\r\n- Fixes: #1790\r\n"""
325735753,2154,b'Fixes to links in SpectatorView README',b'Overview\r\n---\r\nA couple of the link in the SpectatorView README where old and now updated.\r\n'
325503223,2150,b'[May] Adding rendered line pointers',"b""Overview\r\n---\r\nMigrates the rendered line pointer from the old Feature-MultiPointerInputRefactor branch to make it work with the input system in master.\r\n\r\nThis only supports straight line pointing rays, and does not (yet) implement parabolic rays for pointing or teleporting.\r\n\r\nIt's mostly implemented on top of SimpleSinglePointerSelector, as that's the only place controller pointers are decided.\r\n\r\nBy default, the line is always white/gray. Colors can be defined for when the trigger is pulled or when an object is focused, if desired.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/40396398-b3a42356-5de1-11e8-9c7e-15353431e184.png)\r\n\r\nChanges\r\n---\r\n- Fixes: #1277, fixes #1257.\r\n"""
325502240,2149,b'move dialogenums.cs into the toolkit',"b'While testing a pre-RC release, found that the DialogEnums.cs was mistakenly in the Examples project.\r\n\r\nChanges\r\n---\r\nMove DialogEnums.cs from HoloToolkit-Examples to HoloToolkit.\r\n'"
325448832,2148,b'eliminate .net native pinvoke warnings',"b'Overview\r\n---\r\nThe SpectatorView feature references, but does not ship a companion dll (it must be built from https://github.com/microsoft/mixedrealitytoolkit and added to the project by the app developer). As a result, the .net native compiler (used for master builds) cannot resolve the pinvokes and reports warnings.\r\n\r\nChanges\r\n---\r\nTell the .net native compiler that it can trust the pinvoke calls by setting ExactSpelling=true in the DllImport attribute.\r\n\r\n- Fixes: #2126\r\n'"
325432014,2147,b'[May18] Lading page readme update: Added link',b'Overview\r\n---\r\nAdded link to the [MRTK building blocks article](https://medium.com/@dongyoonpark/open-source-building-blocks-for-windows-mixed-reality-experiences-hololens-mixedrealitytoolkit-28a0a16ebb61) to help developers.\r\n\r\n\r\nChanges\r\n---\r\n- Updated README file.\r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/tree/may18_dev_readme\r\n\r\n![2018-05-22 12_29_41-microsoft edge](https://user-images.githubusercontent.com/13754172/40385563-dba95f5e-5dbb-11e8-8b6c-db93b8e09dc9.png)\r\n\r\n'
325157492,2145,b'Removed the last of the speech input sources as monobehaviors.',"b""Overview\r\n---\r\n\r\n- Finished tiding up the input sources and made sure they're all pure c#\r\n- Filled out the IGazeProvider interface a bit more\r\n- Removed BaseInputSource\r\n- Added logic to instantiate a MixedRealityManager component on the main camera if one doesn't exist in the scene, but an instance was requested"""
325086799,2144,b'HostTransform for TwoHandManipulatable',b'## Overview\r\nUpdated TwoHandManipulatable to use `HostTransform` for `BoundingBoxRig`.'
325014560,2141,b'Integrate May 18 into July 18',b'Update july18_dev with latest changes in may18_dev\r\n'
325014009,2140,b'Integrate May 18 into June 18',b'Update june18_dev with latest changes in may18_dev\r\n'
325005267,2139,b'update MRTK version number',b'Overview\r\n---\r\nMay 18 is updating the version of MRTK to align with the Major.Minor version of the Unity 2017 LTS release.\r\n\r\nFuture releases from the master branch will increment the build number and leave the revision at 0 (ex: June 2018 will be 2017.4.1.0).\r\n\r\nChanges\r\n---\r\nSet the MRTK version to 2017.4.0.0\r\n\r\n- Fixes: #1859 \r\n'
324946947,2137,"b'Draft pass to update the InputSystem to use the ""Logical"" InputAction'","b'Draft pass to update the InputSystem to use the ""Logical"" InputAction instead of the old ""Physical"" InputType (which has been renamed to DeviceInputType for clarity)\r\n\r\n* Moved Device specific device classes / enums etc to new ""Definitions/Devices"" folder\r\n* Functions updated to use new type\r\n* Initialisers / validators updated as best guess\r\n\r\n# TODO - @StephenHodgson\r\n\r\n- [ ] Review InteractionDefiniton constructor\r\n- [ ] Review (TODOs) where references to InputAction are made\r\n- [ ] Review ""SupportsCapability"", if this is used in InputSystem, shouldn\'t it use Logical, NOT physical.\r\n'"
324868775,2136,b'IL2CPP SpectatorView Fixes',b'Overview\r\n---\r\n- Fixes for SpectatorView when building with IL2CPP.   This involved wrapping the ARKit Unity plugin to only compile on iOS and in editor.\r\n\r\nChanges\r\n---\r\n- Fixes #2125 \r\n- Fixes #2126 '
324822273,2135,b'Major Refactoring for Input System',"b""Overview\r\n---\r\nOrganized and moved quite a bit around.\r\n\r\n- Removed a bunch of mapping classes we probably won't use\r\n- Noticed we added pointer registration to the base input source, and I removed it again. That's not where we want to add that functionality but in a higher derived input source class that is specifically for spatial controllers that can have one or more or dynamically generated pointers.\r\n- I'm going to try and make sure all our input sources are pure c#\r\n- Refactored most to be except for InteractionInputSources and SpeechInputSource. SpeechInputSource will need a config profile to setup speech keywords and actions.\r\n- Moved the controller visualization classes and helpers out of the input system too\r\n- Ported a change to the SystemType to support structs"""
324656329,2134,b'Small tweaks to input system',b'Fixed some issues with querying Input Source Capabilities and updated Interaction Definition struct.\r\n'
324575890,2133,"b""Fix to allow in-Editor hands to properly support and report a 'grip' position""","b'Overview\r\n---\r\nFixes an issue introduced #1870 (& #2050 ) whereby the in-Editor hands no longer report their position, if data is requested through `TryGetGripPosition`\r\n\r\nChanges\r\n---\r\n- Fixes: #2131  .\r\n'"
324551905,2132,"b'Re-enable keyboard caret, move test scene'","b'Overview\r\n---\r\nThis change re-enables the caret in the MRTK keyboard. This MAY result in both the MRTK and System keyboards being displayed at the same time (#1940) -- we will continue to investigate this issue separately. Submitting this as not having a caret is a significant usability issue.\r\n\r\nThe keyboard test scene has been moved from Examples\\Input to Examples\\UX to avoid confusion, as that is where the scripts reside.\r\n\r\nFixes: #1978 \r\n'"
324532902,2129,b'MRTK/Standard Shader Improvements',b'Overview\r\n---\r\nIntegrating the latest work to improve the MRTK/Standard shader. Improvements include:\r\n\r\n- Support for non-D3D11 APIs (tested on iOS and Android devices using OpenGL ES and Metal)\r\n- Support for three hover lights (useful with IHMDs with multi-pointers)\r\n- Improved rounded corner algorithm\r\n- Closer match to the Unity/Standard shader\r\n- Improved shader based anti-aliasing support\r\n- Minor optimizations\r\n\r\n\r\n![aa](https://user-images.githubusercontent.com/13305729/40255071-b4227e3a-5a9a-11e8-9d01-5ff0b0a807c6.png)\r\n(Shader based anti-aliasing example.)'
324243457,2127,b'Ported some build fixes from dev branch',"b""Ported some build fixes and improvements from the dev branch.\r\n\r\n- Fixed an issue where users were unable to build without either specifying a wsa certificate, or building through the normal Unity Editor Build window because the certificate had not been generated yet. (Unity Build will generate one for you if one doesn't exist.)\r\n- Build Compatibility with 2018.1\r\n- Detailed log reporting of msbuild output.\r\n- Make quick options HoloLens target make sure to target HoloLens only. #1959\r\n- Removed some compile and build warnings.\r\n- Fixes #2124 and other conflicts with IL2CPP\r\n- Addressed some licensing issues from https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/1904#discussion_r186269929\r\n- bumped the min Windows SDK required to 17134"""
324224187,2122,b'[Dev] Updating scripts to support 2017.3',"b'Overview\r\n---\r\nPair PR of #2060, addressing https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2060#issuecomment-387520905.\r\n\r\nAdding support for changed 2017.3 APIs and removing warnings from deprecated APIs.\r\n'"
324223611,2121,b'[Dev] Set KeyboardAtlas as default ',"b""Overview\r\n---\r\nWithout this, symbols dependent on the spriteatlas don't load:\r\n![image](https://user-images.githubusercontent.com/3580640/40208945-5537beb6-59f1-11e8-9249-f64454a9ad7a.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/3580640/40208970-81c08f12-59f1-11e8-9f38-75940acaa4f3.png)\r\n\r\nThe atlas was un-defaulted in https://github.com/Microsoft/MixedRealityToolkit-Unity/commit/0033c67f59ca6b5703c892258354c977f2c7ee98.\r\n\r\nPair PR to #2120.\r\n\r\nChanges\r\n---\r\n- Related to: #1852\r\n\r\nThis PR also addresses https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/2029#discussion_r189128675"""
324223241,2120,b'[May18] Set KeyboardAtlas as default',"b""Overview\r\n---\r\nWithout this, symbols dependent on the spriteatlas don't load:\r\n![image](https://user-images.githubusercontent.com/3580640/40208945-5537beb6-59f1-11e8-9249-f64454a9ad7a.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/3580640/40208970-81c08f12-59f1-11e8-9f38-75940acaa4f3.png)\r\n\r\nThe atlas was un-defaulted in https://github.com/Microsoft/MixedRealityToolkit-Unity/commit/0033c67f59ca6b5703c892258354c977f2c7ee98.\r\n\r\nPair PR to #2121.\r\n\r\nChanges\r\n---\r\n- Fixes: #1852\r\n"""
324182307,2118,b'Feature multi pointer input refactor',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
324157845,2117,b'[May18] Surface Magnetism + Spatial Processing example scene - improvement',b'Overview\r\n---\r\n- Added transparent surface to make it easier to see the interaction with physical surfaces.\r\n- Assigned WireframeBlue material to the example scene. (it was not assigned)\r\n- [Updated landing page README for the discoverability\r\n](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/may18_dev_SurfaceMagnetism/README.md)\r\n![2018-05-17 13_28_16-mixedrealitytoolkit-unity_readme md at dev_working_branch_surfacemagnetism cre](https://user-images.githubusercontent.com/13754172/40202246-3ce07062-59d6-11e8-8f3b-fb279b719db9.png)\r\n\r\nChanges\r\n---\r\n- Updates to #2114  \r\n'
324157820,2116,b'[Dev] Surface Magnetism + Spatial Processing example scene - improvement',b'Overview\r\n---\r\n- Added transparent surface to make it easier to see the interaction with physical surfaces.\r\n- Assigned WireframeBlue material to the example scene. (it was not assigned)\r\n- [Updated landing page README for the discoverability](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/Dev_Working_Branch_SurfaceMagnetism/README.md)\r\n![2018-05-17 13_28_16-mixedrealitytoolkit-unity_readme md at dev_working_branch_surfacemagnetism cre](https://user-images.githubusercontent.com/13754172/40202234-31d1a038-59d6-11e8-9916-02aa43f7b51e.png)\r\n\r\n\r\nChanges\r\n---\r\n- Updates to #2113 \r\n'
324155931,2115,b'[May18] Put things into namespaces and cleaned up the classes',b'Overview\r\n---\r\nMoved classes into namespaces and misc cleanup & formatting.\r\n\r\nChanges\r\n---\r\n- Fixes: #1374\r\n'
324118165,2114,b'[Dev] Surface Magnetism + Spatial Processing example scene',"b'Overview\r\n---\r\nAdding an example scene which shows how to make objects smoothly align with the surfaces using SolverSurfaceMagnetism. Based on existing SpatialProcessing example scene, added a plane with MRTK logo with SolverSurfaceMagnetism script. \r\n\r\nDemo video\r\n---\r\nhttps://gfycat.com/PitifulRareKodiakbear\r\n\r\nChanges\r\n---\r\n- No code changes or updates. \r\n- Added new scene SpatialProcessingSurfaceMagnetism.unity\r\n\r\nReadme\r\n---\r\n[SpatialProcessingSurfaceMagnetism.md](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/may18_dev_SurfaceMagnetism/Assets/HoloToolkit-Examples/SpatialMapping/SpatialProcessingSurfaceMagnetism.md)\r\n'"
323878390,2113,b'[May18] Surface Magnetism + Spatial Processing example scene',"b'Overview\r\n---\r\nAdding an example scene which shows how to make objects smoothly align with the surfaces using SolverSurfaceMagnetism. Based on existing SpatialProcessing example scene, added a plane with MRTK logo with SolverSurfaceMagnetism script. \r\n\r\nDemo video\r\n---\r\nhttps://gfycat.com/PitifulRareKodiakbear\r\n\r\nChanges\r\n---\r\n- No code changes or updates. \r\n- Added new scene SpatialProcessingSurfaceMagnetism.unity\r\n\r\nReadme\r\n---\r\n[SpatialProcessingSurfaceMagnetism.md](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/may18_dev_SurfaceMagnetism/Assets/HoloToolkit-Examples/SpatialMapping/SpatialProcessingSurfaceMagnetism.md)\r\n'"
323830623,2112,b'More refactoring of Input Events',b'Overview\r\n---\r\nJust more refactoring of input events to make them more generic and clean up old stuff.\r\nAlso added loads more documentation'
323374299,2106,b'port #2105 to dev branch',b'Port bounding box handle exception prevention fix from may18_dev to the dev branch\r\n'
323363755,2105,b'Fix broken PR for BoundingBoxRigHandle exception',b'Overview\r\n---\r\nI made a mess of the last PR (#2086) .... please forgive.\r\n\r\nChanges\r\nClean up PR history. Addresses #2009 \r\n'
323333383,2104,b'fix #2103 - allow unsafe code',b'Add csc.* to fix Unity not enabling Allow Unsafe Code in the generated projects when building for the .NET Backend.\r\n\r\nTested on Unity versions:\r\n- 2017.1.3p4\r\n- 2017.2.1p2\r\n- 2017.4.3f1\r\n\r\nFixes: #2103\r\n'
322996961,2101,b'[dev] fix #917 and duplicate kbd backspace issues',"b'Bring fix (from may18_dev) for not being able to clear the input field when backspacing over the last character.\r\n\r\n- Fixes: #917, #1169, #1927, #1979 .\r\n'"
322992051,2100,b'fix backspace not clearing the last character in the field',"b'Directly set the text value to what is provided in the newText argument of Keyboard_OnTextUpdated.\r\n\r\nThe previous (broken) implementation failed to set the text value if newText was null or the empty string\r\n\r\n- Fixes: #917, #1169, #1927, #1979'"
322890152,2092,b'MRTK - vNext - Windows Mixed Reality Device Support',"b'Overview\r\n---\r\nAdding the initial Windows MR Device and Controller definitions, including some refactoring of core / input to accommodate.\r\n\r\nChanges\r\n---\r\n - Adds new WMRDevice (temp name, will rename for merge)\r\n-  Adds new Windows Mixed Reality Controller input source\r\n - Adds new InputDatum classes for managing input data from device.\r\n - Changed Controller struct to an Interface for better management\r\n\r\nTODO\r\n---\r\n\r\n- [ ] Add events for buttons / controllers / pointers / grip\r\n- [ ] Consolidate input events raised\r\n- [ ] Rationalise InputTypeDatum to meet current requirements (some old data taken is no longer needed)\r\n- [ ] Review 6DoF implementation\r\n- [ ] Test with fake controllers in scene\r\n- [ ] Wire up pointers -> @StephenHodgson \r\n- [ ] Rename Device name based on popular demand\r\n- [ ] Part the red sea \xf0\x9f\x8c\x8a \r\n\r\nNotes\r\n---\r\nFocusing on the ""Making it work"" for the moment.  Documentation and rationalization of the new functionality will happen before the final merge.\r\nSo please restrict comments to architecture / design for the moment please.'"
322448235,2088,b'[Dev] Updating README for the Examples/UX landing page',b'Overview\r\n---\r\nUpdating outdated links and images. Same content copied from the main landing page README.'
322447615,2087,b'[May18] Updating README for the Examples/UX landing page',b'Overview\r\n---\r\nUpdating outdated links and images. Same content copied from the main landing page README.\r\n'
322419805,2086,b'address BoundingBoxRigHandle nullreferenceexception',b'BoundingBoxRigHandle has a potential to encounter a NullReferenceException in OnSourceLost. This change avoids the exception as well as moving the call to eventData.Use inside the if block.\r\n\r\nThis MAY be related to what was reported in #2009. I was unable to reproduce the exact issue when I encountered this one.'
322394043,2084,b'[Dev] Removing unused Animation script & animation in HolographicButton prefab',b'Overview\r\n---\r\nRemoving unused Animation script & animation in HolographicButton prefab\r\n\r\nChanges\r\n---\r\n- Fixes: #2019 \r\n'
322393856,2083,b'[may18] Removing unused Animation script & animation in HolographicButton prefab',b'Overview\r\n---\r\nRemoving unused Animation script & animation in HolographicButton prefab\r\n\r\nChanges\r\n---\r\n- Fixes: #2019 \r\n'
322343264,2079,b'[Dev] Fixes SolverBodyLock potential null ref',"b""Overview\r\n---\r\nIf the tracked object isn't present, [line 65](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/master/Assets/HoloToolkit/Utilities/Scripts/Solvers/SolverBodyLock.cs#L65) null refs when trying to access transformTarget.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/39894547-12a60fac-545c-11e8-94bf-acef382e4fdd.png)\r\n\r\n#2078 for the dev branch.\r\n\r\nChanges\r\n---\r\n- Fixes: #2073\r\n"""
322337145,2078,b'[May18] Fixes SolverBodyLock potential null ref',"b""Overview\r\n---\r\nIf the tracked object isn't present, [line 65](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/master/Assets/HoloToolkit/Utilities/Scripts/Solvers/SolverBodyLock.cs#L65) null refs when trying to access transformTarget.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/39894547-12a60fac-545c-11e8-94bf-acef382e4fdd.png)\r\n\r\nDev branch PR is #2079\r\n\r\nChanges\r\n---\r\n- Fixes: #2073\r\n"""
322252237,2077,b'Addresses #MRTK-Unity:2068: private fields being assigned but not used',b'Overview\r\n---\r\n\r\n- Addresses #2068 - private fields being assigned but not used\r\n- Some minor whitespace cleanup that should have happened in original PR\r\n\r\nChanges\r\n---\r\n\r\n- wrapped recording related fields in #if Unity_IOS\r\n- removed lastError altogether\r\n- disabled compiler warning via pragma for fields with [SyncVar] or [SerializeField] attributes\r\n- Fixes: #2068 \r\n'
322097341,2076,b'SimpleSinglePointerSelector: connect pointer upon OnSourceDetected',b'Overview\r\n---\r\nBehaviour of `SimpleSinglePointerSelector` is now to set an activated pointing controller to be primary controller.\r\n\r\nChanges\r\n---\r\n- Addresses: #2066  .\r\n'
322092420,2075,b'dev branch version of the fix for #2053',b'bring the null reference exception fix from the may18 branch to dev\r\n\r\nFixes: #2053\r\n'
322040448,2072,b'handle case of no MotionControllerVisualizer singleton',b'Overview\r\n---\r\nEliminates NullReferenceException when using the Solver System if the MotionControllers prefab is not in the scene (typically attached to the camera)\r\n\r\n\r\nChanges\r\n---\r\n- Adds ConfirmInitialized() to Singleton<T> (back-port from Dev_Working_Branch)\r\n- Checks that the MotionControllerVisualizer has been initialized in ControllerFinder.OnEnable()\r\n\r\n- Fixes: #2053.'
321733586,2065,"b'fix #1887, dev branch'",b'Same change as may18_dev branch (replace <= with >).\r\n\r\n- Fixes: #1887.\r\n'
321717161,2064,"b'fix #1887, src lost had a backwards compare'",b'Changed <= to > when comparing _handCount against zero in OnSourceLost. This fixed our inability to return to ObservationTargeted and Observation button states\r\n\r\nChanges\r\n---\r\n- Fixes: #1887.\r\n'
321378031,2063,b'[May18] Port BoundingBox activated events from the dev branch',"b""Overview\r\n---\r\nDev_Working_Branch recently took a change to allow applications to handle when bounding boxes activate and deactivate.\r\n\r\nBringing this change into the 2017.4.0.0 (may '18) release\r\n\r\nChanges\r\n---\r\n- Fixes: #2037.\r\n"""
321353980,2061,b'Eliminate API conversion popup when loading in Unity 2017.1',"b""Add UNITY_2017_1_OR_NEWER blocks (and modify some existing 2017_2 blocks) to eliminate the API conversion popup when loading the MRTK in Unity 2017.1\r\n\r\nThere isn't an issue for this, it is an extension of #1921.\r\n"""
321289035,2060,b'[May18] Updating scripts to 2017.3',b'Overview\r\n---\r\nAdding support for changed 2017.3 APIs and removing warnings from deprecated APIs.\r\n\r\nChanges\r\n---\r\n- Fixes: #1921\r\n'
321270234,2059,b'Mrtk v next async build tools device portal',"b""Overview\r\n---\r\nPorted Build tools, async/await, device portal features.\r\n\r\nTODO:\r\n-  ~~Update Build Configuration in Build Deploy Window to get Unity's Player Settings.~~\r\n- [x] Restore Nuget for custom assembly definition generated projects\r\n\r\nEdit:\r\nNo way to get the current Build config from the native build window."""
321260306,2058,b'Fix headadjustment scene not displaying content',"b'At some point in late 2017, the camera object in the HeadsetAdjustment.unity scene lost the canvas that displayed the message and bounding box.\r\n\r\nThis change creates HeadsetAdjustmentScene.prefab and adds it as a child of the camera in the scene.\r\nFixes: #1935\r\n'"
320992172,2055,"b'fix headset adjustment scene (#1935), add prefab'","b'At some point in late 2017, the camera object in the HeadsetAdjustment.unity scene lost the canvas that displayed the message and bounding box.\r\n\r\nThis change creates HeadsetAdjustmentScene.prefab and adds it as a child of the camera in the scene.\r\nFixes: #1935\r\n'"
320989513,2054,"b'fix headset adjustment scene, add prefab'","b'At some point in late 2017, the camera object in the HeadsetAdjustment.unity scene lost the canvas that displayed the message and bounding box.\r\n\r\nThis change creates HeadsetAdjustmentScene.prefab and adds it as a child of the camera in the scene.\r\n\r\nFixes: #1935\r\n'"
320952477,2052,b'add materials/prefabs for other font weights',"b'In the dev branch, we recently took a change to the 3D Text prefabs to ensure the correct materials were assigned for the different weights of the selawik font.  \r\n\r\nMaster was missing these prefabs and related materials, so they were added and the prefabs moved into a Text folder (as exists in dev_working).\r\n\r\nVerified the prefabs work, post move, using the example scene.\r\n\r\nFixes: #2043 \r\n'"
320517589,2050,"b""'Cherry pick' of work previously committed to Dev_Working with PR #1870:""","b'Overview\r\n---\r\nAdding GripPosition and GripRotation to SupportedInputInfo and adding support to WSA input source and related classes, originally submitted in Dev_Working_Branch as PR #1870. Now \'cherry picked\' and submitted for the May18 release in the original HoloToolkit hierarchy.\r\n\r\nChanges\r\n---\r\n* added new input info types to SupportedInputInfo;\r\nPointerPosition and PointerRotation have equivalence to, and deprecate, Position and Rotation;\r\nGripPosition and GripRotation extend the bitfield\r\n\r\n* InteractionInputSource now reports support for grip position & rotation; replaced deprecated type id\'s with replacements\r\n\r\n* replacing use of deprecated SupportedInputInfo types in simple use cases\r\n\r\n* adding support for GripPosition/Rotation, and updating uses of now-deprecated Position/Rotation type enums, in CustomInputSource and DebugInteractionSourcePose\r\n\r\n* replaced ""summary""-tag comments with [Obsolete] attributes to denote changes to enum ids\r\n\r\n'"
320095970,2048,"b'[may18] Documentation updates: roadmap, contributing, coding guidelines'","b'Update roadmap to reflect how master is currently being managed as well as to add release cadence and branch management updates re: vNext\r\n\r\nContributing modified to describe how to find the correct dev branch for master.\r\n\r\nAdapt coding guidelines from vNext.\r\n\r\nCloses #2014, #2015, #2038 '"
320071825,2047,b'[Dev] Removing tabs',b'Overview\r\n---\r\nThis PR removes tabs and formats files which previously contained tabs.\r\n\r\nChanges\r\n---\r\n- Related to: #2045 .\r\n'
320069421,2046,b'[May] Removing tabs and formatting',b'Overview\r\n---\r\nThis PR removes tabs and formats files which previously contained tabs.\r\n\r\nChanges\r\n---\r\n- Fixes: #2045 .\r\n'
319761747,2039,b'Updated 3DTextPrefab materials',b'## Overview\r\nFour of the 3DTextPrefabs had no material for their MeshRenderer.\r\n- Selawik Bold\r\n- Selawik Light\r\n- Selawik Semibold\r\n- Selawik Semilight'
319714746,2036,b'[Dev] Cursor light fix (and other minor fixes)',b'Overview\r\n---\r\nSome minor updates that were found while updating the Academy courses to the most recent Toolkit release.\r\n\r\nPartner PR to #2035.\r\n\r\nChanges\r\n---\r\n- Fixes: #1983.\r\n'
319714346,2035,b'[May18] Cursor light fix (and other minor fixes)',b'Overview\r\n---\r\nSome minor updates that were found while updating the Academy courses to the most recent Toolkit release.\r\n\r\nPartner PR to #2036.\r\n\r\nChanges\r\n---\r\n- Fixes: #1983.\r\n'
319331064,2030,b'[may18] Readme updates: Landing page & UX',b'Overview\r\n---\r\n**Same updates on Dev branch = #2029. Only folder names are different(HoloToolkit vs MixedRealityToolkit)**\r\nUpdating outdated readme page for UX. Separated readme for TextPrefab. Added links to the Spatial Mapping/Processing/Understanding example scenes on the landing page to improve the discoverability. Added thumbnail images for these example scenes.\r\n\r\nChanges\r\n---\r\n- Updated [README.MD](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/Dev_Working_Branch_readme_images/README.md) on the landing page.\r\n![2018-05-01 14_13_02-cre8ivepark_mixedrealitytoolkit-unity at dev_working_branch_readme_images](https://user-images.githubusercontent.com/13754172/39494058-cd40062a-4d49-11e8-874e-ee4917f98d9d.png)\r\n\r\n- Updated [README.MD](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/tree/Dev_Working_Branch_readme_images/Assets/MixedRealityToolkit/UX) in UX folder.\r\n- Added new [README_TextPrefab.MD](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/Dev_Working_Branch_readme_images/Assets/MixedRealityToolkit/UX/README_TextPrefab.md) in UX folder\r\n\r\n'
319330325,2029,b'[Dev] Readme updates: Landing page & UX ',b'Overview\r\n---\r\nUpdating outdated readme page for UX. Separated readme for TextPrefab. Added links to the Spatial Mapping/Processing/Understanding example scenes on the landing page to improve the discoverability. Added thumbnail images for these example scenes.\r\n\r\nChanges\r\n---\r\n- Updated [README.MD](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/Dev_Working_Branch_readme_images/README.md) on the landing page.\r\n![2018-05-01 14_13_02-cre8ivepark_mixedrealitytoolkit-unity at dev_working_branch_readme_images](https://user-images.githubusercontent.com/13754172/39494058-cd40062a-4d49-11e8-874e-ee4917f98d9d.png)\r\n\r\n- Updated [README.MD](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/tree/Dev_Working_Branch_readme_images/Assets/MixedRealityToolkit/UX) in UX folder.\r\n- Added new [README_TextPrefab.MD](https://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/Dev_Working_Branch_readme_images/Assets/MixedRealityToolkit/UX/README_TextPrefab.md) in UX folder\r\n\r\n'
319319480,2028,b'Breaking circular references in ported input system.',b'TODO:\r\n- [x] Fix InputManager instantiation in MixedRealityManager.'
319030229,2027,b'[may18] Update SetManipulationMode to public in TwoHandManipulatable',"b""Overview\r\n---\r\nUpdate private SetManipulationMode to public in TwoHandManipulatable.cs. This allows the user change manipulation mode option in real-time. (possibly through menu buttons or voice command) Currently, it is only supported in the editor's inspector panel.\r\n![2018-04-20 14_27_20-unity 2017 2 1p2 64bit - uxdemoscene unity - mrtk-demo - universal windows pla](https://user-images.githubusercontent.com/13754172/39074623-055d4fb4-44a7-11e8-9219-c0a0f1d7687d.png)\r\n\r\nSeparated enum TwoHandManipulatableMode into a new file.\r\n\r\nFYI, supported manipulation mode:\r\n- Scale\r\n- Rotate\r\n- Move, Scale\r\n- Rotate, Scale\r\n- Move, Rotate, Scale\r\n\r\nChanges\r\n---\r\n- Fixes: #1994 \r\n"""
318907449,2026,b'More custom assembly updates.',"b""Seeing as custom assembly code doesn't automatically exclude editor classes, and we need to define our own, I renamed the editor folder to inspectors.\r\n\r\nAlso fixed some issues with standalone compilation.\r\n\r\nPorted over settings enforcement script and updated it to use .net standard 2, but not complain if users target the broader .net 4.x runtime.\r\n\r\nSee #1923"""
318728111,2025,b'Fixed Compiling with custom assembly defs',b'- Added an editor assembly def in Input System.\r\n- Cleaned up build warnings from ControllerPointerOptions\r\n- Misc cleanup tasks\r\n'
318521759,2024,b'Allow remote mapping to UWP / Immersive Windows MR apps',b'Extend the RemoteMeshTarget so it can not only be used in the Unity Editor to receive a mesh from a Hololens but also within UWP Immersive Windows Mixed Reality applications. Also allow the saving and loading of a mesh file from an UWP app.\r\n'
318478962,2023,b'2018.1.0f1 / IL2CPP update',b'Overview\r\n---\r\nTested and updated for 2018.1.0f1 against IL2CPP\r\nResolved build errors and warnings\r\n\r\n'
318064390,2020,b'Some cleanup to conform to the coding guidelines.',b''
317511052,2011,b'Adding events for the BoundingBoxRig script',b'Overview\r\n---\r\nThis adds two events to the `BoundingBoxRig` script that can be listened to know when the rig is either activated or deactivated by the user. This follows the proposal made in #2004.\r\n\r\nChanges\r\n---\r\n- Adding `BoundingBoxRig.Activated` and `BoundingBoxRig.Deactivated` events to the `BoundingBoxRig` script.\r\n- Updating the example documentation to mention those events.\r\n'
317338984,2008,b'[may18] remove required component from fpsdisplay.cs (#2006)',b'Remove the unneeded RequiredComponent attribute that force adds a TextMesh.\r\n\r\nFixes: #2006\r\n'
317331577,2007,"b'[dev_working] fix fpsdisplay perf, add comments #2005'",b'Bring changes fpsdisplay.cs from the may18_dev branch:\r\n\r\n- Fix perf issue caused by repeated calls to InitBuffer (#1993)\r\n- Add documentation comments\r\n- Add explicit range to frameRange field\r\n\r\nAlso removed the RequiredComponent attribute as TextMesh is not actually a requirement.\r\n\r\nFixes: #2005 .\r\n'
317080875,2003,b'[May18] Spatial Understanding example scene UX refinement',"b""Overview\r\n---\r\nSpatial Understanding example scene UX refinement (SpatialUnderstandingExample.unity)\r\n- Updated material colors to make it similar to Fragments' visual mesh\r\n- Added MRTK logo + scene title\r\n- Refined app state text with smooth tag-along \r\n- Updated fonts to Selawik\r\n\r\nChanges\r\n---\r\nScene and material updates. No code changes.\r\n\r\nBefore & after screenshots (MRC picture is somewhat different from actual visual)\r\n![mrtk_spatialunderstanding](https://user-images.githubusercontent.com/13754172/39168802-1aaea82c-474a-11e8-83d0-8f75bac4630c.jpg)\r\n \r\n"""
317018776,2002,b'Updated the Mixed Reality manager to now also support runtime Managers.',"b'Overview\r\n---\r\nUpdated the Mixed Reality manager to now also support runtime Managers.  Main difference is that design time managers are unique (e.g. InputSystemManager) whereas there maybe many runtime managers.\r\nAlso added support for the Disable and Enable MonoBehaviour functions.\r\n\r\nSee ""/External/Documentation/MixedRealityManagerConstruction.md"" for more details\r\n\r\nAlso added some simple Unit Tests (WIP) for the MR Manager, to test DI implementation and use.\r\n\r\nChanges\r\n---\r\n- Fixes: Resolved some null reference issues when initialising\r\n- Fixes: Singleton pattern updated in manager to be Unit Test Friendly\r\n- Additions: Assembly refs added for Unit Testing only atm.  For further review.\r\n\r\nTODO\r\n---\r\n- [ ] Review new Input System components for manager adoption (design and runtime)\r\n- [ ] Evolve (still much to do )\r\n'"
317018704,2001,b'Remove unused box colliders from example scene button prefabs',b'There are two unused colliders on Button.prefab and ToggleButton.prefab from the Examples\\UX\\Prefabs folder. Similar buttons in the main HoloToolkit\\UX folder do not have these sub-object colliders.\r\n\r\nRemoving them to reduce confusion.\r\n\r\nFixes: #1969 .\r\n'
316960101,2000,b'may18_dev -> june18_dev',b'Keeping the june18_dev branch up to date\r\n'
316955842,1999,b'[Dev_Working] Set Default Spatial Mapping Layer in the Project Settings Dialog',b'Port of the may18_dev branch change #1991 to Dev_Working_Branch.\r\n\r\nThis fixes #1998'
316492324,1996,b'Mrtk version next coding standards typo',b'Overview\r\n---\r\nFixed the typos raised by @keveleigh\r\n\r\nChanges\r\n---\r\n- Fixes: typographic errors when viewing the rings of Saturn through an elliptical plane\r\n'
316491807,1995,b'Ported over the Build tools to vNext',"b'Overview\r\n---\r\nPorted over the Build tools to vNext (as I was fed up of switching project)\r\nMight be a few too many things pulled over, but will clean up once we know what makes a project.\r\n\r\nLikely this will be rationalised later once we understand what makes a vNext project.\r\n\r\nChanges\r\n---\r\n- Added BuildAndDeploy folder and assets\r\n- Added Build Attributes\r\n- Added Utilities editor functions and some MRDL editor base\r\n\r\nTODO\r\n---\r\nOnce stable, rationalisation of the build tools and editor base\r\n'"
316366580,1993,"b'fix fpsdisplay perf, add comments and frame range'",b'FpsDisplay was repeatedly fetching components if the user did not use both a TextMesh and a uGui Text component. Fixed by adding Start() and calling InitBuffer there instead of in Update.\r\n\r\nAlso added a range (1-300) to the number of frames used to calculate FPS and some documentation comments.\r\n\r\nFixes: #1913 .\r\n'
316061955,1991,b'add option to set default spatial mapping layer',"b'This change adds a checkbox (selected by default) to the Apply Mixed Reality Project Settings dialog.\r\n\r\nWhen selected, layer 31 is checked to see if it is in use (with a name other than Spatial Mapping) and if not, sets the layer name to ""Spatial Mapping"". If we are able to set the layer, the Spatial Perception capability is also set (setting the layer implies it will be used).\r\n\r\nIf we fail to set the layer (the preparation code fails, or layer 31 has a name that implies it is in use, a message is displayed stating that we failed and that the user should check Tags & Layers in the inspector.\r\n\r\n- Fixes: #1443.\r\n- Fixes: #1770'"
316028427,1990,b'[Dev] Cleanup tooltip scene',"b""Overview\r\n---\r\nMostly, this turns off automatic material import for TheModule.fbx and converts all already imported materials to use the Toolkit's Standard shader.\r\n\r\nAlso, some settings were not properly saved/updated in the prefab/scene files."""
316028281,1989,b'[May] Cleanup tooltip scene',"b""Overview\r\n---\r\nThe tooltip scene and components were missing many meta files. The scene didn't run.\r\n\r\nAdditionally, a change to make the Tooltip's target GameObject private with an accessor removed it from the Inspector. Adding [SerializeField] fixed that. \r\n\r\nChanges\r\n---\r\n- https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/1936#issuecomment-382555565\r\n"""
315957213,1988,b'Wack version fix',"b'Overview\r\n---\r\nIn the current Master build, the Version set in the ProjectSettngs file for new projects breaks WACK, as MS demands the final value on the app version to be 0.\r\n\r\n\r\nChanges\r\n---\r\nChanges version numbers of 2017.2.1 in the Project Settings asset\r\nto 2017.2.0.0\r\n'"
315953679,1987,b'Wack version fix',"b'Overview\r\n---\r\nIn the current Master build, the Version set in the ProjectSettngs file for new projects breaks WACK, as MS demands the final value on the app version to be 0.\r\n\r\n\r\nChanges\r\n---\r\nChanges version numbers of 2017.2.1 in the Project Settings asset\r\nto 2017.2.0.0\r\n'"
315658008,1986,b'[Dev] Removed scene from editor build settings',b'Overview\r\n---\r\nRemoved scene from editor build settings. Incorrectly added in #1839.\r\n\r\n'
315651800,1985,b'master -> june18_dev',b'this change updates the june18_dev branch with the released version of 2017.2.1.4\r\n'
315651567,1984,b'master -> may18_dev',b'this updates the may18_dev branch with the released version of 2017.2.1.4'
315630602,1982,b'A few tidy up tasks',"b'Overview\r\n---\r\nA few tidy up tasks post the initial merge of the Input System.  No code changes\r\n\r\n\r\nChanges\r\n---\r\n* Prefixing MR interfaces and managers with ""MixedReality"" to match other base components\r\n* Restructuring the location of some new files / interfaces based on the standards\r\n* Updating .Meta files to use the MRToolkit icon\r\n'"
315581249,1981,b'Integrate v2017.2.1.4 changes into master',b'This change is to merge changes for the 2017.2.1.4 release from Patch4_Dev into master.\r\n\r\nFull list of work can be found on the [project page](https://github.com/Microsoft/MixedRealityToolkit-Unity/projects/7)\r\n'
315492019,1976,"b'Update to the Coding Standards doc, including Enum standards.'","b'Update to the Coding Standards doc, including Enum standards.\r\n\r\nvNext Sprint 1 #1903'"
315482852,1975,b'Mrtk v next input and utilities debug clean up',"b'Overview\r\n---\r\nInitial patches and changes to @StephenHodgson s updates, mostly cosmetic for the moment.\r\n'"
315373077,1974,b'Add a function that keeps the same distance from cursor to the camera.',"b""Overview\r\n---\r\nSometimes the target is too far away to make the cursor too small to see,and sometimes we want the cursor size to remain the same,that means keeps the same distance from the camera.\r\nSo I modified the Cursor. cs, added a bool variable 'IsCameraCursorDistance', and renamed the 'SurfaceCursorDistance' to 'CursorDistance', the 'IsCameraCursorDistance' control the 'CursorDistance' means the distance is from the Cursor to hit or  camera,the former retain the original function, and the latter can keep the Cursor size unchanged.\r\nThen in the method UpdateCursorTransform(),I will calculate the cursor position based on 'IsCameraCursorDistance' and 'CursorDistance'.\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
315310207,1973,b'Patch4 dev',"b""Overview\r\n---\r\nSometimes the target is too far away to make the cursor too small to see,and sometimes we want the cursor size to remain the same.\r\nSo I modified the Cursor. cs, added a bool variable 'IsCameraCursorDistance', and renamed the 'SurfaceCursorDistance' to 'CursorDistance', the 'IsCameraCursorDistance' control the 'CursorDistance' means the distance is from the Cursor to hit or  camera,the former retain the original function, and the latter can keep the Cursor size unchanged.\r\nThen in the method UpdateCursorTransform(),I will calculate the cursor position based on 'IsCameraCursorDistance' and 'CursorDistance'.\r\n\r\nChanges\r\n---\r\n- Fixes: #.\r\n"""
315281183,1972,b'[Patch4] Revert misattributed license headers',"b'Overview\r\n---\r\nReverts misattributed license headers. Also, removes some copyright headers that were added incorrectly.\r\n\r\nChanges\r\n---\r\n- Fixes: #1931 for the next patch release.\r\n'"
315281174,1971,b'[Dev] Revert misattributed license headers',"b'Overview\r\n---\r\nReverts misattributed license headers. Also, removes some copyright headers that were added incorrectly.\r\n\r\nChanges\r\n---\r\n- Fixes: #1931 in dev.'"
315270824,1970,b'[Patch4] Disable two hand manipulation for Unity versions prior to 2017.2',"b'Disables the logic in OnTwoHandManipulationStarted, OnTwoHandManipulationEnded and OnTwoHandManipulationUpdated for Unity 2017.1 and older.\r\n\r\nAlso adds a message in the test scene noting the above.\r\n\r\nFixes: #1967 .\r\n'"
315081648,1966,b'vNext base input and utilities',b'First pass a porting over the initial Input System from the multi pointer refactor.\r\n\r\nProbably needs a bit more cleaning up. @SimonDarksideJ has [an open PR for a few things](https://github.com/StephenHodgson/MixedRealityToolkit-Unity/pull/10) over on my fork.'
314843344,1963,b'[2017.2.1.4] Fix building on Unity 5.6 and 2017.1',"b'There have been a number of instances of APIs used in recent master and Patch4_Dev branch checkins that are not supported on Unity 5.6 and 2017.1.  Add #if version checks around them, and where appropriate use a preprocessor warning directive to alert users to the functionality limitations.\r\n\r\n- Fixes: #1958 \r\n- Fixes: #1960 \r\n- Fixes: #1962\r\n- Fixes: #1964'"
314255481,1954,b'Fix crash (null reference exception) when air-tapping objects',b'Add protections for null in FocusMananger and InputManager based on dev_working_branch changes from #1896.\r\n\r\nThis issue was found on 2017.2.1.4 RC and is needed for the release.\r\n\r\nFixes: #1949 .\r\n'
314177338,1953,b'Patch4 build window fix',b'Overview\r\n---\r\nAdded ability to build out of the box without creating a wsa cert.\r\n\r\nChanges\r\n---\r\n- Fixes: #1951\r\n'
313782036,1946,b'Trim end of keywords',"b'\r\nFix so recognized text ""example_keyword"" and keyword added with SpeechInputSource ""example_keyword "" (notice the extra space) are treated equally\r\nAppending an extra space when adding keywords is an easy to make mistake and also easy to miss while debugging, causes events not being raised even though keyword is correctly recognized '"
313517102,1944,b'May18 -> June 18',b'Merge latest may18_dev to june18_dev'
313516909,1943,b'Patch4 -> may 18',b'integrate latest patch4 into may18_dev'
313516386,1942,b'master -> patch4',b'master had an accidental merge a little while back. bringing it forward to Patch4 for the test release'
313025400,1938,b'May18 dev -> June18 dev',b'Update june18_dev with latest may18_dev changes\r\n'
313024880,1937,b'Patch4 dev -> may18_dev',b'Update may18_dev with recent changes in patch4_dev\r\n'
312989559,1936,b'[Dev\xe2\x86\x92master]\xc2\xa0ToolTip ',b'![mrtk_tooltip](https://user-images.githubusercontent.com/13754172/37489229-34b53d18-2854-11e8-9d0d-9835041f24b6.jpg)\r\n\r\nOverview\r\n---\r\nTooltips were created to provide floating text panels that are connected to a point on a gameobject and give information about the object. they can be made to appear under different conditions. The Tooltip Examples project was originally created in MRDL and was ported to MRTK_Dev branch.\r\n\r\nTarget Branch\r\n---\r\nThis PR is based on Patch4_Dev branch. Target branch is may18_dev for May release.\r\n\r\nChanges\r\n---\r\nThis PR implements changes involving changing MRTK namespace features to HoloToolkit namespace features.\r\n'
312750568,1934,b'Update GettingStarted.md',b'Overview\r\n---\r\nAdded Steps to set run time scripting version for 4.x compatibility.\r\n\r\nChanges\r\n---\r\n- Fixes: #1923 \r\n'
312705467,1932,b'Update june18_dev to may18_dev',b'keeping dev branches in sync'
312662679,1930,b'[Dev\xe2\x86\x92master] Input test scene updates',b'Overview\r\n---\r\nBringing scene updates from Dev branch. Visual (layout & material) updates. No code changes.\r\nUpdated FloorMaterial to have a clear visualization of the borders. \r\n\r\n\r\nBefore & After images\r\n---\r\n![35454005-18cbd538-0281-11e8-9419-63455f4e120b](https://user-images.githubusercontent.com/13754172/38519264-1eb09aa4-3bf4-11e8-830c-58d47947cc53.jpg)\r\n\r\n![35420147-b6e9a7d6-01f0-11e8-9f11-5acf9c4bde56](https://user-images.githubusercontent.com/13754172/38519268-21be7842-3bf4-11e8-8645-248c6848697c.jpg)\r\n\r\nUpdated Floor material with MRTK/Standard shader\r\n![2018-04-09 12_43_05-unity 2017 2 1p2 64bit - motioncontrollertest unity - cre8ivepark - universal](https://user-images.githubusercontent.com/13754172/38519275-28bc1320-3bf4-11e8-9f93-e38943685ca6.png)\r\n'
312347514,1922,b'Dev working branch',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
311757442,1920,b'Mrtk version next - mixed reality manager',"b""Overview\r\n---\r\nFirst pass on the Mixed Reality manager and it's accompanying MixedRealityManagerConfiguration scriptable configuration system. (a bit blank as there aren't any managers yet)\r\n\r\nStill ToDo\r\n---\r\n\r\n- [x] Update scripts to documentation standards\r\n- [x] Review accompanying documentation\r\n- [ ] Write Unit tests for manager (@StephenHodgson  has offered to help post merge)\r\n\r\nChanges\r\n---\r\n- Introduces new MixedRealityManager - (_Core\\Managers)\r\n- Introduces definitions for creating manager classes (IManager / BaseManager)\r\nNeed to work with Stephen about the Manager Abstraction through interfaces.\r\n- Adds documentation for creating managers \r\n(initial draft, will be updated following the addition of some :D )\r\n- Updates Script icons (image may be replaced by @cre8ivepark )\r\n- Edited .Meta files in project to remove unwanted Unity stuff (Unity Free version and creation date)\r\n- New System base interfaces created (samples) for Boundary and InputSystem.  These identify the generic way the toolkit references features (_Core\\Interfaces)\r\n- Added sample implementations for Boundary and Input systems (InputSystem - Boundary)\r\n- Added an event to allow active profile changing, informing managers when configuration changes.  Note, configuration properties cannot be updated at runtime, only the entire profile at the present.\r\n\r\n*Note, this isn't the final manager by a long shot.  Through working with new managers, this will likely evolve in Sprint 1 and beyond.  Especially the Configuration Profile.\r\n\r\nDiscussion Point\r\n---\r\nI have two example implementations for Manager construction\r\n\r\n1. Base Manager registers all events and exposes virtual events that are overridden / consumed by child managers  (BaseManager / MixedRealityInputManager)\r\n\r\n2. The child manager registers all events independently (MixedRealityBoundarySystem)\r\n\r\nWhich is the preferred path? """
311720688,1919,b'[Patch4] fix #1827 (disabled state handling)',"b'- changed if (enabled) -> if (enabled && !m_disabled) in OnInputDown, OnInputUp and OnInputClicked.\r\n- added encapsulation of serialized fields per vNext coding style guidelines\r\n\r\nFixes: #1827.\r\n'"
311711049,1918,b'[Dev\xe2\x86\x92master] Dialog & Progress UI control',b'![mrtk_dialogprogress](https://user-images.githubusercontent.com/13754172/38383047-4a489a0e-38c0-11e8-9955-be458175fca8.jpg)\r\n\r\n\r\nOverview\r\n---\r\nThis brings Dialog & Progress UI control from Dev to master branch.\r\n\r\nTest scenes\r\n---\r\n- Assets/HoloToolkit-Examples/UX/Scenes/DialogsExample.unity\r\n- Assets/HoloToolkit-Examples/UX/Scenes/ProgressExample.unity\r\n'
311705046,1917,b'Update May18_Dev with latest Patch4_Dev changes',b'Keeping the next-next release up to date.\r\n'
311682492,1916,b'What have the Romans ever done for us?',b'Except for:\r\n\r\n* Roads\r\n* Health\r\n[x] Massive folder reorgs\r\n[x] Pending namespace changes\r\n* Peace?\r\n\r\nPah'
311439794,1914,b'[Dev\xe2\x86\x92master] Bounding Box and App Bar',b'![mrtk_appbar_boundingbox_examplescene](https://user-images.githubusercontent.com/13754172/38342211-d5fc9bfc-3831-11e8-803d-a48abf73138e.jpg)\r\n\r\nOverview\r\n---\r\nMigration to master. Bounding Box & App Bar with an example scene.\r\n\r\nRequires\r\n---\r\nExample scene uses TwoHandManipulatable script. #1849 should be merged first.\r\nIncluded bug fix for AppBar highlighting #1895 \r\n\r\nTest scene\r\n---\r\nAssets/HoloToolkit-Examples/UX/Scenes/BoundingBoxGizmoExample.unity'
311131980,1911,b'Improved SyncObjectSpawner and fix connectOnAwake bug (@TheYoxy helped)',"b'Overview\r\nImproved SyncObjectSpawner by adding more generic method to spawn, search and delete.\r\nFix a bug when connectOnAwake was to false and was still trying to connect on awake.\r\n\r\nContributors\r\n- TheYoxy\r\n- Upd4ting\r\n'"
310980423,1909,b'Write documentation guidelines document',"b'Write documentation guidelines file based on the v.Next Documentation proposal (#1814). Add steps (and links to the Coding/Documentation guidelines) in the Implementation section of CONTRIBUTING,md to improve process clarity and visibility.\r\n\r\n- Fixes: #1893.\r\n'"
310941520,1908,b'Removed a warning when the radial dot is set to inactive',"b""Overview\r\nWhen a radial button's selected state is off, the radialDot gameObject is set to inactive. When this happens the widget on the gameObject removes itself from the list of widgets in the Interactive and causes the warning. This is expected behavior, when a gameObject with a widget should not receive updates from Interactive.\r\n\r\nChanges\r\nMoved the widget from the RadialDot to another gameObject (Outline) that does not become inactive.\r\n- Fixes: #1857.\r\n"""
310773262,1906,b'Mrtk version next internal defintions',b'Overview\r\n---\r\nInitial check-in of new definitions for MRTK-vNext\r\n\r\n- Target Sprint 1: #1903  \r\n'
310392618,1904,b'Async Building and Windows Device Portal Commands',"b""Overview\r\n---\r\n- Added a heavily edited version of the [Unity Async/Await Utilities](https://github.com/svermeulen/Unity3dAsyncAwaitUtil) by @svermeulen.  It has the same license type as the project (MIT)\r\n- Fixed an issue where users were unable to build without either specifying a wsa certificate, or building through the normal Unity Editor Build window because the certificate had not been generated yet.  (Unity Build will generate one for you if one doesn't exist.)\r\n- Adds async building of appx project. Typical Unity Player Building still blocks the editor, but APPX building and installing happens asynchronously.\r\n- Did a bit of cleanup for coding guidelines and renamed a few classes for clarity.\r\n- Added ability to build appx from command line argument.\r\n- Added `EditorAssemblyReloadManager` to control reloading assemblies in the editor so running async tasks don't get cancelled prematurely.\r\n- Added StartAsyncProcess extension methods.\r\n- Added Rest Utililities.\r\n- Updated data structures for Windows Device Portal.\r\n- Fixes #1904 \r\n- Moved the windows device portal classes out of the editor so any application can use it at runtime.\r\n- Fixes #2124 and other conflicts with IL2CPP builds where the toolkit has implemented some apis from mscorlib.\r\n\r\nTODO\r\n---\r\n- [x] Update Device Portal with new async Rest calls.\r\n- [x] A bit of cleanup and renaming a few async methods with Async suffix.\r\n- [x] Fix a issue with device connections when prev paired device is unreachable the string name is lost and it's impossible to select it again in the drop down.\r\n- [x] Add all the documentation to the public PME's in the PR.\r\n- [x] Fix an issue with CSRF Token refreshing.\r\n- [x] Fix an issue with incrementing versions.\r\n- [x] Compatibility with 2018.1\r\n- [x] Make quick options HoloLens target make sure to target HoloLens only. #1959\r\n- [x] Fixes #2119 \r\n\r\nBreaking Changes\r\n---\r\n- Removed backwards compatibility to Visual Studio 2015.\r\n- Changed command line tool hook for VSO build task.\r\n- Removed unused `XDEGuestLocator.cs`\r\n"""
309973465,1897,b'Misc Cleanup',"b""Overview\r\n---\r\nRemoved compile warnings and cleaned up the files I touched to reflect the coding guidelines.\r\n\r\nBreaking Changes\r\n---\r\n- Moved some public enums and a struct into their own files.\r\n\r\nTODO\r\n---\r\n- [ ] Go through prefabs and examples to make sure there aren't any missing references."""
309962529,1896,b'Fixed null ref when pointer data does not have a selected object.',"b""Overview\r\n---\r\nUpdated Focus Manager `TryGetFocusedObject` to make sure we set the pointer data's selected object with the focus details.\r\n\r\nAlso added a null check in the Input Manager's `RaiseInputUp` and `RaiseInputDown` methods before we execute the pointer handlers for the `UnityEngine.Graphic` objects.\r\n\r\nChanges\r\n---\r\n- Fixes: #1872\r\n"""
309937453,1895,b'App Bar highlighted state bug fix #1877',"b""Overview\r\n---\r\nApp Bar's Done/Hide menu button stays highlighted once you enter/exit the adjust mode.\r\nIn Show() and Hide(), added code for disabling/enabling the render of the highlighting mesh.\r\n\r\nChanges\r\n---\r\n- Fixes: #1877 \r\n\r\n![2018-03-29 16_37_36-unity 2017 2 1p2 64bit - boundingboxgizmoexample unity - mrtk-original - unive](https://user-images.githubusercontent.com/13754172/38118611-bbcb8768-3370-11e8-8c30-55bae01040f9.png)\r\n\r\n![2018-03-29 16_37_53-unity 2017 2 1p2 64bit - boundingboxgizmoexample unity - mrtk-original - unive](https://user-images.githubusercontent.com/13754172/38118610-bbb75220-3370-11e8-8edb-7c9487f2c540.png)\r\n"""
309917282,1894,b'Automate building of MRTK artifacts',"b""Adds scripts and package definitions for automating creation of artifacts for the project.\r\n\r\nCreates three NuGet Packages:\r\n* Microsoft.MixedReality.Toolkit\r\n* Microsoft.MixedReality.Toolkit.Sharing\r\n* Microsoft.MixedReality.Toolkit.Examples\r\n\r\nCreates two Unity Packages:\r\n* Microsoft.MixedReality.Toolkit\r\n* Microsoft.MixedReality.Toolkit.Examples\r\n\r\nNote: Sharing is split out because it has large dependencies on things outside of the repo. Over time we can split out more of the library since dependencies in NuGet are easy and work well. I know this is something other customers have wanted. We could also depend on the NewtonSoft.Json NuGet package instead of embedding the DLL into the project, for example. If you're interested in NuGet for Unity, checkout [NuGetForUnity](https://github.com/GlitchEnzo/NuGetForUnity/releases).\r\n\r\nOpen, of course, for suggestions and questions.\r\n"""
309807070,1892,b'Update CustomInputSource.cs',b'Enable Navigation Gesture emulation using the mouse. Until know only the Manipulation Gesture would work.\r\n\r\nOverview\r\n---\r\nEnables the navigation Gesture. \r\nI measured and compared its behavior to the Hololens emulator available in Unity when an xbox controller is connected.\r\n\r\nChanges\r\n---\r\nOnly adds the navigation gestuure functionality'
309028146,1886,"b'Replace ""IsChildOf"" test with exact parent test'","b'The previous test using ""IsChildOf"" did process deep children also, that are not supposed to be considered for layout purposes in this case.\r\nAn additional test for ""transform.parent == null"" is necessary to a) allow transform.parent.gameObject to evaluate and b) to account for nodes that are now in the root of the scene hierarchy.\r\n\r\nOverview\r\n---\r\n`!NodeList[i].transform.IsChildOf(this.transform)`\r\ndid also consider DeepChildren to be proper children, for layout purposes we only want direct children.\r\n\r\n`NodeList[i].transform.parent==null`\r\nchecks if a GameObject is in the root of the scene. If so, then it should not participate in the layout of ObjectCollection, also a subsequent test to compare the parent would fail.\r\n\r\n`!(NodeList[i].transform.parent.gameObject==this.gameObject)`\r\nis an exact test for the parent relationship not existing anymore.\r\n\r\nChanges\r\n---\r\n- Fixes: #1885 related to #1868\r\n'"
308872542,1884,b'Feature: SpectatorView integration',"b'Overview\r\n---\r\nThis is an implementation of Spectator View that takes advantage of the ARKit for iOS and ARKit capable devices. Users of those devices can witness what HoloLens users are experiencing. They can even record straight from their phones.\r\n\r\nFeatures\r\n---\r\n\xe2\x80\xa2\tSpatial synchronization of Holograms, so phones see holograms where HoloLens see\xe2\x80\x99s them.\r\n\xe2\x80\xa2\tNetwork auto-discovery for adding ARKit capable devices to a session. All networking is implemented using Unet.\r\n\xe2\x80\xa2\tAutomatic session handling, so users are added to the correct session (when multiple HoloLens sessions run on the same network).\r\n\xe2\x80\xa2\tiOS support (ARKit capable devices).\r\n\xe2\x80\xa2\tMultiple iOS guests.\r\n\xe2\x80\xa2\tRecording of Video + Holograms + Ambient sound + Hologram Sounds.\r\n\xe2\x80\xa2\tShare sheet so you can Save the Video, email it, or share it with other supporting apps.\r\n\xe2\x80\xa2\tSwitches elegantly between platforms in Unity Editor.\r\n'"
308774950,1882,b'[Patch4] Update projectversion to match the current recommended Unity release',"b'We are recommending 2017.2.1p, yet every user with that build sees the ""do you want to update"" dialog. This doesn\'t feel right.\r\n\r\nFixes: #1874'"
308764078,1881,b'[Dev_Working] Adding motion controller haptics to editor; updating and renaming DLL',"b'Overview\r\n---\r\nThis update adds haptics support while running in the Editor. It also renames the DLL to better reflect the newly multi-feature support, instead of just models.\r\n\r\nTo test, run the MotionControllerTest scene and press either the grip button or the menu button on your motion controller.\r\n\r\nThe corresponding DLL updates can be found in Microsoft/MixedRealityToolkit#146 and Microsoft/MixedRealityToolkit#153.\r\n\r\nThis is the dev branch version of #1880.\r\n\r\nChanges\r\n---\r\n- Fixes: #1440.\r\n'"
308758382,1880,b'[Patch4] Adding motion controller haptics to editor; updating and renaming DLL',"b'Overview\r\n---\r\nThis update adds haptics support while running in the Editor. It also renames the DLL to better reflect the newly multi-feature support, instead of just models.\r\n\r\nTo test, run the MotionControllerTest scene and press either the grip button or the menu button on your motion controller.\r\n\r\nThe corresponding DLL updates can be found in Microsoft/MixedRealityToolkit#146 and Microsoft/MixedRealityToolkit#153.\r\n\r\nChanges\r\n---\r\n- Fixes: #1440.\r\n'"
308304160,1878,b'Enabled .NET 4.x for project',b'Overview\r\n---\r\nAdded .NET 4.x support and added project dialog box to prompt users to switch.\r\n\r\nRemoved the compiler definitions for the reflection extensions.'
308205711,1875,b'Update may18_dev branch with latest Patch4 changes',b'Update the may18_dev branch to latest patch4 fixes and features\r\n'
308185972,1873,b'[master->dev] integrate recent audio occlusion fixes',"b'Overview\r\n---\r\n* Updates AudioInfluencerController (formerly AudioEmitter), IAudioInfluencer and AudioOcclusion scripts to match recent changes in the master (Patch4_Dev) branch.\r\n* Add AudioLoFiEffect script to provide a simple low fidelity effect (also a great test of the occlusion fix!)\r\n* Move scripts into new MixedRealityToolkit.SpatialSound.Effects namespace\r\n* Add -Examples\\SpatialSound\\Scenes\\AudioLoFi and related files\r\n* Update SpatialSound\\README.md\r\n\r\nChanges\r\n---\r\n- Fixes: #1860.\r\n'"
308106708,1870,b'Adding GripPosition and GripRotation to SupportedInputInfo and adding support to WSA input source and related classes',"b'Overview\r\n---\r\nWSA input sources do not currently report their capabilities correctly in regards to Pointer position/rotation and grip position/rotation. This PR attempts to fix the situation by adding GripPosition/GripRotation input info types, and clearly differentiating between the Pointer and Grip types. InteractionInputSource and a number of related classes are updated to accommodate use of the new types.\r\n\r\nChanges\r\n---\r\n* added PointerPosition (Position-equivalent), PointerRotation (Rotation-equivalent), GripPosition and GripRotation  to SupportedInputInfo enumeration\r\n* deprecated existing Position and Rotation enum ids\r\n\r\n- Fixes: #1824 .\r\n'"
308067260,1869,b'[master] Update ObjectCollection.cs',"b'Fixes issue with GameObject staying in NodeList even though it is not a child anymore.\r\n\r\nOverview\r\n---\r\nRemove GameObject from NodeList, when it is not a child of this.transform anymore\r\n!NodeList[i].transform.IsChildOf(this.transform))\r\n\r\nChanges\r\n---\r\n- Fixes: #1868 \r\n'"
307916834,1865,b'TapToPlace: add events for placement of objects',b'Uses interface to route events for every object that is placed. It fires one event when placement starts and another once placement is completed.\r\n\r\nUsed TapToPlace test scene to validate the events are triggered as expected.\r\n\r\nThis change comes as result of functionality I required for my scenario and I am sure it can be useful for other developers (as I have seen mentioned in other threads such as [PR 1222](https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/1222))\r\n\r\nChanges\r\n- Fixes: #1221'
307828286,1864,b'Lighting Improvements to the MRTK/Standard Shader',"b'Overview\r\n---\r\nIntegrating the latest work to improve the MRTK/Standard shader.  Improvements include softer (anti aliased) borders, a lighting model closer to the Unity/Standard shader (see below), and other minor fixes.\r\n\r\nThis pull request brings the MRTK/Standard shader up to parity with this [pull request.](https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/1847#issuecomment-375453871)\r\n\r\nThe Unity/Standard shader is on the left and MRTK/Standard shader is on the right. (Note the specular highlight improvements and accurate shading on the bottom right of the grid as the gif toggles from old to new.)\r\n\r\n![oldvsnewstats](https://user-images.githubusercontent.com/13305729/37842122-82d46980-2e7e-11e8-96e0-3fb9ff5b6bd7.gif)\r\n'"
307792550,1863,b'integrate FixedAngularSize fix from master into dev',"b""This change takes the Update -> LateUpdate fix, plus some documentation and code style changes to FixedAngularSize.cs that were pushed to master's Patch4_Dev branch (#1855) and applies them to the Dev_Working_Branch.\r\n\r\nFixes #1861 """
307449308,1856,b'[Dev\xe2\x86\x92master] Billboard updates',"b'Port of #1817.\r\n\r\nOverview\r\n---\r\nAdded support for all combinations of axes. I rearranged the enum to preserve existing behavior (the previous Free was actually only the X and Y axes).\r\n\r\nChanges\r\n---\r\n- Fixes: #1672, fixes #383, fixes #208.\r\n'"
307445846,1855,b'[master] fixes #1831 - replace update with lateupdate in FixedAngularSize',"b""Overview\r\nFixedAngularSize was previously using Update to adjust the element's visible size. This caused a flicker when applied to a cursor and this update came before the update performed by the GazeManager (as reported in #1831).\r\n\r\nChanges\r\n---\r\n* Replaced Update with LateUpdate to ensure the scaling occurs after other modifications.\r\n* Encapsulated the SizeRatio field per the pending code style guide and applied a range check in the setter.\r\n* Add a range to SizeRatio (was defined as 0 - 1 in SetSizeRatio())\r\n* Add summary tag comments throughout.\r\n\r\n- Fixes: #1831 .\r\n"""
307369167,1854,b'TapToPlace: extends the usage of collider to place objects',"b'Introduces the ability to use other parts of the collider like top or bottom, useful for common scenarios where user wants to place the object on the floor or ceiling.\r\n\r\nUsed the TapToPlace scene to test combinations (DontUse, UseCenter, UseBottom and UseTop) to validate the desired behavior.'"
307263673,1853,b'Update CustomInputSource.cs',b'Support for Navigation Gesture Emulation through the mouse. Until now only Manipulation Gestures were supported. Also support railsNavigation selected under the InputPrefab\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
307055245,1849,b'[Dev\xe2\x86\x92master] Two hand manipulable',b'Overview\r\n---\r\nMigration to master of TwoHandManipulable example (which includes the appearance of boundingbox when selected). Namespace changes.\r\n'
306976959,1848,b'TapToPlace: extends the usage of collider to place objects',"b'Introduces the ability to use new reference points such as top or bottom\r\nof the collider, helpful for common scenarios where user wants to place\r\nthe object on the floor or ceiling.\r\n\r\nI used the TapToPlaceScene to test all combinations (None, Center, Bottom, Top) to produce the desired behavior.'"
306965860,1847,"b'[Dev\xe2\x86\x92master] MRTK/Standard shader, update .mat, add test scene'","b""Port MixedRealityToolkit/Standard shader from Dev_Working_Branch, including related editor and runtime scripts.\r\nUpdate materials that formerly used MixedRealityToolkit/FastConfigurable and Unity's Standard shader to use the MRTK shader.\r\nAdd StandardShader example scene from Dev_Working.\r\n"""
306677784,1846,b'MRTK vNEXT coding guidelines',b'MRTK vNEXT coding guidelines'
305706988,1839,b'MRDL->MRTK Tooltip UI control',b'![mrtk_tooltip](https://user-images.githubusercontent.com/13754172/37489229-34b53d18-2854-11e8-9d0d-9835041f24b6.jpg)\r\n\r\nOverview\r\n---\r\nTooltips are usually used to convey a hint or extra information upon closer inspection of an object. ToolTip can be used to explain button inputs on the motion controllers or to label objects in the physical environment.\r\n\r\nDemo video\r\n---\r\nhttps://gfycat.com/WarmOblongBilby\r\n\r\nExample scene\r\n---\r\nThis example scene demonstrates an implementation of the ToolTip user interface element. \r\n\r\n[TooltipExamples.unity](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/Feature_UX_Tooltip/Assets/MixedRealityToolkit-Examples/UX/Scenes/TooltipExamples.unity)\r\n![mrtk_tooltipexamplescene](https://user-images.githubusercontent.com/13754172/37489230-34cbb052-2854-11e8-947a-b6c00c239053.jpg)\r\n\r\nTechnical details\r\n---\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/blob/Feature_UX_Tooltip/Assets/MixedRealityToolkit-Examples/UX/Readme/README_TooltipExample.md\r\n\r\n\r\n'
305692689,1838,"b'[master] Fix occlusion effect, add lofi and example scene'","b'Overview\r\n---\r\nThis change fixes a bug in AudioOccluder.cs where the effect would restore the incorrect low pass filter frequency when the original sound source had a preexisting low pass filter attached,\r\n\r\nAlso renames AudioEmitter->AudioInfuencerManager to be more descriptive of the usage and purpose. Changes made here were to support the AudioOccluder fix.\r\n\r\nIAudioInfluencer.cs was modified to simplify the method signatures.\r\n\r\nAudioLoFiEffect was added as both a verification of the AudioOccluder fix and as a useful script for experiences wishing to simulate various sound sources (ex: AM radio).\r\n\r\nAdded Examples scene to demonstrate LoFi and validate the occluder fix.\r\n\r\nAll-up: improve the source comments / documentation of publics.\r\n\r\nUpdate readme.md to match script names, dependencies and usage/behaviors.\r\n\r\nChanges\r\n---\r\n- Fixes: #1825  .\r\n'"
304568759,1829,b'Merging changes from master/Stabilization for 2017.2.1.3 release',b'Overview\r\n---\r\nThis PR contains changes that were made after #1791.\r\n'
304503433,1826,b'Fixed buttons with unassigned profiles in the example scenes',b'Overview\r\n---\r\nButton objects in the InteractableObjectExample and ObjectCollectionExample scenes were missing profile. Assigned correct profile (HolographicButtonMeshProfile).\r\n\r\n![2018-03-12 12_02_48-unity 2017 2 1f1 64bit - interactableobjectexample unity - mrtk-original - uni](https://user-images.githubusercontent.com/13754172/37304163-150ef8c2-25ee-11e8-85cd-75affc2248ee.png)\r\n\r\n'
304135089,1821,b'Enabled .NET 4.x for project',b'Overview\r\n---\r\nAdded .NET 4.x support and added project dialog box to prompt users to switch.\r\n\r\nRemoved the compiler definitions for the reflection extensions.'
304131414,1820,b'Updated TwoHandManipulatable',"b""## Overview\r\n* Bug in TwoHandManipulatable that threw a error when you didn't set a BoundingBox prefab\r\n* Added public ```BoundingBoxPrefab```\r\n* Added ```SetManipulationMode```"""
304127198,1819,b'Updated Dialog UI with new HolographicButton component',"b""Overview\r\n---\r\nReplaced [Dialog UI control'](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/Dev_Working_Branch/Assets/MixedRealityToolkit-Examples/UX/Readme/README_DialogsExample.md)s texture-based button with new shader-based HolographicButtons.\r\nDialog prefab file updated.\r\n\r\n![mrtk_ux_dialog_holographicbutton](https://user-images.githubusercontent.com/13754172/37249291-b85c2550-2499-11e8-92c6-0cfc6b0354f3.jpg)\r\n![mrtk_ux_dialog_holographicbutton3](https://user-images.githubusercontent.com/13754172/37249292-b8746e4e-2499-11e8-9995-ca2eb687c9b9.jpg)\r\n"""
304036456,1818,b'App Bar Build Fixes',b'Overview\r\n---\r\nFixed an issue with building for the standalone player.\r\nMisc formatting.'
304025573,1817,"b'Adding two-axis pivots, fixing free, and adding other missing axes to Billboard'","b'Overview\r\n---\r\nAdded support for all combinations of axes. I rearranged the enum to preserve existing behavior (the previous Free was actually only the X and Y axes).\r\n\r\nChanges\r\n---\r\n- Fixes #1672, fixes #383, fixes #208.\r\n'"
303302052,1807,b'Final merge of Stabilization into master',"b'Some PRs have gone into Stabilization after the release.\r\n\r\nWe should mark the patch release after this, then delete Stabilization.'"
303268139,1804,b'Broken image link fix in README_ObjectCollection.md',b'Overview\r\n---\r\nFixed broken image link in \r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/blob/Dev_Working_Branch/Assets/MixedRealityToolkit-Examples/UX/Readme/README_ObjectCollection.md\r\n\r\nChanges\r\n---\r\nUpdated links to correct path.\r\n'
303196387,1803,b'Moved UNET Sharing code out into examples',b'Overview\r\n---\r\nSharing with UNET is really just an example anyway. Too many example assets in the core toolkit.\r\n\r\nChanges\r\n---\r\n- Fixes: #1800\r\n\r\nSee [Draft Release](https://github.com/Microsoft/MixedRealityToolkit-Unity/releases/edit/untagged-797a1aa3074edafad192)'
303185554,1802,b'UX Document Fixes',b'Changes\r\n---\r\n- Fixes: #1801\r\n'
303046121,1799,b'Send Slider Value on Update - Stabilization',b'Overview\r\n---\r\nAllows for value to be sent when invoking **OnUpdateEvent** method.\r\n\r\nChanges\r\n---\r\n\r\nCan Specify a method that accepts a float\r\n\r\n![image](https://user-images.githubusercontent.com/6419944/36723590-9ec0a8f4-1ba8-11e8-9607-34667ce66204.png)\r\n\r\n![image](https://user-images.githubusercontent.com/6419944/36723606-acd32f7a-1ba8-11e8-940a-d63a07e39937.png)\r\n\r\nPrevious behavior works correctly (specifying a method and supplying a value)\r\n\r\n![image](https://user-images.githubusercontent.com/6419944/36723617-b68a1fd8-1ba8-11e8-9c2f-74d309c88601.png)\r\n\r\n![image](https://user-images.githubusercontent.com/6419944/36723625-bb378ec6-1ba8-11e8-83ed-b3afcb86c7c7.png)\r\n\r\n\r\n- Fixes: #1760 .\r\n'
302953662,1797,b'Updated ButtonTraditional prefab',"b""The ButtonTraditional prefab was using an old 3DTextPrefab, and wasn't using the new standard text shader\r\n\r\n## Before\r\n![actual-tradbutton](https://user-images.githubusercontent.com/9560490/37072341-873946bc-2186-11e8-932b-134dbb9b0a4f.png)\r\n\r\n## After \r\n![expected-tradbutton](https://user-images.githubusercontent.com/9560490/37072344-889154c8-2186-11e8-8cf3-1722733bbb63.png)"""
302939338,1795,b'Updated the pointer registration.',"b""Added unregister pointer method.\r\nAdded asserts to verify we're not registering or unregistering the gaze pointer improperly."""
302119401,1792,b'Feature multi pointer input refactor',"b""Overview\r\n---\r\nProbably needs a bit more cleaning up but the basic functionality is there.\r\n\r\n- [ ] Get Parabola and Line pointers to look/feel better\r\n- [ ] New Pointer Teleport Manger doesn't work\r\n- [ ] Xbox controller input refactor\r\n- [ ] Spatial Mouse\r\n- [x] Hardware Keyboard support\r\n- [ ] There are three cursors in the scene. The Gaze cursor should disappear when a motion controller(s) is detected. (Gaze cursor should be displayed only when there are no motion controllers in the scene)\r\n\r\n![mrtk_multipointer1](https://user-images.githubusercontent.com/13754172/37371900-3a82b9f0-26ce-11e8-82d5-0812e19db55d.jpg)\r\n\r\n\r\n- [ ] On thumbstick forward, the parabolic beam should be displayed without straight beam. (currently displayed together).\r\n\r\n![mrtk_multipointer2](https://user-images.githubusercontent.com/13754172/37371614-33baf0ac-26cd-11e8-808d-b6cec56564d9.jpg)\r\n\r\n- [ ] On thumbstick left/right/backward, the parabolic beam should not be displayed.\r\n- [ ] Sometimes, only single controller visualizes the beam and cursor.\r\n- [ ] Sometimes, a parabolic beam is displayed on trigger button event.\r\n- [ ] Some NullReferenceExceptions\r\n\r\n![20180313_143326_mixedreality_moment 3](https://user-images.githubusercontent.com/13754172/37371633-418ca2ca-26cd-11e8-9b9f-01a1510256c5.jpg)\r\n"""
302103002,1791,b'Dev working branch port of stabilisation fixes',b'Overview\r\n---\r\nReplicates Stabilisation fixes back in to dev_working\r\n\r\nChanges\r\n---\r\n- Fixes: #1752  .\r\n'
302035054,1789,b'Unit Tests Fixes',b'Overview\r\n---\r\nFixed broken unit tests:\r\n- Input Unit Tests did not pass bc of Singleton update.\r\n\r\nChanges\r\n---\r\n- Fixes: #1788 \r\n'
301993439,1787,b'Changed SpatialUnderstanding DllImports to cdecl.',b'Overview\r\n---\r\nExplicitly added calling convention to SpatialUnderstanding imports to prevent application from crashing when built using IL2CPP.\r\n\r\nChanges\r\n---\r\n\r\n\r\n- Fixes: #1784 .\r\n'
301978097,1786,b'UX controls example updated with new MRTK/Standard Shader',"b'Overview\r\n---\r\nUpdated button and toolbar control examples in [InteractableObjectExample ](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/Dev_Working_Branch/Assets/MixedRealityToolkit-Examples/UX/Readme/README_InteractableObjectExample.md)and [ObjectCollectionExample ](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/Dev_Working_Branch/Assets/MixedRealityToolkit-Examples/UX/Readme/README_ObjectCollection.md)scene, using new [MRTK/Standard shader.](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/Dev_Working_Branch/Assets/MixedRealityToolkit/Common/Shaders/Standard.shader) \r\n\r\nVideo:\r\nhttps://gfycat.com/PlushUglyCattle\r\n\r\n![mrtk_ux_holographicbuttonrev](https://user-images.githubusercontent.com/13754172/36573409-a1c24dfc-17f5-11e8-8df5-dea67010eac3.jpg)\r\n\r\n![mrtk_ux_holographictoolbar](https://user-images.githubusercontent.com/13754172/36574713-dd92e5b6-17fb-11e8-8484-5dcbba07fbd8.jpg)\r\n\r\n![mrtk_ux_interactableobject_objectcollection](https://user-images.githubusercontent.com/13754172/36931878-57677c34-1e74-11e8-8ef9-b91a46f1f6d8.jpg)\r\n\r\n\r\n'"
301939953,1785,b'MRDL->MRTK Feature Bounding Box and App Bar',"b""![mrtk_appbar_boundingbox](https://user-images.githubusercontent.com/13754172/36922999-ade6c412-1e1e-11e8-9aa6-4bb4435e531c.jpg)\r\n\r\nOverview\r\n---\r\nThis example scene demonstrates how to make objects manipulatable using BoundingBoxRig script. The bounding box is a standard interface for manipulating objects in Windows Mixed Reality. Using gizmo on the corners and edges, you can scale or rotate the object. App Bar provides the button for entering/exiting 'Adjust' mode to enable/disable Bounding Box. For more information please see '[App Bar and Bounding Box' on Windows Dev Center.\r\n](https://developer.microsoft.com/en-us/windows/mixed-reality/app_bar_and_bounding_box)\r\n\r\nDemo video\r\n---\r\nhttps://gfycat.com/TameQuaintGnu\r\n\r\nSupported devices\r\n---\r\n- HoloLens \r\n- Immersive headset \r\n\r\nTest Scene \r\n---\r\n[BoundingBoxGizmoExample.unity\r\n](https://github.com/johnppella/MixedRealityToolkit-Unity/blob/BoundingBoxWithGizmo/Assets/MixedRealityToolkit-Examples/UX/Scenes/BoundingBoxGizmoExample.unity)\r\n![mrtk_appbar_boundingbox_examplescene](https://user-images.githubusercontent.com/13754172/36923008-b8651b96-1e1e-11e8-8415-5bef82561daa.jpg)\r\n\r\n\r\nTechnical details \r\n---\r\nYou can find technical details on the README page: \r\nhttps://github.com/johnppella/MixedRealityToolkit-Unity/blob/BoundingBoxWithGizmo/Assets/MixedRealityToolkit-Examples/UX/Readme/README_BoundingBoxGizmoExample.md\r\n\r\nDependency\r\n---\r\nThis example scene demonstrates the combination of BoundingBoxRig with TwoHandManipulatable script. \r\n\r\nChanges\r\n---\r\n- Fixes: #1497 #1522\r\n#"""
301912863,1783,b'MRDL->MRTK Feature Bounding Box and App Bar',"b""**Please see #1785 for the new Pull Request.**\r\n.\r\n.\r\n.\r\n.\r\n\r\n![mrtk_appbar_boundingbox](https://user-images.githubusercontent.com/13754172/36922999-ade6c412-1e1e-11e8-9aa6-4bb4435e531c.jpg)\r\n\r\nOverview\r\n---\r\nThis example scene demonstrates how to make objects manipulatable using BoundingBoxRig script. The bounding box is a standard interface for manipulating objects in Windows Mixed Reality. Using gizmo on the corners and edges, you can scale or rotate the object. App Bar provides the button for entering/exiting 'Adjust' mode to enable/disable Bounding Box. For more information please see '[App Bar and Bounding Box' on Windows Dev Center.\r\n](https://developer.microsoft.com/en-us/windows/mixed-reality/app_bar_and_bounding_box)\r\n\r\nDemo video\r\n---\r\nhttps://gfycat.com/TameQuaintGnu\r\n\r\nSupported devices\r\n---\r\n- HoloLens \r\n- Immersive headset \r\n\r\nTest Scene \r\n---\r\n[BoundingBoxGizmoExample.unity\r\n](https://github.com/johnppella/MixedRealityToolkit-Unity/blob/BoundingBoxWithGizmo/Assets/MixedRealityToolkit-Examples/UX/Scenes/BoundingBoxGizmoExample.unity)\r\n![mrtk_appbar_boundingbox_examplescene](https://user-images.githubusercontent.com/13754172/36923008-b8651b96-1e1e-11e8-8415-5bef82561daa.jpg)\r\n\r\n\r\nTechnical details \r\n---\r\nYou can find technical details on the README page: \r\nhttps://github.com/johnppella/MixedRealityToolkit-Unity/blob/BoundingBoxWithGizmo/Assets/MixedRealityToolkit-Examples/UX/Readme/README_BoundingBoxGizmoExample.md\r\n\r\nDependency\r\n---\r\nThis example scene demonstrates the combination of BoundingBoxRig with TwoHandManipulatable script. \r\n\r\nChanges\r\n---\r\n- Fixes: #1497 #1522\r\n#"""
301175059,1776,b'Multi Pointer Input Refactor',b'Probably needs a bit more cleaning up but the basic functionality is there.\r\n\r\n- [ ] Get Parabola and Line pointers to look/feel better'
300812676,1773,b'Initial Check-in of the new vNext folder structure',b'A little empty here but us chickens (and default read me files)'
300812572,1772,b'.NET 4.6 Compatibility',b'Fixed issue with compiling against .NET 4.6 and the `GetTypeInfo` Reflection Extension\r\n\r\nChanges\r\n---\r\n- Fixes: #1730\r\n'
300681966,1764,b'Automatic update for keyboard atlas references',b'Overview\r\n---\r\nUpdated the keyboard atlas to reference the changed sprites.\r\nAlso adds an editor script that will automatically keep the atlas up to date by getting all sprites used by the keyboard prefab and updating the atlas with them.\r\nThe atlas will be updated when:\r\n* The editor gets started\r\n* The prefab gets updated\r\n* A sprite on the atlas gets deleted\r\n* A atlas reference gets deleted/updated\r\n\r\nChanges\r\n---\r\n- Fixes: #1665\r\n'
300628119,1763,b'Make Spatial Mapping optional when Finding Anchor Position',b'Changes\r\n---\r\n- Fixes: #1762  .\r\n'
300579602,1761,b'Send Slider Value on Update',b'Overview\r\n---\r\nAllows for value to be sent when invoking **OnUpdateEvent** method.\r\n\r\nChanges\r\n---\r\n\r\nCan Specify a method that accepts a float\r\n\r\n![image](https://user-images.githubusercontent.com/6419944/36723590-9ec0a8f4-1ba8-11e8-9607-34667ce66204.png)\r\n\r\n![image](https://user-images.githubusercontent.com/6419944/36723606-acd32f7a-1ba8-11e8-940a-d63a07e39937.png)\r\n\r\nPrevious behavior works correctly (specifying a method and supplying a value)\r\n\r\n![image](https://user-images.githubusercontent.com/6419944/36723617-b68a1fd8-1ba8-11e8-9c2f-74d309c88601.png)\r\n\r\n![image](https://user-images.githubusercontent.com/6419944/36723625-bb378ec6-1ba8-11e8-83ed-b3afcb86c7c7.png)\r\n\r\n\r\n- Fixes: #1760 .\r\n'
300442355,1759,b'Add Inscribed Rectangle code to MRTK',b'Overview\r\n---\r\nMake BoundaryManager calculate an inscribed rectangle from which to derive the cuboid bounds. This is what other VR platforms do: [Open VR](https://github.com/ValveSoftware/openvr/wiki/IVRChaperone_Overview)\r\n\r\nAdd a visualizer to show the calculated inscribed rectangle\r\n\r\nAdd a unit test for the core inscribed rectangle algorithm\r\n\r\nChanges\r\n---\r\n- Fixes: #1709\r\n'
300310227,1756,b'UNet PlayerController Fix',b'Changes\r\n---\r\n- Fixes: #1755\r\n'
299971765,1753,b'Updated Roadmap',b'Added links to MRTK vNext'
299912345,1750,b'Fixed more build warnings for platforms other than UWP',b''
299912220,1749,b'Fixes issues building plugins cross platform and in 5.6',b''
299879515,1748,b'A few more small bug fixes',b'Overview\r\n---\r\nUpdates the debug log from a SharingWithUNET component to be correct.\r\n\r\nReverts the addition of `requiredComponent: ` from `HapticsTest` which was preventing the editor from working.\r\n![image](https://user-images.githubusercontent.com/3580640/36621198-b5ba7878-18ab-11e8-8837-e8459e4b1d20.png)\r\n\r\n\r\nUpdates the `TryGetGeometry` call in `BoundaryManager` to actually return something in WMR.\r\n\r\nChanges\r\n---\r\n- Fixes: #1679\r\n'
299824940,1747,b'Disabled the MRTK build window when the build target != UWP',b'Left some convenience buttons in the window.\r\n'
299819023,1746,b'Stabilization clean up warnings',"b'Overview\r\n---\r\nResolved all ""warnings"" in the Stabalisation branch raised during build\r\n\r\nChanges\r\n---\r\nCode warnings be gone\r\n'"
299731407,1745,b'Turn off the influence of the physics engine while dragging.',"b""If you attach both RigidBody and HandDraggable to an object, then it will be affected by both gravity and the user's motion controller while dragging. The result is that it flops on the ground like a struggling flounder. This change turns off the influence that the physics engine has over the object while the user is in control of it."""
299173161,1743,b'MixedReality/Standard Shading System',"b'Overview\r\n---\r\nThis pull request introduces a new MixedReality/Standard shading system (outlined in issue #1715) which utilizes a single, flexible shader that can achieve visuals similar to Unity\'s Standard Shader, implement Fluent Design System principles, and remain performant on mixed reality devices.\r\n\r\nTo experience many of the new shading techniques available please see the new MaterialGallery example scene (this scene contains only the MixedReality/Standard shader to demonstrate it\'s flexibility):\r\n![materialgallery](https://user-images.githubusercontent.com/13305729/36511641-4eceafac-171c-11e8-991f-40896f75e2ee.png)\r\n\r\nAll other materials and example scenes have been updated to the new  MixedReality/Standard shader. As demonstrated below:  \r\n![objectgallery](https://user-images.githubusercontent.com/13305729/36511868-3d441406-171d-11e8-9c15-d4c44290c0d8.png)\r\n\r\nOther notable improvements include the addition of a hover light to all MRTK cursors, automatic near plane fade support, and automatic material conversion from Standard and FastConfigurable shaders to the MixedReality/Standard shader.\r\n\r\nThe existing FastConfigurable shader has been moved to ""Obsolete"" but it still available for backwards compatibility until it is decided that it can be safely removed.\r\n\r\nThis PR also includes fixes for broken materials listed in #1721.\r\n\r\nOur team uses and maintains this shader on a daily basis, and in the future, plans to add additional example scenes to the MRTK to help demonstrate functionality.\r\n\r\nChanges\r\n---\r\n- Fixes: #1715 #1721 #1531 #1769 \r\n'"
299134482,1742,b'Fixing building glTF libraries for other build types',"b'Overview\r\n---\r\nIssue mentioned at https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/1708#issuecomment-364632400\r\n\r\nThis updates the glTF DLLs to be included for any build type not explicitly excluded, which allows for arbitrary build types to be selected without getting the ""namespace GLTF cannot be found"" error.\r\n\r\nI only have the Android build type installed to test with, but the shader change fixes building there (no guarantee on it working, just building).'"
299131982,1741,b'Fixing a few issues from the Namespace merge',"b'Introduced by 8f4d02a8ed272fdc010d5a7c3e89aa7bd8914c4e\r\n\r\nOverview\r\n---\r\nOne file was left in the `HoloToolkit` namespace, and a few project settings were changed.'"
299098813,1739,b'CompountButton Icon Profile Change',"b""Overview\r\n---\r\nThis updates button icon profile textures to allow selection of 'empty' button textures. (The original vetting method was slightly confusing.)\r\n\r\nFixes #1724 """
299092747,1738,b'README update for Interactable Objects (Stabilization branch)',b'Overview\r\n---\r\nAdding additional details about the scripts and prefabs in the scene Interactable Object Examples and Receiver\r\n\r\nChanges\r\n---\r\nUpdated README page - \r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/Stabilization/Assets/HoloToolkit-Examples/UX/Readme/README_InteractableObjectExample.md\r\n'
298810238,1735,b'Removed Build warning about SDK in 2017.3+',b'Removed depreciated reflection methods that checked UWP version.  We verify installation in other places based on the presence of the Windows SDKs and vswhere in the build window itself.\r\n'
298803587,1734,b'README update for Interactable Objects',b'Overview\r\n---\r\nAdding additional details about the scripts and prefabs in the scene Interactable Object Examples and Receiver\r\n\r\nChanges\r\n---\r\nUpdated README page - \r\nhttps://github.com/cre8ivepark/MixedRealityToolkit-Unity/blob/Documentation_Updates_UX/Assets/MixedRealityToolkit-Examples/UX/Readme/README_InteractableObjectExample.md\r\n\r\n'
297913132,1727,b'Feature Two Hand Manipulation + Bounding Box Normal Mode',"b""# Overview\r\n![mrtk_twohandmanipulation](https://user-images.githubusercontent.com/13754172/36328028-763e6df8-1315-11e8-80c6-a72d5623cc26.jpg)\r\n\r\nThis Pull Request is based on [TwoHandManipulatable script](https://github.com/johnppella/MixedRealityToolkit-Unity/blob/Feature_UX_BoundingBox_TwoHandManipulation/Assets/MixedRealityToolkit/InputModule/Scripts/Utilities/Interactions/TwoHandManipulatable.cs) made by Julia Schwarz(@julenka) and David Calabrese (Issue #1604)\r\n\r\nThis script allows for an object to be movable, scalable, and rotatable with one or two hands. You may also configure the script on only enable certain manipulations. The script works with both HoloLens' gesture input and immersive headset's motion controller input.\r\n\r\nThe example also includes Bounding Box Basic for the normal mode. In normal mode, Bounding Box Basic gives the visual boundary of the object when you interact with the object. You can find this behavior in the cliff house. (Grab and move, rotate, scale with two motion controllers)\r\n\r\n![mrtk_boundingboxnormalmode](https://user-images.githubusercontent.com/13754172/36328150-ebd4e4c0-1315-11e8-8a7a-9226a9aba66b.jpg)\r\n\r\n# Demo Video\r\nhttps://gfycat.com/ColossalEnlightenedAntipodesgreenparakeet\r\n\r\n# Supported devices\r\n- HoloLens \r\n- Immersive headset \r\n\r\n# Test Scene \r\n[TwoHandManipulationTest.unity](https://github.com/johnppella/MixedRealityToolkit-Unity/blob/Feature_UX_BoundingBox_TwoHandManipulation/Assets/MixedRealityToolkit-Examples/Input/Scenes/TwoHandManipulationTest.unity)\r\n\r\n# Technical details \r\nYou can find technical details on the README page: \r\nhttps://github.com/johnppella/MixedRealityToolkit-Unity/blob/Feature_UX_BoundingBox_TwoHandManipulation/Assets/MixedRealityToolkit-Examples/Input/Readme/README_TwoHandManipulationTest.md\r\n\r\n# Known issues\r\n- Adjust mode Bounding Box(handles) and App Bar will be added through different Pull Request.\r\n- In the immersive headset, current input system only shows single pointer cursor. While holding an object with the first controller, pointing and selecting the object with the second controller will activate the manipulation behavior. Multi-pointer cursor visualization will be updated through different Pull Request.\r\n\r\nThis PR also includes the fix for some of the broken materials in Button prefabs used in the InteractableObject and ObjectCollection."""
297801494,1726,b'Replicating future proof fixes from Stabalisation',b'Overview\r\n---\r\nReplicating future proof fixes from Stabalisation\r\n\r\nChanges\r\n---\r\n\r\n* Tagalong - fix destroyobject -> destroy\r\n* BuildsNSLUtilities - fix build return text\r\n* SetIconsWindow - remove redundant image types\r\n\r\n'
297742037,1723,"b'Following internal discussions, this pr removes image types that will\xe2\x80\xa6'","b'Overview\r\n---\r\nFollowing internal discussions, this pr removes image types that will be removed in 2018\r\nResolves remaining issues identified in #1716\r\n\r\nChanges\r\n---\r\nUpdates SetIconsWindow script to remove redundant types and ensure MRTK working in 2018\r\n'"
297256314,1718,b'MRDL -> MRTK Dialog & Progress control',b'![mrtk_dialogprogress](https://user-images.githubusercontent.com/16143963/36229003-b4e43ff6-118a-11e8-9478-e7f794b07aa3.jpg)\r\n\r\n# Overview\r\nThis pull request brings MRDL\xe2\x80\x99s Dialog and Progress controls to MRTK. These are standard UI for the notification/information display and visual feedback for the data loading. **Both controls are tested and optimized for both HoloLens & Immersive headset.** Core scripts and prefabs are added to MRTK\xe2\x80\x99s main folder under UX. Example scenes are added to MRTK\xe2\x80\x99S Examples folder under UX.\r\n\r\n# Supported devices\r\n\r\n- HoloLens \r\n- Immersive headset \r\n\r\n# Demo video\r\n- Dialog: https://gfycat.com/ConventionalDirtyKiskadee\r\n- Progress: https://gfycat.com/JaggedDimLacewing\r\n\r\n# Technical details \r\nYou can find technical details in these README pages: \r\n- [DialogsExample README](https://github.com/johnppella/MixedRealityToolkit-Unity/blob/Feature_UX_Dialog_Progress/Assets/MixedRealityToolkit-Examples/UX/Readme/README_DialogsExample.md)\r\n- [ProgressExample README\r\n](https://github.com/johnppella/MixedRealityToolkit-Unity/blob/Feature_UX_Dialog_Progress/Assets/MixedRealityToolkit-Examples/UX/Readme/README_ProgressExample.md)- \r\n\r\n# Example Scenes\r\n- [Dialog Example scene](https://github.com/johnppella/MixedRealityToolkit-Unity/blob/Feature_UX_Dialog_Progress/Assets/MixedRealityToolkit-Examples/UX/Scenes/DialogsExample.unity)\r\n- [Progress Example scene](https://github.com/johnppella/MixedRealityToolkit-Unity/blob/Feature_UX_Dialog_Progress/Assets/MixedRealityToolkit-Examples/UX/Scenes/ProgressExamples.unity)\r\n\r\n![mrtk_dialog_devices](https://user-images.githubusercontent.com/16143963/36229002-b4c86970-118a-11e8-88d8-23db55957fb2.jpg)\r\n\r\n![mrtk_progress2](https://user-images.githubusercontent.com/16143963/36229001-b4b0ec00-118a-11e8-86c1-6e49cc208380.jpg)\r\n'
297061049,1717,b'Resolve future issues... now',"b""Resolved two issues that will become a problem in 2018, as they are fixable now it seems sensible to resolve them.\r\n\r\nOverview\r\n---\r\n2018 highlighted some obsolete code / functions that were now removed.  The new versions of these functions exist now, so we should fix them ahead of them being a problem\r\n\r\nChanges\r\n---\r\n- BuildsNSLTools updated to force conversion of it's build output to a string (as Unity will change it from a string to a Type)\r\n - Changed the Destroy method used in Tagalong script (as destroyobject is scheduled for removal)\r\n\r\nRemaining Issues\r\n---\r\n - EnumMaskField is being replaced with EnumFlagsField (but not in 2.17.2 build so cannot be fixed now)\r\n - WSA Images are getting tidied up (removing old types and Phone), we should probably remove these now, but need to validate the effect on current WSA builds\r\n"""
296213216,1711,b'UX Namespace Changes',b'Overview\r\n---\r\n- There was a duplicate class named KeyboardManager in two difference namespaces.\r\n    - Updated the UX KeyboardManager name to VirtualKeyboardManager.\r\n- Moved Cursor Scripts from Input feature folder to UX feature folder and updated namespaces.\r\n- Moved Cursor Prefabs from Input feature folder to UX feature folder.\r\n- Moved other UX specific assets from Input feature folder to UX feature folder.\r\n- Cleaned up and removed a few duplicate assets.\r\n- Organized the Input and UX editor folders to mirror their script folder counterparts.'
296050447,1710,b'Sharing updates for release',"b'Overview\r\n---\r\nDrops recompiled and signed pre-namespace-change sharing binaries into the stablilization branch for the pending release.\r\n\r\nThese will be superseded by the binaries already in the Dev branch, but these are a necessary update for the pre-namespace release.'"
295929691,1708,b'Fix build for non windows platforms',"b'Overview\r\n---\r\n\r\nUsing UnityEngine.Windows.Speech namespace prevents build for other platforms than UWP (e.g. iOS).\r\nPlatform dependent compilation is used in other places in code, e.g. HoloToolkit.UI.Keyboard.Keyboard\r\n\r\nBut it is missed in HoloToolkit.Unity.Buttons.CompoundButtonSpeech that prevents build for ios.\r\n\r\n'"
295676921,1706,b'Update Dev branch with docs updates',b'\r\n'
295666280,1705,b'Merged Roadmap Changes & docs sync',b'Merged Roadmap Changes from master branch and feature branch documentation.'
295658042,1704,b'Merged in Road map changes from master branch.',b'Merged in Road map changes to get commits in sync'
295654269,1703,b'Latest changes from Master',b'Latest changes from Master'
295400293,1698,b'MRTK 2017.2.1.2 Patch Release',b'[See draft release notes](https://github.com/Microsoft/MixedRealityToolkit-Unity/releases/tag/untagged-2045d27e3dba254591de)'
295350224,1697,b'Merge Dev branch into Namespace Refactor.',b'Latest changes from Dev branch.'
294892020,1695,b'Feature namespace refactor merge to Dev_Working',b'Overview\r\n---\r\nMerge of Refactoring work in to Dev_Master\r\n\r\nChanges\r\n---\r\n - EVERYTHING!\r\n'
294228167,1690,b'Dictation Focus',b'Overview\r\n---\r\nAdded modal focus for the currently listening game object during dictation.\r\n\r\nChanges\r\n---\r\n- Fixes: #1689\r\n'
293951451,1688,b'Feature namespace refactor dev merge',"b""Overview\r\n---\r\nUpdate the Feature Namespace branch to match the current state of the Dev_Working_Branch\r\n\r\nChanges\r\n---\r\n[x] Updated to Dev_Working_Branch state\r\n[x] Moved / fixed files that had been altered or Git couldn't match.\r\n[x] Tested and Fixed InputManager and MRCP prefabs that were affected by script changes\r\n[x] Re-tested and applied final patches.\r\n\r\nNotice\r\n--- \r\nRequires previous NameSpace PR's to be merged first."""
293667612,1685,b'Feature namespace refactor shader refactor',"b""Overview\r\n---\r\nUpdated shaders to remove all instances of HoloToolkit (and TLA's)\r\n\r\n\r\n(Someone already changed the shader names??)\r\n\r\nAlso fixed the ProjectSettings asset to change the Toolkit name there as well.\r\n\r\n\r\nChanges\r\n---\r\n\r\n[x] Updated Shaders\r\n[x] Removed obsolete shaders except unlit\r\n"""
293654550,1684,b'Removed docygen files and template mds',"b'Removed the following elements from the Toolkit source\r\n\r\n[x] All doxy file configuration\r\n[x] Redundant / template md files\r\n\r\nSharing and Spacial Audio left in, however, look like they need updating / moving\r\n'"
292887540,1678,b'Fixed int bug in column calculation of ObjectCollection',"b'Column calculation was buggy because of some `int` math.  \r\nAs an Example, when calculating columns with a `NodeList.Count` of `4` and `Rows` of `5` (both are `int` values) the result is 0. That resulted in all CollectionNodes being positioned in one place.'"
292710184,1676,b'Save Mesh as OBJ',"b'Overview\r\n---\r\nSave SpatialUnderstanding Mesh as an OBJ fie in the HoloLens. \r\n\r\nSteps:\r\n1. Add RoomSaver component to scene\r\n2. Initialize the fileName and anchorStoreName fields\r\n3. On SpatialUnderstanding.ScanStates.Done, call RoomSaver.SaveRoom() method\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #188\r\n- Fixes: #984\r\n'"
292593086,1673,b'Feature namespace refactor obsolete class removal',"b'Overview\r\n---\r\nRemoval of all obsolete classes / functions /properties\r\n\r\nChanges\r\n---\r\nRemoved all code marked as obsolete with one exception\r\n\r\n- uAudioManager has an Obsolete property, which when removed causes issues.  This should be resolved.\r\n'"
291774822,1670,b'Signed MixedRealityToolkit binary updates',"b'Overview\r\n---\r\nThis is a new drop from https://github.com/Microsoft/MixedRealityToolkit, adding versioning info (starting at 1.0.0.1 for this drop) to all the DLLs and EXEs, as well as digitally signing the binaries with the official Microsoft certificate for authenticity.\r\n\r\nThe updated Sharing binaries will come from #1666.\r\n\r\nIn the future, drops will happen as necessary from the native repo, instead of all at once like this.\r\n\r\nChanges\r\n---\r\n- Unblocks: #1435 \r\n- Supercedes: #1562 \r\n- Fixes: #493 \r\n- Probably others...'"
291769300,1669,b'Updating example scenes',"b""Overview\r\n---\r\nBased on the feedback(#1599  ) from the community and our discussion, I did the first pass for the improvement. This update focuses on UX folder and some input related scenes. I'll continue working with @NeerajW and @keveleigh to identify obsolete scenes and assets.\r\nThanks!\r\n\r\n- Refined design & text readability in some important scenes such as InputManagerTest and MotionControllerTest\r\n- Replaced some obsolete/duplicated materials with FastConfigurable series.\r\n- Started adding a common template for the In-Project scene description. This panel will be included in every example scene so that developers can easily understand what the scene is about before looking at the readme file. \r\n- Removed Medical example due to the heavy asset size\r\n\r\nSome screenshots (before & after):\r\n---\r\n![mrtk_examplesupdate1](https://user-images.githubusercontent.com/13754172/35454005-18cbd538-0281-11e8-9419-63455f4e120b.jpg)\r\n![mrtk_examplesupdate3](https://user-images.githubusercontent.com/13754172/35420146-b4bf5bfe-01f0-11e8-9dc2-7d52cee4d670.jpg)\r\n![mrtk_examplesupdate2](https://user-images.githubusercontent.com/13754172/35420147-b6e9a7d6-01f0-11e8-9f11-5acf9c4bde56.jpg)\r\n\r\nUpdated scenes in this PR:\r\n---\r\n\r\n- AdaptiveQuality\r\n- Boundary Test\r\n- ColorPicker\r\n- FastConfigurableShader\r\n- GazeRuler\r\n- Input - InputManagerTest\r\n- Input - MotionControllerTest\r\n- MotionControllers-GrabMechanics\r\n- UX - GestureInteractiveExample\r\n- UX - InteractableObjectExample\r\n- UX - InteractiveButtonComponents\r\n- UX - InteractiveElementInstantiate\r\n- UX - InteractiveExample\r\n- UX - LineExamples\r\n- UX - ObjectCollectionExample\r\n- UX - SliderSamples\r\n- UX - TextPrefabSamplesTest\r\n\r\nIssues:\r\n---\r\n- Fixes: #1574\r\n- Fixes: #1682"""
291390559,1666,b'Updating the native MRTK namespace',b'Overview\r\n---\r\nThis PR brings over the namespace changes from the native Toolkit.\r\n\r\nChanges\r\n---\r\nRelated to Microsoft/MixedRealityToolkit/pull/140\r\n'
290669217,1659,b'Fix for hidden members in AttachToController',"b""Overview\r\n---\r\nFix for hidden members in AttachToController.  Second attempt.\r\n\r\nThis time I simply made ControllerFinder Abstract so no one could use it directly on a GameObject.  I couldn't think of any reason to really have it unless you needed to inherit anyway. (Mostly a helper).\r\n\r\nAdded a industry standard editor for SolverHandler to make sure we don't show the fields we didn't need to change.\r\n\r\nAlso added editors for the Controller Finder and Attach To Controller classes for aesthetics.\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/35299671-d3b035fe-003a-11e8-8e11-e5bd42ed2c84.png)\r\n\r\nChanges\r\n---\r\nFixes #1661\r\n"""
289754570,1651,b'Updating roadmap with 2017.3 and 2018.1 feature updates',b'Overview\r\n---\r\nIssuing directly against master so everyone can read latest roadmap. Will issue FI into dev working later.\r\n'
289754307,1650,b'glTF new drop and updates',"b""Overview\r\n---\r\nThis update includes the latest drop from https://github.com/KhronosGroup/UnityGLTF. This drop cleans up quite a bit of excess code, as the schema scripts are now found in the GLTFSerialization DLL.\r\n\r\nIt removes a script I created (GLTFComponentStreamingAssets) in favor of new support in this drop.\r\n\r\nIt also replaces our previous (incorrect, as we are not using specular materials) use of the Unity Standard (Specular) shader in favor of the project's GLTFStandard shader.\r\n\r\nChanges\r\n---\r\nRelated to #1644 \r\n"""
289648367,1649,b'Fix for setting worldCamera to null even when user chose UIRaycastCamera',"b'Fix for setting worldCamera of a Canvas to null even when the user chose the UIRaycastCamera. This way way the user could only change the Canvas Camera to UIRaycastCamera when he deliberatly chose a wrong camera, so that the script kicked in and changed it for him.'"
289642876,1648,b'Feature namespace refactor post merge fixes',"b'Overview\r\n---\r\nMinor updates to the namespace feature branch, requested from reviewers\r\n\r\nChanges\r\n---\r\n[x] reverting all ProjectSettings assets - using Dev_Working_Branch versions\r\n[x] Verified all images for all .MD files are in the repo\r\n[x] Checked all image links use local and not remote links\r\n[x] Reverted a few /master/ renames that were in error'"
289092254,1642,b'Merge Master into Dev Working Branch',b'See #1614'
288677603,1636,b'Feature namespace refactor final',"b""Overview\r\n---\r\nLast cleanup - replacement of all HoloToolkit references \r\nWorking build once #1634 is merged\r\n\r\nChanges\r\n---\r\n[x] Text search through all files to cleanup last references\r\n[x] Rename of External\\HoloToolkit folder\r\n[x] MRTK-Examples updated and aligned\r\n[x] MRTK-UnitTests updated and aligned\r\n[x] Editor scripts standardised with .EditorScript suffix\r\n[x] Object browser verified (to ensure no stragglers)\r\n[x] Pointed all URL's to Dev_Working_Branch\r\n[x] All script comments and help text updated to MixedRealityToolkit\r\n\r\nOutstanding Tasks\r\n---\r\n[ ] MRTK base DLL's and Sharing SDK cs files\r\n[ ] Shaders\r\n"""
288440119,1634,b'Feature namespace refactor phase3',"b'Overview\r\n---\r\nFinal namespace updates for base MRTK folder, updating Sharing & Spacial folders.\r\nStandardise all Editor scripts\r\n(code will not build until all namespaces complete!)\r\n\r\nChanges\r\n---\r\n[x] Sharing namespaces updated\r\n[x] SharingWithUNET namespaces updated\r\n[x] SpatialMapping namespaces updated\r\n[x] SpacialSound namespaces updated (slight folder reorg to keep API clean)\r\n[x] SpatialUnderstanding namespaces updated\r\n[x] SpatialUnderstanding class renamed to SpatialUnderstandingManager\r\n[x] Editor scripts final pass for base MRTK folder.  All Editor scripts (except build) now have .EditorScript suffix (keeping them out of the main production API space)\r\n\r\nNext - Examples and Unit Tests + Dev branch refresh.'"
288425851,1633,b'rename Fitbox to ContentStartPositionModal and fix bug (PR)',b'Overview\r\n---\r\nrename Fitbox to ContentStartPositionModal and fixed bug\r\nimproved the test example\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n'
288286715,1629,b'Feature namespace refactor phase2',"b'Overview\r\n---\r\nUpdating Boundary, Build and UX namespaces \r\n(code will not build until all namespaces complete!)\r\n\r\nChanges\r\n---\r\n[x] Renamed base namespaces to MixedRealityToolkit.Boundary from Boundary folder\r\n[x] Renamed base namespaces to MixedRealityToolkit.Build from BuildAndDeploy folder\r\n[x] Renamed base namespaces to MixedRealityToolkit.UX from UX folder\r\n[x] Fixed copyright statement in all files\r\n[x] Moved Attributes back to Utilities folder\r\n[x] Standardised all UX Editor scripts, moved Editor MRTKEditor classes to own files\r\n[x] Removed all #if EDITOR from the majority scripts in the UX Editor folders\r\n[x] Realigned the UX files / folders\r\n'"
288225744,1627,b'Merge Working Development Branch into MultiPointer Feature Branch',b''
287977432,1623,b'ContentStartPosition control and Examples new additions',"b""Overview\r\n---\r\n Used to place the scene origin on startup\r\n \r\n A `ContentStartPosition` can be used to allow the user to move to a position and place content in that position.\r\n \r\n A `ContentStartPosition` covers a healthy portion of the screen and follows the users gaze(but doesnt screen lock).  It initially disables the content associated with it.\r\n It can be used to give important guidance to the user before allowing him/her to continue with the application.\r\n Once a user clicks on the `ContentStartPosition`, it will disappear and allow the user to view the scene.Additionally you can set a flag to re-position the scene object relative to where the `ContentStartPosition` was dismissed.  Some have used it as a type of splash screen before showing a initial set of menus or content.\r\n \r\n `ContentStartPosition` has three properties that can be set in the editor.\r\n     bool MoveCollectionOnDismiss\r\n     GameObject StartupObject\r\n     float Distance \r\n     \r\n StartupObject refers to The scene object to activate and possibly reposition\r\n MoveCollectionOnDismiss toggles whether you want to reposition the StartupObject to the place where the Fitbox was clicked on (defaults to false) \r\n Distance refers to the distance at which you want the `ContentStartPosition`, and subsequent content, to display in front of the user. This is fed to the interpolator. (defaults to 1.0f )\r\n \r\n `ContentStartPosition` requires an Interpolator, A Holotoolkit MonoBehaviour that interpolates a transform's position, rotation or scale.\r\n and helps the fitbox smoothly stay in front of the user wherever he/she moves\r\n \r\n A `ContentStartPosition` also has a child object Quad whose material can be set to a logo or some image representing guidance to the user\r\n You could replace this with your own child objects.\r\n \r\n If the user moves anywhere the fitbox will stay at the same distance set in front of the user and this is where the followup content may be moved to if MoveCollectionOnDismiss is set to true\r\n"""
287893808,1620,b'Feature namespace refactor common utilities',"b'Overview\r\n---\r\nUpdating Common & Utilities namespace\r\n(code will not build until all namespaces complete!)\r\n\r\n\r\n\r\nChanges\r\n---\r\n[x] Renamed base namespaces to MixedRealityToolkit.Common from Common folder\r\n[x] Renamed base namespaces to MixedRealityToolkit.Utilities from Utilities folder\r\n[x] Fixed copyright statement in all files\r\n[x] Moved Attributes to Editor folder\r\n[x] Moved Inspectors to Editor folder\r\n[x] Removed all #if EDITOR from scripts in the Editor folders \r\n\r\nOutstanding\r\n---\r\nBuild window classes left alone for now, will move when dealing with the Build namespace'"
287874009,1618,b'Dictation Test Scene Fix',b'Overview\r\n---\r\nFixed an issue with a material in the Dictation Input Test Scene'
287729997,1616,b'Make ToggleLogic virtual',"b'Overview\r\n---\r\nWanted to make a customized InteractiveToggle script which inherits from InteractiveToggle.cs and needed to change the ToggleLogic() mehtod (use a dynamic Unity bool Event). For this I need ToggleLogic() to be virtual and I think this could help others, as well, because in the current form it is not possible to implement a custom toggle logic.\r\n\r\nChanges\r\n---\r\nMade ToggleLogic() virtual in InteractiveToggle\r\n'"
287603181,1614,b'MRTK 2017.2.1.1 Patch Release',b'Overview\r\n---\r\nAddresses the Patch Release for MRTK 2017.2.1.0\r\n\r\nChanges\r\n---\r\n- Fixed building for Window Standalone.\r\n- Fixed unused field warning in `BoundaryManager`\r\n- Added unity packages from 2017.2.1.0 release\r\n- Added unity packages for 2017.2.1.1 release'
287594429,1613,b'Fix for hidden members in AttachToController',b'Fix for hidden members in AttachToController'
287101123,1611,b'Feature namespace refactor inputname space',b'Overview\r\n---\r\nUpdating Input namespace\r\n(code will not build until all namespaces complete!)\r\n\r\nChanges\r\n---\r\n[x] Renamed base input namespace to MixedRealityToolkit.Input\r\n[x] Named all namespaces according to folder location\r\n[x] Fixed copyright statement in all files\r\n[x] Renamed Cursor to BaseCursor to avoid namespace conflict\r\n[x] Moved InputManager/MixedRealityCamera & MixedRealityTeleport to the base of the new InputModule namespace\r\n\r\nOutstanding Queries\r\n[x] Some classes in the MRTK.Input.Utilities folder should be in the base folder.  E.G. InputManager - Needs review\r\n[ ] Recommend deleting all obsolete classes as part of breaking change (e.g. FadeScript)\r\n\r\n\r\n  '
286883749,1609,b'Renamed core HLTK folders to MRTK',"b'All .MD files updated to new MixedRealityToolKit name\r\nSpellings fixed\r\n\r\nOverview\r\n---\r\nOverhaul of namespaces / classes within the project, e.g.\r\nRename HoloToolkit folders -> MixedRealityToolkit verbiage.\r\nRename namespaces like HoloToolkit.Unity to:\r\nMixedRealityToolkit.Input.\r\nMixedRealityToolkit.Common\r\nMixedRealityToolkit.SpatialMapping etc.\r\n\r\nTasks\r\n---\r\n[x] Update documentation from HoloToolKit to MixedRealityToolkit\r\n[x] Rename Core HT -> MRTK folder\r\n[x] Rename Examples HT -> Examples MRTK folder\r\n[x] Rename Unit Tests HT -> Unit Tests MRTK folder\r\n\r\n\r\n'"
286851952,1608,b'Layer extension optimization',"b""Overview\r\n---\r\nThere's lots of unnecessary memory allocations when sorting layers.\r\nChanged the `IEnumerable` parameters to a basic array.\r\nUpdated Focus Manager assertions to remove memory allocations when getting the type even if no assertion is thrown.\r\nRemoved the list of `ComparableRaycastResult` in `EventSystemExtensions`, because we don't need it.\r\n  """
286802980,1607,b'Fails when the required SDK is element 0',"b""Updating the script to only fail if the SDK is not found, instead of improperly failing if it's the first match.\r\n\r\nOverview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: # .\r\n"""
286455667,1603,b'Input System Refactoring',"b""Overview\r\n---\r\nThis is purely an exploratory request to refactor the input system. See #1602 \r\n\r\nThe biggest changes to note:\r\n- Each of the event data classes now have overloaded initialization methods for more refined source data\r\n    - `InputEventData` now contains `PressType` and `Handedness`\r\n- Added concepts for OnPointerUp/Down/Clicked\r\n    - `IInputClickHandler` was renamed to `IPointerHandler`\r\n- InputUp/Down/Pressed is separated out into its own thing, and doesn't raise pointer clicks to uGUI\r\n- Renamed `IFocusable` to `IFocusHandler`\r\n- `IPointingSource` now inherits from `IInputSource`\r\n    - Pointers now can have cursors assigned to them\r\n    - Pointers no longer require a Cursor, but a Cursor does require a Pointer.\r\n- `CursorModifier` now implements `IFocusHandler` and assigns itself when focused to the pointer\r\n- Combined and/or removed a few of the Input Handler Interfaces to make things cleaner\r\n- Simplified raising sources by removing the `sourceId` parameter since it's already embedded in the input source data and added a `Name` property\r\n- `InteractionInputSources` is now a singleton\r\n- The `InputManager` assigns the source id as it's raised to ensure unique ids across all sources.\r\n- Input Sources now inherit from `IEquatable` and are now considered to be unique based on source id.\r\n- Renamed `CustomInputSources` to `SimulatedInputSources`\r\n\r\nTODO\r\n---\r\n- [ ] Check that #1662 is fixed.\r\n- [x] Support #1602 Multi Pointer functionality.\r\n- [x] Implement Pointer interface in `GazeManager`, `InteractionInputSources`, and `PointerSources`\r\n- [x] Remove `XboxControllerInputSource` and replace it with a class that is more similar to `InteractionInputSources` that tracks and keeps input sources mapped in the editor up to date\r\n- [ ] Fix: #1621 & #1342 Native support for Mouse with similar interactions as cliff house (spatial mouse)\r\n- [ ] Native support for keyboard\r\n- [ ] #1653 Add grip position and rotation to the supported input info.\r\n\r\nChanges\r\n---\r\n- Fixes: #1576 \r\n- Fixes: #334 """
286421984,1601,b'Standalone Build Fixes',b'Fixes errors when targeting and building for Windows Standalone.\r\n\r\nSee #1530'
286417613,1600,b'Removed unused field in boundary manager',b'Removed an unused field in the boundary manager\r\n\r\nSee #1530'
286401194,1598,b'moved bounds extenstions',b'Changes\r\n---\r\n- Fixes: #1597\r\n'
286400371,1596,b'removed unused local variable',b'Changes\r\n---\r\n- Fixes: #1591\r\n'
286396875,1595,b'Removed duplicate bounding box asset ',b'Changes\r\n---\r\n- Fixes: #1593\r\n'
286396490,1594,b'Bounding box layer mask fix',b'Changes\r\n---\r\n- Fixes: #1592\r\n\r\n  '
286384844,1590,b'Removed invalid attributes on properties.',b'`[HideInInspector]` and `[SerializeField]` are invalid attributes on properties.'
286380104,1588,b'Added ability to update the keywords at runtime.',b'Overview\r\n---\r\nAdded the ability to update the keywords at run time.'
286138353,1585,b'Fix for build error when one Win SDK installed',"b'Overview\r\n---\r\nCurrently, if only one Windows SDK version is installed locally, the build deployment process fails because BuildDeployWindow expects to find more than one installed version upon open. With this fix, the process will throw an exception if only no SDKs are found.\r\n\r\nChanges\r\n---\r\n- Fixes: #1584 .\r\n- Fixes: #1687.'"
286066854,1582,b'Namespace refactor work',"b""Overview\r\n---\r\nOverhaul of namespaces / classes within the project, e.g. \r\nRename HoloToolkit folders -> MixedRealityToolkit verbiage.\r\nRename namespaces like HoloToolkit.Unity to:\r\nMixedRealityToolkit.Input.\r\nMixedRealityToolkit.Common\r\nMixedRealityToolkit.SpatialMapping etc.\r\n\r\nTasks\r\n---\r\n[x] Rename Core HT -> MRTK folder\r\n[x] Rename Examples HT -> Examples MRTK folder\r\n[x] Rename Unit Tests HT -> Unit Tests MRTK folder\r\n[x] Initial global NS rename\r\n[x] Review Input namespace\r\n[x] Review Spacial Mapping namespace\r\n[x] Review boundary namespace\r\n[x] Review Sharing namespace\r\n[x] Review Spacial mapping namespace\r\n[x] Review Spacial Sound namespace\r\n[x] Review Spacial Understanding namespace<- Needs review\r\n[x] Renamed SpacialUnderstanding class to SpacialUnderstandingManager (resolves new namespace conflicts)\r\n[x] Review Utilities\r\n[x] Review Build code\r\n[x] UX code <- needs discussion\r\n[x] Examples code and structure\r\n\r\nChanges\r\n---\r\n- Fixes: #1527\r\n\r\nPR ready for review.  Should not be merged until the base MRTK Dll's have been updated and included with the same NameSpace change.\r\n"""
285943998,1578,"b'Set Grid in inspector, get Grid using code if it is not defined'",b'Overview\r\n---\r\n- Set the Grid in inspector/unity file\r\n- Added code to find the grid by name if it is not set (as described in #1577)\r\n- Removed some unused Scaler for Canvas in inspector/unity file\r\n\r\nChanges\r\n---\r\n- Fixes: #1577 .\r\n'
285523960,1575,b'Update for UIRaycast Camera and Canvas Referencing',"b""Overview\r\n---\r\nThis PR aims to fix the issues with using the uGUI Canvases and the MRTK's input system.\r\n\r\nChanges\r\n---\r\n- Fixes: #1573 Fixes issues with using canvases across scenes, and assigning the UIRaycastCamera when a new scene is loaded.\r\n- Fixes: #1420 Gives devs the ability to update the scenes canvases via the Scene Capabilities Wizard.\r\n- Fixes: #1534 Fixes issues with setting the UIRaycastCamera on the Canvas Component itself."""
284979869,1572,"b'Fix typo ""API\'s"" -> APIs'","b""The plural of API is APIs, not API's. Reference: https://english.stackexchange.com/questions/323688/what-is-the-plural-of-api"""
284319026,1565,b'Add demo controls to GrabMechanics readme',"b""Overview\r\n---\r\nHey guys, quick PR here to add control docs to the GrabMechanics readme.\r\n\r\nBased on previous experience in WMR, and even another demo in this project, I had expected to use the motion control pointer to interact with the blocks. I searched the forum and saw some similar looking problems. I read this readme, but it didn't clarify anything for me, so I came to the conclusion that there must be a bug.\r\n\r\nI was about to file an issue, but checked on closed issues and saw someone else had opened #1261 with the same problem, and that it was user error! The demo turned out really cool, and I'm really excited to start playing around with the scripts. I'm also hoping this update to the README will help the next guy along, as I don't think that closed issues are sufficiently discoverable. \r\n\r\nChanges\r\n---\r\n- Fixes: #1261.\r\n"""
283999757,1563,b'Fade Plane and transparent Sprite Fix',"b""Overview\r\n---\r\nThe FadePlane currently wipes out transparent sprites that are not on the default sorting plane.  This commit maintains the FadePlane's functionality while ensuring transparent sprites still appear by drawing the FadePlane last. \r\n\r\nChanges\r\n---\r\nI added a class called SortingLayerOverride which I believe was sharing with me from an engineer at Microsoft awhile back.  I modified it to enable you to choose to always select the last layer in the sorting layers array.  \r\n\r\nI applied this behavior to the FadePlan and set it to use the last available layer.   \r\n\r\n\r\n- Fixes: # .\r\nI did not create a bug ticket but when you use the FadePlane the transparent wipes out any transparent 2D sprite that is not on the default sorting layer.  This commit fixes that issue.\r\n"""
283997603,1562,b'Sharing DLL Update',"b""Overview\r\n---\r\nBack in August dimatomp fixed the AutoDiscovery bug in the sharing service:\r\nhttps://github.com/Microsoft/MixedRealityToolkit/pull/106\r\n\r\nHowever, as far as I can tell no one has updated the dlls or the exe for the Unity toolkit users. I'm committing mine here which have been working for HoloMaps and a couple of other apps on the Hololens but have not been tested elsewhere. \r\n\r\nChanges\r\n---\r\n\r\nI compiled new dlls and a service exe based on the updated MRTK code.\r\n\r\n\r\n- Fixes: #493  Auto discovery: https://github.com/Microsoft/MixedRealityToolkit/issues/70"""
283936289,1560,"b""Fixed bug in UserNotifications example that didn't correctly check for local user.""",b'\r\nOverview\r\n---\r\nSimple fix to have the code behave as it was intended - only notify when a remote user joined instead of all users (including the local user).\r\n\r\n'
283724731,1557,b'Accessibility changes to make extending the Toolkit easier to maintain.',"b""Overview\r\n---\r\nThese are the changes requested from:\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/pull/1265#\r\n\r\nI've updated the code to address the conflicts.  It was easier to just create a new fork and redo it than try to fix the prior. I'll close the prior ticket above.\r\n\r\nThe main goal of this ticket to keep the Toolkit simple and focused on the most common needs while allowing others to extend where they deem fit.  There are no breaking changes. Besides a null check the only changes involve switching functions or properties to protected instead of private (which I realize can lead to breaking changes down the road if we are not careful). \r\n"""
283520882,1555,"b'MixedRealityTeleport option to stay in same horizontal plane, fixed Editor'","b'- Added an option ""Stay on the floor"" to actually stay in the same horizontal plane, regardless whether or not the user puts the teleport marker on something higher. \r\n- Added a cube to step on to the InteractiveMeshCursor to be able to test the above\r\n- Fixed MixedRealityTeleportEditor because it did never serialize only three of the twelve properties it edits.'"
283379178,1554,b'Tile Generation Update',"b'Overview\r\n---\r\n- Fixes some issues with generating duplicate textures, when we can just reuse the ones we have, and issues where we were multiplying by zero instead of 1.\r\n- Added Windows Phone icon settings back into the generation\r\n'"
283313731,1550,b'Fixes simulation for hands in editor',b'Changes\r\n---\r\n- Fixes: #1537\r\n'
283313193,1549,b'Updated Editor to 2017.3.0p2',"b""- Fixes: #1552 Removed previous Editor compatibility.\r\n- Fixes: #1548 Updated the Editor to 2017.3.0p2\r\n- Fixes: #1398 Fixes debugging on HoloLens\r\n- Shader Upgrade NOTE: upgraded instancing buffer 'Props' to new syntax.\r\n- Remove stabilization plane logic\r\n- Add app setup wizard support for enabling the shared depth buffer.\r\n- Remove duplicate SDK verification in build window utilities.\r\n\r\nTODO\r\n---\r\n\r\n- [x] Write a check to see if shared depth buffer is enabled when the editor starts and UWP build target is specified.\r\n\r\nKnown Issues\r\n---\r\n\r\n[`WWW` and `UnityWebRequests` have false positive errors for UWP apps built against x86](https://issuetracker.unity3d.com/issues/wsa-isnetworkerror-always-return-true-when-running-an-uwp-app-on-86x-architecture).\r\n"""
283043932,1544,b'MRDL -> MRTK: Solver system & various helpers',"b'****Overview:****\r\nFresh PR with latest Dev_Working_Branch as base.\r\n- Addresses previous feedback with Solver system\r\n- SolverHandler now extends ControllerFinder\r\n- AttachToController now extends ControllerFinder\r\n\r\n*A little about Solvers:*\r\nAt this time, there is no easy, reliable way to specify the update order for Unity components. This can make it difficult to implement deterministic compound transformations. The solver system addresses this issue.'"
282950473,1542,b'Catch possible uiRaycastResult.module null value',"b'In my app Walk the World I have seen crashes happening on this line, debugging learned that for some reasons sometimes uiRaycastResult.module is indeed null, causing the next clause (uiRaycastResult.module.eventCamera == UIRaycastCamera) to throw a null pointer exception.'"
282305647,1532,b'Updated initialized this object in structs',b'Overview\r\n---\r\nFixed issue with `RayStep` and `Vector3Smoothed` struct not initializing this() before assigning values in constructor.\r\n\r\nAlso public fields were not PascalCase.\r\n  '
282289305,1530,b'MRTK Master Release Packages',b'Added Release packages and removed one compiler warning'
282278606,1529,b'2017.2.1.0 release stabilization migration back to Dev_Working_Branch',b'Merges any changes made in master or in the stabilization branch back to the Dev branch.'
282270451,1528,b'2017.2.1.0 stabilization merge into master',b'See release notes.\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/releases/tag/untagged-5c4c9fd0226decf3707a'
282209238,1526,b'Removing BoundaryManager from HoloLens',"b'Overview\r\n---\r\nIf a HoloLens is detected, now the `BoundaryManager` script is disabled.\r\n\r\nChanges\r\n---\r\n- Fixes: #1505.\r\n'"
282193383,1525,b'Updated Unity Editor Version to 2017.2.1f1',b'Updated Unity Editor Version to 2017.2.1f1'
281949916,1521,b'XboxControllerHandlerBase fixes',"b'Overview\r\n---\r\nSimplified the state machine in `XboxControllerHandlerBase` to reduce confusion and cases where states may conflict with each other.\r\nAlso resolved a bug where `GamePadHandlerBase` was registering as a global listener twice, thus receiving all events from the `InputManager` twice.\r\n\r\nChanges\r\n---\r\n- Fixes: #1517\r\n'"
281909592,1518,b'Add InitializeInternal concept to Singleton ',"b""Overview\r\n---\r\nThis is introducing an abstract initialization step in singleton to help auto sort out dependencies between singletons. Say you have three singletons where singleton A depends on singleton B and uses it for something in it's initialization step. Singleton B, similarly depends on singleton C. If initialization is done in Awake, since unity doesn't guarantee an order in which Awake is called, this could lead to singleton A being initialized first, and throwing errors, similarly with singleton B and C. If you instead follow the practice of initializing in this function, initialization is done on demand, allowing Awake to be called in any order and initialization to be auto sorted, as long as there are no cycles in your dependency graph. It also allows for lazy initialization of singletons.\r\n"""
281902339,1516,b'Fixing GazeResponder to use the new shader property instead of old one.',b'Overview\r\n---\r\n\r\n\r\nChanges\r\n---\r\n- Fixes: #1515\r\n'
281544703,1509,b'Reduced cross feature folder dependencies',b'- Created a Common folder: Contains scripts used by more than one feature area.\r\n- Utilities - Contains scripts that typically dont depend on a feature area.\r\n'
281537297,1508,b'MRDL->MRTK: Bounding Box Base',b'Overview\r\n---\r\nAdds BoundingBox base class.\r\nAdds BoundsExtension utility class.\r\nAdds bounding box resources and prefabs.\r\n(Bounding box manipulation classes to be added later.)'
281238796,1506,b'Adding throwing and AdaptivePerformance tools ',b'Overview\r\n---\r\nSee [optimizing performance for unity apps](https://developer.microsoft.com/en-us/windows/mixed-reality/performance_recommendations_for_immersive_headset_apps#optimizing_performance_for_unity_apps) (should be updated soon) and [throwing objects](https://developer.microsoft.com/en-us/windows/mixed-reality/gestures_and_motion_controllers_in_unity#throwing_objects) for details.'
280758753,1496,"b'Enhanced Keyboard, fixed dictation, feedback on dictation actually doing something'","b""Overview\r\nFixed keyboard dictation button - now actually shows some feedback, and recognized text is properly inserted. Some UI enhancements as well\r\n\r\nChanges\r\n- Dictation now works\r\n- Dictation button is red when dictation is active\r\n- Keyboard automatically closes after a set time of inactivity\r\n- Includes method to set scaling from the outside by code\r\n- Includes method to set scaling from the outside by code\r\n- Text inside text field is bigger so it's actually readable\r\n- Remove ray cast hit from input field and prevent activation, as this brings up the SYSTEM keyboard in MR (not in HL)\r\n\r\nThis code is successfully deployed in Walk the World for both HoloLens and Immersive headsets\r\n\r\nFixes #976"""
280664086,1495,b'Fixing AttachToController for non-UWP builds',"b'Overview\r\n---\r\nCurrently, the `#if` tags hide the overridable methods. This will cause errors on anything that overrides them in non-UWP builds.'"
280585687,1493,b'MRTK Editor Compatibility',b'Changes\r\n---\r\n- Fixes: #1492 \r\n'
280526271,1491,b'Use Unity internal GridLayoutGroup (from UI) to position Buttons',b'Bugfix for the issue mentioned in https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/1137'
280003329,1486,b'Feature_MultiPointers',"b""Overview\r\n---\r\nAdded optional EventOrigin and SourceType members to BaseInputEventData.\r\n\r\nUpdated InputManager to initialize (most) input events with these arguments.\r\n\r\nInputManager determines input source type on input source detected via DetermineInputSourceType.\r\n\r\nInputManager can add / remove EventOrigin strings via ApplyEventOrigin and RemoveEventOrigin.\r\n\r\nDiscussion\r\n---\r\nNow that we're looking at a concrete implementation of this I already see room for improvement.\r\n\r\nI don't like SourceType in practice, for a couple of reasons:\r\n - InputManager.DetermineInputSourceType seems like it could be _extremely_ flaky even if we add Handedness to IInputSource.  \r\n - I initially pushed to keep SourceType out of IInputSource, but it looks like these additional MixedRealityInputType types could be incorporated into IInputSource without much disruption.\r\n - Determining the input source type via IInputSource is also redundant when we're getting events directly from the device type in question (eg RaiseTouchpadTouched / RaiseGamePadDetected).\r\n\r\nSo my feeling is we should move this information into IInputSource after all.\r\n\r\nUsing the original Tag object\r\n---\r\nI played with using Tag instead of the EventOrigin string. On the InputManager side this wasn't difficult. Any existing uses would definitely be broken, but that may not be a big deal.\r\n\r\nConsuming these tags is also less trouble than expected. BUT there's an interdependence problem I didn't notice until I implemented a few button types:\r\n\r\n```\r\n// unsafe examples\r\n\r\npublic class ButtonString : MonoBehaviour, IInputClickHandler {\r\n        public void OnInputDown(InputEventData eventData)\r\n        {\r\n                string tagAsString = (string)eventData.Tag;\r\n                if (tagAsString == someDefinedString) {\r\n                        // do thing\r\n                }\r\n        }\r\n}\r\n\r\npublic class ButtonGameObject : MonoBehaviour, IInputClickHandler {\r\n        public void OnInputDown(InputEventData eventData)\r\n        {\r\n                GameObject tagAsGameObject = (GameObject )eventData.Tag;\r\n                tagAsGameObject.GetComponent<SomeKindOfPointer>().DoThing(); \r\n        }\r\n}\r\n\r\npublic class ButtonStruct : MonoBehaviour, IInputClickHandler {\r\n        public void OnInputDown(InputEventData eventData)\r\n        {\r\n                MyStruct tagAsMyStruct = (MyStruct)eventData.Tag;     \r\n                if (tagAsMyStruct.someBoolValue) {\r\n                        // do thing\r\n                }           \r\n        }\r\n}\r\n\r\n```\r\n\r\nOn the button end you'll have to use exception handling when casting tags, and you'll have to implement fail-safe behaviors for tags that aren't the right type & can't be consumed. Maybe not a big deal.\r\n\r\nOn the pointer end, sending consumable tags to all three button types would require knowledge of the kind of button it's looking at. So you've got a choice between very complex pointers, or pointers that only work with a specific kind of button. This interdependence is a bigger deal. It sort of undermines the generic nature of the input system.\r\n\r\nWe could suggest that devs stick to a single tag type in their project to keep things simple, but then there's little point in using a generic tag object.\r\n\r\nSo it looks like a fixed type is the way to go. A string still seems like the obvious choice, but if anyone has thoughts on using an int / GameObject / whatever, please chime in."""
279907835,1483,b'Updated event data tags',"b'@Railboy just for reference, the things that need to be changed for the current `object Tags` in the event data'"
279807262,1482,b'Allow serialised mesh to be converted to supplied local space.',"b'Overview\r\n---\r\nSimple addition that allows the serialised mesh to be converted to the local space of a supplied transform.\r\n\r\nThis requires that you also provide the necessary transform to convert the current local co-ordinates of the mesh into world space first.\r\n\r\n\r\nChanges\r\n---\r\nFeature addition, does not affect current functionality.\r\n\r\n- Fixes: N/A\r\n'"
279514076,1480,b'Mrtk build hot fix',b'Overview\r\n---\r\nFixes build when target is not WSA\r\n\r\nChanges\r\n---\r\n- Fixes: #1475'
279494483,1479,b'Updating and standardizing the license headers',"b'Overview\r\n---\r\nUpdates, adds, and standardizes the license headers across the Toolkit.\r\n'"
279491826,1478,b'Fix broken reference on MixedRealityCameraParent when Examples folder not present',b'Overview\r\n---\r\nMoved ControllerRect.prefab out of Examples folder\r\n\r\nChanges\r\n---\r\n- Fixes: #1390\r\n'
279490473,1477,b'Swapping the location of the sample microphone script and the actual script',"b'Overview\r\n---\r\nLooks like the sample script was put into the main toolkit, while the actual script was put into the examples folder.\r\n\r\nChanges\r\n---\r\n- Fixes: #1476\r\n'"
278721543,1471,b'Build Portal Updates',b'Overview\r\n---\r\n- Added quick options to switching between Immersive Head Mounted Displays (IMHDs) and HoloLens\r\n-  Manually add IP of remote devices\r\n-  Install via WiFi\r\n-  Better enumeration of Appx Package folders. #1136\r\n-  Fixed Build window incrementing the reserved number for Windows Store Apps #1402\r\n-  Add support for installing on local machine (for IMHD apps)\r\n-  HTTPS support #98\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/33520073-aad0c0c2-d768-11e7-9fb6-6a1db3472534.png)\r\n![image](https://user-images.githubusercontent.com/13334553/33520074-bb43c594-d768-11e7-8102-20c416f9f1d6.png)\r\n![image](https://user-images.githubusercontent.com/13334553/33520093-0d3f848c-d769-11e7-8b60-e7a169cb9710.png)\r\n\r\nChanges\r\n---\r\n- Fixes: #1020\r\n- Fixes: #98 \r\n- Fixes: #1402 \r\n- Fixes: #1424\r\n- Fixes: #1519'
278628862,1469,b'Remove System.IO.dll',b'Overview\r\n---\r\nThis was added as a workaround to light up building for IL2CPP. This is no longer needed as of at least 2017.2.0p2-MRTP5.\r\n\r\nhttps://issuetracker.unity3d.com/issues/wsa-unity-does-not-add-system-dot-io-as-a-reference-assembly-when-il2cpp'
278576873,1468,b'Validation for Position and Rotation Coords Issue#1290',"b""Overview\r\nUnityEngine.XR.WSA   InteractionSourceState.sourcePose.TryGetPosition and InteractionSourceState.sourcePose.TryGetRotation can return 'NaN' and or 'Infinity/NegativeInfinty' as a coordinate value. When setting a transform.postion or transform.rotation with non numeric coord values will through an error.\r\n\r\n\r\nChanges\r\nAdded two validation methods to test for 'IsNaN' and 'IsInfinity'. Applied these changes to the condition statement befor setting prosition and rotation of controller model.\r\n- Fixes: #1290.\r\n"""
278330117,1464,b'Removing casting and recieving shadows from the FadePlane',"b""Overview\r\n---\r\nIn certain scenarios, the fade plane casts a large shadow, which isn't ideal.\r\n\r\n![image](https://user-images.githubusercontent.com/3580640/33464098-784e8cfc-d5f5-11e7-9561-2d251f8d4bb2.png)\r\n\r\n\r\nChanges\r\n---\r\n- Related to: #1257, Q6.\r\n"""
278300440,1463,"b'Updating comment typos, spelling, etc'","b""Overview\r\n---\r\nPass at fixing various misspellings and other typos across the Toolkit's comments.\r\n"""
278300060,1462,b'Adding UnityPackageManager to .gitignore',b'Overview\r\n---\r\nAdding UnityPackageManager to .gitignore\r\n\r\nChanges\r\n---\r\n- Fixes: #1404.\r\n'
277944727,1458,b'add music library capability to examples project',b'Overview\r\n---\r\nThe MicStreamSelector plugin requires the Music Library capability to be able to save recording files.\r\n\r\nChanges\r\n---\r\nEnable Music Library by default. Related to #993\r\n'
277940741,1457,b'add note about camera prefabs',b'Overview\r\n---\r\nClarifies where the mixed reality camera prefabs reside in the toolkit.\r\n\r\nChanges\r\n---\r\nAdd comment to the toolkit readme. No issue associated with this change\r\n'
277797256,1456,b'Adding touchscreen input source',b'Overview\r\n---\r\nAdding basic support for touchscreen devices with the addition of a new TouchscreenInputSource class. Includes an Example scene demonstrating functionality via pre-existing scripts.\r\n\r\n- Fixes #1421\r\n- Fixes #1444'
277579429,1453,b'MRDesignLabs -> MRTK merge: Adding Solver system family',"b""This adds the core solver system from **MRDL** along with a few helper classes, specifically, **RaycastHelper** and **CameraMotionInfo** (which calculates *Camera.main*'s angular velocity).\r\n\r\nThis isn't a straight drop of the **MRDL** solver system, I removed a few outdated scripts as well as abstracted the reference object. These scripts were originally written for HoloLens, and while still helpful in that context, you can now use Motion controllers, or any scene object as a target for reference calculations. There is a test scene (and Readmes) in HoloToolkit-Examples/Utilities/\r\n\r\n---\r\n#### A little about solvers:\r\nAt this time, there is no easy, reliable way to specify the update order for Unity components. This can make it difficult to implement deterministic compound transformations. The solver system addresses this issue. \r\n\r\nBuilding on this, Solvers offer a range of follow behaviors (eg tag-along) which can be safely stacked (eg, tag-along + surface magnetism + momentum). \r\n"""
277512827,1452,b'Readme update input cell (add camera prefabs comment)',b'Overview\r\n---\r\nClarifies where the mixed reality camera prefabs reside in the toolkit.\r\n\r\nChanges\r\n---\r\nAdd comment to the toolkit readme. No issue associated with this change\r\n'
276742632,1436,b'Input Documentation Updates',"b""Overview\r\n---\r\nUpdates to the Input Documentation.\r\n[Preview Here](https://github.com/StephenHodgson/MixedRealityToolkit-Unity/blob/MRTK-InputDocumentation/Assets/HoloToolkit/Input/README.md)\r\n\r\nAdded `OnInputPressed` to `IInputHandler` to match [Unity's own](https://docs.unity3d.com/ScriptReference/Input.html) `Input.GetButton`, `Input.GetButtonDown`, and `Input.GetButtonUp` pattern.\r\n\r\nChanges\r\n---\r\n- Fixes: #1336\r\n- Fixes: #1270"""
276723082,1435,b'Platforms2',b'Add QueryTopology_FindLargestPositionsSittable() to Unity and update the Spatial Understanding demo with this query. This is the companion to: Microsoft/HoloToolkit#86\r\n\r\nNote: this should replace Platforms #651.\r\n'
276714365,1433,b'Updated MRTK Unity Editor to 2017.2.0p2 MRTP 5',b'Changes\r\n---\r\n- Fixes: #1432\r\n- Fixes: #1353\r\n- Fixes: #1383'
276700024,1428,b'MRTK Asset Cleanup',b'Overview\r\n---\r\n- Added ThirdParty to the list of ignored folders so devs can import custom tools\r\n- Updated all .fbx assets import options.\r\n    - Disabled import blend shapes\r\n    - Turned off material imports\r\n    - Turned off animation imports if no animation\r\n    - Re-Exported CursorRing.fbx and removed embedded templates folder\r\n    - Re-Exported hololens_low.fbx and removed embedded dds texture\r\n\r\nChanges\r\n---\r\n- Fixes: #1347\r\n- Fixes #1345 \r\n- Fixes #1405 '
276698805,1427,b'5.6 & 2017.1 Build fixes',b'Overview\r\n---\r\nFixes compatibility with 5.6 & 2017.1 unity builds.\r\n\r\n- Fixes: #1380'
276184066,1419,b'Updated GestureInteractive example script',b'Overview\r\n---\r\nUpdated `GestureInteractive.cs` to be backwards compatible for 2017.1 \r\n\r\nChanges\r\n---\r\n- Fixes: #1275\r\n'
275909706,1415,b'MRTK Xbox Controller & Motion Controller reconciliation',"b""Overview\r\n---\r\nSo after some thought and consideration, I thought it best to just not use the Editor Axis mappings for the Motion Controllers at all.  Instead we will always get our Motion Controller data from the `UnityEngine.XR.WSA.Input.IneractionManager` and only handle Xbox Controller input via axis/button mappings.\r\n\r\nI decided to leave the axis mappings as is for now, in case Unity ever gets around to fixing it and users decide that's what they'd rather use.\r\n\r\nI've cleaned up and refactored the Xbox input source to be easier to extend and get button/axis data out of.  I also included a handler base class that users can extend from to handle game pad input exactly like the old `GamepadInput.cs` class did.\r\n\r\nChanges\r\n---\r\n- Fixes: #1078\r\n- Fixes #1414 \r\n- Fixes #1199\r\n\r\nBreaking Changes\r\n---\r\n- Removed `GamePadEventData` from `InputManager` and marked it Obsolete.\r\n- `XboxControllerEventData` now inherits from `SourceStateEventData`."""
275773735,1412,b'spatial mapping tap is working with single-pass stereo rendering',"b""Overview\r\n---\r\n\r\napply this document's content into spatial mapping tap shader\r\nhttps://docs.unity3d.com/Manual/SinglePassStereoRenderingHoloLens.html\r\n\r\nChanges\r\n---\r\n- Fixes: #1411 """
275494182,1407,b'Adding Roadmap.md',b'Updated text to mention new branch structure.\r\nMaster will be locked for direct checkins.\r\nDev_Working_Branch will be the place to be for daily work.'
275440720,1403,b'MRTKEditor Bugfix',"b'Overview\r\n---\r\nMRTKEditor update to fix issues with ButtonIconProfileTexture\r\n\r\nChanges\r\n---\r\n- Fixes: #1393\r\n- MRTKEditor now saves changes more aggressively, automatically includes changes made to arrays and lists.\r\n - Custom editor setting has been changed from a static variable in MRTKEditor to an EditorPref. This prevents setting from toggling every time a compile is triggered and allows the setting to persist when Unity editor is restarted.'"
275272817,1400,b'Fixes the problem with accumulating teleportation heights',"b""Overview\r\n---\r\nThe MixedRealityCameraParent changed heights based on a raycast from the head to the floor. Depending on where the camera is in relation to the parent, the parent's base height shrank or grew. The head raycast howere is not needed and removed since the relative distance to the cameraParent is always controlled via IHDM and the target teleport position for the parent is always known.\r\n\r\nChanges\r\n---\r\n- Fixes: #1181 \r\n"""
275014621,1392,b'Fixed standalone compile issues',b'Changes\r\n---\r\n- Fixes: #1391 \r\n'
274934474,1387,b'Updated API and SDK compatibility',b'Changes\r\n---\r\n- Fixes: #1386\r\n'
274649540,1379,b'Motion controller script updates ',"b'This pulls some of the latest controller-related work from the upcoming 213 academy course into MRTK.\r\n\r\nIncludes numerous fixes and improvements for **MotionControllerInfo** / **MotionControllerVisualizer**, as well as the new utility **AttachToController**.\r\n\r\nEverything has been tested thoroughly and works well in the wild.'"
274318453,1373,"b""Updated namespaces of classes that didn't have one""","b""Classes that weren't in the HoloToolkit namespace.\r\n\r\nFixes: #1374"""
274314768,1372,b'Updated Assert for invalid pointer index.',b'Just updated an assert.\r\n\r\nZero is a valid index.'
274073552,1367,b'Changed the namespaces to HoloToolkit.Unity.UX',"b""Overview\r\n---\r\nChanged namespaces to `HoloToolkit.Unity.UX`. These changes could be breaking, if someone uses the scripts. All tests ran through, although I could only test them with Unity 2017.1.2f1.\r\n\r\nPlease run the tests in 2017.2.\r\n\r\nI noticed there are a lot of unused dependencies in these scripts, but I didn't remove them to keep the PR clean. Maybe you should refactor that at some point in time. \r\n\r\nChanges\r\n---\r\n- Fixes: #1366 \r\n"""
273885577,1364,b'MRDL->MRTK: Pointer focus locking',"b""This PR adds a FocusLocked field to IPointingSource.\r\n\r\nWhile a pointer's FocusLocked is true, focus enter / exit events are suspended and that pointer will continue to send manipulation to the last focused object.\r\n\r\nThis is needed for tools like bounding boxes, which require gaze focus for initial selection but not for subsequent manipulation.\r\n\r\nPR passes all input tests."""
273825384,1362,b'Holographic remoting support for mixed reality camera manager',b'Overview\r\n---\r\nInitialization of transparent display settings when holographic remoting in editor using `HolographicEmulationWindow  emulationMode` to detect if remoting to HoloLens in Editor.\r\n\r\nChanges\r\n---\r\n- Fixes: #1287\r\n'
273715433,1361,b'Hand draggable and clicker fixes',"b""Overview\r\n---\r\nUpdated HandDraggable to support knowing the difference between Hand and Controller input. \r\n Because the clicker is considered a controller, but does not raise the `Select` press type, we need to update its press type.  We know it's the clicker because pointer position is not supported.\r\n\r\nAlso, updated the cursor to support not having a pointer.\r\n\r\nChanges\r\n---\r\n- Fixes: #1271\r\n- Fixes: #1203\r\n- Fixes: #741\r\n"""
273623881,1359,b'Fix building APPX for IL2CPP target',b'Overview\r\n---\r\nAdded scripting backend check before restoring nuget packages.\r\n\r\nChanges\r\n---\r\n- Fixes: #1358.\r\n'
273253656,1351,b'Compiler messages cleanup',b'Overview\r\n---\r\nCleaned up compiler warning messages.\r\n\r\nChanges\r\n---\r\n- Fixes: #1334 \r\n- Also fixes hidden field in `Spline.cs`\r\n- Fixes: #1333 (@DaveSullivanAtWork please review this)\r\n'
273248057,1350,b'Added check for valid uiRaycastResults and fixed pointer registration',"b""Changes\r\n---\r\n- Fixes: #1346\r\n- Fixes: #1344 Fixed Pointer registration.  We still register pointers on the fly but now we only unregister them when we get a source lost event raised by the `InputManager`.\r\n- Removed `OnValidate` checking the `UIRaycastCamera` so there's not a warning every time we recompile. (For some reason during deserailization when the script is loading, the `uiRaycastCamera` is null, even though the serialized value is valid.)\r\n- Fixes: #1356 \r\n- FIxes: #1363"""
273245002,1349,b'Remove Manager.prefab',"b'Overview\r\n---\r\nRemoved the `Manager.prefab`,  Users should be using the `InputManager.prefab`.\r\nUpdated the Getting Started docs to reflect this change.\r\n\r\nChanges\r\n---\r\n- Fixes: #1341\r\n'"
273114792,1339,b'SceneContentAdjuster updates',"b""Overview\r\n---\r\nScene content adjuster both wasn't working on an actual device and was overwriting the X and Z values of the GameObject's position. This fixes both of those bugs.\r\n\r\nChanges\r\n---\r\n- Fixes: #1324\r\n- Fixes: #1354 \r\n- Fixes: #1304 \r\n- Fixes: #1384 """
273108917,1338,b'Updating Opaque clipping plane in code to match prefabs',"b'Overview\r\n---\r\nUpdates the code to match the prefabs to prevent confusion.\r\nPreviously, the prefabs were updated to use a near clipping plane of 0.1. The code still had 0.3 as its default.\r\n\r\nChanges\r\n---\r\n- Fixes: #1337 \r\n'"
273010726,1332,b'MRDL->MRTK: Multi-step pointer sources',"b""_(Resubmission of #1318 with clean commit history)_\r\n\r\nThis is a first pass at adding multi-step pointer support to the FocusManager.\r\n\r\nAlso Fixes: #1300 with the Header attribute getting overwritten by `MRTKEditor`.\r\n\r\nThe main change is in IPointingSource, where we go from this:\r\n```\r\npublic interface IPointingSource\r\n{\r\n    ...\r\n    Ray Ray { get; }\r\n    ...\r\n}\r\n````\r\n\r\nTo this:\r\n\r\n```\r\npublic interface IPointingSource\r\n{\r\n    ...\r\n    RayStep[] Rays { get; }\r\n    ...\r\n}\r\n````\r\nWhere RayStep is a struct with an origin and terminus.\r\n\r\nThis enables IPointingSources with curving trajectories, similar to what we see in WMR (parabolic navigation pointers, bendy transform pointers, etc).\r\n\r\n![multi-step pointers](https://user-images.githubusercontent.com/9789716/32563240-94c134f8-c465-11e7-8aca-19b5b28cfee4.PNG)\r\n\r\nBecause this is a breaking change I'm creating a separate pull request to discuss it. So far I can't see a way to do this without breaking previous IPointingSource implementations, but it would be nice if I'm wrong. Would appreciate thoughts / input / suggestions.\r\n\r\n -L"""
272817615,1329,b'TapToPlace needs to let event system know when a click is handled',b'Fixes #1328. If TapToPlace does not call eventData.Use() then fallback handlers will respond to the tap/click event. This can lead to undersirable behavior while placing an object.'
272705028,1326,b'Add microphone helper sample',b'Microphone helper sample to query microphone presence and availability at runtime. Partners have asked for such sample to make decisions in game whether to show speech use helpers.'
272281889,1318,b'MRDL->MRTK: Multi-step pointer sources',"b""This is a first pass at adding multi-step pointer support to the FocusManager.\r\n\r\nalso Fixes: #1300 with the Header attribute getting overwritten by `MRTKEditor`.\r\n\r\nThe main change is in IPointingSource, where we go from this:\r\n```\r\npublic interface IPointingSource\r\n{\r\n    ...\r\n    Ray Ray { get; }\r\n    ...\r\n}\r\n````\r\n\r\nTo this:\r\n\r\n```\r\npublic interface IPointingSource\r\n{\r\n    ...\r\n    RayStep[] Rays { get; }\r\n    ...\r\n}\r\n````\r\nWhere RayStep is a struct with an origin and terminus.\r\n\r\nThis enables IPointingSources with curving trajectories, similar to what we see in WMR (parabolic navigation pointers, bendy transform pointers, etc).\r\n\r\n![multi-step pointers](https://user-images.githubusercontent.com/9789716/32563240-94c134f8-c465-11e7-8aca-19b5b28cfee4.PNG)\r\n\r\nBecause this is a breaking change I'm creating a separate pull request to discuss it. So far I can't see a way to do this without breaking previous IPointingSource implementations, but it would be nice if I'm wrong. Would appreciate thoughts / input / suggestions.\r\n\r\n -L"""
271999473,1315,b'Added issue & pr template',b'Fixes: #1314'
271903840,1312,b'Updated Unity Editor to 2017.2.0p1 MRTP4',b'Fixes: #1311 \r\nFixes: #1236 '
271690670,1309,b'Removed OptimizeSceneForDeviceType',b'Fixes: #1304\r\n\r\n- Removed redundant script and marked it obsolete.\r\n- Updated `SceneContentAdjuster` to take an optional `containerObject`\r\n\r\nTODO\r\n---\r\n- [ ] Fix #1324'
271686746,1308,b'Added Windows API Contract Checker',b'Fixes #1289\r\nFixes #1325\r\n\r\n- Made the 16299 SDK the default target when building with the Build And Deploy Window.\r\n- Made msbuild 15.0 the default build version number.\r\n- Update readme documentation with editor usage for Hololens/IMHD.\r\n    - After this PR is merged we should be able to use one editor version for all WMR apps.'
271659619,1305,b'MRDL -> MRTK: Line creation / rendering classes',"b""![lines](https://user-images.githubusercontent.com/9789716/32469494-d472efb0-c307-11e7-8e56-484f0a863e9e.PNG)\r\n\r\nThis pull request includes classes for line creation, manipulation & rendering, including:\r\n\r\nLines\r\n- Basic Line\r\n- Bezier\r\n- Parabola\r\n- Ellipse\r\n- Rectangle\r\n- Spline\r\n\r\nRenderers\r\n- Instanced Meshes\r\n- Strip Mesh\r\n- LineRenderer\r\n- ParticleSystem\r\n\r\nThese classes are required in the upcoming Navigation & Pointers Academy tutorial. Since time is a factor I'm creating a separate pull request to ensure they aren't held up by revisions of unrelated Stage 2/3 MRDL elements.\r\n\r\nA test scene has been added to Holotoolkit-Examples/UX/Scenes/LineExamples.\r\n@cre8ivepark we could use your input on this scene as it's a bit ugly.\r\n\r\nLooking forward to your feedback /suggestions,\r\n -L"""
271550681,1298,b'Fade Script update',"b""Fixes #1283\r\nFixes #1389\r\n\r\n- Renamed FadeScript to FadeManager because it's a singleton (meta file should auto update reference in all scenes in all projects).\r\n- Removed the F key input mapping that was used for testing.\r\n- Updated Mixed Reality Teleport debug logs.  We now asset the FadeManager is initialized.  The log wasn't fully reflecting the fact that we could have removed this script if we were on the HoloLens as well."""
271154114,1294,b'Resetting controller hands in grab scene',b'Fixes #1261'
269990825,1274,b'UAudioBank',"b'Update to the UAudioManager system.\r\nThe main purpose of this update was to bring the spatial sound support up to date with the changes in the spatilaizer and to separate out the audio event data from the scene.  This allows for ""skinnable"" sound such as dynamically loading the correct sound bank based on language or user preferences.\r\n\r\n1. Moved all the event data to a ScriptableObject.\r\n2. Added export to audiobank option if events are present in the UAudioManager component.\r\n3. Added support for unity volume curve to spatial sounds.\r\n4. Removed deprecated spatailizer properties and associated audio event data.\r\n5. Removed LowPass curve (it was unused).\r\n6. Removed UAudioMiniManager, this system directly referenced scene objects, thus was not supportable as an asset.\r\n6. Updated the sample.\r\n'"
269801452,1269,b'Mrtk small game pad update',b'Fixes: #1229'
269783453,1268,"b'Final merge of dev branch into master, including alternate model loading'",b'The Dev_Unity_2017.2.0 branch will be retired after this PR to prevent future work from being done in it.'
269653466,1265,b'Accessibility changes to make extending the Toolkit easier to maintain.',b'These changes will allow people to maintain their extensions to the Toolkit without having to change accessibility each time they grab a new build.  \r\n\r\nWhenever we update the toolkit we have to go back and make these accessibility changes so it would be nice to have them made into the core so that we and others like us do not need to continuously change the core code. \r\n\r\nThe one class that is more than an accessibility change is GazeManager.cs which I reverted the Ray.Origin back to maintaining a reference. The functionality should be the same for existing users but if there is concern I understand ditching this change.  The benefit of having it saved is that you can override the GazeOrigin for custom gaze interactions.  We do so when allow users to draw with the manipulation gesture. '
269429796,1259,b'Fixed MixedRealityCameraEditor not serializing updated values correctly',b'Fixed #1258'
269360689,1256,b'Pointer uGUI raycasting fix',"b""Fixes: #1244 \r\nFixes: #1267\r\nFixes: #1108 \r\nFixes: #1263\r\nFixes: #1302\r\n\r\nBreaking Changes:\r\n---\r\n- Now all world space canvases are required to assign the `FocusManager.Instance.UIRaycastCamera` (a child of the `InputManager`'s `EventSystem` ) to their event camera field.\r\n- A dialog will pop up the first time you switch to the WorldSpace render mode asking if you'd like to switch.\r\n![image](https://user-images.githubusercontent.com/13334553/32202902-47867410-bd9d-11e7-8f1a-cdb104202224.png)\r\n![image](https://user-images.githubusercontent.com/13334553/32516313-bb313646-c3b7-11e7-94d7-a8166c0b9e82.png)\r\n- Updating your existing canvases is done for you by the `FocusManager` if one exists in your scene.\r\n- You can also call `FocusManager.Instance.UpdateCanvasEventSystems()` at runtime.\r\n- If you're procedurally creating canvases you can also set the world/event camera to `FocusManager.Instance.UIRaycastCamera`.\r\n"""
269343935,1255,b'Fixes Interaction Sources not properly being registered at startup in some cases',"b""Added delayed initialization in `OnEnable` to wait until `Start` in case the `InputManager` instance isn't ready."""
269321474,1254,b'Fixes controller not properly being registered at startup in some cases',"b'Issue discussed on Slack. https://holodevelopers.slack.com/archives/C2H4HT858/p1509135891000114\r\n\r\nBasically: InputManager.RaiseSourceDetected called before Awake is called, therefore sourceStateEventData still null.\r\n'"
269259706,1251,b'Fixed target VR device on 5.6 and 2017.1',b'Fixes #1223'
269258492,1250,b'Updated Teleport logic for HoloLens & Floor Offset in WMR',b'Fixes #1249\r\nFixes #1084 Added Scene Content Adjuster for determining how much scene objects should be offset'
269200388,1247,b'Attempt at unifying the Motion Controller and Xbox Controller support',b'Fixes: #1078 \r\n\r\nTODO:\r\n---\r\n- [ ] How to resolve Motion Controller data from Mapped inputs with `InteractionManager` data.\r\n    - Currently only way to get refined pointer data is through `InteractionManager`\r\n    - Currently only way to get refined touch pad data is through `Interactionmanager`\r\n\r\nBreaking Changes:\r\n---\r\nRenamed Interface `IXboxControllerHander.OnXboxAxisUpdate` to `OnXboxInputUpdate`\r\nUpdated Editor Input Mappings. Users will need to copy or update the mappings via Project Setup Wizard.'
269180483,1246,b'Updated Unity Editor 2017.2.0f3 MRTP3',b'Fixes: #1245 \r\n\r\nPreview:\r\n![image](https://user-images.githubusercontent.com/13334553/32121068-e10fa95c-bb0f-11e7-8ebf-668b920979b7.png)\r\n\r\n'
268895028,1242,b'Adding platform controller models in Editor play mode',"b""This PR adds the ability to use the platform's controller models in the Editor. Previously, this scenario was limited to displaying the controller overrides.\r\n\r\nThe DLL source can be found here: https://github.com/Microsoft/MixedRealityToolkit/pull/122"""
268749833,1240,b'Fix cursor example scenes',b'Use the cursor matching the scene name rather than DefaultCursor\r\nSort scene objects identically'
268150970,1228,b'Prevent Stack exception on InputManager.PopModalInputHandler',"b'Maybe a nit, but if there are no input handlers on the stack, the InputManager throws an exception. Added a check for empty stack to prevent exception being thrown.'"
267494356,1222,b'Events added to TapToPlace',b'OnStartedPlacing and OnStoppedPlacing events added to TapToPlace\r\n\r\nPR for #1221 '
267198108,1215,b'Add Callback logic for Singleton',b'PR of #1213 '
267184368,1212,"b""Fixed Typo's on front page""",b'Spotted two typos in the HoloLens section of the readme.'
267017308,1208,b'Singleton update',b'Fixes #1207'
267006616,1206,b'Allowing default versus overriden controller models',"b""Fix for issue #1174 to allow for default models if the OS's models weren't loaded in addition to allowing for overriding the models."""
266952850,1204,b'Reverted removal of SpeechKeyworkRecognizedEventData',b'Added `SpeechKeyworkRecognizedEventData` back into project to help devs update instead of ripping it out.\r\n\r\nNow properly uses `obsolete` attribute.'
266654189,1198,b'Input navigation test scene fixes',"b""This scene was an old version of the UNET Sharing test scene, which must have happened during the test scene moves or the unet sharing folder move (or a combination of merging both). I've reverted it to a version of the test scene I had locally, and also updated the script to fix a bug I noticed when focus left the spinning cube before navigation ended, which happened often with the motion controllers. """
266649937,1197,b'MRDL -> MRTK : Base merge of MRDL UX functionality to MRTK',"b'Created a new pull request to clean up issues in the dev branch and since the prior pull request was 288 comments and old issues deep.  This should be pretty straight forward.  All enums and datums have been separated out into their own files however there could be additional separation for the editor script portions.  \r\n\r\nthanks,\r\n-pat'"
266611421,1196,b'Motion Controller detection update',"b'Fixes duplicate add attempts when async controller loading causes a delay in the ID actually being in the dictionary\r\n\r\nI also refactored the controller update code, since I had identical code in two places.'"
266579533,1195,b'Add already tracked controllers in Awake',b'#1194 '
266561435,1193,b'Updating Homepage and Getting started guides for the brave new world',"b'Homepage readme updated and tidy\'ed up for the new 2017.2 master update.\r\nGetting Started guide has also been updated to match the new setup.\r\n\r\n*Note\r\nPlease ignore the small fact that I ""forgot"" to create a new branch for this PR :S (it\'s all good)\r\n\r\nPreview the updated [landing page readme](https://github.com/DDReaper/MixedRealityToolkit-Unity/blob/master/README.md)\r\nPreview the updated [Getting started guide](https://github.com/DDReaper/MixedRealityToolkit-Unity/blob/master/GettingStarted.md)\r\nPreview the [Fall Creators Upgrade Guide](https://github.com/DDReaper/MixedRealityToolkit-Unity/blob/master/FallCreatorsUpdate.md)'"
266344740,1191,b'Merge pull request #1 from Microsoft/master',b'update source \xe5\x90\x88\xe5\xb9\xb6\xe6\xba\x90\xe4\xbb\xa3\xe7\xa0\x81'
266199911,1187,b'Fixed typo in GestureInteractiveControl',b''
266134988,1182,b'Updated sharing scenes to use Sharing World Anchor Manager',b'fixed #1171 '
265962041,1178,b'Dev Branch -> Master Merge',b'Merges all the changes from the dev branch into master.'
265957235,1177,b'Properly supports Hand position and Fixed HandDraggable',"b'Fixes #1176\r\n\r\nTo test, build and run the `InputManagerTest` scene on the HoloLens and drag around the objects.'"
265939049,1175,b'Dev Changes before Master Merge',"b'- Changes to Dev branch before #1162 \r\n- Includes merge syncs from master branch.\r\n- View Updated Readme preview [here](https://github.com/StephenHodgson/MixedRealityToolkit-Unity/blob/MRTK-Dev-Local/README.md).\r\n- Reverts #1136\r\n\r\nBuilds for 5.6, 2017.1, and 2017.2\r\nAll Unit Tests pass for 5.6, 2017.1, and 2017.2'"
265800332,1168,b'Fixed AudioManager Editor property names for 3D Sound properties.',b'Fixed the curve property names to match the new casing.'
265762811,1167,b'Update GettingStarted.md',b'typo'
265696015,1166,b'Updated SharingSpawnTest to use speech input handler and source',"b""I had a quick look to see if any of the other example scenes have this issue, but couldn't see any\r\n\r\n![image](https://user-images.githubusercontent.com/17457941/31603914-94048632-b259-11e7-8971-3ee04dd091c5.png)"""
265598692,1165,b'Create layout interactive elements',"b'New, small Example for Dynamic Buttons, see https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/1137'"
265455903,1163,b'Fixes  failing to find msbuild when VS 2015 not installed and using 14393 SDK',"b""Fixes #1146 Wouldn't build for SDKs that use ms build version 14 and VS 2015 was not installed."""
265449469,1162,b'Dev branch -> Master',"b'- Fixes #1151 Merges all the changes from Dev branch into master branch.\r\n- View Updated Readme preview [here](https://github.com/StephenHodgson/MixedRealityToolkit-Unity/blob/MRTK-DevMerge/README.md).\r\n- Updated `ProjectVersion.txt` to min supported editor version 5.6.3p4\r\n- Reverts #1136\r\n\r\nBuilds for 5.6, 2017.1, and 2017.2\r\nAll Unit Tests pass for 5.6, 2017.1, and 2017.2'"
265443657,1161,b'Master->Dev sync',b'Changes from today.'
265423536,1160,b'Singleton changes.',"b""Updated singleton to search the scene if an instance isn't found.\r\n\r\nAlso reverted the `AddGlobalListener` and have it handle itself better when cleaning up.\r\n\r\nFixes #1157 """
265372530,1158,b'Dev/master sync',b'More sync changes from the Dev branch.\r\n\r\nThis should make the Dev branch and the master branch mostly the same except for some 2017.2 specific additions and API changes.\r\n\r\nWe should also address any changes @keveleigh and others have about the Dev branch sync changes here as well from #1100 \r\n\r\nFixes #1159'
265228056,1155,b'Added a note to capabilities RE: Remote Profiler',"b'Only just found this one, you need Private Network Client Server enabled in order to use the Unity Remote Profiler with Hololens.\r\n\r\nWording may need tweaking, or perhaps it would be best moved into a separate menu option for ""Enable Remote Profiler"" that pops up a window saying ""This will enable the \'Private Network Client Server\' capability, are you sure?"" instead.'"
265160825,1153,b'Cleans up event handlers and Tracks previously untracked controllers if seen in InteractionSourceUpdated event.',b'fixes #1149 \r\nfixes #1150 '
265160133,1152,b'Adds SingleInstance from dev branch and fixed #1031',b'fixes #1031 '
265125459,1148,b'Mrtk master branch sync with Dev',b'More sync changes from the Dev branch.\r\n\r\nThis should make the Dev branch and the master branch mostly the same except for additions and API changes.\r\n\r\nWe should also address any changes @keveleigh and others have about the Dev branch sync changes here as well.'
265117911,1147,b'Allow a SingleInstance to be null without spamming the debug console.',b'Fixes #1031 '
265022932,1144,"b""Fixing little typo 'envionment'""",b'Changed to environment'
265018624,1143,b'Unity Editor Update 2017.2.0f3 MRTP',b'Fixes #1114 '
264997857,1141,b'Fixed GLTF build errors',b'Fixes #1139'
264996924,1140,b'Extended InteractiveRadialSet to allow multiple selection',b'Fixes #1135'
264927776,1136,b'Fixes build discovery',"b""I may be totally missing something here, but I'm just going off what the build window generates for me (that is, it builds to the build folder directory, it doesn't build to incremental subfolders or anything like that)\r\n\r\nCurrently, it will search the build folder for folders, then search those folders for an `AppPackages` folder and use that to identify it's a build. But this isn't how builds are generated by the build tools. The `AppPackages` folder is in the root of the build folder, so what should actually be iterated through is the contents of the `AppPackages` folder in the root of the build folder. _Those_ are the individual builds."""
264808743,1133,b'Keyboard optimization',"b""Fixes #853\r\nFixes #945\r\n\r\nSince we have the UI raycast changes now in the master it's time to add the keyboard optimizations since I can be sure the raycasting will not cause issues.\r\n\r\nI explained most of the optimizations already in #853 and I ended up with some additional minor changes:\r\n\r\n1. Add sprite atlas for icons and textures used on the keyboard so all of them can be drawn at the same time.\r\n2. Remove all z-positions in the canvas (this is why I needed the raycasting changes). The z-positions causes canvas batching to break and all elements will be drawn on their own.\r\n3. Set all highlight elements as the last sibling since that somehow broke batching for its siblings too.\r\n4. Disabled rich text and raycast-target on a lot of elements that didn't need it.\r\n5. Removed the background of the input field at the top of the keyboard. That as well broke the batching and I don't know why. The looks are almost the same so I think this its fine.\r\n\r\nAll of these changes are on the Keyboard prefab and there are no code changes involved (other than the minor refactoring I did on UICollection).\r\nThis should be tested on the HoloLens as it was pretty much unusable before due to the lag from the keyboard. Unfortunately, I won't have access to one in the next few weeks. It can also be tested in the KeyboardTest-scene.\r\n\r\nFor the sprite atlas, I also had to turn on the Sprite Packer in the new mode. This will also be required for people that want to use the keyboard. Without this setting, the performance of the keyboard will be slightly worse. \r\nMaybe it would make sense to add this setting to the configuration steps?\r\n\r\n"""
264787523,1132,b'Fixes issue with Editor input if build target is not UWP',b'Fixes issue with Editor input if build target is not UWP\r\nFixes #1120 and enables mouse usage in a normal UWP app and other standalone apps.'
264780157,1131,b'Mrtk dev editor update to 2017.2.0f3 MRTP',b'Fixes #1114 '
264775107,1128,b'Mrtk upgrade guide',b'Fixed #882 Preview [Here](https://github.com/StephenHodgson/MixedRealityToolkit-Unity/blob/MRTK-UpgradeGuide/UpgradeGuide.md)\r\n\r\nAlso updated the roadmap.'
264746769,1126,b'Adding Add Input Manager Axes menu option',"b""This allows a dev to add our defined axes to their InputManager.asset without completely replacing their existing axes.\r\n\r\nThe edits to the repo's InputManager.asset are a reordering of the axes to match this tool's ordering.\r\n\r\nFixes #1127"""
264668674,1122,b'Add a null-check of TeleportMarker before instantiating the object.',b'Fixes #1112 Added a null-check of TeleportMarker before instantitiating the object.\r\nFixes #1113 Add an option to use sharedMaterial when fading.'
264539604,1117,b'Handle a null switch and gracefully stop searching',"b""This resolves an issue when calling `GetInternalSwitchAddressInfo()` where when failing to locate the adapter, it would throw a silent exception and never stop searching - giving the impression that it's still trying to find something when it never gets to line 58 to check if it's null."""
264240011,1111,b'Update README.md',b'Fixed the links to the test scenes\r\n\r\nFixes #1110 '
263955011,1106,b'Updated medical example to use SpeechInputSource.cs and SpeechInputHandler.cs',b'Fixes #1102 \r\n\r\n![image](https://user-images.githubusercontent.com/17457941/31348458-9b5ff08e-ad17-11e7-8575-d5e9bf1f31f5.png)\r\n'
263912829,1104,b'Remove Duplicate Troubleshooting in README.md',b''
263689129,1101,b'Fix random focus change on layered canvas ui elements',"b""The current UI raycasts logic only compares the distance between elements to find the closest one. This causes issues with elements in the same z-plane. Using the same z-plane for all elements is required for a performant UI as I've demonstrated in #853. \r\n\r\nThe current code would work in theory as it is, however, due to floating point errors in distance calculations it can happen that elements appear to be closer by a fraction. \r\n\r\nThe fix for this is to compare the canvas depth instead. Depth dictates which element gets drawn last on the canvas. So now we compare elements by depth when they are on the same canvas and otherwise compare by distance.\r\n\r\nI've tried writing a test for this but somehow I can't get the `EventSystem.current.RaycastAll` to work in the editor mode. Instead, I've added a test scene.\r\n\r\nA Little demo of the test scene how this behavior looks like. There are also 2 canvases so you can make sure the front one is hit first.\r\nBug: https://puu.sh/xSF2R/c4c74d41d2.webm\r\nFix: https://puu.sh/xSFcL/1048d4c40c.webm\r\n\r\nWhile fixing this I also stumbled upon something that seems to be a bug in Unitys raycasts. When raycasting the center of a canvas (within ~0.0001) the raycast might not hit some elements on the canvas. After fixing the bug above I still got some minor flickering which was caused by this. \r\nhttps://puu.sh/xSC9c/f7a83785a9.webm"""
263662144,1100,b'Master Branch Merge (Input System Backport Sync)',"b'- Sync changed from Master-InputBackPort #1098 to prevent older projects from being incompatible.\r\n- Also merges the latest Master branch changes into the dev branch.\r\n- Fixes #1097 Removed `StartAwareSingleton` and `StartAwareBehaviour` from core input system code.\r\n- Fixes #868 \r\n- Fixes #1045\r\n\r\nBreaking Changes:\r\n---\r\n- Moved `InteractionSourceExtensions` into the Input feature folder.\r\n- fixed spelling in `ICurosr.SetVisibility` was `SetVisiblity`\r\n- `RegisterPointableCanvas` is now obsolete.\r\n- `FocusManager.UnregisterPointer()` is now `UnRegisterPointer()`\r\n- `GazeManager.UpdateHitDetails(FocusDetails focusDetails, bool isRegisteredForFocus)` is now `UpdateHitDetails(FocusDetails focusDetails, RaycastHit hitInfo, bool isRegisteredForFocus)`\r\n- `DebugInteractionSourceState` public fields are now PascalCase.\r\n- `FocusManager.BorrowPointerEventData()` is now `GetPointerEventData()`\r\n- Removed `SpecularHightlight.shader`\r\n- Marked `StartAwareBehaviour` obsolete.\r\n- Marked `StartAwareSingleton` obsolete.'"
263591219,1098,b'Input System back port from Dev branch',b'Changes\r\n---\r\n- Fixes #1027 Porting Input System changes from Dev branch.\r\n- Should make it easier to update older projects to updated Unity APIs and Input System.\r\n- Marking all removed public methods and classes as obsolete where we can.\r\n- Updated all the test scenes.\r\n- Updated all the Unit Tests and they all pass.\r\n- Fixes #1077\r\n- Fixes #1037\r\n- Adds better scene setup support via config menu options\r\n![image](https://user-images.githubusercontent.com/13334553/31418579-aa1acd36-adeb-11e7-86c8-b6c5875c533b.png)\r\n\r\nBreaking Changes\r\n---\r\n- `TryGetPosition` is now `TryGetPointerPosition`\r\n- `TryGetOrientation` is now `TryGetPointerRotation`\r\n- All other changes should throw `Obsolete` warnings with suggested updates.'
263483686,1096,b'Updated Unity Editor to 2017.1.2',b'Fixes #1095 \r\nFixes #1066'
263261942,1093,b'Merged Test and Examples folders',b'Fixes #866 \r\n![image](https://user-images.githubusercontent.com/13334553/31253136-8506cd36-a9d8-11e7-9e2d-d701a137a6c0.png)\r\n'
263248705,1092,b'Fixed VR enabling on build target group in Project wizard.',"b""Incorrectly changed it to `stereo` instead of `WindowsMR`\r\n\r\nUpdated `HoloLens` to `WindowsMR`\r\n\r\nNo changes needed to master branch, because the SDK names did not change, and there's no way to enable occluded devices."""
263240569,1091,b'Renamed UI Feature area folder',"b""While we're going and renaming and moving things, we should just get it done all at once, lol.\r\nNo classes were renamed or changed.\r\nFixes #1032\r\nSee #1007\r\n\r\nUI -> UX\r\n![image](https://user-images.githubusercontent.com/13334553/31251010-6ef47bf8-a9d1-11e7-89ff-632918754d06.png)\r\n"""
263231496,1090,b'fix missing MicStream reference',b'Moved `Sharing\\Scripts\\VoiceChat` scripts that had dependencies to MicStream dll into the Tests folder.\r\n\r\nShould have been included in https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/1085#issuecomment-334558827'
263227231,1089,b'Mrtk dev master sync',"b""Latest changes from master.\r\nBreaking change: `MicStream` moved to `Tests\\Input\\Scripts\\VoiceChat` folder bc it does't pass WACK\r\nSee #1085\r\nSee #1088 \r\nSee #1091\r\nSee #1093\r\n"""
263214113,1088,b'Input Feature area sync',b'See #1085 \r\n\r\nRenamed `InteractionSourceInputSource` to `InteractionInputSource`'
263203436,1086,b'Sync with master branch Input reorganization.',b'See #1085'
263192583,1085,b'Input Feature area folder reorganization',"b'Reorganized the `HoloToolkit/Input` folder to closer align with the dev branch.\r\n\r\nMoved `MicStream` dlls and class into examples so the Input feature area passes WACK. See #987\r\nRemoved obsolete `GameControllerManipulator`, `KeywordManager`, and `DisplayKeywords` classes.\r\nRenamed `SpeechKeywordRecognizedEventData` to `SpeechEventData`.\r\nRenamed `GesturesInputSource` to `InteractionInputSource`. (matches Dev branch rename & GUID)\r\nRenamed `ManualHandControl` to `EditorInputControl`. (matches Dev branch rename & GUID)\r\nMoved Xbox Controller scripts into their own folder.'"
263032852,1083,b'Added UnitTests for WorldAnchor.',b'I have added the promised UnitTests.\r\n\r\n(#1074)'
262977171,1082,b'Latest changes from master',b''
262925656,1081,b'Merging master into Dev branch',"b'Fixes IL2CPP not building, among other things.'"
262924647,1080,b'Changing controller visualizer to use onBeforeRender',b'This provides the absolute latest position and rotation of the controller via polling for the best visualization each frame.'
262910258,1079,b'Changing API Compatibility Level to .NET 4.6',b'Fixes #1051 '
262810884,1075,b'Fixed the logic fault to assign the anchorName.',b'Fixes #1074\r\n\r\nMissing UnitTests.'
262647686,1073,b'Adding in interaction starter package and adaptive performance tools',"b'AdaptivePerformance replaces FPSViewportQualityBundle.\r\n\r\nThis tool is meant to help apps achieve frame rate on different hardware by adapting quality settings, as well as hint at a good starting level on first run.  See usage instructions here:\r\nhttps://developer.microsoft.com/en-us/windows/mixed-reality/Performance_recommendations_for_immersive_headset_apps'"
262599523,1072,b'Misc Fixes',b'Fixes #1067\r\nFixes #1071 \r\nFixes https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/1059#discussion_r142541238\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/31150762-c0cfe734-a849-11e7-852b-95720809f7a0.png)\r\n'
262556167,1069,b'Sharing Service IP input Fix',b'Fixes #1068'
262528360,1065,b'updated gaze controls on mixed reality camera prefabs',"b'Was supposed to be apart of the other PR, but awe well! \xf0\x9f\x98\x86 \r\nFixes #1044'"
262525851,1064,b'Mrtk dev2017.2 master merge update',b'See #1059\r\nSee #1061\r\nSee #1062'
262502162,1063,b'Update Readme to fix build readme link',"b""Looks like it's been left from when the BuildAndDeploy folder was renamed"""
262488543,1062,b'Updated HoloLensCamera.prefab Joystick Gaze Control Mappings',b'Fixes #559'
262276100,1061,b'Updating shader paths to MixedRealityToolkit and adding licenses where missing',b''
262275477,1060,b'Mrtk dev2017.2 master merge sync',b'Syncing up the Dev branch with master changes.'
262271946,1059,b'Mrtk forward compatibility',b'Redone PR of #1048 (Messed up my rebase)\r\n\r\nGets some of the forwards compatibility issues out of the way.\r\n\r\nMost changes are to the Build and Deploy windows and Mixed Reality Toolkit Menus\r\n\r\nFixes #851\r\nFixes #895\r\nFixes #1018\r\nFixes #1019'
262264545,1057,b'Mrtk dev2017.2 sharing fixes port',b'See #1056'
262263982,1056,b'Fixes issue with Start method inheritance.',b'Fixes #1055'
262245707,1054,b'Grab Mechanics Revert',b'Reverts MotionController-GrabMechanics from dev branch until PR is merged.\r\n\r\nhttps://github.com/Microsoft/MixedRealityToolkit-Unity/pull/1021#issuecomment-333668365'
262204028,1053,b'Mrtk 2017.2 Xbox Controller Regression Fixes',b'Port of #1052'
262199784,1052,b'Fixed XboxController update regressions',b'Regression from #994 \r\n\r\n- Event System Overrides were mapped incorrectly.\r\n- `XboxControllerMappingTypes.None` was not handled when getting and setting the mapping types.'
262180850,1050,b'Update Dev Branch Editor to 2017.2.0f2-MRTP',b'Fixes #1047\r\nFixes #988'
262168971,1049,b'Mrtk 2017.2 forward port',b'Patch of #1048 \r\nFixes #851\r\nFixes #895\r\nFixes #1018\r\nFixes #1019'
262168380,1048,b'Mrtk forward compatibility',b'Gets some of the forwards compatibility issues out of the way.\r\n\r\nMost changes are to the Build and Deploy windows and Mixed Reality Toolkit Menus'
261874381,1043,b'Merge',b''
261474145,1041,b'Typo',b''
261146372,1035,"b'Revert ""Instance isn\'t found if class is on a disabled GameObject.""'","b""Reverts Microsoft/MixedRealityToolkit-Unity#1033\r\nThis change completely blows up in the editor.\r\nNeed to find a better way to filter out what's actually in the scene vs. on disk.\r\n"""
261125225,1034,b'More WSA wrapping',b'Now builds for win standalone. (after Input Update gets merged)'
261116489,1033,"b""Instance isn't found if class is on a disabled GameObject.""",b'#1031 '
260822419,1028,b'Input Updates',"b'Fixes #875 \r\nFixes #940\r\nFixes #1044\r\n\r\nThis PR is the first step to address the compatibility issues with the input system on the master branch, and gets the system into a state where we can start to back port some of the changes into master to help give developers way forward.'"
260806957,1026,b'Updating input tests with FocusManager and new InputManager checks',b'Fixes #1022\r\n\r\nThe InputManager changes mean that it now takes into account whether the eventdata was actually used versus an event firing.'
260795760,1024,b'UNet Update.',"b""Wrapped UNet classes in UWA compiler directives.  Doesn't build for other platforms yet, but at least it compiles nicely in the editor."""
260782547,1023,b'Removes misc compiler warnings.',"b""Assigned default values, if none.\r\nUpdated `WebRequest.send()`.\r\nUpdated null check because structs can't be null."""
260771494,1021,b'Motion controller examples.',"b""I've added a folder to the Dev2017 branch that contains easy to use components for grab/scale/rotate/throw. Folder is located in: Assets\\HoloToolkit\\Input\\Tests\\CK_GrabMechanics  Test scene located in Assets\\HoloToolkit\\Input\\Tests\\CK_GrabMechanics\\Scenes ***Right now all of this is HUX/MRTK independent, so it does not rely on Paseb's merge. """
260758550,1017,b'minor updates.',b'Structs can never be null.\r\nRemoves misc warning messages.'
260742092,1016,"b'Latest master -> Dev branch merge, with the new gamepad work'",b''
260728347,1015,b'Editor update to U2017.2.0f1',b'Updated to U2017.2.0f1\r\n\r\nduplicate #1012'
260726479,1014,b'Merge from master with2017.2',b'Redo with commits'
260724208,1013,"b'Revert ""Updated Editor to 2017.2.0f1.""'","b""Reverts Microsoft/MixedRealityToolkit-Unity#1012\r\n\r\nLet's wait to do this until @keveleigh gets his master merge in with all the commits."""
260709047,1012,b'Updated Editor to 2017.2.0f1.',b'Moved some test scripts out of the core toolkit folder and into tests folder.'
260358821,1007,b'MRDL->MRTK [Dev unity 2017.2.0]',"b'This is the first pull request for integrating functionality from [MRDL(MRDesignLabs)](https://github.com/Microsoft/MRDesignLabs_Unity) into MRTK.  This pull request also adds motion controllers as an input source so that the can be used as a direct input source. \r\n\r\nAdded in this pull request\r\n- InteractionReceivers\r\n- [Buttons](https://github.com/Microsoft/MRDesignLabs_Unity/wiki/Interactable-Object)\r\n- [Object Collections](https://github.com/Microsoft/MRDesignLabs_Unity/wiki/Object-Collection)\r\n\r\nNext set of things to integrate:\r\n- [Dialogs](https://github.com/Microsoft/MRDesignLabs_Unity/wiki/Dialog)\r\n- Debug Menu and Debug Panel\r\n- Solvers\r\n- [App Bar and Bounding Box](https://github.com/Microsoft/MRDesignLabs_Unity/wiki/App-Bar-and-Bounding-Box)\r\n- Utility Extensions\r\n\r\nthanks,\r\n-pat'"
260088702,1006,b'Collider bounds tests',"b""Add tests for `TransformExtensions.GetColliderBounds`\r\n\r\nAlso, some minor changes to the method itself to use early return and I don't think we need the warning as the description mentions that it will return empty bounds when there is no collider.\r\n"""
259943375,1005,b'Fixed improper OnDestroy implementation',b'See https://github.com/Microsoft/MixedRealityToolkit-Unity/commit/290cec0854c67b923e810a8a440c55151bcb8a85'
259640580,1003,b'Asset Organization',b'See #986\r\n\r\nOrganizes the branch to better reflect the master branch folder organization.'
259409768,998,b'Reloading keyword in speech input handler',b'Fixes #996\r\n\r\nReloading keyword in speech input handler when changed in speech input source'
259004309,994,b'Xbox Controller Updates',"b'- Addresses some feedback from @keveleigh.\r\n- Adds a `None` enum to the `XboxControllerMappingTypes` that will break all existing settings.\r\n    - Sorry, `None` should have been there from the beginning!\r\n- Added a `XboxControllerHanderBase` for easily creating your own implementations.\r\n    - Handy helper functions for getting buttons based on enum to change/update inputs on the fly.\r\n- Added optional parameters to `XboxControllerSource` when overriding events on the `StandaloneInputModule`'"
258660235,991,b'Fix haptics bug for durations shorter than 1 second',"b""Turns out there's an easier way to convert seconds into a TimeSpan :)"""
258466888,989,b'Added a Cursor Offset to the TapToPlace script',"b""Adds an offset to the placement position for situations where the centre of a mesh is not the same as the centre of the GameObject.\r\n\r\n(Should I have opened an Issue first btw? Wasn't sure if it mattered since it's such a small feature)"""
258339289,986,b'Asset Organization',b'Fixes #867\r\nFixes #866 \r\nWorkaround for #987 by temporarily moving dll out of the core toolkit.\r\n(It will be put back when passing [WACK](https://docs.microsoft.com/en-us/windows/uwp/debug-test-perf/windows-app-certification-kit))\r\n- Updated URLs and links in all readme files.\r\n-  Merged `HoloToolkit-Tests` into `HoloToolkit-Examples`.\r\n-  Renamed `HoloToolkit `folders to `MixedRealityToolkit`.\r\n-  Renamed `SpeechKeywordRecognizedEventData` to `SpeechEventData`.\r\n-  Moved `MicStreamSelector.dll` to Examples because it does not pass WACK compliance.\r\n-  Moved `MicStream.cs` to `MixedRealityToolkit-Examples/Input`.\r\n-  Moved `VoiceChat` folder in sharing to the `MixedRealityToolkit-Examples/Sharing/SharingSerivce`.\r\n- Removed Obsolete `KeywordManager` & `DisplayKeywords`.\r\n- Removed Obsolete `GameControllerManipulator `.'
258326443,985,b'Sharing Service Utility',b'Fixes #490\r\n\r\nAdds the option to download the Sharing Service executable from this repository.'
258252932,983,b'Fixed some serialization errors when building for standalone.',b'Moved two bools out of the WSA definition.'
258193973,981,b'update to BuildAndDeploy',b'Fixes #969\r\nFixes #982'
258192804,980,b'Update to AutoJoinSessionAndRoom',b'Fixes #979 \r\nHandles race condition for reconnection.\r\n\r\n'
257902717,977,b'Updated MotionControllerTest scene with debug display labels',b'Updated MotionControllerTest scene with debug display text labels\r\n\r\n![2017-09-14 18_21_02-mixed reality portal](https://user-images.githubusercontent.com/13754172/30462636-dc6264b8-997b-11e7-984a-c52277c9d14c.png)\r\n\r\nAdded motion controller 3D model related information text too.\r\n![2017-09-14 23_55_00-unity 2017 2 0b11 personal 64bit - motioncontrollertest unity - holotoolkit-un 2](https://user-images.githubusercontent.com/13754172/30470513-e7653f9c-99a9-11e7-847e-bae14c98bf3f.png)\r\n'
257591988,975,b'Unity 5.6 support',b'Added Unity 5.6 support'
257512241,974,b'Asset Reorganization',b'Fixes #867\r\nFixes #866 \r\n\r\n- Merged `HoloToolkit-Tests` into `HoloToolkit-Examples`\r\n- Renamed `HoloToolkit `folders to `MixedRealityToolkit`\r\n- Renamed `SpeechKeywordRecognizedEventData` to `SpeechEventData`\r\n- Moved `MicStream.cs` to `MixedRealityToolkit-Examples/Input`\r\n- Moved `MicStreamSelector.dll` to Examples because it does not pass WACK compliance.\r\n\r\nSee updated [Input documentation preview here](https://github.com/StephenHodgson/HoloToolkit-Unity/blob/HTK-XboxController/Assets/HoloToolkit/Input/README.md)'
257500933,972,b'Reorganized folder structure to better match master branch.',b'See #986'
257500539,971,b'Reorganized Project',b'Moved tests out of the main `Holotoolkit` folder and into `Holotoolkit-Examples`'
257466335,970,b'Sharing Service Utilities',b'Fixes #490\r\n\r\nAdds the option to download the Sharing Service executable from this repository.'
257236147,967,b'Examples regression fix',b'fixed some members not being renamed properly in last pr'
257224545,966,b'Updated Main readme page table formatting.',b'See [preview here](https://github.com/StephenHodgson/HoloToolkit-Unity/blob/readme-update/README.md#roadmaps)'
257218632,965,b'Updating remote mapping for IL2CPP builds in master',"b""Fixes #265\r\n\r\nThis also fixes a bug where spatial mapping file saving didn't properly get data from the remote mapping source."""
257198290,964,b'Fix teleport to match current shell and update stage to not move during teleport',b'Fixes #843.\r\n\r\nUse MotionControllerTest.unity to test.'
257183818,963,b'Editor update and misc compiler warning fixes.',b'Updated Editor to 2017.2.0b11.\r\nUpdated obsolete quality settings usages.\r\nfixed misc warnings.'
257148850,962,b'Quality Settings regression fix.',b'Fixes #950\r\n\r\nReverted removal of QualitySettings Hack.\r\n[Currently no APIs available](http://answers.unity3d.com/questions/886160/how-do-i-change-qualitysetting-for-my-platform-fro.html) to change default platform quality setting via code.\r\n\r\nSee #949'
257144114,960,b'Turned off material importer for primitives',b'Primitives keep importing unused materials into the project.'
257131054,959,b'Wrapping haptics calls with UNITY_WSA to prevent errors on other build targets',b''
256772387,955,b'Fixed null reference when setting icon in icon generator with bad dimensions.',b'Fixed null reference when setting icon in icon generator with bad dimensions.'
256469437,952,b'Fixing glTF controller emission & normal mappings and override animations',"b""Making glTF loading take in a material instead of a shader, since Unity doesn't build unused shader configurations.\r\n\r\nAlso, refactored controller animation to be dependent on developer preference instead of override/non-override, to allow for specialized overrides to be animated."""
256432696,949,b'Fixed QualitySettings bug.',"b""Fixes #950 \r\n\r\nThe default names for QualitySettings Levels have been changed from Unity 2017.1.0f3.\r\nSo I Fixed it.\r\n\r\nRelease note : https://unity3d.com/jp/unity/whats-new/unity-2017.1.0\r\n(Please search the word 'Graphics Quality Levels'. )"""
256382620,948,b'Fixing remote mapping for IL2CPP support',"b""See #265 \r\n\r\nThis also fixes a bug where spatial mapping file saving didn't properly get data from the remote mapping source."""
256124914,943,b'Mrtk xbox controller port from htk',b'- [ ] TODO: fix scenes with old references to input manager mappings.\r\n- [ ] TODO: implement base overrides.\r\n\r\nSee: https://github.com/Microsoft/MixedRealityToolkit-Unity/pull/936'
256058662,942,b'Fix glTF loader rotation calculation.',"b""Removed a workaround for Grip/Position rotation returning incorrect values. Removing a manual calculation (which wasn't working properly with the provided glTF models) in favor of Unity's built in rotation matrix."""
255772659,938,b'Updating to 2017.2.0b10',b''
255449840,936,b'Added Xbox S Bluetooth controller support.',b'- Fixes #362 \r\n- Properly supports Xbox controller via Input Manager. (includes bt Xbox S support.)\r\n- Downloads the `InputManger.asset` file from GitHub and stores the old one.\r\n- Reorganized folders and scripts to better reflect 2017.2 folder structure in input folder.\r\n- See updated [Input documentation preview here](https://github.com/Microsoft/MixedRealityToolkit-Unity/blob/master/Assets/HoloToolkit/Input/README.md)\r\n\r\nTODO:\r\n\r\n- [x] ~~Add documentation.~~\r\n- [x] ~~Nicelooking test scene.~~\r\n- [x] ~~Figure out an easy way for people to copy `InputManger.asset` into their own projects.~~\r\n- [x] ~~Test Xbox Platform builds.~~\r\n'
255438376,935,b'Fix for speech cross platform support',b'Addition to #927 \r\nSince we expose the confidence level in the editor now we also need the using.\r\nThose compiler directives are really annoying to spot in a diff.'
255127208,932,b'Updated Motion Blending for uGUI elements.',b'Fixes #700'
255107646,931,b'Htk test & example scenes update',"b""- Fixes #570 Removed Invoke on an invalid method.\r\n- Fixes #779 Updated `TextToSpeech`'s functionality and example scene.\r\n    - Renamed `Start` to `Awake`.\r\n    - Renamed `TextToSpeechManager` to just `TextToSpeech`.  (Manager implies there's only one instance.)\r\n- Fixes #807 Missing prefab in double sided example.\r\n- Fixes #880 Popup example script and animation controller.\r\n- Renamed a few Scenes for clarity."""
255105006,930,b'Fix for mismatched Mic network stream',b'Fixes #786 \r\n- Added HTRF bits to be read from the stream to prevent mismatch on receiving end.'
255101696,929,b'Updated Unity Editor version to 2017.1.1f1',b'[Updated Unity Editor version to 2017.1.1f1](https://unity3d.com/unity/whats-new/unity-2017.1.1)\r\n\r\nFixes #928'
255092951,927,b'Added confidence level for the keyword recognizer ',b'Fixes #925\r\n\r\nAdded confidence level for the keyword recognizer in SpeechInputSource and assosiated editor script.\r\n![speechinputsource](https://user-images.githubusercontent.com/24978515/30035103-28e7a3b8-91af-11e7-8a55-655ad7d24ecd.PNG)\r\n'
255033463,926,b'Update HandGuidance.cs',"b'Fixes #870 \r\n- Moved `#if UNITY_WSA` to allow player to build as public fields `Cursor`, `HandGuidanceIndicator`, and `HandGuidanceThreshold` should be visible to the editor.\r\n- Moved `private GameObject handGuidanceIndicatorGameObject = null;` to be inside `#if UNITY_WSA`'"
254885118,924,b'Fixed SpatialMesh disapearing when AllowMeshVisualizationControl enabled',"b'I noticed if you have DrawVisualMeshes enabled and AllowMeshVisualizationControl enabled, the SpatialMesh Visual would turn off due to the ToggleSpatialMesh method.'"
254719386,921,b'Workaround for IL2CPP compile settings fail to copy System.IO',"b'The error you see when compiling with IL2CPP in Player Settings is:\r\nThe type \'TextReader\' is defined in an assembly that is not referenced.\r\nYou must add a reference to assembly \'System.IO, Version=4.0.0.0,\r\nCulture=neutral, PublicKeyToken=b03f5f7f11d50a3a\'.\r\n\r\nUnity bug id:\r\nhttps://fogbugz.unity3d.com/default.asp?947451_q94vln0ba754ueij\r\n\r\nWorkaround: Manually copied System.IO from from\r\n""<UnityInstallDir>\\Editor\\Data\\MonoBleedingEdge\\lib\\mono\\4.5\\Facades""\r\nand made it conditional compile for UWP only.'"
254455193,918,b'Slightly increase the scale of the teleport marker asset',b'This made it a lot more visible for me without obstructing content.\r\nApps could consider dynamically scaling it as well.\r\n\r\nFixes #916 '
254166817,911,b'Add more tests',"b""This PR doesn't change any logic in the main Project. I've renamed the `EditorUtils` to `TestUtils` to make it more clear that they are not to be used in the main project since I'm using some reflection in there.\r\n\r\nThe main functionality of `TestUtils` is the `ClearScene` method. I try to call this in most `TearDown` and `SetUp` methods in each test. The reason behind this is that unity does not delete objects in the test scene after it ran them and some tests rely on there being no previous objects.\r\nFor example this test:\r\n```csharp\r\n        [Test]\r\n        public void GetNullCameraFromCache()\r\n        {\r\n            Assert.That(CameraCache.Main == null, Is.True);\r\n        }\r\n```\r\n\r\nIf some other test created a camera before this one ran it would not return null and make my test return false results. \r\n\r\nAnother important functionality is being able to call `Awake`, `Start` and `Update` methods since they will not be called when a script is instantiated in the test scene. \r\nFor example, I create a cube in front of the camera that implements `IFocusable` in the scene and then simulates 1 frame with the `GazeManager` by calling its update and check if the cube received the event. \r\n\r\n```csharp\r\n        [Test]\r\n        public void FocusChangeFullIntegration()\r\n        {\r\n            var handler = CreateCubeTestHandler().CallAwake().CallStart();\r\n\r\n            GazeManager.Instance.gameObject.CallUpdate();\r\n\r\n            Assert.That(receivedEventSources.Count, Is.EqualTo(1));\r\n            Assert.That(receivedEventSources[0], Is.EqualTo(handler));\r\n        }\r\n```\r\n\r\nI've added tests for `CameraCache`, `ActionExtensions`, `EnsureComponent`, almost all cases in `InputManager.HandleEvent` and that one full integration test with the `GazeManager` you see above.\r\n\r\nAnother thing to keep in mind when using NUnit in combination with Unity is that it comes with the same issues when comparing unity objects to null. `Is.Null` will not return the same result as `gameObject == null`. I've tried making a custom constraint for this but I haven't figured out a good name yet and also had some issues getting `Not` to work. Maybe I'll just add them as `TestUtils.UnityNull` and `TestUtils.UnityNotNull`."""
254150070,910,b'Adding haptics extensions to InteractionSource',"b""These features won't be supported as Unity APIs in Unity 2017.2, so these extension methods are meant to close the gap until they're implemented."""
254143581,909,"b'Added framerate, viewport manager and quality manager'","b'Dropping the FPS canvas prefab on a main camera will allow users to see their current framerate vs target framerate, and how that is affected by changing quality settings or viewport scale.   I have given this code for Unity 2017.2 and 5.6 MRTP.'"
254062886,905,b'Enhanced 3D primitives',b'Here are a set of enhanced primitives in the Prototyping section of HoloToolkit-Examples. Mentioned as an enhancement in issue #847'
254049825,904,b'3DTextShader instancing updates',b'Fixes #551\r\nI updated the 3DTextShader and a couple vertex shaders to include instancing and now works with both multi pass and single pass stereo rendering build types. '
253864786,903,b'fix bug in using vswhere to find msbuild 2017 locations',"b'if multiple SKUs are found, will pick enterprise path first, then professional, then community.'"
253792381,902,b'Updating to 2017.2.0b9',b''
253173262,894,b'Fix for MSBuild path resolution',"b""Fixes #893 \r\n\r\nSince the editor preferences are already being used to verify the path returned by vswhere, we don't really need the vswhere call (which can be unreliable). It's cleaner to just grab it from prefs.\r\n\r\nThere may be a better way to use vswhere, but because it is already dependent on the prefs path, the current code is redundant."""
252473108,888,b'Update Editor to 2017.1.0p5 for Security Update & VS compatibility',b'Fixes https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/849\r\nFixes https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/860'
252471073,887,b'Editor Utility Tools Update',"b""- Fixes #906 Launching App from Build window returns 500 error code.\r\n- Fixes #856 Icon Generator does not support transparency.\r\n- Fixes #824 Does not assign images if over maximum byte size limit.\r\n- Fixes #893, #903 Finding `msbuild.exe` path for vs 2017. Determines whether machine is x86 or x64 to get right path to `vswhere.exe`.  If more than one vs 2017 sku is found, pull enterprise first, then pro, then community.\r\n- Fixes #919 Build window now opens next to the game and scene windows.\r\n- Added a centralized `EditorPrefsUtility` and updated all `EditorPrefs` with new usage of a unique application key so projects don't share settings.\r\n- Moved `CrossPlatform` folder into `Utilities/Scripts` folder.\r\n- Removed duplicated text serialization option.\r\n- Fixes unused modified path string in `OpenLocalFileEditor` and `OpenLocalFolderEditor`.\r\n- Fixes issue with unreadable dark text in config windows with Editor Pro Skin enabled.\r\n- Fixed `HACK` code for updating project and quality settings in `Apply Project Settings` window.\r\n- Updated Capabilities window to disable `InternetClient` if `InternetClientServer` or `PrivateInternetClientServer` is enabled.\r\n- Adds options for Sharing Service configuration in HoloLens Project Settings Config Window.\r\n![capture](https://cloud.githubusercontent.com/assets/13334553/22669122/4171a7c6-ec91-11e6-8147-5fcebedf8995.PNG)\r\n- Adds options for Sharing Service capabilities in HoloLens Capabilities Config Window.\r\n![capture](https://cloud.githubusercontent.com/assets/13334553/22669241/bd11825c-ec91-11e6-81d1-ff6be3027c84.PNG)"""
252397788,886,b'Experimental Boundary: Adding code to render floor and check if object is within established boundary',b'1. Removed old stage code\r\n2. Started using the buggy boundary APIs in Unity b8\r\n3. Added code to allow users to check if a game object is within the setup boundary.\r\n\r\nThis code class will change as we understand the API more and when it works.'
252106654,883,b'InputManager source updated refactor',"b'Some event renames are causing the breaking change, as well as re-renaming Ray to Pointing.'"
251339075,878,b'Updating to 2017.2.0b8',b'Fixes #877 '
251088713,874,b'Refactor tap to place and fix a few issues',"b""FIrst I only wanted to do some cleanup but then found a few issues in the TapToPlace test scene:\r\n\r\n1. Placing an object on another one will put both in `IsBeingPlaced`. Fixed this by setting TapToPlace as Modal rather than just a global listener.\r\n2.  When moving a child with `PlaceParentOnTap` the parent or siblings can still get hit by ray cast because only the child itself gets the `IgnoreRayCast` layer. Setting the parent recursively instead when it's used.\r\n3. RoomMesh was missing in the test scene.\r\n\r\nI refactored quite a bit of the code as it was very cryptic what it was doing like that nested tertiary operator with a ray cast. I've split the `SetLayerRecursively` method into 2 parts to make it clear that it does cache and moved it into `GameObjectExtensions`. There was another `SetLayerRecursively` in `Utils` that I've also moved in there and set obsolete.\r\n```csharp\r\nvoid SetLayerRecursively(this GameObject root, int layer)\r\nvoid SetLayerRecursively(this GameObject root, int layer, out Dictionary<GameObject, int> cache)\r\nvoid ApplyLayerCacheRecursively(this GameObject root, Dictionary<GameObject, int> cache)\r\n```\r\n\r\nI've separated the traverse of the transform hierarchy and moved it into `TransformExtensions`, using a queue instead of recursive method calls.\r\n```csharp\r\nIEnumerable<Transform> IterateHierarchy(this Transform root)\r\nIEnumerable<Transform> IterateHierarchy(this Transform root, ICollection<Transform> ignore)\r\ne.g.\r\nforeach (var child in root.transform.IterateHierarchy())\r\n```\r\nThe new extension methods are covered by several integration tests since we need some of those.\r\n\r\nThere are still a few methods that all use their own way of doing a recursive traverse, could probably clean those up too. \r\n\r\nThese 3 methods are still in TapToPlace but could be moved somewhere else, if so I wasn't sure where to put them.\r\n```csharp\r\nstatic Vector3 GetPlacementPosition(Vector3 headPosition, Vector3 gazeDirection, float defaultGazeDistance)\r\nstatic bool SpatialMappingRaycast(Vector3 origin, Vector3 direction, out RaycastHit spatialMapHit)\r\nstatic Vector3 GetGazePlacementPosition(Vector3 headPosition, Vector3 gazeDirection, float defaultGazeDistance)\r\n```"""
250732223,873,b'Update to 2017.2.0b7',b''
250486984,865,b'Fixed issue with MS Build version calculation & renamed build folder.',b'Fixes: https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/840\r\nFIxes: https://github.com/Microsoft/MixedRealityToolkit-Unity/issues/861'
250459330,864,b'Fix null coalescing causing errors',"b'Reverted the gaze manager code to what it was before. Also removed the other occurrence in the CameraCache class for good measure, although that one seemed to work.'"
250454738,863,"b'Revert ""Implement camera cache utility class""'",b'Reverts Microsoft/MixedRealityToolkit-Unity#852'
249976511,854,b'Fixed UAudioManager Editor Bug and added Test Scene for UAudioManager',b'Fixes #32 \r\n\r\nduring renaming of the UAudioManager Module (commit: a473ee2) the Names in the Editor Scripts were not changed acordingly. This caused errors in the editor.\r\n\r\nI changed the variable names and also added a test scene for the UAudioManager.'
249824229,852,b'Implement camera cache utility class ',"b""Fixes #848 \r\n\r\nThis adds a new Utility class that allows the use a cached reference to the main camera via `CameraCache.main`. Additionally, a method to refresh the reference is provided with `CameraCache.Refresh(camera)`. On the first call where the cached camera is null, `Refresh(Camera.main)` is called to initialize. Should I add this to documentation somewhere? What do you think of the names?\r\n\r\nI moved `MathUtils.GetHorizontalFieldOfViewRadians` and `MathUtils.IsInFov` to a new `CameraExtensions` since they were both relying on and using `Camera.main`. Both Methods are not marked as obsolete and use the new extension with the cached camera instead. There was another method in `Utils.MoveObjectInFrontOfUser` that also uses the camera but I didn't move that one into Camera because I thought it didn't fit as well. But maybe `camera.MoveObjectInFront` might not be so bad.\r\n\r\nMost scripts were simple replacements from `Camera.main` to `CameraCache.main` where I also added a local variable in some cases where it's used more than once. \r\n\r\n2 Scripts cache the reference to the camera once on start: `ScaleByDistance`, `MoveWithObject`. Not sure how to deal with those. Maybe do it like the GazeManager that checks for the GazeTransform on every update?\r\n\r\nLastly `GestureInteractiveData`  does this: \r\n```csharp\r\n protected Camera MainCamera { get { return Camera.main; } }\r\n```\r\nI changed it to use `CameraCache` but wasn't comfortable to just completely remove it and use local variables where it's used."""
249706120,846,b'Updating landing page with new branding and information hierarchy',"b'Added new logo design, refined information hierarchy, and layout to provide the answers to these basic questions. \r\n\xe2\x80\xa2\tWhat is Mixed Reality Toolkit?\r\n\xe2\x80\xa2\tWhat can I do with it?\r\n\xe2\x80\xa2\tWhat are the features?\r\n\r\nNew landing page shows clear answers for these questions up front with visual cues and short overview text in each feature area.'"
248790410,841,b'fixed cross platform support from last refactor PR',b'https://github.com/Microsoft/HoloToolkit-Unity/pull/827#discussion_r131950983'
248490024,839,"b""The light now goes away when the cursor's visibility is set to false.""","b'Using the cursor SetVisibility, the ring, dot and light is set properly. Issue #785 '"
248447635,838,b'Changed typo of PlanelLayout to PanelLayout',b'Updated the name of the Scene as pointed out in Issue #823. Thanks for the catch.'
248146256,832,b'Dev/interactive theme widget fixes',"b'Fixes #830\r\n\r\nThere was an issue when multiple InteractiveToggles were set to have selection on start, some InteractiveThemeWidgets would not pick up the state until the user interacts with the Interactive. I formalized some of the implementation of InteractiveThemeWidgets and implemented a fix that updates the widget after the theme has been set. '"
248143784,831,b'[2017.2] Controller Input and Rendering/glTF Updates',"b'Refactored the ControllerVisualizer and ControllerDebug scripts. Created a ""smarter"" way to load the glTF stream, making it more resistant to changes on the remote loader. Updated the glTF files from the remote repo (perhaps a submodule, once the remote will build for UWP without any edits, would be better).'"
247854081,828,b'Merge from master to Dev_Unity_2017.2.0',"b""I'd recommend looking through this commit by commit. My merge commits (and the master commits they contain) should be obvious."""
247763287,827,b'Minor Refactoring and Cleanup',b'- Moved some classes that were not part of a proper namespace into one.\r\n- Cleaned up formatting and fixed misspellings.\r\n- Added LCA headers.\r\n- Updated `UNITY_METRO` to `UNITY_WSA`\r\n- Fixed support for `UnityEngine.Windows.Speech`'
247234096,820,b'[2017.2] Updates 2017.2 branch to actually work with 2017.2',b'Updates to 2017.2.0b4'
247222925,819,b'Updated broken links to renamed branch',b'[README update] Updated strings in URLs that contains RS2_WindowsMixedReality to Dev_Unity_2017.2.0'
246397205,816,b'Added update event invoking',"b""The UpdateEvent of the  slider  control didn't fire anytime. UpdateEvent now getting fired when\r\nSliderValue is set to a new value."""
246198457,815,b'support for backspace deleting selected text',"b'The new HoloToolkit supports selecting ranges of text (a standard feature of an InputField) and will autoselect all text when opening a keyboard with text already set, but currently will not delete selected text with the backspace key. Fix will delete the selected text and set the cursor to that position.'"
246156415,814,b'Updating Dev_Unity_2017.2.0 branch to final MRTP13 build',b'Updated feature:\r\n- Merged glTF crystal key motion controller rendering code.\r\n- No API or breaking changes between MRTP9 to MRTP13.\r\n\r\nTop Unity known issue:\r\n- Gamepad input does not work if HMD has focus during playmode [925608]'
246148072,813,b'Updating ReadMe with toolkit Roadmap and cadence',b'We will always ensure to have the readme be updated with latest roadmap and release cadence.\r\n\r\nWe will be transparent about upcoming feature work and breaking changes.\r\n\r\nHope this addresses a lot of awesome developer feedback we got. Thank you!'
245889953,810,b'Fast Configurable Shader Replacement',b'Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/628\r\n- Moved all obsolete shaders to an obsolete folder.\r\n- Changed all references from old shaders in materials to correctly use Fast Configurable.'
245876199,809,"b""Merge remote-tracking branch 'refs/remotes/Microsoft/RS2_WindowsMixed\xe2\x80\xa6""","b""\xe2\x80\xa6Reality' into RS2_WindowsMixedReality"""
245872090,808,b'Updated getting started guide',b'[Preview here](https://github.com/StephenHodgson/HoloToolkit-Unity/blob/HTK-GettingStartedUpdate/GettingStarted.md)'
245806603,805,b'Updated GazeManager uGUI raycast calculations & GazeTransform initialization ',b'- Fixed https://github.com/Microsoft/HoloToolkit-Unity/issues/804 where uGUI raycasting was compensating for Unity Bug.  Unity now correctly calculates raycast value from the near clip plane.\r\n- Fixed https://github.com/Microsoft/HoloToolkit-Unity/issues/778 by checking the `GazeTransform` in update and moving the initialization from `Start` to `Awake`.'
244758691,801,b'Fix typo',b''
244566373,797,b'Typo Correction ',b''
244497065,796,b'[RS2] Add controller visualization test scene',b''
244099613,795,b'Fix for issue 794',"b""Updated to check for UNITY_WSA before accessing the dictation object since it won't exist in any other build targets.  Also removed all the tabs replaced with spaces for consistent indentation."""
243890066,793,b'[RS3] Adding support to load the native glTF model for controllers',"b""This PR adds code to load a motion controller's renderable [GLTF](https://www.khronos.org/gltf) model, if applicable. It also provides a way to override that model with a specified GameObject.\r\n\r\nThe MotionControllerTest scene has been provided to show debug information about the connected motion controllers, as well as to show use of the visualizer script.\r\n\r\nThis PR also adds the GLTF parser and loader from https://github.com/AltspaceVR/UnityGLTF, in order to render the data stream provided by the API.\r\n\r\nNOTE: These APIs require the use of the [Windows Insider Preview SDK](https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewSDK), build 16232 or newer."""
243877803,792,b'Fix Markdown formatting',b''
242231423,777,b'Update Unity Editor to 2017.1.0f3',b'Resolves https://github.com/Microsoft/HoloToolkit-Unity/issues/767\r\n- Removed references to `EditorUserBuildSettings.wsaSDK`.  It is obsolete and has no effect and will be removed in a subsequent Unity release.\r\n- Fixed `BeginAnimatedCheck` overload.\r\n- Fixed `TextureScaleOffsetVector4Property` overload.\r\n- Updated `ProjectSettings`.\r\n- Updated Project version.'
242230805,776,b'Build & Deploy tools fix',b'Fixes #775 when determining Visual Studio instance.'
242103036,768,b'Build utilities update',b'[Fixed typo for cmd line build utilities](https://github.com/Microsoft/HoloToolkit-Unity/pull/714#discussion_r126690156).'
241885320,765,b'3D Keyboard ',b'This is the added 3D keyboard for text entry.  The keyboard and KeyboardInputField support different styles of keyboard to be targeted.  Currently there is a bug with getting HoloLens Input Module to not create double input (https://forums.hololens.com/discussion/6999/ui-button-on-click-event-firing-twice).  '
241792274,764,b'medical volumetric rendering example and supporting files',b'Example of volumetric rendering specifically focusing on the medical scenario.'
241486650,762,b'[RS2] Build Window Fixes',b'See https://github.com/Microsoft/HoloToolkit-Unity/pull/714'
241483275,761,b'Merge Build fixes from RS2 branch',b'See https://github.com/Microsoft/HoloToolkit-Unity/pull/714#issuecomment-309113546'
241312586,760,b'[InputManager] updated global listener registration and event handling.',b'- Prevented double registration to the global listeners.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/756: Added a check to see if event has been used before processing input handlers.\r\n- Minor formatting.\r\n\r\nSee https://github.com/Microsoft/HoloToolkit-Unity/pull/757 for full discussion.'
241187637,758,b'Fix dynamic coloring of DefaultCursor',"b'This fixes the strange behavior when changing the material color of the DefaultCursor at runtime (see image below). I removed the unused keyframes of the Skinned Mesh Renderer from the CursorWaitingAnim animation. They were only present for the top mesh and caused the aforementioned problem.\r\nI also set the intended mesh for the top part of the DefaultCursor prefab (from ""polySurfaceRight"" to ""polySurfaceTop"") for the sake of constistency.\r\n\r\nAs this is a very minor change I didn\'t create an issue for it (according to contribution guidelines).\r\n![htk_defaultcursor](https://user-images.githubusercontent.com/18314036/27948562-88aa70f2-62fa-11e7-99f1-98ab2712e763.png)'"
241159779,757,b'[InputManager] Fix for double event handling with global listener.',b'- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/756: Only executes global event if not already being handled.\r\n- Added check if listener was already added to the global list.'
240318234,753,b'InputManager Update',b'- Added check for modal input != null when we handle events.'
240318091,752,b'SpawnManager Update',b'- Added more control over spawning synced objects when connection is made.\r\n    - Will now respawn `GameObject`s when reconnected.\r\n- Added a dictionary of `GameObject` references for each `SyncSpawnObject`.\r\n'
240025239,750,b'Updated Input Manager Test scene.',"b""TextMesh objects were marked static, which thew GI warnings about missing normals.\r\n`Mesh doesn't have normals. Please create some for GI.`"""
239362606,747,"b'SpeechInputSource, SpeechInputHandler, & SceneLauncher Update'",b'- Fixes #744 Updated obsolete `KeywordManager` usages in `SceneLauncher`.\r\n- Added ability to put scene launcher at any build order index for more control over which scenes the app loads first.\r\n- Added ability to enable and disable scenes from build settings for the `SceneLauncher`.\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/29900146-a9326364-8da4-11e7-9bf5-d477d1f18498.png)\r\n\r\n- Added `PersistentKeywords` properties to `SpeechInputSource` and `SpeechInputHandler` so that speech input can live across scenes.\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/29900162-c04aae76-8da4-11e7-9490-8ffadb41f0f7.png)\r\n\r\n\r\n'
238993324,743,b'Update to Unity 5.6.2f1',b'Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/691'
238978800,742,b'Update to WorldAnchorManager and added MultiLens capabilities',"b'- Fixes #571 If a parent is referenced, then the anchor is added to the parent.\r\n- Fixes #698 Updated `WorldAnchorManager`. Handles creating and deleting Anchors better.\r\n- Fixes #737 Added `SharedWorldAnchorManager` that inherits from `WorldAnchorManager`.\r\n- Updated `SharingTest` scene.\r\n- Updated Sharing prefab to include the `SharedWorldAnchor` component by default.\r\n- See #567. Updated `TapToPlace`.  No longer uses a friendly anchor name, but instead uses the `GameObject.name` of the object that is being moved.\r\n- Fixes #652 Refactored and Renamed `AutoJoinSession` to `AutoJoinSessionAndRoom` and anchors the whole scene appropriately. See #728.\r\n- Refactored `SharingStage` to handle server disconnections better.\r\n- Fixes #803 Sessions list not properly updated in `ServerSessionsTracker`.\r\n- IP address input prefab that remembers the server on subsequent sessions!\r\n\r\n![image](https://cloud.githubusercontent.com/assets/13334553/26561903/02453002-4490-11e7-926f-b108a04251fa.png)\r\n\r\n- Added Manual IP Configuration Utility prefab.\r\n- Updated Sharing Test scene.\r\n- Updated `SphereBasedTagalong` to have the option to hide itself after initialization.\r\n- Replaced `AnchorText.prefab` with `AnchorDebug.prefab`.\r\n- Added `SharingManagerDisconnected` event to `SharingStage`.\r\n\r\nSee #493, #178 and #70\r\n\r\n# Breaking Changes\r\n- `GameObjects` that utilize the `WorldAnchorStore` need to have unique names.\r\n    - This is important so you can spawn identical objects across the network without needing to know the anchor names ahead of time.'"
238470432,740,b'Cross-platform compatibility by only wrapping the breaking parts',"b""Fixes #387.\r\nFixes #443.\r\n\r\nThe difference in this pull request is that I only wrapped the scripts that break builds on other platforms rather than all scripts.\r\n\r\nWhat I did was: try to build for android, look at the compiler errors and start wrapping those parts in compiler directives for `UNITY_WSA`. Most of the time I simply wrapped all private methods in classes that used WSA parts. For public methods I tried to wrap only the bodies so that other scripts that use these methods don't require changes too. I also grouped a few attributes and methods so that I don't have to make as many compiler directive blocks.\r\n\r\nIn some of the changed classes I cleaned up unused usings that would have required compiler directives or where otherwise useless.\r\n\r\nInstead of just using `UNITY_WSA` I also allowed the scripts to compile in the unity editor so almost all the blocks are wrapped in `#if UNITY_EDITOR || UNITY_WSA` unless they already had a compiler directive like in the GenericNetworkTransmitter. I wanted to keep the scripts in the editor because otherwise everyone working on those parts will have to use the exported UWP project rather than just being able to work in the editor project. \r\nI was unsure first if the WSA parts are available in the linux or mac unity-editor so I ended up testing a small script in linux where I was able to include and use `UnityEngine.VR.WSA.Input`. If this ends up breaking builds on linux or mac we could also change the directive to `UNITY_EDITOR_WIN`.\r\n\r\nTo test these changes I built the HoloToolkit-Unity for android, iOS and windows standalone."""
237981604,736,b'Updated billboard to use a target transform.',b'Updated the billboard script to use a custom transform target.'
237128321,733,b'issue #724  Created a basic Application View Manager  to Popup and return a value ',b'Resolves #724  Created a basic Application View Manager  to Popup and return a value \r\n\r\nThe View Will be closed after Callback ReturnValue\r\n'
237063769,732,b'Minor updates to namespaces and comments.',b'Some quality of life updates; no feature changes.'
236747264,731,b'Typo in the InteractiveButtonComponents scene in the HoloToolkit-Examples.',"b""For the Button GameObject in the InteractiveButtonComponents scene, the ButtonOutline's Label GameObject had a typo under its Button Theme Widget Label (Script)'s Color Theme Tag variable. Originally, the value of the Color Theme Tag variable was buttonLableColor, but it should have been buttonLabelColor."""
236637009,730,b'[RS2] Build & Deploy Window Fixes ',"b""Port of https://github.com/Microsoft/HoloToolkit-Unity/pull/714.\r\nI can't test this bc I don't have the special build of unity needed, so if anyone can, that'd be great.\r\n\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/688 Building only for D3D. Now uses build settings.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/685 Added Support for MSBuild 15+ while keeping backwards compatibility.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/615\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/612\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/601 Fixed Build Failure due to App Name with Space.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/583 Added UWP SDK pop up so users can choose sdk version in build window.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/255 Fixed issue with bad builds returning error code 0.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/189 Added ability to select a certificate and input password (Users can only create new certs from the Player Settings Window).\r\n- Added workaround to unity bug where `project.json` and `project.lock.json` are not copied correctly to the target build path. (See [UwpBuildTest](https://github.com/StephenHodgson/UwpBuildTest))\r\n- Added Scrollbar for APPX package list.\r\n- Added checks for SLN existing before attempting to make APPX.\r\n- Disabled buttons if HoloLens is not detected via usb.\r\n- Merged changes from [RS2_MixedReality](https://github.com/Microsoft/HoloToolkit-Unity/pull/572/files#diff-915d8ae44ef16ebac775ab81e0cdf317) branch that specifically addressed changes to Build Window.\r\n- Changed Build Configuration from a string field to an enum popup.\r\n- Added a button to open the appx packages location.\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/27014129-33c39e86-4ec0-11e7-894b-5ef6be511130.png)\r\n"""
236616465,729,b'[RS2] Controller visualization updates',"b""Adds a new prefab with controller visualization built-in.\r\nFixes an issue where already paired controllers weren't firing a SourceDetected on app launch (resolving some question TODOs).\r\nFixes an issue where lost controllers weren't properly destroying their visualization GameObjects."""
236406377,728,b'improvements for ImportExportAnchorManager ',"b'Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/652\r\n- sometimes InitRoomApi was called twice. this is beeing avoided now\r\n- GetRoomCount is giving 0 sometimes when there are rooms, causing a extra room is created. added a slight delay that seems to fix the issue'"
236404646,727,b'Make it optional that TapToPlace takes control of the DrawMesh on the\xe2\x80\xa6',b'Make it optional that TapToPlace takes control of the DrawMesh on the SpatialMappingManager\r\n\r\nwe had a scenario where we always had to show the drawmesh to true with our own matertial. its annoying that tap to place start changing this behavior'
235905790,721,b'Added Global Listener option to SpeechInputHandler ',b'Added Global Listener option to SpeechInputHandler as this scenario is no longer supported due to KeywordManager now being obsolete'
235525982,719,b'[RS2_MixedReality] Build & Deploy Window Fixes',b'- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/688 Building only for D3D. Now uses build settings.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/685 Added Support for MSBuild 15+ while keeping backwards compatibility.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/615\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/612\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/601 Fixed Build Failure due to App Name with Space.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/583 Added UWP SDK pop up so users can choose sdk version in build window.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/255 Fixed issue with bad builds returning error code 0.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/189 Added ability to select a certificate and input password (Users can only create new certs from the Player Settings Window).\r\n- Added workaround to unity bug where `project.json` and `project.lock.json` are not copied correctly to the target build path. (See [UwpBuildTest](https://github.com/StephenHodgson/UwpBuildTest))\r\n- Added Scrollbar for APPX package list.\r\n- Added checks for SLN existing before attempting to make APPX.\r\n- Disabled buttons if HoloLens is not detected via usb.\r\n- Merged changes from [RS2_MixedReality](https://github.com/Microsoft/HoloToolkit-Unity/pull/572/files#diff-915d8ae44ef16ebac775ab81e0cdf317) branch that specifically addressed changes to Build Window.\r\n- Changed Build Configuration from a string field to an enum popup.\r\n- Added a button to open the appx packages location.\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/27014129-33c39e86-4ec0-11e7-894b-5ef6be511130.png)\r\n'
235267964,717,b'Fixes to SpatialUnderstandingExample scene',"b'Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/620 Updated scene and prefabs with proper z distance, and raycast target flags.\r\nFixes https://github.com/Microsoft/HoloToolkit-Unity/issues/621 This was actually caused by custom raycast logic that needed to accommodate for the spatial mapping mesh. Now correctly uses `GazeManager` result.\r\n'"
235080545,716,b'Mic Stream Demo Fixes',b'- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/574\r\n- Reverted `Start` back to `Awake`.\r\n- Updated Instructions.'
235077615,715,b'Restore SceneLauncher and remove usage of HoloToolkit-Examples',b'Unreverts #713. Fixes #712 and #674.\r\n\r\n@StephenHodgson this should address the issue that you raised.'
235042147,714,b'Build & Deploy Window Fixes',"b'- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/688 Building only for D3D. Now uses build settings.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/685,  https://github.com/Microsoft/HoloToolkit-Unity/issues/612, & https://github.com/Microsoft/HoloToolkit-Unity/issues/615 Added Support for MSBuild 15+ while keeping backwards compatibility.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/601 Fixed Build Failure due to App Name with Space.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/583 Added UWP SDK pop up so users can choose sdk version in build window.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/255 Fixed issue with bad builds returning error code 0.\r\n- Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/189 Added ability to select a certificate and input password (Users can only create new certs from the Player Settings Window).\r\n- Added workaround to unity bug where `project.json` and `project.lock.json` are not copied correctly to the target build path. (See [UwpBuildTest](https://github.com/StephenHodgson/UwpBuildTest))\r\n- Added Scrollbar for APPX package list.\r\n- Added checks for SLN existing before attempting to make APPX.\r\n- Disabled buttons if HoloLens is not detected via usb.\r\n- Merged changes from [RS2_MixedReality](https://github.com/Microsoft/HoloToolkit-Unity/pull/572/files#diff-915d8ae44ef16ebac775ab81e0cdf317) branch that specifically addressed changes to Build Window.\r\n- Changed Build Configuration from a string field to an enum popup.\r\n- Added a button to open the appx packages location.\r\n\r\n![image](https://user-images.githubusercontent.com/13334553/27014129-33c39e86-4ec0-11e7-894b-5ef6be511130.png)\r\n'"
234375361,713,"b'Revert ""Scene Launcher for easily switching between various HoloToolkit scenes""'",b'Reverts Microsoft/HoloToolkit-Unity#689'
234345759,711,b'Added InputHUD Script and Prefab',b'Added a simple 2D HUD to monitor current inputs from various InteractionSourceKinds during development.\r\n\r\nYou can put multiple in the scene at once to monitor multimodal inputs for debugging purposes without too much overhead. \r\n'
233310235,708,b'Input updates',"b""This is a set of updates (primarily minor bug fixes and maintainability refactorings) we took on our recent project.  I'd like to contribute them if others find them valuable.  Thanks!"""
232781224,705,b'update',b''
232728619,703,b'updates to sharing with unet based on the shared mixed reality 250 class',b'looks like the 5.6 mrtp 8 made some material changes as well'
232702426,702,b'Updated TapToPlace.cs',"b""- Now works in both the editor and on device.\r\n- No longer requires the spatial mapping manager.\r\n- Now requires a `Collider` & `Interpolator` components.\r\n- Recursively sets layer to `IgnoreRaycast` when placing the object and subscribes to a global click event for placement.\r\n- Updated Tap To Place Test scene.\r\n- Added a warning in `WorldAnchorStore` that the anchor store is never ready when in editor.\r\n\r\n**Breaking Changes:**\r\n- Updated the namespace to `HoloToolkit.Unity.InputModule` now that we're not dependent on the `SpatialMappingManager`.\r\n- Removed the protected cached manager fields.\r\n    - Devs should just reference these managers directly without the requirements of these fields in an inherited class."""
232688507,701,b'Usability scaler',"b'This PR adds UsabilityScaler and UsabilityUtilities classes to help scale objects based on\r\nHMD visual characteristics.  Currently it only uses field of view and resolution to choose\r\nthe scale factor, but as new devices are created in the future, additional characteristics\r\nmay come into play.\r\n'"
232389512,697,b'[RS2] GpuTiming and AdaptiveQuality',"b'First attempt at a pull request. Please have a look at naming of the components and folder placement etc.\r\nThis request has a handful of small components to help making adaptive quality possible on a Mixed Reality device.\r\nNOTE: Found a unity bug for viewport scaling that was just introduced in MRTP8. Filed, and waiting for reply...\r\n\r\n-To measure gpu time, use GpuTiming\r\n-Use GpuTimingCamera to easily wrap a timer around all your camera rendering\r\n-Use AdaptiveQuality to change quality based on gpu time.\r\n-Use AdativeViewport to change viewport size based on calculated quality.\r\n\r\nThe dlls are built from HoloToolkit:\r\nhttps://github.com/Microsoft/HoloToolkit/pull/103/commits/dfd184c97ccee851caab18ac943460b4c7b8c170\r\n\r\nEnjoy!'"
232247019,696,b'test',b''
232098227,695,b'[Sharing Service] Utility prefab to Connect to IP address at runtime',"b'IP address input prefab that remembers the server on subsequent sessions!\r\n![image](https://cloud.githubusercontent.com/assets/13334553/26561903/02453002-4490-11e7-926f-b108a04251fa.png)\r\n\r\n- Added Manual IP Configuration Utility prefab.\r\n- Updated Sharing Test scene.\r\n- Updated `SphereBasedTagalong` to have the option to hide itself after initialization.\r\n- Replaced `AnchorText.prefab` with `AnchorDebug.prefab`.\r\n- Added `SharingManagerDisconnected` event to `SharingStage`.\r\n\r\nSee https://github.com/Microsoft/HoloToolkit-Unity/issues/493, https://github.com/Microsoft/HoloToolkit-Unity/issues/178 and https://github.com/Microsoft/HoloToolkit/issues/70'"
232094460,694,b'Fix errors on Unity 5.5',b'This adds some conditional compilation flags to retain compatibility with Unity 5.5.'
231799774,693,b'Fixing some typos',"b'Just found them while reading the documentation, figured it might confuse a new reader and hence proposing the fix.'"
231173796,689,b'Scene Launcher for easily switching between various HoloToolkit scenes',b'Resolves #674.'
230247815,682,b'Fixes #681 by updating serialized meshMaterial field.',b'Fixes #681 \r\nIt appears that commit 22d1d94b54d64e19fcfbf3e157990eefb04b8f99 renamed the meshMaterial field. SpatialUnderstanding.prefab uses this field and needs to be updated to match.'
230192198,680,b'Microsoft master',b''
229761346,679,b'Add WindowsStoreApp to .gitignore',b'Fixes #678.'
229756269,677,b'fix #675 by implementing unit tests for TransformPoint and Inverse',b'Fixes #675 '
228304662,668,b'Modified SpeechInputSource and KeywordManager so that keybindings are usable when in Editor',"b'Using voice commands inside Editor ends up with an error ""Speech recognition is not supported on this machine. "" and as there are no fallbacks nor exception handling regarding that both `SpeechInputHandler` and `KeywordManager` fail and eventually voice can\'t be tested inside Editor at all. The code here fixes it so a developer would have at least key bindinngs working for voice commands while in Editor.'"
228204633,667,b'Update README.md',"b'Fixed a typo. ""plade"" to ""plane""'"
227615990,664,b'Tile & Splashscreen generator',b'The long promised tile / splashscreen generator #616 '
227520875,663,b'Changed MeshMaterial field so that it allows for the material changes',b'.. after spatial understanding finalizes.\r\n\r\nBased on @thebanjomatic suggestion at https://forums.hololens.com/discussion/7384/spatial-understanding-changing-render-material changes to `MeshMaterial` property have been made so that material can be changed after spatial understanding finalizes - i.e. for changing the material to Occlusion one.'
227454532,661,"b'Examples of interactive buttons, UI controls and prototyping components. (Dev/interactivebuttons)'","b'Here are some components that have evolved over a few projects and demonstrate some broader concepts of app development and UX.\r\n\r\nThe InteractiveElements collection provides some input foundations for rapidly hooking up input events, as well as a set of 3D input controls that demonstrate some basic UI feedback for things like buttons, toggles and sliders. These controls are not meant to be an official set of controls, but they are rudimentary examples of the type of interaction feedback we can expect from modern UI in 3D space. The idea being, we should always be pushing farther as we discover what 3D UI means in the holographic space.\r\n\r\nThe prototyping section is more focused on building click-through demos and sample UI panels. For designers, they can connect graphics and interactive components to build a wireframe based click-through in a few hours. The click-through can be iterated on quickly and is a powerful tool for scoping and design.\r\n'"
226892587,657,b'Fix link to Spatial Mapping in Spatial Understanding docs.',b''
226677707,656,b'Update SpatialUnderstanding DLLs from HoloToolkit fixing #520',b'Fixes #520.\r\nTested SpatialUnderstandingExample and repro case from #520.'
226163229,651,b'Platforms',b'Add QueryTopology_FindLargestPositionsSittable() to Unity and update the Spatial Understanding demo with this query. This is the companion to: https://github.com/Microsoft/HoloToolkit/pull/86\r\n\r\n(Do I need to also submit the compiled DLLs or will one of the maintainers build and update them?)'
225333156,645,b'TapToPlace anchor manager check',b'Adds null check on Anchor Manager before trying to add anchor\r\n\r\nResolves #636 '
225294324,644,b'Fixes issue with tap to place not working',"b""Tap to place currently sets a world anchor on game object during start\r\nmethod, which keeps it from moving around if starting out with\r\nIsBeingPlaced true.  I put a check to see if we are starting out\r\nplacing, and if so, then we don't add the world anchor.\r\n\r\n#535 is resolved by this PR"""
224590700,639,b'Added Interactive Mesh Cursor back into HoloToolkit.',"b""This was missing from the latest HoloToolkit so I'm adding it back. I also moved the test scene to the HoloToolkit-Tests directory."""
223540736,637,b'Fixed a hit target variable in Cursor.UpdateCursorTransform',"b""I'm sorry if I'm mistaken.\r\n\r\nThanks."""
223211889,633,b'Reverted push by killerantz',b'resolves https://github.com/Microsoft/HoloToolkit-Unity/issues/632'
223002439,631,b'Added SpeechTextInQueue bool method which returns whether a text is \xe2\x80\xa6',"b'\xe2\x80\xa6in speech queue\r\n\r\n\r\nHandy for avoiding situations when a text is submitted, but audio clip is not yet build (audiosource is not playing it yet!)\r\n\r\nWhy i  added it?\r\nI had a coroutine which submits if IsSpeaking() is false. When true it submitted a random text via SpeakText method, BUT as audioData is not straight away created and played it allowed for few new texts to be passed as IsSpeaking() still returns false - so i added this method whichs shows if audiData is being created from text and being assigned to audioSource.\r\n\r\nit works great with this example:\r\n\r\n```cs\r\n    public IEnumerator SpeakTextAndWait(string text)\r\n    {\r\n        Debug.Log(""Started speaking text: "" + text);\r\n        textToSpeechManager.SpeakText(text);\r\n        yield return new WaitWhile(() => textToSpeechManager.SpeechTextInQueue() || textToSpeechManager.IsSpeaking());\r\n        Debug.Log(""Ended speaking text: ""+text);\r\n    }\r\n```\r\n\r\nif lower line of code just is used then few texts are submitted but like the 6th, 7th is played (Depending on machine). \r\n```cs\r\n        yield return new WaitWhile(() =>textToSpeechManager.IsSpeaking());\r\n```'"
222936920,630,"b'use SwitchActiveBuildTarget(BuildTargetGroup targetGroup, BuildTarget\xe2\x80\xa6'",b'\xe2\x80\xa6 target)\r\n\r\nbecause SwitchActiveBuildTarget(BuildTarget target) is deprecated'
222776439,627,b'Moved HeadsetAdjustment into HoloToolkit.Unity namespace ',b'- Added class to `HoloToolkit.Unity` namespace and organized methods.\r\n- Added license header.\r\n- Enable scene object reference in editor.'
221405027,619,"b'major update to fastconfigurable shader - custom editor, perf improvements, reflections, rim lighting, alpha cutout, lightmapping support, etc.'",b''
221381712,618,b'Update Editor to 5.6.1f1',b'- Added License file to root HoloToolkit folder for addition into release packages\r\n- Resolves https://github.com/Microsoft/HoloToolkit-Unity/issues/600\r\n- Updated obsolete methods.\r\n- Fixed bad header formatting in readme files.\r\n- Fixed HoloLensCamrea.prefab by unchecking MSAA'
221040855,617,b'Publish updated SharingService to allow creating persistent sessions',b'This change includes rebuild binaries from https://github.com/Microsoft/HoloToolkit/pull/83 to allow the SharingService to create persistent sessions.'
220691383,614,b'Fixed improper namespace with TypeUtils and missing reference',b'Resolves https://github.com/Microsoft/HoloToolkit-Unity/issues/613'
220447816,610,b'ImportExportAnchorManager Stuck in debug mode ',"b""This is re-submit of #591 's anchor part, sorry to have forgotten it several days.\r\nAs I comment at the last of the origin PR(#591), I found that the changes I made should be OK.\r\n\r\nBTW, I saw that all those test script had been moved to HoloToolkit-Tests, including this file, so maybe this issue is not in priority. As least for me, I only copy the main HoloToolkit folder to my projects. If there is script I want from somewhere else, just copy case-by-case."""
220311884,609,b'Namespace fixes',"b'Adds scripts to `HoloToolkit.Unity`, if no namespace declaired.\r\nSimple typo fixes in existing namespaces.'"
219881671,606,b'Fixed issue with GazeManager not hitting the closest UI element when raycasting.',"b' Now the closest hit is picked instead of the first one.\r\n\r\nThis was an issue when multiple UI canvases was on top of each other. The Raycast result was not ordered, and the FindFirstRaycastInLayermasks returned the first hit in the list, not the closest hit. \r\nNow the code checks the distance of the hist to return the closest one.'"
219600577,604,b'fixed a small issue in Cursor',"b'if cursor got disabled and enabled later at another surface, state may not appear correctly as the common sense. this is because target get set to null when disabled but not recover/update at enable.'"
219357059,603,b'Fixes Issue #527: SpeechInputSource test scene',"b'\r\nAdded SphereManager script to sphere parent GameObject, and removed SphereKeyword script from it to fix the missing reference. Added proper scripts to serialized fields in the inspector. Tested in Unity 5.6 and HoloLens.'"
219297078,602,b'Added confirmation dialogues to EnforceEditorSettings',"b'The existing version does not feature a prompt, and modifies the\r\nproject configuration without warning. Users with complex or unique\r\nproject setups may encounter issues.\r\n\r\nUsers will now be prompted to change their project settings when\r\nimporting the HoloToolkit, or opening a project with the toolkit\r\nalready included, to better support external VCS and project\r\nmaintainability.\r\n\r\n___\r\n\r\nWhether or not this pull request is worth including is up for debate. It adds a new pop-up every time the editor is launched until project settings are modified, and is a good deal more involved than the previous implementation.\r\n\r\n\\- Requires user attention when first importing a project\r\n\\- Requires a field in the EditorPrefs store to save pop-up state.\r\n\\+ Allows users to delay the changes to their project settings until they can back up, or test the project.\r\n'"
218741906,599,b'Update README.md',b'Fix typo in header.'
217867151,594,b'Added event when scan is done and a bool property whether Any mesh sectors been scanned',b'Added Delegate when scan is done and a bool property whether Any mesh sectors been scanned\r\n\r\nWhy i did this?\r\nI needed an delegate event when scanning is done;\r\nIn my application i need to know if something has been scanned to show additional label'
217424673,592,b'Add smoothing to translation and rotation for HandDraggable script',"b""[This issue ](https://forums.hololens.com/discussion/7036/moving-object-very-slow-juddering) has come up as a question once or twice in the forums, and I had a fix for this in my own project that I figured I could contribute back to the main repository.\r\n\r\nI didn't add specific code to disable this, but setting the speed values to 1.0 will effectively give you the same behavior as before. The default values are just what felt good to me, but I'm open to tweaking the defaults if people prefer things more responsive, or smoother."""
217121048,591,b'two small issues in cursor and sharing',"b'1. if cursor got disabled and enabled later at another surface, state may not appear correctly as the common sense. this is because target get set to null when disabled but not recover/update at enable.\r\n2. in debug mode, create local anchor process often stuck without located or any event triggered. changed back to origin code version, letting the local anchor created on demand instead of always during Start phase.\r\n'"
216873858,590,b'Moved all test folders into HoloToolkit-Tests',b'Resolves https://github.com/Microsoft/HoloToolkit-Unity/issues/589'
216664956,587,b'Ui/interactive mesh cursor that resembles the shell cursor',b'Here is a sample of a mesh cursor that adds better visuals and feedback. #586'
216568874,585,"b""bugfix for Cursor: TargetedCursorModifier should've been nulled""",b'TargetedCursorModifier is dependent on TargetedObject and therefore should be cleared out whenever TargetedObject is cleared out\r\n\r\nResolves #584 '
216554025,582,b'Adds an UnityEvent to SpeechInputHandler and SpeechInputSource',b'Adds an UnityEvent to SpeechInputHandler and SpeechInputSource. The Event gets invoked on any recognized phrase or keyCode'
216401425,581,b'Adds a UnityEvent to the KeywordManager',b'Adds a UnityEvent to the KeywordManager that gets triggered for any recognized phrase or keycode.\r\n\r\nAdjusts README and KeywordManager Example Scene'
216015455,578,b'added possibility to check for collision.',b'especially useful when using spatial mapping\r\n\r\nany opinions?'
215929588,577,b'Move ReflectionExtensions namespace to HoloToolkit',"b'ReflectionExtensions declared in global namespace possible to effect to other libraries. First I tried to move ReflectionExtensions to HoloToolkit.Unity namespace but HoloToolkit.Sharing.SyncModel is using extension method in ReflectionExtensions.\r\n\r\nexample)\r\nImport HoloToolkit-Unity and MessagePack.1.0.3.unitypackage, then build error has been occured.\r\nhttps://github.com/neuecc/MessagePack-CSharp/releases/tag/v1.0.3'"
215885090,576,b'Fixed space issue in markdown headings',"b""Fixed space issue in SpatialUnderstanding readme's headings"""
215598272,572,b'Creators Update branch with support for Windows Mixed Reality immersive headsets.',"b""## Prerequisites:\r\n1. [Development PC specs](https://developer.microsoft.com/en-us/windows/mixed-reality/install_the_tools#developing_for_immersive_headsets) Developing for immersive headsets.\r\n\r\n2. [Holograms 100](https://developer.microsoft.com/en-us/windows/mixed-reality/holograms_100) has been updated with how to setup Windows Mixed Reality in your app.\r\n\r\n3. [How to navigate the Windows Mixed Reality home](https://developer.microsoft.com/en-us/windows/mixed-reality/navigating_the_windows_mixed_reality_home).\r\n\r\n4. Development PC needs to be on Creators Update SDK and the Windows Creators Update release.\r\n\r\n5. Early access private build of Unity 5.6.0f3-MRTP6 with RS2 API support. This build of Unity is currently invite only.\r\n\r\n    5.1. Please read more about [Immersive headset details](https://developer.microsoft.com/en-us/windows/mixed-reality/immersive_headset_details).\r\n\r\n6. [Visual Studio 2017](https://www.visualstudio.com/downloads/).\r\n\r\n## Please note:\r\n1. We will not merge this branch into master until we have a publicly available Unity that supports it and a HoloLens build that works with these new APIs.\r\n\r\n2. You can use this branch with Windows Creators Update builds on your PC and deploy it to Windows Anniversary Update HoloLens flight.\r\n\r\n3. Windows Creators Update flights don\xe2\x80\x99t ship on HoloLens.\r\n\r\n## What's new?\r\n**GamepadInput** supports the Xbox controller and maps it to the input manager events.\r\nYou can use the Xbox controller A to tap.\r\nPress A and hold to do hold started, canceled and completed.\r\nPress A and left joystick to trigger the navigation events.\r\nPress the Y button to teleport in your world.\r\nPress the B button to return back to your original location.\r\n\r\n**Playspace** folder has the scripts that support the StageRoot component that helps define the 0,0,0 for your immersive applications.\r\nPrefabs help to draw the floor for immersive headsets and also renders the playspace bounds if you wish to display those in your application.\r\n\r\n**External\\How To** docs folder is meant to help everyone with migrating forward or any simple doubts they might have about the process.\r\nPlease feel free to grow all these sections. We can't wait to see your additions!\r\n\r\nWe've also done some future proofing work to add support for motion controllers. \r\nHowever, current model is gaze and commit with your head gaze and the Xbox controller."""
214400512,568,b'FPS Display compatability with uGUI',b''
214112577,566,b'Greatly speed up RemoveSurfaceVertices',"b'Changing from List to HashSet greatly improves the speed of .contains(), which allows RemoveSurfaceVertices to complete in at most 1 or 2 seconds as opposed to 10+ previously.'"
213765675,561,b'Merge pull request #1 from Microsoft/master',b'Update to HTK'
213695923,560,b'Adapting SpatialMappingObserver as lined out in Issue #557',"b'Hello,\r\n\r\nAs outlined by the issue [#557](https://github.com/Microsoft/HoloToolkit-Unity/issues/557) I adapted the code of the SpatialMappingObserver to allow for changing the observed volume to an axis or an axis aligned box.\r\n\r\nPlease let me know, if I missed out on something.\r\n\r\nThanks.'"
212618469,554,b'Using UnityObjectToClipPos according to performance recommendations',"b'`UnityObjectToClipPos` is supposed to be faster than multiplying by `UNITY_MATRIX_MVP` when using SinglePassStereo and/or when using concatenated matrices. The same applies to `UnityObjectToViewPos` and `UNITY_MATRIX_MV`.  \r\n\r\nThe Unity team has mentioned this in a couple talks recently, and Unity 5.6 has starts providing a performance warning when importing shaders that use UNITY_MATRIX_MVP, etc, so I figured its probably worth addressing.'"
212607019,553,b'3DText Stereo Instancing',b'Resolves https://github.com/Microsoft/HoloToolkit-Unity/issues/551'
212579549,552,b'Make Spatial Mapping use unscaledTime',"b'Related to https://github.com/Microsoft/HoloToolkit-Unity/issues/79 - when physics in Unity are paused using timeScale = 0.0f (which is quite a common use case), the spatial mapping stops too, which is undesirable in almost all circumstances.\r\n\r\nThe common use case is actually the opposite: the game is usually paused, while the HoloLens is allowed to gather spatial mapping data.\r\n\r\nThe change to unscaledTime allows Spatial Mapping to continue while the physics are\r\npaused.'"
212354681,549,b'Added possibility to lock the objects rotation while dragging it',"b""When u drag a object via HandDraggable and move your head the rotation of the object changes.\r\nAt least in my case I don't want that, it somehow feels unnatural, so I implemented a public flag to prevent this behaivour (lock the rotation of the object).\r\nAlso I added a Header and Space for grouping the different rotation modes in the inspector (probably change the text there a bit?)\r\nAnd I grouped the handling of the rotation modes (upright, towards user, lock orientation)  into an if-else if-else if construct. If nothing applies (when IsRotationLocked == true) the rotation of the object isn't changed at all (my desired behaivour).\r\n\r\nAny opinions?"""
211624471,547,b'HeadsetAdjustment scene for demoing',"b'Ensure proper headset adjustment for demo scenarios.\r\n\r\nWhen demoing an app, it is important to ensure that the user has the headset on properly. This PR adds a scene that shows a border at the edge of the user\'s field of view and instructs him/her to adjust the headset until all four edges are visible. The user (or the demonstrator) can then air-tap or say ""I\'m ready"" to proceed to the actual experience. The next scene is then loaded and the experience may begin. This next scene is determined by either the scene build order in the Unity Build Settings dialog or by explicitly specifying the scene name that follows.\r\n'"
211465328,545,b'Editor update to 5.5.2f1',"b'Resolves https://github.com/Microsoft/HoloToolkit-Unity/issues/489\r\n\r\n[See all the changes here](https://unity3d.com/unity/whats-new/unity-5.5.2)\r\n\r\nHoloLens Specific fixes and changes:\r\n> - (860775) - HoloLens: Fixed a crash that occurs on device when downloading files with WWW.\r\n> - (847798) - Mono: Correct an invalid C# compiler error with generic types in compiler generated code (like lambdas and enumerators). The error from the C# compiler often includes this text: ""There is no boxing or type parameter conversion from...""\r\n> - (none) - Android/Metro: Fixed the issues preventing the Application.Unload API from functioning correctly.\r\n> - (none ) - Scripting: Added the following non-allocating accessors to Mesh. These accessors write into a user-specified List. The accessors are GetBindposes, GetBoneWeights, GetColors, GetIndices, GetNormals, GetTangents, GetTriangles, and GetVertices.\r\n> - (865507) - Audio: Fixed a WACK certification failure in UWP player builds using the Microsoft HRTF audio spatializer.\r\n> - (824020) - Editor: Fixed a crash for D3D platforms if shader compilation did not return any compiled shader data ie, a shader contained #error pre-processor directive.\r\n> - (814290) - Virtual Reality: Fixed inconsistency in game view between Singlepass Stereo and Multi Pass when using Split Stereo Diplay.\r\n> - (830612) - Virtual Reality: Fixed incorrect culling in Split Stereo Display.\r\n> - (832185) - Virtual Reality: Fixed incorrect eye view in Split Stereo Display.\r\n> - (832283) - Virtual Reality: Fixed incorrect viewport bounds in Singlepass Stereo.\r\n> - (850327, 851586) - HoloLens: Fixed an issue with InputField automatically getting activated for text entry as soon as you gaze at it.\r\n> - (none) - HoloLens: Prevented a potential memory stomps in very rare repro cases when resuming from suspend.\r\n> - (859819) - Graphics: DrawProcedural draws geometry only in the left eye when Single Pass is enabled.\r\n> - (858579) - Windows Store: Fixed the folder Structure missing from Assembly-CSharp.csproj.\r\n> - (855595) - Windows Store: Fixed player pref corruption on power loss.\r\n> - Windows Store: introduced the ability to select which Universal Windows Platform SDK Unity should target when building the application.'"
210817546,543,b'bugfix: the condition did not create a WorldAnchor component',"b'The previous condition did not add the WolrdAnchor component to the gameobject, and raised an exception: MissingComponentException: There is no \'WorldAnchor\' attached to the ""HologramCollection"" game object, but a script is trying to access it.'"
210690877,542,b'Need to update collision mesh when committing mesh data',"b""There appears to be a bug with SpatialUnderstandingCustomMesh: when finalizing the mesh data (with Commit()), the rendering mesh picks up the changes but the collision mesh does not. Presumably this is a quirk of how Unity handles collision meshes.\r\n\r\nThe result of this is that using meshes produced by the Spatial Understanding system (as opposed to the underlying meshes provided by SpatialMappingManager) doesn't work in scenarios where rigid bodies are expected to collide with the world.\r\n\r\nThis patch appears to be the minimum required change to fix the problem however it's a bit ugly: I have to set a reference to the MeshCollider in MeshData, which otherwise consists exclusively of readonly members. A proper fix would require modifying CreateSurfaceObject() but that is a bit more of an extensive modification and I think something along the line of my approach is simpler."""
210662682,541,b'Modified Editor Input',b'Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/448'
210543395,539,b'Adding a Remove All Anchors method in WorldAnchorManager',"b""It will remove all user anchors from the scene (anchors generated from Spatial Mapping and Surface Observer won't be removed)"""
209583289,533,b'Dictation/Speech/MicStream updates',"b""- A centralized singleton for managing dications\r\n    - Modelled after [HoloAcademy 212](https://developer.microsoft.com/en-us/windows/holographic/holograms_212)'s `MicrophoneManger`\r\n    - Tied into input manager with `IDictationHandler`\r\n- Updated Input Documentation. [Preview Here](https://github.com/StephenHodgson/HoloToolkit-Unity/blob/HTK-Dictation/Assets/HoloToolkit/Input/README.md)\r\n- Refactored `SpeechInputSource` & `InputManager`\r\n    - (Should have no breakig changes outside the scope of these classes.)\r\n- Resolves https://github.com/Microsoft/HoloToolkit-Unity/issues/531 Marks `KeywordManager` as Obsolete\r\n- Fixed https://github.com/Microsoft/HoloToolkit-Unity/issues/527, https://github.com/Microsoft/HoloToolkit-Unity/issues/704 `SpeechInputSource` test scene\r\n- Added a test scene for Dictation.\r\n- Fixed https://github.com/Microsoft/HoloToolkit-Unity/issues/555 NULL reference on start in MicStream test scene\r\n- Fixed issue with `SpeechInputHandlerEditor` breaking if no Keywords are assigned on the `SpeechInputSource`."""
209288622,532,b'Updated Font Shader to correctly handle uGUI stencil operations and color changes through text components',"b""Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/526 and adds the ability to change color through the text component properly.\r\n\r\nNow we don't need a new material for every color font.\r\n\r\nIf font looks strange simply find `3DtextShader`, right click, and reimport. """
209061281,528,b'Compatibility with Vuforia: GazeTransform initialization.',b'Resolves https://github.com/Microsoft/HoloToolkit-Unity/issues/524'
207821176,519,b'Fix rotation if hologram was rotated before',"b""Since the up vector was ignored, the dragging function always messed up with the rotation of a object if it was rotated before.\r\nQuaternion.LookRotation() takes the global up vector (Y) by default,  but if the object was rotated for example around the Z axis, the global up vector isn't the same as the local one -> object rotation is messed up, because the local forward vector and the global up vector are used instead of local forward and local up."""
206618162,513,b'HTK - Sharing Updates',"b'Fixes and updates for some of the sharing features.\r\n\r\n- Added Troubleshooting section to readme. [Preview Here](https://github.com/HodgsonSDAS/HoloToolkit-Unity/tree/HTK-Sharing/Assets/HoloToolkit/Sharing#troubleshooting)\r\n- Fixed bug where every user was named _User0_.  Users are now named after the device, the environment user name, or the user id assigned by the sharing service.\r\n- Fixed build warning about uninitialized variable `spawnablePrefabs`.\r\n- Added a text mesh to the `SharingTest.scene` that shows anchor debug info.\r\n- Added an ability to turn on and off detailed logs for sharing service specific components.\r\n- Added `IsConnected` bool in `SharingStage` that checks for a valid `Manager` and `Connection` before returning `Connection.IsConnected()`.\r\n- Fixed issue where components that listen for Session connections are never activated after connection event has been raised.  Components will now properly check if there is already a session connection, then register for the delegate if no connection exists.\r\n- `ImportExportAnchorManager` now works in editor for easier testing, and faster iteration.  `UNITY_WSA && !UNITY_EDITOR` wraps the appropriate methods, fields, and parameters.  No public or or external facing code was changed/deprecated.\r\n- `SharingSpawnTest.scene` now works in Editor and on device. Partially resolves https://github.com/Microsoft/HoloToolkit-Unity/issues/494. \r\n- `SharingSpawnTest.scene` now shows how to both create and delete sync spawn objects. Resolves https://github.com/Microsoft/HoloToolkit-Unity/issues/517.'"
206056297,510,b'InputManager: Add OverrideFocusedObject functionality',b'Fixes issue #509'
205280442,500,b'UAudioManager added null check in PlayEvent',b'- Added check for null or empty string before searching `eventDictionary`.\r\n- Added an optional parameter to one of the `PlayEvents` to remove a redundant one.\r\n- Formatting.'
204757460,498,b'Adding open\xc2\xa0font Selawik\xc2\xa0for Text Prefab',"b'Per discussion in the\xc2\xa0issue #377 and #425 , added open font [Selawik\xc2\xa0](https://github.com/Microsoft/Selawik)and updated\xc2\xa0text prefabs, materials and\xc2\xa0test scenes. Now\xc2\xa0Text Prefabs and Samples have Selawik font assigned as\xc2\xa0default. Developers can follow [existing instructions from this readme file ](https://github.com/Microsoft/HoloToolkit-Unity/blob/master/Assets/HoloToolkit/UI/README.md)to apply\xc2\xa0other fonts.\r\n\r\n![selawikfonts](https://cloud.githubusercontent.com/assets/13754172/22533508/72f13254-e8a3-11e6-8553-3768400d21a2.png)\r\n\r\n![textprefabupdate_selawik](https://cloud.githubusercontent.com/assets/13754172/22533465/353414ae-e8a3-11e6-92ae-d468326ee3f6.png)\r\n'"
204709378,496,b'HTK Utility updates for sharing services',"b""TL;DR-Cleans up the project for smoother deployment as a fully functional asset package w/sharing services\r\n\r\nResolves https://github.com/Microsoft/HoloToolkit-Unity/issues/490\r\nResolves https://github.com/Microsoft/HoloToolkit-Unity/issues/487\r\nResolves https://github.com/Microsoft/HoloToolkit-Unity/issues/374\r\n\r\n- Fixes issue with unreadable dark text in config windows with Editor Pro Skin enabled.\r\n- Adds options for Sharing Service configuration in HoloLens Project Settings Config Window.\r\n![capture](https://cloud.githubusercontent.com/assets/13334553/22669122/4171a7c6-ec91-11e6-8147-5fcebedf8995.PNG)\r\n- Adds options for Sharing Service capabilities in HoloLens Capabilities Config Window.\r\n![capture](https://cloud.githubusercontent.com/assets/13334553/22669241/bd11825c-ec91-11e6-81d1-ff6be3027c84.PNG)\r\n- Adds a option to manually update External Resources via:\r\n ```HoloToolkit -> Configure -> Update External Resources ```\r\n![capture](https://cloud.githubusercontent.com/assets/13334553/22669197/93d6e602-ec91-11e6-9145-e92b06cab4b9.PNG)\r\n- Removed duplicated text serialization option.\r\n- Added a duplicate license file at the root of the HoloToolkit so it's included in asset packages.\r\n- Updated Sharing Menu to notify users to enable sharing services if executable cannot be found.\r\n\r\n---\r\nThe main goal of the bundled external resources is to ensure when people import the asset package they have everything they need to get started **all in one place**.  Currently you'd have to go and find the sharing services, download them, then make sure they're in the correct place yourself.\r\n\r\nMy thoughts that influenced this change:\r\n1. This project is a simple framework for learning & sharing with the community.\r\n2. This project is for staging and deploying an asset package that people will download, either from here or the Unity Asset Store, and should contain all the resources needed.\r\n3. For advanced developers to download and tailor this project  by exporting an asset package that fits their needs.\r\n\r\nCurrently if someone was to create a new project and import the current asset package, and try to use any of the menu items related to the sharing service they will get errors:\r\n![image](https://cloud.githubusercontent.com/assets/22268546/22616068/78f1ac84-ea73-11e6-91c8-b649dd9224c7.png)\r\nThe second message talking about manually coping some .exe is rather vague. It doesn't even give you a clue where to obtain it, considering that external folder doesn't exist if you've only downloaded just the asset package and not the whole HTK project.\r\n"""
204361458,492,b'Fixes issues with the server broadcasting when building as master.',"b'Was seeing issues with clients not connecting to the server in Master configuration with ""Compile with .NET Native tool chain"" checked. Unchecking the native tool chain resolved that issue. This code is a work-around that also resolves the problem and keeps the native tool chain enabled.'"
204269718,488,b'FocusObjectChanged if focused object gets destroyed',b'Added a condition to send the FocusObjectChanged event if the focused object get destroyed'
204025661,485,b'Minor fixes to Editor Hands',b'Fixes a material instance leak by setting the color property in the MaterialPropertyBlock instead of the renderer.material.color.\r\n\r\nUpdated Shader to include the PerRenderData flag on the Tint color property.\r\n\r\nRelated to https://github.com/Microsoft/HoloToolkit-Unity/issues/474'
203923495,484,b'Htk sharing/utilities refactor/formatting/fixes',"b""After the big sharing service update (https://github.com/Microsoft/HoloToolkit-Unity/pull/459) there have been quite a few issues.  This PR aims to fix those.\r\n\r\nUpdated Sharing Readme. [Preview Here](https://github.com/HodgsonSDAS/HoloToolkit-Unity/blob/HTK-SharingRefactor/Assets/HoloToolkit/Sharing/README.md)\r\nUpdated Utilities Readme. [Preview Here](https://github.com/HodgsonSDAS/HoloToolkit-Unity/blob/HTK-SharingRefactor/Assets/HoloToolkit/Utilities/README.md)\r\n\r\nResolves https://github.com/Microsoft/HoloToolkit-Unity/issues/483 : Fixes `Sharing.prefab` warning.\r\nResolves https://github.com/Microsoft/HoloToolkit-Unity/issues/480 : Adds better docs for sharing services, and a new test script named `UserNotifications.cs`.\r\nResolves https://github.com/Microsoft/HoloToolkit-Unity/issues/491 : Fixes null reference when sharing stage `AutoDiscoverServer == true`.\r\n\r\n- Refactored a few classes that probably belonged in Utilities folder.\r\n- Organized Sharing/Tests folder.\r\n- Fixed test scenes in sharing folder\r\n    - Missing `HoloLensCamera.prefab`\r\n    - `SharingTest.scene` did not have server address set to localhost\r\n- Cleaned up formatting and code in various files.\r\n- Removed redundant code.\r\n- Fixed most object boxing issues.\r\n\r\nI also found two redundant scripts but wasn't sure what to do with them `Assets/Utilities/Scripts/InterpolatedValues`:\r\n\r\n- QuaternionInterpolated.cs\r\n- Vector3Interpolated.cs\r\n\r\nBoth seem to be similar in function to the existing scripts in this folder."""
203522788,479,b'fixed Unity error caused by missing MonoBehaviour',b'The missing MonoBehaviour caused an error in Unity.\r\n\r\n'
203508817,478,"b""fix bug where scale and offset weren't correctly being disabled, add \xe2\x80\xa6""","b'\xe2\x80\xa6support for gloss maps, clean up defines, add test scene and supporting items'"
203493243,477,b'Minor fix to EditorHandControl',b'Fixes a material instance leak by setting the color property in the MaterialPropertyBlock instead of the renderer.material.color.\r\n\r\nUpdated Shader to include the PerRenderData flag on the Tint color property.\r\n\r\nRelated to https://github.com/Microsoft/HoloToolkit-Unity/issues/474'
203415025,476,b'Update to Unity 5.5.1f1',"b'Resolves https://github.com/Microsoft/HoloToolkit-Unity/issues/475\r\n\r\nhttps://unity3d.com/unity/whats-new/unity-5.5.1\r\n\r\n**Caution!**\r\n> - Warning about missing object references in the inspector after upgraded to 5.5. We have only received one bug report and we have not been able to reproduce the issue. If you find some/all of your object references missing in the inspector do not save your scene. Quit the editor and re-open your project and the references should come back correctly.\r\n\r\nHoloLens Specific Improvements:\r\n\r\n> - AR: Fixed a crash when exiting play mode during a Holographic Simulation session. (858208)\r\n> - HoloLens: Fixed a crash in Editor when terminating Remoting App during an active Holographic Remoting session.\r\n> - HoloLens: Fixed resume-from-suspend bugs that would occasionally crash the app or not render anything. (800796, 851897, 825951)\r\n> - HoloLens: Improved error reporting when failing to load PerceptionRemotingPlugin.dll (used by Holographic Remoting). (848237)\r\n> - Core: Fixed hangs in the job system when running on certain platforms with a low number of cores e.g. older Windows Phones, UWP dual core machines. (791434)\r\n> - Shaders: Optimized in-editor import, load time and memory usage for shaders with massive amounts of potential variants.'"
202955108,472,b'Added Spatial Understanding Readme',"b'Readme is now formatted similar to the other documents in the project.\r\nNow includes a list of all the plugins, scripts, and shaders.\r\n\r\nAdded Spatial Understanding Readme with links to Spatial Mapping & Spatial Understanding documentation as well as a link to the Expanding the spatial mapping capabilities of HoloLens case study.\r\n\r\nIncluded Spatial Understanding in Main Readme feature list.\r\n\r\nResolves https://github.com/Microsoft/HoloToolkit-Unity/issues/261\r\nResolves https://github.com/Microsoft/HoloToolkit-Unity/issues/435\r\n\r\n[Preview Here](https://github.com/HodgsonSDAS/HoloToolkit-Unity/blob/HTK-local/Assets/HoloToolkit/SpatialUnderstanding/README.md)'"
202739507,471,b'prevent cursor from disappearing on manipulation cancel',"b'Resolves #445 by adding additional checks to determine cursor state.\r\nThe first one essentially says that `IsInputSourceDown` should be `true` and visible hands should be greater than one to say that cursor is in a select state.  The second if statement is to mend the case where `IsInputSourceDown` happens to be true while no hands are visible, in which case we set `IsInputSourceDown` to false.'"
202228312,468,b'HoloToolkitCommon fix',"b'@RyanMonday pointed out some code that was left out of HoloToolkitCommon, which broke the new shader.'"
202012437,466,b'Fixing build break caused due to recent input changes merge',b'Simply added a curly brace to EOF.'
199665370,459,"b'Consume new HoloToolkit sharing components, merge other Microsoft changes from\xc2\xa0shipping products back into HoloToolkit '","b'[PR #69](https://github.com/Microsoft/HoloToolkit/pull/69) in the HoloToolkit project\xc2\xa0changes the native Sharing library to\xc2\xa0remove the usage of unsafe code in the managed Sharing scripts. This requires corresponding changes to HoloToolkit-Unity to match changes in the native library.\r\nAdditionally, there are a large number of other\xc2\xa0changes made in Microsoft-internal projects to the HoloToolkit that can be merged back. \xc2\xa0Changes include:\r\n* Moving all\xc2\xa0examples into namespaces\r\n* Adding new sync primitives to the sync system in\xc2\xa0the Sharing component\r\n* Updated\xc2\xa0C# headers for consistency across the project\r\n* New documentation for the Sharing system'"
199083573,455,b'HoloToolkit Input model: Adding simple test scene for gaze and air tap',"b""I've heard feedback on forums, comments and MVP program that folks would like simple starter scenes for the input model. \r\n\r\n1. Adding a simple test scene which has very little code and shows how to respond to gaze with IFocusable. Uses a performant custom shader to highlight the object's material. This is done via GazeResponder.cs\r\n2. Added a simple TapResponder.cs which changes the scale for the object when tapped.\r\n\r\nWill add something similar for Navigation rotate and Manipulation move next. \r\n\r\nHope these help!"""
199066067,454,b'Adding fast configurable shader',b'\xc2\xa0should be able to replace almost all uses of existing shaders.'
198671803,447,b'The check for a VR device does not happen at run time.',"b'If the app runs of a Windows 10 device that is NOT a HoloLens, it will will crash. This happens for instance when the Windows App Certification Kit runs. Result: the WACK lists a boatload of errors that will never happen when the app is actually deployed to a HoloLens, causing confusing for developers. Also, it prevents the app from running on a normal PC.'"
198655743,446,b'This does not compile. TapToPlace contains several errors',"b'""private virtual void"" for several methods is not valid -> ""protected virtual void"". And the IInputClickHandler.OnInputClicked is implemented as protected, but should be public, or the class does not implement the interface.'"
198292562,443,b'Wrapping code in #if UNITY_WSA for cross-platform support per #387',"b""See https://github.com/Microsoft/HoloToolkit-Unity/issues/387\r\n\r\nPrior to this PR, including HoloToolkit-Unity in a cross-platform Unity project would break all non-Windows Store (UNITY_WSA) platforms. This commit wraps the toolkit code in #if UNITY_WSA blocks to allow inclusion in cross-platform projects. There are a huge number of files in the project so this PR undoubtedly #if's out code that could safely be included in other platforms but at least it no longer takes down other platforms when included in projects. \r\n\r\nThere are zero functional changes in this PR other than wrapping code in #if UNITY_WSA blocks and changing a couple #if UNITY_METRO's to #if UNITY_WSA (UNITY_METRO is a deprecated #define for the code paths now referred to as UNITY_WSA).\r\n\r\nAs part of adding these changes, I started out by adding all the #if/#endif pairs at the top and bottom of the files, which led me to spot and correct a number of files that were missing standard Microsoft copyright comment blocks. After making that first pass at doing the outermost wrapping of the code, I realized that the #if's needed to be moved inside the MonoBehaviour class definitions so behaviors added to GameObjects in the editor would remain visible and connected to the objects when the build platform changed. Moving the #if's inside the MonoBehaviour class definitions forced many/most of the misc. classes in the project to be treated the same way (because they were involved as interfaces or generics in the MonoBehaviour-derived class declarations). This led me to do a pass moving all the #if UNITY_WSA's just inside the class definitions for all the classes. And *that* led to a final pass where a few of the classes needed hand-tweaked inner exclusions to prevent missing interface members and contained structs/classes from breaking the build. \r\n\r\nThere was a large set of files that were auto-generated using SWIG (https://github.com/Microsoft/HoloToolkit-Unity/search?utf8=%E2%9C%93&q=swig). These files contained a standard banner heading indicating they were auto-generated and should not be modified directly, so I didn't. Fortunately their presence doesn't appear to impact the cross-platform compatibility of the toolkit.\r\n\r\nAt this point the modified Toolkit can be included in cross-platform projects without breaking the build."""
198129090,440,b'Unregister global listeners on destroy',b'Some scripts were not unregistering on destroy. Most importantly SetGlobalListener.cs '
198055906,438,b'Changed InputEnabled/Disabled in InputManager.cs to the standard Even\xe2\x80\xa6',"b""The events InputEnabled and InputDisabled in the InputManager were of type Action. Although allowed by C#, it's not the common pattern. This change doesn't add any EventArg allocation.\r\n\r\nI also changed Cursor.cs to have event handlers calling the overridable methods. Changed these methods to protected as they should only be accessible by its descendants."""
197621938,433,b'Changed InputManager.HandleEvent() to public and removed all events from IInputSource.',"b""I realized that making InputManager.HandleEvent() public allows InputManager to be much simpler and independent of the events. This allows the handling of newer events without changing IInputSource. Input sources also don't have to register with the InputManager. EventArgs are not required so, no more duplicate code, memory allocations and copies in message handling, and 500 less lines of code to manage.\r\n@maxouellet I hope you like these changes.\r\nSome more cleanup may be possible now."""
197516758,432,b'Editor spatial understanding',"b'This covers #290 by making Spatial Understanding compatible with the editor. It works with and without remoting. It\'s not quite ready to go in, but I\'d like to get feedback (especially on the ""TODOs"" and a few questions I have).\r\n\r\nEveryone following along, feel free to grab this code and try it out (and let me know if you notice any issues!), but **I expect to do some history rewriting/rebasing on this before it goes in**, so don\'t base any work on this you\'re not prepared to hand-merge later.\r\n\r\nSee [Microsoft/HoloToolkit/pull/67](https://github.com/Microsoft/HoloToolkit/pull/67) for the changes to SpatialUnderstanding.dll.'"
197441980,430,b'Support lerping with unscaled time to enable pause menus',"b'This change enables editor input, tagalongs, and the cursor to work\r\nwhile the time scale is set to 0. Setting the time scale to 0 is a\r\ncommon practice to implement game ""pause"" behavior as is done in the\r\nUnity sample project. With this change, tagalong menus will still\r\nfunction even when the game is paused.'"
197307525,429,b'Update contribution instructions for Microsoft employees',b'I also started a similar [pull request for HoloToolkit](https://github.com/Microsoft/HoloToolkit/pull/66).'
197186072,428,b'TransformExtensions.GetFullPath() optimization',b'Create one single instance of StringBuilder.'
197176714,427,b'Added unit tests for VectorExtensions',"b""It's hard for the reviewers to test all functionalities so I think it's a good idea to start enforcing a unit tests requirement.\r\nHere is an example for the VectorExtensions. While working on it, I noticed that the latest functionalities added are actually not extensions. One good reason for them to exist...\r\nI placed the unit tests in a HoloToolkit-UnitTests folder under Assets to keep the HoloToolkit deployment simple.\r\nUnit tests execution is integrated into the Unity editor (since 5.3). It doesn't require the Unity Test Tools from the asset store.\r\nTo run all the tests: \r\n1. Click on the menu item Window | Editor Tests Runner. \r\n2. Click on the button Run All.\r\n \r\n \r\n\r\n"""
197149934,426,b'It makes no sense to hide the cursor when there is no cursor listed',"b""It makes no sense to hide the cursor when there is no cursor listed for a given state. It's better just retain the last one. Otherwise you are obliged to add a cursor for EVERY possible state."""
197012073,425,b'Add missing font for 3DTextPrefab',b'#377 \r\n\r\nThe `3DTextPrefab` came with a missing reference issue. Changed this to the originally intended Segoe UI font.'
197001586,424,b'Fixes material memory leaks in various files',"b'https://github.com/Microsoft/HoloToolkit-Unity/issues/236\r\nhttps://github.com/Microsoft/HoloToolkit-Unity/pull/354\r\n\r\nhttp://answers.unity3d.com/questions/548420/material-memory-leak.html\r\n\r\n> void OnDestroy() { DestroyImmediate(renderer.material); }\r\n\r\nhttps://docs.unity3d.com/ScriptReference/Renderer-material.html\r\n>Renderer.material\r\n>\r\n> public Material material;\r\n> Description\r\n> \r\n> Returns the first instantiated Material assigned to the renderer.\r\n> \r\n> Modifying material will change the material for this object only.\r\n> \r\n> If the material is used by any other renderers, this will clone the shared material and start using it from now on.\r\n> \r\n> Note:\r\n> This function automatically instantiates the materials and makes them unique to this renderer. \r\n> **It is your responsibility to destroy the materials when the game object is being destroyed.** Resources.UnloadUnusedAssets also destroys the materials but it is usually only called when loading a new level.'"
196980738,422,b'TapToPlace.cs: updated access modifiers',b'Made private fields protected to make this class easier to extend. https://github.com/Microsoft/HoloToolkit-Unity/issues/421\r\n\r\nAlso added tooltip for `IsBeingPlaced`\r\n\r\nMade unity specific methods private.'
196946729,420,b'Htk spatial mapping tap',"b""https://github.com/Microsoft/HoloToolkit-Unity/issues/335 Implements @pinkwerks spatial tap shader from PR https://github.com/Microsoft/HoloToolkit-Unity/pull/353\r\n\r\n![spatialtap](https://cloud.githubusercontent.com/assets/13334553/21396238/85435da8-c76d-11e6-9cc6-34bae2fdaa0d.gif)\r\n\r\nCould use a bit of tweaking, but it's very similar to the tap pulse you observe in the shell.\r\n\r\nNeeds a couple improvements to the shader:\r\n\r\n- [x] ~~Single & Stereo passes~~\r\n- [ ] Reduce overdraw and increase overall performance\r\n- [ ] Should be more like the occlusion shader, currently the spatial mapping tap shader uses black as the method of making the mesh invisible (really this only shows up on MR Video Captures).\r\n- [ ] Leading and trailing edge falloff curves to customize the edge transitions to be sharper / smoother.\r\n- [ ] Ability to fade at the end of its lifetime instead of just popping.\r\n\r\nThe SpatialMapping.prefab is set to now use this by default, and the Object Surface Observer component has been removed (It was mainly for testing in the emulator.  I believe prefabs should be production ready).\r\n\r\nYou can tweak all the setting through the spatial mapping manager:\r\n![image](https://cloud.githubusercontent.com/assets/13334553/21393202/6b5c0d7e-c761-11e6-829f-ed607f4e5660.png)\r\n\r\nI need someone to make sure all the test scenes and spatial understanding scenes work before we merge."""
196934734,419,b'Htk utilities update: FPSDisplay.prefab',b'Updated FPSDisplay.prefab to use the sphere based tagalong'
196912667,418,b'Extended Average and Median to support IEnumerable and Vector2',b'Added the oveloads but I would argue that the Average and the Median of an empty collection is not Zero. It should either throw an exception or return null (using Nullable<Vector3>). This forces the developer to check for empty collections and avoid weird runtime errors. What do you think?'
196798042,417,b'Add missing references for VectorExtensions.cs',b'Just pulled and was unable to compile because of missing references'
196795922,416,b'TapToPlace.cs : Fix parent movement logic',"b'#405 had an issue with parent movement and rotation.\r\n\r\nI simplified the logic and tossed out the ""Relational Distance"" and in its place just applied the movement vector the the parent object instead of the currently selected object which fix the issue of the Relational Distance becoming increasingly erroneous.'"
196731613,415,b'Added SpeechInputHandler',"b""SpeechInputHandler is to be used with the SpeechInputSource. It allows the mapping of keywords to script methods using the Unity editor inspector.\r\nThis PR also includes a custom editor for the SpeechInputHandler that shows the registered keywords on the SpeechInputSources as a dropdown. This way, the user doesn't have to type the keywords again and prevents typing errors.\r\n\r\n![collapsed](https://cloud.githubusercontent.com/assets/534533/21360828/7b19b064-c6d9-11e6-815f-5f8ea8c9273b.png)\r\n![expanded](https://cloud.githubusercontent.com/assets/534533/21360832/7e01dcf2-c6d9-11e6-9603-cdada4bb85ce.png)\r\n![dropdown](https://cloud.githubusercontent.com/assets/534533/21360835/804a2410-c6d9-11e6-835e-60aced6c8a95.png)\r\n\r\n"""
196686032,414,b'EditorGUILayoutExtension: Made allowSceneAssets false by default.',b'Also fixes issue when we want to display a blank field.'
196681938,413,b'Added missing using HoloToolkit.Unity.InputModule;',"b""Checked out today's master branch and it was giving me a compilation error."""
196583282,412,b'Remove test code from TapToPlace.cs',b'Remove useless test code'
196536619,410,b'Updates to EditorGUI Extensions in Utilities folder.',"b'Updated EditorGUILayoutExtensions to also handle ObjectFields with Material, SceneAssets, and Generic UnityEngine.Objects.\r\n\r\nCleaned up EditorGUIExtionsions and added SceneAsset and Material types to ObjectField.'"
196303179,405,b'Refactor TapToPlace.cs to be more generic',"b""#404\r\n\r\nThis makes the TapToPlace.cs script more generic. Start(), Update(), and OnInputClicked() are now virtual so when it's a base class these methods may be overridden.\r\n\r\nAdditionally you can now specify a parent to be moved with the currently tapped game object. If no parent is specified then the immediate parent is selected automatically."""
196137088,403,b'Htk spatial mapping refactor',b'1. Refactored Spatial Mapping Scripts into  their own namespace: `HoloToolkit.Unity.SpatialMapping`\r\n2. Removed imported materials from FakeSpatialMappingMesh && SRMesh.\r\n3. Organized project files in test folder.\r\n4. Removed some hidden parameter warnings from https://github.com/Microsoft/HoloToolkit-Unity/issues/210\r\n5. Misc cleanup and formatting in Spatial Mapping related classes.\r\n\r\nNew Folder Layout:\r\n- SpatialMapping\r\n    - Materials\r\n    - Plugins\r\n    - Prefabs\r\n    - Scripts\r\n        - RemoteMapping\r\n        - SpatialProcessing\r\n    - Shaders\r\n    - Tests\r\n        - Meshes\r\n        - Prefabs\r\n        - Scenes\r\n        - Scripts'
195639151,401,b'DehydrationDeactivation.cs tweak',b'DehydrationDeactivation.cs moved `gameobject.SetActive(false)` into `OnStateExit` to ensure we finish our animation before turning the game object off.'
195524203,399,b'Added Average and Median extension methods to VectorExtensions. Average computes the average / mean value of all input vectors and median the Median of all input vectors.',b''
195509089,398,b'Fix KeywordManager initialization',b'A fix to issue #396 and removed Linq.'
195277591,394,b'fix(nearplanefade) multi_compile _NearPlaneFadeOn',"b""As mentioned in issue #391 I'm not very familiar with how Unity shaders work under the covers, so I am not 100% sure if this is the correct fix or not. That being said, it produces the correct results."""
195274986,393,b'fix(stereo) allowing shaders to work with singlepass',"b""Many of the holotoolkit shaders weren't working correctly with the\r\nsingle-pass stereo instancing option enabled in unity 5.5. This change\r\nadds the instanceId and sets up the rendertarget index as required.\r\n\r\nSee issue #390"""
195169096,392,b'Auto Configuration Updates and VR Fix',"b'This pull request addresses both #230  and #365. The Auto Configure menu options have now all been broken out into their own windows and the windows clearly describe the impact of each option.\r\n\r\n**Scene Settings**\r\n![image](https://cloud.githubusercontent.com/assets/5230670/21129350/8bd071c2-c0c6-11e6-8498-22902544c6bd.png)\r\n\r\n**Project Settings**\r\n![image](https://cloud.githubusercontent.com/assets/5230670/21129372/a3961762-c0c6-11e6-99f5-4556c3aaa6f9.png)\r\n\r\n**Capability Settings**\r\n![image](https://cloud.githubusercontent.com/assets/5230670/21129382/b922495c-c0c6-11e6-98b7-c19525bf2ea5.png)\r\n\r\nIn addition #365 was resolved by updating the code to reflect the new schema in ProjectSettings.asset.\r\n\r\nFinally, **ConfigureMenu.cs** was renamed to **AutoConfigureMenu.cs** in order to correctly reflect the class name that was already in the file.'"
195072253,389,b'Cursor Animation Tweak',"b'Allowed the animation from circle <-> dot to be interrupted, making the cursor feel more responsive.'"
194785495,386,b'Delete reference of Main camera.prefab in Utilities/README.md ',b'Camera is renamed to HoloLensCamera.prefab and is now contained in the Input folder. The Input/README.md has been updated correctly.'
194680352,385,b'Minor formatting changes to HandDraggable.cs',b'Matches formatting pattern throughout HTK'
194660246,382,b'FpsDisplay fixes',"b""Removed redundant text mesh.\r\nUpdated prefab's pivot to be pre-selected to Y axis. (was unset previously)"""
194429296,378,b'Moved Test scenes into correct folder.',b''
194349299,376,b'Updated Documentation',b'- Added Asset Package download location to Getting Started.md\r\n- Added Input Class Diagrams to Input/Readme.\r\n- https://github.com/Microsoft/HoloToolkit-Unity/issues/431 Removed reference to GestureManipulator.cs in Input/readme.\r\n- https://github.com/Microsoft/HoloToolkit-Unity/issues/380 Removed Main Camera.prefab reference in Utilities/Readme.md and GettingStarted.md\r\n- https://github.com/Microsoft/HoloToolkit-Unity/issues/411 Removed reference to ManualCameraControl in GettingStarted.md\r\n- https://github.com/Microsoft/HoloToolkit-Unity/issues/217 Added Release and version link to GettingStarted.md\r\n- Moved Project specific settings changes into Using HoloToolkit-Unity in Your Project instead of Preparing a Scene for Holographic Content in GettingStarted.md\r\n- Added more content to Preparing a Scene for Holographic Content in GettingStarted.md\r\n- Minor Formatting.\r\n'
194106573,373,b'Updated Readme.MD to include unity project version',b''
194053042,372,b'Fix object orientation being rotated 180 degrees',"b'When using ""Oriented towards user"" mode, there was a bug that the object is rotated not towards the user, but exactly from the user.\r\nReversing the subtraction solves this problem.'"
193887760,371,b'Fix check to see if solver is initialized',b'#238'
193504663,369,b'Fixed reversed logic and typo in InputManager.cs',b'Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/366'
193500365,368,b'Updated ProjectSettings.asset for 5.3.0f3',"b'For some reason this file does not update properly when saving project, but generates after building a project.'"
193210315,364,b'Resizing a large test scene texture.',"b""It was 12MB, making up ~1/3 of our Assets folder size. Now it's under 1MB. This probably isn't a huge deal either way, but I figured it'd be nice, especially since this Texture is for a test scene."""
193209473,363,b'Add a check to only process key bindings if the recognizer is listening',"b""This way, the actions are only performed if they'd be in context for the recognizer too."""
193140708,361,b'Updated Project Editor Version to 5.5.0f3',b''
193127387,360,b'Fix KeywordManager not stopping when deactivated',"b'This PR fixes the issue with `KeywordManager` keyword recognition not stopping when the script is deactivated. It also checks for the script being re-enabled and if `RecognizerStart` is set to `RecognizerStartBehavior.AutoStart`, resumes keyword recognition.'"
192686858,356,b'Fix namespace error on HeadsUpDirectionIndicator',b'#355 \r\n\r\nChange the bad namespace to the standard one'
192607463,354,b'Added SpeechInputSource for integration of the KeywordRecognizer in the InputManager',"b'KeywordManager implementation as an input source. This makes it coherent with the new InputManager infrastructure.\r\n\r\nThe KeywordManager test scene was changed to show 3 spheres. Only the sphere with focus changes color. A global ""reset all"" voice command changes all spheres to grey even with no sphere in focus.'"
192480863,353,b'Add HoloShell like shader for rendering spatial mesh on air tap #335',"b'Needs a component to drive the radius and center location. Not sure of the best way to do this the ""HoloToolkit Way"".'"
192379394,352,b'Breaking Change: Merging Extensible input module into master',b'This brings in the new extensible HoloToolkit Input Module changes into master.'
192366281,351,b'Updates for the issue #346 and #350',b'Updated shader path for 3DTextSegoeUI.mat.\r\nUpdated test scenes camera to holographic MainCamera.\r\n'
192297495,349,b'Force Text Asset Serialization and visible meta files',"b""@jwittner I don't know why this isn't the default settings in Unity."""
192151374,348,b'Updating Test Scene',"b""Fixed 'missing prefabs' issue on the TextPrefabSamplesTest.unity scene."""
192141206,347,b'Adding .meta files',b'Adding missing .meta files for https://github.com/Microsoft/HoloToolkit-Unity/pull/339'
191931722,345,b'Unity 5.5.0 beta compatibility',"b""When you import HoloToolkit files into your project in Unity 5.5.0 beta, you will found some warnings as show below:\r\n\r\n```\r\nUsing obsolete custom response file 'smcs.rsp'. Please use 'mcs.rsp' instead.\r\nUnityEditor.Scripting.Compilers.ScriptCompilerBase:BeginCompiling()\r\n\r\nUsing obsolete custom response file 'gmcs.rsp'. Please use 'mcs.rsp' instead.\r\nUnityEditor.Scripting.Compilers.ScriptCompilerBase:BeginCompiling()\r\n```\r\n\r\nSo I add a 'mcs.rsp' file to solve this problem.\r\n\r\n"""
191741194,344,b'Audio : Fix Profiler Bug + Added stops events fade',"b'audio - added a fix profiler bug + added Stops events with fades + if emitter is null, UAudioManager = emitter'"
191624618,343,b'Spatial mapping tap shader: Initial Version',"b'For this this shader to work well it needs to be driven from a\r\ncomponent. Specifically, _Radius needs to be animated and _Center needs\r\nto be set in world space, preferably to the Tap positon.'"
191370695,342,"b""Merge branch 'HTK-master' into ExtensibleInputModule""",b'Merged latest from Microsoft/HoloToolkit-Unity:Master into ExtensibleInputModule'
191085893,341,b'GazeManager as InputSource',"b'As pointed out in [here](https://github.com/Microsoft/HoloToolkit-Unity/issues/277#issuecomment-261543344), altough GazeManager is an input source, it is treated as a special case by the InputManager. This PR removes that special treatment.\r\n\r\nGazeManager derives from BaseInputSource but stays a singleton for backwards compatibility. Just like all other input sources, it registers with the InputManager. The IInputSource was extended to include a FocusChanged() method.\r\n\r\nAll MonoBehaviours that want to handle focus events have to implement IFocusHandler. The methods are called by the InputManager according to their registration (focused object, global or fallback).\r\n\r\nThis implementation allows the GazeManager to be replaced by any other custom implementation.\r\n'"
190870176,340,b'The WorldAnchorManager was putting the CreateAnchor request in a queu\xe2\x80\xa6',"b'The WorldAnchorManager was putting the CreateAnchor request in a queue but delete Anchor was immediate,\r\n\r\nthis was causing wierd issues as if you created and anchor and deleted it soon, could delete before creating and it will be a little wierd.\r\nFixed by putting the delete request also in the queue and after dequeueing and verified the fix'"
190840937,339,b'Text prefab with optimized dimension and rendering quality',"b""Text is the one of the most important component in Holographic apps. To display text, there are two types of text components you can use in Unity\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8aUI Text and 3D Text Mesh. However, there are two problems with these.\r\n**1. They are blurry in default. You need to tweak some of the variables to get the sharp high-quality text.**\r\n**2. They are too big in default. You need to scale down a lot to get manageable size in HoloLens.**\r\n\r\nThese Text prefabs provide better text rendering quality and proper dimension. Below describes the way to find the scaling factor to get proper dimension with UI Text and 3D Text Mesh. \r\n\r\n# Working with Fonts in Unity\r\nUnity assumes all new elements added to a scene is 1 Unity Unit in size, or 100% Transform scale, which translates to about 1 meter on the HoloLens. In the case of fonts, the bounding box for a 3D TextMesh comes in, by default at about 1 meter in height.\r\n\r\n# Font Scale and Font Sizes\r\nMost visual designers use Points to define font sizes in the real world, as well as their design programs. There are about 2835 (2,834.645666399962) points in 1 meter. Based on the point system conversion to 1 meter and Unity's default TextMesh Font Size of 13, the simple math of 13 divided by 2835 equals 0.0046 (0.004586111116 to be exact) provides a good standard scale to start with, though some may wish to round to 0.005.\r\n\r\nEither way, scaling the Text object or container to these values will not only allow for the 1:1 conversion of font sizes from a design program, but also provides a standard to maintain consistency throughout the application or game.\r\n\r\n# UI Text\r\nWhen adding a UI or canvas based Text element to a scene, the size disparity is greater still. The differences in the two sizes is about 1000%, which would bring the scale factor for UI based Text components to 0.00046 (0.0004586111116 to be exact) or 0.0005 for the rounded value.\r\nDisclaimer: The default value of any font may be effected by the texture size of that font or how the font was imported into Unity. These tests were performed based on the default Arial font in Unity, as well as one other imported font.\r\n\r\nBased on these scaling factors, we have created two prefabs - UI Text and 3D Text Mesh. Developers can use these prefabs to get sharp text and consistent font size. Since default font material does not support occlusion, we also want to include simple shader that supports occlusion.\r\n\r\n## Blurry default text - UI Text and 3D Text Mesh\r\n![unitytexts](https://cloud.githubusercontent.com/assets/13754172/20501257/feb1324c-afed-11e6-86d3-8c8a42ec8471.png)\r\n\r\n## Sharp text rendering quality with proper dimension\r\n![2016-11-06 00_19_44-unity personal 64bit - untitled - textquality - windows store apps_ _dx11_](https://cloud.githubusercontent.com/assets/13754172/20501271/0dee849e-afee-11e6-8cfe-87ad6eb32068.png)\r\n\r\n## Text examples with the prefabs\r\n![textprefabinstructions05](https://cloud.githubusercontent.com/assets/13754172/20501279/1b563424-afee-11e6-843c-d0d682e1f286.png)\r\n\r\n## Default font shader vs shader with occlusion support(included in this update)\r\n![textocclusion2](https://cloud.githubusercontent.com/assets/13754172/20535172/ae060a06-b098-11e6-8170-cb5a177f4b81.png)\r\n\r\n"""
190839148,338,b'Adding StopSpeaking() to TextToSpeechManager',"b'Requested here (and I think this is useful!): https://forums.hololens.com/discussion/3107/how-do-i-stop-the-tts-from-speaking-in-the-holotoolkit?\r\n\r\nChecks to see if the AudioSource is playing and, if it is, stops it. This allows the user to cancel TTS playback mid-stream, without having to keep track of the AudioSource outside TextToSpeechManager.'"
190044560,332,"b""Merge branch 'master' into ExtensibleInputModule & Perf optimizations""",b'Grabs the latest updates to master branch.\r\n\r\nAlso addresses https://github.com/Microsoft/HoloToolkit-Unity/issues/333:\r\n- Removed allocations for each input execution in InputManager.cs\r\n- Cached `raycastResultList` in GazeManager.cs\r\n- Cached animator parameters in TestButton.cs\r\n- Removed redundant check before assignment in Cursor.cs\r\n- Fixed issue where `base.OnDestroy` was not being called last in override methods'
189565522,330,b'IInputHandler interface split + fixes',"b'- Fixed new scenes and scripts that were added to the master branch while the input work was happening\r\n- Added InputManager to a few scenes where it was missing, causing an error in the cursor script when it tries to register itself as an input listener\r\n- Split IInputHandler in two interfaces: IInputHandler, which is for input up/down, and IInputClickHandler, which is for click events (the tap gesture).'"
188764684,328,"b""Merge branch 'master' into ExtensibleInputModule""",b'Merges Microsoft/HoloToolkit-Unity:master into ExtensibleInputModule branch.'
188611340,327,b'Cross platform compatibility',b'Creates ability to use HoloToolkit in companion apps on other platform targets.'
188061262,326,b'remove unused variable warnings from the Unity Editor',b''
187778667,324,b'ifdef out ManualCameraControl if not in the UNITY_EDITOR',b'fix missing object in prefab\r\nremove excessive debug print'
187735942,323,b'audio - added fade out to UAudioManager + quick fix 3d spacial positionning type display',b''
187425493,321,b'add simple audio occlusion',b'adds:\r\n* IAudioInfluencer.cs - interface defining methods to implement to become an audio influencer\r\n* AudioEmitter.cs - find and add/remove audio influencers onto an audio source\r\n* AudioOccluder.cs - implementation of IAudioInfluencer providing occlusion'
187420294,320,b'put BulletController and PlayerController into separate name space',b'add copyright information to source files\r\nadded debug text on the anchor position.'
187222995,319,b'Extensible input module + new cursor',"b'These changes add the new HoloToolkit Input Module and the new cursor implementation. Documentation for the new input scripts has been updated, and all existing test scenes and prefabs have been fixed so that their behavior remains the same. This pull request is targeting the ExtensibleInputModule branch, so that we can stabilize in there as necessary and give people some time to take a look at the changes before they go to master.\r\n\r\nThe main changes are the following:\r\n\r\n- New extensible input module, as discussed [here](https://github.com/Microsoft/HoloToolkit-Unity/issues/277). The old GesturesManager, HandsManager and GazeManager have been removed, since they are fully replaced by the new scripts. Existing scripts that dependend on those have been modified to use the new input module.\r\n\r\n- New extensible cursor implementation, as described by @paseb [here](https://github.com/Microsoft/HoloToolkit-Unity/issues/277). This adds a new Cursor prefab (DefaultCursor). The existing cursors prefabs have been modified so that they use the new cursor scripts, and the old cursor scripts have been removed.\r\n\r\n- Singleton has been modified to be more streamlined and predictable. Existing Singletons have been adjusted accordingly. The main breaking change here is that singleton classes that implement Awake or OnDestroy should override them, and make sure to call base.Awake() and base.OnDestroy().'"
187178105,318,b'Sharing Test script update.',b'Enables ImportExportAnchorManager to place user into a room if testing in editor.\r\nAlso helps fix https://github.com/Microsoft/HoloToolkit-Unity/issues/292 while in editor.'
186631655,316,b'Heads Up Direction Indicator',"b""Fixes #256 \r\nThis is the second implementation that uses a quad and purely world space calculations to place the indicator. This change in approach is based on feedback from the review of the first implementation that concerned issues around uGUI. Also, there edge cases using the Screen->World transformations that don't arise with using purely world space vector calculations."""
186424965,314,b'Create an example scene that does world location sharing over UNet',"b""Still need to add some debug data into the scene somewhere to show the state of everything, but I'll likely be offline for a few days and wanted to make this available."""
185676079,309,"b'spatial sound - Added spread,spatial,reverb curve to UAudioManager'",b''
184924042,307,b'Updated HoloTookit Menu Dropdown',b'Moved UAudio profiler from Addons to HoloToolkit.\nChanged priority of menu items and fixed improper usage.\n![image](https://cloud.githubusercontent.com/assets/13334553/19659399/b97ad9b2-99f9-11e6-9a2e-94b8c6929e59.png)\n![image](https://cloud.githubusercontent.com/assets/13334553/19659408/c5b8090c-99f9-11e6-91ce-37e8f4b60250.png)\n![image](https://cloud.githubusercontent.com/assets/13334553/19659418/d1cec8d4-99f9-11e6-92c2-dc7deb9d9576.png)\n'
184813464,306,b'Sharing fixes',"b""This references issue https://github.com/Microsoft/HoloToolkit-Unity/issues/292\n\nThe major fixes here are subscribing to `NetworkConnection` events so that we know when we're connected to the server instead of using `Invoke` with a certain time (which failed when init took more than one second) and using `Singleton<T>` for `SharingStage`, as the previous implementation was broken and an unnecessary duplication of efforts.\n\nMy previous testing showed the Sharing sample scene to work now, which wasn't the case before; I would appreciate if some other people tested and verified this to be true.\n"""
184552911,305,b'Fixed GameControllerManipulatorTest.unity scene',b'Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/302\n'
184529055,303,b'switch default material to a HoloToolkit_Default Material',b'Remove the tiny sphere from the cursor off holograms\n'
184354003,301,b'Two minor updates to CursorManager',"b""- Issue DebugWarning if CursorManager can't find a GazeManager in the scene\n- Allow for CursorOnHolograms and CursorOffHolograms to be null\n"""
184332142,299,"b""Fix spatial mapping processing test doesn't get surfaces in emulator""",b''
184047454,297,"b""fix SpatialUnderstanding doesn't work in emulator""",b''
183833709,296,b'Fix DirectPairing from crashing the editor and application',b''
183768937,294,b'Increment SpatialMappingSource UpdateID based on mesh updates',b'Fixes #293\n'
183533981,289,b'Saving Spatial Mapping & Understanding Meshes',b'Modifications and improvements to saving meshes\n\nProvides way to export .room files to (wavefront) .obj files. Fixes Spatial Mapping meshes from losing transformation data when saving to .room files.\n'
183514686,288,b'Spatial Mapping for Holographic Remoting',b'This commit is in regards to issue 272:\nhttps://github.com/Microsoft/HoloToolkit-Unity/issues/272\n\nIt allows for Spatial Mapping to occur during Holographic Remoting while still leaves it disabled for those who are using the Editor without Holographic Remoting enabled. \n'
183486322,286,b'simplified GazeStabilizer and made it less sticky',b'I tested this on the ColorPickerExample scene on 4 users (aside from myself).  Everyone agreed that this updated version was better.  \n'
183290746,285,b'Correct null reference exception when mesh is removed during coroutine',b'This is to resolve issue #284 \n'
183090380,283,b'Fix issues #280 and #282',b'Issue #280 - using the MeshRenderer bounds rather than the collider bounds. Also being sure to transform the verts from the meshes into world space\n\nIssue #282 - fixed the reported logic bug and cleaned up the UpdateInstability function a little bit\n'
182619459,278,"b""documenting FPSDisplay within Utilities' README""",b'Resolves #262 \n\n@jwittner\n'
182574574,276,b'Renamed Example and Test Scenes to be more descriptive.',b'fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/270\n'
182571918,275,b'Renamed Example and Test Scenes to be more descriptive.',b'Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/270\n'
182109812,269,b'fix gesture manipulator test scene is broken',b'Switched from initializing gestureManager.instance in Awake rather than Start.\n'
181544844,266,b'fix for New spatial mapping drops frames every update period ',b'Fixes #264 \nFixes #207 \n'
181249838,263,b'Cursor feedback update',"b'Updated CursorFeedback.cs to reset the Hand Detected Assets transform rotation back to 0,0,0 so it faces the same direction as our cursor.\n'"
181011323,260,b'Fixed angular size expanded',"b'In some cases text scales too small using FixedAngularSize. Though the overall size stays visually the same based on the FOV, the content can scale too much when getting closer to UI elements.\n\nI added an override value that will reduce or increase the scale ratio as needed. By default it will act exactly the same as it does now, but if there is a UI element with content scaling too small, the override size ratio can be used to reduce the amount of scale as the user get closer to the element. This new value takes the original scale ratio and treats it like a lever using the starting position as the fulcrum. The override scale ratio moves this lever up or down to adjust the scale ratio (or angular ratio) so that the UI content is always legible.\n'"
180928440,258,b'Sharing SDK update to ObjectElementAdapter.cs',b'Added missing Element changed events to ObjectElementAdapter.cs\n'
180769723,257,b'Heads Up Direction Indicator',b'Fixes #256 \n'
180711700,254,b'Sync Feature-SendMessagRemoval with master branch',b'fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/253\n'
180650131,252,b'Adding note related to building project',"b""Added note regarding the architecture type needed to properly build/run the project from the examples. I've added this because in our case, when we try to build and run the project in ARM (because that's the default arch type when we open it in Visual Studio) we're having errors when it comes to getting the required DLLs\n"""
180321728,250,b'Edits & fixes to GestureManager & GestureManipulator',"b""- Fixed GestureManipulator.cs initialization from `Start` to `Awake` (https://github.com/Microsoft/HoloToolkit-Unity/issues/268).\n- Fixed delegate subtraction warnings in GestureManipulator.cs.\n- Fixed GestureManipulator.cs to only start manipulation if we're currently focused on it's attached `GameObject`.\n- Also added source kind to the gesture delegate events.\n- Added ability to customize the mouse select button.\n- Fixed mousebutton down && EditorSelectKey down to only process if we've got a new focused object from the last frame, instead of throwing Tap and Pressed on _every_ frame.\n- Moved Focused object calculation into its own method so we can call it anytime, not just `LateUpdate`.\n- Added explicit private/public to unity methods.\n- Added Detailed xml comments.\n- Moved all hand related code from GestureManager.cs to HandsManager.cs.\n- Added limited Controller (Clicker) support for Gestures  (Used in combination with Gaze).\n"""
180127680,249,b'Cached GestureManager in GestureManipulator. Fixed minor formatting.',b''
180078313,248,b'Basic cursor null ref and bitwise fixes',b'Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/246 Null Ref on Awake when looking for `GazeManager.Instance`.\nFixes https://github.com/Microsoft/HoloToolkit-Unity/issues/197 Layer raycast mask to use bitwise op for calculation.\n'
180074853,247,b'Added delegate event to HandsManager.cs for better hand tracking capabilities.',b'Added delegate event to HandsManager.cs for better hand tracking capabilities.\n'
179927077,245,b'Splitting spatial understanding mesh into submeshes',"b""One of the performance issues with Spatial Understanding is that it makes one big mesh.  This prevents the game engine from culling parts of the mesh that aren't visible.  This change splits the mesh into cubic meter chunks.  it does not get us all the way to 60fps all the time.  To do that will require some changes in native portion of spatial understanding.\n"""
179858149,244,b'Initial PR for SendMessage depreciation',b'See Issue https://github.com/Microsoft/HoloToolkit-Unity/issues/224 for more details\n'
179848974,243,b'reduce a triple copy to a single copy',b''
179291001,241,b'Added Pressed and Released events to the Gesture Manager',"b'UI elements should have a pressed and release state to provide the correct about of visual feedback to users, typical to most current UI systems. The GestureRecognizer.RecognitionStartedEvent fires first when a finger and thumb come together and GestureRecognister.RecognitionEndedEvent fires last, after all other manipulation events. This allows the UI to provide a solid down visual state so that the user knows how their input is being interpreted.\n\nThis is building off the current pattern of SendMessage for OnSelect, OnGazeEnter and OnGazeExit.\n'"
179276863,240,b'Create WorldAnchorManager to abstract saving and loading of persisted anchors',b'Updated TapToPlace to use this script.\nUpdated TapToPlace test scene to include the WorldAnchorManager on the Managers GameObject.\n'
178957903,237,b'Generated meta files',b'Someone probably forgot to commit these meta files when their corresponding files/folders were created.\n\nfixes https://github.com/Microsoft/HoloToolkit-Unity/issues/235\n'
178895937,234,b'Gaze manager update',b'References issue https://github.com/Microsoft/HoloToolkit-Unity/issues/232\nAdded public bool devs can flip it utilize either built in gaze stabilizer or custom.\nAdded GazeStabilizer.UpdateHeadStability to GazeManagers update.\nUpdated RayCast Hit Calc to use the stabilized head ray from GazeStabilizer\nRemoved redundant using of UnityEngine.VR.WSA.\nAdded XML Documentation.\nMinor formatting organization of fields and properties.\n'
178872552,233,b'Updated FpsDisplay Optimizations',b'Fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/216\n\nUtilizes TextMesh and removes the two boxing allocations created every update.\n'
178626950,229,b'Updated FpsDisplay Optimizations',b'Utilizes TextMesh and removes the two boxing allocations created every update.\n'
178444746,227,"b'Replace GameObject.SendMessage(""Method"") with event delegates'","b'Pull request for issue https://github.com/Microsoft/HoloToolkit-Unity/issues/224\n\nMany [experienced Unity developers](http://jacksondunstan.com/articles/3335) would probably tell you not use [GameObject.SendMessage(""String"");](https://docs.unity3d.com/ScriptReference/GameObject.SendMessage.html) because [it\'s slow](http://answers.unity3d.com/questions/327888/is-sendmessage-slow-.html) (under the hood it uses reflection), hard to debug, and it lacks direct symbol references in the editor which makes it prone to spelling errors _because_ it\'s a string and not a symbol. This can also make it difficult to find everywhere the method referenced can be called and could potentially increase the amount of spaghetti code.  It may be worth while to see this updated to utilize a [delegate/Event call instead](https://unity3d.com/learn/tutorials/topics/scripting/events?playlist=17117).\n## TL;DR\n\nThis will make the code easier to follow in the editor, easier to debug, and will increase performance.\n## [Some arguments for using a delegate vs SendMessage](http://answers.unity3d.com/questions/185980/sendbroadcast-message-vs-delegates-and-events.html):\n\n> SendMessage and delegates are used for similar purposes, but they work entirely differently. Delegates/Events behave exactly like they do in any other .Net program. SendMessage() is called much like Unity calls other messages like Update(). Unity reflects over all the code on the game object to see if it can invoke any messages.\n> \n> As far as performance. Delegates are several times faster than SendMessage. In the order of performance:\n> \n> `(Least) Direct Method Call ==> Delegate/Event ==> Update() ==> SendMessage (Most Expensive)`\n> As far as usage, SendMessage is like a very broad direct method call. The general paradigm is that one script specifically wants to send a message to a specific object. We\'re just not sure how many times is can respond or if it can respond at all. We know the intended receiver, we just don\'t know if it can receive the message.\n> \n> With events, I usually follow the idea that the event owner doesn\'t know who or how many objects might respond. We are simply telling the world that something happened without too much knowledge of who will use this information.\n\nThis means if you try to trigger or respond to an event with the wrong type, you\'ll get a compiler error... where as if you do the wrong thing with SendMessage you\'ll get a runtime error that\'s much harder to track down.  Another major benefit of using Delegate/Event is type checking. A delegate specifies specific types that must be passed as parameters, while SendMessage just accepts an object.\n'"
178440990,226,b'Merge in from msft master',b''
178431332,225,"b'Replace GameObject.SendMessage(""Method"") with event delegates'","b'Pull request for issue https://github.com/Microsoft/HoloToolkit-Unity/issues/224\n\nMany experienced Unity developers would probably tell you not use [GameObject.SendMessage(""String"");](https://docs.unity3d.com/ScriptReference/GameObject.SendMessage.html) because [it\'s slow](http://answers.unity3d.com/questions/327888/is-sendmessage-slow-.html) (under the hood it uses reflection), hard to debug, and it lacks direct symbol references in the editor which makes it prone to spelling errors _because_ it\'s a string and not a symbol. This can also make it difficult to find everywhere the method referenced can be called and could potentially increase the amount of spaghetti code.  It may be worth while to see this updated to utilize a [delegate/Event call instead](https://unity3d.com/learn/tutorials/topics/scripting/events?playlist=17117).\n## TL;DR\n\nThis will make the code easier to follow in the editor, easier to debug, and will increase performance.\n## [Some arguments for using a delegate vs SendMessage](http://answers.unity3d.com/questions/185980/sendbroadcast-message-vs-delegates-and-events.html):\n\n> SendMessage and delegates are used for similar purposes, but they work entirely differently. Delegates/Events behave exactly like they do in any other .Net program. SendMessage() is called much like Unity calls other messages like Update(). Unity reflects over all the code on the game object to see if it can invoke any messages.\n> \n> As far as performance. Delegates are several times faster than SendMessage. In the order of performance:\n> \n> `(Least) Direct Method Call ==> Delegate/Event ==> Update() ==> SendMessage (Most Expensive)`\n> As far as usage, SendMessage is like a very broad direct method call. The general paradigm is that one script specifically wants to send a message to a specific object. We\'re just not sure how many times is can respond or if it can respond at all. We know the intended receiver, we just don\'t know if it can receive the message.\n> \n> With events, I usually follow the idea that the event owner doesn\'t know who or how many objects might respond. We are simply telling the world that something happened without too much knowledge of who will use this information.\n## Changes to the following classes:\n\nGestureManager.cs\n- [x] Change System.Actions to delegate events to fix delegate subtraction issues in GestureManipulator.cs\n- [x] Add OnSelect(GameObject) event\n- [x] Add explicit private modifiers to Unity Methods\n\nGestureManipulator.cs\n- [x] Remove redundant using HoloToolkit.Unity reference\n- [x] Ensure we\'re checking GesureManager instance is null\n- [x] Add explicit private modifiers to Unity Methods\n\nGazeManager.cs\n- [x] Remote unused using reference\n- [x] Add delegate events for OnGazeEnter\n- [x] Add delegate events for OnGazeExit\n- [x] Ensure StabilizationPlaneModifier instance is null\n\nTapToPlace.cs\n- [x] Update to work with new design pattern\n\nGestureResponder.cs\n- [x] Update to work with new design pattern\n\nSelectedObjectMessageSender.cs\n- [x] Remove File\n\nSelectedObjectMessageReciever.cs\n- [x] Rename file to ChangeColorOnFocus\n- [x] Update to work with new design pattern\n\nFocusedObjectMessageSender.cs\n- [x] Remove File\n\nFocusedObjectMessageReciever.cs\n- [x] Rename file\n- [x] Update to work with new design pattern\n\nOnSelectEvent.cs\n- [x] Remove File (replaced by Intractable.cs)\n\nOnGazeEnterEvent.cs\n- [x] Remove File (replaced by Intractable.cs)\n\nOnGazeLeaveEvent.cs\n- [x] Remove File (replaced by Intractable.cs)\n\nIntractable.cs\n- [x] Add file Intractable.cs\n\nKeywordManager.cs\n- [x] Update to work with new design pattern\n\nScaleObjectMessageReciever.cs\n- [x] Update to work with new design pattern\n- [x] Renamed to ScaleFocusedObject.cs\n\nSphereKeywords.cs\n- [x] Update to work with new design pattern\n## Updates to the following scenes:\n\nSelectedObjectKeywords.unity\nFocustedObjectKeywords.unity\nGazeEvents.unity\n## Updates to the following Prefabs:\n\nSelectedObjectKeywordManager.prefab\nFocusedObjectKeywordManager.prefab\n'"
178096901,223,b'Fixes remote head manager',b'fixes https://github.com/Microsoft/HoloToolkit-Unity/issues/214 by excluding the addition of the local users head from the remoteHeads dictionary.\n'
177886603,222,b'Focus object fix',"b'When looking at adding events for gesture recognition start and end so that my UI elements could display a visual down and up state, I noticed that when focused changed, the new focused object was being set before the gestures were canceled. Canceling gestures sends the recognition end event, but to the new focused object.\n\nWhile I was updating the logic, adding the ""SendMessageOptions.DontRequireReceiver"" to the OnSelect message seemed to match the intent that any object may or may not be listening for the OnSelect message.\n'"
177642477,221,b'Added voice selection to TextToSpeechManager.',"b""This pull request fixes #220. It adds a dropdown in the inspector for TextToSpeechManager that includes 4 options:\n1. Default\n2. David\n3. Mark\n4. Zira\n\nThis list unfortunately cannot be dynamic because we can't execute UWP APIs in the Unity Editor. Even if we could, the voices available on the desktop will likely not match those on the HoloLens. Therefore, this list is hard coded. If we find the list changing frequently in the future (unlikely) we can add an option for typing in the voice name.\n\nAt runtime, if the dropdown was set to Default no extra code will be run and the behavior will be as before. If the dropdown is set to anything other than Default, the installed voices are searched for one that matches the selected name. If the voice is found, it's used. If the voice is not found, an error is logged but the default voice is still used.\n\nThis pull request also includes an update to the test scene. Now each of the three cubes has a unique voice and all three cubes speak their voice name as part of their message.\n"""
177605240,219,b'Added menu item to enable recommended capabilities',"b'This pull request addresses #202. It adds a new menu item underneath the HoloToolkit to enable the recommended default capabilities. There are two options:\n1. Recommended\n2. Recommended with Internet\n\nBoth options enable Microphone, SpatialPerception and WebCam. The second option also enables InternetClient.\n'"
176235706,209,b'Manipulation is  focus object only',b''
175947998,205,b'GameControllerManipulator and example added',"b""GameControllerManipulator allows you to use a Bluetooth game controller (such as the Xbox One S controller) to move and rotate GameObjects. GameControllerManipulator is fully customizable - you can specify the controller axes and buttons you'd like to use, the manipulation speed, and so on. \n\nGameControllerManipulator can either work on the GameObject you attach it to, or using MoveGazeTarget, you can set it up so it will act upon the current gaze target (as provided by GazeManager). \n\nIn the default setup, you can use the left stick to move the GameObject up and down, and the triggers to move them closer or away from you. You can also press and hold Button A to move the object with your gaze.\n\nBecause there is a bug in Unity that doesn't allow HoloLens to access all of the Xbox One S controller's sticks and buttons, GameControllerManipulator also contains a modifier button to switch the left stick into rotation mode. I expect to make this feature obsolete once we can properly access all of the sticks and buttons on the controller.\n\nThis PR contains a sample in the Assets/HoloToolkit-Examples/GameControllerManipulator folder that illustrates the use of GameControllerManipulator. A video of this sample in action can be seen at [https://twitter.com/vbandi/statuses/771363854622294016]\n"""
175317689,201,b'Fixing FPSDisplay prefab to work better with tagalong and world space camera for UI Text',b'Prefab did not work well due to camera being used in screen space for the UI Text. \nChanged the UI Text camera to render in world space.\n\nAlso scale did not work great so fixed that too.\nAdded SimpleTagAlong and BillBoard to have the FPS counter follow along as we gaze around in the world.\n'
174155718,196,b'Adding support for hand based object manipulation',"b'Holograms 211 contains a relatively simple implementation of hand based\nobject manipulation.  That implementation uses the world space deltas\nto move holograms exactly as the hand moves.  This works fine in some\ncases, but becomes limiting in more sophisticated manipulation\nscenarios.\n\nThe implementation in this change is taken directly from 3D Viewer\nand ActionGrams and supports more sophisticated movement scenarios\nwhich combine both gesture and gaze.  For example, with this new\nimplementation if you manipulate a hologram and then turn your head\nthe hologram will move with your head, while still allowing you to make\nadjustments with your hands.  If you manipulate a hologram and then\nwalk somewhere else the hologram will move with you as long as you\nmaintain the gesture.  This allows for users to make large adjustments\nusing their gaze and position, while making smaller adjustments with\ntheir hands, resulting in more intuitive and effective manipulation.\n'"
173901981,192,b'bug fix - Update builds before computing most recent build',"b'If we press ""Build SLN, Build APPX, then Install"" and we are incrementing\nthe appx version on every build, we end up installing the _second to last_\nbuild instead of the _most recent build_ because we are not updating the\nlist of builds in BuildDeployWindow.CalcMostRecentBuild. Fix this.\n'"
173865134,191,b'Add persistence WorldAnchor component to objects when placing them in the world',b'Encourages good practice of adding WorldAnchor components when placing\nobjects in your world #129.\n'
173261251,187,b'SpatialUnderstanding HoloToolkit module - first time checkin',"b'This module builds on top of the spatial mapping component, analyzing the environment and supporting queries like - what is floor, ceiling, and much more. This module exposes the analysis techniques used in Conker and Fragments.\n'"
172634731,186,b'Change camera backgorund color',"b'Camera background color to RGBA 0,0,0,0. But ""Apply HoloLens Scene Settings"" is black(0,0,0,1)\nIt was changed from black to clear.\n\nhttps://developer.microsoft.com/en-us/windows/holographic/unity_development_overview#configuring_a_unity_project_for_hololens\n'"
172389594,185,b'Build Window - Add option to auto-increment appx version',"b'- Add checkbox ""Increment version"" in build window\n- If checked, build a new appx, incrementing the last number in\n  Major.Minor.Build.Revision. Example: 1.0.0.3 => 1.0.0.4\n\nThis can be useful for easily checkpointing your work, especially when\nyou\'re actively working on something and somebody asks for a demo it\'s\neasy to just install an older version.\n'"
172225488,183,b'Updated getting Started documentation',"b'I added a few clarifications to the Getting Started documentation since I actually ran into these issues and figured others might too. Experienced Unity users will not need this, but Unity beginners will appreciate the clarifications.\n'"
172013717,182,b'Update Main Camera FOV',"b""This change sets the Main Camera's FOV to 16. When running apps in Unity, the area displayed in the Game View will now be a better representation of what will be visible on the emulator and device. This should make scene design/layout easier for developers.\n\nFixes #176 \n"""
171986910,181,b'T2S public bool is speaking',b'TextToSpeechManager can now be queried whether or not it is currently speaking text.\n'
171928300,180,b'T2S public bool isSpeaking',b'TextToSpeechManager can now be queried whether or not it is currently speaking text.\n'
171734855,179,b'Added a prefab to monitor the connection status of the Sharing Service.',"b'For development mode only.\nMaybe with a bit of effort we can make this production ready? (i.e. a way to hide when not in use, using voice commands, maybe even use some other controls and not the UI layer ?)\nRelates to #178 \nFixes #178\n'"
171734374,177,b'AutoDiscover in Sharing Stage',b'Added a flag in SharingStage to enable server auto discovery. \nUses the first server that responds to connect to.\nFixes #172 \n'
171491065,175,b'BuildWindow GUI state bugfix',b'- Build window GUI could become permanently disabled if xde locator was not searching and did not have previous scan data (e.g. very first run through).\n- Renamed some locals for clarity\n'
171210281,173,b'Added SphereBasedTagalong + test scene',b'See issue https://github.com/Microsoft/HoloToolkit-Unity/issues/111\n'
170970290,170,b'Adding a test scene for KeywordManager',b''
170963934,169,"b'A forgotten meta file, an unchecked-in material, and an improperly merged meta file'","b'All of these auto generated when I opened the project, with the exception of the README.md.meta\n'"
170696104,167,b'Fixed cursors to offset along gaze direction.',"b'Modified cursors to apply the DistanceFromCollision offset along the\ngaze direction rather than the normal of the hit object. Using this\nmethod the cursor stays in line with gaze even with large\nDistanceFromCollision values.\n\nPrior to this change if GazeManager.Normal has a large angle of\nincidence with the gaze direction the cursor would not line up with gaze,\nthe higher DistanceFromCollision the worse it would be.  Try out the\nColorPicker example with and without the change to see the improvement.\n'"
170553160,166,b'Fixed cursors to offset along gaze direction.',b'Modified cursors to apply the DistanceFromCollision offset along the\ngaze direction rather than the normal of the hit object.  Using this\nmethod the cursor stays in line with gaze even with large\nDistanceFromCollision values.\n'
170062095,165,b'Missing meta files for GazeRuler example',b''
170049722,164,b'Added ColorPicker example',b'The gazeable color picker example I mentioned before\n'
169853002,161,b'Added xde detection/deployment (fixes #149)',"b""- Added XDE detection and GUI element to support picking localhost/emulator options, without sacrificing the undocumented/unsupported non-local-ip mode. Just in case some folks are using it.\n- Adjusted copyright as it was incorrect (and included obsolete 'all rights reserved' silliness). This code was originally provided by @jevertt with my modifications added. No transfer of copyright occurred and we maintain our rights in alignment with CLA. (@jevertt, let me know if you want your full name in there instead. It would certainly look nicer.)\n\nOnGui cleanup is needed; will submit a future PR for that.\n"""
169667943,160,b'Log error when Sharing binaries are not found in the External folder ',"b'Scenario: Developer copies the cloned HoloTookit files into their own\nproject and External folder gets left behind. Even if they use a unity\npackage, the Externals folder is not part of that package.\n\nFix: Log an error when the files are not found in the expected path.\nFixes HoloToolkit-Unity GitHub issue #135\n'"
169629074,159,b'Updated SharingClient libraries with latest version from HoloToolkit.',b'Enables server auto-discovery.\n'
169526475,158,b'Fix some GazeRuler issues',b'I have rename some error class name and delete some unused variables\n\nFixes #155 \nFixes #152 \n'
169486407,156,b'Fix mesh saver open file for write',b'stream was null when I ran this code in debug mode. I fixed it now so it should not be null anymore.\n'
169280103,154,b'delete unused variable',b'I have deleted the unused variable and fix the issue\n'
169037899,151,b'Spatial Mapping Updates',"b""This update addresses issues #144, #143, and #39. Unfortunately, most code looks new, even though it's simply being moved to a new location. Here's a list of what the major changes are in this PR:\n1) Adds the ObjectSurfaceObserver for loading meshes from a room file to the SpatialMapping prefab (replaces the old FileSurfaceObserver).\n2) Moves the FileSurfaceObserver onto the RemoteMapping prefab, for saving/loading files from a remote mapping session.\n3) Moves all scripts related to RemoteMapping into a separate folder called 'RemoteMapping'.\n4) Moves all scripts related to Processing into a separate folder called 'SpatialProcessing'.\n5) Removes RemoteMapping prefab from the SpatialProcessing.unity test scene. SpatialProcessing test will now load a .obj file when running in Unity via the ObjectSurfaceObserver script.\n6) Adds a RemoteMapping.unity test scene to help test the RemoteMapping scripts.\n7) Updates spatial mapping documentation.\n8) Removes Plugins\\WSA\\x64\\PlaneFinding.dll (which was failing WACK for some people and is not actually used by anything).\n"""
169028850,150,b'Split the documentation out into sub documents',b'Also made all internal links relative so they work from any branch.\n\nFixes #82 \n'
168997053,148,b'Updates from opening with Unity 5.4.0f1',b''
168760913,147,b'Master',b'Spatial Mapping updates (part 1).\nThis updates addresses issue #146. The SpatialMappingRenderer and SpatialMappingCollider components are now provided by Unity and do not need to be in the HoloToolkit.\n'
168489433,145,b'Added Support for Events on Audio Play Completion',b'Implements enhancement #116\n'
168155133,142,"b'bug fix - with multiple local builds, would install the last build instead of the selected one (issue with lambda modified closure)'","b'bug fix - with multiple local builds, would install the last build instead of the selected one (issue with lambda modified closure)\n'"
168025721,141,b'Add new HoloLens sample project - GazeRuler',"b""GazeRuler is a project which can be used to measure spatial distance and arean. It's based on Gaze and Spatial Mapping and users can enjoy it by using voice command and gesture. \nI think that it's useful for some developers who want learn Spatial Mapping.\n"""
168013175,140,b'Fixed Billboards alignment across all axes.',b'Fixes #139 \n'
167919270,138,b'Prevent DevicePassword from being overwritten',"b'BuildDeployPrefs.FullReinstall was overwriting the BuildDeployPrefs.DevicePassword field every time it gets set, making it impossible to enter a password.\n'"
167799473,137,b'Update paper reference in comment (fixes #132)',"b""Side note: Recommend adopting EOF change as it's automatically made by GitHub's online code editor. Rejecting changes due to unwanted EOF will alienate potential contributors for zero actual project gain.\n"""
167727818,136,"b'Build only enabled scenes when using ""Build Visual Studio SLN"" button in Build Window'","b""When building an app from unity it's possible to have multiple scenes in\nthe build window, but only have one scene enabled. Unity only includes the\nenabled scenes, see https://docs.unity3d.com/Manual/BuildSettings.html.\nHave HoloToolkit build window match this behavior.\n"""
167210166,134,b'Changes to HoloToolkit menu for setting project / scene defaults',"b""Create a log of changes to display to user. Allow other menu options to\nadd to scene or project to use these new changes. Add additional checks\nfor unchecked/missing holographic options using API (rather than file\nprocessing). Don't reload for quality level changes (Unity picks up\nchange in file).  Don't set quality if the option is already set\n(therefore don't reload when not necessary)\n"""
166683758,130,b'Switch to using the PackageFamilyName and other BuildDeploy fixes',b'In the BuildWindow - \n1. Switch to using the PackageFamilyName (from the appName) for app matching.\n2. Fixed a launch app failure that repros on certain devices.\n3. Fixed a copy/paste error in the preferences refactor\n'
166462092,128,b'Adding HoloToolkit-Examples folder',b'This folder will host samples/examples that use the HoloToolkit to help solve interesting scenarios.\n'
166425296,127,b'Adding HoloToolkit-Examples folder',b'This folder will host samples/examples that might use the HoloToolkit to help solve interesting scenarios.\n'
166395172,126,b'Support for command line builds',"b""Had to move the BuildCommands out of the HoloToolkit.Unity namespace so it would be discoverable via the -executeMethod command line args. Renamed from BuildCommands to HoloToolkitCommands so the name at least indicates it's origin.\n\nMoved the BuildDeployWindow EditorPrefs into a static BuildDeployPrefs class so that HoloToolkitCommands ( and others ) could leverage the configuration from the window.\n\nFixes #85 \n"""
166233401,125,b'Update GettingStarted.md to clarify export requirements.',b'Fixes #124 \n'
165451435,119,b'Build window - fix for potential install/launch issue',"b""Switched to using the app name (rather than package name) when looking for the app in the app list (if the package name didn't contain the app name, this would fail - this is a more correct way to do it)\n"""
165440133,118,b'WindowOcclusion shader and test scene',"b'Added a WindowOcclusion shader for the already-published case study, plus a simple scene to demonstrate it working.\n'"
165432959,117,b'now includes microphone scripts to leverage new MicStreamSelector plugin',b'Fixes #86 \n'
165295928,115,b'Various fixes to ManualCameraControl :',"b""- no need to check for GetKeyDir up/down AND GetAxis horizontal/vertical\n- moved new walk code where it's supposed to be\n- exposed fast control key (instead of always using left shit)\n- also removed an annoying debug statement\n"""
165238548,112,b'Fix for MSBuild .sln path argument to allow for directories with spaces.',"b""Having spaces in your solution's directory resulted in MSBuild Error (Code = 1) when building your appx. Enclosed the path in escaped quotes to resolve the issue.\n"""
164808638,109,b'Add UnityEvent support',b'PR for https://github.com/Microsoft/HoloToolkit-Unity/issues/107\n\nAdded OnSelect and OnGazeEnter/Leave unity events hook incl a test scene   \n'
164642943,108,b'Fix bad project list via absolute path',b'Fixes #104 \n'
164434814,106,b'Build automation window - fix for nuget restore',"b""fix for nuget restore (previously didn't function on some people's machines)\n"""
164401870,103,b'Updated the GettingStarted markdown for clarity and to match the UI',b''
164378641,102,b'Resolve LocalIPsOnly warning (fixes #101)',"b'Will likely be wired up to a configuration option when HTTPS support is implemented, so makes more sense as a property.\n'"
164362815,100,b'add autoStartObserver to SpatialMappingManager',b'This change allows applications do defer starting the spatial mapping observer rather than have it immediately start.\n\nAlso moved the stored mesh loading logic from Start() to StartObserver() and added an #if !UNITY_EDITOR block around the code in StopObserver() for balance.\n'
164317744,99,b'Add a SpeakHtml method to TTS',"b'Add a basic ability to parse and speak HTML. Parsing of the HTML is sufficient, but could certainly be improved over time. Currently ensures paragraphs/headings are correctly separated that encoded characters are converted to their txt form and tags are removed.\n\nThe end resuly is a txt file that is then spoken using the existing SpeakText method.\n'"
163916569,96,"b'Update and refactor to GazeManager, creation of StabilizationPlane script'","b""Refactored stabilization plane code into its own file. Added functionality to tweak the stabilization plane's behavior and to visualize the plane when running in the Unity editor.\n"""
163750595,95,b'Changed Input Axes strings  to variables',"b'exposing them to the editor for non- standard unity input configuration. \n\nThe right thumb stick will need to have axes created in Project Settings -> Input in unity to work correctly.\n\nDue to Hololens unique nature, none of my projects have had the standard input setup so far. Putting in this class would, at least temporarily break things. These changes mostly fix that issue. \n'"
163602068,93,b'Changed Input Axes to variables to allow for..',"b'non standard unity input configurations.\n\nDue to the unique nature of Hololens, none of the projects I have in the works use the standard unity input configuration(partially due to trying\nto get a bluetooth game controller to work with unity and hololens, no luck there yet). The changes submitted here allow the user to select which axes to use from the object ManualCameraControl is attached to instead of having to dig into the input settings.\n'"
163600265,92,b'Of course I completely screwed up my first pull request',"b'non standard unity input configurations.\n\nDue to the unique nature of Hololens, none of the projects I have in the works use the standard unity input configuration(partially due to trying\nto get a bluetooth game controller to work with unity and hololens, no luck there yet).  The changes submitted here allow the user to make\nchanges select which axes to use from the object ManualCameraControl is attached to instead of having to dig into the input settings.\n'"
163554082,91,b'Document how to get started',b'As a newbie to C# and Unity (and obviously HoloLens) I took some wrong turns that led me down the path of importing HoloToolkit as a Git submodule rather than as a Unity package. As a result I raised a couple of invalid issues here (#89 and #90). \n\nThis Getting Started guide is intended to prevent others making the same mistakes (and for me to have your team review my approach to ensure I got it right this time).\n\nFixes #89 and #90\n'
163463920,87,b'Build automation window for faster test iteration with device',"b'This is a first time checkin of a Build & Deploy window. It supports\none-button clicks for building the SLN file, building the APPX,\nuninstalling & installing on device, grabbing the log file (among other\nthings). Also has a single click build SLN, APPX, and install option.\n'"
162890461,83,b'Added ControlMode feature to ManualCameraControl (fly or walk) + made GestureManager editor friendly',"b'- fly: current behaviour where the camera just moves along the forward direction\n- walk: the camera will move on a X/Z plane, you can then also move up and down using page up/down\n  Also exposed 2 control speed values that used to be hardcoded\n  All default values have been set to not change the current behaviour of the script\n\nAlso trivial change to GestureManager: added editor only code to send the ""OnSelect"" message to the focused object when we right click or press a specific key (space being the default)\n'"
162217646,78,b'Changing HoloToolkit UI-Default shader to CursorShader',"b""Changed name and folder location so it does not conflict with Unity's default UI-Default shader.\n\nFixes #75\n"""
162216090,77,b'Editing example test scene for issue #58',b'This change sets the Occlusion and Wireframe materials on the Spatial Mapping Renderer component that is attached to the main camera in the Example scene.\n'
162201658,76,b'Updating with Microsoft Open Source Code of Conduct information',b'Updating with Microsoft Open Source Code of Conduct information\n'
162100443,72,b'Fixing issue #71',"b'https://github.com/Microsoft/HoloToolkit-Unity/issues/71\n\nThe proposed change makes GazeManager.FocusedObject into a public property and introduces several new classes to facilitate sending arbitrary events to dynamic objects via KeywordManager that do not require additional code:\n- Adds FocusedObjectMessageSender class whose SendMessageToFocusedObject method can be registered as a response in KeywordManager to enable arbitrary messages to be sent to currently focused object.\n- Adds SelectedObjectMessageSender class whose SendMessageToSelectedObject method can be registered as a response in KeywordManager to add voice commands to select objects and enable arbitrary messages to be sent to currently selected object. Saying ""Select Object"" selects currently focused object and selection persists even when gazing away. Saying ""Clear Selection"" resets currently  selected object.\n- Adds FocusedObjectMessageReceiver class which shows an example on how to handle messages sent by FocusedObjectMessageSender. In this particular example, focused object color is toggled on gaze enter/exit events.\n- Adds SelectedObjectMessageReceiver class which shows an example on how to handle messages sent by SelectedObjectMessageSender. In this particular example, selected object color is toggled when selecting the object and clearing currently selected object.\n- Adds FocusedObjectKeywords and SelectedObjectKeywords test scenes created to test above functionality. In the first scene, gazing on an object and saying ""Make Smaller"" and ""Make Bigger"" will adjust object size. In the second scene, gazing on an object and saying ""Select Object"" will persistently select that object for interaction with voice commands, after which the user can also adjust object size with ""Make Smaller"" and ""Make Bigger"" voice commands and finally clear currently selected object by saying ""Clear Selection"".\n\nChanges have been discussed in the original PR:\nhttps://github.com/Microsoft/HoloToolkit-Unity/pull/69\n\nThis PR also introduces a high-level concept of policies to control object selection:\n1) Selecting object for interaction with voice commands by simply gazing at it.\n2) Selecting object for interaction with voice commands by gazing at it and issuing an explicit ""Select Object"" voice command.\n3) Other object selection policies are also possible, e.g. auto-aim or selection hysteresis.\n'"
162064484,70,b'Exposing occlusion material to address issue #58',"b""Spatial Mapping renders Hot Pink because it uses Resources.Load to load\nmaterials that do not exist under a resources folder. This change will\nstill require that the user set the occlusion and render materials\ndirectly (or else they'll see hot pink), but now exposes the 'Occlusion\nMaterial' as a property that can be set in the Inspector.\n"""
161793053,69,b'Adding method in GazeManager to send a message to object that is bein\xe2\x80\xa6',"b""\xe2\x80\xa6g focused on, which then can be added as a response in KeywordManager.\n\nHere's how this is used from KeywordManager: http://i.imgur.com/PAGXMTu.png\n\nThe idea is to not to add a dependency on GazeManager inside KeywordManager.\n\nComments are welcome.\n"""
161784682,68,b'Default mouse look control to Shift key',b'Resolves #65 \n'
161783932,67,b'TextToSpeech test scene now text file.',b'Resolves #66 \n'
161495481,64,b'Feature magicwindow',b'Hosting some files for the magic window feature work.\n'
159688218,59,b'Addressing internal feedback for input/utilities',"b'Addressing some internal feedback.  Things like rewording comments/errors, renaming variables for clarity, instantiating at more appropriate times.  The biggest change might be in GazeManager, where Normal = -gazeDirection was changed so that the cursor front faces back to the user in a no-raycast-hit scenario. (Hard to notice because our default cursor is directionless)\n'"
159040528,57,b'BUG FIX: SpatialMappingRenderer.cs referenced materials in the wrong location',"b""It seems like some materials got moved and this script wasn't updated to the new location\n"""
158466509,56,b'Change null coalescing operator to ternary for proper Mono 3.5 support',b'fixes #55\n'
158453869,54,b'Removing AudioIO to be replaced with MicStreamSelector',b'Removing the non WACK compliant binary and scripts referencing it.\n\nThis will be updated with MicStreamSelector.dll when VOIP support is added.\n'
158016702,53,b'StopObserver summary typo',b'Minor but bubbles up through IntelliSense and can cause confusion\n'
157296086,52,b'Added Build commands and menu.',b'Menu allows for building the project with preferred settings.\nMenu allows for opening the solution from the build.\n\nBoth commands ask about executing the other at appropriate times.\n'
157081505,51,b'Added new HoloToolkit menu for easy Configuration',"b'Auto Configure -> Scene, applies settings to main camera\nAuto Configure -> Project, applies build, quality, and project settings.\n\nSee here for applied setting:\nhttps://developer.microsoft.com/en-us/windows/holographic/unity_development_overview#Configuring_a_Unity_project_for_HoloLens\n\nResolves #50 \n'"
156410732,48,b'Adding Text to Speech (Pull Request #3)',b'This pull request includes all of the changes requested from the last two pull requests (https://github.com/Microsoft/HoloToolkit-Unity/pull/26 and https://github.com/Microsoft/HoloToolkit-Unity/pull/38). It also adds the following changes from the latest request:\n1. Corrected camel case of method name. \n2. Changed logging strategy from exception to direct logging. \n3. Completely removed WAV class and integrated conversion methods into the TextToSpeechManager.\n'
155792844,47,b'Adding ManualCameraControl.cs and test scene',"b'ManualCameraControl.cs is a script that you can add to the main camera in order to control the camera with keyboard and mouse in unity preview mode.  (This script is pulled from galaxy explorer)\n\nManualCameraControl.unity is a test scene that shows how to use the script. When play mode is entered, you can move with keyboard and look around using ctrl + mouse.\n'"
155601662,46,b'GazeStabilizer Optimization',"b""A queue's ElementAt method iterates internally until it reaches element i. Calling this multiple times within a for loop is very slow.  This commit changes the Queue to a List so that it can iterate more quickly.\n"""
155503749,44,b'Added FPSDisplay prefab',b'uses the Fps display script to render frame rate and render times directly in your scene.\nFixes #42 \n'
155398671,43,b'Fix for file updates on open.',b'Example.unity is converted to text from binary because project is\nconfigured for Force Text assets.\n\nMissing meta files are added for SpatialSound/Scripts/UAudioManager\nhierarchy.\n'
155155034,41,b'Fixed potential null reference exception in CustomMessages.cs',b'Introduced null checks for SharingStage and ServerConnection.\nFixes #40 \n'
154818235,38,b'Added TextToSpeechManager to support dynamic speech (request 2)',"b'This pull request contains the changes requested from the last pull request. \n\nNamely:\n1. No longer using Singleton < T >\n2. Spelling corrected\n3. Regions Removed\n\nI also added the ability to speak SSML, which I had left out of the previous \npull request.\n\nPlease note that the code for TextToSpeechManager is 100% new code by \nme. However, portions of the Wav class were based on this sample: \nhttp://answers.unity3d.com/questions/737002/wav-byte-to-audioclip.html\n\nThe author does release that code for others to use and I have \nattributed the article in the class comments, but if this source \nis not acceptable we will need to rewrite the WAV class.\n\nHere are the steps for adding Text to Speech to your own apps:\n1. Create an AudioSource somewhere in the scene. I recommend creating it on an empty GameObject that is a child of the Main Camera and is positioned about 0.6 units above the camera.\n2. Add the TextToSpeechManager component to the scene.\n3. Assoicate the AudioSource with the manager.\n4. Obtain a reference to the TextTosSpeechManager by calling GetComponent on the GameObject where the script resides.\n5. Call TextToSpeechManager.SpeakText(""Hello World"");\n6. Alternatively call TextToSpeechManager.SpeakSsml(""..."");\n'"
154615776,37,b'Updated KeywordManager to support key bindings as well',b'This allows quick and easy debugging in the Unity Editor\nFixes Issue #36.\n'
154548535,35,b'Fixed SurfacePlane functionality in Editor',"b""Added method BoundedPlane to build from Transform.\nIn SurfacePlane Awake, set plane to BoundedPlane from self transform.\nIn SurfacePlane Start, update the surface plane.\n\nNote that UpdateToSurface is delayed until start so that SurfaceMeshesToPlanes.Instance can be initialized by the it's Awake call. Setting the plane must happen in Awake so that modifications when instantiated dynamically aren't overwritten.\n"""
154362990,33,b'update spatial sound folder layout to match other folders',b'resolves #30\n'
154360210,31,b'Adding TapToPlace',b'Adding TapToPlace script which helps place an object on a real surface.\n\nCloses #17  \n'
153907826,29,"b""Don't reset plane information on start as it may have already been up\xe2\x80\xa6""",b'\xe2\x80\xa6dated\n'
152888403,27,b'Updating whitespace in the spatial mapping shaders',b'I missed these in my previous pull request.\n'
152880176,26,b'Added TextToSpeechManager to support dynamic speech',"b'Please note that the code for TextToSpeechManager is 100% new code by \nme. However, portions of the Wav class were based on this sample: \nhttp://answers.unity3d.com/questions/737002/wav-byte-to-audioclip.html\n\nThe author does release that code for others to use and I have \nattributed the article in the class comments, but if this source \nis not acceptable we will need to rewrite the WAV class.\n\nHere are the steps for adding Text to Speech to your own apps:\n1. Create an AudioSource somewhere in the scene. I recommend creating it on an empty GameObject that is a child of the Main Camera and is positioned about 0.6 units above the camera.\n2. Add the TextToSpeechManager component to the scene.\n3. Assoicate the AudioSource with the manager.\n4. In code call TextToSpeechManager.Instance.Speak(""Hello World"");\n'"
152699734,24,b'Fix simple error',b'Error in RemoveSurfaceVerticies was causing it to fail\n'
151717048,21,b'Updating README to match new folder structure',b'1. Added a table of contents.\n2. Reorganized the readme so its easier to navigate.\n3. Update the readme with appropriate links.\n'
151007196,20,"b'Fixing typos, replacing tabs and trailing whitespace, changing the quality settings, and updating to 5.4.0b14'",b'Also added a missing meta file from the submodule refactoring.\n'
151000270,19,b'Add SetFocusPointForFrame stability plane to GazeManager',"b'By adding the SetFocusPointForFrame to the GazeManager, we will help\nstabilize the hologram the user is currently gazing at.\nhttps://github.com/Microsoft/HoloToolkit-Unity/issues/18\n'"
150760887,16,b'added partial to all top level manager classes',"b'added partial to all top level manager classes, resolves Microsoft/HoloToolkit-Unity#7\n'"
150277940,15,"b""Don't require a receiver for gaze enter/level messages""",b'This addresses issue #14\n'
149811669,13,b'Refactored HoloToolkit in submodules',"b'HoloToolkit is now made of 6 different submodules:\n- CrossPlatform: utility scripts used to wrap Win32 and WinRT APIs in a single API call that works in Unity editor and in a UWP app\n- Input: for cursor input and eventually other input-related content\n- Sharing: networking and sharing components\n- SpatialMapping: includes spatial mapping and plane finding\n- SpatialSound: positional audio\n  -Utilities: generic scripts, prefabs and shaders useful for HoloLens development\n'"
148519886,12,b'Send OnGazeEnter and OnGazeLeave messages when the user gazes on a hologram',b'Addresses Issue #11 \n'
148516730,10,b'Added FocusedObject property',b'Adds a property to GestureManager to address Issue #9 \n'
148141126,8,b'Refactored HoloToolkit in submodules',"b'HoloToolkit is now divided in 6 different submodules.\n- CrossPlatform: utility scripts used to wrap Win32 and WinRT APIs in a single API call that works in Unity editor and in a UWP app\n- Input: for cursor input and eventually other input-related content\n- Sharing: networking and sharing components\n- SpatialMapping: includes spatial mapping and plane finding\n- SpatialSound: positional audio\n\n-Utilities: generic scripts, prefabs and shaders useful for HoloLens development\n'"
144421644,5,b'Add unified Spatial Mapping Components',"b'This adds two components: SpatialMappingCollider and\nSpatialMappingRenderer. These components provide intelligent defaults\nand follow best practices for handling Spatial Mapping.\n\nAdditionally, these components are customizable and implement heuristics\nthat better support tracking loss or moving far away from an observed\nregion.\n\nAdditionally\n- Move Wireframe and Occlusion shaders and materials to\n  Resources/HoloToolkit for default loading in the components\n- Add section to README.md describing these components and update\n  existing SpatialMapping section to suggest using the components by\n  default.\n\nThis fixes #4\n'"
137612104,3,"b""Added a collection of useful extension methods for Unity's Vector structs""",b'Adds some missing functions for Vector3 and Vector2 which were quite useful so far.\n'
137608882,2,b'Added simple Unity Behaviour which calculates the FPS for live display in FoV',"b""Just a simple Unity Behaviour which calculates the frames per seconds and shows it in a UI Text control.\nThis has proven to be useful when the Text was used with a Tagalong so one could always see the FPS and doesn't have to look at WebD in order to see the frame rate.\n"""
133839261,1,b'Ensure that rotation is smoothed when SmoothLerpToTarget is True.',"b'When SmoothLerpToTarget is true, the target value that we are\ninterpolating to should be lerpTargetLocalRotation. For example, on line\n320 we compute angleDiff assuming the new angle we are going to is\nlerpTargetLocalRotation.\n\nHowever, when performing the actual Quaternion.Slerp computation, we are\ncurrently setting the target as targetRotation. Fix this by setting the\ntarget in the Quaternion.Slerp call to lerpTargetRotation and\nlerpTargetLocalRotation.\n'"

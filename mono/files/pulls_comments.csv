pull_no,comment_no,comment_body
444,1514215,b'try {\n..\n} catch { \n..\n}\n'
444,1514216,b'Same here\n'
2750,55879252,b'Fixed.\n'
2804,57744364,b'Will update the patch with this and use IKVM.Reflection now.\n'
2804,57744563,"b""I tested this with the assembly having a custom attribute from an assembly which was not available when `al` was run, and it didn't crash. This is the exact use case that I am trying to fix here in fact.\n"""
2804,58388738,"b""If I use `ResolveMissingMembers` and don't create the Missing assemblies, then `asm.__GetCustomAttributes` tries to load referenced assemblies via `ReflectionOnlyLoad` and that crashes. I haven't been able to figure out how `__IsMissing` can be useful here.\n"""
2804,58399318,"b""Using `Universe::Mscorlib` would not be correct here, because the template assembly might not be referencing the same mscorlib as the one used by the executing assembly. Eg. if the template assembly is from `Xamarin.Android`, then the versions wouldn't match. In any case, we don't need to match the version. We just want to check that the attribute is from an assembly named `mscorlib`.\n"""
2804,58617242,"b'The `AssemblyName` instance gets populated before the call to this function, hence the use of `ref`.\n'"
2804,58617372,"b""AFAICS, this is required. I found only one relevant define - `NO_SYMBOL_WRITER`, but it isn't enough to not require referencing this assembly.\n"""
2804,58624095,"b'Oops, fixing! thanks!\n'"
2988,63059305,"b'@ludovic-henry I tried your suggestion, but I still hit the same issue! I did check that `WaitForExit` was indeed called in the `if` block, but still when `ExitCode` was accessed after that, it threw the same exception!\n\n```\n/Users/ankit/dev/xamarin-android/build-tools/mono-runtimes/mono-runtimes.targets: error : Error executing task Exec: Process must exit before requested information can be determined.\n                                Error executing task Exec: System.InvalidOperationException: Process must exit before requested information can be determined.\n                                  at System.Diagnostics.Process.EnsureState (System.Diagnostics.Process+State state) [0x000b9] in /Users/ankit/dev/mono/mcs/class/referencesource/System/services/monitoring/system/diagnosticts/Process.cs:1439\n                                  at System.Diagnostics.Process.get_ExitCode () [0x00000] in /Users/ankit/dev/mono/mcs/class/referencesource/System/services/monitoring/system/diagnosticts/Process.cs:219\n                                  at (wrapper remoting-invoke-with-check) System.Diagnostics.Process:get_ExitCode ()\n                                  at Microsoft.Build.Utilities.ToolTask.ExecuteTool (System.String pathToTool, System.String responseFileCommands, System.String commandLineCommands) [0x00101] in /Users/ankit/dev/mono/mcs/class/Microsoft.Build.Utilities/Microsoft.Build.Utilities/ToolTask.cs:185\n                                  at Microsoft.Build.Tasks.Exec.ExecuteTool (System.String pathToTool, System.String responseFileCommands, System.String commandLineCommands) [0x00026] in /Users/ankit/dev/mono/mcs/class/Microsoft.Build.Tasks/Microsoft.Build.Tasks/Exec.cs:83\n                                  at Microsoft.Build.Utilities.ToolTask.Execute () [0x0001c] in /Users/ankit/dev/mono/mcs/class/Microsoft.Build.Utilities/Microsoft.Build.Utilities/ToolTask.cs:128\n                                  at Microsoft.Build.BuildEngine.TaskEngine.Execute () [0x00000] in /Users/ankit/dev/mono/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/TaskEngine.cs:134\n                                  at Microsoft.Build.BuildEngine.BuildTask.Execute () [0x0008f] in /Users/ankit/dev/mono/mcs/class/Microsoft.Build.Engine/Microsoft.Build.BuildEngine/BuildTask.cs:101\n```\n\nAnd then\n\n```\nUnhandled Exception:\nSystem.ObjectDisposedException: Cannot access a disposed object.\nObject name: \'handle\'.\n  at System.Runtime.InteropServices.SafeHandle.DangerousAddRef (System.Boolean& success) [0x00025] in /Users/ankit/dev/mono/mcs/class/corlib/System.Runtime.InteropServices/SafeHandle.cs:125\n  at System.Threading.NativeEventCalls.SetEvent (Microsoft.Win32.SafeHandles.SafeWaitHandle handle) [0x00002] in /Users/ankit/dev/mono/mcs/class/corlib/System.Threading/NativeEventCalls.cs:54\n  at System.Threading.EventWaitHandle.Set () [0x00012] in /Users/ankit/dev/mono/mcs/class/corlib/System.Threading/EventWaitHandle.cs:207\n  at (wrapper remoting-invoke-with-check) System.Threading.EventWaitHandle:Set ()\n  at Microsoft.Build.Utilities.ProcessWrapper.Dispose (System.Boolean disposing) [0x0001d] in /Users/ankit/dev/mono/mcs/class/Microsoft.Build.Utilities/Microsoft.Build.Utilities/ProcessWrapper.cs:100\n  at System.ComponentModel.Component.Finalize () [0x00000] in /Users/ankit/dev/mono/mcs/class/referencesource/System/compmod/system/componentmodel/Component.cs:35\n```\n\nAnd I agree with @grendello. The ""expectation"" from the `WaitForOutput` method is (this is what the code was earlier) that it returns when the process is done and we can use `ExitCode`. So, we should ensure that the process has indeed exited, so, always call `WaitForExit`.\n'"
3033,64114096,b'Does this need to be `#if XBUILD_12 || XBUILD_14` ?\n'
5251,129176851,"b""The VBCSCompiler is the shared compiler server. It isn't used yet though. And csi is REPL and the tasks assembly has a task for this, so including it."""
5251,130104024,"b""@akoeplinger Roslyn used to fallback to looking in the framework folder for csc.exe, but recently they changed this behavior, and don't fallback to any location. So, we are setting `CscToolPath` accordingly.\r\nChanging csc.exe's path to this might break any scripts/programs depending on the existing location."""
5251,130104333,"b""re:vbc, I tried to build a simple project and it emitted some errors, but it built fine with vbnc.exe . I'll remove vbc from the list."""
5251,130107205,"b'With the facades removed from the `Roslyn/` folder, I can\xe2\x80\x99t run `csi.exe` because of missing `System.ValueTuple` and `System.Runtime`. If I local copy those from `lib/mono/4.5`, then it works.'"
5251,130113853,"b""Did you mean `lib/mono/msbuild/15.0/bin/Roslyn` -> `lib/mono/4.5/` ? We could do that too. Though having an actual directory, let's us have more control over the specific `Roslyn` folder meant for `msbuild` - allowing us to add/remove files, if necessary (based on what upstream msbuild does!)"""
5251,130373968,b'We are using `csc.exe` from 4.5 .'
5251,130380140,b'This is to copy `ROSLYN_FILES_FOR_MSBUILD` to `lib/mono/msbuild/15.0/bin/Roslyn`. This does not copy `csc.exe`.'
5251,130394318,"b'Which files do you want to symlink? Current list of files:\r\n\r\n```\r\nROSLYN_FILES_FOR_MSBUILD = \\\r\n        $(ROSLYN_CSC_DIR)/Microsoft.Build.Tasks.CodeAnalysis.dll \\\r\n        $(ROSLYN_CSC_DIR)/Microsoft.CSharp.Core.targets \\\r\n        $(ROSLYN_CSC_DIR)/Microsoft.CodeAnalysis.CSharp.Scripting.dll \\\r\n        $(ROSLYN_CSC_DIR)/Microsoft.CodeAnalysis.CSharp.dll \\\r\n        $(ROSLYN_CSC_DIR)/Microsoft.CodeAnalysis.Scripting.dll \\\r\n        $(ROSLYN_CSC_DIR)/Microsoft.CodeAnalysis.VisualBasic.dll \\\r\n        $(ROSLYN_CSC_DIR)/Microsoft.CodeAnalysis.dll \\\r\n        $(ROSLYN_CSC_DIR)/Microsoft.VisualBasic.Core.targets \\\r\n        $(ROSLYN_CSC_DIR)/System.Collections.Immutable.dll \\\r\n        $(ROSLYN_CSC_DIR)/System.Reflection.Metadata.dll \\\r\n        $(ROSLYN_CSC_DIR)/VBCSCompiler.exe \\\r\n        $(ROSLYN_CSC_DIR)/VBCSCompiler.exe.config \\\r\n        $(ROSLYN_CSC_DIR)/csi.exe \\\r\n        $(ROSLYN_CSC_DIR)/csi.exe.config \\\r\n        $(ROSLYN_CSC_DIR)/csi.rsp```\r\n\r\nDo we want the `*Scripting`, `*VisualBasic.dll`, `*Build.Tasks*`, `csi*` and `VBCSCompiler*` assemblies in 4.5 too? Currently, we have `Microsoft.CodeAnalysis.CSharp.dll`, `Microsoft.CodeAnalysis.dll` and `System*` assemblies in 4.5, so we can symlink those.'"
5251,130397396,"b're: `$(INSTALL_LIB) $(ROSLYN_FILES_FOR_MONO) $(TARGET_DIR)`\r\n\r\nThis is existing bit that copies csc.exe and related files to `lib/mono/4.5`.\r\n\r\nre: `.. copy only real msbuild ..`\r\n\r\nSounds good to me. The `*Scripting*` assemblies should be wherever `csi.exe` is, so I will install it to `lib/mono/4.5` too.'"
5251,130416452,"b""re:csi, Yeah, I'll install that to `4.5` and add the script.\r\n\r\nI was about talking `csi` being surfaced as a msbuild task, but it looks like it isn't actually referenced in the targets files at all! So, it doesn't have a corresponding `$(CsiToolPath)`, which means that we should have `csi.exe` available (symlinked) in the msbuild directory. And with that the `*Scripting*` assemblies will need to be linked too.\r\n\r\n`VBCSCompiler` is used by the `Csc` task, which would expect it to be in the msbuild directory. So, I could install+symlink this.\r\nAnother thing to note here though - this isn't usable right now as Roslyn disables it's use (https://github.com/dotnet/roslyn/blob/master/src/Compilers/Shared/BuildServerConnection.cs#L68).\r\n\r\n"""
5848,146533624,b'`Microsoft.CodeAnalysis.VisualBasic.dll` is the only one left. Updating to symlink all the files.'
5976,150125238,"b'The first was because the `14.0/Imports` was copied to `15.0` in https://github.com/mono/msbuild/blob/xplat-master/install-mono-prefix.sh#L78 .\r\nAnd the second was from the `NuGet.Build.Tasks` package (https://github.com/mono/msbuild/blob/xplat-master/nuget-support/tv/Microsoft.Common.targets/ImportAfter/Microsoft.NuGet.ImportAfter.targets).\r\nBut this file was subsequently removed from there. So, we are taking it from here!'"
5976,150128174,"b""@directhex heads up, there are more changes coming with respect to packaging. So, don't get started on this yet :)"""
8241,182584128,"b""That's a good question. This was based on `exception19.cs` where the exception was being reused too. I think maybe we can enhance this to test that the trace was indeed reset when the filter invoked. Currently, trace from both the original exception and the new trace here would have 1 frame, but if we change `Throw` to instead have two frames then we will be checking if the filter got a *new* trace or not. How does that sound?\r\n\r\n```\r\n+\t\t} catch (Exception ex) when (CheckTrace (ex, 2, true)) {\r\n+\t\t\tCheckTrace (ex, 2);\r\n+\t\t}\r\n```"""
8523,185067994,"b'Ok. How do I get the same path in `msbuild.py`, to copy the binlogs?'"
8523,185140704,"b'@akoeplinger @alexischr  How do I get the path for `mono_repo` here, short of a hardcoded relative path?'"
12488,251977264,"b""Upstream has now switched to simply using `Current` instead of a version number. For example, it would have been `16.0` for this update but instead now it will always be `Current`. I am creating symlinks because there are still tools out there (like nuget.exe and probably others) which look for `15.0`. Also, I'm having to do a workaround here because bockbuild has a bug due to which it doesn't support symlinks to directories. There is already a PR up for that and I'm testing the build with that."""
14242,280274349,b'It would be much better to install msbuild to `/tmp/mono-from-source` and then use `DLL_PATH=/tmp/mono-from-source/lib/mono/msbuild/Current/bin/MSBuild.dll`.\r\nmsbuild is not just the stuff in that directory.'
15284,296033411,"b'IMHO, it would be useful to add these comments to the commit message too.'"
15604,302247325,"b'IMHO, we should continue to use the exact version here instead of `latest`. That makes it easy to just glance at this to see which roslyn version is being used.'"
18747,382706329,b'should this use `InvariantCulture`?'
18747,382711168,b'This should be moved into `ExecutionContext`. And `internal DebugStore store;` in `ExecutionContext` be made private.'
18747,382712199,"b'1. if the task is not complete, then this being called is likely a bug, so maybe we should throw an exception?\r\n2. Callers never seem to check `context.Store==null`. If the assumption is that this will only be called when it has been successfully loaded, then we should throw an exception here. Else, we need to check this at the call sites.'"
18747,382734897,"b""I don't see this being used anywhere, so I'm guessing that this is for future work. Should the results be cached here, and invalidated if new methods are added?"""
18747,382736044,b'Does this need to be async?'
18747,382737201,"b""maybe rename `store` to `_store`, just to ensure that we don't accidentally use the field when the the property should have been used?"""
18747,382737450,"b'not ""ensure"", but make it more apparent.'"
18747,382738884,"b'`script` here can be null, and that would end in a NRE in `ScriptSource.TryParse`. We can avoid calling `OnGetScriptSource` if `script == null`. \r\nAlso, `ScriptSource.TryParse` should check `id == null`.'"
18747,382744896,b'Do we need to return from here? Rest of the method assumes that `values != null`.'
18747,382745837,b'replace with a `for (int i = 0; i < vars.Length && i < values.Length; i ++) {` ?'
18747,382751748,b'Use `bp_loc.AsLocation ()` here?'
18747,382752601,"b'ah, missed that! \xf0\x9f\x91\x8d '"
19113,387812826,b'Should this also change to `start.Line > spEnd.Line`?'
19113,387813258,b'And similarly here - `end.Line < spStart.Line`?'
19113,387827153,"b'`EnableBreakpoint` can fail, we should handle that here.'"
19113,387841624,"b'Maybe we can change `EnableBreakpoint` to take `loc`+`sessionId` as an argument, and return `Task<Breakpoint>`? The returned `bp` would be in `Active` or `Disabled` state depending on the result of `MonoCommands.SetBreakpoint`. It would be easier to understand, IMHO.'"
19113,387876760,"b'nitpick: `SetBreakpoint` vs `EnableBreakpoint`, I find it confusing. Maybe we can change `EnableBreakpoint` to `EnableMonoBreakpoint` or `EnableBreakpointInMono`?'"
19113,387914812,"b""`src` is not being used anywhere. Is it just to verify that we have a file corresponding to that?\r\nMaybe we should:\r\n\r\n```\r\nvar store = await LoadStore (sessionId, token);\r\n// and then check GetFileById, if we want that\r\n```\r\n\r\n.. and remove the call to `LoadStore` inside the loop, since IIUC, this shouldn't change for the same `sessionId`."""
19113,387915003,b'.. this `LoadStore`.'
19113,387918331,b'```\r\nforeach (var kvp in oldContext.BreakpointRequests)\r\n     context.BreakpointRequests[kvp.Key] = kvp.Value.Clone();\r\n```'
19113,387919138,"b'nitpick: maybe add `var id_to_use = sessionId.sessionId ?? ""default"";`, and use that in the two places in this method. Just to avoid accidental changes to only one of them.'"
19113,387919824,"b'Might be just me - I find the name confusing, I would suggest `CheckIsRuntimeReady` or something like that.'"
19113,387932411,"b'um `s,RuntimeReady,IsRuntimeReady`?'"
19113,387934442,"b'maybe `s,ToObject,ToBreakpoinByUrlResponse,`. The response object for `setBreakpoint` is different from this. The interface for chrome devtools names this as `export interface SetBreakpointByUrlResponse {`.'"
19113,387939570,b'What is this doing?'
19113,387946271,"b'nitpick:` , send: true, ..`.'"
19113,387948704,b'Should this be called `ChangeContext` or `SwitchContext`?'
19113,387949127,"b'.. with `Change/SwitchContext`, `previousContext` here will make more sense.'"
19113,387949782,b'.. and it makes sense to move this bit into `SwitchContext` too.'
19128,388508235,b'maybe `Could not find a command for id {id} to respond with result {result}.` ?'
19232,393296926,"b'I was thinking that too, but VS seems to invoke the getters when enumerating the members of the containing object. I tried that by adding a CWL to the getter, and that gets logged to the console. If I add a `Thread.Sleep (10000)`, then the debugger takes time to expand the value.'"
19232,393311923,"b'I can restrict to automatic properties for now. And devtools-protocol supports explict getters, so we can maybe use that.'"
19232,393435462,"b'Ah, Thanks for the explanation!'"
19232,401798095,b'I can drop this change.'
19432,403201838,"b'At this point, we have the value, correct? Then we should return after the `SendResponse`.'"
19432,403202351,b'Maybe `TryGetVariableValue`? It would make it more obvious that this might not be able to find the value.'
19432,403205314,"b'This should result in exactly 0 or 1 values, correct? Maybe use `.SingleOrDefault` then?'"
19432,403209266,"b'Maybe, `var foundValue = values.Where (v => v [""name""].Value<string> () == expression).FirstOrDefault (); return foundValue;` ? Or appropriately modified if you make this method `TryGetVariableValue`.'"
19432,403210616,"b'Maybe, `thisValue = values.Where (v => v [""name""].Value<string> () == ""this"").FirstOrDefault ()`? unless this is faster.'"
19432,403213040,b'`try{}catch{}` around this whole thing and send an error response back in case of an exception.'
19432,403215247,"b'Um you can return `retString` from this method, and let the caller handle the `SendResponse` part.'"
19432,403215904,"b""And with the `try{}catch{}` in `GetEvaluateOnCallFrame`, this shouldn't be required here."""
19432,403221255,b'indent'
19432,403223373,"b'Since this could get called multiple times, and that ends up doing `SendMonoCommand` to get variables and values, it would be useful to catch the results somewhere, and just have `GetVariableValue` query that.'"
19432,403225345,b'Maybe name like `ConvertJSToCSharpType` or `*CLRType*`?'
19432,403226718,"b'Sounds fair, you can make the change later.'"
19432,403231060,"b'I mean the `TryGet` pattern, like:\r\n`Task<bool> TryGetVariableValue (MessageId msg_id, int scope_id, string expression, CancellationToken token, out JObject value) { ... }`\r\n\r\nAnd the callers use it like\r\n``` if (TryGetVariableValue (..., out var value)) { .. } else { .. failed ..}```'"
19432,403236317,"b'This seems a little confusing to me. Why not pass in only `syntaxTree`, and compute `root`, and `method` at the beginning of the loop? Are they expensive?'"
19432,403239080,"b'So.. no `out` parameters for async methods! My bad, ignore this :)'"
19505,407732773,"b'Oops, missed that. I was trying to decide when to show target vs delegate signature, but then moved that bit to js. '"
19490,407754275,"b'I wanted it to be ""strongly typed"" on JS side, so we could correctly decide what to add as `value: {..}`. I\'ll clean this up in a future PR, as you suggested in the other comment.'"
19505,407760084,b'\xf0\x9f\x91\x8d Fixed.'
19534,408299008,"b'You can move all the common code to a new base class derived from `DebuggerTestBase`, or derive this class from `SourceList`.'"
19534,408299746,"b""Why is this new driver required? you can still use the `invoke_static_method ('[debugger-test] DebuggerTests.DateTimeTest:LocaleTest')` from `debugger-driver.html`."""
19534,408300376,"b""If the new driver isn't required, then these tests can be moved to be with the existing tests?"""
19534,408301815,"b'You can use `Theory+InlineData` for this, like in https://github.com/mono/mono/blob/master/sdks/wasm/DebuggerTestSuite/Tests.cs#L1183-L1185 .\r\n\r\n```\r\n[Theory]\r\n[InlineData (""de-DE"")]\r\n[InlineData (""ja-JP"")]\r\npublic async Task LocaleSpecificDateTimeTest (string locale)\r\n```'"
19534,408303101,"b""It might be useful to test how this would interact/behave with browser's language being set, with the `--lang` argument in https://github.com/mono/mono/blob/master/sdks/wasm/ProxyDriver/TestHarnessStartup.cs#L152 . @lewing ?"""
19534,408384222,"b'We are not adding any new functions to the driver now, because we have `invoke_static_method`. We could even update the existing tests to remove:\r\n\r\n```\r\nthis.int_add = Module.mono_bind_static_method (""[debugger-test] Math:IntAdd"");\r\nthis.use_complex = Module.mono_bind_static_method (""[debugger-test] Math:UseComplex"");\r\nthis.delegates_test = Module.mono_bind_static_method (""[debugger-test] Math:DelegatesTest"");\r\nthis.generic_types_test = Module.mono_bind_static_method (""[debugger-test] Math:GenericTypesTest"");\r\nthis.outer_method = Module.mono_bind_static_method (""[debugger-test] Math:OuterMethod"");\r\nthis.async_method = Module.mono_bind_static_method (""[debugger-test] Math/NestedInMath:AsyncTest"");\r\nthis.method_with_structs = Module.mono_bind_static_method (""[debugger-test] DebuggerTests.ValueTypesTest:MethodWithLocalStructs"");\r\n```\r\n.. and use `invoke_static_method`. I\'ll leave it to you, and @lewing to decide :)'"
19584,410806636,b'DeleteOneSemiColon!'
19584,410807062,b'Maybe add a comment here referencing the issue?'
19588,410843008,"b'Oops, I missed that!'"
19688,419749606,b'Is this with 1-based column numbers?'
19688,419753740,"b'Then how do we differentiate between requests for exactly `column:0`, and inexact column (all breakpoints matching the line)?'"
19718,420421376,"b'You could use `CheckLocation (""dotnet://debugger-test.dll/debugger-array-test.cs"", 197, 44)`.'"
19718,420421568,b'The test name should be a little descriptive.'
19718,420422889,"b'The column number here is the only difference between the tests, correct? You can use `[InlineData (..)]` for that. See other uses of `InlineData` in the tests.'"
19718,420423262,"b'Also, you might want to add another test that has multiple possible breakpoints on the same line, so when you use `col==0`, you get multiple breakpoints set.'"
19718,420423591,b'Ignore that last comment!'
19718,420429405,b'Maybe `CheckMultipleBreakpointsOnTheSameLine`?'
19734,421702989,"b""This shouldn't be required."""
19734,421703148,b'Is this test really needed?'
19734,421706221,b'Can the list of usings be trimmed?'
19734,421708289,"b'Maybe do this after `CultureInfo.GetCultureInfo(locale).DateTimeFormat;`, because this can affect the result of that second one. Documentation says that it would cause it to not reflect ""user overrides"", I\'m not sure what that means, but might be safer to do that?'"
19734,422366439,"b'These can be changed to:\r\n```\r\nawait CheckProps (locals, new {\r\n        fdtp   = TString (dtfi.FullDateTimePattern),\r\n\tldp    = TString (dtfi.LongDatePattern),\r\n\tltp    = TString (dtfi.LongTimePattern),\r\n\tsdp    = TString (dtfi.ShortDatePattern),\r\n\tstp    = TString (dtfi.ShortTimePattern),\r\n\tdt     = TValueType (""System.DateTime"", dt.ToString ())\r\n}, ""locals"", num_fields: 9);\r\n\r\nawait CheckDateTime (locals, ""dt"", dt);\r\n```\r\n\r\nThis does the same tests as `CheckString` that you were doing.\r\nAlso, the `dt = TValueType` checks the description of the local variable `dt`. And the subsequent `CheckDateTime`, fetches the values of that `dt`, and compares that with the expected `dt`.'"
19695,424926449,"b'`bool TryGetPrimitiveValue<T> (JObject variable, out T value)`?'"
19695,424927560,"b'If `HandleExceptionFrame` returns null, then can be at least indicate that an exception was thrown?'"
19695,424940532,"b'Maybe: `bool TryGetMonoFrame (DebugStore store, JObject mono_frame, int frame_id, out Frame frame, out object callFrame)`? '"
19695,424941167,"b""IIUC, the original code didn't add to `frames`, and `callFrames`, in case it couldn't get the mono frame. Any reason for the change in behavior?"""
19695,424942002,"b'It would be very helpful to refactor this part into `GetMonoFrame`+`GetMonoFrames`, in an initial commit. And in the subsequent one make the new changes. That would make it easier to review, and spot changes.'"
19695,424943084,"b'Where does `_mono_wasm_fire_exc` come from? The function name I see in the code is `mono_wasm_fire_exc`. The same check exists for `_mono_wasm_fire_bp` too, but am curious about the reason.'"
19695,424946656,"b'It might be useful to move a lot of this code - getting the frames, exception details etc, to `library_mono.js`. It will save unnecessary roundtrips, and it will be easier to read/manipulate all the json stuff.'"
19786,425386753,"b'I think you need to do this before the line 1265 (`Task[] init_cmds...`), because that sends off the commands though we *wait* for for their finish later.'"
19786,425394366,"b""Oh, I just noticed that you are waiting for `Debugger.enable` before setting the breakpoint. I don't know what would happen if `SetBreakpointByUrl` is called before that.\r\nCan you set the breakpoint before `Runtime.runIfWaitingForDebugger`?\r\nHm if you want to set the breakpoint specifically *after* `Debugger.enable`, but *before* `Runtime.runIfWaitingForDebugger`, then you should only send the first 3 commands, then await all of those. Then set the breakpoint, and subsequently send the last two commands.\r\nFeel free to correct me."""
19786,425395653,"b""This isn't required as `EvaluateAndCheck` checks the function name."""
19786,425399199,"b'Since, you are waiting for `ready`, this can be like other tests and use `insp.Ready ( .. `.'"
19786,425399792,"b'`Assert.Contains (""dotnet://debugger-test.dll/debugger-test.cs"", scripts.Values)`'"
19786,425400562,"b'Why not `await SetBreakpoint (""dotnet://debugger-test.dll/debugger-test.cs"", 5, 2, expect_ok: true)`?'"
19786,425404811,"b'IIUC, this test is for checking that no `breakpointResolved` event is sent if we set the breakpoint after the debugger is ready. Then maybe rename this to something like `SetBreakpointAfterReadyNoBreakpointResolvedEventSent`?'"
19786,425405529,b'This can be removed.'
19786,425405733,b'This can be removed.'
19786,425405901,b'Is this needed?'
19786,425406088,b'restore the line?'
19786,425406134,b'This can be removed.'
19786,425406295,b'remove'
19786,425406447,"b'remove, and restore the empty line.'"
19786,425406775,b'Maybe rename this to `events`?'
19786,425407210,"b'Since, this tracks events, I would make this `event_order.Add ($""Debugger.scriptParsed#{dicFileToUrl[dbgUrl}"");`'"
19786,425410618,"b""Duplicating the code here feels brittle, because this could potentially become ineffective if there are changes in `insp.Ready` that we are needed here too, but don't get copied over. @lewing ?"""
19786,425411260,"b'I would move this before connecting, maybe before `using (var cts = ..`.'"
19786,425414155,b'Um you can use `SetBreakpoint` here too'
19726,425448394,"b""`Math.IntAdd` is present in `sample.cs` and `debugger-test.cs`, which means that I can't build `sample.dll` to include all the `debugger-test-*` files. I think we have some documentation referencing `sample.cs`, so instead of removing the method from there, I renamed this one."""
19786,425989251,b'not needed'
19786,425989430,b'You can remove this.'
19786,425989661,b'Indent needs to fixed.'
19786,425990335,b'`wait_for_event_fn` is null by default.'
19695,426884542,b'Enum or named constant? And maybe combine the two bools?'
19695,426885476,b'`className`?'
19695,426885730,"b""This isn't used, AFAICS."""
19695,426890630,b'Merge this and `_get_details_for_exception`?'
19695,426896717,"b""You can use something like:\r\n```c\r\n\t\t\tEM_ASM ({\r\n\t\t\t\tMONO.mono_wasm_add_typed_value ('exception', $0, { message: $1, stack_trace: $2 });\r\n\t\t\t}, class_name, message, stack_trace);\r\n```\r\n.. instead of a new `mono_wasm_exc_var` function."""
19695,426897328,"b'`s,scope_values,exception_props,`?'"
19695,426901953,"b""This isn't used, AFAICS."""
19695,426903513,"b'`s,HandleExceptionFrame,GetExceptionData,`?'"
19695,426904420,b'`mono_wasm_set_pause_on_exceptions_options`? or something like that?'
19695,426906902,"b'Should this be split into two - `IsFireBreakpointFunction`, and `IsFireExceptionFunction`?'"
19695,426910171,b'`GetScopeVariablesForJSFrame`?'
19695,426914999,"b'`s,exception,exceptionObjectId,`?'"
19695,426915628,"b'Splitting this change into a separate commit, would be helpful.'"
19695,426917369,"b'`scopeChain.First () [""object""]? [""objectId""] ?.Value<string> ()`?'"
19695,426918373,b'This method should just be returning what it found. The caller can decide what to do if no variables were found.'
19695,426918416,"b'can this return null? I think it will return an `IEnumerable`, which could be empty.'"
19695,426918966,b'Where is this called?'
19786,426950702,"b'Not required, because `EvaluateAndCheck` checks the function name.'"
19786,426950874,"b'nitpick, why not `Assert.False (events.Contains (""breakpointResolved""))`?'"
19786,426951272,b'Um forgot to rename this.'
19786,426952245,"b'Actually, use the specific Assert method like you did in another place - `Assert.DoesNotContain (""breakpointResolved"", events);`'"
19786,426952443,b'And this would become `Assert.Single (loc)`'
19786,426952534,"b'`locs`, or `locations`?'"
19786,426954084,"b'Do this for the `else` part too, to be consistently tracking `scriptParsed` events.'"
19786,426954579,"b'Why was this ""resolved""?'"
19760,435585317,"b""Hm we need to appropriately report errors in similar cases. Currently, we just return empty results. I will fix this for such calls, in a future PR. For this, I'm adding a test just to check that this doesn't crash."""
19938,436916876,"b'How about we create a new temporary branch, deleted after use, instead of user\'s `master` branch?\r\nOr use something like:\r\n```\r\nMONO_PROXY_REMOTE_REF="" ${MONO_REMOTE_NAME}/${MONO_BRANCH_NAME}:sdks/wasm/Mono.WebAssembly.DebuggerProxy""\r\n\r\n$ git fetch $MONO_REMOTE_NAME\r\n$ git ls-tree --name-only ${MONO_PROXY_REMOTE_REF}| grep ""\\.cs$"" | xargs -I{} sh -c ""git show ${MONO_PROXY_REMOTE_REF}/{} > $ASP_PROXY_PATH/MonoDebugProxy/ws-proxy/""\r\n```'"
19938,436917459,b'This can be replaced with:\r\n```\r\ngit fetch $ASP_REMOTE_NAME\r\ngit reset --hard ${ASP_REMOTE_NAME}/${ASP_BRANCH_NAME}\r\n```'
19938,436919396,"b'It might actually be useful to copy whatever is already in the existing checkout. That would allow incremental changes, and testing while working on something. Maybe that should be the default? If this is meant for use while working on the code, then I think that would be the best. If the user really wants to copy over changes from some branch, or remote etc, then they can handle preparing their local checkout.'"
19938,436919615,"b'IIUC, this would cause the execution to keep going, ignoring the `set -e`. Do we want it to proceed if this fails?'"
19938,436919704,b'Same for this.'
19938,436920305,b'These empty lines can be removed'
19938,436923822,"b""What kinda use case is this script meant for? I'm wondering if this script is doing too much."""
19987,447067733,"b""Shouldn't this depend on `silent`?"""
19987,447086345,"b'Here we are looking for `result`, and an `error` field in the object. Where is this `error` field mentioned in the protocol? I think it would help to differentiate, or figure out if we need only one bool property to indicate error/failure.'"
19987,447278284,"b'I have updated that test, and the behavior for `callFunctionOn`+`silent` in https://github.com/mono/mono/pull/20044 .'"
19999,448470951,"b'We should also add tests to specifically test the `column`, and `end` being optional.'"
19999,448528725,"b's,Nevative,Negative,'"
19760,449935471,b'I changed this in the valuetypes PR - https://github.com/mono/mono/pull/20045/commits/85ff76298061689e9d70f30a4155af0ee37c3c53 .'
19760,450343555,"b""I'll fix this up in the new PR."""
20142,457784981,"b'```suggestion\r\n\tEXCEPTION_MODE_UNCAUGHT = 1,\r\n\tEXCEPTION_MODE_ALL = 2\r\n```'"
20142,457785387,b'Maybe we should pass in a string `none`/`uncaught`/`all`?'
20142,457785582,"b'And `library_mono.js` can convert that to the expected enum, for `*debugger.c`.'"
20142,457785963,b'newline'
20142,457786103,"b'`s,getExceptionStateEnum,GetExceptionStateEnum,`'"
20142,457788202,"b'Maybe something like this?:\r\n\r\n```\r\n=> state switch {\r\n     ""uncaught"" => ExceptionState.Uncaught,\r\n     ""all""              => ExceptionState.All,\r\n     _                   => ExceptionState.None\r\n};\r\n```'"
20142,457789545,b'newline above this line'
20142,457789957,"b'We should probably rename `OnBreakpointHit` to `OnPause` now, as this handles exceptions too?'"
20142,458368286,b'Should we handle `error` here? And pass some fallback string to `mono_wasm_fire_exception` in case of that?\r\n'
20142,458378265,"b'This is fine too, but I meant that keep the enum here too, but convert that enum to a string in this method, so `library_mono.js` gets a string.'"
20142,458378443,b'Mixed spaces/tabs'
20142,458378561,b'Mixed spaces/tabs'
20142,458380928,"b""What's the expected behavior for this? Does the debugger pause even if we were not stepping?\r\n\r\nAlso, you should inspect that exception object, and check where this paused."""
20142,458382268,"b'2. Does ""all"" mean that the debugger will pause whenever an exception is thrown? Caught, and uncaught? if so, then we need to test that case too.'"
20142,458383416,"b'Oh, this is `Support.cs`. ignore me \xf0\x9f\x98\xac '"
20142,458384449,b'And a test for `none`.'
20142,458385477,"b'Just to ensure that we can get the exception object, so that it can be shown by the debugger, and can be inspected by the user.'"
4949,119247401,b'@akoeplinger Yeah I meant to say something about that as well but I forgot. Thanks!'
802,7545142,"b'Yes it is why didn\'t I think of it  :)  will fix that up and push\ntomorrow.  To late now\nOn 9/11/2013 10:20 PM, ""Marek Safar"" notifications@github.com wrote:\n\n> In mcs/class/corlib/System/TimeZone.cs:\n> \n> > ```\n> >             return utcOffsetWithDLS;\n> > \n> >         return utcOffsetWithOutDLS;\n> >     }\n> > ```\n> > -       private bool IsAmbiguousTime (DateTime time)\n> > -       {\n> > -           if (time.Kind == DateTimeKind.Utc)\n> > -               return false;\n> >   +\n> > -           DaylightTime changes = GetDaylightChanges (time.Year);\n> >   +\n> > -           if ( time < changes.End && time >= changes.End - changes.Delta )\n> \n> Simple ""return time < changes.End && time >= changes.End - changes.Delta;""\n> is better\n> \n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHubhttps://github.com/mono/mono/pull/802/files#r7545131\n> .\n'"
802,7548269,"b""Comment added.   Doesn't seem like github is showing for me so please 'View full changes'\n\nBasically getting a list is hard but most of of america, europe and most importantly new zealand :smiley: have DST.\n"""
627,4048998,b'You need to include config.h for this define AFAICT.\n'
627,4049008,"b""I can't see why this is required.\n"""
627,4049027,b'Why not have this as part of the runtime as icalls? This way the linker can properly remove them when not used.\n'
627,4049036,b'This is not very mobile friendly as the linker has no way to remove the extra stuff.\n'
627,4049053,"b'Monodroid still compile with C89, this is C99 AFAICT.\n'"
627,4049060,b'Does this require the app to have an active runloop? Will it work with a console app?\n'
1085,13562546,"b""Don't add new variables to the top level context.\nAdd it to the right switch clause and use a more descriptive name than h.\n"""
1085,13562739,"b""I think this won't work with an explicit this delegate to a virtual method.\n\nldnull\ndup\nldvirtftn void Foo:VirtualFoo()\nnewobj Action<Foo> (object, native int)\n\nCan you write a test for this?\n"""
1085,13562796,b'This must to the same sort of caching that other delegate thunks do.\n'
1085,13563415,"b""Both of those cases don't seen to handle ldvirt delegates. Did you check for then?\n\nFor generic I'm talking about something like this:\n\n```\nusing System;\n\nclass Foo <T> {\n    public virtual int Test() { return 10; }\n}\n\nclass Bar<T> : Foo<T> {\n    public override int Test() { return 20; }\n}\n\nclass Test<T> {\n    public void Run () {\n        var arr = new[] { new Foo<T> (), new Bar<T> () };\n\n        foreach (var i in arr) {\n            Func<int> f = new Func<int> (i.Test);\n            Console.WriteLine (f());\n        } \n    }\n}\n\nclass Driver {\n    static void Main () {\n        new Test<string> ().Run ();\n    }\n}\n```\n"""
1085,13705128,b'The virtual case must not hit mono_delegater_trampoline as it uses an invoke thunk that does a vcall instead of a direct call.\n\nWe only need to store to method so reflection access to the invoked method exists. This might have got broken. Worth checking.\n'
1126,14186688,"b'target specific check, we should be reducing those in method-to-ir.c and not the other way around.\n'"
1150,14661161,b'Should use MONO_STRUCT_OFFSET.\nBefore it goes it it must update our offsets headers.\n'
1150,14661371,b'Why do we need this new ifdef here?\n'
1350,19056479,"b""This doesn't follow the mono coding conventions. Use a typedef for structs.\n"""
1350,19056481,b'Use a size specific int instead of unsigned.\n'
1350,19056484,"b'ms and mu are nondescript names, we should use something informative instead.\n'"
1350,19056500,"b'Since the code is already specialized for 64bits targets, this should just emit the decomposed form.\n'"
1350,19056516,"b""Don't use  magical reg numbers here. Use the right name for those.\n"""
1350,19056518,"b""We're not decomposing this one.\n"""
1289,19909893,"b'Agreed, write will carry verb semantics here meaning the that the size is written somewhere.\n'"
1391,19955349,b'Mono uses C89.\n'
1476,22235150,b'This is a linear search. How big is this hidden array for a large assembly?\n'
1568,24765534,"b""Shouldn't this be a rethrow? Otherwise we're losing the original stacktrace.\n"""
1577,25349969,"b'Try making it a size_t constant, it will simplify a lot your code.\n'"
1577,25350023,b'Move all canaries code under a single ifdef\n'
1577,25350069,"b""That's an odd name for the allocation record ;)\n"""
1577,25351313,"b""Conditional APIs are horrible to work with. Don't use it.\n"""
1579,25615437,b'This leaks memory.\n'
1621,26015452,"b'read has side effects, this change is wrong.\n'"
1621,26015464,"b""We don't use long on the runtime as it's not portable.\n"""
1621,26015534,b'Why not removing those functions like with other files?\n'
1621,26015554,"b'this is wrong, read64 has side effects\n'"
1621,26015567,"b""Why do we don't need the warning anymore?\n"""
1621,26015594,"b""We're removing code instead of fixing? Why so?\n"""
1621,26015652,b'did you check if this var is not used directly by its number?\n'
1621,26229756,"b'This removes a warning, right?\n'"
1621,26229760,"b""mono_mb_add_local has side effects and I remember seen code that uses a literal number when loading/storing it instead of the index returned. That's why I asked.\n"""
1621,26230149,"b""That's a fair point. Now I'm curious on which value are you referring to.\n\ngit grep only revealed us using it with FIONREAD and FIONBIO. Both of which fit in a single byte.\n"""
1618,26392251,b'Properties must start with a capital letter.\n'
1618,26392357,"b'This big method was moved. I agree with the others, having the move in a separate commit would make it clear if anything changed in it. (did it change?)\n'"
1618,26392658,"b'you did it already, sorry for the confusion.\n'"
1612,26393224,"b""Instead of just sleeping, we should consider using monitor pulse/wait.\n\nHere we'd do:\n\nlock (blocking_threads) { Monitor.Wait (blocking_threads, 1000); } //we can be more lax with the wait timeout as we'll be explicitly woken up.\n\nOn UnRegisterForBlockingSyscall we'd do a Monitor.Pulse if we find the socket to be in cleanup path.\n"""
1699,28337227,"b'given this can throw, we need to capture the exception so it can be later delivered once we complete.\n'"
1708,28350180,"b'This is wrong, the code should be removed. The if condition is ! ARCH_USE_IMT\n'"
1729,28905801,b'Done.\n'
1730,29080983,"b'It should never assert. The fallback must be used when the fast path is not usable.\nAsserting here would be a massive disaster as it would break all our existing customer apps.\n\nAs a rule of thumb only offline tools assert, the runtime should print a warning and fallback to something.\n\nHaving said that, the usage of the fallback must be controllable through MONO_DEBUG so we can test\nit on existing devices.\n'"
1757,29466255,"b""Array.Equals doesn't perform need equality. This is wrong.\n"""
1757,29466341,"b'That looks redundant, we should ensure 1+ sized arrays at construction instead.\n'"
1757,29466405,"b'This is wrong, you must do a defensive copy of the array. Otherwise the caller can change it and break how the internals work.\n'"
1757,29466484,"b""What's the name of the argument on reference sources? \nArg names must match what RS has as it's needed for names argument calls to work.\n"""
1757,29466622,b'You can use Array.Resize here.\n'
1757,29466645,"b'Same thing, use Array.Resize plus one copy.\n'"
1757,29467864,"b'This should go into the debug helpers source, prefixed with mono_ and documented in our website.\n'"
1757,29468092,"b""Can't we ensure size is correct at construction?\n"""
1757,29468109,b'Dead code.\n'
1757,29468162,"b'This is a breaking change in the BCL, you must bump the corlib version.\n'"
1757,29468413,"b""Array.Resize copies the array and adjust the size up or down.\nIt doesn't perform an inplace change.\nThe API name is stupid.\n"""
1757,29468496,"b'Yes, multicast return value behavior is weird not not useful at all.\n\nOne wonder why allow it for delegates that return value.\n'"
1757,29468560,"b""This is a debug helper for us, it''s fine to be verbose and leaky.\n"""
1761,29629434,"b""Oh, it's about having space to JIT the ToString method itself. The message is wrong.\n"""
1577,29705449,"b""I can't see how this would ever be true given the above definition of end.\n\nPlease use g_assert instead of assert. And add a space before the open parens.\n"""
1577,29705504,b'Use  g_usleep instead.\n'
1577,29705663,b'No need for curlies.\n'
1577,29705717,b'Formating damage.\n'
1577,29705943,"b'Instead of #if 0, give it a name and add on the top of the file a list of knobs to enable and what they do.\n'"
1577,29705965,b'missing space.\n'
1577,29706024,b'Emit this as a debug logging message.\n'
1577,29706053,b'make it a #if XXXX and move it to the top as a knob.\n'
1577,29706090,b'Formating damage.\n'
1577,29706097,b'Formating.\n'
1577,29706134,"b""Our coding style doesn't call for this return at the bottom of the function.\n"""
1457,30091523,b'Casting to size_t has the same effect and it not a warning on 32bits.\n'
1457,30091853,"b'function pointer should have a typedef of their own or, at the very least, argument names bound\n'"
1457,30092047,b'This looks like something that could be modified to be single pass.\n'
1656,30180859,b'This should go to the top with all the other fields.\n'
1833,30948005,b'No need to rewrite the whole list of icalls just to introduce two at the top\n'
1850,31630011,b'This looks like a very weird using for what the class here is.\n'
1850,31630094,b'What triggers this custom attribute to be removed?\n'
1850,31630341,"b'Please use normalized, non nested boolean logic as much as possible.\n\n!(a || b) -> !a && !b\n\nThe second form is easier to reason about.\n'"
1850,31630860,"b""This change is really hard to read, we're adding 2 extra levels of nesting in the Makefile.\n"""
1850,31631103,b'Why is this going internal only on xammac?\n'
1850,31631235,"b""Couldn't all targets that define MOBILE define NO_SYSTEM_WEB_DEPENDENCY?\n"""
1850,31760538,b'sounds like a plan\n'
1833,31763360,"b""We're better of been compatible with .net.\n"""
1806,31763904,b'This is a possible source of linker problems.\n'
1806,31764954,b'This is another linker timebomb. :(\n'
1806,31765186,"b""This field is assigned once and never read.\nThis is pointing to managed memory and it's not been registered as root.\nWe're better off removing it.\n"""
1806,31765263,"b""What's the point of the handle in MS's?\n"""
1806,31765753,b'Time should not be tracked using guint32.\n\nThere are 86.400.000 ms in a day. Or 49.7 days worth of milliseconds in a guint32.\nAfter that much of uptime (not process time) it will overflow and everything will behave weirdly.\n\nUse mono_100ns_ticks instead.\n'
1900,33572324,b'This is wrong.\n\nThe MonoError should be the last argument and must never be null.\n'
1900,33572463,"b""This is wrong, it's not passing the error to the caller.\n"""
1900,33572499,"b'This is wrong, we should never pass a null value for MonoError.\n'"
1911,33822773,"b'This is a breaking change in the BCL ABI, it must come with a bump in the corlib version.\n'"
1918,34197130,"b""No need for the conditional compilation here.\nIt's fine to print zero on unsupported targets.\n"""
1918,34197250,"b""Can't we move all of this code to a separate file? mini and mini-runtime are already pretty big for us to keep adding more stuff to it.\n"""
1918,34197673,"b""Do you think the new counter type will be used by code in metatada or utils?\nIf it's expected to happen soon, it might make sense to move them to utils now instead of later.\n"""
1918,34198480,"b""3 issues here:\n\n1)Don't use pthread_mach_thread_np.\nThe implementation takes a global lock and does a linear search over all live threads.\nUse mach_thread_self instead.\n\n2)Your code is leaking a port rights. Every time you fetch a mach port, its  ref count is increases and you need to decrement at the end.\nYou can use mach_port_deallocate to decrease the ref count.\nYou can use mach_port_get_refs to check the ref count of a specific port.\n\n3)There's no reason on why this code would not work on iOS.\nUse PLATFORM_DARWIN for this condition\n"""
1918,34198676,"b'We avoid using compiler supported defines as they break in cross compilation scenarios, use the ones we produce.\nUse PLATFORM_LINUX here.\n'"
1918,34306295,"b'Sure, but relying on implementation details of a function whose public documentation is\na one line comment is not very assuring:\n/\\* return the mach thread bound to the pthread */\n'"
1918,34359920,"b""It's not pretty much everything we do, might have been the case in the past, but it's time we learn that lesson. We did pipe up hacks around platform details and they come to bite us all the time. So, let's avoid this trap whenever possible.\n\nWe should stick to well documented and defined parts of each platform.\n"""
1926,34901609,b'This is missing documentation on memory management.\n\nCould the returned pointer be const?\n'
1926,34901677,b'Missing documentation. Should mention memory management.\n'
1926,34901714,b'Missing docs.\n\nThe documentation should explain the lifecycle of those ids.\n'
1926,34901723,b'Missing docs.\n\nThe documentation should explain the lifecycle of those ids.\n'
1926,34901873,"b'Add a comma here, it will avoid line damage the next time we add an entry to this enum.\n'"
1926,34902085,"b""What's the churn rate of contexts? Do we need to worry about the performance ramification of having the icall in the finalizer?\n"""
1926,34902169,b'What about TYPE_LOAD_ERR?\n'
1926,34902258,"b'What does this mean, ""domain id as a pointer""?\n'"
1926,34902374,"b'All this magic numbers make my head hurt, we should make this into constants\nand/or functions.\n'"
1926,34902390,b'more magic numbers :(\n'
1926,34902443,"b'Repeated magic number, even worse :sob: \n'"
1926,34902648,"b'We should change this to single version bump.\n\nGiven data version 11 will never be in any released mono, it has no value on its own.\n'"
1926,34902788,"b""Shouldn't it mention sample hit sorting and that the header tid is now usable for sample hits?\n"""
1926,34902926,b'Why are those 3 events been removed?\n'
1926,35150356,"b""Lifecycle is better defined in terms of what the user can't expect than on what to expect.\n\nFor example, we could say IDs are only unique among live domains/contexts and reuse is unspecified.\n\nAnyway, this can be done after this is merged.\n"""
1926,35150753,b'I still like for us to address this. A bucket of magic numbers do us no good. Specially when they seem to be repeated all over the place.\n\nHow about using structs with packing/alignment set 1 and have size functions based on sizeof?\n'
1952,35801571,"b""Wrong Code formating.\nIt's ignoring the return code of proc_pidpath.\n"""
1952,35801891,"b""You must NEVER use string functions over arrays you're not sure to have been initialized.\n\npath_buf must be initialized as proc_pidpath doesn't always do it.\n\nIn addition to that, try to use safe variants of string functions whenever possible, in this case strnlen.\n"""
1967,36491757,"b'Is the c:\\cygwin still needed? \\VSDependancies were no longer needed, which is good.\n'"
1969,37608758,"b""This is broken, we're storing heap pointers without any safeguards. This will cause issues.\n"""
1969,37920347,"b'That would make the whole point of an update queue kind of pointless.\n\nI worked around by registering it as a conservative root. Not the right solution, but one that works.\n'"
2028,38762736,"b""isn't the -1 check equivalent in this case?\n"""
2032,38764223,"b'I believe this to be wrong, the profile is xammac_net_4_5 and not xammac_net_4_x\n\nCC @chamons \n'"
2054,39868798,"b'Why not just pass a ""size_t owner_id"" instead of a ""MonoObject *""?\nThis would eliminate all the branching below.\n'"
2054,39869065,"b'This ""gboolean thread_local"" is a horrible design. It assumes that there are 2 options: thread local and the opposite of that which is, hmmm, global?\n\nSince this is to signal between thread local/context local, let\'s use an enum so it\'s clear what each value means.\n'"
2054,39869954,"b""What's the purpose of this event? Isn't it too fine grained? It doesn't easily convey to what's going on here, which is layout.\n\nCan't we get the same effect by having callbacks for instance/static layout events? Which would be two per class instead one per field.\n"""
2054,39870274,"b""Well, there we go, we have the layout event I mentioned above. Except this one is not properly named.\n\nThe static fields didn't get allocated, they layout'd. Otherwise this callback is obviously missing a pointer to the actual memory region.\n"""
2054,39881976,b'Why do we need owner when thread_local + owner_id can provide the same info?\n'
2060,40003260,b'This breaks one of the expectations of SocketAsyncEventArgs that using it triggers no allocations.\n'
2060,40003435,b'An unbound socket in the case of exceptions? That sounds really weird. Is this the actual behavior?\n'
2060,40003559,b'Why is this not handling exceptions in the same way as AcceptAsyncCallback?\n'
2060,40003721,b'Why change the constructor argument order?\n'
2060,40003827,"b""Same as the other callback, why doesn't it need more finer grained exception handling?\n"""
2060,40004178,"b""Renaming the variable from result to sockares introduced confusion in the diff that makes it hard to see what's changing.\n"""
2060,40004464,b'This delegate pair design is problematic as it does causes allocations on every callback.\n'
2060,40004818,b'This is one weird way of doing a volatile read. Just mask in_progress as volatile.\n'
2060,40004906,b'The C code should be updated to mention this file.\n'
2060,40004939,b'The C code should be updated to mention this file.\n'
2060,40005194,b'Should mention where the struct is mapped in the runtime.\n'
2060,40005242,b'Should mention where the class is defined in managed.\n'
2060,40005879,"b""Shouldn't sockares.handle have the same value as the Socket handle itself?\nIf so, why do we need to store the handle in the sockares?\n"""
2060,40006121,"b""I don't understand the change here. When will the socket handle change between the many entries here?\n"""
2044,40018348,"b""This is the wrong way to handle time wrap around. Ticks wrap around is a lot more common than you'd think.\nIt happens every 1193 hours, or every 49 days.\n\nThe condition to check is not 'now < end' but 'now - start >= ms'.\n\nnow - start works fine even in the case of overflow due to how unsigned 2-complement math works.\n\nLet's see how it works with a 1 byte unsigned value. start is 0xFE and we have advanced 1, 2 and 5 (values of now).\n\n0xFE + 1 => 0xFF\n0xFE + 2 => 0x00\n0xFE + 5 => 0x03\n\nNow let's do the reverse operation (values of now - start):\n\n0xFF - 0xFE => 1\n0x00 - 0xFE => 2\n0x03 - 0xFE => 5\n\nThis ensures that as long as ms is smaller that MAXUINT, we can handle overflow just fine.\n"""
1978,40021317,b'This should not be needed as there is at most one thread accessing this variable.\n'
1978,40021653,"b""This change is wrong, we must first abort the threads then close the socket, otherwise there's a window where a new fd can be opened and the target threads would wrongly use it.\n"""
2077,40238676,b'This is not how our coding convention works. All preprocessing rules must be anchored to the left.\nNo spaces between hash and the directive.\n\nWhat we usually do too is to add comments in the mid/end parts of outer branches to explain the conditions.\n\n```\n#if A\n#if b\n...\n#endif\n#else /* A */\n....\n#endif /* A */ \n```\n'
2034,40242683,"b""There's no need to change this field to point to ContextStaticData instead of static_stata.\n\nIn this patch, there's no usage of gc_handle through the context.\n"""
2034,40383522,"b'What field are you talking about?\n\nThere are two fields in ContextStaticData and only one is used outside of the ref-queue callback.\n\nMy suggestion is to keep allocating ContextStaticData, but not have MonoAppContext point to it.\n'"
2034,40683450,"b""Oh! Now I see the issue, didn't realize static_data was mutated after the initial setup.\n\nAnyways, the current approach of mono_gc_alloc_fixed with MONO_GC_DESCRIPTOR_NULL is bad and should be avoided as it forces sgen to conservatively scan ContextStaticData (which is expensive).\n\nWhat about extending context to hold pointers to static_data and ContextStaticData? This way we can update the later when expanding static_data.\n"""
2100,40842976,b'This variable is not used anywhere\n'
2101,40943186,b'This should use mono_thread_info_get_suspend_state to fetch the right suspend state.\n'
2101,40943489,"b""This variable is not used, it doesn't need to exist.\n"""
2101,40943695,"b'This is wrong is a few ways.\n\nPassing zero when the argument is a pointer.\n\nFurther more, passing zero will cause a segfault in the code stack saving code when it tries to load it.\n\nFinally, the stack address start should be weaved into this one too.\n'"
2101,40943888,"b'This is the wrong place to use __builtin_unwind_init.\n\nIt should be used in the function that does the stack copying (copy_stack_data), this way we ensure to have visibility into all regs.\n'"
2101,40944073,"b""This is the function that should have __builtin_unwind_init.\n\nIt should not have a stackdata_end argument as it won't include the saved registers. Just add a local variable and use its address. \n"""
2101,40944644,"b""This is a hack, don't use mempool, manually store data, size, capacity and g_realloc to grow it.\n\nmono_mempool_empty is not meant to be used for this.\n"""
2101,40944879,b'Wr should assert on stackdata_end and stackdata_size as being reasonable. Too much inlining could cause stadata_size to be negative.\n'
2101,41060590,"b'Yes, we should never pass 0 when expecting a pointer, it makes the code worse to read than needed.\n'"
2101,41060681,"b'Yeah, makes sense. It should still be done from the leaf function, which is copy_stack_data.\n'"
2101,41061243,"b""Because it's initial allocation is huge and using it here out of simple convence makes little sense.\n\nIt sends the wrong message to whoever is reading this. The constant calls to mono_mempool_empty makes this a big hack.\n\nIf you feel like using a high level data structure here. There's GByteArray, which maps clearly to what you're trying to do.\n"""
2109,41174168,b'This will be 2 bits for 32 bits and 6 bits on 64 bits.\n'
2054,41412587,"b""That's a bad idea as it might force extra vtables to be allocated. mono_class_vtable is a particularly nasty function because it can throw a managed exception (yes, I know).\n"""
2122,41784694,"b""Pass the GString 'str' to mono_identifier_escape_type_name_chars. This avoids the intermediary GString.\n"""
2122,41784802,"b'Our coding convention is for the return type plus all modifiers to be in the first line. So it should be:\nstatic void \nunescape_each_type_argument(void\\* data, void\\* user_data)\n'"
2122,41784915,"b""Let's not add this to the public API unless we're forced to.\n"""
2122,42266111,"b""the visibility modifier always comes first.\n\nso it's public override.\n"""
2122,42267399,b'Use EmptyArray<TypeName>.Value to avoid excessive allocations.\n'
2122,42270589,"b'Same thing as the previous one, lets avoid the extra allocations here.\n\nQuite a bit of corlib performance surprisingly comes from being very conservative in avoiding those\nsmall, insignificant, allocations. In the aggregate they actually amount to be measurable.\n'"
2122,42270643,b'Use a StringBuilder here instead of doing multiple concats.\n'
2122,42270683,"b'Same thing, use a StringBuilder to avoid all the temps.\n'"
2122,42274553,b'Use StringBuilder here too.\n'
2122,42274783,"b'null and false are default values, no need to set to them right after you called the constructor.\n'"
2122,42274873,"b""This is not really a getter as it's constructing a new object on each request.\n"""
2122,42275811,b'I think this could be accomplished in a much more straightforward way than this setup that will:\n\n1)create a new TypeSpec\n2)create a new TypeSpecTypeName\n3)use TypeSpecTypeName just for this purpose\n\nHow about a GetDisplayFullName variant that ignores modifiers? It would avoid all the intermediate steps.\n'
2122,42276406,b'probably needs to be added to other profiles.\n'
2122,42277598,"b""I don't think MONO_TYPE_NAME_FORMAT_IL should have names escaped.\n\nThis is used in loader.c::find_method and might actually break loading.\n"""
2150,42557811,"b""This call can fail and if it does, we'll get a crash with no information since we're not checking the result.\n"""
2122,42675297,"b""The other *.sources files in corlib. I'll explain how that works.\n"""
2140,42832109,b'We should not commit debug spew into framework code.\n'
2157,42832401,"b""This looks both wrong and wasteful.\n\nFirst, you're allocating memory from the debugger thread.\nSecond, if the goal is to get the object type, obj->vtable->klass would have done it great.\n"""
2157,42832431,"b'Non faulting load of a possibly null pointer, this will break on targets without hardware traps.\n'"
2169,42940321,"b""If we're filtering safepoint placing at construction time, I don't see the point of checking it again here. The same applies for other backends - maybe we want the s390x assert instead?\n"""
2169,42940329,b'It would be nice if we could flag an AOT / FullAOT module as using coop/async and fail to load them instead of bombing.\n'
2169,42940338,"b""This must come back or you'll suffer a LOT of pain later when dealing with device crashes.\n\nThe thread state dump mono-threads produce we fail to suspend requires this to allow it to be matched with an Apple crash dump. Otherwise you'll have two thread dumps with no way to connect them.\n"""
2169,42940343,b'Inline functions should not have macro names.\n'
2163,43136709,"b""Don't remove the log messages, you'll miss them when troubleshooting issues.\n\nOne pattern we have in the runtime is to hide them under a macro and disable by default.\n"""
2200,43950931,b'preprocessor # must be anchored on the first column.\n'
2229,45009412,"b'It should be either readonly, so the JIT can remove the branch, or lazily done, to avoid introducing a class constructor.\n'"
2237,45572354,"b""Images don't need to be disk-loaded, there are other ways to load them besides disk files that will in turn produce non-dynamic images. mkbundle'd assemblies and Assembly.Load (byte[]) are two examples of that.\n"""
2237,45572477,"b""I just had the sad realization that this is nesting images_lock with image_lock, which is not part of the regular locking rules.\n\nIn addition to that, we're taking those two locks at the audit points, which might be violating other locking rules.\nA quick check of currents uses point to this being currently ok.\n"""
2237,45572550,b'The same concern about locking applies here.\n'
2237,45572749,"b""We should try to avoid this sort of conditional compilation creep.\n\nIt makes for a more fragile code base, say I break it tomorrow, we won't pick that\nuntil that until the next time we do a checked build.\n\nIn addition to that, now it's one extra configuration to keep in mind when casually looking at that code.\n\nThe nice thing is that we don't actually need to worry about possible extra bloat from this function because it has non-public visibility and the linker will remove it.\n"""
2237,45572792,"b""I don't think we should make this conditional on CHECKED_BUILD.\n"""
2237,45573116,"b'""except during container creation"" Why? For how long? How will code witness this transitory state?\n\nPlease expand this comment on what\'s the issue around container creation.\nDoing it while the knowledge is fresh will save us from a lot of trouble down the line.\n'"
2237,45573250,"b""I'm with Zoltan on this one.\n\nThose macros are now overly complicated and deserve to be turned into static inline functions.\n"""
2237,45573278,"b'Unrelated, it should in outside of this PR.\n'"
2237,45573285,"b'Unrelated, it should go in outside of this PR/commit. \n'"
2237,45573564,b'Line damage\n'
2237,45573602,b'We should shift as much complexity as possible to checked build itself.\n\nThis one-off configuration changes eventually pile up and make code too hard to maintain.\n\nChecked build should not introduce additional complication into the runtime code in the form of extra conditionals.\n'
2237,45573629,"b""This looks like a very odd place to initialize is_anonimous.\n\nCouldn't it be done in mono_metadata_load_generic_params?\n"""
2237,45573686,b'This is saying the same thing. T? is the C# form for Nullable<T>.\n'
2237,45573704,"b'This is a bad comment, it creates more confusion than it answers.\n'"
2237,45573905,b'Mixing adding the checks with the core change makes reviewing harder.\n\nIt makes for worse commit history as it make the same commit show up in more places than needed   when checking log or blame for a file.\n'
2237,45574111,"b""In general, we don't rename variables unless they have the wrong name, it destroys history more than helping the code.\n\nIn this case is ok as all uses had to be changed anyways.\n"""
2237,45574408,"b""Given this function is not part of this change, I think it's best to leave it completely unchanged.\n"""
2237,45574473,"b""This can't happen, the list must be created for an image set to exist.\n\nDo you have an example of this not being true?\n"""
2237,45574487,b'Why move initialization?\n'
2237,45574502,b'How about the refemit comment on the MVAR case?\n'
2237,45574551,"b""This name change should not go in. It's not worth to have it.\n"""
2237,45574566,"b'Is this actually changing anything? If not, just take it out.\n'"
2237,45574602,b'Use a temporary here and avoid all of this indirection.\n'
2237,45574673,"b""This is publishing uninitialized data as there's no locking around the parsing code.\nIt might cause other threads to see partially initialized data.\n\nThe right way is to init on a temporary and only at the end store it to the right place.\n\nThen the question is whether the anon container must be unique or not.\n\nIf it doesn't need to be unique, a store_release is enough (and it might cause duplicates).\n\nIf it does, CAS the value in.\n"""
2237,45574696,b'Use g_error with a message.\n'
2237,45574728,"b""Looks like the comment above this conditional is now stale as we're no longer checking images.\n"""
2237,45574756,"b""Shaped the same is ambiguous. It's simple, they are treated just for their positional values instead of container + position.\n"""
2237,45574830,b'line damage\n'
2237,45574904,"b""Yes, it will be a problem since we won't be able to create anon MVARs.\n"""
2260,45659347,"b""restore_handler and have_restore_handler are simply renames. Let's remove this part.\n"""
2260,45659844,"b""What's a restore handler? We're just looking at the previous handler and being nice unix citizens by reinstalling the old one when we're done.\n"""
2237,45895681,"b""Now it makes sense. Yeah, it would be nice if the container state is not changed after it's created.\n"""
2138,46475335,"b'This is weird, looks unrelated.\n'"
2138,47013723,b'This introduces a heap allocated closure.\n'
2138,47014224,b'You probably want to add some text here on what was the state.\n'
2138,47014341,b'This is quadratic on the number of updates. Is this an issue?\n'
2138,47014586,"b""This looks wrong and wastefull.\n\nWhy can't BackendPoll return the number of events it found?\n\nThis way you avoid zero'ing data before and looping over the whole thing later.\n"""
2138,47014760,"b""This looks wasteful. We won't have updates for all sockets on every polling cycle.\n\nWe should dynamically grown every time BackendPoll find more events that slots to return them.\n"""
2138,47014962,"b""And it's quadratic on the number of updates, not great either.\n"""
2314,47552438,"b""Hmm, shouldn't we be passing handles by value? It's odd to pass them by reference.\n"""
2314,47553924,"b""This area implementation won't work boehm.\n\nC static variables are not scanned by boehm unless we explicitly register them.\n"""
2314,47554350,b'why does this function take a handles count?\n'
2314,47554535,b'HANDLE_SET_VAL and HANDLE_SET_MP sound like bad names in my head.\nI wish I had come with better ones.\n'
2314,47554868,"b""We can't change indentation because of the helper macro for declaring an icall.\n\nIf we do it, we'll erase the whole history of those functions and have some ugly looking code as the result.\n"""
2314,47554974,b'@alexrp does adding a new kind of root require bumping the profiler version?\n'
2349,47735554,"b""This is really bad coding.\n\nIt's calling mono_thread_create_internal with this lock held. The lock is not a leaf lock\nand that function takes a ton of locks itself. This break the allowed runtime locking rules.\n\nHow frequently is worker_try_create called during steady state?\n\nWhat's the perf impact of this change?\n\nWhy 10 threads per second?\n"""
2314,47837871,"b""Hey guys,\n\n A handle is either a pointer or an index to the backing storage, they are not raw pointers to the objects.\n\nThis way, copying the handle value is perfectly fine and we ensure we won't have any ABI issues on where they live.\n"""
2332,48053675,"b'Add it to some of the test sets and, after a while in master, add it to the default set.\n'"
2332,48054122,"b'I think having a separate pass is fine. Simple passes are incredibly fast.\n\nIf emulation is a problem, what we could do, which might actually be a good idea, is to turn emulation into a pass, always emit OPs in the front end and do the same trick you did with cfg->has_divisions.\n'"
2422,49492082,"b""No need for caching here. This adds a dependency on Lazy when we don't need it.\n"""
2422,49492306,"b""This is wrong as it won't work on any other 64bits platforms like arm64.\n"""
2435,49681646,"b'This change is wrong, it introduces an extra define for no good reason.\n\nA better fix is the following:\n- remove MONO_SIGNAL_USE_SIGACTION\n- check for HAVE_UCONTEXT_H instead.\n'"
2459,50483929,"b""On my recent cleanup of mono-error I fixed that mistake. We now have a field to store those so we don't break mono_errror_get_message. See https://github.com/mono/mono/commit/4df79f93834a018962eeea4426134ef0716a835f\n"""
2459,50484105,"b'Unfortunately, new error kinds require us to support the conversion to loader error for now.\n\nMeaning you need to change mono_error_set_from_loader_error and mono_loader_set_error_from_mono_error too.\n\nIdeally this would be a separate commit from the one that introduced MonoError into mono_object_register_finalizer.\n'"
2460,50485319,b'Why are we introducing this?\n'
2460,50487342,b'We should assert here since this is running within the exception unwinder and things will go freaky if we throw from here.\n'
2460,50487371,"b""Same thing, this should be an assert, can't throw reliably from here.\n"""
2460,50487403,b'This should be an assert.\n'
2460,50487416,"b""Same thing, can't throw from here.\n"""
2460,50487428,b'Same thing.\n'
2460,50487518,"b'The behavior should not be to throw, it should be to either assert or convert to an ExecutionEngineException.\n'"
2460,50487537,"b""Make this an assert. Can't throw from here.\n"""
2463,50488115,"b""This is wrong, we can't return NULL and not set MonoError.\n"""
2480,50488507,b'You could have avoided this change.\n'
2481,50488726,"b'You forgot to convert arith_overflow, which calls mono_raise_exception\n'"
2483,50489020,b'I guess this assert could go\n'
2483,50489115,b'the != null asserts can go now that we ensure that to happen\n'
2483,50489213,b'This is a good time to promote this assert into proper error handling.\n'
2463,50750684,"b'The existing behavior is wrong and we should not keep it that way. As we increase\nour reliance on MonoError, this sort of problem will only get worse.\n\nWe should fix it and leave a FIXME to further weave mono error as we go.\n'"
2492,50775751,"b'This is a code smell, there must be only one way to check for an ok result.\n\nBesides that, there must be a compiling reason for a function to return NULL and not be an error.\n\nBy not sorting out those issues, this commit makes things worse.\n'"
2492,50775859,"b'This function is changing two functions instead of one.\n\nThe commit message must be fixed, at least.\n'"
2495,50776738,b'Must set error to something.\n'
2495,50777633,"b""Error handling in this function is wrong.\n\nIt's ignoring the fail label and, thus, not freeing arginfo and NULL'ing named_arg_info.\n"""
2495,50777682,"b""Don't throw from the debugger. Assert.\n"""
2495,50777782,b'Assert here too.\n'
2495,50777825,"b""Don't raise here, store\xc2\xa0the exception into exc.\n"""
2495,50777868,"b""Don't raise here, store the exception in *exc\n"""
2516,50857973,b'Using either of the previous 2 functions would be be a code smell.\n\nWe already have mono_error_prepare_exception and mono_error_convert_to_exception for that.\n'
2516,50858275,"b'More than documenting what they mean, for union what we want is which condition trigger which case. Like, for example:\n\n```\nuint32_t instance_handle; /* only if error_code == MONO_ERROR_EXCEPTION_INSTANCE */\n```\n'"
2460,50869324,"b""Can't use mono_raise_exception here as this is an icall that was converted to use mono_set_pending_exception.\n"""
2460,50869486,b'So use this:\n\n``` c\nif (!error_ok(&error)) {\n mono_set_pending_exception(mono_error_convert_to_exception (&error));\n return;\n}\n```\n'
2460,50869640,"b'Same thing, this must use mono_set_pending_exception\n'"
2460,50869684,"b'Idem, use mono_set_pending_exception.\n'"
2460,50869725,b'Should use mono_set_pending_exception.\n'
2459,50870462,b'This number conflicts with the recent addition to MonoError.\n'
2506,50887228,b'Fixing the error message is probably a good idea here.\n'
2506,50887530,"b""This check doesn't change behavior since it's storing on a fresh array full of zeros.\n"""
2508,50888031,"b""Those long chains of call+throw or call+check are fugly, we'll have to handle them at some point.\n"""
2524,51654066,b'We should convert this to use mono_error_set_pending_exception.\n'
2524,51654181,"b'Typo, >m<error.\n'"
2524,51654358,"b'I see the issue, there\'s a conflicting ""GError *error"" here.\n\nWe should rename the GError as we\'ll eventually add a bunch of macros around having a var named error around\nand this functions will not work with it.\n'"
2532,51654791,"b'These factory methods for exception objects are really messed up, they use a runtime_invoke that can throw <o>.\n'"
2532,51655030,b'What if mono_error_set_pending_exception returned a boolean so we could write this change like this:\n\n```\nif (mono_error_set_pending_exception (&error))\n   return\n```\n\nCC @ludovic-henry \n'
2535,51659668,b'Zero is valid return value.\n\nWe should document that the caller must not check the return value for errors.\n'
2535,51659714,b'Could we return negative for error as a way to address the previous issue?\n'
2535,51660504,"b""Why can't we fail fast here? This code looks complicated.\n"""
2576,52224755,"b""This doesn't looks particularly related to the change, it better go to a separate commit. \n\nI'm not sure this is a behavior we want to support, I rather throw an exception and force the user code\nto do the polling.\n"""
2576,52225406,b'Must bump corlib version\n'
2576,52226340,b'Can you push your RS changes somewhere?\n'
2576,52229421,"b""That brings the question of how much value bringing Process has. Since it's 100% implemented on top of the windows behavior.\n\nI'm looking at the code for HasExited and it polls for the exit status by using a zero timeout.\n\nI think we can support just that and avoid polling on ppl's back.\n"""
2581,52360837,b'This is bad for a couple of reasons:\n- If makes the test suite takes 5 seconds more when in most cases the callback happens after a millisecond.\n- A timeout is now a silent failure.\n\nUse a ManualResetEvent and timedwaits for the bulk of the coordination.\n'
2592,52525188,"b'dummy is a bad name for a variable that is used.\n\nIt represents the target domain to switch to, right?\n'"
2592,52525438,"b""This disables the existing optimizations for the async configuration.\nCan we benchmark this to see how much perf we're losing?\n"""
2592,52525518,"b""This is different than what the JIT does. The jit uses cfg->domain instead. Couldn't that be an issue?\n"""
2576,52653931,"b""Sounds good, let's do that.\n"""
2624,53088805,"b""This is a runtime API, it can't raise.\nJust discard the error and ban it.\n"""
2624,53088952,b'Same thing. This is an API function. Swallow the error and ban it.\n'
2624,53089051,"b""I don't quite get why you're removing the FIXME here.\n"""
2624,53089168,"b'This is an API function, same thing as above.\n'"
2702,54561475,"b""Shouldn't you double check if user == null whichin the lock?\n"""
2702,54561490,"b""Shouldn't you double check if machine == null whichin the lock?\n"""
2704,54561745,b'Use a countdown barrier to ensure all threads have entered the try block.\n'
2700,54562338,b'We should learn this from the autoconf vars and not by grepping build output\n'
2714,54832934,b'This is bad. The error might be uninitialized if method->rtype is NULL.\n\nSimilar issues on other places.\n'
2714,54832974,"b""Can't you add this as an or clause to the next condition?\n"""
2740,55890699,"b""sdb doesn't get exposed to user types AFAICT.\n"""
2745,55890879,"b""So it's ok to return NULL and not set an error?\n"""
2745,55891614,"b""This doesn't look like what we normally do.\nWe leave to the caller to decide what to do with the error.\n"""
2745,55891700,b'fix_partial_generic_class cleanup the error. We should not poke into one after that.\n'
2761,56062938,"b""Time management could be improved. We want to use high precision timers on both linux and mach with absolute timing instead of relative.\n\nOn neither systems nanosleep is what we want since it will cause time drifts and we can expect fluctuation on results.\n\nThis code doesn't sample every X microseconds, it does signal after X microseconds + the time to signal all threads.\n\nThe actual drift might be small, but it will accrue on long sessions.\n\nWe should be using, on linux, clock_nanosleep and, on mach, mach_wait_until or clock_sleep[1].\n\nIn addition to that, we should try to move the sampler thread to real time scheduling, which will reduce noise\nquite a lot. It's possible to do that at least on mach, but maybe on linux it won't make a difference.\n"""
2761,56063590,"b""Why are we making the sampler thread a regular thread?\n\nI can't see why we'd want it to be suspendable.\n\nNo other tools thread is a regular thread.  They are... tools thread and they attach to the runtime\nusing, as you'd expect, mono_threads_attach_tools_thread.\n"""
2761,56063724,b'We can support both profiling modes by using clock_nanosleep and the right clock/wait mode.\n'
2761,56401525,"b'Changing mono_thread_info_usleep makes no sense as that function implements interval based sleeping.\n\nThe profiler needs absolute time based waiting, which naturally compensates for scheduling and cpu usage between waits.\n\nChanging mono_thread_info_usleep to do that would cause way too much churn in the runtime for no good reason.\n'"
2761,56404361,b'CALENDAR_CLOCK is a non-monotonic time-based clock that subject to clock changes - it has nothing to do with cpu time.\n'
2761,56405222,"b""We use mono_threads_attach_tools_thread for that.\nYour alternative is to manually enable some services in the hopes that things work and we don't get others wrong. \n\nIt's a fragile design decision that is proven by your patch, it calls mono_thread_info_usleep from a thread that will never be attached, something that makes no sense and works by luck and not design.\n"""
2786,56924233,b'Why are you not using mono_metadata_free_type here? Sounds like asking for problems.\n'
2779,56993112,b'Regarding https://github.com/mono/mono/pull/2779#discussion_r56983894\n\nConditional var waits must never be unconditional. They must always check the condition inside the lock before giving it up to Wait since a spurious wake up can happen.\n'
2792,57346945,"b""Don't use fprintf and stderr. It won't work on mobile.\n"""
2792,57347222,"b""What's the perf impact of this change? We're now doing more work on the case of small objects.\n"""
2748,57461639,"b""Shouldn't we return once we set a pending exception?\n"""
2748,57461811,"b'NM, should work, but looks fishy.\n'"
2748,57462011,b'What if we made mono_error_set_pending_exception return a gboolean?\n\nThat way the code can become:\n\n```\nif (mono_error_set_pending_exception (&error))\n  return NULL;\n```\n\nOr maybe we could add a return_val_if_nok variant that sets a pending exception.\n'
2748,57462261,"b'This function is now MONO_RT_EXTERNAL_ONLY, this FIXME can go away.\n'"
2748,57462613,"b'Shit, this should be using mono_gc_wbarrier_generic_store.\nThis is a GC bug, not really related to MonoError.\n'"
2767,57470842,"b""Shouldn't this be a set_pending?\n"""
2767,57470845,"b""Shouldn't this be a set_pending?\n"""
2767,57470858,"b""Shouldn't this be a set_pending?\n"""
2767,57470870,"b""Shouldn't this be a set_pending?\n"""
2767,57471127,"b""We adding MonoError here but there is a failure case in this function that didn't got converted.\n"""
2770,57471262,b'We should raise the underlying exception and not hide it under an InvalidCastException\n'
2770,57471368,b'This is cleaning up the same error twice.\n\nWe should kill that INVALID_CAST macro and replace with something that takes no implicit state.\n'
2770,57471496,"b""We shouldn't swallow this error.\n"""
2770,57471773,"b""This should be an assert, we shouldn't fail type loading for allocated objects.\n"""
2770,57471830,"b'If the method now is banned from the API, the comment can go.\n'"
2770,57471871,"b""Don't swallow the error\n"""
2770,57471925,"b""Same thing, assert of throw, but don't swallow.\n"""
2770,57471946,"b""Don't swallow the error.\n"""
2770,57472049,"b""We shouldn't swallow this error and silently fail the type check.\n"""
2770,57472108,b'This should be an assert.\n'
2770,57472153,b'Make it an assert.\n'
2770,57472212,b'Assert instead.\n'
2770,57472228,b'Assert instead.\n'
2789,57472419,b'Swallowing the error.\n'
2789,57616085,"b""Well, what's the expected behavior?\nMaybe an exception/error on that case should abort the runtime.\n"""
2810,57819002,"b""This is a conservative assumption about free not being good outside of _remove.\n\nThis only happens under extreme load so it's ok to have it.\n"""
2805,57820250,"b'Since this is only going to be use by the sampling thread, we should not be getting into the business of coop.\n\nBecause it will checkpoint but nobody will even try to suspend it.\n'"
2805,57820401,b'We should cache the clock on startup and not lookup/free on each call.\n'
2805,57820504,"b""Why are we ignoring the remain time? If we get spuriously woken up, we'd not sleep as requested.\n"""
2805,57820596,"b""You're discarding the last argument. Which must be used to ensure we can sleep the full amount in the case we get spuriously woken up.\n"""
2805,57821021,b'This is explicitly introducing signaling drift back.\n\nWe should compute the time once and simply add rate on each loop.\n'
2816,58118313,"b""Plus we can't use getenv, only g_getenv.\n"""
2816,58118516,b'We use multi-line comments for multiple lines comments.\n'
2830,58592378,"b'This is wrong, the thead is attached to the root domain so the name must be allocated there too.\n'"
2830,58592473,b'Same issue here with where the thread name is allocated.\n'
2830,58592619,"b""Are you sure it won't be null at this point? The internal thread is not the same thing as what mono_thread_attach returns.\n"""
2830,58592693,b'Why are we not using mono_thread_set_name_internal ?\n'
2830,58592799,"b""This won't work for cross compilation as the GC is disabled.\n"""
2830,58592840,b'Use the root domain here again.\n'
2841,58790126,b'Is this necessary?\n'
2852,58962343,b'mono_lock_free_queue_node_free must be called from the free func.\nSee how the other user of lfq does.\n'
2852,58962442,"b'Unless you operate on the entry hazardously, freeing it with HP makes little sense.\n'"
2861,59493773,b'This must be documented in the release notes.\n'
2861,59494120,b'Why is the code checking if the dequeued pointer is hazardous?\n'
2861,59494193,b'Why are we freeing it here?\n'
2861,59494275,b'Why another thread? How many threads the profiler now needs?\n'
2861,59494946,b'Why are we not longer processing samples from the helper thread?\n'
2861,59495343,b'This will trigger failures if we increase max frames.\n'
2861,59497172,b'This looks wrong. Why would a a sample from the reuse queue be hazardous in the first place?\n'
2948,62065771,"b'No need to be pinned, the callback must switch to running to poke into managed memory anyways.\n'"
2948,62066148,b'This must include documentation.\n'
2948,62066182,b'This must be MONO_API.\n'
2963,62270067,"b'Yeah, it should be an enum and logging should stringify it.\n'"
2963,62270617,b'\xe2\x9d\xa4\xef\xb8\x8f \n'
2967,62340999,b'Looks like what we need for this change are some tests. And run them on windows.\n'
2969,62550059,"b""@vargaz this is a special case, as trampolines can't 100% depend on the caller checking for pending exception.\n"""
2975,62572022,b'We gate allocator codegen based on whether it is available.\n'
2881,63368085,b'Nothing assigns to critical_alloc_method_cache\n'
2815,63430355,b'This leaks all the memory released right after the call.\n'
2815,63430995,b'This leaks the weak handle.\n'
2815,63431262,b'Must set the error object to something.\n'
2815,63431389,"b'Formating, return type goes on its own line.\n'"
2998,63456403,"b""Why is this needed and why can't MONO_THREAD_VAR_OFFSET be used on this case?\n"""
2998,63456478,"b'Oh, I see why.\n\nWe should clean up MONO_THREAD_VAR_OFFSET on windows to follow the same idiom as OSX and have MONO_THREAD_VAR_OFFSET do the trick.\n'"
2956,63456627,"b""Why do we need this?\n\nThis has the same issues as MONO_HANDLE_ASSIGN above and we're not doing anything about it.\n"""
2956,63456746,"b""This is fine as it's to be used on icalls, where we dictate a simple convention.\n\nThe _raw prefix has the advantage of make it weird to use.\n"""
2956,63456818,"b""I really don't like the idea of passing in the return handle that will then be modified.\n\nIt leads to some ugly code.\n"""
2956,63552943,"b""I'd go with 4, it looks a lot more like what you'd expect from normal code.\n"""
2956,63624226,"b""What exactly are we copying than the handle itself? It shouldn't be any more expensive than passing the handle argument itself.\n\nA handle is just a pointer.\n"""
2956,63624527,"b'Why do we need a new frame here?\n\nNew frames should be the exception, not the norm.\n'"
3025,64102564,"b""I'll keep throwing then, it's really bad, but at least doesn't regress the behavior.\n"""
3040,64306225,"b'This introduces quadratic behavior in the debugger, can sizes here be big enough that this would be an issue?\n'"
3040,64306345,"b""Formating of the return value.\n\nWhat about changing the meaning of this function to be the opposite so all checks don't need to negate it? Something like ss_bp_is_unique.\n"""
3059,64765134,b'Makes no sense to check TARGET_X86 on an amd64 backend file.\n'
3069,64980727,"b""That would be a question of style. I'll change. \n"""
3069,64980781,"b""With what, do we have an icall that already maps to g_free? All Marshal methods map to all the weird windows alloc functions but not malloc's\n"""
3074,65282081,"b""Don't mark static header functions as inline. It confuses the win32 linker and any compiler under O2 will inline it anyways.\n"""
3074,65282764,"b'Could you document, for future references, why this semaphore cannot be a MonoCoopSem?\n'"
3074,65282880,"b""Shouldn't we do the same for mono_thread_join ?\n"""
3074,65283331,"b""What's the reason for this change?\nIt causes the debug spew to deadlock in the unified suspend case since it mallocs now.\n"""
2921,65634291,b'Move the whole pass to a separate file.\n'
2921,65634315,b'Why is this needed?\n'
2921,65636829,"b""We're inlining after the front end and that will change the CFG. Good thing you picked a place before the CFG passes and analysis. We do this before SSA formation, which is ok too.\n\nBut, said that, what's the reasoning to have it here? We're losing a lot of optimizations that could take advantage of longer BBs.\n\nWe could do it all the way down after DCE and AA. Could this pass introduce issues?\n\nGiven DCE is crazy cheap, we can do another DCE after decompose.\n"""
2921,65636954,"b'This pass should be conditional like simd and array ops.\n\nWhen emitting the IR, set a cfg flag saying that the IR has at least one OP_ISINST or OP_CASTCLASS.\n\nThen condition the whole pass on that flag being set.\n'"
3082,65667163,b'Errors must require a message. An invalid program exception means nothing without context.\n'
3114,65990116,b'How about a MONO_EXTRA_CONFIGURE_FLAGS to make this not a one time off?\n'
3114,65990198,"b""We should use AC_DEFINE for this define as it doesn't interfere with boehm.\n\nAdditionally, it should be namespaced.\n"""
3121,66133006,b'How about you write a micro benchmark on this and see the diff?\n'
3128,66296542,b'debug spew\n'
3128,66297391,b'Where does it load and store the info from the file?\n'
3149,66680010,b'use uint.\n'
3149,66680217,b'How about a private IntPtr for the first address of the variable area plus a bunch of properties/functions to fetch all elements?\n'
3149,66680365,"b'Meaning it should be: static MethodInfo GetMethodInfo (Type type, string methodName)\n'"
3149,66680723,b'What about we model this as follow:\n\nMono.RuntimeStructs.\\* < straight mapping of native structs\nMono.RuntimeHandles.\\* < wrapper Handle variants that contain any methods we might need.\n'
3149,66680777,b'C# naming convention.\n'
3149,66681737,"b'wow, code goes tons simpler when you have reflection available.\n'"
3149,66682011,"b""Why aren't you creating a size one object[] array and passing to MonoMethodMessage?\n"""
3186,68759071,b'We should convert all gboolean fields to use a bitfield and avoid wasting space.\n'
3213,69181887,"b'This code is C&P from mono_string_to_bstr, we should refactor mono_string_to_bstr to take pointer + length arguments and use that instead.\n'"
3236,69488274,"b'Big arrays are always enabled on mono. We need to kill that configure flag.\n\nAnyways, this test is of very low value, we have similar ones in mono/tests for large array sizes.\n'"
3213,69548525,"b""Don't change this function. It's used by marshal.c and it's going to be a mess to fix it there.\n"""
3213,69548624,"b'Instead of changing this function, which is used by the generated wrappers in marshal.c\n\nIntroduce a mono_ptr_to_bstr local function here that is them called by mono_string_to_bstr.\n'"
3198,69564776,b'Use AC_DEFINE instead of setting a var here and checking it in config.h.in\n'
3198,69565690,"b'This change makes no sense, why would we force a vasprintf implementation on targets that have it?\n'"
3198,69565833,b'You cannot use config.h defines in eglib.h.\n\nDefine the function to always exist and make it a nop in the implementation in case the define is not set.\n'
3198,69565885,b'Same thing as the previous comment.\n'
3198,69566135,b'Those 2 free calls are out of context here. Do we have a mem leak?\n'
3198,69566514,b'If should remove this header completely and decide on the body of g_vasprintf in its body.\n'
3198,69566992,"b""I'm ok with adding the eglib bits if there's an use case for it, but not this to the public mono API as it's not the API we're interested in having for this functionality.\n"""
3251,69981237,"b'This is done in register_thread, why do we need it here?\n'"
3224,69995143,b'we can use g_memdup here for the same effect without the bzero from g_malloc0\n'
3224,69998974,"b'I hope this changes makes things down the line simpler, cuz the global pseudo handle had its elegance.\n'"
3224,70001834,b'Why is it unnecessary?\n'
3224,70001973,b'Do we have equivalent asserts somewhere else?\n'
3224,70002040,b'We can just kill this function.\n'
3224,70092494,b'In this case I believe this applies to the handle_specific parts too.\n'
3224,70093323,"b'Why do we want to split io-layer from w32handle?\n\nThis is a minor breaking change and requires 2 things:\n- updating the docs (man pages, --help, website)\n- adding a section on the release notes on this\n- review mentions of io-layer on the website for possible further edits\n'"
3224,70100121,"b'The split is fine, we just need to document it.\n'"
3252,70103272,"b""It's not the edges that are encoded as API indices, but the SCC.\n"""
3253,70122782,"b""What's a non-initial object?\n"""
3253,70122954,b'code formating.\n'
3253,70126261,"b'Could you document how forwarding works in terms of forward_check_finished, first_push and first_forward?\n\nThe code is very hard to make sense of.\n'"
3253,70126621,"b'Is scan target the ""obj"" variable? Then maybe name the variable that and use @scan_target in the comment to make the connection between docs and code more direct.\n'"
3253,70126800,b'Perf issue or correctness issue?\n'
3253,70127181,"b""Why rename the function? The new name doesn't convey any more meaning than the old one.\nPlus, there's a comment mentioning the old function name.\n"""
3253,70127345,"b'This function does not scanning, is initial_scan_one a good name?\n'"
3253,70128938,"b""I can't see how delaying the push changes anything under forwarding or non-forwarding.\n"""
3092,70488406,b'Could you add some comments on how you picked those numbers and where do they show up?\n'
3092,70488700,"b""Another thing, we're supported to support gsharedvt on all FullAOT targets. Which ones are we missing?\n"""
3092,70489188,b'Why do we need to include all those mcs makefiles here?\n'
3092,70489387,"b""what's wrong with simd? Please leave a comment on why it was blacklisted.\n"""
3092,70489516,"b'To keep with the renaming above, should we prefix ILASM with MINI_ as well?\n'"
3092,70489708,b'Why are those libs being blacklisted? Please add it as a comment so we can act on it over time.\n'
3092,70495178,b'Why do we need to include the mcs headers here?\n'
3092,70495772,"b""I lot of those tests don't look to include things not suppported by FullAOT.\nAre some on this list because they are just broken but supported to work?\n"""
3092,70496063,"b""There's no reason on why constraints-load.il is not supported.\nMy point is that there's a distinction between not supported and broken. We must make sure we don't confuse the two.\n"""
3253,70527562,b'up to you.\n'
3281,70881267,"b""No need to suppress the finalizer of a class without a finalizer.\nMaybe it's missing a finalizer.\n\nAnother thing. Once you dispose, you must change the handle to disposed to ensure we'll fail cleanly instead of accessing a dangling pointer.\n"""
3285,70905528,"b""Can't use use the existing TLS loading opcode/IR op here?\n"""
3290,71017492,b'Given we always what to start a new thread maybe we could go even further and do the whole thread start / join here as well?\n'
3290,71017612,b'This could simply be \n\n```\nFinalizerHelpers.PerformNoPinAction (SetupLinks3);\n```\n\nand it would replace the whole create/start/join.\n'
3289,71029521,b'We should remove mono_gc_finalizers_for_domain from the sgen api and instead have a function that does all that queueing instead.\n'
3290,71087977,"b""Yeah, it's pretty weird to include code from the JIT in the BCL test suite.\n"""
3289,71087984,"b""If it's going to be done, just do it as part of this PR. It's a nice unit of change.\n"""
3306,71631345,"b""It's ((guint64)timeout) \\* 10 \\* 1000.\nI though regular associativity rules would be clear here.\n"""
3315,71738661,"b""Don't do that, use the coop primitives in all targets, otherwise you're breaking coop on windows.\n"""
3305,71772291,"b""Swallowing exceptions is almost always a terrible idea, are there any IOException beyond connection reset by peer that we should be reporting?\n\nAnd shouldn't that exception be visible anyways?\n"""
3317,71775063,b'This looks wrong in many levels.\n'
3317,71775087,b'Let me research the problem a bit.\n'
3328,72327939,b'Could you add that function to both boehm and null-gc and remove this one define?\n\nThe GC API between the 2 GCs should converge and not the other way around.\n'
3335,72516666,"b'In general, we always side with not allocating unless we absolutely have to.\n\nC# performance depends a lot of how fast we produce garbage\n'"
3341,73229806,"b""There's none. The goal here is to allow users to definer that function and trigger dumps manually.\n"""
3341,73229926,"b'The overhead is minimal, but let me measure it.\n'"
3341,73230150,b'Once I port it to linux and address the issues raised here we can benchmark this plus the tags to see how worse it gets.\n'
3350,73564809,b'we should really kill this stuff and have the runtime provide tls for the profiler\n'
3350,73567075,b'wont this cause other threads to access invalid memory?\n'
3350,73617606,b'&& a string??\n'
3350,73617927,b'how would the second part of the cond ever be false?\n'
3350,73618163,b'if excl == tid this would happen and leave it unbalanced compared to line 526\n'
3350,73619950,b'what about one off suspends?\n'
3350,73620388,"b""so you went with a dekker lock. definitely better. it bias exclusive over shared, which is what we want.\n\nI think it's correct.\n"""
3350,73620481,"b""we're losing this tracing capability. have you ever used it?\n"""
3350,73722494,"b'threads can be suspended outside of STW, if a thread is suspended while holding the shared lock we can run into trouble. In theory, at least.\n'"
3350,73722663,b'Those are unrelated changes. And __thread is not going away any time soon either.\n'
2332,74343732,b'This is not a header file.\n\nMove this to a .c file or include the content in local-propagation.c.\n'
3399,74692601,"b'We should at least include a message, to make it easier to track a TLE down to here.\n'"
3401,74969499,"b'this is a version breaking change for AOT, we must bump it.\n'"
3401,74969568,"b""Those two vars are now dead, aren't they?\n"""
3350,75214753,b'We need to somewhere explain those events.\n'
3418,75582647,b'This looks wrong.\n\nWe emit a full fence and then using ldarb?\n\nIt should be one or the other.  dmb + ldrb or ldarb.\n'
3418,75582648,"b""Same problem. We're double fencing.\n"""
3418,75582651,"b""Same problem. We're double fencing.\n"""
3418,75582653,"b""Same problem. We're double fencing.\n"""
3418,75582654,"b""Same problem. We're double fencing.\n"""
3418,75582655,"b""Same problem. We're double fencing.\n"""
3418,75582658,"b""Same problem. We're double fencing.\n"""
3418,75582660,"b""Same problem. We're double fencing.\n"""
3418,75582661,"b""Same problem. We're double fencing.\n"""
3416,75582749,"b""shouldn't we throw an exception instead?\n"""
3422,75934024,b'This used to be generated AFAICT.\n'
3422,75934577,"b""It would be nice to move those knobs and the one before (INCOMING_COLORS_BITS) together and include a description of how you picked the values and what's the impact in changing them.\n\nModel it after this: https://github.com/mono/mono/blob/master/mono/sgen/sgen-conf.h\n"""
3422,75934797,"b'not greater than 2, but greater than HEAVY_REFS_MIN\n'"
3422,75934905,"b""return type goes to a separate line as well.\n\nit's \n\n``` c\nstatic inline gboolean\nbridgeless_color_is_heavy (ColorData *data)\n{\n...\n}\n```\n"""
3422,75935528,"b""That's a fair point.\n"""
3422,75964750,"b""Hashing is order independent. It does by adding the hashed version of each color pointer together.\n\nHaving said that. Adding elements when hashing is pretty bad as it has low avalanche properties, but it's the easy way around getting around the ordering problem.\n\nThe hash_perturb trick doesn't seem to help that much.\n\nA simple test shows that the extra xoring introduces little to no impact into the actual hashcode, it cause some mild disturbance of low bits and none to the high bits. That together with the fact we do (hash & 0x7F) to compute the bucket translates into very little change. A simple test program shown it to a few times lead to streaks of repeating numbers. We're better off using a PRNG and stepping it on every collection.\n\nThis change will make debugging harder, as bugs repros won't be as stable.\n\nThe change to conservatively merge based on the hashcode makes a bit nervous, since we might end up merging too much and screwing up things. We should at least make it runtime toggleable in case we need to disable it for a problematic customer while we troubleshot.\n"""
3451,76268513,b'what about the R8 variants?\n'
3446,76298320,b'why this change?\n'
3446,76298409,b'No need to bump any version number.\n'
3422,76496609,b'This needs to go to man page and release notes.\n'
3462,76497009,"b""This is wrong, it won't handle fields with same name and different types.\n"""
3462,76497524,b'How does this handle derived types?\n'
3462,76505558,b'Subtypes of SymbolType. When you use MakeXXXType on a TypeBuilder.\n\nTest what happens in your patchset if you use a MakeArrayType on a tb.\n'
3464,76851245,"b""Given the var is scoped, I wonder the same. It's a style issue, though.\n"""
3481,76877807,"b""You didn't document that on the backtrace format.\n"""
3481,76878142,b'This is a correction to the spec. We should mention that on the history.\n'
3481,76878989,"b""TYPE_EXCEPTION is not documented at all.\n\nAnd the format changelog doesn't mentions it\n"""
3481,76883165,b'This will need to go to the release notes.\n'
3481,76883316,"b""If we're exposing those on public headers, they must be documented.\n"""
3481,76883810,"b""I can think of 2 reports we'd care to have.\n\nThe format can be the same format as the alloc report, but for finalized objects.\nWe'd report for all objects or broke down per-collection/snapshot.\n\nSecond, we could report expensive finalizers, which ones when over X ms.\n"""
3481,76884287,b'Maybe we should only trigger a heapshot at a deterministic point of finalization? Either at begin or end.\n\nIDK whether triggering at any point would not produce some weird artifacts.\n'
3493,77077681,b'Can we lazily create this array? We pump hazard pointers quite regularly.\n'
3493,77078501,"b'This will overflow if the extra data it too big.\n\nAll it take is passing ""output=/very/log/path"" to the profiler and we\'re busted.\n\nYou should calculate the size and alloc a big enough buffer.\n'"
3493,77078717,"b""Args should be leb as it's possible to come up with more than 256 bytes of arguments.\n"""
3493,77089503,"b""shouldn't this be sizeof (gint32) + strlen (args)  + 1?\n"""
3534,78048157,b'We should add InterlockedAddPointer and avoid this ifdef.\n'
3546,78853671,"b""Do we need to enable it at arg parsing time?\n\nCan't we simply let mono_profiler_load set it? This reduces the amount of state we expose. \n"""
3546,78861204,b'Should we backport this one to 4.8?\n'
3546,78861767,b'Why this check is no longer needed?\n'
3546,78862522,b'I think we should wrap this into a any macro that says whether a given profiler event it enabled. Including the G_UNLIKELY.\n'
3546,78863373,"b'This is a no go change. The products install profilers during regular operations. This would cause a background thread to be created. Worse, that thread always spins, which is a power disaster.\n'"
3546,78864205,b'How about iOS?\n'
3546,78865124,b'We should remove the check from configure.\n'
3546,78866963,b'Does it need to be recursive?\n'
3546,78867354,b'This is a good chance to document all those undocumented callbacks\n'
3546,78868387,b'What about mono_profiler_enable_events / mono_profiler_disable_event macros?\n'
3546,78869933,"b""I really don't like this change.\n\nThe profiler events are checked anyways on the calls. Plus we're not hinting the compiler that it's a non taken branch.\n\nWe should use something like this:\n\n```\n#define GEN_EVT2(EVENT, FUNC, ARG0, ARG1)   do { \\\n    if (G_UNLIKELY (mono_profiler_events & MONO_PROFILE_ ## EVENT)) \\\n        mono_profiler_ ## FUNC (ARG0, ARG1);    \\\n} while (0)\n\n#define RAISE_APPDOMAIN_NAME(ARG0, ARG1) GEN_EVT2( APPDOMAIN_EVENTS, appdomain_name, ARG0, ARG1);\n\n```\n"""
3546,79265911,b'@BrzVlad can you review this one?\n'
3546,79498744,"b""More than one boolean per function is a code smell, It's better to use a single flags argument.\n"""
3546,79507165,"b""I'm not sure that the profiler aborting the whole process is a good idea. We don't do that in other cases IIRC.\n"""
3546,79507326,b'This used to be non fatal\n'
3546,79507661,"b'Couple of things. I believe the commit message is wrong.. The serve no purpose when allocation profiling is _disabled_.\n\nMore importantly, have you discussed this change with the profiler team?\n'"
3585,79949623,"b""I don't get it.\n\nHow can they be folded into a single address when they pass arguments to cpu_load?!\n"""
3585,79949933,"b'Never mind, the explanation was above.\n\nSince cpu_load is not implemented on windows, the compiler can drop the argument and make the 3 functions identical.\n'"
3601,80110052,b'This flag makes no sense as mono always STW.\n'
3601,80110563,"b""This is bad, we can't crash on OOMs scenarios we can handle.\n"""
3601,80110952,b'We must handle the heap getting full and evacuation failing.\n'
3601,80111752,"b""The soft limit doesn't enforce a limit on heap sizes. The ideal of the 75% limit is for it to be a hard limit.\n\nBy default, the managed heap must not go above that.\n\nThis gives us the memory headroom we need to OOM.\n"""
3601,80111997,"b'This is a bad heuristic, it will double the heap size while compacting.\n\nIt should take into account how much headroom we have left when figuring out how much to compact.\n'"
3626,80733551,b'At some point we should make this a configure time toggle so we can enable it on desktop and test it.\n'
3626,80734214,"b'oh, nm, just show winconfig\n'"
3663,81152329,b'This is not how we format code in the runtime. \npreprocessor macros or beginning of function are not indented \n'
3653,81195751,"b""I don't think this is a good idea, this will interact badly with async operations plus it's racy.\n"""
3707,81801942,"b""Can't we macro this out and add it to mono-compiler.h? \n"""
3707,81820943,"b""This is wrong, you're not trimming the virtual memory around the aligned block.\n"""
3707,81822078,"b'We try to keep glib.h as close to the original as possible, no a great place for this sort of thing.\n'"
3692,81840367,"b""@alexrp Looks like we're getting some patches towards making the profiler works on windows :)\n"""
3714,82077168,"b""It's a common pattern to avoid NREs in case of race conditions.\n"""
3722,82119546,"b'this is wrong, we mono_class_alloc0 the fields.\n'"
3736,82341772,b'This file is missing.\n'
3653,82645877,"b""It's ok to do async calls together with sync calls.\n\nIn fact, that's how async calls work, you complete them by performing a sync call.\n\nBeyond that, this change is racy and could lead up to sockets doing calls in blocking mode when you expected them to be in non-blocking.\n"""
3364,83102726,"b""We don't mutate XMM registers AFAICT. Modifying them is not needed.\n"""
3364,83103102,"b""I'm not sure this change is desirable. What save here are the cconv registers and we only ever use them for passing doubles.\n\n@vargaz what you do think?\n"""
3364,83103474,"b""Ensuring all MonoContext instances will be aligned will be tricky as some are malloc'd or stack alloc'd by trampolines. If this is only needed for using movaps, we're better off just using movaps. The performance downside is not that bad.\n"""
3364,83103678,"b'It took me a while to understand the ""%c[ebx]"" trick. Nice cleanup\n'"
3364,83104224,"b'Did you consider adding a separate array to hold the XMM regs?\nThat would mean overlap of values, but it would avoid changing a lot of low level code in the JIT.\n'"
3364,83106090,"b'Same thing on the comment on mono-context.h, if movups requires less assumptions, we should use it.\n'"
3765,83281581,"b""Wow, I don't believe we had such silly limitation around aggressive inlining\n"""
3765,83282929,b'I thought that r4 values are kept as floats in registers. This is expanding it to R8\n'
3765,83284653,"b""Aren't we miscompiling R8 getters?\n"""
3765,83303017,"b""Shouldn't we return 1 as we're trying to hw accel?\n"""
3805,86183473,b'forgot to remove the forward decl.\n'
3867,86240660,"b""it's an aliased variable that is defined with an actual good value in the outer scope\n"""
3764,86579246,b'Why are we restoring the FP state?\n'
3796,86639972,"b""the enum must be shared as there's a single switch on the managed side\n"""
3907,86836379,b'We probably should assert.\n'
3805,87064716,"b""Can't we forward then queue?\n"""
3805,87065570,b'Can you try to change this to use mutex_try_lock and give up stealing if it fails to lock?\n'
3805,87065932,b'I hate boolean variables that are constants on all call sites.\nWe should use a couple of macros GRAY_OBJECT_ENQUEUE_SERIAL and GRAY_OBJECT_ENQUEUE_PARALLEL that call into the actual function.\n'
3805,87066247,b'I guess using mod here is fine since los objects are huge anyways.\n'
3946,87722219,"b""Won't this be racy because you read njoined_threads without any coordination?\n"""
3946,87722274,"b""Why are we using a different code path for unix? Can't we use the same mechanics there?\n\nA WaitForSingleObject on the thread handle has the same effect as pthread_join, doesn't it?\n"""
3946,87722292,"b""Shouldn't background_change_event be gone?\n"""
3945,87901607,"b'No, because we delay aborts until the outermost finally clause in play\n'"
3936,87903159,"b'Yes, plus it uses less memory.\n'"
3943,87907876,"b""This is wrong, we're duplicating the field now. Notice that MonoClassGtd extends MonoClassDef.\n"""
3932,87911247,b'maybe we need handle conversion functions/macros?\n'
3932,87911893,"b'This is not part of the public API, it can go away.\n'"
3932,87917953,"b""HANDLE_SCOPE_BEGIN is loop fragile since it introduces an inner loop.\n\nA break or continue will skip the end of block action and scopes will pile up.\n\nMaybe we should offer loop macros instead? If you don't like that, the existing macro can be fixed by using a pair of loops.\n"""
3932,87920176,b'I took a while to find out that this was the icall that uses outargs.\n\nWe need a marker on the runtime size to tell that those handles are outarg.\n'
3932,87920651,"b""This should be a boolean, we don't use the number of outarg handles for anything\n"""
3932,87920735,"b""Shouldn't the check be for outarg and ref type? \nOtherwise we'll handle'ize `static extern void Foo(out int bar)`.\n"""
3959,87924318,b'You should adjust cpu-amd64.md as well given the max size changed.\n'
3970,88105736,"b""Won't that block aborts? cc @ludovic-henry ?\n"""
3981,88369200,"b""No, that's what the runtime outputs.\n\nI should have mentioned that the function is a copy of this one:\nhttps://github.com/mono/mono/blob/master/mono/metadata/debug-helpers.c#L134\n"""
4009,89232767,"b""No, it's on purpose. Byte is the primary type here even though it's unsigned. """
4009,89232965,"b""No, we'll remove all the related code once this is ready."""
4009,89233006,b'It will be removed once this PR is ready.'
4009,89233210,b'good catch. fixed.'
4022,89696134,"b'One thing to keep in mind is that the bigger the value, the more expensive it is to fetch it.\r\n\r\nWe should take a look on what properties are more popular or used during steady state and prioritize those.\r\n\r\n'"
4014,89859311,b'Why would the offset be -1?'
4014,89859710,"b""Since we're renaming MONO_ARCH_HAVE_TLS_GET to MONO_ARCH_HAVE_FAST_TLS, let's remove this design mistake and simply make it a function that all backends have.."""
4014,89861069,"b""We're losing windows support. It's ok if we do it to simplify getting this reviewed and merged. But we should add it back after."""
4014,89862635,"b""Do we actually need this? Can't we have a single init/cleanup function that does it for all keys at once? It will address the fragility of the current design and win us simpler code."""
4071,90552510,b'Fixed'
4071,90594675,"b""No, insert doesn't replace old values."""
4071,90596520,b'Will clarify the existing one.'
4097,90956054,"b""This will fail loading the type if there's a pending exception, which is exactly what the abort protected block is  meant to avoid.\r\n\r\nWe try to pic a pending TAE at the end by calling mono_thread_try_resume_interruption.\r\n"""
4123,92462039,b'Can serverName be an ipv6 address literal? '
4156,92848815,"b""it's a leftover. I'll remove it."""
4156,92850249,"b""There are a few problems:\r\n\r\n1) we must not execute interrupt while holding the type initialization. As that's a leaf lock.\r\n2) interruption can potentially return NULL... for reasons. Some valid, some just me not being super familiar with the code.\r\n\r\nMy concern is that the unknown parts of (2) could introduce a retry loop and that's what I'm trying to catch.\r\n\r\n"""
4156,92850316,"b""the 2 fields are now dead. I'll add a follow up commit that kills them."""
4168,93022473,b'The bitcode output is not the defining characteristic of this mode so describing it that way is misguided.\r\n\r\nOther modes produce a bitcode file when using llvm so this explanation is confusing.\r\n\r\n'
4168,93023317,"b'The AOT compiler does not perform IL stripping.\r\n\r\nIt should mention that the runtime must be in full mode (--full-aot) to use such library.\r\n\r\nThe description of full-aot mode should, perhaps, be left to the --full-aot flag.\r\n\r\n'"
4168,93023636,"b""The AOT compiler doesn't perform IL stripping.\r\nIL stripping is not required of this mode, it's just possible.\r\n\r\nI think, like --aot=full, say that it AOT's the library to be run under the --hybrid-aot mode.\r\n\r\n"""
4168,93024000,b'nit: value type is not hyphenated in the dotnet world.'
4168,93024449,"b""The --aot=full flag doesn't provide any additional information.\r\n"""
4168,93025446,"b'This is wrong.\r\n\r\nUnder hybrid-aot the following conditions apply:\r\n\r\n- JIT compilation is enabled;\r\n- dynamic codegen APIs, such SRE, are available;\r\n- dynamic assembly loading is available;\r\n- AOT images must have being compiled in the hybrid-aot mode.\r\n- the runtime will not use IL from assemblies with AOT images (implying they can be stripped)\r\n\r\n'"
4176,93652959,"b""We still need to figure out what's going on under AOT before considering enabling this."""
4176,93653218,"b""Agreed, we've doing that for all other cases."""
4176,93653818,"b""We should print those problems (specially under -v), because otherwise it won't be possible to troubleshoot issues."""
4176,93653983,b'We should log those failures under -v.'
4176,93654462,"b'This check is too strict, this would disable, for example, List<DateTime>.\r\n\r\nWhat would be the issue of doing `k->image == mono_defaults.corlib`?\r\n\r\n'"
4176,93655073,"b""Won't this introduce a lot of duplicated instances?\r\n\r\nIf I have Dictionary<[Foo]A, [Bar]B>, the AOT images of both Foo and Bar would include it."""
4176,93655235,"b""nit: 'the it' - bad grammar"""
4176,93655426,"b""I'm confused on how this works. Why won't Foo be loaded when compiling Bar?"""
4176,93656134,"b""Hey Zoltan,\r\n\r\nThis would still compile *all* methods from the assembly into the aot image. If there's profiling data available, shouldn't we only include those found there?\r\n\r\n"""
4176,94162839,"b""Yes, it's expected to fail, but we MUST be able to troubleshoot customer with those issues with just a log file."""
4176,94163263,"b""Fair enough, one wait this will be improved is when we support manipulating multiple files, so we'd be able to merge multiple profile runs.\r\n\r\nFor example, say we merge the profile files of running csc on corlib and System.Core and that gives us much better coverage over the whole BCL than just one of them."""
4199,94471625,"b""This check looks wrong, it's too geral.\r\n\r\nCan't we use the same code we have in the JIT virtual call trampoline to figure out the same information?\r\n\r\nThere's a lot of nuance here that we need to take care.\r\n\r\n- the array special interface checks only applies if the source type is an array.\r\n- it should not match all instances of the same method. For example, methods in IList<int> should not match the IList<double> from double[]."""
3563,95845756,b'This and other stack manipulation require unwind info to be generated.\r\n\r\nZoltan can explain how to add it.'
3959,95905842,b'This is not the way to do it. The code should be removed including on the backends.\r\n\r\nHow does this impact arm?'
4241,96086137,"b'How did you determine this to be dead code?\r\n\r\nIt looks like this is used by the BCL.\r\n\r\n```\r\ngit grep 0x98000004\r\nmcs/class/referencesource/System/net/System/Net/Sockets/IOControlCode.cs:        KeepAliveValues = 0x98000004,\r\nmono/io-layer/sockets.h:#define SIO_KEEPALIVE_VALS 0x98000004\r\n```\r\n\r\nThen\r\n```\r\ngit grep KeepAliveValues\r\nmcs/class/System/System.Net/ServicePoint.cs:                    socket.IOControl (IOControlCode.KeepAliveValues, bytes, null);\r\nmcs/class/referencesource/System/net/System/Net/ServicePoint.cs:                                IOControlCode.KeepAliveValues,\r\nmcs/class/referencesource/System/net/System/Net/Sockets/IOControlCode.cs:        KeepAliveValues = 0x98000004,\r\n```\r\n\r\nWhich suggests at least two places could be potentially using this.\r\n'"
4241,96086884,"b""I like this change. It makes explicit that we're not trying to support ioctlsocket."""
4234,96088822,"b""We'd have to build that hashtable on startup, not a big fan of that either.\r\n\r\n"""
4234,96490673,b'done'
4293,98190625,b'This condition will always eval to false. In the previous line does `*p = value` meaning p is never NULL'
4293,98190797,b'What if we moved the check to alloc_degraded itself? '
4293,98190944,"b""There's a `if (G_LIKELY (p))` before this condition. Couldn't we use it instead?"""
4283,98358151,b'This is duplicate code from metadata'
4283,98358153,b'Use memcmp'
4283,98358200,"b""This looks wrong, why can't it be checked upfront for a ginst method?"""
4283,98358235,b'Then this is the perfect time to move it. This is overly complicated code to have in the runtime debugger bits.'
4283,98358257,b'This is recursive. How deep can it go?'
4348,100238008,b'Do we still need to refcount worker? destroy is now an empty function.'
4348,100239235,"b""This doesn't look good.\r\n\r\nWe have the same information (subsystem lifecycle state) encoded in two variables. And they are accessed in a lock-free way.\r\n\r\n"""
4348,100239511,"b'This will ignore ThreadState_SuspendRequested, was that on purpose?'"
4373,100925075,"b'This ifdef is too much, remove it and keep the comment so ppl know why.'"
4373,100925479,b'This should be a configure check for the header.'
4373,100925766,b'This is not needed.'
4373,100926484,b'The appropriate fix around setsched is the following:\r\n\r\n- rename all related functions around mono_threads_platform_* (so mono_threads_platform_reset_priority here).\r\n- in mono-threads.h add an ifdef for HAIKU and define MONO_THREADS_PLATFORM_HAS_SETSCHED\r\n- in mono-threads-posix.c convert include the posix impl to check for the above define\r\n- in mono-threads-haiku.c add a bunch of empty stubs.\r\n'
4373,100926619,b'@jonpryor care to comment on this part?'
4375,100929432,b'Does this works with docs.mono-project.com?'
4375,100931110,b'Did we lose the existing page with embedding API docs?'
4375,100931876,"b""It's ok, ask around.\r\nWe can't lose a way to publish the existing docs on the embedding API alone (no internals)."""
4381,101192152,"b""It's time we optimize this on arm and arm64!"""
4381,101192996,b'modulus can be quite slow on ARM devices and hopefully those that require emulation are gone.\r\n\r\n'
4381,101193619,"b""Won't this slow down regular card table scanning?\r\n\r\nIf perf is bad here, we could use a fake los object for this."""
4381,101193969,b'Code formatting.\r\n'
4381,101194372,"b""This is broken in multiple ways.\r\n\r\nmono_g_hash_table_remove will  but will resize the table under you and triggers an user-after-free crash.\r\n\r\nYou can't implement mass removal in terms of item removal and not suffer from quadratic performance.\r\n\r\nIt double scanning the table, plus doing intermediate rehashing."""
4381,101194852,"b'Why .5, .05 and 3?\r\n\r\nWithout some empirical numbers based on experimentation this numbers are not great.\r\n'"
4411,102351658,"b""This is wrong, we're creating a string in the domain that is going to be unloaded."""
4411,102351831,"b'This code should not be here, it belongs to utils.'"
4294,102357008,"b""gchandles can't deal with interior pointers.\r\n\r\nWe must assert when that happens."""
4294,102359027,b'This doubles the size of HandleChunkElem due to alignment. And make scanning pretty bad.\r\n\r\nWe could get away with a 1/32 space increase by having a per HandleChunk bitmap.'
4421,102792835,b'Why this is needed only under windows?'
4421,102792991,b'Why do we need this under windows only?'
4421,102793068,"b'Same thing, why only windows need those?'"
4421,102793518,b'This should only check for MONO_ARCH_HAVE_UNWIND_TABLE as that define is already behind `#if defined(TARGET_WIN32) && !defined(DISABLE_JIT)`'
4421,102793813,"b'BTW, that define should be unified with MONO_ARCH_HAVE_CODE_CHUNK_TRACKING as they are both defined under the same set of conditions.\r\n\r\n'"
4446,103997146,b'Why CLOCK_MONOTONIC is not enough for OSX?'
4446,103997276,"b""This func is now big enough that probably doesn't make sense to have it inline."""
4446,103997576,"b'Same thing here, this function is too big to live in a header.'"
3929,104264672,"b""This function doesn't make sense.\r\n\r\nWhy is it checking for MONO_TYPE_CLASS?\r\nWhy is it giving special treatment to char and boolean?\r\nWhy it is giving special treatment to ARRAY and SZARRAY in the array case?\r\n\r\nThe tests need to cover the positive tests as well.\r\n"""
4480,104486115,"b""I copied this from XM to get system.runtime.remoting working.\r\nI'll move that to the right makefile then."""
4480,104991043,"b""Without remoting, only the most primitive forms of cross-AppDomain communications work. It's required for transparent proxies and MarshalByRef objects.\r\n\r\nWe explicitly don't support AppDomains or Remoting on iOS.\r\nAndroid was left as a maybe and we end up deciding to support AppDomains.\r\n"""
4480,104996522,"b""We need SRR if we want AppDomains to work beyond trivial examples as most forms of cross-domain communications need it.\r\n\r\nAt this stage, it's ok if XA doesn't ship those two assemblies.\r\n\r\nAdditionally, given that this assembly is loaded by corlib using reflection, there's further work in tooling to make it possible to ship it without impacting our users.\r\n\r\n"""
4491,105103091,"b'This is wrong, it could iOS or tvOS'"
4491,105103210,"b'this is wrong, it could be iOS, tvOS or watchOS.\r\n\r\nThe distinction matters as the runtime behaves differently among those 3.'"
4491,105103534,b'What about Android?'
4503,105318158,"b""I'm not sure this changes play well with how thread_interruption_requested is bumped by callers of  mono_thread_clear_interruption_requested and mono_thread_clear_interruption_requested.\r\n\r\nThey might be decrementing when there's a deferred interrupt that didn't bump in the first place.\r\n\r\n\r\n\r\n"""
3929,105779158,"b""On the MONO_TYPE_CLASS check, that's not how to verify if a type is a ref type. It ignores object, generic instances and arrays. You should use MONO_TYPE_IS_REFERENCE.\r\n\r\nThe array check means you can pin a boxed char, but not an array of chars. I don't believe that's the expected behavior.\r\n\r\nAs I mentioned, we need positive tests for the types that expected to be pinnable."""
4522,106289134,b'This is the wrong approach.\r\n\r\nconfigure should compute the suffix and both appdomain.c and Environment.cs  should use it.'
4480,106303945,"b""This is from XA, I didn't change it."""
4536,106480668,"b'Yes, fixed.'"
4540,106510142,"b""IDK, as I said before, I'm bringing code from XA. That's a question for @jonpryor """
4540,106510792,b'Because otherwise I have to type the actual expansion of $(test_lib) as the make target when building the test suite from the shell.\r\n\r\nTyping `make monodroid_corlib_test.dll` and friends gets old really fast.'
4522,106511354,"b'Hi Zoltan,\r\n\r\nWe decided to lose the shackles of decisions made in the 2000-2004 timeframe and give the corlib version a meaning more useful for our current reality.\r\n\r\nStarting from this PR, the corlib version should be fully usable by monolite, so it must reflect changes that would break monolite as well.'"
4540,106741058,"b""That would be great if I wanted to run the tests. I don't, I want to build the test lib."""
4540,106741573,"b""More precisely, I'm building the test lib and using an external runner - which means I can't use make check as it will fail once it tries to run.\r\n\r\nI want to keep the knowledge of how to build the test suite with mono as a ton of flags are passed to csc.\r\n"""
4557,106778261,b'That will kill any chance at reg allocating simd vars'
4503,106998809,b'Can you document here all possible states and their meaning?\r\n'
4503,106998987,b'What does it mean to begin a protected block while having a pending sync abort?'
4503,106999331,b'What happens if we have both INTERRUPT_SYNC_REQUESTED_BIT and INTERRUPT_ASYNC_REQUESTED_BIT set?'
4503,106999668,"b""Shouldn't this function clear all interruption requests?"""
4503,107000045,"b""Shouldn't this function only clear requests than are ready to be processed?\r\nMeaning it should not clear deferred async requests.\r\n"""
4503,107000522,"b""Shouldn't this be guarded by `if (sync || !(new_state & ABORT_PROT_BLOCK_MASK))`?"""
4503,107024996,"b'This design remains unsound in my head. So, first, let me phrase all the scenarios and things to consider.\r\n\r\nThere are 3 sources of abort we need to consider. set_pending, sync abort and async abort.\r\nThere are abort protected regions that delay the execution of aborts.\r\n\r\nset_pending and sync abort must be executed unconditionally.\r\nasync aborts must be delayed around protected regions.\r\n\r\nCan we have multiple pending aborts? Yes, we can have set_pending happen in tandem of an async abort. In case of a protected block, we must deliver only set_pending exception while keeping the async one deferred.\r\n\r\nLooks like your change does what I think needs done.\r\n\r\nHmmm, so, in addition to the above fix, we need a couple of extra things.\r\n\r\n- debug/trace level logging of those things. Logging thread state and thread_interruption_requested will make it easier to spot issues like unbalanced bumps and threads going into bad states.\r\n\r\n- We lost some asserts for valid states.\r\n\r\n'"
4503,107025400,"b""We should only bump it if we expect that the thread will be able to serve the interruption reasonably fast. There's a significant slowdown associated with having thread_int_req > 0.\r\n\r\n"""
4540,107028330,"b'@marek-safar so, can I have a nice target to build the bcl test suite plz? :)'"
4546,108334149,b'that makes sense.'
4546,108334323,b'We could InterlockedDecrement here'
4546,108334447,"b""Shouldn't this be volatile or read with InterlockedRead, given we're doing atomics with it?"""
4613,108729931,b'Why this?'
4618,109482173,"b""nitpick, you can't use memcpy/memset in concurrent code as they suffer from word tearing (use the mono_gc_ variants)"""
4618,109484681,b'How do you see the two working at the same time?'
4618,109484986,b'Not a fan of using `object_ops_par != NULL` to signal that this is a parallel nursery collection.'
4630,109522861,"b'What about adding a size_t overload to InterlockedAdd?\r\n\r\nIt would require us breaking out of the win32 API for atomics, but I think this is a long time wish of @alexrp.\r\n\r\n'"
4618,109523264,b'This is something we really need to look into. Plus we need to respect linux container caps.'
4618,109530592,"b'What scenario does this covers?\r\n\r\nI mean, why do we need it now and not before?'"
4618,109534758,b'Why 32?'
4630,109537783,"b""Sounds good to me, though I'd love to head @alexrp on this."""
4618,109549420,"b""This can happen anywhere we have concurrency as the GC can potentially read a partially updated pointer.\r\n\r\nIt's extremely hard to hit that in practice, with or without stw, but definitely possible."""
4618,109549590,"b""Makes sense. All of that sounds like unwanted complication for now, as we're trying to get this to work in the first place."""
4651,110259259,"b""You can't insert a raw pointer into a GHashTable"""
4651,110259568,"b""Making this static only works as long as we don't change anything in locking.\r\n\r\nThis is a bad design."""
4651,110262035,"b'I think we can fix this by renaming reflection_setup_internal_class to reflection_setup_internal_class_internal while adding a new function named reflection_setup_internal_class.\r\n\r\nWe\'d do something like this: \r\n```\r\nstatic gboolean\r\nreflection_setup_internal_class (MonoReflectionTypeBuilderHandle ref_tb, MonoError *error)\r\n{\r\n   MonoPtrArray types;\r\n   mono_ptr_array_init (types, `6, MONO_ROOT_SOURCE_REFLECTION, ""sre setup internal class"");\r\n   gboolean res = reflection_setup_internal_class_internal (ref_tb, &types, error);\r\n   mono_ptr_array_destroy (types);\r\n   return res;\r\n}\r\n```\r\n\r\nAnd in reflection_setup_internal_class_internal we\'d search `types` for what we\'re init\'ing and add to it if not found. The average depth will never be big enough for this to matter.\r\n'"
4658,111029388,"b""This write bias won't work reliably across multiple writers as buffer_unlock_excl zeroes buffer_lock_exclusive_intent.\r\n\r\nIt might make sense as a way to provide some chance to readers in case of too many writers, but it won't make the biasing as good as you'd expect. What do you think is the best option here? \r\n"""
4658,111029585,"b'nitpic, maybe have a define or this assert? IE ASSERT_SHARED_LOCKED / ASSERT_EXCL_LOCKED. We do similar things in the runtime already.'"
4658,111029696,b'This is a public function that lacks docs.'
4658,111029827,b'mono_thread_small_id_alloc is not used in this PR.'
4658,111030126,b'How aborting here is useful?'
4658,111030500,"b""Won't this change will cause us to stop signaling threads that have one signal discarded by the kernel?\r\n\r\nThis is a pretty common occurrence on Apple targets IIRC.\r\n\r\n"""
4681,111272817,b'Who frees the hashtable?'
4701,112050053,"b""Yes, it's the same trick we do on the regular casting code. \r\nMonoClass::supertypes is never smaller than MONO_DEFAULT_SUPERTABLE_SIZE.\r\n\r\nSecond point, I haven't tried adding such fast path, but from the previous change that removed it from STELEMREF_CLASS, the hit count in not significant enough to justify it.\r\n"""
4718,112244797,b'This is storing a managed pointer into the native heap.\r\n'
4718,112245040,b'If this really needed? It will introduce a lot of history noise for no particular reason.'
4718,112245216,"b""Why is this being removed? What's the justification for that?"""
4710,112260146,b'Why checking for both PWD_H and HAVE_GETPWUID_R is need here?'
4727,112770817,"b""I think mono_domain_add_class_static_data was added by mistake to the public API when we moved to use MONO_API in 2013.\r\n\r\nIf you git grep for it, you'll find a few stray references that should be easy to kill.\r\n\r\n\r\n"""
4730,112783057,"b""This won't work when using a cross compiler as the GC is not available."""
4730,112783235,b'Why do we need to add all facades?'
4718,113490542,"b'How did you determine it was dead?\r\nAFAICT, we still ship it: https://github.com/xamarin/xamarin-macios/blob/0a47a8ce0c6d00e7d36e3315289c99de01f417b2/builds/Makefile#L1263'"
4752,113496162,b'What does this change tried to achieve exactly?'
4759,113958037,"b""I think keeping it consistent with the rest of the enable-minimal is better. There's enough of it around the runtime that we're used to it."""
4718,113958866,"b""By moving to a header the idea is to make this conditional to the host being iOS?\r\niOS functions fine without it as it's just an optimization.\r\nHow does it get better without the configure flag?"""
4752,114137388,b'Sounds good.'
4752,114223430,"b""Hey Vlad,\r\n\r\nThere are a few issues with this commit:\r\n\r\n1) Lots of magic numbers (plus on previous commit). All those numbers must go to sgen-conf.h as defines. Things like the default mode, default value for sgen_max_pause_time and sgen_max_pause_margin.\r\n\r\n2) Using a GC mode should be exclusionary with manual tweaking. Letting them be mixed makes little sense.\r\n\r\n3) I don't think we should add all those modes, specially for those we don't have a clear answer. Power and Memory are examples of superfluous modes we can avoid for now.\r\n\r\n4) Some modes, like pause, should be parametric, the use should say what's the goal. 30ms pause time is an arbitrary number you picked that doesn't necessarily reflect what the user can expect to meet.\r\n\r\n5) This is missing an update to the man page.\r\n\r\n6) I don't agree on the configuration picks.\r\n\r\nWe can ignore HAVE_CONC_GC_AS_DEFAULT when using gc modes as there's no legacy behind it.\r\n\r\nBalanced, I agree on this policy. Its goal is to keep pause times in check at a minimal cost in throughput.\r\n\r\nThroughput, this one looks wrong, there's no point in using a concurrent GC when the goal is shorter wall clock. Parallel minor and major should be used. It should be give much larger nursery allowance so it better scales with major size.\r\n\r\nPause, I agree on this policy. Its goal is to try to meet a specific pause time goal at a modest sacrifice in performance.\r\n\r\nAs we discussed, we'll later have a more aggressive variant of the Pause goal where a bigger performance sacrifice is to be expected.\r\n"""
4781,114228466,"b'It has nothing to do, volatile in this case is about what the EMCA spec says.'"
4827,116093434,b'It would be nice if the description included a grammar/description of the encoding itself.'
4827,116097456,"b""This json dump is quite verbose. It's more easily parseable, but not necessarily easier to understand.\r\nMaybe I'm missing the point, is there an use for it beyond us reading it?\r\n\r\nSo, I manually desanitized the example. It results in:\r\n```\r\nmono_aot [ method asm: mscorlib [ klass namespace: System name: byte ] System.IConversible.ToUInit [ sig [ type u4 ] hasthis [ type other System.IformatProvider ] ] ]\r\n```\r\nThe above already has reasonable clarity and is denser than json.\r\n\r\nOne further improvement would be to make it closer to conversional method stringification.\r\n```\r\nmethod:  [mscorlib] System.byte::System.IConversible.ToUnit(uint, System.IFormatProvider)\r\n````\r\n\r\nDemangling is to help us understand what's going on.\r\n\r\nTBH, I'm not sure the second conversion is that important.\r\n"""
4864,116562505,"b'This still wrong, value must not be static.'"
4864,116562737,"b""I got that fixed in another PR, so don't sweat about making the change."""
4887,117018305,"b""But does it do proper dep tracking? IE, things won't be compiled when no change is made."""
4887,117018798,"b""Why is that not an issue?\r\nModifying the assembly should cause the MVID to change, shouldn't it?"""
4872,117146629,"b""Good point, I'll stop being lazy and use proper unique file naming."""
4872,117146773,"b""That's not relevant here, the point is just adding a suffix that won't collide with existing files.\r\nUnless tests are executed in parallel, it won't matter as we rename & delete."""
4872,117146815,"b'It should, we use those 2 libc functions in mono.'"
4872,117147308,b'I have the very opposite opinion on using lambda based APIs.\r\n'
4840,117504017,b'When did we stop?????'
4840,117506288,b'How about this? \r\nhttps://github.com/xamarin/xamarin-macios/blob/9d4be4cc15f9c4f92f4459188cc1b790dec8d99c/tests/mini/mini.csproj\r\n'
4917,117935220,"b""Aren't we better off adding another stelemref wrapper for interfaces?"""
4929,118582114,"b'This is wrong.\r\narm darwin can be iOS, tvOS or watchOS.'"
4929,118582206,b'This is wrong.\r\n\r\narm64 darwin can be iOS or tvOS.'
4929,118582421,"b'This is wrong, it will match Android.'"
4929,118582487,"b'This is wrong, it will match OSX and simulators.'"
4929,118582559,"b'This is wrong, it will match Android.'"
4929,118582611,"b'This is wrong, it will match the simulators.'"
4929,118582648,"b'This is wrong, it will match Android.'"
4929,118582682,"b'This is wrong, it will match Android.'"
4929,118582814,b'Why this no longer work?'
4929,118583081,"b""Naming the osx backend as Darwin is confusing as that's the term for all 4 Apple OS's"""
4928,118637544,b'fixed'
4958,119445028,"b'HAVE_ONLINE_VES is a weird name at first, but it makes perfect sense.\r\n\r\n'"
4958,119459981,b'I think this needs changes to the offset generator.'
4958,119460724,"b""This looks wrong.\r\nIt means we can't enable the interpreter on desktop and have working (non-full)AOT."""
4958,119460909,b'Missing doc as the above.'
4973,120236529,b'Code duplication with ves_icall_System_Threading_Semaphore_ReleaseSemaphore_internal'
4973,120236711,b'Code duplication with ves_icall_System_Threading_Mutex_ReleaseMutex_internal'
4967,121012841,b'Fixed'
4967,121012900,"b""No reason at all.\r\nI'm replacing it with PROFLOG_ defines."""
4967,121013086,"b'Hmmmmmm\r\nPerhaps so, but that gets us to long boring names.\r\nI rather rename it to something like types, TBH.'"
4967,121013217,b'Consistency with the rest of the runtime.\r\n\r\nAll constants are better thrown together in a conf header. Similar to sgen-conf.h\r\n\r\nIt allow us to have long form description/discussion of their values.'
4967,121013304,b'Fixed.'
4967,121013780,"b""Let's remove TYPE.\r\nI'm inclined to allow cycles/100 to reduce the transition pain for the profiler team.\r\nActually. @rodrmoya, does the profiler passes `cycles/100` or just `100`?\r\n\r\n"""
4967,121014131,b'fixed'
4967,121014570,b'Removed the docs and printing a warning when used.\r\nI agree we should change the code to always unlink before opening.'
4967,121014613,b'Comment removed then :)'
4967,121014689,b'added'
4967,121014935,"b""I added the option, I'll remove the env var. It's for internal usage, so no big deal.\r\n\r\nIf really needed, we can add something like MONO_ENV_OPTIONS."""
4967,121015053,b'done'
4967,121015122,"b""We should, I haven't come around doing it. Will do it next."""
4967,121015223,b'good catch!'
4967,121015295,b'Fixed'
4967,121211397,b'Done'
5009,121502825,"b""This looks wrong, we're inc without taking a lock and checking if it's valid."""
5009,121502916,b'This looks like the wrong place to do it.'
5009,121503104,b'This should be moved to managed.'
5009,121503278,"b'The ref+check should be done here, not in the icall.'"
5019,121539737,b'Tens of thousands events.'
5019,121539850,"b""It's ok if we don't ship it anywhere but desktop for now."""
5011,121582887,"b""Yeah, I'll fix it."""
5019,121760269,"b""@marek-safar The problem is a lot more complicated.\r\n\r\nThe log *must* be sequentially read, performance tanks otherwise, even on SSDs. Random seeking kill all forms of buffering.\r\n\r\nEvents must be buffered until we reach a sync point and at that point we sort them. Using value types for the decoded payload would be horribly inefficient as events have an unbound max size or we'd be forced to decode them twice - and the second time would require seeking.\r\n\r\nI don't know what you mean by sort at insertion time, there's no inserting time. If you mean at decoding time. That's even more inefficient that sorting at sync points. Remember, we don't report events until we reach a sync point.\r\n\r\nFinally, APIs have being using FlyWeight objects since the dawn of time, as long as it's well documented, I think it's fine.\r\n\r\n"""
5019,121760717,b'Segmented arrays have quite slower access times. Why not simply reserve 10k as size and recycle it across decoders?'
5027,122029990,b'done'
5009,122053612,"b""inc/dec being atomic doesn't protect against use-after-free without locking when reading.\r\n\r\nIncrementing the refcount of a handle is only valid in 2 scenarios:\r\n1)you hold the handles lock - or whatever lock protect the table\r\n2)the handle was already inc'd in code leading to the current one.\r\n\r\n"""
5009,122054428,b'This whole problem goes away if we increment the ref count correctly'
5037,122069678,"b""Shouldn't this use the same mechanics as mono_threads_join_threads ?"""
5051,122505476,"b""Shouldn't we take the opportunity to convert this icall to new style that has a `MonoError *error` argument ?"""
5051,122506039,"b'This change doesn\'t belong to a PR named ""Unify WaitHandle.Wait{One,Any,All} icalls""'"
5051,122506479,"b""I understand the reasoning for removing handles cleanup, I don't know know about this one.\r\n\r\nBesides that. The commit messages for both removals are crap, they *must* state the reasoning behind the removal.\r\n\r\n"""
5047,122507131,"b'It doesn\'t evaluate as we can see from the build breakage of all non OSX targets:\r\n```\r\n\r\nconfigure: error: The autoconf-assigned value of $cross_compiling is currently ""maybe"", but Mono only understands the values ""yes"" and ""no"". Try adding an explicit --build option, such as ""./configure --build=\'./config.guess\'"", instead of leaving configure to autodetect.\r\n/media/ssd/jenkins/workspace/test-mono-pull-request-arm64/scripts/ci/babysitter: Test suite terminated with code 1, and suite cannot report test case data. Halting.\r\n```'"
5058,122783215,b'Nice cleanup.'
5058,122783471,b'We should add a constant in gc.h for an invalid handle.\r\n\r\n'
5058,122783832,"b'Ugg, how we let this leak into here :('"
5063,122808063,"b""This doesn't map well with the runtime difference between Assembly and Image.\r\nIt could lead to weird semantics in the future.\r\nCouldn't we add a Image* instead?"""
5063,122808635,b'This change in the format was not documented.'
5087,123421728,b'This change is kinda weird.'
5092,123563862,b'Would it be possible to move coverage info to a separate pass?'
5088,123592629,"b""We'll have to write a document on the old->new mapping doc for the next release."""
5090,123593548,b'This should be documented on the v14 changes.'
5124,124333498,b'This is racy.'
5037,124374345,"b'I mean using that very thing, but replacing pthread_join with WaitOne'"
5101,124924882,"b""What's the purpose of this event?"""
5101,124925015,"b""This is a new event, what's the reasoning behind it?"""
5101,124925378,"b""This is disabling the managed allocator, doesn't this PR enable the use of an instrumented one instead?"""
5101,124925422,b'Event ordering changed. Bug or ok?'
5101,124925844,b'This change is unnecessary.\r\n\r\n'
5101,124925897,b'This change is unnecessary.'
5101,124925912,b'This change is unnecessary.'
5101,124925998,"b""This is a new event, what's its use?"""
5101,124926057,b'This hack still necessary?'
5101,124928166,"b""We need to document we're dropping --profile:default"""
5101,124929066,"b""Can't reduce this to a single conditional?"""
5101,124929454,b'This should first check whether enter/leave is enabled.'
5101,124929614,"b""Shouldn't we check whether coverage was enabled at all?"""
5101,124929841,b'Wer should document this to being removed as well.'
5101,124930721,"b""This function should return a bool if it's executed too late or there's a reason why the runtime can't enable it."""
5101,124930783,"b""Is returning a bool the appropriate solution? It doesn't allow us to communicate why it failed.\r\n\r\n"""
5101,124930992,"b'This allows the counter to be positive while no callbacks are available, which is ok.'"
5101,125077554,b'Oh! This is boehm. \xf0\x9f\xa4\xa6\xe2\x80\x8d\xe2\x99\x80\xef\xb8\x8f \r\n'
5101,125077740,"b'Right, is it something worth fixing?'"
5101,125077935,"b""You're right, a single cond would break how the API is supposed to be used.\r\n"""
5154,125148557,"b""Won't this break mono_w32handle_register_ops ?"""
5172,125671409,"b""I'll fix the typo once the build finishes."""
5175,125761966,b'This signal handler should use SA_RESTART.'
5175,125762089,b'And perhaps is should use the signal chaining machinery from mini?\r\n'
5175,125762834,b'I believe we remove this field and use `signalled` in processes_cleanup.'
5175,125763421,"b""We should document that mono_gc_finalize_notify  mono_coop_sem_post are async safe.\r\nWe should save/restore errno around the signal handler, we've ran into issues when the handler changing it."""
5177,126563460,"b'Yeah, in theory we could bundle the type in the ref.\r\nPart of this change is to catch issues related to the lifecycle of the 2 variables.'"
5177,126563586,"b""It's weird, but kinda makes sense, reading the same var twice would yield different results.\r\nWould renaming it to something more sensible address this?"""
5126,127545695,"b""I did it out of completeness. Boehm doesn't really matter."""
5126,127553334,"b""How so? I don't think they use mono_gc_register_root directly."""
5126,127553808,"b""I wonder if it matters, the distinction today exists as each get a separate pseudo-address when their roots get registered.\r\n\r\nGiven that the vast majority of C# users don't know that critical finalizers exists, I think it's ok to keep them all on the sabe basket until it turns to be an issue.\r\n"""
5126,127554592,"b'garbage, removed.'"
5126,127554743,"b'No, it uses g_malloc.'"
5126,127555366,"b""yes, it's messy. I'll see if I can just pass in a void*"""
5126,127555462,"b""During attach/detach all goes. It's defensive programing. :("""
5126,127558823,"b""Maybe they use in a sneaky way, I'll check more carefully before merging."""
5126,127564369,b'Fixed.'
5126,127564431,b'Fixed'
5126,127564443,b'Renamed'
5126,127564453,b'Fixed'
5126,127564459,b'Fixed'
5126,127564465,b'Fixed'
5126,127564480,"b'Yes, reorganized'"
5126,127564504,"b'Odd, but fixed'"
5126,127564528,b'fixed'
5126,127564536,b'Fixed'
5126,127564558,b'Done'
5126,127565333,b'Fixed the signature'
5224,128046552,"b""I'm confused on this, what would be a bette replacement? `my_profiler` ? """
5274,130018693,b'How does this feature interacts with AOT?\r\n\r\n'
5274,130018906,"b""Files need to be unique across the runtime as some targets can't handle this.\r\nWe had to do some renaming in the past because of this."""
5274,130122526,b'How do I use it with AOT?'
5323,131702937,"b""HAVE_xxxx macros should only be defined by configure.\r\n\r\nIt's ok to check it here, but use a different name prefix, like USE_xxx.\r\n\r\nAdditionally, there should be a comment on why this is being checked.\r\n"""
5323,131703730,"b'If we are to trust the docs, this is ok, as buff would alternatively point to an immutable buffer.'"
5331,131772131,"b""I think this is the wrong level to add locking, it's too fine grained.\r\nThere's the expectation that setters don't take lock. The COM one is doing it, but shouldn't.\r\n\r\nBesides that, it's missing locking comments.\r\n"""
5355,132790556,"b'fixed, used hex literals and explained what the tests checks and how.'"
5355,132790572,"b'no good reason, removed.'"
5355,132790639,b'fixed'
5382,133359152,"b'Good point, glib.h is part of verify.h since forever thou.'"
5382,133374921,b'We had/have users of the verifier outside of mono.'
5390,133786680,"b'good point, that removes an useless allocation.'"
5404,134065783,"b""Shouldn't this use MONO_EMIT_NULL_CHECK ?"""
5406,134321408,"b""Nop, the bug is calling a ctor with an initialized this pointer.\r\n\r\nOnce you call the base constructor, the this pointer goes from uninitialized to initialized and, that point forwards, you can't call other ctors.\r\n"""
5415,134356286,"b""Yeah, probably. Good thing it's not particularly useful, given dynamic loading is not supported at this stage of the port."""
5415,134565485,"b""We'll probably have to change this later to be `--enable-host-wasm`  `--enable-target-wasm` to support AOT."""
5415,134567122,"b'Anyhow, documented the current one.'"
5415,134567165,b'Fixed'
5037,134863321,"b'This is wrong, the WaitOne should respect the timeout of the icall.'"
5452,135382930,"b""Shouldn't we align to 8 bytes here? Aligning at 4 we still risk cross a cache line """
5490,136667334,"b'This is wrong, dotnet checks for a specific amount of bytes available.'"
5490,136667466,"b'This is not correct, even on platforms that support growable stacks (windows) they have a bounded max size and we compute that in mono_thread_info_get_stack_bounds'"
5535,138139197,b'Which one is supposed to be thrown? FNFE or MyExn?'
5559,138682260,b'Must update doc string to mention locking changes.\r\nThis check must be G_UNLIKELY'
5559,138685188,"b""I'm concerned about a lot of potential extra work we might be doing in mono_class_setup_fields due to this.\r\nDoes it impact perf of a typeload heavy test like csc compiling corlib?\r\n\r\n"""
5616,140883384,"b'This looks like the wrong exception, how did you come to use it?'"
5616,140883513,b'Why does this needs to be an IL test?'
5570,140886666,"b""This is racy. Checking if the handle is valid before it's ref'd is wrong.\r\nA handle could be dec'd to zero and freed in between and we end up with undefined behavior.\r\n\r\n"""
5433,140889614,"b""I don't get why we need 3 APC queues, can't we get away with a single one?"""
5570,141126436,"b""What I mean is that checking anything about a handle before inc'ing it is racy and broken, no point in doing it.\r\n\r\nThe problem comes from what happens in the follow scenario: (`a` and `b` are threads)\r\n\r\nhandle 0x1 starts with RC == 1\r\n\r\n`a` calls mono_w32handle_lookup_and_ref on handle 0x1, checks that it's valid - it's valid\r\n`b` decs handle 0x1 and clean up it.\r\n`b` allocs a new handle and reuse 0x1. It inits everything all the way to the RC.\r\n`a` increments handle 0x1 RC, which is one, to two and returns TRUE\r\n`a` uses a half inited handle and shit happens.\r\n\r\n"""
5652,141483909,b'The BCL way of handling this is to use a SafeHandle.'
5616,141681226,b'C#'
5659,141986296,"b""It doesn't matter, those indexes don't leak anywhere else."""
5740,143525956,"b""what's this 3rd value?"""
5746,143874019,"b'No, functions that have ternary return state are clearly labeled so. IE, if `field_type == NULL` error must be set.\r\n\r\n'"
5768,144069183,"b""We should concat the parse error to the mono_error_set_argument below, shouldn't we?"""
5768,144070627,"b""I'm wondering if we should adopt the same idiom of MonoError with MonoTypeNameParse.\r\nIE, we always init it to a state that signals no free'ing is needed.\r\n\r\nThat would simplify a lot of the usage within the runtime.\r\n\r\n"""
5786,144671741,"b""Won't LLVMArgGsharedvtFixed and LLVMArgGsharedvtVariable be covered by the previous check?"""
5787,144906777,"b""This looks wrong, a *Builder should not be creating things, that's for the concrete versions in SR."""
5787,144907121,b'How does this work with SRE defined cattr? How does it behave in case of an open TypeBuilder? How does it behave in case of a closed TypeBuilder?'
5787,144907257,b'How is this supposed to behave in case of a TypeBuilder/ConstructorBuilder?'
5795,145003741,"b'How about other cases for failure of loading debug info, specially if --debug was passed?'"
5851,146614512,"b""Can't we avoid opening `/dev/random` if getrandom is available?"""
5920,148350889,"b""This is capturing a long more than just the GTD.\r\n\r\nWhat about open generic instances with arguments from other types? \r\n\r\nThis code contradicts the comment, it's not checking it the gparam belong to the GTD either. And it's doing it over method gparams.\r\n\r\n"""
5912,148351629,"b""It would, but that would require us to do ant's job which, at that point, clear could just be a `git clean .`."""
5912,148351670,"b""I'll fix that in the follow up PR"""
5924,148682035,"b""The script was a lot more convoluted before. I'll merge."""
5924,148682091,b'cuz the other wasm targets require their own toolchains.'
5924,148682392,"b""There's a reason for this.\r\nThere are 4 more runtime configs coming down the line: mini aot/runtime, llvm aot/runtime.\r\n\r\nThis is the only one ready for merging and I feel like keeping the bits for the others made sense."""
5941,149180252,"b""What's the culture oblivious alternative for string interpolation? The string comes from the runtime."""
5894,150064086,"b'This is a lot nicer than having the sdk build go to that dir and a  ""make PROFILE=xxx""!\r\nI\'ll apply this to wasm as well.'"
5894,150067831,"b'This allows only a single test assembly per app. Why is perfect for local testing. OTOH, which XTC testing, having a single app makes it easy to manage execution and results collection.'"
5894,150068299,"b'We should schedule work to move mini-test-runner.cs and the build rules to mono/mini and have it being built just like the BCL tests - IE, same targets and file names.'"
5894,150069403,b'This should be later moved to configure itself.'
5972,150075760,"b'Did you check that interfaces_inited, has_finalize_inited, fields_inited and has_failure are all modified with the loader lock held?'"
5972,150076087,b'Missing a mono_error_cleanup.'
5972,150079500,"b'This will recompute the weak layout of base types multiple times and this could be quite inefficient.\r\nSince we compute the layout of the parent type first, we could just check klass->has_weak_fields and bootstrap from that bitmap instead of doing all of this heavy weight lookup.'"
5972,150081361,"b'This is quite inefficient. The member ref table can be as big as 10x of the typedef table.\r\nWe should first scan the typeref table for a type in corlib or ""Mono.Runtime.Testing"" assembly before delving into the memberef table.\r\n'"
5972,150081563,b'This check is assumes that WeakAttribute will only have one constructor. This must be documented in the type definition otherwise things will magically break for no good reason.'
5972,150081895,"b""Is a hashtable the right data structure for this? Couldn't we simply use a sorted array of fields?\r\nIt would be both more memory efficient and reduce the number of lookups during metadata build up to a single binary search."""
5972,150082325,"b""Boehm still supported, we can't just ignore it."""
5972,150082455,"b""Can't null-gc behavior be of just asserting?"""
5972,150083157,b'This is wrong. An old gen object might have a weak field pointing to an young gen object that got promoted.'
5972,150083299,"b'This is wrong, the object can move and we must update the value in the gchandle table'"
5972,150083593,"b'This is wrong, since weak fields are not scanned as part of remset processing, we must scan all of those objects.'"
5972,150088602,"b""How will this interact with AOT cached info that won't call mono_class_layout_fields for cached classes?"""
5972,150088671,b'How will this work for generic instances?'
5972,150089174,b'How will this handle a struct with a weak field?'
5972,150090410,b'We should embed the bitmap at the end of WeakBitmapData and avoid the extra allocation and indirection.'
5972,150091315,b'We must check if the object moved and update the field.'
6009,150977292,"b""This is a convergent leak, it's fine."""
6034,151777574,b'What is this trying to solve? '
6043,151813790,b'This would be horribly complicated to do it with C preprocessor. But doable'
6043,151813981,"b""Unfounded, this runs just fine on chrome. We might have to do other things to be able to run this on browsers and not on D8, as it's currently the case."""
5972,152363918,b'A class can have multiple weak fields.'
5972,152363992,b'why the readonly flag matters for this?'
6043,152378708,"b'The new codegen script could use better docs and make target, though.'"
6043,152430667,b'fixed.'
6043,152430678,b'fixed.'
6043,152430720,b'Done that and the code now is a lot simpler.'
6043,152430740,b'fixed.'
5972,152431398,"b""This PR doesn't include any form of error handling for bad field configurations. It's left for the C# compiler to eventually do it.\r\n\r\nA readonly weak ref will work as advertised, only inited in the constructor and eventually zero'd when the object is gone. It's weird but kinda makes sense?\r\n\r\n\r\n"""
5972,152431992,"b""There's still the issue that we're iterating over the parents multiple times.\r\nThis info should be cached in class and not recomputed multiple times for the same class.\r\n\r\nPlus, this breaks SRE if it has a parent with a Weak field.\r\n\r\n"""
6034,152663351,b'Why do we need this?'
5972,152663878,"b'Hey Marek,\r\n\r\nThis PR is not the right medium to discuss semantics and scope. I support us discussing it all just not here.\r\n\r\n'"
6034,152666120,b'Is `sbyte[]` castable to `IList<sbyte>` and `IList<byte>`?'
6034,152692792,"b""@lambdageek  The problem is that mono returns the same underlying type for all Enumerators while dotnet doesn't. This is a tech debt we need to address on our end eventually.\r\n"""
6115,153570539,"b'Interesting change, cuz the old code was incorrect.\r\nMONO_PROFILER_RAISE uses hazard pointers in the same way as mono_thread_info_lookup, so whatever we need to be protected would be overwritten.'"
6115,153571329,"b'If this keep happening frequently, we could return a dummy MonoProfilerThread instead.'"
6115,153572174,"b""Does it make sense to have thread_exited introduce a new callback typedef while thread_stopping doesn't?\r\n"""
6122,153572772,b'How are those signatures computed?'
6122,153574869,"b""Why can't this be computed by the AOT compiler?"""
6118,153577480,b'CAS on managed is equally efficient.'
6118,153577645,"b'This is an icall on a fast path, no reason to do it.'"
6118,153577801,"b""This will force a bucket of stuff to be brought in even when we don't need them."""
6118,153577878,b'Formating damage'
6122,153593203,b'We should then require all embeders to annotate all managed functions they plan to call with a cattr we can look for during AOT. Similar to how the reverse pinvoke one works.'
6123,153618374,"b""I agree with you. Ideally mono_exception_create_missing_method_message would be inlined into mono_error_set_method_load.\r\n\r\nWhat I don't like is having all that metadata code in utils. What if that function lived in metadata/exceptions.c? It would call a simplified version in mono-error.c\r\n\r\n"""
6123,153931304,b'How about we split this so the low level code lives in utils and the high level formating code sits in metadata?\r\n\r\nIE:\r\n\r\nWe have `mono_error_set_method_missing` in metadata/exception.c that does all formating and ends up calling `mono_error_set_specific` (or whatever) from utils/mono-error.c?\r\n'
6126,153932122,"b'uggg, I had stashed some random changes that unfortunately has the fix for it :/'"
6126,153932284,"b""Yeah, that's missing from this PR, I got some fixing to do here anyways."""
5964,153932883,"b'Nitpick, how about moving the cast to the caller side?'"
5964,153932940,b'spelling: Incl*u*ding.'
5964,153933604,"b""Shouldn't this be a CAS loop?\r\nCAS is allowed to optimistically fail and return the old value.\r\nBeyond that, what could cause this CAS to fail?"""
5964,153934717,"b""Please document the intended state machine for those 3 states. This makes it possible to validate your design separately from the code.\r\n\r\nBy that I mean something like this (mind that the example purposefully don't try to be correct):\r\n\r\nThe initial state is always NONE\r\n\r\nWhen a thread detach the transition diagram is the following:\r\nNONE -> PENDING (action XX happens)\r\nPEDING -> ?? (action YY happens)\r\nADDED -> ERROR (this is an invalid transition because X, Y and Z)\r\n\r\n\r\n"""
5964,153936076,"b""Doesn't mono_os_cond_timedwait handle MONO_INFINITE_WAIT correctly?\r\n\r\nThe infinite timeout case doesn't handle spurious wakeups and bail out without checking the result.\r\n\r\n"""
5964,153936364,b'Mixing 32 and 64bits types.\r\nComparing signed with unsigned types.\r\n\r\nWaiting but not checking the result of the wait.\r\n'
5964,153936456,b'Why is this using non coop primitives?'
5964,153937559,b'How many waiters are we expecting for this cond var?'
6122,154523033,b'Absolutely but this setup is really fragile.\r\nBCL + SDKs should not be manually curated.'
6219,156173712,"b'Could we move this to mono-context as a macro that is defined when MonoContextSimdReg is present?\r\nIE, have it define `MONO_HAVE_SIMD_REG` and this code consume it.'"
6384,159479318,"b""We're adding MonoError but keeping it ok when nothing is found.\r\nThis non-conforming behavior (ok and null return) must be either addressed or documented."""
6384,159479858,"b""I believe that klass->methods can have null entries due to loading errors even though we didn't fail the class.\r\n\r\nWe should either check/fail or assert around that.\r\n"""
6413,159935671,b'The problem of using a high level lock is that all callers must be audited to be loader lock safe. And this turned out to be wrong.\r\n\r\nUsing the loader lock should always be frowned upon due to its auditing complexity.\r\n\r\n'
6419,159965362,"b'Since this function pointer is optional in the structure, it must be part of the version number/string.\r\n'"
6419,159965594,b'How about if  interpreter provides a function that instals itself against the runtime it was linked against?'
6018,161033231,"b""Misc execution related logging. It's used in this PR to log shutdown messages."""
6425,161090511,"b'Damage, let me remove it.'"
6425,161091453,b'Fixed.'
6425,161092040,"b'This is to make the targets that depend on it to be always reevaluated. IE, make them behave just like PHONY target.\r\n\r\nThe bcl test suite targets must be PHONY so we get proper dep tracking by the nested make invocation.\r\nThis makes the dev cycle nicer as I can edit the test suite and just type `make run-foo` and not have to clear or touch files.\r\n\r\nThe alternative to this trick is to rename those targets from actual files to proper PHONY targets. Which I find unfortunate, as the actual file being generated gets obscured.\r\n\r\n'"
6018,161287486,b'The runtime needs to be linker/bcl profile resistant.'
6481,161289142,b'Our coding convention calls for all args in the same line.'
6481,161289176,b'line damage'
6481,161292106,"b'This is a generic string conversion, it should go into object.c'"
6481,161292327,b'It should be mono_string_new_wtf8_checked'
6501,161314789,"b'I agree with Vlad here, the second sgen_is_object_alive call must go too.'"
6488,161316438,b'not green. Ooops'
6488,161316525,"b'sounds good, will make the change.'"
6488,161316565,b'\xf0\x9f\xa4\xa6\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f '
6267,162375374,"b'Malloc failure resiliency is not practical on Linux cuz it only happens due virtual memory exaustion and, at that point, it\xe2\x80\x99s unrecoverable and the system is already busted.\r\n\r\n'"
6903,167377536,"b""Handle'izing the guts of object allocation might not be very productive."""
6903,167377639,b'Should be G_UNLIKELY'
6903,167377660,b'Should be G_UNLIKELY as well.'
6833,167378387,b'We lost this assert.'
6874,167642821,"b""I don't think we want mono_array_set(_fast) to be expressions.\r\n"""
6018,168014520,"b""Yes, it's called once per domain by the runtime."""
6018,168014626,b'To match access of DoUnhandledException'
6018,168015246,"b""It's on the linker files, but there's no downside on making the runtime more resilient on missing optional features."""
7012,168248502,"b""We shouldn't store then on each cmod, but change MonoType to have an optional cmod container.\r\n\r\nIE, change MonoType to this:\r\n```c \r\nstruct _MonoType {\r\n\tunion {\r\n\t\tMonoClass *klass; /* for VALUETYPE and CLASS */\r\n\t\tMonoType *type;   /* for PTR */\r\n\t\tMonoArrayType *array; /* for ARRAY */\r\n\t\tMonoMethodSignature *method;\r\n\t\tMonoGenericParam *generic_param; /* for VAR and MVAR */\r\n\t\tMonoGenericClass *generic_class; /* for GENERICINST */\r\n\t} data;\r\n\tunsigned int attrs    : 16; /* param attributes or field flags */\r\n\tMonoTypeEnum type     : 8;\r\n\tunsigned int has_cmods : 1;  /* has a cmod appended at the end */\r\n\tunsigned int byref    : 1;\r\n\tunsigned int pinned   : 1;  /* valid when included in a local var signature */\r\n};\r\n```\r\n\r\nThen have this:\r\n```c\r\ntypedef struct CustomModContainer {\r\n   int count;\r\n   MonoImage *image;\r\n   MonoCustomMod modifiers [1]; /*the actual size of this array is count*/\r\n}\r\n```\r\n\r\nYou'd be able to fetch it using something like this:\r\n```c\r\n\r\nCustomModContainer*\r\nmono_type_get_cmods (MonoType *t) {\r\n  if (!t->has_cmods)\r\n    return null;\r\n  return (CustomModContainer*)(((char*)t) + sizeof (MonoType));\r\n\r\n}\r\n```\r\n"""
6934,168576568,"b""Can't we check for clock_getres then?"""
7193,170041222,"b""Yes, WebAssembly is single threaded for now. There is work to make it multi-threaded, but that's years away from having browsers shipping."""
7204,170392242,"b""There's no need for this. Use MONO_DEBUG"""
7204,170392372,b'Unrelated'
7204,170392403,"b'noise, unrelated.'"
7244,170761975,b'That would not handle failures during `git clone` of depot_tools or v8 build failures.\r\n\r\n'
7155,170777051,"b'This is wrong, this must use a release store.'"
7155,170777282,b'This function is MONO_API. Do you know the reason? Did you check whether the SDKs use it?'
7131,170784238,"b""mono_object_handle_pin_unbox is pretty slow, as it requires a GC handle, can't we work with something else here?\r\n\r\n"""
7131,170784395,"b""This is killing a fly with a rocket, we're creating/destroying a GC handle to read a single word.\r\n"""
7131,170785244,"b'@lambdageek This is analogous to reading a field, so we should offer something similar to MONO_HANDLE_GET that does the job of copying non-ref bytes out of a handle. Could you work with Jay on adding such primitive?\r\n\r\nSomething as simple as this could work:\r\n```c\r\n#define MONO_HANDLE_UNBOX_COPY_TO(HANDLE, DEST, COUNT) do {\t\t\t\\\r\n\t\tMONO_HANDLE_SUPPRESS (memcpy((DEST), mono_object_unbox ((gpointer)MONO_HANDLE_RAW (MONO_HANDLE_UNSUPPRESS (HANDLE)), (COUNT)); \\\r\n\t} while (0)\r\n```\r\n\r\n'"
7342,171344606,b'We need to use open thread to ensure handle safety. '
7342,171344712,"b'Same thing, OpenThread is needed for safety.'"
7342,171345235,b'Where does this come from?'
7342,171379483,"b""This should be integrated into mono using a configure check. Something like this:\r\n```\r\n\tdnl **********************************\r\n\tdnl *** Check for getaddrinfo ***\r\n\tdnl **********************************\r\n\tAC_MSG_CHECKING(for getaddrinfo)\r\n\t\tAC_TRY_LINK([\r\n\t\t#include <unistdc.h>\r\n\t], [\r\n\t\taccess (NULL, 0);\r\n\t], [\r\n\t\t# Yes, we have it...\r\n\t\tAC_MSG_RESULT(yes)\r\n\t\tAC_DEFINE(HAVE_ACCESS, 1, [Have access])\r\n\t], [\r\n\t\tAC_MSG_RESULT(no)\r\n\t])\r\n```\r\n\r\nThe result would then define the a HAVE_ACCESS variable if it's what we need to use.\r\n"""
7342,171380001,"b""This is a debug macro, it's fine either way."""
7342,171381277,b'The issue is around safety. I think supporting old sdks is a good thing for us to have.'
7342,171381952,"b""The hazard here is that the handle might become asynchronously invalid.\r\nUsing OpenThread ensures we increment the handle ref count before using it.\r\nThis is not an issue on unix because we have to pthread_join to free the handle.\r\n\r\nI think your solution should of dup'ing on mono_threads_suspend_register should work.\r\nI'll let @lateralusX weight in, but I'm good with how you solved it.\r\n"""
7351,171442229,"b""Ugg\r\n\r\nProperty bag setters don't need any locking."""
7351,171443439,"b""Same here, locking shouldn't be needed, just a store barrier."""
7352,171444193,b'Maybe PR/locally tests this with a g_error instead and see if anything pops up?'
7354,171444688,b'This is not a maintainable hack.  We should eliminate those bitfields we need to address.\r\n\r\n'
7375,171921029,b'Do we need this random constant on the header?\r\nWe should wrap it under a `mono_marshal_get_strelemref_wrapper_name` '
7375,171921762,b'This looks like the wrong way to split MethodBuilder.\r\n\r\nWhat if we spilt it along the lines of method header builder and method body builder?\r\n\r\nThis way we can link the whole body builder part into the extra lib.\r\n\r\n\r\n'
7423,172699113,"b""Yes, it will.\r\nOTH, it ensures progress can be made even if slow enough. Do you think it's not worth it?"""
7482,173021481,b'We should use MonoDefaults for this.'
6907,173084659,b'It makes no sense to create a GC handle for a one shot operation that has no safepoints.'
6907,173261125,"b'I think this is fine. FYI, what the rest of the runtime does is use variadic debug print macros. IE:\r\n\r\n```c\r\n#ifdef DEBUG_ICALLS\r\n#define DEBUG_PRINTF(...) do { printf( __VA_ARGS__); } while (0)\r\n#else\r\n#define DEBUG_PRINTF(...) do { } while (0)\r\n#endif\r\n```'"
7520,173334353,b'Where are the configure.ac changes to detect all this new stuff?'
7524,173528737,b'This is jumping to the taken branch of an `if` statement. How feasible is to move all the code for CEE_CALL / CEE_CALLVIRT to a separate file and properly factor into a saner set of functions?'
7524,173529363,b'Another thing to look into is whether we can move all backends to OP_TAILCALL to simplify this code.'
7520,173572625,"b""AC_TRY_RUN doesn't work with cross compiler and we'd have to special case all the new checks there as well.\r\n\r\n"""
7561,173850140,"b""Shouldn't we just change `mini_emit_calli` to call `emit_llvmonly_calli` when `cfg->llvm_only` is true? There are a few other callsites in method-to-ir.c that don't use `emit_llvmonly_calli'."""
7579,173932048,"b""The unbox trampoline is present on all arches, it's used when you do an interface invoke into a boxed value type.\r\nA boxed value type is represented in memory all of its fields after an object header.\r\n\r\nValueType methods are compiled with `this` as a byref to the first field.\r\ninterface invokes are compiled with `this` as a pointer to the object header.\r\n\r\nThis means we need an unbox trampoline that essentially does `this += sizeof (MonoObject)`.\r\n"""
7508,173936416,"b""Why are you using valloc for something that can be malloc'd just fine?"""
7508,173936598,b'This page-table-size trick is wrong and will waste a lot of memory on systems will 64k pages like aarch64.'
7508,173936870,b'mono_valloc ensures memory comes out zeroed. This is not needed.\r\n'
7599,174274088,"b""Can't his be\r\n```\r\nif (mono_thread_set_self_interruption_respect_abort_prot ())\r\n   mono_thread_info_self_interrupt ();\r\n```\r\n?"""
7599,174274602,b'What about renaming `mono_thread_set_interruption_requested` to follow `mono_thread_set_self_interruption_respect_abort_prot`? \r\n\r\nThis would allow us to get rid of the weird `_flags` variant.\r\n\r\n'
7832,177197271,"b""I'm confused, how is the signature not compatible here. Both are 'int32(string)`."""
7832,177413344,"b""Kinda odd we're doing it for dynamic methods here, this doesn't feel like the sort of constraint they need to violate -  it's usually just visibility."""
7832,177413561,b'oh! I though this was about the function pointer and the calli signature.'
6700,177776294,"b'We had two potential users in the past. But, beyond that, we do want to keep sgen as independent as possible.'"
7887,177926056,b'Fixed'
7907,178436110,"b""It's ok to fail visibility checks for broken code. A class can have nested public visibility and not be nested. I think there's even a check for that early on."""
7941,178543734,"b""@vargaz wouldn't HANDLE'izing those functions produce a net loss of perf for something they don't need? IE, none raise exceptions or take ref pointers."""
7941,178543995,"b""This signature doesn't match the managed signature."""
7941,178544040,b'This icall must null check `d`'
7941,178551428,"b""If managed was using a byref instead of a pointer, we won't need it as we emit caller side checks. That doesn't happen with pointers.\r\n"""
7941,178551946,"b""Looks like there's it's only used by Truncate and Round with locals, so it's just lousy code on their end but we should be safe."""
7932,178555619,b'Either way is fine.'
7887,178564360,b'Fixed.'
7887,178564502,b'Fixed.'
7887,178565147,"b""I don't think we should expose mono_runtime_set_execution_mode/MonoEEMode until needed.\r\nWe `believe` this is a good solution. So let's first see it through and then think on what to do with the public API.\r\n\r\nBut I see your point, my design will bomb if you compile with newer headers and try to run against older runtimes. Fixed it."""
7887,178565770,"b'oops, fixed.'"
7887,178648572,"b""Hopefully we'll just remove all boolean flags and this won't be an issue."""
7887,178667184,"b""Yes, I'd like, ideally, in the future, to pass it around instead of storing it as a global to handle things AOT'ing multiple configs."""
8005,179239433,b'Fixed'
8005,179239449,b'fixed'
8133,180221028,"b""Can we file issues on this? I didn't even knew we had disabled tests on iltests.il"""
8141,180305490,"b""what does this mean, that we use the smaller limit when AOT'ing with LLVM?"""
8226,181400738,"b""I like pushing the null check to the callees, I think it brings consistency with what we expect of C APIs.\r\nWhat I'm on the fence if wether we want to do it like this, expanding g_return_val_if_fail.\r\n"""
8224,181495391,"b'Well, those are the ECMA required values. The spec is a lot more strict than windows, apparently.'"
8224,181495829,"b""I think all compilers, but the managed C++ one, emits the ECMA values blindly.\r\nI agree that there's little value in keeping or removing them.\r\nI have no strong opinion on the matter, TBH."""
8286,182208641,"b""That would be unusually complicated due to make syntax, wouldn't it?\r\n"""
8318,182741083,"b""I assume this is needed because mono_class_get_checked won't return NULL for broken classes.\r\n\r\nThis change breaks the invariant that mono_type_get_checked will set an error if it returns NULL, we should avoid this as much as possible and explicit document those cases when unavoidable."""
8428,183792162,"b""I'm curious, why can't we emit box ops for those 3 cases? It would be nice to document the constraints."""
8428,183792600,"b""Hmmmmmmm, how does this handle longs on 32bits? Don't we need a OP_LBOX that takes as input the regpair?"""
8436,183800866,b'Is this still needed as the constant was moved to mini.h?'
8436,183801040,"b""Couldn't this const be shared with the one on mini.h?"""
8442,184782232,"b'So, JS is single threaded so this is not an issue today.\r\nEven later, with the multithreaded wasm proposal, the JS heap will only be accessible from the main thread.'"
8442,184782967,"b""This support code is only visible to the binding engine, users can't call it.\r\nThe only thing it's visible is call_method, cuz I exported it early, in the `BINDING__postset` part"""
8442,184783451,"b""It's going to be `Task<T>`.\r\n\r\nNotice that `task` is of type `Task` so the only possible outcome of `task.GetType () != typeof (Task)` is a subclass of it.\r\n\r\nWhat will happen in the case of a different subclass is that we'll throw an exception at runtime."""
8442,185011823,"b""Good point, I'll change the code to use a constant."""
8550,186201515,"b""I think we should make the case that this code should follow the principle of least surprise.\r\nIt looks like we should first check all general and plat-specific constraints and only then act on the value.\r\n\r\nI'm not suggesting we do it on this PR, but moving to this structure would make it easy to work with tailcalls.\r\n"""
8550,186201883,"b""Maybe it's the case we should not have the tailcall field in MonoCallInst and depend exclusively on MonoInst::opcode for whether to make it a tailcall or not."""
8690,188068152,b'We should rename MONO_CFG_HAS_ARRAY_ACCESS to reflect it has a bigger scope '
8691,188102807,"b""What's so broken with mono that we need this?"""
8691,188103708,"b""I'm not a fan of local labels inside switch cases. Maybe we can later move this out to a function?"""
8691,188104546,"b""I'm sorta in the fence on exposing the verifier to the JIT more than we need to.\r\nIs this due to the header shenanigans you added there?"""
8718,188402756,b'just remove it?'
8718,188404326,b'Could you benchmark if compilation times significantly change because of this?\r\nSomething as simple as compiling the whole of corlib (--compile-all) should do it.\r\nThis was a perf issue I hit in the past.\r\n'
8750,189267803,b'The problem is that those 3 enums are used deep in the breakpoint/single step code.\r\n\r\nLet me try to see how much would need to be shuffled around to move them back.'
8570,189371426,b'Makes sense to use ptrdiff_t then.'
8821,190664757,"b""I wasn't sure about this check and had to look around. We should extra this into a `mono_assembly_name_has_pubkey` and cleanup our code."""
8769,191441495,b'The problem I found with moving the whole struct is figuring out what fields I need to handle/init on the wasm side.\r\n\r\n'
8937,192423724,"b'This is our coding convention, not sure I want to deviate from it.'"
8937,192423898,"b'This was just code motion, I wanted to make it as identical as possible to facilitate review.'"
8912,194243287,b'We could probably go with higher values for some targets.'
9086,194377319,"b""Don't we need to intrinsify set_Item as well?"""
8912,194450137,"b""why didn't you use a gboolean for this var?"""
8912,194450562,"b'Since out_of_page is a macro argument, it should be surrounded by parenthesis. \r\n'"
8912,194450727,"b""You're passing FALSE above, we should do the same here."""
8912,194451200,"b""I'm not sure having this as a define is a good idea since there's a function call behind it.\r\n"""
8912,194451987,"b'Formating, we use do:\r\n```\r\nint\r\nmono_target_pagesize (void)\r\n{\r\n...\r\n```\r\nThis function is called from a signal so it must be audited + documented to be signal safe.\r\n\r\nThis means we need to audit the implementation of mono_pagesize to ensure they are signal safe as well.\r\n'"
8912,194452215,"b""Makes sense, let's keep it that way."""
9086,194461233,b'So with Span\r\n```\r\nSpan<int> span = ...;\r\nspan[1] = 10;\r\n```\r\n\r\nThe store is compiled to this:\r\n```\r\nldloc span\r\nldc.i4 1\r\ncall Span<int>::get_Item (int32)\r\nldc.i4 10\r\nstind.i4\r\n```'
9100,194731317,"b'Yes, I measured 8 and 32 with Roslyn and 32 was the best one.'"
9100,194731463,b'That would waste memory thou'
8912,194733458,"b""Let's just always use 4k as it's likely the smallest page size we'll ever encounter.\r\nIt's simpler and closes JIT/AOT behavior."""
9100,194914476,"b'What I meant was that I tried 8, 16 and 32. The winner was 16.'"
9114,195469373,b'Those tests would be better included in the corlib test suite. mono/tests is better for tests that must be standalone or require custom process setup.'
9114,195470499,"b""I'm not 100% sure of whether we need to keep this weird split on error detection.\r\nCan't we just have mono_win32_wait_for_multiple_objects_ex return a `MONO_W32HANDLE_WAIT_RET_FAILED_DUPLICATES`?\r\n\r\n@luhenry what do you think?"""
9137,195484913,"b""Shouldn't we add a g_assert to the other call to mono_internal_hash_table_remove?"""
9114,195587684,"b""Tests in mono/tests takes a LOT longer to run compared to the unit tests in corlib.\r\n\r\nPlus if you're making changes that are easily visible to C#, you should be running that test suite anyways.\r\n\r\n"""
9159,195730698,b'Could you review usage of this look and see if it really needs to be recursive?'
9154,195787872,"b""Don't we still need this null check?"""
9238,197205498,b'I think I need to update AOT patch serialization for this.'
9151,197283021,b'We can stackwalk because the interp has a shadow stack.'
9151,197283141,b'IDK why 7. @vargaz ?'
9151,197283294,"b'Yeah, prob should'"
9151,197283572,"b""Sure, but it shouldn't produce a warning cuz it's casting from `void*` which is ok by the C spec."""
9281,197920945,b'This should be done in cprop'
9307,198186535,"b'I tried this design in the past and its interaction with CPROP is really tricky unless you force something like you did, which is disallow `dreg != sreg1`.\r\n\r\nThis PR lacks the code that generates them.\r\n'"
9307,198188618,b'This must check for MONO_INST_INDIRECT as well. But this would only makes sense if we do it after we do extract/insert conversion.\r\n\r\nThis needs to be tested with other sources of indirection such as passing/return from functions and taking a ref to a span.\r\n\r\n'
9307,198189146,b'How about changing this to call `mono_load_membase_to_extract` and check if opcoce is `> 0`?'
9307,198189338,"b""I assume there's no need to handle nested structs?"""
9307,198189858,"b""Don't we need to add safegards to cprop and other passes to make sure they won't break this?"""
9307,198509110,"b'The issue is that MONO_INST_INDIRECT has the actual effect you\'re trying to catch here. I did cleanup usage of MONO_INST_VOLATILE a few years ago to only mean volatile and not ""address taken"".'"
9321,198512317,b'@vargaz it could an issue specific to gcc 7 in that it generates a code sequence that triggers the bug.'
9381,199139137,"b""There's no reason why we can't keep all implementations symmetric and move the unix code to mini-posix.\r\n\r\n"""
9381,199140201,"b""Yes, we don't need to have an impl or a forward decl in a source file."""
9370,199140730,"b'yeah, our logging story is not the best :/'"
9370,199140866,b'Fair enough. What would this callback look like? When would it be called?'
9402,199614840,"b""That's the diff line removing that line, it was moved to line 86"""
9443,200651663,b'can\xe2\x80\x99t we check this during transform?'
9443,200652275,b'Can\xe2\x80\x99t we check this during transform? What about using patching to remove the check after it\xe2\x80\x99s done?\r\n\r\n'
9443,200652466,b'Can\xe2\x80\x99t this be a perf issue?'
9575,202725176,b'When will MONO be not set?\r\nDoes managed handle EINTR?'
9575,202725608,"b""This description is wrong. SystemNative_Read doesn't do anything with symlinks."""
9530,202826063,b'Why is this only needed on windows amd64?'
9530,202826128,b'Makes no sense to throw ifdefs for his.'
9530,202826207,b'What ifdefing an enum out buys us?'
9530,202828212,"b'This change should not cause the code to behave differently.\r\n\r\nSimplified from mini.h: \r\n\r\n```\r\n#ifdef MONO_ARCH_SIMD_INTRINSICS\r\n#define MONO_CLASS_IS_SIMD(cfg, klass) (((cfg)->opt & MONO_OPT_SIMD) && m_class_is_simd_type (klass))\r\n#else\r\n#define MONO_CLASS_IS_SIMD(cfg, klass) (0)\r\n#endif\r\n```\r\n\r\nMeaning if `MONO_ARCH_SIMD_INTRINSICS` is not defined, the existing code will always execute the else branch and emit the same code as proposed by this change.\r\n\r\nAdditionally, 8dd6baee6e7f change to method-to-ir.c should use MONO_CLASS_IS_SIMD instead of adding a `#ifdef MONO_ARCH_SIMD_INTRINSICS`'"
9457,202829237,"b'This is really bad naming, mono_simd_decompose_intrinsic and mono_simd_decompose_intrinsics differs by a single letter and do different things.'"
9457,202829969,b'This function is not called anywhere.\r\n\r\nIt should probably check for cfg->opts and if simd intrinsics were actually used or not.'
9457,202830265,b'This should be changed to use MONO_CLASS_IS_SIMD instead of using an ifdef'
9457,202830824,b'Move this to mini-amd64.h and give it a symbolic name instead of this?'
9402,203068276,b'Oh! Just pushed the right fix for it.'
9611,203209502,"b""Since this is called by JS, which won't get a boolean, being explicit about values makes sense?"""
9611,203209582,"b""By won't I mean can't. wasm<>js can only marshal numbers"""
9476,203435197,"b""Why is this using g_hash_table_lookup_extended when it's not doing anything with orig_key and value?"""
9626,204124444,b'Good point.'
9626,204124461,b'Done'
9713,204885051,b'The dotnet_suppport.js file is missing.'
9746,205471854,b'This is probably wrong.\r\n\r\nFieldInfo is abstract and its implementation probably throws instead. \r\nThis should be on MonoField. \r\nYou should add a test that verify that this overriding is correct.\r\n\r\n'
9761,206878648,b'This is exposing structs from other subsystems here.\r\nThe casts should be on the use site instead.'
9761,206878789,"b'Those are types in metadata and sgen, they should not be in utils at all.'"
9486,206883922,"b'Dead comments, should be removed.'"
9486,206884025,b'SyncCS is gone in the native struct.'
9486,206884429,"b'This looks wrong, the thread state must be always updated.'"
9486,206885456,b'The runtime cannot use 64bits cas.'
9761,206948886,b'This is not the style we have in mono and this is violating basic layering.'
9819,206949563,b'No C++ allowed.'
9785,206951467,"b'This looks like dead code, rather stay with the extra line than this.'"
9914,207977045,"b""It's fine to allocate this queue on startup."""
9914,207977097,"b'alternatively, use mono_lazy.'"
9858,208020069,"b""It's usually good to always init out vars """
9837,208297587,b'Good catch!'
9999,209020638,"b""Because autoconf doesn't accept any wasm triplet and faking it as a linux variant made the changes even worse.\r\n\r\n"""
10020,209308375,b'this should use the HOST_ defines'
10020,209308597,b'This is should use HOST_ defines.'
10020,209308889,"b""AFAICT this won't work on iOS or watchOS. @rolfbjarne can you give us a more authoritative answer here?\r\n\r\n"""
10020,209309262,"b""Shouldn't this be a HAVE_DLFCN_H define? """
10020,209315512,b'We must not use RTLD_DEFAULT as it will cause us all sorts of trouble with embeders and fullAOT scenarios.'
10033,209444245,b'This is unwanted line damage'
10033,209444278,b'did you sort the functions by name?'
10039,209444490,"b'This looks wrong, it should be in the amd64 backend.'"
10033,209597847,"b""FYI, we don't do this sort of code shuffling in runtime code. We favor smaller diffs."""
10033,209598082,b'Jay is on spot. Larger changes that make it hard to review and reduce the value of history for no  good reason are to be avoided.'
10096,209985457,b'This should use a TARGET_SIZEOF_ define.'
10020,210076640,"b""We're not using `libc_handle` I don't get why are we dlopen'ing it."""
10102,210099487,"b""Shouldn't this use the new TARGET_ defines you added?"""
10152,210601019,"b'This should not be needed, we add `-d:WASM` in `mcs/build/profiles/wasm.make`.'"
10152,210601333,b'This should be private. We cannot add public members to BCL types.\r\n'
10152,210601863,"b'UG, I need to take the time to replace this fugly piece of code to use runtime.g.js :('"
10152,210602570,"b""Oh! Forgot one thing. We'll need to add GetHttpMessageHandler to the linker xml for System.Net.Http.\r\n@akoeplinger can you help us with this?"""
10152,210642212,b'It would be set by reflection.'
10140,210644739,"b""Won't the `mono_threads_is_hybrid_suspension_enabled` check preclude preempt suspend to be used?"""
10140,210646161,"b""I don't understand how this handle the case when we're only doing preemptive suspend."""
10140,210654718,"b'Now it makes sense. Yes, naming is bad.\r\nI guess once we find good names for the phases, this will be easily fixable to be `begin_suspend_XXX_phase`'"
10136,211266843,"b""It was crashing the AOT compiler, I'll remove it once its fixed."""
10090,211781698,b'This requires a bump to BCL or AOT '
10266,212499315,"b""Because I decided I don't want to add an offsets file for wasm. We discussed a thousand times about getting rid of those annoying thing and start to support a retargetable runtime.\r\n\r\nThis PR includes the beginning of that. It only does for alignment info and it only has info for wasm. I hope we eventually include all our targets in abi.c (or whatever we decide to use instead) and the offset files stop being a thing.\r\n\r\n\r\n"""
10266,212663220,"b""I'm fully aware of it.\r\nThis is what I needed so far, the rest will come later as part of the wasm AOT work."""
10266,212663571,"b""Those are workarounds for now to unblock further work. I don't know what we'll end up with.\r\nI rather not have any of those at all."""
10266,212663718,b'Fair enough. So I stopped being lazy and went with static initialization which does address this issue.'
10375,213854160,"b'IDK about having two variables aliasing to the same value.\r\nI think we should stick with a single one and emit casts in the very few places that needs it.\r\nAs you mentioned on slack, moving stack_start would fix most of this.\r\n'"
10464,214937726,b'Could we fix the spelling here later? `fee` -> `free`.'
10509,215991935,b'Just use the TRUE/FALSE constants.'
10509,215992233,"b""We shouldn't add classes here unless they are accessed from multiple places during execution."""
10537,216489857,"b""That's a pointless optimization as the success path will have the same amount of checks."""
10659,218451303,"b""Can't you just name `InternalMemcpy` -> `Memcpy`?"""
10636,218798034,"b""Addressed by Zoltan's latest commit"""
10703,219163343,"b""You can't resize a hashtable without rehashing it."""
10703,219163924,"b'Additionally, Ephemeron arrays are special and must be registered with the runtime in order to produce the desired effect.'"
10704,219171886,b'Let me fix that by [WIP/DONT MERGE] this PR'
10691,219172323,"b'No idea, this was done by @vargaz '"
10691,219174989,"b""Ok, I'll change to be `.stamp-$(4)-configure`.\r\nThis dep is needed otherwise building the win cross compiler by itself doesn't work."""
10691,219175390,"b'This dep is requires because the offsets file is generated by the configure of the runtime configuration.\r\n\r\nIE, `configure-wasm-runtime-release` produces the offset needed by `build-wasm-crosswin-release`'"
10691,219176127,"b'Ok, added'"
10636,219194037,"b""We'll probably keep the usage of CLI tools as a mono hacking only thing.\r\nwasm will ship with msbuild targets and tasks that will consume the linker as a library and not as a standard alone process.\r\n\r\nIf we're making consideration for customer usage, we must keep in mind that this is will be primarily used on windows.\r\n\r\n"""
10691,219524774,"b""Well, for some reason `configure-$(4)` is not doing what's supposed to because without this extra dependency `make configure-wasm-cross-win` fails because `wasm-runtime-release` was not configured.\r\n\r\nThis was after applying all the other changes you proposed.\r\n"""
10740,219602460,"b""notes! I'll address that as I add support for running individual tests with wasm."""
10691,219950557,b'Why are we deleting this file?'
10691,219951155,"b""How come we don't need this?"""
10793,220194567,"b""We can safe point while holding coop locks. That's why they exist."""
10691,220255361,"b""err, then there's something wrong with it."""
10896,221604650,b'Hard stack overflow should always abort. This will 99.999% lead to a secondary abort that will hide the actual issue.\r\n\r\n'
11013,223367534,b'Why 128Kb?'
11063,224045717,b'Won\xe2\x80\x99t that force users with cross disabled to provision mxe?'
11071,224805527,b'why?'
11012,226296903,"b'```suggestion\r\n * HANDLES(icallid, methodname, cfuncptr, return-type, number-of-parameters, (parameter-types))\r\n```'"
11012,226297754,b'It took me a bit to get what `* and Handle are implied.` means.\r\n'
11012,226297926,"b'```suggestion\r\n *   managed types are just MonoObject, MonoString, etc. `*` and Handle prefix are appended automatically.\r\n```'"
11012,226299127,"b""It's not self-checking as we don't do managed signature matching."""
11012,226299414,"b""Then let's not duplicate it."""
11012,226300548,b'Why do we need all this function duplication?'
11012,226303184,"b""I don't understand this, we said we'd switch to use an opaque `void*` for marshaling handles yet we're using the code for structs."""
11250,226471498,"b'hmmm, fair enough'"
10631,226647357,"b""Won't this introduce a race condition as well? We have to increment while holding the lock coordinating unload. """
10631,226648358,b'There seem to be a big share part of initing `MonoAssemblyByNameRequest`.\r\nHow about we extract it to a function?'
10631,226648533,"b""Why won't this race with the unloader since it's happening outside of the unload coordinating lock?"""
10631,226652602,b'Replace the gboolean with an enum or create a pair of functions (addref_pin / addref_nopin). This gboolean is not informative.\r\n\r\n'
10840,226985123,b'How about using nuget for Newtonsoft.Json?\r\n'
11291,226993739,"b""This is plain bad code.\r\nWe're littering `mono_load_runtime_and_bcl` with something completely unrelated.\r\n\r\nmono-random.c should have a `HOST_WASM` version that does invoke into this code, which should be a function by itself."""
11294,226994747,"b'This is a breaking change, since the struct is public, its size must remain constant.'"
11387,228523348,"b""We can't do that because gchandles are mutable cells.\r\nIt's valid to alloc a handle to `null` then set its value to something else and if we canonicalize this case, we'll break when someone mutates it."""
10703,228902685,"b'This will produce a correct enumeration of key-value pairs, but breaks the conditional liveness offered by CWT.\r\n\r\nIE, as long as the enumerator remains alive, nothing in the CWT will be collectible.'"
11310,232388663,b'yup'
11310,232391085,b'Users invoking the JS internals for debugger support is undefined behavior'
11310,232393101,b'The vast majority of messages are < 100 bytes. If anything it should be using buffer polling.'
7863,177823417,b'Done'
7863,177825027,"b'Before this change RuntimeType called `Activator.CreateInstance(Type type, bool nonPublic)` when a constructor has no arguments. After this change I needed a way to propagate the DoNotWrapExceptions flag, so I added this internal overload.'"
7863,177890461,b'I have removed my changes from the generated csproj file.'
6677,164265705,b'Apple doesn\xe2\x80\x99t currently use either `lld` or GNU binutils for its linker. Apple\xe2\x80\x99s linker is its own Open Source [ld64](https://opensource.apple.com/source/ld64/).'
19114,387369127,"b'Minor nit, but these could be just `g_strdup()` calls.'"
19273,395896168,"b'`result` is never read from, only attributed to.'"
19273,395896482,b'This memory mapping is never used.\r\n```suggestion\r\n```'
19273,395897101,"b'You might want to check these for possible errors -- for instance, if the file could not be unlinked (say, because another user owned it), and if `fopen()` fails to open the file (for the same reason), calls to `fwrite()` will be made with a NULL pointer.'"
19273,395897357,b'The indentation in many of these changes seem quite a bit off and do not match the surrounding code.'
19273,395897633,b'This memory is allocated but never freed; this pointer is never passed to any other function. Please allocate this in the stack instead to avoid the leak.'
19273,395898029,"b""You can initialize `FileHeader` with named initializers when it's allocated in `mono_enable_jit_dump()`; this way, this function can be removed since it's not used anywhere else:\r\n\r\n```c\r\nFileHeader header = {\r\n   .magic = JIT_DUMP_MAGIC,\r\n   .version = JIT_DUMP_VERSION,\r\n   ...\r\n};\r\n```"""
19273,395898756,b'Can you use `g_get_monotonic_time()` instead of defining this function?'
19273,395898907,"b'`record` leaks. Please allocate it on the stack (same idea for the header, removing the function to fill out the record, etc).'"
19273,395900109,"b""`mutex` is too broad a name to be the name of a global variable. Please make this static, too (so it's not visible from other `.c` files).\r\n```suggestion\r\nstatic pthread_mutex_t perf_dump_mutex = PTHREAD_MUTEX_INITIALIZER;\r\n```"""
19273,395900690,"b'`codeIndex` (renamed as `code_index`) can be a static variable inside `mono_emit_jit_dump()`, and be incremented inside the critical section protected by the mutex.'"
19273,395900738,b'```suggestion\r\n```'
19273,395900956,b'`codeIndex` needs to be incremented inside the critical section below (it is a shared resource between all threads). See comment above.'
19273,395907433,"b""Also, since stdio is being used to write to these files, there's a chance that the buffer is not flushed to the disk when the process ends. This might or might not be an issue; I'm not familiar enough with the mini-runtime. Might be a good idea to call `fflush()` and `flose()` in this file before `main()` finishes to avoid having truncated dump files if stdio had buffers large enough that they never got flushed to disk.\r\n\r\nAn option is to use file descriptors directly, and then using `writev()` to write each record; has more syscall overhead, but there's no overbuffering in mini-runtime."""
19273,395909462,"b""No need to use `g_new()` or add a cast; just define it in the stack and initialize it:\r\n\r\n```c\r\nJitCodeLoadRecord record;\r\n\r\nrecord.foo = ...;\r\nrecord.bar = ...;\r\n```\r\n\r\n(No need to free this afterwards if it's allocated in the stack like this.)"""
19273,395911053,"b'`gettid()` has only been recently given a syscall wrapper by glibc.  (If caching the PID, might be useful to cache the TID in a thread local as well.)'"
19273,398817241,b'Is this `mmap()` call needed?'
19273,398818300,b'Please use `#include <elf.h>`.'
19273,398818458,b'Is `mman.h` needed?'
19273,398818750,"b'Is `syscall.h` needed by everything that includes `mini-runtime.h`, or only by `mini-runtime.c`?'"
19273,398820366,"b'If the `fopen()` above fails, this `fwrite()` call will probably crash. Might want to check if the file was correctly opened by null-checking it.  (Other places look fine, as they null-check `perf_dump_file`.)'"
19273,398823350,"b""It looks for a R-X mapping of stdout? That's a really curious way of doing this...\r\n\r\nYou'll want to `munmap()` this in the cleanup function, then."""
19273,398824184,"b""Yes, but it's not used in the header. Only in the `runtime.c` file.  It should go there."""
19273,398825008,"b""Please move the `#include` to `mini-runtime.c`, then.  (In general: you want to include only where you need the definition of something.  In this case, requiring `syscall.h` is an implementation detail, so whoever includes this header doesn't have to also get all the definitions found in `syscall.h`.)"""
19273,399483230,b'I know for a fact that gettid() is Linux-specific.'
19273,399484404,"b'Ah, being `fileno(perf_dump_file)` makes a whole lot more sense! '"
19273,399706206,b'Minor nit: please name this `perf_dump_mmap_addr`.\r\n```suggestion\r\nstatic void *perf_dump_mmap_addr = MAP_FAILED;\r\n```'
19273,399706294,b'```suggestion\r\n\t\tmono_os_mutex_lock (&perf_dump_mutex);\r\n```'
19273,399706327,b'```suggestion\r\n\t\tmono_os_mutex_unlock (&perf_dump_mutex);\r\n```'
19273,399706399,"b'```suggestion\r\n\tif (perf_map_mmap_addr != MAP_FAILED)\r\n\t\tmunmap (perf_map_mmap_addr, sizeof(FileHeader));\r\n```'"
19273,399706604,"b'```suggestion\r\n\t\tperf_dump_mmap_addr = mmap (NULL, sizeof (header), PROT_READ | PROT_EXEC, MAP_PRIVATE, fileno (perf_dump_file), 0);\r\n```\r\n\r\n(`mmap()` will fail if `perf_dump_file` is NULL, but this seems fine.)'"
11943,239642520,"b'If we do something like this:\r\n```suggestion\r\n            try {\r\n              assert.equal(result, 500000, ""result doesn\'t match length"");\r\n              done()\r\n            } catch (e) {\r\n              done.fail(e);\r\n            }\r\n```\r\nI think the assertions will be properly surfaced to the test results'"
11943,239642992,b'This target should probably be listed in ../README.md along with the others for wasm'
11943,239646583,b'Similarly something like\r\n```suggestion\r\n        (error) => done.fail(error)\r\n```\r\nmight be good here'
11970,242387292,"b'Use TryGetValue like\r\n```suggestion\r\n            if (bound_objects.TryGetValue (js_id, out var obj)\r\n```\r\nTo avoid an extra lookup here.  Also what is the new `bound_objects[js_id].RawObject = null;` looks redundant?'"
11970,242387482,"b'```suggestion\r\n            if (raw_to_js.TryGetValue(obj, out JSObject jsobj))\r\n```'"
12124,242997399,b'added the comment'
12540,250292796,b'Now that the method is async might as well use async on file io\r\n\r\n```suggestion\r\n\t\t\t\t\t\tawait res.WriteAsync (await f.ReadToEndAsync ());\r\n```'
12540,250293098,b'Can use async here too\r\n```suggestion\r\n\t\t\t\t\tawait res.WriteAsync (doc);\r\n```'
12540,250308620,"b'Either use ""e"" or skip the declaration. Probably makes sense to add it to the message.'"
11906,252777638,"b'That doesn\'t match my understanding. Looking at \r\n https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=netframework-4.7.2#httpclient-and-net-core it appears the that HttpClientHandler is supposed continue to use the old request stack and that SocketsHttpHandler is supposed to be swapped in at the client level.\r\n\r\nAlso notice that calling `AppContext.SetSwitch(""System.Net.Http.useSocketsHttpHandler"", false);` is supposed to use System.Net.Http.WebRequest in netcore 2.1 forward'"
11906,252784586,b'Looks like I spoke too soon https://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/System.Net.Http/src/System/Net/Http/HttpClientHandler.Unix.cs'
12809,254132779,b'That is a good point. Since essentially everything else in the README.md is about building and running from the source directory I think it makes sense that the debugger instructions work that way as well but I completely agree that we should document how to work with CI builds and make them as similar as practical.'
13093,258622840,b'Looks like there is a typo in the filename'
13093,258624141,"b""the NodeList logic is similar to the UseDebugProxy logic in Startup.cs we should probably unify the code in a way that makes sense.  I'm fine with landing it like this for now just making a note."""
13093,258624451,b'indentation'
13093,258624557,b'indentation'
12984,259161756,b'I think we should be able to use ReadOnlySpan here?\r\n\r\n```suggestion\r\n\t\tpublic unsafe int CopyFrom (ReadOnlySpan<U> span)\r\n```\r\nAnd I guess in the ValidateSource call'
13234,263236577,b'removed'
12984,263848942,b'is this correct?'
12984,263872721,b'Are you using ArraySegment here to avoid pulling in Span<T>?  Is the implicit conversion needed?'
12984,263889543,"b""Let's remove this, ToArray() makes it clear what is actually happening"""
12984,263889986,b'Some of the documentation needs fixing'
12984,263890734,b'documentation is wrong'
12984,265683285,"b'```suggestion\r\n\t\t/// Add <paramref name=""elements""/> to the array starting at index <c>0</c>\r\n```'"
12984,265698426,b'```suggestion\r\n```'
12984,265710726,b'```suggestion\r\n\t\t/// <returns>The element removed from the array or null if the array was empty</returns>\r\n```'
12984,265711475,b'```suggestion\r\n\t\t/// <returns>The index of first occurrence of searchElement in the Array or -1 if not Found</returns>\r\n```'
12984,265712613,"b'```suggestion\r\n\t\t/// <param name=""fromIndex"">The index to start the search from</param>\r\n```'"
12984,265745372,b'```suggestion\r\n\t\t/// <returns>The new length of the Array push was called on</returns>\r\n```'
12984,265745781,b'```suggestion\r\n\t\t/// <returns>The index of the last occurrence</returns>\r\n```'
12984,265795197,"b'\r\n```suggestion\r\n\t\t/// Finds the index of the last occurrence of<paramref name=""searchElement"" />\r\n```'"
12984,265795653,b'```suggestion\r\n\t\t/// <returns>The index of the last occurrence.</returns>\r\n```'
12984,265796133,"b'```suggestion\r\n\t\t/// Finds the index of the last occurrence of<paramref name=""searchElement"" /> between 0 and <paramref name=""endIndex"" />.\r\n\r\n```'"
12984,265796399,"b'```suggestion\r\n\t\t/// Gets or sets the <see cref=""T:WebAssembly.Core.Array""/> with the index specified by <paramref name=""i"" />.\r\n```'"
12984,265799723,b'```suggestion\r\n\t\t/// The length of an ArrayBuffer in bytes. \r\n```'
12984,265799869,b'\r\n```suggestion\r\n\t\t/// <value>The length of the underlying ArrayBuffer in bytes.</value>\r\n```'
12984,265801543,b'```suggestion\r\n\t\t/// Remove the first element of the Array and return that element\r\n```'
12984,265801636,b'```suggestion\r\n\t\t/// <returns>The removed element</returns>\r\n```'
12984,265802148,b'Why not IHostObject?'
14119,276899005,"b""This doesn't need to be variadic does it?"""
14191,278400526,b'nit: indentation'
14145,279467217,"b""Isn't this reverting #14117"""
14145,280966876,b'What is the status on this?'
14370,281436394,"b""that's a valid point, easy enough to test"""
14370,281436978,"b""turns out even the basic targets don't work with spaces in the mono directory name"""
14370,281441728,b'#14371'
14865,291606901,b'was this related?'
14865,291607085,"b'nit, indentation'"
14873,291789535,"b""This is a fine discussion for a separate PR.  I'm happy with landing this now"""
14273,293074121,b'is this ever going to be anything other than double in practice?'
3309,293128905,"b""This isn't the right way to handle this g_hash_table_destroy will free the keys if you change the init call."""
14808,296042235,b'nit: whitespace'
14808,296042682,"b'```suggestion\r\n\t\tpublic void Add (object key, object value) => Invoke (""set"", key, value);\r\n```'"
15435,298169146,b'\xf0\x9f\x91\x8d '
3255,298276203,b'Like miguel mentions bellow if this case is hit the g_free will fail'
4484,298277646,"b""It looks like it will fail on big endian but so will the old code so at least it doesn't regress?\r\n\r\n@vargaz what needs to be done to land this?"""
15389,298744772,"b'```suggestion\r\n\t\t\t\tinterp_files.Add (""mono.worker.js"");\r\n```'"
15389,298744926,b'```suggestion\r\n\t\t\t}\r\n```'
15488,299285162,b'what is the difference between mono_bool vs gboolean?'
15570,301730801,"b'ok with letting this go in as is, but I think we should move the note section to a separate file with timestamps that we link to.'"
15640,301784503,b'maybe add\r\nXUNIT_DIR=$(TOP)/external/xunit-binaries/\r\nfor the xunit dll references?'
15777,305939617,b'Maybe run clean-browser-tests here as well and get rid of the duplication in the commands'
15777,305941801,b'are we cleaning here because the builds of the different configs end up in the same place?'
16562,319084283,b'Looks like an incomplete edit'
16552,319152552,b'```suggestion\r\n       AC_MSG_WARN([compiler server temporarily disabled on darwin and win32])\r\n```'
16562,320502094,b'```suggestion\r\n\tgunichar2 *str = NULL;\r\n```'
16562,320502210,b'```suggestion\r\n\tgunichar2 *str = NULL;\r\n```'
16562,320502283,"b'```suggestion\r\nmono_get_module_filename_ex (gpointer process, gpointer mod, gunichar2 **pstr, guint32 *plength)\r\n```'"
16562,320502749,b'```suggestion\r\n\tgunichar2 *module_file_name;\r\n```'
16562,320502900,"b'```suggestion\r\nmono_get_current_directory (gunichar2 **pstr, guint32 *plength)\r\n```'"
16562,320502988,"b'```suggestion\r\nmono_get_module_basename (gpointer process, gpointer mod, gunichar2 **pstr, guint32 *plength)\r\n```'"
16562,320503098,b'```suggestion\r\n\tgunichar2 *str = NULL;\r\n```'
16562,320503164,b'```suggestion\r\n\tgunichar2 *str = NULL;\r\n```'
16562,320503293,"b'```suggestion\r\nmono_get_module_filename (gpointer mod, gunichar2 **pstr, guint32 *plength);\r\n```'"
16562,320503414,"b'```suggestion\r\nmono_get_module_filename_ex (gpointer process, gpointer mod, gunichar2 **pstr, guint32 *plength);\r\n```'"
16562,320503498,"b'```suggestion\r\nmono_get_module_basename (gpointer process, gpointer mod, gunichar2 **pstr, guint32 *plength);\r\n```'"
16562,320503573,"b'```suggestion\r\nmono_get_current_directory (gunichar2 **pstr, guint32 *plength);\r\n```'"
16562,320503675,"b'```suggestion\r\nmono_get_module_filename (gpointer mod, gunichar2 **pstr, guint32 *plength)\r\n```'"
16562,320503878,b'```suggestion\r\n\tgunichar2 *name = NULL;\r\n```'
17441,337108707,"b""There are other places in this file where esp is cast to different types, shouldn't they also get cleaned up?"""
18147,357142351,b'It looks like these 3 blocks could be reduced to one that gets the the name from the klass? or at least reduce the duplication'
18147,357143241,"b'reduce this to \r\n```\r\nres = mono_runtime_try_invoke (p->get, obj_val_ref ? obj_val_ref : obj, NULL, &exc, error);\r\n```'"
18146,357179654,b'either use Debug or remove'
18146,357179787,b'either use Debug or remove'
18215,358419302,b'good catch'
18230,359131628,b'we need to clean up the output a lot but this is the same as the missing method spew below it.'
18252,360555793,"b""I don't know why, I'm not sure that there is a strict contract there to begin with.  I've refactored the request code to use a shorter delay but retry for up to two seconds, and added a more informative message when it fails.  There is definitely room for more improvement in this code but I'd like to get the harness running asap."""
18466,367626010,b'did you mean to remove this?'
18602,372431268,b'I was avoiding that for the embedded pdb case'
18747,382712423,"b""Ordinal really, I'll clean this up in the proxy"""
18747,382712516,b'It is currently split for work not in this commit but I agree'
18747,382713357,b'Throwing in that case is intentional testing for ordering constraints'
18747,382749949,"b""I'd rather exit here than check in both of the loops below.  This was an actual case I hit in the second loop."""
18747,382750453,"b""Since i is used without being reset in the next loop as well I'd prefer to keep the scope clear"""
18747,382750929,b'fixed in a followup commit by fixing TryParse'
19026,383993135,b'InspectorClient is used in DebuggerTestSuite but we could move it and DevToolsClient out of this assembly'
19054,385246669,b'We should probably give some indication when streamingEnabled == true and StreamingSupported == false'
19054,385248009,b'Removing all this is in favor of the Blazor wrappers is nice for blazor but makes it harder when using the Actual bindings'
19113,387837800,"b""It is simple enough to check the breakpoint state after the call but when multiple debuggers are running I've seen the call fail because there is already a bp active at that location.  I think we treat that as a failure right now and I'd rather it show success there.  I'll look into the code."""
19113,387842773,"b""It looks like multiple bps are only an issue when looking up the and won't cause a failure here."""
19113,387941601,b'The breakpointId is now created by the target and no longer has the dotnet: scheme'
19113,387954894,b'removed'
19113,387955376,"b""Basically we're delaying getting the store until we absolutely, calling LoadStore multiple times is safe"""
19113,387955620,"b'I uh, changed it'"
19113,387959617,"b""Ahhh, I didn't actually read the code"""
19113,387977073,b'changed to UpdateContext'
19113,387978112,b'The plan eventually is to serialize these with the json serializer properly but for now renamed to AsSetBreakpointByUrlResponse'
19113,387978941,b'SetMonoBreakpoint now'
19128,388510934,"b'```suggestion\r\n\t\t\tlogger.LogError (""Cannot respond to command: {id} with result: {result} - command is not pending"", id, result);\r\n```'"
19140,389025848,b'Is this the same as\r\n\r\n```suggestion\r\n\t\t\tif (((MonoBreakpoint *)l->data)->method->wrapper_type != MONO_WRAPPER_RUNTIME_INVOKE)\r\n```'
19140,389034472,"b'```suggestion\r\n\t\t\t\tthis.mono_wasm_setup_single_step = Module.cwrap (""mono_wasm_setup_single_step"", \'number\', [ \'number\']);\r\n```'"
19211,391970965,"b'```suggestion\r\n\t\tstatic Regex parseConnection = new Regex (@""listening on (ws?s://[^\\s]*)"");\r\n```'"
19211,391975932,b'```suggestion\r\n\t\t\t\t\tvar match = parseConnection.Match (str);\r\n```'
19232,393315542,"b'@radical good idea, there are some debugger specific attributes we should also honor but autos and fields sound good here.'"
19328,398715624,"b""This shouldn't be an error we should just return an empty locations set it is entirely normal that we wouldn't be able to find a location for a given range"""
19328,399466111,"b""don't you need to remove GetPossibleBreakpoints?"""
19328,399467374,b'have you tested how vs and vscode deal with an error here?'
19328,399472786,"b""Ah I see it only returns null when the docs differ which is just a sanity check that we've never seen in practice.  I wonder what the browser does in that case?"""
19256,399474976,"b'do we expect more return values here?  Having 0 and 2 need special handling but 1 be the normal case seems like an odd api choice. Maybe -1,0,1?'"
19355,399748250,b'```suggestion\r\n                \t\t\tvar subArray = Module.buffer instanceof SharedArrayBuffer\r\n```\r\nIt looks like this should be testing Module.buffer for the general case?  Also stick with tabs for indentation and `} else {` instead of the newline after the closing brace'
19355,399836300,b'Yeah it should be fine'
19232,401789999,b'this breaks the functionality of the actual page'
19424,402436166,"b""We don't really want the proxy throwing uncaught exceptions.  `Runtime.getProperties` has exceptionDetails in the result so let's fill that in instead.   Also please move this out of the switch and into a function."""
19432,403201040,"b'```suggestion\r\n\t\t\t\tCSharpCompilation compilation = CSharpCompilation.Create (\r\n\t\t\t\t\t""compileAndRunTheExpression"",\r\n\t\t\t\t\tsyntaxTrees: new [] { syntaxTree },\r\n\t\t\t\t\treferences: references,\r\n\t\t\t\t\toptions: new CSharpCompilationOptions (OutputKind.DynamicallyLinkedLibrary));\r\n```'"
19432,403207574,"b'```suggestion\r\n\t\t\t\tthrow new Exception ($""Evaluate of this datatype {type} not implemented yet"");\r\n```'"
19432,403207946,"b'```suggestion\r\n\t\t\t\tthrow new Exception ($""Evaluate of this datatype {type} not implemented yet"");\r\n```'"
19432,403216016,"b""https://chromedevtools.github.io/devtools-protocol/tot/Debugger#method-evaluateOnCallFrame allows an exceptionDetails on the response.  Is that better for this case?  You don't need to change it for this PR this is mostly me noting that we need that logic here too"""
19444,403734747,"b'```suggestion\r\n\tpublic static void EvaluateLocals ()\r\n\t{\r\n\t\tTestEvaluate f = new TestEvaluate();\r\n\t\tf.run(100, 200, ""test"");\r\n\r\n\t\tConsole.WriteLine ($""a: {f.a}, b: {f.b}, c: {f.c}"");\r\n\t}\r\n```'"
19444,403737500,b'```suggestion\r\n```'
19499,406536998,"b'This breaks embedded pdbs, remove the logging instead'"
19499,406539374,b'Can we remove the protocol log filtering? sadly both of these events are actually critical to the functioning of the proxy and needed to debug problems.'
19499,406539566,b'Same as above.'
19490,407570122,"b'I assume this is a separate method because description is ignored on ""number"" types?'"
19505,407704901,b'is sig_desc actually used?'
19490,407752955,"b""let's consolidate several of these similar methods in a follow up by passing the subtype as another argument or as part of the object id"""
19505,407756057,b'This looks like it could be simplified and reduce allocations with a g_string_printf?  Maybe just moved inline?'
19537,408240925,b'an error here will probably surface in a really bad way maybe just log it and set a string to the value?'
19537,408242971,"b'just call mono_wasm_add_typed_value (""number"", NULL,  everywhere'"
19537,408342140,b'```suggestion\r\n\t\t\tconsole.log (`Error: mono_wasm_add_typed_value: Unknown type for value: ${type_str}`);\r\n```'
19537,408342821,"b'int_value is misleading, value would be better'"
19555,409240234,"b'```suggestion\r\n\t\t\t\t\tthrow new PlatformNotSupportedException (""CompareOptions.IgnoreCase is not supported on this platform."");\r\n```'"
19588,410765128,"b""```suggestion\r\n\t\t\t\t\t\treturn true;\r\n```\r\nWe don't want to send multiple responses here"""
19588,410767956,"b""```suggestion\r\n\t\t\t\t\t\treturn false;\r\n```\r\nCan't return true without sending a response"""
19588,410768117,"b'```suggestion\r\n\t\t\t\t\tSendResponse (id, result, token);\r\n\t\t\t\t\treturn true;\r\n```\r\nThese do the same thing'"
19584,410806894,b'whoops!'
19588,410810786,"b""```suggestion\r\n```\r\nThis doesn't appear to be used?"""
19588,410840605,"b""The idea behind the admittedly confusing static MonoCommands was a level of type safety for the arguments, is there a reason you aren't adding the commands there?"""
19588,410846120,b'Easy to fix in a follow up.'
19613,412221046,"b'```suggestion\r\n\t\t""VIIFI"",\r\n```'"
19624,413156444,b'At least I was consistent in usage. :)'
19688,418890523,"b""```suggestion\r\n\t\t\t// and will clear the bp if it isn't close enough\r\n```"""
19704,419723106,b'whoops\r\n:)\r\n'
19688,419752016,"b'no, SourceLocation and BreakpointRequest are zero based like cdp\r\n\r\n```\r\npublic SourceLocation (MethodInfo mi, SequencePoint sp)\r\n\t\t{\r\n\t\t\tthis.id = mi.SourceId;\r\n\t\t\tthis.line = sp.StartLine - 1;\r\n\t\t\tthis.column = sp.StartColumn - 1;\r\n\t\t\tthis.cliLoc = new CliLocation (mi, sp.Offset);\r\n\t\t}\r\n```'"
19688,419755392,"b""it doesn't matter the point of the patch is that column:0 == first bp on line whatever the column.  The previous behavior for column:0 was all bp on the line and that wasn't correct.  Notice the First () in the loop below"""
19718,420434114,b'either make this work with Theory and multiple data or make the name match the other test but with a 0 somewhere in the name ;)'
19778,424802468,"b""We shouldn't send this unless we are paused on a managed frame right?  As written we'd send the mono command even when paused on js etc. so maybe at least check if there is a managed stack before sending the mono command.  \r\n\r\nWhile I'm thinking about it is there any way to detect the managed change and handle this call from the debug engine side rather than the proxy side and avoid the round trip completely?"""
19769,424869160,b'If a test hangs this is a lot longer.  Should we just double it?\r\n\r\nAlso It might make sense to move the debugger tests before the system tests since the debugger is more likely to fail at this point.'
19726,425432470,b'Why was this renamed?'
19769,425436278,b'maybe put canary below edge? '
19769,425460017,b'I think you can probably avoid all the TestHarnessStartup changes with:\r\n```suggestion\r\n\t\t\t\t\t\t\toptions.ChromePath = options.ChromePath ?? chromePath;\r\n```'
19769,425533634,"b'maybe remove this and use something like\r\n```\r\n{\r\n  ""Logging"": {\r\n    ""LogLevel"": {\r\n      ""Default"": ""Error"",\r\n      ""Microsoft"": ""Warning"",\r\n      ""Microsoft.Hosting.Lifetime"": ""Information""\r\n    }\r\n  }\r\n}\r\n```\r\nin the appsettings?'"
19760,449803887,"b'var_ids is already an array, should we serialize it for real?\r\n```suggestion\r\n\t\t\treturn new MonoCommands ($""MONO.mono_wasm_get_variables({scopeId},{JsonConvert.SerializeObject(var_ids)}"");\r\n```'"
19760,449804515,b'Would it make more sense to think of this as parse and return an object with symbolic names rather than positional?'
19760,449804545,b'use the result of parsing here?'
20159,459842522,b'nit: Fix the comment (the bit about the trampolines being jitted)?  '
1055,13028810,b'thanks @marek-safar made the change.\n'
554,2956037,"b'This looks great.\n\nJust one tiny request, instead of:\n\n#if !HAVE_FOO\nold_code\n#else \nuse_foo\n#endif\n\nAvoid the ""!"" and do:\n\n#if HAVE_FOO\nuse_foo\n#else\nold_code\n#endif\n'"
585,3212774,b'Just one issuelet: can we close this clientSocket?\n'
582,3230032,"b'I am concerned that this code all of a sudden is expected to throw an exception, and that this code now has a try/catch.\n\nI would be interested in finding out what was the reason for that exception, and instead work around the issue directly in the code, instead of expecting an exception\n'"
582,3231669,b'How did you test your changes then?\n'
575,3231795,"b""Doesn't this change mean that we wont be able to run anymore on versions of cairo that had the previous cairo_ps_surface_begin_page_setup but not cairo_ps_surface_dsc_begin_page_setup?\n"""
575,3231804,b'This is a breaking API change.\n'
574,3232072,"b""Why is this public?   It does not seem like it is public in Microsoft's version.\n"""
574,3232076,"b'Coding style, please move the brace up in general.\n\nBut in this case, eliminate them entirely\n'"
574,3232079,b'Eliminate redundant braces\n'
628,4093996,"b'Was this code written by Novell in 2013?   If the contributor is not working for Novell, this is a cut and past error.\n'"
659,4740018,"b'Currently this code is executed on a system and will return whether IPV6 is supported depending on which network adapters are configured, which can change during the lifetime of the application.\n\nSo this would effectively hardcode the status of ipv6 to the status it had at startup, not the dynamic state.\n'"
767,6853719,"b'In general, we do not use the NET_3_0 in Mono source code since there were barely any API changes.\n\nMono currently only distinguishes between the 4_0 and 4_5 profile.   Please adjust the defines.\n'"
780,7102646,"b'This chnage does not look right.\n\nThe range is 0..count-1, so index must be at most count-1, so the original test looks fine.\n\nIt is hard to read, I would change it to:\n\nThis should be (index < 0 || index >= count)\n'"
761,7102900,"b'This is odd, it makes the parameter ""knownTypes"" unused, I do not think that this is correct.\n'"
888,12247012,b'This todo probably needs to be implemented.\n\nThat said: I am surprised that we are not using some sort of aggregate exception to log these errors.\n'
888,12247036,"b'This looks like a change in the semantics, we need an explanation for this change.\n'"
888,12247099,b'I rather not get dead code into the codebase.\n'
943,12714406,"b'If we are going to be calling this method, we should not be throwing an exception.\n\nSo let us return null, to indicate ""Do not have support for this"", and deal with that in the upper layers.\n'"
1177,15503472,"b'I am confused; this will just accept any values, which seems wrong.\n\nInstead, the setup_baud_rate should handle the new specific cases listed here.\n'"
1168,15816675,"b'Marcos is correct, people are actively using this with Reflection to turn on/off the feature, and has made it into a couple of libraries in the world (Splunk is one, but this was blogged and copied around other places that need this).\n\nIn fact, this is one of the reasons we asked Marcos to start on this.\n'"
1273,17441716,b'You do need to specify what is the namespace to drop\n'
1337,19103815,"b'Whitespace change, please resubmit once this is fixed, and squash the commits (so we do not end up nuking the file history with the two changes).\n'"
1337,19103858,b'Can we have a test case showing this scenario?\n'
1510,23496766,"b'We should not use this idiom to initialize the structure.\n\nInstead we should check if the structure is actually initialized.   So if we fail, we should either bail out, or record the fact that stat failed on a separate flag.\n'"
1528,23644701,b'Both of those changes break the embedding API.\n\nThis requires new API entry points to be added to provide the missing information.\n'
1833,31197017,b'What was the reason behind this change?\n'
3002,63457673,"b'Do you need to allocate the ""typespec"" at all?   You could likely store the actual value of the ""*typespec"" directly as the value of the hashtable.   You would save an allocation there.\n\nAnd then, to determine if the value was found, vs a 0 value in the hashtable, you can use `g_hash_table_lookup_extended`.\n'"
3000,63458008,"b'That is entirely under our control, and TBD.   \n'"
3149,66657556,"b""Isn't this a major blocker to get this landed?\n"""
3278,71083449,"b'Agreed, this is extracting a column from the database that should have two possible values FILE_CONTAINS_METADATA or FILE_CONTAINS_NO_METADATA.\n\nWhile currently harmless, as the only two possible values are 0 and 1, this is documented as being a flags field, and if this got more data in the future, the above would break.\n'"
3337,72647711,"b'This change looks strange, it would now only include this file if running on Android.\n\nWhy was this necessary?\n\nWe have two options, if we want it included on Android or if the header file is present, perhaps we should change that to be HAVE_ASM_SIGCONTEXT_H || PLATFORM_ANDROID\n\nIf the purpose was to avoid including the header file, I would like to know why :-)\n'"
3337,72647837,b'We should change this to:\n\n```\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n```\n'
3337,72647923,"b'For Alpine, perhaps we can detect and disable Boehm?\n\nI am not crazy about adding libc-specific defines.\n'"
3501,77171515,b'Thanks!\n'
3736,82391450,b'Good catch!   Just added it.\n'
3662,82449318,b'You have to do both a `make` that does a full build on Unix and then `make update-solution-files`\n'
3776,83647307,"b'My bad, just added this one to tell this one apart from the int version, which is limiting by design.\n'"
4123,92464537,"b'It does not.  \r\n\r\nThe ServerName extension is designed to share a single IP address with many different host names, so the server name must be a name ;-)\r\n\r\nIt is in the spec:\r\n\r\nhttps://tools.ietf.org/html/rfc3546#page-8'"
4168,92921929,"b'Small suggestion, as we should have caught this before, can we just have one long C string for this?\r\n\r\nWe avoid all those calls to prints'"
5305,131445559,"b'Not if `GCHandle.FromIntPtr` raises an exception.   My understanding is that Martin added that after someone from the runtime team asked for that, the original patch did not include it:\r\n\r\nhttps://gist.github.com/migueldeicaza/83edb2f9e80bdc9fb34d91a9068dc80d'"
5415,134371348,"b'Since this is user-visible change, could we update README.md as well to list this new option?'"
6307,159501179,"b'We should, someone might have undone code that historically did that that, but it is a bad practice.'"
6307,159501603,"b'Good idea, will try.'"
6773,165832952,"b'This is likely a good default, it will rarely be different - and the cases where it might be relevant (really odd cases), it should be easy to modify for anyone that cares.'"
7002,168263500,b'No clue what you mean.'
7002,168319182,b'Got it - done'
7046,168598542,"b'My feeling is that we should preserve both environment variables, in case things change in the future'"
7451,174157285,"b'Let us not assert here, a silent return is fine.'"
7451,174157408,b'Where does this get initialized?'
7451,174158448,"b'I dont think we need to be this drastic, just skip it on this scenario.'"
7451,174158516,"b'Too drastic, why?   Just ignore.'"
7451,174236140,"b'These are invoked via dynamic invocation, none of the APIs here are surfaced on the public API, for compatibility with the surface area of .NET'"
7941,178476643,"b'I copy pasted this from CoreCLR, I rather not change the style of the copy-pasted code.'"
7941,178476779,"b'We do in that file, just a couple of lines above ;-)\r\n\r\nI dont mind updating.'"
7941,178476784,b'What do you mean?'
7941,178549597,"b'I changed this to be ref, do we still need the check in that case?\r\n\r\nCoreCLR does not have that.'"
7941,178549616,"b'Good catch, thanks!'"
7941,178557205,"b'I changed my mind, I kept the .NET signature.'"
7941,178557286,b'Short version: done'
7941,178557343,"b""Added a check, just for sanity's sake."""
7941,179339005,"b'I rather not for code that is copy pasted, makes it simpler to track changes.'"
7941,179339765,b'Done'
8025,180272629,"b'Well, I could point out that this is a tiny leak on a one-off build, this is not a long running process.\r\n\r\nAnyways, patch attached.\r\n'"
8138,180560717,b'Whoa!   very good catch!   This is indeed broken code.'
3255,185878198,"b'This code will not really work, as tmp_dir at least has one scenario where a constant is assigned (just above).'"
8560,186153486,b'It reports an error already.'
8560,186153506,b'Adding'
8753,189265709,"b'Interesting, is this because there might be unmanaged state and we do not want to create a strong cycle, or something else?'"
9038,193296183,b'No - that is a bad style that someone went and added in recent years.   Undo that disaster please.'
9038,193296228,b'Older MacOS versions do not have COPYFILE_CLONE'
9038,193296382,"b'The top of the file uses #ifdef, the rest of the file uses #if.\r\n\r\nWont make this change.'"
9038,194225646,b'Good idea'
9281,197652723,"b'They are constants, so they should be the same.\r\n\r\nI wanted to get your opinion generally on the code so far that adds the capability.'"
9281,197657983,"b'You mean for the constant folding of floating point values, or the math operations that are being inlined?    I will check with RyuJIT is doing.'"
12120,243017610,"b'Will add a README file that explains it in more detail.\r\n\r\nI want the default to be just additive (ie, build the support in addition to everything I have).   The only will be the ""Just build the bare minimum and remove the C support that is not needed"", but I dont want to encourage that just yet\r\n\r\nThe reason for the latter is that I want to make it easy to reuse the same build across the current product and for core.   What i need to do is to fix the mcs/class Makefiles so we can do single-source builds for multiple builds (which we broke years ago, and I want to fix finally)'"
12120,243017689,"b'Eventually, like I said :-)'"
186,188412,b'This change does not appear to be valid?\n\nhttp://msdn.microsoft.com/en-us/library/system.net.ftpwebrequest.proxy.aspx\n'
186,188420,b'I think `return proxy ?? WebRequest.DefaultProxy;` would do the trick rather than having m_bProxySet.\n'
186,188430,"b'By the way, we also need to throw `ArgumentNullException` here if `value == null`; see http://msdn.microsoft.com/en-us/library/system.net.webclient.proxy.aspx\n'"
186,196364,b'Please rename to `proxy_set` or similar (follows our naming conventions).\n'
186,196366,b'Add space between `if` and `(`.\n'
187,207947,b'Please remove this white space.\n'
187,207951,b'Stylistic nitpick: Space before (.\n'
187,207953,"b""In general, avoid adding empty lines like this; they don't serve much purpose.\n"""
187,207954,b'Stylistic nitpick: Space before (.\n'
187,207958,b'Stylistic nitpick: Space before (.\n'
187,207994,b'Kill this empty line too.\n'
187,207995,b'Unnecessary white space change. :)\n'
187,207996,b'Unnecessary white space change. :)\n'
187,207998,b'Kill this empty line too.\n'
215,353304,b'The Mono coding guidelines require the use of tabs rather than spaces.\n'
519,2368856,b'=> {\n'
519,2368859,b'try {\n'
519,2368862,b'} finally {\n'
519,2368881,b'space before (\n'
519,2368885,b'space before (\n'
519,2368888,b'space before (\n'
519,2368893,b'space before (\n'
519,2368896,b'space before (\n'
519,2368903,b'and so on\n'
519,2368924,"b'for classes, put { on the same line as the decl\n'"
536,2740393,b'space after method name: `public static CompilerErrorCollection CompileToType (...)`\n'
554,2953810,b'bad indentation\n'
554,2954503,"b'Strictly speaking, the `volatile` here is unnecessary.\n'"
557,2956239,"b'Should follow existing style, i.e. `assembly_file_name`\n'"
557,2956243,"b""I'm not sure we need to care about the `.DLL` and `.EXE` cases. The rest of the code doesn't.\n"""
557,2956254,b'space before paren\n'
557,2956255,b'ditto\n'
568,3080212,b'brace on same line as declaration\n'
568,3080214,b'space before brace\n'
610,3932417,b'Why this `cp`?\n'
630,4120962,b'Inconsistent indentation.\n'
630,4120996,"b'Should be properties. Also, redundant initializers.\n'"
465,5308974,b'Minor style issue: Spaces here instead of tabs.\n'
708,5369614,b'Space before parens on function call.\n'
708,5369615,b'Inconsistent indentation - use tabs.\n'
708,5379808,"b""Oh, this won't fly in C89. The `target` variable must be declared at the top of the function before any statements.\n"""
715,5437921,b'What about MSVC?\n'
715,5437922,b'Inconsistent indentation.\n'
715,5437923,b'Use tabs for indentation.\n'
715,5437926,"b'This is documented(-ish) here: http://msdn.microsoft.com/en-us/library/984x0h58.aspx\n\nNote, however, that GCC uses a different calling convention: http://en.wikipedia.org/wiki/X86_calling_conventions#thiscall\n'"
825,8189146,b'No indentation for preprocessor directives.\n'
825,8189150,b'Ditto.\n'
845,8959527,"b""Shouldn't this be `audio/x-aac`?\n"""
890,9811116,b'You have indentation issues here.\n'
890,9811121,b'Likewise.\n'
927,10174598,"b'Instead of invoking `sh`, can we pick up the existing shell and use that?\n'"
957,10868479,"b""This is not correct. It's supposed to fall through to the code below if the `if` above doesn't pass.\n"""
919,11559073,b'Use tabs.\n'
874,11559091,b'dedent this\n'
874,11559094,b'space before opening parenthesis\n'
874,11559097,b'add space before closing brace\n'
1043,12895956,"b'Yes, please fix.\n'"
761,12937920,b'ping?\n'
1055,13005428,b'space before parens\n'
890,13031634,b'missing space before parens\n'
890,13031638,b'unnecessary (and incorrect) formatting change\n'
890,13031639,b'ditto\n'
977,13049742,b'should be indented\n'
977,13049749,b'space after cast\n'
977,13049755,b'space before parens\n'
977,13049768,b'ditto\n'
1075,13260870,b's/mono-lite/monolite/\n'
1075,13260873,"b""This sentence doesn't really make much sense. Rephrase to something like: If you have a system Mono (not monolite), you will need to read this: ...\n"""
1066,13268200,b'space before opening bracket throughout\n'
1066,13268202,b'space before open paren throughout\n'
1078,13268478,"b'indentation is off. also, Mono code style\n'"
1078,13268491,"b""let's just skip the loop if it's null instead of doing a pointless allocation\n"""
1078,13268579,b'`if (claims != null) {`\n'
1088,13519652,b'Keep in mind that for P/Invokes we still need to respect the native ABI (i.e. use pushes).\n'
1096,13689419,b'please drop the `private` and add space before the opening parenthesis (same throughout the rest of the patch)\n'
1096,13689426,b'the opening brace for methods should be on its own line\n'
1096,13689434,b'the opening brace for classes should be on its own line\n'
1096,13689436,b'ditto\n'
1101,13783374,"b'we should catch more precise exceptions here, or we might hide an actual error\n'"
1101,13785346,"b'ah, ok\n'"
1115,14118822,b'and the brace should be on its own line for method declarations\n'
1127,14182402,b'brace on its own line\n'
1127,14182404,b'space before opening paren\n'
1142,14424810,b'space before parenthesis\n'
1142,14424815,b'space before opening bracket\n'
1400,20971359,b'Please just move the `IDataItemContainer` to a separate line and wrap that in `#if NET_4_0` instead of repeating the whole thing.\n'
1399,20971472,b'newline please\n'
1431,20999355,b'space before parens throughout\n'
1467,22098723,b'indentation looks off\n'
1467,22098755,b'where is this used?\n'
1472,22155670,b'please keep the code style consistent\n'
1500,22779793,b'space before opening parenthesis\n'
1528,23595002,"b""This (and the hunk below) doesn't seem right. `mono_assembly_load_from_full` is invoked from e.g. `ves_icall_System_AppDomain_LoadAssemblyRaw` which is used in `AppDomain.Load ()`. It's also used in many other API functions in `assembly.c` which should probably also have a `requesting` parameter added.\n"""
1528,23595116,b'These two hunks also seem odd to me.\n'
1541,23871409,"b""The file doesn't specify `-d:NET_2_0` in its compiler options. Does the define come from elsewhere?\n"""
1543,24046045,b'nit: no space before closing parenthesis\n'
1626,26587696,"b'should probably be `mono-profiler-log.suppression`, as `mono-profiler-logging.c` is old dead code\n'"
1626,26587723,b'looks wrong\n'
1626,26587822,b'style: space before parenthesis\n'
1626,26587942,"b""is that function's license incompatible with eglib's?\n"""
1626,26588071,b'should be `guint` (throughout) when accessing `len\xc2\xb4 properties on eglib structures\n'
1626,26588201,b'I wonder if we could generate this file from the build system somehow?\n'
1626,26597677,"b'ok, makes sense\n'"
1656,27090111,b'why this change?\n'
1656,27090126,b'any particular reason for a 1 minute default? would be good to put in a comment\n'
1656,27090130,b'ditto\n'
1626,27850775,b'can we document this schema in a comment near the top of this file as in `proflog.c`?\n'
1626,27850789,b'this should probably be an assert? (probably in `proflog.c`)\n'
1626,27850909,"b""this function doesn't follow the Mono code style\n"""
1626,27850954,b'indentation looks off here\n'
1626,27851097,b'why do we do this?\n'
1626,27851106,b'code style in this function\n'
1626,27851143,"b'this name seems a bit too general, maybe `covfilter`?\n'"
1626,27851151,"b'similarly, `covfilterfile` or something\n'"
1626,27851210,b'you should omit braces when the inner code is just a single statement (same throughout the PR)\n'
1626,27851228,"b""I don't think we need a mutex lock here; afaik it's guaranteed that all threads will stop firing profiler events by the time we reach `log_shutdown`\n"""
1626,27851373,"b""I'm not entirely sure, but I _think_ these can be made into concurrent hash tables (`mono/utils/mono-conc-hashtable.h`) to eliminate the mutex. That said, we'd need a way to iterate the concurrent hash tables in situations where we know no concurrent access happens (i.e. in `dump_coverage`). If we don't do this, I think we'd end up seeing huge contention in `method_enter`.\n"""
1730,28930364,b'when would this not be the case? should probably document in a comment\n'
1730,28930405,b'ditto\n'
1730,28930424,b'We should avoid printing stuff unless absolutely necessary. Perhaps put this behind a log mask or something like that.\n'
1732,28981949,b'unrelated style change\n'
1732,28981960,b'please use tabs instead of spaces for indentation\n'
1730,28988336,"b""OK. In that case, I feel like we should assert instead of warning since we'd want to know this ASAP. Especially on iOS since we usually have some time to make Mono work on newer iOS versions before they're released, so asserting should be fine.\n"""
1730,28991238,"b'One last thing: Could we avoid these long lists of defines by moving it to the top of the file, like\n\n```\n#if (defined (HAVE_KW_THREAD) && defined (__linux__) || defined (TARGET_ANDROID) || defined (TARGET_IOS)\n#define USE_FAST_TLS\n#endif\n```\n\nand then use `#ifdef USE_FAST_TLS` in the rest of the code.\n'"
1761,29539742,"b""I don't understand what this comment is referring to?\n"""
1766,29612852,"b'OK, will move these.\n'"
1626,29909135,"b""OK. I don't think we need to worry about corrupted files; the check for the format version will handle most cases.\n"""
1626,29909216,"b""Unless we actually fail to instrument it, I don't think we need to keep this warning.\n"""
1626,29939209,"b'It should be easy enough to implement, you just need to take the writer lock while iterating.\n'"
1819,30559433,"b""Please don't indent preprocessor directives.\n"""
1926,34946263,"b'> This is missing documentation on memory management.\n\nI didn\'t include it as the only precedent for mentioning memory management in embedding API documentation seems to be ""don\'t"". We can certainly improve that precedent, though.\n\n> Could the returned pointer be const?\n\nProbably.\n'"
1926,34946272,"b""For this (and the functions you mention below) docs are missing because they didn't seem to be there for other similar embedding APIs in this file. Wasn't sure if that was intentional or not.\n"""
1926,34946281,"b""> The documentation should explain the lifecycle of those ids.\n\nThere's another precedent problem: The docs don't explain anywhere what the lifecycle of domain IDs is in the first place, for example. Happy to document if this is something we _want_ to document.\n"""
1926,34946355,"b""AFAIK for the most part, there's a 1-to-1 correlation between domains and contexts. New contexts beyond that are only created if an app explicitly does so, I think. So I wouldn't worry about it.\n"""
1926,34946574,"b""We've never actually emitted this flag so I decided to remove it in order to not mislead consumers of the format into thinking they'll actually get it and therefore relying on it.\n\nHmm. I should have done this in a separate commit, and we should probably mention it in the format changelog even if it's not technically a format change.\n"""
1926,34946584,"b'It\'s the domain ID associated with the context (a context always belongs to one domain, while one domain can have many contexts). The ""as a pointer"" just means we encode it as a pointer value (even though it\'s a 32-bit integer) to be consistent with the other `TYPE_METADATA` events.\n'"
1926,34946585,b'OK.\n'
1926,34946595,b'The explanation for these is the same as for `TYPE_LOAD_ERR` above.\n'
1926,34946631,"b""I'm not sure the sorting counts as a format change. Any number of random factors can have an impact on ordering of events in a file; this is just another one, which should be completely transparent to consumers. They should just see better compression.\n\nRegarding thread ID, as I mentioned on Slack, it was a trivial change to add a thread ID field to the `TYPE_SAMPLE_HIT` event, and it made sense to do since we're bumping the format version for all these new metadata events anyway. On the other hand, making the buffer header thread ID usable for these events was a lot of really ugly, hacky work because the profiler wasn't designed to handle the use case of a log buffer having a different thread ID than the actual thread writing to it.\n"""
1926,34946647,"b'How would that help? Those would be constants that are only relevant in the exact event they correspond to. All they would do is move the event size further away from the actual code that writes data to the buffer, which makes it easier again to make the mistake of not updating the event size when adding event fields.\n'"
1999,38005597,"b""indentation doesn't line up\n"""
1999,38010818,"b'sure, but you are missing a space before the tab\n'"
2001,38102644,b'`*=`?\n'
2028,38789061,"b""No, the bug here was that we expected the -1 optimization to have kicked in this early, but it actually hadn't, and probably never would. We compute regular static field bitmaps before dealing with special static fields, and the latter part is where we apply the optimization. (See `mono_class_create_runtime_vtable ()`.)\n\nIn any case, with 0686c213583a70bde97c8d04e0748e47416bfaf9, `mono_class_field_is_special_static ()` will take advantage of the optimization when it's possible, so now we may as well use that instead of the somewhat cryptic -1 check.\n"""
2034,38798497,b'@schani do you happen to have any idea why this happens?\n'
2014,39179704,"b""This probably shouldn't be on by default?\n\nAlso, perhaps these debug macros should be in `mini-ppc.c` instead of the header?\n"""
2014,39179906,b'This block should be indented now.\n'
2054,39914841,"b""I've so far been retrieving the pointer with `mono_vtable_get_static_field_data (mono_class_vtable (mono_domain_get (), klass))`, but come to think of it, I'm not actually sure if that's correct in all cases.\n"""
2034,40281302,"b""> There's no need to change this field to point to ContextStaticData instead of static_stata.\n\nHow would we access a field on `MonoAppContext` from a reference queue callback, especially when the GC handle that _possibly_ keeps it alive is a weak handle? I thought this was deep into undefined behavior land.\n\n> In this patch, there's no usage of gc_handle through the context.\n\nWe free the handle in the reference queue callback - same issue here. How would we access a field on `MonoAppContext`?\n"""
2034,40415768,"b""OK, but how would this work exactly? When we update the `gpointer static_data` field in `MonoAppContext`, we would also need to update the equivalent field in `ContextStaticData` so the reference queue callback actually has something to clean up. But we can't do that without having a pointer to the `ContextStaticData`. So storing it there makes sense to me.\n"""
2116,41524553,b'damaged formatting here\n'
2116,41524561,b'ditto\n'
2101,41525001,"b""Since this is a symbol that doesn't exist in glib proper, shouldn't it be `eg_`?\n"""
2054,43382458,"b""We probably could, and then emit a single event with a list of fields. I just did it this way because it fits the 'pattern' with regards to other metadata events, which is one event per metadata element.\n\nI don't care much either way, TBH.\n"""
2054,43382474,b'OK.\n'
2054,43382493,b'Good point.\n'
2054,43382604,"b""We don't need it in the log profiler. I just figured I'd pass it in case some other profilers might find it useful.\n"""
2195,43746910,b'You mean just s/`%2s`/`%3s`/g?\n'
2197,43839855,"b""Please prefix with `mono_` so we don't pollute the global namespace.\n\n(I know we already do this here, but I've been trying to clean these up over time.)\n"""
2200,44033766,"b'Not familiar with the code, but this looks to be changing semantics while the commit itself just makes it sound like a build fix. If this is intentional, please explain it in the commit message and possibly split it into a separate commit if appropriate.\n'"
2200,44034305,"b""It's fine to add a newline at the end of files that don't have it so that we can avoid formatting noise from editors that add it automatically (which is most of them). Please split that into a separate commit, though.\n"""
2393,48733997,b'Why not `private`? What if other code outside this class tries to access it without locking?\n'
2422,49538909,b'PPC64 is missing here.\n'
2546,51344547,"b""These messages need to be changed so it's clear that we need `libtoolize` from the libtool package, not `libtool`.\n"""
2657,53528309,"b'Just do `{ ... }`, no need for a control structure.\n'"
2664,53715194,b'this should carry the `strerror (errno)` result\n'
2761,56134175,"b""I'm not sure what you mean. `mono_native_thread_create` literally just calls `pthread_create`. It doesn't attach the thread to the runtime at all, which is exactly what we want.\n"""
2761,56134847,"b""I forgot to put a WIP tag on this PR, sorry. I put it up mainly to get Jenkins testing. I'm aware of the time drifting problems - I talked to Ludovic about fixing `mono_thread_info_usleep` to use `clock_nanosleep` just like `mono_thread_info_sleep` (the milliseconds variant) does, and that's how I intend to fix it.\n\nRegarding real time scheduling, we can't actually do that on Linux. Only privileged processes (or processes that have the right `RLIMIT_RTPRIO` value set) can move to real time scheduling. It looks like OS X is more lax about this so we might be able to get away with it there. We could also try to do it on Linux and just silently ignore an `EPERM` error if we get one, that way it'd work on systems that are configured to allow real time threads.\n"""
2761,56147098,"b'So to be clear, `CLOCK_REALTIME` for the `MONO_PROFILER_STAT_MODE_REAL` case, and `CLOCK_PROCESS_CPUTIME_ID` for the `MONO_PROFILER_STAT_MODE_PROCESS` case? And on OS X, `CALENDAR_CLOCK` and `SYSTEM_CLOCK`?\n'"
2763,56189730,"b""We don't install this header publicly, so is this include needed?\n"""
2761,56433003,"b""OK, I'm certainly not opposed to introducing new functions for this use case. I'll do that instead.\n\nI feel like we ought to still discuss the confusing situation surrounding the sleep functions in mono-threads though. What (mis?)led me to believe that absolute time based waiting in `mono_thread_info_usleep` would be fine is the fact that `mono_thread_info_sleep` does exactly that. When it can, anyway; on some platforms, it falls back to `nanosleep` instead of `clock_nanosleep`, and if it's an interruptible sleep, it may use `sem_timedwait` which, as I understand it, is based on real time rather than a monotonic clock. Then there's the fact that the way it calls `nanosleep` seems to misuse the `rem` argument.\n\nI guess it's just not very clear to me what a user of these two functions should be expecting from them.\n"""
2761,56434211,"b""I did it this way based on precedent: The (single) SGen thread pool thread does exactly what I'm doing here (create the thread via `mono_native_thread_create` and call `mono_thread_info_register_small_id` to get access to the lock-free data structures). It made sense to me since there's probably no reason we should want the sampler thread in the thread list (especially if we don't use `mono_thread_info_usleep` after all, as discussed above). That said, I don't actually feel strongly about it either way. We can certainly just call `mono_threads_attach_tools_thread` for simplicity's sake.\n\nBut to be clear, there's not actually anything wrong with the way the thread is _created_, right? Just the way it's being attached? Your original comment talked about suspendability, but I don't think it would be suspendable with either approach.\n"""
2761,56434312,"b'I meant that `CALENDAR_CLOCK` would be used for the real time case, and `SYSTEM_CLOCK` for the CPU time case.\n'"
2753,56435096,"b""We should avoid the `g_` prefix in general. We use it in eglib because we remap all symbols to `eg_`, but we wouldn't be doing that here, so it could potentially clash with some function in glib in the future (though unlikely, granted).\n"""
2783,56971738,"b""Yep, we've been C99 since around Feb 2015.\n"""
2791,57305883,b'`__func__` is portable and does the same thing\n'
2805,57852194,"b""We don't need to use the `remain` argument. It actually won't even be set since we're passing `TIMER_ABSTIME`. `clock_nanosleep` will simply return immediately if `then` is in the past.\n"""
2805,57852236,b'Same thing applies here as for `clock_nanosleep`: `clock_sleep` will return immediately if `then` is in the past.\n'
2805,57852373,"b'Good point, those are leftovers from when I was trying to abstract this stuff in `mono-time.c`.\n'"
2805,57859036,"b""That's a really good point and does result in much better sleep times.\n"""
2816,57974288,b'This should be documented in `man/mono.1`.\n'
2816,57974419,b'Code style: Space between function name and opening parenthesis.\n'
2816,57974540,b'This comment can be a bit confusing since we have another enum in `metadata/profiler.h` that is called `MonoProfileSamplingMode`.\n'
2769,58293141,b'odd extra space there\n'
2837,58636161,"b""Do we state this clearly somewhere? If so, I'm all for getting rid of this nonsense.\n"""
2837,58636423,"b'OK, will get rid of the `dlsym` stuff.\n'"
2861,59218642,"b'> I do think in addition to just returning, we should increment a ""dropped frames due to insufficient reusable sample events"" counter at this place. Being able to quantify frame drop would be helpful for a user trying to pick a correct value for maxsamples=.\n\nThe idea was that that would be hits vs actual events flushed to disk, e.g.:\n\n```\nSample hits                         : 5612968\nSample flushes                      : 3743669\nSample events allocated             : 8007\nHazardous sample events             : 163\n... snip ...\nSampling signals sent               : 5619571\nSampling signals received           : 5619571\nSampling signals accepted           : 5612968\nShutdown signals received           : 1\n```\n\nI changed it from a number of dropped frames to this mainly to maintain parity with how we report number of signals sent vs number of signals received, but I don\'t actually care much which way we present it, as long as it\'s consistent.\n\n> Also: Why are you checking || hazardous in the condition if the previous clause prevents flow control from reaching this point when hazardous is true?\n\nLeftover from before adding the retry.\n'"
2861,59504397,"b""It being hazardous means another thread is currently looking at it, right? So I figured things would break pretty badly further below when we add it to `dumper_queue` if it's hazardous.\n"""
2861,59531953,"b""We're not freeing it, just adding it back to the reuse queue if it's hazardous (see `reuse_sample_hit` which is the 'free' function we pass here). It's similar to what the lock-free allocator does to reuse descriptors.\n\nI'll add a comment to make this more obvious; it's easy to misunderstand when skimming over the code.\n"""
2861,59532090,"b'Sure. I intend to document most of the profiler changes in the release notes as there quite a lot, and many of them do affect users.\n'"
2861,59532149,"b""I'll add an assert to catch this + a comment.\n"""
2882,59736886,"b'I do not know the lock-free queue code enough to answer the ""why?"" question. What I can tell you is that if you run a stress test with `--stats`, you\'ll see a small but non-zero number for `Sample hazards`.\n\nAlso, if you remove the handling of the hazardous case, you will get this: https://gist.github.com/alexrp/ca8f79d2e22fcb1b752457458aa9672b\n'"
2955,61199922,b'This needs to be declared as `WINBASEAPI ULONGLONG WINAPI GetTickCount64(void);` (as per `mono-os-mutex.h` declarations).\n'
2881,63442444,"b'@schani to clarify, the only functional change is here (was an acquire barrier before).\n'"
3015,63779988,"b'I think better macros to use here would be `PLATFORM_MACOSX`, `HOST_WIN32`, `PLATFORM_LINUX`, and `PLATFORM_ANDROID` as these all reflect the host platform, not the target platform.\n'"
3015,63784375,"b""- `PLATFORM_MACOSX`: https://github.com/mono/mono/blob/master/configure.ac#L283\n- `PLATFORM_LINUX`: https://github.com/mono/mono/blob/master/configure.ac#L350\n\nAlthough in the case of `PLATFORM_LINUX`, we are for some reason looking at `target_os`. Not terribly hard to fix at a later point, though. It shouldn't do any harm to use the macro now anyhow.\n"""
3018,63811177,"b'Should this not be using `EMIT_NEW_DOMAINCONST (cfg, ins)`? (If not, please document in a comment why.)\n'"
3068,64983036,"b""Should be `MINI_OP3_FLAG` perhaps, since we'll likely need a `MINI_OP2_FLAG` in the future? Otherwise LGTM.\n"""
3074,65108082,b'incorrect signature\n'
3074,65109834,b'Why `int32_t` when it returns a bool though?\n'
3074,65211526,"b""I see, it's a public header. So we should use `mono_bool` here.\n"""
3068,65220082,b'I see no issue with that. @vargaz?\n'
3068,65257795,"b""Well, looking at all the `MONO_IS_...` macros, we'd probably end up with quite a few flags.\n"""
3127,66298868,"b""Judging by the instructions listed in the AArch32 section of the ARMv8 manual, I'd say assuming ARMv7 is safe. Judging by E1.2.1 and E1.3.2, I'd say assuming full VFPv3 support is also safe.\n\nThumb I'm not actually sure about. Any idea?\n"""
3129,66300522,"b'Why relative paths? ~~I doubt this will work in out-of-tree builds.~~ Actually, I guess the end result is the same. Still, why the change in path style?\n'"
3127,66382690,"b'OK, digging through some ARM docs, it seems Thumb and Thumb-2 are both supported in ARMv8. See here: http://www.arm.com/products/processors/armv8-architecture.php\n'"
3141,66443592,"b'Should be `cookies`, no?\n'"
3164,66848768,b'Why the change from `=` to `:=`?\n'
3213,68785171,b'`i += 2` and remove the increment below?\n'
3260,70169525,b'How about putting a similar comment at the declaration of the native struct?\n'
3285,70899090,b'Typo here + a few other places.\n'
3285,70899355,b'This change is unexplained.\n'
3285,70899550,"b'The opcode takes no args, so should be `InlineNone`.\n'"
3278,70900201,"b""There's a similar comparison to `FALSE` further up that you may want to change as well.\n"""
3290,71087185,"b'Given that this is used in the corlib tests, I think it would be better to store the file in `mcs/class/test-helpers` for consistency.\n'"
3341,72879182,b'Leftover?\n'
3341,72879222,b'Copy/paste leftover?\n'
3341,72879281,b'You can use `mono/utils/atomic.h` and `mono/utils/mono-membar.h` from in-tree profiler modules.\n'
3341,72879363,"b""Where's the managed side of this?\n"""
3341,72918165,"b""If the overhead is significant, we could disable the overridable allocators by default and print an error message in the malloc profiler instructing the user to recompile with overridable allocators enabled to use it. Since this profiler is probably most useful to runtime developers, that's probably fine?\n\nThe alternative is disabling the malloc profiler when overridable allocators are disabled, but it would be nice to always build it regardless of the availability of overridable allocators so we can catch breakage early.\n"""
3341,73277934,"b""Ah, ok. Maybe add a comment with a short C# snippet showing how the declaration should look? Just so it's easily copy/pastable.\n"""
3341,73303647,"b""This change is ok, but one thing needs to be done to ensure the log profiler won't break: The `mono_counters_register` calls [here](https://github.com/mono/mono/blob/master/mono/profiler/proflog.c#L4735) must be moved to [here](https://github.com/mono/mono/blob/master/mono/profiler/proflog.c#L4431) (just after the write to `runtime_inited`).\n\nOtherwise, we'll hit [this](https://github.com/mono/mono/blob/master/mono/utils/mono-counters.c#L247) path and the counters won't register.\n"""
3350,73670344,"b""It's a style commonly used in LLVM that I decided to use to make the assertions a bit more meaningful.\n"""
3350,73670447,"b""You might be right. I'd forgotten about threads like the finalizer thread and TP threads. Will have a closer look.\n\n(All other 'normal' managed threads should be gone by this point.)\n"""
3350,73670987,"b""Not entirely sure what you mean by that. Let's discuss this one on Skype?\n"""
3350,73671308,"b""It can't, this looks like a leftover from an older (non-working) design of the lock.\n"""
3350,73683003,"b'OK, I did some digging, and this should not be an issue. By the time this shutdown callback is invoked, _all_ threads have been shut down (including finalizer and TP threads), and the profiler event flags are set to zero immediately after this callback returns. So no more events will come from the main thread, either.\n'"
3350,73688724,"b""We could do that, but perhaps it's a good idea to wait until we kill off `__thread` support (if we do) to reduce complexity.\n"""
3350,73693320,"b""It was there to catch things like:\n\n``` c\nstatic void\nsome_callback (MonoProfiler *prof)\n{\n    ENTER_LOG;\n\n    LogBuffer *buf = ensure_logbuf (...);\n\n    /* write some data to buf */\n\n    /* get some data from the runtime, triggers some_other_callback */\n    stuff = get_something_from_runtime ();\n\n    /* write stuff to buf */\n\n    EXIT_LOG;\n}\n\nstatic void\nsome_other_callback (MonoProfiler *prof)\n{\n    ENTER_LOG;\n\n    /* here we'd end up writing in the middle of another event */\n\n    /* ... */\n}\n```\n\nThe correct way to write the above would be to call `get_something_from_runtime` outside of the `ENTER_LOG`/`EXIT_LOG` pair.\n\nI've never seen this catch any actual errors in the profiler, though, and I've gone through and checked all event callbacks to make sure they don't call runtime functions while writing to a buffer. Unfortunately, even if this debugging code would have caught problems, all it would do is write to `stderr`, not assert or anything. So there's a good chance it would just be missed.\n\nThat said, the reason I removed this debugging code was that I originally intended to remove the `ENTER_LOG`/`EXIT_LOG` macros. But as you can see, I settled on keeping them to create a scope around buffer writing. So, we could just replace the old debugging code with some code that actually asserts if such a case is ever hit.\n"""
3469,76580977,"b'Well, the whole point of doing it like this is so that the user can override it with `CFLAGS` in the environment. Can I just modify the `run-jenkins.sh` script in this PR?\n'"
3464,76860187,b'Probably a bit overengineered. Will simplify before merging.\n'
3490,76861632,b'Code style: Space before opening parenthesis.\n'
3490,76861710,b'Code style: `else` should be on the same line as `}`.\n'
3504,77186600,b'The code deletes the file before saving the assembly: https://github.com/ntherning/mono/blob/c862a7b42378773333a4dae5f0dcd5626d6510f1/mcs/class/corlib/Test/System.Reflection/PropertyInfoTest.cs#L386\n\nThe file is also covered by `.gitignore`. So it should be ok.\n'
3532,77945730,b'Seems to be working fine without. What difference does this make?\n'
3532,77945958,"b""`System.Net.Http.Formatting.dll` and various other assemblies in `mcs/` do it like this, and I can't find any makefiles that build and install `Newtonsoft.Json.dll` in the GAC.\n"""
3546,78864124,"b'Yep, good point. I completely forgot to apply the `G_UNLIKELY` to many of the checks.\n'"
3546,78864290,"b'Yeah, this is a really good argument for why we should not be calling `mono_profiler_enable` in `mono_profiler_new`/`mono_profiler_install`, only in `mono_profiler_load`.\n'"
3546,78864432,"b'For whatever strange reason, this macro is defined for all Apple platforms. It should be renamed at some point.\n'"
3546,78864770,"b'Because in the same commit, I moved helper thread initialization to just after counters initialization, and made sure only the helper thread samples counters. So counters will always be initialized when we sample them.\n'"
3546,78864928,"b'Yeah, I like that way of doing it more.\n'"
3546,78865072,b'This plus a few other crash/deadlock fixes in this PR are definitely worth backporting.\n'
3546,79268896,"b""Vlad already OK'd the SGen changes [here](https://github.com/mono/mono/pull/3546#issuecomment-246440551).\n"""
3546,79511548,"b""> The serve no purpose when allocation profiling is disabled.\n\nOops.\n\n> More importantly, have you discussed this change with the profiler team?\n\nAFAIK, they always enable allocation events anyway, so this shouldn't affect them. But I'll check with Moya to be sure.\n"""
3546,79512587,"b""We do. For example, if we can't set up the server socket for whatever reason, we `exit (1)`. We also do it for command line syntax errors, e.g. `log:sample=,alloc`. Whether that's good or bad is arguable, but I'm just following precedent here.\n\nI don't think there's much value in continuing to execute if the profiler is in an unusable state, though. Note that this particular check will only fail at early startup if either the pipe or server socket FD is larger than `FD_SETSIZE` for some reason.\n"""
3546,79513156,"b'`select` can return these errors: `EINTR` (signal, we handle this one), `EBADF` (bad FD, indicates a programming error, because the server socket and pipes should not be closed at this point), `EINVAL` (bad arguments, programming error), `ENOMEM` (OOM, nothing we can do at that point).\n'"
3601,79824107,"b""That doesn't look right.\n"""
3617,80174719,b'indentation is off\n'
3659,80818396,"b""I think these functions could use some documentation in general. Unless you've done a lot of programming with the managed equivalents of this synchronization primitive, it's not exactly obvious what the parameters mean and what semantics the functions have given different init parameters.\n\nIt would also be nice to expose `mono_os_event_destroy` as some code that might want to use a `MonoOSEvent` doesn't necessarily want to deal with reference counting. In fact, if the lifetime of a `MonoOSEvent` is very straightforward and all you need is init/destroy, having to use ref/unref would really just make the code confusing (a reader would end up thinking that the event has a more complicated lifetime than it actually does).\n"""
3678,81269618,"b""If it's not defined for other BSDs, then that's a bug.\n"""
3777,83634556,"b""Indentation remains broken here as there's still a tab at the start of the line.\n"""
3765,83643823,"b""Shouldn't this value be dependent on whether we actually detect SSE support?\n"""
3678,84041454,b'I misunderstood what you meant; checking if `F_RDAHEAD` is defined seems reasonable.\n'
3853,85684035,b'debugging leftover\n'
3929,87400046,b'Use `mono_set_pending_exception` + `return` instead of raising directly.\n'
3929,87400460,b'Declarations should go like:\n\n```\nstatic gboolean\nis_object_pinnable (MonoObject *obj)\n{\n    ...\n```\n'
3929,87422081,"b""You need to actually return here (`-1` or whatever, doesn't matter - it gets discarded by the icall wrapper), or you'll allocate a handle one line below and then leak it. `mono_set_pending_exception` is not a no-return function like `mono_raise_exception`.\n"""
4131,91990330,b'Tabs instead of spaces.'
4131,91990532,b'System header `#include`s should go above our own headers.'
4135,92087121,b'This should be `static` or have a `mono_` prefix.'
4176,93162897,"b""Minor style nitpick: Shouldn't the `MONO_PROFILER_API` be applied before the return type? That's what we usually do for `MONO_API` (and also the uses you added above and below)."""
4176,93162921,b'Could we separate the introduction of this macro into its own commit?'
4323,99285804,"b""But what is the reason for this change? It's GCC-specific syntax anyway, so why make it look even uglier?"""
4502,105310799,b'That trailing `\\` should probably not be there.'
4658,110480983,b'No particular reason other than me being tired when I wrote it - will change it.'
4658,111043198,"b""Yeah, it isn't a perfect solution. It's meant as nothing more than a suggestion to readers to back off the next time they try to increment the reader count.\r\n\r\nThat said, I believe this is not an issue in practice. We only take the writer lock when a thread is GCing and from the helper thread when doing periodic sync points. If those two things happen at the same time, it doesn't actually matter that a few readers manage to get in between them. The important thing is that is that a sync point gets emitted in a timely fashion.\r\n\r\nCould probably just make it a counter incremented/decremented by `buffer_lock_excl`/`buffer_unlock_excl` to solve the issue anyway."""
4658,111043324,"b""Good point, and it probably wouldn't hurt to have some macros for accessing/setting the lock state either."""
4658,111043595,"b'It is. It\'s used in `init_thread` in case the thread hasn\'t attached yet, in which case `mono_thread_info_get_small_id` returns `-1`.\r\n\r\nI think you might\'ve forgotten to click ""load diff"" on `mono-profiler-log.c` in the full changes view. Great GitHub feature, right?\r\n\r\n'"
4658,111043683,b'Very good point. We should *only* do this when we use an RT signal as those are never discarded.'
4658,112276156,"b""Most OS-provided R/W locks don't provide strong enough guarantees about reader/writer bias, nor do they even let you configure it. It's kind of crazy, and means you're better off rolling your own R/W lock most times that you need one.\r\n\r\nIn our case, we need writer bias for two reasons:\r\n\r\n1. We take the writer lock when initiating STW. So if one or more threads are just sitting and rapidly generating non-GC-related profiler events with zero GC allocations, it could cause massive delay in the whole STW process, which in turn slows the entire app down for no good reason.\r\n2. We take the writer lock from the profiler's helper thread to generate periodic sync points in the log. When a reader is processing a log, it's expected to queue up events between sync points, sort them by timestamp, and then process them. So, we want these to arrive in a timely fashion so that a reader doesn't end up with tens (or even hundreds) of thousands of events between two sync points.\r\n\r\nAs far as I know, most OS R/W locks are also way heavier in general than what we have here. For example, they need to support recursive read locks, which is very hard (impossible?) to do without either being inefficient or sacrificing writer bias.\r\n\r\n(This reminds me that I forgot to update the comments in this PR: The reader lock is not actually recursive.)"""
4751,113423763,"b'This implementation is not quite correct. The strongest barrier this instruction supports, `MONO_MEMORY_BARRIER_SEQ`, would require a full barrier on both sides of the store.\r\n\r\nAdditionally, doing the store itself as regular C `*dst = src`, as opposed to using an atomic intrinsic, is prone to esoteric compiler optimizations even with memory barriers. The best thing to do here would be to just call `InterlockedWrite` from `utils/atomic.h` to implement this instruction.'"
4840,117617535,"b""It's mostly equivalent anyway, since the compiler will CF+DCE it on 32-bit targets. It reads nicer than preprocessor directives IMO, and we will need to do it this way anyway if we want to eventually support cross-compiling for different bitness."""
4967,120162176,b'Already included above.'
4967,120162341,"b'Is there a reason for this enum naming style? It deviates from the style we use throughout most of the runtime AFAIK. I was actually a bit confused what `DomainEvents` was when I was reading the arg-parsing.c code above. My first thought was ""what is a type name doing here?"".'"
4967,120162709,b'Naming inconsistency here. I think `TypeSystemAlias` would be best.'
4967,120163221,"b""Would that serve an actual purpose? They're just default values after all."""
4967,120163692,b'Too many `[`s.'
4967,120163883,"b""We should only document `cycles`. The others were part of the Linux perf support which we've removed. `sample=$freq` is the preferred option style now."""
4967,120164193,b'`covfilter=-mscorlib`'
4967,120164396,"b'We always overwrite now, so we should probably take this opportunity to drop support for `-FILENAME`, or at least deprecate it.'"
4967,120164915,b'I definitely prefer `calls`.'
4967,120165542,b'It would be nice to move this near the top of the file and use it instead of all the global variables we have right now. Not a blocker though.'
4967,120165968,b'Minor thing: It would be nice to add a `TODO` here since we should really split these events into two separate flags in the profiler API.'
4967,120166637,"b""I just realized this is the only case of the profiler using environment variables, and I can't really think of a good reason why. Would be nice to turn this into an option. Can be addressed later though."""
4967,120166994,"b'`proflog_parse_args (&config, desc [3] == \':\' ? desc + 4 : """")` ?'"
4967,120167164,"b""So we won't support filtering these out of the MLPD while still receiving them from the runtime for the profiler to work?"""
4967,120240840,"b'Actually, maybe we should take this opportunity to just get rid of the old syntax (in `set_sample_freq`) and make it `sample=$freq` only.'"
4967,121096110,"b""`g_warning` so it doesn't get lost on Android/iOS?"""
4967,121096227,b'This line should be removed.'
5019,121538712,"b""Yes. This library will, in the future, allow interacting with the profiler while it's running, so having it available on mobile is important."""
5019,121538870,"b""There will be a whole test suite based on this library that will replace the current profiler test suite. That'll be a separate PR."""
5019,121539301,b'Yes. The Xamarin Profiler has in fact started doing object pooling exactly like this because the sheer amount of event allocations was proving to be a problem. This design is based around their needs.'
5019,121539728,"b""The profiler emits synchronization point events every second. If we go by sampling alone, we generate 100 events per second per thread. So not that big. It's also worth noting that the Xamarin Profiler already does this in its internal MLPD reading library."""
5019,121540099,"b'I mean, what stops us from shipping it on mobile, exactly?'"
5011,121558890,"b""Shouldn't this be `PROFLOG_FINALIZATION_EVENTS` ?"""
5019,121617477,"b""I don't understand what you're proposing here. Those instances are the problem. How would not pooling them solve anything?"""
5019,121618184,"b""The MLPD reading is not the important part for mobile. The `LogRuntimeProfiler` class, when actually implemented, will contain methods for interacting with the profiler at runtime. The code isn't there yet, but I don't see any harm in including the library for mobile now to make sure it actually builds, especially since changes need to be made in XA/XI for it to be included there anyway, which we can do when the library is ready."""
5019,121620719,"b""Since it's only available for some stream types, what good would it actually do? Sure, when it's available, we can detect EOS and return normally, but for stream types where it isn't, we'll still throw an `EndOfStreamException`. So, either way, the caller ends up having to catch that (or we do it internally)."""
5011,121621478,"b""Why are we checking both flags here? I'd think we should just check `PROFLOG_GC_MOVES_EVENTS`."""
5019,121629191,"b""Like I said in the PR description, I'm open to ideas. I don't know any universal way to detect the end of a stream before reading from it with a `BinaryReader`. So one option is that we catch the `EndOfStreamException` when trying to read the buffer header, and just return normally."""
5019,121636916,"b""That's a good point. The code shouldn't even be using `Position`, then, as it needs to work on e.g. `NetworkStream` for live profiling. That's a simple fix anyway. That still leaves us with the same problem, though."""
5019,121638585,b'One thing we can do is have a `Clone` method on all these `LogEvent` classes so that a user can easily make a copy if they really want to keep a reference around.'
5019,121681875,"b""I don't think the profiler team wants to deal with a different API for live vs offline reading. @rodrmoya ?"""
5019,121685450,"b""There are a few issues with this:\r\n\r\n1. It won't work with non-seekable streams.\r\n2. How do we sort all events between two sync points by timestamp in this design, while avoiding boxing?\r\n3. You can't actually just read a random event in a log file because interpreting the values in that event requires having read all prior events in that buffer."""
5019,121689656,b'No idea how that snuck in there...'
5032,122070954,b'No need for this wrapper function anymore.'
5064,122596947,b'indentation error'
5064,122596976,b'cc @jonpryor '
5064,122597018,"b'indent white tabs, then use spaces to align'"
5064,122597022,b'ditto (and same throughout)'
5062,122798878,b'We can definitely reuse the buffer.'
5062,122805504,b'Fixed.'
5062,122805561,b'Added a string buffer. Is this what you had in mind?'
5063,122809207,"b'Yes, I was actually thinking of doing exactly that instead.'"
5063,122809325,"b""It's documented in a later commit that updates the format description + change log in the header."""
5083,123126456,"b'No, it would be unset for the next use below.'"
5083,123131709,"b'Oh, thought you were commenting on the other one. Done.'"
5083,123131812,"b""Right, it's only meant as an optimization hint for code where you're confident you know what you're doing. I figured we should just handle and ignore the instruction, rather than abort on it."""
5092,123565931,"b'I think it should be possible. The only concern would be interaction with inlining, I guess (see the `cfg->method == method` check above).'"
5088,123755573,"b""Well, I'm removing it because it has no meaning after this change. It was only there to filter out enter/leave events when doing coverage, but with this PR, we don't even enable those events for coverage anymore."""
5101,124934017,"b""I only implemented it for SGen. Boehm will just continue to use the native allocation functions as it always has. Well, unless there's some compelling reason why we should bother with adding new features to Boehm."""
5101,124934099,b'Intended. I thought this argument ordering made a lot more sense (subject first).'
5101,124934245,"b""Yes, due to the method JIT event hack in the profiler, which probably isn't going away anytime soon."""
5101,124936889,"b'The installed filter functions will determine if anything actually gets allocated here. If no filter functions are installed, `mono_profiler_coverage_alloc` returns `NULL`.'"
5101,124937349,"b""That's implicit. If no filter functions are installed, enter/leave is not enabled. I don't think requiring it to be explicitly enabled adds much value compared to just installing a filter function if you want to use the feature.\r\n\r\nEdit: Not sure why my previous comment here disappeared and then reappeared. \xf0\x9f\x98\x95 """
5101,125057728,"b""I think that would be confusing behavior. In that case, if a profiler installs an allocation callback but doesn't call `mono_profiler_enable_allocations`, it'd be notified of allocations from C code, but not from those done in managed allocators. It seems better to require a profiler to call `mono_profiler_enable_allocations` if it wants allocation notifications *at all*."""
5101,125090484,"b""I *think* this hack only affects `DynamicMethod`s, but not 100% sure. If that's the case, I would say it's not worth spending time on right now. I'll file a bug for it in any case, though, so it's not forgotten."""
5191,126294455,"b'Could we factor this into a separate macro? Like so:\r\n\r\n```c\r\n#if defined (__has_feature)\r\n#define MONO_CLANG_HAS_FEATURE (...) (__has_feature (__VA_ARGS__))\r\n#else\r\n#define MONO_CLANG_HAS_FEATURE (...) (FALSE)\r\n#endif\r\n\r\n#if MONO_CLANG_HAS_FEATURE (thread_sanitizer)\r\n#define MONO_NO_SANITIZE_THREAD __attribute__ ((no_sanitize (""thread"")))\r\n#else\r\n#define MONO_NO_SANITIZE_THREAD\r\n#endif\r\n```'"
5126,127435911,"b""We already bumped it in master and haven't shipped it yet AFAIK."""
5126,127436115,"b""I don't think we should raise these events in Boehm since we don't report roots anyway."""
5126,127436746,"b""A few things:\r\n\r\n* Please add a comment above the enum that points to the C enum (as for the others here).\r\n* I think `LogHeapRootSource` would be a better name, since e.g. `Threading` is not a kind, it's the subsystem of the runtime (source) it comes from.\r\n* I prefer to use explicit enum values when we're mapping to a C enum, especially if that C enum is using explicit values too.\r\n* I think we should use singular names here, i.e. `StaticVariable`, `GCHandle`, etc.\r\n* `Marshalling` -> `Marshal` for consistency with the rest of .NET."""
5126,127437031,b'Should be `HeapRootUnregister`.'
5126,127437191,"b""Don't forget that this will require changes in the products."""
5126,127437634,b'Minor point: `0` -> `NULL` for clarity.'
5126,127437736,b'No separate source value for critical finalizers?'
5126,127437958,b'Should be `TYPE_HEAP_ROOT_REGISTER` and `TYPE_HEAP_ROOT_UNREGISTER`.'
5126,127438080,"b'This line should go in the changelog for the profiler version, not the data version, further up the file.'"
5126,127438254,b'We should document specifically which event it used to be emitted after and which one we emit it after now.'
5126,127438281,"b'Also, indentation is off. We use spaces here for whatever reason.'"
5126,127438416,b'A bit of line damage here.'
5126,127438466,b'Missing `TYPE_HEAP_ROOT_UNREGISTER`.'
5126,127438685,"b""What's up with this one?"""
5126,127439104,"b""Isn't the handle stack allocated with `mono_gc_alloc_fixed` or something?"""
5126,127439286,b'Minor point: You could use object initializers for these.'
5126,127441290,"b'This cast looks wrong. In the `thread_started` event above, we pass the result of `MONO_NATIVE_THREAD_ID_TO_UINT (tid)` (see the call site of this function), but here, we convert it back to native thread ID before passing it.\r\n\r\nSame for most of this file. We should be consistent about passing one kind of TID.'"
5126,127441906,"b""In what situations do we expect `thread->internal_thread` to not be set here? I'm not too familiar with this code."""
5126,127442064,"b""* I generally try to keep these events 'namespaced', so these should be `gc_roots`, `gc_root_register`, and `gc_root_unregister`.\r\n* They should also be in the section above with the other `gc_*` events.\r\n* `GcRoots2` -> `GCRoots`, especially since we're just removing the old event entirely.\r\n* `gc_root_register` should be typed as `const mono_byte *start, uintptr_t size, MonoGCRootSource source, const void *key, const char *msg` for consistency with the rest of the events.\r\n* `gc_root_unregister` should be typed as `const mono_byte *start`.\r\n* `gc_roots` should be typed as `uint64_t count, const mono_byte *const *addresses, MonoObject *const *objects`."""
5208,127540493,"b""Couldn't we include them as a source-only library along the lines of Mono.Options? I.e. we only build them for the purpose of testing, and the products just point to the source file(s) in the Mono repo."""
5126,127555819,"b""You're right. For some reason, I was under the impression that they did. Why on earth are these `MONO_API` then?"""
5126,128065489,"b""I forgot to mention this in my last review: Each kind of event should have its own kind of counter, so you'll want to add one for root register and root unregister events."""
5126,128381287,"b""Would be a good idea to put a TODO comment here so it isn't forgotten."""
5126,128381334,"b""It's unclear what purpose this check serves."""
5269,129600062,"b""Don't forget to at least add an empty case to other backends.\r\n\r\nAlternatively, you could query `mono_arch_opcode_supported ()` and only emit the IR opcode in that case. Would be a bit less wasteful."""
5274,130096095,"b""It just works, except for the special case regarding LLVM-only that's mentioned in the comment.\r\n\r\nOf course, you can't instrument code that has already been AOT'd."""
5284,130225089,"b'Mono is C99 now, you can move this variable into the loop initializer.'"
5285,130244556,b'VLAs are not supported by MSVC. Just use `alloca`.'
5298,130742064,"b""For whatever reason, we're using spaces for indentation here."""
5309,131345801,b'Why do we have nameless trampolines? That sounds odd in the first place.'
5310,131379721,b'These functions should also be marked `MONO_ALWAYS_INLINE`.'
5310,131379744,b'explicitly'
5310,131380440,"b'You need to add this file to `mono/utils/Makefile.am` and `msvc/libmonoutils.vcxproj`, `msvc/libmonoutils.vcxproj.filters`.'"
5305,131402509,b'Why not just allocate a handle with `GCHandleType.Weak` ?'
5320,131550774,"b""While you're here, could you make this a static variable instead of allocating it on the heap?"""
5344,132165594,b'Then declaring them becomes rather cumbersome since you have to explicitly specify the array size.'
5352,132596763,"b""The plan is to remove this option exactly because `output=stuff.mlpd.%p` does the same thing. So I'd rather not document it."""
5381,133302158,"b'Anything starting with `sgen_client_` is part of the SGen API, so this is a breaking change.'"
5381,133310831,b'Please split the changes to this file into a separate commit.'
5382,133318907,"b""If this is a public header, it shouldn't be depending on glib.h either, should it?"""
5381,133322190,"b""I guess @schani would know. He did the whole SGen separation effort for a use case I can't remember."""
5382,133362863,"b""I would say it's fine to break the API in this case? I mean, realistically, nobody was ever able to use this header because we don't install eglib's glib.h as part of Mono's public headers, so I doubt you'd *actually* be breaking anybody's code."""
5413,134275831,"b""`InterlockedAdd (location, -value);` will do the same thing you're trying to do with this function. I'd prefer that to introducing more functions here, since this header is sorta supposed to be as close to the Win32 Interlocked APIs as possible.\r\n\r\nI do want to, At Some Point\xe2\x84\xa2, replace this whole header with an API that's closer to the C++11 atomics API (which includes subtract) since that's what the world is converging on (whether we like it or not)."""
5413,134289333,"b""`unlocked.h` doesn't really have to match our atomics API."""
5413,134295585,"b""I would say it doesn't matter for now, since it's a fairly rare occurrence for us to change a racy operation to an atomic one or vice versa. Also, whenever I get around to refactoring the atomics API, I'll update both APIs to be similar."""
5409,134327158,b'Unnecessary variable?'
5409,134329980,"b""`state` is assigned below but isn't used."""
5415,134355632,b'Should probably document the meaning of this string (even if there is none).'
5420,134529189,"b""Wasn't this already fixed in #5398 ?"""
5517,137339740,b'This should just be `typedef struct { ...`.'
5517,137339788,b'These should be `MONO_PROFILER_API` as this is not a public header.'
5517,137340423,b'Nit: Which methods are to be instrumented.'
5517,137340836,b'These should be `MONO_PROFILER_API` as this is not a public header.'
5512,137341491,"b'Instead of all this repetition, just add a `LogEvent ev` local variable, assign to it in all cases instead of immediately returning here, and set the properties before returning `ev`.'"
5512,137341759,"b'This should be 0, not -1.'"
5512,137341798,"b'This should be 0, not -1.'"
5512,137361378,"b""That ends up with the same amount of repetition, just elsewhere. Since `LogEvent` instances can only be constructed by the library (by virtue of the `LogEvent` constructor being `internal`), I think it's fine to just use the `internal` setters on `Buffer` and `Timestamp`."""
5528,137797387,b'These should use begin/end naming for consistency.'
5528,138856086,b'`ToArray` would be better.'
5528,139766706,"b""Let's just call these `MinVersion`/`MaxVersion`. It's obvious from the context what they refer to. Also, empty line after the `class ... {` as per the Mono coding guidelines."""
5528,139766776,b'Missing period at the end of the message.'
5528,139767210,b'We should tag these with `[Obsolete]`.'
5528,139776623,"b'It needs to be on all four of them. \xf0\x9f\x98\x9b\r\n\r\nAlso, maybe something like this:\r\n\r\n```csharp\r\n[Obsolete (""This event is no longer produced."")]\r\nMarkBegin = 1,\r\n```'"
5610,139955443,"b""`LogProcessor` needed public access to it, and the base method is `protected`. But it doesn't matter; this approach didn't work anyway. I've pushed a new approach."""
5517,140639146,"b'Minor thing: I\'d write this as `""Could not parse callspec \'%s\': %s""`.'"
5667,141995278,b'The comment at the top of the file must be updated for this change.'
5643,142101978,b'The magic happens here: https://github.com/mono/mono/pull/5643/files#diff-64e89b1efb0df96de7d470b217d4a1a6R40\r\n\r\nIt would be nice to add to the comment above that the function name prefix is set in the makefile.'
5680,142236182,"b'These comments should be worded consistently and also appear at all places where you\'re moving this directive above the `#include ""map.h""`.'"
5637,142569377,"b""> AFAIK, you yourself have to be an unsafe (function|block) to call an unsafe function.\r\n\r\nThis is only true if the method has an unsafe return value or parameter(s), i.e. pointers. `unsafe` doesn't even exist on the IL level. If you declare something like:\r\n\r\n```csharp\r\npublic unsafe void Foo (int x) { ... }\r\n```\r\n\r\nYou can totally call that in non-`unsafe` context."""
5723,143297324,b'Should be `mono_atomic_*_word` or something.'
5723,143297400,"b""This change doesn't look right."""
5723,143321152,"b""This new name is kinda misleading. We have other `_ptr` functions which operate on actual pointers, but these macros operate on integers. This is an important distinction because e.g. `std::atomic` in C++ does support add/subtract operations on pointers. For example, `std::atomic<int *> x = ...; x.fetch_add (1);` will increment `x` by `sizeof (int)` just like adding to a regular pointer value. That's why I suggested the `_word` naming instead, which makes it clear (hopefully?) that the macros operate on integer values."""
5723,143321185,b'These uses need to be updated to the new name.'
5723,143321226,"b""Considering our CAS functions are called `cas` (compare and swap), it would make sense to call these functions `swap`, or alternatively rename `cas` to `cmpxchg`.\r\n\r\nIt's a minor point though, and it's unlikely anyone would be confused about the names anyway, so feel free to ignore."""
5777,144339511,"b""I'd prefer to write it like this:\r\n\r\n```c\r\n\tif ((method->flags & (METHOD_ATTRIBUTE_ABSTRACT | METHOD_ATTRIBUTE_PINVOKE_IMPL)) ||\r\n\t    (method->iflags & (METHOD_IMPL_ATTRIBUTE_RUNTIME | METHOD_IMPL_ATTRIBUTE_INTERNAL_CALL)))\r\n\t\treturn FALSE;\r\n```\r\n\r\nJust to avoid super long lines."""
5798,145178109,b'Preferred code style in the runtime is `if (!minfo)`.'
5851,146725780,"b""Does this really need to be this elaborate? Can't it just be a simple `AC_CHECK_FUNCS(getrandom)`?\r\n\r\nThe test currently relies on runtime behavior to determine the availability. That's bad for cross-compiling."""
5851,146728905,"b'Then what we should do is detect the `ENOSYS` at runtime and fall back to `/dev/urandom`, IMO.'"
5851,146733845,b'Perhaps @luhenry could clarify this? I believe he worked on that code.'
6044,151773800,b'Wrong callback.'
6044,151773998,"b""This isn't enough: You'd also need to install a tail call event callback as the new API separates those two cases."""
6003,151775175,"b""I don't think we should be documenting a deprecated option."""
6078,152654773,"b""These: https://github.com/mono/mono/blob/master/mono/metadata/profiler.h#L355\r\n\r\nI.e. not super useful to the average user (to this day I'm not exactly sure why these events were even added; it was done before I started maintaining the profiler)."""
6078,152654897,b'I will add a note to the ones that are enabled by default.'
6078,152735249,"b'Good point, we should not exit on unknown arguments.'"
6078,152750248,"b""Actually, it's fine: In the log profiler, we just print an error if we can't parse an argument; we don't invoke `usage ()`."""
6115,153574258,b'Copy/paste error.'
6115,153575084,"b""It should never happen, and indeed never did outside #5710, where it only happened because that PR introduced events that got fired after the `thread_stopped` event. I think an assertion is fine, we don't want a bug like this to go unnoticed. (Also, it already passed the stress tests in an earlier run of this PR, so I think we're good.)"""
6115,153577524,"b""Well, the callbacks invoked by `MONO_PROFILER_RAISE` may or may not use hazard pointers. The `mono_hazard_pointer_clear` below was there to clear HP1 (which would have been set by `mono_thread_info_lookup`) just in case the profiler callbacks wouldn't have overwritten it with something else. Was that approach actually problematic?"""
6227,156244958,"b""Speaking of, why don't we make `mono --version` output OS in addition to architecture? Then we wouldn't need the OS list above either."""
6241,156837738,"b'Two things:\r\n\r\n1. This is public API, so we cannot change the signature. You have to introduce a new callback (`gc_event2`, `GCEvent2`) and make the runtime invoke both the old and new one.\r\n2. The `serial` parameter should be `mono_bool`.'"
6241,156837831,b'(The changes in this file become unnecessary because of the comment above.)'
6241,156837997,b'Should be `gboolean`.'
6241,157040670,"b""We don't really *have* to rename this function, but if you do, there are some references to it in comments throughout this file that need to be updated."""
6285,158030615,"b""Shouldn't we check `cfg->llvm_only` also in the trace case? Otherwise for the LLVM-only case, we will emit an opcode the LLVM backend doesn't understand (`OP_FILL_PROF_CALL_CTX`)."""
6285,158030761,b'Ditto.'
6285,158031064,"b""Perhaps we should store the result of `mono_trace_eval` as a bit on the CFG so we don't have to call it both here and in `mini_method_compile`?"""
6285,158031559,"b'Is the call context code providing broken values here, or is it just a to-do for printing value types in a better way than raw bytes?'"
6285,158031714,b'Bad indentation.'
6335,158600222,b'It should be `emit_uvalue`. `emit_ptr` implies different encoding semantics.'
6394,159629220,"b""IMO, since we're using C99 these days, an even better style would be:\r\n\r\n```c\r\nInstanceSearch search = {\r\n    .cat_offset = (char *) cat - (char *) shared_area,\r\n    .cat = cat,\r\n    .name = name,\r\n};\r\n```\r\n\r\nWhen using designated initializers like this, any field that isn't explicitly mentioned will be default-initialized.\r\n  """
6394,159633519,"b'> Not yet implemented by Microsoft.\r\n\r\nIt is. We use this in the code base already, e.g. here: https://github.com/mono/mono/blob/master/mono/metadata/profiler.c#L349\r\n\r\n> Does this zero the other fields?\r\n\r\nYes.\r\n  '"
6394,159803856,"b""Designated initializers are not standard C++ either. It may or may not work as a compiler extension. Why do we care if it's valid C++ though?"""
6247,159804031,"b""Can't say I like how this looks, especially how repetitive it is. Can't we abstract this away in `mono_thread_set_name_internal`?"""
6247,159804547,"b""I mean, setting a thread name is not something one would do in a hot code path anyway. In fact, you're only allowed to set the name of a managed `Thread` object once. I'm really not concerned about performance for this case.\r\n\r\nWhat's the portability concern? Can't we just pass a C string and convert it to UTF-16 as required?"""
6247,159806538,"b""It looks like in your current version of `mono_thread_set_name_internal`, you have a code path that does UTF-8 -> UTF-16 conversion with error checking anyway, and you also have to convert to UTF-8 for the profiler callback, so why not just standardize on UTF-8 input? It would make all these call sites much cleaner at the cost of one string conversion which, as far as I can tell, the old code was doing through `mono_string_new_checked` anyway, so it's not like we'd have a perf regression or anything."""
6443,160098374,b'This is not a public header.'
6443,160120478,b'I have no strong feeling on `char` vs `gchar` but I do think `gsize` is both nicer to read and write than `size_t`.'
6544,162111381,"b""I have no particular opinion on the subject, I just did it because I've seen a lot of other code in the runtime do it.\r\n\r\nThat said, I think if we ever want to compile without assertions, for whatever reason, we could do something like:\r\n\r\n```c\r\n#define g_assert(stuff) (void) (stuff)\r\n```\r\n\r\nThat way, side effects are preserved."""
6562,162162458,b'Indentation looks off here.'
6700,164297164,b'This header is supposed to be independent of `mono/metadata` so it can be included by arbitrary SGen clients.'
6740,165131870,"b""Isn't this mitigation only for Spectre, not Meltdown?"""
6740,165152463,"b""I don't think that's splitting hairs TBH. This comment is basically saying that if you don't build with this option, Mono is vulnerable to Meltdown, which is false.\r\n\r\nI don't think we should be propagating the Spectre/Meltdown confusion."""
6754,165709379,"b""> Signal queue overflow -- does that imply, I know it sounds bad, but backoff and retry?\r\n\r\nNo, it almost always indicates a bug. Signal queue overflow is only a thing in the context of real time signals, i.e. where signal delivery is guaranteed. For normal signals, the OS will just drop signals when the queue overflows or the thread can't handle the signal for whatever reason. So, if you experience signal queue overflow, it means you're bombarding a thread with signals but it's currently in a state where it cannot handle them.\r\n\r\nSee ccd373f42986ac5346b305b02beb153c7f311234 for an explanation of the particular problem we ran into in the past.\r\n\r\n> ESRCH can also mean the thread id got corrupted somewhere? I guess either and impossible to know.\r\n\r\nRight, there is no way to tell the difference."""
6773,165855212,"b'Is it possible to override these paths in a non-version controlled file? If someone does need to modify these, it would be quite annoying to always have this file show up as modified in the working tree.'"
6695,167397739,"b""These are public API, you can't change their signatures."""
6695,167836443,b'```bash\r\nbash ~/stuff $ cat test.c\r\nvoid foo (char *p)\r\n{\r\n}\r\n\r\nstatic void (*fnptr) (void *p);\r\n\r\nint main (void)\r\n{\r\n        fnptr = foo;\r\n\r\n        return 0;\r\n}\r\nbash ~/stuff $ gcc -Wall -Werror test.c\r\ntest.c: In function \xe2\x80\x98main\xe2\x80\x99:\r\ntest.c:9:8: error: assignment from incompatible pointer type [-Werror=incompatible-pointer-types]\r\n  fnptr = foo;\r\n        ^\r\ncc1: all warnings being treated as errors\r\n```'
7226,170424972,"b'Yes, exactly right. This design is intentionally ""simpler"" than the upstream one.\r\n\r\nI should probably document that in a comment somewhere.'"
7226,170454219,b'Added cb31f6bb035bf7423e392b02b3287ae1201c8614.'
7386,171898663,b'No need to `getenv` on every iteration.'
7386,171899707,"b""That could be misleading too, since you'd expect `MONO_PROFILER_STRESS_DEBUG=0` (or something similar) to disable it, but it wouldn't.\r\n\r\nPersonally I don't think it matters too much either way since this isn't something user-facing."""
7520,173378636,b'This code is using spaces instead of tabs for indentation.'
7520,173536368,"b""Indeed, we should not be adding new `AC_TRY_RUN` calls to configure unless the check absolutely can't function without being run. And even in that case, it should probably be a run-time decision in the C code (as we do for e.g. some WSL workarounds). `AC_TRY_RUN` is almost always the wrong thing to use."""
7553,173617522,b'`mono_arch_init` can generate events because of trampoline creation (thus raising code buffer events). I moved it before `mono_hwcap_init` also in case we decide to make that module generate events at some point.'
7554,173617608,b'Fixed.'
7566,173663710,"b'I made symbols `static` where doing so was possible without further code change (such as exposing a getter function). This one in particular is, surprisingly, used across multiple files in eglib.'"
7543,173861012,"b""I don't think that would apply to this use case since I need to pass arguments to the runtime itself?"""
7543,173862509,b'The API of the library is explicitly not stable right now (see #6183) and the old name of this property was pretty bad.'
7566,174261646,"b""Arguably a lot of these `extern` declarations in `.c` files do, but I didn't want to do that kind of refactoring in this PR. All I'm doing here is either renaming or slapping on a `static` where possible."""
7887,177936538,"b'Since `static` is removed, this must be prefixed with `mini_` or `mono_`.'"
8198,181123044,"b""Not 100% sure about this one. The original check seemed weird to me - why wouldn't we want to use `SIGQUIT` just because we're testing the FullAOT profile?"""
8240,181509357,b'This should be documented in `man/mono.1`.'
8309,182517278,b'Why are we even using tabs here? Spaces should be used for alignment.'
8309,182520008,"b""I mean we should use tabs up to the indentation level of the previous line, and then spaces for alignment. Since the previous line had no indentation, there shouldn't be any tabs. That way it doesn't matter how someone configures their editor; indentation and alignment will be correct regardless.\r\n\r\nLike this:\r\n\r\n```c\r\nvoid\r\nfoo (int x,\r\n     int y)\r\n{\r\n\tif (something ||\r\n\t    something_else) {\r\n\t\tstuff ();\r\n\t}\r\n}\r\n```"""
9401,199553379,b'We should probably `g_error` here as multiple calls to `mono_thread_info_init` would have pretty disastrous results.'
9401,199554172,b'The memory accounting type should be a parameter to this function.'
9401,199554653,"b""For the profiler to use this API, there needs to also be an early init callback that's invoked before `mono_thread_info_attach` is called.\r\n\r\nSee: https://github.com/mono/mono/blob/master/mono/profiler/log.c#L3392"""
9401,199555090,"b""The profiler also needs a callback here. Either it has to be a separate callback or the command callback needs a Boolean parameter indicating whether the inbox is being drained on shutdown or if it's just the normal message handling loop.\r\n\r\nSee: https://github.com/mono/mono/blob/master/mono/profiler/log.c#L3402"""
9401,199555715,"b""Shouldn't these be `g_error`s?"""
9401,199556053,b'These should be `size_t` judging by the rest of the code.'
9401,199556119,"b'I feel like this whole abstraction should probably be moved to a separate file, say, `mono-utility-thread.h`.'"
9401,199557042,"b'If the profiler were to use this abstraction for its internal threads (which it can, with a few minor changes that I pointed out here), it would be passing `MONO_MEM_ACCOUNT_PROFILER`.'"
9401,199557579,"b""The issue is that the profiler needs to do stuff both before and after `mono_thread_info_attach` is called, during utility thread init.\r\n\r\nAlthough, I don't recall if it is safe to call `mono_thread_info_attach` on an already-attached thread, but if it is, I suppose moving the init callback earlier and having the profiler just call `mono_thread_info_attach` as appropriate in its callback would be an OK solution too, as the extra call after the init callback would just do nothing in that thread's case."""
9401,199558411,b'These would also need to be marked `MONO_PROFILER_API` for the profiler to use them.'
10342,213525008,b'These initialization changes make the code rather ugly. Why are they necessary?'
10342,221434103,"b""It's not immediately obvious why this needs to be a static library just to change its `CFLAGS`."""
10342,221434380,b'Just modify the `ADD_ICALL` macro to do the cast; no need for a template hack IMO.'
10342,221435598,"b""And we are certain that, on the targets where we care about runtime size, those templates don't result in a bunch of pointless instantiations increasing the size of the final library?"""
10342,221435655,"b'Is this explained in some other place in our makefiles? If so, a comment here pointing to that explanation would be good.'"
10886,221438019,"b'Should align these, or maybe move the first value to the next line.'"
10885,223218026,b'This has to use `memdup_with_type` (as in the interpreter case just above) as the returned buffer will be explicitly freed by users of `mono_profiler_call_context_get_this`.\r\n\r\nSee the API docs here: https://github.com/mono/mono/blob/master/mono/metadata/profiler.c#L661'
10885,223218029,b'Same here.'
11384,228358190,"b'Given that profiler test failures are often hard to reproduce, I prefer to keep the MLPDs around when possible to help diagnose a failure. This is mostly useful locally, so maybe we could delete the files only on CI, if doing so is actually necessary?'"
11384,228358201,b'line damage'
11384,228358894,"b""For the same reasons, I'm not sure it's a good idea to just throw these files in a random/unknowable directory in `/tmp`."""
12082,241977607,b'Missing space before opening parenthesis throughout.'
17251,332959918,"b""Considering this instruction is there to deal with what I would think is really an issue in the register allocator, a comment explaining why it's needed is probably warranted. It's not obvious without the context of this PR."""
627,4055825,"b'This is defined on the command line, so the include was not necessary.\n'"
627,4055827,"b'Dropping this yields ""warning: no previous prototype for \'mono_sc_reachability_enabled\'""\n'"
627,4055849,b'I suppose I could do that. I was just following the way it was done for the Linux support.\n'
627,4055862,b'Alternative thoughts? I was trying to be minimally invasive.\n'
627,4055972,"b'This was C99 before I integrated it with the Mono build and realized Mono was built with the default gcc C standard, which AFAIK is C89/C90. I guess compound literals are a GCC extension for C90?\n'"
627,4055995,"b""Yes, it does and we're okay with that for now. I can add a dispatch queue API if we detect that there's no running main loop, but for now this is fine. Server type apps shouldn't generally find this a useful API.\n"""
2470,50349468,b'This should be `culture < 0`:\nhttps://github.com/mono/referencesource/blob/master/mscorlib/system/globalization/cultureinfo.cs#L369\n'
1626,28252352,b'This needs to be bumped to 10\n'
767,6933499,"b'Doesn\'t this premise ""On Windows"" == ""running on .NET"" ? This actually has to work fine with ""Mono runtime on Windows"", so it rather wants different approaches to detect .NET runtime.\n'"
767,6936021,"b""Oh, then that's ok.\n"""
1566,24655478,"b""That's a good catch. Updated the fix.\n"""
1608,25589437,b'I thought RESOURCE_STRINGS support for multiple files is broken?\n'
1608,25589456,"b""The actual behavior is BUG. WE don't have to ASSERT THAT it fails to load.\n"""
1608,25591249,"b""You didn't notice that those in SR.cs are in different namespace. Have you ever tried to actually remove those my classes and build? It won't. There is reason they are there.\n"""
1608,25592016,b'There is no Res class in SR.cs.\n'
1709,28355778,"b""It shouldn't matter.\n"""
1773,29838802,"b""out of curiousity, do you know what's not implemented correctly?\n"""
19773,492248934,"b""sorry but too old code and /me being inactive in mono codebase, let's not count on me."""
1621,26052073,"b""No, it doesn't have side effects.\n\nhttps://github.com/mono/mono/blob/master/mono/metadata/mono-endian.h\n"""
1621,26052243,"b'The values we pass in there are arguments to `ioctl()`, which does take an `unsigned long`.  `gint32` is in any case not big enough - one of the values we pass actually overflows on Darwin.  Should we use `guint64`?\n'"
1621,26052530,"b""I guess at that early point in the fixing I wasn't hard-boiled enough yet to believe that those function  are still there just by accident.\n"""
1621,26052545,"b'Again, no.\n'"
1621,26052659,b'Not sure what you mean.\n'
1621,26052732,"b'We never use this variable.  Why do we add it?\n\nOh, the reason I removed this is because `dar_release_slot` is assigned to, but never used.  So when I remove that assignment we\'re left with a naked `mono_mb_add_local()` call, which is pretty useless.  I\'m happy to change the commit\'s message to ""Fix warnings and remove dead code.""\n'"
1621,26052747,"b""We do that?  Seriously?\n\nIt doesn't seem like it is.  I should mention that this commit passes all the runtime and corlib tests.\n"""
1621,26250014,"b""On Darwin:\n\n```\n  CC       sockets.lo\nsockets.c:1215:8: warning: overflow converting case value to switch condition type (2147772030 to 18446744071562356350) [-Wswitch]\n                case FIONBIO:\n                     ^\n/usr/include/sys/filio.h:78:18: note: expanded from macro 'FIONBIO'\n#define FIONBIO         _IOW('f', 126, int)     /* set/clear non-blocking i/o */\n                        ^\n/usr/include/sys/ioccom.h:95:21: note: expanded from macro '_IOW'\n#define _IOW(g,n,t)     _IOC(IOC_IN,    (g), (n), sizeof(t))\n                        ^\n/usr/include/sys/ioccom.h:92:2: note: expanded from macro '_IOC'\n        (inout | ((len & IOCPARM_MASK) << 16) | ((group) << 8) | (num))\n        ^\n```\n"""
1621,26250322,"b""This removes a comment that contains code that might or might not be useful, might or might not compile and probably hasn't been used for years.\n"""
1718,28553460,"b'Both of these are boolean, so they need to be `gboolean`.  They also need to be `volatile`.\n'"
1718,28894438,"b'A sufficiently smart whole program optimizer could figure this out, which would break the code.  If nothing else, `volatile` reminds us that these are accessed from different threads at the same time, and gives us peace of mind.  Concurrent programming is hard enough as it is, without depending on the goodwill of the compiler.\n'"
1766,29610550,"b""These two are part of SGen, too.  It's just an oversight that they're not included in the simple client example.  Layout statistics is a compile-time option, so as long as it wasn't enabled, it would link without it.\n"""
1918,34303553,"b""According to the source (going by http://www.opensource.apple.com/source/libpthread/libpthread-105.1.4/src/), `pthread_mach_thread_np()`, when called on `pthread_self()`, is a non-locking, constant time operation.  See `pthread.c` and `internal.h`.\n\nAlso, it does not increase the port's ref count.  `mach_thread_self()` would do that.\n\nSee also https://groups.google.com/forum/#!topic/native-client-reviews/z---hlHbQNc\n"""
1918,34310357,"b""Like pretty much everything we do...\n\nBut anyway.  I benchmarked this vs `mach_thread_self()`/`mach_port_deallocate()` on the Roslyn benchmark, which is very parallel and does a lot of compilation.  No noticable difference.  So I'm fine with either.\n"""
1918,34310385,b'If we do use the PThread API we need to also include `pthread.h` here.\n'
1918,34391082,"b'This is the code to use the Mach API: https://github.com/schani/mono/commit/3d5fb7bb0aa07ec71ef9bf412be1c126899f596e\n\nThe include of `pthread.h` in there is erroneous, I think.  It should only be necessary for the PThread API.\n'"
1937,35562499,b'`strlen` returns `size_t`.\n'
1937,35562865,b'Where does the `3` come from?\n'
2163,43035673,b'An explanation on what the circumstances are under which a write should be exempt would be nice.\n'
2197,43961177,b'Fixed.\n'
2621,57358463,b'Please move this to the commit that adds `sgen-array-list.c`.\n'
2621,57365399,b'This is incorrect.  The scope of `cards_preclean` is only this block.\n'
2621,57365547,b'This code is almost an exact copy of the one in `sgen-los.c`.  Please put it in a separate function.\n'
2802,57621338,"b""It's not necessarily pointless.  Until they're marked we don't know how many of those objects are live.\n"""
2802,57622229,b'You can just return `nused2 - nused1` if you cast both to appropriate signed types.\n'
2811,58782632,b'`reason` is debug code that should either be removed or made into an `enum`.\n'
2800,59247071,"b""Backslashes shouldn't be here.\n"""
2800,59247430,b'Is this a race condition?\n'
2800,59256011,b'Please add a comment explaining that and merge.\n'
2871,59444267,"b""Please make this loop only check whether there's a card set.  All of the rest of the loop will only be executed once at most, so it shouldn't be in the loop.\n"""
2871,59444834,"b""In fact, there should be only one call to `scan_card_table_for_block()` in this outer loop, guarded by `is_live` that's `TRUE` by default and not changed in the `scan_type != CARDTABLE_SCAN_GLOBAL` case.\n"""
2869,59770256,b'`break` here.\n'
2890,59807077,b'Why is this wrong?\n'
2792,59914148,"b""Yeah, that's pretty much noise.\n"""
2927,60455289,"b""That's cute!\n"""
2961,61976520,b'Why would it?\n'
2961,61976931,"b""Disposing the queue will put the sections it still has into a free list, to reuse when the next gray queue is initialized.\n\nYes, I believe we've never freed the private gray queue sections.  You could make a pull request? ;-)\n"""
2961,62114057,"b""You're right, it should be empty.\n"""
2971,62562493,"b""If we're using exact types, then we should use the proper exact C types.  See `stdint.h`.\n"""
2971,62562655,b'This needs a header.\n'
2971,62562717,b'Header needed.\n'
2971,62562776,b'Header again.\n'
2971,62566320,"b'This is not a Romanian swear word, is it? ;-)\n'"
2977,62730999,b'Could we please do this as an `else if (finish_concurrent)`?  That would not only reduce indentation but also make the diff smaller (and the code more readable).\n'
3056,64799994,b'This should be freed.\n'
3056,64800275,b'Also this length calculation makes me nervous.  Please use the `snprintf` technique:\n\n```\nhttp://stackoverflow.com/questions/8090888/what-is-the-max-possible-length-of-a-pid-of-a-process-64-bit\n```\n'
3056,64800382,"b'Come to think of it, initing of the binary protocol can use glib, i.e. we can use `g_strdup_printf`.\n'"
3057,64831378,"b""Please add an internal memory type for log entries and use that.  Also, it's fixed size, so no need to use dynamic.\n"""
3218,69041766,b'Whitespace damage.\n'
3359,73593073,"b'Asserts must not do relevant side-effects because they might be disabled. Make the call, save the result, and assert on the result.\n'"
3805,91631666,b'Please document what this lock guards.'
3805,91633088,"b""Don't you have to retry until it works?"""
3805,91633247,"b""Why don't we get the correct `object_ops` in the first place?"""
3805,91635686,"b'This is done on a worker thread, not the main thread, is it?'"
3805,91636848,"b'Please add explanation:\r\n\r\nIf we have a single worker, splitting into multiple jobs makes no sense.  With more than one worker, we split into a larger number of jobs so that, in case the work load is uneven, a worker that finished quickly can take up more jobs than another one.'"
3805,91639749,"b""Also, the commit message is incorrect.  It states\r\n\r\n    it first allocates a new object in a major block (this object will potentially be enqueued at this step)\r\n\r\nbut the new object is only enqueued once the copying is complete.  If that weren't the case, the object could be scanned in an incomplete state and we would end up with invalid references and/or fail to copy/mark reachable objects."""
3805,91640840,b'Is it necessary for this code to work that the GC thread is waiting for workers to finish?'
3805,91641122,b'Is `next_free` `volatile`?'
3805,91847977,b'What does this have to do with the rest of this commit?'
3805,91862457,"b""This should still be `volatile` I think. It's not directly guarded by a lock as far as I see."""
3805,91862618,"b'Ok, at this point we should really put `index + 1 + size + (include_worker_index ? 1 : 0` into its own variable ;-)'"
3805,91862653,b'I think we should call `sgen_thread_pool_is_thread_pool_thread()` only down here.'
3805,91862671,"b""Thread number `+1`.  I'm not a huge fan.  Which isn't saying that I would have done it differently, so I guess we're both lazy."""
3805,91862777,"b""See, and here we're already not re-adjusting for the `+1`..."""
3805,93152310,"b'Exit early if possible, to avoid nesting.  As in\r\n\r\n    if (!major->is_parallel)\r\n        return FALSE;'"
3805,93152441,"b""I'm pretty sure there should be a `break` here."""
3805,93153172,"b""Shouldn't this assert that `section->next == NULL`?"""
3805,93153261,b'This must come before we access `section->next`.'
3805,93153315,"b'Also, there is no space before a question mark!'"
3805,93157197,"b'Wait, so if there are more sections left we allow multiple workers to steal lock-free?'"
3805,93157544,"b""This lock-free access to `queue->cursor` bothers me.  It's written to later down, too.  It's not clear at all to me that this is safe."""
5381,133323520,b'Changing this is fine.'
1080,13309489,b'Will fix\n'
1937,35563911,b'thanks! #1949\n'
1937,35563987,"b""shouldn't be there, it's already gone on master...\n"""
2261,46295560,"b""how do you know it's `0xffff0fe0`? and also, use a constant (`define`) instead?\n"""
2268,47260440,b'how about `if (G_UNLIKELY (cfg->verbose_level >= 4))`? at least that seems to be the verbosity level used around here.\n'
2332,47414091,"b""a whole pass just for replacing potential `div`s? hum.  don't we have infrastructure to add such peephole optimization?  is there any reason why it's after `deadce` and `alias analysis`?\n"""
2332,47414365,"b'just saw the `cfg->has_divisions` hack. it helps, but oh well.\n'"
2769,56558616,b'good point! I changed it to `MONO_JIT_DUMP_METHOD`\n'
2769,58437439,"b'thanks, fixed!\n'"
2922,60299213,"b'the comment is misleading, what does `this` refers to?\n'"
3002,63569617,"b""thank you @migueldeicaza and @vargaz, that's way nicer. Updated PR.\n"""
3026,63974846,"b'thanks Zoltan, PR updated\n'"
3068,65214661,b'thanks!  will do\n'
3068,65214847,"b""hm... how about I just update `MINI_OP` and `MONO_OP3` by another field?  the diff gets ugly for `mini-ops.h`, but that's the only downside I see.\n"""
2921,65636520,"b""it's a hack.  IGV (the graph visualization tool) doesn't like empty basic blocks.\n"""
2921,65639397,"b""I'll do that in another PR. Most util functions used here are `static`, it will require a bit more moving code around.\n"""
2921,65639721,"b""Yes, we should do it as late as possible.  IIRC there're some issues around inserting new basic blocks after `mono_optimize_branches`, I'll look into that again.\n"""
2921,65639757,"b'good point, will do!\n'"
2921,65938109,b'3ddbaf012974558fd64cc9403bfedadc0070b7d2\nrebased: cc60a1d278d9b5da43763e5e2f0b83df3672a6a4\n'
2921,65938333,b'41b187035e83dc4f6846f47e0186fa2ad4a3705c\n'
3163,67257750,"b'I agree, it looks like an unnecessary indirection\n'"
3470,76580604,"b'not exactly sure about the llvm case, because actually this fixed for me the other case. I don\'t get why we want to use just `clang++` and ignore `tool_prefix` at all? as it is, it\'s obviously wrong, so it has to be either:\n\n``` c\ng_strdup_printf (""clang++ %s"", args);\n// or\ng_strdup_printf (""\\""%sclang++\\"" %s"", tool_prefix, args);\n```\n\n?\n'"
3469,76580733,b'I was wondering about that too.\n'
3470,76583611,b'thanks.  updated\n'
3492,77057491,"b""ah nice! `mono_bb_last_ins` doesn't handle `OP_SEQ_POINT` though.   Is it fine to add or is there a reason why it's missing?\n"""
3660,80925880,b'fishy indent?\n'
3716,81912731,b'use the `MONO_INS_IS_PCONST_NULL` macro here\n'
3814,84788167,b'`s/16/2` ?\n'
3935,87505509,"b""shouldn't be `const` as the caller is required to free it (that was silently fixed in https://github.com/mono/mono/commit/1fb083d2d4fa63b41b1c97bb61cd5782a62c910b#diff-8aa0f22fa8cbe6cb9c587cf3fc9fec3a)\n"""
3935,87505591,"b""shouldn't be `const` either, see 0976d12d6730ce6228c9a6533fd9119ba0c46560\n"""
4014,89394046,"b""the comment above isn't good enough? :)"""
4018,89534155,"b""hm... not sure, shouldn't `result` be `g_free`'d if not inserted into the cache?"""
4121,91695356,"b'why not just `stp x30, [x16], #8`?'"
4121,91695971,b'`x16` should be in the clobber list as well'
4112,92285905,b'no 1337 hax0r? :)'
4112,92380384,b'thanks!'
4306,98724988,b'`s/sizeof (mreg_t)/sizeof (double)/`'
4306,98796033,b'use `MONO_MAX_IREGS`'
4306,99008665,"b'just a nit, you could use `ppc_f14`'"
4359,101400912,b'thanks! updated :)'
4359,101401286,"b'because `mono_arch_get_enter_icall_trampoline` is defined in `interp.h`, but implemented in `tramp-$arch.c`.  maybe I should move that definition to somewhere else? `mini.h`?'"
4359,101405260,"b'okay, added another commit: https://github.com/mono/mono/pull/4359/commits/9e8ab7366d632f485f333f8856a77474400e3c2a'"
4427,102901538,b'why not passing `TRUE` instead?'
4427,102905194,"b""ok, but then let's be consistent and use it for `ves_icall_System_Threading_Thread_ResetAbort`, `mono_gchandle_new`, `mono_marshal_ftnptr_eh_callback`, etc. as well"""
4430,103256560,b'thanks! :)  updated the code.'
4430,103257017,"b'not exactly sure how the JIT handles it, but indeed, we can just remove the argument from the stack when we see a `MONO_CALLI_EXTRA_ARG`: https://github.com/mono/mono/pull/4430/commits/c66806a5ad54db6e973ffa649a36028ea153866c\r\n\r\nthus, I removed the changes to `marshal.c` \xf0\x9f\x91\x8d '"
4522,105856275,b'the prefix is `1`; `04` is the major version. I think the `1` prefix is there to avoid truncation.'
4522,105875711,"b""eventually, we might reach version >10 and then we don't want to fix up all places that were assuming major is only one digit \xf0\x9f\x99\x82  """
4613,108753290,"b""shouldn't we lock before we create a new hashtable?"""
4613,108757528,"b""any reason why it's limited to `RUNTIME_INVOKE`?  shouldn't we have this exception only for stuff like `WRAPPER_SUBTYPE_INTERP_IN`?"""
4673,110998561,b'is that branch never taken?  looks like something we should keep'
4673,111008750,b'ah! \xf0\x9f\x91\x8d  thanks \xf0\x9f\x99\x82 '
4751,113482870,b'thanks @alexrp! I updated the PR.'
4751,113996971,b'done.'
4777,114400233,"b'it would be nice to share code with `mono_debug_lookup_source_location`, but I guess the locking boilerplate makes it hard to do so?'"
4777,114403517,"b""that's a bit confusing, why not putting `StackIter` from `interp.c` here instead?"""
4777,114404111,"b""what's the difference between vs. the `{push,pop}_lmf` frame machinery?"""
4777,114404405,b'`s/save/same/`'
4777,114406618,b'you should change the size in `mintops.def` for `MINT_ENDFINALLY` and increase the `ip` properly in the interpreter loop for that instruction.'
4777,114407187,b'`ip` is of type `unsigned short *`'
4777,114407276,b'`s/reating/creating/`'
4777,114407691,"b""I really don't wanna nit-pick, but how about you negate the condition instead of adding an `else`? \xf0\x9f\x99\x82 """
4777,114408610,b'does the icall trampoline also need a check for `has_resume_state` upon returning? (after popping the LMF)'
4777,114409075,"b""I don't understand what happens here"""
4842,116195914,b'yes'
4864,116418384,b':( good catch'
4773,116977487,b'ok'
4773,116977639,"b""it's already behind `TARGET_ARM`.  are there differences between armv5, armv7 etc.?"""
4773,116978407,"b""if I understood correctly, one advantage of the current approach is that we don't need to know all possible signatures beforehand.  but... it doesn't really matter, because we already went this route for the other way around. will look into it later."""
4773,116978573,b'does that look right? https://github.com/mono/mono/pull/4773/commits/7e7c23d4fec68b6357f8ed4df1e8f44b0e1bceb0'
4773,116989003,"b""thanks!  I don't have a device that runs `!eabi`, is the following okay for now? https://github.com/mono/mono/pull/4773/commits/033c4dd6eb5b566610961a453af60a154d9ded60"""
4901,117422281,"b""is loop unrolling for <0x10000 really worth it? i.e. let's make this the general case"""
4911,118328396,"b""this function isn't used anywhere (I think you accidently added it after I removed it)"""
4911,118329635,"b""the stub for `mono_interp_find_jit_info` returns `NULL`, so let's remove this `ifdef`"""
4911,118332050,b'choose one: `g_assert` or that `if` \xf0\x9f\x99\x82 '
4911,118332610,b'`mini_get_single_step_trampoline` already does the caching'
4911,118332785,b'`mini_get_breakpoint_trampoline` already does the caching'
4911,118334758,"b'kinda ugly, I would be okay with removing `MINT_STLOC_NP_I4` etc.'"
4911,118336850,b'looks like this method can be `void`'
4911,118338663,b'please use `g_print`'
4941,119036060,"b'sounds like we need finalizers in native code? \xf0\x9f\x98\x9b \r\n\r\ngood catch, will drop that idea'"
4958,119706643,"b'ah, good catch!  would `#ifdef DISABLE_APPDOMAINS` work here?'"
4958,119706696,b'why?'
4958,119710498,"b""yes, domains won't work with mixed mode (interp + full-aot).\r\n\r\nthe scenario is interp + domains, and that requires some aot-ed wrappers."""
4958,120286738,"b'no, that stuff is guarded by `mono_aot_mode_is_interp ()`.  Other then that, it should behave like `mono_aot_mode_is_full ()`.'"
4977,120407086,"b'because https://github.com/mono/mono/blob/21d5c9c346113d47455d96e545410733bfccf1fb/mono/mini/mini.h#L2801\r\n\r\nso, in hindsight, this is probably wrong: the prototype for `mono_arch_init_lmf_ext` should be guarded by `MONO_ARCH_HAVE_INIT_LMF_EXT` and not `MONO_ARCH_SOFT_DEBUG_SUPPORTED`, correct?'"
5040,122448170,b'this needs an update of `CEE_RETHROW` in `mini/interp/mintops.def`'
5040,122448486,"b""let's define `THROW_EX` in terms of `THROW_EX_GENERAL` then?"""
5040,122450951,b'does this have to be in the storage for `locals` (i.e. is that some specification thing) or should we keep them in a separate storage?'
5047,122456104,b'did you test that?  using backticks and such looks dangerous regarding quoting rules.  or is it intended that it evaluates `./config.guess` in the error message?'
5040,122474380,"b'ok.  I just noticed we align `offset` above, I think we should do that after computing the slots for `exvar_offsets`.'"
5040,122474638,"b""it's length 2 now"""
5064,122600483,"b""we usually use `gpointer` instead of `void *`, but in this case it's an ID and there is even a macro to safely cast it to an unsigned int: `MONO_NATIVE_THREAD_ID_TO_UINT`. @luhenry do you have an opinion on this?"""
5064,122601125,b'@alexanderkyte `env` is later used for usage around `g_getenv` and later `g_free` is used;  is that correct?'
5064,122952796,"b""in the context of this PR, let's add a comment `/* FIXME: check return value */`"""
5064,123083929,b'you forgot this one'
5064,123085988,"b'`eglib/src/glib.h` defines `gint64` and also the right modifier for it: `G_GINT64_FORMAT`.\r\n\r\nThus, the format string should be `""%s: setting offset to "" G_GINT64_FORMAT "" (low %d)""` and then the cast shouldn\'t be necessary. Same goes for the `(long long unsigned)` casts below.'"
5166,125224064,"b""doesn't that require to increment `ip` for `CEE_LDFLD`?"""
5166,125301405,"b""I see.  why isn't that done for `CEE_LDLOC_{0,1,2,3}` too?"""
5163,125307004,"b""on some linux distributions (e.g. Arch Linux) this would get you python3, thus either\r\n\r\n1. we make sure it prints a warning when using python3 (http://sweetme.at/2013/10/21/how-to-detect-python-2-vs-3-in-your-python-script/)\r\n2. or, we make sure it runs on python3. (as of now, there are some `print` usages in the script that aren't python3 compatible).\r\n"""
5163,125307736,b'`s/src1/src2/`'
5208,127536146,"b""I'm not sure what is worse: (1) not testing at all or (2) testing something potentially slightly off.\r\n\r\nWhat prevents us to move this code from XI to mono nowadays? Except for the magic check, nothing else seems to be specific to the product."""
5218,127652989,"b""shouldn't this be `v => GenIOS = v != null`?"""
5339,132030788,"b'We would need to audit a lot of usages and it always makes sense to replace it. Also, we do something similar in `mini`: https://github.com/mono/mono/tree/555041c8c2d5db324e3cb79fb65e614a4e347f64/mono/mini/mini-generic-sharing.c#L3258'"
5344,132163502,"b""I'm not sure what's the story of the `g*` types, but I think we shouldn't mix them at least. So I would suggest `gsize` instead."""
5344,132163796,"b""hm, that's ugly...  can't we move them somewhere else and declare them as `external` here?"""
5344,132166115,b'I see :/'
5355,132715646,b'indent'
5355,132716828,b'why is `conv.i4` needed here?'
5355,132717532,"b'looks like an arbitrary number, use hex literals \xf0\x9f\x98\x9b  '"
5381,133789424,b'can be `Interlocked`'
5381,133789471,b'can be `Interlocked`'
5381,133789549,b'can be `Interlocked`'
5381,133790370,b'everything can use `Interlocked` here'
5381,133790437,b'can be `Interlocked`'
5381,133790462,b'can be `Interlocked`'
5381,133791126,b'can be `Interlocked`'
5381,133791149,b'can be `Interlocked`'
5381,133791159,b'can be `Interlocked`'
5381,133791170,b'can be `Interlocked`'
5381,133791471,b'can be `Interlocked`'
5381,133791513,b'can be `Interlocked`'
5381,133791528,b'can be `Interlocked`'
5381,133791548,b'can be `Interlocked`'
5381,133791564,b'can be `Interlocked`'
5381,133791585,b'can be `Interlocked`'
5381,133791601,b'can be `Interlocked`'
5381,133791637,b'both can be `Interlocked`'
5381,133791672,b'can be `Interlocked`'
5381,133791698,b'can be `Interlocked`'
5381,133791719,b'can be `Interlocked`'
5381,133791744,b'can be `Interlocked`'
5381,133791756,b'can be `Interlocked`'
5381,133791770,b'can be `Interlocked`'
5381,133791788,b'can be `Interlocked`'
5381,133792270,"b'yes you can.  also, you can use `Interlocked` here.'"
5381,133911237,"b'should be fine.  also, `mono_100ns_ticks ()` returns a `gint64`.'"
5483,136420834,b'I determined it by printing the size diff between beginning of https://github.com/mono/mono/blob/078463fa1fb2ed7ffefa503812bcb91fab628aa4/mono/mini/mini-amd64.c#L4484 and after emitting it'
5511,137193967,b'pushed a fixup'
5437,137269696,"b""isn't that a semantic change? now `allocated_code_size` gets increased only if `mono_jit_stats.enabled` is set. before it was unconditional. """
5437,137269836,b'good catch'
5560,138537154,b'it should be `!INTERPRETER` instead'
5579,138976993,"b""true, that approach is too excessive. I've updated the PR so that it only emits a sequence point for `CEE_THROW`. Also added a testcase."""
5588,139191516,"b'no, updated the PR. thanks!'"
5598,139767061,b'should be `gpointer` instead of `void *`'
5597,139767838,"b""that comment is confusing: the domain lock won't protect accessing `static_rgtx_trampoline` because the domain lock is, well, per domain \xf0\x9f\x99\x82  Otherwise, why would you need `UnlockedIncrement` here?"""
5597,139768069,b'same here.'
5597,139768130,b'same here.'
5597,139787965,"b""sorry, this comment is wrong (`mono_trampolines_lock ()` is used).  However, `UnlockedIncrement` shouldn't be required here then."""
5612,139975480,b'`mono/metadata/object-offsets.h` must be updated'
5702,142965818,"b'not visible in the diff, but you can move the `no_value_label` declaration into the `expr_unwrap` case and also get rid of a `new Label ()` allocation.'"
5702,142968040,"b""I don't understand why this special casing for `vtype_variable` is needed. can't we always emit `dup` and bail out to the `nonmatching_label` at the very end?"""
5739,143580061,"b""it's mempool allocated; comment added."""
5773,144478248,b'remove that comment block'
5769,145100429,"b'actually, we should set `native_offset` here; `il_offset` is going to be set here: https://github.com/mono/mono/blob/8593149b0be0f58a98d798b42aef10c58cdc8069/mono/mini/mini-exceptions.c#L1150 (once we unified exception handling)'"
5825,145502483,b'nice \xf0\x9f\x91\x8d '
5825,145503468,"b'is that something mini also does? soon, we want to get rid of the exception handling in the interpreter'"
5825,145512670,b'what happens if `method == NULL`?  can this even possible?  i.e. should we put an assert just as in the JIT case?\r\n\r\nalso this is going to be funky in mixed mode.'
5838,146082663,"b""why is `ARM_B (code, 0)` needed here? can't you use `-4` as offset for the `LDR_IMM` insn?"""
5838,146082693,b'what is this?'
5840,146171882,"b""comment says `+1`, but that doesn't match (copy/pasta from arm64?)"""
5840,146171921,b'needs update in `mono/metadata/object-offsets.h`'
5851,146614606,b'that should be in `configure.ac`'
5851,146636726,b'something like that: https://hg.python.org/cpython/file/4243df51fe43/configure.ac#l5397'
5905,147597349,b'unrelated change'
5902,147798435,b'why are there two calls into the interpreter?'
5902,147801114,"b'ah, you removed the second call here \xf0\x9f\x91\x8d \r\n'"
5902,147807285,"b""`new_sp` is a weird name, if it's really just the parent frame.  I kinda understand where it comes from, but let's not propagate that naming further than needed."""
5902,147808450,"b""that's not specific to the debugger, you need to run it in a different frame so it doesn't have any side-effects. that's how it is done in the interpreter exception handling: https://github.com/mono/mono/blob/110888fd661f731814cc7b63be77ebd534e9b759/mono/mini/interp/interp.c#L4992\r\n\r\nI think we don't need that extra argument in `interp_exec_method_full`."""
5911,148341752,b'sounds good!'
5925,148605422,"b""yeah, `HOST_*`  is only available for platforms, but not architectures. I added a check for `MONO_CROSS_COMPILE` instead and make the runtime bail out on that, because I can't think of a use case where you want to use the interpreter with a cross-compiling runtime..."""
5925,148606577,"b'`config.h` was needed here, because otherwise `DISABLE_INTERPRETER` wouldn\'t be visible. However, with `config.h` also `MONO_INSIDE_RUNTIME` will be visible, and that causes compilation errors because the interpreter is still using some unchecked functions (e.g. `mono_ldstr`). It\'s something we should fix, but I didn\'t want to introduce additional noise in this PR.\r\n\r\nAnyway, the `#include ""config.h""` went away for some other reason, so the hack is gone. But we should still use checked versions at some point \xf0\x9f\x99\x82 '"
5935,148766320,"b""you forget to remove a couple of unlocks, like this for example (that's why the mcs tests aren't passing)"""
5925,148938345,"b""it requires changes in the project files for windows and I don't have a windows machine around (it's on my bucket list)."""
5925,148938349,"b'if disabled, it would show in the `minimal` line later in the output. note that this is about the `configure` output, not `mono --version`; I will add something to the `mono --version` output.'"
5925,148938500,"b""we do have the same kind of messages for e.g. llvm as well. `g_printerr` just means it prints to `stderr` (or whatever is available on that system; it's better than using `fprintf(stderr, ...)` imho)"""
5925,149042414,"b'`./autogen.sh ...` would give you this:\r\n```\r\n        mcs source:    mcs\r\n        C# Compiler:   roslyn\r\n\r\n   Engine:\r\n        Host:          x86_64-apple-darwin16.7.0\r\n        Target:        x86_64-apple-darwin16.7.0\r\n        GC:            sgen (concurrent by default) and Included Boehm GC with typed GC\r\n        TLS:           pthread\r\n        SIGALTSTACK:   yes\r\n        Engine:        Building and using the JIT\r\n        BigArrays:     no\r\n        DTrace:        yes\r\n        LLVM Back End: no (dynamically loaded: no)\r\n\r\n   Libraries:\r\n        .NET 4.x:        yes\r\n        Xamarin.Android: no\r\n        Xamarin.iOS:     no\r\n        Xamarin.WatchOS: no\r\n        Xamarin.TVOS:    no\r\n        Xamarin.Mac:     no\r\n        Windows AOT:     no\r\n        Orbis:           no\r\n        Unreal:          no\r\n        WebAssembly:     no\r\n        Test profiles:   AOT Full (no), AOT Hybrid (no)\r\n        JNI support:     IKVM Native\r\n        libgdiplus:      /Library/Frameworks/Mono.framework/Versions/Current/lib/libgdiplus.dylib\r\n        zlib:            system zlib\r\n        BTLS:            yes (x86_64)\r\n```\r\n\r\n`./autogen.sh --enable-minimal=interpreter ...`:\r\n```\r\n        mcs source:    mcs\r\n        C# Compiler:   roslyn\r\n\r\n   Engine:\r\n        Host:          x86_64-apple-darwin16.7.0\r\n        Target:        x86_64-apple-darwin16.7.0\r\n        GC:            sgen (concurrent by default) and Included Boehm GC with typed GC\r\n        TLS:           pthread\r\n        SIGALTSTACK:   yes\r\n        Engine:        Building and using the JIT\r\n        BigArrays:     no\r\n        DTrace:        yes\r\n        LLVM Back End: no (dynamically loaded: no)\r\n\r\n   Libraries:\r\n        .NET 4.x:        yes\r\n        Xamarin.Android: no\r\n        Xamarin.iOS:     no\r\n        Xamarin.WatchOS: no\r\n        Xamarin.TVOS:    no\r\n        Xamarin.Mac:     no\r\n        Windows AOT:     no\r\n        Orbis:           no\r\n        Unreal:          no\r\n        WebAssembly:     no\r\n        Test profiles:   AOT Full (no), AOT Hybrid (no)\r\n        JNI support:     IKVM Native\r\n        libgdiplus:      /Library/Frameworks/Mono.framework/Versions/Current/lib/libgdiplus.dylib\r\n        zlib:            system zlib\r\n        BTLS:            yes (x86_64)\r\n        Disabled:      interpreter\r\n\r\n```\r\n\r\nSo I think that additional line is not really necessary?'"
5925,149043295,"b'okay, updated. I hope it is clearer now.'"
5911,149059448,"b""@akoeplinger I've updated this PR regarding your suggestion.  It would be at least already useful for another test suite (soft debugger tests, https://github.com/mono/mono/pull/5943 )."""
5953,149340842,"b""can't you remove those two lines above?"""
5953,149419706,"b'@joncham ah I see, that makes sense \xf0\x9f\x91\x8d '"
6000,150650910,b'this is required because msvc otherwise fails with:\r\n\r\n```Error\tC2057\texpected constant expression\tlibmini\tC:\\Users\\lewurm\\work\\mono\\mono\\mini\\tramp-amd64.c\t933\t```\r\n'
6009,150982246,"b""I agree with @kumpera. on my system it's six bytes and anyways this case is pretty unlikely."""
6023,151394909,b'is it possible to mempool allocate that list?'
6035,151554408,b'this is the actual change'
6023,151557855,"b'nevermind, I overlooked the change in `mono_find_final_block`'"
6058,152884153,b'`XCODE_DIR` should be the output of `xcode-select --print-path`'
6063,152884174,b'it should use `$(XCODE_DIR)` '
6114,153462183,"b'yes, thanks! \xf0\x9f\x99\x82 '"
6122,153573883,b'see commit message https://github.com/mono/mono/pull/6122/commits/b64faae88c30da83c842fc89edb8eb9f2a6174d9'
6122,153581601,"b""These wrappers are needed for native2managed transitions. We would need to know all callsites from the embedder that are using the `compile_method ()` callback of the runtime and determine the used signatures. That's not possible with the AOT compiler."""
6140,154220617,"b'that was already part of the discussion of the previous PR, alas it looks like some context got lost \xf0\x9f\x98\x95  the script runs fine on both, python2 and 3.'"
6139,154237417,"b""I want everything out of the `interp/` directory that should not end up in the library. In order to avoid ifdef hell, the interp-stubs are now always part of the runtime, so there's a fallback for the callbacks available."""
6139,154237615,b'good point! I changed that and rebased this PR; I had to do a couple changes due to https://github.com/mono/mono/pull/6072 being merged. please review again \xf0\x9f\x99\x82 '
6122,154322247,"b""@kumpera that would still require us to scan all assemblies ahead-of-time which we can't always do"""
6122,154957737,"b'We are thinking about getting rid of this requirement to know ahead of time all the signatures, and do something similar for what we do for the `managed2native` transition today (aka. the `enter_icall_trampoline`.'"
6195,155536071,b'missing space'
6227,156244318,"b'maybe it\'s a good place to explain that there are ""native backtraces"" and ""managed stacktraces"" and how to obtain them. Depending on the issue, those can be useful.'"
6257,157351368,b'this and other places should use the output of `xcode-select -p` instead of `/Applications/Xcode.app`'
6277,157742054,b'unnecessary `memset`?'
6309,158157683,"b'how about `BCL_PDBS = $(patsubst %.dll,%.pdb,$(BCL_LIBS))` ?'"
6309,158157758,b'any reason why you moved that?'
6309,158157863,"b'`g_printerr ()` is the equivalent to `fprintf (stderr, ...)`'"
6309,158158384,b'why are those `.PHONY` targets?'
6309,158158624,b'use `$(MAKE)`'
6309,158159191,"b""`--with-profile4_x` should only be `yes` if `DISABLE_DESKTOP` isn't set?"""
6309,158159337,b'there is quite some code duplication from code above'
6317,158300164,"b""this change isn't necessary, and actually shouldn't be done, otherwise you have to revisit this code if you add another `ReadonlyMask` flag"""
6317,158300868,"b'`flags & ~Flags.FixedVariable` is wrong now. For example, assume `flags` is `UsingVariable | FixedVariable== (1 << 7 | 1 << 20) | (1 << 6 | 1 << 20)`, then this expression would evaluate to `1 << 7`.'"
6323,158385424,"b'not exactly obvious, but it should also call `mono_metadata_free_mh (header);`.  On the other hand, how often are we going to hit this case? '"
6323,158387163,b'this change looks a bit odd; is it intended?'
6329,158552064,"b""shouldn't it be the same representation in memory?"""
6329,158553827,"b""\xf0\x9f\x99\x81  you are right.\r\n\r\nNow that means we need to do something like this:\r\n```c\r\ncase MONO_TYPE_R4: {\r\n  float left, right;\r\n  memcpy (&left, this_field, sizeof (float));\r\n  memcpy (&right, that_field, sizeof (float));\r\n  if (left != right)\r\n    return FALSE;\r\n  break;\r\n}\r\n```\r\n\r\nI don't like it \xf0\x9f\x98\x95 """
6334,158789039,b'this conflicts with https://github.com/mono/mono/pull/6323'
6334,158789706,"b'maybe use `MINT_MONO_LDPTR` for loading `method` and `target_method`; it does the same, but it makes it more clear that it is about arbitrary data instead of a function pointer'"
6334,158789888,b'why is `check_visibility` needed?'
6354,159234385,b'why not always `dup`?'
6378,159401503,b'damn \xf0\x9f\x98\x84 '
6329,159727776,"b'ah, that explains why I _had_ to add the curly braces around the if statement... \xf0\x9f\x98\x85 \r\n\r\nsee https://github.com/mono/mono/pull/6403/'"
6419,159893510,"b""@spouliot @rolfbjarne just to make sure: is this going to work on iOS?\r\n\r\nwith the profiler we do have a similar problem, but it's solved by generating code in mtouch to initialize a profiler module. if `dlopen` etc. is discouraged, we can do something similar with the interpreter."""
6419,159971716,"b""@kumpera that's already the case, the question is\r\n1. what's the visibility of this function (currently: it's discovered via `dlopen`/`dlsym`)\r\n2. who should call it (currently: triggered by a call in `mini_runtime_init ()`)\r\n\r\n@vargaz it's not really dynamically (yet). right now it just looks up the symbol in it's own process, so it must be linked in. In the future I would like to move the JIT to the same kind of interface, along with other execution engines such as `il2cpp`, and then loading it dynamically is getting more interesting.\r\n  """
6419,159971914,b'it follows the same idea as `metadata/profiler.c`'
6419,159971945,b'good point!'
6419,159991230,"b'the embedding app has to call it before `mini_init ()`, that\'s for sure. I\'m not sure what you mean by ""too much initialization"", it doesn\'t do a lot already.'"
6419,160107230,"b'no \xf0\x9f\x99\x82  `mono_interp_init ()` is supposed to be called once, otherwise it will assert.'"
6459,160458320,"b'I think `vararg.exe` should be removed then, right?'"
6459,160459392,b'I think the one above and this should be `STACK_TYPE_I` too'
6459,160459849,"b""shouldn't this use `new_method->alloca_size`?"""
6459,160460353,"b""the comment doesn't match what the code is doing, right? it doesn't copy the arguments over"""
6459,160461716,"b'I feel like we should still have some sanity check here, like\r\n\r\n```c\r\ng_assert (td->max_stack_height <= header->max_stack * 3);\r\n```'"
6459,160462304,"b'ah I see, now it makes sense \xf0\x9f\x99\x82 '"
6459,160463758,"b""hmm... a bit lucky that `CEE_LDFLDA` also requires `td->ip += 5`. That's very implicit \xf0\x9f\x98\x85 """
6459,160463914,"b""should be `STACK_TYPE_I` too, it isn't a managed pointer"""
6478,160834458,"b'strongly connected component, a pretty common abbreviation in graph theory'"
6478,160835236,b'debug leftover'
6486,161034776,b'that comment above should be moved into the `if` block imho'
6623,163047908,b'no good reason'
6635,163172044,"b""good call on pushing a LMF here, but why do we need a dummy frame?  shouldn't be the current interp frame enough?"""
6635,163172823,b'does this fix the issue regarding mixed mode?'
6635,163190273,"b""maybe I'm missing something, but it sounds like we are missing this kind of dummy frame in a couple of other places too."""
6677,163969836,"b""why isn't `HAVE_MADVISE` detected properly by autotools?"""
6677,163970518,b'I would recommend to rename occurrences of `hz` in this file instead'
6677,163972322,b'not sure if that works with the linker on macOS too.'
6677,163973360,"b'ifdefing this part out, makes this code broken and useless. instead we should rather not set `MONO_ARCH_SIGSEGV_ON_ALTSTACK` in `mini-ppc.h`.'"
6704,164375501,"b""this is part of the API, afaik we aren't supposed to change that."""
6729,164892092,b'this change should be reflected in `mini/interp/mintops.def` too'
6729,164892818,"b'not really related to this PR: we have this kind of macro all over the codebase, it would be really nice to have a single one...'"
6729,164893786,b'I guess we can invert this assert now to `g_assert (csignature->call_convention != MONO_CALL_THISCALL && csignature->call_convention != MONO_CALL_FASTCALL)` \xf0\x9f\x99\x82 '
6677,165718571,b'I think we should set the same in the default case as in the GNU ld case'
6677,165718766,"b""undo this change in `libgc`, we'll likely have a submodule for boehm GC soon, so this would be lost anyway (/cc @joncham )"""
6677,165718783,"b""undo this change in `libgc`, we'll likely have a submodule for boehm GC soon, so this would be lost anyway (/cc @joncham )"""
6677,165718971,"b""since you don't use boehm, please undo this change"""
6905,167207305,b'leftover?'
6905,167207835,"b'nope, copied over.'"
6917,167365891,b'this is suspicious. did the frame size of the interpreter main loop grow?'
6917,167367382,"b'that does make sense. on CI we do `-O2` though, so I feel like we should keep the old value to catch ""real"" frame size bumps.'"
6935,167617331,b'we should probably introduce a helper function `mono_method_is_default_method` (this can be done in a later PR)'
6960,167963564,"b""It's octal notation. I put it there because that's how it's specified in `ncurses` source code."""
6960,167963763,"b'I kept the old message, but I agree, the wording feels odd. Will fix.'"
7007,168002118,b'copy pasta?\r\n\r\nthere is `amodule->llvm_got_info_offsets = info->llvm_got_info_offsets;` twice.'
7007,168002814,b'missing `g_free (buf)`'
7023,168351184,"b""~~indent is still wrong, can you fix that?~~ didn't refresh"""
7128,169245090,"b""this commit probably fixes `thread6.exe`, so it's not really unrelated."""
7128,169285003,"b""relevant commit: c52e05c19a9982bfa49cd6c7bf8060151a212e4c\r\n\r\n[looks like it didn't fix `thread6.exe`](https://github.com/mono/mono/pull/6635/files#r163172823)? \xf0\x9f\x99\x82 """
7130,169434948,b'we should use `g_print` instead of `printf`'
7159,169568524,b'```c\r\nctx->regs [PPC_FIRST_ARG_REG] = user_data\r\n```\r\nshould do it?'
7159,169792793,"b'is this ever true?\r\n\r\nI think that can be removed, including `mono_ppc_set_func_into_sigctx`'"
7159,169798993,"b""I think it's safe to define `MONO_ARCH_HAVE_SETUP_RESUME_FROM_SIGNAL_HANDLER_CTX` for mac OS too, i.e. for every platform that ppc runs on."""
7204,170118374,b'`s/printf/g_print/`'
7300,170833313,"b'there is a comment bound to the third case, so it makes sense to split it'"
7315,171296237,"b'I thought a bunch of those failures are due to the ""`r8` problem"" in the native2managed transition. @BrzVlad this isn\'t fixed yet, right?'"
7315,171344252,"b'It depends on the C compiler, that is, if it uses `r8` in certain scenarios. For example, on my machine it only happened with `-O2`, but not with `-O0` with a specific version of gcc. Once you have a faulty build, it crashes deterministic.\r\n\r\nAs far as I remember, we changed the Linux distribution on the ARM bots since then, so it might ""works"" now \xf0\x9f\x98\x89 If so, we could also enable `mcs` tests on ARM: https://github.com/mono/mono/blob/2c2fac29ebc4614ca3786d30d582ed8db906a0cc/scripts/ci/run-test-interpreter.sh#L11'"
7375,172012142,"b'the body builders already live in `method-builder-ilgen.c`, but aren\'t actually exposed via the callback API. they are only needed by stuff that lives ""behind the ILGEN wall"".\r\n\r\ndoes that make sense?'"
7375,172012291,"b'good point, let me do that in a follow up commit in master.'"
7375,172012293,"b'good point, let me do that in a follow up commit in master.'"
7447,172639974,"b""while at it, let's fix that puppy too? how about using a variable?"""
7451,172676364,b'indent is off.'
7451,172676492,"b'is there a public header where this is defined? otherwise, where is this information coming from?'"
7451,172677014,"b""it's the other way around"""
7464,172890128,"b""comment doesn't match test"""
7464,172890258,"b""shouldn't it be `t.Name.ToLowerInvariant () != name.ToLowerInvariant`?"""
7462,172892393,"b'hmm, should we have this at the loop header, so `frame->ip` is always accurate?'"
7461,172958507,"b'I agree with the stack reset, but I think removing `generating_code = 0` is wrong. As far as I remember it\'s valid according to the spec that unreachable code is allowed to be ""invalid"". `generating_code = 0` causes the parser to fall through the byte stream until we hit another basic block start (as it is determined by `transform.c` earlier in the process).'"
7461,172959065,"b'of course you ""fixed"" the one IL test that is testing this odd behaviour \xf0\x9f\x99\x82 '"
7473,173021016,b'why?'
7515,173817891,b'why was this removed? this breaks at least ARM (it likely others): https://github.com/mono/mono/blob/99198da52bee6d5a648a3e92923693bf56cb4d18/mono/mini/tramp-arm.c#L245'
7515,173818126,"b""nevermind, I didn't see the `ifdef` above."""
7586,173981644,"b""There is a `MonoJitDomainInfo::interp_code_hash` which has a `MonoMethod`->`InterpMethod` mapping. It's tempting to add the reverse..."""
7586,173984226,"b'urgh, that is going to be messy \xf0\x9f\x98\x9e '"
7673,175282742,b'I assume this is gonna need some extra care for `BITCODE` '
7673,175282835,"b""I don't see this file in this PR"""
7673,175282907,"b'this should have an API version check, for example see `mono_install_icall_table_callbacks ()`'"
4216,175895307,"b""This won't work on Android for example. I know it isn't relevant now... but it might be at some point. We have the proper defines in place, like we do here:\r\nhttps://github.com/mono/mono/blob/16e6e7df70a7b8fc3579e5f960d0610a313048ec/mono/mini/aot-compiler.c#L1076-L1084\r\n"""
7724,176224574,b'@akoeplinger please submit a PR'
7747,176367895,"b""oops, shouldn't that be outside of the else? otherwise `old_frame` might isn't assigned later in that function"""
7794,176987918,b'this should use `m_class_is_blittable`'
7887,178255822,b'this should be `switch (mode)`'
7887,178256342,"b""This looks a bit whacky. Is `MONO_EE_MODE_INTERP` something we wanna expose via the API (like we do for `MonoAotMode`)? Can't we just add it there?\r\n\r\nIf you wanna keep it like that, you should define `MONO_AOT_MODE_LAST = 1000` or something, so we have room to come up with some other crazy execution modes \xf0\x9f\x98\x85 """
7887,178635630,"b""we should clear all the boolean flags here too, but I guess in the long-term we will consolidate them into the struct so it isn't a blocker for merging"""
8039,179496564,"b'heh, syntax highlighting of github messes up here'"
8056,180572611,b'needs bumping of `MONO_EE_API_VERSION`\r\n\r\nedit: this is done now.'
8198,181140249,b'we should use `g_printerr ()` here'
8198,181140283,b'we should use `g_printerr ()` here'
8198,181140316,b'we should use `g_printerr ()` here'
8258,181596386,"b""it's not that simple, `$(CSC)` can for example be `cd $srcdir && pwd`/external/roslyn-binaries/Microsoft.Net.Compilers/Microsoft.Net.Compilers.2.7.0/tools/csc.exe`. it's possible to fiddle around with some text functions, but it's kinda ugly"""
8258,181837856,"b'@akoeplinger I disagree. In my understanding, `Makefile` serves as some sort of index about what tests are run in a given configuration. Your suggested solution would hide that information, and would require someone to know that a test can be disabled from _within_ a test. That could end up in a confusing state, as for example on CI, the test would still be showed as successfully executed.'"
8240,181986219,b'this should be `TARGET_OSX`'
8241,182531603,"b'why do you reuse the exception here? Also, you should mark `Throw ()` with `[MethodImpl(MethodImplOptions.NoInlining)]`, otherwise the framecount is 1 too very likely.'"
8241,182745078,b'sounds good \xf0\x9f\x91\x8d '
8308,182887243,"b'thanks, this is wrong and actually introduced a new warning \xf0\x9f\x98\x85 '"
8056,183477410,"b""nit: that's a bit ugly, I think `interp_entry_from_trampoline` should have the same signature as `c.entry_from_trampoline`, i.e. move the casts inside `interp_entry_from_trampoline`.\r\n\r\nedit: I don't feel strongly about it, so not a blocker for merging."""
8451,184182008,b'good catch'
8451,184182359,"b""I think we won't need those anymore. but we can remove them later."""
8491,184815366,"b'I agree, but I wanted to keep it in sync with https://github.com/mono/mono/blob/5136a60cf4d57820e9d319f0e19dd7f1abcb9da1/mono/mini/exceptions-amd64.c#L389-L395'"
8574,186270094,"b""no, it shouldn't:\r\n\r\n```c\r\nstatic void inline\r\nstackval_from_data (MonoType *type_, stackval *dst, char *src, gboolean pinvoke);\r\n\r\nstatic void inline\r\nstackval_to_data   (MonoType *type_, stackval *src, char *dst, gboolean pinvoke);\r\n```\r\n\r\n(The variable names are different in the actual source code, I changed them to make it more clear). `&sp [-1]` is of type `stackval *`. That thing before (`sp [-2].data.p`) was wrong, because it's of type `gpointer`. I'm a bit sad that the compiler didn't warn about it (or did we ignore it?). I had a look at the other `stackval_from_data` usages, they look fine.\r\n\r\nThey difference between those two functions is subtle, and in this specific case it _almost_ didn't matter. Let me elaborate what the problem here is: Assume we want to copy some `u2` value from the stack to an arbitrary address.\r\n\r\n* previous case with `stackval_from_data`:\r\nhttps://github.com/mono/mono/blob/ed15e75a943979a5b4d5e5dece8a9ae2cc4cc6cd/mono/mini/interp/interp.c#L459-L462\r\n\r\n* now with `stackval_to_data`:\r\nhttps://github.com/mono/mono/blob/ed15e75a943979a5b4d5e5dece8a9ae2cc4cc6cd/mono/mini/interp/interp.c#L542-L548\r\n\r\nNote that `stackval` is defined like this:\r\nhttps://github.com/mono/mono/blob/ed15e75a943979a5b4d5e5dece8a9ae2cc4cc6cd/mono/mini/interp/interp-internals.h#L54-L71\r\n\r\nso before, as mentioned in the PR description, the destination address would write 4 bytes, even if we only want to copy 2 bytes. The previous case is only okay if the destination is _actually_ a value on the stack."""
8694,187917071,"b""shouldn't this be `intptr_t hash_accum = accum;`?"""
8694,187917116,b'same here'
8694,187917348,"b'not sure, but I think the condition needs to be inverted?'"
8694,187918754,"b""can we either use `%p` or `0x%08x`/`0x%016x`?\r\n\r\nalso, what's the reasoning for the naming? we should have it consistent between the output and the names in the struct."""
6456,188400770,b'@lambdageek @luhenry does `mono_threadpool_resume` require the loader lock to be held?'
8826,190192747,b'can we decrease the number of frames too? 10?'
8841,190366573,"b""we don't need to invalidate the instruction cache as we don't try to execute it right away"""
8841,190375638,"b""it's `host != target`:\r\nhttps://github.com/mono/mono/blob/4260bd28d0c025ce7e4cbc3734a519d6fabe9279/configure.ac#L4114-L4115"""
8851,190417491,b'@akoeplinger what do you think about sneaking `TEST_RUNTIME_FLAGS` in here?'
8851,190536142,b'done \xf0\x9f\x91\x8d '
8851,190543500,b'I added it to make this check happy:\r\nhttps://github.com/mono/mono/blob/2c54579df918cf756f38962ac4a106d8a71a14c1/mono/mini/debugger-agent.c#L3213-L3214\r\n\r\n`filter_state.ctx` is setup by this:\r\nhttps://github.com/mono/mono/blob/2c54579df918cf756f38962ac4a106d8a71a14c1/mono/mini/mini-exceptions.c#L1983\r\n\r\nis there a better solution?'
8851,190676604,b'What platforms are those? There are a couple other places where we depend on this order.'
8910,191276353,b'why?'
8914,191277638,"b""can we do the fallback when the runtime isn't executed as root?"""
8910,191561589,"b""That's why `line [len]` is guarded by `len >= 0`. Am I missing something?"""
8910,191563895,"b'ah, is the problem `size_t` being unsigned?'"
8910,191567090,b'fixed it. good catch \xf0\x9f\x99\x82 '
8960,192298901,b'can we use a loop instead of `goto`?'
9019,192805410,"b""could we make the interp go through `del->method_ptr` as well too? it should be always set, right?\r\n\r\nI don't like to introduce another field to `MonoDelegate`."""
9019,192810081,"b""couldn't we go through the JIT entry point too with the interpreter?\r\n\r\nAfter `CEE_MONO_LD_DELEGATE_METHOD_PTR` we emit `CEE_MONO_CALLI_EXTRA_ARG`, which is sort of special already. could we convert `CEE_MONO_CALLI_EXTRA_ARG` into a `MINT_JIT_CALL`?"""
9019,192812229,b'ok'
9038,193249102,b'why is this needed?  '
9054,193782507,"b""not really related to your changes, but we already do that here:\r\nhttps://github.com/mono/mono/blob/006d6ce09734e8b555a53324c21bbaab3f1ebcb4/mono/utils/mono-threads-posix-signals.c#L250-L263\r\nI guess it doesn't hurt though."""
9054,193782722,b'do you mind moving that further down for the sake of keeping the same pattern?'
8937,193892544,b'`de` aligns with `ee`.  debugger engine and execution engine.'
8912,194282284,"b""I tried 4k with roslyn, even that doesn't get beyond one 4k page for implicit null checking. let's be conservative here, increasing this value doesn't buy us anything."""
8912,194620310,"b""good point regarding signal safety. on some systems `sysconf (3)` is involved:\r\n> POSIX.1-2001 and POSIX.1-2004 required the functions fpathconf(3), pathconf(3), and sysconf(3) to be async-signal-safe, but this requirement was removed in POSIX.1-2008.\r\n\r\nwe could add some initialisation logic, but we need to be super sure that this happens before a `SIGSEGV` can happen (sounds fragile?). I'm tempted to hardcode it to 4k for everything, it would simplify things a lot. What do you think?"""
9100,194669633,b'did you play around with other values?'
9100,194669807,b'`s/printf/g_print`'
9100,194669867,b'`s/printf/g_print`'
9100,194737546,b'why 16 then? \xf0\x9f\x98\x84 or did you mean 16 instead of 32?'
8912,194743518,"b""sounds good \xf0\x9f\x91\x8d I've updated the function including comment why the value is hard-coded."""
9137,195508299,b'fair enough. updated!'
9220,196434692,b'what do you think about that @kumpera ? would you prefer to have another AOT mode so we can get rid of the `ifdef`?'
9295,197816537,"b'we use it in other places in the same file. imho, either we use it everywhere or we remove the function completely, but mixed using is a bit confusing in order to `grep` for usages.'"
9295,197818400,"b'this change is not needed imho, need to test it.'"
9295,197818703,"b""@vargaz you mentioned on Slack that we shouldn't use this this for `--aot=interp`. \r\n\r\nI'll look into adding `MONO_AOT_FILE_FLAG_INTERP`"""
9266,198081195,"b'With mixed mode logic we try to load AOT methods first; the AOT runtime tries to initialize methods from the AOT image, but fails because the requested method isn\'t available in the AOT image. Failing gracefully we allow the mini-runtime to try another execution engine (i.e. interp). Here\'s the native stack trace:\r\n\r\n```\r\n(lldb) mbt\r\n* thread #1\r\n    frame #0: 0x000000018173d2ec libsystem_kernel.dylib`__pthread_kill + 8\r\n    frame #1: 0x00000001818de288 libsystem_pthread.dylib`pthread_kill$VARIANT$mp + 376\r\n    frame #2: 0x00000001816abd0c libsystem_c.dylib`abort + 140\r\n    frame #3: 0x0000000100baa584 nsarrayfilter`mono_log_write_asl(log_domain=0x0000000000000000, level=G_LOG_LEVEL_ERROR, hdr=0, message=""* Assertion at ../../../../../mono/mini/aot-runtime.c:4333, condition `got\' not met\\n"") at mono-log-darwin.c:41\r\n    frame #4: 0x0000000100bab16c nsarrayfilter`structured_log_adapter(log_domain=0x0000000000000000, log_level=G_LOG_LEVEL_ERROR, message=""* Assertion at ../../../../../mono/mini/aot-runtime.c:4333, condition `got\' not met\\n"", user_data=0x0000000000000000) at mono-logger.c:458\r\n    frame #5: 0x0000000100bc32b4 nsarrayfilter`monoeg_g_logv(log_domain=0x0000000000000000, log_level=G_LOG_LEVEL_ERROR, format=""* Assertion at %s:%d, condition `%s\' not met\\n"", args=""\xef\xbf\xbd\xef\xbf\xbd"") at goutput.c:115\r\n    frame #6: 0x0000000100bc33e0 nsarrayfilter`monoeg_assertion_message(format=""* Assertion at %s:%d, condition `%s\' not met\\n"") at goutput.c:146\r\n  * frame #7: 0x000000010099c068 nsarrayfilter`init_method(amodule=0x000000010180b400, method_index=1034, method=0x000000010181a128, init_class=0x0000000000000000, context=0x0000000000000000, error=0x000000016f492eb0) at aot-runtime.c:4333\r\n    frame #8: 0x00000001009939c8 nsarrayfilter`load_method(domain=0x0000000100f009a0, amodule=0x000000010180b400, image=0x0000000101806000, method=0x000000010181a128, token=100664331, method_index=1034, error=0x000000016f492eb0) at aot-runtime.c:4056\r\n    frame #9: 0x00000001009933ec nsarrayfilter`mono_aot_get_method(domain=0x0000000100f009a0, method=0x000000010181a128, error=0x000000016f492eb0) at aot-runtime.c:4767\r\n    frame #10: 0x00000001009e2b9c nsarrayfilter`mono_jit_compile_method_with_opt(method=0x000000010181a128, opt=374417919, jit_only=0, error=0x000000016f492eb0) at mini-runtime.c:2343\r\n    frame #11: 0x00000001009e25c0 nsarrayfilter`mono_jit_compile_method(method=0x000000010181a128, error=0x000000016f492eb0) at mini-runtime.c:2440\r\n    frame #12: 0x00000001009e565c nsarrayfilter`mono_jit_runtime_invoke(method=0x000000010181a128, obj=0x0000000101200048, params=0x000000016f492dd8, exc=0x0000000000000000, error=0x000000016f492eb0) at mini-runtime.c:2954\r\n    frame #13: 0x0000000100aa62f4 nsarrayfilter`do_runtime_invoke(method=0x000000010181a128, obj=0x0000000101200048, params=0x000000016f492dd8, exc=0x0000000000000000, error=0x000000016f492eb0) at object.c:2942\r\n    frame #14: 0x0000000100aa1018 nsarrayfilter`mono_runtime_invoke_checked(method=0x000000010181a128, obj=0x0000000101200048, params=0x000000016f492dd8, error=0x000000016f492eb0) at object.c:3095\r\n    frame #15: 0x0000000100a3a968 nsarrayfilter`create_exception_two_strings(klass=0x0000000101819990, a1=0x0000000101200018, a2=0x0000000000000000, error=0x000000016f492eb0) at exception.c:222\r\n    frame #16: 0x0000000100a3a780 nsarrayfilter`mono_exception_from_name_two_strings_checked(image=0x0000000101806000, name_space=""System"", name=""OutOfMemoryException"", a1=0x0000000101200018, a2=0x0000000000000000, error=0x000000016f492eb0) at exception.c:278\r\n    frame #17: 0x00000001009f6c60 nsarrayfilter`create_domain_objects(domain=0x0000000100f009a0) at appdomain.c:209\r\n    frame #18: 0x00000001009f6250 nsarrayfilter`mono_runtime_init_checked(domain=0x0000000100f009a0, start_cb=(nsarrayfilter`mono_thread_start_cb at mini-runtime.c:949), attach_cb=(nsarrayfilter`mono_thread_attach_cb at mini-runtime.c:972), error=0x000000016f493158) at appdomain.c:304\r\n    frame #19: 0x00000001009e4f60 nsarrayfilter`mini_init(filename=""MonoTouch"", runtime_version=""mobile"") at mini-runtime.c:4363\r\n    frame #20: 0x00000001009bf1a8 nsarrayfilter`mono_jit_init_version(domain_name=""MonoTouch"", runtime_version=""mobile"") at driver.g.c:2590\r\n    frame #21: 0x0000000100bd16a8 nsarrayfilter`::xamarin_main(argc=<unavailable>, argv=<unavailable>, launch_mode=<unavailable>) at monotouch-main.m:421 [opt]\r\n    frame #22: 0x0000000100971d88 nsarrayfilter`main(argc=1, argv=0x000000016f493b38) at main.m:45\r\n    frame #23: 0x000000018160dfc0 libdyld.dylib`start + 4\r\n(lldb) p amodule->aot_name\r\n(char *) $6 = 0x00000001c0017a00 ""mscorlib""\r\n(lldb) p method->name\r\n(const char *) $4 = 0x000000010131ff0d "".ctor""\r\n```\r\n\r\nHowever, for 2018-04, with the workarounds in https://github.com/mono/mono/pull/9266/commits/8ae79f2219daf4065108fa9852a6acf8f1f090e0 this wouldn\'t be needed anymore. But we are going to need it in `master` (https://github.com/mono/mono/pull/9295 )'"
9321,198318570,"b""So far I haven't seen it with other compilers, but, should it happen, I've added the assertion below in this case.\r\n\r\nOn the other hand, the memory barrier doesn't cost much here (I would almost argue nothing, as this isn't hot code) and it would give us some additional safety."""
9334,198585795,b'there is `mono_mini_arch_lock ()` available in this file'
9385,199239980,b'does this look okay?'
9401,199614640,b'`g_printerr`?  so it works for embedders too.'
9409,199767494,"b""can you also remove `frame` as arg to `mono_interp_transform_method`? it isn't needed anymore."""
9409,199767949,b'please provide a meaningful error message to `mono_error_set_argument`'
9427,200142929,b'Why? It gives developers hints how to make tests work on their devices'
9419,200179545,b'can you define a constant for 18?'
9427,200453723,"b""We should probably generate `sdks/ios/runtime/Entitlements.xcent`, but let's do that in another PR."""
9419,200577725,"b'sorry to be that guy, but the indent is off in this function \xf0\x9f\x99\x82 '"
9443,200650413,b'`VTST`? does it mean `VTSTACK`?'
9443,200654874,"b""we can't init during transform, but we could have two different instructions depending if the vtable is initialized during transform."""
9401,201018026,"b""any reason why you don't use `gint` and `gsize` here?"""
9401,201018170,b'why `+1`?'
9401,201018215,b'why `+1`?'
9401,201024070,"b""maybe I'm missing something obvious here, but why can't we append the message here into the ring buffer with the lockless stuff you do in the other thread? having a dedicated thread for this feels over-engineered."""
9480,201405584,"b""hmm, I would argue that this is preferable so we can easily spot breakages. but I don't have strong opinions on that."""
9480,201504261,b'fixed'
9491,201578580,"b""I don't understand why this barrier is needed. the other one looks okay"""
9491,201580965,"b""if `initialized` is true I don't get why you care about preventing reads for those globals. should this barrier go above the first read of `initialized`?"""
9491,201653011,"b'I see, that makes sense. Thanks for the explanation!'"
9493,201853888,b'this needs to use the getter for `name`'
9529,202629235,"b""shouldn't this be `#if defined (TARGET_ARM) || defined (TARGET_ARM64)`?"""
9529,202629690,"b""either I don't understand this change or it's unrelated to what this PR is about. could you elaborate? """
9601,202972250,b'why did you remove that? is `UnsafeMov` a nop now?'
9601,202973236,b'why do we still need the logic for the `ctor` here?'
9601,202974406,"b'this was introduced by https://github.com/mono/mono/commit/30ad21953397d96d4017286f905794ad4adabbdb not exactly sure if we can remove it, maybe your changes around wrappers make it work for those regression tests though'"
9607,203155828,b'why `sleep (3)`?'
9607,203375163,"b""ok. Another question: Shouldn't we print `output` regardless of the MERP being enabled?"""
9630,203560466,b'why not `m_class_get_fields`?'
9630,203636825,"b""Ah okay. I noticed this inconsistency: usually it's something like\r\n* `mono_class_get_namespace` -> GC_UNSAFE wrapper + `m_class_get_name_space`\r\n\r\nhere the pattern is different\r\n* `mono_class_get_fields` -> GC_UNSAFE wrapper + `mono_class_get_fields_internal` ???\r\n\r\nI guess the problem is that `mono_class_get_fields` should be really `mono_class_get_fielditerator` or something like that, but I understand we can't easily change that name. With your explanation it makes sense."""
9539,203643210,b'these comments contain duplicated information and it is also hard to update/maintain. This would be enough:\r\n```\r\ndelegate5.exe: https://github.com/mono/mono/issues/9617\r\npinvoke3.exe: https://github.com/mono/mono/issues/9035\r\n```\r\n\r\nFIXME comment is a unrelated change.'
9688,204328189,b'`(gint64)` instead?'
9688,204328995,b'can we introduce something like `MYGINT16_MAX`?'
8654,204361266,b'```c\r\n#define DISABLE_CRASH_REPORTING 1\r\n```'
9673,205585316,b'please remove it'
9673,205585676,"b""can we get rid of `MONO_SIG_HANDLER_DEBUG` and `MONO_SIG_HANDLER_FUNC_DEBUG`, and make `mono_sigsegv_signal_handler ()` always call `mono_sigsegv_signal_handler_debug ()`?\r\n\r\nmove all the logic regarding platform support into `mono_sigsegv_signal_handler ()`. if it isn't supported/working, just pass `NULL`. or better, some magic value."""
9673,205586737,b'yeah (I edited my comment): A magic value would be a good fit then.'
9764,206061295,b'what is this about?'
9764,206061330,b'what is this about?'
9764,206061589,"b""I think we should fix all the callsites instead. the aren't that many."""
9764,206061820,b'is that really needed?'
9764,206061921,"b'is that really needed? if yes, please insert a new line.'"
9731,206065853,b'should it be `--enable-cxx`?'
9755,206113699,b'should probably be `s/$$(_$(1)_CONFIGURE_FLAGS)/$$(__$(1)_CONFIGURE_FLAGS)` (double underscore instead of single underscore)'
9737,206115397,"b'FWIW, this is related: https://github.com/opensource-apple/objc4/blob/cd5e62a5597ea7a31dccef089317abb3a661c154/runtime/message.h#L37-L51'"
9807,206182910,"b""inst_ls_word/inst_ms_word respected byte order, this doesn't"""
9807,206186853,"b'we could use the same macro for 32 bit and 64 bit, right?'"
9902,207990523,b'do we need this on `master` as well?'
9910,207991440,b'indent \xf0\x9f\x99\x82 '
9928,208636631,b'why is this needed when there is `AC_DEFINE` for it? '
10224,211935712,"b""the `interp_in` wrapper is called _before_ the `native-to-managed` wrapper which would to do the attaching. if it's called from an unattached thread, we don't care about the LMF in this wrapper; in other scenarios we might do."""
10224,212926627,"b""it's copy/paste from other places that are using `MONO_INIT_CONTEXT_FROM_FUNC`. we could probably remove everything that mentions `MONO_INIT_CONTEXT_FROM_CURRENT` from the code base, no architecture seems to define it."""
10224,213244813,b'correct'
10355,213640739,"b""To illustrate the issue, see: https://gcc.godbolt.org/z/g1rhHc\r\n\r\nIt wasn't obvious to me that `sizeof` _includes_ the empty `chars` array. Good catch."""
10337,214001128,"b""I tried something similar, using `mono_threads_enter_gc_unsafe_region_unbalanced ()` which basically expands to\r\n\r\n```C\r\nmono_threads_enter_gc_unsafe_region_unbalanced_with_info (mono_thread_info_current_unchecked (), &stackdata)\r\n```\r\n\r\nso it's `mono_thread_info_current ()` vs. `mono_thread_info_current_unchecked ()`. Any reason why we don't use `mono_thread_info_current ()` in `mono_threads_enter_gc_unsafe_region_unbalanced ()`?"""
10445,214585214,"b""we should remove `MonodroidDir` and `MaccoreDir`, it isn't used anymore, right? (can be a different PR)"""
10468,215042813,"b""why can't we just `mono_mb_emit_byte (mb, CEE_RETHROW);` instead?"""
10468,216404414,"b'I might missing something here: What does ""in flight"" mean? \r\n\r\nI don\'t understand the difference: Calling `mono_marshal_rethrow_exception ()` ends up the same as when `OP_RETHROW` is lowered. See AMD64 for example: https://github.com/mono/mono/blob/1d8954083f7da0d83be04abe201a3e833eb8021f/mono/mini/mini-amd64.c#L5010-L5016 '"
10545,216711722,b'needs bumping of `MONO_EE_API_VERSION` above.'
10545,216764058,b'why is this needed? we usually lazily initialize `ThreadContext` in the interpreter.'
10545,216771463,"b'I would be conservative about adding functions to this interface, so I would prefer not to introduce `thread_attach_cb` if not 100% needed.'"
10545,216806078,"b""I'll take a look tomorrow """
10545,216933943,b'pushed a fix'
10545,217054548,b'already happened \xf0\x9f\x99\x82 '
10577,217197816,"b""on what arch is it running? armeabi-v7a, arm64-v8a, x86 or x86_64? I guess it's whatever is available via adb?\r\n\r\nwhat if we want to test 32bit and 64bit? it's possible to run an android app targeting armeabi-v7a on an arm64 device."""
10468,217732684,"b""ah, that makes sense, thanks @lambdageek. I think we could instead introduce for example `CEE_MONO_RETHROW` (as far as I understand now, that's what @alexanderkyte meant in his previous comment). But at least an explanatory comment in the source code for that would be nice \xf0\x9f\x99\x82 """
10532,218097833,"b""I think `mono_memory_barrier ()` isn't needed after you use `mono_atomic_{store,load}*`."""
10740,219570904,"b""(can be done later) we should rename it to `REGRESSION_FILTER_METHOD`. it's not really interpreter specific"""
10882,221561090,"b""it's the previous three steps squashed into one step, so it doesn't change anything really."""
10468,221568674,"b'`saved_in_unmanaged` is `gint32`, so it should be `CEE_STIND_I4`?'"
10749,222317113,b'fixed \xf0\x9f\x91\x8d '
11013,223337118,b'what magic number is `131072`?'
11013,223401102,b'where is `set_sp` used?'
11053,223974061,b'we use that access pattern everywhere in the interpreter'
11064,224006139,"b'true, I changed it so that we call `mono_gc_register_altstack` if `tls->stack_ovf_guard_base` is set. `mono_gc_register_altstack` is a boehm thing btw.'"
11064,224012352,b'fixed'
11064,224143938,"b""It shouldn't fail, but evidently it does fail https://github.com/mono/mono/issues/10415\r\n\r\nWe should leave the warning so we notice if it starts happen _too_ often."""
11071,224195709,"b'ugh, sorry about that'"
11133,225044401,b'I suggest to use `mono_valloc` instead.'
11291,226841362,b'is there a problem around safepoints?'
11321,227521965,"b'thanks, updated.'"
9833,227654776,"b""shouldn't the class be `MonoJITLLVMMicrobenchmarkConfig`?"""
11306,227909590,"b'`ves_icall_System_Buffer_MemcpyInternal` is void, why is the return type declared as bool here? '"
11321,228042892,b'fixed by https://github.com/mono/mono/pull/11360\r\nthanks @jaykrell '
11307,228264628,"b'Since we do FullAOT+interp here, I suggest ""aot_full_interp"" instead of ""aot_interp"". Rationale: At some point we might want to have a AOT+interp profile (instead of AOT+JIT, which is the desktop default today).'"
11463,229705338,"b'yes, thank you!'"
11490,229731064,"b'growing for this usecase is not necessary, just makes it more complicated than it needs to be.'"
11466,230002430,b'merging went wrong'
11490,230006086,b'https://github.com/mono/mono/pull/11499'
11512,230323322,"b'interesting. for Xamarin.iOS, does it mean they are going to need to build two different BCLs? since the interpreter is optional.'"
11594,231507307,b'oops. thanks'
11636,232449737,b'`s/HAVE_PTHREAD_KILL/HAVE_KILL/`'
11636,232449743,b'`s/pthread_kill/kill/`'
11636,232449759,b'guard it with `HAVE_KILL`'
11636,232449773,b'is `waitpid(2)` available on all platforms? do we need some `HAVE_*` guard?'
11636,232449805,b'not used?'
11638,232454146,b'I think sgen is the default anyway '
11672,233472857,b'why `2`?'
11691,233687473,"b'not quite happy with the naming here: `watch64_32` gonna need at least watchOS 5.0, which is different to what `watch` needs. Any suggestions?'"
11691,233687521,b'@luhenry is the `archive` target automatically going to pick up that new target?'
11691,233839479,"b'thanks, fixed.'"
11691,233839728,"b'The target fails on CI because it requires Xcode10, but we only have Xcode9 on the bots. So the answer is yes \xf0\x9f\x99\x82 '"
11691,233872376,"b'good question, I opened an issue: https://github.com/mono/mono/issues/11697'"
11735,234691534,"b""why can't we inline methods with calls?"""
11735,234692200,"b""does that mean we don't emit sequence points for inlined methods?"""
11735,234695369,b'nit: you could do\r\n```C\r\nif (signature->hasthis && arg_n ==0)\r\n  return mono_get_object_type ();\r\nreturn signature->params [arg_n - !!signature->hasthis];\r\n```'
11735,234696055,"b""1. s/malloc/g_malloc/\r\n2. where is `arg_offsets` free'd?"""
11735,235396713,"b""with this commit (https://github.com/mono/mono/pull/11735/commits/464cb0146c76b43ad22ccedd24d855370cc3fa56) it's fine \xf0\x9f\x91\x8d  """
11789,236542013,b'why was this moved? This should be after the loop (it potentially changes `requires_safepoint`).'
11811,236716521,"b'for the curious reader, `nftnptr-arg-trampolines=` will be ignored on !=ARM platforms.'"
11835,237507579,"b""this isn't used anywhere?"""
11909,238409424,"b""shouldn't the `#endif` move up and replace `#else`?"""
11907,238669075,"b""let's remove the comment then"""
11987,240385670,"b""shouldn't we have an additional target, e.g. `llvmonlyinterpcheck`?"""
12043,241404666,b'shorter?\r\n```csharp\r\nthis.key = new byte [source.Length];\r\nfor (int i = 0; i < source.Length; ++i)\r\n  this.key [i] = (byte) source [i];\r\n```'
12043,241434110,b'is it critical in terms of perf or raciness?'
12055,241544232,b'This maps to the configuration we have on our CI machines: https://github.com/mono/mono/pull/11691#issuecomment-439178459'
12054,241554996,"b""let's use `gint32*`?"""
12054,241555240,b'`s/4/sizeof (guint32)/`'
12055,241748997,"b""Okay, I've moved the settings needed for the bots to `run-jenkins.sh`. Is that better?"""
12055,241765177,"b'we can do that later. for now, if we would do that, it would break current master.'"
12070,241780440,b'`s/saved_ip_offset_fp/saved_ip_offset_ip`?'
11691,244698200,b'they are macros \xf0\x9f\x99\x81 '
11691,244728029,b'resolved by https://github.com/mono/mono/pull/12055'
12114,244774513,"b'is there any order expected? should we rename it rather to `ss_nested_arg1`, `ss_nested_arg2` etc. and verify that in the test?'"
12092,244777146,b'the comment should be moved inside the `CHECK_RESUME_STATE` macro'
12293,246321135,b'removed'
12293,246321269,"b'no, reverted. thanks'"
12383,247434290,b'needs API version bumping'
12383,247435453,b'can we add a field to `InterpMethod` instead?'
12383,247436051,b'nit: `mono_method_get_full_name (wrapper)` would do the same'
12416,247544787,b'where is this introduced? missing `configure.ac` changes?'
12416,247545079,"b'`-D NETCORE`\r\n\r\nit should be `ENABLE_NETCORE`, and the define should be in `config.h`, that is, generated by configure.'"
12433,247996950,"b""`method` isn't used anywhere"""
12539,249486443,"b""Note, the guarded code by `HOST_TVOS` wasn't really guarded _before_ as `HOST_TVOS` didn't exist. async suspend and friends are available on tvOS, so this was wrong."""
12554,249706040,b'```suggestion\r\n\t\t\t\ttable [slot] = (gpointer) ((gsize)target_imethod | 0x1);\r\n```\r\nshould it be that?'
12554,249708019,"b'It would be nice to squash that into `vtable`, otherwise we have this constant overhead of `2 * sizeof (gpointer)` bytes _per_ VTable instantiation in the runtime. On the other hand, this will make the implementation more complicated.\r\n\r\n@vargaz do you have thoughts on this?'"
12533,249826076,"b""`&linkbuf` will _never_ be `NULL` as it's allocated on the stack so it always has an address. In the end, your change boils down to `pbuf = &linkbuf` all the time. And this is fine, as `lstat` behaves the same as `stat` if the provided file isn't a symbolic link."""
12631,252184529,b'please use some enum instead of `1` and `2` for `flags`'
12681,252220909,b'`wrapper_cache_method_matches_data` is unused now'
12655,252228535,"b""This function shouldn't be a header file, please move it back to the `.c` file. Otherwise this function is generated in each module that includes this header."""
12762,253464508,"b""slightly duplicated code with `dump_mint_code`, but I guess it doesn't matter \xf0\x9f\x99\x82 """
12762,253464573,b'is there a testcase for this?'
12849,254979007,b'I would call it `MINT_LDIND_REF_CHECK`'
12893,255012974,b'Note that https://github.com/mono/mono/blob/972f29179dc11558902d89b55ae2f333c71a9aa9/configure.ac#L4442-L4445 already exists on master'
12894,255115728,b'LLVM will translate it properly on armv7k as well'
12894,255122837,"b""I didn't test that configuration, but I don't see why LLVM shouldn't be able to emit proper code for that. It will emit whatever is right for the target ABI which is not always compatible with our internal ABI, thus the case distinction."""
12894,255130887,"b""I'll have a look"""
12895,255195287,b'iOS 64bit devices is the only target currently'
12903,255195907,"b'must be\r\n```suggestion\r\n\t\t\tADD_CODE (td, get_data_item_index (td, m_class_get_element_class (target_method->klass)));\r\n```'"
12894,255207704,"b'verified on armhf linux, generated code looks the same.'"
12850,255423202,"b'ufff, good catch \xf0\x9f\x91\x8d '"
12893,255450350,b'@vargaz will that break anything?'
12959,256106074,"b""shouldn't that be `$top_srcdir/../mono-extensions/scripts`?"""
12959,256106778,b'indent mismatch'
12959,256107210,"b'either that should be\r\n```sh\r\nexport CONFIGURATION=debug\r\n```\r\nor\r\n```sh\r\necho ""CONFIGURATION=debug"" >> sdks/Make.config\r\n```'"
12959,256109540,"b""`$(2)` isn't documented"""
12985,256420128,b'should be guarded by `NO_UNALIGNED_ACCESS` instead'
12970,256567596,b'should we also have `--runtime=mobile` here for `AOT_BUILD_FLAGS` and `AOT_RUN_FLAGS`? similar to the `bitcode` profile'
13007,256894102,b'I added that \xf0\x9f\x99\x82  follow-up discussion was that the BCL code contains exception filters.'
12985,257188604,b'I think it should be `(gsize)`'
12985,257188914,b'`NO_UNALIGNED_ACCESS` as well here?'
13044,258822065,b'this is fine'
13044,258822936,"b'I agree with @baulig here, we use that style everywhere and even you do it in `mono_native_state_add_ee_info` below \xf0\x9f\x99\x82 '"
13154,259712560,"b""feels like code duplication, but then again I'm not sure about all those conditions..."""
13134,259729360,b'`bar ()` is not used'
13138,259777894,"b'good point, I moved the bound check before the access.\r\n\r\npassing an invalid `method_index` is okay I think (see function comment).'"
13177,259872514,b'heads-up: this is going to conflict with https://github.com/mono/mono/pull/13154'
13181,259952825,"b'being a bit pedantic here, but we do `for (int i = 0; [...])` usually'"
13225,261206618,b'`isinst_instr` or `instr_isinst`? choose one! \xf0\x9f\x98\x9b '
13230,261285597,b'not really. you can use `$(CURDIR)` instead:\r\n```shell\r\n$ pwd\r\n/tmp\r\n$ mkdir -p deep/dir/path\r\n$ cat > deep/dir/path/Makefile\r\nall:\r\n\techo $(PWD)\r\n\techo $(CURDIR)\r\n$ make -C deep/dir/path\r\necho /tmp\r\n/tmp\r\necho /private/tmp/deep/dir/path\r\n/private/tmp/deep/dir/path\r\n```'
13215,262042832,"b'Good question. I observed two requirements:\r\n\r\n1. If the (eventual) delegate body is part of the CIL image, the compilation error should be materialize as managed exception upon the first invocation. See `mono/tests/delegate15.cs`: https://github.com/mono/mono/blob/df37bb7a7c874fa33e1aa5ddf3648df4aec5d51e/mono/tests/delegate15.cs\r\n2. If the delegate body is generated _at runtime_, such compilation errors are expected at delegate creation. See `MemberBindTests.cs`: https://github.com/mono/corefx/blob/68f67ad6ced8b74a65a1a5617a4c761bb203a25b/src/System.Linq.Expressions/tests/MemberInit/MemberBindTests.cs#L165-L178\r\n\r\nThis was previously covered by `create_delegate_method_ptr ()`: https://github.com/mono/mono/blob/85c8e85476fcc2076e3b6e362c77c62f463340c5/mono/mini/mini-runtime.c#L3555-L3570\r\n'"
13312,266156301,b'does this comment add value?'
13312,266257572,b'this comment seems to belong to `LLVMSetInstructionCallConv ()`. move it there. the comment above belongs to `set_call_preserveall_cc ()`'
13312,266257707,"b""the option name already contains a negation, so this is hard to read imho. could you rephrase it to `if the flag is set, then [...]. if the flag isn't set then [...]`? maybe use bullet points."""
13312,266257754,"b""how can this code be reached? shouldn't this method only be called if `mono_llvm_only` is set?"""
13312,266549350,"b'ok. that was not obvious to me because of the filename (`llvmonly-runtime.c`) and function name (`init_llvmonly_method ()`), but it makes sense due to the nature of this change.  we should change that, but can be done later in order to avoid noise in this PR.'"
13516,267347834,b'uninitialized'
13516,267350884,"b'also use some ""magic"" value here, `0xffff` is -1 and not obvious enough imho.'"
13516,267352246,b'use `mono_mempool_alloc0`'
13585,267897926,"b""unfortunately, `ucontext_t` is not portable \xf0\x9f\x98\x95 That's the whole reason why we do the  exercise with `MonoContext`."""
13585,267897944,"b""it's swapped, it should be `memcpy (copied_ctx, sigctx, sizeof (...))`"""
13647,268693890,b'fixed'
13691,269579922,"b'`dump_retval` is only used in code guarded by `DEBUG_INTERP`, so we should keep that to avoid unused warnings.'"
13691,269580463,"b""I'm a bit afraid that could break the exception handling stuff on tvOS.  do we really need that?"""
13691,269595487,b'oh! nice'
13691,269595813,"b'unfortunately it _is_ fragile.  we can still merge it, it will be easy to undo'"
13732,270309264,b'should we use `mini_get_underlying_type (t)` here? \xf0\x9f\x98\x84 '
13732,270309627,b'`else if`'
13761,271301953,b'sounds like this was wrong back then? https://github.com/mono/mono/pull/5791/commits/eae0a0604a8eafe3e8793a08dd754b01418ca310'
13761,271303592,b'do `MINT_LDOBJ_VT` and `MINT_LDIND_I1_CHECK`/`MINT_LDIND_I2_CHECK`/etc. have the same instruction length?'
13761,271303725,b'same here regarding instruction length'
13761,271304379,"b""we don't need to handle the enum case anymore?"""
13761,271304572,b'could we have a `stackval_from_data_fast` helper function instead?'
13761,271717387,"b'ah, sorry'"
13769,272058643,"b""I was wondering why we wouldn't use `mono_class_static_field_address ()` here: apparently it can trigger a class init, which we don't want here."""
13849,272311570,b'there is `MINT_LDC_I4_0` and `MINT_LDC_I4_1`'
13849,272311923,b'there is `MINT_CEQ_P`'
13915,272983087,b'I think we should add `&& !likely`'
14021,275268445,b'print warning?'
14201,278297566,"b""it accepts `r4`, `r8` and `nfloat`. here I really only wanna do that if it's `nfloat`."""
14240,278947542,b'this looks a bit fragile. cant you do `&imethod->locals_size` / `&tmp_imethod->locals_size`?'
14284,279872775,"b""I'm a bit confused by the intention of this PR.\r\n* does `WASM` imply `FULL_AOT_RUNTIME`?\r\n* why is `FULL_AOT_RUNTIME && ...` needed? every usage of those two constants are guarded by `!FULL_AOT_RUNTIME`.\r\n\r\nWebAssembly _can_ be shipped with the interpreter, so why would dynamic code execution be disabled?"""
14309,280353106,"b'This should use `g_error (""..."")`. In general, `printf` doesn\'t work as expected on every platform so we use `g_print` instead. `g_error` will use it accordingly.'"
14397,281805630,"b""thanks, updated!  Let me know if we have proper macros for it, I'm a bit lost in that world \xf0\x9f\x99\x82 """
14529,285451561,b'we usually write\r\n```c\r\n#if defined(TARGET_X86) || defined(TARGET_AMD64)\r\n```'
14529,285500008,"b'not disagreeing with you, but I prefer consistency across the code base'"
14553,286084778,b'undo changes in this file'
14547,286522590,"b'it would, with a warning though (stack type mismatch). let me fix it'"
14547,286529242,b'updated the PR.'
14547,286534694,b'the commit added one'
14628,287345135,"b'If I understand correctly from this conversation (https://gitter.im/mono/mono?at=5ce7bda4ad024978c61dee93) with @BrzVlad, this would duplicate work on System V ABI. We should `ifdef` Windows specific ABI'"
14607,287406399,b'so I assume `$MONO_LLVM_PATH_OPTION` should eventually end up in `acfg->aot_opts.llvm_path`. Where does that happen?'
14648,288071333,"b'I\'m actually not a fan of this. What we had previously, gave us some ""extra safety"".  Here it\'s easy to get the ordering wrong.'"
14596,288092406,b'there is some opportunity to share code with `mini_get_underlying_signature ()`'
14596,288115140,"b""a boolean would also do it. but it's fine as it is, I don't feel strongly about it."""
14648,288268004,"b""I agree, having uninitialized values for the stub case is problematic. Please submit a PR for that, but changing the structure of the code just because of that is not the way to go. This comes to my mind: https://tirania.org/blog/archive/2010/Dec-31.html\r\n\r\nWe have `MonoDebuggerCallbacks`, `MonoUtilityThreadCallbacks`, `MonoThreadInfoRuntimeCallbacks`, `MonoThreadInfoCallbacks`, `MonoCodeManagerCallbacks`, `MonoRuntimeCallbacks`, `MonoRuntimeExceptionHandlingCallbacks` and others that all follow the same pattern as `MonoEECallbacks`, so I'm reluctant to change that.  Please don't understand this as a call to change the others."""
14717,289284701,b'`#define stub_entry_from_trampoline g_assert_not_reached`?'
14757,289802919,b'Nit: I think the more correct change (in the sense of saving a couple of bytes on the stack frame) would be to change this line:\r\n```c\r\nctx_offset += 8;\r\n```\r\nto\r\n```c\r\noffset += 8;\r\n```\r\nthen the frame size computation below would be correct.\r\n\r\nGreat find! \xf0\x9f\x91\x8d '
14782,290251678,"b""I think this is a bit too hack-ish. There is no real reason to _not_ support constant folding instructions with `num_sregs = 3`. The reason why we assert on it currently is that we do not have any instruction with that property where we could constant fold.\r\n\r\nWhy do we hit the assert then? First of all let us figure out why this only hits on 32bit. If you look at the generated IR for your testcase, you get on amd64:\r\n```\r\n il_seq_point il: 0x7\r\n i8const R21 <- [4361201612]\r\n iconst R22 <- [1]\r\n iconst R23 <- [0]\r\n atomic_cas_i4 R25 <- [R21 + 0x0] R22 R23\r\n```\r\nvs. x86:\r\n```\r\n iconst R13 <- [11144108]\r\n iconst R14 <- [1]\r\n iconst R15 <- [0]\r\n atomic_cas_i4 R17 <- [R13 + 0x0] R14 R15\r\n```\r\n\r\nThe assert triggers for `atomic_cas_i4` only on 32bit because `i8const` isn't properly detected as constant. In fact, we need to extend this https://github.com/mono/mono/blob/a76fc055cf1dc3173b6df1690d14723a13fbaf63/mono/mini/ssa.c#L819-L823\r\nto also support `OP_I8CONST`\r\n```c\r\n      /* Short-circuit this */\r\n      if (ins->opcode == OP_ICONST || ins->opcode == OP_I8CONST) {\r\n          *res = ins;\r\n          return 1;\r\n      }\r\n```\r\n_then_ you get the same issue on 64bit. <sup>1</sup>\r\n\r\nSo the assert hits when processing `atomic_cas_i4 R25 <- [R21 + 0x0] R22 R23`. I think the loop below should be able to detect memory access on a constant address and set `const_args = FALSE` in such cases. If we ever add instructions with `num_sregs = 3` and a constant folding opportunity would appear, we would still hit the `g_assert (num_sregs <= 2);`, letting us know to do something about it. With your change we would silently skip over it.\r\n\r\n\r\n<sup>1</sup> Unfortunately this seems to break other things _sigh_"""
14704,290484878,"b'`max_lines` should go away, it should contain the whole file'"
14704,290485014,b'`s/read/g_read`?'
14704,290486715,"b""why can't we do this on `HOST_ANDROID`?"""
14782,290612182,"b'> But I don\'t think a crashing assertion is appropriate for this, even if we add constant-foldable ternary instructions, because I\'m not sure what ""abstract"" invariant is being violated here.\r\n\r\nTrue, an assertion might be too... assertive \xf0\x9f\x99\x82  There\'s `g_warning ()`, but depending on the situation that might be too annoying in the long-term.\r\n\r\nFor the sake of fixing the bug we can go with the suggested change, but please add a comment to it.\r\n\r\nWe should follow up on the `I8CONST` thing though, looks like we miss some constant folding opportunities. (EDIT: created #14802 )'"
14704,293718721,"b""`MONO_CRASH_REPORTING_MAPPING_LINE_LIMIT` shouldn't be there (or maybe something crazy like 9999). and it doesn't seem to handle EOF; what if `/proc/self/maps` has fewer than `MONO_CRASH_REPORTING_MAPPING_LINE_LIMIT` entries?"""
14704,293852949,"b'> We had a line limit on the old printer\r\n\r\nIn the beginning we didn\'t have the limit, but `/proc/self/maps` can be large, thus we limited for user ease. It effectively rendered it useless because you really want to have the full content of `maps` available in order to debug an issue... not the first few mappings. Thus I suggested to completely drop it.\r\n\r\nHaving a partial snapshot of `/proc/self/maps` in the JSON file is useless too. We really want a full mapping (or drop it from JSON too).\r\n\r\nWhat causes potentially `realloc` here? `mono_state_writer_printf (writer, ""..."")`?'"
14779,294346900,b'`gint64`'
14779,294451796,b'@lambdageek consistency with the other function signatures in `boehm-gc.c` and `null-gc.c`'
15217,294642047,b'`0xa + 0x1 = 0xb`? \xf0\x9f\x98\x85  '
15251,295161778,b'@BrzVlad do you remember what the intend was back then? https://github.com/mono/mono/pull/9648/files#diff-5b6edc3ae02a8f8ef6e0cc12afca7eafR17'
15332,296298904,"b""so they could potentially leak, right?  I guess we don't care..."""
15433,298137954,"b'We have this in the interpreter too, and it was specifically introduced for some DIM work: https://github.com/mono/mono/commit/faecfce5d0c29dec56a18f10473a81e52d6acad5#diff-f115ce23fba6528256a47e2b7e8b0a19R1094\r\nWe should keep that in sync with the JIT.\r\n\r\nThe change in the JIT  is quite old, and the original looks like an import 0ab241ce65da\r\n\r\nAnyway, looks good to me. Unfortunately it seems to break at least one DIM test.'"
15448,298309083,b'indent'
15744,305001523,"b'on Python3 `child.get_field_offsetof () / 8` yields a float, so you would have entries like this:\r\n```c\r\nDECL_OFFSET2(MonoClass,interface_offsets_count,100.0)\r\n``` '"
15846,307805603,b'`G_UNLIKELY` for the branch conditions?'
15888,308603902,b'cherry-picked that into https://github.com/mono/mono/pull/15896'
15926,309110240,b'https://github.com/mono/mono/blob/a6e6c72c8fc3702db37e1572694a49902f63195f/mono/eglib/glib.h#L292\r\n\r\nprobably not the best name.'
15926,309261206,b'@vargaz why would that matter?'
15926,309264373,"b""`piinfo` wouldn't be `NULL` anymore."""
15936,309560086,b'why does `top_frame->native_offset` not have the correct value here?'
16386,316293616,b'I would rather `ifdef` the definition of `LLVM_AOT_INLINE_LENGTH_LIMIT` than duplicating this code.'
16386,316299754,"b""it's kind of worse, because `llvm_aot_inline_limit` is ignored for `!ENABLE_NETCORE`, so its existence is misleading.\r\n\r\nI'm proposing to use the block in `ENABLE_NETCORE` for everything and instead define `LLVM_AOT_INLINE_LENGTH_LIMIT` like this:\r\n\r\n```c\r\n#ifdef ENABLE_NETCORE\r\n#define LLVM_AOT_INLINE_LENGTH_LIMIT 30\r\n#else\r\n#define LLVM_AOT_INLINE_LENGTH_LIMIT 20\r\n#endif\r\n```"""
16386,316305785,"b""yeah, and otherwise it would fallback to `INLINE_LENGTH_LIMIT`? to make it more obvious, maybe this:\r\n\r\n```c\r\n#ifdef ENABLE_NETCORE\r\n#define LLVM_AOT_INLINE_LENGTH_LIMIT 30\r\n#else\r\n#define LLVM_AOT_INLINE_LENGTH_LIMIT INLINE_LENGTH_LIMIT\r\n#endif\r\n```\r\nanyway, it doesn't really matter."""
16441,317248379,"b""I don't think this is needed here."""
16510,318075862,"b""This happens both on iOS/32bit and arm/linux (with `make -C mono/mini llvmaotcheck`):\r\n```\r\n15:18:11.2288890 Aug 27 15:18:10 iPhone5c com.xamarin.bcltests.BCL tests group 1[1228] <Notice>: Running 'test_0_fconv_u4' ...\r\n15:18:11.2318360 Aug 27 15:18:10 iPhone5c com.xamarin.bcltests.BCL tests group 1[1228] <Notice>: test_0_fconv_u4 failed: got 1, expected 0\r\n15:18:11.2351870 Aug 27 15:18:10 iPhone5c com.xamarin.bcltests.BCL tests group 1[1228] <Notice>: Running 'test_0_rconv_u8' ...\r\n15:18:11.2359450 Aug 27 15:18:10 iPhone5c com.xamarin.bcltests.BCL tests group 1[1228] <Notice>: Running 'test_0_rconv_u4' ...\r\n15:18:11.2371880 Aug 27 15:18:10 iPhone5c com.xamarin.bcltests.BCL tests group 1[1228] <Notice>: test_0_rconv_u4 failed: got 1, expected 0\r\n```"""
16531,318420749,b'`null` is problematic? Anyway I would suggested to prefix every label here with something like `ex_`. Looks good otherwise.'
16546,318731762,b'oops'
16558,318987112,b'copy-pasta'
16558,318987404,b'debug left over?'
16587,319625605,b'interesting'
16587,319625810,b'how did this ever work?'
16587,319627585,"b""isn't this if block redundant?"""
16721,322125651,b'should do it here as well'
16668,322309049,b'why 64 and 4?  is there a documentation for that somewhere?'
16729,322367860,"b""On macOS the assembler bails out with `unknown directive` on `.data.rel.ro`.  Maybe there is something similar available but I didn't investigate. Likewise for Windows."""
16794,323682858,"b""can we leave the `tracing` stuff when `DEBUG_INTERP` is set? otherwise tracing doesn't work with computed gotos enabled."""
16794,323683537,"b""alternatively I'm fine with not enabling `USE_COMPUTED_GOTO` when `DEBUG_INTERP` is set."""
16794,323683765,b'`s/printf/g_print/` so we can have fun on devices too!'
16794,323684410,"b'meh, nevermind. f8fd60b5c088 broke it, it used to do `goto main_loop` when tracing was enabled.'"
16794,323684980,b'(and thus call `DUMP_INSTR ()`)'
16794,323686001,b'agree.  therefore please guard the definition of `USE_COMPUTED_GOTO` with `DEBUG_INTERP` too.'
16787,325244370,"b'> Unless there is another allocation in between the localloc -- which might have other problems, but ignored here.\r\n\r\nThat sounds very easy to break for little benefit. '"
16955,326412557,"b""I don't think `managed-to-native` frames are supposed to be completely unwound when the exception is thrown from native code. There is an interaction between XI runtime and mono runtime: Let's say native code (ObjC code) is throwing an exception. On a managed<>native barrier the XI runtime will wrap the ObjC exception into a managed exception, use `mono_runtime_set_pending_exception` and then we would resume execution in the `managed-to-native` wrapper. The thread interruption check in the wrapper would pick up that exception from there and continues with exception handling in Mono; at this point we have transitioned to GC Unsafe already.\r\n\r\nAnother scenario would be when we have:\r\n```\r\n<managed #2>\r\n<native>\r\n<managed #1>\r\n```\r\nAnd something throws an exception in `<managed #2>`, our EH transitions exception handling on the native<>managed barrier via the `MONO_FIRST_PASS_CALLBACK_TO_NATIVE` mechanism to the XI runtime. After that, it's the same path as above.\r\n\r\nIs there some other scenario you have in mind?\r\n\r\nAlso see:\r\nhttps://github.com/xamarin/xamarin-macios/blob/ba3acd709b04dd632d7abe191b9808ad5e9d1dd5/runtime/runtime.m#L2335-L2386\r\n\r\n(Note: There is a missing GC transition in this function, https://github.com/xamarin/xamarin-macios/pull/7036/files#diff-7063c4ba2c90067ddc44fc8a7d1d865cR2364 )"""
16955,326413393,"b'Heh, I was ""afraid"" of such a comment \xf0\x9f\x98\x89 \r\n\r\n`ThreadContext` wouldn\'t work as you can have several `managed-to-native` frames on the stack, right? Other ideas?'"
16955,326551178,"b'pff, that makes the patch so much simpler \xf0\x9f\x98\x84 \r\n\r\nupdated the PR!'"
16906,327660329,b'comment is outdated'
17099,330421953,"b'is thumb ever used with Android? if yes, then `call_size` can also be 4, and the value stored in the AOT image should be considered as a maximum value for the `call_size`.'"
17099,330423879,"b""From slack convo: All entries should have the same size, so it's fine."""
17157,331183813,b'https://github.com/mono/mono/blob/b1b61d7cb7f580f5e5438a756ef3e67a5a832eeb/mono/cil/opcode.def#L54\r\n\r\nThe `MONO_` prefix is introduced by some pre-processor magic \xf0\x9f\x99\x84 '
17179,331376223,"b'is this a temporary thing? if not, we can remove this `virtualenv` stuff.'"
17154,331405469,"b'we should probably add a define for that magic value (it indicates inlining is involved, right?). can be done in another PR'"
16934,331860757,"b'good point, will keep it in mind. `mono_pmip` does kinda the same in the JIT case.'"
17188,331910721,"b""I think it would be good to put an upper bound here (can be done later). Right now it's easy to reason that `cprop` won't happen more than twice, but presumably it won't be that easy in the future. I would like to avoid bugs where transform loops forever."""
17210,332398814,"b'**TL;DR**: It should be fine on iOS/tvOS/watchOS too.\r\n\r\nOn macOS:\r\n```console\r\n$ ls -l /usr/lib/libc.dylib\r\nlrwxr-xr-x  1 root  wheel  15 Oct  1  2018 /usr/lib/libc.dylib -> libSystem.dylib\r\n$ ls -l /usr/lib/libSystem.dylib\r\nlrwxr-xr-x  1 root  wheel  17 Oct  1  2018 /usr/lib/libSystem.dylib -> libSystem.B.dylib\r\n$ ls -l /usr/lib/libSystem.B.dylib\r\n-rwxr-xr-x  1 root  wheel  60880 Aug 23 08:30 /usr/lib/libSystem.B.dylib\r\n```\r\nSo the `libc.dylib` symlink ends up in `libSystem.B.dylib` which is suspiciously small to be honest.  All the symbols you would expect from `libc` seem to be in `/usr/lib/dyld`, which is the dynamic linker itself:\r\n```console\r\n$ file /usr/lib/dyld\r\n/usr/lib/dyld: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit dynamic linker x86_64] [i386:Mach-O dynamic linker i386]\r\n/usr/lib/dyld (for architecture x86_64):        Mach-O 64-bit dynamic linker x86_64\r\n/usr/lib/dyld (for architecture i386):  Mach-O dynamic linker i386\r\n```\r\nLet\'s add some verbose logging:\r\n```console\r\n$ DYLD_PRINT_LIBRARIES=y ls\r\ndyld: /bin/ls\r\ndyld: /usr/lib/libutil.dylib\r\ndyld: /usr/lib/libncurses.5.4.dylib\r\ndyld: /usr/lib/libSystem.B.dylib\r\n[...]\r\n```\r\nNo trace of `libc.dylib`.\r\n\r\nSo what\'s the situation on iOS? Not 100% sure, as I don\'t have direct shell access, there are however libs part of Xcode to support debugging:\r\n```console\r\n$ pwd\r\n/Users/lewurm/Library/Developer/Xcode/iOS DeviceSupport/13.1.2 (17A860)/Symbols/usr/lib\r\n$ ls -lha libc.dylib\r\nls: libc.dylib: No such file or directory\r\n$ ls -lha libSystem.B.dylib\r\n-rw-r--r--  1 lewurm  staff    12K Oct  2 10:13 libSystem.B.dylib\r\n$ file dyld\r\ndyld: Mach-O 64-bit dynamic linker arm64\r\n```\r\nMy guess is that the iOS device will contain the symlinks as we have seen above on macOS. Let\'s snoop around with `lldb` on an iOS device:\r\n```\r\n(lldb) settings set target.env-vars DYLD_PRINT_LIBRARIES=y\r\n(lldb) b xamarin_main\r\nBreakpoint 1: where = sdbdebugtest`::xamarin_main(int, char **, XamarinLaunchMode) + 72 at monotouch-main.m:230:28, address = 0x0000000100412700\r\n(lldb) r\r\nProcess 364 launched: \'/Users/lewurm/Projects/sdbdebugtest/sdbdebugtest/bin/iPhone/Debug/device-builds/iphone9.3-13.1.2/sdbdebugtest.app/sdbdebugtest\' (arm64)\r\ndyld: <7D0702F8-6706-341E-AC5E-C51EA5735484> /private/var/containers/Bundle/Application/6B85FA1F-3D0F-4382-8EC2-4BC85661D704/sdbdebugtest.app/sdbdebugtest\r\ndyld: <9B025821-A606-3634-A038-3032B850F8E2> /System/Library/Frameworks/UIKit.framework/UIKit\r\n <0DF2911E-80CB-3289-8A1E-ED0913D55A12> /System/Library/Frameworks/Foundation.framework/Foundation\r\ndyld: <DD159500-7D53-3484-AA3D-9DD5073D7A2F> /System/Library/Frameworks/CFNetwork.framework/CFNetwork\r\nLibrary/Frameworks/GSS.framework/GSS\r\ndyld: <F8C60E32-C706-3653-AD1F-6BE0E1A67550> /usr/lib/libz.1.dylib\r\ndyld: <C7159C1D-C5F2-3938-8019-5F1F26A812D6> /usr/lib/libiconv.2.dylib\r\ndyld: <F11CB1CC-B616-39B1-8D76-192163AF9C98> /usr/lib/libSystem.B.dylib\r\n[...]\r\n```\r\nEvidently it loads `libSystem.B.dylib` as well. Let\'s use `dlopen` directly:\r\n```\r\n(lldb) call (void *) dlopen(""/usr/lib/libc.dylib"", 0)\r\n(void *) $0 = 0x000000000f490e00\r\n(lldb) call (void *) dlopen(""/usr/lib/libSystem.B.dylib"", 0)\r\n(void *) $2 = 0x000000000f490e00\r\n(lldb) call (void *) dlopen(""/usr/lib/libSystem.dylib"", 0)\r\n(void *) $3 = 0x000000000f490e00\r\n(lldb) call (void *) dlopen(""/usr/lib/libASDF.dylib"", 0)\r\n(void *) $4 = 0x0000000000000000\r\n```\r\nThey all return the same address. Looks good to me!'"
17251,333044318,"b""good point. also added a guard for that specific situation. although it terms of functionality it doesn't change anything, it makes the generated code a little worse."""
17226,333682613,"b'does it really save local space? I thought at this point allocation for locals has already be done, and we can\'t compact it. do you mean it ""saves a store operation""?'"
17326,335371314,b'`enum`?'
17380,336108412,"b""shouldn't it be `(gsize)mn`?"""
17380,336119366,b'ah arrays. nevermind \xf0\x9f\x99\x82 '
17420,337159120,"b'Does this attribute really _guarantee_ us that this field won\'t ever change again? Could you modify it via reflection?\r\n\r\nI guess the answer is ""we do it in the JIT too"" and CI passes, so it should be fine.'"
17466,337206870,"b""`mono_is_addr_implicit_null_check` returning `false` doesn't imply that the fault is coming from C code. it can also be buggy JIT code."""
17466,337207401,"b""shouldn't `mini_jit_info_table_find ()` return `NULL` for instruction pointers that are not jitted? thus, implying that it's C code? Assuming that was meant with `native`."""
17466,337208309,"b""so this will still be called when `native = TRUE`.  I don't follow what the point of this change is."""
17489,337596199,b'please add an option to disable it via `--interp=-superinstructions`'
17489,337597253,"b""am I blind? what's the diff here?"""
17489,337597435,"b'you could add a macro, would read a bit nicer.'"
17551,339579554,"b""@lambdageek Thanks, I didn't know about it!"""
17551,339579714,b'copy/paste from `MONO_JIT_CALL` (above)'
17551,339579918,"b""it's using the same style as the function above (and it's also more readable imho)."""
16461,347916212,"b'Since the default thread stack size on linux is 8mb, I think 4k is kinda small.  My guess would be something like 256k or 512k would be a good start, but really we should have an environment variable or interp flag to control the chunk size and do some experiments. (I assume that is what you meant with `FIXME` \xf0\x9f\x98\x9b )'"
17893,350072110,b'`&& true`?'
17893,350073144,"b'```console\r\n$ printf ""0x%x\\n"" -18295873486192640\r\n0xffbf000000000000\r\n```\r\nnot sure what this value looks like in `Decimal` representation in memory, but I assume it will have a lot of null bytes. Any reason you chose this value?'"
17906,350373661,"b'you could use `System.*.{dylib,a}` (actually, that might requires `SHELL := bash`).'"
17922,350801807,"b""`copied_ctx = &jit_tls->orig_ex_ctx` which is used during stack walking\r\nhttps://github.com/mono/mono/blob/c4136ebd94567bb29557c94e7480e24fe72ffdac/mono/mini/mini-exceptions.c#L1161\r\nand initialized here:\r\nhttps://github.com/mono/mono/blob/c4136ebd94567bb29557c94e7480e24fe72ffdac/mono/mini/mini-exceptions.c#L2652\r\n\r\nSo I think it doesn't conflict with each other. That said, maybe we don't care about the size of `MonoJitTlsData` and I should just add another field for that purpose?"""
17922,350852430,"b'ah.  We ""allocate"" it by setting `%rsp` to `sp - 1` below'"
17968,352245402,"b'> I I I. 1. 7. 5.    **Backward   branch   constraints** \r\n> It shall be possible, with a single forward-pass through the CIL instruction stream for any method, to infer the exact state of the evaluation stack at every instruction (where by \xe2\x80\x9cstate\xe2\x80\x9d we mean the number and type of each item on the evaluation stack). \r\n> In particular, if that single-pass analysis arrives at an instruction, call it location X, that immediately follows an unconditional branch, and where X is not the target of an earlier branch instruction, then the state of the evaluation stack at X, clearly, cannot be derived from existing information. In this case, the CLI demands that the evaluation stack at X be empty.\r\n\r\nI would argue that `ret` qualifies as ""unconditional branch"" in this context.'"
17971,352460901,b'missing `#ifdef TARGET_WASM`?'
18012,353466095,"b""maybe do not use any default options at all if `llvmopts` is used? It's kinda weird to omit `-O2`, but not the other default options."""
18021,353472602,"b'good point, updated the PR.'"
18021,353582073,"b'I followed the style of the other macros around it, no strong feelings about it though (there are also no other definitions of `ALIGN_TO`/`ALIGN_PTR_TO`).'"
18095,355662791,b'formatting'
18095,355662898,b'formatting'
18129,356575798,b'it only operates on basic blocks afaik'
18129,357114502,b'actually this should probably be `sp [-2].val.type == STACK_VALUE_LOCAL`.'
18129,357165806,"b""> we replace it with field access on whatever local the sp [-2].val indicates, rather than accessing the local_index from sp [-2].ins->data [0].\r\n\r\nnot sure if I follow. For the local case, shouldn't `g_assert (sp [-2].ins->data [0] == sp [-2].val.local)` be true?"""
18129,357347749,"b'Thanks! You are right, the same issue was there with `ldarg`/`starg`. I also added a repro for that scenario.\r\n\r\nFixing this, as you suggested, opened up for more optimization opportunities.  For the repro by Zoltan in the issue (executing Roslyn basically), it increases\r\n* for the locals field optimization: from 110 to 166 fusions\r\n* for the arguments field optimization: from 2134 to 2235 fusions'"
18129,357348154,"b'not sure about this. Is that okay, for now at least? (until we do more stuff with `STACK_VALUE_ARG`).'"
18129,357369743,"b""Running `make -C mcs/class/corlib run-test`, before:\r\n```\r\nInterp statistics\r\nTotal transform time                : 6520.80 ms\r\nMethods transformed                 : 127963\r\nTotal cprop time                    : 553.36 ms\r\nTotal super instructions time       : 75.83 ms\r\nSTLOC_NP count                      : 107621\r\nMOVLOC count                        : 13007\r\nCopy propagations                   : 24591\r\nAdded pop count                     : 27432\r\nConstant folds                      : 72665\r\nSuper instructions                  : 271023\r\nKilled instructions                 : 604063\r\nEmitted instructions                : 4597899\r\nMethods inlined                     : 104246\r\nInline failures                     : 210839\r\n```\r\nAfter:\r\n```\r\nInterp statistics\r\nTotal transform time                : 6579.69 ms\r\nMethods transformed                 : 127969\r\nTotal cprop time                    : 532.04 ms\r\nTotal super instructions time       : 79.11 ms\r\nSTLOC_NP count                      : 107347\r\nMOVLOC count                        : 13016\r\nCopy propagations                   : 24603\r\nAdded pop count                     : 27720\r\nConstant folds                      : 72645\r\nSuper instructions                  : 273419\r\nKilled instructions                 : 605771\r\nEmitted instructions                : 4602170\r\nMethods inlined                     : 104376\r\nInline failures                     : 210898\r\n```\r\n(edit: warning, that's from a `-O0 -g` build)"""
18442,365981658,"b""Please use `g_print` instead of `printf`. While both have the same behavior on Desktop, it's different on e.g. Android: `printf` goes to `stdout` which is... somewhere, while `g_print` will be redirected the output to `adb logcat`."""
17452,366371777,b'oops.  so should we revert the commit? https://github.com/mono/mono/commit/dc866c2aadb6f6aba04ca0b5eb5799c4e5b7a0fd'
18449,366428263,b'oh dear \xf0\x9f\x98\x9e good catch'
18505,371924382,b'`aot_printerrf`?'
18505,371926440,b'`(char*)` cast not needed'
18621,372688465,b'nit: we do not prefix non-static functions with `mono_`'
18621,372689889,"b'nit: It prints a slightly different string than in the interpreter case (which is more general, and more ""correct"").\r\n\r\nMaybe we can move the if check and `g_printf` into `mono_runtime_print_stats`, so we could get rid of `extern mono_stats_method_desc`.'"
18626,372920527,"b""isn't needed."""
18626,372920660,"b""isn't needed."""
18626,372924312,b'nit: Move it above the `restart:` label. The comment in line 307-317 refers to the `if` statement in line 328.'
18624,373222289,b'Any reasoning for `2048`?  Do you mind updating the actual check here? https://github.com/mono/mono/blob/04c01efd4997d1f58ecdc0310932df2f4eb84fe5/sdks/builds/Makefile#L81'
18714,375399166,"b'@jaykrell this uses `clang`. Thanks for the comments, updated the PR.'"
18714,377123389,"b""I would suggest that we first get `arm-linux-gnueabihf` working on CI and then add the other targets. I'm sure there are bits missing :)"""
18777,377193554,"b""Good point, thank you. For what it's worth, the case is quite uncommon to actually happen (= `current->next` is set _and_ the requested frame size wouldn't fit).  In combination with GC, I'm sure that could lead to funny bugs... \xf0\x9f\x99\x82 """
18777,377255047,"b""Hmm, I guess we should do a `mono_compiler_barrier ();` after setting it to `NULL`? I'm never sure about this stuff."""
18777,377317693,b'@vargaz are you suggesting we should remove all the barriers around that stack fragmentation code?'
18777,377363872,"b'ah, k.'"
18703,378759635,"b'```suggestion\r\n\t\t\temcc_flags += ""-s ASSERTIONS=1 "";\r\n```'"
18825,379558100,b'Why is this removed?'
18877,380031209,"b""this comment belongs to the commit message. doesn't add any value in the source code."""
18855,380194620,"b""Yes, we need to move that to a public header.  For now you can work around the way as suggested here (just use the integer constant).\r\n\r\niOS uses a slightly different API which isn't suitable for Android (it's tailored for the use in an FullAOT environment)."""
18959,382166170,"b'We use that pattern quite a bit in the code base, examples:\r\n* `#include ""mono/cil/tables.def""`\r\n* `#include ""mini-ops.h""`\r\n* `#include ""mono/metadata/wrapper-types.h""`\r\n* `#include ""mintops.def""`\r\n* and probably more.'"
18959,382185526,"b""shouldn't it be this?\r\n```suggestion\r\n#define DEFINE_FLAG_READONLY(flag_type, ctype, c_name, cmd_name, def_value, comment) \\\r\n\tconst ctype mono_##c_name = def_value;\r\n```"""
18959,382188100,"b""hmm, I just saw it's done in `flags.h`.  Not sure why those flags are defined again here."""
18959,382189136,"b""ah, it's due to `MONO_API_DATA`. nevermind \xf0\x9f\x99\x82 """
19273,400725024,"b""I don't understand why this is done (`perf_dump_mmap_addr` is never used). Also not sure what the comment means.  Could you elaborate?"""
20321,479972908,"b'> Does this workaround mean null dereferences do not by default break in to debugger?\r\nThat would seem usually unfortunate, since they are usually bugs you want to see.\r\n\r\n`lldb` will still see `SIGSEGV` and is able to continue execution from that (i.e. let the debugee handle `SIGSEGV`).'"
575,3232511,"b""The cairo_ps_surface_dsc_\\* functions were added in 2006 for cairo 1.2.0:\nhttp://cgit.freedesktop.org/cairo/commit/src/cairo-ps-surface.c?id=09dfd6c3\n\nI could find any trace of a cairo_ps_surface_begin_setup function anywhere, even going back to cairo 1.0.0. Unless I'm mistaken, the only place it appears is in documentation in the above commit.\n"""
575,3233038,"b""That SurfacePattern.Extend was just hiding the inherited Pattern.Extend property, and doing exactly the same thing. So I removed it, but I was just trying to get rid of the compiler warning...\nAfter seeing http://cairographics.org/manual/bindings-patterns.html, now I think maybe it's Pattern.Extend that should be removed ?\nIn any case, they both can stay if needed.\n"""
1579,24995865,b'hrm :)\n'
1581,25027554,b'Tabs and spaces are mixed up apparently for this changeset :)\n'
1897,33476063,b'pamateters? patameters? :smile:\n'
4309,98821178,"b'This ends up not needed, right?'"
4588,107780710,"b""Good catch, I'll reword the commit. I'm basically making it symmetric with MethodInfoMirror."""
4587,107781730,b'I missed that discussion :)'
4588,107807228,b'Fixed the commit message.'
4588,107807244,b'Fixed.'
11973,239885701,"b""@vargaz removed the extraneous condition. Want me to remove the `{}` as they're one statement?"""
11973,239888264,b'Here you go sir.'
14667,288283421,"b""Don't we want to do this only if the client supports version `2.52` of the protocol?"""
14667,288283680,"b'Similar comment here, we probably want to do this only if the server supports version `2.52`.'"
15766,310211791,b'Nit: `{` should be on the `if` line.'
15766,310211925,b'Nit: space before the parenthese.'
15766,310212052,b'Nit: `is_fixed_size_array`'
19248,396645201,b'Agreed with @vargaz.'
943,10437592,"b""This should account for the work area's top-left corner, not assume it's (0,0).\n"""
943,10437929,"b""This doesn't make any sense, of course the bounds aren't going to match if you have multiple monitors. Probably we can still return true for now, as I don't think Xinerama even allows this.\n"""
943,10438183,b'MSDN claims this should return the work area of the primary monitor.\n'
943,10439238,"b""I've been told the primary monitor isn't necessarily at 0,0 in xinerama. I can't find any definitive documentation of this, but it seems to always be the first screen.\n"""
943,10536785,"b""What's the problem with XplatUI.WorkingArea, or Screen.PrimaryScreen.WorkingArea? Then we could implement it in backends later without touching this.\n"""
962,10681477,b'This is a very convoluted way to convert a byte array to a pointer.\n'
1007,12059793,"b""Seems like this will only follow one level of symlink and won't work correctly with relative symlinks. Probably you want Mono.Unix.UnixPath.GetRealPath().\n"""
1718,28626035,"b""It seems to me that we always call a wait function between accesses to both of these variables, so I'd expect that the compiler cannot assume they haven't changed. Except in the thread loop when threadpool_shutdown is true, but it should never change from true to false. What do you expect 'volatile' to change here?\n"""
2029,38762592,b'So that I can test for 1 value instead of 2.\n'
2782,57009705,"b""Are you sure it's possible for this API to return 0 on Windows? When I test it on a Windows machine without any remoting involved, I always get a positive integer.\n"""
3354,73415993,"b""Hm, currently we don't change call_convention between the wrapper method and the eventual native call (in mono_marshal_emit_native_wrapper), so for a stdcall function, they must both be stdcall. However, we do set the signature's pinvoke field, and we check that in several other places. So perhaps the real problem is that CALLCONV_IS_STDCALL can be true for a non-pinvoke signature. Does that make sense to you?\n"""
14260,280792677,"b""I don't see any documented threading or locking requirement in mono_class_load_from_name. Maybe there is one that I'm not aware of. I do see there's a GENERATE_GET_CLASS_WITH_CACHE macro that seems designed for this purpose, so it's probably better to use that."""
14260,280799202,"b""Yes, it's ClassInterfaceType.AutoDual. I can add a define."""
14260,280808580,"b""I don't know what it means, it was found via testing. My theory is that there are 4 Object methods that were assigned id's. Ideally, I'd figure out what those are and assign them that way, but I'm not sure how to find them."""
14260,280810132,b'Can we free it? It seems to be potentially used by COM interop code for the lifetime of the class.'
14260,280814187,"b""I don't know, it was found by testing. This value is commonly used in IDispatch definitions in Windows headers for sequential method id's, in a similar way to what .NET is doing, but I couldn't find a define or documentation for it."""
18801,378557173,b'We already have a test showing that calling ReleaseHdc before GetHdc throws an exception.'
1397,20163808,"b""Yeah that's ok, IMO contribution is too small to justify an authors list.\n"""
1397,20163904,"b'yep, spaces were converted into tabs in the 2nd commit in the PR: https://github.com/mythz/mono/commit/e2b3578cafb06ca07f249f1e17ca1fa768da5785\n'"
1273,17441996,"b'I wanted to isolate the behavior here with a very simple case ... the existing cs file (and related patches) have a great many details, and changing the contained classes would have involved making changes to every test\n'"
1273,17442045,"b""Totally not a problem here, but I'm curious as to the reasoning here ... does a trailing newline enable, or hinder something? Just want to know so I make sure to do the right thing going forward :)\n"""
1273,17442285,"b""I'll go through and fix this ... but the problem is that xamarin studio _forces_ an indentation for every single edit  of every single line :( I'm not really sure how to get it to leave the existing indentation alone.\n"""
1273,17442689,"b'Yes, I had to pass in the assembly reference to avoid doubling up the assembly versions for a type that wasn\'t in the list of ""dropns-assemblies"". Also, the previous version of this particular code was pulling the assembly versions for all assemblies in the list to apply them to this type file. This, was incorrect behavior ... making this change did not cause any regressions in the existing test suite.\n'"
1273,17443441,"b'Nope, it has the extension :)\n'"
1273,17444227,"b'Indeed, as @migueldeicaza suggests, we need to specify the namespace to drop. My incorrect assumption when first developing this was that the ""namespace drop"" would apply to all assemblies in a given `mdoc update` run ... but I didn\'t consider the fact that there would be other assemblies, even some with the namespace being dropped that wasn\'t actually dropping it.\n'"
1273,17450577,"b""It's per-assembly\n"""
1273,17503626,"b'This was good feedback, I modified the code so that there\'s only one parameter, `dropns`, with a slight variation of your code, which worked perfectly:\n\n```\n        { ""dropns="",\n          ""When processing assembly {ASSEMBLY}, strip off leading namespace {PREFIX}:\\n"" +\n          ""  e.g. --dropns ASSEMBLY=PREFIX"",\n          v => {\n            var parts = v.Split (\'=\');\n            if (parts.Length != 2) { Console.Error.WriteLine (""Invalid dropns input""); return; }\n            var assembly = Path.GetFileName (parts [0].Trim ());\n            var prefix = parts [1].Trim();\n            droppedAssemblies.Add (assembly);\n            droppedNamespace = prefix;\n        } },\n```\n\nThe ability to supply multiple assemblies really wasn\'t a core requirement ... we really just needed to specify one when I really sat and thought about it :)\n'"
1306,18006729,b'Oh ... I was just following the style in the rest of the method. Should I change this?\n'
1306,18006784,"b""Good point on the `else if`, I'll make that change.\n\nAs for the `.GetMethod` ... I didn't consider that there might be a set only property. I will add a test case and adjust the code to make sure it works in both cases.\n"""
1306,18006828,"b""Dang it! heh, I was so careful with the rest of the spacing/formatting so as to avoid the whitespace issues from the previous pull requests. Ok, I'll fix this and try to be more careful again going forward.\n"""
1460,21908977,"b""Ahh, interesting ... so that Action will basically just get called multiple times for each instance of the parameter that's included. Ok, I can make that change :)\n"""
1460,21931190,"b'@jonpryor alright, I made a small change to make sure this syntax is supported, and updated the commit message and pull request description with updated examples For the syntax you suggested :)\n'"
1460,22869983,"b""Is it? just out of curiosity could you point out where you see this in the build spew (in the interest of me learning how to interpret the results better)? \n\nThat being said, I don't remember making this change explicitly ... I rebased my branch _after_ that commit was merged into master that we talked about via email (the one with the xml formatter changed), so in theory, it should match whatever is in master ... no? let me check\n"""
1460,22872197,"b""oh geez ... duh, of course, had a momentary brainfart and didn't realize this was the diff against master :P \n\nAhh I see, so then the build output changed when you ran the build again? I guess it was just a temporary glitch with the build server? cool ... in any case. let me rebase against master and make sure there aren't any errant XML changes.\n"""
1460,23014467,"b""Well ... the purpose of the code is, specifically, to support a combined ios and mac  set of documentation, so the true purpose was always for two sets of assemblies from which you're dropping a namespace. I added support for one to make writing the unit tests easier and is how I developed the bulk of the functionality initially (tdd) ... but any more than that delves into territory that I didn't test, and didn't need to test, so if there are more than two it just assumes you're not dropping a namespace.\n\nI definitely tried to keep things as non-specific as possible given that this is an open source project ... but there's also only so many hours in a day :P \n"""
1460,23014787,"b""This is very good feedback ... I only added the static state originally due to lack of time to do a bigger refactor, and this data needed to be referenced from a number of parts of the codebase. That being said, I didn't add this lightly, I'm aware of the limitations that come with adding static mutable state ... in fact, one of the things that I'm planning on doing is running mdoc through Xamarin's new profiler with an eye towards making it generally faster. Multithreading it is the obvious candidate to do that (other than general code/algorithm improvement) and this was first on my list to refactor out.\n\nIs it cool if we leave the mutable state refactor until a later date? or do you want it resolved before merging this code in?\n"""
1460,23014953,"b""Ahh, you know what ... this is an artifact from an earlier implementation that I was going for. I eventually changed how I was going to do multiple runs (because I needed to be able to do everything, for both classic and unified assemblies in one invocation, but it's much easier to keep the logic separate while it's running ... so I just run it twice internally for each set of assemblies).\n\nI can change this and will resubmit\n"""
1460,23015123,"b':/ I know, sorry ... it just seemed such an egregious break from the coding standards that had just made it through to master. Is it verboten to do whitespace changes ever? Would it be better to do have a ""whitespace only"" pull request to fix things like this? or better to just leave it as is until that code gets rewritten entirely at some point?\n'"
1460,23015334,"b""Yes, as with the mutable static state, this is also another thing that I hesitantly added to avoid a big refactor. The only reason I went forward with it is because the parameters I was adding were optional, and really only useful when being called specifically from mdoc ... so it wouldn't break any other clients that might be using this API. \n\nBut you're right that it's a code smell ... if any cause comes up again to modify this code, I will certainly refactor rather than continue adding to the parameter list.\n"""
1460,23015587,"b'I didn\'t notice that property ... so I will definitely refactor to use it (along with the other few comments in this area), thanks for pointing it out.\n\nAs for the intent behind this ... it\'s because when building up the ecma URLs, if the ""type"" is available, we can print out URLs such as `SomeClass<T,K>` ... but if even one of those type arguments is null, then we have no way of printing out the correct signature, and so it needs to default back to the SomeClass`2 form of the signature.\n'"
1460,23028897,"b'For this particular thing, no ... all of this functionality is for maintaining documentation from two frameworks in a single set of XML docs ... since there is much shared code in this case. I\'d originally kept the changes to both mdoc and monodoc in separate commits to try to break it up in that way, but I\'ve since squashed those into one per early feedback on this PR.\n\nBut yes, generally I prefer to make smaller PRs when possible and avoid big ""releases"" like this ... this just happened to be a big job with lots of internal changes required :/\n\nNeedless to say, I will avoid unneeded whitespace changes entirely in the future.\n'"
1460,23044250,b'Ok ... I will be very much more careful with this in the future. Thanks for the explanation :)\n'
1641,26761595,"b""Unfortunately, this won't always be the case, particularly for importing docs generated from triple-slash ... for example:\nhttps://github.com/mono/mono/blob/master/mcs/tools/mdoc/Test/TestEcmaDocs.xml#L317\n\nThe docs there don't have a `TypeParameter` list, so I went with the approach of checking for `TypeParameters`, and otherwise falling back to checking for type parameters in the name string.\n"""
1888,33066662,"b""hmm, really interesting approach ... I only went with `long` because that's what the existing implementation was using for the flags enumeration formatting. I'll take a look at refactoring this part\n"""
1888,33984079,"b'well, the reason I broke it out is because I had to place the logic for the ""Apple"" platform first, before doing this ... because technically, it would have been handled by this logic if it was a part of the first formatter in the array.\n'"
1888,33984162,"b""ack! man, yeah Xamarin Studio makes it so hard to adhere to the existing formatting in this file ... I will submit another change that fixes this, but will wait until you're done looking at the rest of the changes :)\n"""
2012,38452480,"b'Well I considered that, but it actually prints a message with the file name immediately prior to this section which states the intent ... so this was intended as a sort of additional note on the why it never happened.\n'"
2012,38456299,"b'I know this one is a bit confusing, but It\'s actually to persist changes made to the XML document in the call to `UpdateAssemblyVersions(e, assembly, GetAssemblyVersions(assemblyName), false)` several lines above. This method doesn\'t actually persist those changes to disk, and in most other cases where a type is actually in the assembly, it gets persisted later on ... but in this code path when a type has actually been removed from the assembly it never ends up saving it. And so I needed that to be persisted because that function removes the ""classic"" reference ... then later on when we do the ""unified"" assembly, we can see that the type isn\'t tagged with ""classic"", and it\'s safe to remove if it\'s not in the unified assembly either.\n'"
2183,43506506,"b""hmm, interesting ... well, I'm just going off of what's already being used in production, so for example:\n\nhttp://docs.go-mono.com/?link=O%3aJava.Lang.Float.ExplicitConversion\n\nSeems like this is an instance of where we may have extended the spec long ago\n"""
2183,43511973,"b""Hmm ... well this is another case where I was simply going by long-implemented and public functionality :/ So for example, you can see the cref being generated for this member by the monodoc tree (via the node's `PublicUrl` method):\n\n`http://docs.go-mono.com/?link=M:System.Collections.Generic.Dictionary<TKey,TValue>$System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add`\n\nSo I guess the question is ... do we have `ToEcmaCref` conform to the already-implemented functionality in monodoc, or do we change the implementation of the `EcmaHelpSource.GetPublicUrl` to comform to the points you've brought up?\n"""
2183,43514992,b'it is public: https://github.com/mono/mono/blob/master/mcs/class/monodoc/Monodoc.Ecma/EcmaDesc.cs#L13\n'
2183,43517967,"b""ahh, you know, that's a great point ... `#` is definitely a non-starter as it doesn't even get sent to the web server :/\n"""
2183,45354169,"b""without changes to the parser/grammar, not currently ... I tested, and it fails to parse crefs that contain `#`. Much of the codebase assumes that we'll be using `$`, so it would probably be a bigger job. See my commentary on this here: https://github.com/mono/mono/pull/2183#issuecomment-153480123\n"""
2333,48964079,"b'@jonpryor, ok, that was fair, I added the extra tab stop :)\n'"
524,2495540,"b'There\'s a small typo here (""migth"") :)\n'"
588,3222877,"b'MSDN says ""[When this standard format specifier is used, the formatting or parsing operation always uses the invariant culture](http://msdn.microsoft.com/en-us/library/az4se3k1.aspx#RFC1123)"" so explicitly specifying the invariant culture may be redundant.\n'"
1081,19708499,"b'What are `4`, `6` and `128`? Are there constants or an enum you can use for these values?\n'"
6672,168514034,"b'It already was bad enough, but not it seems even worse! \xf0\x9f\x98\x84 \r\n\r\n(could you fix the unicode here, please?)'"
440,1565473,b'comment ?? string.Empty\n\nSame idea for the similar others\n'
440,1565479,b'If that solution is only used for unit-testing it should be moved under Test/\n'
440,1565549,"b""Generally better to use string's Equals or Compare with StringComparison.*IgnoreCase \n"""
440,1565559,b'Nitpick space issue\n'
440,1565579,"b""Doesn't hugely matter, take what .NET does\n"""
440,1565593,b'Casing is off in the above three properties\n'
440,1565604,"b'Yes, should be good\n'"
440,1565614,"b""Avoid using the 'private' keyword as it's the default visibility\n"""
440,1565746,"b""My preference would be yes but since the rest of these uses this pattern, let's not change it\n"""
440,1565761,"b'Could be a bug on our Path handling, if you can register a bug for that or look into it yourself\n'"
440,1565772,b'Use a HashSet instead loaded with the invalid chars array. You will have one foreach loop iterating on the path and calling Contains on the HashSet.\n'
440,1565779,b'if the key is supposed to be a simple alphanumeric string id then yes\n'
603,3501397,"b'Since have to do a somewhat fragile string comparison, prefer using "" specialname "" as the test value (both trailing and leading space) so that we avoid rare false positives (e.g. someone actually using ""specialname"" as one of the method argument name).\n'"
717,5443795,b'Yeah. It will be easily fixable with a proper way to access the underlying connection (and have access to its *Async methods).\n'
8736,188786462,"b'The Roslyn compilers can be made to encode a metadata constant of `null` for *any* parameter type, e.g. in this scenario:\r\n\r\n```csharp\r\nvoid Method<T>(T arg = default(T)) { }\r\n```\r\n\r\nBecause the type of `T` is unknown at compile-time, the Roslyn compilers always encode `default(T)` as `null`.\r\n\r\nFor roundtripping, it should perhaps be possible to do the same with Reflection.Emit. (I need to check again how this works on .NET.) The above `if`s might collide with this particular scenario.'"
8736,188787411,"b'Also, the Roslyn C# compiler generally encodes `default(SomeStruct)` as a `null` metadata constant:\r\n\r\n```\r\nstruct SomeStruct { }\r\n\r\nvoid Method(SomeStruct arg = default(SomeStruct)) { }\r\n```\r\n\r\n(`decimal` and `DateTime` are notable exceptions because they can be encoded in custom attributes, too, which the C# compiler does for `decimal` and the VB.NET compiler does for both types.)\r\n\r\nAgain, it should be possible to do the same with Reflection.Emit, and these `if`s might collide with that.'"
8736,188788377,"b'This check might fail if `t` is `Nullable<SomeEnum>`. You would then be unable to set the default value for a nullable enum parameter.\r\n\r\nYou might have to ""unwrap"" nullable types before the check, e.g.:\r\n\r\n```csharp\r\nvar unpackedIfNullableT = Nullable.GetUnderlyingType(t) ?? t;\r\nif (unpackedIfNullableT.IsEnum) ...\r\n```'"
8736,188789789,"b'Oh, and if `t` is a reference type, `null` should definitely be an allowed default value (in fact, the only one, except for strings). Looks like the above `if`s collide with that, too.'"
8736,188791761,"b'What if `t` is `Nullable<T>` where `T` is an unsupported type? For example, what if `t == typeof(decimal?)`? In that case, an exception should be thrown as well.'"
776,6895543,b'Redundant whitespace! :D\n'
842,8517678,b'Please add spacing between the operands. Should be:\n\nitem != null\n'
874,8952960,"b""Shouldn't this be marked with a MonoTODO, since it's not really used anywhere?\n"""
967,10862692,b'Spaces between function name and paranthesis please.\n'
967,10862693,b'Same here in tests.\n'
967,10862696,b'Remove the redundant this.\n'
999,11876554,b'Please put spaces after if and function call.\n'
999,11876558,b'Same here.\n'
1007,12038871,b'Missing space before opening parenthesis.\n'
1007,12038891,b'I think there is an enum for these.\n'
1007,12038902,b'Missing space here too.\n'
1007,12038905,b'And the lines below.\n'
977,13072352,b'Space before parentheses here too.\n'
1080,13308697,b'The indentation is off. The surrounding code uses 2 tabs here.\n'
1080,13310015,b'trailing whitespace here.\n'
1122,14057819,"b""The space on the star on `MonoDomain * domain` doesn't match the surrounding code.\n"""
